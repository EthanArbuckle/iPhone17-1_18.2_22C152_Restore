uint64_t *sub_1CD40D558(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _OWORD *a7, _OWORD *a8, _OWORD *a9, unsigned int *a10, _OWORD *a11)
{
  uint64_t *v17;
  uint64_t v20;
  char v21;
  void *v22;
  uint64_t v23;
  void v24[14];

  v24[12] = *MEMORY[0x1E4F143B8];
  v22 = v24;
  v23 = 0x600000000;
  v20 = a6;
  v21 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v22, (uint64_t)&v20);
  sub_1CD3D5F48(a1, (uint64_t)&v22, a7);
  sub_1CD4016E0(a1, (uint64_t)&v22, a8, a9, a10, a11);
  v17 = sub_1CD801044(a1, a2, a3, a4, a5, (uint64_t *)v22, v23);
  if (v22 != v24) {
    free(v22);
  }
  return v17;
}

uint64_t *sub_1CD40D680(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7, _OWORD *a8, _OWORD *a9, unsigned int *a10, _OWORD *a11)
{
  v20[12] = *MEMORY[0x1E4F143B8];
  v18 = v20;
  uint64_t v19 = 0x600000000;
  sub_1CD40D9A0(a1, (uint64_t)&v18, a6, a7, a8, a9, a10, a11);
  v16 = sub_1CD801044(a1, a2, a3, a4, a5, (uint64_t *)v18, v19);
  if (v18 != v20) {
    free(v18);
  }
  return v16;
}

void sub_1CD40D770(uint64_t a1)
{
}

void sub_1CD40D780()
{
  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD40D7A8(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, _OWORD *a5, _OWORD *a6, int *a7, _OWORD *a8)
{
  uint64_t v15 = a3;
  char v16 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v15);
  uint64_t v15 = *a4;
  char v16 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v15);
  sub_1CD40D850(a1, a2, a5, a6, a7, a8);
}

void sub_1CD40D850(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4, int *a5, _OWORD *a6)
{
  sub_1CD3D5F48(a1, a2, a3);
  sub_1CD3D5F48(a1, a2, a4);
  uint64_t v11 = *a5;
  char v12 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v11);
  sub_1CD3D5F48(a1, a2, a6);
}

void sub_1CD40D8DC(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, _OWORD *a5, _OWORD *a6, _OWORD *a7, int *a8, _OWORD *a9)
{
  uint64_t v16 = a3;
  char v17 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v16);
  uint64_t v16 = *a4;
  char v17 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v16);
  sub_1CD3D5F48(a1, a2, a5);
  sub_1CD40D850(a1, a2, a6, a7, a8, a9);
}

void sub_1CD40D9A0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, _OWORD *a5, _OWORD *a6, unsigned int *a7, _OWORD *a8)
{
  uint64_t v15 = a3;
  char v16 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v15);
  uint64_t v15 = *a4;
  char v16 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v15);
  sub_1CD4016E0(a1, a2, a5, a6, a7, a8);
}

void sub_1CD40DA44(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBEC10, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBA02270;
    v3[1] = &v1;
    v2 = v3;
    std::__call_once(&qword_1EBCBEC10, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

uint64_t sub_1CD40DAB4(uint64_t a1)
{
  sub_1CB8483A0(a1, (uint64_t)&unk_1EBCBEC08);
  *(void *)uint64_t v2 = &unk_1F25F2638;
  *(void *)(v2 + 256) = 0;
  *(void *)(v2 + 264) = 0;
  *(void *)(v2 + 248) = 0;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  *(void *)(v2 + 320) = 0;
  *(_DWORD *)(v2 + 328) = dword_1EBCBED58;
  *(void *)(v2 + 332) = 0x300000000;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)v2);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBEC10, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CBA02270;
    v6[1] = &PassRegistry;
    v5 = v6;
    std::__call_once(&qword_1EBCBEC10, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CD40DB90(uint64_t a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::TargetPassConfig::ID);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&unk_1EA61EFE3);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)&unk_1EA61EFE3);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&unk_1EA61EFE4);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)&unk_1EA61EFE4);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::MachineDominatorTree::ID);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineDominatorTree::ID);
  llvm::AnalysisUsage::addRequiredID(this, llvm::MachineLoopInfo::ID);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::MachineLoopInfo::ID);

  llvm::MachineFunctionPass::getAnalysisUsage(a1, (uint64_t)this);
}

uint64_t sub_1CD40DC78(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v11[0] = *(_DWORD *)(a2 + 4);
    v11[4] = 0;
    unint64_t v8 = sub_1CBA0E760(a1, (unint64_t)v11, 1);
    uint64_t v9 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 8);
    long long v10 = *(_OWORD *)v8;
    *(void *)(v9 + 16) = *(void *)(v8 + 16);
    *(_OWORD *)uint64_t v9 = v10;
  }
  else
  {
    v4 = (_DWORD *)(*(void *)a1 + 24 * v3);
    _DWORD *v4 = *(_DWORD *)(a2 + 4);
    v4[4] = 0;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 8) + 1;
  uint64_t v6 = *(void *)a1 + 24 * v5;
  *(_DWORD *)(a1 + 8) = v5;
  return v6 - 24;
}

uint64_t sub_1CD40DD20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  if (*(void *)(a2 + 24) != a3)
  {
    llvm::MachineDominatorTree::applySplitCriticalEdges(*(void ****)(a1 + 312));
    llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates();
  }
  return 1;
}

unsigned __int8 **sub_1CD40E038(uint64_t a1, llvm::MachineBasicBlock *this)
{
  FirstTerminator = (unint64_t *)llvm::MachineBasicBlock::getFirstTerminator(this);
  sub_1CB9173F0((uint64_t)this, FirstTerminator, *(void *)(a1 + 24), (unint64_t *)a1);
  uint64_t v6 = 0;
  result = sub_1CB8F69CC((unsigned __int8 **)(a1 + 56), &v6);
  if (v6) {
    return (unsigned __int8 **)llvm::MetadataTracking::untrack((uint64_t)&v6, v6);
  }
  return result;
}

uint64_t sub_1CD40E0A0(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 24) != a3)
  {
    llvm::MachineDominatorTree::applySplitCriticalEdges(*(void ****)(result + 312));
    llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates();
  }
  return result;
}

uint64_t sub_1CD40E1D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = 0;
  v27[1] = 0;
  int v28 = 0;
  uint64_t v6 = (uint64_t *)(*(void *)(a1 + 280) + 248);
  v25[0] = a3;
  v22[0] = 0;
  uint64_t v7 = 0;
  if (sub_1CB834D78(v6, v25, v22)) {
    uint64_t v7 = *(void *)(v22[0] + 8);
  }
  v25[0] = 0;
  v25[1] = 0;
  int v26 = 0;
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  if (!v8) {
    goto LABEL_18;
  }
  uint64_t v9 = *(uint64_t **)a2;
  uint64_t v10 = 8 * v8;
  do
  {
    uint64_t v11 = *v9++;
    uint64_t v24 = v11;
    int v23 = 0;
    sub_1CD40E370((uint64_t)v22, (uint64_t)v25, &v24, &v23);
    v10 -= 8;
  }
  while (v10);
  uint64_t v12 = *(unsigned int *)(a2 + 8);
  if (v12)
  {
    char v13 = 0;
    v14 = *(uint64_t **)a2;
    uint64_t v15 = 8 * v12;
    do
    {
      uint64_t v16 = *v14;
      if (!v7
        || ((char v17 = sub_1CB896AE8(v7 + 56, *(void *)(v16 + 24)), v18 = *(void *)(v7 + 64),
                                                                  v18 != *(void *)(v7 + 56))
          ? (uint64_t v19 = 72)
          : (uint64_t v19 = 76),
            v17 != (void *)(v18 + 8 * *(unsigned int *)(v7 + v19))))
      {
        *(_DWORD *)(a1 + 332) = 0;
        if (sub_1CD40DD20(a1, v16, a3) == 1)
        {
          sub_1CD40E0A0(a1, v16, a3);
          char v13 = 1;
        }
        sub_1CD3C7F68(v27);
      }
      ++v14;
      v15 -= 8;
    }
    while (v15);
    uint64_t v21 = v27[0];
  }
  else
  {
LABEL_18:
    uint64_t v21 = 0;
    char v13 = 0;
  }
  MEMORY[0x1D25D9CD0](v25[0], 8);
  MEMORY[0x1D25D9CD0](v21, 8);
  return v13 & 1;
}

uint64_t sub_1CD40E370(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t v12 = 0;
  uint64_t result = sub_1CD40EA84(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  uint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD40EB88(a2, a3, v12);
    uint64_t v9 = (void *)result;
    *(void *)uint64_t result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 16) = v10;
  return result;
}

void sub_1CD40E410()
{
}

void sub_1CD40E424(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F25F2638;
  uint64_t v2 = *((void *)a1 + 31);
  *((void *)a1 + 31) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  sub_1CBA0E6AC(a1);
}

void sub_1CD40E4A4(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F25F2638;
  uint64_t v2 = *((void *)a1 + 31);
  *((void *)a1 + 31) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_1CBA0E6AC(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD40E538()
{
}

uint64_t sub_1CD40E574@<X0>(_DWORD *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v12 = 0;
  uint64_t result = sub_1CBA0E618((uint64_t)a1, a2, &v12);
  uint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD40E608(a1, (uint64_t)a2, a2, v12);
    uint64_t v9 = (void *)result;
    *(void *)uint64_t result = *a2;
    *(void *)(result + 8) = *a3;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a1 + 16 * a1[4];
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v11;
  *(unsigned char *)(a4 + 16) = v10;
  return result;
}

void *sub_1CD40E608(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = a1[2];
  unsigned int v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD40E6BC((uint64_t)a1, v7);
  uint64_t v9 = 0;
  sub_1CBA0E618((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096) {
    --a1[3];
  }
  return a4;
}

void *sub_1CD40E6BC(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD40E788(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD40E788(uint64_t result, void *a2, void *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v10 = 0;
      uint64_t result = sub_1CBA0E618(v5, a2, &v10);
      uint64_t v9 = v10;
      *uint64_t v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1CD40E838(uint64_t a1, char *a2, _OWORD *a3, _WORD *a4, unsigned char **a5)
{
  uint64_t v10 = sub_1CB883A14(a1, 0, 0);
  *(unsigned char *)(v10 + 128) = 0;
  *(void *)(v10 + 136) = &unk_1F25EDE58;
  *(void *)(v10 + 144) = 0;
  *(void *)uint64_t v10 = &unk_1F26440A0;
  *(void *)(v10 + 152) = &unk_1F2643CC0;
  *(void *)(v10 + 160) = &unk_1F25EDE78;
  *(void *)(v10 + 184) = v10 + 160;
  size_t v11 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v11);
  *(_OWORD *)(a1 + 32) = *a3;
  *(_WORD *)(a1 + 10) = *(_WORD *)(a1 + 10) & 0xFFF8 | *a4 & 7;
  uint64_t v12 = *a5;
  *(unsigned char *)(a1 + 128) = **a5;
  *(unsigned char *)(a1 + 145) = 1;
  *(unsigned char *)(a1 + 144) = *v12;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t sub_1CD40E960(uint64_t a1, char *a2, _OWORD *a3, _WORD *a4, int **a5)
{
  uint64_t v10 = sub_1CB883A14(a1, 0, 0);
  *(_DWORD *)(v10 + 128) = 0;
  *(void *)(v10 + 136) = &unk_1F25EA1B0;
  *(void *)(v10 + 144) = 0;
  *(void *)uint64_t v10 = &unk_1F2643F00;
  *(void *)(v10 + 152) = &unk_1F2643DB0;
  *(void *)(v10 + 160) = &unk_1F25EA168;
  *(void *)(v10 + 184) = v10 + 160;
  size_t v11 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v11);
  *(_OWORD *)(a1 + 32) = *a3;
  *(_WORD *)(a1 + 10) = *(_WORD *)(a1 + 10) & 0xFFF8 | *a4 & 7;
  int v12 = **a5;
  *(_DWORD *)(a1 + 128) = v12;
  *(unsigned char *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = v12;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t sub_1CD40EA84(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 16 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_4;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

void *sub_1CD40EB18(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CD40EA84(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  unsigned int v5 = v7;
  if ((v4 & 1) == 0)
  {
    unsigned int v5 = sub_1CD40EB88(a1, a2, v7);
    void *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

void *sub_1CD40EB88(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD40EC3C(a1, v6);
  uint64_t v8 = 0;
  sub_1CD40EA84(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CD40EC3C(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD40ED08(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD40ED08(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CD40EA84(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      uint64_t v10 = v11;
      *uint64_t v11 = *(void *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

void *sub_1CD40EDC0(uint64_t *a1, void *a2)
{
  int v7 = 0;
  char v4 = sub_1CD40EE24(a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD40EEC0((uint64_t)a1, (uint64_t)a2, a2, v7);
    void *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_1CD40EE24(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    int v7 = (void *)(*a1 + 16 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          uint64_t v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        int v7 = (void *)(v4 + 16 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_4;
        }
      }
      uint64_t result = 0;
      if (v10) {
        int v7 = v10;
      }
    }
  }
  else
  {
    int v7 = 0;
    uint64_t result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

void *sub_1CD40EEC0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_3:
    sub_1CD40EF74(a1, v7);
    uint64_t v9 = 0;
    sub_1CD40EE24((uint64_t *)a1, a3, &v9);
    a4 = v9;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3) {
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CD40EF74(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD40F040(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD40F040(uint64_t result, void *a2, void *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v10 = 0;
      uint64_t result = sub_1CD40EE24((uint64_t *)v5, a2, &v10);
      uint64_t v9 = v10;
      *uint64_t v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1CD40F0F8(uint64_t a1, uint64_t a2, BOOL a3, unsigned int a4)
{
  int v6 = *(unsigned __int16 *)(a2 + 24);
  if (v6 == 428 || v6 == 192)
  {
    uint64_t v11 = *(void *)(a2 + 32);
    uint64_t v8 = (uint64_t *)(v11 + 120);
    uint64_t v9 = (BOOL *)(v11 + 128);
    uint64_t v10 = (uint64_t *)(v11 + 160);
  }
  else
  {
    if (v6 != 190)
    {
      __int16 v18 = sub_1CBA0EA7C(a2, a3, a4, *(unsigned __int8 *)(a1 + 104), *(void *)(*(void *)(a1 + 96) + 16));
      *(unsigned char *)(a1 + 2) |= (v18 & 0x300) == 512;
      return v18 & 1;
    }
    uint64_t v7 = *(void *)(a2 + 32);
    uint64_t v8 = (uint64_t *)(v7 + 40);
    uint64_t v9 = (BOOL *)(v7 + 48);
    uint64_t v10 = (uint64_t *)(v7 + 80);
  }
  uint64_t v12 = *v10;
  uint64_t v13 = v10[1];
  unsigned __int16 v14 = sub_1CBA0EA7C(*v8, *v9, a4, *(unsigned __int8 *)(a1 + 104), *(void *)(*(void *)(a1 + 96) + 16));
  if ((v14 & 1) == 0) {
    return 0;
  }
  unsigned __int16 v15 = v14;
  unsigned __int16 v16 = sub_1CBA0EA7C(v12, v13, a4, *(unsigned __int8 *)(a1 + 104), *(void *)(*(void *)(a1 + 96) + 16));
  if ((v16 & 1) == 0 || (unsigned __int16)(v16 & v15) < 0x100u) {
    return 0;
  }
  *(unsigned char *)(a1 + 2) |= (v16 & v15 & 0x300) == 512;
  return 1;
}

uint64_t sub_1CD40F224(uint64_t a1, _DWORD *a2, long long *a3, long long *a4, int a5, int a6)
{
  long long v10 = *a3;
  long long v17 = *a4;
  long long v18 = v10;
  long long v11 = *a4;
  long long v15 = *a3;
  long long v16 = v11;
  uint64_t v12 = &v18;
  uint64_t v13 = &v17;
  if ((sub_1CBA0ED1C(a1, a2, (uint64_t *)&v18, (uint64_t *)&v17, a6, a5 ^ 1u) & 1) != 0
    || !*(unsigned char *)(a1 + 105)
    && a5
    && (uint64_t v12 = &v16, v13 = &v15, (sub_1CBA0ED1C(a1, a2, (uint64_t *)&v16, (uint64_t *)&v15, a6, 0) & 1) != 0))
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t result = 0;
    uint64_t v13 = &v17;
    uint64_t v12 = &v18;
  }
  *(void *)(a1 + 64) = *(void *)v12;
  *(_DWORD *)(a1 + 72) = *((_DWORD *)v12 + 2);
  *(void *)(a1 + 80) = *(void *)v13;
  *(_DWORD *)(a1 + 88) = *((_DWORD *)v13 + 2);
  return result;
}

uint64_t sub_1CD40F308(uint64_t a1, uint64_t *a2, int a3)
{
  BOOL v6 = sub_1CB8F5164(a1, *a2, a2[1], 0, 0);
  uint64_t v7 = *a2;
  if (v6)
  {
    uint64_t v8 = *(void *)(v7 + 32);
    *(void *)&long long v33 = *(void *)v8;
    DWORD2(v33) = *(_DWORD *)(v8 + 8);
    *(void *)&long long v32 = *(void *)(v8 + 40);
    DWORD2(v32) = *(_DWORD *)(v8 + 48);
    uint64_t v9 = a1;
    long long v10 = a2;
    int v11 = a3;
    return sub_1CD40F224(v9, v10, &v33, &v32, 1, v11);
  }
  if (*(_WORD *)(v7 + 24) != 57)
  {
    *(void *)&long long v33 = *a2;
    DWORD2(v33) = *((_DWORD *)a2 + 2);
    *(void *)&long long v32 = sub_1CD7EBF14(*(void *)(*(void *)(a1 + 96) + 16), 0, (const llvm::APInt *)(a1 + 8), *(llvm **)(a1 + 32), *(void *)(a1 + 40), 0, 0);
    DWORD2(v32) = v23;
    uint64_t v9 = a1;
    long long v10 = a2;
    int v11 = 0;
    return sub_1CD40F224(v9, v10, &v33, &v32, 1, v11);
  }
  uint64_t v14 = *(void *)(v7 + 32);
  *(void *)&long long v33 = *(void *)v14;
  DWORD2(v33) = *(_DWORD *)(v14 + 8);
  *(void *)&long long v32 = *(void *)(v14 + 40);
  DWORD2(v32) = *(_DWORD *)(v14 + 48);
  uint64_t v12 = sub_1CD40F224(a1, a2, &v33, &v32, 0, 0);
  uint64_t v15 = *(void *)(a1 + 80);
  int v16 = *(unsigned __int16 *)(v15 + 24);
  if (v16 != 35 && v16 != 11)
  {
    uint64_t v24 = *(void *)(*(void *)(a1 + 96) + 16);
    uint64_t v25 = *(void *)(v15 + 40) + 16 * *(unsigned int *)(a1 + 88);
    int v26 = *(llvm **)v25;
    uint64_t v27 = *(void *)(v25 + 8);
    int v28 = sub_1CD7EBF14(v24, 0, (const llvm::APInt *)(a1 + 8), *(llvm **)v25, v27, 0, 0);
    uint64_t v31 = *(void *)(v24 + 832);
    if (v31) {
      LOWORD(v31) = *(_WORD *)(v31 + 8);
    }
    uint64_t v21 = sub_1CCFDED5C(v24, 57, (const llvm::APInt *)(a1 + 8), v26, v27, (uint64_t)v28, v29, v30, *(void *)(a1 + 80), *(void *)(a1 + 88), v31);
    goto LABEL_15;
  }
  uint64_t v18 = *(void *)(v15 + 80);
  uint64_t v19 = (void *)(v18 + 24);
  if (*(_DWORD *)(v18 + 32) >= 0x41u) {
    uint64_t v19 = (void *)*v19;
  }
  v20 = (void *)*v19;
  if (v20)
  {
    uint64_t v21 = sub_1CD7EBF14(*(void *)(*(void *)(a1 + 96) + 16), -(int)v20, (const llvm::APInt *)(a1 + 8), (llvm *)5, 0, 0, 0);
LABEL_15:
    *(void *)(a1 + 80) = v21;
    *(_DWORD *)(a1 + 88) = v22;
  }
  return v12;
}

uint64_t sub_1CD40F52C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned char *a12)
{
  unsigned __int8 v13 = a5;
  char v17 = a9;
  v126[0] = a9;
  v126[1] = a10;
  *(void *)(a1 + 48) = a7;
  uint64_t v18 = (unsigned __int8 *)(a1 + 48);
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 40) = a6;
  *(void *)(a1 + 56) = a8;
  uint64_t v19 = *a2;
  v20 = *(unsigned __int8 **)(*a2 + 64);
  v119 = v20;
  if (v20) {
    llvm::MetadataTracking::track((uint64_t)&v119, v20, 2);
  }
  unsigned int v120 = *(_DWORD *)(v19 + 60);
  sub_1CB8F69CC((unsigned __int8 **)(a1 + 8), &v119);
  *(_DWORD *)(a1 + 16) = v120;
  if (v119) {
    llvm::MetadataTracking::untrack((uint64_t)&v119, v119);
  }
  *(void *)(a1 + 24) = a3;
  *(_WORD *)a1 = 0;
  *(unsigned char *)(a1 + 2) = 0;
  uint64_t v21 = *a2;
  int v22 = *(unsigned __int8 **)(*a2 + 64);
  v124 = v22;
  if (v22) {
    llvm::MetadataTracking::track((uint64_t)&v124, v22, 2);
  }
  int v125 = *(_DWORD *)(v21 + 60);
  if ((*(_DWORD *)(a1 + 108) & 0xFFFEFFFF) == 2)
  {
    char v92 = a3;
    long long v123 = *(_OWORD *)a2;
    uint64_t v23 = v123;
    if (*(_WORD *)(v123 + 24) == 201)
    {
      uint64_t v24 = *(unsigned __int8 **)(v123 + 40);
      if (*v24 == v13 && (v13 || *((void *)v24 + 1) == a6))
      {
        uint64_t v25 = *(void *)(v123 + 32);
        uint64_t v23 = *(void *)v25;
        *(void *)&long long v123 = *(void *)v25;
        DWORD2(v123) = *(_DWORD *)(v25 + 8);
      }
    }
    uint64_t v26 = *(void *)(*(void *)(a1 + 96) + 16);
    uint64_t v91 = *((void *)&v123 + 1);
    uint64_t v27 = sub_1CD7EB80C(v26, v23, *((uint64_t *)&v123 + 1), (uint64_t)&v124, 4, 0);
    sub_1CD7F121C(v26, v27, v28, 0, (uint64_t)&v119);
    uint64_t v29 = v122;
    unsigned int v118 = v122;
    if (v122 > 0x40) {
      operator new[]();
    }
    uint64_t v30 = v121;
    v117 = v121;
    unsigned int v112 = v120;
    if (v120 > 0x40) {
      operator new[]();
    }
    v111 = v119;
    sub_1CBA14940((uint64_t)&v111);
    unsigned int v114 = v112;
    v113 = v111;
    unsigned int v112 = 0;
    llvm::APInt::operator+=((uint64_t)&v113, 1uLL);
    unsigned int v93 = v114;
    unsigned int v116 = v114;
    v36 = v113;
    v115 = v113;
    unsigned int v114 = 0;
    if (v112 >= 0x41 && v111) {
      MEMORY[0x1D25D9CB0](v111, 0x1000C8000313F17);
    }
    if (v29 > 0x40) {
      BOOL v37 = memcmp(v30, v36, ((unint64_t)(v29 + 63) >> 3) & 0x3FFFFFF8) == 0;
    }
    else {
      BOOL v37 = v36 == v30;
    }
    int v38 = v37;
    int v94 = v38;
    sub_1CB8F1EEC((uint64_t)&v105, v120, 0);
    BOOL v39 = 0;
    if ((llvm::APInt::compare((llvm::APInt *)&v117, (const llvm::APInt *)&v105) & 0x80000000) == 0)
    {
      sub_1CB8F1EEC((uint64_t)&v109, v120, 65520);
      BOOL v39 = (int)llvm::APInt::compare((llvm::APInt *)&v115, (const llvm::APInt *)&v109) < 1;
      if (v110 >= 0x41)
      {
        if (v109) {
          MEMORY[0x1D25D9CB0](v109, 0x1000C8000313F17);
        }
      }
    }
    if (v106 >= 0x41 && v105) {
      MEMORY[0x1D25D9CB0](v105, 0x1000C8000313F17);
    }
    if ((*(unsigned char *)(a1 + 110) & 1) == 0 || !sub_1CD40F308(a1, (uint64_t *)&v123, a11)) {
      goto LABEL_75;
    }
    if ((v94 | !v39) == 1)
    {
      int v89 = 0;
      *(_WORD *)a1 = 0;
      *(unsigned char *)(a1 + 2) = 0;
    }
    else
    {
      int v89 = 1;
    }
    sub_1CD7F121C(*(void *)(*(void *)(a1 + 96) + 16), *(void *)(a1 + 64), *(void *)(a1 + 72), 0, (uint64_t)&v105);
    unsigned int v110 = v108;
    uint64_t v88 = v108;
    if (v108 > 0x40) {
      operator new[]();
    }
    v109 = __src;
    unsigned int v100 = v106;
    __s1 = __src;
    if (v106 > 0x40) {
      operator new[]();
    }
    v99 = v105;
    sub_1CBA14940((uint64_t)&v99);
    unsigned int v102 = v100;
    __s2 = v99;
    unsigned int v100 = 0;
    llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
    unsigned int v87 = v102;
    unsigned int v104 = v102;
    v40 = __s2;
    v103 = __s2;
    unsigned int v102 = 0;
    if (v100 >= 0x41 && v99) {
      MEMORY[0x1D25D9CB0](v99, 0x1000C8000313F17);
    }
    if (v88 > 0x40)
    {
      if (!memcmp(__s1, v40, ((unint64_t)(v88 + 63) >> 3) & 0x3FFFFFF8)) {
        goto LABEL_67;
      }
    }
    else if (v40 == __s1)
    {
      goto LABEL_67;
    }
    sub_1CB8F1EEC((uint64_t)&v97, v106, 0);
    if ((llvm::APInt::compare((llvm::APInt *)&v109, (const llvm::APInt *)&v97) & 0x80000000) != 0)
    {
      BOOL v41 = 1;
    }
    else
    {
      sub_1CB8F1EEC((uint64_t)&v95, v106, 65520);
      BOOL v41 = (int)llvm::APInt::compare((llvm::APInt *)&v103, (const llvm::APInt *)&v95) > 0;
      if (v96 >= 0x41 && v95)
      {
        BOOL v85 = v41;
        MEMORY[0x1D25D9CB0](v95, 0x1000C8000313F17);
        BOOL v41 = v85;
      }
    }
    if (v98 >= 0x41 && v97)
    {
      BOOL v86 = v41;
      MEMORY[0x1D25D9CB0](v97, 0x1000C8000313F17);
      BOOL v41 = v86;
    }
    if (!v41)
    {
LABEL_68:
      if (v87 >= 0x41 && v40) {
        MEMORY[0x1D25D9CB0](v40, 0x1000C8000313F17);
      }
      if (v88 >= 0x41 && __s1) {
        MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
      }
      sub_1CB8F0DC4((uint64_t)&v105);
      char v17 = a9;
      if (v89)
      {
        uint64_t v35 = 1;
LABEL_81:
        if (v93 >= 0x41 && v36) {
          MEMORY[0x1D25D9CB0](v36, 0x1000C8000313F17);
        }
        if (v29 >= 0x41 && v30) {
          MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
        }
        sub_1CB8F0DC4((uint64_t)&v119);
        goto LABEL_88;
      }
LABEL_75:
      if ((v94 | !v39) == 1)
      {
        char v42 = v17;
        uint64_t v43 = *(void *)(v23 + 40);
        v44 = *(llvm **)v43;
        uint64_t v45 = *(void *)(v43 + 8);
        uint64_t v46 = *(void *)(*(void *)(a1 + 96) + 16);
        v47 = sub_1CD7EBF14(v46, 16, (const llvm::APInt *)&v124, *(llvm **)v43, v45, 0, 0);
        uint64_t v50 = *(void *)(v46 + 832);
        if (v50) {
          LOWORD(v50) = *(_WORD *)(v50 + 8);
        }
        *(void *)(a1 + 64) = sub_1CCFDED5C(v46, 56, (const llvm::APInt *)&v124, v44, v45, v23, v91, v49, (uint64_t)v47, v48, v50);
        *(_DWORD *)(a1 + 72) = v51;
        v52 = sub_1CD7EBF14(*(void *)(*(void *)(a1 + 96) + 16), -16 >> v92, (const llvm::APInt *)&v124, *(llvm **)(a1 + 48), *(void *)(a1 + 56), 0, 0);
        char v17 = v42;
      }
      else
      {
        uint64_t v54 = *a2;
        *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 2);
        *(void *)(a1 + 64) = v54;
        v52 = sub_1CD7EBF14(*(void *)(*(void *)(a1 + 96) + 16), 0, (const llvm::APInt *)&v124, **(llvm ***)(*a2 + 40), *(void *)(*(void *)(*a2 + 40) + 8), 0, 0);
      }
      uint64_t v35 = 0;
      *(void *)(a1 + 80) = v52;
      *(_DWORD *)(a1 + 88) = v53;
      goto LABEL_81;
    }
LABEL_67:
    int v89 = 0;
    *(_WORD *)a1 = 0;
    *(unsigned char *)(a1 + 2) = 0;
    goto LABEL_68;
  }
  uint64_t v31 = *a2;
  if (*(_WORD *)(*a2 + 24) == 201)
  {
    long long v32 = *(unsigned __int8 **)(v31 + 40);
    if (*v32 == v13 && (*v32 || *((void *)v32 + 1) == a6))
    {
      uint64_t v33 = *(void *)(v31 + 32);
      uint64_t v34 = *(void *)v33;
      *((_DWORD *)a2 + 2) = *(_DWORD *)(v33 + 8);
      *a2 = v34;
    }
  }
  uint64_t v35 = sub_1CD40F308(a1, a2, a11);
LABEL_88:
  uint64_t v55 = *(void *)(a1 + 80);
  int v56 = *(unsigned __int16 *)(v55 + 24);
  if (v56 == 35 || v56 == 11)
  {
    uint64_t v57 = *(void *)(v55 + 80);
    unsigned int v58 = *(_DWORD *)(v57 + 32);
    uint64_t v59 = v58 > 0x40 ? **(void **)(v57 + 24) : (uint64_t)(*(void *)(v57 + 24) << -(char)v58) >> -(char)v58;
    if (v59 == (__int16)v59) {
      *(unsigned char *)(a1 + 1) = 1;
    }
  }
  uint64_t v60 = *(void *)(a1 + 64);
  int v61 = *(unsigned __int16 *)(v60 + 24);
  if (v61 == 35 || v61 == 11)
  {
    uint64_t v62 = *(void *)(v60 + 80);
    v63 = (void *)(v62 + 24);
    if (*(_DWORD *)(v62 + 32) >= 0x41u) {
      v63 = (void *)*v63;
    }
    if (!*v63) {
      *(unsigned char *)a1 = 1;
    }
  }
  if (v17) {
    unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)v126);
  }
  else {
    unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v126);
  }
  unsigned int v66 = ExtendedSizeInBits;
  if (v65 == 1) {
  if (*v18)
  }
    unsigned int v67 = sub_1CB87E200(v18);
  else {
    unsigned int v67 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v18);
  }
  unsigned int v69 = v67;
  if (v68 == 1) {
  if (v66 == 16)
  }
  {
    v70 = *(llvm::APFloatBase **)(*(void *)(a1 + 96) + 16);
    uint64_t v71 = *(void *)(a1 + 64);
    v72 = *(void **)(a1 + 72);
    uint64_t v75 = *((void *)v70 + 104);
    if (v75) {
      __int16 v74 = *(_WORD *)(v75 + 8);
    }
    else {
      __int16 v74 = 0;
    }
    uint64_t v76 = 4;
  }
  else
  {
    if (v66 == 64) {
      goto LABEL_122;
    }
    v70 = *(llvm::APFloatBase **)(*(void *)(a1 + 96) + 16);
    uint64_t v71 = *(void *)(a1 + 64);
    v72 = *(void **)(a1 + 72);
    uint64_t v73 = *((void *)v70 + 104);
    if (v73) {
      __int16 v74 = *(_WORD *)(v73 + 8);
    }
    else {
      __int16 v74 = 0;
    }
    uint64_t v76 = 5;
  }
  *(void *)(a1 + 64) = sub_1CD7F3564(v70, (const char *)0xC9, (uint64_t)&v124, (llvm *)v76, 0, v71, v72, v74);
  *(_DWORD *)(a1 + 72) = v77;
LABEL_122:
  v78 = *(llvm::APFloatBase **)(*(void *)(a1 + 96) + 16);
  if (v69 == 32) {
    uint64_t v79 = 5;
  }
  else {
    uint64_t v79 = 4;
  }
  uint64_t v80 = *((void *)v78 + 104);
  if (v80) {
    __int16 v81 = *(_WORD *)(v80 + 8);
  }
  else {
    __int16 v81 = 0;
  }
  *(void *)(a1 + 80) = sub_1CD7F3564(v78, (const char *)0xC9, (uint64_t)&v124, (llvm *)v79, 0, *(void *)(a1 + 80), *(void **)(a1 + 88), v81);
  *(_DWORD *)(a1 + 88) = v82;
  if (a12) {
    char v83 = v35;
  }
  else {
    char v83 = 1;
  }
  if ((v83 & 1) == 0 && *(unsigned char *)(a1 + 2)) {
    *a12 = 1;
  }
  if (v124) {
    llvm::MetadataTracking::untrack((uint64_t)&v124, v124);
  }
  return v35;
}

uint64_t (***sub_1CD40FF28())()
{
  return off_1EC7DF9D8;
}

void sub_1CD40FF34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (**(unsigned __int16 **)(a5 + 16) > 0xF51u)
  {
    switch(**(_WORD **)(a5 + 16))
    {
      case 0xF83:
        unsigned int v7 = 3977;
        break;
      case 0xF84:
        unsigned int v7 = 3978;
        break;
      case 0xF85:
        unsigned int v7 = 3979;
        break;
      case 0xF86:
        unsigned int v7 = 3980;
        break;
      case 0xF87:
        unsigned int v7 = 3981;
        break;
      default:
        unsigned int v7 = 3976;
        break;
    }
  }
  else
  {
    unsigned int v7 = 3835;
    switch(**(_WORD **)(a5 + 16))
    {
      case 0xEF2:
        unsigned int v7 = 3832;
        break;
      case 0xEF3:
        unsigned int v7 = 3833;
        break;
      case 0xEF4:
        unsigned int v7 = 3834;
        break;
      case 0xEF5:
        break;
      case 0xEF6:
        unsigned int v7 = 3836;
        break;
      case 0xEF7:
        unsigned int v7 = 3837;
        break;
      default:
        JUMPOUT(0);
    }
  }
  int v8 = *(_DWORD *)(*(void *)(a5 + 32) + 4);
  unsigned int VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(a4, (uint64_t)&off_1E66AB080, "", 0);
  *(void *)(a5 + 16) = *(void *)(a3 + 8) + 48 * v7;
  llvm::MachineOperand::setReg(*(void *)(a5 + 32), VirtualRegister);
  uint64_t v10 = a5;
  if ((*(unsigned char *)a5 & 4) == 0)
  {
    uint64_t v10 = a5;
    if ((*(_WORD *)(a5 + 44) & 8) != 0)
    {
      uint64_t v10 = a5;
      do
        uint64_t v10 = *(void *)(v10 + 8);
      while ((*(_WORD *)(v10 + 44) & 8) != 0);
    }
  }
  int v11 = sub_1CB85AA4C(*(void *)(a5 + 24), *(unint64_t **)(v10 + 8), (unsigned __int8 **)(a5 + 56), *(void *)(a3 + 8) + 51072, v8);
  unsigned __int8 v13 = v12;
  v14[0] = 1;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  llvm::MachineInstr::addOperand(v12, v11, (const llvm::MachineOperand *)v14);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  v14[0] = 0x4000000;
  v14[1] = VirtualRegister;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)v14);
  v14[0] = 1;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)v14);
  v14[0] = 1;
  uint64_t v15 = 0;
  uint64_t v16 = 128;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)v14);
}

void sub_1CD4101DC(llvm::GPUIterateCombiner *a1)
{
  llvm::GPUIterateCombiner::~GPUIterateCombiner(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD410214(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4)
{
  unint64_t v15 = a3;
  uint64_t v8 = sub_1CBA15978(&v15);
  unsigned int v9 = v15;
  if ((v15 & 2) != 0) {
    uint64_t v10 = 0x800000000000000;
  }
  else {
    uint64_t v10 = 0x8000000000000;
  }
  if ((v10 & v15) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v7);
    unsigned int v9 = v15;
  }
  uint64_t v12 = sub_1CD410EF4(a1, a2, v8, (unsigned __int16)(v9 >> 3));
  if ((a4 & 2) != 0) {
    uint64_t v13 = 0x800000000000000;
  }
  else {
    uint64_t v13 = 0x8000000000000;
  }
  if ((v13 & a4) != 0) {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v11);
  }
  return sub_1CD41109C(v12, a2, v8, (unsigned __int16)(a4 >> 3));
}

uint64_t sub_1CD4102E0(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  sub_1CD617588(a2, (uint64_t)v8);
  sub_1CD617848(a2, 0, v6);
  uint64_t v4 = sub_1CBA5A538(a1, 4, (uint64_t)v8, (uint64_t)v6);
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  if (v9 == v8)
  {
    (*(void (**)(void *))(v8[0] + 32))(v8);
  }
  else if (v9)
  {
    (*(void (**)(void))(*v9 + 40))();
  }
  return v4;
}

uint64_t sub_1CD410440(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  sub_1CD617434(a2, (uint64_t)v8);
  sub_1CD6178CC(a2, (uint64_t)v6);
  uint64_t v4 = sub_1CBA5A538(a1, 3, (uint64_t)v8, (uint64_t)v6);
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  if (v9 == v8)
  {
    (*(void (**)(void *))(v8[0] + 32))(v8);
  }
  else if (v9)
  {
    (*(void (**)(void))(*v9 + 40))();
  }
  return v4;
}

uint64_t sub_1CD41059C(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1F25F28E8;
  v3[1] = sub_1CBA5AA3C;
  uint64_t v4 = v3;
  uint64_t v1 = sub_1CBA59E14(a1, 6, (uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

uint64_t sub_1CD410694(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1F25F28E8;
  v3[1] = sub_1CBA5AA3C;
  uint64_t v4 = v3;
  uint64_t v1 = sub_1CBA1AD18(a1, (uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

uint64_t sub_1CD410788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  v8[0] = &unk_1F25F2930;
  v8[1] = a3 | (unint64_t)(a2 << 32);
  unsigned int v9 = v8;
  sub_1CD6177F0(a2, a3, v6);
  uint64_t v4 = sub_1CBA1ABC0(a1, (uint64_t)v8, (uint64_t)v6);
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  if (v9 == v8)
  {
    (*(void (**)(void *))(v8[0] + 32))(v8);
  }
  else if (v9)
  {
    (*(void (**)(void))(*v9 + 40))();
  }
  return v4;
}

uint64_t sub_1CD4108F8(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  sub_1CD617560(0, (uint64_t)v4);
  uint64_t v2 = sub_1CBA59E14(a1, 6, (uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

uint64_t sub_1CD4109D4(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  sub_1CD617560(0, (uint64_t)v4);
  uint64_t v2 = sub_1CBA59E14(a1, 9, (uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

uint64_t sub_1CD410AB0(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  sub_1CD61740C(0, (uint64_t)v6);
  sub_1CD61781C(0, 0, v4);
  uint64_t v2 = sub_1CBA5A538(a1, 1, (uint64_t)v6, (uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return v2;
}

uint64_t sub_1CD410C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = a2;
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  sub_1CD61750C(a2, (uint64_t)v10);
  v8[0] = &unk_1F261C798;
  v8[1] = v4 | (unint64_t)(a3 << 32);
  unsigned int v9 = v8;
  uint64_t v6 = sub_1CBA5A538(a1, 2, (uint64_t)v10, (uint64_t)v8);
  if (v9 == v8)
  {
    (*(void (**)(void *))(v8[0] + 32))(v8);
  }
  else if (v9)
  {
    (*(void (**)(void))(*v9 + 40))();
  }
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void))(*v11 + 40))();
  }
  return v6;
}

uint64_t sub_1CD410D80(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1F25F28E8;
  v3[1] = sub_1CBA5AA3C;
  unsigned int v4 = v3;
  uint64_t v1 = sub_1CBA59E14(a1, 9, (uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

uint64_t sub_1CD410E7C(uint64_t a1)
{
  *(void *)a1 = &unk_1F261CA88;
  sub_1CBA6249C((char **)(a1 + 35456));
  for (uint64_t i = 0; i != -35448; i -= 168)
    sub_1CBA627B0((char **)(a1 + 35296 + i));
  return a1;
}

uint64_t sub_1CD410EF4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = operator new(0x20uLL);
  *(void *)uint64_t v8 = &unk_1F25F27C8;
  v8[2] = a2;
  *((void *)v8 + 2) = a3;
  v8[6] = a4;
  uint64_t v14 = v8;
  v11[0] = &unk_1F25F2810;
  v11[1] = a2 | (unint64_t)(a4 << 32);
  uint64_t v12 = v11;
  uint64_t v9 = sub_1CBA5A538(a1, 4, (uint64_t)v13, (uint64_t)v11);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  if (v14 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void))(*v14 + 40))();
  }
  return v9;
}

uint64_t sub_1CD41109C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = operator new(0x20uLL);
  *(void *)uint64_t v8 = &unk_1F25F2858;
  v8[2] = a2;
  *((void *)v8 + 2) = a3;
  v8[6] = a4;
  uint64_t v14 = v8;
  v11[0] = &unk_1F25F28A0;
  v11[1] = a2 | (unint64_t)(a4 << 32);
  uint64_t v12 = v11;
  uint64_t v9 = sub_1CBA5A538(a1, 3, (uint64_t)v13, (uint64_t)v11);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  if (v14 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void))(*v14 + 40))();
  }
  return v9;
}

void sub_1CD411248()
{
}

__n128 sub_1CD41125C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F27C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CD411290(uint64_t a1, uint64_t a2)
{
  return sub_1CD411298((unsigned int *)(a1 + 8), a2);
}

BOOL sub_1CD411298(unsigned int *a1, uint64_t a2)
{
  unint64_t v8 = *(void *)(*(void *)(a2 + 8) + 8 * *a1);
  BOOL v2 = (v8 & 0xFFFFFFFFFFFFFFF9) == 0 || (v8 & 4) == 0;
  if (v2 || sub_1CBA15978(&v8) != *((void *)a1 + 1)) {
    return 0;
  }
  unsigned int v6 = v8;
  uint64_t v7 = 0x800000000000000;
  if ((v8 & 2) == 0) {
    uint64_t v7 = 0x8000000000000;
  }
  if ((v7 & v8) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v4);
    unsigned int v6 = v8;
  }
  return a1[4] > (unsigned __int16)(v6 >> 3);
}

void sub_1CD411344()
{
}

void *sub_1CD411358(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25F2810;
  result[1] = v3;
  return result;
}

uint64_t sub_1CD4113A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  unint64_t v6 = *(void *)(*(void *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8));
  unint64_t v4 = sub_1CBA15978(&v6);
  sub_1CBA5A95C(v3, v4);
  return *(unsigned int *)(a1 + 8);
}

void sub_1CD4113FC()
{
}

__n128 sub_1CD411410(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F2858;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CD411444(uint64_t a1, uint64_t a2)
{
  return sub_1CD41144C((unsigned int *)(a1 + 8), a2);
}

BOOL sub_1CD41144C(unsigned int *a1, uint64_t a2)
{
  unint64_t v8 = *(void *)(*(void *)(a2 + 8) + 8 * *a1);
  BOOL v2 = (v8 & 0xFFFFFFFFFFFFFFF9) == 0 || (v8 & 4) == 0;
  if (v2 || sub_1CBA15978(&v8) != *((void *)a1 + 1)) {
    return 0;
  }
  unsigned int v6 = v8;
  uint64_t v7 = 0x800000000000000;
  if ((v8 & 2) == 0) {
    uint64_t v7 = 0x8000000000000;
  }
  if ((v7 & v8) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v4);
    unsigned int v6 = v8;
  }
  return a1[4] < (unsigned __int16)(v6 >> 3);
}

void sub_1CD4114F8()
{
}

void *sub_1CD41150C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25F28A0;
  result[1] = v3;
  return result;
}

uint64_t sub_1CD411558(uint64_t a1, uint64_t a2)
{
  return sub_1CD411560((unsigned int *)(a1 + 8), a2);
}

uint64_t sub_1CD411560(unsigned int *a1, uint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v6 = *(void *)(*(void *)(a2 + 8) + 8 * *a1);
  unint64_t v4 = sub_1CBA15978(&v6);
  if (v3 != 1) {
    sub_1CBA5A95C(v3, v4);
  }
  return *a1;
}

void sub_1CD4115C0()
{
}

void *sub_1CD4115D4(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25F28E8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CD411620(uint64_t a1, char a2, const void *a3, uint64_t a4, const void *a5, uint64_t a6)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  sub_1CC70A830(0, a3, a4, (uint64_t)v14);
  sub_1CC70A830(1, a5, a6, (uint64_t)v12);
  sub_1CBA1A9A0((uint64_t)v14, (uint64_t)v12, (uint64_t)v16);
  uint64_t v10 = sub_1CBA59E14(a1, a2, (uint64_t)v16);
  if (v17 == v16)
  {
    (*(void (**)(void *))(v16[0] + 32))(v16);
  }
  else if (v17)
  {
    (*(void (**)(void))(*v17 + 40))();
  }
  if (v13 == v12)
  {
    (*(void (**)(void *))(v12[0] + 32))(v12);
  }
  else if (v13)
  {
    (*(void (**)(void))(*v13 + 40))();
  }
  if (v15 == v14)
  {
    (*(void (**)(void *))(v14[0] + 32))(v14);
  }
  else if (v15)
  {
    (*(void (**)(void))(*v15 + 40))();
  }
  return v10;
}

uint64_t sub_1CD411804(uint64_t a1, char a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  sub_1CD617164(0, 1u, a3, a4, (uint64_t)v8);
  uint64_t v6 = sub_1CBA59E14(a1, a2, (uint64_t)v8);
  if (v9 == v8)
  {
    (*(void (**)(void *))(v8[0] + 32))(v8);
  }
  else if (v9)
  {
    (*(void (**)(void))(*v9 + 40))();
  }
  return v6;
}

void sub_1CD4118F4()
{
}

void *sub_1CD411908(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25F2930;
  result[1] = v3;
  return result;
}

uint64_t sub_1CD411950(uint64_t result, void *a2)
{
  *a2 = &unk_1F25F2930;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t sub_1CD411980(uint64_t result, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(result + 8);
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      return sub_1CD411A30(result, a2);
    }
    else
    {
      if (*(unsigned int *)(result + 12) < a2) {
        sub_1CD411A9C();
      }
      if (v2 != a2)
      {
        uint64_t v3 = 3 * v2;
        uint64_t v4 = *(void *)result + 24 * v2;
        uint64_t v5 = 24 * a2 - 8 * v3;
        do
        {
          *(void *)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
          *(_DWORD *)(v4 + 16) = 0;
          v4 += 24;
          v5 -= 24;
        }
        while (v5);
      }
      *(_DWORD *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t sub_1CD411A30(uint64_t result, uint64_t a2)
{
  int v2 = a2;
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 != a2)
  {
    uint64_t v5 = 3 * v4;
    uint64_t v6 = 24 * a2 - 8 * v5;
    uint64_t v7 = (uint64_t *)(*(void *)result + 8 * v5 - 24);
    do
    {
      uint64_t v8 = *v7;
      v7 -= 3;
      __n128 result = MEMORY[0x1D25D9CD0](v8, 8);
      v6 += 24;
    }
    while (v6);
  }
  *(_DWORD *)(v3 + 8) = v2;
  return result;
}

void sub_1CD411A9C()
{
}

uint64_t sub_1CD411B10(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)result;
    uint64_t v4 = *(void *)result + 24 * v2;
    do
    {
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 0;
      *(void *)a2 = *(void *)v3;
      *(void *)uint64_t v3 = 0;
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(v3 + 8);
      *(_DWORD *)(v3 + 8) = 0;
      int v5 = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(v3 + 12);
      *(_DWORD *)(v3 + 12) = v5;
      int v6 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(v3 + 16);
      *(_DWORD *)(v3 + 16) = v6;
      v3 += 24;
      a2 += 24;
    }
    while (v3 != v4);
    uint64_t v7 = *(unsigned int *)(result + 8);
    if (v7)
    {
      uint64_t v8 = 24 * v7;
      uint64_t v9 = *(void *)result - 24;
      do
      {
        __n128 result = MEMORY[0x1D25D9CD0](*(void *)(v9 + v8), 8);
        v8 -= 24;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t sub_1CD411BBC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    uint64_t v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *uint64_t v7 = 2;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (*(void *)a2 != 2 && *(void *)a2 != 4)
    {
      int v11 = 0;
      __n128 result = sub_1CBA5AB68(v5, (void *)a2, &v11);
      uint64_t v10 = v11;
      *int v11 = *(void *)a2;
      *((unsigned char *)v10 + 8) = *(unsigned char *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_1CD411C6C(uint64_t a1, char a2, const void *a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  sub_1CC70A830(0, a3, a4, (uint64_t)v12);
  sub_1CC70A830(1, a3, a4, (uint64_t)v10);
  sub_1CBA1A9A0((uint64_t)v12, (uint64_t)v10, (uint64_t)v14);
  uint64_t v8 = sub_1CBA59E14(a1, a2, (uint64_t)v14);
  if (v15 == v14)
  {
    (*(void (**)(void *))(v14[0] + 32))(v14);
  }
  else if (v15)
  {
    (*(void (**)(void))(*v15 + 40))();
  }
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void))(*v11 + 40))();
  }
  if (v13 == v12)
  {
    (*(void (**)(void *))(v12[0] + 32))(v12);
  }
  else if (v13)
  {
    (*(void (**)(void))(*v13 + 40))();
  }
  return v8;
}

uint64_t sub_1CD411E50(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (unsigned __int16)(a3 >> 3);
  uint64_t v7 = (unsigned __int16)(a3 >> 19);
  if ((a3 & 2) == 0) {
    uint64_t v7 = (a3 >> 19);
  }
  if ((a3 & 4) != 0) {
    uint64_t v6 = v7;
  }
  if (a3) {
    uint64_t v8 = (a3 >> 3);
  }
  else {
    uint64_t v8 = v6;
  }
  sub_1CD6174B4(a2, v8, v13);
  sub_1CD6177C8(a2, a3, v11);
  uint64_t v9 = sub_1CBA5A538(a1, 2, (uint64_t)v13, (uint64_t)v11);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  if (v14 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void))(*v14 + 40))();
  }
  return v9;
}

uint64_t sub_1CD411FDC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (unsigned __int16)(a3 >> 3);
  uint64_t v7 = (unsigned __int16)(a3 >> 19);
  if ((a3 & 2) == 0) {
    uint64_t v7 = (a3 >> 19);
  }
  if ((a3 & 4) != 0) {
    uint64_t v6 = v7;
  }
  if (a3) {
    uint64_t v8 = (a3 >> 3);
  }
  else {
    uint64_t v8 = v6;
  }
  sub_1CD6174E0(a2, v8, v13);
  sub_1CD6177C8(a2, a3, v11);
  uint64_t v9 = sub_1CBA5A538(a1, 1, (uint64_t)v13, (uint64_t)v11);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  if (v14 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void))(*v14 + 40))();
  }
  return v9;
}

uint64_t sub_1CD412168(uint64_t a1, char a2, const void *a3, uint64_t a4, const void *a5, uint64_t a6, const void *a7, uint64_t a8)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  sub_1CC70A830(0, a3, a4, (uint64_t)v22);
  sub_1CC70A830(1, a5, a6, (uint64_t)v18);
  sub_1CC70A830(2, a7, a8, (uint64_t)v16);
  sub_1CBA1A9A0((uint64_t)v18, (uint64_t)v16, (uint64_t)v20);
  sub_1CBA1A9A0((uint64_t)v22, (uint64_t)v20, (uint64_t)v24);
  uint64_t v14 = sub_1CBA59E14(a1, a2, (uint64_t)v24);
  if (v25 == v24)
  {
    (*(void (**)(void *))(v24[0] + 32))(v24);
  }
  else if (v25)
  {
    (*(void (**)(void *))(*v25 + 40))(v25);
  }
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  if (v17 == v16)
  {
    (*(void (**)(void *))(v16[0] + 32))(v16);
  }
  else if (v17)
  {
    (*(void (**)(void))(*v17 + 40))();
  }
  if (v19 == v18)
  {
    (*(void (**)(void *))(v18[0] + 32))(v18);
  }
  else if (v19)
  {
    (*(void (**)(void))(*v19 + 40))();
  }
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
  }
  else if (v23)
  {
    (*(void (**)(void))(*v23 + 40))();
  }
  return v14;
}

void sub_1CD412448()
{
}

void sub_1CD4124B8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2)
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = 32 * v2;
    do
    {
      *a2 = a2 + 2;
      a2[1] = 0x400000000;
      if (*(_DWORD *)(v5 + 8)) {
        sub_1CB927804((uint64_t)a2, v5);
      }
      v5 += 32;
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
    uint64_t v7 = *(unsigned int *)(a1 + 8);
    if (v7)
    {
      uint64_t v8 = *(void *)a1;
      uint64_t v9 = 32 * v7;
      do
      {
        uint64_t v10 = *(void **)(v8 + v9 - 32);
        if ((void *)(v8 + v9 - 16) != v10) {
          free(v10);
        }
        v9 -= 32;
      }
      while (v9);
    }
  }
}

void *sub_1CD412564(void *a1)
{
  *a1 = &unk_1F25F2978;
  sub_1CBA62B24(a1 + 1);
  return a1;
}

void sub_1CD4125A8(void *a1)
{
  *a1 = &unk_1F25F2978;
  sub_1CBA62B24(a1 + 1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD41260C(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F2978;
  sub_1CBA5A4A0((uint64_t)(a2 + 1), a1 + 8);

  return sub_1CBA5A4A0((uint64_t)(a2 + 5), a1 + 40);
}

void *sub_1CD412670(uint64_t a1)
{
  return sub_1CBA62B24((void *)(a1 + 8));
}

uint64_t sub_1CD412678(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t result = *(void *)(a1 + 32);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void sub_1CD4126DC(void *a1)
{
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }

  operator delete(a1);
}

uint64_t sub_1CD412778(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_1F25F3500;
  *(void *)(result + 8) = *(void *)(a2 + 440);
  *(unsigned char *)(result + 16) = *(unsigned char *)(a2 + 452);
  *(_WORD *)(result + 17) = *(_WORD *)(a2 + 453);
  *(void *)(result + 20) = *(void *)(a2 + 460);
  uint64_t v2 = *(void *)(a2 + 468);
  if ((v2 & 0xFF00000000) != 0)
  {
    *(_DWORD *)(result + 28) = v2;
    char v3 = 1;
  }
  else
  {
    char v3 = 0;
    *(unsigned char *)(result + 28) = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

uint64_t sub_1CD4127E8(uint64_t a1, llvm::yaml::IO *a2)
{
  return sub_1CD4127F8(a2, a1);
}

uint64_t sub_1CD4127F8(llvm::yaml::IO *a1, uint64_t a2)
{
  sub_1CD3EDEB8(a1, (uint64_t)"VertexInputRegCount", (unsigned int *)(a2 + 8), 0);
  sub_1CD3EDEB8(a1, (uint64_t)"SampleScratchReg", (unsigned int *)(a2 + 12), 0);
  sub_1CD4129B0(a1, (uint64_t)"HasIndirectBranches", (unsigned char *)(a2 + 16), 0);
  sub_1CD4129B0(a1, (uint64_t)"HasSIMDPermuteRegReserved", (unsigned char *)(a2 + 17), 0);
  sub_1CD4129B0(a1, (uint64_t)"FrameFinalized", (unsigned char *)(a2 + 18), 0);
  sub_1CD412C2C(a1, (uint64_t)"SpillSlotFI", (int *)(a2 + 20), 0);
  sub_1CD412C2C(a1, (uint64_t)"TLSAllocSize", (int *)(a2 + 24), 0);
  uint64_t v5 = 0;
  return sub_1CBA6564C(a1, (uint64_t)"LMSpillAddressRegister", a2 + 28, &v5, 0);
}

uint64_t sub_1CD412908(uint64_t result, uint64_t a2)
{
  *(void *)(result + 440) = *(void *)(a2 + 8);
  *(unsigned char *)(result + 452) = *(unsigned char *)(a2 + 16);
  *(_WORD *)(result + 453) = *(_WORD *)(a2 + 17);
  *(void *)(result + 460) = *(void *)(a2 + 20);
  if (*(unsigned char *)(a2 + 32))
  {
    int v2 = *(unsigned __int8 *)(result + 472);
    *(_DWORD *)(result + 468) = *(_DWORD *)(a2 + 28);
    if (!v2) {
      *(unsigned char *)(result + 472) = 1;
    }
  }
  else
  {
    *(void *)(result + 468) = 0;
  }
  return result;
}

void sub_1CD412960(uint64_t a1)
{
  sub_1CBA65860(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD41299C()
{
}

uint64_t sub_1CD4129B0(llvm::yaml::IO *a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v8 = 0;
  char v7 = 0;
  uint64_t result = (*(uint64_t (**)(llvm::yaml::IO *, uint64_t, uint64_t, void, char *, uint64_t *))(*(void *)a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if (result)
  {
    sub_1CD412A70(a1, a3);
    return (*(uint64_t (**)(llvm::yaml::IO *, uint64_t))(*(void *)a1 + 128))(a1, v8);
  }
  return result;
}

void sub_1CD412A70(llvm::yaml::IO *a1, unsigned char *a2)
{
  if ((*(unsigned int (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1))
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    LODWORD(v16) = 0;
    char v20 = 0;
    uint64_t v21 = 0;
    uint64_t v23 = &v24;
    int v22 = 0;
    uint64_t v15 = (const char *)&unk_1F2646F30;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    int Context = llvm::yaml::IO::getContext(a1);
    llvm::yaml::ScalarTraits<BOOL,void>::output(a2, Context, (llvm::raw_ostream *)&v15);
    uint64_t v5 = v23;
    char v6 = *((unsigned char *)v23 + 23);
    BOOL v7 = v6 < 0;
    if (v6 < 0) {
      uint64_t v5 = *v23;
    }
    uint64_t v8 = (void *)(v6 & 0x7F);
    if (v7) {
      uint64_t v8 = v23[1];
    }
    v14[0] = v5;
    v14[1] = v8;
    (*(void (**)(llvm::yaml::IO *, void *, void))(*(void *)a1 + 216))(a1, v14, 0);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v15);
    if (SHIBYTE(v26) < 0) {
      operator delete(v24);
    }
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    (*(void (**)(llvm::yaml::IO *, void **, void))(*(void *)a1 + 216))(a1, &v24, 0);
    uint64_t v9 = (char *)v24;
    uint64_t v10 = v25;
    uint64_t v11 = llvm::yaml::IO::getContext(a1);
    uint64_t v12 = llvm::yaml::ScalarTraits<BOOL,void>::input(v9, v10, v11, a2);
    if (v13)
    {
      LOWORD(v19) = 261;
      uint64_t v15 = v12;
      uint64_t v16 = v13;
      (*(void (**)(llvm::yaml::IO *, const char **))(*(void *)a1 + 248))(a1, &v15);
    }
  }
}

uint64_t sub_1CD412C2C(llvm::yaml::IO *a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v8 = 0;
  char v7 = 0;
  uint64_t result = (*(uint64_t (**)(llvm::yaml::IO *, uint64_t, uint64_t, void, char *, uint64_t *))(*(void *)a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if (result)
  {
    sub_1CD412CEC(a1, a3);
    return (*(uint64_t (**)(llvm::yaml::IO *, uint64_t))(*(void *)a1 + 128))(a1, v8);
  }
  return result;
}

void sub_1CD412CEC(llvm::yaml::IO *a1, int *a2)
{
  if ((*(unsigned int (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1))
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    LODWORD(v16) = 0;
    char v20 = 0;
    uint64_t v21 = 0;
    uint64_t v23 = &v24;
    int v22 = 0;
    uint64_t v15 = (const char *)&unk_1F2646F30;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t Context = llvm::yaml::IO::getContext(a1);
    llvm::yaml::ScalarTraits<int,void>::output(a2, Context, (llvm::raw_ostream *)&v15);
    uint64_t v5 = v23;
    char v6 = *((unsigned char *)v23 + 23);
    BOOL v7 = v6 < 0;
    if (v6 < 0) {
      uint64_t v5 = *v23;
    }
    uint64_t v8 = (void *)(v6 & 0x7F);
    if (v7) {
      uint64_t v8 = v23[1];
    }
    v14[0] = v5;
    v14[1] = v8;
    (*(void (**)(llvm::yaml::IO *, void *, void))(*(void *)a1 + 216))(a1, v14, 0);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v15);
    if (SHIBYTE(v26) < 0) {
      operator delete(v24);
    }
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    (*(void (**)(llvm::yaml::IO *, void **, void))(*(void *)a1 + 216))(a1, &v24, 0);
    uint64_t v9 = (uint64_t)v24;
    uint64_t v10 = v25;
    uint64_t v11 = llvm::yaml::IO::getContext(a1);
    uint64_t v12 = llvm::yaml::ScalarTraits<int,void>::input(v9, v10, v11, (unint64_t *)a2);
    if (v13)
    {
      LOWORD(v19) = 261;
      uint64_t v15 = v12;
      uint64_t v16 = v13;
      (*(void (**)(llvm::yaml::IO *, const char **))(*(void *)a1 + 248))(a1, &v15);
    }
  }
}

unint64_t sub_1CD412EA8(uint64_t a1, int a2, llvm::EVT *a3, uint64_t a4, uint64_t a5, int a6)
{
  if (sub_1CB87DC14(*(void *)(a1 + 32), *(void *)(a1 + 8), a3, (llvm::Type *)1) == 1) {
    return 4;
  }
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), (llvm::LLVMContext **)a3, (uint64_t)&v22);
  uint64_t v10 = v22;
  if (!a6 && (*((_DWORD *)a3 + 2) & 0xFE) == 0x12)
  {
    unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(a3);
    int v14 = v13;
    unint64_t v15 = sub_1CB87E200(v23);
    BOOL v17 = v16 != 1 && v14 == 1;
    if (!v17 && PrimitiveSizeInBits < v15)
    {
      unsigned __int8 v18 = sub_1CB87DC14(*(void *)(a1 + 32), *(void *)(a1 + 8), a3, 0);
      BOOL v19 = v23[0] == 0;
      if (!v18) {
        BOOL v19 = 1;
      }
      if (a2 == 33)
      {
        if (!v19)
        {
          int v20 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 179 * v23[0] + v18 + 137754);
          goto LABEL_18;
        }
      }
      else if (!v19)
      {
        int v20 = *(_WORD *)(*(void *)(a1 + 32) + 358 * v23[0] + 2 * v18 + 73672) >> 4;
LABEL_18:
        if ((v20 & 0xFFFFFFFB) == 0) {
          return v10;
        }
      }
      unint64_t v21 = sub_1CBA65E40(a1, (uint64_t)a3, a2 != 33, a2 == 33);
      if (__OFADD__(v10, v21)) {
        return ((uint64_t)(v10 + v21) >> 63) ^ 0x8000000000000000;
      }
      else {
        v10 += v21;
      }
    }
  }
  return v10;
}

void sub_1CD413038(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBEE58, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBA66C40;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EBCBEE58, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD4130A8()
{
}

llvm::cl::Option *sub_1CD4130FC(llvm::cl::Option *a1, char *a2, __n128 *a3, unsigned char **a4, _WORD *a5)
{
  uint64_t v10 = sub_1CB883A14((uint64_t)a1, 0, 0);
  *(unsigned char *)(v10 + 128) = 0;
  *(void *)(v10 + 136) = &unk_1F25EDE58;
  *(void *)(v10 + 144) = 0;
  *(void *)uint64_t v10 = &unk_1F26440A0;
  *(void *)(v10 + 152) = &unk_1F2643CC0;
  *(void *)(v10 + 160) = &unk_1F25EDE78;
  *(void *)(v10 + 184) = v10 + 160;
  sub_1CD4131EC(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

__n128 sub_1CD4131EC(uint64_t a1, char *__s, __n128 *a3, unsigned char **a4, _WORD *a5)
{
  size_t v10 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)__s, v10);
  __n128 result = *a3;
  *(__n128 *)(a1 + 32) = *a3;
  uint64_t v12 = *a4;
  *(unsigned char *)(a1 + 128) = **a4;
  *(unsigned char *)(a1 + 145) = 1;
  *(unsigned char *)(a1 + 144) = *v12;
  *(_WORD *)(a1 + 10) = (32 * (*a5 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  return result;
}

void sub_1CD413280(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBEE60, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBA68888;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EBCBEE60, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD4132F0()
{
}

uint64_t sub_1CD413354(uint64_t a1)
{
  int v2 = *(void **)(a1 + 24);
  if (v2 != (void *)(a1 + 40)) {
    free(v2);
  }
  return a1;
}

void *sub_1CD41338C(uint64_t a1)
{
  __n128 result = (void *)llvm::RegisterBankInfo::RegisterBankInfo(a1, (llvm::RegisterBank **)&off_1EA615138, 1);
  *__n128 result = &unk_1F25F3720;
  if ((byte_1EBCBEEC8 & 1) == 0) {
    byte_1EBCBEEC8 = 1;
  }
  return result;
}

uint64_t sub_1CD4133EC(llvm::RegisterBankInfo *a1, uint64_t a2)
{
  v24[8] = *MEMORY[0x1E4F143B8];
  uint64_t InstrMappingImpl = llvm::RegisterBankInfo::getInstrMappingImpl(a1, (const llvm::MachineInstr *)a2);
  if (*(_DWORD *)InstrMappingImpl == -2 || *(void *)(InstrMappingImpl + 8) == 0)
  {
    int v7 = **(unsigned __int16 **)(a2 + 16);
    if ((v7 - 18) <= 0x33 && ((1 << (v7 - 18)) & 0x8000000000003) != 0 || v7 == 0) {
      unsigned int v20 = 1;
    }
    else {
      unsigned int v20 = *(_DWORD *)(a2 + 40);
    }
    uint64_t v10 = *(void *)(*(void *)(*(void *)(a2 + 24) + 32) + 40);
    v23[0] = v24;
    v23[1] = (void *)0x800000000;
    sub_1CD4138E0((uint64_t)v23, v20, 0);
    if (v20)
    {
      uint64_t v11 = 0;
      do
      {
        uint64_t v12 = *(void *)(a2 + 32);
        if (!*(unsigned char *)(v12 + 4 * v11))
        {
          int v13 = *(_DWORD *)(v12 + 4 * v11 + 4);
          if (v13 < 0 && (uint64_t v18 = v13 & 0x7FFFFFFF, v18 < *(_DWORD *)(v10 + 432))) {
            unint64_t v14 = *(void *)(*(void *)(v10 + 424) + 8 * v18);
          }
          else {
            unint64_t v14 = 0;
          }
          unint64_t v22 = v14;
          v21[0] = sub_1CB8F1DC4(&v22);
          v21[1] = v15;
          int v16 = llvm::TypeSize::operator unsigned long long(v21, v15);
          uint64_t ValueMapping = llvm::RegisterBankInfo::getValueMapping(a1, 0, v16, (const llvm::RegisterBank *)&unk_1EBCBEE68);
          *(void *)((char *)v23[0] + v11) = ValueMapping;
        }
        v11 += 8;
      }
      while (8 * v20 != v11);
    }
    OperandsMapping = (const llvm::RegisterBankInfo::ValueMapping *)llvm::RegisterBankInfo::getOperandsMapping((uint64_t)a1, (uint64_t)v23);
    uint64_t InstrMappingImpl = llvm::RegisterBankInfo::getInstructionMappingImpl(a1, 0, -1, 0, OperandsMapping, v20);
    if (v23[0] != v24) {
      free(v23[0]);
    }
  }
  return InstrMappingImpl;
}

void sub_1CD4135CC(uint64_t a1)
{
}

void sub_1CD4135DC()
{
  JUMPOUT(0x1D25D9CE0);
}

BOOL sub_1CD413604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a2 != a3;
}

uint64_t sub_1CD413610()
{
  return 0xFFFFFFFFLL;
}

void sub_1CD41361C(uint64_t a1)
{
  *(void *)a1 = &unk_1F2612AD0;
  llvm::deallocate_buffer(*(llvm **)(a1 + 120), (void *)(16 * *(unsigned int *)(a1 + 136)));
}

void sub_1CD413660()
{
  sub_1CD413690(v0 + 96);
}

void sub_1CD413668()
{
  sub_1CD413724(v0 + 72);
}

void sub_1CD413670()
{
  sub_1CD4137B8(v0 + 48);
}

void sub_1CD413678()
{
  sub_1CD41384C(v0 + 24);
}

uint64_t sub_1CD413680()
{
  return v0;
}

void sub_1CD413690(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  char v3 = *(llvm **)a1;
  if (v2)
  {
    uint64_t v5 = 16 * v2;
    char v6 = (void *)((char *)v3 + 8);
    do
    {
      if (*((_DWORD *)v6 - 2) <= 0xFFFFFFFD)
      {
        uint64_t v7 = *v6;
        *char v6 = 0;
        if (v7) {
          MEMORY[0x1D25D9CE0](v7, 0x1060C40F2FE4B89);
        }
      }
      v6 += 2;
      v5 -= 16;
    }
    while (v5);
    char v3 = *(llvm **)a1;
    uint64_t v4 = (void *)(16 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    uint64_t v4 = 0;
  }
  llvm::deallocate_buffer(v3, v4);
}

void sub_1CD413724(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  char v3 = *(llvm **)a1;
  if (v2)
  {
    uint64_t v5 = 16 * v2;
    char v6 = (void *)((char *)v3 + 8);
    do
    {
      if (*((_DWORD *)v6 - 2) <= 0xFFFFFFFD)
      {
        uint64_t v7 = *v6;
        *char v6 = 0;
        if (v7) {
          MEMORY[0x1D25D9CB0](v7, 0x1060C80ADAFC7CALL);
        }
      }
      v6 += 2;
      v5 -= 16;
    }
    while (v5);
    char v3 = *(llvm **)a1;
    uint64_t v4 = (void *)(16 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    uint64_t v4 = 0;
  }
  llvm::deallocate_buffer(v3, v4);
}

void sub_1CD4137B8(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  char v3 = *(llvm **)a1;
  if (v2)
  {
    uint64_t v5 = 16 * v2;
    char v6 = (void *)((char *)v3 + 8);
    do
    {
      if (*((_DWORD *)v6 - 2) <= 0xFFFFFFFD)
      {
        uint64_t v7 = *v6;
        *char v6 = 0;
        if (v7) {
          MEMORY[0x1D25D9CE0](v7, 0x1060C40ADAFC7CALL);
        }
      }
      v6 += 2;
      v5 -= 16;
    }
    while (v5);
    char v3 = *(llvm **)a1;
    uint64_t v4 = (void *)(16 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    uint64_t v4 = 0;
  }
  llvm::deallocate_buffer(v3, v4);
}

void sub_1CD41384C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  char v3 = *(llvm **)a1;
  if (v2)
  {
    uint64_t v5 = 16 * v2;
    char v6 = (void *)((char *)v3 + 8);
    do
    {
      if (*((_DWORD *)v6 - 2) <= 0xFFFFFFFD)
      {
        uint64_t v7 = *v6;
        *char v6 = 0;
        if (v7) {
          MEMORY[0x1D25D9CE0](v7, 0x1060C40832E3BDALL);
        }
      }
      v6 += 2;
      v5 -= 16;
    }
    while (v5);
    char v3 = *(llvm **)a1;
    uint64_t v4 = (void *)(16 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    uint64_t v4 = 0;
  }
  llvm::deallocate_buffer(v3, v4);
}

uint64_t sub_1CD4138E0(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (*(unsigned int *)(result + 12) < a2)
  {
    *(_DWORD *)(result + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unint64_t v3 = *(unsigned int *)(result + 8);
  if (v3 >= a2) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = *(unsigned int *)(result + 8);
  }
  if (v4)
  {
    uint64_t v5 = *(void **)result;
    do
    {
      *v5++ = a3;
      --v4;
    }
    while (v4);
  }
  unint64_t v6 = v3 - a2;
  if (v3 < a2)
  {
    uint64_t v7 = (void *)(*(void *)result + 8 * v3);
    do
      *v7++ = a3;
    while (!__CFADD__(v6++, 1));
  }
  *(_DWORD *)(result + 8) = a2;
  return result;
}

char *sub_1CD413994(uint64_t a1, int a2)
{
  return off_1E66AA438[a2];
}

double sub_1CD4139A4(uint64_t a1)
{
  uint64_t v1 = llvm::TargetRegisterInfo::TargetRegisterInfo(a1, (uint64_t)&off_1E66AA448, (uint64_t)&off_1E66AA460, (uint64_t)off_1E66AA5D8, (uint64_t)off_1E66AA5D8, (uint64_t)&unk_1CDB134F8, -1, (uint64_t)&unk_1E66AAB88, 0);
  *(void *)uint64_t v1 = &unk_1F25F3770;
  *(void *)(v1 + 8) = "0";
  *(void *)(v1 + 16) = 2559;
  *(_DWORD *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = &off_1E6750770;
  *(void *)(v1 + 64) = &unk_1CDE5AED8;
  *(void *)(v1 + 72) = "R89_R90_R91_R92_R93_R94_R95_R96_R97_R98_R99_R100";
  *(void *)(v1 + 48) = &unk_1CDE6E834;
  *(void *)(v1 + 56) = &unk_1CDE55C70;
  *(void *)(v1 + 40) = 0x1380000002FLL;
  *(void *)(v1 + 80) = "GPR32tup12";
  *(void *)(v1 + 88) = &unk_1CDE5B2D0;
  *(_DWORD *)(v1 + 104) = 182;
  *(void *)(v1 + 96) = &unk_1CDE5B800;
  *(void *)(v1 + 112) = &unk_1CDE780C0;
  *(void *)(v1 + 152) = &unk_1CDE74D10;
  *(void *)(v1 + 160) = &unk_1CDE75924;
  *(void *)(v1 + 136) = &unk_1CDE76538;
  *(void *)(v1 + 144) = &unk_1CDE772FC;
  *(void *)&double result = 0x1B8000001B8;
  *(_OWORD *)(v1 + 120) = xmmword_1CDB0E7C0;
  return result;
}

_UNKNOWN **sub_1CD413AD4()
{
  return &off_1E66AAFF0;
}

uint64_t sub_1CD413AE4()
{
  return 0;
}

uint64_t sub_1CD413AEC()
{
  return 0;
}

char **sub_1CD413AF4()
{
  return off_1E66AB000;
}

uint64_t sub_1CD413B08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  if (!v2)
  {
    uint64_t v2 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 8) + 216))(*(void *)(a2 + 8), a2 + 128, a2);
    *(void *)(a2 + 48) = v2;
  }
  uint64_t v3 = *(void *)(v2 + 468);
  if ((v3 & 0xFF00000000) != 0) {
    return v3;
  }
  else {
    return 0;
  }
}

int32x2_t sub_1CD413B7C(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = 0;
  if (sub_1CBA6E0FC(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v6))
  {
    unint64_t v4 = v6;
    uint64_t v5 = (void *)v6[1];
    if (v5 != v6 + 3) {
      free(v5);
    }
    void *v4 = -8192;
    int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

void sub_1CD413C00(llvm::TargetRegisterInfo *this)
{
  *(void *)this = &unk_1F25F39D8;
  uint64_t v2 = (char *)*((void *)this + 35);
  if (v2 != (char *)this + 296) {
    free(v2);
  }

  llvm::TargetRegisterInfo::~TargetRegisterInfo(this);
}

void sub_1CD413C64(llvm::TargetRegisterInfo *this)
{
  *(void *)this = &unk_1F25F39D8;
  uint64_t v2 = (char *)*((void *)this + 35);
  if (v2 != (char *)this + 296) {
    free(v2);
  }
  llvm::TargetRegisterInfo::~TargetRegisterInfo(this);
}

void sub_1CD413CB0()
{
  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD413CDC()
{
  return 0;
}

uint64_t sub_1CD413CE4()
{
  return 0;
}

uint64_t sub_1CD413CEC(uint64_t result, unsigned int a2, unsigned __int8 a3)
{
  unsigned int v3 = *(_DWORD *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)result + 8 * v3) = a2 | ((unint64_t)a3 << 32);
  ++*(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_1CD413D64(uint64_t a1, char *a2, _WORD *a3, _OWORD *a4, int **a5)
{
  uint64_t v10 = sub_1CB883A14(a1, 0, 0);
  *(_DWORD *)(v10 + 128) = 0;
  *(void *)(v10 + 136) = &unk_1F25EA1B0;
  *(void *)(v10 + 144) = 0;
  *(void *)uint64_t v10 = &unk_1F2643F00;
  *(void *)(v10 + 152) = &unk_1F2643DB0;
  *(void *)(v10 + 160) = &unk_1F25EA168;
  *(void *)(v10 + 184) = v10 + 160;
  size_t v11 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v11);
  *(_WORD *)(a1 + 10) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  *(_OWORD *)(a1 + 32) = *a4;
  int v12 = **a5;
  *(_DWORD *)(a1 + 128) = v12;
  *(unsigned char *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = v12;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

llvm::cl::Option *sub_1CD413E90(llvm::cl::Option *a1, char *a2, _WORD *a3, __n128 *a4, unsigned char **a5)
{
  uint64_t v10 = sub_1CB883A14((uint64_t)a1, 0, 0);
  *(unsigned char *)(v10 + 128) = 0;
  *(void *)(v10 + 136) = &unk_1F25EDE58;
  *(void *)(v10 + 144) = 0;
  *(void *)uint64_t v10 = &unk_1F26440A0;
  *(void *)(v10 + 152) = &unk_1F2643CC0;
  *(void *)(v10 + 160) = &unk_1F25EDE78;
  *(void *)(v10 + 184) = v10 + 160;
  sub_1CD413F80(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

__n128 sub_1CD413F80(uint64_t a1, char *__s, _WORD *a3, __n128 *a4, unsigned char **a5)
{
  size_t v10 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)__s, v10);
  *(_WORD *)(a1 + 10) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  __n128 result = *a4;
  *(__n128 *)(a1 + 32) = *a4;
  int v12 = *a5;
  *(unsigned char *)(a1 + 128) = **a5;
  *(unsigned char *)(a1 + 145) = 1;
  *(unsigned char *)(a1 + 144) = *v12;
  return result;
}

void sub_1CD414014(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBF118, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBA6E5C0;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCBF118, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD414084()
{
}

void sub_1CD4140C0(unsigned int *a1)
{
  unsigned int v2 = *a1;
  int v3 = 1 << (33 - __clz((*a1 >> 1) - 1));
  if (*a1 >= 2) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = 0;
  }
  if ((v2 & 1) != 0 && v4 < 0x21)
  {
    *(void *)a1 = 1;
    uint64_t v5 = a1 + 2;
    size_t v6 = 256;
LABEL_7:
    memset_pattern16(v5, &unk_1CDB15640, v6);
    return;
  }
  if ((v2 & 1) == 0)
  {
    if (v4 == a1[4])
    {
      *(void *)a1 = 0;
      if (v2 < 2) {
        return;
      }
      uint64_t v5 = (void *)*((void *)a1 + 1);
      size_t v6 = 8 * v4;
      goto LABEL_7;
    }
    MEMORY[0x1D25D9CD0](*((void *)a1 + 1), 4);
  }

  sub_1CBA7B090(a1, v4);
}

uint64_t sub_1CD4141A8(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    unsigned int v2 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    unsigned int v2 = (uint64_t *)(*(void *)(a1 + 272) + 8 * a2);
  }
  uint64_t result = *v2;
  if (*v2)
  {
    if ((*(unsigned char *)(result + 3) & 1) == 0)
    {
      uint64_t result = *(void *)(result + 24);
      if (!result) {
        return result;
      }
      if ((*(unsigned char *)(result + 3) & 1) == 0) {
        return 0;
      }
    }
    uint64_t v4 = *(void *)(result + 24);
    if (v4)
    {
      if (*(unsigned char *)(v4 + 3)) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1CD414208(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 4)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CBA7EA08(a1, v11, v11 + 16 * v12);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  uint64_t v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(void *)uint64_t v7 = v8;
      v7[8] = *(unsigned char *)(a1 + v6 + 16);
      v7 += 16;
    }
    v6 += 16;
  }
  while (v6 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CBA7EA08(a1, (uint64_t)v14, (uint64_t)v7);
}

void sub_1CD414394(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBF158, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBA807FC;
    v3[1] = &v1;
    unsigned int v2 = v3;
    std::__call_once(&qword_1EBCBF158, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD414404()
{
}

_DWORD *sub_1CD414440(_DWORD *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[4];
  int v3 = result[2];
  int v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64) {
    int v4 = 64;
  }
  if (v3) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (v5 == v2)
  {
    *((void *)result + 1) = 0;
    if (v2)
    {
      uint64_t v6 = *(_DWORD **)result;
      uint64_t v7 = 8 * v2;
      do
      {
        *uint64_t v6 = -1;
        v6 += 2;
        v7 -= 8;
      }
      while (v7);
    }
  }
  else
  {
    MEMORY[0x1D25D9CD0](*(void *)result, 4);
    return sub_1CB837DF4(v1, v5);
  }
  return result;
}

_DWORD *sub_1CD4144EC(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(int **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)4uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CBA85930(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *uint64_t result = -1;
      result += 2;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

_DWORD *sub_1CD4145B8(uint64_t a1, int *a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    uint64_t v9 = 0;
LABEL_5:
    unint64_t v6 = sub_1CBA85B04(a1, (uint64_t)a2, a2, v9);
    *(void *)unint64_t v6 = *a2;
    return v6;
  }
  int v4 = v3 - 1;
  unsigned int v5 = (37 * *a2) & (v3 - 1);
  unint64_t v6 = (_DWORD *)(*(void *)a1 + 8 * v5);
  int v7 = *v6;
  if (*a2 != *v6)
  {
    uint64_t v10 = 0;
    int v11 = 1;
    while (v7 != -1)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v7 == -2;
      }
      if (v12) {
        uint64_t v10 = v6;
      }
      unsigned int v13 = v5 + v11++;
      unsigned int v5 = v13 & v4;
      unint64_t v6 = (_DWORD *)(*(void *)a1 + 8 * (v13 & v4));
      int v7 = *v6;
      if (*a2 == *v6) {
        return v6;
      }
    }
    if (v10) {
      uint64_t v9 = v10;
    }
    else {
      uint64_t v9 = v6;
    }
    goto LABEL_5;
  }
  return v6;
}

void sub_1CD414678(long long *a1, _WORD *a2, int **a3)
{
  uint64_t v6 = sub_1CB883A14((uint64_t)&qword_1EBCBF160, 0, 0);
  dword_1EBCBF1E0 = 0;
  qword_1EBCBF1E8 = (uint64_t)&unk_1F25EA1B0;
  *(void *)&dword_1EBCBF1F0 = 0;
  qword_1EBCBF160 = (uint64_t)&unk_1F2643F00;
  qword_1EBCBF1F8 = (uint64_t)&unk_1F2643DB0;
  qword_1EBCBF200 = (uint64_t)&unk_1F25EA168;
  qword_1EBCBF218 = (uint64_t)&qword_1EBCBF200;
  llvm::cl::Option::setArgStr(v6, "agx2-set-spill-to-lm-tgt-threadgroup-size", 0x29uLL);
  xmmword_1EBCBF180 = *a1;
  word_1EBCBF16A = word_1EBCBF16A & 0xFFF8 | *a2 & 7;
  dword_1EBCBF1E0 = **a3;
  byte_1EBCBF1F4 = 1;
  dword_1EBCBF1F0 = dword_1EBCBF1E0;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCBF160);
}

void sub_1CD414798(long long *a1, _WORD *a2, int **a3)
{
  uint64_t v6 = sub_1CB883A14((uint64_t)&qword_1EBCBF220, 0, 0);
  dword_1EBCBF2A0 = 0;
  qword_1EBCBF2A8 = (uint64_t)&unk_1F25EA1B0;
  *(void *)&dword_1EBCBF2B0 = 0;
  qword_1EBCBF220 = (uint64_t)&unk_1F2643F00;
  qword_1EBCBF2B8 = (uint64_t)&unk_1F2643DB0;
  qword_1EBCBF2C0 = (uint64_t)&unk_1F25EA168;
  qword_1EBCBF2D8 = (uint64_t)&qword_1EBCBF2C0;
  llvm::cl::Option::setArgStr(v6, "agx2-set-spill-to-lm-tgt-default-lower-bound", 0x2CuLL);
  xmmword_1EBCBF240 = *a1;
  word_1EBCBF22A = word_1EBCBF22A & 0xFFF8 | *a2 & 7;
  dword_1EBCBF2A0 = **a3;
  byte_1EBCBF2B4 = 1;
  dword_1EBCBF2B0 = dword_1EBCBF2A0;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCBF220);
}

void sub_1CD4148B8(long long *a1, _WORD *a2, int **a3)
{
  uint64_t v6 = sub_1CB883A14((uint64_t)&qword_1EBCBF2E0, 0, 0);
  dword_1EBCBF360 = 0;
  qword_1EBCBF368 = (uint64_t)&unk_1F25EA1B0;
  *(void *)&dword_1EBCBF370 = 0;
  qword_1EBCBF2E0 = (uint64_t)&unk_1F2643F00;
  qword_1EBCBF378 = (uint64_t)&unk_1F2643DB0;
  qword_1EBCBF380 = (uint64_t)&unk_1F25EA168;
  qword_1EBCBF398 = (uint64_t)&qword_1EBCBF380;
  llvm::cl::Option::setArgStr(v6, "agx2-set-spill-to-lm-tgt-spilling-room", 0x26uLL);
  xmmword_1EBCBF300 = *a1;
  word_1EBCBF2EA = word_1EBCBF2EA & 0xFFF8 | *a2 & 7;
  dword_1EBCBF360 = **a3;
  byte_1EBCBF374 = 1;
  dword_1EBCBF370 = dword_1EBCBF360;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCBF2E0);
}

void sub_1CD4149D8(long long *a1, _WORD *a2)
{
  uint64_t v4 = sub_1CB883A14((uint64_t)&qword_1EBCBF3A0, 0, 0);
  dword_1EBCBF420 = 0;
  qword_1EBCBF428 = (uint64_t)&unk_1F25EA1B0;
  unk_1EBCBF430 = 0;
  qword_1EBCBF3A0 = (uint64_t)&unk_1F2643F00;
  qword_1EBCBF438 = (uint64_t)&unk_1F2643DB0;
  qword_1EBCBF440 = (uint64_t)&unk_1F25EA168;
  qword_1EBCBF458 = (uint64_t)&qword_1EBCBF440;
  llvm::cl::Option::setArgStr(v4, "agx2-set-spill-to-lm-tgt-occupancy-limit", 0x28uLL);
  xmmword_1EBCBF3C0 = *a1;
  word_1EBCBF3AA = word_1EBCBF3AA & 0xFFF8 | *a2 & 7;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCBF3A0);
}

void sub_1CD414ADC(long long *a1, _WORD *a2)
{
  uint64_t v4 = sub_1CB883A14((uint64_t)&qword_1EBCBF460, 0, 0);
  byte_1EBCBF4E0 = 0;
  qword_1EBCBF4E8 = (uint64_t)&unk_1F25EDE58;
  unk_1EBCBF4F0 = 0;
  qword_1EBCBF460 = (uint64_t)&unk_1F26440A0;
  qword_1EBCBF4F8 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCBF500 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCBF518 = (uint64_t)&qword_1EBCBF500;
  llvm::cl::Option::setArgStr(v4, "agx2-set-spill-to-lm-tgt-handle-unspillable", 0x2BuLL);
  xmmword_1EBCBF480 = *a1;
  word_1EBCBF46A = word_1EBCBF46A & 0xFFF8 | *a2 & 7;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCBF460);
}

void sub_1CD414BE0(_WORD *a1, __n128 *a2, char **a3)
{
  sub_1CB883A14((uint64_t)&qword_1EBCBF5E0, 0, 0);
  byte_1EBCBF660 = 0;
  qword_1EBCBF668 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBCBF670 = 0;
  qword_1EBCBF5E0 = (uint64_t)&unk_1F26440A0;
  qword_1EBCBF678 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCBF680 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCBF698 = (uint64_t)&qword_1EBCBF680;
  sub_1CD414CD0(a1, a2, a3);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCBF5E0);
}

__n128 sub_1CD414CD0(_WORD *a1, __n128 *a2, char **a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCBF5E0, "agx2-set-spill-to-lm-tgt-print-regpressure", 0x2AuLL);
  word_1EBCBF5EA = (32 * (*a1 & 3)) | word_1EBCBF5EA & 0xFF9F;
  __n128 result = *a2;
  xmmword_1EBCBF600 = (__int128)*a2;
  int v7 = *a3;
  byte_1EBCBF660 = **a3;
  byte_1EBCBF671 = 1;
  byte_1EBCBF670 = *v7;
  return result;
}

long long *sub_1CD414D58(uint64_t a1, _DWORD *a2, size_t a3, _DWORD *a4, size_t a5, const std::string::value_type *a6, std::string::size_type a7, uint64_t a8)
{
  __n128 result = llvm::MCSubtargetInfo::InitMCProcessorInfo(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = *(void *)(a1 + 192);
  if (v10) {
    *(unsigned char *)(a1 + 382) = 1;
  }
  if ((v10 & 2) != 0) {
    *(unsigned char *)(a1 + 339) = 1;
  }
  if ((v10 & 4) != 0) {
    *(unsigned char *)(a1 + 400) = 1;
  }
  if ((v10 & 8) != 0) {
    *(unsigned char *)(a1 + 286) = 1;
  }
  if ((v10 & 0x10) != 0) {
    *(unsigned char *)(a1 + 362) = 1;
  }
  if ((v10 & 0x20) != 0) {
    *(unsigned char *)(a1 + 349) = 1;
  }
  if ((v10 & 0x40) != 0) {
    *(unsigned char *)(a1 + 351) = 1;
  }
  if ((v10 & 0x80) != 0) {
    *(unsigned char *)(a1 + 350) = 1;
  }
  if ((v10 & 0x100) != 0) {
    *(unsigned char *)(a1 + 352) = 1;
  }
  if ((v10 & 0x200) != 0) {
    *(unsigned char *)(a1 + 328) = 1;
  }
  if ((v10 & 0x400) != 0) {
    *(unsigned char *)(a1 + 396) = 1;
  }
  if ((v10 & 0x800) != 0) {
    *(unsigned char *)(a1 + 386) = 1;
  }
  if ((v10 & 0x1000) != 0) {
    *(unsigned char *)(a1 + 348) = 1;
  }
  if ((v10 & 0x2000) != 0) {
    *(unsigned char *)(a1 + 284) = 1;
  }
  if ((v10 & 0x4000) != 0) {
    *(unsigned char *)(a1 + 370) = 1;
  }
  if ((v10 & 0x8000) != 0) {
    *(unsigned char *)(a1 + 402) = 1;
  }
  if ((v10 & 0x10000) != 0) {
    *(unsigned char *)(a1 + 407) = 1;
  }
  if ((v10 & 0x20000) != 0) {
    *(unsigned char *)(a1 + 317) = 1;
  }
  if ((v10 & 0x40000) != 0) {
    *(unsigned char *)(a1 + 388) = 1;
  }
  if ((v10 & 0x80000) != 0) {
    *(unsigned char *)(a1 + 280) = 1;
  }
  if ((v10 & 0x100000) != 0) {
    *(unsigned char *)(a1 + 397) = 1;
  }
  if ((v10 & 0x200000) != 0) {
    *(unsigned char *)(a1 + 398) = 1;
  }
  if ((v10 & 0x400000) != 0) {
    *(unsigned char *)(a1 + 347) = 1;
  }
  if ((v10 & 0x800000) != 0) {
    *(unsigned char *)(a1 + 384) = 1;
  }
  if ((v10 & 0x1000000) != 0) {
    *(unsigned char *)(a1 + 363) = 1;
  }
  if ((v10 & 0x2000000) != 0) {
    *(unsigned char *)(a1 + 338) = 1;
  }
  if ((v10 & 0x4000000) != 0) {
    *(unsigned char *)(a1 + 340) = 1;
  }
  if ((v10 & 0x8000000) != 0) {
    *(unsigned char *)(a1 + 371) = 1;
  }
  if ((v10 & 0x10000000) != 0) {
    *(unsigned char *)(a1 + 372) = 1;
  }
  if ((v10 & 0x20000000) != 0) {
    *(unsigned char *)(a1 + 295) = 1;
  }
  if ((v10 & 0x40000000) != 0) {
    *(unsigned char *)(a1 + 401) = 1;
  }
  if ((v10 & 0x80000000) != 0) {
    *(unsigned char *)(a1 + 324) = 1;
  }
  if ((v10 & 0x100000000) != 0) {
    *(unsigned char *)(a1 + 323) = 1;
  }
  if ((v10 & 0x200000000) != 0) {
    *(unsigned char *)(a1 + 318) = 1;
  }
  if ((v10 & 0x400000000) != 0) {
    *(unsigned char *)(a1 + 325) = 1;
  }
  if ((v10 & 0x800000000) != 0) {
    *(unsigned char *)(a1 + 319) = 1;
  }
  if ((v10 & 0x1000000000) != 0) {
    *(unsigned char *)(a1 + 326) = 1;
  }
  if ((v10 & 0x2000000000) != 0) {
    *(unsigned char *)(a1 + 320) = 1;
  }
  if ((v10 & 0x4000000000) != 0) {
    *(unsigned char *)(a1 + 344) = 1;
  }
  if ((v10 & 0x8000000000) != 0) {
    *(unsigned char *)(a1 + 346) = 1;
  }
  if ((v10 & 0x10000000000) != 0) {
    *(unsigned char *)(a1 + 327) = 1;
  }
  if ((v10 & 0x20000000000) != 0) {
    *(unsigned char *)(a1 + 321) = 1;
  }
  if ((v10 & 0x40000000000) != 0) {
    *(unsigned char *)(a1 + 381) = 1;
  }
  if ((v10 & 0x80000000000) != 0) {
    *(unsigned char *)(a1 + 322) = 1;
  }
  if ((v10 & 0x100000000000) != 0) {
    *(unsigned char *)(a1 + 356) = 1;
  }
  if ((v10 & 0x200000000000) != 0) {
    *(unsigned char *)(a1 + 355) = 1;
  }
  if ((v10 & 0x400000000000) != 0) {
    *(unsigned char *)(a1 + 379) = 1;
  }
  if ((v10 & 0x800000000000) != 0) {
    *(unsigned char *)(a1 + 380) = 1;
  }
  if ((v10 & 0x1000000000000) != 0) {
    *(unsigned char *)(a1 + 357) = 1;
  }
  if ((v10 & 0x2000000000000) != 0) {
    *(unsigned char *)(a1 + 358) = 1;
  }
  if ((v10 & 0x4000000000000) != 0) {
    *(unsigned char *)(a1 + 359) = 1;
  }
  if ((v10 & 0x8000000000000) != 0) {
    *(unsigned char *)(a1 + 360) = 1;
  }
  if ((v10 & 0x10000000000000) != 0) {
    *(unsigned char *)(a1 + 394) = 1;
  }
  if ((v10 & 0x20000000000000) != 0) {
    *(unsigned char *)(a1 + 316) = 1;
  }
  if ((v10 & 0x40000000000000) != 0) {
    *(unsigned char *)(a1 + 301) = 1;
  }
  if ((v10 & 0x80000000000000) != 0) {
    *(unsigned char *)(a1 + 378) = 1;
  }
  if ((v10 & 0x100000000000000) != 0) {
    *(unsigned char *)(a1 + 298) = 1;
  }
  if ((v10 & 0x200000000000000) != 0) {
    *(unsigned char *)(a1 + 404) = 1;
  }
  if ((v10 & 0x400000000000000) != 0) {
    *(unsigned char *)(a1 + 376) = 1;
  }
  if ((v10 & 0x800000000000000) != 0) {
    *(unsigned char *)(a1 + 375) = 1;
  }
  if ((v10 & 0x1000000000000000) != 0) {
    *(unsigned char *)(a1 + 329) = 1;
  }
  if ((v10 & 0x2000000000000000) != 0) {
    *(unsigned char *)(a1 + 361) = 1;
  }
  if ((v10 & 0x4000000000000000) != 0) {
    *(unsigned char *)(a1 + 283) = 1;
  }
  if (v10 < 0) {
    *(unsigned char *)(a1 + 392) = 1;
  }
  uint64_t v11 = *(void *)(a1 + 200);
  if (v11) {
    *(unsigned char *)(a1 + 345) = 1;
  }
  if ((v11 & 2) != 0) {
    *(unsigned char *)(a1 + 393) = 1;
  }
  if ((v11 & 4) != 0) {
    *(unsigned char *)(a1 + 405) = 1;
  }
  if ((v11 & 8) != 0) {
    *(unsigned char *)(a1 + 406) = 1;
  }
  if ((v11 & 0x10) != 0) {
    *(unsigned char *)(a1 + 300) = 1;
  }
  if ((v11 & 0x20) != 0) {
    *(unsigned char *)(a1 + 313) = 1;
  }
  if ((v11 & 0x40) != 0) {
    *(unsigned char *)(a1 + 314) = 1;
  }
  if ((v11 & 0x80) != 0) {
    *(unsigned char *)(a1 + 315) = 1;
  }
  if ((v11 & 0x100) != 0) {
    *(unsigned char *)(a1 + 312) = 1;
  }
  if ((v11 & 0x200) != 0) {
    *(unsigned char *)(a1 + 395) = 1;
  }
  if ((v11 & 0x400) != 0) {
    *(unsigned char *)(a1 + 364) = 1;
  }
  if ((v11 & 0x800) != 0) {
    *(unsigned char *)(a1 + 383) = 1;
  }
  if ((v11 & 0x1000) != 0) {
    *(unsigned char *)(a1 + 302) = 1;
  }
  if ((v11 & 0x2000) != 0) {
    *(unsigned char *)(a1 + 311) = 1;
  }
  if ((v11 & 0x4000) != 0) {
    *(unsigned char *)(a1 + 303) = 1;
  }
  if ((v11 & 0x8000) != 0) {
    *(unsigned char *)(a1 + 305) = 1;
  }
  if ((v11 & 0x10000) != 0) {
    *(unsigned char *)(a1 + 306) = 1;
  }
  if ((v11 & 0x20000) != 0) {
    *(unsigned char *)(a1 + 307) = 1;
  }
  if ((v11 & 0x40000) != 0) {
    *(unsigned char *)(a1 + 308) = 1;
  }
  if ((v11 & 0x80000) != 0) {
    *(unsigned char *)(a1 + 309) = 1;
  }
  if ((v11 & 0x100000) != 0) {
    *(unsigned char *)(a1 + 304) = 1;
  }
  if ((v11 & 0x200000) != 0) {
    *(unsigned char *)(a1 + 310) = 1;
  }
  if ((v11 & 0x400000) != 0) {
    *(unsigned char *)(a1 + 399) = 1;
  }
  if ((v11 & 0x800000) != 0) {
    *(unsigned char *)(a1 + 297) = 1;
  }
  if ((v11 & 0x1000000) != 0) {
    *(unsigned char *)(a1 + 299) = 1;
  }
  if ((v11 & 0x2000000) != 0) {
    *(unsigned char *)(a1 + 389) = 1;
  }
  if ((v11 & 0x4000000) != 0) {
    *(unsigned char *)(a1 + 385) = 1;
  }
  if ((v11 & 0x8000000) != 0) {
    *(unsigned char *)(a1 + 296) = 1;
  }
  if ((v11 & 0x10000000) != 0) {
    *(unsigned char *)(a1 + 377) = 1;
  }
  if ((v11 & 0x20000000) != 0) {
    *(unsigned char *)(a1 + 374) = 1;
  }
  if ((v11 & 0x40000000) != 0) {
    *(unsigned char *)(a1 + 390) = 1;
  }
  if ((v11 & 0x80000000) != 0) {
    *(unsigned char *)(a1 + 333) = 1;
  }
  if ((v11 & 0x100000000) != 0) {
    *(unsigned char *)(a1 + 332) = 1;
  }
  if ((v11 & 0x200000000) != 0) {
    *(unsigned char *)(a1 + 334) = 1;
  }
  if ((v11 & 0x400000000) != 0) {
    *(unsigned char *)(a1 + 335) = 1;
  }
  if ((v11 & 0x800000000) != 0) {
    *(unsigned char *)(a1 + 336) = 1;
  }
  if ((v11 & 0x1000000000) != 0) {
    *(unsigned char *)(a1 + 369) = 1;
  }
  if ((v11 & 0x2000000000) != 0) {
    *(unsigned char *)(a1 + 366) = 1;
  }
  if ((v11 & 0x4000000000) != 0) {
    *(unsigned char *)(a1 + 365) = 1;
  }
  if ((v11 & 0x8000000000) != 0) {
    *(unsigned char *)(a1 + 368) = 1;
  }
  if ((v11 & 0x10000000000) != 0) {
    *(unsigned char *)(a1 + 367) = 1;
  }
  if ((v11 & 0x20000000000) != 0) {
    *(unsigned char *)(a1 + 331) = 1;
  }
  if ((v11 & 0x40000000000) != 0) {
    *(unsigned char *)(a1 + 353) = 1;
  }
  if ((v11 & 0x80000000000) != 0) {
    *(unsigned char *)(a1 + 354) = 1;
  }
  if ((v11 & 0x100000000000) != 0) {
    *(unsigned char *)(a1 + 391) = 1;
  }
  if ((v11 & 0x200000000000) != 0) {
    *(unsigned char *)(a1 + 281) = 1;
  }
  if ((v11 & 0x400000000000) != 0) {
    *(unsigned char *)(a1 + 408) = 1;
  }
  if ((v11 & 0x800000000000) != 0) {
    *(unsigned char *)(a1 + 282) = 1;
  }
  if ((v11 & 0x1000000000000) != 0) {
    *(unsigned char *)(a1 + 287) = 1;
  }
  if ((v11 & 0x2000000000000) != 0) {
    *(unsigned char *)(a1 + 288) = 1;
  }
  if ((v11 & 0x4000000000000) != 0) {
    *(unsigned char *)(a1 + 289) = 1;
  }
  if ((v11 & 0x8000000000000) != 0) {
    *(unsigned char *)(a1 + 290) = 1;
  }
  if ((v11 & 0x10000000000000) != 0) {
    *(unsigned char *)(a1 + 291) = 1;
  }
  if ((v11 & 0x20000000000000) != 0) {
    *(unsigned char *)(a1 + 292) = 1;
  }
  if ((v11 & 0x40000000000000) != 0) {
    *(unsigned char *)(a1 + 293) = 1;
  }
  if ((v11 & 0x80000000000000) != 0) {
    *(unsigned char *)(a1 + 294) = 1;
  }
  if ((v11 & 0x100000000000000) != 0) {
    *(unsigned char *)(a1 + 285) = 1;
  }
  if ((v11 & 0x200000000000000) != 0) {
    *(unsigned char *)(a1 + 373) = 1;
  }
  if ((v11 & 0x400000000000000) != 0) {
    *(unsigned char *)(a1 + 343) = 1;
  }
  if ((v11 & 0x800000000000000) != 0) {
    *(unsigned char *)(a1 + 387) = 1;
  }
  if ((v11 & 0x1000000000000000) != 0) {
    *(unsigned char *)(a1 + 342) = 1;
  }
  if ((v11 & 0x2000000000000000) != 0) {
    *(unsigned char *)(a1 + 341) = 1;
  }
  if ((v11 & 0x4000000000000000) != 0) {
    *(unsigned char *)(a1 + 337) = 1;
  }
  if (v11 < 0) {
    *(unsigned char *)(a1 + 330) = 1;
  }
  return result;
}

uint64_t sub_1CD415504(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_1CD432020(a2, a3, a4, a5);
}

void sub_1CD415518(uint64_t a1, long long *a2, std::string::value_type *a3, std::string::size_type a4, const std::string::value_type *a5, std::string::size_type a6)
{
  uint64_t v11 = llvm::TargetSubtargetInfo::TargetSubtargetInfo(a1, a2, a3, a4, a3, a4, a5, a6, (uint64_t)&off_1E67B2AF0, 127, (uint64_t)&off_1E67B4C60, 40, (uint64_t)&unk_1CDE99CF4, (uint64_t)&unk_1CDE99E04, (uint64_t)&unk_1CDE99E44, 0, 0, 0);
  *uint64_t v11 = &unk_1F25F40B0;
  BOOL v12 = v11 + 32;
  std::string::__init((std::string *)(v11 + 32), a3, a4);
  *(_WORD *)(a1 + 280) = 256;
  *(_OWORD *)(a1 + 282) = 0u;
  *(_OWORD *)(a1 + 298) = 0u;
  *(_OWORD *)(a1 + 314) = 0u;
  *(_OWORD *)(a1 + 330) = 0u;
  *(_OWORD *)(a1 + 346) = 0u;
  *(_OWORD *)(a1 + 362) = 0u;
  *(_OWORD *)(a1 + 378) = 0u;
  *(_OWORD *)(a1 + 393) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(void *)(a1 + 448) = 0;
  sub_1CD3FB388(a1 + 456, a1);
  *(void *)(a1 + 920) = &unk_1F25F4270;
  *(void *)(a1 + 928) = 0;
  int v14 = *(char *)(a1 + 279);
  if (v14 < 0) {
    uint64_t v15 = *(void *)(a1 + 264);
  }
  else {
    uint64_t v15 = *(unsigned __int8 *)(a1 + 279);
  }
  if (!v15)
  {
    MEMORY[0x1D25D9630](v12, "g10");
    LOBYTE(v14) = *(unsigned char *)(a1 + 279);
  }
  if ((v14 & 0x80u) == 0) {
    int v16 = v12;
  }
  else {
    int v16 = *(_DWORD **)(a1 + 256);
  }
  if ((v14 & 0x80u) == 0) {
    size_t v17 = v14 & 0x7F;
  }
  else {
    size_t v17 = *(void *)(a1 + 264);
  }
  llvm::MCSubtargetInfo::InitMCProcessorInfo(a1, v16, v17, v16, v17, a5, a6, v13);
  char v19 = *(unsigned char *)(a1 + 279);
  BOOL v20 = v19 < 0;
  if (v19 >= 0) {
    unint64_t v21 = v12;
  }
  else {
    unint64_t v21 = *(_DWORD **)(a1 + 256);
  }
  size_t v22 = v19 & 0x7F;
  if (v20) {
    size_t v23 = *(void *)(a1 + 264);
  }
  else {
    size_t v23 = v22;
  }
  sub_1CD414D58(a1, v21, v23, v21, v23, a5, a6, v18);
  operator new();
}

void sub_1CD415970(void *a1, uint64_t a2)
{
}

void sub_1CD415980()
{
  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD4159A8(uint64_t a1)
{
  return a1 + 920;
}

uint64_t sub_1CD4159B0()
{
  return 1;
}

void sub_1CD4159BC()
{
  nullsub_1953();

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD4159F4(void *a1, uint64_t a2)
{
  *a1 = &unk_1F25F40B0;
  uint64_t v3 = a1[116];
  a1[116] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  nullsub_1953(a1 + 115, a2);
  sub_1CD3FB854(a1 + 57);
}

void sub_1CD415A64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = *(void *)(v12 + 448);
  *(void *)(v12 + 448) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *(void *)(v12 + 440);
  *(void *)(v12 + 440) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
  }
  uint64_t v15 = *(void *)(v12 + 432);
  *(void *)(v12 + 432) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *(void *)(v12 + 424);
  *(void *)(v12 + 424) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *(void *)(v12 + 416);
  *(void *)(v12 + 416) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
  }
  if (*(char *)(v12 + 279) < 0) {
    operator delete(*(void **)(v12 + 256));
  }
  llvm::TargetSubtargetInfo::~TargetSubtargetInfo((llvm::TargetSubtargetInfo *)v12);
}

void LLVMInitializeAGX2Target(llvm::PassRegistry *a1)
{
  qword_1EBD025A0 = (uint64_t)sub_1CD417C34;
  atomic_ullong PassRegistry = (llvm *)llvm::PassRegistry::getPassRegistry(a1);
  sub_1CD640238(PassRegistry);
  sub_1CD613588((uint64_t)PassRegistry);
  sub_1CD3FAEF8((uint64_t)PassRegistry);
  sub_1CD40DA44((uint64_t)PassRegistry);
  sub_1CD41B794((uint64_t)PassRegistry);
  sub_1CD41B9E8((uint64_t)PassRegistry);
  sub_1CD41C0A0((uint64_t)PassRegistry);
  sub_1CD419E68((uint64_t)PassRegistry);
  sub_1CD6315D4((uint64_t)PassRegistry);
  sub_1CC7CBFB0((uint64_t)PassRegistry);
  sub_1CD3FA894((uint64_t)PassRegistry);
  sub_1CD413038((uint64_t)PassRegistry);
  sub_1CD3FACA0((uint64_t)PassRegistry);
  sub_1CD414014((uint64_t)PassRegistry);
  sub_1CD419C4C((uint64_t)PassRegistry);
  sub_1CD413280((uint64_t)PassRegistry);
  sub_1CD3FC534((uint64_t)PassRegistry);
  sub_1CD41C7E0((uint64_t)PassRegistry);
  sub_1CD3FB07C((uint64_t)PassRegistry);
  sub_1CD414394((uint64_t)PassRegistry);
  sub_1CD41B298((uint64_t)PassRegistry);

  sub_1CD419F7C((uint64_t)PassRegistry);
}

void sub_1CD415C7C(void *a1, uint64_t a2, uint64_t a3, const std::string::value_type *a4, std::string::size_type a5, const std::string::value_type *a6, std::string::size_type a7, long long *a8, uint64_t a9, uint64_t a10, int a11)
{
  sub_1CB906AA8((uint64_t)v18, a8);
  sub_1CB906564((uint64_t)a1, a2, a3, a4, a5, a6, a7, (uint64_t)v18, a9, a10, a11);
  sub_1CB906D7C((uint64_t)v18);
  *a1 = &unk_1F25F42E8;
  operator new();
}

void sub_1CD415DB0()
{
}

BOOL sub_1CD415E68(llvm::TargetPassConfig *a1)
{
  return (*(_WORD *)(*((void *)a1 + 14) + 1020) & 0x1000) != 0
      || llvm::TargetPassConfig::reportDiagnosticWhenGlobalISelFallback(a1);
}

void sub_1CD415E80(llvm::TargetPassConfig *a1)
{
}

void sub_1CD415EC4()
{
}

void sub_1CD415F24()
{
}

void sub_1CD415F7C()
{
}

void sub_1CD415FCC()
{
}

void sub_1CD416050()
{
}

void sub_1CD4160A0()
{
}

void sub_1CD41611C()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  if (!byte_1EBCBFC60) {
    llvm::createCodeGenPreparePass((llvm *)1);
  }
  sub_1CD41C684();
}

void sub_1CD4168BC(llvm::TargetPassConfig *a1)
{
  llvm::TargetPassConfig::addPass(a1, &unk_1EA61EED0);
  strcpy((char *)__p, "After codegen DCE pass");
  llvm::TargetPassConfig::printAndVerify(a1);
  sub_1CD3FAE4C();
}

void sub_1CD416A9C()
{
  if (!byte_1EBCBFBA0) {
    sub_1CD419FEC();
  }
  sub_1CD419F14();
}

void sub_1CD416AF8(uint64_t a1)
{
  if (!*(unsigned char *)(*(void *)(a1 + 112) + 1716)) {
    sub_1CD414084();
  }
  sub_1CD41C2F4();
}

void sub_1CD416B90(llvm::TargetPassConfig *a1)
{
}

void sub_1CD416BE0()
{
}

void sub_1CD416C24()
{
}

void sub_1CD416C70()
{
}

uint64_t sub_1CD416CAC()
{
  return 0;
}

void sub_1CD416CB8(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 112) + 1659)) {
    sub_1CD3FC5A4();
  }
  sub_1CD3FAFE4();
  llvm::createGPUCFGLoweringPass();
}

void sub_1CD416D88(llvm *a1)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  if (!byte_1EBCBF7E0) {
    llvm::createTypeBasedAAWrapperPass(a1);
  }
  sub_1CB968FF4((unsigned char *)(*((void *)a1 + 14) + 1328));
  sub_1CD63B5A4();
}

void sub_1CD417770()
{
}

void sub_1CD4177CC(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 48)) {
    *(void *)(a2 + 48) = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 8) + 216))(*(void *)(a2 + 8), a2 + 128, a2);
  }
  operator new();
}

uint64_t sub_1CD417858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 96);
  uint64_t v5 = *(void *)(v4 + 48);
  if (!v5)
  {
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v4 + 8) + 216))(*(void *)(v4 + 8), v4 + 128, *(void *)(a3 + 96));
    *(void *)(v4 + 48) = v5;
  }
  sub_1CD412908(v5, a2);
  return 0;
}

void sub_1CD4178C8(llvm::TargetPassConfig *a1)
{
  llvm::TargetPassConfig::~TargetPassConfig(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD41790C(void *a1)
{
}

void sub_1CD41791C()
{
  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD417944(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 1042) >> 3) & 1;
}

void sub_1CD417950()
{
}

uint64_t sub_1CD417964(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 32))();
}

uint64_t sub_1CD41798C(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
  if ((result & 0xFF00000000) == 0) {
    return 0;
  }
  return result;
}

uint64_t sub_1CD4179D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 56))();
}

uint64_t sub_1CD4179F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 64))();
}

uint64_t sub_1CD417A20(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 88))();
}

uint64_t sub_1CD417A48(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 72))();
}

uint64_t sub_1CD417A70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 80))();
}

void sub_1CD417A9C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD417AD4()
{
  return 2;
}

void sub_1CD417ADC(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

void sub_1CD417AE8(void *a1)
{
  *a1 = &unk_1F25F42E8;
  sub_1CD417B78((uint64_t)(a1 + 283));
  sub_1CD4159F4(a1 + 166, v2);
}

void sub_1CD417B28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = *((void *)v12 + 165);
  *((void *)v12 + 165) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  llvm::TargetMachine::~TargetMachine(v12);
}

uint64_t sub_1CD417B78(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      do
      {
        uint64_t v4 = *(llvm **)(*(void *)a1 + v3);
        if (v4) {
          BOOL v5 = (llvm *)((char *)v4 + 8) == 0;
        }
        else {
          BOOL v5 = 1;
        }
        if (!v5)
        {
          uint64_t v7 = *(void *)v4;
          uint64_t v6 = *((void *)v4 + 1);
          *((void *)v4 + 1) = 0;
          if (v6) {
            (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
          }
          llvm::deallocate_buffer(v4, (void *)(v7 + 17));
        }
        v3 += 8;
      }
      while (8 * v2 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

void sub_1CD417C34()
{
}

uint64_t sub_1CD417D04(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1CD417D0C(uint64_t a1, uint64_t a2, llvm::Value *a3, llvm::Constant **a4, uint64_t a5)
{
  return sub_1CBA8813C((llvm::DataLayout **)(a1 + 16), a2, a3, a4, a5);
}

uint64_t sub_1CD417D14()
{
  return 4;
}

uint64_t sub_1CD417D20(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  return sub_1CB907A3C(*(void *)(a1 + 16), *(void *)(a1 + 40), a2, a3, a4, a5);
}

uint64_t sub_1CD417D40()
{
  return 0;
}

uint64_t sub_1CD417D48()
{
  return 0;
}

uint64_t sub_1CD417D50()
{
  return 0;
}

uint64_t sub_1CD417D58()
{
  return 0;
}

uint64_t sub_1CD417D60()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1CD417D68()
{
  return 0;
}

uint64_t sub_1CD417D70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 40) + 8) + 64))();
}

uint64_t sub_1CD417D9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 40) + 8) + 72))();
}

uint64_t sub_1CD417DC8()
{
  return 0;
}

uint64_t sub_1CD417DD0()
{
  return 0;
}

uint64_t sub_1CD417DD8()
{
  return 0;
}

uint64_t sub_1CD417DE0()
{
  return 0;
}

uint64_t sub_1CD417DE8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 1088))();
}

uint64_t sub_1CD417E18(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 1080))();
}

uint64_t sub_1CD417E48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[0] = a3;
  v9[1] = a4;
  char v10 = a5;
  uint64_t v11 = a6;
  return (*(uint64_t (**)(void, void, void *, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 40) + 1064))(*(void *)(a1 + 40), *(void *)(a1 + 16), v9, a2, a7, a8);
}

BOOL sub_1CD417EBC(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  long long v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  long long v4 = a3[1];
  v6[0] = *a3;
  v6[1] = v4;
  return sub_1CD3F7118(a1 + 16, v7, v6);
}

uint64_t sub_1CD417EF8()
{
  return 1;
}

uint64_t sub_1CD417F00()
{
  return 0;
}

uint64_t sub_1CD417F08()
{
  return 0;
}

uint64_t sub_1CD417F10()
{
  return 0;
}

uint64_t sub_1CD417F18()
{
  return 2;
}

uint64_t sub_1CD417F20()
{
  return 0;
}

uint64_t sub_1CD417F28()
{
  return 0;
}

BOOL sub_1CD417F30(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1CD3F71C0((uint64_t *)(a1 + 16), a2, a3);
}

BOOL sub_1CD417F3C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1CD3F71C0((uint64_t *)(a1 + 16), a2, a3);
}

uint64_t sub_1CD417F48()
{
  return 0;
}

uint64_t sub_1CD417F50()
{
  return 0;
}

uint64_t sub_1CD417F58()
{
  return 0;
}

uint64_t sub_1CD417F60()
{
  return 0;
}

uint64_t sub_1CD417F68()
{
  return 0;
}

uint64_t sub_1CD417F70()
{
  return 0;
}

uint64_t sub_1CD417F78()
{
  return 0;
}

uint64_t sub_1CD417F80()
{
  return 0;
}

uint64_t sub_1CD417F88()
{
  return 0;
}

uint64_t sub_1CD417F90()
{
  return 0;
}

uint64_t sub_1CD417F98()
{
  return 1;
}

uint64_t sub_1CD417FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  v8[0] = a3;
  v8[1] = a4;
  char v9 = a5;
  uint64_t v10 = a6;
  return (*(uint64_t (**)(void, void, void *, uint64_t, uint64_t))(**(void **)(a1 + 40) + 1072))(*(void *)(a1 + 40), *(void *)(a1 + 16), v8, a2, a7);
}

uint64_t sub_1CD418010()
{
  return 0;
}

uint64_t sub_1CD418018(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 1144))();
}

uint64_t sub_1CD418048(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 1176))();
}

uint64_t sub_1CD418078(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 368))();
}

BOOL sub_1CD4180A8(uint64_t a1, llvm::EVT *this)
{
  unsigned __int8 v3 = sub_1CB87DC14(*(void *)(a1 + 40), *(void *)(a1 + 16), this, 0);
  return v3 && *(void *)(*(void *)(a1 + 40) + 8 * v3 + 96) != 0;
}

uint64_t sub_1CD418100(uint64_t a1, llvm::LLVMContext **a2)
{
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 40), *(const llvm::DataLayout **)(a1 + 16), a2, (uint64_t)&v3);
  return v3;
}

unint64_t sub_1CD418138(uint64_t a1)
{
  return sub_1CD3F7240(*(void *)(*(void *)(a1 + 40) + 8));
}

uint64_t sub_1CD418144()
{
  return 0;
}

unint64_t sub_1CD41814C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  return sub_1CBA65F0C(a1 + 8, a2, a3, a4, a5);
}

unint64_t sub_1CD418154(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  return sub_1CBA8D710(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD41815C()
{
  return 0;
}

uint64_t sub_1CD418164()
{
  return 0;
}

double sub_1CD41816C@<D0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = a1 + 24;
  *(void *)&double result = 0x800000000;
  *(void *)(a1 + 16) = 0x800000000;
  *(_DWORD *)(a1 + 56) = 1;
  *(unsigned char *)(a1 + 60) = 0;
  return result;
}

uint64_t sub_1CD418194()
{
  return 0;
}

uint64_t sub_1CD41819C()
{
  return 0;
}

uint64_t sub_1CD4181A4()
{
  return 0;
}

uint64_t sub_1CD4181AC()
{
  return 0;
}

uint64_t sub_1CD4181B4(uint64_t a1, unsigned int a2)
{
  return 2 * (a2 < 0x21);
}

BOOL sub_1CD4181C4(uint64_t a1, llvm::EVT *a2)
{
  return sub_1CB90D5AC(*(void *)(a1 + 16), *(void *)(a1 + 40), a2);
}

uint64_t sub_1CD4181D8()
{
  return 1;
}

uint64_t sub_1CD4181E0()
{
  return 0;
}

uint64_t sub_1CD4181EC()
{
  return 1;
}

uint64_t sub_1CD4181F8()
{
  return 0;
}

uint64_t sub_1CD418204()
{
  return 0;
}

uint64_t sub_1CD418210()
{
  return 8;
}

uint64_t sub_1CD418218(uint64_t a1, uint64_t a2)
{
  return a2;
}

const char *sub_1CD418220(uint64_t a1, int a2)
{
  uint64_t v2 = "Generic::Unknown Register Class";
  if (a2 == 1) {
    uint64_t v2 = "Generic::VectorRC";
  }
  if (a2) {
    return v2;
  }
  else {
    return "Generic::ScalarRC";
  }
}

uint64_t sub_1CD41824C()
{
  return 32;
}

uint64_t sub_1CD418258()
{
  return 128;
}

uint64_t sub_1CD418260()
{
  return 0;
}

uint64_t sub_1CD418268()
{
  return 0;
}

uint64_t sub_1CD418270()
{
  return 0;
}

uint64_t sub_1CD418278(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    return 0x100000000;
  }
  else {
    return 0;
  }
}

uint64_t sub_1CD418288()
{
  return 0;
}

uint64_t sub_1CD418290(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 56))();
}

uint64_t sub_1CD4182B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 32))();
}

uint64_t sub_1CD4182E0(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32));
  if ((result & 0xFF00000000) == 0) {
    return 0;
  }
  return result;
}

uint64_t sub_1CD418324(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 64))();
}

uint64_t sub_1CD41834C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 88))();
}

uint64_t sub_1CD418374(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 72))();
}

uint64_t sub_1CD41839C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 80))();
}

uint64_t sub_1CD4183C4()
{
  return 1;
}

unint64_t sub_1CD4183CC(uint64_t a1, int a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1CBA8B210(a1 + 8, a2, a3, a4, a5, a7);
}

uint64_t sub_1CD4183D8(uint64_t a1, uint64_t a2, llvm::Type ***a3, llvm::Type ***a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  return sub_1CBA8A664(a1 + 8, a2, a3, a4, a5, a6, a7);
}

unint64_t sub_1CD4183E0(uint64_t a1, uint64_t a2, llvm::Type ***a3, uint64_t a4)
{
  return sub_1CD419310(a1 + 8, a2, a3, a4);
}

BOOL sub_1CD4183E8(uint64_t a1, int a2, int a3)
{
  return a2 != 55 || a3 == 0;
}

uint64_t sub_1CD4183FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(llvm::TargetLoweringBase **)(a1 + 40);
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12) {
    a3 = **(void **)(a3 + 16);
  }
  llvm::TargetLoweringBase::getTypeLegalizationCost(v4, *(const llvm::DataLayout **)(a1 + 16), (llvm::LLVMContext **)a3, (uint64_t)&v6);
  return v6;
}

unint64_t sub_1CD418448(uint64_t a1, llvm::FixedVectorType *a2, int a3, llvm::Type *a4, llvm::APIntOps *a5)
{
  return sub_1CD41871C(a1 + 8, a2, a3, a4, a5);
}

unint64_t sub_1CD418450(uint64_t a1, int a2, llvm::EVT *a3, unsigned __int8 a4, uint64_t a5, int a6)
{
  if (a6) {
    return 1;
  }
  else {
    return sub_1CD412EA8(a1 + 8, a2, a3, a4 | 0x100, a5, a6);
  }
}

uint64_t sub_1CD41848C()
{
  return 1;
}

unint64_t sub_1CD418498(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, int a6)
{
  return sub_1CD418BEC(a1 + 8, a2, a3, a4, 1, 0, a6);
}

unint64_t sub_1CD4184B0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, unsigned __int8 a6, int a7)
{
  return sub_1CD418BEC(a1 + 8, a2, a3, a6, a5, 1, a7);
}

unint64_t sub_1CD4184C0(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int *a5, void *a6, unsigned __int8 a7, uint64_t a8, int a9, char a10, char a11)
{
  return sub_1CD4193C4(a1 + 8, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

unint64_t sub_1CD4184E4(uint64_t a1, unsigned int a2, llvm::FixedVectorType **a3, uint64_t a4, uint64_t a5)
{
  return sub_1CD418828(a1 + 8, a2, a3, a4, a5);
}

unint64_t sub_1CD4184EC(uint64_t a1, llvm::FixedVectorType **a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_1CD418844(a1 + 8, a2, a3, a5);
}

unint64_t sub_1CD4184F8(uint64_t a1, int a2, int a3, llvm::FixedVectorType *a4, uint64_t a5, uint64_t a6)
{
  return sub_1CD41994C(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t sub_1CD418500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CBA8952C(a1 + 8, a2, a3);
}

uint64_t sub_1CD418508()
{
  return 10;
}

uint64_t sub_1CD418514(uint64_t a1, llvm::LLVMContext **a2)
{
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 40), *(const llvm::DataLayout **)(a1 + 16), a2, (uint64_t)v3);
  if (v3[2]) {
    return 0;
  }
  else {
    return v3[0];
  }
}

uint64_t sub_1CD418558()
{
  return 0;
}

uint64_t sub_1CD418564()
{
  return 0;
}

uint64_t sub_1CD418570()
{
  return 0;
}

uint64_t sub_1CD418578()
{
  return 0;
}

uint64_t sub_1CD418580(int a1, llvm::IntegerType *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a8 & 0xFF00000000) != 0) {
    return llvm::IntegerType::get(this, (llvm::LLVMContext *)(8 * a8));
  }
  else {
    return llvm::Type::getInt8Ty(this, this);
  }
}

uint64_t sub_1CD418598(int a1, uint64_t a2, llvm::IntegerType *a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  return sub_1CD3F7AB0(a1 + 16, a2, a3, a4, a5, a6, a7, a8, a9);
}

BOOL sub_1CD4185A8(uint64_t a1, unsigned int a2, llvm::EVT *a3)
{
  unsigned __int8 v5 = sub_1CB87DC14(*(void *)(a1 + 40), *(void *)(a1 + 16), a3, 0);
  if (!v5) {
    return 0;
  }
  return *(_WORD *)(*(void *)(a1 + 40) + 10 * v5 + 2 * a2 + 169796) < 0x10u
      || (*(_WORD *)(*(void *)(a1 + 40) + 10 * v5 + 2 * a2 + 169796) & 0xF0) == 64;
}

BOOL sub_1CD418620(uint64_t a1, unsigned int a2, llvm::EVT *a3)
{
  unsigned __int8 v5 = sub_1CB87DC14(*(void *)(a1 + 40), *(void *)(a1 + 16), a3, 0);
  return v5 && (*(_WORD *)(*(void *)(a1 + 40) + 10 * v5 + 2 * a2 + 169796) & 0xB) == 0;
}

uint64_t sub_1CD41868C()
{
  return 1;
}

uint64_t sub_1CD418694()
{
  return 1;
}

uint64_t sub_1CD41869C()
{
  return 0;
}

uint64_t sub_1CD4186A4()
{
  return 0;
}

uint64_t sub_1CD4186AC()
{
  return 1;
}

uint64_t sub_1CD4186B4()
{
  return 1;
}

uint64_t sub_1CD4186BC()
{
  return 0;
}

uint64_t sub_1CD4186C4()
{
  return 0;
}

uint64_t sub_1CD4186CC()
{
  return 0;
}

uint64_t sub_1CD4186D4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16) == 60) {
    return 4;
  }
  else {
    return sub_1CD419AA8(a1 + 16, (uint64_t *)a2);
  }
}

uint64_t sub_1CD418708()
{
  return 0x200000001;
}

uint64_t sub_1CD418714()
{
  return 1;
}

unint64_t sub_1CD41871C(uint64_t a1, llvm::FixedVectorType *this, int a3, llvm::Type *a4, llvm::APIntOps *a5)
{
  llvm::FixedVectorType::get(this, a4);
  uint64_t v11 = v10;
  llvm::FixedVectorType::get(this, (llvm::Type *)(a4 * a3));
  uint64_t v13 = v12;
  llvm::APIntOps::ScaleBitMask(a5, a4, (uint64_t)&v18);
  unint64_t v14 = sub_1CBA65F0C(a1, v11, (uint64_t)&v18, 0, 1);
  unint64_t v15 = sub_1CBA65F0C(a1, v13, (uint64_t)a5, 1, 0);
  if (v19 >= 0x41 && v18)
  {
    unint64_t v17 = v15;
    MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
    unint64_t v15 = v17;
  }
  if (__OFADD__(v14, v15)) {
    return ((uint64_t)(v14 + v15) >> 63) ^ 0x8000000000000000;
  }
  else {
    return v14 + v15;
  }
}

unint64_t sub_1CD418828(uint64_t a1, unsigned int a2, llvm::FixedVectorType **a3, uint64_t a4, uint64_t a5)
{
  if (a4 & 0xFF00000000) == 0 || (a4) {
    return sub_1CD418ED8(a1, a2, a3, a5);
  }
  else {
    return sub_1CD418DF4(a1, a2, (uint64_t)a3, a5);
  }
}

unint64_t sub_1CD418844(uint64_t a1, llvm::FixedVectorType **a2, uint64_t a3, int a4)
{
  uint64_t v4 = a3;
  unsigned __int8 v5 = (llvm::Type *)a2;
  uint64_t v6 = a1;
  if ((a2[1] & 0xFE) == 0x12) {
    unsigned int v7 = *(unsigned __int8 *)(*(void *)a2[2] + 8);
  }
  else {
    unsigned int v7 = *((_DWORD *)a2 + 2);
  }
  unsigned int v8 = a2[3];
  char v9 = *(llvm::FixedVectorType **)(a3 + 24);
  LODWORD(v10) = *((_DWORD *)a2 + 8);
  if (v7 >= 7) {
    unsigned int v11 = 53;
  }
  else {
    unsigned int v11 = 54;
  }
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), a2, (uint64_t)v61);
  if (v62[0] - 15 > 0x9B)
  {
    unsigned int v13 = 1;
  }
  else
  {
    if (v62[0] - 120 <= 0x32) {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of MVT::getVectorNumElements() for scalable vector. Scalable flag may be dropped, use MVT::getVectorElementCount() instead", v12);
    }
    unsigned int v13 = sub_1CB8C32B0(v62);
  }
  unsigned int v14 = __clz(v10);
  if (v10 <= v13)
  {
    unint64_t v56 = 0;
    int64_t v58 = 0;
    int v15 = 0;
  }
  else
  {
    unsigned int v49 = v14;
    int v15 = 0;
    int v16 = 0;
    uint64_t v50 = v8;
    int64_t v17 = 0;
    uint64_t v52 = v6;
    uint64_t v18 = (uint64_t)v5;
    unint64_t v19 = 0;
    unsigned int v53 = v11;
    unsigned int v51 = v13;
    uint64_t v20 = v6;
    do
    {
      int64_t v57 = v17;
      int v55 = v15;
      uint64_t v21 = v18;
      uint64_t v10 = (llvm::Type *)(v10 >> 1);
      llvm::FixedVectorType::get(v50, v10);
      uint64_t v18 = v22;
      llvm::FixedVectorType::get(v9, v10);
      uint64_t v4 = v23;
      unint64_t v24 = sub_1CBA8B210(v20, 5, v21, 0, 0, v18);
      if (__OFADD__(v19, v24)) {
        unint64_t v19 = ((uint64_t)(v19 + v24) >> 63) ^ 0x8000000000000000;
      }
      else {
        v19 += v24;
      }
      int v25 = v16;
      unint64_t v26 = sub_1CBA8B020(v20, v53, v18, v4, 0x2Au, a4, 0);
      int v28 = v27;
      unint64_t v29 = sub_1CBA8B020(v20, 0x39u, v18, v4, 0x2Au, a4, 0);
      int64_t v31 = v26 + v29;
      if (__OFADD__(v26, v29)) {
        int64_t v31 = (v31 >> 63) ^ 0x8000000000000000;
      }
      if (v28 == 1 || v30 == 1) {
        int v16 = 1;
      }
      else {
        int v16 = v25;
      }
      BOOL v33 = __OFADD__(v57, v31);
      int64_t v17 = v57 + v31;
      if (v33) {
        int64_t v17 = (v17 >> 63) ^ 0x8000000000000000;
      }
      int v15 = v55 - 1;
    }
    while (v10 > v51);
    unint64_t v56 = v19;
    int64_t v58 = v17;
    uint64_t v6 = v52;
    unsigned int v11 = v53;
    unsigned __int8 v5 = (llvm::Type *)v18;
    unsigned int v14 = v49;
  }
  uint64_t v34 = v15 - v14 + 31;
  unint64_t v59 = sub_1CBA8B210(v6, 7, (uint64_t)v5, 0, 0, (uint64_t)v5);
  unint64_t v60 = v35;
  uint64_t v63 = v34;
  int v64 = 0;
  sub_1CB90C9D4((uint64_t)&v63, (uint64_t)&v59);
  uint64_t v36 = v63;
  unint64_t v37 = sub_1CBA8B020(v6, v11, (uint64_t)v5, v4, 0x2Au, a4, 0);
  unint64_t v39 = v38;
  unint64_t v40 = sub_1CBA8B020(v6, 0x39u, (uint64_t)v5, v4, 0x2Au, a4, 0);
  unint64_t v41 = v39 & 0xFFFFFFFF00000000 | 1;
  if (v42 != 1) {
    unint64_t v41 = v39;
  }
  unint64_t v43 = v37 + v40;
  if (__OFADD__(v37, v40)) {
    unint64_t v43 = ((uint64_t)(v37 + v40) >> 63) ^ 0x8000000000000000;
  }
  unint64_t v59 = v43;
  unint64_t v60 = v41;
  uint64_t v63 = v34;
  int v64 = 0;
  sub_1CB90C9D4((uint64_t)&v63, (uint64_t)&v59);
  if ((*((_DWORD *)v5 + 2) & 0xFE) == 0x12) {
    unsigned __int8 v5 = (llvm::Type *)**((void **)v5 + 2);
  }
  unint64_t v44 = v56 + v36;
  if (__OFADD__(v56, v36)) {
    unint64_t v44 = ((uint64_t)(v56 + v36) >> 63) ^ 0x8000000000000000;
  }
  int64_t v45 = v58 + v63;
  if (__OFADD__(v58, v63)) {
    int64_t v45 = (v45 >> 63) ^ 0x8000000000000000;
  }
  BOOL v33 = __OFADD__(v44, v45);
  uint64_t v46 = v44 + v45;
  if (v33) {
    unint64_t v47 = (v46 >> 63) ^ 0x8000000000000000;
  }
  else {
    unint64_t v47 = v46;
  }
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(v6 + 32), *(const llvm::DataLayout **)(v6 + 8), (llvm::LLVMContext **)v5, (uint64_t)&v63);
  if (__OFADD__(v47, v63)) {
    return ((uint64_t)(v47 + v63) >> 63) ^ 0x8000000000000000;
  }
  else {
    return v47 + v63;
  }
}

unint64_t sub_1CD418BEC(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, int a5, int a6, int a7)
{
  if (a6)
  {
    unsigned int v13 = (llvm::FixedVectorType *)llvm::PointerType::get(*(llvm::PointerType **)(a3 + 24), 0);
    llvm::FixedVectorType::get(v13, (llvm::Type *)*(unsigned int *)(a3 + 32));
    int v15 = (llvm::LLVMContext **)v14;
    if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12) {
      int v15 = **(llvm::LLVMContext ****)(v14 + 16);
    }
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v15, (uint64_t)&v38);
    int v16 = v38;
    unint64_t v17 = v39;
  }
  else
  {
    int v16 = 0;
    unint64_t v17 = 0;
  }
  uint64_t v18 = (llvm::Type *)*(unsigned int *)(a3 + 32);
  unint64_t v19 = sub_1CD412EA8(a1, a2, *(llvm::EVT **)(a3 + 24), a4 | 0x100, 0, a7);
  unint64_t v20 = v17 & 0xFFFFFFFF00000000 | 1;
  if (v21 != 1) {
    unint64_t v20 = v17;
  }
  unint64_t v22 = (unint64_t)v16 + v19;
  if (__OFADD__(v16, v19)) {
    unint64_t v22 = ((uint64_t)((uint64_t)v16 + v19) >> 63) ^ 0x8000000000000000;
  }
  unint64_t v36 = v22;
  unint64_t v37 = v20;
  unint64_t v38 = v18;
  LODWORD(v39) = 0;
  sub_1CB90C9D4((uint64_t)&v38, (uint64_t)&v36);
  uint64_t v23 = v38;
  unint64_t v24 = sub_1CBA65E40(a1, a3, a2 != 33, a2 == 33);
  if (a5)
  {
    int v25 = (llvm::Type *)*(unsigned int *)(a3 + 32);
    llvm::FixedVectorType::get((llvm::FixedVectorType *)(**(void **)a3 + 1888), v25);
    int v27 = (llvm::LLVMContext **)v26;
    if ((*(_DWORD *)(v26 + 8) & 0xFE) == 0x12) {
      int v27 = **(llvm::LLVMContext ****)(v26 + 16);
    }
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v27, (uint64_t)&v38);
    uint64_t v28 = (uint64_t)v38 + 1;
    if (__OFADD__(v38, 1)) {
      uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
    }
    BOOL v29 = a7 == 0;
    BOOL v30 = __OFADD__(v28, v29);
    uint64_t v31 = v28 + v29;
    if (v30) {
      uint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
    }
    unint64_t v36 = v31;
    unint64_t v37 = v39;
    unint64_t v38 = v25;
    LODWORD(v39) = 0;
    sub_1CB90C9D4((uint64_t)&v38, (uint64_t)&v36);
    long long v32 = v38;
  }
  else
  {
    long long v32 = 0;
  }
  unint64_t v33 = (unint64_t)v23 + v24;
  if (__OFADD__(v23, v24)) {
    unint64_t v33 = ((uint64_t)((uint64_t)v23 + v24) >> 63) ^ 0x8000000000000000;
  }
  BOOL v30 = __OFADD__(v33, v32);
  uint64_t v34 = (uint64_t)v32 + v33;
  if (v30) {
    return (v34 >> 63) ^ 0x8000000000000000;
  }
  else {
    return v34;
  }
}

unint64_t sub_1CD418DF4(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a3 + 8) == 19) {
    return 0;
  }
  unint64_t v9 = sub_1CBA65E40(a1, a3, 0, 1);
  v11[0] = sub_1CBA89F84(a1, a2, *(void *)(a3 + 24), a4, 0, 0, 0, 0, 0, 0, 0);
  v11[1] = v10;
  uint64_t v12 = *(unsigned int *)(a3 + 32);
  int v13 = 0;
  sub_1CB90C9D4((uint64_t)v11, (uint64_t)&v12);
  if (__OFADD__(v9, v11[0])) {
    return ((uint64_t)(v9 + v11[0]) >> 63) ^ 0x8000000000000000;
  }
  else {
    return v9 + v11[0];
  }
}

unint64_t sub_1CD418ED8(uint64_t a1, unsigned int a2, llvm::FixedVectorType **a3, uint64_t a4)
{
  unsigned __int8 v5 = (llvm::Type *)a3;
  uint64_t v7 = a1;
  unsigned int v8 = a3[3];
  LODWORD(v9) = *((_DWORD *)a3 + 8);
  if ((a2 & 0xFFFFFFFE) == 0x1C
    && (v8 == (llvm::FixedVectorType *)(*(void *)*a3 + 1888) ? (BOOL v10 = v9 >= 2) : (BOOL v10 = 0), v10))
  {
    uint64_t v34 = (llvm::Type ***)llvm::IntegerType::get(*a3, (llvm::LLVMContext *)*((unsigned int *)a3 + 8));
    uint64_t v35 = sub_1CBA8A664(v7, 49, v34, (llvm::Type ***)v5, 0, a4, 0);
    sub_1CB90C994(v34);
    unint64_t v37 = sub_1CBA8B020(v7, 0x35u, (uint64_t)v34, v36, 0x2Au, a4, 0);
    BOOL v31 = __OFADD__(v35, v37);
    uint64_t v32 = v35 + v37;
  }
  else
  {
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), a3, (uint64_t)v44);
    if (v45[0] - 15 > 0x9B)
    {
      unsigned int v12 = 1;
    }
    else
    {
      if (v45[0] - 120 <= 0x32) {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of MVT::getVectorNumElements() for scalable vector. Scalable flag may be dropped, use MVT::getVectorElementCount() instead", v11);
      }
      unsigned int v12 = sub_1CB8C32B0(v45);
    }
    unsigned int v13 = __clz(v9);
    if (v9 <= v12)
    {
      unsigned int v23 = a2;
      unint64_t v16 = 0;
      unint64_t v15 = 0;
      int v14 = 0;
    }
    else
    {
      unsigned int v38 = v13;
      unsigned int v41 = a2;
      int v14 = 0;
      uint64_t v40 = v7;
      unint64_t v15 = 0;
      unint64_t v16 = 0;
      unsigned int v39 = v12;
      do
      {
        uint64_t v17 = a4;
        uint64_t v18 = v5;
        unint64_t v9 = (llvm::Type *)(v9 >> 1);
        llvm::FixedVectorType::get(v8, v9);
        unsigned __int8 v5 = (llvm::Type *)v19;
        uint64_t v20 = (uint64_t)v18;
        a4 = v17;
        unint64_t v21 = sub_1CBA8B210(v40, 5, v20, 0, 0, v19);
        if (__OFADD__(v16, v21)) {
          unint64_t v16 = ((uint64_t)(v16 + v21) >> 63) ^ 0x8000000000000000;
        }
        else {
          v16 += v21;
        }
        unint64_t v22 = sub_1CBA89F84(v40, v41, (uint64_t)v5, v17, 0, 0, 0, 0, 0, 0, 0);
        if (__OFADD__(v15, v22)) {
          unint64_t v15 = ((uint64_t)(v15 + v22) >> 63) ^ 0x8000000000000000;
        }
        else {
          v15 += v22;
        }
        --v14;
      }
      while (v9 > v39);
      unsigned int v23 = v41;
      uint64_t v7 = v40;
      unsigned int v13 = v38;
    }
    uint64_t v24 = v14 - v13 + 31;
    unint64_t v42 = sub_1CBA8B210(v7, 7, (uint64_t)v5, 0, 0, (uint64_t)v5);
    uint64_t v43 = v25;
    uint64_t v46 = v24;
    int v47 = 0;
    sub_1CB90C9D4((uint64_t)&v46, (uint64_t)&v42);
    if (__OFADD__(v16, v46)) {
      unint64_t v26 = ((uint64_t)(v16 + v46) >> 63) ^ 0x8000000000000000;
    }
    else {
      unint64_t v26 = v16 + v46;
    }
    unint64_t v42 = sub_1CBA89F84(v7, v23, (uint64_t)v5, a4, 0, 0, 0, 0, 0, 0, 0);
    uint64_t v43 = v27;
    uint64_t v46 = v24;
    int v47 = 0;
    sub_1CB90C9D4((uint64_t)&v46, (uint64_t)&v42);
    unint64_t v28 = v15 + v46;
    if (__OFADD__(v15, v46)) {
      unint64_t v28 = ((uint64_t)(v15 + v46) >> 63) ^ 0x8000000000000000;
    }
    BOOL v31 = __OFADD__(v26, v28);
    uint64_t v29 = v26 + v28;
    if (v31) {
      unint64_t v30 = (v29 >> 63) ^ 0x8000000000000000;
    }
    else {
      unint64_t v30 = v29;
    }
    if ((*((_DWORD *)v5 + 2) & 0xFE) == 0x12) {
      unsigned __int8 v5 = (llvm::Type *)**((void **)v5 + 2);
    }
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(v7 + 32), *(const llvm::DataLayout **)(v7 + 8), (llvm::LLVMContext **)v5, (uint64_t)&v46);
    BOOL v31 = __OFADD__(v30, v46);
    uint64_t v32 = v30 + v46;
  }
  if (v31) {
    return (v32 >> 63) ^ 0x8000000000000000;
  }
  else {
    return v32;
  }
}

unint64_t sub_1CD41925C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = sub_1CBA65E40(a1, a2, 1, 0);
  if (a4) {
    unint64_t v11 = sub_1CBA8D710(a1, a3, a4, a5);
  }
  else {
    unint64_t v11 = sub_1CBA65E40(a1, a2, 0, 1);
  }
  if (__OFADD__(v10, v11)) {
    return ((uint64_t)(v10 + v11) >> 63) ^ 0x8000000000000000;
  }
  else {
    return v10 + v11;
  }
}

unint64_t sub_1CD419310(uint64_t a1, uint64_t a2, llvm::Type ***a3, uint64_t a4)
{
  unsigned int v8 = *(llvm::TargetLoweringBase **)(a1 + 32);
  unint64_t v9 = (llvm::LLVMContext **)a4;
  if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
    unint64_t v9 = **(llvm::LLVMContext ****)(a4 + 16);
  }
  llvm::TargetLoweringBase::getTypeLegalizationCost(v8, *(const llvm::DataLayout **)(a1 + 8), v9, (uint64_t)&v13);
  uint64_t v10 = v13;
  uint64_t v11 = sub_1CBA8A664(a1, a2, a3, *(llvm::Type ****)(a4 + 24), 0, 0, 0);
  if (__OFADD__(v10, v11)) {
    return ((v10 + v11) >> 63) ^ 0x8000000000000000;
  }
  else {
    return v10 + v11;
  }
}

unint64_t sub_1CD4193C4(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int *a5, void *a6, unsigned __int8 a7, uint64_t a8, int a9, char a10, char a11)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = (llvm::Type *)*(unsigned int *)(a3 + 32);
  v68[0] = v17 / a4;
  llvm::FixedVectorType::get(*(llvm::FixedVectorType **)(a3 + 24), (llvm::Type *)(v17 / a4));
  uint64_t v65 = v18;
  if ((a10 & 1) != 0 || a11)
  {
    uint64_t v21 = a1;
    unint64_t v22 = sub_1CD418BEC(a1, a2, a3, a7, 1, 0, a9);
    int v19 = v62;
  }
  else
  {
    if (a9)
    {
      int v19 = 0;
      unint64_t v20 = 1;
      uint64_t v21 = a1;
    }
    else
    {
      uint64_t v21 = a1;
      unint64_t v20 = sub_1CD412EA8(a1, a2, (llvm::EVT *)a3, a7 | 0x100, a8, 0);
      int v19 = v63;
    }
    unint64_t v22 = v20;
  }
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(v21 + 32), *(const llvm::DataLayout **)(v21 + 8), (llvm::LLVMContext **)a3, (uint64_t)&v77);
  unsigned __int8 v76 = v79[0];
  uint64_t v24 = sub_1CB83544C(*(void *)(v21 + 8), a3);
  if (v23 == 1) {
  uint64_t v26 = sub_1CB87E200(&v76);
  }
  if (v25 == 1) {
  if (!v19)
  }
  {
    unint64_t v27 = (unint64_t)(v26 + 7) >> 3;
    if (((unint64_t)(v24 + 7) >> 3) > v27)
    {
      unint64_t v64 = v22;
      unint64_t v28 = (((unint64_t)(v24 + 7) >> 3) + (unint64_t)v27 - 1)
          / ((unint64_t)(v26 + 7) >> 3);
      uint64_t v29 = v28 - 1;
      int v77 = v79;
      uint64_t v78 = 0x600000000;
      sub_1CB90D610((uint64_t)&v77, (v28 + 63) >> 6, 0);
      int v80 = v28;
      unint64_t v30 = (int8x8_t *)v77;
      if (a6)
      {
        if (v68[0] <= 1) {
          unsigned int v31 = 1;
        }
        else {
          unsigned int v31 = v68[0];
        }
        uint64_t v32 = a5;
        do
        {
          if (v17 >= a4)
          {
            unsigned int v33 = *v32;
            unsigned int v34 = v31;
            do
            {
              *(void *)&v30[(v33 / (((unint64_t)v17 + v29) / v28)) >> 6] |= 1 << (v33 / (((unint64_t)v17 + v29) / v28));
              v33 += a4;
              --v34;
            }
            while (v34);
          }
          ++v32;
        }
        while (v32 != &a5[(void)a6]);
      }
      if (v78)
      {
        LODWORD(v35) = 0;
        uint64_t v36 = 8 * v78;
        unint64_t v37 = v30;
        do
        {
          int8x8_t v38 = *v37++;
          uint8x8_t v39 = (uint8x8_t)vcnt_s8(v38);
          v39.i16[0] = vaddlv_u8(v39);
          uint64_t v35 = (v35 + v39.i32[0]);
          v36 -= 8;
        }
        while (v36);
      }
      else
      {
        uint64_t v35 = 0;
      }
      unint64_t v22 = (v29 + v35 * v64) / v28;
      if (v30 != (int8x8_t *)v79) {
        free(v30);
      }
    }
  }
  sub_1CB8F1EEC((uint64_t)&v74, v68[0], -1);
  sub_1CB8F1EEC((uint64_t)&v72, v17, -1);
  sub_1CB8F1EEC((uint64_t)&v70, v17, 0);
  if (a6)
  {
    uint64_t v40 = &a5[(void)a6];
    unsigned int v41 = v71;
    if (v68[0] <= 1) {
      unsigned int v42 = 1;
    }
    else {
      unsigned int v42 = v68[0];
    }
    do
    {
      if (v17 >= a4)
      {
        unsigned int v43 = *a5;
        unsigned int v44 = v42;
        do
        {
          uint64_t v45 = 1 << v43;
          if (v41 > 0x40) {
            *(void *)(v70 + 8 * (v43 >> 6)) |= v45;
          }
          else {
            v70 |= v45;
          }
          v43 += a4;
          --v44;
        }
        while (v44);
      }
      ++a5;
    }
    while (a5 != v40);
  }
  if (a2 == 32)
  {
    *(void *)&v68[1] = sub_1CBA65F0C(v21, v65, (uint64_t)&v74, 1, 0);
    uint64_t v69 = v46;
    int v77 = a6;
    LODWORD(v78) = 0;
    sub_1CB90C9D4((uint64_t)&v77, (uint64_t)&v68[1]);
    if (__OFADD__(v22, v77)) {
      int v47 = (char *)(((uint64_t)((uint64_t)v77 + v22) >> 63) ^ 0x8000000000000000);
    }
    else {
      int v47 = (char *)v77 + v22;
    }
    uint64_t v48 = v21;
    uint64_t v49 = a3;
    int v50 = 0;
    int v51 = 1;
  }
  else
  {
    *(void *)&v68[1] = a6;
    LODWORD(v69) = 0;
    int v77 = (void *)sub_1CBA65F0C(v21, v65, (uint64_t)&v74, 0, 1);
    uint64_t v78 = v52;
    sub_1CB90C9D4((uint64_t)&v77, (uint64_t)&v68[1]);
    if (__OFADD__(v22, v77)) {
      int v47 = (char *)(((uint64_t)((uint64_t)v77 + v22) >> 63) ^ 0x8000000000000000);
    }
    else {
      int v47 = (char *)v77 + v22;
    }
    uint64_t v48 = v21;
    uint64_t v49 = a3;
    int v50 = 1;
    int v51 = 0;
  }
  unint64_t v53 = sub_1CBA65F0C(v48, v49, (uint64_t)&v70, v50, v51);
  if (__OFADD__(v47, v53)) {
    unint64_t v55 = ((uint64_t)&v47[v53] >> 63) ^ 0x8000000000000000;
  }
  else {
    unint64_t v55 = (unint64_t)&v47[v53];
  }
  if (a10)
  {
    Int8Ty = (llvm::FixedVectorType *)llvm::Type::getInt8Ty(*(llvm::Type **)a3, v54);
    int64_t v58 = (llvm::APIntOps *)(a11 ? &v70 : &v72);
    unint64_t v59 = sub_1CD41871C(a1, Int8Ty, a4, (llvm::Type *)v68[0], v58);
    if (__OFADD__(v55, v59)) {
      unint64_t v55 = ((uint64_t)(v55 + v59) >> 63) ^ 0x8000000000000000;
    }
    else {
      v55 += v59;
    }
    if (a11)
    {
      llvm::FixedVectorType::get(Int8Ty, v17);
      unint64_t v61 = sub_1CBA89F84(a1, 0x1Cu, v60, a9, 0, 0, 0, 0, 0, 0, 0);
      if (__OFADD__(v55, v61)) {
        unint64_t v55 = ((uint64_t)(v55 + v61) >> 63) ^ 0x8000000000000000;
      }
      else {
        v55 += v61;
      }
    }
  }
  if (v71 >= 0x41 && v70) {
    MEMORY[0x1D25D9CB0](v70, 0x1000C8000313F17);
  }
  if (v73 >= 0x41 && v72) {
    MEMORY[0x1D25D9CB0](v72, 0x1000C8000313F17);
  }
  if (v75 >= 0x41 && v74) {
    MEMORY[0x1D25D9CB0](v74, 0x1000C8000313F17);
  }
  return v55;
}

unint64_t sub_1CD41994C(uint64_t a1, int a2, int a3, llvm::FixedVectorType *a4, uint64_t a5, uint64_t a6)
{
  llvm::VectorType::get(a4, (llvm::Type *)(*(unsigned int *)(a5 + 32) | ((unint64_t)(*(unsigned char *)(a5 + 8) == 19) << 32)));
  unsigned int v12 = (llvm::Type ***)v11;
  unint64_t v13 = sub_1CD418ED8(a1, 0xDu, v11, a6);
  if (a3) {
    uint64_t v14 = 39;
  }
  else {
    uint64_t v14 = 40;
  }
  uint64_t v15 = sub_1CBA8A664(a1, v14, v12, (llvm::Type ***)a5, 0, a6, 0);
  v20[0] = v15;
  v20[1] = v16;
  if (a2)
  {
    unint64_t v17 = sub_1CBA89F84(a1, 0x11u, (uint64_t)v12, a6, 0, 0, 0, 0, 0, 0, 0);
    uint64_t v21 = 2;
    int v22 = 0;
    sub_1CB90C9D4((uint64_t)v20, (uint64_t)&v21);
    uint64_t v15 = v20[0];
  }
  else
  {
    unint64_t v17 = 0;
  }
  unint64_t v18 = v13 + v17;
  if (__OFADD__(v13, v17)) {
    unint64_t v18 = ((uint64_t)(v13 + v17) >> 63) ^ 0x8000000000000000;
  }
  if (__OFADD__(v18, v15)) {
    return ((uint64_t)(v18 + v15) >> 63) ^ 0x8000000000000000;
  }
  else {
    return v18 + v15;
  }
}

uint64_t sub_1CD419AA8(uint64_t a1, uint64_t *a2)
{
  v20[4] = *MEMORY[0x1E4F143B8];
  int v4 = *((_DWORD *)a2 + 5);
  if ((v4 & 0x40000000) != 0)
  {
    uint64_t v6 = (char *)*(a2 - 1);
    uint64_t v5 = v4 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v5 = v4 & 0x7FFFFFF;
    uint64_t v6 = (char *)&a2[-4 * v5];
  }
  unint64_t v18 = v20;
  uint64_t v19 = 0x400000000;
  sub_1CB90CA80((uint64_t)&v18, v6, &v6[32 * v5]);
  uint64_t v7 = sub_1CBA88738(a1, (llvm::ShuffleVectorInst *)a2, (uint64_t)v18, v19, 1);
  BOOL v9 = v7 < 0;
  if (v8) {
    BOOL v9 = v8 < 0;
  }
  if (!v9)
  {
    BOOL v10 = v8 < 1;
    if (!v8) {
      BOOL v10 = v7 < 1;
    }
    if (v10)
    {
      uint64_t v11 = 0;
      goto LABEL_13;
    }
  }
  int v12 = *((unsigned __int8 *)a2 + 16);
  if (v12 == 60)
  {
    uint64_t v11 = 4;
    goto LABEL_13;
  }
  uint64_t v14 = *a2;
  if (v12 == 84)
  {
    uint64_t v15 = *(a2 - 4);
    if (!v15
      || *(unsigned char *)(v15 + 16)
      || *(void *)(v15 + 24) != a2[9]
      || (sub_1CB9091FC(a1, (uint64_t ***)v15) & 1) != 0)
    {
      uint64_t v11 = 40;
      goto LABEL_13;
    }
    if (*(unsigned char *)(v14 + 8) == 16 && v14) {
      uint64_t v14 = **(void **)(v14 + 16);
    }
  }
  int v16 = *(_DWORD *)(v14 + 8);
  unsigned int v17 = v16;
  if (v14 && (v16 & 0xFE) == 0x12) {
    unsigned int v17 = *(unsigned __int8 *)(*(void *)(v14 + 24) + 8);
  }
  if (v17 >= 7) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = 3;
  }
LABEL_13:
  if (v18 != v20) {
    free(v18);
  }
  return v11;
}

void sub_1CD419C4C(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBFCA8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBA8F010;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCBFCA8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD419CBC()
{
}

_DWORD *sub_1CD419CF8(void *a1, unsigned int a2)
{
  if (a2 <= 4)
  {
    *a1 = 1;
LABEL_3:
    uint64_t result = a1 + 1;
    int v4 = a1 + 5;
    goto LABEL_4;
  }
  *(_DWORD *)a1 &= ~1u;
  uint64_t v5 = a2;
  uint64_t result = operator new(8 * a2, (std::align_val_t)4uLL);
  a1[1] = result;
  a1[2] = v5;
  int v6 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if (v6) {
    goto LABEL_3;
  }
  int v4 = &result[2 * v5];
  do
  {
LABEL_4:
    *uint64_t result = -1;
    result += 2;
  }
  while (result != v4);
  return result;
}

_DWORD *sub_1CD419D7C(_DWORD *result)
{
  uint64_t v1 = result;
  unsigned int v2 = *result;
  unsigned int v3 = __clz((*result >> 1) - 1);
  if (v3 - 28 >= 3) {
    int v4 = 1 << (33 - v3);
  }
  else {
    int v4 = 64;
  }
  if (v2 >= 2) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if ((v2 & 1) != 0 && v5 < 5)
  {
    int v6 = result + 2;
    *(void *)uint64_t result = 1;
    uint64_t v7 = result + 10;
    do
    {
LABEL_10:
      *int v6 = -1;
      v6 += 2;
    }
    while (v6 != v7);
    return result;
  }
  if ((v2 & 1) == 0)
  {
    if (v5 == result[4])
    {
      *(void *)uint64_t result = 0;
      if (!v5) {
        return result;
      }
      int v6 = (_DWORD *)*((void *)result + 1);
      uint64_t v7 = &v6[2 * v5];
      goto LABEL_10;
    }
    MEMORY[0x1D25D9CD0](*((void *)result + 1), 4);
  }

  return sub_1CD419CF8(v1, v5);
}

uint64_t (***sub_1CD419E54())()
{
  return &off_1EC7DF9E0;
}

uint64_t sub_1CD419E60()
{
  return 0;
}

void sub_1CD419E68(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBFD78, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBA95B34;
    v3[1] = &v1;
    unsigned int v2 = v3;
    std::__call_once(&qword_1EBCBFD78, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD419ED8()
{
}

void sub_1CD419F14()
{
}

void sub_1CD419F7C(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBFD88, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBA9EB18;
    v3[1] = &v1;
    unsigned int v2 = v3;
    std::__call_once(&qword_1EBCBFD88, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD419FEC()
{
}

uint64_t *sub_1CD41A028(_OWORD *a1, unsigned int a2, char a3, uint64_t a4, const llvm::APInt *a5)
{
  v22[16] = *MEMORY[0x1E4F143B8];
  BOOL v9 = &unk_1CDB15900;
  int v10 = 25;
  if (a3 == 9)
  {
    BOOL v9 = &unk_1CDB158D0;
    int v10 = 1;
  }
  if (a3 == 4) {
    uint64_t v11 = &unk_1CDB158D0;
  }
  else {
    uint64_t v11 = v9;
  }
  if (a3 == 4) {
    unsigned int v12 = 1;
  }
  else {
    unsigned int v12 = v10;
  }
  v22[0] = (uint64_t)sub_1CD7EBF14(a4, v11[(int)a2 - 1], a5, (llvm *)5, 0, 1, 0);
  v22[1] = v13;
  LODWORD(v14) = 1;
  int v20 = 1;
  uint64_t v15 = a2;
  do
  {
    if (v14 >= 8) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_OWORD *)&v22[2 * v14] = *a1;
    unsigned int v21 = v20 + 1;
    unsigned int v17 = sub_1CD7EBF14(a4, v12, a5, (llvm *)5, 0, 1, 0);
    if (v21 >= 8uLL) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unint64_t v18 = &v22[2 * v21];
    uint64_t *v18 = (uint64_t)v17;
    v18[1] = v16;
    uint64_t v14 = v21 + 1;
    int v20 = v21 + 1;
    ++v12;
    ++a1;
    --v15;
  }
  while (v15);
  return sub_1CD801450(a4, 18, (uint64_t)a5, (llvm *)0xAE, 0, v22, v14);
}

uint64_t *sub_1CD41A260(uint64_t a1, llvm::APFloatBase *a2, const llvm::APInt *a3)
{
  unsigned int v5 = *(uint64_t **)(a1 + 32);
  uint64_t v7 = *v5;
  unint64_t v6 = v5[1];
  uint64_t v8 = v5[5];
  unint64_t v9 = v5[6];
  int v10 = sub_1CD7EBF14((uint64_t)a2, 0, a3, (llvm *)5, 0, 0, 0);
  uint64_t v12 = v11;
  uint64_t v13 = sub_1CD7EBF14((uint64_t)a2, 1, a3, (llvm *)5, 0, 0, 0);
  uint64_t v15 = v14;
  unsigned int v110 = sub_1CD7EBF14((uint64_t)a2, 0, a3, (llvm *)4, 0, 0, 0);
  int v108 = v16;
  unsigned int v17 = sub_1CD7EBF14((uint64_t)a2, 1, a3, (llvm *)4, 0, 0, 0);
  unsigned int v106 = v19;
  uint64_t v107 = (uint64_t)v17;
  uint64_t v112 = v12;
  uint64_t v104 = (uint64_t)v13;
  if (*(_WORD *)(v7 + 24) == 199)
  {
    int v20 = *(unsigned int **)(v7 + 32);
    uint64_t v21 = v20[2];
    v111 = *(uint64_t **)v20;
    uint64_t v22 = v21;
    if (*(unsigned char *)(*(void *)(*(void *)v20 + 40) + 16 * v21) != 5)
    {
      v111 = sub_1CD7EB314(a2, (const char *)0xC7, (uint64_t)a3, (llvm *)5, 0, (uint64_t)v111, (void *)v21);
      uint64_t v22 = v23;
    }
    uint64_t v24 = v10;
    unsigned int v25 = v112;
  }
  else
  {
    uint64_t v26 = sub_1CD7EB314(a2, (const char *)0xD8, (uint64_t)a3, (llvm *)0x31, 0, v7, (void *)v6);
    uint64_t v27 = (uint64_t)v10;
    unint64_t v28 = v26;
    unint64_t v30 = v6 & 0xFFFFFFFF00000000 | v29;
    v111 = sub_1CD7EB32C((uint64_t)a2, 148, a3, (llvm *)5, 0, (uint64_t)v26, v30, v31, v27, v12);
    uint64_t v22 = v32;
    uint64_t v33 = (uint64_t)v28;
    int v10 = (uint64_t *)v27;
    uint64_t v24 = sub_1CD7EB32C((uint64_t)a2, 148, a3, (llvm *)5, 0, v33, v30, v34, (uint64_t)v13, v15);
    unsigned int v25 = v35;
  }
  int v36 = *(unsigned __int16 *)(v8 + 24);
  v101 = v10;
  uint64_t v109 = (uint64_t)v24;
  uint64_t v100 = v25;
  if (v36 == 199)
  {
    uint64_t v46 = *(unsigned int **)(v8 + 32);
    unsigned int v41 = *(uint64_t **)v46;
    uint64_t v43 = v46[2];
    if (*(unsigned char *)(*(void *)(*(void *)v46 + 40) + 16 * v43) != 5)
    {
      unsigned int v41 = sub_1CD7EB314(a2, (const char *)0xC7, (uint64_t)a3, (llvm *)5, 0, (uint64_t)v41, (void *)v43);
      uint64_t v43 = v47;
    }
    v105 = v10;
    unsigned int v45 = v112;
    goto LABEL_13;
  }
  if (v36 != 11 && v36 != 35)
  {
    unint64_t v37 = sub_1CD7EB314(a2, (const char *)0xD8, (uint64_t)a3, (llvm *)0x31, 0, v8, (void *)v9);
    unint64_t v39 = v9 & 0xFFFFFFFF00000000 | v38;
    unsigned int v41 = sub_1CD7EB32C((uint64_t)a2, 148, a3, (llvm *)5, 0, (uint64_t)v37, v39, v40, (uint64_t)v10, v112);
    uint64_t v43 = v42;
    v105 = sub_1CD7EB32C((uint64_t)a2, 148, a3, (llvm *)5, 0, (uint64_t)v37, v39, v44, v104, v15);
LABEL_13:
    uint64_t v48 = a1;
    goto LABEL_14;
  }
  uint64_t v93 = *(void *)(v8 + 80);
  int v94 = (unsigned int *)(v93 + 24);
  if (*(_DWORD *)(v93 + 32) >= 0x41u) {
    int v94 = *(unsigned int **)v94;
  }
  unsigned int v41 = sub_1CD7EBF14((uint64_t)a2, *v94, a3, (llvm *)5, 0, 0, 0);
  uint64_t v43 = v95;
  uint64_t v96 = *(void *)(v8 + 80);
  uint64_t v97 = (uint64_t **)(v96 + 24);
  if (*(_DWORD *)(v96 + 32) >= 0x41u) {
    uint64_t v97 = (uint64_t **)*v97;
  }
  uint64_t v48 = a1;
  v105 = sub_1CD7EBF14((uint64_t)a2, *((unsigned int *)v97 + 1), a3, (llvm *)5, 0, 0, 0);
LABEL_14:
  uint64_t v103 = v45;
  if (*(_WORD *)(v48 + 24) == 56)
  {
    unsigned int v98 = v45;
    unsigned int v99 = v25;
    uint64_t v49 = sub_1CD7EB32C((uint64_t)a2, 56, a3, (llvm *)5, 0, (uint64_t)v111, v22, v18, (uint64_t)v41, v43);
    uint64_t v51 = v50;
    uint64_t v52 = *(void *)(v107 + 40) + 16 * v106;
    unint64_t v53 = *(llvm **)v52;
    uint64_t v54 = *(void *)(v52 + 8);
    uint64_t v55 = sub_1CD7EE368(a2, 0xCu);
    uint64_t v56 = (uint64_t)v49;
    unint64_t v59 = sub_1CD7F6564(a2, (const char *)0xC0, a3, v53, v54, (uint64_t)v49, v51, v58, (uint64_t)v111, v22, v107, v106, (uint64_t)v110, v108, v55, v57);
    unint64_t v61 = (unint64_t)v60;
    int v63 = sub_1CD7EB314(a2, (const char *)0xC7, (uint64_t)a3, (llvm *)5, 0, (uint64_t)v59, v60);
    unint64_t v65 = v61 & 0xFFFFFFFF00000000 | v64;
    unsigned int v66 = (uint64_t *)v109;
    if ((uint64_t *)v109 == v101 && v99 == v112)
    {
      uint64_t v67 = v103;
      unsigned int v66 = v105;
    }
    else if (v105 == v101 && v98 == v112)
    {
      uint64_t v67 = v100;
    }
    else
    {
      unsigned int v66 = sub_1CD7EB32C((uint64_t)a2, 56, a3, (llvm *)5, 0, v109, v100, v62, (uint64_t)v105, v103);
      uint64_t v67 = v92;
    }
    v68 = sub_1CD7EB32C((uint64_t)a2, 56, a3, (llvm *)5, 0, (uint64_t)v66, v67, v62, (uint64_t)v63, v65);
  }
  else
  {
    unsigned int v71 = sub_1CD7EB32C((uint64_t)a2, 57, a3, (llvm *)5, 0, (uint64_t)v111, v22, v18, (uint64_t)v41, v43);
    uint64_t v113 = v72;
    uint64_t v73 = *(void *)(v107 + 40) + 16 * v106;
    unsigned int v75 = *(llvm **)v73;
    uint64_t v74 = *(void *)(v73 + 8);
    uint64_t v76 = sub_1CD7EE368(a2, 0xCu);
    uint64_t v56 = (uint64_t)v71;
    uint64_t v51 = v113;
    uint64_t v79 = sub_1CD7F6564(a2, (const char *)0xC0, a3, v75, v74, (uint64_t)v111, v22, v78, (uint64_t)v41, v43, v107, v106, (uint64_t)v110, v108, v76, v77);
    unint64_t v81 = (unint64_t)v80;
    int v82 = sub_1CD7EB314(a2, (const char *)0xC7, (uint64_t)a3, (llvm *)5, 0, (uint64_t)v79, v80);
    unint64_t v84 = v81 & 0xFFFFFFFF00000000 | v83;
    BOOL v86 = sub_1CD7EB32C((uint64_t)a2, 57, a3, (llvm *)5, 0, v109, v100, v85, (uint64_t)v105, v103);
    v68 = sub_1CD7EB32C((uint64_t)a2, 57, a3, (llvm *)5, 0, (uint64_t)v86, v87, v88, (uint64_t)v82, v84);
  }
  int v89 = sub_1CD7EB32C((uint64_t)a2, 146, a3, (llvm *)0x31, 0, v56, v51, v70, (uint64_t)v68, v69);
  return sub_1CD7EB314(a2, (const char *)0xD8, (uint64_t)a3, (llvm *)6, 0, (uint64_t)v89, v90);
}

uint64_t *sub_1CD41A8A8(uint64_t a1, llvm::APFloatBase *a2, const llvm::APInt *a3)
{
  unsigned int v5 = sub_1CD7EB314(a2, (const char *)0xC6, (uint64_t)a3, (llvm *)5, 0, **(void **)(a1 + 32), *(void **)(*(void *)(a1 + 32) + 8));
  uint64_t v7 = v6;
  uint64_t v8 = sub_1CD7EBF14((uint64_t)a2, 31, a3, (llvm *)6, 0, 0, 0);
  uint64_t v11 = sub_1CD7EB32C((uint64_t)a2, 176, a3, (llvm *)5, 0, (uint64_t)v5, v7, v10, (uint64_t)v8, v9);
  uint64_t v14 = sub_1CD7EB32C((uint64_t)a2, 146, a3, (llvm *)0x31, 0, (uint64_t)v5, v7, v13, (uint64_t)v11, v12);
  return sub_1CD7EB314(a2, (const char *)0xD8, (uint64_t)a3, (llvm *)6, 0, (uint64_t)v14, v15);
}

uint64_t *sub_1CD41A994@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t **a9@<X8>, uint64_t a10, const llvm::APInt *a11)
{
  unsigned int v131 = 32;
  uint64_t v130 = 0xFFFFLL;
  uint64_t v16 = sub_1CD7EBB14(a10, (llvm::LLVMContext *)&v130, a11, 5, 0, 0, 0);
  uint64_t v18 = v17;
  if (v131 >= 0x41 && v130) {
    MEMORY[0x1D25D9CB0](v130, 0x1000C8000313F17);
  }
  unsigned int v19 = sub_1CD7EB32C(a10, 171, a11, (llvm *)5, 0, a1, a2, v15, v16, v18);
  uint64_t v117 = v20;
  uint64_t v118 = (uint64_t)v19;
  uint64_t v21 = v20;
  unsigned int v23 = sub_1CD7EB32C(a10, 171, a11, (llvm *)5, 0, a5, a6, v22, v16, v18);
  uint64_t v122 = a6;
  uint64_t v109 = v24;
  uint64_t v110 = (uint64_t)v23;
  uint64_t v26 = sub_1CD7EB32C(a10, 58, a11, (llvm *)5, 0, (uint64_t)v19, v21, v25, (uint64_t)v23, v24);
  uint64_t v27 = v18;
  uint64_t v113 = v18;
  uint64_t v115 = v16;
  uint64_t v28 = a5;
  uint64_t v120 = a1;
  uint64_t v121 = a5;
  uint64_t v29 = (uint64_t)v26;
  uint64_t v30 = v16;
  uint64_t v31 = a1;
  uint64_t v33 = v32;
  unsigned int v35 = sub_1CD7EB32C(a10, 171, a11, (llvm *)5, 0, (uint64_t)v26, v32, v34, v30, v27);
  uint64_t v123 = v36;
  uint64_t v124 = (uint64_t)v35;
  unint64_t v37 = sub_1CD7EBF14(a10, 16, a11, (llvm *)6, 0, 0, 0);
  uint64_t v119 = a2;
  uint64_t v39 = v38;
  unsigned int v41 = sub_1CD7EB32C(a10, 177, a11, (llvm *)5, 0, v29, v33, v40, (uint64_t)v37, v38);
  uint64_t v43 = v42;
  v111 = sub_1CD7EB32C(a10, 177, a11, (llvm *)5, 0, v31, a2, v44, (uint64_t)v37, v39);
  uint64_t v112 = v45;
  uint64_t v46 = v45;
  uint64_t v48 = sub_1CD7EB32C(a10, 177, a11, (llvm *)5, 0, v28, a6, v47, (uint64_t)v37, v39);
  uint64_t v107 = v49;
  uint64_t v108 = (uint64_t)v48;
  uint64_t v51 = sub_1CD7EB32C(a10, 58, a11, (llvm *)5, 0, (uint64_t)v111, v46, v50, v110, v109);
  uint64_t v54 = sub_1CD7EB32C(a10, 56, a11, (llvm *)5, 0, (uint64_t)v51, v52, v53, (uint64_t)v41, v43);
  uint64_t v56 = v55;
  uint64_t v58 = sub_1CD7EB32C(a10, 171, a11, (llvm *)5, 0, (uint64_t)v54, v55, v57, v115, v113);
  uint64_t v60 = v59;
  uint64_t v61 = (uint64_t)v37;
  int v63 = sub_1CD7EB32C(a10, 177, a11, (llvm *)5, 0, (uint64_t)v54, v56, v62, (uint64_t)v37, v39);
  uint64_t v114 = v64;
  uint64_t v116 = (uint64_t)v63;
  unsigned int v66 = sub_1CD7EB32C(a10, 58, a11, (llvm *)5, 0, v118, v117, v65, v108, v107);
  unsigned int v69 = sub_1CD7EB32C(a10, 56, a11, (llvm *)5, 0, (uint64_t)v66, v67, v68, (uint64_t)v58, v60);
  uint64_t v71 = v70;
  uint64_t v73 = sub_1CD7EB32C(a10, 177, a11, (llvm *)5, 0, (uint64_t)v69, v70, v72, v61, v39);
  uint64_t v75 = v74;
  int v77 = sub_1CD7EB32C(a10, 58, a11, (llvm *)5, 0, (uint64_t)v111, v112, v76, v108, v107);
  uint64_t v79 = v78;
  unint64_t v81 = sub_1CD7EB32C(a10, 56, a11, (llvm *)5, 0, v116, v114, v80, (uint64_t)v73, v75);
  unint64_t v84 = sub_1CD7EB32C(a10, 56, a11, (llvm *)5, 0, (uint64_t)v77, v79, v83, (uint64_t)v81, v82);
  uint64_t v86 = v85;
  uint64_t v88 = sub_1CD7EB32C(a10, 175, a11, (llvm *)5, 0, (uint64_t)v69, v71, v87, v61, v39);
  uint64_t v91 = sub_1CD7EB32C(a10, 56, a11, (llvm *)5, 0, v124, v123, v90, (uint64_t)v88, v89);
  uint64_t v93 = v92;
  unsigned int v95 = sub_1CD7EB32C(a10, 58, a11, (llvm *)5, 0, a7, a8, v94, v120, v119);
  uint64_t v97 = v96;
  unsigned int v99 = sub_1CD7EB32C(a10, 58, a11, (llvm *)5, 0, v121, v122, v98, a3, a4);
  unsigned int v102 = sub_1CD7EB32C(a10, 56, a11, (llvm *)5, 0, (uint64_t)v95, v97, v101, (uint64_t)v99, v100);
  uint64_t result = sub_1CD7EB32C(a10, 56, a11, (llvm *)5, 0, (uint64_t)v84, v86, v104, (uint64_t)v102, v103);
  *a9 = v91;
  a9[1] = v93;
  a9[2] = result;
  a9[3] = v106;
  return result;
}

unint64_t sub_1CD41AE70(uint64_t a1, int *a2)
{
  if (*(void *)(a1 + 96))
  {
    sub_1CD41B018((uint64_t **)(a1 + 80), a2, a2);
    return ((unint64_t)v10 << 32) | 1;
  }
  else
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    int v3 = *a2;
    if (v2)
    {
      uint64_t v5 = 4 * v2;
      uint64_t v6 = *(_DWORD **)a1;
      while (*v6 != v3)
      {
        ++v6;
        v5 -= 4;
        if (!v5) {
          goto LABEL_9;
        }
      }
      if (v5) {
        return 1;
      }
LABEL_9:
      if (v2 <= 0xF) {
        goto LABEL_3;
      }
      uint64_t v8 = (uint64_t **)(a1 + 80);
      do
      {
        uint64_t v9 = (int *)(*(void *)a1 + 4 * v2 - 4);
        sub_1CD41B018(v8, v9, v9);
        LODWORD(v2) = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v2;
      }
      while (v2);
      sub_1CD41B018(v8, a2, a2);
    }
    else
    {
LABEL_3:
      if (v2 >= *(_DWORD *)(a1 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a1 + 4 * v2) = v3;
      ++*(_DWORD *)(a1 + 8);
    }
    return 0x100000001;
  }
}

int32x2_t *sub_1CD41AF98(int32x2_t *result, int a2)
{
  __int32 v2 = result[2].i32[0];
  if (v2)
  {
    int32x2_t v3 = *result;
    __int32 v4 = v2 - 1;
    LODWORD(v5) = (v2 - 1) & (37 * a2);
    uint64_t v6 = (int *)(*(void *)result + 16 * v5);
    int v7 = *v6;
    if (*v6 == a2)
    {
LABEL_3:
      *uint64_t v6 = 0x80000000;
      result[1] = vadd_s32(result[1], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      int v8 = 1;
      while (v7 != 0x7FFFFFFF)
      {
        int v9 = v5 + v8++;
        uint64_t v5 = v9 & v4;
        int v7 = *(_DWORD *)(*(void *)&v3 + 16 * v5);
        if (v7 == a2)
        {
          uint64_t v6 = (int *)(*(void *)&v3 + 16 * v5);
          goto LABEL_3;
        }
      }
    }
  }
  return result;
}

uint64_t **sub_1CD41B018(uint64_t **a1, int *a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v8 = a1 + 1;
LABEL_10:
    unsigned __int8 v10 = (uint64_t *)v8;
    int v8 = (uint64_t **)operator new(0x20uLL);
    *((_DWORD *)v8 + 7) = *a3;
    *int v8 = 0;
    v8[1] = 0;
    void v8[2] = v10;
    *uint64_t v6 = (uint64_t *)v8;
    uint64_t v11 = (uint64_t *)**a1;
    uint64_t v12 = (uint64_t *)v8;
    if (v11)
    {
      *a1 = v11;
      uint64_t v12 = *v6;
    }
    sub_1CB8358B8(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v8;
}

uint64_t sub_1CD41B0F8(uint64_t result, int *a2, int *a3)
{
  *(void *)(result + 8) = 0;
  int32x2_t v3 = *(_DWORD **)result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4)
  {
    uint64_t v5 = 16 * v4;
    uint64_t v6 = *(_DWORD **)result;
    do
    {
      *uint64_t v6 = 0x7FFFFFFF;
      v6 += 4;
      v5 -= 16;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 4)
  {
    int v7 = *a2;
    if ((*a2 - 0x7FFFFFFF) >= 2)
    {
      int v8 = *(_DWORD *)(result + 16) - 1;
      unsigned int v9 = v8 & (37 * v7);
      unsigned __int8 v10 = &v3[4 * v9];
      int v11 = *v10;
      if (v7 != *v10)
      {
        uint64_t v12 = 0;
        int v13 = 1;
        while (v11 != 0x7FFFFFFF)
        {
          if (v12) {
            BOOL v14 = 0;
          }
          else {
            BOOL v14 = v11 == 0x80000000;
          }
          if (v14) {
            uint64_t v12 = v10;
          }
          unsigned int v15 = v9 + v13++;
          unsigned int v9 = v15 & v8;
          unsigned __int8 v10 = &v3[4 * (v15 & v8)];
          int v11 = *v10;
          if (v7 == *v10) {
            goto LABEL_11;
          }
        }
        if (v12) {
          unsigned __int8 v10 = v12;
        }
      }
LABEL_11:
      *unsigned __int8 v10 = v7;
      *((void *)v10 + 1) = *((void *)a2 + 1);
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t sub_1CD41B1D4(uint64_t result, unsigned int a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)result + 8 * v3) = a2 | (unint64_t)(a3 << 32);
  ++*(_DWORD *)(result + 8);
  return result;
}

void sub_1CD41B244()
{
}

void sub_1CD41B298(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBFD98, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBAA3660;
    v3[1] = &v1;
    __int32 v2 = v3;
    std::__call_once(&qword_1EBCBFD98, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD41B308()
{
}

_DWORD *sub_1CD41B344(uint64_t a1, _DWORD *a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    unsigned int v7 = v3 - 1;
    uint64_t v8 = (37 * *a2) & (v3 - 1);
    uint64_t v5 = (_DWORD *)(*(void *)a1 + 32 * v8);
    int v9 = *v5;
    if (*a2 == *v5) {
      return v5;
    }
    unsigned __int8 v10 = 0;
    int v11 = 1;
    while (v9 != -1)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v9 == -2;
      }
      if (v12) {
        unsigned __int8 v10 = v5;
      }
      int v13 = v8 + v11++;
      uint64_t v8 = v13 & v7;
      uint64_t v5 = (_DWORD *)(*(void *)a1 + 32 * v8);
      int v9 = *v5;
      if (*a2 == *v5) {
        return v5;
      }
    }
    if (v10) {
      uint64_t v4 = v10;
    }
    else {
      uint64_t v4 = v5;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = sub_1CD41B410(a1, a2, v4);
  _DWORD *v5 = *a2;
  *((void *)v5 + 1) = v5 + 6;
  *((void *)v5 + 2) = 0x200000000;
  return v5;
}

_DWORD *sub_1CD41B410(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3) {
      goto LABEL_8;
    }
    sub_1CBAA492C(a1, v6);
    int v14 = *(_DWORD *)(a1 + 16);
    if (v14)
    {
      unsigned int v15 = v14 - 1;
      uint64_t v16 = (37 * *a2) & v15;
      a3 = (_DWORD *)(*(void *)a1 + 32 * v16);
      int v17 = *a3;
      if (*a2 == *a3) {
        goto LABEL_8;
      }
      int v11 = 0;
      int v18 = 1;
      while (v17 != -1)
      {
        if (v11) {
          BOOL v19 = 0;
        }
        else {
          BOOL v19 = v17 == -2;
        }
        if (v19) {
          int v11 = a3;
        }
        int v20 = v16 + v18++;
        uint64_t v16 = v20 & v15;
        a3 = (_DWORD *)(*(void *)a1 + 32 * v16);
        int v17 = *a3;
        if (*a2 == *a3) {
          goto LABEL_8;
        }
      }
      goto LABEL_6;
    }
LABEL_23:
    a3 = 0;
    goto LABEL_8;
  }
  sub_1CBAA492C(a1, 2 * v6);
  int v7 = *(_DWORD *)(a1 + 16);
  if (!v7) {
    goto LABEL_23;
  }
  unsigned int v8 = v7 - 1;
  uint64_t v9 = (37 * *a2) & v8;
  a3 = (_DWORD *)(*(void *)a1 + 32 * v9);
  int v10 = *a3;
  if (*a2 == *a3) {
    goto LABEL_8;
  }
  int v11 = 0;
  int v12 = 1;
  while (v10 != -1)
  {
    if (v11) {
      BOOL v21 = 0;
    }
    else {
      BOOL v21 = v10 == -2;
    }
    if (v21) {
      int v11 = a3;
    }
    int v22 = v9 + v12++;
    uint64_t v9 = v22 & v8;
    a3 = (_DWORD *)(*(void *)a1 + 32 * v9);
    int v10 = *a3;
    if (*a2 == *a3) {
      goto LABEL_8;
    }
  }
LABEL_6:
  if (v11) {
    a3 = v11;
  }
LABEL_8:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t sub_1CD41B598(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v5 = (const void *)(a2 + 16);
    uint64_t v4 = *(const void **)a2;
    if (v4 == v5)
    {
      int v7 = (_DWORD *)(a2 + 8);
      uint64_t v9 = *(unsigned int *)(a2 + 8);
      uint64_t v10 = *(unsigned int *)(a1 + 8);
      if (v10 >= v9)
      {
        if (v9) {
          memmove(*(void **)a1, v4, 4 * v9);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v9)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v10) {
          memmove(*(void **)a1, v4, 4 * v10);
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v11 = *v7;
        if (v10 != v11) {
          memcpy((void *)(*(void *)a1 + 4 * v10), (const void *)(*(void *)a2 + 4 * v10), *(void *)a2 + 4 * v11 - (*(void *)a2 + 4 * v10));
        }
      }
      *(_DWORD *)(a1 + 8) = v9;
    }
    else
    {
      unsigned int v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        uint64_t v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      int v7 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    *int v7 = 0;
  }
  return a1;
}

uint64_t sub_1CD41B6B0(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(unsigned int *)(a2 + 8);
    uint64_t v4 = *(unsigned int *)(a1 + 8);
    if (v4 >= v3)
    {
      if (v3) {
        memmove(*(void **)a1, *(const void **)a2, 4 * v3);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v3)
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v4)
      {
        uint64_t v8 = *(unsigned int *)(a1 + 8);
        uint64_t v9 = a2;
        memmove(*(void **)a1, *(const void **)a2, 4 * v4);
        uint64_t v5 = v8;
        a2 = v9;
      }
      else
      {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6) {
        memcpy((void *)(*(void *)a1 + 4 * v5), (const void *)(*(void *)a2 + 4 * v5), *(void *)a2 + 4 * v6 - (*(void *)a2 + 4 * v5));
      }
    }
    *(_DWORD *)(a1 + 8) = v3;
  }
  return a1;
}

void sub_1CD41B794(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBFDA8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBAA4BCC;
    v3[1] = &v1;
    __int32 v2 = v3;
    std::__call_once(&qword_1EBCBFDA8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD41B804(uint64_t a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::TargetPassConfig::ID);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&unk_1EA61EFE3);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)&unk_1EA61EFE3);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&unk_1EA61EFE4);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)&unk_1EA61EFE4);

  llvm::MachineFunctionPass::getAnalysisUsage(a1, (uint64_t)this);
}

uint64_t sub_1CD41B8A4(uint64_t a1)
{
  sub_1CB8483A0(a1, (uint64_t)&unk_1EBCBFDA0);
  *(void *)__int32 v2 = &unk_1F25F5798;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v2);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBFDA8, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CBAA4BCC;
    v6[1] = &PassRegistry;
    uint64_t v5 = v6;
    std::__call_once(&qword_1EBCBFDA8, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CD41B95C()
{
}

void sub_1CD41B974(llvm::Pass *a1)
{
  sub_1CBA0E6AC(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD41B9AC()
{
}

void sub_1CD41B9E8(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBFFF8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBAA8B60;
    v3[1] = &v1;
    __int32 v2 = v3;
    std::__call_once(&qword_1EBCBFFF8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD41BA58(uint64_t a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::TargetPassConfig::ID);
  *((unsigned char *)this + 160) = 1;

  llvm::MachineFunctionPass::getAnalysisUsage(a1, (uint64_t)this);
}

uint64_t sub_1CD41BAAC(uint64_t a1)
{
  sub_1CB8483A0(a1, (uint64_t)&unk_1EBCBFFF0);
  *(void *)__int32 v2 = &unk_1F25F5880;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v2);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCBFFF8, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CBAA8B60;
    v6[1] = &PassRegistry;
    uint64_t v5 = v6;
    std::__call_once(&qword_1EBCBFFF8, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CD41BB5C(llvm::FunctionPass *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if ((**(unsigned char **)(a2 + 360) & 0x10) == 0 && byte_1EBCBFFB0)
  {
    uint64_t v5 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    if (v6 == v7)
    {
LABEL_6:
      uint64_t v8 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v6 != &llvm::TargetPassConfig::ID)
      {
        v6 += 16;
        if (v6 == v7) {
          goto LABEL_6;
        }
      }
      uint64_t v8 = *(void *)(v6 + 8);
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::TargetPassConfig::ID);
    uint64_t v10 = *(llvm::LLVMContextImpl *****)a2;
    if (llvm::TargetMachine::getOptLevel(*(llvm::TargetMachine **)(a2 + 8))) {
      char v11 = llvm::FunctionPass::skipFunction(a1, v10) ^ 1;
    }
    else {
      char v11 = 0;
    }
    char hasFnAttribute = 1;
    if ((llvm::Function::hasFnAttribute((uint64_t)v10, 42) & 1) == 0) {
      char hasFnAttribute = llvm::Function::hasFnAttribute((uint64_t)v10, 15);
    }
    __int16 v18 = 1;
    uint64_t v19 = 0;
    char v20 = v11;
    char v21 = hasFnAttribute;
    char v22 = llvm::Function::hasFnAttribute((uint64_t)v10, 15);
    int v17 = &unk_1F25F5940;
    sub_1CC6EB0B8(v15, (uint64_t)&v17, v9);
    uint64_t v2 = sub_1CC6EB0C4();
    uint64_t v13 = v16;
    uint64_t v16 = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  return v2;
}

uint64_t sub_1CD41BD08(int a1, int a2, llvm::MachineInstr *this, uint64_t a4)
{
  int v5 = **((unsigned __int16 **)this + 2);
  if (v5 == 19)
  {
    uint64_t v31 = *((void *)this + 4);
    unsigned int v32 = *(_DWORD *)(v31 + 36);
    unsigned int v33 = *(_DWORD *)(v31 + 4);
    uint64_t MF = llvm::MachineInstr::getMF(this);
    uint64_t v30 = 0;
    if ((v32 & 0x80000000) != 0 && (v33 & 0x80000000) != 0)
    {
      unsigned int v35 = *(void **)(MF + 40);
      if ((*(void *)(v35[3] + 16 * (v32 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v35[3]
                                                                                                  + 16 * (v33 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8))
      {
        llvm::MachineRegisterInfo::replaceRegWith(v35, v33, v32);
        llvm::MachineInstr::eraseFromParent(this);
        return 1;
      }
      return 0;
    }
  }
  else
  {
    if (v5 != 18) {
      return 0;
    }
    unsigned int v7 = *(_DWORD *)(*((void *)this + 4) + 4);
    uint64_t v8 = llvm::MachineInstr::getMF(this);
    uint64_t v9 = *(void *)(v8 + 40);
    uint64_t v10 = (*(uint64_t (**)(void, void))(**(void **)(v8 + 8) + 16))(*(void *)(v8 + 8), *(void *)v8);
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 176))(v10);
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 184))(v10);
    uint64_t v13 = *(void *)(*(void *)(v9 + 24) + 16 * (v7 & 0x7FFFFFFF));
    int SizeInBits = llvm::RegisterBankInfo::getSizeInBits(v12, *(_DWORD *)(*((void *)this + 4) + 36), v9, v11);
    if (SizeInBits != 32 && SizeInBits != 16) {
      return 0;
    }
    int v16 = SizeInBits;
    uint64_t VRegDef = llvm::MachineRegisterInfo::getVRegDef(v9, *(_DWORD *)(*((void *)this + 4) + 36));
    if (**(_WORD **)(VRegDef + 16) != 19) {
      return 0;
    }
    unsigned int v18 = *(_DWORD *)(*(void *)(VRegDef + 32) + 36);
    if ((v18 & 0x80000000) == 0) {
      return 0;
    }
    uint64_t v19 = *(void *)(*(void *)(v9 + 24) + 16 * (v18 & 0x7FFFFFFF));
    unint64_t v20 = (v19 & 4) != 0 ? 0 : v19 & 0xFFFFFFFFFFFFFFF8;
    if (v20 && v20 != (v13 & 0xFFFFFFFFFFFFFFF8)) {
      return 0;
    }
    if (!v20)
    {
      int v37 = llvm::RegisterBankInfo::getSizeInBits(v12, v7, v9, v11);
      if (llvm::RegisterBankInfo::getSizeInBits(v12, v18, v9, v11) != v37) {
        return 0;
      }
    }
    if (*((_DWORD *)this + 10) >= 2u)
    {
      if (v16 == 16) {
        int v22 = 1;
      }
      else {
        int v22 = 25;
      }
      uint64_t v23 = *((void *)this + 4);
      unsigned int v24 = 1;
      do
      {
        uint64_t v25 = llvm::MachineRegisterInfo::getVRegDef(v9, *(_DWORD *)(v23 + 32 * v24 + 4));
        if (**(_WORD **)(v25 + 16) != 19) {
          return 0;
        }
        uint64_t v26 = *(void *)(v25 + 32);
        if (*(_DWORD *)(v26 + 36) != v18) {
          return 0;
        }
        unint64_t v27 = ((unint64_t)*(unsigned int *)(v26 + 32) >> 8) & 0xFFF;
        uint64_t v23 = *((void *)this + 4);
        uint64_t v28 = *(void *)(v23 + 32 * (v24 + 1) + 16);
        if (v28 != v22 + (v24 >> 1) || v28 != v27) {
          return 0;
        }
        v24 += 2;
      }
      while (v24 < *((_DWORD *)this + 10));
    }
    *(void *)(a4 + 40) = *((void *)this + 3);
    *(void *)(a4 + 48) = this;
    uint64_t v30 = 1;
    v39[0] = v7;
    v39[2] = 1;
    v38[0] = v18;
    v38[4] = 0;
    sub_1CC73695C(a4, (uint64_t)v39, (uint64_t)v38);
    llvm::MachineInstr::eraseFromParent(this);
  }
  return v30;
}

void sub_1CD41C004()
{
}

void sub_1CD41C01C(llvm::Pass *a1)
{
  sub_1CBA0E6AC(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CD41C054()
{
  return "AGX2PostSelectionCombiner";
}

void sub_1CD41C064()
{
}

void sub_1CD41C0A0(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC0008, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBAA8C8C;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCC0008, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD41C110(uint64_t a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::TargetPassConfig::ID);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&unk_1EA61EFE3);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)&unk_1EA61EFE3);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&unk_1EA61EFE4);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)&unk_1EA61EFE4);

  llvm::MachineFunctionPass::getAnalysisUsage(a1, (uint64_t)this);
}

uint64_t sub_1CD41C1B0(uint64_t a1)
{
  sub_1CB8483A0(a1, (uint64_t)&unk_1EBCC0000);
  *(void *)uint64_t v2 = &unk_1F25F5968;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v2);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC0008, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CBAA8C8C;
    v6[1] = &PassRegistry;
    int v5 = v6;
    std::__call_once(&qword_1EBCC0008, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CD41C268()
{
}

void sub_1CD41C280(llvm::Pass *a1)
{
  sub_1CBA0E6AC(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD41C2B8()
{
}

void sub_1CD41C2F4()
{
}

void sub_1CD41C330(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  v21[24] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = v21;
  uint64_t v20 = 0x800000000;
  if (a1 != a2)
  {
    int v5 = a1;
    do
    {
      uint64_t v17 = *v5;
      long long v18 = *(_OWORD *)(v17 + 8);
      unint64_t v6 = sub_1CD41C4F0((uint64_t)&v19, (unint64_t)&v17, 1);
      unsigned int v7 = (char *)v19 + 24 * v20;
      long long v8 = *(_OWORD *)v6;
      *((void *)v7 + 2) = *(void *)(v6 + 16);
      *(_OWORD *)unsigned int v7 = v8;
      BOOL v9 = __CFADD__(v20, 1);
      unsigned int v10 = v20 + 1;
      LODWORD(v20) = v20 + 1;
      if (!v9)
      {
        do
        {
          uint64_t v11 = (char *)v19 + 24 * v10;
          uint64_t v12 = (uint64_t *)*((void *)v11 - 2);
          if (v12 == *((uint64_t **)v11 - 1))
          {
            uint64_t v17 = *((void *)v11 - 3);
            uint64_t v13 = *(void *)(a3 + 24);
            if (!v13) {
              sub_1CB920400();
            }
            (*(void (**)(uint64_t, uint64_t *))(*(void *)v13 + 48))(v13, &v17);
            unsigned int v10 = v20 - 1;
          }
          else
          {
            *((void *)v11 - 2) = v12 + 1;
            uint64_t v17 = *v12;
            long long v18 = *(_OWORD *)(*v12 + 8);
            unint64_t v14 = sub_1CD41C4F0((uint64_t)&v19, (unint64_t)&v17, 1);
            unsigned int v15 = (char *)v19 + 24 * v20;
            long long v16 = *(_OWORD *)v14;
            *((void *)v15 + 2) = *(void *)(v14 + 16);
            *(_OWORD *)unsigned int v15 = v16;
            unsigned int v10 = v20 + 1;
          }
          LODWORD(v20) = v10;
        }
        while (v10);
      }
      ++v5;
    }
    while (v5 != a2);
    if (v19 != v21) {
      free(v19);
    }
  }
}

unint64_t sub_1CD41C4F0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    unint64_t v5 = *(void *)a1 + 24 * v3;
    if (*(void *)a1 > a2 || v5 <= a2) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  return a2;
}

uint64_t sub_1CD41C56C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unint64_t v5 = (const void *)(a2 + 16);
    uint64_t v4 = *(const void **)a2;
    if (v4 == v5)
    {
      unsigned int v7 = (_DWORD *)(a2 + 8);
      uint64_t v9 = *(unsigned int *)(a2 + 8);
      uint64_t v10 = *(unsigned int *)(a1 + 8);
      if (v10 >= v9)
      {
        if (v9) {
          memmove(*(void **)a1, v4, 8 * v9);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v9)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v10) {
          memmove(*(void **)a1, v4, 8 * v10);
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v11 = *v7;
        if (v10 != v11) {
          memcpy((void *)(*(void *)a1 + 8 * v10), (const void *)(*(void *)a2 + 8 * v10), *(void *)a2 + 8 * v11 - (*(void *)a2 + 8 * v10));
        }
      }
      *(_DWORD *)(a1 + 8) = v9;
    }
    else
    {
      unint64_t v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        uint64_t v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      unsigned int v7 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    *unsigned int v7 = 0;
  }
  return a1;
}

void sub_1CD41C684()
{
}

void sub_1CD41C6D0()
{
}

void sub_1CD41C79C(void *a1)
{
  sub_1CBACB4A0(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD41C7E0(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC01E8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBACB5B0;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCC01E8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD41C850()
{
}

uint64_t sub_1CD41C88C(uint64_t this, uint64_t a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 44) || *(void *)(*(void *)(this + 24) + 56) == a2) {
    goto LABEL_4;
  }
  do
  {
    this = llvm::RegScavenger::forward(v3);
LABEL_4:
    ;
  }
  while (*(void *)(v3 + 32) != a2);
  return this;
}

void LLVMInitializeAGX3AsmPrinter()
{
  qword_1EA61E928 = (uint64_t)sub_1CD41D3F0;
}

llvm::Constant *sub_1CD41C8F8(uint64_t a1, llvm::GPUMetadataEmitter *this)
{
  if (this && *((unsigned char *)this + 16) == 3)
  {
    uint64_t ConstSamplerBindNumber = llvm::GPUMetadataEmitter::GetConstSamplerBindNumber(this, this);
    unsigned int v6 = ConstSamplerBindNumber;
    uint64_t v7 = ConstSamplerBindNumber & 0xFF00000000;
    uint64_t Symbol = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1 + 248), this);
    uint64_t v9 = *(void *)(a1 + 264);
    if (v7)
    {
      unint64_t v10 = llvm::MCSymbolRefExpr::create(Symbol, 153, v9, 0);
      unint64_t v11 = llvm::MCConstantExpr::create((llvm::MCConstantExpr *)v6, v9, 0, 0);
      return (llvm::Constant *)llvm::MCBinaryExpr::create(0, v10, v11, v9, 0);
    }
    else
    {
      return (llvm::Constant *)llvm::MCSymbolRefExpr::create(Symbol, 0, v9, 0);
    }
  }
  else
  {
    return sub_1CD89F988((void *)a1, this);
  }
}

void sub_1CD41C9F4(std::string *a1, uint64_t a2)
{
  sub_1CBE52E5C(**(unsigned __int16 **)(a2 + 16));
  uint64_t v19 = a2;
  unsigned int v4 = sub_1CBDA6464(**(unsigned __int16 **)(a2 + 16), 0x3Du);
  sub_1CBACE718((uint64_t)&v18, (uint64_t)&v19, v4);
  unint64_t v5 = std::string::insert(&v18, 0, "IPRs: i0 = ");
  std::string::size_type v6 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  a1->__r_.__value_.__r.__words[2] = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  unsigned int v7 = sub_1CBDA6464(**(unsigned __int16 **)(a2 + 16), 0x5Eu);
  sub_1CBACE718((uint64_t)&v17, (uint64_t)&v19, v7);
  long long v8 = std::string::insert(&v17, 0, ", i1 = ");
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v10 = &v18;
  }
  else {
    unint64_t v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = *((unsigned char *)&v18.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type size = v18.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v10, size);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  unsigned int v12 = sub_1CBDA6464(**(unsigned __int16 **)(a2 + 16), 0x5Fu);
  sub_1CBACE718((uint64_t)&v17, (uint64_t)&v19, v12);
  uint64_t v13 = std::string::insert(&v17, 0, ", i2 = ");
  std::string::size_type v14 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v15 = &v18;
  }
  else {
    unsigned int v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v16 = *((unsigned char *)&v18.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type v16 = v18.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v15, v16);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

llvm::raw_ostream *sub_1CD41CBBC(llvm::raw_ostream *a1, int a2)
{
  return llvm::raw_ostream::operator<<(a1, a2);
}

uint64_t sub_1CD41CBC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a2 + 48))(a2, "Instruction ");
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 56))(v3, a1 + 16);
  unint64_t v5 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)v4 + 48))(v4, ", falling back to AGX2:  ")+ 56);

  return v5();
}

uint64_t sub_1CD41CCA4(uint64_t a1, llvm::MachineInstr *a2, char a3)
{
  *(_DWORD *)(a1 + 8) = 22;
  *(unsigned char *)(a1 + 12) = a3 ^ 1;
  *(void *)a1 = &unk_1F25F5DF0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = a1 + 16;
  int v7 = 0;
  char v11 = 0;
  uint64_t v12 = 0;
  uint64_t v14 = a1 + 40;
  int v13 = 0;
  std::string::size_type v6 = &unk_1F2646F30;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  llvm::MachineInstr::print(a2, (llvm::raw_ostream *)&v6, (const llvm::TargetRegisterInfo *)1, 0, 0, 0, 0);
  MEMORY[0x1D25D9630](v4, "is not implemented yet for G15");
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v6);
  return a1;
}

uint64_t sub_1CD41CD88(uint64_t a1)
{
  return *(unsigned int *)(a1 + 208);
}

double sub_1CD41CD90(uint64_t a1)
{
  return *(double *)(a1 + 248);
}

uint64_t sub_1CD41CD98()
{
  return 1;
}

void sub_1CD41CDA4(void *a1)
{
  sub_1CD41D0E4(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD41CDDC(void *a1)
{
  *a1 = &unk_1F25F6200;
  sub_1CB833728((uint64_t)(a1 + 198));
}

void sub_1CD41CE14()
{
  sub_1CD41D0E4((void *)(v0 + 792));
  sub_1CD89D63C(v0);
}

void sub_1CD41CE3C(void *a1)
{
  *a1 = &unk_1F25F6200;
  sub_1CB833728((uint64_t)(a1 + 198));
}

void sub_1CD41CE74()
{
  sub_1CD41D0E4((void *)(v0 + 792));
  sub_1CD89D63C(v0);
  JUMPOUT(0x1D25D9CE0);
}

llvm::AnalysisUsage *sub_1CD41CEB0(uint64_t a1, llvm::AnalysisUsage *a2)
{
  sub_1CD89D864(a1, a2);

  return llvm::AnalysisUsage::addRequiredID(a2, llvm::MachineLoopInfo::ID);
}

void sub_1CD41CEF0(uint64_t a1)
{
  sub_1CD41D084(a1);

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CD41CF28(void *a1)
{
  *a1 = &unk_1F2643FD0;
  uint64_t v2 = a1 + 25;
  uint64_t v3 = (void *)a1[28];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  sub_1CD41CFE4((uint64_t)(a1 + 16));

  return sub_1CB87DD48(a1);
}

uint64_t sub_1CD41CFE4(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F25F6470;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL sub_1CD41D048(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 32)
      && *(unsigned char *)(a1 + 32)
      && !sub_1CBAD746C((unsigned __int8 *)(a1 + 8), (unsigned __int8 *)(a2 + 8));
}

uint64_t sub_1CD41D084(uint64_t a1)
{
  *(void *)a1 = &unk_1F25F5DF0;
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void *sub_1CD41D0E4(void *a1)
{
  *a1 = &unk_1F25F5E20;
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)(a1 + 90));
  uint64_t v2 = (void *)a1[55];
  if (v2 != a1 + 58) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[46];
  if (v3 != a1 + 48) {
    free(v3);
  }
  return a1;
}

uint64_t sub_1CD41D15C(uint64_t a1, char *a2, _OWORD *a3, unsigned char **a4)
{
  uint64_t v8 = sub_1CB883A14(a1, 0, 0);
  *(unsigned char *)(v8 + 128) = 0;
  *(void *)(v8 + 136) = &unk_1F25EDE58;
  *(void *)(v8 + 144) = 0;
  *(void *)uint64_t v8 = &unk_1F26440A0;
  *(void *)(v8 + 152) = &unk_1F2643CC0;
  *(void *)(v8 + 160) = &unk_1F25EDE78;
  *(void *)(v8 + 184) = v8 + 160;
  size_t v9 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v9);
  *(_OWORD *)(a1 + 32) = *a3;
  uint64_t v10 = *a4;
  *(unsigned char *)(a1 + 128) = **a4;
  *(unsigned char *)(a1 + 145) = 1;
  *(unsigned char *)(a1 + 144) = *v10;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void sub_1CD41D268(long long *a1, const char **a2)
{
  uint64_t v4 = sub_1CB883A14((uint64_t)qword_1EBD021B0, 0, 0);
  qword_1EBD02230 = 0;
  unk_1EBD02238 = 0;
  qword_1EBD02258 = 0;
  unk_1EBD02260 = 0;
  byte_1EBD02268 = 0;
  qword_1EBD02250 = 0;
  qword_1EBD02240 = 0;
  unk_1EBD02248 = &unk_1F2643C20;
  qword_1EBD021B0[0] = (uint64_t)&unk_1F2643FD0;
  qword_1EBD02270 = (uint64_t)&unk_1F2643EA0;
  qword_1EBD02278 = (uint64_t)&unk_1F25F6428;
  qword_1EBD02290 = (uint64_t)&qword_1EBD02278;
  llvm::cl::Option::setArgStr(v4, "clique-trace-verify", 0x13uLL);
  xmmword_1EBD021D0 = *a1;
  sub_1CBAD7D28(a2, (uint64_t)qword_1EBD021B0);

  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EBD021B0);
}

void sub_1CD41D378()
{
}

void *sub_1CD41D38C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F25F6428;
  return result;
}

void sub_1CD41D3C4(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F6428;
}

void sub_1CD41D3F0()
{
}

uint64_t sub_1CD41D48C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v7 = v4;
  sub_1CD89D51C(a1, a2, &v7);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 48))(v5);
  }
  *(void *)a1 = &unk_1F25F6200;
  sub_1CD41D538(a1 + 792);
  llvm::GPUMetadataEmitter::GPUMetadataEmitter(a1 + 1584);
  *(_DWORD *)(a1 + 7952) = 0;
  return a1;
}

uint64_t sub_1CD41D538(uint64_t a1)
{
  *(void *)a1 = &unk_1F25F5E20;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 360) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 368) = a1 + 384;
  *(void *)(a1 + 376) = 0x600000000;
  sub_1CB90D610(a1 + 368, 4uLL, 0);
  *(_DWORD *)(a1 + 432) = 256;
  *(void *)(a1 + 440) = a1 + 464;
  *(_OWORD *)(a1 + 448) = xmmword_1CD96DBF0;
  *(_DWORD *)(a1 + 728) = 0;
  *(unsigned char *)(a1 + 760) = 0;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 720) = &unk_1F2646FA8;
  *(void *)(a1 + 784) = a1 + 440;
  *(_DWORD *)(a1 + 776) = 0;
  *(void *)(a1 + 736) = 0;
  *(void *)(a1 + 752) = 0;
  *(void *)(a1 + 744) = 0;
  return a1;
}

void *sub_1CD41D660(void *result, uint64_t a2)
{
  *uint64_t result = &unk_1F25F64B0;
  result[1] = a2;
  return result;
}

void sub_1CD41D684()
{
}

uint64_t sub_1CD41D698(const void **a1, const void *a2, size_t __n)
{
  size_t v3 = (size_t)a1[1];
  if (v3 < __n) {
    return 0;
  }
  uint64_t v7 = (char *)*a1;
  if (__n)
  {
    if (memcmp(*a1, a2, __n)) {
      return 0;
    }
  }
  if (v3 >= __n) {
    size_t v8 = __n;
  }
  else {
    size_t v8 = v3;
  }
  *a1 = &v7[v8];
  a1[1] = (const void *)(v3 - v8);
  return 1;
}

void sub_1CD41D708(void *a1, unsigned int a2)
{
  if (a2 <= 4)
  {
    *a1 = 1;
    goto LABEL_5;
  }
  *(_DWORD *)a1 &= ~1u;
  uint64_t v3 = a2;
  size_t v4 = 4 * a2;
  buffer = llvm::allocate_buffer(v4, (std::align_val_t)4uLL);
  a1[1] = buffer;
  a1[2] = v3;
  int v6 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if (v6)
  {
LABEL_5:
    buffer = a1 + 1;
    size_t v4 = 16;
  }

  memset_pattern16(buffer, &unk_1CDB165A0, v4);
}

void *sub_1CD41D7A0(uint64_t *a1, void *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CD3C8538(a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD41D808((uint64_t)a1, (uint64_t)a2, a2, v7);
    void *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

void *sub_1CD41D808(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD41D8B8(a1, v7);
  size_t v9 = 0;
  sub_1CD3C8538((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CD41D8B8(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  char v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD3CDF08(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1CD41D98C(uint64_t a1, unsigned int a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    unint64_t v6 = *(int **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v12 = a2;
      *(void *)(a1 + 8) = llvm::allocate_buffer(4 * a2, (std::align_val_t)4uLL);
      *(void *)(a1 + 16) = v12;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD41DB10(a1, v6, &v6[v7]);
    llvm::deallocate_buffer((llvm *)v6, (void *)(4 * v7));
  }
  unsigned int v8 = v13;
  for (uint64_t i = 8; i != 24; i += 4)
  {
    int v10 = *(_DWORD *)(a1 + i);
    if ((v10 - 0x7FFFFFFF) >= 2) {
      *v8++ = v10;
    }
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = llvm::allocate_buffer(4 * a2, (std::align_val_t)4uLL);
    *(void *)(a1 + 16) = v11;
  }
  sub_1CD41DB10(a1, v13, v8);
}

void sub_1CD41DB10(uint64_t a1, int *a2, int *a3)
{
  int v6 = *(_DWORD *)a1;
  *(void *)a1 = *(_DWORD *)a1 & 1;
  if (v6)
  {
    unsigned int v8 = (void *)(a1 + 8);
    size_t v9 = 16;
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (!v7) {
      goto LABEL_6;
    }
    unsigned int v8 = *(void **)(a1 + 8);
    size_t v9 = 4 * v7;
  }
  memset_pattern16(v8, &unk_1CDB165A0, v9);
LABEL_6:
  while (a2 != a3)
  {
    int v10 = *a2;
    if ((*a2 - 0x7FFFFFFF) >= 2)
    {
      uint64_t v11 = 0;
      sub_1CBAE0198(a1, v10, &v11);
      *uint64_t v11 = *a2;
      *(_DWORD *)a1 += 2;
    }
    ++a2;
  }
}

void sub_1CD41DBD0(unsigned int *a1)
{
  unsigned int v1 = *a1;
  unsigned int v2 = __clz((*a1 >> 1) - 1);
  if (v2 - 28 >= 3) {
    int v3 = 1 << (33 - v2);
  }
  else {
    int v3 = 64;
  }
  if (v1 >= 2) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = 0;
  }
  if ((v1 & 1) != 0 && v4 < 5)
  {
    *(void *)a1 = 1;
    int v5 = a1 + 2;
    size_t v6 = 16;
LABEL_10:
    memset_pattern16(v5, &unk_1CDB165A0, v6);
    return;
  }
  if (v1)
  {
    sub_1CD41D708(a1, v4);
  }
  else
  {
    uint64_t v7 = a1[4];
    if (v4 != v7) {
      llvm::deallocate_buffer(*((llvm **)a1 + 1), (void *)(4 * v7));
    }
    *(void *)a1 = 0;
    if (v4)
    {
      int v5 = (void *)*((void *)a1 + 1);
      size_t v6 = 4 * v4;
      goto LABEL_10;
    }
  }
}

void sub_1CD41DCC4()
{
}

void sub_1CD41DD34(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *a1;
    uint64_t v7 = *a1 + 40 * v2;
    do
    {
      uint64_t v8 = a2 + v5;
      uint64_t v9 = v6 + v5;
      *(_DWORD *)uint64_t v8 = *(_DWORD *)(v6 + v5);
      *(void *)(v8 + 16) = 0x400000000;
      *(void *)(v8 + 8) = a2 + v5 + 24;
      if (*(_DWORD *)(v6 + v5 + 16)) {
        sub_1CD41B598(a2 + v5 + 8, v9 + 8);
      }
      v5 += 40;
    }
    while (v9 + 40 != v7);
    uint64_t v10 = *((unsigned int *)a1 + 2);
    if (v10)
    {
      uint64_t v11 = *a1;
      uint64_t v12 = 40 * v10;
      do
      {
        int v13 = *(void **)(v11 + v12 - 32);
        if ((void *)(v11 + v12 - 16) != v13) {
          free(v13);
        }
        v12 -= 40;
      }
      while (v12);
    }
  }
}

void sub_1CD41DE08(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EA618A20, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBAE09BC;
    v3[1] = &v1;
    unsigned int v2 = v3;
    std::__call_once(&qword_1EA618A20, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD41DE78()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CD41E0FC(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EA618A30, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBAE9248;
    v3[1] = &v1;
    unsigned int v2 = v3;
    std::__call_once(&qword_1EA618A30, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD41E16C()
{
}

void sub_1CD41E1D8()
{
}

uint64_t sub_1CD41E214(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    uint64_t v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *uint64_t v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v10 = 0;
      uint64_t result = sub_1CBAEB668((uint64_t *)v5, (void *)a2, &v10);
      uint64_t v9 = v10;
      *uint64_t v10 = *(void *)a2;
      *((unsigned char *)v9 + 8) = *(unsigned char *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

void sub_1CD41E2C4()
{
}

void sub_1CD41E334()
{
}

void sub_1CD41E370(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC04C8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBAEDCE8;
    v3[1] = &v1;
    unsigned int v2 = v3;
    std::__call_once(&qword_1EBCC04C8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD41E3E0(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F25F6B28;
  unsigned int v2 = (void *)*((void *)a1 + 36);
  if (v2 != *((void **)a1 + 35)) {
    free(v2);
  }

  sub_1CBA0E6AC(a1);
}

void sub_1CD41E444(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F25F6B28;
  unsigned int v2 = (void *)*((void *)a1 + 36);
  if (v2 != *((void **)a1 + 35)) {
    free(v2);
  }
  sub_1CBA0E6AC(a1);

  JUMPOUT(0x1D25D9CE0);
}

llvm::AnalysisUsage *sub_1CD41E4C0(uint64_t a1, llvm::AnalysisUsage *a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, (uint64_t)a2);
  llvm::AnalysisUsage::setPreservesCFG(a2);
  *((unsigned char *)a2 + 160) = 1;
  llvm::AnalysisUsage::addRequiredID(a2, (char *)&llvm::SlotIndexes::ID);
  llvm::AnalysisUsage::addRequiredID(a2, (char *)&llvm::MachineDominatorTree::ID);

  return llvm::AnalysisUsage::addRequiredID(a2, (char *)&llvm::MachinePostDominatorTree::ID);
}

uint64_t sub_1CD41E530(uint64_t a1)
{
  sub_1CB8483A0(a1, (uint64_t)&unk_1EBCC04C0);
  *(void *)uint64_t v2 = &unk_1F25F6B28;
  *(void *)(v2 + 280) = v2 + 312;
  *(void *)(v2 + 288) = v2 + 312;
  *(void *)(v2 + 296) = 4;
  *(_DWORD *)(v2 + 304) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)v2);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC04C8, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CBAEDCE8;
    v6[1] = &PassRegistry;
    uint64_t v5 = v6;
    std::__call_once(&qword_1EBCC04C8, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CD41E5F8()
{
}

void sub_1CD41E634()
{
}

void sub_1CD41E670(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC04D8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBAEE9A4;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCC04D8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

uint64_t sub_1CD41E6E0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  unsigned int v6 = *(_DWORD *)(result + 16);
  if (v6)
  {
    uint64_t v7 = *(void **)result;
    uint64_t v8 = 880 * v6;
    do
    {
      *uint64_t v7 = -4096;
      v7 += 110;
      v8 -= 880;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    uint64_t v9 = a2 + 8;
    do
    {
      uint64_t v10 = *(void *)v4;
      if ((*(void *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v12 = 0;
        sub_1CBAF00B4(*(void *)v5, *(_DWORD *)(v5 + 16), v10, &v12);
        uint64_t v11 = v12;
        *uint64_t v12 = *(void *)v4;
        sub_1CBAF0140((uint64_t)(v11 + 1), v4 + 8);
        v11[1] = &unk_1F25F6CA8;
        *((_DWORD *)v11 + 218) = *(_DWORD *)(v4 + 872);
        ++*(_DWORD *)(v5 + 8);
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(v4 + 8) + 24))(v4 + 8);
      }
      v4 += 880;
      v9 += 880;
    }
    while (v4 != a3);
  }
  return result;
}

void sub_1CD41E800(uint64_t a1)
{
  sub_1CBAF1160(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD41E838(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1CBE52E8C(**(unsigned __int16 **)(a2 + 16));
  if ((v4 & 0xFF00000000) != 0 && v4 == 100 || !*(_DWORD *)(a2 + 40)) {
    return 0;
  }
  uint64_t v6 = 0;
  while (sub_1CBC2D2EC(a2, v6, (void *)(*(void *)(a1 + 328) + 8)) != 6)
  {
    if (++v6 >= *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  return v6 + 0x100000001;
}

void sub_1CD41E8D8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v4 = *(void **)a1;
    if (*(void *)a1 != a1 + 16) {
      free(v4);
    }
    *(unsigned char *)(a1 + 72) = 0;
  }
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x600000000;
  if (*(_DWORD *)(a2 + 8)) {
    sub_1CBAF13E8(a1, a2);
  }
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = 1;
}

uint64_t sub_1CD41E954(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(unsigned int *)(a2 + 8);
    uint64_t v4 = *(unsigned int *)(a1 + 8);
    if (v4 >= v3)
    {
      if (v3)
      {
        uint64_t v5 = *(long long **)a2;
        uint64_t v6 = *(_OWORD **)a1;
        uint64_t v7 = 16 * v3;
        do
        {
          long long v8 = *v5++;
          *v6++ = v8;
          v7 -= 16;
        }
        while (v7);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v3)
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v4)
      {
        uint64_t v9 = *(long long **)a2;
        uint64_t v10 = *(_OWORD **)a1;
        uint64_t v11 = 16 * v4;
        do
        {
          long long v12 = *v9++;
          *v10++ = v12;
          v11 -= 16;
        }
        while (v11);
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (v4 != v3) {
        memcpy((void *)(*(void *)a1 + 16 * v4), (const void *)(*(void *)a2 + 16 * v4), *(void *)a2 + 16 * v3 - (*(void *)a2 + 16 * v4));
      }
    }
    *(_DWORD *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t sub_1CD41EA44(uint64_t a1)
{
  if (*(_DWORD *)a1 == 6 || *(unsigned char *)(a1 + 8) && *(_DWORD *)(a1 + 4) == 100) {
    return 1;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if ((*(_WORD *)(v2 + 44) & 0xC) != 0 && (*(_WORD *)(v2 + 44) & 4) == 0) {
    return llvm::MachineInstr::hasPropertyInBundle(v2, 128, 1);
  }
  else {
    return *(unsigned __int8 *)(*(void *)(v2 + 16) + 8) >> 7;
  }
}

void sub_1CD41EAA4(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EA618A40, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBAF14F4;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EA618A40, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD41EB14()
{
}

void sub_1CD41EB68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  sub_1CBAF93DC((uint64_t)&v9, *(void *)a1, *(_DWORD *)(a1 + 16), a3);
  uint64_t v6 = a2;
  v7[0] = v8;
  v7[1] = (void *)0x600000000;
  if (v10) {
    sub_1CB837F14((uint64_t)v7, (uint64_t)&v9);
  }
  v8[12] = v11[12];
  sub_1CBB117B4((uint64_t)v5, a1, &v6, (uint64_t)v7);
  if (v7[0] != v8) {
    free(v7[0]);
  }
  if (v9 != v11) {
    free(v9);
  }
}

void sub_1CD41EC50(llvm *a1)
{
  uint64_t v1 = a1;
  v78[1] = *MEMORY[0x1E4F143B8];
  int v2 = *((_DWORD *)a1 + 2);
  uint64_t v3 = llvm::dbgs(a1);
  if (v2)
  {
    sub_1CB8E509C(v3, "\n");
    p_p = &__p;
    uint64_t v66 = 0;
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    LODWORD(v73) = 0;
    v68[0] = 0;
    v68[1] = 0;
    int v69 = 0;
    int v4 = *((_DWORD *)v1 + 2);
    uint64_t v5 = *(void *)v1;
    uint64_t v6 = *((unsigned int *)v1 + 4);
    uint64_t v7 = *(void *)v1 + 32 * v6;
    unsigned int v8 = *((_DWORD *)v1 + 4);
    uint64_t v9 = v7;
    if (v4)
    {
      if (v6)
      {
        uint64_t v10 = 32 * v6;
        uint64_t v9 = *(void *)v1;
        while ((*(void *)v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v9 += 32;
          v10 -= 32;
          if (!v10)
          {
            unsigned int v8 = *((_DWORD *)v1 + 4);
            uint64_t v9 = *(void *)v1 + 32 * v6;
            goto LABEL_8;
          }
        }
        unsigned int v8 = *((_DWORD *)v1 + 4);
      }
      else
      {
        unsigned int v8 = 0;
        uint64_t v9 = *(void *)v1;
      }
    }
LABEL_8:
    uint64_t v11 = v5 + 32 * v8;
    if (v9 != v11)
    {
      do
      {
        std::string::size_type v12 = *(void *)(*(void *)v9 + 24);
        __p.__r_.__value_.__r.__words[0] = v12;
        sub_1CD4201D0((uint64_t)&v71, &__p, (uint64_t)&v75);
        if (v75.__r_.__value_.__s.__data_[16])
        {
          std::string::size_type v13 = v12 + 48;
          std::string::size_type v14 = *(void *)(v12 + 56);
          if (v14 != v13)
          {
            int v15 = 0;
            do
            {
              v75.__r_.__value_.__r.__words[0] = v14;
              *((_DWORD *)sub_1CD40EB18((uint64_t)v68, (uint64_t *)&v75) + 2) = v15;
              if (!v14 || (*(unsigned char *)v14 & 4) == 0)
              {
                while ((*(_WORD *)(v14 + 44) & 8) != 0)
                  std::string::size_type v14 = *(void *)(v14 + 8);
              }
              ++v15;
              std::string::size_type v14 = *(void *)(v14 + 8);
            }
            while (v14 != v13);
          }
        }
        uint64_t v16 = v9 + 32;
        uint64_t v9 = v7;
        if (v16 != v7)
        {
          uint64_t v9 = v16;
          while ((*(void *)v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v9 += 32;
            if (v9 == v7)
            {
              uint64_t v9 = v7;
              break;
            }
          }
        }
      }
      while (v9 != v11);
      int v4 = *((_DWORD *)v1 + 2);
      uint64_t v5 = *(void *)v1;
      uint64_t v6 = *((unsigned int *)v1 + 4);
    }
    std::string v17 = (void *)(v5 + 32 * v6);
    if (v4)
    {
      if (v6)
      {
        uint64_t v18 = 32 * v6;
        uint64_t v19 = (void *)v5;
        while ((*v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v19 += 4;
          v18 -= 32;
          if (!v18) {
            goto LABEL_30;
          }
        }
      }
      else
      {
        uint64_t v19 = (void *)v5;
      }
    }
    else
    {
LABEL_30:
      uint64_t v19 = (void *)(v5 + 32 * v6);
    }
    uint64_t v20 = (void *)(v5 + 32 * v6);
    unsigned int v21 = v66;
LABEL_32:
    while (v19 != v20)
    {
      if (v21 >= HIDWORD(v66)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)p_p + v21) = *v19;
      unsigned int v21 = v66 + 1;
      LODWORD(v66) = v66 + 1;
      int v22 = v19 + 4;
      uint64_t v19 = v17;
      if (v22 != v17)
      {
        uint64_t v19 = v22;
        while ((*v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v19 += 4;
          if (v19 == v17)
          {
            uint64_t v19 = v17;
            goto LABEL_32;
          }
        }
      }
    }
    v75.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
    unint64_t v23 = 126 - 2 * __clz(v21);
    if (v21) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    sub_1CBB11AE4((uint64_t)p_p, (uint64_t *)p_p + v21, (uint64_t *)&v75, v24, 1);
    MEMORY[0x1D25D9CD0](v68[0], 8);
    MEMORY[0x1D25D9CD0](v71, 8);
    uint64_t v25 = (std::string *)p_p;
    if (v66)
    {
      uint64_t v61 = (std::string *)((char *)p_p + 8 * v66);
      uint64_t v62 = v1;
      do
      {
        uint64_t v26 = (llvm::MachineInstr *)v25->__r_.__value_.__r.__words[0];
        uint64_t v27 = *(void *)(v25->__r_.__value_.__r.__words[0] + 24);
        sub_1CD41F280(&v76, *(void *)v1, *((_DWORD *)v1 + 4), v25->__r_.__value_.__r.__words[0]);
        uint64_t v29 = llvm::dbgs(v28);
        uint64_t v30 = sub_1CB8E509C(v29, "- Insert ");
        if (v77 != 1)
        {
          uint64_t v31 = llvm::dbgs(v30);
          unsigned int v32 = llvm::raw_ostream::operator<<(v31, v77);
          uint64_t v30 = sub_1CB8E509C(v32, " per-stk instances of ");
        }
        unsigned int v33 = llvm::dbgs(v30);
        uint64_t v34 = sub_1CB8E509C(v33, "SWWA in ");
        Name = llvm::MachineFunction::getName(*(llvm::Value ***)(v27 + 32));
        __int16 v74 = 773;
        uint64_t v71 = Name;
        uint64_t v72 = v36;
        uint64_t v73 = ":";
        sub_1CBAF993C(&__p, v27);
        __int16 v70 = 260;
        v68[0] = (uint64_t)&__p;
        sub_1CB8F1E58((uint64_t *)&v71, v68, (uint64_t)&v75);
        llvm::Twine::str((llvm::Twine *)&v75, v63);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v64 >= 0) {
          int v37 = v63;
        }
        else {
          int v37 = (void **)v63[0];
        }
        if (v64 >= 0) {
          size_t v38 = v64 & 0x7F;
        }
        else {
          size_t v38 = (size_t)v63[1];
        }
        uint64_t v39 = llvm::raw_ostream::write(v34, (const char *)v37, v38);
        if (v26 == *(llvm::MachineInstr **)(v27 + 56)) {
          uint64_t v40 = "\n";
        }
        else {
          uint64_t v40 = " after:\n";
        }
        unsigned int v41 = sub_1CB8E509C(v39, v40);
        if (v64 < 0) {
          operator delete(v63[0]);
        }
        for (uint64_t i = *(void *)(v27 + 56); (llvm::MachineInstr *)i != v26; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v43 = llvm::dbgs(v41);
          uint64_t v44 = sub_1CB8E509C(v43, "    ");
          llvm::MachineInstr::print((llvm::MachineInstr *)i, v44, (const llvm::TargetRegisterInfo *)1, 0, 0, 1, 0);
          if (!i || (*(unsigned char *)i & 4) == 0)
          {
            while ((*(_WORD *)(i + 44) & 8) != 0)
              uint64_t i = *(void *)(i + 8);
          }
        }
        uint64_t v45 = llvm::dbgs(v41);
        uint64_t v46 = sub_1CB8E509C(v45, "at  ");
        llvm::MachineInstr::print(v26, v46, (const llvm::TargetRegisterInfo *)1, 0, 0, 1, 0);
        uint64_t v47 = sub_1CB8E509C(v46, "to protect:\n");
        if (v77)
        {
          uint64_t v48 = v76;
          uint64_t v49 = 8 * v77;
          do
          {
            uint64_t v50 = *v48;
            uint64_t v51 = llvm::dbgs(v47);
            uint64_t v52 = sub_1CB8E509C(v51, "  - ");
            uint64_t v53 = llvm::dbgs(v52);
            llvm::MachineInstr::print((llvm::MachineInstr *)v50, v53, (const llvm::TargetRegisterInfo *)1, 0, 1, 0, 0);
            uint64_t v55 = llvm::dbgs(v54);
            uint64_t v56 = sub_1CB8E509C(v55, "\t# from ");
            sub_1CBAF993C(&v75, v50[3]);
            if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v57 = &v75;
            }
            else {
              uint64_t v57 = (std::string *)v75.__r_.__value_.__r.__words[0];
            }
            if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t size = *((unsigned char *)&v75.__r_.__value_.__s + 23) & 0x7F;
            }
            else {
              size_t size = v75.__r_.__value_.__l.__size_;
            }
            uint64_t v59 = llvm::raw_ostream::write(v56, (const char *)v57, size);
            uint64_t v47 = sub_1CB8E509C(v59, "\n");
            if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v75.__r_.__value_.__l.__data_);
            }
            ++v48;
            v49 -= 8;
          }
          while (v49);
        }
        uint64_t v60 = llvm::dbgs(v47);
        sub_1CB8E509C(v60, "\n");
        if (v76 != v78) {
          free(v76);
        }
        uint64_t v25 = (std::string *)((char *)v25 + 8);
        uint64_t v1 = v62;
      }
      while (v25 != v61);
      uint64_t v25 = (std::string *)p_p;
    }
    if (v25 != &__p) {
      free(v25);
    }
  }
  else
  {
    sub_1CB8E509C(v3, "- Nothing to do: no atomicdev.wrtn (gatomic.rtrn) instruction will see incoming RLD or BYP stk hazards even at SIMD-scope\n\n");
  }
}

double sub_1CD41F280(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7 = 0;
  if (sub_1CD41F538(a2, a3, a4, &v7))
  {
    uint64_t v5 = v7;
    *a1 = a1 + 2;
    *(void *)&double result = 0x100000000;
    a1[1] = 0x100000000;
    if (*(_DWORD *)(v5 + 16))
    {
      sub_1CBB08064((uint64_t)a1, v5 + 8);
    }
  }
  else
  {
    *a1 = a1 + 2;
    *(void *)&double result = 0x100000000;
    a1[1] = 0x100000000;
  }
  return result;
}

void sub_1CD41F324(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EA618A50, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBAF9A80;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EA618A50, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD41F394()
{
}

void *sub_1CD41F3E8(void *a1, unsigned int a2)
{
  if (a2 <= 0x10)
  {
    *a1 = 1;
LABEL_3:
    double result = a1 + 1;
    int v4 = a1 + 17;
    goto LABEL_4;
  }
  *(_DWORD *)a1 &= ~1u;
  uint64_t v5 = a2;
  double result = operator new(8 * a2, (std::align_val_t)8uLL);
  a1[1] = result;
  a1[2] = v5;
  int v6 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if (v6) {
    goto LABEL_3;
  }
  int v4 = &result[v5];
  do
LABEL_4:
    *result++ = -4096;
  while (result != v4);
  return result;
}

uint64_t sub_1CD41F46C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4) {
        memmove(*(void **)a1, *(const void **)a2, 16 * v4);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v4)
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v5) {
        memmove(*(void **)a1, *(const void **)a2, 16 * v5);
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6) {
        memcpy((void *)(*(void *)a1 + 16 * v5), (const void *)(*(void *)a2 + 16 * v5), *(void *)a2 + 16 * v6 - (*(void *)a2 + 16 * v5));
      }
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t sub_1CD41F538(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    uint64_t v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v5 = (void *)(a1 + 32 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a3)
    {
      uint64_t v7 = 1;
    }
    else
    {
      uint64_t v9 = 0;
      int v10 = 1;
      while (v6 != -4096)
      {
        if (v9) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v6 == -8192;
        }
        if (v11) {
          uint64_t v9 = v5;
        }
        int v12 = v4 + v10++;
        uint64_t v4 = v12 & (a2 - 1);
        uint64_t v5 = (void *)(a1 + 32 * v4);
        uint64_t v6 = *v5;
        uint64_t v7 = 1;
        if (*v5 == a3) {
          goto LABEL_4;
        }
      }
      uint64_t v7 = 0;
      if (v9) {
        uint64_t v5 = v9;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
LABEL_4:
  *a4 = v5;
  return v7;
}

uint64_t sub_1CD41F5CC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  int v12 = 0;
  uint64_t result = sub_1CBB082D8(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  uint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD41F65C(a2, v12, a3, a4);
    uint64_t v9 = (void *)result;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a2 + 32 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 16) = v10;
  return result;
}

void *sub_1CD41F65C(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = sub_1CBB0836C(a1, a3, a2);
  *uint64_t v6 = *a3;
  v6[1] = v6 + 3;
  void v6[2] = 0x100000000;
  if (*(_DWORD *)(a4 + 8)) {
    sub_1CBB08144((uint64_t)(v6 + 1), (const void **)a4);
  }
  return v6;
}

void sub_1CD41F6C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = *(void **)a1;
    uint64_t v8 = 32 * v6;
    do
    {
      *uint64_t v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t v9 = *(void *)v4;
      if ((*(void *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        std::string::size_type v13 = 0;
        sub_1CBB082D8(*(void *)a1, *(_DWORD *)(a1 + 16), v9, &v13);
        char v10 = v13;
        *std::string::size_type v13 = *(void *)v4;
        v10[2] = 0x100000000;
        v10[1] = v10 + 3;
        uint64_t v11 = (uint64_t)(v10 + 1);
        if (*(_DWORD *)(v4 + 16)) {
          sub_1CBB08144(v11, (const void **)(v4 + 8));
        }
        ++*(_DWORD *)(a1 + 8);
        int v12 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v12) {
          free(v12);
        }
      }
      v4 += 32;
    }
    while (v4 != a3);
  }
}

void *sub_1CD41F7B8(void *result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(_DWORD *)result;
  unsigned int v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 == 28) {
    int v4 = 64;
  }
  else {
    int v4 = 1 << (33 - v3);
  }
  if (v2 >= 2) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if ((v2 & 1) != 0 && v5 < 0x11)
  {
    uint64_t v6 = result + 1;
    *uint64_t result = 1;
    uint64_t v7 = result + 17;
    goto LABEL_18;
  }
  if ((v2 & 1) == 0)
  {
    if (v5 != *((_DWORD *)result + 4))
    {
      MEMORY[0x1D25D9CD0](result[1], 8);
      goto LABEL_12;
    }
    *uint64_t result = 0;
    if (!v5) {
      return result;
    }
    uint64_t v6 = (void *)result[1];
    uint64_t v7 = &v6[v5];
    do
LABEL_18:
      *v6++ = -4096;
    while (v6 != v7);
    return result;
  }
LABEL_12:

  return sub_1CD41F3E8(v1, v5);
}

void sub_1CD41F88C(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = *(void *)a1 + 104 * v4 - 24;
    uint64_t v6 = 104 * a2 - 104 * v4;
    do
    {
      sub_1CB833A08(v5, *(void **)(v5 + 8));
      uint64_t v7 = *(void **)(v5 - 80);
      if ((void *)(v5 - 64) != v7) {
        free(v7);
      }
      v5 -= 104;
      v6 += 104;
    }
    while (v6);
  }
  *(_DWORD *)(a1 + 8) = v2;
}

void sub_1CD41F90C()
{
}

void sub_1CD41F97C(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = 104 * v2;
    do
    {
      sub_1CBB1163C(a2, v5);
      v5 += 104;
      a2 += 104;
      v6 -= 104;
    }
    while (v6);
    unsigned int v7 = *(_DWORD *)(a1 + 8);
    if (v7)
    {
      uint64_t v8 = *(void *)a1;
      uint64_t v9 = 104 * v7;
      do
      {
        sub_1CB833A08(v8 + v9 - 24, *(void **)(v8 + v9 - 16));
        char v10 = *(void **)(v8 + v9 - 104);
        if ((void *)(v8 + v9 - 88) != v10) {
          free(v10);
        }
        v9 -= 104;
      }
      while (v9);
    }
  }
}

void sub_1CD41FA18(long long *a1, _WORD *a2, char **a3)
{
  uint64_t v6 = sub_1CB883A14((uint64_t)&qword_1EBCC0540, 0, 0);
  byte_1EBCC05C0 = 0;
  qword_1EBCC05C8 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBCC05D0 = 0;
  qword_1EBCC0540 = (uint64_t)&unk_1F26440A0;
  qword_1EBCC05D8 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCC05E0 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCC05F8 = (uint64_t)&qword_1EBCC05E0;
  llvm::cl::Option::setArgStr(v6, "global-fence-placement", 0x16uLL);
  xmmword_1EBCC0560 = *a1;
  word_1EBCC054A = word_1EBCC054A & 0xFFF8 | *a2 & 7;
  unsigned int v7 = *a3;
  byte_1EBCC05C0 = **a3;
  byte_1EBCC05D1 = 1;
  byte_1EBCC05D0 = *v7;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCC0540);
}

void sub_1CD41FB3C(long long *a1, _WORD *a2, int **a3)
{
  uint64_t v6 = sub_1CB883A14((uint64_t)&qword_1EBCC0600, 0, 0);
  dword_1EBCC0680 = 0;
  qword_1EBCC0688 = (uint64_t)&unk_1F25EA1B0;
  *(void *)&dword_1EBCC0690 = 0;
  qword_1EBCC0600 = (uint64_t)&unk_1F2643F00;
  qword_1EBCC0698 = (uint64_t)&unk_1F2643DB0;
  qword_1EBCC06A0 = (uint64_t)&unk_1F25EA168;
  qword_1EBCC06B8 = (uint64_t)&qword_1EBCC06A0;
  llvm::cl::Option::setArgStr(v6, "global-fence-placement-mbb-size-threshold", 0x29uLL);
  xmmword_1EBCC0620 = *a1;
  word_1EBCC060A = word_1EBCC060A & 0xFFF8 | *a2 & 7;
  unsigned int v7 = *a3;
  dword_1EBCC0680 = **a3;
  byte_1EBCC0694 = 1;
  dword_1EBCC0690 = *v7;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCC0600);
}

uint64_t sub_1CD41FC60(uint64_t a1, char *a2, _OWORD *a3, _WORD *a4, unsigned char **a5)
{
  uint64_t v10 = sub_1CB883A14(a1, 0, 0);
  *(unsigned char *)(v10 + 128) = 0;
  *(void *)(v10 + 136) = &unk_1F25EDE58;
  *(void *)(v10 + 144) = 0;
  *(void *)uint64_t v10 = &unk_1F26440A0;
  *(void *)(v10 + 152) = &unk_1F2643CC0;
  *(void *)(v10 + 160) = &unk_1F25EDE78;
  *(void *)(v10 + 184) = v10 + 160;
  size_t v11 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v11);
  *(_OWORD *)(a1 + 32) = *a3;
  *(_WORD *)(a1 + 10) = *(_WORD *)(a1 + 10) & 0xFFF8 | *a4 & 7;
  int v12 = *a5;
  *(unsigned char *)(a1 + 128) = **a5;
  *(unsigned char *)(a1 + 145) = 1;
  *(unsigned char *)(a1 + 144) = *v12;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void sub_1CD41FD88(long long *a1, _WORD *a2, char **a3)
{
  uint64_t v6 = sub_1CB883A14((uint64_t)&qword_1EBCC0840, 0, 0);
  byte_1EBCC08C0 = 0;
  qword_1EBCC08C8 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBCC08D0 = 0;
  qword_1EBCC0840 = (uint64_t)&unk_1F26440A0;
  qword_1EBCC08D8 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCC08E0 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCC08F8 = (uint64_t)&qword_1EBCC08E0;
  llvm::cl::Option::setArgStr(v6, "global-fence-placement-post-processing", 0x26uLL);
  xmmword_1EBCC0860 = *a1;
  word_1EBCC084A = word_1EBCC084A & 0xFFF8 | *a2 & 7;
  unsigned int v7 = *a3;
  byte_1EBCC08C0 = **a3;
  byte_1EBCC08D1 = 1;
  byte_1EBCC08D0 = *v7;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCC0840);
}

void sub_1CD41FEAC(long long *a1, _WORD *a2)
{
  uint64_t v4 = sub_1CB883A14((uint64_t)&qword_1EBCC09C0, 0, 0);
  dword_1EBCC0A40 = 0;
  qword_1EBCC0A48 = (uint64_t)&unk_1F25EA1B0;
  unk_1EBCC0A50 = 0;
  qword_1EBCC09C0 = (uint64_t)&unk_1F2643F00;
  qword_1EBCC0A58 = (uint64_t)&unk_1F2643DB0;
  qword_1EBCC0A60 = (uint64_t)&unk_1F25EA168;
  qword_1EBCC0A78 = (uint64_t)&qword_1EBCC0A60;
  llvm::cl::Option::setArgStr(v4, "restrict-fence-count", 0x14uLL);
  xmmword_1EBCC09E0 = *a1;
  word_1EBCC09CA = word_1EBCC09CA & 0xFFF8 | *a2 & 7;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCC09C0);
}

void sub_1CD41FFB0(long long *a1, _WORD *a2, int **a3)
{
  uint64_t v6 = sub_1CB883A14((uint64_t)&qword_1EBCC0B40, 0, 0);
  dword_1EBCC0BC0 = 0;
  qword_1EBCC0BC8 = (uint64_t)&unk_1F25EA1B0;
  *(void *)&dword_1EBCC0BD0 = 0;
  qword_1EBCC0B40 = (uint64_t)&unk_1F2643F00;
  qword_1EBCC0BD8 = (uint64_t)&unk_1F2643DB0;
  qword_1EBCC0BE0 = (uint64_t)&unk_1F25EA168;
  qword_1EBCC0BF8 = (uint64_t)&qword_1EBCC0BE0;
  llvm::cl::Option::setArgStr(v6, "fence-placement-smps2imgwci-min-batch-size", 0x2AuLL);
  xmmword_1EBCC0B60 = *a1;
  word_1EBCC0B4A = word_1EBCC0B4A & 0xFFF8 | *a2 & 7;
  dword_1EBCC0BC0 = **a3;
  byte_1EBCC0BD4 = 1;
  dword_1EBCC0BD0 = dword_1EBCC0BC0;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCC0B40);
}

void sub_1CD4200D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    unsigned int v7 = *(void **)a1;
    uint64_t v8 = 80 * v6;
    do
    {
      *unsigned int v7 = -4096;
      v7 += 10;
      v8 -= 80;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t v9 = *(void *)v4;
      if ((*(void *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v12 = 0;
        sub_1CBB11974(*(void *)a1, *(_DWORD *)(a1 + 16), v9, &v12);
        uint64_t v10 = v12;
        *int v12 = *(void *)v4;
        v10[1] = v10 + 3;
        v10[2] = 0x600000000;
        if (*(_DWORD *)(v4 + 16)) {
          sub_1CB837F14((uint64_t)(v10 + 1), v4 + 8);
        }
        *((_DWORD *)v10 + 18) = *(_DWORD *)(v4 + 72);
        ++*(_DWORD *)(a1 + 8);
        size_t v11 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v11) {
          free(v11);
        }
      }
      v4 += 80;
    }
    while (v4 != a3);
  }
}

uint64_t sub_1CD4201D0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = sub_1CD420258((uint64_t *)a1, a2, &v10);
  unsigned int v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD4202F4(a1, (uint64_t)a2, a2, v10);
    unsigned int v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1CD420258(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    unsigned int v7 = (void *)(*a1 + 8 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          uint64_t v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        unsigned int v7 = (void *)(v4 + 8 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_4;
        }
      }
      uint64_t result = 0;
      if (v10) {
        unsigned int v7 = v10;
      }
    }
  }
  else
  {
    unsigned int v7 = 0;
    uint64_t result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

void *sub_1CD4202F4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD4203A4(a1, v7);
  uint64_t v9 = 0;
  sub_1CD420258((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CD4203A4(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD420470(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD420470(uint64_t result, void *a2, void *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v9 = 0;
      uint64_t result = sub_1CD420258((uint64_t *)v5, a2, &v9);
      *uint64_t v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1CD420520(uint64_t a1)
{
  int v2 = sub_1CBE52E5C(**(unsigned __int16 **)(a1 + 16));
  if ((v2 - 172) < 0xE)
  {
    BOOL v3 = sub_1CBDB277C(**(unsigned __int16 **)(a1 + 16), 41, 0) == 67;
    uint64_t v4 = 5;
  }
  else
  {
    if ((v2 - 125) > 0xD)
    {
      uint64_t v5 = 0;
      uint64_t v4 = 0;
      return v4 | v5;
    }
    BOOL v3 = sub_1CBDB277C(**(unsigned __int16 **)(a1 + 16), 41, 0) == 67;
    uint64_t v4 = 2;
  }
  if (!v3) {
    ++v4;
  }
  uint64_t v5 = 0x100000000;
  return v4 | v5;
}

void sub_1CD4205B8()
{
}

void sub_1CD4205F4(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC0C28, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBB157F4;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EBCC0C28, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD420668(llvm::Pass *a1)
{
  sub_1CBA0E6AC(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD4206A0(uint64_t a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  llvm::AnalysisUsage::addRequiredID(this, llvm::MachineLoopInfo::ID);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::MachineDominatorTree::ID);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::MachinePostDominatorTree::ID);
  llvm::AnalysisUsage::addRequiredID(this, llvm::AAResultsWrapperPass::ID);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::MachineLoopInfo::ID);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineDominatorTree::ID);

  llvm::MachineFunctionPass::getAnalysisUsage(a1, (uint64_t)this);
}

uint64_t sub_1CD420760(uint64_t a1)
{
  sub_1CB8483A0(a1, (uint64_t)&unk_1EBCC0C00);
  *(void *)int v2 = &unk_1F25F6FF8;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v2);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC0C28, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CBB157F4;
    v6[1] = &PassRegistry;
    uint64_t v5 = v6;
    std::__call_once(&qword_1EBCC0C28, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CD420810()
{
}

void sub_1CD42084C()
{
}

void sub_1CD420888(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC0CF8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBB159B4;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EBCC0CF8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

uint64_t sub_1CD4208F8(uint64_t result, int *a2, int *a3)
{
  *(void *)(result + 8) = 0;
  BOOL v3 = *(_DWORD **)result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4)
  {
    uint64_t v5 = 8 * v4;
    uint64_t v6 = *(_DWORD **)result;
    do
    {
      *uint64_t v6 = 0x7FFFFFFF;
      v6 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    int v7 = *a2;
    if ((*a2 - 0x7FFFFFFF) >= 2)
    {
      int v8 = *(_DWORD *)(result + 16) - 1;
      unsigned int v9 = v8 & (37 * v7);
      uint64_t v10 = &v3[2 * v9];
      int v11 = *v10;
      if (v7 != *v10)
      {
        BOOL v12 = 0;
        int v13 = 1;
        while (v11 != 0x7FFFFFFF)
        {
          if (v12) {
            BOOL v14 = 0;
          }
          else {
            BOOL v14 = v11 == 0x80000000;
          }
          if (v14) {
            BOOL v12 = v10;
          }
          unsigned int v15 = v9 + v13++;
          unsigned int v9 = v15 & v8;
          uint64_t v10 = &v3[2 * (v15 & v8)];
          int v11 = *v10;
          if (v7 == *v10) {
            goto LABEL_7;
          }
        }
        if (v12) {
          uint64_t v10 = v12;
        }
      }
LABEL_7:
      *uint64_t v10 = v7;
      v10[1] = a2[1];
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

llvm::cl::Option *sub_1CD4209D8(llvm::cl::Option *a1, char *a2, __n128 *a3, unsigned char **a4, _WORD *a5)
{
  uint64_t v10 = sub_1CB883A14((uint64_t)a1, 0, 0);
  *(unsigned char *)(v10 + 128) = 0;
  *(void *)(v10 + 136) = &unk_1F25EDE58;
  *(void *)(v10 + 144) = 0;
  *(void *)uint64_t v10 = &unk_1F26440A0;
  *(void *)(v10 + 152) = &unk_1F2643CC0;
  *(void *)(v10 + 160) = &unk_1F25EDE78;
  *(void *)(v10 + 184) = v10 + 160;
  sub_1CD4131EC(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

void sub_1CD420ACC()
{
}

uint64_t sub_1CD420AE0(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)(result + 8) = a3;
  *(_WORD *)(result + 12) = 1028;
  *(_DWORD *)(result + 16) = 0;
  *(unsigned char *)(result + 20) = 1;
  *(void *)uint64_t result = &unk_1F25F7238;
  *(void *)(result + 24) = a2;
  return result;
}

void sub_1CD420B20(llvm::TargetFrameLowering *a1)
{
  llvm::TargetFrameLowering::~TargetFrameLowering(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD420B58()
{
}

void sub_1CD420B94(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC0D10, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBB1C998;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EBCC0D10, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

unint64_t sub_1CD420C04(void *a1, int a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = &a1[a2];
    uint64_t v5 = sub_1CBB26B2C(a1, v4, a3);
    if (v5 == v4)
    {
      uint64_t v6 = *(v4 - 1);
      unint64_t v7 = v6 & 0xFFFFFFFFFFFFFF00;
      if (((v6 >> 1) & 3 | *(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (a3 >> 1) & 3))
      {
        LOBYTE(v6) = 0;
        unint64_t v7 = 0;
      }
    }
    else
    {
      uint64_t v6 = *v5;
      unint64_t v7 = *v5 & 0xFFFFFFFFFFFFFF00;
    }
  }
  else
  {
    LOBYTE(v6) = 0;
    unint64_t v7 = 0;
  }
  return v7 | v6;
}

void *sub_1CD420CA0(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *((unsigned int *)result + 4);
  int v3 = *((_DWORD *)result + 2);
  int v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64) {
    int v4 = 64;
  }
  if (v3) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (v5 == v2)
  {
    result[1] = 0;
    if (v2)
    {
      uint64_t v6 = (void *)*result;
      return memset(v6, 255, 4 * v2);
    }
  }
  else
  {
    MEMORY[0x1D25D9CD0](*result, 4);
    return sub_1CBB23234(v1, v5);
  }
  return result;
}

void sub_1CD420D5C(__n128 *a1, int **a2, _WORD *a3)
{
  sub_1CB883A14((uint64_t)&qword_1EBCC0D30, 0, 0);
  dword_1EBCC0DB0 = 0;
  qword_1EBCC0DB8 = (uint64_t)&unk_1F25F74C8;
  *(void *)&dword_1EBCC0DC0 = 0;
  qword_1EBCC0D30 = (uint64_t)&unk_1F2643F68;
  qword_1EBCC0DC8 = (uint64_t)&unk_1F2643D20;
  qword_1EBCC0DD0 = (uint64_t)&unk_1F25F7480;
  qword_1EBCC0DE8 = (uint64_t)&qword_1EBCC0DD0;
  sub_1CD420E4C(a1, a2, a3);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCC0D30);
}

__n128 sub_1CD420E4C(__n128 *a1, int **a2, _WORD *a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCC0D30, "dense-ipr-alloc", 0xFuLL);
  __n128 result = *a1;
  xmmword_1EBCC0D50 = (__int128)*a1;
  unint64_t v7 = *a2;
  dword_1EBCC0DB0 = **a2;
  byte_1EBCC0DC4 = 1;
  dword_1EBCC0DC0 = *v7;
  word_1EBCC0D3A = (32 * (*a3 & 3)) | word_1EBCC0D3A & 0xFF9F;
  return result;
}

BOOL sub_1CD420ED4(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void sub_1CD420F04()
{
}

void *sub_1CD420F18()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F25F7480;
  return result;
}

void sub_1CD420F50(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F7480;
}

void sub_1CD420F7C()
{
}

void sub_1CD420FB8(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC0DF8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBB2C7FC;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCC0DF8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD42102C(llvm::Pass *a1)
{
  sub_1CBA0E6AC(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD421064(uint64_t a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::SlotIndexes::ID);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::LiveIntervals::ID);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::LiveIntervals::ID);

  llvm::MachineFunctionPass::getAnalysisUsage(a1, (uint64_t)this);
}

uint64_t sub_1CD421104(uint64_t a1)
{
  sub_1CB8483A0(a1, (uint64_t)&unk_1EBCC0DF0);
  *(void *)uint64_t v2 = &unk_1F25F74E8;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v2);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC0DF8, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CBB2C7FC;
    v6[1] = &PassRegistry;
    int v5 = v6;
    std::__call_once(&qword_1EBCC0DF8, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CD4211B4()
{
}

void sub_1CD4211F0()
{
}

void sub_1CD42123C(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC0E10, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBB2E848;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCC0E10, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD4212B0(llvm::Pass *a1)
{
  sub_1CBA0E6AC(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD4212E8(uint64_t a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  if (*(unsigned char *)(a1 + 248))
  {
    llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::LiveIntervals::ID);
    llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::SlotIndexes::ID);
    sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::SlotIndexes::ID);
    sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::LiveIntervals::ID);
  }
  llvm::AnalysisUsage::addRequiredID(this, llvm::MachineLoopInfo::ID);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::MachineLoopInfo::ID);

  llvm::MachineFunctionPass::getAnalysisUsage(a1, (uint64_t)this);
}

uint64_t sub_1CD4213B4(uint64_t a1, char a2)
{
  sub_1CB8483A0(a1, (uint64_t)&unk_1EBCC0E00);
  *(void *)int v4 = &unk_1F25F75A8;
  *((unsigned char *)v4 + 248) = a2;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v4);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC0E10, memory_order_acquire) != -1)
  {
    v8[0] = sub_1CBB2E848;
    v8[1] = &PassRegistry;
    unint64_t v7 = v8;
    std::__call_once(&qword_1EBCC0E10, &v7, (void (__cdecl *)(void *))sub_1CB848390);
  }
  if (word_1EBCC0EE0) {
    *(unsigned char *)(a1 + 248) = byte_1EBCC0F58 ^ 1;
  }
  return a1;
}

void sub_1CD421494()
{
}

void sub_1CD4214D4(__n128 *a1, char **a2, _WORD *a3)
{
  sub_1CB883A14((uint64_t)&qword_1EBCC0E18, 0, 0);
  byte_1EBCC0E98 = 0;
  qword_1EBCC0EA0 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBCC0EA8 = 0;
  qword_1EBCC0E18 = (uint64_t)&unk_1F26440A0;
  qword_1EBCC0EB0 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCC0EB8 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCC0ED0 = (uint64_t)&qword_1EBCC0EB8;
  sub_1CD4215C4(a1, a2, a3);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCC0E18);
}

__n128 sub_1CD4215C4(__n128 *a1, char **a2, _WORD *a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCC0E18, "enable-agx3-simplify-red-phi-values", 0x23uLL);
  __n128 result = *a1;
  xmmword_1EBCC0E38 = (__int128)*a1;
  unint64_t v7 = *a2;
  byte_1EBCC0E98 = **a2;
  byte_1EBCC0EA9 = 1;
  byte_1EBCC0EA8 = *v7;
  word_1EBCC0E22 = (32 * (*a3 & 3)) | word_1EBCC0E22 & 0xFF9F;
  return result;
}

void sub_1CD42164C(_WORD *a1, __n128 *a2, char **a3, _WORD *a4)
{
  sub_1CB883A14((uint64_t)&qword_1EBCC0ED8, 0, 0);
  byte_1EBCC0F58 = 0;
  qword_1EBCC0F60 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBCC0F68 = 0;
  qword_1EBCC0ED8 = (uint64_t)&unk_1F26440A0;
  qword_1EBCC0F70 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCC0F78 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCC0F90 = (uint64_t)&qword_1EBCC0F78;
  sub_1CD42174C(a1, a2, a3, a4);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCC0ED8);
}

__n128 sub_1CD42174C(_WORD *a1, __n128 *a2, char **a3, _WORD *a4)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCC0ED8, "agx3-simplify-red-phi-values-second-clr-pass", 0x2CuLL);
  __int16 v8 = word_1EBCC0EE2;
  word_1EBCC0EE2 = word_1EBCC0EE2 & 0xFF9F | (32 * (*a1 & 3));
  __n128 result = *a2;
  xmmword_1EBCC0EF8 = (__int128)*a2;
  uint64_t v10 = *a3;
  byte_1EBCC0F58 = **a3;
  byte_1EBCC0F69 = 1;
  byte_1EBCC0F68 = *v10;
  word_1EBCC0EE2 = v8 & 0xFF9F | (32 * (*a4 & 3));
  return result;
}

void sub_1CD4217E8(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EA618A60, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBB2F668;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EA618A60, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD421858()
{
}

uint64_t sub_1CD4218AC(unsigned int a1)
{
  uint64_t v1 = a1 & 0xF;
  int v2 = (a1 >> 12) & 0x7F;
  if (v2)
  {
    if (v2 == 4)
    {
LABEL_3:
      uint64_t result = 2;
      goto LABEL_4;
    }
    uint64_t result = v2 == 2;
  }
  else
  {
    int v4 = (a1 >> 9) & 3;
    uint64_t result = v4 == 1;
    if (v4 == 2) {
      goto LABEL_3;
    }
  }
LABEL_4:
  switch(v1)
  {
    case 1:
    case 6:
    case 7:
      uint64_t result = (result + 1);
      break;
    case 2:
      uint64_t result = (result + 2);
      break;
    case 3:
    case 9:
    case 11:
      __break(1u);
      break;
    case 8:
    case 12:
    case 13:
      uint64_t result = 2;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1CD421928(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = xmmword_1CDB16680;
  *(void *)(a1 + 8) = &unk_1E67BB618;
  *(void *)(a1 + 16) = &unk_1CDF261C0;
  *(void *)(a1 + 24) = "1000";
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 9284;
  *(void *)a1 = &unk_1F25F7790;
  *(void *)(a1 + 80) = a2;
  sub_1CD426114(a1 + 88);
  *(void *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 760) = 0u;
  operator new();
}

uint64_t sub_1CD421AB0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 776);
  if (!result) {
    operator new();
  }
  return result;
}

unint64_t sub_1CD421B48(uint64_t a1, int a2)
{
  return a2 | ((unint64_t)((a2 & 0xFFFFFF00) >> 8) << 40);
}

void *sub_1CD421B5C()
{
  return &unk_1E66AB400;
}

void *sub_1CD421B6C()
{
  return &unk_1E66AB7F0;
}

void *sub_1CD421B7C()
{
  return &unk_1E66AB810;
}

void *sub_1CD421B8C()
{
  return &unk_1E66AB950;
}

unint64_t sub_1CD421B9C(uint64_t a1, llvm::MachineBasicBlock *a2, void *a3, unsigned __int16 ***a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  void v13[3] = 0;
  v14[0] = 0;
  *(void *)((char *)v14 + 5) = 0;
  unsigned int v15 = v17;
  uint64_t v16 = 0x200000000;
  v17[4] = 0;
  v17[5] = v18;
  v17[6] = 0x600000000;
  v18[12] = 0;
  uint64_t v19 = v21;
  uint64_t v20 = 0x600000000;
  v21[12] = 0;
  int v22 = v24;
  uint64_t v23 = 0x600000000;
  v24[12] = 0;
  uint64_t v25 = v27;
  uint64_t v26 = 0x600000000;
  v27[12] = 0;
  llvm::RegScavenger::enterBasicBlockEnd((llvm::RegScavenger *)v13, a2);
  while ((void *)v14[0] != a3)
    llvm::RegScavenger::backward((llvm::RegScavenger *)v13);
  llvm::RegScavenger::backward((llvm::RegScavenger *)v13);
  unint64_t UnusedReg = llvm::RegScavenger::FindUnusedReg((uint64_t)v13, a4);
  if (!UnusedReg)
  {
    llvm::RegScavenger::forward((uint64_t)v13);
    uint64_t v9 = *((void *)a2 + 4);
    uint64_t v10 = *(void *)(v9 + 48);
    if (!v10)
    {
      uint64_t v10 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v9 + 8) + 216))(*(void *)(v9 + 8), v9 + 128, v9);
      *(void *)(v9 + 48) = v10;
    }
    if (*(_DWORD *)(v10 + 512)) {
      uint64_t v11 = **(unsigned int **)(v10 + 504);
    }
    else {
      uint64_t v11 = 0;
    }
    if (v16 >= HIDWORD(v16)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    BOOL v12 = &v15[2 * v16];
    *BOOL v12 = v11;
    v12[1] = 0;
    LODWORD(v16) = v16 + 1;
    unint64_t UnusedReg = llvm::RegScavenger::scavengeRegisterBackwards(v13, (uint64_t)a4, a3, 0, 0, 1);
  }
  sub_1CBB36440(v13);
  return UnusedReg;
}

double sub_1CD421D80@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_1CD91D2D0;
  *(void *)(a1 + 16) = a1 + 32;
  *(unsigned char *)(a1 + 160) = 0;
  *(_DWORD *)a1 = 6222;
  *(void *)&double result = 0x800000001;
  *(void *)(a1 + 24) = 0x800000001;
  return result;
}

void sub_1CD421DB8()
{
}

void sub_1CD421DD0(void *a1)
{
}

void sub_1CD421E0C(llvm::GPUTargetInstrInfo *a1)
{
  llvm::GPUTargetInstrInfo::~GPUTargetInstrInfo(a1);

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CD421E44(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  MEMORY[0x1D25D9CD0](*a1, 4);
  return a1;
}

void sub_1CD421E84(void *a1)
{
  *a1 = &unk_1F25F7790;
  uint64_t v2 = a1[97];
  a1[97] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[96];
  a1[96] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[95];
  a1[95] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_1CD421F70((llvm::TargetRegisterInfo *)(a1 + 11));
}

void sub_1CD421F70(llvm::TargetRegisterInfo *this)
{
  *(void *)this = &unk_1F25FAAF8;
  uint64_t v2 = (char *)*((void *)this + 81);
  if (v2 != (char *)this + 672) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 77);
  if (v3 != (char *)this + 632) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 73);
  if (v4 != (char *)this + 600) {
    free(v4);
  }
  int v5 = (char *)*((void *)this + 62);
  if (v5 != (char *)this + 512) {
    free(v5);
  }
  uint64_t v6 = (char *)*((void *)this + 53);
  if (v6 != (char *)this + 440) {
    free(v6);
  }
  unint64_t v7 = (char *)*((void *)this + 44);
  if (v7 != (char *)this + 368) {
    free(v7);
  }
  __int16 v8 = (char *)*((void *)this + 35);
  if (v8 != (char *)this + 296) {
    free(v8);
  }

  llvm::TargetRegisterInfo::~TargetRegisterInfo(this);
}

_DWORD *sub_1CD422060@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (!v6)
  {
    BOOL v12 = 0;
LABEL_6:
    double result = sub_1CD42214C(a1, (uint64_t)a2, a2, v12);
    *double result = *a2;
    uint64_t v7 = *(void *)a1;
    unsigned int v6 = *(_DWORD *)(a1 + 16);
    char v11 = 1;
    goto LABEL_4;
  }
  uint64_t v7 = *(void *)a1;
  unsigned int v8 = (37 * *a2) & (v6 - 1);
  double result = (_DWORD *)(*(void *)a1 + 4 * v8);
  int v10 = *result;
  if (*a2 != *result)
  {
    int v13 = 0;
    int v14 = 1;
    while (v10 != 0x7FFFFFFF)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v10 == 0x80000000;
      }
      if (v15) {
        int v13 = result;
      }
      unsigned int v16 = v8 + v14++;
      unsigned int v8 = v16 & (v6 - 1);
      double result = (_DWORD *)(v7 + 4 * v8);
      int v10 = *result;
      if (*a2 == *result) {
        goto LABEL_3;
      }
    }
    if (v13) {
      BOOL v12 = v13;
    }
    else {
      BOOL v12 = result;
    }
    goto LABEL_6;
  }
LABEL_3:
  char v11 = 0;
LABEL_4:
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v7 + 4 * v6;
  *(unsigned char *)(a3 + 16) = v11;
  return result;
}

_DWORD *sub_1CD42214C(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3) {
      goto LABEL_3;
    }
    sub_1CD4222E0(a1, v7);
    int v17 = *(_DWORD *)(a1 + 16);
    if (v17)
    {
      int v18 = v17 - 1;
      unsigned int v19 = (37 * *a3) & v18;
      a4 = (_DWORD *)(*(void *)a1 + 4 * v19);
      int v20 = *a4;
      if (*a3 == *a4) {
        goto LABEL_3;
      }
      int v13 = 0;
      int v21 = 1;
      while (v20 != 0x7FFFFFFF)
      {
        if (v13) {
          BOOL v22 = 0;
        }
        else {
          BOOL v22 = v20 == 0x80000000;
        }
        if (v22) {
          int v13 = a4;
        }
        unsigned int v23 = v19 + v21++;
        unsigned int v19 = v23 & v18;
        a4 = (_DWORD *)(*(void *)a1 + 4 * v19);
        int v20 = *a4;
        if (*a3 == *a4) {
          goto LABEL_3;
        }
      }
      goto LABEL_21;
    }
LABEL_24:
    a4 = 0;
    goto LABEL_3;
  }
  sub_1CD4222E0(a1, 2 * v7);
  int v9 = *(_DWORD *)(a1 + 16);
  if (!v9) {
    goto LABEL_24;
  }
  int v10 = v9 - 1;
  unsigned int v11 = (37 * *a3) & v10;
  a4 = (_DWORD *)(*(void *)a1 + 4 * v11);
  int v12 = *a4;
  if (*a3 == *a4) {
    goto LABEL_3;
  }
  int v13 = 0;
  int v14 = 1;
  while (v12 != 0x7FFFFFFF)
  {
    if (v13) {
      BOOL v15 = 0;
    }
    else {
      BOOL v15 = v12 == 0x80000000;
    }
    if (v15) {
      int v13 = a4;
    }
    unsigned int v16 = v11 + v14++;
    unsigned int v11 = v16 & v10;
    a4 = (_DWORD *)(*(void *)a1 + 4 * v11);
    int v12 = *a4;
    if (*a3 == *a4) {
      goto LABEL_3;
    }
  }
LABEL_21:
  if (v13) {
    a4 = v13;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != 0x7FFFFFFF) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void sub_1CD4222E0(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(int **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  int v9 = operator new(4 * v8, (std::align_val_t)4uLL);
  *(void *)a1 = v9;
  if (v4)
  {
    sub_1CD4223C4((void **)a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    memset_pattern16(v9, &unk_1CDB165A0, 4 * v10);
  }
}

void sub_1CD4223C4(void **a1, int *a2, int *a3)
{
  a1[1] = 0;
  unint64_t v6 = (char *)*a1;
  uint64_t v7 = *((unsigned int *)a1 + 4);
  if (v7) {
    memset_pattern16(*a1, &unk_1CDB165A0, 4 * v7);
  }
  for (; a2 != a3; ++a2)
  {
    int v8 = *a2;
    if ((*a2 - 0x7FFFFFFF) >= 2)
    {
      int v9 = *((_DWORD *)a1 + 4) - 1;
      unsigned int v10 = v9 & (37 * v8);
      unsigned int v11 = &v6[4 * v10];
      int v12 = *(_DWORD *)v11;
      if (v8 != *(_DWORD *)v11)
      {
        int v13 = 0;
        int v14 = 1;
        while (v12 != 0x7FFFFFFF)
        {
          if (v13) {
            BOOL v15 = 0;
          }
          else {
            BOOL v15 = v12 == 0x80000000;
          }
          if (v15) {
            int v13 = v11;
          }
          unsigned int v16 = v10 + v14++;
          unsigned int v10 = v16 & v9;
          unsigned int v11 = &v6[4 * (v16 & v9)];
          int v12 = *(_DWORD *)v11;
          if (v8 == *(_DWORD *)v11) {
            goto LABEL_6;
          }
        }
        if (v13) {
          unsigned int v11 = v13;
        }
      }
LABEL_6:
      *(_DWORD *)unsigned int v11 = v8;
      ++*((_DWORD *)a1 + 2);
    }
  }
}

void sub_1CD4224C4(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 || *(_DWORD *)(a1 + 12))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 16);
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      sub_1CD422548(a1);
    }
    else
    {
      if (v3) {
        memset_pattern16(*(void **)a1, &unk_1CDB165A0, 4 * v3);
      }
      *(void *)(a1 + 8) = 0;
    }
  }
}

void sub_1CD422548(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  int v3 = *(_DWORD *)(a1 + 8);
  int v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64) {
    int v4 = 64;
  }
  if (v3) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (v5 == v2)
  {
    *(void *)(a1 + 8) = 0;
    if (v2)
    {
      unint64_t v6 = *(void **)a1;
      memset_pattern16(v6, &unk_1CDB165A0, 4 * v2);
    }
  }
  else
  {
    MEMORY[0x1D25D9CD0](*(void *)a1, 4);
    sub_1CBB36510(a1, v5);
  }
}

void sub_1CD422608(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC0FC8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBB365B4;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCC0FC8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD422678()
{
}

void *sub_1CD4226B4(void *a1)
{
  *a1 = &unk_1F25F7F48;
  sub_1CBB413A0((uint64_t)(a1 + 9));
  return a1;
}

uint64_t sub_1CD4226F8(uint64_t result, void *a2, void *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    uint64_t v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *uint64_t v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v11 = 0;
      sub_1CBB38B84((uint64_t *)v5, a2, &v11);
      int v9 = v11;
      *unsigned int v11 = *a2;
      uint64_t v10 = a2[1];
      a2[1] = 0;
      v9[1] = v10;
      ++*(_DWORD *)(v5 + 8);
      double result = a2[1];
      a2[1] = 0;
      if (result) {
        double result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      }
    }
    a2 += 2;
  }
  return result;
}

llvm::raw_ostream *sub_1CD4227E4(uint64_t a1, llvm::raw_ostream *a2)
{
  if (*(unsigned char *)(a1 + 24)) {
    int v4 = "constimage(";
  }
  else {
    int v4 = "image(";
  }
  sub_1CB8E509C(a2, v4);
  uint64_t v5 = *(llvm::Value **)(a1 + 16);
  if (v5) {
    llvm::Value::print(v5, a2, 0);
  }
  else {
    sub_1CB8E509C(a2, "nullptr");
  }

  return sub_1CB8E509C(a2, ")");
}

uint64_t sub_1CD422874(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_1CD42287C()
{
  return 1;
}

void sub_1CD422884(void *a1)
{
  *a1 = &unk_1F25F7F48;
  sub_1CBB413A0((uint64_t)(a1 + 9));

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD4228E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = *a5;
  if ((*a5 & 1) == 0) {
    return 1;
  }
  if (v5 <= 1)
  {
    *a5 = v5 | 2;
    unint64_t v10 = *(unsigned int *)(a3 + 4) | ((unint64_t)*(unsigned int *)(a3 + 24) << 32);
    uint64_t v11 = *(void *)(a1 + 64);
    unint64_t v26 = 129;
    int v27 = 0;
    sub_1CC7362A8(v11, &v26, v10);
    int v13 = *(_DWORD *)(*(void *)(v12 + 32) + 4);
    int v14 = *(unsigned __int8 *)(a3 + 32);
    *(_DWORD *)a3 = 0;
    *(_DWORD *)(a3 + 4) = v13;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 8) = 0;
    if (!v14) {
      *(unsigned char *)(a3 + 32) = 1;
    }
  }
  if (!*(unsigned char *)(a4 + 32) || *(unsigned char *)a4 || !*(unsigned char *)(a3 + 32) || *(unsigned char *)a3) {
    return 0;
  }
  BOOL v15 = *(void **)(a1 + 64);
  unint64_t v29 = 129;
  int v30 = 0;
  LODWORD(v26) = *(_DWORD *)(a3 + 4);
  int v28 = 0;
  sub_1CC7382A0(v15, &v29, (int *)&v26);
  uint64_t v17 = v16;
  int v18 = *(void **)(a1 + 64);
  unint64_t v29 = 129;
  int v30 = 0;
  LODWORD(v26) = *(_DWORD *)(a4 + 4);
  int v28 = 0;
  sub_1CC7382A0(v18, &v29, (int *)&v26);
  uint64_t v20 = v19;
  Genericunsigned int VirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(void *)(a1 + 48), 4194324, "", 0);
  uint64_t v22 = *(void *)(a1 + 64);
  LODWORD(v26) = GenericVirtualRegister;
  int v27 = 1;
  int v23 = *(_DWORD *)(*(void *)(v20 + 32) + 4);
  LODWORD(v29) = *(_DWORD *)(*(void *)(v17 + 32) + 4);
  HIDWORD(v29) = v23;
  sub_1CC738E00(v22, (uint64_t)&v26, (int *)&v29, 2);
  int v25 = *(_DWORD *)(*(void *)(v24 + 32) + 4);
  if (!*(unsigned char *)(a3 + 32)) {
    *(unsigned char *)(a3 + 32) = 1;
  }
  *(_DWORD *)a3 = 0;
  *(_DWORD *)(a3 + 4) = v25;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)a4 = 0;
  uint64_t result = 1;
  *(unsigned char *)(a4 + 32) = 0;
  return result;
}

_UNKNOWN ***sub_1CD422AB8(uint64_t a1, uint64_t a2)
{
  *((void *)&v3 + 1) = a2;
  *(void *)&long long v3 = a2 - 16;
  unint64_t v2 = v3 >> 4;
  if (v2 > 0xF) {
    return 0;
  }
  else {
    return (&off_1E66ABB38)[v2];
  }
}

void sub_1CD422AE0(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, void *a9, uint64_t a10, unint64_t a11, long long *a12, uint64_t a13, int a14, long long *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a10)
  {
    uint64_t v29 = 8 * a10;
    do
    {
      LODWORD(v82[0]) = *a9;
      uint64_t v30 = *(void *)(a21 + 24);
      if (!v30) {
        goto LABEL_35;
      }
      (*(void (**)(long long *__return_ptr))(*(void *)v30 + 48))(&v83);
      uint64_t v31 = (_OWORD *)sub_1CB8968D4(a20, (unint64_t)&v83, 1);
      unsigned int v32 = (_OWORD *)(*(void *)a20 + 32 * *(unsigned int *)(a20 + 8));
      long long v33 = v31[1];
      *unsigned int v32 = *v31;
      v32[1] = v33;
      ++*(_DWORD *)(a20 + 8);
      ++a9;
      v29 -= 8;
    }
    while (v29);
  }
  if (a18)
  {
    ((void (*)(void *__return_ptr, void **, uint64_t, uint64_t, uint64_t))(*a1)[12])(v82, a1, a3, a17, a18);
    uint64_t v34 = *(void *)(a22 + 24);
    if (!v34) {
      goto LABEL_35;
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v34 + 48))(&v83);
    unsigned int v35 = (_OWORD *)sub_1CB8968D4(a20, (unint64_t)&v83, 1);
    uint64_t v36 = (_OWORD *)(*(void *)a20 + 32 * *(unsigned int *)(a20 + 8));
    long long v37 = v35[1];
    _OWORD *v36 = *v35;
    v36[1] = v37;
    ++*(_DWORD *)(a20 + 8);
  }
  size_t v38 = (_OWORD *)sub_1CB8968D4(a20, a5, 1);
  uint64_t v39 = (_OWORD *)(*(void *)a20 + 32 * *(unsigned int *)(a20 + 8));
  long long v40 = v38[1];
  *uint64_t v39 = *v38;
  v39[1] = v40;
  ++*(_DWORD *)(a20 + 8);
  if (*(unsigned char *)(a6 + 32))
  {
    unsigned int v41 = (_OWORD *)sub_1CB8968D4(a20, a6, 1);
    uint64_t v42 = (_OWORD *)(*(void *)a20 + 32 * *(unsigned int *)(a20 + 8));
    long long v43 = v41[1];
    *uint64_t v42 = *v41;
    v42[1] = v43;
    ++*(_DWORD *)(a20 + 8);
  }
  if (*(_DWORD *)(a2 + 92) == -1 && *(unsigned char *)(a7 + 32))
  {
    int v69 = (_OWORD *)sub_1CB8968D4(a20, a7, 1);
    __int16 v70 = (_OWORD *)(*(void *)a20 + 32 * *(unsigned int *)(a20 + 8));
    long long v71 = v69[1];
    _OWORD *v70 = *v69;
    v70[1] = v71;
    ++*(_DWORD *)(a20 + 8);
  }
  uint64_t v44 = (_OWORD *)sub_1CB8968D4(a20, a11, 1);
  uint64_t v45 = (_OWORD *)(*(void *)a20 + 32 * *(unsigned int *)(a20 + 8));
  long long v46 = v44[1];
  *uint64_t v45 = *v44;
  v45[1] = v46;
  ++*(_DWORD *)(a20 + 8);
  if ((*(unsigned int (**)(void *))(*a1[1] + 184))(a1[1]))
  {
    LODWORD(v82[0]) = 0;
    uint64_t v47 = *(void *)(a21 + 24);
    if (!v47) {
      goto LABEL_35;
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v47 + 48))(&v83);
    uint64_t v48 = (_OWORD *)sub_1CB8968D4(a20, (unint64_t)&v83, 1);
    uint64_t v49 = (_OWORD *)(*(void *)a20 + 32 * *(unsigned int *)(a20 + 8));
    long long v50 = v48[1];
    *uint64_t v49 = *v48;
    v49[1] = v50;
    ++*(_DWORD *)(a20 + 8);
  }
  if (a13)
  {
    uint64_t v52 = 32 * a13;
    do
    {
      long long v53 = *a12;
      long long v54 = a12[1];
      a12 += 2;
      long long v83 = v53;
      long long v84 = v54;
      uint64_t v55 = (_OWORD *)sub_1CB8968D4(a20, (unint64_t)&v83, 1);
      uint64_t v56 = (_OWORD *)(*(void *)a20 + 32 * *(unsigned int *)(a20 + 8));
      long long v57 = v55[1];
      *uint64_t v56 = *v55;
      v56[1] = v57;
      ++*(_DWORD *)(a20 + 8);
      v52 -= 32;
    }
    while (v52);
    if (a14 != 7
      && (*(unsigned int (**)(void *))(*a1[1] + 184))(a1[1])
      && (*(_DWORD *)(a2 + 92) == -1 || (*(unsigned int (**)(void *))(*a1[1] + 320))(a1[1])))
    {
      LODWORD(v82[0]) = 0;
      uint64_t v58 = *(void *)(a21 + 24);
      if (!v58) {
        goto LABEL_35;
      }
      (*(void (**)(long long *__return_ptr))(*(void *)v58 + 48))(&v83);
      uint64_t v59 = (_OWORD *)sub_1CB8968D4(a20, (unint64_t)&v83, 1);
      uint64_t v60 = (_OWORD *)(*(void *)a20 + 32 * *(unsigned int *)(a20 + 8));
      long long v61 = v59[1];
      *uint64_t v60 = *v59;
      v60[1] = v61;
      ++*(_DWORD *)(a20 + 8);
    }
  }
  if (a16)
  {
    uint64_t v63 = 32 * a16;
    do
    {
      long long v64 = *a15;
      long long v65 = a15[1];
      a15 += 2;
      long long v83 = v64;
      long long v84 = v65;
      uint64_t v66 = (_OWORD *)sub_1CB8968D4(a20, (unint64_t)&v83, 1);
      uint64_t v67 = (_OWORD *)(*(void *)a20 + 32 * *(unsigned int *)(a20 + 8));
      long long v68 = v66[1];
      *uint64_t v67 = *v66;
      v67[1] = v68;
      ++*(_DWORD *)(a20 + 8);
      v63 -= 32;
    }
    while (v63);
    if (!a18)
    {
      LODWORD(v82[0]) = 0;
      uint64_t v76 = *(void *)(a21 + 24);
      if (v76)
      {
        (*(void (**)(long long *__return_ptr))(*(void *)v76 + 48))(&v83);
        unsigned int v77 = (_OWORD *)sub_1CB8968D4(a20, (unint64_t)&v83, 1);
        uint64_t v78 = (_OWORD *)(*(void *)a20 + 32 * *(unsigned int *)(a20 + 8));
        long long v79 = v77[1];
        _OWORD *v78 = *v77;
        v78[1] = v79;
        ++*(_DWORD *)(a20 + 8);
        goto LABEL_27;
      }
LABEL_35:
      sub_1CB920400();
      sub_1CD423054(v80, v81);
      return;
    }
  }
LABEL_27:
  if (*(_DWORD *)(a2 + 92) == -1)
  {
    LODWORD(v82[0]) = 0;
    uint64_t v72 = *(void *)(a21 + 24);
    if (v72)
    {
      (*(void (**)(long long *__return_ptr))(*(void *)v72 + 48))(&v83);
      uint64_t v73 = (_OWORD *)sub_1CB8968D4(a20, (unint64_t)&v83, 1);
      __int16 v74 = (_OWORD *)(*(void *)a20 + 32 * *(unsigned int *)(a20 + 8));
      long long v75 = v73[1];
      *__int16 v74 = *v73;
      v74[1] = v75;
      ++*(_DWORD *)(a20 + 8);
      return;
    }
    goto LABEL_35;
  }
}

void sub_1CD423054(int a1@<W1>, unsigned int *a2@<X8>)
{
  unsigned int v2 = *a2;
  *((void *)a2 + 1) = 0;
  a2[4] = 64;
  a2[6] = 0;
  *a2 = v2 & 0xFFF00000 | 0x207;
  a2[1] = a1;
}

void sub_1CD423078()
{
}

void sub_1CD4230E8(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v4 = *a1 + 96 * v2;
    unsigned int v5 = (void *)(a2 + 24);
    uint64_t v6 = *a1 + 24;
    do
    {
      uint64_t v7 = *(void *)(v6 - 8);
      *(_OWORD *)(v5 - 3) = *(_OWORD *)(v6 - 24);
      *(v5 - 1) = v7;
      void *v5 = v5 + 2;
      v5[1] = 0x200000000;
      if (*(_DWORD *)(v6 + 8)) {
        sub_1CBB40240((uint64_t)v5, v6);
      }
      uint64_t v8 = v6 - 24;
      v5 += 12;
      v6 += 96;
    }
    while (v8 + 96 != v4);
    uint64_t v9 = *((unsigned int *)a1 + 2);
    if (v9)
    {
      uint64_t v10 = *a1;
      uint64_t v11 = 96 * v9;
      do
      {
        uint64_t v12 = *(void **)(v10 + v11 - 72);
        if ((void *)(v10 + v11 - 56) != v12) {
          free(v12);
        }
        v11 -= 96;
      }
      while (v11);
    }
  }
}

uint64_t sub_1CD4231B4(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *((unsigned int *)a1 + 2);
  if (*a1 + 4 * v6 == a2)
  {
    if (v6 >= *((_DWORD *)a1 + 3)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(v5 + 4 * v6) = *a3;
    unsigned int v11 = *((_DWORD *)a1 + 2) + 1;
    *((_DWORD *)a1 + 2) = v11;
    return *a1 + 4 * v11 - 4;
  }
  else
  {
    if (v6 >= *((_DWORD *)a1 + 3)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v7 = (_DWORD *)(v5 + 4 * ((a2 - v5) >> 2));
    *(_DWORD *)(v5 + 4 * v6) = *(_DWORD *)(v5 + 4 * v6 - 4);
    uint64_t v8 = *((unsigned int *)a1 + 2);
    uint64_t v9 = v5 + 4 * v8 - 4;
    if ((_DWORD *)v9 != v7)
    {
      memmove(v7 + 1, v7, v9 - (void)v7);
      LODWORD(v8) = *((_DWORD *)a1 + 2);
    }
    *((_DWORD *)a1 + 2) = v8 + 1;
    *uint64_t v7 = *a3;
  }
  return (uint64_t)v7;
}

uint64_t sub_1CD4232C0(uint64_t *a1, int a2, unsigned int a3, int a4, int a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *a1;
  uint64_t v10 = (unsigned int *)a1[1];
  uint64_t v12 = *(void *)(*a1 + 64);
  uint64_t v13 = *v10;
  uint64_t v23 = *(void *)a1[2];
  int v24 = 0;
  int v14 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void, void, void))(*(void *)v12 + 32))(v12, v13, &v23, 1, 0, 0, 0);
  uint64_t v16 = v15;
  int v18 = 1;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  llvm::MachineInstr::addOperand(v15, v14, (const llvm::MachineOperand *)&v18);
  int v18 = 1;
  uint64_t v20 = 0;
  uint64_t v21 = 15;
  llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v18);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  int v18 = 0;
  int v19 = a2;
  uint64_t v22 = 0;
  llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v18);
  int v18 = 1;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v18);
  int v18 = 1;
  uint64_t v20 = 0;
  uint64_t v21 = a3;
  llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v18);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  int v18 = 0;
  int v19 = a4;
  uint64_t v22 = 0;
  llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v18);
  int v18 = 1;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v18);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  int v18 = 0;
  int v19 = a5;
  uint64_t v22 = 0;
  llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v18);
  int v18 = 1;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v18);
  sub_1CC73B5D0(v16, *(void *)(v11 + 40), *(void **)(v11 + 56));
  return *(unsigned int *)(*((void *)v16 + 4) + 4);
}

llvm::MachineFunction *sub_1CD4234B0(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *(void *)(*a1 + 64);
  uint64_t v17 = *v5;
  int v18 = 0;
  uint64_t v8 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void, void, void))(*(void *)v7 + 32))(v7, a2, &v17, 1, 0, 0, 0);
  uint64_t v10 = v9;
  v13[0] = 1;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)v13);
  v13[0] = 1;
  uint64_t v14 = 0;
  uint64_t v15 = 8;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)v13);
  int v11 = *(_DWORD *)a1[2];
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  v13[0] = 0;
  v13[1] = v11;
  uint64_t v16 = 0;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)v13);
  v13[0] = 1;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)v13);
  v13[0] = 1;
  uint64_t v14 = 0;
  uint64_t v15 = a3;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)v13);
  *(void *)(*(void *)(*(void *)(v6 + 48) + 24) + 16 * (*(_DWORD *)(*((void *)v10 + 4) + 4) & 0x7FFFFFFF)) = &off_1E66AF580;
  return v8;
}

llvm::cl::Option *sub_1CD423628(llvm::cl::Option *a1, char *a2, _WORD *a3, __n128 *a4, unsigned char **a5)
{
  uint64_t v10 = sub_1CB883A14((uint64_t)a1, 0, 0);
  *(unsigned char *)(v10 + 128) = 0;
  *(void *)(v10 + 136) = &unk_1F25EDE58;
  *(void *)(v10 + 144) = 0;
  *(void *)uint64_t v10 = &unk_1F26440A0;
  *(void *)(v10 + 152) = &unk_1F2643CC0;
  *(void *)(v10 + 160) = &unk_1F25EDE78;
  *(void *)(v10 + 184) = v10 + 160;
  sub_1CD413F80(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

void sub_1CD423718()
{
}

uint64_t sub_1CD423890(uint64_t a1, const llvm::TargetMachine *a2)
{
  uint64_t v4 = a1 + 184252;
  *(void *)sub_1CD80D0B0((llvm::TargetLoweringBase *)a1, a2) = &unk_1F25F8AE0;
  *(void *)(v4 + 44) = (char *)a2 + 1328;
  *(void *)(a1 + 144) = &off_1E66AF9A8;
  *(void *)(a1 + 488) = &off_1E66AF9A8;
  *(void *)(a1 + 856) = &off_1E66AF9A8;
  *(void *)(a1 + 704) = &off_1E66AF580;
  *(void *)(a1 + 784) = &off_1E66AF580;
  *(void *)(a1 + 400) = &off_1E66AF580;
  *(void *)(a1 + 128) = &off_1E66AF970;
  *(void *)(a1 + 136) = &off_1E66AF580;
  *(void *)(a1 + 312) = &off_1E66AF970;
  *(void *)(a1 + 320) = &off_1E66AF580;
  *(void *)(a1 + 168) = &off_1E66AF970;
  *(void *)(a1 + 176) = &off_1E66AF580;
  *(void *)(a1 + 160) = &off_1E66AF970;
  *(unsigned char *)(v4 + 36) = 0;
  *(_DWORD *)(v4 + 8) = 4096;
  *(_DWORD *)(v4 + 28) = 4096;
  *(_DWORD *)uint64_t v4 = 4096;
  *(void *)(a1 + 52) = 0x100000001;
  *(_DWORD *)(a1 + 60) = 1;
  *(_WORD *)(a1 + 4509) = 514;
  uint64_t v5 = (const llvm::TargetRegisterInfo *)(*(uint64_t (**)(void))(*((void *)a2 + 166) + 176))();
  llvm::TargetLoweringBase::computeRegisterProperties((llvm::TargetLoweringBase *)a1, v5);
  *(_DWORD *)(a1 + 64) = 1;
  llvm::TargetLoweringBase::setJumpIsExpensive(a1, 1);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1170, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC1170))
  {
    byte_1EBCC1168 = 0;
    __cxa_guard_release(&qword_1EBCC1170);
  }
  *(unsigned char *)(a1 + 16) = byte_1EBCC1168;
  return a1;
}

void sub_1CD4239E8(uint64_t a1)
{
}

void sub_1CD4239F8()
{
  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD423A20()
{
  return 0;
}

BOOL sub_1CD423A28(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  if (a4)
  {
    if (a4 - 15 >= 0x9C) {
      return 1;
    }
  }
  else if ((*(_DWORD *)(a5 + 8) & 0xFE) != 0x12)
  {
    return 1;
  }
  uint64_t v5 = *(void *)(a2 + 48);
  return v5 && !*(void *)(v5 + 32);
}

uint64_t sub_1CD423A6C()
{
  return 1;
}

uint64_t sub_1CD423A74()
{
  return 0;
}

uint64_t sub_1CD423A7C()
{
  return 0;
}

void sub_1CD423A94(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC1180, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBB7E538;
    v3[1] = &v1;
    unsigned int v2 = v3;
    std::__call_once(&qword_1EBCC1180, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

uint64_t sub_1CD423B04(uint64_t a1)
{
  sub_1CB8483A0(a1, (uint64_t)&unk_1EBCC1178);
  *(void *)uint64_t v2 = &unk_1F25F9380;
  *(void *)(v2 + 256) = 0;
  *(void *)(v2 + 264) = 0;
  *(void *)(v2 + 248) = 0;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_DWORD *)(v2 + 328) = dword_1EBCC12D8;
  *(void *)(v2 + 332) = 0x300000000;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)v2);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC1180, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CBB7E538;
    v6[1] = &PassRegistry;
    uint64_t v5 = v6;
    std::__call_once(&qword_1EBCC1180, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CD423BE4(uint64_t a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::TargetPassConfig::ID);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&unk_1EA61EFE3);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)&unk_1EA61EFE3);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&unk_1EA61EFE4);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)&unk_1EA61EFE4);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::MachineDominatorTree::ID);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineDominatorTree::ID);
  llvm::AnalysisUsage::addRequiredID(this, llvm::MachineLoopInfo::ID);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::MachineLoopInfo::ID);

  llvm::MachineFunctionPass::getAnalysisUsage(a1, (uint64_t)this);
}

unsigned __int8 **sub_1CD423CCC(uint64_t a1, llvm::MachineBasicBlock *this)
{
  FirstTerminator = (unint64_t *)llvm::MachineBasicBlock::getFirstTerminator(this);
  sub_1CB9173F0((uint64_t)this, FirstTerminator, *(void *)(a1 + 24), (unint64_t *)a1);
  uint64_t v6 = 0;
  uint64_t result = sub_1CB8F69CC((unsigned __int8 **)(a1 + 56), &v6);
  if (v6) {
    return (unsigned __int8 **)llvm::MetadataTracking::untrack((uint64_t)&v6, v6);
  }
  return result;
}

uint64_t sub_1CD423D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = 0;
  v27[1] = 0;
  int v28 = 0;
  uint64_t v6 = (uint64_t *)(*(void *)(a1 + 288) + 248);
  v25[0] = a3;
  v22[0] = 0;
  uint64_t v7 = 0;
  if (sub_1CB834D78(v6, v25, v22)) {
    uint64_t v7 = *(void *)(v22[0] + 8);
  }
  v25[0] = 0;
  v25[1] = 0;
  int v26 = 0;
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  if (!v8) {
    goto LABEL_15;
  }
  uint64_t v9 = *(uint64_t **)a2;
  uint64_t v10 = 8 * v8;
  do
  {
    uint64_t v11 = *v9++;
    uint64_t v24 = v11;
    int v23 = 0;
    sub_1CD423EC4((uint64_t)v22, (uint64_t)v25, &v24, &v23);
    v10 -= 8;
  }
  while (v10);
  uint64_t v12 = *(unsigned int *)(a2 + 8);
  if (v12)
  {
    char v13 = 0;
    uint64_t v14 = *(uint64_t **)a2;
    uint64_t v15 = 8 * v12;
    do
    {
      uint64_t v16 = *v14;
      if (!v7) {
        goto LABEL_9;
      }
      uint64_t v19 = sub_1CB896AE8(v7 + 56, *(void *)(v16 + 24));
      uint64_t v20 = *(void *)(v7 + 64);
      uint64_t v21 = 72;
      if (v20 == *(void *)(v7 + 56)) {
        uint64_t v21 = 76;
      }
      if (v19 != (void *)(v20 + 8 * *(unsigned int *)(v7 + v21)))
      {
LABEL_9:
        *(_DWORD *)(a1 + 332) = 0;
        if (sub_1CBB891FC(a1, v16, a3) == 1)
        {
          sub_1CBB89608(a1, v16, a3);
          char v13 = 1;
        }
        sub_1CBB8977C(v27);
      }
      ++v14;
      v15 -= 8;
    }
    while (v15);
    uint64_t v17 = v27[0];
  }
  else
  {
LABEL_15:
    uint64_t v17 = 0;
    char v13 = 0;
  }
  MEMORY[0x1D25D9CD0](v25[0], 8);
  MEMORY[0x1D25D9CD0](v17, 8);
  return v13 & 1;
}

uint64_t sub_1CD423EC4(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t v12 = 0;
  uint64_t result = sub_1CBB8BDD4(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  uint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CBB8BE68(a2, a3, v12);
    uint64_t v9 = (void *)result;
    *(void *)uint64_t result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 16) = v10;
  return result;
}

void sub_1CD423F64()
{
}

void sub_1CD423F78(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F25F9380;
  uint64_t v2 = *((void *)a1 + 31);
  *((void *)a1 + 31) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  sub_1CBA0E6AC(a1);
}

void sub_1CD423FF8(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F25F9380;
  uint64_t v2 = *((void *)a1 + 31);
  *((void *)a1 + 31) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_1CBA0E6AC(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD42408C()
{
}

void *sub_1CD4240C8(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD424194(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD424194(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CBB8BDD4(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      uint64_t v10 = v11;
      *uint64_t v11 = *(void *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

void sub_1CD424248()
{
}

void *sub_1CD42425C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25F9468;
  result[1] = v3;
  return result;
}

uint64_t sub_1CD4242AC(uint64_t a1)
{
  *(void *)a1 = &unk_1F261CA88;
  sub_1CBA6249C((char **)(a1 + 35456));
  for (uint64_t i = 0; i != -35448; i -= 168)
    sub_1CBA627B0((char **)(a1 + 35296 + i));
  return a1;
}

uint64_t sub_1CD424324(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v6[0] = &unk_1F25F9530;
  v6[1] = 0x100000000;
  int v7 = v6;
  sub_1CD6177F0(1, 0, v4);
  uint64_t v2 = sub_1CBA1AFAC(a1, (uint64_t)v6, (uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  return v2;
}

void sub_1CD424494()
{
}

void *sub_1CD4244A8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25F9530;
  result[1] = v3;
  return result;
}

uint64_t sub_1CD4244F0(uint64_t result, void *a2)
{
  *a2 = &unk_1F25F9530;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t sub_1CD424520(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16))
  {
    if (*(unsigned char *)(a1 + 16))
    {
      if (*(_DWORD *)(a1 + 8) >= 0x41u && *(void *)a1) {
        MEMORY[0x1D25D9CB0]();
      }
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = 0;
    }
    else
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a2 + 8) = 0;
      *(unsigned char *)(a1 + 16) = 1;
    }
  }
  else if (*(unsigned char *)(a1 + 16))
  {
    if (*(_DWORD *)(a1 + 8) >= 0x41u && *(void *)a1) {
      MEMORY[0x1D25D9CB0]();
    }
    *(unsigned char *)(a1 + 16) = 0;
  }
  return a1;
}

llvm::raw_ostream *sub_1CD4245E8(uint64_t a1, llvm::raw_ostream *a2)
{
  uint64_t v4 = (unint64_t *)(a1 + 16);
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    int v6 = __clz(__rbit64((v3 >> 1) & ~(-1 << (v3 >> 58))));
    if (((v3 >> 1) & ~(-1 << (v3 >> 58))) != 0) {
      int v5 = v6;
    }
    else {
      int v5 = -1;
    }
  }
  else
  {
    int v5 = sub_1CB9FA0BC(v3);
  }
  sub_1CB8E509C(a2, "libaccess");
  int v7 = sub_1CB8E509C(a2, "[");
  unint64_t v8 = *v4;
  if (*v4) {
    unint64_t v9 = v8 >> 58;
  }
  else {
    unint64_t v9 = *(unsigned int *)(v8 + 64);
  }
  uint64_t v10 = llvm::raw_ostream::operator<<(v7, v9);
  sub_1CB8E509C(v10, "]: {");
  if (v5 != -1)
  {
    llvm::raw_ostream::operator<<(a2, v5);
    int v11 = sub_1CB9F9DF0(v4, v5);
    if (v11 != -1)
    {
      for (int i = v11; i != -1; int i = sub_1CB9F9DF0(v4, i))
      {
        sub_1CB8E509C(a2, " ");
        llvm::raw_ostream::operator<<(a2, i);
      }
    }
  }

  return sub_1CB8E509C(a2, "}");
}

uint64_t sub_1CD424710(uint64_t a1)
{
  *(void *)a1 = &unk_1F25FA1D8;
  sub_1CB9F9ED4((void ***)(a1 + 16));
  return a1;
}

uint64_t sub_1CD424758(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F25FA220;
  *(void *)(a1 + 8) = *(void *)(a2 + 488);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 496);
  *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 497);
  *(void *)(a1 + 24) = a1 + 40;
  uint64_t v4 = a1 + 24;
  *(void *)(a1 + 32) = 0x300000000;
  if (*(_DWORD *)(a2 + 512)) {
    sub_1CD41B6B0(v4, a2 + 504);
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 536);
  *(void *)(a1 + 64) = *(void *)(a2 + 544);
  *(void *)(a1 + 72) = *(void *)(a2 + 552);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 560);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 564);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 568);
  return a1;
}

uint64_t sub_1CD424814(uint64_t a1, llvm::yaml::IO *a2)
{
  return sub_1CD424824(a2, a1);
}

uint64_t sub_1CD424824(llvm::yaml::IO *a1, uint64_t a2)
{
  sub_1CD3EDEB8(a1, (uint64_t)"VertexInputRegCount", (unsigned int *)(a2 + 8), 0);
  sub_1CD3EDEB8(a1, (uint64_t)"SampleScratchReg", (unsigned int *)(a2 + 12), 0);
  sub_1CD4129B0(a1, (uint64_t)"HasIndirectBranches", (unsigned char *)(a2 + 16), 0);
  sub_1CD4129B0(a1, (uint64_t)"HasRecursiveBranches", (unsigned char *)(a2 + 17), 0);
  sub_1CD4129B0(a1, (uint64_t)"HasBinaryLinkingBranches", (unsigned char *)(a2 + 18), 0);
  if ((*(unsigned int (**)(llvm::yaml::IO *))(*(void *)a1 + 56))(a1)) {
    BOOL v4 = *(_DWORD *)(a2 + 32) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4) {
    sub_1CD424B38(a1, a2 + 24);
  }
  uint64_t v6 = 0;
  sub_1CBBE4384(a1, (uint64_t)"LRFISlot", a2 + 56, &v6);
  uint64_t v6 = 0;
  sub_1CBBE4384(a1, (uint64_t)"CtlFlowStFISlot", a2 + 64, &v6);
  uint64_t v6 = 0;
  sub_1CBA6564C(a1, (uint64_t)"Max4BIRRegUsed", a2 + 72, &v6, 0);
  sub_1CD4129B0(a1, (uint64_t)"UseAbsoluteStackAddress", (unsigned char *)(a2 + 80), 0);
  sub_1CD4129B0(a1, (uint64_t)"HasRayQuery", (unsigned char *)(a2 + 81), 0);
  sub_1CD412C2C(a1, (uint64_t)"TLSAllocSize", (int *)(a2 + 84), 0);
  return sub_1CD4129B0(a1, (uint64_t)"UsedGIN1123Fix", (unsigned char *)(a2 + 88), 0);
}

uint64_t sub_1CD4249F4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 488) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 16);
  *(_WORD *)(a1 + 497) = *(_WORD *)(a2 + 17);
  uint64_t result = sub_1CD41B6B0(a1 + 504, a2 + 24);
  *(void *)(a1 + 536) = *(void *)(a2 + 56);
  *(void *)(a1 + 544) = *(void *)(a2 + 64);
  *(void *)(a1 + 552) = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 560) = *(_WORD *)(a2 + 80);
  *(_DWORD *)(a1 + 564) = *(_DWORD *)(a2 + 84);
  *(unsigned char *)(a1 + 568) = *(unsigned char *)(a2 + 88);
  return result;
}

void sub_1CD424A70(uint64_t a1)
{
  sub_1CBBE458C(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD424AA8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2 != (void *)(a1 + 40)) {
    free(v2);
  }
  return a1;
}

void sub_1CD424AE0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2 != (void *)(a1 + 40)) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD424B38(llvm::yaml::IO *a1, uint64_t a2)
{
  uint64_t v6 = 0;
  char v5 = 0;
  uint64_t result = (*(uint64_t (**)(llvm::yaml::IO *, const char *, void, void, char *, uint64_t *))(*(void *)a1 + 120))(a1, "SpillSlotFIs ", 0, 0, &v5, &v6);
  if (result)
  {
    sub_1CD424BF8(a1, a2);
    return (*(uint64_t (**)(llvm::yaml::IO *, uint64_t))(*(void *)a1 + 128))(a1, v6);
  }
  return result;
}

uint64_t sub_1CD424BF8(llvm::yaml::IO *a1, uint64_t a2)
{
  unsigned int v4 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 64))(a1);
  if ((*(unsigned int (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1)) {
    uint64_t v5 = *(unsigned int *)(a2 + 8);
  }
  else {
    uint64_t v5 = v4;
  }
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i != v5; ++i)
    {
      uint64_t v9 = 0;
      if ((*(unsigned int (**)(llvm::yaml::IO *, unint64_t, uint64_t *))(*(void *)a1 + 72))(a1, i, &v9))
      {
        if (i >= *(unsigned int *)(a2 + 8)) {
          sub_1CBB1173C(a2, i + 1);
        }
        sub_1CD412CEC(a1, (int *)(*(void *)a2 + v6));
        (*(void (**)(llvm::yaml::IO *, uint64_t))(*(void *)a1 + 80))(a1, v9);
      }
      v6 += 4;
    }
  }
  return (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 88))(a1);
}

void sub_1CD424D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    int v7 = *(void **)a1;
    uint64_t v8 = 24 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      char v13 = 0;
      sub_1CBBE5BD4(*(void *)a1, *(_DWORD *)(a1 + 16), v9, &v13);
      uint64_t v10 = v13;
      *char v13 = *(void *)a2;
      v10[2] = 0;
      v10[1] = v10 + 3;
      uint64_t v11 = (uint64_t)(v10 + 1);
      if (*(_DWORD *)(a2 + 16)) {
        sub_1CBB08144(v11, (const void **)(a2 + 8));
      }
      ++*(_DWORD *)(a1 + 8);
      uint64_t v12 = *(void **)(a2 + 8);
      if ((void *)(a2 + 24) != v12) {
        free(v12);
      }
    }
    a2 += 24;
  }
}

unint64_t sub_1CD424E58(uint64_t a1, int a2, llvm::EVT *a3, uint64_t a4, uint64_t a5, int a6)
{
  if (sub_1CB87DC14(*(void *)(a1 + 32), *(void *)(a1 + 8), a3, (llvm::Type *)1) == 1) {
    return 4;
  }
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), (llvm::LLVMContext **)a3, (uint64_t)&v22);
  uint64_t v10 = v22;
  if (!a6 && (*((_DWORD *)a3 + 2) & 0xFE) == 0x12)
  {
    unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(a3);
    int v14 = v13;
    unint64_t v15 = sub_1CB87E200(v23);
    BOOL v17 = v16 != 1 && v14 == 1;
    if (!v17 && PrimitiveSizeInBits < v15)
    {
      unsigned __int8 v18 = sub_1CB87DC14(*(void *)(a1 + 32), *(void *)(a1 + 8), a3, 0);
      BOOL v19 = v23[0] == 0;
      if (!v18) {
        BOOL v19 = 1;
      }
      if (a2 == 33)
      {
        if (!v19)
        {
          int v20 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 179 * v23[0] + v18 + 137754);
          goto LABEL_18;
        }
      }
      else if (!v19)
      {
        int v20 = *(_WORD *)(*(void *)(a1 + 32) + 358 * v23[0] + 2 * v18 + 73672) >> 4;
LABEL_18:
        if ((v20 & 0xFFFFFFFB) == 0) {
          return v10;
        }
      }
      unint64_t v21 = sub_1CBBE5D64(a1, (uint64_t)a3, a2 != 33, a2 == 33);
      if (__OFADD__(v10, v21)) {
        return ((uint64_t)(v10 + v21) >> 63) ^ 0x8000000000000000;
      }
      else {
        v10 += v21;
      }
    }
  }
  return v10;
}

void sub_1CD424FE8(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EA618A78, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBBE67E0;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EA618A78, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD425058()
{
}

uint64_t sub_1CD425094(uint64_t a1)
{
  sub_1CD42515C(a1);
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v2);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EA618A78, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CBBE67E0;
    v6[1] = &PassRegistry;
    uint64_t v5 = v6;
    std::__call_once(&qword_1EA618A78, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CD425120()
{
}

double sub_1CD42515C(uint64_t a1)
{
  sub_1CB8483A0(a1, (uint64_t)&unk_1EA618A70);
  *(void *)uint64_t v1 = &unk_1F25FA270;
  *(_DWORD *)(v1 + 520) = 0;
  *(unsigned char *)(v1 + 524) = 0;
  *(void *)(v1 + 256) = 0;
  *(void *)(v1 + 264) = 0;
  *(void *)(v1 + 248) = 0;
  *(_DWORD *)(v1 + 272) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 280) = 0u;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_DWORD *)(v1 + 312) = 0;
  *(void *)(v1 + 320) = 0;
  *(void *)(v1 + 328) = 0;
  *(_DWORD *)(v1 + 336) = 0;
  *(void *)(v1 + 344) = 0;
  *(void *)(v1 + 352) = 0;
  *(_DWORD *)(v1 + 360) = 0;
  *(_OWORD *)(v1 + 368) = 0u;
  *(_OWORD *)(v1 + 384) = 0u;
  *(_DWORD *)(v1 + 400) = 0;
  *(void *)(v1 + 408) = 0;
  *(void *)(v1 + 416) = 0;
  *(_DWORD *)(v1 + 424) = 0;
  *(void *)(v1 + 432) = 0;
  *(void *)(v1 + 440) = 0;
  *(_DWORD *)(v1 + 448) = 0;
  *(_DWORD *)(v1 + 488) = 0;
  *(_OWORD *)(v1 + 472) = 0u;
  *(_OWORD *)(v1 + 456) = 0u;
  *(_DWORD *)(v1 + 512) = 0;
  *(void *)(v1 + 496) = 0;
  *(void *)(v1 + 504) = 0;
  *(unsigned char *)(v1 + 525) = 1;
  return result;
}

void sub_1CD42520C(uint64_t *a1)
{
  sub_1CBBED500(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD425244(uint64_t a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::PhysicalRegisterUsageInfo::ID);
  *((unsigned char *)this + 160) = 1;

  llvm::MachineFunctionPass::getAnalysisUsage(a1, (uint64_t)this);
}

uint64_t *sub_1CD425298(uint64_t *a1)
{
  sub_1CBAEFE80((uint64_t)(a1 + 8));
  MEMORY[0x1D25D9CD0](a1[8], 8);
  sub_1CBAEFE80((uint64_t)(a1 + 5));
  MEMORY[0x1D25D9CD0](a1[5], 8);

  return sub_1CBBED5CC(a1);
}

uint64_t *sub_1CD4252F4(uint64_t *a1)
{
  sub_1CBAEFE80((uint64_t)(a1 + 8));
  MEMORY[0x1D25D9CD0](a1[8], 8);
  sub_1CBAEFE80((uint64_t)(a1 + 5));
  MEMORY[0x1D25D9CD0](a1[5], 8);

  return sub_1CBBED674(a1);
}

void sub_1CD425350(uint64_t a1)
{
  sub_1CBAF1160(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD425388(uint64_t a1)
{
  sub_1CBAF1160(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD4253C0(uint64_t a1)
{
  sub_1CBAF1160(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD425400(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC1408, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBBEFB30;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCC1408, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD425470()
{
}

void sub_1CD4254AC(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = (void **)(*(void *)a1 + (v4 << 6) - 24);
    uint64_t v6 = (a2 << 6) - (v4 << 6);
    do
    {
      if (v5 + 2 != *v5) {
        free(*v5);
      }
      int v7 = (void **)*(v5 - 4);
      if (v5 - 2 != v7) {
        free(v7);
      }
      v5 -= 8;
      v6 += 64;
    }
    while (v6);
  }
  *(_DWORD *)(a1 + 8) = v2;
}

uint64_t sub_1CD425530(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = a1 + 24;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = 0x100000000;
  if (*(_DWORD *)(a2 + 16)) {
    sub_1CD4255B8(v4, a2 + 8);
  }
  *(void *)(a1 + 40) = a1 + 56;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 48) = 0x200000000;
  if (*(_DWORD *)(a2 + 48)) {
    sub_1CBBF2654(a1 + 40, (const void **)(a2 + 40));
  }
  return a1;
}

uint64_t sub_1CD4255B8(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = (const void *)(a2 + 16);
    uint64_t v4 = *(const void **)a2;
    if (v4 == v5)
    {
      int v7 = (_DWORD *)(a2 + 8);
      uint64_t v9 = *(unsigned int *)(a2 + 8);
      uint64_t v10 = *(unsigned int *)(a1 + 8);
      if (v10 >= v9)
      {
        if (v9) {
          memmove(*(void **)a1, v4, 8 * v9 - 3);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v9)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v10) {
          memmove(*(void **)a1, v4, 8 * v10 - 3);
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v11 = *v7;
        if (v10 != v11) {
          memcpy((void *)(*(void *)a1 + 8 * v10), (const void *)(*(void *)a2 + 8 * v10), *(void *)a2 + 8 * v11 - (*(void *)a2 + 8 * v10));
        }
      }
      *(_DWORD *)(a1 + 8) = v9;
    }
    else
    {
      uint64_t v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        uint64_t v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      int v7 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    *int v7 = 0;
  }
  return a1;
}

void sub_1CD4256D8(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EA618A80, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBBF3C7C;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EA618A80, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD425748()
{
}

uint64_t sub_1CD42579C(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 8);
  unint64_t v2 = *v1 & 0xFFFFFFFFFFFFFFF8;
  if (v2)
  {
    unint64_t v3 = *v1 & 0xFFFFFFFFFFFFFFF8;
    if ((*(unsigned char *)v2 & 4) != 0)
    {
      uint64_t v4 = (void *)v1[3];
      if (v4 + 6 != (void *)v2) {
        goto LABEL_14;
      }
      goto LABEL_15;
    }
  }
  else
  {
    unint64_t v3 = 0;
  }
  while ((*(_WORD *)(v3 + 44) & 4) != 0)
    unint64_t v3 = *(void *)v3 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = (void *)v1[3];
  if ((void *)v3 != v4 + 6)
  {
    if (!v2 || (*(unsigned char *)v2 & 4) == 0)
    {
      while ((*(_WORD *)(v2 + 44) & 4) != 0)
        unint64_t v2 = *(void *)v2 & 0xFFFFFFFFFFFFFFF8;
    }
    goto LABEL_14;
  }
LABEL_15:
  uint64_t v5 = v4[4] + 320;
  do
  {
    uint64_t v4 = (void *)*v4;
    if (v4 == (void *)v5)
    {
      *(unsigned char *)double result = 1;
      return result;
    }
    unint64_t v2 = v4[6] & 0xFFFFFFFFFFFFFFF8;
  }
  while (v4 + 6 == (void *)v2);
  if (!v2 || (*(unsigned char *)v2 & 4) == 0)
  {
    while ((*(_WORD *)(v2 + 44) & 4) != 0)
      unint64_t v2 = *(void *)v2 & 0xFFFFFFFFFFFFFFF8;
  }
LABEL_14:
  *(void *)(result + 8) = v2;
  return result;
}

void sub_1CD425874(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EA618A90, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBBF8E04;
    v3[1] = &v1;
    unint64_t v2 = v3;
    std::__call_once(&qword_1EA618A90, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD4258E4()
{
}

void sub_1CD425938(__n128 *a1, char **a2, _WORD *a3)
{
  sub_1CB883A14((uint64_t)&qword_1EBCC14E8, 0, 0);
  byte_1EBCC1568 = 0;
  qword_1EBCC1570 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBCC1578 = 0;
  qword_1EBCC14E8 = (uint64_t)&unk_1F26440A0;
  qword_1EBCC1580 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCC1588 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCC15A0 = (uint64_t)&qword_1EBCC1588;
  sub_1CD425A28(a1, a2, a3);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCC14E8);
}

__n128 sub_1CD425A28(__n128 *a1, char **a2, _WORD *a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCC14E8, "agx3-post-ra-peephole-copy-eliminate", 0x24uLL);
  __n128 result = *a1;
  xmmword_1EBCC1508 = (__int128)*a1;
  int v7 = *a2;
  byte_1EBCC1568 = **a2;
  byte_1EBCC1579 = 1;
  byte_1EBCC1578 = *v7;
  word_1EBCC14F2 = (32 * (*a3 & 3)) | word_1EBCC14F2 & 0xFF9F;
  return result;
}

void sub_1CD425AB0(__n128 *a1, char **a2, _WORD *a3)
{
  sub_1CB883A14((uint64_t)&qword_1EBCC15A8, 0, 0);
  byte_1EBCC1628 = 0;
  qword_1EBCC1630 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBCC1638 = 0;
  qword_1EBCC15A8 = (uint64_t)&unk_1F26440A0;
  qword_1EBCC1640 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCC1648 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCC1660 = (uint64_t)&qword_1EBCC1648;
  sub_1CD425BA0(a1, a2, a3);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCC15A8);
}

__n128 sub_1CD425BA0(__n128 *a1, char **a2, _WORD *a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCC15A8, "agx3-post-ra-peephole-remove-dead-rld", 0x25uLL);
  __n128 result = *a1;
  xmmword_1EBCC15C8 = (__int128)*a1;
  int v7 = *a2;
  byte_1EBCC1628 = **a2;
  byte_1EBCC1639 = 1;
  byte_1EBCC1638 = *v7;
  word_1EBCC15B2 = (32 * (*a3 & 3)) | word_1EBCC15B2 & 0xFF9F;
  return result;
}

void sub_1CD425C28(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EA618AA0, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBBFD3B8;
    v3[1] = &v1;
    unint64_t v2 = v3;
    std::__call_once(&qword_1EA618AA0, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD425C98()
{
}

void *sub_1CD425CFC(uint64_t a1)
{
  __n128 result = (void *)llvm::RegisterBankInfo::RegisterBankInfo(a1, (llvm::RegisterBank **)&off_1EA6151C0, 1);
  *__n128 result = &unk_1F25FA7D0;
  if ((byte_1EA618AB0 & 1) == 0) {
    byte_1EA618AB0 = 1;
  }
  return result;
}

uint64_t sub_1CD425D5C(llvm::RegisterBankInfo *a1, uint64_t a2)
{
  v24[8] = *MEMORY[0x1E4F143B8];
  uint64_t InstrMappingImpl = llvm::RegisterBankInfo::getInstrMappingImpl(a1, (const llvm::MachineInstr *)a2);
  if (*(_DWORD *)InstrMappingImpl == -2 || *(void *)(InstrMappingImpl + 8) == 0)
  {
    int v7 = **(unsigned __int16 **)(a2 + 16);
    if ((v7 - 18) <= 0x33 && ((1 << (v7 - 18)) & 0x8000000000003) != 0 || v7 == 0) {
      unsigned int v20 = 1;
    }
    else {
      unsigned int v20 = *(_DWORD *)(a2 + 40);
    }
    uint64_t v10 = *(void *)(*(void *)(*(void *)(a2 + 24) + 32) + 40);
    v23[0] = v24;
    v23[1] = (void *)0x800000000;
    sub_1CD4138E0((uint64_t)v23, v20, 0);
    if (v20)
    {
      uint64_t v11 = 0;
      do
      {
        uint64_t v12 = *(void *)(a2 + 32);
        if (!*(unsigned char *)(v12 + 4 * v11))
        {
          int v13 = *(_DWORD *)(v12 + 4 * v11 + 4);
          if (v13 < 0 && (uint64_t v18 = v13 & 0x7FFFFFFF, v18 < *(_DWORD *)(v10 + 432))) {
            unint64_t v14 = *(void *)(*(void *)(v10 + 424) + 8 * v18);
          }
          else {
            unint64_t v14 = 0;
          }
          unint64_t v22 = v14;
          v21[0] = sub_1CB8F1DC4(&v22);
          v21[1] = v15;
          int v16 = llvm::TypeSize::operator unsigned long long(v21, v15);
          uint64_t ValueMapping = llvm::RegisterBankInfo::getValueMapping(a1, 0, v16, (const llvm::RegisterBank *)&unk_1EBCC1728);
          *(void *)((char *)v23[0] + v11) = ValueMapping;
        }
        v11 += 8;
      }
      while (8 * v20 != v11);
    }
    OperandsMapping = (const llvm::RegisterBankInfo::ValueMapping *)llvm::RegisterBankInfo::getOperandsMapping((uint64_t)a1, (uint64_t)v23);
    uint64_t InstrMappingImpl = llvm::RegisterBankInfo::getInstructionMappingImpl(a1, 0, -1, 0, OperandsMapping, v20);
    if (v23[0] != v24) {
      free(v23[0]);
    }
  }
  return InstrMappingImpl;
}

void sub_1CD425F38(uint64_t a1)
{
}

void sub_1CD425F48()
{
  JUMPOUT(0x1D25D9CE0);
}

char *sub_1CD425F70(uint64_t a1, int a2)
{
  return off_1E66ADD60[a2];
}

uint64_t sub_1CD425F80(uint64_t a1, uint64_t a2, int a3)
{
  return word_1CDC7BF40[a3];
}

char *sub_1CD425F90(uint64_t a1, uint64_t a2)
{
  return (char *)&unk_1CDC7C070 + 4 * word_1CDC7BF70[*(unsigned __int16 *)(*(void *)a2 + 24)];
}

double sub_1CD425FB4(uint64_t a1)
{
  uint64_t v1 = llvm::TargetRegisterInfo::TargetRegisterInfo(a1, (uint64_t)&off_1E66ADE20, (uint64_t)off_1E66ADE38, (uint64_t)off_1E66AE238, (uint64_t)off_1E66AE238, (uint64_t)&unk_1CDC7C958, -1, (uint64_t)&unk_1E66AE970, 0);
  *(void *)uint64_t v1 = &unk_1F25FA890;
  *(void *)(v1 + 8) = "0";
  *(void *)(v1 + 16) = 2948;
  *(_DWORD *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = &off_1E67BA618;
  *(void *)(v1 + 64) = &unk_1CDEDA300;
  *(void *)(v1 + 72) = "R89_R90_R91_R92_R93_R94_R95_R96_R97_R98_R99_R100";
  *(void *)(v1 + 48) = &unk_1CDEF0FF8;
  *(void *)(v1 + 56) = &unk_1CDED2BF0;
  *(void *)(v1 + 40) = 0x17800000080;
  *(void *)(v1 + 80) = "IR16tup16_with_hsub3_hsub4_hsub5_hsub6_hsub7_hsub8_hsub9_hsub10";
  *(void *)(v1 + 88) = &unk_1CDEDA888;
  *(_DWORD *)(v1 + 104) = 231;
  *(void *)(v1 + 96) = &unk_1CDEDB268;
  *(void *)(v1 + 112) = &unk_1CDEFF150;
  *(void *)(v1 + 152) = &unk_1CDEFD0B0;
  *(void *)(v1 + 160) = &unk_1CDEFD0BC;
  *(void *)(v1 + 136) = &unk_1CDEFD0C8;
  *(void *)(v1 + 144) = &unk_1CDEFE10C;
  *(void *)&double result = 0x20800000208;
  *(_OWORD *)(v1 + 120) = xmmword_1CDC6D5F0;
  return result;
}

_UNKNOWN **sub_1CD4260E4()
{
  return &off_1E66AF570;
}

uint64_t sub_1CD4260F4()
{
  return 0;
}

uint64_t sub_1CD4260FC()
{
  return 0;
}

char **sub_1CD426104()
{
  return &off_1E66AF578;
}

void sub_1CD426124(llvm::TargetRegisterInfo *a1)
{
}

uint64_t sub_1CD42615C()
{
  return 0;
}

uint64_t sub_1CD426164()
{
  return 0;
}

_DWORD *sub_1CD42616C(_DWORD *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[4];
  int v3 = result[2];
  int v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64) {
    int v4 = 64;
  }
  if (v3) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (v5 == v2)
  {
    *((void *)result + 1) = 0;
    if (v2)
    {
      uint64_t v6 = *(void **)result;
      uint64_t v7 = 8 * v2;
      do
      {
        *v6++ = -4096;
        v7 -= 8;
      }
      while (v7);
    }
  }
  else
  {
    MEMORY[0x1D25D9CD0](*(void *)result, 8);
    return sub_1CBB231A0(v1, v5);
  }
  return result;
}

_DWORD *sub_1CD426218(_DWORD *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[4];
  int v3 = result[2];
  int v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64) {
    int v4 = 64;
  }
  if (v3) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (v5 == v2)
  {
    *((void *)result + 1) = 0;
    if (v2)
    {
      uint64_t v6 = *(void **)result;
      uint64_t v7 = 32 * v2;
      do
      {
        *uint64_t v6 = -4096;
        v6 += 4;
        v7 -= 32;
      }
      while (v7);
    }
  }
  else
  {
    MEMORY[0x1D25D9CD0](*(void *)result, 8);
    return sub_1CBC04C8C(v1, v5);
  }
  return result;
}

void sub_1CD4262C4(_DWORD *a1)
{
  int v2 = a1[2];
  sub_1CBBE4828((uint64_t)a1);
  int v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64) {
    int v3 = 64;
  }
  if (v2) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4 == a1[4])
  {
    *((void *)a1 + 1) = 0;
    if (v4)
    {
      int v5 = *(void **)a1;
      uint64_t v6 = 24 * v4;
      do
      {
        void *v5 = -4096;
        v5 += 3;
        v6 -= 24;
      }
      while (v6);
    }
  }
  else
  {
    MEMORY[0x1D25D9CD0](*(void *)a1, 8);
    sub_1CBC04E60(a1, v4);
  }
}

void sub_1CD426378(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC1950, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBC0525C;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EBCC1950, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD4263E8()
{
}

void sub_1CD426424(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EA618AB8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBC09018;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EA618AB8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD426494()
{
}

void sub_1CD4264E8(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EA618AC8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBC0DDF4;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EA618AC8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD426558()
{
}

uint64_t *sub_1CD4265AC(uint64_t *result, int a2, int a3)
{
  uint64_t v4 = result;
  uint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (void *)v5;
        int v8 = *(_DWORD *)(v5 + 28);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = (uint64_t **)v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = result + 1;
LABEL_9:
    uint64_t v9 = operator new(0x20uLL);
    v9[7] = a3;
    *(void *)uint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v7;
    *uint64_t v6 = (uint64_t *)v9;
    uint64_t v10 = *(void *)*v4;
    if (v10)
    {
      uint64_t *v4 = v10;
      uint64_t v11 = *v6;
    }
    else
    {
      uint64_t v11 = (uint64_t *)v9;
    }
    double result = sub_1CB8358B8((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

void sub_1CD426664(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC1A98, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBC0FF28;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EBCC1A98, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD4266D4()
{
}

uint64_t sub_1CD426710(uint64_t a1)
{
  sub_1CB8483A0(a1, (uint64_t)&unk_1EBCC1A90);
  *(void *)int v2 = &unk_1F25FB020;
  *((void *)v2 + 31) = 0;
  *((void *)v2 + 32) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v2);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC1A98, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CBC0FF28;
    v6[1] = &PassRegistry;
    uint64_t v5 = v6;
    std::__call_once(&qword_1EBCC1A98, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CD4267C4()
{
}

void sub_1CD426804(llvm::Pass *a1)
{
  sub_1CBA0E6AC(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD42683C(uint64_t a1, llvm::AnalysisUsage *a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, (uint64_t)a2);

  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1CD426874(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v7 = *(void *)(a3 + 8);
  if (a4[6] == 1)
  {
    if ((*(unsigned char *)(v7 + 236) & 1) == 0) {
      llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a3 + 8));
    }
    unsigned int v8 = a4[40];
    if (v8 <= a4[37]) {
      unsigned int v8 = a4[37];
    }
    if (*(_DWORD *)(v7 + 240) > v8)
    {
      uint64_t v9 = *(void *)(a2 + 8);
      if ((*(unsigned char *)(v9 + 236) & 1) == 0) {
        llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a2 + 8));
      }
      int v10 = *(_DWORD *)(v9 + 240);
      uint64_t v11 = *(void *)(a3 + 8);
      if ((*(unsigned char *)(v11 + 236) & 1) == 0) {
        llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a3 + 8));
      }
      int v12 = *(_DWORD *)(v11 + 240);
      if (v10 < v12)
      {
        char v13 = 15;
LABEL_45:
        *(unsigned char *)(a2 + 16) = v13;
        return 1;
      }
      if (v10 > v12)
      {
        if (*(unsigned __int8 *)(a3 + 16) >= 0x10u)
        {
          char v19 = 15;
          goto LABEL_50;
        }
        return 1;
      }
    }
    uint64_t v20 = *(void *)(a2 + 8);
    if ((*(unsigned char *)(v20 + 236) & 2) == 0) {
      llvm::SUnit::ComputeHeight(*(llvm::SUnit **)(a2 + 8));
    }
    int v21 = *(_DWORD *)(v20 + 244);
    uint64_t v22 = *(void *)(a3 + 8);
    if ((*(unsigned char *)(v22 + 236) & 2) == 0) {
      llvm::SUnit::ComputeHeight(*(llvm::SUnit **)(a3 + 8));
    }
    int v23 = *(_DWORD *)(v22 + 244);
    if (v21 > v23)
    {
      char v13 = 16;
      goto LABEL_45;
    }
    if (v21 < v23)
    {
      if (*(unsigned __int8 *)(a3 + 16) >= 0x11u)
      {
        char v19 = 16;
        goto LABEL_50;
      }
      return 1;
    }
  }
  else
  {
    if ((*(unsigned char *)(v7 + 236) & 2) == 0) {
      llvm::SUnit::ComputeHeight(*(llvm::SUnit **)(a3 + 8));
    }
    unsigned int v14 = a4[40];
    if (v14 <= a4[37]) {
      unsigned int v14 = a4[37];
    }
    if (*(_DWORD *)(v7 + 244) > v14)
    {
      uint64_t v15 = *(void *)(a2 + 8);
      if ((*(unsigned char *)(v15 + 236) & 2) == 0) {
        llvm::SUnit::ComputeHeight(*(llvm::SUnit **)(a2 + 8));
      }
      int v16 = *(_DWORD *)(v15 + 244);
      uint64_t v17 = *(void *)(a3 + 8);
      if ((*(unsigned char *)(v17 + 236) & 2) == 0) {
        llvm::SUnit::ComputeHeight(*(llvm::SUnit **)(a3 + 8));
      }
      int v18 = *(_DWORD *)(v17 + 244);
      if (v16 < v18)
      {
        char v13 = 13;
        goto LABEL_45;
      }
      if (v16 > v18)
      {
        if (*(unsigned __int8 *)(a3 + 16) >= 0xEu)
        {
          char v19 = 13;
          goto LABEL_50;
        }
        return 1;
      }
    }
    uint64_t v24 = *(void *)(a2 + 8);
    if ((*(unsigned char *)(v24 + 236) & 1) == 0) {
      llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a2 + 8));
    }
    int v25 = *(_DWORD *)(v24 + 240);
    uint64_t v26 = *(void *)(a3 + 8);
    if ((*(unsigned char *)(v26 + 236) & 1) == 0) {
      llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a3 + 8));
    }
    int v27 = *(_DWORD *)(v26 + 240);
    if (v25 > v27)
    {
      char v13 = 14;
      goto LABEL_45;
    }
    if (v25 < v27)
    {
      if (*(unsigned __int8 *)(a3 + 16) < 0xFu) {
        return 1;
      }
      char v19 = 14;
LABEL_50:
      *(unsigned char *)(a3 + 16) = v19;
      return 1;
    }
  }
  return 0;
}

void sub_1CD426A78(llvm *a1, llvm::MachineSchedContext *a2)
{
}

void *sub_1CD426B48(void *a1)
{
  *a1 = &unk_1F25FB0E0;
  sub_1CD421E44(a1 + 210);

  return sub_1CBACB4A0(a1);
}

void sub_1CD426BA4(void *a1)
{
  sub_1CBACB4A0(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD426BDC(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EA618AD8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBC154A8;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EA618AD8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

uint64_t sub_1CD426C4C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = (const void *)(a2 + 24);
    uint64_t v4 = *(const void **)a2;
    if (v4 == v5)
    {
      unint64_t v8 = *(void *)(a2 + 8);
      unint64_t v9 = *(void *)(a1 + 8);
      if (v9 >= v8)
      {
        if (v8) {
          memmove(*(void **)a1, v4, *(void *)(a2 + 8));
        }
      }
      else
      {
        if (*(void *)(a1 + 16) < v8)
        {
          *(void *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        if (v9) {
          memmove(*(void **)a1, v4, *(void *)(a1 + 8));
        }
        uint64_t v10 = *(void *)(a2 + 8);
        if (v9 != v10) {
          memcpy((void *)(*(void *)a1 + v9), (const void *)(*(void *)a2 + v9), *(void *)a2 + v10 - (*(void *)a2 + v9));
        }
      }
      *(void *)(a1 + 8) = v8;
    }
    else
    {
      uint64_t v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 24)
      {
        free(v6);
        uint64_t v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a2 + 16) = 0;
      *(void *)a2 = v5;
    }
    *(void *)(a2 + 8) = 0;
  }
  return a1;
}

void *sub_1CD426D54(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v14 = 0;
  double result = (void *)sub_1CD426E14(a2, *a3, &v14);
  uint64_t v7 = v14;
  if (result)
  {
    uint64_t v8 = a2 + 8;
    if (*(unsigned char *)a2)
    {
      uint64_t v9 = 4;
    }
    else
    {
      uint64_t v8 = *(void *)(a2 + 8);
      uint64_t v9 = *(unsigned int *)(a2 + 16);
    }
    char v10 = 0;
    uint64_t v11 = v8 + 8 * v9;
  }
  else
  {
    double result = sub_1CD426EC0((_DWORD *)a2, a3, v14);
    uint64_t v7 = result;
    *double result = *a3;
    uint64_t v12 = a2 + 8;
    if (*(unsigned char *)a2)
    {
      uint64_t v13 = 4;
    }
    else
    {
      uint64_t v12 = *(void *)(a2 + 8);
      uint64_t v13 = *(unsigned int *)(a2 + 16);
    }
    uint64_t v11 = v12 + 8 * v13;
    char v10 = 1;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_1CD426E14(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    char v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        char v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 8 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

void *sub_1CD426EC0(_DWORD *a1, uint64_t *a2, void *a3)
{
  int v5 = *a1 >> 1;
  if (*a1) {
    unsigned int v6 = 4;
  }
  else {
    unsigned int v6 = a1[4];
  }
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_1CD426F80((uint64_t)a1, v6);
  uint64_t v8 = 0;
  sub_1CD426E14((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096) {
    --a1[1];
  }
  return a3;
}

uint64_t sub_1CD426F80(uint64_t a1, unsigned int a2)
{
  v14[4] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    unsigned int v6 = *(uint64_t **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = llvm::allocate_buffer(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD4270FC(a1, v6, &v6[v7]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = v14;
  for (uint64_t i = 8; i != 40; i += 8)
  {
    uint64_t v10 = *(void *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v8++ = v10;
    }
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = llvm::allocate_buffer(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CD4270FC(a1, v14, v8);
}

uint64_t sub_1CD4270FC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 40);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CD426E14((uint64_t)v5, v10, &v11);
      *uint64_t v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1CD4271C0(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    size_t v4 = *(void *)(a2 + 8);
    size_t v5 = *(void *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4) {
        memmove(*(void **)a1, *(const void **)a2, v4);
      }
    }
    else
    {
      if (*(void *)(a1 + 16) < v4)
      {
        *(void *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      if (v5) {
        memmove(*(void **)a1, *(const void **)a2, *(void *)(a1 + 8));
      }
      uint64_t v6 = *(void *)(a2 + 8);
      if (v5 != v6) {
        memcpy((void *)(*(void *)a1 + v5), (const void *)(*(void *)a2 + v5), *(void *)a2 + v6 - (*(void *)a2 + v5));
      }
    }
    *(void *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4) {
        memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v4)
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v5) {
        memmove(*(void **)a1, *(const void **)a2, 8 * v5);
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6) {
        memcpy((void *)(*(void *)a1 + 8 * v5), (const void *)(*(void *)a2 + 8 * v5), *(void *)a2 + 8 * v6 - (*(void *)a2 + 8 * v5));
      }
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t sub_1CD427358(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  BOOL v12 = 0;
  uint64_t result = sub_1CD40EA84(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  uint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD4273F4(a2, a3, v12);
    uint64_t v9 = (void *)result;
    *(void *)uint64_t result = *a3;
    *(void *)(result + 8) = *a4;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 16) = v10;
  return result;
}

void *sub_1CD4273F4(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD4274A8(a1, v6);
  uint64_t v8 = 0;
  sub_1CD40EA84(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CD4274A8(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD427574(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD427574(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CD40EA84(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      uint64_t v10 = v11;
      *uint64_t v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

void sub_1CD42762C(void *a1, size_t a2)
{
  uint64_t v4 = a1[1];
  if (v4 + a2 > a1[2]) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (a2) {
    bzero((void *)(*a1 + v4), a2);
  }
  a1[1] = v4 + a2;
}

void sub_1CD42769C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    int v3 = a2;
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (a2 != v2) {
        bzero((void *)(*(void *)a1 + 8 * v2), 8 * (a2 - v2));
      }
    }
    *(_DWORD *)(a1 + 8) = v3;
  }
}

uint64_t sub_1CD427714(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = (int *)(a2 + 8);
    int v4 = *(_DWORD *)(a2 + 8);
    if (v4)
    {
      uint64_t v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        int v4 = *v5;
      }
      *(void *)a1 = *(void *)a2;
      int v7 = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a1 + 8) = v4;
      *(_DWORD *)(a1 + 12) = v7;
      *(void *)a2 = a2 + 16;
      *(_DWORD *)(a2 + 12) = 0;
    }
    else
    {
      uint64_t v5 = (int *)(a1 + 8);
    }
    int *v5 = 0;
  }
  return a1;
}

void *sub_1CD427798(void *a1, void *a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = a2 + 1;
    uint64_t v4 = a2[1];
    if (v4)
    {
      uint64_t v6 = (void *)*a1;
      if ((void *)*a1 != a1 + 3)
      {
        free(v6);
        uint64_t v4 = *v5;
      }
      *a1 = *a2;
      a1[1] = v4;
      a1[2] = a2[2];
      *a2 = a2 + 3;
      uint64_t *v5 = 0;
      v5[1] = 0;
    }
    else
    {
      a1[1] = 0;
    }
  }
  return a1;
}

long long *sub_1CD427818(uint64_t a1, _DWORD *a2, size_t a3, _DWORD *a4, size_t a5, const std::string::value_type *a6, std::string::size_type a7, uint64_t a8)
{
  uint64_t result = llvm::MCSubtargetInfo::InitMCProcessorInfo(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = *(void *)(a1 + 192);
  if (v10) {
    *(unsigned char *)(a1 + 389) = 1;
  }
  if ((v10 & 2) != 0) {
    *(unsigned char *)(a1 + 380) = 1;
  }
  if ((v10 & 4) != 0) {
    *(unsigned char *)(a1 + 345) = 1;
  }
  if ((v10 & 8) != 0) {
    *(unsigned char *)(a1 + 287) = 1;
  }
  if ((v10 & 0x10) != 0) {
    *(unsigned char *)(a1 + 387) = 1;
  }
  if ((v10 & 0x20) != 0) {
    *(unsigned char *)(a1 + 320) = 1;
  }
  if ((v10 & 0x40) != 0) {
    *(unsigned char *)(a1 + 314) = 1;
  }
  if ((v10 & 0x80) != 0) {
    *(unsigned char *)(a1 + 316) = 1;
  }
  if ((v10 & 0x100) != 0) {
    *(unsigned char *)(a1 + 315) = 1;
  }
  if ((v10 & 0x200) != 0) {
    *(unsigned char *)(a1 + 317) = 1;
  }
  if ((v10 & 0x400) != 0) {
    *(unsigned char *)(a1 + 343) = 1;
  }
  if ((v10 & 0x800) != 0) {
    *(unsigned char *)(a1 + 390) = 1;
  }
  if ((v10 & 0x1000) != 0) {
    *(unsigned char *)(a1 + 313) = 1;
  }
  if ((v10 & 0x2000) != 0) {
    *(unsigned char *)(a1 + 284) = 1;
  }
  if ((v10 & 0x4000) != 0) {
    *(unsigned char *)(a1 + 378) = 1;
  }
  if ((v10 & 0x8000) != 0) {
    *(unsigned char *)(a1 + 377) = 1;
  }
  if ((v10 & 0x10000) != 0) {
    *(unsigned char *)(a1 + 351) = 1;
  }
  if ((v10 & 0x20000) != 0) {
    *(unsigned char *)(a1 + 328) = 1;
  }
  if ((v10 & 0x40000) != 0) {
    *(unsigned char *)(a1 + 394) = 1;
  }
  if ((v10 & 0x80000) != 0) {
    *(unsigned char *)(a1 + 353) = 1;
  }
  if ((v10 & 0x100000) != 0) {
    *(unsigned char *)(a1 + 382) = 1;
  }
  if ((v10 & 0x200000) != 0) {
    *(unsigned char *)(a1 + 349) = 1;
  }
  if ((v10 & 0x400000) != 0) {
    *(unsigned char *)(a1 + 350) = 1;
  }
  if ((v10 & 0x800000) != 0) {
    *(unsigned char *)(a1 + 367) = 1;
  }
  if ((v10 & 0x1000000) != 0) {
    *(unsigned char *)(a1 + 296) = 1;
  }
  if ((v10 & 0x2000000) != 0) {
    *(unsigned char *)(a1 + 352) = 1;
  }
  if ((v10 & 0x4000000) != 0) {
    *(unsigned char *)(a1 + 392) = 1;
  }
  if ((v10 & 0x8000000) != 0) {
    *(unsigned char *)(a1 + 369) = 1;
  }
  if ((v10 & 0x10000000) != 0) {
    *(unsigned char *)(a1 + 338) = 1;
  }
  if ((v10 & 0x20000000) != 0) {
    *(unsigned char *)(a1 + 280) = 1;
  }
  if ((v10 & 0x40000000) != 0) {
    *(unsigned char *)(a1 + 395) = 1;
  }
  if ((v10 & 0x80000000) != 0) {
    *(unsigned char *)(a1 + 384) = 1;
  }
  if ((v10 & 0x100000000) != 0) {
    *(unsigned char *)(a1 + 312) = 1;
  }
  if ((v10 & 0x200000000) != 0) {
    *(unsigned char *)(a1 + 399) = 1;
  }
  if ((v10 & 0x400000000) != 0) {
    *(unsigned char *)(a1 + 359) = 1;
  }
  if ((v10 & 0x800000000) != 0) {
    *(unsigned char *)(a1 + 398) = 1;
  }
  if ((v10 & 0x1000000000) != 0) {
    *(unsigned char *)(a1 + 321) = 1;
  }
  if ((v10 & 0x2000000000) != 0) {
    *(unsigned char *)(a1 + 310) = 1;
  }
  if ((v10 & 0x4000000000) != 0) {
    *(unsigned char *)(a1 + 329) = 1;
  }
  if ((v10 & 0x8000000000) != 0) {
    *(unsigned char *)(a1 + 330) = 1;
  }
  if ((v10 & 0x10000000000) != 0) {
    *(unsigned char *)(a1 + 288) = 1;
  }
  if ((v10 & 0x20000000000) != 0) {
    *(unsigned char *)(a1 + 300) = 1;
  }
  if ((v10 & 0x40000000000) != 0) {
    *(unsigned char *)(a1 + 301) = 1;
  }
  if ((v10 & 0x80000000000) != 0) {
    *(unsigned char *)(a1 + 297) = 1;
  }
  if ((v10 & 0x100000000000) != 0) {
    *(unsigned char *)(a1 + 298) = 1;
  }
  if ((v10 & 0x200000000000) != 0) {
    *(unsigned char *)(a1 + 299) = 1;
  }
  if ((v10 & 0x400000000000) != 0) {
    *(unsigned char *)(a1 + 303) = 1;
  }
  if ((v10 & 0x800000000000) != 0) {
    *(unsigned char *)(a1 + 302) = 1;
  }
  if ((v10 & 0x1000000000000) != 0) {
    *(unsigned char *)(a1 + 305) = 1;
  }
  if ((v10 & 0x2000000000000) != 0) {
    *(unsigned char *)(a1 + 304) = 1;
  }
  if ((v10 & 0x4000000000000) != 0) {
    *(unsigned char *)(a1 + 356) = 1;
  }
  if ((v10 & 0x8000000000000) != 0) {
    *(unsigned char *)(a1 + 364) = 1;
  }
  if ((v10 & 0x10000000000000) != 0) {
    *(unsigned char *)(a1 + 342) = 1;
  }
  if ((v10 & 0x20000000000000) != 0) {
    *(unsigned char *)(a1 + 355) = 1;
  }
  if ((v10 & 0x40000000000000) != 0) {
    *(unsigned char *)(a1 + 354) = 1;
  }
  if ((v10 & 0x80000000000000) != 0) {
    *(unsigned char *)(a1 + 393) = 1;
  }
  if ((v10 & 0x100000000000000) != 0) {
    *(unsigned char *)(a1 + 285) = 1;
  }
  if ((v10 & 0x200000000000000) != 0) {
    *(unsigned char *)(a1 + 295) = 1;
  }
  if ((v10 & 0x400000000000000) != 0) {
    *(unsigned char *)(a1 + 362) = 1;
  }
  if ((v10 & 0x800000000000000) != 0) {
    *(unsigned char *)(a1 + 335) = 1;
  }
  if ((v10 & 0x1000000000000000) != 0) {
    *(unsigned char *)(a1 + 347) = 1;
  }
  if ((v10 & 0x2000000000000000) != 0) {
    *(unsigned char *)(a1 + 334) = 1;
  }
  if ((v10 & 0x4000000000000000) != 0) {
    *(unsigned char *)(a1 + 333) = 1;
  }
  if (v10 < 0) {
    *(unsigned char *)(a1 + 373) = 1;
  }
  uint64_t v11 = *(void *)(a1 + 200);
  if (v11) {
    *(unsigned char *)(a1 + 366) = 1;
  }
  if ((v11 & 2) != 0) {
    *(unsigned char *)(a1 + 360) = 1;
  }
  if ((v11 & 4) != 0) {
    *(unsigned char *)(a1 + 283) = 1;
  }
  if ((v11 & 8) != 0) {
    *(unsigned char *)(a1 + 348) = 1;
  }
  if ((v11 & 0x10) != 0) {
    *(unsigned char *)(a1 + 292) = 1;
  }
  if ((v11 & 0x20) != 0) {
    *(unsigned char *)(a1 + 293) = 1;
  }
  if ((v11 & 0x40) != 0) {
    *(unsigned char *)(a1 + 294) = 1;
  }
  if ((v11 & 0x80) != 0) {
    *(unsigned char *)(a1 + 291) = 1;
  }
  if ((v11 & 0x100) != 0) {
    *(unsigned char *)(a1 + 388) = 1;
  }
  if ((v11 & 0x200) != 0) {
    *(unsigned char *)(a1 + 322) = 1;
  }
  if ((v11 & 0x400) != 0) {
    *(unsigned char *)(a1 + 368) = 1;
  }
  if ((v11 & 0x800) != 0) {
    *(unsigned char *)(a1 + 358) = 1;
  }
  if ((v11 & 0x1000) != 0) {
    *(unsigned char *)(a1 + 383) = 1;
  }
  if ((v11 & 0x2000) != 0) {
    *(unsigned char *)(a1 + 361) = 1;
  }
  if ((v11 & 0x4000) != 0) {
    *(unsigned char *)(a1 + 397) = 1;
  }
  if ((v11 & 0x8000) != 0) {
    *(unsigned char *)(a1 + 344) = 1;
  }
  if ((v11 & 0x10000) != 0) {
    *(unsigned char *)(a1 + 290) = 1;
  }
  if ((v11 & 0x20000) != 0) {
    *(unsigned char *)(a1 + 370) = 1;
  }
  if ((v11 & 0x40000) != 0) {
    *(unsigned char *)(a1 + 339) = 1;
  }
  if ((v11 & 0x80000) != 0) {
    *(unsigned char *)(a1 + 381) = 1;
  }
  if ((v11 & 0x100000) != 0) {
    *(unsigned char *)(a1 + 336) = 1;
  }
  if ((v11 & 0x200000) != 0) {
    *(unsigned char *)(a1 + 385) = 1;
  }
  if ((v11 & 0x400000) != 0) {
    *(unsigned char *)(a1 + 376) = 1;
  }
  if ((v11 & 0x800000) != 0) {
    *(unsigned char *)(a1 + 386) = 1;
  }
  if ((v11 & 0x1000000) != 0) {
    *(unsigned char *)(a1 + 363) = 1;
  }
  if ((v11 & 0x2000000) != 0) {
    *(unsigned char *)(a1 + 391) = 1;
  }
  if ((v11 & 0x4000000) != 0) {
    *(unsigned char *)(a1 + 289) = 1;
  }
  if ((v11 & 0x8000000) != 0) {
    *(unsigned char *)(a1 + 371) = 1;
  }
  if ((v11 & 0x10000000) != 0) {
    *(unsigned char *)(a1 + 332) = 1;
  }
  if ((v11 & 0x20000000) != 0) {
    *(unsigned char *)(a1 + 372) = 1;
  }
  if ((v11 & 0x40000000) != 0) {
    *(unsigned char *)(a1 + 374) = 1;
  }
  if ((v11 & 0x80000000) != 0) {
    *(unsigned char *)(a1 + 340) = 1;
  }
  if ((v11 & 0x100000000) != 0) {
    *(unsigned char *)(a1 + 396) = 1;
  }
  if ((v11 & 0x200000000) != 0) {
    *(unsigned char *)(a1 + 282) = 1;
  }
  if ((v11 & 0x400000000) != 0) {
    *(unsigned char *)(a1 + 327) = 1;
  }
  if ((v11 & 0x800000000) != 0) {
    *(unsigned char *)(a1 + 324) = 1;
  }
  if ((v11 & 0x1000000000) != 0) {
    *(unsigned char *)(a1 + 323) = 1;
  }
  if ((v11 & 0x2000000000) != 0) {
    *(unsigned char *)(a1 + 326) = 1;
  }
  if ((v11 & 0x4000000000) != 0) {
    *(unsigned char *)(a1 + 325) = 1;
  }
  if ((v11 & 0x8000000000) != 0) {
    *(unsigned char *)(a1 + 365) = 1;
  }
  if ((v11 & 0x10000000000) != 0) {
    *(unsigned char *)(a1 + 318) = 1;
  }
  if ((v11 & 0x20000000000) != 0) {
    *(unsigned char *)(a1 + 319) = 1;
  }
  if ((v11 & 0x40000000000) != 0) {
    *(unsigned char *)(a1 + 357) = 1;
  }
  if ((v11 & 0x80000000000) != 0) {
    *(unsigned char *)(a1 + 341) = 1;
  }
  if ((v11 & 0x100000000000) != 0) {
    *(unsigned char *)(a1 + 375) = 1;
  }
  if ((v11 & 0x200000000000) != 0) {
    *(unsigned char *)(a1 + 308) = 1;
  }
  if ((v11 & 0x400000000000) != 0) {
    *(unsigned char *)(a1 + 281) = 1;
  }
  if ((v11 & 0x800000000000) != 0) {
    *(unsigned char *)(a1 + 379) = 1;
  }
  if ((v11 & 0x1000000000000) != 0) {
    *(unsigned char *)(a1 + 286) = 1;
  }
  if ((v11 & 0x2000000000000) != 0) {
    *(unsigned char *)(a1 + 331) = 1;
  }
  if ((v11 & 0x4000000000000) != 0) {
    *(unsigned char *)(a1 + 311) = 1;
  }
  if ((v11 & 0x8000000000000) != 0) {
    *(unsigned char *)(a1 + 309) = 1;
  }
  if ((v11 & 0x10000000000000) != 0) {
    *(unsigned char *)(a1 + 337) = 1;
  }
  if ((v11 & 0x20000000000000) != 0) {
    *(unsigned char *)(a1 + 307) = 1;
  }
  if ((v11 & 0x40000000000000) != 0) {
    *(unsigned char *)(a1 + 306) = 1;
  }
  return result;
}

uint64_t sub_1CD427EF0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_1CD432A60(a2, a3, a4, a5);
}

void sub_1CD427F04(uint64_t a1, long long *a2, std::string::value_type *a3, std::string::size_type a4, const std::string::value_type *a5, std::string::size_type a6)
{
  uint64_t v11 = llvm::TargetSubtargetInfo::TargetSubtargetInfo(a1, a2, a3, a4, a3, a4, a5, a6, (uint64_t)&off_1E68282D8, 92, (uint64_t)&off_1E6829A20, 21, (uint64_t)&unk_1CDF2F2D0, (uint64_t)&unk_1CDF2F538, (uint64_t)&unk_1CDF2F594, 0, 0, 0);
  *uint64_t v11 = &unk_1F25FB490;
  BOOL v12 = v11 + 32;
  std::string::__init((std::string *)(v11 + 32), a3, a4);
  *(_WORD *)(a1 + 280) = 256;
  *(_OWORD *)(a1 + 282) = 0u;
  *(_OWORD *)(a1 + 298) = 0u;
  *(_OWORD *)(a1 + 314) = 0u;
  *(_OWORD *)(a1 + 330) = 0u;
  *(_OWORD *)(a1 + 346) = 0u;
  *(_OWORD *)(a1 + 362) = 0u;
  *(_OWORD *)(a1 + 378) = 0u;
  *(_OWORD *)(a1 + 394) = 0u;
  *(_OWORD *)(a1 + 410) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  sub_1CD421AAC(a1 + 440, a1);
  *(void *)(a1 + 1224) = 0;
  int v14 = *(char *)(a1 + 279);
  if (v14 < 0) {
    uint64_t v15 = *(void *)(a1 + 264);
  }
  else {
    uint64_t v15 = *(unsigned __int8 *)(a1 + 279);
  }
  if (!v15)
  {
    MEMORY[0x1D25D9630](v12, "g15");
    LOBYTE(v14) = *(unsigned char *)(a1 + 279);
  }
  if ((v14 & 0x80u) == 0) {
    int v16 = v12;
  }
  else {
    int v16 = *(_DWORD **)(a1 + 256);
  }
  if ((v14 & 0x80u) == 0) {
    size_t v17 = v14 & 0x7F;
  }
  else {
    size_t v17 = *(void *)(a1 + 264);
  }
  llvm::MCSubtargetInfo::InitMCProcessorInfo(a1, v16, v17, v16, v17, a5, a6, v13);
  char v19 = *(unsigned char *)(a1 + 279);
  BOOL v20 = v19 < 0;
  if (v19 >= 0) {
    int v21 = v12;
  }
  else {
    int v21 = *(_DWORD **)(a1 + 256);
  }
  size_t v22 = v19 & 0x7F;
  if (v20) {
    size_t v23 = *(void *)(a1 + 264);
  }
  else {
    size_t v23 = v22;
  }
  sub_1CD427818(a1, v21, v23, v21, v23, a5, a6, v18);
  operator new();
}

void sub_1CD42831C(void *a1)
{
}

uint64_t sub_1CD428354()
{
  return 1;
}

void sub_1CD42835C(void *a1)
{
  *a1 = &unk_1F25FB490;
  uint64_t v2 = a1[153];
  a1[153] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  sub_1CD421E84(a1 + 55);
}

void sub_1CD4284E8(long long *a1)
{
  uint64_t v2 = sub_1CB883A14((uint64_t)&qword_1EBD02298, 0, 0);
  dword_1EBD02318 = 0;
  qword_1EBD02320 = (uint64_t)&unk_1F25EA1B0;
  unk_1EBD02328 = 0;
  qword_1EBD02298 = (uint64_t)&unk_1F2643F00;
  qword_1EBD02330 = (uint64_t)&unk_1F2643DB0;
  qword_1EBD02338 = (uint64_t)&unk_1F25EA168;
  qword_1EBD02350 = (uint64_t)&qword_1EBD02338;
  llvm::cl::Option::setArgStr(v2, "agx3-tmp-reg-limit", 0x12uLL);
  xmmword_1EBD022B8 = *a1;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBD02298);
}

void LLVMInitializeAGX3Target(llvm::PassRegistry *a1)
{
  qword_1EA61E910 = (uint64_t)sub_1CD42AC44;
  atomic_ullong PassRegistry = (llvm *)llvm::PassRegistry::getPassRegistry(a1);
  sub_1CD640238(PassRegistry);
  sub_1CD613588((uint64_t)PassRegistry);
  sub_1CD41EAA4((uint64_t)PassRegistry);
  sub_1CD423A94((uint64_t)PassRegistry);
  sub_1CD422608((uint64_t)PassRegistry);
  sub_1CD42D510((uint64_t)PassRegistry);
  sub_1CD42D764((uint64_t)PassRegistry);
  sub_1CD42CCB4((uint64_t)PassRegistry);
  sub_1CD6315D4((uint64_t)PassRegistry);
  sub_1CC7CBFB0((uint64_t)PassRegistry);
  sub_1CD41DE08((uint64_t)PassRegistry);
  sub_1CD425874((uint64_t)PassRegistry);
  sub_1CD41E0FC((uint64_t)PassRegistry);
  sub_1CD420B94((uint64_t)PassRegistry);
  sub_1CD426378((uint64_t)PassRegistry);
  sub_1CD41F324((uint64_t)PassRegistry);
  sub_1CD424FE8((uint64_t)PassRegistry);
  sub_1CD42F414((uint64_t)PassRegistry);
  sub_1CD425400((uint64_t)PassRegistry);
  sub_1CD426664((uint64_t)PassRegistry);
  sub_1CD425C28((uint64_t)PassRegistry);
  sub_1CD426424((uint64_t)PassRegistry);
  sub_1CD4264E8((uint64_t)PassRegistry);
  sub_1CD426BDC((uint64_t)PassRegistry);
  sub_1CD4217E8((uint64_t)PassRegistry);
  sub_1CD420FB8((uint64_t)PassRegistry);
  sub_1CD42123C((uint64_t)PassRegistry);
  sub_1CD4256D8((uint64_t)PassRegistry);
  sub_1CD4309F8((uint64_t)PassRegistry);
  sub_1CD4205F4((uint64_t)PassRegistry);
  sub_1CD41E370((uint64_t)PassRegistry);
  sub_1CD41E670((uint64_t)PassRegistry);
  sub_1CD420888((uint64_t)PassRegistry);

  sub_1CD430AF8((uint64_t)PassRegistry);
}

void sub_1CD428720(void *a1, uint64_t a2, uint64_t a3, const std::string::value_type *a4, std::string::size_type a5, const std::string::value_type *a6, std::string::size_type a7, long long *a8, uint64_t a9, uint64_t a10, int a11)
{
  sub_1CB906AA8((uint64_t)v18, a8);
  sub_1CB906564((uint64_t)a1, a2, a3, a4, a5, a6, a7, (uint64_t)v18, a9, a10, a11);
  sub_1CB906D7C((uint64_t)v18);
  *a1 = &unk_1F25FB650;
  operator new();
}

void sub_1CD428860(uint64_t a1, llvm *a2)
{
}

void sub_1CD42886C()
{
}

BOOL sub_1CD428908(llvm::TargetPassConfig *a1)
{
  return (*(_WORD *)(*((void *)a1 + 14) + 1020) & 0x1000) != 0
      || llvm::TargetPassConfig::reportDiagnosticWhenGlobalISelFallback(a1);
}

void sub_1CD428920()
{
}

void sub_1CD428980()
{
}

void sub_1CD4289D8()
{
}

void sub_1CD428A28()
{
}

void sub_1CD428ABC()
{
}

void sub_1CD428B0C()
{
}

void sub_1CD428B88(llvm::TargetPassConfig *a1, llvm::LLVMTargetMachine *a2, llvm::legacy::PassManagerBase *a3)
{
}

void sub_1CD428BFC()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  if (!byte_1EBCC1F90) {
    llvm::createCodeGenPreparePass((llvm *)1);
  }
  sub_1CD42DA7C();
}

void sub_1CD4293B8()
{
}

void sub_1CD4295C4()
{
  if (byte_1EBCC1E10) {
    sub_1CD42CD60();
  }
}

void sub_1CD429618(uint64_t a1)
{
  if (!*(unsigned char *)(*(void *)(a1 + 112) + 1666)) {
    sub_1CD4263E8();
  }
  sub_1CD42DA40();
}

void sub_1CD4296BC(llvm::TargetPassConfig *a1)
{
}

void sub_1CD429790()
{
}

void sub_1CD429854()
{
}

uint64_t sub_1CD4298A4()
{
  return 0;
}

void sub_1CD4298B0()
{
}

uint64_t sub_1CD429A3C(uint64_t result)
{
  if (*(unsigned char *)(*(void *)(result + 112) + 1625)) {
    operator new();
  }
  return result;
}

void sub_1CD429BB4(uint64_t a1)
{
  if (!byte_1EBCC1ED0) {
    sub_1CD63F728();
  }
  sub_1CD63B5A4();
}

void sub_1CD42A584()
{
  v0[4] = *MEMORY[0x1E4F143B8];
  v0[0] = &unk_1F25FC520;
  v0[1] = sub_1CBC1E384;
  v0[3] = v0;
  llvm::createGreedyRegisterAllocator();
}

void sub_1CD42A6AC()
{
}

void sub_1CD42A720(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 48)) {
    *(void *)(a2 + 48) = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 8) + 216))(*(void *)(a2 + 8), a2 + 128, a2);
  }
  operator new();
}

uint64_t sub_1CD42A7AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 96);
  uint64_t v5 = *(void *)(v4 + 48);
  if (!v5)
  {
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v4 + 8) + 216))(*(void *)(v4 + 8), v4 + 128, *(void *)(a3 + 96));
    *(void *)(v4 + 48) = v5;
  }
  sub_1CD4249F4(v5, a2);
  return 0;
}

void sub_1CD42A81C(void *a1)
{
}

uint64_t sub_1CD42A854(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 1042) >> 3) & 1;
}

void sub_1CD42A864(llvm::TargetPassConfig *a1)
{
  llvm::TargetPassConfig::~TargetPassConfig(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD42A8A0()
{
  return 1;
}

void sub_1CD42A8A8()
{
}

uint64_t sub_1CD42A8BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 32))();
}

uint64_t sub_1CD42A8E4(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
  if ((result & 0xFF00000000) == 0) {
    return 0;
  }
  return result;
}

uint64_t sub_1CD42A928(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 56))();
}

uint64_t sub_1CD42A950(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 64))();
}

uint64_t sub_1CD42A978(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 88))();
}

uint64_t sub_1CD42A9A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 72))();
}

uint64_t sub_1CD42A9C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 80))();
}

void sub_1CD42A9F4(llvm::ModulePass *a1)
{
  llvm::ModulePass::~ModulePass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CD42AA2C()
{
  return "Dummy Module Pass";
}

void sub_1CD42AA3C(void *a1)
{
  *a1 = &unk_1F25FB650;
  sub_1CD417B78((uint64_t)(a1 + 320));
  sub_1CD42835C(a1 + 166);
}

void sub_1CD42AACC(__n128 *a1, char **a2, _WORD *a3)
{
  sub_1CB883A14((uint64_t)&qword_1EBCC1CD0, 0, 0);
  byte_1EBCC1D50 = 0;
  qword_1EBCC1D58 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBCC1D60 = 0;
  qword_1EBCC1CD0 = (uint64_t)&unk_1F26440A0;
  qword_1EBCC1D68 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCC1D70 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCC1D88 = (uint64_t)&qword_1EBCC1D70;
  sub_1CD42ABBC(a1, a2, a3);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCC1CD0);
}

__n128 sub_1CD42ABBC(__n128 *a1, char **a2, _WORD *a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCC1CD0, "agx3-pre-ra-analysis-val-live-over-calls", 0x28uLL);
  __n128 result = *a1;
  xmmword_1EBCC1CF0 = (__int128)*a1;
  int v7 = *a2;
  byte_1EBCC1D50 = **a2;
  byte_1EBCC1D61 = 1;
  byte_1EBCC1D60 = *v7;
  word_1EBCC1CDA = (32 * (*a3 & 3)) | word_1EBCC1CDA & 0xFF9F;
  return result;
}

void sub_1CD42AC44()
{
}

uint64_t sub_1CD42AD18(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1CD42AD20(uint64_t a1, uint64_t a2, llvm::Value *a3, llvm::Constant **a4, uint64_t a5)
{
  return sub_1CBA8813C((llvm::DataLayout **)(a1 + 16), a2, a3, a4, a5);
}

uint64_t sub_1CD42AD28()
{
  return 4;
}

uint64_t sub_1CD42AD34()
{
  return 0;
}

uint64_t sub_1CD42AD3C()
{
  return 0;
}

uint64_t sub_1CD42AD44()
{
  return 0;
}

uint64_t sub_1CD42AD4C()
{
  return 0;
}

uint64_t sub_1CD42AD54()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1CD42AD5C()
{
  return 0;
}

uint64_t sub_1CD42AD64(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 40) + 8) + 64))();
}

uint64_t sub_1CD42AD90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 40) + 8) + 72))();
}

uint64_t sub_1CD42ADBC()
{
  return 0;
}

uint64_t sub_1CD42ADC4()
{
  return 0;
}

uint64_t sub_1CD42ADCC()
{
  return 0;
}

uint64_t sub_1CD42ADD4()
{
  return 0;
}

uint64_t sub_1CD42ADDC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 1088))();
}

uint64_t sub_1CD42AE0C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 1080))();
}

uint64_t sub_1CD42AE3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[0] = a3;
  v9[1] = a4;
  char v10 = a5;
  uint64_t v11 = a6;
  return (*(uint64_t (**)(void, void, void *, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 40) + 1064))(*(void *)(a1 + 40), *(void *)(a1 + 16), v9, a2, a7, a8);
}

BOOL sub_1CD42AEB0(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  long long v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  long long v4 = a3[1];
  v6[0] = *a3;
  v6[1] = v4;
  return sub_1CD3F7118(a1 + 16, v7, v6);
}

uint64_t sub_1CD42AEEC()
{
  return 1;
}

uint64_t sub_1CD42AEF4()
{
  return 0;
}

uint64_t sub_1CD42AEFC()
{
  return 0;
}

uint64_t sub_1CD42AF04()
{
  return 0;
}

uint64_t sub_1CD42AF0C()
{
  return 2;
}

uint64_t sub_1CD42AF14()
{
  return 0;
}

uint64_t sub_1CD42AF1C()
{
  return 0;
}

BOOL sub_1CD42AF24(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1CD3F71C0((uint64_t *)(a1 + 16), a2, a3);
}

BOOL sub_1CD42AF30(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1CD3F71C0((uint64_t *)(a1 + 16), a2, a3);
}

uint64_t sub_1CD42AF3C()
{
  return 0;
}

uint64_t sub_1CD42AF44()
{
  return 0;
}

uint64_t sub_1CD42AF4C()
{
  return 0;
}

uint64_t sub_1CD42AF54()
{
  return 0;
}

uint64_t sub_1CD42AF5C()
{
  return 0;
}

uint64_t sub_1CD42AF64()
{
  return 0;
}

uint64_t sub_1CD42AF6C()
{
  return 0;
}

uint64_t sub_1CD42AF74()
{
  return 0;
}

uint64_t sub_1CD42AF7C()
{
  return 0;
}

uint64_t sub_1CD42AF84()
{
  return 0;
}

uint64_t sub_1CD42AF8C()
{
  return 1;
}

uint64_t sub_1CD42AF94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  v8[0] = a3;
  v8[1] = a4;
  char v9 = a5;
  uint64_t v10 = a6;
  return (*(uint64_t (**)(void, void, void *, uint64_t, uint64_t))(**(void **)(a1 + 40) + 1072))(*(void *)(a1 + 40), *(void *)(a1 + 16), v8, a2, a7);
}

uint64_t sub_1CD42B004()
{
  return 0;
}

uint64_t sub_1CD42B00C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 1144))();
}

uint64_t sub_1CD42B03C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 1176))();
}

uint64_t sub_1CD42B06C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 368))();
}

BOOL sub_1CD42B09C(uint64_t a1, llvm::EVT *this)
{
  unsigned __int8 v3 = sub_1CB87DC14(*(void *)(a1 + 40), *(void *)(a1 + 16), this, 0);
  return v3 && *(void *)(*(void *)(a1 + 40) + 8 * v3 + 96) != 0;
}

uint64_t sub_1CD42B0F4(uint64_t a1, llvm::LLVMContext **a2)
{
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 40), *(const llvm::DataLayout **)(a1 + 16), a2, (uint64_t)&v3);
  return v3;
}

unint64_t sub_1CD42B12C(uint64_t a1)
{
  return sub_1CD3F7240(*(void *)(*(void *)(a1 + 40) + 8));
}

unint64_t sub_1CD42B138(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  return sub_1CBBE5E30(a1 + 8, a2, a3, a4, a5);
}

unint64_t sub_1CD42B140(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  return sub_1CBC2467C(a1 + 8, a2, a3, a4);
}

uint64_t sub_1CD42B148()
{
  return 0;
}

uint64_t sub_1CD42B150()
{
  return 0;
}

double sub_1CD42B158@<D0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = a1 + 24;
  *(void *)&double result = 0x800000000;
  *(void *)(a1 + 16) = 0x800000000;
  *(_DWORD *)(a1 + 56) = 1;
  *(unsigned char *)(a1 + 60) = 0;
  return result;
}

uint64_t sub_1CD42B180()
{
  return 0;
}

uint64_t sub_1CD42B188()
{
  return 0;
}

uint64_t sub_1CD42B190()
{
  return 0;
}

uint64_t sub_1CD42B198()
{
  return 0;
}

uint64_t sub_1CD42B1A0(uint64_t a1, unsigned int a2)
{
  return 2 * (a2 < 0x21);
}

BOOL sub_1CD42B1B0(uint64_t a1, llvm::EVT *a2)
{
  return sub_1CB90D5AC(*(void *)(a1 + 16), *(void *)(a1 + 40), a2);
}

uint64_t sub_1CD42B1C4()
{
  return 1;
}

uint64_t sub_1CD42B1CC()
{
  return 0;
}

uint64_t sub_1CD42B1D8()
{
  return 1;
}

uint64_t sub_1CD42B1E4()
{
  return 0;
}

uint64_t sub_1CD42B1F0()
{
  return 0;
}

uint64_t sub_1CD42B1FC()
{
  return 8;
}

uint64_t sub_1CD42B204(uint64_t a1, uint64_t a2)
{
  return a2;
}

const char *sub_1CD42B20C(uint64_t a1, int a2)
{
  uint64_t v2 = "Generic::Unknown Register Class";
  if (a2 == 1) {
    uint64_t v2 = "Generic::VectorRC";
  }
  if (a2) {
    return v2;
  }
  else {
    return "Generic::ScalarRC";
  }
}

uint64_t sub_1CD42B238()
{
  return 32;
}

uint64_t sub_1CD42B244()
{
  return 128;
}

uint64_t sub_1CD42B24C()
{
  return 0;
}

uint64_t sub_1CD42B254()
{
  return 0;
}

uint64_t sub_1CD42B25C()
{
  return 0;
}

uint64_t sub_1CD42B264(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    return 0x100000000;
  }
  else {
    return 0;
  }
}

uint64_t sub_1CD42B274()
{
  return 0;
}

uint64_t sub_1CD42B27C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 56))();
}

uint64_t sub_1CD42B2A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 32))();
}

uint64_t sub_1CD42B2CC(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32));
  if ((result & 0xFF00000000) == 0) {
    return 0;
  }
  return result;
}

uint64_t sub_1CD42B310(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 64))();
}

uint64_t sub_1CD42B338(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 88))();
}

uint64_t sub_1CD42B360(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 72))();
}

uint64_t sub_1CD42B388(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 80))();
}

uint64_t sub_1CD42B3B0()
{
  return 1;
}

unint64_t sub_1CD42B3B8(uint64_t a1, int a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1CBC21F88(a1 + 8, a2, a3, a4, a5, a7);
}

uint64_t sub_1CD42B3C4(uint64_t a1, uint64_t a2, llvm::Type ***a3, llvm::Type ***a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  return sub_1CBC213DC(a1 + 8, a2, a3, a4, a5, a6, a7);
}

unint64_t sub_1CD42B3CC(uint64_t a1, uint64_t a2, llvm::Type ***a3, uint64_t a4)
{
  return sub_1CD42C2EC(a1 + 8, a2, a3, a4);
}

BOOL sub_1CD42B3D4(uint64_t a1, int a2, int a3)
{
  return a2 != 55 || a3 == 0;
}

uint64_t sub_1CD42B3E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(llvm::TargetLoweringBase **)(a1 + 40);
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12) {
    a3 = **(void **)(a3 + 16);
  }
  llvm::TargetLoweringBase::getTypeLegalizationCost(v4, *(const llvm::DataLayout **)(a1 + 16), (llvm::LLVMContext **)a3, (uint64_t)&v6);
  return v6;
}

unint64_t sub_1CD42B434(uint64_t a1, llvm::FixedVectorType *a2, int a3, llvm::Type *a4, llvm::APIntOps *a5)
{
  return sub_1CD42B708(a1 + 8, a2, a3, a4, a5);
}

unint64_t sub_1CD42B43C(uint64_t a1, int a2, llvm::EVT *a3, unsigned __int8 a4, uint64_t a5, int a6)
{
  if (a6) {
    return 1;
  }
  else {
    return sub_1CD424E58(a1 + 8, a2, a3, a4 | 0x100, a5, a6);
  }
}

uint64_t sub_1CD42B478()
{
  return 1;
}

unint64_t sub_1CD42B484(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, int a6)
{
  return sub_1CD42BBC8(a1 + 8, a2, a3, a4, 1, 0, a6);
}

unint64_t sub_1CD42B49C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, unsigned __int8 a6, int a7)
{
  return sub_1CD42BBC8(a1 + 8, a2, a3, a6, a5, 1, a7);
}

unint64_t sub_1CD42B4AC(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int *a5, void *a6, unsigned __int8 a7, uint64_t a8, int a9, char a10, char a11)
{
  return sub_1CD42C3A0(a1 + 8, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

unint64_t sub_1CD42B4D0(uint64_t a1, unsigned int a2, llvm::FixedVectorType **a3, uint64_t a4, uint64_t a5)
{
  return sub_1CD42B804(a1 + 8, a2, a3, a4, a5);
}

unint64_t sub_1CD42B4D8(uint64_t a1, llvm::FixedVectorType **a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_1CD42B820(a1 + 8, a2, a3, a5);
}

unint64_t sub_1CD42B4E4(uint64_t a1, int a2, int a3, llvm::FixedVectorType *a4, uint64_t a5, uint64_t a6)
{
  return sub_1CD42C928(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t sub_1CD42B4EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CBC202A4(a1 + 8, a2, a3);
}

uint64_t sub_1CD42B4F4()
{
  return 10;
}

uint64_t sub_1CD42B500(uint64_t a1, llvm::LLVMContext **a2)
{
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 40), *(const llvm::DataLayout **)(a1 + 16), a2, (uint64_t)v3);
  if (v3[2]) {
    return 0;
  }
  else {
    return v3[0];
  }
}

uint64_t sub_1CD42B544()
{
  return 0;
}

uint64_t sub_1CD42B550()
{
  return 0;
}

uint64_t sub_1CD42B55C()
{
  return 0;
}

uint64_t sub_1CD42B564()
{
  return 0;
}

uint64_t sub_1CD42B56C(int a1, llvm::IntegerType *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a8 & 0xFF00000000) != 0) {
    return llvm::IntegerType::get(this, (llvm::LLVMContext *)(8 * a8));
  }
  else {
    return llvm::Type::getInt8Ty(this, this);
  }
}

uint64_t sub_1CD42B584(int a1, uint64_t a2, llvm::IntegerType *a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  return sub_1CD3F7AB0(a1 + 16, a2, a3, a4, a5, a6, a7, a8, a9);
}

BOOL sub_1CD42B594(uint64_t a1, unsigned int a2, llvm::EVT *a3)
{
  unsigned __int8 v5 = sub_1CB87DC14(*(void *)(a1 + 40), *(void *)(a1 + 16), a3, 0);
  if (!v5) {
    return 0;
  }
  return *(_WORD *)(*(void *)(a1 + 40) + 10 * v5 + 2 * a2 + 169796) < 0x10u
      || (*(_WORD *)(*(void *)(a1 + 40) + 10 * v5 + 2 * a2 + 169796) & 0xF0) == 64;
}

BOOL sub_1CD42B60C(uint64_t a1, unsigned int a2, llvm::EVT *a3)
{
  unsigned __int8 v5 = sub_1CB87DC14(*(void *)(a1 + 40), *(void *)(a1 + 16), a3, 0);
  return v5 && (*(_WORD *)(*(void *)(a1 + 40) + 10 * v5 + 2 * a2 + 169796) & 0xB) == 0;
}

uint64_t sub_1CD42B678()
{
  return 1;
}

uint64_t sub_1CD42B680()
{
  return 1;
}

uint64_t sub_1CD42B688()
{
  return 0;
}

uint64_t sub_1CD42B690()
{
  return 0;
}

uint64_t sub_1CD42B698()
{
  return 1;
}

uint64_t sub_1CD42B6A0()
{
  return 1;
}

uint64_t sub_1CD42B6A8()
{
  return 0;
}

uint64_t sub_1CD42B6B0()
{
  return 0;
}

uint64_t sub_1CD42B6B8()
{
  return 0;
}

uint64_t sub_1CD42B6C0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16) == 60) {
    return 4;
  }
  else {
    return sub_1CD42CA84(a1 + 16, (uint64_t *)a2);
  }
}

uint64_t sub_1CD42B6F4()
{
  return 0x200000001;
}

uint64_t sub_1CD42B700()
{
  return 1;
}

unint64_t sub_1CD42B708(uint64_t a1, llvm::FixedVectorType *this, int a3, llvm::Type *a4, llvm::APIntOps *a5)
{
  llvm::FixedVectorType::get(this, a4);
  uint64_t v11 = v10;
  llvm::FixedVectorType::get(this, (llvm::Type *)(a4 * a3));
  uint64_t v13 = v12;
  llvm::APIntOps::ScaleBitMask(a5, a4, (uint64_t)&v17);
  unint64_t v14 = sub_1CBBE5E30(a1, v11, (uint64_t)&v17, 0, 1);
  unint64_t v15 = sub_1CBBE5E30(a1, v13, (uint64_t)a5, 1, 0);
  if (v18 >= 0x41 && v17) {
    MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
  }
  if (__OFADD__(v14, v15)) {
    return ((uint64_t)(v14 + v15) >> 63) ^ 0x8000000000000000;
  }
  else {
    return v14 + v15;
  }
}

unint64_t sub_1CD42B804(uint64_t a1, unsigned int a2, llvm::FixedVectorType **a3, uint64_t a4, uint64_t a5)
{
  if (a4 & 0xFF00000000) == 0 || (a4) {
    return sub_1CD42BEB4(a1, a2, a3, a5);
  }
  else {
    return sub_1CD42BDD0(a1, a2, (uint64_t)a3, a5);
  }
}

unint64_t sub_1CD42B820(uint64_t a1, llvm::FixedVectorType **a2, uint64_t a3, int a4)
{
  uint64_t v4 = a3;
  unsigned __int8 v5 = (llvm::Type *)a2;
  uint64_t v6 = a1;
  if ((a2[1] & 0xFE) == 0x12) {
    unsigned int v7 = *(unsigned __int8 *)(*(void *)a2[2] + 8);
  }
  else {
    unsigned int v7 = *((_DWORD *)a2 + 2);
  }
  uint64_t v8 = a2[3];
  char v9 = *(llvm::FixedVectorType **)(a3 + 24);
  LODWORD(v10) = *((_DWORD *)a2 + 8);
  if (v7 >= 7) {
    unsigned int v11 = 53;
  }
  else {
    unsigned int v11 = 54;
  }
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), a2, (uint64_t)v61);
  if (v62[0] - 15 > 0x9B)
  {
    unsigned int v13 = 1;
  }
  else
  {
    if (v62[0] - 120 <= 0x32) {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of MVT::getVectorNumElements() for scalable vector. Scalable flag may be dropped, use MVT::getVectorElementCount() instead", v12);
    }
    unsigned int v13 = sub_1CB8C32B0(v62);
  }
  unsigned int v14 = __clz(v10);
  if (v10 <= v13)
  {
    unint64_t v56 = 0;
    int64_t v58 = 0;
    int v15 = 0;
  }
  else
  {
    unsigned int v49 = v14;
    int v15 = 0;
    int v16 = 0;
    long long v50 = v8;
    int64_t v17 = 0;
    uint64_t v52 = v6;
    uint64_t v18 = (uint64_t)v5;
    unint64_t v19 = 0;
    unsigned int v53 = v11;
    unsigned int v51 = v13;
    uint64_t v20 = v6;
    do
    {
      int64_t v57 = v17;
      int v55 = v15;
      uint64_t v21 = v18;
      uint64_t v10 = (llvm::Type *)(v10 >> 1);
      llvm::FixedVectorType::get(v50, v10);
      uint64_t v18 = v22;
      llvm::FixedVectorType::get(v9, v10);
      uint64_t v4 = v23;
      unint64_t v24 = sub_1CBC21F88(v20, 5, v21, 0, 0, v18);
      if (__OFADD__(v19, v24)) {
        unint64_t v19 = ((uint64_t)(v19 + v24) >> 63) ^ 0x8000000000000000;
      }
      else {
        v19 += v24;
      }
      int v25 = v16;
      unint64_t v26 = sub_1CBC21D98(v20, v53, v18, v4, 0x2Au, a4, 0);
      int v28 = v27;
      unint64_t v29 = sub_1CBC21D98(v20, 0x39u, v18, v4, 0x2Au, a4, 0);
      int64_t v31 = v26 + v29;
      if (__OFADD__(v26, v29)) {
        int64_t v31 = (v31 >> 63) ^ 0x8000000000000000;
      }
      if (v28 == 1 || v30 == 1) {
        int v16 = 1;
      }
      else {
        int v16 = v25;
      }
      BOOL v33 = __OFADD__(v57, v31);
      int64_t v17 = v57 + v31;
      if (v33) {
        int64_t v17 = (v17 >> 63) ^ 0x8000000000000000;
      }
      int v15 = v55 - 1;
    }
    while (v10 > v51);
    unint64_t v56 = v19;
    int64_t v58 = v17;
    uint64_t v6 = v52;
    unsigned int v11 = v53;
    unsigned __int8 v5 = (llvm::Type *)v18;
    unsigned int v14 = v49;
  }
  uint64_t v34 = v15 - v14 + 31;
  unint64_t v59 = sub_1CBC21F88(v6, 7, (uint64_t)v5, 0, 0, (uint64_t)v5);
  unint64_t v60 = v35;
  uint64_t v63 = v34;
  int v64 = 0;
  sub_1CB90C9D4((uint64_t)&v63, (uint64_t)&v59);
  uint64_t v36 = v63;
  unint64_t v37 = sub_1CBC21D98(v6, v11, (uint64_t)v5, v4, 0x2Au, a4, 0);
  unint64_t v39 = v38;
  unint64_t v40 = sub_1CBC21D98(v6, 0x39u, (uint64_t)v5, v4, 0x2Au, a4, 0);
  unint64_t v41 = v39 & 0xFFFFFFFF00000000 | 1;
  if (v42 != 1) {
    unint64_t v41 = v39;
  }
  unint64_t v43 = v37 + v40;
  if (__OFADD__(v37, v40)) {
    unint64_t v43 = ((uint64_t)(v37 + v40) >> 63) ^ 0x8000000000000000;
  }
  unint64_t v59 = v43;
  unint64_t v60 = v41;
  uint64_t v63 = v34;
  int v64 = 0;
  sub_1CB90C9D4((uint64_t)&v63, (uint64_t)&v59);
  if ((*((_DWORD *)v5 + 2) & 0xFE) == 0x12) {
    unsigned __int8 v5 = (llvm::Type *)**((void **)v5 + 2);
  }
  unint64_t v44 = v56 + v36;
  if (__OFADD__(v56, v36)) {
    unint64_t v44 = ((uint64_t)(v56 + v36) >> 63) ^ 0x8000000000000000;
  }
  int64_t v45 = v58 + v63;
  if (__OFADD__(v58, v63)) {
    int64_t v45 = (v45 >> 63) ^ 0x8000000000000000;
  }
  BOOL v33 = __OFADD__(v44, v45);
  uint64_t v46 = v44 + v45;
  if (v33) {
    unint64_t v47 = (v46 >> 63) ^ 0x8000000000000000;
  }
  else {
    unint64_t v47 = v46;
  }
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(v6 + 32), *(const llvm::DataLayout **)(v6 + 8), (llvm::LLVMContext **)v5, (uint64_t)&v63);
  if (__OFADD__(v47, v63)) {
    return ((uint64_t)(v47 + v63) >> 63) ^ 0x8000000000000000;
  }
  else {
    return v47 + v63;
  }
}

unint64_t sub_1CD42BBC8(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, int a5, int a6, int a7)
{
  if (a6)
  {
    unsigned int v13 = (llvm::FixedVectorType *)llvm::PointerType::get(*(llvm::PointerType **)(a3 + 24), 0);
    llvm::FixedVectorType::get(v13, (llvm::Type *)*(unsigned int *)(a3 + 32));
    int v15 = (llvm::LLVMContext **)v14;
    if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12) {
      int v15 = **(llvm::LLVMContext ****)(v14 + 16);
    }
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v15, (uint64_t)&v38);
    int v16 = v38;
    unint64_t v17 = v39;
  }
  else
  {
    int v16 = 0;
    unint64_t v17 = 0;
  }
  uint64_t v18 = (llvm::Type *)*(unsigned int *)(a3 + 32);
  unint64_t v19 = sub_1CD424E58(a1, a2, *(llvm::EVT **)(a3 + 24), a4 | 0x100, 0, a7);
  unint64_t v20 = v17 & 0xFFFFFFFF00000000 | 1;
  if (v21 != 1) {
    unint64_t v20 = v17;
  }
  unint64_t v22 = (unint64_t)v16 + v19;
  if (__OFADD__(v16, v19)) {
    unint64_t v22 = ((uint64_t)((uint64_t)v16 + v19) >> 63) ^ 0x8000000000000000;
  }
  unint64_t v36 = v22;
  unint64_t v37 = v20;
  unint64_t v38 = v18;
  LODWORD(v39) = 0;
  sub_1CB90C9D4((uint64_t)&v38, (uint64_t)&v36);
  uint64_t v23 = v38;
  unint64_t v24 = sub_1CBBE5D64(a1, a3, a2 != 33, a2 == 33);
  if (a5)
  {
    int v25 = (llvm::Type *)*(unsigned int *)(a3 + 32);
    llvm::FixedVectorType::get((llvm::FixedVectorType *)(**(void **)a3 + 1888), v25);
    int v27 = (llvm::LLVMContext **)v26;
    if ((*(_DWORD *)(v26 + 8) & 0xFE) == 0x12) {
      int v27 = **(llvm::LLVMContext ****)(v26 + 16);
    }
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v27, (uint64_t)&v38);
    uint64_t v28 = (uint64_t)v38 + 1;
    if (__OFADD__(v38, 1)) {
      uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
    }
    BOOL v29 = a7 == 0;
    BOOL v30 = __OFADD__(v28, v29);
    uint64_t v31 = v28 + v29;
    if (v30) {
      uint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
    }
    unint64_t v36 = v31;
    unint64_t v37 = v39;
    unint64_t v38 = v25;
    LODWORD(v39) = 0;
    sub_1CB90C9D4((uint64_t)&v38, (uint64_t)&v36);
    unsigned int v32 = v38;
  }
  else
  {
    unsigned int v32 = 0;
  }
  unint64_t v33 = (unint64_t)v23 + v24;
  if (__OFADD__(v23, v24)) {
    unint64_t v33 = ((uint64_t)((uint64_t)v23 + v24) >> 63) ^ 0x8000000000000000;
  }
  BOOL v30 = __OFADD__(v33, v32);
  uint64_t v34 = (uint64_t)v32 + v33;
  if (v30) {
    return (v34 >> 63) ^ 0x8000000000000000;
  }
  else {
    return v34;
  }
}

unint64_t sub_1CD42BDD0(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a3 + 8) == 19) {
    return 0;
  }
  unint64_t v9 = sub_1CBBE5D64(a1, a3, 0, 1);
  v11[0] = sub_1CBC20CFC(a1, a2, *(void *)(a3 + 24), a4, 0, 0, 0, 0, 0, 0, 0);
  v11[1] = v10;
  uint64_t v12 = *(unsigned int *)(a3 + 32);
  int v13 = 0;
  sub_1CB90C9D4((uint64_t)v11, (uint64_t)&v12);
  if (__OFADD__(v9, v11[0])) {
    return ((uint64_t)(v9 + v11[0]) >> 63) ^ 0x8000000000000000;
  }
  else {
    return v9 + v11[0];
  }
}

unint64_t sub_1CD42BEB4(uint64_t a1, unsigned int a2, llvm::FixedVectorType **a3, uint64_t a4)
{
  unsigned __int8 v5 = (llvm::Type *)a3;
  uint64_t v7 = a1;
  uint64_t v8 = a3[3];
  LODWORD(v9) = *((_DWORD *)a3 + 8);
  if ((a2 & 0xFFFFFFFE) == 0x1C
    && (v8 == (llvm::FixedVectorType *)(*(void *)*a3 + 1888) ? (BOOL v10 = v9 >= 2) : (BOOL v10 = 0), v10))
  {
    uint64_t v34 = (llvm::Type ***)llvm::IntegerType::get(*a3, (llvm::LLVMContext *)*((unsigned int *)a3 + 8));
    uint64_t v35 = sub_1CBC213DC(v7, 49, v34, (llvm::Type ***)v5, 0, a4, 0);
    sub_1CB90C994(v34);
    unint64_t v37 = sub_1CBC21D98(v7, 0x35u, (uint64_t)v34, v36, 0x2Au, a4, 0);
    BOOL v31 = __OFADD__(v35, v37);
    uint64_t v32 = v35 + v37;
  }
  else
  {
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), a3, (uint64_t)v44);
    if (v45[0] - 15 > 0x9B)
    {
      unsigned int v12 = 1;
    }
    else
    {
      if (v45[0] - 120 <= 0x32) {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of MVT::getVectorNumElements() for scalable vector. Scalable flag may be dropped, use MVT::getVectorElementCount() instead", v11);
      }
      unsigned int v12 = sub_1CB8C32B0(v45);
    }
    unsigned int v13 = __clz(v9);
    if (v9 <= v12)
    {
      unsigned int v23 = a2;
      unint64_t v16 = 0;
      unint64_t v15 = 0;
      int v14 = 0;
    }
    else
    {
      unsigned int v38 = v13;
      unsigned int v41 = a2;
      int v14 = 0;
      uint64_t v40 = v7;
      unint64_t v15 = 0;
      unint64_t v16 = 0;
      unsigned int v39 = v12;
      do
      {
        uint64_t v17 = a4;
        uint64_t v18 = v5;
        unint64_t v9 = (llvm::Type *)(v9 >> 1);
        llvm::FixedVectorType::get(v8, v9);
        unsigned __int8 v5 = (llvm::Type *)v19;
        uint64_t v20 = (uint64_t)v18;
        a4 = v17;
        unint64_t v21 = sub_1CBC21F88(v40, 5, v20, 0, 0, v19);
        if (__OFADD__(v16, v21)) {
          unint64_t v16 = ((uint64_t)(v16 + v21) >> 63) ^ 0x8000000000000000;
        }
        else {
          v16 += v21;
        }
        unint64_t v22 = sub_1CBC20CFC(v40, v41, (uint64_t)v5, v17, 0, 0, 0, 0, 0, 0, 0);
        if (__OFADD__(v15, v22)) {
          unint64_t v15 = ((uint64_t)(v15 + v22) >> 63) ^ 0x8000000000000000;
        }
        else {
          v15 += v22;
        }
        --v14;
      }
      while (v9 > v39);
      unsigned int v23 = v41;
      uint64_t v7 = v40;
      unsigned int v13 = v38;
    }
    uint64_t v24 = v14 - v13 + 31;
    unint64_t v42 = sub_1CBC21F88(v7, 7, (uint64_t)v5, 0, 0, (uint64_t)v5);
    uint64_t v43 = v25;
    uint64_t v46 = v24;
    int v47 = 0;
    sub_1CB90C9D4((uint64_t)&v46, (uint64_t)&v42);
    if (__OFADD__(v16, v46)) {
      unint64_t v26 = ((uint64_t)(v16 + v46) >> 63) ^ 0x8000000000000000;
    }
    else {
      unint64_t v26 = v16 + v46;
    }
    unint64_t v42 = sub_1CBC20CFC(v7, v23, (uint64_t)v5, a4, 0, 0, 0, 0, 0, 0, 0);
    uint64_t v43 = v27;
    uint64_t v46 = v24;
    int v47 = 0;
    sub_1CB90C9D4((uint64_t)&v46, (uint64_t)&v42);
    unint64_t v28 = v15 + v46;
    if (__OFADD__(v15, v46)) {
      unint64_t v28 = ((uint64_t)(v15 + v46) >> 63) ^ 0x8000000000000000;
    }
    BOOL v31 = __OFADD__(v26, v28);
    uint64_t v29 = v26 + v28;
    if (v31) {
      unint64_t v30 = (v29 >> 63) ^ 0x8000000000000000;
    }
    else {
      unint64_t v30 = v29;
    }
    if ((*((_DWORD *)v5 + 2) & 0xFE) == 0x12) {
      unsigned __int8 v5 = (llvm::Type *)**((void **)v5 + 2);
    }
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(v7 + 32), *(const llvm::DataLayout **)(v7 + 8), (llvm::LLVMContext **)v5, (uint64_t)&v46);
    BOOL v31 = __OFADD__(v30, v46);
    uint64_t v32 = v30 + v46;
  }
  if (v31) {
    return (v32 >> 63) ^ 0x8000000000000000;
  }
  else {
    return v32;
  }
}

unint64_t sub_1CD42C238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = sub_1CBBE5D64(a1, a2, 1, 0);
  if (a4) {
    unint64_t v11 = sub_1CBC2467C(a1, a3, a4, a5);
  }
  else {
    unint64_t v11 = sub_1CBBE5D64(a1, a2, 0, 1);
  }
  if (__OFADD__(v10, v11)) {
    return ((uint64_t)(v10 + v11) >> 63) ^ 0x8000000000000000;
  }
  else {
    return v10 + v11;
  }
}

unint64_t sub_1CD42C2EC(uint64_t a1, uint64_t a2, llvm::Type ***a3, uint64_t a4)
{
  uint64_t v8 = *(llvm::TargetLoweringBase **)(a1 + 32);
  unint64_t v9 = (llvm::LLVMContext **)a4;
  if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
    unint64_t v9 = **(llvm::LLVMContext ****)(a4 + 16);
  }
  llvm::TargetLoweringBase::getTypeLegalizationCost(v8, *(const llvm::DataLayout **)(a1 + 8), v9, (uint64_t)&v13);
  uint64_t v10 = v13;
  uint64_t v11 = sub_1CBC213DC(a1, a2, a3, *(llvm::Type ****)(a4 + 24), 0, 0, 0);
  if (__OFADD__(v10, v11)) {
    return ((v10 + v11) >> 63) ^ 0x8000000000000000;
  }
  else {
    return v10 + v11;
  }
}

unint64_t sub_1CD42C3A0(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int *a5, void *a6, unsigned __int8 a7, uint64_t a8, int a9, char a10, char a11)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = (llvm::Type *)*(unsigned int *)(a3 + 32);
  v68[0] = v17 / a4;
  llvm::FixedVectorType::get(*(llvm::FixedVectorType **)(a3 + 24), (llvm::Type *)(v17 / a4));
  uint64_t v65 = v18;
  if ((a10 & 1) != 0 || a11)
  {
    uint64_t v21 = a1;
    unint64_t v22 = sub_1CD42BBC8(a1, a2, a3, a7, 1, 0, a9);
    int v19 = v62;
  }
  else
  {
    if (a9)
    {
      int v19 = 0;
      unint64_t v20 = 1;
      uint64_t v21 = a1;
    }
    else
    {
      uint64_t v21 = a1;
      unint64_t v20 = sub_1CD424E58(a1, a2, (llvm::EVT *)a3, a7 | 0x100, a8, 0);
      int v19 = v63;
    }
    unint64_t v22 = v20;
  }
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(v21 + 32), *(const llvm::DataLayout **)(v21 + 8), (llvm::LLVMContext **)a3, (uint64_t)&v77);
  unsigned __int8 v76 = v79[0];
  uint64_t v24 = sub_1CB83544C(*(void *)(v21 + 8), a3);
  if (v23 == 1) {
  uint64_t v26 = sub_1CB87E200(&v76);
  }
  if (v25 == 1) {
  if (!v19)
  }
  {
    unint64_t v27 = (unint64_t)(v26 + 7) >> 3;
    if (((unint64_t)(v24 + 7) >> 3) > v27)
    {
      unint64_t v64 = v22;
      unint64_t v28 = (((unint64_t)(v24 + 7) >> 3) + (unint64_t)v27 - 1)
          / ((unint64_t)(v26 + 7) >> 3);
      uint64_t v29 = v28 - 1;
      unsigned int v77 = v79;
      uint64_t v78 = 0x600000000;
      sub_1CB90D610((uint64_t)&v77, (v28 + 63) >> 6, 0);
      int v80 = v28;
      unint64_t v30 = (int8x8_t *)v77;
      if (a6)
      {
        if (v68[0] <= 1) {
          unsigned int v31 = 1;
        }
        else {
          unsigned int v31 = v68[0];
        }
        uint64_t v32 = a5;
        do
        {
          if (v17 >= a4)
          {
            unsigned int v33 = *v32;
            unsigned int v34 = v31;
            do
            {
              *(void *)&v30[(v33 / (((unint64_t)v17 + v29) / v28)) >> 6] |= 1 << (v33 / (((unint64_t)v17 + v29) / v28));
              v33 += a4;
              --v34;
            }
            while (v34);
          }
          ++v32;
        }
        while (v32 != &a5[(void)a6]);
      }
      if (v78)
      {
        LODWORD(v35) = 0;
        uint64_t v36 = 8 * v78;
        unint64_t v37 = v30;
        do
        {
          int8x8_t v38 = *v37++;
          uint8x8_t v39 = (uint8x8_t)vcnt_s8(v38);
          v39.i16[0] = vaddlv_u8(v39);
          uint64_t v35 = (v35 + v39.i32[0]);
          v36 -= 8;
        }
        while (v36);
      }
      else
      {
        uint64_t v35 = 0;
      }
      unint64_t v22 = (v29 + v35 * v64) / v28;
      if (v30 != (int8x8_t *)v79) {
        free(v30);
      }
    }
  }
  sub_1CB8F1EEC((uint64_t)&v74, v68[0], -1);
  sub_1CB8F1EEC((uint64_t)&v72, v17, -1);
  sub_1CB8F1EEC((uint64_t)&v70, v17, 0);
  if (a6)
  {
    uint64_t v40 = &a5[(void)a6];
    unsigned int v41 = v71;
    if (v68[0] <= 1) {
      unsigned int v42 = 1;
    }
    else {
      unsigned int v42 = v68[0];
    }
    do
    {
      if (v17 >= a4)
      {
        unsigned int v43 = *a5;
        unsigned int v44 = v42;
        do
        {
          uint64_t v45 = 1 << v43;
          if (v41 > 0x40) {
            *(void *)(v70 + 8 * (v43 >> 6)) |= v45;
          }
          else {
            v70 |= v45;
          }
          v43 += a4;
          --v44;
        }
        while (v44);
      }
      ++a5;
    }
    while (a5 != v40);
  }
  if (a2 == 32)
  {
    *(void *)&v68[1] = sub_1CBBE5E30(v21, v65, (uint64_t)&v74, 1, 0);
    uint64_t v69 = v46;
    unsigned int v77 = a6;
    LODWORD(v78) = 0;
    sub_1CB90C9D4((uint64_t)&v77, (uint64_t)&v68[1]);
    if (__OFADD__(v22, v77)) {
      int v47 = (char *)(((uint64_t)((uint64_t)v77 + v22) >> 63) ^ 0x8000000000000000);
    }
    else {
      int v47 = (char *)v77 + v22;
    }
    uint64_t v48 = v21;
    uint64_t v49 = a3;
    int v50 = 0;
    int v51 = 1;
  }
  else
  {
    *(void *)&v68[1] = a6;
    LODWORD(v69) = 0;
    unsigned int v77 = (void *)sub_1CBBE5E30(v21, v65, (uint64_t)&v74, 0, 1);
    uint64_t v78 = v52;
    sub_1CB90C9D4((uint64_t)&v77, (uint64_t)&v68[1]);
    if (__OFADD__(v22, v77)) {
      int v47 = (char *)(((uint64_t)((uint64_t)v77 + v22) >> 63) ^ 0x8000000000000000);
    }
    else {
      int v47 = (char *)v77 + v22;
    }
    uint64_t v48 = v21;
    uint64_t v49 = a3;
    int v50 = 1;
    int v51 = 0;
  }
  unint64_t v53 = sub_1CBBE5E30(v48, v49, (uint64_t)&v70, v50, v51);
  if (__OFADD__(v47, v53)) {
    unint64_t v55 = ((uint64_t)&v47[v53] >> 63) ^ 0x8000000000000000;
  }
  else {
    unint64_t v55 = (unint64_t)&v47[v53];
  }
  if (a10)
  {
    Int8Ty = (llvm::FixedVectorType *)llvm::Type::getInt8Ty(*(llvm::Type **)a3, v54);
    int64_t v58 = (llvm::APIntOps *)(a11 ? &v70 : &v72);
    unint64_t v59 = sub_1CD42B708(a1, Int8Ty, a4, (llvm::Type *)v68[0], v58);
    if (__OFADD__(v55, v59)) {
      unint64_t v55 = ((uint64_t)(v55 + v59) >> 63) ^ 0x8000000000000000;
    }
    else {
      v55 += v59;
    }
    if (a11)
    {
      llvm::FixedVectorType::get(Int8Ty, v17);
      unint64_t v61 = sub_1CBC20CFC(a1, 0x1Cu, v60, a9, 0, 0, 0, 0, 0, 0, 0);
      if (__OFADD__(v55, v61)) {
        unint64_t v55 = ((uint64_t)(v55 + v61) >> 63) ^ 0x8000000000000000;
      }
      else {
        v55 += v61;
      }
    }
  }
  if (v71 >= 0x41 && v70) {
    MEMORY[0x1D25D9CB0](v70, 0x1000C8000313F17);
  }
  if (v73 >= 0x41 && v72) {
    MEMORY[0x1D25D9CB0](v72, 0x1000C8000313F17);
  }
  if (v75 >= 0x41 && v74) {
    MEMORY[0x1D25D9CB0](v74, 0x1000C8000313F17);
  }
  return v55;
}

unint64_t sub_1CD42C928(uint64_t a1, int a2, int a3, llvm::FixedVectorType *a4, uint64_t a5, uint64_t a6)
{
  llvm::VectorType::get(a4, (llvm::Type *)(*(unsigned int *)(a5 + 32) | ((unint64_t)(*(unsigned char *)(a5 + 8) == 19) << 32)));
  unsigned int v12 = (llvm::Type ***)v11;
  unint64_t v13 = sub_1CD42BEB4(a1, 0xDu, v11, a6);
  if (a3) {
    uint64_t v14 = 39;
  }
  else {
    uint64_t v14 = 40;
  }
  uint64_t v15 = sub_1CBC213DC(a1, v14, v12, (llvm::Type ***)a5, 0, a6, 0);
  v20[0] = v15;
  v20[1] = v16;
  if (a2)
  {
    unint64_t v17 = sub_1CBC20CFC(a1, 0x11u, (uint64_t)v12, a6, 0, 0, 0, 0, 0, 0, 0);
    uint64_t v21 = 2;
    int v22 = 0;
    sub_1CB90C9D4((uint64_t)v20, (uint64_t)&v21);
    uint64_t v15 = v20[0];
  }
  else
  {
    unint64_t v17 = 0;
  }
  unint64_t v18 = v13 + v17;
  if (__OFADD__(v13, v17)) {
    unint64_t v18 = ((uint64_t)(v13 + v17) >> 63) ^ 0x8000000000000000;
  }
  if (__OFADD__(v18, v15)) {
    return ((uint64_t)(v18 + v15) >> 63) ^ 0x8000000000000000;
  }
  else {
    return v18 + v15;
  }
}

uint64_t sub_1CD42CA84(uint64_t a1, uint64_t *a2)
{
  v20[4] = *MEMORY[0x1E4F143B8];
  int v4 = *((_DWORD *)a2 + 5);
  if ((v4 & 0x40000000) != 0)
  {
    uint64_t v6 = (char *)*(a2 - 1);
    uint64_t v5 = v4 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v5 = v4 & 0x7FFFFFF;
    uint64_t v6 = (char *)&a2[-4 * v5];
  }
  unint64_t v18 = v20;
  uint64_t v19 = 0x400000000;
  sub_1CB90CA80((uint64_t)&v18, v6, &v6[32 * v5]);
  uint64_t v7 = sub_1CBC1F4B0(a1, (llvm::ShuffleVectorInst *)a2, (uint64_t)v18, v19, 1);
  BOOL v9 = v7 < 0;
  if (v8) {
    BOOL v9 = v8 < 0;
  }
  if (!v9)
  {
    BOOL v10 = v8 < 1;
    if (!v8) {
      BOOL v10 = v7 < 1;
    }
    if (v10)
    {
      uint64_t v11 = 0;
      goto LABEL_13;
    }
  }
  int v12 = *((unsigned __int8 *)a2 + 16);
  if (v12 == 60)
  {
    uint64_t v11 = 4;
    goto LABEL_13;
  }
  uint64_t v14 = *a2;
  if (v12 == 84)
  {
    uint64_t v15 = *(a2 - 4);
    if (!v15
      || *(unsigned char *)(v15 + 16)
      || *(void *)(v15 + 24) != a2[9]
      || (sub_1CB9091FC(a1, (uint64_t ***)v15) & 1) != 0)
    {
      uint64_t v11 = 40;
      goto LABEL_13;
    }
    if (*(unsigned char *)(v14 + 8) == 16 && v14) {
      uint64_t v14 = **(void **)(v14 + 16);
    }
  }
  int v16 = *(_DWORD *)(v14 + 8);
  unsigned int v17 = v16;
  if (v14 && (v16 & 0xFE) == 0x12) {
    unsigned int v17 = *(unsigned __int8 *)(*(void *)(v14 + 24) + 8);
  }
  if (v17 >= 7) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = 3;
  }
LABEL_13:
  if (v18 != v20) {
    free(v18);
  }
  return v11;
}

void sub_1CD42CC2C()
{
}

void *sub_1CD42CC40(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25FC520;
  result[1] = v3;
  return result;
}

uint64_t sub_1CD42CC88(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25FC520;
  a2[1] = v2;
  return result;
}

void sub_1CD42CCB4(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC2098, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBC25B28;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCC2098, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD42CD24()
{
}

void sub_1CD42CD60()
{
}

BOOL sub_1CD42CDC8(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA61E880, memory_order_acquire) & 1) == 0)
  {
    uint64_t v5 = a1;
    int v4 = __cxa_guard_acquire(&qword_1EA61E880);
    a1 = v5;
    if (v4)
    {
      byte_1EA61E878 = 1;
      __cxa_guard_release(&qword_1EA61E880);
      a1 = v5;
    }
  }
  uint64_t v1 = *(unsigned __int16 **)(a1 + 16);
  if ((v1[10] & 4) == 0) {
    return 0;
  }
  unsigned int v3 = sub_1CBE52E5C(*v1);
  BOOL result = 0;
  if (v3 <= 0x29)
  {
    if (((1 << v3) & 0x10870) != 0)
    {
      return 1;
    }
    else if (((1 << v3) & 0x30030000000) != 0)
    {
      return byte_1EA61E878 != 0;
    }
  }
  return result;
}

BOOL sub_1CD42CEAC(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int16 **)(a1 + 16);
  if ((v1[10] & 4) == 0 || **(unsigned char **)(a1 + 32)) {
    return 0;
  }
  unsigned int v4 = sub_1CBE52E5C(*v1);
  if (v4 <= 0x29 && ((1 << v4) & 0x30030000000) != 0) {
    return 1;
  }
  if (v4 != 196) {
    return 0;
  }
  unsigned int v6 = sub_1CBDA6464(**(unsigned __int16 **)(a1 + 16), 0x2Fu);
  uint64_t v7 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v7 + 32 * v6 + 16) != 8) {
    return 0;
  }
  unint64_t v8 = *(unsigned int *)(v7 + 4);
  return (v8 - 1) > 0x826 || ((byte_1CDEF4514[v8 >> 3] >> (v8 & 7)) & 1) == 0;
}

BOOL sub_1CD42CF7C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if ((*(unsigned char *)(*(void *)(a1 + 16) + 20) & 4) == 0) {
    return 0;
  }
  int v5 = sub_1CBC2D2EC(a1, a2, (void *)(a3 + 8));
  if ((v5 - 1) < 2) {
    return 1;
  }
  if (v5 != 3 || sub_1CBE52E5C(**(unsigned __int16 **)(a1 + 16)) != 147) {
    return 0;
  }
  return *(unsigned char *)(*(void *)(a1 + 32) + 32 * sub_1CBDA6464(**(unsigned __int16 **)(a1 + 16), 0x11u)) == 0;
}

void sub_1CD42D00C(uint64_t a1, void *a2, uint64_t a3)
{
  if ((*(unsigned char *)(*(void *)(a1 + 16) + 20) & 4) != 0)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 40);
    if (v4)
    {
      uint64_t v7 = 0;
      while (1)
      {
        if (sub_1CD42CF7C(a1, v7, (uint64_t)a2))
        {
          uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 32) + 32 * v7 + 4);
          unsigned int v9 = *(unsigned __int16 *)(a2[14] + 2 * v8);
          unsigned int v10 = sub_1CBC2FEDC(a2, v8);
          if (v10 >= 0x10) {
            break;
          }
        }
LABEL_9:
        if (++v7 == v4) {
          return;
        }
      }
      unsigned int v11 = v9 >> 1;
      unsigned int v12 = v9 + (v10 >> 4);
      while (1)
      {
        unsigned int v16 = v11;
        uint64_t v13 = *(void *)(a3 + 24);
        if (!v13) {
          break;
        }
        (*(void (**)(uint64_t, unsigned int *))(*(void *)v13 + 48))(v13, &v16);
        v9 += 2;
        ++v11;
        if (v9 >= v12) {
          goto LABEL_9;
        }
      }
      sub_1CB920400();
      sub_1CD42D100(v14, v15);
    }
  }
}

void sub_1CD42D100(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  sub_1CBE52E5C(a1[4]);
  unsigned int v4 = 0;
  uint64_t v7 = (char *)&v8 + 8;
  uint64_t v9 = 0x1A00000019;
  long long v8 = xmmword_1CDC7F720;
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x400000000;
  for (uint64_t i = 16; i != 32; i += 4)
  {
    unsigned int v6 = sub_1CBDA6464(*((unsigned __int16 *)a1 + 8), *(unsigned __int16 *)((char *)&v7 + i));
    if (!*(unsigned char *)(*(void *)(*(void *)a1 + 32) + 32 * v6))
    {
      if (v4 >= *(_DWORD *)(a2 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a2 + 4 * v4) = v6;
      unsigned int v4 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 8) = v4;
    }
  }
  if (v7 != (char *)&v8 + 8) {
    free(v7);
  }
}

BOOL sub_1CD42D240(uint64_t *a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  sub_1CBC2EAB8(a1, a2, a3, a4, a5, &v7);
  int v5 = v8;
  if (v7 != v9) {
    free(v7);
  }
  return v5 != 0;
}

void *sub_1CD42D2C0(void *a1, unsigned int a2)
{
  if (a2 <= 0x10)
  {
    *a1 = 1;
LABEL_3:
    uint64_t v2 = a1 + 1;
    size_t v3 = 64;
    goto LABEL_4;
  }
  *(_DWORD *)a1 &= ~1u;
  uint64_t v5 = a2;
  size_t v7 = 4 * a2;
  int v8 = a1;
  uint64_t v2 = operator new(v7, (std::align_val_t)4uLL);
  a1 = v8;
  v8[1] = v2;
  void v8[2] = v5;
  int v6 = *(_DWORD *)v8;
  *int v8 = *(_DWORD *)v8 & 1;
  if (v6) {
    goto LABEL_3;
  }
  size_t v3 = v7;
LABEL_4:

  return memset(v2, 255, v3);
}

uint64_t sub_1CD42D360(uint64_t result, unsigned int a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)result + 8 * v3) = a2 | (unint64_t)(a3 << 32);
  ++*(_DWORD *)(result + 8);
  return result;
}

void *sub_1CD42D3D4(void *result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(_DWORD *)result;
  unsigned int v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 == 28) {
    int v4 = 64;
  }
  else {
    int v4 = 1 << (33 - v3);
  }
  if (v2 >= 2) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if ((v2 & 1) != 0 && v5 < 0x11)
  {
    *BOOL result = 1;
    int v6 = result + 1;
    size_t v7 = 64;
LABEL_10:
    return memset(v6, 255, v7);
  }
  if ((v2 & 1) == 0)
  {
    if (v5 == *((_DWORD *)result + 4))
    {
      *BOOL result = 0;
      if (!v5) {
        return result;
      }
      int v6 = (void *)result[1];
      size_t v7 = 4 * v5;
      goto LABEL_10;
    }
    MEMORY[0x1D25D9CD0](result[1], 4);
  }

  return sub_1CD42D2C0(v1, v5);
}

void sub_1CD42D4BC()
{
}

void sub_1CD42D510(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC20B0, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBC3130C;
    v3[1] = &v1;
    unsigned int v2 = v3;
    std::__call_once(&qword_1EBCC20B0, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD42D580(uint64_t a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::TargetPassConfig::ID);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&unk_1EA61EFE3);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)&unk_1EA61EFE3);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&unk_1EA61EFE4);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)&unk_1EA61EFE4);

  llvm::MachineFunctionPass::getAnalysisUsage(a1, (uint64_t)this);
}

uint64_t sub_1CD42D620(uint64_t a1)
{
  sub_1CB8483A0(a1, (uint64_t)&unk_1EBCC20A8);
  *(void *)unsigned int v2 = &unk_1F25FC7A8;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v2);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC20B0, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CBC3130C;
    v6[1] = &PassRegistry;
    unsigned int v5 = v6;
    std::__call_once(&qword_1EBCC20B0, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CD42D6D8()
{
}

void sub_1CD42D6F0(llvm::Pass *a1)
{
  sub_1CBA0E6AC(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD42D728()
{
}

void sub_1CD42D764(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC2240, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBC35910;
    v3[1] = &v1;
    unsigned int v2 = v3;
    std::__call_once(&qword_1EBCC2240, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD42D7D4(uint64_t a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::TargetPassConfig::ID);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&unk_1EA61EFE3);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)&unk_1EA61EFE3);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&unk_1EA61EFE4);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)&unk_1EA61EFE4);

  llvm::MachineFunctionPass::getAnalysisUsage(a1, (uint64_t)this);
}

uint64_t sub_1CD42D874(uint64_t a1)
{
  sub_1CB8483A0(a1, (uint64_t)&unk_1EBCC2238);
  *(void *)unsigned int v2 = &unk_1F25FC890;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v2);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC2240, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CBC35910;
    v6[1] = &PassRegistry;
    unsigned int v5 = v6;
    std::__call_once(&qword_1EBCC2240, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CD42D92C()
{
}

void sub_1CD42D944(llvm::Pass *a1)
{
  sub_1CBA0E6AC(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD42D97C()
{
}

uint64_t sub_1CD42D9B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  if (**(_WORD **)(a3 + 16) != 204) {
    return 0;
  }
  if (*(_DWORD *)(a3 + 40) != 4) {
    return 0;
  }
  int v4 = *(_DWORD **)(a3 + 32);
  unsigned int v5 = *(_DWORD **)(a1 + 8);
  **(_DWORD **)a1 = v4[9];
  _DWORD *v5 = v4[17];
  unint64_t v6 = sub_1CC73C9C0(v4[25], a2);
  if (!v7) {
    return 0;
  }
  **(void **)(a1 + 16) = v6;
  return 1;
}

void sub_1CD42DA40()
{
}

void sub_1CD42DA7C()
{
}

uint64_t sub_1CD42DACC(int32x2_t *a1, char *a2)
{
  char v7 = 0;
  uint64_t result = sub_1CBB23CC4((uint64_t)a1, a2, &v7);
  if (result)
  {
    *char v7 = -8192;
    a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  }
  unsigned int v5 = (char *)a1[4];
  int64_t v6 = v5 - (a2 + 8);
  if (v5 != a2 + 8) {
    uint64_t result = (uint64_t)memmove(a2, a2 + 8, v5 - (a2 + 8));
  }
  a1[4] = (int32x2_t)&a2[v6];
  return result;
}

unint64_t *sub_1CD42DB54(unint64_t *a1)
{
  unint64_t v2 = *a1;
  if (*a1)
  {
    *a1 = v2 & 0xFC00000000000000 | (2 * ~(-1 << (v2 >> 58))) | 1;
  }
  else
  {
    unsigned int v3 = *(void **)v2;
    uint64_t v4 = *(unsigned int *)(v2 + 8);
    if (v4) {
      memset(*(void **)v2, 255, 8 * v4);
    }
    if ((*(_DWORD *)(v2 + 64) & 0x3F) != 0) {
      v3[v4 - 1] &= ~(-1 << (*(_DWORD *)(v2 + 64) & 0x3F));
    }
  }
  return a1;
}

void sub_1CD42DBEC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(*(void *)v8 + 40);
  GlobalVariable = (llvm::GlobalValue *)llvm::Module::getGlobalVariable(v9, "agc.ria.ray_core_data", 0x15uLL, 0);
  uint64_t v11 = llvm::Module::getGlobalVariable(v9, "agc.ria.ray_extended_data", 0x19uLL, 0);
  if (!GlobalVariable) {
    return;
  }
  uint64_t v74 = (llvm::GlobalValue *)v11;
  if (v11) {
    int v12 = a4;
  }
  else {
    int v12 = 0;
  }
  uint64_t v13 = *(void *)(v8 + 344);
  uint64_t v14 = sub_1CBB35BE4(*(void *)(v8 + 16));
  unsigned int v75 = sub_1CD1117B0(GlobalVariable, 0, v13, v14 << 32);
  long long v79 = &unk_1F261CD58;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v70 = 0u;
  long long v83 = 0u;
  sub_1CC734E30(&v79, v8);
  *(void *)&long long v82 = a2;
  *((void *)&v82 + 1) = a3;
  uint64_t v15 = *(void *)(a1 + 512);
  if (v15) {
    int v16 = v12;
  }
  else {
    int v16 = 0;
  }
  if (v16 == 1)
  {
    unsigned int v17 = *(int **)(v15 + 32);
    int v18 = *v17;
    if (*v17 == 7)
    {
      int v68 = v17[1];
      long long v70 = *(_OWORD *)(v17 + 2);
      uint64_t v65 = *((void *)v17 + 3);
      goto LABEL_13;
    }
    sub_1CBA05F5C((uint64_t)v84, v15);
    uint64_t v90 = &off_1E66AF580;
    int v91 = 2;
    unint64_t v59 = (llvm::MachineFunction *)sub_1CC739C54(v84, 0x13u, (unint64_t *)&v90, 1, 0, 0, 0);
    unint64_t v61 = v60;
    int v62 = v17[1];
    int v63 = *v17 & 0xFFF00;
    uint64_t v87 = 0;
    uint64_t v88 = 0;
    uint64_t v89 = 0;
    v86[0] = v63;
    v86[1] = v62;
    llvm::MachineInstr::addOperand(v60, v59, (const llvm::MachineOperand *)v86);
    unsigned int v64 = *(_DWORD *)(a1 + 336);
    if (v64 >= *(_DWORD *)(a1 + 340)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 328) + 8 * v64) = v61;
    ++*(_DWORD *)(a1 + 336);
    int v68 = *(_DWORD *)(*((void *)v61 + 4) + 4);
    v84[0] = &unk_1F261CD58;
    if (v85) {
      llvm::MetadataTracking::untrack((uint64_t)&v85, v85);
    }
    int v18 = 0;
  }
  else
  {
    int v18 = 0;
    int v68 = 0;
  }
  uint64_t v65 = 0;
LABEL_13:
  int v67 = v18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC2408, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC2408))
  {
    qword_1EBCC2400 = 1024;
    __cxa_guard_release(&qword_1EBCC2408);
  }
  uint64_t v19 = *(void *)(a1 + 608);
  uint64_t v20 = *(unsigned int *)(a1 + 624);
  uint64_t v21 = (void *)(v19 + 16 * v20);
  if (*(_DWORD *)(a1 + 616))
  {
    if (v20)
    {
      uint64_t v22 = 16 * v20;
      unsigned int v23 = *(void **)(a1 + 608);
      while ((*v23 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v23 += 2;
        v22 -= 16;
        if (!v22) {
          goto LABEL_19;
        }
      }
    }
    else
    {
      unsigned int v23 = *(void **)(a1 + 608);
    }
  }
  else
  {
LABEL_19:
    unsigned int v23 = (void *)(v19 + 16 * v20);
  }
  uint64_t v73 = (uint64_t)GlobalVariable;
  uint64_t v24 = (void *)(v19 + 16 * v20);
  if (v23 == v24)
  {
    unsigned int v26 = 0;
    uint64_t v31 = -1;
  }
  else
  {
    unint64_t v25 = 0;
    LOBYTE(v26) = 0;
    do
    {
      unint64_t v27 = sub_1CB8F20C0(v23[1]);
      if (v25 <= v27) {
        unint64_t v25 = v27;
      }
      uint64_t v28 = (1 << *(unsigned char *)(v23[1] + 34)) | *(void *)(v23[1] + 8);
      unsigned __int8 v29 = 63 - __clz(v28 & -v28);
      if (v26 <= v29) {
        unsigned int v26 = v29;
      }
      else {
        unsigned int v26 = v26;
      }
      unint64_t v30 = v23 + 2;
      unsigned int v23 = v21;
      if (v30 != v21)
      {
        unsigned int v23 = v30;
        while ((*v23 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v23 += 2;
          if (v23 == v21)
          {
            unsigned int v23 = v21;
            break;
          }
        }
      }
    }
    while (v23 != v24);
    uint64_t v31 = v25 - 1;
  }
  unint64_t v32 = ((1 << v26) + v31) & -(1 << v26);
  if (qword_1EBCC2400 < v32) {
    LODWORD(v32) = qword_1EBCC2400;
  }
  unsigned int v69 = v32;
  if (v26 > 1) {
    int v33 = v16;
  }
  else {
    int v33 = 0;
  }
  int v34 = sub_1CBC57248((uint64_t)&v79, a1 + 328);
  int v35 = sub_1CBC586EC((uint64_t)&v79, a1 + 328, v75);
  int v36 = v34;
  int v37 = sub_1CBC57398((uint64_t)&v79, a1 + 328, v34);
  int v38 = sub_1CBC586EC((uint64_t)&v79, a1 + 328, 0x20000u);
  int v39 = v37;
  int v40 = sub_1CBC58828((uint64_t)&v79, a1 + 328, v37, 0x20u, v35);
  int v72 = v33;
  int v66 = v36;
  if (v33)
  {
    uint64_t v41 = *(void *)(v8 + 344);
    uint64_t v42 = sub_1CBB35BE4(*(void *)(v8 + 16));
    unsigned int v43 = sub_1CD1117B0(v74, 0, v41, v42 << 32);
    int v44 = sub_1CBC586EC((uint64_t)&v79, a1 + 328, v43);
    int v45 = sub_1CBC57508((uint64_t)&v79, a1 + 328, v36);
    v76[0] = v67;
    v76[1] = v68;
    long long v77 = v70;
    uint64_t v78 = v65;
    int v71 = sub_1CBC58F9C((uint64_t)&v79, a1 + 328, v39, (const llvm::MachineOperand *)v76, v44);
  }
  else
  {
    int v45 = sub_1CBC57508((uint64_t)&v79, a1 + 328, v36);
    int v71 = 0;
  }
  int v46 = v40;
  int v47 = sub_1CBC58A00((uint64_t)&v79, a1 + 328, v38, v40);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC2410, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC2410))
  {
    byte_1EBCC23E9 = 0;
    __cxa_guard_release(&qword_1EBCC2410);
  }
  uint64_t v48 = *(void *)(v8 + 48);
  if (!v48)
  {
    uint64_t v48 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v8 + 8) + 216))(*(void *)(v8 + 8), v8 + 128, v8);
    *(void *)(v8 + 48) = v48;
  }
  if (byte_1EBCC23E9 || !*(unsigned char *)(v48 + 561))
  {
    int v49 = 0;
    int v50 = 0;
  }
  else
  {
    int v50 = sub_1CBC586EC((uint64_t)&v79, a1 + 328, v75 + 0x40000);
    int v49 = 1;
  }
  sub_1CBC2E7FC((uint64_t)&v79, 2u);
  unsigned int v53 = *(_DWORD *)(a1 + 336);
  if (v53 >= *(_DWORD *)(a1 + 340)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a1 + 328) + 8 * v53) = v51;
  ++*(_DWORD *)(a1 + 336);
  sub_1CBC57DDC(a1, &v79, v46, v45, 0x20u, 5, v73, v52);
  sub_1CBC57DDC(a1, &v79, v47, v45, 0x20u, 5, v73, v54);
  if (v49)
  {
    int v56 = sub_1CBB35BE4(*(void *)(v8 + 16));
    unsigned int RaySidebandSizePerRay = llvm::GPUBaseInfo::getRaySidebandSizePerRay(v56);
    sub_1CBC57DDC(a1, &v79, v50, v66, RaySidebandSizePerRay, 63 - __clz(RaySidebandSizePerRay), v73, v58);
  }
  if (v72) {
    sub_1CBC57DDC(a1, &v79, v71, v45, v69, v26, (uint64_t)v74, v55);
  }
  long long v79 = &unk_1F261CD58;
  if (*((void *)&v81 + 1)) {
    llvm::MetadataTracking::untrack((uint64_t)&v81 + 8, *((unsigned __int8 **)&v81 + 1));
  }
}

void sub_1CD42E2D8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int RaySidebandSizePerRay, int a6)
{
  int v12 = *(uint64_t **)(a2 + 32);
  uint64_t GlobalVariable = llvm::Module::getGlobalVariable(*(void *)(*v12 + 40), (unsigned __int8 *)off_1E66AFA28[a4 - 1], qword_1CDC7F8F0[a4 - 1], 0);
  if (GlobalVariable)
  {
    uint64_t v14 = (llvm::GlobalValue *)GlobalVariable;
    unint64_t v30 = &unk_1F261CD58;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    sub_1CC734E30(&v30, (uint64_t)v12);
    *(void *)&long long v33 = a2;
    *((void *)&v33 + 1) = a3;
    if (a4 == 1)
    {
      uint64_t v16 = v12[43];
      uint64_t v17 = sub_1CBB35BE4(v12[2]);
      unsigned int v18 = sub_1CD1117B0(v14, 0, v16, v17 << 32);
      int v19 = sub_1CBC586EC((uint64_t)&v30, a1 + 328, v18);
      int v20 = sub_1CBC57248((uint64_t)&v30, a1 + 328);
      int v21 = sub_1CBC58828((uint64_t)&v30, a1 + 328, v20, RaySidebandSizePerRay, v19);
      sub_1CBC58278(a1, &v30, v21, RaySidebandSizePerRay, (uint64_t)v14, v22);
      int v23 = sub_1CBC586EC((uint64_t)&v30, a1 + 328, 0x20000u);
      int v24 = sub_1CBC58A00((uint64_t)&v30, a1 + 328, v23, v21);
      sub_1CBC58278(a1, &v30, v24, 32, (uint64_t)v14, v25);
      if (!a6) {
        goto LABEL_7;
      }
      int v26 = sub_1CBB35BE4(v12[2]);
      unsigned int RaySidebandSizePerRay = llvm::GPUBaseInfo::getRaySidebandSizePerRay(v26);
      int v27 = sub_1CBC586EC((uint64_t)&v30, a1 + 328, v18 + 0x40000);
      int v28 = sub_1CBC57248((uint64_t)&v30, a1 + 328);
      int v29 = sub_1CBC58828((uint64_t)&v30, a1 + 328, v28, RaySidebandSizePerRay, v27);
    }
    else
    {
      int v29 = *(_DWORD *)(a1 + 504);
    }
    sub_1CBC58278(a1, &v30, v29, RaySidebandSizePerRay, (uint64_t)v14, v15);
LABEL_7:
    unint64_t v30 = &unk_1F261CD58;
    if (*((void *)&v32 + 1)) {
      llvm::MetadataTracking::untrack((uint64_t)&v32 + 8, *((unsigned __int8 **)&v32 + 1));
    }
  }
}

BOOL sub_1CD42E4F4(uint64_t a1, int a2, char a3)
{
  unint64_t v3 = *(void *)(a1 + 8 * a2);
  if (v3)
  {
    if (v3 >> 58)
    {
      uint64_t v4 = (1 << a3) & (v3 >> 1) & ~(-1 << (v3 >> 58));
      return v4 != 0;
    }
    return 0;
  }
  if (!*(_DWORD *)(v3 + 64)) {
    return 0;
  }
  uint64_t v4 = **(void **)v3 & (1 << a3);
  return v4 != 0;
}

uint64_t sub_1CD42E550(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  int v38 = 0;
  uint64_t v39 = 0;
  unsigned int v40 = 0;
  uint64_t v8 = *(void *)(a1 + 416);
  uint64_t v9 = 424;
  if (v8 == *(void *)(a1 + 408)) {
    uint64_t v9 = 428;
  }
  uint64_t v10 = *(unsigned int *)(a1 + v9);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    int v12 = *(uint64_t **)(a1 + 416);
    while ((unint64_t)*v12 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v12;
      v11 -= 8;
      if (!v11) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    int v12 = *(uint64_t **)(a1 + 416);
  }
  int v24 = (void *)(v8 + 8 * v10);
  if (v12 == v24)
  {
    LODWORD(v11) = 0;
LABEL_7:
    uint64_t v13 = 0;
    goto LABEL_8;
  }
  uint64_t v25 = *v12;
LABEL_27:
  uint64_t v37 = 0;
  uint64_t v26 = sub_1CBC58D94(a1, v25, a2, a3, a4);
  uint64_t v37 = v26;
  if (v26)
  {
    if (v40)
    {
      LODWORD(v31) = (v40 - 1) & ((v26 >> 4) ^ (v26 >> 9));
      unint64_t v30 = &v38[2 * v31];
      uint64_t v32 = *v30;
      if (v26 != *v30)
      {
        int v35 = 1;
        do
        {
          if (v32 == -4096)
          {
            unint64_t v30 = &v38[2 * v40];
            goto LABEL_45;
          }
          int v36 = v31 + v35++;
          uint64_t v31 = v36 & (v40 - 1);
          uint64_t v32 = v38[2 * v31];
        }
        while (v26 != v32);
        unint64_t v30 = &v38[2 * v31];
      }
    }
    else
    {
      unint64_t v30 = v38;
    }
LABEL_45:
    unsigned int v33 = sub_1CD42E844(a1, a2, v25);
    unsigned int v34 = v33;
    if (v30 != &v38[2 * v40])
    {
      if (*((_DWORD *)v30 + 2) <= v33) {
        unsigned int v34 = v33;
      }
      else {
        unsigned int v34 = *((_DWORD *)v30 + 2);
      }
    }
    *((_DWORD *)sub_1CBAEE230((uint64_t)&v38, &v37) + 2) = v34;
  }
  int v27 = (unint64_t *)(v12 + 1);
  while (v27 != v24)
  {
    unint64_t v28 = *v27++;
    uint64_t v25 = v28;
    if (v28 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      int v12 = (uint64_t *)(v27 - 1);
      goto LABEL_27;
    }
  }
  uint64_t v13 = v38;
  int v14 = v39;
  LODWORD(v11) = v40;
  if (!v39)
  {
LABEL_8:
    int v14 = 0;
    int8x8_t v15 = &v13[2 * v11];
    uint64_t v16 = v15;
    goto LABEL_9;
  }
  uint64_t v16 = &v38[2 * v40];
  if (v40)
  {
    uint64_t v29 = 0;
    while ((v38[v29] | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v29 += 2;
      if (2 * v40 == v29)
      {
        int8x8_t v15 = &v38[2 * v40];
        goto LABEL_9;
      }
    }
    int8x8_t v15 = &v38[v29];
  }
  else
  {
    int8x8_t v15 = v38;
  }
LABEL_9:
  uint64_t v17 = &v13[2 * v11];
  if (v15 == v17)
  {
    char v18 = 0;
  }
  else
  {
    char v18 = 0;
    do
    {
      uint64_t v19 = *v15;
      unsigned int v20 = *((_DWORD *)v15 + 2);
      if (a2 != 3 || sub_1CBC58E94(*(_DWORD *)(a1 + 504), *v15, *(void ****)(a1 + 304)))
      {
        uint64_t v22 = sub_1CBC58BAC(a1, v19, a2);
        sub_1CD42E2D8(a1, v19, v22, a2, v20, 0);
        char v18 = 1;
      }
      int v21 = v15 + 2;
      int8x8_t v15 = v16;
      if (v21 != v16)
      {
        int8x8_t v15 = v21;
        while ((*v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v15 += 2;
          if (v15 == v16)
          {
            int8x8_t v15 = v16;
            break;
          }
        }
      }
    }
    while (v15 != v17);
    int v14 = v39;
  }
  if (v14) {
    sub_1CD42E934(a1, (uint64_t)&v38, a2, a3, a4);
  }
  MEMORY[0x1D25D9CD0](v38, 8);
  return v18 & 1;
}

uint64_t sub_1CD42E844(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 == 1) {
    return 32;
  }
  uint64_t v6 = *(void *)(a1 + 608);
  uint64_t v7 = *(unsigned int *)(a1 + 624);
  uint64_t v8 = (uint64_t *)(v6 + 16 * v7);
  if (*(_DWORD *)(a1 + 616))
  {
    if (v7)
    {
      uint64_t v9 = 16 * v7;
      uint64_t v10 = *(uint64_t **)(a1 + 608);
      while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v10 += 2;
        v9 -= 16;
        if (!v9) {
          goto LABEL_9;
        }
      }
    }
    else
    {
      uint64_t v10 = *(uint64_t **)(a1 + 608);
    }
  }
  else
  {
LABEL_9:
    uint64_t v10 = (uint64_t *)(v6 + 16 * v7);
  }
  uint64_t v11 = (uint64_t *)(v6 + 16 * v7);
  unint64_t v3 = 32;
LABEL_11:
  while (v10 != v11)
  {
    if (*(void *)(*v10 + 24) == a3)
    {
      unint64_t v12 = sub_1CB8F20C0(v10[1]);
      if (v3 <= v12) {
        unint64_t v3 = v12;
      }
    }
    uint64_t v13 = v10 + 2;
    uint64_t v10 = v8;
    if (v13 != v8)
    {
      uint64_t v10 = v13;
      while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v10 += 2;
        if (v10 == v8)
        {
          uint64_t v10 = v8;
          goto LABEL_11;
        }
      }
    }
  }
  return v3;
}

void sub_1CD42E934(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC2438, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC2438))
  {
    byte_1EBCC23EC = 0;
    __cxa_guard_release(&qword_1EBCC2438);
  }
  if (byte_1EBCC23EC) {
    return;
  }
  uint64_t v10 = *(unsigned int *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8))
  {
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      uint64_t v12 = 16 * v10;
      uint64_t v13 = *(uint64_t **)a2;
      while (1)
      {
        uint64_t v14 = *v13;
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          break;
        }
        v13 += 2;
        v12 -= 16;
        if (!v12)
        {
          uint64_t v14 = *(void *)(*(void *)a2 + 16 * v10);
          break;
        }
      }
      uint64_t v15 = *(void *)(v14 + 32);
      uint64_t v16 = *(void *)(v15 + 328);
      uint64_t v17 = *(void *)a2;
      while ((*(void *)v17 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v17 += 16;
        v11 -= 16;
        if (!v11)
        {
          uint64_t v17 = *(void *)a2 + 16 * v10;
          goto LABEL_16;
        }
      }
      goto LABEL_16;
    }
    uint64_t v17 = *(void *)a2;
  }
  else
  {
    uint64_t v17 = *(void *)a2 + 16 * v10;
  }
  uint64_t v15 = *(void *)(*(void *)v17 + 32);
  uint64_t v16 = *(void *)(v15 + 328);
  uint64_t v10 = v10;
LABEL_16:
  if (v17 != *(void *)a2 + 16 * v10) {
    llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator();
  }
  uint64_t v18 = sub_1CBC58D94(a1, v16, a3, a4, a5);
  if (v18)
  {
    uint64_t v19 = v18;
    if (a3 != 3 || sub_1CBC58E94(*(_DWORD *)(a1 + 504), v18, *(void ****)(a1 + 304)))
    {
      uint64_t v32 = 0;
      uint64_t v33 = v19;
      if ((sub_1CBA0E618(a2, &v33, &v32) & 1) == 0)
      {
        uint64_t v20 = sub_1CBC58BAC(a1, v19, a3);
        if (a3 != 3) {
          goto LABEL_26;
        }
        uint64_t v21 = *(void *)(a1 + 608);
        uint64_t v22 = *(unsigned int *)(a1 + 624);
        int v23 = (void *)(v21 + 16 * v22);
        if (*(_DWORD *)(a1 + 616))
        {
          if (v22)
          {
            uint64_t v31 = 16 * v22;
            int v24 = *(void **)(a1 + 608);
            while ((*v24 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v24 += 2;
              v31 -= 16;
              if (!v31) {
                goto LABEL_24;
              }
            }
          }
          else
          {
            int v24 = *(void **)(a1 + 608);
          }
        }
        else
        {
LABEL_24:
          int v24 = (void *)(v21 + 16 * v22);
        }
        uint64_t v25 = (void *)(v21 + 16 * v22);
        if (v24 != v25)
        {
          unint64_t v26 = 32;
          do
          {
            unint64_t v29 = sub_1CB8F20C0(v24[1]);
            if (v26 <= v29) {
              unint64_t v26 = v29;
            }
            unint64_t v30 = v24 + 2;
            int v24 = v23;
            if (v30 != v23)
            {
              int v24 = v30;
              while ((*v24 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v24 += 2;
                if (v24 == v23)
                {
                  int v24 = v23;
                  break;
                }
              }
            }
          }
          while (v24 != v25);
        }
        else
        {
LABEL_26:
          LODWORD(v26) = 32;
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC2440, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_1EBCC2440))
        {
          byte_1EBCC23ED = 0;
          __cxa_guard_release(&qword_1EBCC2440);
        }
        uint64_t v27 = *(void *)(v15 + 48);
        if (!v27)
        {
          uint64_t v27 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v15 + 8) + 216))(*(void *)(v15 + 8), v15 + 128, v15);
          *(void *)(v15 + 48) = v27;
        }
        BOOL v28 = 0;
        if (a3 == 1 && !byte_1EBCC23ED) {
          BOOL v28 = *(unsigned char *)(v27 + 561) != 0;
        }
        sub_1CD42E2D8(a1, v19, v20, a3, v26, v28);
      }
    }
  }
}

uint64_t sub_1CD42EC84(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC2448, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC2448))
  {
    byte_1EBCC23EE = a3;
    __cxa_guard_release(&qword_1EBCC2448);
  }
  if (byte_1EBCC23EE) {
    return 0;
  }
  uint64_t v7 = (void *)a2[40];
  if (((v7[12] - v7[11]) & 0x7FFFFFFF8) != 0) {
    return 0;
  }
  uint64_t v8 = v7 + 6;
  unint64_t v9 = v7[6] & 0xFFFFFFFFFFFFFFF8;
  if (v7 + 6 == (void *)v9) {
    return 0;
  }
  if (!v9 || (*(unsigned char *)v9 & 4) == 0)
  {
    while ((*(_WORD *)(v9 + 44) & 4) != 0)
      unint64_t v9 = *(void *)v9 & 0xFFFFFFFFFFFFFFF8;
  }
  if (**(_WORD **)(v9 + 16) != 623) {
    return 0;
  }
  uint64_t GlobalVariable = (llvm::GlobalValue *)llvm::Module::getGlobalVariable(*(void *)(*a2 + 40), "agc.ria.ray_core_data", 0x15uLL, 0);
  int v47 = &unk_1F261CD58;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  sub_1CC734E30(&v47, (uint64_t)a2);
  unint64_t v11 = *v8 & 0xFFFFFFFFFFFFFFF8;
  if (!v11 || (*(unsigned char *)v11 & 4) == 0)
  {
    while ((*(_WORD *)(v11 + 44) & 4) != 0)
      unint64_t v11 = *(void *)v11 & 0xFFFFFFFFFFFFFFF8;
  }
  while ((void *)v11 != v8)
  {
    uint64_t v12 = *(unsigned __int16 **)(v11 + 16);
    uint64_t v13 = *((void *)v12 + 1);
    if ((*(_WORD *)(v11 + 44) & 0xC) != 0 && (*(_WORD *)(v11 + 44) & 4) == 0)
    {
      unint64_t v16 = v11;
      if ((v13 & 0x80) != 0) {
        goto LABEL_36;
      }
      while ((*(_WORD *)(v16 + 44) & 8) != 0)
      {
        unint64_t v16 = *(void *)(v16 + 8);
        if ((*(unsigned char *)(*(void *)(v16 + 16) + 8) & 0x80) != 0) {
          goto LABEL_36;
        }
      }
    }
    else if ((v13 & 0x80) != 0)
    {
      goto LABEL_36;
    }
    uint64_t v15 = sub_1CBE52E8C(*v12);
    if ((v15 & 0xFF00000000) != 0 && (v15 == 98 || v15 == 192))
    {
LABEL_36:
      uint64_t v17 = (uint64_t *)(v11 + 8);
      goto LABEL_38;
    }
    unint64_t v11 = *(void *)v11 & 0xFFFFFFFFFFFFFFF8;
    if (!v11 || (*(unsigned char *)v11 & 4) == 0)
    {
      while ((*(_WORD *)(v11 + 44) & 4) != 0)
        unint64_t v11 = *(void *)v11 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  uint64_t v17 = v7 + 7;
LABEL_38:
  uint64_t v18 = *v17;
  *(void *)&long long v50 = v7;
  *((void *)&v50 + 1) = v18;
  uint64_t v19 = a2[43];
  uint64_t v20 = sub_1CBB35BE4(a2[2]);
  uint64_t v46 = (uint64_t)GlobalVariable;
  int v21 = sub_1CD1117B0(GlobalVariable, 0, v19, v20 << 32);
  int v22 = sub_1CBC586EC((uint64_t)&v47, a1 + 328, v21 + 0x20000);
  int v56 = &off_1E66AF970;
  int v57 = 2;
  int v23 = (llvm::MachineFunction *)sub_1CC739C54(&v47, 0x1A42u, (unint64_t *)&v56, 1, 0, 0, 0);
  uint64_t v25 = v24;
  LODWORD(v52) = 1;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  llvm::MachineInstr::addOperand(v24, v23, (const llvm::MachineOperand *)&v52);
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v52 = 0x2600000000;
  uint64_t v55 = 0;
  llvm::MachineInstr::addOperand(v25, v23, (const llvm::MachineOperand *)&v52);
  LODWORD(v52) = 1;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  llvm::MachineInstr::addOperand(v25, v23, (const llvm::MachineOperand *)&v52);
  unsigned int v26 = *(_DWORD *)(a1 + 336);
  if (v26 >= *(_DWORD *)(a1 + 340)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a1 + 328) + 8 * v26) = v25;
  ++*(_DWORD *)(a1 + 336);
  int v56 = &off_1E66AF970;
  int v57 = 2;
  uint64_t v27 = (llvm::MachineFunction *)sub_1CC739C54(&v47, 0x15FAu, (unint64_t *)&v56, 1, 0, 0, 0);
  unint64_t v29 = v28;
  LODWORD(v52) = 1;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  llvm::MachineInstr::addOperand(v28, v27, (const llvm::MachineOperand *)&v52);
  LODWORD(v52) = 1;
  uint64_t v53 = 0;
  uint64_t v54 = 4095;
  llvm::MachineInstr::addOperand(v29, v27, (const llvm::MachineOperand *)&v52);
  unsigned int v30 = *(_DWORD *)(a1 + 336);
  if (v30 >= *(_DWORD *)(a1 + 340)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a1 + 328) + 8 * v30) = v29;
  ++*(_DWORD *)(a1 + 336);
  int v56 = &off_1E66AF970;
  int v57 = 2;
  uint64_t v31 = (llvm::MachineFunction *)sub_1CC739C54(&v47, 0x194u, (unint64_t *)&v56, 1, 0, 0, 0);
  uint64_t v33 = v32;
  LODWORD(v52) = 1;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  llvm::MachineInstr::addOperand(v32, v31, (const llvm::MachineOperand *)&v52);
  int v34 = *(_DWORD *)(*((void *)v25 + 4) + 4);
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  LODWORD(v52) = 0;
  HIDWORD(v52) = v34;
  uint64_t v55 = 0;
  llvm::MachineInstr::addOperand(v33, v31, (const llvm::MachineOperand *)&v52);
  LODWORD(v52) = 1;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  llvm::MachineInstr::addOperand(v33, v31, (const llvm::MachineOperand *)&v52);
  int v35 = *(_DWORD *)(*((void *)v29 + 4) + 4);
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  LODWORD(v52) = 0;
  HIDWORD(v52) = v35;
  uint64_t v55 = 0;
  llvm::MachineInstr::addOperand(v33, v31, (const llvm::MachineOperand *)&v52);
  LODWORD(v52) = 1;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  llvm::MachineInstr::addOperand(v33, v31, (const llvm::MachineOperand *)&v52);
  unsigned int v36 = *(_DWORD *)(a1 + 336);
  if (v36 >= *(_DWORD *)(a1 + 340)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a1 + 328) + 8 * v36) = v33;
  ++*(_DWORD *)(a1 + 336);
  int v37 = *(_DWORD *)(*((void *)v33 + 4) + 4);
  if (a3)
  {
    int v38 = sub_1CBC57398((uint64_t)&v47, a1 + 328, v37);
    int v39 = sub_1CBC57508((uint64_t)&v47, a1 + 328, *(_DWORD *)(*((void *)v33 + 4) + 4));
    int v40 = sub_1CBC58828((uint64_t)&v47, a1 + 328, v38, 0x20u, v22);
    sub_1CBC2E7FC((uint64_t)&v47, 2u);
    unsigned int v43 = *(_DWORD *)(a1 + 336);
    if (v43 >= *(_DWORD *)(a1 + 340)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 328) + 8 * v43) = v41;
    ++*(_DWORD *)(a1 + 336);
    sub_1CBC57DDC(a1, &v47, v40, v39, 0x20u, 5, v46, v42);
  }
  else
  {
    int v44 = sub_1CBC58828((uint64_t)&v47, a1 + 328, v37, 0x20u, v22);
    sub_1CBC58278(a1, &v47, v44, 32, v46, v45);
  }
  sub_1CBC56CB4(a1);
  int v47 = &unk_1F261CD58;
  if (*((void *)&v49 + 1)) {
    llvm::MetadataTracking::untrack((uint64_t)&v49 + 8, *((unsigned __int8 **)&v49 + 1));
  }
  return 1;
}

uint64_t sub_1CD42F2AC()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  int v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = v0;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = v0 + 256;
  sub_1CBC5C920((uint64_t)v16, v5, *(_DWORD *)(v0 + 248), *(void *)(v0 + 320), v0 + 256);
  sub_1CBC555EC((unint64_t)v16);
  uint64_t v13 = v15;
  uint64_t v14 = 0x1000000000;
  v15[16] = v6;
  v15[17] = v8;
  sub_1CBC55E4C((uint64_t)&v13);
  if (v4) {
    uint64_t v4 = sub_1CD42E550(v7, 1, (uint64_t)v16, (uint64_t *)&v13);
  }
  if (v2 && *(unsigned char *)(v7 + 508)) {
    uint64_t v4 = v4 | sub_1CD42E550(v7, 3, (uint64_t)v16, (uint64_t *)&v13);
  }
  sub_1CBC56CB4(v7);
  unint64_t v9 = v13;
  if (v14)
  {
    uint64_t v10 = 8 * v14;
    unint64_t v11 = (char *)v13 - 8;
    do
    {
      sub_1CB9F9ED4((void ***)&v11[v10]);
      v10 -= 8;
    }
    while (v10);
    unint64_t v9 = v13;
  }
  if (v9 != v15) {
    free(v9);
  }
  sub_1CBC5CCFC((uint64_t)v16);
  return v4;
}

void sub_1CD42F414(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EA618B08, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBC5BB00;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EA618B08, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD42F484()
{
}

uint64_t sub_1CD42F4C0(uint64_t a1)
{
  sub_1CD42FD70(a1);
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v2);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EA618B08, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CBC5BB00;
    v6[1] = &PassRegistry;
    uint64_t v5 = v6;
    std::__call_once(&qword_1EA618B08, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CD42F550(llvm::Pass *a1)
{
  sub_1CBC5CE54(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD42F588(uint64_t a1, llvm::AnalysisUsage *a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, (uint64_t)a2);
  llvm::AnalysisUsage::addRequiredID(a2, llvm::AAResultsWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredID(a2, (char *)&llvm::MachineDominatorTree::ID);
  llvm::AnalysisUsage::addRequiredID(a2, (char *)&llvm::MachinePostDominatorTree::ID);
  llvm::AnalysisUsage::addRequiredID(a2, (char *)&llvm::SlotIndexes::ID);
  llvm::AnalysisUsage::addRequiredID(a2, (char *)&llvm::LiveIntervals::ID);
  llvm::AnalysisUsage::addRequiredID(a2, llvm::MachineLoopInfo::ID);
  sub_1CB843600((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1CB843600((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1CB843600((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)llvm::MachineLoopInfo::ID);

  llvm::AnalysisUsage::setPreservesCFG(a2);
}

void *sub_1CD42F670(void *a1)
{
  *a1 = &unk_1F25FCBE0;
  int v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F25FCC48;
  uint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }

  return sub_1CB87DD48(a1);
}

void *sub_1CD42F758(void *a1)
{
  *a1 = &unk_1F25FCC48;
  int v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CD42F7AC(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  int v12 = 0;
  uint64_t v8 = sub_1CD42FA04(a1 + 152, (void *)a1, a3, a4, a5, a6, &v12);
  if (v8) {
    return v8;
  }
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  uint64_t v9 = *(void *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v9 + 48))(v9, &v12);
    return v8;
  }
  sub_1CB920400();
  return sub_1CD42F840(v11);
}

uint64_t sub_1CD42F840(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

void sub_1CD42F858(void *a1)
{
  sub_1CD42F670(a1);

  JUMPOUT(0x1D25D9CE0);
}

unint64_t sub_1CD42F890(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t sub_1CD42F89C(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *sub_1CD42F8AC(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    int v3 = *((_DWORD *)result + 32);
LABEL_3:
    uint64_t v4 = &unk_1F25FCC98;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 148))
  {
    int v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3) {
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t sub_1CD42F930(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void *sub_1CD42F944(uint64_t a1, uint64_t a2)
{
  return sub_1CD42FB24((void *)(a1 + 152), a2);
}

void sub_1CD42F94C(void *a1)
{
  *a1 = &unk_1F25FCC48;
  int v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD42F9C0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CD42F9C8(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1CD42F9DC(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1CD42F9F0(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

uint64_t sub_1CD42FA04(uint64_t a1, void *a2, const void *a3, size_t a4, const void *a5, size_t a6, _DWORD *a7)
{
  uint64_t v8 = *(void *)(*(void *)(a1 + 8) + 24);
  if (v8) {
    a4 = a6;
  }
  if (v8) {
    a3 = a5;
  }
  uint64_t v11 = *(unsigned int *)(a1 + 24);
  if (v11)
  {
    uint64_t v13 = *(void *)(a1 + 16);
    while (*(void *)(v13 + 8) != a4 || a4 && memcmp(*(const void **)v13, a3, a4))
    {
      v13 += 48;
      if (!--v11) {
        goto LABEL_13;
      }
    }
    uint64_t result = 0;
    *a7 = *(_DWORD *)(v13 + 40);
  }
  else
  {
LABEL_13:
    __int16 v20 = 1283;
    v19[0] = (uint64_t)"Cannot find option named '";
    v19[2] = (uint64_t)a3;
    v19[3] = a4;
    uint64_t v17 = "'!";
    __int16 v18 = 259;
    uint64_t v14 = sub_1CB8F1E58(v19, (uint64_t *)&v17, (uint64_t)v21);
    uint64_t v15 = (llvm::raw_ostream *)llvm::errs((llvm *)v14);
    return llvm::cl::Option::error(a2, (llvm::Twine *)v21, 0, 0, v15);
  }
  return result;
}

BOOL sub_1CD42FAF8(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void *sub_1CD42FB24(void *result, uint64_t a2)
{
  if (!*(void *)(result[1] + 24))
  {
    int v3 = result;
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
    if (result)
    {
      int v4 = (int)result;
      uint64_t v5 = 0;
      do
      {
        uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*v3 + 24))(v3, v5);
        unint64_t v7 = *(unsigned int *)(a2 + 8);
        if (v7 >= *(unsigned int *)(a2 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v8 = (void *)(*(void *)a2 + 16 * v7);
        *uint64_t v8 = result;
        v8[1] = v6;
        ++*(_DWORD *)(a2 + 8);
        uint64_t v5 = (v5 + 1);
      }
      while (v4 != v5);
    }
  }
  return result;
}

void sub_1CD42FC18(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = *(void *)a1 + 536 * v4 - 536;
    uint64_t v6 = 536 * a2 - 536 * v4;
    do
    {
      unint64_t v7 = *(void **)(v5 + 264);
      if ((void *)(v5 + 280) != v7) {
        free(v7);
      }
      if ((*(unsigned char *)v5 & 1) == 0) {
        MEMORY[0x1D25D9CD0](*(void *)(v5 + 8), 8);
      }
      v5 -= 536;
      v6 += 536;
    }
    while (v6);
  }
  *(_DWORD *)(a1 + 8) = v2;
}

uint64_t sub_1CD42FCA4(uint64_t a1, unsigned int *a2)
{
  *(void *)a1 = 1;
  uint64_t v4 = a1 + 264;
  uint64_t v5 = 8;
  int64x2_t v6 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)(a1 + v5) = v6;
    v5 += 16;
  }
  while (v5 != 264);
  sub_1CBC5C570((unsigned int *)a1, a2);
  *(void *)(a1 + 264) = a1 + 280;
  *(void *)(a1 + 272) = 0x2000000000;
  if (a2[68]) {
    sub_1CBC5C65C(v4, (uint64_t)(a2 + 66));
  }
  return a1;
}

void sub_1CD42FD34()
{
}

double sub_1CD42FD70(uint64_t a1)
{
  sub_1CB8483A0(a1, (uint64_t)&unk_1EA618B00);
  *(void *)uint64_t v1 = &unk_1F25FCB20;
  *(void *)(v1 + 280) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 256) = 0u;
  *(_DWORD *)(v1 + 272) = 0;
  *(void *)(v1 + 328) = v1 + 344;
  *(void *)(v1 + 336) = 0x800000000;
  *(void *)(v1 + 408) = v1 + 440;
  *(void *)(v1 + 416) = v1 + 440;
  *(void *)(v1 + 424) = 8;
  *(_DWORD *)(v1 + 432) = 0;
  *(unsigned char *)(v1 + 504) = 0;
  *(unsigned char *)(v1 + 508) = 0;
  *(_OWORD *)(v1 + 512) = 0u;
  *(void *)(v1 + 528) = v1 + 544;
  *(void *)(v1 + 536) = 0x800000000;
  *(_OWORD *)(v1 + 608) = 0u;
  *(_DWORD *)(v1 + 624) = 0;
  *(void *)(v1 + 632) = v1 + 648;
  *(void *)(v1 + 640) = 0x800000000;
  *(_DWORD *)(v1 + 792) = 0;
  *(_OWORD *)(v1 + 776) = 0u;
  return result;
}

void sub_1CD42FE20(long long *a1, uint64_t a2, int **a3)
{
  sub_1CB883A14((uint64_t)qword_1EBCC2478, 0, 0);
  dword_1EBCC24F8 = 0;
  qword_1EBCC2500 = (uint64_t)&unk_1F25FCC98;
  *(void *)&dword_1EBCC2508 = 0;
  qword_1EBCC2478[0] = (uint64_t)&unk_1F25FCBE0;
  qword_1EBCC2510 = (uint64_t)&unk_1F25FCC48;
  qword_1EBCC2518 = (uint64_t)qword_1EBCC2478;
  qword_1EBCC2520 = (uint64_t)&unk_1EBCC2530;
  qword_1EBCC2528 = 0x800000000;
  qword_1EBCC26B0 = (uint64_t)&unk_1F25FCCD8;
  qword_1EBCC26C8 = (uint64_t)&qword_1EBCC26B0;
  sub_1CD42FF24(a1, a2, a3);

  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EBCC2478);
}

void sub_1CD42FF24(long long *a1, uint64_t a2, int **a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCC2478, "run-scs-lu", 0xAuLL);
  xmmword_1EBCC2498 = *a1;
  sub_1CD43001C(*(void *)a2, *(_DWORD *)(a2 + 8));
  int64x2_t v6 = *a3;
  dword_1EBCC24F8 = **a3;
  byte_1EBCC250C = 1;
  dword_1EBCC2508 = *v6;
}

void sub_1CD42FFA4()
{
}

void *sub_1CD42FFB8()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1F25FCCD8;
  return result;
}

void sub_1CD42FFF0(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25FCCD8;
}

void sub_1CD43001C(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    uint64_t v2 = a1;
    uint64_t v3 = a1 + 40 * a2;
    do
    {
      sub_1CD430068(*(unsigned __int8 **)v2, *(void *)(v2 + 8), *(_DWORD *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
      v2 += 40;
    }
    while (v2 != v3);
  }
}

void sub_1CD430068(unsigned __int8 *a1, size_t a2, int a3, uint64_t a4, uint64_t a5)
{
  v11[0] = a1;
  v11[1] = a2;
  void v11[2] = a4;
  void v11[3] = a5;
  v11[4] = &unk_1F25FCC98;
  char v13 = 1;
  int v12 = a3;
  unint64_t v7 = sub_1CD43015C((unint64_t)v11);
  uint64_t v8 = qword_1EBCC2520 + 48 * qword_1EBCC2528;
  long long v9 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v7;
  *(_OWORD *)(v8 + 16) = v9;
  *(void *)(v8 + 32) = &unk_1F25FCCB8;
  char v10 = *(unsigned char *)(v7 + 44);
  *(_DWORD *)(v8 + 40) = *(_DWORD *)(v7 + 40);
  *(unsigned char *)(v8 + 44) = v10;
  *(void *)(v8 + 32) = &unk_1F25FCC98;
  LODWORD(qword_1EBCC2528) = qword_1EBCC2528 + 1;
  llvm::cl::AddLiteralOption(qword_1EBCC2518, a1, a2);
}

unint64_t sub_1CD43015C(unint64_t result)
{
  if (qword_1EBCC2528 >= HIDWORD(qword_1EBCC2528))
  {
    if (qword_1EBCC2520 > result || qword_1EBCC2520 + 48 * (unint64_t)qword_1EBCC2528 <= result) {
      sub_1CD4301D8();
    }
    sub_1CD4301D8();
  }
  return result;
}

void sub_1CD4301D8()
{
}

void *sub_1CD4302D0(void *result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(_DWORD *)result;
  int v3 = 1 << (33 - __clz((*(_DWORD *)result >> 1) - 1));
  if (*(_DWORD *)result >= 2u) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = 0;
  }
  if ((v2 & 1) != 0 && v4 < 0x21)
  {
    uint64_t v5 = result + 33;
    *double result = 1;
    int64x2_t v6 = result + 1;
    do
LABEL_7:
      *v6++ = -4096;
    while (v6 != v5);
    return result;
  }
  if ((v2 & 1) == 0)
  {
    if (v4 == *((_DWORD *)result + 4))
    {
      *double result = 0;
      if (v2 < 2) {
        return result;
      }
      int64x2_t v6 = (void *)result[1];
      uint64_t v5 = &v6[v4];
      goto LABEL_7;
    }
    MEMORY[0x1D25D9CD0](result[1], 8);
  }

  return sub_1CBC5C4EC(v1, v4);
}

uint64_t sub_1CD4303A0(uint64_t a1, unsigned int a2)
{
  v14[32] = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x21)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    int64x2_t v6 = *(uint64_t **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x20)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD430528(a1, v6, &v6[v7]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = v14;
  for (uint64_t i = 8; i != 264; i += 8)
  {
    uint64_t v10 = *(void *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v8++ = v10;
    }
  }
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CD430528(a1, v14, v8);
}

uint64_t sub_1CD430528(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)double result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    long long v9 = (void *)(result + 264);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    uint64_t v8 = *(void **)(result + 8);
    long long v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      double result = sub_1CBC5C228((uint64_t)v5, v10, &v11);
      *uint64_t v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

void sub_1CD4305E4(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    int v3 = a2;
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2) {
        sub_1CD43068C();
      }
      if (a2 != v2) {
        memset_pattern16((void *)(*(void *)a1 + 8 * v2), &xmmword_1CDC7F8E0, 8 * (a2 - v2));
      }
    }
    else
    {
      uint64_t v5 = 8 * a2 - 8 * v2;
      int v6 = (void ***)(*(void *)a1 + 8 * v2 - 8);
      do
      {
        int v6 = sub_1CB9F9ED4(v6) - 1;
        v5 += 8;
      }
      while (v5);
    }
    *(_DWORD *)(a1 + 8) = v3;
  }
}

void sub_1CD43068C()
{
}

void *sub_1CD430738(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CBC5D168(a1, v4, v4 + 40 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 40 * v10;
    do
    {
      *double result = -4096;
      result += 5;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

void *sub_1CD430810(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD4308DC(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *double result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD4308DC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      double result = sub_1CBC5D2B4(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      uint64_t v10 = v11;
      *uint64_t v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1CD43098C(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v4 = (void *)(*(void *)result + 16 * v3);
  void *v4 = a2;
  v4[1] = a3;
  ++*(_DWORD *)(result + 8);
  return result;
}

void sub_1CD4309F8(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EA618B10, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBC5D7C8;
    v3[1] = &v1;
    unint64_t v2 = v3;
    std::__call_once(&qword_1EA618B10, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD430A68()
{
}

void sub_1CD430ABC()
{
}

void sub_1CD430AF8(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC2798, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CBC5E998;
    v3[1] = &v1;
    unint64_t v2 = v3;
    std::__call_once(&qword_1EBCC2798, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

BOOL sub_1CD430B68(void ***a1, uint64_t a2, uint64_t a3)
{
  llvm::MachineDominatorTree::applySplitCriticalEdges(a1);
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5 != *(void *)(a3 + 24))
  {
    llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates();
  }
  for (uint64_t i = *(void *)(v5 + 56); ; uint64_t i = *(void *)(i + 8))
  {
    BOOL result = i == a2;
    if (i == a2 || i == a3) {
      break;
    }
    if (!i || (*(unsigned char *)i & 4) == 0)
    {
      while ((*(_WORD *)(i + 44) & 8) != 0)
        uint64_t i = *(void *)(i + 8);
    }
  }
  return result;
}

llvm::raw_ostream *sub_1CD430C08(llvm *a1)
{
  unint64_t v2 = (llvm::raw_ostream *)llvm::errs(a1);

  return sub_1CD430C44((uint64_t)a1, v2);
}

llvm::raw_ostream *sub_1CD430C44(uint64_t a1, llvm::raw_ostream *a2)
{
  unsigned int v3 = sub_1CB8E509C(a2, "Off=");
  uint64_t v4 = llvm::raw_ostream::operator<<(v3, *(void *)a1);
  uint64_t v5 = sub_1CB8E509C(v4, ", Sym=");
  uint64_t v6 = llvm::raw_ostream::operator<<(v5, *(void *)(a1 + 8));
  int v7 = sub_1CB8E509C(v6, ", Type=");
  uint64_t v8 = llvm::raw_ostream::operator<<(v7, *(unsigned int *)(a1 + 16));
  uint64_t v9 = sub_1CB8E509C(v8, ", Addend=");
  uint64_t v10 = llvm::raw_ostream::operator<<(v9, *(void *)(a1 + 24));
  uint64_t v11 = sub_1CB8E509C(v10, ", OriginalSymbol=");
  int v12 = llvm::raw_ostream::operator<<(v11, *(void *)(a1 + 32));
  uint64_t v13 = sub_1CB8E509C(v12, ", OriginalAddend=");
  unint64_t v14 = *(void *)(a1 + 40);

  return llvm::raw_ostream::operator<<(v13, v14);
}

void sub_1CD430CF0()
{
}

uint64_t sub_1CD430D40()
{
  return 0;
}

uint64_t sub_1CD430D4C()
{
  return 0;
}

uint64_t sub_1CD430D58()
{
  return 0;
}

uint64_t sub_1CD430D60(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(void *)BOOL result = &unk_1F2646FA8;
  *(void *)(result + 64) = a2;
  *(_DWORD *)(result + 56) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t sub_1CD430D9C(uint64_t result, int a2, char a3)
{
  *(void *)&long long v3 = -1;
  *((void *)&v3 + 1) = -1;
  *(_OWORD *)(result + 36) = v3;
  *(_OWORD *)(result + 12) = xmmword_1CDC7F960;
  *(void *)(result + 28) = 0x600000005;
  *(_OWORD *)(result + 52) = v3;
  *(void *)(result + 68) = -1;
  int v4 = 1;
  *(_DWORD *)(result + 76) = 1;
  uint64_t v5 = 0xA00000009;
  uint64_t v6 = 0x700000006;
  int v7 = -1;
  int v8 = 11;
  int v9 = 8;
  uint64_t v10 = 0x100000001;
  uint64_t v11 = (a2 - 2022);
  int v12 = 0;
  int v13 = 0;
  int v14 = 0;
  int v15 = 0;
  int v16 = 0;
  int v17 = 0;
  BOOL v18 = 0;
  switch(v11)
  {
    case 1:
      int v12 = 1;
      goto LABEL_44;
    case 2:
LABEL_44:
      int v13 = v12;
      int v12 = 1;
      goto LABEL_45;
    case 3:
      goto LABEL_52;
    case 4:
      int v12 = 1;
      goto LABEL_49;
    case 5:
LABEL_49:
      int v16 = v12;
      int v12 = 1;
      goto LABEL_50;
    case 6:
LABEL_50:
      int v4 = 2;
      *(_DWORD *)(result + 76) = 2;
      goto LABEL_51;
    case 7:
LABEL_51:
      int v7 = 12;
      *(_DWORD *)(result + 72) = 12;
LABEL_52:
      char v21 = 0;
      *(unsigned char *)BOOL result = 1;
      *(void *)(result + 4) = 0x400000001;
      *(_OWORD *)(result + 56) = xmmword_1CDC7F990;
      LOBYTE(v12) = v12 != 0;
      uint64_t v6 = 0x700000006;
      BOOL v18 = v16 != 0;
      int v9 = 8;
      int v22 = 9;
      goto LABEL_12;
    case 8:
      goto LABEL_38;
    case 9:
      uint64_t v10 = 0x200000001;
      goto LABEL_38;
    case 10:
      uint64_t v10 = 0x300000001;
      goto LABEL_38;
    case 11:
LABEL_45:
      int v4 = 2;
      *(_DWORD *)(result + 76) = 2;
      goto LABEL_46;
    case 12:
LABEL_46:
      int v7 = 13;
      *(_DWORD *)(result + 72) = 13;
      goto LABEL_47;
    case 13:
      goto LABEL_34;
    case 14:
      uint64_t v10 = 0x200000001;
      goto LABEL_34;
    case 15:
      uint64_t v10 = 0x300000001;
      goto LABEL_34;
    case 16:
      goto LABEL_61;
    case 17:
      int v12 = 1;
      goto LABEL_58;
    case 18:
LABEL_58:
      int v14 = v12;
      int v12 = 1;
      goto LABEL_59;
    case 19:
      goto LABEL_66;
    case 20:
      int v12 = 1;
      goto LABEL_63;
    case 21:
LABEL_63:
      int v17 = v12;
      int v12 = 1;
      goto LABEL_64;
    case 22:
LABEL_64:
      int v4 = 2;
      *(_DWORD *)(result + 76) = 2;
      goto LABEL_65;
    case 23:
LABEL_65:
      int v7 = 13;
      *(_DWORD *)(result + 72) = 13;
LABEL_66:
      char v21 = 0;
      *(unsigned char *)BOOL result = 1;
      *(void *)(result + 4) = 0x400000002;
      *(_OWORD *)(result + 56) = xmmword_1CDC7F980;
      LOBYTE(v12) = v12 != 0;
      uint64_t v6 = 0x800000007;
      BOOL v18 = v17 != 0;
      goto LABEL_11;
    case 24:
      uint64_t v5 = 0xB0000000ALL;
      uint64_t v10 = 0x100000002;
      goto LABEL_70;
    case 25:
      uint64_t v5 = 0xB0000000ALL;
      uint64_t v6 = 0x800000007;
      uint64_t v10 = 0x200000002;
      goto LABEL_71;
    case 26:
      uint64_t v5 = 0xB0000000ALL;
      uint64_t v10 = 0x300000002;
LABEL_70:
      uint64_t v6 = 0x800000007;
LABEL_71:
      int v8 = 12;
      int v9 = 9;
      goto LABEL_38;
    case 27:
LABEL_59:
      int v4 = 2;
      *(_DWORD *)(result + 76) = 2;
      goto LABEL_60;
    case 28:
LABEL_60:
      int v7 = 13;
      *(_DWORD *)(result + 72) = 13;
LABEL_61:
      *(unsigned char *)BOOL result = 0;
      *(void *)(result + 4) = 0x400000002;
      *(_OWORD *)(result + 56) = xmmword_1CDC7F980;
      LOBYTE(v12) = v12 != 0;
      uint64_t v19 = (void *)&unk_1CDB0C000;
      BOOL v20 = v14 == 0;
      goto LABEL_7;
    case 29:
      uint64_t v10 = 0x100000002;
      goto LABEL_34;
    case 30:
      uint64_t v10 = 0x200000002;
      goto LABEL_34;
    case 31:
      uint64_t v10 = 0x300000002;
      goto LABEL_34;
    case 32:
    case 48:
      goto LABEL_6;
    case 33:
    case 49:
      int v12 = 1;
      goto LABEL_3;
    case 34:
    case 50:
LABEL_3:
      int v15 = v12;
      int v12 = 1;
      goto LABEL_4;
    case 35:
    case 51:
      goto LABEL_28;
    case 36:
    case 52:
      LOBYTE(v12) = 1;
      goto LABEL_25;
    case 37:
    case 53:
LABEL_25:
      BOOL v18 = v12;
      LOBYTE(v12) = 1;
      goto LABEL_26;
    case 38:
    case 54:
LABEL_26:
      int v4 = 2;
      *(_DWORD *)(result + 76) = 2;
      goto LABEL_27;
    case 39:
    case 55:
LABEL_27:
      int v7 = 14;
      *(_DWORD *)(result + 72) = 14;
LABEL_28:
      char v21 = 0;
      *(unsigned char *)BOOL result = 1;
      *(void *)(result + 4) = 0x400000003;
      *(_OWORD *)(result + 56) = xmmword_1CDC7F970;
      uint64_t v6 = 0x900000008;
      int v9 = 10;
      int v22 = 11;
      goto LABEL_12;
    case 40:
    case 56:
      uint64_t v5 = 0xC0000000BLL;
      uint64_t v10 = 0x100000003;
      goto LABEL_36;
    case 41:
    case 57:
      uint64_t v5 = 0xC0000000BLL;
      uint64_t v10 = 0x200000003;
LABEL_36:
      uint64_t v6 = 0x900000008;
      goto LABEL_37;
    case 42:
    case 58:
      uint64_t v5 = 0xC0000000BLL;
      uint64_t v6 = 0x900000008;
      uint64_t v10 = 0x300000003;
LABEL_37:
      int v8 = 13;
      int v9 = 10;
LABEL_38:
      *(unsigned char *)BOOL result = 1;
      *(void *)(result + 4) = v10;
      *(_DWORD *)(result + 56) = v9;
      *(void *)(result + 60) = v5;
      int v22 = v5;
      int v23 = -3;
      *(_DWORD *)(result + 68) = v8;
      goto LABEL_39;
    case 43:
    case 59:
LABEL_4:
      int v4 = 2;
      *(_DWORD *)(result + 76) = 2;
      goto LABEL_5;
    case 44:
    case 60:
LABEL_5:
      int v7 = 13;
      *(_DWORD *)(result + 72) = 13;
LABEL_6:
      *(unsigned char *)BOOL result = 0;
      *(void *)(result + 4) = 0x400000003;
      *(_OWORD *)(result + 56) = xmmword_1CDC7F980;
      LOBYTE(v12) = v12 != 0;
      uint64_t v19 = &unk_1CDB0C000;
      BOOL v20 = v15 == 0;
      goto LABEL_7;
    case 45:
    case 61:
      uint64_t v10 = 0x100000003;
      goto LABEL_34;
    case 46:
    case 62:
      uint64_t v10 = 0x200000003;
      goto LABEL_34;
    case 47:
    case 63:
      uint64_t v10 = 0x300000003;
LABEL_34:
      *(unsigned char *)BOOL result = 0;
      *(void *)(result + 4) = v10;
      *(_OWORD *)(result + 56) = xmmword_1CDC7F980;
      uint64_t v6 = 0x800000007;
      int v9 = 9;
      int v22 = 10;
      int v23 = -3;
      goto LABEL_22;
    default:
LABEL_47:
      *(unsigned char *)BOOL result = 0;
      *(void *)(result + 4) = 0x400000001;
      *(_OWORD *)(result + 56) = xmmword_1CDC7F980;
      LOBYTE(v12) = v12 != 0;
      uint64_t v19 = (void *)&unk_1CDB0C000;
      BOOL v20 = v13 == 0;
LABEL_7:
      uint64_t v6 = v19[487];
      BOOL v18 = !v20;
      char v21 = 1;
LABEL_11:
      int v9 = 9;
      int v22 = 10;
LABEL_12:
      if (v4 == 2)
      {
        if (v12)
        {
          if (!v18) {
            *(_DWORD *)(result + 76) = 4;
          }
        }
        else
        {
          *(_DWORD *)(result + 8) = 1;
        }
        *(_DWORD *)(result + 72) = -1;
LABEL_21:
        int v23 = -3;
        if (v21) {
          goto LABEL_22;
        }
        goto LABEL_39;
      }
      if (v7 == -1) {
        goto LABEL_21;
      }
      *(_DWORD *)(result + 8) = 0;
      *(_DWORD *)(result + 76) = 0;
      int v23 = v7 - 2;
      if (v21)
      {
LABEL_22:
        *(void *)(result + 36) = 0x800000007;
        if ((a3 & 1) == 0) {
          return result;
        }
        *(_OWORD *)(result + 16) = xmmword_1CD923660;
        *(void *)(result + 32) = 0x500000004;
        *(_DWORD *)(result + 40) = 6;
        goto LABEL_41;
      }
LABEL_39:
      *(void *)(result + 44) = 0x800000007;
      *(_DWORD *)(result + 52) = 9;
      if ((a3 & 1) == 0) {
        return result;
      }
      *(_OWORD *)(result + 16) = xmmword_1CD923660;
      *(_DWORD *)(result + 32) = 4;
      *(void *)(result + 44) = 0x600000005;
      *(_DWORD *)(result + 52) = 7;
LABEL_41:
      *(void *)(result + 56) = v6;
      *(_DWORD *)(result + 64) = v9;
      *(_DWORD *)(result + 68) = v22;
      *(_DWORD *)(result + 72) = v23;
      return result;
  }
}

void sub_1CD43125C()
{
}

uint64_t sub_1CD4312D8()
{
  return 5;
}

uint64_t sub_1CD4312E4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 32 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v10 = 0;
      BOOL result = sub_1CBC610E0((uint64_t *)v5, (void *)a2, &v10);
      int v9 = v10;
      *uint64_t v10 = *(void *)a2;
      v9[1] = 0;
      void v9[2] = 0;
      v9[3] = 0;
      *(_OWORD *)(v9 + 1) = *(_OWORD *)(a2 + 8);
      v9[3] = *(void *)(a2 + 24);
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 32;
  }
  return result;
}

void sub_1CD4313AC(llvm::MCAsmInfo *a1)
{
  llvm::MCAsmInfo::~MCAsmInfo(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD4313E4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CD4313EC(uint64_t result, char a2)
{
  *(unsigned char *)(result + 464) = a2;
  return result;
}

uint64_t sub_1CD4313F4(uint64_t result, char a2)
{
  *(unsigned char *)(result + 465) = a2;
  return result;
}

uint64_t sub_1CD4313FC(uint64_t result, char a2)
{
  *(unsigned char *)(result + 466) = a2;
  return result;
}

void sub_1CD431404()
{
}

unsigned int *sub_1CD43146C(unsigned int *result, uint64_t a2, _DWORD *a3)
{
  int v4 = result;
  uint64_t v5 = *(void *)result;
  uint64_t v6 = result[2];
  if (*(void *)result + 4 * v6 == a2)
  {
    if (v6 >= result[3]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(v5 + 4 * v6) = *a3;
    ++result[2];
  }
  else
  {
    if (v6 >= result[3]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v7 = (_DWORD *)(v5 + 4 * ((a2 - v5) >> 2));
    *(_DWORD *)(v5 + 4 * v6) = *(_DWORD *)(v5 + 4 * v6 - 4);
    uint64_t v8 = result[2];
    uint64_t v9 = v5 + 4 * v8 - 4;
    if ((_DWORD *)v9 != v7)
    {
      BOOL result = (unsigned int *)memmove(v7 + 1, v7, v9 - (void)v7);
      LODWORD(v8) = v4[2];
    }
    v4[2] = v8 + 1;
    *int v7 = *a3;
  }
  return result;
}

llvm::MCStreamer *sub_1CD431568(uint64_t a1, llvm::MCStreamer *this)
{
  return llvm::MCStreamer::visitUsedExpr(this, *(const llvm::MCExpr ***)(a1 + 32));
}

uint64_t sub_1CD431578(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1CB906F34((uint64_t *)(a3 + 192), 40, 3);
  *(unsigned char *)(result + 8) = 4;
  *(_DWORD *)(result + 9) = *(unsigned __int8 *)(result + 12) << 24;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = &unk_1F25FD080;
  *(_DWORD *)(result + 24) = a1;
  *(void *)(result + 32) = a2;
  return result;
}

llvm::raw_ostream *sub_1CD4315E8(llvm::raw_ostream *result, llvm::raw_ostream *a2)
{
  uint64_t v3 = *(void *)(*((void *)result + 4) + 16);
  switch(*((_DWORD *)result + 6))
  {
    case 0:
      sub_1CB8E509C(a2, "{ ");
      uint64_t v4 = 0;
      if (v3 >= 0) {
        uint64_t v5 = v3;
      }
      else {
        uint64_t v5 = v3 + 1;
      }
      uint64_t v6 = v5 >> 1;
      do
      {
        if (v4) {
          sub_1CB8E509C(a2, ", ");
        }
        int v7 = sub_1CB8E509C(a2, "sh");
        llvm::raw_ostream::operator<<(v7, v6 + v4++);
      }
      while (v4 != 6);
      goto LABEL_30;
    case 1:
      sub_1CB8E509C(a2, "{ ");
      uint64_t v8 = 0;
      if (v3 >= 0) {
        uint64_t v9 = v3;
      }
      else {
        uint64_t v9 = v3 + 1;
      }
      uint64_t v10 = v9 >> 1;
      do
      {
        if (v8) {
          sub_1CB8E509C(a2, ", ");
        }
        uint64_t v11 = sub_1CB8E509C(a2, "sh");
        llvm::raw_ostream::operator<<(v11, v10 + v8++);
      }
      while (v8 != 4);
      goto LABEL_30;
    case 2:
      sub_1CB8E509C(a2, "{ ");
      uint64_t v12 = 0;
      if (v3 >= 0) {
        uint64_t v13 = v3;
      }
      else {
        uint64_t v13 = v3 + 1;
      }
      uint64_t v14 = v13 >> 1;
      do
      {
        if (v12) {
          sub_1CB8E509C(a2, ", ");
        }
        int v15 = sub_1CB8E509C(a2, "sh");
        llvm::raw_ostream::operator<<(v15, v14 + v12++);
      }
      while (v12 != 3);
      goto LABEL_30;
    case 3:
      sub_1CB8E509C(a2, "{ ");
      if (v3 >= 0) {
        uint64_t v16 = v3;
      }
      else {
        uint64_t v16 = v3 + 1;
      }
      unint64_t v17 = v16 >> 1;
      BOOL v18 = sub_1CB8E509C(a2, "sh");
      llvm::raw_ostream::operator<<(v18, v17);
      sub_1CB8E509C(a2, ", ");
      uint64_t v19 = sub_1CB8E509C(a2, "sh");
      llvm::raw_ostream::operator<<(v19, v17 + 1);
LABEL_30:
      BOOL v20 = " }";
      char v21 = a2;
      goto LABEL_31;
    case 4:
      int v22 = sub_1CB8E509C(a2, "sh");
      if (v3 >= 0) {
        uint64_t v23 = v3;
      }
      else {
        uint64_t v23 = v3 + 1;
      }
      return llvm::raw_ostream::operator<<(v22, v23 >> 1);
    case 5:
      int v24 = sub_1CB8E509C(a2, "sh");
      if (v3 >= 0) {
        uint64_t v25 = v3;
      }
      else {
        uint64_t v25 = v3 + 1;
      }
      char v21 = llvm::raw_ostream::operator<<(v24, v25 >> 1);
      if (v3) {
        BOOL v20 = "h";
      }
      else {
        BOOL v20 = "l";
      }
LABEL_31:
      uint64_t result = sub_1CB8E509C(v21, v20);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1CD431880()
{
  return 0;
}

void sub_1CD43188C()
{
}

uint64_t sub_1CD4318A0()
{
  return 0;
}

uint64_t sub_1CD4318A8()
{
  return 0;
}

unint64_t sub_1CD4318B0(uint64_t a1)
{
  return llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a1 + 32));
}

uint64_t sub_1CD4318BC(int a1, uint64_t a2, uint64_t a3, int a4)
{
  if ((a4 - 1) < 2 && a1 == 40) {
    return 42;
  }
  else {
    return 0;
  }
}

uint64_t sub_1CD4318D8()
{
  return 0;
}

uint64_t sub_1CD4318E0(uint64_t a1, int a2)
{
  return byte_1CDE0A274[a2] & 1;
}

uint64_t sub_1CD4318F4(uint64_t a1, int a2)
{
  return (byte_1CDE0A274[a2] >> 1) & 1;
}

uint64_t sub_1CD431908(uint64_t a1, int a2)
{
  return (byte_1CDE0A274[a2] >> 2) & 1;
}

void LLVMInitializeAGX1TargetMC()
{
  qword_1EBD02448 = (uint64_t)sub_1CBC79748;
  qword_1EBD02458 = (uint64_t)sub_1CBC797B4;
  qword_1EBD02468 = (uint64_t)sub_1CBC7980C;
  qword_1EBD02470 = (uint64_t)sub_1CBC79914;
  qword_1EBD024A8 = (uint64_t)sub_1CD431404;
  qword_1EBD024B8 = (uint64_t)sub_1CBC79A04;
  qword_1EBD02480 = (uint64_t)sub_1CD430CF0;
}

void sub_1CD43199C()
{
}

void sub_1CD4319B4(void **a1)
{
  llvm::TargetSubtargetInfo::~TargetSubtargetInfo(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD4319EC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  if ((a5 - 1) < 2 && a2 == 40) {
    return 42;
  }
  else {
    return 0;
  }
}

void llvm::TargetSubtargetInfo::~TargetSubtargetInfo(void **this)
{
  *this = &unk_1F26306C8;
  if (*((char *)this + 255) < 0) {
    operator delete(this[29]);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  llvm::TargetSubtargetInfo::~TargetSubtargetInfo(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD431A98()
{
}

void sub_1CD431AE8(int *a1@<X0>, uint64_t a2@<X8>)
{
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v14 = 0;
  int v5 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v12 = v13;
  int v11 = 0;
  uint64_t v4 = &unk_1F2646F30;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v4, *a1);
  if (*((char *)v12 + 23) < 0)
  {
    sub_1CB8BDF7C(a2, *v12, (unint64_t)v12[1]);
  }
  else
  {
    long long v3 = *(_OWORD *)v12;
    *(void *)(a2 + 16) = v12[2];
    *(_OWORD *)a2 = v3;
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v4);
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
}

void sub_1CD431BA8()
{
}

void sub_1CD431C28(llvm::MCMachObjectTargetWriter *a1)
{
  llvm::MCMachObjectTargetWriter::~MCMachObjectTargetWriter(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD431C64(llvm::MCAsmInfo *a1)
{
  llvm::MCAsmInfo::~MCAsmInfo(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD431C9C()
{
}

llvm::raw_ostream *sub_1CD431D00(llvm::raw_ostream *result, llvm::raw_ostream *a2)
{
  uint64_t v3 = *(void *)(*((void *)result + 4) + 16);
  switch(*((_DWORD *)result + 6))
  {
    case 0:
      sub_1CB8E509C(a2, "{ ");
      uint64_t v4 = 0;
      if (v3 >= 0) {
        uint64_t v5 = v3;
      }
      else {
        uint64_t v5 = v3 + 1;
      }
      uint64_t v6 = v5 >> 1;
      do
      {
        if (v4) {
          sub_1CB8E509C(a2, ", ");
        }
        uint64_t v7 = sub_1CB8E509C(a2, "u");
        llvm::raw_ostream::operator<<(v7, v6 + v4++);
      }
      while (v4 != 5);
      goto LABEL_32;
    case 1:
      sub_1CB8E509C(a2, "{ ");
      uint64_t v8 = 0;
      if (v3 >= 0) {
        uint64_t v9 = v3;
      }
      else {
        uint64_t v9 = v3 + 1;
      }
      uint64_t v10 = v9 >> 1;
      do
      {
        if (v8) {
          sub_1CB8E509C(a2, ", ");
        }
        int v11 = sub_1CB8E509C(a2, "u");
        llvm::raw_ostream::operator<<(v11, v10 + v8++);
      }
      while (v8 != 3);
      goto LABEL_32;
    case 2:
      sub_1CB8E509C(a2, "{ ");
      if (v3 >= 0) {
        uint64_t v12 = v3;
      }
      else {
        uint64_t v12 = v3 + 1;
      }
      unint64_t v13 = v12 >> 1;
      uint64_t v14 = sub_1CB8E509C(a2, "u");
      llvm::raw_ostream::operator<<(v14, v13);
      sub_1CB8E509C(a2, ", ");
      int v15 = sub_1CB8E509C(a2, "u");
      llvm::raw_ostream::operator<<(v15, v13 + 1);
      goto LABEL_32;
    case 3:
      sub_1CB8E509C(a2, "{ ");
      for (uint64_t i = 0; i != 3; ++i)
      {
        if (i) {
          sub_1CB8E509C(a2, ", ");
        }
        unint64_t v17 = sub_1CB8E509C(a2, "u");
        uint64_t v18 = v3 + i;
        if (v3 + i >= 0) {
          uint64_t v19 = v3 + i;
        }
        else {
          uint64_t v19 = v18 + 1;
        }
        BOOL v20 = llvm::raw_ostream::operator<<(v17, v19 >> 1);
        if (v18) {
          char v21 = "h";
        }
        else {
          char v21 = "l";
        }
        sub_1CB8E509C(v20, v21);
      }
LABEL_32:
      int v22 = " }";
      uint64_t v23 = a2;
      goto LABEL_33;
    case 4:
      int v24 = sub_1CB8E509C(a2, "u");
      if (v3 >= 0) {
        uint64_t v25 = v3;
      }
      else {
        uint64_t v25 = v3 + 1;
      }
      unint64_t v26 = v25 >> 1;
      goto LABEL_50;
    case 5:
      uint64_t v27 = sub_1CB8E509C(a2, "u");
      if (v3 >= 0) {
        uint64_t v28 = v3;
      }
      else {
        uint64_t v28 = v3 + 1;
      }
      uint64_t v23 = llvm::raw_ostream::operator<<(v27, v28 >> 1);
      if (v3) {
        int v22 = "h";
      }
      else {
        int v22 = "l";
      }
LABEL_33:
      return sub_1CB8E509C(v23, v22);
    case 6:
      unint64_t v29 = "ss";
      goto LABEL_49;
    case 7:
      unint64_t v29 = "cf";
      goto LABEL_49;
    case 8:
      unint64_t v29 = "ts";
LABEL_49:
      int v24 = sub_1CB8E509C(a2, v29);
      unint64_t v26 = v3;
LABEL_50:
      uint64_t result = llvm::raw_ostream::operator<<(v24, v26);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1CD431FF4()
{
  return 0;
}

void sub_1CD432000()
{
}

unint64_t sub_1CD432014(uint64_t a1)
{
  return llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a1 + 32));
}

uint64_t sub_1CD432020(int a1, uint64_t a2, uint64_t a3, int a4)
{
  if ((a4 - 1) < 6 && a1 == 104) {
    return 107;
  }
  else {
    return 0;
  }
}

void LLVMInitializeAGX2TargetMC()
{
  qword_1EBD02570 = (uint64_t)sub_1CBD791A0;
  qword_1EBD02580 = (uint64_t)sub_1CBD79214;
  qword_1EBD02590 = (uint64_t)sub_1CBD7926C;
  qword_1EBD02598 = (uint64_t)sub_1CBD79374;
  qword_1EBD02660 = (uint64_t)sub_1CBD790D8;
  byte_1EBCC27A1 = 1;
  qword_1EBD025D0 = (uint64_t)sub_1CD431C9C;
  qword_1EBD02610 = (uint64_t)sub_1CD432490;
  qword_1EBD02618 = (uint64_t)sub_1CD4324F4;
  qword_1EBD025E0 = (uint64_t)sub_1CBD79464;
  qword_1EBD025A8 = (uint64_t)sub_1CD431A98;
  qword_1EBD02588 = (uint64_t)sub_1CBD7946C;
  qword_1EBD02648 = (uint64_t)sub_1CD432448;
}

void sub_1CD432118()
{
}

void sub_1CD432130(void **a1)
{
  llvm::TargetSubtargetInfo::~TargetSubtargetInfo(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD432168(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  if ((a5 - 1) < 6 && a2 == 104) {
    return 107;
  }
  else {
    return 0;
  }
}

void sub_1CD432188()
{
}

uint64_t sub_1CD43219C(uint64_t a1, unsigned int *a2)
{
  return (*(unsigned __int8 *)(**(void **)(a1 + 8) + 48 * *a2 + 9) >> 2) & 1;
}

BOOL sub_1CD4321BC(uint64_t a1, unsigned int *a2)
{
  return (*(void *)(**(void **)(a1 + 8) + 48 * *a2 + 8) & 0xD00) == 1024;
}

BOOL sub_1CD4321E8(uint64_t a1, unsigned int *a2)
{
  return (*(void *)(**(void **)(a1 + 8) + 48 * *a2 + 8) & 0xD00) == 1280;
}

uint64_t sub_1CD432214(uint64_t a1, unsigned int *a2)
{
  return (*(unsigned __int8 *)(**(void **)(a1 + 8) + 48 * *a2 + 9) >> 3) & 1;
}

uint64_t sub_1CD432234(uint64_t a1, unsigned int *a2)
{
  return *(unsigned __int8 *)(**(void **)(a1 + 8) + 48 * *a2 + 8) >> 7;
}

uint64_t sub_1CD432254(uint64_t a1, unsigned int *a2)
{
  return (*(unsigned __int8 *)(**(void **)(a1 + 8) + 48 * *a2 + 8) >> 5) & 1;
}

uint64_t sub_1CD432274(uint64_t a1, unsigned int *a2)
{
  return (*(unsigned __int8 *)(**(void **)(a1 + 8) + 48 * *a2 + 9) >> 1) & 1;
}

uint64_t sub_1CD432294()
{
  return 0;
}

uint64_t sub_1CD43229C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 80))();
}

uint64_t sub_1CD4322C0()
{
  return 0;
}

uint64_t sub_1CD4322C8(void **a1, unsigned int *a2, uint64_t a3, uint64_t a4, void *a5)
{
  if ((((uint64_t (*)(void **))(*a1)[6])(a1) & 1) != 0
    || (((uint64_t (*)(void **, unsigned int *))(*a1)[4])(a1, a2) & 1) != 0
    || (uint64_t result = ((uint64_t (*)(void **, unsigned int *))(*a1)[3])(a1, a2), result))
  {
    uint64_t result = 0;
    unsigned int v10 = *a2;
    uint64_t v11 = *a1[1];
    if ((*(unsigned char *)(v11 + 48 * *a2 + 9) & 8) == 0)
    {
      if (a2[6])
      {
        uint64_t v12 = 3;
        if (v10 != 50) {
          uint64_t v12 = 0;
        }
        if (*(unsigned char *)(*(void *)(v11 + 48 * v10 + 40) + 6 * v12 + 3) != 4) {
          a3 = 0;
        }
        uint64_t v16 = 0;
        uint64_t v13 = *((void *)a2 + 2);
        int v14 = *(unsigned __int8 *)(v13 + 16 * v12);
        if (v14 != 5)
        {
          if (v14 != 2) {
            return 0;
          }
          int v15 = (uint64_t *)(v13 + 16 * v12 + 8);
          goto LABEL_13;
        }
        int v15 = &v16;
        uint64_t result = llvm::MCExpr::evaluateAsAbsolute(*(llvm::MCExpr **)(v13 + 16 * v12 + 8), &v16);
        if (result)
        {
LABEL_13:
          *a5 = *(int *)v15 + a3;
          return 1;
        }
      }
    }
  }
  return result;
}

void sub_1CD43243C(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_1CD432448()
{
}

void sub_1CD432490()
{
}

void sub_1CD4324F4()
{
}

void sub_1CD432550()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CD4326F8()
{
}

void sub_1CD432778(llvm::MCMachObjectTargetWriter *a1)
{
  llvm::MCMachObjectTargetWriter::~MCMachObjectTargetWriter(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD4327B4(llvm::MCAsmInfo *a1)
{
  llvm::MCAsmInfo::~MCAsmInfo(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD4327EC()
{
}

llvm::raw_ostream *sub_1CD432850(llvm::raw_ostream *result, llvm::raw_ostream *this)
{
  uint64_t v3 = *((void *)result + 4);
  unint64_t v4 = *(void *)(v3 + 16);
  switch(*((_DWORD *)result + 6))
  {
    case 0:
      unsigned int v5 = *((_DWORD *)result + 10);
      return sub_1CBD7BBFC(this, "u", (unsigned __int16)v4, v5);
    case 1:
      uint64_t v6 = "ss";
      goto LABEL_8;
    case 2:
      uint64_t v6 = "cf";
      goto LABEL_8;
    case 3:
      uint64_t v6 = "ts";
LABEL_8:
      uint64_t v7 = sub_1CB8E509C(this, v6);
      return llvm::raw_ostream::operator<<(v7, v4);
    case 4:
      sub_1CBD7BBFC(this, "i", *(void *)(v3 + 16), *((_DWORD *)result + 10));
      uint64_t v8 = ".il4";
      goto LABEL_18;
    case 5:
      sub_1CBD7BBFC(this, "i", *(void *)(v3 + 16), *((_DWORD *)result + 10));
      uint64_t v8 = ".il8";
      goto LABEL_18;
    case 6:
      sub_1CBD7BBFC(this, "i", *(void *)(v3 + 16), *((_DWORD *)result + 10));
      uint64_t v8 = ".il16";
      goto LABEL_18;
    case 7:
      sub_1CBD7BBFC(this, "i", *(void *)(v3 + 16), *((_DWORD *)result + 10));
      uint64_t v8 = ".il32";
      goto LABEL_18;
    case 8:
      sub_1CBD7BBFC(this, "i", *(void *)(v3 + 16), *((_DWORD *)result + 10));
      uint64_t v8 = ".il64";
      goto LABEL_18;
    case 9:
      sub_1CBD7BBFC(this, "s", *(void *)(v3 + 16), *((_DWORD *)result + 10));
      uint64_t v8 = ".st2";
      goto LABEL_18;
    case 0xA:
      sub_1CBD7BBFC(this, "s", *(void *)(v3 + 16), *((_DWORD *)result + 10));
      uint64_t v8 = ".st4";
LABEL_18:
      uint64_t result = sub_1CB8E509C(this, v8);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1CD432A34()
{
  return 0;
}

void sub_1CD432A40()
{
}

unint64_t sub_1CD432A54(uint64_t a1)
{
  return llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a1 + 32));
}

uint64_t sub_1CD432A60(int a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a1 <= 211)
  {
    switch(a1)
    {
      case 150:
      case 152:
        if ((a4 - 1) >= 3) {
          goto LABEL_25;
        }
        uint64_t result = 334;
        break;
      case 151:
        if ((a4 - 1) >= 3) {
          goto LABEL_25;
        }
        uint64_t result = 340;
        break;
      case 153:
      case 155:
      case 157:
        if ((a4 - 1) >= 3) {
          goto LABEL_25;
        }
        uint64_t result = 343;
        break;
      case 154:
        if ((a4 - 1) >= 3) {
          goto LABEL_25;
        }
        uint64_t result = 349;
        break;
      case 156:
      case 158:
        if ((a4 - 1) >= 3) {
          goto LABEL_25;
        }
        uint64_t result = 352;
        break;
      default:
        if (a1 == 211)
        {
LABEL_19:
          if ((a4 - 1) < 3) {
            return 357;
          }
        }
LABEL_25:
        uint64_t result = 0;
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 307:
      case 308:
      case 309:
        if ((a4 - 1) >= 3) {
          goto LABEL_25;
        }
        uint64_t result = 360;
        break;
      case 310:
      case 311:
      case 312:
      case 313:
        if ((a4 - 1) >= 3) {
          goto LABEL_25;
        }
        uint64_t result = 362;
        break;
      default:
        if (a1 == 212) {
          goto LABEL_19;
        }
        if (a1 != 330 || (a4 - 1) >= 3) {
          goto LABEL_25;
        }
        uint64_t result = 364;
        break;
    }
  }
  return result;
}

void LLVMInitializeAGX3TargetMC()
{
  qword_1EA61E8E0 = (uint64_t)sub_1CBD81E88;
  qword_1EA61E8F0 = (uint64_t)sub_1CBD81EF4;
  qword_1EA61E900 = (uint64_t)sub_1CBD81F4C;
  qword_1EA61E908 = (uint64_t)sub_1CBD82054;
  qword_1EA61E9D0 = (uint64_t)sub_1CBD81DC0;
  byte_1EBCC27A3 = 1;
  qword_1EA61E940 = (uint64_t)sub_1CD4327EC;
  qword_1EA61E980 = (uint64_t)sub_1CD432FAC;
  qword_1EA61E988 = (uint64_t)sub_1CD433010;
  qword_1EA61E950 = (uint64_t)sub_1CBD82144;
  qword_1EA61E918 = (uint64_t)sub_1CD432550;
  qword_1EA61E8F8 = (uint64_t)sub_1CBD8214C;
  qword_1EA61E9B8 = (uint64_t)sub_1CD432F64;
}

void sub_1CD432C70()
{
}

void sub_1CD432C88(void **a1)
{
  llvm::TargetSubtargetInfo::~TargetSubtargetInfo(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD432CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_1CD432A60(a2, a2, a3, a5);
}

void sub_1CD432CD0()
{
}

uint64_t sub_1CD432CE4(void *a1, unsigned int *a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (((*(uint64_t (**)(void *))(*a1 + 48))(a1) & 1) != 0
    || ((*(uint64_t (**)(void *, unsigned int *))(*a1 + 32))(a1, a2) & 1) != 0
    || (uint64_t result = (*(uint64_t (**)(void *, unsigned int *))(*a1 + 24))(a1, a2), result))
  {
    unsigned int v10 = (uint64_t *)a1[1];
    unsigned int v11 = *a2;
    uint64_t v12 = *v10;
    if ((*(_WORD *)(*v10 + 48 * *a2 + 8) & 0x820) != 0 || a2[6] == 0) {
      return 0;
    }
    int v14 = sub_1CBDA6464((unsigned __int16)*a2, 0x24u);
    uint64_t v15 = v14 & ~(v14 >> 31);
    if (v11 == 50) {
      uint64_t v15 = 3;
    }
    if (*(unsigned char *)(*(void *)(v12 + 48 * v11 + 40) + 6 * v15 + 3) != 4) {
      a3 = 0;
    }
    uint64_t v19 = 0;
    uint64_t v16 = *((void *)a2 + 2);
    int v17 = *(unsigned __int8 *)(v16 + 16 * v15);
    if (v17 != 5)
    {
      if (v17 == 2)
      {
        uint64_t v18 = (uint64_t *)(v16 + 16 * v15 + 8);
LABEL_18:
        *a5 = a3 + (*v18 << 16 >> 16);
        return 1;
      }
      return 0;
    }
    uint64_t v18 = &v19;
    uint64_t result = llvm::MCExpr::evaluateAsAbsolute(*(llvm::MCExpr **)(v16 + 16 * v15 + 8), &v19);
    if (result) {
      goto LABEL_18;
    }
  }
  return result;
}

void sub_1CD432E7C(long long *a1)
{
  uint64_t v2 = sub_1CB883A14((uint64_t)&qword_1EBD02358, 0, 0);
  dword_1EBD023D8 = 0;
  qword_1EBD023E0 = (uint64_t)&unk_1F25EA1B0;
  unk_1EBD023E8 = 0;
  qword_1EBD02358 = (uint64_t)&unk_1F2643F00;
  qword_1EBD023F0 = (uint64_t)&unk_1F2643DB0;
  qword_1EBD023F8 = (uint64_t)&unk_1F25EA168;
  qword_1EBD02410 = (uint64_t)&qword_1EBD023F8;
  llvm::cl::Option::setArgStr(v2, "agx3-flag-reg-limit", 0x13uLL);
  xmmword_1EBD02378 = *a1;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBD02358);
}

void sub_1CD432F64()
{
}

void sub_1CD432FAC()
{
}

void sub_1CD433010()
{
}

void sub_1CD43306C(unsigned int *a1, int a2, unsigned __int16 *a3, uint64_t a4, unsigned __int16 *a5)
{
  if (dword_1CDF3BEB0[a2])
  {
    switch(a2)
    {
      case 360:
      case 361:
      case 362:
      case 363:
      case 364:
      case 365:
      case 366:
      case 367:
      case 368:
      case 369:
      case 370:
      case 371:
      case 372:
      case 373:
      case 374:
      case 375:
      case 376:
      case 377:
      case 378:
      case 379:
      case 380:
      case 381:
      case 382:
      case 383:
      case 384:
      case 385:
      case 386:
      case 387:
      case 388:
      case 389:
      case 390:
      case 391:
      case 392:
      case 393:
      case 394:
      case 395:
      case 396:
      case 397:
      case 398:
      case 399:
      case 400:
      case 401:
      case 402:
      case 403:
      case 404:
      case 405:
      case 406:
      case 407:
      case 408:
      case 409:
      case 410:
      case 411:
      case 412:
      case 413:
      case 6168:
      case 6169:
      case 6170:
      case 6171:
      case 6172:
      case 6173:
      case 6174:
      case 6175:
      case 6176:
      case 6177:
      case 6178:
      case 6179:
      case 6180:
      case 6181:
      case 6182:
      case 6183:
      case 6184:
      case 6185:
      case 6186:
      case 6187:
      case 6188:
      case 6189:
      case 6190:
      case 6191:
      case 6192:
      case 6193:
      case 6194:
      case 6195:
      case 6196:
      case 6197:
      case 6198:
      case 6199:
      case 6200:
      case 6201:
      case 6202:
      case 6203:
      case 6204:
      case 6205:
      case 6206:
      case 6207:
      case 6208:
      case 6209:
      case 6210:
      case 6211:
      case 6212:
      case 6213:
      case 6214:
      case 6215:
      case 6216:
      case 6217:
      case 6218:
      case 6219:
      case 6220:
      case 6221:
      case 6223:
      case 6224:
      case 6225:
      case 6226:
      case 6227:
      case 6228:
      case 6229:
      case 6230:
      case 6231:
      case 6232:
      case 6233:
      case 6234:
      case 6235:
      case 6236:
      case 6237:
      case 6238:
      case 6239:
      case 6240:
      case 6241:
      case 6242:
      case 6243:
      case 6244:
      case 6245:
      case 6246:
      case 6247:
      case 6248:
      case 6249:
      case 6256:
      case 6257:
      case 6258:
      case 6259:
      case 6260:
      case 6261:
      case 6262:
      case 6263:
      case 6264:
      case 6265:
      case 6266:
      case 6267:
      case 6268:
      case 6269:
      case 6270:
      case 6271:
      case 6272:
      case 6273:
      case 6274:
      case 6275:
      case 6276:
      case 6277:
      case 6278:
      case 6279:
      case 6280:
      case 6281:
      case 6282:
      case 6283:
      case 6284:
      case 6285:
      case 6286:
      case 6287:
      case 6288:
      case 6289:
      case 6290:
      case 6291:
      case 6292:
      case 6293:
      case 6294:
      case 6295:
      case 6296:
      case 6297:
      case 6298:
      case 6299:
      case 6300:
      case 6301:
      case 6302:
      case 6303:
      case 6304:
      case 6305:
      case 6306:
      case 6307:
      case 6308:
      case 6309:
      case 6310:
      case 6311:
      case 6312:
      case 6313:
      case 6314:
      case 6315:
      case 6316:
      case 6317:
      case 6318:
      case 6319:
      case 6320:
      case 6321:
      case 6322:
      case 6323:
      case 6324:
      case 6325:
      case 6326:
      case 6327:
      case 6328:
      case 6329:
      case 6330:
      case 6331:
      case 6332:
      case 6333:
      case 6334:
      case 6335:
      case 6336:
      case 9228:
      case 9229:
      case 9230:
      case 9231:
      case 9232:
      case 9233:
      case 9234:
      case 9235:
      case 9236:
      case 9237:
      case 9238:
      case 9239:
      case 9240:
      case 9241:
      case 9242:
      case 9243:
      case 9244:
      case 9245:
      case 9246:
      case 9247:
      case 9248:
      case 9249:
      case 9250:
      case 9251:
      case 9252:
      case 9253:
      case 9254:
      case 9255:
      case 9256:
      case 9257:
      case 9258:
      case 9259:
      case 9260:
      case 9261:
      case 9262:
      case 9263:
      case 9264:
      case 9265:
      case 9266:
      case 9267:
      case 9268:
      case 9269:
      case 9270:
      case 9271:
      case 9272:
      case 9273:
      case 9274:
      case 9275:
      case 9276:
      case 9277:
      case 9278:
      case 9279:
      case 9280:
      case 9281:
      case 9284:
        sub_1CD444250(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 414:
      case 6846:
        sub_1CD44B26C(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 415:
      case 417:
      case 419:
      case 421:
      case 423:
      case 425:
        sub_1CD4447D8(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 427:
      case 428:
      case 429:
      case 430:
      case 431:
      case 432:
      case 433:
      case 434:
      case 435:
      case 4330:
      case 4331:
      case 4332:
      case 4333:
      case 4334:
      case 4335:
      case 4336:
      case 4337:
      case 4338:
      case 6707:
      case 6708:
      case 6709:
      case 6710:
      case 6711:
      case 6712:
      case 6713:
      case 6714:
      case 6715:
        sub_1CD447044(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 436:
      case 437:
      case 438:
      case 439:
      case 440:
      case 441:
      case 442:
      case 443:
      case 444:
      case 445:
      case 446:
      case 447:
      case 448:
      case 449:
      case 450:
      case 451:
      case 452:
      case 453:
      case 454:
      case 455:
      case 456:
      case 457:
      case 458:
      case 459:
      case 460:
      case 461:
      case 462:
      case 463:
      case 464:
      case 465:
      case 466:
      case 467:
      case 468:
      case 469:
      case 470:
      case 471:
      case 472:
      case 473:
      case 474:
      case 475:
      case 476:
      case 477:
      case 478:
      case 479:
      case 480:
      case 481:
      case 482:
      case 483:
      case 484:
      case 485:
      case 486:
      case 487:
      case 488:
      case 489:
      case 490:
      case 491:
      case 492:
      case 493:
      case 494:
      case 495:
      case 496:
      case 497:
      case 498:
      case 499:
      case 500:
      case 501:
      case 502:
      case 503:
      case 504:
      case 505:
      case 506:
      case 507:
      case 508:
      case 509:
      case 510:
      case 511:
      case 512:
      case 513:
      case 514:
      case 515:
      case 516:
        sub_1CD44A198(a1, a2, a3, a4, a5);
        break;
      case 517:
      case 518:
      case 519:
        sub_1CD44C584(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 520:
      case 521:
      case 522:
      case 523:
      case 524:
      case 525:
      case 526:
      case 527:
      case 528:
      case 529:
      case 530:
      case 531:
      case 532:
      case 533:
      case 534:
      case 535:
      case 536:
      case 537:
        sub_1CD44B938(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 538:
      case 539:
        sub_1CD444878(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 540:
      case 541:
      case 542:
      case 543:
      case 545:
      case 546:
      case 548:
      case 549:
        sub_1CD44496C(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 544:
        sub_1CD444A3C(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 547:
        sub_1CD444910(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 550:
        sub_1CD44C2D4((int *)a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 551:
      case 552:
      case 553:
      case 554:
      case 555:
      case 556:
        sub_1CD4445D8(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 557:
      case 558:
      case 559:
      case 560:
      case 561:
      case 562:
      case 563:
      case 564:
      case 565:
        sub_1CD4446F8(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 566:
      case 567:
      case 568:
        sub_1CD44B3E8(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 569:
      case 570:
      case 571:
      case 572:
      case 573:
      case 574:
      case 575:
      case 576:
      case 577:
      case 578:
      case 579:
      case 580:
      case 581:
      case 582:
      case 583:
      case 584:
      case 585:
      case 586:
      case 587:
      case 588:
      case 589:
      case 590:
      case 591:
      case 592:
      case 593:
      case 594:
      case 595:
      case 596:
      case 597:
      case 598:
      case 599:
      case 600:
      case 601:
      case 602:
      case 603:
      case 604:
      case 605:
      case 606:
      case 607:
      case 608:
      case 609:
      case 610:
      case 611:
      case 612:
      case 613:
      case 614:
      case 615:
      case 616:
      case 617:
      case 618:
      case 619:
      case 620:
      case 621:
      case 622:
        sub_1CD44C37C(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 623:
      case 9205:
        sub_1CD44359C(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 624:
      case 625:
      case 626:
      case 627:
      case 628:
      case 629:
      case 630:
      case 631:
      case 632:
      case 633:
      case 634:
      case 635:
      case 636:
      case 637:
      case 638:
      case 639:
      case 640:
      case 641:
      case 642:
      case 643:
      case 644:
      case 645:
      case 646:
      case 647:
      case 648:
      case 649:
      case 650:
      case 651:
      case 652:
      case 653:
      case 654:
      case 655:
      case 656:
      case 657:
      case 658:
      case 659:
      case 660:
      case 661:
      case 662:
      case 663:
      case 664:
      case 665:
      case 666:
      case 667:
      case 668:
      case 669:
      case 670:
      case 671:
      case 672:
      case 673:
      case 674:
      case 675:
      case 676:
      case 677:
      case 678:
      case 679:
      case 680:
      case 681:
      case 682:
      case 683:
      case 684:
      case 685:
      case 686:
      case 687:
      case 688:
      case 689:
      case 690:
      case 691:
      case 692:
      case 693:
      case 694:
      case 695:
      case 696:
      case 697:
      case 698:
      case 699:
      case 700:
      case 701:
      case 702:
      case 703:
      case 704:
      case 6997:
      case 6998:
      case 6999:
      case 7000:
      case 7001:
      case 7002:
      case 7003:
      case 7004:
      case 7005:
      case 7006:
      case 7007:
      case 7008:
      case 7009:
      case 7010:
      case 7011:
      case 7012:
      case 7013:
      case 7014:
      case 7015:
      case 7016:
      case 7017:
      case 7018:
      case 7019:
      case 7020:
      case 7021:
      case 7022:
      case 7023:
      case 7024:
      case 7025:
      case 7026:
      case 7027:
      case 7028:
      case 7029:
      case 7030:
      case 7031:
      case 7032:
      case 7033:
      case 7034:
      case 7035:
      case 7036:
      case 7037:
      case 7038:
      case 7039:
      case 7040:
      case 7041:
      case 7042:
      case 7043:
      case 7044:
      case 7045:
      case 7046:
      case 7047:
      case 7048:
      case 7049:
      case 7050:
      case 7051:
      case 7052:
      case 7053:
      case 7054:
      case 7055:
      case 7056:
      case 7057:
      case 7058:
      case 7059:
      case 7060:
      case 7061:
      case 7062:
      case 7063:
      case 7064:
      case 7065:
      case 7066:
      case 7067:
      case 7068:
      case 7069:
      case 7070:
      case 7071:
      case 7072:
      case 7073:
      case 7074:
      case 7075:
      case 7076:
      case 7077:
      case 7078:
      case 7079:
      case 7080:
      case 7081:
      case 7082:
      case 7083:
      case 7084:
      case 7085:
      case 7086:
      case 7087:
      case 7088:
      case 7089:
      case 7090:
      case 7091:
      case 7092:
      case 7093:
      case 7094:
      case 7095:
      case 7096:
      case 7097:
      case 7098:
      case 7099:
      case 7100:
      case 7101:
      case 7102:
      case 7103:
      case 7104:
      case 7105:
      case 7106:
      case 7107:
      case 7108:
      case 7109:
      case 7110:
      case 7111:
      case 7112:
      case 7113:
      case 7114:
      case 7115:
      case 7116:
      case 7117:
      case 7118:
      case 7119:
      case 7120:
      case 7121:
      case 7122:
      case 7123:
      case 7124:
      case 7125:
      case 7126:
      case 7127:
      case 7128:
      case 7129:
      case 7130:
      case 7131:
      case 7132:
      case 7133:
      case 7134:
      case 7135:
      case 7136:
      case 7137:
      case 7138:
      case 7139:
      case 7140:
      case 7141:
      case 7142:
      case 7143:
      case 7144:
      case 7145:
      case 7146:
      case 7147:
      case 7148:
      case 7149:
      case 7150:
      case 7151:
      case 7152:
      case 7153:
      case 7154:
      case 7155:
      case 7156:
      case 7157:
      case 7158:
      case 8851:
      case 8852:
      case 8853:
      case 8854:
      case 8855:
      case 8856:
      case 8857:
      case 8858:
      case 8859:
      case 8860:
      case 8861:
      case 8862:
      case 8863:
      case 8864:
      case 8865:
      case 8866:
      case 8867:
      case 8868:
      case 8869:
      case 8870:
      case 8871:
      case 8872:
      case 8873:
      case 8874:
      case 8875:
      case 8876:
      case 8877:
      case 8878:
      case 8879:
      case 8880:
      case 8881:
      case 8882:
      case 8883:
      case 8884:
      case 8885:
      case 8886:
      case 8887:
      case 8888:
      case 8889:
      case 8890:
      case 8891:
      case 8892:
      case 8893:
      case 8894:
      case 8895:
      case 8896:
      case 8897:
      case 8898:
      case 8899:
      case 8900:
      case 8901:
      case 8902:
      case 8903:
      case 8904:
      case 8905:
      case 8906:
      case 8907:
      case 8908:
      case 8909:
      case 8910:
      case 8911:
      case 8912:
      case 8913:
      case 8914:
      case 8915:
      case 8916:
      case 8917:
      case 8918:
      case 8919:
      case 8920:
      case 8921:
      case 8922:
      case 8923:
      case 8924:
      case 8925:
      case 8926:
      case 8927:
      case 8928:
      case 8929:
      case 8930:
      case 8931:
      case 8932:
      case 8933:
      case 8934:
      case 8935:
      case 8936:
      case 8937:
      case 8938:
      case 8939:
      case 8940:
      case 8941:
      case 8942:
      case 8943:
      case 8944:
      case 8945:
      case 8946:
      case 8947:
      case 8948:
      case 8949:
      case 8950:
      case 8951:
      case 8952:
      case 8953:
      case 8954:
      case 8955:
      case 8956:
      case 8957:
      case 8958:
      case 8959:
      case 8960:
      case 8961:
      case 8962:
      case 8963:
      case 8964:
      case 8965:
      case 8966:
      case 8967:
      case 8968:
      case 8969:
      case 8970:
      case 8971:
      case 8972:
      case 8973:
      case 8974:
      case 8975:
      case 8976:
      case 8977:
      case 8978:
      case 8979:
      case 8980:
      case 8981:
      case 8982:
      case 8983:
      case 8984:
      case 8985:
      case 8986:
      case 8987:
      case 8988:
      case 8989:
      case 8990:
      case 8991:
      case 8992:
      case 8993:
      case 8994:
      case 8995:
      case 8996:
      case 8997:
      case 8998:
      case 8999:
      case 9000:
      case 9001:
      case 9002:
      case 9003:
      case 9004:
      case 9005:
      case 9006:
      case 9007:
      case 9008:
      case 9009:
      case 9010:
      case 9011:
      case 9012:
        sub_1CD446D44(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 705:
      case 706:
      case 707:
      case 708:
      case 709:
      case 710:
      case 711:
      case 712:
      case 713:
      case 714:
      case 715:
      case 716:
      case 717:
      case 718:
      case 719:
      case 720:
      case 793:
      case 794:
      case 795:
      case 796:
      case 797:
      case 798:
      case 799:
      case 800:
      case 801:
      case 802:
      case 803:
      case 804:
      case 805:
      case 806:
      case 807:
      case 808:
        sub_1CD446048(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 721:
      case 722:
      case 723:
      case 724:
      case 725:
      case 726:
      case 727:
      case 728:
      case 729:
      case 730:
      case 731:
      case 732:
      case 733:
      case 734:
      case 735:
      case 736:
      case 737:
      case 738:
      case 739:
      case 740:
      case 741:
      case 742:
      case 743:
      case 744:
      case 745:
      case 746:
      case 747:
      case 748:
      case 749:
      case 750:
      case 751:
      case 752:
        sub_1CD446198(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 753:
      case 754:
      case 755:
      case 756:
      case 757:
      case 758:
      case 759:
      case 760:
        sub_1CBDA4F2C(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 761:
      case 762:
      case 763:
      case 764:
      case 765:
      case 766:
      case 767:
      case 768:
      case 769:
      case 770:
      case 771:
      case 772:
      case 773:
      case 774:
      case 775:
      case 776:
      case 777:
      case 778:
      case 779:
      case 780:
      case 781:
      case 782:
      case 783:
      case 784:
      case 785:
      case 786:
      case 787:
      case 788:
      case 789:
      case 790:
      case 791:
      case 792:
        sub_1CD446314(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 809:
      case 810:
      case 811:
      case 812:
      case 813:
      case 814:
      case 815:
      case 816:
      case 817:
      case 818:
      case 819:
      case 820:
      case 821:
      case 822:
      case 823:
      case 824:
      case 825:
      case 826:
      case 827:
      case 828:
      case 829:
      case 830:
      case 831:
      case 832:
      case 833:
      case 834:
      case 835:
      case 836:
      case 837:
      case 838:
      case 839:
      case 840:
      case 841:
      case 842:
      case 843:
      case 844:
      case 845:
      case 846:
      case 847:
      case 848:
      case 849:
      case 850:
      case 851:
      case 852:
      case 853:
      case 854:
      case 855:
      case 856:
      case 857:
      case 858:
      case 859:
      case 860:
      case 861:
      case 862:
      case 863:
      case 864:
      case 865:
      case 866:
      case 867:
      case 868:
      case 869:
      case 870:
      case 871:
      case 872:
      case 873:
      case 874:
      case 875:
      case 876:
      case 877:
      case 878:
      case 879:
      case 880:
      case 881:
      case 882:
      case 883:
      case 884:
      case 885:
      case 886:
      case 887:
      case 888:
      case 889:
      case 890:
      case 891:
      case 892:
      case 893:
      case 894:
      case 895:
      case 896:
      case 897:
      case 898:
      case 899:
      case 900:
      case 901:
      case 902:
      case 903:
      case 904:
      case 905:
      case 906:
      case 907:
      case 908:
      case 909:
      case 910:
      case 911:
      case 912:
      case 913:
      case 914:
      case 915:
      case 916:
      case 917:
      case 918:
      case 919:
      case 920:
      case 921:
      case 922:
      case 923:
      case 924:
      case 925:
      case 926:
      case 927:
      case 928:
      case 929:
      case 930:
      case 931:
      case 932:
      case 933:
      case 934:
      case 935:
      case 936:
      case 937:
      case 938:
      case 939:
      case 940:
      case 941:
      case 942:
      case 943:
      case 944:
      case 945:
      case 946:
      case 947:
      case 948:
      case 949:
      case 950:
      case 951:
      case 952:
      case 953:
      case 954:
      case 955:
      case 956:
      case 957:
      case 958:
      case 959:
      case 960:
      case 961:
      case 962:
      case 963:
      case 964:
      case 965:
      case 966:
      case 967:
      case 968:
      case 969:
      case 970:
      case 971:
      case 972:
      case 973:
      case 974:
      case 975:
      case 976:
      case 977:
      case 978:
      case 979:
      case 980:
      case 981:
      case 982:
      case 983:
      case 984:
      case 985:
      case 986:
      case 987:
      case 988:
      case 989:
      case 990:
      case 991:
      case 992:
      case 993:
      case 994:
      case 995:
      case 996:
      case 997:
      case 998:
      case 999:
      case 1000:
      case 1001:
      case 1002:
      case 1003:
      case 1004:
      case 1005:
      case 1006:
      case 1007:
      case 1008:
      case 1009:
      case 1010:
      case 1011:
      case 1012:
      case 1013:
      case 1014:
      case 1015:
      case 1016:
      case 1017:
      case 1018:
      case 1019:
      case 1020:
      case 1021:
      case 1022:
      case 1023:
      case 1024:
      case 1025:
      case 1026:
      case 1027:
      case 1028:
      case 1029:
      case 1030:
      case 1031:
      case 1032:
        sub_1CD444FF0(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 1033:
      case 1034:
      case 1035:
      case 1036:
      case 1037:
      case 1038:
      case 1039:
      case 1040:
      case 1041:
      case 1042:
      case 1043:
      case 1044:
      case 1045:
      case 1046:
      case 1047:
      case 1048:
      case 1049:
      case 1050:
      case 1051:
      case 1052:
      case 1053:
      case 1054:
      case 1055:
      case 1056:
      case 1057:
      case 1058:
      case 1059:
      case 1060:
      case 1061:
      case 1062:
      case 1063:
      case 1064:
      case 1065:
      case 1066:
      case 1067:
      case 1068:
      case 1069:
      case 1070:
      case 1071:
      case 1072:
      case 1073:
      case 1074:
      case 1075:
      case 1076:
      case 1077:
      case 1078:
      case 1079:
      case 1080:
      case 1081:
      case 1082:
      case 1083:
      case 1084:
      case 1085:
      case 1086:
      case 1087:
      case 1088:
      case 1089:
      case 1090:
      case 1091:
      case 1092:
      case 1093:
      case 1094:
      case 1095:
      case 1096:
      case 1097:
      case 1098:
      case 1099:
      case 1100:
      case 1101:
      case 1102:
      case 1103:
      case 1104:
      case 1105:
      case 1106:
      case 1107:
      case 1108:
      case 1109:
      case 1110:
      case 1111:
      case 1112:
      case 1113:
      case 1114:
      case 1115:
      case 1116:
      case 1117:
      case 1118:
      case 1119:
      case 1120:
      case 1121:
      case 1122:
      case 1123:
      case 1124:
      case 1125:
      case 1126:
      case 1127:
      case 1128:
      case 2252:
      case 2253:
      case 2254:
      case 2255:
      case 2256:
      case 2257:
      case 2258:
      case 2259:
      case 2260:
      case 2261:
      case 2262:
      case 2263:
      case 2264:
      case 2265:
      case 2266:
      case 2267:
      case 2268:
      case 2269:
      case 2270:
      case 2271:
      case 2272:
      case 2273:
      case 2274:
      case 2275:
      case 2276:
      case 2277:
      case 2278:
      case 2279:
      case 2280:
      case 2281:
      case 2282:
      case 2283:
      case 3500:
      case 3501:
      case 3502:
      case 3503:
      case 3504:
      case 3505:
      case 3506:
      case 3507:
      case 3508:
      case 3509:
      case 3510:
      case 3511:
      case 3512:
      case 3513:
      case 3514:
      case 3515:
      case 3516:
      case 3517:
      case 3518:
      case 3519:
      case 3520:
      case 3521:
      case 3522:
      case 3523:
      case 3524:
      case 3525:
      case 3526:
      case 3527:
      case 3528:
      case 3529:
      case 3530:
      case 3531:
      case 3532:
      case 3533:
      case 3534:
      case 3535:
      case 3536:
      case 3537:
      case 3538:
      case 3539:
      case 3540:
      case 3541:
      case 3542:
      case 3543:
      case 3544:
      case 3545:
      case 3546:
      case 3547:
      case 3548:
      case 3549:
      case 3550:
      case 3551:
      case 3552:
      case 3553:
      case 3554:
      case 3555:
      case 3556:
      case 3557:
      case 3558:
      case 3559:
      case 3560:
      case 3561:
      case 3562:
      case 3563:
      case 3564:
      case 3565:
      case 3566:
      case 3567:
      case 3568:
      case 3569:
      case 3570:
      case 3571:
      case 3572:
      case 3573:
      case 3574:
      case 3575:
      case 3576:
      case 3577:
      case 3578:
      case 3579:
      case 3580:
      case 3581:
      case 3582:
      case 3583:
      case 3584:
      case 3585:
      case 3586:
      case 3587:
      case 3588:
      case 3589:
      case 3590:
      case 3591:
      case 3592:
      case 3593:
      case 3594:
      case 3595:
        sub_1CD445C94(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 1129:
      case 1130:
      case 1131:
      case 1132:
      case 1133:
      case 1134:
      case 1135:
      case 1136:
      case 1137:
      case 1138:
      case 1139:
      case 1140:
      case 1141:
      case 1142:
      case 1143:
      case 1144:
      case 1145:
      case 1146:
      case 1147:
      case 1148:
      case 1149:
      case 1150:
      case 1151:
      case 1152:
      case 1153:
      case 1154:
      case 1155:
      case 1156:
      case 1157:
      case 1158:
      case 1159:
      case 1160:
      case 1161:
      case 1162:
      case 1163:
      case 1164:
      case 1165:
      case 1166:
      case 1167:
      case 1168:
      case 1169:
      case 1170:
      case 1171:
      case 1172:
      case 1173:
      case 1174:
      case 1175:
      case 1176:
      case 1177:
      case 1178:
      case 1179:
      case 1180:
      case 1181:
      case 1182:
      case 1183:
      case 1184:
      case 1185:
      case 1186:
      case 1187:
      case 1188:
      case 1189:
      case 1190:
      case 1191:
      case 1192:
      case 1193:
      case 1194:
      case 1195:
      case 1196:
      case 1197:
      case 1198:
      case 1199:
      case 1200:
      case 1201:
      case 1202:
      case 1203:
      case 1204:
      case 1205:
      case 1206:
      case 1207:
      case 1208:
      case 1209:
      case 1210:
      case 1211:
      case 1212:
      case 1213:
      case 1214:
      case 1215:
      case 1216:
      case 1217:
      case 1218:
      case 1219:
      case 1220:
      case 1221:
      case 1222:
      case 1223:
      case 1224:
      case 1225:
      case 1226:
      case 1227:
      case 1228:
      case 1229:
      case 1230:
      case 1231:
      case 1232:
      case 1233:
      case 1234:
      case 1235:
      case 1236:
      case 1237:
      case 1238:
      case 1239:
      case 1240:
      case 1241:
      case 1242:
      case 1243:
      case 1244:
      case 1245:
      case 1246:
      case 1247:
      case 1248:
      case 1249:
      case 1250:
      case 1251:
      case 1252:
      case 1253:
      case 1254:
      case 1255:
      case 1256:
      case 1257:
      case 1258:
      case 1259:
      case 1260:
      case 1261:
      case 1262:
      case 1263:
      case 1264:
      case 1265:
      case 1266:
      case 1267:
      case 1268:
      case 1269:
      case 1270:
      case 1271:
      case 1272:
      case 1273:
      case 1274:
      case 1275:
      case 1276:
      case 1277:
      case 1278:
      case 1279:
      case 1280:
      case 1281:
      case 1282:
      case 1283:
      case 1284:
      case 1285:
      case 1286:
      case 1287:
      case 1288:
      case 1289:
      case 1290:
      case 1291:
      case 1292:
      case 1293:
      case 1294:
      case 1295:
      case 1296:
      case 1297:
      case 1298:
      case 1299:
      case 1300:
      case 1301:
      case 1302:
      case 1303:
      case 1304:
      case 1305:
      case 1306:
      case 1307:
      case 1308:
      case 1309:
      case 1310:
      case 1311:
      case 1312:
      case 1313:
      case 1314:
      case 1315:
      case 1316:
      case 1317:
      case 1318:
      case 1319:
      case 1320:
      case 1321:
      case 1322:
      case 1323:
      case 1324:
      case 1325:
      case 1326:
      case 1327:
      case 1328:
      case 1329:
      case 1330:
      case 1331:
      case 1332:
      case 1333:
      case 1334:
      case 1335:
      case 1336:
      case 1337:
      case 1338:
      case 1339:
      case 1340:
      case 1341:
      case 1342:
      case 1343:
      case 1344:
      case 1345:
      case 1346:
      case 1347:
      case 1348:
      case 1349:
      case 1350:
      case 1351:
      case 1352:
      case 1353:
      case 1354:
      case 1355:
      case 1356:
      case 1357:
      case 1358:
      case 1359:
      case 1360:
      case 1361:
      case 1362:
      case 1363:
      case 1364:
      case 1365:
      case 1366:
      case 1367:
      case 1368:
      case 1369:
      case 1370:
      case 1371:
      case 1372:
      case 1373:
      case 1374:
      case 1375:
      case 1376:
      case 1377:
      case 1378:
      case 1379:
      case 1380:
      case 1381:
      case 1382:
      case 1383:
      case 1384:
      case 1897:
      case 1898:
      case 1899:
      case 1900:
      case 1901:
      case 1902:
      case 1903:
      case 1904:
      case 1905:
      case 1906:
      case 1907:
      case 1908:
      case 1909:
      case 1910:
      case 1911:
      case 1912:
      case 1913:
      case 1914:
      case 1915:
      case 1916:
      case 1917:
      case 1918:
      case 1919:
      case 1920:
      case 1921:
      case 1922:
      case 1923:
      case 1924:
      case 1925:
      case 1926:
      case 1927:
      case 1928:
      case 1929:
      case 1930:
      case 1931:
      case 1932:
      case 1933:
      case 1934:
      case 1935:
      case 1936:
      case 1937:
      case 1938:
      case 1939:
      case 1940:
      case 1941:
      case 1942:
      case 1943:
      case 1944:
      case 1945:
      case 1946:
      case 1947:
      case 1948:
      case 1949:
      case 1950:
      case 1951:
      case 1952:
      case 1953:
      case 1954:
      case 1955:
      case 1956:
      case 1957:
      case 1958:
      case 1959:
      case 1960:
      case 1961:
      case 1962:
      case 1963:
      case 1964:
      case 1965:
      case 1966:
      case 1967:
      case 1968:
      case 1969:
      case 1970:
      case 1971:
      case 1972:
      case 1973:
      case 1974:
      case 1975:
      case 1976:
      case 1977:
      case 1978:
      case 1979:
      case 1980:
      case 1981:
      case 1982:
      case 1983:
      case 1984:
      case 1985:
      case 1986:
      case 1987:
      case 1988:
      case 1989:
      case 1990:
      case 1991:
      case 1992:
      case 1993:
      case 1994:
      case 1995:
      case 1996:
      case 1997:
      case 1998:
      case 1999:
      case 2000:
      case 2001:
      case 2002:
      case 2003:
      case 2004:
      case 2005:
      case 2006:
      case 2007:
      case 2008:
      case 2009:
      case 2010:
      case 2011:
      case 2012:
      case 2013:
      case 2014:
      case 2015:
      case 2016:
      case 2017:
      case 2018:
      case 2019:
      case 2020:
      case 2021:
      case 2022:
      case 2023:
      case 2024:
      case 2025:
      case 2026:
      case 2027:
      case 2028:
      case 2029:
      case 2030:
      case 2031:
      case 2032:
      case 2033:
      case 2034:
      case 2035:
      case 2036:
      case 2037:
      case 2038:
      case 2039:
      case 2040:
      case 2041:
      case 2042:
      case 2043:
      case 2044:
      case 2045:
      case 2046:
      case 2047:
      case 2048:
      case 2049:
      case 2050:
      case 2051:
      case 2052:
      case 2053:
      case 2054:
      case 2055:
      case 2056:
      case 2057:
      case 2058:
      case 2059:
      case 2060:
      case 2061:
      case 2062:
      case 2063:
      case 2064:
      case 2065:
      case 2066:
      case 2067:
      case 2068:
      case 2069:
      case 2070:
      case 2071:
      case 2072:
      case 2073:
      case 2074:
      case 2075:
      case 2076:
      case 2077:
      case 2078:
      case 2079:
      case 2080:
      case 2081:
      case 2082:
      case 2083:
      case 2084:
      case 2085:
      case 2086:
      case 2087:
      case 2088:
      case 2089:
      case 2090:
      case 2091:
      case 2092:
      case 2093:
      case 2094:
      case 2095:
      case 2096:
      case 2097:
      case 2098:
      case 2099:
      case 2100:
      case 2101:
      case 2102:
      case 2103:
      case 2104:
      case 2105:
      case 2106:
      case 2107:
      case 2108:
      case 2109:
      case 2110:
      case 2111:
      case 2112:
      case 2113:
      case 2114:
      case 2115:
      case 2116:
      case 2117:
      case 2118:
      case 2119:
      case 2120:
      case 2121:
      case 2122:
      case 2123:
      case 2124:
      case 2125:
      case 2126:
      case 2127:
      case 2128:
      case 2129:
      case 2130:
      case 2131:
      case 2132:
      case 2133:
      case 2134:
      case 2135:
      case 2136:
      case 2137:
      case 2138:
      case 2139:
      case 2140:
      case 2141:
      case 2142:
      case 2143:
      case 2144:
      case 2145:
      case 2146:
      case 2147:
      case 2148:
      case 2149:
      case 2150:
      case 2151:
      case 2152:
        sub_1CD4454C8(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 1385:
      case 1386:
      case 1387:
      case 1388:
      case 1389:
      case 1390:
      case 1391:
      case 1392:
      case 1393:
      case 1394:
      case 1395:
      case 1396:
      case 1397:
      case 1398:
      case 1399:
      case 1400:
      case 1401:
      case 1402:
      case 1403:
      case 1404:
      case 1405:
      case 1406:
      case 1407:
      case 1408:
      case 1409:
      case 1410:
      case 1411:
      case 1412:
      case 1413:
      case 1414:
      case 1415:
      case 1416:
      case 1417:
      case 1418:
      case 1419:
      case 1420:
      case 1421:
      case 1422:
      case 1423:
      case 1424:
      case 1425:
      case 1426:
      case 1427:
      case 1428:
      case 1429:
      case 1430:
      case 1431:
      case 1432:
      case 1433:
      case 1434:
      case 1435:
      case 1436:
      case 1437:
      case 1438:
      case 1439:
      case 1440:
      case 1441:
      case 1442:
      case 1443:
      case 1444:
      case 1445:
      case 1446:
      case 1447:
      case 1448:
      case 1449:
      case 1450:
      case 1451:
      case 1452:
      case 1453:
      case 1454:
      case 1455:
      case 1456:
      case 1457:
      case 1458:
      case 1459:
      case 1460:
      case 1461:
      case 1462:
      case 1463:
      case 1464:
      case 1465:
      case 1466:
      case 1467:
      case 1468:
      case 1469:
      case 1470:
      case 1471:
      case 1472:
      case 1473:
      case 1474:
      case 1475:
      case 1476:
      case 1477:
      case 1478:
      case 1479:
      case 1480:
      case 1481:
      case 1482:
      case 1483:
      case 1484:
      case 1485:
      case 1486:
      case 1487:
      case 1488:
      case 1489:
      case 1490:
      case 1491:
      case 1492:
      case 1493:
      case 1494:
      case 1495:
      case 1496:
      case 1497:
      case 1498:
      case 1499:
      case 1500:
      case 1501:
      case 1502:
      case 1503:
      case 1504:
      case 1505:
      case 1506:
      case 1507:
      case 1508:
      case 1509:
      case 1510:
      case 1511:
      case 1512:
      case 1513:
      case 1514:
      case 1515:
      case 1516:
      case 1517:
      case 1518:
      case 1519:
      case 1520:
      case 1521:
      case 1522:
      case 1523:
      case 1524:
      case 1525:
      case 1526:
      case 1527:
      case 1528:
      case 1529:
      case 1530:
      case 1531:
      case 1532:
      case 1533:
      case 1534:
      case 1535:
      case 1536:
      case 1537:
      case 1538:
      case 1539:
      case 1540:
      case 1541:
      case 1542:
      case 1543:
      case 1544:
      case 1545:
      case 1546:
      case 1547:
      case 1548:
      case 1549:
      case 1550:
      case 1551:
      case 1552:
      case 1553:
      case 1554:
      case 1555:
      case 1556:
      case 1557:
      case 1558:
      case 1559:
      case 1560:
      case 1561:
      case 1562:
      case 1563:
      case 1564:
      case 1565:
      case 1566:
      case 1567:
      case 1568:
      case 1569:
      case 1570:
      case 1571:
      case 1572:
      case 1573:
      case 1574:
      case 1575:
      case 1576:
      case 1577:
      case 1578:
      case 1579:
      case 1580:
      case 1581:
      case 1582:
      case 1583:
      case 1584:
      case 1585:
      case 1586:
      case 1587:
      case 1588:
      case 1589:
      case 1590:
      case 1591:
      case 1592:
      case 1593:
      case 1594:
      case 1595:
      case 1596:
      case 1597:
      case 1598:
      case 1599:
      case 1600:
      case 1601:
      case 1602:
      case 1603:
      case 1604:
      case 1605:
      case 1606:
      case 1607:
      case 1608:
      case 1609:
      case 1610:
      case 1611:
      case 1612:
      case 1613:
      case 1614:
      case 1615:
      case 1616:
      case 1617:
      case 1618:
      case 1619:
      case 1620:
      case 1621:
      case 1622:
      case 1623:
      case 1624:
      case 1625:
      case 1626:
      case 1627:
      case 1628:
      case 1629:
      case 1630:
      case 1631:
      case 1632:
      case 1633:
      case 1634:
      case 1635:
      case 1636:
      case 1637:
      case 1638:
      case 1639:
      case 1640:
      case 1641:
      case 1642:
      case 1643:
      case 1644:
      case 1645:
      case 1646:
      case 1647:
      case 1648:
      case 1649:
      case 1650:
      case 1651:
      case 1652:
      case 1653:
      case 1654:
      case 1655:
      case 1656:
      case 1657:
      case 1658:
      case 1659:
      case 1660:
      case 1661:
      case 1662:
      case 1663:
      case 1664:
      case 1665:
      case 1666:
      case 1667:
      case 1668:
      case 1669:
      case 1670:
      case 1671:
      case 1672:
      case 1673:
      case 1674:
      case 1675:
      case 1676:
      case 1677:
      case 1678:
      case 1679:
      case 1680:
      case 1681:
      case 1682:
      case 1683:
      case 1684:
      case 1685:
      case 1686:
      case 1687:
      case 1688:
      case 1689:
      case 1690:
      case 1691:
      case 1692:
      case 1693:
      case 1694:
      case 1695:
      case 1696:
      case 1697:
      case 1698:
      case 1699:
      case 1700:
      case 1701:
      case 1702:
      case 1703:
      case 1704:
      case 1705:
      case 1706:
      case 1707:
      case 1708:
      case 1709:
      case 1710:
      case 1711:
      case 1712:
      case 1713:
      case 1714:
      case 1715:
      case 1716:
      case 1717:
      case 1718:
      case 1719:
      case 1720:
      case 1721:
      case 1722:
      case 1723:
      case 1724:
      case 1725:
      case 1726:
      case 1727:
      case 1728:
      case 1729:
      case 1730:
      case 1731:
      case 1732:
      case 1733:
      case 1734:
      case 1735:
      case 1736:
      case 1737:
      case 1738:
      case 1739:
      case 1740:
      case 1741:
      case 1742:
      case 1743:
      case 1744:
      case 1745:
      case 1746:
      case 1747:
      case 1748:
      case 1749:
      case 1750:
      case 1751:
      case 1752:
      case 1753:
      case 1754:
      case 1755:
      case 1756:
      case 1757:
      case 1758:
      case 1759:
      case 1760:
      case 1761:
      case 1762:
      case 1763:
      case 1764:
      case 1765:
      case 1766:
      case 1767:
      case 1768:
      case 1769:
      case 1770:
      case 1771:
      case 1772:
      case 1773:
      case 1774:
      case 1775:
      case 1776:
      case 1777:
      case 1778:
      case 1779:
      case 1780:
      case 1781:
      case 1782:
      case 1783:
      case 1784:
      case 1785:
      case 1786:
      case 1787:
      case 1788:
      case 1789:
      case 1790:
      case 1791:
      case 1792:
      case 1793:
      case 1794:
      case 1795:
      case 1796:
      case 1797:
      case 1798:
      case 1799:
      case 1800:
      case 1801:
      case 1802:
      case 1803:
      case 1804:
      case 1805:
      case 1806:
      case 1807:
      case 1808:
      case 1809:
      case 1810:
      case 1811:
      case 1812:
      case 1813:
      case 1814:
      case 1815:
      case 1816:
      case 1817:
      case 1818:
      case 1819:
      case 1820:
      case 1821:
      case 1822:
      case 1823:
      case 1824:
      case 1825:
      case 1826:
      case 1827:
      case 1828:
      case 1829:
      case 1830:
      case 1831:
      case 1832:
      case 1833:
      case 1834:
      case 1835:
      case 1836:
      case 1837:
      case 1838:
      case 1839:
      case 1840:
      case 1841:
      case 1842:
      case 1843:
      case 1844:
      case 1845:
      case 1846:
      case 1847:
      case 1848:
      case 1849:
      case 1850:
      case 1851:
      case 1852:
      case 1853:
      case 1854:
      case 1855:
      case 1856:
      case 1857:
      case 1858:
      case 1859:
      case 1860:
      case 1861:
      case 1862:
      case 1863:
      case 1864:
      case 1865:
      case 1866:
      case 1867:
      case 1868:
      case 1869:
      case 1870:
      case 1871:
      case 1872:
      case 1873:
      case 1874:
      case 1875:
      case 1876:
      case 1877:
      case 1878:
      case 1879:
      case 1880:
      case 1881:
      case 1882:
      case 1883:
      case 1884:
      case 1885:
      case 1886:
      case 1887:
      case 1888:
      case 1889:
      case 1890:
      case 1891:
      case 1892:
      case 1893:
      case 1894:
      case 1895:
      case 1896:
        sub_1CD445648(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 2153:
      case 2154:
      case 2155:
      case 2156:
      case 2157:
      case 2158:
      case 2159:
      case 2160:
      case 2161:
      case 2162:
      case 2163:
      case 2164:
      case 2165:
      case 2166:
      case 2167:
      case 2168:
      case 2169:
      case 2170:
      case 2171:
      case 2172:
      case 2173:
      case 2174:
      case 2175:
      case 2176:
      case 2177:
      case 2178:
      case 2179:
      case 2180:
      case 2181:
      case 2182:
      case 2183:
      case 2184:
      case 2185:
      case 2186:
      case 2187:
      case 2188:
      case 2189:
      case 2190:
      case 2191:
      case 2192:
      case 2193:
      case 2194:
      case 2195:
      case 2196:
      case 2197:
      case 2198:
      case 2199:
      case 2200:
      case 2201:
      case 2202:
      case 2203:
      case 2204:
      case 2205:
      case 2206:
      case 2207:
      case 2208:
      case 2209:
      case 2210:
      case 2211:
      case 2212:
      case 2213:
      case 2214:
      case 2215:
      case 2216:
      case 2217:
      case 2218:
      case 2219:
      case 2220:
      case 2221:
      case 2222:
      case 2223:
      case 2224:
        sub_1CBDA526C(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 2225:
      case 2227:
      case 2228:
      case 2230:
      case 2231:
      case 2233:
      case 2234:
      case 2236:
      case 2237:
      case 2239:
      case 2240:
      case 2242:
      case 2243:
      case 2245:
      case 2246:
      case 2248:
      case 2249:
      case 2251:
        sub_1CD449640(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 2226:
      case 2229:
      case 2232:
      case 2235:
      case 2238:
      case 2241:
      case 2244:
      case 2247:
      case 2250:
        sub_1CD449500(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 2284:
      case 2285:
      case 2286:
      case 2287:
      case 2288:
      case 2289:
      case 2290:
      case 2291:
      case 2292:
      case 2293:
      case 2294:
      case 2295:
      case 2296:
      case 2297:
      case 2298:
      case 2299:
      case 2300:
      case 2301:
      case 2302:
      case 2303:
      case 2304:
      case 2305:
      case 2306:
      case 2307:
      case 2308:
      case 2309:
      case 2310:
      case 2311:
      case 2312:
      case 2313:
      case 2314:
      case 2315:
      case 2316:
      case 2317:
      case 2318:
      case 2319:
      case 2320:
      case 2321:
      case 2322:
      case 2323:
      case 2324:
      case 2325:
      case 2326:
      case 2327:
      case 2328:
      case 2329:
      case 2330:
      case 2331:
      case 2332:
      case 2333:
      case 2334:
      case 2335:
      case 2336:
      case 2337:
      case 2338:
      case 2339:
      case 2340:
      case 2341:
      case 2342:
      case 2343:
      case 2344:
      case 2345:
      case 2346:
      case 2347:
      case 2348:
      case 2349:
      case 2350:
      case 2351:
      case 2352:
      case 2353:
      case 2354:
      case 2355:
      case 2356:
      case 2357:
      case 2358:
      case 2359:
      case 2360:
      case 2361:
      case 2362:
      case 2363:
      case 2364:
      case 2365:
      case 2366:
      case 2367:
      case 2368:
      case 2369:
      case 2370:
      case 2371:
      case 2372:
      case 2373:
      case 2374:
      case 2375:
      case 2376:
      case 2377:
      case 2378:
      case 2379:
      case 2380:
      case 2381:
      case 2382:
      case 2383:
      case 2384:
      case 2385:
      case 2386:
      case 2387:
      case 2388:
      case 2389:
      case 2390:
      case 2391:
      case 2392:
      case 2393:
      case 2394:
      case 2395:
      case 2396:
      case 2397:
      case 2398:
      case 2399:
      case 2400:
      case 2401:
      case 2402:
      case 2403:
      case 2404:
      case 2405:
      case 2406:
      case 2407:
      case 2408:
      case 2409:
      case 2410:
      case 2411:
      case 2412:
      case 2413:
      case 2414:
      case 2415:
      case 2416:
      case 2417:
      case 2418:
      case 2419:
      case 2420:
      case 2421:
      case 2422:
      case 2423:
      case 2424:
      case 2425:
      case 2426:
      case 2427:
      case 2428:
      case 2429:
      case 2430:
      case 2431:
      case 2432:
      case 2433:
      case 2434:
      case 2435:
      case 2436:
      case 2437:
      case 2438:
      case 2439:
      case 2440:
      case 2441:
      case 2442:
      case 2443:
      case 2444:
      case 2445:
      case 2446:
      case 2447:
      case 2448:
      case 2449:
      case 2450:
      case 2451:
      case 2452:
      case 2453:
      case 2454:
      case 2455:
      case 2456:
      case 2457:
      case 2458:
      case 2459:
      case 2460:
      case 2461:
      case 2462:
      case 2463:
      case 2464:
      case 2465:
      case 2466:
      case 2467:
      case 2468:
      case 2469:
      case 2470:
      case 2471:
      case 2472:
      case 2473:
      case 2474:
      case 2475:
      case 2476:
      case 2477:
      case 2478:
      case 2479:
      case 2480:
      case 2481:
      case 2482:
      case 2483:
      case 2484:
      case 2485:
      case 2486:
      case 2487:
      case 2488:
      case 2489:
      case 2490:
      case 2491:
      case 2492:
      case 2493:
      case 2494:
      case 2495:
      case 2496:
      case 2497:
      case 2498:
      case 2499:
      case 2500:
      case 2501:
      case 2502:
      case 2503:
      case 2504:
      case 2505:
      case 2506:
      case 2507:
      case 2508:
      case 2509:
      case 2510:
      case 2511:
      case 2512:
      case 2513:
      case 2514:
      case 2515:
      case 2516:
      case 2517:
      case 2518:
      case 2519:
      case 2520:
      case 2521:
      case 2522:
      case 2523:
      case 2524:
      case 2525:
      case 2526:
      case 2527:
      case 2528:
      case 2529:
      case 2530:
      case 2531:
      case 2532:
      case 2533:
      case 2534:
      case 2535:
      case 2536:
      case 2537:
      case 2538:
      case 2539:
      case 2540:
      case 2541:
      case 2542:
      case 2543:
      case 2544:
      case 2545:
      case 2546:
      case 2547:
      case 2548:
      case 2549:
      case 2550:
      case 2551:
      case 2552:
      case 2553:
      case 2554:
      case 2555:
      case 2556:
      case 2557:
      case 2558:
      case 2559:
      case 2560:
      case 2561:
      case 2562:
      case 2563:
      case 2564:
      case 2565:
      case 2566:
      case 2567:
      case 2568:
      case 2569:
      case 2570:
      case 2571:
      case 2572:
      case 2573:
      case 2574:
      case 2575:
      case 2576:
      case 2577:
      case 2578:
      case 2579:
      case 2580:
      case 2581:
      case 2582:
      case 2583:
      case 2584:
      case 2585:
      case 2586:
      case 2587:
      case 2588:
      case 2589:
      case 2590:
      case 2591:
      case 2592:
      case 2593:
      case 2594:
      case 2595:
      case 2596:
      case 2597:
      case 2598:
      case 2599:
      case 2600:
      case 2601:
      case 2602:
      case 2603:
      case 2604:
      case 2605:
      case 2606:
      case 2607:
      case 2608:
      case 2609:
      case 2610:
      case 2611:
      case 2612:
      case 2613:
      case 2614:
      case 2615:
      case 2616:
      case 2617:
      case 2618:
      case 2619:
      case 2620:
      case 2621:
      case 2622:
      case 2623:
      case 2624:
      case 2625:
      case 2626:
      case 2627:
      case 2628:
      case 2629:
      case 2630:
      case 2631:
      case 2632:
      case 2633:
      case 2634:
      case 2635:
      case 2636:
      case 2637:
      case 2638:
      case 2639:
      case 2640:
      case 2641:
      case 2642:
      case 2643:
      case 2644:
      case 2645:
      case 2646:
      case 2647:
      case 2648:
      case 2649:
      case 2650:
      case 2651:
      case 2652:
      case 2653:
      case 2654:
      case 2655:
      case 2656:
      case 2657:
      case 2658:
      case 2659:
      case 2660:
      case 2661:
      case 2662:
      case 2663:
      case 2664:
      case 2665:
      case 2666:
      case 2667:
      case 2668:
      case 2669:
      case 2670:
      case 2671:
      case 2672:
      case 2673:
      case 2674:
      case 2675:
      case 2676:
      case 2677:
      case 2678:
      case 2679:
      case 2680:
      case 2681:
      case 2682:
      case 2683:
      case 2684:
      case 2685:
      case 2686:
      case 2687:
      case 2688:
      case 2689:
      case 2690:
      case 2691:
      case 2692:
      case 2693:
      case 2694:
      case 2695:
      case 2696:
      case 2697:
      case 2698:
      case 2699:
      case 2700:
      case 2701:
      case 2702:
      case 2703:
      case 2704:
      case 2705:
      case 2706:
      case 2707:
      case 2708:
      case 2709:
      case 2710:
      case 2711:
      case 2712:
      case 2713:
      case 2714:
      case 2715:
      case 2716:
      case 2717:
      case 2718:
      case 2719:
      case 2720:
      case 2721:
      case 2722:
      case 2723:
      case 2724:
      case 2725:
      case 2726:
      case 2727:
      case 2728:
      case 2729:
      case 2730:
      case 2731:
      case 2732:
      case 2733:
      case 2734:
      case 2735:
      case 2736:
      case 2737:
      case 2738:
      case 2739:
      case 2740:
      case 2741:
      case 2742:
      case 2743:
      case 2744:
      case 2745:
      case 2746:
      case 2747:
      case 2748:
      case 2749:
      case 2750:
      case 2751:
      case 2752:
      case 2753:
      case 2754:
      case 2755:
      case 2756:
      case 2757:
      case 2758:
      case 2759:
      case 2760:
      case 2761:
      case 2762:
      case 2763:
      case 2764:
      case 2765:
      case 2766:
      case 2767:
      case 2768:
      case 2769:
      case 2770:
      case 2771:
      case 2772:
      case 2773:
      case 2774:
      case 2775:
      case 2776:
      case 2777:
      case 2778:
      case 2779:
      case 2780:
      case 2781:
      case 2782:
      case 2783:
      case 2784:
      case 2785:
      case 2786:
      case 2787:
      case 2788:
      case 2789:
      case 2790:
      case 2791:
      case 2792:
      case 2793:
      case 2794:
      case 2795:
        sub_1CD445ECC(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 2796:
      case 2797:
      case 2798:
      case 2799:
      case 2800:
      case 2801:
      case 2802:
      case 2803:
      case 2804:
      case 2805:
      case 2806:
      case 2807:
      case 2808:
      case 2809:
      case 2810:
      case 2811:
      case 2812:
      case 2813:
      case 2814:
      case 2815:
      case 2816:
      case 2817:
      case 2818:
      case 2819:
      case 2820:
      case 2821:
      case 2822:
      case 2823:
      case 2824:
      case 2825:
      case 2826:
      case 2827:
      case 2828:
      case 2829:
      case 2830:
      case 2831:
      case 2832:
      case 2833:
      case 2834:
      case 2835:
      case 2836:
      case 2837:
      case 2838:
      case 2839:
      case 2840:
      case 2841:
      case 2842:
      case 2843:
      case 2844:
      case 2845:
      case 2846:
      case 2847:
      case 2848:
      case 2849:
      case 2850:
      case 2851:
      case 2852:
      case 2853:
      case 2854:
      case 2855:
      case 2856:
      case 2857:
      case 2858:
      case 2859:
      case 2988:
      case 2989:
      case 2990:
      case 2991:
      case 2992:
      case 2993:
      case 2994:
      case 2995:
      case 2996:
      case 2997:
      case 2998:
      case 2999:
      case 3000:
      case 3001:
      case 3002:
      case 3003:
      case 3004:
      case 3005:
      case 3006:
      case 3007:
      case 3008:
      case 3009:
      case 3010:
      case 3011:
      case 3012:
      case 3013:
      case 3014:
      case 3015:
      case 3016:
      case 3017:
      case 3018:
      case 3019:
      case 3020:
      case 3021:
      case 3022:
      case 3023:
      case 3024:
      case 3025:
      case 3026:
      case 3027:
      case 3028:
      case 3029:
      case 3030:
      case 3031:
      case 3032:
      case 3033:
      case 3034:
      case 3035:
      case 3036:
      case 3037:
      case 3038:
      case 3039:
      case 3040:
      case 3041:
      case 3042:
      case 3043:
      case 3044:
      case 3045:
      case 3046:
      case 3047:
      case 3048:
      case 3049:
      case 3050:
      case 3051:
        sub_1CD445144(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 2860:
      case 2861:
      case 2862:
      case 2863:
      case 2864:
      case 2865:
      case 2866:
      case 2867:
      case 2868:
      case 2869:
      case 2870:
      case 2871:
      case 2872:
      case 2873:
      case 2874:
      case 2875:
      case 2876:
      case 2877:
      case 2878:
      case 2879:
      case 2880:
      case 2881:
      case 2882:
      case 2883:
      case 2884:
      case 2885:
      case 2886:
      case 2887:
      case 2888:
      case 2889:
      case 2890:
      case 2891:
      case 2892:
      case 2893:
      case 2894:
      case 2895:
      case 2896:
      case 2897:
      case 2898:
      case 2899:
      case 2900:
      case 2901:
      case 2902:
      case 2903:
      case 2904:
      case 2905:
      case 2906:
      case 2907:
      case 2908:
      case 2909:
      case 2910:
      case 2911:
      case 2912:
      case 2913:
      case 2914:
      case 2915:
      case 2916:
      case 2917:
      case 2918:
      case 2919:
      case 2920:
      case 2921:
      case 2922:
      case 2923:
      case 2924:
      case 2925:
      case 2926:
      case 2927:
      case 2928:
      case 2929:
      case 2930:
      case 2931:
      case 2932:
      case 2933:
      case 2934:
      case 2935:
      case 2936:
      case 2937:
      case 2938:
      case 2939:
      case 2940:
      case 2941:
      case 2942:
      case 2943:
      case 2944:
      case 2945:
      case 2946:
      case 2947:
      case 2948:
      case 2949:
      case 2950:
      case 2951:
      case 2952:
      case 2953:
      case 2954:
      case 2955:
      case 2956:
      case 2957:
      case 2958:
      case 2959:
      case 2960:
      case 2961:
      case 2962:
      case 2963:
      case 2964:
      case 2965:
      case 2966:
      case 2967:
      case 2968:
      case 2969:
      case 2970:
      case 2971:
      case 2972:
      case 2973:
      case 2974:
      case 2975:
      case 2976:
      case 2977:
      case 2978:
      case 2979:
      case 2980:
      case 2981:
      case 2982:
      case 2983:
      case 2984:
      case 2985:
      case 2986:
      case 2987:
        sub_1CD4452AC(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 3052:
      case 3053:
      case 3054:
      case 3055:
      case 3056:
      case 3057:
      case 3058:
      case 3059:
      case 3060:
      case 3061:
      case 3062:
      case 3063:
      case 3064:
      case 3065:
      case 3066:
      case 3067:
      case 3068:
      case 3069:
      case 3070:
      case 3071:
      case 3072:
      case 3073:
      case 3074:
      case 3075:
      case 3076:
      case 3077:
      case 3078:
      case 3079:
      case 3080:
      case 3081:
      case 3082:
      case 3083:
      case 3084:
      case 3085:
      case 3086:
      case 3087:
      case 3088:
      case 3089:
      case 3090:
      case 3091:
      case 3092:
      case 3093:
      case 3094:
      case 3095:
      case 3096:
      case 3097:
      case 3098:
      case 3099:
      case 3100:
      case 3101:
      case 3102:
      case 3103:
      case 3104:
      case 3105:
      case 3106:
      case 3107:
      case 3108:
      case 3109:
      case 3110:
      case 3111:
      case 3112:
      case 3113:
      case 3114:
      case 3115:
      case 3116:
      case 3117:
      case 3118:
      case 3119:
      case 3120:
      case 3121:
      case 3122:
      case 3123:
      case 3124:
      case 3125:
      case 3126:
      case 3127:
      case 3128:
      case 3129:
      case 3130:
      case 3131:
      case 3132:
      case 3133:
      case 3134:
      case 3135:
      case 3136:
      case 3137:
      case 3138:
      case 3139:
      case 3140:
      case 3141:
      case 3142:
      case 3143:
      case 3144:
      case 3145:
      case 3146:
      case 3147:
      case 3148:
      case 3149:
      case 3150:
      case 3151:
      case 3152:
      case 3153:
      case 3154:
      case 3155:
      case 3156:
      case 3157:
      case 3158:
      case 3159:
      case 3160:
      case 3161:
      case 3162:
      case 3163:
      case 3164:
      case 3165:
      case 3166:
      case 3167:
      case 3168:
      case 3169:
      case 3170:
      case 3171:
      case 3172:
      case 3173:
      case 3174:
      case 3175:
      case 3176:
      case 3177:
      case 3178:
      case 3179:
      case 3180:
      case 3181:
      case 3182:
      case 3183:
      case 3184:
      case 3185:
      case 3186:
      case 3187:
      case 3188:
      case 3189:
      case 3190:
      case 3191:
      case 3192:
      case 3193:
      case 3194:
      case 3195:
      case 3196:
      case 3197:
      case 3198:
      case 3199:
      case 3200:
      case 3201:
      case 3202:
      case 3203:
      case 3204:
      case 3205:
      case 3206:
      case 3207:
      case 3208:
      case 3209:
      case 3210:
      case 3211:
      case 3212:
      case 3213:
      case 3214:
      case 3215:
      case 3216:
      case 3217:
      case 3218:
      case 3219:
      case 3220:
      case 3221:
      case 3222:
      case 3223:
      case 3224:
      case 3225:
      case 3226:
      case 3227:
      case 3228:
      case 3229:
      case 3230:
      case 3231:
      case 3232:
      case 3233:
      case 3234:
      case 3235:
      case 3236:
      case 3237:
      case 3238:
      case 3239:
      case 3240:
      case 3241:
      case 3242:
      case 3243:
      case 3244:
      case 3245:
      case 3246:
      case 3247:
      case 3248:
      case 3249:
      case 3250:
      case 3251:
      case 3252:
      case 3253:
      case 3254:
      case 3255:
      case 3256:
      case 3257:
      case 3258:
      case 3259:
      case 3260:
      case 3261:
      case 3262:
      case 3263:
      case 3264:
      case 3265:
      case 3266:
      case 3267:
      case 3268:
      case 3269:
      case 3270:
      case 3271:
      case 3272:
      case 3273:
      case 3274:
      case 3275:
      case 3276:
      case 3277:
      case 3278:
      case 3279:
      case 3280:
      case 3281:
      case 3282:
      case 3283:
      case 3284:
      case 3285:
      case 3286:
      case 3287:
      case 3288:
      case 3289:
      case 3290:
      case 3291:
      case 3292:
      case 3293:
      case 3294:
      case 3295:
      case 3296:
      case 3297:
      case 3298:
      case 3299:
      case 3300:
      case 3301:
      case 3302:
      case 3303:
      case 3304:
      case 3305:
      case 3306:
      case 3307:
        sub_1CD445B14(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 3308:
      case 3309:
      case 3310:
      case 3311:
      case 3312:
      case 3313:
      case 3314:
      case 3315:
      case 3316:
      case 3317:
      case 3318:
      case 3319:
      case 3320:
      case 3321:
      case 3322:
      case 3323:
      case 3356:
      case 3357:
      case 3358:
      case 3359:
      case 3360:
      case 3361:
      case 3362:
      case 3363:
      case 3364:
      case 3365:
      case 3366:
      case 3367:
      case 3368:
      case 3369:
      case 3370:
      case 3371:
        sub_1CD44587C(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 3324:
      case 3325:
      case 3326:
      case 3327:
      case 3328:
      case 3329:
      case 3330:
      case 3331:
      case 3332:
      case 3333:
      case 3334:
      case 3335:
      case 3336:
      case 3337:
      case 3338:
      case 3339:
      case 3340:
      case 3341:
      case 3342:
      case 3343:
      case 3344:
      case 3345:
      case 3346:
      case 3347:
      case 3348:
      case 3349:
      case 3350:
      case 3351:
      case 3352:
      case 3353:
      case 3354:
      case 3355:
        sub_1CD445998(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 3372:
      case 3373:
      case 3374:
      case 3375:
      case 3376:
      case 3377:
      case 3378:
      case 3379:
      case 3380:
      case 3381:
      case 3382:
      case 3383:
      case 3384:
      case 3385:
      case 3386:
      case 3387:
      case 3388:
      case 3389:
      case 3390:
      case 3391:
      case 3392:
      case 3393:
      case 3394:
      case 3395:
      case 3396:
      case 3397:
      case 3398:
      case 3399:
      case 3400:
      case 3401:
      case 3402:
      case 3403:
      case 3404:
      case 3405:
      case 3406:
      case 3407:
      case 3408:
      case 3409:
      case 3410:
      case 3411:
      case 3412:
      case 3413:
      case 3414:
      case 3415:
      case 3416:
      case 3417:
      case 3418:
      case 3419:
      case 3420:
      case 3421:
      case 3422:
      case 3423:
      case 3424:
      case 3425:
      case 3426:
      case 3427:
      case 3428:
      case 3429:
      case 3430:
      case 3431:
      case 3432:
      case 3433:
      case 3434:
      case 3435:
      case 3436:
      case 3437:
      case 3438:
      case 3439:
      case 3440:
      case 3441:
      case 3442:
      case 3443:
      case 3444:
      case 3445:
      case 3446:
      case 3447:
      case 3448:
      case 3449:
      case 3450:
      case 3451:
      case 3452:
      case 3453:
      case 3454:
      case 3455:
      case 3456:
      case 3457:
      case 3458:
      case 3459:
      case 3460:
      case 3461:
      case 3462:
      case 3463:
      case 3464:
      case 3465:
      case 3466:
      case 3467:
      case 3468:
      case 3469:
      case 3470:
      case 3471:
      case 3472:
      case 3473:
      case 3474:
      case 3475:
      case 3476:
      case 3477:
      case 3478:
      case 3479:
      case 3480:
      case 3481:
      case 3482:
      case 3483:
      case 3484:
      case 3485:
      case 3486:
      case 3487:
      case 3488:
      case 3489:
      case 3490:
      case 3491:
      case 3492:
      case 3493:
      case 3494:
      case 3495:
      case 3496:
      case 3497:
      case 3498:
      case 3499:
        sub_1CD445DB0(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 3596:
      case 3597:
      case 3598:
      case 3599:
      case 3600:
      case 3601:
      case 3602:
      case 3603:
      case 3604:
      case 3605:
      case 3606:
      case 3607:
      case 3608:
      case 3609:
      case 3610:
      case 3611:
      case 3612:
      case 3613:
      case 3614:
      case 3615:
      case 3616:
      case 3617:
      case 3618:
      case 3619:
      case 3620:
      case 3621:
      case 3622:
      case 3623:
      case 3624:
      case 3625:
      case 3626:
      case 3627:
      case 3628:
      case 3629:
      case 3630:
      case 3631:
      case 3632:
      case 3633:
      case 3634:
      case 3635:
      case 3636:
      case 3637:
      case 3638:
      case 3639:
      case 3640:
      case 3641:
      case 3642:
      case 3643:
      case 3644:
      case 3645:
      case 3646:
      case 3647:
      case 3648:
      case 3649:
        sub_1CD44EB6C(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 3650:
      case 3651:
      case 3652:
      case 3653:
      case 3654:
      case 3655:
      case 3656:
      case 3657:
      case 3658:
      case 3659:
      case 3660:
      case 3661:
      case 3662:
      case 3663:
      case 3664:
      case 3665:
      case 3666:
      case 3667:
        sub_1CD444D34(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 3668:
      case 3670:
      case 3672:
      case 3674:
      case 3676:
      case 3678:
      case 3680:
      case 3682:
      case 3684:
        sub_1CD44CAA0(a1, a2, a3, a4, a5);
        break;
      case 3669:
      case 3671:
      case 3673:
      case 3675:
      case 3677:
      case 3679:
      case 3681:
      case 3683:
      case 3685:
        sub_1CD44CC58(a1, a2, (uint64_t)a3, a4, a5);
        break;
      case 3686:
      case 3688:
      case 3690:
      case 3692:
      case 3694:
      case 3696:
      case 3698:
      case 3700:
      case 3702:
        sub_1CD44D08C(a1, a2, a3, a4, a5);
        break;
      case 3687:
      case 3689:
      case 3691:
      case 3693:
      case 3695:
      case 3697:
      case 3699:
      case 3701:
      case 3703:
        sub_1CD44D244(a1, a2, (uint64_t)a3, a4, a5);
        break;
      case 3704:
      case 3706:
      case 3708:
      case 3710:
      case 3712:
      case 3714:
      case 3716:
      case 3718:
      case 3720:
        sub_1CD44D3AC(a1, a2, a3, a4, a5);
        break;
      case 3705:
      case 3707:
      case 3709:
      case 3711:
      case 3713:
      case 3715:
      case 3717:
      case 3719:
      case 3721:
        sub_1CD44D564(a1, a2, (uint64_t)a3, a4, a5);
        break;
      case 3722:
      case 3723:
      case 3724:
      case 3725:
      case 3726:
      case 3727:
      case 3728:
      case 3729:
      case 3730:
      case 3731:
      case 3732:
      case 3733:
        sub_1CD44AC50(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 3734:
      case 3735:
      case 3736:
      case 3737:
        sub_1CD44ADEC(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 3738:
      case 3742:
      case 3746:
        sub_1CD448ABC(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 3739:
      case 3740:
      case 3741:
      case 3743:
      case 3744:
      case 3745:
      case 3747:
      case 3748:
      case 3749:
      case 3750:
      case 3751:
      case 3752:
      case 3753:
      case 3754:
      case 3755:
      case 3756:
      case 3757:
      case 3758:
        sub_1CD448C18(a1, a2, (unsigned int *)a3, a4, (uint64_t)a5);
        break;
      case 3759:
      case 3760:
      case 3761:
      case 3762:
      case 3763:
      case 3764:
      case 3765:
      case 3766:
      case 3767:
      case 3768:
      case 3769:
      case 3770:
      case 3771:
      case 3772:
      case 3773:
      case 3774:
      case 3775:
      case 3776:
      case 3777:
      case 3778:
      case 3779:
      case 3780:
      case 3781:
      case 3782:
      case 3783:
      case 3784:
      case 3785:
      case 3786:
      case 3787:
      case 3788:
      case 3789:
        sub_1CD44E110(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 3790:
      case 3791:
      case 3792:
      case 3793:
      case 3794:
      case 3795:
      case 3796:
      case 3797:
      case 3798:
      case 3799:
      case 3800:
      case 3801:
      case 3802:
      case 3803:
      case 3804:
      case 3805:
      case 3806:
      case 3807:
      case 3808:
      case 3809:
      case 3810:
      case 3811:
      case 3812:
      case 3813:
      case 3814:
      case 3815:
      case 3816:
      case 3817:
      case 3818:
      case 3819:
      case 3820:
      case 3821:
      case 3822:
      case 3823:
      case 3824:
      case 3825:
      case 3826:
      case 3827:
      case 3828:
      case 3829:
      case 3830:
      case 3831:
      case 3832:
      case 3833:
      case 3834:
      case 3835:
      case 3836:
      case 3837:
      case 3838:
      case 3839:
      case 3840:
      case 3841:
      case 3842:
      case 3843:
        sub_1CD44E484(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 3844:
      case 3845:
      case 3846:
      case 3847:
      case 3848:
      case 3849:
      case 3850:
      case 3851:
      case 3852:
      case 3853:
      case 3854:
      case 3855:
      case 3856:
      case 3857:
      case 3858:
      case 3859:
      case 3860:
      case 3861:
      case 3862:
      case 3863:
      case 3864:
      case 3865:
      case 3866:
      case 3867:
      case 3868:
      case 3869:
      case 3870:
      case 3871:
      case 3872:
      case 3873:
      case 3874:
      case 3875:
      case 3876:
      case 3877:
      case 3878:
      case 3879:
      case 3880:
      case 3881:
      case 3882:
      case 3883:
      case 3884:
      case 3885:
      case 3886:
      case 3887:
      case 3888:
      case 3889:
      case 3890:
      case 3891:
      case 3892:
      case 3893:
      case 3894:
      case 3895:
      case 3896:
      case 3897:
      case 3898:
      case 3899:
      case 3900:
      case 3901:
      case 3902:
      case 3903:
      case 3904:
      case 3905:
      case 3906:
      case 3907:
      case 3908:
      case 3909:
      case 3910:
      case 3911:
      case 3912:
      case 3913:
      case 3914:
      case 3915:
      case 3916:
      case 3917:
      case 3918:
      case 3919:
      case 3920:
      case 3921:
      case 3922:
      case 3923:
      case 3924:
      case 3925:
      case 3926:
      case 3927:
      case 3928:
      case 3929:
      case 3930:
      case 3931:
      case 3932:
      case 3933:
      case 3934:
      case 3935:
      case 3936:
      case 3937:
      case 3938:
      case 3939:
      case 3940:
      case 3941:
      case 3942:
      case 3943:
      case 3944:
      case 3945:
      case 3946:
      case 3947:
      case 3948:
      case 3949:
      case 3950:
      case 3951:
        sub_1CD44790C(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 3952:
      case 3953:
      case 3954:
      case 3955:
      case 3956:
      case 3957:
      case 3958:
      case 3959:
      case 3960:
      case 3961:
      case 3962:
      case 3963:
      case 3964:
      case 3965:
      case 3966:
      case 3967:
      case 3968:
      case 3969:
      case 3970:
      case 3971:
      case 3972:
      case 3973:
      case 3974:
      case 3975:
      case 3976:
      case 3977:
      case 3978:
      case 3979:
      case 3980:
      case 3981:
      case 3982:
      case 3983:
      case 3984:
      case 3985:
      case 3986:
      case 3987:
      case 3988:
      case 3989:
      case 3990:
      case 3991:
      case 3992:
      case 3993:
      case 3994:
      case 3995:
      case 3996:
      case 3997:
      case 3998:
      case 3999:
      case 4000:
      case 4001:
      case 4002:
      case 4003:
      case 4004:
      case 4005:
      case 4006:
      case 4007:
      case 4008:
      case 4009:
      case 4010:
      case 4011:
      case 4012:
      case 4013:
      case 4014:
      case 4015:
      case 4016:
      case 4017:
      case 4018:
      case 4019:
      case 4020:
      case 4021:
      case 4022:
      case 4023:
      case 4024:
      case 4025:
      case 4026:
      case 4027:
      case 4028:
      case 4029:
      case 4030:
      case 4031:
      case 4032:
      case 4033:
      case 4034:
      case 4035:
      case 4036:
      case 4037:
      case 4038:
      case 4039:
      case 4040:
      case 4041:
      case 4042:
      case 4043:
      case 4044:
      case 4045:
      case 4046:
      case 4047:
      case 4048:
      case 4049:
      case 4050:
      case 4051:
      case 4052:
      case 4053:
      case 4054:
      case 4055:
      case 4056:
      case 4057:
      case 4058:
      case 4059:
      case 4060:
      case 4061:
      case 4062:
      case 4063:
      case 4064:
      case 4065:
      case 4066:
      case 4067:
      case 4068:
      case 4069:
      case 4070:
      case 4071:
      case 4072:
      case 4073:
      case 4074:
      case 4075:
      case 4076:
      case 4077:
      case 4078:
      case 4079:
      case 4080:
      case 4081:
      case 4082:
      case 4083:
      case 4084:
      case 4085:
      case 4086:
      case 4087:
      case 4088:
      case 4089:
      case 4090:
      case 4091:
      case 4092:
      case 4093:
      case 4094:
      case 4095:
      case 4096:
      case 4097:
      case 4098:
      case 4099:
      case 4100:
      case 4101:
      case 4102:
      case 4103:
      case 4104:
      case 4105:
      case 4106:
      case 4107:
      case 4108:
      case 4109:
      case 4110:
      case 4111:
      case 4112:
      case 4113:
      case 4114:
      case 4115:
      case 4116:
      case 4117:
      case 4118:
      case 4119:
      case 4120:
      case 4121:
      case 4122:
      case 4123:
      case 4124:
      case 4125:
      case 4126:
      case 4127:
      case 4128:
      case 4129:
      case 4130:
      case 4131:
      case 4132:
      case 4133:
      case 4134:
      case 4135:
      case 4136:
      case 4137:
      case 4138:
      case 4139:
      case 4140:
      case 4141:
      case 4142:
      case 4143:
      case 4144:
      case 4145:
      case 4146:
      case 4147:
      case 4148:
      case 4149:
      case 4150:
      case 4151:
      case 4152:
      case 4153:
      case 4154:
      case 4155:
      case 4156:
      case 4157:
      case 4158:
      case 4159:
      case 4160:
      case 4161:
      case 4162:
      case 4163:
      case 4164:
      case 4165:
      case 4166:
      case 4167:
      case 4168:
      case 4169:
      case 4170:
      case 4171:
      case 4172:
      case 4173:
      case 4174:
      case 4175:
      case 4176:
      case 4177:
      case 4178:
      case 4179:
      case 4180:
      case 4181:
      case 4182:
      case 4183:
      case 4184:
      case 4185:
      case 4186:
      case 4187:
      case 4188:
      case 4189:
      case 4190:
      case 4191:
      case 4192:
      case 4193:
      case 4194:
      case 4195:
      case 4196:
      case 4197:
      case 4198:
      case 4199:
      case 4200:
      case 4201:
      case 4202:
      case 4203:
        sub_1CD4472BC(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 4204:
      case 4205:
      case 4206:
      case 4207:
      case 4208:
      case 4209:
      case 4210:
      case 4211:
      case 4212:
      case 4213:
      case 4214:
      case 4215:
      case 4216:
      case 4217:
      case 4218:
      case 4219:
      case 4220:
      case 4221:
      case 4222:
      case 4223:
      case 4224:
      case 4225:
      case 4226:
      case 4227:
      case 4228:
      case 4229:
      case 4230:
      case 4231:
      case 4232:
      case 4233:
      case 4234:
      case 4235:
      case 4236:
      case 4237:
      case 4238:
      case 4239:
      case 4240:
      case 4241:
      case 4242:
      case 4243:
      case 4244:
      case 4245:
      case 4246:
      case 4247:
      case 4248:
      case 4249:
      case 4250:
      case 4251:
      case 4252:
      case 4253:
      case 4254:
      case 4255:
      case 4256:
      case 4257:
      case 4258:
      case 4259:
      case 4260:
      case 4261:
      case 4262:
      case 4263:
      case 4264:
      case 4265:
      case 4266:
      case 4267:
      case 4268:
      case 4269:
      case 4270:
      case 4271:
      case 4272:
      case 4273:
      case 4274:
      case 4275:
      case 4276:
      case 4277:
      case 4278:
      case 4279:
      case 4280:
      case 4281:
      case 4282:
      case 4283:
      case 4284:
      case 4285:
      case 4286:
      case 4287:
      case 4288:
      case 4289:
      case 4290:
      case 4291:
      case 4292:
      case 4293:
      case 4294:
      case 4295:
      case 4296:
      case 4297:
      case 4298:
      case 4299:
      case 4300:
      case 4301:
      case 4302:
      case 4303:
      case 4304:
      case 4305:
      case 4306:
      case 4307:
      case 4308:
      case 4309:
      case 4310:
      case 4311:
      case 4312:
      case 4313:
      case 4314:
      case 4315:
      case 4316:
      case 4317:
      case 4318:
      case 4319:
      case 4320:
      case 4321:
      case 4322:
      case 4323:
      case 4324:
      case 4325:
      case 4326:
      case 4327:
      case 4328:
      case 4329:
        sub_1CD4478B0(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 4339:
      case 4340:
      case 4341:
        sub_1CBDA4BAC(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 4342:
      case 4343:
      case 4344:
      case 4345:
      case 4346:
      case 4347:
        sub_1CBDA4600(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 4348:
      case 4349:
      case 4350:
      case 4351:
      case 4352:
      case 4353:
        sub_1CBDA3FF8(a1, a2, (uint64_t)a3, a4, (unsigned int *)a5);
        break;
      case 4354:
      case 4355:
      case 4356:
      case 4357:
      case 4358:
      case 4359:
        sub_1CBDA43B4(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 4360:
        sub_1CD44373C(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 4361:
      case 4362:
      case 4363:
      case 4364:
      case 4365:
      case 4366:
      case 4367:
      case 4368:
      case 4369:
      case 4370:
      case 4371:
      case 4372:
      case 4373:
      case 4374:
      case 4375:
      case 4376:
      case 4377:
      case 4378:
      case 4379:
      case 4380:
      case 4381:
      case 4382:
      case 4383:
      case 4384:
      case 4385:
      case 4386:
      case 4387:
        sub_1CD443C88(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 4388:
      case 4389:
      case 4390:
      case 4391:
      case 4392:
      case 4393:
      case 4394:
      case 4395:
      case 4396:
      case 4397:
      case 4398:
      case 4399:
      case 4400:
      case 4401:
      case 4402:
      case 4403:
      case 4404:
      case 4405:
      case 4406:
      case 4407:
      case 4408:
      case 4409:
      case 4410:
      case 4411:
      case 4412:
      case 4413:
      case 4414:
      case 4415:
      case 4416:
      case 4417:
      case 4418:
      case 4419:
      case 4420:
      case 4421:
      case 4422:
      case 4423:
      case 4424:
      case 4425:
      case 4426:
      case 4427:
      case 4428:
      case 4429:
      case 4430:
      case 4431:
      case 4432:
      case 4433:
      case 4434:
      case 4435:
      case 4436:
      case 4437:
        sub_1CD44384C(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 4438:
      case 4439:
      case 4440:
      case 4441:
      case 4442:
      case 4443:
      case 4444:
      case 4445:
      case 4446:
      case 4447:
      case 4448:
      case 4449:
      case 4450:
      case 4451:
      case 4452:
      case 4453:
      case 4454:
      case 4455:
      case 4456:
      case 4457:
      case 4458:
      case 4459:
      case 4460:
      case 4461:
      case 4462:
      case 4463:
      case 4464:
      case 4465:
      case 4466:
      case 4467:
      case 4468:
      case 4469:
      case 4470:
      case 4471:
      case 4472:
      case 4473:
      case 4474:
      case 4475:
      case 4476:
      case 4477:
      case 4478:
      case 4479:
      case 4480:
      case 4481:
      case 4482:
      case 4483:
      case 4484:
      case 4485:
      case 4486:
      case 4487:
      case 4488:
      case 4489:
      case 4490:
      case 4491:
        sub_1CD44EE80(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 4492:
      case 4493:
      case 4494:
      case 4495:
      case 4496:
      case 4497:
      case 4498:
      case 4499:
      case 4500:
      case 4501:
      case 4502:
      case 4503:
      case 4504:
      case 4505:
      case 4506:
      case 4507:
      case 4508:
      case 4509:
        sub_1CD444E88(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 4510:
      case 4511:
      case 4514:
      case 4515:
        sub_1CD44CDC0(a1, a2, (uint64_t)a3, a4, a5);
        break;
      case 4512:
      case 4513:
      case 4516:
      case 4517:
        sub_1CD44CF24(a1, a2, (uint64_t)a3, a4, a5);
        break;
      case 4518:
      case 4519:
      case 4522:
      case 4523:
        sub_1CD44D6CC(a1, a2, (uint64_t)a3, a4, a5);
        break;
      case 4520:
      case 4521:
      case 4524:
      case 4525:
        sub_1CD44D830(a1, a2, (uint64_t)a3, a4, a5);
        break;
      case 4526:
      case 4527:
      case 4530:
      case 4531:
        sub_1CD44D998(a1, a2, (uint64_t)a3, a4, a5);
        break;
      case 4528:
      case 4529:
      case 4532:
      case 4533:
        sub_1CD44DAFC(a1, a2, (uint64_t)a3, a4, a5);
        break;
      case 4534:
      case 4535:
      case 4536:
      case 4537:
      case 4538:
      case 4539:
      case 4540:
      case 4541:
      case 4542:
      case 4543:
      case 4544:
      case 4545:
      case 4546:
      case 4547:
      case 4548:
      case 4549:
      case 4550:
      case 4551:
      case 4552:
      case 4553:
      case 4554:
      case 4555:
      case 4556:
      case 4557:
      case 4558:
      case 4559:
      case 4560:
      case 4561:
      case 4562:
      case 4563:
      case 4564:
      case 4565:
      case 4566:
      case 4567:
      case 4568:
      case 4569:
      case 4570:
      case 4571:
      case 4572:
      case 4573:
      case 4574:
      case 4575:
      case 4576:
      case 4577:
      case 4578:
      case 4579:
      case 4580:
      case 4581:
      case 4582:
      case 4583:
      case 4584:
      case 4585:
      case 4586:
      case 4587:
      case 4588:
      case 4589:
      case 4590:
      case 4591:
      case 4592:
      case 4593:
      case 4594:
      case 4595:
      case 4596:
      case 4597:
      case 4598:
      case 4599:
      case 4600:
      case 4601:
      case 4602:
      case 4603:
      case 4604:
      case 4605:
      case 4606:
      case 4607:
      case 4608:
      case 4609:
      case 4610:
      case 4611:
      case 4612:
      case 4613:
      case 4614:
        sub_1CD4441C8(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 4615:
      case 4616:
      case 4617:
      case 4618:
      case 4619:
      case 4620:
      case 4621:
      case 4622:
      case 4623:
      case 4624:
      case 4625:
      case 4626:
      case 4627:
      case 4628:
      case 4629:
      case 4630:
      case 4631:
      case 4632:
      case 4633:
      case 4634:
      case 4635:
      case 4636:
      case 4637:
      case 4638:
      case 4639:
      case 4640:
      case 4641:
      case 4642:
      case 4643:
      case 4644:
      case 4645:
      case 4646:
      case 4647:
      case 4648:
      case 4649:
      case 4650:
      case 4651:
      case 4652:
      case 4653:
      case 4654:
      case 4655:
      case 4656:
      case 4657:
      case 4658:
      case 4659:
      case 4660:
      case 4661:
      case 4662:
      case 4663:
      case 4664:
      case 4665:
      case 4666:
      case 4667:
      case 4668:
      case 4669:
      case 4670:
      case 4671:
      case 4672:
      case 4673:
      case 4674:
      case 4675:
      case 4676:
      case 4677:
      case 4678:
      case 4679:
      case 4680:
      case 4681:
      case 4682:
      case 4683:
      case 4684:
      case 4685:
      case 4686:
      case 4687:
      case 4688:
      case 4689:
      case 4690:
      case 4691:
      case 4692:
      case 4693:
      case 4694:
      case 4695:
      case 4696:
      case 4697:
      case 4698:
      case 4699:
      case 4700:
      case 4701:
      case 4702:
      case 4703:
      case 4704:
      case 4705:
      case 4706:
      case 4707:
      case 4708:
      case 4709:
      case 4710:
      case 4711:
      case 4712:
      case 4713:
      case 4714:
      case 4715:
      case 4716:
      case 4717:
      case 4718:
      case 4719:
      case 4720:
      case 4721:
      case 4722:
      case 4723:
      case 4724:
      case 4725:
      case 4726:
      case 4727:
      case 4728:
      case 4729:
      case 4730:
      case 4731:
      case 4732:
      case 4733:
      case 4734:
      case 4735:
      case 4736:
      case 4737:
      case 4738:
      case 4739:
      case 4740:
        sub_1CD443D10(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 4741:
      case 4742:
        sub_1CD446490(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 4743:
      case 4744:
      case 4745:
      case 4746:
      case 4747:
      case 4748:
      case 4749:
      case 4750:
      case 4751:
      case 4752:
      case 4753:
      case 4754:
      case 4755:
      case 4756:
      case 4757:
      case 4758:
        sub_1CD44A6C8(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 4759:
      case 4760:
      case 4761:
      case 4762:
      case 4763:
      case 4764:
      case 4765:
      case 4766:
      case 4767:
      case 4768:
      case 4769:
      case 4770:
      case 4771:
      case 4772:
      case 4773:
      case 4774:
        sub_1CD44A960(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 4775:
      case 4776:
      case 4777:
      case 4778:
      case 4779:
      case 4780:
      case 4781:
      case 4782:
      case 4783:
      case 4784:
      case 4785:
      case 4786:
      case 4787:
      case 4788:
      case 4789:
      case 4790:
      case 4791:
      case 4792:
      case 4793:
      case 4794:
      case 4795:
      case 4796:
      case 4797:
      case 4798:
      case 4799:
      case 4800:
      case 4801:
      case 4802:
      case 4803:
      case 4804:
      case 4805:
      case 4806:
      case 4807:
      case 4808:
      case 4809:
      case 4810:
      case 4811:
      case 4812:
      case 4813:
      case 4814:
      case 4815:
      case 4816:
      case 4817:
      case 4818:
      case 4819:
      case 4820:
      case 4821:
      case 4822:
      case 4823:
      case 4824:
      case 4825:
      case 4826:
      case 4827:
      case 4828:
      case 4829:
      case 4830:
      case 4831:
      case 4832:
      case 4833:
      case 4834:
      case 4835:
      case 4836:
      case 4837:
      case 4838:
      case 4839:
      case 4840:
      case 4841:
      case 4842:
      case 4843:
      case 4844:
      case 4845:
      case 4846:
      case 4847:
      case 4848:
      case 4849:
      case 4850:
      case 4851:
      case 4852:
      case 4853:
      case 4854:
      case 4855:
        sub_1CD444228(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 4856:
      case 4857:
      case 4858:
      case 4859:
      case 4860:
      case 4861:
      case 4862:
      case 4863:
      case 4864:
      case 4865:
      case 4866:
      case 4867:
      case 4868:
      case 4869:
      case 4870:
      case 4871:
      case 4872:
      case 4873:
      case 4874:
      case 4875:
      case 4876:
      case 4877:
      case 4878:
      case 4879:
      case 4880:
      case 4881:
      case 4882:
      case 4883:
      case 4884:
      case 4885:
      case 4886:
      case 4887:
      case 4888:
      case 4889:
      case 4890:
      case 4891:
      case 4892:
      case 4893:
      case 4894:
      case 4895:
      case 4896:
      case 4897:
      case 4898:
      case 4899:
      case 4900:
      case 4901:
      case 4902:
      case 4903:
      case 4904:
      case 4905:
      case 4906:
      case 4907:
      case 4908:
      case 4909:
      case 4910:
      case 4911:
      case 4912:
      case 4913:
      case 4914:
      case 4915:
      case 4916:
      case 4917:
      case 4918:
      case 4919:
      case 4920:
      case 4921:
      case 4922:
      case 4923:
      case 4924:
      case 4925:
      case 4926:
      case 4927:
      case 4928:
      case 4929:
      case 4930:
      case 4931:
      case 4932:
      case 4933:
      case 4934:
      case 4935:
      case 4936:
      case 4937:
      case 4938:
      case 4939:
      case 4940:
      case 4941:
      case 4942:
      case 4943:
      case 4944:
      case 4945:
      case 4946:
      case 4947:
      case 4948:
      case 4949:
      case 4950:
      case 4951:
      case 4952:
      case 4953:
      case 4954:
      case 4955:
      case 4956:
      case 4957:
      case 4958:
      case 4959:
      case 4960:
      case 4961:
      case 4962:
      case 4963:
      case 4964:
      case 4965:
      case 4966:
      case 4967:
      case 4968:
      case 4969:
      case 4970:
      case 4971:
      case 4972:
      case 4973:
      case 4974:
      case 4975:
      case 4976:
      case 4977:
      case 4978:
      case 4979:
      case 4980:
      case 4981:
        sub_1CD4441F0(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 4982:
        sub_1CD443688(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 4983:
      case 4984:
      case 4985:
      case 4986:
      case 4987:
      case 4988:
      case 4989:
      case 4990:
      case 4991:
      case 4992:
      case 4993:
      case 4994:
      case 4995:
      case 4996:
      case 4997:
        sub_1CD44AF8C(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 4998:
        sub_1CD44BFDC((int *)a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 4999:
      case 5000:
      case 5001:
      case 5002:
      case 5003:
      case 5004:
      case 5005:
      case 5006:
      case 5007:
        sub_1CD44BEBC(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 5008:
      case 5009:
      case 5010:
      case 5011:
      case 5012:
      case 5013:
      case 5014:
      case 5015:
      case 5016:
      case 5017:
      case 5018:
      case 5019:
      case 5020:
      case 5021:
      case 5022:
      case 5023:
      case 5024:
      case 5025:
      case 5026:
      case 5027:
      case 5028:
      case 5029:
      case 5030:
      case 5031:
      case 5032:
      case 5033:
      case 5034:
      case 5035:
      case 5036:
      case 5037:
      case 5038:
        sub_1CD44E7D4(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 5039:
      case 5040:
      case 5041:
      case 5042:
      case 5043:
      case 5044:
      case 5045:
      case 5046:
      case 5047:
      case 5048:
      case 5049:
      case 5050:
      case 5051:
      case 5052:
      case 5053:
      case 5054:
      case 5055:
      case 5056:
      case 5057:
      case 5058:
      case 5059:
      case 5060:
      case 5061:
      case 5062:
      case 5063:
      case 5064:
      case 5065:
      case 5066:
      case 5067:
      case 5068:
      case 5069:
      case 5070:
      case 5071:
      case 5072:
      case 5073:
      case 5074:
      case 5075:
      case 5076:
      case 5077:
      case 5078:
      case 5079:
      case 5080:
      case 5081:
      case 5082:
      case 5083:
      case 5084:
      case 5085:
      case 5086:
      case 5087:
      case 5088:
      case 5089:
      case 5090:
      case 5091:
      case 5092:
      case 5093:
      case 5094:
      case 5095:
      case 5096:
      case 5097:
      case 5098:
      case 5099:
      case 5100:
      case 5101:
      case 5102:
      case 5103:
      case 5104:
      case 5105:
      case 5106:
      case 5107:
      case 5108:
      case 5109:
      case 5110:
      case 5111:
      case 5112:
      case 5113:
      case 5114:
      case 5115:
      case 5116:
      case 5117:
      case 5118:
      case 5119:
      case 5120:
      case 5121:
      case 5122:
      case 5123:
      case 5124:
      case 5125:
      case 5126:
      case 5127:
      case 5128:
      case 5129:
      case 5130:
      case 5131:
      case 5132:
      case 5133:
      case 5134:
      case 5135:
      case 5136:
      case 5137:
      case 5138:
      case 5139:
      case 5140:
      case 5141:
      case 5142:
      case 5143:
      case 5144:
      case 5145:
      case 5146:
        sub_1CD44818C(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 5147:
      case 5148:
      case 5149:
      case 5150:
      case 5151:
      case 5152:
      case 5153:
      case 5154:
      case 5155:
      case 5156:
      case 5157:
      case 5158:
      case 5159:
      case 5160:
      case 5161:
      case 5162:
      case 5163:
      case 5164:
      case 5165:
      case 5166:
      case 5167:
      case 5168:
      case 5169:
      case 5170:
      case 5171:
      case 5172:
      case 5173:
      case 5174:
      case 5175:
      case 5176:
      case 5177:
      case 5178:
      case 5179:
      case 5180:
      case 5181:
      case 5182:
      case 5183:
      case 5184:
      case 5185:
      case 5186:
      case 5187:
      case 5188:
      case 5189:
      case 5190:
      case 5191:
      case 5192:
      case 5193:
      case 5194:
      case 5195:
      case 5196:
      case 5197:
      case 5198:
      case 5199:
      case 5200:
      case 5201:
      case 5202:
      case 5203:
      case 5204:
      case 5205:
      case 5206:
      case 5207:
      case 5208:
      case 5209:
      case 5210:
      case 5211:
      case 5212:
      case 5213:
      case 5214:
      case 5215:
      case 5216:
      case 5217:
      case 5218:
      case 5219:
      case 5220:
      case 5221:
      case 5222:
      case 5223:
      case 5224:
      case 5225:
      case 5226:
      case 5227:
      case 5228:
      case 5229:
      case 5230:
      case 5231:
      case 5232:
      case 5233:
      case 5234:
      case 5235:
      case 5236:
      case 5237:
      case 5238:
      case 5239:
      case 5240:
      case 5241:
      case 5242:
      case 5243:
      case 5244:
      case 5245:
      case 5246:
      case 5247:
      case 5248:
      case 5249:
      case 5250:
      case 5251:
      case 5252:
      case 5253:
      case 5254:
      case 5255:
      case 5256:
      case 5257:
      case 5258:
      case 5259:
      case 5260:
      case 5261:
      case 5262:
      case 5263:
      case 5264:
      case 5265:
      case 5266:
      case 5267:
      case 5268:
      case 5269:
      case 5270:
      case 5271:
      case 5272:
      case 5273:
      case 5274:
      case 5275:
      case 5276:
      case 5277:
      case 5278:
      case 5279:
      case 5280:
      case 5281:
      case 5282:
      case 5283:
      case 5284:
      case 5285:
      case 5286:
      case 5287:
      case 5288:
      case 5289:
      case 5290:
      case 5291:
      case 5292:
      case 5293:
      case 5294:
      case 5295:
      case 5296:
      case 5297:
      case 5298:
      case 5299:
      case 5300:
      case 5301:
      case 5302:
      case 5303:
      case 5304:
      case 5305:
      case 5306:
      case 5307:
      case 5308:
      case 5309:
      case 5310:
      case 5311:
      case 5312:
      case 5313:
      case 5314:
      case 5315:
      case 5316:
      case 5317:
      case 5318:
      case 5319:
      case 5320:
      case 5321:
      case 5322:
      case 5323:
      case 5324:
      case 5325:
      case 5326:
      case 5327:
      case 5328:
      case 5329:
      case 5330:
      case 5331:
      case 5332:
      case 5333:
      case 5334:
      case 5335:
      case 5336:
      case 5337:
      case 5338:
      case 5339:
      case 5340:
      case 5341:
      case 5342:
      case 5343:
      case 5344:
      case 5345:
      case 5346:
      case 5347:
      case 5348:
      case 5349:
      case 5350:
      case 5351:
      case 5352:
      case 5353:
      case 5354:
      case 5355:
      case 5356:
      case 5357:
      case 5358:
      case 5359:
      case 5360:
      case 5361:
      case 5362:
      case 5363:
      case 5364:
      case 5365:
      case 5366:
      case 5367:
      case 5368:
      case 5369:
      case 5370:
      case 5371:
      case 5372:
      case 5373:
      case 5374:
      case 5375:
      case 5376:
      case 5377:
      case 5378:
      case 5379:
      case 5380:
      case 5381:
      case 5382:
      case 5383:
      case 5384:
      case 5385:
      case 5386:
      case 5387:
      case 5388:
      case 5389:
      case 5390:
      case 5391:
      case 5392:
      case 5393:
      case 5394:
      case 5395:
      case 5396:
      case 5397:
      case 5398:
        sub_1CD447B0C(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 5399:
      case 5400:
      case 5401:
      case 5402:
      case 5403:
      case 5404:
      case 5405:
      case 5406:
      case 5407:
      case 5408:
      case 5409:
      case 5410:
      case 5411:
      case 5412:
      case 5413:
      case 5414:
      case 5415:
      case 5416:
      case 5417:
      case 5418:
      case 5419:
      case 5420:
      case 5421:
      case 5422:
      case 5423:
      case 5424:
      case 5425:
      case 5426:
      case 5427:
      case 5428:
      case 5429:
      case 5430:
      case 5431:
      case 5432:
      case 5433:
      case 5434:
      case 5435:
      case 5436:
      case 5437:
      case 5438:
      case 5439:
      case 5440:
      case 5441:
      case 5442:
      case 5443:
      case 5444:
      case 5445:
      case 5446:
      case 5447:
      case 5448:
      case 5449:
      case 5450:
      case 5451:
      case 5452:
      case 5453:
      case 5454:
      case 5455:
      case 5456:
      case 5457:
      case 5458:
      case 5459:
      case 5460:
      case 5461:
      case 5462:
      case 5463:
      case 5464:
      case 5465:
      case 5466:
      case 5467:
      case 5468:
      case 5469:
      case 5470:
      case 5471:
      case 5472:
      case 5473:
      case 5474:
      case 5475:
      case 5476:
      case 5477:
      case 5478:
      case 5479:
      case 5480:
      case 5481:
      case 5482:
      case 5483:
      case 5484:
      case 5485:
      case 5486:
      case 5487:
      case 5488:
      case 5489:
      case 5490:
      case 5491:
      case 5492:
      case 5493:
      case 5494:
      case 5495:
      case 5496:
      case 5497:
      case 5498:
      case 5499:
      case 5500:
      case 5501:
      case 5502:
      case 5503:
      case 5504:
      case 5505:
      case 5506:
      case 5507:
      case 5508:
      case 5509:
      case 5510:
      case 5511:
      case 5512:
      case 5513:
      case 5514:
      case 5515:
      case 5516:
      case 5517:
      case 5518:
      case 5519:
      case 5520:
      case 5521:
      case 5522:
      case 5523:
      case 5524:
        sub_1CD448130(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 5525:
      case 5526:
      case 5527:
      case 5528:
      case 5529:
      case 5530:
      case 5531:
      case 5532:
      case 5533:
      case 5534:
      case 5535:
      case 5536:
      case 5537:
      case 5538:
      case 5539:
      case 5540:
      case 5541:
      case 5542:
      case 5543:
      case 5544:
      case 5545:
      case 5546:
      case 5547:
      case 5548:
      case 5549:
      case 5550:
      case 5551:
        sub_1CD443CE8(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 5552:
      case 5553:
      case 5554:
      case 5555:
      case 5556:
      case 5557:
      case 5558:
      case 5559:
      case 5560:
      case 5561:
      case 5562:
      case 5563:
      case 5564:
      case 5565:
      case 5566:
      case 5567:
      case 5568:
      case 5569:
      case 5570:
      case 5571:
      case 5572:
      case 5573:
      case 5574:
      case 5575:
      case 5576:
      case 5577:
      case 5578:
      case 5579:
      case 5580:
      case 5581:
      case 5582:
      case 5583:
      case 5584:
      case 5585:
      case 5586:
      case 5587:
      case 5588:
      case 5589:
      case 5590:
      case 5591:
      case 5592:
      case 5593:
      case 5594:
      case 5595:
      case 5596:
      case 5597:
      case 5598:
      case 5599:
      case 5600:
      case 5601:
        sub_1CD443CB0(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 5602:
      case 5603:
        sub_1CD4497E0(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 5604:
      case 5605:
      case 5606:
      case 5607:
      case 5608:
      case 5609:
      case 5610:
      case 5611:
        sub_1CBDA49FC(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 5612:
      case 5613:
      case 5614:
      case 5615:
      case 5616:
      case 5617:
      case 5618:
      case 5619:
        sub_1CBDA47D4(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 5620:
      case 5621:
        sub_1CD449900(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 5625:
      case 5626:
      case 5627:
        sub_1CD4443AC(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 5628:
      case 5629:
      case 5630:
      case 5631:
      case 5632:
      case 5633:
      case 5634:
      case 5635:
      case 5636:
      case 5637:
      case 5638:
      case 5639:
      case 5640:
      case 5641:
      case 5642:
      case 5643:
      case 5644:
      case 5645:
      case 5646:
      case 5647:
      case 5648:
      case 5649:
      case 5650:
      case 5651:
      case 5652:
      case 5653:
      case 5654:
      case 5655:
      case 5656:
      case 5657:
      case 5658:
      case 5659:
      case 5660:
      case 5661:
      case 5662:
      case 5663:
      case 5664:
      case 5665:
      case 5666:
      case 5667:
      case 5668:
      case 5669:
      case 5670:
      case 5671:
      case 5672:
      case 5673:
      case 5674:
      case 5675:
        sub_1CBDA29A0(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 5676:
      case 5677:
      case 5678:
      case 5679:
      case 5680:
      case 5681:
      case 5682:
      case 5683:
      case 5684:
      case 5685:
      case 5686:
      case 5687:
      case 5688:
      case 5689:
      case 5690:
      case 5691:
      case 5692:
      case 5693:
      case 5694:
      case 5695:
      case 5696:
      case 5697:
      case 5698:
      case 5699:
      case 5700:
      case 5701:
      case 5702:
      case 5703:
      case 5704:
      case 5705:
      case 5706:
      case 5707:
      case 5708:
      case 5709:
      case 5710:
      case 5711:
      case 5712:
      case 5713:
      case 5714:
      case 5715:
      case 5716:
      case 5717:
      case 5718:
      case 5719:
      case 5720:
      case 5721:
      case 5722:
      case 5723:
        sub_1CBDA2708(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 5724:
        sub_1CD44C664(a1, a2, (uint64_t)a3, a4, (uint64_t *)a5);
        break;
      case 5725:
      case 5726:
      case 5727:
      case 5728:
      case 5729:
      case 5730:
      case 5731:
      case 5732:
      case 5733:
      case 5734:
      case 5735:
      case 5736:
      case 5737:
      case 5738:
      case 5739:
      case 5740:
      case 5741:
      case 5742:
      case 5743:
      case 5744:
      case 5745:
      case 5746:
      case 5747:
      case 5748:
        sub_1CBDA2268(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 5749:
      case 5750:
      case 5751:
      case 5752:
      case 5753:
      case 5754:
      case 5755:
      case 5756:
      case 5757:
      case 5758:
      case 5759:
      case 5760:
      case 5761:
      case 5762:
      case 5763:
      case 5764:
      case 5765:
      case 5766:
      case 5767:
      case 5768:
      case 5769:
      case 5770:
      case 5771:
      case 5772:
      case 5773:
      case 5774:
      case 5775:
      case 5776:
      case 5777:
      case 5778:
      case 5779:
      case 5780:
      case 5781:
      case 5782:
      case 5783:
      case 5784:
      case 5785:
      case 5786:
      case 5787:
      case 5788:
      case 5789:
      case 5790:
      case 5791:
      case 5792:
      case 5793:
      case 5794:
      case 5795:
      case 5796:
      case 5797:
      case 5798:
      case 5799:
      case 5800:
      case 5801:
      case 5802:
      case 5803:
      case 5804:
      case 5805:
      case 5806:
      case 5807:
      case 5808:
      case 5809:
      case 5810:
      case 5811:
      case 5812:
        sub_1CD446804(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 5813:
      case 5816:
      case 5819:
      case 5822:
      case 5825:
      case 5828:
      case 5831:
      case 5834:
      case 5837:
      case 5840:
      case 5843:
      case 5846:
      case 5849:
      case 5852:
      case 5855:
      case 5858:
      case 5861:
      case 5864:
      case 5867:
      case 5870:
      case 5873:
      case 5876:
      case 5879:
      case 5882:
      case 5885:
      case 5888:
      case 5891:
      case 5894:
      case 5897:
      case 5900:
      case 5903:
      case 5906:
        sub_1CBDA1998(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 5814:
      case 5815:
      case 5817:
      case 5818:
      case 5820:
      case 5821:
      case 5823:
      case 5824:
      case 5826:
      case 5827:
      case 5829:
      case 5830:
      case 5832:
      case 5833:
      case 5835:
      case 5836:
      case 5838:
      case 5839:
      case 5841:
      case 5842:
      case 5844:
      case 5845:
      case 5847:
      case 5848:
      case 5850:
      case 5851:
      case 5853:
      case 5854:
      case 5856:
      case 5857:
      case 5859:
      case 5860:
      case 5862:
      case 5863:
      case 5865:
      case 5866:
      case 5868:
      case 5869:
      case 5871:
      case 5872:
      case 5874:
      case 5875:
      case 5877:
      case 5878:
      case 5880:
      case 5881:
      case 5883:
      case 5884:
      case 5886:
      case 5887:
      case 5889:
      case 5890:
      case 5892:
      case 5893:
      case 5895:
      case 5896:
      case 5898:
      case 5899:
      case 5901:
      case 5902:
      case 5904:
      case 5905:
      case 5907:
      case 5908:
        sub_1CBDA1BA8(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 5909:
      case 5912:
      case 5915:
      case 5918:
      case 5921:
      case 5924:
      case 5927:
      case 5930:
      case 5933:
      case 5936:
      case 5939:
      case 5942:
      case 5945:
      case 5948:
      case 5951:
      case 5954:
      case 5957:
      case 5960:
      case 5963:
      case 5966:
      case 5969:
      case 5972:
      case 5975:
      case 5978:
      case 5981:
      case 5982:
      case 5983:
      case 5984:
      case 5985:
      case 5986:
      case 5987:
      case 5988:
      case 5989:
      case 5990:
      case 5991:
      case 5992:
      case 5993:
      case 5994:
      case 5995:
      case 5996:
      case 5997:
      case 5998:
      case 5999:
      case 6000:
      case 6001:
      case 6002:
      case 6003:
      case 6004:
        sub_1CBDA0C6C(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 5910:
      case 5911:
      case 5913:
      case 5914:
      case 5916:
      case 5917:
      case 5919:
      case 5920:
      case 5922:
      case 5923:
      case 5925:
      case 5926:
      case 5928:
      case 5929:
      case 5931:
      case 5932:
      case 5934:
      case 5935:
      case 5937:
      case 5938:
      case 5940:
      case 5941:
      case 5943:
      case 5944:
      case 5946:
      case 5947:
      case 5949:
      case 5950:
      case 5952:
      case 5953:
      case 5955:
      case 5956:
      case 5958:
      case 5959:
      case 5961:
      case 5962:
      case 5964:
      case 5965:
      case 5967:
      case 5968:
      case 5970:
      case 5971:
      case 5973:
      case 5974:
      case 5976:
      case 5977:
      case 5979:
      case 5980:
        sub_1CBDA112C(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 6005:
      case 6006:
      case 6007:
      case 6008:
      case 6009:
      case 6010:
      case 6011:
      case 6012:
      case 6013:
      case 6014:
      case 6015:
      case 6016:
      case 6017:
      case 6018:
      case 6019:
      case 6020:
      case 6021:
      case 6022:
      case 6023:
      case 6024:
      case 6025:
      case 6026:
      case 6027:
      case 6028:
      case 6029:
      case 6030:
      case 6031:
      case 6032:
      case 6033:
      case 6034:
      case 6035:
      case 6036:
      case 6037:
      case 6038:
      case 6039:
      case 6040:
      case 6041:
      case 6042:
      case 6043:
      case 6044:
      case 6045:
      case 6046:
      case 6047:
      case 6048:
      case 6049:
      case 6050:
      case 6051:
      case 6052:
      case 6053:
      case 6054:
      case 6055:
      case 6056:
      case 6057:
      case 6058:
      case 6059:
      case 6060:
      case 6061:
      case 6062:
      case 6063:
      case 6064:
      case 6065:
      case 6066:
      case 6067:
      case 6068:
        sub_1CD446634(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 6069:
      case 6072:
      case 6075:
      case 6078:
      case 6081:
      case 6084:
      case 6087:
      case 6090:
      case 6093:
      case 6096:
      case 6099:
      case 6102:
      case 6105:
      case 6108:
      case 6111:
      case 6114:
      case 6117:
      case 6120:
      case 6123:
      case 6126:
      case 6129:
      case 6132:
      case 6135:
      case 6138:
      case 6141:
      case 6144:
      case 6147:
      case 6150:
      case 6153:
      case 6156:
      case 6159:
      case 6162:
        sub_1CBDA1E08(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 6070:
      case 6071:
      case 6073:
      case 6074:
      case 6076:
      case 6077:
      case 6079:
      case 6080:
      case 6082:
      case 6083:
      case 6085:
      case 6086:
      case 6088:
      case 6089:
      case 6091:
      case 6092:
      case 6094:
      case 6095:
      case 6097:
      case 6098:
      case 6100:
      case 6101:
      case 6103:
      case 6104:
      case 6106:
      case 6107:
      case 6109:
      case 6110:
      case 6112:
      case 6113:
      case 6115:
      case 6116:
      case 6118:
      case 6119:
      case 6121:
      case 6122:
      case 6124:
      case 6125:
      case 6127:
      case 6128:
      case 6130:
      case 6131:
      case 6133:
      case 6134:
      case 6136:
      case 6137:
      case 6139:
      case 6140:
      case 6142:
      case 6143:
      case 6145:
      case 6146:
      case 6148:
      case 6149:
      case 6151:
      case 6152:
      case 6154:
      case 6155:
      case 6157:
      case 6158:
      case 6160:
      case 6161:
      case 6163:
      case 6164:
        sub_1CBDA2010(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 6165:
        sub_1CD44B340(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 6167:
        sub_1CD4435F8(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 6222:
        sub_1CD443540(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 6250:
      case 6251:
      case 6252:
      case 6253:
      case 6254:
      case 6255:
        sub_1CD448DD8(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 6337:
      case 6338:
      case 6339:
      case 6340:
      case 6341:
      case 6342:
      case 6343:
      case 6344:
      case 6345:
      case 6346:
      case 6347:
      case 6348:
      case 6349:
      case 6350:
      case 6351:
      case 6352:
      case 6353:
      case 6354:
        sub_1CD44DDEC(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 6355:
      case 6359:
      case 6363:
      case 6367:
      case 6371:
      case 6375:
      case 6379:
      case 6383:
      case 6387:
      case 6391:
      case 6395:
      case 6399:
      case 6403:
      case 6407:
      case 6411:
      case 6415:
      case 6419:
      case 6423:
      case 6427:
      case 6431:
      case 6435:
      case 6439:
      case 6443:
      case 6447:
      case 6451:
      case 6455:
      case 6459:
        sub_1CD448FA0(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 6356:
      case 6357:
      case 6358:
      case 6360:
      case 6361:
      case 6362:
      case 6364:
      case 6365:
      case 6366:
      case 6368:
      case 6369:
      case 6370:
      case 6372:
      case 6373:
      case 6374:
      case 6376:
      case 6377:
      case 6378:
      case 6380:
      case 6381:
      case 6382:
      case 6384:
      case 6385:
      case 6386:
      case 6388:
      case 6389:
      case 6390:
      case 6392:
      case 6393:
      case 6394:
      case 6396:
      case 6397:
      case 6398:
      case 6400:
      case 6401:
      case 6402:
      case 6404:
      case 6405:
      case 6406:
      case 6408:
      case 6409:
      case 6410:
      case 6412:
      case 6413:
      case 6414:
      case 6416:
      case 6417:
      case 6418:
      case 6420:
      case 6421:
      case 6422:
      case 6424:
      case 6425:
      case 6426:
      case 6428:
      case 6429:
      case 6430:
      case 6432:
      case 6433:
      case 6434:
      case 6436:
      case 6437:
      case 6438:
      case 6440:
      case 6441:
      case 6442:
      case 6444:
      case 6445:
      case 6446:
      case 6448:
      case 6449:
      case 6450:
      case 6452:
      case 6453:
      case 6454:
      case 6456:
      case 6457:
      case 6458:
      case 6460:
      case 6461:
      case 6462:
        sub_1CD44917C(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 6463:
      case 6464:
      case 6465:
      case 6466:
      case 6467:
      case 6468:
      case 6469:
      case 6470:
      case 6479:
      case 6480:
      case 6481:
      case 6482:
      case 6483:
      case 6484:
      case 6485:
      case 6486:
        sub_1CD44A35C(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 6471:
      case 6472:
      case 6473:
      case 6474:
      case 6475:
      case 6476:
      case 6477:
      case 6478:
      case 6487:
      case 6488:
      case 6489:
      case 6490:
      case 6491:
      case 6492:
      case 6493:
      case 6494:
        sub_1CD44A534(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 6495:
      case 6496:
      case 6497:
      case 6498:
        sub_1CD446A1C(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 6499:
      case 6500:
      case 6501:
      case 6502:
        sub_1CD446BAC(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 6503:
        sub_1CD44B1DC(a1, a2, (uint64_t)a3, a4, a5);
        break;
      case 6504:
        sub_1CD44B104(a1, a2, (uint64_t)a3, a4, a5);
        break;
      case 6505:
      case 6506:
      case 6507:
      case 6508:
      case 6509:
      case 6510:
      case 6511:
      case 6512:
      case 6557:
      case 6558:
      case 6559:
      case 6560:
      case 6561:
      case 6562:
      case 6563:
      case 6564:
      case 6581:
      case 6582:
      case 6583:
      case 6584:
      case 6585:
      case 6586:
      case 6587:
      case 6588:
      case 6589:
      case 6590:
      case 6591:
      case 6592:
      case 6593:
      case 6594:
      case 6595:
      case 6596:
      case 6597:
      case 6598:
      case 6599:
      case 6600:
      case 6601:
      case 6602:
      case 6603:
      case 6604:
      case 8751:
      case 8752:
      case 8753:
      case 8754:
      case 8755:
      case 8756:
      case 8757:
      case 8758:
      case 8803:
      case 8804:
      case 8805:
      case 8806:
      case 8807:
      case 8808:
      case 8809:
      case 8810:
      case 8827:
      case 8828:
      case 8829:
      case 8830:
      case 8831:
      case 8832:
      case 8833:
      case 8834:
      case 8835:
      case 8836:
      case 8837:
      case 8838:
      case 8839:
      case 8840:
      case 8841:
      case 8842:
      case 8843:
      case 8844:
      case 8845:
      case 8846:
      case 8847:
      case 8848:
      case 8849:
      case 8850:
        sub_1CD44BA8C(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 6513:
      case 6514:
      case 6515:
      case 6516:
      case 8759:
      case 8760:
      case 8761:
      case 8762:
        sub_1CD44BCA8(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 6517:
      case 6518:
      case 6519:
      case 6520:
      case 6521:
      case 6522:
      case 6523:
      case 6524:
      case 6525:
      case 6526:
      case 6527:
      case 6528:
      case 6529:
      case 6530:
      case 6531:
      case 6532:
      case 6533:
      case 6534:
      case 6535:
      case 6536:
      case 6537:
      case 6538:
      case 6539:
      case 6540:
      case 6541:
      case 6542:
      case 6543:
      case 6544:
      case 6545:
      case 6546:
      case 6547:
      case 6548:
      case 8763:
      case 8764:
      case 8765:
      case 8766:
      case 8767:
      case 8768:
      case 8769:
      case 8770:
      case 8771:
      case 8772:
      case 8773:
      case 8774:
      case 8775:
      case 8776:
      case 8777:
      case 8778:
      case 8779:
      case 8780:
      case 8781:
      case 8782:
      case 8783:
      case 8784:
      case 8785:
      case 8786:
      case 8787:
      case 8788:
      case 8789:
      case 8790:
      case 8791:
      case 8792:
      case 8793:
      case 8794:
        sub_1CD44BDB0(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 6549:
      case 6550:
      case 6551:
      case 6552:
      case 6553:
      case 6554:
      case 6555:
      case 6556:
      case 6565:
      case 6566:
      case 6567:
      case 6568:
      case 6569:
      case 6570:
      case 6571:
      case 6572:
      case 6573:
      case 6574:
      case 6575:
      case 6576:
      case 6577:
      case 6578:
      case 6579:
      case 6580:
      case 8795:
      case 8796:
      case 8797:
      case 8798:
      case 8799:
      case 8800:
      case 8801:
      case 8802:
      case 8811:
      case 8812:
      case 8813:
      case 8814:
      case 8815:
      case 8816:
      case 8817:
      case 8818:
      case 8819:
      case 8820:
      case 8821:
      case 8822:
      case 8823:
      case 8824:
      case 8825:
      case 8826:
        sub_1CD44BB9C(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 6605:
      case 6606:
      case 6607:
      case 6608:
      case 6609:
      case 6610:
      case 6611:
      case 6612:
      case 6613:
      case 6614:
      case 6615:
      case 6616:
      case 6671:
      case 6672:
      case 6673:
      case 6674:
      case 6675:
      case 6676:
      case 6677:
      case 6678:
      case 6679:
      case 6680:
      case 6681:
      case 6682:
      case 6683:
      case 6684:
      case 6685:
      case 6686:
      case 6687:
      case 6688:
      case 6689:
      case 6690:
      case 6691:
      case 6692:
      case 6693:
      case 6694:
      case 6695:
      case 6696:
      case 6697:
      case 6698:
      case 6699:
      case 6700:
      case 6701:
      case 6702:
      case 6703:
      case 6704:
      case 6705:
      case 6706:
      case 6847:
      case 6848:
      case 6849:
      case 6850:
      case 6851:
      case 6852:
      case 6853:
      case 6854:
      case 6855:
      case 6856:
      case 6857:
      case 6858:
      case 6859:
      case 6860:
      case 6861:
      case 6862:
      case 6863:
      case 6864:
      case 6865:
      case 6866:
      case 6867:
      case 6868:
      case 6869:
      case 6870:
      case 6973:
      case 6974:
      case 6975:
      case 6976:
      case 6977:
      case 6978:
      case 6979:
      case 6980:
      case 6981:
      case 6982:
      case 6983:
      case 6984:
      case 6985:
      case 6986:
      case 6987:
      case 6988:
      case 6989:
      case 6990:
      case 6991:
      case 6992:
      case 6993:
      case 6994:
      case 6995:
      case 6996:
        sub_1CD44B7F0(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 6617:
      case 6618:
      case 6619:
      case 6620:
      case 6621:
      case 6622:
      case 6623:
      case 6624:
      case 6625:
      case 6626:
      case 6627:
      case 6628:
      case 6629:
      case 6630:
      case 6631:
      case 6632:
      case 6633:
      case 6634:
      case 6635:
      case 6636:
      case 6637:
      case 6638:
      case 6639:
      case 6640:
      case 6641:
      case 6642:
      case 6643:
      case 6871:
      case 6872:
      case 6873:
      case 6874:
      case 6875:
      case 6876:
      case 6877:
      case 6878:
      case 6879:
      case 6880:
      case 6881:
      case 6882:
      case 6883:
      case 6884:
      case 6885:
      case 6886:
      case 6887:
      case 6888:
      case 6889:
      case 6890:
      case 6891:
      case 6892:
      case 6893:
      case 6894:
      case 6895:
      case 6896:
      case 6897:
        sub_1CD44B648(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 6644:
      case 6645:
      case 6646:
      case 6647:
      case 6648:
      case 6649:
      case 6650:
      case 6651:
      case 6652:
      case 6653:
      case 6654:
      case 6655:
      case 6656:
      case 6657:
      case 6658:
      case 6659:
      case 6660:
      case 6661:
      case 6662:
      case 6663:
      case 6664:
      case 6665:
      case 6666:
      case 6667:
      case 6668:
      case 6669:
      case 6670:
      case 6898:
      case 6899:
      case 6900:
      case 6901:
      case 6902:
      case 6903:
      case 6904:
      case 6905:
      case 6906:
      case 6907:
      case 6908:
      case 6909:
      case 6910:
      case 6911:
      case 6912:
      case 6913:
      case 6914:
      case 6915:
      case 6916:
      case 6917:
      case 6918:
      case 6919:
      case 6920:
      case 6921:
      case 6922:
      case 6923:
      case 6924:
        sub_1CD44B490(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 6716:
        sub_1CD44C19C(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 6721:
      case 6722:
      case 6723:
      case 6724:
        sub_1CD4444BC(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 6725:
      case 6726:
      case 6727:
      case 6728:
      case 6729:
      case 6730:
      case 6731:
      case 6732:
      case 6733:
      case 6734:
      case 6735:
      case 6736:
      case 6737:
      case 6738:
      case 6739:
      case 6740:
      case 6741:
      case 6742:
      case 6743:
      case 6744:
      case 6745:
      case 6746:
      case 6747:
      case 6748:
        sub_1CD448908(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 6749:
      case 6750:
      case 6751:
      case 6752:
      case 6753:
      case 6754:
      case 6755:
      case 6756:
      case 6757:
      case 6758:
      case 6759:
      case 6760:
      case 6761:
      case 6762:
      case 6763:
      case 6764:
      case 6765:
      case 6766:
      case 6767:
      case 6768:
      case 6769:
      case 6770:
      case 6771:
      case 6772:
      case 6773:
      case 6774:
      case 6775:
      case 6776:
      case 6777:
      case 6778:
      case 6779:
      case 6780:
      case 6781:
      case 6782:
      case 6783:
      case 6784:
      case 6785:
      case 6786:
      case 6787:
      case 6788:
      case 6789:
      case 6790:
      case 6791:
      case 6792:
      case 6793:
      case 6794:
      case 6795:
      case 6796:
      case 6797:
      case 6798:
      case 6799:
      case 6800:
      case 6801:
      case 6802:
      case 6803:
      case 6804:
        sub_1CD44839C(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 6805:
      case 6806:
      case 6807:
      case 6808:
      case 6809:
      case 6810:
      case 6811:
      case 6812:
      case 6813:
      case 6814:
      case 6815:
      case 6816:
      case 6817:
      case 6818:
      case 6819:
      case 6820:
      case 6821:
      case 6822:
      case 6823:
      case 6824:
      case 6825:
      case 6826:
      case 6827:
      case 6828:
      case 6829:
      case 6830:
      case 6831:
      case 6832:
        sub_1CD4488AC(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 6833:
        sub_1CD44C9C8(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 6834:
      case 6835:
      case 6836:
      case 6837:
      case 6838:
      case 6839:
      case 6840:
      case 6841:
      case 6842:
      case 6843:
      case 6844:
      case 6845:
        sub_1CD447160(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 6925:
      case 6926:
      case 6927:
      case 6928:
      case 6929:
      case 6930:
      case 6931:
      case 6932:
      case 6933:
      case 6934:
      case 6935:
      case 6936:
      case 6949:
      case 6950:
      case 6951:
      case 6952:
      case 6953:
      case 6954:
      case 6955:
      case 6956:
      case 6957:
      case 6958:
      case 6959:
      case 6960:
        sub_1CBDA4D88(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 7159:
      case 7160:
      case 7161:
      case 7162:
      case 7163:
      case 7164:
      case 7165:
      case 7166:
      case 7167:
      case 7168:
      case 7169:
      case 7170:
      case 7171:
      case 7172:
      case 7173:
      case 7174:
      case 7175:
      case 7176:
      case 7177:
      case 7178:
      case 7179:
      case 7180:
      case 7181:
      case 7182:
      case 7183:
      case 7184:
      case 7185:
      case 7186:
      case 7187:
      case 7188:
      case 7189:
      case 7190:
      case 7191:
      case 7192:
      case 7193:
      case 7194:
      case 7195:
      case 7196:
      case 7197:
      case 7198:
      case 7199:
      case 7200:
      case 7201:
      case 7202:
      case 7203:
      case 7204:
      case 7205:
      case 7206:
      case 7207:
      case 7208:
      case 7209:
      case 7210:
      case 7211:
      case 7212:
      case 7213:
      case 7214:
      case 7215:
      case 7216:
      case 7217:
      case 7218:
      case 7219:
      case 7220:
      case 7221:
      case 7222:
      case 7223:
      case 7224:
      case 7225:
      case 7226:
      case 7227:
      case 7228:
      case 7229:
      case 7230:
      case 7231:
      case 7232:
      case 7233:
      case 7234:
      case 7235:
      case 7236:
      case 7237:
      case 7238:
      case 7239:
      case 7240:
      case 7241:
      case 7242:
      case 7243:
      case 7244:
      case 7245:
      case 7246:
      case 7247:
      case 7248:
      case 7249:
      case 7250:
      case 7251:
      case 7252:
      case 7253:
      case 7254:
      case 7255:
      case 7256:
      case 7257:
      case 7258:
      case 7259:
      case 7260:
      case 7261:
      case 7262:
      case 7263:
      case 7264:
      case 7265:
      case 7266:
      case 7267:
      case 7268:
      case 7269:
      case 7270:
      case 7271:
      case 7272:
      case 7273:
      case 7274:
      case 7275:
      case 7276:
      case 7277:
      case 7278:
      case 7279:
      case 7280:
      case 7281:
      case 7282:
      case 7283:
      case 7284:
      case 7285:
      case 7286:
      case 7287:
      case 7288:
      case 7289:
      case 7290:
      case 7291:
      case 7292:
      case 7293:
      case 7294:
      case 7295:
      case 7296:
      case 7297:
      case 7298:
      case 7299:
      case 7300:
      case 7301:
      case 7302:
      case 7303:
      case 7304:
      case 7305:
      case 7306:
      case 7307:
      case 7308:
      case 7309:
      case 7310:
      case 7311:
      case 7312:
      case 7313:
      case 7314:
      case 7315:
      case 7316:
      case 7317:
      case 7318:
      case 7319:
      case 7320:
      case 7321:
      case 7322:
      case 7323:
      case 7324:
      case 7325:
      case 7326:
      case 7327:
      case 7328:
      case 7329:
      case 7330:
      case 7331:
      case 7332:
      case 7333:
      case 7334:
      case 7335:
      case 7336:
      case 7337:
      case 7338:
      case 7339:
      case 7340:
      case 7341:
      case 7342:
      case 7343:
      case 7344:
      case 7345:
      case 7346:
      case 7347:
      case 7348:
      case 7349:
      case 7350:
      case 7351:
      case 7352:
      case 7353:
      case 7354:
      case 7355:
      case 7356:
      case 7357:
      case 7358:
      case 7359:
      case 7360:
      case 7361:
      case 7362:
      case 7363:
      case 7364:
      case 7365:
      case 7366:
      case 7367:
      case 7368:
      case 7369:
      case 7370:
      case 7371:
      case 7372:
      case 7373:
      case 7374:
      case 7375:
      case 7376:
      case 7377:
      case 7378:
      case 7379:
      case 7380:
      case 7381:
      case 7382:
      case 7383:
      case 7384:
      case 7385:
      case 7386:
      case 7387:
      case 7388:
      case 7389:
      case 7390:
      case 7391:
      case 7392:
      case 7393:
      case 7394:
      case 7395:
      case 7396:
      case 7397:
      case 7398:
      case 7399:
      case 7400:
      case 7401:
      case 7402:
      case 7403:
      case 7404:
      case 7405:
      case 7406:
      case 7407:
      case 7408:
      case 7409:
      case 7410:
      case 7411:
      case 7412:
      case 7413:
      case 7414:
      case 7415:
      case 7416:
      case 7417:
      case 7418:
      case 7419:
      case 7420:
      case 7421:
      case 7422:
      case 7423:
      case 7424:
      case 7425:
      case 7426:
      case 7427:
      case 7428:
      case 7429:
      case 7430:
      case 7431:
      case 7432:
      case 7433:
      case 7434:
      case 7435:
      case 7436:
      case 7437:
      case 7438:
      case 7439:
      case 7440:
      case 7441:
      case 7442:
      case 7443:
      case 7444:
      case 7445:
      case 7446:
      case 7447:
      case 7448:
      case 7449:
      case 7450:
      case 7451:
      case 7452:
      case 7453:
      case 7454:
      case 7455:
      case 7456:
      case 7457:
      case 7458:
      case 7459:
      case 7460:
      case 7461:
      case 7462:
      case 7463:
      case 7464:
      case 7465:
      case 7466:
      case 7467:
      case 7468:
      case 7469:
      case 7470:
      case 7471:
      case 7472:
      case 7473:
      case 7474:
      case 7475:
      case 7476:
      case 7477:
      case 7478:
      case 7479:
      case 7480:
      case 7481:
      case 7482:
      case 7483:
      case 7484:
      case 7485:
      case 7486:
      case 7487:
      case 7488:
      case 7489:
      case 7490:
      case 7491:
      case 7492:
      case 7493:
      case 7494:
      case 7495:
      case 7496:
      case 7497:
      case 7498:
      case 7499:
      case 7500:
      case 7501:
      case 7502:
      case 7503:
      case 7504:
      case 7505:
      case 7506:
      case 7507:
      case 7508:
      case 7509:
      case 7510:
      case 7511:
      case 7512:
      case 7513:
      case 7514:
      case 7515:
      case 7516:
      case 7517:
      case 7518:
      case 7519:
      case 7520:
      case 7521:
      case 7522:
      case 7523:
      case 7524:
      case 7525:
      case 7526:
      case 7527:
      case 7528:
      case 7529:
      case 7530:
      case 7531:
      case 7532:
      case 7533:
      case 7534:
      case 7535:
      case 7536:
      case 7537:
      case 7538:
      case 7539:
      case 7540:
      case 7541:
      case 7542:
      case 7927:
      case 7928:
      case 7929:
      case 7930:
      case 7931:
      case 7932:
      case 7933:
      case 7934:
      case 7935:
      case 7936:
      case 7937:
      case 7938:
      case 7939:
      case 7940:
      case 7941:
      case 7942:
      case 7943:
      case 7944:
      case 7945:
      case 7946:
      case 7947:
      case 7948:
      case 7949:
      case 7950:
      case 7951:
      case 7952:
      case 7953:
      case 7954:
      case 7955:
      case 7956:
      case 7957:
      case 7958:
      case 7959:
      case 7960:
      case 7961:
      case 7962:
      case 7963:
      case 7964:
      case 7965:
      case 7966:
      case 7967:
      case 7968:
      case 7969:
      case 7970:
      case 7971:
      case 7972:
      case 7973:
      case 7974:
      case 7975:
      case 7976:
      case 7977:
      case 7978:
      case 7979:
      case 7980:
      case 7981:
      case 7982:
      case 7983:
      case 7984:
      case 7985:
      case 7986:
      case 7987:
      case 7988:
      case 7989:
      case 7990:
      case 7991:
      case 7992:
      case 7993:
      case 7994:
      case 7995:
      case 7996:
      case 7997:
      case 7998:
      case 7999:
      case 8000:
      case 8001:
      case 8002:
      case 8003:
      case 8004:
      case 8005:
      case 8006:
      case 8007:
      case 8008:
      case 8009:
      case 8010:
      case 8011:
      case 8012:
      case 8013:
      case 8014:
      case 8015:
      case 8016:
      case 8017:
      case 8018:
      case 8019:
      case 8020:
      case 8021:
      case 8022:
      case 8023:
      case 8024:
      case 8025:
      case 8026:
      case 8027:
      case 8028:
      case 8029:
      case 8030:
      case 8031:
      case 8032:
      case 8033:
      case 8034:
      case 8035:
      case 8036:
      case 8037:
      case 8038:
      case 8039:
      case 8040:
      case 8041:
      case 8042:
      case 8043:
      case 8044:
      case 8045:
      case 8046:
      case 8047:
      case 8048:
      case 8049:
      case 8050:
      case 8051:
      case 8052:
      case 8053:
      case 8054:
      case 8055:
      case 8056:
      case 8057:
      case 8058:
      case 8059:
      case 8060:
      case 8061:
      case 8062:
      case 8063:
      case 8064:
      case 8065:
      case 8066:
      case 8067:
      case 8068:
      case 8069:
      case 8070:
      case 8071:
      case 8072:
      case 8073:
      case 8074:
      case 8075:
      case 8076:
      case 8077:
      case 8078:
      case 8079:
      case 8080:
      case 8081:
      case 8082:
      case 8083:
      case 8084:
      case 8085:
      case 8086:
      case 8087:
      case 8088:
      case 8089:
      case 8090:
      case 8091:
      case 8092:
      case 8093:
      case 8094:
      case 8095:
      case 8096:
      case 8097:
      case 8098:
      case 8099:
      case 8100:
      case 8101:
      case 8102:
      case 8103:
      case 8104:
      case 8105:
      case 8106:
      case 8107:
      case 8108:
      case 8109:
      case 8110:
      case 8111:
      case 8112:
      case 8113:
      case 8114:
      case 8115:
      case 8116:
      case 8117:
      case 8118:
      case 8119:
      case 8120:
      case 8121:
      case 8122:
      case 8123:
      case 8124:
      case 8125:
      case 8126:
      case 8127:
      case 8128:
      case 8129:
      case 8130:
      case 8131:
      case 8132:
      case 8133:
      case 8134:
      case 8135:
      case 8136:
      case 8137:
      case 8138:
      case 8139:
      case 8140:
      case 8141:
      case 8142:
      case 8143:
      case 8144:
      case 8145:
      case 8146:
      case 8147:
      case 8148:
      case 8149:
      case 8150:
      case 8151:
      case 8152:
      case 8153:
      case 8154:
      case 8155:
      case 8156:
      case 8157:
      case 8158:
      case 8159:
      case 8160:
      case 8161:
      case 8162:
      case 8163:
      case 8164:
      case 8165:
      case 8166:
      case 8167:
      case 8168:
      case 8169:
      case 8170:
      case 8171:
      case 8172:
      case 8173:
      case 8174:
      case 8175:
      case 8176:
      case 8177:
      case 8178:
      case 8179:
      case 8180:
      case 8181:
      case 8182:
      case 8183:
      case 8184:
      case 8185:
      case 8186:
      case 8187:
      case 8188:
      case 8189:
      case 8190:
      case 8191:
      case 8192:
      case 8193:
      case 8194:
      case 8195:
      case 8196:
      case 8197:
      case 8198:
      case 8199:
      case 8200:
      case 8201:
      case 8202:
      case 8203:
      case 8204:
      case 8205:
      case 8206:
      case 8207:
      case 8208:
      case 8209:
      case 8210:
      case 8211:
      case 8212:
      case 8213:
      case 8214:
      case 8215:
      case 8216:
      case 8217:
      case 8218:
      case 8219:
      case 8220:
      case 8221:
      case 8222:
      case 8223:
      case 8224:
      case 8225:
      case 8226:
      case 8227:
      case 8228:
      case 8229:
      case 8230:
      case 8231:
      case 8232:
      case 8233:
      case 8234:
      case 8235:
      case 8236:
      case 8237:
      case 8238:
      case 8239:
      case 8240:
      case 8241:
      case 8242:
      case 8243:
      case 8244:
      case 8245:
      case 8246:
      case 8247:
      case 8248:
      case 8249:
      case 8250:
      case 8251:
      case 8252:
      case 8253:
      case 8254:
      case 8255:
      case 8256:
      case 8257:
      case 8258:
      case 8259:
      case 8260:
      case 8261:
      case 8262:
      case 8263:
      case 8264:
      case 8265:
      case 8266:
      case 8267:
      case 8268:
      case 8269:
      case 8270:
      case 8271:
      case 8272:
      case 8273:
      case 8274:
      case 8275:
      case 8276:
      case 8277:
      case 8278:
      case 8279:
      case 8280:
      case 8281:
      case 8282:
      case 8283:
      case 8284:
      case 8285:
      case 8286:
      case 8287:
      case 8288:
      case 8289:
      case 8290:
      case 8291:
      case 8292:
      case 8293:
      case 8294:
      case 8295:
      case 8296:
      case 8297:
      case 8298:
      case 8299:
      case 8300:
      case 8301:
      case 8302:
      case 8303:
      case 8304:
      case 8305:
      case 8306:
      case 8307:
      case 8308:
      case 8309:
      case 8310:
        sub_1CD449A20(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 7543:
      case 7544:
      case 7545:
      case 7546:
      case 7547:
      case 7548:
      case 7549:
      case 7550:
      case 7551:
      case 7552:
      case 7553:
      case 7554:
      case 7555:
      case 7556:
      case 7557:
      case 7558:
      case 7559:
      case 7560:
      case 7561:
      case 7562:
      case 7563:
      case 7564:
      case 7565:
      case 7566:
      case 7567:
      case 7568:
      case 7569:
      case 7570:
      case 7571:
      case 7572:
      case 7573:
      case 7574:
      case 7575:
      case 7576:
      case 7577:
      case 7578:
      case 7579:
      case 7580:
      case 7581:
      case 7582:
      case 7583:
      case 7584:
      case 7585:
      case 7586:
      case 7587:
      case 7588:
      case 7589:
      case 7590:
      case 7591:
      case 7592:
      case 7593:
      case 7594:
      case 7595:
      case 7596:
      case 7597:
      case 7598:
      case 7599:
      case 7600:
      case 7601:
      case 7602:
      case 7603:
      case 7604:
      case 7605:
      case 7606:
      case 7607:
      case 7608:
      case 7609:
      case 7610:
      case 7611:
      case 7612:
      case 7613:
      case 7614:
      case 7615:
      case 7616:
      case 7617:
      case 7618:
      case 7619:
      case 7620:
      case 7621:
      case 7622:
      case 7623:
      case 7624:
      case 7625:
      case 7626:
      case 7627:
      case 7628:
      case 7629:
      case 7630:
      case 7631:
      case 7632:
      case 7633:
      case 7634:
      case 7635:
      case 7636:
      case 7637:
      case 7638:
      case 7639:
      case 7640:
      case 7641:
      case 7642:
      case 7643:
      case 7644:
      case 7645:
      case 7646:
      case 7647:
      case 7648:
      case 7649:
      case 7650:
      case 7651:
      case 7652:
      case 7653:
      case 7654:
      case 7655:
      case 7656:
      case 7657:
      case 7658:
      case 7659:
      case 7660:
      case 7661:
      case 7662:
      case 7663:
      case 7664:
      case 7665:
      case 7666:
      case 7667:
      case 7668:
      case 7669:
      case 7670:
      case 7671:
      case 7672:
      case 7673:
      case 7674:
      case 7675:
      case 7676:
      case 7677:
      case 7678:
      case 7679:
      case 7680:
      case 7681:
      case 7682:
      case 7683:
      case 7684:
      case 7685:
      case 7686:
      case 7687:
      case 7688:
      case 7689:
      case 7690:
      case 7691:
      case 7692:
      case 7693:
      case 7694:
      case 7695:
      case 7696:
      case 7697:
      case 7698:
      case 7699:
      case 7700:
      case 7701:
      case 7702:
      case 7703:
      case 7704:
      case 7705:
      case 7706:
      case 7707:
      case 7708:
      case 7709:
      case 7710:
      case 7711:
      case 7712:
      case 7713:
      case 7714:
      case 7715:
      case 7716:
      case 7717:
      case 7718:
      case 7719:
      case 7720:
      case 7721:
      case 7722:
      case 7723:
      case 7724:
      case 7725:
      case 7726:
      case 7727:
      case 7728:
      case 7729:
      case 7730:
      case 7731:
      case 7732:
      case 7733:
      case 7734:
      case 7735:
      case 7736:
      case 7737:
      case 7738:
      case 7739:
      case 7740:
      case 7741:
      case 7742:
      case 7743:
      case 7744:
      case 7745:
      case 7746:
      case 7747:
      case 7748:
      case 7749:
      case 7750:
      case 7751:
      case 7752:
      case 7753:
      case 7754:
      case 7755:
      case 7756:
      case 7757:
      case 7758:
      case 7759:
      case 7760:
      case 7761:
      case 7762:
      case 7763:
      case 7764:
      case 7765:
      case 7766:
      case 7767:
      case 7768:
      case 7769:
      case 7770:
      case 7771:
      case 7772:
      case 7773:
      case 7774:
      case 7775:
      case 7776:
      case 7777:
      case 7778:
      case 7779:
      case 7780:
      case 7781:
      case 7782:
      case 7783:
      case 7784:
      case 7785:
      case 7786:
      case 7787:
      case 7788:
      case 7789:
      case 7790:
      case 7791:
      case 7792:
      case 7793:
      case 7794:
      case 7795:
      case 7796:
      case 7797:
      case 7798:
      case 7799:
      case 7800:
      case 7801:
      case 7802:
      case 7803:
      case 7804:
      case 7805:
      case 7806:
      case 7807:
      case 7808:
      case 7809:
      case 7810:
      case 7811:
      case 7812:
      case 7813:
      case 7814:
      case 7815:
      case 7816:
      case 7817:
      case 7818:
      case 7819:
      case 7820:
      case 7821:
      case 7822:
      case 7823:
      case 7824:
      case 7825:
      case 7826:
      case 7827:
      case 7828:
      case 7829:
      case 7830:
      case 7831:
      case 7832:
      case 7833:
      case 7834:
      case 7835:
      case 7836:
      case 7837:
      case 7838:
      case 7839:
      case 7840:
      case 7841:
      case 7842:
      case 7843:
      case 7844:
      case 7845:
      case 7846:
      case 7847:
      case 7848:
      case 7849:
      case 7850:
      case 7851:
      case 7852:
      case 7853:
      case 7854:
      case 7855:
      case 7856:
      case 7857:
      case 7858:
      case 7859:
      case 7860:
      case 7861:
      case 7862:
      case 7863:
      case 7864:
      case 7865:
      case 7866:
      case 7867:
      case 7868:
      case 7869:
      case 7870:
      case 7871:
      case 7872:
      case 7873:
      case 7874:
      case 7875:
      case 7876:
      case 7877:
      case 7878:
      case 7879:
      case 7880:
      case 7881:
      case 7882:
      case 7883:
      case 7884:
      case 7885:
      case 7886:
      case 7887:
      case 7888:
      case 7889:
      case 7890:
      case 7891:
      case 7892:
      case 7893:
      case 7894:
      case 7895:
      case 7896:
      case 7897:
      case 7898:
      case 7899:
      case 7900:
      case 7901:
      case 7902:
      case 7903:
      case 7904:
      case 7905:
      case 7906:
      case 7907:
      case 7908:
      case 7909:
      case 7910:
      case 7911:
      case 7912:
      case 7913:
      case 7914:
      case 7915:
      case 7916:
      case 7917:
      case 7918:
      case 7919:
      case 7920:
      case 7921:
      case 7922:
      case 7923:
      case 7924:
      case 7925:
      case 7926:
      case 8311:
      case 8312:
      case 8313:
      case 8314:
      case 8315:
      case 8316:
      case 8317:
      case 8318:
      case 8319:
      case 8320:
      case 8321:
      case 8322:
      case 8323:
      case 8324:
      case 8325:
      case 8326:
      case 8327:
      case 8328:
      case 8329:
      case 8330:
      case 8331:
      case 8332:
      case 8333:
      case 8334:
      case 8335:
      case 8336:
      case 8337:
      case 8338:
      case 8339:
      case 8340:
      case 8341:
      case 8342:
      case 8343:
      case 8344:
      case 8345:
      case 8346:
      case 8347:
      case 8348:
      case 8349:
      case 8350:
      case 8351:
      case 8352:
      case 8353:
      case 8354:
      case 8355:
      case 8356:
      case 8357:
      case 8358:
      case 8359:
      case 8360:
      case 8361:
      case 8362:
      case 8363:
      case 8364:
      case 8365:
      case 8366:
      case 8367:
      case 8368:
      case 8369:
      case 8370:
      case 8371:
      case 8372:
      case 8373:
      case 8374:
      case 8375:
      case 8376:
      case 8377:
      case 8378:
      case 8379:
      case 8380:
      case 8381:
      case 8382:
      case 8383:
      case 8384:
      case 8385:
      case 8386:
      case 8387:
      case 8388:
      case 8389:
      case 8390:
      case 8391:
      case 8392:
      case 8393:
      case 8394:
      case 8395:
      case 8396:
      case 8397:
      case 8398:
      case 8399:
      case 8400:
      case 8401:
      case 8402:
      case 8403:
      case 8404:
      case 8405:
      case 8406:
      case 8407:
      case 8408:
      case 8409:
      case 8410:
      case 8411:
      case 8412:
      case 8413:
      case 8414:
      case 8415:
      case 8416:
      case 8417:
      case 8418:
      case 8419:
      case 8420:
      case 8421:
      case 8422:
      case 8423:
      case 8424:
      case 8425:
      case 8426:
      case 8427:
      case 8428:
      case 8429:
      case 8430:
      case 8431:
      case 8432:
      case 8433:
      case 8434:
      case 8435:
      case 8436:
      case 8437:
      case 8438:
      case 8439:
      case 8440:
      case 8441:
      case 8442:
      case 8443:
      case 8444:
      case 8445:
      case 8446:
      case 8447:
      case 8448:
      case 8449:
      case 8450:
      case 8451:
      case 8452:
      case 8453:
      case 8454:
      case 8455:
      case 8456:
      case 8457:
      case 8458:
      case 8459:
      case 8460:
      case 8461:
      case 8462:
      case 8463:
      case 8464:
      case 8465:
      case 8466:
      case 8467:
      case 8468:
      case 8469:
      case 8470:
      case 8471:
      case 8472:
      case 8473:
      case 8474:
      case 8475:
      case 8476:
      case 8477:
      case 8478:
      case 8479:
      case 8480:
      case 8481:
      case 8482:
      case 8483:
      case 8484:
      case 8485:
      case 8486:
      case 8487:
      case 8488:
      case 8489:
      case 8490:
      case 8491:
      case 8492:
      case 8493:
      case 8494:
      case 8495:
      case 8496:
      case 8497:
      case 8498:
      case 8499:
      case 8500:
      case 8501:
      case 8502:
      case 8503:
      case 8504:
      case 8505:
      case 8506:
      case 8507:
      case 8508:
      case 8509:
      case 8510:
      case 8511:
      case 8512:
      case 8513:
      case 8514:
      case 8515:
      case 8516:
      case 8517:
      case 8518:
      case 8519:
      case 8520:
      case 8521:
      case 8522:
      case 8523:
      case 8524:
      case 8525:
      case 8526:
      case 8527:
      case 8528:
      case 8529:
      case 8530:
      case 8531:
      case 8532:
      case 8533:
      case 8534:
      case 8535:
      case 8536:
      case 8537:
      case 8538:
      case 8539:
      case 8540:
      case 8541:
      case 8542:
      case 8543:
      case 8544:
      case 8545:
      case 8546:
      case 8547:
      case 8548:
      case 8549:
      case 8550:
      case 8551:
      case 8552:
      case 8553:
      case 8554:
      case 8555:
      case 8556:
      case 8557:
      case 8558:
      case 8559:
      case 8560:
      case 8561:
      case 8562:
      case 8563:
      case 8564:
      case 8565:
      case 8566:
      case 8567:
      case 8568:
      case 8569:
      case 8570:
      case 8571:
      case 8572:
      case 8573:
      case 8574:
      case 8575:
      case 8576:
      case 8577:
      case 8578:
      case 8579:
      case 8580:
      case 8581:
      case 8582:
      case 8583:
      case 8584:
      case 8585:
      case 8586:
      case 8587:
      case 8588:
      case 8589:
      case 8590:
      case 8591:
      case 8592:
      case 8593:
      case 8594:
      case 8595:
      case 8596:
      case 8597:
      case 8598:
      case 8599:
      case 8600:
      case 8601:
      case 8602:
      case 8603:
      case 8604:
      case 8605:
      case 8606:
      case 8607:
      case 8608:
      case 8609:
      case 8610:
      case 8611:
      case 8612:
      case 8613:
      case 8614:
      case 8615:
      case 8616:
      case 8617:
      case 8618:
      case 8619:
      case 8620:
      case 8621:
      case 8622:
      case 8623:
      case 8624:
      case 8625:
      case 8626:
      case 8627:
      case 8628:
      case 8629:
      case 8630:
      case 8631:
      case 8632:
      case 8633:
      case 8634:
      case 8635:
      case 8636:
      case 8637:
      case 8638:
      case 8639:
      case 8640:
      case 8641:
      case 8642:
      case 8643:
      case 8644:
      case 8645:
      case 8646:
      case 8647:
      case 8648:
      case 8649:
      case 8650:
      case 8651:
      case 8652:
      case 8653:
      case 8654:
      case 8655:
      case 8656:
      case 8657:
      case 8658:
      case 8659:
      case 8660:
      case 8661:
      case 8662:
      case 8663:
      case 8664:
      case 8665:
      case 8666:
      case 8667:
      case 8668:
      case 8669:
      case 8670:
      case 8671:
      case 8672:
      case 8673:
      case 8674:
      case 8675:
      case 8676:
      case 8677:
      case 8678:
      case 8679:
      case 8680:
      case 8681:
      case 8682:
      case 8683:
      case 8684:
      case 8685:
      case 8686:
      case 8687:
      case 8688:
      case 8689:
      case 8690:
      case 8691:
      case 8692:
      case 8693:
      case 8694:
        sub_1CD449D14(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 8695:
        sub_1CD44C73C(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 8696:
        sub_1CD44C8A8(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 8697:
      case 8698:
      case 8699:
      case 8700:
      case 8701:
      case 8702:
      case 8703:
      case 8704:
      case 8705:
      case 8706:
      case 8707:
      case 8708:
      case 8709:
      case 8710:
      case 8711:
      case 8712:
      case 8713:
      case 8714:
      case 8715:
      case 8716:
      case 8717:
      case 8718:
      case 8719:
      case 8720:
      case 8721:
      case 8722:
      case 8723:
      case 8724:
      case 8725:
      case 8726:
      case 8727:
      case 8728:
      case 8729:
      case 8730:
      case 8731:
      case 8732:
      case 8733:
      case 8734:
      case 8735:
      case 8736:
      case 8737:
      case 8738:
      case 8739:
      case 8740:
      case 8741:
      case 8742:
      case 8743:
      case 8744:
      case 8745:
      case 8746:
      case 8747:
      case 8748:
      case 8749:
      case 8750:
        sub_1CD446EEC(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 9013:
      case 9014:
      case 9015:
        sub_1CD44A0FC(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 9016:
      case 9017:
      case 9018:
        sub_1CD44A060(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 9019:
      case 9022:
      case 9025:
      case 9028:
      case 9031:
      case 9034:
      case 9037:
      case 9040:
      case 9043:
      case 9046:
      case 9049:
      case 9052:
      case 9055:
      case 9058:
      case 9061:
      case 9064:
      case 9067:
      case 9070:
      case 9073:
      case 9076:
      case 9079:
      case 9082:
      case 9085:
      case 9088:
      case 9091:
      case 9092:
      case 9093:
      case 9094:
      case 9095:
      case 9096:
      case 9097:
      case 9098:
      case 9099:
      case 9100:
      case 9101:
      case 9102:
      case 9103:
      case 9104:
      case 9105:
      case 9106:
      case 9107:
      case 9108:
      case 9109:
      case 9110:
      case 9111:
      case 9112:
      case 9113:
      case 9114:
        sub_1CBDA1378(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 9020:
      case 9021:
      case 9023:
      case 9024:
      case 9026:
      case 9027:
      case 9029:
      case 9030:
      case 9032:
      case 9033:
      case 9035:
      case 9036:
      case 9038:
      case 9039:
      case 9041:
      case 9042:
      case 9044:
      case 9045:
      case 9047:
      case 9048:
      case 9050:
      case 9051:
      case 9053:
      case 9054:
      case 9056:
      case 9057:
      case 9059:
      case 9060:
      case 9062:
      case 9063:
      case 9065:
      case 9066:
      case 9068:
      case 9069:
      case 9071:
      case 9072:
      case 9074:
      case 9075:
      case 9077:
      case 9078:
      case 9080:
      case 9081:
      case 9083:
      case 9084:
      case 9086:
      case 9087:
      case 9089:
      case 9090:
        sub_1CBDA1754(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 9115:
      case 9116:
      case 9117:
      case 9118:
      case 9119:
      case 9120:
      case 9121:
      case 9122:
      case 9123:
      case 9124:
      case 9125:
      case 9126:
      case 9127:
      case 9128:
      case 9129:
      case 9130:
      case 9131:
      case 9132:
      case 9133:
      case 9134:
      case 9135:
      case 9136:
      case 9137:
      case 9138:
      case 9139:
      case 9140:
      case 9141:
      case 9142:
      case 9143:
      case 9144:
      case 9145:
      case 9146:
      case 9147:
      case 9148:
      case 9149:
      case 9150:
      case 9151:
      case 9152:
      case 9153:
      case 9154:
      case 9155:
      case 9156:
      case 9157:
      case 9158:
      case 9159:
      case 9160:
      case 9161:
      case 9162:
        sub_1CBDA2B74(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 9163:
      case 9164:
      case 9165:
      case 9166:
      case 9167:
      case 9168:
      case 9169:
      case 9170:
      case 9171:
      case 9172:
      case 9173:
      case 9174:
      case 9175:
      case 9176:
      case 9177:
      case 9178:
      case 9179:
      case 9180:
      case 9181:
      case 9182:
      case 9183:
      case 9184:
      case 9185:
      case 9186:
        sub_1CBDA2508(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 9188:
      case 9189:
      case 9190:
      case 9191:
      case 9192:
      case 9193:
      case 9194:
      case 9195:
      case 9196:
      case 9197:
      case 9198:
      case 9199:
        sub_1CD44DFA4(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 9200:
      case 9201:
      case 9202:
      case 9203:
        sub_1CD449384(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 9204:
        sub_1CD44C1F8(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 9206:
      case 9207:
      case 9208:
        sub_1CD444C98(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 9209:
      case 9210:
      case 9211:
        sub_1CD444ACC(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 9212:
      case 9213:
      case 9214:
      case 9215:
      case 9216:
      case 9217:
      case 9218:
      case 9219:
      case 9220:
      case 9221:
      case 9222:
      case 9223:
      case 9224:
      case 9225:
      case 9226:
      case 9227:
        sub_1CD44DC64(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      case 9282:
      case 9283:
        sub_1CD44C4E8(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
      default:
        sub_1CD444BB8(a1, a2, (uint64_t)a3, a4, (uint64_t)a5);
        break;
    }
  }
  else
  {
    *(_DWORD *)a3 = 0;
  }
}

uint64_t sub_1CD433654(int a1, uint64_t a2)
{
  uint64_t v2 = sub_1CD4505AC(a2, a1);
  uint64_t result = 0;
  if ((v2 & 0xFF00000000) != 0 && v2 <= 0x22B5) {
    return dword_1CDF44FC0[(int)v2];
  }
  return result;
}

uint64_t sub_1CD4336A4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int *a5, unsigned __int16 *a6, uint64_t a7, int a8)
{
  unsigned int v14 = a1;
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a8 && !sub_1CBD85228(a1, *a5, (uint64_t)a6, 0)) {
    return 1;
  }
  unsigned int v17 = sub_1CD433654(*a5, (uint64_t)a6);
  if (!v17) {
    return 0;
  }
  uint64_t v27 = v29;
  uint64_t v28 = 0x800000000;
  char v30 = 0;
  long long v26 = v17;
  uint64_t v18 = *a2 + 48 * v17;
  uint64_t v19 = *(unsigned __int16 *)(v18 + 2);
  if (*(_WORD *)(v18 + 2))
  {
    unsigned int v21 = 0;
    do
    {
      if (v21 >= HIDWORD(v28)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v22 = (char *)v27 + 16 * v21;
      *int v22 = 0;
      v22[1] = 0;
      unsigned int v21 = v28 + 1;
      LODWORD(v28) = v28 + 1;
      --v19;
    }
    while (v19);
  }
  unsigned int v23 = v14;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  sub_1CD43306C(&v23, v17, (unsigned __int16 *)&v26, *a5, a6);
  uint64_t v15 = v20;
  *(_OWORD *)a7 = v26;
  sub_1CBD85368(a7 + 16, (uint64_t)&v27);
  *(unsigned char *)(a7 + 160) = v30;
  if (v27 != v29) {
    free(v27);
  }
  return v15;
}

uint64_t sub_1CD433854(uint64_t result)
{
  if (result) {
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

uint64_t sub_1CD433870(uint64_t a1, char *a2, unsigned char **a3, _OWORD *a4)
{
  uint64_t v8 = sub_1CB883A14(a1, 0, 0);
  *(unsigned char *)(v8 + 128) = 0;
  *(void *)(v8 + 136) = &unk_1F25EDE58;
  *(void *)(v8 + 144) = 0;
  *(void *)uint64_t v8 = &unk_1F26440A0;
  *(void *)(v8 + 152) = &unk_1F2643CC0;
  *(void *)(v8 + 160) = &unk_1F25EDE78;
  *(void *)(v8 + 184) = v8 + 160;
  size_t v9 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v9);
  unsigned int v10 = *a3;
  *(unsigned char *)(a1 + 128) = **a3;
  *(unsigned char *)(a1 + 145) = 1;
  *(unsigned char *)(a1 + 144) = *v10;
  *(_OWORD *)(a1 + 32) = *a4;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

__n128 sub_1CD43397C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 114;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v9 = sub_1CBDA6464(v7, 0x57u);
  uint64_t v18 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  __n128 v15 = 0u;
  sub_1CBD85A80(a1, (uint64_t)a2, v8, (BOOL *)&v18 + 5, (int8x8_t *)&v15.n128_i8[8], (uint64_t)&v16);
  uint64_t v10 = *((void *)a2 + 2);
  if (*(unsigned char *)(v10 + 16 * v9) == 5) {
    int v11 = 0;
  }
  else {
    int v11 = *(_DWORD *)(v10 + 16 * v9 + 8) & 0xFFFFFF;
  }
  LODWORD(v18) = v11;
  if (*a1 >= 4u) {
    *(void *)&long long v14 = 0x7100000003;
  }
  long long v12 = v17;
  *(_OWORD *)(a4 + 32) = v16;
  *(_OWORD *)(a4 + 48) = v12;
  *(void *)(a4 + 64) = v18;
  __n128 result = v15;
  *(_OWORD *)a4 = v14;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1CD433A78(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  if (*a1 <= 3u)
  {
    *(void *)&double result = sub_1CD433B10(a1, a2, a3, a4).n128_u64[0];
  }
  else
  {
    sub_1CBD9F7E4((uint64_t)a2);
    *(void *)&double result = sub_1CD433C60(a1, a2, a3, a4).n128_u64[0];
  }
  return result;
}

__n128 sub_1CD433B10(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 76;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  long long v20 = 0u;
  memset(v21, 0, 60);
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v21[3] + 8, (int8x8_t *)v21 + 1, (uint64_t)&v21[1] + 8);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  sub_1CBD8666C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v19 + 8, (_DWORD *)&v21[1] + 1);
  LOBYTE(v21[1]) = 1;
  long long v12 = v21[2];
  *(_OWORD *)(a4 + 96) = v21[1];
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v21[2] + 12);
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21[0];
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD433C60(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 78;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  __n128 v17 = 0u;
  long long v18 = 0u;
  long long v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 12, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 12);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  sub_1CBD8666C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v19 + 8, (_DWORD *)&v22 + 2);
  BYTE4(v22) = 1;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 80;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1CD433DE4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  if (*a1 > 3u)
  {
    sub_1CBD9F7E4((uint64_t)a2);
    *(void *)&double result = sub_1CD433C60(a1, a2, a3, a4).n128_u64[0];
  }
  else
  {
    *(void *)&double result = sub_1CD433B10(a1, a2, a3, a4).n128_u64[0];
  }
  return result;
}

double sub_1CD433E7C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  if (*a1 <= 3u)
  {
    *(void *)&double result = sub_1CD433F14(a1, a2, a3, a4).n128_u64[0];
  }
  else
  {
    sub_1CBD9F7E4((uint64_t)a2);
    *(void *)&double result = sub_1CD434064(a1, a2, a3, a4).n128_u64[0];
  }
  return result;
}

__n128 sub_1CD433F14(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 94;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  long long v20 = 0u;
  memset(v21, 0, 60);
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v21[3] + 8, (int8x8_t *)v21 + 1, (uint64_t)&v21[1] + 8);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  sub_1CBD8666C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v19 + 8, (_DWORD *)&v21[1] + 1);
  LOBYTE(v21[1]) = 1;
  long long v12 = v21[2];
  *(_OWORD *)(a4 + 96) = v21[1];
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v21[2] + 12);
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21[0];
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD434064(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 101;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  __n128 v17 = 0u;
  long long v18 = 0u;
  long long v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 12, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 12);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  sub_1CBD8666C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v19 + 8, (_DWORD *)&v22 + 2);
  BYTE4(v22) = 1;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 100;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1CD4341E8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  if (*a1 > 3u)
  {
    sub_1CBD9F7E4((uint64_t)a2);
    *(void *)&double result = sub_1CD434064(a1, a2, a3, a4).n128_u64[0];
  }
  else
  {
    *(void *)&double result = sub_1CD433F14(a1, a2, a3, a4).n128_u64[0];
  }
  return result;
}

double sub_1CD434280(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  if (*a1 <= 3u)
  {
    return sub_1CD434318(a1, a2, a3, a4);
  }
  else
  {
    sub_1CBD9F7E4((uint64_t)a2);
    *(void *)&double result = sub_1CD4344A4(a1, a2, a3, a4).n128_u64[0];
  }
  return result;
}

double sub_1CD434318(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 81;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  unsigned int v18 = sub_1CBDA6464(v7, 0x14u);
  *(_DWORD *)unint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v19);
  LOBYTE(v20) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, v29, (int8x8_t *)((char *)&v26 + 4), (uint64_t)&v27);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v20 + 12);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v22 + 8);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v18, (uint64_t)&v24 + 4);
  BYTE12(v26) = 1;
  long long v12 = v28;
  *(_OWORD *)(a4 + 128) = v27;
  *(_OWORD *)(a4 + 144) = v12;
  *(_DWORD *)(a4 + 160) = *(_DWORD *)v29;
  long long v13 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v13;
  long long v14 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v14;
  long long v15 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v15;
  double result = *(double *)&v25;
  long long v17 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v17;
  return result;
}

__n128 sub_1CD4344A4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 82;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x14u);
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  __n128 v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v18);
  LOBYTE(v19) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v28 + 4, (int8x8_t *)&v25 + 1, (uint64_t)&v26 + 4);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v19 + 12);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v21.n128_i64[1]);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v12, (uint64_t)&v23 + 4);
  LOBYTE(v26) = 1;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v18) - 2) <= 3) {
      LODWORD(v25) = dword_1CDF53620[DWORD2(v18) - 2];
    }
    DWORD1(v25) = 84;
  }
  long long v13 = v27;
  *(_OWORD *)(a4 + 128) = v26;
  *(_OWORD *)(a4 + 144) = v13;
  *(void *)(a4 + 160) = v28;
  long long v14 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v14;
  long long v15 = v25;
  *(_OWORD *)(a4 + 96) = v24;
  *(_OWORD *)(a4 + 112) = v15;
  long long v16 = v19;
  *(_OWORD *)a4 = v18;
  *(_OWORD *)(a4 + 16) = v16;
  __n128 result = v21;
  *(_OWORD *)(a4 + 32) = v20;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

double sub_1CD43465C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  if (*a1 > 3u)
  {
    sub_1CBD9F7E4((uint64_t)a2);
    *(void *)&double result = sub_1CD4344A4(a1, a2, a3, a4).n128_u64[0];
  }
  else
  {
    return sub_1CD434318(a1, a2, a3, a4);
  }
  return result;
}

__n128 sub_1CD4346F4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 88;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  unsigned int v17 = sub_1CBDA6464(v7, 0x14u);
  *(_DWORD *)uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  __n128 v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v18);
  LOBYTE(v19) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, v28, (int8x8_t *)&v25 + 1, (uint64_t)&v26);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v19 + 12);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v21.n128_i64[1]);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v17, (uint64_t)&v23 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v18) - 2) <= 3) {
      LODWORD(v25) = dword_1CDF53620[DWORD2(v18) - 2];
    }
    DWORD1(v25) = 89;
  }
  long long v12 = v27;
  *(_OWORD *)(a4 + 128) = v26;
  *(_OWORD *)(a4 + 144) = v12;
  *(_DWORD *)(a4 + 160) = *(_DWORD *)v28;
  long long v13 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v13;
  long long v14 = v25;
  *(_OWORD *)(a4 + 96) = v24;
  *(_OWORD *)(a4 + 112) = v14;
  long long v15 = v19;
  *(_OWORD *)a4 = v18;
  *(_OWORD *)(a4 + 16) = v15;
  __n128 result = v21;
  *(_OWORD *)(a4 + 32) = v20;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

double sub_1CD4348AC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  if (*a1 > 3u)
  {
    sub_1CBD9F7E4((uint64_t)a2);
    *(void *)&double result = sub_1CD434AD0(a1, a2, a3, a4).n128_u64[0];
  }
  else
  {
    return sub_1CD434944(a1, a2, a3, a4);
  }
  return result;
}

double sub_1CD434944(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 86;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  unsigned int v18 = sub_1CBDA6464(v7, 0x14u);
  *(_DWORD *)unint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v19);
  LOBYTE(v20) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, v29, (int8x8_t *)((char *)&v26 + 4), (uint64_t)&v27);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v20 + 12);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v22 + 8);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v18, (uint64_t)&v24 + 4);
  BYTE12(v26) = 1;
  long long v12 = v28;
  *(_OWORD *)(a4 + 128) = v27;
  *(_OWORD *)(a4 + 144) = v12;
  *(_DWORD *)(a4 + 160) = *(_DWORD *)v29;
  long long v13 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v13;
  long long v14 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v14;
  long long v15 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v15;
  double result = *(double *)&v25;
  long long v17 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v17;
  return result;
}

__n128 sub_1CD434AD0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 87;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x14u);
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  __n128 v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v18);
  LOBYTE(v19) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v28 + 4, (int8x8_t *)&v25 + 1, (uint64_t)&v26 + 4);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v19 + 12);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v21.n128_i64[1]);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v12, (uint64_t)&v23 + 4);
  LOBYTE(v26) = 1;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v18) - 2) <= 3) {
      LODWORD(v25) = dword_1CDF53620[DWORD2(v18) - 2];
    }
    DWORD1(v25) = 88;
  }
  long long v13 = v27;
  *(_OWORD *)(a4 + 128) = v26;
  *(_OWORD *)(a4 + 144) = v13;
  *(void *)(a4 + 160) = v28;
  long long v14 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v14;
  long long v15 = v25;
  *(_OWORD *)(a4 + 96) = v24;
  *(_OWORD *)(a4 + 112) = v15;
  long long v16 = v19;
  *(_OWORD *)a4 = v18;
  *(_OWORD *)(a4 + 16) = v16;
  __n128 result = v21;
  *(_OWORD *)(a4 + 32) = v20;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1CD434C88(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 7;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1) {
    *(void *)((char *)&v18 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if (v20 == 1) {
    *(void *)&long long v20 = 0x200000001;
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 12;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD434E30(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 8;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1) {
    *(void *)((char *)&v18 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if (v20 == 1) {
    *(void *)&long long v20 = 0x200000001;
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 13;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD434FD0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 9;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1) {
    *(void *)((char *)&v18 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if (v20 == 1) {
    *(void *)&long long v20 = 0x200000001;
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 14;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD435178(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 10;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1) {
    *(void *)((char *)&v18 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if (v20 == 1) {
    *(void *)&long long v20 = 0x200000001;
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 15;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD435318(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 12;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1) {
    *(void *)((char *)&v18 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if (v20 == 1) {
    *(void *)&long long v20 = 0x200000001;
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 17;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD4354BC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 7;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1) {
    *(void *)((char *)&v18 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if (v20 == 1) {
    *(void *)&long long v20 = 0x200000001;
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 12;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43565C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 9;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1) {
    *(void *)((char *)&v18 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if (v20 == 1) {
    *(void *)&long long v20 = 0x200000001;
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 14;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD4357FC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 12;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1) {
    *(void *)((char *)&v18 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if (v20 == 1) {
    *(void *)&long long v20 = 0x200000001;
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 17;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43599C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 13;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1) {
    *(void *)((char *)&v18 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if (v20 == 1) {
    *(void *)&long long v20 = 0x200000001;
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 18;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1CD435B3C(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 190;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x57u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Fu);
  unsigned int v27 = sub_1CBDA6464(v7, 0x2Bu);
  unsigned int v26 = sub_1CBDA6464(v7, 0x30u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x55u);
  unsigned int v28 = sub_1CBDA6464(v7, 0x56u);
  unsigned int v29 = sub_1CBDA6464(v7, 0x6Fu);
  uint64_t v41 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v12 = (unsigned __int8 *)(*((void *)a2 + 2) + 16 * v8);
  DWORD2(v30) = 2;
  HIDWORD(v30) = sub_1CBD9F8B0((unsigned int *)a2, v8, *(void **)(a1 + 16));
  *(void *)&long long v30 = sub_1CBD9FA40(*(void *)(a1 + 24), v12, 2);
  uint64_t v13 = *((void *)a2 + 2);
  unsigned int v14 = *(_DWORD *)(v13 + 16 * (v8 + 1) + 8);
  DWORD1(v31) = (v14 >> 20) & 0xF;
  BYTE8(v31) = (v14 & 0x10) != 0;
  sub_1CBD88D90((_DWORD *)a1, (uint64_t)a2, v9, &v39, (BOOL *)&v31, (BOOL *)&v41 + 4, (int8x8_t *)((char *)&v37 + 12), (uint64_t)&v39 + 4);
  uint64_t v15 = *(void *)(v13 + 16 * v10 + 8);
  BYTE4(v38) = v15 >> 4;
  BYTE5(v33) = (v15 & 0x800) == 0;
  sub_1CBD88E08(a1, a2, v27, (uint64_t)&v33 + 8);
  sub_1CBD88900(a1, a2, v26, (uint64_t)&v31 + 12);
  uint64_t v16 = *((void *)a2 + 2);
  if (*(unsigned char *)(v16 + 16 * v11) == 5) {
    __int16 v17 = 0;
  }
  else {
    __int16 v17 = *(_WORD *)(v16 + 16 * v11 + 8);
  }
  WORD6(v38) = v17;
  uint64_t v18 = *(void *)(v16 + 16 * v28 + 8);
  if (v18 == 4)
  {
    int v19 = 2;
    goto LABEL_5;
  }
  if (v18 <= 1)
  {
    if (v18 == 1)
    {
      int v19 = 0;
      goto LABEL_5;
    }
LABEL_18:
    llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const llvm::Twine *)1);
  }
  switch(v18)
  {
    case 2:
      int v19 = 1;
      break;
    case 8:
      int v19 = 3;
      break;
    case 16:
      int v19 = 4;
      break;
    default:
      goto LABEL_18;
  }
LABEL_5:
  DWORD2(v38) = v19;
  BYTE4(v35) = 1;
  sub_1CBD88E08(a1, a2, v29, (uint64_t)&v35 + 8);
  if (*(_DWORD *)a1 >= 4u) {
    *(void *)((char *)&v37 + 4) = 0xBB00000000;
  }
  long long v20 = v39;
  *(_OWORD *)(a4 + 128) = v38;
  *(_OWORD *)(a4 + 144) = v20;
  *(_OWORD *)(a4 + 160) = v40;
  *(void *)(a4 + 176) = v41;
  long long v21 = v35;
  *(_OWORD *)(a4 + 64) = v34;
  *(_OWORD *)(a4 + 80) = v21;
  long long v22 = v37;
  *(_OWORD *)(a4 + 96) = v36;
  *(_OWORD *)(a4 + 112) = v22;
  long long v23 = v31;
  *(_OWORD *)a4 = v30;
  *(_OWORD *)(a4 + 16) = v23;
  double result = *(double *)&v32;
  long long v25 = v33;
  *(_OWORD *)(a4 + 32) = v32;
  *(_OWORD *)(a4 + 48) = v25;
  return result;
}

double sub_1CD435E14(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 109;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x57u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Fu);
  unsigned int v27 = sub_1CBDA6464(v7, 0x2Bu);
  unsigned int v11 = sub_1CBDA6464(v7, 0x30u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x55u);
  unsigned int v28 = sub_1CBDA6464(v7, 0x56u);
  unsigned int v29 = sub_1CBDA6464(v7, 0x6Fu);
  int v41 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v13 = (unsigned __int8 *)(*((void *)a2 + 2) + 16 * v8);
  DWORD2(v30) = 2;
  HIDWORD(v30) = sub_1CBD9F8B0((unsigned int *)a2, v8, *(void **)(a1 + 16));
  *(void *)&long long v30 = sub_1CBD9FA40(*(void *)(a1 + 24), v13, 2);
  unsigned int v14 = v8 + 1;
  uint64_t v15 = *((void *)a2 + 2);
  *(void *)((char *)&v31 + 4) = (*(_DWORD *)(v15 + 16 * v14 + 8) >> 20) & 0xFLL;
  LOBYTE(v31) = (*(unsigned char *)(v15 + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v41 + 1, (int8x8_t *)((char *)&v37 + 12), (uint64_t)&v39);
  uint64_t v16 = *(void *)(v15 + 16 * v10 + 8);
  BYTE4(v38) = v16 >> 4;
  BYTE5(v33) = (v16 & 0x800) == 0;
  sub_1CBD88E08(a1, a2, v27, (uint64_t)&v33 + 8);
  sub_1CBD88900(a1, a2, v11, (uint64_t)&v31 + 12);
  uint64_t v17 = *((void *)a2 + 2);
  if (*(unsigned char *)(v17 + 16 * v12) == 5) {
    __int16 v18 = 0;
  }
  else {
    __int16 v18 = *(_WORD *)(v17 + 16 * v12 + 8);
  }
  WORD6(v38) = v18;
  uint64_t v19 = *(void *)(v17 + 16 * v28 + 8) - 1;
  int v20 = 0;
  switch(v19)
  {
    case 0:
      break;
    case 1:
      int v20 = 1;
      break;
    case 3:
      int v20 = 2;
      break;
    case 7:
      int v20 = 3;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const llvm::Twine *)1);
  }
  DWORD2(v38) = v20;
  BYTE4(v35) = 1;
  sub_1CBD88E08(a1, a2, v29, (uint64_t)&v35 + 8);
  if (*(_DWORD *)a1 >= 4u) {
    *(void *)((char *)&v37 + 4) = 0x6C00000000;
  }
  long long v21 = v39;
  *(_OWORD *)(a4 + 128) = v38;
  *(_OWORD *)(a4 + 144) = v21;
  *(_OWORD *)(a4 + 160) = v40;
  *(_DWORD *)(a4 + 176) = v41;
  long long v22 = v35;
  *(_OWORD *)(a4 + 64) = v34;
  *(_OWORD *)(a4 + 80) = v22;
  long long v23 = v37;
  *(_OWORD *)(a4 + 96) = v36;
  *(_OWORD *)(a4 + 112) = v23;
  long long v24 = v31;
  *(_OWORD *)a4 = v30;
  *(_OWORD *)(a4 + 16) = v24;
  double result = *(double *)&v32;
  long long v26 = v33;
  *(_OWORD *)(a4 + 32) = v32;
  *(_OWORD *)(a4 + 48) = v26;
  return result;
}

double sub_1CD4360E8(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 192;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x57u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Fu);
  unsigned int v28 = sub_1CBDA6464(v7, 0x2Bu);
  unsigned int v11 = sub_1CBDA6464(v7, 0x30u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x55u);
  unsigned int v29 = sub_1CBDA6464(v7, 0x56u);
  unsigned int v30 = sub_1CBDA6464(v7, 0x6Fu);
  *(_DWORD *)int8x8_t v42 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v13 = (unsigned __int8 *)(*((void *)a2 + 2) + 16 * v8);
  DWORD2(v31) = 2;
  HIDWORD(v31) = sub_1CBD9F8B0((unsigned int *)a2, v8, *(void **)(a1 + 16));
  *(void *)&long long v31 = sub_1CBD9FA40(*(void *)(a1 + 24), v13, 2);
  unsigned int v14 = v8 + 1;
  uint64_t v15 = *((void *)a2 + 2);
  unsigned int v16 = *(_DWORD *)(v15 + 16 * v14 + 8);
  DWORD1(v32) = (v16 >> 20) & 0xF;
  BYTE8(v32) = (v16 & 0x10) != 0;
  LOBYTE(v32) = (*(unsigned char *)(v15 + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v9, v42, (int8x8_t *)((char *)&v38 + 12), (uint64_t)&v40);
  uint64_t v17 = *(void *)(v15 + 16 * v10 + 8);
  BYTE4(v39) = v17 >> 4;
  BYTE5(v34) = (v17 & 0x800) == 0;
  sub_1CBD88E08(a1, a2, v28, (uint64_t)&v34 + 8);
  sub_1CBD88900(a1, a2, v11, (uint64_t)&v32 + 12);
  uint64_t v18 = *((void *)a2 + 2);
  if (*(unsigned char *)(v18 + 16 * v12) == 5) {
    __int16 v19 = 0;
  }
  else {
    __int16 v19 = *(_WORD *)(v18 + 16 * v12 + 8);
  }
  WORD6(v39) = v19;
  uint64_t v20 = *(void *)(v18 + 16 * v29 + 8) - 1;
  int v21 = 0;
  switch(v20)
  {
    case 0:
      break;
    case 1:
      int v21 = 1;
      break;
    case 3:
      int v21 = 2;
      break;
    case 7:
      int v21 = 3;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const llvm::Twine *)1);
  }
  DWORD2(v39) = v21;
  BYTE4(v36) = 1;
  sub_1CBD88E08(a1, a2, v30, (uint64_t)&v36 + 8);
  if (*(_DWORD *)a1 >= 4u) {
    *(void *)((char *)&v38 + 4) = 0xBD00000000;
  }
  long long v22 = v40;
  *(_OWORD *)(a4 + 128) = v39;
  *(_OWORD *)(a4 + 144) = v22;
  *(_OWORD *)(a4 + 160) = v41;
  *(_DWORD *)(a4 + 176) = *(_DWORD *)v42;
  long long v23 = v36;
  *(_OWORD *)(a4 + 64) = v35;
  *(_OWORD *)(a4 + 80) = v23;
  long long v24 = v38;
  *(_OWORD *)(a4 + 96) = v37;
  *(_OWORD *)(a4 + 112) = v24;
  long long v25 = v32;
  *(_OWORD *)a4 = v31;
  *(_OWORD *)(a4 + 16) = v25;
  double result = *(double *)&v33;
  long long v27 = v34;
  *(_OWORD *)(a4 + 32) = v33;
  *(_OWORD *)(a4 + 48) = v27;
  return result;
}

__n128 sub_1CD4363C4(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 216;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x57u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Fu);
  unsigned int v28 = sub_1CBDA6464(v7, 0x2Bu);
  unsigned int v27 = sub_1CBDA6464(v7, 0x30u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x55u);
  uint64_t v41 = 0;
  unsigned int v29 = sub_1CBDA6464(v7, 0x56u);
  long long v39 = 0u;
  long long v40 = 0u;
  __n128 v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  unsigned int v12 = (unsigned __int8 *)(*((void *)a2 + 2) + 16 * v8);
  DWORD2(v30) = 2;
  HIDWORD(v30) = sub_1CBD9F8B0((unsigned int *)a2, v8, *(void **)(a1 + 16));
  *(void *)&long long v30 = sub_1CBD9FA40(*(void *)(a1 + 24), v12, 2);
  unsigned int v13 = v8 + 1;
  uint64_t v14 = *((void *)a2 + 2);
  *(void *)((char *)&v31 + 4) = (*(_DWORD *)(v14 + 16 * v13 + 8) >> 20) & 0xF;
  sub_1CBD88D90((_DWORD *)a1, (uint64_t)a2, v9, &v39, (BOOL *)&v31, (BOOL *)&v41 + 4, (int8x8_t *)((char *)&v37.n128_f64[1] + 4), (uint64_t)&v39 + 4);
  uint64_t v15 = *(void *)(v14 + 16 * v10 + 8);
  BYTE4(v38) = v15 >> 4;
  BYTE5(v33) = (v15 & 0x800) == 0;
  sub_1CBD88E08(a1, a2, v28, (uint64_t)&v33 + 8);
  sub_1CBD88900(a1, a2, v27, (uint64_t)&v31 + 12);
  __int16 v16 = 0;
  uint64_t v17 = *((void *)a2 + 2);
  if (*(unsigned char *)(v17 + 16 * v11) != 5) {
    __int16 v16 = *(_WORD *)(v17 + 16 * v11 + 8);
  }
  WORD6(v38) = v16;
  uint64_t v18 = *(void *)(v17 + 16 * v29 + 8) - 1;
  int v19 = 0;
  switch(v18)
  {
    case 0:
      break;
    case 1:
      int v19 = 1;
      break;
    case 3:
      int v19 = 2;
      break;
    case 7:
      int v19 = 3;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const llvm::Twine *)1);
  }
  unsigned int v20 = 0;
  unsigned int v21 = *(_DWORD *)a1;
  long long v36 = 0uLL;
  *((void *)&v35 + 1) = 0;
  DWORD2(v38) = v19;
  v37.n128_u32[0] = 0;
  if (v21 >= 4)
  {
    WORD4(v35) = 15;
    v37.n128_u32[2] = 219;
    unsigned int v20 = 1;
  }
  *(void *)&long long v36 = v20 | 0x100000000;
  BYTE4(v35) = 0;
  long long v22 = v39;
  *(_OWORD *)(a4 + 128) = v38;
  *(_OWORD *)(a4 + 144) = v22;
  *(_OWORD *)(a4 + 160) = v40;
  *(void *)(a4 + 176) = v41;
  long long v23 = v31;
  *(_OWORD *)a4 = v30;
  *(_OWORD *)(a4 + 16) = v23;
  long long v24 = v33;
  *(_OWORD *)(a4 + 32) = v32;
  *(_OWORD *)(a4 + 48) = v24;
  long long v25 = v35;
  *(_OWORD *)(a4 + 64) = v34;
  *(_OWORD *)(a4 + 80) = v25;
  __n128 result = v37;
  *(_OWORD *)(a4 + 96) = v36;
  *(__n128 *)(a4 + 112) = result;
  return result;
}

__n128 sub_1CD436688(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 217;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x57u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Fu);
  unsigned int v29 = sub_1CBDA6464(v7, 0x2Bu);
  unsigned int v28 = sub_1CBDA6464(v7, 0x30u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x55u);
  uint64_t v42 = 0;
  unsigned int v30 = sub_1CBDA6464(v7, 0x56u);
  long long v40 = 0u;
  long long v41 = 0u;
  __n128 v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  unsigned int v12 = (unsigned __int8 *)(*((void *)a2 + 2) + 16 * v8);
  DWORD2(v31) = 2;
  HIDWORD(v31) = sub_1CBD9F8B0((unsigned int *)a2, v8, *(void **)(a1 + 16));
  *(void *)&long long v31 = sub_1CBD9FA40(*(void *)(a1 + 24), v12, 2);
  unsigned int v13 = v8 + 1;
  uint64_t v14 = *((void *)a2 + 2);
  unsigned int v15 = *(_DWORD *)(v14 + 16 * v13 + 8);
  DWORD1(v32) = (v15 >> 20) & 0xF;
  BYTE8(v32) = (v15 & 0x10) != 0;
  sub_1CBD88D90((_DWORD *)a1, (uint64_t)a2, v9, &v40, (BOOL *)&v32, (BOOL *)&v42 + 4, (int8x8_t *)((char *)&v38.n128_f64[1] + 4), (uint64_t)&v40 + 4);
  uint64_t v16 = *(void *)(v14 + 16 * v10 + 8);
  BYTE4(v39) = v16 >> 4;
  BYTE5(v34) = (v16 & 0x800) == 0;
  sub_1CBD88E08(a1, a2, v29, (uint64_t)&v34 + 8);
  sub_1CBD88900(a1, a2, v28, (uint64_t)&v32 + 12);
  __int16 v17 = 0;
  uint64_t v18 = *((void *)a2 + 2);
  if (*(unsigned char *)(v18 + 16 * v11) != 5) {
    __int16 v17 = *(_WORD *)(v18 + 16 * v11 + 8);
  }
  WORD6(v39) = v17;
  uint64_t v19 = *(void *)(v18 + 16 * v30 + 8) - 1;
  int v20 = 0;
  switch(v19)
  {
    case 0:
      break;
    case 1:
      int v20 = 1;
      break;
    case 3:
      int v20 = 2;
      break;
    case 7:
      int v20 = 3;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const llvm::Twine *)1);
  }
  unsigned int v21 = 0;
  unsigned int v22 = *(_DWORD *)a1;
  long long v37 = 0uLL;
  *((void *)&v36 + 1) = 0;
  DWORD2(v39) = v20;
  v38.n128_u32[0] = 0;
  if (v22 >= 4)
  {
    WORD4(v36) = 15;
    v38.n128_u32[2] = 220;
    unsigned int v21 = 1;
  }
  *(void *)&long long v37 = v21 | 0x100000000;
  BYTE4(v36) = 0;
  long long v23 = v40;
  *(_OWORD *)(a4 + 128) = v39;
  *(_OWORD *)(a4 + 144) = v23;
  *(_OWORD *)(a4 + 160) = v41;
  *(void *)(a4 + 176) = v42;
  long long v24 = v32;
  *(_OWORD *)a4 = v31;
  *(_OWORD *)(a4 + 16) = v24;
  long long v25 = v34;
  *(_OWORD *)(a4 + 32) = v33;
  *(_OWORD *)(a4 + 48) = v25;
  long long v26 = v36;
  *(_OWORD *)(a4 + 64) = v35;
  *(_OWORD *)(a4 + 80) = v26;
  __n128 result = v38;
  *(_OWORD *)(a4 + 96) = v37;
  *(__n128 *)(a4 + 112) = result;
  return result;
}

__n128 sub_1CD436954(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 50;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v24 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v10 = sub_1CBDA6464(v7, 4u);
  unsigned int v25 = sub_1CBDA6464(v7, 0x14u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x1Cu);
  unsigned int v12 = sub_1CBDA6464(v7, 0x47u);
  long long v34 = 0u;
  memset(v35, 0, 92);
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  __n128 v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  sub_1CBD8C5F0(a1, (uint64_t)a2, v8, (uint64_t)&v26);
  LOBYTE(v27) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v35[5] + 4, (int8x8_t *)&v35[2] + 1, (uint64_t)&v35[3] + 4);
  sub_1CBD8C148(a1, (uint64_t)a2, v24, (uint64_t)&v28 + 4);
  sub_1CBD8C148(a1, (uint64_t)a2, v10, (uint64_t)&v30);
  sub_1CBD8C148(a1, (uint64_t)a2, v25, (uint64_t)&v31 + 12);
  uint64_t v13 = *((void *)a2 + 2);
  if (*(unsigned char *)(v13 + 16 * v11) == 1)
  {
    sub_1CBD8BD54(a1, a2, v11, (uint64_t)&v33 + 8);
    uint64_t v13 = *((void *)a2 + 2);
  }
  else
  {
    BYTE8(v33) = *(unsigned char *)(v13 + 16 * v11 + 8) & 0x7F;
    *(void *)&long long v34 = 0x200000006;
    BYTE8(v34) = 0;
  }
  if (*(unsigned char *)(v13 + 16 * v12) == 1)
  {
    sub_1CBD8BD54(a1, a2, v12, (uint64_t)v35 + 4);
  }
  else
  {
    BYTE4(v35[0]) = *(unsigned char *)(v13 + 16 * v12 + 8) & 0x7F;
    *(void *)((char *)v35 + 12) = 0x200000006;
    BYTE4(v35[1]) = 0;
  }
  uint64_t v14 = *(unsigned int *)a2;
  BYTE12(v27) = sub_1CBDB2780(v14, 8, 0) == 19;
  int v15 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 5u)
  {
    DWORD2(v35[5]) = 1;
    if ((*(unsigned char *)(*(void *)(a1 + 8) + 196) & 2) != 0)
    {
      uint64_t v23 = sub_1CBE52E8C(v14);
      if ((v23 & 0xFF00000000) == 0 || v23 != 47) {
        DWORD2(v35[5]) = 0;
      }
    }
    LODWORD(v35[3]) = 1;
  }
  else
  {
    LODWORD(v35[3]) = 1;
    if (v15 != 4) {
      goto LABEL_15;
    }
  }
  if ((DWORD2(v26) - 2) <= 3) {
    LODWORD(v35[2]) = dword_1CDF53620[DWORD2(v26) - 2];
  }
  DWORD1(v35[2]) = 55;
LABEL_15:
  long long v16 = v35[4];
  *(_OWORD *)(a4 + 192) = v35[3];
  *(_OWORD *)(a4 + 208) = v16;
  *(_OWORD *)(a4 + 220) = *(_OWORD *)((char *)&v35[4] + 12);
  long long v17 = v35[0];
  *(_OWORD *)(a4 + 128) = v34;
  *(_OWORD *)(a4 + 144) = v17;
  long long v18 = v35[2];
  *(_OWORD *)(a4 + 160) = v35[1];
  *(_OWORD *)(a4 + 176) = v18;
  long long v19 = v31;
  *(_OWORD *)(a4 + 64) = v30;
  *(_OWORD *)(a4 + 80) = v19;
  long long v20 = v33;
  *(_OWORD *)(a4 + 96) = v32;
  *(_OWORD *)(a4 + 112) = v20;
  long long v21 = v27;
  *(_OWORD *)a4 = v26;
  *(_OWORD *)(a4 + 16) = v21;
  __n128 result = v29;
  *(_OWORD *)(a4 + 32) = v28;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

double sub_1CD436C54(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 59;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x1Cu);
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v21 = 0u;
  sub_1CBD8C5F0(a1, (uint64_t)a2, v8, (uint64_t)&v21);
  LOBYTE(v22) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v30, (int8x8_t *)((char *)&v27 + 4), (uint64_t)&v28);
  sub_1CBD8C148(a1, (uint64_t)a2, v10, (uint64_t)&v23 + 4);
  uint64_t v12 = *((void *)a2 + 2);
  if (*(unsigned char *)(v12 + 16 * v11) == 1)
  {
    sub_1CBD8BD54(a1, a2, v11, (uint64_t)&v25);
  }
  else
  {
    LOBYTE(v25) = *(unsigned char *)(v12 + 16 * v11 + 8) & 0x7F;
    *((void *)&v25 + 1) = 0x200000006;
    LOBYTE(v26) = 0;
  }
  uint64_t v13 = *(unsigned int *)a2;
  BYTE12(v22) = sub_1CBDB2780(v13, 8, 0) == 19;
  int v14 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 5u)
  {
    HIDWORD(v30) = 1;
    if ((*(unsigned char *)(*(void *)(a1 + 8) + 196) & 2) != 0)
    {
      uint64_t v20 = sub_1CBE52E8C(v13);
      if ((v20 & 0xFF00000000) == 0 || v20 != 47) {
        HIDWORD(v30) = 0;
      }
    }
    HIDWORD(v27) = 1;
  }
  else
  {
    HIDWORD(v27) = 1;
    if (v14 != 4) {
      goto LABEL_12;
    }
  }
  if ((DWORD2(v21) - 2) <= 3) {
    HIDWORD(v26) = dword_1CDF53620[DWORD2(v21) - 2];
  }
  LODWORD(v27) = 64;
LABEL_12:
  long long v15 = v28;
  *(_OWORD *)(a4 + 96) = v27;
  *(_OWORD *)(a4 + 112) = v15;
  *(_OWORD *)(a4 + 128) = v29;
  *(void *)(a4 + 144) = v30;
  long long v16 = v24;
  *(_OWORD *)(a4 + 32) = v23;
  *(_OWORD *)(a4 + 48) = v16;
  long long v17 = v26;
  *(_OWORD *)(a4 + 64) = v25;
  *(_OWORD *)(a4 + 80) = v17;
  double result = *(double *)&v21;
  long long v19 = v22;
  *(_OWORD *)a4 = v21;
  *(_OWORD *)(a4 + 16) = v19;
  return result;
}

double sub_1CD436E90(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 62;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v17 = 0u;
  sub_1CBD8C5F0(a1, (uint64_t)a2, v8, (uint64_t)&v17);
  LOBYTE(v18) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v24, (int8x8_t *)&v21 + 1, (uint64_t)&v22);
  sub_1CBD8C148(a1, (uint64_t)a2, v10, (uint64_t)&v19 + 4);
  uint64_t v11 = *(unsigned int *)a2;
  BYTE12(v18) = sub_1CBDB2780(v11, 8, 0) == 19;
  if (*(_DWORD *)a1 >= 5u)
  {
    HIDWORD(v24) = 1;
    if ((*(unsigned char *)(*(void *)(a1 + 8) + 196) & 2) != 0)
    {
      uint64_t v16 = sub_1CBE52E8C(v11);
      if ((v16 & 0xFF00000000) == 0 || v16 != 47) {
        HIDWORD(v24) = 0;
      }
    }
  }
  else if (*(_DWORD *)a1 != 4)
  {
    goto LABEL_6;
  }
  if ((DWORD2(v17) - 2) <= 3) {
    LODWORD(v21) = dword_1CDF53620[DWORD2(v17) - 2];
  }
  DWORD1(v21) = 67;
LABEL_6:
  long long v12 = v22;
  *(_OWORD *)(a4 + 64) = v21;
  *(_OWORD *)(a4 + 80) = v12;
  *(_OWORD *)(a4 + 96) = v23;
  *(void *)(a4 + 112) = v24;
  long long v13 = v18;
  *(_OWORD *)a4 = v17;
  *(_OWORD *)(a4 + 16) = v13;
  double result = *(double *)&v19;
  long long v15 = v20;
  *(_OWORD *)(a4 + 32) = v19;
  *(_OWORD *)(a4 + 48) = v15;
  return result;
}

double sub_1CD437054(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  *a3 = 60;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  long long v20 = 0u;
  memset(v21, 0, 60);
  long long v18 = 0u;
  long long v19 = 0u;
  long long v17 = 0u;
  sub_1CBD8C5F0(a1, (uint64_t)a2, v8, (uint64_t)&v17);
  LOBYTE(v18) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v21[3] + 4, (int8x8_t *)v21 + 1, (uint64_t)&v21[1] + 4);
  sub_1CBD8C148(a1, (uint64_t)a2, v10, (uint64_t)&v19 + 4);
  int v11 = *(_DWORD *)a2;
  BYTE12(v18) = sub_1CBDB2780(*(unsigned int *)a2, 8, 0) == 19;
  if (*(_DWORD *)a1 >= 5u)
  {
    DWORD2(v21[3]) = 1;
    if ((*(unsigned char *)(*(void *)(a1 + 8) + 196) & 2) != 0)
    {
      uint64_t v12 = sub_1CBE52E8C(v11);
      if ((v12 & 0xFF00000000) == 0 || v12 != 47) {
        DWORD2(v21[3]) = 0;
      }
    }
  }
  sub_1CBD8E654((unsigned int *)a2, (uint64_t)&v17);
  if (*(_DWORD *)a1 >= 4u)
  {
    if ((DWORD2(v17) - 2) <= 3) {
      LODWORD(v21[0]) = dword_1CDF53620[DWORD2(v17) - 2];
    }
    DWORD1(v21[0]) = 65;
  }
  long long v13 = v21[1];
  a4[4] = v21[0];
  a4[5] = v13;
  a4[6] = v21[2];
  *(_OWORD *)((char *)a4 + 108) = *(_OWORD *)((char *)&v21[2] + 12);
  long long v14 = v18;
  *a4 = v17;
  a4[1] = v14;
  double result = *(double *)&v19;
  long long v16 = v20;
  a4[2] = v19;
  a4[3] = v16;
  return result;
}

double sub_1CD437214(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  *a3 = 60;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  long long v20 = 0u;
  memset(v21, 0, 60);
  long long v18 = 0u;
  long long v19 = 0u;
  long long v17 = 0u;
  sub_1CBD8C5F0(a1, (uint64_t)a2, v8, (uint64_t)&v17);
  LOBYTE(v18) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v21[3] + 4, (int8x8_t *)v21 + 1, (uint64_t)&v21[1] + 4);
  sub_1CBD8C148(a1, (uint64_t)a2, v10, (uint64_t)&v19 + 4);
  int v11 = *(_DWORD *)a2;
  BYTE12(v18) = sub_1CBDB2780(*(unsigned int *)a2, 8, 0) == 19;
  if (*(_DWORD *)a1 >= 5u)
  {
    DWORD2(v21[3]) = 1;
    if ((*(unsigned char *)(*(void *)(a1 + 8) + 196) & 2) != 0)
    {
      uint64_t v16 = sub_1CBE52E8C(v11);
      if ((v16 & 0xFF00000000) == 0 || v16 != 47) {
        DWORD2(v21[3]) = 0;
      }
    }
  }
  sub_1CBD8E654((unsigned int *)a2, (uint64_t)&v17);
  if (*(_DWORD *)a1 >= 4u)
  {
    if ((DWORD2(v17) - 2) <= 3) {
      LODWORD(v21[0]) = dword_1CDF53620[DWORD2(v17) - 2];
    }
    DWORD1(v21[0]) = 65;
  }
  long long v12 = v21[1];
  a4[4] = v21[0];
  a4[5] = v12;
  a4[6] = v21[2];
  *(_OWORD *)((char *)a4 + 108) = *(_OWORD *)((char *)&v21[2] + 12);
  long long v13 = v18;
  *a4 = v17;
  a4[1] = v13;
  double result = *(double *)&v19;
  long long v15 = v20;
  a4[2] = v19;
  a4[3] = v15;
  return result;
}

__n128 sub_1CD4373D8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 55;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  unsigned int v17 = sub_1CBDA6464(v7, 0x14u);
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  __n128 v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  sub_1CBD8EABC((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v18);
  LOBYTE(v19) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v28 + 8, (int8x8_t *)&v26, (uint64_t)&v26 + 8);
  sub_1CBD8EB3C((uint64_t)a1, a2, v10, (uint64_t)&v20 + 4);
  sub_1CBD8EB3C((uint64_t)a1, a2, v11, (uint64_t)&v22);
  sub_1CBD8EB3C((uint64_t)a1, a2, v17, (uint64_t)&v23 + 12);
  BYTE12(v19) = sub_1CBDB2780(*(unsigned int *)a2, 8, 0) == 19;
  sub_1CBD8ED54((uint64_t)a1, (int *)a2, &v18);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v18) - 2) <= 3) {
      DWORD2(v25) = dword_1CDF53620[DWORD2(v18) - 2];
    }
    HIDWORD(v25) = 60;
  }
  long long v12 = v27;
  *(_OWORD *)(a4 + 128) = v26;
  *(_OWORD *)(a4 + 144) = v12;
  *(_OWORD *)(a4 + 160) = v28;
  long long v13 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v13;
  long long v14 = v25;
  *(_OWORD *)(a4 + 96) = v24;
  *(_OWORD *)(a4 + 112) = v14;
  long long v15 = v19;
  *(_OWORD *)a4 = v18;
  *(_OWORD *)(a4 + 16) = v15;
  __n128 result = v21;
  *(_OWORD *)(a4 + 32) = v20;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1CD4375BC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 56;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  unsigned int v17 = sub_1CBDA6464(v7, 0x14u);
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  __n128 v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  sub_1CBD8EABC((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v18);
  LOBYTE(v19) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v28 + 8, (int8x8_t *)&v26, (uint64_t)&v26 + 8);
  sub_1CBD8EB3C((uint64_t)a1, a2, v10, (uint64_t)&v20 + 4);
  sub_1CBD8EB3C((uint64_t)a1, a2, v11, (uint64_t)&v22);
  sub_1CBD8EB3C((uint64_t)a1, a2, v17, (uint64_t)&v23 + 12);
  BYTE12(v19) = sub_1CBDB2780(*(unsigned int *)a2, 8, 0) == 19;
  sub_1CBD8ED54((uint64_t)a1, (int *)a2, &v18);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v18) - 2) <= 3) {
      DWORD2(v25) = dword_1CDF53620[DWORD2(v18) - 2];
    }
    HIDWORD(v25) = 61;
  }
  long long v12 = v27;
  *(_OWORD *)(a4 + 128) = v26;
  *(_OWORD *)(a4 + 144) = v12;
  *(_OWORD *)(a4 + 160) = v28;
  long long v13 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v13;
  long long v14 = v25;
  *(_OWORD *)(a4 + 96) = v24;
  *(_OWORD *)(a4 + 112) = v14;
  long long v15 = v19;
  *(_OWORD *)a4 = v18;
  *(_OWORD *)(a4 + 16) = v15;
  __n128 result = v21;
  *(_OWORD *)(a4 + 32) = v20;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1CD4377A4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 37;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x14u);
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  __n128 v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  sub_1CBD8F178((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v18);
  LOBYTE(v19) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v28 + 4, (int8x8_t *)((char *)&v25 + 12), (uint64_t)&v26 + 4);
  sub_1CBD8F254((uint64_t)a1, a2, v10, (uint64_t)&v20);
  sub_1CBD8F254((uint64_t)a1, a2, v11, (uint64_t)&v21.n128_i64[1] + 4);
  sub_1CBD8F254((uint64_t)a1, a2, v12, (uint64_t)&v23 + 8);
  BYTE12(v19) = sub_1CBDB2780(*(unsigned int *)a2, 8, 0) == 19;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v18) - 2) <= 3) {
      DWORD1(v25) = dword_1CDF53620[DWORD2(v18) - 2];
    }
    DWORD2(v25) = 42;
  }
  long long v13 = v27;
  *(_OWORD *)(a4 + 128) = v26;
  *(_OWORD *)(a4 + 144) = v13;
  *(void *)(a4 + 160) = v28;
  long long v14 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v14;
  long long v15 = v25;
  *(_OWORD *)(a4 + 96) = v24;
  *(_OWORD *)(a4 + 112) = v15;
  long long v16 = v19;
  *(_OWORD *)a4 = v18;
  *(_OWORD *)(a4 + 16) = v16;
  __n128 result = v21;
  *(_OWORD *)(a4 + 32) = v20;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1CD437978(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 40;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x14u);
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  __n128 v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  sub_1CBD8F780((uint64_t)a1, a2, v8, (uint64_t)&v18);
  LOBYTE(v19) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v28 + 4, (int8x8_t *)((char *)&v25 + 12), (uint64_t)&v26 + 4);
  sub_1CBD8EB3C((uint64_t)a1, a2, v10, (uint64_t)&v20);
  sub_1CBD8EB3C((uint64_t)a1, a2, v11, (uint64_t)&v21.n128_i64[1] + 4);
  sub_1CBD8EB3C((uint64_t)a1, a2, v12, (uint64_t)&v23 + 8);
  BYTE12(v19) = sub_1CBDB2780(*(unsigned int *)a2, 8, 0) == 19;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v18) - 2) <= 3) {
      DWORD1(v25) = dword_1CDF53620[DWORD2(v18) - 2];
    }
    DWORD2(v25) = 45;
  }
  long long v13 = v27;
  *(_OWORD *)(a4 + 128) = v26;
  *(_OWORD *)(a4 + 144) = v13;
  *(void *)(a4 + 160) = v28;
  long long v14 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v14;
  long long v15 = v25;
  *(_OWORD *)(a4 + 96) = v24;
  *(_OWORD *)(a4 + 112) = v15;
  long long v16 = v19;
  *(_OWORD *)a4 = v18;
  *(_OWORD *)(a4 + 16) = v16;
  __n128 result = v21;
  *(_OWORD *)(a4 + 32) = v20;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1CD437B48(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 187;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x14u);
  uint64_t v31 = 0;
  unsigned int v13 = sub_1CBDA6464(v7, 0x41u);
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  __n128 v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v21);
  LOBYTE(v22) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v31 + 4, (int8x8_t *)((char *)&v28 + 12), (uint64_t)&v29 + 4);
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v26 + 4);
  if (HIDWORD(v26) == 1) {
    LODWORD(v27) = 2;
  }
  sub_1CBD88900((uint64_t)a1, a2, v11, (uint64_t)&v22 + 12);
  sub_1CBD88E08((uint64_t)a1, a2, v12, (uint64_t)&v24.n128_i64[1]);
  if (v25 == 1) {
    *(void *)&long long v25 = 0x200000001;
  }
  int v14 = *(_DWORD *)(*((void *)a2 + 2) + 16 * v13 + 8);
  if (v14 == 32) {
    char v15 = 0;
  }
  else {
    char v15 = v14 & 0x1F;
  }
  LOBYTE(v28) = v15;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v21) - 2) <= 3) {
      DWORD1(v28) = dword_1CDF53620[DWORD2(v21) - 2];
    }
    DWORD2(v28) = 184;
  }
  long long v16 = v30;
  *(_OWORD *)(a4 + 128) = v29;
  *(_OWORD *)(a4 + 144) = v16;
  *(void *)(a4 + 160) = v31;
  long long v17 = v26;
  *(_OWORD *)(a4 + 64) = v25;
  *(_OWORD *)(a4 + 80) = v17;
  long long v18 = v28;
  *(_OWORD *)(a4 + 96) = v27;
  *(_OWORD *)(a4 + 112) = v18;
  long long v19 = v22;
  *(_OWORD *)a4 = v21;
  *(_OWORD *)(a4 + 16) = v19;
  __n128 result = v24;
  *(_OWORD *)(a4 + 32) = v23;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1CD437D4C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 185;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  sub_1CBD88E08((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if (v20 == 1) {
    *(void *)&long long v20 = 0x200000001;
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 168;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD437ED8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 35;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x14u);
  uint64_t v31 = 0;
  unsigned int v13 = sub_1CBDA6464(v7, 0x41u);
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  __n128 v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v21);
  LOBYTE(v22) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v31 + 4, (int8x8_t *)((char *)&v28 + 12), (uint64_t)&v29 + 4);
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v26 + 4);
  if (HIDWORD(v26) == 1) {
    LODWORD(v27) = 2;
  }
  sub_1CBD88900((uint64_t)a1, a2, v11, (uint64_t)&v22 + 12);
  sub_1CBD88E08((uint64_t)a1, a2, v12, (uint64_t)&v24.n128_i64[1]);
  if (v25 == 1) {
    *(void *)&long long v25 = 0x200000001;
  }
  int v14 = *(_DWORD *)(*((void *)a2 + 2) + 16 * v13 + 8);
  if (v14 == 32) {
    char v15 = 0;
  }
  else {
    char v15 = v14 & 0x1F;
  }
  LOBYTE(v28) = v15;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v21) - 2) <= 3) {
      DWORD1(v28) = dword_1CDF53620[DWORD2(v21) - 2];
    }
    DWORD2(v28) = 40;
  }
  long long v16 = v30;
  *(_OWORD *)(a4 + 128) = v29;
  *(_OWORD *)(a4 + 144) = v16;
  *(void *)(a4 + 160) = v31;
  long long v17 = v26;
  *(_OWORD *)(a4 + 64) = v25;
  *(_OWORD *)(a4 + 80) = v17;
  long long v18 = v28;
  *(_OWORD *)(a4 + 96) = v27;
  *(_OWORD *)(a4 + 112) = v18;
  long long v19 = v22;
  *(_OWORD *)a4 = v21;
  *(_OWORD *)(a4 + 16) = v19;
  __n128 result = v24;
  *(_OWORD *)(a4 + 32) = v23;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1CD4380E4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 75;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x18u);
  memset(v18, 0, 44);
  long long v16 = 0u;
  __n128 v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v14);
  LOBYTE(v15) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v18[2] + 8, (int8x8_t *)v18, (uint64_t)v18 + 8);
  sub_1CBD88900((uint64_t)a1, a2, v10, (uint64_t)&v15 + 12);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v14) - 2) <= 3) {
      v17.n128_u32[2] = dword_1CDF53620[DWORD2(v14) - 2];
    }
    v17.n128_u32[3] = 79;
  }
  long long v11 = v18[1];
  *(_OWORD *)(a4 + 64) = v18[0];
  *(_OWORD *)(a4 + 80) = v11;
  *(_OWORD *)(a4 + 92) = *(_OWORD *)((char *)&v18[1] + 12);
  long long v12 = v15;
  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v12;
  __n128 result = v17;
  *(_OWORD *)(a4 + 32) = v16;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1CD438230(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 18;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x18u);
  memset(v18, 0, 44);
  long long v16 = 0u;
  __n128 v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v14);
  LOBYTE(v15) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v18[2] + 8, (int8x8_t *)v18, (uint64_t)v18 + 8);
  sub_1CBD88900((uint64_t)a1, a2, v10, (uint64_t)&v15 + 12);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v14) - 2) <= 3) {
      v17.n128_u32[2] = dword_1CDF53620[DWORD2(v14) - 2];
    }
    v17.n128_u32[3] = 23;
  }
  long long v11 = v18[1];
  *(_OWORD *)(a4 + 64) = v18[0];
  *(_OWORD *)(a4 + 80) = v11;
  *(_OWORD *)(a4 + 92) = *(_OWORD *)((char *)&v18[1] + 12);
  long long v12 = v15;
  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v12;
  __n128 result = v17;
  *(_OWORD *)(a4 + 32) = v16;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1CD43837C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 144;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x18u);
  memset(v18, 0, 44);
  long long v16 = 0u;
  __n128 v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v14);
  LOBYTE(v15) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v18[2] + 8, (int8x8_t *)v18, (uint64_t)v18 + 8);
  sub_1CBD88900((uint64_t)a1, a2, v10, (uint64_t)&v15 + 12);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v14) - 2) <= 3) {
      v17.n128_u32[2] = dword_1CDF53620[DWORD2(v14) - 2];
    }
    v17.n128_u32[3] = 143;
  }
  long long v11 = v18[1];
  *(_OWORD *)(a4 + 64) = v18[0];
  *(_OWORD *)(a4 + 80) = v11;
  *(_OWORD *)(a4 + 92) = *(_OWORD *)((char *)&v18[1] + 12);
  long long v12 = v15;
  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v12;
  __n128 result = v17;
  *(_OWORD *)(a4 + 32) = v16;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1CD4384C8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 170;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x19u);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  sub_1CBD88E08((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 153;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD438640(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 74;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v23 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v9 = sub_1CBDA6464(v7, 0x54u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x14u);
  unsigned int v13 = sub_1CBDA6464(v7, 0x37u);
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  __n128 v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v24 = 0u;
  uint64_t v14 = *((void *)a2 + 2);
  int v15 = *(_DWORD *)(v14 + 16 * v8 + 8);
  if (v15 == 2)
  {
    char v16 = 6;
  }
  else if (v15 == 1)
  {
    char v16 = 7;
  }
  else
  {
    char v16 = (v15 + 9) & 0xF;
  }
  BYTE1(v24) = v16;
  LOBYTE(v24) = 1;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v23, (BOOL *)&v34 + 8, (int8x8_t *)((char *)&v31 + 12), (uint64_t)&v32 + 8);
  DWORD1(v32) = *(_DWORD *)(v14 + 16 * v9 + 8) & 0xF;
  sub_1CBD8C148(a1, (uint64_t)a2, v10, (uint64_t)&v24 + 4);
  sub_1CBD8C148(a1, (uint64_t)a2, v11, (uint64_t)&v26);
  sub_1CBD88E08(a1, a2, v12, (uint64_t)&v27.n128_i64[1] + 4);
  sub_1CBD88E08(a1, a2, v13, (uint64_t)&v29 + 8);
  if (DWORD1(v28) == 1) {
    *(void *)((char *)&v28 + 4) = 0x200000001;
  }
  if (v30 == 1) {
    *(void *)&long long v30 = 0x200000001;
  }
  if (*(_DWORD *)a1 >= 5u)
  {
    HIDWORD(v34) = 1;
    if ((*(unsigned char *)(*(void *)(a1 + 8) + 196) & 2) != 0)
    {
      uint64_t v22 = sub_1CBE52E8C(*(_DWORD *)a2);
      if ((v22 & 0xFF00000000) == 0 || v22 != 47) {
        HIDWORD(v34) = 0;
      }
    }
  }
  else if (*(_DWORD *)a1 != 4)
  {
    goto LABEL_15;
  }
  *(void *)((char *)&v31 + 4) = 0x4E00000003;
LABEL_15:
  long long v17 = v33;
  *(_OWORD *)(a4 + 128) = v32;
  *(_OWORD *)(a4 + 144) = v17;
  *(_OWORD *)(a4 + 160) = v34;
  long long v18 = v29;
  *(_OWORD *)(a4 + 64) = v28;
  *(_OWORD *)(a4 + 80) = v18;
  long long v19 = v31;
  *(_OWORD *)(a4 + 96) = v30;
  *(_OWORD *)(a4 + 112) = v19;
  long long v20 = v25;
  *(_OWORD *)a4 = v24;
  *(_OWORD *)(a4 + 16) = v20;
  __n128 result = v27;
  *(_OWORD *)(a4 + 32) = v26;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1CD43889C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  v39[2] = *MEMORY[0x1E4F143B8];
  *a3 = 97;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x54u);
  unsigned int v22 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v23 = sub_1CBDA6464(v7, 4u);
  unsigned int v25 = sub_1CBDA6464(v7, 0x14u);
  unsigned int v24 = sub_1CBDA6464(v7, 0x37u);
  *(_DWORD *)__n128 v38 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  __n128 v27 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v26);
  uint64_t v11 = *((void *)a2 + 2);
  v27.n128_u8[0] = (*(unsigned char *)(v11 + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, v38, (int8x8_t *)((char *)&v35 + 4), (uint64_t)&v36);
  HIDWORD(v35) = dword_1CDF536A4[(*(void *)(v11 + 16 * v10 + 8) & 0xFLL) - 8];
  sub_1CBD88900((uint64_t)a1, a2, v22, (uint64_t)&v27.n128_i64[1] + 4);
  sub_1CBD88900((uint64_t)a1, a2, v23, (uint64_t)&v29 + 8);
  sub_1CBD88E08((uint64_t)a1, a2, v25, (uint64_t)&v31 + 4);
  sub_1CBD88E08((uint64_t)a1, a2, v24, (uint64_t)&v33);
  if (HIDWORD(v31) == 1) {
    LODWORD(v32) = 1;
  }
  if (DWORD2(v33) == 1) {
    *((void *)&v33 + 1) = 0x100000001;
  }
  if (HIDWORD(v35) >= 4)
  {
    char v12 = 0;
    uint64_t v13 = 0;
    v39[0] = (char *)&v27.n128_u64[1] + 4;
    v39[1] = (char *)&v29 + 8;
    do
    {
      char v14 = v12;
      uint64_t v15 = v39[v13];
      if (*(_DWORD *)(v15 + 8) != 1 && *(_DWORD *)(v15 + 12) == 1) {
        *(unsigned char *)(v15 + 25) = 1;
      }
      char v12 = 1;
      uint64_t v13 = 1;
    }
    while ((v14 & 1) == 0);
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v26) - 2) <= 3) {
      HIDWORD(v34) = dword_1CDF53620[DWORD2(v26) - 2];
    }
    LODWORD(v35) = 96;
  }
  long long v16 = v37;
  *(_OWORD *)(a4 + 160) = v36;
  *(_OWORD *)(a4 + 176) = v16;
  *(_DWORD *)(a4 + 192) = *(_DWORD *)v38;
  long long v17 = v33;
  *(_OWORD *)(a4 + 96) = v32;
  *(_OWORD *)(a4 + 112) = v17;
  long long v18 = v35;
  *(_OWORD *)(a4 + 128) = v34;
  *(_OWORD *)(a4 + 144) = v18;
  long long v19 = v29;
  *(_OWORD *)(a4 + 32) = v28;
  *(_OWORD *)(a4 + 48) = v19;
  long long v20 = v31;
  *(_OWORD *)(a4 + 64) = v30;
  *(_OWORD *)(a4 + 80) = v20;
  __n128 result = v27;
  *(_OWORD *)a4 = v26;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD438B60(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  v36[2] = *MEMORY[0x1E4F143B8];
  *a3 = 95;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x54u);
  unsigned int v24 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  unsigned int v25 = sub_1CBDA6464(v7, 0x14u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x37u);
  long long v34 = 0u;
  memset(v35, 0, 60);
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  __n128 v27 = 0u;
  sub_1CBD8F178((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v26);
  uint64_t v13 = *((void *)a2 + 2);
  v27.n128_u8[0] = (*(unsigned char *)(v13 + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v35[3] + 8, (int8x8_t *)((char *)v35 + 12), (uint64_t)&v35[1] + 8);
  DWORD1(v35[1]) = dword_1CDF536A4[(*(void *)(v13 + 16 * v10 + 8) & 0xFLL) - 8];
  sub_1CBD88900((uint64_t)a1, a2, v24, (uint64_t)&v28 + 4);
  sub_1CBD88900((uint64_t)a1, a2, v11, (uint64_t)&v30);
  sub_1CBD8F254((uint64_t)a1, a2, v25, (uint64_t)&v31 + 12);
  sub_1CBD8F254((uint64_t)a1, a2, v12, (uint64_t)&v33 + 8);
  if (DWORD1(v32) == 1) {
    *(void *)((char *)&v32 + 4) = 0x100000001;
  }
  if (v34 == 1) {
    *(void *)&long long v34 = 0x100000001;
  }
  if (DWORD1(v35[1]) >= 4)
  {
    char v20 = 0;
    uint64_t v21 = 0;
    v36[0] = (char *)&v28 + 4;
    v36[1] = &v30;
    do
    {
      char v22 = v20;
      uint64_t v23 = v36[v21];
      if (*(_DWORD *)(v23 + 8) != 1 && *(_DWORD *)(v23 + 12) == 1) {
        *(unsigned char *)(v23 + 25) = 1;
      }
      char v20 = 1;
      uint64_t v21 = 1;
    }
    while ((v22 & 1) == 0);
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v26) - 2) <= 3) {
      DWORD1(v35[0]) = dword_1CDF53620[DWORD2(v26) - 2];
    }
    DWORD2(v35[0]) = 94;
  }
  long long v14 = v35[2];
  *(_OWORD *)(a4 + 160) = v35[1];
  *(_OWORD *)(a4 + 176) = v14;
  *(_OWORD *)(a4 + 188) = *(_OWORD *)((char *)&v35[2] + 12);
  long long v15 = v33;
  *(_OWORD *)(a4 + 96) = v32;
  *(_OWORD *)(a4 + 112) = v15;
  long long v16 = v35[0];
  *(_OWORD *)(a4 + 128) = v34;
  *(_OWORD *)(a4 + 144) = v16;
  long long v17 = v29;
  *(_OWORD *)(a4 + 32) = v28;
  *(_OWORD *)(a4 + 48) = v17;
  long long v18 = v31;
  *(_OWORD *)(a4 + 64) = v30;
  *(_OWORD *)(a4 + 80) = v18;
  __n128 result = v27;
  *(_OWORD *)a4 = v26;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD438E1C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  v35[2] = *MEMORY[0x1E4F143B8];
  *a3 = 100;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v26 = sub_1CBDA6464(v7, 0x54u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x14u);
  unsigned int v13 = sub_1CBDA6464(v7, 0x37u);
  long long v33 = 0u;
  memset(v34, 0, 60);
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  __n128 v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v14 = *((void *)a2 + 2);
  int v15 = *(_DWORD *)(v14 + 16 * v8 + 8);
  if (v15 == 2)
  {
    char v16 = 6;
  }
  else if (v15 == 1)
  {
    char v16 = 7;
  }
  else
  {
    char v16 = (v15 + 9) & 0xF;
  }
  BYTE1(v27) = v16;
  LOBYTE(v27) = 1;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v34[3] + 8, (int8x8_t *)((char *)v34 + 12), (uint64_t)&v34[1] + 8);
  DWORD1(v34[1]) = dword_1CDF536A4[(*(void *)(v14 + 16 * v26 + 8) & 0xFLL) - 8];
  sub_1CBD88900((uint64_t)a1, a2, v10, (uint64_t)&v27 + 4);
  sub_1CBD88900((uint64_t)a1, a2, v11, (uint64_t)&v29);
  sub_1CBD88E08((uint64_t)a1, a2, v12, (uint64_t)&v30.n128_i64[1] + 4);
  sub_1CBD88E08((uint64_t)a1, a2, v13, (uint64_t)&v32 + 8);
  if (DWORD1(v31) == 1) {
    *(void *)((char *)&v31 + 4) = 0x200000001;
  }
  if (v33 == 1) {
    *(void *)&long long v33 = 0x200000001;
  }
  if (DWORD1(v34[1]) >= 4)
  {
    char v17 = 0;
    uint64_t v18 = 0;
    v35[0] = (char *)&v27 + 4;
    v35[1] = &v29;
    do
    {
      char v19 = v17;
      uint64_t v20 = v35[v18];
      if (*(_DWORD *)(v20 + 8) != 1 && *(_DWORD *)(v20 + 12) == 1) {
        *(unsigned char *)(v20 + 25) = 1;
      }
      char v17 = 1;
      uint64_t v18 = 1;
    }
    while ((v19 & 1) == 0);
  }
  if (*a1 >= 4u) {
    *(void *)((char *)v34 + 4) = 0x6300000003;
  }
  long long v21 = v34[2];
  *(_OWORD *)(a4 + 128) = v34[1];
  *(_OWORD *)(a4 + 144) = v21;
  *(_OWORD *)(a4 + 156) = *(_OWORD *)((char *)&v34[2] + 12);
  long long v22 = v32;
  *(_OWORD *)(a4 + 64) = v31;
  *(_OWORD *)(a4 + 80) = v22;
  long long v23 = v34[0];
  *(_OWORD *)(a4 + 96) = v33;
  *(_OWORD *)(a4 + 112) = v23;
  long long v24 = v28;
  *(_OWORD *)a4 = v27;
  *(_OWORD *)(a4 + 16) = v24;
  __n128 result = v30;
  *(_OWORD *)(a4 + 32) = v29;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1CD4390D8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 165;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 7u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x14u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x37u);
  memset(v26, 0, 44);
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  __n128 v21 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v20);
  uint64_t v13 = *((void *)a2 + 2);
  v21.n128_u8[0] = (*(unsigned char *)(v13 + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v26[2] + 8, (int8x8_t *)v26, (uint64_t)v26 + 8);
  int v14 = *(_DWORD *)(v13 + 16 * v10 + 8);
  if (v14 == 2)
  {
    char v15 = 6;
  }
  else if (v14 == 1)
  {
    char v15 = 7;
  }
  else
  {
    char v15 = (v14 + 9) & 0xF;
  }
  BYTE5(v25) = v15;
  sub_1CBD88E08((uint64_t)a1, a2, v11, (uint64_t)&v21.n128_i64[1] + 4);
  sub_1CBD88E08((uint64_t)a1, a2, v12, (uint64_t)&v23 + 8);
  if (DWORD1(v22) == 1) {
    *(void *)((char *)&v22 + 4) = 0x200000001;
  }
  if (v24 == 1) {
    *(void *)&long long v24 = 0x200000001;
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v20) - 2) <= 3) {
      DWORD2(v25) = dword_1CDF53620[DWORD2(v20) - 2];
    }
    HIDWORD(v25) = 148;
  }
  long long v16 = v26[1];
  *(_OWORD *)(a4 + 96) = v26[0];
  *(_OWORD *)(a4 + 112) = v16;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v26[1] + 12);
  long long v17 = v23;
  *(_OWORD *)(a4 + 32) = v22;
  *(_OWORD *)(a4 + 48) = v17;
  long long v18 = v25;
  *(_OWORD *)(a4 + 64) = v24;
  *(_OWORD *)(a4 + 80) = v18;
  __n128 result = v21;
  *(_OWORD *)a4 = v20;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1CD4392C8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 162;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 7u);
  unsigned int v20 = sub_1CBDA6464(v7, 0x14u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x37u);
  *(_DWORD *)__n128 v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v21 = 0u;
  sub_1CBD8F178((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v21);
  uint64_t v12 = *((void *)a2 + 2);
  LOBYTE(v22) = (*(unsigned char *)(v12 + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, v30, (int8x8_t *)&v27 + 1, (uint64_t)&v28);
  int v13 = *(_DWORD *)(v12 + 16 * v10 + 8);
  if (v13 == 2)
  {
    char v14 = 6;
  }
  else if (v13 == 1)
  {
    char v14 = 7;
  }
  else
  {
    char v14 = (v13 + 9) & 0xF;
  }
  BYTE13(v26) = v14;
  sub_1CBD8F254((uint64_t)a1, a2, v20, (uint64_t)&v23 + 4);
  sub_1CBD8F254((uint64_t)a1, a2, v11, (uint64_t)&v25);
  if (HIDWORD(v23) == 1) {
    LODWORD(v24) = 1;
  }
  if (DWORD2(v25) == 1) {
    *((void *)&v25 + 1) = 0x100000001;
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v21) - 2) <= 3) {
      LODWORD(v27) = dword_1CDF53620[DWORD2(v21) - 2];
    }
    DWORD1(v27) = 145;
  }
  long long v15 = v28;
  *(_OWORD *)(a4 + 96) = v27;
  *(_OWORD *)(a4 + 112) = v15;
  *(_OWORD *)(a4 + 128) = v29;
  *(_DWORD *)(a4 + 144) = *(_DWORD *)v30;
  long long v16 = v24;
  *(_OWORD *)(a4 + 32) = v23;
  *(_OWORD *)(a4 + 48) = v16;
  long long v17 = v26;
  *(_OWORD *)(a4 + 64) = v25;
  *(_OWORD *)(a4 + 80) = v17;
  double result = *(double *)&v21;
  long long v19 = v22;
  *(_OWORD *)a4 = v21;
  *(_OWORD *)(a4 + 16) = v19;
  return result;
}

double sub_1CD4394C0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 163;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 7u);
  unsigned int v20 = sub_1CBDA6464(v7, 0x14u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x37u);
  *(_DWORD *)__n128 v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v21 = 0u;
  sub_1CBD8F178((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v21);
  uint64_t v12 = *((void *)a2 + 2);
  LOBYTE(v22) = (*(unsigned char *)(v12 + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, v30, (int8x8_t *)&v27 + 1, (uint64_t)&v28);
  int v13 = *(_DWORD *)(v12 + 16 * v10 + 8);
  if (v13 == 2)
  {
    char v14 = 6;
  }
  else if (v13 == 1)
  {
    char v14 = 7;
  }
  else
  {
    char v14 = (v13 + 9) & 0xF;
  }
  BYTE13(v26) = v14;
  sub_1CBD8F254((uint64_t)a1, a2, v20, (uint64_t)&v23 + 4);
  sub_1CBD8F254((uint64_t)a1, a2, v11, (uint64_t)&v25);
  if (HIDWORD(v23) == 1) {
    LODWORD(v24) = 2;
  }
  if (DWORD2(v25) == 1) {
    *((void *)&v25 + 1) = 0x200000001;
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v21) - 2) <= 3) {
      LODWORD(v27) = dword_1CDF53620[DWORD2(v21) - 2];
    }
    DWORD1(v27) = 146;
  }
  long long v15 = v28;
  *(_OWORD *)(a4 + 96) = v27;
  *(_OWORD *)(a4 + 112) = v15;
  *(_OWORD *)(a4 + 128) = v29;
  *(_DWORD *)(a4 + 144) = *(_DWORD *)v30;
  long long v16 = v24;
  *(_OWORD *)(a4 + 32) = v23;
  *(_OWORD *)(a4 + 48) = v16;
  long long v17 = v26;
  *(_OWORD *)(a4 + 64) = v25;
  *(_OWORD *)(a4 + 80) = v17;
  double result = *(double *)&v21;
  long long v19 = v22;
  *(_OWORD *)a4 = v21;
  *(_OWORD *)(a4 + 16) = v19;
  return result;
}

double sub_1CD4396C0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  if (*a1 > 3u)
  {
    if (sub_1CBD91EBC(a1, (unsigned int *)a2))
    {
      *(void *)&double result = sub_1CD4399F4(a1, a2, a3, a4).n128_u64[0];
    }
    else if (sub_1CBD92144(a1, (unsigned int *)a2))
    {
      *(void *)&double result = sub_1CD4390D8(a1, a2, a3, a4).n128_u64[0];
    }
    else if ((sub_1CBDA0234((unsigned int *)a2) & 1) != 0 || !sub_1CBDA0368((unsigned int *)a2))
    {
      if (sub_1CBDA0234((unsigned int *)a2)) {
        sub_1CBDA0368((unsigned int *)a2);
      }
      return sub_1CD4394C0(a1, a2, a3, a4);
    }
    else
    {
      return sub_1CD4392C8(a1, a2, a3, a4);
    }
  }
  else
  {
    return sub_1CD43982C(a1, (unsigned int *)a2, a3, a4);
  }
  return result;
}

double sub_1CD43982C(_DWORD *a1, unsigned int *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 161;
  int v7 = *(unsigned __int16 *)a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 7u);
  unsigned int v19 = sub_1CBDA6464(v7, 0x14u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x37u);
  *(_DWORD *)long long v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  sub_1CBD927FC((uint64_t)a1, a2, v8, (uint64_t)&v20);
  sub_1CBD929F0(a1, (uint64_t)a2, v9, (uint64_t)&v20, v29, (int8x8_t *)&v26 + 1, (uint64_t)&v27);
  int v12 = *(_DWORD *)(*((void *)a2 + 2) + 16 * v10 + 8);
  if (v12 == 2)
  {
    char v13 = 6;
  }
  else if (v12 == 1)
  {
    char v13 = 7;
  }
  else
  {
    char v13 = (v12 + 9) & 0xF;
  }
  BYTE1(v26) = v13;
  sub_1CBD8F254((uint64_t)a1, (unsigned __int16 *)a2, v19, (uint64_t)&v22 + 8);
  sub_1CBD8F254((uint64_t)a1, (unsigned __int16 *)a2, v11, (uint64_t)&v24 + 4);
  if (v20 <= 1)
  {
    if (v23 == 1) {
      DWORD1(v23) = v21;
    }
    if (HIDWORD(v24) == 1) {
      LODWORD(v25) = v21;
    }
  }
  long long v14 = v27;
  *(_OWORD *)(a4 + 96) = v26;
  *(_OWORD *)(a4 + 112) = v14;
  *(_OWORD *)(a4 + 128) = v28;
  *(_DWORD *)(a4 + 144) = *(_DWORD *)v29;
  long long v15 = v23;
  *(_OWORD *)(a4 + 32) = v22;
  *(_OWORD *)(a4 + 48) = v15;
  long long v16 = v25;
  *(_OWORD *)(a4 + 64) = v24;
  *(_OWORD *)(a4 + 80) = v16;
  double result = *(double *)&v20;
  long long v18 = v21;
  *(_OWORD *)a4 = v20;
  *(_OWORD *)(a4 + 16) = v18;
  return result;
}

__n128 sub_1CD4399F4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 164;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 7u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x14u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x37u);
  memset(v26, 0, 44);
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  __n128 v21 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v20);
  uint64_t v13 = *((void *)a2 + 2);
  v21.n128_u8[0] = (*(unsigned char *)(v13 + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v26[2] + 8, (int8x8_t *)v26, (uint64_t)v26 + 8);
  int v14 = *(_DWORD *)(v13 + 16 * v10 + 8);
  if (v14 == 2)
  {
    char v15 = 6;
  }
  else if (v14 == 1)
  {
    char v15 = 7;
  }
  else
  {
    char v15 = (v14 + 9) & 0xF;
  }
  BYTE5(v25) = v15;
  sub_1CBD88E08((uint64_t)a1, a2, v11, (uint64_t)&v21.n128_i64[1] + 4);
  sub_1CBD88E08((uint64_t)a1, a2, v12, (uint64_t)&v23 + 8);
  if (DWORD1(v22) == 1) {
    *(void *)((char *)&v22 + 4) = 0x100000001;
  }
  if (v24 == 1) {
    *(void *)&long long v24 = 0x100000001;
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v20) - 2) <= 3) {
      DWORD2(v25) = dword_1CDF53620[DWORD2(v20) - 2];
    }
    HIDWORD(v25) = 147;
  }
  long long v16 = v26[1];
  *(_OWORD *)(a4 + 96) = v26[0];
  *(_OWORD *)(a4 + 112) = v16;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v26[1] + 12);
  long long v17 = v23;
  *(_OWORD *)(a4 + 32) = v22;
  *(_OWORD *)(a4 + 48) = v17;
  long long v18 = v25;
  *(_OWORD *)(a4 + 64) = v24;
  *(_OWORD *)(a4 + 80) = v18;
  __n128 result = v21;
  *(_OWORD *)a4 = v20;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1CD439BDC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 167;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 7u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x14u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x37u);
  *(_DWORD *)long long v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v22 = 0u;
  uint64_t v13 = *((void *)a2 + 2);
  int v14 = *(_DWORD *)(v13 + 16 * v8 + 8);
  if (v14 == 2)
  {
    char v15 = 6;
  }
  else if (v14 == 1)
  {
    char v15 = 7;
  }
  else
  {
    char v15 = (v14 + 9) & 0xF;
  }
  BYTE1(v22) = v15;
  LOBYTE(v22) = 1;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, v29, (int8x8_t *)&v26 + 1, (uint64_t)&v27);
  int v16 = *(_DWORD *)(v13 + 16 * v10 + 8);
  if (v16 == 2)
  {
    char v17 = 6;
  }
  else if (v16 == 1)
  {
    char v17 = 7;
  }
  else
  {
    char v17 = (v16 + 9) & 0xF;
  }
  BYTE13(v25) = v17;
  sub_1CBD88E08((uint64_t)a1, a2, v11, (uint64_t)&v22 + 4);
  sub_1CBD88E08((uint64_t)a1, a2, v12, (uint64_t)&v24);
  if (HIDWORD(v22) == 1) {
    LODWORD(v23) = 2;
  }
  if (DWORD2(v24) == 1) {
    *((void *)&v24 + 1) = 0x200000001;
  }
  if (*a1 >= 4u) {
    *(void *)&long long v26 = 0x9600000003;
  }
  long long v18 = v27;
  *(_OWORD *)(a4 + 64) = v26;
  *(_OWORD *)(a4 + 80) = v18;
  *(_OWORD *)(a4 + 96) = v28;
  *(_DWORD *)(a4 + 112) = *(_DWORD *)v29;
  long long v19 = v23;
  *(_OWORD *)a4 = v22;
  *(_OWORD *)(a4 + 16) = v19;
  double result = *(double *)&v24;
  long long v21 = v25;
  *(_OWORD *)(a4 + 32) = v24;
  *(_OWORD *)(a4 + 48) = v21;
  return result;
}

double sub_1CD439DC4(unsigned int *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 53;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x1Eu);
  uint64_t v27 = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  memset(v21, 0, sizeof(v21));
  long long v19 = 0u;
  sub_1CBD8C5F0((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v19);
  uint64_t v11 = *((void *)a2 + 2);
  LOBYTE(v20) = (*(unsigned char *)(v11 + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v27, (int8x8_t *)((char *)&v24 + 4), (uint64_t)&v25);
  if (*(unsigned char *)(v11 + 16 * v10) == 1)
  {
    sub_1CBD8BD54((uint64_t)a1, a2, v10, (uint64_t)v21 + 4);
  }
  else
  {
    BYTE4(v21[0]) = *(unsigned char *)(v11 + 16 * v10 + 8) & 0x7F;
    *(void *)((char *)v21 + 12) = 0x200000006;
    BYTE4(v21[1]) = 0;
  }
  uint64_t v12 = *(unsigned int *)a2;
  HIDWORD(v24) = sub_1CBDB2780(v12, 16, 0) == 22;
  unsigned int v13 = *a1;
  if (v13 >= 5) {
    HIDWORD(v27) = 1;
  }
  sub_1CBDB2780(v12, 19, 0);
  *((void *)&v22 + 1) = 0x200000007;
  LODWORD(v22) = 66;
  if (v13 >= 4)
  {
    if ((DWORD2(v19) - 2) <= 3) {
      HIDWORD(v23) = dword_1CDF53620[DWORD2(v19) - 2];
    }
    LODWORD(v24) = 58;
  }
  long long v14 = v25;
  *(_OWORD *)(a4 + 96) = v24;
  *(_OWORD *)(a4 + 112) = v14;
  *(_OWORD *)(a4 + 128) = v26;
  *(void *)(a4 + 144) = v27;
  long long v15 = v21[1];
  *(_OWORD *)(a4 + 32) = v21[0];
  *(_OWORD *)(a4 + 48) = v15;
  long long v16 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v16;
  double result = *(double *)&v19;
  long long v18 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v18;
  return result;
}

double sub_1CD439FC4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 66;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x25u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x48u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x11u);
  uint64_t v26 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v19);
  uint64_t v13 = *((void *)a2 + 2);
  LOBYTE(v20) = (*(unsigned char *)(v13 + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v26 + 4, (int8x8_t *)&v23, (uint64_t)&v24 + 4);
  uint64_t v14 = *(void *)(v13 + 16 * v11 + 8);
  DWORD2(v23) = *(void *)(v13 + 16 * v10 + 8);
  HIDWORD(v23) = v14;
  sub_1CBD8F254((uint64_t)a1, a2, v12, (uint64_t)&v20 + 12);
  DWORD2(v21) = 1;
  LOBYTE(v24) = 1;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v19) - 2) <= 3) {
      DWORD2(v22) = dword_1CDF53620[DWORD2(v19) - 2];
    }
    HIDWORD(v22) = 71;
  }
  long long v15 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v15;
  *(_OWORD *)(a4 + 96) = v25;
  *(void *)(a4 + 112) = v26;
  long long v16 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v16;
  double result = *(double *)&v21;
  long long v18 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v18;
  return result;
}

__n128 sub_1CD43A164(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 1;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Fu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Bu);
  unsigned int v11 = sub_1CBDA6464(v7, 0x30u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x55u);
  unsigned int v25 = sub_1CBDA6464(v7, 7u);
  unsigned int v13 = sub_1CBDA6464(v7, 0x56u);
  memset(v33, 0, 108);
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  sub_1CBD85A80(a1, (uint64_t)a2, v8, (BOOL *)&v33[6] + 5, (int8x8_t *)((char *)&v33[2] + 10), (uint64_t)&v33[4] + 4);
  sub_1CBD99690((uint64_t)a1, (uint64_t)a2, v9, (int *)&v33[3] + 1, (unsigned char *)&v33[3] + 9, (uint64_t)&v29 + 8, (unsigned char *)&v33[6] + 4, (_DWORD *)&v33[6] + 2);
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v31 + 4);
  sub_1CBD88900((uint64_t)a1, a2, v11, (uint64_t)&v29 + 8);
  uint64_t v14 = *((void *)a2 + 2);
  if (*(unsigned char *)(v14 + 16 * v12) == 5) {
    __int16 v15 = 0;
  }
  else {
    __int16 v15 = *(_WORD *)(v14 + 16 * v12 + 8);
  }
  LOWORD(v33[4]) = v15;
  sub_1CBD88E08((uint64_t)a1, a2, v25, (uint64_t)&v27 + 12);
  uint64_t v16 = *(void *)(*((void *)a2 + 2) + 16 * v13 + 8);
  if (v16 == 1)
  {
    int v17 = 0;
    goto LABEL_5;
  }
  if (v16 <= 7)
  {
    if (v16 == 2)
    {
      int v17 = 1;
      goto LABEL_5;
    }
    if (v16 == 4)
    {
      int v17 = 2;
      goto LABEL_5;
    }
LABEL_19:
    llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const llvm::Twine *)1);
  }
  if (v16 == 8)
  {
    int v17 = 3;
    goto LABEL_5;
  }
  if (v16 != 16) {
    goto LABEL_19;
  }
  int v17 = 4;
LABEL_5:
  HIDWORD(v33[3]) = v17;
  BYTE8(v33[3]) = 0;
  *(void *)&long long v26 = 0;
  *((void *)&v26 + 1) = 0x200000000;
  *(void *)&long long v27 = 0;
  DWORD2(v28) = 2;
  DWORD2(v27) = 0;
  if (*a1 < 4u)
  {
    int v18 = 0;
    memset((char *)v33 + 4, 0, 28);
  }
  else
  {
    BYTE8(v33[2]) = 3;
    *(void *)((char *)v33 + 4) = 15;
    memset((char *)v33 + 12, 0, 20);
    *(void *)&v33[2] = 0x600000000;
    int v18 = 1;
  }
  BYTE9(v33[3]) = 3;
  HIDWORD(v33[0]) = v18;
  LODWORD(v33[1]) = 1;
  LOBYTE(v33[0]) = 0;
  *(_OWORD *)(a4 + 192) = v33[5];
  *(_OWORD *)(a4 + 204) = *(_OWORD *)((char *)&v33[5] + 12);
  long long v19 = v29;
  *(_OWORD *)(a4 + 32) = v28;
  *(_OWORD *)(a4 + 48) = v19;
  long long v20 = v31;
  *(_OWORD *)(a4 + 64) = v30;
  *(_OWORD *)(a4 + 80) = v20;
  long long v21 = v27;
  *(_OWORD *)a4 = v26;
  *(_OWORD *)(a4 + 16) = v21;
  long long v22 = v33[4];
  *(_OWORD *)(a4 + 160) = v33[3];
  *(_OWORD *)(a4 + 176) = v22;
  long long v23 = v33[0];
  *(_OWORD *)(a4 + 96) = v32;
  *(_OWORD *)(a4 + 112) = v23;
  __n128 result = (__n128)v33[2];
  *(_OWORD *)(a4 + 128) = v33[1];
  *(__n128 *)(a4 + 144) = result;
  return result;
}

__n128 sub_1CD43A43C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 140;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x54u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v12 = sub_1CBDA6464(v7, 4u);
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  __n128 v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v19);
  uint64_t v13 = *((void *)a2 + 2);
  v20.n128_u8[0] = (*(unsigned char *)(v13 + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v27 + 12, (int8x8_t *)((char *)&v24 + 12), (uint64_t)&v25 + 12);
  uint64_t v14 = *(void *)(v13 + 16 * v10 + 8);
  DWORD1(v25) = dword_1CDF536A4[(v14 & 0xF) - 8];
  BYTE8(v25) = (v14 & 0x10) != 0;
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v20.n128_i64[1] + 4);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v12, (uint64_t)&v22 + 8);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v19) - 2) <= 3) {
      DWORD1(v24) = dword_1CDF53620[DWORD2(v19) - 2];
    }
    DWORD2(v24) = 139;
  }
  long long v15 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v15;
  *(_OWORD *)(a4 + 128) = v27;
  long long v16 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v16;
  long long v17 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v17;
  __n128 result = v20;
  *(_OWORD *)a4 = v19;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1CD43A5F4(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 139;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x54u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v12 = sub_1CBDA6464(v7, 4u);
  int v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v21 = 0u;
  sub_1CBD85EB8(a1, (uint64_t)a2, v8, (uint64_t)&v21);
  uint64_t v13 = *((void *)a2 + 2);
  LOBYTE(v22) = (*(unsigned char *)(v13 + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v29 + 12, (int8x8_t *)((char *)&v26 + 12), (uint64_t)&v27 + 12);
  int v14 = *(_DWORD *)(v13 + 16 * v10 + 8);
  DWORD1(v27) = v14 & 0xF;
  BYTE8(v27) = (v14 & 0x10) != 0;
  sub_1CBD8C148(a1, (uint64_t)a2, v11, (uint64_t)&v22 + 12);
  sub_1CBD8C148(a1, (uint64_t)a2, v12, (uint64_t)&v24 + 8);
  if (*(_DWORD *)a1 >= 5u)
  {
    int v30 = 1;
    if ((*(unsigned char *)(*(void *)(a1 + 8) + 196) & 2) != 0)
    {
      uint64_t v20 = sub_1CBE52E8C(*(_DWORD *)a2);
      if ((v20 & 0xFF00000000) == 0 || v20 != 47) {
        int v30 = 0;
      }
    }
  }
  else if (*(_DWORD *)a1 != 4)
  {
    goto LABEL_8;
  }
  if ((DWORD2(v21) - 2) <= 3) {
    DWORD1(v26) = dword_1CDF53620[DWORD2(v21) - 2];
  }
  DWORD2(v26) = 138;
LABEL_8:
  long long v15 = v28;
  *(_OWORD *)(a4 + 96) = v27;
  *(_OWORD *)(a4 + 112) = v15;
  *(_OWORD *)(a4 + 128) = v29;
  *(_DWORD *)(a4 + 144) = v30;
  long long v16 = v24;
  *(_OWORD *)(a4 + 32) = v23;
  *(_OWORD *)(a4 + 48) = v16;
  long long v17 = v26;
  *(_OWORD *)(a4 + 64) = v25;
  *(_OWORD *)(a4 + 80) = v17;
  double result = *(double *)&v21;
  long long v19 = v22;
  *(_OWORD *)a4 = v21;
  *(_OWORD *)(a4 + 16) = v19;
  return result;
}

double sub_1CD43A7EC(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 173;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x54u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v12 = sub_1CBDA6464(v7, 4u);
  int v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v21 = 0u;
  sub_1CBD85EB8(a1, (uint64_t)a2, v8, (uint64_t)&v21);
  uint64_t v13 = *((void *)a2 + 2);
  LOBYTE(v22) = (*(unsigned char *)(v13 + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v29 + 12, (int8x8_t *)((char *)&v26 + 12), (uint64_t)&v27 + 12);
  int v14 = *(_DWORD *)(v13 + 16 * v10 + 8);
  DWORD1(v27) = v14 & 0xF;
  BYTE8(v27) = (v14 & 0x10) != 0;
  sub_1CBD8C148(a1, (uint64_t)a2, v11, (uint64_t)&v22 + 12);
  sub_1CBD8C148(a1, (uint64_t)a2, v12, (uint64_t)&v24 + 8);
  if (*(_DWORD *)a1 >= 5u)
  {
    int v30 = 1;
    if ((*(unsigned char *)(*(void *)(a1 + 8) + 196) & 2) != 0)
    {
      uint64_t v20 = sub_1CBE52E8C(*(_DWORD *)a2);
      if ((v20 & 0xFF00000000) == 0 || v20 != 47) {
        int v30 = 0;
      }
    }
  }
  else if (*(_DWORD *)a1 != 4)
  {
    goto LABEL_3;
  }
  if ((DWORD2(v21) - 2) <= 3) {
    DWORD1(v26) = dword_1CDF53620[DWORD2(v21) - 2];
  }
  DWORD2(v26) = 156;
LABEL_3:
  long long v15 = v28;
  *(_OWORD *)(a4 + 96) = v27;
  *(_OWORD *)(a4 + 112) = v15;
  *(_OWORD *)(a4 + 128) = v29;
  *(_DWORD *)(a4 + 144) = v30;
  long long v16 = v24;
  *(_OWORD *)(a4 + 32) = v23;
  *(_OWORD *)(a4 + 48) = v16;
  long long v17 = v26;
  *(_OWORD *)(a4 + 64) = v25;
  *(_OWORD *)(a4 + 80) = v17;
  double result = *(double *)&v21;
  long long v19 = v22;
  *(_OWORD *)a4 = v21;
  *(_OWORD *)(a4 + 16) = v19;
  return result;
}

__n128 sub_1CD43A9E4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 174;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x54u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v12 = sub_1CBDA6464(v7, 4u);
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  __n128 v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v19);
  uint64_t v13 = *((void *)a2 + 2);
  v20.n128_u8[0] = (*(unsigned char *)(v13 + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v27 + 12, (int8x8_t *)((char *)&v24 + 12), (uint64_t)&v25 + 12);
  uint64_t v14 = *(void *)(v13 + 16 * v10 + 8);
  DWORD1(v25) = dword_1CDF536A4[(v14 & 0xF) - 8];
  BYTE8(v25) = (v14 & 0x10) != 0;
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v20.n128_i64[1] + 4);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v12, (uint64_t)&v22 + 8);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v19) - 2) <= 3) {
      DWORD1(v24) = dword_1CDF53620[DWORD2(v19) - 2];
    }
    DWORD2(v24) = 157;
  }
  long long v15 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v15;
  *(_OWORD *)(a4 + 128) = v27;
  long long v16 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v16;
  long long v17 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v17;
  __n128 result = v20;
  *(_OWORD *)a4 = v19;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1CD43AB9C(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 173;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x54u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v12 = sub_1CBDA6464(v7, 4u);
  int v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v21 = 0u;
  sub_1CBD85EB8(a1, (uint64_t)a2, v8, (uint64_t)&v21);
  uint64_t v13 = *((void *)a2 + 2);
  LOBYTE(v22) = (*(unsigned char *)(v13 + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v29 + 12, (int8x8_t *)((char *)&v26 + 12), (uint64_t)&v27 + 12);
  int v14 = *(_DWORD *)(v13 + 16 * v10 + 8);
  DWORD1(v27) = v14 & 0xF;
  BYTE8(v27) = (v14 & 0x10) != 0;
  sub_1CBD8C148(a1, (uint64_t)a2, v11, (uint64_t)&v22 + 12);
  sub_1CBD8C148(a1, (uint64_t)a2, v12, (uint64_t)&v24 + 8);
  if (*(_DWORD *)a1 >= 5u)
  {
    int v30 = 1;
    if ((*(unsigned char *)(*(void *)(a1 + 8) + 196) & 2) != 0)
    {
      uint64_t v20 = sub_1CBE52E8C(*(_DWORD *)a2);
      if ((v20 & 0xFF00000000) == 0 || v20 != 47) {
        int v30 = 0;
      }
    }
  }
  else if (*(_DWORD *)a1 != 4)
  {
    goto LABEL_8;
  }
  if ((DWORD2(v21) - 2) <= 3) {
    DWORD1(v26) = dword_1CDF53620[DWORD2(v21) - 2];
  }
  DWORD2(v26) = 156;
LABEL_8:
  long long v15 = v28;
  *(_OWORD *)(a4 + 96) = v27;
  *(_OWORD *)(a4 + 112) = v15;
  *(_OWORD *)(a4 + 128) = v29;
  *(_DWORD *)(a4 + 144) = v30;
  long long v16 = v24;
  *(_OWORD *)(a4 + 32) = v23;
  *(_OWORD *)(a4 + 48) = v16;
  long long v17 = v26;
  *(_OWORD *)(a4 + 64) = v25;
  *(_OWORD *)(a4 + 80) = v17;
  double result = *(double *)&v21;
  long long v19 = v22;
  *(_OWORD *)a4 = v21;
  *(_OWORD *)(a4 + 16) = v19;
  return result;
}

__n128 sub_1CD43AD94(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 176;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x42u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x43u);
  unsigned int v18 = sub_1CBDA6464(v7, 0x45u);
  uint64_t v29 = 0;
  unsigned int v12 = sub_1CBDA6464(v7, 0x46u);
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  __n128 v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v19);
  LOBYTE(v20) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v29 + 4, (int8x8_t *)&v26 + 1, (uint64_t)&v27);
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v20 + 12);
  if (DWORD1(v21) == 1) {
    *(void *)((char *)&v21 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v11, (uint64_t)&v22.n128_i64[1]);
  if (v23 == 1) {
    *(void *)&long long v23 = 0x200000001;
  }
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v18, (uint64_t)&v24 + 4);
  if ((*(void *)(*((void *)a2 + 2) + 16 * v12 + 8) & 7uLL) - 1 <= 4) {
    LODWORD(v29) = (*(_DWORD *)(*((void *)a2 + 2) + 16 * v12 + 8) & 7) - 1;
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v19) - 2) <= 3) {
      LODWORD(v26) = dword_1CDF53620[DWORD2(v19) - 2];
    }
    DWORD1(v26) = 159;
  }
  long long v13 = v28;
  *(_OWORD *)(a4 + 128) = v27;
  *(_OWORD *)(a4 + 144) = v13;
  *(void *)(a4 + 160) = v29;
  long long v14 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v14;
  long long v15 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v15;
  long long v16 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v16;
  __n128 result = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1CD43AFA4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 175;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x42u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x43u);
  unsigned int v18 = sub_1CBDA6464(v7, 0x45u);
  uint64_t v29 = 0;
  unsigned int v12 = sub_1CBDA6464(v7, 0x46u);
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  __n128 v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v19);
  LOBYTE(v20) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v29 + 4, (int8x8_t *)&v26 + 1, (uint64_t)&v27);
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v20 + 12);
  if (DWORD1(v21) == 1) {
    *(void *)((char *)&v21 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v11, (uint64_t)&v22.n128_i64[1]);
  if (v23 == 1) {
    *(void *)&long long v23 = 0x200000001;
  }
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v18, (uint64_t)&v24 + 4);
  if ((*(void *)(*((void *)a2 + 2) + 16 * v12 + 8) & 7uLL) - 1 <= 4) {
    LODWORD(v29) = (*(_DWORD *)(*((void *)a2 + 2) + 16 * v12 + 8) & 7) - 1;
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v19) - 2) <= 3) {
      LODWORD(v26) = dword_1CDF53620[DWORD2(v19) - 2];
    }
    DWORD1(v26) = 158;
  }
  long long v13 = v28;
  *(_OWORD *)(a4 + 128) = v27;
  *(_OWORD *)(a4 + 144) = v13;
  *(void *)(a4 + 160) = v29;
  long long v14 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v14;
  long long v15 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v15;
  long long v16 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v16;
  __n128 result = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

double sub_1CD43B1B4(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 52;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x42u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x43u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x44u);
  unsigned int v27 = sub_1CBDA6464(v7, 0x45u);
  unsigned int v28 = sub_1CBDA6464(v7, 0x19u);
  unsigned int v29 = sub_1CBDA6464(v7, 0x1Au);
  unsigned int v26 = sub_1CBDA6464(v7, 0x48u);
  int v45 = 0;
  unsigned int v13 = sub_1CBDA6464(v7, 0x46u);
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v30 = 0u;
  sub_1CBD8C5F0(a1, (uint64_t)a2, v8, (uint64_t)&v30);
  LOBYTE(v31) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v44 + 12, (int8x8_t *)&v41 + 1, (uint64_t)&v42 + 4);
  sub_1CBD88E08(a1, a2, v10, (uint64_t)&v35 + 12);
  if (DWORD1(v36) == 1) {
    *(void *)((char *)&v36 + 4) = 0x200000001;
  }
  sub_1CBD88E08(a1, a2, v11, (uint64_t)&v37 + 8);
  if (v38 == 1) {
    *(void *)&long long v38 = 0x200000001;
  }
  char v14 = *(unsigned char *)(*((void *)a2 + 2) + 16 * v12 + 8);
  BYTE4(v44) = (v14 & 4) != 0;
  BYTE5(v44) = (v14 & 2) != 0;
  BYTE6(v44) = v14 & 1;
  sub_1CBD86608(a1, (uint64_t)a2, v27, (uint64_t)&v39 + 4);
  sub_1CBD8C148(a1, (uint64_t)a2, v28, (uint64_t)&v32 + 4);
  sub_1CBD8C148(a1, (uint64_t)a2, v29, (uint64_t)&v34);
  uint64_t v15 = *((void *)a2 + 2);
  LODWORD(v42) = *(void *)(v15 + 16 * v26 + 8);
  unint64_t v16 = (*(void *)(v15 + 16 * v13 + 8) & 7) - 1;
  if (v16 <= 4) {
    DWORD2(v44) = v16;
  }
  if (*(_DWORD *)a1 >= 5u)
  {
    int v45 = 1;
    if ((*(unsigned char *)(*(void *)(a1 + 8) + 196) & 2) != 0)
    {
      uint64_t v25 = sub_1CBE52E8C(*(_DWORD *)a2);
      if ((v25 & 0xFF00000000) == 0 || v25 != 47) {
        int v45 = 0;
      }
    }
  }
  else if (*(_DWORD *)a1 != 4)
  {
    goto LABEL_14;
  }
  if ((DWORD2(v30) - 2) <= 3) {
    LODWORD(v41) = dword_1CDF53620[DWORD2(v30) - 2];
  }
  DWORD1(v41) = 57;
LABEL_14:
  long long v17 = v43;
  *(_OWORD *)(a4 + 192) = v42;
  *(_OWORD *)(a4 + 208) = v17;
  *(_OWORD *)(a4 + 224) = v44;
  *(_DWORD *)(a4 + 240) = v45;
  long long v18 = v39;
  *(_OWORD *)(a4 + 128) = v38;
  *(_OWORD *)(a4 + 144) = v18;
  long long v19 = v41;
  *(_OWORD *)(a4 + 160) = v40;
  *(_OWORD *)(a4 + 176) = v19;
  long long v20 = v35;
  *(_OWORD *)(a4 + 64) = v34;
  *(_OWORD *)(a4 + 80) = v20;
  long long v21 = v37;
  *(_OWORD *)(a4 + 96) = v36;
  *(_OWORD *)(a4 + 112) = v21;
  long long v22 = v31;
  *(_OWORD *)a4 = v30;
  *(_OWORD *)(a4 + 16) = v22;
  double result = *(double *)&v32;
  long long v24 = v33;
  *(_OWORD *)(a4 + 32) = v32;
  *(_OWORD *)(a4 + 48) = v24;
  return result;
}

__n128 sub_1CD43B4C8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 141;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x42u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x45u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x2Eu);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1) {
    *(void *)((char *)&v18 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v19 + 8);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v11 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v11, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 140;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43B658(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 138;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x42u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x45u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x2Eu);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1) {
    *(void *)((char *)&v18 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v19 + 8);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v11 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v11, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 137;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43B7E4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 143;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x42u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x45u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x2Eu);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1) {
    *(void *)((char *)&v18 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v19 + 8);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v11 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v11, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 142;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43B970(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 142;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x42u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x45u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x2Eu);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1) {
    *(void *)((char *)&v18 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v19 + 8);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v11 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v11, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 141;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43BB00(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 142;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x42u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x45u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x2Eu);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1) {
    *(void *)((char *)&v18 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v19 + 8);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v11 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v11, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 141;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43BC8C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 171;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x42u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x45u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x2Eu);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1) {
    *(void *)((char *)&v18 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v19 + 8);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v11 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v11, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 154;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43BE1C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 171;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x42u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x45u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x2Eu);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1) {
    *(void *)((char *)&v18 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v19 + 8);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v11 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v11, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 154;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43BFB0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 172;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x42u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x45u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x2Eu);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1) {
    *(void *)((char *)&v18 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v19 + 8);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v11 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v11, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 155;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43C13C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 178;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x42u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x45u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x2Eu);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1) {
    *(void *)((char *)&v18 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v19 + 8);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v11 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v11, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 161;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43C2C8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 177;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x42u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x45u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x2Eu);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1) {
    *(void *)((char *)&v18 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v19 + 8);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v11 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v11, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 160;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43C458(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 21;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x19u);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1CBD88900((uint64_t)a1, a2, v10, (uint64_t)&v19 + 8);
  if (v20 == 1) {
    *(void *)&long long v20 = 0x200000001;
  }
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v17.n128_i64[1] + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 26;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43C5E4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 124;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  memset(v20, 0, 60);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  __n128 v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  DWORD1(v20[1]) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 <= 3u)
  {
    *(void *)&long long v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  else
  {
    *((void *)&v18 + 1) = 0;
    long long v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD1(v20[0]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    DWORD2(v20[0]) = 123;
  }
  long long v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  long long v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43C778(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 125;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  memset(v20, 0, 60);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  __n128 v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  DWORD1(v20[1]) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 <= 3u)
  {
    *(void *)&long long v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  else
  {
    *((void *)&v18 + 1) = 0;
    long long v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD1(v20[0]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    DWORD2(v20[0]) = 131;
  }
  long long v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  long long v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43C90C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 126;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  memset(v20, 0, 60);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  __n128 v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  DWORD1(v20[1]) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 <= 3u)
  {
    *(void *)&long long v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  else
  {
    *((void *)&v18 + 1) = 0;
    long long v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD1(v20[0]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    DWORD2(v20[0]) = 136;
  }
  long long v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  long long v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43CAA0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 147;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  memset(v20, 0, 60);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  __n128 v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  DWORD1(v20[1]) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 <= 3u)
  {
    *(void *)&long long v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  else
  {
    *((void *)&v18 + 1) = 0;
    long long v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD1(v20[0]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    DWORD2(v20[0]) = 169;
  }
  long long v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  long long v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43CC34(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 148;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  memset(v20, 0, 60);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  __n128 v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  DWORD1(v20[1]) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 <= 3u)
  {
    *(void *)&long long v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  else
  {
    *((void *)&v18 + 1) = 0;
    long long v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD1(v20[0]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    DWORD2(v20[0]) = 177;
  }
  long long v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  long long v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43CDC8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 149;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  memset(v20, 0, 60);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  __n128 v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  DWORD1(v20[1]) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 <= 3u)
  {
    *(void *)&long long v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  else
  {
    *((void *)&v18 + 1) = 0;
    long long v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD1(v20[0]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    DWORD2(v20[0]) = 182;
  }
  long long v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  long long v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43CF5C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 124;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  memset(v20, 0, 60);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  __n128 v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  DWORD1(v20[1]) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 > 3u)
  {
    *((void *)&v18 + 1) = 0;
    long long v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD1(v20[0]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    DWORD2(v20[0]) = 123;
  }
  else
  {
    *(void *)&long long v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  long long v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  long long v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43D0F0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 125;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  memset(v20, 0, 60);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  __n128 v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  DWORD1(v20[1]) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 > 3u)
  {
    *((void *)&v18 + 1) = 0;
    long long v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD1(v20[0]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    DWORD2(v20[0]) = 131;
  }
  else
  {
    *(void *)&long long v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  long long v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  long long v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43D284(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 126;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  memset(v20, 0, 60);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  __n128 v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  DWORD1(v20[1]) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 > 3u)
  {
    *((void *)&v18 + 1) = 0;
    long long v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD1(v20[0]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    DWORD2(v20[0]) = 136;
  }
  else
  {
    *(void *)&long long v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  long long v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  long long v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43D418(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 147;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  memset(v20, 0, 60);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  __n128 v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  DWORD1(v20[1]) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 > 3u)
  {
    *((void *)&v18 + 1) = 0;
    long long v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD1(v20[0]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    DWORD2(v20[0]) = 169;
  }
  else
  {
    *(void *)&long long v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  long long v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  long long v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43D5AC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 148;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  memset(v20, 0, 60);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  __n128 v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  DWORD1(v20[1]) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 > 3u)
  {
    *((void *)&v18 + 1) = 0;
    long long v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD1(v20[0]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    DWORD2(v20[0]) = 177;
  }
  else
  {
    *(void *)&long long v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  long long v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  long long v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43D740(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 149;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  memset(v20, 0, 60);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  __n128 v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  DWORD1(v20[1]) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 > 3u)
  {
    *((void *)&v18 + 1) = 0;
    long long v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD1(v20[0]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    DWORD2(v20[0]) = 182;
  }
  else
  {
    *(void *)&long long v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  long long v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  long long v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43D8D4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 134;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  memset(v20, 0, 60);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  __n128 v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1) {
    DWORD2(v17) = HIDWORD(v15);
  }
  DWORD1(v20[1]) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 <= 3u)
  {
    *(void *)&long long v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  else
  {
    *((void *)&v18 + 1) = 0;
    long long v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD1(v20[0]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    DWORD2(v20[0]) = 132;
  }
  long long v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  long long v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43DA80(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 136;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  memset(v20, 0, 60);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  __n128 v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  if (DWORD1(v17) == 1) {
    *(void *)((char *)&v17 + 4) = 0x200000001;
  }
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1) {
    DWORD2(v17) = HIDWORD(v15);
  }
  DWORD1(v20[1]) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 <= 3u)
  {
    *(void *)&long long v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  else
  {
    *((void *)&v18 + 1) = 0;
    long long v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD1(v20[0]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    DWORD2(v20[0]) = 134;
  }
  long long v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  long long v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43DC44(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 135;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  memset(v20, 0, 60);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  __n128 v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1) {
    DWORD2(v17) = HIDWORD(v15);
  }
  DWORD1(v20[1]) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 <= 3u)
  {
    *(void *)&long long v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  else
  {
    *((void *)&v18 + 1) = 0;
    long long v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD1(v20[0]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    DWORD2(v20[0]) = 133;
  }
  long long v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  long long v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43DDF0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 137;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  memset(v20, 0, 60);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  __n128 v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  if (DWORD1(v17) == 1) {
    *(void *)((char *)&v17 + 4) = 0x200000001;
  }
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1) {
    DWORD2(v17) = HIDWORD(v15);
  }
  DWORD1(v20[1]) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 <= 3u)
  {
    *(void *)&long long v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  else
  {
    *((void *)&v18 + 1) = 0;
    long long v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD1(v20[0]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    DWORD2(v20[0]) = 135;
  }
  long long v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  long long v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43DFB4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 160;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  memset(v20, 0, 60);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  __n128 v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  if (DWORD1(v17) == 1) {
    *(void *)((char *)&v17 + 4) = 0x200000001;
  }
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1) {
    DWORD2(v17) = HIDWORD(v15);
  }
  DWORD1(v20[1]) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 <= 3u)
  {
    *(void *)&long long v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  else
  {
    *((void *)&v18 + 1) = 0;
    long long v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD1(v20[0]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    DWORD2(v20[0]) = 181;
  }
  long long v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  long long v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43E178(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 133;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  memset(v20, 0, 60);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  __n128 v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1) {
    DWORD2(v17) = HIDWORD(v15);
  }
  DWORD1(v20[1]) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 > 3u)
  {
    *((void *)&v18 + 1) = 0;
    long long v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD1(v20[0]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    DWORD2(v20[0]) = 130;
  }
  else
  {
    *(void *)&long long v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  long long v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  long long v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43E320(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 134;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  memset(v20, 0, 60);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  __n128 v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1) {
    DWORD2(v17) = HIDWORD(v15);
  }
  DWORD1(v20[1]) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 > 3u)
  {
    *((void *)&v18 + 1) = 0;
    long long v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD1(v20[0]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    DWORD2(v20[0]) = 132;
  }
  else
  {
    *(void *)&long long v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  long long v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  long long v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43E4C8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 136;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  memset(v20, 0, 60);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  __n128 v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  if (DWORD1(v17) == 1) {
    *(void *)((char *)&v17 + 4) = 0x200000001;
  }
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1) {
    DWORD2(v17) = HIDWORD(v15);
  }
  DWORD1(v20[1]) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 > 3u)
  {
    *((void *)&v18 + 1) = 0;
    long long v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD1(v20[0]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    DWORD2(v20[0]) = 134;
  }
  else
  {
    *(void *)&long long v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  long long v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  long long v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43E684(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 135;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  memset(v20, 0, 60);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  __n128 v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1) {
    DWORD2(v17) = HIDWORD(v15);
  }
  DWORD1(v20[1]) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 > 3u)
  {
    *((void *)&v18 + 1) = 0;
    long long v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD1(v20[0]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    DWORD2(v20[0]) = 133;
  }
  else
  {
    *(void *)&long long v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  long long v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  long long v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43E82C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 137;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  memset(v20, 0, 60);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  __n128 v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  if (DWORD1(v17) == 1) {
    *(void *)((char *)&v17 + 4) = 0x200000001;
  }
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1) {
    DWORD2(v17) = HIDWORD(v15);
  }
  DWORD1(v20[1]) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 > 3u)
  {
    *((void *)&v18 + 1) = 0;
    long long v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD1(v20[0]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    DWORD2(v20[0]) = 135;
  }
  else
  {
    *(void *)&long long v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  long long v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  long long v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43E9E8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 156;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  memset(v20, 0, 60);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  __n128 v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1) {
    DWORD2(v17) = HIDWORD(v15);
  }
  DWORD1(v20[1]) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 > 3u)
  {
    *((void *)&v18 + 1) = 0;
    long long v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD1(v20[0]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    DWORD2(v20[0]) = 176;
  }
  else
  {
    *(void *)&long long v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  long long v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  long long v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43EB90(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 157;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  memset(v20, 0, 60);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  __n128 v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1) {
    DWORD2(v17) = HIDWORD(v15);
  }
  DWORD1(v20[1]) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 > 3u)
  {
    *((void *)&v18 + 1) = 0;
    long long v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD1(v20[0]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    DWORD2(v20[0]) = 178;
  }
  else
  {
    *(void *)&long long v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  long long v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  long long v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43ED38(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 159;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  memset(v20, 0, 60);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  __n128 v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  if (DWORD1(v17) == 1) {
    *(void *)((char *)&v17 + 4) = 0x200000001;
  }
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1) {
    DWORD2(v17) = HIDWORD(v15);
  }
  DWORD1(v20[1]) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 > 3u)
  {
    *((void *)&v18 + 1) = 0;
    long long v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD1(v20[0]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    DWORD2(v20[0]) = 180;
  }
  else
  {
    *(void *)&long long v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  long long v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  long long v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43EEF4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 158;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  memset(v20, 0, 60);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  __n128 v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1) {
    DWORD2(v17) = HIDWORD(v15);
  }
  DWORD1(v20[1]) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 > 3u)
  {
    *((void *)&v18 + 1) = 0;
    long long v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD1(v20[0]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    DWORD2(v20[0]) = 179;
  }
  else
  {
    *(void *)&long long v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  long long v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  long long v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43F09C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 160;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  memset(v20, 0, 60);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  __n128 v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  if (DWORD1(v17) == 1) {
    *(void *)((char *)&v17 + 4) = 0x200000001;
  }
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1) {
    DWORD2(v17) = HIDWORD(v15);
  }
  DWORD1(v20[1]) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 > 3u)
  {
    *((void *)&v18 + 1) = 0;
    long long v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD1(v20[0]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    DWORD2(v20[0]) = 181;
  }
  else
  {
    *(void *)&long long v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  long long v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  long long v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD43F258(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 127;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  __n128 v16 = 0u;
  memset(v17, 0, sizeof(v17));
  long long v15 = 0u;
  sub_1CBD9B5F4((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD8F254((uint64_t)a1, a2, v9, (uint64_t)v17);
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20 + 12, (int8x8_t *)&v18, (uint64_t)&v18 + 12);
  DWORD2(v18) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 > 3u)
  {
    memset((char *)&v17[1] + 12, 0, 28);
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD2(v17[3]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    HIDWORD(v17[3]) = 124;
  }
  else
  {
    *(void *)((char *)&v17[2] + 4) = 0x100000001;
    WORD6(v17[1]) = 1;
  }
  long long v11 = v19;
  *(_OWORD *)(a4 + 96) = v18;
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 128) = v20;
  long long v12 = v17[1];
  *(_OWORD *)(a4 + 32) = v17[0];
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v17[3];
  *(_OWORD *)(a4 + 64) = v17[2];
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1CD43F3FC(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 129;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  sub_1CBD8C5F0(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1CBD8F254(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  uint64_t v11 = *(unsigned int *)a2;
  HIDWORD(v25) = sub_1CBDB2780(v11, 41, 0) == 67;
  int v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 < 4u)
  {
    *((void *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  else
  {
    long long v23 = 0uLL;
    DWORD2(v24) = 0;
    *(void *)&long long v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(unsigned char *)(*(void *)(a1 + 8) + 196) & 2) != 0)
      {
        uint64_t v13 = sub_1CBE52E8C(v11);
        if ((v13 & 0xFF00000000) == 0 || v13 != 47) {
          HIDWORD(v28) = 0;
        }
      }
    }
    if ((DWORD2(v19) - 2) <= 3) {
      HIDWORD(v24) = dword_1CDF53620[DWORD2(v19) - 2];
    }
    LODWORD(v25) = 126;
  }
  long long v14 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v14;
  *(_OWORD *)(a4 + 128) = v27;
  *(void *)(a4 + 144) = v28;
  long long v15 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v15;
  long long v16 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v16;
  double result = *(double *)&v19;
  long long v18 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v18;
  return result;
}

__n128 sub_1CD43F5EC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 128;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  __n128 v16 = 0u;
  memset(v17, 0, sizeof(v17));
  long long v15 = 0u;
  sub_1CBD9B5F4((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD8F254((uint64_t)a1, a2, v9, (uint64_t)v17);
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20 + 12, (int8x8_t *)&v18, (uint64_t)&v18 + 12);
  DWORD2(v18) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 <= 3u)
  {
    *(void *)((char *)&v17[2] + 4) = 0x100000001;
    WORD6(v17[1]) = 1;
  }
  else
  {
    memset((char *)&v17[1] + 12, 0, 28);
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD2(v17[3]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    HIDWORD(v17[3]) = 125;
  }
  long long v11 = v19;
  *(_OWORD *)(a4 + 96) = v18;
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 128) = v20;
  long long v12 = v17[1];
  *(_OWORD *)(a4 + 32) = v17[0];
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v17[3];
  *(_OWORD *)(a4 + 64) = v17[2];
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1CD43F790(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 130;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  sub_1CBD8C5F0(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1CBD8F254(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  uint64_t v11 = *(unsigned int *)a2;
  HIDWORD(v25) = sub_1CBDB2780(v11, 41, 0) == 67;
  int v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 < 4u)
  {
    *((void *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  else
  {
    long long v23 = 0uLL;
    DWORD2(v24) = 0;
    *(void *)&long long v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(unsigned char *)(*(void *)(a1 + 8) + 196) & 2) != 0)
      {
        uint64_t v13 = sub_1CBE52E8C(v11);
        if ((v13 & 0xFF00000000) == 0 || v13 != 47) {
          HIDWORD(v28) = 0;
        }
      }
    }
    if ((DWORD2(v19) - 2) <= 3) {
      HIDWORD(v24) = dword_1CDF53620[DWORD2(v19) - 2];
    }
    LODWORD(v25) = 127;
  }
  long long v14 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v14;
  *(_OWORD *)(a4 + 128) = v27;
  *(void *)(a4 + 144) = v28;
  long long v15 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v15;
  long long v16 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v16;
  double result = *(double *)&v19;
  long long v18 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v18;
  return result;
}

double sub_1CD43F980(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 131;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  sub_1CBD8C5F0(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1CBD8F254(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  uint64_t v11 = *(unsigned int *)a2;
  HIDWORD(v25) = sub_1CBDB2780(v11, 41, 0) == 67;
  int v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 < 4u)
  {
    *((void *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  else
  {
    long long v23 = 0uLL;
    DWORD2(v24) = 0;
    *(void *)&long long v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(unsigned char *)(*(void *)(a1 + 8) + 196) & 2) != 0)
      {
        uint64_t v13 = sub_1CBE52E8C(v11);
        if ((v13 & 0xFF00000000) == 0 || v13 != 47) {
          HIDWORD(v28) = 0;
        }
      }
    }
    if ((DWORD2(v19) - 2) <= 3) {
      HIDWORD(v24) = dword_1CDF53620[DWORD2(v19) - 2];
    }
    LODWORD(v25) = 128;
  }
  long long v14 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v14;
  *(_OWORD *)(a4 + 128) = v27;
  *(void *)(a4 + 144) = v28;
  long long v15 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v15;
  long long v16 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v16;
  double result = *(double *)&v19;
  long long v18 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v18;
  return result;
}

double sub_1CD43FB70(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 132;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  sub_1CBD8C5F0(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1CBD8F254(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  uint64_t v11 = *(unsigned int *)a2;
  HIDWORD(v25) = sub_1CBDB2780(v11, 41, 0) == 67;
  int v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 < 4u)
  {
    *((void *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  else
  {
    long long v23 = 0uLL;
    DWORD2(v24) = 0;
    *(void *)&long long v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(unsigned char *)(*(void *)(a1 + 8) + 196) & 2) != 0)
      {
        uint64_t v13 = sub_1CBE52E8C(v11);
        if ((v13 & 0xFF00000000) == 0 || v13 != 47) {
          HIDWORD(v28) = 0;
        }
      }
    }
    if ((DWORD2(v19) - 2) <= 3) {
      HIDWORD(v24) = dword_1CDF53620[DWORD2(v19) - 2];
    }
    LODWORD(v25) = 129;
  }
  long long v14 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v14;
  *(_OWORD *)(a4 + 128) = v27;
  *(void *)(a4 + 144) = v28;
  long long v15 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v15;
  long long v16 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v16;
  double result = *(double *)&v19;
  long long v18 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v18;
  return result;
}

double sub_1CD43FD60(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 129;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  sub_1CBD8C5F0(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1CBD8F254(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  uint64_t v11 = *(unsigned int *)a2;
  HIDWORD(v25) = sub_1CBDB2780(v11, 41, 0) == 67;
  int v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 4u)
  {
    long long v23 = 0uLL;
    DWORD2(v24) = 0;
    *(void *)&long long v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(unsigned char *)(*(void *)(a1 + 8) + 196) & 2) != 0)
      {
        uint64_t v18 = sub_1CBE52E8C(v11);
        if ((v18 & 0xFF00000000) == 0 || v18 != 47) {
          HIDWORD(v28) = 0;
        }
      }
    }
    if ((DWORD2(v19) - 2) <= 3) {
      HIDWORD(v24) = dword_1CDF53620[DWORD2(v19) - 2];
    }
    LODWORD(v25) = 126;
  }
  else
  {
    *((void *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  long long v13 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v13;
  *(_OWORD *)(a4 + 128) = v27;
  *(void *)(a4 + 144) = v28;
  long long v14 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v14;
  long long v15 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v15;
  double result = *(double *)&v19;
  long long v17 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v17;
  return result;
}

double sub_1CD43FF54(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 130;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  sub_1CBD8C5F0(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1CBD8F254(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  uint64_t v11 = *(unsigned int *)a2;
  HIDWORD(v25) = sub_1CBDB2780(v11, 41, 0) == 67;
  int v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 4u)
  {
    long long v23 = 0uLL;
    DWORD2(v24) = 0;
    *(void *)&long long v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(unsigned char *)(*(void *)(a1 + 8) + 196) & 2) != 0)
      {
        uint64_t v18 = sub_1CBE52E8C(v11);
        if ((v18 & 0xFF00000000) == 0 || v18 != 47) {
          HIDWORD(v28) = 0;
        }
      }
    }
    if ((DWORD2(v19) - 2) <= 3) {
      HIDWORD(v24) = dword_1CDF53620[DWORD2(v19) - 2];
    }
    LODWORD(v25) = 127;
  }
  else
  {
    *((void *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  long long v13 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v13;
  *(_OWORD *)(a4 + 128) = v27;
  *(void *)(a4 + 144) = v28;
  long long v14 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v14;
  long long v15 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v15;
  double result = *(double *)&v19;
  long long v17 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v17;
  return result;
}

double sub_1CD440148(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 131;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  sub_1CBD8C5F0(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1CBD8F254(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  uint64_t v11 = *(unsigned int *)a2;
  HIDWORD(v25) = sub_1CBDB2780(v11, 41, 0) == 67;
  int v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 4u)
  {
    long long v23 = 0uLL;
    DWORD2(v24) = 0;
    *(void *)&long long v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(unsigned char *)(*(void *)(a1 + 8) + 196) & 2) != 0)
      {
        uint64_t v18 = sub_1CBE52E8C(v11);
        if ((v18 & 0xFF00000000) == 0 || v18 != 47) {
          HIDWORD(v28) = 0;
        }
      }
    }
    if ((DWORD2(v19) - 2) <= 3) {
      HIDWORD(v24) = dword_1CDF53620[DWORD2(v19) - 2];
    }
    LODWORD(v25) = 128;
  }
  else
  {
    *((void *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  long long v13 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v13;
  *(_OWORD *)(a4 + 128) = v27;
  *(void *)(a4 + 144) = v28;
  long long v14 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v14;
  long long v15 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v15;
  double result = *(double *)&v19;
  long long v17 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v17;
  return result;
}

double sub_1CD44033C(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 132;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  sub_1CBD8C5F0(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1CBD8F254(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  uint64_t v11 = *(unsigned int *)a2;
  HIDWORD(v25) = sub_1CBDB2780(v11, 41, 0) == 67;
  int v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 4u)
  {
    long long v23 = 0uLL;
    DWORD2(v24) = 0;
    *(void *)&long long v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(unsigned char *)(*(void *)(a1 + 8) + 196) & 2) != 0)
      {
        uint64_t v18 = sub_1CBE52E8C(v11);
        if ((v18 & 0xFF00000000) == 0 || v18 != 47) {
          HIDWORD(v28) = 0;
        }
      }
    }
    if ((DWORD2(v19) - 2) <= 3) {
      HIDWORD(v24) = dword_1CDF53620[DWORD2(v19) - 2];
    }
    LODWORD(v25) = 129;
  }
  else
  {
    *((void *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  long long v13 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v13;
  *(_OWORD *)(a4 + 128) = v27;
  *(void *)(a4 + 144) = v28;
  long long v14 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v14;
  long long v15 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v15;
  double result = *(double *)&v19;
  long long v17 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v17;
  return result;
}

__n128 sub_1CD440530(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 150;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  __n128 v16 = 0u;
  memset(v17, 0, sizeof(v17));
  long long v15 = 0u;
  sub_1CBD9B5F4((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD8F254((uint64_t)a1, a2, v9, (uint64_t)v17);
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20 + 12, (int8x8_t *)&v18, (uint64_t)&v18 + 12);
  DWORD2(v18) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 <= 3u)
  {
    *(void *)((char *)&v17[2] + 4) = 0x100000001;
    WORD6(v17[1]) = 1;
  }
  else
  {
    memset((char *)&v17[1] + 12, 0, 28);
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD2(v17[3]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    HIDWORD(v17[3]) = 170;
  }
  long long v11 = v19;
  *(_OWORD *)(a4 + 96) = v18;
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 128) = v20;
  long long v12 = v17[1];
  *(_OWORD *)(a4 + 32) = v17[0];
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v17[3];
  *(_OWORD *)(a4 + 64) = v17[2];
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1CD4406D4(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 152;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  sub_1CBD8C5F0(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1CBD8F254(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  uint64_t v11 = *(unsigned int *)a2;
  HIDWORD(v25) = sub_1CBDB2780(v11, 41, 0) == 67;
  int v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 < 4u)
  {
    *((void *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  else
  {
    long long v23 = 0uLL;
    DWORD2(v24) = 0;
    *(void *)&long long v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(unsigned char *)(*(void *)(a1 + 8) + 196) & 2) != 0)
      {
        uint64_t v13 = sub_1CBE52E8C(v11);
        if ((v13 & 0xFF00000000) == 0 || v13 != 47) {
          HIDWORD(v28) = 0;
        }
      }
    }
    if ((DWORD2(v19) - 2) <= 3) {
      HIDWORD(v24) = dword_1CDF53620[DWORD2(v19) - 2];
    }
    LODWORD(v25) = 172;
  }
  long long v14 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v14;
  *(_OWORD *)(a4 + 128) = v27;
  *(void *)(a4 + 144) = v28;
  long long v15 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v15;
  long long v16 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v16;
  double result = *(double *)&v19;
  long long v18 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v18;
  return result;
}

__n128 sub_1CD4408C4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 151;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  long long v19 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  __n128 v16 = 0u;
  memset(v17, 0, sizeof(v17));
  long long v15 = 0u;
  sub_1CBD9B5F4((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1CBD8F254((uint64_t)a1, a2, v9, (uint64_t)v17);
  v16.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v10, (BOOL *)&v20 + 12, (int8x8_t *)&v18, (uint64_t)&v18 + 12);
  DWORD2(v18) = sub_1CBDB2780(*(unsigned int *)a2, 41, 0) == 67;
  if (*a1 > 3u)
  {
    memset((char *)&v17[1] + 12, 0, 28);
    if ((DWORD2(v15) - 2) <= 3) {
      DWORD2(v17[3]) = dword_1CDF53620[DWORD2(v15) - 2];
    }
    HIDWORD(v17[3]) = 171;
  }
  else
  {
    *(void *)((char *)&v17[2] + 4) = 0x100000001;
    WORD6(v17[1]) = 1;
  }
  long long v11 = v19;
  *(_OWORD *)(a4 + 96) = v18;
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 128) = v20;
  long long v12 = v17[1];
  *(_OWORD *)(a4 + 32) = v17[0];
  *(_OWORD *)(a4 + 48) = v12;
  long long v13 = v17[3];
  *(_OWORD *)(a4 + 64) = v17[2];
  *(_OWORD *)(a4 + 80) = v13;
  __n128 result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1CD440A68(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 153;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  sub_1CBD8C5F0(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1CBD8F254(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  uint64_t v11 = *(unsigned int *)a2;
  HIDWORD(v25) = sub_1CBDB2780(v11, 41, 0) == 67;
  int v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 < 4u)
  {
    *((void *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  else
  {
    long long v23 = 0uLL;
    DWORD2(v24) = 0;
    *(void *)&long long v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(unsigned char *)(*(void *)(a1 + 8) + 196) & 2) != 0)
      {
        uint64_t v13 = sub_1CBE52E8C(v11);
        if ((v13 & 0xFF00000000) == 0 || v13 != 47) {
          HIDWORD(v28) = 0;
        }
      }
    }
    if ((DWORD2(v19) - 2) <= 3) {
      HIDWORD(v24) = dword_1CDF53620[DWORD2(v19) - 2];
    }
    LODWORD(v25) = 173;
  }
  long long v14 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v14;
  *(_OWORD *)(a4 + 128) = v27;
  *(void *)(a4 + 144) = v28;
  long long v15 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v15;
  long long v16 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v16;
  double result = *(double *)&v19;
  long long v18 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v18;
  return result;
}

double sub_1CD440C58(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 154;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  sub_1CBD8C5F0(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1CBD8F254(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  uint64_t v11 = *(unsigned int *)a2;
  HIDWORD(v25) = sub_1CBDB2780(v11, 41, 0) == 67;
  int v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 < 4u)
  {
    *((void *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  else
  {
    long long v23 = 0uLL;
    DWORD2(v24) = 0;
    *(void *)&long long v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(unsigned char *)(*(void *)(a1 + 8) + 196) & 2) != 0)
      {
        uint64_t v13 = sub_1CBE52E8C(v11);
        if ((v13 & 0xFF00000000) == 0 || v13 != 47) {
          HIDWORD(v28) = 0;
        }
      }
    }
    if ((DWORD2(v19) - 2) <= 3) {
      HIDWORD(v24) = dword_1CDF53620[DWORD2(v19) - 2];
    }
    LODWORD(v25) = 174;
  }
  long long v14 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v14;
  *(_OWORD *)(a4 + 128) = v27;
  *(void *)(a4 + 144) = v28;
  long long v15 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v15;
  long long v16 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v16;
  double result = *(double *)&v19;
  long long v18 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v18;
  return result;
}

double sub_1CD440E48(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 155;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  sub_1CBD8C5F0(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1CBD8F254(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  uint64_t v11 = *(unsigned int *)a2;
  HIDWORD(v25) = sub_1CBDB2780(v11, 41, 0) == 67;
  int v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 < 4u)
  {
    *((void *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  else
  {
    long long v23 = 0uLL;
    DWORD2(v24) = 0;
    *(void *)&long long v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(unsigned char *)(*(void *)(a1 + 8) + 196) & 2) != 0)
      {
        uint64_t v13 = sub_1CBE52E8C(v11);
        if ((v13 & 0xFF00000000) == 0 || v13 != 47) {
          HIDWORD(v28) = 0;
        }
      }
    }
    if ((DWORD2(v19) - 2) <= 3) {
      HIDWORD(v24) = dword_1CDF53620[DWORD2(v19) - 2];
    }
    LODWORD(v25) = 175;
  }
  long long v14 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v14;
  *(_OWORD *)(a4 + 128) = v27;
  *(void *)(a4 + 144) = v28;
  long long v15 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v15;
  long long v16 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v16;
  double result = *(double *)&v19;
  long long v18 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v18;
  return result;
}

double sub_1CD441038(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 153;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  sub_1CBD8C5F0(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1CBD8F254(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  uint64_t v11 = *(unsigned int *)a2;
  HIDWORD(v25) = sub_1CBDB2780(v11, 41, 0) == 67;
  int v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 4u)
  {
    long long v23 = 0uLL;
    DWORD2(v24) = 0;
    *(void *)&long long v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(unsigned char *)(*(void *)(a1 + 8) + 196) & 2) != 0)
      {
        uint64_t v18 = sub_1CBE52E8C(v11);
        if ((v18 & 0xFF00000000) == 0 || v18 != 47) {
          HIDWORD(v28) = 0;
        }
      }
    }
    if ((DWORD2(v19) - 2) <= 3) {
      HIDWORD(v24) = dword_1CDF53620[DWORD2(v19) - 2];
    }
    LODWORD(v25) = 173;
  }
  else
  {
    *((void *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  long long v13 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v13;
  *(_OWORD *)(a4 + 128) = v27;
  *(void *)(a4 + 144) = v28;
  long long v14 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v14;
  long long v15 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v15;
  double result = *(double *)&v19;
  long long v17 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v17;
  return result;
}

double sub_1CD44122C(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 154;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  sub_1CBD8C5F0(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1CBD8F254(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  uint64_t v11 = *(unsigned int *)a2;
  HIDWORD(v25) = sub_1CBDB2780(v11, 41, 0) == 67;
  int v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 4u)
  {
    long long v23 = 0uLL;
    DWORD2(v24) = 0;
    *(void *)&long long v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(unsigned char *)(*(void *)(a1 + 8) + 196) & 2) != 0)
      {
        uint64_t v18 = sub_1CBE52E8C(v11);
        if ((v18 & 0xFF00000000) == 0 || v18 != 47) {
          HIDWORD(v28) = 0;
        }
      }
    }
    if ((DWORD2(v19) - 2) <= 3) {
      HIDWORD(v24) = dword_1CDF53620[DWORD2(v19) - 2];
    }
    LODWORD(v25) = 174;
  }
  else
  {
    *((void *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  long long v13 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v13;
  *(_OWORD *)(a4 + 128) = v27;
  *(void *)(a4 + 144) = v28;
  long long v14 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v14;
  long long v15 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v15;
  double result = *(double *)&v19;
  long long v17 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v17;
  return result;
}

double sub_1CD441420(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 155;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Eu);
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  sub_1CBD8C5F0(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1CBD8F254(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  uint64_t v11 = *(unsigned int *)a2;
  HIDWORD(v25) = sub_1CBDB2780(v11, 41, 0) == 67;
  int v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 4u)
  {
    long long v23 = 0uLL;
    DWORD2(v24) = 0;
    *(void *)&long long v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(unsigned char *)(*(void *)(a1 + 8) + 196) & 2) != 0)
      {
        uint64_t v18 = sub_1CBE52E8C(v11);
        if ((v18 & 0xFF00000000) == 0 || v18 != 47) {
          HIDWORD(v28) = 0;
        }
      }
    }
    if ((DWORD2(v19) - 2) <= 3) {
      HIDWORD(v24) = dword_1CDF53620[DWORD2(v19) - 2];
    }
    LODWORD(v25) = 175;
  }
  else
  {
    *((void *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  long long v13 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v13;
  *(_OWORD *)(a4 + 128) = v27;
  *(void *)(a4 + 144) = v28;
  long long v14 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v14;
  long long v15 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v15;
  double result = *(double *)&v19;
  long long v17 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v17;
  return result;
}

double sub_1CD441614(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  *a3 = 145;
  unsigned int v7 = sub_1CBDA6464(*a2, 0x2Eu);
  long long v11 = 0u;
  long long v12 = 0u;
  long long v10 = 0u;
  sub_1CBD85A80(a1, (uint64_t)a2, v7, (BOOL *)&v12 + 12, (int8x8_t *)((char *)&v10 + 4), (unint64_t)&v10 | 0xC);
  long long v8 = v11;
  *a4 = v10;
  a4[1] = v8;
  double result = *(double *)&v12;
  a4[2] = v12;
  return result;
}

__n128 sub_1CD44169C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 196;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v9 = sub_1CBDA6464(v7, 0x62u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x63u);
  long long v16 = 0u;
  memset(v17, 0, 60);
  long long v14 = 0u;
  long long v15 = 0u;
  sub_1CBD85A80(a1, (uint64_t)a2, v8, (BOOL *)&v17[3] + 8, (int8x8_t *)&v14 + 1, (uint64_t)&v15);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)v17);
  sub_1CBD88900((uint64_t)a1, a2, v10, (uint64_t)&v17[1] + 12);
  if (*a1 >= 4u) {
    *(void *)&long long v14 = 0xC100000002;
  }
  long long v11 = v17[2];
  *(_OWORD *)(a4 + 64) = v17[1];
  *(_OWORD *)(a4 + 80) = v11;
  *(_OWORD *)(a4 + 92) = *(_OWORD *)((char *)&v17[2] + 12);
  long long v12 = v15;
  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v12;
  __n128 result = (__n128)v17[0];
  *(_OWORD *)(a4 + 32) = v16;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

double sub_1CD4417B8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 197;
  unsigned int v7 = sub_1CBDA6464(*a2, 0x2Eu);
  *(_DWORD *)long long v13 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v10 = 0u;
  sub_1CBD85A80(a1, (uint64_t)a2, v7, v13, (int8x8_t *)&v10 + 1, (uint64_t)&v11);
  if (*a1 >= 4u) {
    *(void *)&long long v10 = 0xC200000002;
  }
  long long v8 = v11;
  *(_OWORD *)a4 = v10;
  *(_OWORD *)(a4 + 16) = v8;
  double result = *(double *)&v12;
  *(_OWORD *)(a4 + 32) = v12;
  *(_DWORD *)(a4 + 48) = *(_DWORD *)v13;
  return result;
}

__n128 sub_1CD441864(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 201;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v9 = sub_1CBDA6464(v7, 0x18u);
  long long v13 = 0u;
  long long v14 = 0u;
  memset(v12, 0, sizeof(v12));
  sub_1CBD85A80(a1, (uint64_t)a2, v8, (BOOL *)&v14 + 12, (int8x8_t *)((char *)&v12[2] + 4), (uint64_t)&v12[2] + 12);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)v12);
  if (*a1 >= 4u) {
    *(void *)((char *)&v12[1] + 12) = 0xC600000002;
  }
  long long v10 = v13;
  *(_OWORD *)(a4 + 32) = v12[2];
  *(_OWORD *)(a4 + 48) = v10;
  *(_OWORD *)(a4 + 64) = v14;
  __n128 result = (__n128)v12[1];
  *(_OWORD *)a4 = v12[0];
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD441944(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 108;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v9 = sub_1CBDA6464(v7, 0x67u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x68u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x69u);
  memset(&v18[8], 0, 64);
  sub_1CBD85A80(a1, (uint64_t)a2, v8, &v18[64], (int8x8_t *)&v18[20], (uint64_t)&v18[28]);
  uint64_t v12 = *((void *)a2 + 2);
  if (*(unsigned char *)(v12 + 16 * v9) == 5) {
    int v13 = 0;
  }
  else {
    int v13 = *(_DWORD *)(v12 + 16 * v9 + 8);
  }
  *(_DWORD *)&v18[60] = v13;
  if (*(unsigned char *)(v12 + 16 * v10) == 5) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *(void *)(v12 + 16 * v10 + 8) & 0xFFFFFFFFFFFFLL;
  }
  *(void *)uint64_t v18 = v14;
  if (*(unsigned char *)(v12 + 16 * v11) == 5) {
    int v15 = 0;
  }
  else {
    int v15 = *(_DWORD *)(v12 + 16 * v11 + 8);
  }
  *(_DWORD *)&v18[8] = v15;
  if (*a1 >= 4u) {
    *(void *)&v18[12] = 0x6B00000003;
  }
  long long v16 = *(_OWORD *)&v18[48];
  *(_OWORD *)(a4 + 32) = *(_OWORD *)&v18[32];
  *(_OWORD *)(a4 + 48) = v16;
  *(void *)(a4 + 64) = *(void *)&v18[64];
  __n128 result = *(__n128 *)&v18[16];
  *(_OWORD *)a4 = *(_OWORD *)v18;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD441AC0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 182;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v9 = sub_1CBDA6464(v7, 0x76u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x77u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x78u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x79u);
  unsigned int v13 = sub_1CBDA6464(v7, 0x7Au);
  unsigned int v25 = sub_1CBDA6464(v7, 0x7Bu);
  unsigned int v14 = sub_1CBDA6464(v7, 0x7Cu);
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  __n128 v27 = 0u;
  sub_1CBD85A80(a1, (uint64_t)a2, v8, (BOOL *)&v30 + 6, (int8x8_t *)&v26 + 1, (uint64_t)&v27);
  uint64_t v15 = *((void *)a2 + 2);
  if (*(unsigned char *)(v15 + 16 * v9) == 5) {
    int v16 = 0;
  }
  else {
    int v16 = *(_DWORD *)(v15 + 16 * v9 + 8);
  }
  DWORD1(v29) = v16;
  if (*(unsigned char *)(v15 + 16 * v10) == 5) {
    int v17 = 0;
  }
  else {
    int v17 = *(_DWORD *)(v15 + 16 * v10 + 8);
  }
  DWORD2(v29) = v17;
  if (*(unsigned char *)(v15 + 16 * v11) == 5) {
    int v18 = 0;
  }
  else {
    int v18 = *(_DWORD *)(v15 + 16 * v11 + 8);
  }
  HIDWORD(v29) = v18;
  if (*(unsigned char *)(v15 + 16 * v12) == 5) {
    char v19 = 0;
  }
  else {
    char v19 = *(unsigned char *)(v15 + 16 * v12 + 8);
  }
  LOBYTE(v30) = v19;
  BOOL v20 = *(unsigned char *)(v15 + 16 * v13) != 5 && *(void *)(v15 + 16 * v13 + 8) != 0;
  BYTE5(v30) = v20;
  BOOL v21 = *(unsigned char *)(v15 + 16 * v25) != 5 && *(void *)(v15 + 16 * v25 + 8) != 0;
  BYTE4(v30) = v21;
  if (*(unsigned char *)(v15 + 16 * v14) == 5) {
    __int16 v22 = 0;
  }
  else {
    __int16 v22 = *(_WORD *)(v15 + 16 * v14 + 8);
  }
  LOWORD(v29) = v22;
  if (*a1 >= 4u) {
    *(void *)&long long v26 = 0xA500000003;
  }
  long long v23 = v29;
  *(_OWORD *)(a4 + 32) = v28;
  *(_OWORD *)(a4 + 48) = v23;
  *(void *)(a4 + 64) = v30;
  __n128 result = v27;
  *(_OWORD *)a4 = v26;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD441D48(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 183;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v9 = sub_1CBDA6464(v7, 0x7Du);
  unsigned int v10 = sub_1CBDA6464(v7, 0x7Eu);
  unsigned int v11 = sub_1CBDA6464(v7, 0x7Fu);
  unsigned int v12 = sub_1CBDA6464(v7, 0x80u);
  unsigned int v13 = sub_1CBDA6464(v7, 0x81u);
  int v26 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  __n128 v23 = 0u;
  sub_1CBD85A80(a1, (uint64_t)a2, v8, (BOOL *)&v25 + 14, (int8x8_t *)&v22 + 1, (uint64_t)&v23.n128_i64[1]);
  unsigned __int8 v14 = 0;
  uint64_t v15 = *((void *)a2 + 2);
  if (*(unsigned char *)(v15 + 16 * v9) != 5) {
    unsigned __int8 v14 = *(unsigned char *)(v15 + 16 * v9 + 8) & 0x7F;
  }
  v23.n128_u8[0] = v14;
  if (*(unsigned char *)(v15 + 16 * v10) == 5) {
    unsigned __int32 v16 = 0;
  }
  else {
    unsigned __int32 v16 = *(_DWORD *)(v15 + 16 * v10 + 8);
  }
  v23.n128_u32[1] = v16;
  if (*(unsigned char *)(v15 + 16 * v11) == 5) {
    __int16 v17 = 0;
  }
  else {
    __int16 v17 = *(_WORD *)(v15 + 16 * v11 + 8) & 0xFFF;
  }
  WORD6(v25) = v17;
  if (*(unsigned char *)(v15 + 16 * v12) == 5) {
    __int16 v18 = 0;
  }
  else {
    __int16 v18 = *(_WORD *)(v15 + 16 * v12 + 8);
  }
  WORD4(v25) = v18;
  if (*(unsigned char *)(v15 + 16 * v13) == 5) {
    __int16 v19 = 0;
  }
  else {
    __int16 v19 = *(_WORD *)(v15 + 16 * v13 + 8);
  }
  WORD5(v25) = v19;
  if (*a1 >= 4u) {
    *(void *)&long long v22 = 0xA600000003;
  }
  long long v20 = v25;
  *(_OWORD *)(a4 + 32) = v24;
  *(_OWORD *)(a4 + 48) = v20;
  *(_DWORD *)(a4 + 64) = v26;
  __n128 result = v23;
  *(_OWORD *)a4 = v22;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1CD441F40(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  *a3 = 168;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v9 = sub_1CBDA6464(v7, 0x71u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x72u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x73u);
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  sub_1CBD85A80(a1, (uint64_t)a2, v8, (BOOL *)&v22 + 12, (int8x8_t *)&v19 + 1, (uint64_t)&v20);
  uint64_t v12 = *((void *)a2 + 2);
  if (*(unsigned char *)(v12 + 16 * v9) == 5) {
    int v13 = 0;
  }
  else {
    int v13 = *(_DWORD *)(v12 + 16 * v9 + 8);
  }
  LODWORD(v22) = v13;
  if (*(unsigned char *)(v12 + 16 * v10) == 5) {
    int v14 = 0;
  }
  else {
    int v14 = *(_DWORD *)(v12 + 16 * v10 + 8);
  }
  DWORD1(v22) = v14;
  if (*(unsigned char *)(v12 + 16 * v11) == 5) {
    int v15 = 0;
  }
  else {
    int v15 = *(_DWORD *)(v12 + 16 * v11 + 8);
  }
  DWORD2(v22) = v15;
  if (*a1 >= 4u) {
    *(void *)&long long v19 = 0x9800000003;
  }
  long long v16 = v20;
  *a4 = v19;
  a4[1] = v16;
  double result = *(double *)&v21;
  long long v18 = v22;
  a4[2] = v21;
  a4[3] = v18;
  return result;
}

double sub_1CD4420A8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 77;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  *(_DWORD *)int v26 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v17 = 0u;
  sub_1CBD9DAF4((uint64_t)a1, a2, v8, (uint64_t)&v17);
  BYTE12(v17) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, v26, (int8x8_t *)&v23, (uint64_t)&v23 + 12);
  sub_1CBD9DE30((uint64_t)a1, a2, v10, (uint64_t)&v18 + 8);
  sub_1CBD9DE30((uint64_t)a1, a2, v11, (uint64_t)&v20 + 8);
  BYTE8(v23) = 1;
  HIDWORD(v25) = sub_1CBDB2780(*(unsigned int *)a2, 26, 0) == 47;
  if (*a1 >= 4u) {
    *((void *)&v22 + 1) = 0x5300000003;
  }
  long long v12 = v24;
  *(_OWORD *)(a4 + 96) = v23;
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 128) = v25;
  *(_DWORD *)(a4 + 144) = *(_DWORD *)v26;
  long long v13 = v20;
  *(_OWORD *)(a4 + 32) = v19;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v22;
  *(_OWORD *)(a4 + 64) = v21;
  *(_OWORD *)(a4 + 80) = v14;
  double result = *(double *)&v17;
  long long v16 = v18;
  *(_OWORD *)a4 = v17;
  *(_OWORD *)(a4 + 16) = v16;
  return result;
}

__n128 sub_1CD442244(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 210;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  long long v22 = 0u;
  long long v23 = 0u;
  memset(v21, 0, sizeof(v21));
  long long v19 = 0u;
  long long v20 = 0u;
  __n128 v17 = 0u;
  long long v18 = 0u;
  long long v16 = 0u;
  sub_1CBD9DAF4((uint64_t)a1, a2, v8, (uint64_t)&v16);
  BYTE12(v16) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v23 + 12, (int8x8_t *)((char *)&v21[1] + 4), (uint64_t)&v21[1] + 12);
  sub_1CBD9DB90((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1]);
  sub_1CBD9DEF0((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  DWORD2(v21[0]) = 1;
  sub_1CBDB2780(*(unsigned int *)a2, 13, 0);
  if (*a1 >= 4u) {
    *(void *)((char *)v21 + 12) = 0xD500000003;
  }
  long long v12 = v22;
  *(_OWORD *)(a4 + 96) = v21[1];
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 128) = v23;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21[0];
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CD4423B8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 211;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  long long v22 = 0u;
  long long v23 = 0u;
  memset(v21, 0, sizeof(v21));
  long long v19 = 0u;
  long long v20 = 0u;
  __n128 v17 = 0u;
  long long v18 = 0u;
  long long v16 = 0u;
  sub_1CBD9DAF4((uint64_t)a1, a2, v8, (uint64_t)&v16);
  BYTE12(v16) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v23 + 12, (int8x8_t *)((char *)&v21[1] + 4), (uint64_t)&v21[1] + 12);
  sub_1CBD9DEF0((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1]);
  sub_1CBD9DB90((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  DWORD2(v21[0]) = 1;
  sub_1CBDB2780(*(unsigned int *)a2, 13, 0);
  if (*a1 >= 4u) {
    *(void *)((char *)v21 + 12) = 0xD600000003;
  }
  long long v12 = v22;
  *(_OWORD *)(a4 + 96) = v21[1];
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 128) = v23;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21[0];
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1CD44252C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 212;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  *(_DWORD *)int v26 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v17 = 0u;
  sub_1CBD9DAF4((uint64_t)a1, a2, v8, (uint64_t)&v17);
  BYTE12(v17) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, v26, (int8x8_t *)&v23, (uint64_t)&v23 + 12);
  sub_1CBD9DE30((uint64_t)a1, a2, v10, (uint64_t)&v18 + 8);
  sub_1CBD9DE30((uint64_t)a1, a2, v11, (uint64_t)&v20 + 8);
  BYTE8(v23) = 0;
  HIDWORD(v25) = sub_1CBDB2780(*(unsigned int *)a2, 26, 0) == 47;
  if (*a1 >= 4u) {
    *((void *)&v22 + 1) = 0xD700000003;
  }
  long long v12 = v24;
  *(_OWORD *)(a4 + 96) = v23;
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 128) = v25;
  *(_DWORD *)(a4 + 144) = *(_DWORD *)v26;
  long long v13 = v20;
  *(_OWORD *)(a4 + 32) = v19;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v22;
  *(_OWORD *)(a4 + 64) = v21;
  *(_OWORD *)(a4 + 80) = v14;
  double result = *(double *)&v17;
  long long v16 = v18;
  *(_OWORD *)a4 = v17;
  *(_OWORD *)(a4 + 16) = v16;
  return result;
}

double sub_1CD4426C4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 212;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  *(_DWORD *)int v26 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v17 = 0u;
  sub_1CBD9DAF4((uint64_t)a1, a2, v8, (uint64_t)&v17);
  BYTE12(v17) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, v26, (int8x8_t *)&v23, (uint64_t)&v23 + 12);
  sub_1CBD9DE30((uint64_t)a1, a2, v10, (uint64_t)&v18 + 8);
  sub_1CBD9DE30((uint64_t)a1, a2, v11, (uint64_t)&v20 + 8);
  BYTE8(v23) = 1;
  HIDWORD(v25) = sub_1CBDB2780(*(unsigned int *)a2, 26, 0) == 47;
  if (*a1 >= 4u) {
    *((void *)&v22 + 1) = 0xD700000003;
  }
  long long v12 = v24;
  *(_OWORD *)(a4 + 96) = v23;
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 128) = v25;
  *(_DWORD *)(a4 + 144) = *(_DWORD *)v26;
  long long v13 = v20;
  *(_OWORD *)(a4 + 32) = v19;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v22;
  *(_OWORD *)(a4 + 64) = v21;
  *(_OWORD *)(a4 + 80) = v14;
  double result = *(double *)&v17;
  long long v16 = v18;
  *(_OWORD *)a4 = v17;
  *(_OWORD *)(a4 + 16) = v16;
  return result;
}

double sub_1CD442860(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 213;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  *(_DWORD *)int v26 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v17 = 0u;
  sub_1CBD9DAF4((uint64_t)a1, a2, v8, (uint64_t)&v17);
  BYTE12(v17) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, v26, (int8x8_t *)&v23, (uint64_t)&v23 + 12);
  sub_1CBD9DE30((uint64_t)a1, a2, v10, (uint64_t)&v18 + 8);
  sub_1CBD9DE30((uint64_t)a1, a2, v11, (uint64_t)&v20 + 8);
  BYTE8(v23) = 0;
  HIDWORD(v25) = sub_1CBDB2780(*(unsigned int *)a2, 26, 0) == 47;
  if (*a1 >= 4u) {
    *((void *)&v22 + 1) = 0xD800000003;
  }
  long long v12 = v24;
  *(_OWORD *)(a4 + 96) = v23;
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 128) = v25;
  *(_DWORD *)(a4 + 144) = *(_DWORD *)v26;
  long long v13 = v20;
  *(_OWORD *)(a4 + 32) = v19;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v22;
  *(_OWORD *)(a4 + 64) = v21;
  *(_OWORD *)(a4 + 80) = v14;
  double result = *(double *)&v17;
  long long v16 = v18;
  *(_OWORD *)a4 = v17;
  *(_OWORD *)(a4 + 16) = v16;
  return result;
}

double sub_1CD4429F8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 213;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  *(_DWORD *)int v26 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v17 = 0u;
  sub_1CBD9DAF4((uint64_t)a1, a2, v8, (uint64_t)&v17);
  BYTE12(v17) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, v26, (int8x8_t *)&v23, (uint64_t)&v23 + 12);
  sub_1CBD9DE30((uint64_t)a1, a2, v10, (uint64_t)&v18 + 8);
  sub_1CBD9DE30((uint64_t)a1, a2, v11, (uint64_t)&v20 + 8);
  BYTE8(v23) = 1;
  HIDWORD(v25) = sub_1CBDB2780(*(unsigned int *)a2, 26, 0) == 47;
  if (*a1 >= 4u) {
    *((void *)&v22 + 1) = 0xD800000003;
  }
  long long v12 = v24;
  *(_OWORD *)(a4 + 96) = v23;
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 128) = v25;
  *(_DWORD *)(a4 + 144) = *(_DWORD *)v26;
  long long v13 = v20;
  *(_OWORD *)(a4 + 32) = v19;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v22;
  *(_OWORD *)(a4 + 64) = v21;
  *(_OWORD *)(a4 + 80) = v14;
  double result = *(double *)&v17;
  long long v16 = v18;
  *(_OWORD *)a4 = v17;
  *(_OWORD *)(a4 + 16) = v16;
  return result;
}

__n128 sub_1CD442B94(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 200;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x14u);
  unsigned int v17 = sub_1CBDA6464(v7, 0x37u);
  *(_DWORD *)long long v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  __n128 v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v18);
  LOBYTE(v19) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, v28, (int8x8_t *)&v25 + 1, (uint64_t)&v26);
  sub_1CBD88900((uint64_t)a1, a2, v10, (uint64_t)&v19 + 12);
  sub_1CBD88E08((uint64_t)a1, a2, v11, (uint64_t)&v21.n128_i64[1]);
  if (v22 == 1) {
    *(void *)&long long v22 = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v17, (uint64_t)&v23 + 4);
  if (HIDWORD(v23) == 1) {
    LODWORD(v24) = 2;
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v18) - 2) <= 3) {
      LODWORD(v25) = dword_1CDF53620[DWORD2(v18) - 2];
    }
    DWORD1(v25) = 197;
  }
  long long v12 = v27;
  *(_OWORD *)(a4 + 128) = v26;
  *(_OWORD *)(a4 + 144) = v12;
  *(_DWORD *)(a4 + 160) = *(_DWORD *)v28;
  long long v13 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v13;
  long long v14 = v25;
  *(_OWORD *)(a4 + 96) = v24;
  *(_OWORD *)(a4 + 112) = v14;
  long long v15 = v19;
  *(_OWORD *)a4 = v18;
  *(_OWORD *)(a4 + 16) = v15;
  __n128 result = v21;
  *(_OWORD *)(a4 + 32) = v20;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

double sub_1CD442D74(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 120;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Fu);
  unsigned int v11 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v19 = sub_1CBDA6464(v7, 4u);
  *(_DWORD *)long long v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v20);
  uint64_t v12 = *((void *)a2 + 2);
  LOBYTE(v21) = (*(unsigned char *)(v12 + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, v29, (int8x8_t *)((char *)&v25 + 12), (uint64_t)&v27);
  int v13 = *(_DWORD *)(v12 + 16 * v10 + 8);
  BYTE4(v26) = (v13 & 0x10) != 0;
  BYTE12(v26) = (~(_BYTE)v13 & 0x60) == 0;
  DWORD2(v26) = v13 & 3;
  sub_1CBD8C148((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v21 + 12);
  sub_1CBD8C148((uint64_t)a1, (uint64_t)a2, v19, (uint64_t)&v23 + 8);
  if (!BYTE12(v26)) {
    LODWORD(v24) = 0;
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v20) - 2) <= 3) {
      DWORD1(v25) = dword_1CDF53620[DWORD2(v20) - 2];
    }
    DWORD2(v25) = 117;
  }
  long long v14 = v27;
  *(_OWORD *)(a4 + 96) = v26;
  *(_OWORD *)(a4 + 112) = v14;
  *(_OWORD *)(a4 + 128) = v28;
  *(_DWORD *)(a4 + 144) = *(_DWORD *)v29;
  long long v15 = v23;
  *(_OWORD *)(a4 + 32) = v22;
  *(_OWORD *)(a4 + 48) = v15;
  long long v16 = v25;
  *(_OWORD *)(a4 + 64) = v24;
  *(_OWORD *)(a4 + 80) = v16;
  double result = *(double *)&v20;
  long long v18 = v21;
  *(_OWORD *)a4 = v20;
  *(_OWORD *)(a4 + 16) = v18;
  return result;
}

double sub_1CD442F4C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  *a3 = 195;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Fu);
  unsigned int v11 = sub_1CBDA6464(v7, 0x11u);
  long long v22 = 0u;
  memset(v23, 0, 60);
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  sub_1CBD8C5F0((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v19);
  uint64_t v12 = *((void *)a2 + 2);
  LOBYTE(v20) = (*(unsigned char *)(v12 + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v23[3] + 8, (int8x8_t *)v23 + 1, (uint64_t)&v23[1] + 8);
  int v13 = *(_DWORD *)(v12 + 16 * v10 + 8);
  BYTE4(v23[1]) = (~(_BYTE)v13 & 0x60) == 0;
  LODWORD(v23[1]) = v13 & 3;
  sub_1CBD88E08((uint64_t)a1, a2, v11, (uint64_t)&v21 + 4);
  int v14 = HIDWORD(v19);
  if (BYTE4(v23[1])) {
    int v14 = dword_1CDF53350[HIDWORD(v19) - 1];
  }
  HIDWORD(v19) = v14;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v19) - 2) <= 3) {
      LODWORD(v23[0]) = dword_1CDF53620[DWORD2(v19) - 2];
    }
    DWORD1(v23[0]) = 192;
  }
  long long v15 = v23[1];
  a4[4] = v23[0];
  a4[5] = v15;
  a4[6] = v23[2];
  *(_OWORD *)((char *)a4 + 108) = *(_OWORD *)((char *)&v23[2] + 12);
  long long v16 = v20;
  *a4 = v19;
  a4[1] = v16;
  double result = *(double *)&v21;
  long long v18 = v22;
  a4[2] = v21;
  a4[3] = v18;
  return result;
}

double sub_1CD4430F0(_DWORD *a1, unsigned int *a2, _DWORD *a3, uint64_t a4)
{
  if (sub_1CBDA02EC(a2))
  {
    sub_1CBDA02EC(a2);
    *(void *)&double result = sub_1CD443188(a1, (unsigned __int16 *)a2, a3, a4).n128_u64[0];
  }
  else
  {
    *(void *)&double result = sub_1CBD9EA64(a1, (unsigned __int16 *)a2, a3, a4).n128_u64[0];
  }
  return result;
}

__n128 sub_1CD443188(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 208;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v33 = sub_1CBDA6464(v7, 0x49u);
  unsigned int v32 = sub_1CBDA6464(v7, 0x4Au);
  unsigned int v31 = sub_1CBDA6464(v7, 0x4Bu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v34 = sub_1CBDA6464(v7, 4u);
  unsigned int v35 = sub_1CBDA6464(v7, 0x14u);
  unsigned int v30 = sub_1CBDA6464(v7, 0x4Cu);
  unsigned int v29 = sub_1CBDA6464(v7, 0x4Du);
  unsigned int v28 = sub_1CBDA6464(v7, 0x4Eu);
  unsigned int v27 = sub_1CBDA6464(v7, 0x4Fu);
  unsigned int v26 = sub_1CBDA6464(v7, 0x50u);
  unsigned int v25 = sub_1CBDA6464(v7, 0x51u);
  unsigned int v24 = sub_1CBDA6464(v7, 0x52u);
  unsigned int v23 = sub_1CBDA6464(v7, 0x53u);
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  __n128 v37 = 0u;
  long long v38 = 0u;
  long long v36 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v36);
  uint64_t v11 = *((void *)a2 + 2);
  v37.n128_u8[0] = (*(unsigned char *)(v11 + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v46, (int8x8_t *)&v43 + 1, (uint64_t)&v44);
  int v12 = dword_1CDF536A4[(*(void *)(v11 + 16 * v32 + 8) & 0xFLL) - 8];
  DWORD1(v46) = dword_1CDF536A4[(*(void *)(v11 + 16 * v33 + 8) & 0xFLL) - 8];
  DWORD2(v46) = v12;
  HIDWORD(v46) = dword_1CDF536A4[(*(void *)(v11 + 16 * v31 + 8) & 0xFLL) - 8];
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v37.n128_i64[1] + 4);
  if (DWORD1(v38) == 1) {
    *(void *)((char *)&v38 + 4) = 0x200000001;
  }
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v34, (uint64_t)&v39 + 8);
  if (v40 == 1) {
    *(void *)&long long v40 = 0x200000001;
  }
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v35, (uint64_t)&v41 + 4);
  if (HIDWORD(v41) == 1) {
    LODWORD(v42) = 2;
  }
  uint64_t v13 = *((void *)a2 + 2);
  uint64_t v14 = *(void *)(v13 + 16 * v29 + 8);
  LODWORD(v47) = *(void *)(v13 + 16 * v30 + 8);
  DWORD1(v47) = v14;
  uint64_t v15 = *(void *)(v13 + 16 * v27 + 8);
  DWORD2(v47) = *(void *)(v13 + 16 * v28 + 8);
  HIDWORD(v47) = v15;
  uint64_t v16 = *(void *)(v13 + 16 * v25 + 8);
  LODWORD(v48) = *(void *)(v13 + 16 * v26 + 8);
  DWORD1(v48) = v16;
  *((void *)&v48 + 1) = __PAIR64__(*(void *)(v13 + 16 * v23 + 8), *(void *)(v13 + 16 * v24 + 8));
  if (*a1 >= 4u)
  {
    if ((DWORD2(v36) - 2) <= 3) {
      LODWORD(v43) = dword_1CDF53620[DWORD2(v36) - 2];
    }
    DWORD1(v43) = 211;
  }
  long long v17 = v47;
  *(_OWORD *)(a4 + 160) = v46;
  *(_OWORD *)(a4 + 176) = v17;
  *(_OWORD *)(a4 + 192) = v48;
  long long v18 = v43;
  *(_OWORD *)(a4 + 96) = v42;
  *(_OWORD *)(a4 + 112) = v18;
  long long v19 = v45;
  *(_OWORD *)(a4 + 128) = v44;
  *(_OWORD *)(a4 + 144) = v19;
  long long v20 = v39;
  *(_OWORD *)(a4 + 32) = v38;
  *(_OWORD *)(a4 + 48) = v20;
  long long v21 = v41;
  *(_OWORD *)(a4 + 64) = v40;
  *(_OWORD *)(a4 + 80) = v21;
  __n128 result = v37;
  *(_OWORD *)a4 = v36;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

uint64_t sub_1CD443540(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8 = sub_1CBDA6464(a2, 0x2Eu);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v8, *(unsigned __int8 *)(a5 + 49), (unsigned __int8 *)(a5 + 8), (unsigned int *)(a5 + 16));
  return 3;
}

uint64_t sub_1CD44359C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8 = sub_1CBDA6464(a2, 0x2Eu);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v8, *(unsigned __int8 *)(a5 + 48), (unsigned __int8 *)(a5 + 8), (unsigned int *)(a5 + 16));
  return 3;
}

uint64_t sub_1CD4435F8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x57u);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 69), (unsigned __int8 *)(a5 + 24), (unsigned int *)(a5 + 32));
  uint64_t v11 = (void *)(*(void *)(a3 + 16) + 16 * v10);
  uint64_t v12 = *(unsigned int *)(a5 + 64);
  *uint64_t v11 = 2;
  v11[1] = v12;
  return 3;
}

uint64_t sub_1CD443688(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x60u);
  unsigned int v11 = sub_1CBDA6464(v8, 0x61u);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 80), (unsigned __int8 *)(a5 + 36), (unsigned int *)(a5 + 48));
  uint64_t v12 = *(__int16 *)(a5 + 44);
  uint64_t v13 = (void *)(*(void *)(a3 + 16) + 16 * v10);
  *uint64_t v13 = 2;
  v13[1] = v12;
  uint64_t v14 = (uint64_t)((unint64_t)*(unsigned __int16 *)(a5 + 46) << 52) >> 52;
  uint64_t v15 = (void *)(*(void *)(a3 + 16) + 16 * v11);
  *uint64_t v15 = 2;
  v15[1] = v14;
  return 3;
}

uint64_t sub_1CD44373C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x58u);
  uint64_t v12 = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (v12 == 3)
  {
    int v13 = *(unsigned __int8 *)(a5 + 80);
    uint64_t v14 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v15 = *(void *)(a3 + 16);
    uint64_t v16 = (void *)(v15 + 16 * v10);
    if (*(unsigned char *)v16 == 2)
    {
      uint64_t v16 = (void *)(v15 + 16 * v10);
      v14 |= v16[1];
    }
    else
    {
      void *v16 = 2;
    }
    v16[1] = v14;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v13 != 0, (unsigned __int8 *)(a5 + 36), (unsigned int *)(a5 + 48));
    uint64_t v17 = *(unsigned __int16 *)(a5 + 44);
    long long v18 = (void *)(*(void *)(a3 + 16) + 16 * v11);
    void *v18 = 2;
    v18[1] = v17;
  }
  return v12;
}

uint64_t sub_1CD44384C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  switch(a4)
  {
    case 'O':
      return sub_1CD443B34(a1, a2, a3, a5);
    case 'N':
      return sub_1CD4439DC(a1, a2, a3, a5);
    case 'L':
      return sub_1CD443884(a1, a2, a3, a5);
  }
  return 0;
}

uint64_t sub_1CD443884(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7 = a2;
  unsigned int v8 = sub_1CBDA6464(a2, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v8, a4, 1);
  if (result == 3)
  {
    int v13 = *(unsigned __int8 *)(a4 + 136);
    uint64_t v14 = 32 * *(unsigned __int8 *)(a4 + 16);
    uint64_t v15 = *(void *)(a3 + 16);
    uint64_t v16 = (void *)(v15 + 16 * v9);
    if (*(unsigned char *)v16 == 2)
    {
      uint64_t v16 = (void *)(v15 + 16 * v9);
      v14 |= v16[1];
    }
    else
    {
      void *v16 = 2;
    }
    v16[1] = v14;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, v13 != 0, (unsigned __int8 *)(a4 + 88), (unsigned int *)(a4 + 104));
    uint64_t result = sub_1CBDA0990((uint64_t)a1, a3, v10, a4 + 28);
    if (result == 3)
    {
      return sub_1CBDA09FC((uint64_t)a1, a3, v11, a4 + 56, (_DWORD *)(a4 + 100));
    }
  }
  return result;
}

uint64_t sub_1CD4439DC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7 = a2;
  unsigned int v8 = sub_1CBDA6464(a2, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v8, a4, 1);
  if (result == 3)
  {
    int v13 = *(unsigned __int8 *)(a4 + 140);
    uint64_t v14 = 32 * *(unsigned __int8 *)(a4 + 16);
    uint64_t v15 = *(void *)(a3 + 16);
    uint64_t v16 = (void *)(v15 + 16 * v9);
    if (*(unsigned char *)v16 == 2)
    {
      uint64_t v16 = (void *)(v15 + 16 * v9);
      v14 |= v16[1];
    }
    else
    {
      void *v16 = 2;
    }
    v16[1] = v14;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, v13 != 0, (unsigned __int8 *)(a4 + 92), (unsigned int *)(a4 + 108));
    uint64_t result = sub_1CBDA0990((uint64_t)a1, a3, v10, a4 + 28);
    if (result == 3)
    {
      return sub_1CBDA09FC((uint64_t)a1, a3, v11, a4 + 56, (_DWORD *)(a4 + 104));
    }
  }
  return result;
}

uint64_t sub_1CD443B34(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7 = a2;
  unsigned int v8 = sub_1CBDA6464(a2, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v8, a4, 1);
  if (result == 3)
  {
    int v13 = *(unsigned __int8 *)(a4 + 132);
    uint64_t v14 = 32 * *(unsigned __int8 *)(a4 + 16);
    uint64_t v15 = *(void *)(a3 + 16);
    uint64_t v16 = (void *)(v15 + 16 * v9);
    if (*(unsigned char *)v16 == 2)
    {
      uint64_t v16 = (void *)(v15 + 16 * v9);
      v14 |= v16[1];
    }
    else
    {
      void *v16 = 2;
    }
    v16[1] = v14;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, v13 != 0, (unsigned __int8 *)(a4 + 92), (unsigned int *)(a4 + 100));
    uint64_t result = sub_1CBDA0990((uint64_t)a1, a3, v10, a4 + 28);
    if (result == 3)
    {
      return sub_1CBDA0990((uint64_t)a1, a3, v11, a4 + 56);
    }
  }
  return result;
}

uint64_t sub_1CD443C88(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  if (a4 == 78) {
    return sub_1CD4439DC(a1, a2, a3, a5);
  }
  if (a4 == 76) {
    return sub_1CD443884(a1, a2, a3, a5);
  }
  return 0;
}

uint64_t sub_1CD443CB0(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  switch(a4)
  {
    case 'f':
      return sub_1CD443B34(a1, a2, a3, a5);
    case 'e':
      return sub_1CD4439DC(a1, a2, a3, a5);
    case '^':
      return sub_1CD443884(a1, a2, a3, a5);
  }
  return 0;
}

uint64_t sub_1CD443CE8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  if (a4 == 101) {
    return sub_1CD4439DC(a1, a2, a3, a5);
  }
  if (a4 == 94) {
    return sub_1CD443884(a1, a2, a3, a5);
  }
  return 0;
}

uint64_t sub_1CD443D10(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  switch(a4)
  {
    case 'S':
      return sub_1CD444048(a1, a2, a3, a5);
    case 'R':
      return sub_1CD443EC8(a1, a2, a3, a5);
    case 'Q':
      return sub_1CD443D48(a1, a2, a3, a5);
  }
  return 0;
}

uint64_t sub_1CD443D48(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7 = a2;
  unsigned int v8 = sub_1CBDA6464(a2, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x14u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v8, a4, 1);
  if (result == 3)
  {
    int v14 = *(unsigned __int8 *)(a4 + 160);
    uint64_t v15 = 32 * *(unsigned __int8 *)(a4 + 16);
    uint64_t v16 = *(void *)(a3 + 16);
    uint64_t v17 = (void *)(v16 + 16 * v9);
    if (*(unsigned char *)v17 == 2)
    {
      uint64_t v17 = (void *)(v16 + 16 * v9);
      v15 |= v17[1];
    }
    else
    {
      *uint64_t v17 = 2;
    }
    v17[1] = v15;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, v14 != 0, (unsigned __int8 *)(a4 + 116), (unsigned int *)(a4 + 128));
    uint64_t result = sub_1CBDA0990((uint64_t)a1, a3, v10, a4 + 28);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA0990((uint64_t)a1, a3, v11, a4 + 56);
      if (result == 3)
      {
        return sub_1CBDA0990((uint64_t)a1, a3, v12, a4 + 84);
      }
    }
  }
  return result;
}

uint64_t sub_1CD443EC8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7 = a2;
  unsigned int v8 = sub_1CBDA6464(a2, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x14u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v8, a4, 1);
  if (result == 3)
  {
    int v14 = *(unsigned __int8 *)(a4 + 164);
    uint64_t v15 = 32 * *(unsigned __int8 *)(a4 + 16);
    uint64_t v16 = *(void *)(a3 + 16);
    uint64_t v17 = (void *)(v16 + 16 * v9);
    if (*(unsigned char *)v17 == 2)
    {
      uint64_t v17 = (void *)(v16 + 16 * v9);
      v15 |= v17[1];
    }
    else
    {
      *uint64_t v17 = 2;
    }
    v17[1] = v15;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, v14 != 0, (unsigned __int8 *)(a4 + 120), (unsigned int *)(a4 + 132));
    uint64_t result = sub_1CBDA0990((uint64_t)a1, a3, v10, a4 + 28);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA0990((uint64_t)a1, a3, v11, a4 + 56);
      if (result == 3)
      {
        return sub_1CBDA0990((uint64_t)a1, a3, v12, a4 + 84);
      }
    }
  }
  return result;
}

uint64_t sub_1CD444048(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7 = a2;
  unsigned int v8 = sub_1CBDA6464(a2, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x14u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v8, a4, 1);
  if (result == 3)
  {
    int v14 = *(unsigned __int8 *)(a4 + 160);
    uint64_t v15 = 32 * *(unsigned __int8 *)(a4 + 16);
    uint64_t v16 = *(void *)(a3 + 16);
    uint64_t v17 = (void *)(v16 + 16 * v9);
    if (*(unsigned char *)v17 == 2)
    {
      uint64_t v17 = (void *)(v16 + 16 * v9);
      v15 |= v17[1];
    }
    else
    {
      *uint64_t v17 = 2;
    }
    v17[1] = v15;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, v14 != 0, (unsigned __int8 *)(a4 + 120), (unsigned int *)(a4 + 128));
    uint64_t result = sub_1CBDA0990((uint64_t)a1, a3, v10, a4 + 28);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA0990((uint64_t)a1, a3, v11, a4 + 56);
      if (result == 3)
      {
        return sub_1CBDA0990((uint64_t)a1, a3, v12, a4 + 84);
      }
    }
  }
  return result;
}

uint64_t sub_1CD4441C8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  if (a4 == 82) {
    return sub_1CD443EC8(a1, a2, a3, a5);
  }
  if (a4 == 81) {
    return sub_1CD443D48(a1, a2, a3, a5);
  }
  return 0;
}

uint64_t sub_1CD4441F0(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  switch(a4)
  {
    case 'X':
      return sub_1CD444048(a1, a2, a3, a5);
    case 'W':
      return sub_1CD443EC8(a1, a2, a3, a5);
    case 'V':
      return sub_1CD443D48(a1, a2, a3, a5);
  }
  return 0;
}

uint64_t sub_1CD444228(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  if (a4 == 87) {
    return sub_1CD443EC8(a1, a2, a3, a5);
  }
  if (a4 == 86) {
    return sub_1CD443D48(a1, a2, a3, a5);
  }
  return 0;
}

uint64_t sub_1CD444250(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x11u);
  unsigned int v12 = sub_1CBDA6464(v8, 4u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    int v14 = *(unsigned __int8 *)(a5 + 132);
    uint64_t v15 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v16 = *(void *)(a3 + 16);
    uint64_t v17 = (void *)(v16 + 16 * v10);
    if (*(unsigned char *)v17 == 2)
    {
      uint64_t v17 = (void *)(v16 + 16 * v10);
      v15 |= v17[1];
    }
    else
    {
      *uint64_t v17 = 2;
    }
    v17[1] = v15;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v14 != 0, (unsigned __int8 *)(a5 + 92), (unsigned int *)(a5 + 100));
    uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v11, a5 + 28, 1);
    if (result == 3)
    {
      return sub_1CBDA0A88((uint64_t)a1, a3, v12, a5 + 56, 1);
    }
  }
  return result;
}

uint64_t sub_1CD4443AC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x24u);
  uint64_t v12 = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (v12 == 3)
  {
    int v13 = *(unsigned __int8 *)(a5 + 80);
    uint64_t v14 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v15 = *(void *)(a3 + 16);
    uint64_t v16 = (void *)(v15 + 16 * v10);
    if (*(unsigned char *)v16 == 2)
    {
      uint64_t v16 = (void *)(v15 + 16 * v10);
      v14 |= v16[1];
    }
    else
    {
      void *v16 = 2;
    }
    v16[1] = v14;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v13 != 0, (unsigned __int8 *)(a5 + 40), (unsigned int *)(a5 + 48));
    uint64_t v17 = (void *)(*(void *)(a3 + 16) + 16 * v11);
    uint64_t v18 = *(unsigned int *)(a5 + 28);
    *uint64_t v17 = 2;
    v17[1] = v18;
  }
  return v12;
}

uint64_t sub_1CD4444BC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x11u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    int v13 = *(unsigned __int8 *)(a5 + 108);
    uint64_t v14 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v15 = *(void *)(a3 + 16);
    uint64_t v16 = (void *)(v15 + 16 * v10);
    if (*(unsigned char *)v16 == 2)
    {
      uint64_t v16 = (void *)(v15 + 16 * v10);
      v14 |= v16[1];
    }
    else
    {
      void *v16 = 2;
    }
    v16[1] = v14;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v13 != 0, (unsigned __int8 *)(a5 + 64), (unsigned int *)(a5 + 76));
    return sub_1CBDA0B7C((uint64_t)a1, a3, v11, a5 + 28);
  }
  return result;
}

uint64_t sub_1CD4445D8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x11u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    int v13 = *(unsigned __int8 *)(a5 + 104);
    uint64_t v14 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v15 = *(void *)(a3 + 16);
    uint64_t v16 = (void *)(v15 + 16 * v10);
    if (*(unsigned char *)v16 == 2)
    {
      uint64_t v16 = (void *)(v15 + 16 * v10);
      v14 |= v16[1];
    }
    else
    {
      void *v16 = 2;
    }
    v16[1] = v14;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v13 != 0, (unsigned __int8 *)(a5 + 64), (unsigned int *)(a5 + 72));
    return sub_1CBDA0A88((uint64_t)a1, a3, v11, a5 + 28, 1);
  }
  return result;
}

uint64_t sub_1CD4446F8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x11u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, *(unsigned __int8 *)(a5 + 104), (unsigned __int8 *)(a5 + 64), (unsigned int *)(a5 + 72));
    return sub_1CBDA0A88((uint64_t)a1, a3, v11, a5 + 28, 1);
  }
  return result;
}

uint64_t sub_1CD4447D8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x24u);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 60), (unsigned __int8 *)(a5 + 16), (unsigned int *)(a5 + 28));
  unsigned int v11 = (void *)(*(void *)(a3 + 16) + 16 * v10);
  if (*(unsigned char *)(a5 + 24)) {
    uint64_t v12 = *(void *)a5;
  }
  else {
    uint64_t v12 = (uint64_t)(*(void *)a5 << 16) >> 16;
  }
  *unsigned int v11 = 2;
  v11[1] = v12;
  return 3;
}

uint64_t sub_1CD444878(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 7u);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 80), (unsigned __int8 *)(a5 + 36), (unsigned int *)(a5 + 48));

  return sub_1CBDA0990((uint64_t)a1, a3, v10, a5);
}

uint64_t sub_1CD444910(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8 = sub_1CBDA6464(a2, 0x2Eu);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v8, *(unsigned __int8 *)(a5 + 52), (unsigned __int8 *)(a5 + 8), (unsigned int *)(a5 + 20));
  return 3;
}

uint64_t sub_1CD44496C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x3Bu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x3Cu);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 56), (unsigned __int8 *)(a5 + 12), (unsigned int *)(a5 + 24));
  uint64_t v12 = *(unsigned __int8 *)(a5 + 1);
  uint64_t v13 = v12 + 71;
  if (v12 == 7) {
    uint64_t v13 = 1;
  }
  if (v12 == 6) {
    uint64_t v14 = 2;
  }
  else {
    uint64_t v14 = v13;
  }
  uint64_t v15 = (void *)(*(void *)(a3 + 16) + 16 * v10);
  *uint64_t v15 = 1;
  v15[1] = v14;
  uint64_t v16 = (void *)(*(void *)(a3 + 16) + 16 * v11);
  uint64_t v17 = *(unsigned __int16 *)(a5 + 20);
  void *v16 = 2;
  v16[1] = v17;
  return 3;
}

uint64_t sub_1CD444A3C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x3Cu);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 52), (unsigned __int8 *)(a5 + 8), (unsigned int *)(a5 + 20));
  unsigned int v11 = (void *)(*(void *)(a3 + 16) + 16 * v10);
  uint64_t v12 = *(unsigned __int16 *)(a5 + 16);
  *unsigned int v11 = 2;
  v11[1] = v12;
  return 3;
}

uint64_t sub_1CD444ACC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x83u);
  unsigned int v11 = sub_1CBDA6464(v8, 0x3Du);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 112), (unsigned __int8 *)(a5 + 64), (unsigned int *)(a5 + 76));
  uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v10, a5 + 28, 1);
  if (result == 3)
  {
    unsigned int v14 = sub_1CD44F674(v13);
    return sub_1CBDA6388((uint64_t)a1, a3, v11, a5, v14);
  }
  return result;
}

uint64_t sub_1CD444BB8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x39u);
  unsigned int v11 = sub_1CBDA6464(v8, 0x3Au);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 104), (unsigned __int8 *)(a5 + 64), (unsigned int *)(a5 + 72));
  uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v10, a5, 1);
  if (result == 3)
  {
    return sub_1CBDA0A88((uint64_t)a1, a3, v11, a5 + 28, 1);
  }
  return result;
}

uint64_t sub_1CD444C98(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 7u);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 85), (unsigned __int8 *)(a5 + 36), (unsigned int *)(a5 + 52));

  return sub_1CBDA0A88((uint64_t)a1, a3, v10, a5, 3);
}

uint64_t sub_1CD444D34(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x54u);
  unsigned int v11 = sub_1CBDA6464(v8, 3u);
  unsigned int v12 = sub_1CBDA6464(v8, 0x18u);
  unsigned int v13 = sub_1CBDA6464(v8, 0x19u);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 112), (unsigned __int8 *)(a5 + 68), (unsigned int *)(a5 + 80));
  uint64_t v14 = (*(_DWORD *)(a5 + 76) - 1);
  if (v14 < 7) {
    uint64_t v15 = v14 + 1;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = (void *)(*(void *)(a3 + 16) + 16 * v10);
  uint64_t v17 = 2;
  void *v16 = 2;
  v16[1] = v15;
  uint64_t v18 = (void *)(*(void *)(a3 + 16) + 16 * v11);
  uint64_t v19 = *(unsigned __int8 *)(a5 + 57);
  if (v19 != 6)
  {
    if (v19 == 7) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = v19 + 71;
    }
  }
  void *v18 = 1;
  v18[1] = v17;
  uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v12, a5);
  if (result == 3)
  {
    return sub_1CBDA2DA0((uint64_t)a1, a3, v13, a5 + 28);
  }
  return result;
}

uint64_t sub_1CD444E88(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x54u);
  unsigned int v11 = sub_1CBDA6464(v8, 3u);
  unsigned int v12 = sub_1CBDA6464(v8, 0x18u);
  unsigned int v13 = sub_1CBDA6464(v8, 0x19u);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 112), (unsigned __int8 *)(a5 + 68), (unsigned int *)(a5 + 80));
  uint64_t v14 = *(int *)(a5 + 76);
  if (v14 > 6) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = qword_1CDF53838[v14];
  }
  uint64_t v16 = (void *)(*(void *)(a3 + 16) + 16 * v10);
  uint64_t v17 = 2;
  void *v16 = 2;
  v16[1] = v15;
  uint64_t v18 = (void *)(*(void *)(a3 + 16) + 16 * v11);
  uint64_t v19 = *(unsigned __int8 *)(a5 + 57);
  if (v19 != 6)
  {
    if (v19 == 7) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = v19 + 71;
    }
  }
  void *v18 = 1;
  v18[1] = v17;
  uint64_t result = sub_1CBDA0B7C((uint64_t)a1, a3, v12, a5);
  if (result == 3)
  {
    return sub_1CBDA0B7C((uint64_t)a1, a3, v13, a5 + 28);
  }
  return result;
}

uint64_t sub_1CD444FF0(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x11u);
  unsigned int v12 = sub_1CBDA6464(v8, 4u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    int v14 = *(unsigned __int8 *)(a5 + 140);
    uint64_t v15 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v16 = *(void *)(a3 + 16);
    uint64_t v17 = (void *)(v16 + 16 * v10);
    if (*(unsigned char *)v17 == 2)
    {
      uint64_t v17 = (void *)(v16 + 16 * v10);
      v15 |= v17[1];
    }
    else
    {
      *uint64_t v17 = 2;
    }
    v17[1] = v15;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v14 != 0, (unsigned __int8 *)(a5 + 100), (unsigned int *)(a5 + 108));
    uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v11, a5 + 36);
    if (result == 3)
    {
      return sub_1CBDA2DA0((uint64_t)a1, a3, v12, a5 + 64);
    }
  }
  return result;
}

uint64_t sub_1CD445144(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x11u);
  unsigned int v12 = sub_1CBDA6464(v8, 4u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    uint64_t v14 = *(unsigned __int8 *)(a5 + 16);
    int v15 = *(unsigned __int8 *)(a5 + 204);
    uint64_t v16 = 128;
    if (!*(unsigned char *)(a5 + 168)) {
      uint64_t v16 = 32 * v14;
    }
    uint64_t v17 = v16 | (32 * v14);
    uint64_t v18 = *(void *)(a3 + 16);
    uint64_t v19 = (void *)(v18 + 16 * v10);
    if (*(unsigned char *)v19 == 2)
    {
      uint64_t v19 = (void *)(v18 + 16 * v10);
      v17 |= v19[1];
    }
    else
    {
      *uint64_t v19 = 2;
    }
    v19[1] = v17;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v15 != 0, (unsigned __int8 *)(a5 + 156), (unsigned int *)(a5 + 172));
    uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v11, a5 + 36);
    if (result == 3)
    {
      return sub_1CBDA2DA0((uint64_t)a1, a3, v12, a5 + 64);
    }
  }
  return result;
}

uint64_t sub_1CD4452AC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x11u);
  unsigned int v12 = sub_1CBDA6464(v8, 4u);
  unsigned int v13 = sub_1CBDA6464(v8, 0x1Cu);
  unsigned int v14 = sub_1CBDA6464(v8, 0x47u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    uint64_t v16 = *(unsigned __int8 *)(a5 + 16);
    int v17 = *(unsigned __int8 *)(a5 + 204);
    uint64_t v18 = 128;
    if (!*(unsigned char *)(a5 + 168)) {
      uint64_t v18 = 32 * v16;
    }
    uint64_t v19 = v18 | (32 * v16);
    uint64_t v20 = *(void *)(a3 + 16);
    long long v21 = (void *)(v20 + 16 * v10);
    if (*(unsigned char *)v21 == 2)
    {
      long long v21 = (void *)(v20 + 16 * v10);
      v19 |= v21[1];
    }
    else
    {
      *long long v21 = 2;
    }
    v21[1] = v19;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v17 != 0, (unsigned __int8 *)(a5 + 156), (unsigned int *)(a5 + 172));
    uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v11, a5 + 36);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v12, a5 + 64);
      if (result == 3)
      {
        long long v22 = (unsigned __int8 *)(a5 + 92);
        if (*(_DWORD *)(a5 + 100) == 2)
        {
          uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v13, (uint64_t)v22, 3);
          if (result != 3) {
            return result;
          }
        }
        else
        {
          uint64_t v23 = *v22;
          unsigned int v24 = (void *)(*(void *)(a3 + 16) + 16 * v13);
          *unsigned int v24 = 2;
          v24[1] = v23;
        }
        unsigned int v25 = (unsigned __int8 *)(a5 + 120);
        if (*(_DWORD *)(a5 + 128) == 2)
        {
          return sub_1CBDA0A88((uint64_t)a1, a3, v14, (uint64_t)v25, 3);
        }
        else
        {
          uint64_t v26 = *v25;
          unsigned int v27 = (void *)(*(void *)(a3 + 16) + 16 * v14);
          *unsigned int v27 = 2;
          v27[1] = v26;
          return 3;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD4454C8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x11u);
  unsigned int v12 = sub_1CBDA6464(v8, 4u);
  unsigned int v13 = sub_1CBDA6464(v8, 0x14u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    int v15 = *(unsigned __int8 *)(a5 + 228);
    uint64_t v16 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v17 = *(void *)(a3 + 16);
    uint64_t v18 = (void *)(v17 + 16 * v10);
    if (*(unsigned char *)v18 == 2)
    {
      uint64_t v18 = (void *)(v17 + 16 * v10);
      v16 |= v18[1];
    }
    else
    {
      void *v18 = 2;
    }
    v18[1] = v16;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v15 != 0, (unsigned __int8 *)(a5 + 184), (unsigned int *)(a5 + 196));
    uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v11, a5 + 36);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v12, a5 + 64);
      if (result == 3)
      {
        return sub_1CBDA2DA0((uint64_t)a1, a3, v13, a5 + 92);
      }
    }
  }
  return result;
}

uint64_t sub_1CD445648(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x11u);
  unsigned int v12 = sub_1CBDA6464(v8, 4u);
  unsigned int v13 = sub_1CBDA6464(v8, 0x14u);
  unsigned int v14 = sub_1CBDA6464(v8, 0x1Cu);
  unsigned int v15 = sub_1CBDA6464(v8, 0x47u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    int v17 = *(unsigned __int8 *)(a5 + 228);
    uint64_t v18 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v19 = *(void *)(a3 + 16);
    uint64_t v20 = (void *)(v19 + 16 * v10);
    if (*(unsigned char *)v20 == 2)
    {
      uint64_t v20 = (void *)(v19 + 16 * v10);
      v18 |= v20[1];
    }
    else
    {
      void *v20 = 2;
    }
    v20[1] = v18;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v17 != 0, (unsigned __int8 *)(a5 + 184), (unsigned int *)(a5 + 196));
    uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v11, a5 + 36);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v12, a5 + 64);
      if (result == 3)
      {
        uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v13, a5 + 92);
        if (result == 3)
        {
          long long v21 = (unsigned __int8 *)(a5 + 120);
          if (*(_DWORD *)(a5 + 128) == 2)
          {
            uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v14, (uint64_t)v21, 3);
            if (result != 3) {
              return result;
            }
          }
          else
          {
            uint64_t v22 = *v21;
            uint64_t v23 = (void *)(*(void *)(a3 + 16) + 16 * v14);
            *uint64_t v23 = 2;
            v23[1] = v22;
          }
          unsigned int v24 = (unsigned __int8 *)(a5 + 148);
          if (*(_DWORD *)(a5 + 156) == 2)
          {
            return sub_1CBDA0A88((uint64_t)a1, a3, v15, (uint64_t)v24, 3);
          }
          else
          {
            uint64_t v25 = *v24;
            uint64_t v26 = (void *)(*(void *)(a3 + 16) + 16 * v15);
            *uint64_t v26 = 2;
            v26[1] = v25;
            return 3;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD44587C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x11u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    int v13 = *(unsigned __int8 *)(a5 + 144);
    uint64_t v14 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v15 = *(void *)(a3 + 16);
    uint64_t v16 = (void *)(v15 + 16 * v10);
    if (*(unsigned char *)v16 == 2)
    {
      uint64_t v16 = (void *)(v15 + 16 * v10);
      v14 |= v16[1];
    }
    else
    {
      void *v16 = 2;
    }
    v16[1] = v14;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v13 != 0, (unsigned __int8 *)(a5 + 100), (unsigned int *)(a5 + 112));
    return sub_1CBDA2DA0((uint64_t)a1, a3, v11, a5 + 36);
  }
  return result;
}

uint64_t sub_1CD445998(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x11u);
  unsigned int v12 = sub_1CBDA6464(v8, 0x1Cu);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    int v14 = *(unsigned __int8 *)(a5 + 144);
    uint64_t v15 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v16 = *(void *)(a3 + 16);
    int v17 = (void *)(v16 + 16 * v10);
    if (*(unsigned char *)v17 == 2)
    {
      int v17 = (void *)(v16 + 16 * v10);
      v15 |= v17[1];
    }
    else
    {
      *int v17 = 2;
    }
    v17[1] = v15;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v14 != 0, (unsigned __int8 *)(a5 + 100), (unsigned int *)(a5 + 112));
    uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v11, a5 + 36);
    if (result == 3)
    {
      uint64_t v18 = (unsigned __int8 *)(a5 + 64);
      if (*(_DWORD *)(a5 + 72) == 2)
      {
        return sub_1CBDA0A88((uint64_t)a1, a3, v12, (uint64_t)v18, 3);
      }
      else
      {
        uint64_t v19 = *v18;
        uint64_t v20 = (void *)(*(void *)(a3 + 16) + 16 * v12);
        void *v20 = 2;
        v20[1] = v19;
        return 3;
      }
    }
  }
  return result;
}

uint64_t sub_1CD445B14(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x11u);
  unsigned int v12 = sub_1CBDA6464(v8, 4u);
  unsigned int v13 = sub_1CBDA6464(v8, 0x14u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    int v15 = *(unsigned __int8 *)(a5 + 168);
    uint64_t v16 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v17 = *(void *)(a3 + 16);
    uint64_t v18 = (void *)(v17 + 16 * v10);
    if (*(unsigned char *)v18 == 2)
    {
      uint64_t v18 = (void *)(v17 + 16 * v10);
      v16 |= v18[1];
    }
    else
    {
      void *v18 = 2;
    }
    v18[1] = v16;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v15 != 0, (unsigned __int8 *)(a5 + 128), (unsigned int *)(a5 + 136));
    uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v11, a5 + 92);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v12, a5 + 36);
      if (result == 3)
      {
        return sub_1CBDA2DA0((uint64_t)a1, a3, v13, a5 + 64);
      }
    }
  }
  return result;
}

uint64_t sub_1CD445C94(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x11u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    int v13 = *(unsigned __int8 *)(a5 + 112);
    uint64_t v14 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v15 = *(void *)(a3 + 16);
    uint64_t v16 = (void *)(v15 + 16 * v10);
    if (*(unsigned char *)v16 == 2)
    {
      uint64_t v16 = (void *)(v15 + 16 * v10);
      v14 |= v16[1];
    }
    else
    {
      void *v16 = 2;
    }
    v16[1] = v14;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v13 != 0, (unsigned __int8 *)(a5 + 72), (unsigned int *)(a5 + 80));
    return sub_1CBDA2DA0((uint64_t)a1, a3, v11, a5 + 36);
  }
  return result;
}

uint64_t sub_1CD445DB0(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x11u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    int v13 = *(unsigned __int8 *)(a5 + 116);
    uint64_t v14 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v15 = *(void *)(a3 + 16);
    uint64_t v16 = (void *)(v15 + 16 * v10);
    if (*(unsigned char *)v16 == 2)
    {
      uint64_t v16 = (void *)(v15 + 16 * v10);
      v14 |= v16[1];
    }
    else
    {
      void *v16 = 2;
    }
    v16[1] = v14;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v13 != 0, (unsigned __int8 *)(a5 + 72), (unsigned int *)(a5 + 84));
    return sub_1CBDA2DA0((uint64_t)a1, a3, v11, a5 + 36);
  }
  return result;
}

void sub_1CD445ECC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x11u);
  unsigned int v12 = sub_1CBDA6464(v8, 4u);
  unsigned int v13 = sub_1CBDA6464(v8, 0x14u);
  sub_1CBDA2E7C((uint64_t)a1, a3, v9, a5);
  if (v14 == 3)
  {
    int v15 = *(unsigned __int8 *)(a5 + 168);
    uint64_t v16 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v17 = *(void *)(a3 + 16);
    uint64_t v18 = (void *)(v17 + 16 * v10);
    if (*(unsigned char *)v18 == 2)
    {
      uint64_t v18 = (void *)(v17 + 16 * v10);
      v16 |= v18[1];
    }
    else
    {
      void *v18 = 2;
    }
    v18[1] = v16;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v15 != 0, (unsigned __int8 *)(a5 + 128), (unsigned int *)(a5 + 136));
    if (sub_1CBDA2F8C((uint64_t)a1, a3, v11, a5 + 36) == 3
      && sub_1CBDA2F8C((uint64_t)a1, a3, v12, a5 + 64) == 3)
    {
      sub_1CBDA2F8C((uint64_t)a1, a3, v13, a5 + 92);
    }
  }
}

uint64_t sub_1CD446048(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x11u);
  unsigned int v12 = sub_1CBDA6464(v8, 4u);
  uint64_t result = sub_1CBDA3068((uint64_t)a1, a3, v9, a5);
  if (result == 3)
  {
    int v14 = *(unsigned __int8 *)(a5 + 136);
    uint64_t v15 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v16 = *(void *)(a3 + 16);
    uint64_t v17 = (void *)(v16 + 16 * v10);
    if (*(unsigned char *)v17 == 2)
    {
      uint64_t v17 = (void *)(v16 + 16 * v10);
      v15 |= v17[1];
    }
    else
    {
      *uint64_t v17 = 2;
    }
    v17[1] = v15;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v14 != 0, (unsigned __int8 *)(a5 + 96), (unsigned int *)(a5 + 104));
    uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v11, a5 + 32);
    if (result == 3)
    {
      return sub_1CBDA2DA0((uint64_t)a1, a3, v12, a5 + 60);
    }
  }
  return result;
}

uint64_t sub_1CD446198(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x11u);
  unsigned int v12 = sub_1CBDA6464(v8, 4u);
  unsigned int v13 = sub_1CBDA6464(v8, 0x14u);
  uint64_t result = sub_1CBDA3068((uint64_t)a1, a3, v9, a5);
  if (result == 3)
  {
    int v15 = *(unsigned __int8 *)(a5 + 164);
    uint64_t v16 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v17 = *(void *)(a3 + 16);
    uint64_t v18 = (void *)(v17 + 16 * v10);
    if (*(unsigned char *)v18 == 2)
    {
      uint64_t v18 = (void *)(v17 + 16 * v10);
      v16 |= v18[1];
    }
    else
    {
      void *v18 = 2;
    }
    v18[1] = v16;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v15 != 0, (unsigned __int8 *)(a5 + 124), (unsigned int *)(a5 + 132));
    uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v11, a5 + 32);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v12, a5 + 60);
      if (result == 3)
      {
        return sub_1CBDA2DA0((uint64_t)a1, a3, v13, a5 + 88);
      }
    }
  }
  return result;
}

uint64_t sub_1CD446314(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x11u);
  unsigned int v12 = sub_1CBDA6464(v8, 4u);
  unsigned int v13 = sub_1CBDA6464(v8, 0x14u);
  uint64_t result = sub_1CBDA315C((uint64_t)a1, a3, v9, a5);
  if (result == 3)
  {
    int v15 = *(unsigned __int8 *)(a5 + 164);
    uint64_t v16 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v17 = *(void *)(a3 + 16);
    uint64_t v18 = (void *)(v17 + 16 * v10);
    if (*(unsigned char *)v18 == 2)
    {
      uint64_t v18 = (void *)(v17 + 16 * v10);
      v16 |= v18[1];
    }
    else
    {
      void *v18 = 2;
    }
    v18[1] = v16;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v15 != 0, (unsigned __int8 *)(a5 + 124), (unsigned int *)(a5 + 132));
    uint64_t result = sub_1CBDA2F8C((uint64_t)a1, a3, v11, a5 + 32);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA2F8C((uint64_t)a1, a3, v12, a5 + 60);
      if (result == 3)
      {
        return sub_1CBDA2F8C((uint64_t)a1, a3, v13, a5 + 88);
      }
    }
  }
  return result;
}

uint64_t sub_1CD446490(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Fu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x59u);
  unsigned int v12 = sub_1CBDA6464(v8, 0x5Au);
  unsigned int v13 = sub_1CBDA6464(v8, 0x3Du);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 165), (unsigned __int8 *)(a5 + 40), (unsigned int *)(a5 + 132));
  BOOL v14 = *a1 >= 4 && *(unsigned char *)(a5 + 32) == 0;
  uint64_t v15 = 0x4000000;
  if (!v14) {
    uint64_t v15 = 0;
  }
  unint64_t v16 = *(unsigned int *)(a5 + 48) | ((unint64_t)*(unsigned int *)(a5 + 52) << 11) | ((unint64_t)*(void *)(a5 + 56) << 7) | (HIDWORD(*(void *)(a5 + 56)) << 23) | (32 * *(unsigned int *)(a5 + 64)) | ((unint64_t)*(unsigned int *)(a5 + 72) << 14) | ((unint64_t)*(unsigned __int8 *)(a5 + 69) << 21) | ((unint64_t)*(unsigned __int8 *)(a5 + 68) << 22) | ((unint64_t)*(unsigned __int8 *)(a5 + 164) << 25) | v15;
  uint64_t v17 = (void *)(*(void *)(a3 + 16) + 16 * v10);
  *uint64_t v17 = 2;
  v17[1] = v16;
  uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v11, a5 + 76, 1);
  if (result == 3)
  {
    uint64_t result = sub_1CBDA0B7C((uint64_t)a1, a3, v12, a5 + 104);
    if (result == 3)
    {
      unsigned int v19 = sub_1CD44F8C8(a5, *a1);
      return sub_1CBDA6388((uint64_t)a1, a3, v13, a5, v19);
    }
  }
  return result;
}

uint64_t sub_1CD446634(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x57u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x2Fu);
  unsigned int v12 = sub_1CBDA6464(v8, 0x6Au);
  unsigned int v13 = sub_1CBDA6464(v8, 0x6Bu);
  unsigned int v14 = sub_1CBDA6464(v8, 0x6Cu);
  unsigned int v24 = sub_1CBDA6464(v8, 0x6Du);
  unsigned int v15 = sub_1CBDA6464(v8, 0x6Eu);
  uint64_t result = sub_1CBDA156C((uint64_t)a1, (unsigned int *)a3, v9, a5);
  if (result == 3)
  {
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, *(unsigned __int8 *)(a5 + 168), (unsigned __int8 *)(a5 + 40), (unsigned int *)(a5 + 136));
    uint64_t v17 = *(unsigned int *)(a5 + 12);
    if (v17 >= 3) {
      llvm::report_fatal_error((llvm *)"Unhandled size for getStorageFormat", (const llvm::Twine *)1);
    }
    uint64_t v18 = (void *)(*(void *)(a3 + 16) + 16 * v11);
    uint64_t v19 = v17 | (16 * *(unsigned __int8 *)(a5 + 48));
    void *v18 = 2;
    v18[1] = v19;
    uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v12, a5 + 108, 1);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v13, a5 + 80, 1);
      if (result == 3)
      {
        uint64_t result = sub_1CBDA3234((uint64_t)a1, (unsigned int *)a3, v14, a5 + 52);
        if (result == 3)
        {
          uint64_t v20 = (void *)(*(void *)(a3 + 16) + 16 * v24);
          uint64_t v21 = *(__int16 *)(a5 + 28);
          void *v20 = 2;
          v20[1] = v21;
          uint64_t v22 = *(__int16 *)(a5 + 30);
          uint64_t v23 = (void *)(*(void *)(a3 + 16) + 16 * v15);
          *uint64_t v23 = 2;
          v23[1] = v22;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD446804(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x57u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x2Fu);
  unsigned int v12 = sub_1CBDA6464(v8, 0x6Au);
  unsigned int v13 = sub_1CBDA6464(v8, 0x6Bu);
  unsigned int v14 = sub_1CBDA6464(v8, 0x6Cu);
  unsigned int v28 = sub_1CBDA6464(v8, 0x6Du);
  unsigned int v15 = sub_1CBDA6464(v8, 0x6Eu);
  uint64_t result = sub_1CBDA0E68((uint64_t)a1, (unsigned int *)a3, v9, a5, 0, 0);
  if (result == 3)
  {
    int v17 = *(unsigned __int8 *)(a5 + 168);
    uint64_t v18 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v19 = *(void *)(a3 + 16);
    uint64_t v20 = (void *)(v19 + 16 * v10);
    if (*(unsigned char *)v20 == 2)
    {
      uint64_t v20 = (void *)(v19 + 16 * v10);
      v18 |= v20[1];
    }
    else
    {
      void *v20 = 2;
    }
    v20[1] = v18;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v17 != 0, (unsigned __int8 *)(a5 + 40), (unsigned int *)(a5 + 136));
    uint64_t v21 = *(unsigned int *)(a5 + 12);
    if (v21 >= 3) {
      llvm::report_fatal_error((llvm *)"Unhandled size for getStorageFormat", (const llvm::Twine *)1);
    }
    uint64_t v22 = (void *)(*(void *)(a3 + 16) + 16 * v11);
    uint64_t v23 = v21 | (16 * *(unsigned __int8 *)(a5 + 48));
    *uint64_t v22 = 2;
    v22[1] = v23;
    uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v12, a5 + 108, 1);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v13, a5 + 80, 1);
      if (result == 3)
      {
        uint64_t result = sub_1CBDA3234((uint64_t)a1, (unsigned int *)a3, v14, a5 + 52);
        if (result == 3)
        {
          unsigned int v24 = (void *)(*(void *)(a3 + 16) + 16 * v28);
          uint64_t v25 = *(__int16 *)(a5 + 28);
          *unsigned int v24 = 2;
          v24[1] = v25;
          uint64_t v26 = *(__int16 *)(a5 + 30);
          unsigned int v27 = (void *)(*(void *)(a3 + 16) + 16 * v15);
          *unsigned int v27 = 2;
          v27[1] = v26;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD446A1C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x6Bu);
  unsigned int v12 = sub_1CBDA6464(v8, 0x6Cu);
  unsigned int v13 = sub_1CBDA6464(v8, 0x6Du);
  unsigned int v14 = sub_1CBDA6464(v8, 0x6Eu);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    int v16 = *(unsigned __int8 *)(a5 + 172);
    uint64_t v17 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v18 = *(void *)(a3 + 16);
    uint64_t v19 = (void *)(v18 + 16 * v10);
    if (*(unsigned char *)v19 == 2)
    {
      uint64_t v19 = (void *)(v18 + 16 * v10);
      v17 |= v19[1];
    }
    else
    {
      *uint64_t v19 = 2;
    }
    v19[1] = v17;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v16 != 0, (unsigned __int8 *)(a5 + 40), (unsigned int *)(a5 + 140));
    uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v11, a5 + 80, 1);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA3234((uint64_t)a1, (unsigned int *)a3, v12, a5 + 52);
      if (result == 3)
      {
        uint64_t v20 = (void *)(*(void *)(a3 + 16) + 16 * v13);
        uint64_t v21 = *(__int16 *)(a5 + 28);
        void *v20 = 2;
        v20[1] = v21;
        uint64_t v22 = *(__int16 *)(a5 + 30);
        uint64_t v23 = (void *)(*(void *)(a3 + 16) + 16 * v14);
        *uint64_t v23 = 2;
        v23[1] = v22;
      }
    }
  }
  return result;
}

uint64_t sub_1CD446BAC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x6Bu);
  unsigned int v12 = sub_1CBDA6464(v8, 0x6Cu);
  unsigned int v13 = sub_1CBDA6464(v8, 0x6Du);
  unsigned int v14 = sub_1CBDA6464(v8, 0x6Eu);
  uint64_t result = sub_1CBDA0E68((uint64_t)a1, (unsigned int *)a3, v9, a5, 0x100000004, 0x100000001uLL);
  if (result == 3)
  {
    int v16 = *(unsigned __int8 *)(a5 + 172);
    uint64_t v17 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v18 = *(void *)(a3 + 16);
    uint64_t v19 = (void *)(v18 + 16 * v10);
    if (*(unsigned char *)v19 == 2)
    {
      uint64_t v19 = (void *)(v18 + 16 * v10);
      v17 |= v19[1];
    }
    else
    {
      *uint64_t v19 = 2;
    }
    v19[1] = v17;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v16 != 0, (unsigned __int8 *)(a5 + 40), (unsigned int *)(a5 + 140));
    uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v11, a5 + 80, 1);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA3234((uint64_t)a1, (unsigned int *)a3, v12, a5 + 52);
      if (result == 3)
      {
        uint64_t v20 = (void *)(*(void *)(a3 + 16) + 16 * v13);
        uint64_t v21 = *(__int16 *)(a5 + 28);
        void *v20 = 2;
        v20[1] = v21;
        uint64_t v22 = *(__int16 *)(a5 + 30);
        uint64_t v23 = (void *)(*(void *)(a3 + 16) + 16 * v14);
        *uint64_t v23 = 2;
        v23[1] = v22;
      }
    }
  }
  return result;
}

uint64_t sub_1CD446D44(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x11u);
  unsigned int v12 = sub_1CBDA6464(v8, 4u);
  unsigned int v13 = sub_1CBDA6464(v8, 0x14u);
  unsigned int v14 = sub_1CBDA6464(v8, 0x41u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    int v16 = *(unsigned __int8 *)(a5 + 164);
    uint64_t v17 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v18 = *(void *)(a3 + 16);
    uint64_t v19 = (void *)(v18 + 16 * v10);
    if (*(unsigned char *)v19 == 2)
    {
      uint64_t v19 = (void *)(v18 + 16 * v10);
      v17 |= v19[1];
    }
    else
    {
      *uint64_t v19 = 2;
    }
    v19[1] = v17;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v16 != 0, (unsigned __int8 *)(a5 + 124), (unsigned int *)(a5 + 132));
    uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v11, a5 + 84, 1);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA0B7C((uint64_t)a1, a3, v12, a5 + 28);
      if (result == 3)
      {
        uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v13, a5 + 56, 1);
        if (result == 3)
        {
          if (*(unsigned char *)(a5 + 112)) {
            uint64_t v20 = *(unsigned __int8 *)(a5 + 112);
          }
          else {
            uint64_t v20 = 32;
          }
          uint64_t v21 = (void *)(*(void *)(a3 + 16) + 16 * v14);
          *uint64_t v21 = 2;
          v21[1] = v20;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD446EEC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x11u);
  unsigned int v12 = sub_1CBDA6464(v8, 4u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    int v14 = *(unsigned __int8 *)(a5 + 132);
    uint64_t v15 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v16 = *(void *)(a3 + 16);
    uint64_t v17 = (void *)(v16 + 16 * v10);
    if (*(unsigned char *)v17 == 2)
    {
      uint64_t v17 = (void *)(v16 + 16 * v10);
      v15 |= v17[1];
    }
    else
    {
      *uint64_t v17 = 2;
    }
    v17[1] = v15;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v14 != 0, (unsigned __int8 *)(a5 + 92), (unsigned int *)(a5 + 100));
    uint64_t result = sub_1CBDA0990((uint64_t)a1, a3, v11, a5 + 28);
    if (result == 3)
    {
      return sub_1CBDA0A88((uint64_t)a1, a3, v12, a5 + 56, 1);
    }
  }
  return result;
}

uint64_t sub_1CD447044(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x18u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    int v13 = *(unsigned __int8 *)(a5 + 104);
    uint64_t v14 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v15 = *(void *)(a3 + 16);
    uint64_t v16 = (void *)(v15 + 16 * v10);
    if (*(unsigned char *)v16 == 2)
    {
      uint64_t v16 = (void *)(v15 + 16 * v10);
      v14 |= v16[1];
    }
    else
    {
      void *v16 = 2;
    }
    v16[1] = v14;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v13 != 0, (unsigned __int8 *)(a5 + 64), (unsigned int *)(a5 + 72));
    return sub_1CBDA0B7C((uint64_t)a1, a3, v11, a5 + 28);
  }
  return result;
}

uint64_t sub_1CD447160(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x18u);
  unsigned int v12 = sub_1CBDA6464(v8, 0x19u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    int v14 = *(unsigned __int8 *)(a5 + 132);
    uint64_t v15 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v16 = *(void *)(a3 + 16);
    uint64_t v17 = (void *)(v16 + 16 * v10);
    if (*(unsigned char *)v17 == 2)
    {
      uint64_t v17 = (void *)(v16 + 16 * v10);
      v15 |= v17[1];
    }
    else
    {
      *uint64_t v17 = 2;
    }
    v17[1] = v15;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v14 != 0, (unsigned __int8 *)(a5 + 92), (unsigned int *)(a5 + 100));
    uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v11, a5 + 28, 1);
    if (result == 3)
    {
      return sub_1CBDA0A88((uint64_t)a1, a3, v12, a5 + 56, 1);
    }
  }
  return result;
}

uint64_t sub_1CD4472BC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  if (!v6 & v5) {
    return 0;
  }
  switch(a4)
  {
    case 'D':
      return sub_1CD447318(a1, a2, a3, a5);
    case 'E':
      uint64_t v8 = a5;
      return sub_1CD4476C4(a1, a2, a3, v8);
    case 'F':
      uint64_t v8 = a5;
      return sub_1CD4476C4(a1, a2, a3, v8);
    case 'G':
      uint64_t v9 = a5;
      goto LABEL_10;
    case 'H':
      uint64_t v9 = a5;
LABEL_10:
      uint64_t result = sub_1CD4474D0(a1, a2, a3, v9);
      break;
    default:
      JUMPOUT(0);
  }
  return result;
}

uint64_t sub_1CD447318(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7 = a2;
  unsigned int v8 = sub_1CBDA6464(a2, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x54u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v12 = sub_1CBDA6464(v7, 4u);
  unsigned int v13 = sub_1CBDA6464(v7, 0x14u);
  unsigned int v14 = sub_1CBDA6464(v7, 0x37u);
  uint64_t result = sub_1CBDA3344((uint64_t)a1, a3, v8, (int *)a4);
  if (result == 3)
  {
    uint64_t result = sub_1CBDA33C8(a1, a3, v9, *(_DWORD *)a4, *(unsigned char *)(a4 + 20), *(unsigned __int8 *)(a4 + 200), (unsigned __int8 *)(a4 + 156), (unsigned int *)(a4 + 168));
    if (result == 3)
    {
      uint64_t v16 = (*(_DWORD *)(a4 + 164) - 1);
      uint64_t v17 = v16 < 7 ? v16 + 1 : 0;
      uint64_t v18 = (void *)(*(void *)(a3 + 16) + 16 * v10);
      void *v18 = 2;
      v18[1] = v17;
      uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v11, a4 + 40);
      if (result == 3)
      {
        uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v12, a4 + 68);
        if (result == 3)
        {
          uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v13, a4 + 96);
          if (result == 3)
          {
            return sub_1CBDA2DA0((uint64_t)a1, a3, v14, a4 + 124);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD4474D0(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7 = a2;
  unsigned int v8 = sub_1CBDA6464(a2, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x54u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v12 = sub_1CBDA6464(v7, 4u);
  unsigned int v13 = sub_1CBDA6464(v7, 0x14u);
  unsigned int v14 = sub_1CBDA6464(v7, 0x37u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v8, a4, 1);
  if (result == 3)
  {
    int v16 = *(unsigned __int8 *)(a4 + 192);
    uint64_t v17 = 32 * *(unsigned __int8 *)(a4 + 16);
    uint64_t v18 = *(void *)(a3 + 16);
    uint64_t v19 = (void *)(v18 + 16 * v9);
    if (*(unsigned char *)v19 == 2)
    {
      uint64_t v19 = (void *)(v18 + 16 * v9);
      v17 |= v19[1];
    }
    else
    {
      *uint64_t v19 = 2;
    }
    v19[1] = v17;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, v16 != 0, (unsigned __int8 *)(a4 + 148), (unsigned int *)(a4 + 160));
    uint64_t v20 = (*(_DWORD *)(a4 + 156) - 1);
    uint64_t v21 = v20 < 7 ? v20 + 1 : 0;
    uint64_t v22 = (void *)(*(void *)(a3 + 16) + 16 * v10);
    *uint64_t v22 = 2;
    v22[1] = v21;
    uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v11, a4 + 28);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v12, a4 + 56);
      if (result == 3)
      {
        uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v13, a4 + 84, 1);
        if (result == 3)
        {
          return sub_1CBDA0A88((uint64_t)a1, a3, v14, a4 + 112, 1);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD4476C4(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7 = a2;
  unsigned int v8 = sub_1CBDA6464(a2, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x54u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v12 = sub_1CBDA6464(v7, 4u);
  unsigned int v13 = sub_1CBDA6464(v7, 0x14u);
  unsigned int v14 = sub_1CBDA6464(v7, 0x37u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v8, a4, 1);
  if (result == 3)
  {
    int v16 = *(unsigned __int8 *)(a4 + 200);
    uint64_t v17 = 32 * *(unsigned __int8 *)(a4 + 16);
    uint64_t v18 = *(void *)(a3 + 16);
    uint64_t v19 = (void *)(v18 + 16 * v9);
    if (*(unsigned char *)v19 == 2)
    {
      uint64_t v19 = (void *)(v18 + 16 * v9);
      v17 |= v19[1];
    }
    else
    {
      *uint64_t v19 = 2;
    }
    v19[1] = v17;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, v16 != 0, (unsigned __int8 *)(a4 + 156), (unsigned int *)(a4 + 168));
    uint64_t v20 = (*(_DWORD *)(a4 + 164) - 1);
    uint64_t v21 = v20 < 7 ? v20 + 1 : 0;
    uint64_t v22 = (void *)(*(void *)(a3 + 16) + 16 * v10);
    *uint64_t v22 = 2;
    v22[1] = v21;
    uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v11, a4 + 36);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v12, a4 + 64);
      if (result == 3)
      {
        uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v13, a4 + 92);
        if (result == 3)
        {
          return sub_1CBDA2DA0((uint64_t)a1, a3, v14, a4 + 120);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD4478B0(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  if (!v6 & v5) {
    return 0;
  }
  switch(a4)
  {
    case 'D':
      return sub_1CD447318(a1, a2, a3, a5);
    case 'E':
      uint64_t v8 = a5;
      return sub_1CD4476C4(a1, a2, a3, v8);
    case 'F':
      uint64_t v8 = a5;
      return sub_1CD4476C4(a1, a2, a3, v8);
    case 'G':
      uint64_t v9 = a5;
      goto LABEL_10;
    case 'H':
      uint64_t v9 = a5;
LABEL_10:
      uint64_t result = sub_1CD4474D0(a1, a2, a3, v9);
      break;
    default:
      JUMPOUT(0);
  }
  return result;
}

uint64_t sub_1CD44790C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  switch(a4)
  {
    case 'J':
      uint64_t v6 = a5;
      return sub_1CD447944(a1, a2, a3, v6);
    case 'I':
      uint64_t v6 = a5;
      return sub_1CD447944(a1, a2, a3, v6);
    case 'D':
      return sub_1CD447318(a1, a2, a3, a5);
    default:
      return 0;
  }
}

uint64_t sub_1CD447944(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7 = a2;
  unsigned int v8 = sub_1CBDA6464(a2, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x54u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v12 = sub_1CBDA6464(v7, 4u);
  unsigned int v13 = sub_1CBDA6464(v7, 0x14u);
  unsigned int v14 = sub_1CBDA6464(v7, 0x37u);
  uint64_t v15 = (void *)(*(void *)(a3 + 16) + 16 * v8);
  uint64_t v16 = *(unsigned __int8 *)(a4 + 1);
  if (v16 == 6)
  {
    uint64_t v17 = 2;
  }
  else if (v16 == 7)
  {
    uint64_t v17 = 1;
  }
  else
  {
    uint64_t v17 = v16 + 71;
  }
  *uint64_t v15 = 1;
  v15[1] = v17;
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *(unsigned __int8 *)(a4 + 168), (unsigned __int8 *)(a4 + 124), (unsigned int *)(a4 + 136));
  uint64_t v18 = (*(_DWORD *)(a4 + 132) - 1);
  if (v18 < 7) {
    uint64_t v19 = v18 + 1;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = (void *)(*(void *)(a3 + 16) + 16 * v10);
  void *v20 = 2;
  v20[1] = v19;
  uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v11, a4 + 4);
  if (result == 3)
  {
    uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v12, a4 + 32);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v13, a4 + 60, 1);
      if (result == 3)
      {
        return sub_1CBDA0A88((uint64_t)a1, a3, v14, a4 + 88, 1);
      }
    }
  }
  return result;
}

uint64_t sub_1CD447B0C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  switch(a4)
  {
    case ']':
      return sub_1CD447B68(a1, a2, a3, a5);
    case '_':
      uint64_t v6 = a5;
      return sub_1CD447F34(a1, a2, a3, v6);
      uint64_t v6 = a5;
      return sub_1CD447F34(a1, a2, a3, v6);
    case 'a':
      uint64_t v7 = a5;
      goto LABEL_8;
    case 'b':
      uint64_t v7 = a5;
LABEL_8:
      uint64_t result = sub_1CD447D30(a1, a2, a3, v7);
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_1CD447B68(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7 = a2;
  unsigned int v8 = sub_1CBDA6464(a2, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x54u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v12 = sub_1CBDA6464(v7, 4u);
  unsigned int v13 = sub_1CBDA6464(v7, 0x14u);
  unsigned int v14 = sub_1CBDA6464(v7, 0x37u);
  uint64_t result = sub_1CBDA3344((uint64_t)a1, a3, v8, (int *)a4);
  if (result == 3)
  {
    uint64_t result = sub_1CBDA33C8(a1, a3, v9, *(_DWORD *)a4, *(unsigned char *)(a4 + 20), *(unsigned __int8 *)(a4 + 200), (unsigned __int8 *)(a4 + 156), (unsigned int *)(a4 + 168));
    if (result == 3)
    {
      uint64_t v16 = *(int *)(a4 + 164);
      uint64_t v17 = v16 > 6 ? 0 : qword_1CDF53838[v16];
      uint64_t v18 = (void *)(*(void *)(a3 + 16) + 16 * v10);
      void *v18 = 2;
      v18[1] = v17;
      uint64_t result = sub_1CBDA0B7C((uint64_t)a1, a3, v11, a4 + 40);
      if (result == 3)
      {
        uint64_t result = sub_1CBDA0B7C((uint64_t)a1, a3, v12, a4 + 68);
        if (result == 3)
        {
          uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v13, a4 + 96);
          if (result == 3)
          {
            return sub_1CBDA2DA0((uint64_t)a1, a3, v14, a4 + 124);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD447D30(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7 = a2;
  unsigned int v8 = sub_1CBDA6464(a2, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x54u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v12 = sub_1CBDA6464(v7, 4u);
  unsigned int v13 = sub_1CBDA6464(v7, 0x14u);
  unsigned int v14 = sub_1CBDA6464(v7, 0x37u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v8, a4, 1);
  if (result == 3)
  {
    int v16 = *(unsigned __int8 *)(a4 + 192);
    uint64_t v17 = 32 * *(unsigned __int8 *)(a4 + 16);
    uint64_t v18 = *(void *)(a3 + 16);
    uint64_t v19 = (void *)(v18 + 16 * v9);
    if (*(unsigned char *)v19 == 2)
    {
      uint64_t v19 = (void *)(v18 + 16 * v9);
      v17 |= v19[1];
    }
    else
    {
      *uint64_t v19 = 2;
    }
    v19[1] = v17;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, v16 != 0, (unsigned __int8 *)(a4 + 148), (unsigned int *)(a4 + 160));
    uint64_t v20 = *(int *)(a4 + 156);
    uint64_t v21 = v20 > 6 ? 0 : qword_1CDF53838[v20];
    uint64_t v22 = (void *)(*(void *)(a3 + 16) + 16 * v10);
    *uint64_t v22 = 2;
    v22[1] = v21;
    uint64_t result = sub_1CBDA0B7C((uint64_t)a1, a3, v11, a4 + 28);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA0B7C((uint64_t)a1, a3, v12, a4 + 56);
      if (result == 3)
      {
        uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v13, a4 + 84, 1);
        if (result == 3)
        {
          return sub_1CBDA0A88((uint64_t)a1, a3, v14, a4 + 112, 1);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD447F34(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7 = a2;
  unsigned int v8 = sub_1CBDA6464(a2, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x54u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v12 = sub_1CBDA6464(v7, 4u);
  unsigned int v13 = sub_1CBDA6464(v7, 0x14u);
  unsigned int v14 = sub_1CBDA6464(v7, 0x37u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v8, a4, 1);
  if (result == 3)
  {
    int v16 = *(unsigned __int8 *)(a4 + 200);
    uint64_t v17 = 32 * *(unsigned __int8 *)(a4 + 16);
    uint64_t v18 = *(void *)(a3 + 16);
    uint64_t v19 = (void *)(v18 + 16 * v9);
    if (*(unsigned char *)v19 == 2)
    {
      uint64_t v19 = (void *)(v18 + 16 * v9);
      v17 |= v19[1];
    }
    else
    {
      *uint64_t v19 = 2;
    }
    v19[1] = v17;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, v16 != 0, (unsigned __int8 *)(a4 + 156), (unsigned int *)(a4 + 168));
    uint64_t v20 = *(int *)(a4 + 164);
    uint64_t v21 = v20 > 6 ? 0 : qword_1CDF53838[v20];
    uint64_t v22 = (void *)(*(void *)(a3 + 16) + 16 * v10);
    *uint64_t v22 = 2;
    v22[1] = v21;
    uint64_t result = sub_1CBDA0B7C((uint64_t)a1, a3, v11, a4 + 36);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA0B7C((uint64_t)a1, a3, v12, a4 + 64);
      if (result == 3)
      {
        uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v13, a4 + 92);
        if (result == 3)
        {
          return sub_1CBDA2DA0((uint64_t)a1, a3, v14, a4 + 120);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD448130(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  switch(a4)
  {
    case ']':
      return sub_1CD447B68(a1, a2, a3, a5);
    case '_':
      uint64_t v6 = a5;
      return sub_1CD447F34(a1, a2, a3, v6);
      uint64_t v6 = a5;
      return sub_1CD447F34(a1, a2, a3, v6);
    case 'a':
      uint64_t v7 = a5;
      goto LABEL_8;
    case 'b':
      uint64_t v7 = a5;
LABEL_8:
      uint64_t result = sub_1CD447D30(a1, a2, a3, v7);
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_1CD44818C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  switch(a4)
  {
    case 'd':
      uint64_t v6 = a5;
      return sub_1CD4481C4(a1, a2, a3, v6);
    case 'c':
      uint64_t v6 = a5;
      return sub_1CD4481C4(a1, a2, a3, v6);
    case ']':
      return sub_1CD447B68(a1, a2, a3, a5);
    default:
      return 0;
  }
}

uint64_t sub_1CD4481C4(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7 = a2;
  unsigned int v8 = sub_1CBDA6464(a2, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x54u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v12 = sub_1CBDA6464(v7, 4u);
  unsigned int v13 = sub_1CBDA6464(v7, 0x14u);
  unsigned int v14 = sub_1CBDA6464(v7, 0x37u);
  uint64_t v15 = (void *)(*(void *)(a3 + 16) + 16 * v8);
  uint64_t v16 = *(unsigned __int8 *)(a4 + 1);
  if (v16 == 6)
  {
    uint64_t v17 = 2;
  }
  else if (v16 == 7)
  {
    uint64_t v17 = 1;
  }
  else
  {
    uint64_t v17 = v16 + 71;
  }
  *uint64_t v15 = 1;
  v15[1] = v17;
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *(unsigned __int8 *)(a4 + 168), (unsigned __int8 *)(a4 + 124), (unsigned int *)(a4 + 136));
  uint64_t v18 = *(int *)(a4 + 132);
  if (v18 > 6) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = qword_1CDF53838[v18];
  }
  uint64_t v20 = (void *)(*(void *)(a3 + 16) + 16 * v10);
  void *v20 = 2;
  v20[1] = v19;
  uint64_t result = sub_1CBDA0B7C((uint64_t)a1, a3, v11, a4 + 4);
  if (result == 3)
  {
    uint64_t result = sub_1CBDA0B7C((uint64_t)a1, a3, v12, a4 + 32);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v13, a4 + 60, 1);
      if (result == 3)
      {
        return sub_1CBDA0A88((uint64_t)a1, a3, v14, a4 + 88, 1);
      }
    }
  }
  return result;
}

uint64_t sub_1CD44839C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  if (!v6 & v5) {
    return 0;
  }
  switch(a4)
  {
    case 161:
      return sub_1CD4483F8(a1, a2, a3, a5);
    case 162:
      uint64_t v8 = a5;
      return sub_1CD44870C(a1, a2, a3, v8);
    case 163:
      uint64_t v8 = a5;
      return sub_1CD44870C(a1, a2, a3, v8);
    case 164:
      uint64_t v9 = a5;
      goto LABEL_10;
    case 165:
      uint64_t v9 = a5;
LABEL_10:
      uint64_t result = sub_1CD448564(a1, a2, a3, v9);
      break;
    default:
      JUMPOUT(0);
  }
  return result;
}

uint64_t sub_1CD4483F8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7 = a2;
  unsigned int v8 = sub_1CBDA6464(a2, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 7u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x14u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x37u);
  uint64_t result = sub_1CBDA3344((uint64_t)a1, a3, v8, (int *)a4);
  if (result == 3)
  {
    uint64_t result = sub_1CBDA33C8(a1, a3, v9, *(_DWORD *)a4, *(unsigned char *)(a4 + 20), *(unsigned __int8 *)(a4 + 144), (unsigned __int8 *)(a4 + 104), (unsigned int *)(a4 + 112));
    if (result == 3)
    {
      unsigned int v14 = (void *)(*(void *)(a3 + 16) + 16 * v10);
      uint64_t v15 = *(unsigned __int8 *)(a4 + 97);
      if (v15 == 6) {
        uint64_t v16 = 2;
      }
      else {
        uint64_t v16 = v15 == 7 ? 1 : v15 + 71;
      }
      void *v14 = 1;
      v14[1] = v16;
      uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v11, a4 + 40);
      if (result == 3)
      {
        return sub_1CBDA2DA0((uint64_t)a1, a3, v12, a4 + 68);
      }
    }
  }
  return result;
}

uint64_t sub_1CD448564(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7 = a2;
  unsigned int v8 = sub_1CBDA6464(a2, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 7u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x14u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x37u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v8, a4, 1);
  if (result == 3)
  {
    int v14 = *(unsigned __int8 *)(a4 + 136);
    uint64_t v15 = 32 * *(unsigned __int8 *)(a4 + 16);
    uint64_t v16 = *(void *)(a3 + 16);
    uint64_t v17 = (void *)(v16 + 16 * v9);
    if (*(unsigned char *)v17 == 2)
    {
      uint64_t v17 = (void *)(v16 + 16 * v9);
      v15 |= v17[1];
    }
    else
    {
      *uint64_t v17 = 2;
    }
    v17[1] = v15;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, v14 != 0, (unsigned __int8 *)(a4 + 96), (unsigned int *)(a4 + 104));
    uint64_t v18 = (void *)(*(void *)(a3 + 16) + 16 * v10);
    uint64_t v19 = *(unsigned __int8 *)(a4 + 85);
    if (v19 == 6) {
      uint64_t v20 = 2;
    }
    else {
      uint64_t v20 = v19 == 7 ? 1 : v19 + 71;
    }
    void *v18 = 1;
    v18[1] = v20;
    uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v11, a4 + 28, 1);
    if (result == 3)
    {
      return sub_1CBDA0A88((uint64_t)a1, a3, v12, a4 + 56, 1);
    }
  }
  return result;
}

uint64_t sub_1CD44870C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7 = a2;
  unsigned int v8 = sub_1CBDA6464(a2, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 7u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x14u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x37u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v8, a4, 1);
  if (result == 3)
  {
    int v14 = *(unsigned __int8 *)(a4 + 144);
    uint64_t v15 = 32 * *(unsigned __int8 *)(a4 + 16);
    uint64_t v16 = *(void *)(a3 + 16);
    uint64_t v17 = (void *)(v16 + 16 * v9);
    if (*(unsigned char *)v17 == 2)
    {
      uint64_t v17 = (void *)(v16 + 16 * v9);
      v15 |= v17[1];
    }
    else
    {
      *uint64_t v17 = 2;
    }
    v17[1] = v15;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, v14 != 0, (unsigned __int8 *)(a4 + 104), (unsigned int *)(a4 + 112));
    uint64_t v18 = (void *)(*(void *)(a3 + 16) + 16 * v10);
    uint64_t v19 = *(unsigned __int8 *)(a4 + 93);
    if (v19 == 6) {
      uint64_t v20 = 2;
    }
    else {
      uint64_t v20 = v19 == 7 ? 1 : v19 + 71;
    }
    void *v18 = 1;
    v18[1] = v20;
    uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v11, a4 + 36);
    if (result == 3)
    {
      return sub_1CBDA2DA0((uint64_t)a1, a3, v12, a4 + 64);
    }
  }
  return result;
}

uint64_t sub_1CD4488AC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  if (!v6 & v5) {
    return 0;
  }
  switch(a4)
  {
    case 161:
      return sub_1CD4483F8(a1, a2, a3, a5);
    case 162:
      uint64_t v8 = a5;
      return sub_1CD44870C(a1, a2, a3, v8);
    case 163:
      uint64_t v8 = a5;
      return sub_1CD44870C(a1, a2, a3, v8);
    case 164:
      uint64_t v9 = a5;
      goto LABEL_10;
    case 165:
      uint64_t v9 = a5;
LABEL_10:
      uint64_t result = sub_1CD448564(a1, a2, a3, v9);
      break;
    default:
      JUMPOUT(0);
  }
  return result;
}

uint64_t sub_1CD448908(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  switch(a4)
  {
    case 167:
      uint64_t v6 = a5;
      return sub_1CD448940(a1, a2, a3, v6);
    case 166:
      uint64_t v6 = a5;
      return sub_1CD448940(a1, a2, a3, v6);
    case 161:
      return sub_1CD4483F8(a1, a2, a3, a5);
    default:
      return 0;
  }
}

uint64_t sub_1CD448940(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7 = a2;
  unsigned int v8 = sub_1CBDA6464(a2, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 7u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x14u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x37u);
  unsigned int v13 = (void *)(*(void *)(a3 + 16) + 16 * v8);
  uint64_t v14 = *(unsigned __int8 *)(a4 + 1);
  if (v14 == 6)
  {
    uint64_t v15 = 2;
  }
  else if (v14 == 7)
  {
    uint64_t v15 = 1;
  }
  else
  {
    uint64_t v15 = v14 + 71;
  }
  *unsigned int v13 = 1;
  v13[1] = v15;
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *(unsigned __int8 *)(a4 + 112), (unsigned __int8 *)(a4 + 72), (unsigned int *)(a4 + 80));
  uint64_t v16 = (void *)(*(void *)(a3 + 16) + 16 * v10);
  uint64_t v17 = *(unsigned __int8 *)(a4 + 61);
  if (v17 == 6)
  {
    uint64_t v18 = 2;
  }
  else if (v17 == 7)
  {
    uint64_t v18 = 1;
  }
  else
  {
    uint64_t v18 = v17 + 71;
  }
  void *v16 = 1;
  v16[1] = v18;
  uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v11, a4 + 4, 1);
  if (result == 3)
  {
    return sub_1CBDA0A88((uint64_t)a1, a3, v12, a4 + 32, 1);
  }
  return result;
}

uint64_t sub_1CD448ABC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x2Fu);
  unsigned int v12 = sub_1CBDA6464(v8, 0x11u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    int v14 = *(unsigned __int8 *)(a5 + 140);
    uint64_t v15 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v16 = *(void *)(a3 + 16);
    uint64_t v17 = (void *)(v16 + 16 * v10);
    if (*(unsigned char *)v17 == 2)
    {
      uint64_t v17 = (void *)(v16 + 16 * v10);
      v15 |= v17[1];
    }
    else
    {
      *uint64_t v17 = 2;
    }
    v17[1] = v15;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v14 != 0, (unsigned __int8 *)(a5 + 92), (unsigned int *)(a5 + 108));
    uint64_t v18 = qword_1CDF53780[*(int *)(a5 + 100)];
    uint64_t v19 = (void *)(*(void *)(a3 + 16) + 16 * v11);
    *uint64_t v19 = 2;
    v19[1] = v18;
    return sub_1CBDA2DA0((uint64_t)a1, a3, v12, a5 + 28);
  }
  return result;
}

uint64_t sub_1CD448C18(unsigned int *a1, unsigned __int16 a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x2Fu);
  unsigned int v12 = sub_1CBDA6464(v8, 0x11u);
  unsigned int v13 = sub_1CBDA6464(v8, 4u);
  int v14 = sub_1CBDB2780(*a3, 21, 0);
  if (v14 == 36)
  {
    int v15 = 1;
  }
  else
  {
    if (v14 != 37) {
      llvm::report_fatal_error((llvm *)"Unhandled norm_size", (const llvm::Twine *)1);
    }
    int v15 = 2;
  }
  uint64_t result = sub_1CBDA0898((uint64_t)a1, (uint64_t)a3, v9, a5, v15);
  if (result == 3)
  {
    int v17 = *(unsigned __int8 *)(a5 + 140);
    uint64_t v18 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v19 = *((void *)a3 + 2);
    uint64_t v20 = (void *)(v19 + 16 * v10);
    if (*(unsigned char *)v20 == 2)
    {
      uint64_t v20 = (void *)(v19 + 16 * v10);
      v18 |= v20[1];
    }
    else
    {
      void *v20 = 2;
    }
    v20[1] = v18;
    sub_1CBDA07C8(*a1, *((void *)a3 + 2), v10, v17 != 0, (unsigned __int8 *)(a5 + 92), (unsigned int *)(a5 + 108));
    uint64_t v21 = qword_1CDF53780[*(int *)(a5 + 100)];
    uint64_t v22 = (void *)(*((void *)a3 + 2) + 16 * v11);
    *uint64_t v22 = 2;
    v22[1] = v21;
    uint64_t result = sub_1CBDA2DA0((uint64_t)a1, (uint64_t)a3, v12, a5 + 28);
    if (result == 3)
    {
      return sub_1CBDA2DA0((uint64_t)a1, (uint64_t)a3, v13, a5 + 56);
    }
  }
  return result;
}

uint64_t sub_1CD448DD8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x2Fu);
  unsigned int v12 = sub_1CBDA6464(v8, 0x11u);
  int v13 = 1;
  if (*(unsigned char *)(a5 + 84)) {
    int v13 = 2;
  }
  uint64_t result = sub_1CBDA5AE0((uint64_t)a1, *(_DWORD *)a3, *(void *)(a3 + 16), v9, (int *)a5, *(_DWORD *)(a5 + 8), *(unsigned int *)(a5 + 12), *(_DWORD *)(a5 + 24), v13);
  if (result == 3)
  {
    uint64_t v15 = v9 + 1;
    unint64_t v16 = (unint64_t)*(unsigned int *)(a5 + 20) << 20;
    uint64_t v17 = *(void *)(a3 + 16);
    uint64_t v18 = (void *)(v17 + 16 * v15);
    if (*(unsigned char *)v18 == 2)
    {
      *(void *)(v17 + 16 * v15 + 8) |= v16;
    }
    else
    {
      void *v18 = 2;
      v18[1] = v16;
    }
    int v19 = *(unsigned __int8 *)(a5 + 120);
    uint64_t v20 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v21 = *(void *)(a3 + 16);
    uint64_t v22 = (void *)(v21 + 16 * v10);
    if (*(unsigned char *)v22 == 2)
    {
      uint64_t v22 = (void *)(v21 + 16 * v10);
      v20 |= v22[1];
    }
    else
    {
      *uint64_t v22 = 2;
    }
    v22[1] = v20;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v19 != 0, (unsigned __int8 *)(a5 + 72), (unsigned int *)(a5 + 88));
    uint64_t v23 = qword_1CDF53780[*(int *)(a5 + 80)];
    unsigned int v24 = (void *)(*(void *)(a3 + 16) + 16 * v11);
    *unsigned int v24 = 2;
    v24[1] = v23;
    return sub_1CBDA0A88((uint64_t)a1, a3, v12, a5 + 36, 1);
  }
  return result;
}

uint64_t sub_1CD448FA0(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x2Fu);
  unsigned int v12 = sub_1CBDA6464(v8, 0x11u);
  unsigned int v13 = sub_1CBDA6464(v8, 4u);
  unsigned int v14 = sub_1CBDA6464(v8, 0x14u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    int v16 = *(unsigned __int8 *)(a5 + 196);
    uint64_t v17 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v18 = *(void *)(a3 + 16);
    int v19 = (void *)(v18 + 16 * v10);
    if (*(unsigned char *)v19 == 2)
    {
      int v19 = (void *)(v18 + 16 * v10);
      v17 |= v19[1];
    }
    else
    {
      *int v19 = 2;
    }
    v19[1] = v17;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v16 != 0, (unsigned __int8 *)(a5 + 148), (unsigned int *)(a5 + 164));
    uint64_t v20 = *(int *)(a5 + 156);
    uint64_t v21 = (uint64_t *)((char *)&unk_1CDF537B8 + 8 * v20);
    uint64_t v22 = (char *)&unk_1CDF537D0 + 8 * v20;
    uint64_t v23 = (void *)(*(void *)(a3 + 16) + 16 * v11);
    if (*(_DWORD *)(a5 + 160) != 1) {
      uint64_t v21 = (uint64_t *)v22;
    }
    uint64_t v24 = *v21;
    *uint64_t v23 = 2;
    v23[1] = v24;
    uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v12, a5 + 28);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v13, a5 + 56);
      if (result == 3)
      {
        return sub_1CBDA2DA0((uint64_t)a1, a3, v14, a5 + 84);
      }
    }
  }
  return result;
}

uint64_t sub_1CD44917C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x2Fu);
  unsigned int v12 = sub_1CBDA6464(v8, 0x11u);
  unsigned int v13 = sub_1CBDA6464(v8, 4u);
  unsigned int v14 = sub_1CBDA6464(v8, 0x14u);
  unsigned int v15 = sub_1CBDA6464(v8, 0x37u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    int v17 = *(unsigned __int8 *)(a5 + 196);
    uint64_t v18 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v19 = *(void *)(a3 + 16);
    uint64_t v20 = (void *)(v19 + 16 * v10);
    if (*(unsigned char *)v20 == 2)
    {
      uint64_t v20 = (void *)(v19 + 16 * v10);
      v18 |= v20[1];
    }
    else
    {
      void *v20 = 2;
    }
    v20[1] = v18;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v17 != 0, (unsigned __int8 *)(a5 + 148), (unsigned int *)(a5 + 164));
    uint64_t v21 = *(int *)(a5 + 156);
    uint64_t v22 = (uint64_t *)((char *)&unk_1CDF537B8 + 8 * v21);
    uint64_t v23 = (char *)&unk_1CDF537D0 + 8 * v21;
    uint64_t v24 = (void *)(*(void *)(a3 + 16) + 16 * v11);
    if (*(_DWORD *)(a5 + 160) != 1) {
      uint64_t v22 = (uint64_t *)v23;
    }
    uint64_t v25 = *v22;
    *uint64_t v24 = 2;
    v24[1] = v25;
    uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v12, a5 + 28);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v13, a5 + 56);
      if (result == 3)
      {
        uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v14, a5 + 84);
        if (result == 3)
        {
          return sub_1CBDA2DA0((uint64_t)a1, a3, v15, a5 + 112);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD449384(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x2Fu);
  unsigned int v12 = sub_1CBDA6464(v8, 0x11u);
  uint64_t result = sub_1CBDA34C0((uint64_t)a1, (unsigned int *)a3, v9, a5, *(_DWORD *)(a5 + 80));
  if (result == 3)
  {
    int v14 = *(unsigned __int8 *)(a5 + 116);
    uint64_t v15 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v16 = *(void *)(a3 + 16);
    int v17 = (void *)(v16 + 16 * v10);
    if (*(unsigned char *)v17 == 2)
    {
      int v17 = (void *)(v16 + 16 * v10);
      v15 |= v17[1];
    }
    else
    {
      *int v17 = 2;
    }
    v17[1] = v15;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v14 != 0, (unsigned __int8 *)(a5 + 72), (unsigned int *)(a5 + 84));
    uint64_t v18 = *(int *)(a5 + 80);
    uint64_t v19 = (char *)&unk_1CDF537B8 + 8 * v18;
    uint64_t v20 = (uint64_t *)((char *)&unk_1CDF537D0 + 8 * v18);
    uint64_t v21 = (void *)(*(void *)(a3 + 16) + 16 * v11);
    if (*(_DWORD *)(a5 + 32) == 1) {
      uint64_t v20 = (uint64_t *)v19;
    }
    uint64_t v22 = *v20;
    *uint64_t v21 = 2;
    v21[1] = v22;
    return sub_1CBDA0A88((uint64_t)a1, a3, v12, a5 + 36, 1);
  }
  return result;
}

void sub_1CD449500(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x1Eu);
  sub_1CBDA35A4((uint64_t)a1, a3, v9, a5);
  if (v12 == 3)
  {
    int v13 = *(unsigned __int8 *)(a5 + 144);
    uint64_t v14 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v15 = *(void *)(a3 + 16);
    uint64_t v16 = (void *)(v15 + 16 * v10);
    if (*(unsigned char *)v16 == 2)
    {
      uint64_t v16 = (void *)(v15 + 16 * v10);
      v14 |= v16[1];
    }
    else
    {
      void *v16 = 2;
    }
    v16[1] = v14;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v13 != 0, (unsigned __int8 *)(a5 + 100), (unsigned int *)(a5 + 112));
    int v17 = (unsigned __int8 *)(a5 + 36);
    if (*(_DWORD *)(a5 + 44) == 2)
    {
      sub_1CBDA0A88((uint64_t)a1, a3, v11, (uint64_t)v17, 3);
    }
    else
    {
      uint64_t v18 = *v17;
      uint64_t v19 = (void *)(*(void *)(a3 + 16) + 16 * v11);
      *uint64_t v19 = 2;
      v19[1] = v18;
    }
  }
}

void sub_1CD449640(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x1Eu);
  unsigned int v12 = sub_1CBDA6464(v8, 0x1Fu);
  sub_1CBDA35A4((uint64_t)a1, a3, v9, a5);
  if (v13 == 3)
  {
    int v14 = *(unsigned __int8 *)(a5 + 144);
    uint64_t v15 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v16 = *(void *)(a3 + 16);
    int v17 = (void *)(v16 + 16 * v10);
    if (*(unsigned char *)v17 == 2)
    {
      int v17 = (void *)(v16 + 16 * v10);
      v15 |= v17[1];
    }
    else
    {
      *int v17 = 2;
    }
    v17[1] = v15;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v14 != 0, (unsigned __int8 *)(a5 + 100), (unsigned int *)(a5 + 112));
    uint64_t v18 = (unsigned __int8 *)(a5 + 36);
    if (*(_DWORD *)(a5 + 44) == 2)
    {
      if (sub_1CBDA0A88((uint64_t)a1, a3, v11, (uint64_t)v18, 3) != 3) {
        return;
      }
    }
    else
    {
      uint64_t v19 = *v18;
      uint64_t v20 = (void *)(*(void *)(a3 + 16) + 16 * v11);
      void *v20 = 2;
      v20[1] = v19;
    }
    if (*(_DWORD *)(a5 + 72) == 7)
    {
      uint64_t v21 = *(unsigned __int8 *)(a5 + 68);
      uint64_t v22 = (void *)(*(void *)(a3 + 16) + 16 * v12);
      *uint64_t v22 = 2;
      v22[1] = v21;
    }
    else
    {
      sub_1CBDA0A88((uint64_t)a1, a3, v12, a5 + 64, 1);
    }
  }
}

uint64_t sub_1CD4497E0(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 7u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    int v13 = *(unsigned __int8 *)(a5 + 108);
    uint64_t v14 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v15 = *(void *)(a3 + 16);
    uint64_t v16 = (void *)(v15 + 16 * v10);
    if (*(unsigned char *)v16 == 2)
    {
      uint64_t v16 = (void *)(v15 + 16 * v10);
      v14 |= v16[1];
    }
    else
    {
      void *v16 = 2;
    }
    v16[1] = v14;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v13 != 0, (unsigned __int8 *)(a5 + 64), (unsigned int *)(a5 + 76));
    return sub_1CBDA0A88((uint64_t)a1, a3, v11, a5 + 28, 1);
  }
  return result;
}

uint64_t sub_1CD449900(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x1Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x57u);
  unsigned int v11 = sub_1CBDA6464(v8, 0x2Eu);
  uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v9, a5 + 28, 1);
  if (result == 3)
  {
    uint64_t result = sub_1CBDA0E68((uint64_t)a1, (unsigned int *)a3, v10, a5, 0x100000003, 0x100000002uLL);
    if (result == 3)
    {
      int v13 = *(unsigned __int8 *)(a5 + 108);
      uint64_t v14 = 32 * *(unsigned __int8 *)(a5 + 16);
      uint64_t v15 = *(void *)(a3 + 16);
      uint64_t v16 = (void *)(v15 + 16 * v11);
      if (*(unsigned char *)v16 == 2)
      {
        uint64_t v16 = (void *)(v15 + 16 * v11);
        v14 |= v16[1];
      }
      else
      {
        void *v16 = 2;
      }
      v16[1] = v14;
      sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v11, v13 != 0, (unsigned __int8 *)(a5 + 64), (unsigned int *)(a5 + 76));
      return 3;
    }
  }
  return result;
}

uint64_t sub_1CD449A20(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x57u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x2Fu);
  unsigned int v12 = sub_1CBDA6464(v8, 0x19u);
  unsigned int v13 = sub_1CBDA6464(v8, 0x1Au);
  unsigned int v14 = sub_1CBDA6464(v8, 0x59u);
  unsigned int v28 = sub_1CBDA6464(v8, 0x5Au);
  unsigned int v27 = sub_1CBDA6464(v8, 0x74u);
  unsigned int v26 = sub_1CBDA6464(v8, 0x75u);
  unsigned int v15 = sub_1CBDA6464(v8, 0x3Du);
  uint64_t result = sub_1CBDA0E68((uint64_t)a1, (unsigned int *)a3, v9, a5, 0, 0);
  if (result == 3)
  {
    int v17 = *(unsigned __int8 *)(a5 + 340);
    uint64_t v18 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v19 = *(void *)(a3 + 16);
    uint64_t v20 = (void *)(v19 + 16 * v10);
    if (*(unsigned char *)v20 == 2)
    {
      uint64_t v20 = (void *)(v19 + 16 * v10);
      v18 |= v20[1];
    }
    else
    {
      void *v20 = 2;
    }
    v20[1] = v18;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v17 != 0, (unsigned __int8 *)(a5 + 124), (unsigned int *)(a5 + 304));
    unsigned int v21 = 2 * (*(_DWORD *)(a5 + 300) == 1);
    if (*a1 >= 4) {
      unsigned int v21 = *(_DWORD *)(a5 + 336);
    }
    unint64_t v22 = sub_1CBB400FC(*(_DWORD *)(a5 + 280), *(unsigned char *)(a5 + 136), *(void *)(a5 + 140), *(_DWORD *)(a5 + 292), *(_DWORD *)(a5 + 296), *(void *)(a5 + 272), *(_DWORD *)(a5 + 288), *(_DWORD *)(a5 + 268), *(_DWORD *)(a5 + 132), *(_DWORD *)(a5 + 152), v21, *(_DWORD *)(a5 + 344));
    if (v23)
    {
      uint64_t v24 = (void *)(*(void *)(a3 + 16) + 16 * v11);
      *uint64_t v24 = 2;
      v24[1] = v22;
      uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v12, a5 + 56, 1);
      if (result == 3)
      {
        uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v13, a5 + 84, 1);
        if (result == 3)
        {
          uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v14, a5 + 156, 1);
          if (result == 3)
          {
            uint64_t result = sub_1CBDA0B7C((uint64_t)a1, a3, v28, a5 + 184);
            if (result == 3)
            {
              uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v27, a5 + 212, 1);
              if (result == 3)
              {
                uint64_t result = sub_1CBDA0B7C((uint64_t)a1, a3, v26, a5 + 240);
                if (result == 3)
                {
                  unsigned int v25 = sub_1CD44F798(a5, *a1);
                  return sub_1CBDA6388((uint64_t)a1, a3, v15, a5 + 28, v25);
                }
              }
            }
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CD449D14(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x57u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x2Fu);
  unsigned int v12 = sub_1CBDA6464(v8, 0x19u);
  unsigned int v13 = sub_1CBDA6464(v8, 0x1Au);
  unsigned int v14 = sub_1CBDA6464(v8, 0x59u);
  unsigned int v30 = sub_1CBDA6464(v8, 0x5Au);
  unsigned int v29 = sub_1CBDA6464(v8, 0x74u);
  unsigned int v28 = sub_1CBDA6464(v8, 0x75u);
  unsigned int v27 = sub_1CBDA6464(v8, 0x3Du);
  unsigned int v26 = sub_1CBDA6464(v8, 0x5Eu);
  unsigned int v15 = sub_1CBDA6464(v8, 0x5Fu);
  uint64_t result = sub_1CBDA0E68((uint64_t)a1, (unsigned int *)a3, v9, a5, 0, 0);
  if (result == 3)
  {
    int v17 = *(unsigned __int8 *)(a5 + 340);
    uint64_t v18 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v19 = *(void *)(a3 + 16);
    uint64_t v20 = (void *)(v19 + 16 * v10);
    if (*(unsigned char *)v20 == 2)
    {
      uint64_t v20 = (void *)(v19 + 16 * v10);
      v18 |= v20[1];
    }
    else
    {
      void *v20 = 2;
    }
    v20[1] = v18;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v17 != 0, (unsigned __int8 *)(a5 + 124), (unsigned int *)(a5 + 304));
    unsigned int v21 = 2 * (*(_DWORD *)(a5 + 300) == 1);
    if (*a1 >= 4) {
      unsigned int v21 = *(_DWORD *)(a5 + 336);
    }
    unint64_t v22 = sub_1CBB400FC(*(_DWORD *)(a5 + 280), *(unsigned char *)(a5 + 136), *(void *)(a5 + 140), *(_DWORD *)(a5 + 292), *(_DWORD *)(a5 + 296), *(void *)(a5 + 272), *(_DWORD *)(a5 + 288), *(_DWORD *)(a5 + 268), *(_DWORD *)(a5 + 132), *(_DWORD *)(a5 + 152), v21, *(_DWORD *)(a5 + 344));
    if (v23)
    {
      uint64_t v24 = (void *)(*(void *)(a3 + 16) + 16 * v11);
      *uint64_t v24 = 2;
      v24[1] = v22;
      uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v12, a5 + 56, 1);
      if (result == 3)
      {
        uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v13, a5 + 84, 1);
        if (result == 3)
        {
          uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v14, a5 + 156, 1);
          if (result == 3)
          {
            uint64_t result = sub_1CBDA0B7C((uint64_t)a1, a3, v30, a5 + 184);
            if (result == 3)
            {
              uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v29, a5 + 212, 1);
              if (result == 3)
              {
                uint64_t result = sub_1CBDA0B7C((uint64_t)a1, a3, v28, a5 + 240);
                if (result == 3)
                {
                  unsigned int v25 = sub_1CD44F798(a5, *a1);
                  uint64_t result = sub_1CBDA6388((uint64_t)a1, a3, v27, a5 + 28, v25);
                  if (result == 3)
                  {
                    uint64_t result = sub_1CBDA36B0(a1, (unsigned __int16 *)a3, v26, a5);
                    if (result == 3)
                    {
                      return sub_1CBDA36B0(a1, (unsigned __int16 *)a3, v15, a5);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CD44A060(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x82u);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 88), (unsigned __int8 *)(a5 + 44), (unsigned int *)(a5 + 56));

  return sub_1CBDA0898((uint64_t)a1, a3, v10, a5, 1);
}

uint64_t sub_1CD44A0FC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x82u);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 88), (unsigned __int8 *)(a5 + 44), (unsigned int *)(a5 + 56));

  return sub_1CBDA0A88((uint64_t)a1, a3, v10, a5 + 8, 1);
}

uint64_t sub_1CD44A198(unsigned int *a1, unsigned __int16 a2, unsigned __int16 *a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x18u);
  unsigned int v12 = sub_1CBDA6464(v8, 0x19u);
  unsigned int v13 = sub_1CBDA6464(v8, 0x1Au);
  uint64_t v14 = sub_1CBDA0898((uint64_t)a1, (uint64_t)a3, v9, (uint64_t)a5, 1);
  if (v14 == 3)
  {
    int v15 = *((unsigned __int8 *)a5 + 164);
    uint64_t v16 = 32 * *((unsigned __int8 *)a5 + 16);
    uint64_t v17 = *((void *)a3 + 2);
    uint64_t v18 = (void *)(v17 + 16 * v10);
    if (*(unsigned char *)v18 == 2)
    {
      uint64_t v18 = (void *)(v17 + 16 * v10);
      v16 |= v18[1];
    }
    else
    {
      void *v18 = 2;
    }
    v18[1] = v16;
    sub_1CBDA07C8(*a1, *((void *)a3 + 2), v10, v15 != 0, (unsigned __int8 *)a5 + 120, (unsigned int *)a5 + 33);
    uint64_t v14 = sub_1CBDA2DA0((uint64_t)a1, (uint64_t)a3, v11, (uint64_t)(a5 + 14));
    if (v14 == 3)
    {
      uint64_t v14 = sub_1CBDA2DA0((uint64_t)a1, (uint64_t)a3, v12, (uint64_t)(a5 + 28));
      if (v14 == 3)
      {
        uint64_t v14 = sub_1CBDA2DA0((uint64_t)a1, (uint64_t)a3, v13, (uint64_t)(a5 + 42));
        if (v14 == 3)
        {
          if (*((_DWORD *)a5 + 32)) {
            return 3;
          }
          unint64_t v20 = *a5;
          if (v20 > 0xFD)
          {
            return 3;
          }
          else
          {
            uint64_t v21 = *((void *)a1 + 1);
            uint64_t v22 = *((void *)a3 + 2);
            uint64_t v14 = 3;
            char v23 = (void *)(v22 + 16 * sub_1CBDA6464(*a3, 3u));
            uint64_t v24 = *(unsigned __int16 *)(*(void *)(*(void *)(v21 + 24) + 480) + 2 * v20);
            *char v23 = 1;
            v23[1] = v24;
          }
        }
      }
    }
  }
  return v14;
}

uint64_t sub_1CD44A35C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 3u);
  unsigned int v11 = sub_1CBDA6464(v8, 0x2Fu);
  unsigned int v12 = sub_1CBDA6464(v8, 0x11u);
  unsigned int v13 = sub_1CBDA6464(v8, 4u);
  unsigned int v14 = sub_1CBDA6464(v8, 0x14u);
  int v15 = *(unsigned __int8 *)(a5 + 176);
  uint64_t v16 = 32 * *(unsigned __int8 *)(a5 + 16);
  uint64_t v17 = *(void *)(a3 + 16);
  uint64_t v18 = (void *)(v17 + 16 * v9);
  if (*(unsigned char *)v18 == 2)
  {
    uint64_t v18 = (void *)(v17 + 16 * v9);
    v16 |= v18[1];
  }
  else
  {
    void *v18 = 2;
  }
  v18[1] = v16;
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, v15 != 0, (unsigned __int8 *)(a5 + 120), (unsigned int *)(a5 + 128));
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v10, a5, 1);
  if (result == 3)
  {
    unint64_t v20 = *(unsigned int *)(a5 + 160) | (16 * *(unsigned __int8 *)(a5 + 164)) | ((unint64_t)*(unsigned int *)(a5 + 168) << 9) | ((unint64_t)*(unsigned __int8 *)(a5 + 172) << 13);
    uint64_t v21 = (void *)(*(void *)(a3 + 16) + 16 * v11);
    *uint64_t v21 = 2;
    v21[1] = v20;
    uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v12, a5 + 28, 1);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v13, a5 + 56, 1);
      if (result == 3)
      {
        return sub_1CBDA0A88((uint64_t)a1, a3, v14, a5 + 84, 1);
      }
    }
  }
  return result;
}

uint64_t sub_1CD44A534(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 3u);
  unsigned int v11 = sub_1CBDA6464(v8, 0x2Fu);
  unsigned int v12 = sub_1CBDA6464(v8, 0x11u);
  unsigned int v13 = sub_1CBDA6464(v8, 4u);
  unsigned int v14 = sub_1CBDA6464(v8, 0x14u);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 176), (unsigned __int8 *)(a5 + 120), (unsigned int *)(a5 + 128));
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v10, a5, 1);
  if (result == 3)
  {
    unint64_t v16 = *(unsigned int *)(a5 + 160) | (16 * *(unsigned __int8 *)(a5 + 164)) | ((unint64_t)*(unsigned int *)(a5 + 168) << 9) | ((unint64_t)*(unsigned __int8 *)(a5 + 172) << 13);
    uint64_t v17 = (void *)(*(void *)(a3 + 16) + 16 * v11);
    *uint64_t v17 = 2;
    v17[1] = v16;
    uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v12, a5 + 28, 1);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v13, a5 + 56, 1);
      if (result == 3)
      {
        return sub_1CBDA0A88((uint64_t)a1, a3, v14, a5 + 84, 1);
      }
    }
  }
  return result;
}

uint64_t sub_1CD44A6C8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Fu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x59u);
  unsigned int v12 = sub_1CBDA6464(v8, 0x5Au);
  unsigned int v13 = sub_1CBDA6464(v8, 0x3Du);
  unsigned int v14 = sub_1CBDA6464(v8, 0x5Bu);
  unsigned int v21 = sub_1CBDA6464(v8, 0x5Cu);
  unsigned int v15 = sub_1CBDA6464(v8, 0x5Du);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 252), (unsigned __int8 *)(a5 + 124), (unsigned int *)(a5 + 212));
  unint64_t v16 = ((unint64_t)*(unsigned int *)(a5 + 136) << 23) | ((unint64_t)*(unsigned int *)(a5 + 132) << 21) | (4 * *(void *)(a5 + 140)) | (HIDWORD(*(void *)(a5 + 140)) << 30) | ((unint64_t)*(unsigned int *)(a5 + 148) << 26) | ((unint64_t)*(unsigned int *)(a5 + 152) << 28) | ((unint64_t)*(unsigned __int8 *)(a5 + 244) << 34) | ((unint64_t)*(unsigned int *)(a5 + 248) << 44) | ((unint64_t)*(unsigned int *)(a5 + 36) << 35) | ((unint64_t)*(unsigned int *)(a5 + 64) << 38) | ((unint64_t)*(unsigned int *)(a5 + 92) << 41);
  uint64_t v17 = (void *)(*(void *)(a3 + 16) + 16 * v10);
  *uint64_t v17 = 2;
  v17[1] = v16;
  uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v11, a5 + 156, 1);
  if (result == 3)
  {
    uint64_t result = sub_1CBDA0B7C((uint64_t)a1, a3, v12, a5 + 184);
    if (result == 3)
    {
      unsigned int v20 = sub_1CD44F834(a5, *a1, v19);
      uint64_t result = sub_1CBDA6388((uint64_t)a1, a3, v13, a5, v20);
      if (result == 3)
      {
        if (*(_DWORD *)(a5 + 36))
        {
          uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v14, a5 + 28, 1);
          if (result != 3) {
            return result;
          }
        }
        else
        {
          *(_OWORD *)(*(void *)(a3 + 16) + 16 * v14) = xmmword_1CD91D2D0;
        }
        if (*(_DWORD *)(a5 + 64))
        {
          uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v21, a5 + 56, 1);
          if (result != 3) {
            return result;
          }
        }
        else
        {
          *(_OWORD *)(*(void *)(a3 + 16) + 16 * v21) = xmmword_1CD91D2D0;
        }
        if (*(_DWORD *)(a5 + 92))
        {
          return sub_1CBDA0A88((uint64_t)a1, a3, v15, a5 + 84, 1);
        }
        else
        {
          *(_OWORD *)(*(void *)(a3 + 16) + 16 * v15) = xmmword_1CD91D2D0;
          return 3;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD44A960(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Fu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x59u);
  unsigned int v12 = sub_1CBDA6464(v8, 0x5Au);
  unsigned int v13 = sub_1CBDA6464(v8, 0x3Du);
  unsigned int v14 = sub_1CBDA6464(v8, 0x5Bu);
  unsigned int v23 = sub_1CBDA6464(v8, 0x5Cu);
  unsigned int v22 = sub_1CBDA6464(v8, 0x5Du);
  unsigned int v21 = sub_1CBDA6464(v8, 0x5Eu);
  unsigned int v15 = sub_1CBDA6464(v8, 0x5Fu);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 252), (unsigned __int8 *)(a5 + 124), (unsigned int *)(a5 + 212));
  unint64_t v16 = ((unint64_t)*(unsigned int *)(a5 + 136) << 23) | ((unint64_t)*(unsigned int *)(a5 + 132) << 21) | (4 * *(void *)(a5 + 140)) | (HIDWORD(*(void *)(a5 + 140)) << 30) | ((unint64_t)*(unsigned int *)(a5 + 148) << 26) | ((unint64_t)*(unsigned int *)(a5 + 152) << 28) | ((unint64_t)*(unsigned __int8 *)(a5 + 244) << 34) | ((unint64_t)*(unsigned int *)(a5 + 248) << 44) | ((unint64_t)*(unsigned int *)(a5 + 36) << 35) | ((unint64_t)*(unsigned int *)(a5 + 64) << 38) | ((unint64_t)*(unsigned int *)(a5 + 92) << 41);
  uint64_t v17 = (void *)(*(void *)(a3 + 16) + 16 * v10);
  *uint64_t v17 = 2;
  v17[1] = v16;
  uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v11, a5 + 156, 1);
  if (result == 3)
  {
    uint64_t result = sub_1CBDA0B7C((uint64_t)a1, a3, v12, a5 + 184);
    if (result == 3)
    {
      unsigned int v20 = sub_1CD44F834(a5, *a1, v19);
      uint64_t result = sub_1CBDA6388((uint64_t)a1, a3, v13, a5, v20);
      if (result == 3)
      {
        if (*(_DWORD *)(a5 + 36))
        {
          uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v14, a5 + 28, 1);
          if (result != 3) {
            return result;
          }
        }
        else
        {
          *(_OWORD *)(*(void *)(a3 + 16) + 16 * v14) = xmmword_1CD91D2D0;
        }
        if (*(_DWORD *)(a5 + 64))
        {
          uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v23, a5 + 56, 1);
          if (result != 3) {
            return result;
          }
        }
        else
        {
          *(_OWORD *)(*(void *)(a3 + 16) + 16 * v23) = xmmword_1CD91D2D0;
        }
        if (*(_DWORD *)(a5 + 92))
        {
          uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v22, a5 + 84, 1);
          if (result != 3) {
            return result;
          }
        }
        else
        {
          *(_OWORD *)(*(void *)(a3 + 16) + 16 * v22) = xmmword_1CD91D2D0;
        }
        uint64_t result = sub_1CBDA38C4(a1, (unsigned __int16 *)a3, v21, a5);
        if (result == 3)
        {
          return sub_1CBDA38C4(a1, (unsigned __int16 *)a3, v15, a5);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD44AC50(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x25u);
  unsigned int v12 = sub_1CBDA6464(v8, 0x48u);
  unsigned int v13 = sub_1CBDA6464(v8, 0x11u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    int v15 = *(unsigned __int8 *)(a5 + 116);
    uint64_t v16 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v17 = *(void *)(a3 + 16);
    uint64_t v18 = (void *)(v17 + 16 * v10);
    if (*(unsigned char *)v18 == 2)
    {
      uint64_t v18 = (void *)(v17 + 16 * v10);
      v16 |= v18[1];
    }
    else
    {
      void *v18 = 2;
    }
    v18[1] = v16;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v15 != 0, (unsigned __int8 *)(a5 + 64), (unsigned int *)(a5 + 84));
    __n128 v19 = (void *)(*(void *)(a3 + 16) + 16 * v11);
    uint64_t v20 = *(unsigned int *)(a5 + 72);
    *__n128 v19 = 2;
    v19[1] = v20;
    uint64_t v21 = *(unsigned int *)(a5 + 76);
    uint64_t v22 = *(void *)(a3 + 16);
    unsigned int v23 = (void *)(v22 + 16 * v12);
    if (*(unsigned char *)v23 == 2)
    {
      unsigned int v23 = (void *)(v22 + 16 * v12);
      v21 |= v23[1];
    }
    else
    {
      *unsigned int v23 = 2;
    }
    v23[1] = v21;
    return sub_1CBDA2DA0((uint64_t)a1, a3, v13, a5 + 28);
  }
  return result;
}

uint64_t sub_1CD44ADEC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x25u);
  unsigned int v12 = sub_1CBDA6464(v8, 0x48u);
  unsigned int v13 = sub_1CBDA6464(v8, 0x11u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    int v15 = *(unsigned __int8 *)(a5 + 116);
    uint64_t v16 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v17 = *(void *)(a3 + 16);
    uint64_t v18 = (void *)(v17 + 16 * v10);
    if (*(unsigned char *)v18 == 2)
    {
      uint64_t v18 = (void *)(v17 + 16 * v10);
      v16 |= v18[1];
    }
    else
    {
      void *v18 = 2;
    }
    v18[1] = v16;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v15 != 0, (unsigned __int8 *)(a5 + 64), (unsigned int *)(a5 + 84));
    __n128 v19 = (void *)(*(void *)(a3 + 16) + 16 * v11);
    uint64_t v20 = *(unsigned int *)(a5 + 72);
    *__n128 v19 = 2;
    v19[1] = v20;
    uint64_t v21 = *(unsigned int *)(a5 + 76);
    uint64_t v22 = *(void *)(a3 + 16);
    unsigned int v23 = (void *)(v22 + 16 * v12);
    if (*(unsigned char *)v23 == 2)
    {
      unsigned int v23 = (void *)(v22 + 16 * v12);
      v21 |= v23[1];
    }
    else
    {
      *unsigned int v23 = 2;
    }
    v23[1] = v21;
    int v24 = *(_DWORD *)(a5 + 72);
    return sub_1CBDA3AD8((uint64_t)a1, a3, v13, (unsigned __int16 *)(a5 + 28), v24);
  }
  return result;
}

uint64_t sub_1CD44AF8C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x48u);
  unsigned int v12 = sub_1CBDA6464(v8, 0x11u);
  uint64_t result = sub_1CBDA3DF0((uint64_t)a1, a3, v9, a5, *(_DWORD *)(a5 + 80));
  if (result == 3)
  {
    int v14 = *(unsigned __int8 *)(a5 + 116);
    uint64_t v15 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v16 = *(void *)(a3 + 16);
    uint64_t v17 = (void *)(v16 + 16 * v10);
    if (*(unsigned char *)v17 == 2)
    {
      uint64_t v17 = (void *)(v16 + 16 * v10);
      v15 |= v17[1];
    }
    else
    {
      *uint64_t v17 = 2;
    }
    v17[1] = v15;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v14 != 0, (unsigned __int8 *)(a5 + 72), (unsigned int *)(a5 + 84));
    uint64_t v18 = *(unsigned int *)(a5 + 32);
    uint64_t v19 = *(void *)(a3 + 16);
    uint64_t v20 = (void *)(v19 + 16 * v11);
    if (*(unsigned char *)v20 == 2)
    {
      uint64_t v20 = (void *)(v19 + 16 * v11);
      v18 |= v20[1];
    }
    else
    {
      void *v20 = 2;
    }
    v20[1] = v18;
    int v21 = *(_DWORD *)(a5 + 80);
    return sub_1CBDA3E8C((uint64_t)a1, (unsigned __int16 *)a3, v12, a5 + 36, v21);
  }
  return result;
}

uint64_t sub_1CD44B104(_DWORD *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Fu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x70u);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *((unsigned __int8 *)a5 + 57), (unsigned __int8 *)a5 + 16, (unsigned int *)a5 + 6);
  BOOL v12 = *((_DWORD *)a5 + 1) == 1;
  if (*((unsigned char *)a5 + 56)) {
    uint64_t v13 = v12 | 2;
  }
  else {
    uint64_t v13 = *((_DWORD *)a5 + 1) == 1;
  }
  if ((*a1 - 3) < 3) {
    BOOL v12 = v13;
  }
  int v14 = (void *)(*(void *)(a3 + 16) + 16 * v10);
  void *v14 = 2;
  v14[1] = v12;
  uint64_t v15 = (void *)(*(void *)(a3 + 16) + 16 * v11);
  uint64_t v16 = *a5;
  *uint64_t v15 = 2;
  v15[1] = v16;
  return 3;
}

uint64_t sub_1CD44B1DC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x70u);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *((unsigned __int8 *)a5 + 52), (unsigned __int8 *)a5 + 12, (unsigned int *)a5 + 5);
  unsigned int v11 = (void *)(*(void *)(a3 + 16) + 16 * v10);
  uint64_t v12 = *a5;
  *unsigned int v11 = 2;
  v11[1] = v12;
  return 3;
}

uint64_t sub_1CD44B26C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Fu);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 63), (unsigned __int8 *)(a5 + 8), (unsigned int *)(a5 + 28));
  unsigned int v11 = (void *)(*(void *)(a3 + 16) + 16 * v10);
  unint64_t v12 = ((unint64_t)*(unsigned __int8 *)(a5 + 18) << 8) | ((unint64_t)*(unsigned __int8 *)(a5 + 16) << 7) | ((unint64_t)*(unsigned __int8 *)(a5 + 19) << 9) | ((unint64_t)*(unsigned __int8 *)(a5 + 20) << 10) | ((unint64_t)*(unsigned __int8 *)(a5 + 17) << 11) | (2 * *(unsigned int *)(a5 + 24)) | (16 * *(unsigned __int8 *)(a5 + 60)) | (32 * *(unsigned __int8 *)(a5 + 61)) | ((unint64_t)*(unsigned __int8 *)(a5 + 62) << 6);
  *unsigned int v11 = 2;
  v11[1] = v12;
  return 3;
}

uint64_t sub_1CD44B340(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x3Du);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 84), (unsigned __int8 *)(a5 + 40), (unsigned int *)(a5 + 48));
  unsigned int v12 = sub_1CD44F554(v11, a5, *a1);

  return sub_1CBDA6388((uint64_t)a1, a3, v10, a5, v12);
}

uint64_t sub_1CD44B3E8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x3Du);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 88), (unsigned __int8 *)(a5 + 40), (unsigned int *)(a5 + 52));
  unsigned int v12 = sub_1CD44F5C8(a5, *a1, v11);

  return sub_1CBDA6388((uint64_t)a1, a3, v10, a5, v12);
}

uint64_t sub_1CD44B490(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x54u);
  unsigned int v12 = sub_1CBDA6464(v8, 0x11u);
  unsigned int v13 = sub_1CBDA6464(v8, 4u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    int v15 = *(unsigned __int8 *)(a5 + 140);
    uint64_t v16 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v17 = *(void *)(a3 + 16);
    uint64_t v18 = (void *)(v17 + 16 * v10);
    if (*(unsigned char *)v18 == 2)
    {
      uint64_t v18 = (void *)(v17 + 16 * v10);
      v16 |= v18[1];
    }
    else
    {
      void *v18 = 2;
    }
    v18[1] = v16;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v15 != 0, (unsigned __int8 *)(a5 + 92), (unsigned int *)(a5 + 108));
    uint64_t v19 = *(int *)(a5 + 100);
    int v20 = *(unsigned __int8 *)(a5 + 104);
    if (v19 > 6) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = qword_1CDF53838[v19];
    }
    uint64_t v22 = (void *)(*(void *)(a3 + 16) + 16 * v11);
    *uint64_t v22 = 2;
    v22[1] = v21;
    if (v20)
    {
      uint64_t v23 = *(void *)(a3 + 16) + 16 * v11;
      *(void *)(v23 + 8) |= 0x10uLL;
    }
    uint64_t result = sub_1CBDA0990((uint64_t)a1, a3, v12, a5 + 28);
    if (result == 3)
    {
      return sub_1CBDA0990((uint64_t)a1, a3, v13, a5 + 56);
    }
  }
  return result;
}

uint64_t sub_1CD44B648(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x54u);
  unsigned int v12 = sub_1CBDA6464(v8, 0x11u);
  unsigned int v13 = sub_1CBDA6464(v8, 4u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    int v15 = *(unsigned __int8 *)(a5 + 140);
    uint64_t v16 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v17 = *(void *)(a3 + 16);
    uint64_t v18 = (void *)(v17 + 16 * v10);
    if (*(unsigned char *)v18 == 2)
    {
      uint64_t v18 = (void *)(v17 + 16 * v10);
      v16 |= v18[1];
    }
    else
    {
      void *v18 = 2;
    }
    v18[1] = v16;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v15 != 0, (unsigned __int8 *)(a5 + 92), (unsigned int *)(a5 + 108));
    int v19 = *(unsigned __int8 *)(a5 + 104);
    uint64_t v20 = (*(_DWORD *)(a5 + 100) - 1);
    if (v20 < 7) {
      uint64_t v21 = v20 + 1;
    }
    else {
      uint64_t v21 = 0;
    }
    uint64_t v22 = (void *)(*(void *)(a3 + 16) + 16 * v11);
    *uint64_t v22 = 2;
    v22[1] = v21;
    if (v19)
    {
      uint64_t v23 = *(void *)(a3 + 16) + 16 * v11;
      *(void *)(v23 + 8) |= 0x10uLL;
    }
    uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v12, a5 + 28);
    if (result == 3)
    {
      return sub_1CBDA2DA0((uint64_t)a1, a3, v13, a5 + 56);
    }
  }
  return result;
}

uint64_t sub_1CD44B7F0(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x42u);
  unsigned int v11 = sub_1CBDA6464(v8, 0x45u);
  unsigned int v12 = sub_1CBDA6464(v8, 0x2Eu);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v10, a5 + 28, 1);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v11, a5 + 56, 1);
      if (result == 3)
      {
        int v14 = *(unsigned __int8 *)(a5 + 132);
        uint64_t v15 = 32 * *(unsigned __int8 *)(a5 + 16);
        uint64_t v16 = *(void *)(a3 + 16);
        uint64_t v17 = (void *)(v16 + 16 * v12);
        if (*(unsigned char *)v17 == 2)
        {
          uint64_t v17 = (void *)(v16 + 16 * v12);
          v15 |= v17[1];
        }
        else
        {
          *uint64_t v17 = 2;
        }
        v17[1] = v15;
        sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v12, v14 != 0, (unsigned __int8 *)(a5 + 92), (unsigned int *)(a5 + 100));
        return 3;
      }
    }
  }
  return result;
}

uint64_t sub_1CD44B938(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x18u);
  unsigned int v12 = sub_1CBDA6464(v8, 0x19u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    int v14 = *(unsigned __int8 *)(a5 + 132);
    uint64_t v15 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v16 = *(void *)(a3 + 16);
    uint64_t v17 = (void *)(v16 + 16 * v10);
    if (*(unsigned char *)v17 == 2)
    {
      uint64_t v17 = (void *)(v16 + 16 * v10);
      v15 |= v17[1];
    }
    else
    {
      *uint64_t v17 = 2;
    }
    v17[1] = v15;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v14 != 0, (unsigned __int8 *)(a5 + 92), (unsigned int *)(a5 + 100));
    uint64_t result = sub_1CBDA0B7C((uint64_t)a1, a3, v11, a5 + 56);
    if (result == 3)
    {
      return sub_1CBDA0990((uint64_t)a1, a3, v12, a5 + 28);
    }
  }
  return result;
}

uint64_t sub_1CD44BA8C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x18u);
  unsigned int v11 = sub_1CBDA6464(v8, 0x2Eu);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v10, a5 + 28, 1);
    if (result == 3)
    {
      int v13 = *(unsigned __int8 *)(a5 + 136);
      uint64_t v14 = 32 * *(unsigned __int8 *)(a5 + 16);
      uint64_t v15 = *(void *)(a3 + 16);
      uint64_t v16 = (void *)(v15 + 16 * v11);
      if (*(unsigned char *)v16 == 2)
      {
        uint64_t v16 = (void *)(v15 + 16 * v11);
        v14 |= v16[1];
      }
      else
      {
        void *v16 = 2;
      }
      v16[1] = v14;
      sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v11, v13 != 0, (unsigned __int8 *)(a5 + 92), (unsigned int *)(a5 + 104));
      return 3;
    }
  }
  return result;
}

uint64_t sub_1CD44BB9C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x18u);
  unsigned int v11 = sub_1CBDA6464(v8, 0x2Eu);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    uint64_t result = sub_1CBDA0990((uint64_t)a1, a3, v10, a5 + 28);
    if (result == 3)
    {
      int v13 = *(unsigned __int8 *)(a5 + 136);
      uint64_t v14 = 32 * *(unsigned __int8 *)(a5 + 16);
      uint64_t v15 = *(void *)(a3 + 16);
      uint64_t v16 = (void *)(v15 + 16 * v11);
      if (*(unsigned char *)v16 == 2)
      {
        uint64_t v16 = (void *)(v15 + 16 * v11);
        v14 |= v16[1];
      }
      else
      {
        void *v16 = 2;
      }
      v16[1] = v14;
      sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v11, v13 != 0, (unsigned __int8 *)(a5 + 92), (unsigned int *)(a5 + 104));
      return 3;
    }
  }
  return result;
}

uint64_t sub_1CD44BCA8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x18u);
  unsigned int v11 = sub_1CBDA6464(v8, 0x2Eu);
  uint64_t result = sub_1CBDA5198((uint64_t)a1, a3, v9, a5);
  if (result == 3)
  {
    uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v10, a5 + 32);
    if (result == 3)
    {
      int v13 = *(unsigned __int8 *)(a5 + 140);
      uint64_t v14 = 32 * *(unsigned __int8 *)(a5 + 16);
      uint64_t v15 = *(void *)(a3 + 16);
      uint64_t v16 = (void *)(v15 + 16 * v11);
      if (*(unsigned char *)v16 == 2)
      {
        uint64_t v16 = (void *)(v15 + 16 * v11);
        v14 |= v16[1];
      }
      else
      {
        void *v16 = 2;
      }
      v16[1] = v14;
      sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v11, v13 != 0, (unsigned __int8 *)(a5 + 96), (unsigned int *)(a5 + 108));
      return 3;
    }
  }
  return result;
}

uint64_t sub_1CD44BDB0(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x18u);
  unsigned int v11 = sub_1CBDA6464(v8, 0x2Eu);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v10, a5 + 36);
    if (result == 3)
    {
      int v13 = *(unsigned __int8 *)(a5 + 144);
      uint64_t v14 = 32 * *(unsigned __int8 *)(a5 + 16);
      uint64_t v15 = *(void *)(a3 + 16);
      uint64_t v16 = (void *)(v15 + 16 * v11);
      if (*(unsigned char *)v16 == 2)
      {
        uint64_t v16 = (void *)(v15 + 16 * v11);
        v14 |= v16[1];
      }
      else
      {
        void *v16 = 2;
      }
      v16[1] = v14;
      sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v11, v13 != 0, (unsigned __int8 *)(a5 + 100), (unsigned int *)(a5 + 112));
      return 3;
    }
  }
  return result;
}

uint64_t sub_1CD44BEBC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x18u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    int v13 = *(unsigned __int8 *)(a5 + 104);
    uint64_t v14 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v15 = *(void *)(a3 + 16);
    uint64_t v16 = (void *)(v15 + 16 * v10);
    if (*(unsigned char *)v16 == 2)
    {
      uint64_t v16 = (void *)(v15 + 16 * v10);
      v14 |= v16[1];
    }
    else
    {
      void *v16 = 2;
    }
    v16[1] = v14;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v13 != 0, (unsigned __int8 *)(a5 + 64), (unsigned int *)(a5 + 72));
    return sub_1CBDA0A88((uint64_t)a1, a3, v11, a5 + 28, 1);
  }
  return result;
}

uint64_t sub_1CD44BFDC(int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x62u);
  unsigned int v11 = sub_1CBDA6464(v8, 0x63u);
  unsigned int v12 = sub_1CBDA6464(v8, 0x64u);
  unsigned int v13 = sub_1CBDA6464(v8, 0x65u);
  unsigned int v14 = sub_1CBDA6464(v8, 0x66u);
  unsigned int v15 = sub_1CBDA6464(v8, 0x3Du);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 216), (unsigned __int8 *)(a5 + 64), (unsigned int *)(a5 + 72));
  uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v10, a5 + 104, 1);
  if (result == 3)
  {
    uint64_t result = sub_1CBDA0B7C((uint64_t)a1, a3, v11, a5 + 132);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v12, a5 + 160, 1);
      if (result == 3)
      {
        uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v13, a5 + 188, 1);
        if (result == 3)
        {
          uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v14, a5 + 32, 1);
          if (result == 3)
          {
            unsigned int v18 = sub_1CD44F958(v17, a5, *a1);
            return sub_1CBDA6388((uint64_t)a1, a3, v15, a5, v18);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD44C19C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8 = sub_1CBDA6464(a2, 0x2Eu);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v8, *(unsigned __int8 *)(a5 + 44), (unsigned __int8 *)(a5 + 4), (unsigned int *)(a5 + 12));
  return 3;
}

uint64_t sub_1CD44C1F8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x62u);
  unsigned int v11 = sub_1CBDA6464(v8, 0x63u);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 104), (unsigned __int8 *)(a5 + 8), (unsigned int *)(a5 + 16));
  uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v10, a5 + 48, 1);
  if (result == 3)
  {
    return sub_1CBDA0B7C((uint64_t)a1, a3, v11, a5 + 76);
  }
  return result;
}

uint64_t sub_1CD44C2D4(int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x3Du);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 76), (unsigned __int8 *)(a5 + 36), (unsigned int *)(a5 + 44));
  unsigned int v12 = sub_1CD44F9CC(v11, a5, *a1);

  return sub_1CBDA6388((uint64_t)a1, a3, v10, a5, v12);
}

uint64_t sub_1CD44C37C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x3Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x40u);
  unsigned int v12 = sub_1CBDA6464(v8, 0x3Fu);
  unsigned int v13 = sub_1CBDA6464(v8, 0x2Eu);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    uint64_t result = sub_1CBDA0990((uint64_t)a1, a3, v10, a5 + 28);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA0990((uint64_t)a1, a3, v11, a5 + 84);
      if (result == 3)
      {
        uint64_t result = sub_1CBDA0990((uint64_t)a1, a3, v12, a5 + 56);
        if (result == 3)
        {
          int v15 = *(unsigned __int8 *)(a5 + 188);
          uint64_t v16 = 32 * *(unsigned __int8 *)(a5 + 16);
          uint64_t v17 = *(void *)(a3 + 16);
          unsigned int v18 = (void *)(v17 + 16 * v13);
          if (*(unsigned char *)v18 == 2)
          {
            unsigned int v18 = (void *)(v17 + 16 * v13);
            v16 |= v18[1];
          }
          else
          {
            void *v18 = 2;
          }
          v18[1] = v16;
          sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v13, v15 != 0, (unsigned __int8 *)(a5 + 148), (unsigned int *)(a5 + 156));
          return 3;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD44C4E8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x18u);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 76), (unsigned __int8 *)(a5 + 36), (unsigned int *)(a5 + 44));

  return sub_1CBDA0A88((uint64_t)a1, a3, v10, a5, 1);
}

uint64_t sub_1CD44C584(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  uint64_t v11 = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (v11 == 3)
  {
    int v12 = *(unsigned __int8 *)(a5 + 76);
    uint64_t v13 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v14 = *(void *)(a3 + 16);
    int v15 = (void *)(v14 + 16 * v10);
    if (*(unsigned char *)v15 == 2)
    {
      int v15 = (void *)(v14 + 16 * v10);
      v13 |= v15[1];
    }
    else
    {
      *int v15 = 2;
    }
    v15[1] = v13;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v12 != 0, (unsigned __int8 *)(a5 + 36), (unsigned int *)(a5 + 44));
  }
  return v11;
}

uint64_t sub_1CD44C664(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x67u);
  unsigned int v11 = sub_1CBDA6464(v8, 0x68u);
  unsigned int v12 = sub_1CBDA6464(v8, 0x69u);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *((unsigned __int8 *)a5 + 64), (unsigned __int8 *)a5 + 20, (unsigned int *)a5 + 7);
  uint64_t v13 = (void *)(*(void *)(a3 + 16) + 16 * v10);
  uint64_t v14 = *((unsigned int *)a5 + 15);
  *uint64_t v13 = 2;
  v13[1] = v14;
  int v15 = (void *)(*(void *)(a3 + 16) + 16 * v11);
  uint64_t v16 = *a5;
  *int v15 = 2;
  v15[1] = v16;
  uint64_t v17 = (void *)(*(void *)(a3 + 16) + 16 * v12);
  uint64_t v18 = *((unsigned int *)a5 + 2);
  *uint64_t v17 = 2;
  v17[1] = v18;
  return 3;
}

uint64_t sub_1CD44C73C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = a2;
  unsigned int v8 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v9 = sub_1CBDA6464(v7, 0x76u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x77u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x78u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x79u);
  unsigned int v13 = sub_1CBDA6464(v7, 0x7Au);
  unsigned int v14 = sub_1CBDA6464(v7, 0x7Bu);
  unsigned int v15 = sub_1CBDA6464(v7, 0x7Cu);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v8, *(unsigned __int8 *)(a5 + 70), (unsigned __int8 *)(a5 + 8), (unsigned int *)(a5 + 16));
  uint64_t v16 = (void *)(*(void *)(a3 + 16) + 16 * v9);
  uint64_t v17 = *(unsigned int *)(a5 + 52);
  void *v16 = 2;
  v16[1] = v17;
  uint64_t v18 = (void *)(*(void *)(a3 + 16) + 16 * v10);
  uint64_t v19 = *(unsigned int *)(a5 + 56);
  void *v18 = 2;
  v18[1] = v19;
  uint64_t v20 = (void *)(*(void *)(a3 + 16) + 16 * v11);
  uint64_t v21 = *(unsigned int *)(a5 + 60);
  void *v20 = 2;
  v20[1] = v21;
  uint64_t v22 = (void *)(*(void *)(a3 + 16) + 16 * v12);
  uint64_t v23 = *(unsigned __int8 *)(a5 + 64);
  *uint64_t v22 = 2;
  v22[1] = v23;
  int v24 = (void *)(*(void *)(a3 + 16) + 16 * v13);
  uint64_t v25 = *(unsigned __int8 *)(a5 + 69);
  *int v24 = 2;
  v24[1] = v25;
  unsigned int v26 = (void *)(*(void *)(a3 + 16) + 16 * v14);
  uint64_t v27 = *(unsigned __int8 *)(a5 + 68);
  *unsigned int v26 = 2;
  v26[1] = v27;
  unsigned int v28 = (void *)(*(void *)(a3 + 16) + 16 * v15);
  uint64_t v29 = *(unsigned __int16 *)(a5 + 48);
  *unsigned int v28 = 2;
  v28[1] = v29;
  return 3;
}

uint64_t sub_1CD44C8A8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x7Du);
  unsigned int v11 = sub_1CBDA6464(v8, 0x7Eu);
  unsigned int v12 = sub_1CBDA6464(v8, 0x7Fu);
  unsigned int v13 = sub_1CBDA6464(v8, 0x80u);
  unsigned int v14 = sub_1CBDA6464(v8, 0x81u);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 62), (unsigned __int8 *)(a5 + 8), (unsigned int *)(a5 + 24));
  unsigned int v15 = (void *)(*(void *)(a3 + 16) + 16 * v10);
  uint64_t v16 = *(unsigned __int8 *)(a5 + 16);
  *unsigned int v15 = 2;
  v15[1] = v16;
  uint64_t v17 = (void *)(*(void *)(a3 + 16) + 16 * v11);
  uint64_t v18 = *(unsigned int *)(a5 + 20);
  *uint64_t v17 = 2;
  v17[1] = v18;
  uint64_t v19 = (void *)(*(void *)(a3 + 16) + 16 * v12);
  uint64_t v20 = *(unsigned __int16 *)(a5 + 60);
  *uint64_t v19 = 2;
  v19[1] = v20;
  uint64_t v21 = (void *)(*(void *)(a3 + 16) + 16 * v13);
  uint64_t v22 = *(unsigned __int16 *)(a5 + 56);
  *uint64_t v21 = 2;
  v21[1] = v22;
  uint64_t v23 = (void *)(*(void *)(a3 + 16) + 16 * v14);
  uint64_t v24 = *(unsigned __int16 *)(a5 + 58);
  *uint64_t v23 = 2;
  v23[1] = v24;
  return 3;
}

uint64_t sub_1CD44C9C8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x71u);
  unsigned int v11 = sub_1CBDA6464(v8, 0x72u);
  unsigned int v12 = sub_1CBDA6464(v8, 0x73u);
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 60), (unsigned __int8 *)(a5 + 8), (unsigned int *)(a5 + 16));
  unsigned int v13 = (void *)(*(void *)(a3 + 16) + 16 * v10);
  uint64_t v14 = *(unsigned int *)(a5 + 48);
  *unsigned int v13 = 2;
  v13[1] = v14;
  unsigned int v15 = (void *)(*(void *)(a3 + 16) + 16 * v11);
  uint64_t v16 = *(unsigned int *)(a5 + 52);
  *unsigned int v15 = 2;
  v15[1] = v16;
  uint64_t v17 = (void *)(*(void *)(a3 + 16) + 16 * v12);
  uint64_t v18 = *(unsigned int *)(a5 + 56);
  *uint64_t v17 = 2;
  v17[1] = v18;
  return 3;
}

uint64_t sub_1CD44CAA0(unsigned int *a1, unsigned __int16 a2, unsigned __int16 *a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x11u);
  unsigned int v10 = sub_1CBDA6464(v8, 4u);
  unint64_t v11 = *a5;
  if ((v11 & 0xFFFFFE0F) != 0) {
    return 0;
  }
  unsigned int v13 = v10;
  unsigned int v14 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v15 = (void *)(*((void *)a3 + 2) + 16 * sub_1CBDA6464(v8, 3u));
  uint64_t v16 = *(unsigned __int16 *)(*(void *)(*(void *)(*((void *)a1 + 1) + 24) + 2880) + ((v11 >> 3) & 0x1FFE));
  *unsigned int v15 = 1;
  v15[1] = v16;
  int v17 = *((unsigned __int8 *)a5 + 140);
  uint64_t v18 = 32 * *((unsigned __int8 *)a5 + 12);
  uint64_t v19 = *((void *)a3 + 2);
  uint64_t v20 = (void *)(v19 + 16 * v14);
  if (*(unsigned char *)v20 == 2)
  {
    uint64_t v20 = (void *)(v19 + 16 * v14);
    v18 |= v20[1];
  }
  else
  {
    void *v20 = 2;
  }
  v20[1] = v18;
  sub_1CBDA07C8(*a1, *((void *)a3 + 2), v14, v17 != 0, (unsigned __int8 *)a5 + 100, (unsigned int *)a5 + 27);
  uint64_t result = sub_1CBDA5530(*((void *)a1 + 1), (uint64_t)a3, v9, a5 + 12);
  if (result == 3)
  {
    uint64_t result = sub_1CBDA5530(*((void *)a1 + 1), (uint64_t)a3, v13, a5 + 28);
    if (result == 3)
    {
      unsigned int v21 = sub_1CBDA6464(*a3, 0x14u);
      unint64_t v22 = *a5;
      if ((v22 & 0xFFFFFE0F) == 0)
      {
        uint64_t v23 = (void *)(*((void *)a3 + 2) + 16 * v21);
        uint64_t v24 = *(unsigned __int16 *)(*(void *)(*(void *)(*((void *)a1 + 1) + 24) + 2880) + ((v22 >> 3) & 0x1FFE));
        *uint64_t v23 = 1;
        v23[1] = v24;
      }
      uint64_t v25 = (_OWORD *)(*((void *)a3 + 2) + 16 * (v21 + 1));
      if (*(unsigned char *)v25 != 2) {
        *uint64_t v25 = xmmword_1CD91D2D0;
      }
      return 3;
    }
  }
  return result;
}

uint64_t sub_1CD44CC58(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x11u);
  unsigned int v10 = sub_1CBDA6464(v8, 4u);
  unint64_t v11 = *a5;
  if ((v11 & 0xFFFFFE0F) != 0) {
    return 0;
  }
  unsigned int v13 = v10;
  unsigned int v14 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v15 = (void *)(*(void *)(a3 + 16) + 16 * sub_1CBDA6464(v8, 3u));
  uint64_t v16 = *(unsigned __int16 *)(*(void *)(*(void *)(*((void *)a1 + 1) + 24) + 2880) + ((v11 >> 3) & 0x1FFE));
  *unsigned int v15 = 1;
  v15[1] = v16;
  int v17 = *((unsigned __int8 *)a5 + 140);
  uint64_t v18 = 32 * *((unsigned __int8 *)a5 + 12);
  uint64_t v19 = *(void *)(a3 + 16);
  uint64_t v20 = (void *)(v19 + 16 * v14);
  if (*(unsigned char *)v20 == 2)
  {
    uint64_t v20 = (void *)(v19 + 16 * v14);
    v18 |= v20[1];
  }
  else
  {
    void *v20 = 2;
  }
  v20[1] = v18;
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v14, v17 != 0, (unsigned __int8 *)a5 + 100, (unsigned int *)a5 + 27);
  uint64_t result = sub_1CBDA5530(*((void *)a1 + 1), a3, v9, a5 + 12);
  if (result == 3)
  {
    uint64_t v21 = *((void *)a1 + 1);
    return sub_1CBDA5530(v21, a3, v13, a5 + 28);
  }
  return result;
}

uint64_t sub_1CD44CDC0(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x11u);
  unsigned int v10 = sub_1CBDA6464(v8, 4u);
  unint64_t v11 = *a5;
  if ((v11 & 0xFFFFFE0F) != 0) {
    return 0;
  }
  unsigned int v13 = v10;
  unsigned int v14 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v15 = (void *)(*(void *)(a3 + 16) + 16 * sub_1CBDA6464(v8, 3u));
  uint64_t v16 = *(unsigned __int16 *)(*(void *)(*(void *)(*((void *)a1 + 1) + 24) + 2880) + ((v11 >> 3) & 0x1FFE));
  *unsigned int v15 = 1;
  v15[1] = v16;
  int v17 = *((unsigned __int8 *)a5 + 144);
  uint64_t v18 = 32 * *((unsigned __int8 *)a5 + 12);
  uint64_t v19 = *(void *)(a3 + 16);
  uint64_t v20 = (void *)(v19 + 16 * v14);
  if (*(unsigned char *)v20 == 2)
  {
    uint64_t v20 = (void *)(v19 + 16 * v14);
    v18 |= v20[1];
  }
  else
  {
    void *v20 = 2;
  }
  v20[1] = v18;
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v14, v17 != 0, (unsigned __int8 *)a5 + 96, (unsigned int *)a5 + 27);
  uint64_t result = sub_1CBDA5640(*((void *)a1 + 1), a3, v9, a5 + 12);
  if (result == 3)
  {
    uint64_t result = sub_1CBDA5640(*((void *)a1 + 1), a3, v13, a5 + 28);
    if (result == 3)
    {
      sub_1CBDA56F0(*((void *)a1 + 1), (unsigned __int16 *)a3, *a5);
      return 3;
    }
  }
  return result;
}

uint64_t sub_1CD44CF24(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x11u);
  unsigned int v10 = sub_1CBDA6464(v8, 4u);
  unint64_t v11 = *a5;
  if ((v11 & 0xFFFFFE0F) != 0) {
    return 0;
  }
  unsigned int v13 = v10;
  unsigned int v14 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v15 = (void *)(*(void *)(a3 + 16) + 16 * sub_1CBDA6464(v8, 3u));
  uint64_t v16 = *(unsigned __int16 *)(*(void *)(*(void *)(*((void *)a1 + 1) + 24) + 2880) + ((v11 >> 3) & 0x1FFE));
  *unsigned int v15 = 1;
  v15[1] = v16;
  int v17 = *((unsigned __int8 *)a5 + 144);
  uint64_t v18 = 32 * *((unsigned __int8 *)a5 + 12);
  uint64_t v19 = *(void *)(a3 + 16);
  uint64_t v20 = (void *)(v19 + 16 * v14);
  if (*(unsigned char *)v20 == 2)
  {
    uint64_t v20 = (void *)(v19 + 16 * v14);
    v18 |= v20[1];
  }
  else
  {
    void *v20 = 2;
  }
  v20[1] = v18;
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v14, v17 != 0, (unsigned __int8 *)a5 + 96, (unsigned int *)a5 + 27);
  uint64_t result = sub_1CBDA5640(*((void *)a1 + 1), a3, v9, a5 + 12);
  if (result == 3)
  {
    uint64_t v21 = *((void *)a1 + 1);
    return sub_1CBDA5640(v21, a3, v13, a5 + 28);
  }
  return result;
}

uint64_t sub_1CD44D08C(unsigned int *a1, unsigned __int16 a2, unsigned __int16 *a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x11u);
  unsigned int v10 = sub_1CBDA6464(v8, 4u);
  unint64_t v11 = *a5;
  if ((v11 & 0xFFFFFE07) != 0) {
    return 0;
  }
  unsigned int v13 = v10;
  unsigned int v14 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v15 = (void *)(*((void *)a3 + 2) + 16 * sub_1CBDA6464(v8, 3u));
  uint64_t v16 = *(unsigned __int16 *)(*(void *)(*(void *)(*((void *)a1 + 1) + 24) + 1824) + ((v11 >> 2) & 0x3FFE));
  *unsigned int v15 = 1;
  v15[1] = v16;
  int v17 = *((unsigned __int8 *)a5 + 140);
  uint64_t v18 = 32 * *((unsigned __int8 *)a5 + 12);
  uint64_t v19 = *((void *)a3 + 2);
  uint64_t v20 = (void *)(v19 + 16 * v14);
  if (*(unsigned char *)v20 == 2)
  {
    uint64_t v20 = (void *)(v19 + 16 * v14);
    v18 |= v20[1];
  }
  else
  {
    void *v20 = 2;
  }
  v20[1] = v18;
  sub_1CBDA07C8(*a1, *((void *)a3 + 2), v14, v17 != 0, (unsigned __int8 *)a5 + 100, (unsigned int *)a5 + 27);
  uint64_t result = sub_1CBDA5530(*((void *)a1 + 1), (uint64_t)a3, v9, a5 + 12);
  if (result == 3)
  {
    uint64_t result = sub_1CBDA5780(*((void *)a1 + 1), (uint64_t)a3, v13, a5 + 28);
    if (result == 3)
    {
      unsigned int v21 = sub_1CBDA6464(*a3, 0x14u);
      unint64_t v22 = *a5;
      if ((v22 & 0xFFFFFE07) == 0)
      {
        uint64_t v23 = (void *)(*((void *)a3 + 2) + 16 * v21);
        uint64_t v24 = *(unsigned __int16 *)(*(void *)(*(void *)(*((void *)a1 + 1) + 24) + 1824) + ((v22 >> 2) & 0x3FFE));
        *uint64_t v23 = 1;
        v23[1] = v24;
      }
      uint64_t v25 = (_OWORD *)(*((void *)a3 + 2) + 16 * (v21 + 1));
      if (*(unsigned char *)v25 != 2) {
        *uint64_t v25 = xmmword_1CD91D2D0;
      }
      return 3;
    }
  }
  return result;
}

uint64_t sub_1CD44D244(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x11u);
  unsigned int v10 = sub_1CBDA6464(v8, 4u);
  unint64_t v11 = *a5;
  if ((v11 & 0xFFFFFE07) != 0) {
    return 0;
  }
  unsigned int v13 = v10;
  unsigned int v14 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v15 = (void *)(*(void *)(a3 + 16) + 16 * sub_1CBDA6464(v8, 3u));
  uint64_t v16 = *(unsigned __int16 *)(*(void *)(*(void *)(*((void *)a1 + 1) + 24) + 1824) + ((v11 >> 2) & 0x3FFE));
  *unsigned int v15 = 1;
  v15[1] = v16;
  int v17 = *((unsigned __int8 *)a5 + 140);
  uint64_t v18 = 32 * *((unsigned __int8 *)a5 + 12);
  uint64_t v19 = *(void *)(a3 + 16);
  uint64_t v20 = (void *)(v19 + 16 * v14);
  if (*(unsigned char *)v20 == 2)
  {
    uint64_t v20 = (void *)(v19 + 16 * v14);
    v18 |= v20[1];
  }
  else
  {
    void *v20 = 2;
  }
  v20[1] = v18;
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v14, v17 != 0, (unsigned __int8 *)a5 + 100, (unsigned int *)a5 + 27);
  uint64_t result = sub_1CBDA5530(*((void *)a1 + 1), a3, v9, a5 + 12);
  if (result == 3)
  {
    uint64_t v21 = *((void *)a1 + 1);
    return sub_1CBDA5780(v21, a3, v13, a5 + 28);
  }
  return result;
}

uint64_t sub_1CD44D3AC(unsigned int *a1, unsigned __int16 a2, unsigned __int16 *a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x11u);
  unsigned int v10 = sub_1CBDA6464(v8, 4u);
  unint64_t v11 = *a5;
  if ((v11 & 0xFFFFFE07) != 0) {
    return 0;
  }
  unsigned int v13 = v10;
  unsigned int v14 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v15 = (void *)(*((void *)a3 + 2) + 16 * sub_1CBDA6464(v8, 3u));
  uint64_t v16 = *(unsigned __int16 *)(*(void *)(*(void *)(*((void *)a1 + 1) + 24) + 1824) + ((v11 >> 2) & 0x3FFE));
  *unsigned int v15 = 1;
  v15[1] = v16;
  int v17 = *((unsigned __int8 *)a5 + 140);
  uint64_t v18 = 32 * *((unsigned __int8 *)a5 + 12);
  uint64_t v19 = *((void *)a3 + 2);
  uint64_t v20 = (void *)(v19 + 16 * v14);
  if (*(unsigned char *)v20 == 2)
  {
    uint64_t v20 = (void *)(v19 + 16 * v14);
    v18 |= v20[1];
  }
  else
  {
    void *v20 = 2;
  }
  v20[1] = v18;
  sub_1CBDA07C8(*a1, *((void *)a3 + 2), v14, v17 != 0, (unsigned __int8 *)a5 + 100, (unsigned int *)a5 + 27);
  uint64_t result = sub_1CBDA5780(*((void *)a1 + 1), (uint64_t)a3, v9, a5 + 12);
  if (result == 3)
  {
    uint64_t result = sub_1CBDA5530(*((void *)a1 + 1), (uint64_t)a3, v13, a5 + 28);
    if (result == 3)
    {
      unsigned int v21 = sub_1CBDA6464(*a3, 0x14u);
      unint64_t v22 = *a5;
      if ((v22 & 0xFFFFFE07) == 0)
      {
        uint64_t v23 = (void *)(*((void *)a3 + 2) + 16 * v21);
        uint64_t v24 = *(unsigned __int16 *)(*(void *)(*(void *)(*((void *)a1 + 1) + 24) + 1824) + ((v22 >> 2) & 0x3FFE));
        *uint64_t v23 = 1;
        v23[1] = v24;
      }
      uint64_t v25 = (_OWORD *)(*((void *)a3 + 2) + 16 * (v21 + 1));
      if (*(unsigned char *)v25 != 2) {
        *uint64_t v25 = xmmword_1CD91D2D0;
      }
      return 3;
    }
  }
  return result;
}

uint64_t sub_1CD44D564(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x11u);
  unsigned int v10 = sub_1CBDA6464(v8, 4u);
  unint64_t v11 = *a5;
  if ((v11 & 0xFFFFFE07) != 0) {
    return 0;
  }
  unsigned int v13 = v10;
  unsigned int v14 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v15 = (void *)(*(void *)(a3 + 16) + 16 * sub_1CBDA6464(v8, 3u));
  uint64_t v16 = *(unsigned __int16 *)(*(void *)(*(void *)(*((void *)a1 + 1) + 24) + 1824) + ((v11 >> 2) & 0x3FFE));
  *unsigned int v15 = 1;
  v15[1] = v16;
  int v17 = *((unsigned __int8 *)a5 + 140);
  uint64_t v18 = 32 * *((unsigned __int8 *)a5 + 12);
  uint64_t v19 = *(void *)(a3 + 16);
  uint64_t v20 = (void *)(v19 + 16 * v14);
  if (*(unsigned char *)v20 == 2)
  {
    uint64_t v20 = (void *)(v19 + 16 * v14);
    v18 |= v20[1];
  }
  else
  {
    void *v20 = 2;
  }
  v20[1] = v18;
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v14, v17 != 0, (unsigned __int8 *)a5 + 100, (unsigned int *)a5 + 27);
  uint64_t result = sub_1CBDA5780(*((void *)a1 + 1), a3, v9, a5 + 12);
  if (result == 3)
  {
    uint64_t v21 = *((void *)a1 + 1);
    return sub_1CBDA5530(v21, a3, v13, a5 + 28);
  }
  return result;
}

uint64_t sub_1CD44D6CC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x11u);
  unsigned int v10 = sub_1CBDA6464(v8, 4u);
  unint64_t v11 = *a5;
  if ((v11 & 0xFFFFFE07) != 0) {
    return 0;
  }
  unsigned int v13 = v10;
  unsigned int v14 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v15 = (void *)(*(void *)(a3 + 16) + 16 * sub_1CBDA6464(v8, 3u));
  uint64_t v16 = *(unsigned __int16 *)(*(void *)(*(void *)(*((void *)a1 + 1) + 24) + 1824) + ((v11 >> 2) & 0x3FFE));
  *unsigned int v15 = 1;
  v15[1] = v16;
  int v17 = *((unsigned __int8 *)a5 + 144);
  uint64_t v18 = 32 * *((unsigned __int8 *)a5 + 12);
  uint64_t v19 = *(void *)(a3 + 16);
  uint64_t v20 = (void *)(v19 + 16 * v14);
  if (*(unsigned char *)v20 == 2)
  {
    uint64_t v20 = (void *)(v19 + 16 * v14);
    v18 |= v20[1];
  }
  else
  {
    void *v20 = 2;
  }
  v20[1] = v18;
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v14, v17 != 0, (unsigned __int8 *)a5 + 96, (unsigned int *)a5 + 27);
  uint64_t result = sub_1CBDA5640(*((void *)a1 + 1), a3, v9, a5 + 12);
  if (result == 3)
  {
    uint64_t result = sub_1CBDA5890(*((void *)a1 + 1), a3, v13, a5 + 28);
    if (result == 3)
    {
      sub_1CBDA593C(*((void *)a1 + 1), (unsigned __int16 *)a3, *a5);
      return 3;
    }
  }
  return result;
}

uint64_t sub_1CD44D830(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x11u);
  unsigned int v10 = sub_1CBDA6464(v8, 4u);
  unint64_t v11 = *a5;
  if ((v11 & 0xFFFFFE07) != 0) {
    return 0;
  }
  unsigned int v13 = v10;
  unsigned int v14 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v15 = (void *)(*(void *)(a3 + 16) + 16 * sub_1CBDA6464(v8, 3u));
  uint64_t v16 = *(unsigned __int16 *)(*(void *)(*(void *)(*((void *)a1 + 1) + 24) + 1824) + ((v11 >> 2) & 0x3FFE));
  *unsigned int v15 = 1;
  v15[1] = v16;
  int v17 = *((unsigned __int8 *)a5 + 144);
  uint64_t v18 = 32 * *((unsigned __int8 *)a5 + 12);
  uint64_t v19 = *(void *)(a3 + 16);
  uint64_t v20 = (void *)(v19 + 16 * v14);
  if (*(unsigned char *)v20 == 2)
  {
    uint64_t v20 = (void *)(v19 + 16 * v14);
    v18 |= v20[1];
  }
  else
  {
    void *v20 = 2;
  }
  v20[1] = v18;
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v14, v17 != 0, (unsigned __int8 *)a5 + 96, (unsigned int *)a5 + 27);
  uint64_t result = sub_1CBDA5640(*((void *)a1 + 1), a3, v9, a5 + 12);
  if (result == 3)
  {
    uint64_t v21 = *((void *)a1 + 1);
    return sub_1CBDA5890(v21, a3, v13, a5 + 28);
  }
  return result;
}

uint64_t sub_1CD44D998(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x11u);
  unsigned int v10 = sub_1CBDA6464(v8, 4u);
  unint64_t v11 = *a5;
  if ((v11 & 0xFFFFFE07) != 0) {
    return 0;
  }
  unsigned int v13 = v10;
  unsigned int v14 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v15 = (void *)(*(void *)(a3 + 16) + 16 * sub_1CBDA6464(v8, 3u));
  uint64_t v16 = *(unsigned __int16 *)(*(void *)(*(void *)(*((void *)a1 + 1) + 24) + 1824) + ((v11 >> 2) & 0x3FFE));
  *unsigned int v15 = 1;
  v15[1] = v16;
  int v17 = *((unsigned __int8 *)a5 + 144);
  uint64_t v18 = 32 * *((unsigned __int8 *)a5 + 12);
  uint64_t v19 = *(void *)(a3 + 16);
  uint64_t v20 = (void *)(v19 + 16 * v14);
  if (*(unsigned char *)v20 == 2)
  {
    uint64_t v20 = (void *)(v19 + 16 * v14);
    v18 |= v20[1];
  }
  else
  {
    void *v20 = 2;
  }
  v20[1] = v18;
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v14, v17 != 0, (unsigned __int8 *)a5 + 96, (unsigned int *)a5 + 27);
  uint64_t result = sub_1CBDA5890(*((void *)a1 + 1), a3, v9, a5 + 12);
  if (result == 3)
  {
    uint64_t result = sub_1CBDA5640(*((void *)a1 + 1), a3, v13, a5 + 28);
    if (result == 3)
    {
      sub_1CBDA593C(*((void *)a1 + 1), (unsigned __int16 *)a3, *a5);
      return 3;
    }
  }
  return result;
}

uint64_t sub_1CD44DAFC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 0x11u);
  unsigned int v10 = sub_1CBDA6464(v8, 4u);
  unint64_t v11 = *a5;
  if ((v11 & 0xFFFFFE07) != 0) {
    return 0;
  }
  unsigned int v13 = v10;
  unsigned int v14 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v15 = (void *)(*(void *)(a3 + 16) + 16 * sub_1CBDA6464(v8, 3u));
  uint64_t v16 = *(unsigned __int16 *)(*(void *)(*(void *)(*((void *)a1 + 1) + 24) + 1824) + ((v11 >> 2) & 0x3FFE));
  *unsigned int v15 = 1;
  v15[1] = v16;
  int v17 = *((unsigned __int8 *)a5 + 144);
  uint64_t v18 = 32 * *((unsigned __int8 *)a5 + 12);
  uint64_t v19 = *(void *)(a3 + 16);
  uint64_t v20 = (void *)(v19 + 16 * v14);
  if (*(unsigned char *)v20 == 2)
  {
    uint64_t v20 = (void *)(v19 + 16 * v14);
    v18 |= v20[1];
  }
  else
  {
    void *v20 = 2;
  }
  v20[1] = v18;
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v14, v17 != 0, (unsigned __int8 *)a5 + 96, (unsigned int *)a5 + 27);
  uint64_t result = sub_1CBDA5890(*((void *)a1 + 1), a3, v9, a5 + 12);
  if (result == 3)
  {
    uint64_t v21 = *((void *)a1 + 1);
    return sub_1CBDA5640(v21, a3, v13, a5 + 28);
  }
  return result;
}

uint64_t sub_1CD44DC64(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x11u);
  unsigned int v12 = sub_1CBDA6464(v8, 0x14u);
  unsigned int v13 = sub_1CBDA6464(v8, 0x37u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    int v15 = *(unsigned __int8 *)(a5 + 160);
    uint64_t v16 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v17 = *(void *)(a3 + 16);
    uint64_t v18 = (void *)(v17 + 16 * v10);
    if (*(unsigned char *)v18 == 2)
    {
      uint64_t v18 = (void *)(v17 + 16 * v10);
      v16 |= v18[1];
    }
    else
    {
      void *v18 = 2;
    }
    v18[1] = v16;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v15 != 0, (unsigned __int8 *)(a5 + 120), (unsigned int *)(a5 + 128));
    uint64_t result = sub_1CBDA0B7C((uint64_t)a1, a3, v11, a5 + 28);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA0A88((uint64_t)a1, a3, v12, a5 + 56, 1);
      if (result == 3)
      {
        return sub_1CBDA0A88((uint64_t)a1, a3, v13, a5 + 84, 1);
      }
    }
  }
  return result;
}

uint64_t sub_1CD44DDEC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x2Fu);
  unsigned int v12 = sub_1CBDA6464(v8, 0x11u);
  unsigned int v13 = sub_1CBDA6464(v8, 4u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    int v15 = *(unsigned __int8 *)(a5 + 144);
    uint64_t v16 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v17 = *(void *)(a3 + 16);
    uint64_t v18 = (void *)(v17 + 16 * v10);
    if (*(unsigned char *)v18 == 2)
    {
      uint64_t v18 = (void *)(v17 + 16 * v10);
      v16 |= v18[1];
    }
    else
    {
      void *v18 = 2;
    }
    v18[1] = v16;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v15 != 0, (unsigned __int8 *)(a5 + 92), (unsigned int *)(a5 + 112));
    uint64_t v19 = 96;
    if (!*(unsigned char *)(a5 + 108)) {
      uint64_t v19 = 32;
    }
    uint64_t v20 = *(unsigned int *)(a5 + 104) | (16 * *(unsigned __int8 *)(a5 + 100)) | v19;
    uint64_t v21 = (void *)(*(void *)(a3 + 16) + 16 * v11);
    *uint64_t v21 = 2;
    v21[1] = v20;
    uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v12, a5 + 28);
    if (result == 3)
    {
      if (*(_DWORD *)(a5 + 64))
      {
        return sub_1CBDA2DA0((uint64_t)a1, a3, v13, a5 + 56);
      }
      else
      {
        *(_OWORD *)(*(void *)(a3 + 16) + 16 * v13) = xmmword_1CD91D2D0;
        return 3;
      }
    }
  }
  return result;
}

void sub_1CD44DFA4(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x2Fu);
  unsigned int v12 = sub_1CBDA6464(v8, 0x11u);
  sub_1CBDA59CC((uint64_t)a1, a3, v9, a5, *(unsigned char *)(a5 + 84));
  if (v13 == 3)
  {
    int v14 = *(unsigned __int8 *)(a5 + 120);
    uint64_t v15 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v16 = *(void *)(a3 + 16);
    uint64_t v17 = (void *)(v16 + 16 * v10);
    if (*(unsigned char *)v17 == 2)
    {
      uint64_t v17 = (void *)(v16 + 16 * v10);
      v15 |= v17[1];
    }
    else
    {
      *uint64_t v17 = 2;
    }
    v17[1] = v15;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v14 != 0, (unsigned __int8 *)(a5 + 72), (unsigned int *)(a5 + 88));
    uint64_t v18 = 96;
    if (!*(unsigned char *)(a5 + 84)) {
      uint64_t v18 = 32;
    }
    uint64_t v19 = v18 | *(unsigned int *)(a5 + 80);
    uint64_t v20 = (void *)(*(void *)(a3 + 16) + 16 * v11);
    void *v20 = 2;
    v20[1] = v19;
    sub_1CBDA0A88((uint64_t)a1, a3, v12, a5 + 36, 1);
  }
}

void sub_1CD44E110(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  if (a4 == 204)
  {
    uint64_t v5 = a5;
LABEL_5:
    sub_1CD44E138(a1, a2, a3, v5);
    return;
  }
  if (a4 == 203)
  {
    uint64_t v5 = a5;
    goto LABEL_5;
  }
}

void sub_1CD44E138(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7 = a2;
  unsigned int v8 = sub_1CBDA6464(a2, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x49u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x4Au);
  unsigned int v12 = sub_1CBDA6464(v7, 0x4Bu);
  unsigned int v13 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v53 = sub_1CBDA6464(v7, 4u);
  unsigned int v52 = sub_1CBDA6464(v7, 0x14u);
  unsigned int v51 = sub_1CBDA6464(v7, 0x4Cu);
  unsigned int v50 = sub_1CBDA6464(v7, 0x4Du);
  unsigned int v49 = sub_1CBDA6464(v7, 0x4Eu);
  unsigned int v48 = sub_1CBDA6464(v7, 0x4Fu);
  unsigned int v47 = sub_1CBDA6464(v7, 0x50u);
  unsigned int v46 = sub_1CBDA6464(v7, 0x51u);
  unsigned int v45 = sub_1CBDA6464(v7, 0x52u);
  unsigned int v14 = sub_1CBDA6464(v7, 0x53u);
  sub_1CBDA35A4((uint64_t)a1, a3, v8, a4);
  if (v15 == 3)
  {
    int v16 = *(unsigned __int8 *)(a4 + 168);
    uint64_t v17 = 32 * *(unsigned __int8 *)(a4 + 16);
    uint64_t v18 = *(void *)(a3 + 16);
    uint64_t v19 = (void *)(v18 + 16 * v9);
    if (*(unsigned char *)v19 == 2)
    {
      uint64_t v19 = (void *)(v18 + 16 * v9);
      v17 |= v19[1];
    }
    else
    {
      *uint64_t v19 = 2;
    }
    v19[1] = v17;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, v16 != 0, (unsigned __int8 *)(a4 + 128), (unsigned int *)(a4 + 136));
    uint64_t v20 = (*(_DWORD *)(a4 + 172) - 1);
    if (v20 < 7) {
      uint64_t v21 = v20 + 1;
    }
    else {
      uint64_t v21 = 0;
    }
    unint64_t v22 = (void *)(*(void *)(a3 + 16) + 16 * v10);
    *unint64_t v22 = 2;
    v22[1] = v21;
    uint64_t v23 = (*(_DWORD *)(a4 + 176) - 1);
    if (v23 < 7) {
      uint64_t v24 = v23 + 1;
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v25 = (void *)(*(void *)(a3 + 16) + 16 * v11);
    *uint64_t v25 = 2;
    v25[1] = v24;
    uint64_t v26 = (*(_DWORD *)(a4 + 180) - 1);
    if (v26 < 7) {
      uint64_t v27 = v26 + 1;
    }
    else {
      uint64_t v27 = 0;
    }
    unsigned int v28 = (void *)(*(void *)(a3 + 16) + 16 * v12);
    *unsigned int v28 = 2;
    v28[1] = v27;
    if (sub_1CBDA2DA0((uint64_t)a1, a3, v13, a4 + 36) == 3
      && sub_1CBDA2DA0((uint64_t)a1, a3, v53, a4 + 64) == 3
      && sub_1CBDA2DA0((uint64_t)a1, a3, v52, a4 + 92) == 3)
    {
      uint64_t v29 = *(unsigned int *)(a4 + 184);
      unsigned int v30 = (void *)(*(void *)(a3 + 16) + 16 * v51);
      *unsigned int v30 = 2;
      v30[1] = v29;
      uint64_t v31 = *(unsigned int *)(a4 + 188);
      unsigned int v32 = (void *)(*(void *)(a3 + 16) + 16 * v50);
      *unsigned int v32 = 2;
      v32[1] = v31;
      uint64_t v33 = *(unsigned int *)(a4 + 192);
      unsigned int v34 = (void *)(*(void *)(a3 + 16) + 16 * v49);
      *unsigned int v34 = 2;
      v34[1] = v33;
      uint64_t v35 = *(unsigned int *)(a4 + 196);
      long long v36 = (void *)(*(void *)(a3 + 16) + 16 * v48);
      void *v36 = 2;
      v36[1] = v35;
      uint64_t v37 = *(unsigned int *)(a4 + 200);
      long long v38 = (void *)(*(void *)(a3 + 16) + 16 * v47);
      *long long v38 = 2;
      v38[1] = v37;
      uint64_t v39 = *(unsigned int *)(a4 + 204);
      long long v40 = (void *)(*(void *)(a3 + 16) + 16 * v46);
      void *v40 = 2;
      v40[1] = v39;
      uint64_t v41 = *(unsigned int *)(a4 + 208);
      long long v42 = (void *)(*(void *)(a3 + 16) + 16 * v45);
      *long long v42 = 2;
      v42[1] = v41;
      uint64_t v43 = *(unsigned int *)(a4 + 212);
      long long v44 = (void *)(*(void *)(a3 + 16) + 16 * v14);
      void *v44 = 2;
      v44[1] = v43;
    }
  }
}

uint64_t sub_1CD44E484(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x49u);
  unsigned int v12 = sub_1CBDA6464(v8, 0x4Au);
  unsigned int v13 = sub_1CBDA6464(v8, 0x4Bu);
  unsigned int v14 = sub_1CBDA6464(v8, 0x11u);
  unsigned int v54 = sub_1CBDA6464(v8, 4u);
  unsigned int v53 = sub_1CBDA6464(v8, 0x14u);
  unsigned int v52 = sub_1CBDA6464(v8, 0x4Cu);
  unsigned int v51 = sub_1CBDA6464(v8, 0x4Du);
  unsigned int v50 = sub_1CBDA6464(v8, 0x4Eu);
  unsigned int v49 = sub_1CBDA6464(v8, 0x4Fu);
  unsigned int v48 = sub_1CBDA6464(v8, 0x50u);
  unsigned int v47 = sub_1CBDA6464(v8, 0x51u);
  unsigned int v46 = sub_1CBDA6464(v8, 0x52u);
  unsigned int v15 = sub_1CBDA6464(v8, 0x53u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v9, a5, 1);
  if (result == 3)
  {
    int v17 = *(unsigned __int8 *)(a5 + 160);
    uint64_t v18 = 32 * *(unsigned __int8 *)(a5 + 16);
    uint64_t v19 = *(void *)(a3 + 16);
    uint64_t v20 = (void *)(v19 + 16 * v10);
    if (*(unsigned char *)v20 == 2)
    {
      uint64_t v20 = (void *)(v19 + 16 * v10);
      v18 |= v20[1];
    }
    else
    {
      void *v20 = 2;
    }
    v20[1] = v18;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, v17 != 0, (unsigned __int8 *)(a5 + 120), (unsigned int *)(a5 + 128));
    uint64_t v21 = (*(_DWORD *)(a5 + 164) - 1);
    if (v21 < 7) {
      uint64_t v22 = v21 + 1;
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = (void *)(*(void *)(a3 + 16) + 16 * v11);
    *uint64_t v23 = 2;
    v23[1] = v22;
    uint64_t v24 = (*(_DWORD *)(a5 + 168) - 1);
    if (v24 < 7) {
      uint64_t v25 = v24 + 1;
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v26 = (void *)(*(void *)(a3 + 16) + 16 * v12);
    *uint64_t v26 = 2;
    v26[1] = v25;
    uint64_t v27 = (*(_DWORD *)(a5 + 172) - 1);
    if (v27 < 7) {
      uint64_t v28 = v27 + 1;
    }
    else {
      uint64_t v28 = 0;
    }
    uint64_t v29 = (void *)(*(void *)(a3 + 16) + 16 * v13);
    *uint64_t v29 = 2;
    v29[1] = v28;
    uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v14, a5 + 28);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v54, a5 + 56);
      if (result == 3)
      {
        uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v53, a5 + 84);
        if (result == 3)
        {
          uint64_t v30 = *(unsigned int *)(a5 + 176);
          uint64_t v31 = (void *)(*(void *)(a3 + 16) + 16 * v52);
          *uint64_t v31 = 2;
          v31[1] = v30;
          uint64_t v32 = *(unsigned int *)(a5 + 180);
          uint64_t v33 = (void *)(*(void *)(a3 + 16) + 16 * v51);
          *uint64_t v33 = 2;
          v33[1] = v32;
          uint64_t v34 = *(unsigned int *)(a5 + 184);
          uint64_t v35 = (void *)(*(void *)(a3 + 16) + 16 * v50);
          *uint64_t v35 = 2;
          v35[1] = v34;
          uint64_t v36 = *(unsigned int *)(a5 + 188);
          uint64_t v37 = (void *)(*(void *)(a3 + 16) + 16 * v49);
          *uint64_t v37 = 2;
          v37[1] = v36;
          uint64_t v38 = *(unsigned int *)(a5 + 192);
          uint64_t v39 = (void *)(*(void *)(a3 + 16) + 16 * v48);
          *uint64_t v39 = 2;
          v39[1] = v38;
          uint64_t v40 = *(unsigned int *)(a5 + 196);
          uint64_t v41 = (void *)(*(void *)(a3 + 16) + 16 * v47);
          *uint64_t v41 = 2;
          v41[1] = v40;
          uint64_t v42 = *(unsigned int *)(a5 + 200);
          uint64_t v43 = (void *)(*(void *)(a3 + 16) + 16 * v46);
          *uint64_t v43 = 2;
          v43[1] = v42;
          uint64_t v44 = *(unsigned int *)(a5 + 204);
          unsigned int v45 = (void *)(*(void *)(a3 + 16) + 16 * v15);
          *unsigned int v45 = 2;
          v45[1] = v44;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD44E7D4(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  if (a4 == 208)
  {
    uint64_t v6 = a5;
  }
  else
  {
    if (a4 != 207) {
      return 0;
    }
    uint64_t v6 = a5;
  }
  return sub_1CD44E7FC(a1, a2, a3, v6);
}

uint64_t sub_1CD44E7FC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7 = a2;
  unsigned int v8 = sub_1CBDA6464(a2, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x49u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x4Au);
  unsigned int v12 = sub_1CBDA6464(v7, 0x4Bu);
  unsigned int v13 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v53 = sub_1CBDA6464(v7, 4u);
  unsigned int v52 = sub_1CBDA6464(v7, 0x14u);
  unsigned int v51 = sub_1CBDA6464(v7, 0x4Cu);
  unsigned int v50 = sub_1CBDA6464(v7, 0x4Du);
  unsigned int v49 = sub_1CBDA6464(v7, 0x4Eu);
  unsigned int v48 = sub_1CBDA6464(v7, 0x4Fu);
  unsigned int v47 = sub_1CBDA6464(v7, 0x50u);
  unsigned int v46 = sub_1CBDA6464(v7, 0x51u);
  unsigned int v45 = sub_1CBDA6464(v7, 0x52u);
  unsigned int v14 = sub_1CBDA6464(v7, 0x53u);
  uint64_t result = sub_1CBDA0898((uint64_t)a1, a3, v8, a4, 1);
  if (result == 3)
  {
    int v16 = *(unsigned __int8 *)(a4 + 160);
    uint64_t v17 = 32 * *(unsigned __int8 *)(a4 + 16);
    uint64_t v18 = *(void *)(a3 + 16);
    uint64_t v19 = (void *)(v18 + 16 * v9);
    if (*(unsigned char *)v19 == 2)
    {
      uint64_t v19 = (void *)(v18 + 16 * v9);
      v17 |= v19[1];
    }
    else
    {
      *uint64_t v19 = 2;
    }
    v19[1] = v17;
    sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v9, v16 != 0, (unsigned __int8 *)(a4 + 120), (unsigned int *)(a4 + 128));
    uint64_t v20 = *(int *)(a4 + 164);
    if (v20 > 6) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = qword_1CDF53838[v20];
    }
    uint64_t v22 = (void *)(*(void *)(a3 + 16) + 16 * v10);
    *uint64_t v22 = 2;
    v22[1] = v21;
    uint64_t v23 = *(int *)(a4 + 168);
    if (v23 > 6) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = qword_1CDF53838[v23];
    }
    uint64_t v25 = (void *)(*(void *)(a3 + 16) + 16 * v11);
    *uint64_t v25 = 2;
    v25[1] = v24;
    uint64_t v26 = *(int *)(a4 + 172);
    if (v26 > 6) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = qword_1CDF53838[v26];
    }
    uint64_t v28 = (void *)(*(void *)(a3 + 16) + 16 * v12);
    *uint64_t v28 = 2;
    v28[1] = v27;
    uint64_t result = sub_1CBDA0990((uint64_t)a1, a3, v13, a4 + 28);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA0990((uint64_t)a1, a3, v53, a4 + 56);
      if (result == 3)
      {
        uint64_t result = sub_1CBDA0990((uint64_t)a1, a3, v52, a4 + 84);
        if (result == 3)
        {
          uint64_t v29 = *(unsigned int *)(a4 + 176);
          uint64_t v30 = (void *)(*(void *)(a3 + 16) + 16 * v51);
          *uint64_t v30 = 2;
          v30[1] = v29;
          uint64_t v31 = *(unsigned int *)(a4 + 180);
          uint64_t v32 = (void *)(*(void *)(a3 + 16) + 16 * v50);
          *uint64_t v32 = 2;
          v32[1] = v31;
          uint64_t v33 = *(unsigned int *)(a4 + 184);
          uint64_t v34 = (void *)(*(void *)(a3 + 16) + 16 * v49);
          *uint64_t v34 = 2;
          v34[1] = v33;
          uint64_t v35 = *(unsigned int *)(a4 + 188);
          uint64_t v36 = (void *)(*(void *)(a3 + 16) + 16 * v48);
          void *v36 = 2;
          v36[1] = v35;
          uint64_t v37 = *(unsigned int *)(a4 + 192);
          uint64_t v38 = (void *)(*(void *)(a3 + 16) + 16 * v47);
          *uint64_t v38 = 2;
          v38[1] = v37;
          uint64_t v39 = *(unsigned int *)(a4 + 196);
          uint64_t v40 = (void *)(*(void *)(a3 + 16) + 16 * v46);
          void *v40 = 2;
          v40[1] = v39;
          uint64_t v41 = *(unsigned int *)(a4 + 200);
          uint64_t v42 = (void *)(*(void *)(a3 + 16) + 16 * v45);
          *uint64_t v42 = 2;
          v42[1] = v41;
          uint64_t v43 = *(unsigned int *)(a4 + 204);
          uint64_t v44 = (void *)(*(void *)(a3 + 16) + 16 * v14);
          void *v44 = 2;
          v44[1] = v43;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD44EB6C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x49u);
  unsigned int v12 = sub_1CBDA6464(v8, 0x4Au);
  unsigned int v13 = sub_1CBDA6464(v8, 0x4Bu);
  unsigned int v14 = sub_1CBDA6464(v8, 0x11u);
  unsigned int v53 = sub_1CBDA6464(v8, 4u);
  unsigned int v52 = sub_1CBDA6464(v8, 0x14u);
  unsigned int v51 = sub_1CBDA6464(v8, 0x4Cu);
  unsigned int v50 = sub_1CBDA6464(v8, 0x4Du);
  unsigned int v49 = sub_1CBDA6464(v8, 0x4Eu);
  unsigned int v48 = sub_1CBDA6464(v8, 0x4Fu);
  unsigned int v47 = sub_1CBDA6464(v8, 0x50u);
  unsigned int v46 = sub_1CBDA6464(v8, 0x51u);
  unsigned int v45 = sub_1CBDA6464(v8, 0x52u);
  unsigned int v15 = sub_1CBDA6464(v8, 0x53u);
  int v16 = (void *)(*(void *)(a3 + 16) + 16 * v9);
  uint64_t v17 = *(unsigned __int8 *)(a5 + 85);
  if (v17 == 6)
  {
    uint64_t v18 = 2;
  }
  else if (v17 == 7)
  {
    uint64_t v18 = 1;
  }
  else
  {
    uint64_t v18 = v17 + 71;
  }
  void *v16 = 1;
  v16[1] = v18;
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, *(unsigned __int8 *)(a5 + 136), (unsigned __int8 *)(a5 + 96), (unsigned int *)(a5 + 104));
  uint64_t v19 = (*(_DWORD *)(a5 + 140) - 1);
  if (v19 < 7) {
    uint64_t v20 = v19 + 1;
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v21 = (void *)(*(void *)(a3 + 16) + 16 * v11);
  *uint64_t v21 = 2;
  v21[1] = v20;
  uint64_t v22 = (*(_DWORD *)(a5 + 144) - 1);
  if (v22 < 7) {
    uint64_t v23 = v22 + 1;
  }
  else {
    uint64_t v23 = 0;
  }
  uint64_t v24 = (void *)(*(void *)(a3 + 16) + 16 * v12);
  *uint64_t v24 = 2;
  v24[1] = v23;
  uint64_t v25 = (*(_DWORD *)(a5 + 148) - 1);
  if (v25 < 7) {
    uint64_t v26 = v25 + 1;
  }
  else {
    uint64_t v26 = 0;
  }
  uint64_t v27 = (void *)(*(void *)(a3 + 16) + 16 * v13);
  *uint64_t v27 = 2;
  v27[1] = v26;
  uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v14, a5);
  if (result == 3)
  {
    uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v53, a5 + 28);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA2DA0((uint64_t)a1, a3, v52, a5 + 56);
      if (result == 3)
      {
        uint64_t v29 = *(unsigned __int8 *)(a5 + 152);
        uint64_t v30 = (void *)(*(void *)(a3 + 16) + 16 * v51);
        *uint64_t v30 = 2;
        v30[1] = v29;
        uint64_t v31 = *(unsigned __int8 *)(a5 + 153);
        uint64_t v32 = (void *)(*(void *)(a3 + 16) + 16 * v50);
        *uint64_t v32 = 2;
        v32[1] = v31;
        uint64_t v33 = *(unsigned __int8 *)(a5 + 154);
        uint64_t v34 = (void *)(*(void *)(a3 + 16) + 16 * v49);
        *uint64_t v34 = 2;
        v34[1] = v33;
        uint64_t v35 = *(unsigned __int8 *)(a5 + 155);
        uint64_t v36 = (void *)(*(void *)(a3 + 16) + 16 * v48);
        void *v36 = 2;
        v36[1] = v35;
        uint64_t v37 = *(unsigned __int8 *)(a5 + 156);
        uint64_t v38 = (void *)(*(void *)(a3 + 16) + 16 * v47);
        *uint64_t v38 = 2;
        v38[1] = v37;
        uint64_t v39 = *(unsigned __int8 *)(a5 + 157);
        uint64_t v40 = (void *)(*(void *)(a3 + 16) + 16 * v46);
        void *v40 = 2;
        v40[1] = v39;
        uint64_t v41 = *(unsigned __int8 *)(a5 + 158);
        uint64_t v42 = (void *)(*(void *)(a3 + 16) + 16 * v45);
        *uint64_t v42 = 2;
        v42[1] = v41;
        uint64_t v43 = *(unsigned __int8 *)(a5 + 159);
        uint64_t v44 = (void *)(*(void *)(a3 + 16) + 16 * v15);
        void *v44 = 2;
        v44[1] = v43;
      }
    }
  }
  return result;
}

uint64_t sub_1CD44EE80(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  unsigned int v9 = sub_1CBDA6464(a2, 3u);
  unsigned int v10 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x49u);
  unsigned int v12 = sub_1CBDA6464(v8, 0x4Au);
  unsigned int v13 = sub_1CBDA6464(v8, 0x4Bu);
  unsigned int v14 = sub_1CBDA6464(v8, 0x11u);
  unsigned int v53 = sub_1CBDA6464(v8, 4u);
  unsigned int v52 = sub_1CBDA6464(v8, 0x14u);
  unsigned int v51 = sub_1CBDA6464(v8, 0x4Cu);
  unsigned int v50 = sub_1CBDA6464(v8, 0x4Du);
  unsigned int v49 = sub_1CBDA6464(v8, 0x4Eu);
  unsigned int v48 = sub_1CBDA6464(v8, 0x4Fu);
  unsigned int v47 = sub_1CBDA6464(v8, 0x50u);
  unsigned int v46 = sub_1CBDA6464(v8, 0x51u);
  unsigned int v45 = sub_1CBDA6464(v8, 0x52u);
  unsigned int v15 = sub_1CBDA6464(v8, 0x53u);
  int v16 = (void *)(*(void *)(a3 + 16) + 16 * v9);
  uint64_t v17 = *(unsigned __int8 *)(a5 + 85);
  if (v17 == 6)
  {
    uint64_t v18 = 2;
  }
  else if (v17 == 7)
  {
    uint64_t v18 = 1;
  }
  else
  {
    uint64_t v18 = v17 + 71;
  }
  void *v16 = 1;
  v16[1] = v18;
  sub_1CBDA07C8(*a1, *(void *)(a3 + 16), v10, *(unsigned __int8 *)(a5 + 136), (unsigned __int8 *)(a5 + 96), (unsigned int *)(a5 + 104));
  uint64_t v19 = *(int *)(a5 + 140);
  if (v19 > 6) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = qword_1CDF53838[v19];
  }
  uint64_t v21 = (void *)(*(void *)(a3 + 16) + 16 * v11);
  *uint64_t v21 = 2;
  v21[1] = v20;
  uint64_t v22 = *(int *)(a5 + 144);
  if (v22 > 6) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = qword_1CDF53838[v22];
  }
  uint64_t v24 = (void *)(*(void *)(a3 + 16) + 16 * v12);
  *uint64_t v24 = 2;
  v24[1] = v23;
  uint64_t v25 = *(int *)(a5 + 148);
  if (v25 > 6) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = qword_1CDF53838[v25];
  }
  uint64_t v27 = (void *)(*(void *)(a3 + 16) + 16 * v13);
  *uint64_t v27 = 2;
  v27[1] = v26;
  uint64_t result = sub_1CBDA0990((uint64_t)a1, a3, v14, a5);
  if (result == 3)
  {
    uint64_t result = sub_1CBDA0990((uint64_t)a1, a3, v53, a5 + 28);
    if (result == 3)
    {
      uint64_t result = sub_1CBDA0990((uint64_t)a1, a3, v52, a5 + 56);
      if (result == 3)
      {
        uint64_t v29 = *(unsigned __int8 *)(a5 + 152);
        uint64_t v30 = (void *)(*(void *)(a3 + 16) + 16 * v51);
        *uint64_t v30 = 2;
        v30[1] = v29;
        uint64_t v31 = *(unsigned __int8 *)(a5 + 153);
        uint64_t v32 = (void *)(*(void *)(a3 + 16) + 16 * v50);
        *uint64_t v32 = 2;
        v32[1] = v31;
        uint64_t v33 = *(unsigned __int8 *)(a5 + 154);
        uint64_t v34 = (void *)(*(void *)(a3 + 16) + 16 * v49);
        *uint64_t v34 = 2;
        v34[1] = v33;
        uint64_t v35 = *(unsigned __int8 *)(a5 + 155);
        uint64_t v36 = (void *)(*(void *)(a3 + 16) + 16 * v48);
        void *v36 = 2;
        v36[1] = v35;
        uint64_t v37 = *(unsigned __int8 *)(a5 + 156);
        uint64_t v38 = (void *)(*(void *)(a3 + 16) + 16 * v47);
        *uint64_t v38 = 2;
        v38[1] = v37;
        uint64_t v39 = *(unsigned __int8 *)(a5 + 157);
        uint64_t v40 = (void *)(*(void *)(a3 + 16) + 16 * v46);
        void *v40 = 2;
        v40[1] = v39;
        uint64_t v41 = *(unsigned __int8 *)(a5 + 158);
        uint64_t v42 = (void *)(*(void *)(a3 + 16) + 16 * v45);
        *uint64_t v42 = 2;
        v42[1] = v41;
        uint64_t v43 = *(unsigned __int8 *)(a5 + 159);
        uint64_t v44 = (void *)(*(void *)(a3 + 16) + 16 * v15);
        void *v44 = 2;
        v44[1] = v43;
      }
    }
  }
  return result;
}

uint64_t sub_1CD44F1C4(int a1)
{
  uint64_t result = 14;
  switch(a1)
  {
    case 1:
      return result;
    case 2:
      uint64_t result = 17;
      break;
    case 3:
      uint64_t result = 520;
      break;
    case 4:
      uint64_t result = 519;
      break;
    case 5:
      uint64_t result = 41;
      break;
    case 6:
      uint64_t result = 44;
      break;
    case 7:
      uint64_t result = 43;
      break;
    case 8:
      uint64_t result = 37;
      break;
    case 9:
      uint64_t result = 24;
      break;
    case 10:
      uint64_t result = 25;
      break;
    case 11:
      uint64_t result = 26;
      break;
    case 12:
      uint64_t result = 18;
      break;
    case 13:
      uint64_t result = 23;
      break;
    case 14:
      uint64_t result = 6;
      break;
    case 15:
      uint64_t result = 34;
      break;
    case 16:
      uint64_t result = 42;
      break;
    case 17:
      uint64_t result = 53;
      break;
    case 18:
      uint64_t result = 55;
      break;
    case 19:
      uint64_t result = 57;
      break;
    case 20:
      uint64_t result = 49;
      break;
    case 21:
      uint64_t result = 50;
      break;
    case 22:
      uint64_t result = 51;
      break;
    case 23:
      uint64_t result = 59;
      break;
    case 24:
      uint64_t result = 60;
      break;
    case 25:
      uint64_t result = 61;
      break;
    case 26:
      uint64_t result = 52;
      break;
    case 27:
      uint64_t result = 54;
      break;
    case 28:
      uint64_t result = 56;
      break;
    case 29:
      uint64_t result = 21;
      break;
    case 30:
      uint64_t result = 22;
      break;
    case 31:
      uint64_t result = 19;
      break;
    case 32:
      uint64_t result = 20;
      break;
    case 33:
      uint64_t result = 35;
      break;
    case 34:
      uint64_t result = 36;
      break;
    case 35:
      uint64_t result = 63;
      break;
    case 36:
      uint64_t result = 64;
      break;
    case 37:
      uint64_t result = 8;
      break;
    case 38:
      uint64_t result = 45;
      break;
    case 39:
      uint64_t result = 7;
      break;
    case 40:
      uint64_t result = 62;
      break;
    case 41:
      uint64_t result = 5;
      break;
    case 42:
      uint64_t result = 31;
      break;
    case 43:
      uint64_t result = 11;
      break;
    case 44:
      uint64_t result = 12;
      break;
    case 45:
      uint64_t result = 39;
      break;
    case 46:
      uint64_t result = 16;
      break;
    case 47:
      uint64_t result = 32;
      break;
    case 48:
      uint64_t result = 46;
      break;
    case 49:
      uint64_t result = 47;
      break;
    case 50:
      uint64_t result = 48;
      break;
    case 51:
      uint64_t result = 68;
      break;
    case 52:
      uint64_t result = 10;
      break;
    case 53:
      uint64_t result = 9;
      break;
    case 54:
      uint64_t result = 67;
      break;
    case 55:
      uint64_t result = 66;
      break;
    case 56:
      uint64_t result = 65;
      break;
    case 57:
      uint64_t result = 58;
      break;
    case 58:
      uint64_t result = 38;
      break;
    case 59:
      uint64_t result = 69;
      break;
    case 60:
      uint64_t result = 15;
      break;
    case 61:
      uint64_t result = 13;
      break;
    case 62:
      uint64_t result = 30;
      break;
    case 63:
      uint64_t result = 29;
      break;
    case 64:
      uint64_t result = 28;
      break;
    case 65:
      uint64_t result = 27;
      break;
    case 66:
      uint64_t result = 33;
      break;
    case 67:
      uint64_t result = 40;
      break;
    default:
      llvm::report_fatal_error((llvm *)"ZERO is not mapped.", (const llvm::Twine *)1);
  }
  return result;
}

uint64_t sub_1CD44F41C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = *((_DWORD *)a1 + 2);
  uint64_t v3 = *a1 + 96 * v2;
  if (v2 >= 2)
  {
    uint64_t v4 = v1 + 96;
    uint64_t v5 = 96 * v2 - 96;
    do
    {
      if (*(_DWORD *)(v1 + 4) < *(_DWORD *)(v4 + 4)) {
        uint64_t v1 = v4;
      }
      v4 += 96;
      v5 -= 96;
    }
    while (v5);
  }
  if (v1 == v3 || (int v6 = *(_DWORD *)(v1 + 4), v7 = __CFADD__(v6, 1), v8 = (v6 + 1), v7))
  {
    unsigned int v12 = 0;
LABEL_16:
    int v16 = "Unhandled NumWords interleave: ";
    __int16 v17 = 259;
    std::to_string(&v13, v12);
    __int16 v15 = 260;
    unsigned int v14 = &v13;
    sub_1CD3E3950((uint64_t *)&v16, (uint64_t *)&v14, (uint64_t)v18);
    llvm::report_fatal_error((llvm *)v18, (const llvm::Twine *)1);
  }
  unint64_t v9 = (v8 - 1) | ((unint64_t)(v8 - 1) >> 1) | (((v8 - 1) | ((unint64_t)(v8 - 1) >> 1)) >> 2);
  unint64_t v10 = v9 | (v9 >> 4) | ((v9 | (v9 >> 4)) >> 8);
  uint64_t result = v10 | (v10 >> 16);
  unsigned int v12 = result + 1;
  switch((int)result)
  {
    case 0:
      return result;
    case 1:
      return 1;
    case 2:
    case 4:
    case 5:
    case 6:
      goto LABEL_16;
    case 3:
      return 2;
    case 7:
      return 3;
    default:
      if (result != 15) {
        goto LABEL_16;
      }
      return 4;
  }
}

uint64_t sub_1CD44F554(__n128 a1, uint64_t a2, unsigned int a3)
{
  v5[194] = *(char **)MEMORY[0x1E4F143B8];
  sub_1CD450500(0, a3, (uint64_t *)v5, a1);
  uint64_t v3 = sub_1CD44F41C((uint64_t *)v5);
  sub_1CBE548E8(v5);
  return v3;
}

uint64_t sub_1CD44F5C8(uint64_t a1, unsigned int a2, __n128 a3)
{
  v9[194] = *(char **)MEMORY[0x1E4F143B8];
  int v3 = *(unsigned __int8 *)(a1 + 48);
  if (!(v3 | *(unsigned __int8 *)(a1 + 49))) {
    llvm::report_fatal_error((llvm *)"Expected at least one of depth or stencil.", (const llvm::Twine *)1);
  }
  if (*(unsigned char *)(a1 + 49)) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    int v5 = 1;
  }
  else {
    int v5 = 3;
  }
  if (*(unsigned char *)(a1 + 48)) {
    unsigned int v6 = v5;
  }
  else {
    unsigned int v6 = 2;
  }
  sub_1CD450500(v6, a2, (uint64_t *)v9, a3);
  uint64_t v7 = sub_1CD44F41C((uint64_t *)v9);
  sub_1CBE548E8(v9);
  return v7;
}

uint64_t sub_1CD44F674(__n128 a1)
{
  v3[194] = *(char **)MEMORY[0x1E4F143B8];
  sub_1CD4504B4((uint64_t *)v3, a1);
  uint64_t v1 = sub_1CD44F41C((uint64_t *)v3);
  sub_1CBE548E8(v3);
  return v1;
}

void sub_1CD44F6E4(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  BOOL v7 = *(_DWORD *)(a1 + 148) == 2;
  unint64_t v8 = *(void *)(a1 + 140);
  uint64_t v9 = *(void *)(a1 + 272);
  int v10 = *(_DWORD *)(a1 + 280);
  int v11 = *(_DWORD *)(a1 + 288);
  uint64_t v15 = sub_1CBE53724(v8, v9, v10, v11, a2);
  int v16 = v12;
  char v17 = v13;
  sub_1CBE539B8(v7, v8, v9, v10, v11, &v15, a2, a3, a4, v14);
}

uint64_t sub_1CD44F798(uint64_t a1, unsigned int a2)
{
  v4[194] = *(char **)MEMORY[0x1E4F143B8];
  sub_1CD44F6E4(a1, a2, 61, v4);
  uint64_t v2 = sub_1CD44F41C((uint64_t *)v4);
  sub_1CBE548E8(v4);
  return v2;
}

void sub_1CD44F80C(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>, __n128 a5@<Q0>)
{
}

uint64_t sub_1CD44F834(uint64_t a1, unsigned int a2, __n128 a3)
{
  v5[194] = *(char **)MEMORY[0x1E4F143B8];
  sub_1CBE53DE4(*(void *)(a1 + 140), *(_DWORD *)(a1 + 148), *(_DWORD *)(a1 + 136), *(_DWORD *)(a1 + 248), *(_DWORD *)(a1 + 64), *(_DWORD *)(a1 + 92), a2, 61, (uint64_t *)v5, a3);
  uint64_t v3 = sub_1CD44F41C((uint64_t *)v5);
  sub_1CBE548E8(v5);
  return v3;
}

uint64_t sub_1CD44F8C8(uint64_t a1, unsigned int a2)
{
  v5[194] = *(char **)MEMORY[0x1E4F143B8];
  if (a2 == 5) {
    unsigned int v2 = 4;
  }
  else {
    unsigned int v2 = a2;
  }
  sub_1CBE5E838(*(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60), *(_DWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 68), (uint64_t *)v5, v2);
  uint64_t v3 = sub_1CD44F41C((uint64_t *)v5);
  sub_1CBE548E8(v5);
  return v3;
}

uint64_t sub_1CD44F958(__n128 a1, uint64_t a2, int a3)
{
  v5[194] = *(char **)MEMORY[0x1E4F143B8];
  sub_1CD450520(0, a3, (uint64_t *)v5, a1);
  uint64_t v3 = sub_1CD44F41C((uint64_t *)v5);
  sub_1CBE548E8(v5);
  return v3;
}

uint64_t sub_1CD44F9CC(__n128 a1, uint64_t a2, int a3)
{
  v5[194] = *(char **)MEMORY[0x1E4F143B8];
  sub_1CD450520(1u, a3, (uint64_t *)v5, a1);
  uint64_t v3 = sub_1CD44F41C((uint64_t *)v5);
  sub_1CBE548E8(v5);
  return v3;
}

double sub_1CD44FA40(char **a1, char **a2)
{
  BOOL v4 = *a1;
  uint64_t v5 = *((unsigned int *)a1 + 2);
  if (v5)
  {
    uint64_t v6 = 96 * v5;
    do
    {
      BOOL v7 = *(char **)&v4[v6 - 72];
      if (&v4[v6 - 56] != v7) {
        free(v7);
      }
      v6 -= 96;
    }
    while (v6);
    BOOL v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2)) {
    free(v4);
  }
  *a1 = *a2;
  double result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

uint64_t sub_1CD44FAD0(int a1, int a2)
{
  switch(a1)
  {
    case 0:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 153;
      break;
    case 1:
    case 2:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 154;
      break;
    case 3:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 155;
      break;
    case 4:
    case 5:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 156;
      break;
    default:
LABEL_10:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for specLM", (const llvm::Twine *)1);
  }
  return result;
}

uint64_t sub_1CD44FB48(int a1)
{
  return (a1 - 9);
}

uint64_t sub_1CD44FB50(int a1, int a2)
{
  switch(a1)
  {
    case 0:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 157;
      break;
    case 1:
    case 2:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 158;
      break;
    case 3:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 159;
      break;
    case 4:
    case 5:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 160;
      break;
    default:
LABEL_10:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for specLM", (const llvm::Twine *)1);
  }
  return result;
}

uint64_t sub_1CD44FBC8(int a1)
{
  return (a1 + 3);
}

uint64_t sub_1CD44FBD0(int a1, int a2)
{
  switch(a1)
  {
    case 0:
      if (a2) {
        goto LABEL_8;
      }
      uint64_t result = 161;
      break;
    case 1:
    case 2:
    case 3:
      if (a2) {
        goto LABEL_8;
      }
      uint64_t result = 162;
      break;
    case 4:
    case 5:
      if (a2) {
        goto LABEL_8;
      }
      uint64_t result = 163;
      break;
    default:
LABEL_8:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for specLM", (const llvm::Twine *)1);
  }
  return result;
}

uint64_t sub_1CD44FC3C(int a1)
{
  return (a1 + 15);
}

uint64_t sub_1CD44FC44(int a1, int a2)
{
  switch(a1)
  {
    case 0:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 164;
      break;
    case 1:
    case 2:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 165;
      break;
    case 3:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 166;
      break;
    case 4:
    case 5:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 167;
      break;
    default:
LABEL_10:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for specLM", (const llvm::Twine *)1);
  }
  return result;
}

uint64_t sub_1CD44FCBC(int a1)
{
  return (a1 + 28);
}

uint64_t sub_1CD44FCC4(int a1, int a2)
{
  switch(a1)
  {
    case 0:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 168;
      break;
    case 1:
    case 2:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 169;
      break;
    case 3:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 170;
      break;
    case 4:
    case 5:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 171;
      break;
    default:
LABEL_10:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for specLM", (const llvm::Twine *)1);
  }
  return result;
}

uint64_t sub_1CD44FD3C(int a1)
{
  return (a1 + 40);
}

uint64_t sub_1CD44FD44(int a1, int a2)
{
  switch(a1)
  {
    case 0:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 172;
      break;
    case 1:
    case 2:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 173;
      break;
    case 3:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 174;
      break;
    case 4:
    case 5:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 175;
      break;
    default:
LABEL_10:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for specLM", (const llvm::Twine *)1);
  }
  return result;
}

uint64_t sub_1CD44FDBC(int a1)
{
  return (a1 + 52);
}

uint64_t sub_1CD44FDC4(int a1, int a2)
{
  switch(a1)
  {
    case 0:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 176;
      break;
    case 1:
    case 2:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 177;
      break;
    case 3:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 178;
      break;
    case 4:
    case 5:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 179;
      break;
    default:
LABEL_10:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for specLM", (const llvm::Twine *)1);
  }
  return result;
}

uint64_t sub_1CD44FE3C(int a1)
{
  return (a1 + 64);
}

uint64_t sub_1CD44FE44(int a1, int a2)
{
  switch(a1)
  {
    case 0:
      if (a2) {
        goto LABEL_8;
      }
      uint64_t result = 180;
      break;
    case 1:
    case 2:
    case 3:
      if (a2) {
        goto LABEL_8;
      }
      uint64_t result = 181;
      break;
    case 4:
    case 5:
      if (a2) {
        goto LABEL_8;
      }
      uint64_t result = 182;
      break;
    default:
LABEL_8:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for specTPR", (const llvm::Twine *)1);
  }
  return result;
}

uint64_t sub_1CD44FEB0(int a1)
{
  return (a1 + 76);
}

uint64_t sub_1CD44FEB8(int a1, int a2)
{
  switch(a1)
  {
    case 0:
      if (a2) {
        goto LABEL_8;
      }
      uint64_t result = 183;
      break;
    case 1:
    case 2:
    case 3:
      if (a2) {
        goto LABEL_8;
      }
      uint64_t result = 184;
      break;
    case 4:
    case 5:
      if (a2) {
        goto LABEL_8;
      }
      uint64_t result = 185;
      break;
    default:
LABEL_8:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for specTPR", (const llvm::Twine *)1);
  }
  return result;
}

uint64_t sub_1CD44FF24(int a1)
{
  return (a1 + 89);
}

uint64_t sub_1CD44FF2C(int a1, int a2)
{
  switch(a1)
  {
    case 0:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 186;
      break;
    case 1:
    case 2:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 187;
      break;
    case 3:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 188;
      break;
    case 4:
    case 5:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 189;
      break;
    default:
LABEL_10:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for specTPR", (const llvm::Twine *)1);
  }
  return result;
}

uint64_t sub_1CD44FFA4(int a1)
{
  return (a1 + 102);
}

uint64_t sub_1CD44FFAC(int a1, int a2)
{
  switch(a1)
  {
    case 0:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 190;
      break;
    case 1:
    case 2:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 191;
      break;
    case 3:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 192;
      break;
    case 4:
    case 5:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 193;
      break;
    default:
LABEL_10:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for specTPR", (const llvm::Twine *)1);
  }
  return result;
}

uint64_t sub_1CD450024(int a1)
{
  return (a1 + 114);
}

uint64_t sub_1CD45002C(int a1, int a2)
{
  switch(a1)
  {
    case 0:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 194;
      break;
    case 1:
    case 2:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 195;
      break;
    case 3:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 196;
      break;
    case 4:
    case 5:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 197;
      break;
    default:
LABEL_10:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for specTPR", (const llvm::Twine *)1);
  }
  return result;
}

uint64_t sub_1CD4500A4(int a1)
{
  return (a1 + 126);
}

uint64_t sub_1CD4500AC(int a1, int a2)
{
  switch(a1)
  {
    case 0:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 198;
      break;
    case 1:
    case 2:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 199;
      break;
    case 3:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 200;
      break;
    case 4:
    case 5:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 201;
      break;
    default:
LABEL_10:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for ldshdr", (const llvm::Twine *)1);
  }
  return result;
}

uint64_t sub_1CD450124(uint64_t result, uint64_t a2, unint64_t a3)
{
  switch((int)result)
  {
    case 199:
      *(unsigned char *)(a2 + 2) |= (_BYTE)a3 << 7;
      uint64x2_t v11 = (uint64x2_t)vdupq_n_s64(a3 << 7);
      int32x4_t v12 = (int32x4_t)vshlq_u64(v11, (uint64x2_t)xmmword_1CF7F0220);
      int16x8_t v13 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v11, (uint64x2_t)xmmword_1CF7F0230), v12);
      v12.i32[0] = *(_DWORD *)(a2 + 3);
      *(int8x8_t *)v13.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v12.i8), (int8x8_t)vmovn_s32((int32x4_t)v13));
      *(_DWORD *)(a2 + 3) = vmovn_s16(v13).u32[0];
      *(unsigned char *)(a2 + 7) |= a3 >> 33;
      uint64_t v6 = (a3 >> 41) & 0x7F;
      goto LABEL_6;
    case 200:
      *(unsigned char *)(a2 + 2) |= (2 * a3) & 0x80;
      uint64x2_t v8 = (uint64x2_t)vdupq_n_s64(2 * a3);
      int32x4_t v9 = (int32x4_t)vshlq_u64(v8, (uint64x2_t)xmmword_1CF7F0220);
      int16x8_t v10 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v8, (uint64x2_t)xmmword_1CF7F0230), v9);
      v9.i32[0] = *(_DWORD *)(a2 + 3);
      *(int8x8_t *)v10.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v9.i8), (int8x8_t)vmovn_s32((int32x4_t)v10));
      *(_DWORD *)(a2 + 3) = vmovn_s16(v10).u32[0];
      *(unsigned char *)(a2 + 7) |= a3 >> 39;
      uint64_t v6 = (a3 >> 47) & 1;
LABEL_6:
      uint64_t v7 = 8;
      break;
    case 201:
      *(unsigned char *)a2 |= a3 & 0xC0;
      *(unsigned char *)(a2 + 1) |= BYTE1(a3);
      *(unsigned char *)(a2 + 6) |= BYTE2(a3);
      *(unsigned char *)(a2 + 7) |= BYTE3(a3);
      *(unsigned char *)(a2 + 8) |= BYTE4(a3);
      uint64_t v6 = a3 >> 40;
      uint64_t v7 = 9;
      break;
    default:
      *(unsigned char *)(a2 + 2) |= (_BYTE)a3 << 6;
      uint64x2_t v3 = (uint64x2_t)vdupq_n_s64(a3 << 6);
      int32x4_t v4 = (int32x4_t)vshlq_u64(v3, (uint64x2_t)xmmword_1CF7F0220);
      int16x8_t v5 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v3, (uint64x2_t)xmmword_1CF7F0230), v4);
      v4.i32[0] = *(_DWORD *)(a2 + 3);
      *(int8x8_t *)v5.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v4.i8), (int8x8_t)vmovn_s32((int32x4_t)v5));
      *(_DWORD *)(a2 + 3) = vmovn_s16(v5).u32[0];
      *(unsigned char *)(a2 + 7) |= a3 >> 34;
      uint64_t v6 = (a3 >> 42) & 0x3F;
      uint64_t v7 = 8;
      break;
  }
  *(unsigned char *)(a2 + v7) |= v6;
  return result;
}

uint64_t sub_1CD4502D0(int a1)
{
  return (a1 + 138);
}

uint64_t sub_1CD4502D8(int a1, int a2)
{
  switch(a1)
  {
    case 0:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 202;
      break;
    case 1:
    case 2:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 203;
      break;
    case 3:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 204;
      break;
    case 4:
    case 5:
      if (a2) {
        goto LABEL_10;
      }
      uint64_t result = 205;
      break;
    default:
LABEL_10:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for ldshdr", (const llvm::Twine *)1);
  }
  return result;
}

uint64_t sub_1CD450350(int a1)
{
  return (a1 + 150);
}

uint64_t sub_1CD450358(int a1, int a2)
{
  switch(a1)
  {
    case 0:
      if (a2) {
        goto LABEL_8;
      }
      uint64_t result = 206;
      break;
    case 1:
    case 2:
    case 3:
      if (a2) {
        goto LABEL_8;
      }
      uint64_t result = 207;
      break;
    case 4:
    case 5:
      if (a2) {
        goto LABEL_8;
      }
      uint64_t result = 208;
      break;
    default:
LABEL_8:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for setProfileCtl", (const llvm::Twine *)1);
  }
  return result;
}

uint64_t sub_1CD4503C4(int a1)
{
  return (a1 + 162);
}

uint64_t sub_1CD4503CC(int a1, int a2)
{
  switch(a1)
  {
    case 0:
      if (a2) {
        goto LABEL_8;
      }
      uint64_t result = 209;
      break;
    case 1:
    case 2:
    case 3:
      if (a2) {
        goto LABEL_8;
      }
      uint64_t result = 210;
      break;
    case 4:
    case 5:
      if (a2) {
        goto LABEL_8;
      }
      uint64_t result = 211;
      break;
    default:
LABEL_8:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for setProfileCtl", (const llvm::Twine *)1);
  }
  return result;
}

uint64_t sub_1CD450438(int a1)
{
  return (a1 + 175);
}

uint64_t sub_1CD450440(int a1, int a2)
{
  switch(a1)
  {
    case 0:
      if (a2) {
        goto LABEL_8;
      }
      uint64_t result = 212;
      break;
    case 1:
    case 2:
    case 3:
      if (a2) {
        goto LABEL_8;
      }
      uint64_t result = 213;
      break;
    case 4:
    case 5:
      if (a2) {
        goto LABEL_8;
      }
      uint64_t result = 214;
      break;
    default:
LABEL_8:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for setProfileCtl", (const llvm::Twine *)1);
  }
  return result;
}

uint64_t sub_1CD4504AC(int a1)
{
  return (a1 + 188);
}

uint64_t *sub_1CD4504B4@<X0>(uint64_t *a1@<X8>, __n128 a2@<Q0>)
{
  *a1 = (uint64_t)(a1 + 2);
  a2.n128_u64[0] = 0x1000000000;
  a1[1] = 0x1000000000;
  v3[0] = (unsigned __int8 *)&unk_1CF96C0B0;
  v3[1] = (unsigned __int8 *)&unk_1CF96C0B6;
  return sub_1CBE5B1C4(v3, a1, a2);
}

double sub_1CD450500@<D0>(unsigned int a1@<W0>, unsigned int a2@<W1>, uint64_t *a3@<X8>, __n128 a4@<Q0>)
{
  if (a2 > 3) {
    return sub_1CBE5B568(a3, a1, a4);
  }
  else {
    return sub_1CBE5B0B0(a3, a1, a4);
  }
}

double sub_1CD450520@<D0>(unsigned int a1@<W0>, int a2@<W1>, uint64_t *a3@<X8>, __n128 a4@<Q0>)
{
  switch(a2)
  {
    case 2:
      double result = sub_1CBE5D9BC(a3, a1, a4);
      break;
    case 3:
      double result = sub_1CBE5DAD0(a3, a1, a4);
      break;
    case 4:
    case 5:
      double result = sub_1CBE5DBE4(a3, a1, a4);
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unsupported GPU for pack sequence.", (const llvm::Twine *)1);
  }
  return result;
}

uint64_t sub_1CD4505AC(uint64_t a1, int a2)
{
  int v2 = 0;
  uint64_t v3 = 0;
  switch(a2)
  {
    case 0:
      uint64_t v3 = 0x2D9200000200;
      goto LABEL_227;
    case 1:
      uint64_t v3 = 0xEDDB00000600;
      int v2 = 177;
      goto LABEL_218;
    case 2:
      uint64_t v3 = 0xEE2700000600;
      int v2 = 192;
      goto LABEL_218;
    case 3:
      uint64_t v3 = 0x2D5700000200;
      int v2 = 33;
      goto LABEL_218;
    case 4:
      uint64_t v3 = 0xEE2F00000600;
      goto LABEL_155;
    case 5:
      uint64_t v3 = 0x1D6400000000;
      int v2 = 246;
      goto LABEL_218;
    case 6:
      uint64_t v3 = 0x1DE300000100;
      int v2 = 4;
      goto LABEL_218;
    case 7:
      uint64_t v3 = 0x1E6200000100;
      int v2 = 18;
      goto LABEL_218;
    case 8:
      uint64_t v3 = 0x1EE100000100;
      int v2 = 32;
      goto LABEL_218;
    case 9:
      uint64_t v3 = 0x1F6000000100;
      goto LABEL_235;
    case 10:
      uint64_t v3 = 0x1FDF00000100;
      int v2 = 60;
      goto LABEL_218;
    case 11:
      uint64_t v3 = 0x205E00000100;
      int v2 = 74;
      goto LABEL_218;
    case 12:
      uint64_t v3 = 0x20DD00000100;
      int v2 = 88;
      goto LABEL_218;
    case 13:
      uint64_t v3 = 0x215C00000100;
      int v2 = 102;
      goto LABEL_218;
    case 14:
      uint64_t v3 = 0x21DB00000100;
      int v2 = 116;
      goto LABEL_218;
    case 15:
      uint64_t v3 = 0x2D6300000200;
      int v2 = 37;
      goto LABEL_218;
    case 16:
      uint64_t v3 = 0x2D5D00000200;
      int v2 = 35;
      goto LABEL_218;
    case 18:
      uint64_t v3 = 0x700100000400;
      goto LABEL_131;
    case 19:
      uint64_t v3 = 0xEBBF00000600;
      goto LABEL_93;
    case 20:
      uint64_t v3 = 0xF8DA00000800;
      goto LABEL_151;
    case 21:
      uint64_t v3 = 0xF41D00000700;
      goto LABEL_65;
    case 22:
      uint64_t v3 = 0x2D6900000200;
      int v2 = 39;
      goto LABEL_218;
    case 23:
      uint64_t v3 = 0x2D8200000200;
      int v2 = 47;
      goto LABEL_218;
    case 24:
      uint64_t v3 = 0x2D7C00000200;
      int v2 = 45;
      goto LABEL_218;
    case 25:
      uint64_t v3 = 0x2D8600000200;
      goto LABEL_229;
    case 26:
      uint64_t v3 = 0x2D7600000200;
      int v2 = 43;
      goto LABEL_218;
    case 27:
      uint64_t v3 = 0x2D6D00000200;
      goto LABEL_30;
    case 28:
      uint64_t v3 = 0x2D7000000200;
LABEL_30:
      int v2 = 41;
      goto LABEL_218;
    case 29:
      uint64_t v3 = 0xF7C600000800;
      goto LABEL_217;
    case 30:
      uint64_t v3 = 0x2D5100000200;
      int v2 = 22;
      goto LABEL_218;
    case 32:
      uint64_t v3 = 0xEE3B00000600;
      goto LABEL_115;
    case 33:
      uint64_t v3 = 0xF8CD00000800;
      goto LABEL_217;
    case 34:
      int v2 = 0;
      uint64_t v3 = 0x100000000;
      goto LABEL_218;
    case 35:
      uint64_t v3 = 0x6FB700000400;
      goto LABEL_242;
    case 36:
      uint64_t v3 = 0x62D600000300;
      int v2 = 84;
      goto LABEL_218;
    case 37:
      uint64_t v3 = 0x63BE00000300;
      goto LABEL_208;
    case 38:
      uint64_t v3 = 0xF0A700000700;
      int v2 = 31;
      goto LABEL_218;
    case 39:
      uint64_t v3 = 0xF09700000700;
      int v2 = 24;
      goto LABEL_218;
    case 40:
      uint64_t v3 = 0x640A00000300;
      goto LABEL_183;
    case 41:
      uint64_t v3 = 0x645600000300;
      int v2 = 119;
      goto LABEL_218;
    case 42:
      uint64_t v3 = 0x632200000300;
      int v2 = 92;
      goto LABEL_218;
    case 43:
      uint64_t v3 = 0x32A200000200;
      int v2 = 79;
      goto LABEL_218;
    case 44:
      uint64_t v3 = 0x557A00000200;
      int v2 = 249;
      goto LABEL_218;
    case 45:
      uint64_t v3 = 0x561600000300;
      int v2 = 6;
      goto LABEL_218;
    case 47:
      uint64_t v3 = 0x53A600000200;
      goto LABEL_137;
    case 50:
      uint64_t v3 = 0x4B9A00000200;
      int v2 = 121;
      goto LABEL_218;
    case 51:
      uint64_t v3 = 0xF20700000700;
      goto LABEL_181;
    case 52:
      uint64_t v3 = 0xF15700000700;
      int v2 = 38;
      goto LABEL_218;
    case 53:
      uint64_t v3 = 0xCC1000000600;
      goto LABEL_135;
    case 54:
      uint64_t v3 = 0x530A00000200;
      goto LABEL_176;
    case 55:
      uint64_t v3 = 0x5D8E00000300;
      goto LABEL_131;
    case 56:
      uint64_t v3 = 0x628A00000300;
      int v2 = 60;
      goto LABEL_218;
    case 57:
      uint64_t v3 = 0x379E00000200;
      goto LABEL_208;
    case 58:
      uint64_t v3 = 0x51D200000200;
      int v2 = 163;
      goto LABEL_218;
    case 59:
      uint64_t v3 = 0x4CD600000200;
      int v2 = 148;
      goto LABEL_218;
    case 60:
      uint64_t v3 = 0x589200000300;
      int v2 = 19;
      goto LABEL_218;
    case 61:
      uint64_t v3 = 0x526E00000200;
      int v2 = 184;
      goto LABEL_218;
    case 62:
      uint64_t v3 = 0x54DE00000200;
      goto LABEL_201;
    case 63:
      uint64_t v3 = 0x544200000200;
      int v2 = 223;
      goto LABEL_218;
    case 64:
      uint64_t v3 = 0xF93400000800;
      goto LABEL_199;
    case 65:
      uint64_t v3 = 0x2DF000000200;
      int v2 = 55;
      goto LABEL_218;
    case 66:
      uint64_t v3 = 0xED3300000600;
LABEL_65:
      int v2 = 150;
      goto LABEL_218;
    case 67:
      uint64_t v3 = 0xC95B00000600;
      goto LABEL_188;
    case 68:
      uint64_t v3 = 0x812600000400;
      goto LABEL_135;
    case 69:
      uint64_t v3 = 0x8F5700000400;
      goto LABEL_77;
    case 70:
      uint64_t v3 = 0x941200000400;
      int v2 = 171;
      goto LABEL_218;
    case 71:
      uint64_t v3 = 0x85E100000400;
      int v2 = 96;
      goto LABEL_218;
    case 72:
      uint64_t v3 = 0x8A9C00000400;
      int v2 = 121;
      goto LABEL_218;
    case 73:
      uint64_t v3 = 0x962A00000400;
      int v2 = 196;
      goto LABEL_218;
    case 74:
      uint64_t v3 = 0x984200000400;
      int v2 = 216;
      goto LABEL_218;
    case 75:
      uint64_t v3 = 0x6FDC00000400;
      goto LABEL_244;
    case 76:
      uint64_t v3 = 0x18200000000;
      int v2 = 2;
      goto LABEL_218;
    case 77:
      uint64_t v3 = 0xF95800000800;
LABEL_77:
      int v2 = 146;
      goto LABEL_218;
    case 78:
      uint64_t v3 = 0x2FF00000000;
      int v2 = 21;
      goto LABEL_218;
    case 79:
      uint64_t v3 = 0x3F500000000;
      int v2 = 40;
      goto LABEL_218;
    case 80:
      uint64_t v3 = 0x2E4600000200;
      int v2 = 67;
      goto LABEL_218;
    case 81:
      uint64_t v3 = 0xBEC00000000;
      int v2 = 112;
      goto LABEL_218;
    case 82:
      uint64_t v3 = 0xFF300000000;
      int v2 = 135;
      goto LABEL_218;
    case 83:
      uint64_t v3 = 0x126500000000;
      int v2 = 158;
      goto LABEL_218;
    case 84:
      uint64_t v3 = 0x645C00000300;
      int v2 = 128;
      goto LABEL_218;
    case 85:
      uint64_t v3 = 0xECF300000600;
      goto LABEL_191;
    case 86:
      uint64_t v3 = 0x166C00000000;
      int v2 = 179;
      goto LABEL_218;
    case 87:
      uint64_t v3 = 0x1A7300000000;
      goto LABEL_155;
    case 88:
      uint64_t v3 = 0x1CE500000000;
      int v2 = 225;
      goto LABEL_218;
    case 89:
      int v2 = 0;
      uint64_t v3 = 0x500000000;
      goto LABEL_218;
    case 90:
      uint64_t v3 = 0xED7600000600;
      int v2 = 164;
      goto LABEL_218;
    case 91:
      uint64_t v3 = 0xF7C200000800;
      goto LABEL_217;
    case 92:
      uint64_t v3 = 0xF7BE00000800;
LABEL_93:
      int v2 = 106;
      goto LABEL_218;
    case 93:
      uint64_t v3 = 0xA91A00000400;
      goto LABEL_201;
    case 94:
      uint64_t v3 = 0x57200000000;
      int v2 = 57;
      goto LABEL_218;
    case 95:
      uint64_t v3 = 0xB74B00000500;
      int v2 = 64;
      goto LABEL_218;
    case 96:
      uint64_t v3 = 0xBC0600000500;
      int v2 = 89;
      goto LABEL_218;
    case 97:
      uint64_t v3 = 0xADD500000500;
      int v2 = 14;
      goto LABEL_218;
    case 98:
      uint64_t v3 = 0xB29000000500;
      int v2 = 39;
      goto LABEL_218;
    case 99:
      uint64_t v3 = 0xBE1E00000500;
      int v2 = 114;
      goto LABEL_218;
    case 100:
      uint64_t v3 = 0xC03600000500;
      goto LABEL_151;
    case 101:
      uint64_t v3 = 0x6EF00000000;
      int v2 = 76;
      goto LABEL_218;
    case 102:
      uint64_t v3 = 0x7E500000000;
      int v2 = 95;
      goto LABEL_218;
    case 103:
      uint64_t v3 = 0xCC1600000600;
      int v2 = 74;
      goto LABEL_218;
    case 104:
      uint64_t v3 = 0xCC1C00000600;
      int v2 = 76;
      goto LABEL_218;
    case 105:
      uint64_t v3 = 0x235600000100;
      goto LABEL_191;
    case 106:
      uint64_t v3 = 0x21E200000100;
      goto LABEL_193;
    case 107:
      uint64_t v3 = 0x2B3600000100;
      int v2 = 224;
      goto LABEL_218;
    case 108:
      uint64_t v3 = 0xF8DE00000800;
      goto LABEL_199;
    case 109:
      uint64_t v3 = 0x269600000100;
      int v2 = 172;
      goto LABEL_218;
    case 110:
      uint64_t v3 = 0x28E600000100;
      int v2 = 200;
      goto LABEL_218;
    case 111:
      uint64_t v3 = 0x66D400000300;
      int v2 = 142;
      goto LABEL_218;
    case 112:
      uint64_t v3 = 0x659800000300;
      goto LABEL_193;
    case 113:
      uint64_t v3 = 0xEE3300000600;
LABEL_115:
      int v2 = 204;
      goto LABEL_218;
    case 114:
      int v2 = 0;
      uint64_t v3 = 0x200000000;
      goto LABEL_218;
    case 115:
      goto LABEL_218;
    case 116:
      uint64_t v3 = 0xC97500000600;
      int v2 = 30;
      goto LABEL_218;
    case 117:
      uint64_t v3 = 0xEC5700000600;
      goto LABEL_233;
    case 118:
      uint64_t v3 = 0xEC0B00000600;
      int v2 = 124;
      goto LABEL_218;
    case 119:
      uint64_t v3 = 0xCB8900000600;
      goto LABEL_131;
    case 120:
      uint64_t v3 = 0xFAEE00000800;
      int v2 = 188;
      goto LABEL_218;
    case 121:
      uint64_t v3 = 0x66F800000300;
      goto LABEL_171;
    case 122:
      uint64_t v3 = 0xEE2C00000600;
      goto LABEL_155;
    case 123:
      uint64_t v3 = 0xEE2B00000600;
      goto LABEL_155;
    case 124:
      uint64_t v3 = 0xF44100000700;
      int v2 = 162;
      goto LABEL_218;
    case 125:
      uint64_t v3 = 0xF46500000700;
      int v2 = 170;
      goto LABEL_218;
    case 126:
      uint64_t v3 = 0xF48900000700;
      int v2 = 178;
      goto LABEL_218;
    case 127:
      uint64_t v3 = 0xF66300000800;
      int v2 = 34;
      goto LABEL_218;
    case 128:
      uint64_t v3 = 0xF68D00000800;
      int v2 = 44;
      goto LABEL_218;
    case 129:
      uint64_t v3 = 0xF68700000800;
LABEL_131:
      int v2 = 36;
      goto LABEL_218;
    case 130:
      uint64_t v3 = 0xF6B100000800;
      goto LABEL_235;
    case 131:
      uint64_t v3 = 0xF6D500000800;
      goto LABEL_181;
    case 132:
      uint64_t v3 = 0xF6F900000800;
LABEL_135:
      int v2 = 62;
      goto LABEL_218;
    case 133:
      uint64_t v3 = 0xF51900000700;
LABEL_137:
      int v2 = 210;
      goto LABEL_218;
    case 134:
      uint64_t v3 = 0xF53D00000700;
      int v2 = 218;
      goto LABEL_218;
    case 135:
      uint64_t v3 = 0xF58500000700;
      int v2 = 234;
      goto LABEL_218;
    case 136:
      uint64_t v3 = 0xF56100000700;
      int v2 = 226;
      goto LABEL_218;
    case 137:
      uint64_t v3 = 0xF5A900000700;
      int v2 = 242;
      goto LABEL_218;
    case 138:
      uint64_t v3 = 0xF27700000700;
      goto LABEL_159;
    case 139:
      uint64_t v3 = 0xEF3900000600;
      int v2 = 222;
      goto LABEL_218;
    case 140:
      uint64_t v3 = 0xEEBA00000600;
      goto LABEL_237;
    case 141:
      uint64_t v3 = 0xF23F00000700;
      goto LABEL_157;
    case 142:
      uint64_t v3 = 0xF2E700000700;
      goto LABEL_208;
    case 143:
      uint64_t v3 = 0xF2AF00000700;
      goto LABEL_163;
    case 144:
      uint64_t v3 = 0x702600000400;
      int v2 = 45;
      goto LABEL_218;
    case 145:
      uint64_t v3 = 0xF7C300000800;
      goto LABEL_217;
    case 146:
      uint64_t v3 = 0x21F200000100;
LABEL_151:
      int v2 = 134;
      goto LABEL_218;
    case 147:
      uint64_t v3 = 0xF4AD00000700;
      int v2 = 186;
      goto LABEL_218;
    case 148:
      uint64_t v3 = 0xF4D100000700;
      int v2 = 194;
      goto LABEL_218;
    case 149:
      uint64_t v3 = 0xF4F500000700;
LABEL_155:
      int v2 = 202;
      goto LABEL_218;
    case 150:
      uint64_t v3 = 0xF6FF00000800;
LABEL_157:
      int v2 = 70;
      goto LABEL_218;
    case 151:
      uint64_t v3 = 0xF72900000800;
LABEL_159:
      int v2 = 80;
      goto LABEL_218;
    case 152:
      uint64_t v3 = 0xF72300000800;
      int v2 = 72;
      goto LABEL_218;
    case 153:
      uint64_t v3 = 0xF74D00000800;
      int v2 = 82;
      goto LABEL_218;
    case 154:
      uint64_t v3 = 0xF77100000800;
LABEL_163:
      int v2 = 90;
      goto LABEL_218;
    case 155:
      uint64_t v3 = 0xF79500000800;
      int v2 = 98;
      goto LABEL_218;
    case 156:
      uint64_t v3 = 0xF5CD00000700;
      goto LABEL_203;
    case 157:
      uint64_t v3 = 0xF5F100000800;
      int v2 = 2;
      goto LABEL_218;
    case 158:
      uint64_t v3 = 0xF63900000800;
      int v2 = 18;
      goto LABEL_218;
    case 159:
      uint64_t v3 = 0xF61500000800;
      int v2 = 10;
      goto LABEL_218;
    case 160:
      uint64_t v3 = 0xF65D00000800;
      int v2 = 26;
      goto LABEL_218;
    case 161:
      uint64_t v3 = 0xC3EA00000500;
LABEL_171:
      int v2 = 154;
      goto LABEL_218;
    case 162:
      uint64_t v3 = 0xC70800000500;
      int v2 = 214;
      goto LABEL_218;
    case 163:
      uint64_t v3 = 0xC81200000500;
      int v2 = 231;
      goto LABEL_218;
    case 164:
      uint64_t v3 = 0xC4F400000500;
      goto LABEL_231;
    case 165:
      uint64_t v3 = 0xC5FE00000500;
LABEL_176:
      int v2 = 197;
      goto LABEL_218;
    case 166:
      uint64_t v3 = 0xC88600000500;
      int v2 = 248;
      goto LABEL_218;
    case 167:
      uint64_t v3 = 0xC8FA00000600;
      int v2 = 4;
      goto LABEL_218;
    case 168:
      uint64_t v3 = 0xF8E100000800;
      goto LABEL_199;
    case 170:
      uint64_t v3 = 0x704E00000400;
LABEL_181:
      int v2 = 54;
      goto LABEL_218;
    case 171:
      uint64_t v3 = 0xF31F00000700;
LABEL_183:
      int v2 = 110;
      goto LABEL_218;
    case 172:
      uint64_t v3 = 0xF35700000700;
      int v2 = 120;
      goto LABEL_218;
    case 173:
      uint64_t v3 = 0xF03700000600;
      goto LABEL_203;
    case 174:
      uint64_t v3 = 0xEFB800000600;
      goto LABEL_201;
    case 175:
      uint64_t v3 = 0xF08700000700;
LABEL_188:
      int v2 = 16;
      goto LABEL_218;
    case 176:
      uint64_t v3 = 0xF05F00000700;
      goto LABEL_242;
    case 177:
      uint64_t v3 = 0xF3C700000700;
LABEL_191:
      int v2 = 140;
      goto LABEL_218;
    case 178:
      uint64_t v3 = 0xF38F00000700;
LABEL_193:
      int v2 = 130;
      goto LABEL_218;
    case 179:
      uint64_t v3 = 0x688500000300;
      goto LABEL_247;
    case 180:
      uint64_t v3 = 0x6B9F00000300;
      int v2 = 198;
      goto LABEL_218;
    case 181:
      uint64_t v3 = 0xEA1800000600;
      int v2 = 78;
      goto LABEL_218;
    case 182:
      uint64_t v3 = 0xF8DF00000800;
      goto LABEL_199;
    case 183:
      uint64_t v3 = 0xF8E000000800;
LABEL_199:
      int v2 = 138;
      goto LABEL_218;
    case 184:
      uint64_t v3 = 0x6DAB00000300;
LABEL_201:
      int v2 = 236;
      goto LABEL_218;
    case 185:
      uint64_t v3 = 0x6E2A00000300;
LABEL_203:
      int v2 = 250;
      goto LABEL_218;
    case 186:
      uint64_t v3 = 0x6A1200000300;
      int v2 = 179;
      goto LABEL_218;
    case 187:
      uint64_t v3 = 0x6D2C00000300;
      int v2 = 217;
      goto LABEL_218;
    case 188:
      uint64_t v3 = 0xEA2E00000600;
      int v2 = 103;
      goto LABEL_218;
    case 189:
      uint64_t v3 = 0xEA2300000600;
LABEL_208:
      int v2 = 100;
      goto LABEL_218;
    case 190:
      uint64_t v3 = 0x24BA00000100;
      int v2 = 156;
      goto LABEL_218;
    case 191:
      uint64_t v3 = 0x2C2200000100;
      int v2 = 239;
      goto LABEL_218;
    case 192:
      uint64_t v3 = 0x287200000100;
      int v2 = 186;
      goto LABEL_218;
    case 193:
      uint64_t v3 = 0x295A00000100;
      int v2 = 212;
      goto LABEL_218;
    case 194:
      uint64_t v3 = 0xCB9900000600;
      int v2 = 58;
      goto LABEL_218;
    case 195:
      uint64_t v3 = 0xFB1600000800;
      int v2 = 200;
      goto LABEL_218;
    case 196:
      uint64_t v3 = 0xF7C400000800;
      goto LABEL_217;
    case 197:
      uint64_t v3 = 0xF7C500000800;
LABEL_217:
      int v2 = 115;
      goto LABEL_218;
    case 198:
      uint64_t v3 = 0x2D9A00000200;
LABEL_227:
      int v2 = 52;
      goto LABEL_218;
    case 199:
      uint64_t v3 = 0x2D8E00000200;
LABEL_229:
      int v2 = 49;
      goto LABEL_218;
    case 200:
      uint64_t v3 = 0xFA9800000800;
LABEL_231:
      int v2 = 180;
      goto LABEL_218;
    case 201:
      uint64_t v3 = 0xF8D300000800;
LABEL_233:
      int v2 = 132;
      goto LABEL_218;
    case 202:
      uint64_t v3 = 0xFF7600000900;
LABEL_235:
      int v2 = 46;
      goto LABEL_218;
    case 203:
      uint64_t v3 = 0xFBA900000800;
LABEL_237:
      int v2 = 208;
      goto LABEL_218;
    case 204:
      uint64_t v3 = 0xFC3C00000800;
      int v2 = 227;
      goto LABEL_218;
    case 205:
      uint64_t v3 = 0xFD4600000800;
      int v2 = 246;
      goto LABEL_218;
    case 206:
      uint64_t v3 = 0x1008000000900;
      int v2 = 63;
      goto LABEL_218;
    case 207:
      uint64_t v3 = 0xFDD900000900;
LABEL_242:
      int v2 = 8;
      goto LABEL_218;
    case 208:
      uint64_t v3 = 0xFE6C00000900;
LABEL_244:
      int v2 = 27;
      goto LABEL_218;
    case 210:
      uint64_t v3 = 0xF9AE00000800;
      int v2 = 152;
      goto LABEL_218;
    case 211:
      uint64_t v3 = 0xFA0400000800;
LABEL_247:
      int v2 = 160;
      goto LABEL_218;
    case 212:
      uint64_t v3 = 0xFA2800000800;
      int v2 = 168;
      goto LABEL_218;
    case 213:
      uint64_t v3 = 0xFA4C00000800;
      int v2 = 174;
      goto LABEL_218;
    case 216:
      uint64_t v3 = 0x2C9600000100;
      int v2 = 252;
      goto LABEL_218;
    case 217:
      uint64_t v3 = 0x2D0A00000200;
      int v2 = 9;
LABEL_218:
      int16x8_t v10 = &unk_1F25FE440;
      int v11 = v3 | v2;
      uint64_t v12 = a1;
      uint64_t v7 = &v9;
      uint64_t v8 = 0x100000000;
      sub_1CBF20A68(SHIDWORD(v3), (uint64_t)&unk_1CF96C3F0, (uint64_t)&v7, (uint64_t)&v10);
      int v4 = v8;
      if (v8 == 1) {
        uint64_t v5 = LODWORD(qword_1CF9AC600[2 * *(unsigned int *)v7 + 1]) | 0x100000000;
      }
      else {
        uint64_t v5 = 0x100000000;
      }
      if (v7 != &v9) {
        free(v7);
      }
      if (v4 != 1) {
        return 0;
      }
      return v5;
    default:
      return 0;
  }
}

uint64_t sub_1CD45128C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)a1 + 40 * *(unsigned int *)(a1 + 8) == a2)
  {
    sub_1CD4513C8(a1, a3);
    return *(void *)a1 + 40 * *(unsigned int *)(a1 + 8) - 40;
  }
  else
  {
    uint64_t v6 = a2 - *(void *)a1;
    unint64_t v7 = sub_1CD451448(a1, a3, 1);
    unint64_t v4 = *(void *)a1 + v6;
    uint64_t v8 = *(void *)a1 + 40 * *(unsigned int *)(a1 + 8);
    *(_OWORD *)uint64_t v8 = *(_OWORD *)(v8 - 40);
    *(_DWORD *)(v8 + 32) = *(_DWORD *)(v8 - 8);
    uint64_t v9 = *(void *)(v8 - 16);
    *(void *)(v8 + 16) = *(void *)(v8 - 24);
    *(void *)(v8 + 24) = v9;
    *(_DWORD *)(v8 - 8) = 0;
    uint64_t v10 = *(void *)a1 + 40 * *(unsigned int *)(a1 + 8);
    sub_1CBE9E0B4(v4, v10 - 40, v10);
    unsigned int v11 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v11;
    unint64_t v12 = *(void *)a1 + 40 * v11;
    BOOL v14 = v7 >= v4 && v7 < v12;
    unint64_t v15 = v7 + 40 * v14;
    uint64_t v16 = *(void *)(v15 + 16);
    *(_OWORD *)unint64_t v4 = *(_OWORD *)v15;
    *(void *)(v4 + 16) = v16;
    char v17 = (const llvm::APInt *)(v4 + 24);
    uint64_t v18 = (const llvm::APInt *)(v15 + 24);
    if (*(_DWORD *)(v4 + 32) > 0x40u
      || (unint64_t v19 = v7 + 40 * v14, v21 = *(_DWORD *)(v19 + 32), v20 = (_DWORD *)(v19 + 32), v21 > 0x40))
    {
      llvm::APInt::assignSlowCase(v17, v18);
    }
    else
    {
      *(void *)char v17 = *(void *)v18;
      *(_DWORD *)(v4 + 32) = *v20;
    }
  }
  return v4;
}

llvm::APInt *sub_1CD4513C8(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = sub_1CD451448(a1, a2, 1);
  uint64_t v4 = *(void *)a1 + 40 * *(unsigned int *)(a1 + 8);
  long long v5 = *(_OWORD *)v3;
  *(void *)(v4 + 16) = *(void *)(v3 + 16);
  *(_OWORD *)uint64_t v4 = v5;
  double result = (llvm::APInt *)(v4 + 24);
  unint64_t v7 = (const llvm::APInt *)(v3 + 24);
  LODWORD(v3) = *(_DWORD *)(v3 + 32);
  *(_DWORD *)(v4 + 32) = v3;
  if (v3 > 0x40) {
    llvm::APInt::initSlowCase(result, v7);
  }
  *(void *)double result = *(void *)v7;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

unint64_t sub_1CD451448(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    unint64_t v5 = *(void *)a1 + 40 * v3;
    if (*(void *)a1 > a2 || v5 <= a2) {
      sub_1CD4514B4();
    }
    sub_1CD4514B4();
  }
  return a2;
}

void sub_1CD4514B4()
{
}

uint64_t sub_1CD451524(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    uint64_t v3 = *(long long **)result;
    uint64_t v4 = *(void *)result + 40 * v2;
    do
    {
      long long v5 = *v3;
      *(void *)(a2 + 16) = *((void *)v3 + 2);
      *(_OWORD *)a2 = v5;
      *(_DWORD *)(a2 + 32) = *((_DWORD *)v3 + 8);
      *(void *)(a2 + 24) = *((void *)v3 + 3);
      *((_DWORD *)v3 + 8) = 0;
      uint64_t v3 = (long long *)((char *)v3 + 40);
      a2 += 40;
    }
    while (v3 != (long long *)v4);
    uint64_t v6 = *(unsigned int *)(result + 8);
    if (v6)
    {
      unint64_t v7 = *(long long **)result;
      uint64_t v8 = 40 * v6;
      do
      {
        if (*(_DWORD *)((char *)v7 + v8 - 8) >= 0x41u)
        {
          double result = *(void *)((char *)v7 + v8 - 16);
          if (result) {
            double result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
          }
        }
        v8 -= 40;
      }
      while (v8);
    }
  }
  return result;
}

void *sub_1CD4515D0(void **a1)
{
  unsigned int v2 = *a1;
  *a1 = 0;
  sub_1CBF29304(&v2);
  double result = v2;
  if (v2) {
    return (void *)(*(uint64_t (**)(void *))(*v2 + 8))(v2);
  }
  return result;
}

char *sub_1CD451630@<X0>(char **a1@<X0>, char **a2@<X1>, char **a3@<X8>)
{
  double result = *a1;
  unint64_t v7 = *a2;
  if (result)
  {
    if (!v7)
    {
      *a3 = result;
LABEL_15:
      *a1 = 0;
      return result;
    }
    if ((*(unsigned int (**)(char *, void *))(*(void *)result + 48))(result, &llvm::ErrorList::ID))
    {
      uint64_t v8 = *a1;
      double result = *a2;
      if (*a2)
      {
        double result = (char *)(*(uint64_t (**)(char *, void *))(*(void *)result + 48))(result, &llvm::ErrorList::ID);
        uint64_t v9 = *a2;
        if (result)
        {
          *a2 = 0;
          uint64_t v10 = (uint64_t *)*((void *)v9 + 1);
          unsigned int v11 = (uint64_t *)*((void *)v9 + 2);
          if (v10 == v11) {
            goto LABEL_13;
          }
          double result = (char *)*((void *)v8 + 2);
          do
          {
            if ((unint64_t)result >= *((void *)v8 + 3))
            {
              double result = sub_1CBF297F8((char **)v8 + 1, v10);
            }
            else
            {
              uint64_t v12 = *v10;
              *uint64_t v10 = 0;
              *(void *)double result = v12;
              result += 8;
            }
            *((void *)v8 + 2) = result;
            ++v10;
          }
          while (v10 != v11);
          if (v9) {
LABEL_13:
          }
            double result = (char *)(*(uint64_t (**)(char *))(*(void *)v9 + 8))(v9);
LABEL_28:
          *a3 = *a1;
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v9 = 0;
      }
      char v17 = v9;
      *a2 = 0;
      unint64_t v15 = (char **)*((void *)v8 + 2);
      if ((unint64_t)v15 >= *((void *)v8 + 3))
      {
        uint64_t v16 = sub_1CBF297F8((char **)v8 + 1, &v17);
        double result = v17;
        *((void *)v8 + 2) = v16;
        char v17 = 0;
        if (result) {
          double result = (char *)(*(uint64_t (**)(char *))(*(void *)result + 8))(result);
        }
      }
      else
      {
        *unint64_t v15 = v9;
        *((void *)v8 + 2) = v15 + 1;
      }
      goto LABEL_28;
    }
    if (!*a2 || !(*(unsigned int (**)(char *, void *))(*(void *)*a2 + 48))(*a2, &llvm::ErrorList::ID)) {
      operator new();
    }
    int16x8_t v13 = (uint64_t **)(*a2 + 8);
    BOOL v14 = *v13;
    char v17 = *a1;
    *a1 = 0;
    sub_1CBF295A0(v13, (uint64_t)v14, (uint64_t *)&v17);
    double result = v17;
    char v17 = 0;
    if (result) {
      double result = (char *)(*(uint64_t (**)(char *))(*(void *)result + 8))(result);
    }
    unint64_t v7 = *a2;
  }
  *a3 = v7;
  *a2 = 0;
  return result;
}

uint64_t sub_1CD45191C(uint64_t a1, void *a2, uint64_t *a3)
{
  *(void *)a1 = &unk_1F2644940;
  *(void *)(a1 + 8) = 0;
  long long v5 = (char **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v6 = sub_1CBF297F8((char **)(a1 + 8), a2);
  *(void *)(a1 + 16) = v6;
  if ((unint64_t)v6 >= *(void *)(a1 + 24))
  {
    uint64_t v8 = sub_1CBF297F8(v5, a3);
  }
  else
  {
    uint64_t v7 = *a3;
    *a3 = 0;
    *(void *)uint64_t v6 = v7;
    uint64_t v8 = v6 + 8;
  }
  *(void *)(a1 + 16) = v8;
  return a1;
}

uint64_t LLVMInitializeAGX1TargetInfo()
{
  return llvm::TargetRegistry::RegisterTarget((uint64_t)&unk_1EBD02418, (uint64_t)"agx1", (uint64_t)"AGX1", (uint64_t)"AGX1", (uint64_t)sub_1CD4519E0, 0);
}

BOOL sub_1CD4519E0(int a1)
{
  return a1 == 27;
}

uint64_t LLVMInitializeAGX2TargetInfo()
{
  return llvm::TargetRegistry::RegisterTarget((uint64_t)&unk_1EBD02540, (uint64_t)"agx2", (uint64_t)"AGX2", (uint64_t)"AGX2", (uint64_t)sub_1CD451A20, 0);
}

BOOL sub_1CD451A20(int a1)
{
  return a1 == 28;
}

uint64_t LLVMInitializeAGX3TargetInfo()
{
  return llvm::TargetRegistry::RegisterTarget((uint64_t)&unk_1EA61E8B0, (uint64_t)"agx3", (uint64_t)"AGX3", (uint64_t)"AGX3", (uint64_t)sub_1CD451A60, 0);
}

BOOL sub_1CD451A60(int a1)
{
  return a1 == 29;
}

void sub_1CD451A6C()
{
}

uint64_t sub_1CD451B70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_1CD451CA8(a1, a2, (uint64_t)&v7);
      if (v8) {
        llvm::json::Value::moveFrom(v7 + 24, (unsigned __int16 *)(a2 + 24));
      }
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

uint64_t sub_1CD451C00(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  uint64_t result = (uint64_t)sub_1CBF2C538(v7, (unsigned __int8 *)0xFFFFFFFFFFFFFFFFLL, 0);
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = *(void **)a1;
    uint64_t v5 = 56 * v3;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      uint64_t result = sub_1CBF2C614((uint64_t)v4, (uint64_t)v7);
      v4 += 7;
      v5 -= 56;
    }
    while (v5);
  }
  uint64_t v6 = v7[0];
  v7[0] = 0;
  if (v6)
  {
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    return MEMORY[0x1D25D9CE0](v6, 0x1012C40EC159624);
  }
  return result;
}

uint64_t sub_1CD451CA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = sub_1CD451D3C((uint64_t *)a1, a2, &v10);
  uint64_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t v7 = sub_1CD45205C(a1, a2, a2, v10);
    uint64_t result = sub_1CBF2C614(v7, a2);
    *(_WORD *)(v7 + 24) = 0;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 56 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1CD451D3C(uint64_t *a1, uint64_t a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    uint64_t v17 = 0;
    *a3 = 0;
    return v17;
  }
  uint64_t v6 = *a1;
  sub_1CBF2C538(v53, (unsigned __int8 *)0xFFFFFFFFFFFFFFFFLL, 0);
  sub_1CBF2C538(&v50, (unsigned __int8 *)0xFFFFFFFFFFFFFFFELL, 0);
  unsigned int HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(*(void **)(a2 + 8), *(void *)(a2 + 16));
  char v8 = 0;
  int v9 = v4 - 1;
  uint64_t v10 = *(const void **)(a2 + 8);
  int v11 = 1;
  uint64_t v12 = v53[1];
  while (1)
  {
    unsigned int v13 = HashValue & v9;
    BOOL v14 = (void *)(v6 + 56 * (HashValue & v9));
    uint64_t v16 = v14[1];
    uint64_t v15 = v14[2];
    if (v16 == -1)
    {
      if (v10 == (const void *)-1) {
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v34 = v14[2];
      int v38 = v11;
      int v41 = HashValue & v9;
      int v44 = v9;
      uint64_t v30 = v6;
      __s1 = v8;
      unsigned int v21 = (void *)(v6 + 56 * v13);
      __s2 = (void *)v12;
      if (v16 == -2)
      {
        uint64_t v16 = -2;
        uint64_t v15 = v14[2];
        if (v10 == (const void *)-2) {
          goto LABEL_28;
        }
      }
      else
      {
        size_t v23 = *(void *)(a2 + 16);
        uint64_t v15 = v14[2];
        if (v23 == v34)
        {
          if (!v23)
          {
            uint64_t v17 = 1;
            BOOL v14 = (void *)(v6 + 56 * v13);
            goto LABEL_9;
          }
          uint64_t v24 = v10;
          uint64_t v25 = v14[1];
          int v26 = memcmp(v10, (const void *)v16, v23);
          uint64_t v16 = v25;
          uint64_t v10 = v24;
          uint64_t v12 = (uint64_t)__s2;
          uint64_t v6 = v30;
          char v8 = __s1;
          BOOL v14 = v21;
          unsigned int v13 = v41;
          int v9 = v44;
          int v11 = v38;
          uint64_t v15 = v34;
          if (!v26)
          {
LABEL_28:
            uint64_t v17 = 1;
            goto LABEL_9;
          }
        }
      }
    }
    if (v12 == -1)
    {
      if (v16 == -1) {
        goto LABEL_7;
      }
      goto LABEL_33;
    }
    __s1a = (void *)v16;
    uint64_t v22 = v10;
    __s2a = (void *)v12;
    if (v12 != -2) {
      break;
    }
    uint64_t v12 = -2;
    if (v16 == -2) {
      goto LABEL_7;
    }
LABEL_33:
    uint64_t v37 = v14;
    int v40 = v11;
    unsigned int v43 = v13;
    uint64_t v33 = v10;
    __s2b = (void *)v12;
    int v46 = v9;
    if (v51 == (void *)-2)
    {
      BOOL v28 = v16 == -2;
      goto LABEL_37;
    }
    if (v51 == (void *)-1)
    {
      BOOL v28 = v16 == -1;
      goto LABEL_37;
    }
    BOOL v29 = v15 == __n;
    if (__n && v15 == __n)
    {
      BOOL v28 = memcmp((const void *)v16, v51, __n) == 0;
LABEL_37:
      BOOL v29 = v28;
    }
    if (v29 && v8 == 0) {
      char v8 = v37;
    }
    unsigned int HashValue = v40 + v43;
    int v11 = v40 + 1;
    uint64_t v10 = v33;
    uint64_t v12 = (uint64_t)__s2b;
    int v9 = v46;
  }
  if (v15 != v54) {
    goto LABEL_33;
  }
  if (v54)
  {
    uint64_t v35 = v15;
    uint64_t v36 = v14;
    unsigned int v42 = v13;
    int v45 = v9;
    int v39 = v11;
    int v27 = memcmp((const void *)v16, (const void *)v12, v54);
    int v11 = v39;
    unsigned int v13 = v42;
    uint64_t v15 = v35;
    BOOL v14 = v36;
    int v9 = v45;
    uint64_t v12 = (uint64_t)__s2a;
    uint64_t v16 = (uint64_t)__s1a;
    uint64_t v10 = v22;
    if (v27) {
      goto LABEL_33;
    }
  }
LABEL_7:
  uint64_t v17 = 0;
  if (v8) {
    BOOL v14 = v8;
  }
LABEL_9:
  *a3 = v14;
  uint64_t v18 = v50;
  uint64_t v50 = 0;
  if (v18)
  {
    if (*(char *)(v18 + 23) < 0) {
      operator delete(*(void **)v18);
    }
    MEMORY[0x1D25D9CE0](v18, 0x1012C40EC159624);
  }
  uint64_t v19 = v53[0];
  v53[0] = 0;
  if (v19)
  {
    if (*(char *)(v19 + 23) < 0) {
      operator delete(*(void **)v19);
    }
    MEMORY[0x1D25D9CE0](v19, 0x1012C40EC159624);
  }
  return v17;
}

uint64_t sub_1CD45205C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1CD4521A0(a1, v7);
  uint64_t v12 = 0;
  sub_1CD451D3C((uint64_t *)a1, a3, &v12);
  a4 = v12;
LABEL_6:
  ++*(_DWORD *)(a1 + 8);
  sub_1CBF2C538(&v12, (unsigned __int8 *)0xFFFFFFFFFFFFFFFFLL, 0);
  int v9 = *(const void **)(a4 + 8);
  if (__s2 == (void *)-1)
  {
    if (v9 == (const void *)-1) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
  if (__s2 == (void *)-2)
  {
    if (v9 == (const void *)-2) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
  if (*(void *)(a4 + 16) != __n || __n && memcmp(v9, __s2, __n)) {
LABEL_19:
  }
    --*(_DWORD *)(a1 + 12);
LABEL_8:
  uint64_t v10 = v12;
  uint64_t v12 = 0;
  if (v10)
  {
    if (*(char *)(v10 + 23) < 0) {
      operator delete(*(void **)v10);
    }
    MEMORY[0x1D25D9CE0](v10, 0x1012C40EC159624);
  }
  return a4;
}

uint64_t sub_1CD4521A0(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  *(void *)a1 = llvm::allocate_buffer(56 * v8, (std::align_val_t)8uLL);
  if (v4)
  {
    sub_1CD452268(a1, v4, v4 + 56 * v3);
    JUMPOUT(0x1D25D9CD0);
  }

  return sub_1CD451C00(a1);
}

void *sub_1CD452268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1CD451C00(a1);
  sub_1CBF2C538(&v15, (unsigned __int8 *)0xFFFFFFFFFFFFFFFFLL, 0);
  uint64_t result = sub_1CBF2C538(&v12, (unsigned __int8 *)0xFFFFFFFFFFFFFFFELL, 0);
  while (a2 != a3)
  {
    int v7 = *(const void **)(a2 + 8);
    if (__s2 == (void *)-2)
    {
      if (v7 == (const void *)-2) {
        goto LABEL_21;
      }
    }
    else if (__s2 == (void *)-1)
    {
      if (v7 == (const void *)-1) {
        goto LABEL_21;
      }
    }
    else if (*(void *)(a2 + 16) == __n && (!__n || !memcmp(*(const void **)(a2 + 8), __s2, __n)))
    {
      goto LABEL_21;
    }
    if (v13 == (void *)-2)
    {
      if (v7 == (const void *)-2) {
        goto LABEL_21;
      }
      goto LABEL_22;
    }
    if (v13 == (void *)-1)
    {
      if (v7 == (const void *)-1) {
        goto LABEL_21;
      }
LABEL_22:
      uint64_t v18 = 0;
      sub_1CD451D3C((uint64_t *)a1, a2, &v18);
      uint64_t v8 = v18;
      uint64_t v9 = *(void *)a2;
      *(void *)a2 = 0;
      sub_1CB833F88((uint64_t *)v8, v9);
      *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + 8);
      llvm::json::Value::moveFrom(v8 + 24, (unsigned __int16 *)(a2 + 24));
      ++*(_DWORD *)(a1 + 8);
      llvm::json::Value::destroy((llvm::json::Value *)(a2 + 24));
      goto LABEL_21;
    }
    if (*(void *)(a2 + 16) != v14 || v14 && memcmp(v7, v13, v14)) {
      goto LABEL_22;
    }
LABEL_21:
    uint64_t result = sub_1CB833F88((uint64_t *)a2, 0);
    a2 += 56;
  }
  uint64_t v10 = v12;
  uint64_t v12 = 0;
  if (v10)
  {
    if (*(char *)(v10 + 23) < 0) {
      operator delete(*(void **)v10);
    }
    uint64_t result = (void *)MEMORY[0x1D25D9CE0](v10, 0x1012C40EC159624);
  }
  uint64_t v11 = v15;
  uint64_t v15 = 0;
  if (v11)
  {
    if (*(char *)(v11 + 23) < 0) {
      operator delete(*(void **)v11);
    }
    return (void *)MEMORY[0x1D25D9CE0](v11, 0x1012C40EC159624);
  }
  return result;
}

unsigned int *sub_1CD452448(unsigned int *result)
{
  if (result[4])
  {
    uint64_t v1 = result;
    sub_1CBF2C538(&v13, (unsigned __int8 *)0xFFFFFFFFFFFFFFFFLL, 0);
    uint64_t result = (unsigned int *)sub_1CBF2C538(&v10, (unsigned __int8 *)0xFFFFFFFFFFFFFFFELL, 0);
    uint64_t v2 = v1[4];
    if (v2)
    {
      uint64_t v3 = 56 * v2;
      uint64_t v4 = (llvm::json::Value *)(*(void *)v1 + 24);
      do
      {
        unint64_t v5 = (const void *)*((void *)v4 - 2);
        if (__s2 == (void *)-1)
        {
          if (v5 == (const void *)-1) {
            goto LABEL_6;
          }
        }
        else
        {
          __s1 = (void *)*((void *)v4 - 2);
          if (__s2 == (void *)-2)
          {
            unint64_t v5 = (const void *)*((void *)v4 - 2);
            if (__s1 == (void *)-2) {
              goto LABEL_6;
            }
          }
          else
          {
            unint64_t v5 = (const void *)*((void *)v4 - 2);
            if (*((void *)v4 - 1) == __n)
            {
              if (!__n) {
                goto LABEL_6;
              }
              int v8 = memcmp(__s1, __s2, __n);
              unint64_t v5 = __s1;
              if (!v8) {
                goto LABEL_6;
              }
            }
          }
        }
        if (v11 != (void *)-2)
        {
          if (v11 == (void *)-1)
          {
            if (v5 == (const void *)-1) {
              goto LABEL_6;
            }
          }
          else if (*((void *)v4 - 1) == v12 && (!v12 || !memcmp(v5, v11, v12)))
          {
            goto LABEL_6;
          }
LABEL_10:
          llvm::json::Value::destroy(v4);
          goto LABEL_6;
        }
        if (v5 != (const void *)-2) {
          goto LABEL_10;
        }
LABEL_6:
        uint64_t result = (unsigned int *)sub_1CB833F88((uint64_t *)v4 - 3, 0);
        uint64_t v4 = (llvm::json::Value *)((char *)v4 + 56);
        v3 -= 56;
      }
      while (v3);
    }
    uint64_t v6 = v10;
    uint64_t v10 = 0;
    if (v6)
    {
      if (*(char *)(v6 + 23) < 0) {
        operator delete(*(void **)v6);
      }
      uint64_t result = (unsigned int *)MEMORY[0x1D25D9CE0](v6, 0x1012C40EC159624);
    }
    uint64_t v7 = v13;
    uint64_t v13 = 0;
    if (v7)
    {
      if (*(char *)(v7 + 23) < 0) {
        operator delete(*(void **)v7);
      }
      return (unsigned int *)MEMORY[0x1D25D9CE0](v7, 0x1012C40EC159624);
    }
  }
  return result;
}

uint64_t sub_1CD4525F4(uint64_t a1, __int16 a2)
{
  sub_1CBF2C864(a1, 2uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 1)
  {
    sub_1CBF2C904((uint64_t *)a1, 2uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(_WORD *)(v4 - 2) = a2;
  uint64_t v5 = v4 - 2;
  *(void *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

uint64_t sub_1CD452658(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16));
}

llvm::json::Value *sub_1CD452690(llvm::json::Value *a1, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *(_WORD *)a1 = 5;
  *((void *)a1 + 1) = a2;
  *((void *)a1 + 2) = a3;
  if (!llvm::json::isUTF8(a2, a3, 0))
  {
    llvm::json::fixUTF8((unint64_t)a2, a3, (uint64_t)__p);
    sub_1CD452764((uint64_t)v9, (unint64_t)__p);
    llvm::json::Value::destroy(a1);
    llvm::json::Value::moveFrom((uint64_t)a1, v9);
    llvm::json::Value::destroy((llvm::json::Value *)v9);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  return a1;
}

uint64_t sub_1CD452764(uint64_t a1, unint64_t a2)
{
  *(_WORD *)a1 = 6;
  char v4 = *(unsigned char *)(a2 + 23);
  BOOL v5 = v4 < 0;
  if (v4 >= 0) {
    uint64_t v6 = (unsigned __int8 *)a2;
  }
  else {
    uint64_t v6 = *(unsigned __int8 **)a2;
  }
  uint64_t v7 = v4 & 0x7F;
  if (v5) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v8 = v7;
  }
  if (!llvm::json::isUTF8(v6, v8, 0))
  {
    char v11 = *(unsigned char *)(a2 + 23);
    BOOL v12 = v11 < 0;
    if (v11 >= 0) {
      unint64_t v13 = a2;
    }
    else {
      unint64_t v13 = *(void *)a2;
    }
    unint64_t v14 = v11 & 0x7F;
    if (v12) {
      unint64_t v15 = *(void *)(a2 + 8);
    }
    else {
      unint64_t v15 = v14;
    }
    llvm::json::fixUTF8(v13, v15, (uint64_t)&v16);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = v16;
    *(void *)(a2 + 16) = v17;
  }
  long long v9 = *(_OWORD *)a2;
  *(void *)(a1 + 24) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = v9;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  return a1;
}

void sub_1CD452824(llvm::raw_ostream *this)
{
  uint64_t v1 = (const char *)*((void *)this + 2);
  if (*((const char **)this + 4) != v1)
  {
    *((void *)this + 4) = v1;
    llvm::raw_ostream::flush_tied_then_write(this, v1);
  }
  operator new[]();
}

uint64_t *sub_1CD4528D4(uint64_t *result, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v5 = (uint64_t)result;
    uint64_t result = (uint64_t *)sub_1CBF2C864((uint64_t)result, 4uLL);
    int v6 = *(_DWORD *)(v5 + 32) - *(_DWORD *)(v5 + 48) + *(_DWORD *)(v5 + 40) - a3;
    if (v6 != -4 || *(unsigned char *)(v5 + 80))
    {
      unsigned int v7 = sub_1CBF2F210(v5, v6 + 4);
      return sub_1CBF2F3A0((uint64_t *)v5, a2, v7);
    }
  }
  return result;
}

uint64_t sub_1CD45296C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v6 = 4 * a3;
  sub_1CBF2F2FC(a1, 4 * a3, 4uLL);
  sub_1CBF2F2FC(a1, v6, 4uLL);
  if (a3)
  {
    uint64_t v7 = a2 - 4;
    uint64_t v8 = a3;
    do
    {
      uint64_t v9 = v8 - 1;
      int v10 = *(_DWORD *)(v7 + 4 * v8);
      sub_1CBF2C864(a1, 4uLL);
      sub_1CBF2F210(a1, *(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40) - v10 + 4);
      uint64_t v8 = v9;
    }
    while (v9);
  }
  *(unsigned char *)(a1 + 70) = 0;

  return sub_1CBF2F210(a1, a3);
}

uint64_t sub_1CD452A34(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16));
}

unsigned char *sub_1CD452A68(unsigned char *result, unsigned char *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    char v4 = result[16];
    if (v4)
    {
      uint64_t result = *(unsigned char **)result;
      *(void *)uint64_t v3 = 0;
      if (result)
      {
        uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 8))(result);
        char v4 = v3[16];
      }
    }
    char v5 = a2[16];
    v3[16] = v4 & 0xFE | v5 & 1;
    if (v5)
    {
      uint64_t v6 = *(void *)a2;
      *(void *)a2 = 0;
      *(void *)uint64_t v3 = v6;
    }
    else
    {
      *(_OWORD *)uint64_t v3 = *(_OWORD *)a2;
    }
  }
  return result;
}

unsigned char *sub_1CD452AF8(unsigned char *result, unsigned char *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    char v4 = result[8];
    if (v4)
    {
      uint64_t result = *(unsigned char **)result;
      *(void *)uint64_t v3 = 0;
      if (result)
      {
        uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 8))(result);
        char v4 = v3[8];
      }
    }
    char v5 = a2[8];
    v3[8] = v4 & 0xFE | v5 & 1;
    if (v5)
    {
      uint64_t v6 = *(void *)a2;
      *(void *)a2 = 0;
      *(void *)uint64_t v3 = v6;
    }
    else
    {
      *uint64_t v3 = *a2;
    }
  }
  return result;
}

llvm::raw_ostream *llvm::AGCStatusRecord::emitStartMarker(llvm::AGCStatusRecord *this, llvm::raw_ostream *a2)
{
  return sub_1CBF35DFC(a2, "Start", 5uLL, (uint64_t)this);
}

llvm::raw_ostream *llvm::AGCStatusRecord::emitEndMarker(llvm::AGCStatusRecord *this, llvm::raw_ostream *a2)
{
  return sub_1CBF35DFC(a2, "End", 3uLL, (uint64_t)this);
}

void sub_1CD452C04(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v14 = 0;
  int v5 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  BOOL v12 = v13;
  int v11 = 0;
  char v4 = &unk_1F2646F30;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 16))(a1, &v4);
  if (*((char *)v12 + 23) < 0)
  {
    sub_1CB8BDF7C(a2, *v12, (unint64_t)v12[1]);
  }
  else
  {
    long long v3 = *(_OWORD *)v12;
    *(void *)(a2 + 16) = v12[2];
    *(_OWORD *)a2 = v3;
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v4);
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
}

uint64_t sub_1CD452CE0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v9 = v4;
  uint64_t v10 = 0;
  uint64_t v11 = a3;
  int v5 = *(void **)(a1 + 8);
  if ((unint64_t)v5 >= *(void *)(a1 + 16))
  {
    uint64_t v6 = sub_1CBF3A948((void **)a1, (uint64_t)&v9);
  }
  else
  {
    v5[1] = 0;
    v5[2] = a3;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v6 = (char *)(v5 + 3);
    void *v5 = v4;
  }
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = -1431655765 * ((unint64_t)&v6[-*(void *)a1] >> 3);
  llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)&v9);
  return v7;
}

uint64_t sub_1CD452D6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(uint64_t (**)(void **, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 88);
  if (!v7) {
    return 0;
  }
  __int16 v15 = 261;
  v14[0] = a2;
  v14[1] = a3;
  llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v14);
  uint64_t v12 = v7(__p, a4, a5, a6, a7);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  return v12;
}

uint64_t sub_1CD452E0C(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v6 = *a1;
    int v7 = v3 - 1;
    unsigned int v8 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v4 = (void *)(*a1 + 16 * v8);
    uint64_t v9 = *v4;
    if (*a2 == *v4)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v9 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v9 == -8192;
        }
        if (v12) {
          uint64_t v10 = v4;
        }
        unsigned int v13 = v8 + v11++;
        unsigned int v8 = v13 & v7;
        uint64_t v4 = (void *)(v6 + 16 * (v13 & v7));
        uint64_t v9 = *v4;
        if (*a2 == *v4) {
          goto LABEL_8;
        }
      }
      uint64_t result = 0;
      if (v10) {
        uint64_t v4 = v10;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t result = 0;
  }
LABEL_8:
  *a3 = v4;
  return result;
}

void sub_1CD452EA8(unint64_t *a1, size_t __sz)
{
  unint64_t v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0) {
      abort();
    }
    int v5 = (char *)a1[1];
    uint64_t v6 = operator new(__sz);
    int v7 = &v5[(void)v6 - v2];
    unsigned int v8 = v7;
    if (v5 != (char *)v2)
    {
      uint64_t v9 = &v5[~v2];
      do
      {
        char v10 = *--v5;
        (v9--)[(void)v6] = v10;
      }
      while (v5 != (char *)v2);
      unsigned int v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
    {
      operator delete((void *)v2);
    }
  }
}

void sub_1CD452F60(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v14 = 0;
  int v5 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  BOOL v12 = v13;
  int v11 = 0;
  uint64_t v4 = &unk_1F2646F30;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_1CD098D14((llvm::raw_ostream *)&v4, *a1, 0, 0, 0);
  if (*((char *)v12 + 23) < 0)
  {
    sub_1CB8BDF7C(a2, *v12, (unint64_t)v12[1]);
  }
  else
  {
    long long v3 = *(_OWORD *)v12;
    *(void *)(a2 + 16) = v12[2];
    *(_OWORD *)a2 = v3;
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v4);
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
}

void sub_1CD45302C(uint64_t a1, unint64_t a2)
{
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v14 = 0;
  int v5 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  BOOL v12 = v13;
  int v11 = 0;
  uint64_t v4 = &unk_1F2646F30;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_1CD098D14((llvm::raw_ostream *)&v4, a2, 0, 0, 0);
  if (*((char *)v12 + 23) < 0)
  {
    sub_1CB8BDF7C(a1, *v12, (unint64_t)v12[1]);
  }
  else
  {
    long long v3 = *(_OWORD *)v12;
    *(void *)(a1 + 16) = v12[2];
    *(_OWORD *)a1 = v3;
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v4);
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
}

uint64_t sub_1CD4530F4()
{
  return 0;
}

uint64_t sub_1CD4530FC()
{
  return 0;
}

const char *sub_1CD453104()
{
  return "";
}

uint64_t sub_1CD453138(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 520))();
}

void sub_1CD453178(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[32] = 0;
}

uint64_t sub_1CD45318C()
{
  return 1;
}

void *sub_1CD4531A0(uint64_t *a1, void *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CD452E0C(a1, a2, &v7);
  int v5 = v7;
  if ((v4 & 1) == 0)
  {
    int v5 = sub_1CD453200((uint64_t)a1, (uint64_t)a2, a2, v7);
    void *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void *sub_1CD453200(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_3:
    sub_1CBF3B524(a1, v7);
    char v9 = 0;
    sub_1CD452E0C((uint64_t *)a1, a3, &v9);
    a4 = v9;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3) {
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

uint64_t sub_1CD4532B4(uint64_t result, void *a2, void *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    unsigned int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *unsigned int v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      int v11 = 0;
      uint64_t result = sub_1CD452E0C((uint64_t *)v5, a2, &v11);
      char v9 = v11;
      uint64_t v10 = a2[1];
      *int v11 = *a2;
      v9[1] = v10;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1CD453364(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16));
}

llvm::raw_ostream *llvm::AGX::AGCStatusPrinter::logRaw(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *(llvm::raw_ostream **)(a1 + 136);
  if (result)
  {
    char v3 = *((unsigned char *)a2 + 23);
    BOOL v4 = v3 < 0;
    size_t v5 = a2[1];
    if (v3 < 0) {
      a2 = (uint64_t *)*a2;
    }
    size_t v6 = v3 & 0x7F;
    if (v4) {
      size_t v7 = v5;
    }
    else {
      size_t v7 = v6;
    }
    return llvm::raw_ostream::write(result, (const char *)a2, v7);
  }
  return result;
}

void llvm::AGX::AGCStatusPrinter::enable(llvm::AGX::AGCStatusPrinter *this)
{
}

llvm::AGX::AGCStatusPrinter *llvm::AGX::AGCStatusPrinter::AGCStatusPrinter(llvm::AGX::AGCStatusPrinter *a1, int a2, uint64_t a3, int a4, int a5, char a6)
{
  long long v18 = *(_OWORD *)a3;
  uint64_t v19 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  llvm::GetGitHash(v16);
  char v15 = 0;
  LOBYTE(v14) = 0;
  char v13 = 12;
  strcpy((char *)&__p, "unknown type");
  sub_1CBF3F390((uint64_t)a1, &v18, a4, a5, a6, a2, (long long *)v16, 0x10000, &v14, &__p, -1, 0);
  if (v13 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v15 < 0) {
    operator delete((void *)v14);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)v18);
  }
  *((void *)a1 + 17) = 0;
  if (a2) {
    llvm::AGX::AGCStatusPrinter::enable(a1);
  }
  return a1;
}

void llvm::AGX::AGCStatusPrinter::~AGCStatusPrinter(void ***this)
{
  uint64_t v1 = (llvm::AGX::AGCStatusPrinter *)this;
  unint64_t v2 = this[17];
  *((void *)v1 + 17) = 0;
  if (v2)
  {
    char v3 = v1;
    sub_1CD453754(v2);
    MEMORY[0x1D25D9CE0]();
    uint64_t v1 = v3;
  }

  sub_1CBF3F490((uint64_t)v1);
}

void sub_1CD453628(llvm::raw_ostream *this)
{
  *(void *)this = &unk_1F25FF8C8;
  unint64_t v2 = (const char *)*((void *)this + 2);
  if (*((const char **)this + 4) != v2)
  {
    *((void *)this + 4) = v2;
    llvm::raw_ostream::flush_tied_then_write(this, v2);
  }

  llvm::raw_ostream::~raw_ostream(this);
}

void sub_1CD453694(llvm::raw_ostream *this)
{
  *(void *)this = &unk_1F25FF8C8;
  unint64_t v2 = (const char *)*((void *)this + 2);
  if (*((const char **)this + 4) != v2)
  {
    *((void *)this + 4) = v2;
    llvm::raw_ostream::flush_tied_then_write(this, v2);
  }
  llvm::raw_ostream::~raw_ostream(this);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD453718()
{
  return 0;
}

uint64_t sub_1CD453720(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t sub_1CD453744(uint64_t result, char a2)
{
  *(unsigned char *)(result + 40) = a2;
  return result;
}

llvm::raw_ostream *sub_1CD45374C(uint64_t a1, const char *a2, size_t a3)
{
  return llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 64), a2, a3);
}

void sub_1CD453754(void **this)
{
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  *this = &unk_1F25FF8C8;
  unint64_t v2 = (const char *)this[2];
  if (this[4] != v2)
  {
    this[4] = (void *)v2;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)this, v2);
  }

  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)this);
}

llvm::raw_ostream *llvm::AGX::AGCReplay::serializeRequestToIR(llvm::AGX::AGCReplay *this, llvm::AGX::CompileRequest *a2, llvm::TargetMachine *a3)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  uint64_t Module = llvm::AGX::CompileRequest::getModule(a2);
  *(void *)__n128 __p = "agxcompiler.config";
  __int16 v96 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata((llvm::Module *)Module, (const char **)__p);
  if (NamedMetadata) {
    llvm::Module::eraseNamedMetadata((llvm::Module *)Module, NamedMetadata);
  }
  uint64_t inserted = llvm::Module::getOrInsertNamedMetadata((_DWORD *)Module, "agxcompiler.config", 0x12uLL);
  if (inserted)
  {
    char v9 = (llvm::NamedMDNode *)inserted;
    uint64_t v10 = *(void *)Module;
    *(void *)__n128 __p = llvm::MDString::get(*(uint64_t **)Module, "TargetGPU", 9uLL);
    char v11 = *((unsigned char *)this + 23);
    BOOL v12 = v11 < 0;
    if (v11 >= 0) {
      char v13 = (unsigned __int8 *)this;
    }
    else {
      char v13 = *(unsigned __int8 **)this;
    }
    size_t v14 = v11 & 0x7F;
    if (v12) {
      size_t v15 = *((void *)this + 1);
    }
    else {
      size_t v15 = v14;
    }
    *(void *)&__p[8] = llvm::MDString::get(*(uint64_t **)Module, v13, v15);
    Impl = llvm::MDTuple::getImpl(v10, __p, 2, 0, 1);
    llvm::NamedMDNode::addOperand(v9, Impl);
    uint64_t v17 = *(void *)Module;
    uint64_t v92 = llvm::MDString::get(*(uint64_t **)Module, "GitHash", 7uLL);
    long long v18 = *(uint64_t **)Module;
    char v95 = 0;
    __p[0] = 0;
    uint64_t v93 = llvm::MDString::get(v18, (unsigned __int8 *)__p, 0);
    uint64_t v19 = llvm::MDTuple::getImpl(v17, &v92, 2, 0, 1);
    llvm::NamedMDNode::addOperand(v9, v19);
    if (v95 < 0) {
      operator delete(*(void **)__p);
    }
    if (*(char *)(Module + 239) < 0) {
      sub_1CB8BDF7C((uint64_t)&v91, *(const void **)(Module + 216), *(void *)(Module + 224));
    }
    else {
      std::string v91 = *(std::string *)(Module + 216);
    }
    int ArchFromTriple = llvm::GPUBaseInfo::getArchFromTriple(&v91);
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v91.__r_.__value_.__l.__data_);
    }
    if (ArchFromTriple == 29 && !sub_1CBA86C10(this, "g13_3") && !sub_1CBA86C10(this, "g14_3"))
    {
      uint64_t v21 = *(void *)Module;
      *(void *)__n128 __p = llvm::MDString::get(*(uint64_t **)Module, "TargetISA", 9uLL);
      uint64_t v22 = *(uint64_t **)Module;
      int v23 = sub_1CBD855E4(*((void *)a3 + 73));
      *(void *)&__p[8] = llvm::MDString::get(v22, (unsigned __int8 *)off_1E682C630[v23], qword_1CFAC2FC8[v23]);
      uint64_t v24 = llvm::MDTuple::getImpl(v21, __p, 2, 0, 1);
      llvm::NamedMDNode::addOperand(v9, v24);
    }
    uint64_t v25 = "Compute";
    size_t v26 = 7;
    switch(*((_DWORD *)this + 6))
    {
      case 1:
        goto LABEL_26;
      case 2:
        uint64_t v25 = "Graphic";
        size_t v26 = 7;
        goto LABEL_26;
      case 3:
        uint64_t v25 = "Driver";
        size_t v26 = 6;
        goto LABEL_26;
      case 4:
        uint64_t v25 = "DynamicLibrary";
        size_t v26 = 14;
LABEL_26:
        BOOL v29 = llvm::MDString::get(*(uint64_t **)Module, (unsigned __int8 *)v25, v26);
        if (!v29) {
          goto LABEL_27;
        }
        goto LABEL_28;
      default:
LABEL_27:
        BOOL v29 = llvm::MDString::get(*(uint64_t **)Module, "unknown type", 0xCuLL);
LABEL_28:
        uint64_t v30 = *(void *)Module;
        *(void *)__n128 __p = llvm::MDString::get(*(uint64_t **)Module, "PipelineType", 0xCuLL);
        *(void *)&__p[8] = v29;
        uint64_t v31 = llvm::MDTuple::getImpl(v30, __p, 2, 0, 1);
        llvm::NamedMDNode::addOperand(v9, v31);
        uint64_t v32 = "None";
        size_t v33 = 4;
        switch(*((_DWORD *)this + 7))
        {
          case 0:
            goto LABEL_32;
          case 1:
            uint64_t v32 = "Binary";
            size_t v33 = 6;
            goto LABEL_32;
          case 2:
            uint64_t v32 = "Textual";
            size_t v33 = 7;
            goto LABEL_32;
          case 3:
            uint64_t v32 = "TextualAndBinary";
            size_t v33 = 16;
LABEL_32:
            uint64_t v34 = llvm::MDString::get(*(uint64_t **)Module, (unsigned __int8 *)v32, v33);
            if (!v34) {
              goto LABEL_33;
            }
            goto LABEL_34;
          default:
LABEL_33:
            uint64_t v34 = llvm::MDString::get(*(uint64_t **)Module, "unknown type", 0xCuLL);
LABEL_34:
            uint64_t v35 = *(void *)Module;
            *(void *)__n128 __p = llvm::MDString::get(*(uint64_t **)Module, "OutputSelection", 0xFuLL);
            *(void *)&__p[8] = v34;
            uint64_t v36 = llvm::MDTuple::getImpl(v35, __p, 2, 0, 1);
            llvm::NamedMDNode::addOperand(v9, v36);
            uint64_t v37 = *(void *)Module;
            *(void *)__n128 __p = llvm::MDString::get(*(uint64_t **)Module, "EnableOpt", 9uLL);
            Int1Ty = (llvm::ConstantInt *)llvm::Type::getInt1Ty(*(llvm::Type **)Module, v38);
            int v40 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(Int1Ty, *((unsigned __int8 *)this + 32), 0);
            *(void *)&__p[8] = llvm::ValueAsMetadata::get(v40, v41);
            unsigned int v42 = llvm::MDTuple::getImpl(v37, __p, 2, 0, 1);
            llvm::NamedMDNode::addOperand(v9, v42);
            uint64_t v43 = *(void *)Module;
            *(void *)__n128 __p = llvm::MDString::get(*(uint64_t **)Module, "EnableLogging", 0xDuLL);
            int v45 = (llvm::ConstantInt *)llvm::Type::getInt1Ty(*(llvm::Type **)Module, v44);
            int v46 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v45, *((unsigned __int8 *)this + 33), 0);
            *(void *)&__p[8] = llvm::ValueAsMetadata::get(v46, v47);
            unsigned int v48 = llvm::MDTuple::getImpl(v43, __p, 2, 0, 1);
            llvm::NamedMDNode::addOperand(v9, v48);
            Options = (unsigned __int8 *)llvm::AGX::CompileRequest::getOptions(a2);
            uint64_t v50 = *(void *)Module;
            *(void *)__n128 __p = llvm::MDString::get(*(uint64_t **)Module, "Request.Options.FastIsel", 0x18uLL);
            unsigned int v52 = (llvm::ConstantInt *)llvm::Type::getInt1Ty(*(llvm::Type **)Module, v51);
            unsigned int v53 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v52, Options[1], 0);
            *(void *)&__p[8] = llvm::ValueAsMetadata::get(v53, v54);
            uint64_t v55 = llvm::MDTuple::getImpl(v50, __p, 2, 0, 1);
            llvm::NamedMDNode::addOperand(v9, v55);
            uint64_t v56 = *(void *)Module;
            *(void *)__n128 __p = llvm::MDString::get(*(uint64_t **)Module, "Request.Options.FastMath", 0x18uLL);
            uint64_t v58 = (llvm::ConstantInt *)llvm::Type::getInt1Ty(*(llvm::Type **)Module, v57);
            unint64_t v59 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v58, *Options, 0);
            *(void *)&__p[8] = llvm::ValueAsMetadata::get(v59, v60);
            unint64_t v61 = llvm::MDTuple::getImpl(v56, __p, 2, 0, 1);
            llvm::NamedMDNode::addOperand(v9, v61);
            uint64_t v62 = *(void *)Module;
            uint64_t v92 = llvm::MDString::get(*(uint64_t **)Module, "Request.Options.FPContract", 0x1AuLL);
            int v63 = *(uint64_t **)Module;
            int v64 = Options[2];
            if (v64 == 2)
            {
              size_t v65 = 4;
              char v95 = 4;
              strcpy(__p, "Fast");
            }
            else if (v64 == 1)
            {
              size_t v65 = 8;
              char v95 = 8;
              strcpy(__p, "Standard");
            }
            else
            {
              size_t v65 = 6;
              char v95 = 6;
              strcpy(__p, "Strict");
            }
            uint64_t v93 = llvm::MDString::get(v63, (unsigned __int8 *)__p, v65);
            int v66 = llvm::MDTuple::getImpl(v62, &v92, 2, 0, 1);
            llvm::NamedMDNode::addOperand(v9, v66);
            if (v95 < 0) {
              operator delete(*(void **)__p);
            }
            uint64_t v67 = *(void *)Module;
            uint64_t v92 = llvm::MDString::get(*(uint64_t **)Module, "Request.Options.RelocModel", 0x1AuLL);
            int v68 = *(uint64_t **)Module;
            if (Options[3])
            {
              strcpy(__p, "PIC");
              unsigned int v69 = 3;
            }
            else
            {
              strcpy(__p, "Static");
              unsigned int v69 = 6;
            }
            char v95 = v69;
            uint64_t v93 = llvm::MDString::get(v68, (unsigned __int8 *)__p, v69);
            long long v70 = llvm::MDTuple::getImpl(v67, &v92, 2, 0, 1);
            llvm::NamedMDNode::addOperand(v9, v70);
            if (v95 < 0) {
              operator delete(*(void **)__p);
            }
            uint64_t v71 = *(void *)Module;
            uint64_t v92 = llvm::MDString::get(*(uint64_t **)Module, "Request.Options.ForwardProgressMode", 0x23uLL);
            int v72 = *(uint64_t **)Module;
            if (*((_DWORD *)Options + 1))
            {
              strcpy(__p, "SIMDGroupParallel");
              unsigned int v73 = 17;
            }
            else
            {
              strcpy(__p, "Weak");
              unsigned int v73 = 4;
            }
            char v95 = v73;
            uint64_t v93 = llvm::MDString::get(v72, (unsigned __int8 *)__p, v73);
            uint64_t v74 = llvm::MDTuple::getImpl(v71, &v92, 2, 0, 1);
            llvm::NamedMDNode::addOperand(v9, v74);
            if (v95 < 0) {
              operator delete(*(void **)__p);
            }
            uint64_t v75 = *(void *)Module;
            *(void *)__n128 __p = llvm::MDString::get(*(uint64_t **)Module, "Request.ShaderType", 0x12uLL);
            unsigned __int8 v76 = *(uint64_t **)Module;
            uint64_t ShaderType = llvm::AGX::CompileRequest::getShaderType(a2);
            char v78 = *(unsigned char *)(ShaderType + 23);
            BOOL v79 = v78 < 0;
            if (v78 >= 0) {
              long long v80 = (unsigned __int8 *)ShaderType;
            }
            else {
              long long v80 = *(unsigned __int8 **)ShaderType;
            }
            size_t v81 = v78 & 0x7F;
            if (v79) {
              size_t v82 = *(void *)(ShaderType + 8);
            }
            else {
              size_t v82 = v81;
            }
            *(void *)&__p[8] = llvm::MDString::get(v76, v80, v82);
            long long v83 = llvm::MDTuple::getImpl(v75, __p, 2, 0, 1);
            llvm::NamedMDNode::addOperand(v9, v83);
            uint64_t v84 = *(void *)Module;
            *(void *)__n128 __p = llvm::MDString::get(*(uint64_t **)Module, "Request.ShaderID", 0x10uLL);
            Int32Ty = (llvm::ConstantInt *)llvm::Type::getInt32Ty(*(llvm::Type **)Module, v85);
            int Id = llvm::AGX::CompileRequest::getId(a2);
            uint64_t v88 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(Int32Ty, Id, 0);
            *(void *)&__p[8] = llvm::ValueAsMetadata::get(v88, v89);
            uint64_t v90 = llvm::MDTuple::getImpl(v84, __p, 2, 0, 1);
            uint64_t result = (llvm::raw_ostream *)llvm::NamedMDNode::addOperand(v9, v90);
            break;
        }
        break;
    }
  }
  else
  {
    int v27 = (llvm::raw_ostream *)llvm::errs(0);
    return sub_1CB8E509C(v27, "Unexpected null ConfigMD\n.");
  }
  return result;
}

void llvm::AGX::AGCReplay::createCompiler(llvm::AGX::AGCReplay *this)
{
}

void llvm::AGX::AGCReplay::createPlan(llvm::AGX::AGCReplay *this, llvm::AGX::AGXCompiler *a2)
{
}

uint64_t sub_1CD4540A0(uint64_t a1, char *a2, unsigned char **a3, _OWORD *a4)
{
  uint64_t v8 = sub_1CB883A14(a1, 0, 0);
  *(unsigned char *)(v8 + 128) = 0;
  *(void *)(v8 + 136) = &unk_1F25EDE58;
  *(void *)(v8 + 144) = 0;
  *(void *)uint64_t v8 = &unk_1F26440A0;
  *(void *)(v8 + 152) = &unk_1F2643CC0;
  *(void *)(v8 + 160) = &unk_1F25EDE78;
  *(void *)(v8 + 184) = v8 + 160;
  size_t v9 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v9);
  uint64_t v10 = *a3;
  *(unsigned char *)(a1 + 128) = **a3;
  *(unsigned char *)(a1 + 145) = 1;
  *(unsigned char *)(a1 + 144) = *v10;
  *(_OWORD *)(a1 + 32) = *a4;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void llvm::AGX::AGXCompiler::init(llvm::AGX::AGXCompiler *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&init_flag, memory_order_acquire) != -1)
  {
    uint64_t v1 = &v2;
    unint64_t v2 = sub_1CBF40FC0;
    std::__call_once(&init_flag, &v1, (void (__cdecl *)(void *))sub_1CBF42120);
  }
}

void llvm::AGX::AGXCompiler::create()
{
}

__n128 llvm::AGX::AGXCompiler::getLastDiagnostics@<Q0>(__n128 **this@<X0>, __n128 *a2@<X8>)
{
  unint64_t v2 = *this;
  __n128 result = (*this)[1];
  *a2 = result;
  v2[1].n128_u64[0] = 0;
  v2[1].n128_u64[1] = 0;
  a2[1].n128_u64[0] = v2[2].n128_u64[0];
  v2[2].n128_u64[0] = 0;
  return result;
}

BOOL llvm::AGX::AGXCompiler::isValid(llvm::AGX::AGXCompiler *this)
{
  return **(void **)this && *(void *)(*(void *)this + 8) != 0;
}

uint64_t sub_1CD454388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, char a12)
{
  BOOL v12 = *(uint64_t (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 96);
  if (!v12) {
    return 0;
  }
  __int16 v23 = 261;
  v22[0] = a2;
  v22[1] = a3;
  llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v22);
  BYTE4(v20) = a12;
  LODWORD(v20) = a11;
  uint64_t v18 = v12(a1, __p, a4, a5, a6, a7, a8, a9, a10, v20);
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  return v18;
}

uint64_t sub_1CD454464(uint64_t a1)
{
  *(void *)a1 = &unk_1F25FF998;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1CD4544B4(uint64_t a1)
{
  *(void *)a1 = &unk_1F25FF998;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD454524(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_1CD45452C(uint64_t a1)
{
  *(void *)a1 = &unk_1F25FF998;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1CD45457C(uint64_t a1)
{
  *(void *)a1 = &unk_1F25FF998;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD4545EC(uint64_t a1)
{
  *(void *)a1 = &unk_1F25FF998;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1CD45463C(uint64_t a1)
{
  *(void *)a1 = &unk_1F25FF998;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD4546AC(uint64_t a1)
{
  *(unsigned char *)a1 &= ~1u;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 12) = *(_WORD *)(a1 + 12) & 0xE000 | 0x400;
  *(void *)(a1 + 16) = 0x100000001;
  *(unsigned char *)(a1 + 24) &= 0xF8u;
  unsigned int v2 = *(_DWORD *)(a1 + 32) & 0xFE000000 | 0x30;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = v2;
  *(_DWORD *)(a1 + 36) = 4;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 56) &= 0xF000u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = xmmword_1CDC7F8E0;
  *(_DWORD *)(a1 + 112) = -65536;
  *(_DWORD *)(a1 + 116) = 0;
  llvm::MCTargetOptions::MCTargetOptions((llvm::MCTargetOptions *)(a1 + 120));
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  return a1;
}

uint64_t sub_1CD45475C(uint64_t result)
{
  if (*(char *)(result + 71) < 0)
  {
    uint64_t v1 = result;
    operator delete(*(void **)(result + 48));
    __n128 result = v1;
  }
  if (*(char *)(result + 47) < 0)
  {
    uint64_t v2 = result;
    operator delete(*(void **)(result + 24));
    __n128 result = v2;
  }
  if (*(char *)(result + 23) < 0)
  {
    uint64_t v3 = result;
    operator delete(*(void **)result);
    return v3;
  }
  return result;
}

uint64_t *sub_1CD4547D8(uint64_t *a1)
{
  if (*((char *)a1 + 63) < 0) {
    operator delete((void *)a1[5]);
  }
  size_t v5 = (void **)(a1 + 2);
  sub_1CBF42078(&v5);
  uint64_t v2 = a1[1];
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void *llvm::AGX::DiagnosticManager::install(llvm::AGX::DiagnosticManager *this, llvm::MCContext *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1F25FF9C0;
  v3[1] = this;
  BOOL v4 = v3;
  sub_1CBF42504((void *)a2 + 14, (uint64_t)v3);
  __n128 result = v4;
  if (v4 == v3) {
    return (void *)(*(uint64_t (**)(void *))(v3[0] + 32))(v3);
  }
  if (v4) {
    return (void *)(*(uint64_t (**)(void))(*v4 + 40))();
  }
  return result;
}

void *llvm::AGX::operator<<(void *a1, _DWORD *a2)
{
  BOOL v4 = sub_1CBF435C4(a1, (uint64_t)"[", 1);
  switch(a2[2])
  {
    case 1:
      uint64_t v5 = 7;
      char v16 = 7;
      strcpy((char *)__p, "Warning");
      break;
    case 2:
      uint64_t v5 = 4;
      char v16 = 4;
      strcpy((char *)__p, "Info");
      break;
    case 3:
      uint64_t v5 = 8;
      char v16 = 8;
      strcpy((char *)__p, "Assembly");
      break;
    case 4:
      uint64_t v5 = 11;
      char v16 = 11;
      strcpy((char *)__p, "Performance");
      break;
    case 5:
      uint64_t v5 = 6;
      char v16 = 6;
      strcpy((char *)__p, "Timing");
      break;
    default:
      uint64_t v5 = 5;
      char v16 = 5;
      strcpy((char *)__p, "Error");
      break;
  }
  size_t v6 = sub_1CBF435C4(v4, (uint64_t)__p, v5);
  size_t v7 = sub_1CBF435C4(v6, (uint64_t)"] ", 2);
  uint64_t v8 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 16))(a2);
  char v9 = *(unsigned char *)(v8 + 23);
  BOOL v10 = v9 < 0;
  if (v9 >= 0) {
    uint64_t v11 = v8;
  }
  else {
    uint64_t v11 = *(void *)v8;
  }
  uint64_t v12 = v9 & 0x7F;
  if (v10) {
    uint64_t v13 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v13 = v12;
  }
  sub_1CBF435C4(v7, v11, v13);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

llvm::raw_ostream *llvm::AGX::operator<<(llvm::raw_ostream *a1, _DWORD *a2)
{
  BOOL v4 = sub_1CB8E509C(a1, "[");
  switch(a2[2])
  {
    case 1:
      size_t v5 = 7;
      char v16 = 7;
      strcpy((char *)__p, "Warning");
      break;
    case 2:
      size_t v5 = 4;
      char v16 = 4;
      strcpy((char *)__p, "Info");
      break;
    case 3:
      size_t v5 = 8;
      char v16 = 8;
      strcpy((char *)__p, "Assembly");
      break;
    case 4:
      size_t v5 = 11;
      char v16 = 11;
      strcpy((char *)__p, "Performance");
      break;
    case 5:
      size_t v5 = 6;
      char v16 = 6;
      strcpy((char *)__p, "Timing");
      break;
    default:
      size_t v5 = 5;
      char v16 = 5;
      strcpy((char *)__p, "Error");
      break;
  }
  size_t v6 = llvm::raw_ostream::write(v4, (const char *)__p, v5);
  size_t v7 = sub_1CB8E509C(v6, "] ");
  uint64_t v8 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 16))(a2);
  char v9 = *(unsigned char *)(v8 + 23);
  BOOL v10 = v9 < 0;
  if (v9 >= 0) {
    uint64_t v11 = (const char *)v8;
  }
  else {
    uint64_t v11 = *(const char **)v8;
  }
  size_t v12 = v9 & 0x7F;
  if (v10) {
    size_t v13 = *(void *)(v8 + 8);
  }
  else {
    size_t v13 = v12;
  }
  llvm::raw_ostream::write(v7, v11, v13);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

uint64_t sub_1CD454CD0(uint64_t a1)
{
  *(void *)a1 = &unk_1F25FF998;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1CD454D20(uint64_t a1)
{
  *(void *)a1 = &unk_1F25FF998;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CD454D90(void *a1)
{
  *a1 = &unk_1F25FFA78;
  sub_1CB833F88(a1 + 59, 0);
  return a1;
}

void *sub_1CD454DDC(void *a1)
{
  *a1 = &unk_1F25FFAA0;
  sub_1CB833F88(a1 + 3, 0);
  return a1;
}

uint64_t sub_1CD454E24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 56);
  if (!v5) {
    operator new();
  }

  return v5(a2, a3, a4);
}

uint64_t llvm::AGX::AssemblePipeline::run(llvm::AGX::DiagnosticManager ***a1, uint64_t *a2, uint64_t a3)
{
  return llvm::AGX::AssemblePipeline::AssemblerImpl::run(*a1, a2, a3);
}

uint64_t sub_1CD455004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, unsigned __int8 a10)
{
  int v12 = *(_DWORD *)(a2 + 44);
  if (v12 != 5)
  {
    uint64_t v15 = 0;
    switch(v12)
    {
      case 1:
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(a1 + 152))(a3, a4, a5, a6, a8, a9);
        goto LABEL_4;
      case 3:
        uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 168);
        if (!v18) {
          llvm::createELFStreamer();
        }
        goto LABEL_21;
      case 4:
        uint64_t v19 = "GOFF MCObjectStreamer not implemented yet";
        goto LABEL_19;
      case 6:
        uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 192);
        if (!v18) {
          llvm::createSPIRVStreamer();
        }
        goto LABEL_21;
      case 7:
        uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 176);
        if (!v18) {
          llvm::createWasmStreamer();
        }
        goto LABEL_21;
      case 8:
        uint64_t v19 = "MetalLib MCObjectStreamer not implemented yet.";
LABEL_19:
        llvm::report_fatal_error((llvm *)v19, (const llvm::Twine *)1);
      case 9:
        uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 184);
        if (!v18) {
          llvm::createXCOFFStreamer();
        }
LABEL_21:
        uint64_t v14 = v18(a2, a3, a4, a5, a6, a8);
        goto LABEL_4;
      default:
        goto LABEL_5;
    }
  }
  size_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(a1 + 160);
  if (!v13) {
    llvm::createMachOStreamer();
  }
  uint64_t v14 = v13(a3, a4, a5, a6, a8, a10);
LABEL_4:
  uint64_t v15 = v14;
LABEL_5:
  char v16 = *(void (**)(uint64_t, uint64_t))(a1 + 216);
  if (v16) {
    v16(v15, a7);
  }
  return v15;
}

void sub_1CD4551A8(uint64_t a1)
{
  sub_1CBF461C0((uint64_t)&v1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), **(_DWORD **)(a1 + 32), 1, **(unsigned __int8 **)(a1 + 40), **(unsigned __int8 **)(a1 + 48), **(unsigned char **)(a1 + 56));
}

void sub_1CD455224(uint64_t a1, uint64_t a2)
{
  sub_1CBF461C0((uint64_t)&v2, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), **(_DWORD **)(a1 + 32), 2, a2, **(unsigned __int8 **)(a1 + 40), **(unsigned char **)(a1 + 48));
}

void *sub_1CD455298(void *a1, uint64_t a2, uint64_t a3, int a4, int a5, char a6, char a7)
{
  uint64_t v13 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1CB8BDF7C((uint64_t)&v21, *(const void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    long long v21 = *(_OWORD *)a2;
    uint64_t v22 = *(void *)(a2 + 16);
  }
  llvm::GetGitHash(v19);
  char v18 = 0;
  LOBYTE(v17) = 0;
  char v16 = 12;
  strcpy((char *)&__p, "unknown type");
  sub_1CBF3F390(v13, &v21, a4, a5, a7, a6, (long long *)v19, 0x10000, &v17, &__p, -1, 0);
  if (v16 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v18 < 0) {
    operator delete((void *)v17);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete((void *)v21);
  }
  a1[19] = a3;
  return a1;
}

void sub_1CD4553F0()
{
}

void *sub_1CD455404(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25FFBE8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CD45544C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25FFBE8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CD455478(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

void sub_1CD455484()
{
}

void *sub_1CD455498(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25FFC30;
  result[1] = v3;
  return result;
}

uint64_t sub_1CD4554E0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25FFC30;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CD45550C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

void sub_1CD455518()
{
}

void *sub_1CD45552C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25FFC78;
  result[1] = v3;
  return result;
}

uint64_t sub_1CD455574(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25FFC78;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CD4555A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

void sub_1CD4555B0()
{
}

void *sub_1CD4555C4(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25FFD98;
  result[1] = v3;
  return result;
}

uint64_t sub_1CD45560C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25FFD98;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CD455638(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

void sub_1CD455644()
{
}

__n128 sub_1CD455658(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25FFF00;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CD4556A4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25FFF00;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CD4556D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*(unsigned __int8 *)(a1 + 16));
}

void sub_1CD4556E4()
{
}

void *sub_1CD4556F8(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F2600458;
  result[1] = v3;
  return result;
}

uint64_t sub_1CD455740(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2600458;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CD455768(uint64_t a1, uint64_t a2, void *a3)
{
  return (*(uint64_t (**)(uint64_t, void, void))(a1 + 8))(a2, *a3, a3[1]);
}

uint64_t sub_1CD45577C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v2 - 24)) = a2[3];
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();

  return std::ostream::~ostream();
}

uint64_t sub_1CD45587C(uint64_t a1)
{
  *(void *)a1 = &unk_1F25FF998;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1CD4558CC(uint64_t a1)
{
  *(void *)a1 = &unk_1F25FF998;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x1D25D9CE0);
}

BOOL llvm::AGX::AGXCompilePlan::isValid(llvm::AGX::AGXCompilePlan *this)
{
  return *(void *)this != 0;
}

void llvm::AGX::AGXCompilePlan::AGXCompilePlan()
{
}

{
  llvm::AGX::AGXCompilePlan::AGXCompilePlan();
}

uint64_t llvm::AGX::AGXAssemblePlan::initializeAsmInjection(uint64_t a1, const std::string *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  __int16 v22 = 260;
  *(void *)long long v21 = a2;
  sub_1CD096690(v21, (llvm::WritableMemoryBuffer *)0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)&v25);
  if (v26)
  {
    std::string::basic_string(&v24, a2);
    sub_1CB935710("Fail to open injection file: ", &v24, &v19);
    __int16 v22 = 260;
    *(void *)long long v21 = &v19;
    llvm::report_fatal_error((llvm *)v21, (const llvm::Twine *)1);
  }
  BOOL v4 = v25;
  llvm::line_iterator::line_iterator((llvm::line_iterator *)v21, v25, 1, 0);
  if ((_BYTE)v22)
  {
    size_t v5 = (void *)(a1 + 8);
    do
    {
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v23;
      LOBYTE(v18[0]) = 44;
      std::string::size_type v6 = llvm::StringRef::find((uint64_t *)&v24, (char *)v18, 1uLL, 0);
      if (v6 == -1)
      {
        std::string::size_type v7 = 0;
        std::string::size_type v8 = 0;
        *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
      }
      else
      {
        if (v24.__r_.__value_.__l.__size_ >= v6) {
          std::string::size_type size = v6;
        }
        else {
          std::string::size_type size = v24.__r_.__value_.__l.__size_;
        }
        if (v24.__r_.__value_.__l.__size_ >= v6 + 1) {
          std::string::size_type v10 = v6 + 1;
        }
        else {
          std::string::size_type v10 = v24.__r_.__value_.__l.__size_;
        }
        std::string::size_type v7 = v24.__r_.__value_.__r.__words[0] + v10;
        std::string::size_type v8 = v24.__r_.__value_.__l.__size_ - v10;
        v19.__r_.__value_.__r.__words[0] = v24.__r_.__value_.__r.__words[0];
        v19.__r_.__value_.__l.__size_ = size;
      }
      v19.__r_.__value_.__r.__words[2] = v7;
      unint64_t v20 = v8;
      std::string::size_type first_not_of = llvm::StringRef::find_first_not_of(&v19, " \t\n\v\f\r", 6, 0);
      if (first_not_of >= v19.__r_.__value_.__l.__size_) {
        std::string::size_type v12 = v19.__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type v12 = first_not_of;
      }
      uint64_t v13 = (const std::string::value_type *)(v19.__r_.__value_.__r.__words[0] + v12);
      std::string::size_type v14 = v19.__r_.__value_.__l.__size_ - v12;
      unint64_t v15 = llvm::StringRef::find_first_not_of(&v19.__r_.__value_.__r.__words[2], " \t\n\v\f\r", 6, 0);
      if (v15 >= v20) {
        unint64_t v16 = v20;
      }
      else {
        unint64_t v16 = v15;
      }
      v18[0] = v19.__r_.__value_.__r.__words[2] + v16;
      v18[1] = v20 - v16;
      sub_1CD4560F4(v5, v13, v14, (uint64_t)v18);
      llvm::line_iterator::advance((uint64_t)v21);
    }
    while ((_BYTE)v22);
  }
  return (*(uint64_t (**)(const llvm::MemoryBuffer *))(*(void *)v4 + 8))(v4);
}

void llvm::AGX::AGXCompilePlan::~AGXCompilePlan(llvm::AGX::AGXCompilePlan *this)
{
  uint64_t v2 = (uint64_t **)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v2)
  {
    llvm::AGX::AGXAssemblePlan::~AGXAssemblePlan(v2);
    MEMORY[0x1D25D9CE0]();
  }
  uint64_t v3 = *(uint64_t **)this;
  *(void *)this = 0;
  if (v3)
  {
    uint64_t v4 = *v3;
    *uint64_t v3 = 0;
    if (v4) {
      sub_1CBF4C670((uint64_t)v3, v4);
    }
    MEMORY[0x1D25D9CE0](v3, 0x20C4093837F09);
  }
}

void llvm::AGX::AGXAssemblePlan::~AGXAssemblePlan(uint64_t **this)
{
  sub_1CD456094((uint64_t)(this + 1));
  uint64_t v2 = *this;
  *this = 0;
  if (v2)
  {
    uint64_t v3 = *v2;
    uint64_t *v2 = 0;
    if (v3) {
      MEMORY[0x1D25D9CE0](v3, 0x20C40A4A59CD2);
    }
    MEMORY[0x1D25D9CE0](v2, 0x20C4093837F09);
  }
}

void sub_1CD455E68(long long *a1, const char **a2)
{
  uint64_t v4 = sub_1CB883A14((uint64_t)qword_1EBCC2F38, 0, 0);
  qword_1EBCC2FB8 = 0;
  unk_1EBCC2FC0 = 0;
  qword_1EBCC2FE0 = 0;
  unk_1EBCC2FE8 = 0;
  byte_1EBCC2FF0 = 0;
  qword_1EBCC2FD8 = 0;
  unk_1EBCC2FC8 = 0;
  unk_1EBCC2FD0 = &unk_1F2643C20;
  qword_1EBCC2F38[0] = (uint64_t)&unk_1F2643FD0;
  qword_1EBCC2FF8 = (uint64_t)&unk_1F2643EA0;
  qword_1EBCC3000 = (uint64_t)&unk_1F25F6428;
  qword_1EBCC3018 = (uint64_t)&qword_1EBCC3000;
  llvm::cl::Option::setArgStr(v4, "agx-asm-injection", 0x11uLL);
  xmmword_1EBCC2F58 = *a1;
  sub_1CBAD7D28(a2, (uint64_t)qword_1EBCC2F38);

  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EBCC2F38);
}

unsigned __int8 *sub_1CD455F74(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned __int8 *)a2;
  char v4 = *(unsigned char *)(a2 + 23);
  BOOL v5 = v4 < 0;
  unint64_t v6 = *(void *)(a2 + 8);
  if (v4 < 0) {
    a2 = *(void *)a2;
  }
  unint64_t v7 = v4 & 0x7F;
  if (v5) {
    unint64_t v8 = v6;
  }
  else {
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_1CBF4D6C0((uint64_t)&v19, (uint64_t *)a2, v8);
  int8x8_t v10 = (int8x8_t)a1[1];
  if (!*(void *)&v10) {
    return 0;
  }
  unint64_t v11 = v9;
  uint8x8_t v12 = (uint8x8_t)vcnt_s8(v10);
  v12.i16[0] = vaddlv_u8(v12);
  unint64_t v13 = v12.u32[0];
  if (v12.u32[0] > 1uLL)
  {
    unint64_t v14 = v9;
    if (v9 >= *(void *)&v10) {
      unint64_t v14 = v9 % *(void *)&v10;
    }
  }
  else
  {
    unint64_t v14 = (*(void *)&v10 - 1) & v9;
  }
  unint64_t v15 = *(unsigned __int8 ***)(*a1 + 8 * v14);
  if (!v15) {
    return 0;
  }
  for (uint64_t i = *v15; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v17 = *((void *)i + 1);
    if (v17 == v11)
    {
      if (sub_1CBAD746C(i + 16, v2)) {
        return i;
      }
    }
    else
    {
      if (v13 > 1)
      {
        if (v17 >= *(void *)&v10) {
          v17 %= *(void *)&v10;
        }
      }
      else
      {
        v17 &= *(void *)&v10 - 1;
      }
      if (v17 != v14) {
        return 0;
      }
    }
  }
  return i;
}

uint64_t sub_1CD456094(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_1CD3C4FA4((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  char v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_1CD4560F4(void *a1, const std::string::value_type *a2, std::string::size_type a3, uint64_t a4)
{
  sub_1CD456184((uint64_t)&v6, (uint64_t)a1, a2, a3, a4);
  BOOL v5 = v6;
  if ((sub_1CD456230(a1, (uint64_t)v6) & 1) == 0 && v5)
  {
    if (v7) {
      sub_1CD3C4FA4((uint64_t)v5 + 16);
    }
    operator delete(v5);
  }
}

unint64_t sub_1CD456184(uint64_t a1, uint64_t a2, const std::string::value_type *a3, std::string::size_type a4, uint64_t a5)
{
  uint64_t v9 = a2 + 16;
  int8x8_t v10 = (char *)operator new(0x40uLL);
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v9;
  *(void *)int8x8_t v10 = 0;
  *((void *)v10 + 1) = 0;
  std::string::__init((std::string *)(v10 + 16), a3, a4);
  std::string::__init((std::string *)(v10 + 40), *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  *(unsigned char *)(a1 + 16) = 1;
  char v11 = v10[39];
  BOOL v12 = v11 < 0;
  if (v11 >= 0) {
    unint64_t v13 = (uint64_t *)(v10 + 16);
  }
  else {
    unint64_t v13 = (uint64_t *)*((void *)v10 + 2);
  }
  unint64_t v14 = v11 & 0x7F;
  if (v12) {
    unint64_t v15 = *((void *)v10 + 3);
  }
  else {
    unint64_t v15 = v14;
  }
  unint64_t result = sub_1CBF4D6C0((uint64_t)&v17, v13, v15);
  *((void *)v10 + 1) = result;
  return result;
}

uint64_t sub_1CD456230(void *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 16;
  char v5 = *(unsigned char *)(a2 + 39);
  int v6 = v5;
  if (v5 >= 0) {
    char v7 = (uint64_t *)(a2 + 16);
  }
  else {
    char v7 = *(uint64_t **)(a2 + 16);
  }
  unint64_t v8 = v5 & 0x7F;
  if (v6 >= 0) {
    unint64_t v9 = v8;
  }
  else {
    unint64_t v9 = *(void *)(v4 + 8);
  }
  unint64_t v10 = sub_1CBF4D6C0((uint64_t)&v12, v7, v9);
  *(void *)(v4 - 8) = v10;
  if (sub_1CBF4DB28((uint64_t)a1, v10, (unsigned __int8 **)v4)) {
    return 0;
  }
  sub_1CBF4DD88(a1, (void *)a2);
  return 1;
}

uint64_t llvm::raw_std_ostream::write_impl(llvm::raw_std_ostream *this, const char *a2)
{
  return std::ostream::write();
}

uint64_t llvm::raw_std_ostream::current_pos(llvm::raw_std_ostream *this)
{
  return 0;
}

uint64_t llvm::AGX::CompileRequest::setModule(uint64_t this, llvm::Module *a2)
{
  *(void *)(*(void *)this + 8) = a2;
  return this;
}

uint64_t llvm::AGX::CompileRequest::getId(llvm::AGX::CompileRequest *this)
{
  return *(unsigned int *)(*(void *)this + 48);
}

uint64_t llvm::AGX::CompileRequest::getTelemetryCollector(llvm::AGX::CompileRequest *this)
{
  return *(void *)(*(void *)this + 56);
}

__n128 llvm::AGX::CompileReply::takeDiagnostics@<Q0>(llvm::AGX::CompileReply *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2 = *(void **)this;
  __n128 result = *(__n128 *)(*(void *)this + 24);
  *a2 = result;
  a2[1].n128_u64[0] = v2[5];
  v2[4] = 0;
  v2[5] = 0;
  v2[3] = 0;
  return result;
}

uint64_t *llvm::AGX::CompileReply::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = *a1;
  *a1 = v3;
  if (v4) {
    sub_1CBF4E82C((uint64_t)a1, v4);
  }
  return a1;
}

void llvm::AGX::TargetResolver::getTargetInfo(std::string *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = 0;
  while (1)
  {
    char v5 = (&off_1E674F928)[v4];
    std::string::size_type v6 = strlen(v5);
    std::string::__init(&v22, v5, v6);
    BOOL v7 = sub_1CBAD746C((unsigned __int8 *)a1, (unsigned __int8 *)&v22);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    {
      BOOL v20 = v7;
      operator delete(v22.__r_.__value_.__l.__data_);
      BOOL v7 = v20;
    }
    if (v7) {
      break;
    }
    v4 += 12;
    if (v4 == 132)
    {
      for (uint64_t i = 0; i != 480; i += 12)
      {
        unint64_t v9 = (&off_1E67B4C60)[i];
        std::string::size_type v10 = strlen(v9);
        std::string::__init(&v22, v9, v10);
        BOOL v11 = sub_1CBAD746C((unsigned __int8 *)a1, (unsigned __int8 *)&v22);
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        {
          BOOL v19 = v11;
          operator delete(v22.__r_.__value_.__l.__data_);
          BOOL v11 = v19;
        }
        if (v11)
        {
          *(unsigned char *)(a2 + 23) = 14;
          unint64_t v15 = "agx2-apple-ios";
          goto LABEL_18;
        }
      }
      uint64_t v12 = 0;
      while (1)
      {
        unint64_t v9 = (&off_1E6829A20)[v12];
        std::string::size_type v13 = strlen(v9);
        std::string::__init(&v22, v9, v13);
        BOOL v14 = sub_1CBAD746C((unsigned __int8 *)a1, (unsigned __int8 *)&v22);
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        {
          BOOL v21 = v14;
          operator delete(v22.__r_.__value_.__l.__data_);
          BOOL v14 = v21;
        }
        if (v14) {
          break;
        }
        v12 += 12;
        if (v12 == 252)
        {
          *(void *)(a2 + 64) = 0;
          *(_OWORD *)(a2 + 32) = 0u;
          *(_OWORD *)(a2 + 48) = 0u;
          *(_OWORD *)a2 = 0u;
          *(_OWORD *)(a2 + 16) = 0u;
          return;
        }
      }
      *(unsigned char *)(a2 + 23) = 14;
      unint64_t v15 = "agx3-apple-ios";
LABEL_18:
      *(void *)a2 = *(void *)v15;
      *(void *)(a2 + 6) = *(void *)(v15 + 6);
      *(unsigned char *)(a2 + 14) = 0;
      std::string::size_type v16 = strlen(v9);
      std::string::__init((std::string *)(a2 + 24), v9, v16);
      goto LABEL_19;
    }
  }
  *(unsigned char *)(a2 + 23) = 14;
  strcpy((char *)a2, "agx1-apple-ios");
  std::string::size_type v17 = strlen(v5);
  std::string::__init((std::string *)(a2 + 24), v5, v17);
  std::string::basic_string(&v22, a1, 0, 3uLL, (std::allocator<char> *)&v23);
  BOOL v18 = sub_1CBA86C10(&v22, "g4g");
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (!v18)
  {
LABEL_19:
    *(unsigned char *)(a2 + 71) = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return;
  }
  *(unsigned char *)(a2 + 71) = 12;
  strcpy((char *)(a2 + 48), "-dualphantom");
}

void llvm::AGX::TargetResolver::getTargetList(int64x2_t *a1@<X8>)
{
  uint64_t v3 = 0;
  a1->i64[0] = 0;
  a1->i64[1] = 0;
  a1[1].i64[0] = 0;
  do
  {
    std::string::size_type v4 = strlen((&off_1E674F928)[v3]);
    std::string::__init(&v21, (&off_1E674F928)[v3], v4);
    unint64_t v5 = a1->u64[1];
    if (v5 >= a1[1].i64[0])
    {
      BOOL v7 = sub_1CBF4ECB4(a1, (uint64_t)&v21);
      int v8 = SHIBYTE(v21.__r_.__value_.__r.__words[2]);
      a1->i64[1] = (uint64_t)v7;
      if (v8 < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v6 = *(_OWORD *)&v21.__r_.__value_.__l.__data_;
      *(void *)(v5 + 16) = *((void *)&v21.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v5 = v6;
      a1->i64[1] = v5 + 24;
    }
    v3 += 12;
  }
  while (v3 != 132);
  for (uint64_t i = 0; i != 480; i += 12)
  {
    std::string::size_type v10 = strlen((&off_1E67B4C60)[i]);
    std::string::__init(&v21, (&off_1E67B4C60)[i], v10);
    unint64_t v11 = a1->u64[1];
    if (v11 >= a1[1].i64[0])
    {
      std::string::size_type v13 = sub_1CBF4ECB4(a1, (uint64_t)&v21);
      int v14 = SHIBYTE(v21.__r_.__value_.__r.__words[2]);
      a1->i64[1] = (uint64_t)v13;
      if (v14 < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v12 = *(_OWORD *)&v21.__r_.__value_.__l.__data_;
      *(void *)(v11 + 16) = *((void *)&v21.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v11 = v12;
      a1->i64[1] = v11 + 24;
    }
  }
  for (uint64_t j = 0; j != 252; j += 12)
  {
    std::string::size_type v16 = strlen((&off_1E6829A20)[j]);
    std::string::__init(&v21, (&off_1E6829A20)[j], v16);
    unint64_t v17 = a1->u64[1];
    if (v17 >= a1[1].i64[0])
    {
      BOOL v19 = sub_1CBF4ECB4(a1, (uint64_t)&v21);
      int v20 = SHIBYTE(v21.__r_.__value_.__r.__words[2]);
      a1->i64[1] = (uint64_t)v19;
      if (v20 < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v18 = *(_OWORD *)&v21.__r_.__value_.__l.__data_;
      *(void *)(v17 + 16) = *((void *)&v21.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v17 = v18;
      a1->i64[1] = v17 + 24;
    }
  }
}

void llvm::AggressiveInstCombinePass::run()
{
}

void llvm::createAggressiveInstCombinerPass(llvm *this)
{
}

uint64_t sub_1CD4568F0(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a2 && *(unsigned char *)(a2 + 16) == 30)
  {
    if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) != 3) {
      return 0;
    }
    uint64_t result = sub_1CD456978(a1, *(void *)(a2 - 96));
    if (result)
    {
      uint64_t v5 = *(void *)(a2 - 32);
      if (v5)
      {
        if (*(void *)(a1 + 24) == v5)
        {
          uint64_t v6 = *(void *)(a2 - 64);
          if (v6) {
            return *(void *)(a1 + 32) == v6;
          }
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CD456978(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a2 && *(unsigned char *)(a2 + 16) == 81)
  {
    if (*(void *)(a1 + 8) == *(void *)(a2 - 64))
    {
      uint64_t result = sub_1CBF535C4(a1 + 16, *(llvm::Constant **)(a2 - 32));
      if (result)
      {
        **(_DWORD **)a1 = *(_WORD *)(a2 + 18) & 0x3F;
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CD4569EC(uint64_t a1, uint64_t *a2, llvm::APInt *a3)
{
  uint64_t v6 = *a2;
  uint64_t v5 = (const llvm::APInt *)(a2 + 1);
  *(void *)a1 = v6;
  BOOL v7 = (llvm::APInt *)(a1 + 8);
  unsigned int v8 = *((_DWORD *)a2 + 4);
  *(_DWORD *)(a1 + 16) = v8;
  if (v8 > 0x40) {
    llvm::APInt::initSlowCase(v7, v5);
  }
  *(void *)BOOL v7 = *(void *)v5;
  *(void *)(a1 + 24) = a2[3];
  unint64_t v9 = (llvm::APInt *)(a1 + 32);
  unsigned int v10 = *((_DWORD *)a3 + 2);
  *(_DWORD *)(a1 + 40) = v10;
  if (v10 > 0x40) {
    llvm::APInt::initSlowCase(v9, a3);
  }
  *(void *)unint64_t v9 = *(void *)a3;
  return a1;
}

uint64_t sub_1CD456A78(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 40) >= 0x41u)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    if (v2) {
      MEMORY[0x1D25D9CB0](v2, 0x1000C8000313F17);
    }
  }
  if (*(_DWORD *)(a1 + 16) >= 0x41u)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    if (v3) {
      MEMORY[0x1D25D9CB0](v3, 0x1000C8000313F17);
    }
  }
  return a1;
}

uint64_t sub_1CD456AEC(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = a2;
  uint64_t v6 = *a2;
  uint64_t v5 = (const llvm::APInt *)(a2 + 1);
  *(void *)a1 = v6;
  BOOL v7 = (llvm::APInt *)(a1 + 8);
  LODWORD(v3) = *((_DWORD *)v3 + 4);
  *(_DWORD *)(a1 + 16) = v3;
  if (v3 > 0x40) {
    llvm::APInt::initSlowCase(v7, v5);
  }
  *(void *)BOOL v7 = *(void *)v5;
  sub_1CD456B4C(a1 + 24, a3);
  return a1;
}

uint64_t sub_1CD456B4C(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  std::string::size_type v4 = (const llvm::APInt *)(a2 + 1);
  *(void *)a1 = v5;
  uint64_t v6 = (llvm::APInt *)(a1 + 8);
  unsigned int v7 = *((_DWORD *)a2 + 4);
  *(_DWORD *)(a1 + 16) = v7;
  if (v7 > 0x40) {
    llvm::APInt::initSlowCase(v6, v4);
  }
  *(void *)uint64_t v6 = *(void *)v4;
  unsigned int v8 = (llvm::APInt *)(a1 + 24);
  unint64_t v9 = (const llvm::APInt *)(a2 + 3);
  unsigned int v10 = *((_DWORD *)a2 + 8);
  *(_DWORD *)(a1 + 32) = v10;
  if (v10 > 0x40) {
    llvm::APInt::initSlowCase(v8, v9);
  }
  *(void *)unsigned int v8 = *(void *)v9;
  return a1;
}

uint64_t sub_1CD456BC4(uint64_t a1, void *a2, llvm::APInt *a3)
{
  uint64_t v3 = a2;
  uint64_t v6 = *a2;
  uint64_t v5 = (const llvm::APInt *)(a2 + 1);
  *(void *)a1 = v6;
  unsigned int v7 = (llvm::APInt *)(a1 + 8);
  LODWORD(v3) = *((_DWORD *)v3 + 4);
  *(_DWORD *)(a1 + 16) = v3;
  if (v3 > 0x40) {
    llvm::APInt::initSlowCase(v7, v5);
  }
  *(void *)unsigned int v7 = *(void *)v5;
  unsigned int v8 = (llvm::APInt *)(a1 + 24);
  unsigned int v9 = *((_DWORD *)a3 + 2);
  *(_DWORD *)(a1 + 32) = v9;
  if (v9 > 0x40) {
    llvm::APInt::initSlowCase(v8, a3);
  }
  *(void *)unsigned int v8 = *(void *)a3;
  return a1;
}

uint64_t sub_1CD456C40(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 32) >= 0x41u)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2) {
      MEMORY[0x1D25D9CB0](v2, 0x1000C8000313F17);
    }
  }
  if (*(_DWORD *)(a1 + 16) >= 0x41u)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    if (v3) {
      MEMORY[0x1D25D9CB0](v3, 0x1000C8000313F17);
    }
  }
  return a1;
}

void *sub_1CD456CB4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  MEMORY[0x1D25D9CD0](*a1, 8);
  return a1;
}

uint64_t sub_1CD456CF4(uint64_t a1, uint64_t *a2)
{
  uint64_t v15 = *a2;
  int v16 = 0;
  sub_1CD45714C((_DWORD *)a1, &v15, &v16, (uint64_t)&v13);
  uint64_t v4 = v13;
  if (v14)
  {
    uint64_t v5 = *a2;
    uint64_t v12 = 0;
    long long v11 = (unint64_t)v5;
    unint64_t v6 = *(void *)(a1 + 32);
    if (v6 >= *(void *)(a1 + 40))
    {
      unsigned int v7 = sub_1CBF56DE8((void **)(a1 + 24), (uint64_t)&v11);
    }
    else
    {
      *(_OWORD *)unint64_t v6 = v11;
      *(void *)(v6 + 16) = v12;
      unsigned int v7 = (char *)(v6 + 24);
    }
    *(void *)(a1 + 32) = v7;
    uint64_t v9 = *(void *)(a1 + 24);
    unsigned int v8 = -1431655765 * ((unint64_t)&v7[-v9] >> 3) - 1;
    *(_DWORD *)(v4 + 8) = v8;
  }
  else
  {
    unsigned int v8 = *(_DWORD *)(v13 + 8);
    uint64_t v9 = *(void *)(a1 + 24);
  }
  return v9 + 24 * v8 + 8;
}

uint64_t sub_1CD456DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = a2;
  if (sub_1CBA0E618(a1, &v8, &v7))
  {
    uint64_t v3 = v7;
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *(unsigned int *)(a1 + 16);
    uint64_t v3 = *(void *)a1 + 16 * v5;
  }
  if (v3 == v4 + 16 * v5) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1 + 24) + 24 * *(unsigned int *)(v3 + 8) + 8);
  }
}

void *sub_1CD456E50(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  uint64_t v8 = *a2;
  int v9 = 0;
  uint64_t result = sub_1CBF568F0((_DWORD *)a1, &v8, &v9, (uint64_t)&v10);
  if (v11)
  {
    unint64_t v7 = *(void *)(a1 + 32);
    *(_DWORD *)(v10 + 8) = -1431655765 * ((v7 - *(void *)(a1 + 24)) >> 3);
    if (v7 >= *(void *)(a1 + 40))
    {
      uint64_t result = sub_1CBF56CC0((void **)(a1 + 24), a2, a3);
    }
    else
    {
      *(void *)unint64_t v7 = *a2;
      *(_OWORD *)(v7 + 8) = *a3;
      uint64_t result = (void *)(v7 + 24);
    }
    *(void *)(a1 + 32) = result;
  }
  return result;
}

unsigned int *sub_1CD456F08(unsigned int *result, uint64_t a2, uint64_t *__src, uint64_t *a4)
{
  uint64_t v5 = __src;
  uint64_t v6 = *(void *)result;
  uint64_t v7 = result[2];
  if (*(void *)result + 8 * v7 == a2)
  {
    return sub_1CB935BDC(result, __src, a4);
  }
  else
  {
    uint64_t v8 = (a2 - v6) >> 3;
    unint64_t v9 = a4 - __src;
    if (v7 + v9 > result[3]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v10 = (void *)(v6 + 8 * v8);
    char v11 = (unsigned char *)(v6 + 8 * v7);
    unint64_t v12 = (v11 - (unsigned char *)v10) >> 3;
    if (v12 >= v9)
    {
      uint64_t result = (unsigned int *)sub_1CD4570C8((uint64_t)result, &v11[-8 * v9], (char *)(v6 + 8 * v7));
      if (&v11[-8 * v9] != (unsigned char *)v10) {
        uint64_t result = (unsigned int *)memmove(&v10[v9], v10, &v11[-8 * v9] - (unsigned char *)v10);
      }
      if (v5 != a4)
      {
        return (unsigned int *)memmove(v10, v5, (char *)a4 - (char *)v5);
      }
    }
    else
    {
      unsigned int v13 = v7 + ((unint64_t)((char *)a4 - (char *)__src) >> 3);
      result[2] = v13;
      if (v8 != v7)
      {
        uint64_t result = (unsigned int *)memcpy((void *)(v6 + 8 * v13 - 8 * v12), v10, v11 - (unsigned char *)v10);
        do
        {
          uint64_t v14 = *v5++;
          *v10++ = v14;
          --v12;
        }
        while (v12);
      }
      if (v5 != a4)
      {
        return (unsigned int *)memcpy(v11, v5, (char *)a4 - (char *)v5);
      }
    }
  }
  return result;
}

uint64_t sub_1CD4570C8(uint64_t result, char *a2, char *a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 + ((a3 - a2) >> 3) > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a3)
  {
    uint64_t v5 = (void *)(*(void *)result + 8 * v4);
    do
    {
      uint64_t v6 = *(void *)v3;
      v3 += 8;
      *v5++ = v6;
    }
    while (v3 != a3);
  }
  *(_DWORD *)(result + 8) = v4 + ((unint64_t)(a3 - a2) >> 3);
  return result;
}

uint64_t sub_1CD45714C@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v12 = 0;
  uint64_t result = sub_1CB883B0C((uint64_t)a1, a2, &v12);
  unint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CBF569E0(a1, (uint64_t)a2, a2, v12);
    unint64_t v9 = (void *)result;
    *(void *)uint64_t result = *a2;
    *(_DWORD *)(result + 8) = *a3;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a1 + 16 * a1[4];
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v11;
  *(unsigned char *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_1CD4571E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v5 = 0;
  if (!sub_1CBA0E618(a1, &v4, &v5) || v5 == *(void *)a1 + 16 * *(unsigned int *)(a1 + 16)) {
    return *(void *)(a1 + 32);
  }
  else {
    return *(void *)(a1 + 24) + 24 * *(unsigned int *)(v5 + 8);
  }
}

uint64_t sub_1CD45724C(int32x2_t *a1, void *a2)
{
  unint64_t v17 = 0;
  uint64_t result = sub_1CB883B0C((uint64_t)a1, a2, &v17);
  if (result)
  {
    *unint64_t v17 = -8192;
    a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  }
  uint64_t v5 = (void *)a1[4];
  uint64_t v6 = a2 + 3;
  if (a2 + 3 == v5)
  {
    a1[4] = (int32x2_t)a2;
  }
  else
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = &v6[v7];
      *(v8 - 3) = v6[v7];
      *((_OWORD *)v8 - 1) = *(_OWORD *)&v6[v7 + 1];
      v7 += 3;
    }
    while (v8 + 3 != v5);
    a1[4] = (int32x2_t)&a2[v7];
    if (v7 * 8)
    {
      uint64_t v9 = a1[2].u32[0];
      uint64_t v10 = *(void *)a1 + 16 * v9;
      if (a1[1].i32[0])
      {
        if (v9)
        {
          uint64_t v11 = 16 * v9;
          uint64_t v12 = (uint64_t)*a1;
          while ((*(void *)v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v12 += 16;
            v11 -= 16;
            if (!v11) {
              goto LABEL_12;
            }
          }
        }
        else
        {
          uint64_t v12 = (uint64_t)*a1;
        }
      }
      else
      {
LABEL_12:
        uint64_t v12 = *(void *)a1 + 16 * v9;
      }
      uint64_t v13 = *(void *)a1 + 16 * v9;
      if (v12 != v13)
      {
        unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - *(void *)&a1[3]) >> 3);
        do
        {
          unint64_t v15 = *(unsigned int *)(v12 + 8);
          if (v14 < v15) {
            *(_DWORD *)(v12 + 8) = v15 - 1;
          }
          uint64_t v16 = v12 + 16;
          uint64_t v12 = v10;
          if (v16 != v10)
          {
            uint64_t v12 = v16;
            while ((*(void *)v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v12 += 16;
              if (v12 == v10)
              {
                uint64_t v12 = v10;
                break;
              }
            }
          }
        }
        while (v12 != v13);
      }
    }
  }
  return result;
}

uint64_t llvm::AAResults::getArgModRefInfo(llvm::AAResults *this, const llvm::CallBase *a2, uint64_t a3)
{
  uint64_t v3 = (void *)*((void *)this + 1);
  uint64_t v4 = (void *)*((void *)this + 2);
  if (v3 == v4) {
    return 7;
  }
  LODWORD(v7) = 7;
  while (1)
  {
    uint64_t v7 = (*(unsigned int (**)(void, const llvm::CallBase *, uint64_t))(*(void *)*v3 + 40))(*v3, a2, a3) & v7;
    if ((v7 & 3) == 0) {
      break;
    }
    if (++v3 == v4) {
      return v7;
    }
  }
  return 4;
}

llvm::raw_ostream *llvm::operator<<(llvm::raw_ostream *a1, int a2)
{
  uint64_t v3 = a1;
  switch((char)a2)
  {
    case 0:
      uint64_t v4 = "NoAlias";
      goto LABEL_7;
    case 1:
      uint64_t v4 = "MayAlias";
      goto LABEL_7;
    case 2:
      sub_1CB8E509C(a1, "PartialAlias");
      if ((a2 & 0x100) == 0) {
        return v3;
      }
      uint64_t v5 = sub_1CB8E509C(v3, " (off ");
      a1 = llvm::raw_ostream::operator<<(v5, (uint64_t)a2 >> 9);
      uint64_t v4 = ")";
LABEL_7:
      sub_1CB8E509C(a1, v4);
      return v3;
    case 3:
      uint64_t v4 = "MustAlias";
      goto LABEL_7;
    default:
      return v3;
  }
}

{
  return sub_1CB8E509C(a1, off_1E684AA88[a2]);
}

uint64_t llvm::AAResults::getModRefInfo(llvm::AAResults *this, const llvm::StoreInst *a2, const llvm::MemoryLocation *a3)
{
  v11[18] = *MEMORY[0x1E4F143B8];
  v8[0] = 1;
  uint64_t v3 = 1;
  do
  {
    uint64_t v4 = &v8[v3];
    *(_OWORD *)uint64_t v4 = xmmword_1CFAC3060;
    *((_OWORD *)v4 + 1) = xmmword_1CFAC3060;
    v3 += 5;
  }
  while (v4 + 5 != v9);
  v9[0] = v11;
  v9[1] = 0;
  void v9[2] = &v10;
  v9[3] = 0x400000000;
  v11[0] = &unk_1F2600DB8;
  v11[1] = 1;
  for (uint64_t i = 63; i != 79; i += 2)
    v8[i] = -4096;
  uint64_t ModRefInfo = llvm::AAResults::getModRefInfo((uint64_t)this, (uint64_t)a2, a3, (uint64_t)v8);
  sub_1CBF5BB50((uint64_t)v8);
  return ModRefInfo;
}

llvm::ExternalAAWrapperPass *llvm::ExternalAAWrapperPass::ExternalAAWrapperPass(llvm::ExternalAAWrapperPass *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = &llvm::ExternalAAWrapperPass::ID;
  *((_DWORD *)this + 6) = 4;
  *(void *)this = &unk_1F2600640;
  *((void *)this + 7) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC3030, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CBF5A408;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCC3030, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return this;
}

uint64_t llvm::ExternalAAWrapperPass::ExternalAAWrapperPass(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &llvm::ExternalAAWrapperPass::ID;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F2600640;
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 56) = a1 + 32;
      a1 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1 + 32);
    }
    else
    {
      *(void *)(a1 + 56) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 56) = 0;
  }
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC3030, memory_order_acquire) != -1)
  {
    v7[0] = sub_1CBF5A408;
    v7[1] = &PassRegistry;
    uint64_t v6 = v7;
    std::__call_once(&qword_1EBCC3030, &v6, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return v2;
}

void llvm::createExternalAAWrapperPass()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

llvm::AAResultsWrapperPass *llvm::AAResultsWrapperPass::AAResultsWrapperPass(llvm::AAResultsWrapperPass *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = &llvm::AAResultsWrapperPass::ID;
  *((_DWORD *)this + 6) = 2;
  *(void *)this = &unk_1F26006E8;
  *((void *)this + 4) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC3038, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CBF5A4AC;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCC3038, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return this;
}

void llvm::initializeAAResultsWrapperPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC3038, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CBF5A4AC;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCC3038, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD457A34()
{
}

void sub_1CD457AC4()
{
}

void sub_1CD457B54()
{
}

void sub_1CD457BE4()
{
}

void llvm::AAResultsWrapperPass::getAnalysisUsage(llvm::AAResultsWrapperPass *this, llvm::AnalysisUsage *a2)
{
  *((unsigned char *)a2 + 160) = 1;
  llvm::AnalysisUsage::addRequiredTransitiveID(a2, llvm::BasicAAWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredTransitiveID(a2, llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1CB843600((uint64_t)a2, (uint64_t)a2 + 144, (uint64_t)&llvm::GPUAAWrapperPass::ID);
  sub_1CB843600((uint64_t)a2, (uint64_t)a2 + 144, (uint64_t)&llvm::ScopedNoAliasAAWrapperPass::ID);
  sub_1CB843600((uint64_t)a2, (uint64_t)a2 + 144, (uint64_t)&llvm::TypeBasedAAWrapperPass::ID);
  sub_1CB843600((uint64_t)a2, (uint64_t)a2 + 144, (uint64_t)&llvm::objcarc::ObjCARCAAWrapperPass::ID);
  sub_1CB843600((uint64_t)a2, (uint64_t)a2 + 144, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  sub_1CB843600((uint64_t)a2, (uint64_t)a2 + 144, (uint64_t)&llvm::SCEVAAWrapperPass::ID);
  sub_1CB843600((uint64_t)a2, (uint64_t)a2 + 144, (uint64_t)&llvm::CFLAndersAAWrapperPass::ID);
  sub_1CB843600((uint64_t)a2, (uint64_t)a2 + 144, (uint64_t)&llvm::CFLSteensAAWrapperPass::ID);

  sub_1CB843600((uint64_t)a2, (uint64_t)a2 + 144, (uint64_t)&llvm::ExternalAAWrapperPass::ID);
}

void llvm::getAAResultsAnalysisUsage(llvm *this, llvm::AnalysisUsage *a2)
{
  llvm::AnalysisUsage::addRequiredID(this, llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 144, (uint64_t)&llvm::ScopedNoAliasAAWrapperPass::ID);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 144, (uint64_t)&llvm::TypeBasedAAWrapperPass::ID);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 144, (uint64_t)&llvm::objcarc::ObjCARCAAWrapperPass::ID);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 144, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 144, (uint64_t)&llvm::CFLAndersAAWrapperPass::ID);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 144, (uint64_t)&llvm::CFLSteensAAWrapperPass::ID);

  sub_1CB843600((uint64_t)this, (uint64_t)this + 144, (uint64_t)&llvm::ExternalAAWrapperPass::ID);
}

void sub_1CD457E4C(llvm::Pass *a1)
{
  sub_1CD457F90(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD457E84(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

BOOL sub_1CD457E90(uint64_t a1, unsigned int a2, int a3)
{
  BundleOpInfoForOperand = (unsigned int *)llvm::CallBase::getBundleOpInfoForOperand((char *)a1, a2);
  return !*(_DWORD *)(*(void *)BundleOpInfoForOperand + 8)
      && (a3 == 45 || a3 == 22)
      && *(unsigned char *)(**(void **)(a1
                                - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)
                                + 32 * BundleOpInfoForOperand[2]
                                + 32 * (a2 - BundleOpInfoForOperand[2]))
                  + 8) == 15;
}

void llvm::callDefaultCtor<llvm::ExternalAAWrapperPass>()
{
}

void llvm::callDefaultCtor<llvm::AAResultsWrapperPass>()
{
}

void sub_1CD457F90(llvm::Pass *this)
{
  *(void *)this = &unk_1F26006E8;
  uint64_t v2 = (llvm::AAResults *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2)
  {
    llvm::AAResults::~AAResults(v2);
    MEMORY[0x1D25D9CE0]();
  }

  llvm::Pass::~Pass(this);
}

void sub_1CD458004(_WORD *a1, char **a2)
{
  uint64_t v4 = sub_1CB883A14((uint64_t)&llvm::DisableBasicAA, 0, 0);
  byte_1EBD026F0 = 0;
  qword_1EBD026F8 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBD02700 = 0;
  llvm::DisableBasicAA = (uint64_t)&unk_1F26440A0;
  qword_1EBD02708 = (uint64_t)&unk_1F2643CC0;
  qword_1EBD02710 = (uint64_t)&unk_1F25EDE78;
  qword_1EBD02728 = (uint64_t)&qword_1EBD02710;
  llvm::cl::Option::setArgStr(v4, "disable-basic-aa", 0x10uLL);
  word_1EBD0267A = (32 * (*a1 & 3)) | word_1EBD0267A & 0xFF9F;
  uint64_t v5 = *a2;
  byte_1EBD026F0 = **a2;
  byte_1EBD02701 = 1;
  byte_1EBD02700 = *v5;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::DisableBasicAA);
}

void sub_1CD458134()
{
}

uint64_t sub_1CD458148(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

uint64_t sub_1CD458154(uint64_t a1, llvm::Value **a2, llvm::Value **a3)
{
  return llvm::objcarc::ObjCARCAAResult::alias(*(void *)(a1 + 8), a2, a3);
}

uint64_t sub_1CD45815C(uint64_t a1, llvm::Value **a2)
{
  return llvm::objcarc::ObjCARCAAResult::pointsToConstantMemory(*(void *)(a1 + 8), a2);
}

uint64_t sub_1CD458164()
{
  return 7;
}

uint64_t sub_1CD45816C()
{
  return 63;
}

uint64_t sub_1CD458174(uint64_t a1, const llvm::Function *a2)
{
  return llvm::objcarc::ObjCARCAAResult::getModRefBehavior(*(llvm::objcarc::ObjCARCAAResult **)(a1 + 8), a2);
}

uint64_t sub_1CD45817C(uint64_t a1, const llvm::Function *a2)
{
  return llvm::objcarc::ObjCARCAAResult::getModRefInfo(*(void *)(a1 + 8), a2);
}

uint64_t sub_1CD458184()
{
  return 7;
}

void sub_1CD458194()
{
}

uint64_t sub_1CD4581A8(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

uint64_t sub_1CD4581B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return llvm::SCEVAAResult::alias(*(void *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1CD4581BC()
{
  return 0;
}

uint64_t sub_1CD4581C4()
{
  return 7;
}

uint64_t sub_1CD4581CC()
{
  return 63;
}

uint64_t sub_1CD4581D4()
{
  return 63;
}

uint64_t sub_1CD4581DC()
{
  return 7;
}

uint64_t sub_1CD4581E4()
{
  return 7;
}

void sub_1CD4581F0()
{
}

uint64_t sub_1CD458204(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

uint64_t sub_1CD458210(uint64_t a1, const llvm::MemoryLocation *a2, const llvm::MemoryLocation *a3)
{
  return llvm::CFLAndersAAResult::alias(*(llvm::CFLAndersAAResult **)(a1 + 8), a2, a3);
}

uint64_t sub_1CD458218()
{
  return 0;
}

uint64_t sub_1CD458220()
{
  return 7;
}

uint64_t sub_1CD458228()
{
  return 63;
}

uint64_t sub_1CD458230()
{
  return 63;
}

uint64_t sub_1CD458238()
{
  return 7;
}

uint64_t sub_1CD458240()
{
  return 7;
}

void sub_1CD45824C()
{
}

uint64_t sub_1CD458260(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = a2;
  return result;
}

uint64_t sub_1CD45826C(uint64_t a1, const llvm::MemoryLocation *a2, const llvm::MemoryLocation *a3)
{
  if (*(void *)a2 == *(void *)a3) {
    return 3;
  }
  uint64_t v3 = *(llvm::CFLSteensAAResult **)(a1 + 8);
  if (*(unsigned __int8 *)(*(void *)a2 + 16) <= 0x14u && *(unsigned __int8 *)(*(void *)a3 + 16) < 0x15u) {
    return 1;
  }
  LODWORD(result) = llvm::CFLSteensAAResult::query(v3, a2, a3);
  if (result == 1) {
    return 1;
  }
  else {
    return result;
  }
}

uint64_t sub_1CD4582CC()
{
  return 0;
}

uint64_t sub_1CD4582D4()
{
  return 7;
}

uint64_t sub_1CD4582DC()
{
  return 63;
}

uint64_t sub_1CD4582E4()
{
  return 63;
}

uint64_t sub_1CD4582EC()
{
  return 7;
}

uint64_t sub_1CD4582F4()
{
  return 7;
}

void llvm::AAEvaluator::run()
{
}

void llvm::AAEvaluator::~AAEvaluator(llvm::AAEvaluator *this)
{
  if (*(void *)this)
  {
    uint64_t v2 = vaddvq_s64(vaddq_s64(*(int64x2_t *)((char *)this + 8), *(int64x2_t *)((char *)this + 24)));
    uint64_t v3 = (llvm::raw_ostream *)llvm::errs(this);
    uint64_t v4 = sub_1CB8E509C(v3, "===== Alias Analysis Evaluator Report =====\n");
    uint64_t v5 = (llvm::raw_ostream *)llvm::errs(v4);
    if (v2)
    {
      uint64_t v6 = sub_1CB8E509C(v5, "  ");
      uint64_t v7 = llvm::raw_ostream::operator<<(v6, v2);
      uint64_t v8 = sub_1CB8E509C(v7, " Total Alias Queries Performed\n");
      uint64_t v9 = (llvm::raw_ostream *)llvm::errs(v8);
      uint64_t v10 = sub_1CB8E509C(v9, "  ");
      uint64_t v11 = llvm::raw_ostream::operator<<(v10, *((void *)this + 1));
      sub_1CB8E509C(v11, " no alias responses ");
      uint64_t v12 = sub_1CBF5F8C4(*((llvm **)this + 1), v2);
      uint64_t v13 = (llvm::raw_ostream *)llvm::errs(v12);
      unint64_t v14 = sub_1CB8E509C(v13, "  ");
      unint64_t v15 = llvm::raw_ostream::operator<<(v14, *((void *)this + 2));
      sub_1CB8E509C(v15, " may alias responses ");
      uint64_t v16 = sub_1CBF5F8C4(*((llvm **)this + 2), v2);
      unint64_t v17 = (llvm::raw_ostream *)llvm::errs(v16);
      long long v18 = sub_1CB8E509C(v17, "  ");
      BOOL v19 = llvm::raw_ostream::operator<<(v18, *((void *)this + 3));
      sub_1CB8E509C(v19, " partial alias responses ");
      int v20 = sub_1CBF5F8C4(*((llvm **)this + 3), v2);
      std::string v21 = (llvm::raw_ostream *)llvm::errs(v20);
      std::string v22 = sub_1CB8E509C(v21, "  ");
      char v23 = llvm::raw_ostream::operator<<(v22, *((void *)this + 4));
      sub_1CB8E509C(v23, " must alias responses ");
      std::string v24 = sub_1CBF5F8C4(*((llvm **)this + 4), v2);
      char v25 = (llvm::raw_ostream *)llvm::errs(v24);
      char v26 = sub_1CB8E509C(v25, "  Alias Analysis Evaluator Pointer Alias Summary: ");
      uint64_t v27 = llvm::raw_ostream::operator<<(v26, 100 * *((void *)this + 1) / v2);
      BOOL v28 = sub_1CB8E509C(v27, "%/");
      BOOL v29 = llvm::raw_ostream::operator<<(v28, 100 * *((void *)this + 2) / v2);
      uint64_t v30 = sub_1CB8E509C(v29, "%/");
      uint64_t v31 = llvm::raw_ostream::operator<<(v30, 100 * *((void *)this + 3) / v2);
      uint64_t v32 = sub_1CB8E509C(v31, "%/");
      uint64_t v5 = llvm::raw_ostream::operator<<(v32, 100 * *((void *)this + 4) / v2);
      size_t v33 = "%\n";
    }
    else
    {
      size_t v33 = "  Alias Analysis Evaluator Summary: No pointers!\n";
    }
    uint64_t v34 = sub_1CB8E509C(v5, v33);
    uint64_t v35 = vaddvq_s64(vaddq_s64(vaddq_s64(*(int64x2_t *)((char *)this + 40), *(int64x2_t *)((char *)this + 72)), vaddq_s64(*(int64x2_t *)((char *)this + 56), *(int64x2_t *)((char *)this + 88))));
    uint64_t v36 = (llvm::raw_ostream *)llvm::errs(v34);
    if (v35)
    {
      uint64_t v37 = sub_1CB8E509C(v36, "  ");
      int v38 = llvm::raw_ostream::operator<<(v37, v35);
      int v39 = sub_1CB8E509C(v38, " Total ModRef Queries Performed\n");
      int v40 = (llvm::raw_ostream *)llvm::errs(v39);
      int v41 = sub_1CB8E509C(v40, "  ");
      unsigned int v42 = llvm::raw_ostream::operator<<(v41, *((void *)this + 5));
      sub_1CB8E509C(v42, " no mod/ref responses ");
      uint64_t v43 = sub_1CBF5F8C4(*((llvm **)this + 5), v35);
      int v44 = (llvm::raw_ostream *)llvm::errs(v43);
      int v45 = sub_1CB8E509C(v44, "  ");
      int v46 = llvm::raw_ostream::operator<<(v45, *((void *)this + 6));
      sub_1CB8E509C(v46, " mod responses ");
      unsigned int v47 = sub_1CBF5F8C4(*((llvm **)this + 6), v35);
      unsigned int v48 = (llvm::raw_ostream *)llvm::errs(v47);
      unsigned int v49 = sub_1CB8E509C(v48, "  ");
      uint64_t v50 = llvm::raw_ostream::operator<<(v49, *((void *)this + 7));
      sub_1CB8E509C(v50, " ref responses ");
      unsigned int v51 = sub_1CBF5F8C4(*((llvm **)this + 7), v35);
      unsigned int v52 = (llvm::raw_ostream *)llvm::errs(v51);
      unsigned int v53 = sub_1CB8E509C(v52, "  ");
      size_t v54 = llvm::raw_ostream::operator<<(v53, *((void *)this + 8));
      sub_1CB8E509C(v54, " mod & ref responses ");
      uint64_t v55 = sub_1CBF5F8C4(*((llvm **)this + 8), v35);
      uint64_t v56 = (llvm::raw_ostream *)llvm::errs(v55);
      int v57 = sub_1CB8E509C(v56, "  ");
      uint64_t v58 = llvm::raw_ostream::operator<<(v57, *((void *)this + 9));
      sub_1CB8E509C(v58, " must responses ");
      unint64_t v59 = sub_1CBF5F8C4(*((llvm **)this + 9), v35);
      uint64_t v60 = (llvm::raw_ostream *)llvm::errs(v59);
      unint64_t v61 = sub_1CB8E509C(v60, "  ");
      uint64_t v62 = llvm::raw_ostream::operator<<(v61, *((void *)this + 11));
      sub_1CB8E509C(v62, " must mod responses ");
      int v63 = sub_1CBF5F8C4(*((llvm **)this + 11), v35);
      int v64 = (llvm::raw_ostream *)llvm::errs(v63);
      size_t v65 = sub_1CB8E509C(v64, "  ");
      int v66 = llvm::raw_ostream::operator<<(v65, *((void *)this + 10));
      sub_1CB8E509C(v66, " must ref responses ");
      uint64_t v67 = sub_1CBF5F8C4(*((llvm **)this + 10), v35);
      int v68 = (llvm::raw_ostream *)llvm::errs(v67);
      unsigned int v69 = sub_1CB8E509C(v68, "  ");
      long long v70 = llvm::raw_ostream::operator<<(v69, *((void *)this + 12));
      sub_1CB8E509C(v70, " must mod & ref responses ");
      uint64_t v71 = sub_1CBF5F8C4(*((llvm **)this + 12), v35);
      int v72 = (llvm::raw_ostream *)llvm::errs(v71);
      unsigned int v73 = sub_1CB8E509C(v72, "  Alias Analysis Evaluator Mod/Ref Summary: ");
      uint64_t v74 = llvm::raw_ostream::operator<<(v73, 100 * *((void *)this + 5) / v35);
      uint64_t v75 = sub_1CB8E509C(v74, "%/");
      unsigned __int8 v76 = llvm::raw_ostream::operator<<(v75, 100 * *((void *)this + 6) / v35);
      long long v77 = sub_1CB8E509C(v76, "%/");
      char v78 = llvm::raw_ostream::operator<<(v77, 100 * *((void *)this + 7) / v35);
      BOOL v79 = sub_1CB8E509C(v78, "%/");
      long long v80 = llvm::raw_ostream::operator<<(v79, 100 * *((void *)this + 8) / v35);
      size_t v81 = sub_1CB8E509C(v80, "%/");
      size_t v82 = llvm::raw_ostream::operator<<(v81, 100 * *((void *)this + 9) / v35);
      long long v83 = sub_1CB8E509C(v82, "%/");
      uint64_t v84 = llvm::raw_ostream::operator<<(v83, 100 * *((void *)this + 10) / v35);
      uint64_t v85 = sub_1CB8E509C(v84, "%/");
      uint64_t v86 = llvm::raw_ostream::operator<<(v85, 100 * *((void *)this + 11) / v35);
      uint64_t v87 = sub_1CB8E509C(v86, "%/");
      uint64_t v36 = llvm::raw_ostream::operator<<(v87, 100 * *((void *)this + 12) / v35);
      uint64_t v88 = "%\n";
    }
    else
    {
      uint64_t v88 = "  Alias Analysis Mod/Ref Evaluator Summary: no mod/ref!\n";
    }
    sub_1CB8E509C(v36, v88);
  }
}

void llvm::createAAEvalPass(llvm *this)
{
}

void llvm::callDefaultCtor<llvm::AAEvalLegacyPass>()
{
}

uint64_t sub_1CD458864(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &llvm::AAEvalLegacyPass::ID;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2600A88;
  *(void *)(a1 + 32) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC3040, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CBF5FA50;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCC3040, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CD458920(llvm::Pass *a1)
{
  sub_1CD458AF0(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD458958()
{
}

uint64_t sub_1CD4589D4(uint64_t a1)
{
  uint64_t v2 = *(llvm::AAEvaluator **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2)
  {
    llvm::AAEvaluator::~AAEvaluator(v2);
    MEMORY[0x1D25D9CE0]();
  }
  return 0;
}

llvm::AnalysisUsage *sub_1CD458A18(int a1, llvm::AnalysisUsage *this)
{
  uint64_t result = llvm::AnalysisUsage::addRequiredID(this, llvm::AAResultsWrapperPass::ID);
  *((unsigned char *)this + 160) = 1;
  return result;
}

uint64_t sub_1CD458A50(uint64_t a1, llvm::Function *a2)
{
  uint64_t v3 = *(llvm::AAEvaluator **)(a1 + 32);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(char **)v5 != llvm::AAResultsWrapperPass::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v7 + 96))(v7, llvm::AAResultsWrapperPass::ID);
  llvm::AAEvaluator::runInternal(v3, a2, *(llvm::AAResults **)(v8 + 32));
  return 0;
}

void sub_1CD458AF0(llvm::Pass *this)
{
  *(void *)this = &unk_1F2600A88;
  uint64_t v2 = (llvm::AAEvaluator *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2)
  {
    llvm::AAEvaluator::~AAEvaluator(v2);
    MEMORY[0x1D25D9CE0]();
  }

  llvm::Pass::~Pass(this);
}

void sub_1CD458B68(_WORD *a1)
{
  uint64_t v2 = sub_1CB883A14((uint64_t)&qword_1EBCC3048, 0, 0);
  byte_1EBCC30C8 = 0;
  qword_1EBCC30D0 = (uint64_t)&unk_1F25EDE58;
  unk_1EBCC30D8 = 0;
  qword_1EBCC3048 = (uint64_t)&unk_1F26440A0;
  qword_1EBCC30E0 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCC30E8 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCC3100 = (uint64_t)&qword_1EBCC30E8;
  llvm::cl::Option::setArgStr(v2, "print-all-alias-modref-info", 0x1BuLL);
  word_1EBCC3052 = (32 * (*a1 & 3)) | word_1EBCC3052 & 0xFF9F;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCC3048);
}

llvm::cl::Option *sub_1CD458C60(llvm::cl::Option *a1, char *a2, _WORD *a3)
{
  uint64_t v6 = sub_1CB883A14((uint64_t)a1, 0, 0);
  *(unsigned char *)(v6 + 128) = 0;
  *(void *)(v6 + 136) = &unk_1F25EDE58;
  *(void *)(v6 + 144) = 0;
  *(void *)uint64_t v6 = &unk_1F26440A0;
  *(void *)(v6 + 152) = &unk_1F2643CC0;
  *(void *)(v6 + 160) = &unk_1F25EDE78;
  *(void *)(v6 + 184) = v6 + 160;
  size_t v7 = strlen(a2);
  llvm::cl::Option::setArgStr((uint64_t)a1, (unsigned __int8 *)a2, v7);
  *((_WORD *)a1 + 5) = (32 * (*a3 & 3)) | *((_WORD *)a1 + 5) & 0xFF9F;
  llvm::cl::Option::addArgument(a1);
  return a1;
}

void sub_1CD458D5C(_WORD *a1)
{
  uint64_t v2 = sub_1CB883A14((uint64_t)&qword_1EBCC31C8, 0, 0);
  byte_1EBCC3248 = 0;
  qword_1EBCC3250 = (uint64_t)&unk_1F25EDE58;
  unk_1EBCC3258 = 0;
  qword_1EBCC31C8 = (uint64_t)&unk_1F26440A0;
  qword_1EBCC3260 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCC3268 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCC3280 = (uint64_t)&qword_1EBCC3268;
  llvm::cl::Option::setArgStr(v2, "print-may-aliases", 0x11uLL);
  word_1EBCC31D2 = (32 * (*a1 & 3)) | word_1EBCC31D2 & 0xFF9F;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCC31C8);
}

void sub_1CD458E54(_WORD *a1)
{
  uint64_t v2 = sub_1CB883A14((uint64_t)&qword_1EBCC3288, 0, 0);
  byte_1EBCC3308 = 0;
  qword_1EBCC3310 = (uint64_t)&unk_1F25EDE58;
  unk_1EBCC3318 = 0;
  qword_1EBCC3288 = (uint64_t)&unk_1F26440A0;
  qword_1EBCC3320 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCC3328 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCC3340 = (uint64_t)&qword_1EBCC3328;
  llvm::cl::Option::setArgStr(v2, "print-partial-aliases", 0x15uLL);
  word_1EBCC3292 = (32 * (*a1 & 3)) | word_1EBCC3292 & 0xFF9F;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCC3288);
}

void sub_1CD458F4C(_WORD *a1)
{
  uint64_t v2 = sub_1CB883A14((uint64_t)&qword_1EBCC3348, 0, 0);
  byte_1EBCC33C8 = 0;
  qword_1EBCC33D0 = (uint64_t)&unk_1F25EDE58;
  unk_1EBCC33D8 = 0;
  qword_1EBCC3348 = (uint64_t)&unk_1F26440A0;
  qword_1EBCC33E0 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCC33E8 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCC3400 = (uint64_t)&qword_1EBCC33E8;
  llvm::cl::Option::setArgStr(v2, "print-must-aliases", 0x12uLL);
  word_1EBCC3352 = (32 * (*a1 & 3)) | word_1EBCC3352 & 0xFF9F;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCC3348);
}

void sub_1CD459044(_WORD *a1)
{
  uint64_t v2 = sub_1CB883A14((uint64_t)&qword_1EBCC3408, 0, 0);
  byte_1EBCC3488 = 0;
  qword_1EBCC3490 = (uint64_t)&unk_1F25EDE58;
  unk_1EBCC3498 = 0;
  qword_1EBCC3408 = (uint64_t)&unk_1F26440A0;
  qword_1EBCC34A0 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCC34A8 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCC34C0 = (uint64_t)&qword_1EBCC34A8;
  llvm::cl::Option::setArgStr(v2, "print-no-modref", 0xFuLL);
  word_1EBCC3412 = (32 * (*a1 & 3)) | word_1EBCC3412 & 0xFF9F;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCC3408);
}

void sub_1CD45913C(_WORD *a1)
{
  uint64_t v2 = sub_1CB883A14((uint64_t)&qword_1EBCC3648, 0, 0);
  byte_1EBCC36C8 = 0;
  qword_1EBCC36D0 = (uint64_t)&unk_1F25EDE58;
  unk_1EBCC36D8 = 0;
  qword_1EBCC3648 = (uint64_t)&unk_1F26440A0;
  qword_1EBCC36E0 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCC36E8 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCC3700 = (uint64_t)&qword_1EBCC36E8;
  llvm::cl::Option::setArgStr(v2, "print-modref", 0xCuLL);
  word_1EBCC3652 = (32 * (*a1 & 3)) | word_1EBCC3652 & 0xFF9F;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCC3648);
}

void sub_1CD459234(_WORD *a1)
{
  uint64_t v2 = sub_1CB883A14((uint64_t)&qword_1EBCC3708, 0, 0);
  byte_1EBCC3788 = 0;
  qword_1EBCC3790 = (uint64_t)&unk_1F25EDE58;
  unk_1EBCC3798 = 0;
  qword_1EBCC3708 = (uint64_t)&unk_1F26440A0;
  qword_1EBCC37A0 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCC37A8 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCC37C0 = (uint64_t)&qword_1EBCC37A8;
  llvm::cl::Option::setArgStr(v2, "print-must", 0xAuLL);
  word_1EBCC3712 = (32 * (*a1 & 3)) | word_1EBCC3712 & 0xFF9F;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCC3708);
}

void sub_1CD45932C(_WORD *a1)
{
  uint64_t v2 = sub_1CB883A14((uint64_t)&qword_1EBCC3A08, 0, 0);
  byte_1EBCC3A88 = 0;
  qword_1EBCC3A90 = (uint64_t)&unk_1F25EDE58;
  unk_1EBCC3A98 = 0;
  qword_1EBCC3A08 = (uint64_t)&unk_1F26440A0;
  qword_1EBCC3AA0 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCC3AA8 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCC3AC0 = (uint64_t)&qword_1EBCC3AA8;
  llvm::cl::Option::setArgStr(v2, "evaluate-aa-metadata", 0x14uLL);
  word_1EBCC3A12 = (32 * (*a1 & 3)) | word_1EBCC3A12 & 0xFF9F;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCC3A08);
}

uint64_t sub_1CD459424(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v10 = 0;
  uint64_t result = sub_1CD4594B8(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, a3[1], &v10);
  size_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD4595A0(a2, a3, v10);
    size_t v7 = (void *)result;
    *(_OWORD *)uint64_t result = *(_OWORD *)a3;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_1CD4594B8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    unint64_t v5 = ((a4 >> 4) ^ (a4 >> 9) | ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32))
       + ~((unint64_t)((a4 >> 4) ^ (a4 >> 9)) << 32);
    unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    int v8 = a2 - 1;
    unsigned int v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27)));
    uint64_t v10 = (void *)(a1 + 16 * v9);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    if (*v10 == a3 && v12 == a4)
    {
      uint64_t v14 = 1;
    }
    else
    {
      uint64_t v16 = 0;
      int v17 = 1;
      while (v11 != -4096 || v12 != -4096)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v12 == -8192;
        }
        if (v18 && v11 == -8192) {
          uint64_t v16 = v10;
        }
        unsigned int v20 = v9 + v17++;
        unsigned int v9 = v20 & v8;
        uint64_t v10 = (void *)(a1 + 16 * (v20 & v8));
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        uint64_t v14 = 1;
        if (*v10 == a3 && v12 == a4) {
          goto LABEL_8;
        }
      }
      uint64_t v14 = 0;
      if (v16) {
        uint64_t v10 = v16;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v14 = 0;
  }
LABEL_8:
  *a5 = v10;
  return v14;
}

void *sub_1CD4595A0(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_8;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_8:
    sub_1CD459660(a1, v6);
    int v8 = 0;
    sub_1CD4594B8(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v8);
    a3 = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096 || a3[1] != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void sub_1CD459660(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  unsigned int v9 = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = v9;
  if (v4)
  {
    sub_1CD459744(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    memset_pattern16(v9, &unk_1CFAC3070, 16 * v10);
  }
}

void sub_1CD459744(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6) {
    memset_pattern16(*(void **)a1, &unk_1CFAC3070, 16 * v6);
  }
  while (a2 != a3)
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    if ((*a2 != -4096 || v8 != -4096) && (v7 != -8192 || v8 != -8192))
    {
      uint64_t v10 = 0;
      sub_1CD4594B8(*(void *)a1, *(_DWORD *)(a1 + 16), v7, v8, &v10);
      unsigned int v9 = v10;
      *uint64_t v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(a1 + 8);
    }
    a2 += 2;
  }
}

uint64_t sub_1CD459808(uint64_t result, void *a2, void *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    uint64_t v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v9 = 0;
      uint64_t result = sub_1CBF5FB7C((uint64_t *)v5, a2, &v9);
      *unsigned int v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::cflaa::getAttrUnknown(llvm::cflaa *this)
{
  return 2;
}

uint64_t llvm::cflaa::getAttrCaller(llvm::cflaa *this)
{
  return 8;
}

BOOL llvm::cflaa::hasUnknownOrCallerAttr(char a1)
{
  return (a1 & 0xA) != 0;
}

uint64_t llvm::cflaa::getAttrEscaped(llvm::cflaa *this)
{
  return 1;
}

uint64_t llvm::cflaa::getGlobalOrArgAttrFromValue(llvm::cflaa *this, const llvm::Value *a2)
{
  unsigned int v2 = *((unsigned __int8 *)this + 16);
  if (v2 < 4) {
    return 4;
  }
  if (v2 != 21 || (llvm::Argument::hasNoAliasAttr(this) & 1) != 0 || *(unsigned char *)(*(void *)this + 8) != 15) {
    return 0;
  }
  unsigned int v5 = *((_DWORD *)this + 8);
  if (v5 <= 0x1B) {
    return (1 << (v5 + 4));
  }
  else {
    return 2;
  }
}

BOOL llvm::cflaa::isGlobalOrArgAttr(int a1)
{
  return (a1 & 0xFFFFFFF4) != 0;
}

uint64_t llvm::cflaa::getExternallyVisibleAttrs(char a1)
{
  return a1 & 7;
}

uint64_t *llvm::cflaa::instantiateExternalRelation@<X0>(uint64_t *result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = a2;
  if (*result) {
    uint64_t v4 = *(_DWORD **)&a2[8 * (v3 - 1) + -8 * (a2[5] & 0x7FFFFFF)];
  }
  if (*(unsigned char *)(*(void *)v4 + 8) != 15) {
    goto LABEL_8;
  }
  uint64_t v5 = result[1];
  if (v5) {
    a2 = *(_DWORD **)&a2[8 * (v5 - 1) + -8 * (a2[5] & 0x7FFFFFF)];
  }
  if (*(unsigned char *)(*(void *)a2 + 8) == 15)
  {
    uint64_t v6 = result[2];
    *(void *)a3 = v4;
    *(_DWORD *)(a3 + 8) = HIDWORD(v3);
    *(void *)(a3 + 16) = a2;
    *(_DWORD *)(a3 + 24) = HIDWORD(v5);
    *(void *)(a3 + 32) = v6;
    char v7 = 1;
  }
  else
  {
LABEL_8:
    char v7 = 0;
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 40) = v7;
  return result;
}

uint64_t llvm::cflaa::instantiateExternalAttribute@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  if (result) {
    a3 = *(_DWORD **)&a3[8 * (result - 1) + -8 * (a3[5] & 0x7FFFFFF)];
  }
  if (*(unsigned char *)(*(void *)a3 + 8) == 15)
  {
    *(void *)a4 = a3;
    *(_DWORD *)(a4 + 8) = HIDWORD(result);
    *(void *)(a4 + 16) = a2;
    char v4 = 1;
  }
  else
  {
    char v4 = 0;
    *(unsigned char *)a4 = 0;
  }
  *(unsigned char *)(a4 + 24) = v4;
  return result;
}

uint64_t llvm::AliasSetTracker::removeAliasSet(llvm::AliasSetTracker *this, llvm::AliasSet *a2)
{
  char v4 = (llvm::AliasSet *)*((void *)a2 + 4);
  if (v4)
  {
    int v5 = *((_DWORD *)v4 + 16);
    *((_DWORD *)v4 + 16) = v5 & 0xF8000000 | (v5 - 1) & 0x7FFFFFF;
    if (((v5 - 1) & 0x7FFFFFF) == 0) {
      llvm::AliasSetTracker::removeAliasSet(this, v4);
    }
    *((void *)a2 + 4) = 0;
  }
  else if ((*((unsigned char *)a2 + 67) & 0x40) != 0)
  {
    *((_DWORD *)this + 12) -= *((_DWORD *)a2 + 17);
  }
  uint64_t v7 = *(void *)a2;
  uint64_t v6 = (void *)*((void *)a2 + 1);
  *uint64_t v6 = *(void *)a2;
  *(void *)(v7 + 8) = v6;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unsigned int v9 = (void **)((char *)a2 + 40);
  sub_1CBF6385C(&v9);
  uint64_t result = MEMORY[0x1D25D9CE0](a2, 0x10A0C40E86B5DE6);
  if (*((llvm::AliasSet **)this + 7) == a2) {
    *((void *)this + 7) = 0;
  }
  return result;
}

uint64_t llvm::AliasSet::addUnknownInst(llvm::AliasSet *this, llvm::Instruction *a2, llvm::AAResults *a3)
{
  uint64_t v6 = *((void *)this + 5);
  uint64_t v7 = *((void *)this + 6);
  int v5 = (uint64_t *)((char *)this + 40);
  if (v6 == v7) {
    *((_DWORD *)this + 16) = *((_DWORD *)this + 16) & 0xF8000000 | (*((_DWORD *)this + 16) + 1) & 0x7FFFFFF;
  }
  sub_1CD459BDC(v5, (uint64_t)a2);
  uint64_t result = llvm::Instruction::mayWriteToMemory(a2);
  if (!result
    || (uint64_t result = llvm::isGuard((uint64_t)a2), (result & 1) != 0)
    || !*((void *)a2 + 1)
    && *((unsigned char *)a2 + 16) == 84
    && (uint64_t v10 = *((void *)a2 - 4)) != 0
    && !*(unsigned char *)(v10 + 16)
    && *(void *)(v10 + 24) == *((void *)a2 + 9)
    && *(_DWORD *)(v10 + 36) == 164)
  {
    int v9 = 1342177280;
  }
  else
  {
    int v9 = 1879048192;
  }
  *((_DWORD *)this + 16) |= v9;
  return result;
}

uint64_t sub_1CD459BDC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (llvm::ValueHandleBase *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    uint64_t result = sub_1CBF63988(a1, a2);
  }
  else
  {
    *(void *)uint64_t v3 = 4;
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 2) = a2;
    if (a2 != -8192 && a2 != -4096 && a2) {
      llvm::ValueHandleBase::AddToUseList(v3);
    }
    uint64_t result = (uint64_t)v3 + 24;
  }
  a1[1] = result;
  return result;
}

llvm::AliasSet *llvm::AliasSetTracker::findAliasSetForUnknownInst(llvm::AliasSetTracker *this, llvm::Instruction *a2)
{
  unsigned int v2 = (char *)this + 8;
  uint64_t v3 = (llvm::AliasSet *)*((void *)this + 2);
  if (v3 == (llvm::AliasSetTracker *)((char *)this + 8)) {
    return 0;
  }
  uint64_t v6 = 0;
  do
  {
    uint64_t v7 = (char *)*((void *)v3 + 1);
    if (!*((void *)v3 + 4) && llvm::AliasSet::aliasesUnknownInst(v3, a2, *(llvm::AAResults **)this))
    {
      if (v6) {
        llvm::AliasSet::mergeSetIn(v6, v3, this);
      }
      else {
        uint64_t v6 = v3;
      }
    }
    uint64_t v3 = (llvm::AliasSet *)v7;
  }
  while (v7 != v2);
  return v6;
}

llvm::AliasSetTracker *llvm::AliasSetTracker::add(llvm::AliasSetTracker *this, llvm::BasicBlock *a2)
{
  unsigned int v2 = (char *)a2 + 40;
  uint64_t v3 = (char *)*((void *)a2 + 6);
  if (v3 != (char *)a2 + 40)
  {
    char v4 = this;
    do
    {
      if (v3) {
        int v5 = (llvm::Instruction *)(v3 - 24);
      }
      else {
        int v5 = 0;
      }
      this = (llvm::AliasSetTracker *)llvm::AliasSetTracker::add(v4, v5);
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  return this;
}

uint64_t llvm::AliasSetTracker::deleteValue(llvm::AliasSetTracker *this, llvm::Value *a2)
{
  char v4 = (char *)this + 24;
  uint64_t v3 = *((void *)this + 3);
  uint64_t v9 = 0;
  uint64_t result = sub_1CD45AE60(v3, *((_DWORD *)v4 + 4), (uint64_t)a2, &v9);
  unsigned int v6 = *((_DWORD *)v4 + 4);
  if (result) {
    uint64_t v7 = v9;
  }
  else {
    uint64_t v7 = *(void *)v4 + 48 * v6;
  }
  if (*(void *)v4 + 48 * v6 != v7)
  {
    uint64_t v8 = *(void **)(v7 + 40);
    sub_1CBF6176C((uint64_t)v8, this);
    sub_1CBF60E74(v8);
  }
  return result;
}

int32x2_t sub_1CD459E3C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v22 = *((_DWORD *)v21 + 16);
  if ((v22 & 0x40000000) != 0)
  {
    --*((_DWORD *)v19 + 12);
    int v22 = *((_DWORD *)v21 + 16);
    --*((_DWORD *)v21 + 17);
  }
  *((_DWORD *)v21 + 16) = v22 & 0xF8000000 | (v22 - 1) & 0x7FFFFFF;
  if (((v22 - 1) & 0x7FFFFFF) == 0) {
    llvm::AliasSetTracker::removeAliasSet(v19, v21);
  }
  return sub_1CD459EB0(v18, v20);
}

int32x2_t sub_1CD459EB0(int32x2_t *a1, uint64_t a2)
{
  v7[0] = 2;
  v7[1] = 0;
  uint64_t v8 = -8192;
  uint64_t v9 = 0;
  sub_1CBF62D84((unint64_t *)(a2 + 8), v7);
  uint64_t v4 = v8;
  *(void *)(a2 + 32) = v9;
  if (v4 != -8192 && v4 != -4096 && v4 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList(v7);
  }
  int32x2_t result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

void *llvm::AliasSetTracker::copyValue(llvm::AliasSetTracker *this, llvm::Value *a2, llvm::Value *a3)
{
  *(void *)&v13[0] = 0;
  int32x2_t result = (void *)sub_1CD45AE60(*((void *)this + 3), *((_DWORD *)this + 10), (uint64_t)a2, v13);
  if (result) {
    BOOL v7 = *(void *)&v13[0] == *((void *)this + 3) + 48 * *((unsigned int *)this + 10);
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    int32x2_t result = (void *)sub_1CBF613C4((uint64_t)this, (void ***)a3);
    if (!result[3])
    {
      uint64_t v8 = result;
      *(void *)&v13[0] = 0;
      if (sub_1CD45AE60(*((void *)this + 3), *((_DWORD *)this + 10), (uint64_t)a2, v13)) {
        uint64_t v9 = *(void *)&v13[0];
      }
      else {
        uint64_t v9 = *((void *)this + 3) + 48 * *((unsigned int *)this + 10);
      }
      uint64_t v10 = sub_1CBF6176C(*(void *)(v9 + 40), this);
      uint64_t v11 = *(void *)(v9 + 40);
      uint64_t v12 = *(void *)(v11 + 32);
      sub_1CBF6066C(v13, v11);
      return (void *)llvm::AliasSet::addPointer(v10, (uint64_t)this, v8, v12, v13, 1, 1);
    }
  }
  return result;
}

void llvm::AliasSetTracker::mergeAllAliasSets(llvm::AliasSetTracker *this)
{
  __n128 __p = 0;
  int v5 = 0;
  unint64_t v6 = 0;
  sub_1CD45A1D4((uint64_t)&__p, dword_1EBD027B0);
  unsigned int v2 = (void *)*((void *)this + 2);
  uint64_t v3 = v5;
  while (v2 != (void *)((char *)this + 8))
  {
    if ((unint64_t)v3 >= v6) {
      uint64_t v3 = sub_1CBF63C18(&__p, (uint64_t)v2);
    }
    else {
      *v3++ = v2;
    }
    int v5 = v3;
    unsigned int v2 = (void *)v2[1];
  }
  operator new();
}

void sub_1CD45A1D4(uint64_t a1, unint64_t a2)
{
  unsigned int v2 = *(unsigned char **)a1;
  if (a2 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)
  {
    int v5 = *(unsigned char **)(a1 + 8);
    unint64_t v6 = (char *)operator new(8 * a2);
    BOOL v7 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFF8];
    uint64_t v8 = v7;
    if (v5 != v2)
    {
      uint64_t v8 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        uint64_t v9 = *((void *)v5 - 1);
        v5 -= 8;
        *((void *)v8 - 1) = v9;
        v8 -= 8;
      }
      while (v5 != v2);
    }
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v6[8 * a2];
    if (v2)
    {
      operator delete(v2);
    }
  }
}

llvm::raw_ostream *llvm::AliasSet::print(llvm::AliasSet *this, llvm::raw_ostream *a2)
{
  uint64_t v4 = sub_1CB8E509C(a2, "  AliasSet[");
  int v5 = llvm::raw_ostream::operator<<(v4, (unint64_t)this);
  unint64_t v6 = sub_1CB8E509C(v5, ", ");
  BOOL v7 = llvm::raw_ostream::operator<<(v6, *((_DWORD *)this + 16) & 0x7FFFFFF);
  sub_1CB8E509C(v7, "] ");
  if ((*((_DWORD *)this + 16) & 0x40000000) != 0) {
    uint64_t v8 = "may";
  }
  else {
    uint64_t v8 = "must";
  }
  uint64_t v9 = sub_1CB8E509C(a2, v8);
  sub_1CB8E509C(v9, " alias, ");
  sub_1CB8E509C(a2, off_1E682C660[((unint64_t)*((unsigned int *)this + 16) >> 28) & 3]);
  if (*((void *)this + 4))
  {
    uint64_t v10 = sub_1CB8E509C(a2, " forwarding to ");
    llvm::raw_ostream::operator<<(v10, *((void *)this + 4));
  }
  if (*((void *)this + 2))
  {
    sub_1CB8E509C(a2, "Pointers: ");
    for (uint64_t i = *((void *)this + 2); i; uint64_t i = *(void *)(i + 16))
    {
      if (i != *((void *)this + 2)) {
        sub_1CB8E509C(a2, ", ");
      }
      uint64_t v12 = *(llvm::Value **)i;
      uint64_t v13 = sub_1CB8E509C(a2, "(");
      llvm::Value::printAsOperand(v12, v13, 1, 0);
      uint64_t v14 = *(void *)(i + 32);
      unint64_t v15 = a2;
      if (v14 == -1)
      {
        uint64_t v16 = ", unknown before-or-after)";
      }
      else if (v14 == -2)
      {
        uint64_t v16 = ", unknown after)";
      }
      else
      {
        int v17 = sub_1CB8E509C(a2, ", ");
        uint64_t v25 = *(void *)(i + 32);
        llvm::LocationSize::print((llvm::LocationSize *)&v25, v17);
        unint64_t v15 = v17;
        uint64_t v16 = ")";
      }
      sub_1CB8E509C(v15, v16);
    }
  }
  if (*((void *)this + 5) != *((void *)this + 6))
  {
    BOOL v18 = sub_1CB8E509C(a2, "\n    ");
    BOOL v19 = llvm::raw_ostream::operator<<(v18, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 3));
    sub_1CB8E509C(v19, " Unknown instructions: ");
    uint64_t v20 = -1431655765 * ((*((void *)this + 6) - *((void *)this + 5)) >> 3);
    if (v20)
    {
      uint64_t v21 = 0;
      uint64_t v22 = 24 * v20;
      do
      {
        if (v21) {
          sub_1CB8E509C(a2, ", ");
        }
        char v23 = *(llvm::Value **)(*((void *)this + 5) + v21 + 16);
        if (v23)
        {
          if ((*((unsigned char *)v23 + 23) & 0x10) != 0) {
            llvm::Value::printAsOperand(v23, a2, 1, 0);
          }
          else {
            llvm::Value::print(v23, a2, 0);
          }
        }
        v21 += 24;
      }
      while (v22 != v21);
    }
  }
  return sub_1CB8E509C(a2, "\n");
}

llvm::raw_ostream *llvm::AliasSetTracker::print(llvm::AliasSetTracker *this, llvm::raw_ostream *a2)
{
  uint64_t v4 = sub_1CB8E509C(a2, "Alias Set Tracker: ");
  int v5 = (llvm::AliasSetTracker *)((char *)this + 8);
  unint64_t v6 = -1;
  BOOL v7 = (llvm::AliasSetTracker *)((char *)this + 8);
  do
  {
    BOOL v7 = (llvm::AliasSet *)*((void *)v7 + 1);
    ++v6;
  }
  while (v7 != v5);
  llvm::raw_ostream::operator<<(v4, v6);
  if (*((void *)this + 7)) {
    sub_1CB8E509C(a2, " (Saturated)");
  }
  uint64_t v8 = sub_1CB8E509C(a2, " alias sets for ");
  uint64_t v9 = llvm::raw_ostream::operator<<(v8, *((unsigned int *)this + 8));
  sub_1CB8E509C(v9, " pointer values.\n");
  for (uint64_t i = (llvm::AliasSet *)*((void *)this + 2); i != v5; uint64_t i = (llvm::AliasSet *)*((void *)i + 1))
    llvm::AliasSet::print(i, a2);

  return sub_1CB8E509C(a2, "\n");
}

llvm::raw_ostream *llvm::AliasSet::dump(llvm::AliasSet *this)
{
  unsigned int v2 = llvm::dbgs(this);

  return llvm::AliasSet::print(this, v2);
}

llvm::raw_ostream *llvm::AliasSetTracker::dump(llvm::AliasSetTracker *this)
{
  unsigned int v2 = llvm::dbgs(this);

  return llvm::AliasSetTracker::print(this, v2);
}

uint64_t llvm::AliasSetTracker::ASTCallbackVH::deleted(llvm::AliasSetTracker **this)
{
  return llvm::AliasSetTracker::deleteValue(this[4], this[3]);
}

void *llvm::AliasSetTracker::ASTCallbackVH::allUsesReplacedWith(llvm::AliasSetTracker **this, llvm::Value *a2)
{
  return llvm::AliasSetTracker::copyValue(this[4], this[3], a2);
}

void *llvm::AliasSetsPrinterPass::AliasSetsPrinterPass(void *this, llvm::raw_ostream *a2)
{
  *this = a2;
  return this;
}

void llvm::AliasSetsPrinterPass::run()
{
}

uint64_t sub_1CD45A86C(uint64_t a1, char *a2, _WORD *a3, int **a4, _OWORD *a5)
{
  uint64_t v10 = sub_1CB883A14(a1, 0, 0);
  *(_DWORD *)(v10 + 128) = 0;
  *(void *)(v10 + 136) = &unk_1F25EA1B0;
  *(void *)(v10 + 144) = 0;
  *(void *)uint64_t v10 = &unk_1F2643F00;
  *(void *)(v10 + 152) = &unk_1F2643DB0;
  *(void *)(v10 + 160) = &unk_1F25EA168;
  *(void *)(v10 + 184) = v10 + 160;
  size_t v11 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v11);
  *(_WORD *)(a1 + 10) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  int v12 = **a4;
  *(_DWORD *)(a1 + 128) = v12;
  *(unsigned char *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = v12;
  *(_OWORD *)(a1 + 32) = *a5;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

unint64_t sub_1CD45A998(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 8);
  unint64_t v5 = a2 + v4 - a4;
  uint64_t v6 = v4;
  if (v5 < a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = (unint64_t *)(v4 + v7);
      *uint64_t v8 = 4;
      v8[1] = 0;
      unint64_t v9 = *(void *)(v5 + v7 + 16);
      void v8[2] = v9;
      if (v9 != -8192 && v9 != -4096 && v9 != 0)
      {
        unint64_t v11 = *(void *)(v5 + v7) & 0xFFFFFFFFFFFFFFF8;
        v8[1] = *(void *)v11;
        *(void *)unint64_t v11 = v8;
        *uint64_t v8 = v11 | 4;
        int v12 = (uint64_t *)v8[1];
        if (v12) {
          *int v12 = *v12 & 7 | (v4 + 8 + v7);
        }
      }
      v7 += 24;
    }
    while (v5 + v7 < a3);
    uint64_t v6 = v4 + v7;
  }
  *(void *)(result + 8) = v6;
  if (v4 != a4)
  {
    uint64_t v13 = (unint64_t *)(v4 - 24);
    uint64_t v14 = 8 * ((v4 - a4) >> 3);
    uint64_t v15 = a2 - 24;
    do
    {
      int32x2_t result = sub_1CBF62D84(v13, (uint64_t *)(v15 + v14));
      v13 -= 3;
      v14 -= 24;
    }
    while (v14);
  }
  return result;
}

uint64_t sub_1CD45AA98(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unint64_t **)(result + 16);
  uint64_t v4 = &v3[3 * a3];
  uint64_t v5 = 24 * a3;
  uint64_t v6 = (unint64_t *)(a2 + 16);
  unint64_t v7 = (unint64_t)(v3 + 1);
  do
  {
    *uint64_t v3 = 4;
    v3[1] = 0;
    unint64_t v8 = *v6;
    void v3[2] = *v6;
    if (v8 != -8192 && v8 != -4096 && v8 != 0)
    {
      unint64_t v10 = *(v6 - 2) & 0xFFFFFFFFFFFFFFF8;
      v3[1] = *(void *)v10;
      *(void *)unint64_t v10 = v3;
      *uint64_t v3 = v10 | 4;
      unint64_t v11 = (uint64_t *)v3[1];
      if (v11) {
        *unint64_t v11 = *v11 & 7 | v7;
      }
    }
    v3 += 3;
    v6 += 3;
    v7 += 24;
    v5 -= 24;
  }
  while (v5);
  *(void *)(result + 16) = v4;
  return result;
}

uint64_t sub_1CD45AB24(void *a1, void *a2, void *a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = (void *)*a1;
  uint64_t v6 = result;
  if ((void *)*a1 != a3)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = result + v7;
      *(void *)(result + v7 - 24) = 4;
      unint64_t v9 = (unint64_t *)(result + v7 - 24);
      uint64_t v10 = a3[v7 / 8 - 1];
      *(void *)(v8 - 16) = 0;
      *(void *)(v8 - 8) = v10;
      if (v10 != -8192 && v10 != -4096 && v10 != 0)
      {
        unint64_t v12 = a3[v7 / 8 - 3] & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v8 - 16) = *(void *)v12;
        *(void *)unint64_t v12 = v9;
        *unint64_t v9 = v12 | 4;
        uint64_t v13 = *(uint64_t **)(v8 - 16);
        if (v13) {
          *uint64_t v13 = *v13 & 7 | (result - 16 + v7);
        }
      }
      v7 -= 24;
    }
    while (&a3[v7 / 8] != v5);
    uint64_t v6 = result + v7;
  }
  a2[1] = v6;
  uint64_t v14 = (void *)a1[1];
  uint64_t v15 = (unint64_t *)a2[2];
  if (v14 != a3)
  {
    unint64_t v16 = (unint64_t)(v15 + 1);
    do
    {
      *uint64_t v15 = 4;
      v15[1] = 0;
      unint64_t v17 = a3[2];
      v15[2] = v17;
      if (v17 != -8192 && v17 != -4096 && v17 != 0)
      {
        unint64_t v19 = *a3 & 0xFFFFFFFFFFFFFFF8;
        v15[1] = *(void *)v19;
        *(void *)unint64_t v19 = v15;
        *uint64_t v15 = v19 | 4;
        uint64_t v20 = (uint64_t *)v15[1];
        if (v20) {
          uint64_t *v20 = *v20 & 7 | v16;
        }
      }
      a3 += 3;
      v15 += 3;
      v16 += 24;
    }
    while (a3 != v14);
    uint64_t v6 = a2[1];
  }
  a2[2] = v15;
  uint64_t v21 = (void *)*a1;
  *a1 = v6;
  a2[1] = v21;
  uint64_t v22 = a1[1];
  a1[1] = a2[2];
  a2[2] = v22;
  uint64_t v23 = a1[2];
  a1[2] = a2[3];
  a2[3] = v23;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1CD45AC84(uint64_t a1)
{
  uint64_t v3 = *(void **)(a1 + 8);
  unsigned int v2 = *(void **)(a1 + 16);
  while (v2 != v3)
  {
    uint64_t v4 = *(v2 - 1);
    v2 -= 3;
    *(void *)(a1 + 16) = v2;
    if (v4 != -8192 && v4 != -4096 && v4 != 0)
    {
      llvm::ValueHandleBase::RemoveFromUseList(v2);
      unsigned int v2 = *(void **)(a1 + 16);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *sub_1CD45ACEC(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      *(void *)(v4 + v5 - 24) = 4;
      unint64_t v7 = (unint64_t *)(v4 + v5 - 24);
      uint64_t v8 = *(void *)(v2 + v5 - 8);
      *(void *)(v6 - 16) = 0;
      *(void *)(v6 - 8) = v8;
      if (v8 != -8192 && v8 != -4096 && v8 != 0)
      {
        unint64_t v10 = *(void *)(v2 + v5 - 24) & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v6 - 16) = *(void *)v10;
        *(void *)unint64_t v10 = v7;
        *unint64_t v7 = v10 | 4;
        unint64_t v11 = *(uint64_t **)(v6 - 16);
        if (v11) {
          *unint64_t v11 = *v11 & 7 | (v4 - 16 + v5);
        }
      }
      v5 -= 24;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v12 = *result;
  *uint64_t result = v4;
  a2[1] = v12;
  uint64_t v13 = result[1];
  result[1] = a2[2];
  a2[2] = v13;
  uint64_t v14 = result[2];
  result[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

void **sub_1CD45ADBC(void *a1)
{
  int v2 = *((_DWORD *)a1 + 2);
  sub_1CBF633A0(a1);
  int v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64) {
    int v3 = 64;
  }
  if (v2) {
    int v4 = v3;
  }
  else {
    int v4 = 0;
  }
  if (v4 == *((_DWORD *)a1 + 4))
  {
    return (void **)sub_1CBF628D8(a1);
  }
  else
  {
    MEMORY[0x1D25D9CD0](*a1, 8);
    return sub_1CBF632BC((void **)a1, v4);
  }
}

uint64_t sub_1CD45AE60(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = a1 + 48 * v5;
    uint64_t v7 = *(void *)(v6 + 24);
    if (v7 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = a1 + 48 * (v13 & v4);
        uint64_t v7 = *(void *)(v6 + 24);
        uint64_t v8 = 1;
        if (v7 == a3) {
          goto LABEL_4;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

double llvm::getKnowledgeFromUse@<D0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_1CBF64840((char *)a1);
  if (!v8) {
    goto LABEL_9;
  }
  llvm::getKnowledgeFromBundle(*(void *)(a1 + 24), (uint64_t)v8, (uint64_t)&v12);
  if (a3)
  {
    uint64_t v10 = 4 * a3;
    int v11 = a2;
    while (*v11 != v12)
    {
      ++v11;
      v10 -= 4;
      if (!v10)
      {
        int v11 = &a2[a3];
        break;
      }
    }
  }
  else
  {
    int v11 = a2;
  }
  if (a3 != v11 - a2)
  {
    double result = *(double *)&v12;
    *(_OWORD *)a4 = v12;
    *(void *)(a4 + 16) = v13;
  }
  else
  {
LABEL_9:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t sub_1CD45AFB0(uint64_t *a1, _DWORD *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CD45B020(a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD45B1EC((uint64_t)a1, a2, v7);
    *(void *)uint64_t v5 = *(void *)a2;
    *(_DWORD *)(v5 + 8) = a2[2];
    *(_DWORD *)(v5 + 32) = 0;
    *(void *)(v5 + 16) = 0;
    *(void *)(v5 + 24) = 0;
  }
  return v5;
}

uint64_t sub_1CD45B020(uint64_t *a1, _DWORD *a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v8 = *a1;
    int v9 = sub_1CD45B110(a2);
    int v10 = v4 - 1;
    int v11 = a2[2];
    unsigned int v12 = v9 & (v4 - 1);
    uint64_t v5 = (uint64_t *)(v8 + 40 * v12);
    uint64_t v13 = *v5;
    int v14 = *((_DWORD *)v5 + 2);
    if (*(void *)a2 == *v5 && v11 == v14)
    {
      uint64_t result = 1;
    }
    else
    {
      unint64_t v16 = 0;
      int v17 = 1;
      uint64_t result = 1;
      while (v13 != -4096 || v14 != 82)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v14 == 83;
        }
        if (v18 && v13 == -8192) {
          unint64_t v16 = v5;
        }
        unsigned int v20 = v12 + v17++;
        unsigned int v12 = v20 & v10;
        uint64_t v5 = (uint64_t *)(v8 + 40 * (v20 & v10));
        uint64_t v13 = *v5;
        int v14 = *((_DWORD *)v5 + 2);
        if (*(void *)a2 == *v5 && v11 == v14) {
          goto LABEL_3;
        }
      }
      uint64_t result = 0;
      if (v16) {
        uint64_t v5 = v16;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t result = 0;
  }
LABEL_3:
  *a3 = v5;
  return result;
}

uint64_t sub_1CD45B110(_DWORD *a1)
{
  uint64_t v1 = (*a1 >> 4) ^ (*a1 >> 9);
  unsigned int v7 = a1[2];
  unint64_t v2 = sub_1CD45B18C(&v7);
  unint64_t v3 = (v2 | (unint64_t)(v1 << 32)) + ~(v2 << 32);
  unint64_t v4 = 9 * (((v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13)) ^ (((v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13)) >> 8));
  unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  return (v5 >> 31) ^ v5;
}

unint64_t sub_1CD45B18C(unsigned int *a1)
{
  uint64_t v2 = sub_1CBF65470();
  uint64_t v3 = *a1;
  uint64_t v4 = (8 * v3) | 4;
  uint64_t v5 = v2 ^ v3;
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ ((0x9DDFEA08EB382D69 * (v4 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v5 ^ ((0x9DDFEA08EB382D69 * (v4 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ v5)))) >> 47));
}

uint64_t sub_1CD45B1EC(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_8;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_8:
    sub_1CD45B2A8(a1, v6);
    uint64_t v8 = 0;
    sub_1CD45B020((uint64_t *)a1, a2, &v8);
    a3 = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)a3 != -4096 || *(_DWORD *)(a3 + 8) != 82) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

_OWORD *sub_1CD45B2A8(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(40 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD45B38C(a1, (uint64_t)v4, (uint64_t)v4 + 40 * v3);
    llvm::deallocate_buffer(v4, (void *)(40 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 40 * v10;
    do
    {
      *uint64_t result = xmmword_1CFAC3080;
      uint64_t result = (_OWORD *)((char *)result + 40);
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD45B38C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  *(void *)(result + 8) = 0;
  uint64_t v5 = *(unsigned int *)(result + 16);
  if (v5)
  {
    unint64_t v6 = *(_OWORD **)result;
    uint64_t v7 = 40 * v5;
    do
    {
      *unint64_t v6 = xmmword_1CFAC3080;
      unint64_t v6 = (_OWORD *)((char *)v6 + 40);
      v7 -= 40;
    }
    while (v7);
  }
  while (a2 != a3)
  {
    int v8 = *(_DWORD *)(a2 + 8);
    if ((*(void *)a2 != -4096 || v8 != 82) && (*(void *)a2 != -8192 || v8 != 83))
    {
      unsigned int v12 = 0;
      sub_1CD45B020((uint64_t *)result, (_DWORD *)a2, &v12);
      int v9 = v12;
      *unsigned int v12 = *(void *)a2;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
      *((_DWORD *)v9 + 8) = 0;
      void v9[2] = 0;
      v9[3] = 0;
      void v9[2] = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = 0;
      *((_DWORD *)v9 + 6) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = 0;
      int v10 = *((_DWORD *)v9 + 7);
      *((_DWORD *)v9 + 7) = *(_DWORD *)(a2 + 28);
      *(_DWORD *)(a2 + 28) = v10;
      uint64_t v11 = *((unsigned int *)v9 + 8);
      *((_DWORD *)v9 + 8) = *(_DWORD *)(a2 + 32);
      *(_DWORD *)(a2 + 32) = v11;
      ++*(_DWORD *)(v4 + 8);
      llvm::deallocate_buffer(0, (void *)(24 * v11));
    }
    a2 += 40;
  }
  return result;
}

void *sub_1CD45B4B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CD45B528(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD45B5C4(a1, a2, v7);
    void *v5 = *a2;
    v5[1] = 0;
    void v5[2] = 0;
  }
  return v5;
}

uint64_t sub_1CD45B528(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unint64_t v6 = (void *)(a1 + 24 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      int v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          int v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        unint64_t v6 = (void *)(a1 + 24 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_4;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        unint64_t v6 = v10;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

void *sub_1CD45B5C4(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD45B678(a1, v6);
  uint64_t v8 = 0;
  sub_1CD45B528(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CD45B678(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD45B758(a1, (uint64_t)v4, (uint64_t)v4 + 24 * v3);
    llvm::deallocate_buffer(v4, (void *)(24 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 24 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 3;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD45B758(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 24 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CD45B528(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      uint64_t v10 = v11;
      *uint64_t v11 = *(void *)a2;
      *(_OWORD *)(v10 + 1) = *(_OWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

char **llvm::AssumptionCache::unregisterAssumption(uint64_t a1, uint64_t a2)
{
  v25[64] = *MEMORY[0x1E4F143B8];
  uint64_t v23 = (char *)v25;
  uint64_t v24 = 0x1000000000;
  sub_1CBF65D5C(a2, *(void **)(a1 + 8), (uint64_t)&v23);
  if (v24)
  {
    uint64_t v8 = v23;
    uint64_t v9 = &v23[32 * v24];
    do
    {
      uint64_t v22 = 0;
      int v10 = sub_1CD45BF4C(*(void *)(a1 + 160), *(_DWORD *)(a1 + 176), *((void *)v8 + 2), &v22);
      uint64_t v11 = *(void *)(a1 + 160);
      unsigned int v12 = *(_DWORD *)(a1 + 176);
      if (v10) {
        uint64_t v13 = v22;
      }
      else {
        uint64_t v13 = v11 + 88 * v12;
      }
      if (v11 + 88 * v12 != v13)
      {
        uint64_t v14 = *(unsigned int *)(v13 + 48);
        if (!v14) {
          goto LABEL_11;
        }
        int v15 = 0;
        int v16 = 0;
        int v17 = *(void **)(v13 + 40);
        uint64_t v18 = 32 * v14 - 32;
        do
        {
          uint64_t v19 = v17[2];
          if (v19 == a2) {
            uint64_t v20 = 0;
          }
          else {
            uint64_t v20 = v17[2];
          }
          v15 |= v19 == a2;
          if (a2 && v19 == a2)
          {
            if ((a2 | 0x1000) != 0xFFFFFFFFFFFFF000) {
              llvm::ValueHandleBase::RemoveFromUseList(v17);
            }
            uint64_t v20 = 0;
            v17[2] = 0;
            int v15 = 1;
          }
          v16 |= v20 != 0;
          if (v16 & v15) {
            break;
          }
          v17 += 4;
          uint64_t v21 = v18;
          v18 -= 32;
        }
        while (v21);
        if ((v16 & 1) == 0) {
LABEL_11:
        }
          sub_1CD45B9EC((int32x2_t *)(a1 + 160), v13);
      }
      v8 += 32;
    }
    while (v8 != v9);
  }
  uint64_t v22 = a2;
  uint64_t v5 = *(unint64_t **)(a1 + 16);
  uint64_t v4 = a1 + 16;
  uint64_t v6 = sub_1CBF6971C(v5, &v5[4 * *(unsigned int *)(v4 + 8)], &v22);
  sub_1CD45BFE8((uint64_t *)v4, (uint64_t)v6, *(void *)v4 + 32 * *(unsigned int *)(v4 + 8));
  return sub_1CBF695D0(&v23);
}

int32x2_t sub_1CD45B9EC(int32x2_t *a1, uint64_t a2)
{
  sub_1CBF68F7C((char **)(a2 + 40));
  v7[0] = 2;
  v7[1] = 0;
  uint64_t v8 = -8192;
  uint64_t v9 = 0;
  sub_1CBF62D84((unint64_t *)(a2 + 8), v7);
  uint64_t v4 = v8;
  *(void *)(a2 + 32) = v9;
  if (v4 != -8192 && v4 != -4096 && v4 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList(v7);
  }
  int32x2_t result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

void llvm::AssumptionPrinterPass::run()
{
}

uint64_t llvm::AssumptionCacheTracker::lookupAssumptionCache(llvm::AssumptionCacheTracker *this, llvm::Function *a2)
{
  uint64_t v5 = a2;
  uint64_t v6 = 0;
  int v3 = sub_1CBF69930((uint64_t *)this + 4, &v5, &v6);
  uint64_t result = 0;
  if (v3)
  {
    if (v6 != *((void *)this + 4) + 48 * *((unsigned int *)this + 12)) {
      return *(void *)(v6 + 40);
    }
  }
  return result;
}

uint64_t sub_1CD45BC94(uint64_t *a1)
{
  int v2 = *((_DWORD *)a1 + 2);
  uint64_t result = *a1;
  uint64_t v4 = *((unsigned int *)a1 + 4);
  uint64_t v5 = result + 48 * v4;
  if (!v2) {
    return v5;
  }
  if (v4)
  {
    uint64_t v6 = 48 * v4;
    while ((*(void *)(result + 24) | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      result += 48;
      v6 -= 48;
      if (!v6) {
        return v5;
      }
    }
  }
  return result;
}

llvm::AssumptionCacheTracker *llvm::AssumptionCacheTracker::AssumptionCacheTracker(llvm::AssumptionCacheTracker *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = llvm::AssumptionCacheTracker::ID;
  *((_DWORD *)this + 6) = 4;
  *(void *)this = &unk_1F2600BF0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC3BA0, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CBF677BC;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCC3BA0, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return this;
}

double sub_1CD45BE74(char **a1, char **a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *((unsigned int *)a1 + 2);
  if (v5)
  {
    uint64_t v6 = 32 * v5;
    do
    {
      uint64_t v7 = *(void *)&v4[v6 - 16];
      if (v7 != -8192 && v7 != -4096 && v7 != 0) {
        llvm::ValueHandleBase::RemoveFromUseList(&v4[v6 - 32]);
      }
      v6 -= 32;
    }
    while (v6);
    uint64_t v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2)) {
    free(v4);
  }
  *a1 = *a2;
  double result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

void llvm::callDefaultCtor<llvm::AssumptionCacheTracker>()
{
}

uint64_t sub_1CD45BF4C(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = a1 + 88 * v5;
    uint64_t v7 = *(void *)(v6 + 24);
    if (v7 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = a1 + 88 * (v13 & v4);
        uint64_t v7 = *(void *)(v6 + 24);
        uint64_t v8 = 1;
        if (v7 == a3) {
          goto LABEL_4;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

uint64_t sub_1CD45BFE8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *((unsigned int *)a1 + 2);
  uint64_t v7 = *a1 + 32 * v6;
  if (v7 == a3)
  {
    uint64_t v9 = a2;
  }
  else
  {
    uint64_t v8 = a3;
    uint64_t v9 = a2;
    do
    {
      sub_1CBF62D84((unint64_t *)v9, (uint64_t *)v8);
      *(_DWORD *)(v9 + 24) = *(_DWORD *)(v8 + 24);
      v9 += 32;
      v8 += 32;
    }
    while (v8 != v7);
    uint64_t v5 = *a1;
    uint64_t v6 = *((unsigned int *)a1 + 2);
  }
  uint64_t v10 = (void *)(v5 + 32 * v6);
  if (v10 != (void *)v9)
  {
    do
    {
      uint64_t v11 = *(v10 - 2);
      v10 -= 4;
      if (v11 != -8192 && v11 != -4096 && v11 != 0) {
        llvm::ValueHandleBase::RemoveFromUseList(v10);
      }
    }
    while (v10 != (void *)v9);
    uint64_t v5 = *a1;
  }
  *((_DWORD *)a1 + 2) = (unint64_t)(v9 - v5) >> 5;
  return a2;
}

uint64_t sub_1CD45C0B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = 0;
  uint64_t v3 = sub_1CBF74894(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v6);
  if (v3)
  {
    int v4 = v6;
    sub_1CBF749F4(v6 + 1);
    void *v4 = -8192;
    *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  return v3;
}

double sub_1CD45C138(_DWORD *a1, uint64_t *a2)
{
  uint64_t v6 = 0;
  if (sub_1CBF74C14((uint64_t)a1, a2, &v6))
  {
    int v4 = v6;
    double result = NAN;
    *(_OWORD *)uint64_t v6 = xmmword_1CFAC30A0;
    *((_OWORD *)v4 + 1) = xmmword_1CFAC30A0;
    int v5 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v5;
  }
  return result;
}

llvm::BasicAAWrapperPass *llvm::BasicAAWrapperPass::BasicAAWrapperPass(llvm::BasicAAWrapperPass *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = &llvm::BasicAAWrapperPass::ID;
  *((_DWORD *)this + 6) = 2;
  *(void *)this = &unk_1F2600CE8;
  *((void *)this + 4) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC3C68, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CBF739F0;
    v5[1] = &PassRegistry;
    int v4 = v5;
    std::__call_once(&qword_1EBCC3C68, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return this;
}

void llvm::initializeBasicAAWrapperPassPass(llvm *this, llvm::PassRegistry *a2)
{
  int v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC3C68, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CBF739F0;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCC3C68, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::createBasicAAWrapperPass(llvm *this)
{
}

void llvm::BasicAAWrapperPass::getAnalysisUsage(llvm::BasicAAWrapperPass *this, llvm::AnalysisUsage *a2)
{
  *((unsigned char *)a2 + 160) = 1;
  llvm::AnalysisUsage::addRequiredTransitiveID(a2, llvm::AssumptionCacheTracker::ID);
  llvm::AnalysisUsage::addRequiredTransitiveID(a2, (char *)&llvm::DominatorTreeWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredTransitiveID(a2, llvm::TargetLibraryInfoWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredTransitiveID(a2, llvm::TargetTransformInfoWrapperPass::ID);

  sub_1CB843600((uint64_t)a2, (uint64_t)a2 + 144, (uint64_t)&llvm::PhiValuesWrapperPass::ID);
}

void sub_1CD45C388(uint64_t a1)
{
  sub_1CBF74550(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD45C3C0(uint64_t result)
{
  if ((*(unsigned char *)(result + 8) & 1) == 0)
  {
    uint64_t v1 = result;
    MEMORY[0x1D25D9CD0](*(void *)(result + 16), 8);
    return v1;
  }
  return result;
}

void sub_1CD45C400(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 8) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 16), 8);
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD45C464(llvm::Pass *a1)
{
  sub_1CD45C4D8(a1);

  JUMPOUT(0x1D25D9CE0);
}

void llvm::callDefaultCtor<llvm::BasicAAWrapperPass>()
{
}

void sub_1CD45C4D8(llvm::Pass *this)
{
  *(void *)this = &unk_1F2600CE8;
  int v2 = (void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2)
  {
    uint64_t v3 = sub_1CBF750EC(v2);
    MEMORY[0x1D25D9CE0](v3, 0x10E0C40C5342A8FLL);
  }

  llvm::Pass::~Pass(this);
}

uint64_t sub_1CD45C54C(uint64_t a1, char *a2, _WORD *a3, unsigned char **a4)
{
  uint64_t v8 = sub_1CB883A14(a1, 0, 0);
  *(unsigned char *)(v8 + 128) = 0;
  *(void *)(v8 + 136) = &unk_1F25EDE58;
  *(void *)(v8 + 144) = 0;
  *(void *)uint64_t v8 = &unk_1F26440A0;
  *(void *)(v8 + 152) = &unk_1F2643CC0;
  *(void *)(v8 + 160) = &unk_1F25EDE78;
  *(void *)(v8 + 184) = v8 + 160;
  size_t v9 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v9);
  *(_WORD *)(a1 + 10) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  uint64_t v10 = *a4;
  *(unsigned char *)(a1 + 128) = **a4;
  *(unsigned char *)(a1 + 145) = 1;
  *(unsigned char *)(a1 + 144) = *v10;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t sub_1CD45C668(uint64_t result, void *a2, void *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    uint64_t v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *uint64_t v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v10 = 0;
      double result = sub_1CB915048((uint64_t *)v5, a2, &v10);
      size_t v9 = v10;
      *uint64_t v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t *sub_1CD45C718(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  int v4 = result;
  result[1] = 0;
  uint64_t v5 = *((unsigned int *)result + 4);
  if (v5)
  {
    uint64_t v6 = (void *)*result;
    uint64_t v7 = 16 * v5;
    do
    {
      *uint64_t v6 = -4096;
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  if (a2 != a3)
  {
    uint64_t v8 = a2 + 1;
    do
    {
      uint64_t v9 = *(v8 - 1);
      if ((v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        BOOL v12 = 0;
        sub_1CBF74894(*v4, *((_DWORD *)v4 + 4), v9, &v12);
        uint64_t v10 = v12;
        *BOOL v12 = *(v8 - 1);
        v10[1] = *v8;
        *uint64_t v8 = 0;
        ++*((_DWORD *)v4 + 2);
        double result = sub_1CBF749F4(v8);
      }
      uint64_t v11 = v8 + 1;
      v8 += 2;
    }
    while (v11 != a3);
  }
  return result;
}

void llvm::BlockFrequencyInfo::view(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a1;
  __int16 v6 = 261;
  v5[0] = a2;
  v5[1] = a3;
  __int16 v4 = 257;
  sub_1CD45C944(&v7, (llvm::Twine *)v5, 0, (llvm::Twine *)v3, 0);
}

uint64_t llvm::BlockFrequencyInfo::print(llvm::BlockFrequencyInfo *this, llvm::raw_ostream *a2)
{
  uint64_t result = *(void *)this;
  if (result) {
    return (*(uint64_t (**)(uint64_t, llvm::raw_ostream *))(*(void *)result + 24))(result, a2);
  }
  return result;
}

uint64_t llvm::BlockFrequencyInfo::getBlockProfileCount(llvm::BlockFrequencyInfoImplBase **this, const llvm::BasicBlock *a2, int a3)
{
  uint64_t v3 = *this;
  if (!*this) {
    return 0;
  }
  uint64_t v5 = (uint64_t ***)*((void *)v3 + 16);
  int v7 = sub_1CBF7A45C((uint64_t)*this, (uint64_t)a2);
  return llvm::BlockFrequencyInfoImplBase::getBlockProfileCount(v3, v5, &v7, a3);
}

uint64_t ****llvm::BlockFrequencyInfo::getProfileCountFromFreq(uint64_t *****this, unint64_t a2)
{
  uint64_t result = *this;
  if (result) {
    return (uint64_t ****)llvm::BlockFrequencyInfoImplBase::getProfileCountFromFreq((llvm::BlockFrequencyInfoImplBase *)result, result[16], a2, 0);
  }
  return result;
}

uint64_t llvm::BlockFrequencyInfo::isIrrLoopHeader(llvm::BlockFrequencyInfo *this, const llvm::BasicBlock *a2)
{
  uint64_t v2 = *(void *)this;
  unsigned int v4 = sub_1CBF7A45C(*(void *)this, (uint64_t)a2);
  return llvm::BlockFrequencyInfoImplBase::isIrrLoopHeader(v2, &v4);
}

void sub_1CD45C944(uint64_t **a1, llvm::Twine *this, char a3, llvm::Twine *a4, int a5)
{
  char v10 = 0;
  LOBYTE(__p) = 0;
  sub_1CBF7EE80((uint64_t)v11, a1, this, a3, a4, (uint64_t)&__p);
  if (v10 < 0) {
    operator delete(__p);
  }
  char v6 = v12;
  if (v12 >= 0) {
    std::string::size_type v7 = v12 & 0x7F;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)v11[1];
  }
  if (v7)
  {
    if (v12 >= 0) {
      uint64_t v8 = v11;
    }
    else {
      uint64_t v8 = (void **)v11[0];
    }
    llvm::DisplayGraph((std::string::value_type *)v8, v7, 0, a5);
    char v6 = v12;
  }
  if (v6 < 0) {
    operator delete(v11[0]);
  }
}

uint64_t llvm::BlockFrequencyInfo::getEntryFreq(llvm::BlockFrequencyInfo *this)
{
  if (*(void *)this) {
    return *(void *)(*(void *)(*(void *)this + 8) + 16);
  }
  else {
    return 0;
  }
}

void llvm::initializeBlockFrequencyInfoWrapperPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC3C70, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CBF79D60;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCC3C70, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

llvm::BlockFrequencyInfoWrapperPass *llvm::BlockFrequencyInfoWrapperPass::BlockFrequencyInfoWrapperPass(llvm::BlockFrequencyInfoWrapperPass *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = &llvm::BlockFrequencyInfoWrapperPass::ID;
  *((_DWORD *)this + 6) = 2;
  *(void *)this = &unk_1F2600DE0;
  *((void *)this + 4) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC3C70, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CBF79D60;
    v5[1] = &PassRegistry;
    unsigned int v4 = v5;
    std::__call_once(&qword_1EBCC3C70, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return this;
}

uint64_t llvm::BlockFrequencyInfoWrapperPass::print(llvm::BlockFrequencyInfoWrapperPass *this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  uint64_t result = *((void *)this + 4);
  if (result) {
    return (*(uint64_t (**)(uint64_t, llvm::raw_ostream *))(*(void *)result + 24))(result, a2);
  }
  return result;
}

llvm::AnalysisUsage *llvm::BlockFrequencyInfoWrapperPass::getAnalysisUsage(llvm::BlockFrequencyInfoWrapperPass *this, llvm::AnalysisUsage *a2)
{
  llvm::AnalysisUsage::addRequiredID(a2, llvm::BranchProbabilityInfoWrapperPass::ID);
  uint64_t result = llvm::AnalysisUsage::addRequiredID(a2, (char *)&llvm::LoopInfoWrapperPass::ID);
  *((unsigned char *)a2 + 160) = 1;
  return result;
}

void llvm::BlockFrequencyPrinterPass::run(llvm::raw_ostream **a1, llvm::Value *a2)
{
  uint64_t v3 = sub_1CB8E509C(*a1, "Printing analysis results of BFI for function ");
  unsigned int v4 = sub_1CB8E509C(v3, "'");
  Name = llvm::Value::getName(a2);
  size_t v7 = v5;
  uint64_t v8 = (void *)*((void *)v4 + 4);
  if (v5 <= *((void *)v4 + 3) - (void)v8)
  {
    if (v5)
    {
      memcpy(v8, Name, v5);
      *((void *)v4 + 4) += v7;
    }
  }
  else
  {
    llvm::raw_ostream::write(v4, Name, v5);
  }
  uint64_t v9 = sub_1CB8E509C(v4, "':");
  sub_1CB8E509C(v9, "\n");
  llvm::AnalysisManager<llvm::Function>::getResultImpl();
}

void *sub_1CD45CE08(void *a1)
{
  *a1 = &unk_1F2600E80;
  uint64_t v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F2600EE8;
  unsigned int v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }

  return sub_1CB87DD48(a1);
}

void *sub_1CD45CEF0(void *a1)
{
  *a1 = &unk_1F2600EE8;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CD45CF44(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  int v12 = 0;
  uint64_t v8 = sub_1CD42FA04(a1 + 152, (void *)a1, a3, a4, a5, a6, &v12);
  if (v8) {
    return v8;
  }
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  uint64_t v9 = *(void *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v9 + 48))(v9, &v12);
    return v8;
  }
  sub_1CB920400();
  return sub_1CD45CFD8(v11);
}

uint64_t sub_1CD45CFD8(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

void sub_1CD45CFF0(void *a1)
{
  sub_1CD45CE08(a1);

  JUMPOUT(0x1D25D9CE0);
}

unint64_t sub_1CD45D028(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t sub_1CD45D034(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *sub_1CD45D044(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    int v3 = *((_DWORD *)result + 32);
LABEL_3:
    unsigned int v4 = &unk_1F2600F38;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 148))
  {
    int v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3) {
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t sub_1CD45D0C8(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void *sub_1CD45D0E0(uint64_t a1, uint64_t a2)
{
  return sub_1CD42FB24((void *)(a1 + 152), a2);
}

void sub_1CD45D0E8(void *a1)
{
  *a1 = &unk_1F2600EE8;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD45D15C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CD45D164(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1CD45D178(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1CD45D18C(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1CD45D1A0(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void *sub_1CD45D1CC(void *a1)
{
  *a1 = &unk_1F2600F78;
  uint64_t v2 = a1 + 71;
  int v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F2600FE0;
  unsigned int v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }

  return sub_1CB87DD48(a1);
}

void *sub_1CD45D2B4(void *a1)
{
  *a1 = &unk_1F2600FE0;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CD45D308(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  int v12 = 0;
  uint64_t v8 = sub_1CD42FA04(a1 + 152, (void *)a1, a3, a4, a5, a6, &v12);
  if (v8) {
    return v8;
  }
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  uint64_t v9 = *(void *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v9 + 48))(v9, &v12);
    return v8;
  }
  sub_1CB920400();
  return sub_1CD45D39C(v11);
}

uint64_t sub_1CD45D39C(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

void sub_1CD45D3B4(void *a1)
{
  sub_1CD45D1CC(a1);

  JUMPOUT(0x1D25D9CE0);
}

unint64_t sub_1CD45D3EC(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t sub_1CD45D3F8(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *sub_1CD45D408(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    int v3 = *((_DWORD *)result + 32);
LABEL_3:
    unsigned int v4 = &unk_1F2601030;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 148))
  {
    int v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3) {
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t sub_1CD45D48C(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void *sub_1CD45D4A4(uint64_t a1, uint64_t a2)
{
  return sub_1CD42FB24((void *)(a1 + 152), a2);
}

void sub_1CD45D4AC(void *a1)
{
  *a1 = &unk_1F2600FE0;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD45D520(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CD45D528(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1CD45D53C(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1CD45D550(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1CD45D564(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void sub_1CD45D594(uint64_t a1@<X0>, unsigned int *a2@<X1>, std::string *a3@<X8>)
{
  Name = llvm::Value::getName(*(llvm::Value **)(*(void *)(a1 + 136) + 8 * *a2));
  if (Name)
  {
    std::string::__init(a3, Name, v5);
  }
  else
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
  }
}

llvm::raw_ostream *sub_1CD45D5FC(uint64_t a1, llvm::raw_ostream *a2)
{
  if (*(void *)(a1 + 128))
  {
    unsigned int v4 = sub_1CB8E509C(a2, "block-frequency-info: ");
    Name = llvm::Value::getName(*(llvm::Value **)(a1 + 128));
    size_t v7 = v5;
    uint64_t v8 = (void *)*((void *)v4 + 4);
    if (v5 <= *((void *)v4 + 3) - (void)v8)
    {
      if (v5)
      {
        memcpy(v8, Name, v5);
        *((void *)v4 + 4) += v7;
      }
    }
    else
    {
      llvm::raw_ostream::write(v4, Name, v5);
    }
    sub_1CB8E509C(v4, "\n");
    uint64_t v9 = *(void *)(a1 + 128);
    uint64_t v10 = v9 + 72;
    uint64_t v11 = *(void *)(v9 + 80);
    if (v11 != v9 + 72)
    {
      do
      {
        if (v11) {
          int v12 = (llvm::Value *)(v11 - 24);
        }
        else {
          int v12 = 0;
        }
        unsigned int v13 = sub_1CB8E509C(a2, " - ");
        int v15 = llvm::Value::getName(v12);
        if (v15)
        {
          std::string::__init(&v39, v15, v14);
          LOBYTE(v15) = *((unsigned char *)&v39.__r_.__value_.__s + 23);
          std::string::size_type size = v39.__r_.__value_.__l.__size_;
          std::string::size_type v17 = v39.__r_.__value_.__r.__words[0];
        }
        else
        {
          std::string::size_type size = 0;
          std::string::size_type v17 = 0;
          memset(&v39, 0, sizeof(v39));
        }
        int v18 = (char)v15;
        if ((char)v15 >= 0) {
          uint64_t v19 = &v39;
        }
        else {
          uint64_t v19 = (std::string *)v17;
        }
        size_t v20 = v15 & 0x7F;
        if (v18 >= 0) {
          size_t v21 = v20;
        }
        else {
          size_t v21 = size;
        }
        uint64_t v22 = llvm::raw_ostream::write(v13, (const char *)v19, v21);
        sub_1CB8E509C(v22, ": float = ");
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
        LODWORD(v39.__r_.__value_.__l.__data_) = sub_1CBF7A45C(a1, (uint64_t)v12);
        FloatingBlockFreq = (llvm::raw_ostream *)llvm::BlockFrequencyInfoImplBase::getFloatingBlockFreq(a1, &v39);
        uint64_t v25 = llvm::ScaledNumberBase::print(a2, FloatingBlockFreq, v24, 64, 5u);
        char v26 = sub_1CB8E509C(v25, ", int = ");
        unsigned int v27 = sub_1CBF7A45C(a1, (uint64_t)v12);
        if (v27 == -1) {
          unint64_t v28 = 0;
        }
        else {
          unint64_t v28 = *(void *)(*(void *)(a1 + 8) + 24 * v27 + 16);
        }
        sub_1CD098D14(v26, v28, 0, 0, 0);
        BOOL v29 = *(uint64_t ****)(a1 + 128);
        LODWORD(v39.__r_.__value_.__l.__data_) = sub_1CBF7A45C(a1, (uint64_t)v12);
        uint64_t BlockProfileCount = llvm::BlockFrequencyInfoImplBase::getBlockProfileCount((llvm::BlockFrequencyInfoImplBase *)a1, v29, &v39, 0);
        if (v31)
        {
          unint64_t v32 = BlockProfileCount;
          size_t v33 = sub_1CB8E509C(a2, ", count = ");
          sub_1CD098D14(v33, v32, 0, 0, 0);
        }
        unint64_t IrrLoopHeaderWeight = llvm::BasicBlock::getIrrLoopHeaderWeight(v12);
        if (v35)
        {
          unint64_t v36 = IrrLoopHeaderWeight;
          uint64_t v37 = sub_1CB8E509C(a2, ", irr_loop_header_weight = ");
          sub_1CD098D14(v37, v36, 0, 0, 0);
        }
        sub_1CB8E509C(a2, "\n");
        uint64_t v11 = *(void *)(v11 + 8);
      }
      while (v11 != v10);
    }
    sub_1CB8E509C(a2, "\n");
  }
  return a2;
}

uint64_t sub_1CD45D8C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 != -8192 && v2 != -4096 && v2 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((void *)(a1 + 8));
  }
  return a1;
}

void sub_1CD45D904(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1 != -8192 && v1 != -4096 && v1 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((void *)(a1 + 8));
  }

  JUMPOUT(0x1D25D9CE0);
}

void llvm::callDefaultCtor<llvm::BlockFrequencyInfoWrapperPass>()
{
}

void sub_1CD45D9A4(_WORD *a1, long long *a2, uint64_t *a3)
{
  sub_1CB883A14((uint64_t)&qword_1EBCC3D38, 0, 0);
  dword_1EBCC3DB8 = 0;
  qword_1EBCC3DC0 = (uint64_t)&unk_1F2600F38;
  unk_1EBCC3DC8 = 0;
  qword_1EBCC3D38 = (uint64_t)&unk_1F2600E80;
  qword_1EBCC3DD0 = (uint64_t)&unk_1F2600EE8;
  unk_1EBCC3DD8 = &qword_1EBCC3D38;
  qword_1EBCC3DE0 = (uint64_t)&unk_1EBCC3DF0;
  qword_1EBCC3DE8 = 0x800000000;
  qword_1EBCC3F70 = (uint64_t)&unk_1F26010D8;
  qword_1EBCC3F88 = (uint64_t)&qword_1EBCC3F70;
  sub_1CD45DAA8(a1, a2, a3);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCC3D38);
}

void sub_1CD45DAA8(_WORD *a1, long long *a2, uint64_t *a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCC3D38, "view-block-freq-propagation-dags", 0x20uLL);
  word_1EBCC3D42 = (32 * (*a1 & 3)) | word_1EBCC3D42 & 0xFF9F;
  xmmword_1EBCC3D58 = *a2;

  sub_1CBF7A820(a3, (uint64_t)&qword_1EBCC3D38);
}

void sub_1CD45DB30()
{
}

void *sub_1CD45DB44()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F26010D8;
  return result;
}

void sub_1CD45DB7C(uint64_t a1, void *a2)
{
  *a2 = &unk_1F26010D8;
}

void sub_1CD45DBA8()
{
}

uint64_t sub_1CD45DC8C(uint64_t a1, char *a2, _WORD *a3, _OWORD *a4)
{
  uint64_t v8 = sub_1CB883A14(a1, 0, 0);
  *(void *)(v8 + 128) = 0;
  *(void *)(v8 + 136) = 0;
  *(void *)(v8 + 168) = 0;
  *(void *)(v8 + 176) = 0;
  *(unsigned char *)(v8 + 184) = 0;
  *(void *)(v8 + 160) = 0;
  *(void *)(v8 + 144) = 0;
  *(void *)(v8 + 152) = &unk_1F2643C20;
  *(void *)uint64_t v8 = &unk_1F2643FD0;
  *(void *)(v8 + 192) = &unk_1F2643EA0;
  *(void *)(v8 + 200) = &unk_1F25F6428;
  *(void *)(v8 + 224) = v8 + 200;
  size_t v9 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v9);
  *(_WORD *)(a1 + 10) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  *(_OWORD *)(a1 + 32) = *a4;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void sub_1CD45DDA0(_WORD *a1, long long *a2, uint64_t *a3)
{
  sub_1CB883A14((uint64_t)&llvm::PGOViewCounts, 0, 0);
  dword_1EBD02A18 = 0;
  qword_1EBD02A20 = (uint64_t)&unk_1F2601030;
  unk_1EBD02A28 = 0;
  llvm::PGOViewCounts = (uint64_t)&unk_1F2600F78;
  qword_1EBD02A30 = (uint64_t)&unk_1F2600FE0;
  unk_1EBD02A38 = &llvm::PGOViewCounts;
  qword_1EBD02A40 = (uint64_t)&unk_1EBD02A50;
  qword_1EBD02A48 = 0x800000000;
  qword_1EBD02BD0 = (uint64_t)&unk_1F2601120;
  qword_1EBD02BE8 = (uint64_t)&qword_1EBD02BD0;
  sub_1CD45DEA4(a1, a2, a3);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::PGOViewCounts);
}

void sub_1CD45DEA4(_WORD *a1, long long *a2, uint64_t *a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&llvm::PGOViewCounts, "pgo-view-counts", 0xFuLL);
  word_1EBD029A2 = (32 * (*a1 & 3)) | word_1EBD029A2 & 0xFF9F;
  xmmword_1EBD029B8 = *a2;

  sub_1CBF7AB24(a3, (uint64_t)&llvm::PGOViewCounts);
}

void sub_1CD45DF2C()
{
}

void *sub_1CD45DF40()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F2601120;
  return result;
}

void sub_1CD45DF78(uint64_t a1, void *a2)
{
  *a2 = &unk_1F2601120;
}

void sub_1CD45DFA4()
{
}

void sub_1CD45E088(uint64_t a1)
{
  int v38 = 0;
  std::string v39 = 0;
  uint64_t v40 = 0;
  sub_1CBF7D058(a1, &v38);
  uint64_t v2 = v38;
  if (v38 == v39) {
    goto LABEL_2;
  }
  v36[0] = 0;
  v36[1] = 0;
  int v37 = 0;
  sub_1CD45F30C(&__p, (v39 - v38) >> 3);
  uint64_t v32 = 0;
  __int16 v33 = 0;
  int v3 = v38;
  if (v39 != v38)
  {
    uint64_t v4 = 0;
    __int16 v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      v31[0] = *(void *)&v3[8 * v7];
      uint64_t v8 = v31[0];
      sub_1CD45F378((uint64_t)v36, v31)[1] = v7;
      LODWORD(v41) = sub_1CBF7A45C(a1, v8);
      uint64_t FloatingBlockFreq = llvm::BlockFrequencyInfoImplBase::getFloatingBlockFreq(a1, &v41);
      uint64_t v10 = (char *)__p + v4;
      *(void *)uint64_t v10 = FloatingBlockFreq;
      *((_WORD *)v10 + 4) = v11;
      unint64_t v12 = sub_1CD45F614(v6, v5, *(void *)((char *)__p + v4), *(_WORD *)((char *)__p + v4 + 8));
      uint64_t v32 = v12;
      __int16 v5 = v13;
      __int16 v33 = v13;
      if (v13 < 0x4000)
      {
        unint64_t v6 = v12;
      }
      else
      {
        unint64_t v6 = -1;
        uint64_t v32 = -1;
        __int16 v5 = 0x3FFF;
        __int16 v33 = 0x3FFF;
      }
      ++v7;
      int v3 = v38;
      v4 += 16;
    }
    while (v7 < (v39 - v38) >> 3);
  }
  std::string::size_type v14 = (char *)__p;
  int v15 = v35;
  while (v14 != v15)
  {
    sub_1CBF7DF38((uint64_t)v14, (uint64_t)&v32);
    v14 += 16;
  }
  memset(v31, 0, sizeof(v31));
  sub_1CD45ECBC(a1, (uint64_t *)&v38, (uint64_t)v36, (uint64_t)v31);
  sub_1CBF7E058(v31, (uint64_t *)&__p);
  uint64_t v16 = *(void *)(a1 + 128);
  uint64_t v17 = v16 + 72;
  uint64_t v18 = *(void *)(v16 + 80);
  if (v18 != v16 + 72)
  {
    while (1)
    {
      if (v18) {
        uint64_t v19 = (void **)(v18 - 24);
      }
      else {
        uint64_t v19 = 0;
      }
      unsigned int v20 = sub_1CBF7A45C(a1, (uint64_t)v19);
      if (v20 == -1) {
        goto LABEL_22;
      }
      unsigned int v21 = v20;
      if (!v37) {
        goto LABEL_24;
      }
      unsigned int v22 = (v37 - 1) & ((v19 >> 4) ^ (v19 >> 9));
      uint64_t v23 = *(void ***)(v36[0] + 16 * v22);
      if (v19 != v23) {
        break;
      }
LABEL_21:
      int v41 = v19;
      __int16 v24 = sub_1CD45F378((uint64_t)v36, (uint64_t *)&v41);
      uint64_t v25 = (char *)__p + 16 * v24[1];
      uint64_t v26 = *(void *)(a1 + 8) + 24 * v21;
      __int16 v27 = *((_WORD *)v25 + 4);
      *(void *)uint64_t v26 = *(void *)v25;
      *(_WORD *)(v26 + 8) = v27;
LABEL_22:
      uint64_t v18 = *(void *)(v18 + 8);
      if (v18 == v17) {
        goto LABEL_25;
      }
    }
    int v29 = 1;
    while (v23 != (void **)-4096)
    {
      unsigned int v30 = v22 + v29++;
      unsigned int v22 = v30 & (v37 - 1);
      uint64_t v23 = *(void ***)(v36[0] + 16 * v22);
      if (v19 == v23) {
        goto LABEL_21;
      }
    }
LABEL_24:
    uint64_t v28 = *(void *)(a1 + 8) + 24 * v20;
    *(void *)uint64_t v28 = 0;
    *(_WORD *)(v28 + 8) = 0;
    goto LABEL_22;
  }
LABEL_25:
  int v41 = (void **)v31;
  sub_1CBF7EDF0(&v41);
  if (__p)
  {
    char v35 = (char *)__p;
    operator delete(__p);
  }
  MEMORY[0x1D25D9CD0](v36[0], 8);
  uint64_t v2 = v38;
LABEL_2:
  if (v2)
  {
    std::string v39 = v2;
    operator delete(v2);
  }
}

_DWORD *sub_1CD45E338(_DWORD *a1)
{
  int v2 = a1[2];
  uint64_t result = (_DWORD *)sub_1CBF7A338((uint64_t)a1);
  int v4 = 1 << (33 - __clz(v2 - 1));
  if (v4 <= 64) {
    int v4 = 64;
  }
  if (v2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5 == a1[4])
  {
    *((void *)a1 + 1) = 0;
    if (v5)
    {
      unint64_t v6 = *(void **)a1;
      uint64_t v7 = 56 * v5;
      do
      {
        *unint64_t v6 = -4096;
        v6 += 7;
        v7 -= 56;
      }
      while (v7);
    }
  }
  else
  {
    MEMORY[0x1D25D9CD0](*(void *)a1, 8);
    return sub_1CBF7A0E8(a1, v5);
  }
  return result;
}

void sub_1CD45E3EC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a1;
  int v8 = -1;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v11 = 1;
  for (uint64_t i = 56; i != 120; i += 16)
    *(_DWORD *)((char *)&v7 + i) = -1;
  sub_1CD45E558((llvm::bfi_detail::IrreducibleGraph *)&v7, a2, a1);
  llvm::BlockFrequencyInfoImplBase::analyzeIrreducible(a1, (uint64_t)&v7, a2, a3);
}

_DWORD *sub_1CD45E50C(_DWORD *result, int a2)
{
  if (a2)
  {
    unint64_t v2 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v3 = v2 | (v2 >> 2) | ((v2 | (v2 >> 2)) >> 4);
    unsigned int v4 = ((v3 | (v3 >> 8)) >> 16) | v3 | (v3 >> 8);
    if (result[4] <= v4) {
      return sub_1CBB29E58((uint64_t)result, v4 + 1);
    }
  }
  return result;
}

_DWORD *sub_1CD45E558(llvm::bfi_detail::IrreducibleGraph *this, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    llvm::bfi_detail::IrreducibleGraph::addNodesInLoop((uint64_t)this, a2);
    uint64_t v8 = *(unsigned int *)(a2 + 104);
    if (v8)
    {
      long long v9 = *(unsigned int **)(a2 + 96);
      uint64_t v10 = 4 * v8;
      do
      {
        unsigned int v11 = *v9++;
        unsigned int v14 = v11;
        sub_1CD45E650((uint64_t)this, &v14, a2, a3);
        v10 -= 4;
      }
      while (v10);
    }
  }
  else
  {
    llvm::bfi_detail::IrreducibleGraph::addNodesInFunction((uint64_t *)this);
    if (*(void *)(*(void *)this + 72) != *(void *)(*(void *)this + 64))
    {
      unsigned int v5 = 1;
      do
      {
        unsigned int v13 = v5 - 1;
        sub_1CD45E650((uint64_t)this, &v13, 0, a3);
      }
      while (0xAAAAAAAAAAAAAAABLL
            * ((uint64_t)(*(void *)(*(void *)this + 72) - *(void *)(*(void *)this + 64)) >> 3) > v5++);
    }
  }
  uint64_t result = sub_1CD45E940((_DWORD *)this + 12, (_DWORD *)this + 2);
  *((void *)this + 2) = *((void *)result + 1);
  return result;
}

void sub_1CD45E650(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v7 = sub_1CD45E740(a1 + 48, a2);
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v8 = a1 + 56;
    uint64_t v9 = 4;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(unsigned int *)(a1 + 64);
  }
  if (v8 + 16 * v9 != v7)
  {
    uint64_t v10 = *(unsigned int **)(v7 + 8);
    unsigned int v11 = *a2;
    uint64_t v12 = *(void *)(*(void *)a1 + 64);
    if (sub_1CBF7BDF0((int *)(v12 + 24 * v11)) && (uint64_t v13 = *(void *)(v12 + 24 * v11 + 8), *(unsigned char *)(v13 + 8)))
    {
      uint64_t v14 = *(unsigned int *)(v13 + 24);
      if (v14)
      {
        int v15 = *(unsigned int **)(v13 + 16);
        uint64_t v16 = 16 * v14;
        do
        {
          llvm::bfi_detail::IrreducibleGraph::addEdge(a1, (uint64_t)v10, v15, a3);
          v15 += 4;
          v16 -= 16;
        }
        while (v16);
      }
    }
    else
    {
      sub_1CD45E7BC(&v17, a1, v10, a3);
    }
  }
}

uint64_t sub_1CD45E740(uint64_t a1, _DWORD *a2)
{
  uint64_t v7 = 0;
  int v3 = sub_1CD45E890(a1, a2, &v7);
  uint64_t v4 = a1 + 8;
  if (v3) {
    return v7;
  }
  if (*(_DWORD *)a1)
  {
    uint64_t v6 = 4;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v6 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v6;
}

void sub_1CD45E7BC(uint64_t *a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(*(void *)(*a1 + 136) + 8 * *a3);
  uint64_t v5 = *(void *)(v4 + 40);
  if (v5 != v4 + 40)
  {
    if (v5) {
      uint64_t v6 = (unsigned __int8 *)(v5 - 24);
    }
    else {
      uint64_t v6 = 0;
    }
    if (v6[16] - 29 <= 0xA)
    {
      int NumSuccessors = llvm::Instruction::getNumSuccessors((llvm::Instruction *)v6);
      if (NumSuccessors)
      {
        int v12 = NumSuccessors;
        for (unsigned int i = 0; i != v12; ++i)
        {
          uint64_t Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v6, i);
          unsigned int v15 = sub_1CBF7A45C(*a1, Successor);
          llvm::bfi_detail::IrreducibleGraph::addEdge(a2, (uint64_t)a3, &v15, a4);
        }
      }
    }
  }
}

uint64_t sub_1CD45E890(uint64_t a1, _DWORD *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (37 * *a2) & (v4 - 1);
  uint64_t v7 = (_DWORD *)(v3 + 16 * v6);
  int v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -1)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -2;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (_DWORD *)(v3 + 16 * (v13 & v5));
      int v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_DWORD *sub_1CD45E940(_DWORD *a1, _DWORD *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CD45E890((uint64_t)a1, a2, &v7);
  int v5 = v7;
  if ((v4 & 1) == 0)
  {
    int v5 = sub_1CD45E9A8(a1, (uint64_t)a2, a2, v7);
    _DWORD *v5 = *a2;
    *((void *)v5 + 1) = 0;
  }
  return v5;
}

_DWORD *sub_1CD45E9A8(_DWORD *a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1CD45EA68((uint64_t)a1, v7);
  uint64_t v9 = 0;
  sub_1CD45E890((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  *a1 += 2;
  if (*a4 != -1) {
    --a1[1];
  }
  return a4;
}

uint64_t sub_1CD45EA68(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD45EBF0(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = 0;
  uint64_t v9 = v14;
  do
  {
    unsigned int v10 = *(_DWORD *)(a1 + v8 + 8);
    if (v10 <= 0xFFFFFFFD)
    {
      *(_DWORD *)uint64_t v9 = v10;
      *((void *)v9 + 1) = *(void *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CD45EBF0(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1CD45EBF0(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (_DWORD *)(result + 8);
    uint64_t v9 = (_DWORD *)(result + 72);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    uint64_t v8 = *(_DWORD **)(result + 8);
    uint64_t v9 = &v8[4 * v7];
  }
  do
  {
    *uint64_t v8 = -1;
    v8 += 4;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CD45E890((uint64_t)v5, (_DWORD *)a2, &v11);
      unsigned int v10 = v11;
      *uint64_t v11 = *(_DWORD *)a2;
      *((void *)v10 + 1) = *(void *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

void sub_1CD45ECBC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  unint64_t v8 = (v6 - *a2) >> 3;
  sub_1CD45F678(v77, v8);
  unint64_t v65 = v8;
  sub_1CD45F30C(v76, v8);
  uint64_t v63 = v7;
  uint64_t v64 = v6;
  if (v6 != v7)
  {
    uint64_t v39 = 0;
    if (v65 <= 1) {
      uint64_t v40 = 1;
    }
    else {
      uint64_t v40 = v65;
    }
    do
    {
      uint64_t v41 = *(void *)(*a2 + 8 * v39);
      *(void *)unsigned int v73 = v75;
      *(void *)&v73[8] = v75;
      *(void *)&v73[16] = 2;
      int v74 = 0;
      uint64_t v42 = *(void *)(v41 + 40);
      if (v42 != v41 + 40)
      {
        uint64_t v43 = v42 ? (unsigned __int8 *)(v42 - 24) : 0;
        if (v43[16] - 29 <= 0xA)
        {
          int NumSuccessors = llvm::Instruction::getNumSuccessors((llvm::Instruction *)v43);
          if (NumSuccessors)
          {
            int v45 = NumSuccessors;
            for (unsigned int i = 0; i != v45; ++i)
            {
              uint64_t Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v43, i);
              *(void *)&long long v71 = 0;
              if (sub_1CD40EA84(*(void *)a3, *(_DWORD *)(a3 + 16), Successor, &v71)) {
                BOOL v48 = (void)v71 == *(void *)a3 + 16 * *(unsigned int *)(a3 + 16);
              }
              else {
                BOOL v48 = 1;
              }
              if (!v48)
              {
                sub_1CB89694C((llvm::SmallPtrSetImplBase *)v73, Successor);
                if (v49)
                {
                  unsigned int EdgeProbability = llvm::BranchProbabilityInfo::getEdgeProbability(*(void *)(a1 + 112), v41, Successor);
                  if (EdgeProbability)
                  {
                    unint64_t v51 = llvm::ScaledNumbers::divide64(EdgeProbability, 0x80000000uLL);
                    __int16 v67 = v52;
                    unint64_t v68 = v51;
                    uint64_t v66 = v52;
                    *(void *)&long long v71 = 0;
                    int v53 = sub_1CD40EA84(*(void *)a3, *(_DWORD *)(a3 + 16), Successor, &v71);
                    uint64_t v54 = v71;
                    if (!v53) {
                      uint64_t v54 = *(void *)a3 + 16 * *(unsigned int *)(a3 + 16);
                    }
                    *(void *)&long long v71 = *(void *)(v54 + 8);
                    *((void *)&v71 + 1) = v68;
                    uint64_t v72 = v66;
                    uint64_t v55 = v77[0] + 24 * v39;
                    unint64_t v56 = *(void *)(v55 + 8);
                    unint64_t v57 = *(void *)(v55 + 16);
                    uint64_t v58 = (char **)(v55 + 8);
                    if (v56 >= v57)
                    {
                      uint64_t v60 = sub_1CBF56DE8((void **)(v77[0] + 24 * v39), (uint64_t)&v71);
                    }
                    else
                    {
                      long long v59 = v71;
                      *(void *)(v56 + 16) = v72;
                      *(_OWORD *)unint64_t v56 = v59;
                      uint64_t v60 = (char *)(v56 + 24);
                    }
                    *uint64_t v58 = v60;
                    unint64_t v61 = (char *)v76[0] + 16 * v39;
                    *(void *)unint64_t v61 = sub_1CD45F614(*(void *)v61, *((_WORD *)v61 + 4), v68, v67);
                    *((_WORD *)v61 + 4) = v62;
                    if (v62 >= 0x4000)
                    {
                      *(void *)unint64_t v61 = -1;
                      *((_WORD *)v61 + 4) = 0x3FFF;
                    }
                  }
                }
              }
            }
            if (*(void *)&v73[8] != *(void *)v73) {
              free(*(void **)&v73[8]);
            }
          }
        }
      }
      ++v39;
    }
    while (v39 != v40);
  }
  sub_1CD45F678(v73, v65);
  sub_1CD45F718((void **)a4);
  *(_OWORD *)a4 = *(_OWORD *)v73;
  *(void *)(a4 + 16) = *(void *)&v73[16];
  memset(v73, 0, sizeof(v73));
  *(void *)&long long v71 = v73;
  sub_1CBF7EDF0((void ***)&v71);
  if (v6 != v63)
  {
    uint64_t v9 = 0;
    if (v65 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v65;
    }
    do
    {
      uint64_t v11 = (uint64_t **)(v77[0] + 24 * v9);
      BOOL v12 = *v11;
      uint64_t v13 = v11[1];
      while (v12 != v13)
      {
        uint64_t v14 = *v12;
        long long v71 = *(_OWORD *)(v12 + 1);
        uint64_t v15 = *(void ***)a4;
        *(void *)unsigned int v73 = v71;
        *(_WORD *)&v73[8] = WORD4(v71);
        long long v16 = *(_OWORD *)sub_1CBF7DF38((uint64_t)v73, (uint64_t)v76[0] + 16 * v9);
        *(void *)unsigned int v73 = v9;
        *(_OWORD *)&v73[8] = v16;
        uint64_t v17 = &v15[3 * v14];
        uint64_t v18 = (char *)v17[1];
        uint64_t v19 = (char *)v17[2];
        unsigned int v20 = (char **)(v17 + 1);
        if (v18 >= v19)
        {
          unsigned int v22 = sub_1CBF56DE8(&v15[3 * v14], (uint64_t)v73);
        }
        else
        {
          long long v21 = *(_OWORD *)v73;
          *((void *)v18 + 2) = *(void *)&v73[16];
          *(_OWORD *)uint64_t v18 = v21;
          unsigned int v22 = v18 + 24;
        }
        uint64_t *v20 = v22;
        v12 += 3;
      }
      ++v9;
    }
    while (v9 != v10);
  }
  uint64_t v23 = *(void *)(*(void *)(a1 + 128) + 80);
  if (v23) {
    uint64_t v24 = v23 - 24;
  }
  else {
    uint64_t v24 = 0;
  }
  *(void *)unsigned int v73 = 0;
  int v25 = sub_1CD40EA84(*(void *)a3, *(_DWORD *)(a3 + 16), v24, v73);
  uint64_t v26 = *(void *)v73;
  if (!v25) {
    uint64_t v26 = *(void *)a3 + 16 * *(unsigned int *)(a3 + 16);
  }
  if (v64 != v63)
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = *(void *)(v26 + 8);
    if (v65 <= 1) {
      uint64_t v30 = 1;
    }
    else {
      uint64_t v30 = v65;
    }
    long long v31 = xmmword_1CD91D2E0;
    do
    {
      if (*(void *)(v77[0] + v27) == *(void *)(v77[0] + v27 + 8))
      {
        uint64_t v32 = *(void ***)a4;
        *(void *)unsigned int v73 = v28;
        *(_OWORD *)&v73[8] = v31;
        __int16 v33 = &v32[3 * v29];
        uint64_t v34 = (char *)v33[1];
        char v35 = (char *)v33[2];
        unint64_t v36 = (char **)(v33 + 1);
        if (v34 >= v35)
        {
          int v38 = sub_1CBF56DE8(&v32[3 * v29], (uint64_t)v73);
          long long v31 = xmmword_1CD91D2E0;
        }
        else
        {
          long long v37 = *(_OWORD *)v73;
          *((void *)v34 + 2) = *(void *)&v73[16];
          *(_OWORD *)uint64_t v34 = v37;
          int v38 = v34 + 24;
        }
        llvm::raw_ostream *v36 = v38;
      }
      ++v28;
      v27 += 24;
    }
    while (v30 != v28);
  }
  if (v76[0])
  {
    v76[1] = v76[0];
    operator delete(v76[0]);
  }
  *(void *)unsigned int v73 = v77;
  sub_1CBF7EDF0((void ***)v73);
}

void sub_1CD45F140(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1CD45F1CC((uint64_t)a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1CD45F1CC(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
LABEL_4:
    uint64_t v5 = *(void **)(a1 + 8);
    *(void *)&long long v15 = *v5;
    *(void *)(a1 + 8) = v5 + 1;
    sub_1CB904CD8(a1, &v15);
    return;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = v6 - *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = v8 - *(void *)a1;
  if (v7 < v9)
  {
    if (v8 != v6)
    {
      *(void *)&long long v15 = operator new(0x1000uLL);
      sub_1CD3F23B4(a1, &v15);
      return;
    }
    *(void *)&long long v15 = operator new(0x1000uLL);
    sub_1CD3F24DC((void **)a1, &v15);
    goto LABEL_4;
  }
  if (v8 == *(void *)a1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = v9 >> 2;
  }
  uint64_t v17 = a1 + 24;
  if (v10 >> 61) {
    sub_1CB833614();
  }
  *(void *)&long long v15 = operator new(8 * v10);
  *((void *)&v15 + 1) = v15 + v7;
  *(void *)&long long v16 = v15 + v7;
  *((void *)&v16 + 1) = v15 + 8 * v10;
  uint64_t v14 = operator new(0x1000uLL);
  sub_1CD3F23B4((uint64_t)&v15, &v14);
  for (unsigned int i = *(void **)(a1 + 16); i != *(void **)(a1 + 8); sub_1CD3F24DC((void **)&v15, i))
    --i;
  BOOL v12 = *(void **)a1;
  long long v13 = v16;
  *(_OWORD *)a1 = v15;
  *(_OWORD *)(a1 + 16) = v13;
  if (v12) {
    operator delete(v12);
  }
}

void *sub_1CD45F30C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 60) {
      abort();
    }
    size_t v4 = 16 * a2;
    uint64_t v5 = (char *)operator new(16 * a2);
    *a1 = v5;
    uint64_t v6 = &v5[16 * a2];
    a1[2] = v6;
    bzero(v5, v4);
    a1[1] = v6;
  }
  return a1;
}

void *sub_1CD45F378(uint64_t a1, uint64_t *a2)
{
  unint64_t v7 = 0;
  char v4 = sub_1CD40EA84(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD45F3E4(a1, a2, v7);
    void *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void *sub_1CD45F3E4(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD45F498(a1, v6);
  uint64_t v8 = 0;
  sub_1CD40EA84(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CD45F498(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  char v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD45F564(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD45F564(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      BOOL v12 = 0;
      uint64_t result = sub_1CD40EA84(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v12);
      uint64_t v10 = v12;
      uint64_t v11 = a2[1];
      *BOOL v12 = *a2;
      v10[1] = v11;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

unint64_t sub_1CD45F614(unint64_t a1, __int16 a2, unint64_t a3, __int16 a4)
{
  unint64_t v9 = a1;
  __int16 v8 = a2;
  unint64_t v7 = a3;
  __int16 v6 = a4;
  sub_1CBF7EC1C(&v9, &v8, &v7, &v6);
  unint64_t v4 = v7 + v9;
  if (__CFADD__(v7, v9)) {
    return (v4 >> 1) | 0x8000000000000000;
  }
  return v4;
}

void *sub_1CD45F678(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      abort();
    }
    uint64_t v3 = 3 * a2;
    uint64_t v4 = 24 * a2;
    uint64_t v5 = (char *)operator new(24 * a2);
    *a1 = v5;
    a1[2] = &v5[8 * v3];
    size_t v6 = 24 * ((v4 - 24) / 0x18uLL) + 24;
    bzero(v5, v6);
    a1[1] = &v5[v6];
  }
  return a1;
}

void sub_1CD45F718(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      uint64_t v5 = v3;
      do
      {
        unint64_t v7 = (void *)*((void *)v5 - 3);
        v5 -= 24;
        size_t v6 = v7;
        if (v7)
        {
          *((void *)v3 - 2) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1CD45F78C(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1CD3F223C((uint64_t)a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[4] + a1[5];
  }
  *(void *)(*(void *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

uint64_t sub_1CD45F81C(unint64_t a1, __int16 a2, unint64_t a3, unsigned __int16 a4)
{
  unint64_t v19 = a1;
  __int16 v18 = a2;
  unint64_t v17 = a3;
  unsigned __int16 v16 = a4;
  sub_1CBF7EC1C(&v19, &v18, &v17, (__int16 *)&v16);
  uint64_t v6 = v19 - v17;
  if (v19 <= v17) {
    return 0;
  }
  if (a3 && !v17)
  {
    int v7 = __clz(a3);
    unint64_t v8 = (v7 ^ 0x3F) + a4;
    uint64_t v9 = 1 << (v7 ^ 0x3Fu);
    uint64_t v10 = 1 << (62 - v7);
    BOOL v11 = (v10 & a3) == 0;
    if ((v10 & a3) != 0) {
      uint64_t v12 = (v8 + 1);
    }
    else {
      uint64_t v12 = v8;
    }
    unint64_t v13 = 0x100000000;
    if (v11) {
      unint64_t v13 = 0xFFFFFFFF00000000;
    }
    unint64_t v14 = v13 | v12;
    if (v9 == a3) {
      unint64_t v14 = v8;
    }
    if (sub_1CBF7ECD0(v19, v18, 1uLL, (__int16)(v14 - (SHIDWORD(v14) > 0) + 64))) {
      return v19;
    }
    else {
      return -1;
    }
  }
  return v6;
}

uint64_t **sub_1CD45F910(uint64_t **a1, uint64_t **a2, char a3, llvm::Twine *this)
{
  v8[0] = a1;
  v8[1] = a2;
  char v10 = a3;
  uint64_t v11 = 0;
  char v9 = 0;
  llvm::Twine::str(this, __p);
  sub_1CD45F974(v8, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

llvm::raw_ostream *sub_1CD45F974(uint64_t ***a1, uint64_t a2)
{
  sub_1CD45F9F8((uint64_t)a1, a2);
  uint64_t v3 = *(void *)(**a1[1] + 128);
  uint64_t v4 = v3 + 72;
  for (uint64_t i = *(void *)(v3 + 80); i != v4; uint64_t i = *(void *)(i + 8))
  {
    if (i) {
      uint64_t v6 = (llvm::Value *)(i - 24);
    }
    else {
      uint64_t v6 = 0;
    }
    sub_1CBF7F2D4(a1, v6);
  }
  char v7 = *a1;

  return sub_1CB8E509C((llvm::raw_ostream *)v7, "}\n");
}

void sub_1CD45F9F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = ***(void ***)(a1 + 8);
  if (v4) {
    uint64_t v5 = *(llvm::Value **)(v4 + 128);
  }
  else {
    uint64_t v5 = 0;
  }
  Name = llvm::Value::getName(v5);
  std::string::__init(&v32, Name, v7);
  char v8 = *(unsigned char *)(a2 + 23);
  int v9 = v8;
  uint64_t v10 = v8 & 0x7F;
  if (v9 < 0) {
    uint64_t v10 = *(void *)(a2 + 8);
  }
  if (v10)
  {
    uint64_t v11 = sub_1CB8E509C(*(llvm::raw_ostream **)a1, "digraph \"");
    uint64_t v12 = (std::string *)a2;
  }
  else
  {
    std::string::size_type size = *((unsigned char *)&v32.__r_.__value_.__s + 23) & 0x7F;
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v32.__r_.__value_.__l.__size_;
    }
    uint64_t v26 = *(llvm::raw_ostream **)a1;
    if (!size)
    {
      sub_1CB8E509C(v26, "digraph unnamed {\n");
      goto LABEL_15;
    }
    uint64_t v11 = sub_1CB8E509C(v26, "digraph \"");
    uint64_t v12 = &v32;
  }
  llvm::DOT::EscapeString((char *)v12, (uint64_t)&__p);
  if (v31 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  if (v31 >= 0) {
    size_t v14 = v31 & 0x7F;
  }
  else {
    size_t v14 = v30;
  }
  long long v15 = llvm::raw_ostream::write(v11, p_p, v14);
  sub_1CB8E509C(v15, "\" {\n");
  if (v31 < 0) {
    operator delete(__p);
  }
LABEL_15:
  char v16 = *(unsigned char *)(a2 + 23);
  int v17 = v16;
  uint64_t v18 = v16 & 0x7F;
  if (v17 < 0) {
    uint64_t v18 = *(void *)(a2 + 8);
  }
  if (v18)
  {
    unint64_t v19 = sub_1CB8E509C(*(llvm::raw_ostream **)a1, "\tlabel=\"");
    llvm::DOT::EscapeString((char *)a2, (uint64_t)&__p);
    if (v31 >= 0) {
      unsigned int v20 = (const char *)&__p;
    }
    else {
      unsigned int v20 = (const char *)__p;
    }
    if (v31 >= 0) {
      size_t v21 = v31 & 0x7F;
    }
    else {
      size_t v21 = v30;
    }
    unsigned int v22 = v19;
    goto LABEL_25;
  }
  std::string::size_type v27 = *((unsigned char *)&v32.__r_.__value_.__s + 23) & 0x7F;
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v27 = v32.__r_.__value_.__l.__size_;
  }
  if (v27)
  {
    uint64_t v28 = sub_1CB8E509C(*(llvm::raw_ostream **)a1, "\tlabel=\"");
    llvm::DOT::EscapeString((char *)&v32, (uint64_t)&__p);
    if (v31 >= 0) {
      unsigned int v20 = (const char *)&__p;
    }
    else {
      unsigned int v20 = (const char *)__p;
    }
    if (v31 >= 0) {
      size_t v21 = v31 & 0x7F;
    }
    else {
      size_t v21 = v30;
    }
    unsigned int v22 = v28;
LABEL_25:
    uint64_t v23 = llvm::raw_ostream::write(v22, v20, v21);
    sub_1CB8E509C(v23, "\";\n");
    if (v31 < 0) {
      operator delete(__p);
    }
  }
  uint64_t v24 = *(llvm::raw_ostream **)a1;
  char v31 = 0;
  LOBYTE(__p) = 0;
  llvm::raw_ostream::write(v24, (const char *)&__p, 0);
  if (v31 < 0) {
    operator delete(__p);
  }
  sub_1CB8E509C(*(llvm::raw_ostream **)a1, "\n");
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
}

void sub_1CD45FC60(uint64_t a1, unint64_t a2, llvm::Instruction *this, unsigned int a4)
{
  uint64_t Successor = llvm::Instruction::getSuccessor(this, a4);
  if (Successor)
  {
    unint64_t v9 = Successor;
    uint64_t v10 = **(uint64_t ***)(a1 + 8);
    if (*v10) {
      uint64_t v11 = *(void *)(*v10 + 112);
    }
    else {
      uint64_t v11 = 0;
    }
    sub_1CD460174(__p, a1 + 24, a2, (uint64_t)this, a4, v10, v11, dword_1EBD02958);
    sub_1CD460084((llvm::raw_ostream **)a1, a2, v9, (uint64_t)__p);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1CD45FD1C(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (!a5) {
    return;
  }
  uint64_t v10 = *(void **)(a2 + 8);
  uint64_t v11 = *a4;
  if (!v10)
  {
    uint64_t v15 = *(void *)(v11 + 128);
    uint64_t v16 = v15 + 72;
    uint64_t v17 = *(void *)(v15 + 80);
    if (v17 == v15 + 72) {
      goto LABEL_4;
    }
    uint64_t v10 = 0;
    do
    {
      uint64_t v18 = *a4;
      if (*a4)
      {
        if (v17) {
          uint64_t v19 = v17 - 24;
        }
        else {
          uint64_t v19 = 0;
        }
        unsigned int v20 = sub_1CBF7A45C(*a4, v19);
        if (v20 == -1) {
          size_t v21 = 0;
        }
        else {
          size_t v21 = *(void **)(*(void *)(v18 + 8) + 24 * v20 + 16);
        }
        uint64_t v10 = *(void **)(a2 + 8);
      }
      else
      {
        size_t v21 = 0;
      }
      if (v10 <= v21) {
        uint64_t v10 = v21;
      }
      *(void *)(a2 + 8) = v10;
      uint64_t v17 = *(void *)(v17 + 8);
    }
    while (v17 != v16);
    uint64_t v11 = *a4;
  }
  if (!v11)
  {
    unint64_t v13 = 0;
    goto LABEL_7;
  }
LABEL_4:
  unsigned int v12 = sub_1CBF7A45C(v11, a3);
  if (v12 == -1) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = *(void *)(*(void *)(v11 + 8) + 24 * v12 + 16);
  }
  uint64_t v10 = *(void **)(a2 + 8);
LABEL_7:
  unsigned int v22 = v10;
  unsigned int BranchProbability = llvm::BranchProbability::getBranchProbability(a5, 0x64uLL);
  if (v13 >= llvm::BlockFrequency::operator*((unint64_t *)&v22, BranchProbability))
  {
    int v23 = 0;
    char v27 = 0;
    uint64_t v28 = 0;
    size_t v30 = a1;
    int v29 = 0;
    unsigned int v22 = &unk_1F2646F30;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    sub_1CB8E509C((llvm::raw_ostream *)&v22, "color=\"red\"");
    if (v26 != v24) {
      llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v22);
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v22);
  }
}

void sub_1CD45FEDC(void *a1, llvm::Value *this, llvm::BlockFrequencyInfoImplBase **a3, int a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  int v20 = 0;
  char v24 = 0;
  uint64_t v25 = 0;
  char v27 = a1;
  int v26 = 0;
  uint64_t v19 = &unk_1F2646F30;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  Name = llvm::Value::getName(this);
  if (v8) {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v19, Name, v8);
  }
  sub_1CB8E509C((llvm::raw_ostream *)&v19, " : ");
  switch(a4)
  {
    case 1:
      unsigned int v12 = *a3;
      if (v12)
      {
        unsigned int v13 = sub_1CBF7A45C((uint64_t)v12, (uint64_t)this);
        if (v13 == -1)
        {
          size_t v14 = 0;
          __int16 v15 = 0;
        }
        else
        {
          uint64_t v18 = *((void *)v12 + 1) + 24 * v13;
          size_t v14 = *(llvm::raw_ostream **)v18;
          __int16 v15 = *(_WORD *)(v18 + 8);
        }
        llvm::ScaledNumberBase::print((llvm::ScaledNumberBase *)&v19, v14, v15, 64, 0xAu);
      }
      break;
    case 2:
      uint64_t v16 = (uint64_t)*a3;
      if (!v16 || (unsigned int v17 = sub_1CBF7A45C(v16, (uint64_t)this), v17 == -1)) {
        unint64_t v11 = 0;
      }
      else {
        unint64_t v11 = *(void *)(*(void *)(v16 + 8) + 24 * v17 + 16);
      }
LABEL_14:
      sub_1CD098D14((llvm::raw_ostream *)&v19, v11, 0, 0, 0);
      break;
    case 3:
      uint64_t BlockProfileCount = llvm::BlockFrequencyInfo::getBlockProfileCount(a3, this, 0);
      if (!v10)
      {
        sub_1CB8E509C((llvm::raw_ostream *)&v19, "Unknown");
        break;
      }
      unint64_t v11 = BlockProfileCount;
      goto LABEL_14;
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v19);
}

llvm::raw_ostream *sub_1CD460084(llvm::raw_ostream **a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  size_t v8 = sub_1CB8E509C(*a1, "\tNode");
  llvm::write_hex(v8, a2, 3, 0, 0);
  unint64_t v9 = sub_1CB8E509C(*a1, " -> Node");
  llvm::write_hex(v9, a3, 3, 0, 0);
  char v10 = *(unsigned char *)(a4 + 23);
  int v11 = v10;
  uint64_t v12 = v10 & 0x7F;
  if (v11 < 0) {
    uint64_t v12 = *(void *)(a4 + 8);
  }
  if (v12)
  {
    unsigned int v13 = sub_1CB8E509C(*a1, "[");
    char v14 = *(unsigned char *)(a4 + 23);
    BOOL v15 = v14 < 0;
    if (v14 >= 0) {
      uint64_t v16 = (const char *)a4;
    }
    else {
      uint64_t v16 = *(const char **)a4;
    }
    size_t v17 = v14 & 0x7F;
    if (v15) {
      size_t v18 = *(void *)(a4 + 8);
    }
    else {
      size_t v18 = v17;
    }
    uint64_t v19 = llvm::raw_ostream::write(v13, v16, v18);
    sub_1CB8E509C(v19, "]");
  }
  int v20 = *a1;

  return sub_1CB8E509C(v20, ";\n");
}

void sub_1CD460174(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6, uint64_t a7, unsigned int a8)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a7)
  {
    unsigned int EdgeProbability = llvm::BranchProbabilityInfo::getEdgeProbability(a7, a3, a5);
    int v20 = 0;
    char v24 = 0;
    uint64_t v25 = 0;
    char v27 = a1;
    int v26 = 0;
    uint64_t v19 = &unk_1F2646F30;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    v18[0] = (unint64_t)&unk_1F25F6490;
    v18[1] = (unint64_t)"label=\"%.1f%%\"";
    *(double *)&void v18[2] = (double)EdgeProbability * 100.0 * 4.65661287e-10;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v19, (uint64_t)v18);
    if (a8)
    {
      uint64_t v14 = *a6;
      if (!v14 || (unsigned int v15 = sub_1CBF7A45C(v14, a3), v15 == -1)) {
        unint64_t v16 = 0;
      }
      else {
        unint64_t v16 = *(void *)(*(void *)(v14 + 8) + 24 * v15 + 16);
      }
      v18[0] = v16;
      unint64_t v17 = llvm::BlockFrequency::operator*(v18, EdgeProbability);
      v18[0] = *(void *)(a2 + 8);
      if (v17 >= llvm::BlockFrequency::operator*(v18, (unint64_t)(((((unint64_t)a8 << 31) | 0x30) * (unsigned __int128)0xA3D70A3D70A3D70BLL) >> 64) >> 6))sub_1CB8E509C((llvm::raw_ostream *)&v19, ",color=\"red\""); {
    }
      }
    if (v23 != v21) {
      llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v19);
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v19);
  }
}

llvm::raw_ostream *llvm::bfi_detail::BlockMass::dump(llvm::bfi_detail::BlockMass *this)
{
  unint64_t v2 = llvm::dbgs(this);

  return llvm::bfi_detail::BlockMass::print(this, v2);
}

llvm::raw_ostream *llvm::bfi_detail::BlockMass::print(llvm::bfi_detail::BlockMass *this, llvm::raw_ostream *a2)
{
  for (uint64_t i = 60; i != -4; i -= 4)
  {
    uint64_t v5 = (*(void *)this >> i) & 0xFLL;
    if (v5 >= 0xA) {
      char v6 = 87;
    }
    else {
      char v6 = 48;
    }
    char v7 = v6 + v5;
    size_t v8 = (char *)*((void *)a2 + 4);
    if ((unint64_t)v8 >= *((void *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, v7);
    }
    else
    {
      *((void *)a2 + 4) = v8 + 1;
      *size_t v8 = v7;
    }
  }
  return a2;
}

uint64_t llvm::BlockFrequencyInfoImplBase::getBlockProfileCount(llvm::BlockFrequencyInfoImplBase *a1, uint64_t ***a2, _DWORD *a3, int a4)
{
  if (*a3 == -1) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = *(void *)(*((void *)a1 + 1) + 24 * *a3 + 16);
  }
  return llvm::BlockFrequencyInfoImplBase::getProfileCountFromFreq(a1, a2, v4, a4);
}

uint64_t llvm::BlockFrequencyInfoImplBase::getProfileCountFromFreq(llvm::BlockFrequencyInfoImplBase *this, uint64_t ***a2, unint64_t a3, int a4)
{
  llvm::Function::getEntryCount(a2, a4, (uint64_t)&v7);
  if (v8)
  {
    int v6 = 128;
    llvm::APInt::initSlowCase((llvm::APInt *)&v5);
  }
  return 0;
}

uint64_t llvm::BlockFrequencyInfoImplBase::isIrrLoopHeader(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = *a2;
  if (v2 == -1) {
    return 0;
  }
  else {
    return sub_1CD460634((uint64_t *)(a1 + 32), v2);
  }
}

uint64_t sub_1CD460634(uint64_t *a1, unsigned int a2)
{
  if (a1[2]
    && (v4 = a2 >> 7, uint64_t v5 = sub_1CBF7CC48(a1, a2 >> 7), v5 != a1)
    && (v7 = *((_DWORD *)v5 + 4), int v6 = v5 + 2, v7 == v4))
  {
    return ((unint64_t)v6[((a2 >> 6) & 1) + 1] >> a2) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::BlockFrequencyInfoImplBase::getFloatingBlockFreq(uint64_t a1, _DWORD *a2)
{
  if (*a2 == -1) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1 + 8) + 24 * *a2);
  }
}

void llvm::BlockFrequencyInfoImplBase::getBlockName(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

llvm::ScaledNumberBase *llvm::BlockFrequencyInfoImplBase::printBlockFreq(uint64_t a1, llvm::ScaledNumberBase *a2, _DWORD *a3)
{
  if (*a3 == -1)
  {
    unsigned int v4 = 0;
    __int16 v5 = 0;
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 8) + 24 * *a3;
    unsigned int v4 = *(llvm::raw_ostream **)v6;
    __int16 v5 = *(_WORD *)(v6 + 8);
  }
  return llvm::ScaledNumberBase::print(a2, v4, v5, 64, 0xAu);
}

void llvm::bfi_detail::IrreducibleGraph::addNodesInLoop(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = **(_DWORD **)(a2 + 96);
  unsigned int v4 = (uint64_t *)(a1 + 24);
  sub_1CD460810((uint64_t *)(a1 + 24), *(unsigned int *)(a2 + 104));
  uint64_t v5 = *(unsigned int *)(a2 + 104);
  if (v5)
  {
    uint64_t v6 = *(int **)(a2 + 96);
    uint64_t v7 = 4 * v5;
    do
    {
      unsigned int v8 = *v6;
      unint64_t v9 = *(void *)(a1 + 32);
      if (v9 >= *(void *)(a1 + 40))
      {
        uint64_t v10 = sub_1CBF832A4(v4, *v6);
      }
      else
      {
        *(_DWORD *)unint64_t v9 = v8;
        uint64_t v10 = v9 + 56;
        *(_OWORD *)(v9 + 4) = 0u;
        *(_OWORD *)(v9 + 20) = 0u;
        *(_OWORD *)(v9 + 36) = 0u;
        *(_DWORD *)(v9 + 52) = 0;
      }
      *(void *)(a1 + 32) = v10;
      *sub_1CBF7CB04((int *)(*(void *)(*(void *)a1 + 64) + 24 * v8)) = 0;
      ++v6;
      v7 -= 4;
    }
    while (v7);
  }
  int v11 = *(_DWORD **)(a1 + 24);
  uint64_t v12 = *(_DWORD **)(a1 + 32);
  if (v11 != v12)
  {
    unsigned int v13 = (_DWORD *)(a1 + 48);
    do
    {
      *((void *)sub_1CD45E940(v13, v11) + 1) = v11;
      v11 += 14;
    }
    while (v11 != v12);
  }
}

void sub_1CD460810(uint64_t *a1, unint64_t a2)
{
  if (0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3) < a2)
  {
    uint64_t v3 = a1[1] - *a1;
    uint64_t v12 = a1 + 2;
    uint64_t v4 = 56 * a2;
    __n128 __p = operator new(56 * a2);
    unint64_t v9 = (char *)__p + v3;
    uint64_t v10 = (void **)((char *)__p + v3);
    int v11 = (char *)__p + v4;
    sub_1CD461884(a1, &__p);
    uint64_t v6 = v9;
    uint64_t v5 = v10;
    if (v10 != (void **)v9)
    {
      do
      {
        uint64_t v7 = (char *)(v5 - 7);
        sub_1CB904DFC(v5 - 6);
        uint64_t v5 = (void **)v7;
      }
      while (v7 != v6);
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

uint64_t *llvm::bfi_detail::IrreducibleGraph::addNodesInFunction(uint64_t *this)
{
  uint64_t v1 = this;
  *((_DWORD *)this + 2) = 0;
  uint64_t v2 = *this;
  uint64_t v3 = *(void *)(*this + 64);
  if (*(void *)(*this + 72) != v3)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    do
    {
      uint64_t v6 = v3 + 24 * v4;
      uint64_t v7 = *(uint64_t **)(v6 + 8);
      unsigned int v8 = (_DWORD *)v6;
      if (v7)
      {
        unsigned int v8 = (_DWORD *)v6;
        if (*((unsigned char *)v7 + 8))
        {
          do
          {
            unint64_t v9 = v7;
            uint64_t v7 = (uint64_t *)*v7;
          }
          while (v7 && *((unsigned char *)v7 + 8));
          unsigned int v8 = (_DWORD *)v9[12];
        }
      }
      if (*v8 == *(_DWORD *)v6)
      {
        unint64_t v10 = v1[4];
        if (v10 >= v1[5])
        {
          uint64_t v11 = sub_1CBF832A4(v1 + 3, v5);
        }
        else
        {
          *(_DWORD *)unint64_t v10 = v5;
          uint64_t v11 = v10 + 56;
          *(_OWORD *)(v10 + 4) = 0u;
          *(_OWORD *)(v10 + 20) = 0u;
          *(_OWORD *)(v10 + 36) = 0u;
          *(_DWORD *)(v10 + 52) = 0;
        }
        v1[4] = v11;
        this = sub_1CBF7CB04((int *)(*(void *)(*v1 + 64) + 24 * v5));
        *this = 0;
        uint64_t v2 = *v1;
      }
      uint64_t v3 = *(void *)(v2 + 64);
      uint64_t v4 = ++v5;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v2 + 72) - v3) >> 3) > v5);
  }
  uint64_t v12 = (_DWORD *)v1[3];
  unsigned int v13 = (_DWORD *)v1[4];
  if (v12 != v13)
  {
    uint64_t v14 = v1 + 6;
    do
    {
      this = (uint64_t *)sub_1CD45E940(v14, v12);
      this[1] = (uint64_t)v12;
      v12 += 14;
    }
    while (v12 != v13);
  }
  return this;
}

void llvm::bfi_detail::IrreducibleGraph::addEdge(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  if (!a4) {
    goto LABEL_13;
  }
  uint64_t v6 = *(unsigned int *)(a4 + 12);
  uint64_t v7 = *(_DWORD **)(a4 + 96);
  if (v6 < 2)
  {
    if (*a3 == *v7) {
      return;
    }
    goto LABEL_13;
  }
  unsigned int v8 = *a3;
  unint64_t v9 = *(unsigned int **)(a4 + 96);
  unint64_t v10 = *(unsigned int *)(a4 + 12);
  do
  {
    unint64_t v11 = v10 >> 1;
    uint64_t v12 = &v9[v10 >> 1];
    unsigned int v14 = *v12;
    unsigned int v13 = v12 + 1;
    v10 += ~(v10 >> 1);
    if (v14 < v8) {
      unint64_t v9 = v13;
    }
    else {
      unint64_t v10 = v11;
    }
  }
  while (v10);
  if (v9 == &v7[v6] || v8 < *v9)
  {
LABEL_13:
    uint64_t v15 = sub_1CD45E740(a1 + 48, a3);
    if (*(unsigned char *)(a1 + 48))
    {
      uint64_t v16 = a1 + 56;
      uint64_t v17 = 4;
    }
    else
    {
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(unsigned int *)(a1 + 64);
    }
    if (v16 + 16 * v17 != v15)
    {
      uint64_t v19 = *(void *)(v15 + 8);
      uint64_t v18 = v19;
      sub_1CD45F140((void *)(a2 + 8), &v19);
      uint64_t v19 = a2;
      sub_1CD460B24((void *)(v18 + 8), &v19);
      ++*(_DWORD *)(v18 + 4);
    }
  }
}

void sub_1CD460B24(void *a1, void *a2)
{
  unint64_t v4 = a1[4];
  if (!v4)
  {
    sub_1CD46260C((uint64_t)a1);
    unint64_t v4 = a1[4];
  }
  uint64_t v5 = a1[1];
  uint64_t v6 = (void *)(v5 + 8 * (v4 >> 9));
  if (a1[2] == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v6 + 8 * (v4 & 0x1FF);
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4096;
  }
  *(void *)(v7 - 8) = *a2;
  uint64_t v8 = a1[5] + 1;
  a1[4] = v4 - 1;
  a1[5] = v8;
}

void llvm::BlockFrequencyInfoImplBase::analyzeIrreducible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a2 + 16);
  LODWORD(v59[0]) = 0;
  v59[1] = 0;
  v59[2] = 0;
  int v60 = 0;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  uint64_t v65 = 0;
  sub_1CD4627C4((int *)v59, v5);
  sub_1CD462880(v59);
  uint64_t v6 = (uint64_t *)*((void *)&v62 + 1);
  uint64_t v7 = (uint64_t *)v63;
  if (*((void *)&v62 + 1) == (void)v63) {
LABEL_2:
  }
    sub_1CD462218((uint64_t)v59);
  uint64_t v56 = a1;
  while ((unint64_t)((char *)v7 - (char *)v6) < 0x10)
  {
LABEL_5:
    sub_1CD462880(v59);
    uint64_t v6 = (uint64_t *)*((void *)&v62 + 1);
    uint64_t v7 = (uint64_t *)v63;
    if (*((void *)&v62 + 1) == (void)v63) {
      goto LABEL_2;
    }
  }
  __base = v72;
  uint64_t v71 = 0x400000000;
  __int16 v67 = v69;
  size_t __nel = 0x400000000;
  uint64_t v8 = 8;
  uint64_t v73 = 1;
  do
  {
    *(uint64_t *)((char *)&v73 + v8) = -4096;
    v8 += 16;
  }
  while (v8 != 136);
  while (v6 != v7)
  {
    uint64_t v9 = *v6++;
    uint64_t v66 = v9;
    *((unsigned char *)sub_1CD4619AC(&v73, &v66) + 8) = 0;
  }
  unint64_t v10 = sub_1CD461934((int *)&v73);
  unint64_t v12 = v73;
  unsigned int v13 = (char *)v74;
  if (v73) {
    unsigned int v13 = (char *)&v74;
  }
  unsigned int v14 = v75;
  if (v73) {
    unsigned int v14 = 8;
  }
  uint64_t v15 = (int *)&v13[16 * v14];
  if (v15 != v10)
  {
    uint64_t v16 = v10;
    uint64_t v17 = v11;
    do
    {
      uint64_t v18 = *(_DWORD **)v16;
      uint64_t v19 = *(void *)(*(void *)v16 + 16);
      int v20 = (void *)(v19 + 8 * (*(void *)(*(void *)v16 + 40) >> 9));
      if (*(void *)(*(void *)v16 + 24) == v19) {
        uint64_t v21 = 0;
      }
      else {
        uint64_t v21 = (uint64_t *)(*v20 + 8 * (*(void *)(*(void *)v16 + 40) & 0x1FFLL));
      }
      sub_1CD461DDC(*(void *)v16);
      if (v21 != v22)
      {
        char v24 = v22;
        while ((sub_1CD461A14((uint64_t)&v73, *v21, &v66) & 1) != 0)
        {
          if ((uint64_t *)((char *)++v21 - *v20) == (uint64_t *)4096)
          {
            uint64_t v25 = (uint64_t *)v20[1];
            ++v20;
            uint64_t v21 = v25;
          }
          if (v21 == v24) {
            goto LABEL_22;
          }
        }
        *((unsigned char *)v16 + 8) = 1;
        if (v71 >= (unint64_t)HIDWORD(v71)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)__base + v71) = *v18;
        LODWORD(v71) = v71 + 1;
      }
LABEL_22:
      uint64_t v23 = v16 + 4;
      uint64_t v16 = v17;
      if (v23 != v17)
      {
        uint64_t v16 = v23;
        do
        {
          if ((*(void *)v16 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_23;
          }
          v16 += 4;
        }
        while (v16 != v17);
        uint64_t v16 = v17;
      }
LABEL_23:
      ;
    }
    while (v16 != v15);
    unint64_t v12 = v73;
  }
  size_t v26 = v71;
  if (v71 == v12 >> 1)
  {
    if (v71 < 2uLL)
    {
LABEL_75:
      if ((v73 & 1) == 0) {
        llvm::deallocate_buffer(v74, (void *)(16 * v75));
      }
      int v44 = __base;
      int v45 = (char *)__base + 4 * v71;
      int v46 = (int *)v67;
      unsigned int v47 = (int *)((char *)v67 + 4 * __nel);
      BOOL v48 = operator new(0xC0uLL);
      *BOOL v48 = 0;
      v48[1] = 0;
      sub_1CD461E80((uint64_t)(v48 + 2), a3, v44, v45, v46, v47);
      uint64_t v49 = *a4;
      *(void *)(v49 + 8) = v48;
      *BOOL v48 = v49;
      *a4 = (uint64_t)v48;
      v48[1] = a4;
      ++*(void *)(v56 + 104);
      uint64_t v50 = *((unsigned int *)v48 + 30);
      if (v50)
      {
        unint64_t v51 = (unsigned int *)v48[14];
        uint64_t v52 = *(void *)(v56 + 64);
        uint64_t v53 = 4 * v50;
        do
        {
          BOOL v54 = sub_1CBF7BDF0((int *)(v52 + 24 * *v51));
          uint64_t v52 = *(void *)(v56 + 64);
          uint64_t v55 = (void *)(v52 + 24 * *v51 + 8);
          if (v54) {
            uint64_t v55 = (void *)*v55;
          }
          *uint64_t v55 = v48 + 2;
          ++v51;
          v53 -= 4;
        }
        while (v53);
      }
      if (v67 != v69) {
        free(v67);
      }
      if (__base != v72) {
        free(__base);
      }
      goto LABEL_5;
    }
    char v27 = __base;
    size_t v28 = v71;
  }
  else
  {
    int v29 = sub_1CD461934((int *)&v73);
    char v31 = (char *)v74;
    if (v12) {
      char v31 = (char *)&v74;
    }
    unsigned int v32 = v75;
    if (v12) {
      unsigned int v32 = 8;
    }
    __int16 v33 = (uint64_t *)&v31[16 * v32];
    if (v33 != (uint64_t *)v29)
    {
      uint64_t v34 = (uint64_t *)v29;
      char v35 = v30;
      do
      {
        if (*((unsigned char *)v34 + 8)) {
          goto LABEL_47;
        }
        unint64_t v36 = (_DWORD *)*v34;
        uint64_t v37 = *(void *)(*v34 + 16);
        int v38 = (void *)(v37 + 8 * (*(void *)(*v34 + 40) >> 9));
        if (*(void *)(*v34 + 24) == v37) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = (_DWORD **)(*v38 + 8 * (*(void *)(*v34 + 40) & 0x1FFLL));
        }
        sub_1CD461DDC(*v34);
        if (v39 != v40)
        {
          uint64_t v41 = v40;
          while (1)
          {
            uint64_t v42 = *v39;
            if (**v39 >= *v36)
            {
              uint64_t v66 = 0;
              if (!sub_1CD461A14((uint64_t)&v73, (uint64_t)v42, &v66) || !*(unsigned char *)(v66 + 8)) {
                break;
              }
            }
            if ((_DWORD **)((char *)++v39 - *v38) == (_DWORD **)4096)
            {
              uint64_t v43 = (_DWORD **)v38[1];
              ++v38;
              uint64_t v39 = v43;
            }
            if (v39 == v41) {
              goto LABEL_67;
            }
          }
          if (v71 >= (unint64_t)HIDWORD(v71)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)__base + v71) = *v36;
          LODWORD(v71) = v71 + 1;
        }
LABEL_67:
        if (*((_DWORD *)__base + v71 - 1) != *v36)
        {
          if (__nel >= (unint64_t)HIDWORD(__nel)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v67 + __nel) = *v36;
          LODWORD(__nel) = __nel + 1;
        }
LABEL_47:
        while (1)
        {
          v34 += 2;
          if (v34 == v35) {
            break;
          }
          if ((*v34 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_51;
          }
        }
        uint64_t v34 = v35;
LABEL_51:
        ;
      }
      while (v34 != v33);
      size_t v26 = v71;
    }
    if (v26 >= 2) {
      qsort(__base, v26, 4uLL, (int (__cdecl *)(const void *, const void *))sub_1CD461E64);
    }
    size_t v28 = __nel;
    if (__nel < 2) {
      goto LABEL_75;
    }
    char v27 = v67;
  }
  qsort(v27, v28, 4uLL, (int (__cdecl *)(const void *, const void *))sub_1CD461E64);
  goto LABEL_75;
}

void llvm::BlockFrequencyInfoImplBase::updateLoopWithIrreducible(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v4 = *(unsigned int *)(a2 + 136);
  if (v4) {
    bzero(*(void **)(a2 + 128), 8 * v4);
  }
  uint64_t v5 = *(void *)(a2 + 96);
  uint64_t v6 = (unsigned int *)(v5 + 4);
  uint64_t v7 = *(unsigned int *)(a2 + 104);
  if (v7 == 1)
  {
    uint64_t v8 = (unsigned int *)(v5 + 4);
  }
  else
  {
    uint64_t v9 = (unsigned int *)(v5 + 4 * v7);
    uint64_t v10 = *(void *)(a1 + 64);
    uint64_t v8 = (unsigned int *)(v5 + 4);
    do
    {
      unsigned int v11 = *v6;
      uint64_t v12 = v10 + 24 * *v6;
      unsigned int v13 = *(uint64_t **)(v12 + 8);
      unsigned int v14 = (_DWORD *)v12;
      if (v13)
      {
        unsigned int v14 = (_DWORD *)(v10 + 24 * v11);
        if (*((unsigned char *)v13 + 8))
        {
          do
          {
            uint64_t v15 = v13;
            unsigned int v13 = (uint64_t *)*v13;
          }
          while (v13 && *((unsigned char *)v13 + 8));
          unsigned int v14 = (_DWORD *)v15[12];
        }
      }
      if (*v14 == *(_DWORD *)v12) {
        *v8++ = v11;
      }
      ++v6;
    }
    while (v6 != v9);
  }
  *(_DWORD *)(a2 + 104) = ((unint64_t)v8 - v5) >> 2;
}

void llvm::BlockFrequencyInfoImplBase::adjustLoopHeaderMass(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v25 = v27;
  uint64_t v26 = 0x400000000;
  uint64_t v28 = 0;
  char v29 = 0;
  unint64_t v3 = *(unsigned int *)(a2 + 12);
  if (v3)
  {
    for (unint64_t i = 0; i < v3; ++i)
    {
      uint64_t v6 = *(void *)(a2 + 96);
      uint64_t v7 = (unsigned int *)(v6 + 4 * i);
      if (v3 < 2)
      {
        uint64_t v14 = 0;
      }
      else
      {
        uint64_t v8 = *(_DWORD **)(a2 + 96);
        unint64_t v9 = v3;
        do
        {
          unint64_t v10 = v9 >> 1;
          unsigned int v11 = &v8[v9 >> 1];
          unsigned int v13 = *v11;
          uint64_t v12 = v11 + 1;
          v9 += ~(v9 >> 1);
          if (v13 < *v7) {
            uint64_t v8 = v12;
          }
          else {
            unint64_t v9 = v10;
          }
        }
        while (v9);
        uint64_t v14 = ((uint64_t)v8 - v6) >> 2;
      }
      unint64_t v15 = *(void *)(*(void *)(a2 + 128) + 8 * v14);
      if (v15)
      {
        llvm::BlockFrequencyInfoImplBase::Distribution::add((uint64_t)&v25, v7, v15, 0);
        unint64_t v3 = *(unsigned int *)(a2 + 12);
      }
    }
  }
  llvm::BlockFrequencyInfoImplBase::Distribution::normalize((llvm::BlockFrequencyInfoImplBase::Distribution *)&v25);
  uint64_t v16 = v25;
  if (v26)
  {
    uint64_t v17 = 16 * v26;
    unsigned int v18 = v28;
    uint64_t v19 = (unint64_t *)((char *)v25 + 8);
    unint64_t v20 = -1;
    do
    {
      unint64_t v21 = *v19;
      unint64_t v22 = *v19;
      if (v18 != 0x80000000) {
        unint64_t v22 = ((v18 >> 1) | ((unint64_t)*v19 << 31)) / v18;
      }
      int v24 = v22;
      unint64_t v23 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v24, v20);
      v18 -= v21;
      if (v20 >= v23) {
        v20 -= v23;
      }
      else {
        unint64_t v20 = 0;
      }
      *sub_1CBF7CB04((int *)(*(void *)(a1 + 64) + 24 * *((unsigned int *)v19 - 1))) = v23;
      v19 += 2;
      v17 -= 16;
    }
    while (v17);
    uint64_t v16 = v25;
  }
  if (v16 != v27) {
    free(v16);
  }
}

void llvm::BlockFrequencyInfoImplBase::distributeIrrLoopHeaderMass(llvm::BlockFrequencyInfoImplBase *this, llvm::BlockFrequencyInfoImplBase::Distribution *a2)
{
  llvm::BlockFrequencyInfoImplBase::Distribution::normalize(a2);
  uint64_t v4 = *((unsigned int *)a2 + 2);
  if (v4)
  {
    uint64_t v5 = 16 * v4;
    unsigned int v6 = *((_DWORD *)a2 + 20);
    uint64_t v7 = (unint64_t *)(*(void *)a2 + 8);
    unint64_t v8 = -1;
    do
    {
      unint64_t v9 = *v7;
      unint64_t v10 = *v7;
      if (v6 != 0x80000000) {
        unint64_t v10 = ((v6 >> 1) | ((unint64_t)*v7 << 31)) / v6;
      }
      int v12 = v10;
      unint64_t v11 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v12, v8);
      v6 -= v9;
      if (v8 >= v11) {
        v8 -= v11;
      }
      else {
        unint64_t v8 = 0;
      }
      *sub_1CBF7CB04((int *)(*((void *)this + 8) + 24 * *((unsigned int *)v7 - 1))) = v11;
      v7 += 2;
      v5 -= 16;
    }
    while (v5);
  }
}

void sub_1CD461530(void *a1)
{
  sub_1CBF7A1F4(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD461568(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1CD461570(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = 0;
  BOOL v8 = llvm::cl::parser<double>::parse(a1 + 160, (void *)a1, a3, a4, a5, a6, (double *)&v11);
  if (v8) {
    return v8;
  }
  *(void *)(a1 + 128) = v11;
  *(_WORD *)(a1 + 12) = a2;
  uint64_t v9 = *(void *)(a1 + 192);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 48))(v9, &v11);
    return v8;
  }
  sub_1CB920400();
  return sub_1CD461604();
}

uint64_t sub_1CD461604()
{
  return 2;
}

uint64_t sub_1CD46160C(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 160, a1);
}

llvm::raw_ostream *sub_1CD461618(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 160), a1, a2);
}

double sub_1CD461628(uint64_t a1, int a2, int a3, double result)
{
  if (a3)
  {
    uint64_t result = *(double *)(a1 + 128);
LABEL_3:
    uint64_t v4 = *(void *)(a1 + 144);
    char v6 = *(unsigned char *)(a1 + 152);
    v5[0] = &unk_1F2601200;
    v5[1] = v4;
    llvm::cl::parser<double>::printOptionDiff((llvm::cl::basic_parser_impl *)(a1 + 160), (const llvm::cl::Option *)a1, (uint64_t)v5, a2, result);
    return result;
  }
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t result = *(double *)(a1 + 128);
    if (*(double *)(a1 + 144) != result) {
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t sub_1CD4616A8(uint64_t result)
{
  if (*(unsigned char *)(result + 152)) {
    uint64_t v1 = *(void *)(result + 144);
  }
  else {
    uint64_t v1 = 0;
  }
  *(void *)(result + 128) = v1;
  return result;
}

BOOL sub_1CD4616C8(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 16) && *(unsigned char *)(a1 + 16) && *(double *)(a1 + 8) != *(double *)(a2 + 8);
}

_DWORD *sub_1CD4616F4(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD4617D4(a1, (uint64_t)v4, (uint64_t)v4 + 24 * v3);
    llvm::deallocate_buffer(v4, (void *)(24 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 24 * v10;
    do
    {
      *uint64_t result = -1;
      result += 6;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD4617D4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(_DWORD **)result;
    uint64_t v8 = 24 * v6;
    do
    {
      *int v7 = -1;
      v7 += 6;
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      uint64_t v10 = 0;
      uint64_t result = sub_1CBF82418((uint64_t *)v5, (_DWORD *)a2, &v10);
      uint64_t v9 = v10;
      *uint64_t v10 = *(_DWORD *)a2;
      *(_OWORD *)(v9 + 2) = *(_OWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

uint64_t *sub_1CD461884(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(void *)(v6 - 56) = *(void *)(v2 + v5 - 56);
      *(void *)(v6 - 48) = *(void *)(v2 + v5 - 48);
      *(void *)(v6 - 40) = *(void *)(v2 + v5 - 40);
      *(void *)(v6 - 32) = *(void *)(v2 + v5 - 32);
      *(void *)(v6 - 24) = *(void *)(v2 + v5 - 24);
      *(_OWORD *)(v7 - 48) = 0uLL;
      *(_OWORD *)(v7 - 32) = 0uLL;
      *(void *)(v6 - 16) = *(void *)(v2 + v5 - 16);
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      v5 -= 56;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *uint64_t result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

int *sub_1CD461934(int *a1)
{
  int v2 = *a1;
  if (*a1 > 1)
  {
    if (v2)
    {
      uint64_t result = a1 + 2;
      uint64_t v7 = a1 + 34;
LABEL_10:
      while ((*(void *)result | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        result += 4;
        if (result == v7) {
          return v7;
        }
      }
    }
    else
    {
      uint64_t result = (int *)*((void *)a1 + 1);
      uint64_t v6 = a1[4];
      if (v6)
      {
        uint64_t v7 = &result[4 * v6];
        goto LABEL_10;
      }
    }
  }
  else
  {
    if (v2)
    {
      uint64_t v3 = a1 + 2;
      uint64_t v4 = 8;
    }
    else
    {
      uint64_t v3 = (int *)*((void *)a1 + 1);
      uint64_t v4 = a1[4];
    }
    return &v3[4 * v4];
  }
  return result;
}

void *sub_1CD4619AC(_DWORD *a1, uint64_t *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CD461A14((uint64_t)a1, *a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD461AC0(a1, a2, v7);
    void *v5 = *a2;
    *((unsigned char *)v5 + 8) = 0;
  }
  return v5;
}

uint64_t sub_1CD461A14(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

void *sub_1CD461AC0(_DWORD *a1, uint64_t *a2, void *a3)
{
  int v5 = *a1 >> 1;
  if (*a1) {
    unsigned int v6 = 8;
  }
  else {
    unsigned int v6 = a1[4];
  }
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_1CD461B80((uint64_t)a1, v6);
  uint64_t v8 = 0;
  sub_1CD461A14((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096) {
    --a1[1];
  }
  return a3;
}

uint64_t sub_1CD461B80(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 9)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    unsigned int v6 = *(llvm **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD461D10(a1, (uint64_t)v6, (uint64_t)v6 + 16 * v7);
    llvm::deallocate_buffer(v6, (void *)(16 * v7));
  }
  uint64_t v8 = 0;
  uint64_t v9 = v14;
  do
  {
    uint64_t v10 = *(void *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(void *)uint64_t v9 = v10;
      v9[8] = *(unsigned char *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CD461D10(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1CD461D10(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 136);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    uint64_t v10 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      BOOL v12 = 0;
      uint64_t result = sub_1CD461A14((uint64_t)v5, v10, &v12);
      uint64_t v11 = v12;
      *BOOL v12 = *(void *)a2;
      *((unsigned char *)v11 + 8) = *(unsigned char *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

void *sub_1CD461DDC(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t result = (void *)(v3 + 8 * (v2 >> 9));
  if (v4 == v3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *result + 8 * (v2 & 0x1FF);
  }
  uint64_t v7 = *(unsigned int *)(a1 + 4);
  if (v7)
  {
    uint64_t v8 = v7 + ((v6 - *result) >> 3);
    if (v8 < 1) {
      result -= (unint64_t)(511 - v8) >> 9;
    }
    else {
      result += (unint64_t)v8 >> 9;
    }
  }
  return result;
}

uint64_t sub_1CD461E64(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a2 < *a1;
  }
}

uint64_t sub_1CD461E80(uint64_t a1, uint64_t a2, unsigned char *__src, unsigned char *a4, int *a5, int *a6)
{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 1;
  *(void *)(a1 + 16) = a1 + 32;
  *(void *)(a1 + 24) = 0x400000000;
  *(void *)(a1 + 96) = a1 + 112;
  uint64_t v9 = (unsigned int *)(a1 + 96);
  *(void *)(a1 + 104) = 0x400000000;
  sub_1CD46210C((unsigned int *)(a1 + 96), __src, a4);
  *(void *)(a1 + 128) = a1 + 144;
  *(void *)(a1 + 136) = 0x100000000;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(_WORD *)(a1 + 168) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 104);
  *(_DWORD *)(a1 + 12) = v10;
  sub_1CD461F4C(v9, *(void *)v9 + 4 * v10, a5, a6);
  sub_1CD42769C(a1 + 128, *(unsigned int *)(a1 + 12));
  return a1;
}

unsigned int *sub_1CD461F4C(unsigned int *result, uint64_t a2, int *__src, int *a4)
{
  int v5 = __src;
  uint64_t v6 = *(void *)result;
  uint64_t v7 = result[2];
  if (*(void *)result + 4 * v7 == a2)
  {
    return sub_1CD46210C(result, __src, a4);
  }
  else
  {
    uint64_t v8 = (a2 - v6) >> 2;
    unint64_t v9 = a4 - __src;
    if (v7 + v9 > result[3]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v10 = (_DWORD *)(v6 + 4 * v8);
    uint64_t v11 = (unsigned char *)(v6 + 4 * v7);
    unint64_t v12 = (v11 - (unsigned char *)v10) >> 2;
    if (v12 >= v9)
    {
      uint64_t result = (unsigned int *)sub_1CD462190((uint64_t)result, &v11[-4 * v9], (char *)(v6 + 4 * v7));
      if (&v11[-4 * v9] != (unsigned char *)v10) {
        uint64_t result = (unsigned int *)memmove(&v10[v9], v10, &v11[-4 * v9] - (unsigned char *)v10);
      }
      if (v5 != a4)
      {
        return (unsigned int *)memmove(v10, v5, (char *)a4 - (char *)v5);
      }
    }
    else
    {
      unsigned int v13 = v7 + ((unint64_t)((char *)a4 - (char *)__src) >> 2);
      result[2] = v13;
      if (v8 != v7)
      {
        uint64_t result = (unsigned int *)memcpy((void *)(v6 + 4 * v13 - 4 * v12), v10, v11 - (unsigned char *)v10);
        do
        {
          int v14 = *v5++;
          *v10++ = v14;
          --v12;
        }
        while (v12);
      }
      if (v5 != a4)
      {
        return (unsigned int *)memcpy(v11, v5, (char *)a4 - (char *)v5);
      }
    }
  }
  return result;
}

unsigned int *sub_1CD46210C(unsigned int *result, unsigned char *__src, unsigned char *a3)
{
  uint64_t v3 = result;
  size_t v4 = a3 - __src;
  uint64_t v5 = result[2];
  if (v5 + ((a3 - __src) >> 2) > (unint64_t)result[3]) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (__src != a3)
  {
    uint64_t result = (unsigned int *)memcpy((void *)(*(void *)result + 4 * v5), __src, v4);
    LODWORD(v5) = v3[2];
  }
  void v3[2] = v5 + (v4 >> 2);
  return result;
}

uint64_t sub_1CD462190(uint64_t result, char *a2, char *a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 + ((a3 - a2) >> 2) > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a3)
  {
    uint64_t v5 = (_DWORD *)(*(void *)result + 4 * v4);
    do
    {
      int v6 = *(_DWORD *)v3;
      v3 += 4;
      *v5++ = v6;
    }
    while (v3 != a3);
    LODWORD(v4) = *(_DWORD *)(result + 8);
  }
  *(_DWORD *)(result + 8) = v4 + ((unint64_t)(a3 - a2) >> 2);
  return result;
}

void sub_1CD462218(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 56);
  if (v3)
  {
    *(void *)(a1 + 64) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 32);
  if (v4)
  {
    *(void *)(a1 + 40) = v4;
    operator delete(v4);
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(16 * *(unsigned int *)(a1 + 24)));
}

uint64_t sub_1CD462270()
{
  return v0;
}

llvm::cl::Option *sub_1CD462280(llvm::cl::Option *a1, char *a2, unsigned char **a3, _WORD *a4, _WORD *a5, __n128 *a6)
{
  uint64_t v12 = sub_1CB883A14((uint64_t)a1, 0, 0);
  *(unsigned char *)(v12 + 128) = 0;
  *(void *)(v12 + 136) = &unk_1F25EDE58;
  *(void *)(v12 + 144) = 0;
  *(void *)uint64_t v12 = &unk_1F26440A0;
  *(void *)(v12 + 152) = &unk_1F2643CC0;
  *(void *)(v12 + 160) = &unk_1F25EDE78;
  *(void *)(v12 + 184) = v12 + 160;
  sub_1CD462378(v12, a2, a3, a4, a5, a6);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

__n128 sub_1CD462378(uint64_t a1, char *__s, unsigned char **a3, _WORD *a4, _WORD *a5, __n128 *a6)
{
  size_t v12 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)__s, v12);
  unsigned int v13 = *a3;
  *(unsigned char *)(a1 + 128) = **a3;
  *(unsigned char *)(a1 + 145) = 1;
  *(unsigned char *)(a1 + 144) = *v13;
  __int16 v14 = *(_WORD *)(a1 + 10) & 0xFF9F | (32 * (*a4 & 3));
  *(_WORD *)(a1 + 10) = v14;
  *(_WORD *)(a1 + 10) = v14 & 0xFFF8 | *a5 & 7;
  __n128 result = *a6;
  *(__n128 *)(a1 + 32) = *a6;
  return result;
}

void sub_1CD462414(uint64_t **a1, _WORD *a2, __n128 *a3)
{
  sub_1CB883A14((uint64_t)&llvm::IterativeBFIPrecision, 0, 0);
  xmmword_1EBD02F98 = 0u;
  *(_OWORD *)&qword_1EBD02FA8 = 0u;
  *((void *)&xmmword_1EBD02F98 + 1) = &unk_1F2601200;
  llvm::IterativeBFIPrecision = (uint64_t)&unk_1F2601198;
  qword_1EBD02FB8 = (uint64_t)&unk_1F2643E40;
  qword_1EBD02FC0 = (uint64_t)&unk_1F2601220;
  qword_1EBD02FD8 = (uint64_t)&qword_1EBD02FC0;
  sub_1CD462508(a1, a2, a3);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::IterativeBFIPrecision);
}

__n128 sub_1CD462508(uint64_t **a1, _WORD *a2, __n128 *a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&llvm::IterativeBFIPrecision, "iterative-bfi-precision", 0x17uLL);
  int v6 = *a1;
  *(void *)&xmmword_1EBD02F98 = **a1;
  byte_1EBD02FB0 = 1;
  qword_1EBD02FA8 = *v6;
  word_1EBD02F22 = (32 * (*a2 & 3)) | word_1EBD02F22 & 0xFF9F;
  __n128 result = *a3;
  xmmword_1EBD02F38 = (__int128)*a3;
  return result;
}

void sub_1CD462594()
{
}

void *sub_1CD4625A8()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F2601220;
  return result;
}

void sub_1CD4625E0(uint64_t a1, void *a2)
{
  *a2 = &unk_1F2601220;
}

void sub_1CD46260C(uint64_t a1)
{
  unint64_t v2 = *(unsigned char **)(a1 + 8);
  uint64_t v3 = *(unsigned char **)(a1 + 16);
  if (v3 == v2) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v3 - v2) << 6) - 1;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if ((unint64_t)(v4 - (*(void *)(a1 + 40) + v5)) < 0x200)
  {
    int v6 = *(unsigned char **)(a1 + 24);
    uint64_t v7 = *(unsigned char **)a1;
    uint64_t v8 = (uint64_t)&v6[-*(void *)a1];
    if (v3 - v2 >= (unint64_t)v8)
    {
      if (v6 == v7) {
        unint64_t v10 = 1;
      }
      else {
        unint64_t v10 = v8 >> 2;
      }
      uint64_t v21 = a1 + 24;
      if (v10 >> 61) {
        sub_1CB833614();
      }
      unsigned int v18 = (char *)operator new(8 * v10);
      uint64_t v19 = v18;
      *(void *)&long long v20 = v18;
      *((void *)&v20 + 1) = &v18[8 * v10];
      uint64_t v17 = operator new(0x1000uLL);
      sub_1CD3F23B4((uint64_t)&v18, &v17);
      for (unint64_t i = *(void **)(a1 + 8); i != *(void **)(a1 + 16); ++i)
        sub_1CB904CD8((uint64_t)&v18, i);
      size_t v12 = *(unsigned char **)a1;
      unsigned int v13 = v19;
      *(void *)a1 = v18;
      *(void *)(a1 + 8) = v13;
      uint64_t v14 = v20;
      *(_OWORD *)(a1 + 16) = v20;
      if (v14 - (void)v13 == 8) {
        uint64_t v15 = 256;
      }
      else {
        uint64_t v15 = *(void *)(a1 + 32) + 512;
      }
      *(void *)(a1 + 32) = v15;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      if (v2 == v7)
      {
        unsigned int v18 = (char *)operator new(0x1000uLL);
        sub_1CD3F23B4(a1, &v18);
        uint64_t v9 = *(void *)(a1 + 16);
        unsigned int v18 = *(char **)(v9 - 8);
        *(void *)(a1 + 16) = v9 - 8;
      }
      else
      {
        unsigned int v18 = (char *)operator new(0x1000uLL);
      }
      sub_1CD3F24DC((void **)a1, &v18);
      if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
        uint64_t v16 = 256;
      }
      else {
        uint64_t v16 = *(void *)(a1 + 32) + 512;
      }
      *(void *)(a1 + 32) = v16;
    }
  }
  else
  {
    *(void *)(a1 + 32) = v5 + 512;
    unsigned int v18 = (char *)*((void *)v3 - 1);
    *(void *)(a1 + 16) = v3 - 8;
    sub_1CD3F24DC((void **)a1, &v18);
  }
}

_OWORD *sub_1CD4627C4(int *a1, uint64_t a2)
{
  uint64_t v15 = a2;
  int v4 = *a1 + 1;
  *a1 = v4;
  *((_DWORD *)sub_1CD462990((uint64_t)(a1 + 2), &v15) + 2) = v4;
  uint64_t v5 = (uint64_t *)*((void *)a1 + 5);
  if ((unint64_t)v5 >= *((void *)a1 + 6))
  {
    int v6 = sub_1CBF63C18((void **)a1 + 4, a2);
  }
  else
  {
    uint64_t *v5 = a2;
    int v6 = v5 + 1;
  }
  *((void *)a1 + 5) = v6;
  uint64_t v7 = sub_1CD461DDC(a2);
  int v8 = *a1;
  *(void *)&long long v13 = a2;
  *((void *)&v13 + 1) = v7;
  *(void *)&long long v14 = v9;
  DWORD2(v14) = v8;
  unint64_t v10 = (_OWORD *)*((void *)a1 + 11);
  if ((unint64_t)v10 >= *((void *)a1 + 12))
  {
    __n128 result = sub_1CBF833E4((void **)a1 + 10, &v13);
  }
  else
  {
    long long v11 = v14;
    *unint64_t v10 = v13;
    v10[1] = v11;
    __n128 result = v10 + 2;
  }
  *((void *)a1 + 11) = result;
  return result;
}

void *sub_1CD462880(void *result)
{
  uint64_t v1 = (void **)(result + 7);
  result[8] = result[7];
  if (result[10] != result[11])
  {
    unint64_t v2 = result;
    uint64_t v3 = (uint64_t)(result + 1);
    while (1)
    {
      sub_1CD462B88((uint64_t)v2);
      uint64_t v5 = v2[10];
      uint64_t v4 = v2[11];
      uint64_t v6 = *(void *)(v4 - 32);
      uint64_t v10 = v6;
      unsigned int v7 = *(_DWORD *)(v4 - 8);
      v2[11] = v4 - 32;
      if (v5 != v4 - 32 && *(_DWORD *)(v4 - 40) > v7) {
        *(_DWORD *)(v4 - 40) = v7;
      }
      __n128 result = sub_1CD462990(v3, &v10);
      if (v7 == *((_DWORD *)result + 2)) {
        break;
      }
      if (v2[10] == v2[11]) {
        return result;
      }
    }
    __n128 result = (void *)v2[8];
    do
    {
      uint64_t v8 = *(void *)(v2[5] - 8);
      if ((unint64_t)result >= v2[9])
      {
        uint64_t v9 = sub_1CBF63C18(v1, v8);
      }
      else
      {
        *__n128 result = v8;
        uint64_t v9 = result + 1;
      }
      v2[8] = v9;
      v2[5] -= 8;
      *((_DWORD *)sub_1CD462990(v3, v9 - 1) + 2) = -1;
      __n128 result = (void *)v2[8];
    }
    while (*(result - 1) != v6);
  }
  return result;
}

void *sub_1CD462990(uint64_t a1, uint64_t *a2)
{
  unsigned int v7 = 0;
  char v4 = sub_1CD40EA84(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD462A00(a1, a2, v7);
    void *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

void *sub_1CD462A00(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD462AB4(a1, v6);
  uint64_t v8 = 0;
  sub_1CD40EA84(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CD462AB4(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  char v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  __n128 result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD40ED08(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *__n128 result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD462B88(uint64_t result)
{
  uint64_t v1 = result;
  while (1)
  {
    uint64_t v2 = *(void *)(v1 + 88);
    uint64_t v3 = *(void **)(v2 - 32);
    uint64_t v4 = v3[2];
    if (v3[3] == v4)
    {
      uint64_t v6 = 0;
    }
    else
    {
      unint64_t v5 = v3[5] + v3[6];
      uint64_t v6 = *(void *)(v4 + ((v5 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v5 & 0x1FF);
    }
    int v7 = *(uint64_t **)(v2 - 16);
    if (v7 == (uint64_t *)v6) {
      break;
    }
    *(void *)(v2 - 16) = v7 + 1;
    unsigned int v8 = *(void **)(v2 - 24);
    if ((uint64_t *)((char *)v7 - *v8 + 8) == (uint64_t *)4096)
    {
      *(void *)(v2 - 24) = v8 + 1;
      *(void *)(v2 - 16) = v8[1];
    }
    uint64_t v9 = *v7;
    uint64_t v13 = 0;
    __n128 result = sub_1CD40EA84(*(void *)(v1 + 8), *(_DWORD *)(v1 + 24), v9, &v13);
    if (result) {
      BOOL v10 = v13 == *(void *)(v1 + 8) + 16 * *(unsigned int *)(v1 + 24);
    }
    else {
      BOOL v10 = 1;
    }
    if (v10)
    {
      __n128 result = (uint64_t)sub_1CD4627C4((int *)v1, v9);
    }
    else
    {
      unsigned int v11 = *(_DWORD *)(v13 + 8);
      uint64_t v12 = *(void *)(v1 + 88);
      if (*(_DWORD *)(v12 - 8) > v11) {
        *(_DWORD *)(v12 - 8) = v11;
      }
    }
  }
  return result;
}

void llvm::initializeBranchProbabilityInfoWrapperPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC3F90, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CBF83688;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCC3F90, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

llvm::BranchProbabilityInfoWrapperPass *llvm::BranchProbabilityInfoWrapperPass::BranchProbabilityInfoWrapperPass(llvm::BranchProbabilityInfoWrapperPass *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = llvm::BranchProbabilityInfoWrapperPass::ID;
  *((_DWORD *)this + 6) = 2;
  *(void *)this = &unk_1F2601268;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = 0;
  uint64_t v2 = 112;
  *((void *)this + 13) = 1;
  do
  {
    *(void *)((char *)this + v2) = -4096;
    v2 += 16;
  }
  while (v2 != 176);
  *((void *)this + 22) = 1;
  for (uint64_t i = 184; i != 280; i += 24)
    *(_OWORD *)((char *)this + i) = xmmword_1CFAC30D0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC3F90, memory_order_acquire) != -1)
  {
    v7[0] = sub_1CBF83688;
    v7[1] = &PassRegistry;
    uint64_t v6 = v7;
    std::__call_once(&qword_1EBCC3F90, &v6, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return this;
}

uint64_t llvm::BranchProbabilityInfo::SccInfo::getSccExitBlocks(uint64_t this, int a2, uint64_t a3)
{
  unint64_t v5 = (int *)this;
  uint64_t v6 = *(void *)(this + 24) + 24 * a2;
  int v7 = *(_DWORD *)(v6 + 8);
  unsigned int v8 = *(const llvm::BasicBlock ***)v6;
  uint64_t v9 = *(unsigned int *)(v6 + 16);
  BOOL v10 = &v8[2 * v9];
  if (v7)
  {
    if (v9)
    {
      uint64_t v11 = 16 * v9;
      uint64_t v12 = v8;
      while (((unint64_t)*v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v12 += 2;
        v11 -= 16;
        if (!v11) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      uint64_t v12 = v8;
    }
  }
  else
  {
LABEL_6:
    uint64_t v12 = &v8[2 * v9];
  }
  uint64_t v13 = &v8[2 * v9];
LABEL_8:
  while (v12 != v13)
  {
    long long v14 = *v12;
    this = llvm::BranchProbabilityInfo::SccInfo::getSccBlockType((llvm::BranchProbabilityInfo::SccInfo *)v5, *v12, a2);
    if ((this & 2) != 0)
    {
      uint64_t v16 = (const llvm::BasicBlock *)*((void *)v14 + 5);
      if (v16 != (const llvm::BasicBlock *)((char *)v14 + 40))
      {
        uint64_t v17 = v16 ? (unsigned __int8 *)v16 - 24 : 0;
        if (v17[16] - 29 <= 0xA)
        {
          this = llvm::Instruction::getNumSuccessors((llvm::Instruction *)v17);
          if (this)
          {
            int v18 = this;
            for (unsigned int i = 0; i != v18; ++i)
            {
              uint64_t Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v17, i);
              uint64_t v26 = 0;
              this = sub_1CBF8BDAC(*(void *)v5, v5[4], Successor, &v26);
              if (this)
              {
                uint64_t v21 = v26;
                uint64_t v22 = *(void *)v5;
                uint64_t v23 = v5[4];
              }
              else
              {
                uint64_t v22 = *(void *)v5;
                uint64_t v23 = v5[4];
                uint64_t v21 = *(void *)v5 + 16 * v23;
              }
              if (v21 == v22 + 16 * v23) {
                int v24 = -1;
              }
              else {
                int v24 = *(_DWORD *)(v21 + 8);
              }
              if (v24 != a2)
              {
                unint64_t v25 = *(unsigned int *)(a3 + 8);
                if (v25 >= *(unsigned int *)(a3 + 12)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*(void *)a3 + 8 * v25) = Successor;
                ++*(_DWORD *)(a3 + 8);
              }
            }
          }
        }
      }
    }
    uint64_t v15 = v12 + 2;
    uint64_t v12 = v10;
    if (v15 != v10)
    {
      uint64_t v12 = v15;
      while (((unint64_t)*v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v12 += 2;
        if (v12 == v10)
        {
          uint64_t v12 = v10;
          goto LABEL_8;
        }
      }
    }
  }
  return this;
}

uint64_t llvm::BranchProbabilityInfo::SccInfo::getSccBlockType(llvm::BranchProbabilityInfo::SccInfo *this, const llvm::BasicBlock *a2, int a3)
{
  uint64_t v4 = *((void *)this + 3);
  unint64_t v5 = (uint64_t *)(v4 + 24 * a3);
  uint64_t v10 = 0;
  uint64_t v11 = a2;
  if (sub_1CBA0E618((uint64_t)v5, &v11, &v10))
  {
    uint64_t v6 = v10;
    uint64_t v7 = *v5;
    uint64_t v8 = *(unsigned int *)(v4 + 24 * a3 + 16);
  }
  else
  {
    uint64_t v7 = *v5;
    uint64_t v8 = *(unsigned int *)(v4 + 24 * a3 + 16);
    uint64_t v6 = *v5 + 16 * v8;
  }
  if (v6 == v7 + 16 * v8) {
    return 0;
  }
  else {
    return *(unsigned int *)(v6 + 8);
  }
}

uint64_t sub_1CD463090(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[2] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = v19;
  uint64_t v18 = 0x400000000;
  if (a3 == a4)
  {
    unsigned int v9 = 0;
    unsigned int v8 = 0;
    uint64_t v14 = 0;
LABEL_14:
    unint64_t v12 = (unint64_t)v9 << 8;
  }
  else
  {
    unint64_t v5 = a3;
    unsigned int v8 = 0;
    unsigned int v9 = 0;
    char v10 = 1;
    while (1)
    {
      llvm::BranchProbabilityInfo::LoopBlock::LoopBlock((uint64_t)v16, *v5, *(uint64_t **)(a1 + 56), *(uint64_t **)(a1 + 64));
      v15[0] = a2;
      v15[1] = (uint64_t)v16;
      unint64_t EstimatedEdgeWeight = llvm::BranchProbabilityInfo::getEstimatedEdgeWeight(a1, v15);
      if (!HIDWORD(EstimatedEdgeWeight)) {
        break;
      }
      if ((v10 & 1) != 0 || (v8 | (v9 << 8)) < EstimatedEdgeWeight)
      {
        unsigned int v8 = EstimatedEdgeWeight;
        unsigned int v9 = EstimatedEdgeWeight >> 8;
      }
      char v10 = 0;
      if (++v5 == a4)
      {
        uint64_t v14 = 0x100000000;
        goto LABEL_14;
      }
    }
    unsigned int v8 = 0;
    uint64_t v14 = 0;
    unint64_t v12 = 0;
  }
  if (v17 != v19) {
    free(v17);
  }
  return v12 | v14 & 0x100000000 | v8;
}

llvm::raw_ostream *llvm::BranchProbabilityInfo::print(llvm::BranchProbabilityInfo *this, llvm::raw_ostream *a2)
{
  __n128 result = sub_1CB8E509C(a2, "---- Branch Probabilities ----\n");
  uint64_t v5 = *((void *)this + 6);
  uint64_t v6 = v5 + 72;
  uint64_t v7 = *(void *)(v5 + 80);
  if (v7 != v5 + 72)
  {
    do
    {
      if (v7) {
        unsigned int v8 = (const llvm::BasicBlock *)(v7 - 24);
      }
      else {
        unsigned int v8 = 0;
      }
      unsigned int v9 = (void *)*((void *)v8 + 5);
      if (v9 != (void *)((char *)v8 + 40))
      {
        if (v9) {
          char v10 = (unsigned __int8 *)(v9 - 3);
        }
        else {
          char v10 = 0;
        }
        if (v10[16] - 29 <= 0xA)
        {
          __n128 result = (llvm::raw_ostream *)llvm::Instruction::getNumSuccessors((llvm::Instruction *)v10);
          if (result)
          {
            int v11 = (int)result;
            for (unsigned int i = 0; i != v11; ++i)
            {
              uint64_t Successor = (const llvm::BasicBlock *)llvm::Instruction::getSuccessor((llvm::Instruction *)v10, i);
              uint64_t v14 = sub_1CB8E509C(a2, "  ");
              __n128 result = llvm::BranchProbabilityInfo::printEdgeProbability(this, v14, v8, Successor);
            }
          }
        }
      }
      uint64_t v7 = *(void *)(v7 + 8);
    }
    while (v7 != v6);
  }
  return result;
}

llvm::raw_ostream *llvm::BranchProbabilityInfo::printEdgeProbability(llvm::BranchProbabilityInfo *this, llvm::raw_ostream *a2, const llvm::BasicBlock *a3, const llvm::BasicBlock *a4)
{
  int EdgeProbability = llvm::BranchProbabilityInfo::getEdgeProbability((uint64_t)this, (uint64_t)a3, (uint64_t)a4);
  unsigned int v9 = sub_1CB8E509C(a2, "edge ");
  Name = llvm::Value::getName(a3);
  size_t v12 = v10;
  uint64_t v13 = (void *)*((void *)v9 + 4);
  if (v10 <= *((void *)v9 + 3) - (void)v13)
  {
    if (v10)
    {
      memcpy(v13, Name, v10);
      *((void *)v9 + 4) += v12;
    }
  }
  else
  {
    llvm::raw_ostream::write(v9, Name, v10);
  }
  uint64_t v14 = sub_1CB8E509C(v9, " -> ");
  uint64_t v16 = llvm::Value::getName(a4);
  size_t v17 = v15;
  uint64_t v18 = (void *)*((void *)v14 + 4);
  if (v15 <= *((void *)v14 + 3) - (void)v18)
  {
    if (v15)
    {
      memcpy(v18, v16, v15);
      *((void *)v14 + 4) += v17;
    }
  }
  else
  {
    llvm::raw_ostream::write(v14, v16, v15);
  }
  uint64_t v19 = sub_1CB8E509C(v14, " probability is ");
  int v23 = EdgeProbability;
  long long v20 = llvm::BranchProbability::print((llvm::BranchProbability *)&v23, v19);
  if (llvm::BranchProbabilityInfo::getEdgeProbability((uint64_t)this, (uint64_t)a3, (uint64_t)a4) <= 0x66666666) {
    uint64_t v21 = "\n";
  }
  else {
    uint64_t v21 = " [HOT edge]\n";
  }
  sub_1CB8E509C(v20, v21);
  return a2;
}

uint64_t llvm::BranchProbabilityInfo::copyEdgeProbabilities(llvm::BranchProbabilityInfo *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  llvm::BranchProbabilityInfo::eraseBlock((uint64_t)this, a3);
  uint64_t v6 = (llvm::BasicBlock *)*((void *)a2 + 5);
  if (v6 == (llvm::BasicBlock *)((char *)a2 + 40))
  {
    unsigned int v8 = 0;
  }
  else
  {
    if (v6) {
      uint64_t v7 = (unsigned __int8 *)v6 - 24;
    }
    else {
      uint64_t v7 = 0;
    }
    if (v7[16] - 29 >= 0xB) {
      unsigned int v8 = 0;
    }
    else {
      unsigned int v8 = (llvm::Instruction *)v7;
    }
  }
  uint64_t result = llvm::Instruction::getNumSuccessors(v8);
  if (result)
  {
    int v10 = result;
    int v11 = (char *)this + 24;
    uint64_t v14 = a2;
    LODWORD(v15[0]) = 0;
    v18[0] = 0;
    uint64_t result = sub_1CBF8F170((uint64_t)this + 24, (uint64_t *)&v14, v18);
    if (result)
    {
      if (v18[0] != *((void *)this + 3) + 24 * *((unsigned int *)this + 10))
      {
        v15[0] = 2;
        v15[1] = 0;
        uint64_t v16 = a3;
        if (a3 != (llvm::BasicBlock *)-8192 && a3 != (llvm::BasicBlock *)-4096 && a3) {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v15);
        }
        uint64_t v14 = (llvm::BasicBlock *)&unk_1F2601308;
        size_t v17 = this;
        sub_1CBF8F26C((uint64_t)this, &v14, (uint64_t)v18);
        if (v16 != (llvm::BasicBlock *)-8192 && v16 != (llvm::BasicBlock *)-4096 && v16) {
          llvm::ValueHandleBase::RemoveFromUseList(v15);
        }
        for (int i = 0; i != v10; ++i)
        {
          uint64_t v14 = a2;
          LODWORD(v15[0]) = i;
          int v13 = *(_DWORD *)(sub_1CBF8FA78((uint64_t)v11, (uint64_t)&v14) + 16);
          uint64_t v14 = a3;
          LODWORD(v15[0]) = i;
          uint64_t result = sub_1CBF8FA78((uint64_t)v11, (uint64_t)&v14);
          *(_DWORD *)(result + 16) = v13;
        }
      }
    }
  }
  return result;
}

llvm::AnalysisUsage *llvm::BranchProbabilityInfoWrapperPass::getAnalysisUsage(llvm::BranchProbabilityInfoWrapperPass *this, llvm::AnalysisUsage *a2)
{
  llvm::AnalysisUsage::addRequiredID(a2, (char *)&llvm::DominatorTreeWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredID(a2, (char *)&llvm::LoopInfoWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredID(a2, llvm::TargetLibraryInfoWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredID(a2, (char *)&llvm::DominatorTreeWrapperPass::ID);
  uint64_t result = llvm::AnalysisUsage::addRequiredID(a2, llvm::PostDominatorTreeWrapperPass::ID);
  *((unsigned char *)a2 + 160) = 1;
  return result;
}

llvm::raw_ostream *llvm::BranchProbabilityInfoWrapperPass::print(llvm::BranchProbabilityInfoWrapperPass *this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  return llvm::BranchProbabilityInfo::print((llvm::BranchProbabilityInfoWrapperPass *)((char *)this + 32), a2);
}

void llvm::BranchProbabilityPrinterPass::run(llvm::raw_ostream **a1, llvm::Value *a2)
{
  uint64_t v3 = sub_1CB8E509C(*a1, "Printing analysis results of BPI for function ");
  uint64_t v4 = sub_1CB8E509C(v3, "'");
  Name = llvm::Value::getName(a2);
  size_t v7 = v5;
  unsigned int v8 = (void *)*((void *)v4 + 4);
  if (v5 <= *((void *)v4 + 3) - (void)v8)
  {
    if (v5)
    {
      memcpy(v8, Name, v5);
      *((void *)v4 + 4) += v7;
    }
  }
  else
  {
    llvm::raw_ostream::write(v4, Name, v5);
  }
  unsigned int v9 = sub_1CB8E509C(v4, "':");
  sub_1CB8E509C(v9, "\n");
  llvm::AnalysisManager<llvm::Function>::getResultImpl();
}

void sub_1CD4637A0(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F2601268;
  sub_1CBF8AF10((uint64_t)a1 + 32);

  llvm::Pass::~Pass(a1);
}

void sub_1CD4637F4(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F2601268;
  sub_1CBF8AF10((uint64_t)a1 + 32);
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void llvm::callDefaultCtor<llvm::BranchProbabilityInfoWrapperPass>()
{
}

_OWORD *sub_1CD463898(void *a1, unsigned int a2)
{
  if (a2 <= 4)
  {
    *a1 = 1;
  }
  else
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v3 = a2;
    uint64_t result = operator new(24 * a2, (std::align_val_t)8uLL);
    a1[1] = result;
    a1[2] = v3;
    int v5 = *(_DWORD *)a1;
    *a1 = *(_DWORD *)a1 & 1;
    if ((v5 & 1) == 0)
    {
      uint64_t v6 = (_OWORD *)((char *)result + 24 * v3);
      goto LABEL_6;
    }
  }
  uint64_t result = a1 + 1;
  uint64_t v6 = a1 + 13;
  do
  {
LABEL_6:
    *uint64_t result = xmmword_1CFAC30D0;
    uint64_t result = (_OWORD *)((char *)result + 24);
  }
  while (result != v6);
  return result;
}

void sub_1CD46392C(void *a1)
{
  if (a1)
  {
    sub_1CD46392C(*a1);
    sub_1CD46392C(a1[1]);
    uint64_t v3 = (void *)a1[5];
    if (v3 != a1 + 7) {
      free(v3);
    }
    operator delete(a1);
  }
}

unint64_t sub_1CD46398C(uint64_t a1, unint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v4 = *(void *)a1 + 24 * v2;
    if (*(void *)a1 > a2 || v4 <= a2) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  return a2;
}

uint64_t sub_1CD463A18(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v16 = 0;
  uint64_t result = sub_1CBF8BFC0(a2, *(void *)a3, *(_DWORD *)(a3 + 8), &v16);
  uint64_t v9 = v16;
  if (result)
  {
    uint64_t v14 = a2 + 8;
    if (*(unsigned char *)a2)
    {
      unsigned int v15 = 4;
    }
    else
    {
      uint64_t v14 = *(void *)(a2 + 8);
      unsigned int v15 = *(_DWORD *)(a2 + 16);
    }
    char v13 = 0;
    uint64_t v12 = v14 + 24 * v15;
  }
  else
  {
    uint64_t result = sub_1CD463AF8((_DWORD *)a2, a3, v16);
    uint64_t v9 = result;
    *(void *)uint64_t result = *(void *)a3;
    *(_DWORD *)(result + 8) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(result + 16) = *a4;
    uint64_t v10 = a2 + 8;
    if (*(unsigned char *)a2)
    {
      unsigned int v11 = 4;
    }
    else
    {
      uint64_t v10 = *(void *)(a2 + 8);
      unsigned int v11 = *(_DWORD *)(a2 + 16);
    }
    uint64_t v12 = v10 + 24 * v11;
    char v13 = 1;
  }
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v12;
  *(unsigned char *)(a1 + 16) = v13;
  return result;
}

uint64_t sub_1CD463AF8(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v3 = *a1 >> 1;
  if (*a1) {
    unsigned int v4 = 4;
  }
  else {
    unsigned int v4 = a1[4];
  }
  if (4 * v3 + 4 >= 3 * v4)
  {
    v4 *= 2;
  }
  else if (v4 + ~v3 - a1[1] > v4 >> 3)
  {
    goto LABEL_5;
  }
  uint64_t v8 = (uint64_t)a1;
  sub_1CD463BCC((uint64_t)a1, v4);
  uint64_t v9 = 0;
  sub_1CBF8BFC0(v8, *(void *)a2, *(_DWORD *)(a2 + 8), &v9);
  a1 = (_DWORD *)v8;
  a3 = v9;
LABEL_5:
  *a1 += 2;
  if (*(void *)a3 != -4096 || *(_DWORD *)(a3 + 8) != 0x7FFFFFFF) {
    --a1[1];
  }
  return a3;
}

uint64_t sub_1CD463BCC(uint64_t a1, unsigned int a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    unsigned int v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v16 = a2;
      *(void *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v16;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD463D90(a1, v6, v6 + 24 * v7);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = 0;
  uint64_t v9 = v17;
  do
  {
    uint64_t v10 = *(void *)(a1 + v8 + 8);
    int v11 = *(_DWORD *)(a1 + v8 + 16);
    if ((v10 != -4096 || v11 != 0x7FFFFFFF) && (v10 != -8192 || v11 != 0x80000000))
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)(a1 + v8 + 8);
      *((_DWORD *)v9 + 4) = *(_DWORD *)(a1 + v8 + 24);
      v9 += 24;
    }
    v8 += 24;
  }
  while (v8 != 96);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v14 = a2;
    *(void *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v14;
  }
  return sub_1CD463D90(a1, (uint64_t)v17, (uint64_t)v9);
}

uint64_t sub_1CD463D90(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    unsigned int v7 = (_OWORD *)(result + 8);
    uint64_t v8 = (_OWORD *)(result + 104);
  }
  else
  {
    unsigned int v14 = *(_DWORD *)(result + 16);
    if (!v14) {
      goto LABEL_4;
    }
    unsigned int v7 = *(_OWORD **)(result + 8);
    uint64_t v8 = (_OWORD *)((char *)v7 + 24 * v14);
  }
  do
  {
    *unsigned int v7 = xmmword_1CFAC30D0;
    unsigned int v7 = (_OWORD *)((char *)v7 + 24);
  }
  while (v7 != v8);
LABEL_4:
  if (a2 != a3)
  {
    do
    {
      uint64_t v9 = *(void *)v4;
      int v10 = *(_DWORD *)(v4 + 8);
      if ((*(void *)v4 != -4096 || v10 != 0x7FFFFFFF) && (v9 != -8192 || v10 != 0x80000000))
      {
        unsigned int v15 = 0;
        uint64_t result = sub_1CBF8BFC0((uint64_t)v5, v9, v10, &v15);
        char v13 = v15;
        *unsigned int v15 = *(void *)v4;
        *((_DWORD *)v13 + 2) = *(_DWORD *)(v4 + 8);
        *((_DWORD *)v13 + 4) = *(_DWORD *)(v4 + 16);
        *v5 += 2;
      }
      v4 += 24;
    }
    while (v4 != a3);
  }
  return result;
}

_OWORD *sub_1CD463E88(_OWORD *result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(_DWORD *)result;
  unsigned int v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 - 28 >= 3) {
    int v4 = 1 << (33 - v3);
  }
  else {
    int v4 = 64;
  }
  if (v2 >= 2) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if ((v2 & 1) != 0 && v5 < 5)
  {
    int v6 = (char *)result + 8;
    *(void *)uint64_t result = 1;
    unsigned int v7 = (char *)result + 104;
    do
    {
LABEL_10:
      *(_OWORD *)int v6 = xmmword_1CFAC30D0;
      v6 += 24;
    }
    while (v6 != v7);
    return result;
  }
  if ((v2 & 1) == 0)
  {
    if (v5 == *((_DWORD *)result + 4))
    {
      *(void *)uint64_t result = 0;
      if (!v5) {
        return result;
      }
      int v6 = (char *)*((void *)result + 1);
      unsigned int v7 = &v6[24 * v5];
      goto LABEL_10;
    }
    MEMORY[0x1D25D9CD0](*((void *)result + 1), 8);
  }

  return sub_1CD463898(v1, v5);
}

void *sub_1CD463F6C(void *result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(_DWORD *)result;
  unsigned int v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 - 28 >= 3) {
    int v4 = 1 << (33 - v3);
  }
  else {
    int v4 = 64;
  }
  if (v2 >= 2) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if ((v2 & 1) != 0 && v5 < 5)
  {
    int v6 = result + 1;
    *uint64_t result = 1;
    unsigned int v7 = result + 9;
    do
    {
LABEL_10:
      *int v6 = -4096;
      v6 += 2;
    }
    while (v6 != v7);
    return result;
  }
  if ((v2 & 1) == 0)
  {
    if (v5 == *((_DWORD *)result + 4))
    {
      *uint64_t result = 0;
      if (!v5) {
        return result;
      }
      int v6 = (void *)result[1];
      unsigned int v7 = &v6[2 * v5];
      goto LABEL_10;
    }
    MEMORY[0x1D25D9CD0](result[1], 8);
  }

  return sub_1CBF8AE8C(v1, v5);
}

double llvm::CFGViewerPass::run@<D0>(llvm::Value *this@<X1>, uint64_t a2@<X8>)
{
  int v3 = byte_1EBCC4717;
  if (byte_1EBCC4717 >= 0) {
    size_t v4 = byte_1EBCC4717 & 0x7F;
  }
  else {
    size_t v4 = qword_1EBCC4708;
  }
  if (!v4
    || ((v8[0] = (uint64_t)llvm::Value::getName(this), v8[1] = v5, v3 >= 0)
      ? (int v6 = (char *)&qword_1EBCC4700)
      : (int v6 = (char *)qword_1EBCC4700),
        llvm::StringRef::find(v8, v6, v4, 0) != -1))
  {
    llvm::AnalysisManager<llvm::Function>::getResultImpl();
  }
  *(void *)a2 = a2 + 32;
  *(void *)(a2 + 8) = a2 + 32;
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a2 + 48) = a2 + 80;
  *(void *)(a2 + 56) = a2 + 80;
  *(void *)&double result = 2;
  *(void *)(a2 + 64) = 2;
  *(_DWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 20) = 1;
  *(void *)(a2 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  return result;
}

double llvm::CFGOnlyViewerPass::run@<D0>(llvm::Value *this@<X1>, uint64_t a2@<X8>)
{
  int v3 = byte_1EBCC4717;
  if (byte_1EBCC4717 >= 0) {
    size_t v4 = byte_1EBCC4717 & 0x7F;
  }
  else {
    size_t v4 = qword_1EBCC4708;
  }
  if (!v4
    || ((v8[0] = (uint64_t)llvm::Value::getName(this), v8[1] = v5, v3 >= 0)
      ? (int v6 = (char *)&qword_1EBCC4700)
      : (int v6 = (char *)qword_1EBCC4700),
        llvm::StringRef::find(v8, v6, v4, 0) != -1))
  {
    llvm::AnalysisManager<llvm::Function>::getResultImpl();
  }
  *(void *)a2 = a2 + 32;
  *(void *)(a2 + 8) = a2 + 32;
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a2 + 48) = a2 + 80;
  *(void *)(a2 + 56) = a2 + 80;
  *(void *)&double result = 2;
  *(void *)(a2 + 64) = 2;
  *(_DWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 20) = 1;
  *(void *)(a2 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  return result;
}

double llvm::CFGPrinterPass::run@<D0>(llvm::Value *this@<X1>, uint64_t a2@<X8>)
{
  int v3 = byte_1EBCC4717;
  if (byte_1EBCC4717 >= 0) {
    size_t v4 = byte_1EBCC4717 & 0x7F;
  }
  else {
    size_t v4 = qword_1EBCC4708;
  }
  if (!v4
    || ((v8[0] = (uint64_t)llvm::Value::getName(this), v8[1] = v5, v3 >= 0)
      ? (int v6 = (char *)&qword_1EBCC4700)
      : (int v6 = (char *)qword_1EBCC4700),
        llvm::StringRef::find(v8, v6, v4, 0) != -1))
  {
    llvm::AnalysisManager<llvm::Function>::getResultImpl();
  }
  *(void *)a2 = a2 + 32;
  *(void *)(a2 + 8) = a2 + 32;
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a2 + 48) = a2 + 80;
  *(void *)(a2 + 56) = a2 + 80;
  *(void *)&double result = 2;
  *(void *)(a2 + 64) = 2;
  *(_DWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 20) = 1;
  *(void *)(a2 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  return result;
}

double llvm::CFGOnlyPrinterPass::run@<D0>(llvm::Value *this@<X1>, uint64_t a2@<X8>)
{
  int v3 = byte_1EBCC4717;
  if (byte_1EBCC4717 >= 0) {
    size_t v4 = byte_1EBCC4717 & 0x7F;
  }
  else {
    size_t v4 = qword_1EBCC4708;
  }
  if (!v4
    || ((v8[0] = (uint64_t)llvm::Value::getName(this), v8[1] = v5, v3 >= 0)
      ? (int v6 = (char *)&qword_1EBCC4700)
      : (int v6 = (char *)qword_1EBCC4700),
        llvm::StringRef::find(v8, v6, v4, 0) != -1))
  {
    llvm::AnalysisManager<llvm::Function>::getResultImpl();
  }
  *(void *)a2 = a2 + 32;
  *(void *)(a2 + 8) = a2 + 32;
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a2 + 48) = a2 + 80;
  *(void *)(a2 + 56) = a2 + 80;
  *(void *)&double result = 2;
  *(void *)(a2 + 64) = 2;
  *(_DWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 20) = 1;
  *(void *)(a2 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  return result;
}

void llvm::Function::viewCFG(llvm::Function *this)
{
}

void llvm::Function::viewCFG(llvm::Function *this, char a2, const llvm::BlockFrequencyInfo *a3, const llvm::BranchProbabilityInfo *a4)
{
  int v8 = byte_1EBCC4717;
  if (byte_1EBCC4717 >= 0) {
    size_t v9 = byte_1EBCC4717 & 0x7F;
  }
  else {
    size_t v9 = qword_1EBCC4708;
  }
  if (!v9
    || ((Name = llvm::Value::getName(this), uint64_t v19 = v10, v8 >= 0)
      ? (int v11 = (char *)&qword_1EBCC4700)
      : (int v11 = (char *)qword_1EBCC4700),
        llvm::StringRef::find((uint64_t *)&Name, v11, v9, 0) != -1))
  {
    if (a3) {
      unint64_t MaxFreq = llvm::getMaxFreq(this, a3, a3);
    }
    else {
      unint64_t MaxFreq = 0;
    }
    Name = (char *)this;
    uint64_t v19 = a3;
    long long v20 = a4;
    unint64_t v21 = MaxFreq;
    char v22 = 0;
    BOOL v23 = a4 != 0;
    BOOL v24 = a3 != 0;
    size_t v17 = &Name;
    __int16 v16 = 1283;
    v15[0] = "cfg";
    void v15[2] = llvm::Value::getName(this);
    void v15[3] = v13;
    v14[16] = 257;
    sub_1CD46463C((uint64_t)&v17, (llvm::Twine *)v15, a2, (uint64_t)v14);
  }
}

void sub_1CD46463C(uint64_t a1, llvm::Twine *this, char a3, uint64_t a4)
{
  char v8 = 0;
  LOBYTE(__p) = 0;
  sub_1CBF956FC(v9, a1, this, a3, a4, (uint64_t)&__p);
  if (v8 < 0) {
    operator delete(__p);
  }
  char v4 = v10;
  if (v10 >= 0) {
    std::string::size_type v5 = v10 & 0x7F;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v9[1];
  }
  if (v5)
  {
    if (v10 >= 0) {
      int v6 = v9;
    }
    else {
      int v6 = (void **)v9[0];
    }
    llvm::DisplayGraph((std::string::value_type *)v6, v5, 0, 0);
    char v4 = v10;
  }
  if (v4 < 0) {
    operator delete(v9[0]);
  }
}

void llvm::Function::viewCFGOnly(llvm::Function *this)
{
}

void **llvm::DOTGraphTraits<llvm::DOTFuncInfo *>::computeDeoptOrUnreachablePaths(uint64_t a1, uint64_t a2)
{
  v35[24] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 80);
  if (v3) {
    uint64_t v4 = v3 - 24;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v21 = v4;
  sub_1CBF8A668(&v21, (uint64_t)v24);
  sub_1CBF95C20((uint64_t)&v31, (uint64_t)v24);
  sub_1CBF95C20((uint64_t)&v26, (uint64_t)&v25);
  std::string::size_type v5 = (uint64_t *)(a1 + 8);
  while (1)
  {
    if (v34 != v29) {
      goto LABEL_30;
    }
    if (!v34) {
      break;
    }
    int v6 = v28;
    unsigned int v7 = v33;
    while (*(void *)v7 == *(void *)v6 && v7[4] == v6[4])
    {
      v7 += 6;
      v6 += 6;
      if (v7 == (_DWORD *)((char *)v33 + 24 * v34)) {
        goto LABEL_21;
      }
    }
LABEL_30:
    unsigned int v14 = (llvm::BasicBlock *)*((void *)v33 + 3 * v34 - 3);
    char v22 = v14;
    int v15 = sub_1CBF95B50((uint64_t)v14);
    __int16 v16 = (void *)*((void *)v14 + 5);
    if (v15)
    {
      if (v16 == (void *)((char *)v14 + 40))
      {
        size_t v17 = 0;
      }
      else
      {
        if (v16) {
          size_t v17 = v16 - 3;
        }
        else {
          size_t v17 = 0;
        }
        if (*((unsigned __int8 *)v17 + 16) - 29 >= 0xB) {
          size_t v17 = 0;
        }
      }
      if (byte_1EBCC4278 && *((unsigned char *)v17 + 16) == 35)
      {
LABEL_39:
        BOOL v10 = 1;
        goto LABEL_40;
      }
      if (byte_1EBCC4338) {
        BOOL v10 = llvm::BasicBlock::getTerminatingDeoptimizeCall(v14) != 0;
      }
      else {
        BOOL v10 = 0;
      }
    }
    else
    {
      if (v16 == (void *)((char *)v14 + 40)) {
        goto LABEL_39;
      }
      uint64_t v18 = v16 ? (unsigned __int8 *)(v16 - 3) : 0;
      if (v18[16] - 29 > 0xA) {
        goto LABEL_39;
      }
      int NumSuccessors = llvm::Instruction::getNumSuccessors((llvm::Instruction *)v18);
      if (!NumSuccessors) {
        goto LABEL_39;
      }
      unsigned int v12 = 0;
      int v20 = NumSuccessors - 1;
      do
      {
        uint64_t Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v18, v12);
        size_t v9 = sub_1CD46647C(v5, &Successor);
        BOOL v10 = *((unsigned char *)v9 + 8) != 0;
        if (*((unsigned char *)v9 + 8)) {
          BOOL v11 = v20 == v12;
        }
        else {
          BOOL v11 = 1;
        }
        ++v12;
      }
      while (!v11);
    }
LABEL_40:
    *((unsigned char *)sub_1CD46647C(v5, &v22) + 8) = v10;
    if (--v34) {
      sub_1CBF7B148((llvm::SmallPtrSetImplBase *)&v31);
    }
  }
LABEL_21:
  if (v28 != &v30) {
    free(v28);
  }
  if (v27 != v26) {
    free(v27);
  }
  if (v33 != v35) {
    free(v33);
  }
  if (v32 != v31) {
    free(v32);
  }
  return sub_1CBF95680(v24);
}

void sub_1CD46497C(uint64_t a1, uint64_t a2, char a3)
{
  sub_1CD464A14((uint64_t)v3, a1, a2, a3);
}

void sub_1CD4649AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, llvm::raw_ostream *a15, uint64_t a16, uint64_t a17, uint64_t a18, llvm *a19, uint64_t a20,unsigned int a21)
{
  llvm::Twine::str(v21, &__p);
  sub_1CD464B04((uint64_t)&a15, (uint64_t)&__p);
  sub_1CD464D48((uint64_t **)&a15);
  sub_1CB8E509C(a15, "}\n");
  if (a14 < 0) {
    operator delete(__p);
  }
  llvm::deallocate_buffer(a19, (void *)(16 * a21));
}

uint64_t sub_1CD464A00()
{
  return v0;
}

void sub_1CD464A14(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 4llvm::Function::viewCFG(this, 1, 0, 0) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 24) = a4;
  sub_1CD464A88(a1 + 32);
}

void sub_1CD464A5C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, llvm *a10, uint64_t a11, unsigned int a12)
{
}

uint64_t sub_1CD464A70()
{
  *(unsigned char *)(v0 + 16) = 0;
  return v0;
}

void sub_1CD464A88(uint64_t a1)
{
}

uint64_t sub_1CD464AB4()
{
  *(void *)uint64_t v1 = 0;
  *(void *)(v1 + 8) = 0;
  *(_DWORD *)(v1 + 16) = 0;
  *(void *)uint64_t v1 = *(void *)v0;
  *(void *)uint64_t v0 = 0;
  *(_DWORD *)(v1 + 8) = *(_DWORD *)(v0 + 8);
  *(_DWORD *)(v0 + 8) = 0;
  int v2 = *(_DWORD *)(v1 + 12);
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v0 + 12);
  *(_DWORD *)(v0 + 12) = v2;
  int v3 = *(_DWORD *)(v1 + 16);
  *(_DWORD *)(v1 + 16) = *(_DWORD *)(v0 + 16);
  *(_DWORD *)(v0 + 16) = v3;
  return v1;
}

void sub_1CD464B04(uint64_t a1, uint64_t a2)
{
  sub_1CD464DD4(&v28, ***(llvm::Value ****)(a1 + 8));
  char v4 = *(unsigned char *)(a2 + 23);
  int v5 = v4;
  uint64_t v6 = v4 & 0x7F;
  if (v5 < 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v6)
  {
    unsigned int v7 = sub_1CB8E509C(*(llvm::raw_ostream **)a1, "digraph \"");
    char v8 = (std::string *)a2;
  }
  else
  {
    std::string::size_type size = *((unsigned char *)&v28.__r_.__value_.__s + 23) & 0x7F;
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v28.__r_.__value_.__l.__size_;
    }
    char v22 = *(llvm::raw_ostream **)a1;
    if (!size)
    {
      sub_1CB8E509C(v22, "digraph unnamed {\n");
      goto LABEL_13;
    }
    unsigned int v7 = sub_1CB8E509C(v22, "digraph \"");
    char v8 = &v28;
  }
  llvm::DOT::EscapeString((char *)v8, (uint64_t)&__p);
  if (v27 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  if (v27 >= 0) {
    size_t v10 = v27 & 0x7F;
  }
  else {
    size_t v10 = v26;
  }
  BOOL v11 = llvm::raw_ostream::write(v7, p_p, v10);
  sub_1CB8E509C(v11, "\" {\n");
  if (v27 < 0) {
    operator delete(__p);
  }
LABEL_13:
  char v12 = *(unsigned char *)(a2 + 23);
  int v13 = v12;
  uint64_t v14 = v12 & 0x7F;
  if (v13 < 0) {
    uint64_t v14 = *(void *)(a2 + 8);
  }
  if (v14)
  {
    int v15 = sub_1CB8E509C(*(llvm::raw_ostream **)a1, "\tlabel=\"");
    llvm::DOT::EscapeString((char *)a2, (uint64_t)&__p);
    if (v27 >= 0) {
      __int16 v16 = (const char *)&__p;
    }
    else {
      __int16 v16 = (const char *)__p;
    }
    if (v27 >= 0) {
      size_t v17 = v27 & 0x7F;
    }
    else {
      size_t v17 = v26;
    }
    uint64_t v18 = v15;
    goto LABEL_23;
  }
  std::string::size_type v23 = *((unsigned char *)&v28.__r_.__value_.__s + 23) & 0x7F;
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v23 = v28.__r_.__value_.__l.__size_;
  }
  if (v23)
  {
    BOOL v24 = sub_1CB8E509C(*(llvm::raw_ostream **)a1, "\tlabel=\"");
    llvm::DOT::EscapeString((char *)&v28, (uint64_t)&__p);
    if (v27 >= 0) {
      __int16 v16 = (const char *)&__p;
    }
    else {
      __int16 v16 = (const char *)__p;
    }
    if (v27 >= 0) {
      size_t v17 = v27 & 0x7F;
    }
    else {
      size_t v17 = v26;
    }
    uint64_t v18 = v24;
LABEL_23:
    uint64_t v19 = llvm::raw_ostream::write(v18, v16, v17);
    sub_1CB8E509C(v19, "\";\n");
    if (v27 < 0) {
      operator delete(__p);
    }
  }
  int v20 = *(llvm::raw_ostream **)a1;
  char v27 = 0;
  LOBYTE(__p) = 0;
  llvm::raw_ostream::write(v20, (const char *)&__p, 0);
  if (v27 < 0) {
    operator delete(__p);
  }
  sub_1CB8E509C(*(llvm::raw_ostream **)a1, "\n");
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
}

void sub_1CD464D48(uint64_t **a1)
{
  uint64_t v1 = *(void *)*a1[1];
  uint64_t v2 = v1 + 72;
  uint64_t v3 = *(void *)(v1 + 80);
  if (v3 != v1 + 72)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    do
    {
      if (v3) {
        uint64_t v6 = (llvm::Value *)(v3 - 24);
      }
      else {
        uint64_t v6 = 0;
      }
      if (!llvm::DOTGraphTraits<llvm::DOTFuncInfo *>::isNodeHidden(v5, (uint64_t)v6, *a1[1])) {
        sub_1CBF93F48(a1, v6);
      }
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != v2);
  }
}

void sub_1CD464DD4(std::string *a1, llvm::Value *this)
{
  Name = llvm::Value::getName(this);
  if (Name) {
    std::string::__init(&v8, Name, v4);
  }
  else {
    memset(&v8, 0, sizeof(v8));
  }
  uint64_t v5 = std::string::insert(&v8, 0, "CFG for '");
  std::string::size_type v6 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v9.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v9.__r_.__value_.__r.__words[2] = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  unsigned int v7 = std::string::append(&v9, "' function");
  *a1 = *v7;
  v7->__r_.__value_.__r.__words[0] = 0;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_1CD464E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 32))
  {
    uint64_t v5 = *(uint64_t **)(a3 + 8);
    std::string::size_type v6 = (llvm *)*v5;
    if (*v5)
    {
      unsigned int v7 = sub_1CBF7A45C(*v5, a2);
      if (v7 == -1) {
        std::string::size_type v6 = 0;
      }
      else {
        std::string::size_type v6 = *(llvm **)(*((void *)v6 + 1) + 24 * v7 + 16);
      }
    }
    llvm::getHeatColor(v6, *(void *)(a3 + 24), &v23);
    double v8 = 0.0;
    if ((unint64_t)v6 > *(void *)(a3 + 24) >> 1) {
      double v8 = 1.0;
    }
    llvm::getHeatColor(v8, &v22);
    std::operator+<char>();
    std::string v9 = std::string::append(&v18, "ff\", style=filled,");
    std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    BOOL v11 = std::string::append(&v19, " fillcolor=\"");
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v13 = &v23;
    }
    else {
      int v13 = (std::string *)v23.__r_.__value_.__r.__words[0];
    }
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&v23.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = v23.__r_.__value_.__l.__size_;
    }
    int v15 = std::string::append(&v20, (const std::string::value_type *)v13, size);
    std::string::size_type v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    size_t v17 = std::string::append(&v21, "70\"");
    *(std::string *)a1 = *v17;
    v17->__r_.__value_.__r.__words[0] = 0;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 23) = 0;
    *(unsigned char *)a1 = 0;
  }
}

void sub_1CD465070(std::string *a1, char a2, llvm::Value *a3)
{
  if (a2)
  {
    sub_1CD465460(a3, a1);
  }
  else
  {
    *(void *)&v5[1] = v3;
    uint64_t v6 = v4;
    sub_1CBF94B54(a3, (void (*)(uint64_t, void **, llvm::Value *))sub_1CD4655AC, (uint64_t)v5, (void (*)(uint64_t, uint64_t, unsigned int *, std::string::size_type))sub_1CD4655B8, (uint64_t)sub_1CD465570, (uint64_t)a1);
  }
}

uint64_t sub_1CD4650FC(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 40);
  if (v6 == a3 + 40 || (v6 ? (unsigned int v7 = (unsigned __int8 *)(v6 - 24)) : (unsigned int v7 = 0), v7[16] - 29 > 0xA)) {
    int NumSuccessors = 0;
  }
  else {
    int NumSuccessors = llvm::Instruction::getNumSuccessors((llvm::Instruction *)v7);
  }
  if (*(unsigned char *)(a1 + 16)) {
    sub_1CB8E509C(a2, "</tr><tr>");
  }
  if (NumSuccessors)
  {
    unint64_t v9 = 0;
    char v10 = 0;
    int v11 = 0;
    do
    {
      sub_1CBF94EC4(a3, v11, (uint64_t)&__p);
      size_t v12 = v30 & 0x7F;
      if (v30 < 0) {
        size_t v12 = v29;
      }
      if (v12)
      {
        if (*(unsigned char *)(a1 + 16))
        {
          int v13 = sub_1CB8E509C(a2, "<td colspan=\"1\" port=\"s");
          sub_1CD098D14(v13, v9, 0, 0, 0);
          uint64_t v14 = sub_1CB8E509C(v13, "\">");
          if (v30 >= 0) {
            p_p = (const char *)&__p;
          }
          else {
            p_p = (const char *)__p;
          }
          if (v30 >= 0) {
            size_t v16 = v30 & 0x7F;
          }
          else {
            size_t v16 = v29;
          }
          size_t v17 = llvm::raw_ostream::write(v14, p_p, v16);
          sub_1CB8E509C(v17, "</td>");
        }
        else
        {
          if (v9) {
            sub_1CB8E509C(a2, "|");
          }
          std::string v20 = sub_1CB8E509C(a2, "<s");
          sub_1CD098D14(v20, v9, 0, 0, 0);
          std::string v21 = sub_1CB8E509C(v20, ">");
          llvm::DOT::EscapeString((char *)&__p, (uint64_t)v26);
          if (v27 >= 0) {
            std::string v22 = v26;
          }
          else {
            std::string v22 = (void **)v26[0];
          }
          if (v27 >= 0) {
            size_t v23 = v27 & 0x7F;
          }
          else {
            size_t v23 = (size_t)v26[1];
          }
          llvm::raw_ostream::write(v21, (const char *)v22, v23);
          if (v27 < 0) {
            operator delete(v26[0]);
          }
        }
        char v10 = 1;
      }
      if (v30 < 0) {
        operator delete(__p);
      }
      int v18 = v11 + 1;
      if (NumSuccessors == v11 + 1) {
        break;
      }
      ++v11;
    }
    while (v9++ != 63);
    if (((NumSuccessors != v18) & v10) != 0)
    {
      if (*(unsigned char *)(a1 + 16)) {
        BOOL v24 = "<td colspan=\"1\" port=\"s64\">truncated...</td>";
      }
      else {
        BOOL v24 = "|<s64>truncated...";
      }
      sub_1CB8E509C(a2, v24);
      char v10 = 1;
    }
  }
  else
  {
    char v10 = 0;
  }
  return v10 & 1;
}

void sub_1CD465378(uint64_t a1, unint64_t a2, int a3, llvm::Instruction *this, unsigned int a5)
{
  uint64_t Successor = llvm::Instruction::getSuccessor(this, a5);
  if (Successor)
  {
    unint64_t v11 = Successor;
    sub_1CBF94EC4(a2, a5, (uint64_t)__p);
    if ((v14 & 0x80u) == 0) {
      unint64_t v12 = v14;
    }
    else {
      unint64_t v12 = (unint64_t)__p[1];
    }
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    if (!v12) {
      a3 = -1;
    }
    sub_1CD4656F0((uint64_t)__p, a2, (uint64_t)this, a5, **(void **)(a1 + 8));
    sub_1CD4655CC((llvm::raw_ostream **)a1, a2, a3, v11, (uint64_t)__p);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1CD465460(llvm::Value *a1@<X0>, std::string *a2@<X8>)
{
  Name = llvm::Value::getName(a1);
  if (v5)
  {
    if (Name)
    {
      std::string::__init(a2, Name, v5);
    }
    else
    {
      a2->__r_.__value_.__r.__words[0] = 0;
      a2->__r_.__value_.__l.__size_ = 0;
      a2->__r_.__value_.__r.__words[2] = 0;
    }
  }
  else
  {
    v16[0] = 0;
    v16[1] = 0;
    uint64_t v17 = 0;
    int v8 = 0;
    char v12 = 0;
    uint64_t v13 = 0;
    int v15 = v16;
    int v14 = 0;
    unsigned int v7 = &unk_1F2646F30;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    llvm::Value::printAsOperand(a1, (llvm::raw_ostream *)&v7, 0, 0);
    if (*((char *)v15 + 23) < 0)
    {
      sub_1CB8BDF7C((uint64_t)a2, *v15, (unint64_t)v15[1]);
    }
    else
    {
      long long v6 = *(_OWORD *)v15;
      a2->__r_.__value_.__r.__words[2] = (std::string::size_type)v15[2];
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v7);
    if (SHIBYTE(v17) < 0) {
      operator delete(v16[0]);
    }
  }
}

std::string *sub_1CD465570(std::string *a1, _DWORD *a2, unsigned int a3)
{
  double result = std::string::erase(a1, *a2, a3 - (unint64_t)*a2);
  --*a2;
  return result;
}

void sub_1CD4655AC(uint64_t a1, llvm::raw_ostream *a2, llvm::Value *a3)
{
}

uint64_t sub_1CD4655B8(uint64_t (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a2, a3, a4);
}

llvm::raw_ostream **sub_1CD4655CC(llvm::raw_ostream **result, unint64_t a2, int a3, unint64_t a4, uint64_t a5)
{
  if (a3 <= 64)
  {
    uint64_t v10 = result;
    uint64_t v11 = sub_1CB8E509C(*result, "\tNode");
    llvm::write_hex(v11, a2, 3, 0, 0);
    if ((a3 & 0x80000000) == 0)
    {
      char v12 = sub_1CB8E509C(*v10, ":s");
      llvm::raw_ostream::operator<<(v12, a3);
    }
    uint64_t v13 = sub_1CB8E509C(*v10, " -> Node");
    llvm::write_hex(v13, a4, 3, 0, 0);
    char v14 = *(unsigned char *)(a5 + 23);
    int v15 = v14;
    uint64_t v16 = v14 & 0x7F;
    if (v15 < 0) {
      uint64_t v16 = *(void *)(a5 + 8);
    }
    if (v16)
    {
      uint64_t v17 = sub_1CB8E509C(*v10, "[");
      char v18 = *(unsigned char *)(a5 + 23);
      BOOL v19 = v18 < 0;
      if (v18 >= 0) {
        std::string v20 = (const char *)a5;
      }
      else {
        std::string v20 = *(const char **)a5;
      }
      size_t v21 = v18 & 0x7F;
      if (v19) {
        size_t v22 = *(void *)(a5 + 8);
      }
      else {
        size_t v22 = v21;
      }
      size_t v23 = llvm::raw_ostream::write(v17, v20, v22);
      sub_1CB8E509C(v23, "]");
    }
    BOOL v24 = *v10;
    return (llvm::raw_ostream **)sub_1CB8E509C(v24, ";\n");
  }
  return result;
}

void sub_1CD4656F0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  if (!*(unsigned char *)(a5 + 33)) {
    goto LABEL_12;
  }
  uint64_t v9 = *(void *)(a2 + 40);
  if (v9 == a2 + 40)
  {
    uint64_t v11 = 0;
  }
  else
  {
    if (v9) {
      uint64_t v10 = v9 - 24;
    }
    else {
      uint64_t v10 = 0;
    }
    if (*(unsigned __int8 *)(v10 + 16) - 29 >= 0xB) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v10;
    }
  }
  unsigned int NumSuccessors = llvm::Instruction::getNumSuccessors((llvm::Instruction *)v11);
  if (NumSuccessors == 1)
  {
    *(unsigned char *)(a1 + 23) = 10;
    strcpy((char *)a1, "penwidth=2");
    return;
  }
  if (NumSuccessors > a4)
  {
    uint64_t Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v11, a4);
    double v14 = (double)llvm::BranchProbabilityInfo::getEdgeProbability(*(void *)(a5 + 16), a2, Successor)
        * 4.65661287e-10;
    double v50 = v14 + 1.0;
    double v51 = v14;
    if (*(unsigned char *)(a5 + 34))
    {
      int v15 = *(uint64_t **)(a5 + 8);
      uint64_t v16 = *v15;
      double v17 = 0.0;
      if (*v15)
      {
        unsigned int v18 = sub_1CBF7A45C(*v15, a2);
        if (v18 != -1) {
          double v17 = (double)*(unint64_t *)(*(void *)(v16 + 8) + 24 * v18 + 16);
        }
      }
      v42.__r_.__value_.__r.__words[0] = (std::string::size_type)"label=\"W:{0}\" penwidth={1}";
      v42.__r_.__value_.__l.__size_ = 26;
      v42.__r_.__value_.__r.__words[2] = (std::string::size_type)&v48;
      uint64_t v43 = 2;
      int v44 = &unk_1F26014A0;
      int v45 = (double *)(v14 * v17);
      int v46 = &unk_1F2601470;
      unsigned int v47 = &v50;
      BOOL v48 = &v44;
      uint64_t v49 = &v46;
      sub_1CD465B2C((uint64_t)&v42, __p);
      BOOL v19 = (void *)(HIBYTE(v41) & 0x7F);
      if (v41 < 0) {
        BOOL v19 = __p[1];
      }
      if (v19)
      {
        *(_OWORD *)a1 = *(_OWORD *)__p;
        *(void *)(a1 + 16) = v41;
        __p[1] = 0;
        uint64_t v41 = 0;
        __p[0] = 0;
      }
      else if ((*(void *)(v11 + 48) || (*(unsigned char *)(v11 + 23) & 0x20) != 0) {
             && (uint64_t MetadataImpl = llvm::Instruction::getMetadataImpl((llvm::Instruction *)v11, 2)) != 0
      }
             && (uint64_t v21 = MetadataImpl,
                 String = (void *)llvm::MDString::getString(*(llvm::MDString **)(MetadataImpl
                                                                                 - 8
                                                                                 * *(unsigned int *)(MetadataImpl + 8))),
                 v23 == 14)
             && (*String == 0x775F68636E617262
               ? (BOOL v24 = *(void *)((char *)String + 6) == 0x737468676965775FLL)
               : (BOOL v24 = 0),
                 v24
              && (uint64_t v25 = *(unsigned int *)(v21 + 8), a4 + 1 < v25)
              && (uint64_t v26 = *(void *)(v21 - 8 * v25 + 8 * (a4 + 1)), *(unsigned char *)v26 == 1)
              && (uint64_t v27 = *(void *)(v26 + 128), *(unsigned char *)(v27 + 16) == 16)))
      {
        std::string v28 = (unint64_t *)(v27 + 24);
        if (*(_DWORD *)(v27 + 32) >= 0x41u) {
          std::string v28 = (unint64_t *)*v28;
        }
        std::to_string(&v38, *v28);
        size_t v29 = std::string::insert(&v38, 0, "label=\"W:");
        std::string::size_type v30 = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        char v31 = std::string::append(&v39, "\" penwidth=");
        std::string::size_type v32 = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        v42.__r_.__value_.__r.__words[2] = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v37, v50);
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          __int16 v33 = &v37;
        }
        else {
          __int16 v33 = (std::string *)v37.__r_.__value_.__r.__words[0];
        }
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = *((unsigned char *)&v37.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          std::string::size_type size = v37.__r_.__value_.__l.__size_;
        }
        char v35 = std::string::append(&v42, (const std::string::value_type *)v33, size);
        std::string::size_type v36 = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)a1 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        *(void *)(a1 + 16) = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v37.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v42.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v38.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        *(unsigned char *)(a1 + 23) = 0;
        *(unsigned char *)a1 = 0;
      }
      if (SHIBYTE(v41) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      v42.__r_.__value_.__r.__words[0] = (std::string::size_type)"label=\"{0:P}\" penwidth={1}";
      v42.__r_.__value_.__l.__size_ = 26;
      v42.__r_.__value_.__r.__words[2] = (std::string::size_type)&v48;
      uint64_t v43 = 2;
      int v44 = &unk_1F2601470;
      int v45 = &v51;
      int v46 = &unk_1F2601470;
      unsigned int v47 = &v50;
      BOOL v48 = &v44;
      uint64_t v49 = &v46;
      sub_1CD465B2C((uint64_t)&v42, (void *)a1);
    }
  }
  else
  {
LABEL_12:
    *(unsigned char *)(a1 + 23) = 0;
    *(unsigned char *)a1 = 0;
  }
}

void sub_1CD465B2C(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v3 = 0;
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v10 = a2;
  int v9 = 0;
  uint64_t v2 = &unk_1F2646F30;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v2, a1);
  if (v6 != v4) {
    llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v2);
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v2);
}

void sub_1CD465BBC()
{
}

void sub_1CD465BD0(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
}

void sub_1CD465BD8(double *a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  if (!a4)
  {
    unsigned int v8 = 2;
    goto LABEL_8;
  }
  uint64_t v6 = a4;
  unsigned int v7 = *a3;
  unsigned int v8 = 3;
  unsigned int v9 = 2;
  if (v7 <= 0x64)
  {
    if (v7 != 69)
    {
      if (v7 != 70)
      {
        if (v7 != 80) {
          goto LABEL_17;
        }
        goto LABEL_15;
      }
      goto LABEL_14;
    }
    unsigned int v8 = 1;
LABEL_15:
    uint64_t v6 = a4 - 1;
    if (a4 != 1)
    {
      ++a3;
      unsigned int v9 = v8;
      goto LABEL_17;
    }
LABEL_8:
    unint64_t DefaultPrecision = llvm::getDefaultPrecision(v8);
    unsigned int v9 = v8;
    goto LABEL_9;
  }
  switch(v7)
  {
    case 'e':
      unsigned int v8 = 0;
      goto LABEL_15;
    case 'f':
LABEL_14:
      unsigned int v8 = 2;
      goto LABEL_15;
    case 'p':
      goto LABEL_15;
  }
LABEL_17:
  unint64_t v11 = 0;
  if (llvm::getAsUnsignedInteger(a3, v6, 0xAu, &v11))
  {
    unsigned int v8 = v9;
    goto LABEL_8;
  }
  if (v11 >= 0x63) {
    unint64_t DefaultPrecision = 99;
  }
  else {
    unint64_t DefaultPrecision = v11;
  }
LABEL_9:
  llvm::write_double(a2, v9, DefaultPrecision, 1, *a1);
}

void sub_1CD465CE8()
{
}

llvm::raw_ostream *sub_1CD465CFC(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return sub_1CD465D04((unint64_t *)(a1 + 8), a2, a3, a4);
}

llvm::raw_ostream *sub_1CD465D04(unint64_t *a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  int v15 = a3;
  uint64_t v16 = a4;
  int v14 = 0;
  if (sub_1CD465E40(&v15, &v14))
  {
    int v7 = v14;
    unint64_t v17 = 0;
    if (llvm::consumeUnsignedInteger((llvm *)&v15, (llvm::StringRef *)0xA, &v17, v6)) {
      unint64_t v8 = 0;
    }
    else {
      unint64_t v8 = v17;
    }
    if (llvm::isPrefixedHexStyle(v7)) {
      unint64_t v9 = v8 + 2;
    }
    else {
      unint64_t v9 = v8;
    }
    return llvm::write_hex(a2, *a1, v14, v9, 1);
  }
  if (v16)
  {
    int v11 = 0;
    unsigned int v12 = *v15;
    if (v12 <= 0x63)
    {
      if (v12 != 68)
      {
        if (v12 != 78) {
          goto LABEL_20;
        }
        goto LABEL_17;
      }
LABEL_18:
      int v11 = 0;
      ++v15;
      goto LABEL_19;
    }
    if (v12 == 100) {
      goto LABEL_18;
    }
    if (v12 == 110)
    {
LABEL_17:
      ++v15;
      int v11 = 1;
LABEL_19:
      --v16;
    }
  }
  else
  {
    int v11 = 0;
  }
LABEL_20:
  unint64_t v17 = 0;
  if (llvm::consumeUnsignedInteger((llvm *)&v15, (llvm::StringRef *)0xA, &v17, v6)) {
    size_t v13 = 0;
  }
  else {
    size_t v13 = v17;
  }
  return sub_1CD098D14(a2, *a1, v13, v11, 0);
}

BOOL sub_1CD465E40(unsigned __int8 **a1, int *a2)
{
  BOOL v4 = llvm::StringRef::startswith_insensitive(a1, "x", 1uLL);
  if (v4)
  {
    if (sub_1CD41D698((const void **)a1, "x-", 2uLL))
    {
      int v6 = 1;
    }
    else if (sub_1CD41D698((const void **)a1, "X-", 2uLL))
    {
      int v6 = 0;
    }
    else if ((sub_1CD41D698((const void **)a1, "x+", 2uLL) & 1) != 0 {
           || (sub_1CD41D698((const void **)a1, "x", 1uLL) & 1) != 0)
    }
    {
      int v6 = 3;
    }
    else
    {
      char v7 = sub_1CD41D698((const void **)a1, "X+", 2uLL);
      int v6 = 2;
      if ((v7 & 1) == 0)
      {
        if (!sub_1CD41D698((const void **)a1, "X", 1uLL)) {
          return v4;
        }
        int v6 = 2;
      }
    }
    *a2 = v6;
  }
  return v4;
}

void sub_1CD465F40(_WORD *a1, long long *a2)
{
  uint64_t v4 = sub_1CB883A14((uint64_t)&qword_1EBCC4680, 0, 0);
  qword_1EBCC4700 = 0;
  qword_1EBCC4708 = 0;
  qword_1EBCC4728 = 0;
  unk_1EBCC4730 = 0;
  byte_1EBCC4738 = 0;
  qword_1EBCC4720 = 0;
  unk_1EBCC4710 = 0;
  unk_1EBCC4718 = &unk_1F2643C20;
  qword_1EBCC4680 = (uint64_t)&unk_1F2643FD0;
  qword_1EBCC4740 = (uint64_t)&unk_1F2643EA0;
  qword_1EBCC4748 = (uint64_t)&unk_1F25F6428;
  qword_1EBCC4760 = (uint64_t)&qword_1EBCC4748;
  llvm::cl::Option::setArgStr(v4, "cfg-func-name", 0xDuLL);
  word_1EBCC468A = (32 * (*a1 & 3)) | word_1EBCC468A & 0xFF9F;
  xmmword_1EBCC46A0 = *a2;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCC4680);
}

void sub_1CD466058(_WORD *a1, long long *a2)
{
  uint64_t v4 = sub_1CB883A14((uint64_t)&qword_1EBCC4768, 0, 0);
  qword_1EBCC47E8 = 0;
  qword_1EBCC47F0 = 0;
  qword_1EBCC4810 = 0;
  unk_1EBCC4818 = 0;
  byte_1EBCC4820 = 0;
  qword_1EBCC4808 = 0;
  unk_1EBCC47F8 = 0;
  unk_1EBCC4800 = &unk_1F2643C20;
  qword_1EBCC4768 = (uint64_t)&unk_1F2643FD0;
  qword_1EBCC4828 = (uint64_t)&unk_1F2643EA0;
  qword_1EBCC4830 = (uint64_t)&unk_1F25F6428;
  qword_1EBCC4848 = (uint64_t)&qword_1EBCC4830;
  llvm::cl::Option::setArgStr(v4, "cfg-dot-filename-prefix", 0x17uLL);
  word_1EBCC4772 = (32 * (*a1 & 3)) | word_1EBCC4772 & 0xFF9F;
  xmmword_1EBCC4788 = *a2;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCC4768);
}

void sub_1CD466170(char **a1)
{
  uint64_t v2 = sub_1CB883A14((uint64_t)qword_1EBCC41F8, 0, 0);
  byte_1EBCC4278 = 0;
  qword_1EBCC4280 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBCC4288 = 0;
  qword_1EBCC41F8[0] = (uint64_t)&unk_1F26440A0;
  qword_1EBCC4290 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCC4298 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCC42B0 = (uint64_t)&qword_1EBCC4298;
  llvm::cl::Option::setArgStr(v2, "cfg-hide-unreachable-paths", 0x1AuLL);
  int v3 = *a1;
  byte_1EBCC4278 = **a1;
  byte_1EBCC4289 = 1;
  byte_1EBCC4288 = *v3;

  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EBCC41F8);
}

void sub_1CD46626C(char **a1)
{
  uint64_t v2 = sub_1CB883A14((uint64_t)qword_1EBCC42B8, 0, 0);
  byte_1EBCC4338 = 0;
  qword_1EBCC4340 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBCC4348 = 0;
  qword_1EBCC42B8[0] = (uint64_t)&unk_1F26440A0;
  qword_1EBCC4350 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCC4358 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCC4370 = (uint64_t)&qword_1EBCC4358;
  llvm::cl::Option::setArgStr(v2, "cfg-hide-deoptimize-paths", 0x19uLL);
  int v3 = *a1;
  byte_1EBCC4338 = **a1;
  byte_1EBCC4349 = 1;
  byte_1EBCC4348 = *v3;

  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EBCC42B8);
}

void sub_1CD466368(uint64_t **a1, long long *a2)
{
  uint64_t v4 = sub_1CB883A14((uint64_t)&qword_1EBCC45B8, 0, 0);
  xmmword_1EBCC4638 = 0u;
  *(_OWORD *)&qword_1EBCC4648 = 0u;
  *((void *)&xmmword_1EBCC4638 + 1) = &unk_1F2601200;
  qword_1EBCC45B8 = (uint64_t)&unk_1F2601198;
  qword_1EBCC4658 = (uint64_t)&unk_1F2643E40;
  qword_1EBCC4660 = (uint64_t)&unk_1F2601220;
  qword_1EBCC4678 = (uint64_t)&qword_1EBCC4660;
  llvm::cl::Option::setArgStr(v4, "cfg-hide-cold-paths", 0x13uLL);
  uint64_t v5 = *a1;
  *(void *)&xmmword_1EBCC4638 = **a1;
  byte_1EBCC4650 = 1;
  qword_1EBCC4648 = *v5;
  xmmword_1EBCC45D8 = *a2;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCC45B8);
}

void *sub_1CD46647C(uint64_t *a1, void *a2)
{
  char v7 = 0;
  char v4 = sub_1CD3C8538(a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD4664E4((uint64_t)a1, (uint64_t)a2, a2, v7);
    void *v5 = *a2;
    *((unsigned char *)v5 + 8) = 0;
  }
  return v5;
}

void *sub_1CD4664E4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD466594(a1, v7);
  unint64_t v9 = 0;
  sub_1CD3C8538((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CD466594(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  char v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD466668(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *double result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD466668(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v10 = 0;
      double result = sub_1CD3C8538((uint64_t *)v5, (void *)a2, &v10);
      unint64_t v9 = v10;
      *uint64_t v10 = *(void *)a2;
      *((unsigned char *)v9 + 8) = *(unsigned char *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

void llvm::CFLAndersAAResult::~CFLAndersAAResult(llvm::CFLAndersAAResult *this)
{
  sub_1CD466FDC((void **)this + 8);
  sub_1CD468728((unsigned int *)this + 10);
  MEMORY[0x1D25D9CD0](*((void *)this + 5), 8);
  uint64_t v2 = (llvm::CFLAndersAAResult *)*((void *)this + 4);
  if (v2 == (llvm::CFLAndersAAResult *)((char *)this + 8))
  {
    (*(void (**)(char *))(*((void *)this + 1) + 32))((char *)this + 8);
  }
  else if (v2)
  {
    (*(void (**)(llvm::CFLAndersAAResult *))(*(void *)v2 + 40))(v2);
  }
}

uint64_t llvm::CFLAndersAAResult::FunctionInfo::getAttrs(llvm::CFLAndersAAResult::FunctionInfo *this, const llvm::Value *a2)
{
  uint64_t v7 = 0;
  if (sub_1CD40EA84(*((void *)this + 3), *((_DWORD *)this + 10), (uint64_t)a2, &v7))
  {
    uint64_t v3 = v7;
    uint64_t v4 = *((void *)this + 3);
    uint64_t v5 = *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v4 = *((void *)this + 3);
    uint64_t v5 = *((unsigned int *)this + 10);
    uint64_t v3 = v4 + 16 * v5;
  }
  if (v3 == v4 + 16 * v5) {
    return 0;
  }
  else {
    return *(void *)(v3 + 8);
  }
}

BOOL llvm::CFLAndersAAResult::FunctionInfo::mayAlias(int *a1, const llvm::Value *a2, unint64_t a3, const llvm::Value *a4, unint64_t a5)
{
  int Attrs = llvm::CFLAndersAAResult::FunctionInfo::getAttrs((llvm::CFLAndersAAResult::FunctionInfo *)a1, a2);
  char v12 = v11;
  int v14 = llvm::CFLAndersAAResult::FunctionInfo::getAttrs((llvm::CFLAndersAAResult::FunctionInfo *)a1, a4);
  BOOL result = 1;
  if (v12 && v13)
  {
    if (llvm::cflaa::hasUnknownOrCallerAttr(Attrs))
    {
      BOOL v16 = v14 == 0;
      return !v16;
    }
    if (llvm::cflaa::hasUnknownOrCallerAttr(v14))
    {
      BOOL v16 = Attrs == 0;
      return !v16;
    }
    BOOL isGlobalOrArgAttr = llvm::cflaa::isGlobalOrArgAttr(Attrs);
    BOOL result = llvm::cflaa::isGlobalOrArgAttr(v14);
    if (!isGlobalOrArgAttr)
    {
      if (result)
      {
        return llvm::cflaa::isGlobalOrArgAttr(Attrs);
      }
      else
      {
        uint64_t v26 = 0;
        if (sub_1CBF98030(*(void *)a1, a1[4], (uint64_t)a2, &v26))
        {
          uint64_t v18 = v26;
          uint64_t v19 = *(void *)a1;
          uint64_t v20 = a1[4];
        }
        else
        {
          uint64_t v19 = *(void *)a1;
          uint64_t v20 = a1[4];
          uint64_t v18 = *(void *)a1 + 32 * v20;
        }
        if (v18 == v19 + 32 * v20) {
          return 0;
        }
        uint64_t v21 = sub_1CBF960B0(*(char **)(v18 + 8), *(char **)(v18 + 16), (unint64_t)a4);
        if (v21 == v22)
        {
          return 0;
        }
        else
        {
          uint64_t v23 = v21;
          BOOL result = 1;
          if (a3 <= 0xFFFFFFFFFFFFFFFDLL && a5 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            while (1)
            {
              uint64_t v24 = *((void *)v23 + 1);
              if (v24 == 0x7FFFFFFFFFFFFFFFLL) {
                break;
              }
              if (v24 >= (uint64_t)(1 - (a3 & 0x7FFFFFFFFFFFFFFFLL)) && v24 < (uint64_t)(a5 & 0x7FFFFFFFFFFFFFFFLL)) {
                break;
              }
              BOOL result = 0;
              v23 += 16;
              if (v23 == v22) {
                return result;
              }
            }
            return 1;
          }
        }
      }
    }
  }
  return result;
}

unsigned int *llvm::CFLAndersAAResult::scan(llvm::CFLAndersAAResult *this, const llvm::Function *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (char *)this + 40;
  uint64_t v10 = a2;
  LOBYTE(v11[0]) = 0;
  char v12 = 0;
  sub_1CD469C10((uint64_t)v9, (uint64_t)this + 40, (uint64_t *)&v10, (uint64_t)v11);
  if (v12) {
    sub_1CD468608(v11);
  }
  llvm::CFLAndersAAResult::buildInfoFrom(this, a2, (uint64_t)&v10);
  uint64_t v8 = a2;
  uint64_t v5 = sub_1CD46A04C((uint64_t)v4, (uint64_t *)&v8);
  uint64_t v6 = (unsigned int *)(v5 + 1);
  if (*((unsigned char *)v5 + 408))
  {
    sub_1CD46A118(v6, (uint64_t)&v10);
  }
  else
  {
    sub_1CD468298((uint64_t)v6, (uint64_t)&v10);
    *((unsigned char *)v5 + 408) = 1;
  }
  *((void *)this + 8) = sub_1CBF99B58(*((void *)this + 8), (uint64_t)a2, (uint64_t)this);
  return sub_1CD468608((unsigned int *)&v10);
}

int32x2_t sub_1CD466B08(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  if (sub_1CD469D10(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v5))
  {
    uint64_t v4 = v5;
    if (*(unsigned char *)(v5 + 408))
    {
      sub_1CD468608((unsigned int *)(v5 + 8));
      *(unsigned char *)(v4 + 408) = 0;
    }
    *(void *)uint64_t v4 = -8192;
    int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

BOOL llvm::CFLAndersAAResult::query(llvm::CFLAndersAAResult *this, const llvm::MemoryLocation *a2, const llvm::MemoryLocation *a3)
{
  uint64_t v3 = *(void *)a2;
  if (*(unsigned char *)(**(void **)a2 + 8) != 15) {
    return 0;
  }
  uint64_t v5 = *(void *)a3;
  if (*(unsigned char *)(**(void **)a3 + 8) != 15) {
    return 0;
  }
  unsigned int v7 = *(unsigned __int8 *)(v3 + 16);
  if (v7 >= 0x1C)
  {
    uint64_t v8 = (const llvm::Function **)(*(void *)(v3 + 40) + 56);
LABEL_8:
    uint64_t v10 = *v8;
    if (*v8) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  if (v7 == 21)
  {
    uint64_t v8 = (const llvm::Function **)(v3 + 24);
    goto LABEL_8;
  }
LABEL_9:
  unsigned int v11 = *(unsigned __int8 *)(v5 + 16);
  if (v11 >= 0x1C)
  {
    char v12 = (const llvm::Function **)(*(void *)(v5 + 40) + 56);
  }
  else
  {
    if (v11 != 21) {
      return 1;
    }
    char v12 = (const llvm::Function **)(v5 + 24);
  }
  uint64_t v10 = *v12;
  if (!*v12) {
    return 1;
  }
LABEL_15:
  uint64_t v13 = (int *)llvm::CFLAndersAAResult::ensureCached(this, v10);
  return llvm::CFLAndersAAResult::FunctionInfo::mayAlias(v13, (const llvm::Value *)v3, *((void *)a2 + 1), (const llvm::Value *)v5, *((void *)a3 + 1));
}

uint64_t llvm::CFLAndersAAResult::alias(llvm::CFLAndersAAResult *a1, const llvm::MemoryLocation *a2, const llvm::MemoryLocation *a3)
{
  if (*(void *)a2 == *(void *)a3) {
    return 3;
  }
  if (*(unsigned __int8 *)(*(void *)a2 + 16) > 0x14u || *(unsigned __int8 *)(*(void *)a3 + 16) >= 0x15u) {
    return llvm::CFLAndersAAResult::query(a1, a2, a3);
  }
  return 1;
}

void llvm::CFLAndersAA::run(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = a2 + 8;
  *(void *)(a2 + 4llvm::Function::viewCFG(this, 1, 0, 0) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = &unk_1F26016E0;
  *(void *)(a2 + 16) = a1;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 48) = 0;
  *(_DWORD *)(a2 + 56) = 0;
}

void llvm::initializeCFLAndersAAWrapperPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC4850, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CBF97D2C;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCC4850, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::createCFLAndersAAWrapperPass(llvm *this)
{
}

llvm::CFLAndersAAWrapperPass *llvm::CFLAndersAAWrapperPass::CFLAndersAAWrapperPass(llvm::CFLAndersAAWrapperPass *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = &llvm::CFLAndersAAWrapperPass::ID;
  *((_DWORD *)this + 6) = 4;
  *(void *)this = &unk_1F2601610;
  *((void *)this + 4) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC4850, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CBF97D2C;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCC4850, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return this;
}

void llvm::CFLAndersAAWrapperPass::initializePass(llvm::CFLAndersAAWrapperPass *this)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  operator new();
}

llvm::AnalysisUsage *llvm::CFLAndersAAWrapperPass::getAnalysisUsage(llvm::CFLAndersAAWrapperPass *this, llvm::AnalysisUsage *a2)
{
  *((unsigned char *)a2 + 16llvm::Function::viewCFG(this, 1, 0, 0) = 1;
  return llvm::AnalysisUsage::addRequiredID(a2, llvm::TargetLibraryInfoWrapperPass::ID);
}

void sub_1CD466FA4(llvm::ImmutablePass *a1@<X0>, void *a2@<X8>)
{
  sub_1CD4686B0(a1, a2);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD466FDC(void **a1)
{
  uint64_t v2 = *a1;
  while (v2)
  {
    uint64_t v3 = v2;
    uint64_t v2 = (void *)*v2;
    uint64_t v4 = v3[4];
    if (v4 != -8192 && v4 != -4096 && v4 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList(v3 + 2);
    }
    operator delete(v3);
  }
  *a1 = 0;
}

uint64_t sub_1CD467044(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CD4670BC(*(void *)a1, *(_DWORD *)(a1 + 16), *(void *)a2, *(_DWORD *)(a2 + 8), &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD4671B8(a1, a2, v7);
    *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
    *(_DWORD *)(v5 + 32) = 0;
    *(void *)(v5 + 16) = 0;
    *(void *)(v5 + 24) = 0;
  }
  return v5;
}

uint64_t sub_1CD4670BC(uint64_t a1, int a2, uint64_t a3, int a4, void *a5)
{
  if (a2)
  {
    unint64_t v5 = ~((unint64_t)(37 * a4) << 32)
       + (37 * a4)
       + ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
    unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    int v8 = a2 - 1;
    unsigned int v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27)));
    uint64_t v10 = (uint64_t *)(a1 + 40 * v9);
    uint64_t v11 = *v10;
    int v12 = *((_DWORD *)v10 + 2);
    if (*v10 == a3 && v12 == a4)
    {
      uint64_t v14 = 1;
    }
    else
    {
      BOOL v16 = 0;
      int v17 = 1;
      while (v11 != -4096 || v12 != -1)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v12 == -2;
        }
        if (v18 && v11 == -8192) {
          BOOL v16 = v10;
        }
        unsigned int v20 = v9 + v17++;
        unsigned int v9 = v20 & v8;
        uint64_t v10 = (uint64_t *)(a1 + 40 * (v20 & v8));
        uint64_t v11 = *v10;
        int v12 = *((_DWORD *)v10 + 2);
        uint64_t v14 = 1;
        if (*v10 == a3 && v12 == a4) {
          goto LABEL_8;
        }
      }
      uint64_t v14 = 0;
      if (v16) {
        uint64_t v10 = v16;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v14 = 0;
  }
LABEL_8:
  *a5 = v10;
  return v14;
}

uint64_t sub_1CD4671B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD467278(a1, v6);
  uint64_t v9 = 0;
  sub_1CD4670BC(*(void *)a1, *(_DWORD *)(a1 + 16), *(void *)a2, *(_DWORD *)(a2 + 8), &v9);
  a3 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)a3 != -4096 || *(_DWORD *)(a3 + 8) != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

_OWORD *sub_1CD467278(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  int32x2_t result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD467354(a1, v4, v4 + 40 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 40 * v10;
    do
    {
      *int32x2_t result = xmmword_1CFAC30E0;
      int32x2_t result = (_OWORD *)((char *)result + 40);
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD467354(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(_OWORD **)result;
    uint64_t v8 = 40 * v6;
    do
    {
      *int v7 = xmmword_1CFAC30E0;
      int v7 = (_OWORD *)((char *)v7 + 40);
      v8 -= 40;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *(void *)a2;
    int v10 = *(_DWORD *)(a2 + 8);
    if ((*(void *)a2 != -4096 || v10 != -1) && (v9 != -8192 || v10 != -2))
    {
      BOOL v16 = 0;
      sub_1CD4670BC(*(void *)v5, *(_DWORD *)(v5 + 16), v9, v10, &v16);
      uint64_t v13 = v16;
      _OWORD *v16 = *(_OWORD *)a2;
      *((_DWORD *)v13 + 8) = 0;
      *((void *)v13 + 2) = 0;
      *((void *)v13 + 3) = 0;
      *((void *)v13 + 2) = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = 0;
      *((_DWORD *)v13 + 6) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = 0;
      int v14 = *((_DWORD *)v13 + 7);
      *((_DWORD *)v13 + 7) = *(_DWORD *)(a2 + 28);
      *(_DWORD *)(a2 + 28) = v14;
      int v15 = *((_DWORD *)v13 + 8);
      *((_DWORD *)v13 + 8) = *(_DWORD *)(a2 + 32);
      *(_DWORD *)(a2 + 32) = v15;
      ++*(_DWORD *)(v5 + 8);
      int32x2_t result = MEMORY[0x1D25D9CD0](0, 8);
    }
    a2 += 40;
  }
  return result;
}

uint64_t sub_1CD467468(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CD4674DC(*(void *)a1, *(_DWORD *)(a1 + 16), *(void *)a2, *(_DWORD *)(a2 + 8), &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD4675D8(a1, a2, v7);
    *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
    *(void *)(v5 + 16) = 0;
  }
  return v5;
}

uint64_t sub_1CD4674DC(uint64_t a1, int a2, uint64_t a3, int a4, void *a5)
{
  if (a2)
  {
    unint64_t v5 = ~((unint64_t)(37 * a4) << 32)
       + (37 * a4)
       + ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
    unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    int v8 = a2 - 1;
    unsigned int v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27)));
    int v10 = (uint64_t *)(a1 + 24 * v9);
    uint64_t v11 = *v10;
    int v12 = *((_DWORD *)v10 + 2);
    if (*v10 == a3 && v12 == a4)
    {
      uint64_t v14 = 1;
    }
    else
    {
      BOOL v16 = 0;
      int v17 = 1;
      while (v11 != -4096 || v12 != -1)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v12 == -2;
        }
        if (v18 && v11 == -8192) {
          BOOL v16 = v10;
        }
        unsigned int v20 = v9 + v17++;
        unsigned int v9 = v20 & v8;
        int v10 = (uint64_t *)(a1 + 24 * (v20 & v8));
        uint64_t v11 = *v10;
        int v12 = *((_DWORD *)v10 + 2);
        uint64_t v14 = 1;
        if (*v10 == a3 && v12 == a4) {
          goto LABEL_8;
        }
      }
      uint64_t v14 = 0;
      if (v16) {
        int v10 = v16;
      }
    }
  }
  else
  {
    int v10 = 0;
    uint64_t v14 = 0;
  }
LABEL_8:
  *a5 = v10;
  return v14;
}

uint64_t sub_1CD4675D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD467698(a1, v6);
  uint64_t v9 = 0;
  sub_1CD4674DC(*(void *)a1, *(_DWORD *)(a1 + 16), *(void *)a2, *(_DWORD *)(a2 + 8), &v9);
  a3 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)a3 != -4096 || *(_DWORD *)(a3 + 8) != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

_OWORD *sub_1CD467698(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  int32x2_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD467774(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 24 * v10;
    do
    {
      *int32x2_t result = xmmword_1CFAC30E0;
      int32x2_t result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD467774(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(_OWORD **)result;
    uint64_t v8 = 24 * v6;
    do
    {
      *int v7 = xmmword_1CFAC30E0;
      int v7 = (_OWORD *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *(void *)a2;
    int v10 = *(_DWORD *)(a2 + 8);
    if ((*(void *)a2 != -4096 || v10 != -1) && (v9 != -8192 || v10 != -2))
    {
      uint64_t v14 = 0;
      int32x2_t result = sub_1CD4674DC(*(void *)v5, *(_DWORD *)(v5 + 16), v9, v10, &v14);
      uint64_t v13 = v14;
      _OWORD *v14 = *(_OWORD *)a2;
      *((void *)v13 + 2) = *(void *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

uint64_t sub_1CD467844(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v11 = 0;
  uint64_t v12 = a2;
  if (sub_1CD4678E0((uint64_t *)a1, &v12, &v11))
  {
    uint64_t v5 = v11;
    uint64_t v6 = *(void *)a1;
    uint64_t v7 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    uint64_t v6 = *(void *)a1;
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    uint64_t v5 = *(void *)a1 + 32 * v7;
  }
  if (v5 == v6 + 32 * v7) {
    return 0;
  }
  uint64_t v9 = v5 + 8;
  uint64_t v8 = *(void *)(v5 + 8);
  if (-1227133513 * ((unint64_t)(*(void *)(v9 + 8) - v8) >> 3) <= a3) {
    return 0;
  }
  else {
    return v8 + 56 * a3;
  }
}

uint64_t sub_1CD4678E0(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    unsigned int v5 = v3 - 1;
    uint64_t v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v7 = (void *)(*a1 + 32 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      int v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          int v10 = v7;
        }
        int v13 = v6 + v11++;
        uint64_t v6 = v13 & v5;
        uint64_t v7 = (void *)(v4 + 32 * v6);
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_4;
        }
      }
      uint64_t result = 0;
      if (v10) {
        uint64_t v7 = v10;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

uint64_t sub_1CD46797C(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CD4670BC(*(void *)a1, *(_DWORD *)(a1 + 16), *(void *)a2, *(_DWORD *)(a2 + 8), &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD4671B8(a1, a2, v7);
    *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 32) = 0;
    *(void *)(v5 + 16) = 0;
  }
  return v5;
}

uint64_t sub_1CD4679F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = 0;
  uint64_t result = sub_1CD467A88(*(void *)a2, *(_DWORD *)(a2 + 16), *(void *)a3, *(_DWORD *)(a3 + 8), &v10);
  uint64_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = sub_1CD467B7C(a2, a3, v10);
    uint64_t v7 = result;
    *(_OWORD *)uint64_t result = *(_OWORD *)a3;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_1CD467A88(uint64_t a1, int a2, uint64_t a3, int a4, void *a5)
{
  if (a2)
  {
    unint64_t v5 = ~((unint64_t)(37 * a4) << 32)
       + (37 * a4)
       + ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
    unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    int v8 = a2 - 1;
    unsigned int v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27)));
    uint64_t v10 = (uint64_t *)(a1 + 16 * v9);
    uint64_t v11 = *v10;
    int v12 = *((_DWORD *)v10 + 2);
    if (*v10 == a3 && v12 == a4)
    {
      uint64_t v14 = 1;
    }
    else
    {
      BOOL v16 = 0;
      int v17 = 1;
      while (v11 != -4096 || v12 != -1)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v12 == -2;
        }
        if (v18 && v11 == -8192) {
          BOOL v16 = v10;
        }
        unsigned int v20 = v9 + v17++;
        unsigned int v9 = v20 & v8;
        uint64_t v10 = (uint64_t *)(a1 + 16 * (v20 & v8));
        uint64_t v11 = *v10;
        int v12 = *((_DWORD *)v10 + 2);
        uint64_t v14 = 1;
        if (*v10 == a3 && v12 == a4) {
          goto LABEL_8;
        }
      }
      uint64_t v14 = 0;
      if (v16) {
        uint64_t v10 = v16;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v14 = 0;
  }
LABEL_8:
  *a5 = v10;
  return v14;
}

uint64_t sub_1CD467B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD467C3C(a1, v6);
  uint64_t v9 = 0;
  sub_1CD467A88(*(void *)a1, *(_DWORD *)(a1 + 16), *(void *)a2, *(_DWORD *)(a2 + 8), &v9);
  a3 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)a3 != -4096 || *(_DWORD *)(a3 + 8) != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

_OWORD *sub_1CD467C3C(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD467D0C(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *result++ = xmmword_1CFAC30E0;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD467D0C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(_OWORD **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *v7++ = xmmword_1CFAC30E0;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *(void *)a2;
    int v10 = *(_DWORD *)(a2 + 8);
    if ((*(void *)a2 != -4096 || v10 != -1) && (v9 != -8192 || v10 != -2))
    {
      int v13 = 0;
      uint64_t result = sub_1CD467A88(*(void *)v5, *(_DWORD *)(v5 + 16), v9, v10, &v13);
      *int v13 = *(_OWORD *)a2;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_1CD467DD0(uint64_t *a1)
{
  int v2 = *((_DWORD *)a1 + 2);
  uint64_t result = *a1;
  uint64_t v4 = *((unsigned int *)a1 + 4);
  uint64_t v5 = result + 24 * v4;
  if (!v2) {
    return v5;
  }
  if (v4)
  {
    uint64_t v6 = 24 * v4;
    while (1)
    {
      int v7 = *(_DWORD *)(result + 8);
      if ((*(void *)result != -4096 || v7 != -1) && (*(void *)result != -8192 || v7 != -2)) {
        break;
      }
      result += 24;
      v6 -= 24;
      if (!v6) {
        return v5;
      }
    }
  }
  return result;
}

void *sub_1CD467E2C(uint64_t a1, uint64_t *a2)
{
  int v7 = 0;
  char v4 = sub_1CD40EA84(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD467E98(a1, a2, v7);
    void *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void *sub_1CD467E98(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD467F4C(a1, v6);
  uint64_t v8 = 0;
  sub_1CD40EA84(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CD467F4C(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  char v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD468018(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD468018(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CD40EA84(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      uint64_t v10 = v11;
      *uint64_t v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1CD4680D0(long long *a1, long long *a2)
{
  long long v7 = *a1;
  uint64_t v8 = *((void *)a1 + 2);
  long long v5 = *a2;
  uint64_t v6 = *((void *)a2 + 2);
  if (sub_1CBF99480((uint64_t *)&v7, (uint64_t *)&v5)) {
    return 0xFFFFFFFFLL;
  }
  long long v7 = *a2;
  uint64_t v8 = *((void *)a2 + 2);
  long long v5 = *a1;
  uint64_t v6 = *((void *)a1 + 2);
  return sub_1CBF99480((uint64_t *)&v7, (uint64_t *)&v5);
}

uint64_t sub_1CD468160(uint64_t result, unsigned int a2)
{
  if (a2)
  {
    uint64_t v2 = result + 40 * a2;
    uint64_t v3 = (void *)(result + 16);
    do
    {
      long long v5 = v3 - 2;
      uint64_t v4 = *(v3 - 2);
      int v6 = *((_DWORD *)v3 - 2);
      if ((v4 != -4096 || v6 != -1) && (v4 != -8192 || v6 != -2)) {
        uint64_t result = MEMORY[0x1D25D9CD0](*v3, 8);
      }
      v3 += 5;
    }
    while (v5 + 5 != (void *)v2);
  }
  return result;
}

uint64_t *sub_1CD4681D8(uint64_t *a1)
{
  uint64_t v2 = *((unsigned int *)a1 + 4);
  uint64_t v3 = *a1;
  if (v2)
  {
    uint64_t v4 = 32 * v2;
    long long v5 = (void **)(v3 + 8);
    do
    {
      if (((unint64_t)*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        long long v7 = v5;
        sub_1CBF99524(&v7);
      }
      v5 += 4;
      v4 -= 32;
    }
    while (v4);
    uint64_t v3 = *a1;
  }
  MEMORY[0x1D25D9CD0](v3, 8);
  return a1;
}

uint64_t sub_1CD468254(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_1CD468298(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)a1 = *(void *)a2;
  *(void *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  int v3 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v3;
  int v4 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 4llvm::Function::viewCFG(this, 1, 0, 0) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  int v5 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v5;
  int v6 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 4llvm::Function::viewCFG(this, 1, 0, 0) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 4llvm::Function::viewCFG(this, 1, 0, 0) = v6;
  sub_1CD468348((void *)(a1 + 48), a2 + 48);
  return a1;
}

void *sub_1CD468348(void *a1, uint64_t a2)
{
  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  if (*(_DWORD *)(a2 + 8)) {
    sub_1CD4683C8((uint64_t)a1, a2);
  }
  a1[26] = a1 + 28;
  a1[27] = 0x800000000;
  if (*(_DWORD *)(a2 + 216)) {
    sub_1CD4684F0((uint64_t)(a1 + 26), a2 + 208);
  }
  return a1;
}

uint64_t sub_1CD4683C8(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v5 = (const void *)(a2 + 16);
    int v4 = *(const void **)a2;
    if (v4 == v5)
    {
      long long v7 = (_DWORD *)(a2 + 8);
      uint64_t v9 = *(unsigned int *)(a2 + 8);
      uint64_t v10 = *(unsigned int *)(a1 + 8);
      if (v10 >= v9)
      {
        if (v9) {
          memmove(*(void **)a1, v4, 24 * v9);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v9)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v10) {
          memmove(*(void **)a1, v4, 24 * v10);
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v11 = *v7;
        if (v10 != v11) {
          memcpy((void *)(*(void *)a1 + 24 * v10), (const void *)(*(void *)a2 + 24 * v10), *(void *)a2 + 24 * v11 - (*(void *)a2 + 24 * v10));
        }
      }
      *(_DWORD *)(a1 + 8) = v9;
    }
    else
    {
      int v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        int v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      long long v7 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    *long long v7 = 0;
  }
  return a1;
}

uint64_t sub_1CD4684F0(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v5 = (const void *)(a2 + 16);
    int v4 = *(const void **)a2;
    if (v4 == v5)
    {
      long long v7 = (_DWORD *)(a2 + 8);
      uint64_t v9 = *(unsigned int *)(a2 + 8);
      uint64_t v10 = *(unsigned int *)(a1 + 8);
      if (v10 >= v9)
      {
        if (v9) {
          memmove(*(void **)a1, v4, 16 * v9);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v9)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v10) {
          memmove(*(void **)a1, v4, 16 * v10);
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v11 = *v7;
        if (v10 != v11) {
          memcpy((void *)(*(void *)a1 + 16 * v10), (const void *)(*(void *)a2 + 16 * v10), *(void *)a2 + 16 * v11 - (*(void *)a2 + 16 * v10));
        }
      }
      *(_DWORD *)(a1 + 8) = v9;
    }
    else
    {
      int v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        int v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      long long v7 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    *long long v7 = 0;
  }
  return a1;
}

unsigned int *sub_1CD468608(unsigned int *a1)
{
  uint64_t v2 = (unsigned int *)*((void *)a1 + 32);
  if (v2 != a1 + 68) {
    free(v2);
  }
  int v3 = (unsigned int *)*((void *)a1 + 6);
  if (v3 != a1 + 16) {
    free(v3);
  }
  MEMORY[0x1D25D9CD0](*((void *)a1 + 3), 8);
  sub_1CBF995A8(a1);
  MEMORY[0x1D25D9CD0](*(void *)a1, 8);
  return a1;
}

void llvm::callDefaultCtor<llvm::CFLAndersAAWrapperPass>()
{
}

void sub_1CD4686B0(llvm::ImmutablePass *this@<X0>, void *a2@<X8>)
{
  *(void *)this = &unk_1F2601610;
  int v3 = (llvm::CFLAndersAAResult *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    int v4 = llvm::CFLAndersAAResult::~CFLAndersAAResult(a2, v3);
    MEMORY[0x1D25D9CE0](v4, 0x1020C40E45F61D3);
  }

  llvm::ImmutablePass::~ImmutablePass(this);
}

unsigned int *sub_1CD468728(unsigned int *result)
{
  unsigned int v1 = result[4];
  if (v1)
  {
    uint64_t v2 = *(void *)result;
    uint64_t v3 = 416 * v1;
    do
    {
      if ((*(void *)v2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (*(unsigned char *)(v2 + 408))
        {
          uint64_t result = sub_1CD468608((unsigned int *)(v2 + 8));
          *(unsigned char *)(v2 + 408) = 0;
        }
      }
      v2 += 416;
      v3 -= 416;
    }
    while (v3);
  }
  return result;
}

BOOL sub_1CD468790(BOOL result, llvm::cflaa *this)
{
  if (*(unsigned char *)(*(void *)this + 8) == 15)
  {
    uint64_t v3 = (uint64_t *)(result + 16);
    uint64_t GlobalOrArgAttrFromValue = llvm::cflaa::getGlobalOrArgAttrFromValue(this, this);
    BOOL v5 = sub_1CBF99710(v3, (uint64_t)this, 0, GlobalOrArgAttrFromValue);
    uint64_t AttrCaller = llvm::cflaa::getAttrCaller((llvm::cflaa *)v5);
    return sub_1CBF99710(v3, (uint64_t)this, 1, AttrCaller);
  }
  return result;
}

void sub_1CD468810(llvm::cflaa *this, llvm::cflaa *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = this;
  switch(*((unsigned char *)a2 + 16))
  {
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x3F:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x52:
    case 0x56:
    case 0x57:
      __break(1u);
      return;
    case 0x21:
    case 0x27:
    case 0x54:
      sub_1CD469734((uint64_t)this, (uint64_t)a2);
      return;
    case 0x28:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4D:
    case 0x4E:
    case 0x5F:
      BOOL v5 = (llvm::cflaa *)*((void *)a2 - 4);
      goto LABEL_5;
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x55:
    case 0x5B:
      int v4 = (llvm::cflaa *)*((void *)a2 - 4);
      sub_1CD469420((char *)this, *((llvm::cflaa **)a2 - 8), a2, 0);
      this = v3;
      BOOL v5 = v4;
LABEL_5:
      sub_1CD469420((char *)this, v5, v2, 0);
      return;
    case 0x3B:
      uint64_t v7 = 0;
      goto LABEL_14;
    case 0x3C:
    case 0x5C:
      uint64_t v8 = (llvm::cflaa *)*((void *)a2 - 4);
      goto LABEL_18;
    case 0x3D:
      uint64_t v9 = (llvm::cflaa *)*((void *)a2 - 4);
      uint64_t v8 = (llvm::cflaa *)*((void *)a2 - 8);
      goto LABEL_32;
    case 0x3E:
      sub_1CD469300((uint64_t)this, a2);
      return;
    case 0x40:
      uint64_t v9 = (llvm::cflaa *)*((void *)a2 - 12);
      goto LABEL_31;
    case 0x41:
      uint64_t v9 = (llvm::cflaa *)*((void *)a2 - 8);
LABEL_31:
      uint64_t v8 = (llvm::cflaa *)*((void *)a2 - 4);
      goto LABEL_32;
    case 0x4B:
      uint64_t v2 = (llvm::cflaa *)*((void *)a2 - 4);
      uint64_t AttrEscaped = llvm::cflaa::getAttrEscaped(this);
      goto LABEL_13;
    case 0x4C:
      goto LABEL_12;
    case 0x53:
      sub_1CD469BA4((char *)this, a2);
      return;
    case 0x58:
    case 0x5E:
      if (*(unsigned char *)(*(void *)a2 + 8) != 15) {
        return;
      }
LABEL_12:
      uint64_t AttrEscaped = llvm::cflaa::getAttrUnknown(this);
LABEL_13:
      uint64_t v7 = AttrEscaped;
      this = v3;
      a2 = v2;
LABEL_14:
      sub_1CD468AE4((uint64_t)this, a2, v7);
      return;
    case 0x59:
      uint64_t v8 = (llvm::cflaa *)*((void *)a2 - 8);
LABEL_18:
      uint64_t v9 = v2;
      int v10 = 1;
      goto LABEL_33;
    case 0x5A:
      uint64_t v11 = (llvm::cflaa *)*((void *)a2 - 12);
      int v12 = (llvm::cflaa *)*((void *)v2 - 8);
      goto LABEL_41;
    case 0x5D:
      uint64_t v11 = (llvm::cflaa *)*((void *)a2 - 8);
      int v12 = (llvm::cflaa *)*((void *)v2 - 4);
LABEL_41:
      sub_1CD469420((char *)this, v11, v2, 0);
      this = v3;
      uint64_t v8 = v12;
      uint64_t v9 = v2;
LABEL_32:
      int v10 = 0;
LABEL_33:
      sub_1CD469648((char *)this, v8, v9, v10);
      break;
    default:
      sub_1CD468A4C((uint64_t)this, (uint64_t)a2);
      break;
  }
}

uint64_t sub_1CD468A4C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  if (v2)
  {
    uint64_t v3 = *(llvm::cflaa **)(a2 - 32 * v2);
    if (v3)
    {
      if (*(unsigned char *)(*(void *)v3 + 8) == 15)
      {
        uint64_t v4 = result;
        uint64_t result = sub_1CD468AE4(result, v3, 0);
        uint64_t v5 = *(void *)(v4 + 32);
        unsigned int v6 = *(_DWORD *)(v5 + 8);
        if (v6 >= *(_DWORD *)(v5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)v5 + 8 * v6) = v3;
        ++*(_DWORD *)(v5 + 8);
      }
    }
  }
  return result;
}

uint64_t sub_1CD468AE4(uint64_t result, llvm::cflaa *this, uint64_t AttrUnknown)
{
  uint64_t v4 = this;
  uint64_t v5 = result;
  unsigned int v6 = *((unsigned __int8 *)this + 16);
  if (this && v6 <= 3)
  {
    uint64_t v7 = *(uint64_t **)(result + 24);
    uint64_t GlobalOrArgAttrFromValue = llvm::cflaa::getGlobalOrArgAttrFromValue(this, this);
    uint64_t result = sub_1CBF99710(v7, (uint64_t)v4, 0, GlobalOrArgAttrFromValue);
    if (!result) {
      return result;
    }
    uint64_t v9 = *(uint64_t **)(v5 + 24);
    AttrUnknown = llvm::cflaa::getAttrUnknown((llvm::cflaa *)result);
    int v10 = v9;
    this = v4;
    uint64_t v11 = 1;
    goto LABEL_11;
  }
  if (!this || v6 != 5)
  {
    int v10 = *(uint64_t **)(result + 24);
    uint64_t v11 = 0;
LABEL_11:
    return sub_1CBF99710(v10, (uint64_t)this, v11, AttrUnknown);
  }
  if (*((unsigned __int16 *)this + 9) - 55 <= 0xFFFFFFFD)
  {
    uint64_t result = sub_1CBF99710(*(uint64_t **)(result + 24), (uint64_t)this, 0, 0);
    if (result)
    {
      return (uint64_t)sub_1CD468BEC((char *)v5, (uint64_t)v4);
    }
  }
  return result;
}

char *sub_1CD468BEC(char *result, uint64_t a2)
{
  uint64_t v2 = (llvm::cflaa *)a2;
  uint64_t v3 = result;
  switch(*(_WORD *)(a2 + 18))
  {
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x35:
    case 0x36:
    case 0x3F:
      sub_1CD469420(result, *(llvm::cflaa **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), (llvm::cflaa *)a2, 0);
      uint64_t v4 = (llvm::cflaa *)((void *)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF))[4];
      goto LABEL_3;
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x33:
    case 0x34:
    case 0x37:
    case 0x38:
    case 0x3A:
    case 0x3B:
    case 0x3C:
      __break(1u);
      return result;
    case 0x22:
      return sub_1CD469300((uint64_t)result, (_DWORD *)a2);
    case 0x2F:
      uint64_t v2 = *(llvm::cflaa **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      llvm::cflaa::getAttrEscaped((llvm::cflaa *)result);
      goto LABEL_15;
    case 0x30:
      llvm::cflaa::getAttrUnknown((llvm::cflaa *)result);
LABEL_15:
      return (char *)sub_1CD468AE4((int)v3, v2);
    case 0x39:
      sub_1CD469420(result, *(llvm::cflaa **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32), (llvm::cflaa *)a2, 0);
      uint64_t v4 = (llvm::cflaa *)((void *)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF))[8];
      goto LABEL_3;
    case 0x3D:
    case 0x40:
      uint64_t v5 = *(llvm::cflaa **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      unsigned int v6 = v2;
      int v7 = 1;
      goto LABEL_9;
    case 0x3E:
    case 0x41:
      sub_1CD469420(result, *(llvm::cflaa **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), (llvm::cflaa *)a2, 0);
      uint64_t v5 = (llvm::cflaa *)((void *)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF))[4];
      uint64_t result = v3;
      unsigned int v6 = v2;
      int v7 = 0;
LABEL_9:
      uint64_t result = sub_1CD469648(result, v5, v6, v7);
      break;
    default:
      uint64_t v4 = *(llvm::cflaa **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
LABEL_3:
      uint64_t result = sub_1CD469420(v3, v4, v2, 0);
      break;
  }
  return result;
}

void *sub_1CD468DB0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v8 = 0;
  char v4 = sub_1CD4678E0(a1, a2, &v8);
  uint64_t v5 = v8;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD468E18((uint64_t)a1, (uint64_t)a2, a2, v8);
    uint64_t v7 = *a2;
    void v5[2] = 0;
    v5[3] = 0;
    void *v5 = v7;
    v5[1] = 0;
  }
  return v5;
}

void *sub_1CD468E18(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD468EC8(a1, v7);
  uint64_t v9 = 0;
  sub_1CD4678E0((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CD468EC8(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD468F94(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 32 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

void sub_1CD468F94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    int v7 = *(void **)a1;
    uint64_t v8 = 32 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v10 = 0;
      sub_1CD4678E0((uint64_t *)a1, (void *)a2, &v10);
      uint64_t v9 = v10;
      *uint64_t v10 = *(void **)a2;
      v9[1] = 0;
      void v9[2] = 0;
      v9[3] = 0;
      *(_OWORD *)(v9 + 1) = *(_OWORD *)(a2 + 8);
      v9[3] = *(void **)(a2 + 24);
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      ++*(_DWORD *)(a1 + 8);
      uint64_t v10 = (void **)(a2 + 8);
      sub_1CBF99524(&v10);
    }
    a2 += 32;
  }
}

void sub_1CD469070(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1CD469104(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 56 * a2;
    while (v3 != v7)
      uint64_t v3 = sub_1CD468254(v3 - 56);
    a1[1] = v7;
  }
}

void sub_1CD469104(uint64_t *a1, unint64_t a2)
{
  uint64_t v5 = (uint64_t)(a1 + 2);
  uint64_t v4 = a1[2];
  uint64_t v6 = a1[1];
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - v6) >> 3) >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], 56 * ((56 * a2 - 56) / 0x38) + 56);
      v6 += 56 * a2;
    }
    a1[1] = v6;
  }
  else
  {
    uint64_t v7 = *a1;
    uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((v6 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492) {
      abort();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v4 - v7) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x249249249249249) {
      unint64_t v11 = 0x492492492492492;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0x492492492492492) {
        sub_1CB833614();
      }
      int v12 = (char *)operator new(56 * v11);
    }
    else
    {
      int v12 = 0;
    }
    int v13 = &v12[56 * v8];
    uint64_t v14 = &v12[56 * v11];
    uint64_t v15 = 56 * a2;
    bzero(v13, 56 * ((v15 - 56) / 0x38uLL) + 56);
    sub_1CBF9988C(v5, v6, v6, v7, v7, (uint64_t)v13, (uint64_t)v13);
    int v17 = (void *)*a1;
    uint64_t v16 = a1[1];
    *a1 = v18;
    a1[1] = (uint64_t)&v13[v15];
    a1[2] = (uint64_t)v14;
    while ((void *)v16 != v17)
      uint64_t v16 = sub_1CD468254(v16 - 56);
    if (v17)
    {
      operator delete(v17);
    }
  }
}

char *sub_1CD469300(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(llvm::DataLayout **)(a1 + 8);
  int v5 = a2[5];
  if ((v5 & 0x40000000) != 0) {
    uint64_t v6 = (uint64_t **)*((void *)a2 - 1);
  }
  else {
    uint64_t v6 = (uint64_t **)&a2[-8 * (v5 & 0x7FFFFFF)];
  }
  uint64_t v7 = **v6;
  unsigned int v8 = *(_DWORD *)(v7 + 8);
  if ((v8 & 0xFE) == 0x12) {
    unsigned int v8 = *(_DWORD *)(**(void **)(v7 + 16) + 8);
  }
  uint64_t PointerAlignElem = llvm::DataLayout::getPointerAlignElem(v4, v8 >> 8);
  sub_1CB8F1EEC((uint64_t)&v15, *(_DWORD *)(PointerAlignElem + 4), 0);
  if (llvm::GEPOperator::accumulateConstantOffset((uint64_t)a2, *(llvm::DataLayout **)(a1 + 8), (llvm::APInt *)&v15, 0, v10))
  {
    if (v16 > 0x40) {
      uint64_t v11 = *v15;
    }
    else {
      uint64_t v11 = (uint64_t)((void)v15 << -(uint64_t)v16) >> -(uint64_t)v16;
    }
  }
  else
  {
    uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  int v12 = a2[5];
  if ((v12 & 0x40000000) != 0) {
    int v13 = (llvm::cflaa **)*((void *)a2 - 1);
  }
  else {
    int v13 = (llvm::cflaa **)&a2[-8 * (v12 & 0x7FFFFFF)];
  }
  uint64_t result = sub_1CD469420((char *)a1, *v13, (llvm::cflaa *)a2, v11);
  if (v16 >= 0x41)
  {
    uint64_t result = (char *)v15;
    if (v15) {
      return (char *)MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
    }
  }
  return result;
}

char *sub_1CD469420(char *result, llvm::cflaa *a2, llvm::cflaa *a3, uint64_t a4)
{
  if (*(unsigned char *)(*(void *)a2 + 8) == 15 && *(unsigned char *)(*(void *)a3 + 8) == 15)
  {
    uint64_t v7 = result;
    uint64_t result = (char *)sub_1CD468AE4((int)result, a2);
    if (a3 != a2)
    {
      sub_1CD468AE4((int)v7, a3);
      uint64_t v8 = *((void *)v7 + 3);
      return sub_1CD4694CC(v8, (uint64_t)a2, 0, (uint64_t)a3, 0, a4);
    }
  }
  return result;
}

char *sub_1CD4694CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_1CD4695B4(a1, a2, a3);
  uint64_t v13 = sub_1CD4695B4(a1, a4, a5);
  *(void *)&long long v20 = a4;
  *((void *)&v20 + 1) = a5;
  uint64_t v21 = a6;
  unint64_t v14 = *(void *)(v12 + 8);
  if (v14 >= *(void *)(v12 + 16))
  {
    unsigned int v16 = sub_1CBF99908((void **)v12, (uint64_t)&v20);
  }
  else
  {
    long long v15 = v20;
    *(void *)(v14 + 16) = v21;
    *(_OWORD *)unint64_t v14 = v15;
    unsigned int v16 = (char *)(v14 + 24);
  }
  *(void *)(v12 + 8) = v16;
  *(void *)&long long v20 = a2;
  *((void *)&v20 + 1) = a3;
  uint64_t v21 = a6;
  unint64_t v17 = *(void *)(v13 + 32);
  if (v17 >= *(void *)(v13 + 40))
  {
    uint64_t result = sub_1CBF99908((void **)(v13 + 24), (uint64_t)&v20);
  }
  else
  {
    long long v18 = v20;
    *(void *)(v17 + 16) = v21;
    *(_OWORD *)unint64_t v17 = v18;
    uint64_t result = (char *)(v17 + 24);
  }
  *(void *)(v13 + 32) = result;
  return result;
}

uint64_t sub_1CD4695B4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v8 = a2;
  uint64_t v9 = 0;
  int v5 = sub_1CD4678E0((uint64_t *)a1, &v8, &v9);
  uint64_t result = 0;
  if (v5 && v9 != *(void *)a1 + 32 * *(unsigned int *)(a1 + 16))
  {
    uint64_t v7 = *(void *)(v9 + 8);
    if (-1227133513 * ((unint64_t)(*(void *)(v9 + 16) - v7) >> 3) <= a3) {
      return 0;
    }
    else {
      return v7 + 56 * a3;
    }
  }
  return result;
}

char *sub_1CD469648(char *result, llvm::cflaa *a2, llvm::cflaa *a3, int a4)
{
  if (*(unsigned char *)(*(void *)a2 + 8) == 15 && *(unsigned char *)(*(void *)a3 + 8) == 15)
  {
    uint64_t v7 = result;
    sub_1CD468AE4((int)result, a2);
    sub_1CD468AE4((int)v7, a3);
    uint64_t v8 = (uint64_t *)*((void *)v7 + 3);
    if (a4)
    {
      uint64_t v9 = 1;
      sub_1CBF99710(v8, (uint64_t)a2, 1, 0);
      uint64_t v10 = 0;
    }
    else
    {
      uint64_t v10 = 1;
      sub_1CBF99710(v8, (uint64_t)a3, 1, 0);
      uint64_t v9 = 0;
    }
    uint64_t v11 = *((void *)v7 + 3);
    return sub_1CD4694CC(v11, (uint64_t)a2, v9, (uint64_t)a3, v10, 0);
  }
  return result;
}

void sub_1CD469734(uint64_t a1, uint64_t a2)
{
  _OWORD v21[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::cflaa **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  uint64_t v5 = sub_1CBF5BBBC(a2);
  if (v4 != (llvm::cflaa **)v5)
  {
    uint64_t v6 = (llvm::cflaa **)v5;
    do
    {
      if (*(unsigned char *)(*(void *)*v4 + 8) == 15) {
        sub_1CD468AE4(a1, *v4, 0);
      }
      v4 += 4;
    }
    while (v4 != v6);
  }
  if (*(unsigned char *)(*(void *)a2 + 8) == 15) {
    sub_1CD468AE4(a1, (llvm::cflaa *)a2, 0);
  }
  if ((llvm::isMallocOrCallocLikeFn(a2, *(uint64_t **)(a1 + 16)) & 1) == 0
    && !llvm::isFreeCall(a2, *(uint64_t **)(a1 + 16)))
  {
    v20[0] = v21;
    v20[1] = (void *)0x400000000;
    if (!sub_1CBF99A24(*(void *)(a2 - 32), *(void *)(a2 + 72), (uint64_t)v20)
      || (sub_1CD4699A0(a1, (_DWORD *)a2, (uint64_t)v20) & 1) == 0)
    {
      uint64_t hasAttributeAtIndex = sub_1CBF99AB0(a2, 45);
      if ((hasAttributeAtIndex & 1) == 0)
      {
        uint64_t v9 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        uint64_t hasAttributeAtIndex = sub_1CBF5BBBC(a2);
        if (v9 != (uint64_t *)hasAttributeAtIndex)
        {
          uint64_t v10 = hasAttributeAtIndex;
          do
          {
            uint64_t v11 = *v9;
            if (*(unsigned char *)(*(void *)*v9 + 8) == 15)
            {
              uint64_t v12 = *(void *)(a1 + 24);
              uint64_t AttrEscaped = llvm::cflaa::getAttrEscaped((llvm::cflaa *)hasAttributeAtIndex);
              unint64_t v14 = (llvm::cflaa *)sub_1CD4695B4(v12, v11, 0);
              *((void *)v14 + 6) |= AttrEscaped;
              long long v15 = *(uint64_t **)(a1 + 24);
              uint64_t AttrUnknown = llvm::cflaa::getAttrUnknown(v14);
              uint64_t hasAttributeAtIndex = sub_1CBF99710(v15, v11, 1, AttrUnknown);
            }
            v9 += 4;
          }
          while (v9 != (uint64_t *)v10);
        }
      }
      if (*(unsigned char *)(*(void *)a2 + 8) == 15)
      {
        uint64_t v8 = *(void *)(a2 - 32);
        if (!v8
          || *(unsigned char *)(v8 + 16)
          || *(void *)(v8 + 24) != *(void *)(a2 + 72)
          || (uint64_t hasAttributeAtIndex = llvm::AttributeList::hasAttributeAtIndex((uint64_t *)(v8 + 112), 0, 19),
              (hasAttributeAtIndex & 1) == 0))
        {
          uint64_t v17 = *(void *)(a1 + 24);
          uint64_t v18 = llvm::cflaa::getAttrUnknown((llvm::cflaa *)hasAttributeAtIndex);
          uint64_t v19 = sub_1CD4695B4(v17, a2, 0);
          *(void *)(v19 + 48) |= v18;
        }
      }
    }
    if (v20[0] != v21) {
      free(v20[0]);
    }
  }
}

uint64_t sub_1CD4699A0(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6 = sub_1CBF5BBBC((uint64_t)a2);
  uint64_t result = 0;
  if (((unint64_t)(v6 - (void)&a2[-8 * (a2[5] & 0x7FFFFFF)]) >> 5) <= 0x32)
  {
    uint64_t v8 = *(unsigned int *)(a3 + 8);
    if (v8)
    {
      uint64_t v9 = *(llvm::GlobalValue ***)a3;
      uint64_t v10 = 8 * v8;
      do
      {
        uint64_t v11 = *v9;
        if (llvm::GlobalValue::isDeclaration(*v9)) {
          return 0;
        }
        uint64_t result = 0;
        if (((1 << (*((_DWORD *)v11 + 8) & 0xF)) & 0x7D5) == 0) {
          return result;
        }
        if ((llvm::GlobalValue::isInterposable(v11) & 1) != 0
          || *(_DWORD *)(*((void *)v11 + 3) + 8) > 0xFFu
          || !*(unsigned char *)(llvm::CFLAndersAAResult::ensureCached(*(llvm::CFLAndersAAResult **)a1, v11) + 400))
        {
          return 0;
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
      uint64_t v12 = *(unsigned int *)(a3 + 8);
      if (v12)
      {
        uint64_t v13 = *(const llvm::Function ***)a3;
        unint64_t v14 = &v13[v12];
        do
        {
          uint64_t v15 = llvm::CFLAndersAAResult::ensureCached(*(llvm::CFLAndersAAResult **)a1, *v13);
          if (*(unsigned char *)(v15 + 400)) {
            uint64_t v16 = v15 + 48;
          }
          else {
            uint64_t v16 = 0;
          }
          uint64_t v17 = *(unsigned int *)(v16 + 8);
          if (v17)
          {
            uint64_t v18 = *(long long **)v16;
            uint64_t v19 = 24 * v17;
            do
            {
              long long v20 = *v18;
              uint64_t v25 = *((void *)v18 + 2);
              long long v24 = v20;
              llvm::cflaa::instantiateExternalRelation((uint64_t *)&v24, a2, (uint64_t)&v26);
              if (v30)
              {
                sub_1CBF99710(*(uint64_t **)(a1 + 24), v26, v27, 0);
                sub_1CBF99710(*(uint64_t **)(a1 + 24), v28, v29, 0);
                sub_1CD4694CC(*(void *)(a1 + 24), v26, v27, v28, v29, 0);
              }
              uint64_t v18 = (long long *)((char *)v18 + 24);
              v19 -= 24;
            }
            while (v19);
          }
          uint64_t v21 = *(unsigned int *)(v16 + 216);
          if (v21)
          {
            size_t v22 = *(uint64_t **)(v16 + 208);
            uint64_t v23 = &v22[2 * v21];
            do
            {
              llvm::cflaa::instantiateExternalAttribute(*v22, v22[1], a2, (uint64_t)&v26);
              if ((_BYTE)v29) {
                sub_1CBF99710(*(uint64_t **)(a1 + 24), v26, v27, v28);
              }
              v22 += 2;
            }
            while (v22 != v23);
          }
          ++v13;
        }
        while (v13 != v14);
      }
    }
    return 1;
  }
  return result;
}

char *sub_1CD469BA4(char *result, _DWORD *a2)
{
  uint64_t v3 = result;
  int v4 = a2[5];
  if ((v4 & 0x40000000) != 0)
  {
    uint64_t v6 = (llvm::cflaa **)*((void *)a2 - 1);
    uint64_t v5 = v4 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v5 = v4 & 0x7FFFFFF;
    uint64_t v6 = (llvm::cflaa **)&a2[-8 * v5];
  }
  if (v5)
  {
    uint64_t v7 = 32 * v5;
    do
    {
      uint64_t v8 = *v6;
      v6 += 4;
      uint64_t result = sub_1CD469420(v3, v8, (llvm::cflaa *)a2, 0);
      v7 -= 32;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1CD469C10(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v12 = 0;
  uint64_t result = sub_1CD469D10(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  uint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD469CA4(a2, v12, a3, a4);
    uint64_t v9 = (void *)result;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a2 + 416 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 16) = v10;
  return result;
}

void *sub_1CD469CA4(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = sub_1CD469DAC(a1, a3, a2);
  *uint64_t v6 = *a3;
  *((unsigned char *)v6 + 8) = 0;
  *((unsigned char *)v6 + 408) = 0;
  if (*(unsigned char *)(a4 + 400))
  {
    sub_1CD468298((uint64_t)(v6 + 1), a4);
    *((unsigned char *)v6 + 408) = 1;
  }
  return v6;
}

uint64_t sub_1CD469D10(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 416 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      char v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          char v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 416 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_4;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

void *sub_1CD469DAC(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD469E60(a1, v6);
  uint64_t v8 = 0;
  sub_1CD469D10(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CD469E60(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(416 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD469F3C(a1, v4, v4 + 416 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 416 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 52;
      v11 -= 416;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD469F3C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  unsigned int v6 = *(_DWORD *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 416 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 52;
      v8 -= 416;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t v9 = *(void *)v4;
      if ((*(void *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        BOOL v12 = 0;
        sub_1CD469D10(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v12);
        unsigned int v10 = v12;
        *BOOL v12 = *(void *)v4;
        *((unsigned char *)v10 + 8) = 0;
        uint64_t result = (uint64_t)(v10 + 1);
        *((unsigned char *)v10 + 408) = 0;
        if (*(unsigned char *)(v4 + 408))
        {
          uint64_t result = sub_1CD468298(result, v4 + 8);
          *((unsigned char *)v10 + 408) = 1;
          int v11 = *(unsigned __int8 *)(v4 + 408);
          ++*(_DWORD *)(v5 + 8);
          if (v11)
          {
            uint64_t result = (uint64_t)sub_1CD468608((unsigned int *)(v4 + 8));
            *(unsigned char *)(v4 + 408) = 0;
          }
        }
        else
        {
          ++*(_DWORD *)(v5 + 8);
        }
      }
      v4 += 416;
    }
    while (v4 != a3);
  }
  return result;
}

void *sub_1CD46A04C(uint64_t a1, uint64_t *a2)
{
  int v7 = 0;
  char v4 = sub_1CD469D10(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD469DAC(a1, a2, v7);
    void *v5 = *a2;
    v5[51] = 0;
    *(_OWORD *)(v5 + 31) = 0u;
    *(_OWORD *)(v5 + 29) = 0u;
    *(_OWORD *)(v5 + 27) = 0u;
    *(_OWORD *)(v5 + 25) = 0u;
    *(_OWORD *)(v5 + 23) = 0u;
    *(_OWORD *)(v5 + 21) = 0u;
    *(_OWORD *)(v5 + 19) = 0u;
    *(_OWORD *)(v5 + 17) = 0u;
    *(_OWORD *)(v5 + 15) = 0u;
    *(_OWORD *)(v5 + 13) = 0u;
    *(_OWORD *)(v5 + 11) = 0u;
    *(_OWORD *)(v5 + 9) = 0u;
    *(_OWORD *)(v5 + 7) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 1) = 0u;
    *(_OWORD *)(v5 + 47) = 0u;
    *(_OWORD *)(v5 + 49) = 0u;
    *(_OWORD *)(v5 + 43) = 0u;
    *(_OWORD *)(v5 + 45) = 0u;
    *(_OWORD *)(v5 + 39) = 0u;
    *(_OWORD *)(v5 + 41) = 0u;
    *(_OWORD *)(v5 + 35) = 0u;
    *(_OWORD *)(v5 + 37) = 0u;
    *(_OWORD *)(v5 + 33) = 0u;
  }
  return v5;
}

unsigned int *sub_1CD46A118(unsigned int *a1, uint64_t a2)
{
  sub_1CBF995A8(a1);
  MEMORY[0x1D25D9CD0](*(void *)a1, 8);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  a1[4] = 0;
  *(void *)a1 = *(void *)a2;
  *(void *)a2 = 0;
  a1[2] = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  unsigned int v4 = a1[3];
  a1[3] = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v4;
  unsigned int v5 = a1[4];
  a1[4] = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v5;
  sub_1CD46A1B4((uint64_t)(a1 + 6), a2 + 24);
  sub_1CD4683C8((uint64_t)(a1 + 12), a2 + 48);
  sub_1CD4684F0((uint64_t)(a1 + 64), a2 + 256);
  return a1;
}

uint64_t sub_1CD46A1B4(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1D25D9CD0](*(void *)a1, 8);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)a1 = *(void *)a2;
  *(void *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  int v4 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v4;
  int v5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v5;
  return a1;
}

void sub_1CD46A230(void *a1)
{
  sub_1CD466B08(a1[4] + 40, a1[3]);
  uint64_t v2 = a1[3];
  if (v2)
  {
    if ((v2 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      llvm::ValueHandleBase::RemoveFromUseList(a1 + 1);
    }
    a1[3] = 0;
  }
}

void llvm::CFLSteensAAResult::~CFLSteensAAResult(llvm::CFLSteensAAResult *this)
{
  sub_1CD466FDC((void **)this + 8);
  sub_1CD46B400((void *)this + 5);
  MEMORY[0x1D25D9CD0](*((void *)this + 5), 8);
  uint64_t v2 = (llvm::CFLSteensAAResult *)*((void *)this + 4);
  if (v2 == (llvm::CFLSteensAAResult *)((char *)this + 8))
  {
    (*(void (**)(char *))(*((void *)this + 1) + 32))((char *)this + 8);
  }
  else if (v2)
  {
    (*(void (**)(llvm::CFLSteensAAResult *))(*(void *)v2 + 40))(v2);
  }
}

uint64_t *llvm::CFLSteensAAResult::buildSetsFrom@<X0>(llvm::CFLSteensAAResult *this@<X0>, llvm::Function *a2@<X1>, uint64_t *a3@<X8>)
{
  v55[4] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)this + 4);
  if (!v5) {
    sub_1CB920400();
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
  v50[0] = this;
  v50[1] = v7;
  double v51 = 0;
  uint64_t v52 = 0;
  unsigned int v53 = 0;
  v54[0] = v55;
  v54[1] = (void *)0x400000000;
  std::string v42 = a2;
  sub_1CBF9A810(v50, a2);
  v45[0] = 0;
  v45[1] = 0;
  int v46 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v47 = 0;
  uint64_t v8 = (uint64_t)v51;
  int v9 = v52;
  uint64_t v10 = v53;
  int v11 = &v51[4 * v53];
  unsigned int v12 = v53;
  unsigned int v13 = v11;
  if (v52)
  {
    if (v53)
    {
      uint64_t v39 = 32 * v53;
      unsigned int v13 = v51;
      while ((*v13 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v13 += 4;
        v39 -= 32;
        if (!v39)
        {
          unsigned int v12 = v53;
          unsigned int v13 = &v51[4 * v53];
          goto LABEL_3;
        }
      }
      unsigned int v12 = v53;
    }
    else
    {
      unsigned int v12 = 0;
      unsigned int v13 = v51;
    }
  }
LABEL_3:
  uint64_t v41 = a3;
  unint64_t v14 = &v51[4 * v12];
  if (v13 != v14)
  {
    do
    {
      uint64_t v15 = *v13;
      if ((*(unsigned char *)(*v13 + 16) - 4) > 0x10u
        || ((unsigned int v16 = *(unsigned __int8 *)(*v13 + 16), v17 = v16 > 0xA, v18 = (1 << v16) & 0x720, !v17)
          ? (BOOL v19 = v18 == 0)
          : (BOOL v19 = 1),
            !v19))
      {
        *(void *)&long long v44 = *v13;
        DWORD2(v44) = 0;
        sub_1CD46A75C((uint64_t)v45, (uint64_t)&v44);
        sub_1CD46A7C4((uint64_t)v45, v15, 0, *(void *)(v13[1] + 48));
        uint64_t v21 = -1 - 1227133513 * ((unint64_t)(v13[2] - v13[1]) >> 3);
        if (v21)
        {
          uint64_t v22 = 0;
          uint64_t v23 = 104;
          do
          {
            *(void *)&long long v44 = v15;
            DWORD2(v44) = v22 + 1;
            sub_1CD46A75C((uint64_t)v45, (uint64_t)&v44);
            sub_1CD46A7C4((uint64_t)v45, v15, v22 + 1, *(void *)(v13[1] + v23));
            *(void *)&long long v44 = v15;
            DWORD2(v44) = v22 + 1;
            sub_1CD46A84C((uint64_t)v45, v15, v22, &v44);
            v23 += 56;
            ++v22;
          }
          while (v21 != v22);
        }
      }
      long long v20 = v13 + 4;
      unsigned int v13 = v11;
      if (v20 != v11)
      {
        unsigned int v13 = v20;
        while ((*v13 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v13 += 4;
          if (v13 == v11)
          {
            unsigned int v13 = v11;
            break;
          }
        }
      }
    }
    while (v13 != v14);
    uint64_t v8 = (uint64_t)v51;
    int v9 = v52;
    uint64_t v10 = v53;
  }
  long long v24 = (uint64_t *)(v8 + 32 * v10);
  if (v9)
  {
    if (v10)
    {
      uint64_t v40 = 32 * v10;
      uint64_t v25 = (uint64_t *)v8;
      while ((*v25 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v25 += 4;
        v40 -= 32;
        if (!v40) {
          goto LABEL_24;
        }
      }
    }
    else
    {
      uint64_t v25 = (uint64_t *)v8;
    }
  }
  else
  {
LABEL_24:
    uint64_t v25 = (uint64_t *)(v8 + 32 * v10);
  }
  uint64_t v26 = (uint64_t *)(v8 + 32 * v10);
  while (v25 != v26)
  {
    uint64_t v27 = *v25;
    if ((*(unsigned char *)(*v25 + 16) - 4) > 0x10u
      || ((v28 = *(unsigned __int8 *)(*v25 + 16), BOOL v17 = v28 > 0xA, v29 = (1 << v28) & 0x720, !v17)
        ? (BOOL v30 = v29 == 0)
        : (BOOL v30 = 1),
          !v30))
    {
      uint64_t v31 = -1227133513 * ((unint64_t)(v25[2] - v25[1]) >> 3);
      if (v31)
      {
        for (uint64_t i = 0; i != v31; ++i)
        {
          uint64_t v33 = v25[1] + 56 * i;
          unsigned int v34 = *(long long **)v33;
          char v35 = *(long long **)(v33 + 8);
          while (v34 != v35)
          {
            unsigned int v36 = sub_1CD46CC0C((uint64_t)v45, v27, i);
            sub_1CBF9AB30((uint64_t)v45, v34, v36);
            unsigned int v34 = (long long *)((char *)v34 + 24);
          }
        }
      }
    }
    std::string v37 = v25 + 4;
    uint64_t v25 = v24;
    if (v37 != v24)
    {
      uint64_t v25 = v37;
      while ((*v25 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v25 += 4;
        if (v25 == v24)
        {
          uint64_t v25 = v24;
          break;
        }
      }
    }
  }
  sub_1CD46A970((uint64_t)v43, (uint64_t)v45);
  llvm::CFLSteensAAResult::FunctionInfo::FunctionInfo(v41, (uint64_t)v42, (uint64_t)v54, (uint64_t)v43);
  sub_1CD456CB4(v43);
  sub_1CD456CB4(v45);
  if (v54[0] != v55) {
    free(v54[0]);
  }
  return sub_1CD4681D8((uint64_t *)&v51);
}

uint64_t sub_1CD46A75C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1CD46C19C(a1, *(void *)a2, *(_DWORD *)(a2 + 8));
  if (!v5)
  {
    unsigned int v6 = sub_1CD46C20C(a1);
    return sub_1CBF9AB30(a1, (long long *)a2, v6);
  }
  return result;
}

unsigned int *sub_1CD46A7C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = (unsigned int *)sub_1CD46C19C(a1, a2, a3);
  uint64_t v7 = *result;
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = v8 + 32 * v7;
  unsigned int v12 = *(_DWORD *)(v9 + 24);
  uint64_t v10 = (_DWORD *)(v9 + 24);
  uint64_t v11 = v12;
  if (v12 != -1)
  {
    uint64_t v13 = v11;
    do
    {
      uint64_t v14 = v13;
      uint64_t v13 = *(unsigned int *)(v8 + 32 * v13 + 24);
    }
    while (v13 != -1);
    int v15 = *(_DWORD *)(v8 + 32 * v14);
    do
    {
      uint64_t v7 = v11;
      *uint64_t v10 = v15;
      uint64_t v16 = v8 + 32 * v11;
      unsigned int v17 = *(_DWORD *)(v16 + 24);
      uint64_t v10 = (_DWORD *)(v16 + 24);
      uint64_t v11 = v17;
    }
    while (v17 != -1);
  }
  *(void *)(v8 + 32 * v7 + 16) |= a4;
  return result;
}

BOOL sub_1CD46A84C(uint64_t a1, uint64_t a2, int a3, long long *a4)
{
  unsigned int v6 = sub_1CD46CC0C(a1, a2, a3);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = v8 + 32 * v6;
  unsigned int v12 = *(_DWORD *)(v9 + 24);
  uint64_t v10 = (_DWORD *)(v9 + 24);
  uint64_t v11 = v12;
  uint64_t v13 = v6;
  if (v12 != -1)
  {
    uint64_t v14 = v11;
    do
    {
      uint64_t v15 = v14;
      uint64_t v14 = *(unsigned int *)(v8 + 32 * v14 + 24);
    }
    while (v14 != -1);
    int v16 = *(_DWORD *)(v8 + 32 * v15);
    do
    {
      uint64_t v13 = v11;
      *uint64_t v10 = v16;
      uint64_t v17 = v8 + 32 * v11;
      unsigned int v18 = *(_DWORD *)(v17 + 24);
      uint64_t v10 = (_DWORD *)(v17 + 24);
      uint64_t v11 = v18;
    }
    while (v18 != -1);
  }
  if (*(_DWORD *)(v8 + 32 * v13 + 12) == -1)
  {
    unsigned int v30 = sub_1CD46C20C(a1);
    uint64_t v8 = *(void *)(a1 + 24);
    *(_DWORD *)(v8 + 32 * v6 + 12) = v30;
    *(_DWORD *)(v8 + 32 * v30 + 8) = v6;
  }
  uint64_t v19 = v8 + 32 * v6;
  unsigned int v22 = *(_DWORD *)(v19 + 24);
  long long v20 = (_DWORD *)(v19 + 24);
  uint64_t v21 = v22;
  if (v22 != -1)
  {
    uint64_t v23 = v21;
    do
    {
      uint64_t v24 = v23;
      uint64_t v23 = *(unsigned int *)(v8 + 32 * v23 + 24);
    }
    while (v23 != -1);
    int v25 = *(_DWORD *)(v8 + 32 * v24);
    do
    {
      uint64_t v7 = v21;
      _DWORD *v20 = v25;
      uint64_t v26 = v8 + 32 * v21;
      unsigned int v27 = *(_DWORD *)(v26 + 24);
      long long v20 = (_DWORD *)(v26 + 24);
      uint64_t v21 = v27;
    }
    while (v27 != -1);
  }
  unsigned int v28 = *(_DWORD *)(v8 + 32 * v7 + 12);

  return sub_1CBF9AB30(a1, a4, v28);
}

void sub_1CD46A970(uint64_t a1, uint64_t a2)
{
  long long v8 = 0uLL;
  uint64_t v9 = 0;
  sub_1CBF9AD40(a2, (unsigned int **)&v8);
  sub_1CD46CC9C((uint64_t *)&v8);
  *(void *)(a2 + 32) = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)a2;
  int v5 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  uint64_t v6 = v9;
  *(void *)a1 = v4;
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = v8;
  *(void *)(a1 + 4llvm::Function::viewCFG(this, 1, 0, 0) = v6;

  JUMPOUT(0x1D25D9CD0);
}

void *llvm::CFLSteensAAResult::scan(llvm::CFLSteensAAResult *this, llvm::Function *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v8 = a2;
  uint64_t v9 = a2;
  uint64_t v4 = (char *)this + 40;
  LOBYTE(v10[0]) = 0;
  char v11 = 0;
  sub_1CD46CDE0((uint64_t)v7, (uint64_t)this + 40, (uint64_t *)&v9, (uint64_t)v10);
  if (v11) {
    sub_1CD46B2F0(v10);
  }
  llvm::CFLSteensAAResult::buildSetsFrom(this, a2, (uint64_t *)&v9);
  int v5 = sub_1CD46D15C((uint64_t)v4, (uint64_t *)&v8);
  sub_1CD46D228((uint64_t)(v5 + 1), (uint64_t)&v9);
  *((void *)this + 8) = sub_1CBF9B234(*((void *)this + 8), (uint64_t)a2, (uint64_t)this);
  return sub_1CD46B2F0(&v9);
}

int32x2_t sub_1CD46AAF0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  if (sub_1CD469D10(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v5))
  {
    uint64_t v4 = v5;
    if (*(unsigned char *)(v5 + 408))
    {
      sub_1CD46B2F0((void *)(v5 + 8));
      *(unsigned char *)(v4 + 408) = 0;
    }
    *(void *)uint64_t v4 = -8192;
    int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

void llvm::CFLSteensAA::run(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = a2 + 8;
  *(void *)(a2 + 4llvm::Function::viewCFG(this, 1, 0, 0) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = &unk_1F2601840;
  *(void *)(a2 + 16) = a1;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 48) = 0;
  *(_DWORD *)(a2 + 56) = 0;
}

void llvm::initializeCFLSteensAAWrapperPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC4858, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CBF9A76C;
    v4[1] = &v2;
    unsigned int v3 = v4;
    std::__call_once(&qword_1EBCC4858, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::createCFLSteensAAWrapperPass(llvm *this)
{
}

llvm::CFLSteensAAWrapperPass *llvm::CFLSteensAAWrapperPass::CFLSteensAAWrapperPass(llvm::CFLSteensAAWrapperPass *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = &llvm::CFLSteensAAWrapperPass::ID;
  *((_DWORD *)this + 6) = 4;
  *(void *)this = &unk_1F2601770;
  *((void *)this + 4) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC4858, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CBF9A76C;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCC4858, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return this;
}

void llvm::CFLSteensAAWrapperPass::initializePass(llvm::CFLSteensAAWrapperPass *this)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  operator new();
}

llvm::AnalysisUsage *llvm::CFLSteensAAWrapperPass::getAnalysisUsage(llvm::CFLSteensAAWrapperPass *this, llvm::AnalysisUsage *a2)
{
  *((unsigned char *)a2 + 16llvm::Function::viewCFG(this, 1, 0, 0) = 1;
  return llvm::AnalysisUsage::addRequiredID(a2, llvm::TargetLibraryInfoWrapperPass::ID);
}

void sub_1CD46AE7C(llvm::ImmutablePass *a1@<X0>, void *a2@<X8>)
{
  sub_1CD46B388(a1, a2);

  JUMPOUT(0x1D25D9CE0);
}

__n128 sub_1CD46AEB4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)a1 = *(void *)a2;
  *(void *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  int v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  int v3 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4llvm::Function::viewCFG(this, 1, 0, 0) = 0;
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  *(void *)(a1 + 4llvm::Function::viewCFG(this, 1, 0, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4llvm::Function::viewCFG(this, 1, 0, 0) = 0;
  return result;
}

uint64_t sub_1CD46AF18(uint64_t a1, int a2, int a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = (37 * a3) & (a2 - 1);
    uint64_t v6 = (_DWORD *)(a1 + 12 * v5);
    int v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -1)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -2;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (_DWORD *)(a1 + 12 * (v13 & v4));
        int v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_4;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

uint64_t sub_1CD46AFB4(uint64_t a1, uint64_t a2, int *a3, void *a4)
{
  BOOL v12 = 0;
  uint64_t result = sub_1CD46AF18(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  uint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD46B054(a2, a3, v12);
    uint64_t v9 = (_DWORD *)result;
    *(_DWORD *)uint64_t result = *a3;
    *(void *)(result + 4) = *a4;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a2 + 12 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 16) = v10;
  return result;
}

_DWORD *sub_1CD46B054(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD46B108(a1, v6);
  uint64_t v8 = 0;
  sub_1CD46AF18(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

_DWORD *sub_1CD46B108(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(12 * v8, (std::align_val_t)4uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD46B1E0(a1, v4, v4 + 12 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 12 * v10;
    do
    {
      *uint64_t result = -1;
      result += 3;
      v11 -= 12;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD46B1E0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(_DWORD **)result;
    uint64_t v8 = 12 * v6;
    do
    {
      *int v7 = -1;
      v7 += 3;
      v8 -= 12;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    int v9 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CD46AF18(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      uint64_t v10 = v11;
      *uint64_t v11 = *(_DWORD *)a2;
      *(void *)(v10 + 1) = *(void *)(a2 + 4);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 12;
  }
  return result;
}

void *sub_1CD46B298(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 400))
  {
    sub_1CD46B2F0((void *)a1);
    *(unsigned char *)(a1 + 40llvm::Function::viewCFG(this, 1, 0, 0) = 0;
  }
  sub_1CD46AEB4(a1, a2);
  uint64_t result = sub_1CD468348((void *)(a1 + 48), a2 + 48);
  *(unsigned char *)(a1 + 40llvm::Function::viewCFG(this, 1, 0, 0) = 1;
  return result;
}

void *sub_1CD46B2F0(void *a1)
{
  int v2 = (void *)a1[32];
  if (v2 != a1 + 34) {
    free(v2);
  }
  unsigned int v3 = (void *)a1[6];
  if (v3 != a1 + 8) {
    free(v3);
  }

  return sub_1CD456CB4(a1);
}

void llvm::callDefaultCtor<llvm::CFLSteensAAWrapperPass>()
{
}

void sub_1CD46B388(llvm::ImmutablePass *this@<X0>, void *a2@<X8>)
{
  *(void *)this = &unk_1F2601770;
  unsigned int v3 = (llvm::CFLSteensAAResult *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    uint64_t v4 = llvm::CFLSteensAAResult::~CFLSteensAAResult(a2, v3);
    MEMORY[0x1D25D9CE0](v4, 0x1020C40E45F61D3);
  }

  llvm::ImmutablePass::~ImmutablePass(this);
}

void *sub_1CD46B400(void *result)
{
  unsigned int v1 = *((_DWORD *)result + 4);
  if (v1)
  {
    uint64_t v2 = *result;
    uint64_t v3 = 416 * v1;
    do
    {
      if ((*(void *)v2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (*(unsigned char *)(v2 + 408))
        {
          uint64_t result = sub_1CD46B2F0((void *)(v2 + 8));
          *(unsigned char *)(v2 + 408) = 0;
        }
      }
      v2 += 416;
      v3 -= 416;
    }
    while (v3);
  }
  return result;
}

void sub_1CD46B468(llvm::cflaa *this, llvm::cflaa *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = this;
  switch(*((unsigned char *)a2 + 16))
  {
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x3F:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x52:
    case 0x56:
    case 0x57:
      __break(1u);
      return;
    case 0x21:
    case 0x27:
    case 0x54:
      sub_1CD46BCC0((uint64_t)this, (uint64_t)a2);
      return;
    case 0x28:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4D:
    case 0x4E:
    case 0x5F:
      uint64_t v5 = (llvm::cflaa *)*((void *)a2 - 4);
      goto LABEL_5;
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x55:
    case 0x5B:
      uint64_t v4 = (llvm::cflaa *)*((void *)a2 - 4);
      sub_1CD46BB28((char *)this, *((llvm::cflaa **)a2 - 8), a2, 0);
      this = v3;
      uint64_t v5 = v4;
LABEL_5:
      sub_1CD46BB28((char *)this, v5, v2, 0);
      return;
    case 0x3B:
      uint64_t v7 = 0;
      goto LABEL_14;
    case 0x3C:
    case 0x5C:
      uint64_t v8 = (llvm::cflaa *)*((void *)a2 - 4);
      goto LABEL_18;
    case 0x3D:
      int v9 = (llvm::cflaa *)*((void *)a2 - 4);
      uint64_t v8 = (llvm::cflaa *)*((void *)a2 - 8);
      goto LABEL_32;
    case 0x3E:
      sub_1CD46BA08((uint64_t)this, a2);
      return;
    case 0x40:
      int v9 = (llvm::cflaa *)*((void *)a2 - 12);
      goto LABEL_31;
    case 0x41:
      int v9 = (llvm::cflaa *)*((void *)a2 - 8);
LABEL_31:
      uint64_t v8 = (llvm::cflaa *)*((void *)a2 - 4);
      goto LABEL_32;
    case 0x4B:
      uint64_t v2 = (llvm::cflaa *)*((void *)a2 - 4);
      uint64_t AttrEscaped = llvm::cflaa::getAttrEscaped(this);
      goto LABEL_13;
    case 0x4C:
      goto LABEL_12;
    case 0x53:
      sub_1CD46C130((char *)this, a2);
      return;
    case 0x58:
    case 0x5E:
      if (*(unsigned char *)(*(void *)a2 + 8) != 15) {
        return;
      }
LABEL_12:
      uint64_t AttrEscaped = llvm::cflaa::getAttrUnknown(this);
LABEL_13:
      uint64_t v7 = AttrEscaped;
      this = v3;
      a2 = v2;
LABEL_14:
      sub_1CD46B73C((uint64_t)this, a2, v7);
      return;
    case 0x59:
      uint64_t v8 = (llvm::cflaa *)*((void *)a2 - 8);
LABEL_18:
      int v9 = v2;
      int v10 = 1;
      goto LABEL_33;
    case 0x5A:
      uint64_t v11 = (llvm::cflaa *)*((void *)a2 - 12);
      BOOL v12 = (llvm::cflaa *)*((void *)v2 - 8);
      goto LABEL_41;
    case 0x5D:
      uint64_t v11 = (llvm::cflaa *)*((void *)a2 - 8);
      BOOL v12 = (llvm::cflaa *)*((void *)v2 - 4);
LABEL_41:
      sub_1CD46BB28((char *)this, v11, v2, 0);
      this = v3;
      uint64_t v8 = v12;
      int v9 = v2;
LABEL_32:
      int v10 = 0;
LABEL_33:
      sub_1CD46BBD4((char *)this, v8, v9, v10);
      break;
    default:
      sub_1CD46B6A4((uint64_t)this, (uint64_t)a2);
      break;
  }
}

uint64_t sub_1CD46B6A4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  if (v2)
  {
    uint64_t v3 = *(llvm::cflaa **)(a2 - 32 * v2);
    if (v3)
    {
      if (*(unsigned char *)(*(void *)v3 + 8) == 15)
      {
        uint64_t v4 = result;
        uint64_t result = sub_1CD46B73C(result, v3, 0);
        uint64_t v5 = *(void *)(v4 + 32);
        unsigned int v6 = *(_DWORD *)(v5 + 8);
        if (v6 >= *(_DWORD *)(v5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)v5 + 8 * v6) = v3;
        ++*(_DWORD *)(v5 + 8);
      }
    }
  }
  return result;
}

uint64_t sub_1CD46B73C(uint64_t result, llvm::cflaa *this, uint64_t AttrUnknown)
{
  uint64_t v4 = this;
  uint64_t v5 = result;
  unsigned int v6 = *((unsigned __int8 *)this + 16);
  if (this && v6 <= 3)
  {
    uint64_t v7 = *(uint64_t **)(result + 24);
    uint64_t GlobalOrArgAttrFromValue = llvm::cflaa::getGlobalOrArgAttrFromValue(this, this);
    uint64_t result = sub_1CBF99710(v7, (uint64_t)v4, 0, GlobalOrArgAttrFromValue);
    if (!result) {
      return result;
    }
    int v9 = *(uint64_t **)(v5 + 24);
    uint64_t AttrUnknown = llvm::cflaa::getAttrUnknown((llvm::cflaa *)result);
    int v10 = v9;
    this = v4;
    uint64_t v11 = 1;
    goto LABEL_11;
  }
  if (!this || v6 != 5)
  {
    int v10 = *(uint64_t **)(result + 24);
    uint64_t v11 = 0;
LABEL_11:
    return sub_1CBF99710(v10, (uint64_t)this, v11, AttrUnknown);
  }
  if (*((unsigned __int16 *)this + 9) - 55 <= 0xFFFFFFFD)
  {
    uint64_t result = sub_1CBF99710(*(uint64_t **)(result + 24), (uint64_t)this, 0, 0);
    if (result)
    {
      return (uint64_t)sub_1CD46B844((char *)v5, (uint64_t)v4);
    }
  }
  return result;
}

char *sub_1CD46B844(char *result, uint64_t a2)
{
  uint64_t v2 = (llvm::cflaa *)a2;
  uint64_t v3 = result;
  switch(*(_WORD *)(a2 + 18))
  {
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x35:
    case 0x36:
    case 0x3F:
      sub_1CD46BB28(result, *(llvm::cflaa **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), (llvm::cflaa *)a2, 0);
      uint64_t v4 = (llvm::cflaa *)((void *)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF))[4];
      goto LABEL_3;
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x33:
    case 0x34:
    case 0x37:
    case 0x38:
    case 0x3A:
    case 0x3B:
    case 0x3C:
      __break(1u);
      return result;
    case 0x22:
      return sub_1CD46BA08((uint64_t)result, (_DWORD *)a2);
    case 0x2F:
      uint64_t v2 = *(llvm::cflaa **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      llvm::cflaa::getAttrEscaped((llvm::cflaa *)result);
      goto LABEL_15;
    case 0x30:
      llvm::cflaa::getAttrUnknown((llvm::cflaa *)result);
LABEL_15:
      return (char *)sub_1CD46B73C((int)v3, v2);
    case 0x39:
      sub_1CD46BB28(result, *(llvm::cflaa **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32), (llvm::cflaa *)a2, 0);
      uint64_t v4 = (llvm::cflaa *)((void *)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF))[8];
      goto LABEL_3;
    case 0x3D:
    case 0x40:
      uint64_t v5 = *(llvm::cflaa **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      unsigned int v6 = v2;
      int v7 = 1;
      goto LABEL_9;
    case 0x3E:
    case 0x41:
      sub_1CD46BB28(result, *(llvm::cflaa **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), (llvm::cflaa *)a2, 0);
      uint64_t v5 = (llvm::cflaa *)((void *)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF))[4];
      uint64_t result = v3;
      unsigned int v6 = v2;
      int v7 = 0;
LABEL_9:
      uint64_t result = sub_1CD46BBD4(result, v5, v6, v7);
      break;
    default:
      uint64_t v4 = *(llvm::cflaa **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
LABEL_3:
      uint64_t result = sub_1CD46BB28(v3, v4, v2, 0);
      break;
  }
  return result;
}

char *sub_1CD46BA08(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(llvm::DataLayout **)(a1 + 8);
  int v5 = a2[5];
  if ((v5 & 0x40000000) != 0) {
    unsigned int v6 = (uint64_t **)*((void *)a2 - 1);
  }
  else {
    unsigned int v6 = (uint64_t **)&a2[-8 * (v5 & 0x7FFFFFF)];
  }
  uint64_t v7 = **v6;
  unsigned int v8 = *(_DWORD *)(v7 + 8);
  if ((v8 & 0xFE) == 0x12) {
    unsigned int v8 = *(_DWORD *)(**(void **)(v7 + 16) + 8);
  }
  uint64_t PointerAlignElem = llvm::DataLayout::getPointerAlignElem(v4, v8 >> 8);
  sub_1CB8F1EEC((uint64_t)&v15, *(_DWORD *)(PointerAlignElem + 4), 0);
  if (llvm::GEPOperator::accumulateConstantOffset((uint64_t)a2, *(llvm::DataLayout **)(a1 + 8), (llvm::APInt *)&v15, 0, v10))
  {
    if (v16 > 0x40) {
      uint64_t v11 = *v15;
    }
    else {
      uint64_t v11 = (uint64_t)((void)v15 << -(uint64_t)v16) >> -(uint64_t)v16;
    }
  }
  else
  {
    uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  int v12 = a2[5];
  if ((v12 & 0x40000000) != 0) {
    unsigned int v13 = (llvm::cflaa **)*((void *)a2 - 1);
  }
  else {
    unsigned int v13 = (llvm::cflaa **)&a2[-8 * (v12 & 0x7FFFFFF)];
  }
  uint64_t result = sub_1CD46BB28((char *)a1, *v13, (llvm::cflaa *)a2, v11);
  if (v16 >= 0x41)
  {
    uint64_t result = (char *)v15;
    if (v15) {
      return (char *)MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
    }
  }
  return result;
}

char *sub_1CD46BB28(char *result, llvm::cflaa *a2, llvm::cflaa *a3, uint64_t a4)
{
  if (*(unsigned char *)(*(void *)a2 + 8) == 15 && *(unsigned char *)(*(void *)a3 + 8) == 15)
  {
    uint64_t v7 = result;
    uint64_t result = (char *)sub_1CD46B73C((int)result, a2);
    if (a3 != a2)
    {
      sub_1CD46B73C((int)v7, a3);
      uint64_t v8 = *((void *)v7 + 3);
      return sub_1CD4694CC(v8, (uint64_t)a2, 0, (uint64_t)a3, 0, a4);
    }
  }
  return result;
}

char *sub_1CD46BBD4(char *result, llvm::cflaa *a2, llvm::cflaa *a3, int a4)
{
  if (*(unsigned char *)(*(void *)a2 + 8) == 15 && *(unsigned char *)(*(void *)a3 + 8) == 15)
  {
    uint64_t v7 = result;
    sub_1CD46B73C((int)result, a2);
    sub_1CD46B73C((int)v7, a3);
    uint64_t v8 = (uint64_t *)*((void *)v7 + 3);
    if (a4)
    {
      uint64_t v9 = 1;
      sub_1CBF99710(v8, (uint64_t)a2, 1, 0);
      uint64_t v10 = 0;
    }
    else
    {
      uint64_t v10 = 1;
      sub_1CBF99710(v8, (uint64_t)a3, 1, 0);
      uint64_t v9 = 0;
    }
    uint64_t v11 = *((void *)v7 + 3);
    return sub_1CD4694CC(v11, (uint64_t)a2, v9, (uint64_t)a3, v10, 0);
  }
  return result;
}

void sub_1CD46BCC0(uint64_t a1, uint64_t a2)
{
  _OWORD v21[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::cflaa **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  uint64_t v5 = sub_1CBF5BBBC(a2);
  if (v4 != (llvm::cflaa **)v5)
  {
    unsigned int v6 = (llvm::cflaa **)v5;
    do
    {
      if (*(unsigned char *)(*(void *)*v4 + 8) == 15) {
        sub_1CD46B73C(a1, *v4, 0);
      }
      v4 += 4;
    }
    while (v4 != v6);
  }
  if (*(unsigned char *)(*(void *)a2 + 8) == 15) {
    sub_1CD46B73C(a1, (llvm::cflaa *)a2, 0);
  }
  if ((llvm::isMallocOrCallocLikeFn(a2, *(uint64_t **)(a1 + 16)) & 1) == 0
    && !llvm::isFreeCall(a2, *(uint64_t **)(a1 + 16)))
  {
    v20[0] = v21;
    v20[1] = (void *)0x400000000;
    if (!sub_1CBF99A24(*(void *)(a2 - 32), *(void *)(a2 + 72), (uint64_t)v20)
      || (sub_1CD46BF2C(a1, (_DWORD *)a2, (uint64_t)v20) & 1) == 0)
    {
      uint64_t hasAttributeAtIndex = sub_1CBF99AB0(a2, 45);
      if ((hasAttributeAtIndex & 1) == 0)
      {
        uint64_t v9 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        uint64_t hasAttributeAtIndex = sub_1CBF5BBBC(a2);
        if (v9 != (uint64_t *)hasAttributeAtIndex)
        {
          uint64_t v10 = hasAttributeAtIndex;
          do
          {
            uint64_t v11 = *v9;
            if (*(unsigned char *)(*(void *)*v9 + 8) == 15)
            {
              uint64_t v12 = *(void *)(a1 + 24);
              uint64_t AttrEscaped = llvm::cflaa::getAttrEscaped((llvm::cflaa *)hasAttributeAtIndex);
              uint64_t v14 = (llvm::cflaa *)sub_1CD4695B4(v12, v11, 0);
              *((void *)v14 + 6) |= AttrEscaped;
              uint64_t v15 = *(uint64_t **)(a1 + 24);
              uint64_t AttrUnknown = llvm::cflaa::getAttrUnknown(v14);
              uint64_t hasAttributeAtIndex = sub_1CBF99710(v15, v11, 1, AttrUnknown);
            }
            v9 += 4;
          }
          while (v9 != (uint64_t *)v10);
        }
      }
      if (*(unsigned char *)(*(void *)a2 + 8) == 15)
      {
        uint64_t v8 = *(void *)(a2 - 32);
        if (!v8
          || *(unsigned char *)(v8 + 16)
          || *(void *)(v8 + 24) != *(void *)(a2 + 72)
          || (uint64_t hasAttributeAtIndex = llvm::AttributeList::hasAttributeAtIndex((uint64_t *)(v8 + 112), 0, 19),
              (hasAttributeAtIndex & 1) == 0))
        {
          uint64_t v17 = *(void *)(a1 + 24);
          uint64_t v18 = llvm::cflaa::getAttrUnknown((llvm::cflaa *)hasAttributeAtIndex);
          uint64_t v19 = sub_1CD4695B4(v17, a2, 0);
          *(void *)(v19 + 48) |= v18;
        }
      }
    }
    if (v20[0] != v21) {
      free(v20[0]);
    }
  }
}

uint64_t sub_1CD46BF2C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6 = sub_1CBF5BBBC((uint64_t)a2);
  uint64_t result = 0;
  if (((unint64_t)(v6 - (void)&a2[-8 * (a2[5] & 0x7FFFFFF)]) >> 5) <= 0x32)
  {
    uint64_t v8 = *(unsigned int *)(a3 + 8);
    if (v8)
    {
      uint64_t v9 = *(llvm::GlobalValue ***)a3;
      uint64_t v10 = 8 * v8;
      do
      {
        uint64_t v11 = *v9;
        if (llvm::GlobalValue::isDeclaration(*v9)) {
          return 0;
        }
        uint64_t result = 0;
        if (((1 << (*((_DWORD *)v11 + 8) & 0xF)) & 0x7D5) == 0) {
          return result;
        }
        if ((llvm::GlobalValue::isInterposable(v11) & 1) != 0
          || *(_DWORD *)(*((void *)v11 + 3) + 8) > 0xFFu
          || !*(unsigned char *)(llvm::CFLSteensAAResult::ensureCached(*(llvm::CFLSteensAAResult **)a1, v11) + 400))
        {
          return 0;
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
      uint64_t v12 = *(unsigned int *)(a3 + 8);
      if (v12)
      {
        unsigned int v13 = *(llvm::Function ***)a3;
        uint64_t v14 = &v13[v12];
        do
        {
          uint64_t v15 = llvm::CFLSteensAAResult::ensureCached(*(llvm::CFLSteensAAResult **)a1, *v13);
          if (*(unsigned char *)(v15 + 400)) {
            uint64_t v16 = v15 + 48;
          }
          else {
            uint64_t v16 = 0;
          }
          uint64_t v17 = *(unsigned int *)(v16 + 8);
          if (v17)
          {
            uint64_t v18 = *(long long **)v16;
            uint64_t v19 = 24 * v17;
            do
            {
              long long v20 = *v18;
              uint64_t v25 = *((void *)v18 + 2);
              long long v24 = v20;
              llvm::cflaa::instantiateExternalRelation((uint64_t *)&v24, a2, (uint64_t)&v26);
              if (v30)
              {
                sub_1CBF99710(*(uint64_t **)(a1 + 24), v26, v27, 0);
                sub_1CBF99710(*(uint64_t **)(a1 + 24), v28, v29, 0);
                sub_1CD4694CC(*(void *)(a1 + 24), v26, v27, v28, v29, 0);
              }
              uint64_t v18 = (long long *)((char *)v18 + 24);
              v19 -= 24;
            }
            while (v19);
          }
          uint64_t v21 = *(unsigned int *)(v16 + 216);
          if (v21)
          {
            unsigned int v22 = *(uint64_t **)(v16 + 208);
            uint64_t v23 = &v22[2 * v21];
            do
            {
              llvm::cflaa::instantiateExternalAttribute(*v22, v22[1], a2, (uint64_t)&v26);
              if ((_BYTE)v29) {
                sub_1CBF99710(*(uint64_t **)(a1 + 24), v26, v27, v28);
              }
              v22 += 2;
            }
            while (v22 != v23);
          }
          ++v13;
        }
        while (v13 != v14);
      }
    }
    return 1;
  }
  return result;
}

char *sub_1CD46C130(char *result, _DWORD *a2)
{
  uint64_t v3 = result;
  int v4 = a2[5];
  if ((v4 & 0x40000000) != 0)
  {
    uint64_t v6 = (llvm::cflaa **)*((void *)a2 - 1);
    uint64_t v5 = v4 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v5 = v4 & 0x7FFFFFF;
    uint64_t v6 = (llvm::cflaa **)&a2[-8 * v5];
  }
  if (v5)
  {
    uint64_t v7 = 32 * v5;
    do
    {
      uint64_t v8 = *v6;
      v6 += 4;
      uint64_t result = sub_1CD46BB28(v3, v8, (llvm::cflaa *)a2, 0);
      v7 -= 32;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1CD46C19C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v9 = 0;
  int v4 = sub_1CD4674DC(*(void *)a1, *(_DWORD *)(a1 + 16), a2, a3, &v9);
  uint64_t v5 = v9;
  if (!v4) {
    uint64_t v5 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 16);
  }
  BOOL v6 = v5 == *(void *)a1 + 24 * *(unsigned int *)(a1 + 16);
  uint64_t v7 = v5 + 16;
  if (v6) {
    return 0;
  }
  else {
    return v7;
  }
}

unint64_t sub_1CD46C20C(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v3 = *(_OWORD **)(a1 + 32);
  uint64_t v2 = a1 + 24;
  unint64_t v5 = *(void *)(v2 + 16);
  unint64_t v6 = ((unint64_t)v3 - v4) >> 5;
  LODWORD(v1llvm::Function::viewCFG(this, 1, 0, 0) = v6;
  *((void *)&v10 + 1) = -1;
  *(void *)&long long v11 = 0;
  DWORD2(v11) = -1;
  if ((unint64_t)v3 >= v5)
  {
    uint64_t v8 = sub_1CBF9AC5C((void **)v2, &v10);
  }
  else
  {
    long long v7 = v11;
    *uint64_t v3 = v10;
    v3[1] = v7;
    uint64_t v8 = v3 + 2;
  }
  *(void *)(a1 + 32) = v8;
  return v6;
}

uint64_t sub_1CD46C284(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result = sub_1CD46C60C(a1, a2, a3);
  if ((result & 1) == 0)
  {
    uint64_t result = sub_1CD46C60C(a1, a3, a2);
    if ((result & 1) == 0)
    {
      uint64_t v7 = *(void *)(a1 + 24);
      return sub_1CD46C8FC(v7, a2, a3);
    }
  }
  return result;
}

uint64_t sub_1CD46C2FC(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v12 = 0;
  uint64_t result = sub_1CD4674DC(*(void *)a2, *(_DWORD *)(a2 + 16), *(void *)a3, *(_DWORD *)(a3 + 8), &v12);
  uint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = sub_1CD46C3A0(a2, a3, v12);
    uint64_t v9 = result;
    *(_OWORD *)uint64_t result = *(_OWORD *)a3;
    *(_DWORD *)(result + 16) = *a4;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a2 + 24 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_1CD46C3A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD46C460(a1, v6);
  uint64_t v9 = 0;
  sub_1CD4674DC(*(void *)a1, *(_DWORD *)(a1 + 16), *(void *)a2, *(_DWORD *)(a2 + 8), &v9);
  a3 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)a3 != -4096 || *(_DWORD *)(a3 + 8) != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

_OWORD *sub_1CD46C460(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD46C53C(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 24 * v10;
    do
    {
      *uint64_t result = xmmword_1CFAC30E0;
      uint64_t result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD46C53C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(_OWORD **)result;
    uint64_t v8 = 24 * v6;
    do
    {
      *int v7 = xmmword_1CFAC30E0;
      int v7 = (_OWORD *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *(void *)a2;
    int v10 = *(_DWORD *)(a2 + 8);
    if ((*(void *)a2 != -4096 || v10 != -1) && (v9 != -8192 || v10 != -2))
    {
      uint64_t v14 = 0;
      uint64_t result = sub_1CD4674DC(*(void *)v5, *(_DWORD *)(v5 + 16), v9, v10, &v14);
      unsigned int v13 = v14;
      _OWORD *v14 = *(_OWORD *)a2;
      *((_DWORD *)v13 + 4) = *(_DWORD *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

BOOL sub_1CD46C60C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = v4 + 32 * a2;
  unsigned int v8 = *(_DWORD *)(v5 + 24);
  uint64_t v6 = (_DWORD *)(v5 + 24);
  uint64_t v7 = v8;
  if (v8 != -1)
  {
    uint64_t v9 = v7;
    do
    {
      uint64_t v10 = v9;
      uint64_t v9 = *(unsigned int *)(v4 + 32 * v9 + 24);
    }
    while (v9 != -1);
    int v11 = *(_DWORD *)(v4 + 32 * v10);
    do
    {
      uint64_t v3 = v7;
      *uint64_t v6 = v11;
      uint64_t v12 = v4 + 32 * v7;
      unsigned int v13 = *(_DWORD *)(v12 + 24);
      uint64_t v6 = (_DWORD *)(v12 + 24);
      uint64_t v7 = v13;
    }
    while (v13 != -1);
  }
  uint64_t v14 = a3;
  uint64_t v15 = v4 + 32 * a3;
  unsigned int v18 = *(_DWORD *)(v15 + 24);
  uint64_t v16 = (_DWORD *)(v15 + 24);
  uint64_t v17 = v18;
  if (v18 != -1)
  {
    uint64_t v19 = v17;
    do
    {
      uint64_t v20 = v19;
      uint64_t v19 = *(unsigned int *)(v4 + 32 * v19 + 24);
    }
    while (v19 != -1);
    int v21 = *(_DWORD *)(v4 + 32 * v20);
    do
    {
      uint64_t v14 = v17;
      _DWORD *v16 = v21;
      uint64_t v22 = v4 + 32 * v17;
      unsigned int v23 = *(_DWORD *)(v22 + 24);
      uint64_t v16 = (_DWORD *)(v22 + 24);
      uint64_t v17 = v23;
    }
    while (v23 != -1);
  }
  if (v3 == v14) {
    return 1;
  }
  int v60 = 0;
  uint64_t v26 = v4 + 32 * v3;
  int v28 = *(_DWORD *)(v26 + 8);
  uint64_t v27 = (unsigned int *)(v26 + 8);
  if (v28 == -1) {
    return 0;
  }
  LODWORD(v29) = 0;
  char v30 = (int *)(v4 + 32 * v3);
  uint64_t v31 = *((void *)v30 + 2);
  std::string::size_type v32 = (int *)(v4 + 32 * v14);
  do
  {
    if (v29 >= 8) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)&v61[8 * v29] = v30;
    uint64_t v29 = ++v60;
    uint64_t v33 = *((void *)v30 + 2);
    uint64_t v34 = *v27;
    uint64_t v35 = *(void *)(a1 + 24);
    uint64_t v36 = v35 + 32 * v34;
    unsigned int v39 = *(_DWORD *)(v36 + 24);
    std::string v37 = (_DWORD *)(v36 + 24);
    uint64_t v38 = v39;
    if (v39 != -1)
    {
      uint64_t v40 = v38;
      do
      {
        uint64_t v41 = v40;
        uint64_t v40 = *(unsigned int *)(v35 + 32 * v40 + 24);
      }
      while (v40 != -1);
      int v42 = *(_DWORD *)(v35 + 32 * v41);
      do
      {
        uint64_t v34 = v38;
        *std::string v37 = v42;
        uint64_t v43 = v35 + 32 * v38;
        unsigned int v44 = *(_DWORD *)(v43 + 24);
        std::string v37 = (_DWORD *)(v43 + 24);
        uint64_t v38 = v44;
      }
      while (v44 != -1);
    }
    v31 |= v33;
    char v30 = (int *)(v35 + 32 * v34);
    if (v30 == v32) {
      break;
    }
    uint64_t v27 = (unsigned int *)(v30 + 2);
  }
  while (v30[2] != -1);
  if (v30 == v32)
  {
    uint64_t v45 = v4 + 32 * v14;
    *(void *)(v45 + 16) |= v31;
    uint64_t v46 = *(unsigned int *)(v4 + 32 * v3 + 12);
    uint64_t v47 = (_DWORD *)(v45 + 12);
    if (v46 == -1)
    {
      _DWORD *v47 = -1;
    }
    else
    {
      _DWORD *v47 = v46;
      uint64_t v48 = v35 + 32 * v46;
      unsigned int v51 = *(_DWORD *)(v48 + 24);
      uint64_t v49 = (_DWORD *)(v48 + 24);
      uint64_t v50 = v51;
      if (v51 != -1)
      {
        uint64_t v52 = v50;
        do
        {
          uint64_t v53 = v52;
          uint64_t v52 = *(unsigned int *)(v35 + 32 * v52 + 24);
        }
        while (v52 != -1);
        int v54 = *(_DWORD *)(v35 + 32 * v53);
        do
        {
          uint64_t v46 = v50;
          *uint64_t v49 = v54;
          uint64_t v55 = v35 + 32 * v50;
          unsigned int v56 = *(_DWORD *)(v55 + 24);
          uint64_t v49 = (_DWORD *)(v55 + 24);
          uint64_t v50 = v56;
        }
        while (v56 != -1);
      }
      *(_DWORD *)(v35 + 32 * v46 + 8) = a3;
    }
    if (v29)
    {
      uint64_t v57 = 0;
      int v58 = *v32;
      uint64_t v59 = 8 * v29;
      do
      {
        *(_DWORD *)(*(void *)&v61[v57] + 24) = v58;
        v57 += 8;
      }
      while (v59 != v57);
    }
  }
  return v30 == v32;
}

uint64_t sub_1CD46C8FC(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = result + 32 * a2;
  unsigned int v7 = *(_DWORD *)(v4 + 24);
  uint64_t v5 = (_DWORD *)(v4 + 24);
  uint64_t v6 = v7;
  if (v7 != -1)
  {
    uint64_t v8 = v6;
    do
    {
      uint64_t v9 = v8;
      uint64_t v8 = *(unsigned int *)(result + 32 * v8 + 24);
    }
    while (v8 != -1);
    int v10 = *(_DWORD *)(result + 32 * v9);
    do
    {
      uint64_t v3 = v6;
      _DWORD *v5 = v10;
      uint64_t v11 = result + 32 * v6;
      unsigned int v12 = *(_DWORD *)(v11 + 24);
      uint64_t v5 = (_DWORD *)(v11 + 24);
      uint64_t v6 = v12;
    }
    while (v12 != -1);
  }
  uint64_t v13 = a3;
  uint64_t v14 = result + 32 * a3;
  unsigned int v17 = *(_DWORD *)(v14 + 24);
  uint64_t v15 = (_DWORD *)(v14 + 24);
  uint64_t v16 = v17;
  if (v17 != -1)
  {
    uint64_t v18 = v16;
    do
    {
      uint64_t v19 = v18;
      uint64_t v18 = *(unsigned int *)(result + 32 * v18 + 24);
    }
    while (v18 != -1);
    int v20 = *(_DWORD *)(result + 32 * v19);
    do
    {
      uint64_t v13 = v16;
      *uint64_t v15 = v20;
      uint64_t v21 = result + 32 * v16;
      unsigned int v22 = *(_DWORD *)(v21 + 24);
      uint64_t v15 = (_DWORD *)(v21 + 24);
      uint64_t v16 = v22;
    }
    while (v22 != -1);
  }
  while (1)
  {
    uint64_t v42 = *(unsigned int *)(result + 32 * v3 + 8);
    if (v42 == -1) {
      break;
    }
    uint64_t v23 = *(unsigned int *)(result + 32 * v13 + 8);
    if (v23 == -1) {
      break;
    }
    uint64_t v24 = result + 32 * v42;
    unsigned int v27 = *(_DWORD *)(v24 + 24);
    uint64_t v25 = (_DWORD *)(v24 + 24);
    uint64_t v26 = v27;
    uint64_t v3 = *(unsigned int *)(result + 32 * v3 + 8);
    if (v27 != -1)
    {
      uint64_t v28 = v26;
      do
      {
        uint64_t v29 = v28;
        uint64_t v28 = *(unsigned int *)(result + 32 * v28 + 24);
      }
      while (v28 != -1);
      int v30 = *(_DWORD *)(result + 32 * v29);
      do
      {
        uint64_t v3 = v26;
        *uint64_t v25 = v30;
        uint64_t v31 = result + 32 * v26;
        unsigned int v32 = *(_DWORD *)(v31 + 24);
        uint64_t v25 = (_DWORD *)(v31 + 24);
        uint64_t v26 = v32;
      }
      while (v32 != -1);
    }
    uint64_t v33 = result + 32 * v23;
    unsigned int v36 = *(_DWORD *)(v33 + 24);
    uint64_t v34 = (_DWORD *)(v33 + 24);
    uint64_t v35 = v36;
    if (v36 != -1)
    {
      uint64_t v37 = v35;
      do
      {
        uint64_t v38 = v37;
        uint64_t v37 = *(unsigned int *)(result + 32 * v37 + 24);
      }
      while (v37 != -1);
      int v39 = *(_DWORD *)(result + 32 * v38);
      do
      {
        uint64_t v23 = v35;
        *uint64_t v34 = v39;
        uint64_t v40 = result + 32 * v35;
        unsigned int v41 = *(_DWORD *)(v40 + 24);
        uint64_t v34 = (_DWORD *)(v40 + 24);
        uint64_t v35 = v41;
      }
      while (v41 != -1);
    }
    uint64_t v13 = v23;
  }
  uint64_t v43 = result + 32 * v13;
  unsigned int v44 = (int *)(result + 32 * v3);
  uint64_t v45 = *(unsigned int *)(v43 + 8);
  if (v45 != -1)
  {
    v44[2] = v45;
    uint64_t v46 = result + 32 * v45;
    unsigned int v49 = *(_DWORD *)(v46 + 24);
    uint64_t v47 = (_DWORD *)(v46 + 24);
    uint64_t v48 = v49;
    if (v49 != -1)
    {
      uint64_t v50 = v48;
      do
      {
        uint64_t v51 = v50;
        uint64_t v50 = *(unsigned int *)(result + 32 * v50 + 24);
      }
      while (v50 != -1);
      int v52 = *(_DWORD *)(result + 32 * v51);
      do
      {
        uint64_t v45 = v48;
        _DWORD *v47 = v52;
        uint64_t v53 = result + 32 * v48;
        unsigned int v54 = *(_DWORD *)(v53 + 24);
        uint64_t v47 = (_DWORD *)(v53 + 24);
        uint64_t v48 = v54;
      }
      while (v54 != -1);
    }
    *(_DWORD *)(result + 32 * v45 + 12) = *v44;
  }
  while (1)
  {
    uint64_t v72 = v44[3];
    if (v72 == -1) {
      break;
    }
    uint64_t v55 = *(unsigned int *)(v43 + 12);
    if (v55 == -1) {
      break;
    }
    *((void *)v44 + 2) |= *(void *)(v43 + 16);
    uint64_t v56 = result + 32 * v55;
    unsigned int v59 = *(_DWORD *)(v56 + 24);
    uint64_t v57 = (_DWORD *)(v56 + 24);
    uint64_t v58 = v59;
    if (v59 != -1)
    {
      uint64_t v60 = v58;
      do
      {
        uint64_t v61 = v60;
        uint64_t v60 = *(unsigned int *)(result + 32 * v60 + 24);
      }
      while (v60 != -1);
      int v62 = *(_DWORD *)(result + 32 * v61);
      do
      {
        uint64_t v55 = v58;
        *uint64_t v57 = v62;
        uint64_t v63 = result + 32 * v58;
        unsigned int v64 = *(_DWORD *)(v63 + 24);
        uint64_t v57 = (_DWORD *)(v63 + 24);
        uint64_t v58 = v64;
      }
      while (v64 != -1);
    }
    *(_DWORD *)(v43 + 24) = *v44;
    uint64_t v65 = result + 32 * v72;
    unsigned int v68 = *(_DWORD *)(v65 + 24);
    uint64_t v66 = (_DWORD *)(v65 + 24);
    uint64_t v67 = v68;
    if (v68 != -1)
    {
      uint64_t v69 = v67;
      do
      {
        uint64_t v70 = v69;
        uint64_t v69 = *(unsigned int *)(result + 32 * v69 + 24);
      }
      while (v69 != -1);
      int v71 = *(_DWORD *)(result + 32 * v70);
      do
      {
        uint64_t v72 = v67;
        *uint64_t v66 = v71;
        uint64_t v73 = result + 32 * v67;
        unsigned int v74 = *(_DWORD *)(v73 + 24);
        uint64_t v66 = (_DWORD *)(v73 + 24);
        uint64_t v67 = v74;
      }
      while (v74 != -1);
    }
    uint64_t v43 = result + 32 * v55;
    unsigned int v44 = (int *)(result + 32 * v72);
  }
  uint64_t v75 = *(unsigned int *)(v43 + 12);
  if (v75 == -1)
  {
    int v85 = *v44;
  }
  else
  {
    v44[3] = v75;
    uint64_t v76 = result + 32 * v75;
    unsigned int v79 = *(_DWORD *)(v76 + 24);
    long long v77 = (_DWORD *)(v76 + 24);
    uint64_t v78 = v79;
    if (v79 != -1)
    {
      uint64_t v80 = v78;
      do
      {
        uint64_t v81 = v80;
        uint64_t v80 = *(unsigned int *)(result + 32 * v80 + 24);
      }
      while (v80 != -1);
      int v82 = *(_DWORD *)(result + 32 * v81);
      do
      {
        uint64_t v75 = v78;
        *long long v77 = v82;
        uint64_t v83 = result + 32 * v78;
        unsigned int v84 = *(_DWORD *)(v83 + 24);
        long long v77 = (_DWORD *)(v83 + 24);
        uint64_t v78 = v84;
      }
      while (v84 != -1);
    }
    int v85 = *v44;
    *(_DWORD *)(result + 32 * v75 + 8) = *v44;
  }
  *((void *)v44 + 2) |= *(void *)(v43 + 16);
  *(_DWORD *)(v43 + 24) = v85;
  return result;
}

uint64_t sub_1CD46CC0C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = (unsigned int *)sub_1CD46C19C(a1, a2, a3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = v7 + 32 * v6;
  unsigned int v11 = *(_DWORD *)(v8 + 24);
  uint64_t v9 = (_DWORD *)(v8 + 24);
  uint64_t v10 = v11;
  if (v11 != -1)
  {
    uint64_t v12 = v10;
    do
    {
      uint64_t v13 = v12;
      uint64_t v12 = *(unsigned int *)(v7 + 32 * v12 + 24);
    }
    while (v12 != -1);
    int v14 = *(_DWORD *)(v7 + 32 * v13);
    do
    {
      uint64_t v6 = v10;
      *uint64_t v9 = v14;
      uint64_t v15 = v7 + 32 * v10;
      unsigned int v16 = *(_DWORD *)(v15 + 24);
      uint64_t v9 = (_DWORD *)(v15 + 24);
      uint64_t v10 = v16;
    }
    while (v16 != -1);
  }
  return *(unsigned int *)(v7 + 32 * v6) | 0x100000000;
}

void sub_1CD46CC9C(uint64_t *a1)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  v14[0] = v15;
  v14[1] = (void *)0x1000000000;
  v17[0] = 0;
  v17[1] = 0;
  unsigned int v16 = v17;
  unint64_t v1 = a1[1] - *a1;
  if ((v1 >> 4))
  {
    uint64_t v3 = 0;
    uint64_t v4 = (v1 >> 4);
    do
    {
      unsigned int v13 = 0;
      uint64_t v5 = v3;
      do
      {
        unsigned int v6 = v5;
        uint64_t v5 = *(unsigned int *)(*a1 + 16 * v5);
      }
      while (v5 != -1);
      unsigned int v13 = v6;
      if ((sub_1CB8F4B90((uint64_t)v14, &v13) & 0x100000000) != 0)
      {
        uint64_t v7 = *a1;
        uint64_t v8 = *a1 + 16 * v13;
        uint64_t v9 = *(unsigned int *)(v8 + 4);
        if (v9 != -1)
        {
          uint64_t v10 = *(void *)(v8 + 8);
          do
          {
            uint64_t v11 = v7 + 16 * v9;
            v10 |= *(void *)(v11 + 8);
            *(void *)(v11 + 8) = v10;
            unsigned int v13 = v9;
            uint64_t v9 = *(unsigned int *)(v11 + 4);
          }
          while (v9 != -1);
        }
      }
      ++v3;
    }
    while (v3 != v4);
    uint64_t v12 = (void *)v17[0];
  }
  else
  {
    uint64_t v12 = 0;
  }
  sub_1CB833A08((uint64_t)&v16, v12);
  if (v14[0] != v15) {
    free(v14[0]);
  }
}

uint64_t sub_1CD46CDE0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v12 = 0;
  uint64_t result = sub_1CD469D10(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  uint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD46CE74(a2, v12, a3, a4);
    uint64_t v9 = (void *)result;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a2 + 416 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 16) = v10;
  return result;
}

void *sub_1CD46CE74(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  unsigned int v6 = sub_1CD46CED8(a1, a3, a2);
  *unsigned int v6 = *a3;
  *((unsigned char *)v6 + 8) = 0;
  *((unsigned char *)v6 + 408) = 0;
  if (*(unsigned char *)(a4 + 400)) {
    sub_1CD46B298((uint64_t)(v6 + 1), a4);
  }
  return v6;
}

void *sub_1CD46CED8(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD46CF8C(a1, v6);
  uint64_t v8 = 0;
  sub_1CD469D10(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CD46CF8C(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(416 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD46D068((void *)a1, v4, v4 + 416 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 416 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 52;
      v11 -= 416;
    }
    while (v11);
  }
  return result;
}

void *sub_1CD46D068(void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = result;
  result[1] = 0;
  unsigned int v6 = *((_DWORD *)result + 4);
  if (v6)
  {
    int v7 = (void *)*result;
    uint64_t v8 = 416 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 52;
      v8 -= 416;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v12 = 0;
      sub_1CD469D10(*v5, *((_DWORD *)v5 + 4), v9, &v12);
      unsigned int v10 = v12;
      *uint64_t v12 = *(void *)a2;
      *((unsigned char *)v10 + 408) = 0;
      *((unsigned char *)v10 + 8) = 0;
      uint64_t result = v10 + 1;
      if (*(unsigned char *)(a2 + 408))
      {
        uint64_t result = sub_1CD46B298((uint64_t)result, a2 + 8);
        int v11 = *(unsigned __int8 *)(a2 + 408);
        ++*((_DWORD *)v5 + 2);
        if (v11)
        {
          uint64_t result = sub_1CD46B2F0((void *)(a2 + 8));
          *(unsigned char *)(a2 + 408) = 0;
        }
      }
      else
      {
        ++*((_DWORD *)v5 + 2);
      }
    }
    a2 += 416;
  }
  return result;
}

void *sub_1CD46D15C(uint64_t a1, uint64_t *a2)
{
  int v7 = 0;
  char v4 = sub_1CD469D10(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  unint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = sub_1CD46CED8(a1, a2, v7);
    void *v5 = *a2;
    v5[51] = 0;
    *(_OWORD *)(v5 + 31) = 0u;
    *(_OWORD *)(v5 + 29) = 0u;
    *(_OWORD *)(v5 + 27) = 0u;
    *(_OWORD *)(v5 + 25) = 0u;
    *(_OWORD *)(v5 + 23) = 0u;
    *(_OWORD *)(v5 + 21) = 0u;
    *(_OWORD *)(v5 + 19) = 0u;
    *(_OWORD *)(v5 + 17) = 0u;
    *(_OWORD *)(v5 + 15) = 0u;
    *(_OWORD *)(v5 + 13) = 0u;
    *(_OWORD *)(v5 + 11) = 0u;
    *(_OWORD *)(v5 + 9) = 0u;
    *(_OWORD *)(v5 + 7) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 1) = 0u;
    *(_OWORD *)(v5 + 47) = 0u;
    *(_OWORD *)(v5 + 49) = 0u;
    *(_OWORD *)(v5 + 43) = 0u;
    *(_OWORD *)(v5 + 45) = 0u;
    *(_OWORD *)(v5 + 39) = 0u;
    *(_OWORD *)(v5 + 41) = 0u;
    *(_OWORD *)(v5 + 35) = 0u;
    *(_OWORD *)(v5 + 37) = 0u;
    *(_OWORD *)(v5 + 33) = 0u;
  }
  return v5;
}

uint64_t sub_1CD46D228(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 400))
  {
    sub_1CD46D288(a1, a2);
  }
  else
  {
    sub_1CD46AEB4(a1, a2);
    sub_1CD468348((void *)(a1 + 48), a2 + 48);
    *(unsigned char *)(a1 + 40llvm::Function::viewCFG(this, 1, 0, 0) = 1;
  }
  return a1;
}

uint64_t sub_1CD46D288(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1CD46A1B4(a1, a2);
  sub_1CD46D2D8(v4 + 24, (__n128 *)(a2 + 24));
  sub_1CD4683C8(a1 + 48, a2 + 48);
  sub_1CD4684F0(a1 + 256, a2 + 256);
  return a1;
}

__n128 sub_1CD46D2D8(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void sub_1CD46D334(void *a1)
{
  sub_1CD46AAF0(a1[4] + 40, a1[3]);
  uint64_t v2 = a1[3];
  if (v2)
  {
    if ((v2 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      llvm::ValueHandleBase::RemoveFromUseList(a1 + 1);
    }
    a1[3] = 0;
  }
}

uint64_t llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::Invalidator::invalidate(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1CBF5BF34(*a1, a2);
  uint64_t v9 = *a1;
  uint64_t v10 = *a1 + 8;
  if (*(unsigned char *)*a1)
  {
    uint64_t v11 = 8;
  }
  else
  {
    uint64_t v10 = *(void *)(v9 + 8);
    uint64_t v11 = *(unsigned int *)(v9 + 16);
  }
  if (v10 + 16 * v11 == v8)
  {
    uint64_t v13 = a1[1];
    v19[0] = a2;
    v19[1] = a3;
    uint64_t v17 = 0;
    if (sub_1CBF5C064((uint64_t *)v13, v19, &v17)) {
      uint64_t v14 = v17;
    }
    else {
      uint64_t v14 = *(void *)v13 + 24 * *(unsigned int *)(v13 + 16);
    }
    uint64_t v15 = *a1;
    char v16 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t *))(**(void **)(*(void *)(v14 + 16) + 24)
                                                                         + 16))(*(void *)(*(void *)(v14 + 16) + 24), a3, a4, a1);
    uint64_t v17 = a2;
    v18[0] = v16;
    sub_1CBF5C150(v15, &v17, v18, (uint64_t)v19);
    uint64_t v8 = v19[0];
  }
  return *(unsigned __int8 *)(v8 + 8);
}

uint64_t sub_1CD46D4B4(uint64_t a1, uint64_t *__p)
{
  uint64_t v3 = *__p;
  uint64_t v4 = __p[1];
  *(void *)(v3 + 8) = v4;
  *(void *)__p[1] = v3;
  --*(void *)(a1 + 16);
  uint64_t v5 = __p[3];
  __p[3] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  operator delete(__p);
  return v4;
}

int32x2_t sub_1CD46D52C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  if (sub_1CBFA5644(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v5))
  {
    uint64_t v4 = v5;
    sub_1CBFA50F4(v5 + 1);
    void *v4 = -8192;
    int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

llvm::raw_ostream *llvm::PassManager<llvm::LazyCallGraph::SCC,llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>,llvm::LazyCallGraph&,llvm::CGSCCUpdateResult &>::printPipeline(llvm::raw_ostream *result, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)result + 1) - *(void *)result;
  if ((v4 & 0x7FFFFFFF8) != 0)
  {
    uint64_t v8 = result;
    uint64_t v9 = 0;
    unint64_t v10 = (v4 >> 3);
    do
    {
      int32x2_t result = (llvm::raw_ostream *)(*(uint64_t (**)(void, llvm::raw_ostream *, uint64_t, uint64_t))(**(void **)(*(void *)v8 + 8 * v9) + 24))(*(void *)(*(void *)v8 + 8 * v9), a2, a3, a4);
      if (++v9 < v10) {
        int32x2_t result = sub_1CB8E509C(a2, ",");
      }
    }
    while (v10 != v9);
  }
  return result;
}

unint64_t *sub_1CD46D654(uint64_t *a1, uint64_t a2)
{
  long long v7 = *(_OWORD *)a2;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v3 = sub_1CD46E984(a1, &v7);
  unint64_t v4 = *a1;
  if ((*a1 & 4) != 0) {
    uint64_t v5 = (unint64_t *)(*(void *)(v4 & 0xFFFFFFFFFFFFFFF8)
  }
                            + 8 * *(unsigned int *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8));
  else {
    uint64_t v5 = (unint64_t *)&a1[v4 > 7];
  }
  return sub_1CBFA5ABC((unint64_t *)a1, (unint64_t *)v3, v5);
}

unint64_t *sub_1CD46D6C8(uint64_t *a1, uint64_t a2)
{
  long long v7 = *(_OWORD *)a2;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v3 = sub_1CD46E9E4(a1, &v7);
  unint64_t v4 = *a1;
  if ((*a1 & 4) != 0) {
    uint64_t v5 = (unint64_t *)(*(void *)(v4 & 0xFFFFFFFFFFFFFFF8)
  }
                            + 8 * *(unsigned int *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8));
  else {
    uint64_t v5 = (unint64_t *)&a1[v4 > 7];
  }
  return sub_1CBFA5ABC((unint64_t *)a1, (unint64_t *)v3, v5);
}

void llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>,llvm::Module>::run()
{
}

BOOL sub_1CD46D7A4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16)) {
    return 0;
  }
  uint64_t v3 = *(void **)a1;
  unint64_t v4 = sub_1CB896AE8(*(void *)a1, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  uint64_t v5 = v3[1];
  uint64_t v6 = 16;
  if (v5 == *v3) {
    uint64_t v6 = 20;
  }
  if (v4 != (void *)(v5 + 8 * *(unsigned int *)((char *)v3 + v6))) {
    return 1;
  }
  long long v7 = *(void **)a1;
  uint64_t v8 = sub_1CB896AE8((uint64_t)v7, (uint64_t)&llvm::AllAnalysesOn<llvm::LazyCallGraph::SCC>::SetKey);
  uint64_t v9 = v7[1];
  uint64_t v10 = 16;
  if (v9 == *v7) {
    uint64_t v10 = 20;
  }
  return v8 != (void *)(v9 + 8 * *(unsigned int *)((char *)v7 + v10));
}

void sub_1CD46D84C(void *a1, unsigned int a2)
{
  if (a2 <= 4)
  {
    *a1 = 1;
    goto LABEL_5;
  }
  *(_DWORD *)a1 &= ~1u;
  uint64_t v3 = a2;
  size_t v4 = 16 * a2;
  uint64_t v5 = operator new(v4, (std::align_val_t)8uLL);
  a1[1] = v5;
  a1[2] = v3;
  int v6 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if (v6)
  {
LABEL_5:
    uint64_t v5 = a1 + 1;
    size_t v4 = 64;
  }

  memset_pattern16(v5, &unk_1CFAC3070, v4);
}

void *sub_1CD46D8E4(void *a1, unsigned int a2)
{
  if (a2 <= 0x10)
  {
    *a1 = 1;
  }
  else
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v3 = a2;
    int32x2_t result = operator new(16 * a2, (std::align_val_t)8uLL);
    a1[1] = result;
    a1[2] = v3;
    int v5 = *(_DWORD *)a1;
    *a1 = *(_DWORD *)a1 & 1;
    if ((v5 & 1) == 0)
    {
      int v6 = &result[2 * v3];
      goto LABEL_6;
    }
  }
  int32x2_t result = a1 + 1;
  int v6 = a1 + 33;
  do
  {
LABEL_6:
    *int32x2_t result = -4096;
    result += 2;
  }
  while (result != v6);
  return result;
}

void **sub_1CD46D968(void **result)
{
  unint64_t v1 = (void **)*result;
  uint64_t v2 = *((unsigned int *)result + 2);
  if (v2)
  {
    long long v7 = result;
    uint64_t v8 = (char *)*result;
    uint64_t v3 = 32 * v2;
    do
    {
      uint64_t v4 = *(void *)&v8[v3 - 8];
      if (v4 != -8192 && v4 != -4096 && v4 != 0) {
        llvm::ValueHandleBase::RemoveFromUseList(&v8[v3 - 24]);
      }
      v3 -= 32;
    }
    while (v3);
    int32x2_t result = v7;
    unint64_t v1 = (void **)*v7;
  }
  if (v1 != result + 2)
  {
    int v6 = result;
    free(v1);
    return v6;
  }
  return result;
}

uint64_t sub_1CD46DA04(uint64_t a1, void *a2, void *a3)
{
  long long v7 = (void *)*a2;
  int v8 = 0;
  uint64_t result = sub_1CD46DB20((uint64_t)v9, a1, (uint64_t *)&v7, &v8);
  if (v10)
  {
    *((_DWORD *)v9[0] + 2) = *(_DWORD *)(a1 + 272);
    v9[0] = a2;
    long long v7 = a3;
    return sub_1CD46DA90(a1 + 264, v9, &v7);
  }
  return result;
}

uint64_t sub_1CD46DA90(uint64_t result, void **a2, void **a3)
{
  uint64_t v3 = *(unsigned int *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12)) {
    sub_1CD46DFBC();
  }
  uint64_t v4 = (void *)(*(void *)result + 32 * v3);
  int v5 = *a3;
  void *v4 = **a2;
  uint64_t v6 = v5[2];
  void v4[2] = 0;
  void v4[3] = v6;
  v4[1] = 6;
  long long v7 = v4 + 1;
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
  {
    unint64_t v9 = *v5 & 0xFFFFFFFFFFFFFFF8;
    v7[1] = *(void *)v9;
    unint64_t v10 = (unint64_t)(v7 + 1);
    *(void *)unint64_t v9 = v7;
    *long long v7 = v9 | 6;
    uint64_t v11 = (uint64_t *)v7[1];
    if (v11) {
      *uint64_t v11 = *v11 & 7 | v10;
    }
  }
  *(_DWORD *)(result + 8) = v3 + 1;
  return result;
}

uint64_t sub_1CD46DB20(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  char v16 = 0;
  uint64_t result = sub_1CD46DBEC(a2, *a3, &v16);
  unint64_t v9 = v16;
  if (result)
  {
    uint64_t v10 = a2 + 8;
    if (*(unsigned char *)a2)
    {
      uint64_t v11 = 16;
    }
    else
    {
      uint64_t v10 = *(void *)(a2 + 8);
      uint64_t v11 = *(unsigned int *)(a2 + 16);
    }
    char v12 = 0;
    uint64_t v13 = v10 + 16 * v11;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD46DC98((_DWORD *)a2, a3, v16);
    unint64_t v9 = (void *)result;
    *(void *)uint64_t result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    uint64_t v14 = a2 + 8;
    if (*(unsigned char *)a2)
    {
      uint64_t v15 = 16;
    }
    else
    {
      uint64_t v14 = *(void *)(a2 + 8);
      uint64_t v15 = *(unsigned int *)(a2 + 16);
    }
    uint64_t v13 = v14 + 16 * v15;
    char v12 = 1;
  }
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v13;
  *(unsigned char *)(a1 + 16) = v12;
  return result;
}

uint64_t sub_1CD46DBEC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      long long v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  long long v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      long long v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      long long v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

void *sub_1CD46DC98(_DWORD *a1, uint64_t *a2, void *a3)
{
  int v5 = *a1 >> 1;
  if (*a1) {
    unsigned int v6 = 16;
  }
  else {
    unsigned int v6 = a1[4];
  }
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_1CD46DD58((uint64_t)a1, v6);
  uint64_t v8 = 0;
  sub_1CD46DBEC((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096) {
    --a1[1];
  }
  return a3;
}

uint64_t sub_1CD46DD58(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x11)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD46DEF0(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = 0;
  unint64_t v9 = v14;
  do
  {
    uint64_t v10 = *(void *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(void *)unint64_t v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 256);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CD46DEF0(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1CD46DEF0(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    unint64_t v9 = (void *)(result + 264);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    uint64_t v8 = *(void **)(result + 8);
    unint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    uint64_t v10 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      BOOL v12 = 0;
      uint64_t result = sub_1CD46DBEC((uint64_t)v5, v10, &v12);
      uint64_t v11 = v12;
      *BOOL v12 = *(void *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

void sub_1CD46DFBC()
{
}

uint64_t *sub_1CD46E0BC(uint64_t *result, void *a2)
{
  uint64_t v2 = *((unsigned int *)result + 2);
  if (v2)
  {
    unint64_t v4 = result;
    int v5 = (void *)*result;
    uint64_t v6 = 32 * v2;
    do
    {
      uint64_t result = sub_1CBFA3D00(a2, v5);
      v5 += 4;
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
    uint64_t v7 = *((unsigned int *)v4 + 2);
    if (v7)
    {
      uint64_t v8 = *v4;
      uint64_t v9 = 32 * v7;
      do
      {
        uint64_t v10 = *(void *)(v8 + v9 - 8);
        if (v10 != -8192 && v10 != -4096 && v10 != 0) {
          uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((void *)(v8 + v9 - 24));
        }
        v9 -= 32;
      }
      while (v9);
    }
  }
  return result;
}

uint64_t sub_1CD46E154(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1CD46E238(a1, a2);
  uint64_t v4 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    uint64_t v5 = 16;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 16);
  }
  if (v4 + 16 * v5 == v3) {
    uint64_t v6 = (unsigned int *)(a1 + 272);
  }
  else {
    uint64_t v6 = (unsigned int *)(v3 + 8);
  }
  return *(void *)(a1 + 264) + 32 * *v6;
}

void *sub_1CD46E1B4(uint64_t a1, uint64_t *a2)
{
  uint64_t result = sub_1CD46E298((uint64_t)v7, a1, a2);
  if (v7[16])
  {
    uint64_t v5 = *a2;
    unsigned int v6 = *(_DWORD *)(a1 + 48);
    if (v6 >= *(_DWORD *)(a1 + 52)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 40) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 48);
  }
  return result;
}

uint64_t sub_1CD46E238(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  if (sub_1CD46DBEC(a1, a2, &v6)) {
    return v6;
  }
  if (*(unsigned char *)a1)
  {
    uint64_t v4 = a1 + 8;
    uint64_t v5 = 16;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v5;
}

void *sub_1CD46E298(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v14 = 0;
  uint64_t result = (void *)sub_1CBB24830(a2, *a3, &v14);
  uint64_t v7 = v14;
  if (result)
  {
    uint64_t v12 = a2 + 8;
    if (*(unsigned char *)a2)
    {
      uint64_t v13 = 4;
    }
    else
    {
      uint64_t v12 = *(void *)(a2 + 8);
      uint64_t v13 = *(unsigned int *)(a2 + 16);
    }
    char v11 = 0;
    uint64_t v10 = v12 + 8 * v13;
  }
  else
  {
    uint64_t result = sub_1CD46E358((_DWORD *)a2, a3, v14);
    uint64_t v7 = result;
    *uint64_t result = *a3;
    uint64_t v8 = a2 + 8;
    if (*(unsigned char *)a2)
    {
      uint64_t v9 = 4;
    }
    else
    {
      uint64_t v8 = *(void *)(a2 + 8);
      uint64_t v9 = *(unsigned int *)(a2 + 16);
    }
    uint64_t v10 = v8 + 8 * v9;
    char v11 = 1;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v10;
  *(unsigned char *)(a1 + 16) = v11;
  return result;
}

void *sub_1CD46E358(_DWORD *a1, uint64_t *a2, void *a3)
{
  int v5 = *a1 >> 1;
  if (*a1) {
    unsigned int v6 = 4;
  }
  else {
    unsigned int v6 = a1[4];
  }
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_5;
  }
  sub_1CD46E41C((uint64_t)a1, v6);
  uint64_t v8 = 0;
  sub_1CBB24830((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_5:
  *a1 += 2;
  if (*a3 != -4096) {
    --a1[1];
  }
  return a3;
}

uint64_t sub_1CD46E41C(uint64_t a1, unsigned int a2)
{
  void v14[4] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    char v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CBB24A50(a1, v11, &v11[v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  unsigned int v6 = v14;
  for (uint64_t i = 8; i != 40; i += 8)
  {
    uint64_t v8 = *(void *)(a1 + i);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v6++ = v8;
    }
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CBB24A50(a1, v14, v6);
}

uint64_t sub_1CD46E598(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = a2;
  if (sub_1CD46E5FC(a1, &v7, &v6)) {
    return v6;
  }
  uint64_t v4 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    uint64_t v5 = 4;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v5;
}

uint64_t sub_1CD46E5FC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t sub_1CD46E6AC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    uint64_t v7 = *(int64x2_t **)result;
    uint64_t v8 = 24 * v6;
    int64x2_t v9 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *uint64_t v7 = v9;
      uint64_t v7 = (int64x2_t *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v10 = a2[1];
    if ((*a2 != -4096 || v10 != -4096) && (*a2 != -8192 || v10 != -8192))
    {
      BOOL v12 = 0;
      uint64_t result = sub_1CBFA49A4((uint64_t *)v5, a2, &v12);
      int v11 = v12;
      *BOOL v12 = *a2;
      v11[1] = a2[1];
      void v11[2] = a2[2];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 3;
  }
  return result;
}

void sub_1CD46E78C(uint64_t a1, void *a2, void *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = *(void **)a1;
    uint64_t v8 = 32 * v6;
    do
    {
      *uint64_t v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v10 = 0;
      sub_1CBFA4D20((uint64_t *)a1, a2, &v10);
      int64x2_t v9 = v10;
      *uint64_t v10 = *a2;
      sub_1CD46E850(v9 + 1, a2 + 1);
      ++*(_DWORD *)(a1 + 8);
      sub_1CBFA4F3C(a2 + 1);
    }
    a2 += 4;
  }
}

uint64_t *sub_1CD46E850(uint64_t *result, void *a2)
{
  *uint64_t result = (uint64_t)result;
  result[1] = (uint64_t)result;
  result[2] = 0;
  uint64_t v2 = a2[2];
  if (v2)
  {
    uint64_t v4 = *a2;
    uint64_t v3 = (uint64_t *)a2[1];
    uint64_t v5 = *v3;
    *(void *)(v5 + 8) = *(void *)(*a2 + 8);
    **(void **)(v4 + 8) = v5;
    uint64_t v6 = *result;
    *(void *)(v6 + 8) = v3;
    *uint64_t v3 = v6;
    *uint64_t result = v4;
    *(void *)(v4 + 8) = result;
    result[2] = v2;
    a2[2] = 0;
  }
  return result;
}

void sub_1CD46E898(long long *a1)
{
  uint64_t v2 = sub_1CB883A14((uint64_t)&qword_1EBCC4860, 0, 0);
  byte_1EBCC48E0 = 0;
  qword_1EBCC48E8 = (uint64_t)&unk_1F25EDE58;
  unk_1EBCC48F0 = 0;
  qword_1EBCC4860 = (uint64_t)&unk_1F26440A0;
  qword_1EBCC48F8 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCC4900 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCC4918 = (uint64_t)&qword_1EBCC4900;
  llvm::cl::Option::setArgStr(v2, "abort-on-max-devirt-iterations-reached", 0x26uLL);
  xmmword_1EBCC4880 = *a1;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCC4860);
}

uint64_t *sub_1CD46E984(uint64_t *a1, long long *a2)
{
  unint64_t v2 = *a1;
  if ((*a1 & 4) != 0)
  {
    unint64_t v4 = v2 & 0xFFFFFFFFFFFFFFF8;
    a1 = *(uint64_t **)v4;
    uint64_t v3 = (uint64_t *)(*(void *)v4 + 8 * *(unsigned int *)(v4 + 8));
  }
  else
  {
    uint64_t v3 = &a1[v2 > 7];
  }
  long long v6 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  return sub_1CBFA5B5C(a1, v3, (uint64_t)&v6);
}

uint64_t *sub_1CD46E9E4(uint64_t *a1, long long *a2)
{
  unint64_t v2 = *a1;
  if ((*a1 & 4) != 0)
  {
    unint64_t v4 = v2 & 0xFFFFFFFFFFFFFFF8;
    a1 = *(uint64_t **)v4;
    uint64_t v3 = (uint64_t *)(*(void *)v4 + 8 * *(unsigned int *)(v4 + 8));
  }
  else
  {
    uint64_t v3 = &a1[v2 > 7];
  }
  long long v6 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  return sub_1CBFA5D08(a1, v3, (uint64_t)&v6);
}

void sub_1CD46EA44(unsigned int *a1)
{
  unsigned int v2 = *a1;
  unsigned int v3 = __clz((*a1 >> 1) - 1);
  if (v3 - 28 >= 3) {
    int v4 = 1 << (33 - v3);
  }
  else {
    int v4 = 64;
  }
  if (v2 >= 2) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if ((v2 & 1) != 0 && v5 < 5)
  {
    *(void *)a1 = 1;
    long long v6 = a1 + 2;
    size_t v7 = 64;
LABEL_10:
    memset_pattern16(v6, &unk_1CFAC3070, v7);
    return;
  }
  if ((v2 & 1) == 0)
  {
    if (v5 == a1[4])
    {
      *(void *)a1 = 0;
      if (!v5) {
        return;
      }
      long long v6 = (void *)*((void *)a1 + 1);
      size_t v7 = 16 * v5;
      goto LABEL_10;
    }
    MEMORY[0x1D25D9CD0](*((void *)a1 + 1), 8);
  }

  sub_1CD46D84C(a1, v5);
}

void *sub_1CD46EB34(void *result)
{
  unint64_t v1 = result;
  unsigned int v2 = *(_DWORD *)result;
  unsigned int v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 == 28) {
    int v4 = 64;
  }
  else {
    int v4 = 1 << (33 - v3);
  }
  if (v2 >= 2) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if ((v2 & 1) != 0 && v5 < 0x11)
  {
    long long v6 = result + 33;
    *uint64_t result = 1;
    size_t v7 = result + 1;
    do
    {
LABEL_10:
      *size_t v7 = -4096;
      v7 += 2;
    }
    while (v7 != v6);
    return result;
  }
  if ((v2 & 1) == 0)
  {
    if (v5 == *((_DWORD *)result + 4))
    {
      *uint64_t result = 0;
      if (!v5) {
        return result;
      }
      size_t v7 = (void *)result[1];
      long long v6 = &v7[2 * v5];
      goto LABEL_10;
    }
    MEMORY[0x1D25D9CD0](result[1], 8);
  }

  return sub_1CD46D8E4(v1, v5);
}

uint64_t sub_1CD46EC0C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1CBF5BF34(*a1, (uint64_t)&llvm::LazyCallGraphAnalysis::Key);
  uint64_t v7 = *a1;
  uint64_t v8 = *a1 + 8;
  if (*(unsigned char *)*a1)
  {
    uint64_t v9 = 8;
  }
  else
  {
    uint64_t v8 = *(void *)(v7 + 8);
    uint64_t v9 = *(unsigned int *)(v7 + 16);
  }
  if (v8 + 16 * v9 == v6)
  {
    uint64_t v11 = a1[1];
    v17[0] = (uint64_t)&llvm::LazyCallGraphAnalysis::Key;
    v17[1] = a2;
    uint64_t v15 = 0;
    if (sub_1CBFA49A4((uint64_t *)v11, v17, &v15)) {
      uint64_t v12 = (uint64_t)v15;
    }
    else {
      uint64_t v12 = *(void *)v11 + 24 * *(unsigned int *)(v11 + 16);
    }
    uint64_t v13 = *a1;
    char v14 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t *))(**(void **)(*(void *)(v12 + 16) + 24)
                                                                         + 16))(*(void *)(*(void *)(v12 + 16) + 24), a2, a3, a1);
    uint64_t v15 = &llvm::LazyCallGraphAnalysis::Key;
    v16[0] = v14;
    sub_1CBF5C150(v13, &v15, v16, (uint64_t)v17);
    uint64_t v6 = v17[0];
  }
  return *(unsigned __int8 *)(v6 + 8);
}

uint64_t sub_1CD46ED2C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1CBF5BF34(*a1, (uint64_t)&llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key);
  uint64_t v7 = *a1;
  uint64_t v8 = *a1 + 8;
  if (*(unsigned char *)*a1)
  {
    uint64_t v9 = 8;
  }
  else
  {
    uint64_t v8 = *(void *)(v7 + 8);
    uint64_t v9 = *(unsigned int *)(v7 + 16);
  }
  if (v8 + 16 * v9 == v6)
  {
    uint64_t v11 = a1[1];
    v17[0] = (uint64_t)&llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key;
    v17[1] = a2;
    uint64_t v15 = 0;
    if (sub_1CBFA49A4((uint64_t *)v11, v17, &v15)) {
      uint64_t v12 = (uint64_t)v15;
    }
    else {
      uint64_t v12 = *(void *)v11 + 24 * *(unsigned int *)(v11 + 16);
    }
    uint64_t v13 = *a1;
    char v14 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t *))(**(void **)(*(void *)(v12 + 16) + 24)
                                                                         + 16))(*(void *)(*(void *)(v12 + 16) + 24), a2, a3, a1);
    uint64_t v15 = &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key;
    v16[0] = v14;
    sub_1CBF5C150(v13, &v15, v16, (uint64_t)v17);
    uint64_t v6 = v17[0];
  }
  return *(unsigned __int8 *)(v6 + 8);
}

uint64_t llvm::AnalysisManager<llvm::Module>::Invalidator::invalidate(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1CBF5BF34(*a1, a2);
  uint64_t v9 = *a1;
  uint64_t v10 = *a1 + 8;
  if (*(unsigned char *)*a1)
  {
    uint64_t v11 = 8;
  }
  else
  {
    uint64_t v10 = *(void *)(v9 + 8);
    uint64_t v11 = *(unsigned int *)(v9 + 16);
  }
  if (v10 + 16 * v11 == v8)
  {
    uint64_t v13 = a1[1];
    v19[0] = a2;
    v19[1] = a3;
    uint64_t v17 = 0;
    if (sub_1CBFA49A4((uint64_t *)v13, v19, &v17)) {
      uint64_t v14 = v17;
    }
    else {
      uint64_t v14 = *(void *)v13 + 24 * *(unsigned int *)(v13 + 16);
    }
    uint64_t v15 = *a1;
    char v16 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t *))(**(void **)(*(void *)(v14 + 16) + 24)
                                                                         + 16))(*(void *)(*(void *)(v14 + 16) + 24), a3, a4, a1);
    uint64_t v17 = a2;
    v18[0] = v16;
    sub_1CBF5C150(v15, &v17, v18, (uint64_t)v19);
    uint64_t v8 = v19[0];
  }
  return *(unsigned __int8 *)(v8 + 8);
}

const void **sub_1CD46EF64(const void **this, const void **a2)
{
  if (*((unsigned char *)this + 96))
  {
    if (a2 != this)
    {
      llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)this, (const llvm::SmallPtrSetImplBase *)a2);
      llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)(this + 6), (const llvm::SmallPtrSetImplBase *)(a2 + 6));
    }
  }
  else
  {
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)this, this + 4, (const llvm::SmallPtrSetImplBase *)a2);
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)(this + 6), this + 10, (const llvm::SmallPtrSetImplBase *)(a2 + 6));
    *((unsigned char *)this + 96) = 1;
  }
  return this;
}

void llvm::CallGraph::print(llvm::CallGraph *this, llvm::raw_ostream *a2)
{
  v17[16] = *MEMORY[0x1E4F143B8];
  unsigned int v16 = 0;
  if (*((void *)this + 3) >= 0x11uLL) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v4 = 0;
  unsigned int v5 = (llvm::CallGraph *)*((void *)this + 1);
  if (v5 != (llvm::CallGraph *)((char *)this + 16))
  {
    do
    {
      if (v4 >= 0x10) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v17[v4] = *((void *)v5 + 5);
      unsigned int v4 = ++v16;
      uint64_t v6 = (llvm::CallGraph *)*((void *)v5 + 1);
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = *(llvm::CallGraph **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (llvm::CallGraph *)*((void *)v5 + 2);
          BOOL v8 = *(void *)v7 == (void)v5;
          unsigned int v5 = v7;
        }
        while (!v8);
      }
      unsigned int v5 = v7;
    }
    while (v7 != (llvm::CallGraph *)((char *)this + 16));
  }
  unint64_t v9 = 126 - 2 * __clz(v4);
  if (v4) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  sub_1CBFA9C78((char *)v17, (char *)&v17[v4], v10, 1);
  if (v16)
  {
    uint64_t v11 = (llvm::CallGraphNode **)v17;
    uint64_t v12 = 8 * v16;
    do
    {
      uint64_t v13 = *v11++;
      llvm::CallGraphNode::print(v13, a2);
      v12 -= 8;
    }
    while (v12);
  }
  uint64_t v15 = *((void *)this + 7);
  uint64_t v14 = *((void *)this + 8);
  while (v15 != v14)
  {
    llvm::CallGraphNode::print(*(llvm::CallGraphNode **)(v15 + 8), a2);
    v15 += 16;
  }
}

llvm::raw_ostream *llvm::CallGraphNode::print(llvm::CallGraphNode *this, llvm::raw_ostream *a2)
{
  unsigned int v4 = (llvm::Value *)*((void *)this + 1);
  if (v4)
  {
    unsigned int v5 = sub_1CB8E509C(a2, "Call graph node for function: '");
    Name = llvm::Value::getName(v4);
    size_t v8 = v6;
    unint64_t v9 = (void *)*((void *)v5 + 4);
    if (v6 <= *((void *)v5 + 3) - (void)v9)
    {
      if (v6)
      {
        memcpy(v9, Name, v6);
        *((void *)v5 + 4) += v8;
      }
    }
    else
    {
      llvm::raw_ostream::write(v5, Name, v6);
    }
    uint64_t v10 = "'";
    uint64_t v11 = v5;
  }
  else
  {
    uint64_t v10 = "Call graph node <<null function>>";
    uint64_t v11 = a2;
  }
  sub_1CB8E509C(v11, v10);
  uint64_t v12 = sub_1CB8E509C(a2, "<<");
  uint64_t v13 = llvm::raw_ostream::operator<<(v12, (unint64_t)this);
  uint64_t v14 = sub_1CB8E509C(v13, ">>  #uses=");
  uint64_t result = llvm::raw_ostream::operator<<(v14, *((unsigned int *)this + 10));
  unsigned int v16 = (unsigned char *)*((void *)result + 4);
  if ((unint64_t)v16 >= *((void *)result + 3))
  {
    uint64_t result = llvm::raw_ostream::write(result, 10);
  }
  else
  {
    *((void *)result + 4) = v16 + 1;
    unsigned char *v16 = 10;
  }
  uint64_t v18 = *((void *)this + 2);
  for (uint64_t i = *((void *)this + 3); v18 != i; v18 += 40)
  {
    uint64_t v19 = sub_1CB8E509C(a2, "  CS<");
    int v20 = v19;
    if (*(unsigned char *)(v18 + 24)) {
      llvm::raw_ostream::operator<<(v19, *(void *)(v18 + 16));
    }
    else {
      llvm::operator<<(v19);
    }
    sub_1CB8E509C(v20, "> calls ");
    uint64_t v21 = *(llvm::Value **)(*(void *)(v18 + 32) + 8);
    if (v21)
    {
      unsigned int v22 = sub_1CB8E509C(a2, "function '");
      uint64_t v24 = llvm::Value::getName(v21);
      size_t v25 = v23;
      uint64_t v26 = (void *)*((void *)v22 + 4);
      if (v23 <= *((void *)v22 + 3) - (void)v26)
      {
        if (v23)
        {
          memcpy(v26, v24, v23);
          *((void *)v22 + 4) += v25;
        }
      }
      else
      {
        llvm::raw_ostream::write(v22, v24, v23);
      }
      unsigned int v27 = v22;
      uint64_t v28 = "'\n";
    }
    else
    {
      uint64_t v29 = sub_1CB8E509C(a2, "<<null function>><<");
      unsigned int v27 = llvm::raw_ostream::operator<<(v29, *(void *)(v18 + 32));
      uint64_t v28 = ">>\n";
    }
    uint64_t result = sub_1CB8E509C(v27, v28);
  }
  int v30 = (unsigned char *)*((void *)a2 + 4);
  if ((unint64_t)v30 >= *((void *)a2 + 3))
  {
    return llvm::raw_ostream::write(a2, 10);
  }
  else
  {
    *((void *)a2 + 4) = v30 + 1;
    *int v30 = 10;
  }
  return result;
}

void llvm::CallGraph::dump(llvm::CallGraph *this)
{
  unsigned int v2 = llvm::dbgs(this);

  llvm::CallGraph::print(this, v2);
}

uint64_t llvm::CallGraph::ReplaceExternalCallEdge(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 80);
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = *(void *)(v3 + 24);
  while (v4 != v5)
  {
    if (*(void *)(v4 + 32) == a2)
    {
      --*(_DWORD *)(a2 + 40);
      *(void *)(v4 + 32) = a3;
      ++*(_DWORD *)(a3 + 40);
    }
    v4 += 40;
  }
  return result;
}

llvm::raw_ostream *llvm::CallGraphNode::dump(llvm::CallGraphNode *this)
{
  unsigned int v2 = llvm::dbgs(this);

  return llvm::CallGraphNode::print(this, v2);
}

void llvm::CallGraphPrinterPass::run()
{
}

llvm::CallGraphWrapperPass *llvm::CallGraphWrapperPass::CallGraphWrapperPass(llvm::CallGraphWrapperPass *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = &llvm::CallGraphWrapperPass::ID;
  *((_DWORD *)this + 6) = 4;
  *(void *)this = &unk_1F2601960;
  *((void *)this + 4) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC4928, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CBFA900C;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCC4928, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return this;
}

void llvm::initializeCallGraphWrapperPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unsigned int v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC4928, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CBFA900C;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCC4928, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::CallGraphWrapperPass::~CallGraphWrapperPass(llvm::CallGraphWrapperPass *this)
{
  *(void *)this = &unk_1F2601960;
  unint64_t v1 = (llvm::CallGraph *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v1)
  {
    unsigned int v2 = this;
    llvm::CallGraph::~CallGraph(v1);
    MEMORY[0x1D25D9CE0]();
    this = v2;
  }

  llvm::Pass::~Pass(this);
}

{
  uint64_t vars8;

  llvm::CallGraphWrapperPass::~CallGraphWrapperPass(this);

  JUMPOUT(0x1D25D9CE0);
}

void llvm::CallGraphWrapperPass::getAnalysisUsage(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 16llvm::Function::viewCFG(this, 1, 0, 0) = 1;
}

void llvm::CallGraphWrapperPass::print(llvm::CallGraphWrapperPass *this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  uint64_t v3 = (llvm::CallGraph *)*((void *)this + 4);
  if (v3) {
    llvm::CallGraph::print(v3, a2);
  }
  else {
    sub_1CB8E509C(a2, "No call graph has been built!\n");
  }
}

uint64_t llvm::CallGraphWrapperPass::dump(llvm::CallGraphWrapperPass *this)
{
  unsigned int v2 = llvm::dbgs(this);
  uint64_t v3 = *(uint64_t (**)(llvm::CallGraphWrapperPass *, llvm *, void))(*(void *)this + 40);

  return v3(this, v2, 0);
}

void llvm::callDefaultCtor<llvm::CallGraphWrapperPass>()
{
}

llvm::Value *sub_1CD46F814(llvm::CallBase **a1)
{
  if (*((_DWORD *)a1 + 4) || llvm::CallBase::isIndirectCall(*a1)) {
    unsigned int v2 = (llvm::Value **)((char *)*a1 + 32 * *(unsigned int *)a1[1] + -32 * (*((_DWORD *)*a1 + 5) & 0x7FFFFFF));
  }
  else {
    unsigned int v2 = (llvm::Value **)((char *)*a1 - 32);
  }
  uint64_t result = *v2;
  if (*v2)
  {
    uint64_t result = llvm::Value::stripPointerCasts(result);
    if (*((unsigned char *)result + 16)) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CD46F884(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  for (uint64_t i = *(void *)(result + 16); i != v2; uint64_t i = *(void *)(v7 + 16))
  {
    uint64_t v6 = v2;
    uint64_t v7 = result;
    *(void *)(result + 16) = i - 16;
    uint64_t v5 = *(void *)(i - 8);
    uint64_t v4 = (void *)(i - 8);
    uint64_t v3 = v5;
    void *v4 = 0;
    if (v5) {
      sub_1CBFA9BA8((uint64_t)v4, v3);
    }
    uint64_t v2 = v6;
    uint64_t result = v7;
  }
  if (*(void *)result)
  {
    uint64_t v8 = result;
    operator delete(*(void **)result);
    return v8;
  }
  return result;
}

void *llvm::CallGraphSCC::DeleteNode(void *a1, uint64_t a2)
{
  return llvm::CallGraphSCC::ReplaceNode(a1, a2, 0);
}

void llvm::CallGraphSCCPass::assignPassManager(llvm::Pass *a1, llvm::PMStack *a2)
{
  uint64_t v4 = *(void *)a2;
  for (uint64_t i = *((void *)a2 + 1); ; uint64_t i = *((void *)a2 + 1))
  {
    if (v4 == i) {
      goto LABEL_6;
    }
    if ((*(int (**)(void))(**(void **)(i - 8) + 40))(*(void *)(i - 8)) <= 2) {
      break;
    }
    llvm::PMStack::pop(a2);
    uint64_t v4 = *(void *)a2;
  }
  uint64_t v4 = *((void *)a2 + 1);
LABEL_6:
  int v6 = (*(uint64_t (**)(void))(**(void **)(v4 - 8) + 40))(*(void *)(v4 - 8));
  uint64_t v7 = *(void *)(*((void *)a2 + 1) - 8);
  if (v6 != 2) {
    operator new();
  }
  if (v7) {
    uint64_t v8 = v7 - 32;
  }
  else {
    uint64_t v8 = 0;
  }

  llvm::PMDataManager::add((llvm::PMDataManager *)(v8 + 32), a1);
}

void llvm::CallGraphSCCPass::getAnalysisUsage(llvm::CallGraphSCCPass *this, llvm::AnalysisUsage *a2)
{
  sub_1CB843600((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::CallGraphWrapperPass::ID);

  sub_1CB843600((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::CallGraphWrapperPass::ID);
}

void llvm::CallGraphSCCPass::createPrinterPass()
{
}

void llvm::initializeDummyCGSCCPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC4938, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CBFAE698;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCC4938, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::callDefaultCtor<llvm::DummyCGSCCPass>()
{
}

uint64_t sub_1CD46FC84(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &llvm::DummyCGSCCPass::ID;
  *(_DWORD *)(a1 + 24) = 3;
  *(void *)a1 = &unk_1F25F5160;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC4938, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CBFAE698;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCC4938, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CD46FD38(uint64_t a1, char *a2, _WORD *a3, int **a4)
{
  uint64_t v8 = sub_1CB883A14(a1, 0, 0);
  *(_DWORD *)(v8 + 128) = 0;
  *(void *)(v8 + 136) = &unk_1F25EA1B0;
  *(void *)(v8 + 144) = 0;
  *(void *)uint64_t v8 = &unk_1F2643F00;
  *(void *)(v8 + 152) = &unk_1F2643DB0;
  *(void *)(v8 + 16llvm::Function::viewCFG(this, 1, 0, 0) = &unk_1F25EA168;
  *(void *)(v8 + 184) = v8 + 160;
  size_t v9 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v9);
  *(_WORD *)(a1 + 1llvm::Function::viewCFG(this, 1, 0, 0) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  int v10 = **a4;
  *(_DWORD *)(a1 + 128) = v10;
  *(unsigned char *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = v10;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void llvm::CallGraphDOTPrinterPass::run()
{
}

void llvm::CallGraphViewerPass::run()
{
}

void llvm::createCallGraphViewerPass(llvm *this)
{
}

void llvm::createCallGraphDOTPrinterPass(llvm *this)
{
}

uint64_t *sub_1CD470048(uint64_t *a1, uint64_t *a2, char a3, llvm::Twine *this)
{
  v8[0] = a1;
  v8[1] = a2;
  char v10 = a3;
  char v9 = 0;
  llvm::Twine::str(this, __p);
  sub_1CD4704A4((uint64_t)v8, (uint64_t)__p);
  sub_1CD4706E8(v8);
  sub_1CB8E509C((llvm::raw_ostream *)a1, "}\n");
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

uint64_t sub_1CD4700C0(uint64_t a1, uint64_t a2, Function *a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  int v6 = (uint64_t *)(a1 + 16);
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 56) = a4;
  *(void *)(a1 + 64) = a5;
  *(void *)(a1 + 72) = a1 + 48;
  *(void *)(a1 + 4llvm::Function::viewCFG(this, 1, 0, 0) = 0;
  *(void *)(a1 + 48) = &unk_1F2601CF0;
  uint64_t v7 = a2 + 24;
  uint64_t v8 = *(void *)(a2 + 32);
  if (v8 != a2 + 24)
  {
    do
    {
      if (v8) {
        uint64_t v9 = v8 - 56;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v26 = (unint64_t *)v30;
      unsigned int v27 = (unint64_t *)v30;
      uint64_t v28 = 16;
      int v29 = 0;
      uint64_t v10 = *(void *)(v9 + 8);
      if (v10)
      {
        LODWORD(v11) = 0;
        unsigned int v12 = 16;
        uint64_t v13 = (unint64_t *)v30;
        uint64_t v14 = (unint64_t *)v30;
        do
        {
          uint64_t v15 = *(llvm::Instruction **)(v10 + 24);
          if (*((unsigned char *)v15 + 16) == 84)
          {
            uint64_t Function = llvm::Instruction::getFunction(v15);
            sub_1CB89694C((llvm::SmallPtrSetImplBase *)&v26, Function);
            uint64_t v13 = v26;
            uint64_t v14 = v27;
            unsigned int v12 = v28;
            LODWORD(v11) = HIDWORD(v28);
          }
          uint64_t v10 = *(void *)(v10 + 8);
        }
        while (v10);
      }
      else
      {
        LODWORD(v11) = 0;
        unsigned int v12 = 16;
        uint64_t v13 = (unint64_t *)v30;
        uint64_t v14 = (unint64_t *)v30;
      }
      if (v14 == v13) {
        uint64_t v11 = v11;
      }
      else {
        uint64_t v11 = v12;
      }
      uint64_t v17 = v14;
      if (v11)
      {
        uint64_t v18 = 8 * v11;
        uint64_t v17 = v14;
        while (*v17 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v17;
          v18 -= 8;
          if (!v18) {
            goto LABEL_17;
          }
        }
      }
      int v20 = &v14[v11];
      if (v17 == v20)
      {
LABEL_17:
        unint64_t v19 = 0;
      }
      else
      {
        unint64_t v19 = 0;
        uint64_t v21 = (llvm *)*v17;
LABEL_26:
        v19 += llvm::getNumOfCalls(v21, (Function *)v9, a3);
        unsigned int v22 = v17 + 1;
        while (v22 != v20)
        {
          unint64_t v23 = *v22++;
          uint64_t v21 = (llvm *)v23;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            uint64_t v17 = v22 - 1;
            goto LABEL_26;
          }
        }
      }
      if (v19 >= *(void *)(a1 + 40)) {
        *(void *)(a1 + 4llvm::Function::viewCFG(this, 1, 0, 0) = v19;
      }
      uint64_t v25 = v9;
      sub_1CBFB13A8(v6, &v25)[1] = v19;
      if (v27 != v26) {
        free(v27);
      }
      uint64_t v8 = *(void *)(v8 + 8);
    }
    while (v8 != v7);
  }
  if (!byte_1EBCC4B50) {
    sub_1CD4702B4(*(void *)(a1 + 8));
  }
  return a1;
}

void sub_1CD4702B4(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 8);
  uint64_t v2 = (void *)(a1 + 16);
  if (v1 != (void *)(a1 + 16))
  {
    do
    {
      uint64_t v3 = v1[5];
      uint64_t v4 = *(llvm::ValueHandleBase **)(v3 + 16);
      uint64_t v11 = v15;
      unsigned int v12 = v15;
      uint64_t v13 = 16;
      int v14 = 0;
      while (1)
      {
        uint64_t v5 = *(llvm::ValueHandleBase **)(v3 + 24);
        if (v4 == v5) {
          break;
        }
        while (1)
        {
          sub_1CB89694C((llvm::SmallPtrSetImplBase *)&v11, *(void *)(*((void *)v4 + 4) + 8));
          if (!v6) {
            break;
          }
          uint64_t v4 = (llvm::ValueHandleBase *)((char *)v4 + 40);
          if (v4 == v5)
          {
            if (v12 != v11) {
              free(v12);
            }
            goto LABEL_12;
          }
        }
        --*(_DWORD *)(*((void *)v4 + 4) + 40);
        uint64_t v7 = *(void *)(v3 + 24);
        sub_1CBFA9984(v4, (uint64_t *)(v7 - 40));
        *((void *)v4 + 4) = *(void *)(v7 - 8);
        sub_1CBFA986C(v3 + 16, *(void *)(v3 + 24) - 40);
        if (v12 != v11) {
          free(v12);
        }
        uint64_t v11 = v15;
        unsigned int v12 = v15;
        uint64_t v13 = 16;
        int v14 = 0;
        uint64_t v4 = *(llvm::ValueHandleBase **)(v3 + 16);
      }
LABEL_12:
      uint64_t v8 = (void *)v1[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v1[2];
          BOOL v10 = *v9 == (void)v1;
          unint64_t v1 = v9;
        }
        while (!v10);
      }
      unint64_t v1 = v9;
    }
    while (v9 != v2);
  }
}

void sub_1CD47040C()
{
}

__n128 sub_1CD470420(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F2601CF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CD47046C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2601CF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CD47049C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*(void *)(a1 + 16));
}

void sub_1CD4704A4(uint64_t a1, uint64_t a2)
{
  sub_1CD470790(&v28, ***(void ***)(a1 + 8));
  char v4 = *(unsigned char *)(a2 + 23);
  int v5 = v4;
  uint64_t v6 = v4 & 0x7F;
  if (v5 < 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v6)
  {
    uint64_t v7 = sub_1CB8E509C(*(llvm::raw_ostream **)a1, "digraph \"");
    uint64_t v8 = (std::string *)a2;
  }
  else
  {
    std::string::size_type size = *((unsigned char *)&v28.__r_.__value_.__s + 23) & 0x7F;
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v28.__r_.__value_.__l.__size_;
    }
    unsigned int v22 = *(llvm::raw_ostream **)a1;
    if (!size)
    {
      sub_1CB8E509C(v22, "digraph unnamed {\n");
      goto LABEL_13;
    }
    uint64_t v7 = sub_1CB8E509C(v22, "digraph \"");
    uint64_t v8 = &v28;
  }
  llvm::DOT::EscapeString((char *)v8, (uint64_t)&__p);
  if (v27 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  if (v27 >= 0) {
    size_t v10 = v27 & 0x7F;
  }
  else {
    size_t v10 = v26;
  }
  uint64_t v11 = llvm::raw_ostream::write(v7, p_p, v10);
  sub_1CB8E509C(v11, "\" {\n");
  if (v27 < 0) {
    operator delete(__p);
  }
LABEL_13:
  char v12 = *(unsigned char *)(a2 + 23);
  int v13 = v12;
  uint64_t v14 = v12 & 0x7F;
  if (v13 < 0) {
    uint64_t v14 = *(void *)(a2 + 8);
  }
  if (v14)
  {
    uint64_t v15 = sub_1CB8E509C(*(llvm::raw_ostream **)a1, "\tlabel=\"");
    llvm::DOT::EscapeString((char *)a2, (uint64_t)&__p);
    if (v27 >= 0) {
      unsigned int v16 = (const char *)&__p;
    }
    else {
      unsigned int v16 = (const char *)__p;
    }
    if (v27 >= 0) {
      size_t v17 = v27 & 0x7F;
    }
    else {
      size_t v17 = v26;
    }
    uint64_t v18 = v15;
    goto LABEL_23;
  }
  std::string::size_type v23 = *((unsigned char *)&v28.__r_.__value_.__s + 23) & 0x7F;
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v23 = v28.__r_.__value_.__l.__size_;
  }
  if (v23)
  {
    uint64_t v24 = sub_1CB8E509C(*(llvm::raw_ostream **)a1, "\tlabel=\"");
    llvm::DOT::EscapeString((char *)&v28, (uint64_t)&__p);
    if (v27 >= 0) {
      unsigned int v16 = (const char *)&__p;
    }
    else {
      unsigned int v16 = (const char *)__p;
    }
    if (v27 >= 0) {
      size_t v17 = v27 & 0x7F;
    }
    else {
      size_t v17 = v26;
    }
    uint64_t v18 = v24;
LABEL_23:
    unint64_t v19 = llvm::raw_ostream::write(v18, v16, v17);
    sub_1CB8E509C(v19, "\";\n");
    if (v27 < 0) {
      operator delete(__p);
    }
  }
  int v20 = *(llvm::raw_ostream **)a1;
  char v27 = 0;
  LOBYTE(__p) = 0;
  llvm::raw_ostream::write(v20, (const char *)&__p, 0);
  if (v27 < 0) {
    operator delete(__p);
  }
  sub_1CB8E509C(*(llvm::raw_ostream **)a1, "\n");
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
}

void sub_1CD4706E8(uint64_t **a1)
{
  uint64_t v1 = *(void *)(*a1[1] + 8);
  uint64_t v2 = *(void **)(v1 + 8);
  uint64_t v3 = (void *)(v1 + 16);
  if (v2 != (void *)(v1 + 16))
  {
    LODWORD(v5) = byte_1EBCC4B50;
    do
    {
      uint64_t v6 = (std::string::size_type *)v2[5];
      if (v5 || (std::string::size_type v5 = v6[1]) != 0)
      {
        sub_1CBFB1630(a1, v6);
        LODWORD(v5) = byte_1EBCC4B50;
      }
      uint64_t v7 = (void *)v2[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v2[2];
          BOOL v9 = *v8 == (void)v2;
          uint64_t v2 = v8;
        }
        while (!v9);
      }
      uint64_t v2 = v8;
    }
    while (v8 != v3);
  }
}

void sub_1CD470790(std::string *a1, uint64_t a2)
{
  if (*(char *)(a2 + 191) < 0) {
    sub_1CB8BDF7C((uint64_t)&__p, *(const void **)(a2 + 168), *(void *)(a2 + 176));
  }
  else {
    std::string __p = *(std::string *)(a2 + 168);
  }
  uint64_t v3 = std::string::insert(&__p, 0, "Call graph: ");
  *a1 = *v3;
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1CD470824(uint64_t a1, std::string::size_type a2, uint64_t a3)
{
  if (a2)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    if (byte_1EBCC49D0)
    {
      v20.__r_.__value_.__r.__words[0] = a2;
      std::string::size_type v5 = (llvm *)sub_1CBFB13A8((uint64_t *)(a3 + 16), &v20)[1];
      llvm::getHeatColor(v5, *(void *)(a3 + 40), &v20);
      double v6 = 0.0;
      if ((unint64_t)v5 > *(void *)(a3 + 40) >> 1) {
        double v6 = 1.0;
      }
      llvm::getHeatColor(v6, &v19);
      std::operator+<char>();
      uint64_t v7 = std::string::append(&v16, "ff\", style=filled, fillcolor=\"");
      std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v9 = &v20;
      }
      else {
        BOOL v9 = (std::string *)v20.__r_.__value_.__r.__words[0];
      }
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = *((unsigned char *)&v20.__r_.__value_.__s + 23) & 0x7F;
      }
      else {
        std::string::size_type size = v20.__r_.__value_.__l.__size_;
      }
      uint64_t v11 = std::string::append(&v17, (const std::string::value_type *)v9, size);
      std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v18.__r_.__value_.__r.__words[2] = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      int v13 = std::string::append(&v18, "80\"");
      std::string::size_type v14 = v13->__r_.__value_.__l.__size_;
      *(void *)a1 = v13->__r_.__value_.__r.__words[0];
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 15) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
      LOBYTE(v14) = *((unsigned char *)&v13->__r_.__value_.__s + 23);
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      int v15 = SHIBYTE(v18.__r_.__value_.__r.__words[2]);
      *(unsigned char *)(a1 + 23) = v14;
      if (v15 < 0) {
        operator delete(v18.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    *(unsigned char *)(a1 + 23) = 0;
    *(unsigned char *)a1 = 0;
  }
}

void sub_1CD4709BC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  uint64_t v10 = a4;
  uint64_t v6 = sub_1CBFB1F00(&v9);
  if (v6)
  {
    unint64_t v7 = v6;
    sub_1CD470A44(&__p, a2, v9, v10, **(void **)(a1 + 8));
    sub_1CD460084((llvm::raw_ostream **)a1, a2, v7, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1CD470A44(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v23[0] = a3;
  v23[1] = a4;
  if (!byte_1EBCC4A90) {
    goto LABEL_24;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  if (!v6) {
    goto LABEL_24;
  }
  if (*(unsigned char *)(v6 + 16))
  {
    if (*(unsigned char *)(v6 + 16) == 3 && (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) == 0) {
      goto LABEL_24;
    }
  }
  else if (*(void *)(v6 + 72) == v6 + 72 && (*(unsigned char *)(v6 + 34) & 0x80) == 0)
  {
    goto LABEL_24;
  }
  std::string::size_type v8 = *(Function **)(sub_1CBFB1F00(v23) + 8);
  if (!v8)
  {
LABEL_24:
    *((unsigned char *)&a1->__r_.__value_.__s + 23) = 0;
    a1->__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  unint64_t NumOfCalls = llvm::getNumOfCalls((llvm *)v6, v8, v9);
  double v11 = (double)NumOfCalls / (double)*(unint64_t *)(a5 + 40) * 2.0 + 1.0;
  std::to_string(&v20, NumOfCalls);
  std::string::size_type v12 = std::string::insert(&v20, 0, "label=\"");
  std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v14 = std::string::append(&v21, "\" penwidth=");
  std::string::size_type v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, v11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string v18 = std::string::append(&v22, (const std::string::value_type *)p_p, size);
  *a1 = *v18;
  v18->__r_.__value_.__r.__words[0] = 0;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
}

uint64_t sub_1CD470BF8(uint64_t a1)
{
  uint64_t v2 = a1 + 48;
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 16), 8);
  return a1;
}

void sub_1CD470C8C(uint64_t *a1, llvm::Twine *this, llvm::Twine *a3)
{
  char v7 = 0;
  LOBYTE(__p) = 0;
  sub_1CBFB2048((uint64_t)v8, a1, this, a3, (uint64_t)&__p);
  if (v7 < 0) {
    operator delete(__p);
  }
  char v3 = v9;
  if (v9 >= 0) {
    std::string::size_type v4 = v9 & 0x7F;
  }
  else {
    std::string::size_type v4 = (std::string::size_type)v8[1];
  }
  if (v4)
  {
    if (v9 >= 0) {
      std::string::size_type v5 = v8;
    }
    else {
      std::string::size_type v5 = (void **)v8[0];
    }
    llvm::DisplayGraph((std::string::value_type *)v5, v4, 0, 0);
    char v3 = v9;
  }
  if (v3 < 0) {
    operator delete(v8[0]);
  }
}

void sub_1CD470D20(_WORD *a1, long long *a2)
{
  uint64_t v4 = sub_1CB883A14((uint64_t)&qword_1EBCC4B90, 0, 0);
  qword_1EBCC4C10 = 0;
  qword_1EBCC4C18 = 0;
  qword_1EBCC4C38 = 0;
  unk_1EBCC4C40 = 0;
  byte_1EBCC4C48 = 0;
  qword_1EBCC4C30 = 0;
  unk_1EBCC4C20 = 0;
  unk_1EBCC4C28 = &unk_1F2643C20;
  qword_1EBCC4B90 = (uint64_t)&unk_1F2643FD0;
  qword_1EBCC4C50 = (uint64_t)&unk_1F2643EA0;
  qword_1EBCC4C58 = (uint64_t)&unk_1F25F6428;
  qword_1EBCC4C70 = (uint64_t)&qword_1EBCC4C58;
  llvm::cl::Option::setArgStr(v4, "callgraph-dot-filename-prefix", 0x1DuLL);
  word_1EBCC4B9A = (32 * (*a1 & 3)) | word_1EBCC4B9A & 0xFF9F;
  xmmword_1EBCC4BB0 = *a2;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCC4B90);
}

uint64_t llvm::PointerMayBeCaptured(llvm *a1, char a2, int a3, uint64_t a4, llvm::CaptureTracker *a5)
{
  v6[0] = &unk_1F2601EB8;
  v6[1] = a4;
  char v7 = a2;
  unsigned __int8 v8 = 0;
  llvm::PointerMayBeCaptured(a1, (const llvm::Value *)v6, a5);
  return v8;
}

void llvm::createCostModelAnalysisPass(llvm *this)
{
}

void llvm::CostModelPrinterPass::run()
{
}

uint64_t sub_1CD4710C0(llvm::TargetTransformInfo *a1, const llvm::Instruction *a2, int a3)
{
  if ((a3 - 2) < 2) {
    return sub_1CBFB51A8(a1, (uint64_t)a2);
  }
  if (a3 == 1) {
    return llvm::TargetTransformInfo::getInstructionLatency(a1, a2);
  }
  if (a3) {
    return 0;
  }
  return llvm::TargetTransformInfo::getInstructionThroughput(a1, a2);
}

void *sub_1CD471110(void *a1)
{
  *a1 = &unk_1F2601F78;
  uint64_t v2 = a1 + 71;
  char v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F2601FE0;
  uint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }

  return sub_1CB87DD48(a1);
}

void *sub_1CD4711F8(void *a1)
{
  *a1 = &unk_1F2601FE0;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CD47124C(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  int v12 = 0;
  uint64_t v8 = sub_1CD42FA04(a1 + 152, (void *)a1, a3, a4, a5, a6, &v12);
  if (v8) {
    return v8;
  }
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  uint64_t v9 = *(void *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v9 + 48))(v9, &v12);
    return v8;
  }
  sub_1CB920400();
  return sub_1CD4712E0(v11);
}

uint64_t sub_1CD4712E0(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

void sub_1CD4712F8(void *a1)
{
  sub_1CD471110(a1);

  JUMPOUT(0x1D25D9CE0);
}

unint64_t sub_1CD471330(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t sub_1CD47133C(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *sub_1CD47134C(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    int v3 = *((_DWORD *)result + 32);
LABEL_3:
    uint64_t v4 = &unk_1F2602030;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 148))
  {
    int v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3) {
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t sub_1CD4713D0(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void *sub_1CD4713E4(uint64_t a1, uint64_t a2)
{
  return sub_1CD42FB24((void *)(a1 + 152), a2);
}

void sub_1CD4713EC(void *a1)
{
  *a1 = &unk_1F2601FE0;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD471460(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CD471468(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1CD47147C(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1CD471490(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1CD4714A4(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void sub_1CD4714D0(long long *a1, int **a2, uint64_t a3)
{
  sub_1CB883A14((uint64_t)qword_1EBCC4D38, 0, 0);
  dword_1EBCC4DB8 = 0;
  qword_1EBCC4DC0 = (uint64_t)&unk_1F2602030;
  *(void *)&dword_1EBCC4DC8 = 0;
  qword_1EBCC4D38[0] = (uint64_t)&unk_1F2601F78;
  qword_1EBCC4DD0 = (uint64_t)&unk_1F2601FE0;
  qword_1EBCC4DD8 = (uint64_t)qword_1EBCC4D38;
  qword_1EBCC4DE0 = (uint64_t)&unk_1EBCC4DF0;
  qword_1EBCC4DE8 = 0x800000000;
  qword_1EBCC4F70 = (uint64_t)&unk_1F2602110;
  qword_1EBCC4F88 = (uint64_t)&qword_1EBCC4F70;
  sub_1CD4715D4(a1, a2, a3);

  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EBCC4D38);
}

void sub_1CD4715D4(long long *a1, int **a2, uint64_t a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCC4D38, "cost-kind", 9uLL);
  xmmword_1EBCC4D58 = *a1;
  char v6 = *a2;
  dword_1EBCC4DB8 = **a2;
  byte_1EBCC4DCC = 1;
  dword_1EBCC4DC8 = *v6;
  uint64_t v7 = *(void *)a3;
  unsigned int v8 = *(_DWORD *)(a3 + 8);

  sub_1CBFB5304(v7, v8);
}

void sub_1CD471660()
{
}

void *sub_1CD471674()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F2602110;
  return result;
}

void sub_1CD4716AC(uint64_t a1, void *a2)
{
  *a2 = &unk_1F2602110;
}

void sub_1CD4716D8(unsigned __int8 *a1, size_t a2, int a3, uint64_t a4, uint64_t a5)
{
  v11[0] = a1;
  v11[1] = a2;
  void v11[2] = a4;
  void v11[3] = a5;
  v11[4] = &unk_1F2602030;
  char v13 = 1;
  int v12 = a3;
  unint64_t v7 = sub_1CD4717CC((unint64_t)v11);
  uint64_t v8 = qword_1EBCC4DE0 + 48 * qword_1EBCC4DE8;
  long long v9 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v7;
  *(_OWORD *)(v8 + 16) = v9;
  *(void *)(v8 + 32) = &unk_1F2602050;
  char v10 = *(unsigned char *)(v7 + 44);
  *(_DWORD *)(v8 + 4llvm::Function::viewCFG(this, 1, 0, 0) = *(_DWORD *)(v7 + 40);
  *(unsigned char *)(v8 + 44) = v10;
  *(void *)(v8 + 32) = &unk_1F2602030;
  LODWORD(qword_1EBCC4DE8) = qword_1EBCC4DE8 + 1;
  llvm::cl::AddLiteralOption(qword_1EBCC4DD8, a1, a2);
}

unint64_t sub_1CD4717CC(unint64_t result)
{
  if (qword_1EBCC4DE8 >= HIDWORD(qword_1EBCC4DE8))
  {
    if (qword_1EBCC4DE0 > result || qword_1EBCC4DE0 + 48 * (unint64_t)qword_1EBCC4DE8 <= result) {
      sub_1CD471848();
    }
    sub_1CD471848();
  }
  return result;
}

void sub_1CD471848()
{
}

llvm::UndefValue *llvm::ConstantFoldLoadFromConst(llvm::Type **this, llvm::Constant *a2, llvm::Type *a3, const llvm::DataLayout *a4, const llvm::DataLayout *a5)
{
  unsigned int v8 = 64;
  uint64_t v7 = 0;
  __n128 result = llvm::ConstantFoldLoadFromConst(this, a2, (llvm::Type *)&v7, a3, a5);
  if (v8 >= 0x41)
  {
    if (v7)
    {
      char v6 = result;
      MEMORY[0x1D25D9CB0](v7, 0x1000C8000313F17);
      return v6;
    }
  }
  return result;
}

void sub_1CD4719B4(llvm::IRBuilderFolder *a1)
{
  llvm::IRBuilderFolder::~IRBuilderFolder(a1);

  JUMPOUT(0x1D25D9CE0);
}

llvm::Value *sub_1CD4719EC(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  FAdd = llvm::ConstantExpr::getFAdd(this, a3, a3, a4);

  return sub_1CBFC74F8(a1, (uint64_t)FAdd);
}

llvm::Value *sub_1CD471A30(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4, llvm::Constant *a5)
{
  Sub = llvm::ConstantExpr::getSub(this, a3, a4, a5);

  return sub_1CBFC74F8(a1, (uint64_t)Sub);
}

llvm::Value *sub_1CD471A7C(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  FSub = llvm::ConstantExpr::getFSub(this, a3, a3, a4);

  return sub_1CBFC74F8(a1, (uint64_t)FSub);
}

llvm::Value *sub_1CD471AC0(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  FMul = llvm::ConstantExpr::getFMul(this, a3, a3, a4);

  return sub_1CBFC74F8(a1, (uint64_t)FMul);
}

llvm::Value *sub_1CD471B04(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  UDiv = llvm::ConstantExpr::getUDiv(this, a3, a4, a4);

  return sub_1CBFC74F8(a1, (uint64_t)UDiv);
}

llvm::Value *sub_1CD471B4C(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  SDiv = llvm::ConstantExpr::getSDiv(this, a3, a4, a4);

  return sub_1CBFC74F8(a1, (uint64_t)SDiv);
}

llvm::Value *sub_1CD471B94(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  FDiv = llvm::ConstantExpr::getFDiv(this, a3, a3, a4);

  return sub_1CBFC74F8(a1, (uint64_t)FDiv);
}

llvm::Value *sub_1CD471BD8(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  URem = llvm::ConstantExpr::getURem(this, a3, a3, a4);

  return sub_1CBFC74F8(a1, (uint64_t)URem);
}

llvm::Value *sub_1CD471C1C(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  SRem = llvm::ConstantExpr::getSRem(this, a3, a3, a4);

  return sub_1CBFC74F8(a1, (uint64_t)SRem);
}

llvm::Value *sub_1CD471C60(uint64_t a1, llvm::ConstantExpr *a2, llvm::Constant *a3, uint64_t a4, uint64_t a5, llvm::Type *a6)
{
  FRem = llvm::ConstantExpr::getFRem(a2, a3, a3, a4, a5, a6);

  return sub_1CBFC74F8(a1, (uint64_t)FRem);
}

llvm::Value *sub_1CD471CA4(uint64_t a1, llvm::ConstantExpr *a2, llvm::Constant *a3, llvm::Constant *a4, uint64_t a5, llvm::Type *a6)
{
  AShr = llvm::ConstantExpr::getAShr(a2, a3, a4, (BOOL)a4, a5, a6);

  return sub_1CBFC74F8(a1, (uint64_t)AShr);
}

llvm::Value *sub_1CD471CEC(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  uint64_t Xor = llvm::ConstantExpr::getXor(this, a3, a3, a4);

  return sub_1CBFC74F8(a1, Xor);
}

llvm::Value *sub_1CD471D30(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, const llvm::APFloat *a4)
{
  Neg = llvm::ConstantExpr::getNeg(this, a3, a4);

  return sub_1CBFC74F8(a1, (uint64_t)Neg);
}

llvm::Value *sub_1CD471D78(uint64_t a1, llvm::ConstantExpr *this, uint64_t a3, uint64_t a4, llvm::Type *a5)
{
  uint64_t FNeg = llvm::ConstantExpr::getFNeg(this, this, a3, a4, a5);

  return sub_1CBFC74F8(a1, FNeg);
}

llvm::Value *sub_1CD471DB8(uint64_t a1, llvm::ConstantExpr *this, unsigned __int8 *a3, uint64_t a4, llvm::Type *a5)
{
  uint64_t v6 = llvm::ConstantExpr::get(this, a3, 0, 0, a5);

  return sub_1CBFC74F8(a1, v6);
}

llvm::Value *sub_1CD471E04(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3)
{
  if (*(llvm::Constant **)this == a3) {
    return this;
  }
  PointerCast = llvm::ConstantExpr::getPointerCast(this, a3, a3);

  return sub_1CBFC74F8(a1, (uint64_t)PointerCast);
}

llvm::Value *sub_1CD471E64(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3)
{
  if (*(llvm::Constant **)this == a3) {
    return this;
  }
  PointerBitCastOrAddrSpaceCast = llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast(this, a3, a3);

  return sub_1CBFC74F8(a1, (uint64_t)PointerBitCastOrAddrSpaceCast);
}

llvm::Value *sub_1CD471EC4(uint64_t a1, llvm::ConstantExpr *a2, llvm::Type ***a3)
{
  if (*(llvm::Type ****)a2 == a3) {
    return a2;
  }
  FPCast = llvm::ConstantExpr::getFPCast(a2, a3, (llvm::Type *)a3);

  return sub_1CBFC74F8(a1, (uint64_t)FPCast);
}

llvm::Value *sub_1CD471F24(uint64_t a1, llvm::detail::IEEEFloat *a2, llvm::Constant *a3)
{
  if (*(llvm::Constant **)a2 == a3) {
    return a2;
  }
  uint64_t v4 = sub_1CC56C0C0((llvm *)0x31, a2, a3, 0);

  return sub_1CBFC74F8(a1, (uint64_t)v4);
}

llvm::Value *sub_1CD471F84(uint64_t a1, llvm::detail::IEEEFloat *a2, llvm::Constant *a3)
{
  if (*(llvm::Constant **)a2 == a3) {
    return a2;
  }
  uint64_t v4 = sub_1CC56C0C0((llvm *)0x30, a2, a3, 0);

  return sub_1CBFC74F8(a1, (uint64_t)v4);
}

llvm::Value *sub_1CD471FE4(uint64_t a1, llvm::detail::IEEEFloat *a2, llvm::Constant *a3)
{
  if (*(llvm::Constant **)a2 == a3) {
    return a2;
  }
  uint64_t v4 = sub_1CC56C0C0((llvm *)0x2F, a2, a3, 0);

  return sub_1CBFC74F8(a1, (uint64_t)v4);
}

llvm::Value *sub_1CD472044(uint64_t a1, llvm::Type **this, llvm::Type ***a3)
{
  if (*this == (llvm::Type *)a3) {
    return (llvm::Value *)this;
  }
  ZExtOrBitCast = llvm::ConstantExpr::getZExtOrBitCast(this, a3, (llvm::Type *)a3);

  return sub_1CBFC74F8(a1, (uint64_t)ZExtOrBitCast);
}

llvm::Value *sub_1CD4720A4(uint64_t a1, llvm::Type **this, llvm::Type ***a3)
{
  if (*this == (llvm::Type *)a3) {
    return (llvm::Value *)this;
  }
  SExtOrBitCast = llvm::ConstantExpr::getSExtOrBitCast(this, a3, (llvm::Type *)a3);

  return sub_1CBFC74F8(a1, (uint64_t)SExtOrBitCast);
}

llvm::Value *sub_1CD472104(uint64_t a1, llvm::Type **a2, llvm::Type ***a3)
{
  if (*a2 == (llvm::Type *)a3) {
    return (llvm::Value *)a2;
  }
  TruncOrBitCast = llvm::ConstantExpr::getTruncOrBitCast(a2, a3, (llvm::Type *)a3);

  return sub_1CBFC74F8(a1, (uint64_t)TruncOrBitCast);
}

llvm::Value *sub_1CD472164(uint64_t a1, unsigned __int16 a2, llvm::Type *a3, llvm::Constant *a4, BOOL a5)
{
  Compare = llvm::ConstantExpr::getCompare((llvm::ConstantExpr *)a2, a3, a4, 0, a5);

  return sub_1CBFC74F8(a1, (uint64_t)Compare);
}

llvm::Value *sub_1CD4721B0(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Type *a4)
{
  uint64_t Element = llvm::ConstantExpr::getExtractElement(this, a3, 0, a4);

  return sub_1CBFC74F8(a1, Element);
}

llvm::Value *sub_1CD4721F8(uint64_t a1, llvm *a2, llvm *a3, int *a4, llvm::Type *a5)
{
  ShuffleVector = llvm::ConstantExpr::getShuffleVector(a2, a3, a4, a5, 0);

  return sub_1CBFC74F8(a1, (uint64_t)ShuffleVector);
}

llvm::Value *sub_1CD472248(uint64_t a1, llvm::Constant *a2, uint64_t *a3, _DWORD *a4, uint64_t a5)
{
  InsertValue = llvm::ConstantExpr::getInsertValue(a2, a3, a4, a5, 0);

  return sub_1CBFC74F8(a1, (uint64_t)InsertValue);
}

uint64_t sub_1CD472298@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = (uint64_t *)(a1 + 8);
  if (*(_UNKNOWN **)(a1 + 8) == &unk_1CFB2E344) {
    uint64_t v6 = *(void *)(a1 + 16);
  }
  else {
    uint64_t v6 = a1;
  }
  unsigned int v7 = *(unsigned __int8 *)(v6 + 28);
  if ((v7 & 7) != 1)
  {
    int v5 = (uint64_t *)(a2 + 8);
    uint64_t v8 = *(_UNKNOWN **)(a2 + 8) == &unk_1CFB2E344 ? *(void *)(a2 + 16) : a2;
    char v9 = *(unsigned char *)(v8 + 28);
    if ((v9 & 7) != 1)
    {
      BOOL v11 = (v7 & 7) == 3 && (v9 & 7) == 3;
      if (!v11 || ((v7 >> 3) & 1) == (v9 & 8) >> 3) {
        BOOL v12 = sub_1CB88A72C(a2, a1) == 0;
      }
      else {
        BOOL v12 = (v7 & 8) == 0;
      }
      if (v12) {
        uint64_t v13 = a2;
      }
      else {
        uint64_t v13 = a1;
      }
      int v5 = (uint64_t *)(v13 + 8);
    }
  }

  return sub_1CB87DDC4(a3 + 8, v5);
}

uint64_t sub_1CD472368(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)(a1 + 8);
  uint64_t v2 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  uint64_t v4 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  if (v3 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::mod(v2, v4);
  }
  return llvm::detail::IEEEFloat::mod(v2, v4);
}

uint64_t sub_1CD472388@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = (uint64_t *)(a1 + 8);
  if (*(_UNKNOWN **)(a1 + 8) == &unk_1CFB2E344) {
    uint64_t v6 = *(void *)(a1 + 16);
  }
  else {
    uint64_t v6 = a1;
  }
  unsigned int v7 = *(unsigned __int8 *)(v6 + 28);
  if ((v7 & 7) != 1)
  {
    int v5 = (uint64_t *)(a2 + 8);
    uint64_t v8 = *(_UNKNOWN **)(a2 + 8) == &unk_1CFB2E344 ? *(void *)(a2 + 16) : a2;
    char v9 = *(unsigned char *)(v8 + 28);
    if ((v9 & 7) != 1)
    {
      BOOL v11 = (v7 & 7) == 3 && (v9 & 7) == 3;
      if (!v11 || ((v7 >> 3) & 1) == (v9 & 8) >> 3)
      {
        if (sub_1CB88A72C(a1, a2)) {
          uint64_t v12 = a1;
        }
        else {
          uint64_t v12 = a2;
        }
      }
      else if ((v7 & 8) != 0)
      {
        uint64_t v12 = a2;
      }
      else
      {
        uint64_t v12 = a1;
      }
      int v5 = (uint64_t *)(v12 + 8);
    }
  }

  return sub_1CB87DDC4(a3 + 8, v5);
}

uint64_t sub_1CD47245C(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)(a1 + 8);
  uint64_t v2 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  uint64_t v4 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  if (v3 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::remainder(v2, v4);
  }
  return llvm::detail::IEEEFloat::remainder((long long **)v2, v4);
}

uint64_t *sub_1CD47247C@<X0>(uint64_t *__return_ptr a1@<X8>, void **a2@<X0>, int a3@<W1>, int a4@<W2>)
{
  unsigned int v7 = (const llvm::detail::IEEEFloat *)(a2 + 1);
  if (a2[1] == &unk_1CFB2E344) {
    llvm::detail::scalbn((uint64_t)(a2 + 1), &v10);
  }
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v11, v7);
  llvm::detail::scalbn(&v11, a3, a4, &v13);
  uint64_t v8 = *(void **)v7;
  std::string v17 = v13;
  std::string v18 = v14;
  int v19 = v15;
  char v20 = v16 & 0xF;
  uint64_t v13 = &unk_1CFB2E394;
  __n128 result = (uint64_t *)llvm::APFloat::Storage::Storage((uint64_t)(a1 + 1), (uint64_t)&v17, v8);
  if ((v17[2] - 64) <= 0xFFFFFF7F)
  {
    __n128 result = v18;
    if (v18) {
      __n128 result = (uint64_t *)MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
    }
  }
  if ((v13[2] - 64) <= 0xFFFFFF7F)
  {
    __n128 result = v14;
    if (v14) {
      __n128 result = (uint64_t *)MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
    }
  }
  if ((*(_DWORD *)(v11 + 8) - 64) <= 0xFFFFFF7F)
  {
    __n128 result = v12;
    if (v12) {
      return (uint64_t *)MEMORY[0x1D25D9CB0](v12, 0x1000C8000313F17);
    }
  }
  return result;
}

llvm::Value *sub_1CD4725DC(uint64_t a1, llvm::Type ***this)
{
  uint64_t v4 = (llvm::Type *)this;
  if ((this[1] & 0xFE) == 0x12) {
    uint64_t v4 = *this[2];
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v4);
  sub_1CBFC7388(a1, PrimitiveSizeInBits, (llvm::APInt *)&v9);
  IntegerValue = llvm::Constant::getIntegerValue(this, (llvm::Type *)&v9, v6);
  if (v10 >= 0x41 && v9) {
    MEMORY[0x1D25D9CB0](v9, 0x1000C8000313F17);
  }
  return IntegerValue;
}

uint64_t sub_1CD47267C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void **)(result + 8);
  uint64_t v3 = result;
  if (v2 == &unk_1CFB2E344) {
    uint64_t v3 = *(void *)(result + 16);
  }
  int v4 = (*(unsigned __int8 *)(v3 + 28) >> 3) & 1;
  if (*(_UNKNOWN **)(a2 + 8) == &unk_1CFB2E344) {
    uint64_t v5 = *(void *)(a2 + 16);
  }
  else {
    uint64_t v5 = a2;
  }
  if (v4 != (*(unsigned char *)(v5 + 28) & 8) >> 3)
  {
    if (v2 == &unk_1CFB2E344) {
      return llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)(result + 8));
    }
    else {
      *(unsigned char *)(result + 28) ^= 8u;
    }
  }
  return result;
}

void llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::moveTopLevelCycleToNewParent(uint64_t a1, uint64_t a2, char **a3)
{
  if (*a3) {
    uint64_t v6 = (uint64_t **)(*a3 + 32);
  }
  else {
    uint64_t v6 = (uint64_t **)(a1 + 56);
  }
  uint64_t v8 = *v6;
  unsigned int v7 = v6[1];
  if (*v6 != v7)
  {
    while ((char **)*v8 != a3)
    {
      if (++v8 == v7)
      {
        uint64_t v8 = v6[1];
        break;
      }
    }
  }
  uint64_t v9 = *(uint64_t **)(a2 + 40);
  if ((unint64_t)v9 >= *(void *)(a2 + 48))
  {
    uint64_t v11 = sub_1CBFC92C4((char **)(a2 + 32), v8);
  }
  else
  {
    uint64_t v10 = *v8;
    *uint64_t v8 = 0;
    *uint64_t v9 = v10;
    uint64_t v11 = (char *)(v9 + 1);
  }
  *(void *)(a2 + 4llvm::Function::viewCFG(this, 1, 0, 0) = v11;
  uint64_t v12 = v6[1];
  uint64_t v13 = *(v12 - 1);
  *(v12 - 1) = 0;
  uint64_t v14 = *v8;
  *uint64_t v8 = v13;
  if (v14)
  {
    uint64_t v22 = sub_1CD4730C0(v14);
    MEMORY[0x1D25D9CE0](v22, 0x10A0C40B2354FA7);
  }
  sub_1CBFC9218((uint64_t)v6, v6[1] - 1);
  *a3 = (char *)a2;
  sub_1CBFC93DC(a2 + 56, *(void *)(a2 + 64), a3[7], a3[8], (a3[8] - a3[7]) >> 3);
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(unsigned int *)(a1 + 48);
  std::string v17 = (void *)(v15 + 16 * v16);
  if (*(_DWORD *)(a1 + 40))
  {
    if (v16)
    {
      uint64_t v18 = 16 * v16;
      int v19 = *(void **)(a1 + 32);
      while ((*v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v19 += 2;
        v18 -= 16;
        if (!v18) {
          goto LABEL_18;
        }
      }
    }
    else
    {
      int v19 = *(void **)(a1 + 32);
    }
  }
  else
  {
LABEL_18:
    int v19 = (void *)(v15 + 16 * v16);
  }
  char v20 = (void *)(v15 + 16 * v16);
LABEL_20:
  while (v19 != v20)
  {
    if ((char **)v19[1] == a3) {
      v19[1] = a2;
    }
    std::string v21 = v19 + 2;
    int v19 = v17;
    if (v21 != v17)
    {
      int v19 = v21;
      while ((*v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v19 += 2;
        if (v19 == v17)
        {
          int v19 = v17;
          goto LABEL_20;
        }
      }
    }
  }
}

void *llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::compute(void *a1, uint64_t a2)
{
  v9[8] = *MEMORY[0x1E4F143B8];
  v5[1] = 0;
  void v5[2] = 0;
  v5[0] = a1;
  int v6 = 0;
  unsigned int v7 = v9;
  uint64_t v8 = 0x800000000;
  llvm::GenericSSAContext<llvm::Function>::setFunction(a1, a2);
  uint64_t EntryBlock = llvm::GenericSSAContext<llvm::Function>::getEntryBlock(a2);
  sub_1CBFC7748((uint64_t)v5, EntryBlock);
  return sub_1CD473028(v5);
}

void *llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::getTopLevelParentCycle(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = a2;
  uint64_t v5 = a1 + 32;
  uint64_t v4 = *(void *)(a1 + 32);
  v11[0] = 0;
  if (sub_1CD40EA84(v4, *(_DWORD *)(v5 + 16), a2, v11)) {
    BOOL v6 = v11[0] == *(void *)v5 + 16 * *(unsigned int *)(v5 + 16);
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6) {
    return *(void **)(v11[0] + 8);
  }
  v11[0] = 0;
  int v9 = sub_1CD40EA84(*(void *)(a1 + 8), *(_DWORD *)(a1 + 24), a2, v11);
  unsigned int v7 = 0;
  if (v9 && v11[0] != *(void *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    uint64_t v10 = *(void **)(v11[0] + 8);
    do
    {
      unsigned int v7 = v10;
      uint64_t v10 = (void *)*v10;
    }
    while (v10);
    uint64_t v12 = v7;
    sub_1CD4729F8((uint64_t)v11, v5, &v13, &v12);
  }
  return v7;
}

uint64_t sub_1CD4729F8(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v12 = 0;
  uint64_t result = sub_1CD40EA84(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  int v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD467E98(a2, a3, v12);
    int v9 = (void *)result;
    *(void *)uint64_t result = *a3;
    *(void *)(result + 8) = *a4;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 16) = v10;
  return result;
}

void sub_1CD472A94(void *a1, uint64_t a2)
{
  sub_1CD4737AC((uint64_t)&v11, a2);
  uint64_t v7 = 0;
  std::string __p = 0;
  memset(v6, 0, sizeof(v6));
  uint64_t v3 = (char *)v6 + 8;
  uint64_t v4 = (char *)v6 + 8;
  uint64_t v5 = 8;
  int v9 = 0;
  uint64_t v10 = 0;
  sub_1CD47362C(a1, (uint64_t)&v11, (uint64_t)&v3);
  if (__p)
  {
    int v9 = __p;
    operator delete(__p);
  }
  if (v4 != v3) {
    free(v4);
  }
  if (v13)
  {
    uint64_t v14 = v13;
    operator delete(v13);
  }
  if (v12 != v11) {
    free(v12);
  }
}

void llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::print(uint64_t a1, llvm::raw_ostream *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(uint64_t **)(a1 + 56);
  uint64_t v3 = *(uint64_t **)(a1 + 64);
  if (v2 == v3) {
    return;
  }
  uint64_t v5 = (const void **)&v28;
  BOOL v6 = (const llvm::SmallPtrSetImplBase *)&v36;
  uint64_t v7 = (const void **)&v22;
  do
  {
    sub_1CD472A94(&v32, *v2);
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v26, v5, (const llvm::SmallPtrSetImplBase *)&v32);
    std::string __p = 0;
    int v30 = 0;
    uint64_t v31 = 0;
    sub_1CBF340A8(&__p, v34, v35, 0xAAAAAAAAAAAAAAABLL * ((v35 - (unsigned char *)v34) >> 3));
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v20, v7, v6);
    std::string::size_type v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    sub_1CBF340A8(&v23, v38, v39, 0xAAAAAAAAAAAAAAABLL * ((v39 - (unsigned char *)v38) >> 3));
    while (1)
    {
      if (v30 - (unsigned char *)__p != v24 - v23) {
        goto LABEL_23;
      }
      if (__p == v30) {
        break;
      }
      uint64_t v8 = v23 + 8;
      int v9 = (char *)__p + 8;
      while (1)
      {
        uint64_t v10 = v9 - 8;
        if (*((void *)v9 - 1) != *((void *)v8 - 1)) {
          break;
        }
        int v11 = v8[8];
        if (v9[8]) {
          BOOL v12 = v11 == 0;
        }
        else {
          BOOL v12 = 1;
        }
        if (v12)
        {
          if ((v9[8] == 0) == (v11 != 0)) {
            break;
          }
        }
        else if (*(void *)v9 != *(void *)v8)
        {
          break;
        }
        v8 += 24;
        v9 += 24;
        if (v10 + 24 == v30) {
          goto LABEL_26;
        }
      }
LABEL_23:
      std::string v17 = v7;
      uint64_t v18 = v6;
      uint64_t v14 = v5;
      uint64_t v15 = *((void *)v30 - 3);
      if (*(_DWORD *)(v15 + 80))
      {
        unsigned int v13 = 0;
        do
        {
          sub_1CB8E509C(a2, "    ");
          ++v13;
        }
        while (v13 < *(_DWORD *)(v15 + 80));
      }
      uint64_t v40 = (void (**)(void **))&unk_1F26023C0;
      v41[0] = v15;
      v41[1] = a1;
      uint64_t v42 = (void **)&v40;
      sub_1CD473BE8(v41, a2);
      uint64_t v16 = (unsigned char *)*((void *)a2 + 4);
      if ((unint64_t)v16 >= *((void *)a2 + 3))
      {
        llvm::raw_ostream::write(a2, 10);
      }
      else
      {
        *((void *)a2 + 4) = v16 + 1;
        unsigned char *v16 = 10;
      }
      uint64_t v5 = v14;
      uint64_t v7 = v17;
      BOOL v6 = v18;
      if (v42 == (void **)&v40)
      {
        v40[4]((void **)&v40);
      }
      else if (v42)
      {
        (*((void (**)(void **))*v42 + 5))(v42);
      }
      sub_1CD47384C((char *)&v26);
    }
LABEL_26:
    if (v23)
    {
      uint64_t v24 = v23;
      operator delete(v23);
    }
    if (v21 != v20) {
      free(v21);
    }
    if (__p)
    {
      int v30 = (char *)__p;
      operator delete(__p);
    }
    if (v27 != v26) {
      free(v27);
    }
    if (v38)
    {
      int v39 = v38;
      operator delete(v38);
    }
    if (v37 != v36) {
      free(v37);
    }
    if (v34)
    {
      uint64_t v35 = v34;
      operator delete(v34);
    }
    if (v33 != v32) {
      free(v33);
    }
    ++v2;
  }
  while (v2 != v3);
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::print@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  a3[2] = a2;
  a3[3] = a3;
  *a3 = &unk_1F26023C0;
  a3[1] = result;
  return result;
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::printEntries@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  a3[2] = a2;
  a3[3] = a3;
  *a3 = &unk_1F2602378;
  a3[1] = result;
  return result;
}

void llvm::CycleAnalysis::run(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4llvm::Function::viewCFG(this, 1, 0, 0) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::compute();
}

void *llvm::CycleInfoPrinterPass::CycleInfoPrinterPass(void *this, llvm::raw_ostream *a2)
{
  *this = a2;
  return this;
}

void llvm::CycleInfoPrinterPass::run(llvm::raw_ostream **a1, llvm::Value *a2)
{
  uint64_t v3 = sub_1CB8E509C(*a1, "CycleInfo for function: ");
  Name = llvm::Value::getName(a2);
  size_t v6 = v4;
  uint64_t v7 = (void *)*((void *)v3 + 4);
  if (v4 <= *((void *)v3 + 3) - (void)v7)
  {
    if (v4)
    {
      memcpy(v7, Name, v4);
      *((void *)v3 + 4) += v6;
    }
  }
  else
  {
    llvm::raw_ostream::write(v3, Name, v4);
  }
  sub_1CB8E509C(v3, "\n");
  llvm::AnalysisManager<llvm::Function>::getResultImpl();
}

void *sub_1CD473028(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2 != a1 + 6) {
    free(v2);
  }
  MEMORY[0x1D25D9CD0](a1[1], 8);
  return a1;
}

uint64_t sub_1CD47306C(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 56);
  sub_1CBFC9174(&v3);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 32), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 8), 8);
  return a1;
}

uint64_t sub_1CD4730C0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  uint64_t v5 = (void **)(a1 + 32);
  sub_1CBFC9174(&v5);
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3 != (void *)(a1 + 24)) {
    free(v3);
  }
  return a1;
}

void sub_1CD473120(uint64_t a1, uint64_t a2)
{
  int v3 = 0;
  void v22[4] = *MEMORY[0x1E4F143B8];
  char v20 = v22;
  uint64_t v21 = 0x800000000;
  std::string v17 = v19;
  int v16 = 0;
  v19[0] = a2;
  uint64_t v18 = 0x800000001;
  uint64_t v4 = a1 + 8;
  unsigned int v5 = 1;
  do
  {
    uint64_t v6 = *((void *)v17 + v5 - 1);
    uint64_t v15 = v6;
    if (sub_1CD40EA84(*(void *)(a1 + 8), *(_DWORD *)(a1 + 24), v6, v14))
    {
      int v7 = v18;
      if (v18 == *((_DWORD *)v20 + v21 - 1))
      {
        v14[0] = 0;
        if (sub_1CD40EA84(*(void *)(a1 + 8), *(_DWORD *)(a1 + 24), v6, v14)) {
          uint64_t v13 = v14[0];
        }
        else {
          uint64_t v13 = *(void *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24);
        }
        *(_DWORD *)(v13 + 12) = v3;
        LODWORD(v21) = v21 - 1;
        int v7 = v18;
      }
      unsigned int v5 = v7 - 1;
      LODWORD(v18) = v5;
    }
    else
    {
      if (v21 >= HIDWORD(v21)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v20 + v21) = v18;
      LODWORD(v21) = v21 + 1;
      uint64_t v8 = *(void *)(v6 + 40);
      if (v8 == v6 + 40
        || ((uint64_t v9 = v8 - 24, v8) ? (v10 = (unsigned __int8 *)(v8 - 24)) : (v10 = 0), v10[16] - 29 > 0xA))
      {
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        int NumSuccessors = 0;
      }
      else
      {
        int NumSuccessors = llvm::Instruction::getNumSuccessors((llvm::Instruction *)v10);
      }
      sub_1CBFC9784((uint64_t)&v17, (uint64_t)v17 + 8 * v18, (llvm::Instruction *)v10, 0, v9, NumSuccessors);
      int v16 = ++v3;
      sub_1CD473590((uint64_t)v14, v4, &v15, &v16);
      unint64_t v12 = *(unsigned int *)(a1 + 40);
      if (v12 >= *(unsigned int *)(a1 + 44)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 32) + 8 * v12) = v6;
      ++*(_DWORD *)(a1 + 40);
      unsigned int v5 = v18;
    }
  }
  while (v5);
  if (v17 != v19) {
    free(v17);
  }
  if (v20 != v22) {
    free(v20);
  }
}

void sub_1CD4733A4(uint64_t a1)
{
  sub_1CD472A94(&v20, a1);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v14, &v16, (const llvm::SmallPtrSetImplBase *)&v20);
  std::string __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  sub_1CBF340A8(&__p, v22, v23, 0xAAAAAAAAAAAAAAABLL * ((v23 - (unsigned char *)v22) >> 3));
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v8, &v10, (const llvm::SmallPtrSetImplBase *)&v24);
  int v11 = 0;
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  sub_1CBF340A8(&v11, v26, v27, 0xAAAAAAAAAAAAAAABLL * ((v27 - (unsigned char *)v26) >> 3));
  while (1)
  {
    if (v18 - (unsigned char *)__p != v12 - v11) {
      goto LABEL_17;
    }
    if (__p == v18) {
      break;
    }
    int v1 = v11 + 8;
    uint64_t v2 = (char *)__p + 8;
    while (1)
    {
      int v3 = v2 - 8;
      if (*((void *)v2 - 1) != *((void *)v1 - 1)) {
        break;
      }
      int v4 = v1[8];
      if (v2[8]) {
        BOOL v5 = v4 == 0;
      }
      else {
        BOOL v5 = 1;
      }
      if (v5)
      {
        if ((v2[8] == 0) == (v4 != 0)) {
          break;
        }
      }
      else if (*(void *)v2 != *(void *)v1)
      {
        break;
      }
      v1 += 24;
      v2 += 24;
      if (v3 + 24 == v18) {
        goto LABEL_19;
      }
    }
LABEL_17:
    uint64_t v6 = (_DWORD *)*((void *)v18 - 3);
    if (*(void *)v6) {
      int v7 = *(_DWORD *)(*(void *)v6 + 80) + 1;
    }
    else {
      int v7 = 1;
    }
    v6[20] = v7;
    sub_1CD47384C((char *)&v14);
  }
LABEL_19:
  if (v11)
  {
    unint64_t v12 = v11;
    operator delete(v11);
  }
  if (v9 != v8) {
    free(v9);
  }
  if (__p)
  {
    uint64_t v18 = (char *)__p;
    operator delete(__p);
  }
  if (v15 != v14) {
    free(v15);
  }
  if (v26)
  {
    char v27 = v26;
    operator delete(v26);
  }
  if (v25 != v24) {
    free(v25);
  }
  if (v22)
  {
    std::string::size_type v23 = v22;
    operator delete(v22);
  }
  if (v21 != v20) {
    free(v21);
  }
}

uint64_t sub_1CD473590(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  unint64_t v12 = 0;
  uint64_t result = sub_1CD40EA84(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  uint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD467E98(a2, a3, v12);
    uint64_t v9 = (void *)result;
    *(void *)uint64_t result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    *(_DWORD *)(result + 12) = 0;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 16) = v10;
  return result;
}

void sub_1CD47362C(void *a1, uint64_t a2, uint64_t a3)
{
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v11, &v13, 8, (uint64_t *)a2);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)(a2 + 96);
  uint64_t v15 = *(void *)(a2 + 112);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 96) = 0;
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v6, &v8, 8, (uint64_t *)a3);
  *(_OWORD *)std::string __p = *(_OWORD *)(a3 + 96);
  uint64_t v10 = *(void *)(a3 + 112);
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 96) = 0;
  sub_1CD473714(a1, (uint64_t)&v11, (uint64_t)&v6);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v7 != v6) {
    free(v7);
  }
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  if (v12 != v11) {
    free(v12);
  }
}

void *sub_1CD473714(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)a1, a1 + 4, 8, (uint64_t *)a2);
  v6[12] = 0;
  v6[13] = 0;
  v6[14] = 0;
  *((_OWORD *)v6 + 6) = *(_OWORD *)(a2 + 96);
  v6[14] = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)(v6 + 15), a1 + 19, 8, (uint64_t *)a3);
  a1[27] = 0;
  a1[28] = 0;
  a1[29] = 0;
  *(_OWORD *)(a1 + 27) = *(_OWORD *)(a3 + 96);
  a1[29] = *(void *)(a3 + 112);
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0;
  return a1;
}

uint64_t sub_1CD4737AC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 96) = 0;
  int v4 = (void **)(a1 + 96);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  sub_1CB89694C((llvm::SmallPtrSetImplBase *)a1, a2);
  *(void *)&long long v8 = a2;
  BYTE8(v8) = 0;
  LOBYTE(v9) = 0;
  unint64_t v5 = *(void *)(a1 + 104);
  if (v5 >= *(void *)(a1 + 112))
  {
    uint64_t v6 = sub_1CBF56DE8(v4, (uint64_t)&v8);
  }
  else
  {
    *(_OWORD *)unint64_t v5 = v8;
    *(void *)(v5 + 16) = v9;
    uint64_t v6 = (char *)(v5 + 24);
  }
  *(void *)(a1 + 104) = v6;
  return a1;
}

char *sub_1CD47384C(char *this)
{
  int v1 = (llvm::SmallPtrSetImplBase *)this;
  uint64_t v2 = (void **)(this + 96);
  uint64_t v3 = *((void *)this + 13);
  while (2)
  {
    uint64_t v4 = *(void *)(v3 - 24);
    if (!*(unsigned char *)(v3 - 8))
    {
      *(void *)(v3 - 16) = *(void *)(v4 + 32);
      *(unsigned char *)(v3 - 8) = 1;
    }
    while (1)
    {
      unint64_t v5 = *(uint64_t **)(v3 - 16);
      if (v5 == *(uint64_t **)(v4 + 40)) {
        break;
      }
      *(void *)(v3 - 16) = v5 + 1;
      uint64_t v6 = *v5;
      this = (char *)sub_1CB89694C(v1, *v5);
      if (v7)
      {
        *(void *)&long long v10 = v6;
        BYTE8(v1llvm::Function::viewCFG(this, 1, 0, 0) = 0;
        LOBYTE(v11) = 0;
        unint64_t v9 = *((void *)v1 + 13);
        if (v9 >= *((void *)v1 + 14))
        {
          this = sub_1CBF56DE8(v2, (uint64_t)&v10);
        }
        else
        {
          *(_OWORD *)unint64_t v9 = v10;
          *(void *)(v9 + 16) = v11;
          this = (char *)(v9 + 24);
        }
        *((void *)v1 + 13) = this;
        return this;
      }
    }
    uint64_t v8 = *((void *)v1 + 12);
    uint64_t v3 = *((void *)v1 + 13) - 24;
    *((void *)v1 + 13) = v3;
    if (v8 != v3) {
      continue;
    }
    break;
  }
  return this;
}

void sub_1CD473938()
{
}

__n128 sub_1CD47394C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F2602378;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CD473998(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2602378;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *sub_1CD4739C8(uint64_t a1, llvm::raw_ostream *a2)
{
  return sub_1CD4739D0((void *)(a1 + 8), a2);
}

void *sub_1CD4739D0(void *result, llvm::raw_ostream *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unsigned int *)(*result + 16);
  if (v2)
  {
    uint64_t v4 = *(uint64_t **)(*result + 8);
    uint64_t v5 = 8 * v2;
    char v6 = 1;
    do
    {
      uint64_t v7 = *v4;
      if ((v6 & 1) == 0)
      {
        uint64_t v8 = (unsigned char *)*((void *)this + 4);
        if ((unint64_t)v8 >= *((void *)this + 3))
        {
          llvm::raw_ostream::write(this, 32);
        }
        else
        {
          *((void *)this + 4) = v8 + 1;
          *uint64_t v8 = 32;
        }
      }
      llvm::GenericSSAContext<llvm::Function>::print(v7, v9);
      if (!v10) {
        sub_1CB920400();
      }
      (*(void (**)(void *, llvm::raw_ostream *))(*v10 + 48))(v10, this);
      __n128 result = v10;
      if (v10 == v9)
      {
        __n128 result = (void *)(*(uint64_t (**)(void *))(v9[0] + 32))(v9);
      }
      else if (v10)
      {
        __n128 result = (void *)(*(uint64_t (**)(void))(*v10 + 40))();
      }
      char v6 = 0;
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

void sub_1CD473B50()
{
}

__n128 sub_1CD473B64(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F26023C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CD473BB0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F26023C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void **sub_1CD473BE0(uint64_t a1, llvm::raw_ostream *a2)
{
  return sub_1CD473BE8((uint64_t *)(a1 + 8), a2);
}

void **sub_1CD473BE8(uint64_t *a1, llvm::raw_ostream *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  uint64_t v5 = sub_1CB8E509C(a2, "depth=");
  char v6 = llvm::raw_ostream::operator<<(v5, *(unsigned int *)(v4 + 80));
  uint64_t v7 = sub_1CB8E509C(v6, ": entries(");
  v19[1] = a1[1];
  char v20 = (void **)&v18;
  uint64_t v18 = (uint64_t (**)(void **))&unk_1F2602378;
  v19[0] = v4;
  sub_1CD4739D0(v19, v7);
  uint64_t v8 = (unsigned char *)*((void *)v7 + 4);
  if ((unint64_t)v8 >= *((void *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 41);
  }
  else
  {
    *((void *)v7 + 4) = v8 + 1;
    *uint64_t v8 = 41;
  }
  __n128 result = v20;
  if (v20 == (void **)&v18)
  {
    __n128 result = (void **)v18[4]((void **)&v18);
  }
  else if (v20)
  {
    __n128 result = (void **)(*((uint64_t (**)(void))*v20 + 5))();
  }
  long long v10 = *(uint64_t **)(v4 + 56);
  for (uint64_t i = *(uint64_t **)(v4 + 64); v10 != i; ++v10)
  {
    uint64_t v12 = *v10;
    uint64_t v13 = *(void *)(v4 + 8);
    uint64_t v14 = *(unsigned int *)(v4 + 16);
    if (v14)
    {
      uint64_t v15 = 8 * v14;
      int v16 = *(void **)(v4 + 8);
      while (*v16 != v12)
      {
        ++v16;
        v15 -= 8;
        if (!v15)
        {
          int v16 = (void *)(v13 + 8 * v14);
          break;
        }
      }
    }
    else
    {
      int v16 = *(void **)(v4 + 8);
    }
    if (v14 == ((uint64_t)v16 - v13) >> 3)
    {
      std::string v17 = (unsigned char *)*((void *)a2 + 4);
      if ((unint64_t)v17 >= *((void *)a2 + 3))
      {
        llvm::raw_ostream::write(a2, 32);
      }
      else
      {
        *((void *)a2 + 4) = v17 + 1;
        *std::string v17 = 32;
      }
      llvm::GenericSSAContext<llvm::Function>::print(v12, &v18);
      if (!v20) {
        sub_1CB920400();
      }
      (*((void (**)(void **, llvm::raw_ostream *))*v20 + 6))(v20, a2);
      __n128 result = v20;
      if (v20 == (void **)&v18)
      {
        __n128 result = (void **)v18[4]((void **)&v18);
      }
      else if (v20)
      {
        __n128 result = (void **)(*((uint64_t (**)(void))*v20 + 5))();
      }
    }
  }
  return result;
}

BOOL llvm::DGNode<llvm::DDGNode,llvm::DDGEdge>::findEdgesTo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a1 + 24);
  for (uint64_t i = *(void **)(a1 + 32); v3 != i; ++v3)
  {
    if (*(void *)*v3 == a2)
    {
      unint64_t v5 = *(unsigned int *)(a3 + 8);
      if (v5 >= *(unsigned int *)(a3 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a3 + 8 * v5) = *v3;
      ++*(_DWORD *)(a3 + 8);
    }
  }
  return *(_DWORD *)(a3 + 8) != 0;
}

uint64_t sub_1CD473F30(uint64_t a1, void *a2)
{
  unint64_t v9 = 0;
  uint64_t v4 = sub_1CD420258((uint64_t *)a1, a2, &v9);
  if (v4)
  {
    *unint64_t v9 = -8192;
    *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    char v6 = *(char **)(a1 + 24);
    unint64_t v5 = *(char **)(a1 + 32);
    if (v6 != v5)
    {
      while (*(void *)v6 != *a2)
      {
        v6 += 8;
        if (v6 == v5)
        {
          char v6 = *(char **)(a1 + 32);
          break;
        }
      }
    }
    int64_t v7 = v5 - (v6 + 8);
    if (v5 != v6 + 8) {
      memmove(v6, v6 + 8, v5 - (v6 + 8));
    }
    *(void *)(a1 + 32) = &v6[v7];
  }
  return v4;
}

uint64_t llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::addNode(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = 8 * v2;
    uint64_t v4 = *(void **)a1;
    while (*v4 != a2)
    {
      ++v4;
      v3 -= 8;
      if (!v3) {
        goto LABEL_5;
      }
    }
    return 0;
  }
  else
  {
LABEL_5:
    if (v2 >= *(_DWORD *)(a1 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a1 + 8 * v2) = a2;
    ++*(_DWORD *)(a1 + 8);
    return 1;
  }
}

BOOL llvm::DDGNode::collectInstructions(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  v17[8] = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)(a1 + 56) - 1) > 1)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 72);
    if (v10)
    {
      uint64_t v11 = *(uint64_t **)(a1 + 64);
      uint64_t v12 = 8 * v10;
      do
      {
        uint64_t v13 = *v11;
        __src = v17;
        uint64_t v16 = 0x800000000;
        llvm::DDGNode::collectInstructions(v13, a2, &__src);
        sub_1CD4755DC(a3, *(void *)a3 + 8 * a3[2], (uint64_t *)__src, (uint64_t *)__src + v16);
        if (__src != v17) {
          free(__src);
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    uint64_t v5 = *(unsigned int *)(a1 + 72);
    if (v5)
    {
      char v6 = *(void **)(a1 + 64);
      uint64_t v7 = 8 * v5;
      do
      {
        uint64_t v8 = *v6;
        if ((*(unsigned int (**)(void, void))a2)(*(void *)(a2 + 8), *v6))
        {
          unint64_t v9 = a3[2];
          if (v9 >= a3[3]) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a3 + 8 * v9) = v8;
          ++a3[2];
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
  }
  return a3[2] != 0;
}

void sub_1CD47442C()
{
}

void llvm::DataDependenceGraph::DataDependenceGraph(llvm::DataDependenceGraph *this, llvm::Loop *a2, llvm::LoopInfo *a3, llvm::DependenceInfo *a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  *((void *)this + 11) = (char *)this + 104;
  *((void *)this + 12) = 0xA00000000;
  uint64_t v8 = (llvm::Value **)*((void *)a2 + 4);
  unint64_t v9 = *v8;
  Name = llvm::Value::getName(*((llvm::Value **)*v8 + 7));
  __int16 v35 = 773;
  unsigned int v32 = Name;
  uint64_t v33 = v11;
  v34[0] = ".";
  LOWORD(v28) = 261;
  v27[0] = (uint64_t)llvm::Value::getName(v9);
  v27[1] = v12;
  sub_1CB8F1E58((uint64_t *)&v32, v27, (uint64_t)v19);
  llvm::Twine::str((llvm::Twine *)v19, __p);
  *(void *)this = &unk_1F2602598;
  uint64_t v13 = (_OWORD *)((char *)this + 8);
  if (SHIBYTE(v31) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v13, __p[0], (unint64_t)__p[1]);
    int v14 = SHIBYTE(v31);
    long long v16 = *((_OWORD *)a4 + 1);
    long long v15 = *((_OWORD *)a4 + 2);
    *((_OWORD *)this + 2) = *(_OWORD *)a4;
    *((_OWORD *)this + 3) = v16;
    *((_OWORD *)this + 4) = v15;
    *((void *)this + 1llvm::Function::viewCFG(this, 1, 0, 0) = 0;
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *uint64_t v13 = *(_OWORD *)__p;
    *((void *)this + 3) = v31;
    long long v18 = *((_OWORD *)a4 + 1);
    long long v17 = *((_OWORD *)a4 + 2);
    *((_OWORD *)this + 2) = *(_OWORD *)a4;
    *((_OWORD *)this + 3) = v18;
    *((_OWORD *)this + 4) = v17;
    *((void *)this + 1llvm::Function::viewCFG(this, 1, 0, 0) = 0;
  }
  *(void *)this = &unk_1F2602448;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((_DWORD *)this + 5llvm::Function::viewCFG(this, 1, 0, 0) = 0;
  sub_1CBFCBAB0((uint64_t)v27, (uint64_t)a2);
  llvm::LoopBlocksDFS::perform((llvm::LoopBlocksDFS *)v27, a3);
  unsigned int v32 = (char *)v34;
  uint64_t v33 = 0x800000000;
  sub_1CD475A94((uint64_t)&v32, (uint64_t)v34, v29, v29, v28, v28);
  v19[1] = this;
  void v19[2] = a4;
  uint64_t v19[3] = &v32;
  uint64_t v19[4] = 0;
  v19[5] = 0;
  int v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  int v26 = 0;
  v19[0] = &unk_1F2602468;
  sub_1CD47442C();
}

void llvm::DataDependenceGraph::~DataDependenceGraph(llvm::DataDependenceGraph *this)
{
  *(void *)this = &unk_1F2602448;
  uint64_t v2 = *((unsigned int *)this + 24);
  if (v2)
  {
    uint64_t v3 = (uint64_t *)*((void *)this + 11);
    uint64_t v4 = &v3[v2];
    do
    {
      uint64_t v5 = *v3;
      char v6 = *(void **)(*v3 + 32);
      uint64_t v7 = *(void **)(*v3 + 40);
      if (v6 == v7) {
        goto LABEL_8;
      }
      do
      {
        if (*v6) {
          MEMORY[0x1D25D9CE0](*v6, 0x1020C403A5D3213);
        }
        ++v6;
      }
      while (v6 != v7);
      if (v5) {
LABEL_8:
      }
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      ++v3;
    }
    while (v3 != v4);
  }
  MEMORY[0x1D25D9CD0](*((void *)this + 23), 8);
  *(void *)this = &unk_1F2602598;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  uint64_t v8 = (char *)*((void *)this + 11);
  if (v8 != (char *)this + 104) {
    free(v8);
  }
}

{
  uint64_t vars8;

  llvm::DataDependenceGraph::~DataDependenceGraph(this);

  JUMPOUT(0x1D25D9CE0);
}

void llvm::DataDependenceGraph::addNode(llvm::DataDependenceGraph *this, llvm::DDGNode *a2)
{
}

uint64_t llvm::DataDependenceGraph::getPiBlock(llvm::DataDependenceGraph *this, const llvm::DDGNode *a2)
{
  uint64_t v4 = (uint64_t *)((char *)this + 184);
  uint64_t v10 = 0;
  uint64_t v11 = a2;
  if (sub_1CD3C8538((uint64_t *)this + 23, &v11, &v10))
  {
    uint64_t v5 = v10;
    uint64_t v6 = *((void *)this + 23);
    uint64_t v7 = *((unsigned int *)this + 50);
  }
  else
  {
    uint64_t v6 = *((void *)this + 23);
    uint64_t v7 = *((unsigned int *)this + 50);
    uint64_t v5 = v6 + 16 * v7;
  }
  if (v5 == v6 + 16 * v7) {
    return 0;
  }
  uint64_t v10 = 0;
  uint64_t v11 = a2;
  if (sub_1CD3C8538(v4, &v11, &v10)) {
    uint64_t v9 = v10;
  }
  else {
    uint64_t v9 = *((void *)this + 23) + 16 * *((unsigned int *)this + 50);
  }
  return *(void *)(v9 + 8);
}

llvm::raw_ostream *llvm::operator<<(llvm::raw_ostream *a1, llvm::DataDependenceGraph *this)
{
  uint64_t v3 = *((unsigned int *)this + 24);
  if (v3)
  {
    uint64_t v5 = (const llvm::DDGNode **)*((void *)this + 11);
    uint64_t v6 = 8 * v3;
    do
    {
      uint64_t v7 = *v5;
      if (!llvm::DataDependenceGraph::getPiBlock(this, *v5))
      {
        uint64_t v8 = llvm::operator<<(a1, (unint64_t)v7);
        sub_1CB8E509C(v8, "\n");
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  sub_1CB8E509C(a1, "\n");
  return a1;
}

BOOL llvm::DDGBuilder::areNodesMergeable(llvm::DDGBuilder *this, const llvm::DDGNode *a2, const llvm::DDGNode *a3)
{
  return (*((_DWORD *)a2 + 14) - 1) <= 1
      && (*((_DWORD *)a3 + 14) - 1) <= 1
      && *(void *)(*(void *)(*((void *)a2 + 8) + 8 * *((unsigned int *)a2 + 18) - 8) + 40) == *(void *)(**((void **)a3 + 8) + 40);
}

void llvm::DDGBuilder::mergeNodes(llvm::DDGBuilder *this, llvm::DDGNode *a2, uint64_t **a3)
{
  uint64_t v5 = *((void *)a2 + 8);
  uint64_t v6 = (void *)((char *)a2 + 8);
  uint64_t v7 = *(void *)(*((void *)a2 + 5) - 8);
  uint64_t v8 = *((unsigned int *)a2 + 18);
  uint64_t v9 = *((unsigned int *)a3 + 18);
  if (v9 == 1 && v8 == 0) {
    int v11 = 1;
  }
  else {
    int v11 = 2;
  }
  *((_DWORD *)a2 + 14) = v11;
  sub_1CD456F08((unsigned int *)a2 + 16, v5 + 8 * v8, a3[8], &a3[8][v9]);
  uint64_t v12 = a3[4];
  uint64_t v13 = a3[5];
  while (v12 != v13)
  {
    uint64_t v14 = *v12++;
    uint64_t v15 = v14;
    sub_1CBFC9CB4(v6, &v15);
  }
  uint64_t v15 = v7;
  sub_1CD473F30((uint64_t)v6, &v15);
  (*(void (**)(llvm::DDGBuilder *, uint64_t))(*(void *)this + 72))(this, v7);
  llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::removeNode();
}

uint64_t llvm::DDGBuilder::shouldSimplify(llvm::DDGBuilder *this)
{
  return byte_1EBCC5028;
}

uint64_t llvm::DDGBuilder::shouldCreatePiBlocks(llvm::DDGBuilder *this)
{
  return byte_1EBCC50E8;
}

void llvm::DDGAnalysis::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(**(void **)(a2 + 32) + 56);
  uint64_t v5 = *a4;
  int8x16_t v6 = vextq_s8(*(int8x16_t *)(a4 + 3), *(int8x16_t *)(a4 + 3), 8uLL);
  uint64_t v7 = v4;
  operator new();
}

void llvm::DDGAnalysisPrinterPass::run(llvm::raw_ostream **a1, uint64_t a2)
{
  uint64_t v3 = sub_1CB8E509C(*a1, "'DDG' for loop '");
  Name = llvm::Value::getName(**(llvm::Value ***)(a2 + 32));
  size_t v6 = v4;
  uint64_t v7 = (void *)*((void *)v3 + 4);
  if (v4 <= *((void *)v3 + 3) - (void)v7)
  {
    if (v4)
    {
      memcpy(v7, Name, v4);
      *((void *)v3 + 4) += v6;
    }
  }
  else
  {
    llvm::raw_ostream::write(v3, Name, v4);
  }
  sub_1CB8E509C(v3, "':\n");
  llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::getResultImpl();
}

void sub_1CD474D44(void *a1)
{
  sub_1CD47511C(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD474D7C()
{
}

void sub_1CD474DFC()
{
}

void sub_1CD474EA0()
{
}

void sub_1CD474F00()
{
}

void sub_1CD474F70()
{
}

void sub_1CD474FE0()
{
}

uint64_t sub_1CD475050(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 56) == 3) {
    uint64_t v2 = a2;
  }
  else {
    uint64_t v2 = 0;
  }
  return v2 + 64;
}

void sub_1CD475064()
{
}

uint64_t sub_1CD47507C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
}

void *sub_1CD4750A4(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  size_t v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
  MEMORY[0x1D25D9CD0](a1[1], 8);
  return a1;
}

uint64_t sub_1CD47510C()
{
  return 1;
}

uint64_t sub_1CD475114()
{
  return 1;
}

void *sub_1CD47511C(void *a1)
{
  *a1 = &unk_1F2602510;
  MEMORY[0x1D25D9CD0](a1[10], 8);
  MEMORY[0x1D25D9CD0](a1[7], 8);
  MEMORY[0x1D25D9CD0](a1[4], 8);
  return a1;
}

uint64_t sub_1CD475180(uint64_t a1)
{
  *(void *)a1 = &unk_1F2602598;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1CD4751D0(uint64_t a1)
{
  *(void *)a1 = &unk_1F2602598;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD475240(uint64_t a1)
{
  return a1;
}

void sub_1CD47526C(uint64_t a1)
{
  sub_1CD456CB4((void *)(a1 + 8));

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD4752B8(char **a1, _WORD *a2, _WORD *a3, __n128 *a4)
{
  sub_1CB883A14((uint64_t)&qword_1EBCC5068, 0, 0);
  byte_1EBCC50E8 = 0;
  qword_1EBCC50F0 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBCC50F8 = 0;
  qword_1EBCC5068 = (uint64_t)&unk_1F26440A0;
  qword_1EBCC5100 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCC5108 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCC5120 = (uint64_t)&qword_1EBCC5108;
  sub_1CD4753B8(a1, a2, a3, a4);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCC5068);
}

__n128 sub_1CD4753B8(char **a1, _WORD *a2, _WORD *a3, __n128 *a4)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCC5068, "ddg-pi-blocks", 0xDuLL);
  uint64_t v8 = *a1;
  byte_1EBCC50E8 = **a1;
  byte_1EBCC50F9 = 1;
  byte_1EBCC50F8 = *v8;
  word_1EBCC5072 = word_1EBCC5072 & 0xFF9F | (32 * (*a2 & 3));
  word_1EBCC5072 = word_1EBCC5072 & 0xFFF8 | *a3 & 7;
  __n128 result = *a4;
  xmmword_1EBCC5088 = (__int128)*a4;
  return result;
}

uint64_t sub_1CD475450(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v10 = 0;
  uint64_t result = sub_1CD420258((uint64_t *)a2, a3, &v10);
  uint64_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD4754DC(a2, a3, v10);
    uint64_t v7 = (void *)result;
    *(void *)uint64_t result = *a3;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a2 + 8 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 16) = v8;
  return result;
}

void *sub_1CD4754DC(uint64_t a1, void *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD4203A4(a1, v6);
  char v8 = 0;
  sub_1CD420258((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

_DWORD *sub_1CD47558C(_DWORD *result)
{
  if (*((void *)result + 1))
  {
    uint64_t v1 = result[4];
    if (v1 > 4 * result[2] && v1 >= 0x41)
    {
      return sub_1CD42616C(result);
    }
    else
    {
      if (v1)
      {
        uint64_t v2 = *(void **)result;
        uint64_t v3 = 8 * v1;
        do
        {
          *v2++ = -4096;
          v3 -= 8;
        }
        while (v3);
      }
      *((void *)result + 1) = 0;
    }
  }
  return result;
}

unsigned char *sub_1CD4755DC(unsigned int *a1, uint64_t a2, uint64_t *__src, uint64_t *a4)
{
  int v5 = __src;
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = (a2 - *(void *)a1) >> 3;
  uint64_t v9 = a1[2];
  if (*(void *)a1 + 8 * v9 == a2)
  {
    sub_1CBFCBB74(a1, __src, a4);
    return (unsigned char *)(*(void *)a1 + 8 * v8);
  }
  else
  {
    unint64_t v10 = a4 - __src;
    if (v9 + v10 > a1[3]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v11 = (unsigned char *)(v7 + 8 * v8);
    uint64_t v12 = (unsigned char *)(v7 + 8 * v9);
    unint64_t v13 = (v12 - v11) >> 3;
    if (v13 >= v10)
    {
      sub_1CD4570C8((uint64_t)a1, &v12[-8 * v10], (char *)(v7 + 8 * v9));
      if (&v12[-8 * v10] != v11) {
        memmove(&v11[8 * v10], v11, &v12[-8 * v10] - v11);
      }
      if (v5 != a4) {
        memmove(v11, v5, (char *)a4 - (char *)v5);
      }
    }
    else
    {
      unsigned int v14 = v9 + ((unint64_t)((char *)a4 - (char *)__src) >> 3);
      a1[2] = v14;
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 8 * v14 - 8 * v13), v11, v12 - v11);
        uint64_t v15 = v11;
        do
        {
          uint64_t v16 = *v5++;
          *v15++ = v16;
          --v13;
        }
        while (v13);
      }
      if (v5 != a4) {
        memcpy(v12, v5, (char *)a4 - (char *)v5);
      }
    }
  }
  return v11;
}

void *sub_1CD47573C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 80);
  if (v3) {
    uint64_t v4 = v3 - 24;
  }
  else {
    uint64_t v4 = 0;
  }
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 8llvm::Function::viewCFG(this, 1, 0, 0) = 0u;
  *(void *)(a2 + 96) = 0;
  sub_1CD4757A8((int *)a2, v4);

  return sub_1CD47588C((void *)a2);
}

_OWORD *sub_1CD4757A8(int *a1, uint64_t a2)
{
  uint64_t v14 = a2;
  int v3 = *a1 + 1;
  *a1 = v3;
  *((_DWORD *)sub_1CBFCBC00((uint64_t)(a1 + 2), &v14) + 2) = v3;
  uint64_t v4 = (void *)*((void *)a1 + 5);
  if ((unint64_t)v4 >= *((void *)a1 + 6))
  {
    int v5 = sub_1CBC13470((void **)a1 + 4, &v14);
  }
  else
  {
    void *v4 = v14;
    int v5 = v4 + 1;
  }
  *((void *)a1 + 5) = v5;
  uint64_t v6 = *(void *)(v14 + 40);
  if (v6 == v14 + 40)
  {
    uint64_t v7 = 0;
  }
  else
  {
    if (v6) {
      uint64_t v7 = v6 - 24;
    }
    else {
      uint64_t v7 = 0;
    }
    if (*(unsigned __int8 *)(v7 + 16) - 29 >= 0xB) {
      uint64_t v7 = 0;
    }
  }
  int v8 = *a1;
  *(void *)&long long v12 = v14;
  *((void *)&v12 + 1) = v7;
  *(void *)&long long v13 = 0;
  DWORD2(v13) = v8;
  uint64_t v9 = (_OWORD *)*((void *)a1 + 11);
  if ((unint64_t)v9 >= *((void *)a1 + 12))
  {
    uint64_t result = sub_1CBF833E4((void **)a1 + 10, &v12);
  }
  else
  {
    long long v10 = v13;
    *uint64_t v9 = v12;
    v9[1] = v10;
    uint64_t result = v9 + 2;
  }
  *((void *)a1 + 11) = result;
  return result;
}

void *sub_1CD47588C(void *result)
{
  uint64_t v1 = (void **)(result + 7);
  result[8] = result[7];
  if (result[10] != result[11])
  {
    uint64_t v2 = result;
    uint64_t v3 = (uint64_t)(result + 1);
    while (1)
    {
      sub_1CD4759A0((uint64_t)v2);
      uint64_t v9 = 0;
      uint64_t v5 = v2[10];
      uint64_t v4 = v2[11];
      uint64_t v9 = *(void *)(v4 - 32);
      unsigned int v6 = *(_DWORD *)(v4 - 8);
      v2[11] = v4 - 32;
      if (v5 != v4 - 32 && *(_DWORD *)(v4 - 40) > v6) {
        *(_DWORD *)(v4 - 4llvm::Function::viewCFG(this, 1, 0, 0) = v6;
      }
      uint64_t result = sub_1CBFCBC00(v3, &v9);
      if (v6 == *((_DWORD *)result + 2)) {
        break;
      }
      if (v2[10] == v2[11]) {
        return result;
      }
    }
    uint64_t result = (void *)v2[8];
    do
    {
      uint64_t v7 = (void *)(v2[5] - 8);
      if ((unint64_t)result >= v2[9])
      {
        int v8 = sub_1CBC13470(v1, v7);
      }
      else
      {
        *uint64_t result = *v7;
        int v8 = result + 1;
      }
      v2[8] = v8;
      v2[5] -= 8;
      *((_DWORD *)sub_1CBFCBC00(v3, v8 - 1) + 2) = -1;
      uint64_t result = (void *)v2[8];
    }
    while (*(result - 1) != v9);
  }
  return result;
}

uint64_t sub_1CD4759A0(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  while (1)
  {
    uint64_t v3 = *(void *)(a1 + 88);
    uint64_t v4 = *(void *)(v3 - 32);
    uint64_t v5 = *(void *)(v4 + 40);
    if (v5 == v4 + 40 || (v5 ? (unsigned int v6 = (unsigned __int8 *)(v5 - 24)) : (unsigned int v6 = 0), v6[16] - 29 > 0xA)) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = llvm::Instruction::getNumSuccessors((llvm::Instruction *)v6);
    }
    if (*(_DWORD *)(v3 - 16) == result) {
      break;
    }
    uint64_t v8 = *(void *)(a1 + 88);
    uint64_t v9 = *(llvm::Instruction **)(v8 - 24);
    unsigned int v10 = *(_DWORD *)(v8 - 16);
    *(_DWORD *)(v8 - 16) = v10 + 1;
    uint64_t Successor = llvm::Instruction::getSuccessor(v9, v10);
    uint64_t v14 = Successor;
    uint64_t v15 = 0;
    if (!sub_1CBFA3AF4(v2, &v14, &v15) || v15 == *(void *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
    {
      sub_1CD4757A8((int *)a1, Successor);
    }
    else
    {
      unsigned int v12 = *(_DWORD *)(v15 + 8);
      uint64_t v13 = *(void *)(a1 + 88);
      if (*(_DWORD *)(v13 - 8) > v12) {
        *(_DWORD *)(v13 - 8) = v12;
      }
    }
  }
  return result;
}

uint64_t sub_1CD475A94(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a4;
  uint64_t v8 = *(void *)result;
  uint64_t v9 = *(unsigned int *)(result + 8);
  if (*(void *)result + 8 * v9 == a2)
  {
    return sub_1CD475C08(result, a3, a4, a5, a6);
  }
  else
  {
    uint64_t v10 = (a2 - v8) >> 3;
    unint64_t v11 = (a4 - a6) >> 3;
    if (v9 + v11 > *(unsigned int *)(result + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unsigned int v12 = (char *)(v8 + 8 * v10);
    uint64_t v13 = (char *)(v8 + 8 * v9);
    unint64_t v14 = (v13 - v12) >> 3;
    if (v14 >= v11)
    {
      uint64_t result = sub_1CD4570C8(result, &v13[-8 * v11], (char *)(v8 + 8 * v9));
      if (&v13[-8 * v11] != v12) {
        uint64_t result = (uint64_t)memmove(&v12[8 * v11], v12, &v13[-8 * v11] - v12);
      }
      while (v7 != a6)
      {
        uint64_t v18 = *(void *)(v7 - 8);
        v7 -= 8;
        *(void *)unsigned int v12 = v18;
        v12 += 8;
      }
    }
    else
    {
      unsigned int v15 = v9 + ((unint64_t)(a4 - a6) >> 3);
      *(_DWORD *)(result + 8) = v15;
      if (v10 != v9)
      {
        uint64_t result = (uint64_t)memcpy((void *)(v8 + 8 * v15 - 8 * v14), v12, v13 - v12);
        do
        {
          uint64_t v16 = *(void *)(v7 - 8);
          v7 -= 8;
          *(void *)unsigned int v12 = v16;
          v12 += 8;
          --v14;
        }
        while (v14);
      }
      while (v7 != a6)
      {
        uint64_t v17 = *(void *)(v7 - 8);
        v7 -= 8;
        *(void *)uint64_t v13 = v17;
        v13 += 8;
      }
    }
  }
  return result;
}

uint64_t sub_1CD475C08(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a3;
  uint64_t v6 = *(unsigned int *)(result + 8);
  if (v6 + ((a3 - a5) >> 3) > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a3 != a5)
  {
    uint64_t v7 = (void *)(*(void *)result + 8 * v6);
    do
    {
      uint64_t v8 = *(void *)(v5 - 8);
      v5 -= 8;
      *v7++ = v8;
    }
    while (v5 != a5);
  }
  *(_DWORD *)(result + 8) = v6 + ((unint64_t)(a3 - a5) >> 3);
  return result;
}

uint64_t sub_1CD475C8C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  unsigned int v12 = 0;
  uint64_t result = sub_1CD3C8538((uint64_t *)a2, a3, &v12);
  uint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD475D24(a2, a3, v12);
    uint64_t v9 = (void *)result;
    *(void *)uint64_t result = *a3;
    *(void *)(result + 8) = *a4;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 16) = v10;
  return result;
}

void *sub_1CD475D24(uint64_t a1, void *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD475DD4(a1, v6);
  uint64_t v8 = 0;
  sub_1CD3C8538((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CD475DD4(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD475EA0(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD475EA0(uint64_t result, void *a2, void *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v10 = 0;
      uint64_t result = sub_1CD3C8538((uint64_t *)v5, a2, &v10);
      uint64_t v9 = v10;
      *uint64_t v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

void llvm::DDGDotPrinterPass::run()
{
}

void llvm::DOTGraphTraits<llvm::DataDependenceGraph const*>::getSimpleNodeLabel(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v22[0] = 0;
  v22[1] = 0;
  uint64_t v23 = 0;
  int v14 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  uint64_t v21 = v22;
  int v20 = 0;
  uint64_t v13 = &unk_1F2646F30;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int v4 = *(_DWORD *)(a1 + 56);
  if ((v4 - 1) > 1)
  {
    if (v4 == 3)
    {
      uint64_t v9 = sub_1CB8E509C((llvm::raw_ostream *)&v13, "pi-block\nwith\n");
      sub_1CD098D14(v9, *(unsigned int *)(a1 + 72), 0, 0, 0);
      uint64_t v10 = " nodes\n";
      uint64_t v11 = v9;
    }
    else
    {
      uint64_t v10 = "root\n";
      uint64_t v11 = (llvm::raw_ostream *)&v13;
    }
    sub_1CB8E509C(v11, v10);
  }
  else
  {
    uint64_t v5 = *(unsigned int *)(a1 + 72);
    if (v5)
    {
      uint64_t v6 = *(llvm::Value ***)(a1 + 64);
      uint64_t v7 = 8 * v5;
      do
      {
        uint64_t v8 = *v6++;
        llvm::Value::print(v8, (llvm::raw_ostream *)&v13, 0);
        sub_1CB8E509C((llvm::raw_ostream *)&v13, "\n");
        v7 -= 8;
      }
      while (v7);
    }
  }
  if (*((char *)v21 + 23) < 0)
  {
    sub_1CB8BDF7C(a2, *v21, (unint64_t)v21[1]);
  }
  else
  {
    long long v12 = *(_OWORD *)v21;
    *(void *)(a2 + 16) = v21[2];
    *(_OWORD *)a2 = v12;
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v13);
  if (SHIBYTE(v23) < 0) {
    operator delete(v22[0]);
  }
}

void llvm::DOTGraphTraits<llvm::DataDependenceGraph const*>::getVerboseNodeLabel(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v32[0] = 0;
  v32[1] = 0;
  uint64_t v33 = 0;
  int v24 = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  uint64_t v31 = v32;
  int v30 = 0;
  uint64_t v23 = &unk_1F2646F30;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v6 = sub_1CB8E509C((llvm::raw_ostream *)&v23, "<kind:");
  uint64_t v7 = llvm::operator<<(v6, *(_DWORD *)(a1 + 56));
  sub_1CB8E509C(v7, ">\n");
  int v8 = *(_DWORD *)(a1 + 56);
  if ((v8 - 1) > 1)
  {
    if (v8 == 3)
    {
      sub_1CB8E509C((llvm::raw_ostream *)&v23, "--- start of nodes in pi-block ---\n");
      uint64_t v13 = *(unsigned int *)(a1 + 72);
      if (v13)
      {
        uint64_t v14 = 0;
        uint64_t v15 = *(void *)(a1 + 64);
        uint64_t v16 = 8 * v13;
        uint64_t v17 = "--- end of nodes in pi-block ---\n";
        do
        {
          llvm::DOTGraphTraits<llvm::DataDependenceGraph const*>::getVerboseNodeLabel(__p, *(void *)(v15 + 8 * v14), a2);
          if (v22 >= 0) {
            char v18 = __p;
          }
          else {
            char v18 = (void **)__p[0];
          }
          if (v22 >= 0) {
            size_t v19 = v22 & 0x7F;
          }
          else {
            size_t v19 = (size_t)__p[1];
          }
          llvm::raw_ostream::write((llvm::raw_ostream *)&v23, (const char *)v18, v19);
          if (v22 < 0) {
            operator delete(__p[0]);
          }
          if (v14 + 1 != *(_DWORD *)(a1 + 72)) {
            sub_1CB8E509C((llvm::raw_ostream *)&v23, "\n");
          }
          ++v14;
          v16 -= 8;
        }
        while (v16);
      }
      else
      {
        uint64_t v17 = "--- end of nodes in pi-block ---\n";
      }
    }
    else
    {
      uint64_t v17 = "root\n";
    }
    sub_1CB8E509C((llvm::raw_ostream *)&v23, v17);
  }
  else
  {
    uint64_t v9 = *(unsigned int *)(a1 + 72);
    if (v9)
    {
      uint64_t v10 = *(llvm::Value ***)(a1 + 64);
      uint64_t v11 = 8 * v9;
      do
      {
        long long v12 = *v10++;
        llvm::Value::print(v12, (llvm::raw_ostream *)&v23, 0);
        sub_1CB8E509C((llvm::raw_ostream *)&v23, "\n");
        v11 -= 8;
      }
      while (v11);
    }
  }
  if (*((char *)v31 + 23) < 0)
  {
    sub_1CB8BDF7C(a3, *v31, (unint64_t)v31[1]);
  }
  else
  {
    long long v20 = *(_OWORD *)v31;
    *(void *)(a3 + 16) = v31[2];
    *(_OWORD *)a3 = v20;
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v23);
  if (SHIBYTE(v33) < 0) {
    operator delete(v32[0]);
  }
}

void llvm::DOTGraphTraits<llvm::DataDependenceGraph const*>::getSimpleEdgeAttributes(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v17 = 0;
  int v8 = 0;
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v15 = v16;
  int v14 = 0;
  uint64_t v7 = &unk_1F2646F30;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  int v4 = sub_1CB8E509C((llvm::raw_ostream *)&v7, "label=\"[");
  uint64_t v5 = llvm::operator<<(v4, v3);
  sub_1CB8E509C(v5, "]\"");
  if (*((char *)v15 + 23) < 0)
  {
    sub_1CB8BDF7C(a2, *v15, (unint64_t)v15[1]);
  }
  else
  {
    long long v6 = *(_OWORD *)v15;
    *(void *)(a2 + 16) = v15[2];
    *(_OWORD *)a2 = v6;
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v7);
  if (SHIBYTE(v17) < 0) {
    operator delete(v16[0]);
  }
}

void llvm::DOTGraphTraits<llvm::DataDependenceGraph const*>::getVerboseEdgeAttributes(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v24 = 0;
  int v15 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  char v22 = v23;
  int v21 = 0;
  int v14 = &unk_1F2646F30;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  unsigned int v8 = *(_DWORD *)(a2 + 8);
  sub_1CB8E509C((llvm::raw_ostream *)&v14, "label=\"[");
  if (v8 == 2)
  {
    llvm::DependenceGraphInfo<llvm::DDGNode>::getDependenceString(a3, a1, *(void *)a2, (uint64_t)__p);
    if (v13 >= 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    if (v13 >= 0) {
      size_t v10 = v13 & 0x7F;
    }
    else {
      size_t v10 = (size_t)__p[1];
    }
    llvm::raw_ostream::write((llvm::raw_ostream *)&v14, (const char *)v9, v10);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    llvm::operator<<((llvm::raw_ostream *)&v14, v8);
  }
  sub_1CB8E509C((llvm::raw_ostream *)&v14, "]\"");
  if (*((char *)v22 + 23) < 0)
  {
    sub_1CB8BDF7C(a4, *v22, (unint64_t)v22[1]);
  }
  else
  {
    long long v11 = *(_OWORD *)v22;
    *(void *)(a4 + 16) = v22[2];
    *(_OWORD *)a4 = v11;
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v14);
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[0]);
  }
}

llvm::raw_ostream *sub_1CD476724(llvm::raw_ostream *a1, uint64_t a2, char a3, llvm::Twine *this)
{
  v8[0] = a1;
  v8[1] = a2;
  char v10 = a3;
  char v9 = 0;
  llvm::Twine::str(this, __p);
  sub_1CD47679C((uint64_t)v8, (uint64_t)__p);
  sub_1CD4769DC((uint64_t)v8);
  sub_1CB8E509C(a1, "}\n");
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1CD47679C(uint64_t a1, uint64_t a2)
{
  sub_1CD476A68(&v28, **(void **)(a1 + 8));
  char v4 = *(unsigned char *)(a2 + 23);
  int v5 = v4;
  uint64_t v6 = v4 & 0x7F;
  if (v5 < 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v6)
  {
    char v7 = sub_1CB8E509C(*(llvm::raw_ostream **)a1, "digraph \"");
    unsigned int v8 = (std::string *)a2;
  }
  else
  {
    std::string::size_type size = *((unsigned char *)&v28.__r_.__value_.__s + 23) & 0x7F;
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v28.__r_.__value_.__l.__size_;
    }
    char v22 = *(llvm::raw_ostream **)a1;
    if (!size)
    {
      sub_1CB8E509C(v22, "digraph unnamed {\n");
      goto LABEL_13;
    }
    char v7 = sub_1CB8E509C(v22, "digraph \"");
    unsigned int v8 = &v28;
  }
  llvm::DOT::EscapeString((char *)v8, (uint64_t)&__p);
  if (v27 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  if (v27 >= 0) {
    size_t v10 = v27 & 0x7F;
  }
  else {
    size_t v10 = v26;
  }
  long long v11 = llvm::raw_ostream::write(v7, p_p, v10);
  sub_1CB8E509C(v11, "\" {\n");
  if (v27 < 0) {
    operator delete(__p);
  }
LABEL_13:
  char v12 = *(unsigned char *)(a2 + 23);
  int v13 = v12;
  uint64_t v14 = v12 & 0x7F;
  if (v13 < 0) {
    uint64_t v14 = *(void *)(a2 + 8);
  }
  if (v14)
  {
    int v15 = sub_1CB8E509C(*(llvm::raw_ostream **)a1, "\tlabel=\"");
    llvm::DOT::EscapeString((char *)a2, (uint64_t)&__p);
    if (v27 >= 0) {
      uint64_t v16 = (const char *)&__p;
    }
    else {
      uint64_t v16 = (const char *)__p;
    }
    if (v27 >= 0) {
      size_t v17 = v27 & 0x7F;
    }
    else {
      size_t v17 = v26;
    }
    uint64_t v18 = v15;
    goto LABEL_23;
  }
  std::string::size_type v23 = *((unsigned char *)&v28.__r_.__value_.__s + 23) & 0x7F;
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v23 = v28.__r_.__value_.__l.__size_;
  }
  if (v23)
  {
    uint64_t v24 = sub_1CB8E509C(*(llvm::raw_ostream **)a1, "\tlabel=\"");
    llvm::DOT::EscapeString((char *)&v28, (uint64_t)&__p);
    if (v27 >= 0) {
      uint64_t v16 = (const char *)&__p;
    }
    else {
      uint64_t v16 = (const char *)__p;
    }
    if (v27 >= 0) {
      size_t v17 = v27 & 0x7F;
    }
    else {
      size_t v17 = v26;
    }
    uint64_t v18 = v24;
LABEL_23:
    char v19 = llvm::raw_ostream::write(v18, v16, v17);
    sub_1CB8E509C(v19, "\";\n");
    if (v27 < 0) {
      operator delete(__p);
    }
  }
  uint64_t v20 = *(llvm::raw_ostream **)a1;
  char v27 = 0;
  LOBYTE(__p) = 0;
  llvm::raw_ostream::write(v20, (const char *)&__p, 0);
  if (v27 < 0) {
    operator delete(__p);
  }
  sub_1CB8E509C(*(llvm::raw_ostream **)a1, "\n");
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
}

void sub_1CD4769DC(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 8);
  uint64_t v2 = *(unsigned int *)(v1 + 96);
  if (v2)
  {
    char v4 = *(const llvm::DDGNode ***)(v1 + 88);
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4;
      if ((!*(unsigned char *)(a1 + 17) || *((_DWORD *)v6 + 14) != 4)
        && !llvm::DataDependenceGraph::getPiBlock(**(llvm::DataDependenceGraph ***)(a1 + 8), *v4))
      {
        sub_1CBFCC0AC(a1, (unint64_t)v6);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
}

void sub_1CD476A68(std::string *a1, uint64_t a2)
{
  uint64_t v5 = *(const std::string::value_type **)(a2 + 8);
  uint64_t v3 = a2 + 8;
  char v4 = v5;
  char v6 = *(unsigned char *)(v3 + 23);
  int v7 = v6;
  if (v6 >= 0) {
    char v4 = (const std::string::value_type *)v3;
  }
  std::string::size_type v8 = v6 & 0x7F;
  if (v7 >= 0) {
    std::string::size_type v9 = v8;
  }
  else {
    std::string::size_type v9 = *(void *)(v3 + 8);
  }
  std::string::__init(&v13, v4, v9);
  size_t v10 = std::string::insert(&v13, 0, "DDG for '");
  std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  char v12 = std::string::append(&v14, "'");
  *a1 = *v12;
  v12->__r_.__value_.__r.__words[0] = 0;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_1CD476B30(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v7 = a4(*a3);
  if (v7)
  {
    unint64_t v8 = v7;
    uint64_t v9 = *a3;
    if (*(unsigned char *)(a1 + 17)) {
      llvm::DOTGraphTraits<llvm::DataDependenceGraph const*>::getSimpleEdgeAttributes(v9, (uint64_t)__p);
    }
    else {
      llvm::DOTGraphTraits<llvm::DataDependenceGraph const*>::getVerboseEdgeAttributes(a2, v9, **(void **)(a1 + 8), (uint64_t)__p);
    }
    sub_1CD460084((llvm::raw_ostream **)a1, a2, v8, (uint64_t)__p);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
}

uint64_t sub_1CD476BCC(uint64_t a1)
{
  return *(void *)a1;
}

void sub_1CD476BD4(const char **a1, _WORD *a2, __n128 *a3)
{
  sub_1CB883A14((uint64_t)&qword_1EBCC51E8, 0, 0);
  qword_1EBCC5268 = 0;
  unk_1EBCC5270 = 0;
  qword_1EBCC5290 = 0;
  unk_1EBCC5298 = 0;
  byte_1EBCC52A0 = 0;
  qword_1EBCC5288 = 0;
  qword_1EBCC5278 = 0;
  unk_1EBCC5280 = &unk_1F2643C20;
  qword_1EBCC51E8 = (uint64_t)&unk_1F2643FD0;
  qword_1EBCC52A8 = (uint64_t)&unk_1F2643EA0;
  qword_1EBCC52B0 = (uint64_t)&unk_1F25F6428;
  qword_1EBCC52C8 = (uint64_t)&qword_1EBCC52B0;
  sub_1CD476CD0(a1, a2, a3);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCC51E8);
}

__n128 sub_1CD476CD0(const char **a1, _WORD *a2, __n128 *a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCC51E8, "dot-ddg-filename-prefix", 0x17uLL);
  sub_1CD476D48(a1, (uint64_t)&qword_1EBCC51E8);
  word_1EBCC51F2 = (32 * (*a2 & 3)) | word_1EBCC51F2 & 0xFF9F;
  __n128 result = *a3;
  xmmword_1EBCC5208 = (__int128)*a3;
  return result;
}

void sub_1CD476D48(const char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  std::string::size_type v4 = strlen(*a1);
  std::string::__init(&__str, v3, v4);
  std::string::operator=((std::string *)(a2 + 128), &__str);
  *(unsigned char *)(a2 + 184) = 1;
  std::string::operator=((std::string *)(a2 + 160), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

BOOL llvm::DependenceGraphInfo<llvm::DDGNode>::getDependencies(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v24[8] = *MEMORY[0x1E4F143B8];
  char v22 = v24;
  uint64_t v23 = 0x800000000;
  char v19 = v21;
  uint64_t v20 = 0x800000000;
  uint64_t v16 = sub_1CD476FFC;
  size_t v17 = &v18;
  llvm::DDGNode::collectInstructions(a2, (uint64_t)&v16, (unsigned int *)&v22);
  uint64_t v16 = sub_1CD476FFC;
  size_t v17 = &v18;
  llvm::DDGNode::collectInstructions(a3, (uint64_t)&v16, (unsigned int *)&v19);
  if (v23)
  {
    uint64_t v7 = (llvm::Instruction **)v22;
    unint64_t v8 = (llvm::Instruction **)((char *)v22 + 8 * v23);
    uint64_t v9 = a1 + 32;
    do
    {
      if (v20)
      {
        size_t v10 = *v7;
        char v11 = (llvm::Instruction **)v19;
        uint64_t v12 = 8 * v20;
        do
        {
          llvm::DependenceInfo::depends(v9, v10, *v11, 1, &v16);
          if (v16)
          {
            sub_1CD476F74(a4, (uint64_t *)&v16);
            std::string v13 = v16;
            uint64_t v16 = 0;
            if (v13) {
              (*(void (**)(uint64_t (*)(int, llvm::Instruction *)))(*(void *)v13 + 8))(v13);
            }
          }
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
      ++v7;
    }
    while (v7 != v8);
  }
  int v14 = *(_DWORD *)(a4 + 8);
  if (v19 != v21) {
    free(v19);
  }
  if (v22 != v24) {
    free(v22);
  }
  return v14 != 0;
}

uint64_t sub_1CD476F74(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  unint64_t v3 = *(void *)result;
  if (v2 >= *(_DWORD *)(result + 12))
  {
    unint64_t v6 = v3 + 8 * v2;
    if (v3 > (unint64_t)a2 || v6 <= (unint64_t)a2) {
      sub_1CD47704C();
    }
    sub_1CD47704C();
  }
  uint64_t v4 = *(unsigned int *)(result + 8);
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)(v3 + 8 * v4) = v5;
  *(_DWORD *)(result + 8) = v4 + 1;
  return result;
}

uint64_t sub_1CD476FFC(int a1, llvm::Instruction *this)
{
  if (llvm::Instruction::mayReadFromMemory(this)) {
    return 1;
  }

  return llvm::Instruction::mayWriteToMemory(this);
}

void sub_1CD47704C()
{
}

llvm::raw_ostream *sub_1CD47711C(llvm::raw_ostream *result, llvm::Instruction ***a2, llvm::raw_ostream *a3, llvm::raw_ostream *a4, uint64_t a5)
{
  uint64_t v12 = a3;
  if (result != (llvm::raw_ostream *)a2)
  {
    unint64_t v8 = (llvm::Instruction ***)result;
    while (1)
    {
      __n128 result = sub_1CD4771C4(&v12, v8++);
      if (v8 == a2) {
        break;
      }
      uint64_t v9 = *(const void **)a5;
      unint64_t v10 = *(void *)(a5 + 8);
      char v11 = (void *)*((void *)a4 + 4);
      if (v10 <= *((void *)a4 + 3) - (void)v11)
      {
        if (v10)
        {
          memcpy(v11, v9, *(void *)(a5 + 8));
          *((void *)a4 + 4) += v10;
        }
      }
      else
      {
        llvm::raw_ostream::write(a4, (const char *)v9, *(void *)(a5 + 8));
      }
    }
  }
  return result;
}

llvm::raw_ostream *sub_1CD4771C4(llvm::raw_ostream **a1, llvm::Instruction ***a2)
{
  __n128 result = llvm::Dependence::dump(*a2, *a1);
  uint64_t v4 = (uint64_t *)*((void *)*a1 + 8);
  if ((*((char *)v4 + 23) & 0x80000000) == 0)
  {
    uint64_t v5 = *((unsigned __int8 *)v4 + 23);
    if (*((unsigned char *)v4 + v5 - 1) != 10) {
      return result;
    }
    uint64_t v6 = v5 - 1;
    *((unsigned char *)v4 + 23) = v6 & 0x7F;
    goto LABEL_4;
  }
  unint64_t v8 = (uint64_t *)*v4;
  uint64_t v7 = v4[1];
  if (*(unsigned char *)(*v4 + v7 - 1) == 10)
  {
    uint64_t v6 = v7 - 1;
    v4[1] = v6;
    uint64_t v4 = v8;
LABEL_4:
    *((unsigned char *)v4 + v6) = 0;
  }
  return result;
}

void *sub_1CD477248(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = sub_1CD477A28(a1, a2, 1);
  __n128 result = (void *)(*(void *)a1 + 80 * *(unsigned int *)(a1 + 8));
  *__n128 result = result + 2;
  result[1] = 0x800000000;
  if (*(_DWORD *)(v3 + 8)) {
    __n128 result = (void *)sub_1CD41C56C((uint64_t)result, v3);
  }
  ++*(_DWORD *)(a1 + 8);
  return result;
}

BOOL llvm::ConstraintSystem::mayHaveSolutionImpl(llvm::ConstraintSystem *this)
{
  while (1)
  {
    unsigned int v2 = *((_DWORD *)this + 2);
    if (!v2) {
      return 1;
    }
    unint64_t v3 = *(void ***)this;
    if (*(_DWORD *)(*(void *)this + 8) < 2u) {
      break;
    }
    if (!llvm::ConstraintSystem::eliminateUsingFM(this)) {
      return 1;
    }
  }
  uint64_t v5 = 80 * v2 - 80;
  do
  {
    uint64_t v6 = *v3;
    v3 += 10;
    BOOL result = *v6 >= 0;
    if ((*v6 & 0x8000000000000000) != 0) {
      break;
    }
    uint64_t v7 = v5;
    v5 -= 80;
  }
  while (v7);
  return result;
}

BOOL llvm::ConstraintSystem::isConditionImplied(uint64_t a1, uint64_t a2)
{
  v13[8] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(uint64_t **)a2;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  uint64_t v6 = 1;
  do
  {
    if (v5 == v6) {
      return *v4 >= 0;
    }
  }
  while (!v4[v6++]);
  v12[0] = v13;
  v12[1] = (void *)0x800000000;
  if (v5) {
    llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)v12, a2);
  }
  sub_1CD47748C((uint64_t)v12, v10);
  sub_1CD41C56C(a2, (uint64_t)v10);
  if (v10[0] != v11) {
    free(v10[0]);
  }
  if (v12[0] != v13) {
    free(v12[0]);
  }
  v10[0] = v11;
  v10[1] = (void *)0x400000000;
  if (*(_DWORD *)(a1 + 8)) {
    sub_1CD4774F4((uint64_t)v10, a1);
  }
  v11[80] = *(_DWORD *)(a1 + 336);
  sub_1CBFCD1A8((uint64_t)v10, *(uint64_t **)a2, *(unsigned int *)(a2 + 8));
  BOOL v8 = !llvm::ConstraintSystem::mayHaveSolutionImpl((llvm::ConstraintSystem *)v10);
  sub_1CD4779B0((char **)v10);
  return v8;
}

uint64_t sub_1CD47748C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  unsigned int v2 = *(void **)result;
  ++**(void **)result;
  uint64_t v3 = *(unsigned int *)(result + 8);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    do
    {
      void *v2 = -*v2;
      ++v2;
      v4 -= 8;
    }
    while (v4);
    *a2 = a2 + 2;
    a2[1] = 0x800000000;
    return sub_1CD41C56C((uint64_t)a2, result);
  }
  else
  {
    *a2 = a2 + 2;
    a2[1] = 0x800000000;
  }
  return result;
}

uint64_t sub_1CD4774F4(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4)
      {
        uint64_t v9 = *(void *)a2;
        uint64_t v10 = *(void *)a1;
        uint64_t v11 = 80 * v4;
        do
        {
          llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v10, v9);
          v9 += 80;
          v10 += 80;
          v11 -= 80;
        }
        while (v11);
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
        uint64_t v12 = *(void *)a1;
      }
      else
      {
        uint64_t v12 = *(void *)a1;
        uint64_t v10 = *(void *)a1;
      }
      uint64_t v13 = v12 + 80 * v5;
      while (v13 != v10)
      {
        int v15 = *(void **)(v13 - 80);
        v13 -= 80;
        int v14 = v15;
        if ((void *)(v13 + 16) != v15) {
          free(v14);
        }
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v4)
      {
        if (v5)
        {
          uint64_t v16 = *(void *)a1;
          uint64_t v17 = 80 * v5;
          do
          {
            char v18 = *(void **)(v16 + v17 - 80);
            if ((void *)(v16 + v17 - 64) != v18) {
              free(v18);
            }
            v17 -= 80;
          }
          while (v17);
        }
        *(_DWORD *)(a1 + 8) = 0;
        sub_1CD4776B0();
      }
      if (v5)
      {
        uint64_t v6 = *(void *)a2;
        uint64_t v7 = *(void *)a1;
        uint64_t v8 = 80 * v5;
        do
        {
          llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v7, v6);
          v6 += 80;
          v7 += 80;
          v8 -= 80;
        }
        while (v8);
      }
      else
      {
        uint64_t v5 = 0;
      }
      uint64_t v19 = *(unsigned int *)(a2 + 8);
      if (v5 != v19)
      {
        uint64_t v21 = *(void *)a2;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = 80 * v5;
        uint64_t v24 = 80 * v19;
        do
        {
          uint64_t v25 = (void *)(v22 + v23);
          *uint64_t v25 = v22 + v23 + 16;
          v25[1] = 0x800000000;
          if (*(_DWORD *)(v21 + v23 + 8)) {
            llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)v25, v21 + v23);
          }
          v22 += 80;
          v24 -= 80;
          v21 += 80;
        }
        while (v23 != v24);
      }
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_1CD4776B0()
{
}

void sub_1CD477720(uint64_t a1, void *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2)
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = 80 * v2;
    do
    {
      *a2 = a2 + 2;
      a2[1] = 0x800000000;
      if (*(_DWORD *)(v5 + 8)) {
        sub_1CD41C56C((uint64_t)a2, v5);
      }
      v5 += 80;
      a2 += 10;
      v6 -= 80;
    }
    while (v6);
    uint64_t v7 = *(unsigned int *)(a1 + 8);
    if (v7)
    {
      uint64_t v8 = *(void *)a1;
      uint64_t v9 = 80 * v7;
      do
      {
        uint64_t v10 = *(void **)(v8 + v9 - 80);
        if ((void *)(v8 + v9 - 64) != v10) {
          free(v10);
        }
        v9 -= 80;
      }
      while (v9);
    }
  }
}

uint64_t sub_1CD4777DC(uint64_t a1, unsigned char **a2, unsigned char **a3)
{
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    sub_1CD47786C();
  }
  uint64_t v5 = *(void *)a1 + 80 * v4;
  uint64_t v6 = *a2;
  uint64_t v7 = *a3;
  *(void *)uint64_t v5 = v5 + 16;
  *(void *)(v5 + 8) = 0x800000000;
  sub_1CD47792C((unsigned int *)v5, v6, v7);
  unsigned int v8 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v8;
  return *(void *)a1 + 80 * v8 - 80;
}

void sub_1CD47786C()
{
}

unsigned int *sub_1CD47792C(unsigned int *result, unsigned char *__src, unsigned char *a3)
{
  uint64_t v3 = result;
  size_t v4 = a3 - __src;
  uint64_t v5 = result[2];
  if (v5 + ((a3 - __src) >> 3) > (unint64_t)result[3]) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (__src != a3)
  {
    BOOL result = (unsigned int *)memcpy((void *)(*(void *)result + 8 * v5), __src, v4);
    LODWORD(v5) = v3[2];
  }
  void v3[2] = v5 + (v4 >> 3);
  return result;
}

char **sub_1CD4779B0(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 80 * v3;
    do
    {
      uint64_t v5 = *(char **)&v2[v4 - 80];
      if (&v2[v4 - 64] != v5) {
        free(v5);
      }
      v4 -= 80;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

unint64_t sub_1CD477A28(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    unint64_t v5 = *(void *)a1 + 80 * v3;
    if (*(void *)a1 > a2 || v5 <= a2) {
      sub_1CD4776B0();
    }
    sub_1CD4776B0();
  }
  return a2;
}

uint64_t sub_1CD477A94(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(char **)a2;
    if (*(void *)a2 == a2 + 16)
    {
      uint64_t v5 = *(unsigned int *)(a2 + 8);
      uint64_t v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        uint64_t v9 = *(char **)a1;
        if (v5)
        {
          uint64_t v10 = 80 * v5;
          do
          {
            sub_1CD41C56C((uint64_t)v9, (uint64_t)v4);
            v4 += 80;
            v9 += 80;
            v10 -= 80;
          }
          while (v10);
          LODWORD(v6) = *(_DWORD *)(a1 + 8);
          uint64_t v11 = *(char **)a1;
        }
        else
        {
          uint64_t v11 = *(char **)a1;
        }
        uint64_t v12 = &v11[80 * v6];
        while (v12 != v9)
        {
          int v14 = (char *)*((void *)v12 - 10);
          v12 -= 80;
          uint64_t v13 = v14;
          if (v12 + 16 != v14) {
            free(v13);
          }
        }
        *(_DWORD *)(a1 + 8) = v5;
        uint64_t v15 = *(unsigned int *)(a2 + 8);
        if (v15)
        {
          uint64_t v16 = *(char **)a2;
          uint64_t v17 = 80 * v15;
          do
          {
            char v18 = *(char **)&v16[v17 - 80];
            if (&v16[v17 - 64] != v18) {
              free(v18);
            }
            v17 -= 80;
          }
          while (v17);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v5)
        {
          if (v6)
          {
            uint64_t v19 = *(char **)a1;
            uint64_t v20 = 80 * v6;
            do
            {
              uint64_t v21 = *(char **)&v19[v20 - 80];
              if (&v19[v20 - 64] != v21) {
                free(v21);
              }
              v20 -= 80;
            }
            while (v20);
          }
          *(_DWORD *)(a1 + 8) = 0;
          sub_1CD4776B0();
        }
        if (v6)
        {
          uint64_t v7 = *(void *)a1;
          uint64_t v8 = 80 * v6;
          do
          {
            sub_1CD41C56C(v7, (uint64_t)v4);
            v4 += 80;
            v7 += 80;
            v8 -= 80;
          }
          while (v8);
        }
        else
        {
          uint64_t v6 = 0;
        }
        uint64_t v22 = *(char **)a2;
        uint64_t v23 = *(unsigned int *)(a2 + 8);
        if (v6 != v23)
        {
          uint64_t v24 = *(char **)a1;
          uint64_t v25 = 80 * v6;
          uint64_t v26 = 80 * v23;
          do
          {
            char v27 = &v24[v25];
            *(void *)char v27 = &v24[v25 + 16];
            *((void *)v27 + 1) = 0x800000000;
            if (*(_DWORD *)&v22[v25 + 8]) {
              sub_1CD41C56C((uint64_t)v27, (uint64_t)&v22[v25]);
            }
            v24 += 80;
            v26 -= 80;
            v22 += 80;
          }
          while (v25 != v26);
          uint64_t v22 = *(char **)a2;
        }
        *(_DWORD *)(a1 + 8) = v5;
        uint64_t v28 = *(unsigned int *)(a2 + 8);
        if (v28)
        {
          uint64_t v29 = 80 * v28;
          do
          {
            int v30 = *(char **)&v22[v29 - 80];
            if (&v22[v29 - 64] != v30) {
              free(v30);
            }
            v29 -= 80;
          }
          while (v29);
        }
      }
      *(_DWORD *)(a2 + 8) = 0;
    }
    else
    {
      sub_1CD477CD8((char **)a1, (char **)a2);
    }
  }
  return a1;
}

double sub_1CD477CD8(char **a1, char **a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *((unsigned int *)a1 + 2);
  if (v5)
  {
    uint64_t v6 = 80 * v5;
    do
    {
      uint64_t v7 = *(char **)&v4[v6 - 80];
      if (&v4[v6 - 64] != v7) {
        free(v7);
      }
      v6 -= 80;
    }
    while (v6);
    uint64_t v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2)) {
    free(v4);
  }
  *a1 = *a2;
  double result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

void sub_1CD477D68()
{
}

void llvm::collectParametricTerms(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v43[8] = *MEMORY[0x1E4F143B8];
  v31[1] = &v32;
  unsigned int v32 = v34;
  uint64_t v33 = 0x400000000;
  v31[0] = a1;
  __int16 v35 = v31;
  uint64_t v36 = v38;
  uint64_t v37 = 0x800000000;
  int v39 = v43;
  uint64_t v40 = v43;
  uint64_t v41 = 8;
  int v42 = 0;
  sub_1CBFCF14C((uint64_t)&v35, a2);
  unsigned int v6 = v37;
  while (v6)
  {
    uint64_t v7 = *((void *)v36 + --v6);
    LODWORD(v37) = v6;
    switch(*(_WORD *)(v7 + 24))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        uint64_t v12 = (uint64_t *)(v7 + 32);
        goto LABEL_8;
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v8 = *(void *)(v7 + 40);
        if (v8)
        {
          uint64_t v9 = *(uint64_t **)(v7 + 32);
          uint64_t v10 = 8 * v8;
          do
          {
            uint64_t v11 = *v9++;
            sub_1CBFCF14C((uint64_t)&v35, v11);
            v10 -= 8;
          }
          while (v10);
        }
        goto LABEL_9;
      case 6:
        sub_1CBFCF14C((uint64_t)&v35, *(void *)(v7 + 32));
        uint64_t v12 = (uint64_t *)(v7 + 40);
LABEL_8:
        sub_1CBFCF14C((uint64_t)&v35, *v12);
LABEL_9:
        unsigned int v6 = v37;
        break;
      default:
        break;
    }
  }
  if (v40 != v39) {
    free(v40);
  }
  if (v36 != v38) {
    free(v36);
  }
  if (v33)
  {
    uint64_t v13 = (uint64_t *)v32;
    int v14 = (uint64_t *)((char *)v32 + 8 * v33);
    do
    {
      uint64_t v15 = *v13;
      v30[0] = a3;
      __int16 v35 = v30;
      uint64_t v36 = v38;
      uint64_t v37 = 0x800000000;
      int v39 = v43;
      uint64_t v40 = v43;
      uint64_t v41 = 8;
      int v42 = 0;
      sub_1CBFCF46C((uint64_t *)&v35, v15);
      unsigned int v16 = v37;
      while (v16)
      {
        uint64_t v17 = *((void *)v36 + --v16);
        LODWORD(v37) = v16;
        switch(*(_WORD *)(v17 + 24))
        {
          case 1:
          case 2:
          case 3:
          case 0xD:
            uint64_t v22 = (uint64_t *)(v17 + 32);
            goto LABEL_26;
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
            uint64_t v18 = *(void *)(v17 + 40);
            if (v18)
            {
              uint64_t v19 = *(uint64_t **)(v17 + 32);
              uint64_t v20 = 8 * v18;
              do
              {
                uint64_t v21 = *v19++;
                sub_1CBFCF46C((uint64_t *)&v35, v21);
                v20 -= 8;
              }
              while (v20);
            }
            goto LABEL_27;
          case 6:
            sub_1CBFCF46C((uint64_t *)&v35, *(void *)(v17 + 32));
            uint64_t v22 = (uint64_t *)(v17 + 40);
LABEL_26:
            sub_1CBFCF46C((uint64_t *)&v35, *v22);
LABEL_27:
            unsigned int v16 = v37;
            break;
          default:
            break;
        }
      }
      if (v40 != v39) {
        free(v40);
      }
      if (v36 != v38) {
        free(v36);
      }
      ++v13;
    }
    while (v13 != v14);
  }
  v30[0] = a3;
  v30[1] = a1;
  __int16 v35 = v30;
  uint64_t v36 = v38;
  uint64_t v37 = 0x800000000;
  int v39 = v43;
  uint64_t v40 = v43;
  uint64_t v41 = 8;
  int v42 = 0;
  sub_1CBFCFA0C((uint64_t)&v35, a2);
  unsigned int v23 = v37;
  while (v23)
  {
    uint64_t v24 = *((void *)v36 + --v23);
    LODWORD(v37) = v23;
    switch(*(_WORD *)(v24 + 24))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        uint64_t v29 = (uint64_t *)(v24 + 32);
        goto LABEL_43;
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v25 = *(void *)(v24 + 40);
        if (v25)
        {
          uint64_t v26 = *(uint64_t **)(v24 + 32);
          uint64_t v27 = 8 * v25;
          do
          {
            uint64_t v28 = *v26++;
            sub_1CBFCFA0C((uint64_t)&v35, v28);
            v27 -= 8;
          }
          while (v27);
        }
        goto LABEL_44;
      case 6:
        sub_1CBFCFA0C((uint64_t)&v35, *(void *)(v24 + 32));
        uint64_t v29 = (uint64_t *)(v24 + 40);
LABEL_43:
        sub_1CBFCFA0C((uint64_t)&v35, *v29);
LABEL_44:
        unsigned int v23 = v37;
        break;
      default:
        break;
    }
  }
  if (v40 != v39) {
    free(v40);
  }
  if (v36 != v38) {
    free(v36);
  }
  if (v32 != v34) {
    free(v32);
  }
}

void llvm::delinearize(llvm::SCEVDivision *a1, uint64_t a2, uint64_t a3, uint64_t a4, const llvm::SCEV ***a5)
{
  void v14[4] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = v14;
  uint64_t v13 = 0x400000000;
  llvm::collectParametricTerms((uint64_t)a1, a2, (uint64_t)&v12);
  if (v13)
  {
    llvm::findArrayDimensions(a1, (uint64_t)&v12, a4, a5);
    if (*(_DWORD *)(a4 + 8)) {
      llvm::computeAccessFunctions(a1, a2, a3, a4, v10, v11);
    }
  }
  if (v12 != v14) {
    free(v12);
  }
}

void *llvm::DelinearizationPrinterPass::DelinearizationPrinterPass(void *this, llvm::raw_ostream *a2)
{
  *this = a2;
  return this;
}

void llvm::DelinearizationPrinterPass::run()
{
}

uint64_t sub_1CD478318(llvm::ScalarEvolution *a1, uint64_t a2, const llvm::Loop *a3, uint64_t a4)
{
  v12[4] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(unsigned char **)a2;
  uint64_t v8 = (unsigned char *)(*(void *)a2 + 8 * *(unsigned int *)(a2 + 8));
  v11[0] = v12;
  v11[1] = (void *)0x400000000;
  sub_1CD47792C((unsigned int *)v11, v7, v8);
  uint64_t AddRecExpr = llvm::ScalarEvolution::getAddRecExpr(a1, (uint64_t **)v11, a3, a4);
  if (v11[0] != v12) {
    free(v11[0]);
  }
  return AddRecExpr;
}

uint64_t sub_1CD4783D8(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a2 < *a1;
  }
}

void llvm::initializeDemandedBitsWrapperPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC52E0, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CBFD11E0;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCC52E0, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

llvm::DemandedBitsWrapperPass *llvm::DemandedBitsWrapperPass::DemandedBitsWrapperPass(llvm::DemandedBitsWrapperPass *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = &llvm::DemandedBitsWrapperPass::ID;
  *((_DWORD *)this + 6) = 2;
  *(void *)this = &unk_1F2602678;
  *((unsigned char *)this + 32) = 0;
  *((unsigned char *)this + 536) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC52E0, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CBFD11E0;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCC52E0, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return this;
}

llvm::AnalysisUsage *llvm::DemandedBitsWrapperPass::getAnalysisUsage(llvm::DemandedBitsWrapperPass *this, llvm::AnalysisUsage *a2)
{
  llvm::AnalysisUsage::setPreservesCFG(a2);
  llvm::AnalysisUsage::addRequiredID(a2, llvm::AssumptionCacheTracker::ID);
  double result = llvm::AnalysisUsage::addRequiredID(a2, (char *)&llvm::DominatorTreeWrapperPass::ID);
  *((unsigned char *)a2 + 16llvm::Function::viewCFG(this, 1, 0, 0) = 1;
  return result;
}

void llvm::DemandedBitsWrapperPass::print(llvm::Value ***this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
}

void llvm::DemandedBits::print(llvm::Value ***this, llvm::raw_ostream *a2)
{
  uint64_t v17 = a2;
  llvm::DemandedBits::performAnalysis((llvm::DemandedBits *)this);
  uint64_t v3 = this[40];
  uint64_t v4 = *((unsigned int *)this + 84);
  uint64_t v5 = &v3[3 * v4];
  if (*((_DWORD *)this + 82))
  {
    if (v4)
    {
      uint64_t v6 = 24 * v4;
      uint64_t v7 = this[40];
      while (((unint64_t)*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v7 += 3;
        v6 -= 24;
        if (!v6) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      uint64_t v7 = this[40];
    }
  }
  else
  {
LABEL_6:
    uint64_t v7 = &v3[3 * v4];
  }
  uint64_t v8 = &v3[3 * v4];
LABEL_8:
  while (v7 != v8)
  {
    uint64_t v9 = *v7;
    sub_1CBFD4710(&v17, *v7, (uint64_t)(v7 + 1), 0);
    int v10 = *((_DWORD *)v9 + 5);
    if ((v10 & 0x40000000) != 0)
    {
      uint64_t v12 = (uint64_t **)*((void *)v9 - 1);
      uint64_t v11 = v10 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v11 = v10 & 0x7FFFFFF;
      uint64_t v12 = (uint64_t **)((char *)v9 - 32 * v11);
    }
    if (v11)
    {
      uint64_t v13 = 32 * v11;
      do
      {
        llvm::DemandedBits::getDemandedBits((llvm::DemandedBits *)this, v12, (llvm::APInt *)&v15);
        sub_1CBFD4710(&v17, v9, (uint64_t)&v15, (llvm::Value *)*v12);
        if (v16 >= 0x41)
        {
          if (v15) {
            MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
          }
        }
        v12 += 4;
        v13 -= 32;
      }
      while (v13);
    }
    int v14 = v7 + 3;
    uint64_t v7 = v5;
    if (v14 != v5)
    {
      uint64_t v7 = v14;
      while (((unint64_t)*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v7 += 3;
        if (v7 == v5)
        {
          uint64_t v7 = v5;
          goto LABEL_8;
        }
      }
    }
  }
}

uint64_t llvm::DemandedBits::determineLiveOperandBitsSub@<X0>(llvm::DemandedBits *this@<X0>, const llvm::APInt *a2@<X2>, const llvm::KnownBits *a3@<X3>, unsigned int *a4@<X1>, uint64_t a5@<X8>)
{
  int v8 = (int)this;
  int v24 = 1;
  uint64_t v23 = 0;
  unsigned int v26 = 1;
  uint64_t v25 = 0;
  int v10 = (const llvm::KnownBits *)((char *)a3 + 16);
  unsigned int v11 = *((_DWORD *)a3 + 6);
  if (v11 > 0x40)
  {
    uint64_t v21 = a5;
    int v19 = v8;
    uint64_t v15 = a4;
    uint64_t v17 = a2;
    int v14 = a3;
    llvm::APInt::assignSlowCase((const llvm::APInt *)&v23, v10);
    a3 = v14;
    a4 = v15;
    a5 = v21;
    int v8 = v19;
    a2 = v17;
    if (v26 > 0x40) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v23 = *(void *)v10;
    int v24 = v11;
  }
  unsigned int v12 = *((_DWORD *)a3 + 2);
  if (v12 > 0x40)
  {
LABEL_7:
    unsigned int v16 = a4;
    uint64_t v18 = a2;
    int v20 = v8;
    uint64_t v22 = a5;
    llvm::APInt::assignSlowCase((const llvm::APInt *)&v25, a3);
    a5 = v22;
    int v8 = v20;
    a4 = v16;
    a2 = v18;
    goto LABEL_5;
  }
  uint64_t v25 = *(void *)a3;
  unsigned int v26 = v12;
LABEL_5:
  sub_1CBFD4900(a5, v8, a4, (uint64_t)a2, (uint64_t)&v23, 0, 1u);
  return sub_1CB8F0DC4((uint64_t)&v23);
}

uint64_t llvm::DemandedBitsWrapperPass::runOnFunction(llvm::DemandedBitsWrapperPass *this, llvm::Function *a2)
{
  uint64_t v4 = (uint64_t *)*((void *)this + 1);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_2:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(char **)v5 != llvm::AssumptionCacheTracker::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_2;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  int v8 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v7 + 96))(v7, llvm::AssumptionCacheTracker::ID);
  uint64_t AssumptionCache = llvm::AssumptionCacheTracker::getAssumptionCache(v8, a2);
  int v10 = (uint64_t *)*((void *)this + 1);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  if (v11 == v12)
  {
LABEL_4:
    uint64_t v13 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v11 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v11 += 16;
      if (v11 == v12) {
        goto LABEL_4;
      }
    }
    uint64_t v13 = *(void *)(v11 + 8);
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v13 + 96))(v13, &llvm::DominatorTreeWrapperPass::ID);
  sub_1CD478CCC((void *)this + 4, (uint64_t)a2, AssumptionCache, v14 + 32);
  return 0;
}

void *llvm::DemandedBitsWrapperPass::releaseMemory(void *this)
{
  if (*((unsigned char *)this + 536))
  {
    uint64_t v1 = this;
    this = sub_1CBFD5834(this + 4);
    *((unsigned char *)v1 + 536) = 0;
  }
  return this;
}

uint64_t llvm::DemandedBits::getDemandedBits@<X0>(llvm::DemandedBits *this@<X0>, uint64_t **a2@<X1>, llvm::APInt *a3@<X8>)
{
  uint64_t v7 = (llvm::Instruction *)a2[3];
  uint64_t v8 = **a2;
  uint64_t v6 = v8;
  if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12) {
    uint64_t v8 = **(void **)(v8 + 16);
  }
  unsigned int v10 = sub_1CB83544C(*(void *)(*(void *)(*((void *)v7 + 5) + 56) + 40) + 272, v8);
  if (v9 == 1) {
  if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
  }
    int v11 = *(unsigned __int8 *)(**(void **)(v6 + 16) + 8);
  else {
    int v11 = *(_DWORD *)(v6 + 8);
  }
  if (v11 != 13)
  {
    uint64_t v12 = (uint64_t)a3;
    unsigned int v13 = v10;
    uint64_t v14 = -1;
    goto LABEL_12;
  }
  if (llvm::DemandedBits::isUseDead(this, (llvm::Use *)a2))
  {
    uint64_t v12 = (uint64_t)a3;
    unsigned int v13 = v10;
    uint64_t v14 = 0;
LABEL_12:
    return sub_1CB8F1EEC(v12, v13, v14);
  }
  llvm::DemandedBits::performAnalysis(this);
  llvm::DemandedBits::getDemandedBits(this, v7, (llvm::APInt *)&v29);
  sub_1CB8F1EEC((uint64_t)a3, v10, -1);
  int v26 = 1;
  uint64_t v25 = 0;
  int v28 = 1;
  uint64_t v27 = 0;
  int v22 = 1;
  uint64_t v21 = 0;
  int v24 = 1;
  uint64_t v23 = 0;
  BOOL v20 = 0;
  uint64_t v17 = a2[3];
  int v18 = *((_DWORD *)v17 + 5);
  if ((v18 & 0x40000000) != 0) {
    int v19 = (uint64_t *)*(v17 - 1);
  }
  else {
    int v19 = &v17[-4 * (v18 & 0x7FFFFFF)];
  }
  llvm::DemandedBits::determineLiveOperandBits(this, v7, (uint64_t)*a2, (llvm::DemandedBits *)((unint64_t)((char *)a2 - (char *)v19) >> 5), (const llvm::APInt *)&v29, a3, (llvm::KnownBits *)&v25, (llvm::KnownBits *)&v21, v16, &v20);
  sub_1CB8F0DC4((uint64_t)&v21);
  uint64_t result = sub_1CB8F0DC4((uint64_t)&v25);
  if (v30 >= 0x41)
  {
    uint64_t result = v29;
    if (v29) {
      return MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
    }
  }
  return result;
}

void llvm::DemandedBitsPrinterPass::run()
{
}

void sub_1CD478BB4(llvm::Pass *this)
{
  *(void *)this = &unk_1F2602678;
  if (*((unsigned char *)this + 536))
  {
    sub_1CBFD5834((void *)this + 4);
    *((unsigned char *)this + 536) = 0;
  }

  llvm::Pass::~Pass(this);
}

void sub_1CD478C18(llvm::Pass *this)
{
  *(void *)this = &unk_1F2602678;
  if (*((unsigned char *)this + 536))
  {
    sub_1CBFD5834((void *)this + 4);
    *((unsigned char *)this + 536) = 0;
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void llvm::callDefaultCtor<llvm::DemandedBitsWrapperPass>()
{
}

double sub_1CD478CCC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*((unsigned char *)a1 + 504)) {
    a1 = sub_1CBFD5834(a1);
  }
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  *((unsigned char *)a1 + 24) = 0;
  a1[4] = a1 + 8;
  a1[5] = a1 + 8;
  a1[6] = 32;
  *((_DWORD *)a1 + 14) = 0;
  a1[40] = 0;
  a1[41] = 0;
  *((_DWORD *)a1 + 84) = 0;
  a1[43] = a1 + 47;
  a1[44] = a1 + 47;
  *(void *)&double result = 16;
  a1[45] = 16;
  *((_DWORD *)a1 + 92) = 0;
  *((unsigned char *)a1 + 504) = 1;
  return result;
}

_DWORD *sub_1CD478D54(_DWORD *a1)
{
  int v2 = a1[2];
  double result = (_DWORD *)sub_1CBFD5898((uint64_t)a1);
  int v4 = 1 << (33 - __clz(v2 - 1));
  if (v4 <= 64) {
    int v4 = 64;
  }
  if (v2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5 == a1[4])
  {
    *((void *)a1 + 1) = 0;
    if (v5)
    {
      uint64_t v6 = *(void **)a1;
      uint64_t v7 = 24 * v5;
      do
      {
        *uint64_t v6 = -4096;
        v6 += 3;
        v7 -= 24;
      }
      while (v7);
    }
  }
  else
  {
    MEMORY[0x1D25D9CD0](*(void *)a1, 8);
    return sub_1CBC04E60(a1, v5);
  }
  return result;
}

void llvm::DependenceAnalysis::run()
{
}

void llvm::initializeDependenceAnalysisWrapperPassPass(llvm *this, llvm::PassRegistry *a2)
{
  int v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC52E8, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CBFD61C4;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCC52E8, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

llvm::DependenceAnalysisWrapperPass *llvm::DependenceAnalysisWrapperPass::DependenceAnalysisWrapperPass(llvm::DependenceAnalysisWrapperPass *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = &llvm::DependenceAnalysisWrapperPass::ID;
  *((_DWORD *)this + 6) = 2;
  *(void *)this = &unk_1F2602718;
  *((void *)this + 4) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC52E8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CBFD61C4;
    v5[1] = &PassRegistry;
    int v4 = v5;
    std::__call_once(&qword_1EBCC52E8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return this;
}

void llvm::createDependenceAnalysisWrapperPass(llvm *this)
{
}

void llvm::DependenceAnalysisWrapperPass::runOnFunction(llvm::DependenceAnalysisWrapperPass *this, llvm::Function *a2)
{
  uint64_t v3 = (uint64_t *)*((void *)this + 1);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(char **)v4 != llvm::AAResultsWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  (*(void (**)(uint64_t, char *))(*(void *)v6 + 96))(v6, llvm::AAResultsWrapperPass::ID);
  uint64_t v7 = (uint64_t *)*((void *)this + 1);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (v8 == v9)
  {
LABEL_8:
    uint64_t v10 = 0;
  }
  else
  {
    while (*(char **)v8 != llvm::ScalarEvolutionWrapperPass::ID)
    {
      v8 += 16;
      if (v8 == v9) {
        goto LABEL_8;
      }
    }
    uint64_t v10 = *(void *)(v8 + 8);
  }
  (*(void (**)(uint64_t, char *))(*(void *)v10 + 96))(v10, llvm::ScalarEvolutionWrapperPass::ID);
  int v11 = (uint64_t *)*((void *)this + 1);
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  if (v12 == v13)
  {
LABEL_12:
    uint64_t v14 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v12 != &llvm::LoopInfoWrapperPass::ID)
    {
      v12 += 16;
      if (v12 == v13) {
        goto LABEL_12;
      }
    }
    uint64_t v14 = *(void *)(v12 + 8);
  }
  (*(void (**)(uint64_t, void *))(*(void *)v14 + 96))(v14, &llvm::LoopInfoWrapperPass::ID);
  operator new();
}

uint64_t llvm::DependenceAnalysisWrapperPass::getDI(llvm::DependenceAnalysisWrapperPass *this)
{
  return *((void *)this + 4);
}

uint64_t llvm::DependenceAnalysisWrapperPass::releaseMemory(llvm::DependenceAnalysisWrapperPass *this)
{
  uint64_t result = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (result) {
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

llvm::AnalysisUsage *llvm::DependenceAnalysisWrapperPass::getAnalysisUsage(llvm::DependenceAnalysisWrapperPass *this, llvm::AnalysisUsage *a2)
{
  *((unsigned char *)a2 + 16llvm::Function::viewCFG(this, 1, 0, 0) = 1;
  llvm::AnalysisUsage::addRequiredTransitiveID(a2, llvm::AAResultsWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredTransitiveID(a2, llvm::ScalarEvolutionWrapperPass::ID);

  return llvm::AnalysisUsage::addRequiredTransitiveID(a2, (char *)&llvm::LoopInfoWrapperPass::ID);
}

uint64_t llvm::DependenceAnalysisWrapperPass::print(llvm::DependenceAnalysisWrapperPass *this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  return sub_1CBFD627C((uint64_t)a2, *((void *)this + 4));
}

void llvm::DependenceAnalysisPrinterPass::run(llvm::raw_ostream **a1, llvm::Value *a2)
{
  uint64_t v3 = sub_1CB8E509C(*a1, "'Dependence Analysis' for function '");
  Name = llvm::Value::getName(a2);
  size_t v6 = v4;
  uint64_t v7 = (void *)*((void *)v3 + 4);
  if (v4 <= *((void *)v3 + 3) - (void)v7)
  {
    if (v4)
    {
      memcpy(v7, Name, v4);
      *((void *)v3 + 4) += v6;
    }
  }
  else
  {
    llvm::raw_ostream::write(v3, Name, v4);
  }
  sub_1CB8E509C(v3, "':\n");
  llvm::AnalysisManager<llvm::Function>::getResultImpl();
}

uint64_t llvm::Dependence::isOutput(llvm::Instruction **this)
{
  uint64_t result = llvm::Instruction::mayWriteToMemory(this[1]);
  if (result)
  {
    uint64_t v3 = this[2];
    return llvm::Instruction::mayWriteToMemory(v3);
  }
  return result;
}

uint64_t llvm::Dependence::isFlow(llvm::Instruction **this)
{
  uint64_t result = llvm::Instruction::mayWriteToMemory(this[1]);
  if (result)
  {
    uint64_t v3 = this[2];
    return llvm::Instruction::mayReadFromMemory(v3);
  }
  return result;
}

uint64_t llvm::Dependence::isAnti(llvm::Instruction **this)
{
  uint64_t result = llvm::Instruction::mayReadFromMemory(this[1]);
  if (result)
  {
    uint64_t v3 = this[2];
    return llvm::Instruction::mayWriteToMemory(v3);
  }
  return result;
}

uint64_t llvm::Dependence::isScalar(llvm::Dependence *this)
{
  return 0;
}

uint64_t llvm::FullDependence::FullDependence(uint64_t this, llvm::Instruction *a2, llvm::Instruction *a3, char a4, int a5)
{
  *(void *)(this + 8) = a2;
  *(void *)(this + 16) = a3;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(void *)this = &unk_1F26027B8;
  *(_WORD *)(this + 4llvm::Function::viewCFG(this, 1, 0, 0) = a5;
  *(unsigned char *)(this + 42) = a4;
  *(void *)(this + 48) = 0;
  *(unsigned char *)(this + 43) = 1;
  if (a5) {
    operator new[]();
  }
  return this;
}

uint64_t llvm::FullDependence::getDirection(llvm::FullDependence *this, int a2)
{
  return *(unsigned char *)(*((void *)this + 6) + 16 * (a2 - 1)) & 7;
}

uint64_t llvm::FullDependence::getDistance(llvm::FullDependence *this, int a2)
{
  return *(void *)(*((void *)this + 6) + 16 * (a2 - 1) + 8);
}

uint64_t llvm::FullDependence::isScalar(llvm::FullDependence *this, int a2)
{
  return (*(unsigned __int8 *)(*((void *)this + 6) + 16 * (a2 - 1)) >> 3) & 1;
}

uint64_t llvm::FullDependence::isPeelFirst(llvm::FullDependence *this, int a2)
{
  return (*(unsigned __int8 *)(*((void *)this + 6) + 16 * (a2 - 1)) >> 4) & 1;
}

uint64_t llvm::FullDependence::isPeelLast(llvm::FullDependence *this, int a2)
{
  return (*(unsigned __int8 *)(*((void *)this + 6) + 16 * (a2 - 1)) >> 5) & 1;
}

uint64_t llvm::FullDependence::isSplitable(llvm::FullDependence *this, int a2)
{
  return (*(unsigned __int8 *)(*((void *)this + 6) + 16 * (a2 - 1)) >> 6) & 1;
}

unint64_t llvm::DependenceInfo::Constraint::setDistance(llvm::DependenceInfo::Constraint *this, const llvm::SCEV *a2, const llvm::Loop *a3)
{
  *(_DWORD *)this = 2;
  size_t v6 = (llvm::ScalarEvolution *)*((void *)this + 1);
  Type = (llvm::Type *)llvm::SCEV::getType(a2);
  unint64_t Constant = llvm::ScalarEvolution::getConstant(v6, Type, 1uLL, 0);
  *((void *)this + 2) = Constant;
  *((void *)this + 3) = llvm::ScalarEvolution::getNegativeSCEV(*((llvm::ScalarEvolution **)this + 1), Constant, 0);
  unint64_t result = llvm::ScalarEvolution::getNegativeSCEV(*((llvm::ScalarEvolution **)this + 1), (uint64_t)a2, 0);
  *((void *)this + 4) = result;
  *((void *)this + 5) = a3;
  return result;
}

llvm::raw_ostream *llvm::DependenceInfo::Constraint::dump(llvm::DependenceInfo::Constraint *this, llvm::raw_ostream *a2)
{
  switch(*(_DWORD *)this)
  {
    case 0:
      size_t v4 = " Empty\n";
      goto LABEL_11;
    case 1:
      uint64_t v5 = sub_1CB8E509C(a2, " Point is <");
      llvm::SCEV::print(*((llvm::SCEV **)this + 2), v5);
      size_t v6 = sub_1CB8E509C(v5, ", ");
      llvm::SCEV::print(*((llvm::SCEV **)this + 3), v6);
      size_t v4 = ">\n";
      goto LABEL_6;
    case 2:
      uint64_t v7 = sub_1CB8E509C(a2, " Distance is ");
      NegativeSCEV = (llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV(*((llvm::ScalarEvolution **)this + 1), *((void *)this + 4), 0);
      llvm::SCEV::print(NegativeSCEV, v7);
      uint64_t v9 = sub_1CB8E509C(v7, " (");
      llvm::SCEV::print(*((llvm::SCEV **)this + 2), v9);
      uint64_t v10 = sub_1CB8E509C(v9, "*X + ");
      llvm::SCEV::print(*((llvm::SCEV **)this + 3), v10);
      size_t v6 = sub_1CB8E509C(v10, "*Y = ");
      llvm::SCEV::print(*((llvm::SCEV **)this + 4), v6);
      size_t v4 = ")\n";
      goto LABEL_6;
    case 4:
      size_t v4 = " Any\n";
LABEL_11:
      uint64_t v13 = a2;
      goto LABEL_7;
    default:
      int v11 = sub_1CB8E509C(a2, " Line is ");
      llvm::SCEV::print(*((llvm::SCEV **)this + 2), v11);
      uint64_t v12 = sub_1CB8E509C(v11, "*X + ");
      llvm::SCEV::print(*((llvm::SCEV **)this + 3), v12);
      size_t v6 = sub_1CB8E509C(v12, "*Y = ");
      llvm::SCEV::print(*((llvm::SCEV **)this + 4), v6);
      size_t v4 = "\n";
LABEL_6:
      uint64_t v13 = v6;
LABEL_7:
      return sub_1CB8E509C(v13, v4);
  }
}

uint64_t llvm::DependenceInfo::isKnownPredicate(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  size_t v4 = (const llvm::SCEV *)a4;
  uint64_t v5 = (const llvm::SCEV *)a3;
  if ((a2 & 0xFFFFFFFE) == 0x20)
  {
    int v8 = *(unsigned __int16 *)(a3 + 24);
    if (v8 == 2)
    {
      if (*(_WORD *)(a4 + 24) != 2) {
        goto LABEL_7;
      }
    }
    else if (v8 != 3 || *(_WORD *)(a4 + 24) != 3)
    {
      goto LABEL_7;
    }
    uint64_t v9 = *(llvm::SCEV **)(a3 + 32);
    uint64_t v10 = *(llvm::SCEV **)(a4 + 32);
    uint64_t Type = llvm::SCEV::getType(v9);
    if (Type == llvm::SCEV::getType(v10))
    {
      uint64_t v5 = v9;
      size_t v4 = v10;
    }
  }
LABEL_7:
  if (llvm::ScalarEvolution::isKnownPredicate(*(llvm::ScalarEvolution **)(a1 + 8), a2, v5, v4)) {
    return 1;
  }
  uint64_t result = llvm::ScalarEvolution::getMinusSCEV(*(llvm::ScalarEvolution **)(a1 + 8), v5, v4, 0, 0);
  uint64_t v13 = (const llvm::SCEV *)result;
  switch(a2)
  {
    case '!':
      uint64_t v15 = *(llvm::ScalarEvolution **)(a1 + 8);
      uint64_t result = llvm::ScalarEvolution::isKnownNonZero(v15, v13);
      break;
    case '""':
    case '#':
    case '$':
    case '%':
      __break(1u);
      break;
    case '&':
      int8x8_t v16 = *(llvm::ScalarEvolution **)(a1 + 8);
      uint64_t result = llvm::ScalarEvolution::isKnownPositive(v16, v13);
      break;
    case '\'':
      uint64_t v14 = *(llvm::ScalarEvolution **)(a1 + 8);
      uint64_t result = llvm::ScalarEvolution::isKnownNonNegative(v14, v13);
      break;
    case '(':
      int v18 = *(llvm::ScalarEvolution **)(a1 + 8);
      uint64_t result = llvm::ScalarEvolution::isKnownNegative(v18, v13);
      break;
    case ')':
      uint64_t v17 = *(llvm::ScalarEvolution **)(a1 + 8);
      uint64_t result = llvm::ScalarEvolution::isKnownNonPositive(v17, v13);
      break;
    default:
      uint64_t result = llvm::SCEV::isZero((llvm::SCEV *)result);
      break;
  }
  return result;
}

llvm::raw_ostream *llvm::Dependence::dump(llvm::Instruction **this, llvm::raw_ostream *a2)
{
  if ((*((uint64_t (**)(llvm::Instruction **))*this + 3))(this))
  {
    size_t v4 = "confused";
LABEL_3:
    sub_1CB8E509C(a2, v4);
    goto LABEL_4;
  }
  if ((*((unsigned int (**)(llvm::Instruction **))*this + 4))(this)) {
    sub_1CB8E509C(a2, "consistent ");
  }
  if (llvm::Instruction::mayWriteToMemory(this[1])
    && (llvm::Instruction::mayReadFromMemory(this[2]) & 1) != 0)
  {
    size_t v6 = "flow";
LABEL_12:
    sub_1CB8E509C(a2, v6);
    goto LABEL_13;
  }
  if (llvm::Instruction::mayWriteToMemory(this[1])
    && (llvm::Instruction::mayWriteToMemory(this[2]) & 1) != 0)
  {
    size_t v6 = "output";
    goto LABEL_12;
  }
  if (llvm::Instruction::mayReadFromMemory(this[1])
    && (llvm::Instruction::mayWriteToMemory(this[2]) & 1) != 0)
  {
    size_t v6 = "anti";
    goto LABEL_12;
  }
  if (llvm::Instruction::mayReadFromMemory(this[1])
    && llvm::Instruction::mayReadFromMemory(this[2]))
  {
    size_t v6 = "input";
    goto LABEL_12;
  }
LABEL_13:
  unsigned int v7 = (*((uint64_t (**)(llvm::Instruction **))*this + 5))(this);
  sub_1CB8E509C(a2, " [");
  char v8 = 0;
  if (v7)
  {
    uint64_t v9 = 1;
    do
    {
      char v10 = (*((uint64_t (**)(llvm::Instruction **, uint64_t))*this + 10))(this, v9);
      if ((*((unsigned int (**)(llvm::Instruction **, uint64_t))*this + 8))(this, v9))
      {
        int v11 = (unsigned char *)*((void *)a2 + 4);
        if ((unint64_t)v11 >= *((void *)a2 + 3))
        {
          llvm::raw_ostream::write(a2, 112);
        }
        else
        {
          *((void *)a2 + 4) = v11 + 1;
          *int v11 = 112;
        }
      }
      uint64_t v12 = (llvm::SCEV *)(*((uint64_t (**)(llvm::Instruction **, uint64_t))*this + 7))(this, v9);
      if (v12)
      {
        llvm::SCEV::print(v12, a2);
      }
      else
      {
        if ((*((unsigned int (**)(llvm::Instruction **, uint64_t))*this + 11))(this, v9))
        {
          uint64_t v14 = a2;
          uint64_t v15 = "S";
        }
        else
        {
          int v16 = (*((uint64_t (**)(llvm::Instruction **, uint64_t))*this + 6))(this, v9);
          if (v16 == 7)
          {
            uint64_t v14 = a2;
            uint64_t v15 = "*";
          }
          else
          {
            char v17 = v16;
            if (v16) {
              sub_1CB8E509C(a2, "<");
            }
            if ((v17 & 2) != 0) {
              sub_1CB8E509C(a2, "=");
            }
            if ((v17 & 4) == 0) {
              goto LABEL_21;
            }
            uint64_t v14 = a2;
            uint64_t v15 = ">";
          }
        }
        sub_1CB8E509C(v14, v15);
      }
LABEL_21:
      if ((*((unsigned int (**)(llvm::Instruction **, uint64_t))*this + 9))(this, v9))
      {
        uint64_t v13 = (unsigned char *)*((void *)a2 + 4);
        if ((unint64_t)v13 >= *((void *)a2 + 3))
        {
          llvm::raw_ostream::write(a2, 112);
        }
        else
        {
          *((void *)a2 + 4) = v13 + 1;
          *uint64_t v13 = 112;
        }
      }
      if (v9 < v7) {
        sub_1CB8E509C(a2, " ");
      }
      v8 |= v10;
      uint64_t v9 = (v9 + 1);
    }
    while (v9 <= v7);
  }
  if ((*((uint64_t (**)(llvm::Instruction **))*this + 2))(this)) {
    sub_1CB8E509C(a2, "|<");
  }
  sub_1CB8E509C(a2, "]");
  if (v8)
  {
    size_t v4 = " splitable";
    goto LABEL_3;
  }
LABEL_4:

  return sub_1CB8E509C(a2, "!\n");
}

uint64_t llvm::DependenceInfo::establishNestingLevels(llvm::DependenceInfo *this, const llvm::Instruction *a2, const llvm::Instruction *a3)
{
  uint64_t v4 = *((void *)a2 + 5);
  uint64_t v5 = *((void *)a3 + 5);
  size_t v6 = (uint64_t *)*((void *)this + 2);
  uint64_t v19 = 0;
  uint64_t v20 = v4;
  if ((sub_1CB834D78(v6, &v20, &v19) & 1) != 0 && (unsigned int v7 = *(void **)(v19 + 8)) != 0)
  {
    unsigned int v8 = 0;
    do
    {
      unsigned int v7 = (void *)*v7;
      ++v8;
    }
    while (v7);
  }
  else
  {
    unsigned int v8 = 0;
  }
  uint64_t v9 = (uint64_t *)*((void *)this + 2);
  uint64_t v19 = 0;
  uint64_t v20 = v5;
  if ((sub_1CB834D78(v9, &v20, &v19) & 1) != 0 && (char v10 = *(void **)(v19 + 8)) != 0)
  {
    unsigned int v11 = 0;
    do
    {
      char v10 = (void *)*v10;
      ++v11;
    }
    while (v10);
  }
  else
  {
    unsigned int v11 = 0;
  }
  uint64_t v12 = (uint64_t *)*((void *)this + 2);
  uint64_t v19 = 0;
  uint64_t v20 = v4;
  uint64_t v13 = 0;
  if (sub_1CB834D78(v12, &v20, &v19)) {
    uint64_t v13 = *(void **)(v19 + 8);
  }
  uint64_t v14 = (uint64_t *)*((void *)this + 2);
  uint64_t v19 = 0;
  uint64_t v20 = v5;
  uint64_t result = sub_1CB834D78(v14, &v20, &v19);
  int v16 = 0;
  if (result) {
    int v16 = *(void **)(v19 + 8);
  }
  *((_DWORD *)this + 9) = v8;
  unsigned int v17 = v8;
  if (v8 > v11)
  {
    do
    {
      uint64_t v13 = (void *)*v13;
      --v17;
    }
    while (v17 > v11);
    unsigned int v17 = v11;
  }
  if (v11 > v17)
  {
    unsigned int v18 = v11;
    do
    {
      int v16 = (void *)*v16;
      --v18;
    }
    while (v18 > v17);
  }
  while (v13 != v16)
  {
    uint64_t v13 = (void *)*v13;
    int v16 = (void *)*v16;
    --v17;
  }
  *((_DWORD *)this + 8) = v17;
  *((_DWORD *)this + 1llvm::Function::viewCFG(this, 1, 0, 0) = v11 + v8 - v17;
  return result;
}

BOOL llvm::DependenceInfo::isLoopInvariant(llvm::ScalarEvolution **this, const llvm::SCEV *a2, const llvm::Loop *a3)
{
  if (!a3) {
    return 1;
  }
  uint64_t v3 = a3;
  do
  {
    BOOL result = llvm::ScalarEvolution::isLoopInvariant(this[1], a2, v3);
    if (!result) {
      break;
    }
    uint64_t v3 = *(const llvm::Loop **)v3;
  }
  while (v3);
  return result;
}

unint64_t *llvm::DependenceInfo::collectCommonLoops(unint64_t *result, llvm::SCEV *a2, llvm::Loop *a3, unint64_t *a4)
{
  if (a3)
  {
    uint64_t v5 = a3;
    uint64_t v7 = (uint64_t)result;
    do
    {
      unsigned int v8 = 0;
      uint64_t v9 = v5;
      do
      {
        uint64_t v9 = *(const llvm::Loop **)v9;
        ++v8;
      }
      while (v9);
      if (v8 <= *(_DWORD *)(v7 + 32))
      {
        BOOL result = (unint64_t *)llvm::ScalarEvolution::isLoopInvariant(*(llvm::ScalarEvolution **)(v7 + 8), a2, v5);
        if ((result & 1) == 0) {
          BOOL result = sub_1CBFD7E40(a4, v8);
        }
      }
      uint64_t v5 = *(const llvm::Loop **)v5;
    }
    while (v5);
  }
  return result;
}

unint64_t llvm::DependenceInfo::unifySubscriptType(unint64_t result, llvm::SCEV ***a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a2;
    unint64_t v4 = result;
    unsigned int v5 = 0;
    size_t v6 = 0;
    uint64_t v7 = 8 * a3;
    uint64_t v8 = 8 * a3;
    uint64_t v9 = a2;
    do
    {
      char v10 = (*v9)[1];
      uint64_t Type = llvm::SCEV::getType(**v9);
      if (*(unsigned char *)(Type + 8) == 13) {
        uint64_t v12 = Type;
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = llvm::SCEV::getType(v10);
      if (*(unsigned char *)(v13 + 8) == 13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      if (v12) {
        BOOL v15 = v14 == 0;
      }
      else {
        BOOL v15 = 1;
      }
      if (!v15)
      {
        unsigned int v16 = *(_DWORD *)(v12 + 8) >> 8;
        if (v16 <= v5) {
          unsigned int v17 = v6;
        }
        else {
          unsigned int v17 = (uint64_t **)v12;
        }
        if (v16 <= v5) {
          unsigned int v16 = v5;
        }
        unsigned int v18 = *(_DWORD *)(v14 + 8) >> 8;
        if (v18 <= v16) {
          size_t v6 = v17;
        }
        else {
          size_t v6 = (uint64_t **)v14;
        }
        if (v18 <= v16) {
          unsigned int v5 = v16;
        }
        else {
          unsigned int v5 = *(_DWORD *)(v14 + 8) >> 8;
        }
      }
      ++v9;
      v8 -= 8;
    }
    while (v8);
    do
    {
      uint64_t v19 = *v3;
      uint64_t v21 = **v3;
      uint64_t v20 = (*v3)[1];
      uint64_t v22 = llvm::SCEV::getType(v21);
      if (*(unsigned char *)(v22 + 8) == 13) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      BOOL result = llvm::SCEV::getType(v20);
      if (*(unsigned char *)(result + 8) == 13) {
        unint64_t v24 = result;
      }
      else {
        unint64_t v24 = 0;
      }
      if (v23) {
        BOOL v25 = v24 == 0;
      }
      else {
        BOOL v25 = 1;
      }
      if (!v25)
      {
        if (v5 > *(_DWORD *)(v23 + 8) >> 8)
        {
          BOOL result = llvm::ScalarEvolution::getSignExtendExpr(*(llvm::ScalarEvolution **)(v4 + 8), (llvm::detail::IEEEFloat **)v21, v6, 0);
          *uint64_t v19 = (llvm::SCEV *)result;
        }
        if (v5 > *(_DWORD *)(v24 + 8) >> 8)
        {
          BOOL result = llvm::ScalarEvolution::getSignExtendExpr(*(llvm::ScalarEvolution **)(v4 + 8), (llvm::detail::IEEEFloat **)v20, v6, 0);
          v19[1] = (llvm::SCEV *)result;
        }
      }
      ++v3;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

void llvm::DependenceInfo::removeMatchingExtensions(uint64_t a1, llvm::SCEV **a2)
{
  uint64_t v3 = a2[1];
  int v4 = *((unsigned __int16 *)*a2 + 12);
  if (v4 == 3)
  {
    if (*((_WORD *)v3 + 12) != 3) {
      return;
    }
    goto LABEL_6;
  }
  if (v4 == 2 && *((_WORD *)v3 + 12) == 2)
  {
LABEL_6:
    unsigned int v5 = (llvm::SCEV *)*((void *)*a2 + 4);
    size_t v6 = (llvm::SCEV *)*((void *)v3 + 4);
    uint64_t Type = llvm::SCEV::getType(v5);
    if (Type == llvm::SCEV::getType(v6))
    {
      *a2 = v5;
      a2[1] = v6;
    }
  }
}

BOOL llvm::DependenceInfo::checkSubscript(uint64_t a1, llvm::SCEV *a2, const llvm::Loop *a3, unint64_t *a4, char a5)
{
  uint64_t v6 = (uint64_t)a2;
  if (a2 && *((_WORD *)a2 + 12) == 7)
  {
    while (1)
    {
      char v10 = **(llvm::SCEV ***)(v6 + 32);
      unsigned int v11 = (const llvm::SCEV *)sub_1CBFD7EA0(v6, *(llvm::ScalarEvolution **)(a1 + 8));
      BackedgeTakenCount = llvm::ScalarEvolution::getBackedgeTakenCount(*(llvm::ScalarEvolution **)(a1 + 8), *(const llvm::Loop **)(v6 + 48), 0);
      if (*((_WORD *)BackedgeTakenCount + 12) != 15)
      {
        uint64_t v13 = BackedgeTakenCount;
        uint64_t v14 = *(llvm::ScalarEvolution **)(a1 + 8);
        uint64_t Type = (llvm::Type *)llvm::SCEV::getType(v10);
        Typeint SizeInBits = llvm::ScalarEvolution::getTypeSizeInBits(v14, Type);
        unsigned int v17 = *(llvm::ScalarEvolution **)(a1 + 8);
        unsigned int v18 = (llvm::Type *)llvm::SCEV::getType(v13);
        if (TypeSizeInBits < llvm::ScalarEvolution::getTypeSizeInBits(v17, v18) && (*(_WORD *)(v6 + 28) & 7) == 0) {
          return 0;
        }
      }
      if (a3) {
        break;
      }
LABEL_10:
      uint64_t v21 = *(void **)(v6 + 48);
      unsigned int v22 = 0;
      if (a5)
      {
        do
        {
          uint64_t v21 = (void *)*v21;
          ++v22;
        }
        while (v21);
      }
      else
      {
        do
        {
          uint64_t v21 = (void *)*v21;
          ++v22;
        }
        while (v21);
        unsigned int v23 = *(_DWORD *)(a1 + 32);
        if (v22 > v23) {
          v22 += *(_DWORD *)(a1 + 36) - v23;
        }
      }
      sub_1CBFD7E40(a4, v22);
      if (v10)
      {
        uint64_t v6 = (uint64_t)v10;
        if (*((_WORD *)v10 + 12) == 7) {
          continue;
        }
      }
      goto LABEL_20;
    }
    uint64_t v19 = a3;
    while (1)
    {
      BOOL result = llvm::ScalarEvolution::isLoopInvariant(*(llvm::ScalarEvolution **)(a1 + 8), v11, v19);
      if (!result) {
        break;
      }
      uint64_t v19 = *(const llvm::Loop **)v19;
      if (!v19) {
        goto LABEL_10;
      }
    }
  }
  else
  {
    char v10 = a2;
LABEL_20:
    if (a3)
    {
      do
      {
        BOOL result = llvm::ScalarEvolution::isLoopInvariant(*(llvm::ScalarEvolution **)(a1 + 8), v10, a3);
        if (!result) {
          break;
        }
        a3 = *(const llvm::Loop **)a3;
      }
      while (a3);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t llvm::DependenceInfo::classifyPair(uint64_t a1, llvm::SCEV *a2, const llvm::Loop *a3, llvm::SCEV *a4, const llvm::Loop *a5, uint64_t *a6)
{
  sub_1CBFDFD98(&v50, *(_DWORD *)(a1 + 40) + 1, 0);
  sub_1CBFDFD98(&v49, *(_DWORD *)(a1 + 40) + 1, 0);
  if (!llvm::DependenceInfo::checkSubscript(a1, a2, a3, &v50, 1)
    || !llvm::DependenceInfo::checkSubscript(a1, a4, a5, &v49, 0))
  {
    uint64_t v12 = 4;
    goto LABEL_3;
  }
  sub_1CBC563DC(a6, (uint64_t *)&v50);
  sub_1CBC56144((unint64_t *)a6, &v49);
  unint64_t v14 = *a6;
  if (*a6)
  {
    uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)((v14 >> 1) & ~(-1 << (v14 >> 58))));
    v20.i16[0] = vaddlv_u8(v20);
    uint64_t v12 = v20.u32[0];
  }
  else
  {
    uint64_t v15 = *(unsigned int *)(v14 + 8);
    if (!v15)
    {
      uint64_t v12 = 0;
      goto LABEL_3;
    }
    LODWORD(v12) = 0;
    unsigned int v16 = *(int8x8_t **)v14;
    uint64_t v17 = 8 * v15;
    do
    {
      int8x8_t v18 = *v16++;
      uint8x8_t v19 = (uint8x8_t)vcnt_s8(v18);
      v19.i16[0] = vaddlv_u8(v19);
      uint64_t v12 = (v12 + v19.i32[0]);
      v17 -= 8;
    }
    while (v17);
  }
  if (v12)
  {
    if (v12 != 2)
    {
      if (v12 != 1)
      {
LABEL_14:
        uint64_t v12 = 3;
        goto LABEL_3;
      }
      goto LABEL_3;
    }
    if (v50)
    {
      uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)((v50 >> 1) & ~(-1 << (v50 >> 58))));
      v27.i16[0] = vaddlv_u8(v27);
      __int32 v22 = v27.i32[0];
    }
    else
    {
      uint64_t v21 = *(unsigned int *)(v50 + 8);
      if (!v21) {
        goto LABEL_44;
      }
      __int32 v22 = 0;
      unsigned int v23 = *(int8x8_t **)v50;
      uint64_t v24 = 8 * v21;
      do
      {
        int8x8_t v25 = *v23++;
        uint8x8_t v26 = (uint8x8_t)vcnt_s8(v25);
        v26.i16[0] = vaddlv_u8(v26);
        v22 += v26.i32[0];
        v24 -= 8;
      }
      while (v24);
    }
    if (v22)
    {
      if (v49)
      {
        uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)((v49 >> 1) & ~(-1 << (v49 >> 58))));
        v34.i16[0] = vaddlv_u8(v34);
        __int32 v29 = v34.i32[0];
      }
      else
      {
        uint64_t v28 = *(unsigned int *)(v49 + 8);
        if (!v28) {
          goto LABEL_44;
        }
        __int32 v29 = 0;
        unsigned int v30 = *(int8x8_t **)v49;
        uint64_t v31 = 8 * v28;
        do
        {
          int8x8_t v32 = *v30++;
          uint8x8_t v33 = (uint8x8_t)vcnt_s8(v32);
          v33.i16[0] = vaddlv_u8(v33);
          v29 += v33.i32[0];
          v31 -= 8;
        }
        while (v31);
      }
      if (v29)
      {
        if (v50)
        {
          uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)((v50 >> 1) & ~(-1 << (v50 >> 58))));
          v41.i16[0] = vaddlv_u8(v41);
          __int32 v36 = v41.i32[0];
        }
        else
        {
          uint64_t v35 = *(unsigned int *)(v50 + 8);
          if (!v35) {
            goto LABEL_14;
          }
          __int32 v36 = 0;
          uint64_t v37 = *(int8x8_t **)v50;
          uint64_t v38 = 8 * v35;
          do
          {
            int8x8_t v39 = *v37++;
            uint8x8_t v40 = (uint8x8_t)vcnt_s8(v39);
            v40.i16[0] = vaddlv_u8(v40);
            v36 += v40.i32[0];
            v38 -= 8;
          }
          while (v38);
        }
        if (v36 != 1) {
          goto LABEL_14;
        }
        if (v49)
        {
          uint8x8_t v48 = (uint8x8_t)vcnt_s8((int8x8_t)((v49 >> 1) & ~(-1 << (v49 >> 58))));
          v48.i16[0] = vaddlv_u8(v48);
          __int32 v43 = v48.i32[0];
        }
        else
        {
          uint64_t v42 = *(unsigned int *)(v49 + 8);
          if (!v42) {
            goto LABEL_14;
          }
          __int32 v43 = 0;
          unsigned int v44 = *(int8x8_t **)v49;
          uint64_t v45 = 8 * v42;
          do
          {
            int8x8_t v46 = *v44++;
            uint8x8_t v47 = (uint8x8_t)vcnt_s8(v46);
            v47.i16[0] = vaddlv_u8(v47);
            v43 += v47.i32[0];
            v45 -= 8;
          }
          while (v45);
        }
        if (v43 != 1) {
          goto LABEL_14;
        }
      }
    }
LABEL_44:
    uint64_t v12 = 2;
  }
LABEL_3:
  sub_1CB9F9ED4((void ***)&v49);
  sub_1CB9F9ED4((void ***)&v50);
  return v12;
}

BOOL llvm::DependenceInfo::isKnownNonNegative(llvm::ScalarEvolution **this, const llvm::SCEV *a2, const llvm::Value *a3)
{
  if (a3
    && *((unsigned char *)a3 + 16) == 62
    && llvm::GetElementPtrInst::isInBounds(a3)
    && a2
    && *((_WORD *)a2 + 12) == 7
    && *((void *)a2 + 5) == 2
    && llvm::ScalarEvolution::isKnownNonNegative(this[1], **((const llvm::SCEV ***)a2 + 4))
    && llvm::ScalarEvolution::isKnownNonNegative(this[1], *(const llvm::SCEV **)(*((void *)a2 + 4) + 8)))
  {
    return 1;
  }
  uint64_t v6 = this[1];

  return llvm::ScalarEvolution::isKnownNonNegative(v6, a2);
}

llvm::detail::IEEEFloat **llvm::DependenceInfo::collectUpperBound(llvm::ScalarEvolution **this, const llvm::Loop *a2, llvm::Type *a3)
{
  if (!llvm::ScalarEvolution::hasLoopInvariantBackedgeTakenCount(this[1], a2)) {
    return 0;
  }
  BackedgeTakenCount = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::getBackedgeTakenCount(this[1], a2, 0);
  uint64_t v7 = this[1];

  return llvm::ScalarEvolution::getTruncateOrZeroExtend(v7, BackedgeTakenCount, a3, 0);
}

BOOL llvm::DependenceInfo::strongSIVtest(llvm::ScalarEvolution **this, const llvm::SCEV *a2, const llvm::SCEV *a3, const llvm::SCEV *a4, const llvm::Loop *a5, int a6, llvm::FullDependence *a7, llvm::DependenceInfo::Constraint *a8)
{
  unint64_t MinusSCEV = llvm::ScalarEvolution::getMinusSCEV(this[1], a3, a4, 0, 0);
  uint64_t Type = (llvm::Type *)llvm::SCEV::getType((llvm::SCEV *)MinusSCEV);
  unsigned int v16 = llvm::DependenceInfo::collectUpperBound(this, a5, Type);
  if (v16)
  {
    uint64_t v36 = (uint64_t)v16;
    unint64_t NegativeSCEV = MinusSCEV;
    if (!llvm::ScalarEvolution::isKnownNonNegative(this[1], (const llvm::SCEV *)MinusSCEV)) {
      unint64_t NegativeSCEV = llvm::ScalarEvolution::getNegativeSCEV(this[1], MinusSCEV, 0);
    }
    BOOL isKnownNonNegative = llvm::ScalarEvolution::isKnownNonNegative(this[1], a2);
    int8x8_t v39 = a2;
    if (!isKnownNonNegative) {
      int8x8_t v39 = (const llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV(this[1], (uint64_t)a2, 0);
    }
    uint64_t v40 = sub_1CBFD7CB4((uint64_t)this[1], v36, (uint64_t)v39, 0, 0);
    if (llvm::DependenceInfo::isKnownPredicate((uint64_t)this, 0x26u, NegativeSCEV, v40)) {
      return 1;
    }
  }
  uint64_t v18 = (a6 - 1);
  if (*(_WORD *)(MinusSCEV + 24) || *((_WORD *)a2 + 12))
  {
    if (llvm::SCEV::isZero((llvm::SCEV *)MinusSCEV))
    {
      *(void *)(*((void *)a7 + 6) + 16 * v18 + 8) = MinusSCEV;
      llvm::DependenceInfo::Constraint::setDistance(a8, (const llvm::SCEV *)MinusSCEV, a5);
      *(unsigned char *)(*((void *)a7 + 6) + 16 * (a6 - 1)) &= 0xFAu;
    }
    else
    {
      if (llvm::SCEV::isOne(a2))
      {
        *(void *)(*((void *)a7 + 6) + 16 * v18 + 8) = MinusSCEV;
        llvm::DependenceInfo::Constraint::setDistance(a8, (const llvm::SCEV *)MinusSCEV, a5);
      }
      else
      {
        *((unsigned char *)a7 + 43) = 0;
        unint64_t v19 = llvm::ScalarEvolution::getNegativeSCEV(this[1], (uint64_t)a2, 0);
        unint64_t v20 = llvm::ScalarEvolution::getNegativeSCEV(this[1], MinusSCEV, 0);
        *(_DWORD *)a8 = 3;
        *((void *)a8 + 2) = a2;
        *((void *)a8 + 3) = v19;
        *((void *)a8 + 4) = v20;
        *((void *)a8 + 5) = a5;
      }
      int isKnownNonZero = llvm::ScalarEvolution::isKnownNonZero(this[1], (const llvm::SCEV *)MinusSCEV);
      BOOL isKnownNonPositive = llvm::ScalarEvolution::isKnownNonPositive(this[1], (const llvm::SCEV *)MinusSCEV);
      BOOL v23 = llvm::ScalarEvolution::isKnownNonNegative(this[1], (const llvm::SCEV *)MinusSCEV);
      BOOL v24 = llvm::ScalarEvolution::isKnownNonPositive(this[1], a2);
      BOOL v25 = llvm::ScalarEvolution::isKnownNonNegative(this[1], a2);
      char v26 = !isKnownNonPositive && !v24 || !v23 && !v25;
      if (!isKnownNonZero) {
        v26 |= 2u;
      }
      if (!v23 && !v24 || !isKnownNonPositive && !v25) {
        v26 |= 4u;
      }
      *(unsigned char *)(*((void *)a7 + 6) + 16 * v18) &= v26 | 0xF8;
    }
    return 0;
  }
  uint64_t v28 = *(void *)(MinusSCEV + 32);
  unsigned int v29 = *(_DWORD *)(v28 + 32);
  unsigned int v54 = v29;
  if (v29 > 0x40) {
    operator new[]();
  }
  unsigned int v30 = *(void **)(v28 + 24);
  uint64_t v53 = *(void *)(v28 + 24);
  uint64_t v31 = *((void *)a2 + 4);
  unsigned int v52 = *(_DWORD *)(v31 + 32);
  if (v52 > 0x40) {
    operator new[]();
  }
  uint64_t v51 = *(void *)(v31 + 24);
  unsigned int v50 = v29;
  unint64_t v49 = v30;
  unsigned int v48 = v29;
  uint8x8_t v47 = v30;
  llvm::APInt::sdivrem((llvm::APInt *)&v53, (const llvm::APInt *)&v51, (const llvm::APInt *)&v49, (llvm::APInt *)&v47, v17);
  unsigned int v33 = v48;
  if (v48 >= 0x41 && v33 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v47) > 0x40) {
    goto LABEL_23;
  }
  uint8x8_t v34 = v47;
  if (v33 < 0x41) {
    uint8x8_t v34 = &v47;
  }
  if (*v34)
  {
LABEL_23:
    char v35 = 1;
  }
  else
  {
    *(void *)(*((void *)a7 + 6) + 16 * v18 + 8) = llvm::ScalarEvolution::getConstant((llvm::ConstantInt ****)this[1], (const llvm::APInt *)&v49, v32);
    unint64_t Constant = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant((llvm::ConstantInt ****)this[1], (const llvm::APInt *)&v49, v41);
    llvm::DependenceInfo::Constraint::setDistance(a8, Constant, a5);
    if (sub_1CBFD8350((llvm::APInt *)&v49, 0))
    {
      char v35 = 0;
      *(unsigned char *)(*((void *)a7 + 6) + 16 * v18) &= 0xF9u;
    }
    else
    {
      int v43 = sub_1CBFC5D80((llvm::APInt *)&v49, 0);
      unsigned int v44 = (char *)(*((void *)a7 + 6) + 16 * v18);
      char v45 = *v44;
      char v35 = 0;
      if (v43) {
        char v46 = v45 & 0xFC;
      }
      else {
        char v46 = v45 & 0xFA;
      }
      char *v44 = v46;
    }
  }
  if (v48 >= 0x41 && v47) {
    MEMORY[0x1D25D9CB0](v47, 0x1000C8000313F17);
  }
  if (v50 >= 0x41 && v49) {
    MEMORY[0x1D25D9CB0](v49, 0x1000C8000313F17);
  }
  if (v52 >= 0x41 && v51) {
    MEMORY[0x1D25D9CB0](v51, 0x1000C8000313F17);
  }
  if (v54 >= 0x41 && v53) {
    MEMORY[0x1D25D9CB0](v53, 0x1000C8000313F17);
  }
  return (v35 & 1) != 0;
}

BOOL llvm::DependenceInfo::weakCrossingSIVtest(llvm::ScalarEvolution **this, const llvm::SCEV *a2, const llvm::SCEV *a3, const llvm::SCEV *a4, const llvm::Loop *a5, int a6, llvm::FullDependence *a7, llvm::DependenceInfo::Constraint *a8, const llvm::SCEV **a9)
{
  uint64_t v14 = (a6 - 1);
  *((unsigned char *)a7 + 43) = 0;
  unint64_t MinusSCEV = llvm::ScalarEvolution::getMinusSCEV(this[1], a4, a3, 0, 0);
  *(_DWORD *)a8 = 3;
  *((void *)a8 + 2) = a2;
  *((void *)a8 + 3) = a2;
  *((void *)a8 + 4) = MinusSCEV;
  *((void *)a8 + 5) = a5;
  if (llvm::SCEV::isZero((llvm::SCEV *)MinusSCEV))
  {
    uint64_t v16 = 16 * v14;
    *(unsigned char *)(*((void *)a7 + 6) + v16) &= ~1u;
    *(unsigned char *)(*((void *)a7 + 6) + v16) &= ~4u;
    uint64_t v17 = *((void *)a7 + 6);
    if ((*(unsigned char *)(v17 + v16) & 7) != 0)
    {
      BOOL v18 = 0;
      *(void *)(v17 + 16 * v14 + 8) = MinusSCEV;
      return v18;
    }
    return 1;
  }
  BOOL v18 = 0;
  if (a2 && !*((_WORD *)a2 + 12))
  {
    *(unsigned char *)(*((void *)a7 + 6) + 16 * v14) |= 0x40u;
    if (llvm::ScalarEvolution::isKnownNegative(this[1], a2))
    {
      unint64_t NegativeSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV(this[1], (uint64_t)a2, 0);
      if (*((_WORD *)NegativeSCEV + 12)) {
        a2 = 0;
      }
      else {
        a2 = NegativeSCEV;
      }
      unint64_t MinusSCEV = llvm::ScalarEvolution::getNegativeSCEV(this[1], MinusSCEV, 0);
    }
    unint64_t v20 = this[1];
    uint64_t Type = (llvm::Type *)llvm::SCEV::getType((llvm::SCEV *)MinusSCEV);
    unint64_t Constant = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v20, Type, 0, 0);
    SMaxExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getSMaxExpr(v20, Constant, (const llvm::SCEV *)MinusSCEV);
    BOOL v24 = this[1];
    BOOL v25 = (llvm::Type *)llvm::SCEV::getType((llvm::SCEV *)MinusSCEV);
    unint64_t v26 = llvm::ScalarEvolution::getConstant(v24, v25, 2uLL, 0);
    unint64_t v27 = sub_1CBFD7CB4((uint64_t)v24, v26, (uint64_t)a2, 0, 0);
    UDivExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getUDivExpr(v20, SMaxExpr, v27);
    BOOL v18 = 0;
    *a9 = UDivExpr;
    if (MinusSCEV)
    {
      if (!*(_WORD *)(MinusSCEV + 24))
      {
        if (llvm::ScalarEvolution::isKnownNegative(this[1], (const llvm::SCEV *)MinusSCEV)) {
          return 1;
        }
        unsigned int v30 = (llvm::Type *)llvm::SCEV::getType((llvm::SCEV *)MinusSCEV);
        uint64_t v31 = llvm::DependenceInfo::collectUpperBound(this, a5, v30);
        if (v31)
        {
          uint64_t v42 = (uint64_t)v31;
          int v43 = this[1];
          unsigned int v44 = (llvm::Type *)llvm::SCEV::getType((llvm::SCEV *)v31);
          unint64_t v45 = llvm::ScalarEvolution::getConstant(v43, v44, 2uLL, 0);
          uint64_t v46 = (uint64_t)this[1];
          uint64_t v47 = sub_1CBFD7CB4(v46, (uint64_t)a2, v42, 0, 0);
          uint64_t v48 = sub_1CBFD7CB4(v46, v47, v45, 0, 0);
          if (llvm::DependenceInfo::isKnownPredicate((uint64_t)this, 0x26u, MinusSCEV, v48)) {
            return 1;
          }
          if (llvm::DependenceInfo::isKnownPredicate((uint64_t)this, 0x20u, MinusSCEV, v48))
          {
            uint64_t v49 = 16 * v14;
            *(unsigned char *)(*((void *)a7 + 6) + v49) = *(unsigned char *)(*((void *)a7 + 6) + 16 * v14) & 0xFE;
            *(unsigned char *)(*((void *)a7 + 6) + v49) = *(unsigned char *)(*((void *)a7 + 6) + 16 * v14) & 0xFB;
            unsigned int v50 = (unsigned char *)(*((void *)a7 + 6) + 16 * v14);
            if ((*v50 & 7) != 0)
            {
              *v50 &= ~0x40u;
              uint64_t v51 = this[1];
              unsigned int v52 = (llvm::Type *)llvm::SCEV::getType((llvm::SCEV *)MinusSCEV);
              BOOL v18 = 0;
              *(void *)(*((void *)a7 + 6) + 16 * v14 + 8) = llvm::ScalarEvolution::getConstant(v51, v52, 0, 0);
              return v18;
            }
            return 1;
          }
        }
        uint64_t v33 = *(void *)(MinusSCEV + 32);
        unsigned int v34 = *(_DWORD *)(v33 + 32);
        unsigned int v64 = v34;
        if (v34 > 0x40) {
          operator new[]();
        }
        char v35 = *(void **)(v33 + 24);
        uint64_t v63 = *(void *)(v33 + 24);
        uint64_t v36 = *((void *)a2 + 4);
        unsigned int v62 = *(_DWORD *)(v36 + 32);
        if (v62 > 0x40) {
          operator new[]();
        }
        uint64_t v61 = *(void *)(v36 + 24);
        unsigned int v60 = v34;
        unsigned int v59 = v35;
        unsigned int v58 = v34;
        uint64_t v57 = v35;
        llvm::APInt::sdivrem((llvm::APInt *)&v63, (const llvm::APInt *)&v61, (const llvm::APInt *)&v59, (llvm::APInt *)&v57, v32);
        unsigned int v37 = v58;
        if (v58 >= 0x41 && v37 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v57) > 0x40)
        {
          BOOL v18 = 1;
          goto LABEL_37;
        }
        uint64_t v38 = v57;
        if (v37 < 0x41) {
          uint64_t v38 = (uint64_t *)&v57;
        }
        uint64_t v39 = *v38;
        BOOL v18 = v39 != 0;
        if (v39)
        {
LABEL_28:
          if (v37 < 0x41)
          {
LABEL_39:
            if (v60 >= 0x41 && v59) {
              MEMORY[0x1D25D9CB0](v59, 0x1000C8000313F17);
            }
            if (v62 >= 0x41 && v61) {
              MEMORY[0x1D25D9CB0](v61, 0x1000C8000313F17);
            }
            if (v64 >= 0x41 && v63) {
              MEMORY[0x1D25D9CB0](v63, 0x1000C8000313F17);
            }
            return v18;
          }
LABEL_37:
          if (v57) {
            MEMORY[0x1D25D9CB0](v57, 0x1000C8000313F17);
          }
          goto LABEL_39;
        }
        sub_1CB8F1EEC((uint64_t)&v55, v60, 2);
        llvm::APInt::srem((llvm::APInt *)&v59, (const llvm::APInt *)&v55, (uint64_t)&v53);
        if (v58 >= 0x41 && v57) {
          MEMORY[0x1D25D9CB0](v57, 0x1000C8000313F17);
        }
        uint64_t v40 = v53;
        uint64_t v57 = v53;
        unsigned int v41 = v54;
        unsigned int v58 = v54;
        if (v54 >= 0x41)
        {
          if (v41 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v57) > 0x40) {
            goto LABEL_50;
          }
          uint64_t v40 = (void *)*v40;
        }
        if (!v40)
        {
LABEL_51:
          if (v56 >= 0x41 && v55) {
            MEMORY[0x1D25D9CB0](v55, 0x1000C8000313F17);
          }
          unsigned int v37 = v58;
          goto LABEL_28;
        }
LABEL_50:
        *(unsigned char *)(*((void *)a7 + 6) + 16 * v14) &= ~2u;
        goto LABEL_51;
      }
    }
  }
  return v18;
}

BOOL llvm::DependenceInfo::exactSIVtest(llvm::ScalarEvolution **this, const llvm::SCEV *a2, const llvm::SCEV *a3, const llvm::SCEV *a4, const llvm::SCEV *a5, const llvm::Loop *a6, int a7, llvm::FullDependence *a8, llvm::DependenceInfo::Constraint *a9)
{
  v155[4] = *MEMORY[0x1E4F143B8];
  *((unsigned char *)a8 + 43) = 0;
  unint64_t MinusSCEV = (llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV(this[1], a5, a4, 0, 0);
  unint64_t NegativeSCEV = llvm::ScalarEvolution::getNegativeSCEV(this[1], (uint64_t)a3, 0);
  BOOL v16 = 0;
  *(_DWORD *)a9 = 3;
  *((void *)a9 + 2) = a2;
  *((void *)a9 + 3) = NegativeSCEV;
  *((void *)a9 + 4) = MinusSCEV;
  *((void *)a9 + 5) = a6;
  if (*((_WORD *)MinusSCEV + 12)) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = MinusSCEV;
  }
  if (*((_WORD *)a2 + 12)) {
    BOOL v18 = 0;
  }
  else {
    BOOL v18 = a2;
  }
  if (*((_WORD *)a3 + 12)) {
    unint64_t v19 = 0;
  }
  else {
    unint64_t v19 = a3;
  }
  if (v17) {
    BOOL v20 = v18 == 0;
  }
  else {
    BOOL v20 = 1;
  }
  if (v20 || v19 == 0) {
    return v16;
  }
  unsigned int v149 = 1;
  uint64_t v148 = 0;
  unsigned int v147 = 1;
  uint64_t v146 = 0;
  unsigned int v145 = 1;
  uint64_t v144 = 0;
  uint64_t v23 = *((void *)v18 + 4);
  uint64_t v24 = *(unsigned int *)(v23 + 32);
  unsigned int v143 = v24;
  if (v24 > 0x40) {
    operator new[]();
  }
  uint64_t v142 = *(void *)(v23 + 24);
  uint64_t v25 = *((void *)v19 + 4);
  unsigned int v141 = *(_DWORD *)(v25 + 32);
  if (v141 > 0x40) {
    operator new[]();
  }
  uint64_t v140 = *(void *)(v25 + 24);
  uint64_t v26 = *((void *)v17 + 4);
  unsigned int v139 = *(_DWORD *)(v26 + 32);
  if (v139 > 0x40) {
    operator new[]();
  }
  uint64_t v138 = *(void *)(v26 + 24);
  if (!sub_1CBFD8408(v24, (unsigned int *)&v142, (unsigned int *)&v140, (llvm::APInt *)&v138, (uint64_t)&v148, (uint64_t)&v146, (uint64_t)&v144))
  {
    char v27 = 1;
    sub_1CB8F1EEC((uint64_t)&v136, v24, 1);
    uint64_t Type = (llvm::Type *)llvm::SCEV::getType(MinusSCEV);
    unsigned int v29 = llvm::DependenceInfo::collectUpperBound(this, a6, Type);
    if (v29)
    {
      if (*((_WORD *)v29 + 12))
      {
        char v27 = 1;
      }
      else
      {
        unsigned int v30 = v29[4];
        uint64_t v31 = (llvm::detail::IEEEFloat *)((char *)v30 + 24);
        if (v137 > 0x40 || (unsigned int v32 = *((_DWORD *)v30 + 8), v32 > 0x40))
        {
          llvm::APInt::assignSlowCase((const llvm::APInt *)&v136, v31);
          char v27 = 0;
        }
        else
        {
          char v27 = 0;
          v136 = *(void **)v31;
          unsigned int v137 = v32;
        }
      }
    }
    sub_1CBFD9168(v24, (llvm::APInt *)&v134);
    sub_1CBA62420(v24, (llvm::APInt *)&v132);
    llvm::APInt::sdiv((llvm::APInt *)&v138, (const llvm::APInt *)&v148, (uint64_t)&v130);
    llvm::APInt::operator*((uint64_t)&v146, &v130, (uint64_t)&__src);
    llvm::APInt::operator*((uint64_t)&v144, &v130, (uint64_t)&v126);
    v153 = (llvm::APInt *)v155;
    uint64_t v154 = 0x200000000;
    v150 = (llvm::APInt *)&v152;
    uint64_t v151 = 0x200000000;
    llvm::APInt::sdiv((llvm::APInt *)&v140, (const llvm::APInt *)&v148, (uint64_t)&v124);
    if (sub_1CBFD8350((llvm::APInt *)&v124, 0))
    {
      unsigned int v119 = v129;
      if (v129 > 0x40) {
        operator new[]();
      }
      uint64_t v118 = __src;
      sub_1CBA14940((uint64_t)&v118);
      llvm::APInt::operator++((uint64_t)&v118);
      unsigned int v121 = v119;
      uint64_t v120 = v118;
      unsigned int v119 = 0;
      sub_1CBFD9290((uint64_t)&v122, (llvm::APInt *)&v120, (llvm::APInt *)&v124, v33, v34);
      sub_1CBFD91F8((uint64_t)&v153, (unint64_t)&v122);
      if (v123 >= 0x41 && v122) {
        MEMORY[0x1D25D9CB0](v122, 0x1000C8000313F17);
      }
      if (v121 >= 0x41 && v120) {
        MEMORY[0x1D25D9CB0](v120, 0x1000C8000313F17);
      }
      if (v119 >= 0x41 && v118) {
        MEMORY[0x1D25D9CB0](v118, 0x1000C8000313F17);
      }
      if ((v27 & 1) == 0)
      {
        unsigned int v117 = v137;
        if (v137 > 0x40) {
          operator new[]();
        }
        uint64_t v116 = v136;
        llvm::APInt::operator-=((uint64_t)&v116, (unint64_t **)&__src);
        unsigned int v121 = v117;
        uint64_t v120 = v116;
        unsigned int v117 = 0;
        sub_1CBFD9768((uint64_t)&v122, (llvm::APInt *)&v120, (llvm::APInt *)&v124, v51, v52);
        sub_1CBFD91F8((uint64_t)&v150, (unint64_t)&v122);
        if (v123 >= 0x41 && v122) {
          MEMORY[0x1D25D9CB0](v122, 0x1000C8000313F17);
        }
        if (v121 >= 0x41 && v120) {
          MEMORY[0x1D25D9CB0](v120, 0x1000C8000313F17);
        }
        if (v117 >= 0x41 && v116) {
LABEL_178:
        }
          MEMORY[0x1D25D9CB0]();
      }
    }
    else
    {
      unsigned int v115 = v129;
      if (v129 > 0x40) {
        operator new[]();
      }
      uint64_t v114 = __src;
      sub_1CBA14940((uint64_t)&v114);
      llvm::APInt::operator++((uint64_t)&v114);
      unsigned int v121 = v115;
      uint64_t v120 = v114;
      unsigned int v115 = 0;
      sub_1CBFD9768((uint64_t)&v122, (llvm::APInt *)&v120, (llvm::APInt *)&v124, v35, v36);
      sub_1CBFD91F8((uint64_t)&v150, (unint64_t)&v122);
      if (v123 >= 0x41 && v122) {
        MEMORY[0x1D25D9CB0](v122, 0x1000C8000313F17);
      }
      if (v121 >= 0x41 && v120) {
        MEMORY[0x1D25D9CB0](v120, 0x1000C8000313F17);
      }
      if (v115 >= 0x41 && v114) {
        MEMORY[0x1D25D9CB0](v114, 0x1000C8000313F17);
      }
      if ((v27 & 1) == 0)
      {
        unsigned int v113 = v137;
        if (v137 > 0x40) {
          operator new[]();
        }
        uint64_t v112 = v136;
        llvm::APInt::operator-=((uint64_t)&v112, (unint64_t **)&__src);
        unsigned int v121 = v113;
        uint64_t v120 = v112;
        unsigned int v113 = 0;
        sub_1CBFD9290((uint64_t)&v122, (llvm::APInt *)&v120, (llvm::APInt *)&v124, v53, v54);
        sub_1CBFD91F8((uint64_t)&v153, (unint64_t)&v122);
        if (v123 >= 0x41 && v122) {
          MEMORY[0x1D25D9CB0](v122, 0x1000C8000313F17);
        }
        if (v121 >= 0x41 && v120) {
          MEMORY[0x1D25D9CB0](v120, 0x1000C8000313F17);
        }
        if (v113 >= 0x41 && v112) {
          goto LABEL_178;
        }
      }
    }
    llvm::APInt::sdiv((llvm::APInt *)&v142, (const llvm::APInt *)&v148, (uint64_t)&v122);
    if (sub_1CBFD8350((llvm::APInt *)&v122, 0))
    {
      if ((v27 & 1) == 0)
      {
        unsigned int v109 = v137;
        if (v137 > 0x40) {
          operator new[]();
        }
        uint64_t v108 = v136;
        llvm::APInt::operator-=((uint64_t)&v108, (unint64_t **)&v126);
        unsigned int v111 = v109;
        uint64_t v110 = v108;
        unsigned int v109 = 0;
        sub_1CBFD9768((uint64_t)&v120, (llvm::APInt *)&v110, (llvm::APInt *)&v122, v55, v56);
        sub_1CBFD91F8((uint64_t)&v150, (unint64_t)&v120);
        if (v121 >= 0x41 && v120) {
          MEMORY[0x1D25D9CB0](v120, 0x1000C8000313F17);
        }
        if (v111 >= 0x41 && v110) {
          MEMORY[0x1D25D9CB0](v110, 0x1000C8000313F17);
        }
        if (v109 >= 0x41 && v108) {
          MEMORY[0x1D25D9CB0](v108, 0x1000C8000313F17);
        }
      }
      unsigned int v107 = v127;
      if (v127 > 0x40) {
        operator new[]();
      }
      unsigned int v106 = v126;
      sub_1CBA14940((uint64_t)&v106);
      llvm::APInt::operator++((uint64_t)&v106);
      unsigned int v111 = v107;
      uint64_t v110 = v106;
      unsigned int v107 = 0;
      sub_1CBFD9290((uint64_t)&v120, (llvm::APInt *)&v110, (llvm::APInt *)&v122, v37, v38);
      sub_1CBFD91F8((uint64_t)&v153, (unint64_t)&v120);
      if (v121 >= 0x41 && v120) {
        MEMORY[0x1D25D9CB0](v120, 0x1000C8000313F17);
      }
      if (v111 >= 0x41 && v110) {
        MEMORY[0x1D25D9CB0](v110, 0x1000C8000313F17);
      }
      if (v107 < 0x41) {
        goto LABEL_114;
      }
      uint64_t v39 = v106;
      if (!v106) {
        goto LABEL_114;
      }
    }
    else
    {
      if ((v27 & 1) == 0)
      {
        unsigned int v105 = v137;
        if (v137 > 0x40) {
          operator new[]();
        }
        uint64_t v104 = v136;
        llvm::APInt::operator-=((uint64_t)&v104, (unint64_t **)&v126);
        unsigned int v111 = v105;
        uint64_t v110 = v104;
        unsigned int v105 = 0;
        sub_1CBFD9290((uint64_t)&v120, (llvm::APInt *)&v110, (llvm::APInt *)&v122, v57, v58);
        sub_1CBFD91F8((uint64_t)&v153, (unint64_t)&v120);
        if (v121 >= 0x41 && v120) {
          MEMORY[0x1D25D9CB0](v120, 0x1000C8000313F17);
        }
        if (v111 >= 0x41 && v110) {
          MEMORY[0x1D25D9CB0](v110, 0x1000C8000313F17);
        }
        if (v105 >= 0x41 && v104) {
          MEMORY[0x1D25D9CB0](v104, 0x1000C8000313F17);
        }
      }
      unsigned int v103 = v127;
      if (v127 > 0x40) {
        operator new[]();
      }
      unsigned int v102 = v126;
      sub_1CBA14940((uint64_t)&v102);
      llvm::APInt::operator++((uint64_t)&v102);
      unsigned int v111 = v103;
      uint64_t v110 = v102;
      unsigned int v103 = 0;
      sub_1CBFD9768((uint64_t)&v120, (llvm::APInt *)&v110, (llvm::APInt *)&v122, v40, v41);
      sub_1CBFD91F8((uint64_t)&v150, (unint64_t)&v120);
      if (v121 >= 0x41 && v120) {
        MEMORY[0x1D25D9CB0](v120, 0x1000C8000313F17);
      }
      if (v111 >= 0x41 && v110) {
        MEMORY[0x1D25D9CB0](v110, 0x1000C8000313F17);
      }
      if (v103 < 0x41 || (uint64_t v39 = v102) == 0)
      {
LABEL_114:
        BOOL v16 = 0;
        if (!v154) {
          goto LABEL_131;
        }
        unsigned int v42 = v151;
        if (!v151) {
          goto LABEL_131;
        }
        int v43 = (char *)v153;
        unsigned int v44 = (llvm::APInt *)((char *)v153 + 16 * v154 - 16);
        unint64_t v45 = (int)llvm::APInt::compareSigned(v153, v44) <= 0 ? v44 : (const llvm::APInt *)v43;
        if (v133 > 0x40 || (unsigned int v46 = *((_DWORD *)v45 + 2), v46 > 0x40))
        {
          llvm::APInt::assignSlowCase((const llvm::APInt *)&v132, v45);
          unsigned int v42 = v151;
        }
        else
        {
          uint64_t v132 = *(void *)v45;
          unsigned int v133 = v46;
        }
        uint64_t v47 = (char *)v150;
        uint64_t v48 = (llvm::APInt *)((char *)v150 + 16 * v42 - 16);
        uint64_t v49 = (int)llvm::APInt::compareSigned(v150, v48) >= 0 ? v48 : (const llvm::APInt *)v47;
        if (v135 > 0x40 || (unsigned int v50 = *((_DWORD *)v49 + 2), v50 > 0x40))
        {
          llvm::APInt::assignSlowCase((const llvm::APInt *)&v134, v49);
        }
        else
        {
          uint64_t v134 = *(void *)v49;
          unsigned int v135 = v50;
        }
        BOOL v16 = 1;
        if ((int)llvm::APInt::compareSigned((llvm::APInt *)&v132, (const llvm::APInt *)&v134) > 0)
        {
LABEL_131:
          if (v123 >= 0x41 && v122) {
            MEMORY[0x1D25D9CB0](v122, 0x1000C8000313F17);
          }
          if (v125 >= 0x41 && v124) {
            MEMORY[0x1D25D9CB0](v124, 0x1000C8000313F17);
          }
          sub_1CD480C18((char **)&v150);
          sub_1CD480C18((char **)&v153);
          if (v127 >= 0x41 && v126) {
            MEMORY[0x1D25D9CB0](v126, 0x1000C8000313F17);
          }
          if (v129 >= 0x41 && __src) {
            MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
          if (v131 >= 0x41 && v130) {
            MEMORY[0x1D25D9CB0](v130, 0x1000C8000313F17);
          }
          if (v133 >= 0x41 && v132) {
            MEMORY[0x1D25D9CB0](v132, 0x1000C8000313F17);
          }
          if (v135 >= 0x41 && v134) {
            MEMORY[0x1D25D9CB0](v134, 0x1000C8000313F17);
          }
          if (v137 >= 0x41 && v136) {
            MEMORY[0x1D25D9CB0](v136, 0x1000C8000313F17);
          }
          goto LABEL_28;
        }
        unsigned int v121 = 1;
        uint64_t v120 = 0;
        unsigned int v111 = 1;
        uint64_t v110 = 0;
        if ((int)llvm::APInt::compareSigned((llvm::APInt *)&v122, (const llvm::APInt *)&v124) < 1)
        {
          unsigned int v87 = v127;
          if (v127 > 0x40) {
            operator new[]();
          }
          uint64_t v86 = (uint64_t *)v126;
          llvm::APInt::operator-=((uint64_t)&v86, (unint64_t **)&__src);
          unsigned int v61 = v87;
          unsigned int v101 = v87;
          unsigned int v62 = v86;
          uint64_t v100 = v86;
          unsigned int v87 = 0;
          unsigned int v85 = v123;
          if (v123 > 0x40) {
            operator new[]();
          }
          unsigned int v84 = v122;
          llvm::APInt::operator-=((uint64_t)&v84, &v124);
          unsigned int v95 = v85;
          uint64_t v94 = v84;
          unsigned int v85 = 0;
          llvm::APInt::operator*((uint64_t)&v94, &v134, (uint64_t)&v96);
          llvm::APInt::operator+=((uint64_t)&v96, &v100);
          unsigned int v65 = v97;
          uint64_t v66 = v96;
          unsigned int v97 = 0;
          if (v121 > 0x40 && v120)
          {
            MEMORY[0x1D25D9CB0](v120, 0x1000C8000313F17);
            uint64_t v120 = v66;
            unsigned int v121 = v65;
            if (v97 >= 0x41 && v96) {
              MEMORY[0x1D25D9CB0](v96, 0x1000C8000313F17);
            }
          }
          else
          {
            uint64_t v120 = v96;
            unsigned int v121 = v65;
          }
          if (v95 >= 0x41 && v94) {
            MEMORY[0x1D25D9CB0](v94, 0x1000C8000313F17);
          }
          if (v85 >= 0x41 && v84) {
            MEMORY[0x1D25D9CB0](v84, 0x1000C8000313F17);
          }
          if (v61 >= 0x41 && v62) {
            MEMORY[0x1D25D9CB0](v62, 0x1000C8000313F17);
          }
          if (v87 >= 0x41 && v86) {
            MEMORY[0x1D25D9CB0](v86, 0x1000C8000313F17);
          }
          unsigned int v83 = v127;
          if (v127 > 0x40) {
            operator new[]();
          }
          int v82 = (uint64_t *)v126;
          llvm::APInt::operator-=((uint64_t)&v82, (unint64_t **)&__src);
          unsigned int v69 = v83;
          unsigned int v101 = v83;
          uint64_t v70 = v82;
          uint64_t v100 = v82;
          unsigned int v83 = 0;
          unsigned int v81 = v123;
          if (v123 > 0x40) {
            operator new[]();
          }
          uint64_t v80 = v122;
          llvm::APInt::operator-=((uint64_t)&v80, &v124);
          unsigned int v95 = v81;
          uint64_t v94 = v80;
          unsigned int v81 = 0;
          llvm::APInt::operator*((uint64_t)&v94, &v132, (uint64_t)&v96);
          llvm::APInt::operator+=((uint64_t)&v96, &v100);
          unsigned int v74 = v97;
          uint64_t v75 = v96;
          unsigned int v97 = 0;
          if (v111 > 0x40 && v110)
          {
            MEMORY[0x1D25D9CB0](v110, 0x1000C8000313F17);
            uint64_t v110 = v75;
            unsigned int v111 = v74;
            if (v97 >= 0x41 && v96) {
              MEMORY[0x1D25D9CB0](v96, 0x1000C8000313F17);
            }
          }
          else
          {
            uint64_t v110 = v96;
            unsigned int v111 = v74;
          }
          if (v95 >= 0x41 && v94) {
            MEMORY[0x1D25D9CB0](v94, 0x1000C8000313F17);
          }
          if (v81 >= 0x41 && v80) {
            MEMORY[0x1D25D9CB0](v80, 0x1000C8000313F17);
          }
          if (v69 >= 0x41 && v70) {
            MEMORY[0x1D25D9CB0](v70, 0x1000C8000313F17);
          }
          if (v83 < 0x41) {
            goto LABEL_281;
          }
          uint64_t v73 = v82;
          if (!v82) {
            goto LABEL_281;
          }
        }
        else
        {
          unsigned int v99 = v127;
          if (v127 > 0x40) {
            operator new[]();
          }
          uint64_t v98 = (uint64_t *)v126;
          llvm::APInt::operator-=((uint64_t)&v98, (unint64_t **)&__src);
          unsigned int v59 = v99;
          unsigned int v101 = v99;
          unsigned int v60 = v98;
          uint64_t v100 = v98;
          unsigned int v99 = 0;
          unsigned int v93 = v123;
          if (v123 > 0x40) {
            operator new[]();
          }
          uint64_t v92 = v122;
          llvm::APInt::operator-=((uint64_t)&v92, &v124);
          unsigned int v95 = v93;
          uint64_t v94 = v92;
          unsigned int v93 = 0;
          llvm::APInt::operator*((uint64_t)&v94, &v132, (uint64_t)&v96);
          llvm::APInt::operator+=((uint64_t)&v96, &v100);
          unsigned int v63 = v97;
          unsigned int v64 = v96;
          unsigned int v97 = 0;
          if (v121 > 0x40 && v120)
          {
            MEMORY[0x1D25D9CB0](v120, 0x1000C8000313F17);
            uint64_t v120 = v64;
            unsigned int v121 = v63;
            if (v97 >= 0x41 && v96) {
              MEMORY[0x1D25D9CB0](v96, 0x1000C8000313F17);
            }
          }
          else
          {
            uint64_t v120 = v96;
            unsigned int v121 = v63;
          }
          if (v95 >= 0x41 && v94) {
            MEMORY[0x1D25D9CB0](v94, 0x1000C8000313F17);
          }
          if (v93 >= 0x41 && v92) {
            MEMORY[0x1D25D9CB0](v92, 0x1000C8000313F17);
          }
          if (v59 >= 0x41 && v60) {
            MEMORY[0x1D25D9CB0](v60, 0x1000C8000313F17);
          }
          if (v99 >= 0x41 && v98) {
            MEMORY[0x1D25D9CB0](v98, 0x1000C8000313F17);
          }
          unsigned int v91 = v127;
          if (v127 > 0x40) {
            operator new[]();
          }
          uint64_t v90 = (uint64_t *)v126;
          llvm::APInt::operator-=((uint64_t)&v90, (unint64_t **)&__src);
          unsigned int v67 = v91;
          unsigned int v101 = v91;
          unsigned int v68 = v90;
          uint64_t v100 = v90;
          unsigned int v91 = 0;
          unsigned int v89 = v123;
          if (v123 > 0x40) {
            operator new[]();
          }
          uint64_t v88 = v122;
          llvm::APInt::operator-=((uint64_t)&v88, &v124);
          unsigned int v95 = v89;
          uint64_t v94 = v88;
          unsigned int v89 = 0;
          llvm::APInt::operator*((uint64_t)&v94, &v134, (uint64_t)&v96);
          llvm::APInt::operator+=((uint64_t)&v96, &v100);
          unsigned int v71 = v97;
          uint64_t v72 = v96;
          unsigned int v97 = 0;
          if (v111 > 0x40 && v110)
          {
            MEMORY[0x1D25D9CB0](v110, 0x1000C8000313F17);
            uint64_t v110 = v72;
            unsigned int v111 = v71;
            if (v97 >= 0x41 && v96) {
              MEMORY[0x1D25D9CB0](v96, 0x1000C8000313F17);
            }
          }
          else
          {
            uint64_t v110 = v96;
            unsigned int v111 = v71;
          }
          if (v95 >= 0x41 && v94) {
            MEMORY[0x1D25D9CB0](v94, 0x1000C8000313F17);
          }
          if (v89 >= 0x41 && v88) {
            MEMORY[0x1D25D9CB0](v88, 0x1000C8000313F17);
          }
          if (v67 >= 0x41 && v68) {
            MEMORY[0x1D25D9CB0](v68, 0x1000C8000313F17);
          }
          if (v91 < 0x41) {
            goto LABEL_281;
          }
          uint64_t v73 = v90;
          if (!v90) {
            goto LABEL_281;
          }
        }
        MEMORY[0x1D25D9CB0](v73, 0x1000C8000313F17);
LABEL_281:
        sub_1CB8F1EEC((uint64_t)&v100, v24, 0);
        if ((int)llvm::APInt::compareSigned((llvm::APInt *)&v120, (const llvm::APInt *)&v100) > 0) {
          LOBYTE(v76) = 0;
        }
        else {
          unsigned int v76 = ~(llvm::APInt::compareSigned((llvm::APInt *)&v110, (const llvm::APInt *)&v100) >> 30) & 2;
        }
        if (sub_1CBFC5D80((llvm::APInt *)&v120, 0)) {
          LOBYTE(v76) = v76 | 4;
        }
        BOOL v77 = sub_1CBFD8350((llvm::APInt *)&v110, 0);
        uint64_t v78 = 16 * (a7 - 1);
        *(unsigned char *)(*((void *)a8 + 6) + v78) &= v76 | v77 | 0xF8;
        BOOL v16 = (*(unsigned char *)(*((void *)a8 + 6) + v78) & 7) == 0;
        if (v101 >= 0x41 && v100) {
          MEMORY[0x1D25D9CB0](v100, 0x1000C8000313F17);
        }
        if (v111 >= 0x41 && v110) {
          MEMORY[0x1D25D9CB0](v110, 0x1000C8000313F17);
        }
        if (v121 >= 0x41 && v120) {
          MEMORY[0x1D25D9CB0](v120, 0x1000C8000313F17);
        }
        goto LABEL_131;
      }
    }
    MEMORY[0x1D25D9CB0](v39, 0x1000C8000313F17);
    goto LABEL_114;
  }
  BOOL v16 = 1;
LABEL_28:
  if (v139 >= 0x41 && v138) {
    MEMORY[0x1D25D9CB0](v138, 0x1000C8000313F17);
  }
  if (v141 >= 0x41 && v140) {
    MEMORY[0x1D25D9CB0](v140, 0x1000C8000313F17);
  }
  if (v143 >= 0x41 && v142) {
    MEMORY[0x1D25D9CB0](v142, 0x1000C8000313F17);
  }
  if (v145 >= 0x41 && v144) {
    MEMORY[0x1D25D9CB0](v144, 0x1000C8000313F17);
  }
  if (v147 >= 0x41 && v146) {
    MEMORY[0x1D25D9CB0](v146, 0x1000C8000313F17);
  }
  if (v149 >= 0x41 && v148) {
    MEMORY[0x1D25D9CB0](v148, 0x1000C8000313F17);
  }
  return v16;
}

uint64_t llvm::DependenceInfo::weakZeroSrcSIVtest(llvm::ScalarEvolution **this, const llvm::SCEV *a2, const llvm::SCEV *a3, const llvm::SCEV *a4, const llvm::Loop *a5, int a6, llvm::FullDependence *a7, llvm::DependenceInfo::Constraint *a8)
{
  *((unsigned char *)a7 + 43) = 0;
  unsigned int v15 = a6 - 1;
  unint64_t MinusSCEV = llvm::ScalarEvolution::getMinusSCEV(this[1], a3, a4, 0, 0);
  uint64_t v17 = this[1];
  uint64_t Type = (llvm::Type *)llvm::SCEV::getType((llvm::SCEV *)MinusSCEV);
  unint64_t Constant = llvm::ScalarEvolution::getConstant(v17, Type, 0, 0);
  *(_DWORD *)a8 = 3;
  *((void *)a8 + 2) = Constant;
  *((void *)a8 + 3) = a2;
  *((void *)a8 + 4) = MinusSCEV;
  *((void *)a8 + 5) = a5;
  uint64_t result = llvm::DependenceInfo::isKnownPredicate((uint64_t)this, 0x20u, (uint64_t)a3, (uint64_t)a4);
  if (result)
  {
    if (v15 < *((_DWORD *)this + 8))
    {
      uint64_t result = 0;
      uint64_t v21 = 16 * v15;
      *(unsigned char *)(*((void *)a7 + 6) + v21) &= ~1u;
      uint64_t v22 = *((void *)a7 + 6);
      char v23 = *(unsigned char *)(v22 + v21) | 0x10;
LABEL_4:
      *(unsigned char *)(v22 + v21) = v23;
      return result;
    }
    return 0;
  }
  if (a2 && !*((_WORD *)a2 + 12))
  {
    unint64_t NegativeSCEV = a2;
    if (llvm::ScalarEvolution::isKnownNegative(this[1], a2)) {
      unint64_t NegativeSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV(this[1], (uint64_t)a2, 0);
    }
    uint64_t v25 = (const llvm::SCEV *)MinusSCEV;
    if (llvm::ScalarEvolution::isKnownNegative(this[1], a2)) {
      uint64_t v25 = (const llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV(this[1], MinusSCEV, 0);
    }
    uint64_t v26 = (llvm::Type *)llvm::SCEV::getType((llvm::SCEV *)MinusSCEV);
    char v27 = llvm::DependenceInfo::collectUpperBound(this, a5, v26);
    if (v27)
    {
      uint64_t v28 = sub_1CBFD7CB4((uint64_t)this[1], (uint64_t)NegativeSCEV, (uint64_t)v27, 0, 0);
      if (llvm::DependenceInfo::isKnownPredicate((uint64_t)this, 0x26u, (uint64_t)v25, v28)) {
        return 1;
      }
      if (llvm::DependenceInfo::isKnownPredicate((uint64_t)this, 0x20u, (uint64_t)v25, v28))
      {
        if (v15 < *((_DWORD *)this + 8))
        {
          uint64_t result = 0;
          uint64_t v21 = 16 * v15;
          *(unsigned char *)(*((void *)a7 + 6) + v21) &= ~4u;
          uint64_t v22 = *((void *)a7 + 6);
          char v23 = *(unsigned char *)(v22 + v21) | 0x20;
          goto LABEL_4;
        }
        return 0;
      }
    }
    if ((llvm::ScalarEvolution::isKnownNegative(this[1], v25) & 1) == 0)
    {
      if (!*(_WORD *)(MinusSCEV + 24)) {
        return !sub_1CBFD9C40(*(void *)(MinusSCEV + 32), *((void *)a2 + 4));
      }
      return 0;
    }
    return 1;
  }
  return result;
}

uint64_t llvm::DependenceInfo::weakZeroDstSIVtest(llvm::ScalarEvolution **this, const llvm::SCEV *a2, const llvm::SCEV *a3, const llvm::SCEV *a4, const llvm::Loop *a5, int a6, llvm::FullDependence *a7, llvm::DependenceInfo::Constraint *a8)
{
  *((unsigned char *)a7 + 43) = 0;
  unsigned int v15 = a6 - 1;
  unint64_t MinusSCEV = llvm::ScalarEvolution::getMinusSCEV(this[1], a4, a3, 0, 0);
  uint64_t v17 = this[1];
  uint64_t Type = (llvm::Type *)llvm::SCEV::getType((llvm::SCEV *)MinusSCEV);
  unint64_t Constant = llvm::ScalarEvolution::getConstant(v17, Type, 0, 0);
  *(_DWORD *)a8 = 3;
  *((void *)a8 + 2) = a2;
  *((void *)a8 + 3) = Constant;
  *((void *)a8 + 4) = MinusSCEV;
  *((void *)a8 + 5) = a5;
  uint64_t result = llvm::DependenceInfo::isKnownPredicate((uint64_t)this, 0x20u, (uint64_t)a4, (uint64_t)a3);
  if (result)
  {
    if (v15 < *((_DWORD *)this + 8))
    {
      uint64_t result = 0;
      uint64_t v21 = 16 * v15;
      *(unsigned char *)(*((void *)a7 + 6) + v21) &= ~4u;
      uint64_t v22 = *((void *)a7 + 6);
      char v23 = *(unsigned char *)(v22 + v21) | 0x10;
LABEL_4:
      *(unsigned char *)(v22 + v21) = v23;
      return result;
    }
    return 0;
  }
  if (a2 && !*((_WORD *)a2 + 12))
  {
    unint64_t NegativeSCEV = a2;
    if (llvm::ScalarEvolution::isKnownNegative(this[1], a2)) {
      unint64_t NegativeSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV(this[1], (uint64_t)a2, 0);
    }
    uint64_t v25 = (const llvm::SCEV *)MinusSCEV;
    if (llvm::ScalarEvolution::isKnownNegative(this[1], a2)) {
      uint64_t v25 = (const llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV(this[1], MinusSCEV, 0);
    }
    uint64_t v26 = (llvm::Type *)llvm::SCEV::getType((llvm::SCEV *)MinusSCEV);
    char v27 = llvm::DependenceInfo::collectUpperBound(this, a5, v26);
    if (v27)
    {
      uint64_t v28 = sub_1CBFD7CB4((uint64_t)this[1], (uint64_t)NegativeSCEV, (uint64_t)v27, 0, 0);
      if (llvm::DependenceInfo::isKnownPredicate((uint64_t)this, 0x26u, (uint64_t)v25, v28)) {
        return 1;
      }
      if (llvm::DependenceInfo::isKnownPredicate((uint64_t)this, 0x20u, (uint64_t)v25, v28))
      {
        if (v15 < *((_DWORD *)this + 8))
        {
          uint64_t result = 0;
          uint64_t v21 = 16 * v15;
          *(unsigned char *)(*((void *)a7 + 6) + v21) &= ~1u;
          uint64_t v22 = *((void *)a7 + 6);
          char v23 = *(unsigned char *)(v22 + v21) | 0x20;
          goto LABEL_4;
        }
        return 0;
      }
    }
    if ((llvm::ScalarEvolution::isKnownNegative(this[1], v25) & 1) == 0)
    {
      if (!*(_WORD *)(MinusSCEV + 24)) {
        return !sub_1CBFD9C40(*(void *)(MinusSCEV + 32), *((void *)a2 + 4));
      }
      return 0;
    }
    return 1;
  }
  return result;
}

BOOL llvm::DependenceInfo::exactRDIVtest(llvm::ScalarEvolution **this, const llvm::SCEV *a2, const llvm::SCEV *a3, const llvm::SCEV *a4, const llvm::SCEV *a5, const llvm::Loop *a6, const llvm::Loop *a7, llvm::FullDependence *a8)
{
  v118[4] = *MEMORY[0x1E4F143B8];
  *((unsigned char *)a8 + 43) = 0;
  unint64_t MinusSCEV = llvm::ScalarEvolution::getMinusSCEV(this[1], a5, a4, 0, 0);
  BOOL v14 = 0;
  if (*(_WORD *)(MinusSCEV + 24)) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = MinusSCEV;
  }
  if (*((_WORD *)a2 + 12)) {
    BOOL v16 = 0;
  }
  else {
    BOOL v16 = a2;
  }
  if (*((_WORD *)a3 + 12)) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = a3;
  }
  if (v15) {
    BOOL v18 = v16 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (v18 || v17 == 0) {
    return v14;
  }
  uint64_t v21 = (llvm::SCEV *)MinusSCEV;
  unsigned int v112 = 1;
  uint64_t v111 = 0;
  unsigned int v110 = 1;
  uint64_t v109 = 0;
  unsigned int v108 = 1;
  uint64_t v107 = 0;
  uint64_t v22 = *((void *)v16 + 4);
  uint64_t v23 = *(unsigned int *)(v22 + 32);
  unsigned int v106 = v23;
  if (v23 > 0x40) {
    operator new[]();
  }
  uint64_t v105 = *(void *)(v22 + 24);
  uint64_t v24 = *((void *)v17 + 4);
  unsigned int v104 = *(_DWORD *)(v24 + 32);
  if (v104 > 0x40) {
    operator new[]();
  }
  uint64_t v103 = *(void *)(v24 + 24);
  uint64_t v25 = *(void *)(v15 + 32);
  unsigned int v102 = *(_DWORD *)(v25 + 32);
  if (v102 > 0x40) {
    operator new[]();
  }
  uint64_t v101 = *(void *)(v25 + 24);
  if (!sub_1CBFD8408(v23, (unsigned int *)&v105, (unsigned int *)&v103, (llvm::APInt *)&v101, (uint64_t)&v111, (uint64_t)&v109, (uint64_t)&v107))
  {
    char v26 = 1;
    sub_1CB8F1EEC((uint64_t)&v99, v23, 1);
    uint64_t Type = (llvm::Type *)llvm::SCEV::getType(v21);
    uint64_t v28 = llvm::DependenceInfo::collectUpperBound(this, a6, Type);
    if (v28)
    {
      if (*((_WORD *)v28 + 12))
      {
        char v26 = 1;
      }
      else
      {
        unsigned int v32 = v28[4];
        uint64_t v33 = (llvm::detail::IEEEFloat *)((char *)v32 + 24);
        if (v100 > 0x40 || (unsigned int v34 = *((_DWORD *)v32 + 8), v34 > 0x40))
        {
          llvm::APInt::assignSlowCase((const llvm::APInt *)&v99, v33);
          char v26 = 0;
        }
        else
        {
          char v26 = 0;
          unsigned int v99 = *(void **)v33;
          unsigned int v100 = v34;
        }
      }
    }
    char v29 = 1;
    sub_1CB8F1EEC((uint64_t)&v97, v23, 1);
    unsigned int v30 = (llvm::Type *)llvm::SCEV::getType(v21);
    uint64_t v31 = llvm::DependenceInfo::collectUpperBound(this, a7, v30);
    if (v31)
    {
      if (*((_WORD *)v31 + 12))
      {
        char v29 = 1;
      }
      else
      {
        uint64_t v35 = v31[4];
        uint64_t v36 = (llvm::detail::IEEEFloat *)((char *)v35 + 24);
        if (v98 > 0x40 || (unsigned int v37 = *((_DWORD *)v35 + 8), v37 > 0x40))
        {
          llvm::APInt::assignSlowCase((const llvm::APInt *)&v97, v36);
          char v29 = 0;
        }
        else
        {
          char v29 = 0;
          unsigned int v97 = *(void **)v36;
          unsigned int v98 = v37;
        }
      }
    }
    sub_1CBFD9168(v23, (llvm::APInt *)&v95);
    sub_1CBA62420(v23, (llvm::APInt *)&v93);
    llvm::APInt::sdiv((llvm::APInt *)&v101, (const llvm::APInt *)&v111, (uint64_t)&v91);
    llvm::APInt::operator*((uint64_t)&v109, &v91, (uint64_t)&__src);
    llvm::APInt::operator*((uint64_t)&v107, &v91, (uint64_t)&v87);
    uint64_t v116 = (llvm::APInt *)v118;
    uint64_t v117 = 0x200000000;
    unsigned int v113 = (llvm::APInt *)&v115;
    uint64_t v114 = 0x200000000;
    llvm::APInt::sdiv((llvm::APInt *)&v103, (const llvm::APInt *)&v111, (uint64_t)&v85);
    if (sub_1CBFD8350((llvm::APInt *)&v85, 0))
    {
      unsigned int v80 = v90;
      if (v90 > 0x40) {
        operator new[]();
      }
      unsigned int v79 = __src;
      sub_1CBA14940((uint64_t)&v79);
      llvm::APInt::operator++((uint64_t)&v79);
      unsigned int v82 = v80;
      unsigned int v81 = v79;
      unsigned int v80 = 0;
      sub_1CBFD9290((uint64_t)&v83, (llvm::APInt *)&v81, (llvm::APInt *)&v85, v38, v39);
      sub_1CBFD91F8((uint64_t)&v116, (unint64_t)&v83);
      if (v84 >= 0x41 && v83) {
        MEMORY[0x1D25D9CB0](v83, 0x1000C8000313F17);
      }
      if (v82 >= 0x41 && v81) {
        MEMORY[0x1D25D9CB0](v81, 0x1000C8000313F17);
      }
      if (v80 >= 0x41 && v79) {
        MEMORY[0x1D25D9CB0](v79, 0x1000C8000313F17);
      }
      if ((v26 & 1) == 0)
      {
        unsigned int v78 = v100;
        if (v100 > 0x40) {
          operator new[]();
        }
        BOOL v77 = v99;
        llvm::APInt::operator-=((uint64_t)&v77, (unint64_t **)&__src);
        unsigned int v82 = v78;
        unsigned int v81 = v77;
        unsigned int v78 = 0;
        sub_1CBFD9768((uint64_t)&v83, (llvm::APInt *)&v81, (llvm::APInt *)&v85, v55, v56);
        sub_1CBFD91F8((uint64_t)&v113, (unint64_t)&v83);
        if (v84 >= 0x41 && v83) {
          MEMORY[0x1D25D9CB0](v83, 0x1000C8000313F17);
        }
        if (v82 >= 0x41 && v81) {
          MEMORY[0x1D25D9CB0](v81, 0x1000C8000313F17);
        }
        if (v78 >= 0x41 && v77) {
LABEL_185:
        }
          MEMORY[0x1D25D9CB0]();
      }
    }
    else
    {
      unsigned int v76 = v90;
      if (v90 > 0x40) {
        operator new[]();
      }
      uint64_t v75 = __src;
      sub_1CBA14940((uint64_t)&v75);
      llvm::APInt::operator++((uint64_t)&v75);
      unsigned int v82 = v76;
      unsigned int v81 = v75;
      unsigned int v76 = 0;
      sub_1CBFD9768((uint64_t)&v83, (llvm::APInt *)&v81, (llvm::APInt *)&v85, v40, v41);
      sub_1CBFD91F8((uint64_t)&v113, (unint64_t)&v83);
      if (v84 >= 0x41 && v83) {
        MEMORY[0x1D25D9CB0](v83, 0x1000C8000313F17);
      }
      if (v82 >= 0x41 && v81) {
        MEMORY[0x1D25D9CB0](v81, 0x1000C8000313F17);
      }
      if (v76 >= 0x41 && v75) {
        MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
      }
      if ((v26 & 1) == 0)
      {
        unsigned int v74 = v100;
        if (v100 > 0x40) {
          operator new[]();
        }
        uint64_t v73 = v99;
        llvm::APInt::operator-=((uint64_t)&v73, (unint64_t **)&__src);
        unsigned int v82 = v74;
        unsigned int v81 = v73;
        unsigned int v74 = 0;
        sub_1CBFD9290((uint64_t)&v83, (llvm::APInt *)&v81, (llvm::APInt *)&v85, v57, v58);
        sub_1CBFD91F8((uint64_t)&v116, (unint64_t)&v83);
        if (v84 >= 0x41 && v83) {
          MEMORY[0x1D25D9CB0](v83, 0x1000C8000313F17);
        }
        if (v82 >= 0x41 && v81) {
          MEMORY[0x1D25D9CB0](v81, 0x1000C8000313F17);
        }
        if (v74 >= 0x41 && v73) {
          goto LABEL_185;
        }
      }
    }
    llvm::APInt::sdiv((llvm::APInt *)&v105, (const llvm::APInt *)&v111, (uint64_t)&v83);
    if (sub_1CBFD8350((llvm::APInt *)&v83, 0))
    {
      unsigned int v70 = v88;
      if (v88 > 0x40) {
        operator new[]();
      }
      unsigned int v69 = v87;
      sub_1CBA14940((uint64_t)&v69);
      llvm::APInt::operator++((uint64_t)&v69);
      unsigned int v72 = v70;
      unsigned int v71 = v69;
      unsigned int v70 = 0;
      sub_1CBFD9290((uint64_t)&v81, (llvm::APInt *)&v71, (llvm::APInt *)&v83, v42, v43);
      sub_1CBFD91F8((uint64_t)&v116, (unint64_t)&v81);
      if (v82 >= 0x41 && v81) {
        MEMORY[0x1D25D9CB0](v81, 0x1000C8000313F17);
      }
      if (v72 >= 0x41 && v71) {
        MEMORY[0x1D25D9CB0](v71, 0x1000C8000313F17);
      }
      if (v70 >= 0x41 && v69) {
        MEMORY[0x1D25D9CB0](v69, 0x1000C8000313F17);
      }
      if (v29) {
        goto LABEL_118;
      }
      unsigned int v68 = v98;
      if (v98 > 0x40) {
        operator new[]();
      }
      unsigned int v67 = v97;
      llvm::APInt::operator-=((uint64_t)&v67, (unint64_t **)&v87);
      unsigned int v72 = v68;
      unsigned int v71 = v67;
      unsigned int v68 = 0;
      sub_1CBFD9768((uint64_t)&v81, (llvm::APInt *)&v71, (llvm::APInt *)&v83, v59, v60);
      sub_1CBFD91F8((uint64_t)&v113, (unint64_t)&v81);
      if (v82 >= 0x41 && v81) {
        MEMORY[0x1D25D9CB0](v81, 0x1000C8000313F17);
      }
      if (v72 >= 0x41 && v71) {
        MEMORY[0x1D25D9CB0](v71, 0x1000C8000313F17);
      }
      if (v68 < 0x41 || !v67) {
        goto LABEL_118;
      }
    }
    else
    {
      unsigned int v66 = v88;
      if (v88 > 0x40) {
        operator new[]();
      }
      unsigned int v65 = v87;
      sub_1CBA14940((uint64_t)&v65);
      llvm::APInt::operator++((uint64_t)&v65);
      unsigned int v72 = v66;
      unsigned int v71 = v65;
      unsigned int v66 = 0;
      sub_1CBFD9768((uint64_t)&v81, (llvm::APInt *)&v71, (llvm::APInt *)&v83, v44, v45);
      sub_1CBFD91F8((uint64_t)&v113, (unint64_t)&v81);
      if (v82 >= 0x41 && v81) {
        MEMORY[0x1D25D9CB0](v81, 0x1000C8000313F17);
      }
      if (v72 >= 0x41 && v71) {
        MEMORY[0x1D25D9CB0](v71, 0x1000C8000313F17);
      }
      if (v66 >= 0x41 && v65) {
        MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
      }
      if (v29) {
        goto LABEL_118;
      }
      unsigned int v64 = v98;
      if (v98 > 0x40) {
        operator new[]();
      }
      unsigned int v63 = v97;
      llvm::APInt::operator-=((uint64_t)&v63, (unint64_t **)&v87);
      unsigned int v72 = v64;
      unsigned int v71 = v63;
      unsigned int v64 = 0;
      sub_1CBFD9290((uint64_t)&v81, (llvm::APInt *)&v71, (llvm::APInt *)&v83, v61, v62);
      sub_1CBFD91F8((uint64_t)&v116, (unint64_t)&v81);
      if (v82 >= 0x41 && v81) {
        MEMORY[0x1D25D9CB0](v81, 0x1000C8000313F17);
      }
      if (v72 >= 0x41 && v71) {
        MEMORY[0x1D25D9CB0](v71, 0x1000C8000313F17);
      }
      if (v64 < 0x41 || !v63) {
        goto LABEL_118;
      }
    }
    MEMORY[0x1D25D9CB0]();
LABEL_118:
    BOOL v14 = 0;
    if (v117)
    {
      unsigned int v46 = v114;
      if (v114)
      {
        uint64_t v47 = (char *)v116;
        uint64_t v48 = (llvm::APInt *)((char *)v116 + 16 * v117 - 16);
        if ((int)llvm::APInt::compareSigned(v116, v48) <= 0) {
          uint64_t v49 = v48;
        }
        else {
          uint64_t v49 = (const llvm::APInt *)v47;
        }
        if (v94 > 0x40 || (unsigned int v50 = *((_DWORD *)v49 + 2), v50 > 0x40))
        {
          llvm::APInt::assignSlowCase((const llvm::APInt *)&v93, v49);
          unsigned int v46 = v114;
        }
        else
        {
          uint64_t v93 = *(void *)v49;
          unsigned int v94 = v50;
        }
        uint64_t v51 = (char *)v113;
        unsigned int v52 = (llvm::APInt *)((char *)v113 + 16 * v46 - 16);
        if ((int)llvm::APInt::compareSigned(v113, v52) >= 0) {
          uint64_t v53 = v52;
        }
        else {
          uint64_t v53 = (const llvm::APInt *)v51;
        }
        if (v96 > 0x40 || (unsigned int v54 = *((_DWORD *)v53 + 2), v54 > 0x40))
        {
          llvm::APInt::assignSlowCase((const llvm::APInt *)&v95, v53);
        }
        else
        {
          uint64_t v95 = *(void *)v53;
          unsigned int v96 = v54;
        }
        BOOL v14 = (int)llvm::APInt::compareSigned((llvm::APInt *)&v93, (const llvm::APInt *)&v95) > 0;
      }
    }
    if (v84 >= 0x41 && v83) {
      MEMORY[0x1D25D9CB0](v83, 0x1000C8000313F17);
    }
    if (v86 >= 0x41 && v85) {
      MEMORY[0x1D25D9CB0](v85, 0x1000C8000313F17);
    }
    sub_1CD480C18((char **)&v113);
    sub_1CD480C18((char **)&v116);
    if (v88 >= 0x41 && v87) {
      MEMORY[0x1D25D9CB0](v87, 0x1000C8000313F17);
    }
    if (v90 >= 0x41 && __src) {
      MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
    if (v92 >= 0x41 && v91) {
      MEMORY[0x1D25D9CB0](v91, 0x1000C8000313F17);
    }
    if (v94 >= 0x41 && v93) {
      MEMORY[0x1D25D9CB0](v93, 0x1000C8000313F17);
    }
    if (v96 >= 0x41 && v95) {
      MEMORY[0x1D25D9CB0](v95, 0x1000C8000313F17);
    }
    if (v98 >= 0x41 && v97) {
      MEMORY[0x1D25D9CB0](v97, 0x1000C8000313F17);
    }
    if (v100 >= 0x41 && v99) {
      MEMORY[0x1D25D9CB0](v99, 0x1000C8000313F17);
    }
    goto LABEL_28;
  }
  BOOL v14 = 1;
LABEL_28:
  if (v102 >= 0x41 && v101) {
    MEMORY[0x1D25D9CB0](v101, 0x1000C8000313F17);
  }
  if (v104 >= 0x41 && v103) {
    MEMORY[0x1D25D9CB0](v103, 0x1000C8000313F17);
  }
  if (v106 >= 0x41 && v105) {
    MEMORY[0x1D25D9CB0](v105, 0x1000C8000313F17);
  }
  if (v108 >= 0x41 && v107) {
    MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
  }
  if (v110 >= 0x41 && v109) {
    MEMORY[0x1D25D9CB0](v109, 0x1000C8000313F17);
  }
  if (v112 >= 0x41 && v111) {
    MEMORY[0x1D25D9CB0](v111, 0x1000C8000313F17);
  }
  return v14;
}

unint64_t llvm::DependenceInfo::symbolicRDIVtest(llvm::ScalarEvolution **this, const llvm::SCEV *a2, const llvm::SCEV *a3, const llvm::SCEV *a4, const llvm::SCEV *a5, const llvm::Loop *a6, const llvm::Loop *a7)
{
  uint64_t Type = (llvm::Type *)llvm::SCEV::getType(a2);
  unint64_t v15 = llvm::DependenceInfo::collectUpperBound(this, a6, Type);
  BOOL v16 = (llvm::Type *)llvm::SCEV::getType(a2);
  uint64_t v17 = llvm::DependenceInfo::collectUpperBound(this, a7, v16);
  unint64_t MinusSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV(this[1], a5, a4, 0, 0);
  unint64_t v19 = llvm::ScalarEvolution::getMinusSCEV(this[1], a4, a5, 0, 0);
  BOOL isKnownNonNegative = llvm::ScalarEvolution::isKnownNonNegative(this[1], a2);
  uint64_t v21 = this[1];
  if (isKnownNonNegative)
  {
    if (llvm::ScalarEvolution::isKnownNonNegative(v21, a3))
    {
      if (v15)
      {
        uint64_t v28 = sub_1CBFD7CB4((uint64_t)this[1], (uint64_t)a2, (uint64_t)v15, 0, 0);
        if (llvm::DependenceInfo::isKnownPredicate((uint64_t)this, 0x26u, (uint64_t)MinusSCEV, v28)) {
          return 1;
        }
      }
      if (!v17) {
        return 0;
      }
      uint64_t v27 = sub_1CBFD7CB4((uint64_t)this[1], (uint64_t)a3, (uint64_t)v17, 0, 0);
      char v26 = (llvm::DependenceInfo *)this;
      uint64_t v25 = v19;
LABEL_27:
      return llvm::DependenceInfo::isKnownPredicate((uint64_t)v26, 0x28u, v27, v25);
    }
    unint64_t result = llvm::ScalarEvolution::isKnownNonPositive(this[1], a3);
    if (result)
    {
      if (v15)
      {
        if (v17)
        {
          unsigned int v32 = (llvm::SCEV *)sub_1CBFD7CB4((uint64_t)this[1], (uint64_t)a2, (uint64_t)v15, 0, 0);
          uint64_t v33 = (const llvm::APInt *)sub_1CBFD7CB4((uint64_t)this[1], (uint64_t)a3, (uint64_t)v17, 0, 0);
          unint64_t v34 = llvm::ScalarEvolution::getMinusSCEV(this[1], v32, v33, 0, 0);
          if (llvm::DependenceInfo::isKnownPredicate((uint64_t)this, 0x26u, (uint64_t)MinusSCEV, v34)) {
            return 1;
          }
        }
      }
      uint64_t v24 = this[1];
      return llvm::ScalarEvolution::isKnownNegative(v24, MinusSCEV);
    }
  }
  else
  {
    unint64_t result = llvm::ScalarEvolution::isKnownNonPositive(v21, a2);
    if (!result) {
      return result;
    }
    if (!llvm::ScalarEvolution::isKnownNonNegative(this[1], a3))
    {
      unint64_t result = llvm::ScalarEvolution::isKnownNonPositive(this[1], a3);
      if (!result) {
        return result;
      }
      if (v15)
      {
        uint64_t v35 = sub_1CBFD7CB4((uint64_t)this[1], (uint64_t)a2, (uint64_t)v15, 0, 0);
        if (llvm::DependenceInfo::isKnownPredicate((uint64_t)this, 0x26u, v35, (uint64_t)MinusSCEV)) {
          return 1;
        }
      }
      if (!v17) {
        return 0;
      }
      uint64_t v25 = sub_1CBFD7CB4((uint64_t)this[1], (uint64_t)a3, (uint64_t)v17, 0, 0);
      char v26 = (llvm::DependenceInfo *)this;
      uint64_t v27 = v19;
      goto LABEL_27;
    }
    if (v15)
    {
      if (v17)
      {
        char v29 = (llvm::SCEV *)sub_1CBFD7CB4((uint64_t)this[1], (uint64_t)a2, (uint64_t)v15, 0, 0);
        unsigned int v30 = (const llvm::APInt *)sub_1CBFD7CB4((uint64_t)this[1], (uint64_t)a3, (uint64_t)v17, 0, 0);
        unint64_t v31 = llvm::ScalarEvolution::getMinusSCEV(this[1], v29, v30, 0, 0);
        if (llvm::DependenceInfo::isKnownPredicate((uint64_t)this, 0x26u, v31, (uint64_t)MinusSCEV)) {
          return 1;
        }
      }
    }
    uint64_t v23 = this[1];
    return llvm::ScalarEvolution::isKnownPositive(v23, MinusSCEV);
  }
  return result;
}

unint64_t llvm::DependenceInfo::testSIV(llvm::ScalarEvolution **this, const llvm::SCEV *a2, const llvm::SCEV *a3, unsigned int *a4, llvm::FullDependence *a5, llvm::DependenceInfo::Constraint *a6, const llvm::SCEV **a7)
{
  if (*((_WORD *)a2 + 12) == 7) {
    uint64_t v13 = a2;
  }
  else {
    uint64_t v13 = 0;
  }
  if (*((_WORD *)a3 + 12) == 7) {
    BOOL v14 = a3;
  }
  else {
    BOOL v14 = 0;
  }
  if (v13) {
    BOOL v15 = v14 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    if (v13)
    {
      BOOL v16 = (const llvm::SCEV *)**((void **)v13 + 4);
      uint64_t v17 = (const llvm::SCEV *)sub_1CBFD7EA0((uint64_t)v13, this[1]);
      int v18 = 0;
      unint64_t v19 = (const llvm::Loop *)*((void *)v13 + 6);
      BOOL v20 = v19;
      do
      {
        BOOL v20 = *(const llvm::Loop **)v20;
        ++v18;
      }
      while (v20);
      *a4 = v18;
      if (llvm::DependenceInfo::weakZeroDstSIVtest(this, v17, v16, a3, v19, v18, a5, a6)) {
        return 1;
      }
    }
    else
    {
      uint64_t v35 = (const llvm::SCEV *)**((void **)v14 + 4);
      uint64_t v36 = (const llvm::SCEV *)sub_1CBFD7EA0((uint64_t)v14, this[1]);
      unsigned int v37 = 0;
      uint64_t v38 = (const llvm::Loop *)*((void *)v14 + 6);
      uint64_t v39 = v38;
      do
      {
        uint64_t v39 = *(const llvm::Loop **)v39;
        ++v37;
      }
      while (v39);
      unsigned int v40 = *((_DWORD *)this + 8);
      if (v37 > v40) {
        v37 += *((_DWORD *)this + 9) - v40;
      }
      *a4 = v37;
      if (llvm::DependenceInfo::weakZeroSrcSIVtest(this, v36, a2, v35, v38, v37, a5, a6)) {
        return 1;
      }
    }
    return llvm::DependenceInfo::gcdMIVtest((llvm::DependenceInfo *)this, a2, a3, a5);
  }
  else
  {
    uint64_t v22 = (const llvm::SCEV *)**((void **)v13 + 4);
    uint64_t v23 = (const llvm::SCEV *)**((void **)v14 + 4);
    uint64_t v24 = (const llvm::SCEV *)sub_1CBFD7EA0((uint64_t)v13, this[1]);
    uint64_t v25 = sub_1CBFD7EA0((uint64_t)v14, this[1]);
    char v26 = (const llvm::SCEV *)v25;
    int v27 = 0;
    uint64_t v28 = (const llvm::Loop *)*((void *)v13 + 6);
    char v29 = v28;
    do
    {
      char v29 = *(const llvm::Loop **)v29;
      ++v27;
    }
    while (v29);
    *a4 = v27;
    if (v24 == (const llvm::SCEV *)v25)
    {
      unsigned int v30 = v22;
      unint64_t v31 = v22;
      unsigned int v32 = v23;
      uint64_t v33 = v23;
      unint64_t v34 = a5;
      if (llvm::DependenceInfo::strongSIVtest(this, v24, v31, v33, v28, v27, a5, a6)) {
        return 1;
      }
    }
    else
    {
      unint64_t NegativeSCEV = llvm::ScalarEvolution::getNegativeSCEV(this[1], v25, 0);
      int v43 = *a4;
      if (v24 == (const llvm::SCEV *)NegativeSCEV)
      {
        unsigned int v30 = v22;
        uint64_t v44 = v22;
        unsigned int v32 = v23;
        unint64_t v45 = v23;
        unint64_t v34 = a5;
        if (llvm::DependenceInfo::weakCrossingSIVtest(this, v24, v44, v45, v28, v43, a5, a6, a7)) {
          return 1;
        }
      }
      else
      {
        unsigned int v30 = v22;
        unsigned int v46 = v22;
        unsigned int v32 = v23;
        uint64_t v47 = v23;
        unint64_t v34 = a5;
        if (llvm::DependenceInfo::exactSIVtest(this, v24, v26, v46, v47, v28, v43, a5, a6)) {
          return 1;
        }
      }
    }
    if (llvm::DependenceInfo::gcdMIVtest((llvm::DependenceInfo *)this, a2, a3, v34)) {
      return 1;
    }
    return llvm::DependenceInfo::symbolicRDIVtest(this, v24, v26, v30, v32, v28, v28);
  }
}

unint64_t llvm::DependenceInfo::testRDIV(llvm::ScalarEvolution **this, const llvm::SCEV *a2, const llvm::SCEV *a3, llvm::FullDependence *a4)
{
  if (*((_WORD *)a2 + 12) == 7) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = 0;
  }
  if (*((_WORD *)a3 + 12) == 7) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    if (v7)
    {
      if (*(_WORD *)(**((void **)v7 + 4) + 24) == 7) {
        uint64_t v10 = **((void **)v7 + 4);
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v13 = **(const llvm::SCEV ***)(v10 + 32);
      BOOL v14 = (const llvm::SCEV *)sub_1CBFD7EA0(v10, this[1]);
      BOOL v15 = *(const llvm::Loop **)(v10 + 48);
      unsigned int v11 = this[1];
      uint64_t v12 = sub_1CBFD7EA0((uint64_t)v7, v11);
      unint64_t NegativeSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV(v11, v12, 0);
      int v18 = (const llvm::Loop *)*((void *)v7 + 6);
      BOOL v16 = a3;
    }
    else
    {
      if (*(_WORD *)(**((void **)v8 + 4) + 24) == 7) {
        uint64_t v20 = **((void **)v8 + 4);
      }
      else {
        uint64_t v20 = 0;
      }
      BOOL v16 = **(const llvm::SCEV ***)(v20 + 32);
      unint64_t NegativeSCEV = (const llvm::SCEV *)sub_1CBFD7EA0(v20, this[1]);
      int v18 = *(const llvm::Loop **)(v20 + 48);
      uint64_t v21 = this[1];
      uint64_t v22 = sub_1CBFD7EA0((uint64_t)v8, v21);
      BOOL v14 = (const llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV(v21, v22, 0);
      BOOL v15 = (const llvm::Loop *)*((void *)v8 + 6);
      uint64_t v13 = a2;
    }
  }
  else
  {
    uint64_t v13 = (const llvm::SCEV *)**((void **)v7 + 4);
    BOOL v14 = (const llvm::SCEV *)sub_1CBFD7EA0((uint64_t)v7, this[1]);
    BOOL v15 = (const llvm::Loop *)*((void *)v7 + 6);
    BOOL v16 = (const llvm::SCEV *)**((void **)v8 + 4);
    unint64_t NegativeSCEV = (const llvm::SCEV *)sub_1CBFD7EA0((uint64_t)v8, this[1]);
    int v18 = (const llvm::Loop *)*((void *)v8 + 6);
  }
  if (llvm::DependenceInfo::exactRDIVtest(this, v14, NegativeSCEV, v13, v16, v15, v18, a4)
    || (llvm::DependenceInfo::gcdMIVtest((llvm::DependenceInfo *)this, a2, a3, a4) & 1) != 0)
  {
    return 1;
  }

  return llvm::DependenceInfo::symbolicRDIVtest(this, v14, NegativeSCEV, v13, v16, v15, v18);
}

unint64_t llvm::DependenceInfo::findBoundsALL(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v6 = (uint64_t *)(a4 + 144 * a5);
  v6[16] = 0;
  uint64_t v7 = v6 + 16;
  v6[8] = 0;
  uint64_t v8 = (unint64_t *)(v6 + 8);
  if (*v6)
  {
    BOOL v9 = *(llvm::ScalarEvolution **)(a1 + 8);
    uint64_t v10 = a2 + 32 * a5;
    uint64_t v11 = a3 + 32 * a5;
    unint64_t MinusSCEV = llvm::ScalarEvolution::getMinusSCEV(v9, *(llvm::SCEV **)(v10 + 16), *(const llvm::APInt **)(v11 + 8), 0, 0);
    *uint64_t v7 = sub_1CBFD7CB4((uint64_t)v9, MinusSCEV, *v6, 0, 0);
    uint64_t v13 = *(llvm::ScalarEvolution **)(a1 + 8);
    unint64_t v14 = llvm::ScalarEvolution::getMinusSCEV(v13, *(llvm::SCEV **)(v10 + 8), *(const llvm::APInt **)(v11 + 16), 0, 0);
    unint64_t result = sub_1CBFD7CB4((uint64_t)v13, v14, *v6, 0, 0);
LABEL_3:
    *uint64_t v8 = result;
    return result;
  }
  uint64_t v16 = a2 + 32 * a5;
  uint64_t v17 = a3 + 32 * a5;
  if (llvm::DependenceInfo::isKnownPredicate(a1, 0x20u, *(void *)(v16 + 16), *(void *)(v17 + 8)))
  {
    int v18 = *(llvm::ScalarEvolution **)(a1 + 8);
    uint64_t Type = (llvm::Type *)llvm::SCEV::getType(*(llvm::SCEV **)v16);
    *uint64_t v7 = llvm::ScalarEvolution::getConstant(v18, Type, 0, 0);
  }
  unint64_t result = llvm::DependenceInfo::isKnownPredicate(a1, 0x20u, *(void *)(v16 + 8), *(void *)(v17 + 16));
  if (result)
  {
    uint64_t v20 = *(llvm::ScalarEvolution **)(a1 + 8);
    uint64_t v21 = (llvm::Type *)llvm::SCEV::getType(*(llvm::SCEV **)v16);
    unint64_t result = llvm::ScalarEvolution::getConstant(v20, v21, 0, 0);
    goto LABEL_3;
  }
  return result;
}

BOOL llvm::DependenceInfo::testBounds(uint64_t a1, char a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  *(unsigned char *)(a4 + 144 * a3 + 136) = a2;
  uint64_t LowerBound = llvm::DependenceInfo::getLowerBound(a1, a4);
  BOOL result = 0;
  if (!LowerBound || (llvm::DependenceInfo::isKnownPredicate(a1, 0x26u, LowerBound, a5) & 1) == 0)
  {
    uint64_t UpperBound = llvm::DependenceInfo::getUpperBound(a1, a4);
    if (!UpperBound || (llvm::DependenceInfo::isKnownPredicate(a1, 0x26u, a5, UpperBound) & 1) == 0) {
      return 1;
    }
  }
  return result;
}

uint64_t llvm::DependenceInfo::exploreDirections(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6, unsigned int *a7, uint64_t a8)
{
  uint64_t v9 = *(unsigned int *)(a1 + 32);
  uint64_t v10 = *a6;
  unint64_t v11 = (unint64_t)*a6 >> 1;
  uint64_t v12 = ~(-1 << ((unint64_t)*a6 >> 58));
  if (v9 > dword_1EBCC54F0)
  {
    if ((v9 + 1) > 2) {
      uint64_t v13 = (v9 + 1);
    }
    else {
      uint64_t v13 = 2;
    }
    unint64_t v14 = (unsigned char *)(a5 + 281);
    uint64_t v15 = 1;
    do
    {
      if (v10)
      {
        uint64_t v16 = 1 << v15;
        uint64_t v17 = v12 & v11;
      }
      else
      {
        uint64_t v16 = *(void *)(*v10 + 8 * (v15 >> 6));
        uint64_t v17 = 1 << v15;
      }
      if ((v16 & v17) != 0) {
        unsigned char *v14 = 7;
      }
      ++v15;
      v14 += 144;
    }
    while (v13 != v15);
    return 1;
  }
  unsigned int v20 = a2;
  if (v9 < a2)
  {
LABEL_15:
    if (v9)
    {
      uint64_t v21 = v9 + 1;
      uint64_t v22 = (unsigned char *)(a5 + 281);
      uint64_t v23 = 1;
      do
      {
        if (v10)
        {
          uint64_t v24 = 1 << v23;
          uint64_t v25 = v12 & v11;
        }
        else
        {
          uint64_t v24 = *(void *)(*v10 + 8 * (v23 >> 6));
          uint64_t v25 = 1 << v23;
        }
        if ((v24 & v25) != 0) {
          *v22 |= *(v22 - 1);
        }
        ++v23;
        v22 += 144;
      }
      while (v21 != v23);
    }
    return 1;
  }
  while (1)
  {
    if (v10)
    {
      uint64_t v32 = 1 << v20;
      uint64_t v33 = v12 & v11;
    }
    else
    {
      uint64_t v32 = *(void *)(*v10 + 8 * (v20 >> 6));
      uint64_t v33 = 1 << v20;
    }
    if ((v32 & v33) != 0) {
      break;
    }
    if (v9 < ++v20) {
      goto LABEL_15;
    }
  }
  if (*a7 < v20)
  {
    *a7 = v20;
    llvm::DependenceInfo::findBoundsLT(a1, a3, a4, a5, v20);
    llvm::DependenceInfo::findBoundsGT(a1, a3, a4, a5, v20);
    llvm::DependenceInfo::findBoundsEQ(a1, a3, a4, a5, v20);
  }
  if (llvm::DependenceInfo::testBounds(a1, 1, v20, a5, a8)) {
    uint64_t v18 = llvm::DependenceInfo::exploreDirections(a1, v20 + 1, a3, a4, a5, a6, a7, a8);
  }
  else {
    uint64_t v18 = 0;
  }
  if (llvm::DependenceInfo::testBounds(a1, 2, v20, a5, a8)) {
    uint64_t v18 = llvm::DependenceInfo::exploreDirections(a1, v20 + 1, a3, a4, a5, a6, a7, a8) + v18;
  }
  if (llvm::DependenceInfo::testBounds(a1, 4, v20, a5, a8)) {
    uint64_t v18 = llvm::DependenceInfo::exploreDirections(a1, v20 + 1, a3, a4, a5, a6, a7, a8) + v18;
  }
  *(unsigned char *)(a5 + 144 * v20 + 136) = 7;
  return v18;
}

unint64_t llvm::DependenceInfo::findBoundsLT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v8 = a5;
  uint64_t v9 = a4 + 144 * a5;
  *(void *)(v9 + 8llvm::Function::viewCFG(this, 1, 0, 0) = 0;
  uint64_t v10 = (unint64_t *)(v9 + 80);
  *(void *)(v9 + 16) = 0;
  unint64_t v11 = (unint64_t *)(v9 + 16);
  uint64_t v12 = *(llvm::SCEV **)(a4 + 144 * a5);
  uint64_t v13 = *(llvm::ScalarEvolution **)(a1 + 8);
  if (v12)
  {
    uint64_t Type = (llvm::Type *)llvm::SCEV::getType(*(llvm::SCEV **)(a4 + 144 * a5));
    unint64_t Constant = (const llvm::APInt *)llvm::ScalarEvolution::getConstant(v13, Type, 1uLL, 0);
    unint64_t MinusSCEV = llvm::ScalarEvolution::getMinusSCEV(v13, v12, Constant, 0, 0);
    uint64_t v17 = a2 + 32 * v8;
    uint64_t v18 = 32 * v8;
    unint64_t v19 = (llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV(*(llvm::ScalarEvolution **)(a1 + 8), *(llvm::SCEV **)(v17 + 16), *(const llvm::APInt **)(a3 + v18), 0, 0);
    unsigned int v20 = *(llvm::ScalarEvolution **)(a1 + 8);
    uint64_t v21 = (llvm::Type *)llvm::SCEV::getType(v19);
    uint64_t v22 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v20, v21, 0, 0);
    uint64_t SMinExpr = llvm::ScalarEvolution::getSMinExpr(v20, v19, v22);
    uint64_t v24 = *(llvm::ScalarEvolution **)(a1 + 8);
    uint64_t v25 = (llvm::SCEV *)sub_1CBFD7CB4((uint64_t)v24, SMinExpr, MinusSCEV, 0, 0);
    *uint64_t v10 = llvm::ScalarEvolution::getMinusSCEV(v24, v25, *(const llvm::APInt **)(a3 + v18), 0, 0);
    char v26 = (llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV(*(llvm::ScalarEvolution **)(a1 + 8), *(llvm::SCEV **)(v17 + 8), *(const llvm::APInt **)(a3 + v18), 0, 0);
    int v27 = *(llvm::ScalarEvolution **)(a1 + 8);
    uint64_t v28 = (llvm::Type *)llvm::SCEV::getType(v26);
    char v29 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v27, v28, 0, 0);
    uint64_t SMaxExpr = llvm::ScalarEvolution::getSMaxExpr(v27, v26, v29);
    unint64_t v31 = *(llvm::ScalarEvolution **)(a1 + 8);
    uint64_t v32 = (llvm::SCEV *)sub_1CBFD7CB4((uint64_t)v31, SMaxExpr, MinusSCEV, 0, 0);
    unint64_t result = llvm::ScalarEvolution::getMinusSCEV(v31, v32, *(const llvm::APInt **)(a3 + v18), 0, 0);
LABEL_3:
    *unint64_t v11 = result;
    return result;
  }
  uint64_t v34 = a2 + 32 * a5;
  uint64_t v35 = (const llvm::APInt **)(a3 + 32 * a5);
  uint64_t v36 = (llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV(*(llvm::ScalarEvolution **)(a1 + 8), *(llvm::SCEV **)(v34 + 16), *v35, 0, 0);
  unsigned int v37 = *(llvm::ScalarEvolution **)(a1 + 8);
  uint64_t v38 = (llvm::Type *)llvm::SCEV::getType(v36);
  uint64_t v39 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v37, v38, 0, 0);
  unsigned int v40 = (llvm::SCEV *)llvm::ScalarEvolution::getSMinExpr(v37, v36, v39);
  if (llvm::SCEV::isZero(v40)) {
    *uint64_t v10 = llvm::ScalarEvolution::getNegativeSCEV(*(llvm::ScalarEvolution **)(a1 + 8), (uint64_t)*v35, 0);
  }
  unsigned int v41 = (llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV(*(llvm::ScalarEvolution **)(a1 + 8), *(llvm::SCEV **)(v34 + 8), *v35, 0, 0);
  uint64_t v42 = *(llvm::ScalarEvolution **)(a1 + 8);
  int v43 = (llvm::Type *)llvm::SCEV::getType(v41);
  uint64_t v44 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v42, v43, 0, 0);
  unint64_t v45 = (llvm::SCEV *)llvm::ScalarEvolution::getSMaxExpr(v42, v41, v44);
  unint64_t result = llvm::SCEV::isZero(v45);
  if (result)
  {
    unint64_t result = llvm::ScalarEvolution::getNegativeSCEV(*(llvm::ScalarEvolution **)(a1 + 8), (uint64_t)*v35, 0);
    goto LABEL_3;
  }
  return result;
}

uint64_t llvm::DependenceInfo::findBoundsGT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v8 = a5;
  uint64_t v9 = a4 + 144 * a5;
  *(void *)(v9 + 104) = 0;
  uint64_t v10 = (void *)(v9 + 104);
  *(void *)(v9 + 4llvm::Function::viewCFG(this, 1, 0, 0) = 0;
  unint64_t v11 = (uint64_t *)(v9 + 40);
  uint64_t v12 = *(llvm::SCEV **)(a4 + 144 * a5);
  uint64_t v13 = *(llvm::ScalarEvolution **)(a1 + 8);
  if (v12)
  {
    uint64_t Type = (llvm::Type *)llvm::SCEV::getType(*(llvm::SCEV **)(a4 + 144 * a5));
    unint64_t Constant = (const llvm::APInt *)llvm::ScalarEvolution::getConstant(v13, Type, 1uLL, 0);
    unint64_t MinusSCEV = llvm::ScalarEvolution::getMinusSCEV(v13, v12, Constant, 0, 0);
    uint64_t v17 = 32 * v8;
    uint64_t v18 = *(llvm::SCEV **)(a2 + 32 * v8);
    uint64_t v19 = a3 + 32 * v8;
    unsigned int v20 = (llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV(*(llvm::ScalarEvolution **)(a1 + 8), v18, *(const llvm::APInt **)(v19 + 8), 0, 0);
    uint64_t v21 = *(llvm::ScalarEvolution **)(a1 + 8);
    uint64_t v22 = (llvm::Type *)llvm::SCEV::getType(v20);
    uint64_t v23 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v21, v22, 0, 0);
    uint64_t SMinExpr = llvm::ScalarEvolution::getSMinExpr(v21, v20, v23);
    uint64_t v25 = *(void *)(a1 + 8);
    uint64_t v26 = sub_1CBFD7CB4(v25, SMinExpr, MinusSCEV, 0, 0);
    *uint64_t v10 = sub_1CBFD7D6C(v25, v26, *(void *)(a2 + v17), 0, 0);
    int v27 = (llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV(*(llvm::ScalarEvolution **)(a1 + 8), *(llvm::SCEV **)(a2 + v17), *(const llvm::APInt **)(v19 + 16), 0, 0);
    uint64_t v28 = *(llvm::ScalarEvolution **)(a1 + 8);
    char v29 = (llvm::Type *)llvm::SCEV::getType(v27);
    unsigned int v30 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v28, v29, 0, 0);
    uint64_t SMaxExpr = llvm::ScalarEvolution::getSMaxExpr(v28, v27, v30);
    uint64_t v32 = *(void *)(a1 + 8);
    uint64_t v33 = sub_1CBFD7CB4(v32, SMaxExpr, MinusSCEV, 0, 0);
    uint64_t result = sub_1CBFD7D6C(v32, v33, *(void *)(a2 + v17), 0, 0);
LABEL_3:
    *unint64_t v11 = result;
    return result;
  }
  uint64_t v35 = (llvm::SCEV **)(a2 + 32 * a5);
  uint64_t v36 = a3 + 32 * a5;
  unsigned int v37 = (llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV(*(llvm::ScalarEvolution **)(a1 + 8), *v35, *(const llvm::APInt **)(v36 + 8), 0, 0);
  uint64_t v38 = *(llvm::ScalarEvolution **)(a1 + 8);
  uint64_t v39 = (llvm::Type *)llvm::SCEV::getType(v37);
  unsigned int v40 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v38, v39, 0, 0);
  unsigned int v41 = (llvm::SCEV *)llvm::ScalarEvolution::getSMinExpr(v38, v37, v40);
  if (llvm::SCEV::isZero(v41)) {
    *uint64_t v10 = *v35;
  }
  uint64_t v42 = (llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV(*(llvm::ScalarEvolution **)(a1 + 8), *v35, *(const llvm::APInt **)(v36 + 16), 0, 0);
  int v43 = *(llvm::ScalarEvolution **)(a1 + 8);
  uint64_t v44 = (llvm::Type *)llvm::SCEV::getType(v42);
  unint64_t v45 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v43, v44, 0, 0);
  unsigned int v46 = (llvm::SCEV *)llvm::ScalarEvolution::getSMaxExpr(v43, v42, v45);
  uint64_t result = llvm::SCEV::isZero(v46);
  if (result)
  {
    uint64_t result = (uint64_t)*v35;
    goto LABEL_3;
  }
  return result;
}

uint64_t llvm::DependenceInfo::findBoundsEQ(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v6 = (uint64_t *)(a4 + 144 * a5);
  v6[11] = 0;
  uint64_t v7 = v6 + 11;
  void v6[3] = 0;
  uint64_t v8 = *v6;
  unint64_t MinusSCEV = (llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV(*(llvm::ScalarEvolution **)(a1 + 8), *(llvm::SCEV **)(a2 + 32 * a5), *(const llvm::APInt **)(a3 + 32 * a5), 0, 0);
  uint64_t v10 = *(llvm::ScalarEvolution **)(a1 + 8);
  uint64_t Type = (llvm::Type *)llvm::SCEV::getType(MinusSCEV);
  unint64_t Constant = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v10, Type, 0, 0);
  uint64_t SMinExpr = (llvm::SCEV *)llvm::ScalarEvolution::getSMinExpr(v10, MinusSCEV, Constant);
  unint64_t v14 = SMinExpr;
  if (v8)
  {
    *uint64_t v7 = sub_1CBFD7CB4(*(void *)(a1 + 8), (uint64_t)SMinExpr, *v6, 0, 0);
    uint64_t v15 = *(llvm::ScalarEvolution **)(a1 + 8);
    uint64_t v16 = (llvm::Type *)llvm::SCEV::getType(MinusSCEV);
    uint64_t v17 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v15, v16, 0, 0);
    uint64_t SMaxExpr = llvm::ScalarEvolution::getSMaxExpr(v15, MinusSCEV, v17);
    uint64_t result = sub_1CBFD7CB4(*(void *)(a1 + 8), SMaxExpr, *v6, 0, 0);
    unsigned int v20 = (llvm::SCEV *)result;
LABEL_3:
    void v6[3] = (uint64_t)v20;
    return result;
  }
  if (llvm::SCEV::isZero(SMinExpr)) {
    *uint64_t v7 = (uint64_t)v14;
  }
  uint64_t v21 = *(llvm::ScalarEvolution **)(a1 + 8);
  uint64_t v22 = (llvm::Type *)llvm::SCEV::getType(MinusSCEV);
  uint64_t v23 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v21, v22, 0, 0);
  unsigned int v20 = (llvm::SCEV *)llvm::ScalarEvolution::getSMaxExpr(v21, MinusSCEV, v23);
  uint64_t result = llvm::SCEV::isZero(v20);
  if (result) {
    goto LABEL_3;
  }
  return result;
}

uint64_t llvm::DependenceInfo::getLowerBound(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8 * *(unsigned __int8 *)(a2 + 280) + 216);
  if (v3)
  {
    for (unsigned int i = 2; i <= *(_DWORD *)(a1 + 40); ++i)
    {
      uint64_t v6 = *(void *)(a2 + 144 * i + 8 * *(unsigned __int8 *)(a2 + 144 * i + 136) + 72);
      if (!v6) {
        return 0;
      }
      uint64_t v3 = sub_1CBFD7D6C(*(void *)(a1 + 8), v3, v6, 0, 0);
      if (!v3) {
        return v3;
      }
    }
  }
  return v3;
}

uint64_t llvm::DependenceInfo::getUpperBound(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8 * *(unsigned __int8 *)(a2 + 280) + 152);
  if (v3)
  {
    for (unsigned int i = 2; i <= *(_DWORD *)(a1 + 40); ++i)
    {
      uint64_t v6 = *(void *)(a2 + 144 * i + 8 * *(unsigned __int8 *)(a2 + 144 * i + 136) + 8);
      if (!v6) {
        return 0;
      }
      uint64_t v3 = sub_1CBFD7D6C(*(void *)(a1 + 8), v3, v6, 0, 0);
      if (!v3) {
        return v3;
      }
    }
  }
  return v3;
}

unint64_t llvm::DependenceInfo::findCoefficient(llvm::DependenceInfo *this, const llvm::SCEV *a2, const llvm::Loop *a3)
{
  uint64_t v3 = a2;
  if (a2 && *((_WORD *)a2 + 12) == 7)
  {
    while (*((const llvm::Loop **)v3 + 6) != a3)
    {
      uint64_t v3 = (const llvm::SCEV *)**((void **)v3 + 4);
      if (v3) {
        BOOL v4 = *((unsigned __int16 *)v3 + 12) == 7;
      }
      else {
        BOOL v4 = 0;
      }
      if (!v4) {
        goto LABEL_8;
      }
    }
    uint64_t v8 = (llvm::ScalarEvolution *)*((void *)this + 1);
    return sub_1CBFD7EA0((uint64_t)v3, v8);
  }
  else
  {
LABEL_8:
    unsigned int v5 = (llvm::ScalarEvolution *)*((void *)this + 1);
    uint64_t Type = (llvm::Type *)llvm::SCEV::getType(v3);
    return llvm::ScalarEvolution::getConstant(v5, Type, 0, 0);
  }
}

const llvm::SCEV *llvm::DependenceInfo::zeroCoefficient(llvm::DependenceInfo *this, const llvm::SCEV ***a2, const llvm::Loop *a3)
{
  uint64_t v3 = (const llvm::SCEV *)a2;
  if (!a2 || *((_WORD *)a2 + 12) != 7) {
    return v3;
  }
  if (a2[6] == (const llvm::SCEV **)a3) {
    return *a2[4];
  }
  uint64_t v6 = (llvm::ScalarEvolution *)*((void *)this + 1);
  uint64_t v7 = llvm::DependenceInfo::zeroCoefficient(this, *a2[4], a3);
  uint64_t v8 = sub_1CBFD7EA0((uint64_t)v3, *((llvm::ScalarEvolution **)this + 1));
  uint64_t v9 = (const llvm::Loop *)*((void *)v3 + 6);
  uint64_t v10 = *((_WORD *)v3 + 14) & 7;

  return (const llvm::SCEV *)llvm::ScalarEvolution::getAddRecExpr(v6, v7, v8, v9, v10);
}

uint64_t llvm::DependenceInfo::addToCoefficient(llvm::DependenceInfo *this, const llvm::SCEV *a2, const llvm::Loop *a3, const llvm::SCEV *a4)
{
  if (!a2 || *((_WORD *)a2 + 12) != 7)
  {
    unint64_t v11 = (llvm::ScalarEvolution *)*((void *)this + 1);
LABEL_7:
    uint64_t v12 = a2;
    uint64_t v13 = a4;
    unint64_t v14 = a3;
    uint64_t v15 = 0;
    goto LABEL_8;
  }
  uint64_t v8 = *((void *)this + 1);
  if (*((const llvm::Loop **)a2 + 6) != a3)
  {
    BOOL isLoopInvariant = llvm::ScalarEvolution::isLoopInvariant(*((llvm::ScalarEvolution **)this + 1), a2, a3);
    uint64_t v10 = (llvm::ScalarEvolution *)*((void *)this + 1);
    if (!isLoopInvariant)
    {
      uint64_t v19 = llvm::DependenceInfo::addToCoefficient(this, **((const llvm::SCEV ***)a2 + 4), a3, a4);
      uint64_t v13 = (const llvm::SCEV *)sub_1CBFD7EA0((uint64_t)a2, *((llvm::ScalarEvolution **)this + 1));
      unint64_t v14 = (const llvm::Loop *)*((void *)a2 + 6);
      uint64_t v15 = *((_WORD *)a2 + 14) & 7;
      unint64_t v11 = v10;
      uint64_t v12 = (const llvm::SCEV *)v19;
      goto LABEL_8;
    }
    unint64_t v11 = (llvm::ScalarEvolution *)*((void *)this + 1);
    goto LABEL_7;
  }
  uint64_t v17 = sub_1CBFD7EA0((uint64_t)a2, *((llvm::ScalarEvolution **)this + 1));
  uint64_t v18 = (llvm::SCEV *)sub_1CBFD7D6C(v8, v17, (uint64_t)a4, 0, 0);
  if (llvm::SCEV::isZero(v18)) {
    return **((void **)a2 + 4);
  }
  unint64_t v11 = (llvm::ScalarEvolution *)*((void *)this + 1);
  uint64_t v12 = (const llvm::SCEV *)**((void **)a2 + 4);
  unint64_t v14 = (const llvm::Loop *)*((void *)a2 + 6);
  uint64_t v15 = *((_WORD *)a2 + 14) & 7;
  uint64_t v13 = v18;
LABEL_8:

  return llvm::ScalarEvolution::getAddRecExpr(v11, (uint64_t)v12, (uint64_t)v13, v14, v15);
}

uint64_t llvm::DependenceInfo::propagate(llvm::ScalarEvolution **a1, const llvm::SCEV **a2, const llvm::SCEV **a3, unint64_t *a4, void *a5, BOOL *a6)
{
  unint64_t v12 = *a4;
  if ((*a4 & 1) == 0)
  {
    unsigned int v13 = sub_1CB9FA0BC(v12);
    if (v13 == -1) {
      goto LABEL_16;
    }
    goto LABEL_6;
  }
  unint64_t v14 = (v12 >> 1) & ~(-1 << (v12 >> 58));
  if (v14)
  {
    unsigned int v13 = __clz(__rbit64(v14));
LABEL_6:
    char v15 = 0;
    while (1)
    {
      uint64_t v16 = (llvm::DependenceInfo::Constraint *)(*a5 + 48 * v13);
      int v17 = *(_DWORD *)v16;
      if (*(_DWORD *)v16 == 2)
      {
        char v18 = llvm::DependenceInfo::propagateDistance(a1, a2, a3, v16, a6);
      }
      else
      {
        if ((v17 & 0xFFFFFFFE) != 2)
        {
          if (v17 == 1)
          {
            llvm::DependenceInfo::propagatePoint((llvm::DependenceInfo *)a1, a2, a3, v16);
            char v15 = 1;
          }
          goto LABEL_11;
        }
        char v18 = llvm::DependenceInfo::propagateLine((llvm::ConstantInt *****)a1, a2, a3, v16, a6);
      }
      v15 |= v18;
LABEL_11:
      unsigned int v13 = sub_1CB9F9DF0(a4, v13);
      if (v13 == -1) {
        return v15 & 1;
      }
    }
  }
LABEL_16:
  char v15 = 0;
  return v15 & 1;
}

BOOL llvm::DependenceInfo::propagateDistance(llvm::ScalarEvolution **this, const llvm::SCEV **a2, const llvm::SCEV **a3, llvm::DependenceInfo::Constraint *a4, BOOL *a5)
{
  uint64_t v10 = (const llvm::Loop *)*((void *)a4 + 5);
  Coefficient = (llvm::SCEV *)llvm::DependenceInfo::findCoefficient((llvm::DependenceInfo *)this, *a2, v10);
  BOOL isZero = llvm::SCEV::isZero(Coefficient);
  if (!isZero)
  {
    uint64_t v14 = (uint64_t)this[1];
    unint64_t NegativeSCEV = llvm::ScalarEvolution::getNegativeSCEV(*((llvm::ScalarEvolution **)a4 + 1), *((void *)a4 + 4), 0);
    uint64_t v16 = (const llvm::APInt *)sub_1CBFD7CB4(v14, (uint64_t)Coefficient, NegativeSCEV, 0, 0);
    unint64_t MinusSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV(this[1], *a2, v16, 0, 0);
    *a2 = MinusSCEV;
    *a2 = llvm::DependenceInfo::zeroCoefficient((llvm::DependenceInfo *)this, (const llvm::SCEV ***)MinusSCEV, v10);
    char v18 = *a3;
    uint64_t v19 = (const llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV(this[1], (uint64_t)Coefficient, 0);
    unsigned int v20 = (const llvm::SCEV *)llvm::DependenceInfo::addToCoefficient((llvm::DependenceInfo *)this, v18, v10, v19);
    *a3 = v20;
    uint64_t v21 = (llvm::SCEV *)llvm::DependenceInfo::findCoefficient((llvm::DependenceInfo *)this, v20, v10);
    if (!llvm::SCEV::isZero(v21)) {
      *a5 = 0;
    }
  }
  return !isZero;
}

uint64_t llvm::DependenceInfo::propagateLine(llvm::ConstantInt *****this, const llvm::SCEV **a2, const llvm::SCEV **a3, llvm::DependenceInfo::Constraint *a4, BOOL *a5)
{
  uint64_t v10 = (llvm::SCEV *)*((void *)a4 + 2);
  uint64_t v9 = (llvm::SCEV *)*((void *)a4 + 3);
  uint64_t v12 = *((void *)a4 + 4);
  unint64_t v11 = (const llvm::Loop *)*((void *)a4 + 5);
  if (!llvm::SCEV::isZero(v10))
  {
    if (llvm::SCEV::isZero(v9))
    {
      if (*((_WORD *)v10 + 12)) {
        int v17 = 0;
      }
      else {
        int v17 = v10;
      }
      if (*(_WORD *)(v12 + 24)) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = v12;
      }
      if (v17) {
        BOOL v19 = v18 == 0;
      }
      else {
        BOOL v19 = 1;
      }
      if (!v19)
      {
        uint64_t v20 = *((void *)v17 + 4);
        unsigned int v65 = *(_DWORD *)(v20 + 32);
        if (v65 > 0x40) {
          operator new[]();
        }
        uint64_t v64 = *(void *)(v20 + 24);
        uint64_t v35 = *(void *)(v18 + 32);
        unsigned int v63 = *(_DWORD *)(v35 + 32);
        if (v63 > 0x40) {
          operator new[]();
        }
        uint64_t v62 = *(void *)(v35 + 24);
        llvm::APInt::sdiv((llvm::APInt *)&v62, (const llvm::APInt *)&v64, (uint64_t)&v60);
        unint64_t Coefficient = llvm::DependenceInfo::findCoefficient((llvm::DependenceInfo *)this, *a2, v11);
        unsigned int v37 = this[1];
        uint64_t v38 = *a2;
        unint64_t Constant = llvm::ScalarEvolution::getConstant(v37, (const llvm::APInt *)&v60, v39);
        uint64_t v41 = sub_1CBFD7CB4((uint64_t)v37, Coefficient, Constant, 0, 0);
        uint64_t v42 = (const llvm::SCEV *)sub_1CBFD7D6C((uint64_t)v37, (uint64_t)v38, v41, 0, 0);
        *a2 = v42;
        *a2 = llvm::DependenceInfo::zeroCoefficient((llvm::DependenceInfo *)this, (const llvm::SCEV ***)v42, v11);
        uint64_t v33 = *a3;
        goto LABEL_46;
      }
    }
    else
    {
      if (!llvm::DependenceInfo::isKnownPredicate((uint64_t)this, 0x20u, (uint64_t)v10, (uint64_t)v9))
      {
        unint64_t v43 = llvm::DependenceInfo::findCoefficient((llvm::DependenceInfo *)this, *a2, v11);
        *a2 = (const llvm::SCEV *)sub_1CBFD7CB4((uint64_t)this[1], (uint64_t)*a2, (uint64_t)v10, 0, 0);
        *a3 = (const llvm::SCEV *)sub_1CBFD7CB4((uint64_t)this[1], (uint64_t)*a3, (uint64_t)v10, 0, 0);
        uint64_t v44 = (uint64_t)this[1];
        unint64_t v45 = *a2;
        uint64_t v46 = sub_1CBFD7CB4(v44, v43, v12, 0, 0);
        uint64_t v47 = (const llvm::SCEV *)sub_1CBFD7D6C(v44, (uint64_t)v45, v46, 0, 0);
        *a2 = v47;
        *a2 = llvm::DependenceInfo::zeroCoefficient((llvm::DependenceInfo *)this, (const llvm::SCEV ***)v47, v11);
        uint64_t v48 = *a3;
        uint64_t v49 = (const llvm::SCEV *)sub_1CBFD7CB4((uint64_t)this[1], v43, (uint64_t)v9, 0, 0);
        unsigned int v50 = (const llvm::SCEV *)llvm::DependenceInfo::addToCoefficient((llvm::DependenceInfo *)this, v48, v11, v49);
        *a3 = v50;
        uint64_t v51 = (llvm::SCEV *)llvm::DependenceInfo::findCoefficient((llvm::DependenceInfo *)this, v50, v11);
        if (!llvm::SCEV::isZero(v51)) {
          *a5 = 0;
        }
        return 1;
      }
      if (*((_WORD *)v10 + 12)) {
        uint64_t v22 = 0;
      }
      else {
        uint64_t v22 = v10;
      }
      if (*(_WORD *)(v12 + 24)) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = v12;
      }
      if (v22) {
        BOOL v24 = v23 == 0;
      }
      else {
        BOOL v24 = 1;
      }
      if (!v24)
      {
        uint64_t v25 = *((void *)v22 + 4);
        unsigned int v65 = *(_DWORD *)(v25 + 32);
        if (v65 > 0x40) {
          operator new[]();
        }
        uint64_t v64 = *(void *)(v25 + 24);
        uint64_t v52 = *(void *)(v23 + 32);
        unsigned int v63 = *(_DWORD *)(v52 + 32);
        if (v63 > 0x40) {
          operator new[]();
        }
        uint64_t v62 = *(void *)(v52 + 24);
        llvm::APInt::sdiv((llvm::APInt *)&v62, (const llvm::APInt *)&v64, (uint64_t)&v60);
        uint64_t v53 = (const llvm::SCEV *)llvm::DependenceInfo::findCoefficient((llvm::DependenceInfo *)this, *a2, v11);
        unsigned int v54 = this[1];
        uint64_t v55 = *a2;
        unint64_t v57 = llvm::ScalarEvolution::getConstant(v54, (const llvm::APInt *)&v60, v56);
        uint64_t v58 = sub_1CBFD7CB4((uint64_t)v54, (uint64_t)v53, v57, 0, 0);
        uint64_t v59 = (const llvm::SCEV *)sub_1CBFD7D6C((uint64_t)v54, (uint64_t)v55, v58, 0, 0);
        *a2 = v59;
        *a2 = llvm::DependenceInfo::zeroCoefficient((llvm::DependenceInfo *)this, (const llvm::SCEV ***)v59, v11);
        uint64_t v33 = (const llvm::SCEV *)llvm::DependenceInfo::addToCoefficient((llvm::DependenceInfo *)this, *a3, v11, v53);
        *a3 = v33;
        goto LABEL_46;
      }
    }
    return 0;
  }
  if (*((_WORD *)v9 + 12)) {
    unsigned int v13 = 0;
  }
  else {
    unsigned int v13 = v9;
  }
  if (*(_WORD *)(v12 + 24)) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v12;
  }
  if (v13) {
    BOOL v15 = v14 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15) {
    return 0;
  }
  uint64_t v21 = *((void *)v13 + 4);
  unsigned int v65 = *(_DWORD *)(v21 + 32);
  if (v65 > 0x40) {
    operator new[]();
  }
  uint64_t v64 = *(void *)(v21 + 24);
  uint64_t v26 = *(void *)(v14 + 32);
  unsigned int v63 = *(_DWORD *)(v26 + 32);
  if (v63 > 0x40) {
    operator new[]();
  }
  uint64_t v62 = *(void *)(v26 + 24);
  llvm::APInt::sdiv((llvm::APInt *)&v62, (const llvm::APInt *)&v64, (uint64_t)&v60);
  unint64_t v27 = llvm::DependenceInfo::findCoefficient((llvm::DependenceInfo *)this, *a3, v11);
  uint64_t v28 = this[1];
  char v29 = *a2;
  unint64_t v31 = llvm::ScalarEvolution::getConstant(v28, (const llvm::APInt *)&v60, v30);
  uint64_t v32 = (const llvm::APInt *)sub_1CBFD7CB4((uint64_t)v28, v27, v31, 0, 0);
  *a2 = (const llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV((llvm::ScalarEvolution *)v28, v29, v32, 0, 0);
  *a3 = llvm::DependenceInfo::zeroCoefficient((llvm::DependenceInfo *)this, (const llvm::SCEV ***)*a3, v11);
  uint64_t v33 = *a2;
LABEL_46:
  uint64_t v34 = (llvm::SCEV *)llvm::DependenceInfo::findCoefficient((llvm::DependenceInfo *)this, v33, v11);
  if (!llvm::SCEV::isZero(v34)) {
    *a5 = 0;
  }
  if (v61 >= 0x41 && v60) {
    MEMORY[0x1D25D9CB0](v60, 0x1000C8000313F17);
  }
  if (v63 >= 0x41 && v62) {
    MEMORY[0x1D25D9CB0](v62, 0x1000C8000313F17);
  }
  if (v65 >= 0x41)
  {
    if (v64) {
      MEMORY[0x1D25D9CB0](v64, 0x1000C8000313F17);
    }
  }
  return 1;
}

uint64_t llvm::DependenceInfo::propagatePoint(llvm::DependenceInfo *this, const llvm::SCEV **a2, const llvm::SCEV **a3, llvm::DependenceInfo::Constraint *a4)
{
  uint64_t v8 = (const llvm::Loop *)*((void *)a4 + 5);
  unint64_t Coefficient = llvm::DependenceInfo::findCoefficient(this, *a2, v8);
  unint64_t v10 = llvm::DependenceInfo::findCoefficient(this, *a3, v8);
  unint64_t v11 = (llvm::SCEV *)sub_1CBFD7CB4(*((void *)this + 1), Coefficient, *((void *)a4 + 2), 0, 0);
  uint64_t v12 = (const llvm::APInt *)sub_1CBFD7CB4(*((void *)this + 1), v10, *((void *)a4 + 3), 0, 0);
  unsigned int v13 = (llvm::ScalarEvolution *)*((void *)this + 1);
  uint64_t v14 = *a2;
  unint64_t MinusSCEV = llvm::ScalarEvolution::getMinusSCEV(v13, v11, v12, 0, 0);
  uint64_t v16 = (const llvm::SCEV *)sub_1CBFD7D6C((uint64_t)v13, (uint64_t)v14, MinusSCEV, 0, 0);
  *a2 = v16;
  *a2 = llvm::DependenceInfo::zeroCoefficient(this, (const llvm::SCEV ***)v16, v8);
  *a3 = llvm::DependenceInfo::zeroCoefficient(this, (const llvm::SCEV ***)*a3, v8);
  return 1;
}

uint64_t llvm::DependenceInfo::updateDirection(uint64_t result, char *a2, int *a3)
{
  int v3 = *a3;
  if (*a3 != 4)
  {
    uint64_t v6 = result;
    if (v3 == 2)
    {
      *a2 &= ~8u;
      unint64_t NegativeSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV(*((llvm::ScalarEvolution **)a3 + 1), *((void *)a3 + 4), 0);
      *((void *)a2 + 1) = NegativeSCEV;
      if (llvm::ScalarEvolution::isKnownNonZero(*(llvm::ScalarEvolution **)(v6 + 8), NegativeSCEV)) {
        int v8 = 0;
      }
      else {
        int v8 = 2;
      }
      int v9 = v8 | !llvm::ScalarEvolution::isKnownNonPositive(*(llvm::ScalarEvolution **)(v6 + 8), *((const llvm::SCEV **)a2 + 1));
      uint64_t result = llvm::ScalarEvolution::isKnownNonNegative(*(llvm::ScalarEvolution **)(v6 + 8), *((const llvm::SCEV **)a2 + 1));
      char v10 = v9 | 4;
      char v11 = *a2;
      if (result) {
        char v10 = v9;
      }
    }
    else
    {
      if ((v3 & 0xFFFFFFFE) == 2)
      {
        *a2 &= ~8u;
        *((void *)a2 + 1) = 0;
        return result;
      }
      *a2 &= ~8u;
      *((void *)a2 + 1) = 0;
      if (llvm::DependenceInfo::isKnownPredicate(result, 0x21u, *((void *)a3 + 3), *((void *)a3 + 2))) {
        int v12 = 0;
      }
      else {
        int v12 = 2;
      }
      int v13 = v12 | llvm::DependenceInfo::isKnownPredicate(v6, 0x29u, *((void *)a3 + 3), *((void *)a3 + 2)) ^ 1;
      uint64_t result = llvm::DependenceInfo::isKnownPredicate(v6, 0x27u, *((void *)a3 + 3), *((void *)a3 + 2));
      char v10 = v13 | 4;
      char v11 = *a2;
      if (result) {
        char v10 = v13;
      }
    }
    *a2 = (v10 | 0xF8) & v11;
  }
  return result;
}

uint64_t llvm::DependenceInfo::tryDelinearize(unint64_t a1, uint64_t a2, uint64_t a3, void ***a4)
{
  int v8 = 0;
  v36[4] = *MEMORY[0x1E4F143B8];
  if (a2 && *(unsigned __int8 *)(a2 + 16) - 62 >= 0xFFFFFFFE) {
    int v8 = *(llvm::Value **)(a2 - 32);
  }
  int v9 = 0;
  if (a3 && *(unsigned __int8 *)(a3 + 16) - 62 >= 0xFFFFFFFE) {
    int v9 = *(llvm::Value **)(a3 - 32);
  }
  char v10 = *(uint64_t **)(a1 + 16);
  uint64_t v34 = *(void **)(a2 + 40);
  v32[0] = 0;
  char v11 = 0;
  if (sub_1CB834D78(v10, &v34, v32)) {
    char v11 = (const llvm::Loop *)*((void *)v32[0] + 1);
  }
  int v12 = *(uint64_t **)(a1 + 16);
  uint64_t v34 = *(void **)(a3 + 40);
  v32[0] = 0;
  int v13 = 0;
  if (sub_1CB834D78(v12, &v34, v32)) {
    int v13 = (const llvm::Loop *)*((void *)v32[0] + 1);
  }
  SCEVAtScope = llvm::ScalarEvolution::getSCEVAtScope(*(llvm::ScalarEvolution **)(a1 + 8), v8, v11);
  BOOL v15 = llvm::ScalarEvolution::getSCEVAtScope(*(llvm::ScalarEvolution **)(a1 + 8), v9, v13);
  PointerBase = llvm::ScalarEvolution::getPointerBase(*(llvm::ScalarEvolution **)(a1 + 8), SCEVAtScope);
  int v17 = (char *)PointerBase - 32;
  if (!PointerBase) {
    int v17 = 0;
  }
  if (*((_WORD *)PointerBase + 12) == 14) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  BOOL v19 = llvm::ScalarEvolution::getPointerBase(*(llvm::ScalarEvolution **)(a1 + 8), v15);
  uint64_t v20 = (char *)v19 - 32;
  if (!v19) {
    uint64_t v20 = 0;
  }
  if (*((_WORD *)v19 + 12) == 14) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  if (v18) {
    BOOL v22 = v21 == 0;
  }
  else {
    BOOL v22 = 1;
  }
  if (v22 || v18 != v21) {
    return 0;
  }
  uint64_t v34 = v36;
  uint64_t v35 = 0x400000000;
  v32[0] = v33;
  v32[1] = (void *)0x400000000;
  if ((llvm::DependenceInfo::tryDelinearizeFixedSize((llvm::ScalarEvolution **)a1, a2, a3, SCEVAtScope, v15, (unsigned int *)&v34, (uint64_t)v32) & 1) != 0|| llvm::DependenceInfo::tryDelinearizeParametricSize((llvm::ScalarEvolution **)a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3, SCEVAtScope, v15, (uint64_t)&v34, (uint64_t)v32))
  {
    int v26 = v35;
    sub_1CD480CA0(a4, (int)v35);
    if (v26 < 1)
    {
      uint64_t v24 = 1;
    }
    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 8 * v26;
      uint64_t v24 = 1;
      do
      {
        unsigned int v30 = &(*a4)[v27];
        *unsigned int v30 = *(void **)((char *)v34 + v28);
        v30[1] = *(void **)((char *)v32[0] + v28);
        unint64_t v31 = (llvm::SCEV **)v30;
        llvm::DependenceInfo::unifySubscriptType(a1, &v31, 1);
        v28 += 8;
        v27 += 6;
      }
      while (v29 != v28);
    }
  }
  else
  {
    uint64_t v24 = 0;
  }
  if (v32[0] != v33) {
    free(v32[0]);
  }
  if (v34 != v36) {
    free(v34);
  }
  return v24;
}

uint64_t llvm::DependenceInfo::tryDelinearizeFixedSize(llvm::ScalarEvolution **a1, uint64_t a2, uint64_t a3, llvm::SCEV *a4, const llvm::SCEV *a5, unsigned int *a6, uint64_t a7)
{
  char v11 = 0;
  v32[2] = *MEMORY[0x1E4F143B8];
  if (a2 && *(unsigned __int8 *)(a2 + 16) - 62 >= 0xFFFFFFFE) {
    char v11 = *(const llvm::Value **)(a2 - 32);
  }
  int v12 = 0;
  if (a3 && *(unsigned __int8 *)(a3 + 16) - 62 >= 0xFFFFFFFE) {
    int v12 = *(const llvm::Value **)(a3 - 32);
  }
  PointerBase = llvm::ScalarEvolution::getPointerBase(a1[1], a4);
  uint64_t v14 = (llvm::Value **)((char *)PointerBase - 32);
  if (!PointerBase) {
    uint64_t v14 = 0;
  }
  if (*((_WORD *)PointerBase + 12) == 14) {
    BOOL v15 = v14;
  }
  else {
    BOOL v15 = 0;
  }
  uint64_t v16 = llvm::ScalarEvolution::getPointerBase(a1[1], a5);
  uint64_t v17 = 0;
  uint64_t v18 = (llvm::Value **)((char *)v16 - 32);
  if (!v16) {
    uint64_t v18 = 0;
  }
  if (*((_WORD *)v16 + 12) != 14) {
    uint64_t v18 = 0;
  }
  if (*((unsigned char *)v11 + 16) == 62) {
    uint64_t v19 = (uint64_t)v11;
  }
  else {
    uint64_t v19 = 0;
  }
  if (*((unsigned char *)v12 + 16) == 62) {
    uint64_t v20 = (uint64_t)v12;
  }
  else {
    uint64_t v20 = 0;
  }
  if (v19 && v20)
  {
    uint64_t v25 = v18;
    __s1 = v32;
    uint64_t v31 = 0x400000000;
    __s2 = v29;
    uint64_t v28 = 0x400000000;
    llvm::getIndexExpressionsFromGEP((uint64_t)a1[1], v19, (uint64_t)a6, (uint64_t)&__s1);
    int v26 = (unsigned int *)a7;
    llvm::getIndexExpressionsFromGEP((uint64_t)a1[1], v20, a7, (uint64_t)&__s2);
    if (v31
      && (uint64_t v21 = a6 + 2, a6[2] >= 2)
      && v31 == v28
      && !memcmp(__s1, __s2, 4 * v31))
    {
      uint64_t v23 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF)));
      uint64_t v24 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF)));
      if (v23 == v15[3]
        && v24 == v25[3]
        && (byte_1EBCC5430 || sub_1CBFDC168(a1, &__s1, a6, v11) && sub_1CBFDC168(a1, &__s2, v26, v12)))
      {
        uint64_t v17 = 1;
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v21 = a6 + 2;
    }
    uint64_t v17 = 0;
    *uint64_t v21 = 0;
    v26[2] = 0;
LABEL_30:
    if (__s2 != v29) {
      free(__s2);
    }
    if (__s1 != v32) {
      free(__s1);
    }
  }
  return v17;
}

uint64_t llvm::DependenceInfo::invalidate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v11[0] = (void **)a3;
  v11[1] = (void **)&llvm::DependenceAnalysis::Key;
  uint64_t v7 = sub_1CB896AE8(a3 + 48, (uint64_t)&llvm::DependenceAnalysis::Key);
  uint64_t v8 = *(void *)(a3 + 56);
  if (v8 == *(void *)(a3 + 48)) {
    int v9 = (unsigned int *)(a3 + 68);
  }
  else {
    int v9 = (unsigned int *)(a3 + 64);
  }
  BOOL v12 = v7 != (void *)(v8 + 8 * *v9);
  if ((sub_1CBF75724(v11) || sub_1CBF7593C((uint64_t)v11))
    && (sub_1CBF745FC(a4, (uint64_t)&llvm::AAManager::Key, a2, a3) & 1) == 0
    && (sub_1CBF745FC(a4, (uint64_t)&llvm::ScalarEvolutionAnalysis::Key, a2, a3) & 1) == 0)
  {
    return sub_1CBF745FC(a4, (uint64_t)&llvm::LoopAnalysis::Key, a2, a3);
  }
  else
  {
    return 1;
  }
}

uint64_t sub_1CD480788(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    MEMORY[0x1D25D9CB0](v2, 0x1060C80768B1B2DLL);
  }
  return a1;
}

void sub_1CD4807D0()
{
}

uint64_t sub_1CD4807E4()
{
  return 1;
}

uint64_t sub_1CD4807EC()
{
  return 1;
}

uint64_t sub_1CD4807F4()
{
  return 0;
}

uint64_t sub_1CD4807FC()
{
  return 0;
}

uint64_t sub_1CD480804()
{
  return 7;
}

uint64_t sub_1CD48080C()
{
  return 0;
}

uint64_t sub_1CD480814()
{
  return 0;
}

uint64_t sub_1CD48081C()
{
  return 0;
}

uint64_t sub_1CD480824()
{
  return 0;
}

void sub_1CD48082C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    MEMORY[0x1D25D9CB0](v2, 0x1060C80768B1B2DLL);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD480890(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 42);
}

uint64_t sub_1CD480898()
{
  return 0;
}

uint64_t sub_1CD4808A0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 43);
}

uint64_t sub_1CD4808A8(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 40);
}

void llvm::callDefaultCtor<llvm::DependenceAnalysisWrapperPass>()
{
}

void sub_1CD4808EC(char **a1, _WORD *a2, _WORD *a3, __n128 *a4)
{
  sub_1CB883A14((uint64_t)&qword_1EBCC52F0, 0, 0);
  byte_1EBCC5370 = 0;
  qword_1EBCC5378 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBCC5380 = 0;
  qword_1EBCC52F0 = (uint64_t)&unk_1F26440A0;
  qword_1EBCC5388 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCC5390 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCC53A8 = (uint64_t)&qword_1EBCC5390;
  sub_1CD4809EC(a1, a2, a3, a4);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCC52F0);
}

__n128 sub_1CD4809EC(char **a1, _WORD *a2, _WORD *a3, __n128 *a4)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCC52F0, "da-delinearize", 0xEuLL);
  uint64_t v8 = *a1;
  byte_1EBCC5370 = **a1;
  byte_1EBCC5381 = 1;
  byte_1EBCC5380 = *v8;
  word_1EBCC52FA = word_1EBCC52FA & 0xFF9F | (32 * (*a2 & 3));
  word_1EBCC52FA = word_1EBCC52FA & 0xFFF8 | *a3 & 7;
  __n128 result = *a4;
  xmmword_1EBCC5310 = (__int128)*a4;
  return result;
}