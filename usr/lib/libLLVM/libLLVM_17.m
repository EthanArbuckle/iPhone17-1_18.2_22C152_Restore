void sub_1CC13EF18(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  uint64_t v15;
  void *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  void *v20;
  unsigned int v21;

  v6 = *(void **)(a1 + 88);
  v5 = *(void **)(a1 + 96);
  v4 = (unsigned int *)(a1 + 88);
  v7 = v4[5];
  if (v5 == v6)
  {
    if (v7)
    {
      v8 = 0;
      v9 = 8 * v7;
      v10 = v5;
      while (*v10 != a2)
      {
        if (*v10 == -2) {
          v8 = v10;
        }
        ++v10;
        v9 -= 8;
        if (!v9)
        {
          if (!v8) {
            goto LABEL_9;
          }
          *v8 = a2;
          --*(_DWORD *)(a1 + 112);
          goto LABEL_33;
        }
      }
      return;
    }
LABEL_9:
    v11 = *(_DWORD *)(a1 + 104);
    if (v7 < v11)
    {
      *(_DWORD *)(a1 + 108) = v7 + 1;
      v5[v7] = a2;
LABEL_33:
      if (**(void **)(*(void *)a1 + 8) == a2)
      {
        **(unsigned char **)a1 = 1;
      }
      else
      {
        v21 = *(_DWORD *)(a1 + 16);
        if (v21 >= *(_DWORD *)(a1 + 20)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(a1 + 8) + 8 * v21) = a2;
        ++*(_DWORD *)(a1 + 16);
      }
      return;
    }
  }
  else
  {
    v11 = *(_DWORD *)(a1 + 104);
  }
  if (3 * v11 <= 4 * ((int)v7 - *(_DWORD *)(a1 + 112)))
  {
    if (v11 >= 0x40) {
      v11 *= 2;
    }
    else {
      v11 = 128;
    }
  }
  else if (v11 - v7 >= v11 >> 3)
  {
    goto LABEL_14;
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v4, v11);
  v11 = *(_DWORD *)(a1 + 104);
  v5 = *(void **)(a1 + 96);
LABEL_14:
  v12 = v11 - 1;
  v13 = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v14 = &v5[v13];
  v15 = *v14;
  if (*v14 != -1)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != a2)
    {
      if (v16) {
        v18 = 0;
      }
      else {
        v18 = v15 == -2;
      }
      if (v18) {
        v16 = v14;
      }
      v19 = v13 + v17++;
      v13 = v19 & v12;
      v14 = &v5[v19 & v12];
      v15 = *v14;
      if (*v14 == -1) {
        goto LABEL_26;
      }
    }
    return;
  }
  v16 = 0;
LABEL_26:
  if (v16) {
    v20 = v16;
  }
  else {
    v20 = v14;
  }
  if (*v20 != a2)
  {
    if (*v20 == -2) {
      --*(_DWORD *)(a1 + 112);
    }
    else {
      ++*(_DWORD *)(a1 + 108);
    }
    *v20 = a2;
    goto LABEL_33;
  }
}

uint64_t sub_1CC13F0F0(uint64_t result, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (void *)(result + 104 * v5);
    uint64_t v7 = *v6;
    if (*v6 != a3)
    {
      v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        v6 = (void *)(result + 104 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*v6 == a3) {
          goto LABEL_14;
        }
      }
      if (v8) {
        v6 = v8;
      }
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_14:
  *a4 = v6;
  return result;
}

void sub_1CC13F170(llvm::SmallPtrSetImplBase ***a1, uint64_t a2)
{
  v6 = (uint64_t *)a1[11];
  unsigned int v5 = (uint64_t *)a1[12];
  int v4 = (unsigned int *)(a1 + 11);
  uint64_t v7 = v4[5];
  if (v5 == v6)
  {
    if (v7)
    {
      v8 = 0;
      uint64_t v9 = 8 * v7;
      BOOL v10 = v5;
      while (*v10 != a2)
      {
        if (*v10 == -2) {
          v8 = v10;
        }
        ++v10;
        v9 -= 8;
        if (!v9)
        {
          if (!v8) {
            goto LABEL_9;
          }
          uint64_t *v8 = a2;
          --*((_DWORD *)a1 + 28);
          if (a2) {
            goto LABEL_34;
          }
          goto LABEL_67;
        }
      }
      return;
    }
LABEL_9:
    unsigned int v11 = *((_DWORD *)a1 + 26);
    if (v7 < v11)
    {
      *((_DWORD *)a1 + 27) = v7 + 1;
      v5[v7] = a2;
      if (!a2) {
        goto LABEL_67;
      }
LABEL_34:
      if (*(_WORD *)(a2 + 24) != 7)
      {
LABEL_67:
        unsigned int v38 = *((_DWORD *)a1 + 4);
        if (v38 >= *((_DWORD *)a1 + 5)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        a1[1][v38] = (llvm::SmallPtrSetImplBase *)a2;
        ++*((_DWORD *)a1 + 4);
        return;
      }
      v21 = **a1;
      uint64_t v22 = *(void *)(a2 + 48);
      uint64_t v23 = *((void *)v21 + 1);
      uint64_t v24 = *((unsigned int *)v21 + 5);
      if (v23 == *(void *)v21)
      {
        if (v24)
        {
          v25 = 0;
          uint64_t v26 = 8 * v24;
          v27 = (void *)*((void *)v21 + 1);
          while (*v27 != v22)
          {
            if (*v27 == -2) {
              v25 = v27;
            }
            ++v27;
            v26 -= 8;
            if (!v26)
            {
              if (!v25) {
                goto LABEL_43;
              }
              void *v25 = v22;
              --*((_DWORD *)v21 + 6);
              goto LABEL_67;
            }
          }
          goto LABEL_67;
        }
LABEL_43:
        unsigned int v28 = *((_DWORD *)v21 + 4);
        if (v24 < v28)
        {
          *((_DWORD *)v21 + 5) = v24 + 1;
          *(void *)(v23 + 8 * v24) = v22;
          goto LABEL_67;
        }
      }
      else
      {
        unsigned int v28 = *((_DWORD *)v21 + 4);
      }
      if (3 * v28 <= 4 * ((int)v24 - *((_DWORD *)v21 + 6)))
      {
        if (v28 >= 0x40) {
          v28 *= 2;
        }
        else {
          unsigned int v28 = 128;
        }
      }
      else if (v28 - v24 >= v28 >> 3)
      {
        goto LABEL_48;
      }
      llvm::SmallPtrSetImplBase::Grow(**a1, v28);
      unsigned int v28 = *((_DWORD *)v21 + 4);
      uint64_t v23 = *((void *)v21 + 1);
LABEL_48:
      unsigned int v29 = v28 - 1;
      unsigned int v30 = (v28 - 1) & ((v22 >> 4) ^ (v22 >> 9));
      v31 = (void *)(v23 + 8 * v30);
      uint64_t v32 = *v31;
      if (*v31 == -1)
      {
        v33 = 0;
LABEL_60:
        if (v33) {
          v37 = v33;
        }
        else {
          v37 = v31;
        }
        if (*v37 != v22)
        {
          if (*v37 == -2) {
            --*((_DWORD *)v21 + 6);
          }
          else {
            ++*((_DWORD *)v21 + 5);
          }
          void *v37 = v22;
        }
      }
      else
      {
        v33 = 0;
        int v34 = 1;
        while (v32 != v22)
        {
          if (v33) {
            BOOL v35 = 0;
          }
          else {
            BOOL v35 = v32 == -2;
          }
          if (v35) {
            v33 = v31;
          }
          unsigned int v36 = v30 + v34++;
          unsigned int v30 = v36 & v29;
          v31 = (void *)(v23 + 8 * (v36 & v29));
          uint64_t v32 = *v31;
          if (*v31 == -1) {
            goto LABEL_60;
          }
        }
      }
      goto LABEL_67;
    }
  }
  else
  {
    unsigned int v11 = *((_DWORD *)a1 + 26);
  }
  if (3 * v11 <= 4 * ((int)v7 - *((_DWORD *)a1 + 28)))
  {
    if (v11 >= 0x40) {
      v11 *= 2;
    }
    else {
      unsigned int v11 = 128;
    }
  }
  else if (v11 - v7 >= v11 >> 3)
  {
    goto LABEL_15;
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v4, v11);
  unsigned int v11 = *((_DWORD *)a1 + 26);
  unsigned int v5 = (uint64_t *)a1[12];
LABEL_15:
  unsigned int v12 = v11 - 1;
  unsigned int v13 = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v14 = &v5[v13];
  uint64_t v15 = *v14;
  if (*v14 != -1)
  {
    v16 = 0;
    int v17 = 1;
    while (v15 != a2)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == -2;
      }
      if (v18) {
        v16 = v14;
      }
      unsigned int v19 = v13 + v17++;
      unsigned int v13 = v19 & v12;
      v14 = &v5[v19 & v12];
      uint64_t v15 = *v14;
      if (*v14 == -1) {
        goto LABEL_27;
      }
    }
    return;
  }
  v16 = 0;
LABEL_27:
  if (v16) {
    v20 = v16;
  }
  else {
    v20 = v14;
  }
  if (*v20 != a2)
  {
    if (*v20 == -2) {
      --*((_DWORD *)a1 + 28);
    }
    else {
      ++*((_DWORD *)a1 + 27);
    }
    uint64_t *v20 = a2;
    if (!a2) {
      goto LABEL_67;
    }
    goto LABEL_34;
  }
}

void *sub_1CC13F4B0(uint64_t *a1, int a2)
{
  unsigned int v3 = *((_DWORD *)a1 + 4);
  int v4 = (uint64_t *)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(104 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    unsigned int v12 = *((_DWORD *)a1 + 4);
    if (v12)
    {
      uint64_t v13 = 104 * v12;
      do
      {
        void *result = -4096;
        result += 13;
        v13 -= 104;
      }
      while (v13);
    }
    if (v3)
    {
      v14 = &v4[13 * v3];
      uint64_t v15 = v4;
      do
      {
        uint64_t v16 = *v15;
        if ((*v15 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v17 = *((_DWORD *)a1 + 4);
          if (v17)
          {
            int v18 = v17 - 1;
            unsigned int v19 = v18 & ((v16 >> 4) ^ (v16 >> 9));
            uint64_t v20 = *a1 + 104 * v19;
            uint64_t v21 = *(void *)v20;
            if (v16 != *(void *)v20)
            {
              uint64_t v22 = 0;
              int v23 = 1;
              while (v21 != -4096)
              {
                if (v22) {
                  BOOL v24 = 0;
                }
                else {
                  BOOL v24 = v21 == -8192;
                }
                if (v24) {
                  uint64_t v22 = v20;
                }
                unsigned int v25 = v19 + v23++;
                unsigned int v19 = v25 & v18;
                uint64_t v20 = *a1 + 104 * v19;
                uint64_t v21 = *(void *)v20;
                if (v16 == *(void *)v20) {
                  goto LABEL_28;
                }
              }
              if (v22) {
                uint64_t v20 = v22;
              }
            }
          }
          else
          {
            uint64_t v20 = 0;
          }
LABEL_28:
          uint64_t v26 = (void *)(v20 + 40);
          *(void *)uint64_t v20 = v16;
          *(void *)(v20 + 8) = v20 + 40;
          v27 = (void *)v15[1];
          unsigned int v28 = (void *)v15[2];
          if (v28 == v27)
          {
            *(void *)(v20 + 16) = v26;
            uint64_t v29 = *((unsigned int *)v15 + 7);
            v27 = (void *)v15[2];
            if (v29)
            {
              memmove(v26, v27, 8 * v29);
              unsigned int v28 = (void *)v15[1];
              v27 = (void *)v15[2];
            }
          }
          else
          {
            *(void *)(v20 + 16) = v28;
            v15[2] = (uint64_t)v27;
            unsigned int v28 = v27;
          }
          *(void *)(v20 + 24) = v15[3];
          *(_DWORD *)(v20 + 32) = *((_DWORD *)v15 + 8);
          v15[3] = 8;
          *((_DWORD *)v15 + 8) = 0;
          ++*((_DWORD *)a1 + 2);
          if (v27 != v28) {
            free(v27);
          }
        }
        v15 += 13;
      }
      while (v15 != v14);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  a1[1] = 0;
  unsigned int v10 = *((_DWORD *)a1 + 4);
  if (v10)
  {
    uint64_t v11 = 104 * v10;
    do
    {
      void *result = -4096;
      result += 13;
      v11 -= 104;
    }
    while (v11);
  }
  return result;
}

void *sub_1CC13F6EC(uint64_t *a1, void *a2)
{
  int v7 = 0;
  char v4 = sub_1CC13F758(a1, a2, &v7);
  unint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = sub_1CC13F7F8((uint64_t)a1, (uint64_t)a2, a2, v7);
    *unint64_t v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
    v5[2] = 0;
  }
  return v5;
}

uint64_t sub_1CC13F758(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    int v7 = (void *)(*a1 + 24 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      unsigned int v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          unsigned int v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        int v7 = (void *)(v4 + 24 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_4;
        }
      }
      uint64_t result = 0;
      if (v10) {
        int v7 = v10;
      }
    }
  }
  else
  {
    int v7 = 0;
    uint64_t result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

void *sub_1CC13F7F8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_3:
    sub_1CC13F8AC(a1, v7);
    uint64_t v9 = 0;
    sub_1CC13F758((uint64_t *)a1, a3, &v9);
    a4 = v9;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3) {
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC13F8AC(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD4C28B8(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 24 * v10;
    do
    {
      void *result = -4096;
      result += 3;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC13F984(uint64_t *a1, void *a2, uint64_t *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v7 = *a1 + 48 * v6;
    uint64_t v8 = *(void *)(v7 + 24);
    if (*a2 == v8)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v9 = 0;
      int v10 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v9) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          uint64_t v9 = v7;
        }
        unsigned int v13 = v6 + v10++;
        unsigned int v6 = v13 & v5;
        uint64_t v7 = v4 + 48 * (v13 & v5);
        uint64_t v8 = *(void *)(v7 + 24);
        if (*a2 == v8) {
          goto LABEL_7;
        }
      }
      uint64_t result = 0;
      if (v9) {
        uint64_t v7 = v9;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t sub_1CC13FA28()
{
  int v5 = 2;
  v4.n128_u64[0] = (unint64_t)"Maximum number of iterations SCEV will symbolically execute a constant derived loop";
  v4.n128_u64[1] = 83;
  int v1 = 100;
  int v2 = 1;
  int v3 = &v1;
  sub_1CD4C1200(&v5, &v2, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCC7238, &dword_1CB82C000);
  int v5 = 1;
  int v3 = (int *)&llvm::VerifySCEV;
  v4.n128_u64[0] = (unint64_t)"Verify ScalarEvolution's backedge taken counts (slow)";
  v4.n128_u64[1] = 53;
  sub_1CD4C1394(&v5, (unsigned char **)&v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1CC086C1C, &qword_1EBCC72F8, &dword_1CB82C000);
  LODWORD(v3) = 1;
  v4.n128_u64[0] = (unint64_t)"Enable stricter verification with -verify-scev is passed";
  v4.n128_u64[1] = 56;
  sub_1CD4C1500((uint64_t)&unk_1EBCC73B8, "verify-scev-strict", &v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC73B8, &dword_1CB82C000);
  LODWORD(v3) = 1;
  v4.n128_u64[0] = (unint64_t)"Verify no dangling value in ScalarEvolution's ExprValueMap (slow)";
  v4.n128_u64[1] = 65;
  sub_1CD4C1500((uint64_t)&unk_1EBCC7478, "verify-scev-maps", &v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC7478, &dword_1CB82C000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Verify IR correctness when making sensitive SCEV queries (slow)";
  v4.n128_u64[1] = 63;
  LOBYTE(v2) = 0;
  int v3 = &v2;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCC7538, "scev-verify-ir", &v5, &v4, (unsigned char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC7538, &dword_1CB82C000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Threshold for inlining multiplication operands into a SCEV";
  v4.n128_u64[1] = 58;
  int v2 = 32;
  int v3 = &v2;
  sub_1CD413D64((uint64_t)&unk_1EBCC75F8, "scev-mulops-inline-threshold", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCC75F8, &dword_1CB82C000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Threshold for inlining addition operands into a SCEV";
  v4.n128_u64[1] = 52;
  int v2 = 500;
  int v3 = &v2;
  sub_1CD413D64((uint64_t)&unk_1EBCC76B8, "scev-addops-inline-threshold", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCC76B8, &dword_1CB82C000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Maximum depth of recursive SCEV complexity comparisons";
  v4.n128_u64[1] = 54;
  int v2 = 32;
  int v3 = &v2;
  sub_1CD413D64((uint64_t)&unk_1EBCC7778, "scalar-evolution-max-scev-compare-depth", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCC7778, &dword_1CB82C000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Maximum depth of recursive SCEV operations implication analysis";
  v4.n128_u64[1] = 63;
  int v2 = 2;
  int v3 = &v2;
  sub_1CD4C1608(&v5, (long long *)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCC7838, &dword_1CB82C000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Maximum depth of recursive value complexity comparisons";
  v4.n128_u64[1] = 55;
  int v2 = 2;
  int v3 = &v2;
  sub_1CD413D64((uint64_t)&unk_1EBCC78F8, "scalar-evolution-max-value-compare-depth", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCC78F8, &dword_1CB82C000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Maximum depth of recursive arithmetics";
  v4.n128_u64[1] = 38;
  int v2 = 32;
  int v3 = &v2;
  sub_1CD413D64((uint64_t)&unk_1EBCC79B8, "scalar-evolution-max-arith-depth", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCC79B8, &dword_1CB82C000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Maximum depth of recursive constant evolving";
  v4.n128_u64[1] = 44;
  int v2 = 32;
  int v3 = &v2;
  sub_1CD4C1730(&v5, (long long *)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCC7A78, &dword_1CB82C000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Maximum depth of recursive SExt/ZExt/Trunc";
  v4.n128_u64[1] = 42;
  int v2 = 8;
  int v3 = &v2;
  sub_1CD413D64((uint64_t)&unk_1EBCC7B38, "scalar-evolution-max-cast-depth", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCC7B38, &dword_1CB82C000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Max coefficients in AddRec during evolving";
  v4.n128_u64[1] = 42;
  int v2 = 8;
  int v3 = &v2;
  sub_1CD413D64((uint64_t)&unk_1EBCC7BF8, "scalar-evolution-max-add-rec-size", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCC7BF8, &dword_1CB82C000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Size of the expression which is considered huge";
  v4.n128_u64[1] = 47;
  int v2 = 4096;
  int v3 = &v2;
  sub_1CD413D64((uint64_t)&unk_1EBCC7CB8, "scalar-evolution-huge-expr-threshold", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCC7CB8, &dword_1CB82C000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Threshold for switching to iteratively computing SCEV ranges";
  v4.n128_u64[1] = 60;
  int v2 = 32;
  int v3 = &v2;
  sub_1CD413D64((uint64_t)&unk_1EBCC7D78, "scev-range-iter-threshold", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCC7D78, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v2) = 1;
  int v3 = &v2;
  v4.n128_u64[0] = (unint64_t)"When printing analysis, include information on every instruction";
  v4.n128_u64[1] = 64;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCC7E38, "scalar-evolution-classify-expressions", &v5, (unsigned char **)&v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC7E38, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v2) = 0;
  int v3 = &v2;
  v4.n128_u64[0] = (unint64_t)"Use more powerful methods of sharpening expression ranges. May be costly in terms of compile time";
  v4.n128_u64[1] = 97;
  sub_1CD4C1858(&v5, (char **)&v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCC7EF8, &dword_1CB82C000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Maximum amount of nodes to process while searching SCEVUnknown Phi strongly connected components";
  v4.n128_u64[1] = 96;
  int v2 = 8;
  int v3 = &v2;
  sub_1CD413D64((uint64_t)&unk_1EBCC7FB8, "scalar-evolution-max-scc-analysis-depth", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCC7FB8, &dword_1CB82C000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Handle <= and >= in finite loops";
  v4.n128_u64[1] = 32;
  LOBYTE(v2) = 1;
  int v3 = &v2;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCC8078, "scalar-evolution-finite-loop", &v5, &v4, (unsigned char **)&v3);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC8078, &dword_1CB82C000);
}

uint64_t llvm::SCEVAAResult::GetBaseValue(llvm::SCEVAAResult *this, const llvm::SCEV *a2)
{
__ZN4llvm12SCEVAAResult12GetBaseValueEPKNS_4SCEVE:
  while (1)
  {
    int v2 = *((unsigned __int16 *)a2 + 12);
    if (!a2 || v2 != 7) {
      break;
    }
    a2 = (const llvm::SCEV *)**((void **)a2 + 4);
  }
  if (a2 && v2 == 4)
  {
    a2 = *(const llvm::SCEV **)(*((void *)a2 + 4) + 8 * (*((_DWORD *)a2 + 10) - 1));
    int v3 = a2;
    while (2)
    {
      switch(*((_WORD *)v3 + 12))
      {
        case 1:
        case 2:
        case 3:
        case 0xD:
          int v5 = (char *)v3 + 40;
          goto LABEL_14;
        case 4:
          int v5 = (char *)v3 + 48;
          goto LABEL_14;
        case 5:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
          __n128 v4 = (const llvm::SCEV **)*((void *)v3 + 4);
          goto LABEL_9;
        case 6:
          __n128 v4 = (const llvm::SCEV **)((char *)v3 + 40);
LABEL_9:
          int v3 = *v4;
          continue;
        case 0xE:
          int v5 = (char *)*((void *)v3 - 1);
          goto LABEL_14;
        default:
          int v5 = (char *)*((void *)v3 + 4);
LABEL_14:
          if (*(unsigned char *)(*(void *)v5 + 8) == 15) {
            goto __ZN4llvm12SCEVAAResult12GetBaseValueEPKNS_4SCEVE;
          }
          uint64_t result = 0;
          break;
      }
      break;
    }
  }
  else
  {
    uint64_t result = 0;
    if (a2 && v2 == 14) {
      return *((void *)a2 - 1);
    }
  }
  return result;
}

void sub_1CC140150(llvm *a1, llvm::PassRegistry *a2)
{
}

void llvm::SCEVAAWrapperPass::runOnFunction(llvm::SCEVAAWrapperPass *this, llvm::Function *a2)
{
}

void sub_1CC1402C8(llvm::Pass *this)
{
  *(void *)this = &unk_1F26076E0;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    MEMORY[0x1D25D9CE0](v2, 0x20C40A4A59CD2);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CC140338(llvm::Pass *this)
{
  *(void *)this = &unk_1F26076E0;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    MEMORY[0x1D25D9CE0](v2, 0x20C40A4A59CD2);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

unint64_t llvm::SCEVDivision::visitConstant(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, llvm::APInt *a5)
{
  uint64_t v5 = *(void *)(result + 8);
  if (v5) {
    BOOL v6 = *(unsigned __int16 *)(v5 + 24) == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    unint64_t v7 = result;
    uint64_t v8 = *(void *)(a2 + 32);
    unsigned int v9 = *(_DWORD *)(v8 + 32);
    unsigned int v25 = v9;
    if (v9 > 0x40) {
      operator new[]();
    }
    unint64_t v24 = *(void *)(v8 + 24);
    uint64_t v10 = *(void *)(v5 + 32);
    unsigned int v11 = *(_DWORD *)(v10 + 32);
    unsigned int v23 = v11;
    if (v11 > 0x40) {
      operator new[]();
    }
    unint64_t v22 = *(void *)(v10 + 24);
    if (v9 <= v11)
    {
      if (v9 < v11)
      {
        llvm::APInt::sext((uint64_t)&v24, v11, (uint64_t)&v20);
        if (v25 >= 0x41 && v24) {
          MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
        }
        unint64_t v24 = v20;
        unsigned int v9 = v21;
        unsigned int v25 = v21;
      }
    }
    else
    {
      llvm::APInt::sext((uint64_t)&v22, v9, (uint64_t)&v20);
      if (v23 >= 0x41 && v22) {
        MEMORY[0x1D25D9CB0](v22, 0x1000C8000313F17);
      }
      unint64_t v22 = v20;
      unsigned int v23 = v21;
      unsigned int v9 = v25;
    }
    unsigned int v21 = v9;
    if (v9 > 0x40) {
      operator new[]();
    }
    unint64_t v20 = 0;
    unsigned int v19 = v9;
    unint64_t v18 = 0;
    llvm::APInt::sdivrem((llvm::APInt *)&v24, (const llvm::APInt *)&v22, (const llvm::APInt *)&v20, (llvm::APInt *)&v18, a5);
    BOOL v12 = *(llvm::ConstantInt *****)v7;
    v14 = (llvm::ConstantInt *)llvm::ConstantInt::get(****(llvm::ConstantInt *****)v7, (llvm::LLVMContext *)&v20, v13);
    *(void *)(v7 + 16) = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)v12, v14);
    uint64_t v15 = *(llvm::ConstantInt *****)v7;
    int v17 = (llvm::ConstantInt *)llvm::ConstantInt::get(****(llvm::ConstantInt *****)v7, (llvm::LLVMContext *)&v18, v16);
    uint64_t result = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)v15, v17);
    *(void *)(v7 + 24) = result;
    if (v19 >= 0x41)
    {
      uint64_t result = v18;
      if (v18) {
        uint64_t result = MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
      }
    }
    if (v21 >= 0x41)
    {
      uint64_t result = v20;
      if (v20) {
        uint64_t result = MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
      }
    }
    if (v23 >= 0x41)
    {
      uint64_t result = v22;
      if (v22) {
        uint64_t result = MEMORY[0x1D25D9CB0](v22, 0x1000C8000313F17);
      }
    }
    if (v25 >= 0x41)
    {
      uint64_t result = v24;
      if (v24) {
        return MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
      }
    }
  }
  return result;
}

void *llvm::SCEVDivision::cannotDivide(void *this, const llvm::SCEV *a2)
{
  this[2] = this[4];
  this[3] = a2;
  return this;
}

uint64_t sub_1CC140788(uint64_t a1)
{
  v19[8] = *MEMORY[0x1E4F143B8];
  unsigned int v10 = 0;
  unsigned int v11 = &v10;
  BOOL v12 = v14;
  uint64_t v13 = 0x800000000;
  uint64_t v15 = v19;
  uint64_t v16 = v19;
  uint64_t v17 = 8;
  int v18 = 0;
  sub_1CC140A50((uint64_t)&v11, a1);
  unsigned int v1 = v13;
  while (v1)
  {
    uint64_t v2 = *((void *)v12 + --v1);
    LODWORD(v13) = v1;
    switch(*(_WORD *)(v2 + 24))
    {
      case 1:
      case 2:
      case 3:
      case 0xD:
        unint64_t v7 = (uint64_t *)(v2 + 32);
        goto LABEL_8;
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        uint64_t v3 = *(void *)(v2 + 40);
        if (v3)
        {
          __n128 v4 = *(uint64_t **)(v2 + 32);
          uint64_t v5 = 8 * v3;
          do
          {
            uint64_t v6 = *v4++;
            sub_1CC140A50((uint64_t)&v11, v6);
            v5 -= 8;
          }
          while (v5);
        }
        goto LABEL_9;
      case 6:
        sub_1CC140A50((uint64_t)&v11, *(void *)(v2 + 32));
        unint64_t v7 = (uint64_t *)(v2 + 40);
LABEL_8:
        sub_1CC140A50((uint64_t)&v11, *v7);
LABEL_9:
        unsigned int v1 = v13;
        break;
      default:
        break;
    }
  }
  uint64_t v8 = v10;
  if (v16 != v15) {
    free(v16);
  }
  if (v12 != v14) {
    free(v12);
  }
  return v8;
}

void *sub_1CC140960(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  if (v8)
  {
    uint64_t v9 = *(void *)a2;
    unsigned int v10 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v8 - 1);
    uint64_t result = (void *)(*(void *)a2 + 16 * v10);
    uint64_t v12 = *result;
    if (*a3 == *result)
    {
LABEL_17:
      char v16 = 0;
      goto LABEL_9;
    }
    uint64_t v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v12 == -8192;
      }
      if (v17) {
        uint64_t v13 = result;
      }
      unsigned int v18 = v10 + v14++;
      unsigned int v10 = v18 & (v8 - 1);
      uint64_t result = (void *)(v9 + 16 * v10);
      uint64_t v12 = *result;
      if (*a3 == *result) {
        goto LABEL_17;
      }
    }
    if (v13) {
      uint64_t v15 = v13;
    }
    else {
      uint64_t v15 = result;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t result = sub_1CC131DD4(a2, (uint64_t)a3, a3, v15);
  void *result = *a3;
  result[1] = *a4;
  uint64_t v9 = *(void *)a2;
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  char v16 = 1;
LABEL_9:
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v9 + 16 * v8;
  *(unsigned char *)(a1 + 16) = v16;
  return result;
}

void sub_1CC140A50(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void **)(a1 + 88);
  uint64_t v5 = *(void **)(a1 + 96);
  __n128 v4 = (unsigned int *)(a1 + 88);
  uint64_t v7 = v4[5];
  if (v5 == v6)
  {
    if (v7)
    {
      unsigned int v8 = 0;
      uint64_t v9 = 8 * v7;
      unsigned int v10 = v5;
      while (*v10 != a2)
      {
        if (*v10 == -2) {
          unsigned int v8 = v10;
        }
        ++v10;
        v9 -= 8;
        if (!v9)
        {
          if (!v8) {
            goto LABEL_9;
          }
          void *v8 = a2;
          --*(_DWORD *)(a1 + 112);
          goto LABEL_33;
        }
      }
      return;
    }
LABEL_9:
    unsigned int v11 = *(_DWORD *)(a1 + 104);
    if (v7 < v11)
    {
      *(_DWORD *)(a1 + 108) = v7 + 1;
      v5[v7] = a2;
LABEL_33:
      ++**(_DWORD **)a1;
      unsigned int v21 = *(_DWORD *)(a1 + 16);
      if (v21 >= *(_DWORD *)(a1 + 20)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 8) + 8 * v21) = a2;
      ++*(_DWORD *)(a1 + 16);
      return;
    }
  }
  else
  {
    unsigned int v11 = *(_DWORD *)(a1 + 104);
  }
  if (3 * v11 <= 4 * ((int)v7 - *(_DWORD *)(a1 + 112)))
  {
    if (v11 >= 0x40) {
      v11 *= 2;
    }
    else {
      unsigned int v11 = 128;
    }
  }
  else if (v11 - v7 >= v11 >> 3)
  {
    goto LABEL_14;
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v4, v11);
  unsigned int v11 = *(_DWORD *)(a1 + 104);
  uint64_t v5 = *(void **)(a1 + 96);
LABEL_14:
  unsigned int v12 = v11 - 1;
  unsigned int v13 = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v14 = &v5[v13];
  uint64_t v15 = *v14;
  if (*v14 != -1)
  {
    char v16 = 0;
    int v17 = 1;
    while (v15 != a2)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == -2;
      }
      if (v18) {
        char v16 = v14;
      }
      unsigned int v19 = v13 + v17++;
      unsigned int v13 = v19 & v12;
      int v14 = &v5[v19 & v12];
      uint64_t v15 = *v14;
      if (*v14 == -1) {
        goto LABEL_26;
      }
    }
    return;
  }
  char v16 = 0;
LABEL_26:
  if (v16) {
    unint64_t v20 = v16;
  }
  else {
    unint64_t v20 = v14;
  }
  if (*v20 != a2)
  {
    if (*v20 == -2) {
      --*(_DWORD *)(a1 + 112);
    }
    else {
      ++*(_DWORD *)(a1 + 108);
    }
    void *v20 = a2;
    goto LABEL_33;
  }
}

uint64_t sub_1CC140C18(uint64_t a1, uint64_t a2)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  uint64_t v87 = a2;
  uint64_t v5 = a1 + 8;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);
  if (v6)
  {
    LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v8 = (void *)(v4 + 16 * v7);
    uint64_t v9 = *v8;
    if (*v8 == a2) {
      goto LABEL_8;
    }
    int v10 = 1;
    while (v9 != -4096)
    {
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v6 - 1);
      uint64_t v9 = *(void *)(v4 + 16 * v7);
      if (v9 == a2)
      {
        unsigned int v8 = (void *)(v4 + 16 * v7);
        goto LABEL_8;
      }
    }
  }
  unsigned int v8 = (void *)(v4 + 16 * v6);
LABEL_8:
  if (v8 == (void *)(v4 + 16 * v6))
  {
    uint64_t v12 = a2;
    switch(*(_WORD *)(a2 + 24))
    {
      case 1:
        unsigned int v13 = (const llvm::SCEV *)sub_1CC140C18(a1, *(void *)(a2 + 32));
        uint64_t v12 = a2;
        if (v13 != *(const llvm::SCEV **)(a2 + 32))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getTruncateExpr(*(llvm::ScalarEvolution **)a1, v13, *(llvm::Type **)(a2 + 40), 0);
          goto LABEL_65;
        }
        goto LABEL_100;
      case 2:
        uint64_t v15 = (llvm::detail::IEEEFloat **)sub_1CC140C18(a1, *(void *)(a2 + 32));
        uint64_t v12 = a2;
        if (v15 != *(llvm::detail::IEEEFloat ***)(a2 + 32))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getZeroExtendExpr(*(llvm::ScalarEvolution **)a1, v15, *(uint64_t ***)(a2 + 40), 0);
          goto LABEL_65;
        }
        goto LABEL_100;
      case 3:
        v45 = (llvm::detail::IEEEFloat **)sub_1CC140C18(a1, *(void *)(a2 + 32));
        uint64_t v12 = a2;
        if (v45 != *(llvm::detail::IEEEFloat ***)(a2 + 32))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getSignExtendExpr(*(llvm::ScalarEvolution **)a1, v45, *(uint64_t ***)(a2 + 40), 0);
          goto LABEL_65;
        }
        goto LABEL_100;
      case 4:
        v88 = v90;
        uint64_t v89 = 0x200000000;
        uint64_t v46 = *(void *)(a2 + 40);
        uint64_t v12 = a2;
        if (v46)
        {
          char v47 = 0;
          v48 = *(void **)(a2 + 32);
          uint64_t v49 = 8 * v46;
          do
          {
            uint64_t v50 = *v48;
            uint64_t v51 = sub_1CC140C18(a1, *v48);
            if (v89 >= (unint64_t)HIDWORD(v89)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v88 + v89) = v51;
            LODWORD(v89) = v89 + 1;
            uint64_t v26 = v88;
            v47 |= v50 != *((void *)v88 + v89 - 1);
            ++v48;
            v49 -= 8;
          }
          while (v49);
          uint64_t v12 = a2;
          if (v47)
          {
            uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr(*(void *)a1, (unint64_t **)&v88, 0, 0);
            break;
          }
          goto LABEL_98;
        }
        goto LABEL_100;
      case 5:
        v88 = v90;
        uint64_t v89 = 0x200000000;
        uint64_t v52 = *(void *)(a2 + 40);
        uint64_t v12 = a2;
        if (v52)
        {
          char v53 = 0;
          v54 = *(void **)(a2 + 32);
          uint64_t v55 = 8 * v52;
          do
          {
            uint64_t v56 = *v54;
            uint64_t v57 = sub_1CC140C18(a1, *v54);
            if (v89 >= (unint64_t)HIDWORD(v89)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v88 + v89) = v57;
            LODWORD(v89) = v89 + 1;
            uint64_t v26 = v88;
            v53 |= v56 != *((void *)v88 + v89 - 1);
            ++v54;
            v55 -= 8;
          }
          while (v55);
          uint64_t v12 = a2;
          if (v53)
          {
            uint64_t AddExpr = llvm::ScalarEvolution::getMulExpr(*(void *)a1, (uint64_t)&v88, 0, 0);
            break;
          }
          goto LABEL_98;
        }
        goto LABEL_100;
      case 6:
        v58 = (const llvm::SCEV *)sub_1CC140C18(a1, *(void *)(a2 + 32));
        unint64_t v59 = sub_1CC140C18(a1, *(void *)(a2 + 40));
        if (v58 != *(const llvm::SCEV **)(a2 + 32) || (uint64_t v12 = a2, v59 != *(void *)(a2 + 40)))
        {
          uint64_t TruncateExpr = llvm::ScalarEvolution::getUDivExpr(*(llvm::ScalarEvolution **)a1, v58, v59);
          goto LABEL_65;
        }
        goto LABEL_100;
      case 7:
        v88 = v90;
        uint64_t v89 = 0x800000000;
        uint64_t v16 = *(void *)(a2 + 40);
        if (v16)
        {
          int v17 = *(void **)(a2 + 32);
          uint64_t v18 = 8 * v16;
          do
          {
            uint64_t v19 = sub_1CC140C18(a1, *v17);
            if (v89 >= (unint64_t)HIDWORD(v89)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v88 + v89) = v19;
            LODWORD(v89) = v89 + 1;
            ++v17;
            v18 -= 8;
          }
          while (v18);
        }
        if ((*(unsigned int (**)(void, uint64_t))(a1 + 40))(*(void *)(a1 + 48), a2))
        {
          if (*(_DWORD *)(a1 + 32) == 1)
          {
            if ((int)v89 - 1 >= 1)
            {
              uint64_t v40 = 0;
              uint64_t v41 = 8 * (v89 - 1);
              do
              {
                v42 = *(llvm::ScalarEvolution **)a1;
                long long v43 = *(_OWORD *)((char *)v88 + v40);
                v91[0] = &v92;
                long long v92 = v43;
                v91[1] = (void *)0x200000002;
                uint64_t v44 = llvm::ScalarEvolution::getAddExpr((uint64_t)v42, (unint64_t **)v91, 0, 0);
                if (v91[0] != &v92) {
                  free(v91[0]);
                }
                *(void *)((char *)v88 + v40) = v44;
                v40 += 8;
              }
              while (v41 != v40);
            }
          }
          else if ((int)v89 - 2 >= 0)
          {
            uint64_t v75 = 8 * (v89 - 2);
            do
            {
              *(void *)((char *)v88 + v75) = llvm::ScalarEvolution::getMinusSCEV(*(llvm::ScalarEvolution **)a1, *(llvm::SCEV **)((char *)v88 + v75), *(const llvm::APInt **)((char *)v88 + v75 + 8), 0, 0);
              v75 -= 8;
            }
            while (v75 != -8);
          }
        }
        uint64_t AddExpr = llvm::ScalarEvolution::getAddRecExpr(*(llvm::ScalarEvolution **)a1, (uint64_t **)&v88, *(const llvm::Loop **)(a2 + 48), 0);
        break;
      case 8:
        v88 = v90;
        uint64_t v89 = 0x200000000;
        uint64_t v60 = *(void *)(a2 + 40);
        uint64_t v12 = a2;
        if (!v60) {
          goto LABEL_100;
        }
        char v61 = 0;
        v62 = *(void **)(a2 + 32);
        uint64_t v63 = 8 * v60;
        do
        {
          uint64_t v64 = *v62;
          uint64_t v65 = sub_1CC140C18(a1, *v62);
          if (v89 >= (unint64_t)HIDWORD(v89)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v88 + v89) = v65;
          LODWORD(v89) = v89 + 1;
          uint64_t v26 = v88;
          v61 |= v64 != *((void *)v88 + v89 - 1);
          ++v62;
          v63 -= 8;
        }
        while (v63);
        uint64_t v12 = a2;
        if ((v61 & 1) == 0) {
          goto LABEL_98;
        }
        v72 = *(llvm::ScalarEvolution **)a1;
        uint64_t v73 = 8;
        goto LABEL_92;
      case 9:
        v88 = v90;
        uint64_t v89 = 0x200000000;
        uint64_t v20 = *(void *)(a2 + 40);
        uint64_t v12 = a2;
        if (!v20) {
          goto LABEL_100;
        }
        char v21 = 0;
        unint64_t v22 = *(void **)(a2 + 32);
        uint64_t v23 = 8 * v20;
        do
        {
          uint64_t v24 = *v22;
          uint64_t v25 = sub_1CC140C18(a1, *v22);
          if (v89 >= (unint64_t)HIDWORD(v89)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v88 + v89) = v25;
          LODWORD(v89) = v89 + 1;
          uint64_t v26 = v88;
          v21 |= v24 != *((void *)v88 + v89 - 1);
          ++v22;
          v23 -= 8;
        }
        while (v23);
        uint64_t v12 = a2;
        if ((v21 & 1) == 0) {
          goto LABEL_98;
        }
        v72 = *(llvm::ScalarEvolution **)a1;
        uint64_t v73 = 9;
        goto LABEL_92;
      case 0xA:
        v88 = v90;
        uint64_t v89 = 0x200000000;
        uint64_t v27 = *(void *)(a2 + 40);
        uint64_t v12 = a2;
        if (!v27) {
          goto LABEL_100;
        }
        char v28 = 0;
        uint64_t v29 = *(void **)(a2 + 32);
        uint64_t v30 = 8 * v27;
        do
        {
          uint64_t v31 = *v29;
          uint64_t v32 = sub_1CC140C18(a1, *v29);
          if (v89 >= (unint64_t)HIDWORD(v89)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v88 + v89) = v32;
          LODWORD(v89) = v89 + 1;
          uint64_t v26 = v88;
          v28 |= v31 != *((void *)v88 + v89 - 1);
          ++v29;
          v30 -= 8;
        }
        while (v30);
        uint64_t v12 = a2;
        if ((v28 & 1) == 0) {
          goto LABEL_98;
        }
        v72 = *(llvm::ScalarEvolution **)a1;
        uint64_t v73 = 10;
        goto LABEL_92;
      case 0xB:
        v88 = v90;
        uint64_t v89 = 0x200000000;
        uint64_t v66 = *(void *)(a2 + 40);
        uint64_t v12 = a2;
        if (!v66) {
          goto LABEL_100;
        }
        char v67 = 0;
        v68 = *(void **)(a2 + 32);
        uint64_t v69 = 8 * v66;
        do
        {
          uint64_t v70 = *v68;
          uint64_t v71 = sub_1CC140C18(a1, *v68);
          if (v89 >= (unint64_t)HIDWORD(v89)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v88 + v89) = v71;
          LODWORD(v89) = v89 + 1;
          uint64_t v26 = v88;
          v67 |= v70 != *((void *)v88 + v89 - 1);
          ++v68;
          v69 -= 8;
        }
        while (v69);
        uint64_t v12 = a2;
        if ((v67 & 1) == 0) {
          goto LABEL_98;
        }
        v72 = *(llvm::ScalarEvolution **)a1;
        uint64_t v73 = 11;
LABEL_92:
        uint64_t AddExpr = llvm::ScalarEvolution::getMinMaxExpr((uint64_t)v72, v73, (uint64_t **)&v88);
        break;
      case 0xC:
        v88 = v90;
        uint64_t v89 = 0x200000000;
        uint64_t v33 = *(void *)(a2 + 40);
        uint64_t v12 = a2;
        if (!v33) {
          goto LABEL_100;
        }
        char v34 = 0;
        BOOL v35 = *(void **)(a2 + 32);
        uint64_t v36 = 8 * v33;
        do
        {
          uint64_t v37 = *v35;
          uint64_t v38 = sub_1CC140C18(a1, *v35);
          if (v89 >= (unint64_t)HIDWORD(v89)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v88 + v89) = v38;
          LODWORD(v89) = v89 + 1;
          uint64_t v26 = v88;
          v34 |= v37 != *((void *)v88 + v89 - 1);
          ++v35;
          v36 -= 8;
        }
        while (v36);
        uint64_t v12 = a2;
        if ((v34 & 1) == 0) {
          goto LABEL_98;
        }
        uint64_t AddExpr = llvm::ScalarEvolution::getSequentialMinMaxExpr(*(void *)a1, 12, (unsigned int *)&v88);
        break;
      case 0xD:
        v39 = (const llvm::SCEV *)sub_1CC140C18(a1, *(void *)(a2 + 32));
        uint64_t v12 = a2;
        if (v39 != *(const llvm::SCEV **)(a2 + 32))
        {
          uint64_t TruncateExpr = (uint64_t)llvm::ScalarEvolution::getPtrToIntExpr(*(llvm::ScalarEvolution **)a1, v39, *(llvm::Type **)(a2 + 40));
LABEL_65:
          uint64_t v12 = TruncateExpr;
        }
        goto LABEL_100;
      default:
        goto LABEL_100;
    }
    uint64_t v12 = AddExpr;
    uint64_t v26 = v88;
LABEL_98:
    if (v26 != v90) {
      free(v26);
    }
LABEL_100:
    int v76 = *(_DWORD *)(a1 + 24);
    if (!v76)
    {
      v85 = 0;
LABEL_115:
      unsigned int v8 = sub_1CC131DD4(v5, (uint64_t)&v87, &v87, v85);
      void *v8 = v87;
      v8[1] = v12;
      return v8[1];
    }
    uint64_t v77 = *(void *)(a1 + 8);
    int v78 = v76 - 1;
    unsigned int v79 = v78 & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v8 = (void *)(v77 + 16 * v79);
    uint64_t v80 = *v8;
    if (*v8 != a2)
    {
      v81 = 0;
      int v82 = 1;
      while (v80 != -4096)
      {
        if (v81) {
          BOOL v83 = 0;
        }
        else {
          BOOL v83 = v80 == -8192;
        }
        if (v83) {
          v81 = v8;
        }
        unsigned int v84 = v79 + v82++;
        unsigned int v79 = v84 & v78;
        unsigned int v8 = (void *)(v77 + 16 * v79);
        uint64_t v80 = *v8;
        if (*v8 == a2) {
          return v8[1];
        }
      }
      if (v81) {
        v85 = v81;
      }
      else {
        v85 = v8;
      }
      goto LABEL_115;
    }
  }
  return v8[1];
}

BOOL sub_1CC1415FC(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(a2 + 48);
  uint64_t v5 = **a1;
  uint64_t v4 = (*a1)[1];
  if (v4 == v5)
  {
    uint64_t v6 = *((unsigned int *)v2 + 5);
    uint64_t v7 = (void *)(v4 + 8 * v6);
    if (v6)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 8 * v6;
      while (*(void *)(v4 + v8) != v3)
      {
        v8 += 8;
        if (v9 == v8) {
          goto LABEL_19;
        }
      }
      uint64_t v7 = (void *)(v4 + v8);
    }
LABEL_19:
    uint64_t v5 = (*a1)[1];
  }
  else
  {
    uint64_t v10 = *((unsigned int *)v2 + 4);
    int v11 = v10 - 1;
    unsigned int v12 = (v10 - 1) & ((v3 >> 4) ^ (v3 >> 9));
    uint64_t v7 = (void *)(v4 + 8 * v12);
    uint64_t v13 = *v7;
    if (*v7 == -1)
    {
      int v14 = 0;
LABEL_24:
      if (v14) {
        uint64_t v7 = v14;
      }
      if (*v7 != v3) {
        uint64_t v7 = (void *)(v4 + 8 * v10);
      }
    }
    else
    {
      int v14 = 0;
      int v15 = 1;
      while (v13 != v3)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v13 == -2;
        }
        if (v16) {
          int v14 = v7;
        }
        unsigned int v17 = v12 + v15++;
        unsigned int v12 = v17 & v11;
        uint64_t v7 = (void *)(v4 + 8 * (v17 & v11));
        uint64_t v13 = *v7;
        if (*v7 == -1) {
          goto LABEL_24;
        }
      }
    }
  }
  BOOL v16 = v4 == v5;
  uint64_t v18 = 16;
  if (v16) {
    uint64_t v18 = 20;
  }
  return v7 != (void *)(v4 + 8 * *(unsigned int *)((char *)v2 + v18));
}

BOOL sub_1CC1416F0(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(a2 + 48);
  uint64_t v5 = **a1;
  uint64_t v4 = (*a1)[1];
  if (v4 == v5)
  {
    uint64_t v6 = *((unsigned int *)v2 + 5);
    uint64_t v7 = (void *)(v4 + 8 * v6);
    if (v6)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 8 * v6;
      while (*(void *)(v4 + v8) != v3)
      {
        v8 += 8;
        if (v9 == v8) {
          goto LABEL_19;
        }
      }
      uint64_t v7 = (void *)(v4 + v8);
    }
LABEL_19:
    uint64_t v5 = (*a1)[1];
  }
  else
  {
    uint64_t v10 = *((unsigned int *)v2 + 4);
    int v11 = v10 - 1;
    unsigned int v12 = (v10 - 1) & ((v3 >> 4) ^ (v3 >> 9));
    uint64_t v7 = (void *)(v4 + 8 * v12);
    uint64_t v13 = *v7;
    if (*v7 == -1)
    {
      int v14 = 0;
LABEL_24:
      if (v14) {
        uint64_t v7 = v14;
      }
      if (*v7 != v3) {
        uint64_t v7 = (void *)(v4 + 8 * v10);
      }
    }
    else
    {
      int v14 = 0;
      int v15 = 1;
      while (v13 != v3)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v13 == -2;
        }
        if (v16) {
          int v14 = v7;
        }
        unsigned int v17 = v12 + v15++;
        unsigned int v12 = v17 & v11;
        uint64_t v7 = (void *)(v4 + 8 * (v17 & v11));
        uint64_t v13 = *v7;
        if (*v7 == -1) {
          goto LABEL_24;
        }
      }
    }
  }
  BOOL v16 = v4 == v5;
  uint64_t v18 = 16;
  if (v16) {
    uint64_t v18 = 20;
  }
  return v7 != (void *)(v4 + 8 * *(unsigned int *)((char *)v2 + v18));
}

void llvm::StackLifetime::collectMarkers(llvm::StackLifetime *this)
{
  int v2 = *((_DWORD *)this + 152);
  uint64_t v3 = *((unsigned int *)this + 310);
  if ((*((_DWORD *)this + 324) & 0x3F) != 0)
  {
    uint64_t v95 = *((void *)this + 154) + 8 * v3;
    *(void *)(v95 - 8) &= ~(-1 << (*((_DWORD *)this + 324) & 0x3F));
  }
  unsigned int v4 = v3;
  uint64_t v5 = (void *)((char *)this + 1232);
  *((_DWORD *)this + 324) = v2;
  unsigned int v6 = v2 + 63;
  if (v3 != (v2 + 63) >> 6)
  {
    uint64_t v7 = v6 >> 6;
    if (v3 > v7)
    {
      *((_DWORD *)this + 310) = v7;
      unsigned int v4 = v6 >> 6;
    }
    else
    {
      if (v7 > *((_DWORD *)this + 311)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v7 != v3) {
        bzero((void *)(*v5 + 8 * v3), 8 * (v7 - v3));
      }
      unsigned int v4 = v7;
      *((_DWORD *)this + 310) = v7;
      int v2 = *((_DWORD *)this + 324);
    }
  }
  int v8 = v2 & 0x3F;
  if (v8) {
    *(void *)(*v5 + 8 * v4 - 8) &= ~(-1 << v8);
  }
  v132[0] = 0;
  v132[1] = 0;
  int v133 = 0;
  uint64_t v9 = *(void *)(*(void *)this + 40);
  sub_1CD4C4D08(&v118, *(void *)(*(void *)this + 80));
  uint64_t v10 = v114;
  v109 = v114;
  int v11 = v119;
  if (v119 == v118)
  {
    v110 = v114;
    unsigned int v12 = v119;
  }
  else
  {
    unsigned int v91 = v120;
    uint64_t v10 = malloc_type_malloc(8 * v120, 0x4065EBACuLL);
    if (!v10)
    {
      if (v91) {
        goto LABEL_191;
      }
      uint64_t v10 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v10) {
        goto LABEL_191;
      }
    }
    v110 = v10;
    unsigned int v12 = v118;
    int v11 = v119;
  }
  unsigned int v13 = v121;
  unsigned int v111 = v120;
  if (v11 == v12) {
    unsigned int v14 = v121;
  }
  else {
    unsigned int v14 = v120;
  }
  if (v14)
  {
    memmove(v10, v11, 8 * v14);
    unsigned int v13 = v121;
  }
  unsigned int v112 = v13;
  int v113 = v122;
  v116 = 0;
  uint64_t v117 = 0;
  __p = 0;
  sub_1CBFE1720(&__p, v123, v124, (v124 - (unsigned char *)v123) >> 5);
  int v15 = v105;
  v100 = v105;
  BOOL v16 = v126;
  if (v126 == v125)
  {
    v101 = v105;
    unsigned int v17 = v126;
  }
  else
  {
    unsigned int v92 = v127;
    int v15 = malloc_type_malloc(8 * v127, 0x4065EBACuLL);
    if (!v15)
    {
      if (v92) {
        goto LABEL_191;
      }
      int v15 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v15) {
        goto LABEL_191;
      }
    }
    v101 = v15;
    unsigned int v17 = v125;
    BOOL v16 = v126;
  }
  uint64_t v18 = (const llvm::DataLayout *)(v9 + 272);
  unsigned int v19 = v128;
  unsigned int v102 = v127;
  if (v16 == v17) {
    unsigned int v20 = v128;
  }
  else {
    unsigned int v20 = v127;
  }
  if (v20)
  {
    memmove(v15, v16, 8 * v20);
    unsigned int v19 = v128;
  }
  unsigned int v103 = v19;
  int v104 = v129;
  v107 = 0;
  uint64_t v108 = 0;
  v106 = 0;
  sub_1CBFE1720(&v106, v130, v131, (v131 - (unsigned char *)v130) >> 5);
  while (1)
  {
    if (v116 - (unsigned char *)__p == v107 - v106)
    {
      if (__p == v116)
      {
LABEL_72:
        if (v106)
        {
          v107 = v106;
          operator delete(v106);
        }
        if (v101 != v100) {
          free(v101);
        }
        if (__p)
        {
          v116 = (char *)__p;
          operator delete(__p);
        }
        if (v110 != v109) {
          free(v110);
        }
        if (v130)
        {
          v131 = v130;
          operator delete(v130);
        }
        if (v126 != v125) {
          free(v126);
        }
        if (v123)
        {
          v124 = v123;
          operator delete(v123);
        }
        if (v119 != v118) {
          free(v119);
        }
        sub_1CD4C4D08(&v118, *(void *)(*(void *)this + 80));
        v45 = v114;
        v109 = v114;
        uint64_t v46 = v119;
        if (v119 == v118)
        {
          v110 = v114;
          char v47 = v119;
          goto LABEL_90;
        }
        unsigned int v93 = v120;
        v45 = malloc_type_malloc(8 * v120, 0x4065EBACuLL);
        if (v45 || !v93 && (v45 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
        {
          v110 = v45;
          char v47 = v118;
          uint64_t v46 = v119;
LABEL_90:
          unsigned int v48 = v121;
          unsigned int v111 = v120;
          if (v46 == v47) {
            unsigned int v49 = v121;
          }
          else {
            unsigned int v49 = v120;
          }
          if (v49)
          {
            memmove(v45, v46, 8 * v49);
            unsigned int v48 = v121;
          }
          unsigned int v112 = v48;
          int v113 = v122;
          v116 = 0;
          uint64_t v117 = 0;
          __p = 0;
          sub_1CBFE1720(&__p, v123, v124, (v124 - (unsigned char *)v123) >> 5);
          uint64_t v50 = v105;
          v100 = v105;
          uint64_t v51 = v126;
          if (v126 == v125)
          {
            v101 = v105;
            uint64_t v52 = v126;
          }
          else
          {
            unsigned int v94 = v127;
            uint64_t v50 = malloc_type_malloc(8 * v127, 0x4065EBACuLL);
            if (!v50)
            {
              if (v94) {
                goto LABEL_191;
              }
              uint64_t v50 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
              if (!v50) {
                goto LABEL_191;
              }
            }
            v101 = v50;
            uint64_t v52 = v125;
            uint64_t v51 = v126;
          }
          unsigned int v53 = v128;
          unsigned int v102 = v127;
          if (v51 == v52) {
            unsigned int v54 = v128;
          }
          else {
            unsigned int v54 = v127;
          }
          if (v54)
          {
            memmove(v50, v51, 8 * v54);
            unsigned int v53 = v128;
          }
          unsigned int v103 = v53;
          int v104 = v129;
          v107 = 0;
          uint64_t v108 = 0;
          v106 = 0;
          sub_1CBFE1720(&v106, v130, v131, (v131 - (unsigned char *)v130) >> 5);
          v97 = (char *)this + 1304;
          while (1)
          {
            if (v116 - (unsigned char *)__p == v107 - v106)
            {
              if (__p == v116)
              {
LABEL_153:
                if (v106)
                {
                  v107 = v106;
                  operator delete(v106);
                }
                if (v101 != v100) {
                  free(v101);
                }
                if (__p)
                {
                  v116 = (char *)__p;
                  operator delete(__p);
                }
                if (v110 != v109) {
                  free(v110);
                }
                if (v130)
                {
                  v131 = v130;
                  operator delete(v130);
                }
                if (v126 != v125) {
                  free(v126);
                }
                if (v123)
                {
                  v124 = v123;
                  operator delete(v123);
                }
                if (v119 != v118) {
                  free(v119);
                }
                sub_1CD4C5FD8((uint64_t)v132);
              }
              uint64_t v55 = v106 + 16;
              uint64_t v56 = (char *)__p + 16;
              while (1)
              {
                uint64_t v57 = v56 - 16;
                if (*((void *)v56 - 2) != *((void *)v55 - 2)) {
                  break;
                }
                int v58 = v55[8];
                if (v56[8]) {
                  BOOL v59 = v58 == 0;
                }
                else {
                  BOOL v59 = 1;
                }
                if (v59)
                {
                  if ((v56[8] == 0) == (v58 != 0)) {
                    break;
                  }
                }
                else if (*(_DWORD *)v56 != *(_DWORD *)v55)
                {
                  break;
                }
                v55 += 32;
                v56 += 32;
                if (v57 + 32 == v116) {
                  goto LABEL_153;
                }
              }
            }
            v136[0] = 0;
            v136[0] = *((void *)v116 - 4);
            unint64_t v60 = *((unsigned int *)this + 12);
            if (v60 >= *((unsigned int *)this + 13)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*((void *)this + 5) + 8 * v60) = 0;
            ++*((_DWORD *)this + 12);
            sub_1CD4C4DC8((uint64_t)v134, (uint64_t)this + 16, v136, (int *)this + 152);
            uint64_t v61 = *(void *)v134;
            v62 = sub_1CD4C609C((uint64_t)v132, v136);
            uint64_t v64 = (uint64_t)(v62 + 1);
            unsigned int v63 = *((_DWORD *)v62 + 2);
            if (v63 >= 2)
            {
              uint64_t v65 = (void *)(v61 + 8);
              if ((v63 & 0xFFFFFFFE) == 2)
              {
                uint64_t v66 = sub_1CD4C4E74((int *)v62 + 2);
                uint64_t v67 = *(void *)v66;
                v68 = sub_1CD4C6F10((uint64_t)v97, v136);
                *(_DWORD *)v134 = *((_DWORD *)this + 12);
                *(void *)&v134[4] = *((void *)v66 + 1);
                sub_1CB839378((uint64_t)(v68 + 1), *(uint64_t *)v134, *(int *)&v134[8]);
                unint64_t v69 = *((unsigned int *)this + 12);
                if (v69 >= *((unsigned int *)this + 13)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*((void *)this + 5) + 8 * v69) = v67;
                ++*((_DWORD *)this + 12);
                unint64_t v70 = v66[2];
                uint64_t v71 = 1 << v70;
                unint64_t v72 = v70 >> 6;
                if (*((unsigned char *)v66 + 12))
                {
                  *(void *)(*(void *)(v61 + 80) + 8 * v72) &= ~v71;
                }
                else
                {
                  *(void *)(*(void *)(v61 + 8) + 8 * v72) &= ~v71;
                  uint64_t v65 = (void *)(v61 + 80);
                }
                *(void *)(*v65 + 8 * v72) |= v71;
              }
              else
              {
                uint64_t v73 = v136[0] + 40;
                uint64_t v74 = *(void *)(v136[0] + 48);
                if (v74 != v136[0] + 40)
                {
                  uint64_t v75 = v62;
                  v96 = v62 + 2;
                  do
                  {
                    if (v74) {
                      uint64_t v76 = v74 - 24;
                    }
                    else {
                      uint64_t v76 = 0;
                    }
                    if (*(unsigned char *)(v76 + 16) == 84)
                    {
                      uint64_t v77 = *(void *)(v76 - 32);
                      if (v77)
                      {
                        if (!*(unsigned char *)(v77 + 16)
                          && *(void *)(v77 + 24) == *(void *)(v76 + 72)
                          && (*(unsigned char *)(v77 + 33) & 0x20) != 0)
                        {
                          uint64_t v78 = sub_1CD4C4EE8(v64, v74 - 24);
                          unsigned int v79 = v96;
                          if ((v75[1] & 1) == 0) {
                            unsigned int v79 = (void *)v75[2];
                          }
                          unsigned int v80 = *((_DWORD *)v75 + 6);
                          if (v75[1]) {
                            unsigned int v80 = 4;
                          }
                          if (&v79[2 * v80] != (void *)v78)
                          {
                            uint64_t v81 = v78;
                            int v82 = sub_1CD4C6F10((uint64_t)v97, v136);
                            *(_DWORD *)v134 = *((_DWORD *)this + 12);
                            *(void *)&v134[4] = *(void *)(v81 + 8);
                            sub_1CB839378((uint64_t)(v82 + 1), *(uint64_t *)v134, *(int *)&v134[8]);
                            unint64_t v83 = *((unsigned int *)this + 12);
                            if (v83 >= *((unsigned int *)this + 13)) {
                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                            }
                            *(void *)(*((void *)this + 5) + 8 * v83) = v74 - 24;
                            ++*((_DWORD *)this + 12);
                            unint64_t v84 = *(unsigned int *)(v81 + 8);
                            uint64_t v85 = 1 << v84;
                            v86 = (void *)(v61 + 80);
                            if (*(unsigned char *)(v81 + 12)) {
                              uint64_t v87 = (void *)(v61 + 80);
                            }
                            else {
                              uint64_t v87 = (void *)(v61 + 8);
                            }
                            if (*(unsigned char *)(v81 + 12)) {
                              v86 = (void *)(v61 + 8);
                            }
                            uint64_t v88 = (v84 >> 3) & 0x1FFFFFF8;
                            *(void *)(*v87 + v88) &= ~v85;
                            *(void *)(*v86 + v88) |= v85;
                          }
                        }
                      }
                    }
                    uint64_t v74 = *(void *)(v74 + 8);
                  }
                  while (v74 != v73);
                }
              }
            }
            int v89 = *((_DWORD *)this + 12);
            v90 = sub_1CD4C6D28((uint64_t *)this + 71, v136);
            *((_DWORD *)v90 + 2) = v60;
            *((_DWORD *)v90 + 3) = v89;
            sub_1CD4B9FD0((void **)&v109);
          }
        }
LABEL_191:
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      }
      unint64_t v22 = v106 + 16;
      uint64_t v23 = (char *)__p + 16;
      while (1)
      {
        uint64_t v24 = v23 - 16;
        if (*((void *)v23 - 2) != *((void *)v22 - 2)) {
          break;
        }
        int v25 = v22[8];
        if (v23[8]) {
          BOOL v26 = v25 == 0;
        }
        else {
          BOOL v26 = 1;
        }
        if (v26)
        {
          if ((v23[8] == 0) == (v25 != 0)) {
            break;
          }
        }
        else if (*(_DWORD *)v23 != *(_DWORD *)v22)
        {
          break;
        }
        v22 += 32;
        v23 += 32;
        if (v24 + 32 == v116) {
          goto LABEL_72;
        }
      }
    }
    uint64_t v99 = *((void *)v116 - 4);
    uint64_t v27 = v99 + 40;
    for (uint64_t i = *(void *)(v99 + 48); i != v27; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v29 = i - 24;
      if (i) {
        uint64_t v30 = i - 24;
      }
      else {
        uint64_t v30 = 0;
      }
      uint64_t v98 = 0;
      if (*(unsigned char *)(v30 + 16) == 84)
      {
        uint64_t v31 = *(void *)(v30 - 32);
        if (v31)
        {
          if (!*(unsigned char *)(v31 + 16)
            && *(void *)(v31 + 24) == *(void *)(v30 + 72)
            && (*(unsigned char *)(v31 + 33) & 0x20) != 0)
          {
            uint64_t v98 = i - 24;
            if (llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)(i - 24)))
            {
              AllocaForValue = (llvm::Type **)llvm::findAllocaForValue(*(llvm **)(v29 - 32 * (*(_DWORD *)(i - 4) & 0x7FFFFFF) + 32), (llvm::Value *)1);
              if (!AllocaForValue) {
                goto LABEL_64;
              }
              uint64_t v33 = (uint64_t)AllocaForValue;
              llvm::AllocaInst::getAllocationSizeInBits(AllocaForValue, v18, (uint64_t)v134);
              if (!v135) {
                goto LABEL_64;
              }
              if (*(_DWORD *)&v134[8] == 1) {
                llvm::reportInvalidSizeRequest(v21, v34);
              }
              if ((uint64_t v35 = *(void *)(v29 - 32 * (*(_DWORD *)(i - 4) & 0x7FFFFFF))) != 0
                && *(unsigned char *)(v35 + 16) == 16
                && ((unsigned int v36 = *(_DWORD *)(v35 + 32), v36 > 0x40)
                  ? (uint64_t v37 = **(void **)(v35 + 24))
                  : (uint64_t v37 = (uint64_t)(*(void *)(v35 + 24) << -(char)v36) >> -(char)v36),
                    v37 != -1 ? (BOOL v38 = v37 == *(void *)v134 >> 3) : (BOOL v38 = 1),
                    v38))
              {
                v136[0] = v33;
                *(void *)v134 = 0;
                if (sub_1CD3C8538((uint64_t *)this + 77, v136, v134)
                  && *(void *)v134 != *((void *)this + 77) + 16 * *((unsigned int *)this + 158))
                {
                  v39 = v21;
                  unint64_t v40 = *(unsigned int *)(*(void *)v134 + 8);
                  int v41 = *(_DWORD *)(*(void *)(i - 56) + 36);
                  BOOL v42 = v41 == 168;
                  if (v41 == 168) {
                    *(void *)(*v5 + ((v40 >> 3) & 0x1FFFFFF8)) |= 1 << v40;
                  }
                  long long v43 = sub_1CD4C609C((uint64_t)v132, &v99);
                  uint64_t v44 = sub_1CD4C6460((_DWORD *)v43 + 2, &v98);
                  *((_DWORD *)v44 + 2) = v40;
                  *((unsigned char *)v44 + 12) = v42;
                  char v21 = v39;
                }
              }
              else
              {
LABEL_64:
                *((unsigned char *)this + 1328) = 1;
              }
            }
          }
        }
      }
    }
    sub_1CD4B9FD0((void **)&v109);
  }
}

void llvm::StackLifetime::calculateLocalLiveness(llvm::StackLifetime *this)
{
  uint64_t v163 = *MEMORY[0x1E4F143B8];
  int v2 = &v161;
  uint64_t v3 = (char *)&v157;
  do
  {
    sub_1CD4C4D08(&v142, *(void *)(*(void *)this + 80));
    int v133 = v138;
    unsigned int v4 = v143;
    if (v143 == v142)
    {
      v134 = v138;
      uint64_t v5 = v138;
      unsigned int v6 = v143;
    }
    else
    {
      v118 = this;
      unsigned int v119 = v144;
      uint64_t v5 = malloc_type_malloc(8 * v144, 0x4065EBACuLL);
      if (!v5 && (v119 || (uint64_t v5 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
LABEL_218:
      }
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      v134 = v5;
      unsigned int v6 = v142;
      unsigned int v4 = v143;
      this = v118;
    }
    unsigned int v7 = v145;
    unsigned int v135 = v144;
    if (v4 == v6) {
      unsigned int v8 = v145;
    }
    else {
      unsigned int v8 = v144;
    }
    if (v8)
    {
      memmove(v5, v4, 8 * v8);
      unsigned int v7 = v145;
    }
    unsigned int v136 = v7;
    int v137 = v146;
    v140 = 0;
    uint64_t v141 = 0;
    __p = 0;
    sub_1CBFE1720(&__p, v147, v148, (v148 - (unsigned char *)v147) >> 5);
    uint64_t v9 = v150;
    if (v150 == v149)
    {
      unsigned int v128 = v129;
      uint64_t v10 = v129;
      int v11 = v150;
    }
    else
    {
      unsigned int v120 = this;
      unsigned int v121 = v151;
      uint64_t v10 = malloc_type_malloc(8 * v151, 0x4065EBACuLL);
      if (!v10)
      {
        if (v121) {
          goto LABEL_218;
        }
        uint64_t v10 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v10) {
          goto LABEL_218;
        }
      }
      unsigned int v128 = v10;
      int v11 = v149;
      uint64_t v9 = v150;
      this = v120;
    }
    if (v9 == v11) {
      unsigned int v12 = v152;
    }
    else {
      unsigned int v12 = v151;
    }
    if (v12) {
      memmove(v10, v9, 8 * v12);
    }
    v131 = 0;
    uint64_t v132 = 0;
    v130 = 0;
    sub_1CBFE1720(&v130, v153, v154, (v154 - (unsigned char *)v153) >> 5);
    int v13 = 0;
    while (1)
    {
      if (v140 - (unsigned char *)__p != v131 - v130) {
        goto LABEL_31;
      }
      if (__p == v140) {
        break;
      }
      unsigned int v14 = v130 + 16;
      int v15 = (char *)__p + 16;
      while (1)
      {
        BOOL v16 = v15 - 16;
        if (*((void *)v15 - 2) != *((void *)v14 - 2)) {
          break;
        }
        int v17 = v14[8];
        if (v15[8]) {
          BOOL v18 = v17 == 0;
        }
        else {
          BOOL v18 = 1;
        }
        if (v18)
        {
          if ((v15[8] == 0) == (v17 != 0)) {
            break;
          }
        }
        else if (*(_DWORD *)v15 != *(_DWORD *)v14)
        {
          break;
        }
        v14 += 32;
        v15 += 32;
        if (v16 + 32 == v140) {
          goto LABEL_191;
        }
      }
LABEL_31:
      int v126 = v13;
      uint64_t v19 = *((void *)v140 - 4);
      v159 = 0;
      int v20 = sub_1CD4C688C(*((void *)this + 2), *((_DWORD *)this + 8), v19, &v159);
      uint64_t v21 = *((void *)this + 2);
      unsigned int v22 = *((_DWORD *)this + 8);
      if (v20) {
        uint64_t v23 = v159;
      }
      else {
        uint64_t v23 = (uint64_t *)(v21 + 296 * v22);
      }
      unsigned int v127 = v2;
      v159 = v2;
      uint64_t v160 = 0x600000000;
      unsigned int v162 = 0;
      uint64_t v24 = *(void *)(v19 + 8);
      if (v24)
      {
        while (1)
        {
          uint64_t v25 = *(void *)(v24 + 24);
          unsigned int v26 = *(unsigned __int8 *)(v25 + 16);
          BOOL v27 = v25 && v26 >= 0x1C;
          if (v27 && v26 - 29 <= 0xA) {
            break;
          }
          uint64_t v24 = *(void *)(v24 + 8);
          if (!v24) {
            goto LABEL_44;
          }
        }
LABEL_66:
        uint64_t v49 = *(void *)(v25 + 40);
        v155 = 0;
        int v50 = sub_1CD4C688C(v21, v22, v49, &v155);
        uint64_t v51 = v155;
        if (v50) {
          BOOL v52 = v155 == (char *)(*((void *)this + 2) + 296 * *((unsigned int *)this + 8));
        }
        else {
          BOOL v52 = 1;
        }
        if (v52) {
          goto LABEL_112;
        }
        int v53 = *((_DWORD *)this + 2);
        if (v53 != 1)
        {
          if (!v53)
          {
            unsigned int v54 = v3;
            unsigned int v55 = *((_DWORD *)v155 + 72);
            if (v162 < v55)
            {
              uint64_t v73 = v160;
              if ((v162 & 0x3F) != 0) {
                v159[v160 - 1] &= ~(-1 << (v162 & 0x3F));
              }
              unsigned int v74 = v73;
              unsigned int v162 = v55;
              unsigned int v75 = v55 + 63;
              if (v73 != (v55 + 63) >> 6)
              {
                uint64_t v76 = v75 >> 6;
                if (v73 > v76)
                {
                  LODWORD(v160) = v75 >> 6;
                  unsigned int v74 = v75 >> 6;
                }
                else
                {
                  if (v76 > HIDWORD(v160)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (v76 != v73)
                  {
                    unsigned int v123 = v75 >> 6;
                    int v125 = v73;
                    bzero(&v159[v73], 8 * (v76 - v73));
                    LODWORD(v76) = v123;
                    LODWORD(v73) = v125;
                  }
                  v74 += v76 - v73;
                  LODWORD(v160) = v74;
                  LOBYTE(v55) = v162;
                }
              }
              int v77 = v55 & 0x3F;
              if (v77) {
                v159[v74 - 1] &= ~(-1 << v77);
              }
            }
            uint64_t v56 = *((unsigned int *)v51 + 58);
            uint64_t v3 = v54;
            if (v56)
            {
              uint64_t v57 = (uint64_t *)*((void *)v51 + 28);
              int v58 = v159;
              do
              {
                uint64_t v59 = *v57++;
                *v58++ |= v59;
                --v56;
              }
              while (v56);
            }
          }
          goto LABEL_112;
        }
        if (!v162)
        {
          unint64_t v60 = (const void **)(v155 + 224);
          if (&v159 != (uint64_t **)(v155 + 224))
          {
            uint64_t v61 = v3;
            uint64_t v62 = *((unsigned int *)v155 + 58);
            uint64_t v63 = v160;
            if (v160 >= v62)
            {
              if (v62)
              {
                int v72 = *((_DWORD *)v155 + 58);
                memmove(v159, *v60, 8 * v62);
                goto LABEL_109;
              }
            }
            else
            {
              if (HIDWORD(v160) < v62)
              {
                LODWORD(v160) = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v160)
              {
                int v122 = *((_DWORD *)v155 + 58);
                v124 = (const void **)(v155 + 224);
                memmove(v159, *v60, 8 * v160);
                LODWORD(v62) = v122;
                unint64_t v60 = v124;
              }
              else
              {
                uint64_t v63 = 0;
              }
              uint64_t v78 = *((unsigned int *)v51 + 58);
              if (v63 != v78)
              {
                unsigned int v79 = *v60;
                unsigned int v80 = &v79[8 * v63];
                uint64_t v81 = (char *)&v159[v63];
                int v72 = v62;
                memcpy(v81, v80, &v79[8 * v78] - v80);
LABEL_109:
                LODWORD(v62) = v72;
              }
            }
            LODWORD(v160) = v62;
            uint64_t v3 = v61;
          }
          unsigned int v162 = *((_DWORD *)v51 + 72);
          goto LABEL_112;
        }
        unsigned int v64 = v160;
        unsigned int v65 = *((_DWORD *)v155 + 58);
        if (v65 >= v160) {
          uint64_t v66 = v160;
        }
        else {
          uint64_t v66 = v65;
        }
        if (v66)
        {
          uint64_t v67 = (uint64_t *)*((void *)v155 + 28);
          v68 = v159;
          uint64_t v69 = v66;
          do
          {
            uint64_t v70 = *v67++;
            *v68++ &= v70;
            --v69;
          }
          while (v69);
        }
        if (v64 > v65)
        {
          uint64_t v71 = v159;
          do
          {
            v71[v66] = 0;
            LODWORD(v66) = v66 + 1;
          }
          while (v64 != v66);
        }
LABEL_112:
        while (1)
        {
          uint64_t v24 = *(void *)(v24 + 8);
          if (!v24) {
            break;
          }
          uint64_t v25 = *(void *)(v24 + 24);
          unsigned int v82 = *(unsigned __int8 *)(v25 + 16);
          if (v25) {
            BOOL v83 = v82 >= 0x1C;
          }
          else {
            BOOL v83 = 0;
          }
          if (v83 && v82 - 29 <= 0xA)
          {
            uint64_t v21 = *((void *)this + 2);
            unsigned int v22 = *((_DWORD *)this + 8);
            goto LABEL_66;
          }
        }
        unsigned int v29 = v160;
        v155 = v3;
        uint64_t v156 = 0x600000000;
        if (v160)
        {
          if (v160 >= 7) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v3, v159, 8 * v160);
          LODWORD(v156) = v29;
        }
      }
      else
      {
LABEL_44:
        unsigned int v29 = 0;
        v155 = v3;
        uint64_t v156 = 0x600000000;
      }
      unsigned int v30 = v162;
      unsigned int v158 = v162;
      LODWORD(v31) = *((_DWORD *)v23 + 22);
      if (v31 >= v29) {
        uint64_t v31 = v29;
      }
      else {
        uint64_t v31 = v31;
      }
      if (v31)
      {
        uint64_t v32 = (uint64_t *)v23[10];
        uint64_t v33 = v155;
        do
        {
          uint64_t v34 = *v32++;
          *(void *)v33 &= ~v34;
          v33 += 8;
          --v31;
        }
        while (v31);
      }
      unsigned int v35 = *((_DWORD *)v23 + 18);
      if (v30 < v35)
      {
        int v114 = v30 & 0x3F;
        if (v114) {
          *(void *)&v155[8 * v29 - 8] &= ~(-1 << v114);
        }
        unsigned int v158 = v35;
        unsigned int v115 = v35 + 63;
        if (v29 != (v35 + 63) >> 6)
        {
          uint64_t v116 = v115 >> 6;
          if (v29 > v116)
          {
            LODWORD(v156) = v115 >> 6;
            unsigned int v29 = v115 >> 6;
          }
          else
          {
            if (v116 > HIDWORD(v156)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v116 != v29) {
              bzero(&v155[8 * v29], 8 * (v116 - v29));
            }
            unsigned int v29 = v116;
            LODWORD(v156) = v116;
            LOBYTE(v35) = v158;
          }
        }
        int v117 = v35 & 0x3F;
        if (v117) {
          *(void *)&v155[8 * v29 - 8] &= ~(-1 << v117);
        }
      }
      uint64_t v36 = *((unsigned int *)v23 + 4);
      if (v36)
      {
        uint64_t v37 = (uint64_t *)v23[1];
        BOOL v38 = v155;
        do
        {
          uint64_t v39 = *v37++;
          *(void *)v38 |= v39;
          v38 += 8;
          --v36;
        }
        while (v36);
      }
      unint64_t v40 = (uint64_t **)(v23 + 19);
      uint64_t v41 = *((unsigned int *)v23 + 40);
      if (v41 >= v160) {
        uint64_t v42 = v160;
      }
      else {
        uint64_t v42 = v41;
      }
      if (v42)
      {
        long long v43 = v159;
        uint64_t v44 = *v40;
        uint64_t v45 = v42;
        while (1)
        {
          uint64_t v47 = *v43++;
          uint64_t v46 = v47;
          uint64_t v48 = *v44++;
          if ((v46 & ~v48) != 0) {
            break;
          }
          if (!--v45) {
            goto LABEL_62;
          }
        }
      }
      else
      {
LABEL_62:
        if (v160 <= v41) {
          goto LABEL_138;
        }
        while (!v159[v42])
        {
          LODWORD(v42) = v42 + 1;
          if (v160 == v42) {
            goto LABEL_138;
          }
        }
      }
      unsigned int v85 = v162;
      if (*((_DWORD *)v23 + 54) < v162)
      {
        int v86 = v23[27] & 0x3F;
        if (v86) {
          (*v40)[v41 - 1] &= ~(-1 << v86);
        }
        *((_DWORD *)v23 + 54) = v85;
        unsigned int v87 = v85 + 63;
        if (v41 != (v85 + 63) >> 6)
        {
          uint64_t v88 = v3;
          uint64_t v89 = v87 >> 6;
          if (v41 > v89)
          {
            *((_DWORD *)v23 + 40) = v89;
            LODWORD(v41) = v87 >> 6;
          }
          else
          {
            if (v89 > *((_DWORD *)v23 + 41)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v89 != v41) {
              bzero(&(*v40)[v41], 8 * (v89 - v41));
            }
            LODWORD(v41) = v89;
            *((_DWORD *)v23 + 40) = v89;
            unsigned int v85 = *((_DWORD *)v23 + 54);
          }
          uint64_t v3 = v88;
        }
        int v90 = v85 & 0x3F;
        if (v90) {
          (*v40)[v41 - 1] &= ~(-1 << v90);
        }
      }
      uint64_t v91 = v160;
      if (v160)
      {
        unsigned int v92 = v159;
        unsigned int v93 = *v40;
        do
        {
          uint64_t v94 = *v92++;
          *v93++ |= v94;
          --v91;
        }
        while (v91);
      }
LABEL_138:
      uint64_t v95 = v3;
      v96 = (uint64_t **)(v23 + 28);
      uint64_t v97 = *((unsigned int *)v23 + 58);
      if (v97 >= v156) {
        uint64_t v98 = v156;
      }
      else {
        uint64_t v98 = v97;
      }
      uint64_t v99 = v155;
      int v2 = v127;
      if (v98)
      {
        v100 = *v96;
        uint64_t v101 = v98;
        unsigned int v102 = (uint64_t *)v155;
        while (1)
        {
          uint64_t v104 = *v102++;
          uint64_t v103 = v104;
          uint64_t v105 = *v100++;
          if ((v103 & ~v105) != 0) {
            break;
          }
          if (!--v101) {
            goto LABEL_145;
          }
        }
      }
      else
      {
LABEL_145:
        if (v156 <= v97)
        {
LABEL_148:
          uint64_t v3 = v95;
          int v13 = v126;
          goto LABEL_170;
        }
        while (!*(void *)&v155[8 * v98])
        {
          LODWORD(v98) = v98 + 1;
          if (v156 == v98) {
            goto LABEL_148;
          }
        }
      }
      unsigned int v106 = v158;
      if (*((_DWORD *)v23 + 72) < v158)
      {
        int v107 = v23[36] & 0x3F;
        if (v107) {
          (*v96)[v97 - 1] &= ~(-1 << v107);
        }
        *((_DWORD *)v23 + 72) = v106;
        unsigned int v108 = v106 + 63;
        if (v97 != (v106 + 63) >> 6)
        {
          uint64_t v109 = v108 >> 6;
          if (v97 > v109)
          {
            *((_DWORD *)v23 + 58) = v109;
            LODWORD(v97) = v108 >> 6;
          }
          else
          {
            if (v109 > *((_DWORD *)v23 + 59)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v109 != v97) {
              bzero(&(*v96)[v97], 8 * (v109 - v97));
            }
            LODWORD(v97) = v109;
            *((_DWORD *)v23 + 58) = v109;
            unsigned int v106 = *((_DWORD *)v23 + 72);
          }
          int v2 = v127;
        }
        int v110 = v106 & 0x3F;
        if (v110) {
          (*v96)[v97 - 1] &= ~(-1 << v110);
        }
      }
      uint64_t v99 = v155;
      if (v156)
      {
        unint64_t v111 = 0;
        unsigned int v112 = *v96;
        uint64_t v113 = 8 * v156;
        uint64_t v3 = v95;
        do
        {
          v112[v111 / 8] |= *(void *)&v99[v111];
          v111 += 8;
        }
        while (v113 != v111);
        int v13 = 1;
      }
      else
      {
        int v13 = 1;
        uint64_t v3 = v95;
      }
LABEL_170:
      if (v99 != v3) {
        free(v99);
      }
      if (v159 != v2) {
        free(v159);
      }
      sub_1CD4B9FD0((void **)&v133);
    }
LABEL_191:
    if (v130)
    {
      v131 = v130;
      operator delete(v130);
    }
    if (v128 != v129) {
      free(v128);
    }
    if (__p)
    {
      v140 = (char *)__p;
      operator delete(__p);
    }
    if (v134 != v133) {
      free(v134);
    }
    if (v153)
    {
      v154 = v153;
      operator delete(v153);
    }
    if (v150 != v149) {
      free(v150);
    }
    if (v147)
    {
      v148 = v147;
      operator delete(v147);
    }
    if (v143 != v142) {
      free(v143);
    }
  }
  while ((v13 & 1) != 0);
}

llvm::raw_ostream *llvm::StackLifetime::dumpBlockLiveness(llvm::StackLifetime *this)
{
  v42[36] = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::dbgs(this);
  uint64_t v3 = (_OWORD *)*((void *)result + 4);
  if (*((void *)result + 3) - (void)v3 > 0xFuLL)
  {
    *uint64_t v3 = *(_OWORD *)"Block liveness:\n";
    *((void *)result + 4) += 16;
  }
  else
  {
    uint64_t result = llvm::raw_ostream::write(result, "Block liveness:\n", 0x10uLL);
  }
  uint64_t v4 = *((void *)this + 2);
  unsigned int v5 = *((_DWORD *)this + 8);
  uint64_t v6 = v4 + 296 * v5;
  if (*((_DWORD *)this + 6))
  {
    if (v5)
    {
      uint64_t v7 = 296 * v5;
      uint64_t v8 = *((void *)this + 2);
      while ((*(void *)v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v8 += 296;
        v7 -= 296;
        if (!v7) {
          goto LABEL_8;
        }
      }
    }
    else
    {
      uint64_t v8 = *((void *)this + 2);
    }
  }
  else
  {
LABEL_8:
    uint64_t v8 = v4 + 296 * v5;
  }
  uint64_t v9 = v4 + 296 * v5;
  if (v8 != v9)
  {
    while (1)
    {
      uint64_t v41 = *(void *)v8;
      sub_1CD4C5930((uint64_t)v42, (_DWORD *)(v8 + 8));
      uint64_t v10 = v41;
      uint64_t v40 = 0;
      if (sub_1CD4C688C(*((void *)this + 2), *((_DWORD *)this + 8), v41, &v40)) {
        uint64_t v11 = v40;
      }
      else {
        uint64_t v11 = *((void *)this + 2) + 296 * *((unsigned int *)this + 8);
      }
      uint64_t v39 = 0;
      uint64_t v40 = v10;
      unsigned int v12 = (llvm *)sub_1CD3C8538((uint64_t *)this + 71, &v40, &v39);
      if (v12) {
        uint64_t v13 = v39;
      }
      else {
        uint64_t v13 = *((void *)this + 71) + 16 * *((unsigned int *)this + 146);
      }
      unint64_t v15 = *(unsigned int *)(v13 + 8);
      unint64_t v14 = *(unsigned int *)(v13 + 12);
      BOOL v16 = llvm::dbgs(v12);
      int v17 = v16;
      uint64_t v18 = *((void *)v16 + 4);
      if ((unint64_t)(*((void *)v16 + 3) - v18) > 5)
      {
        *(_WORD *)(v18 + 4) = 10272;
        *(_DWORD *)uint64_t v18 = 1111629856;
        *((void *)v16 + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(v16, "  BB (", 6uLL);
      }
      if ((*(unsigned char *)(v10 + 23) & 0x10) == 0) {
        goto LABEL_29;
      }
      uint64_t v19 = ***(void ***)v10;
      uint64_t v20 = *(void *)(v19 + 152);
      uint64_t v21 = *(unsigned int *)(v19 + 168);
      if (!v21) {
        goto LABEL_26;
      }
      LODWORD(v22) = (v21 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      uint64_t v23 = (uint64_t *)(v20 + 16 * v22);
      uint64_t v24 = *v23;
      if (*v23 != v10) {
        break;
      }
LABEL_27:
      BOOL v27 = (size_t *)v23[1];
      size_t v30 = *v27;
      char v28 = v27 + 2;
      size_t v29 = v30;
      uint64_t v31 = (unsigned char *)*((void *)v17 + 4);
      if (v30 <= *((void *)v17 + 3) - (void)v31)
      {
        if (v29)
        {
          memcpy(v31, v28, v29);
          uint64_t v31 = (unsigned char *)(*((void *)v17 + 4) + v29);
          *((void *)v17 + 4) = v31;
        }
        goto LABEL_32;
      }
      llvm::raw_ostream::write(v17, (const char *)v28, v29);
LABEL_29:
      uint64_t v31 = (unsigned char *)*((void *)v17 + 4);
LABEL_32:
      if (*((void *)v17 + 3) - (void)v31 > 2uLL)
      {
        v31[2] = 91;
        *(_WORD *)uint64_t v31 = 8233;
        *((void *)v17 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v17, ") [", 3uLL);
      }
      sub_1CD098D14(v17, v15, 0, 0, 0);
      uint64_t v32 = (_WORD *)*((void *)v17 + 4);
      if (*((void *)v17 + 3) - (void)v32 > 1uLL)
      {
        *uint64_t v32 = 8236;
        *((void *)v17 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v17, ", ", 2uLL);
      }
      sub_1CD098D14(v17, v14, 0, 0, 0);
      uint64_t v33 = *((void *)v17 + 4);
      if ((unint64_t)(*((void *)v17 + 3) - v33) > 8)
      {
        *(unsigned char *)(v33 + 8) = 32;
        *(void *)uint64_t v33 = *(void *)"): begin ";
        *((void *)v17 + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(v17, "): begin ", 9uLL);
      }
      sub_1CC1433D8(v17, v11 + 8);
      uint64_t v34 = *((void *)v17 + 4);
      if ((unint64_t)(*((void *)v17 + 3) - v34) > 5)
      {
        *(_WORD *)(v34 + 4) = 8292;
        *(_DWORD *)uint64_t v34 = 1852121132;
        *((void *)v17 + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(v17, ", end ", 6uLL);
      }
      sub_1CC1433D8(v17, v11 + 80);
      uint64_t v35 = *((void *)v17 + 4);
      if ((unint64_t)(*((void *)v17 + 3) - v35) > 8)
      {
        *(unsigned char *)(v35 + 8) = 32;
        *(void *)uint64_t v35 = *(void *)", livein ";
        *((void *)v17 + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(v17, ", livein ", 9uLL);
      }
      sub_1CC1433D8(v17, v11 + 152);
      uint64_t v36 = *((void *)v17 + 4);
      if ((unint64_t)(*((void *)v17 + 3) - v36) > 9)
      {
        *(_WORD *)(v36 + 8) = 8308;
        *(void *)uint64_t v36 = *(void *)", liveout ";
        *((void *)v17 + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(v17, ", liveout ", 0xAuLL);
      }
      sub_1CC1433D8(v17, v11 + 224);
      uint64_t v37 = (unsigned char *)*((void *)v17 + 4);
      if (*((unsigned char **)v17 + 3) == v37)
      {
        llvm::raw_ostream::write(v17, "\n", 1uLL);
      }
      else
      {
        unsigned char *v37 = 10;
        ++*((void *)v17 + 4);
      }
      uint64_t result = (llvm::raw_ostream *)sub_1CD4C5A08((uint64_t)v42);
      uint64_t v38 = v8 + 296;
      uint64_t v8 = v6;
      if (v38 != v6)
      {
        uint64_t v8 = v38;
        while ((*(void *)v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v8 += 296;
          if (v8 == v6)
          {
            uint64_t v8 = v6;
            break;
          }
        }
      }
      if (v8 == v9) {
        return result;
      }
    }
    int v25 = 1;
    while (v24 != -4096)
    {
      int v26 = v22 + v25++;
      uint64_t v22 = v26 & (v21 - 1);
      uint64_t v24 = *(void *)(v20 + 16 * v22);
      if (v24 == v10)
      {
        uint64_t v23 = (uint64_t *)(v20 + 16 * v22);
        goto LABEL_27;
      }
    }
LABEL_26:
    uint64_t v23 = (uint64_t *)(v20 + 16 * v21);
    goto LABEL_27;
  }
  return result;
}

llvm::raw_ostream *sub_1CC1433D8(llvm::raw_ostream *this, uint64_t a2)
{
  uint64_t v4 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v4)
  {
    llvm::raw_ostream::write(this, "{", 1uLL);
  }
  else
  {
    *uint64_t v4 = 123;
    ++*((void *)this + 4);
  }
  int v5 = *(_DWORD *)(a2 + 64);
  if (v5)
  {
    uint64_t v6 = 0;
    int v7 = -v5;
    int v8 = v5 - 1;
    uint64_t v9 = *(uint64_t **)a2;
    unint64_t v10 = 0xFFFFFFFFFFFFFFFFLL >> v7;
    uint64_t v11 = v8 & 0xFFFFFFC0;
    while (1)
    {
      uint64_t v13 = *v9++;
      uint64_t v12 = v13;
      unint64_t v14 = v11 == v6 ? v10 : -1;
      unint64_t v15 = v14 & v12;
      if (v15) {
        break;
      }
      v6 += 64;
      if (v11 + 64 == v6) {
        goto LABEL_39;
      }
    }
    int v16 = __clz(__rbit64(v15)) + v6;
    if ((v16 & 0x80000000) == 0)
    {
      char v17 = 0;
      do
      {
        if (v17) {
          size_t v18 = 2;
        }
        else {
          size_t v18 = 0;
        }
        uint64_t v19 = (_WORD *)*((void *)this + 4);
        if (v18 <= *((void *)this + 3) - (void)v19)
        {
          if (v17)
          {
            *uint64_t v19 = 8236;
            *((void *)this + 4) += 2;
          }
        }
        else
        {
          if (v17) {
            uint64_t v20 = ", ";
          }
          else {
            uint64_t v20 = 0;
          }
          llvm::raw_ostream::write(this, v20, v18);
        }
        sub_1CD098D14(this, v16, 0, 0, 0);
        unsigned int v21 = v16 + 1;
        int v22 = *(_DWORD *)(a2 + 64);
        if (v16 + 1 == v22) {
          break;
        }
        unsigned int v23 = v21 >> 6;
        unsigned int v24 = v22 - 1;
        if (v21 >> 6 > (v22 - 1) >> 6) {
          break;
        }
        uint64_t v25 = 0;
        uint64_t v26 = v24 >> 6;
        int v28 = v21 & 0x3F;
        BOOL v27 = v28 == 0;
        unint64_t v29 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v28;
        unint64_t v30 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v24;
        uint64_t v31 = v27 ? -1 : ~v29;
        int v32 = -64 * v23;
        uint64_t v33 = v26 - v23;
        uint64_t v34 = *(void *)a2 + 8 * v23;
        while (1)
        {
          uint64_t v35 = v25 ? -1 : v31;
          unint64_t v36 = v33 == v25 ? v30 : -1;
          unint64_t v37 = v35 & v36 & *(void *)(v34 + 8 * v25);
          if (v37) {
            break;
          }
          v32 -= 64;
          if (v33 + 1 == ++v25) {
            goto LABEL_39;
          }
        }
        char v17 = 1;
        int v16 = __clz(__rbit64(v37)) - v32;
      }
      while (v16 >= 0);
    }
  }
LABEL_39:
  uint64_t v38 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v38)
  {
    llvm::raw_ostream::write(this, "}", 1uLL);
  }
  else
  {
    *uint64_t v38 = 125;
    ++*((void *)this + 4);
  }
  return this;
}

void *llvm::StackLifetime::print(const llvm::Module ***this, llvm::raw_ostream *a2)
{
  v3[0] = &unk_1F2607780;
  v3[1] = this;
  return llvm::Function::print(*this, a2, (llvm::AssemblyAnnotationWriter *)v3, 0, 0);
}

void llvm::StackLifetimePrinterPass::run(int *a1, uint64_t a2)
{
  v14[8] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = v14;
  uint64_t v13 = 0x800000000;
  uint64_t v2 = a2 + 72;
  for (uint64_t i = *(void *)(a2 + 80); i != v2; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v4 = i - 24;
    if (!i) {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(void *)(v4 + 48);
    if (v5 != v4 + 40)
    {
      unsigned int v6 = 0;
      while (1)
      {
        if (v5) {
          uint64_t v8 = v5 - 24;
        }
        else {
          uint64_t v8 = 0;
        }
        if (v5 && *(unsigned char *)(v8 + 16) == 59)
        {
          if (v6 >= HIDWORD(v13)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v12[v6] = v8;
          unsigned int v6 = v13 + 1;
          LODWORD(v13) = v13 + 1;
        }
        uint64_t v5 = *(void *)(v5 + 8);
        uint64_t v9 = i - 24;
        if (!i) {
          uint64_t v9 = 0;
        }
        if (v5 == v9 + 40) {
          break;
        }
LABEL_23:
        if (i == v2) {
          goto LABEL_26;
        }
      }
      while (1)
      {
        uint64_t i = *(void *)(i + 8);
        if (i == v2) {
          break;
        }
        uint64_t v10 = i - 24;
        if (!i) {
          uint64_t v10 = 0;
        }
        uint64_t v5 = *(void *)(v10 + 48);
        if (v5 != v10 + 40) {
          goto LABEL_23;
        }
      }
LABEL_26:
      int v7 = v12;
LABEL_27:
      llvm::StackLifetime::StackLifetime((llvm::StackLifetime *)&v11, a2, v7, v6, *a1);
    }
  }
  unsigned int v6 = 0;
  int v7 = v14;
  goto LABEL_27;
}

uint64_t *sub_1CC143874(uint64_t *result, unsigned int a2, unsigned int a3)
{
  if (a2 != a3)
  {
    unsigned int v3 = a2 >> 6;
    if (a2 >> 6 == a3 >> 6)
    {
      uint64_t v4 = (1 << a3) + (-1 << a2);
      uint64_t v5 = *result;
LABEL_4:
      *(void *)(v5 + 8 * v3) |= v4;
      return result;
    }
    uint64_t v5 = *result;
    *(void *)(*result + 8 * v3) |= -1 << a2;
    unsigned int v6 = (a2 + 63) & 0xFFFFFFC0;
    if (v6 + 64 <= a3)
    {
      do
      {
        *(void *)(v5 + 8 * (v6 >> 6)) = -1;
        unsigned int v7 = v6 + 64;
        unsigned int v8 = v6 + 128;
        v6 += 64;
      }
      while (v8 <= a3);
    }
    else
    {
      unsigned int v7 = (a2 + 63) & 0xFFFFFFC0;
    }
    if (v7 < a3)
    {
      uint64_t v4 = ~(-1 << a3);
      unsigned int v3 = v7 >> 6;
      goto LABEL_4;
    }
  }
  return result;
}

void sub_1CC143920(uint64_t a1, uint64_t a2, llvm::raw_ostream *a3)
{
  v49[32] = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *(unsigned __int8 *)(a2 + 16);
  if (v3 >= 0x1C) {
    uint64_t v4 = (const llvm::Instruction *)a2;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v3 < 0x1C) {
    return;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  __base = *(void **)(a2 + 40);
  v46.__r_.__value_.__r.__words[0] = 0;
  if (sub_1CD3C8538((uint64_t *)(v7 + 568), &__base, &v46))
  {
    std::string::size_type v8 = v46.__r_.__value_.__r.__words[0];
    uint64_t v9 = *(void *)(v7 + 568);
    uint64_t v10 = *(unsigned int *)(v7 + 584);
  }
  else
  {
    uint64_t v9 = *(void *)(v7 + 568);
    uint64_t v10 = *(unsigned int *)(v7 + 584);
    std::string::size_type v8 = v9 + 16 * v10;
  }
  if (v8 == v9 + 16 * v10) {
    return;
  }
  __base = v49;
  size_t __nel = 0x1000000000;
  uint64_t v11 = *(void *)(a1 + 8);
  int v12 = *(_DWORD *)(v11 + 624);
  uint64_t v13 = *(const llvm::AllocaInst ***)(v11 + 616);
  uint64_t v14 = *(unsigned int *)(v11 + 632);
  unint64_t v15 = &v13[2 * v14];
  if (v12)
  {
    if (v14)
    {
      uint64_t v16 = 16 * v14;
      char v17 = v13;
      while (((unint64_t)*v17 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v17 += 2;
        v16 -= 16;
        if (!v16) {
          goto LABEL_15;
        }
      }
    }
    else
    {
      char v17 = v13;
    }
  }
  else
  {
LABEL_15:
    char v17 = &v13[2 * v14];
  }
  size_t v18 = &v13[2 * v14];
  if (v17 == v18) {
    goto LABEL_41;
  }
  do
  {
    if (!llvm::StackLifetime::isAliveAfter(*(llvm::StackLifetime **)(a1 + 8), *v17, v4)) {
      goto LABEL_30;
    }
    uint64_t v19 = *v17;
    if ((*((unsigned char *)*v17 + 23) & 0x10) == 0)
    {
      unint64_t v30 = 0;
      unint64_t v29 = &byte_1CFBCE98E;
      goto LABEL_28;
    }
    uint64_t v20 = ***(void ***)v19;
    uint64_t v21 = *(void *)(v20 + 152);
    uint64_t v22 = *(unsigned int *)(v20 + 168);
    if (!v22) {
      goto LABEL_26;
    }
    LODWORD(v23) = (v22 - 1) & ((v19 >> 4) ^ (v19 >> 9));
    unsigned int v24 = (const llvm::AllocaInst **)(v21 + 16 * v23);
    uint64_t v25 = *v24;
    if (*v24 != v19)
    {
      int v26 = 1;
      while (v25 != (const llvm::AllocaInst *)-4096)
      {
        int v27 = v23 + v26++;
        uint64_t v23 = v27 & (v22 - 1);
        uint64_t v25 = *(const llvm::AllocaInst **)(v21 + 16 * v23);
        if (v25 == v19)
        {
          unsigned int v24 = (const llvm::AllocaInst **)(v21 + 16 * v23);
          goto LABEL_27;
        }
      }
LABEL_26:
      unsigned int v24 = (const llvm::AllocaInst **)(v21 + 16 * v22);
    }
LABEL_27:
    int v28 = v24[1];
    uint64_t v31 = *(char **)v28;
    unint64_t v29 = (char *)v28 + 16;
    unint64_t v30 = v31;
LABEL_28:
    if (__nel >= (unint64_t)HIDWORD(__nel)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v32 = (char **)((char *)__base + 16 * __nel);
    *int v32 = v29;
    v32[1] = v30;
    LODWORD(__nel) = __nel + 1;
LABEL_30:
    uint64_t v33 = v17 + 2;
    char v17 = v15;
    if (v33 != v15)
    {
      char v17 = v33;
      while (((unint64_t)*v17 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v17 += 2;
        if (v17 == v15)
        {
          char v17 = v15;
          break;
        }
      }
    }
  }
  while (v17 != v18);
  if (__nel >= 2) {
    qsort(__base, __nel, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_1CD4C5D78);
  }
LABEL_41:
  uint64_t v34 = (void *)*((void *)a3 + 4);
  if (*((void *)a3 + 3) - (void)v34 > 0xCuLL)
  {
    qmemcpy(v34, "\n  ; Alive: <", 13);
    *((void *)a3 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(a3, "\n  ; Alive: <", 0xDuLL);
  }
  uint64_t v35 = (char *)__base;
  int v36 = __nel;
  memset(&v46, 0, sizeof(v46));
  if (__nel)
  {
    uint64_t v37 = 0;
    std::string::size_type v38 = __nel - 1;
    uint64_t v39 = (char *)__base + 16 * __nel;
    do
    {
      v38 += *(void *)((char *)__base + v37 + 8);
      v37 += 16;
    }
    while (16 * __nel != v37);
    std::string::reserve(&v46, v38);
    std::string::append(&v46, *(const std::string::value_type **)v35, *((void *)v35 + 1));
    if (v36 != 1)
    {
      uint64_t v40 = v35 + 16;
      do
      {
        std::string::append(&v46, " ", 1uLL);
        uint64_t v41 = *(const std::string::value_type **)v40;
        std::string::size_type v42 = *((void *)v40 + 1);
        v40 += 16;
        std::string::append(&v46, v41, v42);
      }
      while (v40 != v39);
    }
  }
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v43 = &v46;
  }
  else {
    long long v43 = (std::string *)v46.__r_.__value_.__r.__words[0];
  }
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = *((unsigned char *)&v46.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    size_t size = v46.__r_.__value_.__l.__size_;
  }
  llvm::raw_ostream::write(a3, (const char *)v43, size);
  uint64_t v45 = (_WORD *)*((void *)a3 + 4);
  if (*((void *)a3 + 3) - (void)v45 > 1uLL)
  {
    _WORD *v45 = 2622;
    *((void *)a3 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a3, ">\n", 2uLL);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (__base != v49) {
    free(__base);
  }
}

std::string *sub_1CC143D18(std::string *this, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    uint64_t v5 = this;
    std::string::size_type v6 = ((a3 - a2) >> 4) - 1;
    uint64_t v7 = a2;
    do
    {
      v6 += *(void *)(v7 + 8);
      v7 += 16;
    }
    while (v7 != a3);
    std::string::reserve(this, v6);
    this = std::string::append(v5, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    for (uint64_t i = a2 + 16; i != a3; this = std::string::append(v5, v9, v10))
    {
      std::string::append(v5, " ", 1uLL);
      uint64_t v9 = *(const std::string::value_type **)i;
      std::string::size_type v10 = *(void *)(i + 8);
      i += 16;
    }
  }
  return this;
}

unsigned int *sub_1CC143DC8(unsigned int *result, unsigned int *a2)
{
  unsigned int v2 = *a2;
  *a2 = *result & 0xFFFFFFFE | *a2 & 1;
  int v3 = result[1];
  llvm::raw_ostream *result = v2 & 0xFFFFFFFE | *result & 1;
  result[1] = a2[1];
  a2[1] = v3;
  unsigned int v4 = *a2;
  if (*result)
  {
    if ((v4 & 1) == 0)
    {
      std::string::size_type v6 = a2;
      goto LABEL_7;
    }
    uint64_t v9 = 0;
    while (1)
    {
      std::string::size_type v10 = (int *)&result[v9];
      uint64_t v11 = (int *)&a2[v9];
      uint64_t v12 = *(void *)&result[v9 + 2];
      uint64_t v13 = *(void *)&a2[v9 + 2];
      if (v12 == -4096 || v12 == -8192 || v13 == -4096 || v13 == -8192)
      {
        *((void *)v10 + 1) = v13;
        *((void *)v11 + 1) = v12;
        if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          unint64_t v15 = (int *)&a2[v9];
          uint64_t v16 = (int *)&result[v9];
          goto LABEL_22;
        }
        if ((v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          unint64_t v15 = (int *)&result[v9];
          uint64_t v16 = (int *)&a2[v9];
LABEL_22:
          *((void *)v15 + 2) = *((void *)v16 + 2);
        }
      }
      else
      {
        uint64_t v14 = *(void *)&result[v9 + 4];
        *((void *)v10 + 1) = v13;
        *(void *)&result[v9 + 4] = *(void *)&a2[v9 + 4];
        *((void *)v11 + 1) = v12;
        *(void *)&a2[v9 + 4] = v14;
      }
      v9 += 4;
      if (v9 == 16) {
        return result;
      }
    }
  }
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = *((void *)result + 1);
    *((void *)result + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v5;
    LODWORD(v5) = result[4];
    result[4] = a2[4];
    a2[4] = v5;
    return result;
  }
  unsigned int v4 = *result;
  std::string::size_type v6 = result;
  uint64_t result = a2;
LABEL_7:
  uint64_t v7 = 0;
  long long v17 = *(_OWORD *)(v6 + 2);
  unsigned int *v6 = v4 | 1;
  do
  {
    uint64_t v8 = *(void *)&result[v7 + 2];
    *(void *)&v6[v7 + 2] = v8;
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *(void *)&v6[v7 + 4] = *(void *)&result[v7 + 4];
    }
    v7 += 4;
  }
  while (v7 != 16);
  *result &= ~1u;
  *(_OWORD *)(result + 2) = v17;
  return result;
}

void *llvm::StackSafetyInfo::StackSafetyInfo(void *this)
{
  *this = 0;
  this[4] = 0;
  this[5] = 0;
  return this;
}

{
  *this = 0;
  this[4] = 0;
  this[5] = 0;
  return this;
}

void *llvm::StackSafetyInfo::StackSafetyInfo(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  sub_1CC14BEE8((uint64_t)(a1 + 1), a3);
  a1[5] = 0;
  return a1;
}

{
  *a1 = a2;
  sub_1CC14BEE8((uint64_t)(a1 + 1), a3);
  a1[5] = 0;
  return a1;
}

void *llvm::StackSafetyInfo::StackSafetyInfo(void *a1, void *a2)
{
  *a1 = *a2;
  unsigned int v4 = (void *)a2[4];
  if (v4)
  {
    if (v4 == a2 + 1)
    {
      a1[4] = a1 + 1;
      (*(void (**)(void))(*(void *)a2[4] + 24))(a2[4]);
    }
    else
    {
      a1[4] = v4;
      a2[4] = 0;
    }
  }
  else
  {
    a1[4] = 0;
  }
  uint64_t v5 = a2[5];
  a2[5] = 0;
  a1[5] = v5;
  return a1;
}

void *llvm::StackSafetyInfo::operator=(void *a1, void *a2)
{
  *a1 = *a2;
  unsigned int v4 = a1 + 5;
  sub_1CC14BF80(a1 + 1, (uint64_t)(a2 + 1));
  uint64_t v5 = a2[5];
  a2[5] = 0;
  sub_1CC144930(v4, v5);
  return a1;
}

void llvm::StackSafetyInfo::~StackSafetyInfo(llvm::StackSafetyInfo *this)
{
  sub_1CC144930((uint64_t *)this + 5, 0);
  unsigned int v2 = (llvm::StackSafetyInfo *)*((void *)this + 4);
  if (v2 == (llvm::StackSafetyInfo *)((char *)this + 8))
  {
    (*(void (**)(char *))(*((void *)this + 1) + 32))((char *)this + 8);
  }
  else if (v2)
  {
    (*(void (**)(llvm::StackSafetyInfo *))(*(void *)v2 + 40))(v2);
  }
}

uint64_t *llvm::StackSafetyInfo::getInfo(llvm::StackSafetyInfo *this)
{
  uint64_t result = (uint64_t *)*((void *)this + 5);
  if (!result)
  {
    uint64_t v3 = *((void *)this + 4);
    if (v3)
    {
      uint64_t v4 = *(void *)this;
      (*(void (**)(uint64_t))(*(void *)v3 + 48))(v3);
      unsigned int v5 = *(_DWORD *)(*(void *)(*(void *)(v4 + 40) + 504) + 4);
      if (v5 <= 0x40) {
        operator new();
      }
      operator new[]();
    }
    sub_1CB920400();
    return sub_1CC144930(v6, v7);
  }
  return result;
}

uint64_t *sub_1CC144930(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  uint64_t *result = a2;
  if (v2)
  {
    sub_1CC14A7DC(*(void **)(v2 + 32));
    sub_1CC14A7DC(*(void **)(v2 + 8));
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

double sub_1CC144998(void *a1, llvm::raw_ostream *this, const void *a3, size_t a4, uint64_t a5)
{
  v82[2] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *((void *)this + 4);
  if ((unint64_t)(*((void *)this + 3) - v10) > 2)
  {
    *(unsigned char *)(v10 + 2) = 64;
    *(_WORD *)uint64_t v10 = 8224;
    uint64_t v11 = (void *)(*((void *)this + 4) + 3);
    *((void *)this + 4) = v11;
  }
  else
  {
    llvm::raw_ostream::write(this, "  @", 3uLL);
    uint64_t v11 = (void *)*((void *)this + 4);
  }
  if (a4 <= *((void *)this + 3) - (void)v11)
  {
    if (a4)
    {
      memcpy(v11, a3, a4);
      *((void *)this + 4) += a4;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, (const char *)a3, a4);
  }
  uint64_t v12 = " dso_preemptable";
  if (a5 && (*(unsigned char *)(a5 + 33) & 0x40) != 0) {
    uint64_t v12 = "";
  }
  size_t v13 = strlen(v12);
  uint64_t v14 = (void *)*((void *)this + 4);
  if (v13 <= *((void *)this + 3) - (void)v14)
  {
    if (v13)
    {
      memcpy(v14, v12, v13);
      *((void *)this + 4) += v13;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, v12, v13);
  }
  unint64_t v15 = "";
  if (a5 && llvm::GlobalValue::isInterposable((llvm::GlobalValue *)a5)) {
    unint64_t v15 = " interposable";
  }
  size_t v16 = strlen(v15);
  long long v17 = (unsigned char *)*((void *)this + 4);
  if (v16 <= *((void *)this + 3) - (void)v17)
  {
    if (v16)
    {
      memcpy(v17, v15, v16);
      long long v17 = (unsigned char *)(*((void *)this + 4) + v16);
      *((void *)this + 4) = v17;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, v15, v16);
    long long v17 = (unsigned char *)*((void *)this + 4);
  }
  if (*((unsigned char **)this + 3) == v17)
  {
    llvm::raw_ostream::write(this, "\n", 1uLL);
    size_t v18 = (void *)*((void *)this + 4);
  }
  else
  {
    *long long v17 = 10;
    size_t v18 = (void *)(*((void *)this + 4) + 1);
    *((void *)this + 4) = v18;
  }
  if (*((void *)this + 3) - (void)v18 > 0xEuLL)
  {
    qmemcpy(v18, "    args uses:\n", 15);
    *((void *)this + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(this, "    args uses:\n", 0xFuLL);
  }
  uint64_t v19 = (llvm::ConstantRange **)a1[3];
  if (v19 != a1 + 4)
  {
    while (1)
    {
      uint64_t v20 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v20) > 5)
      {
        *(_WORD *)(v20 + 4) = 8224;
        *(_DWORD *)uint64_t v20 = 538976288;
        *((void *)this + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(this, "      ", 6uLL);
      }
      if (a5) {
        break;
      }
      uint64_t v78 = "arg{0}";
      *(void *)&long long v79 = 6;
      *((void *)&v79 + 1) = v82;
      uint64_t v80 = 1;
      v81[0] = &unk_1F2607908;
      v81[1] = v19 + 4;
      v82[0] = v81;
      sub_1CD862C68((uint64_t)&v78, this);
LABEL_39:
      int v36 = (_DWORD *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v36 > 3uLL)
      {
        *int v36 = 540695899;
        *((void *)this + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(this, "[]: ", 4uLL);
      }
      sub_1CC14C060(this, v19 + 5);
      uint64_t v37 = (unsigned char *)*((void *)this + 4);
      if (*((unsigned char **)this + 3) == v37)
      {
        llvm::raw_ostream::write(this, "\n", 1uLL);
      }
      else
      {
        unsigned char *v37 = 10;
        ++*((void *)this + 4);
      }
      std::string::size_type v38 = v19[1];
      if (v38)
      {
        do
        {
          uint64_t v39 = (llvm::ConstantRange ***)v38;
          std::string::size_type v38 = *(llvm::ConstantRange **)v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          uint64_t v39 = (llvm::ConstantRange ***)v19[2];
          BOOL v40 = *v39 == v19;
          uint64_t v19 = (llvm::ConstantRange **)v39;
        }
        while (!v40);
      }
      uint64_t v19 = (llvm::ConstantRange **)v39;
      if (v39 == a1 + 4) {
        goto LABEL_54;
      }
    }
    unsigned int v21 = *((_DWORD *)v19 + 8);
    if (*(_WORD *)(a5 + 18)) {
      llvm::Function::BuildLazyArguments((llvm::Function *)a5);
    }
    uint64_t v22 = *(void *)(a5 + 88) + 40 * v21;
    if ((*(unsigned char *)(v22 + 23) & 0x10) == 0) {
      goto LABEL_39;
    }
    uint64_t v23 = ***(void ***)v22;
    uint64_t v24 = *(void *)(v23 + 152);
    uint64_t v25 = *(unsigned int *)(v23 + 168);
    if (v25)
    {
      LODWORD(v26) = (v25 - 1) & ((v22 >> 4) ^ (v22 >> 9));
      int v27 = (uint64_t *)(v24 + 16 * v26);
      uint64_t v28 = *v27;
      if (*v27 == v22) {
        goto LABEL_35;
      }
      int v29 = 1;
      while (v28 != -4096)
      {
        int v30 = v26 + v29++;
        uint64_t v26 = v30 & (v25 - 1);
        uint64_t v28 = *(void *)(v24 + 16 * v26);
        if (v28 == v22)
        {
          int v27 = (uint64_t *)(v24 + 16 * v26);
          goto LABEL_35;
        }
      }
    }
    int v27 = (uint64_t *)(v24 + 16 * v25);
LABEL_35:
    uint64_t v31 = (size_t *)v27[1];
    size_t v34 = *v31;
    int v32 = v31 + 2;
    size_t v33 = v34;
    uint64_t v35 = (void *)*((void *)this + 4);
    if (v34 <= *((void *)this + 3) - (void)v35)
    {
      if (v33)
      {
        memcpy(v35, v32, v33);
        *((void *)this + 4) += v33;
      }
    }
    else
    {
      llvm::raw_ostream::write(this, (const char *)v32, v33);
    }
    goto LABEL_39;
  }
LABEL_54:
  uint64_t v41 = *((void *)this + 4);
  if ((unint64_t)(*((void *)this + 3) - v41) > 0x11)
  {
    *(_WORD *)(v41 + 16) = 2618;
    double result = *(double *)"    allocas uses:\n";
    *(_OWORD *)uint64_t v41 = *(_OWORD *)"    allocas uses:\n";
    *((void *)this + 4) += 18;
    if (!a5) {
      return result;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, "    allocas uses:\n", 0x12uLL);
    if (!a5) {
      return result;
    }
  }
  uint64_t v43 = a5 + 72;
  for (uint64_t i = *(void *)(a5 + 80); ; uint64_t i = *(void *)(i + 8))
  {
    if (i == v43) {
      return result;
    }
    uint64_t v45 = i - 24;
    if (!i) {
      uint64_t v45 = 0;
    }
    uint64_t v46 = *(void *)(v45 + 48);
    if (v46 != v45 + 40) {
      break;
    }
  }
  uint64_t v47 = (llvm::ConstantRange **)(a1 + 1);
  double result = 0.0;
  while (1)
  {
    uint64_t v48 = (unsigned __int8 *)(v46 - 24);
    if (!v46) {
      uint64_t v48 = 0;
    }
    int v49 = v48[16];
    if (v49 == 59) {
      int v50 = (llvm::AllocaInst *)v48;
    }
    else {
      int v50 = 0;
    }
    if (v46 && v49 == 59)
    {
      uint64_t v51 = *v47;
      if (!*v47) {
        goto LABEL_81;
      }
      BOOL v52 = v47;
      do
      {
        unint64_t v53 = *((void *)v51 + 4);
        BOOL v54 = v53 >= (unint64_t)v50;
        if (v53 >= (unint64_t)v50) {
          unsigned int v55 = (llvm::ConstantRange **)v51;
        }
        else {
          unsigned int v55 = (llvm::ConstantRange **)((char *)v51 + 8);
        }
        if (v54) {
          BOOL v52 = (llvm::ConstantRange **)v51;
        }
        uint64_t v51 = *v55;
      }
      while (*v55);
      if (v52 == v47 || v50 < v52[4]) {
LABEL_81:
      }
        BOOL v52 = v47;
      uint64_t v56 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v56) > 5)
      {
        *(_WORD *)(v56 + 4) = 8224;
        *(_DWORD *)uint64_t v56 = 538976288;
        *((void *)this + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(this, "      ", 6uLL);
      }
      if ((*((unsigned char *)v50 + 23) & 0x10) == 0) {
        goto LABEL_94;
      }
      uint64_t v57 = ***(void ***)v50;
      uint64_t v58 = *(void *)(v57 + 152);
      uint64_t v59 = *(unsigned int *)(v57 + 168);
      if (v59)
      {
        LODWORD(v60) = (v59 - 1) & ((v50 >> 4) ^ (v50 >> 9));
        uint64_t v61 = (llvm::AllocaInst **)(v58 + 16 * v60);
        uint64_t v62 = *v61;
        if (*v61 == v50)
        {
LABEL_92:
          unsigned int v65 = (size_t *)v61[1];
          size_t v68 = *v65;
          uint64_t v66 = v65 + 2;
          size_t v67 = v68;
          uint64_t v69 = (unsigned char *)*((void *)this + 4);
          if (v68 <= *((void *)this + 3) - (void)v69)
          {
            if (v67)
            {
              memcpy(v69, v66, v67);
              uint64_t v69 = (unsigned char *)(*((void *)this + 4) + v67);
              *((void *)this + 4) = v69;
            }
            goto LABEL_97;
          }
          llvm::raw_ostream::write(this, (const char *)v66, v67);
LABEL_94:
          uint64_t v69 = (unsigned char *)*((void *)this + 4);
LABEL_97:
          if (*((unsigned char **)this + 3) == v69)
          {
            llvm::raw_ostream::write(this, "[", 1uLL);
          }
          else
          {
            *uint64_t v69 = 91;
            ++*((void *)this + 4);
          }
          sub_1CC145550((uint64_t)&v74, v50);
          uint64_t v78 = &v80;
          long long v79 = xmmword_1CDB15B30;
          llvm::APInt::toString((unsigned int *)&v76, &v78, 0xAu, 1, 0);
          llvm::raw_ostream::write(this, (const char *)v78, v79);
          if (v78 != &v80) {
            free(v78);
          }
          uint64_t v70 = *((void *)this + 4);
          if ((unint64_t)(*((void *)this + 3) - v70) > 2)
          {
            *(unsigned char *)(v70 + 2) = 32;
            *(_WORD *)uint64_t v70 = 14941;
            *((void *)this + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(this, "]: ", 3uLL);
          }
          sub_1CC14C060(this, v52 + 5);
          uint64_t v71 = (unsigned char *)*((void *)this + 4);
          if (*((unsigned char **)this + 3) == v71)
          {
            llvm::raw_ostream::write(this, "\n", 1uLL);
          }
          else
          {
            *uint64_t v71 = 10;
            ++*((void *)this + 4);
          }
          if (v77 >= 0x41 && v76) {
            MEMORY[0x1D25D9CB0](v76, 0x1000C8000313F17);
          }
          if (v75 >= 0x41 && v74) {
            MEMORY[0x1D25D9CB0](v74, 0x1000C8000313F17);
          }
          goto LABEL_107;
        }
        int v63 = 1;
        while (v62 != (llvm::AllocaInst *)-4096)
        {
          int v64 = v60 + v63++;
          uint64_t v60 = v64 & (v59 - 1);
          uint64_t v62 = *(llvm::AllocaInst **)(v58 + 16 * v60);
          if (v62 == v50)
          {
            uint64_t v61 = (llvm::AllocaInst **)(v58 + 16 * v60);
            goto LABEL_92;
          }
        }
      }
      uint64_t v61 = (llvm::AllocaInst **)(v58 + 16 * v59);
      goto LABEL_92;
    }
LABEL_107:
    uint64_t v46 = *(void *)(v46 + 8);
    uint64_t v72 = i - 24;
    if (!i) {
      uint64_t v72 = 0;
    }
    if (v46 == v72 + 40) {
      break;
    }
LABEL_114:
    if (i == v43) {
      return result;
    }
  }
  while (1)
  {
    uint64_t i = *(void *)(i + 8);
    if (i == v43) {
      return result;
    }
    uint64_t v73 = i - 24;
    if (!i) {
      uint64_t v73 = 0;
    }
    uint64_t v46 = *(void *)(v73 + 48);
    if (v46 != v73 + 40) {
      goto LABEL_114;
    }
  }
}

uint64_t **sub_1CC145224(uint64_t **a1, uint64_t a2)
{
  a1[1] = 0;
  uint64_t v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  unsigned int v5 = (void *)(a2 + 8);
  std::string::size_type v6 = *(void **)a2;
  if (*(void *)a2 != a2 + 8)
  {
    while (1)
    {
      uint64_t v7 = a1[1];
      uint64_t v8 = v4;
      if (*a1 != v4)
      {
        uint64_t v9 = a1[1];
        uint64_t v10 = v4;
        if (v7)
        {
          do
          {
            uint64_t v8 = v9;
            uint64_t v9 = (uint64_t *)v9[1];
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v8 = (uint64_t *)v10[2];
            BOOL v11 = *v8 == (void)v10;
            uint64_t v10 = v8;
          }
          while (v11);
        }
        unint64_t v12 = v6[4];
        if (v8[4] >= v12) {
          break;
        }
      }
      if (v7) {
        size_t v13 = (uint64_t **)v8;
      }
      else {
        size_t v13 = (uint64_t **)v4;
      }
      if (v7) {
        uint64_t v14 = (uint64_t **)(v8 + 1);
      }
      else {
        uint64_t v14 = (uint64_t **)v4;
      }
      if (!*v14) {
        goto LABEL_23;
      }
LABEL_26:
      uint64_t v19 = (void *)v6[1];
      if (v19)
      {
        do
        {
          uint64_t v20 = v19;
          uint64_t v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          uint64_t v20 = (void *)v6[2];
          BOOL v11 = *v20 == (void)v6;
          std::string::size_type v6 = v20;
        }
        while (!v11);
      }
      std::string::size_type v6 = v20;
      if (v20 == v5) {
        goto LABEL_32;
      }
    }
    uint64_t v14 = (uint64_t **)v4;
    size_t v13 = (uint64_t **)v4;
    if (v7)
    {
      while (1)
      {
        while (1)
        {
          size_t v13 = (uint64_t **)v7;
          unint64_t v15 = v7[4];
          if (v12 >= v15) {
            break;
          }
          uint64_t v7 = *v13;
          uint64_t v14 = v13;
          if (!*v13) {
            goto LABEL_23;
          }
        }
        if (v15 >= v12) {
          goto LABEL_26;
        }
        uint64_t v7 = v13[1];
        if (!v7)
        {
          uint64_t v14 = v13 + 1;
          break;
        }
      }
    }
LABEL_23:
    size_t v16 = (uint64_t *)operator new(0x78uLL);
    int v36 = v16;
    uint64_t v37 = v4;
    v16[4] = v6[4];
    sub_1CC14A438((uint64_t)(v16 + 5), (uint64_t)(v6 + 5));
    char v38 = 1;
    long long v17 = v36;
    *int v36 = 0;
    v17[1] = 0;
    v17[2] = (uint64_t)v13;
    void *v14 = v17;
    size_t v18 = (uint64_t *)**a1;
    if (v18)
    {
      *a1 = v18;
      long long v17 = *v14;
    }
    sub_1CB8358B8(a1[1], v17);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    int v36 = 0;
    sub_1CC148DE8((uint64_t *)&v36);
    goto LABEL_26;
  }
LABEL_32:
  a1[4] = 0;
  a1[5] = 0;
  a1[3] = (uint64_t *)(a1 + 4);
  unsigned int v21 = *(void **)(a2 + 24);
  if (v21 != (void *)(a2 + 32))
  {
    while (1)
    {
      uint64_t v22 = a1[4];
      uint64_t v23 = a1 + 4;
      if (a1[3] != (uint64_t *)(a1 + 4))
      {
        uint64_t v24 = a1[4];
        uint64_t v25 = a1 + 4;
        if (v22)
        {
          do
          {
            uint64_t v23 = (uint64_t **)v24;
            uint64_t v24 = (uint64_t *)v24[1];
          }
          while (v24);
        }
        else
        {
          do
          {
            uint64_t v23 = (uint64_t **)v25[2];
            BOOL v11 = *v23 == (uint64_t *)v25;
            uint64_t v25 = v23;
          }
          while (v11);
        }
        unsigned int v26 = *((_DWORD *)v21 + 8);
        if (*((_DWORD *)v23 + 8) >= v26) {
          break;
        }
      }
      if (v22) {
        int v27 = v23;
      }
      else {
        int v27 = a1 + 4;
      }
      if (v22) {
        uint64_t v28 = v23 + 1;
      }
      else {
        uint64_t v28 = a1 + 4;
      }
      if (!*v28) {
        goto LABEL_54;
      }
LABEL_57:
      size_t v33 = (void *)v21[1];
      if (v33)
      {
        do
        {
          size_t v34 = v33;
          size_t v33 = (void *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          size_t v34 = (void *)v21[2];
          BOOL v11 = *v34 == (void)v21;
          unsigned int v21 = v34;
        }
        while (!v11);
      }
      unsigned int v21 = v34;
      if (v34 == (void *)(a2 + 32)) {
        goto LABEL_63;
      }
    }
    uint64_t v28 = a1 + 4;
    int v27 = a1 + 4;
    if (v22)
    {
      while (1)
      {
        while (1)
        {
          int v27 = (uint64_t **)v22;
          unsigned int v29 = *((_DWORD *)v22 + 8);
          if (v26 >= v29) {
            break;
          }
          uint64_t v22 = *v27;
          uint64_t v28 = v27;
          if (!*v27) {
            goto LABEL_54;
          }
        }
        if (v29 >= v26) {
          goto LABEL_57;
        }
        uint64_t v22 = v27[1];
        if (!v22)
        {
          uint64_t v28 = v27 + 1;
          break;
        }
      }
    }
LABEL_54:
    int v30 = (uint64_t *)operator new(0x78uLL);
    int v36 = v30;
    uint64_t v37 = (uint64_t *)(a1 + 4);
    *((_DWORD *)v30 + 8) = *((_DWORD *)v21 + 8);
    sub_1CC14A438((uint64_t)(v30 + 5), (uint64_t)(v21 + 5));
    char v38 = 1;
    uint64_t v31 = v36;
    *int v36 = 0;
    v31[1] = 0;
    v31[2] = (uint64_t)v27;
    *uint64_t v28 = v31;
    int v32 = (uint64_t *)*a1[3];
    if (v32)
    {
      a1[3] = v32;
      uint64_t v31 = *v28;
    }
    sub_1CB8358B8(a1[4], v31);
    a1[5] = (uint64_t *)((char *)a1[5] + 1);
    int v36 = 0;
    sub_1CC148DE8((uint64_t *)&v36);
    goto LABEL_57;
  }
LABEL_63:
  *((_DWORD *)a1 + 12) = *(_DWORD *)(a2 + 48);
  return a1;
}

uint64_t sub_1CC145550(uint64_t a1, llvm::AllocaInst *a2)
{
  uint64_t v4 = *(void *)(*(void *)(*((void *)a2 + 5) + 56) + 40);
  unsigned int v5 = (llvm::Type *)*((void *)a2 + 8);
  uint64_t v6 = sub_1CB83544C(v4 + 272, (uint64_t)v5);
  BOOL v8 = v7 == 1;
  uint64_t result = llvm::DataLayout::getAlignment((llvm::DataLayout *)(v4 + 272), v5, 1);
  unsigned int v10 = *(_DWORD *)(*(void *)a2 + 8);
  if ((v10 & 0xFE) == 0x12) {
    unsigned int v10 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
  }
  BOOL v11 = v8;
  if (v10 < 0x100) {
    goto LABEL_12;
  }
  unsigned int v12 = v10 >> 8;
  uint64_t v13 = *(unsigned int *)(v4 + 512);
  uint64_t v14 = *(void *)(v4 + 504);
  if (v13)
  {
    uint64_t v14 = *(void *)(v4 + 504);
    unint64_t v15 = *(unsigned int *)(v4 + 512);
    do
    {
      unint64_t v16 = v15 >> 1;
      uint64_t v17 = v14 + 16 * (v15 >> 1);
      unsigned int v18 = *(_DWORD *)(v17 + 8);
      uint64_t v19 = v17 + 16;
      v15 += ~(v15 >> 1);
      if (v18 < v12) {
        uint64_t v14 = v19;
      }
      else {
        unint64_t v15 = v16;
      }
    }
    while (v15);
  }
  if (v14 == *(void *)(v4 + 504) + 16 * v13 || *(_DWORD *)(v14 + 8) != v12) {
LABEL_12:
  }
    uint64_t v14 = *(void *)(v4 + 504);
  unint64_t v20 = (unint64_t)(v6 + 7) >> 3;
  unsigned int v21 = *(_DWORD *)(v14 + 4);
  *(_DWORD *)(a1 + 8) = v21;
  if (v21 > 0x40) {
    operator new[]();
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = v21;
  *(void *)(a1 + 16) = 0;
  if (!v11)
  {
    unsigned int v37 = v21;
    unint64_t v22 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v21;
    if (!v21) {
      unint64_t v22 = 0;
    }
    uint64_t v23 = ((1 << result) + v20 - 1) & -(1 << result) & v22;
    __src = (void *)v23;
    if (v23 && ((1 << (v21 - 1)) & v23) == 0)
    {
      uint64_t result = llvm::AllocaInst::isArrayAllocation(a2);
      if (!result) {
        goto LABEL_43;
      }
      uint64_t v24 = *((void *)a2 - 4);
      BOOL v25 = 1;
      if (!v24 || *(unsigned char *)(v24 + 16) != 16) {
        goto LABEL_58;
      }
      BOOL v35 = 0;
      unsigned int v26 = *(_DWORD *)(v24 + 32);
      unsigned int v34 = v26;
      if (v26 > 0x40) {
        operator new[]();
      }
      unint64_t v27 = *(void *)(v24 + 24);
      unint64_t v33 = v27;
      if (!v27 || ((1 << (v26 - 1)) & v27) != 0) {
        goto LABEL_58;
      }
      llvm::APInt::sextOrTrunc((uint64_t)&v33, v21, (uint64_t)&v31);
      if (v34 >= 0x41 && v33) {
        MEMORY[0x1D25D9CB0](v33, 0x1000C8000313F17);
      }
      unint64_t v33 = (unint64_t)v31;
      unsigned int v34 = v32;
      uint64_t result = llvm::APInt::smul_ov((const void **)&__src, (const llvm::APInt *)&v33, &v35, (llvm::APInt *)&v31);
      if (v37 >= 0x41)
      {
        uint64_t result = (uint64_t)__src;
        if (__src) {
          uint64_t result = MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
      }
      __src = v31;
      unsigned int v37 = v32;
      BOOL v28 = v35;
      BOOL v25 = v35;
      if (v34 >= 0x41 && v33) {
        uint64_t result = MEMORY[0x1D25D9CB0](v33, 0x1000C8000313F17);
      }
      if (!v28)
      {
LABEL_43:
        unsigned int v29 = v37;
        if (v37 > 0x40) {
          operator new[]();
        }
        int v30 = __src;
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = v21;
        if (*(_DWORD *)(a1 + 24) >= 0x41u)
        {
          uint64_t result = *(void *)(a1 + 16);
          if (result) {
            uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
          }
        }
        *(void *)(a1 + 16) = v30;
        *(_DWORD *)(a1 + 24) = v29;
        if (v37 >= 0x41)
        {
          uint64_t result = (uint64_t)__src;
          if (__src) {
            return MEMORY[0x1D25D9CB0]();
          }
        }
      }
      else
      {
LABEL_58:
        if (v37 >= 0x41)
        {
          uint64_t result = (uint64_t)__src;
          if (__src) {
            uint64_t result = MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
        }
        if (!v25 && *(_DWORD *)(a1 + 24) >= 0x41u)
        {
          uint64_t result = *(void *)(a1 + 16);
          if (result) {
            return MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
          }
        }
      }
    }
  }
  return result;
}

void llvm::StackSafetyGlobalInfo::print(llvm::StackSafetyGlobalInfo *this, llvm::raw_ostream *a2)
{
  Info = (void *)llvm::StackSafetyGlobalInfo::getInfo(this);
  if (Info[2])
  {
    uint64_t v4 = *(void *)(*(void *)(*Info + 32) + 40);
    uint64_t v5 = v4 + 24;
    uint64_t v6 = *(void *)(v4 + 32);
    if (v6 != v4 + 24)
    {
      int v7 = Info + 1;
      do
      {
        if (v6) {
          unint64_t v8 = v6 - 56;
        }
        else {
          unint64_t v8 = 0;
        }
        if (v6 && *(unsigned char *)(v8 + 16) == 3)
        {
          if ((*(_DWORD *)(v8 + 20) & 0x7FFFFFF) != 0) {
            goto LABEL_14;
          }
        }
        else if (*(unsigned char *)(v8 + 16) || *(void *)(v8 + 72) != v8 + 72 || (*(unsigned char *)(v8 + 34) & 0x80) != 0)
        {
LABEL_14:
          uint64_t v9 = (void *)*v7;
          if (!*v7) {
            goto LABEL_25;
          }
          unsigned int v10 = v7;
          do
          {
            unint64_t v11 = v9[4];
            BOOL v12 = v11 >= v8;
            if (v11 >= v8) {
              uint64_t v13 = v9;
            }
            else {
              uint64_t v13 = v9 + 1;
            }
            if (v12) {
              unsigned int v10 = v9;
            }
            uint64_t v9 = (void *)*v13;
          }
          while (*v13);
          if (v10 == v7 || v8 < v10[4]) {
LABEL_25:
          }
            unsigned int v10 = v7;
          if ((*(unsigned char *)(v8 + 23) & 0x10) != 0)
          {
            uint64_t v14 = ***(void ***)v8;
            uint64_t v15 = *(void *)(v14 + 152);
            uint64_t v16 = *(unsigned int *)(v14 + 168);
            if (!v16) {
              goto LABEL_33;
            }
            LODWORD(v17) = (v16 - 1) & ((v8 >> 4) ^ (v8 >> 9));
            unsigned int v18 = (uint64_t *)(v15 + 16 * v17);
            uint64_t v19 = *v18;
            if (*v18 != v8)
            {
              int v20 = 1;
              while (v19 != -4096)
              {
                int v21 = v17 + v20++;
                uint64_t v17 = v21 & (v16 - 1);
                uint64_t v19 = *(void *)(v15 + 16 * v17);
                if (v19 == v8)
                {
                  unsigned int v18 = (uint64_t *)(v15 + 16 * v17);
                  goto LABEL_34;
                }
              }
LABEL_33:
              unsigned int v18 = (uint64_t *)(v15 + 16 * v16);
            }
LABEL_34:
            unint64_t v22 = (void *)v18[1];
            size_t v25 = *v22;
            uint64_t v23 = (char *)(v22 + 2);
            size_t v24 = v25;
          }
          else
          {
            size_t v24 = 0;
            uint64_t v23 = &byte_1CFBCE98E;
          }
          sub_1CC144998(v10 + 5, a2, v23, v24, v8);
          uint64_t v26 = *((void *)a2 + 4);
          if ((unint64_t)(*((void *)a2 + 3) - v26) > 0x11)
          {
            *(_WORD *)(v26 + 16) = 14963;
            *(_OWORD *)uint64_t v26 = *(_OWORD *)"    safe accesses:";
            unint64_t v27 = (unsigned char *)(*((void *)a2 + 4) + 18);
            *((void *)a2 + 4) = v27;
          }
          else
          {
            llvm::raw_ostream::write(a2, "    safe accesses:", 0x12uLL);
            unint64_t v27 = (unsigned char *)*((void *)a2 + 4);
          }
          if (*((unsigned char **)a2 + 3) == v27)
          {
            llvm::raw_ostream::write(a2, "\n", 1uLL);
          }
          else
          {
            unsigned char *v27 = 10;
            ++*((void *)a2 + 4);
          }
          unint64_t v28 = v8 + 72;
          for (uint64_t i = *(void *)(v8 + 80); i != v28; uint64_t i = *(void *)(i + 8))
          {
            uint64_t v30 = i - 24;
            if (!i) {
              uint64_t v30 = 0;
            }
            uint64_t v31 = *(void *)(v30 + 48);
            if (v31 != v30 + 40)
            {
              while (1)
              {
                if (v31) {
                  unsigned int v34 = (unsigned __int8 *)(v31 - 24);
                }
                else {
                  unsigned int v34 = 0;
                }
                int v35 = v34[16];
                if (v35 == 84) {
                  int v36 = v34;
                }
                else {
                  int v36 = 0;
                }
                if (((v35 & 0xFE) == 0x3C
                   || (sub_1CBFB3AB0((uint64_t)v34) & 1) != 0
                   || v31 && v35 == 84 && (uint64_t v37 = *((void *)v36 + 8)) != 0 && (*(unsigned char *)(v37 + 32) & 0x20) != 0)
                  && llvm::StackSafetyGlobalInfo::stackAccessIsSafe(this, (const llvm::Instruction *)v34))
                {
                  uint64_t v32 = *((void *)a2 + 4);
                  if ((unint64_t)(*((void *)a2 + 3) - v32) > 4)
                  {
                    *(unsigned char *)(v32 + 4) = 32;
                    *(_DWORD *)uint64_t v32 = 538976288;
                    *((void *)a2 + 4) += 5;
                  }
                  else
                  {
                    llvm::raw_ostream::write(a2, "     ", 5uLL);
                  }
                  llvm::Value::print((llvm::Value *)v34, a2, 0);
                  unint64_t v33 = (unsigned char *)*((void *)a2 + 4);
                  if (*((unsigned char **)a2 + 3) == v33)
                  {
                    llvm::raw_ostream::write(a2, "\n", 1uLL);
                  }
                  else
                  {
                    unsigned char *v33 = 10;
                    ++*((void *)a2 + 4);
                  }
                }
                uint64_t v31 = *(void *)(v31 + 8);
                uint64_t v38 = i - 24;
                if (!i) {
                  uint64_t v38 = 0;
                }
                if (v31 == v38 + 40) {
                  break;
                }
LABEL_74:
                if (i == v28) {
                  goto LABEL_75;
                }
              }
              while (1)
              {
                uint64_t i = *(void *)(i + 8);
                if (i == v28) {
                  goto LABEL_75;
                }
                uint64_t v39 = i - 24;
                if (!i) {
                  uint64_t v39 = 0;
                }
                uint64_t v31 = *(void *)(v39 + 48);
                if (v31 != v39 + 40) {
                  goto LABEL_74;
                }
              }
            }
          }
LABEL_75:
          BOOL v40 = (unsigned char *)*((void *)a2 + 4);
          if (*((unsigned char **)a2 + 3) == v40)
          {
            llvm::raw_ostream::write(a2, "\n", 1uLL);
          }
          else
          {
            *BOOL v40 = 10;
            ++*((void *)a2 + 4);
          }
        }
        uint64_t v6 = *(void *)(v6 + 8);
      }
      while (v6 != v5);
    }
  }
}

void *llvm::StackSafetyGlobalInfo::StackSafetyGlobalInfo(void *this)
{
  *this = 0;
  this[5] = 0;
  this[6] = 0;
  this[4] = 0;
  return this;
}

{
  *this = 0;
  this[5] = 0;
  this[6] = 0;
  this[4] = 0;
  return this;
}

llvm::StackSafetyGlobalInfo *llvm::StackSafetyGlobalInfo::StackSafetyGlobalInfo(llvm::StackSafetyGlobalInfo *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  sub_1CC14FA48((uint64_t)a1 + 8, a3);
  *((void *)a1 + 5) = a4;
  *((void *)a1 + 6) = 0;
  if (byte_1EBCC8350) {
    llvm::StackSafetyGlobalInfo::getInfo(a1);
  }
  return a1;
}

{
  *(void *)a1 = a2;
  sub_1CC14FA48((uint64_t)a1 + 8, a3);
  *((void *)a1 + 5) = a4;
  *((void *)a1 + 6) = 0;
  if (byte_1EBCC8350) {
    llvm::StackSafetyGlobalInfo::getInfo(a1);
  }
  return a1;
}

void *llvm::StackSafetyGlobalInfo::StackSafetyGlobalInfo(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = (void *)a2[4];
  if (v4)
  {
    if (v4 == a2 + 1)
    {
      a1[4] = a1 + 1;
      (*(void (**)(void))(*(void *)a2[4] + 24))(a2[4]);
    }
    else
    {
      a1[4] = v4;
      a2[4] = 0;
    }
  }
  else
  {
    a1[4] = 0;
  }
  a1[5] = a2[5];
  uint64_t v5 = a2[6];
  a2[6] = 0;
  a1[6] = v5;
  return a1;
}

uint64_t llvm::StackSafetyInfoWrapperPass::runOnFunction(llvm::StackSafetyInfoWrapperPass *this, llvm::Function *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (uint64_t *)*((void *)this + 1);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::ScalarEvolutionWrapperPass::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  uint64_t v8 = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v11[0] = &unk_1F2607980;
  v11[1] = v8;
  BOOL v12 = v11;
  uint64_t v13 = a2;
  v14[3] = v14;
  uint64_t v15 = 0;
  v14[0] = &unk_1F2607980;
  v14[1] = v8;
  *((void *)this + 4) = a2;
  sub_1CC14BF80((void *)this + 5, (uint64_t)v14);
  uint64_t v9 = v15;
  uint64_t v15 = 0;
  sub_1CC144930((uint64_t *)this + 9, v9);
  llvm::StackSafetyInfo::~StackSafetyInfo((llvm::StackSafetyInfo *)&v13);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  return 0;
}

void llvm::StackSafetyGlobalAnalysis::run()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  llvm::AnalysisManager<llvm::Module>::getResultImpl();
}

void llvm::StackSafetyGlobalInfoWrapperPass::~StackSafetyGlobalInfoWrapperPass(llvm::StackSafetyGlobalInfoWrapperPass *this)
{
  *(void *)this = &unk_1F2607868;
  llvm::StackSafetyGlobalInfo::~StackSafetyGlobalInfo((llvm::StackSafetyGlobalInfoWrapperPass *)((char *)this + 32));

  llvm::Pass::~Pass(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F2607868;
  llvm::StackSafetyGlobalInfo::~StackSafetyGlobalInfo((llvm::StackSafetyGlobalInfoWrapperPass *)((char *)this + 32));

  llvm::Pass::~Pass(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F2607868;
  llvm::StackSafetyGlobalInfo::~StackSafetyGlobalInfo((llvm::StackSafetyGlobalInfoWrapperPass *)((char *)this + 32));
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t llvm::StackSafetyGlobalInfoWrapperPass::runOnModule(llvm::StackSafetyGlobalInfoWrapperPass *this, llvm::Module *a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((void *)this + 1) + 24), &llvm::ImmutableModuleSummaryIndexWrapperPass::ID, 1);
  if (AnalysisPass
    && (uint64_t v5 = (*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::ImmutableModuleSummaryIndexWrapperPass::ID)) != 0)
  {
    uint64_t v6 = *(void *)(v5 + 32);
  }
  else
  {
    uint64_t v6 = 0;
  }
  v8[0] = &unk_1F2607A10;
  v8[1] = this;
  uint64_t v9 = v8;
  unsigned int v10 = a2;
  void v11[3] = v11;
  v11[4] = v6;
  v11[0] = &unk_1F2607A10;
  v11[1] = this;
  v11[5] = 0;
  if (byte_1EBCC8350) {
    llvm::StackSafetyGlobalInfo::getInfo((llvm::StackSafetyGlobalInfo *)&v10);
  }
  llvm::StackSafetyGlobalInfo::operator=((void *)this + 4, &v10);
  llvm::StackSafetyGlobalInfo::~StackSafetyGlobalInfo((llvm::StackSafetyGlobalInfo *)&v10);
  if (v9 == v8)
  {
    (*(void (**)(void *))(v8[0] + 32))(v8);
  }
  else if (v9)
  {
    (*(void (**)(void))(*v9 + 40))();
  }
  return 0;
}

uint64_t llvm::needsParamAccessSummary(uint64_t a1)
{
  if (byte_1EBCC8350) {
    return 1;
  }
  for (uint64_t i = *(void *)(a1 + 32); i != a1 + 24; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v3 = i - 56;
    if (!i) {
      uint64_t v3 = 0;
    }
    uint64_t v4 = *(void *)(v3 + 112);
    if (v4 && (*(unsigned char *)(v4 + 18) & 0x10) != 0) {
      return 1;
    }
  }
  return 0;
}

void llvm::generateParamAccessSummary(llvm *this, llvm::ModuleSummaryIndex *a2)
{
  uint64_t v170 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 136)) {
    return;
  }
  uint64_t v2 = *(char **)this;
  if (((byte_1EBD0C080 & 1) != 0 || byte_1EA61F098) && v2 != (char *)this + 8)
  {
    uint64_t v3 = *(llvm **)this;
    do
    {
      uint64_t v4 = (llvm *)*((void *)v3 + 1);
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          uint64_t v4 = *(llvm **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (llvm *)*((void *)v3 + 2);
          BOOL v9 = *(void *)v5 == (void)v3;
          uint64_t v3 = v5;
        }
        while (!v9);
      }
      uint64_t v3 = v5;
    }
    while (v5 != (llvm *)((char *)this + 8));
  }
  unsigned int v162 = 0;
  uint64_t v163 = 0;
  uint64_t v161 = &v162;
  unsigned int v128 = (char *)this + 8;
  if (v2 == (char *)this + 8)
  {
    int v64 = 0;
    v142 = 0;
    uint64_t v143 = 0;
    goto LABEL_120;
  }
  do
  {
    int v129 = v2;
    uint64_t v6 = (uint64_t *)*((void *)v2 + 7);
    uint64_t v7 = (uint64_t *)*((void *)v2 + 8);
    v130 = v7;
    if (v6 == v7) {
      goto LABEL_110;
    }
    do
    {
      uint64_t v8 = *v6;
      if (*v6) {
        BOOL v9 = *(_DWORD *)(*v6 + 8) == 1;
      }
      else {
        BOOL v9 = 0;
      }
      if (v9)
      {
        unsigned int v10 = *(int ***)(v8 + 112);
        if (v10)
        {
          if (v10[1] != *v10)
          {
            v131 = v6;
            if ((~*(unsigned __int16 *)(v8 + 12) & 0x180) == 0)
            {
              __n128 v165 = 0uLL;
              v167 = 0;
              uint64_t v168 = 0;
              v164 = &v165;
              v166 = &v167;
              int v169 = 0;
              unint64_t v11 = *v10;
              v134 = v10[1];
              if (v134 == *v10)
              {
                uint64_t v12 = 0;
                uint64_t v13 = 0;
                uint64_t v14 = (void **)&v165;
                goto LABEL_89;
              }
              while (2)
              {
                uint64_t v23 = operator new(0x78uLL);
                size_t v24 = v23;
                unsigned int v25 = *v11;
                v23[8] = *v11;
                v23[12] = 64;
                *((void *)v23 + 5) = 0;
                v23[16] = 64;
                *((void *)v23 + 7) = 0;
                *((void *)v23 + 10) = 0;
                *((void *)v23 + 9) = v23 + 20;
                *((void *)v23 + 13) = 0;
                *((void *)v23 + 14) = 0;
                *((void *)v23 + 11) = 0;
                *((void *)v23 + 12) = v23 + 26;
                uint64_t v26 = &v167;
                unint64_t v27 = &v167;
                unint64_t v28 = v167;
                if (v167)
                {
                  while (1)
                  {
                    while (1)
                    {
                      uint64_t v26 = (uint64_t **)v28;
                      unsigned int v29 = *((_DWORD *)v28 + 8);
                      if (v29 <= v25) {
                        break;
                      }
                      unint64_t v28 = (uint64_t *)*v28;
                      unint64_t v27 = v26;
                      if (!*v26) {
                        goto LABEL_52;
                      }
                    }
                    if (v29 >= v25) {
                      break;
                    }
                    unint64_t v28 = (uint64_t *)v28[1];
                    if (!v28)
                    {
                      unint64_t v27 = v26 + 1;
                      goto LABEL_52;
                    }
                  }
                  sub_1CD40B1BC(0);
                  if (*((_DWORD *)v24 + 16) >= 0x41u)
                  {
                    uint64_t v19 = v24[7];
                    if (v19) {
                      MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
                    }
                  }
                  if (*((_DWORD *)v24 + 12) >= 0x41u)
                  {
                    uint64_t v20 = v24[5];
                    if (v20) {
                      MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
                    }
                  }
                  operator delete(v24);
                }
                else
                {
LABEL_52:
                  *(void *)uint64_t v23 = 0;
                  *((void *)v23 + 1) = 0;
                  *((void *)v23 + 2) = v26;
                  unsigned char *v27 = (uint64_t *)v23;
                  uint64_t v30 = (uint64_t *)v23;
                  if (*v166)
                  {
                    v166 = (uint64_t **)*v166;
                    uint64_t v30 = *v27;
                  }
                  sub_1CB8358B8(v167, v30);
                  ++v168;
                  uint64_t v26 = (uint64_t **)v24;
                }
                uint64_t v31 = (void **)(v26 + 5);
                if (*((_DWORD *)v26 + 12) > 0x40u || v11[4] > 0x40)
                {
                  uint64_t v15 = (const void **)(v11 + 2);
                  if (v31 != (void **)(v11 + 2))
                  {
                    llvm::APInt::reallocate((uint64_t)(v26 + 5), v11[4]);
                    uint64_t v16 = *((unsigned int *)v26 + 12);
                    if (v16 <= 0x40) {
                      void *v31 = (void *)*v15;
                    }
                    else {
                      memcpy(*v31, *v15, ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8);
                    }
                  }
                }
                else
                {
                  v26[5] = (uint64_t *)*((void *)v11 + 1);
                  *((_DWORD *)v26 + 12) = v11[4];
                }
                uint64_t v32 = (void **)(v26 + 7);
                if (*((_DWORD *)v26 + 16) > 0x40u || v11[8] > 0x40)
                {
                  uint64_t v17 = (const void **)(v11 + 6);
                  if (v32 != (void **)(v11 + 6))
                  {
                    llvm::APInt::reallocate((uint64_t)(v26 + 7), v11[8]);
                    uint64_t v18 = *((unsigned int *)v26 + 16);
                    if (v18 <= 0x40) {
                      *uint64_t v32 = (void *)*v17;
                    }
                    else {
                      memcpy(*v32, *v17, ((unint64_t)(v18 + 63) >> 3) & 0x3FFFFFF8);
                    }
                  }
                }
                else
                {
                  v26[7] = (uint64_t *)*((void *)v11 + 3);
                  *((_DWORD *)v26 + 16) = v11[8];
                }
                uint64_t v132 = (void **)(v26 + 7);
                int v133 = (void **)(v26 + 5);
                uint64_t v34 = *((void *)v11 + 5);
                uint64_t v33 = *((void *)v11 + 6);
                unsigned int v136 = v11;
                if (v34 != v33)
                {
                  int v35 = (uint64_t *)(v26 + 13);
                  while (1)
                  {
                    unint64_t v36 = sub_1CC147660(*(void *)(v34 + 8), *(void **)(v8 + 24), *(void *)(v8 + 32));
                    if (!v36) {
                      break;
                    }
                    unint64_t v37 = v36;
                    unint64_t v38 = *(void *)v34;
                    uint64_t v39 = (uint64_t *)*v35;
                    BOOL v40 = v26 + 13;
                    uint64_t v41 = v26 + 13;
                    if (*v35)
                    {
                      while (1)
                      {
                        while (1)
                        {
                          uint64_t v41 = (uint64_t **)v39;
                          unint64_t v42 = v39[5];
                          if (v38 >= v42) {
                            break;
                          }
LABEL_66:
                          uint64_t v39 = *v41;
                          BOOL v40 = v41;
                          if (!*v41) {
                            goto LABEL_73;
                          }
                        }
                        if (v42 >= v38)
                        {
                          unint64_t v43 = (unint64_t)v41[4];
                          if (v36 < v43) {
                            goto LABEL_66;
                          }
                          if (v43 >= v36) {
                            goto LABEL_78;
                          }
                        }
                        uint64_t v39 = v41[1];
                        if (!v39)
                        {
                          BOOL v40 = v41 + 1;
                          break;
                        }
                      }
                    }
LABEL_73:
                    uint64_t v44 = (uint64_t *)operator new(0x50uLL);
                    uint64_t v45 = v44;
                    v44[4] = v37;
                    v44[5] = v38;
                    unsigned int v46 = *(_DWORD *)(v34 + 24);
                    *((_DWORD *)v44 + 14) = v46;
                    if (v46 > 0x40) {
                      operator new[]();
                    }
                    v44[6] = *(void *)(v34 + 16);
                    unsigned int v47 = *(_DWORD *)(v34 + 40);
                    *((_DWORD *)v44 + 18) = v47;
                    if (v47 > 0x40) {
                      operator new[]();
                    }
                    v44[8] = *(void *)(v34 + 32);
                    *uint64_t v44 = 0;
                    v44[1] = 0;
                    v44[2] = (uint64_t)v41;
                    *BOOL v40 = v44;
                    uint64_t v48 = (uint64_t *)*v26[12];
                    if (v48)
                    {
                      v26[12] = v48;
                      uint64_t v45 = *v40;
                    }
                    sub_1CB8358B8(v26[13], v45);
                    v26[14] = (uint64_t *)((char *)v26[14] + 1);
LABEL_78:
                    v34 += 48;
                    if (v34 == v33) {
                      goto LABEL_87;
                    }
                  }
                  if (*((_DWORD *)v26 + 12) > 0x40u)
                  {
                    llvm::APInt::reallocate((uint64_t)v133, 0x40u);
                    uint64_t v21 = *((unsigned int *)v26 + 12);
                    if (v21 <= 0x40) {
                      *int v133 = (void *)-1;
                    }
                    else {
                      memcpy(*v133, (const void *)0xFFFFFFFFFFFFFFFFLL, ((unint64_t)(v21 + 63) >> 3) & 0x3FFFFFF8);
                    }
                  }
                  else
                  {
                    v26[5] = (uint64_t *)-1;
                    *((_DWORD *)v26 + 12) = 64;
                  }
                  if (*((_DWORD *)v26 + 16) > 0x40u)
                  {
                    llvm::APInt::reallocate((uint64_t)v132, 0x40u);
                    uint64_t v22 = *((unsigned int *)v26 + 16);
                    if (v22 <= 0x40) {
                      *uint64_t v132 = (void *)-1;
                    }
                    else {
                      memcpy(*v132, (const void *)0xFFFFFFFFFFFFFFFFLL, ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8);
                    }
                  }
                  else
                  {
                    v26[7] = (uint64_t *)-1;
                    *((_DWORD *)v26 + 16) = 64;
                  }
                  sub_1CC148E90(v26[13]);
                  v26[13] = 0;
                  v26[14] = 0;
                  v26[12] = v35;
                }
LABEL_87:
                unint64_t v11 = v136 + 16;
                if (v136 + 16 != v134) {
                  continue;
                }
                break;
              }
              uint64_t v14 = (void **)v164;
              uint64_t v12 = v165.n128_i64[1];
              uint64_t v13 = v165.n128_u64[0];
LABEL_89:
              int v49 = (uint64_t *)operator new(0x60uLL);
              int v50 = v49;
              v49[4] = v8;
              v49[5] = (uint64_t)v14;
              v49[6] = v13;
              uint64_t v51 = v49 + 6;
              v49[7] = v12;
              if (v12)
              {
                *(void *)(v13 + 16) = v51;
                v164 = &v165;
                __n128 v165 = 0uLL;
              }
              else
              {
                v49[5] = (uint64_t)v51;
              }
              unint64_t v53 = v166;
              BOOL v52 = v167;
              v50[9] = (uint64_t)v167;
              BOOL v54 = v50 + 9;
              v50[8] = (uint64_t)v53;
              uint64_t v55 = v168;
              v50[10] = v168;
              if (v55)
              {
                v52[2] = (uint64_t)v54;
                v166 = &v167;
                v167 = 0;
                uint64_t v168 = 0;
              }
              else
              {
                v50[8] = (uint64_t)v54;
              }
              *((_DWORD *)v50 + 22) = v169;
              uint64_t v56 = v162;
              uint64_t v57 = &v162;
              uint64_t v58 = &v162;
              if (v162)
              {
                unint64_t v59 = v50[4];
                while (1)
                {
                  while (1)
                  {
                    uint64_t v57 = (uint64_t **)v56;
                    unint64_t v60 = v56[4];
                    if (v59 >= v60) {
                      break;
                    }
                    uint64_t v56 = (uint64_t *)*v56;
                    uint64_t v58 = v57;
                    if (!*v57) {
                      goto LABEL_103;
                    }
                  }
                  if (v60 >= v59) {
                    break;
                  }
                  uint64_t v56 = (uint64_t *)v56[1];
                  if (!v56)
                  {
                    uint64_t v58 = v57 + 1;
                    goto LABEL_103;
                  }
                }
                sub_1CC14A7DC(v52);
                sub_1CC14A7DC((void *)v50[6]);
                operator delete(v50);
              }
              else
              {
LABEL_103:
                *int v50 = 0;
                v50[1] = 0;
                v50[2] = (uint64_t)v57;
                uint64_t *v58 = v50;
                if (*v161)
                {
                  uint64_t v161 = (uint64_t **)*v161;
                  int v50 = *v58;
                }
                sub_1CB8358B8(v162, v50);
                ++v163;
              }
              sub_1CC14A7DC(v167);
              sub_1CC14A7DC(v165.n128_u64[0]);
            }
            __n128 v159 = 0uLL;
            uint64_t v160 = 0;
            sub_1CC1477C4(v8, &v159);
            v164 = &v159;
            sub_1CC0C4A94((void ***)&v164);
            uint64_t v7 = v130;
            uint64_t v6 = v131;
          }
        }
      }
      ++v6;
    }
    while (v6 != v7);
LABEL_110:
    uint64_t v61 = v129;
    uint64_t v62 = (char *)*((void *)v129 + 1);
    if (v62)
    {
      do
      {
        int v63 = v62;
        uint64_t v62 = *(char **)v62;
      }
      while (v62);
    }
    else
    {
      do
      {
        int v63 = (char *)*((void *)v61 + 2);
        BOOL v9 = *(void *)v63 == (void)v61;
        uint64_t v61 = v63;
      }
      while (!v9);
    }
    uint64_t v2 = v63;
  }
  while (v63 != v128);
  unsigned int v65 = v161;
  int v64 = v162;
  uint64_t v141 = v161;
  v142 = v162;
  uint64_t v143 = v163;
  if (!v163)
  {
LABEL_120:
    uint64_t v141 = &v142;
    unsigned int v145 = v64;
    uint64_t v146 = 0;
    goto LABEL_121;
  }
  v162[2] = (uint64_t)&v142;
  uint64_t v161 = &v162;
  unsigned int v162 = 0;
  uint64_t v163 = 0;
  unsigned int v144 = v65;
  unsigned int v145 = v64;
  uint64_t v146 = v143;
  if (!v143)
  {
LABEL_121:
    unsigned int v144 = &v145;
    goto LABEL_122;
  }
  v64[2] = (uint64_t)&v145;
  uint64_t v141 = &v142;
  v142 = 0;
  uint64_t v143 = 0;
LABEL_122:
  unsigned int v148 = 64;
  uint64_t v147 = -1;
  unsigned int v150 = 64;
  uint64_t v149 = -1;
  v151[0] = 0;
  v151[1] = 0;
  unsigned int v152 = 0;
  uint64_t v153 = 0;
  int32x2_t v154 = 0;
  int v155 = 0;
  uint64_t v157 = 0;
  uint64_t v158 = 0;
  __p = 0;
  sub_1CC14BE8C(v142);
  v164 = (__n128 *)&v165.n128_i8[8];
  v165.n128_u64[0] = 0x1000000000;
  uint64_t v66 = (uint64_t *)v144;
  if (v144 != &v145)
  {
    do
    {
      v165.n128_u32[0] = 0;
      size_t v67 = (uint64_t *)v66[8];
      if (v67 == v66 + 9)
      {
        uint64_t v74 = (uint64_t *)v164;
        unsigned int v75 = (void **)v164;
      }
      else
      {
        unsigned int v68 = 0;
        do
        {
          uint64_t v69 = (uint64_t *)v67[12];
          if (v69 != v67 + 13)
          {
            do
            {
              if (v68 >= v165.n128_u32[1]) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              v164->n128_u64[v68] = v69[4];
              unsigned int v68 = ++v165.n128_u32[0];
              uint64_t v70 = (uint64_t *)v69[1];
              if (v70)
              {
                do
                {
                  uint64_t v71 = v70;
                  uint64_t v70 = (uint64_t *)*v70;
                }
                while (v70);
              }
              else
              {
                do
                {
                  uint64_t v71 = (uint64_t *)v69[2];
                  BOOL v9 = *v71 == (void)v69;
                  uint64_t v69 = v71;
                }
                while (!v9);
              }
              uint64_t v69 = v71;
            }
            while (v71 != v67 + 13);
          }
          uint64_t v72 = (uint64_t *)v67[1];
          if (v72)
          {
            do
            {
              uint64_t v73 = v72;
              uint64_t v72 = (uint64_t *)*v72;
            }
            while (v72);
          }
          else
          {
            do
            {
              uint64_t v73 = (uint64_t *)v67[2];
              BOOL v9 = *v73 == (void)v67;
              size_t v67 = v73;
            }
            while (!v9);
          }
          size_t v67 = v73;
        }
        while (v73 != v66 + 9);
        uint64_t v74 = (uint64_t *)v164;
        if (v68 >= 2)
        {
          qsort(v164, v68, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1CC14FEE0);
          unsigned int v68 = v165.n128_u32[0];
          uint64_t v74 = (uint64_t *)v164;
        }
        unsigned int v75 = (void **)&v74[v68];
        uint64_t v76 = v74;
        if (v68)
        {
          unint64_t v77 = 0;
          uint64_t v78 = 8 * v68 - 8;
          while (v78 != v77)
          {
            uint64_t v80 = v74[v77 / 8];
            uint64_t v79 = v74[v77 / 8 + 1];
            v77 += 8;
            if (v80 == v79)
            {
              uint64_t v76 = &v74[v77 / 8 - 1];
              goto LABEL_148;
            }
          }
        }
        else
        {
LABEL_148:
          if (v76 != (uint64_t *)v75)
          {
            uint64_t v81 = (void **)(v76 + 2);
            if (v76 + 2 != (uint64_t *)v75)
            {
              uint64_t v82 = *v76;
              do
              {
                BOOL v83 = (void *)v82;
                uint64_t v82 = (uint64_t)*v81;
                if (v83 != *v81)
                {
                  v76[1] = v82;
                  ++v76;
                }
                ++v81;
              }
              while (v81 != v75);
            }
            unsigned int v75 = (void **)(v76 + 1);
          }
        }
      }
      v165.n128_u32[0] = (unint64_t)((char *)v75 - (char *)v74) >> 3;
      if (v165.n128_u32[0])
      {
        uint64_t v84 = 8 * ((unint64_t)((char *)v75 - (char *)v74) >> 3);
        do
        {
          sub_1CC14FEFC((uint64_t)v151, v74);
          unint64_t v86 = *(unsigned int *)(v85 + 16);
          if (v86 >= *(unsigned int *)(v85 + 20)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v85 + 8) + 8 * v86) = v66[4];
          ++*(_DWORD *)(v85 + 16);
          ++v74;
          v84 -= 8;
        }
        while (v84);
      }
      unsigned int v87 = (uint64_t *)v66[1];
      if (v87)
      {
        do
        {
          uint64_t v88 = (uint64_t **)v87;
          unsigned int v87 = (uint64_t *)*v87;
        }
        while (v87);
      }
      else
      {
        do
        {
          uint64_t v88 = (uint64_t **)v66[2];
          BOOL v9 = *v88 == v66;
          uint64_t v66 = (uint64_t *)v88;
        }
        while (!v9);
      }
      uint64_t v66 = (uint64_t *)v88;
    }
    while (v88 != &v145);
    uint64_t v89 = (uint64_t *)v144;
    if (v144 != &v145)
    {
      do
      {
        sub_1CC1502A4((uint64_t)&v144, v89[4], (uint64_t)(v89 + 5));
        int v90 = (uint64_t *)v89[1];
        if (v90)
        {
          do
          {
            uint64_t v91 = (uint64_t **)v90;
            int v90 = (uint64_t *)*v90;
          }
          while (v90);
        }
        else
        {
          do
          {
            uint64_t v91 = (uint64_t **)v89[2];
            BOOL v9 = *v91 == v89;
            uint64_t v89 = (uint64_t *)v91;
          }
          while (!v9);
        }
        uint64_t v89 = (uint64_t *)v91;
      }
      while (v91 != &v145);
    }
  }
  for (uint64_t i = v157; __p != v157; uint64_t i = v157)
  {
    unint64_t v93 = *((void *)i - 1);
    v139.n128_u64[0] = 0;
    if (sub_1CC091A20(v153, v155, v93, &v139))
    {
      *(void *)v139.n128_u64[0] = -8192;
      int32x2_t v154 = vadd_s32(v154, (int32x2_t)0x1FFFFFFFFLL);
    }
    uint64_t v94 = v145;
    v157 -= 8;
    if (!v145) {
      goto LABEL_188;
    }
    uint64_t v95 = &v145;
    do
    {
      v96 = v95;
      uint64_t v97 = v94;
      unint64_t v98 = v94[4];
      if (v98 >= v93) {
        uint64_t v95 = (uint64_t **)v94;
      }
      else {
        ++v94;
      }
      uint64_t v94 = (uint64_t *)*v94;
    }
    while (v94);
    if (v95 == &v145) {
      goto LABEL_188;
    }
    if (v98 >= v93) {
      v96 = (uint64_t **)v97;
    }
    if ((unint64_t)v96[4] > v93) {
LABEL_188:
    }
      uint64_t v95 = &v145;
    sub_1CC1502A4((uint64_t)&v144, v93, (uint64_t)(v95 + 5));
  }
  if (v164 != (__n128 *)&v165.n128_i8[8]) {
    free(v164);
  }
  uint64_t v99 = (uint64_t *)v144;
  v100 = this;
  if (v144 != &v145)
  {
    while (1)
    {
      __n128 v139 = 0uLL;
      v140 = 0;
      unint64_t v101 = v99[10];
      if (v101)
      {
        if (v101 >> 58) {
          abort();
        }
        v167 = (uint64_t *)&v140;
        uint64_t v116 = (char *)operator new(v101 << 6);
        sub_1CC14C4EC((uint64_t)&v140, 0, 0, 0, 0, (uint64_t)v116, (uint64_t)v116);
        __n128 v117 = v139;
        v139.n128_u64[0] = v118;
        v139.n128_u64[1] = (unint64_t)v116;
        __n128 v165 = v117;
        unsigned int v119 = v140;
        v140 = (uint64_t **)&v116[64 * v101];
        v166 = v119;
        v164 = (__n128 *)v117.n128_u64[0];
        sub_1CD4CA25C((uint64_t)&v164);
      }
      unsigned int v102 = (uint64_t *)v99[8];
      if (v102 != v99 + 9) {
        break;
      }
LABEL_226:
      uint64_t v113 = v99[4];
      __n128 v137 = v139;
      v138 = v140;
      v140 = 0;
      __n128 v139 = 0uLL;
      sub_1CC1477C4(v113, &v137);
      v164 = &v137;
      sub_1CC0C4A94((void ***)&v164);
      v164 = &v139;
      sub_1CC0C4A94((void ***)&v164);
      int v114 = (uint64_t *)v99[1];
      v100 = this;
      if (v114)
      {
        do
        {
          unsigned int v115 = (uint64_t **)v114;
          int v114 = (uint64_t *)*v114;
        }
        while (v114);
      }
      else
      {
        do
        {
          unsigned int v115 = (uint64_t **)v99[2];
          BOOL v9 = *v115 == v99;
          uint64_t v99 = (uint64_t *)v115;
        }
        while (!v9);
      }
      uint64_t v99 = (uint64_t *)v115;
      if (v115 == &v145) {
        goto LABEL_235;
      }
    }
    while (1)
    {
      uint64_t v103 = (const void **)(v102 + 5);
      uint64_t v104 = (const void **)(v102 + 7);
      uint64_t v105 = *((unsigned int *)v102 + 12);
      if (v105 > 0x40)
      {
        if (memcmp(*v103, *v104, ((unint64_t)(v105 + 63) >> 3) & 0x3FFFFFF8)
          || llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(v102 + 5)) != v105)
        {
          goto LABEL_197;
        }
      }
      else if (*v103 != *v104 {
             || (v105 ? (BOOL v109 = *v103 == (const void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v105)) : (BOOL v109 = 1), !v109))
      }
      {
LABEL_197:
        sub_1CD4C91FC((uint64_t *)&v139);
        unint64_t v106 = v139.n128_u64[1];
        *(void *)(v139.n128_u64[1] - 64) = *((unsigned int *)v102 + 8);
        if (*(_DWORD *)(v106 - 48) > 0x40u || *((_DWORD *)v102 + 12) > 0x40u)
        {
          if ((const void **)(v106 - 56) != v103)
          {
            unsigned int v135 = (void **)(v106 - 56);
            llvm::APInt::reallocate(v106 - 56, *((_DWORD *)v102 + 12));
            uint64_t v110 = *(unsigned int *)(v106 - 48);
            if (v110 <= 0x40) {
              *unsigned int v135 = (void *)*v103;
            }
            else {
              memcpy(*v135, *v103, ((unint64_t)(v110 + 63) >> 3) & 0x3FFFFFF8);
            }
          }
        }
        else
        {
          *(void *)(v106 - 56) = v102[5];
          *(_DWORD *)(v106 - 48) = *((_DWORD *)v102 + 12);
        }
        if (*(_DWORD *)(v106 - 32) > 0x40u || *((_DWORD *)v102 + 16) > 0x40u)
        {
          unint64_t v111 = (void **)(v106 - 40);
          if ((const void **)(v106 - 40) != v104)
          {
            llvm::APInt::reallocate(v106 - 40, *((_DWORD *)v102 + 16));
            uint64_t v112 = *(unsigned int *)(v106 - 32);
            if (v112 <= 0x40) {
              *unint64_t v111 = (void *)*v104;
            }
            else {
              memcpy(*v111, *v104, ((unint64_t)(v112 + 63) >> 3) & 0x3FFFFFF8);
            }
          }
        }
        else
        {
          *(void *)(v106 - 40) = v102[7];
          *(_DWORD *)(v106 - 32) = *((_DWORD *)v102 + 16);
        }
      }
      int v107 = (uint64_t *)v102[1];
      if (v107)
      {
        do
        {
          unsigned int v108 = v107;
          int v107 = (uint64_t *)*v107;
        }
        while (v107);
      }
      else
      {
        do
        {
          unsigned int v108 = (uint64_t *)v102[2];
          BOOL v9 = *v108 == (void)v102;
          unsigned int v102 = v108;
        }
        while (!v9);
      }
      unsigned int v102 = v108;
      if (v108 == v99 + 9) {
        goto LABEL_226;
      }
    }
  }
LABEL_235:
  if (byte_1EBD0C080 & 1 | (byte_1EA61F098 != 0))
  {
    unsigned int v120 = *(char **)v100;
    if (*(char **)v100 != v128)
    {
      do
      {
        unsigned int v121 = (char *)*((void *)v120 + 1);
        if (v121)
        {
          do
          {
            int v122 = v121;
            unsigned int v121 = *(char **)v121;
          }
          while (v121);
        }
        else
        {
          do
          {
            int v122 = (char *)*((void *)v120 + 2);
            BOOL v9 = *(void *)v122 == (void)v120;
            unsigned int v120 = v122;
          }
          while (!v9);
        }
        unsigned int v120 = v122;
      }
      while (v122 != v128);
    }
  }
  if (__p)
  {
    uint64_t v157 = (char *)__p;
    operator delete(__p);
  }
  MEMORY[0x1D25D9CD0](v153, 8);
  uint64_t v123 = v151[0];
  if (v152)
  {
    uint64_t v124 = 56 * v152;
    uint64_t v125 = v151[0] + 24;
    do
    {
      if ((*(void *)(v125 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v126 = *(void **)(v125 - 16);
        if ((void *)v125 != v126) {
          free(v126);
        }
      }
      v125 += 56;
      v124 -= 56;
    }
    while (v124);
    uint64_t v123 = v151[0];
  }
  MEMORY[0x1D25D9CD0](v123, 8);
  if (v150 >= 0x41 && v149) {
    MEMORY[0x1D25D9CB0](v149, 0x1000C8000313F17);
  }
  if (v148 >= 0x41)
  {
    if (v147) {
      MEMORY[0x1D25D9CB0](v147, 0x1000C8000313F17);
    }
  }
  sub_1CC14BE8C(v145);
  sub_1CC14BE8C(v162);
}

uint64_t sub_1CC147660(unint64_t a1, void *__s2, size_t __n)
{
  if (a1 < 8) {
    return 0;
  }
  uint64_t v4 = *(uint64_t **)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  uint64_t v3 = *(uint64_t **)((a1 & 0xFFFFFFFFFFFFFFF8) + 32);
  uint64_t v5 = (char *)v3 - (char *)v4;
  if (v3 == v4)
  {
    uint64_t v10 = 0;
    goto LABEL_29;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 8 * (v5 >> 3);
  while (1)
  {
    uint64_t v10 = *v4;
    __int16 v11 = *(_WORD *)(*v4 + 12);
    if ((v11 & 0x80) == 0) {
      goto LABEL_14;
    }
    int v12 = *(_DWORD *)(v10 + 8);
    if (!v12)
    {
      uint64_t v13 = *(void *)(v10 + 72);
      if (!v13) {
        goto LABEL_14;
      }
      int v12 = *(_DWORD *)(v13 + 8);
    }
    if (v12 != 1) {
      goto LABEL_14;
    }
    unsigned int v14 = v11 & 0xF;
    if (v14 - 7 <= 1) {
      break;
    }
    if (v14 && (v14 & 0xE) != 4)
    {
      BOOL v17 = v14 < 4 && v5 == 8;
      if (v17) {
        uint64_t v16 = *v4;
      }
      else {
        uint64_t v16 = v8;
      }
    }
    else
    {
      uint64_t v16 = *v4;
      if (v8) {
        return 0;
      }
    }
LABEL_15:
    ++v4;
    uint64_t v8 = v16;
    uint64_t v10 = v16;
    v9 -= 8;
    if (!v9) {
      goto LABEL_29;
    }
  }
  if (*(void *)(v10 + 32) != __n)
  {
LABEL_14:
    uint64_t v16 = v8;
    goto LABEL_15;
  }
  if (__n)
  {
    int v15 = memcmp(*(const void **)(v10 + 24), __s2, __n);
    uint64_t v16 = v8;
    if (v15) {
      goto LABEL_15;
    }
  }
LABEL_29:
  while (v10 && (~*(unsigned __int16 *)(v10 + 12) & 0x180) == 0)
  {
    int v19 = *(_DWORD *)(v10 + 8);
    if (v19)
    {
      if (v19 == 1) {
        return v10;
      }
      else {
        return 0;
      }
    }
    uint64_t result = 0;
    uint64_t v20 = *(void *)(v10 + 72);
    if (v20)
    {
      BOOL v17 = v20 == v10;
      uint64_t v10 = *(void *)(v10 + 72);
      if (!v17) {
        continue;
      }
    }
    return result;
  }
  return 0;
}

__n128 sub_1CC1477C4(uint64_t a1, __n128 *a2)
{
  uint64_t v2 = *(void *)(a1 + 112);
  if (a2->n128_u64[0] == a2->n128_u64[1])
  {
    *(void *)(a1 + 112) = 0;
    if (v2)
    {
      uint64_t v5 = (void **)v2;
      sub_1CC0C4A94(&v5);
      MEMORY[0x1D25D9CE0](v2, 0x20C40960023A9);
    }
  }
  else
  {
    if (!v2) {
      operator new();
    }
    sub_1CD4AEBA8(*(void ***)(a1 + 112));
    __n128 result = *a2;
    *(__n128 *)uint64_t v2 = *a2;
    *(void *)(v2 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
  }
  return result;
}

void sub_1CC1478AC(llvm *a1, llvm::PassRegistry *a2)
{
}

void sub_1CC147950(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v3 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC8140, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC1478AC;
    v5[1] = &v3;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCC8140, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  llvm::initializeImmutableModuleSummaryIndexWrapperPassPass(this, a2);
  operator new();
}

void sub_1CC147A54(uint64_t a1, const llvm::AllocaInst *a2, uint64_t a3, llvm::StackLifetime *this)
{
  uint64_t v5 = a3;
  unint64_t v6 = (unint64_t)a2;
  v162[8] = *MEMORY[0x1E4F143B8];
  unsigned int v144 = v148;
  unsigned int v145 = v148;
  uint64_t v146 = 16;
  if (*((unsigned char *)a2 + 16) == 59) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = 0;
  }
  __n128 v139 = (unsigned int *)(a1 + 32);
  int v147 = 0;
  __n128 v159 = v162;
  uint64_t v138 = a3 + 64;
  unsigned int v9 = 1;
  unsigned int v161 = 8;
  v162[0] = a2;
  do
  {
    uint64_t v10 = v159[--v9];
    unsigned int v160 = v9;
    __int16 v11 = *(unint64_t **)(v10 + 8);
    if (!v11) {
      continue;
    }
    do
    {
      unint64_t v12 = v11[3];
      if (!llvm::StackLifetime::isReachable(this, (const llvm::Instruction *)v12)) {
        goto LABEL_203;
      }
      unsigned int v13 = *(unsigned __int8 *)(v12 + 16);
      if (v13 > 0x3C)
      {
        if (v13 != 61)
        {
          if (v13 != 84)
          {
            if (v13 == 88) {
              goto LABEL_203;
            }
            goto LABEL_16;
          }
          goto LABEL_26;
        }
        int v27 = *(_DWORD *)(v12 + 20);
        if ((v27 & 0x40000000) != 0) {
          unint64_t v28 = *(void **)(v12 - 8);
        }
        else {
          unint64_t v28 = (void *)(v12 - 32 * (v27 & 0x7FFFFFF));
        }
        if (v10 == *v28) {
          goto LABEL_202;
        }
        if (v8)
        {
          if (!llvm::StackLifetime::isAliveAfter(this, v8, (const llvm::Instruction *)v12)) {
            goto LABEL_202;
          }
          int v27 = *(_DWORD *)(v12 + 20);
          if ((v27 & 0x40000000) != 0) {
            goto LABEL_160;
          }
LABEL_41:
          unsigned int v29 = (uint64_t **)(v12 - 32 * (v27 & 0x7FFFFFF));
        }
        else
        {
          if ((v27 & 0x40000000) == 0) {
            goto LABEL_41;
          }
LABEL_160:
          unsigned int v29 = *(uint64_t ***)(v12 - 8);
        }
        uint64_t v14 = *(void *)(a1 + 8);
        uint64_t v15 = **v29;
LABEL_162:
        unint64_t v95 = (unint64_t)(sub_1CB83544C(v14, v15) + 7) >> 3;
        BOOL v97 = v96 == 1;
        sub_1CC14903C((uint64_t)&v155, a1, *v11, v6, v95, v97);
        char v98 = sub_1CC149408(a1, v11, v8, v95, v97);
LABEL_163:
        sub_1CC148F34(v5, v12, (unsigned int *)&v155, v98);
        if (v158 >= 0x41 && v157) {
          MEMORY[0x1D25D9CB0](v157, 0x1000C8000313F17);
        }
        if (v156 >= 0x41) {
          goto LABEL_165;
        }
        goto LABEL_203;
      }
      if (v13 == 29) {
        goto LABEL_202;
      }
      if (v13 != 33)
      {
        if (v13 == 60)
        {
          if (v8 && (llvm::StackLifetime::isAliveAfter(this, v8, (const llvm::Instruction *)v12) & 1) == 0) {
            goto LABEL_202;
          }
          uint64_t v14 = *(void *)(a1 + 8);
          uint64_t v15 = *(void *)v12;
          goto LABEL_162;
        }
LABEL_16:
        uint64_t v16 = v145;
        uint64_t v17 = HIDWORD(v146);
        if (v145 == v144)
        {
          if (HIDWORD(v146))
          {
            uint64_t v18 = 0;
            uint64_t v19 = 8 * HIDWORD(v146);
            uint64_t v20 = (unint64_t *)v145;
            while (*v20 != v12)
            {
              if (*v20 == -2) {
                uint64_t v18 = v20;
              }
              ++v20;
              v19 -= 8;
              if (!v19)
              {
                if (!v18) {
                  goto LABEL_24;
                }
                *uint64_t v18 = v12;
                --v147;
                goto LABEL_83;
              }
            }
            goto LABEL_203;
          }
LABEL_24:
          unsigned int v21 = v146;
          if (HIDWORD(v146) < v146)
          {
            ++HIDWORD(v146);
            *(void *)&v145[8 * v17] = v12;
LABEL_83:
            if (v160 >= (unint64_t)v161) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v159[v160++] = v12;
            goto LABEL_203;
          }
        }
        else
        {
          unsigned int v21 = v146;
        }
        if (3 * v21 <= 4 * (HIDWORD(v146) - v147))
        {
          if (v21 >= 0x40) {
            v21 *= 2;
          }
          else {
            unsigned int v21 = 128;
          }
        }
        else if (v21 - HIDWORD(v146) >= v21 >> 3)
        {
          goto LABEL_64;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v144, v21);
        unsigned int v21 = v146;
        uint64_t v16 = v145;
LABEL_64:
        unsigned int v38 = v21 - 1;
        unsigned int v39 = (v21 - 1) & ((v12 >> 4) ^ (v12 >> 9));
        BOOL v40 = &v16[8 * v39];
        unint64_t v41 = *(void *)v40;
        if (*(void *)v40 == -1)
        {
          unint64_t v42 = 0;
LABEL_76:
          if (v42) {
            unsigned int v46 = v42;
          }
          else {
            unsigned int v46 = (unint64_t *)v40;
          }
          if (*v46 != v12)
          {
            if (*v46 == -2) {
              --v147;
            }
            else {
              ++HIDWORD(v146);
            }
            *unsigned int v46 = v12;
            goto LABEL_83;
          }
        }
        else
        {
          unint64_t v42 = 0;
          int v43 = 1;
          while (v41 != v12)
          {
            if (v42) {
              BOOL v44 = 0;
            }
            else {
              BOOL v44 = v41 == -2;
            }
            if (v44) {
              unint64_t v42 = (unint64_t *)v40;
            }
            unsigned int v45 = v39 + v43++;
            unsigned int v39 = v45 & v38;
            BOOL v40 = &v16[8 * (v45 & v38)];
            unint64_t v41 = *(void *)v40;
            if (*(void *)v40 == -1) {
              goto LABEL_76;
            }
          }
        }
        goto LABEL_203;
      }
LABEL_26:
      if (llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)v12)) {
        goto LABEL_203;
      }
      if (v8 && (llvm::StackLifetime::isAliveAfter(this, v8, (const llvm::Instruction *)v12) & 1) == 0)
      {
LABEL_202:
        sub_1CC148F34(v5, v12, v139, 0);
        goto LABEL_203;
      }
      if (sub_1CBFB3AB0(v12))
      {
        unsigned int v22 = *(_DWORD *)(*(void *)(v12 - 32) + 36) - 194;
        if (v22 <= 3 && v22 != 1)
        {
          size_t v24 = (uint64_t *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF));
          unint64_t v25 = *v11;
          if (v24[4] != *v11)
          {
            uint64_t v26 = *v24;
            goto LABEL_86;
          }
          goto LABEL_89;
        }
        uint64_t v26 = *(void *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF));
        unint64_t v25 = *v11;
LABEL_86:
        if (v26 != v25)
        {
          unsigned int v47 = *(_DWORD *)(a1 + 24);
          unsigned int v141 = v47;
          if (v47 >= 0x41) {
            operator new[]();
          }
          unsigned int v143 = v47;
          __src = 0;
          uint64_t v142 = 0;
          goto LABEL_115;
        }
LABEL_89:
        uint64_t v48 = llvm::IntegerType::get(****(llvm::IntegerType *****)(a1 + 16), (llvm::LLVMContext *)*(unsigned int *)(a1 + 24));
        unint64_t v49 = *(void *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) + 64);
        if ((*(_DWORD *)(*(void *)v49 + 8) & 0xFD) == 0xD)
        {
          int v50 = (llvm::Type *)v48;
          uint64_t v51 = *(void *)(a1 + 16);
          uint64_t v52 = *(void *)(v51 + 104);
          unsigned int v53 = *(_DWORD *)(v51 + 120);
          if (!v53) {
            goto LABEL_99;
          }
          unsigned int v54 = v53 - 1;
          unsigned int v55 = (v53 - 1) & ((v49 >> 4) ^ (v49 >> 9));
          uint64_t v56 = v52 + 48 * v55;
          uint64_t v57 = *(void *)(v56 + 24);
          if (v57 != v49)
          {
            int v58 = 1;
            while (v57 != -4096)
            {
              unsigned int v59 = v55 + v58++;
              unsigned int v55 = v59 & v54;
              uint64_t v56 = v52 + 48 * (v59 & v54);
              uint64_t v57 = *(void *)(v56 + 24);
              if (v57 == v49) {
                goto LABEL_100;
              }
            }
LABEL_99:
            uint64_t v56 = v52 + 48 * v53;
          }
LABEL_100:
          if (v56 == v52 + 48 * v53 || (SCEVIter = *(llvm::detail::IEEEFloat ***)(v56 + 40)) == 0) {
            SCEVIter = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::createSCEVIter(*(llvm::ScalarEvolution **)(a1 + 16), v49);
          }
          TruncateOrZeroExtend = llvm::ScalarEvolution::getTruncateOrZeroExtend((llvm::ScalarEvolution *)v51, SCEVIter, v50, 0);
          uint64_t RangeRef = llvm::ScalarEvolution::getRangeRef(*(void *)(a1 + 16), (uint64_t)TruncateOrZeroExtend, 1, 0);
          unsigned int v156 = *(_DWORD *)(RangeRef + 8);
          if (v156 > 0x40) {
            operator new[]();
          }
          int v155 = *(void **)RangeRef;
          unsigned int v63 = *(_DWORD *)(RangeRef + 24);
          unsigned int v158 = v63;
          if (v63 > 0x40) {
            operator new[]();
          }
          uint64_t v64 = *(void *)(RangeRef + 16);
          uint64_t v157 = v64;
          unsigned int v65 = v63 - 1;
          BOOL v66 = v63 >= 0x41;
          size_t v67 = &v157;
          if (v66) {
            size_t v67 = (uint64_t *)(v64 + 8 * (v65 >> 6));
          }
          if ((((unint64_t)*v67 >> v65) & 1) != 0 || sub_1CC149EEC((llvm::APInt *)&v155))
          {
            unsigned int v141 = *(_DWORD *)(a1 + 40);
            if (v141 > 0x40) {
              operator new[]();
            }
            __src = *(void **)v139;
            unsigned int v143 = *(_DWORD *)(a1 + 56);
            if (v143 > 0x40) {
              operator new[]();
            }
            uint64_t v142 = *(void *)(a1 + 48);
          }
          else
          {
            llvm::ConstantRange::sextOrTrunc((unint64_t *)&v155, *(_DWORD *)(a1 + 24), (uint64_t)&v151);
            if (v156 >= 0x41 && v155) {
              MEMORY[0x1D25D9CB0](v155, 0x1000C8000313F17);
            }
            int v155 = (void *)v151;
            unsigned int v156 = v152;
            unsigned int v152 = 0;
            if (v158 >= 0x41 && v157)
            {
              unint64_t v120 = v6;
              MEMORY[0x1D25D9CB0](v157, 0x1000C8000313F17);
              uint64_t v157 = v153;
              unsigned int v158 = v154;
              unsigned int v154 = 0;
              if (v152 >= 0x41 && v151) {
                MEMORY[0x1D25D9CB0](v151, 0x1000C8000313F17);
              }
            }
            else
            {
              unint64_t v120 = v6;
              uint64_t v157 = v153;
              unsigned int v158 = v154;
            }
            unsigned int v121 = *(_DWORD *)(a1 + 24);
            if (v121 >= 0x41) {
              operator new[]();
            }
            unsigned int v150 = v158;
            if (v158 > 0x40) {
              operator new[]();
            }
            uint64_t v149 = v157;
            llvm::APInt::operator-=((uint64_t)&v149, 1uLL);
            unsigned int v122 = v150;
            unsigned int v150 = 0;
            unsigned int v152 = v121;
            unint64_t v151 = 0;
            unsigned int v154 = v122;
            uint64_t v153 = v149;
            unint64_t v6 = v120;
            sub_1CC149B48((uint64_t)&__src, a1, *v11, v120, (uint64_t)&v151);
            if (v154 >= 0x41 && v153) {
              MEMORY[0x1D25D9CB0](v153, 0x1000C8000313F17);
            }
            if (v152 >= 0x41 && v151) {
              MEMORY[0x1D25D9CB0](v151, 0x1000C8000313F17);
            }
          }
          if (v158 >= 0x41 && v157) {
            MEMORY[0x1D25D9CB0](v157, 0x1000C8000313F17);
          }
          if (v156 >= 0x41 && v155) {
            MEMORY[0x1D25D9CB0](v155, 0x1000C8000313F17);
          }
        }
        else
        {
          unsigned int v141 = *(_DWORD *)(a1 + 40);
          if (v141 > 0x40) {
            operator new[]();
          }
          __src = *(void **)v139;
          unsigned int v143 = *(_DWORD *)(a1 + 56);
          if (v143 > 0x40) {
            operator new[]();
          }
          uint64_t v142 = *(void *)(a1 + 48);
        }
LABEL_115:
        unsigned int v68 = *(_DWORD *)(*(void *)(v12 - 32) + 36) - 194;
        if (v68 <= 3 && v68 != 1)
        {
          uint64_t v70 = *(_DWORD *)(v12 + 20) & 0x7FFFFFF;
          uint64_t v71 = -v70;
          uint64_t v72 = (void *)(v12 - 32 * v70);
          unint64_t v73 = v72[4];
          if (v73 == *v11) {
            goto LABEL_143;
          }
          if (*v72 == *v11)
          {
            unint64_t v73 = *v11;
            goto LABEL_143;
          }
LABEL_123:
          char v75 = 1;
LABEL_154:
          sub_1CC148F34(v5, v12, (unsigned int *)&__src, v75);
          if (v143 >= 0x41 && v142) {
            MEMORY[0x1D25D9CB0](v142, 0x1000C8000313F17);
          }
          if (v141 >= 0x41)
          {
            uint64_t v94 = __src;
            if (__src) {
              goto LABEL_166;
            }
          }
          goto LABEL_203;
        }
        uint64_t v74 = *(_DWORD *)(v12 + 20) & 0x7FFFFFF;
        unint64_t v73 = *(void *)(v12 - 32 * v74);
        if (v73 != *v11) {
          goto LABEL_123;
        }
        uint64_t v71 = -v74;
LABEL_143:
        unint64_t v84 = *(void *)(v12 + 32 * v71 + 64);
        uint64_t v85 = *(void *)(a1 + 16);
        uint64_t v86 = *(void *)(v85 + 104);
        unsigned int v87 = *(_DWORD *)(v85 + 120);
        if (v87)
        {
          unsigned int v88 = (v87 - 1) & ((v84 >> 4) ^ (v84 >> 9));
          uint64_t v89 = v86 + 48 * v88;
          uint64_t v90 = *(void *)(v89 + 24);
          if (v90 != v84)
          {
            int v91 = 1;
            while (v90 != -4096)
            {
              unsigned int v92 = v88 + v91++;
              unsigned int v88 = v92 & (v87 - 1);
              uint64_t v89 = v86 + 48 * v88;
              uint64_t v90 = *(void *)(v89 + 24);
              if (v90 == v84) {
                goto LABEL_150;
              }
            }
            goto LABEL_149;
          }
        }
        else
        {
LABEL_149:
          uint64_t v89 = v86 + 48 * v87;
        }
LABEL_150:
        if (v89 == v86 + 48 * v87 || (uint64_t v93 = *(void *)(v89 + 40)) == 0)
        {
          uint64_t v93 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v85, v84);
          unint64_t v73 = *v11;
        }
        char v75 = sub_1CC14A08C(a1, v73, v11[3], v8, v93);
        goto LABEL_154;
      }
      uint64_t v30 = *(void *)(v12 + 64);
      if (v30 && (*(unsigned char *)(v30 + 29) & 0x40) != 0)
      {
        uint64_t v128 = *(unsigned int *)(v30 + 8);
        if (v128)
        {
          uint64_t v129 = v30 + 40;
          int v130 = -1;
          while (!*(void *)v129 || (*(unsigned char *)(*(void *)v129 + 17) & 0x40) == 0)
          {
            ++v130;
            v129 += 8;
            if (!--v128) {
              goto LABEL_267;
            }
          }
          goto LABEL_268;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(v12 - 32);
        if (!v31) {
          goto LABEL_50;
        }
        if (*(unsigned char *)(v31 + 16) || *(void *)(v31 + 24) != *(void *)(v12 + 72)) {
          goto LABEL_49;
        }
        uint64_t v31 = *(void *)(v31 + 112);
        if (!v31) {
          goto LABEL_50;
        }
        if ((*(unsigned char *)(v31 + 29) & 0x40) == 0)
        {
LABEL_49:
          uint64_t v31 = 0;
          goto LABEL_50;
        }
        uint64_t v131 = *(unsigned int *)(v31 + 8);
        if (v131)
        {
          uint64_t v132 = v31 + 40;
          int v130 = -1;
          while (!*(void *)v132 || (*(unsigned char *)(*(void *)v132 + 17) & 0x40) == 0)
          {
            ++v130;
            v132 += 8;
            if (!--v131) {
              goto LABEL_267;
            }
          }
          goto LABEL_268;
        }
      }
LABEL_267:
      int v130 = 0;
LABEL_268:
      uint64_t v31 = *(void *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) + 32 * (v130 - 1));
LABEL_50:
      if (v31 != v10) {
        goto LABEL_178;
      }
      uint64_t v32 = v145;
      uint64_t v33 = HIDWORD(v146);
      if (v145 == v144)
      {
        if (HIDWORD(v146))
        {
          uint64_t v34 = 0;
          uint64_t v35 = 8 * HIDWORD(v146);
          unint64_t v36 = (unint64_t *)v145;
          while (*v36 != v12)
          {
            if (*v36 == -2) {
              uint64_t v34 = v36;
            }
            ++v36;
            v35 -= 8;
            if (!v35)
            {
              if (!v34) {
                goto LABEL_59;
              }
              *uint64_t v34 = v12;
              --v147;
              goto LABEL_176;
            }
          }
          goto LABEL_178;
        }
LABEL_59:
        unsigned int v37 = v146;
        if (HIDWORD(v146) < v146)
        {
          ++HIDWORD(v146);
          *(void *)&v145[8 * v33] = v12;
LABEL_176:
          if (v160 >= (unint64_t)v161) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v159[v160++] = v12;
          goto LABEL_178;
        }
      }
      else
      {
        unsigned int v37 = v146;
      }
      if (3 * v37 <= 4 * (HIDWORD(v146) - v147))
      {
        if (v37 >= 0x40) {
          v37 *= 2;
        }
        else {
          unsigned int v37 = 128;
        }
      }
      else if (v37 - HIDWORD(v146) >= v37 >> 3)
      {
        goto LABEL_127;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v144, v37);
      unsigned int v37 = v146;
      uint64_t v32 = v145;
LABEL_127:
      unsigned int v76 = v37 - 1;
      unsigned int v77 = (v37 - 1) & ((v12 >> 4) ^ (v12 >> 9));
      uint64_t v78 = &v32[8 * v77];
      uint64_t v79 = *(void *)v78;
      if (*(void *)v78 != -1)
      {
        uint64_t v80 = 0;
        int v81 = 1;
        while (v79 != v12)
        {
          if (v80) {
            BOOL v82 = 0;
          }
          else {
            BOOL v82 = v79 == -2;
          }
          if (v82) {
            uint64_t v80 = (unint64_t *)v78;
          }
          unsigned int v83 = v77 + v81++;
          unsigned int v77 = v83 & v76;
          uint64_t v78 = &v32[8 * (v83 & v76)];
          uint64_t v79 = *(void *)v78;
          if (*(void *)v78 == -1) {
            goto LABEL_169;
          }
        }
        goto LABEL_178;
      }
      uint64_t v80 = 0;
LABEL_169:
      if (v80) {
        uint64_t v99 = v80;
      }
      else {
        uint64_t v99 = (unint64_t *)v78;
      }
      if (*v99 != v12)
      {
        if (*v99 == -2) {
          --v147;
        }
        else {
          ++HIDWORD(v146);
        }
        *uint64_t v99 = v12;
        goto LABEL_176;
      }
LABEL_178:
      int v100 = *(_DWORD *)(v12 + 20);
      unint64_t v101 = v12 - 32 * (v100 & 0x7FFFFFF);
      if (v101 > (unint64_t)v11) {
        goto LABEL_202;
      }
      int v102 = *(unsigned __int8 *)(v12 + 16);
      if (v102 == 84)
      {
        uint64_t v103 = 0;
        if (v100 < 0) {
          goto LABEL_273;
        }
      }
      else
      {
        if (v102 == 39) {
          uint64_t v103 = (*(_DWORD *)(v12 + 80) + 1);
        }
        else {
          uint64_t v103 = 2;
        }
        if (v100 < 0)
        {
LABEL_273:
          uint64_t v133 = *(void *)(v101 - 8);
          if ((v133 & 0xFFFFFFFF0) != 0) {
            uint64_t v104 = (*(_DWORD *)(v101 - 12) - *(_DWORD *)(v101 - v133));
          }
          else {
            uint64_t v104 = 0;
          }
          goto LABEL_182;
        }
      }
      uint64_t v104 = 0;
LABEL_182:
      if (v12 - 32 * v103 - 32 * v104 - 32 <= (unint64_t)v11) {
        goto LABEL_202;
      }
      uint64_t v137 = v5;
      unint64_t v105 = (unint64_t)v11 - v101;
      unint64_t v106 = ((unint64_t)v11 - v101) >> 5;
      if (llvm::CallBase::paramHasAttr(v12, v106, 69))
      {
        uint64_t v123 = *(void *)(a1 + 8);
        uint64_t v124 = sub_1CD49471C(v12, v106);
        unint64_t v125 = (unint64_t)(sub_1CB83544C(v123, v124) + 7) >> 3;
        LODWORD(v123) = v126 == 1;
        sub_1CC14903C((uint64_t)&v155, a1, *v11, v6, v125, v123);
        char v98 = sub_1CC149408(a1, v11, v8, v125, v123);
        uint64_t v5 = v137;
        goto LABEL_163;
      }
      int v107 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v12 - 32));
      if (v107 && (unsigned int v108 = v107, *((unsigned __int8 *)v107 + 16) < 4u))
      {
        unint64_t v136 = v6;
        sub_1CC14949C((uint64_t)&v155, a1, *v11, v6);
        unint64_t v109 = (v105 >> 5);
        uint64_t v110 = v138;
LABEL_187:
        while (1)
        {
          unint64_t v111 = *(uint64_t **)v110;
          uint64_t v112 = (uint64_t **)v110;
          if (!*(void *)v110) {
            break;
          }
          while (1)
          {
            uint64_t v110 = (uint64_t)v111;
            unint64_t v113 = v111[5];
            if (v109 < v113) {
              break;
            }
            if (v113 >= v109)
            {
              unint64_t v114 = *(void *)(v110 + 32);
              if ((unint64_t)v108 < v114) {
                goto LABEL_187;
              }
              if (v114 >= (unint64_t)v108)
              {
                unsigned int v127 = (void *)(v110 + 48);
                llvm::ConstantRange::unionWith(v110 + 48, (unsigned int *)&v155, 0, (uint64_t)&v151);
                if (*(_DWORD *)(v110 + 56) >= 0x41u && *v127) {
                  MEMORY[0x1D25D9CB0](*v127, 0x1000C8000313F17);
                }
                *(void *)(v110 + 48) = v151;
                *(_DWORD *)(v110 + 56) = v152;
                unsigned int v152 = 0;
                unint64_t v6 = v136;
                uint64_t v5 = v137;
                if (*(_DWORD *)(v110 + 72) >= 0x41u && (uint64_t v134 = *(void *)(v110 + 64)) != 0)
                {
                  MEMORY[0x1D25D9CB0](v134, 0x1000C8000313F17);
                  unsigned int v135 = v152;
                  *(void *)(v110 + 64) = v153;
                  *(_DWORD *)(v110 + 72) = v154;
                  unsigned int v154 = 0;
                  if (v135 >= 0x41 && v151) {
                    MEMORY[0x1D25D9CB0](v151, 0x1000C8000313F17);
                  }
                }
                else
                {
                  *(void *)(v110 + 64) = v153;
                  *(_DWORD *)(v110 + 72) = v154;
                }
                goto LABEL_199;
              }
            }
            unint64_t v111 = *(uint64_t **)(v110 + 8);
            if (!v111)
            {
              uint64_t v112 = (uint64_t **)(v110 + 8);
              goto LABEL_194;
            }
          }
        }
LABEL_194:
        unsigned int v115 = (uint64_t *)operator new(0x50uLL);
        uint64_t v116 = v115;
        v115[4] = (uint64_t)v108;
        v115[5] = v109;
        unsigned int v117 = v156;
        *((_DWORD *)v115 + 14) = v156;
        if (v117 > 0x40) {
          operator new[]();
        }
        v115[6] = (uint64_t)v155;
        uint64_t v5 = v137;
        unsigned int v118 = v158;
        *((_DWORD *)v115 + 18) = v158;
        if (v118 > 0x40) {
          operator new[]();
        }
        v115[8] = v157;
        *unsigned int v115 = 0;
        v115[1] = 0;
        v115[2] = v110;
        *uint64_t v112 = v115;
        uint64_t v119 = **(void **)(v137 + 56);
        if (v119)
        {
          *(void *)(v137 + 56) = v119;
          uint64_t v116 = *v112;
        }
        sub_1CB8358B8(*(uint64_t **)(v137 + 64), v116);
        ++*(void *)(v137 + 72);
        unint64_t v6 = v136;
LABEL_199:
        if (v158 >= 0x41 && v157) {
          MEMORY[0x1D25D9CB0](v157, 0x1000C8000313F17);
        }
        if (v156 >= 0x41)
        {
LABEL_165:
          uint64_t v94 = v155;
          if (!v155) {
            goto LABEL_203;
          }
LABEL_166:
          MEMORY[0x1D25D9CB0](v94, 0x1000C8000313F17);
        }
      }
      else
      {
        uint64_t v5 = v137;
        sub_1CC148F34(v137, v12, v139, 0);
      }
LABEL_203:
      __int16 v11 = (unint64_t *)v11[1];
    }
    while (v11);
    unsigned int v9 = v160;
  }
  while (v9);
  if (v159 != v162) {
    free(v159);
  }
  if (v145 != v144) {
    free(v145);
  }
}

uint64_t *sub_1CC148DE8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      sub_1CC148E90(*(void **)(v2 + 104));
      sub_1CD40B1BC(*(void **)(v2 + 80));
      if (*(_DWORD *)(v2 + 64) >= 0x41u)
      {
        uint64_t v5 = *(void *)(v2 + 56);
        if (v5) {
          MEMORY[0x1D25D9CB0](v5, 0x1000C8000313F17);
        }
      }
      if (*(_DWORD *)(v2 + 48) >= 0x41u)
      {
        uint64_t v4 = *(void *)(v2 + 40);
        if (v4) {
          MEMORY[0x1D25D9CB0](v4, 0x1000C8000313F17);
        }
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_1CC148E90(void *a1)
{
  if (a1)
  {
    sub_1CC148E90(*a1);
    sub_1CC148E90(a1[1]);
    if (*((_DWORD *)a1 + 18) >= 0x41u)
    {
      uint64_t v2 = a1[8];
      if (v2) {
        MEMORY[0x1D25D9CB0](v2, 0x1000C8000313F17);
      }
    }
    if (*((_DWORD *)a1 + 14) >= 0x41u)
    {
      uint64_t v3 = a1[6];
      if (v3) {
        MEMORY[0x1D25D9CB0](v3, 0x1000C8000313F17);
      }
    }
    operator delete(a1);
  }
}

uint64_t sub_1CC148F34(uint64_t a1, unint64_t a2, unsigned int *a3, char a4)
{
  if ((a4 & 1) == 0) {
    sub_1CD4C9324((uint64_t *)(a1 + 32), a2, a2);
  }
  uint64_t result = sub_1CC1499DC((uint64_t)&v8, a1, a3);
  if (*(_DWORD *)(a1 + 8) >= 0x41u)
  {
    uint64_t result = *(void *)a1;
    if (*(void *)a1) {
      uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
    }
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 8) = v9;
  unsigned int v9 = 0;
  if (*(_DWORD *)(a1 + 24) >= 0x41u && (uint64_t result = *(void *)(a1 + 16)) != 0)
  {
    uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
    unsigned int v7 = v9;
    *(void *)(a1 + 16) = v10;
    *(_DWORD *)(a1 + 24) = v11;
    int v11 = 0;
    if (v7 >= 0x41)
    {
      uint64_t result = v8;
      if (v8) {
        return MEMORY[0x1D25D9CB0](v8, 0x1000C8000313F17);
      }
    }
  }
  else
  {
    *(void *)(a1 + 16) = v10;
    *(_DWORD *)(a1 + 24) = v11;
  }
  return result;
}

uint64_t sub_1CC14903C(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  if (a6 == 1)
  {
    unsigned int v6 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(result + 8) = v6;
    if (v6 > 0x40) {
      operator new[]();
    }
    *(void *)uint64_t result = *(void *)(a2 + 32);
    unsigned int v7 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(result + 24) = v7;
    if (v7 > 0x40) {
      operator new[]();
    }
    *(void *)(result + 16) = *(void *)(a2 + 48);
  }
  else
  {
    unsigned int v8 = *(_DWORD *)(a2 + 24);
    if (v8 > 0x40) {
      operator new[]();
    }
    unint64_t v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    if (!v8) {
      unint64_t v9 = 0;
    }
    if (((v9 & a5) >> (v8 - 1)))
    {
      unsigned int v10 = *(_DWORD *)(a2 + 40);
      *(_DWORD *)(result + 8) = v10;
      if (v10 > 0x40) {
        operator new[]();
      }
      *(void *)uint64_t result = *(void *)(a2 + 32);
      unsigned int v11 = *(_DWORD *)(a2 + 56);
      *(_DWORD *)(result + 24) = v11;
      if (v11 > 0x40) {
        operator new[]();
      }
      *(void *)(result + 16) = *(void *)(a2 + 48);
    }
    else
    {
      if (*(_DWORD *)(a2 + 24) >= 0x41u) {
        operator new[]();
      }
      unsigned int v13 = *(_DWORD *)(a2 + 24);
      uint64_t v12 = 0;
      unsigned int v15 = v8;
      unint64_t v14 = v9 & a5;
      uint64_t result = sub_1CC149B48(result, a2, a3, a4, (uint64_t)&v12);
      if (v15 >= 0x41)
      {
        uint64_t result = v14;
        if (v14) {
          uint64_t result = MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
        }
      }
      if (v13 >= 0x41)
      {
        uint64_t result = v12;
        if (v12) {
          return MEMORY[0x1D25D9CB0](v12, 0x1000C8000313F17);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CC149408(uint64_t a1, unint64_t *a2, llvm::AllocaInst *a3, unint64_t a4, int a5)
{
  if (a5 == 1) {
    return 0;
  }
  unsigned int v11 = (llvm::Type *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a1 + 16), (llvm::LLVMContext *)*(unsigned int *)(a1 + 24));
  unint64_t Constant = llvm::ScalarEvolution::getConstant(*(llvm::ScalarEvolution **)(a1 + 16), v11, a4, 0);
  unint64_t v13 = *a2;
  uint64_t v14 = a2[3];
  return sub_1CC14A08C(a1, v13, v14, a3, Constant);
}

uint64_t sub_1CC14949C(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(*(void *)a3 + 8) & 0xFD) != 0xD || (*(_DWORD *)(*(void *)a4 + 8) & 0xFD) != 0xD)
  {
LABEL_24:
    unsigned int v31 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(v5 + 8) = v31;
    if (v31 > 0x40) {
      operator new[]();
    }
    *(void *)uint64_t v5 = *(void *)(a2 + 32);
    unsigned int v32 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(v5 + 24) = v32;
    if (v32 > 0x40) {
      operator new[]();
    }
    *(void *)(v5 + 16) = *(void *)(a2 + 48);
    return result;
  }
  unsigned int v8 = (llvm::Type *)llvm::PointerType::get((llvm::PointerType *)(*****(void *****)(a2 + 16) + 1912), 0);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(v9 + 104);
  unsigned int v11 = *(_DWORD *)(v9 + 120);
  if (!v11) {
    goto LABEL_9;
  }
  unsigned int v12 = v11 - 1;
  unsigned int v13 = (v11 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  uint64_t v14 = v10 + 48 * v13;
  uint64_t v15 = *(void *)(v14 + 24);
  if (v15 != a3)
  {
    int v16 = 1;
    while (v15 != -4096)
    {
      unsigned int v17 = v13 + v16++;
      unsigned int v13 = v17 & v12;
      uint64_t v14 = v10 + 48 * (v17 & v12);
      uint64_t v15 = *(void *)(v14 + 24);
      if (v15 == a3) {
        goto LABEL_10;
      }
    }
LABEL_9:
    uint64_t v14 = v10 + 48 * v11;
  }
LABEL_10:
  if (v14 == v10 + 48 * v11 || (SCEVIter = *(llvm::detail::IEEEFloat ***)(v14 + 40)) == 0) {
    SCEVIter = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::createSCEVIter(*(llvm::ScalarEvolution **)(a2 + 16), a3);
  }
  TruncateOrZeroExtend = llvm::ScalarEvolution::getTruncateOrZeroExtend((llvm::ScalarEvolution *)v9, SCEVIter, v8, 0);
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = *(void *)(v20 + 104);
  unsigned int v22 = *(_DWORD *)(v20 + 120);
  if (!v22)
  {
LABEL_19:
    uint64_t v25 = v21 + 48 * v22;
    goto LABEL_20;
  }
  unsigned int v23 = v22 - 1;
  unsigned int v24 = (v22 - 1) & ((a4 >> 4) ^ (a4 >> 9));
  uint64_t v25 = v21 + 48 * v24;
  uint64_t v26 = *(void *)(v25 + 24);
  if (v26 != a4)
  {
    int v27 = 1;
    while (v26 != -4096)
    {
      unsigned int v28 = v24 + v27++;
      unsigned int v24 = v28 & v23;
      uint64_t v25 = v21 + 48 * (v28 & v23);
      uint64_t v26 = *(void *)(v25 + 24);
      if (v26 == a4) {
        goto LABEL_20;
      }
    }
    goto LABEL_19;
  }
LABEL_20:
  if (v25 == v21 + 48 * v22 || (unsigned int v29 = *(llvm::detail::IEEEFloat ***)(v25 + 40)) == 0) {
    unsigned int v29 = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::createSCEVIter(*(llvm::ScalarEvolution **)(a2 + 16), a4);
  }
  uint64_t v30 = llvm::ScalarEvolution::getTruncateOrZeroExtend((llvm::ScalarEvolution *)v20, v29, v8, 0);
  uint64_t result = llvm::ScalarEvolution::getMinusSCEV(*(llvm::ScalarEvolution **)(a2 + 16), (llvm::SCEV *)TruncateOrZeroExtend, (const llvm::APInt *)v30, 0, 0);
  if (*(_WORD *)(result + 24) == 15) {
    goto LABEL_24;
  }
  uint64_t RangeRef = llvm::ScalarEvolution::getRangeRef(*(void *)(a2 + 16), result, 1, 0);
  unsigned int v37 = *(_DWORD *)(RangeRef + 8);
  if (v37 > 0x40) {
    operator new[]();
  }
  uint64_t v36 = *(void *)RangeRef;
  unsigned int v39 = *(_DWORD *)(RangeRef + 24);
  if (v39 > 0x40) {
    operator new[]();
  }
  uint64_t v38 = *(void *)(RangeRef + 16);
  uint64_t result = sub_1CC149EEC((llvm::APInt *)&v36);
  if (result)
  {
    unsigned int v34 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(v5 + 8) = v34;
    if (v34 > 0x40) {
      operator new[]();
    }
    *(void *)uint64_t v5 = *(void *)(a2 + 32);
    unsigned int v35 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(v5 + 24) = v35;
    if (v35 > 0x40) {
      operator new[]();
    }
    *(void *)(v5 + 16) = *(void *)(a2 + 48);
  }
  else
  {
    uint64_t result = (uint64_t)llvm::ConstantRange::sextOrTrunc((unint64_t *)&v36, *(_DWORD *)(a2 + 24), v5);
  }
  if (v39 >= 0x41)
  {
    uint64_t result = v38;
    if (v38) {
      uint64_t result = MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
    }
  }
  if (v37 >= 0x41)
  {
    uint64_t result = v36;
    if (v36) {
      return MEMORY[0x1D25D9CB0](v36, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t sub_1CC149928(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 8) >= 0x41u && *(void *)result)
  {
    uint64_t v3 = a2;
    uint64_t v5 = result;
    MEMORY[0x1D25D9CB0](*(void *)result, 0x1000C8000313F17);
    a2 = v3;
    uint64_t result = v5;
  }
  *(void *)uint64_t result = *(void *)a2;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  if (*(_DWORD *)(result + 24) >= 0x41u)
  {
    uint64_t v2 = *(void *)(result + 16);
    if (v2)
    {
      uint64_t v4 = a2;
      uint64_t v6 = result;
      MEMORY[0x1D25D9CB0](v2, 0x1000C8000313F17);
      a2 = v4;
      uint64_t result = v6;
    }
  }
  *(void *)(result + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  return result;
}

uint64_t sub_1CC1499DC(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  llvm::ConstantRange::unionWith(a2, a3, 0, a1);
  uint64_t result = llvm::ConstantRange::isSignWrappedSet((llvm::ConstantRange *)a1);
  if (result)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 8);
    if (v5 > 0x40) {
      operator new[]();
    }
    if (v5) {
      unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
    }
    else {
      unint64_t v6 = 0;
    }
    if (v5) {
      unint64_t v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
    }
    else {
      unint64_t v7 = 0;
    }
    *(void *)a1 = v7;
    *(_DWORD *)(a1 + 8) = v5;
    if (*(_DWORD *)(a1 + 24) >= 0x41u)
    {
      uint64_t result = *(void *)(a1 + 16);
      if (result) {
        uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
      }
    }
    *(void *)(a1 + 16) = v6;
    *(_DWORD *)(a1 + 24) = v5;
  }
  return result;
}

uint64_t sub_1CC149B48(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9 = result;
  uint64_t v10 = *(unsigned int *)(a5 + 8);
  if (v10 >= 0x41)
  {
    unsigned int v13 = *(void **)a5;
    uint64_t result = memcmp(*(const void **)a5, *(const void **)(a5 + 16), ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8);
    if (result) {
      goto LABEL_3;
    }
    int v14 = 0;
    int64_t v15 = (unint64_t)(v10 + 63) >> 6;
    do
    {
      if (v15-- < 1) {
        break;
      }
      unint64_t v17 = v13[v15];
      v14 += __clz(v17);
    }
    while (!v17);
    int v18 = v10 | 0xFFFFFFC0;
    if ((v10 & 0x3F) == 0) {
      int v18 = 0;
    }
    if (v14 + v18 != v10) {
      goto LABEL_3;
    }
  }
  else if (*(void *)(a5 + 16) | *(void *)a5)
  {
LABEL_3:
    sub_1CC14949C((uint64_t)&v24, a2, a3, a4);
    uint64_t result = sub_1CC149EEC((llvm::APInt *)&v24);
    if (result) {
      goto LABEL_8;
    }
    sub_1CC14A000(&v20, (llvm::ConstantRange *)&v24, (llvm::ConstantRange *)a5);
    if (v25 >= 0x41 && v24) {
      MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
    }
    unint64_t v24 = v20;
    unsigned int v25 = v21;
    unsigned int v21 = 0;
    if (v27 >= 0x41 && v26)
    {
      MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
      uint64_t v26 = v22;
      unsigned int v27 = v23;
      unsigned int v23 = 0;
      if (v21 >= 0x41 && v20) {
        MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
      }
    }
    else
    {
      uint64_t v26 = v22;
      unsigned int v27 = v23;
    }
    uint64_t result = sub_1CC149EEC((llvm::APInt *)&v24);
    if (result)
    {
LABEL_8:
      unsigned int v11 = *(_DWORD *)(a2 + 40);
      *(_DWORD *)(v9 + 8) = v11;
      if (v11 > 0x40) {
        operator new[]();
      }
      *(void *)uint64_t v9 = *(void *)(a2 + 32);
      unsigned int v12 = *(_DWORD *)(a2 + 56);
      *(_DWORD *)(v9 + 24) = v12;
      if (v12 > 0x40) {
        operator new[]();
      }
      *(void *)(v9 + 16) = *(void *)(a2 + 48);
    }
    else
    {
      *(_DWORD *)(v9 + 8) = v25;
      *(void *)uint64_t v9 = v24;
      *(_DWORD *)(v9 + 24) = v27;
      *(void *)(v9 + 16) = v26;
      unsigned int v25 = 0;
      unsigned int v27 = 0;
    }
    if (v27 >= 0x41)
    {
      uint64_t result = v26;
      if (v26) {
        uint64_t result = MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
      }
    }
    if (v25 >= 0x41)
    {
      uint64_t result = v24;
      if (v24) {
        return MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
      }
    }
    return result;
  }
  unsigned int v19 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(v9 + 8) = v19;
  if (v19 > 0x40) {
    operator new[]();
  }
  *(void *)uint64_t v9 = 0;
  *(_DWORD *)(v9 + 24) = v19;
  *(void *)(v9 + 16) = 0;
  return result;
}

BOOL sub_1CC149EEC(llvm::APInt *this)
{
  uint64_t v2 = *((unsigned int *)this + 2);
  if (v2 >= 0x41)
  {
    unint64_t v6 = *(void **)this;
    unint64_t v7 = (const void *)*((void *)this + 2);
    if (!memcmp(*(const void **)this, v7, ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8))
    {
      int v8 = 0;
      int64_t v9 = (unint64_t)(v2 + 63) >> 6;
      do
      {
        if (v9-- < 1) {
          break;
        }
        unint64_t v11 = v6[v9];
        v8 += __clz(v11);
      }
      while (!v11);
      int v12 = v2 | 0xFFFFFFC0;
      if ((v2 & 0x3F) == 0) {
        int v12 = 0;
      }
      if (v8 + v12 == v2) {
        return 1;
      }
    }
    if (!memcmp(v6, v7, ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countTrailingOnesSlowCase(this) == v2)
    {
      return 1;
    }
    return (int)llvm::APInt::compareSigned(this, (llvm::APInt *)((char *)this + 16)) > 0;
  }
  uint64_t v3 = *(void *)this;
  uint64_t v4 = *((void *)this + 2);
  if (v4 | *(void *)this && (v3 != v4 || v2 && v3 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v2)) {
    return (int)llvm::APInt::compareSigned(this, (llvm::APInt *)((char *)this + 16)) > 0;
  }
  return 1;
}

unint64_t *sub_1CC14A000(unint64_t *a1, llvm::ConstantRange *this, llvm::ConstantRange *a3)
{
  if (llvm::ConstantRange::signedAddMayOverflow((const void **)this, (const void **)a3) == 3)
  {
    return (unint64_t *)llvm::ConstantRange::add((uint64_t)this, a3, (uint64_t)a1);
  }
  else
  {
    unsigned int v7 = *((_DWORD *)this + 2);
    return llvm::ConstantRange::ConstantRange(a1, v7, 1);
  }
}

uint64_t sub_1CC14A08C(uint64_t a1, unint64_t a2, uint64_t a3, llvm::AllocaInst *a4, uint64_t a5)
{
  if (!a4) {
    return 1;
  }
  if (*(_WORD *)(a5 + 24) == 15) {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(v10 + 104);
  unsigned int v12 = *(_DWORD *)(v10 + 120);
  if (!v12) {
    goto LABEL_11;
  }
  unsigned int v13 = v12 - 1;
  unsigned int v14 = (v12 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v15 = v11 + 48 * v14;
  uint64_t v16 = *(void *)(v15 + 24);
  if (v16 != a2)
  {
    int v17 = 1;
    while (v16 != -4096)
    {
      unsigned int v18 = v14 + v17++;
      unsigned int v14 = v18 & v13;
      uint64_t v15 = v11 + 48 * (v18 & v13);
      uint64_t v16 = *(void *)(v15 + 24);
      if (v16 == a2) {
        goto LABEL_12;
      }
    }
LABEL_11:
    uint64_t v15 = v11 + 48 * v12;
  }
LABEL_12:
  if (v15 == v11 + 48 * v12 || (SCEVIter = *(llvm::detail::IEEEFloat ***)(v15 + 40)) == 0)
  {
    SCEVIter = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v10, a2);
    uint64_t v10 = *(void *)(a1 + 16);
  }
  unint64_t v20 = (llvm::Type *)llvm::PointerType::get((llvm::PointerType *)(****(void ****)v10 + 1912), 0);
  TruncateOrZeroExtend = llvm::ScalarEvolution::getTruncateOrZeroExtend(*(llvm::ScalarEvolution **)(a1 + 16), SCEVIter, v20, 0);
  uint64_t v22 = *(void *)(a1 + 16);
  uint64_t v23 = *(void *)(v22 + 104);
  unsigned int v24 = *(_DWORD *)(v22 + 120);
  if (v24)
  {
    unsigned int v25 = v24 - 1;
    unsigned int v26 = (v24 - 1) & ((a4 >> 4) ^ (a4 >> 9));
    uint64_t v27 = v23 + 48 * v26;
    unsigned int v28 = *(llvm::AllocaInst **)(v27 + 24);
    if (v28 == a4) {
      goto LABEL_22;
    }
    int v29 = 1;
    while (v28 != (llvm::AllocaInst *)-4096)
    {
      unsigned int v30 = v26 + v29++;
      unsigned int v26 = v30 & v25;
      uint64_t v27 = v23 + 48 * (v30 & v25);
      unsigned int v28 = *(llvm::AllocaInst **)(v27 + 24);
      if (v28 == a4) {
        goto LABEL_22;
      }
    }
  }
  uint64_t v27 = v23 + 48 * v24;
LABEL_22:
  if (v27 == v23 + 48 * v24 || (unsigned int v31 = *(llvm::detail::IEEEFloat ***)(v27 + 40)) == 0)
  {
    unsigned int v31 = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v22, (unint64_t)a4);
    uint64_t v22 = *(void *)(a1 + 16);
  }
  unsigned int v32 = (llvm::Type *)llvm::PointerType::get((llvm::PointerType *)(****(void ****)v22 + 1912), 0);
  uint64_t v33 = llvm::ScalarEvolution::getTruncateOrZeroExtend(*(llvm::ScalarEvolution **)(a1 + 16), v31, v32, 0);
  unint64_t MinusSCEV = llvm::ScalarEvolution::getMinusSCEV(*(llvm::ScalarEvolution **)(a1 + 16), (llvm::SCEV *)TruncateOrZeroExtend, (const llvm::APInt *)v33, 0, 0);
  BOOL v6 = 0;
  if (*(_WORD *)(MinusSCEV + 24) != 15)
  {
    unsigned int v35 = (const llvm::SCEV *)MinusSCEV;
    sub_1CC145550((uint64_t)&v52, a4);
    uint64_t v36 = (llvm::Type *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a1 + 16), (llvm::LLVMContext *)*(unsigned int *)(a1 + 24));
    unsigned int v37 = *(llvm::ConstantInt *****)(a1 + 16);
    unsigned int v39 = (llvm::ConstantInt *)llvm::ConstantInt::get(***v37, (llvm::LLVMContext *)&v52, v38);
    unint64_t Constant = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)v37, v39);
    unint64_t v41 = llvm::ScalarEvolution::getTruncateOrZeroExtend(*(llvm::ScalarEvolution **)(a1 + 16), Constant, v36, 0);
    unint64_t v42 = *(llvm::ConstantInt *****)(a1 + 16);
    BOOL v44 = (llvm::ConstantInt *)llvm::ConstantInt::get(***v42, (llvm::LLVMContext *)&v54, v43);
    unsigned int v45 = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)v42, v44);
    unsigned int v46 = llvm::ScalarEvolution::getTruncateOrZeroExtend(*(llvm::ScalarEvolution **)(a1 + 16), v45, v36, 0);
    unsigned int v47 = llvm::ScalarEvolution::getTruncateOrZeroExtend(*(llvm::ScalarEvolution **)(a1 + 16), (llvm::detail::IEEEFloat **)a5, v36, 0);
    uint64_t v48 = (const llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV((llvm::ScalarEvolution *)v42, (llvm::SCEV *)v46, (const llvm::APInt *)v47, 0, 0);
    unsigned int v49 = (unsigned __int16)llvm::ScalarEvolution::evaluatePredicateAt(*(llvm::ScalarEvolution **)(a1 + 16), 39, v35, (const llvm::SCEV *)v41, a3);
    if (v49 <= 0x100) {
      LOBYTE(v49) = 0;
    }
    if ((_BYTE)v49)
    {
      unsigned int v50 = (unsigned __int16)llvm::ScalarEvolution::evaluatePredicateAt(*(llvm::ScalarEvolution **)(a1 + 16), 41, v35, v48, a3);
      if (v50 <= 0x100) {
        LOBYTE(v50) = 0;
      }
      BOOL v6 = v50 != 0;
    }
    else
    {
      BOOL v6 = 0;
    }
    if (v55 >= 0x41 && v54) {
      MEMORY[0x1D25D9CB0](v54, 0x1000C8000313F17);
    }
    if (v53 >= 0x41 && v52) {
      MEMORY[0x1D25D9CB0](v52, 0x1000C8000313F17);
    }
  }
  return v6;
}

uint64_t sub_1CC14A438(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 8) = v4;
  if (v4 > 0x40) {
    operator new[]();
  }
  *(void *)a1 = *(void *)a2;
  unsigned int v5 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 24) = v5;
  if (v5 > 0x40) {
    operator new[]();
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 48) = 0;
  BOOL v6 = *(void **)(a2 + 32);
  unsigned int v7 = (void *)(a2 + 40);
  if (v6 != (void *)(a2 + 40))
  {
    do
    {
      sub_1CD4CA034((void **)(a1 + 32), (void *)(a1 + 40), v6[4], v6 + 4);
      int v8 = (void *)v6[1];
      if (v8)
      {
        do
        {
          int64_t v9 = v8;
          int v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int64_t v9 = (void *)v6[2];
          BOOL v10 = *v9 == (void)v6;
          BOOL v6 = v9;
        }
        while (!v10);
      }
      BOOL v6 = v9;
    }
    while (v9 != v7);
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  uint64_t v11 = *(void **)(a2 + 56);
  unsigned int v12 = (void *)(a2 + 64);
  if (v11 == (void *)(a2 + 64)) {
    return a1;
  }
  unsigned int v13 = 0;
  uint64_t v14 = a1 + 64;
  while (2)
  {
    uint64_t v15 = v11 + 4;
    uint64_t v16 = (uint64_t *)(a1 + 64);
    if (v14 == a1 + 64) {
      goto LABEL_18;
    }
    int v17 = v13;
    unsigned int v18 = (uint64_t *)(a1 + 64);
    if (v13)
    {
      do
      {
        uint64_t v16 = v17;
        int v17 = (uint64_t *)v17[1];
      }
      while (v17);
    }
    else
    {
      do
      {
        uint64_t v16 = (uint64_t *)v18[2];
        BOOL v10 = *v16 == (void)v18;
        unsigned int v18 = v16;
      }
      while (v10);
    }
    unint64_t v19 = v11[5];
    if (*((_OWORD *)v16 + 2) < __PAIR128__(v19, *v15))
    {
LABEL_18:
      unint64_t v20 = (uint64_t **)(a1 + 64);
      unsigned int v21 = (uint64_t **)(a1 + 64);
      if (!v13) {
        goto LABEL_32;
      }
      unint64_t v20 = (uint64_t **)(v16 + 1);
      if (!v16[1])
      {
        unsigned int v21 = (uint64_t **)v16;
        goto LABEL_32;
      }
      goto LABEL_37;
    }
    unint64_t v20 = (uint64_t **)(a1 + 64);
    unsigned int v21 = (uint64_t **)(a1 + 64);
    if (!v13) {
      goto LABEL_32;
    }
    unint64_t v22 = *v15;
    do
    {
      while (1)
      {
        unsigned int v21 = (uint64_t **)v13;
        unint64_t v23 = v13[5];
        if (v19 >= v23) {
          break;
        }
LABEL_25:
        unsigned int v13 = *v21;
        unint64_t v20 = v21;
        if (!*v21) {
          goto LABEL_32;
        }
      }
      if (v23 >= v19)
      {
        unsigned int v24 = v21[4];
        if (v22 < (unint64_t)v24) {
          goto LABEL_25;
        }
        if ((unint64_t)v24 >= v22) {
          goto LABEL_37;
        }
      }
      unsigned int v13 = v21[1];
    }
    while (v13);
    unint64_t v20 = v21 + 1;
LABEL_32:
    unsigned int v25 = (uint64_t *)operator new(0x50uLL);
    unsigned int v26 = v25;
    *((_OWORD *)v25 + 2) = *(_OWORD *)v15;
    unsigned int v27 = *((_DWORD *)v11 + 14);
    *((_DWORD *)v25 + 14) = v27;
    if (v27 > 0x40) {
      operator new[]();
    }
    v25[6] = v11[6];
    unsigned int v28 = *((_DWORD *)v11 + 18);
    *((_DWORD *)v25 + 18) = v28;
    if (v28 > 0x40) {
      operator new[]();
    }
    v25[8] = v11[8];
    uint64_t *v25 = 0;
    v25[1] = 0;
    v25[2] = (uint64_t)v21;
    llvm::Type *v20 = v25;
    uint64_t v29 = **(void **)(a1 + 56);
    if (v29)
    {
      *(void *)(a1 + 56) = v29;
      unsigned int v26 = *v20;
    }
    sub_1CB8358B8(*(uint64_t **)(a1 + 64), v26);
    ++*(void *)(a1 + 72);
LABEL_37:
    unsigned int v30 = (void *)v11[1];
    if (v30)
    {
      do
      {
        unsigned int v31 = v30;
        unsigned int v30 = (void *)*v30;
      }
      while (v30);
    }
    else
    {
      do
      {
        unsigned int v31 = (void *)v11[2];
        BOOL v10 = *v31 == (void)v11;
        uint64_t v11 = v31;
      }
      while (!v10);
    }
    if (v31 != v12)
    {
      uint64_t v14 = *(void *)(a1 + 56);
      unsigned int v13 = *(uint64_t **)(a1 + 64);
      uint64_t v11 = v31;
      continue;
    }
    return a1;
  }
}

void sub_1CC14A7DC(void *a1)
{
  if (a1)
  {
    sub_1CC14A7DC(*a1);
    sub_1CC14A7DC(a1[1]);
    sub_1CC148E90((void *)a1[13]);
    sub_1CD40B1BC((void *)a1[10]);
    if (*((_DWORD *)a1 + 16) >= 0x41u)
    {
      uint64_t v3 = a1[7];
      if (v3) {
        MEMORY[0x1D25D9CB0](v3, 0x1000C8000313F17);
      }
    }
    if (*((_DWORD *)a1 + 12) >= 0x41u)
    {
      uint64_t v4 = a1[5];
      if (v4) {
        MEMORY[0x1D25D9CB0](v4, 0x1000C8000313F17);
      }
    }
    operator delete(a1);
  }
}

void sub_1CC14A890(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  unsigned int v76 = v4;
  if (v4 > 0x40) {
    operator new[]();
  }
  unsigned int v5 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v4);
  if (!v4) {
    unsigned int v5 = 0;
  }
  __src = v5;
  unsigned int v78 = v4;
  unsigned int v77 = v5;
  unsigned int v7 = (uint64_t **)(a1 + 64);
  BOOL v6 = *(void **)(a1 + 64);
  int v8 = *(void ***)(a1 + 56);
  *(void *)(a1 + 56) = v74;
  *(void *)(a1 + 64) = 0;
  unint64_t v73 = v8;
  v74[0] = v6;
  int64_t v9 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  v74[1] = v9;
  if (!v9)
  {
    unint64_t v73 = v74;
    *(void *)(a1 + 56) = v7;
    goto LABEL_117;
  }
  v6[2] = v74;
  *(void *)(a1 + 56) = v7;
  if (v8 != v74)
  {
    BOOL v10 = (void *)(a2 + 8);
    uint64_t v64 = (void *)(a2 + 8);
LABEL_7:
    unint64_t v11 = (unint64_t)v8[4];
    while (1)
    {
      if (!v11) {
        goto LABEL_36;
      }
      if (*(unsigned char *)(v11 + 16))
      {
        if (*(unsigned char *)(v11 + 16) == 3 && (*(_DWORD *)(v11 + 20) & 0x7FFFFFF) == 0) {
          goto LABEL_36;
        }
      }
      else if (*(void *)(v11 + 72) == v11 + 72 && (*(unsigned char *)(v11 + 34) & 0x80) == 0)
      {
        goto LABEL_36;
      }
      if ((llvm::GlobalValue::isInterposable((llvm::GlobalValue *)v11) & 1) != 0 || (*(unsigned char *)(v11 + 33) & 0x40) == 0) {
        goto LABEL_36;
      }
      if (*(unsigned char *)(v11 + 16) != 1) {
        break;
      }
      uint64_t AliaseeObject = llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)v11);
      BOOL v13 = AliaseeObject == v11;
      unint64_t v11 = AliaseeObject;
      if (v13) {
        goto LABEL_36;
      }
    }
    if (!*(unsigned char *)(v11 + 16))
    {
      uint64_t v14 = v8[5];
      uint64_t v15 = *v7;
      uint64_t v16 = (uint64_t **)(a1 + 64);
      int v17 = (uint64_t **)(a1 + 64);
      if (!*v7) {
        goto LABEL_31;
      }
      while (1)
      {
        while (1)
        {
          int v17 = (uint64_t **)v15;
          unint64_t v18 = v15[5];
          if ((unint64_t)v14 >= v18) {
            break;
          }
LABEL_24:
          uint64_t v15 = *v17;
          uint64_t v16 = v17;
          if (!*v17) {
            goto LABEL_31;
          }
        }
        if (v18 >= (unint64_t)v14)
        {
          unint64_t v19 = (unint64_t)v17[4];
          if (v11 < v19) {
            goto LABEL_24;
          }
          if (v19 >= v11) {
            goto LABEL_76;
          }
        }
        uint64_t v15 = v17[1];
        if (!v15)
        {
          uint64_t v16 = v17 + 1;
LABEL_31:
          unint64_t v20 = (uint64_t *)operator new(0x50uLL);
          unsigned int v21 = v20;
          v20[4] = v11;
          v20[5] = (uint64_t)v14;
          unsigned int v22 = *((_DWORD *)v8 + 14);
          *((_DWORD *)v20 + 14) = v22;
          if (v22 > 0x40) {
            operator new[]();
          }
          v20[6] = (uint64_t)v8[6];
          unsigned int v23 = *((_DWORD *)v8 + 18);
          *((_DWORD *)v20 + 18) = v23;
          if (v23 > 0x40) {
            operator new[]();
          }
          v20[8] = (uint64_t)v8[8];
          uint64_t *v20 = 0;
          v20[1] = 0;
          v20[2] = (uint64_t)v17;
          uint64_t *v16 = v20;
          uint64_t v24 = **(void **)(a1 + 56);
          if (v24)
          {
            *(void *)(a1 + 56) = v24;
            unsigned int v21 = *v16;
          }
          sub_1CB8358B8(*(uint64_t **)(a1 + 64), v21);
          ++*(void *)(a1 + 72);
LABEL_76:
          uint64_t v52 = v8[1];
          if (v52)
          {
            do
            {
              unsigned int v53 = (void **)v52;
              uint64_t v52 = (void *)*v52;
            }
            while (v52);
          }
          else
          {
            do
            {
              unsigned int v53 = (void **)v8[2];
              BOOL v13 = *v53 == v8;
              int v8 = v53;
            }
            while (!v13);
          }
          int v8 = v53;
          BOOL v10 = v64;
          if (v53 == v74) {
            goto LABEL_117;
          }
          goto LABEL_7;
        }
      }
    }
LABEL_36:
    if (!a2) {
      goto LABEL_114;
    }
    unint64_t v25 = sub_1CD4AC784((llvm::GlobalValue *)v8[4]);
    unsigned int v26 = (void *)*v10;
    if (!*v10) {
      goto LABEL_48;
    }
    unsigned int v27 = v10;
    do
    {
      unint64_t v28 = v26[4];
      BOOL v29 = v28 >= v25;
      if (v28 >= v25) {
        unsigned int v30 = v26;
      }
      else {
        unsigned int v30 = v26 + 1;
      }
      if (v29) {
        unsigned int v27 = v26;
      }
      unsigned int v26 = (void *)*v30;
    }
    while (*v30);
    if (v27 == v10 || v27[4] > v25) {
LABEL_48:
    }
      unsigned int v27 = v10;
    uint64_t v31 = v27 == v10 ? 0 : (uint64_t)(v27 + 4);
    unint64_t v32 = v31 & 0xFFFFFFFFFFFFFFF8 | *(unsigned __int8 *)(a2 + 133);
    uint64_t v33 = v8[4][5];
    uint64_t v36 = *(void *)(v33 + 168);
    uint64_t v34 = v33 + 168;
    uint64_t v35 = v36;
    char v37 = *(unsigned char *)(v34 + 23);
    uint64_t v38 = (void *)(v37 >= 0 ? v34 : v35);
    uint64_t v39 = *(void *)(v34 + 8);
    size_t v40 = v37 >= 0 ? v37 & 0x7F : v39;
    uint64_t v41 = sub_1CC147660(v32, v38, v40);
    if (!v41 || (v42 = *(uint64_t **)(v41 + 112)) == 0 || (uint64_t v43 = *v42, v44 = v42[1], v45 = v44 - v43, v44 == v43))
    {
LABEL_114:
      sub_1CC1499DC((uint64_t)&v79, a1, (unsigned int *)&__src);
      if (*(_DWORD *)(a1 + 8) >= 0x41u && *(void *)a1) {
        MEMORY[0x1D25D9CB0](*(void *)a1, 0x1000C8000313F17);
      }
      *(void *)a1 = v79;
      *(_DWORD *)(a1 + 8) = v80;
      unsigned int v80 = 0;
      if (*(_DWORD *)(a1 + 24) >= 0x41u && (uint64_t v62 = *(void *)(a1 + 16)) != 0)
      {
        MEMORY[0x1D25D9CB0](v62, 0x1000C8000313F17);
        unsigned int v63 = v80;
        *(void *)(a1 + 16) = v81;
        *(_DWORD *)(a1 + 24) = v82;
        int v82 = 0;
        if (v63 >= 0x41 && v79) {
          MEMORY[0x1D25D9CB0](v79, 0x1000C8000313F17);
        }
      }
      else
      {
        *(void *)(a1 + 16) = v81;
        *(_DWORD *)(a1 + 24) = v82;
      }
      goto LABEL_117;
    }
    unsigned int v46 = (const void **)(v43 + 24);
    uint64_t v47 = v45 >> 6 << 6;
    while (*(v46 - 3) != (const void *)*((unsigned int *)v8 + 10))
    {
      v46 += 8;
      v47 -= 64;
      if (!v47) {
        goto LABEL_114;
      }
    }
    uint64_t v48 = (llvm::APInt *)(v46 - 2);
    uint64_t v49 = *((unsigned int *)v46 - 2);
    if (v49 > 0x40)
    {
      if (!memcmp(*(v46 - 2), *v46, ((unint64_t)(v49 + 63) >> 3) & 0x3FFFFFF8)
        && llvm::APInt::countTrailingOnesSlowCase(v48) == v49)
      {
        goto LABEL_114;
      }
    }
    else
    {
      unsigned int v50 = *(v46 - 2);
      if (v50 == *v46 && (!v49 || v50 == (const void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v49))) {
        goto LABEL_114;
      }
    }
    llvm::ConstantRange::sextOrTrunc((unint64_t *)v48, *(_DWORD *)(a1 + 8), (uint64_t)&__s1);
    uint64_t v51 = v70;
    if (v70 >= 0x41)
    {
      uint64_t v54 = __s1;
      if (!memcmp(__s1, __s2, (((unint64_t)v70 + 63) >> 3) & 0x3FFFFFF8))
      {
        int v55 = 0;
        int64_t v56 = (unint64_t)(v51 + 63) >> 6;
        do
        {
          if (v56-- < 1) {
            break;
          }
          unint64_t v58 = v54[v56];
          v55 += __clz(v58);
        }
        while (!v58);
        int v59 = v51 | 0xFFFFFFC0;
        if ((v51 & 0x3F) == 0) {
          int v59 = 0;
        }
        if (v55 + v59 == v51) {
          goto LABEL_74;
        }
      }
    }
    else if (!((unint64_t)__s2 | (unint64_t)__s1))
    {
LABEL_74:
      if (v72 >= 0x41 && __s2) {
        MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
      }
      if (v70 >= 0x41 && __s1) {
        MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
      }
      goto LABEL_76;
    }
    sub_1CC14A000(&v65, (llvm::ConstantRange *)&__s1, (llvm::ConstantRange *)(v8 + 6));
    sub_1CC1499DC((uint64_t)&v79, a1, (unsigned int *)&v65);
    if (*(_DWORD *)(a1 + 8) >= 0x41u && *(void *)a1) {
      MEMORY[0x1D25D9CB0](*(void *)a1, 0x1000C8000313F17);
    }
    *(void *)a1 = v79;
    *(_DWORD *)(a1 + 8) = v80;
    unsigned int v80 = 0;
    if (*(_DWORD *)(a1 + 24) >= 0x41u && (uint64_t v60 = *(void *)(a1 + 16)) != 0)
    {
      MEMORY[0x1D25D9CB0](v60, 0x1000C8000313F17);
      unsigned int v61 = v80;
      *(void *)(a1 + 16) = v81;
      *(_DWORD *)(a1 + 24) = v82;
      int v82 = 0;
      if (v61 >= 0x41 && v79) {
        MEMORY[0x1D25D9CB0](v79, 0x1000C8000313F17);
      }
    }
    else
    {
      *(void *)(a1 + 16) = v81;
      *(_DWORD *)(a1 + 24) = v82;
    }
    if (v68 >= 0x41 && v67) {
      MEMORY[0x1D25D9CB0](v67, 0x1000C8000313F17);
    }
    if (v66 >= 0x41 && v65) {
      MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
    }
    goto LABEL_74;
  }
LABEL_117:
  sub_1CC148E90(v74[0]);
  if (v78 >= 0x41 && v77) {
    MEMORY[0x1D25D9CB0](v77, 0x1000C8000313F17);
  }
  if (v76 >= 0x41)
  {
    if (__src) {
      MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
  }
}

uint64_t **sub_1CC14B0B4(uint64_t **a1, unint64_t a2)
{
  unsigned int v5 = a1 + 1;
  unsigned int v4 = a1[1];
  BOOL v6 = a1 + 1;
  unsigned int v7 = a1 + 1;
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v7 = (uint64_t **)v4;
        unint64_t v8 = v4[4];
        if (v8 <= a2) {
          break;
        }
        unsigned int v4 = *v7;
        BOOL v6 = v7;
        if (!*v7) {
          goto LABEL_8;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unsigned int v4 = v7[1];
      if (!v4)
      {
        BOOL v6 = v7 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    int64_t v9 = operator new(0x60uLL);
    v13[0] = v9;
    v13[1] = v5;
    v9[4] = 0u;
    v9[5] = 0u;
    v9[3] = 0u;
    *((void *)v9 + 4) = a2;
    *((void *)v9 + 5) = v9 + 3;
    *((void *)v9 + 10) = 0;
    *((void *)v9 + 9) = 0;
    *((void *)v9 + 8) = (char *)v9 + 72;
    char v14 = 1;
    *(void *)int64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v7;
    void *v6 = (uint64_t *)v9;
    BOOL v10 = (uint64_t *)**a1;
    if (v10)
    {
      *a1 = v10;
      unint64_t v11 = *v6;
    }
    else
    {
      unint64_t v11 = (uint64_t *)v9;
    }
    sub_1CB8358B8(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    unsigned int v7 = (uint64_t **)v13[0];
    v13[0] = 0;
    sub_1CC14B950((uint64_t)v13);
  }
  return v7 + 5;
}

unint64_t *sub_1CC14B1BC(unint64_t *result, uint64_t a2, unint64_t a3, unsigned int a4, llvm::ConstantRange *a5)
{
  uint64_t v6 = (uint64_t)result;
  unsigned int v7 = *(void **)(a2 + 8);
  if (!v7) {
    goto LABEL_23;
  }
  unint64_t v8 = (void *)(a2 + 8);
  do
  {
    unint64_t v9 = v7[4];
    BOOL v10 = v9 >= a3;
    if (v9 >= a3) {
      unint64_t v11 = v7;
    }
    else {
      unint64_t v11 = v7 + 1;
    }
    if (v10) {
      unint64_t v8 = v7;
    }
    unsigned int v7 = (void *)*v11;
  }
  while (*v11);
  if (v8 == (void *)(a2 + 8)) {
    goto LABEL_23;
  }
  if (v8[4] > a3) {
    goto LABEL_23;
  }
  uint64_t v14 = v8[9];
  unsigned int v12 = v8 + 9;
  uint64_t v13 = v14;
  if (!v14) {
    goto LABEL_23;
  }
  uint64_t v15 = v12;
  do
  {
    unsigned int v16 = *(_DWORD *)(v13 + 32);
    BOOL v17 = v16 >= a4;
    if (v16 >= a4) {
      unint64_t v18 = (uint64_t *)v13;
    }
    else {
      unint64_t v18 = (uint64_t *)(v13 + 8);
    }
    if (v17) {
      uint64_t v15 = (void *)v13;
    }
    uint64_t v13 = *v18;
  }
  while (*v18);
  if (v15 == v12 || *((_DWORD *)v15 + 8) > a4) {
    goto LABEL_23;
  }
  unsigned int v22 = (llvm::ConstantRange *)(v15 + 5);
  uint64_t v23 = *((unsigned int *)v15 + 12);
  if (v23 >= 0x41)
  {
    int v40 = *((_DWORD *)v15 + 12);
    uint64_t v41 = (llvm::APInt *)(v15 + 5);
    uint64_t v39 = a5;
    BOOL v29 = (void *)v15[5];
    unint64_t v30 = v23 + 63;
    uint64_t v31 = (const void *)v15[7];
    size_t v32 = ((unint64_t)(v23 + 63) >> 3) & 0x3FFFFFF8;
    if (!memcmp(v29, v31, v32))
    {
      int v34 = 0;
      uint64_t v35 = v30 >> 6;
      do
      {
        if (v35-- < 1) {
          break;
        }
        unint64_t v37 = v29[v35];
        v34 += __clz(v37);
      }
      while (!v37);
      unsigned int v38 = v40 | 0xFFFFFFC0;
      if ((v40 & 0x3F) == 0) {
        unsigned int v38 = 0;
      }
      if (v34 + v38 == v40)
      {
        *(_DWORD *)(v6 + 8) = v40;
        operator new[]();
      }
    }
    int v33 = memcmp(v29, v31, v32);
    a5 = v39;
    unsigned int v22 = v41;
    if (v33) {
      goto LABEL_30;
    }
    uint64_t result = (unint64_t *)llvm::APInt::countTrailingOnesSlowCase(v41);
    unsigned int v22 = v41;
    a5 = v39;
    if (result != v40) {
      goto LABEL_30;
    }
LABEL_23:
    unsigned int v19 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(v6 + 8) = v19;
    if (v19 > 0x40) {
      operator new[]();
    }
    *(void *)uint64_t v6 = *(void *)(a2 + 24);
    unsigned int v20 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(v6 + 24) = v20;
    if (v20 > 0x40) {
      operator new[]();
    }
    uint64_t v21 = *(void *)(a2 + 40);
LABEL_26:
    *(void *)(v6 + 16) = v21;
    return result;
  }
  uint64_t v24 = v15[5];
  uint64_t v25 = v15[7];
  if (!(v25 | v24))
  {
    *((_DWORD *)result + 2) = v23;
    uint64_t *result = *(void *)v22;
    unsigned int v26 = *((_DWORD *)v15 + 16);
    *((_DWORD *)result + 6) = v26;
    if (v26 > 0x40) {
      operator new[]();
    }
    uint64_t v21 = v15[7];
    goto LABEL_26;
  }
  if (v24 == v25)
  {
    BOOL v28 = v23 == 0;
    unint64_t v27 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v23;
    BOOL v28 = v28 || v24 == v27;
    if (v28) {
      goto LABEL_23;
    }
  }
LABEL_30:

  return sub_1CC14A000((unint64_t *)v6, v22, a5);
}

uint64_t **sub_1CC14B4E0(uint64_t **a1, uint64_t **a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = (uint64_t *)(a2 + 1);
    unsigned int v4 = *a2;
    if (a1[2])
    {
      unsigned int v5 = *a1;
      unsigned int v7 = a1 + 1;
      uint64_t v6 = a1[1];
      *a1 = (uint64_t *)(a1 + 1);
      v6[2] = 0;
      a1[1] = 0;
      a1[2] = 0;
      if (v5[1]) {
        unsigned int v5 = (uint64_t *)v5[1];
      }
      unint64_t v42 = a1;
      uint64_t v43 = v5;
      sub_1CC14BE2C((uint64_t)&v42);
      uint64_t v8 = v44;
      if (!v44 || v4 == v3)
      {
        uint64_t v14 = v4;
      }
      else
      {
        do
        {
          *(_OWORD *)(v8 + 32) = *((_OWORD *)v4 + 2);
          if (*(_DWORD *)(v8 + 56) > 0x40u || *((_DWORD *)v4 + 14) > 0x40u)
          {
            if ((uint64_t *)v8 != v4)
            {
              unsigned int v16 = v4;
              BOOL v17 = (void **)(v8 + 48);
              unint64_t v18 = v16;
              uint64_t v19 = v8;
              llvm::APInt::reallocate(v8 + 48, *((_DWORD *)v16 + 14));
              uint64_t v20 = *(unsigned int *)(v19 + 56);
              if (v20 <= 0x40)
              {
                *BOOL v17 = (void *)v18[6];
                unsigned int v4 = v18;
              }
              else
              {
                uint64_t v21 = *v17;
                unsigned int v4 = v18;
                memcpy(v21, (const void *)v18[6], ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8);
              }
              uint64_t v8 = v19;
            }
          }
          else
          {
            *(void *)(v8 + 48) = v4[6];
            *(_DWORD *)(v8 + 56) = *((_DWORD *)v4 + 14);
          }
          if (*(_DWORD *)(v8 + 72) > 0x40u || *((_DWORD *)v4 + 18) > 0x40u)
          {
            if ((uint64_t *)v8 != v4)
            {
              unsigned int v22 = v4;
              uint64_t v23 = (void **)(v8 + 64);
              uint64_t v24 = v22;
              uint64_t v25 = v8;
              llvm::APInt::reallocate(v8 + 64, *((_DWORD *)v22 + 18));
              uint64_t v26 = *(unsigned int *)(v25 + 72);
              if (v26 <= 0x40)
              {
                *uint64_t v23 = (void *)v24[8];
                unsigned int v4 = v24;
              }
              else
              {
                unint64_t v27 = *v23;
                unsigned int v4 = v24;
                memcpy(v27, (const void *)v24[8], ((unint64_t)(v26 + 63) >> 3) & 0x3FFFFFF8);
              }
              uint64_t v8 = v25;
            }
          }
          else
          {
            *(void *)(v8 + 64) = v4[8];
            *(_DWORD *)(v8 + 72) = *((_DWORD *)v4 + 18);
          }
          unint64_t v9 = *v7;
          BOOL v10 = (uint64_t *)(a1 + 1);
          unint64_t v11 = (uint64_t *)(a1 + 1);
          if (*v7)
          {
            do
            {
              while (1)
              {
                BOOL v10 = v9;
                if (*(_OWORD *)(v8 + 32) >= *((_OWORD *)v9 + 2)) {
                  break;
                }
                unint64_t v9 = (uint64_t *)*v9;
                unint64_t v11 = v10;
                if (!*v10) {
                  goto LABEL_19;
                }
              }
              unint64_t v9 = (uint64_t *)v9[1];
            }
            while (v9);
            unint64_t v11 = v10 + 1;
          }
LABEL_19:
          *(void *)uint64_t v8 = 0;
          *(void *)(v8 + 8) = 0;
          *(void *)(v8 + 16) = v10;
          *unint64_t v11 = v8;
          unsigned int v12 = (uint64_t *)**a1;
          if (v12)
          {
            *a1 = v12;
            uint64_t v8 = *v11;
          }
          sub_1CB8358B8(a1[1], (uint64_t *)v8);
          a1[2] = (uint64_t *)((char *)a1[2] + 1);
          sub_1CC14BE2C((uint64_t)&v42);
          uint64_t v13 = (uint64_t *)v4[1];
          if (v13)
          {
            do
            {
              uint64_t v14 = v13;
              uint64_t v13 = (uint64_t *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              uint64_t v14 = (uint64_t *)v4[2];
              BOOL v15 = *v14 == (void)v4;
              unsigned int v4 = v14;
            }
            while (!v15);
          }
          uint64_t v8 = v44;
          if (v44) {
            BOOL v15 = v14 == v3;
          }
          else {
            BOOL v15 = 1;
          }
          unsigned int v4 = v14;
        }
        while (!v15);
      }
      sub_1CC148E90((void *)v8);
      BOOL v28 = v43;
      if (v43)
      {
        do
        {
          BOOL v29 = v28;
          BOOL v28 = (uint64_t *)v28[2];
        }
        while (v28);
        sub_1CC148E90(v29);
      }
    }
    else
    {
      uint64_t v14 = *a2;
    }
    if (v14 != v3)
    {
      unint64_t v30 = (uint64_t ***)(a1 + 1);
      do
      {
        uint64_t v31 = (uint64_t *)operator new(0x50uLL);
        size_t v32 = v31;
        *((_OWORD *)v31 + 2) = *((_OWORD *)v14 + 2);
        unsigned int v33 = *((_DWORD *)v14 + 14);
        *((_DWORD *)v31 + 14) = v33;
        if (v33 > 0x40) {
          operator new[]();
        }
        v31[6] = v14[6];
        unsigned int v34 = *((_DWORD *)v14 + 18);
        *((_DWORD *)v31 + 18) = v34;
        if (v34 > 0x40) {
          operator new[]();
        }
        v31[8] = v14[8];
        uint64_t v35 = *v30;
        uint64_t v36 = a1 + 1;
        unint64_t v37 = a1 + 1;
        if (*v30)
        {
          do
          {
            while (1)
            {
              uint64_t v36 = v35;
              if (*((_OWORD *)v31 + 2) >= *((_OWORD *)v35 + 2)) {
                break;
              }
              uint64_t v35 = (uint64_t **)*v35;
              unint64_t v37 = v36;
              if (!*v36) {
                goto LABEL_58;
              }
            }
            uint64_t v35 = (uint64_t **)v35[1];
          }
          while (v35);
          unint64_t v37 = v36 + 1;
        }
LABEL_58:
        uint64_t *v31 = 0;
        v31[1] = 0;
        v31[2] = (uint64_t)v36;
        uint64_t *v37 = v31;
        unsigned int v38 = (uint64_t *)**a1;
        if (v38)
        {
          *a1 = v38;
          size_t v32 = *v37;
        }
        sub_1CB8358B8(a1[1], v32);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
        uint64_t v39 = (uint64_t *)v14[1];
        if (v39)
        {
          do
          {
            int v40 = v39;
            uint64_t v39 = (uint64_t *)*v39;
          }
          while (v39);
        }
        else
        {
          do
          {
            int v40 = (uint64_t *)v14[2];
            BOOL v15 = *v40 == (void)v14;
            uint64_t v14 = v40;
          }
          while (!v15);
        }
        uint64_t v14 = v40;
      }
      while (v40 != v3);
    }
  }
  return a1;
}

uint64_t sub_1CC14B950(uint64_t a1)
{
  uint64_t v2 = *(void ***)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      sub_1CC14A7DC(v2[9]);
      sub_1CC14A7DC(v2[6]);
    }
    operator delete(v2);
  }
  return a1;
}

void sub_1CC14B9A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v41 = a2;
  uint64_t v3 = *(void **)(a3 + 24);
  unsigned int v4 = (void *)(a3 + 32);
  if (v3 == (void *)(a3 + 32)) {
    return;
  }
  char v6 = 0;
  int v7 = *(_DWORD *)(a3 + 48);
  int v8 = dword_1EBCC81D0;
  unsigned int v38 = (const void **)(a1 + 24);
  unint64_t v37 = (const void **)(a1 + 40);
  do
  {
    unint64_t v9 = (void *)v3[12];
    if (v9 != v3 + 13)
    {
      char v10 = 0;
      unint64_t v11 = (void **)(v3 + 5);
      int v40 = (void **)(v3 + 7);
      while (1)
      {
        sub_1CC14B1BC(&v42, a1, v9[4], *((_DWORD *)v9 + 10), (llvm::ConstantRange *)(v9 + 6));
        if (llvm::ConstantRange::contains((llvm::ConstantRange *)(v3 + 5), (const llvm::ConstantRange *)&v42)) {
          goto LABEL_18;
        }
        if (v7 <= v8)
        {
          sub_1CC1499DC((uint64_t)&v46, (uint64_t)(v3 + 5), (unsigned int *)&v42);
          if (*((_DWORD *)v3 + 12) >= 0x41u && *v11) {
            MEMORY[0x1D25D9CB0](*v11, 0x1000C8000313F17);
          }
          v3[5] = v46;
          *((_DWORD *)v3 + 12) = v47;
          unsigned int v47 = 0;
          if (*((_DWORD *)v3 + 16) >= 0x41u && *v40)
          {
            MEMORY[0x1D25D9CB0](*v40, 0x1000C8000313F17);
            unsigned int v18 = v47;
            v3[7] = v48;
            *((_DWORD *)v3 + 16) = v49;
            int v49 = 0;
            if (v18 >= 0x41 && v46) {
              MEMORY[0x1D25D9CB0](v46, 0x1000C8000313F17);
            }
            goto LABEL_17;
          }
          v3[7] = v48;
          int v12 = v49;
        }
        else
        {
          if (*((_DWORD *)v3 + 12) > 0x40u || *(_DWORD *)(a1 + 32) > 0x40u)
          {
            if (v11 != (void **)v38)
            {
              llvm::APInt::reallocate((uint64_t)(v3 + 5), *(_DWORD *)(a1 + 32));
              uint64_t v16 = *((unsigned int *)v3 + 12);
              if (v16 <= 0x40) {
                *unint64_t v11 = (void *)*v38;
              }
              else {
                memcpy(*v11, *v38, ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8);
              }
            }
          }
          else
          {
            v3[5] = *(void *)(a1 + 24);
            *((_DWORD *)v3 + 12) = *(_DWORD *)(a1 + 32);
          }
          if (*((_DWORD *)v3 + 16) > 0x40u || *(_DWORD *)(a1 + 48) > 0x40u)
          {
            if (v40 != (void **)v37)
            {
              llvm::APInt::reallocate((uint64_t)v40, *(_DWORD *)(a1 + 48));
              uint64_t v17 = *((unsigned int *)v3 + 16);
              if (v17 <= 0x40) {
                *int v40 = (void *)*v37;
              }
              else {
                memcpy(*v40, *v37, ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8);
              }
            }
            goto LABEL_17;
          }
          v3[7] = *(void *)(a1 + 40);
          int v12 = *(_DWORD *)(a1 + 48);
        }
        *((_DWORD *)v3 + 16) = v12;
LABEL_17:
        char v10 = 1;
LABEL_18:
        if (v45 >= 0x41 && v44) {
          MEMORY[0x1D25D9CB0](v44, 0x1000C8000313F17);
        }
        if (v43 >= 0x41 && v42) {
          MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
        }
        uint64_t v13 = (void *)v9[1];
        if (v13)
        {
          do
          {
            uint64_t v14 = v13;
            uint64_t v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            uint64_t v14 = (void *)v9[2];
            BOOL v15 = *v14 == (void)v9;
            unint64_t v9 = v14;
          }
          while (!v15);
        }
        unint64_t v9 = v14;
        if (v14 == v3 + 13) {
          goto LABEL_46;
        }
      }
    }
    char v10 = 0;
LABEL_46:
    uint64_t v19 = (void *)v3[1];
    if (v19)
    {
      do
      {
        uint64_t v20 = v19;
        uint64_t v19 = (void *)*v19;
      }
      while (v19);
    }
    else
    {
      do
      {
        uint64_t v20 = (void *)v3[2];
        BOOL v15 = *v20 == (void)v3;
        uint64_t v3 = v20;
      }
      while (!v15);
    }
    v6 |= v10;
    uint64_t v3 = v20;
  }
  while (v20 != v4);
  uint64_t v21 = a3;
  if (v6)
  {
    unsigned int v22 = sub_1CD4C93F8(a1 + 56, &v41);
    uint64_t v23 = *((unsigned int *)v22 + 4);
    if (v23)
    {
      uint64_t v24 = (uint64_t *)v22[1];
      uint64_t v25 = &v24[v23];
      do
      {
        sub_1CD4C96F8((uint64_t)&v46, a1 + 80, v24);
        if ((_BYTE)v48)
        {
          unint64_t v27 = *(uint64_t **)(a1 + 112);
          unint64_t v26 = *(void *)(a1 + 120);
          if ((unint64_t)v27 >= v26)
          {
            BOOL v29 = *(void **)(a1 + 104);
            uint64_t v30 = v27 - v29;
            unint64_t v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 61) {
              abort();
            }
            uint64_t v32 = v26 - (void)v29;
            if (v32 >> 2 > v31) {
              unint64_t v31 = v32 >> 2;
            }
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v31;
            }
            if (v33)
            {
              if (v33 >> 61) {
                sub_1CB833614();
              }
              unsigned int v34 = (char *)operator new(8 * v33);
            }
            else
            {
              unsigned int v34 = 0;
            }
            uint64_t v35 = (uint64_t *)&v34[8 * v30];
            *uint64_t v35 = *v24;
            BOOL v28 = v35 + 1;
            if (v27 != v29)
            {
              do
              {
                uint64_t v36 = *--v27;
                *--uint64_t v35 = v36;
              }
              while (v27 != v29);
              unint64_t v27 = *(uint64_t **)(a1 + 104);
            }
            *(void *)(a1 + 104) = v35;
            *(void *)(a1 + 112) = v28;
            *(void *)(a1 + 120) = &v34[8 * v33];
            uint64_t v21 = a3;
            if (v27) {
              operator delete(v27);
            }
          }
          else
          {
            uint64_t *v27 = *v24;
            BOOL v28 = v27 + 1;
          }
          *(void *)(a1 + 112) = v28;
        }
        ++v24;
      }
      while (v24 != v25);
    }
    ++*(_DWORD *)(v21 + 48);
  }
}

uint64_t sub_1CC14BE2C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  *(void *)(result + 16) = v1;
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 16);
    if (v2)
    {
      uint64_t v3 = (void *)*v2;
      if (*v2 == v1)
      {
        *uint64_t v2 = 0;
        while (1)
        {
          unsigned int v4 = (void *)v2[1];
          if (!v4) {
            break;
          }
          do
          {
            uint64_t v2 = v4;
            unsigned int v4 = (void *)*v4;
          }
          while (v4);
        }
      }
      else
      {
        for (v2[1] = 0; v3; uint64_t v3 = (void *)v2[1])
        {
          do
          {
            uint64_t v2 = v3;
            uint64_t v3 = (void *)*v3;
          }
          while (v3);
        }
      }
    }
    *(void *)(result + 8) = v2;
  }
  return result;
}

void sub_1CC14BE8C(void *a1)
{
  if (a1)
  {
    sub_1CC14BE8C(*a1);
    sub_1CC14BE8C(a1[1]);
    sub_1CC14A7DC((void *)a1[9]);
    sub_1CC14A7DC((void *)a1[6]);
    operator delete(a1);
  }
}

uint64_t sub_1CC14BEE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1CC14BF80(void *a1, uint64_t a2)
{
  unsigned int v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    if (v5 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v5;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

llvm::raw_ostream *sub_1CC14C060(llvm::raw_ostream *a1, llvm::ConstantRange **this)
{
  llvm::ConstantRange::print((llvm::ConstantRange *)this, a1);
  unsigned int v4 = this[7];
  if (v4 != (llvm::ConstantRange *)(this + 8))
  {
    while (1)
    {
      uint64_t v5 = (_WORD *)*((void *)a1 + 4);
      if (*((void *)a1 + 3) - (void)v5 > 1uLL)
      {
        *uint64_t v5 = 8236;
        char v6 = (unsigned char *)(*((void *)a1 + 4) + 2);
        *((void *)a1 + 4) = v6;
      }
      else
      {
        llvm::raw_ostream::write(a1, ", ", 2uLL);
        char v6 = (unsigned char *)*((void *)a1 + 4);
      }
      if (*((unsigned char **)a1 + 3) == v6)
      {
        llvm::raw_ostream::write(a1, "@", 1uLL);
      }
      else
      {
        unsigned char *v6 = 64;
        ++*((void *)a1 + 4);
      }
      int v7 = (uint64_t ***)*((void *)v4 + 4);
      if ((*((unsigned char *)v7 + 23) & 0x10) == 0) {
        goto LABEL_16;
      }
      uint64_t v8 = ***v7;
      uint64_t v9 = *(void *)(v8 + 152);
      uint64_t v10 = *(unsigned int *)(v8 + 168);
      if (!v10) {
        goto LABEL_13;
      }
      LODWORD(v11) = (v10 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      int v12 = (uint64_t ****)(v9 + 16 * v11);
      uint64_t v13 = *v12;
      if (*v12 != v7) {
        break;
      }
LABEL_14:
      uint64_t v16 = (size_t *)v12[1];
      size_t v19 = *v16;
      uint64_t v17 = v16 + 2;
      size_t v18 = v19;
      uint64_t v20 = (_DWORD *)*((void *)a1 + 4);
      if (v19 <= *((void *)a1 + 3) - (void)v20)
      {
        if (v18)
        {
          memcpy(v20, v17, v18);
          uint64_t v20 = (_DWORD *)(*((void *)a1 + 4) + v18);
          *((void *)a1 + 4) = v20;
        }
        goto LABEL_19;
      }
      llvm::raw_ostream::write(a1, (const char *)v17, v18);
LABEL_16:
      uint64_t v20 = (_DWORD *)*((void *)a1 + 4);
LABEL_19:
      if (*((void *)a1 + 3) - (void)v20 > 3uLL)
      {
        _DWORD *v20 = 1735549224;
        *((void *)a1 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(a1, "(arg", 4uLL);
      }
      sub_1CD098D14(a1, *((void *)v4 + 5), 0, 0, 0);
      uint64_t v21 = (_WORD *)*((void *)a1 + 4);
      if (*((void *)a1 + 3) - (void)v21 > 1uLL)
      {
        _WORD *v21 = 8236;
        *((void *)a1 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(a1, ", ", 2uLL);
      }
      llvm::ConstantRange::print((llvm::ConstantRange *)((char *)v4 + 48), a1);
      unsigned int v22 = (unsigned char *)*((void *)a1 + 4);
      if (*((unsigned char **)a1 + 3) == v22)
      {
        llvm::raw_ostream::write(a1, ")", 1uLL);
      }
      else
      {
        *unsigned int v22 = 41;
        ++*((void *)a1 + 4);
      }
      uint64_t v23 = (llvm::ConstantRange *)*((void *)v4 + 1);
      if (v23)
      {
        do
        {
          uint64_t v24 = v23;
          uint64_t v23 = *(llvm::ConstantRange **)v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          uint64_t v24 = (llvm::ConstantRange *)*((void *)v4 + 2);
          BOOL v25 = *(void *)v24 == (void)v4;
          unsigned int v4 = v24;
        }
        while (!v25);
      }
      unsigned int v4 = v24;
      if (v24 == (llvm::ConstantRange *)(this + 8)) {
        return a1;
      }
    }
    int v14 = 1;
    while (v13 != (uint64_t ***)-4096)
    {
      int v15 = v11 + v14++;
      uint64_t v11 = v15 & (v10 - 1);
      uint64_t v13 = *(uint64_t ****)(v9 + 16 * v11);
      if (v13 == v7)
      {
        int v12 = (uint64_t ****)(v9 + 16 * v11);
        goto LABEL_14;
      }
    }
LABEL_13:
    int v12 = (uint64_t ****)(v9 + 16 * v10);
    goto LABEL_14;
  }
  return a1;
}

char *sub_1CC14C314(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = (a1[1] - *a1) >> 6;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58) {
    abort();
  }
  uint64_t v8 = 0;
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - *a1;
  if (v10 >> 5 > v4) {
    unint64_t v4 = v10 >> 5;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v11 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v4;
  }
  uint64_t v23 = 0;
  uint64_t v24 = a1 + 2;
  if (v11)
  {
    if (v11 >> 58) {
      sub_1CB833614();
    }
    uint64_t v8 = (char *)operator new(v11 << 6);
  }
  int v12 = &v8[64 * v3];
  *(void *)int v12 = a2;
  unsigned int v13 = *(_DWORD *)(a3 + 8);
  *((_DWORD *)v12 + 4) = v13;
  if (v13 > 0x40) {
    operator new[]();
  }
  *((void *)v12 + 1) = *(void *)a3;
  int v14 = &v8[64 * v3];
  unsigned int v15 = *(_DWORD *)(a3 + 24);
  *((_DWORD *)v14 + 8) = v15;
  if (v15 > 0x40) {
    operator new[]();
  }
  *((void *)v14 + 3) = *(void *)(a3 + 16);
  uint64_t v16 = &v8[64 * v3];
  *((void *)v16 + 5) = 0;
  *((void *)v16 + 6) = 0;
  *((void *)v16 + 7) = 0;
  sub_1CC14C4EC(v9, a1[1], a1[1], *a1, *a1, (uint64_t)v16, (uint64_t)v16);
  long long v17 = *(_OWORD *)a1;
  *a1 = v18;
  a1[1] = (uint64_t)(v12 + 64);
  long long v22 = v17;
  uint64_t v19 = a1[2];
  a1[2] = (uint64_t)&v8[64 * v11];
  uint64_t v23 = v19;
  uint64_t v21 = v17;
  sub_1CD4CA25C((uint64_t)&v21);
  return v12 + 64;
}

__n128 sub_1CC14C4EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      *(void *)(v8 - 64) = *(void *)(a3 + v7 - 64);
      *(_DWORD *)(v8 - 48) = *(_DWORD *)(a3 + v7 - 48);
      *(void *)(v8 - 56) = *(void *)(a3 + v7 - 56);
      *(_DWORD *)(v9 - 48) = 0;
      *(_DWORD *)(v8 - 32) = *(_DWORD *)(a3 + v7 - 32);
      *(void *)(v8 - 40) = *(void *)(a3 + v7 - 40);
      *(_DWORD *)(v9 - 32) = 0;
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      *(void *)(v8 - 8) = 0;
      __n128 result = *(__n128 *)(a3 + v7 - 24);
      *(__n128 *)(v8 - 24) = result;
      *(void *)(v8 - 8) = *(void *)(a3 + v7 - 8);
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 8) = 0;
      v7 -= 64;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

char *sub_1CC14C570(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    abort();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v5) {
    unint64_t v5 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v5;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_1CB833614();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  int v12 = &v11[48 * v4];
  *(void *)int v12 = a2;
  *((void *)v12 + 1) = a3;
  unsigned int v13 = *(_DWORD *)(a4 + 8);
  *((_DWORD *)v12 + 6) = v13;
  if (v13 > 0x40) {
    operator new[]();
  }
  *((void *)v12 + 2) = *(void *)a4;
  int v14 = &v11[48 * v4];
  unsigned int v15 = *(_DWORD *)(a4 + 24);
  *((_DWORD *)v14 + 10) = v15;
  if (v15 > 0x40) {
    operator new[]();
  }
  *((void *)v14 + 4) = *(void *)(a4 + 16);
  uint64_t v16 = &v11[48 * v10];
  long long v17 = v12 + 48;
  uint64_t v18 = (char *)*a1;
  uint64_t v19 = (char *)a1[1];
  if (v19 == *a1)
  {
    *a1 = v12;
    a1[1] = v17;
    a1[2] = v16;
  }
  else
  {
    uint64_t v20 = 0;
    do
    {
      uint64_t v21 = &v12[v20];
      long long v22 = &v19[v20];
      *((_OWORD *)v21 - 3) = *(_OWORD *)&v19[v20 - 48];
      *((_DWORD *)v21 - 6) = *(_DWORD *)&v19[v20 - 24];
      *((void *)v21 - 4) = *(void *)&v19[v20 - 32];
      *((_DWORD *)v22 - 6) = 0;
      *((_DWORD *)v21 - 2) = *(_DWORD *)&v19[v20 - 8];
      *((void *)v21 - 2) = *(void *)&v19[v20 - 16];
      *((_DWORD *)v22 - 2) = 0;
      v20 -= 48;
    }
    while (&v19[v20] != v18);
    uint64_t v19 = (char *)*a1;
    uint64_t v23 = (char *)a1[1];
    *a1 = &v12[v20];
    a1[1] = v17;
    a1[2] = v16;
    while (v23 != v19)
    {
      if (*((_DWORD *)v23 - 2) >= 0x41u)
      {
        uint64_t v24 = *((void *)v23 - 2);
        if (v24) {
          MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
        }
      }
      if (*((_DWORD *)v23 - 6) >= 0x41u)
      {
        uint64_t v25 = *((void *)v23 - 4);
        if (v25) {
          MEMORY[0x1D25D9CB0](v25, 0x1000C8000313F17);
        }
      }
      v23 -= 48;
    }
  }
  if (v19) {
    operator delete(v19);
  }
  return v12 + 48;
}

uint64_t sub_1CC14C7FC(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = result;
LABEL_2:
  unint64_t v8 = a2;
  v266 = (unint64_t *)(a2 - 48);
  unint64_t j = v7;
  while (1)
  {
    uint64_t v7 = j;
    uint64_t v10 = v8 - j;
    uint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - j) >> 4);
    if (v5 || !v4)
    {
      switch(v11)
      {
        case 0:
        case 1:
          return result;
        case 2:
          unsigned int v108 = (_OWORD *)(a2 - 48);
          unint64_t v107 = *(void *)(a2 - 48);
          if (v107 >= *(void *)j
            && (*(void *)j < v107
             || *(void *)(*(void *)(a2 - 40) & 0xFFFFFFFFFFFFFFF8) >= *(void *)(*(void *)(j + 8) & 0xFFFFFFFFFFFFFFF8)))
          {
            return result;
          }
          long long v281 = *(_OWORD *)j;
          int v109 = *(_DWORD *)(j + 24);
          uint64_t v110 = *(void *)(j + 16);
          *(_DWORD *)(j + 24) = 0;
          int v111 = *(_DWORD *)(j + 40);
          uint64_t v112 = *(void *)(j + 32);
          *(_DWORD *)(j + 40) = 0;
          *(_OWORD *)unint64_t j = *v108;
          uint64_t v113 = a2;
          *(void *)(v7 + 16) = *(void *)(a2 - 32);
          *(_DWORD *)(v7 + 24) = *(_DWORD *)(a2 - 24);
          *(_DWORD *)(a2 - 24) = 0;
          if (*(_DWORD *)(v7 + 40) >= 0x41u)
          {
            __n128 result = *(void *)(v7 + 32);
            if (result) {
              __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
            }
          }
          *(void *)(v7 + 32) = *(void *)(a2 - 16);
          *(_DWORD *)(v7 + 40) = *(_DWORD *)(a2 - 8);
          *(_DWORD *)(a2 - 8) = 0;
          *unsigned int v108 = v281;
          if (*(_DWORD *)(a2 - 24) <= 0x40u) {
            goto LABEL_135;
          }
          __n128 result = *(void *)(a2 - 32);
          if (result)
          {
            __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
            uint64_t v113 = a2;
            unsigned int v220 = *(_DWORD *)(a2 - 8);
            *(void *)(a2 - 32) = v110;
            *(_DWORD *)(a2 - 24) = v109;
            if (v220 >= 0x41)
            {
              __n128 result = *(void *)(a2 - 16);
              if (result) {
                __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
              }
            }
          }
          else
          {
            uint64_t v113 = a2;
LABEL_135:
            *(void *)(v113 - 32) = v110;
            *(_DWORD *)(v113 - 24) = v109;
          }
          *(void *)(v113 - 16) = v112;
          *(_DWORD *)(v113 - 8) = v111;
          break;
        case 3:
          return sub_1CC14E830(j, (unint64_t *)(j + 48), (uint64_t)v266);
        case 4:
          return sub_1CC14F5B0(j, (long long *)(j + 48), j + 96, (uint64_t)v266);
        case 5:
          return sub_1CC14E244(j, j + 48, j + 96, j + 144, (uint64_t)v266);
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v10 <= 1151)
    {
      uint64_t v114 = j + 48;
      BOOL v116 = j == v8 || v114 == v8;
      if (a4)
      {
        if (v116) {
          return result;
        }
        uint64_t v117 = 0;
        unint64_t v118 = j;
        while (2)
        {
          unint64_t v119 = v118;
          unint64_t v118 = v114;
          unint64_t v120 = *(void *)(v119 + 48);
          if (v120 >= *(void *)v119)
          {
            if (*(void *)v119 >= v120)
            {
              uint64_t v121 = *(void *)(v119 + 56);
              unsigned int v122 = (void *)(v121 & 0xFFFFFFFFFFFFFFF8);
              if (*(void *)(v121 & 0xFFFFFFFFFFFFFFF8) < *(void *)(*(void *)(v119 + 8) & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_157;
              }
            }
          }
          else
          {
            uint64_t v121 = *(void *)(v119 + 56);
            unsigned int v122 = (void *)(v121 & 0xFFFFFFFFFFFFFFF8);
LABEL_157:
            int v123 = *(_DWORD *)(v119 + 72);
            uint64_t v124 = *(void *)(v119 + 64);
            *(_DWORD *)(v119 + 72) = 0;
            int v125 = *(_DWORD *)(v119 + 88);
            uint64_t v126 = *(void *)(v119 + 80);
            uint64_t v127 = v117;
            *(_DWORD *)(v119 + 88) = 0;
            while (1)
            {
              uint64_t v128 = v7 + v127;
              *(_OWORD *)(v7 + v127 + 48) = *(_OWORD *)(v7 + v127);
              if (*(_DWORD *)(v7 + v127 + 72) >= 0x41u)
              {
                __n128 result = *(void *)(v128 + 64);
                if (result)
                {
                  int v267 = v125;
                  uint64_t v131 = v126;
                  int v260 = v123;
                  __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                  int v123 = v260;
                  uint64_t v126 = v131;
                  int v125 = v267;
                }
              }
              *(void *)(v128 + 64) = *(void *)(v128 + 16);
              *(_DWORD *)(v128 + 72) = *(_DWORD *)(v128 + 24);
              *(_DWORD *)(v128 + 24) = 0;
              if (*(_DWORD *)(v128 + 88) >= 0x41u)
              {
                __n128 result = *(void *)(v128 + 80);
                if (result)
                {
                  int v268 = v125;
                  uint64_t v132 = v126;
                  int v261 = v123;
                  __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                  int v123 = v261;
                  uint64_t v126 = v132;
                  int v125 = v268;
                }
              }
              uint64_t v129 = v7 + v127;
              *(void *)(v128 + 80) = *(void *)(v7 + v127 + 32);
              *(_DWORD *)(v128 + 88) = *(_DWORD *)(v7 + v127 + 40);
              *(_DWORD *)(v7 + v127 + 40) = 0;
              if (!v127)
              {
                uint64_t v133 = v7;
                goto LABEL_174;
              }
              unint64_t v130 = *(void *)(v129 - 48);
              if (v120 >= v130 && (v130 < v120 || *v122 >= *(void *)(*(void *)(v129 - 40) & 0xFFFFFFFFFFFFFFF8))) {
                break;
              }
              v127 -= 48;
            }
            uint64_t v133 = v7 + v127;
LABEL_174:
            *(void *)uint64_t v133 = v120;
            *(void *)(v133 + 8) = v121;
            if (*(_DWORD *)(v133 + 24) >= 0x41u)
            {
              __n128 result = *(void *)(v129 + 16);
              if (result)
              {
                int v134 = v125;
                uint64_t v135 = v126;
                int v136 = v123;
                __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                int v123 = v136;
                uint64_t v126 = v135;
                int v125 = v134;
              }
            }
            *(void *)(v129 + 16) = v124;
            *(_DWORD *)(v133 + 24) = v123;
            if (*(_DWORD *)(v133 + 40) >= 0x41u)
            {
              __n128 result = *(void *)(v133 + 32);
              if (result)
              {
                int v137 = v125;
                uint64_t v138 = v126;
                __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                uint64_t v126 = v138;
                int v125 = v137;
              }
            }
            *(void *)(v133 + 32) = v126;
            *(_DWORD *)(v133 + 40) = v125;
          }
          uint64_t v114 = v118 + 48;
          v117 += 48;
          if (v118 + 48 == a2) {
            return result;
          }
          continue;
        }
      }
      if (v116) {
        return result;
      }
      unint64_t v208 = j + 24;
      while (2)
      {
        uint64_t v209 = v7;
        uint64_t v7 = v114;
        unint64_t v210 = *(void *)(v209 + 48);
        if (v210 >= *(void *)v209)
        {
          if (*(void *)v209 >= v210)
          {
            uint64_t v211 = *(void *)(v209 + 56);
            v212 = (void *)(v211 & 0xFFFFFFFFFFFFFFF8);
            if (*(void *)(v211 & 0xFFFFFFFFFFFFFFF8) < *(void *)(*(void *)(v209 + 8) & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_291;
            }
          }
        }
        else
        {
          uint64_t v211 = *(void *)(v209 + 56);
          v212 = (void *)(v211 & 0xFFFFFFFFFFFFFFF8);
LABEL_291:
          int v213 = *(_DWORD *)(v209 + 72);
          uint64_t v214 = *(void *)(v209 + 64);
          *(_DWORD *)(v209 + 72) = 0;
          int v215 = *(_DWORD *)(v209 + 88);
          uint64_t v216 = *(void *)(v209 + 80);
          unint64_t v217 = v208;
          *(_DWORD *)(v209 + 88) = 0;
          while (1)
          {
            *(_OWORD *)(v217 + 24) = *(_OWORD *)(v217 - 24);
            if (*(_DWORD *)(v217 + 48) >= 0x41u)
            {
              __n128 result = *(void *)(v217 + 40);
              if (result) {
                __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
              }
            }
            *(void *)(v217 + 40) = *(void *)(v217 - 8);
            *(_DWORD *)(v217 + 48) = *(_DWORD *)v217;
            *(_DWORD *)unint64_t v217 = 0;
            if (*(_DWORD *)(v217 + 64) >= 0x41u)
            {
              __n128 result = *(void *)(v217 + 56);
              if (result) {
                __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
              }
            }
            *(void *)(v217 + 56) = *(void *)(v217 + 8);
            *(_DWORD *)(v217 + 64) = *(_DWORD *)(v217 + 16);
            *(_DWORD *)(v217 + 16) = 0;
            unint64_t v218 = *(void *)(v217 - 72);
            if (v210 >= v218 && (v218 < v210 || *v212 >= *(void *)(*(void *)(v217 - 64) & 0xFFFFFFFFFFFFFFF8))) {
              break;
            }
            v217 -= 48;
          }
          *(void *)(v217 - 24) = v210;
          *(void *)(v217 - 16) = v211;
          if (*(_DWORD *)v217 >= 0x41u && (__n128 result = *(void *)(v217 - 8)) != 0)
          {
            __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
            unsigned int v219 = *(_DWORD *)(v217 + 16);
            *(void *)(v217 - 8) = v214;
            *(_DWORD *)unint64_t v217 = v213;
            if (v219 >= 0x41)
            {
              __n128 result = *(void *)(v217 + 8);
              if (result) {
                __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
              }
            }
          }
          else
          {
            *(void *)(v217 - 8) = v214;
            *(_DWORD *)unint64_t v217 = v213;
          }
          *(void *)(v217 + 8) = v216;
          *(_DWORD *)(v217 + 16) = v215;
        }
        uint64_t v114 = v7 + 48;
        v208 += 48;
        if (v7 + 48 == a2) {
          return result;
        }
        continue;
      }
    }
    if (!a3) {
      break;
    }
    unint64_t v12 = (unint64_t)v11 >> 1;
    unsigned int v13 = (unint64_t *)(j + 48 * ((unint64_t)v11 >> 1));
    if ((unint64_t)v10 >= 0x1801)
    {
      sub_1CC14E830(v7, (unint64_t *)(v7 + 48 * ((unint64_t)v11 >> 1)), (uint64_t)v266);
      uint64_t v14 = 3 * v12;
      uint64_t v15 = v7 + 16 * v14;
      sub_1CC14E830(v7 + 48, (unint64_t *)(v15 - 48), a2 - 96);
      sub_1CC14E830(v7 + 96, (unint64_t *)(v7 + 48 + 16 * v14), a2 - 144);
      __n128 result = sub_1CC14E830(v15 - 48, v13, v7 + 48 + 16 * v14);
      long long v278 = *(_OWORD *)v7;
      int v16 = *(_DWORD *)(v7 + 24);
      uint64_t v17 = *(void *)(v7 + 16);
      *(_DWORD *)(v7 + 24) = 0;
      int v18 = *(_DWORD *)(v7 + 40);
      uint64_t v19 = *(void *)(v7 + 32);
      *(_DWORD *)(v7 + 40) = 0;
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v13;
      *(void *)(v7 + 16) = *(void *)(v15 + 16);
      *(_DWORD *)(v7 + 24) = *(_DWORD *)(v15 + 24);
      *(_DWORD *)(v15 + 24) = 0;
      *(void *)(v7 + 32) = *(void *)(v15 + 32);
      *(_DWORD *)(v7 + 40) = *(_DWORD *)(v15 + 40);
      *(_DWORD *)(v15 + 40) = 0;
      *(_OWORD *)unsigned int v13 = v278;
      *(void *)(v15 + 16) = v17;
      *(_DWORD *)(v15 + 24) = v16;
      *(void *)(v15 + 32) = v19;
      *(_DWORD *)(v15 + 40) = v18;
    }
    else
    {
      __n128 result = sub_1CC14E830(v7 + 48 * ((unint64_t)v11 >> 1), (unint64_t *)v7, (uint64_t)v266);
    }
    --a3;
    unint64_t v20 = *(void *)v7;
    if ((a4 & 1) != 0
      || (unint64_t v21 = *(void *)(v7 - 48), v21 < v20)
      || (uint64_t v22 = *(void *)(v7 + 8), v20 >= v21)
      && *(void *)(*(void *)(v7 - 40) & 0xFFFFFFFFFFFFFFF8) < *(void *)(v22 & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v23 = 0;
      int v24 = *(_DWORD *)(v7 + 24);
      uint64_t v26 = *(void *)(v7 + 8);
      uint64_t v25 = *(void *)(v7 + 16);
      *(_DWORD *)(v7 + 24) = 0;
      int v27 = *(_DWORD *)(v7 + 40);
      uint64_t v28 = *(void *)(v7 + 32);
      *(_DWORD *)(v7 + 40) = 0;
      BOOL v29 = (void *)(v26 & 0xFFFFFFFFFFFFFFF8);
      while (1)
      {
        unint64_t v30 = *(void *)(v7 + v23 + 48);
        if (v30 >= v20 && (v20 < v30 || *(void *)(*(void *)(v7 + v23 + 56) & 0xFFFFFFFFFFFFFFF8) >= *v29)) {
          break;
        }
        v23 += 48;
      }
      unint64_t v31 = v7 + v23 + 48;
      if (v23)
      {
        unint64_t v32 = a2 - 48;
        for (unint64_t i = *v266; i >= v20 && (v20 < i || *(void *)(*(void *)(v32 + 8) & 0xFFFFFFFFFFFFFFF8) >= *v29); unint64_t i = v34)
        {
          unint64_t v34 = *(void *)(v32 - 48);
          v32 -= 48;
        }
      }
      else
      {
        unint64_t v32 = v8;
        if (v31 < v8)
        {
          unint64_t v32 = a2 - 48;
          unint64_t v35 = *v266;
          if (*v266 >= v20)
          {
            unint64_t v32 = a2 - 48;
            do
            {
              if (v20 >= v35)
              {
                if (v31 >= v32 || *(void *)(*(void *)(v32 + 8) & 0xFFFFFFFFFFFFFFF8) < *v29) {
                  break;
                }
              }
              else if (v31 >= v32)
              {
                break;
              }
              unint64_t v36 = *(void *)(v32 - 48);
              v32 -= 48;
              unint64_t v35 = v36;
            }
            while (v36 >= v20);
          }
        }
      }
      uint64_t v257 = a3;
      unint64_t j = v31;
      if (v31 < v32)
      {
        unint64_t v37 = v32;
        do
        {
          long long v279 = *(_OWORD *)j;
          int v38 = *(_DWORD *)(j + 24);
          uint64_t v39 = *(void *)(j + 16);
          *(_DWORD *)(j + 24) = 0;
          int v40 = *(_DWORD *)(j + 40);
          uint64_t v41 = *(void *)(j + 32);
          *(_DWORD *)(j + 40) = 0;
          *(_OWORD *)unint64_t j = *(_OWORD *)v37;
          *(void *)(j + 16) = *(void *)(v37 + 16);
          *(_DWORD *)(j + 24) = *(_DWORD *)(v37 + 24);
          *(_DWORD *)(v37 + 24) = 0;
          if (*(_DWORD *)(j + 40) >= 0x41u)
          {
            uint64_t v46 = *(void *)(j + 32);
            if (v46)
            {
              int v240 = v27;
              uint64_t v221 = v25;
              uint64_t v223 = v28;
              int v234 = v24;
              unint64_t v225 = v31;
              uint64_t v228 = v26;
              MEMORY[0x1D25D9CB0](v46, 0x1000C8000313F17);
              unint64_t v31 = v225;
              uint64_t v26 = v228;
              uint64_t v25 = v221;
              uint64_t v28 = v223;
              int v24 = v234;
              int v27 = v240;
            }
          }
          *(void *)(j + 32) = *(void *)(v37 + 32);
          *(_DWORD *)(j + 40) = *(_DWORD *)(v37 + 40);
          *(_DWORD *)(v37 + 40) = 0;
          *(_OWORD *)unint64_t v37 = v279;
          if (*(_DWORD *)(v37 + 24) > 0x40u)
          {
            unint64_t v226 = v31;
            uint64_t v229 = v26;
            uint64_t v222 = v25;
            uint64_t v224 = v28;
            int v235 = v24;
            int v241 = v27;
            uint64_t v47 = *(void *)(v37 + 16);
            if (v47)
            {
              MEMORY[0x1D25D9CB0](v47, 0x1000C8000313F17);
              unsigned int v48 = *(_DWORD *)(v37 + 40);
              *(void *)(v37 + 16) = v39;
              *(_DWORD *)(v37 + 24) = v38;
              int v27 = v241;
              uint64_t v25 = v222;
              uint64_t v28 = v224;
              int v24 = v235;
              unint64_t v31 = v226;
              uint64_t v26 = v229;
              if (v48 >= 0x41)
              {
                uint64_t v49 = *(void *)(v37 + 32);
                if (v49)
                {
                  MEMORY[0x1D25D9CB0](v49, 0x1000C8000313F17);
                  unint64_t v31 = v226;
                  uint64_t v26 = v229;
                  uint64_t v25 = v222;
                  uint64_t v28 = v224;
                  int v24 = v235;
                  int v27 = v241;
                }
              }
            }
            else
            {
              *(void *)(v37 + 16) = v39;
              *(_DWORD *)(v37 + 24) = v38;
            }
          }
          else
          {
            *(void *)(v37 + 16) = v39;
            *(_DWORD *)(v37 + 24) = v38;
          }
          *(void *)(v37 + 32) = v41;
          *(_DWORD *)(v37 + 40) = v40;
          do
          {
            do
            {
              unint64_t v43 = *(void *)(j + 48);
              j += 48;
              unint64_t v42 = v43;
            }
            while (v43 < v20);
          }
          while (v20 >= v42 && *(void *)(*(void *)(j + 8) & 0xFFFFFFFFFFFFFFF8) < *v29);
          do
          {
            unint64_t v45 = *(void *)(v37 - 48);
            v37 -= 48;
            unint64_t v44 = v45;
          }
          while (v45 >= v20 && (v20 < v44 || *(void *)(*(void *)(v37 + 8) & 0xFFFFFFFFFFFFFFF8) >= *v29));
        }
        while (j < v37);
      }
      unint64_t v8 = a2;
      a3 = v257;
      if (j - 48 != v7)
      {
        *(_OWORD *)uint64_t v7 = *(_OWORD *)(j - 48);
        if (*(_DWORD *)(v7 + 24) >= 0x41u)
        {
          uint64_t v83 = *(void *)(v7 + 16);
          if (v83)
          {
            int v244 = v27;
            uint64_t v84 = v28;
            int v238 = v24;
            uint64_t v85 = v25;
            uint64_t v232 = v26;
            unint64_t v86 = v31;
            MEMORY[0x1D25D9CB0](v83, 0x1000C8000313F17);
            unint64_t v31 = v86;
            uint64_t v26 = v232;
            uint64_t v25 = v85;
            int v24 = v238;
            uint64_t v28 = v84;
            int v27 = v244;
          }
        }
        *(void *)(v7 + 16) = *(void *)(j - 32);
        *(_DWORD *)(v7 + 24) = *(_DWORD *)(j - 24);
        *(_DWORD *)(j - 24) = 0;
        if (*(_DWORD *)(v7 + 40) >= 0x41u)
        {
          uint64_t v87 = *(void *)(v7 + 32);
          if (v87)
          {
            int v245 = v27;
            uint64_t v88 = v28;
            int v239 = v24;
            uint64_t v89 = v25;
            uint64_t v233 = v26;
            unint64_t v90 = v31;
            MEMORY[0x1D25D9CB0](v87, 0x1000C8000313F17);
            unint64_t v31 = v90;
            uint64_t v26 = v233;
            uint64_t v25 = v89;
            int v24 = v239;
            uint64_t v28 = v88;
            int v27 = v245;
          }
        }
        *(void *)(v7 + 32) = *(void *)(j - 16);
        *(_DWORD *)(v7 + 40) = *(_DWORD *)(j - 8);
        *(_DWORD *)(j - 8) = 0;
      }
      *(void *)(j - 48) = v20;
      *(void *)(j - 40) = v26;
      if (*(_DWORD *)(j - 24) >= 0x41u)
      {
        uint64_t v74 = *(void *)(j - 32);
        if (v74)
        {
          int v75 = v27;
          uint64_t v76 = v28;
          int v77 = v24;
          uint64_t v78 = v25;
          unint64_t v227 = v31;
          MEMORY[0x1D25D9CB0](v74, 0x1000C8000313F17);
          unint64_t v31 = v227;
          uint64_t v25 = v78;
          int v24 = v77;
          uint64_t v28 = v76;
          int v27 = v75;
        }
      }
      *(void *)(j - 32) = v25;
      *(_DWORD *)(j - 24) = v24;
      if (*(_DWORD *)(j - 8) >= 0x41u)
      {
        uint64_t v79 = *(void *)(j - 16);
        if (v79)
        {
          int v80 = v27;
          uint64_t v81 = v28;
          unint64_t v82 = v31;
          MEMORY[0x1D25D9CB0](v79, 0x1000C8000313F17);
          unint64_t v31 = v82;
          uint64_t v28 = v81;
          int v27 = v80;
        }
      }
      *(void *)(j - 16) = v28;
      *(_DWORD *)(j - 8) = v27;
      if (v31 < v32) {
        goto LABEL_64;
      }
      BOOL v50 = sub_1CC14F074(v7, j - 48);
      __n128 result = sub_1CC14F074(j, a2);
      if (result)
      {
        a2 = j - 48;
        if (v50) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v50)
      {
LABEL_64:
        __n128 result = sub_1CC14C7FC(v7, j - 48, v257, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      int v51 = *(_DWORD *)(v7 + 24);
      uint64_t v52 = *(void *)(v7 + 16);
      *(_DWORD *)(v7 + 24) = 0;
      int v53 = *(_DWORD *)(v7 + 40);
      uint64_t v54 = *(void *)(v7 + 32);
      *(_DWORD *)(v7 + 40) = 0;
      unint64_t v55 = *v266;
      int64_t v56 = (void *)(v22 & 0xFFFFFFFFFFFFFFF8);
      if (v20 < *v266 || v55 >= v20 && *v56 < *(void *)(*(void *)(v8 - 40) & 0xFFFFFFFFFFFFFFF8))
      {
        unint64_t j = v7;
        do
        {
          unint64_t v58 = *(void *)(j + 48);
          j += 48;
          unint64_t v57 = v58;
        }
        while (v20 >= v58 && (v57 < v20 || *v56 >= *(void *)(*(void *)(j + 8) & 0xFFFFFFFFFFFFFFF8)));
      }
      else
      {
        for (unint64_t j = v7 + 48;
              j < v8
           && v20 >= *(void *)j
           && (*(void *)j < v20 || *v56 >= *(void *)(*(void *)(j + 8) & 0xFFFFFFFFFFFFFFF8));
      }
      unint64_t k = v8;
      if (j < v8)
      {
        for (unint64_t k = a2 - 48;
              v20 < v55
           || v55 >= v20
           && *(void *)(v22 & 0xFFFFFFFFFFFFFFF8) < *(void *)(*(void *)(k + 8) & 0xFFFFFFFFFFFFFFF8);
              k -= 48)
        {
          unint64_t v60 = *(void *)(k - 48);
          unint64_t v55 = v60;
        }
      }
      if (j < k)
      {
        unsigned int v61 = (void *)(v22 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v62 = a3;
          long long v280 = *(_OWORD *)j;
          int v63 = *(_DWORD *)(j + 24);
          uint64_t v64 = *(void *)(j + 16);
          *(_DWORD *)(j + 24) = 0;
          int v65 = *(_DWORD *)(j + 40);
          uint64_t v66 = *(void *)(j + 32);
          *(_DWORD *)(j + 40) = 0;
          *(_OWORD *)unint64_t j = *(_OWORD *)k;
          *(void *)(j + 16) = *(void *)(k + 16);
          *(_DWORD *)(j + 24) = *(_DWORD *)(k + 24);
          *(_DWORD *)(k + 24) = 0;
          if (*(_DWORD *)(j + 40) >= 0x41u)
          {
            __n128 result = *(void *)(j + 32);
            if (result)
            {
              int v258 = v53;
              uint64_t v251 = v54;
              int v242 = v51;
              uint64_t v230 = v22;
              uint64_t v236 = v52;
              __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
              uint64_t v22 = v230;
              uint64_t v52 = v236;
              int v51 = v242;
              uint64_t v54 = v251;
              int v53 = v258;
            }
          }
          *(void *)(j + 32) = *(void *)(k + 32);
          *(_DWORD *)(j + 40) = *(_DWORD *)(k + 40);
          *(_DWORD *)(k + 40) = 0;
          *(_OWORD *)unint64_t k = v280;
          if (*(_DWORD *)(k + 24) > 0x40u)
          {
            uint64_t v231 = v22;
            uint64_t v237 = v52;
            int v243 = v51;
            uint64_t v252 = v54;
            int v259 = v53;
            __n128 result = *(void *)(k + 16);
            if (result)
            {
              __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
              unsigned int v72 = *(_DWORD *)(k + 40);
              *(void *)(k + 16) = v64;
              *(_DWORD *)(k + 24) = v63;
              int v53 = v259;
              uint64_t v54 = v252;
              int v51 = v243;
              uint64_t v22 = v231;
              uint64_t v52 = v237;
              if (v72 >= 0x41)
              {
                __n128 result = *(void *)(k + 32);
                if (result)
                {
                  __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                  uint64_t v22 = v231;
                  uint64_t v52 = v237;
                  int v51 = v243;
                  uint64_t v54 = v252;
                  int v53 = v259;
                }
              }
            }
            else
            {
              *(void *)(k + 16) = v64;
              *(_DWORD *)(k + 24) = v63;
            }
          }
          else
          {
            *(void *)(k + 16) = v64;
            *(_DWORD *)(k + 24) = v63;
          }
          *(void *)(k + 32) = v66;
          *(_DWORD *)(k + 40) = v65;
          unint64_t v68 = *(void *)(j + 48);
          j += 48;
          unint64_t v67 = v68;
          a3 = v62;
          while (v20 >= v67 && (v67 < v20 || *v61 >= *(void *)(*(void *)(j + 8) & 0xFFFFFFFFFFFFFFF8)))
          {
            unint64_t v69 = *(void *)(j + 48);
            j += 48;
            unint64_t v67 = v69;
          }
          do
          {
            do
            {
              unint64_t v71 = *(void *)(k - 48);
              k -= 48;
              unint64_t v70 = v71;
            }
            while (v20 < v71);
          }
          while (v70 >= v20 && *v61 < *(void *)(*(void *)(k + 8) & 0xFFFFFFFFFFFFFFF8));
        }
        while (j < k);
      }
      if (j - 48 != v7)
      {
        *(_OWORD *)uint64_t v7 = *(_OWORD *)(j - 48);
        if (*(_DWORD *)(v7 + 24) >= 0x41u)
        {
          __n128 result = *(void *)(v7 + 16);
          if (result)
          {
            int v97 = v53;
            uint64_t v98 = v54;
            int v99 = v51;
            uint64_t v100 = v52;
            uint64_t v101 = v22;
            __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
            uint64_t v22 = v101;
            uint64_t v52 = v100;
            int v51 = v99;
            uint64_t v54 = v98;
            int v53 = v97;
          }
        }
        *(void *)(v7 + 16) = *(void *)(j - 32);
        *(_DWORD *)(v7 + 24) = *(_DWORD *)(j - 24);
        *(_DWORD *)(j - 24) = 0;
        if (*(_DWORD *)(v7 + 40) >= 0x41u)
        {
          __n128 result = *(void *)(v7 + 32);
          if (result)
          {
            int v102 = v53;
            uint64_t v103 = v54;
            int v104 = v51;
            uint64_t v105 = v52;
            uint64_t v106 = v22;
            __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
            uint64_t v22 = v106;
            uint64_t v52 = v105;
            int v51 = v104;
            uint64_t v54 = v103;
            int v53 = v102;
          }
        }
        *(void *)(v7 + 32) = *(void *)(j - 16);
        *(_DWORD *)(v7 + 40) = *(_DWORD *)(j - 8);
        *(_DWORD *)(j - 8) = 0;
      }
      *(void *)(j - 48) = v20;
      *(void *)(j - 40) = v22;
      unint64_t v8 = a2;
      if (*(_DWORD *)(j - 24) >= 0x41u)
      {
        __n128 result = *(void *)(j - 32);
        if (result)
        {
          int v91 = v53;
          uint64_t v92 = v54;
          int v93 = v51;
          uint64_t v94 = v52;
          __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
          uint64_t v52 = v94;
          int v51 = v93;
          uint64_t v54 = v92;
          int v53 = v91;
        }
      }
      *(void *)(j - 32) = v52;
      *(_DWORD *)(j - 24) = v51;
      unsigned int v73 = *(_DWORD *)(j - 8);
      BOOL v4 = v73 >= 0x41;
      BOOL v5 = v73 == 65;
      if (v73 >= 0x41)
      {
        __n128 result = *(void *)(j - 16);
        if (result)
        {
          int v95 = v53;
          uint64_t v96 = v54;
          __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
          uint64_t v54 = v96;
          int v53 = v95;
        }
      }
      a4 = 0;
      *(void *)(j - 16) = v54;
      *(_DWORD *)(j - 8) = v53;
    }
  }
  if (j != v8)
  {
    int64_t v139 = (unint64_t)(v11 - 2) >> 1;
    int64_t v140 = v139;
    while (2)
    {
      int64_t v141 = v140;
      if (v139 >= v140)
      {
        uint64_t v142 = (2 * v140) | 1;
        unsigned int v143 = (unint64_t *)(v7 + 48 * v142);
        if (2 * v140 + 2 < v11)
        {
          unint64_t v144 = v143[6];
          if (*v143 < v144
            || v144 >= *v143
            && *(void *)(*(void *)(v7 + 48 * v142 + 8) & 0xFFFFFFFFFFFFFFF8) < *(void *)(v143[7] & 0xFFFFFFFFFFFFFFF8))
          {
            v143 += 6;
            uint64_t v142 = 2 * v140 + 2;
          }
        }
        uint64_t v145 = v7 + 48 * v140;
        unint64_t v146 = *(void *)v145;
        if (*v143 >= *(void *)v145)
        {
          unint64_t v147 = *(void *)(v7 + 48 * v140 + 8);
          if (v146 >= *v143)
          {
            unsigned int v148 = (void *)(v147 & 0xFFFFFFFFFFFFFFF8);
            if (*(void *)(v143[1] & 0xFFFFFFFFFFFFFFF8) >= *(void *)(v147 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_195;
            }
          }
          else
          {
            unsigned int v148 = (void *)(v147 & 0xFFFFFFFFFFFFFFF8);
LABEL_195:
            unsigned int v149 = 0;
            uint64_t v150 = v7 + 48 * v140;
            int v151 = *(_DWORD *)(v150 + 24);
            unint64_t v152 = *(void *)(v150 + 16);
            *(_DWORD *)(v150 + 24) = 0;
            int v153 = *(_DWORD *)(v150 + 40);
            unint64_t v154 = *(void *)(v150 + 32);
            *(_DWORD *)(v150 + 40) = 0;
            while (1)
            {
              *(_OWORD *)uint64_t v145 = *(_OWORD *)v143;
              if (v149 >= 0x41)
              {
                __n128 result = *(void *)(v145 + 16);
                if (result)
                {
                  unint64_t v246 = v152;
                  uint64_t v269 = v11;
                  int v262 = v153;
                  unint64_t v253 = v154;
                  int v248 = v151;
                  __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                  unint64_t v152 = v246;
                  int v151 = v248;
                  unint64_t v154 = v253;
                  int v153 = v262;
                  uint64_t v11 = v269;
                }
              }
              *(void *)(v145 + 16) = v143[2];
              *(_DWORD *)(v145 + 24) = *((_DWORD *)v143 + 6);
              *((_DWORD *)v143 + 6) = 0;
              if (*(_DWORD *)(v145 + 40) >= 0x41u)
              {
                __n128 result = *(void *)(v145 + 32);
                if (result)
                {
                  unint64_t v247 = v152;
                  uint64_t v270 = v11;
                  int v263 = v153;
                  unint64_t v254 = v154;
                  int v249 = v151;
                  __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                  unint64_t v152 = v247;
                  int v151 = v249;
                  unint64_t v154 = v254;
                  int v153 = v263;
                  uint64_t v11 = v270;
                }
              }
              *(void *)(v145 + 32) = v143[4];
              *(_DWORD *)(v145 + 40) = *((_DWORD *)v143 + 10);
              *((_DWORD *)v143 + 10) = 0;
              if (v139 < v142) {
                break;
              }
              uint64_t v155 = (2 * v142) | 1;
              unsigned int v156 = (unint64_t *)(v7 + 48 * v155);
              if (2 * v142 + 2 < v11)
              {
                unint64_t v157 = v156[6];
                if (*v156 < v157
                  || v157 >= *v156
                  && *(void *)(*(void *)(v7 + 48 * v155 + 8) & 0xFFFFFFFFFFFFFFF8) < *(void *)(v156[7] & 0xFFFFFFFFFFFFFFF8))
                {
                  v156 += 6;
                  uint64_t v155 = 2 * v142 + 2;
                }
              }
              if (*v156 < v146 || v146 >= *v156 && *(void *)(v156[1] & 0xFFFFFFFFFFFFFFF8) < *v148) {
                break;
              }
              unsigned int v149 = *((_DWORD *)v143 + 6);
              uint64_t v145 = (uint64_t)v143;
              unsigned int v143 = v156;
              uint64_t v142 = v155;
            }
            unint64_t *v143 = v146;
            v143[1] = v147;
            if (*((_DWORD *)v143 + 6) >= 0x41u && (__n128 result = v143[2]) != 0)
            {
              unint64_t v158 = v152;
              uint64_t v159 = v11;
              int v160 = v153;
              unint64_t v161 = v154;
              int v162 = v151;
              __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
              unint64_t v154 = v161;
              int v153 = v160;
              uint64_t v11 = v159;
              unsigned int v163 = *((_DWORD *)v143 + 10);
              v143[2] = v158;
              *((_DWORD *)v143 + 6) = v162;
              if (v163 >= 0x41)
              {
                __n128 result = v143[4];
                if (result)
                {
                  __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                  unint64_t v154 = v161;
                  int v153 = v160;
                  uint64_t v11 = v159;
                }
              }
            }
            else
            {
              v143[2] = v152;
              *((_DWORD *)v143 + 6) = v151;
            }
            v143[4] = v154;
            *((_DWORD *)v143 + 10) = v153;
          }
        }
      }
      int64_t v140 = v141 - 1;
      if (v141) {
        continue;
      }
      break;
    }
    while (2)
    {
      uint64_t v164 = 0;
      uint64_t v165 = a2;
      long long v282 = *(_OWORD *)v7;
      int v166 = *(_DWORD *)(v7 + 24);
      uint64_t v167 = *(void *)(v7 + 16);
      *(_DWORD *)(v7 + 24) = 0;
      int v168 = *(_DWORD *)(v7 + 40);
      uint64_t v169 = *(void *)(v7 + 32);
      *(_DWORD *)(v7 + 40) = 0;
      int64_t v170 = (unint64_t)(v11 - 2) >> 1;
      uint64_t v171 = v7;
      do
      {
        uint64_t v172 = v171;
        uint64_t v173 = v164 + 1;
        v171 += 48 * (v164 + 1);
        uint64_t v174 = 2 * v164;
        uint64_t v164 = (2 * v164) | 1;
        uint64_t v175 = v174 + 2;
        if (v175 < v11)
        {
          unint64_t v176 = *(void *)(v171 + 48);
          if (*(void *)v171 < v176
            || v176 >= *(void *)v171
            && *(void *)(*(void *)(v172 + 48 * v173 + 8) & 0xFFFFFFFFFFFFFFF8) < *(void *)(*(void *)(v171 + 56) & 0xFFFFFFFFFFFFFFF8))
          {
            v171 += 48;
            uint64_t v164 = v175;
          }
        }
        *(_OWORD *)uint64_t v172 = *(_OWORD *)v171;
        if (*(_DWORD *)(v172 + 24) >= 0x41u)
        {
          __n128 result = *(void *)(v172 + 16);
          if (result)
          {
            uint64_t v271 = v11;
            int v276 = v168;
            __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
            int v168 = v276;
            uint64_t v11 = v271;
          }
        }
        *(void *)(v172 + 16) = *(void *)(v171 + 16);
        *(_DWORD *)(v172 + 24) = *(_DWORD *)(v171 + 24);
        *(_DWORD *)(v171 + 24) = 0;
        if (*(_DWORD *)(v172 + 40) >= 0x41u)
        {
          __n128 result = *(void *)(v172 + 32);
          if (result)
          {
            uint64_t v272 = v11;
            int v277 = v168;
            __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
            int v168 = v277;
            uint64_t v11 = v272;
          }
        }
        *(void *)(v172 + 32) = *(void *)(v171 + 32);
        *(_DWORD *)(v172 + 40) = *(_DWORD *)(v171 + 40);
        *(_DWORD *)(v171 + 40) = 0;
      }
      while (v164 <= v170);
      v177 = (_OWORD *)(v165 - 48);
      a2 = v165 - 48;
      if (v171 == v165 - 48)
      {
        *(_OWORD *)uint64_t v171 = v282;
        if (*(_DWORD *)(v171 + 24) >= 0x41u && (__n128 result = *(void *)(v171 + 16)) != 0)
        {
          uint64_t v201 = v11;
          int v202 = v168;
          __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
          int v168 = v202;
          uint64_t v11 = v201;
          unsigned int v203 = *(_DWORD *)(v171 + 40);
          *(void *)(v171 + 16) = v167;
          *(_DWORD *)(v171 + 24) = v166;
          if (v203 >= 0x41)
          {
            __n128 result = *(void *)(v171 + 32);
            if (result)
            {
              __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
              int v168 = v202;
              uint64_t v11 = v201;
            }
          }
        }
        else
        {
          *(void *)(v171 + 16) = v167;
          *(_DWORD *)(v171 + 24) = v166;
        }
        *(void *)(v171 + 32) = v169;
        *(_DWORD *)(v171 + 40) = v168;
      }
      else
      {
        *(_OWORD *)uint64_t v171 = *v177;
        if (*(_DWORD *)(v171 + 24) >= 0x41u)
        {
          __n128 result = *(void *)(v171 + 16);
          if (result)
          {
            uint64_t v194 = v11;
            int v195 = v168;
            __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
            int v168 = v195;
            uint64_t v11 = v194;
          }
        }
        *(void *)(v171 + 16) = *(void *)(v165 - 32);
        *(_DWORD *)(v171 + 24) = *(_DWORD *)(v165 - 24);
        *(_DWORD *)(v165 - 24) = 0;
        if (*(_DWORD *)(v171 + 40) >= 0x41u)
        {
          __n128 result = *(void *)(v171 + 32);
          if (result)
          {
            uint64_t v196 = v11;
            int v197 = v168;
            __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
            int v168 = v197;
            uint64_t v11 = v196;
          }
        }
        *(void *)(v171 + 32) = *(void *)(v165 - 16);
        *(_DWORD *)(v171 + 40) = *(_DWORD *)(v165 - 8);
        *(_DWORD *)(v165 - 8) = 0;
        _OWORD *v177 = v282;
        if (*(_DWORD *)(v165 - 24) > 0x40u)
        {
          int v198 = v168;
          uint64_t v199 = v11;
          __n128 result = *(void *)(v165 - 32);
          if (result)
          {
            __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
            unsigned int v200 = *(_DWORD *)(v165 - 8);
            *(void *)(v165 - 32) = v167;
            *(_DWORD *)(v165 - 24) = v166;
            uint64_t v11 = v199;
            int v168 = v198;
            if (v200 >= 0x41)
            {
              __n128 result = *(void *)(v165 - 16);
              if (result)
              {
                __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                int v168 = v198;
                uint64_t v11 = v199;
              }
            }
          }
          else
          {
            *(void *)(v165 - 32) = v167;
            *(_DWORD *)(v165 - 24) = v166;
          }
        }
        else
        {
          *(void *)(v165 - 32) = v167;
          *(_DWORD *)(v165 - 24) = v166;
        }
        *(void *)(v165 - 16) = v169;
        *(_DWORD *)(v165 - 8) = v168;
        uint64_t v178 = v171 + 48 - v7;
        if (v178 >= 49)
        {
          unint64_t v179 = (v178 / 0x30uLL - 2) >> 1;
          unint64_t v180 = v7 + 48 * v179;
          unint64_t v181 = *(void *)v171;
          if (*(void *)v180 >= *(void *)v171)
          {
            if (v181 >= *(void *)v180)
            {
              uint64_t v182 = *(void *)(v171 + 8);
              v183 = (void *)(v182 & 0xFFFFFFFFFFFFFFF8);
              if (*(void *)(*(void *)(v180 + 8) & 0xFFFFFFFFFFFFFFF8) < *(void *)(v182 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_243;
              }
            }
          }
          else
          {
            uint64_t v182 = *(void *)(v171 + 8);
            v183 = (void *)(v182 & 0xFFFFFFFFFFFFFFF8);
LABEL_243:
            unsigned int v184 = 0;
            int v185 = *(_DWORD *)(v171 + 24);
            uint64_t v186 = *(void *)(v171 + 16);
            *(_DWORD *)(v171 + 24) = 0;
            int v187 = *(_DWORD *)(v171 + 40);
            uint64_t v188 = *(void *)(v171 + 32);
            *(_DWORD *)(v171 + 40) = 0;
            while (1)
            {
              *(_OWORD *)uint64_t v171 = *(_OWORD *)v180;
              if (v184 >= 0x41)
              {
                __n128 result = *(void *)(v171 + 16);
                if (result)
                {
                  uint64_t v273 = v11;
                  int v264 = v187;
                  uint64_t v255 = v188;
                  __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                  uint64_t v188 = v255;
                  int v187 = v264;
                  uint64_t v11 = v273;
                }
              }
              *(void *)(v171 + 16) = *(void *)(v180 + 16);
              *(_DWORD *)(v171 + 24) = *(_DWORD *)(v180 + 24);
              *(_DWORD *)(v180 + 24) = 0;
              if (*(_DWORD *)(v171 + 40) >= 0x41u)
              {
                __n128 result = *(void *)(v171 + 32);
                if (result)
                {
                  uint64_t v274 = v11;
                  int v265 = v187;
                  uint64_t v256 = v188;
                  __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                  uint64_t v188 = v256;
                  int v187 = v265;
                  uint64_t v11 = v274;
                }
              }
              *(void *)(v171 + 32) = *(void *)(v180 + 32);
              *(_DWORD *)(v171 + 40) = *(_DWORD *)(v180 + 40);
              *(_DWORD *)(v180 + 40) = 0;
              if (!v179) {
                break;
              }
              unint64_t v179 = (v179 - 1) >> 1;
              v189 = (unint64_t *)(v7 + 48 * v179);
              unint64_t v192 = *v189;
              v190 = v189 + 1;
              unint64_t v191 = v192;
              if (v192 >= v181 && (v181 < v191 || *(void *)(*v190 & 0xFFFFFFFFFFFFFFF8) >= *v183)) {
                break;
              }
              unsigned int v184 = *(_DWORD *)(v180 + 24);
              uint64_t v171 = v180;
              unint64_t v180 = v7 + 48 * v179;
            }
            *(void *)unint64_t v180 = v181;
            *(void *)(v180 + 8) = v182;
            if (*(_DWORD *)(v180 + 24) >= 0x41u && (__n128 result = *(void *)(v180 + 16)) != 0)
            {
              uint64_t v204 = v11;
              int v205 = v187;
              uint64_t v206 = v188;
              __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
              uint64_t v188 = v206;
              int v187 = v205;
              uint64_t v11 = v204;
              unsigned int v207 = *(_DWORD *)(v180 + 40);
              *(void *)(v180 + 16) = v186;
              *(_DWORD *)(v180 + 24) = v185;
              if (v207 >= 0x41)
              {
                __n128 result = *(void *)(v180 + 32);
                if (result)
                {
                  __n128 result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                  uint64_t v188 = v206;
                  int v187 = v205;
                  uint64_t v11 = v204;
                }
              }
            }
            else
            {
              *(void *)(v180 + 16) = v186;
              *(_DWORD *)(v180 + 24) = v185;
            }
            *(void *)(v180 + 32) = v188;
            *(_DWORD *)(v180 + 40) = v187;
          }
        }
      }
      if (v11-- <= 2) {
        return result;
      }
      continue;
    }
  }
  return result;
}

uint64_t sub_1CC14E244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_1CC14F5B0(a1, (long long *)a2, a3, a4);
  if (*(void *)a5 < *(void *)a4
    || *(void *)a4 >= *(void *)a5
    && *(void *)(*(void *)(a5 + 8) & 0xFFFFFFFFFFFFFFF8) < *(void *)(*(void *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    long long v52 = *(_OWORD *)a4;
    int v11 = *(_DWORD *)(a4 + 24);
    uint64_t v12 = *(void *)(a4 + 16);
    *(_DWORD *)(a4 + 24) = 0;
    int v13 = *(_DWORD *)(a4 + 40);
    uint64_t v14 = *(void *)(a4 + 32);
    *(_DWORD *)(a4 + 40) = 0;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(void *)(a4 + 16) = *(void *)(a5 + 16);
    *(_DWORD *)(a4 + 24) = *(_DWORD *)(a5 + 24);
    *(_DWORD *)(a5 + 24) = 0;
    if (*(_DWORD *)(a4 + 40) >= 0x41u)
    {
      uint64_t result = *(void *)(a4 + 32);
      if (result)
      {
        int v39 = v13;
        uint64_t v45 = v14;
        int v35 = v11;
        uint64_t v33 = v12;
        uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
        uint64_t v12 = v33;
        int v11 = v35;
        uint64_t v14 = v45;
        int v13 = v39;
      }
    }
    *(void *)(a4 + 32) = *(void *)(a5 + 32);
    *(_DWORD *)(a4 + 40) = *(_DWORD *)(a5 + 40);
    *(_DWORD *)(a5 + 40) = 0;
    *(_OWORD *)a5 = v52;
    if (*(_DWORD *)(a5 + 24) > 0x40u)
    {
      uint64_t v34 = v12;
      int v36 = v11;
      uint64_t v46 = v14;
      int v40 = v13;
      uint64_t result = *(void *)(a5 + 16);
      if (result)
      {
        uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
        unsigned int v27 = *(_DWORD *)(a5 + 40);
        *(void *)(a5 + 16) = v34;
        *(_DWORD *)(a5 + 24) = v36;
        BOOL v28 = v27 >= 0x41;
        int v13 = v40;
        uint64_t v14 = v46;
        if (v28)
        {
          uint64_t result = *(void *)(a5 + 32);
          if (result)
          {
            uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
            uint64_t v14 = v46;
            int v13 = v40;
          }
        }
      }
      else
      {
        *(void *)(a5 + 16) = v12;
        *(_DWORD *)(a5 + 24) = v11;
      }
    }
    else
    {
      *(void *)(a5 + 16) = v12;
      *(_DWORD *)(a5 + 24) = v11;
    }
    *(void *)(a5 + 32) = v14;
    *(_DWORD *)(a5 + 40) = v13;
    if (*(void *)a4 < *(void *)a3
      || *(void *)a3 >= *(void *)a4
      && *(void *)(*(void *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8) < *(void *)(*(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      long long v53 = *(_OWORD *)a3;
      int v15 = *(_DWORD *)(a3 + 24);
      uint64_t v16 = *(void *)(a3 + 16);
      *(_DWORD *)(a3 + 24) = 0;
      int v17 = *(_DWORD *)(a3 + 40);
      uint64_t v18 = *(void *)(a3 + 32);
      *(_DWORD *)(a3 + 40) = 0;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(void *)(a3 + 16) = *(void *)(a4 + 16);
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
      *(_DWORD *)(a4 + 24) = 0;
      if (*(_DWORD *)(a3 + 40) >= 0x41u)
      {
        uint64_t result = *(void *)(a3 + 32);
        if (result)
        {
          uint64_t v47 = v18;
          int v41 = v15;
          uint64_t v37 = v16;
          uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
          uint64_t v16 = v37;
          int v15 = v41;
          uint64_t v18 = v47;
        }
      }
      *(void *)(a3 + 32) = *(void *)(a4 + 32);
      *(_DWORD *)(a3 + 40) = *(_DWORD *)(a4 + 40);
      *(_DWORD *)(a4 + 40) = 0;
      *(_OWORD *)a4 = v53;
      if (*(_DWORD *)(a4 + 24) <= 0x40u)
      {
        *(void *)(a4 + 16) = v16;
        *(_DWORD *)(a4 + 24) = v15;
        goto LABEL_9;
      }
      uint64_t v38 = v16;
      int v42 = v15;
      uint64_t v48 = v18;
      uint64_t result = *(void *)(a4 + 16);
      if (result)
      {
        uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
        unsigned int v29 = *(_DWORD *)(a4 + 40);
        *(void *)(a4 + 16) = v38;
        *(_DWORD *)(a4 + 24) = v42;
        uint64_t v18 = v48;
        if (v29 < 0x41 || (uint64_t result = *(void *)(a4 + 32)) == 0)
        {
LABEL_9:
          *(void *)(a4 + 32) = v18;
          *(_DWORD *)(a4 + 40) = v17;
          if (*(void *)a3 >= *(void *)a2
            && (*(void *)a2 < *(void *)a3
             || *(void *)(*(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8) >= *(void *)(*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8)))
          {
            return result;
          }
          long long v54 = *(_OWORD *)a2;
          int v19 = *(_DWORD *)(a2 + 24);
          uint64_t v20 = *(void *)(a2 + 16);
          *(_DWORD *)(a2 + 24) = 0;
          int v21 = *(_DWORD *)(a2 + 40);
          uint64_t v22 = *(void *)(a2 + 32);
          *(_DWORD *)(a2 + 40) = 0;
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(void *)(a2 + 16) = *(void *)(a3 + 16);
          *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
          *(_DWORD *)(a3 + 24) = 0;
          if (*(_DWORD *)(a2 + 40) >= 0x41u)
          {
            uint64_t result = *(void *)(a2 + 32);
            if (result)
            {
              int v49 = v19;
              uint64_t v43 = v20;
              uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
              uint64_t v20 = v43;
              int v19 = v49;
            }
          }
          *(void *)(a2 + 32) = *(void *)(a3 + 32);
          *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 40);
          *(_DWORD *)(a3 + 40) = 0;
          *(_OWORD *)a3 = v54;
          if (*(_DWORD *)(a3 + 24) > 0x40u)
          {
            uint64_t v44 = v20;
            int v50 = v19;
            uint64_t result = *(void *)(a3 + 16);
            if (result)
            {
              uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
              unsigned int v30 = *(_DWORD *)(a3 + 40);
              *(void *)(a3 + 16) = v44;
              *(_DWORD *)(a3 + 24) = v50;
              if (v30 >= 0x41)
              {
                uint64_t result = *(void *)(a3 + 32);
                if (result) {
                  uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                }
              }
LABEL_14:
              *(void *)(a3 + 32) = v22;
              *(_DWORD *)(a3 + 40) = v21;
              if (*(void *)a2 >= *(void *)a1
                && (*(void *)a1 < *(void *)a2
                 || *(void *)(*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8) >= *(void *)(*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8)))
              {
                return result;
              }
              long long v55 = *(_OWORD *)a1;
              int v23 = *(_DWORD *)(a1 + 24);
              uint64_t v24 = *(void *)(a1 + 16);
              *(_DWORD *)(a1 + 24) = 0;
              int v25 = *(_DWORD *)(a1 + 40);
              uint64_t v26 = *(void *)(a1 + 32);
              *(_DWORD *)(a1 + 40) = 0;
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(void *)(a1 + 16) = *(void *)(a2 + 16);
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
              *(_DWORD *)(a2 + 24) = 0;
              if (*(_DWORD *)(a1 + 40) >= 0x41u)
              {
                uint64_t result = *(void *)(a1 + 32);
                if (result)
                {
                  uint64_t v51 = v24;
                  uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                  uint64_t v24 = v51;
                }
              }
              *(void *)(a1 + 32) = *(void *)(a2 + 32);
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
              *(_DWORD *)(a2 + 40) = 0;
              *(_OWORD *)a2 = v55;
              if (*(_DWORD *)(a2 + 24) > 0x40u)
              {
                uint64_t v31 = v24;
                uint64_t result = *(void *)(a2 + 16);
                if (result)
                {
                  uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                  unsigned int v32 = *(_DWORD *)(a2 + 40);
                  *(void *)(a2 + 16) = v31;
                  *(_DWORD *)(a2 + 24) = v23;
                  if (v32 >= 0x41)
                  {
                    uint64_t result = *(void *)(a2 + 32);
                    if (result) {
                      uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                    }
                  }
                  goto LABEL_19;
                }
                *(void *)(a2 + 16) = v24;
              }
              else
              {
                *(void *)(a2 + 16) = v24;
              }
              *(_DWORD *)(a2 + 24) = v23;
LABEL_19:
              *(void *)(a2 + 32) = v26;
              *(_DWORD *)(a2 + 40) = v25;
              return result;
            }
            *(void *)(a3 + 16) = v20;
          }
          else
          {
            *(void *)(a3 + 16) = v20;
          }
          *(_DWORD *)(a3 + 24) = v19;
          goto LABEL_14;
        }
        uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
      }
      else
      {
        *(void *)(a4 + 16) = v16;
        *(_DWORD *)(a4 + 24) = v15;
      }
      uint64_t v18 = v48;
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t sub_1CC14E830(uint64_t result, unint64_t *a2, uint64_t a3)
{
  unint64_t v3 = *a2;
  if (*a2 >= *(void *)result
    && (*(void *)result < v3
     || *(void *)(a2[1] & 0xFFFFFFFFFFFFFFF8) >= *(void *)(*(void *)(result + 8) & 0xFFFFFFFFFFFFFFF8)))
  {
    if (*(void *)a3 < v3
      || v3 >= *(void *)a3
      && *(void *)(*(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8) < *(void *)(a2[1] & 0xFFFFFFFFFFFFFFF8))
    {
      long long v91 = *(_OWORD *)a2;
      int v8 = *((_DWORD *)a2 + 6);
      unint64_t v9 = a2[2];
      *((_DWORD *)a2 + 6) = 0;
      int v10 = *((_DWORD *)a2 + 10);
      unint64_t v11 = a2[4];
      *((_DWORD *)a2 + 10) = 0;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = *(void *)(a3 + 16);
      *((_DWORD *)a2 + 6) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 24) = 0;
      if (*((_DWORD *)a2 + 10) >= 0x41u)
      {
        unint64_t v23 = a2[4];
        if (v23)
        {
          uint64_t v66 = result;
          uint64_t v74 = a2;
          uint64_t v83 = a3;
          int v47 = v10;
          unint64_t v57 = v11;
          int v37 = v8;
          unint64_t v31 = v9;
          MEMORY[0x1D25D9CB0](v23, 0x1000C8000313F17);
          unint64_t v9 = v31;
          int v8 = v37;
          unint64_t v11 = v57;
          uint64_t result = v66;
          int v10 = v47;
          a2 = v74;
          a3 = v83;
        }
      }
      a2[4] = *(void *)(a3 + 32);
      *((_DWORD *)a2 + 10) = *(_DWORD *)(a3 + 40);
      *(_DWORD *)(a3 + 40) = 0;
      *(_OWORD *)a3 = v91;
      if (*(_DWORD *)(a3 + 24) > 0x40u)
      {
        unint64_t v32 = v9;
        int v38 = v8;
        unint64_t v58 = v11;
        uint64_t v67 = result;
        int v48 = v10;
        int v75 = a2;
        uint64_t v84 = a3;
        uint64_t v24 = *(void *)(a3 + 16);
        if (v24)
        {
          MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
          a2 = v75;
          a3 = v84;
          unsigned int v25 = *(_DWORD *)(v84 + 40);
          *(void *)(v84 + 16) = v32;
          *(_DWORD *)(v84 + 24) = v38;
          BOOL v22 = v25 >= 0x41;
          unint64_t v11 = v58;
          uint64_t result = v67;
          int v10 = v48;
          if (v22 && *(void *)(v84 + 32))
          {
            MEMORY[0x1D25D9CB0](*(void *)(v84 + 32), 0x1000C8000313F17);
            unint64_t v11 = v58;
            uint64_t result = v67;
            int v10 = v48;
            a2 = v75;
            a3 = v84;
          }
        }
        else
        {
          *(void *)(a3 + 16) = v9;
          *(_DWORD *)(a3 + 24) = v8;
          uint64_t result = v67;
        }
      }
      else
      {
        *(void *)(a3 + 16) = v9;
        *(_DWORD *)(a3 + 24) = v8;
      }
      *(void *)(a3 + 32) = v11;
      *(_DWORD *)(a3 + 40) = v10;
      if (*a2 < *(void *)result
        || *(void *)result >= *a2
        && *(void *)(a2[1] & 0xFFFFFFFFFFFFFFF8) < *(void *)(*(void *)(result + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        long long v92 = *(_OWORD *)result;
        int v12 = *(_DWORD *)(result + 24);
        unint64_t v13 = *(void *)(result + 16);
        *(_DWORD *)(result + 24) = 0;
        int v14 = *(_DWORD *)(result + 40);
        unint64_t v15 = *(void *)(result + 32);
        *(_DWORD *)(result + 40) = 0;
        *(_OWORD *)uint64_t result = *(_OWORD *)a2;
        *(void *)(result + 16) = a2[2];
        *(_DWORD *)(result + 24) = *((_DWORD *)a2 + 6);
        *((_DWORD *)a2 + 6) = 0;
        if (*(_DWORD *)(result + 40) >= 0x41u)
        {
          uint64_t v28 = *(void *)(result + 32);
          if (v28)
          {
            uint64_t v69 = result;
            uint64_t v78 = a2;
            int v61 = v14;
            unint64_t v87 = v15;
            int v51 = v12;
            unint64_t v41 = v13;
            MEMORY[0x1D25D9CB0](v28, 0x1000C8000313F17);
            unint64_t v13 = v41;
            int v12 = v51;
            int v14 = v61;
            a2 = v78;
            unint64_t v15 = v87;
            uint64_t result = v69;
          }
        }
        *(void *)(result + 32) = a2[4];
        *(_DWORD *)(result + 40) = *((_DWORD *)a2 + 10);
        *((_DWORD *)a2 + 10) = 0;
        *(_OWORD *)a2 = v92;
        if (*((_DWORD *)a2 + 6) > 0x40u)
        {
          unint64_t v42 = v13;
          int v52 = v12;
          unint64_t v88 = v15;
          int v62 = v14;
          uint64_t v79 = a2;
          uint64_t result = a2[2];
          if (result)
          {
            uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
            a2 = v79;
            unint64_t v15 = v88;
            unsigned int v29 = *((_DWORD *)v79 + 10);
            v79[2] = v42;
            *((_DWORD *)v79 + 6) = v52;
            BOOL v22 = v29 >= 0x41;
            int v14 = v62;
            if (v22)
            {
              uint64_t result = v79[4];
              if (result)
              {
                uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                a2 = v79;
                unint64_t v15 = v88;
                int v14 = v62;
              }
            }
          }
          else
          {
            a2[2] = v13;
            *((_DWORD *)a2 + 6) = v12;
          }
        }
        else
        {
          a2[2] = v13;
          *((_DWORD *)a2 + 6) = v12;
        }
        a2[4] = v15;
        *((_DWORD *)a2 + 10) = v14;
      }
    }
    return result;
  }
  if (*(void *)a3 < v3
    || v3 >= *(void *)a3
    && *(void *)(*(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8) < *(void *)(a2[1] & 0xFFFFFFFFFFFFFFF8))
  {
    long long v90 = *(_OWORD *)result;
    int v4 = *(_DWORD *)(result + 24);
    uint64_t v5 = *(void *)(result + 16);
    *(_DWORD *)(result + 24) = 0;
    int v6 = *(_DWORD *)(result + 40);
    unint64_t v7 = *(void *)(result + 32);
    *(_DWORD *)(result + 40) = 0;
    *(_OWORD *)uint64_t result = *(_OWORD *)a3;
    *(void *)(result + 16) = *(void *)(a3 + 16);
    *(_DWORD *)(result + 24) = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 24) = 0;
    if (*(_DWORD *)(result + 40) >= 0x41u)
    {
      uint64_t v20 = *(void *)(result + 32);
      if (v20)
      {
        uint64_t v65 = result;
        uint64_t v81 = a3;
        int v55 = v6;
        unint64_t v72 = v7;
        int v45 = v4;
        uint64_t v35 = v5;
        MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
        uint64_t v5 = v35;
        int v4 = v45;
        int v6 = v55;
        unint64_t v7 = v72;
        a3 = v81;
        uint64_t result = v65;
      }
    }
    *(void *)(result + 32) = *(void *)(a3 + 32);
    *(_DWORD *)(result + 40) = *(_DWORD *)(a3 + 40);
    *(_DWORD *)(a3 + 40) = 0;
    *(_OWORD *)a3 = v90;
    if (*(_DWORD *)(a3 + 24) <= 0x40u)
    {
      *(void *)(a3 + 16) = v5;
      *(_DWORD *)(a3 + 24) = v4;
LABEL_27:
      *(void *)(a3 + 32) = v7;
      *(_DWORD *)(a3 + 40) = v6;
      return result;
    }
    uint64_t v36 = v5;
    int v46 = v4;
    unint64_t v73 = v7;
    int v56 = v6;
    uint64_t v82 = a3;
    uint64_t result = *(void *)(a3 + 16);
    if (!result)
    {
      *(void *)(a3 + 16) = v5;
      int v18 = v4;
      goto LABEL_26;
    }
    uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
    unint64_t v7 = v73;
    a3 = v82;
    unsigned int v21 = *(_DWORD *)(v82 + 40);
    *(void *)(v82 + 16) = v36;
    *(_DWORD *)(v82 + 24) = v46;
    BOOL v22 = v21 >= 0x41;
    int v6 = v56;
    if (!v22) {
      goto LABEL_27;
    }
    uint64_t result = *(void *)(v82 + 32);
    if (!result) {
      goto LABEL_27;
    }
    uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
    unint64_t v7 = v73;
    int v6 = v56;
LABEL_73:
    a3 = v82;
    goto LABEL_27;
  }
  long long v93 = *(_OWORD *)result;
  int v16 = *(_DWORD *)(result + 24);
  unint64_t v17 = *(void *)(result + 16);
  *(_DWORD *)(result + 24) = 0;
  int v6 = *(_DWORD *)(result + 40);
  unint64_t v7 = *(void *)(result + 32);
  *(_DWORD *)(result + 40) = 0;
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = a2[2];
  *(_DWORD *)(result + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = 0;
  if (*(_DWORD *)(result + 40) >= 0x41u)
  {
    uint64_t v26 = *(void *)(result + 32);
    if (v26)
    {
      uint64_t v68 = result;
      uint64_t v76 = a2;
      uint64_t v85 = a3;
      int v49 = v6;
      unint64_t v59 = v7;
      int v39 = v16;
      unint64_t v33 = v17;
      MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
      unint64_t v17 = v33;
      int v16 = v39;
      unint64_t v7 = v59;
      uint64_t result = v68;
      int v6 = v49;
      a2 = v76;
      a3 = v85;
    }
  }
  *(void *)(result + 32) = a2[4];
  *(_DWORD *)(result + 40) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = 0;
  *(_OWORD *)a2 = v93;
  if (*((_DWORD *)a2 + 6) > 0x40u)
  {
    unint64_t v34 = v17;
    int v40 = v16;
    unint64_t v60 = v7;
    int v50 = v6;
    int v77 = a2;
    uint64_t v86 = a3;
    uint64_t result = a2[2];
    if (result)
    {
      uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
      a2 = v77;
      a3 = v86;
      unsigned int v27 = *((_DWORD *)v77 + 10);
      v77[2] = v34;
      *((_DWORD *)v77 + 6) = v40;
      BOOL v22 = v27 >= 0x41;
      int v6 = v50;
      unint64_t v7 = v60;
      if (v22)
      {
        uint64_t result = v77[4];
        if (result)
        {
          uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17, v86);
          unint64_t v7 = v60;
          int v6 = v50;
          a2 = v77;
          a3 = v86;
        }
      }
    }
    else
    {
      a2[2] = v17;
      *((_DWORD *)a2 + 6) = v16;
    }
  }
  else
  {
    a2[2] = v17;
    *((_DWORD *)a2 + 6) = v16;
  }
  a2[4] = v7;
  *((_DWORD *)a2 + 10) = v6;
  if (*(void *)a3 < *a2
    || *a2 >= *(void *)a3
    && *(void *)(*(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8) < *(void *)(a2[1] & 0xFFFFFFFFFFFFFFF8))
  {
    long long v94 = *(_OWORD *)a2;
    int v18 = *((_DWORD *)a2 + 6);
    unint64_t v19 = a2[2];
    *((_DWORD *)a2 + 6) = 0;
    *((_DWORD *)a2 + 10) = 0;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = *(void *)(a3 + 16);
    *((_DWORD *)a2 + 6) = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 24) = 0;
    if (*((_DWORD *)a2 + 10) >= 0x41u)
    {
      uint64_t result = a2[4];
      if (result)
      {
        int v80 = a2;
        uint64_t v89 = a3;
        int v53 = v6;
        unint64_t v63 = v7;
        int v70 = v18;
        unint64_t v43 = v19;
        uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
        unint64_t v19 = v43;
        int v18 = v70;
        unint64_t v7 = v63;
        int v6 = v53;
        a2 = v80;
        a3 = v89;
      }
    }
    a2[4] = *(void *)(a3 + 32);
    *((_DWORD *)a2 + 10) = *(_DWORD *)(a3 + 40);
    *(_DWORD *)(a3 + 40) = 0;
    *(_OWORD *)a3 = v94;
    if (*(_DWORD *)(a3 + 24) <= 0x40u)
    {
      *(void *)(a3 + 16) = v19;
LABEL_26:
      *(_DWORD *)(a3 + 24) = v18;
      goto LABEL_27;
    }
    unint64_t v44 = v19;
    int v71 = v18;
    unint64_t v64 = v7;
    int v54 = v6;
    uint64_t v82 = a3;
    uint64_t result = *(void *)(a3 + 16);
    if (!result)
    {
      *(void *)(a3 + 16) = v19;
      *(_DWORD *)(a3 + 24) = v18;
      goto LABEL_27;
    }
    uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
    a3 = v82;
    unsigned int v30 = *(_DWORD *)(v82 + 40);
    *(void *)(v82 + 16) = v44;
    *(_DWORD *)(v82 + 24) = v71;
    BOOL v22 = v30 >= 0x41;
    int v6 = v54;
    unint64_t v7 = v64;
    if (!v22) {
      goto LABEL_27;
    }
    uint64_t result = *(void *)(v82 + 32);
    if (!result) {
      goto LABEL_27;
    }
    uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
    unint64_t v7 = v64;
    int v6 = v54;
    goto LABEL_73;
  }
  return result;
}

BOOL sub_1CC14F074(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v6 = (_OWORD *)(a2 - 48);
      unint64_t v7 = *(void *)(a2 - 48);
      if (v7 >= *(void *)a1
        && (*(void *)a1 < v7
         || *(void *)(*(void *)(a2 - 40) & 0xFFFFFFFFFFFFFFF8) >= *(void *)(*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8)))
      {
        return result;
      }
      long long v79 = *(_OWORD *)a1;
      int v8 = *(_DWORD *)(a1 + 24);
      uint64_t v9 = *(void *)(a1 + 16);
      *(_DWORD *)(a1 + 24) = 0;
      int v10 = *(_DWORD *)(a1 + 40);
      uint64_t v11 = *(void *)(a1 + 32);
      *(_DWORD *)(a1 + 40) = 0;
      *(_OWORD *)a1 = *v6;
      *(void *)(a1 + 16) = *(void *)(a2 - 32);
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 - 24);
      *(_DWORD *)(a2 - 24) = 0;
      if (*(_DWORD *)(a1 + 40) >= 0x41u)
      {
        uint64_t v33 = *(void *)(a1 + 32);
        if (v33)
        {
          uint64_t v77 = v11;
          int v71 = v8;
          uint64_t v62 = v9;
          MEMORY[0x1D25D9CB0](v33, 0x1000C8000313F17);
          uint64_t v9 = v62;
          int v6 = (_OWORD *)(a2 - 48);
          int v8 = v71;
          uint64_t v11 = v77;
        }
      }
      *(void *)(a1 + 32) = *(void *)(a2 - 16);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 - 8);
      *(_DWORD *)(a2 - 8) = 0;
      _OWORD *v6 = v79;
      if (*(_DWORD *)(a2 - 24) > 0x40u)
      {
        uint64_t v34 = v9;
        int v72 = v8;
        uint64_t v78 = v11;
        uint64_t v35 = *(void *)(a2 - 32);
        if (v35)
        {
          MEMORY[0x1D25D9CB0](v35, 0x1000C8000313F17);
          unsigned int v36 = *(_DWORD *)(a2 - 8);
          *(void *)(a2 - 32) = v34;
          *(_DWORD *)(a2 - 24) = v72;
          BOOL v37 = v36 >= 0x41;
          uint64_t v11 = v78;
          if (!v37) {
            goto LABEL_6;
          }
          uint64_t v38 = *(void *)(a2 - 16);
          if (!v38) {
            goto LABEL_6;
          }
          MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
        }
        else
        {
          *(void *)(a2 - 32) = v9;
          *(_DWORD *)(a2 - 24) = v8;
        }
        uint64_t v11 = v78;
      }
      else
      {
        *(void *)(a2 - 32) = v9;
        *(_DWORD *)(a2 - 24) = v8;
      }
LABEL_6:
      *(void *)(a2 - 16) = v11;
      *(_DWORD *)(a2 - 8) = v10;
      return 1;
    case 3uLL:
      sub_1CC14E830(a1, (unint64_t *)(a1 + 48), a2 - 48);
      return 1;
    case 4uLL:
      sub_1CC14F5B0(a1, (long long *)(a1 + 48), a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      sub_1CC14E244(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      int v12 = (unint64_t *)(a1 + 96);
      sub_1CC14E830(a1, (unint64_t *)(a1 + 48), a1 + 96);
      uint64_t v13 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      while (2)
      {
        unint64_t v16 = *(void *)v13;
        if (*(void *)v13 >= *v12)
        {
          if (*v12 < v16) {
            goto LABEL_33;
          }
          uint64_t v17 = *(void *)(v13 + 8);
          int v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFF8);
          if (*(void *)(v17 & 0xFFFFFFFFFFFFFFF8) >= *(void *)(v12[1] & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_33;
          }
        }
        else
        {
          uint64_t v17 = *(void *)(v13 + 8);
          int v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFF8);
        }
        unsigned int v19 = 0;
        int v20 = *(_DWORD *)(v13 + 24);
        uint64_t v21 = *(void *)(v13 + 16);
        *(_DWORD *)(v13 + 24) = 0;
        int v22 = *(_DWORD *)(v13 + 40);
        uint64_t v23 = *(void *)(v13 + 32);
        uint64_t v24 = v14;
        *(_DWORD *)(v13 + 40) = 0;
        while (1)
        {
          uint64_t v25 = a1 + v24;
          *(_OWORD *)(a1 + v24 + 144) = *(_OWORD *)(a1 + v24 + 96);
          if (v19 >= 0x41)
          {
            uint64_t v28 = *(void *)(v25 + 160);
            if (v28)
            {
              uint64_t v48 = a1 + v24;
              uint64_t v73 = v13;
              uint64_t v58 = v14;
              int v67 = v15;
              uint64_t v41 = v17;
              unint64_t v43 = v16;
              uint64_t v63 = v23;
              int v55 = v20;
              uint64_t v52 = v21;
              int v45 = v18;
              uint64_t v39 = v24;
              MEMORY[0x1D25D9CB0](v28, 0x1000C8000313F17);
              int v18 = v45;
              uint64_t v25 = v48;
              uint64_t v24 = v39;
              uint64_t v17 = v41;
              uint64_t v21 = v52;
              int v20 = v55;
              uint64_t v14 = v58;
              uint64_t v23 = v63;
              unint64_t v16 = v43;
              int v15 = v67;
              uint64_t v13 = v73;
            }
          }
          *(void *)(v25 + 160) = *(void *)(v25 + 112);
          *(_DWORD *)(v25 + 168) = *(_DWORD *)(v25 + 120);
          *(_DWORD *)(v25 + 120) = 0;
          if (*(_DWORD *)(v25 + 184) >= 0x41u)
          {
            uint64_t v29 = *(void *)(v25 + 176);
            if (v29)
            {
              uint64_t v49 = v25;
              uint64_t v74 = v13;
              uint64_t v59 = v14;
              int v68 = v15;
              uint64_t v42 = v17;
              unint64_t v44 = v16;
              uint64_t v64 = v23;
              int v56 = v20;
              uint64_t v53 = v21;
              int v46 = v18;
              uint64_t v40 = v24;
              MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
              int v18 = v46;
              uint64_t v25 = v49;
              uint64_t v24 = v40;
              uint64_t v17 = v42;
              uint64_t v21 = v53;
              int v20 = v56;
              uint64_t v14 = v59;
              uint64_t v23 = v64;
              unint64_t v16 = v44;
              int v15 = v68;
              uint64_t v13 = v74;
            }
          }
          uint64_t v26 = (void *)(a1 + v24);
          *(void *)(v25 + 176) = *(void *)(a1 + v24 + 128);
          *(_DWORD *)(v25 + 184) = *(_DWORD *)(a1 + v24 + 136);
          *(_DWORD *)(a1 + v24 + 136) = 0;
          if (v24 == -96)
          {
            uint64_t v30 = a1;
            goto LABEL_30;
          }
          unint64_t v27 = v26[6];
          if (v16 >= v27 && (v27 < v16 || *v18 >= *(void *)(v26[7] & 0xFFFFFFFFFFFFFFF8))) {
            break;
          }
          unsigned int v19 = *(_DWORD *)(v25 + 120);
          v24 -= 48;
        }
        uint64_t v30 = a1 + v24 + 96;
LABEL_30:
        *(void *)uint64_t v30 = v16;
        *(void *)(v30 + 8) = v17;
        if (*(_DWORD *)(v30 + 24) >= 0x41u)
        {
          uint64_t v31 = v26[14];
          if (v31)
          {
            uint64_t v75 = v13;
            uint64_t v60 = v14;
            int v69 = v15;
            uint64_t v65 = v23;
            int v57 = v20;
            uint64_t v50 = v30;
            uint64_t v54 = v21;
            int v47 = (void *)(a1 + v24);
            MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
            uint64_t v26 = v47;
            uint64_t v30 = v50;
            uint64_t v21 = v54;
            int v20 = v57;
            uint64_t v14 = v60;
            uint64_t v23 = v65;
            int v15 = v69;
            uint64_t v13 = v75;
          }
        }
        v26[14] = v21;
        *(_DWORD *)(v30 + 24) = v20;
        if (*(_DWORD *)(v30 + 40) >= 0x41u)
        {
          uint64_t v32 = *(void *)(v30 + 32);
          if (v32)
          {
            uint64_t v76 = v13;
            uint64_t v61 = v14;
            int v70 = v15;
            uint64_t v66 = v23;
            uint64_t v51 = v30;
            MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
            uint64_t v30 = v51;
            uint64_t v14 = v61;
            uint64_t v23 = v66;
            int v15 = v70;
            uint64_t v13 = v76;
          }
        }
        *(void *)(v30 + 32) = v23;
        *(_DWORD *)(v30 + 40) = v22;
        if (++v15 != 8)
        {
LABEL_33:
          int v12 = (unint64_t *)v13;
          v14 += 48;
          v13 += 48;
          if (v13 == a2) {
            return 1;
          }
          continue;
        }
        return v13 + 48 == a2;
      }
  }
}

uint64_t sub_1CC14F5B0(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_1CC14E830(a1, (unint64_t *)a2, a3);
  if (*(void *)a4 < *(void *)a3
    || *(void *)a3 >= *(void *)a4
    && *(void *)(*(void *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8) < *(void *)(*(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    long long v43 = *(_OWORD *)a3;
    int v9 = *(_DWORD *)(a3 + 24);
    uint64_t v10 = *(void *)(a3 + 16);
    *(_DWORD *)(a3 + 24) = 0;
    int v11 = *(_DWORD *)(a3 + 40);
    uint64_t v12 = *(void *)(a3 + 32);
    *(_DWORD *)(a3 + 40) = 0;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = *(void *)(a4 + 16);
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
    *(_DWORD *)(a4 + 24) = 0;
    if (*(_DWORD *)(a3 + 40) >= 0x41u)
    {
      uint64_t result = *(void *)(a3 + 32);
      if (result)
      {
        int v32 = v11;
        uint64_t v37 = v12;
        int v28 = v9;
        uint64_t v26 = v10;
        uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
        uint64_t v10 = v26;
        int v9 = v28;
        uint64_t v12 = v37;
        int v11 = v32;
      }
    }
    *(void *)(a3 + 32) = *(void *)(a4 + 32);
    *(_DWORD *)(a3 + 40) = *(_DWORD *)(a4 + 40);
    *(_DWORD *)(a4 + 40) = 0;
    *(_OWORD *)a4 = v43;
    if (*(_DWORD *)(a4 + 24) > 0x40u)
    {
      uint64_t v27 = v10;
      int v29 = v9;
      uint64_t v38 = v12;
      int v33 = v11;
      uint64_t result = *(void *)(a4 + 16);
      if (result)
      {
        uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
        unsigned int v21 = *(_DWORD *)(a4 + 40);
        *(void *)(a4 + 16) = v27;
        *(_DWORD *)(a4 + 24) = v29;
        BOOL v22 = v21 >= 0x41;
        int v11 = v33;
        uint64_t v12 = v38;
        if (v22)
        {
          uint64_t result = *(void *)(a4 + 32);
          if (result)
          {
            uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
            uint64_t v12 = v38;
            int v11 = v33;
          }
        }
      }
      else
      {
        *(void *)(a4 + 16) = v10;
        *(_DWORD *)(a4 + 24) = v9;
      }
    }
    else
    {
      *(void *)(a4 + 16) = v10;
      *(_DWORD *)(a4 + 24) = v9;
    }
    *(void *)(a4 + 32) = v12;
    *(_DWORD *)(a4 + 40) = v11;
    if (*(void *)a3 < *(void *)a2
      || *(void *)a2 >= *(void *)a3
      && *(void *)(*(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8) < *(void *)(*((void *)a2 + 1) & 0xFFFFFFFFFFFFFFF8))
    {
      long long v44 = *a2;
      int v13 = *((_DWORD *)a2 + 6);
      uint64_t v14 = *((void *)a2 + 2);
      *((_DWORD *)a2 + 6) = 0;
      int v15 = *((_DWORD *)a2 + 10);
      uint64_t v16 = *((void *)a2 + 4);
      *((_DWORD *)a2 + 10) = 0;
      *a2 = *(_OWORD *)a3;
      *((void *)a2 + 2) = *(void *)(a3 + 16);
      *((_DWORD *)a2 + 6) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 24) = 0;
      if (*((_DWORD *)a2 + 10) >= 0x41u)
      {
        uint64_t result = *((void *)a2 + 4);
        if (result)
        {
          uint64_t v39 = v16;
          int v34 = v13;
          uint64_t v30 = v14;
          uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
          uint64_t v14 = v30;
          int v13 = v34;
          uint64_t v16 = v39;
        }
      }
      *((void *)a2 + 4) = *(void *)(a3 + 32);
      *((_DWORD *)a2 + 10) = *(_DWORD *)(a3 + 40);
      *(_DWORD *)(a3 + 40) = 0;
      *(_OWORD *)a3 = v44;
      if (*(_DWORD *)(a3 + 24) <= 0x40u)
      {
        *(void *)(a3 + 16) = v14;
        *(_DWORD *)(a3 + 24) = v13;
        goto LABEL_9;
      }
      uint64_t v31 = v14;
      int v35 = v13;
      uint64_t v40 = v16;
      uint64_t result = *(void *)(a3 + 16);
      if (result)
      {
        uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
        unsigned int v23 = *(_DWORD *)(a3 + 40);
        *(void *)(a3 + 16) = v31;
        *(_DWORD *)(a3 + 24) = v35;
        uint64_t v16 = v40;
        if (v23 < 0x41 || (uint64_t result = *(void *)(a3 + 32)) == 0)
        {
LABEL_9:
          *(void *)(a3 + 32) = v16;
          *(_DWORD *)(a3 + 40) = v15;
          if (*(void *)a2 >= *(void *)a1
            && (*(void *)a1 < *(void *)a2
             || *(void *)(*((void *)a2 + 1) & 0xFFFFFFFFFFFFFFF8) >= *(void *)(*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8)))
          {
            return result;
          }
          long long v45 = *(_OWORD *)a1;
          int v17 = *(_DWORD *)(a1 + 24);
          uint64_t v18 = *(void *)(a1 + 16);
          *(_DWORD *)(a1 + 24) = 0;
          int v19 = *(_DWORD *)(a1 + 40);
          uint64_t v20 = *(void *)(a1 + 32);
          *(_DWORD *)(a1 + 40) = 0;
          *(_OWORD *)a1 = *a2;
          *(void *)(a1 + 16) = *((void *)a2 + 2);
          *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
          *((_DWORD *)a2 + 6) = 0;
          if (*(_DWORD *)(a1 + 40) >= 0x41u)
          {
            uint64_t result = *(void *)(a1 + 32);
            if (result)
            {
              int v41 = v17;
              uint64_t v36 = v18;
              uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
              uint64_t v18 = v36;
              int v17 = v41;
            }
          }
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
          *((_DWORD *)a2 + 10) = 0;
          *a2 = v45;
          if (*((_DWORD *)a2 + 6) > 0x40u)
          {
            uint64_t v24 = v18;
            int v42 = v17;
            uint64_t result = *((void *)a2 + 2);
            if (result)
            {
              uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
              unsigned int v25 = *((_DWORD *)a2 + 10);
              *((void *)a2 + 2) = v24;
              *((_DWORD *)a2 + 6) = v42;
              if (v25 >= 0x41)
              {
                uint64_t result = *((void *)a2 + 4);
                if (result) {
                  uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                }
              }
              goto LABEL_14;
            }
            *((void *)a2 + 2) = v18;
          }
          else
          {
            *((void *)a2 + 2) = v18;
          }
          *((_DWORD *)a2 + 6) = v17;
LABEL_14:
          *((void *)a2 + 4) = v20;
          *((_DWORD *)a2 + 10) = v19;
          return result;
        }
        uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
      }
      else
      {
        *(void *)(a3 + 16) = v14;
        *(_DWORD *)(a3 + 24) = v13;
      }
      uint64_t v16 = v40;
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t sub_1CC14FA48(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1CC14FAE0(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    if (v5 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v5;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void sub_1CC14FBC4()
{
}

__n128 sub_1CC14FBD8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F2607938;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CC14FC24(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2607938;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CC14FC54()
{
}

void sub_1CC14FC84()
{
}

void *sub_1CC14FC98(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F2607980;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC14FCE0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2607980;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CC14FD0C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void sub_1CC14FD18()
{
}

void *sub_1CC14FD2C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F26079C8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC14FD74(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F26079C8;
  a2[1] = v2;
  return result;
}

void sub_1CC14FDA0()
{
}

void sub_1CC14FDD0()
{
}

void *sub_1CC14FDE4(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F2607A10;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC14FE2C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2607A10;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CC14FE58(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 24);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v2 + 96))(v2, &llvm::StackSafetyInfoWrapperPass::ID)
       + 32;
}

uint64_t sub_1CC14FEE0(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a2 < *a1;
  }
}

double sub_1CC14FEFC(uint64_t a1, uint64_t *a2)
{
  int v9 = 0;
  char v4 = sub_1CC14FFE8(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  int v6 = v9;
  if (v4) {
    return result;
  }
  int v7 = *(_DWORD *)(a1 + 8);
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_9:
    sub_1CC150080(a1, v8);
    int v9 = 0;
    sub_1CC14FFE8(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    int v6 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*v6 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  uint64_t *v6 = *a2;
  v6[1] = (uint64_t)(v6 + 3);
  *(void *)&double result = 0x400000000;
  v6[2] = 0x400000000;
  return result;
}

uint64_t sub_1CC14FFE8(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    int v6 = (void *)(a1 + 56 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        int v6 = (void *)(a1 + 56 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        int v6 = v10;
      }
    }
  }
  else
  {
    int v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void *sub_1CC150080(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = operator new(56 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 56 * v10;
      do
      {
        void *result = -4096;
        result += 7;
        v11 -= 56;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 56 * v3;
      uint64_t v13 = v4;
      do
      {
        uint64_t v14 = *(void *)v13;
        if ((*(void *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          unsigned int v21 = 0;
          sub_1CC14FFE8(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v21);
          int v15 = v21;
          void *v21 = *(void *)v13;
          v15[1] = v15 + 3;
          v15[2] = 0x400000000;
          uint64_t v16 = *(void **)(v13 + 8);
          if ((void *)v13 != v15)
          {
            unsigned int v17 = *(_DWORD *)(v13 + 16);
            if (v17)
            {
              if ((void *)(v13 + 24) == v16)
              {
                if (v17 >= 5) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                memcpy(v15 + 3, v16, 8 * *(unsigned int *)(v13 + 16));
                *((_DWORD *)v15 + 4) = v17;
                uint64_t v16 = *(void **)(v13 + 8);
              }
              else
              {
                v15[1] = v16;
                int v18 = *(_DWORD *)(v13 + 20);
                *((_DWORD *)v15 + 4) = v17;
                *((_DWORD *)v15 + 5) = v18;
                *(void *)(v13 + 8) = v13 + 24;
                *(_DWORD *)(v13 + 20) = 0;
                uint64_t v16 = (void *)(v13 + 24);
              }
              *(_DWORD *)(v13 + 16) = 0;
            }
          }
          ++*(_DWORD *)(a1 + 8);
          if ((void *)(v13 + 24) != v16) {
            free(v16);
          }
        }
        v13 += 56;
        v12 -= 56;
      }
      while (v12);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v19 = *(unsigned int *)(a1 + 16);
  if (v19)
  {
    uint64_t v20 = 56 * v19;
    do
    {
      void *result = -4096;
      result += 7;
      v20 -= 56;
    }
    while (v20);
  }
  return result;
}

void sub_1CC1502A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v77 = a2;
  uint64_t v3 = *(void **)(a3 + 24);
  int v72 = (void *)(a3 + 32);
  if (v3 != (void *)(a3 + 32))
  {
    int v5 = 0;
    uint64_t v6 = *(unsigned int *)(a3 + 48);
    int v7 = dword_1EBCC81D0;
    unsigned int v8 = (void *)(a1 + 8);
    int v9 = (const void **)(a1 + 24);
    uint64_t v76 = (const void **)(a1 + 40);
    int v74 = dword_1EBCC81D0;
    do
    {
      int v73 = v5;
      uint64_t v10 = (void *)v3[12];
      if (v10 != v3 + 13)
      {
        int v75 = 0;
        uint64_t v11 = (void **)(v3 + 5);
        int v71 = (void **)(v3 + 7);
        while (1)
        {
          uint64_t v12 = (void *)*v8;
          if (!*v8) {
            goto LABEL_16;
          }
          unint64_t v13 = v10[4];
          unsigned int v14 = *((_DWORD *)v10 + 10);
          int v15 = v8;
          do
          {
            unint64_t v16 = v12[4];
            BOOL v17 = v16 >= v13;
            if (v16 >= v13) {
              int v18 = v12;
            }
            else {
              int v18 = v12 + 1;
            }
            if (v17) {
              int v15 = v12;
            }
            uint64_t v12 = (void *)*v18;
          }
          while (*v18);
          if (v15 == v8 || v15[4] > v13)
          {
LABEL_16:
            unsigned int v79 = *(_DWORD *)(a1 + 32);
            if (v79 > 0x40) {
              operator new[]();
            }
            unint64_t v78 = (unint64_t)*v9;
            goto LABEL_18;
          }
          uint64_t v22 = v6;
          uint64_t v25 = v15[9];
          unsigned int v23 = v15 + 9;
          uint64_t v24 = v25;
          if (!v25) {
            goto LABEL_53;
          }
          uint64_t v26 = v23;
          do
          {
            unsigned int v27 = *(_DWORD *)(v24 + 32);
            BOOL v28 = v27 >= v14;
            if (v27 >= v14) {
              int v29 = (uint64_t *)v24;
            }
            else {
              int v29 = (uint64_t *)(v24 + 8);
            }
            if (v28) {
              uint64_t v26 = (void *)v24;
            }
            uint64_t v24 = *v29;
          }
          while (*v29);
          if (v26 == v23 || *((_DWORD *)v26 + 8) > v14)
          {
LABEL_53:
            unsigned int v79 = *(_DWORD *)(a1 + 32);
            if (v79 > 0x40) {
              operator new[]();
            }
            unint64_t v78 = (unint64_t)*v9;
            uint64_t v6 = v22;
            unsigned int v81 = *(_DWORD *)(a1 + 48);
            int v7 = v74;
            if (v81 > 0x40) {
LABEL_55:
            }
              operator new[]();
            goto LABEL_19;
          }
          uint64_t v30 = (llvm::ConstantRange *)(v26 + 5);
          uint64_t v31 = *((unsigned int *)v26 + 12);
          if (v31 >= 0x41)
          {
            unsigned int v69 = *((_DWORD *)v26 + 12);
            int v67 = (const void *)v26[7];
            __s1 = (void *)v26[5];
            unint64_t v65 = v31 + 63;
            size_t v66 = ((unint64_t)(v31 + 63) >> 3) & 0x3FFFFFF8;
            if (!memcmp(__s1, v67, v66))
            {
              int v37 = 0;
              uint64_t v38 = v65 >> 6;
              do
              {
                if (v38-- < 1) {
                  break;
                }
                unint64_t v40 = __s1[v38];
                v37 += __clz(v40);
              }
              while (!v40);
              unsigned int v41 = v69 | 0xFFFFFFC0;
              if ((v69 & 0x3F) == 0) {
                unsigned int v41 = 0;
              }
              if (v37 + v41 == v69)
              {
                unsigned int v79 = v69;
                operator new[]();
              }
            }
            int v35 = memcmp(__s1, v67, v66);
            uint64_t v30 = (llvm::ConstantRange *)(v26 + 5);
            if (!v35)
            {
              int v36 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(v26 + 5));
              uint64_t v30 = (llvm::ConstantRange *)(v26 + 5);
              if (v36 == v69)
              {
LABEL_68:
                unsigned int v79 = *(_DWORD *)(a1 + 32);
                uint64_t v6 = v22;
                if (v79 > 0x40) {
                  operator new[]();
                }
                unint64_t v78 = (unint64_t)*v9;
                int v7 = v74;
LABEL_18:
                unsigned int v81 = *(_DWORD *)(a1 + 48);
                if (v81 > 0x40) {
                  goto LABEL_55;
                }
LABEL_19:
                int v80 = *v76;
                goto LABEL_20;
              }
            }
          }
          else
          {
            unint64_t v32 = v26[5];
            uint64_t v33 = v26[7];
            if (!(v33 | v32))
            {
              unsigned int v79 = *((_DWORD *)v26 + 12);
              unint64_t v78 = v32;
              unsigned int v81 = *((_DWORD *)v26 + 16);
              if (v81 > 0x40) {
                operator new[]();
              }
              int v80 = (const void *)v26[7];
              goto LABEL_62;
            }
            if (v32 == v33)
            {
              BOOL v34 = !v31 || v32 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v31;
              if (v34) {
                goto LABEL_68;
              }
            }
          }
          sub_1CC14A000(&v78, v30, (llvm::ConstantRange *)(v10 + 6));
LABEL_62:
          uint64_t v6 = v22;
          int v7 = v74;
LABEL_20:
          if (llvm::ConstantRange::contains((llvm::ConstantRange *)(v3 + 5), (const llvm::ConstantRange *)&v78)) {
            goto LABEL_33;
          }
          if ((int)v6 <= v7)
          {
            sub_1CC1499DC((uint64_t)&v82, (uint64_t)(v3 + 5), (unsigned int *)&v78);
            if (*((_DWORD *)v3 + 12) >= 0x41u && *v11) {
              MEMORY[0x1D25D9CB0](*v11, 0x1000C8000313F17);
            }
            v3[5] = v82;
            *((_DWORD *)v3 + 12) = v83;
            unsigned int v83 = 0;
            if (*((_DWORD *)v3 + 16) >= 0x41u && *v71)
            {
              MEMORY[0x1D25D9CB0](*v71, 0x1000C8000313F17);
              unsigned int v44 = v83;
              v3[7] = v84;
              *((_DWORD *)v3 + 16) = v85;
              int v85 = 0;
              if (v44 >= 0x41 && v82) {
                MEMORY[0x1D25D9CB0](v82, 0x1000C8000313F17);
              }
              goto LABEL_32;
            }
            v3[7] = v84;
            int v19 = v85;
          }
          else
          {
            if (*((_DWORD *)v3 + 12) > 0x40u || *(_DWORD *)(a1 + 32) > 0x40u)
            {
              if (v11 != (void **)v9)
              {
                llvm::APInt::reallocate((uint64_t)(v3 + 5), *(_DWORD *)(a1 + 32));
                uint64_t v42 = *((unsigned int *)v3 + 12);
                if (v42 <= 0x40) {
                  *uint64_t v11 = (void *)*v9;
                }
                else {
                  memcpy(*v11, *v9, ((unint64_t)(v42 + 63) >> 3) & 0x3FFFFFF8);
                }
              }
            }
            else
            {
              v3[5] = *(void *)(a1 + 24);
              *((_DWORD *)v3 + 12) = *(_DWORD *)(a1 + 32);
            }
            if (*((_DWORD *)v3 + 16) > 0x40u || *(_DWORD *)(a1 + 48) > 0x40u)
            {
              if (v71 != (void **)v76)
              {
                llvm::APInt::reallocate((uint64_t)v71, *(_DWORD *)(a1 + 48));
                uint64_t v43 = *((unsigned int *)v3 + 16);
                if (v43 <= 0x40) {
                  *int v71 = (void *)*v76;
                }
                else {
                  memcpy(*v71, *v76, ((unint64_t)(v43 + 63) >> 3) & 0x3FFFFFF8);
                }
              }
              goto LABEL_32;
            }
            v3[7] = *(void *)(a1 + 40);
            int v19 = *(_DWORD *)(a1 + 48);
          }
          *((_DWORD *)v3 + 16) = v19;
LABEL_32:
          int v75 = 1;
LABEL_33:
          if (v81 >= 0x41 && v80) {
            MEMORY[0x1D25D9CB0](v80, 0x1000C8000313F17);
          }
          if (v79 >= 0x41 && v78) {
            MEMORY[0x1D25D9CB0](v78, 0x1000C8000313F17);
          }
          uint64_t v20 = (void *)v10[1];
          if (v20)
          {
            do
            {
              unsigned int v21 = v20;
              uint64_t v20 = (void *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              unsigned int v21 = (void *)v10[2];
              BOOL v34 = *v21 == (void)v10;
              uint64_t v10 = v21;
            }
            while (!v34);
          }
          uint64_t v10 = v21;
          if (v21 == v3 + 13) {
            goto LABEL_104;
          }
        }
      }
      int v75 = 0;
LABEL_104:
      long long v45 = (void *)v3[1];
      if (v45)
      {
        do
        {
          int v46 = v45;
          long long v45 = (void *)*v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          int v46 = (void *)v3[2];
          BOOL v34 = *v46 == (void)v3;
          uint64_t v3 = v46;
        }
        while (!v34);
      }
      int v5 = v73 | v75;
      uint64_t v3 = v46;
    }
    while (v46 != v72);
    if (v5)
    {
      sub_1CC14FEFC(a1 + 56, &v77);
      uint64_t v48 = *(unsigned int *)(v47 + 16);
      if (v48)
      {
        uint64_t v49 = *(uint64_t **)(v47 + 8);
        uint64_t v50 = &v49[v48];
        while (1)
        {
          uint64_t v82 = 0;
          if ((sub_1CC091A20(*(void *)(a1 + 80), *(_DWORD *)(a1 + 96), *v49, &v82) & 1) == 0) {
            break;
          }
LABEL_136:
          if (++v49 == v50) {
            goto LABEL_140;
          }
        }
        unsigned int v51 = *(_DWORD *)(a1 + 96);
        int v52 = *(_DWORD *)(a1 + 88);
        if (4 * v52 + 4 >= 3 * v51)
        {
          v51 *= 2;
        }
        else if (v51 + ~v52 - *(_DWORD *)(a1 + 92) > v51 >> 3)
        {
LABEL_116:
          uint64_t v53 = v82;
          ++*(_DWORD *)(a1 + 88);
          if (*v53 != -4096) {
            --*(_DWORD *)(a1 + 92);
          }
          *uint64_t v53 = *v49;
          int v55 = *(uint64_t **)(a1 + 112);
          unint64_t v54 = *(void *)(a1 + 120);
          if ((unint64_t)v55 >= v54)
          {
            int v57 = *(void **)(a1 + 104);
            uint64_t v58 = v55 - v57;
            unint64_t v59 = v58 + 1;
            if ((unint64_t)(v58 + 1) >> 61) {
              abort();
            }
            uint64_t v60 = v54 - (void)v57;
            if (v60 >> 2 > v59) {
              unint64_t v59 = v60 >> 2;
            }
            if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v61 = v59;
            }
            if (v61)
            {
              if (v61 >> 61) {
                sub_1CB833614();
              }
              uint64_t v62 = (char *)operator new(8 * v61);
            }
            else
            {
              uint64_t v62 = 0;
            }
            uint64_t v63 = (uint64_t *)&v62[8 * v58];
            *uint64_t v63 = *v49;
            int v56 = v63 + 1;
            if (v55 != v57)
            {
              do
              {
                uint64_t v64 = *--v55;
                *--uint64_t v63 = v64;
              }
              while (v55 != v57);
              int v55 = *(uint64_t **)(a1 + 104);
            }
            *(void *)(a1 + 104) = v63;
            *(void *)(a1 + 112) = v56;
            *(void *)(a1 + 120) = &v62[8 * v61];
            if (v55) {
              operator delete(v55);
            }
          }
          else
          {
            *int v55 = *v49;
            int v56 = v55 + 1;
          }
          *(void *)(a1 + 112) = v56;
          goto LABEL_136;
        }
        sub_1CC091AB4(a1 + 80, v51);
        uint64_t v82 = 0;
        sub_1CC091A20(*(void *)(a1 + 80), *(_DWORD *)(a1 + 96), *v49, &v82);
        goto LABEL_116;
      }
LABEL_140:
      ++*(_DWORD *)(a3 + 48);
    }
  }
}

uint64_t sub_1CC150B7C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = (v2 - *a1) >> 6;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58) {
    abort();
  }
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = a1[2] - v1;
  if (v7 >> 5 > v4) {
    unint64_t v4 = v7 >> 5;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v8 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  uint64_t v20 = a1 + 2;
  if (v8 >> 58) {
    sub_1CB833614();
  }
  int v9 = (char *)operator new(v8 << 6);
  uint64_t v10 = (uint64_t)&v9[64 * v3];
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  uint64_t v11 = &v9[64 * v8];
  *(_DWORD *)(v10 + 16) = 64;
  *(void *)(v10 + 8) = -1;
  *(_DWORD *)(v10 + 32) = 64;
  *(void *)(v10 + 24) = -1;
  uint64_t v12 = v10 + 64;
  *(void *)(v10 + 40) = 0;
  *(void *)(v10 + 48) = 0;
  *(void *)(v10 + 56) = 0;
  sub_1CC14C4EC(v6, v2, v2, v1, v1, v10, v10);
  long long v13 = *(_OWORD *)a1;
  *a1 = v14;
  a1[1] = v12;
  long long v18 = v13;
  uint64_t v15 = a1[2];
  a1[2] = (uint64_t)v11;
  uint64_t v19 = v15;
  uint64_t v17 = v13;
  sub_1CD4CA25C((uint64_t)&v17);
  return v12;
}

uint64_t sub_1CC150C8C()
{
  uint64_t v3 = &v2;
  int v1 = 1;
  int v2 = 20;
  sub_1CD4C9B38(&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCC8150, &dword_1CB82C000);
  LOBYTE(v1) = 0;
  uint64_t v3 = &v1;
  int v2 = 1;
  sub_1CD4C9C58((char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCC8210, &dword_1CB82C000);
  LOBYTE(v1) = 0;
  uint64_t v3 = &v1;
  int v2 = 1;
  sub_1CD4C9D78((char **)&v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCC82D0, &dword_1CB82C000);
}

void llvm::SyncDependenceAnalysis::~SyncDependenceAnalysis(llvm::SyncDependenceAnalysis *this)
{
  sub_1CD4CAD8C(*((void **)this + 12));

  sub_1CD4CAAB8((uint64_t)this);
}

{
  uint64_t vars8;

  sub_1CD4CAD8C(*((void **)this + 12));

  sub_1CD4CAAB8((uint64_t)this);
}

void sub_1CC150DAC(char **a1, uint64_t *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v6 = (void *)a3;
  uint64_t v7 = a1;
  uint64_t v151 = *MEMORY[0x1E4F143B8];
  if (a3) {
    uint64_t v8 = **(void **)(a3 + 32);
  }
  else {
    uint64_t v8 = 0;
  }
  int v9 = a1[1];
  if (*a1 != v9)
  {
    uint64_t v10 = (unsigned int *)(a3 + 76);
    int64_t v140 = (unsigned int *)(a3 + 72);
    uint64_t v131 = a2;
    uint64_t v137 = v8;
    uint64_t v138 = (unsigned int *)(a3 + 76);
    do
    {
      unint64_t v11 = *((void *)v9 - 1);
      int v12 = *((_DWORD *)a2 + 4);
      if (v12)
      {
        uint64_t v13 = *a2;
        unsigned int v14 = v12 - 1;
        uint64_t v15 = ((v11 >> 4) ^ (v11 >> 9)) & (v12 - 1);
        uint64_t v16 = *(void *)(*a2 + 16 * v15);
        if (v11 == v16)
        {
LABEL_11:
          uint64_t v19 = *(void **)(v13 + 16 * v15 + 8);
          goto LABEL_13;
        }
        int v17 = 1;
        while (v16 != -4096)
        {
          int v18 = v15 + v17++;
          uint64_t v15 = v18 & v14;
          uint64_t v16 = *(void *)(v13 + 16 * v15);
          if (v11 == v16) {
            goto LABEL_11;
          }
        }
      }
      uint64_t v19 = 0;
LABEL_13:
      if (v19 == v6)
      {
        uint64_t v52 = *(void *)(v11 + 40);
        if (v52 != v11 + 40)
        {
          if (v52) {
            uint64_t v53 = v52 - 24;
          }
          else {
            uint64_t v53 = 0;
          }
          if (*(unsigned char *)(v53 + 16) != 30)
          {
            int v92 = 2;
            switch(*(unsigned char *)(v53 + 16))
            {
              case 0x1E:
LABEL_253:
                __break(1u);
                JUMPOUT(0x1CC1519B0);
              case 0x1F:
                int v92 = (*(_DWORD *)(v53 + 20) >> 1) & 0x3FFFFFF;
                goto LABEL_153;
              case 0x20:
              case 0x26:
                int v92 = (*(_DWORD *)(v53 + 20) & 0x7FFFFFF) - 1;
                goto LABEL_153;
              case 0x21:
                goto LABEL_86;
              case 0x24:
                int v92 = *(_WORD *)(v53 + 18) & 1;
                goto LABEL_153;
              case 0x25:
                int v92 = 1;
                goto LABEL_86;
              case 0x27:
                int v92 = *(_DWORD *)(v53 + 80) + 1;
LABEL_153:
                if (!v92) {
                  goto LABEL_219;
                }
                goto LABEL_86;
              default:
                goto LABEL_219;
            }
          }
          if ((*(_DWORD *)(v53 + 20) & 0x7FFFFFF) == 3) {
            int v92 = 2;
          }
          else {
            int v92 = 1;
          }
LABEL_86:
          unint64_t v135 = *((void *)v9 - 1);
          char v54 = 0;
          for (unsigned int i = 0; i != v92; ++i)
          {
            while (1)
            {
              unint64_t Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v53, i);
              if (Successor == v8) {
                break;
              }
              unint64_t v57 = Successor;
              if (v6)
              {
                uint64_t v59 = v6[7];
                uint64_t v58 = v6[8];
                if (v58 == v59)
                {
                  uint64_t v60 = *v10;
                  unint64_t v61 = (void *)(v58 + 8 * v60);
                  if (v60)
                  {
                    uint64_t v62 = 0;
                    uint64_t v63 = 8 * v60;
                    while (*(void *)(v58 + v62) != Successor)
                    {
                      v62 += 8;
                      if (v63 == v62) {
                        goto LABEL_107;
                      }
                    }
                    unint64_t v61 = (void *)(v58 + v62);
                  }
LABEL_107:
                  uint64_t v59 = v6[8];
                }
                else
                {
                  uint64_t v64 = *v140;
                  int v65 = v64 - 1;
                  unsigned int v66 = (v64 - 1) & ((Successor >> 4) ^ (Successor >> 9));
                  unint64_t v61 = (void *)(v58 + 8 * v66);
                  uint64_t v67 = *v61;
                  if (*v61 == -1)
                  {
                    int v68 = 0;
LABEL_140:
                    if (v68) {
                      unint64_t v61 = v68;
                    }
                    if (*v61 != Successor) {
                      unint64_t v61 = (void *)(v58 + 8 * v64);
                    }
                  }
                  else
                  {
                    int v68 = 0;
                    int v69 = 1;
                    while (v67 != Successor)
                    {
                      if (v68) {
                        BOOL v70 = 0;
                      }
                      else {
                        BOOL v70 = v67 == -2;
                      }
                      if (v70) {
                        int v68 = v61;
                      }
                      unsigned int v71 = v66 + v69++;
                      unsigned int v66 = v71 & v65;
                      unint64_t v61 = (void *)(v58 + 8 * (v71 & v65));
                      uint64_t v67 = *v61;
                      if (*v61 == -1) {
                        goto LABEL_140;
                      }
                    }
                  }
                }
                BOOL v36 = v58 == v59;
                int v72 = v140;
                if (v36) {
                  int v72 = v10;
                }
                if (v61 == (void *)(v58 + 8 * *v72)) {
                  break;
                }
              }
              for (unint64_t j = *(void **)(a5 + 8); j; unint64_t j = (void *)*j)
              {
                unint64_t v74 = j[4];
                if (Successor >= v74)
                {
                  if (v74 >= Successor) {
                    goto LABEL_118;
                  }
                  ++j;
                }
              }
              uint64_t v75 = v53;
              uint64_t v76 = v6;
              uint64_t v77 = a5;
              unsigned int v79 = (unint64_t *)a1[1];
              unint64_t v78 = (unint64_t)a1[2];
              if ((unint64_t)v79 >= v78)
              {
                unsigned int v81 = (unint64_t *)*a1;
                uint64_t v82 = ((char *)v79 - *a1) >> 3;
                unint64_t v83 = v82 + 1;
                if ((unint64_t)(v82 + 1) >> 61) {
LABEL_250:
                }
                  abort();
                uint64_t v84 = v78 - (void)v81;
                if (v84 >> 2 > v83) {
                  unint64_t v83 = v84 >> 2;
                }
                if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v85 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v85 = v83;
                }
                if (v85)
                {
                  if (v85 >> 61) {
LABEL_251:
                  }
                    sub_1CB833614();
                  uint64_t v86 = (char *)operator new(8 * v85);
                }
                else
                {
                  uint64_t v86 = 0;
                }
                unint64_t v87 = (unint64_t *)&v86[8 * v82];
                *unint64_t v87 = v57;
                int v80 = v87 + 1;
                if (v79 == v81)
                {
                  uint64_t v89 = (unint64_t **)a1;
                }
                else
                {
                  do
                  {
                    unint64_t v88 = *--v79;
                    *--unint64_t v87 = v88;
                  }
                  while (v79 != v81);
                  uint64_t v89 = (unint64_t **)a1;
                  unsigned int v79 = (unint64_t *)*a1;
                }
                *uint64_t v89 = v87;
                v89[1] = v80;
                v89[2] = (unint64_t *)&v86[8 * v85];
                uint64_t v8 = v137;
                if (v79) {
                  operator delete(v79);
                }
                uint64_t v10 = v138;
              }
              else
              {
                *unsigned int v79 = Successor;
                int v80 = v79 + 1;
              }
              a1[1] = (char *)v80;
              ++i;
              char v54 = 1;
              a5 = v77;
              uint64_t v6 = v76;
              uint64_t v53 = v75;
              if (v92 == i) {
                goto LABEL_145;
              }
            }
LABEL_118:
            ;
          }
          if (v54) {
            goto LABEL_145;
          }
          uint64_t v7 = a1;
          int v9 = a1[1];
          unint64_t v11 = v135;
        }
LABEL_219:
        v7[1] = v9 - 8;
        unint64_t v127 = v11;
        if (sub_1CD4AB93C((uint64_t **)a5, v11, v11))
        {
          uint64_t v128 = a4[3];
          if (!v128) {
            goto LABEL_252;
          }
          (*(void (**)(uint64_t, unint64_t))(*(void *)v128 + 48))(v128, v127);
        }
      }
      else
      {
        unint64_t v146 = v148;
        uint64_t v147 = 0x300000000;
        uint64_t v132 = v19;
        sub_1CC082408(v19, (uint64_t)&v146);
        if (!v147) {
          goto LABEL_147;
        }
        char v20 = 0;
        unsigned int v21 = (char *)v146;
        uint64_t v22 = (char *)v146 + 8 * v147;
        do
        {
          while (1)
          {
            unint64_t v23 = *(void *)v21;
            if (*(void *)v21 == v8) {
              break;
            }
            if (v6)
            {
              uint64_t v25 = v6[7];
              uint64_t v24 = v6[8];
              if (v24 == v25)
              {
                uint64_t v26 = *v10;
                unsigned int v27 = (void *)(v24 + 8 * v26);
                if (v26)
                {
                  uint64_t v28 = 0;
                  uint64_t v29 = 8 * v26;
                  while (*(void *)(v24 + v28) != v23)
                  {
                    v28 += 8;
                    if (v29 == v28) {
                      goto LABEL_36;
                    }
                  }
                  unsigned int v27 = (void *)(v24 + v28);
                }
LABEL_36:
                uint64_t v25 = v6[8];
              }
              else
              {
                uint64_t v30 = *v140;
                int v31 = v30 - 1;
                unsigned int v32 = (v30 - 1) & ((v23 >> 4) ^ (v23 >> 9));
                unsigned int v27 = (void *)(v24 + 8 * v32);
                uint64_t v33 = *v27;
                if (*v27 == -1)
                {
                  BOOL v34 = 0;
LABEL_50:
                  if (v34) {
                    unsigned int v27 = v34;
                  }
                  if (*v27 != v23) {
                    unsigned int v27 = (void *)(v24 + 8 * v30);
                  }
                }
                else
                {
                  BOOL v34 = 0;
                  int v35 = 1;
                  while (v33 != v23)
                  {
                    if (v34) {
                      BOOL v36 = 0;
                    }
                    else {
                      BOOL v36 = v33 == -2;
                    }
                    if (v36) {
                      BOOL v34 = v27;
                    }
                    unsigned int v37 = v32 + v35++;
                    unsigned int v32 = v37 & v31;
                    unsigned int v27 = (void *)(v24 + 8 * (v37 & v31));
                    uint64_t v33 = *v27;
                    if (*v27 == -1) {
                      goto LABEL_50;
                    }
                  }
                }
              }
              BOOL v36 = v24 == v25;
              uint64_t v38 = v140;
              if (v36) {
                uint64_t v38 = v10;
              }
              if (v27 == (void *)(v24 + 8 * *v38)) {
                break;
              }
            }
            if (*(void *)(a5 + 8))
            {
              uint64_t v39 = *(void **)(a5 + 8);
              do
              {
                unint64_t v40 = v39[4];
                if (v23 >= v40)
                {
                  if (v40 >= v23) {
                    goto LABEL_47;
                  }
                  ++v39;
                }
                uint64_t v39 = (void *)*v39;
              }
              while (v39);
            }
            uint64_t v42 = v7[1];
            unint64_t v41 = (unint64_t)v7[2];
            if ((unint64_t)v42 >= v41)
            {
              unsigned int v44 = *v7;
              uint64_t v45 = (v42 - *v7) >> 3;
              unint64_t v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 61) {
                goto LABEL_250;
              }
              uint64_t v47 = v41 - (void)v44;
              if (v47 >> 2 > v46) {
                unint64_t v46 = v47 >> 2;
              }
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v48 = v46;
              }
              if (v48)
              {
                if (v48 >> 61) {
                  goto LABEL_251;
                }
                uint64_t v49 = (char *)operator new(8 * v48);
              }
              else
              {
                uint64_t v49 = 0;
              }
              uint64_t v50 = &v49[8 * v45];
              *(void *)uint64_t v50 = v23;
              uint64_t v43 = v50 + 8;
              if (v42 != v44)
              {
                do
                {
                  uint64_t v51 = *((void *)v42 - 1);
                  v42 -= 8;
                  *((void *)v50 - 1) = v51;
                  v50 -= 8;
                }
                while (v42 != v44);
                uint64_t v42 = *v7;
              }
              *uint64_t v7 = v50;
              v7[1] = v43;
              v7[2] = &v49[8 * v48];
              if (v42) {
                operator delete(v42);
              }
              uint64_t v8 = v137;
            }
            else
            {
              *(void *)uint64_t v42 = v23;
              uint64_t v43 = v42 + 8;
            }
            v7[1] = v43;
            v21 += 8;
            char v20 = 1;
            uint64_t v10 = v138;
            if (v21 == v22) {
              goto LABEL_75;
            }
          }
LABEL_47:
          v21 += 8;
        }
        while (v21 != v22);
        if ((v20 & 1) == 0)
        {
LABEL_147:
          v7[1] -= 8;
          long long v90 = (void *)a4[3];
          if (v90)
          {
            long long v91 = v132;
            if (v90 == a4)
            {
              uint64_t v145 = v144;
              (*(void (**)(void *, void *))(*a4 + 24))(a4, v144);
            }
            else
            {
              uint64_t v145 = (void *)(*(uint64_t (**)(void *))(*v90 + 16))(v90);
            }
          }
          else
          {
            uint64_t v145 = 0;
            long long v91 = v132;
          }
          __p = 0;
          uint64_t v142 = 0;
          unsigned int v143 = 0;
          unint64_t v93 = *(void *)v91[4];
          sub_1CD4AB93C((uint64_t **)a5, v93, v93);
          if (!v145) {
LABEL_252:
          }
            sub_1CB920400();
          (*(void (**)(void *, unint64_t))(*v145 + 48))(v145, v93);
          unint64_t v133 = v93;
          uint64_t v94 = *(void *)(v93 + 40);
          if (v94 != v93 + 40)
          {
            if (v94) {
              int v95 = (unsigned __int8 *)(v94 - 24);
            }
            else {
              int v95 = 0;
            }
            int v134 = (llvm::Instruction *)v95;
            int v96 = v95[16];
            if (v96 != 30)
            {
              int v129 = 2;
              switch(v96)
              {
                case 30:
                  goto LABEL_253;
                case 31:
                  int v129 = (*((_DWORD *)v134 + 5) >> 1) & 0x3FFFFFF;
                  goto LABEL_239;
                case 32:
                case 38:
                  int v129 = (*((_DWORD *)v134 + 5) & 0x7FFFFFF) - 1;
                  goto LABEL_239;
                case 33:
                  goto LABEL_166;
                case 36:
                  int v129 = *((_WORD *)v134 + 9) & 1;
                  goto LABEL_239;
                case 37:
                  int v129 = 1;
                  goto LABEL_166;
                case 39:
                  int v129 = *((_DWORD *)v134 + 20) + 1;
LABEL_239:
                  if (!v129) {
                    goto LABEL_223;
                  }
                  goto LABEL_166;
                default:
                  goto LABEL_223;
              }
            }
            if ((*((_DWORD *)v134 + 5) & 0x7FFFFFF) == 3) {
              int v129 = 2;
            }
            else {
              int v129 = 1;
            }
LABEL_166:
            int v97 = 0;
            unsigned int v98 = 0;
            int v99 = (unsigned int *)v91 + 19;
            int v136 = (unsigned int *)(v91 + 9);
            do
            {
              uint64_t v100 = llvm::Instruction::getSuccessor(v134, v98);
              uint64_t v101 = v100;
              uint64_t v103 = v91[7];
              uint64_t v102 = v91[8];
              if (v102 == v103)
              {
                uint64_t v104 = *v99;
                uint64_t v105 = (void *)(v102 + 8 * v104);
                if (v104)
                {
                  uint64_t v106 = 0;
                  uint64_t v107 = 8 * v104;
                  while (*(void *)(v102 + v106) != v100)
                  {
                    v106 += 8;
                    if (v107 == v106) {
                      goto LABEL_185;
                    }
                  }
                  uint64_t v105 = (void *)(v102 + v106);
                }
LABEL_185:
                uint64_t v103 = v91[8];
              }
              else
              {
                uint64_t v108 = *v136;
                int v109 = v108 - 1;
                unsigned int v110 = (v108 - 1) & ((v100 >> 4) ^ (v100 >> 9));
                uint64_t v105 = (void *)(v102 + 8 * v110);
                uint64_t v111 = *v105;
                if (*v105 == -1)
                {
                  uint64_t v112 = 0;
LABEL_214:
                  if (v112) {
                    uint64_t v105 = v112;
                  }
                  if (*v105 != v100) {
                    uint64_t v105 = (void *)(v102 + 8 * v108);
                  }
                }
                else
                {
                  uint64_t v112 = 0;
                  int v113 = 1;
                  while (v111 != v100)
                  {
                    if (v112) {
                      BOOL v114 = 0;
                    }
                    else {
                      BOOL v114 = v111 == -2;
                    }
                    if (v114) {
                      uint64_t v112 = v105;
                    }
                    unsigned int v115 = v110 + v113++;
                    unsigned int v110 = v115 & v109;
                    uint64_t v105 = (void *)(v102 + 8 * (v115 & v109));
                    uint64_t v111 = *v105;
                    if (*v105 == -1) {
                      goto LABEL_214;
                    }
                  }
                }
              }
              BOOL v36 = v102 == v103;
              BOOL v116 = v136;
              if (v36) {
                BOOL v116 = v99;
              }
              if (v105 != (void *)(v102 + 8 * *v116) && v100 != v133)
              {
                if (v97 >= v143)
                {
                  unint64_t v119 = (char *)__p;
                  uint64_t v120 = (v97 - (unsigned char *)__p) >> 3;
                  unint64_t v121 = v120 + 1;
                  if ((unint64_t)(v120 + 1) >> 61) {
                    goto LABEL_250;
                  }
                  uint64_t v122 = v143 - (unsigned char *)__p;
                  if ((v143 - (unsigned char *)__p) >> 2 > v121) {
                    unint64_t v121 = v122 >> 2;
                  }
                  if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v123 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v123 = v121;
                  }
                  if (v123)
                  {
                    if (v123 >> 61) {
                      goto LABEL_251;
                    }
                    uint64_t v124 = (char *)operator new(8 * v123);
                  }
                  else
                  {
                    uint64_t v124 = 0;
                  }
                  int v125 = (uint64_t *)&v124[8 * v120];
                  uint64_t *v125 = v101;
                  unint64_t v118 = (char *)(v125 + 1);
                  if (v97 != v119)
                  {
                    do
                    {
                      uint64_t v126 = *((void *)v97 - 1);
                      v97 -= 8;
                      *--int v125 = v126;
                    }
                    while (v97 != v119);
                    int v97 = (char *)__p;
                  }
                  __p = v125;
                  unsigned int v143 = &v124[8 * v123];
                  long long v91 = v132;
                  if (v97) {
                    operator delete(v97);
                  }
                  uint64_t v8 = v137;
                }
                else
                {
                  *(void *)int v97 = v100;
                  unint64_t v118 = v97 + 8;
                }
                uint64_t v142 = v118;
                int v97 = v118;
                uint64_t v10 = v138;
              }
              ++v98;
            }
            while (v129 != v98);
          }
LABEL_223:
          if (v145)
          {
            if (v145 == v144)
            {
              uint64_t v150 = v149;
              (*(void (**)(void *, void *))(v144[0] + 24))(v144, v149);
            }
            else
            {
              uint64_t v150 = (void *)(*(uint64_t (**)(void))(*v145 + 16))();
            }
          }
          else
          {
            uint64_t v150 = 0;
          }
          sub_1CC150DAC(&__p, v131, v91, v149, a5);
          if (v150 == v149)
          {
            (*(void (**)(void *))(v149[0] + 32))(v149);
          }
          else if (v150)
          {
            (*(void (**)(void))(*v150 + 40))();
          }
          if (__p) {
            operator delete(__p);
          }
          if (v145 == v144)
          {
            (*(void (**)(void *))(v144[0] + 32))(v144);
          }
          else if (v145)
          {
            (*(void (**)(void))(*v145 + 40))();
          }
        }
LABEL_75:
        if (v146 != v148) {
          free(v146);
        }
      }
LABEL_145:
      uint64_t v7 = a1;
      int v9 = a1[1];
      a2 = v131;
    }
    while (*a1 != v9);
  }
}

BOOL sub_1CC151A08(void *a1, unint64_t a2, unint64_t a3, char a4)
{
  if (a4)
  {
    uint64_t v8 = *((unsigned int *)sub_1CD4CAC44((void *)(*a1 + 24), a2) + 6);
    uint64_t v9 = a1[5];
    BOOL v10 = *(void *)(v9 + 8 * v8) != 0 && *(void *)(v9 + 8 * v8) != a3;
    if (*(void *)(v9 + 8 * v8) != 0 && *(void *)(v9 + 8 * v8) != a3) {
      unint64_t v11 = a2;
    }
    else {
      unint64_t v11 = a3;
    }
    *(void *)(v9 + 8 * v8) = v11;
    if (!v10) {
      return 0;
    }
    uint64_t v12 = a1[8];
    uint64_t v13 = *(void *)(v12 + 72);
    uint64_t v14 = *(unsigned int *)(v12 + 84);
    if (v13 == *(void *)(v12 + 64))
    {
      if (v14)
      {
        uint64_t v15 = 0;
        uint64_t v16 = 8 * v14;
        int v17 = *(unint64_t **)(v12 + 72);
        while (*v17 != a2)
        {
          if (*v17 == -2) {
            uint64_t v15 = v17;
          }
          ++v17;
          v16 -= 8;
          if (!v16)
          {
            if (!v15) {
              goto LABEL_17;
            }
            *uint64_t v15 = a2;
            --*(_DWORD *)(v12 + 88);
            return 1;
          }
        }
        return 1;
      }
LABEL_17:
      unsigned int v18 = *(_DWORD *)(v12 + 80);
      if (v14 < v18)
      {
        *(_DWORD *)(v12 + 84) = v14 + 1;
        *(void *)(v13 + 8 * v14) = a2;
        return 1;
      }
    }
    else
    {
      unsigned int v18 = *(_DWORD *)(v12 + 80);
    }
    if (3 * v18 <= 4 * ((int)v14 - *(_DWORD *)(v12 + 88)))
    {
      if (v18 >= 0x40) {
        v18 *= 2;
      }
      else {
        unsigned int v18 = 128;
      }
    }
    else if (v18 - v14 >= v18 >> 3)
    {
      goto LABEL_23;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v12 + 64), v18);
    unsigned int v18 = *(_DWORD *)(v12 + 80);
    uint64_t v13 = *(void *)(v12 + 72);
LABEL_23:
    unsigned int v19 = v18 - 1;
    unsigned int v20 = (v18 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v21 = (unint64_t *)(v13 + 8 * v20);
    unint64_t v22 = *v21;
    if (*v21 == -1)
    {
      unint64_t v23 = 0;
LABEL_35:
      if (v23) {
        unsigned int v27 = v23;
      }
      else {
        unsigned int v27 = v21;
      }
      if (*v27 != a2)
      {
        if (*v27 == -2) {
          --*(_DWORD *)(v12 + 88);
        }
        else {
          ++*(_DWORD *)(v12 + 84);
        }
        unint64_t *v27 = a2;
      }
    }
    else
    {
      unint64_t v23 = 0;
      int v24 = 1;
      while (v22 != a2)
      {
        if (v23) {
          BOOL v25 = 0;
        }
        else {
          BOOL v25 = v22 == -2;
        }
        if (v25) {
          unint64_t v23 = v21;
        }
        unsigned int v26 = v20 + v24++;
        unsigned int v20 = v26 & v19;
        unsigned int v21 = (unint64_t *)(v13 + 8 * (v26 & v19));
        unint64_t v22 = *v21;
        if (*v21 == -1) {
          goto LABEL_35;
        }
      }
    }
    return 1;
  }

  return sub_1CC151C14(a1, a2, a3);
}

BOOL sub_1CC151C14(void *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6 = *((unsigned int *)sub_1CD4CAC44((void *)(*a1 + 24), a2) + 6);
  uint64_t v7 = a1[5];
  BOOL v8 = *(void *)(v7 + 8 * v6) != 0 && *(void *)(v7 + 8 * v6) != a3;
  if (*(void *)(v7 + 8 * v6) != 0 && *(void *)(v7 + 8 * v6) != a3) {
    unint64_t v9 = a2;
  }
  else {
    unint64_t v9 = a3;
  }
  *(void *)(v7 + 8 * v6) = v9;
  if (!v8) {
    return v8;
  }
  uint64_t v10 = a1[8];
  uint64_t v11 = *(void *)(v10 + 8);
  uint64_t v12 = *(unsigned int *)(v10 + 20);
  if (v11 != *(void *)v10)
  {
    unsigned int v16 = *(_DWORD *)(v10 + 16);
    goto LABEL_16;
  }
  if (!v12)
  {
LABEL_13:
    unsigned int v16 = *(_DWORD *)(v10 + 16);
    if (v12 < v16)
    {
      *(_DWORD *)(v10 + 20) = v12 + 1;
      *(void *)(v11 + 8 * v12) = a2;
      return v8;
    }
LABEL_16:
    if (3 * v16 <= 4 * ((int)v12 - *(_DWORD *)(v10 + 24)))
    {
      if (v16 >= 0x40) {
        v16 *= 2;
      }
      else {
        unsigned int v16 = 128;
      }
    }
    else if (v16 - v12 >= v16 >> 3)
    {
      goto LABEL_18;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v10, v16);
    unsigned int v16 = *(_DWORD *)(v10 + 16);
    uint64_t v11 = *(void *)(v10 + 8);
LABEL_18:
    unsigned int v17 = v16 - 1;
    unsigned int v18 = (v16 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v19 = (unint64_t *)(v11 + 8 * v18);
    unint64_t v20 = *v19;
    if (*v19 == -1)
    {
      unsigned int v21 = 0;
LABEL_30:
      if (v21) {
        BOOL v25 = v21;
      }
      else {
        BOOL v25 = v19;
      }
      if (*v25 != a2)
      {
        if (*v25 == -2) {
          --*(_DWORD *)(v10 + 24);
        }
        else {
          ++*(_DWORD *)(v10 + 20);
        }
        unint64_t *v25 = a2;
      }
    }
    else
    {
      unsigned int v21 = 0;
      int v22 = 1;
      while (v20 != a2)
      {
        if (v21) {
          BOOL v23 = 0;
        }
        else {
          BOOL v23 = v20 == -2;
        }
        if (v23) {
          unsigned int v21 = v19;
        }
        unsigned int v24 = v18 + v22++;
        unsigned int v18 = v24 & v17;
        unsigned int v19 = (unint64_t *)(v11 + 8 * (v24 & v17));
        unint64_t v20 = *v19;
        if (*v19 == -1) {
          goto LABEL_30;
        }
      }
    }
    return v8;
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v12;
  uint64_t v15 = *(unint64_t **)(v10 + 8);
  while (*v15 != a2)
  {
    if (*v15 == -2) {
      uint64_t v13 = v15;
    }
    ++v15;
    v14 -= 8;
    if (!v14)
    {
      if (!v13) {
        goto LABEL_13;
      }
      *uint64_t v13 = a2;
      --*(_DWORD *)(v10 + 24);
      return v8;
    }
  }
  return v8;
}

void sub_1CC151DE4()
{
}

void *sub_1CC151DF8(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F2607A58;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC151E40(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2607A58;
  a2[1] = v2;
  return result;
}

void *sub_1CC151E6C(uint64_t a1, unint64_t a2)
{
  return sub_1CD4CAE00(*(void *)(a1 + 8), a2);
}

void *sub_1CC151E74(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v12 = operator new(0x20uLL);
  *uint64_t v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  *((_DWORD *)v12 + 6) = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t prime = v18;
    }
    else {
      size_t prime = v17;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (prime > v9) {
      goto LABEL_56;
    }
    if (prime < v9)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < v9) {
LABEL_56:
      }
        sub_1CD3F1760(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void *)a1;
  unsigned int v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *uint64_t v12 = *v24;
LABEL_53:
    *unsigned int v24 = v12;
    goto LABEL_54;
  }
  *uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v25 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }
    else
    {
      v25 &= v9 - 1;
    }
    unsigned int v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_53;
  }
LABEL_54:
  ++*(void *)(a1 + 24);
  return v12;
}

uint64_t sub_1CC15214C()
{
  llvm::SyncDependenceAnalysis::EmptyDivergenceDesc = (uint64_t)&unk_1EBD04A58;
  unk_1EBD04A40 = &unk_1EBD04A58;
  qword_1EBD04A48 = 4;
  dword_1EBD04A50 = 0;
  qword_1EBD04A78 = (uint64_t)&unk_1EBD04A98;
  unk_1EBD04A80 = &unk_1EBD04A98;
  qword_1EBD04A88 = 4;
  dword_1EBD04A90 = 0;
  return __cxa_atexit((void (*)(void *))sub_1CD4CA2D0, &llvm::SyncDependenceAnalysis::EmptyDivergenceDesc, &dword_1CB82C000);
}

uint64_t sub_1CC152198(char **a1, uint64_t a2)
{
  unint64_t v3 = (unint64_t)a1[2];
  unint64_t v4 = a1[1];
  if ((unint64_t)v4 >= v3)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v8 = *(const void **)a2;
    uint64_t v9 = *(void *)(a2 + 8);
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - (void)*a1) >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v7 + 1) {
      uint64_t v11 = v7 + 1;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    unsigned int v24 = a1 + 2;
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
      sub_1CB833614();
    }
    unint64_t v13 = (char *)operator new(24 * v12);
    float v14 = &v13[24 * v7];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)float v14 = 0;
    sub_1CBFCBA2C(v14, v8, v9, (v9 - (uint64_t)v8) >> 3);
    BOOL v16 = *a1;
    float v15 = a1[1];
    if (v15 == *a1)
    {
      int64x2_t v17 = vdupq_n_s64((unint64_t)v15);
      unint64_t v18 = v14;
    }
    else
    {
      unint64_t v18 = v14;
      do
      {
        long long v19 = *(_OWORD *)(v15 - 24);
        v15 -= 24;
        *(_OWORD *)(v18 - 24) = v19;
        v18 -= 24;
        *((void *)v18 + 2) = *((void *)v15 + 2);
        *(void *)float v15 = 0;
        *((void *)v15 + 1) = 0;
        *((void *)v15 + 2) = 0;
      }
      while (v15 != v16);
      int64x2_t v17 = *(int64x2_t *)a1;
    }
    unint64_t v6 = v14 + 24;
    *a1 = v18;
    a1[1] = v6;
    int64x2_t v22 = v17;
    unint64_t v20 = a1[2];
    a1[2] = &v13[24 * v12];
    uint64_t v23 = v20;
    uint64_t v21 = v17.i64[0];
    uint64_t result = sub_1CD4CB4EC((uint64_t)&v21);
  }
  else
  {
    *(void *)unint64_t v4 = 0;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    uint64_t result = (uint64_t)sub_1CBFCBA2C(v4, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
    unint64_t v6 = v4 + 24;
  }
  a1[1] = v6;
  return result;
}

void llvm::SyntheticCountsUtils<llvm::ModuleSummaryIndex *>::propagate(uint64_t *a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  sub_1CD4CB74C(a1);
}

uint64_t llvm::SyntheticCountsUtils<llvm::ModuleSummaryIndex *>::propagateFromSCC(uint64_t a1, void (*a2)(unint64_t *__return_ptr, uint64_t, void, uint64_t *), uint64_t a3, void (*a4)(uint64_t, uint64_t, unint64_t, uint64_t), uint64_t a5)
{
  v71[16] = *MEMORY[0x1E4F143B8];
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  int v61 = 0;
  int v69 = v71;
  uint64_t v70 = 0x800000000;
  unsigned int v66 = v68;
  uint64_t v67 = 0x800000000;
  uint64_t v9 = *(void **)a1;
  unint64_t v10 = *(void **)(a1 + 8);
  if (*(void **)a1 == v10)
  {
    int v12 = 0;
    uint64_t v11 = 0;
LABEL_10:
    float v15 = &v11[v12];
    unint64_t v13 = v15;
    goto LABEL_11;
  }
  do
    sub_1CD4AD7E0((uint64_t)&v59, v9++, (uint64_t)&v62);
  while (v9 != v10);
  uint64_t v11 = v59;
  int v12 = v61;
  if (!v60) {
    goto LABEL_10;
  }
  unint64_t v13 = &v59[v61];
  if (v61)
  {
    uint64_t v14 = 0;
    while ((~v59[v14] & 0xFFFFFFFFFFFFFFF0) == 0)
    {
      if (v61 == ++v14)
      {
        float v15 = &v59[v61];
        goto LABEL_11;
      }
    }
    float v15 = &v59[v14];
  }
  else
  {
    float v15 = v59;
  }
LABEL_11:
  BOOL v16 = &v11[v12];
  if (v15 == v16) {
    goto LABEL_43;
  }
  do
  {
    unint64_t v17 = *v15 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = *(uint64_t **)(v17 + 24);
    if (*(uint64_t **)(v17 + 32) == v18)
    {
      int64x2_t v22 = &qword_1EBD069E8;
      uint64_t v21 = &qword_1EBD069E0;
    }
    else
    {
      uint64_t v19 = *v18;
      if (v19) {
        BOOL v20 = *(_DWORD *)(v19 + 8) == 0;
      }
      else {
        BOOL v20 = 0;
      }
      if (v20) {
        uint64_t v19 = *(void *)(v19 + 72);
      }
      uint64_t v21 = (uint64_t *)(v19 + 80);
      int64x2_t v22 = (uint64_t *)(v19 + 88);
    }
    uint64_t v23 = (void *)*v21;
    unsigned int v24 = (void *)*v22;
    while (v23 != v24)
    {
      if (v61)
      {
        unint64_t v25 = *v23 & 0xFFFFFFFFFFFFFFF8;
        unsigned int v26 = (v61 - 1) & *v23 & 0xFFFFFFF8;
        unint64_t v27 = v59[v26] & 0xFFFFFFFFFFFFFFF8;
        if (v25 == v27)
        {
LABEL_25:
          int v28 = v70;
          if (v70 < HIDWORD(v70))
          {
            uint64_t v29 = (uint64_t *)((char *)v69 + 16 * v70);
            *uint64_t v29 = *v15;
            v29[1] = (uint64_t)v23;
            LODWORD(v70) = v28 + 1;
            goto LABEL_33;
          }
          uint64_t v34 = *v15;
          int v35 = &v69;
          goto LABEL_36;
        }
        int v30 = 1;
        while (v27 != -8)
        {
          unsigned int v31 = v26 + v30++;
          unsigned int v26 = v31 & (v61 - 1);
          unint64_t v27 = v59[v26] & 0xFFFFFFFFFFFFFFF8;
          if (v25 == v27) {
            goto LABEL_25;
          }
        }
      }
      int v32 = v67;
      if (v67 < HIDWORD(v67))
      {
        uint64_t v33 = (uint64_t *)((char *)v66 + 16 * v67);
        uint64_t *v33 = *v15;
        v33[1] = (uint64_t)v23;
        LODWORD(v67) = v32 + 1;
        goto LABEL_33;
      }
      uint64_t v34 = *v15;
      int v35 = &v66;
LABEL_36:
      sub_1CD4C2394((uint64_t)v35, v34, (uint64_t)v23);
LABEL_33:
      v23 += 2;
    }
    BOOL v36 = v15 + 1;
    float v15 = v13;
    if (v36 != v13)
    {
      float v15 = v36;
      while ((~*v15 & 0xFFFFFFFFFFFFFFF0) == 0)
      {
        if (++v15 == v13)
        {
          float v15 = v13;
          break;
        }
      }
    }
  }
  while (v15 != v16);
LABEL_43:
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  unsigned int v64 = 0;
  unsigned int v37 = v70;
  if (!v70)
  {
    uint64_t v38 = 0;
    goto LABEL_67;
  }
  uint64_t v38 = 0;
  uint64_t v39 = 16 * v70;
  unint64_t v40 = (uint64_t **)((char *)v69 + 8);
  do
  {
    a2(&v56, a3, *(v40 - 1), *v40);
    if (!v58) {
      goto LABEL_46;
    }
    uint64_t v41 = **v40;
    uint64_t v65 = 0;
    unsigned int v42 = v64;
    int v43 = sub_1CC15362C(v38, v64, v41, &v65);
    uint64_t v44 = v65;
    if (!v43)
    {
      if (4 * (int)v63 + 4 >= 3 * v42)
      {
        int v47 = 2 * v42;
      }
      else
      {
        if (v42 + ~v63 - HIDWORD(v63) > v42 >> 3)
        {
LABEL_52:
          LODWORD(v63) = v63 + 1;
          if ((~*(void *)v44 & 0xFFFFFFFFFFFFFFF8) != 0) {
            --HIDWORD(v63);
          }
          unint64_t v45 = 0;
          *(void *)(v44 + 8) = 0;
          *(void *)(v44 + 16) = 0;
          *(void *)uint64_t v44 = v41;
          goto LABEL_55;
        }
        int v47 = v42;
      }
      sub_1CC1536CC((uint64_t)&v62, v47);
      uint64_t v65 = 0;
      uint64_t v38 = v62;
      sub_1CC15362C(v62, v64, v41, &v65);
      uint64_t v44 = v65;
      goto LABEL_52;
    }
    unint64_t v45 = *(void *)(v65 + 8);
LABEL_55:
    *(void *)(v44 + 8) = sub_1CD45F614(v45, *(_WORD *)(v44 + 16), v56, v57);
    *(_WORD *)(v44 + 16) = v46;
    if (v46 >= 0x4000)
    {
      *(void *)(v44 + 8) = -1;
      *(_WORD *)(v44 + 16) = 0x3FFF;
    }
LABEL_46:
    v40 += 2;
    v39 -= 16;
  }
  while (v39);
  unsigned int v37 = v64;
  if (!v63)
  {
LABEL_67:
    uint64_t v50 = (void *)(v38 + 24 * v37);
    unint64_t v48 = v50;
    goto LABEL_68;
  }
  unint64_t v48 = (void *)(v38 + 24 * v64);
  if (v64)
  {
    uint64_t v49 = 0;
    while ((~*(void *)(v38 + v49) & 0xFFFFFFFFFFFFFFF0) == 0)
    {
      v49 += 24;
      if (24 * v64 == v49)
      {
        uint64_t v50 = (void *)(v38 + 24 * v64);
        goto LABEL_68;
      }
    }
    uint64_t v50 = (void *)(v38 + v49);
  }
  else
  {
    uint64_t v50 = (void *)v38;
  }
LABEL_68:
  uint64_t v51 = (void *)(v38 + 24 * v37);
  while (v50 != v51)
  {
    a4(a5, *v50, v50[1], v50[2]);
    uint64_t v52 = v50 + 3;
    uint64_t v50 = v48;
    if (v52 != v48)
    {
      uint64_t v50 = v52;
      while ((~*v50 & 0xFFFFFFFFFFFFFFF0) == 0)
      {
        v50 += 3;
        if (v50 == v48)
        {
          uint64_t v50 = v48;
          break;
        }
      }
    }
  }
  if (v67)
  {
    uint64_t v53 = 16 * v67;
    char v54 = (uint64_t **)((char *)v66 + 8);
    do
    {
      a2(&v56, a3, *(v54 - 1), *v54);
      if (v58) {
        a4(a5, **v54, v56, v57);
      }
      v54 += 2;
      v53 -= 16;
    }
    while (v53);
  }
  MEMORY[0x1D25D9CD0](v38, 8);
  if (v66 != v68) {
    free(v66);
  }
  if (v69 != v71) {
    free(v69);
  }
  return MEMORY[0x1D25D9CD0](v59, 8);
}

void sub_1CC152980(int *a1, uint64_t a2)
{
  uint64_t v30 = a2;
  int v4 = *a1 + 1;
  *a1 = v4;
  *(_DWORD *)(sub_1CC152D44((uint64_t)(a1 + 2), &v30) + 8) = v4;
  unint64_t v6 = (uint64_t *)*((void *)a1 + 5);
  unint64_t v5 = *((void *)a1 + 6);
  if ((unint64_t)v6 < v5)
  {
    uint64_t *v6 = a2;
    uint64_t v14 = v6 + 1;
  }
  else
  {
    unint64_t v7 = (void *)*((void *)a1 + 4);
    uint64_t v8 = v6 - v7;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      goto LABEL_35;
    }
    uint64_t v10 = v5 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        goto LABEL_36;
      }
      int v12 = (char *)operator new(8 * v11);
    }
    else
    {
      int v12 = 0;
    }
    unint64_t v13 = (uint64_t *)&v12[8 * v8];
    *unint64_t v13 = a2;
    uint64_t v14 = v13 + 1;
    if (v6 != v7)
    {
      do
      {
        uint64_t v15 = *--v6;
        *--unint64_t v13 = v15;
      }
      while (v6 != v7);
      unint64_t v6 = (uint64_t *)*((void *)a1 + 4);
    }
    *((void *)a1 + 4) = v13;
    *((void *)a1 + 5) = v14;
    *((void *)a1 + 6) = &v12[8 * v11];
    if (v6) {
      operator delete(v6);
    }
  }
  *((void *)a1 + 5) = v14;
  uint64_t v16 = v30;
  uint64_t v17 = *(void *)(v30 + 16);
  int v18 = *a1;
  BOOL v20 = (char *)*((void *)a1 + 11);
  unint64_t v19 = *((void *)a1 + 12);
  if ((unint64_t)v20 < v19)
  {
    *(void *)BOOL v20 = v30;
    *((void *)v20 + 1) = v17;
    *((void *)v20 + 2) = sub_1CBFB2040;
    *((_DWORD *)v20 + 6) = v18;
    uint64_t v21 = v20 + 32;
    goto LABEL_18;
  }
  int64x2_t v22 = (unsigned char *)*((void *)a1 + 10);
  uint64_t v23 = (v20 - v22) >> 5;
  unint64_t v24 = v23 + 1;
  if ((unint64_t)(v23 + 1) >> 59) {
LABEL_35:
  }
    abort();
  uint64_t v25 = v19 - (void)v22;
  if (v25 >> 4 > v24) {
    unint64_t v24 = v25 >> 4;
  }
  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v26 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v26 = v24;
  }
  if (!v26)
  {
    unint64_t v27 = 0;
    goto LABEL_28;
  }
  if (v26 >> 59) {
LABEL_36:
  }
    sub_1CB833614();
  unint64_t v27 = (char *)operator new(32 * v26);
LABEL_28:
  int v28 = &v27[32 * v23];
  *(void *)int v28 = v16;
  *((void *)v28 + 1) = v17;
  *((void *)v28 + 2) = sub_1CBFB2040;
  *((_DWORD *)v28 + 6) = v18;
  uint64_t v21 = v28 + 32;
  if (v20 != v22)
  {
    do
    {
      long long v29 = *((_OWORD *)v20 - 2);
      *(_OWORD *)(v28 - 20) = *(_OWORD *)(v20 - 20);
      *((_OWORD *)v28 - 2) = v29;
      v28 -= 32;
      v20 -= 32;
    }
    while (v20 != v22);
    BOOL v20 = (char *)*((void *)a1 + 10);
  }
  *((void *)a1 + 10) = v28;
  *((void *)a1 + 11) = v21;
  *((void *)a1 + 12) = &v27[32 * v26];
  if (v20) {
    operator delete(v20);
  }
LABEL_18:
  *((void *)a1 + 11) = v21;
}

unint64_t sub_1CC152B90(unint64_t result)
{
  uint64_t v1 = (void **)(result + 56);
  *(void *)(result + 64) = *(void *)(result + 56);
  uint64_t v3 = *(void *)(result + 80);
  uint64_t v2 = *(void *)(result + 88);
  if (v3 != v2)
  {
    unint64_t v4 = result;
    uint64_t v5 = result + 8;
    while (1)
    {
      uint64_t v6 = *(void *)(v2 - 24);
      if (v6 != *(void *)(*(void *)(v2 - 32) + 24))
      {
        do
        {
          uint64_t v7 = *(void *)(v2 - 16);
          *(void *)(v2 - 24) = v6 + 40;
          v15[0] = v6;
          v15[1] = v7;
          uint64_t v8 = sub_1CBFB1F00(v15);
          v15[0] = 0;
          if (sub_1CC152E2C(*(void *)(v4 + 8), *(_DWORD *)(v4 + 24), v8, v15)) {
            BOOL v9 = v15[0] == *(void *)(v4 + 8) + 16 * *(unsigned int *)(v4 + 24);
          }
          else {
            BOOL v9 = 1;
          }
          if (v9)
          {
            sub_1CC152980((int *)v4, v8);
            uint64_t v2 = *(void *)(v4 + 88);
          }
          else
          {
            unsigned int v10 = *(_DWORD *)(v15[0] + 8);
            uint64_t v2 = *(void *)(v4 + 88);
            if (*(_DWORD *)(v2 - 8) > v10) {
              *(_DWORD *)(v2 - 8) = v10;
            }
          }
          uint64_t v6 = *(void *)(v2 - 24);
        }
        while (v6 != *(void *)(*(void *)(v2 - 32) + 24));
        uint64_t v3 = *(void *)(v4 + 80);
      }
      v15[0] = 0;
      uint64_t v11 = *(void *)(v2 - 32);
      v15[0] = v11;
      unsigned int v12 = *(_DWORD *)(v2 - 8);
      *(void *)(v4 + 88) = v2 - 32;
      if (v3 != v2 - 32 && *(_DWORD *)(v2 - 40) > v12) {
        *(_DWORD *)(v2 - 40) = v12;
      }
      uint64_t result = sub_1CC152D44(v5, v15);
      if (v12 == *(_DWORD *)(result + 8)) {
        break;
      }
      uint64_t v3 = *(void *)(v4 + 80);
      uint64_t v2 = *(void *)(v4 + 88);
      if (v3 == v2) {
        return result;
      }
    }
    uint64_t result = *(void *)(v4 + 64);
    do
    {
      uint64_t v13 = *(void *)(*(void *)(v4 + 40) - 8);
      if (result >= *(void *)(v4 + 72))
      {
        uint64_t v14 = sub_1CBF63C18(v1, v13);
      }
      else
      {
        *(void *)uint64_t result = v13;
        uint64_t v14 = (void *)(result + 8);
      }
      *(void *)(v4 + 64) = v14;
      *(void *)(v4 + 40) -= 8;
      *(_DWORD *)(sub_1CC152D44(v5, v14 - 1) + 8) = -1;
      uint64_t result = *(void *)(v4 + 64);
    }
    while (*(void *)(result - 8) != v11);
  }
  return result;
}

uint64_t sub_1CC152D44(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = 0;
  char v4 = sub_1CC152E2C(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    sub_1CC152EC0(a1, v7);
    uint64_t v8 = 0;
    sub_1CC152E2C(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    uint64_t result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)result != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *(void *)uint64_t result = *a2;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t sub_1CC152E2C(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    int v6 = (void *)(a1 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      unsigned int v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          unsigned int v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        int v6 = (void *)(a1 + 16 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_4;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        int v6 = v10;
      }
    }
  }
  else
  {
    int v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

void *sub_1CC152EC0(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC152F8C(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      void *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC152F8C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CC152E2C(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      uint64_t v10 = v11;
      *uint64_t v11 = *(void *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

void sub_1CC15303C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = 0;
  v31[0] = 0;
  v31[1] = 0;
  uint64_t v30 = (uint64_t *)v31;
  uint64_t v4 = (void *)(a1 + 8);
  uint64_t v5 = *(void **)a1;
  if (*(void *)a1 == a1 + 8) {
    goto LABEL_41;
  }
  do
  {
    uint64_t v7 = v5[7];
    if (v5[8] != v7 && *(_DWORD *)(*(void *)v7 + 8) == 1) {
      sub_1CD4CB9D0((unint64_t)(v5 + 4) & 0xFFFFFFFFFFFFFFF8 | *(unsigned __int8 *)(a1 + 133), &v30);
    }
    uint64_t v8 = (void *)v5[1];
    if (v8)
    {
      do
      {
        uint64_t v9 = v8;
        uint64_t v8 = (void *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        uint64_t v9 = (void *)v5[2];
        BOOL v10 = *v9 == (void)v5;
        uint64_t v5 = v9;
      }
      while (!v10);
    }
    uint64_t v5 = v9;
  }
  while (v9 != v4);
  uint64_t v11 = v30;
  if (v30 == (uint64_t *)v31)
  {
    uint64_t v3 = 0;
LABEL_41:
    __n128 __p = 0uLL;
    uint64_t v29 = 0;
    sub_1CD4CBAB0(&__p, a2);
    uint64_t v25 = (void *)__p.n128_u64[0];
    if (!__p.n128_u64[0]) {
      goto LABEL_44;
    }
    unint64_t v24 = &__p.n128_u64[1];
    goto LABEL_43;
  }
  BOOL v12 = 0;
  unsigned int v13 = 0;
  uint64_t v3 = 0;
  do
  {
    if (!*((unsigned char *)v11 + 40))
    {
      uint64_t v14 = v11[4];
      if (v13 >= v12)
      {
        uint64_t v15 = (v13 - v3) >> 4;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 60) {
          abort();
        }
        if ((v12 - v3) >> 3 > v16) {
          unint64_t v16 = (v12 - v3) >> 3;
        }
        if ((unint64_t)(v12 - v3) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17)
        {
          if (v17 >> 60) {
            sub_1CB833614();
          }
          int v18 = (char *)operator new(16 * v17);
        }
        else
        {
          int v18 = 0;
        }
        unint64_t v19 = (uint64_t *)&v18[16 * v15];
        *unint64_t v19 = v14;
        v19[1] = 0;
        if (v13 == v3)
        {
          uint64_t v21 = v13;
          uint64_t v3 = &v18[16 * v15];
        }
        else
        {
          BOOL v20 = &v18[16 * v15];
          do
          {
            *((_OWORD *)v20 - 1) = *((_OWORD *)v13 - 1);
            v20 -= 16;
            v13 -= 16;
          }
          while (v13 != v3);
          uint64_t v21 = v3;
          uint64_t v3 = v20;
        }
        BOOL v12 = &v18[16 * v17];
        unsigned int v13 = (char *)(v19 + 2);
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *(void *)unsigned int v13 = v14;
        *((void *)v13 + 1) = 0;
        v13 += 16;
      }
    }
    int64x2_t v22 = (uint64_t *)v11[1];
    if (v22)
    {
      do
      {
        uint64_t v23 = v22;
        int64x2_t v22 = (uint64_t *)*v22;
      }
      while (v22);
    }
    else
    {
      do
      {
        uint64_t v23 = (uint64_t *)v11[2];
        BOOL v10 = *v23 == (void)v11;
        uint64_t v11 = v23;
      }
      while (!v10);
    }
    uint64_t v11 = v23;
  }
  while (v23 != (uint64_t *)v31);
  unint64_t v24 = &v26.n128_u64[1];
  if (v3 == v13) {
    goto LABEL_41;
  }
  __n128 v26 = 0uLL;
  uint64_t v27 = 0;
  sub_1CC0C57E8(&v26, v3, v13, (v13 - v3) >> 4);
  sub_1CD4CBAB0(&v26, a2);
  uint64_t v25 = (void *)v26.n128_u64[0];
  if (v26.n128_u64[0])
  {
LABEL_43:
    *unint64_t v24 = (unint64_t)v25;
    operator delete(v25);
  }
LABEL_44:
  if (v3) {
    operator delete(v3);
  }
  sub_1CB833A08((uint64_t)&v30, v31[0]);
}

char *sub_1CC1532D8(char **a1, void *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 3;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61) {
    abort();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 2 > v3) {
    unint64_t v3 = v6 >> 2;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v21 = a1 + 2;
  if (v7)
  {
    if (v7 >> 61) {
      sub_1CB833614();
    }
    uint64_t v8 = (char *)operator new(8 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = &v8[8 * v2];
  BOOL v10 = &v8[8 * v7];
  *(void *)uint64_t v9 = *a2;
  uint64_t v11 = v9 + 8;
  *a2 = 0;
  v19.i64[1] = (uint64_t)(v9 + 8);
  BOOL v20 = v10;
  unsigned int v13 = *a1;
  BOOL v12 = a1[1];
  if (v12 == *a1)
  {
    int64x2_t v15 = vdupq_n_s64((unint64_t)v12);
  }
  else
  {
    do
    {
      uint64_t v14 = *((void *)v12 - 1);
      v12 -= 8;
      *(void *)BOOL v12 = 0;
      *((void *)v9 - 1) = v14;
      v9 -= 8;
    }
    while (v12 != v13);
    int64x2_t v15 = *(int64x2_t *)a1;
    uint64_t v11 = (char *)v19.i64[1];
    BOOL v10 = v20;
  }
  *a1 = v9;
  a1[1] = v11;
  int64x2_t v19 = v15;
  unint64_t v16 = a1[2];
  a1[2] = v10;
  BOOL v20 = v16;
  uint64_t v18 = v15.i64[0];
  sub_1CC0C4DC0((uint64_t)&v18);
  return v11;
}

char *sub_1CC1533E4(char **a1, void *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = (v3 - *a1) >> 3;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61) {
    abort();
  }
  uint64_t v8 = a1[2] - v2;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 61) {
      sub_1CB833614();
    }
    BOOL v10 = (char *)operator new(8 * v9);
  }
  else
  {
    BOOL v10 = 0;
  }
  uint64_t v11 = &v10[8 * v4];
  *(void *)uint64_t v11 = *a2;
  BOOL v12 = v11 + 8;
  while (v3 != v2)
  {
    uint64_t v13 = *((void *)v3 - 1);
    v3 -= 8;
    *((void *)v11 - 1) = v13;
    v11 -= 8;
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[8 * v9];
  if (v2) {
    operator delete(v2);
  }
  return v12;
}

void *sub_1CC1534B8(char **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v5 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v5 = v3;
  }
  if (v5 > 0xAAAAAAAAAAAAAAALL) {
    sub_1CB833614();
  }
  unint64_t v7 = (char *)operator new(24 * v5);
  uint64_t v8 = &v7[24 * v2];
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = 0;
  sub_1CBFCBA2C(v8, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  unint64_t v9 = *a1;
  BOOL v10 = a1[1];
  if (v10 == *a1)
  {
    uint64_t v14 = v8 + 24;
    *a1 = v8;
    a1[1] = v8 + 24;
    a1[2] = &v7[24 * v5];
    if (!v10) {
      return v14;
    }
    goto LABEL_17;
  }
  uint64_t v11 = &v7[24 * v2];
  do
  {
    *((void *)v11 - 3) = 0;
    *((void *)v11 - 2) = 0;
    v11 -= 24;
    *((void *)v11 + 2) = 0;
    long long v12 = *(_OWORD *)(v10 - 24);
    v10 -= 24;
    *(_OWORD *)uint64_t v11 = v12;
    *((void *)v11 + 2) = *((void *)v10 + 2);
    *(void *)BOOL v10 = 0;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
  }
  while (v10 != v9);
  BOOL v10 = *a1;
  uint64_t v13 = a1[1];
  uint64_t v14 = v8 + 24;
  *a1 = v11;
  a1[1] = v8 + 24;
  a1[2] = &v7[24 * v5];
  if (v13 != v10)
  {
    int64x2_t v15 = v13;
    do
    {
      unint64_t v17 = (void *)*((void *)v15 - 3);
      v15 -= 24;
      unint64_t v16 = v17;
      if (v17)
      {
        *((void *)v13 - 2) = v16;
        operator delete(v16);
      }
      uint64_t v13 = v15;
    }
    while (v15 != v10);
  }
  if (v10) {
LABEL_17:
  }
    operator delete(v10);
  return v14;
}

uint64_t sub_1CC15362C(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = (a2 - 1) & a3 & 0xFFFFFFF8;
    uint64_t v6 = (void *)(a1 + 24 * v5);
    unint64_t v7 = *v6 & 0xFFFFFFFFFFFFFFF8;
    if ((a3 & 0xFFFFFFFFFFFFFFF8) == v7)
    {
      uint64_t v8 = 1;
    }
    else
    {
      BOOL v10 = 0;
      int v11 = 1;
      while (v7 != -8)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -16;
        }
        if (v12) {
          BOOL v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 24 * (v13 & v4));
        unint64_t v7 = *v6 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v8 = 1;
        if ((a3 & 0xFFFFFFFFFFFFFFF8) == v7) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void *sub_1CC1536CC(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 24 * v10;
      do
      {
        void *result = -8;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 24 * v3;
      uint64_t v13 = v4;
      do
      {
        uint64_t v14 = *(void *)v13;
        if ((~*(void *)v13 & 0xFFFFFFFFFFFFFFF0) != 0)
        {
          uint64_t v18 = 0;
          sub_1CC15362C(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          int64x2_t v15 = v18;
          *uint64_t v18 = *(void *)v13;
          *(_OWORD *)(v15 + 1) = *(_OWORD *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 24 * v16;
    do
    {
      void *result = -8;
      result += 3;
      v17 -= 24;
    }
    while (v17);
  }
  return result;
}

BOOL llvm::TargetLibraryInfoImpl::isCallingConvCCompatible(llvm::TargetLibraryInfoImpl *this, llvm::CallBase *a2)
{
  uint64_t v2 = *(void *)(*(void *)(*((void *)this + 5) + 56) + 40);
  if ((*(unsigned char *)(v2 + 239) & 0x80) != 0)
  {
    uint64_t v3 = *(void *)(v2 + 216);
    uint64_t v4 = *(void *)(v2 + 224);
  }
  else
  {
    uint64_t v3 = v2 + 216;
    uint64_t v4 = *(unsigned char *)(v2 + 239) & 0x7F;
  }
  return sub_1CC153868((*((unsigned __int16 *)this + 9) >> 2) & 0x3FF, v3, v4, *((void *)this + 9));
}

BOOL sub_1CC153868(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a1 - 66) >= 3) {
    return a1 == 0;
  }
  uint64_t v23 = v4;
  uint64_t v24 = v5;
  __int16 v19 = 261;
  v18[0] = a2;
  v18[1] = a3;
  llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)v18);
  BOOL v8 = v22 == 7 || v22 == 28;
  char v9 = (v22 & 0xFFFFFFFE) == 0x20 || v8;
  if (v21 < 0)
  {
    operator delete(__p);
    if (v9) {
      return 0;
    }
  }
  else if (v9)
  {
    return 0;
  }
  uint64_t v11 = *(void *)(a4 + 16);
  unsigned int v12 = *(unsigned __int8 *)(*(void *)v11 + 8);
  BOOL v13 = v12 > 0xF;
  int v14 = (1 << v12) & 0xA080;
  if (!v13 && v14 != 0)
  {
    if (8 * *(unsigned int *)(a4 + 12) == 8) {
      return 1;
    }
    uint64_t v16 = v11 + 8;
    uint64_t v17 = 8 * ((8 * *(unsigned int *)(a4 + 12) - 8) >> 3);
    while ((*(unsigned __int8 *)(*(void *)v16 + 8) | 2) == 0xF)
    {
      v16 += 8;
      v17 -= 8;
      if (!v17) {
        return 1;
      }
    }
  }
  return 0;
}

void sub_1CC153974(uint64_t a1, int *a2)
{
  if ((a2[6] - 27) >= 3)
  {
    char v10 = *(unsigned char *)(a1 + 70);
    char v9 = *(unsigned char *)(a1 + 88);
    char v8 = *(unsigned char *)(a1 + 63);
    char v7 = *(unsigned char *)(a1 + 56);
    char v6 = *(unsigned char *)(a1 + 64);
    char v5 = *(unsigned char *)(a1 + 69);
    char v4 = *(unsigned char *)(a1 + 57);
  }
  else
  {
    char v4 = 0;
    char v5 = 0;
    char v6 = 0;
    char v7 = 0;
    char v8 = 0;
    char v9 = 0;
    char v10 = 0;
    *(void *)(a1 + 109) = 0;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  *(unsigned char *)(a1 + 70) = v10 & 0xCC;
  *(unsigned char *)(a1 + 88) = v9 & 0x33;
  *(unsigned char *)(a1 + 63) = v8 & 0xCF;
  *(unsigned char *)(a1 + 56) = v7 & 0x3F;
  *(unsigned char *)(a1 + 69) = v5 & 0xCF;
  *(unsigned char *)(a1 + 64) = v6 & 0xCC;
  *(unsigned char *)(a1 + 57) = v4 & 0xCF;
  unint64_t v11 = a2[6];
  char v12 = (v11 < 0x25) & (0x1401800000uLL >> v11);
  *(unsigned char *)(a1 + 144) = v12;
  *(unsigned char *)(a1 + 145) = v12;
  *(unsigned char *)(a1 + 146) = (v11 & 0xFFFFFFFC) == 16;
  if (sub_1CD0BDF24(v11) == 16) {
    int v14 = 16;
  }
  else {
    int v14 = 32;
  }
  *(_DWORD *)(a1 + 148) = v14;
  if ((v11 & 0xFFFFFFFE) == 0x30)
  {
    *(void *)(a1 + 109) = 0;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_WORD *)(a1 + 80) = 12528;
    return;
  }
  if (v11 == 30 || v11 == 25)
  {
    *(void *)(a1 + 109) = 0;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_WORD *)(a1 + 22) = 960;
    return;
  }
  unsigned int v15 = a2[9];
  if ((v15 & 0xFFFFFFF7) == 3)
  {
    *(unsigned char *)(a1 + 70) = v10 | 0x33;
    *(unsigned char *)(a1 + 88) = v9 | 0xCC;
    if ((llvm::Triple::isMacOSXVersionLT((llvm::Triple *)a2, 0xAu, 5, 0) & 1) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v15 > 0x21)
  {
LABEL_19:
    *(unsigned char *)(a1 + 82) &= 0xF0u;
    *(unsigned char *)(a1 + 81) &= 0x3Fu;
LABEL_20:
    unsigned int v15 = a2[9];
    goto LABEL_21;
  }
  if (((1 << v15) & 0x360000000) == 0)
  {
    if (((1 << v15) & 0x10000080) != 0)
    {
      unint64_t OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)a2);
      uint64_t v67 = v16;
      uint64_t v64 = 3;
      uint64_t v65 = 0;
      if (!sub_1CC156834(&OSVersion, &v64)) {
        goto LABEL_20;
      }
    }
    goto LABEL_19;
  }
LABEL_21:
  if (v15 > 0x21 || ((1 << v15) & 0x3F0000888) == 0 || a2[6] == 41) {
    goto LABEL_30;
  }
  if ((v15 & 0xFFFFFFF7) == 3)
  {
    if (llvm::Triple::isMacOSXVersionLT((llvm::Triple *)a2, 0xAu, 9, 0)) {
      goto LABEL_30;
    }
    unsigned int v15 = a2[9];
  }
  if (v15 == 28 || v15 == 7)
  {
    unint64_t OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)a2);
    uint64_t v67 = v17;
    uint64_t v64 = 7;
    uint64_t v65 = 0;
    if (!sub_1CC156834(&OSVersion, &v64))
    {
LABEL_31:
      unsigned int v15 = a2[9];
      goto LABEL_32;
    }
LABEL_30:
    *(unsigned char *)(a1 + 29) &= 0xF0u;
    *(unsigned char *)(a1 + 18) &= 0xFu;
    *(unsigned char *)(a1 + 27) &= 0x3Fu;
    *(unsigned char *)(a1 + 28) &= 0xFCu;
    goto LABEL_31;
  }
LABEL_32:
  if (v15 != 5 && v15 != 14)
  {
    if (v15 == 9)
    {
      int v18 = a2[10];
      if ((v18 - 1) < 6 || (v18 & 0xFFFFFFFC) == 0xC)
      {
LABEL_42:
        int v20 = a2[6];
        goto LABEL_43;
      }
    }
    *(unsigned char *)(a1 + 42) &= 0xFCu;
    unsigned int v15 = a2[9];
  }
  unsigned int v19 = v15 & 0xFFFFFFF7;
  int v20 = a2[6];
  if (v19 == 3 && v20 == 41)
  {
    if ((llvm::Triple::isMacOSXVersionLT((llvm::Triple *)a2, 0xAu, 7, 0) & 1) == 0)
    {
      sub_1CD4CF5B4(a1, 0x115u, "fwrite$UNIX2003", (char *)0xF);
      double v13 = sub_1CD4CF5B4(a1, 0xFFu, "fputs$UNIX2003", (char *)0xE);
    }
    goto LABEL_42;
  }
LABEL_43:
  if (v20 != 37 && v20 != 43)
  {
    if (a2[9] == 40)
    {
LABEL_48:
      char v21 = a2 + 10;
      goto LABEL_74;
    }
    *(unsigned char *)(a1 + 72) &= 0x3Fu;
    *(unsigned char *)(a1 + 97) &= 0xCFu;
    *(unsigned char *)(a1 + 58) &= 0xFCu;
  }
  if (a2[9] == 40) {
    goto LABEL_48;
  }
  char v22 = *(unsigned char *)(a1 + 29);
  *(unsigned char *)(a1 + 30) &= 0xFCu;
  *(unsigned char *)(a1 + 29) = v22 & 0xF;
  char v21 = a2 + 10;
  if (a2[9] != 15) {
    goto LABEL_74;
  }
  int v23 = *v21;
  int v24 = 15;
  if (*v21 != 1 && v23 != 18)
  {
    BOOL v25 = v23 != 16 || llvm::Triple::getEnvironmentVersion((llvm::Triple *)a2) - 19 < 0xFFFFFFEE;
    int v26 = a2[6];
    int v27 = 1;
    if (v26 != 1 && v26 != 3)
    {
      if (v26 == 42) {
        goto LABEL_60;
      }
      int v27 = 0;
      *(unsigned char *)(a1 + 35) &= 0x3Fu;
      *(unsigned char *)(a1 + 37) &= 0xCFu;
      *(unsigned char *)(a1 + 39) &= 0x33u;
      *(unsigned char *)(a1 + 44) &= 0x3Fu;
      *(unsigned char *)(a1 + 47) &= 0x33u;
      *(unsigned char *)(a1 + 52) &= 0xCFu;
      *(unsigned char *)(a1 + 58) &= 0x3Fu;
      *(unsigned char *)(a1 + 61) &= 0x3Fu;
      *(unsigned char *)(a1 + 75) &= 0xCFu;
      *(unsigned char *)(a1 + 78) &= 0xF3u;
      *(unsigned char *)(a1 + 83) &= 0xF3u;
      *(unsigned char *)(a1 + 87) &= 0xFCu;
      *(unsigned char *)(a1 + 91) &= 0xF3u;
      *(unsigned char *)(a1 + 96) &= 0x33u;
      *(unsigned char *)(a1 + 98) &= 0xCFu;
      *(unsigned char *)(a1 + 109) &= 0xCCu;
    }
    if ((v26 | 2) == 3)
    {
LABEL_61:
      char v28 = *(unsigned char *)(a1 + 65);
      char v29 = *(unsigned char *)(a1 + 74);
      char v30 = *(unsigned char *)(a1 + 36);
      char v31 = v30 & 0x3F;
      *(unsigned char *)(a1 + 36) = v30 & 0x3F;
      char v32 = *(unsigned char *)(a1 + 38);
      char v33 = v32 & 0xCF;
      *(unsigned char *)(a1 + 38) = v32 & 0xCF;
      *(unsigned char *)(a1 + 39) &= 0xCFu;
      char v34 = *(unsigned char *)(a1 + 40);
      char v35 = v34 & 0x3F;
      *(unsigned char *)(a1 + 40) = v34 & 0x3F;
      char v36 = *(unsigned char *)(a1 + 45) & 0xFC;
      *(unsigned char *)(a1 + 45) = v36;
      *(unsigned char *)(a1 + 48) &= 0xF0u;
      char v37 = *(unsigned char *)(a1 + 52) & 0x3F;
      *(unsigned char *)(a1 + 52) = v37;
      char v38 = *(unsigned char *)(a1 + 54) & 0xF3;
      *(unsigned char *)(a1 + 54) = v38;
      *(unsigned char *)(a1 + 59) &= 0xFCu;
      *(unsigned char *)(a1 + 62) &= 0xFCu;
      *(unsigned char *)(a1 + 65) = v28 & 0xC3;
      *(unsigned char *)(a1 + 74) = v29 & 0xC3;
      *(unsigned char *)(a1 + 75) &= 0x3Fu;
      char v39 = *(unsigned char *)(a1 + 78) & 0xCF;
      *(unsigned char *)(a1 + 78) = v39;
      *(unsigned char *)(a1 + 83) &= 0xCFu;
      *(unsigned char *)(a1 + 87) &= 0xF3u;
      *(unsigned char *)(a1 + 91) &= 0xCFu;
      *(unsigned char *)(a1 + 97) &= 0xF0u;
      *(unsigned char *)(a1 + 98) &= 0x3Fu;
      *(unsigned char *)(a1 + 110) &= 0xFCu;
      *(unsigned char *)(a1 + 109) &= 0x3Fu;
      if (v25)
      {
        char v40 = *(unsigned char *)(a1 + 93);
        char v41 = *(unsigned char *)(a1 + 94);
        char v42 = *(unsigned char *)(a1 + 111);
      }
      else
      {
        *(unsigned char *)(a1 + 36) = v30 & 0x30;
        *(unsigned char *)(a1 + 37) &= 0x3Fu;
        *(unsigned char *)(a1 + 38) = v32 & 0xCC;
        *(unsigned char *)(a1 + 40) = v34 & 0x30;
        sub_1CD4CF5B4(a1, 0xABu, "_cabs", (char *)5);
        *(unsigned char *)(a1 + 43) &= 0x3Cu;
        *(unsigned char *)(a1 + 44) &= 0xFCu;
        sub_1CD4CF5B4(a1, 0xB9u, "_copysign", (char *)9);
        sub_1CD4CF5B4(a1, 0xBAu, "_copysignf", (char *)0xA);
        *(unsigned char *)(a1 + 51) &= 0x3Fu;
        *(unsigned char *)(a1 + 52) &= 0xFCu;
        *(unsigned char *)(a1 + 53) &= 0xF0u;
        *(unsigned char *)(a1 + 60) &= 0x30u;
        *(unsigned char *)(a1 + 61) &= 0xFCu;
        *(unsigned char *)(a1 + 76) &= 0x30u;
        *(unsigned char *)(a1 + 77) &= 0xFCu;
        double v13 = sub_1CD4CF5B4(a1, 0x136u, "_logb", (char *)5);
        if (v27) {
          double v13 = sub_1CD4CF5B4(a1, 0x137u, "_logbf", (char *)6);
        }
        else {
          *(unsigned char *)(a1 + 77) &= 0x3Fu;
        }
        *(unsigned char *)(a1 + 92) &= 0xFu;
        char v40 = *(unsigned char *)(a1 + 93) & 0xCF;
        char v41 = *(unsigned char *)(a1 + 94) & 0xCF;
        char v42 = *(unsigned char *)(a1 + 111) & 0xC3;
        char v31 = *(unsigned char *)(a1 + 36);
        char v33 = *(unsigned char *)(a1 + 38);
        char v35 = *(unsigned char *)(a1 + 40);
        char v37 = *(unsigned char *)(a1 + 52);
        char v39 = *(unsigned char *)(a1 + 78);
        char v36 = *(unsigned char *)(a1 + 45);
        char v38 = *(unsigned char *)(a1 + 54);
      }
      *(unsigned char *)(a1 + 36) = v31 & 0xCF;
      *(unsigned char *)(a1 + 38) = v33 & 0xF3;
      *(unsigned char *)(a1 + 40) = v35 & 0xCF;
      *(unsigned char *)(a1 + 43) &= 0xF3u;
      *(unsigned char *)(a1 + 44) &= 0xF3u;
      char v43 = *(unsigned char *)(a1 + 46);
      *(unsigned char *)(a1 + 52) = v37 & 0xF3;
      *(unsigned char *)(a1 + 53) &= 0xCFu;
      *(unsigned char *)(a1 + 60) &= 0xCFu;
      *(unsigned char *)(a1 + 61) &= 0xF3u;
      *(unsigned char *)(a1 + 76) &= 0xCFu;
      *(unsigned char *)(a1 + 77) &= 0xF3u;
      *(unsigned char *)(a1 + 78) = v39 & 0xFC;
      *(unsigned char *)(a1 + 84) &= 0xF3u;
      *(unsigned char *)(a1 + 94) = v41 & 0x3F;
      *(unsigned char *)(a1 + 111) = v42 & 0x3F;
      *(unsigned char *)(a1 + 35) &= 0xF3u;
      *(unsigned char *)(a1 + 45) = v36 & 0xF3;
      *(unsigned char *)(a1 + 46) = v43 & 0x3C;
      *(unsigned char *)(a1 + 54) = v38 & 0x3F;
      *(unsigned char *)(a1 + 57) &= 0x3Fu;
      *(unsigned char *)(a1 + 66) &= 0xF3u;
      *(unsigned char *)(a1 + 67) &= 0xFCu;
      *(unsigned char *)(a1 + 68) &= 0xF3u;
      *(unsigned char *)(a1 + 72) &= 0xFCu;
      *(unsigned char *)(a1 + 79) &= 0x3Fu;
      *(unsigned char *)(a1 + 82) &= 0xCFu;
      *(unsigned char *)(a1 + 85) &= 0xCu;
      *(unsigned char *)(a1 + 86) &= 0xF3u;
      *(unsigned char *)(a1 + 89) &= 0x3Fu;
      *(unsigned char *)(a1 + 93) = v40 & 0xF0;
      *(unsigned char *)(a1 + 99) &= 0xF3u;
      *(unsigned char *)(a1 + 100) &= 0x3Fu;
      *(unsigned char *)(a1 + 103) &= 0xCFu;
      *(unsigned char *)(a1 + 112) &= 0xCFu;
      *(unsigned char *)(a1 + 113) &= 0xFCu;
      *(unsigned char *)(a1 + 116) &= 0x3Fu;
      int v24 = a2[9];
      int v23 = a2[10];
      goto LABEL_68;
    }
LABEL_60:
    *(unsigned char *)(a1 + 54) &= 0xFCu;
    goto LABEL_61;
  }
LABEL_68:
  if (v24 == 15 && v23 != 18)
  {
    *(unsigned char *)(a1 + 42) &= 0xC0u;
    *(unsigned char *)(a1 + 45) &= 0xCFu;
    *(unsigned char *)(a1 + 48) &= 0xCFu;
    *(unsigned char *)(a1 + 55) &= 0x3Fu;
    *(unsigned char *)(a1 + 58) &= 0xF3u;
    *(unsigned char *)(a1 + 67) &= 0xCFu;
    *(unsigned char *)(a1 + 68) &= 0x3Fu;
    *(unsigned char *)(a1 + 69) &= 0xFCu;
    *(unsigned char *)(a1 + 71) &= 0xC0u;
    *(unsigned char *)(a1 + 72) &= 0xC3u;
    *(unsigned char *)(a1 + 73) &= 0x3Fu;
    *(unsigned char *)(a1 + 78) &= 0x3Fu;
    *(unsigned char *)(a1 + 84) &= 0xFu;
    *(unsigned char *)(a1 + 87) &= 0xCFu;
    *(unsigned char *)(a1 + 89) &= 0xF3u;
    *(unsigned char *)(a1 + 90) &= 0x3Cu;
    *(unsigned char *)(a1 + 95) &= 0xCFu;
    *(unsigned char *)(a1 + 99) &= 0x3Fu;
    *(unsigned char *)(a1 + 100) &= 0xC3u;
    *(unsigned char *)(a1 + 110) &= 0xF3u;
    *(unsigned char *)(a1 + 112) &= 0x3Cu;
    *(unsigned char *)(a1 + 113) &= 0xF3u;
    int v24 = a2[9];
    int v23 = a2[10];
  }
  if (v24 == 15 && (v23 & 0xFFFFFFEE) == 0)
  {
    *(unsigned char *)(a1 + 5) &= 0xFu;
    *(_DWORD *)(a1 + 6) = 0;
    *(_DWORD *)(a1 + 9) = 0;
    *(unsigned char *)(a1 + 13) &= 0xF0u;
    goto LABEL_75;
  }
LABEL_74:
  *(unsigned char *)(a1 + 4) = 0;
  *(_DWORD *)a1 = 0;
LABEL_75:
  uint64_t v44 = a2[9];
  if (v44 > 0x21) {
    goto LABEL_86;
  }
  if (((1 << v44) & 0x2F0000080) == 0)
  {
    if (v44 == 11)
    {
      *(unsigned char *)(a1 + 51) &= 0xCFu;
      if (!llvm::Triple::isMacOSXVersionLT((llvm::Triple *)a2, 0xAu, 11, 0))
      {
LABEL_82:
        sub_1CD4CF5B4(a1, 0xCCu, "__exp10", (char *)7);
        double v13 = sub_1CD4CF5B4(a1, 0xCDu, "__exp10f", (char *)8);
        goto LABEL_88;
      }
      goto LABEL_85;
    }
LABEL_86:
    char v48 = *(unsigned char *)(a1 + 51) & 0xC0;
    goto LABEL_87;
  }
  *(unsigned char *)(a1 + 51) &= 0xCFu;
  int v45 = a2[9];
  if (v45 != 28 && v45 != 7) {
    goto LABEL_82;
  }
  unint64_t OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)a2);
  uint64_t v67 = v46;
  uint64_t v64 = 7;
  uint64_t v65 = 0;
  if ((sub_1CC156834(&OSVersion, &v64) & 1) == 0)
  {
    unint64_t OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)a2);
    uint64_t v67 = v47;
    uint64_t v64 = 9;
    uint64_t v65 = 0;
    if (!sub_1CC156834(&OSVersion, &v64) || (a2[6] - 41) > 1) {
      goto LABEL_82;
    }
  }
LABEL_85:
  char v48 = *(unsigned char *)(a1 + 51) & 0xF0;
LABEL_87:
  *(unsigned char *)(a1 + 51) = v48;
LABEL_88:
  unsigned int v49 = a2[9];
  if (v49 > 0x21 || ((1 << v49) & 0x270000AA8) == 0)
  {
    *(unsigned char *)(a1 + 56) &= 0xFCu;
    unsigned int v49 = a2[9];
  }
  if (v49 > 0x21 || ((1 << v49) & 0x230000AA8) == 0)
  {
    *(unsigned char *)(a1 + 56) &= 0xF3u;
    unsigned int v49 = a2[9];
  }
  if (v49 != 5)
  {
    *(unsigned char *)(a1 + 59) &= 3u;
    if (a2[9] == 9 && (*v21 - 1) < 6) {
      goto LABEL_104;
    }
  }
  *(unsigned char *)(a1 + 32) &= 0xCFu;
  *(unsigned char *)(a1 + 34) &= 0xF3u;
  char v50 = *(unsigned char *)(a1 + 22);
  *(unsigned char *)(a1 + 22) = v50 & 0xC3;
  *(unsigned char *)(a1 + 5) &= 0xF0u;
  int v51 = a2[10];
  BOOL v52 = (v51 & 0xFFFFFFFC) == 0xC || v51 == 11;
  char v53 = *(unsigned char *)(a1 + 79);
  if (!v52) {
    v53 &= 0xCCu;
  }
  *(unsigned char *)(a1 + 62) &= 0xCFu;
  *(unsigned char *)(a1 + 66) &= 0xCFu;
  *(unsigned char *)(a1 + 67) &= 0x33u;
  *(unsigned char *)(a1 + 68) &= 0xCFu;
  *(unsigned char *)(a1 + 79) = v53 & 0xFC;
  *(unsigned char *)(a1 + 85) &= 0xF3u;
  *(unsigned char *)(a1 + 99) &= 0xCFu;
  *(unsigned char *)(a1 + 100) &= 0xFCu;
  *(unsigned char *)(a1 + 110) &= 0x3Fu;
  *(unsigned char *)(a1 + 13) &= 0xFu;
  *(_WORD *)(a1 + 14) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 17) &= 0x3Cu;
  *(unsigned char *)(a1 + 18) &= 0xF0u;
  *(_WORD *)(a1 + 20) = 0;
  *(unsigned char *)(a1 + 22) = v50 & 0xC0;
  *(unsigned char *)(a1 + 23) &= 3u;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 25) &= 0xF0u;
  *(unsigned char *)(a1 + 27) &= 0xC0u;
  *(unsigned char *)(a1 + 28) &= 3u;
  *(unsigned char *)(a1 + 30) &= 0x3Fu;
  *(unsigned char *)(a1 + 31) &= 0xF0u;
  int v54 = a2[10];
  if (a2[9] == 9 && (v54 - 1) < 6) {
    goto LABEL_104;
  }
  if (v54 == 11 && (sub_1CD4CF6B4((llvm::Triple *)a2, 0x1Cu) & 1) == 0)
  {
LABEL_104:
    *(unsigned char *)(a1 + 70) |= 0x33u;
    *(unsigned char *)(a1 + 88) |= 0xCCu;
    *(unsigned char *)(a1 + 63) |= 0x30u;
    *(unsigned char *)(a1 + 56) |= 0xC0u;
    char v55 = *(unsigned char *)(a1 + 64);
    *(unsigned char *)(a1 + 69) |= 0x30u;
    *(unsigned char *)(a1 + 64) = v55 | 0x33;
    *(unsigned char *)(a1 + 57) |= 0x30u;
  }
  if (*v21 == 11 && sub_1CD4CF6B4((llvm::Triple *)a2, 0x15u)) {
    *(unsigned char *)(a1 + 100) &= 0xC3u;
  }
  int v56 = a2[6];
  if (v56 == 42 && a2[8] == 3 && a2[9] == 25)
  {
    char v57 = *(unsigned char *)(a1 + 79);
    *(unsigned char *)(a1 + 6) &= 0xFu;
    LODWORD(v13) = *(_DWORD *)(a1 + 8);
    int16x8_t v58 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&v13);
    *(int8x8_t *)v58.i8 = vand_s8(*(int8x8_t *)v58.i8, (int8x8_t)0xF00F0000F000FLL);
    *(_DWORD *)(a1 + 8) = vmovn_s16(v58).u32[0];
    *(unsigned char *)(a1 + 12) &= 0xF0u;
    *(unsigned char *)(a1 + 25) &= 0xFu;
    *(unsigned char *)(a1 + 26) &= 0xC0u;
    *(unsigned char *)(a1 + 30) &= 0xC3u;
    *(unsigned char *)(a1 + 31) &= 0xFu;
    *(unsigned char *)(a1 + 32) &= 0x30u;
    *(unsigned char *)(a1 + 33) = 0;
    char v59 = *(unsigned char *)(a1 + 34);
    *(unsigned char *)(a1 + 35) &= 0xF3u;
    *(unsigned char *)(a1 + 45) &= 0xC3u;
    *(unsigned char *)(a1 + 46) &= 0xFCu;
    *(unsigned char *)(a1 + 48) &= 0xFu;
    *(unsigned char *)(a1 + 49) = 0;
    *(unsigned char *)(a1 + 50) &= 0xC0u;
    *(unsigned char *)(a1 + 62) &= 0x3Fu;
    *(unsigned char *)(a1 + 78) &= 0x3Fu;
    *(unsigned char *)(a1 + 82) &= 0xCFu;
    *(unsigned char *)(a1 + 89) &= 0x33u;
    char v60 = *(unsigned char *)(a1 + 90);
    *(unsigned char *)(a1 + 99) &= 0x33u;
    *(unsigned char *)(a1 + 108) &= 0xCFu;
    *(unsigned char *)(a1 + 116) &= 0x3Fu;
    *(unsigned char *)(a1 + 17) &= 0xC3u;
    *(unsigned char *)(a1 + 22) &= 0x3Fu;
    *(unsigned char *)(a1 + 23) &= 0xFCu;
    *(unsigned char *)(a1 + 34) = v59 & 0xC;
    *(unsigned char *)(a1 + 42) = 0;
    *(unsigned char *)(a1 + 43) &= 0xF0u;
    *(unsigned char *)(a1 + 55) &= 0x3Fu;
    *(unsigned char *)(a1 + 58) &= 0xF3u;
    *(int8x8_t *)v58.i8 = vand_s8(*(int8x8_t *)(a1 + 66), (int8x8_t)0x3CC0C03FFC33CCF3);
    *(void *)(a1 + 66) = v58.i64[0];
    *(unsigned char *)(a1 + 79) = v57 & 0xF | 0x30;
    *(unsigned char *)(a1 + 81) &= 0xF0u;
    v58.i32[0] = *(_DWORD *)(a1 + 84);
    int16x8_t v61 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v58.i8);
    *(int8x8_t *)v61.i8 = vand_s8(*(int8x8_t *)v61.i8, (int8x8_t)0xCF00F3000C000FLL);
    *(int8x8_t *)v61.i8 = vmovn_s16(v61);
    *(_DWORD *)(a1 + 84) = v61.i32[0];
    *(unsigned char *)(a1 + 90) = v60 & 0xC;
    v61.i32[0] = *(_DWORD *)(a1 + 92);
    int16x8_t v62 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v61.i8);
    *(int8x8_t *)v62.i8 = vand_s8(*(int8x8_t *)v62.i8, (int8x8_t)0xCF00F0003300FCLL);
    *(int8x8_t *)v62.i8 = vmovn_s16(v62);
    *(_DWORD *)(a1 + 92) = v62.i32[0];
    *(unsigned char *)(a1 + 100) &= 0xC3u;
    *(unsigned char *)(a1 + 102) &= 0x3Fu;
    *(unsigned char *)(a1 + 103) &= 0xFCu;
    *(unsigned char *)(a1 + 104) &= 0xFu;
    v62.i32[0] = *(_DWORD *)(a1 + 110);
    int16x8_t v63 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v62.i8);
    *(int8x8_t *)v63.i8 = vand_s8(*(int8x8_t *)v63.i8, (int8x8_t)0xC0000C00FC00C3);
    *(_DWORD *)(a1 + 110) = vmovn_s16(v63).u32[0];
    int v56 = a2[6];
  }
  if ((v56 & 0xFFFFFFFE) == 0x2C)
  {
    *(void *)(a1 + 109) = 0;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(unsigned char *)(a1 + 26) = -64;
    *(unsigned char *)(a1 + 79) = 12;
    *(unsigned char *)(a1 + 64) = -64;
    *(_WORD *)(a1 + 22) = 960;
  }
  else
  {
    *(unsigned char *)(a1 + 26) &= 0x3Fu;
  }
  if (a2[9] != 21)
  {
    *(unsigned char *)(a1 + 113) &= 0x3Fu;
    *(unsigned char *)(a1 + 114) &= 0xC0u;
  }
  llvm::TargetLibraryInfoImpl::addVectorizableFunctionsFromVecLib();
}

llvm::TargetLibraryInfoImpl *llvm::TargetLibraryInfoImpl::TargetLibraryInfoImpl(llvm::TargetLibraryInfoImpl *this, const llvm::Triple *a2)
{
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(void *)&long long v3 = -1;
  *((void *)&v3 + 1) = -1;
  *(_OWORD *)this = v3;
  *((_OWORD *)this + 1) = v3;
  *((_OWORD *)this + 2) = v3;
  *((_OWORD *)this + 3) = v3;
  *((_OWORD *)this + 4) = v3;
  *((_OWORD *)this + 5) = v3;
  *((_OWORD *)this + 6) = v3;
  *(void *)((char *)this + 109) = -1;
  sub_1CC153974((uint64_t)this, (int *)a2);
  return this;
}

{
  long long v3;

  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(void *)&long long v3 = -1;
  *((void *)&v3 + 1) = -1;
  *(_OWORD *)this = v3;
  *((_OWORD *)this + 1) = v3;
  *((_OWORD *)this + 2) = v3;
  *((_OWORD *)this + 3) = v3;
  *((_OWORD *)this + 4) = v3;
  *((_OWORD *)this + 5) = v3;
  *((_OWORD *)this + 6) = v3;
  *(void *)((char *)this + 109) = -1;
  sub_1CC153974((uint64_t)this, (int *)a2);
  return this;
}

uint64_t llvm::TargetLibraryInfoImpl::operator=(uint64_t a1, long long *a2)
{
  if (a2 != (long long *)a1) {
    sub_1CC156ED8(a1 + 120, (uint64_t)a2 + 120);
  }
  *(_WORD *)(a1 + 144) = *((_WORD *)a2 + 72);
  *(unsigned char *)(a1 + 146) = *((unsigned char *)a2 + 146);
  *(_DWORD *)(a1 + 148) = *((_DWORD *)a2 + 37);
  long long v4 = *a2;
  long long v5 = a2[1];
  long long v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  long long v7 = a2[4];
  long long v8 = a2[5];
  long long v9 = a2[6];
  *(void *)(a1 + 109) = *(void *)((char *)a2 + 109);
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 64) = v7;
  return a1;
}

void *llvm::TargetLibraryInfoImpl::operator=(uint64_t a1, uint64_t a2)
{
  sub_1CD4CC35C((uint64_t *)(a1 + 120), (uint64_t *)(a2 + 120));
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(unsigned char *)(a1 + 146) = *(unsigned char *)(a2 + 146);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);

  return memmove((void *)a1, (const void *)a2, 0x75uLL);
}

uint64_t llvm::TargetLibraryInfoImpl::getLibFunc(int a1, unsigned char *a2, size_t __n, _DWORD *a4)
{
  long long v5 = sub_1CC154CDC(a2, __n);
  if (!v6) {
    return 0;
  }
  long long v7 = v5;
  size_t v8 = v6;
  unint64_t v9 = 468;
  char v10 = &llvm::TargetLibraryInfoImpl::StandardNames;
  do
  {
    unint64_t v11 = &v10[2 * (v9 >> 1)];
    size_t v12 = (size_t)v11[1];
    if (v8 >= v12) {
      size_t v13 = (size_t)v11[1];
    }
    else {
      size_t v13 = v8;
    }
    if (v13 && (int v14 = memcmp(*v11, v7, v13)) != 0)
    {
      int v15 = (v14 >> 31) | 1;
    }
    else
    {
      if (v12 < v8) {
        int v15 = -1;
      }
      else {
        int v15 = 1;
      }
      if (v12 == v8) {
        int v15 = 0;
      }
    }
    if (v15 == -1) {
      v9 += ~(v9 >> 1);
    }
    else {
      v9 >>= 1;
    }
    if (v15 == -1) {
      char v10 = v11 + 2;
    }
  }
  while (v9);
  if (v10 == off_1E682E5F0 || v10[1] != (char *)v8 || memcmp(*v10, v7, v8)) {
    return 0;
  }
  *a4 = (unint64_t)((char *)v10 - (char *)&llvm::TargetLibraryInfoImpl::StandardNames) >> 4;
  return 1;
}

unsigned char *sub_1CC154CDC(unsigned char *a1, size_t __n)
{
  if (!__n) {
    return 0;
  }
  long long v3 = memchr(a1, 0, __n);
  if (v3 && v3 - a1 != -1) {
    return 0;
  }
  if (*a1 == 1) {
    return a1 + 1;
  }
  return a1;
}

BOOL llvm::TargetLibraryInfoImpl::isValidProtoForLibFunc(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v4 = *(_DWORD *)(*(void *)(a4 + 504) + 4);
  int v5 = *(_DWORD *)(a2 + 12);
  unsigned int v6 = v5 - 1;
  switch(a3)
  {
    case 1:
    case 3:
    case 11:
    case 13:
    case 39:
    case 40:
    case 43:
    case 44:
    case 47:
    case 48:
    case 51:
    case 52:
    case 148:
      if (v5 == 3) {
        goto LABEL_41;
      }
      return 0;
    case 4:
    case 7:
    case 14:
    case 17:
    case 20:
    case 22:
    case 30:
    case 77:
    case 78:
    case 79:
    case 107:
    case 119:
    case 164:
    case 165:
    case 166:
    case 167:
    case 221:
    case 283:
    case 286:
    case 287:
    case 291:
    case 343:
    case 344:
    case 351:
    case 356:
    case 434:
    case 448:
    case 450:
    case 451:
      if (v5 != 2) {
        return 0;
      }
      goto LABEL_181;
    case 5:
    case 6:
    case 8:
    case 9:
    case 15:
    case 16:
    case 18:
    case 19:
    case 23:
    case 24:
    case 26:
    case 28:
    case 31:
    case 32:
    case 34:
    case 36:
    case 170:
    case 461:
      if (v5 != 3) {
        return 0;
      }
      goto LABEL_181;
    case 21:
    case 253:
    case 254:
    case 260:
    case 261:
    case 262:
    case 268:
    case 269:
    case 270:
    case 271:
    case 284:
    case 352:
    case 353:
    case 449:
    case 462:
      if (v5 != 3) {
        return 0;
      }
      goto LABEL_293;
    case 25:
    case 27:
    case 29:
    case 33:
    case 35:
    case 37:
    case 295:
      if (v5 != 4) {
        return 0;
      }
      goto LABEL_181;
    case 41:
    case 45:
    case 49:
    case 53:
      if (v5 == 4) {
        goto LABEL_41;
      }
      return 0;
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 66:
    case 67:
    case 68:
    case 71:
    case 72:
    case 73:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 113:
    case 114:
    case 115:
    case 123:
    case 124:
    case 125:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 234:
    case 235:
    case 236:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 335:
    case 336:
    case 337:
    case 370:
    case 371:
    case 372:
    case 374:
    case 375:
    case 376:
    case 377:
    case 378:
    case 379:
    case 384:
    case 385:
    case 386:
    case 387:
    case 388:
    case 389:
    case 393:
    case 394:
    case 395:
    case 435:
    case 436:
    case 437:
    case 438:
    case 439:
    case 440:
    case 445:
    case 446:
    case 447:
      if (v5 == 2)
      {
        long long v7 = *(void **)(a2 + 16);
        uint64_t v8 = *v7;
        if (*(unsigned __int8 *)(*v7 + 8) <= 6u) {
          goto LABEL_4;
        }
      }
      return 0;
    case 63:
    case 64:
    case 65:
    case 108:
    case 109:
    case 110:
    case 156:
    case 157:
    case 158:
    case 185:
    case 186:
    case 187:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 347:
    case 348:
    case 349:
    case 364:
    case 365:
    case 366:
      if (v5 == 3)
      {
        unint64_t v11 = *(void **)(a2 + 16);
        uint64_t v8 = *v11;
        if (*(unsigned __int8 *)(*v11 + 8) <= 6u && v8 == v11[1]) {
          goto LABEL_13;
        }
      }
      return 0;
    case 69:
    case 70:
      if (v5 != 5) {
        return 0;
      }
      char v37 = *(void **)(a2 + 16);
      if (*(unsigned char *)(v37[1] + 8) != 13 || *(unsigned char *)(v37[2] + 8) != 15 || *(unsigned char *)(v37[3] + 8) != 15) {
        return 0;
      }
      uint64_t v16 = v37[4];
      return *(unsigned char *)(v16 + 8) == 13;
    case 74:
    case 116:
      if (v5 != 2) {
        return 0;
      }
      long long v7 = *(void **)(a2 + 16);
      uint64_t v8 = *v7;
      if (*(unsigned char *)(*v7 + 8) != 3) {
        return 0;
      }
      goto LABEL_4;
    case 75:
    case 117:
      if (v5 != 2) {
        return 0;
      }
      long long v7 = *(void **)(a2 + 16);
      uint64_t v8 = *v7;
      if (*(unsigned char *)(*v7 + 8) != 2) {
        return 0;
      }
      goto LABEL_4;
    case 76:
      if (v5 == 4)
      {
        char v35 = *(void **)(a2 + 16);
        if (*(unsigned char *)(*v35 + 8) == 13 && *(unsigned char *)(v35[1] + 8) == 15) {
          goto LABEL_92;
        }
      }
      return 0;
    case 89:
    case 141:
    case 181:
    case 182:
    case 183:
    case 184:
    case 194:
    case 218:
    case 220:
    case 222:
    case 226:
    case 227:
    case 231:
    case 233:
    case 259:
    case 264:
    case 265:
    case 266:
    case 267:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 279:
    case 280:
    case 285:
    case 330:
    case 331:
    case 363:
    case 367:
    case 369:
    case 373:
    case 380:
    case 381:
    case 383:
    case 441:
    case 456:
      if (v5 == 1) {
        return 0;
      }
      goto LABEL_181;
    case 90:
      if (v6 >= 2) {
        goto LABEL_282;
      }
      return 0;
    case 92:
      if (v5 == 3)
      {
        char v34 = *(void **)(a2 + 16);
        if (*(unsigned char *)(v34[1] + 8) == 15) {
          goto LABEL_203;
        }
      }
      return 0;
    case 102:
      unsigned int v78 = *(_DWORD *)(*(void *)(*(void *)(a2 + 16) + 8 * v6) + 8);
      int v79 = v78;
      unsigned int v80 = v78 >> 8;
      if (v79 != 13 || v80 != v4) {
        return 0;
      }
      unsigned int v6 = v5 - 2;
      goto LABEL_292;
    case 103:
    case 104:
    case 105:
      unsigned int v19 = *(_DWORD *)(*(void *)(*(void *)(a2 + 16) + 8 * v6) + 8);
      int v20 = v19;
      unsigned int v21 = v19 >> 8;
      if (v20 != 13 || v21 != v4) {
        return 0;
      }
      unsigned int v6 = v5 - 2;
      goto LABEL_51;
    case 106:
      unsigned int v63 = *(_DWORD *)(*(void *)(*(void *)(a2 + 16) + 8 * v6) + 8);
      int v64 = v63;
      unsigned int v65 = v63 >> 8;
      if (v64 != 13 || v65 != v4) {
        return 0;
      }
      unsigned int v6 = v5 - 2;
      goto LABEL_210;
    case 111:
    case 112:
      if (v5 != 2) {
        return 0;
      }
      return *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) + 8) + 8) < 7u;
    case 118:
    case 232:
    case 252:
    case 263:
      if (v6 < 2) {
        return 0;
      }
      int v18 = *(void **)(a2 + 16);
      if (*(unsigned char *)(*v18 + 8) != 13) {
        return 0;
      }
      goto LABEL_283;
    case 120:
    case 390:
    case 392:
    case 396:
    case 397:
    case 399:
      if (v6 >= 2)
      {
        int v14 = *(uint64_t **)(a2 + 16);
        if (*(unsigned char *)(v14[1] + 8) == 15) {
          goto LABEL_147;
        }
      }
      return 0;
    case 121:
      if (v5 != 6) {
        return 0;
      }
      uint64_t v67 = *(uint64_t **)(a2 + 16);
      if (*(unsigned char *)(v67[1] + 8) != 15) {
        return 0;
      }
      BOOL v82 = *(_DWORD *)(v67[2] + 8) == 13 && *(_DWORD *)(v67[2] + 8) >> 8 == v4;
      if (!v82 || *(_DWORD *)(v67[3] + 8) != 8205) {
        return 0;
      }
      if (*(_DWORD *)(v67[4] + 8) != 13 || *(_DWORD *)(v67[4] + 8) >> 8 != v4) {
        return 0;
      }
      uint64_t v69 = v67[5];
      goto LABEL_313;
    case 122:
      if (v5 != 5) {
        return 0;
      }
      uint64_t v67 = *(uint64_t **)(a2 + 16);
      if (*(unsigned char *)(v67[1] + 8) != 15 || *(_DWORD *)(v67[2] + 8) != 8205) {
        return 0;
      }
      if (*(_DWORD *)(v67[3] + 8) != 13 || *(_DWORD *)(v67[3] + 8) >> 8 != v4) {
        return 0;
      }
      uint64_t v69 = v67[4];
      goto LABEL_313;
    case 126:
    case 129:
      unsigned int v39 = *(_DWORD *)(*(void *)(*(void *)(a2 + 16) + 8 * v6) + 8);
      int v40 = v39;
      unsigned int v41 = v39 >> 8;
      if (v40 != 13 || v41 != v4) {
        return 0;
      }
      unsigned int v6 = v5 - 2;
      goto LABEL_114;
    case 127:
    case 135:
      unsigned int v44 = *(_DWORD *)(*(void *)(*(void *)(a2 + 16) + 8 * v6) + 8);
      int v45 = v44;
      unsigned int v46 = v44 >> 8;
      if (v45 != 13 || v46 != v4) {
        return 0;
      }
      unsigned int v6 = v5 - 2;
      goto LABEL_124;
    case 128:
      unsigned int v84 = *(_DWORD *)(*(void *)(*(void *)(a2 + 16) + 8 * v6) + 8);
      int v85 = v84;
      unsigned int v86 = v84 >> 8;
      if (v85 != 13 || v86 != v4) {
        return 0;
      }
      unsigned int v6 = v5 - 2;
      goto LABEL_321;
    case 130:
    case 136:
      if (v5 == 1) {
        return 0;
      }
      goto LABEL_245;
    case 131:
    case 132:
      unsigned int v49 = *(_DWORD *)(*(void *)(*(void *)(a2 + 16) + 8 * v6) + 8);
      int v50 = v49;
      unsigned int v51 = v49 >> 8;
      if (v50 != 13 || v51 != v4) {
        return 0;
      }
      unsigned int v6 = v5 - 2;
      goto LABEL_136;
    case 133:
      unsigned int v90 = *(_DWORD *)(*(void *)(*(void *)(a2 + 16) + 8 * v6) + 8);
      int v91 = v90;
      unsigned int v92 = v90 >> 8;
      if (v91 != 13 || v92 != v4) {
        return 0;
      }
      unsigned int v6 = v5 - 2;
      goto LABEL_331;
    case 134:
      unsigned int v95 = *(_DWORD *)(*(void *)(*(void *)(a2 + 16) + 8 * v6) + 8);
      int v96 = v95;
      unsigned int v97 = v95 >> 8;
      if (v96 != 13 || v97 != v4) {
        return 0;
      }
      unsigned int v6 = v5 - 2;
      goto LABEL_340;
    case 137:
    case 359:
    case 467:
      if (v5 != 4) {
        return 0;
      }
      goto LABEL_293;
    case 138:
      if (v5 != 7) {
        return 0;
      }
      uint64_t v70 = *(void **)(a2 + 16);
      if (*(unsigned char *)(v70[1] + 8) != 15 || *(_DWORD *)(v70[3] + 8) != 8205) {
        return 0;
      }
      if (*(_DWORD *)(v70[4] + 8) != 13 || *(_DWORD *)(v70[4] + 8) >> 8 != v4) {
        return 0;
      }
      uint64_t v17 = v70[5];
      return *(unsigned char *)(v17 + 8) == 15;
    case 139:
      if (v5 != 6) {
        return 0;
      }
      int v72 = *(void **)(a2 + 16);
      if (*(unsigned char *)(v72[1] + 8) != 15 || *(_DWORD *)(v72[2] + 8) != 8205) {
        return 0;
      }
      if (*(_DWORD *)(v72[3] + 8) != 13 || *(_DWORD *)(v72[3] + 8) >> 8 != v4) {
        return 0;
      }
      uint64_t v17 = v72[4];
      return *(unsigned char *)(v17 + 8) == 15;
    case 140:
    case 294:
    case 299:
      if (v5 != 2) {
        return 0;
      }
      long long v7 = *(void **)(a2 + 16);
      uint64_t v8 = *v7;
      if (*(unsigned char *)(*v7 + 8) != 13) {
        return 0;
      }
      goto LABEL_4;
    case 168:
    case 169:
    case 433:
    case 459:
    case 464:
      if (v5 != 4) {
        return 0;
      }
      goto LABEL_282;
    case 171:
    case 172:
    case 173:
      BOOL v25 = *(void **)(a2 + 16);
      uint64_t v9 = *v25;
      if (*(unsigned __int8 *)(*v25 + 8) > 6u) {
        return 0;
      }
      if (v5 != 3)
      {
        if (v5 == 2)
        {
          uint64_t v26 = v25[1];
          if (*(unsigned char *)(v26 + 8) == 17 && *(void *)(v26 + 32) == 2)
          {
            uint64_t v8 = **(void **)(v26 + 16);
            return v8 == v9;
          }
        }
        return 0;
      }
      if (v25[1] != v9) {
        return 0;
      }
      uint64_t v8 = v25[2];
      return v8 == v9;
    case 174:
    case 455:
      if (v5 != 3) {
        return 0;
      }
      unint64_t v11 = *(void **)(a2 + 16);
      if (*(unsigned char *)(*v11 + 8) != 15) {
        return 0;
      }
      uint64_t v8 = v11[1];
      goto LABEL_13;
    case 195:
    case 196:
    case 197:
      if (v6 < 2) {
        return 0;
      }
      goto LABEL_146;
    case 198:
    case 201:
      if (v5 != 3) {
        return 0;
      }
LABEL_146:
      int v14 = *(uint64_t **)(a2 + 16);
      if (*(unsigned char *)(v14[1] + 8) != 15) {
        return 0;
      }
LABEL_147:
      uint64_t v27 = v14[2];
LABEL_148:
      if (*(unsigned char *)(v27 + 8) != 15) {
        return 0;
      }
LABEL_149:
      uint64_t v54 = *v14;
      return *(_DWORD *)(v54 + 8) == 8205;
    case 199:
    case 200:
    case 202:
      if (v5 != 4) {
        return 0;
      }
      int v14 = *(uint64_t **)(a2 + 16);
      if (*(unsigned char *)(v14[1] + 8) != 15 || *(unsigned char *)(v14[2] + 8) != 15) {
        return 0;
      }
      uint64_t v27 = v14[3];
      goto LABEL_148;
    case 219:
      if (v5 != 3) {
        return 0;
      }
      int v18 = *(void **)(a2 + 16);
      uint64_t v77 = *v18;
      goto LABEL_284;
    case 223:
    case 224:
    case 225:
    case 237:
    case 238:
    case 239:
      if (v5 != 2) {
        return 0;
      }
      int v15 = *(void **)(a2 + 16);
      if (*(_DWORD *)(*v15 + 8) != 8205) {
        return 0;
      }
      uint64_t v16 = v15[1];
      return *(unsigned char *)(v16 + 8) == 13;
    case 228:
    case 255:
    case 256:
    case 360:
    case 368:
    case 403:
    case 407:
    case 414:
      if (v6 < 2) {
        return 0;
      }
      goto LABEL_282;
    case 229:
    case 230:
      if (v5 != 4) {
        return 0;
      }
      goto LABEL_274;
    case 249:
    case 345:
    case 423:
      if (v5 != 3) {
        return 0;
      }
      int v18 = *(void **)(a2 + 16);
      if (*(unsigned char *)(*v18 + 8) != 15) {
        return 0;
      }
      goto LABEL_283;
    case 250:
      if (v5 != 3) {
        return 0;
      }
      int v18 = *(void **)(a2 + 16);
      if (*(unsigned char *)(*v18 + 8) != 15) {
        return 0;
      }
      goto LABEL_283;
    case 251:
      if (v5 != 1) {
        return 0;
      }
      int v14 = *(uint64_t **)(a2 + 16);
      goto LABEL_149;
    case 257:
    case 258:
      if (v5 != 5) {
        return 0;
      }
      char v55 = *(void **)(a2 + 16);
      if (*(unsigned char *)(v55[1] + 8) != 15) {
        return 0;
      }
      goto LABEL_362;
    case 277:
    case 278:
      if (v5 != 5) {
        return 0;
      }
      char v55 = *(void **)(a2 + 16);
      if (*(unsigned char *)(*v55 + 8) != 13
        || *(unsigned char *)(v55[1] + 8) != 15
        || *(unsigned char *)(v55[2] + 8) != 13
        || *(unsigned char *)(v55[3] + 8) != 13)
      {
        return 0;
      }
      goto LABEL_362;
    case 281:
    case 282:
      if (v5 != 1) {
        return 0;
      }
      int v56 = *(uint64_t **)(a2 + 16);
      goto LABEL_279;
    case 288:
    case 315:
    case 316:
    case 398:
    case 400:
      if (v5 == 3) {
        goto LABEL_282;
      }
      return 0;
    case 289:
    case 292:
    case 293:
    case 338:
    case 354:
    case 355:
    case 444:
      if (v5 != 2) {
        return 0;
      }
      long long v7 = *(void **)(a2 + 16);
      uint64_t v8 = *v7;
      int v12 = *(_DWORD *)(*v7 + 8);
      int v13 = 8205;
      goto LABEL_166;
    case 290:
    case 339:
      if (v5 != 2) {
        return 0;
      }
      long long v7 = *(void **)(a2 + 16);
      uint64_t v8 = *v7;
      int v12 = *(_DWORD *)(*v7 + 8);
      int v13 = 4109;
LABEL_166:
      if (v12 != v13) {
        return 0;
      }
LABEL_4:
      uint64_t v9 = v7[1];
      return v8 == v9;
    case 296:
    case 297:
    case 298:
      if (v5 != 3) {
        return 0;
      }
      char v28 = *(void **)(a2 + 16);
      if (*(unsigned __int8 *)(*v28 + 8) > 6u || *v28 != v28[1]) {
        return 0;
      }
      unsigned int v29 = *(_DWORD *)(v28[2] + 8);
      int v30 = v29;
      unsigned int v31 = v29 >> 8;
      return v30 == 13 && *(_DWORD *)(a1 + 148) == v31;
    case 317:
    case 457:
      if (v5 != 2) {
        return 0;
      }
      char v57 = *(uint64_t **)(a2 + 16);
      if (*(_DWORD *)(v57[1] + 8) != 13 || *(_DWORD *)(v57[1] + 8) >> 8 != v4) {
        return 0;
      }
      uint64_t v17 = *v57;
      return *(unsigned char *)(v17 + 8) == 15;
    case 318:
    case 442:
    case 443:
    case 454:
      goto LABEL_41;
    case 319:
    case 332:
    case 333:
    case 334:
    case 426:
    case 427:
LABEL_292:
      if (v6 >= 2) {
        goto LABEL_293;
      }
      return 0;
    case 320:
    case 325:
      if (v5 != 4) {
        return 0;
      }
      int v23 = *(void **)(a2 + 16);
      if (*(unsigned char *)(*v23 + 8) != 15 || *v23 != v23[1] || *(_DWORD *)(v23[2] + 8) != 8205) {
        return 0;
      }
      goto LABEL_356;
    case 321:
      if (v5 == 4)
      {
        int v23 = *(void **)(a2 + 16);
        if (*(_DWORD *)(*v23 + 8) == 8205) {
          goto LABEL_352;
        }
      }
      return 0;
    case 322:
    case 323:
    case 324:
LABEL_51:
      if (v6 == 3)
      {
        int v23 = *(void **)(a2 + 16);
        uint64_t v24 = *v23;
        if (*v23 == v23[1]) {
          goto LABEL_353;
        }
      }
      return 0;
    case 326:
LABEL_210:
      if (v6 != 3) {
        return 0;
      }
      int v23 = *(void **)(a2 + 16);
      if (*v23 != v23[1] || *(unsigned char *)(*v23 + 8) != 15 || *(unsigned char *)(v23[2] + 8) != 13) {
        return 0;
      }
      goto LABEL_356;
    case 327:
    case 328:
    case 329:
      if (*(_DWORD *)(a2 + 8) > 0xFFu || v6 != 3) {
        return 0;
      }
      char v33 = *(void **)(a2 + 16);
      if (*(unsigned char *)(v33[1] + 8) != 15 || *(unsigned char *)(v33[2] + 8) != 15) {
        return 0;
      }
      uint64_t v16 = v33[3];
      return *(unsigned char *)(v16 + 8) == 13;
    case 340:
    case 341:
      if (v6 < 2) {
        return 0;
      }
LABEL_181:
      char v59 = *(void **)(a2 + 16);
      goto LABEL_182;
    case 342:
      if (v5 == 2) {
        goto LABEL_245;
      }
      return 0;
    case 346:
      if (v5 != 4) {
        return 0;
      }
      int v23 = *(void **)(a2 + 16);
      if (*(_DWORD *)(*v23 + 8) != 8205 || *(unsigned char *)(v23[1] + 8) != 15) {
        return 0;
      }
      if (*(_DWORD *)(v23[2] + 8) != 13 || *(_DWORD *)(v23[2] + 8) >> 8 != v4) {
        return 0;
      }
      goto LABEL_356;
    case 350:
    case 357:
      if (v5 != 5) {
        return 0;
      }
LABEL_293:
      int v18 = *(void **)(a2 + 16);
      goto LABEL_294;
    case 358:
      if (v5 != 5) {
        return 0;
      }
      char v55 = *(void **)(a2 + 16);
LABEL_362:
      uint64_t v17 = v55[4];
      return *(unsigned char *)(v17 + 8) == 15;
    case 361:
    case 362:
    case 458:
      if (v5 != 3) {
        return 0;
      }
      char v34 = *(void **)(a2 + 16);
      if (*(unsigned char *)(*v34 + 8) != 15 || v34[1] != *v34) {
        return 0;
      }
LABEL_203:
      uint64_t v62 = v34[2];
      goto LABEL_357;
    case 382:
    case 460:
    case 465:
      if (v5 != 4) {
        return 0;
      }
      char v35 = *(void **)(a2 + 16);
LABEL_92:
      uint64_t v36 = v35[2];
      goto LABEL_275;
    case 391:
      if (v5 != 4) {
        return 0;
      }
      uint64_t v67 = *(uint64_t **)(a2 + 16);
      if (*(unsigned char *)(v67[1] + 8) != 15) {
        return 0;
      }
      if (*(_DWORD *)(v67[2] + 8) != 13 || *(_DWORD *)(v67[2] + 8) >> 8 != v4) {
        return 0;
      }
      uint64_t v69 = v67[3];
LABEL_313:
      if (*(unsigned char *)(v69 + 8) != 15) {
        return 0;
      }
      uint64_t v54 = *v67;
      return *(_DWORD *)(v54 + 8) == 8205;
    case 401:
    case 408:
LABEL_114:
      if (v6 == 2)
      {
        char v43 = *(uint64_t **)(a2 + 16);
        uint64_t v17 = *v43;
        if (*v43 == v43[1] && v17 == v43[2]) {
          return *(unsigned char *)(v17 + 8) == 15;
        }
      }
      return 0;
    case 402:
    case 417:
LABEL_124:
      if (v6 == 3)
      {
        int v23 = *(void **)(a2 + 16);
        uint64_t v48 = *v23;
        if (*v23 == v23[1] && v48 == v23[2]) {
          goto LABEL_355;
        }
      }
      return 0;
    case 404:
LABEL_321:
      if (v6 != 2) {
        return 0;
      }
      unint64_t v88 = *(void **)(a2 + 16);
      uint64_t v89 = *v88;
      if (*(unsigned char *)(*v88 + 8) != 15 || v88[1] != v89) {
        return 0;
      }
      return v88[2] == v89;
    case 405:
    case 421:
      if (v5 != 3) {
        return 0;
      }
      char v60 = *(void **)(a2 + 16);
      if (*(unsigned char *)(*v60 + 8) != 15 || v60[1] != *v60) {
        return 0;
      }
      uint64_t v16 = v60[2];
      return *(unsigned char *)(v16 + 8) == 13;
    case 406:
      if (v5 != 3) {
        return 0;
      }
      unint64_t v11 = *(void **)(a2 + 16);
      if (*(_DWORD *)(*v11 + 8) != 8205) {
        return 0;
      }
      uint64_t v8 = v11[1];
      if (*(unsigned char *)(v8 + 8) != 15) {
        return 0;
      }
      goto LABEL_13;
    case 409:
    case 422:
      if (v5 == 3)
      {
        int v56 = *(uint64_t **)(a2 + 16);
        uint64_t v61 = v56[1];
        if (*(unsigned char *)(v61 + 8) == 15 && v61 == v56[2]) {
          goto LABEL_279;
        }
      }
      return 0;
    case 410:
    case 418:
      if (v5 == 1) {
        return 0;
      }
LABEL_245:
      char v59 = *(void **)(a2 + 16);
      if (*(unsigned char *)(*v59 + 8) != 15) {
        return 0;
      }
LABEL_182:
      uint64_t v17 = v59[1];
      return *(unsigned char *)(v17 + 8) == 15;
    case 411:
    case 412:
LABEL_136:
      if (v6 != 3) {
        return 0;
      }
      int v23 = *(void **)(a2 + 16);
      if (*(_DWORD *)(*v23 + 8) != 13 || *(_DWORD *)(*v23 + 8) >> 8 != v4) {
        return 0;
      }
LABEL_352:
      uint64_t v24 = v23[1];
LABEL_353:
      if (*(unsigned char *)(v24 + 8) != 15) {
        return 0;
      }
      uint64_t v48 = v23[2];
LABEL_355:
      if (*(unsigned char *)(v48 + 8) != 15) {
        return 0;
      }
LABEL_356:
      uint64_t v62 = v23[3];
LABEL_357:
      unsigned int v100 = *(_DWORD *)(v62 + 8);
      int v101 = v100;
      unsigned int v102 = v100 >> 8;
      return v101 == 13 && v4 == v102;
    case 413:
LABEL_331:
      if (v6 != 1) {
        return 0;
      }
      uint64_t v94 = *(uint64_t **)(a2 + 16);
      if (*(unsigned char *)(v94[1] + 8) != 15) {
        return 0;
      }
      uint64_t v62 = *v94;
      goto LABEL_357;
    case 415:
LABEL_340:
      if (v6 == 3)
      {
        int v23 = *(void **)(a2 + 16);
        uint64_t v99 = *v23;
        if (*(unsigned char *)(*v23 + 8) == 15 && v23[1] == v99 && v23[2] == v99) {
          goto LABEL_356;
        }
      }
      return 0;
    case 416:
      if (v5 == 4)
      {
        int v23 = *(void **)(a2 + 16);
        if (*(_DWORD *)(*v23 + 8) == 8205)
        {
          uint64_t v76 = v23[1];
          if (*(unsigned char *)(v76 + 8) == 15 && v76 == v23[2]) {
            goto LABEL_356;
          }
        }
      }
      return 0;
    case 419:
      if (v5 == 3)
      {
        uint64_t v103 = *(uint64_t **)(a2 + 16);
        uint64_t v62 = *v103;
        if (*v103 == v103[2] && *(unsigned char *)(v103[1] + 8) == 15) {
          goto LABEL_357;
        }
      }
      return 0;
    case 420:
      if (v5 != 3) {
        return 0;
      }
      unint64_t v11 = *(void **)(a2 + 16);
      uint64_t v8 = v11[1];
      if (*(unsigned char *)(v8 + 8) != 15 || *v11 != v8) {
        return 0;
      }
LABEL_13:
      uint64_t v9 = v11[2];
      return v8 == v9;
    case 424:
    case 425:
    case 428:
    case 429:
    case 430:
    case 431:
    case 432:
      if ((v6 & 0xFFFFFFFE) == 2) {
        goto LABEL_282;
      }
      return 0;
    case 452:
    case 453:
      if (v5 != 3) {
        return 0;
      }
LABEL_282:
      int v18 = *(void **)(a2 + 16);
LABEL_283:
      uint64_t v77 = v18[1];
LABEL_284:
      if (*(unsigned char *)(v77 + 8) != 15) {
        return 0;
      }
LABEL_294:
      uint64_t v17 = v18[2];
      return *(unsigned char *)(v17 + 8) == 15;
    case 463:
      if (v5 != 5) {
        return 0;
      }
LABEL_274:
      char v35 = *(void **)(a2 + 16);
      uint64_t v36 = v35[1];
LABEL_275:
      if (*(unsigned char *)(v36 + 8) != 15) {
        return 0;
      }
      uint64_t v17 = v35[3];
      return *(unsigned char *)(v17 + 8) == 15;
    case 466:
      if (v5 != 2) {
        return 0;
      }
      int v56 = *(uint64_t **)(a2 + 16);
      if (*(unsigned char *)(v56[1] + 8) != 15) {
        return 0;
      }
LABEL_279:
      uint64_t v16 = *v56;
      return *(unsigned char *)(v16 + 8) == 13;
    default:
      if (v5 != 2) {
        return 0;
      }
LABEL_41:
      uint64_t v17 = **(void **)(a2 + 16);
      return *(unsigned char *)(v17 + 8) == 15;
  }
}

BOOL llvm::TargetLibraryInfoImpl::getLibFunc(uint64_t a1, uint64_t ***a2, _DWORD *a3)
{
  if ((*((unsigned char *)a2 + 33) & 0x20) != 0) {
    return 0;
  }
  if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
  {
    size_t v17 = 0;
    uint64_t v16 = &byte_1CFBCE98E;
    goto LABEL_11;
  }
  uint64_t v7 = ***a2;
  uint64_t v8 = *(void *)(v7 + 152);
  uint64_t v9 = *(unsigned int *)(v7 + 168);
  if (!v9) {
    goto LABEL_37;
  }
  LODWORD(v10) = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unint64_t v11 = (uint64_t ****)(v8 + 16 * v10);
  int v12 = *v11;
  if (*v11 != a2)
  {
    int v13 = 1;
    while (v12 != (uint64_t ***)-4096)
    {
      int v14 = v10 + v13++;
      uint64_t v10 = v14 & (v9 - 1);
      int v12 = *(uint64_t ****)(v8 + 16 * v10);
      if (v12 == a2)
      {
        unint64_t v11 = (uint64_t ****)(v8 + 16 * v10);
        goto LABEL_10;
      }
    }
LABEL_37:
    unint64_t v11 = (uint64_t ****)(v8 + 16 * v9);
  }
LABEL_10:
  int v15 = v11[1];
  size_t v18 = (size_t)*v15;
  uint64_t v16 = (char *)(v15 + 2);
  size_t v17 = v18;
LABEL_11:
  uint64_t v32 = (uint64_t)a2[5];
  unsigned int v19 = sub_1CC154CDC(v16, v17);
  if (!v20) {
    return 0;
  }
  unsigned int v21 = v19;
  size_t v22 = v20;
  int v23 = &llvm::TargetLibraryInfoImpl::StandardNames;
  unint64_t v24 = 468;
  do
  {
    BOOL v25 = &v23[2 * (v24 >> 1)];
    size_t v26 = (size_t)v25[1];
    if (v22 >= v26) {
      size_t v27 = (size_t)v25[1];
    }
    else {
      size_t v27 = v22;
    }
    if (v27 && (int v28 = memcmp(*v25, v21, v27)) != 0)
    {
      int v29 = (v28 >> 31) | 1;
    }
    else
    {
      if (v26 < v22) {
        int v29 = -1;
      }
      else {
        int v29 = 1;
      }
      if (v26 == v22) {
        int v29 = 0;
      }
    }
    if (v29 == -1) {
      v24 += ~(v24 >> 1);
    }
    else {
      v24 >>= 1;
    }
    if (v29 == -1) {
      int v23 = v25 + 2;
    }
  }
  while (v24);
  if (v23 == off_1E682E5F0 || v23[1] != (char *)v22 || memcmp(*v23, v21, v22)) {
    return 0;
  }
  unint64_t v30 = (unint64_t)((char *)v23 - (char *)&llvm::TargetLibraryInfoImpl::StandardNames) >> 4;
  *a3 = v30;
  uint64_t v31 = (uint64_t)a2[3];

  return llvm::TargetLibraryInfoImpl::isValidProtoForLibFunc(a1, v31, v30, v32);
}

BOOL sub_1CC1563DC(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 >= v2) {
    size_t v4 = *(void *)(a1 + 8);
  }
  else {
    size_t v4 = *(void *)(a2 + 8);
  }
  if (v4 && (int v5 = memcmp(*(const void **)a1, *(const void **)a2, v4)) != 0)
  {
    int v6 = (v5 >> 31) | 1;
  }
  else
  {
    if (v2 < v3) {
      int v6 = -1;
    }
    else {
      int v6 = 1;
    }
    if (v2 == v3) {
      int v6 = 0;
    }
  }
  return v6 == -1;
}

BOOL sub_1CC156440(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 24);
  unint64_t v3 = *(void *)(a2 + 24);
  if (v3 >= v2) {
    size_t v4 = *(void *)(a1 + 24);
  }
  else {
    size_t v4 = *(void *)(a2 + 24);
  }
  if (v4 && (int v5 = memcmp(*(const void **)(a1 + 16), *(const void **)(a2 + 16), v4)) != 0)
  {
    int v6 = (v5 >> 31) | 1;
  }
  else
  {
    if (v2 < v3) {
      int v6 = -1;
    }
    else {
      int v6 = 1;
    }
    if (v2 == v3) {
      int v6 = 0;
    }
  }
  return v6 == -1;
}

BOOL llvm::TargetLibraryInfoImpl::isFunctionVectorizable(uint64_t a1, unsigned char *a2, size_t a3)
{
  size_t v4 = sub_1CC154CDC(a2, a3);
  if (!v5) {
    return 0;
  }
  int v6 = v4;
  size_t v7 = v5;
  uint64_t v8 = *(void *)(a1 + 152);
  uint64_t v9 = *(void *)(a1 + 160);
  if (v9 != v8)
  {
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - v8) >> 3);
    do
    {
      uint64_t v12 = v8 + 40 * (v11 >> 1);
      size_t v13 = v7;
      BOOL v14 = sub_1CC1565A8(v12, v6, v7);
      size_t v7 = v13;
      if (v14) {
        v11 += ~(v11 >> 1);
      }
      else {
        v11 >>= 1;
      }
      if (v14) {
        uint64_t v8 = v12 + 40;
      }
    }
    while (v11);
  }
  return v8 != v9 && *(void *)(v8 + 8) == v7 && memcmp(*(const void **)v8, v6, v7) == 0;
}

BOOL sub_1CC1565A8(uint64_t a1, const void *a2, size_t a3)
{
  size_t v3 = a3;
  size_t v4 = *(void *)(a1 + 8);
  if (a3 >= v4) {
    a3 = *(void *)(a1 + 8);
  }
  if (a3 && (int v5 = memcmp(*(const void **)a1, a2, a3)) != 0)
  {
    int v6 = (v5 >> 31) | 1;
  }
  else
  {
    if (v4 < v3) {
      int v6 = -1;
    }
    else {
      int v6 = 1;
    }
    if (v4 == v3) {
      int v6 = 0;
    }
  }
  return v6 == -1;
}

void llvm::TargetLibraryAnalysis::run(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v5 = a3;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 200))
  {
    uint64_t v6 = *(void *)(a2 + 40) + 216;
    __int16 v11 = 260;
    v10[0] = v6;
    uint64_t v7 = a1;
    llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v10);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v18 = 0;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    *(void *)&long long v8 = -1;
    *((void *)&v8 + 1) = -1;
    v14[0] = v8;
    v14[1] = v8;
    v14[2] = v8;
    v14[3] = v8;
    void v14[4] = v8;
    v14[5] = v8;
    *(_OWORD *)int v15 = v8;
    *(void *)&v15[13] = -1;
    sub_1CC153974((uint64_t)v14, (int *)__p);
    sub_1CD4D04B8(v7, (uint64_t)v14);
    sub_1CD4CFA4C((uint64_t *)v14);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    a1 = v7;
    int v5 = a3;
  }
  sub_1CC1569E8(v5, a1);
}

void llvm::initializeTargetLibraryInfoWrapperPassPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC85E8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC156794;
    v3[1] = &v1;
    unint64_t v2 = v3;
    std::__call_once(&qword_1EBCC85E8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC156794()
{
}

uint64_t sub_1CC156834(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    return 1;
  }
  if (*a2 < *a1) {
    return 0;
  }
  unsigned int v2 = a1[1] & 0x7FFFFFFF;
  unsigned int v3 = a2[1] & 0x7FFFFFFF;
  if (v2 < v3) {
    return 1;
  }
  if (v3 < v2) {
    return 0;
  }
  unsigned int v5 = a1[2] & 0x7FFFFFFF;
  unsigned int v6 = a2[2] & 0x7FFFFFFF;
  BOOL v8 = v6 >= v5 && (a1[3] & 0x7FFFFFFFu) < (a2[3] & 0x7FFFFFFFu);
  return v5 < v6 || v8;
}

void sub_1CC1568B0(uint64_t a1, int *a2, int *a3)
{
  size_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = *(_DWORD **)a1;
    uint64_t v8 = 32 * v6;
    do
    {
      *uint64_t v7 = -1;
      v7 += 8;
      v8 -= 32;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      int v9 = *v4;
      if (*v4 <= 0xFFFFFFFD)
      {
        int v10 = *(_DWORD *)(a1 + 16);
        if (v10)
        {
          unsigned int v11 = v10 - 1;
          uint64_t v12 = (v10 - 1) & (37 * v9);
          uint64_t v13 = *(void *)a1 + 32 * v12;
          int v14 = *(_DWORD *)v13;
          if (v9 != *(_DWORD *)v13)
          {
            uint64_t v15 = 0;
            int v16 = 1;
            while (v14 != -1)
            {
              if (v15) {
                BOOL v17 = 0;
              }
              else {
                BOOL v17 = v14 == -2;
              }
              if (v17) {
                uint64_t v15 = v13;
              }
              int v18 = v12 + v16++;
              uint64_t v12 = v18 & v11;
              uint64_t v13 = *(void *)a1 + 32 * v12;
              int v14 = *(_DWORD *)v13;
              if (v9 == *(_DWORD *)v13) {
                goto LABEL_18;
              }
            }
            if (v15) {
              uint64_t v13 = v15;
            }
          }
        }
        else
        {
          uint64_t v13 = 0;
        }
LABEL_18:
        *(_DWORD *)uint64_t v13 = v9;
        long long v19 = *(_OWORD *)(v4 + 2);
        *(void *)(v13 + 24) = *((void *)v4 + 3);
        *(_OWORD *)(v13 + 8) = v19;
        *((void *)v4 + 2) = 0;
        *((void *)v4 + 3) = 0;
        *((void *)v4 + 1) = 0;
        ++*(_DWORD *)(a1 + 8);
        if (*((char *)v4 + 31) < 0) {
          operator delete(*((void **)v4 + 1));
        }
      }
      v4 += 8;
    }
    while (v4 != a3);
  }
}

void sub_1CC1569E8(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = a1 + 3;
  a1[2] = 0x600000000;
  llvm::SmallVectorBase<unsigned int>::grow_pod();
}

void sub_1CC156D40(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    uint64_t v2 = a1;
    uint64_t v3 = a1 + 40 * a2;
    do
    {
      size_t v4 = *(unsigned __int8 **)v2;
      size_t v5 = *(void *)(v2 + 8);
      int v6 = *(_DWORD *)(v2 + 16);
      *(void *)&long long v10 = *(void *)v2;
      *((void *)&v10 + 1) = v5;
      long long v11 = *(_OWORD *)(v2 + 24);
      uint64_t v12 = &unk_1F2607C08;
      char v14 = 1;
      int v13 = v6;
      if (qword_1EBCC8440 >= HIDWORD(qword_1EBCC8440))
      {
        if (qword_1EBCC8438 <= (unint64_t)&v10
          && qword_1EBCC8438 + 48 * (unint64_t)qword_1EBCC8440 > (unint64_t)&v10)
        {
          sub_1CD4CFE28();
        }
        sub_1CD4CFE28();
      }
      uint64_t v7 = qword_1EBCC8438 + 48 * qword_1EBCC8440;
      long long v8 = v11;
      *(_OWORD *)uint64_t v7 = v10;
      *(_OWORD *)(v7 + 16) = v8;
      *(void *)(v7 + 32) = &unk_1F2607C28;
      int v9 = v13;
      *(unsigned char *)(v7 + 44) = v14;
      *(_DWORD *)(v7 + 40) = v9;
      *(void *)(v7 + 32) = &unk_1F2607C08;
      LODWORD(qword_1EBCC8440) = qword_1EBCC8440 + 1;
      llvm::cl::AddLiteralOption(qword_1EBCC8430, v4, v5);
      v2 += 40;
    }
    while (v2 != v3);
  }
}

uint64_t *sub_1CC156ED8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  uint64_t v5 = *(void *)a1;
  if (v4)
  {
    uint64_t v6 = 32 * v4;
    do
    {
      if (*(_DWORD *)v5 <= 0xFFFFFFFD && *(char *)(v5 + 31) < 0) {
        operator delete(*(void **)(v5 + 8));
      }
      v5 += 32;
      v6 -= 32;
    }
    while (v6);
    uint64_t v5 = *(void *)a1;
  }
  uint64_t result = (uint64_t *)MEMORY[0x1D25D9CD0](v5, 8);
  uint64_t v8 = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v8;
  if (v8)
  {
    *(void *)a1 = operator new(32 * v8, (std::align_val_t)8uLL);
    return sub_1CD4CFF20((uint64_t *)a1, (uint64_t *)a2);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  return result;
}

void *sub_1CC156F94(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  int v9 = (char *)*result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *result) >> 3) < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x666666666666666) {
      goto LABEL_23;
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = v10 >= 0x333333333333333 ? 0x666666666666666 : v11;
    if (v12 > 0x666666666666666) {
LABEL_23:
    }
      abort();
    uint64_t v13 = 5 * v12;
    uint64_t result = operator new(40 * v12);
    int v9 = (char *)result;
    *uint64_t v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  uint64_t v15 = (void **)(result + 1);
  int v16 = (unsigned char *)result[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v16 - v9) >> 3) >= a4)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    int v18 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  BOOL v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9);
    int v9 = (char *)*v15;
  }
  size_t v14 = a3 - v17;
  if (v14)
  {
    int v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *uint64_t v15 = &v9[v14];
  return result;
}

void sub_1CC157108(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  uint64_t v6 = __src;
  uint64_t v8 = *(char **)a1;
  int v9 = *(unsigned char **)(a1 + 8);
  uint64_t v10 = (a2 - *(void *)a1) / 40;
  uint64_t v11 = (char *)(*(void *)a1 + 40 * v10);
  uint64_t v12 = *(void *)(a1 + 16);
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v12 - (uint64_t)v9) >> 3)) < a5)
  {
    unint64_t v13 = a5 - 0x3333333333333333 * ((v9 - v8) >> 3);
    if (v13 > 0x666666666666666) {
      abort();
    }
    unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((v12 - (uint64_t)v8) >> 3);
    uint64_t v15 = 2 * v14;
    if (2 * v14 <= v13) {
      uint64_t v15 = v13;
    }
    if (v14 >= 0x333333333333333) {
      unint64_t v16 = 0x666666666666666;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16)
    {
      if (v16 > 0x666666666666666) {
        sub_1CB833614();
      }
      BOOL v17 = (char *)operator new(40 * v16);
    }
    else
    {
      BOOL v17 = 0;
    }
    size_t v26 = &v17[40 * v10];
    uint64_t v27 = 5 * a5;
    int v28 = &v26[40 * a5];
    uint64_t v29 = 8 * v27;
    unint64_t v30 = v26;
    do
    {
      long long v31 = *((_OWORD *)v6 + 1);
      *(_OWORD *)unint64_t v30 = *(_OWORD *)v6;
      *((_OWORD *)v30 + 1) = v31;
      *((void *)v30 + 4) = *((void *)v6 + 4);
      v30 += 40;
      v6 += 40;
      v29 -= 40;
    }
    while (v29);
    uint64_t v32 = *(char **)a1;
    if (v11 != *(char **)a1)
    {
      char v33 = v11;
      do
      {
        long long v34 = *(_OWORD *)(v33 - 40);
        long long v35 = *(_OWORD *)(v33 - 24);
        *((void *)v26 - 1) = *((void *)v33 - 1);
        *(_OWORD *)(v26 - 24) = v35;
        *(_OWORD *)(v26 - 40) = v34;
        v26 -= 40;
        v33 -= 40;
      }
      while (v33 != v32);
      int v9 = *(unsigned char **)(a1 + 8);
    }
    uint64_t v36 = &v17[40 * v16];
    if (v9 != v11) {
      memmove(v28, v11, v9 - v11);
    }
    char v37 = *(char **)a1;
    *(void *)a1 = v26;
    *(void *)(a1 + 8) = &v28[v9 - v11];
    *(void *)(a1 + 16) = v36;
    if (v37)
    {
      operator delete(v37);
    }
    return;
  }
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v9 - v11) >> 3)) >= a5)
  {
    int v18 = &__src[40 * a5];
    long long v20 = *(char **)(a1 + 8);
LABEL_18:
    long long v21 = &v11[40 * a5];
    unint64_t v22 = (unint64_t)&v20[-40 * a5];
    int v23 = v20;
    if (v22 < (unint64_t)v9)
    {
      int v23 = v20;
      do
      {
        long long v24 = *(_OWORD *)v22;
        long long v25 = *(_OWORD *)(v22 + 16);
        *((void *)v23 + 4) = *(void *)(v22 + 32);
        *(_OWORD *)int v23 = v24;
        *((_OWORD *)v23 + 1) = v25;
        v22 += 40;
        v23 += 40;
      }
      while (v22 < (unint64_t)v9);
    }
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(&v11[40 * a5], v11, v20 - v21);
    }
    if (v18 != v6)
    {
      memmove(v11, v6, v18 - v6);
    }
    return;
  }
  int v18 = &__src[8 * ((v9 - v11) >> 3)];
  int64_t v19 = a4 - v18;
  if (a4 != v18) {
    memmove(*(void **)(a1 + 8), &__src[8 * ((v9 - v11) >> 3)], a4 - v18);
  }
  long long v20 = &v9[v19];
  *(void *)(a1 + 8) = &v9[v19];
  if (v9 - v11 >= 1) {
    goto LABEL_18;
  }
}

uint64_t sub_1CC1573DC(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    if (result)
    {
      long long v10 = *a1;
      long long v11 = a1[1];
      uint64_t v12 = *((void *)a1 + 4);
      uint64_t v13 = *((void *)a3 + 4);
      long long v14 = a3[1];
      *a1 = *a3;
      a1[1] = v14;
      *((void *)a1 + 4) = v13;
    }
    else
    {
      long long v25 = *a1;
      long long v26 = a1[1];
      uint64_t v27 = *((void *)a1 + 4);
      uint64_t v28 = *((void *)a2 + 4);
      long long v29 = a2[1];
      *a1 = *a2;
      a1[1] = v29;
      *((void *)a1 + 4) = v28;
      *((void *)a2 + 4) = v27;
      *a2 = v25;
      a2[1] = v26;
      uint64_t result = (*a4)(a3, a2);
      if (!result) {
        return result;
      }
      long long v10 = *a2;
      long long v11 = a2[1];
      uint64_t v12 = *((void *)a2 + 4);
      uint64_t v30 = *((void *)a3 + 4);
      long long v31 = a3[1];
      *a2 = *a3;
      a2[1] = v31;
      *((void *)a2 + 4) = v30;
    }
    *((void *)a3 + 4) = v12;
    *a3 = v10;
    a3[1] = v11;
  }
  else if (result)
  {
    long long v15 = *a2;
    long long v16 = a2[1];
    uint64_t v17 = *((void *)a2 + 4);
    uint64_t v18 = *((void *)a3 + 4);
    long long v19 = a3[1];
    *a2 = *a3;
    a2[1] = v19;
    *((void *)a2 + 4) = v18;
    *((void *)a3 + 4) = v17;
    *a3 = v15;
    a3[1] = v16;
    uint64_t result = (*a4)(a2, a1);
    if (result)
    {
      long long v20 = *a1;
      long long v21 = a1[1];
      uint64_t v22 = *((void *)a1 + 4);
      uint64_t v23 = *((void *)a2 + 4);
      long long v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      *((void *)a1 + 4) = v23;
      *((void *)a2 + 4) = v22;
      *a2 = v20;
      a2[1] = v21;
    }
  }
  return result;
}

long long *sub_1CC157518(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v4 = a2;
  long long v6 = a1[1];
  long long v22 = *a1;
  long long v23 = v6;
  uint64_t v24 = *((void *)a1 + 4);
  if ((*a3)(&v22, (long long *)((char *)a2 - 40)))
  {
    uint64_t v7 = a1;
    do
      uint64_t v7 = (long long *)((char *)v7 + 40);
    while (((*a3)(&v22, v7) & 1) == 0);
  }
  else
  {
    char v8 = (long long *)((char *)a1 + 40);
    do
    {
      uint64_t v7 = v8;
      if (v8 >= v4) {
        break;
      }
      int v9 = (*a3)(&v22, v8);
      char v8 = (long long *)((char *)v7 + 40);
    }
    while (!v9);
  }
  if (v7 < v4)
  {
    do
      uint64_t v4 = (long long *)((char *)v4 - 40);
    while (((*a3)(&v22, v4) & 1) != 0);
  }
  while (v7 < v4)
  {
    long long v10 = *v7;
    long long v11 = v7[1];
    uint64_t v27 = *((void *)v7 + 4);
    long long v25 = v10;
    long long v26 = v11;
    long long v12 = *v4;
    long long v13 = v4[1];
    *((void *)v7 + 4) = *((void *)v4 + 4);
    *uint64_t v7 = v12;
    v7[1] = v13;
    long long v14 = v25;
    long long v15 = v26;
    *((void *)v4 + 4) = v27;
    *uint64_t v4 = v14;
    v4[1] = v15;
    do
      uint64_t v7 = (long long *)((char *)v7 + 40);
    while (!(*a3)(&v22, v7));
    do
      uint64_t v4 = (long long *)((char *)v4 - 40);
    while (((*a3)(&v22, v4) & 1) != 0);
  }
  long long v16 = (long long *)((char *)v7 - 40);
  if ((long long *)((char *)v7 - 40) != a1)
  {
    long long v17 = *v16;
    long long v18 = *(long long *)((char *)v7 - 24);
    *((void *)a1 + 4) = *((void *)v7 - 1);
    *a1 = v17;
    a1[1] = v18;
  }
  long long v19 = v22;
  long long v20 = v23;
  *((void *)v7 - 1) = v24;
  long long *v16 = v19;
  *(long long *)((char *)v7 - 24) = v20;
  return v7;
}

uint64_t sub_1CC157678(long long *a1, char *a2, uint64_t (**a3)(char *, long long *))
{
  uint64_t v6 = 0;
  long long v7 = a1[1];
  long long v22 = *a1;
  long long v23 = v7;
  uint64_t v24 = *((void *)a1 + 4);
  do
    v6 += 40;
  while (((*a3)((char *)a1 + v6, &v22) & 1) != 0);
  unint64_t v8 = (unint64_t)a1 + v6;
  uint64_t v9 = (uint64_t)a1 + v6 - 40;
  if (v6 == 40)
  {
    do
    {
      if (v8 >= (unint64_t)a2) {
        break;
      }
      a2 -= 40;
    }
    while (((*a3)(a2, &v22) & 1) == 0);
  }
  else
  {
    do
      a2 -= 40;
    while (!(*a3)(a2, &v22));
  }
  if (v8 < (unint64_t)a2)
  {
    long long v10 = (long long *)((char *)a1 + v6);
    long long v11 = (long long *)a2;
    do
    {
      long long v13 = v10[1];
      long long v25 = *v10;
      long long v12 = v25;
      long long v26 = v13;
      uint64_t v27 = *((void *)v10 + 4);
      uint64_t v14 = v27;
      long long v16 = *v11;
      long long v15 = v11[1];
      *((void *)v10 + 4) = *((void *)v11 + 4);
      *long long v10 = v16;
      v10[1] = v15;
      *((void *)v11 + 4) = v14;
      *long long v11 = v12;
      v11[1] = v13;
      do
        long long v10 = (long long *)((char *)v10 + 40);
      while (((*a3)((char *)v10, &v22) & 1) != 0);
      do
        long long v11 = (long long *)((char *)v11 - 40);
      while (!(*a3)((char *)v11, &v22));
    }
    while (v10 < v11);
    uint64_t v9 = (uint64_t)v10 - 40;
  }
  if ((long long *)v9 != a1)
  {
    long long v17 = *(_OWORD *)v9;
    long long v18 = *(_OWORD *)(v9 + 16);
    *((void *)a1 + 4) = *(void *)(v9 + 32);
    *a1 = v17;
    a1[1] = v18;
  }
  long long v19 = v22;
  long long v20 = v23;
  *(void *)(v9 + 32) = v24;
  *(_OWORD *)uint64_t v9 = v19;
  *(_OWORD *)(v9 + 16) = v20;
  return v9;
}

BOOL sub_1CC1577D8(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v8 = (long long *)(a2 - 40);
      if (!(*a3)((long long *)(a2 - 40), (long long *)a1)) {
        return 1;
      }
      long long v9 = *(_OWORD *)a1;
      long long v10 = *(_OWORD *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a2 - 8);
      long long v13 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)a1 = *v8;
      *(_OWORD *)(a1 + 16) = v13;
      *(void *)(a1 + 32) = v12;
      *(void *)(a2 - 8) = v11;
      BOOL result = 1;
      long long *v8 = v9;
      *(_OWORD *)(a2 - 24) = v10;
      return result;
    case 3uLL:
      sub_1CC1573DC((long long *)a1, (long long *)(a1 + 40), (long long *)(a2 - 40), a3);
      return 1;
    case 4uLL:
      sub_1CC1579F0(a1, a1 + 40, a1 + 80, a2 - 40, a3);
      return 1;
    case 5uLL:
      sub_1CC157ADC(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40, a3);
      return 1;
    default:
      uint64_t v14 = (long long *)(a1 + 80);
      sub_1CC1573DC((long long *)a1, (long long *)(a1 + 40), (long long *)(a1 + 80), a3);
      uint64_t v15 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((long long *)v15, v14))
    {
      long long v18 = *(_OWORD *)(v15 + 16);
      long long v24 = *(_OWORD *)v15;
      long long v25 = v18;
      uint64_t v26 = *(void *)(v15 + 32);
      uint64_t v19 = v16;
      while (1)
      {
        uint64_t v20 = a1 + v19;
        long long v21 = *(_OWORD *)(a1 + v19 + 96);
        *(_OWORD *)(v20 + 120) = *(_OWORD *)(a1 + v19 + 80);
        *(_OWORD *)(v20 + 136) = v21;
        *(void *)(v20 + 152) = *(void *)(a1 + v19 + 112);
        if (v19 == -80) {
          break;
        }
        v19 -= 40;
        if (((*a3)(&v24, (long long *)(v20 + 40)) & 1) == 0)
        {
          uint64_t v22 = a1 + v19 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v22 = a1;
LABEL_12:
      long long v23 = v25;
      *(_OWORD *)uint64_t v22 = v24;
      *(_OWORD *)(v22 + 16) = v23;
      *(void *)(v22 + 32) = v26;
      if (++v17 == 8) {
        return v15 + 40 == a2;
      }
    }
    uint64_t v14 = (long long *)v15;
    v16 += 40;
    v15 += 40;
    if (v15 == a2) {
      return 1;
    }
  }
}

__n128 sub_1CC1579F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(long long *, long long *))
{
  sub_1CC1573DC((long long *)a1, (long long *)a2, (long long *)a3, a5);
  if ((*a5)((long long *)a4, (long long *)a3))
  {
    long long v11 = *(_OWORD *)a3;
    long long v12 = *(_OWORD *)(a3 + 16);
    uint64_t v13 = *(void *)(a3 + 32);
    uint64_t v14 = *(void *)(a4 + 32);
    long long v15 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v15;
    *(void *)(a3 + 32) = v14;
    *(void *)(a4 + 32) = v13;
    *(_OWORD *)a4 = v11;
    *(_OWORD *)(a4 + 16) = v12;
    if ((*a5)((long long *)a3, (long long *)a2))
    {
      long long v16 = *(_OWORD *)a2;
      long long v17 = *(_OWORD *)(a2 + 16);
      uint64_t v18 = *(void *)(a2 + 32);
      uint64_t v19 = *(void *)(a3 + 32);
      long long v20 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v20;
      *(void *)(a2 + 32) = v19;
      *(void *)(a3 + 32) = v18;
      *(_OWORD *)a3 = v16;
      *(_OWORD *)(a3 + 16) = v17;
      if ((*a5)((long long *)a2, (long long *)a1))
      {
        __n128 result = *(__n128 *)a1;
        long long v21 = *(_OWORD *)(a1 + 16);
        uint64_t v22 = *(void *)(a1 + 32);
        uint64_t v23 = *(void *)(a2 + 32);
        long long v24 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v24;
        *(void *)(a1 + 32) = v23;
        *(void *)(a2 + 32) = v22;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v21;
      }
    }
  }
  return result;
}

__n128 sub_1CC157ADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(long long *, long long *))
{
  __n128 v12 = sub_1CC1579F0(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    long long v14 = *(_OWORD *)a4;
    long long v15 = *(_OWORD *)(a4 + 16);
    uint64_t v16 = *(void *)(a4 + 32);
    uint64_t v17 = *(void *)(a5 + 32);
    long long v18 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v18;
    *(void *)(a4 + 32) = v17;
    *(void *)(a5 + 32) = v16;
    *(_OWORD *)a5 = v14;
    *(_OWORD *)(a5 + 16) = v15;
    if ((*a6)((long long *)a4, (long long *)a3))
    {
      long long v19 = *(_OWORD *)a3;
      long long v20 = *(_OWORD *)(a3 + 16);
      uint64_t v21 = *(void *)(a3 + 32);
      uint64_t v22 = *(void *)(a4 + 32);
      long long v23 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v23;
      *(void *)(a3 + 32) = v22;
      *(void *)(a4 + 32) = v21;
      *(_OWORD *)a4 = v19;
      *(_OWORD *)(a4 + 16) = v20;
      if ((*a6)((long long *)a3, (long long *)a2))
      {
        __n128 v24 = *(__n128 *)a2;
        long long v25 = *(_OWORD *)(a2 + 16);
        uint64_t v26 = *(void *)(a2 + 32);
        uint64_t v27 = *(void *)(a3 + 32);
        long long v28 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v28;
        *(void *)(a2 + 32) = v27;
        *(void *)(a3 + 32) = v26;
        *(__n128 *)a3 = v24;
        *(_OWORD *)(a3 + 16) = v25;
        if ((*a6)((long long *)a2, (long long *)a1))
        {
          __n128 result = *(__n128 *)a1;
          long long v29 = *(_OWORD *)(a1 + 16);
          uint64_t v30 = *(void *)(a1 + 32);
          uint64_t v31 = *(void *)(a2 + 32);
          long long v32 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v32;
          *(void *)(a1 + 32) = v31;
          *(void *)(a2 + 32) = v30;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v29;
        }
      }
    }
  }
  return result;
}

void sub_1CC157C08(uint64_t a1, __n128 *a2, __n128 *a3, unsigned int (**a4)(int64_t, uint64_t), __n128 a5)
{
  if ((__n128 *)a1 != a2)
  {
    uint64_t v48 = v5;
    uint64_t v49 = v6;
    long long v9 = a2;
    uint64_t v11 = (uint64_t)a2 - a1;
    uint64_t v12 = ((uint64_t)a2 - a1) / 40;
    if ((uint64_t)a2 - a1 >= 41)
    {
      unint64_t v13 = (unint64_t)(v12 - 2) >> 1;
      unint64_t v14 = v13 + 1;
      long long v15 = (__n128 *)(a1 + 40 * v13);
      do
      {
        a5 = sub_1CC157E9C(a1, a4, v12, v15);
        long long v15 = (__n128 *)((char *)v15 - 40);
        --v14;
      }
      while (v14);
    }
    if (v9 != a3)
    {
      uint64_t v16 = v9;
      do
      {
        if (((unsigned int (*)(__n128 *, uint64_t, __n128))*a4)(v16, a1, a5))
        {
          __n128 v17 = *v16;
          __n128 v18 = v16[1];
          unint64_t v19 = v16[2].n128_u64[0];
          unint64_t v20 = *(void *)(a1 + 32);
          __n128 v21 = *(__n128 *)(a1 + 16);
          __n128 *v16 = *(__n128 *)a1;
          v16[1] = v21;
          v16[2].n128_u64[0] = v20;
          *(void *)(a1 + 32) = v19;
          *(__n128 *)a1 = v17;
          *(__n128 *)(a1 + 16) = v18;
          a5 = sub_1CC157E9C(a1, a4, v12, (__n128 *)a1);
        }
        uint64_t v16 = (__n128 *)((char *)v16 + 40);
      }
      while (v16 != a3);
    }
    if (v11 >= 41)
    {
      do
      {
        unsigned int v41 = v9;
        uint64_t v22 = 0;
        __n128 v42 = *(__n128 *)a1;
        __n128 v43 = *(__n128 *)(a1 + 16);
        unint64_t v44 = *(void *)(a1 + 32);
        uint64_t v23 = a1;
        do
        {
          uint64_t v24 = v23 + 40 * v22 + 40;
          uint64_t v25 = (2 * v22) | 1;
          uint64_t v26 = 2 * v22 + 2;
          if (v26 < v12 && (*a4)(v23 + 40 * v22 + 40, v23 + 40 * v22 + 80))
          {
            v24 += 40;
            uint64_t v25 = v26;
          }
          long long v27 = *(_OWORD *)v24;
          long long v28 = *(_OWORD *)(v24 + 16);
          *(void *)(v23 + 32) = *(void *)(v24 + 32);
          *(_OWORD *)uint64_t v23 = v27;
          *(_OWORD *)(v23 + 16) = v28;
          uint64_t v23 = v24;
          uint64_t v22 = v25;
        }
        while (v25 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
        long long v9 = (__n128 *)((char *)v41 - 40);
        if ((__int8 *)v24 == &v41[-3].n128_i8[8])
        {
          *(void *)(v24 + 32) = v44;
          *(__n128 *)uint64_t v24 = v42;
          *(__n128 *)(v24 + 16) = v43;
        }
        else
        {
          __n128 v29 = *v9;
          long long v30 = *(long long *)((char *)&v41[-2] + 8);
          *(void *)(v24 + 32) = v41[-1].n128_u64[1];
          *(__n128 *)uint64_t v24 = v29;
          *(_OWORD *)(v24 + 16) = v30;
          *long long v9 = v42;
          *(__n128 *)((char *)v41 - 24) = v43;
          v41[-1].n128_u64[1] = v44;
          uint64_t v31 = v24 - a1 + 40;
          if (v31 >= 41)
          {
            unint64_t v32 = (v31 / 0x28uLL - 2) >> 1;
            int64_t v33 = a1 + 40 * v32;
            if ((*a4)(v33, v24))
            {
              long long v34 = *(_OWORD *)v24;
              long long v35 = *(_OWORD *)(v24 + 16);
              uint64_t v47 = *(void *)(v24 + 32);
              long long v45 = v34;
              long long v46 = v35;
              do
              {
                uint64_t v36 = v33;
                long long v37 = *(_OWORD *)v33;
                long long v38 = *(_OWORD *)(v33 + 16);
                *(void *)(v24 + 32) = *(void *)(v33 + 32);
                *(_OWORD *)uint64_t v24 = v37;
                *(_OWORD *)(v24 + 16) = v38;
                if (!v32) {
                  break;
                }
                unint64_t v32 = (v32 - 1) >> 1;
                int64_t v33 = a1 + 40 * v32;
                uint64_t v24 = v36;
              }
              while ((((uint64_t (*)(int64_t, long long *))*a4)(v33, &v45) & 1) != 0);
              long long v39 = v46;
              *(_OWORD *)uint64_t v36 = v45;
              *(_OWORD *)(v36 + 16) = v39;
              *(void *)(v36 + 32) = v47;
            }
          }
        }
      }
      while (v12-- > 2);
    }
  }
}

__n128 sub_1CC157E9C(uint64_t a1, unsigned int (**a2)(int64_t, uint64_t), uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v26 = v4;
    uint64_t v27 = v5;
    long long v7 = a4;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3)))
    {
      int64_t v12 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      unint64_t v13 = (long long *)(a1 + 40 * v12);
      int64_t v14 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && (*a2)(a1 + 40 * v12, (uint64_t)v13 + 40))
      {
        unint64_t v13 = (long long *)((char *)v13 + 40);
        int64_t v12 = v14;
      }
      if ((((uint64_t (*)(long long *, __n128 *))*a2)(v13, v7) & 1) == 0)
      {
        __n128 v16 = v7[1];
        __n128 v23 = *v7;
        __n128 v24 = v16;
        uint64_t v25 = v7[2].n128_i64[0];
        do
        {
          __n128 v17 = (__n128 *)v13;
          __n128 v18 = (__n128)*v13;
          long long v19 = v13[1];
          v7[2].n128_u64[0] = *((void *)v13 + 4);
          *long long v7 = v18;
          v7[1] = (__n128)v19;
          if (v9 < v12) {
            break;
          }
          uint64_t v20 = (2 * v12) | 1;
          unint64_t v13 = (long long *)(a1 + 40 * v20);
          uint64_t v21 = 2 * v12 + 2;
          if (v21 < a3)
          {
            if ((*a2)(a1 + 40 * v20, (uint64_t)v13 + 40))
            {
              unint64_t v13 = (long long *)((char *)v13 + 40);
              uint64_t v20 = v21;
            }
          }
          long long v7 = v17;
          int64_t v12 = v20;
        }
        while (!(*a2)((int64_t)v13, (uint64_t)&v23));
        __n128 result = v23;
        __n128 v22 = v24;
        v17[2].n128_u64[0] = v25;
        *__n128 v17 = result;
        v17[1] = v22;
      }
    }
  }
  return result;
}

void sub_1CC158008()
{
  v7[20] = *MEMORY[0x1E4F143B8];
  int v4 = 1;
  uint64_t v2 = "Vector functions library";
  uint64_t v3 = 24;
  int v0 = 0;
  uint64_t v1 = &v0;
  uint64_t v5 = v7;
  uint64_t v6 = 0x400000000;
  llvm::SmallVectorBase<unsigned int>::grow_pod();
}

uint64_t sub_1CC1581E4(void *a1, uint64_t *a2)
{
  uint64_t v47 = v51;
  uint64_t v48 = v51;
  uint64_t v49 = 32;
  int v50 = 0;
  uint64_t v4 = a1[4];
  uint64_t v3 = a1[5];
  if (v3 == v4) {
    return 0;
  }
  unsigned int v6 = 32;
  while (1)
  {
    uint64_t v8 = *(void *)(v3 - 8);
    v3 -= 8;
    uint64_t v7 = v8;
    int64_t v9 = v48;
    uint64_t v10 = HIDWORD(v49);
    if (v48 != v47) {
      goto LABEL_62;
    }
    if (!HIDWORD(v49))
    {
LABEL_11:
      if (HIDWORD(v49) < v6)
      {
        unint64_t v11 = ++HIDWORD(v49);
        *(void *)&v48[8 * v10] = v7;
        goto LABEL_13;
      }
LABEL_62:
      if (3 * v6 <= 4 * (HIDWORD(v49) - v50))
      {
        if (v6 >= 0x40) {
          v6 *= 2;
        }
        else {
          unsigned int v6 = 128;
        }
      }
      else if (v6 - HIDWORD(v49) >= v6 >> 3)
      {
        goto LABEL_64;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v47, v6);
      unsigned int v6 = v49;
      int64_t v9 = v48;
LABEL_64:
      unint64_t v11 = v6 - 1;
      unsigned int v36 = v11 & ((v7 >> 4) ^ (v7 >> 9));
      long long v37 = &v9[8 * v36];
      uint64_t v38 = *v37;
      if (*v37 == -1)
      {
        long long v39 = 0;
LABEL_76:
        if (v39) {
          __n128 v43 = v39;
        }
        else {
          __n128 v43 = v37;
        }
        if (*v43 != v7)
        {
          if (*v43 == -2) {
            --v50;
          }
          else {
            ++HIDWORD(v49);
          }
          *__n128 v43 = v7;
        }
      }
      else
      {
        long long v39 = 0;
        int v40 = 1;
        while (v38 != v7)
        {
          if (v39) {
            BOOL v41 = 0;
          }
          else {
            BOOL v41 = v38 == -2;
          }
          if (v41) {
            long long v39 = v37;
          }
          unsigned int v42 = v36 + v40++;
          unsigned int v36 = v42 & v11;
          long long v37 = &v9[8 * (v42 & v11)];
          uint64_t v38 = *v37;
          if (*v37 == -1) {
            goto LABEL_76;
          }
        }
      }
      goto LABEL_13;
    }
    unint64_t v11 = 0;
    uint64_t v12 = 8 * HIDWORD(v49);
    unint64_t v13 = v48;
    while (*v13 != v7)
    {
      if (*v13 == -2) {
        unint64_t v11 = (unint64_t)v13;
      }
      ++v13;
      v12 -= 8;
      if (!v12)
      {
        if (!v11) {
          goto LABEL_11;
        }
        *(void *)unint64_t v11 = v7;
        --v50;
        break;
      }
    }
LABEL_13:
    uint64_t v14 = *(void *)(v7 + 40);
    if (v14 == v7 + 40) {
      goto LABEL_85;
    }
    long long v15 = (unsigned char *)(v14 - 24);
    uint64_t v16 = v14 ? v14 - 24 : 0;
    uint64_t Successor = *(unsigned __int8 *)(v16 + 16);
    if (Successor == 30) {
      break;
    }
    int v44 = 2;
    switch(*(unsigned char *)(v16 + 16))
    {
      case 0x1E:
        __break(1u);
        goto LABEL_98;
      case 0x1F:
        int v44 = (*(_DWORD *)(v16 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
      case 0x26:
        int v44 = (*(_DWORD *)(v16 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x21:
        goto LABEL_22;
      case 0x24:
        int v44 = *(_WORD *)(v16 + 18) & 1;
        break;
      case 0x25:
        int v44 = 1;
        goto LABEL_22;
      case 0x27:
        int v44 = *(_DWORD *)(v16 + 80) + 1;
        break;
      default:
        goto LABEL_85;
    }
    if (v44) {
      goto LABEL_22;
    }
LABEL_85:
    if (v3 == v4)
    {
      uint64_t v45 = 0;
      long long v15 = v47;
      a1 = v48;
      goto LABEL_100;
    }
  }
  if ((*(_DWORD *)(v16 + 20) & 0x7FFFFFF) == 3) {
    int v44 = 2;
  }
  else {
    int v44 = 1;
  }
LABEL_22:
  unsigned int v2 = 0;
  while (2)
  {
    uint64_t Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v16, v2);
    long long v15 = v47;
    a1 = v48;
    if (v48 == v47)
    {
      int v18 = HIDWORD(v49);
      long long v19 = &v48[8 * HIDWORD(v49)];
      if (HIDWORD(v49))
      {
        uint64_t v20 = 0;
        while (*(void *)&v48[v20] != Successor)
        {
          v20 += 8;
          if (8 * HIDWORD(v49) == v20) {
            goto LABEL_28;
          }
        }
        long long v19 = &v48[v20];
      }
LABEL_28:
      long long v15 = v48;
    }
    else
    {
      int v22 = v49 - 1;
      unsigned int v23 = (v49 - 1) & ((Successor >> 4) ^ (Successor >> 9));
      long long v19 = &v48[8 * v23];
      uint64_t v24 = *v19;
      if (*v19 == -1)
      {
        uint64_t v25 = 0;
LABEL_49:
        if (v25) {
          long long v19 = v25;
        }
        int v18 = HIDWORD(v49);
        if (*v19 != Successor) {
          long long v19 = &v48[8 * v49];
        }
      }
      else
      {
        uint64_t v25 = 0;
        int v26 = 1;
        while (v24 != Successor)
        {
          if (v25) {
            BOOL v27 = 0;
          }
          else {
            BOOL v27 = v24 == -2;
          }
          if (v27) {
            uint64_t v25 = v19;
          }
          unsigned int v28 = v23 + v26++;
          unsigned int v23 = v28 & v22;
          long long v19 = &v48[8 * (v28 & v22)];
          uint64_t v24 = *v19;
          if (*v19 == -1) {
            goto LABEL_49;
          }
        }
        int v18 = HIDWORD(v49);
      }
    }
    unsigned int v6 = v49;
    if (v48 == v15) {
      int v21 = v18;
    }
    else {
      int v21 = v49;
    }
    if (v19 == (void *)&v48[8 * v21])
    {
LABEL_33:
      if (v44 == ++v2) {
        goto LABEL_85;
      }
      continue;
    }
    break;
  }
  int v29 = *((_DWORD *)a2 + 4);
  if (!v29) {
    goto LABEL_99;
  }
  uint64_t v30 = *a2;
  unsigned int v31 = v29 - 1;
  uint64_t v32 = (v29 - 1) & ((v7 >> 4) ^ (v7 >> 9));
  uint64_t v33 = *(void *)(*a2 + 16 * v32);
  if (v7 == v33)
  {
LABEL_59:
    unint64_t v11 = *(void *)(v30 + 16 * v32 + 8);
    if (!v11) {
      goto LABEL_99;
    }
    while (**(void **)(v11 + 32) != Successor)
    {
LABEL_98:
      unint64_t v11 = *(void *)v11;
      if (!v11) {
        goto LABEL_99;
      }
    }
    goto LABEL_33;
  }
  int v35 = 1;
  while (v33 != -4096)
  {
    int v34 = v32 + v35++;
    uint64_t v32 = v34 & v31;
    uint64_t v33 = *(void *)(v30 + 16 * v32);
    if (v7 == v33) {
      goto LABEL_59;
    }
  }
LABEL_99:
  uint64_t v45 = 1;
LABEL_100:
  if (a1 != (void *)v15) {
    free(a1);
  }
  return v45;
}

uint64_t llvm::IntrinsicCostAttributes::IntrinsicCostAttributes(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(unsigned char *)(a3 + 16) != 84) {
    goto LABEL_5;
  }
  uint64_t v7 = *(void *)(a3 - 32);
  if (!v7) {
    goto LABEL_6;
  }
  if (!*(unsigned char *)(v7 + 16) && *(void *)(v7 + 24) == *(void *)(a3 + 72))
  {
    if ((*(unsigned char *)(v7 + 33) & 0x20) != 0) {
      uint64_t v7 = a3;
    }
    else {
      uint64_t v7 = 0;
    }
  }
  else
  {
LABEL_5:
    uint64_t v7 = 0;
  }
LABEL_6:
  uint64_t v8 = *(void *)a3;
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 24) = a1 + 40;
  *(_DWORD *)(a1 + 16) = a2;
  *(void *)(a1 + 32) = 0x400000000;
  *(void *)(a1 + 72) = a1 + 88;
  int64_t v9 = (uint64_t *)(a1 + 72);
  *(void *)(a1 + 80) = 0x400000000;
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = a4;
  *(void *)(a1 + 136) = a5;
  if (sub_1CB845E74(a3))
  {
    int v10 = *(unsigned __int8 *)(a3 + 17) >> 1;
    if (v10 == 127) {
      int v10 = -1;
    }
    *(_DWORD *)(a1 + 120) = v10;
  }
  int v11 = *(_DWORD *)(a3 + 20);
  int v12 = *(unsigned __int8 *)(a3 + 16);
  if (v12 == 84)
  {
    uint64_t v13 = 0;
  }
  else if (v12 == 39)
  {
    uint64_t v13 = (*(_DWORD *)(a3 + 80) + 1);
  }
  else
  {
    uint64_t v13 = 2;
  }
  uint64_t v14 = 0;
  uint64_t v15 = -(uint64_t)(v11 & 0x7FFFFFF);
  if (v11 < 0)
  {
    uint64_t v17 = a3 - 32 * (v11 & 0x7FFFFFF);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((v18 & 0xFFFFFFFF0) != 0) {
      uint64_t v14 = (*(_DWORD *)(v17 - 12) - *(_DWORD *)(v17 - v18));
    }
    else {
      uint64_t v14 = 0;
    }
  }
  sub_1CBF74A6C(a1 + 72, *v9, (char *)(a3 + 32 * v15), (char *)(a3 - 32 * v13 - 32 * v14 - 32));
  sub_1CC1587C8(a1 + 24, *(void *)(a1 + 24), (char *)(*(void *)(*(void *)(*(void *)(a3 - 32) + 24) + 16) + 8), (char *)(*(void *)(*(void *)(*(void *)(a3 - 32) + 24) + 16)+ 8 * *(unsigned int *)(*(void *)(*(void *)(a3 - 32) + 24) + 12)));
  return a1;
}

unsigned char *sub_1CC1587C8(uint64_t a1, uint64_t a2, char *__src, char *a4)
{
  uint64_t v5 = __src;
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = (a2 - *(void *)a1) >> 3;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  unint64_t v10 = *(unsigned int *)(a1 + 12);
  size_t v11 = a4 - __src;
  unint64_t v12 = v9 + ((a4 - __src) >> 3);
  if (*(void *)a1 + 8 * v9 == a2)
  {
    if (v12 > v10) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v5 != a4)
    {
      memcpy((void *)(v7 + 8 * v9), v5, v11);
      LODWORD(v9) = *(_DWORD *)(a1 + 8);
      uint64_t v7 = *(void *)a1;
    }
    *(_DWORD *)(a1 + 8) = v9 + (v11 >> 3);
    return (unsigned char *)(v7 + 8 * v8);
  }
  else
  {
    unint64_t v15 = (uint64_t)v11 >> 3;
    if (v12 > v10) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v16 = (unsigned char *)(v7 + 8 * v9);
    __srca = (unsigned char *)(v7 + 8 * v8);
    unint64_t v17 = (v16 - __srca) >> 3;
    if (v17 >= v15)
    {
      sub_1CD4570C8(a1, &v16[-8 * v15], (char *)(v7 + 8 * v9));
      if (&v16[-8 * v15] != __srca) {
        memmove(&__srca[8 * v15], __srca, &v16[-8 * v15] - __srca);
      }
      if (v5 != a4)
      {
        uint64_t v13 = __srca;
        memmove(__srca, v5, v11);
        return v13;
      }
    }
    else
    {
      unsigned int v18 = v9 + (v11 >> 3);
      *(_DWORD *)(a1 + 8) = v18;
      if (v8 != v9)
      {
        long long v19 = (void *)(v7 + 8 * v8);
        memcpy((void *)(v7 + 8 * v18 - 8 * v17), __srca, v16 - __srca);
        do
        {
          uint64_t v20 = *(void *)v5;
          v5 += 8;
          *v19++ = v20;
          --v17;
        }
        while (v17);
      }
      if (v5 != a4) {
        memcpy(v16, v5, a4 - v5);
      }
    }
    return __srca;
  }
}

uint64_t llvm::IntrinsicCostAttributes::IntrinsicCostAttributes(uint64_t a1, int a2, uint64_t a3, char *__src, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10)
{
  *(void *)a1 = a7;
  *(void *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a1 + 40;
  *(void *)(a1 + 32) = 0x400000000;
  *(void *)(a1 + 72) = a1 + 88;
  *(void *)(a1 + 80) = 0x400000000;
  *(_DWORD *)(a1 + 120) = a6;
  *(void *)(a1 + 128) = a9;
  *(void *)(a1 + 136) = a10;
  sub_1CC1587C8(a1 + 24, a1 + 40, __src, &__src[8 * a5]);
  return a1;
}

{
  *(void *)a1 = a7;
  *(void *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a1 + 40;
  *(void *)(a1 + 32) = 0x400000000;
  *(void *)(a1 + 72) = a1 + 88;
  *(void *)(a1 + 80) = 0x400000000;
  *(_DWORD *)(a1 + 120) = a6;
  *(void *)(a1 + 128) = a9;
  *(void *)(a1 + 136) = a10;
  sub_1CC1587C8(a1 + 24, a1 + 40, __src, &__src[8 * a5]);
  return a1;
}

uint64_t llvm::IntrinsicCostAttributes::IntrinsicCostAttributes(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, char *__src, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)a1 = a9;
  *(void *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a1 + 40;
  *(void *)(a1 + 72) = a1 + 88;
  uint64_t v14 = (uint64_t *)(a1 + 72);
  *(void *)(a1 + 32) = 0x400000000;
  *(void *)(a1 + 80) = 0x400000000;
  *(_DWORD *)(a1 + 120) = a8;
  *(void *)(a1 + 128) = a10;
  *(void *)(a1 + 136) = a11;
  sub_1CC1587C8(a1 + 24, a1 + 40, __src, &__src[8 * a7]);
  sub_1CD4D069C((unsigned int *)(a1 + 72), *v14, a4, &a4[a5]);
  return a1;
}

{
  uint64_t *v14;

  *(void *)a1 = a9;
  *(void *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a1 + 40;
  *(void *)(a1 + 72) = a1 + 88;
  uint64_t v14 = (uint64_t *)(a1 + 72);
  *(void *)(a1 + 32) = 0x400000000;
  *(void *)(a1 + 80) = 0x400000000;
  *(_DWORD *)(a1 + 120) = a8;
  *(void *)(a1 + 128) = a10;
  *(void *)(a1 + 136) = a11;
  sub_1CC1587C8(a1 + 24, a1 + 40, __src, &__src[8 * a7]);
  sub_1CD4D069C((unsigned int *)(a1 + 72), *v14, a4, &a4[a5]);
  return a1;
}

void llvm::HardwareLoopInfo::isHardwareLoopCandidate(llvm::HardwareLoopInfo *this, llvm::ScalarEvolution *a2, llvm::LoopInfo *a3, llvm::DominatorTree *a4)
{
}

void llvm::TargetTransformInfo::TargetTransformInfo(llvm::TargetTransformInfo *this, const llvm::DataLayout *a2)
{
}

{
  operator new();
}

void llvm::TargetTransformInfo::~TargetTransformInfo(llvm::TargetTransformInfo *this)
{
  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

void *llvm::TargetTransformInfo::TargetTransformInfo(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t *result = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t *result = v2;
  return result;
}

uint64_t *llvm::TargetTransformInfo::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = *a1;
  *a1 = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t llvm::TargetTransformInfo::getInliningThresholdMultiplier(llvm::TargetTransformInfo *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 32))();
}

uint64_t llvm::TargetTransformInfo::adjustInliningThreshold(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 40))();
}

uint64_t llvm::TargetTransformInfo::getInlinerVectorBonusPercent(llvm::TargetTransformInfo *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 48))();
}

uint64_t llvm::TargetTransformInfo::getEstimatedNumberOfCaseClusters(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 64))();
}

uint64_t llvm::TargetTransformInfo::getUserCost(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 72))();
}

uint64_t llvm::TargetTransformInfo::getPredictableBranchThreshold(llvm::TargetTransformInfo *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 80))();
}

uint64_t llvm::TargetTransformInfo::hasBranchDivergence(llvm::TargetTransformInfo *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 88))();
}

uint64_t llvm::TargetTransformInfo::canHaveNonUndefGlobalInitializerInAddressSpace(llvm::TargetTransformInfo *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 144))();
}

uint64_t llvm::TargetTransformInfo::getPredicatedAddrSpace(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 160))();
}

uint64_t llvm::TargetTransformInfo::isLoweredToCall(llvm::TargetTransformInfo *this, const Function *a2)
{
  return (*(uint64_t (**)(void, const Function *))(**(void **)this + 176))(*(void *)this, a2);
}

uint64_t llvm::TargetTransformInfo::instCombineIntrinsic(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 224))();
}

uint64_t llvm::TargetTransformInfo::simplifyDemandedUseBitsIntrinsic(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a1;
  unsigned int v8 = *((_DWORD *)a4 + 2);
  if (v8 > 0x40) {
    operator new[]();
  }
  uint64_t v7 = *a4;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v4 + 232))(v4, a2, a3, &v7);
  if (v8 >= 0x41)
  {
    if (v7)
    {
      uint64_t v6 = result;
      MEMORY[0x1D25D9CB0](v7, 0x1000C8000313F17);
      return v6;
    }
  }
  return result;
}

uint64_t llvm::TargetTransformInfo::simplifyDemandedVectorEltsIntrinsic(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = *a1;
  unsigned int v17 = *((_DWORD *)a4 + 2);
  if (v17 > 0x40) {
    operator new[]();
  }
  uint64_t v16 = *a4;
  sub_1CB90D414((uint64_t)v18, a8);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, void *))(*(void *)v13 + 240))(v13, a2, a3, &v16, a5, a6, a7, v18);
  if (v19 == v18)
  {
    (*(void (**)(void *))(v18[0] + 32))(v18);
  }
  else if (v19)
  {
    (*(void (**)(void))(*v19 + 40))();
  }
  if (v17 >= 0x41 && v16) {
    MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
  }
  return v14;
}

uint64_t llvm::TargetTransformInfo::getUnrollingPreferences(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 184))();
}

uint64_t llvm::TargetTransformInfo::getPeelingPreferences(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 192))();
}

uint64_t llvm::TargetTransformInfo::isTruncateFree(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 456))();
}

uint64_t llvm::TargetTransformInfo::isProfitableToHoist(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 464))();
}

uint64_t llvm::TargetTransformInfo::shouldBuildLookupTables(llvm::TargetTransformInfo *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 496))();
}

uint64_t llvm::TargetTransformInfo::shouldBuildLookupTablesForConstant(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 504))();
}

uint64_t llvm::TargetTransformInfo::useColdCCForColdCall(llvm::TargetTransformInfo *this, Function *a2)
{
  return (*(uint64_t (**)(void, Function *))(**(void **)this + 520))(*(void *)this, a2);
}

uint64_t llvm::TargetTransformInfo::allowsMisalignedMemoryAccesses(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void))(*(void *)*a1 + 600))(*a1, a2, a3, a4, a5);
}

uint64_t llvm::TargetTransformInfo::getFPOpCost(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 632))();
}

uint64_t llvm::TargetTransformInfo::getRegisterClassName(llvm::TargetTransformInfo *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 688))();
}

uint64_t llvm::TargetTransformInfo::shouldConsiderAddressTypePromotion(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 752))();
}

uint64_t llvm::TargetTransformInfo::getCacheSize(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 768))();
}

uint64_t llvm::TargetTransformInfo::getCacheAssociativity(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 776))();
}

uint64_t llvm::TargetTransformInfo::getOperandInfo(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v4 == 16)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 32);
    if (v5 <= 0x40)
    {
      int8x8_t v6 = *(int8x8_t *)(a1 + 24);
      goto LABEL_5;
    }
    int v10 = 0;
    unint64_t v11 = (unint64_t)(v5 + 63) >> 6;
    unint64_t v12 = *(int8x8_t **)(a1 + 24);
    do
    {
      int8x8_t v13 = *v12++;
      uint8x8_t v14 = (uint8x8_t)vcnt_s8(v13);
      v14.i16[0] = vaddlv_u8(v14);
      v10 += v14.i32[0];
      --v11;
    }
    while (v11);
    goto LABEL_13;
  }
  if (a1 && v4 == 91)
  {
    uint64_t v8 = *(unsigned int *)(**(void **)(a1 - 64) + 32);
    if (v8 == *(_DWORD *)(a1 + 72))
    {
      isZeroEltSplatMasunint64_t k = llvm::ShuffleVectorInst::isZeroEltSplatMask(*(int **)(a1 + 64), v8);
      goto LABEL_21;
    }
  }
  else if (v4 <= 0x14 && (*(_DWORD *)(*(void *)a1 + 8) & 0xFE) == 18)
  {
    SplatValue = (int8x8_t *)llvm::Constant::getSplatValue((llvm::Constant *)a1, 0);
    isZeroEltSplatMasunint64_t k = 0;
    goto LABEL_24;
  }
  isZeroEltSplatMasunint64_t k = 0;
LABEL_21:
  uint64_t v38 = 0;
  long long v37 = (void **)&v38;
  if (sub_1CC189A5C((uint64_t)v36, a1)) {
    SplatValue = v38;
  }
  else {
    SplatValue = 0;
  }
LABEL_24:
  int v17 = *(unsigned __int8 *)(a1 + 16);
  if (v17 == 15 || v17 == 10)
  {
    if (SplatValue)
    {
      unsigned int v18 = SplatValue[2].u8[0];
      if (v18 == 16)
      {
        uint64_t v19 = SplatValue[4].u32[0];
        if (v19 <= 0x40)
        {
          int8x8_t v6 = SplatValue[3];
LABEL_5:
          uint8x8_t v7 = (uint8x8_t)vcnt_s8(v6);
          v7.i16[0] = vaddlv_u8(v7);
          if (v7.u32[0] != 1) {
            return 2;
          }
          goto LABEL_14;
        }
        int v10 = 0;
        unint64_t v30 = (unint64_t)(v19 + 63) >> 6;
        unsigned int v31 = (int8x8_t *)SplatValue[3];
        do
        {
          int8x8_t v32 = *v31++;
          uint8x8_t v33 = (uint8x8_t)vcnt_s8(v32);
          v33.i16[0] = vaddlv_u8(v33);
          v10 += v33.i32[0];
          --v30;
        }
        while (v30);
LABEL_13:
        if (v10 != 1) {
          return 2;
        }
LABEL_14:
        *a2 = 1;
        return 2;
      }
      LODWORD(isZeroEltSplatMask) = 2;
      goto LABEL_52;
    }
    isZeroEltSplatMasunint64_t k = 3;
    if (!a1) {
      return isZeroEltSplatMask;
    }
    if ((v17 & 0xFE) != 0xE) {
      return isZeroEltSplatMask;
    }
    *a2 = 1;
    int v20 = *(_DWORD *)(*(void *)a1 + 32);
    if (!v20) {
      return isZeroEltSplatMask;
    }
    unsigned int v21 = 0;
    while (1)
    {
      ElementAsunint64_t Constant = (int8x8_t *)llvm::ConstantDataSequential::getElementAsConstant((llvm::ConstantFP ***)a1, v21);
      if (!ElementAsConstant || ElementAsConstant[2].i8[0] != 16) {
        break;
      }
      uint64_t v23 = ElementAsConstant[4].u32[0];
      if (v23 > 0x40)
      {
        int v25 = 0;
        unint64_t v26 = (unint64_t)(v23 + 63) >> 6;
        BOOL v27 = (int8x8_t *)ElementAsConstant[3];
        do
        {
          int8x8_t v28 = *v27++;
          uint8x8_t v29 = (uint8x8_t)vcnt_s8(v28);
          v29.i16[0] = vaddlv_u8(v29);
          v25 += v29.i32[0];
          --v26;
        }
        while (v26);
        if (v25 != 1) {
          break;
        }
      }
      else
      {
        uint8x8_t v24 = (uint8x8_t)vcnt_s8(ElementAsConstant[3]);
        v24.i16[0] = vaddlv_u8(v24);
        if (v24.u32[0] != 1) {
          break;
        }
      }
      if (++v21 == v20) {
        goto LABEL_49;
      }
    }
    *a2 = 0;
LABEL_49:
    isZeroEltSplatMasunint64_t k = 3;
  }
  if (!SplatValue) {
    return isZeroEltSplatMask;
  }
  unsigned int v18 = SplatValue[2].u8[0];
LABEL_52:
  if (v18 < 4 || v18 == 21) {
    return 1;
  }
  else {
    return isZeroEltSplatMask;
  }
}

uint64_t llvm::TargetTransformInfo::getArithmeticInstrCost(void *a1)
{
  return (*(uint64_t (**)(void))(*(void *)*a1 + 824))(*a1);
}

uint64_t llvm::TargetTransformInfo::getCastContextHint(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = 0;
    unsigned int v2 = *(unsigned __int8 *)(v1 + 16) - 66;
    if (v2 <= 8)
    {
      int v3 = 1 << v2;
      if ((v3 & 0x106) != 0)
      {
        int v4 = *(_DWORD *)(v1 + 20);
        if ((v4 & 0x40000000) != 0) {
          uint64_t v5 = *(uint64_t **)(v1 - 8);
        }
        else {
          uint64_t v5 = (uint64_t *)(v1 - 32 * (v4 & 0x7FFFFFF));
        }
        uint64_t v6 = *v5;
        unsigned int v7 = *(unsigned __int8 *)(v6 + 16);
        if (v6) {
          BOOL v8 = v7 >= 0x1C;
        }
        else {
          BOOL v8 = 0;
        }
        if (!v8) {
          return 0;
        }
        if (v7 != 60)
        {
          if (v7 == 84)
          {
            uint64_t v9 = *(void *)(v6 - 32);
            if (v9)
            {
              if (!*(unsigned char *)(v9 + 16)
                && *(void *)(v9 + 24) == *(void *)(v6 + 72)
                && (*(unsigned char *)(v9 + 33) & 0x20) != 0)
              {
                int v10 = *(_DWORD *)(v9 + 36);
                if (v10 == 184) {
                  unsigned int v11 = 3;
                }
                else {
                  unsigned int v11 = 0;
                }
                BOOL v12 = v10 == 185;
LABEL_23:
                if (v12) {
                  return 2;
                }
                else {
                  return v11;
                }
              }
            }
          }
          return 0;
        }
      }
      else
      {
        if ((v3 & 0x81) == 0) {
          return result;
        }
        uint64_t v13 = *(void *)(v1 + 8);
        if (!v13 || *(void *)(v13 + 8)) {
          return 0;
        }
        uint64_t v14 = *(void *)(v13 + 24);
        unsigned int v15 = *(unsigned __int8 *)(v14 + 16);
        if (!v14 || v15 < 0x1C) {
          return 0;
        }
        if (v15 != 61)
        {
          if (v15 == 84)
          {
            uint64_t v17 = *(void *)(v14 - 32);
            if (v17)
            {
              if (!*(unsigned char *)(v17 + 16)
                && *(void *)(v17 + 24) == *(void *)(v14 + 72)
                && (*(unsigned char *)(v17 + 33) & 0x20) != 0)
              {
                int v18 = *(_DWORD *)(v17 + 36);
                if (v18 == 186) {
                  unsigned int v11 = 3;
                }
                else {
                  unsigned int v11 = 0;
                }
                BOOL v12 = v18 == 187;
                goto LABEL_23;
              }
            }
          }
          return 0;
        }
      }
      return 1;
    }
  }
  return result;
}

uint64_t llvm::TargetTransformInfo::getCmpSelInstrCost(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 864))();
}

uint64_t llvm::TargetTransformInfo::getReplicationShuffleCost(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 880))();
}

uint64_t llvm::TargetTransformInfo::getMemcpyCost(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 56))();
}

uint64_t llvm::TargetTransformInfo::getTgtMemIntrinsic(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 992))();
}

uint64_t llvm::TargetTransformInfo::getMemcpyLoopLoweringType(void *a1)
{
  return (*(uint64_t (**)(void))(*(void *)*a1 + 1016))(*a1);
}

uint64_t llvm::TargetTransformInfo::getMemcpyLoopResidualLoweringType(void *a1)
{
  return (*(uint64_t (**)(void))(*(void *)*a1 + 1024))(*a1);
}

uint64_t llvm::TargetTransformInfo::areInlineCompatible(llvm::TargetTransformInfo *this, const Function *a2, const Function *a3)
{
  return (*(uint64_t (**)(void, const Function *, const Function *))(**(void **)this + 1032))(*(void *)this, a2, a3);
}

uint64_t llvm::TargetTransformInfo::areTypesABICompatible(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 1040))();
}

uint64_t llvm::TargetTransformInfo::getLoadStoreVecRegBitWidth(llvm::TargetTransformInfo *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 1064))();
}

uint64_t llvm::TargetTransformInfo::isLegalToVectorizeLoad(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 1072))();
}

uint64_t llvm::TargetTransformInfo::isLegalToVectorizeStore(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 1080))();
}

uint64_t llvm::TargetTransformInfo::isLegalToVectorizeLoadChain(void *a1, uint64_t a2, unsigned __int8 a3)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 1088))(*a1, a2, a3);
}

uint64_t llvm::TargetTransformInfo::isLegalToVectorizeStoreChain(void *a1, uint64_t a2, unsigned __int8 a3)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 1096))(*a1, a2, a3);
}

uint64_t llvm::TargetTransformInfo::getLoadVectorFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 1120))();
}

uint64_t llvm::TargetTransformInfo::getStoreVectorFactor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 1128))();
}

uint64_t llvm::TargetTransformInfo::hasActiveVectorLength(void *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(*(void *)*a1 + 1184))(*a1, a2, a3, a4);
}

uint64_t llvm::TargetTransformInfo::hasDisjointAddressSpaces(llvm::TargetTransformInfo *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 1208))();
}

uint64_t llvm::TargetTransformInfo::canAddressSpacesOverlap(llvm::TargetTransformInfo *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 1216))();
}

uint64_t llvm::TargetTransformInfo::canWriteToAddressSpace(llvm::TargetTransformInfo *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 1224))();
}

uint64_t llvm::TargetTransformInfo::canCSEInstruction(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 1232))();
}

void *llvm::TargetIRAnalysis::TargetIRAnalysis(void *this)
{
  *this = &unk_1F2608228;
  this[1] = llvm::TargetIRAnalysis::getDefaultTTI;
  this[3] = this;
  return this;
}

{
  *this = &unk_1F2608228;
  this[1] = llvm::TargetIRAnalysis::getDefaultTTI;
  this[3] = this;
  return this;
}

uint64_t llvm::TargetIRAnalysis::TargetIRAnalysis(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void llvm::TargetIRAnalysis::run(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    unsigned int v2 = *(void (**)(void))(*(void *)v1 + 48);
    v2();
  }
  else
  {
    sub_1CB920400();
    llvm::initializeTargetTransformInfoWrapperPassPass(v3);
  }
}

void llvm::initializeTargetTransformInfoWrapperPassPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC86B0, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC15A204;
    v3[1] = &v1;
    unsigned int v2 = v3;
    std::__call_once(&qword_1EBCC86B0, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC15A204()
{
}

uint64_t *llvm::TargetTransformInfoWrapperPass::getTTI(llvm::TargetTransformInfoWrapperPass *this, const Function *a2)
{
  v10[0] = 0;
  v10[1] = 0;
  int v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  int v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v17 = 0;
  uint64_t v4 = *((void *)this + 7);
  if (!v4)
  {
    sub_1CB920400();
    goto LABEL_8;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 48))(&v9);
  unsigned int v2 = (uint64_t *)((char *)this + 64);
  uint64_t v5 = v9;
  if (!*((unsigned char *)this + 72))
  {
    *((void *)this + 8) = v9;
    *((unsigned char *)this + 72) = 1;
    goto LABEL_5;
  }
  uint64_t v9 = 0;
  uint64_t v6 = *v2;
  *unsigned int v2 = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    uint64_t v7 = v9;
    uint64_t v9 = 0;
    if (v7) {
LABEL_8:
    }
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
LABEL_5:
  MEMORY[0x1D25D9CD0](0, 8);
  MEMORY[0x1D25D9CD0](0, 8);
  sub_1CBF54128((unsigned int *)v10);
  MEMORY[0x1D25D9CD0](v10[0], 8);
  return v2;
}

void sub_1CC15A3DC()
{
}

uint64_t sub_1CC15A3F0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

BOOL sub_1CC15A3F8(uint64_t a1, uint64_t a2, llvm::Value *a3, llvm::Constant **a4, uint64_t a5)
{
  return sub_1CC15ADAC((llvm::DataLayout **)(a1 + 8), a2, a3, a4, a5);
}

uint64_t sub_1CC15A400()
{
  return 1;
}

uint64_t sub_1CC15A408()
{
  return 0;
}

uint64_t sub_1CC15A410()
{
  return 150;
}

uint64_t sub_1CC15A418()
{
  return 4;
}

uint64_t sub_1CC15A424(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return ((*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFFu) - 1;
}

uint64_t sub_1CC15A438(uint64_t a1, int **a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_1CC15B330((llvm::DataLayout **)(a1 + 8), a2, a3, a4, a5);
}

uint64_t sub_1CC15A440()
{
  return 2126008812;
}

uint64_t sub_1CC15A44C()
{
  return 0;
}

uint64_t sub_1CC15A454()
{
  return 0;
}

uint64_t sub_1CC15A45C()
{
  return 0;
}

uint64_t sub_1CC15A464()
{
  return 0;
}

uint64_t sub_1CC15A46C()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1CC15A474()
{
  return 0;
}

uint64_t sub_1CC15A47C()
{
  return 0;
}

BOOL sub_1CC15A484(uint64_t a1, int a2)
{
  return a2 == 0;
}

uint64_t sub_1CC15A490()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1CC15A498()
{
  return 0;
}

uint64_t sub_1CC15A4A4()
{
  return 0;
}

uint64_t sub_1CC15A4AC(uint64_t a1, uint64_t ***a2)
{
  return sub_1CB9091FC(a1 + 8, a2);
}

uint64_t sub_1CC15A4BC()
{
  return 0;
}

uint64_t sub_1CC15A4C4()
{
  return 0;
}

uint64_t sub_1CC15A4CC()
{
  return 0;
}

uint64_t sub_1CC15A4D4()
{
  return 0;
}

uint64_t sub_1CC15A4E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(a4 + 8) >= 0x41u) {
    operator new[]();
  }
  return 0;
}

uint64_t sub_1CC15A568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a4 + 8) > 0x40u) {
    operator new[]();
  }
  sub_1CB90D414((uint64_t)v9, a8);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return 0;
}

uint64_t sub_1CC15A6B4()
{
  return 0;
}

uint64_t sub_1CC15A6BC()
{
  return 0;
}

BOOL sub_1CC15A6C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a3 | a4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = a6 >= 2;
  }
  return !v6;
}

BOOL sub_1CC15A6D8(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return sub_1CD3F7118(a1 + 8, a2, a3);
}

uint64_t sub_1CC15A6E0()
{
  return 1;
}

uint64_t sub_1CC15A6E8()
{
  return 0;
}

uint64_t sub_1CC15A6F0()
{
  return 0;
}

uint64_t sub_1CC15A6F8()
{
  return 0;
}

uint64_t sub_1CC15A700()
{
  return 2;
}

uint64_t sub_1CC15A708()
{
  return 0;
}

uint64_t sub_1CC15A710()
{
  return 0;
}

BOOL sub_1CC15A718(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1CD3F71C0((uint64_t *)(a1 + 8), a2, a3);
}

BOOL sub_1CC15A724(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1CD3F71C0((uint64_t *)(a1 + 8), a2, a3);
}

uint64_t sub_1CC15A730()
{
  return 0;
}

uint64_t sub_1CC15A738()
{
  return 0;
}

uint64_t sub_1CC15A740()
{
  return 0;
}

uint64_t sub_1CC15A748()
{
  return 0;
}

uint64_t sub_1CC15A750()
{
  return 0;
}

uint64_t sub_1CC15A758()
{
  return 0;
}

uint64_t sub_1CC15A760()
{
  return 0;
}

uint64_t sub_1CC15A768()
{
  return 0;
}

uint64_t sub_1CC15A770()
{
  return 0;
}

uint64_t sub_1CC15A778()
{
  return 0;
}

uint64_t sub_1CC15A780()
{
  return 1;
}

uint64_t sub_1CC15A788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a3 | a4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = a6 > 1;
  }
  uint64_t v7 = v6;
  return v7 << 63 >> 63;
}

uint64_t sub_1CC15A7A4()
{
  return 0;
}

uint64_t sub_1CC15A7AC()
{
  return 0;
}

uint64_t sub_1CC15A7B4()
{
  return 1;
}

uint64_t sub_1CC15A7BC()
{
  return 0;
}

uint64_t sub_1CC15A7C4()
{
  return 0;
}

uint64_t sub_1CC15A7CC()
{
  return 1;
}

uint64_t sub_1CC15A7D8()
{
  return 1;
}

uint64_t sub_1CC15A7E0()
{
  return 1;
}

uint64_t sub_1CC15A7E8()
{
  return 0;
}

uint64_t sub_1CC15A7F0()
{
  return 0;
}

uint64_t sub_1CC15A7F8()
{
  return 0;
}

uint64_t sub_1CC15A804()
{
  return 0;
}

uint64_t sub_1CC15A810()
{
  return 0;
}

uint64_t sub_1CC15A818()
{
  return 0;
}

double sub_1CC15A820@<D0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = a1 + 24;
  *(void *)&double result = 0x800000000;
  *(void *)(a1 + 16) = 0x800000000;
  *(_DWORD *)(a1 + 56) = 1;
  *(unsigned char *)(a1 + 60) = 0;
  return result;
}

uint64_t sub_1CC15A848()
{
  return 0;
}

uint64_t sub_1CC15A850()
{
  return 0;
}

uint64_t sub_1CC15A858()
{
  return 0;
}

uint64_t sub_1CC15A860()
{
  return 0;
}

uint64_t sub_1CC15A868()
{
  return 0;
}

uint64_t sub_1CC15A870()
{
  return 0;
}

uint64_t sub_1CC15A878()
{
  return 0;
}

uint64_t sub_1CC15A880()
{
  return 1;
}

uint64_t sub_1CC15A888()
{
  return 1;
}

uint64_t sub_1CC15A894()
{
  return 0;
}

uint64_t sub_1CC15A8A0()
{
  return 1;
}

uint64_t sub_1CC15A8AC()
{
  return 0;
}

uint64_t sub_1CC15A8B8()
{
  return 0;
}

uint64_t sub_1CC15A8C4()
{
  return 8;
}

uint64_t sub_1CC15A8CC(uint64_t a1, uint64_t a2)
{
  return a2;
}

const char *sub_1CC15A8D4(uint64_t a1, int a2)
{
  unsigned int v2 = "Generic::Unknown Register Class";
  if (a2 == 1) {
    unsigned int v2 = "Generic::VectorRC";
  }
  if (a2) {
    return v2;
  }
  else {
    return "Generic::ScalarRC";
  }
}

uint64_t sub_1CC15A900()
{
  return 32;
}

uint64_t sub_1CC15A90C()
{
  return 128;
}

uint64_t sub_1CC15A914()
{
  return 0;
}

uint64_t sub_1CC15A91C()
{
  return 0;
}

uint64_t sub_1CC15A924()
{
  return 0;
}

uint64_t sub_1CC15A92C(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    return 0x100000000;
  }
  else {
    return 0;
  }
}

uint64_t sub_1CC15A93C()
{
  return 0;
}

uint64_t sub_1CC15A944(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t sub_1CC15A950()
{
  return 0;
}

uint64_t sub_1CC15A958()
{
  return 0;
}

uint64_t sub_1CC15A960()
{
  return 0;
}

uint64_t sub_1CC15A968()
{
  return 0;
}

uint64_t sub_1CC15A970()
{
  return 1;
}

uint64_t sub_1CC15A978()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1CC15A980()
{
  return 0;
}

uint64_t sub_1CC15A988()
{
  return 1;
}

uint64_t sub_1CC15A990(uint64_t a1, int a2)
{
  if ((a2 - 19) >= 6) {
    return 1;
  }
  else {
    return 4;
  }
}

uint64_t sub_1CC15A9A8()
{
  return 1;
}

BOOL sub_1CC15A9B4(uint64_t a1, int a2, llvm::Type ***a3, llvm::Type ***a4)
{
  return sub_1CB90CBC0((uint64_t *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1CC15A9BC()
{
  return 1;
}

BOOL sub_1CC15A9C8(uint64_t a1, int a2, int a3)
{
  return a2 != 55 || a3 == 0;
}

uint64_t sub_1CC15A9DC()
{
  return 1;
}

uint64_t sub_1CC15A9E8()
{
  return 1;
}

uint64_t sub_1CC15A9F4()
{
  return 1;
}

uint64_t sub_1CC15AA00()
{
  return 1;
}

uint64_t sub_1CC15AA0C()
{
  return 1;
}

uint64_t sub_1CC15AA18()
{
  return 1;
}

uint64_t sub_1CC15AA24()
{
  return 1;
}

uint64_t sub_1CC15AA30()
{
  return 1;
}

uint64_t sub_1CC15AA3C()
{
  return 1;
}

uint64_t sub_1CC15AA48()
{
  return 1;
}

uint64_t sub_1CC15AA54()
{
  return 1;
}

uint64_t sub_1CC15AA60(uint64_t a1, uint64_t a2)
{
  return sub_1CB90A9F8(a1 + 8, a2);
}

uint64_t sub_1CC15AA68()
{
  return 1;
}

uint64_t sub_1CC15AA74()
{
  return 1;
}

uint64_t sub_1CC15AA7C()
{
  return 0;
}

uint64_t sub_1CC15AA88()
{
  return 0;
}

uint64_t sub_1CC15AA94()
{
  return 0;
}

uint64_t sub_1CC15AA9C()
{
  return 0;
}

uint64_t sub_1CC15AAA4()
{
  return 0;
}

uint64_t sub_1CC15AAAC(int a1, llvm::IntegerType *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a8 & 0xFF00000000) != 0) {
    return llvm::IntegerType::get(this, (llvm::LLVMContext *)(8 * a8));
  }
  else {
    return *(void *)this + 1912;
  }
}

uint64_t sub_1CC15AAD0(int a1, uint64_t a2, llvm::IntegerType *a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  return sub_1CD3F7AB0(a1 + 8, a2, a3, a4, a5, a6, a7, a8, a9);
}

BOOL sub_1CC15AAE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CB90D6C8(a1 + 8, a2, a3);
}

BOOL sub_1CC15AAE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CB90D6C8(a1 + 8, a2, a3);
}

uint64_t sub_1CC15AAF0()
{
  return 0;
}

uint64_t sub_1CC15AAF8()
{
  return 0;
}

uint64_t sub_1CC15AB00()
{
  return 128;
}

uint64_t sub_1CC15AB08()
{
  return 1;
}

uint64_t sub_1CC15AB10()
{
  return 1;
}

uint64_t sub_1CC15AB18()
{
  return 1;
}

uint64_t sub_1CC15AB20()
{
  return 1;
}

uint64_t sub_1CC15AB28()
{
  return 1;
}

uint64_t sub_1CC15AB30()
{
  return 1;
}

uint64_t sub_1CC15AB38(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1CC15AB40(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1CC15AB48()
{
  return 0;
}

uint64_t sub_1CC15AB50()
{
  return 0;
}

uint64_t sub_1CC15AB58()
{
  return 1;
}

uint64_t sub_1CC15AB60()
{
  return 1;
}

uint64_t sub_1CC15AB68()
{
  return 0;
}

uint64_t sub_1CC15AB70()
{
  return 0;
}

uint64_t sub_1CC15AB78()
{
  return 0;
}

uint64_t sub_1CC15AB80(uint64_t a1, uint64_t a2)
{
  v21[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (llvm::DataLayout **)(a1 + 8);
  int v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0)
  {
    BOOL v6 = *(uint64_t **)(a2 - 8);
    unint64_t v5 = v4 & 0x7FFFFFF;
  }
  else
  {
    unint64_t v5 = v4 & 0x7FFFFFF;
    BOOL v6 = (uint64_t *)(a2 - 32 * v5);
  }
  if (v5 >= 5) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v5)
  {
    uint64_t v7 = 32 * v5;
    BOOL v8 = v21;
    do
    {
      uint64_t v9 = *v6;
      v6 += 4;
      *v8++ = v9;
      v7 -= 32;
    }
    while (v7);
  }
  uint64_t v10 = sub_1CC15B330(v3, (int **)a2, (uint64_t)v21, v5, 1);
  BOOL v12 = v10 < 0;
  if (v11) {
    BOOL v12 = v11 < 0;
  }
  if (v12) {
    goto LABEL_15;
  }
  BOOL v13 = v11 < 1;
  if (!v11) {
    BOOL v13 = v10 < 1;
  }
  if (v13) {
    return 0;
  }
LABEL_15:
  int v15 = *(unsigned __int8 *)(a2 + 16);
  if (v15 == 60) {
    return 4;
  }
  uint64_t v16 = *(int **)a2;
  if (v15 == 84)
  {
    uint64_t v17 = *(void *)(a2 - 32);
    if (!v17
      || *(unsigned char *)(v17 + 16)
      || *(void *)(v17 + 24) != *(void *)(a2 + 72)
      || (sub_1CB9091FC((uint64_t)v3, (uint64_t ***)v17) & 1) != 0)
    {
      return 40;
    }
    if (*((unsigned char *)v16 + 8) == 16 && v16) {
      uint64_t v16 = (int *)**((void **)v16 + 2);
    }
  }
  int v18 = v16[2];
  unsigned int v19 = v18;
  if (v16 && (v18 & 0xFE) == 0x12) {
    unsigned int v19 = *(unsigned __int8 *)(*((void *)v16 + 3) + 8);
  }
  if (v19 >= 7) {
    return 1;
  }
  else {
    return 3;
  }
}

uint64_t sub_1CC15AD80()
{
  return 0x200000001;
}

uint64_t sub_1CC15AD8C()
{
  return 0;
}

uint64_t sub_1CC15AD94()
{
  return 1;
}

uint64_t sub_1CC15AD9C()
{
  return 1;
}

uint64_t sub_1CC15ADA4()
{
  return 1;
}

BOOL sub_1CC15ADAC(llvm::DataLayout **a1, uint64_t a2, llvm::Value *this, llvm::Constant **a4, uint64_t a5)
{
  uint64_t v10 = llvm::Value::stripPointerCasts(this);
  if (*((unsigned __int8 *)v10 + 16) >= 4u) {
    int v11 = 0;
  }
  else {
    int v11 = v10;
  }
  BOOL v12 = *a1;
  unsigned int v13 = *(_DWORD *)(*(void *)this + 8);
  if ((v13 & 0xFE) == 0x12) {
    unsigned int v13 = *(_DWORD *)(**(void **)(*(void *)this + 16) + 8);
  }
  uint64_t v14 = *((void *)v12 + 29);
  if (v13 < 0x100) {
    goto LABEL_15;
  }
  unsigned int v15 = v13 >> 8;
  unint64_t v16 = *((unsigned int *)v12 + 60);
  uint64_t v17 = *((void *)v12 + 29);
  if (v16)
  {
    uint64_t v17 = v14;
    unint64_t v18 = v16;
    do
    {
      unint64_t v19 = v18 >> 1;
      uint64_t v20 = v17 + 16 * (v18 >> 1);
      unsigned int v21 = *(_DWORD *)(v20 + 8);
      uint64_t v22 = v20 + 16;
      v18 += ~(v18 >> 1);
      if (v21 < v15) {
        uint64_t v17 = v22;
      }
      else {
        unint64_t v18 = v19;
      }
    }
    while (v18);
  }
  if (v17 == v14 + 16 * v16 || *(_DWORD *)(v17 + 8) != v15) {
LABEL_15:
  }
    uint64_t v17 = v14;
  unsigned int v23 = *(_DWORD *)(v17 + 4);
  unsigned int v78 = v23;
  if (v23 > 0x40) {
    operator new[]();
  }
  unint64_t v77 = 0;
  uint64_t v75 = a4;
  uint64_t v76 = a2 | 4;
  if (a5)
  {
    int v72 = v11;
    unint64_t v24 = 0;
    int v25 = &a4[a5];
    while (1)
    {
      unint64_t v26 = v24;
      unint64_t v27 = v76 & 0xFFFFFFFFFFFFFFF8;
      if ((v76 & 4) == 0 || !v27)
      {
        AggregateElement = *v75;
        if (*v75) {
          BOOL v29 = *((unsigned char *)*v75 + 16) == 16;
        }
        else {
          BOOL v29 = 0;
        }
        if (!v29) {
          AggregateElement = (llvm::Constant *)llvm::Constant::getAggregateElement(AggregateElement, 0);
        }
        int8x8_t v32 = (unsigned int *)*((void *)AggregateElement + 3);
        unint64_t v30 = (unsigned int *)((char *)AggregateElement + 24);
        unsigned int v31 = v32;
        if (v30[2] < 0x41) {
          unsigned int v31 = v30;
        }
        unint64_t v27 = *(void *)(*(void *)(v27 + 16) + 8 * *v31);
      }
      uint8x8_t v33 = (unsigned int *)*a4;
      unsigned int v34 = *((unsigned __int8 *)*a4 + 16);
      if (*a4) {
        BOOL v35 = v34 == 16;
      }
      else {
        BOOL v35 = 0;
      }
      if (!v35)
      {
        if (v34 <= 0x14 && (*(_DWORD *)(*(void *)v33 + 8) & 0xFE) == 18)
        {
          SplatValue = (unsigned int *)llvm::Constant::getSplatValue(*a4, 0);
          if (!SplatValue)
          {
LABEL_79:
            uint8x8_t v33 = 0;
            goto LABEL_38;
          }
        }
        else
        {
          unsigned int v81 = 0;
          unsigned int v80 = (void **)&v81;
          int v37 = sub_1CC189A5C((uint64_t)v79, (uint64_t)v33);
          uint8x8_t v33 = 0;
          if (!v37) {
            goto LABEL_38;
          }
          SplatValue = v81;
          if (!v81) {
            goto LABEL_79;
          }
        }
        if (*((unsigned char *)SplatValue + 16) == 16) {
          uint8x8_t v33 = SplatValue;
        }
        else {
          uint8x8_t v33 = 0;
        }
      }
LABEL_38:
      uint64_t v38 = (llvm::Type *)(v76 & 0xFFFFFFFFFFFFFFF8);
      if ((v76 & 4) != 0 || !v38)
      {
        if (*(unsigned char *)(v27 + 8) == 19) {
          goto LABEL_100;
        }
        unsigned int v42 = *a1;
        if (!v38 || (v76 & 4) == 0)
        {
          __n128 v43 = *v75;
          if (*v75) {
            BOOL v44 = *((unsigned char *)*v75 + 16) == 16;
          }
          else {
            BOOL v44 = 0;
          }
          if (!v44) {
            __n128 v43 = (llvm::Constant *)llvm::Constant::getAggregateElement(v43, 0);
          }
          uint64_t v47 = (unsigned int *)*((void *)v43 + 3);
          uint64_t v45 = (unsigned int *)((char *)v43 + 24);
          long long v46 = v47;
          if (v45[2] < 0x41) {
            long long v46 = v45;
          }
          uint64_t v38 = *(llvm::Type **)(*((void *)v38 + 2) + 8 * *v46);
        }
        unint64_t v48 = (unint64_t)(sub_1CB83544C((uint64_t)v42, (uint64_t)v38) + 7) >> 3;
        char Alignment = llvm::DataLayout::getAlignment(v42, v38, 1);
        unint64_t v24 = ((1 << Alignment) + v48 - 1) & -(1 << Alignment);
        if (!v33)
        {
          if (v26)
          {
LABEL_100:
            BOOL v66 = 1;
            unsigned int v23 = v78;
            goto LABEL_101;
          }
          goto LABEL_70;
        }
        llvm::APInt::sextOrTrunc((uint64_t)(v33 + 6), v23, (uint64_t)&v73);
        unsigned int v50 = v74;
        if (v74 <= 0x40)
        {
          int v73 = (llvm::APInt *)((void)v73 * v24);
          if (v74) {
            goto LABEL_57;
          }
LABEL_87:
          unint64_t v51 = 0;
          goto LABEL_58;
        }
        llvm::APInt::tcMultiplyPart(v73, (unint64_t *)v73, (const unint64_t *)v24, 0, ((unint64_t)v74 + 63) >> 6, ((unint64_t)v74 + 63) >> 6, 0);
        unsigned int v50 = v74;
        if (!v74) {
          goto LABEL_87;
        }
LABEL_57:
        unint64_t v51 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v50;
        if (v50 >= 0x41) {
          BOOL v52 = (llvm::APInt **)((char *)v73 + 8 * (((unint64_t)v50 + 63) >> 6) - 8);
        }
        else {
LABEL_58:
        }
          BOOL v52 = &v73;
        *BOOL v52 = (llvm::APInt *)((unint64_t)*v52 & v51);
        unsigned int v53 = v74;
        uint64_t v54 = v73;
        unsigned int v74 = 0;
        char v55 = v78;
        if (v78 >= 0x41)
        {
          uint64_t v58 = 0;
          char v59 = (unint64_t *)v77;
          unint64_t v60 = ((unint64_t)v78 + 63) >> 6;
          uint64_t v61 = v73;
          unint64_t v62 = v60;
          do
          {
            uint64_t v63 = *(void *)v61;
            uint64_t v61 = (llvm::APInt *)((char *)v61 + 8);
            unint64_t v64 = v63 + *v59;
            BOOL v65 = v64 + 1 <= *v59;
            if (v58)
            {
              ++v64;
              uint64_t v58 = v65;
            }
            else
            {
              uint64_t v58 = v64 < *v59;
            }
            *v59++ = v64;
            --v62;
          }
          while (v62);
          *(void *)(v77 + 8 * (v60 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -v55;
        }
        else
        {
          if (v78) {
            unint64_t v56 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v78;
          }
          else {
            unint64_t v56 = 0;
          }
          unint64_t v77 = v56 & ((unint64_t)v73 + v77);
        }
        if (v53 >= 0x41 && v54) {
          MEMORY[0x1D25D9CB0](v54, 0x1000C8000313F17);
        }
        if (v74 >= 0x41 && v73) {
          MEMORY[0x1D25D9CB0](v73, 0x1000C8000313F17);
        }
        goto LABEL_69;
      }
      long long v39 = v33 + 6;
      if (v33[8] >= 0x41) {
        long long v39 = *(unsigned int **)v39;
      }
      uint64_t v40 = *v39;
      StructLayout = llvm::DataLayout::getStructLayout(*a1, (llvm::StructType *)(v76 & 0xFFFFFFFFFFFFFFF8));
      llvm::APInt::operator+=((uint64_t)&v77, *((void *)StructLayout + v40 + 2));
LABEL_69:
      unint64_t v24 = v26;
LABEL_70:
      ++a4;
      sub_1CB90797C((uint64_t)&v75);
      if (a4 == v25)
      {
        unsigned int v23 = v78;
        if (v78 <= 0x3F)
        {
          uint64_t v68 = (uint64_t)(v77 << -(char)v78) >> -(char)v78;
          uint64_t v67 = v72;
        }
        else
        {
          uint64_t v67 = v72;
          if (v78 == 64) {
            uint64_t v68 = v77;
          }
          else {
            uint64_t v68 = *(void *)v77;
          }
        }
        uint64_t v69 = (unint64_t)v67 | v68;
        BOOL v66 = v24 > 1 || v69 != 0;
        goto LABEL_101;
      }
    }
  }
  BOOL v66 = v11 != 0;
LABEL_101:
  if (v23 >= 0x41 && v77) {
    MEMORY[0x1D25D9CB0](v77, 0x1000C8000313F17);
  }
  return v66;
}

uint64_t sub_1CC15B330(llvm::DataLayout **a1, int **this, uint64_t a3, uint64_t a4, int a5)
{
  BOOL v6 = (llvm::ShuffleVectorInst *)this;
  v69[7] = *MEMORY[0x1E4F143B8];
  unsigned int v8 = *((unsigned __int8 *)this + 16);
  int v9 = v8 - 28;
  if (v8 < 0x1C) {
    goto LABEL_16;
  }
  if (v8 == 33 || v8 == 39) {
    goto LABEL_9;
  }
  if (v8 == 84)
  {
    uint64_t v10 = (uint64_t)*(this - 4);
    if (!v10
      || *(unsigned char *)(v10 + 16)
      || *(int **)(v10 + 24) != this[9]
      || (int v11 = (llvm::ShuffleVectorInst *)this, (*(unsigned char *)(v10 + 33) & 0x20) == 0))
    {
LABEL_9:
      uint64_t v12 = (uint64_t)*(this - 4);
      if (!v12 || *(unsigned char *)(v12 + 16) || *(int **)(v12 + 24) != this[9])
      {
        if (v8 == 84)
        {
          uint64_t v13 = 0;
        }
        else if (v8 == 39)
        {
          uint64_t v13 = (*((_DWORD *)this + 20) + 1);
        }
        else
        {
          uint64_t v13 = 2;
        }
        int v14 = 0;
        int v15 = *((_DWORD *)this + 5);
        uint64_t v16 = -(uint64_t)(v15 & 0x7FFFFFF);
        if (v15 < 0)
        {
          unint64_t v56 = &this[-4 * (v15 & 0x7FFFFFF)];
          uint64_t v57 = (uint64_t)*(v56 - 1);
          if ((v57 & 0xFFFFFFFF0) != 0) {
            int v14 = *((_DWORD *)v56 - 3) - *(_DWORD *)((char *)v56 - v57);
          }
          else {
            int v14 = 0;
          }
        }
        return ((-32 * v13 + 32 * (unint64_t)-v14 - 32 * v16 - 32) >> 5) + 1;
      }
      if (sub_1CB9091FC((uint64_t)a1, (uint64_t ***)*(this - 4))) {
        return *(unsigned int *)(*(void *)(v12 + 24) + 12);
      }
      return 1;
    }
  }
  else
  {
LABEL_16:
    int v11 = 0;
  }
  int v18 = *((_DWORD *)this + 5);
  uint64_t v19 = v18 & 0x7FFFFFF;
  if ((v18 & 0x7FFFFFF) == 1)
  {
    if ((v18 & 0x40000000) != 0) {
      uint64_t v20 = (llvm::Type *****)*(this - 1);
    }
    else {
      uint64_t v20 = (llvm::Type *****)(this - 4);
    }
    unsigned int v21 = **v20;
  }
  else
  {
    unsigned int v21 = 0;
  }
  uint64_t v22 = *this;
  if (v8 <= 0x1B)
  {
    if (v8 != 5) {
      return 1;
    }
    int v9 = *((unsigned __int16 *)this + 9);
  }
  uint64_t v17 = 0;
  switch(v9)
  {
    case 1:
    case 2:
    case 3:
    case 55:
      if (a5) {
        BOOL v33 = v9 == 55;
      }
      else {
        BOOL v33 = 0;
      }
      return !v33;
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
      if ((v18 & 0x40000000) != 0) {
        unsigned int v23 = (uint64_t *)*(this - 1);
      }
      else {
        unsigned int v23 = (uint64_t *)&this[-4 * v19];
      }
      llvm::TargetTransformInfo::getOperandInfo(*v23, v60);
      if (v9 != 12)
      {
        int v25 = *((_DWORD *)v6 + 5);
        if ((v25 & 0x40000000) != 0) {
          unint64_t v26 = (char *)*((void *)v6 - 1);
        }
        else {
          unint64_t v26 = (char *)v6 - 32 * (v25 & 0x7FFFFFF);
        }
        llvm::TargetTransformInfo::getOperandInfo(*((void *)v26 + 4), v62);
      }
      int v27 = *((_DWORD *)v6 + 5);
      if ((v27 & 0x40000000) != 0)
      {
        BOOL v29 = (uint64_t *)*((void *)v6 - 1);
        unint64_t v28 = v27 & 0x7FFFFFF;
      }
      else
      {
        unint64_t v28 = v27 & 0x7FFFFFF;
        BOOL v29 = (uint64_t *)((char *)v6 - 32 * v28);
      }
      uint64_t v63 = (llvm::Type *)&v65;
      uint64_t v64 = 0x200000000;
      if (v28 >= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v28)
      {
        uint64_t v30 = 32 * v28;
        unsigned int v31 = &v65;
        do
        {
          uint64_t v32 = *v29;
          v29 += 4;
          *v31++ = v32;
          v30 -= 32;
        }
        while (v30);
        LODWORD(v64) = v28;
        if ((v9 - 19) >= 6) {
          uint64_t v17 = 1;
        }
        else {
          uint64_t v17 = 4;
        }
        if (v63 != (llvm::Type *)&v65) {
          free(v63);
        }
      }
      else if ((v9 - 19) >= 6)
      {
        return 1;
      }
      else
      {
        return 4;
      }
      return v17;
    case 31:
      if (*((unsigned char *)*(this - 4) + 16) != 16) {
        return 1;
      }
      unsigned int v34 = this[5];
      uint64_t v35 = *(void *)(*((void *)v34 + 7) + 80);
      uint64_t v36 = v35 ? v35 - 24 : 0;
      return v34 != (int *)v36 || (*((_WORD *)this + 9) & 0x40) != 0;
    case 34:
      BOOL v33 = v8 == 62;
      uint64_t v47 = 3;
      if (v33) {
        uint64_t v47 = 8;
      }
      uint64_t v48 = (uint64_t)this[v47];
      if ((v18 & 0x40000000) != 0) {
        uint64_t v49 = (llvm::Value **)*((void *)v6 - 1);
      }
      else {
        uint64_t v49 = (llvm::Value **)((char *)v6 - 32 * v19);
      }
      return sub_1CC15ADAC(a1, v48, *v49, (llvm::Constant **)(a3 + 8), a4 - 1);
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
      if (v8 <= 0x1B) {
        BOOL v6 = 0;
      }
      llvm::TargetTransformInfo::getCastContextHint((uint64_t)v6);
      return sub_1CB90CBC0((uint64_t *)a1, v9, (llvm::Type ***)v22, v21);
    case 56:
      llvm::IntrinsicCostAttributes::IntrinsicCostAttributes((uint64_t)&v63, (*(this - 4))[9], (uint64_t)v11, 0, 1);
      uint64_t v17 = sub_1CB90A9F8((uint64_t)a1, (uint64_t)&v63);
      if (v68 != v69) {
        free(v68);
      }
      if (v66 != &v67) {
        free(v66);
      }
      return v17;
    case 57:
      *(void *)uint64_t v61 = 0;
      *(void *)unint64_t v62 = 0;
      uint64_t v63 = (llvm::Type *)v62;
      uint64_t v64 = (uint64_t)v61;
      if ((sub_1CB90D004((void **)&v63, (uint64_t)this) & 1) != 0
        || (v60[0] = v62, v60[1] = v61, (sub_1CB90D1A4(v60, (uint64_t)v6) & 1) != 0))
      {
        llvm::TargetTransformInfo::getOperandInfo(*(uint64_t *)v62, v60);
        llvm::TargetTransformInfo::getOperandInfo(*(uint64_t *)v61, &v59);
        uint64_t v63 = (llvm::Type *)&v65;
        uint64_t v65 = *(void *)v62;
        BOOL v66 = *(void **)v61;
        uint64_t v64 = 0x200000002;
        sub_1CB90D2C0((uint64_t)v58, (unsigned __int8 *)v6);
        if (v63 != (llvm::Type *)&v65) {
          free(v63);
        }
      }
      return 1;
    case 63:
      if (v8 != 91) {
        return 1;
      }
      LODWORD(v63) = 0;
      LODWORD(v60[0]) = 0;
      int v37 = (uint64_t *)*(this - 8);
      uint64_t v38 = *v37;
      uint64_t v39 = *(unsigned int *)(*v37 + 32);
      uint64_t v40 = *((unsigned int *)this + 18);
      if (v39 != v40)
      {
        if (v39 >= v40
          || (llvm::ShuffleVectorInst::isIdentityWithPadding((llvm::ShuffleVectorInst *)this) & 1) == 0)
        {
          if (*((unsigned char *)v22 + 8) != 19)
          {
            char v55 = (int *)*((void *)v6 + 8);
            if (llvm::ShuffleVectorInst::isExtractSubvectorMask(v55, v40, v39, (int *)v60)) {
              return 1;
            }
            if (*((unsigned char *)v22 + 8) != 19
              && llvm::ShuffleVectorInst::isInsertSubvectorMask(v55, v40, *(_DWORD *)(v38 + 32), &v63, (signed int *)v60))
            {
LABEL_119:
              if ((v22[2] & 0xFE) == 0x12) {
                uint64_t v22 = (int *)**((void **)v22 + 2);
              }
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v22, (llvm::Type *)v63);
              return 1;
            }
          }
          v61[0] = 0;
          if (llvm::ShuffleVectorInst::isReplicationMask(v6, v62, v61))
          {
            unsigned int v51 = *((_DWORD *)v6 + 18);
            if (v51 >= 0x41) {
              operator new[]();
            }
            uint64_t v52 = 0;
            if (v51)
            {
              uint64_t v53 = 0;
              uint64_t v54 = 4 * *((unsigned int *)v6 + 18);
              do
              {
                if (*(_DWORD *)(*((void *)v6 + 8) + 4 * v53) != -1) {
                  v52 |= 1 << v53;
                }
                ++v53;
                v54 -= 4;
              }
              while (v54);
            }
            return 1;
          }
          else if (a5)
          {
            return 1;
          }
          else
          {
            return -1;
          }
        }
        return 0;
      }
      BOOL v41 = this[8];
      if (sub_1CC5D47FC(v41, *(unsigned int *)(*v37 + 32), *(_DWORD *)(*v37 + 32))) {
        return 0;
      }
      if ((llvm::ShuffleVectorInst::isReverseMask(v41, v39) & 1) != 0
        || (llvm::ShuffleVectorInst::isSelectMask(v41, v39) & 1) != 0
        || (llvm::ShuffleVectorInst::isTransposeMask(v41, v39) & 1) != 0
        || (llvm::ShuffleVectorInst::isZeroEltSplatMask(v41, v39) & 1) != 0)
      {
        return 1;
      }
      if (v39)
      {
        char v42 = 0;
        char v43 = 0;
        uint64_t v44 = 4 * v39;
        uint64_t v45 = v41;
        while (1)
        {
          int v46 = *v45;
          if (*v45 != -1)
          {
            v42 |= v46 < (int)v39;
            v43 |= v46 >= (int)v39;
            if (v42 & 1) != 0 && (v43) {
              goto LABEL_85;
            }
          }
          ++v45;
          v44 -= 4;
          if (!v44) {
            goto LABEL_83;
          }
        }
      }
      char v43 = 0;
      char v42 = 0;
LABEL_83:
      uint64_t v17 = 1;
      if ((v42 & 1) == 0 && (v43 & 1) == 0)
      {
LABEL_85:
        if (*((unsigned char *)v22 + 8) == 19
          || !llvm::ShuffleVectorInst::isInsertSubvectorMask(v41, v39, v39, &v63, (signed int *)v60))
        {
          return 1;
        }
        goto LABEL_119;
      }
      return v17;
    case 64:
    case 67:
      return v17;
    default:
      return 1;
  }
}

uint64_t sub_1CC15BC18()
{
  char v3 = 0;
  int v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Recognize reduction patterns.";
  v1.n128_u64[1] = 29;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCC85F0, "costmodel-reduxcost", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC85F0, &dword_1CB82C000);
}

uint64_t llvm::Trace::getFunction(llvm::Trace *this)
{
  return *(void *)(**(void **)this + 56);
}

uint64_t llvm::Trace::getModule(llvm::Trace *this)
{
  return *(void *)(*(void *)(**(void **)this + 56) + 40);
}

void llvm::Trace::print(llvm::Value ***this, llvm::raw_ostream *a2)
{
  int v2 = a2;
  int v4 = (llvm::Value *)*((void *)**this + 7);
  unint64_t v5 = (void *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v5 > 0x15uLL)
  {
    qmemcpy(v5, "; Trace from function ", 22);
    *((void *)a2 + 4) += 22;
    BOOL v6 = a2;
  }
  else
  {
    BOOL v6 = llvm::raw_ostream::write(a2, "; Trace from function ", 0x16uLL);
  }
  if ((*((unsigned char *)v4 + 23) & 0x10) == 0)
  {
    uint64_t v19 = (_WORD *)*((void *)v6 + 4);
    goto LABEL_15;
  }
  uint64_t v7 = ***(void ***)v4;
  uint64_t v8 = *(void *)(v7 + 152);
  uint64_t v9 = *(unsigned int *)(v7 + 168);
  if (v9)
  {
    LODWORD(v10) = (v9 - 1) & ((v4 >> 4) ^ (v4 >> 9));
    int v11 = (llvm::Value **)(v8 + 16 * v10);
    uint64_t v12 = *v11;
    if (*v11 == v4) {
      goto LABEL_11;
    }
    int v13 = 1;
    while (v12 != (llvm::Value *)-4096)
    {
      int v14 = v10 + v13++;
      uint64_t v10 = v14 & (v9 - 1);
      uint64_t v12 = *(llvm::Value **)(v8 + 16 * v10);
      if (v12 == v4)
      {
        int v11 = (llvm::Value **)(v8 + 16 * v10);
        goto LABEL_11;
      }
    }
  }
  int v11 = (llvm::Value **)(v8 + 16 * v9);
LABEL_11:
  int v15 = (size_t *)v11[1];
  size_t v18 = *v15;
  uint64_t v16 = v15 + 2;
  size_t v17 = v18;
  uint64_t v19 = (_WORD *)*((void *)v6 + 4);
  if (v18 <= *((void *)v6 + 3) - (void)v19)
  {
    if (v17)
    {
      memcpy(v19, v16, v17);
      uint64_t v19 = (_WORD *)(*((void *)v6 + 4) + v17);
      *((void *)v6 + 4) = v19;
    }
  }
  else
  {
    BOOL v6 = llvm::raw_ostream::write(v6, (const char *)v16, v17);
    uint64_t v19 = (_WORD *)*((void *)v6 + 4);
  }
LABEL_15:
  if (*((void *)v6 + 3) - (void)v19 > 9uLL)
  {
    v19[4] = 2618;
    *(void *)uint64_t v19 = *(void *)", blocks:\n";
    *((void *)v6 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(v6, ", blocks:\n", 0xAuLL);
  }
  uint64_t v20 = *this;
  unsigned int v21 = this[1];
  if (*this != v21)
  {
    do
    {
      unsigned int v23 = (_WORD *)*((void *)v2 + 4);
      if (*((void *)v2 + 3) - (void)v23 > 1uLL)
      {
        *unsigned int v23 = 8251;
        *((void *)v2 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v2, "; ", 2uLL);
      }
      llvm::Value::printAsOperand(*v20, v2, 1, *(const llvm::Module **)(*((void *)**this + 7) + 40));
      unint64_t v24 = (unsigned char *)*((void *)v2 + 4);
      if (*((unsigned char **)v2 + 3) == v24)
      {
        llvm::raw_ostream::write(v2, "\n", 1uLL);
      }
      else
      {
        *unint64_t v24 = 10;
        ++*((void *)v2 + 4);
      }
      ++v20;
    }
    while (v20 != v21);
  }
  uint64_t v22 = (void *)*((void *)v2 + 4);
  if (*((void *)v2 + 3) - (void)v22 > 0x19uLL)
  {
    qmemcpy(v22, "; Trace parent function: \n", 26);
    *((void *)v2 + 4) += 26;
  }
  else
  {
    int v2 = llvm::raw_ostream::write(v2, "; Trace parent function: \n", 0x1AuLL);
  }

  llvm::Value::print(v4, v2, 0);
}

void llvm::Trace::dump(llvm::Trace *this)
{
  int v2 = llvm::dbgs(this);

  llvm::Trace::print((llvm::Value ***)this, v2);
}

uint64_t llvm::TypeBasedAAResult::alias(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (byte_1EBD04B38) {
    return ((uint64_t (*)(void, void, void))loc_1CC15C65C)(*(void *)(a2 + 16), *(void *)(a3 + 16), 0);
  }
  else {
    return 1;
  }
}

void llvm::TypeBasedAAResult::Aliases()
{
}

BOOL llvm::TypeBasedAAResult::pointsToConstantMemory(uint64_t a1, uint64_t a2)
{
  if (!byte_1EBD04B38) {
    return 0;
  }
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *(unsigned int *)(v2 + 8);
  unint64_t v5 = (unsigned __int8 **)(v2 - 8 * v4);
  if (**v5 - 4 >= 0x1F)
  {
    if (v4 < 3) {
      return 0;
    }
    BOOL v6 = v5[2];
    if (*v6 != 1) {
      return 0;
    }
    uint64_t v7 = *((void *)v6 + 16);
    if (*(unsigned char *)(v7 + 16) != 16) {
      return 0;
    }
    uint64_t v8 = (void *)(v7 + 24);
    if (*(_DWORD *)(v7 + 32) >= 0x41u) {
      uint64_t v8 = (void *)*v8;
    }
    return (*(unsigned char *)v8 & 1) != 0;
  }
  if (v4 >= 3)
  {
    uint64_t v9 = *(void *)(a2 + 16);
    if (sub_1CC15C0DC((uint64_t)&v9)) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1CC15C0DC(uint64_t a1)
{
  if (sub_1CC15D024(a1)) {
    unsigned int v2 = 4;
  }
  else {
    unsigned int v2 = 3;
  }
  uint64_t v3 = *(unsigned int *)(*(void *)a1 + 8);
  if (v3 <= v2) {
    return 0;
  }
  uint64_t v4 = *(void *)(*(void *)a1 - 8 * v3 + 8 * v2);
  if (*(unsigned char *)v4 != 1) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 128);
  if (*(unsigned char *)(v5 + 16) != 16) {
    return 0;
  }
  BOOL v6 = (void *)(v5 + 24);
  if (*(_DWORD *)(v5 + 32) >= 0x41u) {
    BOOL v6 = (void *)*v6;
  }
  return *(unsigned char *)v6 & 1;
}

uint64_t llvm::TypeBasedAAResult::getModRefBehavior(llvm::TypeBasedAAResult *this, const llvm::CallBase *a2)
{
  if (!byte_1EBD04B38 || (*((unsigned char *)a2 + 23) & 0x20) == 0) {
    return 63;
  }
  uint64_t v3 = ***(void ***)a2;
  int v27 = a2;
  int v4 = *(_DWORD *)(v3 + 2496);
  if (!v4)
  {
    int v25 = 0;
LABEL_35:
    uint64_t v8 = (const llvm::CallBase **)sub_1CC609054(v3 + 2480, (uint64_t)&v27, (uint64_t *)&v27, v25);
    unint64_t v26 = v27;
    void v8[3] = 0;
    v8[4] = 0;
    void *v8 = v26;
    v8[1] = (const llvm::CallBase *)(v8 + 3);
    v8[2] = (const llvm::CallBase *)0x100000000;
    goto LABEL_6;
  }
  uint64_t v5 = *(void *)(v3 + 2480);
  int v6 = v4 - 1;
  unsigned int v7 = v6 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v8 = (const llvm::CallBase **)(v5 + 40 * v7);
  uint64_t v9 = *v8;
  if (*v8 != a2)
  {
    int v13 = 0;
    int v14 = 1;
    while (v9 != (const llvm::CallBase *)-4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v9 == (const llvm::CallBase *)-8192;
      }
      if (v15) {
        int v13 = v8;
      }
      unsigned int v16 = v7 + v14++;
      unsigned int v7 = v16 & v6;
      uint64_t v8 = (const llvm::CallBase **)(v5 + 40 * v7);
      uint64_t v9 = *v8;
      if (*v8 == a2) {
        goto LABEL_6;
      }
    }
    if (v13) {
      int v25 = v13;
    }
    else {
      int v25 = v8;
    }
    goto LABEL_35;
  }
LABEL_6:
  uint64_t v10 = *((unsigned int *)v8 + 4);
  if (!v10) {
    return 63;
  }
  int v11 = (void *)((char *)v8[1] + 8);
  uint64_t v12 = 16 * v10;
  uint64_t result = 63;
  while (*((_DWORD *)v11 - 2) != 1)
  {
    v11 += 2;
    v12 -= 16;
    if (!v12) {
      return result;
    }
  }
  uint64_t v17 = *v11;
  if (!v17) {
    return 63;
  }
  uint64_t v18 = v17;
  char v19 = sub_1CB8F0DA8(*(unsigned char **)(v17 - 8 * *(unsigned int *)(v17 + 8)));
  uint64_t v20 = *(unsigned int *)(v18 + 8);
  uint64_t v21 = -v20;
  if (v19) {
    goto LABEL_39;
  }
  if (v20 < 3) {
    goto LABEL_39;
  }
  uint64_t v22 = *(void *)(v18 - 8 * v20 + 16);
  if (*(unsigned char *)v22 != 1) {
    goto LABEL_39;
  }
  uint64_t v23 = *(void *)(v22 + 128);
  if (*(unsigned char *)(v23 + 16) != 16) {
    goto LABEL_39;
  }
  unint64_t v24 = (void *)(v23 + 24);
  if (*(_DWORD *)(v23 + 32) >= 0x41u) {
    unint64_t v24 = (void *)*v24;
  }
  if ((*(unsigned char *)v24 & 1) == 0)
  {
LABEL_39:
    if (!sub_1CB8F0DA8(*(unsigned char **)(v18 + 8 * v21))) {
      return 63;
    }
    if (*(_DWORD *)(v18 + 8) < 3u) {
      return 63;
    }
    int v27 = (const llvm::CallBase *)v18;
    if ((sub_1CC15C0DC((uint64_t)&v27) & 1) == 0) {
      return 63;
    }
  }
  return 61;
}

uint64_t llvm::TypeBasedAAResult::getModRefBehavior(llvm::TypeBasedAAResult *this, const Function *a2)
{
  return 63;
}

uint64_t llvm::TypeBasedAAResult::getModRefInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!byte_1EBD04B38) {
    return 7;
  }
  uint64_t v3 = *(void *)(a3 + 16);
  if (!v3 || (*(unsigned char *)(a2 + 23) & 0x20) == 0) {
    return 7;
  }
  uint64_t v5 = ***(void ***)a2;
  uint64_t v21 = a2;
  int v6 = *(_DWORD *)(v5 + 2496);
  if (!v6)
  {
    char v19 = 0;
LABEL_27:
    uint64_t v10 = sub_1CC609054(v5 + 2480, (uint64_t)&v21, &v21, v19);
    uint64_t v20 = v21;
    v10[3] = 0;
    uint64_t v10[4] = 0;
    *uint64_t v10 = v20;
    v10[1] = v10 + 3;
    void v10[2] = 0x100000000;
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(v5 + 2480);
  int v8 = v6 - 1;
  unsigned int v9 = v8 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v10 = (void *)(v7 + 40 * v9);
  uint64_t v11 = *v10;
  if (*v10 != a2)
  {
    BOOL v15 = 0;
    int v16 = 1;
    while (v11 != -4096)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v11 == -8192;
      }
      if (v17) {
        BOOL v15 = v10;
      }
      unsigned int v18 = v9 + v16++;
      unsigned int v9 = v18 & v8;
      uint64_t v10 = (void *)(v7 + 40 * v9);
      uint64_t v11 = *v10;
      if (*v10 == a2) {
        goto LABEL_7;
      }
    }
    if (v15) {
      char v19 = v15;
    }
    else {
      char v19 = v10;
    }
    goto LABEL_27;
  }
LABEL_7:
  uint64_t v12 = *((unsigned int *)v10 + 4);
  if (!v12) {
    return 7;
  }
  int v13 = (void *)(v10[1] + 8);
  uint64_t v14 = 16 * v12;
  while (*((_DWORD *)v13 - 2) != 1)
  {
    v13 += 2;
    v14 -= 16;
    if (!v14) {
      return 7;
    }
  }
  if (!*v13 || ((uint64_t (*)(uint64_t, void, void))loc_1CC15C65C)(v3, *v13, 0)) {
    return 7;
  }
  return 4;
}

uint64_t llvm::TypeBasedAAResult::getModRefInfo(int a1, uint64_t a2, llvm::Instruction *this)
{
  if (!byte_1EBD04B38 || (*(unsigned char *)(a2 + 23) & 0x20) == 0) {
    return 7;
  }
  uint64_t v5 = ***(void ***)a2;
  uint64_t v24 = a2;
  int v6 = *(_DWORD *)(v5 + 2496);
  if (!v6)
  {
    uint64_t v21 = 0;
LABEL_28:
    uint64_t v10 = sub_1CC609054(v5 + 2480, (uint64_t)&v24, &v24, v21);
    uint64_t v22 = v24;
    v10[3] = 0;
    uint64_t v10[4] = 0;
    *uint64_t v10 = v22;
    v10[1] = v10 + 3;
    void v10[2] = 0x100000000;
    goto LABEL_6;
  }
  uint64_t v7 = *(void *)(v5 + 2480);
  int v8 = v6 - 1;
  unsigned int v9 = v8 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v10 = (void *)(v7 + 40 * v9);
  uint64_t v11 = *v10;
  if (*v10 != a2)
  {
    BOOL v15 = 0;
    int v16 = 1;
    while (v11 != -4096)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v11 == -8192;
      }
      if (v17) {
        BOOL v15 = v10;
      }
      unsigned int v18 = v9 + v16++;
      unsigned int v9 = v18 & v8;
      uint64_t v10 = (void *)(v7 + 40 * v9);
      uint64_t v11 = *v10;
      if (*v10 == a2) {
        goto LABEL_6;
      }
    }
    if (v15) {
      uint64_t v21 = v15;
    }
    else {
      uint64_t v21 = v10;
    }
    goto LABEL_28;
  }
LABEL_6:
  uint64_t v12 = *((unsigned int *)v10 + 4);
  if (!v12) {
    return 7;
  }
  int v13 = (void *)(v10[1] + 8);
  uint64_t v14 = 16 * v12;
  uint64_t result = 7;
  while (*((_DWORD *)v13 - 2) != 1)
  {
    v13 += 2;
    v14 -= 16;
    if (!v14) {
      return result;
    }
  }
  uint64_t v19 = *v13;
  if (!v19) {
    return 7;
  }
  uint64_t v23 = v19;
  if (!*((void *)this + 6) && (*((unsigned char *)this + 23) & 0x20) == 0) {
    return 7;
  }
  uint64_t MetadataImpl = llvm::Instruction::getMetadataImpl(this, 1);
  if (!MetadataImpl
    || ((uint64_t (*)(uint64_t, uint64_t, void))loc_1CC15C65C)(v23, MetadataImpl, 0))
  {
    return 7;
  }
  return 4;
}

uint64_t llvm::MDNode::getMostGenericTBAA(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  ((void (*)(uint64_t, uint64_t, uint64_t *))loc_1CC15C65C)(a1, a2, &v3);
  return v3;
}

void llvm::TypeBasedAA::run(void *a1@<X8>)
{
  *a1 = 0;
}

void sub_1CC15CAB0()
{
}

void llvm::TypeBasedAAWrapperPass::doInitialization(llvm::TypeBasedAAWrapperPass *this, llvm::Module *a2)
{
}

uint64_t llvm::TypeBasedAAWrapperPass::doFinalization(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    MEMORY[0x1D25D9CE0](v2, 0x20C4093837F09);
  }
  return 0;
}

llvm::MDNode *llvm::AAMDNodes::shiftTBAAStruct(llvm::AAMDNodes *this, llvm::MDNode *a2, const llvm::APInt *a3)
{
  Impl = this;
  v38[3] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v36 = v38;
    uint64_t v37 = 0x300000000;
    unint64_t v5 = *((unsigned int *)this + 2);
    if (v5)
    {
      unsigned int v7 = 0;
      for (unint64_t i = 0; i < v5; i += 3)
      {
        unsigned int v9 = (void *)((char *)Impl + 8 * i + -8 * *((unsigned int *)Impl + 2));
        uint64_t v10 = *(void *)(*v9 + 128);
        uint64_t v11 = (char ***)(v10 + 24);
        unsigned int v12 = *(_DWORD *)(v10 + 32);
        int v13 = (char **)(v10 + 24);
        if (v12 >= 0x41) {
          int v13 = *v11;
        }
        uint64_t v14 = *(void *)(v9[1] + 128);
        if (*(_DWORD *)(v14 + 32) > 0x40u) {
          unint64_t v15 = **(void **)(v14 + 24);
        }
        else {
          unint64_t v15 = *(void *)(v14 + 24);
        }
        if (&(*v13)[v15] > (char *)a2)
        {
          if (v12 > 0x40) {
            int v16 = **v11;
          }
          else {
            int v16 = (char *)*v11;
          }
          int64_t v17 = v16 - (char *)a2;
          if (v16 < (char *)a2)
          {
            int64_t v17 = 0;
            unint64_t v15 = (unint64_t)&v16[v15 - (void)a2];
          }
          unsigned int v18 = **(llvm::ConstantInt ***)v10;
          unsigned int v19 = *(_DWORD *)(*(void *)v10 + 8);
          unsigned int v35 = v19 >> 8;
          if (v19 >> 8 > 0x40) {
            operator new[]();
          }
          if (v19 <= 0xFF) {
            unint64_t v20 = 0;
          }
          else {
            unint64_t v20 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v19) + 63);
          }
          unint64_t v34 = v20 & v17;
          uint64_t v22 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v18, (llvm::LLVMContext *)&v34, a3);
          if (v35 >= 0x41 && v34) {
            MEMORY[0x1D25D9CB0](v34, 0x1000C8000313F17);
          }
          uint64_t v24 = llvm::ValueAsMetadata::get(v22, v21);
          if (v37 >= (unint64_t)HIDWORD(v37)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v36 + v37) = v24;
          LODWORD(v37) = v37 + 1;
          int v25 = **(llvm::ConstantInt ***)v14;
          unsigned int v26 = *(_DWORD *)(*(void *)v14 + 8);
          unsigned int v35 = v26 >> 8;
          if (v26 >> 8 > 0x40) {
            operator new[]();
          }
          if (v26 <= 0xFF) {
            unint64_t v27 = 0;
          }
          else {
            unint64_t v27 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v26) + 63);
          }
          unint64_t v34 = v27 & v15;
          BOOL v29 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v25, (llvm::LLVMContext *)&v34, v23);
          if (v35 >= 0x41 && v34) {
            MEMORY[0x1D25D9CB0](v34, 0x1000C8000313F17);
          }
          uint64_t v30 = llvm::ValueAsMetadata::get(v29, v28);
          if (v37 >= (unint64_t)HIDWORD(v37)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v36 + v37) = v30;
          unsigned int v31 = v37 + 1;
          LODWORD(v37) = v31;
          if (v31 >= HIDWORD(v37)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v36 + v31) = *((void *)Impl + i - *((unsigned int *)Impl + 2) + 2);
          unsigned int v7 = v37 + 1;
          LODWORD(v37) = v37 + 1;
        }
      }
    }
    else
    {
      unsigned int v7 = 0;
    }
    uint64_t v32 = *((void *)Impl + 2);
    BOOL v33 = (void *)(v32 & 0xFFFFFFFFFFFFFFF8);
    if ((v32 & 4) != 0) {
      BOOL v33 = (void *)*v33;
    }
    Impl = llvm::MDTuple::getImpl((uint64_t)v33, v36, v7, 0, 1);
    if (v36 != v38) {
      free(v36);
    }
  }
  return Impl;
}

BOOL sub_1CC15D024(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(*(void *)a1 + 8);
  if (v1 < 4) {
    return 0;
  }
  uint64_t v3 = *(unsigned __int8 **)(*(void *)a1 - 8 * v1 + 8);
  if (!v3 || *v3 - 4 > 0x1E) {
    return 1;
  }
  uint64_t v4 = *((unsigned int *)v3 + 2);
  if (v4 < 3) {
    return 0;
  }
  return **(unsigned __int8 **)&v3[-8 * v4] - 4 < 0x1F;
}

void sub_1CC15D088(llvm::Pass *this)
{
  *(void *)this = &unk_1F2608270;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    MEMORY[0x1D25D9CE0](v2, 0x20C4093837F09);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CC15D0F8(llvm::Pass *this)
{
  *(void *)this = &unk_1F2608270;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    MEMORY[0x1D25D9CE0](v2, 0x20C4093837F09);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC15D17C(uint64_t a1, llvm::MDNode *a2, uint64_t a3, llvm::MDNode **a4, BOOL *a5)
{
  uint64_t v41 = a1;
  unsigned int v9 = (unsigned __int8 **)(a1 - 8 * *(unsigned int *)(a1 + 8));
  uint64_t v10 = v9[1];
  if (v10)
  {
    switch(*v10)
    {
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
        uint64_t v11 = v9[1];
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    uint64_t v11 = 0;
  }
  unsigned int v12 = *v9;
  if (*v9)
  {
    switch(*v12)
    {
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
        int v13 = *v9;
        break;
      default:
        goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    int v13 = 0;
  }
  if (v11 == v13)
  {
    if (v10)
    {
      switch(*v10)
      {
        case 4u:
        case 5u:
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xAu:
        case 0xBu:
        case 0xCu:
        case 0xDu:
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
        case 0x17u:
        case 0x18u:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
        case 0x1Cu:
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
        case 0x20u:
        case 0x21u:
        case 0x22u:
          uint64_t v14 = v9[1];
          break;
        default:
          goto LABEL_13;
      }
    }
    else
    {
LABEL_13:
      uint64_t v14 = 0;
    }
    if (v14 == (unsigned __int8 *)a3) {
      goto LABEL_68;
    }
  }
  uint64_t result = sub_1CC15D024((uint64_t)&v41);
  if (v12)
  {
    switch(*v12)
    {
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
        break;
      default:
        unsigned int v12 = 0;
        break;
    }
  }
  uint64_t v16 = *((void *)v9[2] + 16);
  int64_t v17 = (void *)(v16 + 24);
  if (*(_DWORD *)(v16 + 32) >= 0x41u) {
    int64_t v17 = (void *)*v17;
  }
  if (!v12)
  {
LABEL_60:
    if (!result) {
      return result;
    }
    unsigned int v12 = 0;
    unint64_t v20 = (unsigned char *)*((void *)a2 - *((unsigned int *)a2 + 2));
LABEL_62:
    if (v20) {
      uint64_t v36 = *v20 - 4 >= 0x1F ? 0 : v20;
    }
    else {
      uint64_t v36 = 0;
    }
    uint64_t result = sub_1CC15DF9C((uint64_t)v12, v36);
    if (!result) {
      return result;
    }
LABEL_68:
    BOOL v37 = 1;
    if (a4) {
      goto LABEL_69;
    }
    goto LABEL_71;
  }
  unsigned int v18 = (void *)*v17;
  unsigned int v19 = (char *)a2 - 8 * *((unsigned int *)a2 + 2);
  unint64_t v20 = *(unsigned char **)v19;
  if (!*(void *)v19) {
    goto LABEL_24;
  }
LABEL_22:
  switch(*v20)
  {
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
      uint64_t v21 = *(unsigned __int8 **)v19;
      break;
    default:
      goto LABEL_24;
  }
  while (v12 != v21)
  {
    if (result)
    {
      if (v10)
      {
        switch(*v10)
        {
          case 4u:
          case 5u:
          case 6u:
          case 7u:
          case 8u:
          case 9u:
          case 0xAu:
          case 0xBu:
          case 0xCu:
          case 0xDu:
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x15u:
          case 0x16u:
          case 0x17u:
          case 0x18u:
          case 0x19u:
          case 0x1Au:
          case 0x1Bu:
          case 0x1Cu:
          case 0x1Du:
          case 0x1Eu:
          case 0x1Fu:
          case 0x20u:
          case 0x21u:
          case 0x22u:
            uint64_t v22 = v10;
            break;
          default:
            goto LABEL_30;
        }
      }
      else
      {
LABEL_30:
        uint64_t v22 = 0;
      }
      if (v12 == v22) {
        goto LABEL_62;
      }
    }
    uint64_t v23 = *((unsigned int *)v12 + 2);
    if (v23 < 3)
    {
      if (v23 != 2) {
        goto LABEL_60;
      }
      uint64_t v24 = 0;
      uint64_t v25 = -2;
LABEL_35:
      unsigned int v12 = *(unsigned __int8 **)&v12[8 * v25 + 8];
      if (!v12 || *v12 - 4 >= 0x1F) {
        goto LABEL_60;
      }
      goto LABEL_53;
    }
    unsigned int v26 = &v12[-8 * v23];
    if (**(unsigned __int8 **)v26 - 4 <= 0x1E)
    {
      if (v23 >= 6)
      {
        int v27 = 3;
        unsigned int v28 = 3;
        goto LABEL_41;
      }
      goto LABEL_60;
    }
    if (v23 <= 3)
    {
      uint64_t v34 = *(void *)(*((void *)v26 + 2) + 128);
      unsigned int v35 = (void *)(v34 + 24);
      if (*(_DWORD *)(v34 + 32) >= 0x41u) {
        unsigned int v35 = (void *)*v35;
      }
      uint64_t v25 = -v23;
      uint64_t v24 = (void *)*v35;
      goto LABEL_35;
    }
    unsigned int v28 = 1;
    int v27 = 2;
    while (1)
    {
LABEL_41:
      uint64_t v29 = *(void *)(*(void *)&v26[8 * v28 + 8] + 128);
      uint64_t v30 = (void *)(v29 + 24);
      if (*(_DWORD *)(v29 + 32) >= 0x41u) {
        uint64_t v30 = (void *)*v30;
      }
      if (*v30 > (unint64_t)v18) {
        break;
      }
      v28 += v27;
      if (v28 >= v23) {
        goto LABEL_47;
      }
    }
    unsigned int v31 = v28 - v27;
    if (v31) {
      goto LABEL_48;
    }
LABEL_47:
    unsigned int v31 = v23 - v27;
LABEL_48:
    uint64_t v32 = *(void *)(*(void *)&v26[8 * v31 + 8] + 128);
    BOOL v33 = (void *)(v32 + 24);
    if (*(_DWORD *)(v32 + 32) >= 0x41u) {
      BOOL v33 = (void *)*v33;
    }
    unsigned int v12 = *(unsigned __int8 **)&v26[8 * v31];
    if (!v12 || *v12 - 4 > 0x1E) {
      goto LABEL_60;
    }
    uint64_t v24 = (void *)*v33;
LABEL_53:
    unsigned int v18 = (void *)((char *)v18 - (uint64_t)v24);
    if (v20) {
      goto LABEL_22;
    }
LABEL_24:
    uint64_t v21 = 0;
  }
  uint64_t v38 = *(void *)(*((void *)v19 + 2) + 128);
  uint64_t v39 = (void *)(v38 + 24);
  if (*(_DWORD *)(v38 + 32) >= 0x41u) {
    uint64_t v39 = (void *)*v39;
  }
  uint64_t v40 = (void *)*v39;
  BOOL v37 = v18 == v40;
  if (!a4) {
    goto LABEL_71;
  }
  if (v18 == v40)
  {
    BOOL v37 = 1;
    goto LABEL_70;
  }
  BOOL v37 = 0;
LABEL_69:
  a2 = sub_1CC15D868(a3);
LABEL_70:
  *a4 = a2;
LABEL_71:
  *a5 = v37;
  return 1;
}

llvm::MDNode *sub_1CC15D868(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) < 2u) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (void *)*v4;
  }
  unint64_t v5 = (llvm::ConstantInt *)(*v4 + 1984);
  int v6 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v5, 0, 0);
  uint64_t v8 = llvm::ValueAsMetadata::get(v6, v7);
  uint64_t v9 = v8;
  uint64_t v10 = *(unsigned int *)(a1 + 8);
  if (v10 < 3 || **(unsigned __int8 **)(a1 - 8 * v10) - 4 > 0x1E)
  {
    uint64_t v17 = a1;
    uint64_t v18 = a1;
    uint64_t v19 = v8;
    uint64_t v16 = *(void *)(a1 + 16);
    uint64_t v14 = (void *)(v16 & 0xFFFFFFFFFFFFFFF8);
    if ((v16 & 4) != 0) {
      uint64_t v14 = (void *)*v14;
    }
    uint64_t v15 = 3;
  }
  else
  {
    uint64_t v11 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v5, 0xFFFFFFFFFFFFFFFFLL, 0);
    uint64_t v17 = a1;
    uint64_t v18 = a1;
    uint64_t v19 = v9;
    uint64_t v20 = llvm::ValueAsMetadata::get(v11, v12);
    uint64_t v13 = *(void *)(a1 + 16);
    uint64_t v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFF8);
    if ((v13 & 4) != 0) {
      uint64_t v14 = (void *)*v14;
    }
    uint64_t v15 = 4;
  }
  return llvm::MDTuple::getImpl((uint64_t)v14, &v17, v15, 0, 1);
}

BOOL sub_1CC15D990(uint64_t a1, uint64_t *a2)
{
  sub_1CC15DBB8(a1, a2, (uint64_t)v8);
  int v4 = v9;
  if (v9)
  {
    uint64_t v5 = *a2;
    unsigned int v6 = *(_DWORD *)(a1 + 48);
    if (v6 >= *(_DWORD *)(a1 + 52)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 40) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 48);
  }
  return v4 != 0;
}

unsigned char *sub_1CC15DA20(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(unsigned int *)(*a1 + 8);
  if (v2 >= 3)
  {
    uint64_t result = *(unsigned char **)(v1 - 8 * v2);
    if (*result - 4 < 0x1F) {
      return result;
    }
    uint64_t v3 = -v2;
  }
  else
  {
    if (v2 != 2) {
      return 0;
    }
    uint64_t v3 = -2;
  }
  uint64_t result = *(unsigned char **)(v1 + 8 * v3 + 8);
  if (result)
  {
    switch(*result)
    {
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
        return result;
      default:
        return 0;
    }
  }
  return result;
}

uint64_t sub_1CC15DB20(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = result + 8;
  if (*(unsigned char *)result)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      unsigned int v7 = 0;
      goto LABEL_15;
    }
    uint64_t v3 = *(void *)(result + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    unsigned __int8 v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        unsigned __int8 v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      unsigned int v7 = (void *)(v3 + 8 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_15;
      }
    }
    if (v9) {
      unsigned int v7 = v9;
    }
  }
LABEL_15:
  *a3 = v7;
  return result;
}

uint64_t sub_1CC15DBB8@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v7 = result + 8;
  unsigned int v6 = *(_DWORD *)result;
  int v8 = *(_DWORD *)result & 1;
  if (v8)
  {
    int v9 = 4;
    uint64_t v10 = result + 8;
  }
  else
  {
    int v9 = *(_DWORD *)(result + 16);
    if (!v9)
    {
      uint64_t v13 = 0;
      unsigned int v19 = 0;
      goto LABEL_18;
    }
    uint64_t v10 = *(void *)(result + 8);
  }
  int v11 = v9 - 1;
  unsigned int v12 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v9 - 1);
  uint64_t v13 = (uint64_t *)(v10 + 8 * v12);
  uint64_t v14 = *v13;
  if (*a2 == *v13)
  {
LABEL_12:
    if (v8)
    {
      uint64_t v18 = 4;
    }
    else
    {
      uint64_t v7 = *(void *)(v4 + 8);
      uint64_t v18 = *(unsigned int *)(v4 + 16);
    }
    char v22 = 0;
    uint64_t v21 = v7 + 8 * v18;
    goto LABEL_26;
  }
  uint64_t v15 = 0;
  uint64_t result = 1;
  while (v14 != -4096)
  {
    if (v15) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = v14 == -8192;
    }
    if (v16) {
      uint64_t v15 = v13;
    }
    int v17 = v12 + result;
    uint64_t result = (result + 1);
    unsigned int v12 = v17 & v11;
    uint64_t v13 = (uint64_t *)(v10 + 8 * (v17 & v11));
    uint64_t v14 = *v13;
    if (*a2 == *v13) {
      goto LABEL_12;
    }
  }
  if (v15) {
    uint64_t v13 = v15;
  }
  if (v8) {
    unsigned int v19 = 4;
  }
  else {
    unsigned int v19 = *(_DWORD *)(v4 + 16);
  }
LABEL_18:
  if (4 * (v6 >> 1) + 4 < 3 * v19)
  {
    if (v19 + ~(v6 >> 1) - *(_DWORD *)(v4 + 4) <= v19 >> 3)
    {
      sub_1CC15DE20(v4, v19);
      unsigned int v31 = 0;
      uint64_t result = sub_1CC15DB20(v4, *a2, &v31);
      uint64_t v13 = v31;
      unsigned int v6 = *(_DWORD *)v4;
      int v8 = *(_DWORD *)v4 & 1;
    }
    goto LABEL_21;
  }
  uint64_t result = (uint64_t)sub_1CC15DE20(v4, 2 * v19);
  unsigned int v6 = *(_DWORD *)v4;
  if (*(_DWORD *)v4)
  {
    int v23 = 4;
    uint64_t v24 = v7;
    goto LABEL_31;
  }
  int v23 = *(_DWORD *)(v4 + 16);
  if (v23)
  {
    uint64_t v24 = *(void *)(v4 + 8);
LABEL_31:
    int v8 = *(_DWORD *)v4 & 1;
    int v25 = v23 - 1;
    unsigned int v26 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v23 - 1);
    uint64_t v13 = (uint64_t *)(v24 + 8 * v26);
    uint64_t v27 = *v13;
    if (*a2 != *v13)
    {
      unsigned int v28 = 0;
      uint64_t result = 1;
      while (v27 != -4096)
      {
        if (v28) {
          BOOL v29 = 0;
        }
        else {
          BOOL v29 = v27 == -8192;
        }
        if (v29) {
          unsigned int v28 = v13;
        }
        int v30 = v26 + result;
        uint64_t result = (result + 1);
        unsigned int v26 = v30 & v25;
        uint64_t v13 = (uint64_t *)(v24 + 8 * (v30 & v25));
        uint64_t v27 = *v13;
        if (*a2 == *v13) {
          goto LABEL_21;
        }
      }
      if (v28) {
        uint64_t v13 = v28;
      }
    }
    goto LABEL_21;
  }
  int v8 = 0;
  uint64_t v13 = 0;
LABEL_21:
  *(_DWORD *)uint64_t v4 = (v6 & 0xFFFFFFFE | v8) + 2;
  if (*v13 != -4096) {
    --*(_DWORD *)(v4 + 4);
  }
  *uint64_t v13 = *a2;
  if (*(unsigned char *)v4)
  {
    uint64_t v20 = 4;
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 8);
    uint64_t v20 = *(unsigned int *)(v4 + 16);
  }
  uint64_t v21 = v7 + 8 * v20;
  char v22 = 1;
LABEL_26:
  *(void *)a3 = v13;
  *(void *)(a3 + 8) = v21;
  *(unsigned char *)(a3 + 16) = v22;
  return result;
}

int *sub_1CC15DE20(uint64_t a1, unsigned int a2)
{
  void v14[4] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    int v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CC06482C((int *)a1, v11, &v11[v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  unsigned int v6 = v14;
  for (uint64_t i = 8; i != 40; i += 8)
  {
    uint64_t v8 = *(void *)(a1 + i);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v6++ = v8;
    }
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CC06482C((int *)a1, v14, v6);
}

uint64_t sub_1CC15DF9C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  unsigned int v4 = 2;
  if (v3 >= 3)
  {
    if (**(unsigned __int8 **)(a1 - 8 * v3) - 4 >= 0x1F) {
      int v5 = -1;
    }
    else {
      int v5 = -3;
    }
    if (**(unsigned __int8 **)(a1 - 8 * v3) - 4 >= 0x1F) {
      unsigned int v4 = 2;
    }
    else {
      unsigned int v4 = 3;
    }
  }
  else
  {
    int v5 = -1;
  }
  unsigned int v6 = v5 + v3;
  if (v4 > v6) {
    return 0;
  }
  int v7 = 0;
  uint64_t v8 = (unsigned __int8 **)(a1 - 8 * v3);
  int v9 = v6 / v4;
  while (1)
  {
    if (v3 >= 3)
    {
      unsigned int v12 = **v8 - 4;
      BOOL v13 = v12 >= 0x1F;
      int v11 = v12 >= 0x1F ? 1 : 3;
      int v10 = v13 ? 2 : 3;
    }
    else
    {
      int v10 = 2;
      int v11 = 1;
    }
    uint64_t v14 = v8[v11 + v10 * v7];
    if (v14 == a2 || sub_1CC15DF9C(v14, a2)) {
      break;
    }
    if (v9 == ++v7) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_1CC15E08C()
{
  char v2 = 1;
  uint64_t v3 = &v2;
  int v1 = 1;
  sub_1CD4D27FC(&v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBD04AB8, &dword_1CB82C000);
}

void llvm::findDevirtualizableCallsForTypeTest(uint64_t a1, uint64_t a2, uint64_t a3, llvm::DominatorTree *a4)
{
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 40) + 56) + 40);
  for (uint64_t i = *(void *)(a3 + 8); i; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v10 = *(void *)(i + 24);
    BOOL v11 = sub_1CBF698E4(v10);
    if (v10) {
      BOOL v12 = !v11;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12)
    {
      unint64_t v13 = *(unsigned int *)(a2 + 8);
      if (v13 >= *(unsigned int *)(a2 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a2 + 8 * v13) = v10;
      ++*(_DWORD *)(a2 + 8);
    }
  }
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v14 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)));
    sub_1CC15E204(v8, a1, (uint64_t)v14, 0, (const llvm::Value *)a3, a4);
  }
}

void sub_1CC15E204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const llvm::Value *a5, llvm::DominatorTree *a6)
{
  v24[8] = *(const llvm::Value **)MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a3 + 8);
  if (v6)
  {
    uint64_t v12 = a1;
    char v22 = (llvm::DataLayout *)(a1 + 272);
    do
    {
      uint64_t v13 = *(void *)(v6 + 24);
      int v14 = *(unsigned __int8 *)(v13 + 16);
      switch(v14)
      {
        case '<':
          sub_1CC15E5F0(a2, 0, *(void *)(v6 + 24), a4, a5, a6);
          break;
        case '>':
          uint64_t v15 = *(_DWORD *)(v13 + 20) & 0x7FFFFFF;
          BOOL v16 = (void *)(v13 - 32 * v15);
          if (*v16 == a3)
          {
            if (v15 == 1)
            {
LABEL_12:
              unint64_t v18 = -(-32 * v15 + 32);
              if (v18 >= 0x101) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v16 + 4 != (void *)v13)
              {
                unsigned int v19 = v24;
                uint64_t v20 = 32 - 32 * v15;
                do
                {
                  *v19++ = *(const llvm::Value **)(v13 + v20);
                  v20 += 32;
                }
                while (v20);
              }
              uint64_t v12 = a1;
              uint64_t IndexedOffsetInType = llvm::DataLayout::getIndexedOffsetInType(v22, *(void *)(v13 + 64), v24, (v18 >> 5));
              sub_1CC15E204(a1, a2, v13, IndexedOffsetInType + a4, a5, a6);
            }
            else
            {
              unsigned int v17 = 1;
              while (*(unsigned char *)(v16[4 * v17] + 16) == 16)
              {
                if (v15 == ++v17) {
                  goto LABEL_12;
                }
              }
            }
          }
          break;
        case 'M':
          sub_1CC15E204(v12, a2, *(void *)(v6 + 24), a4, a5, a6);
          break;
      }
      uint64_t v6 = *(void *)(v6 + 8);
    }
    while (v6);
  }
}

uint64_t llvm::findDevirtualizableCallsForTypeCheckedLoad(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4, uint64_t a5, llvm::DominatorTree *a6)
{
  uint64_t v7 = *(void *)(a5 - 32 * (*(_DWORD *)(a5 + 20) & 0x7FFFFFF) + 32);
  if (v7) {
    BOOL v8 = *(unsigned char *)(v7 + 16) == 16;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8)
  {
    *a4 = 1;
    return result;
  }
  uint64_t v11 = result;
  for (uint64_t i = *(void *)(a5 + 8); i; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v13 = *(void *)(i + 24);
    if (!v13 || *(unsigned char *)(v13 + 16) != 92 || *(_DWORD *)(v13 + 72) != 1) {
      goto LABEL_14;
    }
    int v14 = **(_DWORD **)(v13 + 64);
    if (v14 == 1)
    {
      unint64_t v16 = *(unsigned int *)(a3 + 8);
      if (v16 >= *(unsigned int *)(a3 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a3 + 8 * v16) = v13;
      ++*(_DWORD *)(a3 + 8);
      continue;
    }
    if (!v14)
    {
      unint64_t v15 = *(unsigned int *)(a2 + 8);
      if (v15 >= *(unsigned int *)(a2 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a2 + 8 * v15) = v13;
      ++*(_DWORD *)(a2 + 8);
    }
    else
    {
LABEL_14:
      *a4 = 1;
    }
  }
  uint64_t v17 = *(unsigned int *)(a2 + 8);
  if (v17)
  {
    unint64_t v18 = *(uint64_t **)a2;
    uint64_t v19 = 8 * v17;
    do
    {
      uint64_t v20 = (uint64_t *)(v7 + 24);
      if (*(_DWORD *)(v7 + 32) >= 0x41u) {
        uint64_t v20 = *(uint64_t **)(v7 + 24);
      }
      uint64_t v21 = *v18++;
      uint64_t result = sub_1CC15E5F0(v11, a4, v21, *v20, (const llvm::Value *)a5, a6);
      v19 -= 8;
    }
    while (v19);
  }
  return result;
}

uint64_t sub_1CC15E5F0(uint64_t result, unsigned char *a2, uint64_t a3, uint64_t a4, const llvm::Value *a5, llvm::DominatorTree *a6)
{
  uint64_t v6 = *(void *)(a3 + 8);
  if (v6)
  {
    uint64_t v11 = result;
    do
    {
      uint64_t v12 = *(unsigned __int8 **)(v6 + 24);
      uint64_t result = llvm::DominatorTree::dominates(a6, a5, (const llvm::Instruction *)v12);
      if (result)
      {
        int v13 = v12[16];
        if (v13 == 33 || v13 == 84)
        {
          unint64_t v14 = *(unsigned int *)(v11 + 8);
          if (v14 >= *(unsigned int *)(v11 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          unint64_t v15 = (void *)(*(void *)v11 + 16 * v14);
          *unint64_t v15 = a4;
          v15[1] = v12;
          ++*(_DWORD *)(v11 + 8);
        }
        else if (v13 == 77)
        {
          uint64_t result = sub_1CC15E5F0(v11, a2, v12, a4, a5, a6);
        }
        else if (a2)
        {
          *a2 = 1;
        }
      }
      uint64_t v6 = *(void *)(v6 + 8);
    }
    while (v6);
  }
  return result;
}

void llvm::replaceRelativePointerUsersWithZero(llvm *this, llvm::Function *a2)
{
  for (uint64_t i = *((void *)this + 1); i; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v3 = *(void *)(i + 24);
    if (v3) {
      BOOL v4 = *(unsigned char *)(v3 + 16) == 5;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4 && *(_WORD *)(v3 + 18) == 47)
    {
      for (uint64_t j = *(void *)(v3 + 8); j; uint64_t j = *(void *)(j + 8))
      {
        uint64_t v6 = *(void *)(j + 24);
        if (v6) {
          BOOL v7 = *(unsigned char *)(v6 + 16) == 5;
        }
        else {
          BOOL v7 = 0;
        }
        if (v7 && *(_WORD *)(v6 + 18) == 15)
        {
          BOOL v8 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v6, 0, 0);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v6, v8, 0);
        }
      }
    }
  }
}

uint64_t llvm::ScopedNoAliasAAResult::alias(llvm::ScopedNoAliasAAResult *a1, uint64_t a2, uint64_t a3)
{
  if (!byte_1EBD04BF8) {
    return 1;
  }
  uint64_t v3 = *(const llvm::MDNode **)(a2 + 40);
  BOOL v4 = *(const llvm::MDNode **)(a3 + 32);
  uint64_t result = llvm::ScopedNoAliasAAResult::mayAliasInScopes(a1, *(const llvm::MDNode **)(a2 + 32), *(const llvm::MDNode **)(a3 + 40));
  if (result) {
    return llvm::ScopedNoAliasAAResult::mayAliasInScopes((llvm::ScopedNoAliasAAResult *)result, v4, v3);
  }
  return result;
}

uint64_t llvm::ScopedNoAliasAAResult::mayAliasInScopes(llvm::ScopedNoAliasAAResult *this, const llvm::MDNode *a2, const llvm::MDNode *a3)
{
  uint64_t v3 = 1;
  if (a2 && a3)
  {
    uint64_t v6 = (unint64_t *)v48;
    uint64_t v44 = (unint64_t *)v48;
    uint64_t v45 = (unint64_t *)v48;
    uint64_t v46 = 16;
    int v47 = 0;
    uint64_t v7 = *((unsigned int *)a3 + 2);
    if (v7)
    {
      LODWORD(v8) = 0;
      unsigned int v9 = 16;
      uint64_t v10 = (unint64_t *)v48;
      uint64_t v11 = (const llvm::MDNode *)((char *)a3 - 8 * v7);
      while (1)
      {
        uint64_t v12 = *(void *)v11;
        if (**(unsigned __int8 **)v11 - 4 > 0x1E) {
          goto LABEL_40;
        }
        uint64_t v13 = *(unsigned int *)(v12 + 8);
        if (v13 < 2) {
          goto LABEL_40;
        }
        unint64_t v14 = *(unsigned __int8 **)(v12 - 8 * v13 + 8);
        if (!v14 || *v14 - 4 > 0x1E) {
          goto LABEL_40;
        }
        if (v10 != v6) {
          break;
        }
        if (v8)
        {
          unint64_t v15 = 0;
          uint64_t v16 = 8 * v8;
          uint64_t v17 = (unsigned __int8 **)v6;
          while (*v17 != v14)
          {
            if (*v17 == (unsigned __int8 *)-2) {
              unint64_t v15 = v17;
            }
            ++v17;
            v16 -= 8;
            if (!v16)
            {
              if (!v15) {
                goto LABEL_17;
              }
              *unint64_t v15 = v14;
              --v47;
              goto LABEL_39;
            }
          }
          goto LABEL_39;
        }
LABEL_17:
        if (v9 <= v8) {
          break;
        }
        HIDWORD(v46) = v8 + 1;
        v6[v8] = (unint64_t)v14;
LABEL_39:
        uint64_t v6 = v44;
        uint64_t v10 = v45;
        unsigned int v9 = v46;
        LODWORD(v8) = HIDWORD(v46);
LABEL_40:
        uint64_t v11 = (const llvm::MDNode *)((char *)v11 + 8);
        if (v11 == a3) {
          goto LABEL_49;
        }
      }
      if (3 * v9 <= 4 * ((int)v8 - v47))
      {
        if (v9 >= 0x40) {
          v9 *= 2;
        }
        else {
          unsigned int v9 = 128;
        }
      }
      else if (v9 - v8 >= v9 >> 3)
      {
        goto LABEL_21;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v44, v9);
      unsigned int v9 = v46;
      uint64_t v10 = v45;
LABEL_21:
      unsigned int v18 = v9 - 1;
      unsigned int v19 = (v9 - 1) & ((v14 >> 4) ^ (v14 >> 9));
      uint64_t v20 = (unsigned __int8 **)&v10[v19];
      uint64_t v21 = *v20;
      if (*v20 == (unsigned __int8 *)-1)
      {
        char v22 = 0;
LABEL_33:
        if (v22) {
          uint64_t v20 = v22;
        }
        if (*v20 != v14)
        {
          if (*v20 == (unsigned __int8 *)-2) {
            --v47;
          }
          else {
            ++HIDWORD(v46);
          }
          uint64_t *v20 = v14;
        }
      }
      else
      {
        char v22 = 0;
        int v23 = 1;
        while (v21 != v14)
        {
          if (v22) {
            BOOL v24 = 0;
          }
          else {
            BOOL v24 = v21 == (unsigned __int8 *)-2;
          }
          if (v24) {
            char v22 = v20;
          }
          unsigned int v25 = v19 + v23++;
          unsigned int v19 = v25 & v18;
          uint64_t v20 = (unsigned __int8 **)&v10[v25 & v18];
          uint64_t v21 = *v20;
          if (*v20 == (unsigned __int8 *)-1) {
            goto LABEL_33;
          }
        }
      }
      goto LABEL_39;
    }
    LODWORD(v8) = 0;
    unsigned int v9 = 16;
    uint64_t v10 = (unint64_t *)v48;
LABEL_49:
    if (v10 == v6) {
      uint64_t v8 = v8;
    }
    else {
      uint64_t v8 = v9;
    }
    unsigned int v26 = v10;
    if (v8)
    {
      uint64_t v27 = 0;
      while (v10[v27] >= 0xFFFFFFFFFFFFFFFELL)
      {
        if (v8 == ++v27) {
          goto LABEL_72;
        }
      }
      unsigned int v26 = &v10[v27];
    }
    unsigned int v28 = &v10[v8];
    if (v26 == v28)
    {
LABEL_72:
      uint64_t v3 = 1;
    }
    else
    {
      BOOL v29 = (unsigned char *)*v26;
LABEL_60:
      uint64_t v39 = v43;
      uint64_t v40 = v43;
      uint64_t v41 = 16;
      int v42 = 0;
      sub_1CC15F288((uint64_t)a2, v29, (llvm::SmallPtrSetImplBase *)&v39);
      if (HIDWORD(v41) == v42)
      {
        int v30 = 5;
      }
      else
      {
        uint64_t v34 = v38;
        unsigned int v35 = v38;
        uint64_t v36 = 16;
        int v37 = 0;
        sub_1CC15F288((uint64_t)a3, v29, (llvm::SmallPtrSetImplBase *)&v34);
        int v30 = sub_1CC15F528((uint64_t)&v39, (uint64_t *)&v34);
        if (v35 != v34) {
          free(v35);
        }
      }
      if (v40 != v39) {
        free(v40);
      }
      if (v30 != 5 && v30)
      {
        uint64_t v3 = 0;
      }
      else
      {
        unsigned int v31 = v26 + 1;
        while (v31 != v28)
        {
          unint64_t v32 = *v31++;
          BOOL v29 = (unsigned char *)v32;
          if (v32 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            unsigned int v26 = v31 - 1;
            goto LABEL_60;
          }
        }
        uint64_t v3 = 1;
      }
      uint64_t v6 = v44;
      uint64_t v10 = v45;
    }
    if (v10 != v6) {
      free(v10);
    }
  }
  return v3;
}

uint64_t llvm::ScopedNoAliasAAResult::getModRefInfo(uint64_t ****a1, uint64_t ***a2, uint64_t a3)
{
  if (!byte_1EBD04BF8) {
    return 7;
  }
  int v5 = *(const llvm::MDNode **)(a3 + 32);
  if ((*((unsigned char *)a2 + 23) & 0x20) == 0) {
    goto LABEL_3;
  }
  uint64_t v10 = ***a2;
  uint64_t v40 = a2;
  int v11 = *(_DWORD *)(v10 + 2496);
  if (v11)
  {
    uint64_t v12 = *(void *)(v10 + 2480);
    int v13 = v11 - 1;
    unsigned int v14 = v13 & ((a2 >> 4) ^ (a2 >> 9));
    a1 = (uint64_t ****)(v12 + 40 * v14);
    unint64_t v15 = *a1;
    if (*a1 == a2) {
      goto LABEL_12;
    }
    unsigned int v28 = 0;
    int v29 = 1;
    while (v15 != (uint64_t ***)-4096)
    {
      if (v28) {
        BOOL v30 = 0;
      }
      else {
        BOOL v30 = v15 == (uint64_t ***)-8192;
      }
      if (v30) {
        unsigned int v28 = a1;
      }
      unsigned int v31 = v14 + v29++;
      unsigned int v14 = v31 & v13;
      a1 = (uint64_t ****)(v12 + 40 * v14);
      unint64_t v15 = *a1;
      if (*a1 == a2) {
        goto LABEL_12;
      }
    }
    if (v28) {
      uint64_t v36 = v28;
    }
    else {
      uint64_t v36 = a1;
    }
  }
  else
  {
    uint64_t v36 = 0;
  }
  a1 = (uint64_t ****)sub_1CC609054(v10 + 2480, (uint64_t)&v40, (uint64_t *)&v40, v36);
  uint64_t v37 = (uint64_t)v40;
  a1[3] = 0;
  a1[4] = 0;
  *a1 = (uint64_t ***)v37;
  a1[1] = (uint64_t ***)(a1 + 3);
  a1[2] = (uint64_t ***)0x100000000;
LABEL_12:
  uint64_t v16 = *((unsigned int *)a1 + 4);
  if (!v16)
  {
LABEL_3:
    uint64_t v6 = 0;
    goto LABEL_4;
  }
  uint64_t v17 = (const llvm::MDNode **)(a1[1] + 1);
  uint64_t v18 = 16 * v16;
  while (*((_DWORD *)v17 - 2) != 8)
  {
    uint64_t v6 = 0;
    v17 += 2;
    v18 -= 16;
    if (!v18) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *v17;
LABEL_4:
  mayAliasInScopes = (uint64_t ****)llvm::ScopedNoAliasAAResult::mayAliasInScopes((llvm::ScopedNoAliasAAResult *)a1, v5, v6);
  if (!mayAliasInScopes) {
    return 4;
  }
  if ((*((unsigned char *)a2 + 23) & 0x20) == 0) {
    goto LABEL_6;
  }
  uint64_t v19 = ***a2;
  uint64_t v40 = a2;
  int v20 = *(_DWORD *)(v19 + 2496);
  if (v20)
  {
    uint64_t v21 = *(void *)(v19 + 2480);
    int v22 = v20 - 1;
    unsigned int v23 = v22 & ((a2 >> 4) ^ (a2 >> 9));
    mayAliasInScopes = (uint64_t ****)(v21 + 40 * v23);
    BOOL v24 = *mayAliasInScopes;
    if (*mayAliasInScopes == a2) {
      goto LABEL_19;
    }
    unint64_t v32 = 0;
    int v33 = 1;
    while (v24 != (uint64_t ***)-4096)
    {
      if (v32) {
        BOOL v34 = 0;
      }
      else {
        BOOL v34 = v24 == (uint64_t ***)-8192;
      }
      if (v34) {
        unint64_t v32 = mayAliasInScopes;
      }
      unsigned int v35 = v23 + v33++;
      unsigned int v23 = v35 & v22;
      mayAliasInScopes = (uint64_t ****)(v21 + 40 * v23);
      BOOL v24 = *mayAliasInScopes;
      if (*mayAliasInScopes == a2) {
        goto LABEL_19;
      }
    }
    if (v32) {
      uint64_t v38 = v32;
    }
    else {
      uint64_t v38 = mayAliasInScopes;
    }
  }
  else
  {
    uint64_t v38 = 0;
  }
  mayAliasInScopes = (uint64_t ****)sub_1CC609054(v19 + 2480, (uint64_t)&v40, (uint64_t *)&v40, v38);
  uint64_t v39 = (uint64_t)v40;
  mayAliasInScopes[3] = 0;
  mayAliasInScopes[4] = 0;
  *mayAliasInScopes = (uint64_t ***)v39;
  mayAliasInScopes[1] = (uint64_t ***)(mayAliasInScopes + 3);
  mayAliasInScopes[2] = (uint64_t ***)0x100000000;
LABEL_19:
  uint64_t v25 = *((unsigned int *)mayAliasInScopes + 4);
  if (v25)
  {
    unsigned int v26 = (const llvm::MDNode **)(mayAliasInScopes[1] + 1);
    uint64_t v27 = 16 * v25;
    while (*((_DWORD *)v26 - 2) != 7)
    {
      uint64_t v8 = 0;
      v26 += 2;
      v27 -= 16;
      if (!v27) {
        goto LABEL_7;
      }
    }
    uint64_t v8 = *v26;
    goto LABEL_7;
  }
LABEL_6:
  uint64_t v8 = 0;
LABEL_7:
  if (llvm::ScopedNoAliasAAResult::mayAliasInScopes((llvm::ScopedNoAliasAAResult *)mayAliasInScopes, v8, *(const llvm::MDNode **)(a3 + 40)))return 7; {
  else
  }
    return 4;
}

uint64_t llvm::ScopedNoAliasAAResult::getModRefInfo(uint64_t ****a1, uint64_t ***a2, uint64_t ***a3)
{
  if (!byte_1EBD04BF8) {
    return 7;
  }
  if ((*((unsigned char *)a2 + 23) & 0x20) == 0) {
    goto LABEL_3;
  }
  uint64_t v37 = ***a2;
  unsigned int v71 = a2;
  int v38 = *(_DWORD *)(v37 + 2496);
  if (v38)
  {
    uint64_t v39 = *(void *)(v37 + 2480);
    int v40 = v38 - 1;
    unsigned int v41 = v40 & ((a2 >> 4) ^ (a2 >> 9));
    a1 = (uint64_t ****)(v39 + 40 * v41);
    int v42 = *a1;
    if (*a1 == a2) {
      goto LABEL_48;
    }
    char v55 = 0;
    int v56 = 1;
    while (v42 != (uint64_t ***)-4096)
    {
      if (v55) {
        BOOL v57 = 0;
      }
      else {
        BOOL v57 = v42 == (uint64_t ***)-8192;
      }
      if (v57) {
        char v55 = a1;
      }
      unsigned int v58 = v41 + v56++;
      unsigned int v41 = v58 & v40;
      a1 = (uint64_t ****)(v39 + 40 * v41);
      int v42 = *a1;
      if (*a1 == a2) {
        goto LABEL_48;
      }
    }
    if (v55) {
      uint64_t v67 = v55;
    }
    else {
      uint64_t v67 = a1;
    }
  }
  else
  {
    uint64_t v67 = 0;
  }
  a1 = (uint64_t ****)sub_1CC609054(v37 + 2480, (uint64_t)&v71, (uint64_t *)&v71, v67);
  uint64_t v68 = (uint64_t)v71;
  a1[3] = 0;
  a1[4] = 0;
  *a1 = (uint64_t ***)v68;
  a1[1] = (uint64_t ***)(a1 + 3);
  a1[2] = (uint64_t ***)0x100000000;
LABEL_48:
  uint64_t v43 = *((unsigned int *)a1 + 4);
  if (!v43)
  {
LABEL_3:
    int v5 = 0;
    goto LABEL_4;
  }
  uint64_t v44 = (const llvm::MDNode **)(a1[1] + 1);
  uint64_t v45 = 16 * v43;
  while (*((_DWORD *)v44 - 2) != 7)
  {
    int v5 = 0;
    v44 += 2;
    v45 -= 16;
    if (!v45) {
      goto LABEL_4;
    }
  }
  int v5 = *v44;
LABEL_4:
  if ((*((unsigned char *)a3 + 23) & 0x20) == 0)
  {
LABEL_5:
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  uint64_t v11 = ***a3;
  unsigned int v71 = a3;
  int v12 = *(_DWORD *)(v11 + 2496);
  if (v12)
  {
    uint64_t v13 = *(void *)(v11 + 2480);
    int v14 = v12 - 1;
    unsigned int v15 = v14 & ((a3 >> 4) ^ (a3 >> 9));
    a1 = (uint64_t ****)(v13 + 40 * v15);
    uint64_t v16 = *a1;
    if (*a1 == a3) {
      goto LABEL_16;
    }
    int v29 = 0;
    int v30 = 1;
    while (v16 != (uint64_t ***)-4096)
    {
      if (v29) {
        BOOL v31 = 0;
      }
      else {
        BOOL v31 = v16 == (uint64_t ***)-8192;
      }
      if (v31) {
        int v29 = a1;
      }
      unsigned int v32 = v15 + v30++;
      unsigned int v15 = v32 & v14;
      a1 = (uint64_t ****)(v13 + 40 * v15);
      uint64_t v16 = *a1;
      if (*a1 == a3) {
        goto LABEL_16;
      }
    }
    if (v29) {
      uint64_t v63 = v29;
    }
    else {
      uint64_t v63 = a1;
    }
  }
  else
  {
    uint64_t v63 = 0;
  }
  a1 = (uint64_t ****)sub_1CC609054(v11 + 2480, (uint64_t)&v71, (uint64_t *)&v71, v63);
  uint64_t v64 = (uint64_t)v71;
  a1[3] = 0;
  a1[4] = 0;
  *a1 = (uint64_t ***)v64;
  a1[1] = (uint64_t ***)(a1 + 3);
  a1[2] = (uint64_t ***)0x100000000;
LABEL_16:
  uint64_t v17 = *((unsigned int *)a1 + 4);
  if (!v17) {
    goto LABEL_5;
  }
  uint64_t v18 = (const llvm::MDNode **)(a1[1] + 1);
  uint64_t v19 = 16 * v17;
  while (*((_DWORD *)v18 - 2) != 8)
  {
    uint64_t v6 = 0;
    v18 += 2;
    v19 -= 16;
    if (!v19) {
      goto LABEL_6;
    }
  }
  uint64_t v6 = *v18;
LABEL_6:
  mayAliasInScopes = (uint64_t ****)llvm::ScopedNoAliasAAResult::mayAliasInScopes((llvm::ScopedNoAliasAAResult *)a1, v5, v6);
  if (!mayAliasInScopes) {
    return 4;
  }
  if ((*((unsigned char *)a3 + 23) & 0x20) == 0) {
    goto LABEL_8;
  }
  uint64_t v20 = ***a3;
  unsigned int v71 = a3;
  int v21 = *(_DWORD *)(v20 + 2496);
  if (v21)
  {
    uint64_t v22 = *(void *)(v20 + 2480);
    int v23 = v21 - 1;
    unsigned int v24 = v23 & ((a3 >> 4) ^ (a3 >> 9));
    mayAliasInScopes = (uint64_t ****)(v22 + 40 * v24);
    uint64_t v25 = *mayAliasInScopes;
    if (*mayAliasInScopes == a3) {
      goto LABEL_23;
    }
    int v33 = 0;
    int v34 = 1;
    while (v25 != (uint64_t ***)-4096)
    {
      if (v33) {
        BOOL v35 = 0;
      }
      else {
        BOOL v35 = v25 == (uint64_t ***)-8192;
      }
      if (v35) {
        int v33 = mayAliasInScopes;
      }
      unsigned int v36 = v24 + v34++;
      unsigned int v24 = v36 & v23;
      mayAliasInScopes = (uint64_t ****)(v22 + 40 * v24);
      uint64_t v25 = *mayAliasInScopes;
      if (*mayAliasInScopes == a3) {
        goto LABEL_23;
      }
    }
    if (v33) {
      uint64_t v65 = v33;
    }
    else {
      uint64_t v65 = mayAliasInScopes;
    }
  }
  else
  {
    uint64_t v65 = 0;
  }
  mayAliasInScopes = (uint64_t ****)sub_1CC609054(v20 + 2480, (uint64_t)&v71, (uint64_t *)&v71, v65);
  uint64_t v66 = (uint64_t)v71;
  mayAliasInScopes[3] = 0;
  mayAliasInScopes[4] = 0;
  *mayAliasInScopes = (uint64_t ***)v66;
  mayAliasInScopes[1] = (uint64_t ***)(mayAliasInScopes + 3);
  mayAliasInScopes[2] = (uint64_t ***)0x100000000;
LABEL_23:
  uint64_t v26 = *((unsigned int *)mayAliasInScopes + 4);
  if (!v26)
  {
LABEL_8:
    uint64_t v8 = 0;
    goto LABEL_9;
  }
  uint64_t v27 = (const llvm::MDNode **)(mayAliasInScopes[1] + 1);
  uint64_t v28 = 16 * v26;
  while (*((_DWORD *)v27 - 2) != 7)
  {
    uint64_t v8 = 0;
    v27 += 2;
    v28 -= 16;
    if (!v28) {
      goto LABEL_9;
    }
  }
  uint64_t v8 = *v27;
LABEL_9:
  if ((*((unsigned char *)a2 + 23) & 0x20) == 0) {
    goto LABEL_10;
  }
  uint64_t v46 = ***a2;
  unsigned int v71 = a2;
  int v47 = *(_DWORD *)(v46 + 2496);
  if (v47)
  {
    uint64_t v48 = *(void *)(v46 + 2480);
    int v49 = v47 - 1;
    unsigned int v50 = v49 & ((a2 >> 4) ^ (a2 >> 9));
    mayAliasInScopes = (uint64_t ****)(v48 + 40 * v50);
    unsigned int v51 = *mayAliasInScopes;
    if (*mayAliasInScopes == a2) {
      goto LABEL_55;
    }
    int v59 = 0;
    int v60 = 1;
    while (v51 != (uint64_t ***)-4096)
    {
      if (v59) {
        BOOL v61 = 0;
      }
      else {
        BOOL v61 = v51 == (uint64_t ***)-8192;
      }
      if (v61) {
        int v59 = mayAliasInScopes;
      }
      unsigned int v62 = v50 + v60++;
      unsigned int v50 = v62 & v49;
      mayAliasInScopes = (uint64_t ****)(v48 + 40 * v50);
      unsigned int v51 = *mayAliasInScopes;
      if (*mayAliasInScopes == a2) {
        goto LABEL_55;
      }
    }
    if (v59) {
      uint64_t v69 = v59;
    }
    else {
      uint64_t v69 = mayAliasInScopes;
    }
  }
  else
  {
    uint64_t v69 = 0;
  }
  mayAliasInScopes = (uint64_t ****)sub_1CC609054(v46 + 2480, (uint64_t)&v71, (uint64_t *)&v71, v69);
  uint64_t v70 = (uint64_t)v71;
  mayAliasInScopes[3] = 0;
  mayAliasInScopes[4] = 0;
  *mayAliasInScopes = (uint64_t ***)v70;
  mayAliasInScopes[1] = (uint64_t ***)(mayAliasInScopes + 3);
  mayAliasInScopes[2] = (uint64_t ***)0x100000000;
LABEL_55:
  uint64_t v52 = *((unsigned int *)mayAliasInScopes + 4);
  if (v52)
  {
    uint64_t v53 = (const llvm::MDNode **)(mayAliasInScopes[1] + 1);
    uint64_t v54 = 16 * v52;
    while (*((_DWORD *)v53 - 2) != 8)
    {
      unsigned int v9 = 0;
      v53 += 2;
      v54 -= 16;
      if (!v54) {
        goto LABEL_11;
      }
    }
    unsigned int v9 = *v53;
    goto LABEL_11;
  }
LABEL_10:
  unsigned int v9 = 0;
LABEL_11:
  if (llvm::ScopedNoAliasAAResult::mayAliasInScopes((llvm::ScopedNoAliasAAResult *)mayAliasInScopes, v8, v9))return 7; {
  else
  }
    return 4;
}

void sub_1CC15F288(uint64_t a1, unsigned char *a2, llvm::SmallPtrSetImplBase *this)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3)
  {
    for (uint64_t i = (unsigned __int8 **)(a1 - 8 * v3); i != (unsigned __int8 **)a1; ++i)
    {
      uint64_t v8 = *i;
      if (**i - 4 <= 0x1E)
      {
        uint64_t v9 = *((unsigned int *)v8 + 2);
        if (v9 >= 2)
        {
          uint64_t v10 = *(unsigned char **)&v8[-8 * v9 + 8];
          if (v10)
          {
            switch(*v10)
            {
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
              case 0xD:
              case 0xE:
              case 0xF:
              case 0x10:
              case 0x11:
              case 0x12:
              case 0x13:
              case 0x14:
              case 0x15:
              case 0x16:
              case 0x17:
              case 0x18:
              case 0x19:
              case 0x1A:
              case 0x1B:
              case 0x1C:
              case 0x1D:
              case 0x1E:
              case 0x1F:
              case 0x20:
              case 0x21:
              case 0x22:
                break;
              default:
                goto LABEL_5;
            }
          }
        }
        else
        {
LABEL_5:
          uint64_t v10 = 0;
        }
        if (v10 == a2)
        {
          uint64_t v11 = *((void *)this + 1);
          uint64_t v12 = *((unsigned int *)this + 5);
          if (v11 != *(void *)this)
          {
            unsigned int v16 = *((_DWORD *)this + 4);
LABEL_20:
            if (3 * v16 <= 4 * ((int)v12 - *((_DWORD *)this + 6)))
            {
              if (v16 >= 0x40) {
                v16 *= 2;
              }
              else {
                unsigned int v16 = 128;
              }
            }
            else if (v16 - v12 >= v16 >> 3)
            {
              goto LABEL_22;
            }
            llvm::SmallPtrSetImplBase::Grow(this, v16);
            unsigned int v16 = *((_DWORD *)this + 4);
            uint64_t v11 = *((void *)this + 1);
LABEL_22:
            unsigned int v17 = v16 - 1;
            unsigned int v18 = (v16 - 1) & ((v8 >> 4) ^ (v8 >> 9));
            uint64_t v19 = (unsigned __int8 **)(v11 + 8 * v18);
            uint64_t v20 = *v19;
            if (*v19 == (unsigned __int8 *)-1)
            {
              int v21 = 0;
LABEL_34:
              if (v21) {
                uint64_t v25 = v21;
              }
              else {
                uint64_t v25 = v19;
              }
              if (*v25 != v8)
              {
                if (*v25 == (unsigned __int8 *)-2) {
                  --*((_DWORD *)this + 6);
                }
                else {
                  ++*((_DWORD *)this + 5);
                }
                llvm::ConstantInt *v25 = v8;
              }
            }
            else
            {
              int v21 = 0;
              int v22 = 1;
              while (v20 != v8)
              {
                if (v21) {
                  BOOL v23 = 0;
                }
                else {
                  BOOL v23 = v20 == (unsigned __int8 *)-2;
                }
                if (v23) {
                  int v21 = v19;
                }
                unsigned int v24 = v18 + v22++;
                unsigned int v18 = v24 & v17;
                uint64_t v19 = (unsigned __int8 **)(v11 + 8 * (v24 & v17));
                uint64_t v20 = *v19;
                if (*v19 == (unsigned __int8 *)-1) {
                  goto LABEL_34;
                }
              }
            }
            continue;
          }
          if (v12)
          {
            uint64_t v13 = 0;
            uint64_t v14 = 8 * v12;
            unsigned int v15 = (unsigned __int8 **)*((void *)this + 1);
            while (*v15 != v8)
            {
              if (*v15 == (unsigned __int8 *)-2) {
                uint64_t v13 = v15;
              }
              ++v15;
              v14 -= 8;
              if (!v14)
              {
                if (!v13) {
                  goto LABEL_17;
                }
                *uint64_t v13 = v8;
                --*((_DWORD *)this + 6);
                goto LABEL_41;
              }
            }
            continue;
          }
LABEL_17:
          unsigned int v16 = *((_DWORD *)this + 4);
          if (v12 >= v16) {
            goto LABEL_20;
          }
          *((_DWORD *)this + 5) = v12 + 1;
          *(void *)(v11 + 8 * v12) = v8;
        }
      }
LABEL_41:
      ;
    }
  }
}

uint64_t sub_1CC15F528(uint64_t a1, uint64_t *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 20);
  unsigned int v3 = *((_DWORD *)a2 + 5);
  if (v2 - *(_DWORD *)(a1 + 24) <= v3 - *((_DWORD *)a2 + 6))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4 == *(void *)a1) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = *(unsigned int *)(a1 + 16);
    }
    if (v5)
    {
      uint64_t v6 = 8 * v5;
      uint64_t v7 = *(unint64_t **)(a1 + 8);
      uint64_t result = 1;
      while (*v7 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v7;
        v6 -= 8;
        if (!v6) {
          return result;
        }
      }
    }
    else
    {
      uint64_t v7 = *(unint64_t **)(a1 + 8);
    }
    uint64_t v9 = (unint64_t *)(v4 + 8 * v5);
    if (v7 == v9) {
      return 1;
    }
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    unsigned int v12 = *((_DWORD *)a2 + 4);
    unint64_t v13 = *v7;
    unsigned int v14 = *((_DWORD *)a2 + 5);
    uint64_t v15 = v10;
LABEL_10:
    if (v15 == v11)
    {
      unsigned int v16 = (unint64_t *)(v11 + 8 * v14);
      if (v14)
      {
        uint64_t v17 = 0;
        while (*(void *)(v11 + v17) != v13)
        {
          v17 += 8;
          if (8 * v14 == v17) {
            goto LABEL_15;
          }
        }
        unsigned int v16 = (unint64_t *)(v11 + v17);
      }
LABEL_15:
      uint64_t v15 = v11;
    }
    else
    {
      unsigned int v20 = v12 - 1;
      unsigned int v21 = (v12 - 1) & ((v13 >> 4) ^ (v13 >> 9));
      int v22 = (unint64_t *)(v10 + 8 * v21);
      unint64_t v23 = *v22;
      if (*v22 == -1)
      {
        unsigned int v24 = 0;
LABEL_46:
        if (v24) {
          int v22 = v24;
        }
        unint64_t v28 = *v22;
      }
      else
      {
        unsigned int v24 = 0;
        int v25 = 1;
        while (v23 != v13)
        {
          if (v24) {
            BOOL v26 = 0;
          }
          else {
            BOOL v26 = v23 == -2;
          }
          if (v26) {
            unsigned int v24 = v22;
          }
          unsigned int v27 = v21 + v25++;
          unsigned int v21 = v27 & v20;
          int v22 = (unint64_t *)(v10 + 8 * (v27 & v20));
          unint64_t v23 = *v22;
          if (*v22 == -1) {
            goto LABEL_46;
          }
        }
        unint64_t v28 = v13;
      }
      if (v10 == v11) {
        unsigned int v29 = v3;
      }
      else {
        unsigned int v29 = v12;
      }
      int v30 = (unint64_t *)(v10 + 8 * v29);
      if (v28 == v13) {
        unsigned int v16 = v22;
      }
      else {
        unsigned int v16 = v30;
      }
      unsigned int v14 = v3;
      uint64_t v15 = v10;
    }
    if (v15 == v11) {
      unsigned int v18 = v14;
    }
    else {
      unsigned int v18 = v12;
    }
    if (v16 != (unint64_t *)(v15 + 8 * v18))
    {
      uint64_t v19 = v7 + 1;
      while (v19 != v9)
      {
        unint64_t v31 = *v19++;
        unint64_t v13 = v31;
        if (v31 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v7 = v19 - 1;
          goto LABEL_10;
        }
      }
      return 1;
    }
  }
  return 0;
}

void llvm::ScopedNoAliasAA::run(void *a1@<X8>)
{
  *a1 = 0;
}

void sub_1CC15F6CC()
{
}

void llvm::ScopedNoAliasAAWrapperPass::doInitialization(llvm::ScopedNoAliasAAWrapperPass *this, llvm::Module *a2)
{
}

uint64_t llvm::ScopedNoAliasAAWrapperPass::doFinalization(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    MEMORY[0x1D25D9CE0](v2, 0x20C4093837F09);
  }
  return 0;
}

void sub_1CC15F814(llvm::Pass *this)
{
  *(void *)this = &unk_1F2608318;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    MEMORY[0x1D25D9CE0](v2, 0x20C4093837F09);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CC15F884(llvm::Pass *this)
{
  *(void *)this = &unk_1F2608318;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    MEMORY[0x1D25D9CE0](v2, 0x20C4093837F09);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC15F908()
{
  char v2 = 1;
  unsigned int v3 = &v2;
  int v1 = 1;
  sub_1CD4D2D28((uint64_t)&unk_1EBD04B78, "enable-scoped-noalias", &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD04B78, &dword_1CB82C000);
}

uint64_t llvm::canTrackArgumentsInterprocedurally(llvm *this, llvm::Function *a2)
{
  if ((*((_DWORD *)this + 8) & 0xFu) - 7 <= 1) {
    return llvm::Function::hasAddressTaken(this, 0, 0, 1, 0, 0) ^ 1;
  }
  else {
    return 0;
  }
}

BOOL llvm::canTrackReturnsInterprocedurally(llvm *this, llvm::Function *a2)
{
  if (this && *((unsigned char *)this + 16) == 3)
  {
    if ((*((_DWORD *)this + 5) & 0x7FFFFFF) == 0) {
      return 0;
    }
  }
  else if (!*((unsigned char *)this + 16) {
         && *((llvm **)this + 9) == (llvm *)((char *)this + 72)
  }
         && (*((unsigned char *)this + 34) & 0x80) == 0)
  {
    return 0;
  }
  BOOL result = 0;
  if (((1 << (*((_DWORD *)this + 8) & 0xF)) & 0x7D5) == 0) {
    return result;
  }
  if (llvm::GlobalValue::isInterposable(this)) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 14);
  return !v4 || (*(unsigned char *)(v4 + 14) & 2) == 0;
}

uint64_t llvm::canTrackGlobalVariableInterprocedurally(llvm *this, llvm::GlobalVariable *a2)
{
  if (*((unsigned char *)this + 80)) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 8);
  if ((v3 & 0xFu) - 7 > 1) {
    return 0;
  }
  if (*((unsigned char *)this + 16))
  {
    if (*((unsigned char *)this + 16) == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) == 0 && *((llvm **)this + 9) == (llvm *)((char *)this + 72))
  {
    return 0;
  }
  if ((llvm::GlobalValue::isInterposable(this) & 1) != 0 || (*((unsigned char *)this + 80) & 2) != 0) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 1);
  if (!v4) {
    return 1;
  }
  uint64_t result = 1;
  do
  {
    uint64_t v6 = *(uint64_t **)(v4 + 24);
    int v7 = *((unsigned __int8 *)v6 + 16);
    if (v6 && v7 == 61)
    {
      uint64_t v8 = (llvm *)*(v6 - 8);
      if (v8 == this || (*((_WORD *)v6 + 9) & 1) != 0) {
        return 0;
      }
      uint64_t v9 = *(void *)v8;
    }
    else
    {
      if (v7 != 60 || (*((_WORD *)v6 + 9) & 1) != 0) {
        return 0;
      }
      uint64_t v9 = *v6;
    }
    if (v9 != *((void *)this + 3)) {
      return 0;
    }
    uint64_t v4 = *(void *)(v4 + 8);
  }
  while (v4);
  return result;
}

void llvm::computeKnownBits(llvm *this, int8x8_t *a2, llvm::KnownBits *a3, const llvm::DataLayout *a4, const llvm::DataLayout *a5, llvm::AssumptionCache *a6, const llvm::Instruction *a7, const llvm::DominatorTree *a8, llvm::OptimizationRemarkEmitter *a9, BOOL a10)
{
  if (!a6 || !*((void *)a6 + 5))
  {
    if (!this || *((unsigned __int8 *)this + 16) < 0x1Cu || (a6 = this, !*((void *)this + 5))) {
      a6 = 0;
    }
  }
  v10[0] = a3;
  v10[1] = a5;
  void v10[2] = a6;
  v10[3] = a7;
  uint64_t v10[4] = a8;
  char v11 = (char)a9;
  sub_1CC15FBF8((uint64_t)this, a2, a4, v10);
}

void sub_1CC15FBF8(uint64_t a1, int8x8_t *a2, unsigned int a3, const llvm::DataLayout **a4)
{
  int v5 = *(unsigned __int8 *)(*(void *)a1 + 8);
  if (v5 == 19)
  {
    uint64_t v6 = a2[1].u32[0];
    if (v6 > 0x40) {
      bzero(*(void **)a2, ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8);
    }
    else {
      *a2 = 0;
    }
    uint64_t v9 = a2[3].u32[0];
    if (v9 > 0x40)
    {
      uint64_t v10 = (void *)a2[2];
      bzero(v10, ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      a2[2] = 0;
    }
  }
  else
  {
    if (v5 == 18)
    {
      unsigned int v7 = *(_DWORD *)(*(void *)a1 + 32);
      int v12 = v7;
      if (v7 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v11);
      }
      if (v7) {
        unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
      }
      else {
        unint64_t v8 = 0;
      }
    }
    else
    {
      unint64_t v8 = 1;
      int v12 = 1;
    }
    unint64_t v11 = v8;
    sub_1CC15FDD8(a1, (uint64_t)&v11, a2, a3, a4);
  }
}

void llvm::computeKnownBits(llvm *this, const llvm::Value *a2, int8x8_t *a3, llvm::KnownBits *a4, const llvm::DataLayout *a5, const llvm::DataLayout *a6, llvm::AssumptionCache *a7, const llvm::Instruction *a8, const llvm::DominatorTree *a9, llvm::OptimizationRemarkEmitter *a10, BOOL a11)
{
  if (!a7 || !*((void *)a7 + 5))
  {
    if (!this || *((unsigned __int8 *)this + 16) < 0x1Cu || (a7 = this, !*((void *)this + 5))) {
      a7 = 0;
    }
  }
  v11[0] = a4;
  v11[1] = a6;
  v11[2] = a7;
  void v11[3] = a8;
  v11[4] = a9;
  char v12 = (char)a10;
  sub_1CC15FDD8((uint64_t)this, (uint64_t)a2, a3, a5, v11);
}

void sub_1CC15FDD8(uint64_t a1, uint64_t a2, int8x8_t *a3, unsigned int a4, const llvm::DataLayout **a5)
{
  uint64_t v10 = *(unsigned int *)(a2 + 8);
  if (v10 > 0x40)
  {
    int v11 = 0;
    int64_t v12 = (unint64_t)(v10 + 63) >> 6;
    do
    {
      if (v12-- < 1) {
        break;
      }
      unint64_t v14 = *(void *)(*(void *)a2 + 8 * v12);
      v11 += __clz(v14);
    }
    while (!v14);
    int v15 = v10 | 0xFFFFFFC0;
    if ((v10 & 0x3F) == 0) {
      int v15 = 0;
    }
    if (v11 + v15 == v10) {
      goto LABEL_11;
    }
  }
  else if (!*(void *)a2)
  {
LABEL_11:
    uint64_t v16 = a3[1].u32[0];
    if (v16 > 0x40) {
      bzero(*(void **)a3, ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8);
    }
    else {
      *a3 = 0;
    }
    uint64_t v17 = a3[3].u32[0];
    if (v17 > 0x40)
    {
      unsigned int v18 = (void *)a3[2];
      bzero(v18, ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
LABEL_15:
      a3[2] = 0;
    }
    return;
  }
  if (*(unsigned char *)(*(void *)a1 + 8) == 19) {
    goto LABEL_11;
  }
  unsigned int v84 = 0;
  __src = &v84;
  uint64_t v86 = 0;
  if (sub_1CBF528D8((uint64_t)&__src, (unsigned __int8 *)a1))
  {
    unsigned int v19 = v84[1].u32[0];
    LODWORD(v86) = v19;
    if (v19 > 0x40) {
      operator new[]();
    }
    unint64_t v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
    if (!v19) {
      unint64_t v20 = 0;
    }
    unint64_t v21 = v20 & ~*(void *)v84;
    int8x8_t v22 = *v84;
    if (a3[1].i32[0] >= 0x41u && *(void *)a3) {
      ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a3, 0x1000C8000313F17);
    }
    *a3 = (int8x8_t)v21;
    a3[1].i32[0] = v19;
    if (a3[3].i32[0] >= 0x41u)
    {
      int8x8_t v83 = a3[2];
      if (v83) {
        MEMORY[0x1D25D9CB0](*(void *)&v83, 0x1000C8000313F17);
      }
    }
    a3[2] = v22;
    a3[3].i32[0] = v19;
    return;
  }
  switch(*(unsigned char *)(a1 + 16))
  {
    case 0xA:
      uint64_t v28 = a3[1].u32[0];
      if (v28 > 0x40)
      {
        memset(*(void **)a3, 255, ((unint64_t)(v28 + 63) >> 3) & 0x3FFFFFF8);
        LODWORD(v28) = a3[1].i32[0];
        if (v28)
        {
LABEL_37:
          unint64_t v29 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v28;
          if (v28 < 0x41)
          {
LABEL_38:
            int v30 = a3;
            goto LABEL_39;
          }
          int v30 = (int8x8_t *)(*(void *)a3 + 8 * ((((unint64_t)v28 + 63) >> 6) - 1));
LABEL_39:
          *(void *)v30 &= v29;
          unint64_t v31 = a3 + 2;
          uint64_t v32 = a3[3].u32[0];
          if (v32 > 0x40)
          {
            memset(*(void **)&a3[2], 255, ((unint64_t)(v32 + 63) >> 3) & 0x3FFFFFF8);
            LODWORD(v32) = a3[3].i32[0];
            if (v32)
            {
LABEL_41:
              unint64_t v33 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v32;
              if (v32 >= 0x41)
              {
                int v34 = (int8x8_t *)(*(void *)v31
                                 + 8 * ((((unint64_t)v32 + 63) >> 6) - 1));
                goto LABEL_43;
              }
LABEL_42:
              int v34 = a3 + 2;
LABEL_43:
              *(void *)v34 &= v33;
              int v35 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
              if (!v35) {
                return;
              }
              unsigned int v36 = 0;
              while (1)
              {
                if (*(_DWORD *)(a2 + 8) >= 0x41u) {
                  uint64_t v37 = (void *)(*(void *)a2 + 8 * (v36 >> 6));
                }
                else {
                  uint64_t v37 = (void *)a2;
                }
                if ((*v37 >> (char)v36))
                {
                  AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)a1, v36);
                  if (!AggregateElement || (uint64_t v39 = AggregateElement, *((unsigned char *)AggregateElement + 16) != 16))
                  {
                    uint64_t v80 = a3[1].u32[0];
                    if (v80 > 0x40) {
                      bzero(*(void **)a3, ((unint64_t)(v80 + 63) >> 3) & 0x3FFFFFF8);
                    }
                    else {
                      *a3 = 0;
                    }
                    uint64_t v26 = a3[3].u32[0];
                    if (v26 > 0x40)
                    {
                      unsigned int v27 = (void *)*v31;
                      goto LABEL_34;
                    }
                    int8x8_t *v31 = 0;
                    return;
                  }
                  unsigned int v40 = *((_DWORD *)AggregateElement + 8);
                  if (v40 > 0x40) {
                    operator new[]();
                  }
                  unint64_t v41 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v40;
                  if (!v40) {
                    unint64_t v41 = 0;
                  }
                  unint64_t v42 = v41 & ~AggregateElement[3];
                  uint64_t v43 = a3[1].u32[0];
                  if (v43 > 0x40)
                  {
                    uint64_t v44 = (void *)*a3;
                    unint64_t v45 = (unint64_t)(v43 + 63) >> 6;
                    uint64_t v46 = (uint64_t *)v42;
                    do
                    {
                      uint64_t v47 = *v46++;
                      *v44++ &= v47;
                      --v45;
                    }
                    while (v45);
                  }
                  else
                  {
                    *(void *)a3 &= v42;
                  }
                  uint64_t v48 = a3[3].u32[0];
                  if (v48 > 0x40)
                  {
                    int v49 = (void *)*v31;
                    unsigned int v50 = (uint64_t *)v39[3];
                    unint64_t v51 = (unint64_t)(v48 + 63) >> 6;
                    do
                    {
                      uint64_t v52 = *v50++;
                      *v49++ &= v52;
                      --v51;
                    }
                    while (v51);
                  }
                  else
                  {
                    *(void *)v31 &= v39[3];
                  }
                }
                unsigned int v36 = (llvm::Type *)(v36 + 1);
                if (v36 == v35) {
                  return;
                }
              }
            }
          }
          else
          {
            int8x8_t *v31 = (int8x8_t)-1;
            if (v32) {
              goto LABEL_41;
            }
          }
          unint64_t v33 = 0;
          goto LABEL_42;
        }
      }
      else
      {
        *a3 = (int8x8_t)-1;
        if (v28) {
          goto LABEL_37;
        }
      }
      unint64_t v29 = 0;
      goto LABEL_38;
    case 0xD:
    case 0x13:
      uint64_t v23 = a3[1].u32[0];
      if (v23 <= 0x40)
      {
        *a3 = (int8x8_t)-1;
        if (v23) {
          goto LABEL_30;
        }
LABEL_125:
        unint64_t v24 = 0;
        goto LABEL_31;
      }
      memset(*(void **)a3, 255, ((unint64_t)(v23 + 63) >> 3) & 0x3FFFFFF8);
      LODWORD(v23) = a3[1].i32[0];
      if (!v23) {
        goto LABEL_125;
      }
LABEL_30:
      unint64_t v24 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v23;
      if (v23 < 0x41)
      {
LABEL_31:
        int v25 = a3;
        goto LABEL_32;
      }
      int v25 = (int8x8_t *)(*(void *)a3 + 8 * ((((unint64_t)v23 + 63) >> 6) - 1));
LABEL_32:
      *(void *)v25 &= v24;
      uint64_t v26 = a3[3].u32[0];
      if (v26 <= 0x40) {
        goto LABEL_15;
      }
      unsigned int v27 = (void *)a3[2];
LABEL_34:
      bzero(v27, ((unint64_t)(v26 + 63) >> 3) & 0x3FFFFFF8);
      return;
    case 0xF:
      uint64_t v53 = a3[1].u32[0];
      if (v53 > 0x40)
      {
        memset(*(void **)a3, 255, ((unint64_t)(v53 + 63) >> 3) & 0x3FFFFFF8);
        LODWORD(v53) = a3[1].i32[0];
        if (v53)
        {
LABEL_68:
          unint64_t v54 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v53;
          if (v53 >= 0x41)
          {
            char v55 = (int8x8_t *)(*(void *)a3
                             + 8 * ((((unint64_t)v53 + 63) >> 6) - 1));
LABEL_70:
            *(void *)v55 &= v54;
            int v56 = a3 + 2;
            uint64_t v57 = a3[3].u32[0];
            if (v57 > 0x40)
            {
              memset(*(void **)&a3[2], 255, ((unint64_t)(v57 + 63) >> 3) & 0x3FFFFFF8);
              LODWORD(v57) = a3[3].i32[0];
              if (v57)
              {
LABEL_72:
                unint64_t v58 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v57;
                if (v57 >= 0x41)
                {
                  int v59 = (int8x8_t *)(*(void *)v56
                                   + 8 * ((((unint64_t)v57 + 63) >> 6) - 1));
LABEL_74:
                  *(void *)v59 &= v58;
                  int v60 = *(_DWORD *)(*(void *)a1 + 32);
                  if (v60)
                  {
                    for (unsigned int i = 0; i != v60; ++i)
                    {
                      if (*(_DWORD *)(a2 + 8) >= 0x41u) {
                        unsigned int v62 = (void *)(*(void *)a2 + 8 * (i >> 6));
                      }
                      else {
                        unsigned int v62 = (void *)a2;
                      }
                      if ((*v62 >> i))
                      {
                        llvm::ConstantDataSequential::getElementAsAPInt((llvm::ConstantDataSequential *)a1, i, (uint64_t)&__src);
                        unsigned int v63 = v86;
                        if (v86 > 0x40) {
                          operator new[]();
                        }
                        unint64_t v64 = (unint64_t)__src;
                        unint64_t v65 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v86;
                        if (!v86) {
                          unint64_t v65 = 0;
                        }
                        unint64_t v66 = v65 & ~(unint64_t)__src;
                        uint64_t v67 = a3[1].u32[0];
                        if (v67 > 0x40)
                        {
                          uint64_t v68 = (void *)*a3;
                          unint64_t v69 = (unint64_t)(v67 + 63) >> 6;
                          uint64_t v70 = (uint64_t *)v66;
                          do
                          {
                            uint64_t v71 = *v70++;
                            *v68++ &= v71;
                            --v69;
                          }
                          while (v69);
                        }
                        else
                        {
                          *(void *)a3 &= v66;
                        }
                        uint64_t v72 = a3[3].u32[0];
                        if (v72 > 0x40)
                        {
                          int v73 = (void *)*v56;
                          unint64_t v74 = (unint64_t)(v72 + 63) >> 6;
                          uint64_t v75 = (uint64_t *)v64;
                          do
                          {
                            uint64_t v76 = *v75++;
                            *v73++ &= v76;
                            --v74;
                          }
                          while (v74);
                        }
                        else
                        {
                          *(void *)v56 &= v64;
                        }
                        if (v63 >= 0x41 && v64) {
                          MEMORY[0x1D25D9CB0](v64, 0x1000C8000313F17);
                        }
                      }
                    }
                  }
                  return;
                }
LABEL_73:
                int v59 = a3 + 2;
                goto LABEL_74;
              }
            }
            else
            {
              *int v56 = (int8x8_t)-1;
              if (v57) {
                goto LABEL_72;
              }
            }
            unint64_t v58 = 0;
            goto LABEL_73;
          }
LABEL_69:
          char v55 = a3;
          goto LABEL_70;
        }
      }
      else
      {
        *a3 = (int8x8_t)-1;
        if (v53) {
          goto LABEL_68;
        }
      }
      unint64_t v54 = 0;
      goto LABEL_69;
    default:
      uint64_t v77 = a3[1].u32[0];
      if (v77 > 0x40) {
        bzero(*(void **)a3, ((unint64_t)(v77 + 63) >> 3) & 0x3FFFFFF8);
      }
      else {
        *a3 = 0;
      }
      uint64_t v78 = a3[3].u32[0];
      if (v78 > 0x40) {
        bzero(*(void **)&a3[2], ((unint64_t)(v78 + 63) >> 3) & 0x3FFFFFF8);
      }
      else {
        a3[2] = 0;
      }
      if (a4 != 6)
      {
        unsigned int v79 = *(unsigned __int8 *)(a1 + 16);
        if (v79 - 11 >= 2)
        {
          if (v79 == 1)
          {
            if ((llvm::GlobalValue::isInterposable((llvm::GlobalValue *)a1) & 1) == 0) {
              sub_1CC15FBF8(*(void *)(a1 - 32), a3, a4 + 1, a5);
            }
          }
          else
          {
            if (v79 > 0x1B || v79 == 5) {
              sub_1CC1758F4((llvm::UndefValue *)a1, a2, a3, a4, (uint64_t)a5);
            }
            if (*(unsigned char *)(*(void *)a1 + 8) == 15)
            {
              Pointerchar Alignment = llvm::Value::getPointerAlignment((llvm::Value *)a1, *a5);
              if (PointerAlignment)
              {
                if (PointerAlignment > 0x40)
                {
                  llvm::APInt::setBitsSlowCase(a3, 0, PointerAlignment);
                }
                else
                {
                  unint64_t v82 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PointerAlignment;
                  if (a3[1].i32[0] > 0x40u) {
                    **(void **)a3 |= v82;
                  }
                  else {
                    *(void *)a3 |= v82;
                  }
                }
              }
            }
            sub_1CC17B6B4((void *)a1, (unsigned int *)a3, a4, (long long *)a5);
          }
        }
      }
      return;
  }
}

void llvm::computeKnownBits(llvm *this@<X0>, const llvm::Value *a2@<X1>, const llvm::DataLayout *a3@<X2>, llvm::AssumptionCache *a4@<X4>, const llvm::Instruction *a5@<X5>, const llvm::DominatorTree *a6@<X6>, llvm::OptimizationRemarkEmitter *a7@<X7>, const llvm::DataLayout *a8@<X3>, uint64_t a9@<X8>, BOOL a10)
{
  if (!a4 || !*((void *)a4 + 5))
  {
    if (!this || *((unsigned __int8 *)this + 16) < 0x1Cu || (a4 = this, !*((void *)this + 5))) {
      a4 = 0;
    }
  }
  v10[0] = a2;
  v10[1] = a8;
  void v10[2] = a4;
  v10[3] = a5;
  uint64_t v10[4] = a6;
  char v11 = (char)a7;
  sub_1CC16089C((uint64_t *)this, a3, v10, a9);
}

void sub_1CC16089C(uint64_t *a1@<X0>, unsigned int a2@<W1>, const llvm::DataLayout **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  unsigned int v9 = *(_DWORD *)(v8 + 8);
  if ((v9 & 0xFE) == 0x12)
  {
    unsigned int v19 = **(llvm::Type ***)(v8 + 16);
    unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v19);
    if (PrimitiveSizeInBits) {
      goto LABEL_14;
    }
    unsigned int v9 = *((_DWORD *)v19 + 2);
  }
  else
  {
    unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v8);
    if (PrimitiveSizeInBits) {
      goto LABEL_14;
    }
  }
  if (v9 < 0x100) {
    goto LABEL_12;
  }
  unsigned int v11 = v9 >> 8;
  uint64_t v12 = *((unsigned int *)*a3 + 60);
  uint64_t v13 = *((void *)*a3 + 29);
  if (v12)
  {
    uint64_t v13 = *((void *)*a3 + 29);
    unint64_t v14 = *((unsigned int *)*a3 + 60);
    do
    {
      unint64_t v15 = v14 >> 1;
      uint64_t v16 = v13 + 16 * (v14 >> 1);
      unsigned int v17 = *(_DWORD *)(v16 + 8);
      uint64_t v18 = v16 + 16;
      v14 += ~(v14 >> 1);
      if (v17 < v11) {
        uint64_t v13 = v18;
      }
      else {
        unint64_t v14 = v15;
      }
    }
    while (v14);
  }
  if (v13 == *((void *)*a3 + 29) + 16 * v12 || *(_DWORD *)(v13 + 8) != v11) {
LABEL_12:
  }
    uint64_t v13 = *((void *)*a3 + 29);
  unsigned int PrimitiveSizeInBits = *(_DWORD *)(v13 + 4);
LABEL_14:
  *(_DWORD *)(a4 + 8) = PrimitiveSizeInBits;
  if (PrimitiveSizeInBits > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)a4);
  }
  *(void *)a4 = 0;
  *(_DWORD *)(a4 + 24) = PrimitiveSizeInBits;
  *(void *)(a4 + 16) = 0;

  sub_1CC15FBF8((uint64_t)a1, (int8x8_t *)a4, a2, a3);
}

uint64_t llvm::computeKnownBits@<X0>(llvm *this@<X0>, const llvm::Value *a2@<X1>, const llvm::APInt *a3@<X2>, const llvm::DataLayout *a4@<X3>, llvm::AssumptionCache *a5@<X5>, const llvm::Instruction *a6@<X6>, const llvm::DominatorTree *a7@<X7>, uint64_t a8@<X4>, uint64_t a9@<X8>, llvm::OptimizationRemarkEmitter *a10, BOOL a11)
{
  if (!a5 || !*((void *)a5 + 5))
  {
    if (!this || *((unsigned __int8 *)this + 16) < 0x1Cu || (a5 = this, !*((void *)this + 5))) {
      a5 = 0;
    }
  }
  v12[0] = a3;
  v12[1] = a8;
  v12[2] = a5;
  v12[3] = a6;
  v12[4] = a7;
  char v13 = (char)a10;
  return sub_1CC160A60((uint64_t *)this, (uint64_t)a2, (uint64_t)a4, (uint64_t)v12, a9);
}

uint64_t sub_1CC160A60@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *a1;
  unsigned int v11 = *(_DWORD *)(v10 + 8);
  if ((v11 & 0xFE) == 0x12)
  {
    int8x8_t v22 = **(llvm::Type ***)(v10 + 16);
    unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v22);
    if (PrimitiveSizeInBits) {
      goto LABEL_14;
    }
    unsigned int v11 = *((_DWORD *)v22 + 2);
  }
  else
  {
    unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v10);
    if (PrimitiveSizeInBits) {
      goto LABEL_14;
    }
  }
  if (v11 < 0x100) {
    goto LABEL_12;
  }
  unsigned int v13 = v11 >> 8;
  uint64_t v14 = *(unsigned int *)(*(void *)a4 + 240);
  uint64_t v15 = *(void *)(*(void *)a4 + 232);
  if (v14)
  {
    uint64_t v15 = *(void *)(*(void *)a4 + 232);
    unint64_t v16 = *(unsigned int *)(*(void *)a4 + 240);
    do
    {
      unint64_t v17 = v16 >> 1;
      uint64_t v18 = v15 + 16 * (v16 >> 1);
      unsigned int v19 = *(_DWORD *)(v18 + 8);
      uint64_t v20 = v18 + 16;
      v16 += ~(v16 >> 1);
      if (v19 < v13) {
        uint64_t v15 = v20;
      }
      else {
        unint64_t v16 = v17;
      }
    }
    while (v16);
  }
  if (v15 == *(void *)(*(void *)a4 + 232) + 16 * v14 || *(_DWORD *)(v15 + 8) != v13) {
LABEL_12:
  }
    uint64_t v15 = *(void *)(*(void *)a4 + 232);
  unsigned int PrimitiveSizeInBits = *(_DWORD *)(v15 + 4);
LABEL_14:
  *(_DWORD *)(a5 + 8) = PrimitiveSizeInBits;
  if (PrimitiveSizeInBits > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)a5);
  }
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 24) = PrimitiveSizeInBits;
  *(void *)(a5 + 16) = 0;

  return sub_1CC15FDD8(a1, a2, a5, a3, a4);
}

BOOL llvm::haveNoCommonBitsSet(llvm *this, const llvm::Value *a2, void **a3, const llvm::DataLayout *a4, llvm::AssumptionCache *a5, const llvm::Instruction *a6, const llvm::DominatorTree *a7)
{
  char v7 = (char)a7;
  __src = 0;
  p_src = &__src;
  int v14 = *((unsigned __int8 *)this + 16);
  if (v14 == 5)
  {
    if (*((_WORD *)this + 9) != 28
      || (sub_1CBF686A0(&p_src, 30, *((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))) & 1) == 0
      && !sub_1CBF686A0(&p_src, 30, ((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[4]))
    {
      goto LABEL_5;
    }
  }
  else if (v14 != 56 {
         || (sub_1CBF686A0(&p_src, 30, *((void *)this - 8)) & 1) == 0
  }
         && (sub_1CBF686A0(&p_src, 30, *((void *)this - 4)) & 1) == 0)
  {
LABEL_5:
    int v15 = *((unsigned __int8 *)a2 + 16);
    goto LABEL_6;
  }
  int v15 = *((unsigned __int8 *)a2 + 16);
  if (v15 == 5)
  {
    if (*((_WORD *)a2 + 9) != 28) {
      goto LABEL_6;
    }
    int v30 = (void **)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
    if (__src == *v30) {
      return 1;
    }
    unsigned int v19 = v30 + 4;
  }
  else
  {
    if (v15 != 56) {
      goto LABEL_6;
    }
    if (__src == *((void **)a2 - 8)) {
      return 1;
    }
    unsigned int v19 = (void **)((char *)a2 - 32);
  }
  if (__src == *v19) {
    return 1;
  }
LABEL_6:
  p_src = &__src;
  if (v15 == 5)
  {
    if (*((_WORD *)a2 + 9) != 28
      || (sub_1CBF686A0(&p_src, 30, *((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))) & 1) == 0
      && !sub_1CBF686A0(&p_src, 30, ((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4]))
    {
      goto LABEL_10;
    }
  }
  else if (v15 != 56 {
         || (sub_1CBF686A0(&p_src, 30, *((void *)a2 - 8)) & 1) == 0
  }
         && (sub_1CBF686A0(&p_src, 30, *((void *)a2 - 4)) & 1) == 0)
  {
LABEL_10:
    int v16 = *((unsigned __int8 *)this + 16);
    goto LABEL_11;
  }
  int v16 = *((unsigned __int8 *)this + 16);
  if (v16 == 5)
  {
    if (*((_WORD *)this + 9) != 28) {
      goto LABEL_11;
    }
    unint64_t v31 = (void **)((char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
    if (__src == *v31) {
      return 1;
    }
    uint64_t v20 = v31 + 4;
  }
  else
  {
    if (v16 != 56) {
      goto LABEL_11;
    }
    if (__src == *((void **)this - 8)) {
      return 1;
    }
    uint64_t v20 = (void **)((char *)this - 32);
  }
  if (__src == *v20) {
    return 1;
  }
LABEL_11:
  if (v16 == 5)
  {
    if (*((_WORD *)this + 9) != 28) {
      goto LABEL_38;
    }
    unint64_t v21 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
    unint64_t v17 = *(void ***)v21;
    if (!*(void *)v21) {
      goto LABEL_38;
    }
    uint64_t v18 = (const llvm::DataLayout *)*((void *)v21 + 4);
    if (!v18) {
      goto LABEL_38;
    }
  }
  else
  {
    if (v16 != 56) {
      goto LABEL_38;
    }
    unint64_t v17 = (void **)*((void *)this - 8);
    if (!v17) {
      goto LABEL_38;
    }
    uint64_t v18 = (const llvm::DataLayout *)*((void *)this - 4);
    if (!v18) {
      goto LABEL_38;
    }
  }
  p_src = v17;
  unint64_t v41 = v18;
  if (sub_1CC1858EC(&p_src, (uint64_t)a2)) {
    return 1;
  }
LABEL_38:
  int v22 = *((unsigned __int8 *)a2 + 16);
  if (v22 == 5)
  {
    if (*((_WORD *)a2 + 9) != 28) {
      goto LABEL_47;
    }
    int v25 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
    uint64_t v23 = *(void ***)v25;
    if (!*(void *)v25) {
      goto LABEL_47;
    }
    unint64_t v24 = (const llvm::DataLayout *)*((void *)v25 + 4);
    if (!v24) {
      goto LABEL_47;
    }
  }
  else
  {
    if (v22 != 56) {
      goto LABEL_47;
    }
    uint64_t v23 = (void **)*((void *)a2 - 8);
    if (!v23) {
      goto LABEL_47;
    }
    unint64_t v24 = (const llvm::DataLayout *)*((void *)a2 - 4);
    if (!v24) {
      goto LABEL_47;
    }
  }
  p_src = v23;
  unint64_t v41 = v24;
  if (sub_1CC1858EC(&p_src, (uint64_t)this)) {
    return 1;
  }
LABEL_47:
  unsigned int v26 = *(_DWORD *)(*(void *)this + 8);
  if ((v26 & 0xFE) == 0x12) {
    unsigned int v26 = *(_DWORD *)(**(void **)(*(void *)this + 16) + 8);
  }
  unsigned int v37 = v26 >> 8;
  if (v26 >> 8 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src);
  }
  unsigned int v39 = v26 >> 8;
  __src = 0;
  uint64_t v38 = 0;
  unsigned int v33 = v26 >> 8;
  unsigned int v35 = v26 >> 8;
  int8x8_t v32 = 0;
  uint64_t v34 = 0;
  if (!a5 || (unsigned int v27 = a5, !*((void *)a5 + 5)))
  {
    if (*((unsigned __int8 *)this + 16) < 0x1Cu || (unsigned int v27 = this, !*((void *)this + 5))) {
      unsigned int v27 = 0;
    }
  }
  p_src = a3;
  unint64_t v41 = a4;
  unint64_t v42 = v27;
  uint64_t v43 = a6;
  uint64_t v44 = 0;
  char v45 = v7;
  sub_1CC15FBF8((uint64_t)this, (int8x8_t *)&__src, 0, (const llvm::DataLayout **)&p_src);
  if (!a5 || !*((void *)a5 + 5))
  {
    if (*((unsigned __int8 *)a2 + 16) < 0x1Cu || (a5 = a2, !*((void *)a2 + 5))) {
      a5 = 0;
    }
  }
  p_src = a3;
  unint64_t v41 = a4;
  unint64_t v42 = a5;
  uint64_t v43 = a6;
  uint64_t v44 = 0;
  char v45 = v7;
  sub_1CC15FBF8((uint64_t)a2, &v32, 0, (const llvm::DataLayout **)&p_src);
  if (v37 >= 0x41) {
    operator new[]();
  }
  if (v37) {
    BOOL v28 = ((unint64_t)__src | *(void *)&v32) == 0xFFFFFFFFFFFFFFFFLL >> -(char)v37;
  }
  else {
    BOOL v28 = 1;
  }
  if (v35 >= 0x41 && v34) {
    MEMORY[0x1D25D9CB0](v34, 0x1000C8000313F17);
  }
  if (v33 >= 0x41 && *(void *)&v32) {
    MEMORY[0x1D25D9CB0](*(void *)&v32, 0x1000C8000313F17);
  }
  if (v39 >= 0x41 && v38) {
    MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
  }
  if (v37 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  return v28;
}

BOOL sub_1CC1611B4(uint64_t a1, void *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 0x41) {
    operator new[]();
  }
  return !v2 || (*a2 | *(void *)a1) == 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
}

uint64_t llvm::isKnownToBeAPowerOfTwo(llvm *this, const llvm::Value *a2, const llvm::DataLayout *a3, int a4, uint64_t a5, llvm::AssumptionCache *a6, const llvm::Instruction *a7, const llvm::DominatorTree *a8, BOOL a9)
{
  if (!a6 || !*((void *)a6 + 5))
  {
    if (!this || *((unsigned __int8 *)this + 16) < 0x1Cu || (a6 = this, !*((void *)this + 5))) {
      a6 = 0;
    }
  }
  v10[0] = a2;
  v10[1] = a5;
  void v10[2] = a6;
  v10[3] = a7;
  uint64_t v10[4] = 0;
  char v11 = (char)a8;
  return sub_1CC161328((unsigned __int8 *)this, (uint64_t)a3, a4, (uint64_t)v10);
}

uint64_t sub_1CC161328(unsigned __int8 *SplatValue, uint64_t a2, int a3, uint64_t a4)
{
  char v7 = (int8x8_t *)SplatValue;
  if (!a2) {
    goto LABEL_29;
  }
  unsigned int v8 = SplatValue[16];
  if (SplatValue && v8 == 16) {
    goto LABEL_4;
  }
  uint64_t v9 = *(void *)SplatValue;
  if (v8 > 0x14 || v9 == 0 || (*(_DWORD *)(*(void *)SplatValue + 8) & 0xFE) != 18) {
    goto LABEL_29;
  }
  SplatValue = (unsigned __int8 *)llvm::Constant::getSplatValue((llvm::Constant *)SplatValue, 0);
  if (SplatValue && SplatValue[16] == 16)
  {
LABEL_4:
    if (sub_1CC1839F8((llvm::APInt *)(SplatValue + 24))) {
      return 1;
    }
  }
  else if (*(unsigned char *)(v9 + 8) == 18)
  {
    int v12 = *(_DWORD *)(v9 + 32);
    if (v12)
    {
      int v13 = 0;
      LOBYTE(v14) = 0;
      int v15 = -v12;
LABEL_19:
      ++v13;
      while (1)
      {
        AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)v7, (llvm::Type *)(v13 - 1));
        if (!AggregateElement) {
          break;
        }
        int v17 = *((unsigned __int8 *)AggregateElement + 16);
        if ((v17 - 11) >= 2)
        {
          if (v17 != 16 || !sub_1CC1839F8((llvm::APInt *)(AggregateElement + 3))) {
            break;
          }
          uint64_t v14 = 1;
          if (v15 + v13) {
            goto LABEL_19;
          }
          return v14;
        }
        ++v13;
        if (v15 + v13 == 1)
        {
          if (v14) {
            return 1;
          }
          break;
        }
      }
    }
  }
LABEL_29:
  unsigned int v18 = v7[2].u8[0];
  if (v7 && v18 == 16)
  {
    uint64_t v19 = v7[4].u32[0];
    if (v19 <= 0x40)
    {
      int8x8_t v20 = v7[3];
      goto LABEL_33;
    }
    int v27 = 0;
    unint64_t v28 = (unint64_t)(v19 + 63) >> 6;
    unint64_t v29 = (int8x8_t *)v7[3];
    do
    {
      int8x8_t v30 = *v29++;
      uint8x8_t v31 = (uint8x8_t)vcnt_s8(v30);
      v31.i16[0] = vaddlv_u8(v31);
      v27 += v31.i32[0];
      --v28;
    }
    while (v28);
LABEL_49:
    if (v27 == 1) {
      return 1;
    }
    goto LABEL_66;
  }
  int8x8_t v22 = *v7;
  if (v18 > 0x14 || *(void *)&v22 == 0 || (*(_DWORD *)(*(void *)v7 + 8) & 0xFE) != 18) {
    goto LABEL_66;
  }
  int v25 = (int8x8_t *)llvm::Constant::getSplatValue((llvm::Constant *)v7, 0);
  if (!v25 || v25[2].i8[0] != 16)
  {
    if (*(unsigned char *)(*(void *)&v22 + 8) == 18)
    {
      int v32 = *(_DWORD *)(*(void *)&v22 + 32);
      if (v32)
      {
        unsigned int v33 = 0;
        char v34 = 0;
        while (1)
        {
          unsigned int v35 = (int8x8_t *)llvm::Constant::getAggregateElement((llvm::Constant *)v7, v33);
          if (!v35) {
            break;
          }
          int v36 = v35[2].u8[0];
          if ((v36 - 11) >= 2)
          {
            if (v36 != 16) {
              goto LABEL_66;
            }
            uint64_t v37 = v35[4].u32[0];
            if (v37 > 0x40)
            {
              int v39 = 0;
              unint64_t v40 = (unint64_t)(v37 + 63) >> 6;
              unint64_t v41 = (int8x8_t *)v35[3];
              do
              {
                int8x8_t v42 = *v41++;
                uint8x8_t v43 = (uint8x8_t)vcnt_s8(v42);
                v43.i16[0] = vaddlv_u8(v43);
                v39 += v43.i32[0];
                --v40;
              }
              while (v40);
              if (v39 != 1) {
                goto LABEL_66;
              }
            }
            else
            {
              uint8x8_t v38 = (uint8x8_t)vcnt_s8(v35[3]);
              v38.i16[0] = vaddlv_u8(v38);
              if (v38.u32[0] != 1) {
                goto LABEL_66;
              }
            }
            char v34 = 1;
          }
          unsigned int v33 = (llvm::Type *)(v33 + 1);
          if (v33 == v32)
          {
            if (v34) {
              return 1;
            }
            goto LABEL_66;
          }
        }
      }
    }
    goto LABEL_66;
  }
  uint64_t v26 = v25[4].u32[0];
  if (v26 > 0x40)
  {
    int v27 = 0;
    unint64_t v52 = (unint64_t)(v26 + 63) >> 6;
    uint64_t v53 = (int8x8_t *)v25[3];
    do
    {
      int8x8_t v54 = *v53++;
      uint8x8_t v55 = (uint8x8_t)vcnt_s8(v54);
      v55.i16[0] = vaddlv_u8(v55);
      v27 += v55.i32[0];
      --v52;
    }
    while (v52);
    goto LABEL_49;
  }
  int8x8_t v20 = v25[3];
LABEL_33:
  uint8x8_t v21 = (uint8x8_t)vcnt_s8(v20);
  v21.i16[0] = vaddlv_u8(v21);
  if (v21.u32[0] == 1) {
    return 1;
  }
LABEL_66:
  int v44 = v7[2].u8[0];
  if (v44 == 5)
  {
    if (v7[2].i16[1] == 25
      && (sub_1CBF5270C((uint64_t)&__src, *(llvm::Constant **)&v7[-4 * (v7[2].i32[1] & 0x7FFFFFF)]) & 1) != 0)
    {
      return 1;
    }
  }
  else if (v44 == 53 && (sub_1CBF5250C((uint64_t)&__src, *(llvm::Constant **)&v7[-8]) & 1) != 0)
  {
    return 1;
  }
  int v45 = v7[2].u8[0];
  if (v45 == 5)
  {
    if (v7[2].i16[1] == 26
      && (sub_1CC03F7B4((uint64_t)&__src, *(unint64_t ***)&v7[-4 * (v7[2].i32[1] & 0x7FFFFFF)]) & 1) != 0)
    {
      return 1;
    }
  }
  else if (v45 == 54 && (sub_1CC03F5D4((uint64_t)&__src, *(unsigned __int8 **)&v7[-8]) & 1) != 0)
  {
    return 1;
  }
  if (a3 == 6) {
    return 0;
  }
  uint64_t v46 = (a3 + 1);
  unsigned int v47 = v7[2].u8[0];
  if (!a2)
  {
    if (v7[2].u8[0] <= 0x42u)
    {
      if (v47 == 5)
      {
        int v48 = v7[2].u16[1];
LABEL_119:
        if (v48 != 13) {
          goto LABEL_231;
        }
        uint64_t v57 = &v7[-4 * (v7[2].i32[1] & 0x7FFFFFF)];
        int8x8_t v50 = *v57;
        if (!*(void *)v57) {
          goto LABEL_231;
        }
        int8x8_t v51 = v57[4];
        if (!*(void *)&v51) {
          goto LABEL_231;
        }
        goto LABEL_122;
      }
LABEL_99:
      if (v47 != 41) {
        goto LABEL_226;
      }
      int8x8_t v50 = v7[-8];
      if (v50)
      {
        int8x8_t v51 = v7[-4];
        if (v51)
        {
LABEL_122:
          if ((a2 & 1) == 0 && (!*(unsigned char *)(a4 + 40) || (v7[2].i8[1] & 6) == 0)) {
            goto LABEL_226;
          }
          int v58 = *(unsigned __int8 *)(*(void *)&v50 + 16);
          if (v58 == 56)
          {
            if (*(void *)&v51 != *(void *)(*(void *)&v50 - 64))
            {
              int v60 = (void *)(*(void *)&v50 - 32);
LABEL_144:
              if (*(void *)&v51 != *v60) {
                goto LABEL_146;
              }
            }
          }
          else
          {
            if (v58 != 5 || *(_WORD *)(*(void *)&v50 + 18) != 28) {
              goto LABEL_146;
            }
            int v59 = (void *)(*(void *)&v50 - 32 * (*(_DWORD *)(*(void *)&v50 + 20) & 0x7FFFFFF));
            if (*(void *)&v51 != *v59)
            {
              int v60 = v59 + 4;
              goto LABEL_144;
            }
          }
          if (sub_1CC161328(*(void *)&v51, a2, v46, a4)) {
            return 1;
          }
LABEL_146:
          int v65 = *(unsigned __int8 *)(*(void *)&v51 + 16);
          if (v65 == 56)
          {
            if (*(void *)&v50 == *(void *)(*(void *)&v51 - 64)) {
              goto LABEL_154;
            }
            uint64_t v67 = (void *)(*(void *)&v51 - 32);
          }
          else
          {
            if (v65 != 5 || *(_WORD *)(*(void *)&v51 + 18) != 28)
            {
LABEL_155:
              uint64_t v68 = (llvm::Type *)*v7;
              if ((*(_DWORD *)(*(void *)v7 + 8) & 0xFE) == 0x12) {
                uint64_t v68 = (llvm::Type *)**((void **)v68 + 2);
              }
              unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v68);
              unsigned int v70 = PrimitiveSizeInBits;
              v104.i32[0] = PrimitiveSizeInBits;
              if (PrimitiveSizeInBits > 0x40) {
                llvm::APInt::initSlowCase((llvm::APInt *)&__src);
              }
              unsigned int v106 = PrimitiveSizeInBits;
              __src = 0;
              uint64_t v105 = 0;
              sub_1CC15FBF8(*(void *)&v50, &__src, v46, a4);
              v100.i32[0] = v70;
              uint64_t v99 = 0;
              unsigned int v102 = v70;
              uint64_t v101 = 0;
              sub_1CC15FBF8(*(void *)&v51, &v99, v46, a4);
              if (v104.i32[0] >= 0x41u) {
                operator new[]();
              }
              if (v104.i32[0]) {
                unint64_t v71 = 0xFFFFFFFFFFFFFFFFLL >> -v104.i8[0];
              }
              else {
                unint64_t v71 = 0;
              }
              uint8x8_t v72 = (uint8x8_t)vcnt_s8((int8x8_t)(v71 & ~(v99 & (unint64_t)__src)));
              v72.i16[0] = vaddlv_u8(v72);
              if (v72.u32[0] != 1) {
                goto LABEL_219;
              }
              unsigned int v79 = v102;
              if ((a2 & 1) == 0)
              {
                if (v102 > 0x40)
                {
                  int v81 = 0;
                  int64_t v82 = ((unint64_t)v102 + 63) >> 6;
                  do
                  {
                    BOOL v83 = v82-- < 1;
                    if (v83) {
                      break;
                    }
                    unint64_t v84 = *(void *)(v101 + 8 * v82);
                    v81 += __clz(v84);
                  }
                  while (!v84);
                  unsigned int v85 = v102 | 0xFFFFFFC0;
                  if ((v102 & 0x3F) == 0) {
                    unsigned int v85 = 0;
                  }
                  if (v81 + v85 != v102) {
                    goto LABEL_186;
                  }
                }
                else if (v101)
                {
                  int v80 = 0;
LABEL_221:
                  if (v100.i32[0] >= 0x41u && v99) {
                    MEMORY[0x1D25D9CB0](v99, 0x1000C8000313F17);
                  }
                  if (v106 >= 0x41 && v105) {
                    MEMORY[0x1D25D9CB0](v105, 0x1000C8000313F17);
                  }
                  if (v104.i32[0] >= 0x41u && __src) {
                    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                  }
                  if (!v80) {
                    return 1;
                  }
                  unsigned int v47 = v7[2].u8[0];
LABEL_226:
                  if (v47 < 0x1C)
                  {
                    if (v47 != 5) {
                      return 0;
                    }
                    goto LABEL_231;
                  }
                  goto LABEL_227;
                }
                if (v106 > 0x40)
                {
                  int v87 = 0;
                  int64_t v88 = ((unint64_t)v106 + 63) >> 6;
                  do
                  {
                    BOOL v83 = v88-- < 1;
                    if (v83) {
                      break;
                    }
                    unint64_t v89 = *(void *)(v105 + 8 * v88);
                    v87 += __clz(v89);
                  }
                  while (!v89);
                  int v80 = 0;
                  unsigned int v90 = v106 | 0xFFFFFFC0;
                  if ((v106 & 0x3F) == 0) {
                    unsigned int v90 = 0;
                  }
                  if (v87 + v90 != v106) {
                    goto LABEL_220;
                  }
                  goto LABEL_219;
                }
                if (!v105)
                {
LABEL_219:
                  int v80 = 1;
                  unsigned int v79 = v102;
                  goto LABEL_220;
                }
              }
LABEL_186:
              int v80 = 0;
LABEL_220:
              if (v79 >= 0x41 && v101) {
                MEMORY[0x1D25D9CB0](v101, 0x1000C8000313F17);
              }
              goto LABEL_221;
            }
            unint64_t v66 = (void *)(*(void *)&v51 - 32 * (*(_DWORD *)(*(void *)&v51 + 20) & 0x7FFFFFF));
            if (*(void *)&v50 == *v66) {
              goto LABEL_154;
            }
            uint64_t v67 = v66 + 4;
          }
          if (*(void *)&v50 != *v67) {
            goto LABEL_155;
          }
LABEL_154:
          if ((sub_1CC161328(*(void *)&v50, a2, v46, a4) & 1) == 0) {
            goto LABEL_155;
          }
          return 1;
        }
      }
      unsigned int v47 = 41;
      goto LABEL_227;
    }
    if (v47 == 85) {
      goto LABEL_112;
    }
    if (v47 != 84) {
      goto LABEL_96;
    }
    goto LABEL_114;
  }
  if (v7[2].u8[0] <= 0x37u)
  {
    if (v7[2].u8[0] > 0x34u)
    {
      if (v47 == 53)
      {
        int8x8_t v49 = v7[-8];
        if (v49) {
          goto LABEL_139;
        }
        unsigned int v47 = 53;
        goto LABEL_227;
      }
      if (v47 == 54)
      {
        int8x8_t v49 = v7[-8];
        if (v49) {
          goto LABEL_139;
        }
        unsigned int v47 = 54;
        goto LABEL_227;
      }
      goto LABEL_226;
    }
    if (v47 == 5)
    {
      int v48 = v7[2].u16[1];
      if (v48 != 28)
      {
        if (v48 == 26 || v48 == 25)
        {
          int8x8_t v49 = v7[-4 * (v7[2].i32[1] & 0x7FFFFFF)];
          if (!*(void *)&v49)
          {
LABEL_231:
            unsigned int v92 = v7[2].u16[1];
            if (v92 > 0x1B || ((1 << v92) & 0xC180000) == 0) {
              goto LABEL_245;
            }
            int v91 = 0;
            unsigned int v47 = 5;
            if ((v7[2].i8[1] & 2) == 0) {
              goto LABEL_239;
            }
LABEL_234:
            if (v47 == 54)
            {
LABEL_252:
              __int32 v96 = v7[2].i32[1];
              if ((v96 & 0x40000000) != 0) {
                unsigned int v97 = (int8x8_t *)v7[-1];
              }
              else {
                unsigned int v97 = &v7[-4 * (v96 & 0x7FFFFFF)];
              }
              int8x8_t v49 = *v97;
              goto LABEL_256;
            }
            if (v47 == 5)
            {
              unsigned int v92 = v7[2].u16[1];
              if (v92 == 26) {
                goto LABEL_252;
              }
            }
            else
            {
LABEL_239:
              if (v91)
              {
                unsigned int v93 = v47 - 47;
                if (v93 >= 9 || ((0x183u >> v93) & 1) == 0) {
                  return 0;
                }
                int v94 = a07777767[(char)v93];
                goto LABEL_248;
              }
              if (v47 != 5) {
                return 0;
              }
              unsigned int v92 = v7[2].u16[1];
            }
LABEL_245:
            unsigned int v95 = v92 - 19;
            if (v95 >= 9 || ((0x183u >> v95) & 1) == 0) {
              return 0;
            }
            int v94 = 5;
LABEL_248:
            if ((v7[2].i8[1] & 2) == 0 || v94 != 47 && (v94 != 5 || v7[2].i16[1] != 19)) {
              return 0;
            }
            goto LABEL_252;
          }
LABEL_139:
          uint64_t v64 = 1;
          return sub_1CC161328(*(void *)&v49, v64, v46, a4);
        }
        goto LABEL_119;
      }
      int v73 = &v7[-4 * (v7[2].i32[1] & 0x7FFFFFF)];
      int8x8_t v61 = *v73;
      if (!*(void *)v73) {
        goto LABEL_231;
      }
      int8x8_t v62 = v73[4];
      if (!*(void *)&v62) {
        goto LABEL_231;
      }
LABEL_132:
      uint64_t v14 = 1;
      if ((sub_1CC161328(*(void *)&v61, 1, v46, a4) & 1) != 0
        || (sub_1CC161328(*(void *)&v62, 1, v46, a4) & 1) != 0)
      {
        return v14;
      }
      int8x8_t v104 = v62;
      LODWORD(v63) = *(unsigned __int8 *)(*(void *)&v61 + 16);
      if (v63 == 5)
      {
        LODWORD(v63) = *(unsigned __int16 *)(*(void *)&v61 + 18);
        if (v63 != 15
          || !sub_1CC03F414((uint64_t)&__src, *(llvm::Constant **)(*(void *)&v61- 32 * (*(_DWORD *)(*(void *)&v61 + 20) & 0x7FFFFFF))))
        {
          goto LABEL_203;
        }
        uint64_t v63 = *(void *)(*(void *)&v61 - 32 * (*(_DWORD *)(*(void *)&v61 + 20) & 0x7FFFFFF) + 32);
      }
      else
      {
        if (v63 != 43
          || !sub_1CBF535C4((uint64_t)&__src, *(llvm::Constant **)(*(void *)&v61 - 64)))
        {
          goto LABEL_203;
        }
        uint64_t v63 = *(void *)(*(void *)&v61 - 32);
      }
      if (*(void *)&v104 == v63) {
        return v14;
      }
LABEL_203:
      int8x8_t v100 = v61;
      int v86 = *(unsigned __int8 *)(*(void *)&v62 + 16);
      if (v86 == 43)
      {
        if (!sub_1CBF535C4((uint64_t)&v99, *(llvm::Constant **)(*(void *)&v62 - 64))
          || *(void *)&v100 != *(void *)(*(void *)&v62 - 32))
        {
          return 0;
        }
      }
      else
      {
        if (v86 == 5) {
          LOBYTE(v63) = *(_WORD *)(*(void *)&v62 + 18) == 15
        }
                     && sub_1CC03F414((uint64_t)&v99, *(llvm::Constant **)(*(void *)&v62- 32 * (*(_DWORD *)(*(void *)&v62 + 20) & 0x7FFFFFF)))&& *(void *)&v100 == *(void *)(*(void *)&v62- 32 * (*(_DWORD *)(*(void *)&v62 + 20) & 0x7FFFFFF)+ 32);
        return (v86 == 5) & v63;
      }
      return v14;
    }
    goto LABEL_99;
  }
  if (v7[2].u8[0] > 0x53u)
  {
    if (v47 != 84)
    {
      if (v47 != 85) {
        goto LABEL_226;
      }
LABEL_112:
      if (!sub_1CC161328(*(void *)&v7[-8], a2, v46, a4)) {
        return 0;
      }
      goto LABEL_113;
    }
LABEL_114:
    int8x8_t v56 = v7[-4];
    if (*(void *)&v56
      && !*(unsigned char *)(*(void *)&v56 + 16)
      && *(void *)(*(void *)&v56 + 24) == *(void *)&v7[9])
    {
      if ((*(unsigned char *)(*(void *)&v56 + 33) & 0x20) != 0 && *(_DWORD *)(*(void *)&v56 + 36) == 274)
      {
        unint64_t v74 = &v7[-4 * (v7[2].i32[1] & 0x7FFFFFF)];
        if (*v74)
        {
          int8x8_t v75 = v74[4];
          if (v75) {
            goto LABEL_183;
          }
        }
      }
      if ((*(unsigned char *)(*(void *)&v56 + 33) & 0x20) != 0
        && *(_DWORD *)(*(void *)&v56 + 36) == 275
        && (uint64_t v76 = &v7[-4 * (v7[2].i32[1] & 0x7FFFFFF)], *(void *)v76)
        && (int8x8_t v75 = v76[4], *(void *)&v75)
        || (*(unsigned char *)(*(void *)&v56 + 33) & 0x20) != 0
        && *(_DWORD *)(*(void *)&v56 + 36) == 305
        && (uint64_t v77 = &v7[-4 * (v7[2].i32[1] & 0x7FFFFFF)], *(void *)v77)
        && (int8x8_t v75 = v77[4], *(void *)&v75)
        || (*(unsigned char *)(*(void *)&v56 + 33) & 0x20) != 0
        && *(_DWORD *)(*(void *)&v56 + 36) == 306
        && (uint64_t v78 = &v7[-4 * (v7[2].i32[1] & 0x7FFFFFF)], *(void *)v78)
        && (int8x8_t v75 = v78[4], *(void *)&v75))
      {
LABEL_183:
        if (!((uint64_t (*)(void))sub_1CC161328)()) {
          return 0;
        }
        int8x8_t v49 = v75;
        goto LABEL_256;
      }
    }
    unsigned int v47 = 84;
    goto LABEL_227;
  }
  if (v47 != 56)
  {
LABEL_96:
    if (v47 != 67) {
      goto LABEL_226;
    }
LABEL_113:
    int8x8_t v49 = v7[-4];
LABEL_256:
    uint64_t v64 = a2;
    return sub_1CC161328(*(void *)&v49, v64, v46, a4);
  }
  int8x8_t v61 = v7[-8];
  if (v61)
  {
    int8x8_t v62 = v7[-4];
    if (v62) {
      goto LABEL_132;
    }
  }
  unsigned int v47 = 56;
LABEL_227:
  uint64_t v14 = 0;
  if (v47 <= 0x37 && ((1 << v47) & 0xC1800000000000) != 0)
  {
    int v91 = 1;
    goto LABEL_234;
  }
  return v14;
}

uint64_t llvm::isKnownNonZero(llvm *this, const llvm::Value *a2, const llvm::DataLayout *a3, uint64_t a4, llvm::AssumptionCache *a5, const llvm::Instruction *a6, const llvm::DominatorTree *a7)
{
  if (!a5 || !*((void *)a5 + 5))
  {
    if (!this || *((unsigned __int8 *)this + 16) < 0x1Cu || (a5 = this, !*((void *)this + 5))) {
      a5 = 0;
    }
  }
  v8[0] = a2;
  v8[1] = a4;
  v8[2] = a5;
  void v8[3] = a6;
  v8[4] = 0;
  char v9 = (char)a7;
  return sub_1CC1620B8((uint64_t)this, (uint64_t)a3, (uint64_t)v8);
}

uint64_t sub_1CC1620B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(unsigned __int8 *)(*(void *)a1 + 8);
  if (v3 == 19) {
    return 0;
  }
  if (v3 == 18)
  {
    unsigned int v5 = *(_DWORD *)(*(void *)a1 + 32);
    int v8 = v5;
    if (v5 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v7);
    }
    if (v5) {
      unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
    }
    else {
      unint64_t v6 = 0;
    }
  }
  else
  {
    unint64_t v6 = 1;
    int v8 = 1;
  }
  unint64_t v7 = v6;
  return sub_1CC17FE50(a1, &v7, a2, a3);
}

uint64_t llvm::isKnownPositive(llvm *this, const llvm::Value *a2, const llvm::DataLayout *a3, const llvm::DataLayout *a4, llvm::AssumptionCache *a5, const llvm::Instruction *a6, const llvm::DominatorTree *a7)
{
  unsigned int v14 = *((unsigned __int8 *)this + 16);
  if (this && v14 == 16)
  {
    int8x8_t v22 = (char *)this + 24;
    return sub_1CBBE05BC((uint64_t)v22);
  }
  else
  {
    if (!a5 || (int v15 = a5, !*((void *)a5 + 5)))
    {
      if (!this || v14 < 0x1C || (int v15 = this, !*((void *)this + 5))) {
        int v15 = 0;
      }
    }
    v30[0] = a2;
    v30[1] = a4;
    v30[2] = v15;
    v30[3] = a6;
    v30[4] = 0;
    char v31 = (char)a7;
    sub_1CC16089C((uint64_t *)this, a3, v30, (uint64_t)&v26);
    unsigned int v16 = v27;
    int v17 = (uint64_t *)(v26 + 8 * ((v27 - 1) >> 6));
    if (v27 < 0x41) {
      int v17 = &v26;
    }
    uint64_t v18 = 1 << (v27 - 1);
    uint64_t v19 = *v17;
    if (v29 >= 0x41 && v28)
    {
      uint64_t v23 = v19;
      uint64_t v24 = 1 << (v27 - 1);
      MEMORY[0x1D25D9CB0](v28, 0x1000C8000313F17);
      uint64_t v19 = v23;
      uint64_t v18 = v24;
      unsigned int v16 = v27;
    }
    uint64_t v20 = v18 & v19;
    if (v16 >= 0x41 && v26)
    {
      uint64_t v25 = v20;
      MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
      uint64_t v20 = v25;
    }
    if (v20) {
      return llvm::isKnownNonZero(this, a2, a3, (uint64_t)a4, a5, a6, a7);
    }
    else {
      return 0;
    }
  }
}

unint64_t llvm::isKnownNegative(llvm *this, const llvm::Value *a2, const llvm::DataLayout *a3, const llvm::DataLayout *a4, llvm::AssumptionCache *a5, const llvm::Instruction *a6, const llvm::DominatorTree *a7)
{
  if (!a5 || !*((void *)a5 + 5))
  {
    if (!this || *((unsigned __int8 *)this + 16) < 0x1Cu || (a5 = this, !*((void *)this + 5))) {
      a5 = 0;
    }
  }
  v20[0] = a2;
  v20[1] = a4;
  v20[2] = a5;
  v20[3] = a6;
  v20[4] = 0;
  char v21 = (char)a7;
  sub_1CC16089C((uint64_t *)this, a3, v20, (uint64_t)&v16);
  unint64_t v7 = (unint64_t *)&v18;
  unsigned int v8 = v19 - 1;
  if (v19 >= 0x41) {
    unint64_t v7 = (unint64_t *)(v18 + 8 * (v8 >> 6));
  }
  unint64_t v9 = *v7;
  if (v19 >= 0x41 && v18 != 0)
  {
    unint64_t v12 = v9;
    char v14 = v19 - 1;
    MEMORY[0x1D25D9CB0]();
    unint64_t v9 = v12;
    LOBYTE(v8) = v14;
  }
  if (v17 >= 0x41 && v16)
  {
    unint64_t v13 = v9;
    char v15 = v8;
    MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
    unint64_t v9 = v13;
    LOBYTE(v8) = v15;
  }
  return (v9 >> v8) & 1;
}

uint64_t llvm::isKnownNonEqual(llvm *this, const llvm::Value *a2, const llvm::Value *a3, const llvm::DataLayout *a4, llvm::AssumptionCache *a5, const llvm::Instruction *a6, const llvm::DominatorTree *a7)
{
  if (!a5 || !*((void *)a5 + 5))
  {
    if (!a2 || *((unsigned __int8 *)a2 + 16) < 0x1Cu || (a5 = a2, !*((void *)a2 + 5)))
    {
      if (!this || *((unsigned __int8 *)this + 16) < 0x1Cu || (a5 = this, !*((void *)this + 5))) {
        a5 = 0;
      }
    }
  }
  v8[0] = a3;
  v8[1] = a4;
  v8[2] = a5;
  void v8[3] = a6;
  v8[4] = 0;
  char v9 = (char)a7;
  return sub_1CC1624EC((uint64_t *)this, (uint64_t *)a2, 0, (uint64_t)v8);
}

uint64_t sub_1CC1624EC(uint64_t *a1, uint64_t *a2, unsigned int a3, uint64_t a4)
{
  if (a1 == a2) {
    return 0;
  }
  v84[19] = v4;
  v84[20] = v5;
  unsigned int v8 = a2;
  char v9 = a1;
  while (1)
  {
    uint64_t result = 0;
    if (a3 > 5 || *v9 != *v8) {
      return result;
    }
    unsigned int v11 = *((unsigned __int8 *)v9 + 16);
    BOOL v12 = v11 > 0x1B || v11 == 5;
    int v13 = v12;
    if (v12) {
      char v14 = v9;
    }
    else {
      char v14 = 0;
    }
    unsigned int v15 = *((unsigned __int8 *)v8 + 16);
    BOOL v16 = v15 > 0x1B || v15 == 5;
    int v17 = v16;
    if (v16) {
      uint64_t v18 = (uint64_t)v8;
    }
    else {
      uint64_t v18 = 0;
    }
    if (v13 != 1 || v17 == 0) {
      goto LABEL_121;
    }
    unsigned int v20 = *((unsigned __int8 *)v14 + 16);
    BOOL v21 = v14 && v20 > 0x1B;
    int v22 = v21 ? v20 - 28 : *((unsigned __int16 *)v14 + 9);
    unsigned int v23 = *(unsigned __int8 *)(v18 + 16);
    BOOL v24 = v18 && v23 > 0x1B;
    int v25 = v24 ? v23 - 28 : *(unsigned __int16 *)(v18 + 18);
    if (v22 != v25) {
      goto LABEL_121;
    }
    sub_1CC183AA0(v14, v18, (uint64_t)&v80);
    if (!(_BYTE)v82)
    {
      if (*((unsigned char *)v9 + 16) != 83 || v9[5] != v8[5]) {
        goto LABEL_121;
      }
      int v80 = v84;
      int v81 = v84;
      uint64_t v82 = 8;
      unsigned int v83 = 0;
      int v26 = *((_DWORD *)v9 + 5);
      if ((v26 & 0x40000000) != 0)
      {
        uint64_t v28 = (uint64_t *)*(v9 - 1);
        uint64_t v27 = v26 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v27 = v26 & 0x7FFFFFF;
        uint64_t v28 = &v9[-4 * v27];
      }
      if (!v27)
      {
LABEL_116:
        char v59 = 1;
        goto LABEL_118;
      }
      char v29 = 0;
      int8x8_t v30 = &v28[4 * *((unsigned int *)v9 + 15)];
      char v31 = &v30[v27];
      while (2)
      {
        uint64_t v32 = *v30;
        unsigned int v33 = (char *)v81;
        uint64_t v34 = HIDWORD(v82);
        if (v81 == v80)
        {
          if (HIDWORD(v82))
          {
            unsigned int v35 = 0;
            uint64_t v36 = 8 * HIDWORD(v82);
            uint64_t v37 = v81;
            while (*v37 != v32)
            {
              if (*v37 == -2) {
                unsigned int v35 = v37;
              }
              ++v37;
              v36 -= 8;
              if (!v36)
              {
                if (!v35) {
                  goto LABEL_59;
                }
                *unsigned int v35 = v32;
                --v83;
                goto LABEL_83;
              }
            }
            goto LABEL_99;
          }
LABEL_59:
          unsigned int v38 = v82;
          if (HIDWORD(v82) < v82)
          {
            ++HIDWORD(v82);
            v81[v34] = v32;
            goto LABEL_83;
          }
        }
        else
        {
          unsigned int v38 = v82;
        }
        if (3 * v38 <= 4 * (HIDWORD(v82) - v83))
        {
          if (v38 >= 0x40) {
            v38 *= 2;
          }
          else {
            unsigned int v38 = 128;
          }
        }
        else if (v38 - HIDWORD(v82) >= v38 >> 3)
        {
LABEL_64:
          unsigned int v39 = v38 - 1;
          unsigned int v40 = (v38 - 1) & ((v32 >> 4) ^ (v32 >> 9));
          unint64_t v41 = &v33[8 * v40];
          uint64_t v42 = *(void *)v41;
          if (*(void *)v41 != -1)
          {
            uint8x8_t v43 = 0;
            int v44 = 1;
            while (v42 != v32)
            {
              if (v43) {
                BOOL v45 = 0;
              }
              else {
                BOOL v45 = v42 == -2;
              }
              if (v45) {
                uint8x8_t v43 = (uint64_t *)v41;
              }
              unsigned int v46 = v40 + v44++;
              unsigned int v40 = v46 & v39;
              unint64_t v41 = &v33[8 * (v46 & v39)];
              uint64_t v42 = *(void *)v41;
              if (*(void *)v41 == -1) {
                goto LABEL_76;
              }
            }
            goto LABEL_99;
          }
          uint8x8_t v43 = 0;
LABEL_76:
          if (v43) {
            unsigned int v47 = v43;
          }
          else {
            unsigned int v47 = (uint64_t *)v41;
          }
          if (*v47 == v32)
          {
LABEL_99:
            if (++v30 == v31) {
              goto LABEL_116;
            }
            continue;
          }
          if (*v47 == -2) {
            --v83;
          }
          else {
            ++HIDWORD(v82);
          }
          *unsigned int v47 = v32;
LABEL_83:
          int v48 = (unsigned __int8 *)sub_1CBF73380((uint64_t)v9, v32);
          int8x8_t v49 = (unsigned __int8 *)sub_1CBF73380((uint64_t)v8, v32);
          uint64_t v78 = 0;
          uint64_t v79 = 0;
          long long v74 = (unint64_t)&v79;
          if (sub_1CBF528D8((uint64_t)&v74, v48)
            && (v77[0] = &v78, v77[1] = 0, sub_1CBF528D8((uint64_t)v77, v49)))
          {
            uint64_t v50 = *(unsigned int *)(v79 + 8);
            if (v50 > 0x40) {
              BOOL v51 = memcmp(*(const void **)v79, *v78, ((unint64_t)(v50 + 63) >> 3) & 0x3FFFFFF8) == 0;
            }
            else {
              BOOL v51 = *(void *)v79 == (void)*v78;
            }
            int v57 = v51;
            char v58 = v29 | ~(_BYTE)v57;
            if (v57) {
              int v56 = 1;
            }
            else {
              int v56 = 3;
            }
            if (v58) {
              goto LABEL_97;
            }
          }
          else if (v29)
          {
            goto LABEL_117;
          }
          long long v52 = *(_OWORD *)(a4 + 16);
          long long v74 = *(_OWORD *)a4;
          long long v75 = v52;
          long long v76 = *(_OWORD *)(a4 + 32);
          uint64_t v53 = *(void *)(v32 + 40);
          if (v53 == v32 + 40)
          {
            uint64_t v54 = 0;
          }
          else
          {
            if (v53) {
              uint64_t v54 = v53 - 24;
            }
            else {
              uint64_t v54 = 0;
            }
            if (*(unsigned __int8 *)(v54 + 16) - 29 >= 0xB) {
              uint64_t v54 = 0;
            }
          }
          *(void *)&long long v75 = v54;
          int v55 = sub_1CC1624EC(v48, v49, a3 + 1, &v74);
          v29 |= v55;
          int v56 = v55 ^ 1;
LABEL_97:
          if (v56 != 3 && v56)
          {
LABEL_117:
            char v59 = 0;
LABEL_118:
            if (v81 != v80) {
              free(v81);
            }
            if (v59) {
              return 1;
            }
LABEL_121:
            if ((sub_1CC183EE0((uint64_t)v9, (uint64_t)v8, a3, a4) & 1) != 0
              || (sub_1CC183EE0((uint64_t)v8, (uint64_t)v9, a3, a4) & 1) != 0
              || (sub_1CC183F2C((uint64_t)v9, (uint64_t)v8, a3, a4) & 1) != 0
              || (sub_1CC183F2C((uint64_t)v8, (uint64_t)v9, a3, a4) & 1) != 0
              || (sub_1CC1840CC((uint64_t)v9, (uint64_t)v8, a3, a4) & 1) != 0
              || (sub_1CC1840CC((uint64_t)v8, (uint64_t)v9, a3, a4) & 1) != 0)
            {
              return 1;
            }
            int v60 = (*(_DWORD *)(*v9 + 8) & 0xFE) == 0x12
                ? *(unsigned __int8 *)(**(void **)(*v9 + 16) + 8)
                : *(_DWORD *)(*v9 + 8);
            if (v60 == 13)
            {
              sub_1CC16089C(v9, a3, (const llvm::DataLayout **)a4, (uint64_t)&v80);
              sub_1CC16089C(v8, a3, (const llvm::DataLayout **)a4, (uint64_t)&v74);
              if (v81 > 0x40)
              {
                unint64_t v63 = 0;
                uint64_t v61 = v75;
                while ((*(void *)(v75 + v63) & v80[v63 / 8]) == 0)
                {
                  v63 += 8;
                  if (((((unint64_t)v81 + 63) >> 3) & 0x3FFFFFF8) == v63) {
                    goto LABEL_137;
                  }
                }
LABEL_133:
                BOOL v62 = 0;
              }
              else
              {
                uint64_t v61 = v75;
                if (((unint64_t)v75 & (unint64_t)v80) != 0) {
                  goto LABEL_133;
                }
LABEL_137:
                if (DWORD2(v74) > 0x40)
                {
                  uint64_t v64 = (uint64_t *)v74;
                  int v65 = (uint64_t *)v82;
                  unint64_t v66 = (((unint64_t)DWORD2(v74) + 63) >> 6) - 1;
                  do
                  {
                    uint64_t v68 = *v64++;
                    uint64_t v67 = v68;
                    uint64_t v69 = *v65++;
                    uint64_t v70 = v69 & v67;
                    BOOL v62 = (v69 & v67) == 0;
                    BOOL v72 = v66-- != 0;
                  }
                  while (!v70 && v72);
                }
                else
                {
                  BOOL v62 = (v82 & (unint64_t)v74) == 0;
                }
              }
              if (DWORD2(v75) >= 0x41 && v61 != 0) {
                MEMORY[0x1D25D9CB0]();
              }
              if (DWORD2(v74) >= 0x41 && (void)v74) {
                MEMORY[0x1D25D9CB0](v74, 0x1000C8000313F17);
              }
              if (v83 >= 0x41 && v82) {
                MEMORY[0x1D25D9CB0](v82, 0x1000C8000313F17);
              }
              if (v81 >= 0x41)
              {
                if (v80) {
                  MEMORY[0x1D25D9CB0](v80, 0x1000C8000313F17);
                }
              }
              if (!v62) {
                return 1;
              }
            }
            return 0;
          }
          goto LABEL_99;
        }
        break;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v80, v38);
      unsigned int v38 = v82;
      unsigned int v33 = (char *)v81;
      goto LABEL_64;
    }
    char v9 = v80;
    unsigned int v8 = v81;
    ++a3;
    if (v80 == v81) {
      return 0;
    }
  }
}

BOOL llvm::MaskedValueIsZero(llvm *this, const llvm::Value *a2, const llvm::APInt *a3, const llvm::DataLayout *a4, const llvm::DataLayout *a5, llvm::AssumptionCache *a6, const llvm::Instruction *a7, const llvm::DominatorTree *a8, BOOL a9)
{
  if (!a6 || !*((void *)a6 + 5))
  {
    if (!this || *((unsigned __int8 *)this + 16) < 0x1Cu || (a6 = this, !*((void *)this + 5))) {
      a6 = 0;
    }
  }
  v24[0] = a3;
  v24[1] = a5;
  v24[2] = a6;
  v24[3] = a7;
  v24[4] = 0;
  char v25 = (char)a8;
  unsigned int v10 = *((_DWORD *)a2 + 2);
  unsigned int v27 = v10;
  if (v10 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v26);
  }
  unsigned int v29 = v10;
  unint64_t v26 = 0;
  uint64_t v28 = 0;
  sub_1CC15FBF8((uint64_t)this, (int8x8_t *)&v26, a4, v24);
  uint64_t v11 = *((unsigned int *)a2 + 2);
  if (v11 > 0x40)
  {
    unint64_t v14 = (unint64_t)(v11 + 63) >> 6;
    unsigned int v15 = *(uint64_t **)a2;
    BOOL v16 = (uint64_t *)v26;
    unint64_t v17 = v14 - 1;
    do
    {
      uint64_t v19 = *v15++;
      uint64_t v18 = v19;
      uint64_t v20 = *v16++;
      uint64_t v21 = v18 & ~v20;
      BOOL v12 = v21 == 0;
      BOOL v23 = v17-- != 0;
    }
    while (!v21 && v23);
  }
  else
  {
    BOOL v12 = (*(void *)a2 & ~v26) == 0;
  }
  if (v29 >= 0x41 && v28) {
    MEMORY[0x1D25D9CB0](v28, 0x1000C8000313F17);
  }
  if (v27 >= 0x41 && v26) {
    MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
  }
  return v12;
}

uint64_t llvm::ComputeNumSignBits(llvm *this, const llvm::Value *a2, const llvm::DataLayout *a3, uint64_t a4, llvm::AssumptionCache *a5, const llvm::Instruction *a6, const llvm::DominatorTree *a7)
{
  if (!a5 || !*((void *)a5 + 5))
  {
    if (!this || *((unsigned __int8 *)this + 16) < 0x1Cu || (a5 = this, !*((void *)this + 5))) {
      a5 = 0;
    }
  }
  v8[0] = a2;
  v8[1] = a4;
  v8[2] = a5;
  void v8[3] = a6;
  v8[4] = 0;
  char v9 = (char)a7;
  return sub_1CC162D6C(this, a3, (uint64_t)v8);
}

uint64_t sub_1CC162D6C(llvm::Constant *a1, unsigned int a2, uint64_t a3)
{
  int v3 = *(unsigned __int8 *)(*(void *)a1 + 8);
  if (v3 == 19) {
    return 1;
  }
  if (v3 == 18)
  {
    unsigned int v5 = *(_DWORD *)(*(void *)a1 + 32);
    int v8 = v5;
    if (v5 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v7);
    }
    if (v5) {
      unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
    }
    else {
      unint64_t v6 = 0;
    }
  }
  else
  {
    unint64_t v6 = 1;
    int v8 = 1;
  }
  unint64_t v7 = v6;
  return sub_1CC173D40(a1, (uint64_t)&v7, a2, a3);
}

uint64_t llvm::ComputeMaxSignificantBits(llvm *this, const llvm::Value *a2, const llvm::DataLayout *a3, uint64_t a4, llvm::AssumptionCache *a5, const llvm::Instruction *a6, const llvm::DominatorTree *a7)
{
  if (!a5 || !*((void *)a5 + 5))
  {
    if (!this || *((unsigned __int8 *)this + 16) < 0x1Cu || (a5 = this, !*((void *)this + 5))) {
      a5 = 0;
    }
  }
  v11[0] = a2;
  v11[1] = a4;
  v11[2] = a5;
  void v11[3] = a6;
  v11[4] = 0;
  char v12 = 1;
  int v8 = sub_1CC162D6C(this, a3, (uint64_t)v11);
  char v9 = *(llvm::Type **)this;
  if ((*(_DWORD *)(*(void *)this + 8) & 0xFE) == 0x12) {
    char v9 = (llvm::Type *)**((void **)v9 + 2);
  }
  return llvm::Type::getPrimitiveSizeInBits(v9) - v8 + 1;
}

uint64_t llvm::computeKnownBitsFromRangeMetadata(uint64_t this, void **a2, llvm::KnownBits *a3)
{
  uint64_t v4 = this;
  uint64_t v5 = *((unsigned int *)a2 + 2);
  unsigned int v6 = *(_DWORD *)(this + 8);
  if (v5 > 0x40)
  {
    this = (uint64_t)memset(*a2, 255, ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8);
    unsigned int v7 = *((_DWORD *)a2 + 2);
  }
  else
  {
    *a2 = (void *)-1;
    unsigned int v7 = v5;
  }
  unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
  if (v7 - 1 < 0x40) {
    goto LABEL_4;
  }
  if (!v7)
  {
    unint64_t v8 = 0;
    goto LABEL_4;
  }
  if (v7 < 0x41)
  {
LABEL_4:
    char v9 = a2;
    goto LABEL_5;
  }
  char v9 = (void **)((char *)*a2 + 8 * (((unint64_t)v7 + 63) >> 6) - 8);
LABEL_5:
  *char v9 = (void *)((unint64_t)*v9 & v8);
  unsigned int v10 = a2 + 2;
  uint64_t v11 = *((unsigned int *)a2 + 6);
  if (v11 > 0x40)
  {
    this = (uint64_t)memset(a2[2], 255, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
    LODWORD(v11) = *((_DWORD *)a2 + 6);
  }
  else
  {
    *unsigned int v10 = -1;
  }
  LODWORD(v12) = v6 >> 1;
  unint64_t v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
  if ((v11 - 1) > 0x3F)
  {
    if (v11)
    {
      if (v11 >= 0x41)
      {
        unsigned int v33 = (void *)(*v10 + 8 * ((((unint64_t)v11 + 63) >> 6) - 1));
        goto LABEL_44;
      }
    }
    else
    {
      unint64_t v13 = 0;
    }
    unsigned int v33 = a2 + 2;
LABEL_44:
    *v33 &= v13;
    if (v6 < 2) {
      return this;
    }
    uint64_t v34 = 0;
    if (v12 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v12;
    }
    uint64_t v72 = v12;
    while (1)
    {
      unsigned int v35 = (void *)(v4 - 8 * *(unsigned int *)(v4 + 8) + 16 * v34);
      uint64_t v36 = *(void *)(*v35 + 128);
      uint64_t v37 = *(void *)(v35[1] + 128);
      unsigned int v38 = *(_DWORD *)(v36 + 32);
      if (v38 > 0x40) {
        operator new[]();
      }
      unsigned int v39 = *(char **)(v36 + 24);
      unsigned int v40 = *(_DWORD *)(v37 + 32);
      if (v40 > 0x40) {
        operator new[]();
      }
      uint64_t v41 = *(void *)(v37 + 24);
      unsigned int v80 = v38;
      uint64_t v79 = v39;
      unsigned int v82 = v40;
      uint64_t v81 = v41;
      llvm::ConstantRange::getUnsignedMax(&v79, (uint64_t)&__src);
      llvm::ConstantRange::getUnsignedMin((uint64_t)&v79, (uint64_t)&v73);
      unsigned int v42 = v74;
      if (v74 > 0x40)
      {
        llvm::APInt::xorAssignSlowCase((uint64_t)&v73, (uint64_t **)&__src);
        unsigned int v42 = v74;
        uint64_t v43 = v73;
        unsigned int v78 = v74;
        uint64_t v77 = v73;
        unsigned int v74 = 0;
        if (v78 >= 0x41)
        {
          int v61 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v77);
          if (v43)
          {
            MEMORY[0x1D25D9CB0](v43, 0x1000C8000313F17);
            if (v74 >= 0x41)
            {
              if (v73) {
                MEMORY[0x1D25D9CB0](v73, 0x1000C8000313F17);
              }
            }
          }
          int v44 = v61;
          goto LABEL_54;
        }
      }
      else
      {
        uint64_t v43 = v73 ^ (unint64_t)__src;
      }
      int v44 = v42 + __clz(v43) - 64;
LABEL_54:
      if (v76 >= 0x41 && __src)
      {
        int v62 = v44;
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        int v44 = v62;
      }
      unsigned int v78 = v5;
      if (v5 > 0x40) {
        operator new[]();
      }
      unint64_t v45 = 0;
      uint64_t v77 = 0;
      if (v44)
      {
        unsigned int v46 = v5 - v44;
        if ((v5 - v44) > 0x3F)
        {
          llvm::APInt::setBitsSlowCase(&v77, v46, v5);
        }
        else
        {
          unint64_t v45 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v44 << v46;
          uint64_t v77 = v45;
        }
      }
      llvm::ConstantRange::getUnsignedMax(&v79, (uint64_t)&v73);
      llvm::APInt::zextOrTrunc(&v73, v5, (uint64_t)&__src);
      if (v74 >= 0x41 && v73) {
        MEMORY[0x1D25D9CB0](v73, 0x1000C8000313F17);
      }
      unsigned int v47 = v76;
      if (v76 > 0x40) {
        operator new[]();
      }
      unint64_t v48 = (unint64_t)__src;
      unint64_t v49 = v45 & (unint64_t)__src;
      uint64_t v50 = *((unsigned int *)a2 + 6);
      if (v50 > 0x40)
      {
        unint64_t v63 = (void *)*v10;
        unint64_t v64 = (unint64_t)(v50 + 63) >> 6;
        int v65 = (uint64_t *)(v45 & (unint64_t)__src);
        do
        {
          uint64_t v66 = *v65++;
          *v63++ &= v66;
          --v64;
        }
        while (v64);
      }
      else
      {
        *v10 &= v49;
      }
      if (v47 >= 0x41)
      {
        if (v49) {
          MEMORY[0x1D25D9CB0](v49, 0x1000C8000313F17);
        }
        operator new[]();
      }
      unint64_t v51 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v47;
      if (!v47) {
        unint64_t v51 = 0;
      }
      this = v45 & v51 & ~v48;
      uint64_t v52 = *((unsigned int *)a2 + 2);
      if (v52 > 0x40)
      {
        uint64_t v67 = *a2;
        unint64_t v68 = (unint64_t)(v52 + 63) >> 6;
        uint64_t v69 = (uint64_t *)this;
        do
        {
          uint64_t v70 = *v69++;
          *v67++ &= v70;
          --v68;
        }
        while (v68);
      }
      else
      {
        *a2 = (void *)((unint64_t)*a2 & this);
      }
      if (v82 >= 0x41)
      {
        this = v81;
        if (v81) {
          this = MEMORY[0x1D25D9CB0](v81, 0x1000C8000313F17);
        }
      }
      if (v80 >= 0x41)
      {
        this = (uint64_t)v79;
        if (v79) {
          this = MEMORY[0x1D25D9CB0](v79, 0x1000C8000313F17);
        }
      }
      if (++v34 == v72) {
        return this;
      }
    }
  }
  *v10 &= v13;
  if (v6 >= 2)
  {
    uint64_t v14 = 0;
    if (v12 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v12;
    }
    uint64_t v71 = v12;
    do
    {
      unsigned int v15 = (void *)(v4 - 8 * *(unsigned int *)(v4 + 8) + 16 * v14);
      uint64_t v16 = *(void *)(*v15 + 128);
      uint64_t v17 = *(void *)(v15[1] + 128);
      unsigned int v18 = *(_DWORD *)(v16 + 32);
      if (v18 > 0x40) {
        operator new[]();
      }
      uint64_t v19 = *(char **)(v16 + 24);
      unsigned int v20 = *(_DWORD *)(v17 + 32);
      if (v20 > 0x40) {
        operator new[]();
      }
      uint64_t v21 = *(void *)(v17 + 24);
      unsigned int v80 = v18;
      uint64_t v79 = v19;
      unsigned int v82 = v20;
      uint64_t v81 = v21;
      llvm::ConstantRange::getUnsignedMax(&v79, (uint64_t)&__src);
      llvm::ConstantRange::getUnsignedMin((uint64_t)&v79, (uint64_t)&v73);
      unsigned int v22 = v74;
      if (v74 > 0x40)
      {
        llvm::APInt::xorAssignSlowCase((uint64_t)&v73, (uint64_t **)&__src);
        unsigned int v22 = v74;
        uint64_t v23 = v73;
        unsigned int v78 = v74;
        uint64_t v77 = v73;
        unsigned int v74 = 0;
        if (v78 > 0x40)
        {
          int v24 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v77);
          if (v23)
          {
            MEMORY[0x1D25D9CB0](v23, 0x1000C8000313F17);
            if (v74 >= 0x41)
            {
              if (v73) {
                MEMORY[0x1D25D9CB0](v73, 0x1000C8000313F17);
              }
            }
          }
          goto LABEL_18;
        }
      }
      else
      {
        uint64_t v23 = v73 ^ (unint64_t)__src;
      }
      int v24 = v22 + __clz(v23) - 64;
LABEL_18:
      if (v76 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unsigned int v78 = v5;
      if (v5 >= 0x41) {
        operator new[]();
      }
      unint64_t v25 = 0;
      uint64_t v77 = 0;
      if (v24)
      {
        unsigned int v26 = v5 - v24;
        if ((v5 - v24) > 0x3F)
        {
          llvm::APInt::setBitsSlowCase(&v77, v26, v5);
        }
        else
        {
          unint64_t v25 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v24 << v26;
          uint64_t v77 = v25;
        }
      }
      llvm::ConstantRange::getUnsignedMax(&v79, (uint64_t)&v73);
      llvm::APInt::zextOrTrunc(&v73, v5, (uint64_t)&__src);
      if (v74 >= 0x41 && v73) {
        MEMORY[0x1D25D9CB0](v73, 0x1000C8000313F17);
      }
      unsigned int v27 = v76;
      if (v76 > 0x40) {
        operator new[]();
      }
      unint64_t v28 = (unint64_t)__src;
      unint64_t v29 = v25 & (unint64_t)__src;
      uint64_t v30 = *((unsigned int *)a2 + 6);
      if (v30 > 0x40)
      {
        uint64_t v53 = (void *)*v10;
        unint64_t v54 = (unint64_t)(v30 + 63) >> 6;
        int v55 = (uint64_t *)(v25 & (unint64_t)__src);
        do
        {
          uint64_t v56 = *v55++;
          *v53++ &= v56;
          --v54;
        }
        while (v54);
      }
      else
      {
        *v10 &= v29;
      }
      if (v27 >= 0x41)
      {
        if (v29) {
          MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
        }
        operator new[]();
      }
      unint64_t v31 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v27;
      if (!v27) {
        unint64_t v31 = 0;
      }
      this = v25 & v31 & ~v28;
      uint64_t v32 = *((unsigned int *)a2 + 2);
      if (v32 > 0x40)
      {
        int v57 = *a2;
        unint64_t v58 = (unint64_t)(v32 + 63) >> 6;
        char v59 = (uint64_t *)this;
        do
        {
          uint64_t v60 = *v59++;
          *v57++ &= v60;
          --v58;
        }
        while (v58);
      }
      else
      {
        *a2 = (void *)((unint64_t)*a2 & this);
      }
      if (v82 >= 0x41)
      {
        this = v81;
        if (v81) {
          this = MEMORY[0x1D25D9CB0](v81, 0x1000C8000313F17);
        }
      }
      if (v80 >= 0x41)
      {
        this = (uint64_t)v79;
        if (v79) {
          this = MEMORY[0x1D25D9CB0](v79, 0x1000C8000313F17);
        }
      }
      ++v14;
    }
    while (v14 != v71);
  }
  return this;
}

uint64_t llvm::isAssumeLikeIntrinsic(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) == 84
    && (uint64_t v1 = *(void *)(a1 - 32)) != 0
    && !*(unsigned char *)(v1 + 16)
    && *(void *)(v1 + 24) == *(void *)(a1 + 72)
    && (*(unsigned char *)(v1 + 33) & 0x20) != 0)
  {
    return sub_1CBFFBEB4(a1);
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::isValidAssumeForContext(llvm *this, const llvm::Instruction *a2, const llvm::Instruction *a3, const llvm::DominatorTree *a4)
{
  v82[16] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)this + 5);
  unsigned int v7 = (llvm::BasicBlock *)*((void *)a2 + 5);
  if ((llvm::BasicBlock *)v6 != v7)
  {
    if (a3)
    {
      if (llvm::DominatorTree::dominates(a3, this, a2)) {
        return 1;
      }
    }
    else if (v6 == llvm::BasicBlock::getSinglePredecessor(v7))
    {
      return 1;
    }
    return 0;
  }
  int v8 = *(__int16 *)(v6 + 18);
  if ((v8 & 0x80000000) == 0)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    if (v16 != v6 + 40)
    {
      int v17 = 0;
      do
      {
        uint64_t v18 = v16 - 24;
        if (!v16) {
          uint64_t v18 = 0;
        }
        *(_DWORD *)(v18 + 56) = v17++;
        uint64_t v16 = *(void *)(v16 + 8);
      }
      while (v16 != v6 + 40);
    }
    *(_WORD *)(v6 + 18) = v8 | 0x8000;
  }
  if (*((_DWORD *)this + 14) < *((_DWORD *)a2 + 14)) {
    return 1;
  }
  if (this == a2
    || !llvm::isGuaranteedToTransferExecutionToSuccessor((uint64_t)a2 + 24, (uint64_t)this + 24, 15))
  {
    return 0;
  }
  unsigned int v80 = v82;
  v82[0] = this;
  uint64_t v81 = 0x1000000001;
  long long v75 = v79;
  unsigned int v76 = v79;
  uint64_t v77 = 32;
  int v78 = 0;
  uint64_t v70 = v74;
  uint64_t v71 = v74;
  uint64_t v72 = 16;
  int v73 = 0;
  int v9 = *((_DWORD *)this + 5);
  if ((v9 & 0x40000000) != 0)
  {
    uint64_t v11 = (const llvm::Instruction **)*((void *)this - 1);
    uint64_t v10 = v9 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v10 = v9 & 0x7FFFFFF;
    uint64_t v11 = (const llvm::Instruction **)((char *)this - 32 * v10);
  }
  if (v10)
  {
    uint64_t v12 = 32 * v10;
    unint64_t v13 = v11;
    while (*v13 != a2)
    {
      v13 += 4;
      v12 -= 32;
      if (!v12)
      {
        unint64_t v13 = &v11[4 * v10];
        break;
      }
    }
  }
  else
  {
    unint64_t v13 = v11;
  }
  if (v10 != ((char *)v13 - (char *)v11) >> 5)
  {
    uint64_t v14 = 0;
    goto LABEL_26;
  }
  unsigned int v19 = 1;
  while (1)
  {
    uint64_t v20 = v80[v19 - 1];
    LODWORD(v81) = v19 - 1;
    uint64_t v21 = v76;
    uint64_t v22 = HIDWORD(v77);
    if (v76 == v75)
    {
      if (HIDWORD(v77))
      {
        uint64_t v23 = 0;
        uint64_t v24 = 8 * HIDWORD(v77);
        unint64_t v25 = v76;
        while (*(void *)v25 != v20)
        {
          if (*(void *)v25 == -2) {
            uint64_t v23 = v25;
          }
          v25 += 8;
          v24 -= 8;
          if (!v24)
          {
            if (!v23) {
              goto LABEL_39;
            }
            *(void *)uint64_t v23 = v20;
            --v78;
            goto LABEL_41;
          }
        }
        goto LABEL_97;
      }
LABEL_39:
      unsigned int v26 = v77;
      if (HIDWORD(v77) < v77)
      {
        ++HIDWORD(v77);
        *(void *)&v76[8 * v22] = v20;
        goto LABEL_41;
      }
    }
    else
    {
      unsigned int v26 = v77;
    }
    if (3 * v26 <= 4 * (HIDWORD(v77) - v78))
    {
      if (v26 >= 0x40) {
        v26 *= 2;
      }
      else {
        unsigned int v26 = 128;
      }
LABEL_153:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v75, v26);
      unsigned int v26 = v77;
      uint64_t v21 = v76;
      goto LABEL_102;
    }
    if (v26 - HIDWORD(v77) < v26 >> 3) {
      goto LABEL_153;
    }
LABEL_102:
    unsigned int v52 = v26 - 1;
    unsigned int v53 = (v26 - 1) & ((v20 >> 4) ^ (v20 >> 9));
    unint64_t v54 = &v21[8 * v53];
    uint64_t v55 = *(void *)v54;
    if (*(void *)v54 != -1)
    {
      uint64_t v56 = 0;
      int v57 = 1;
      while (v55 != v20)
      {
        if (v56) {
          BOOL v58 = 0;
        }
        else {
          BOOL v58 = v55 == -2;
        }
        if (v58) {
          uint64_t v56 = v54;
        }
        unsigned int v59 = v53 + v57++;
        unsigned int v53 = v59 & v52;
        unint64_t v54 = &v21[8 * (v59 & v52)];
        uint64_t v55 = *(void *)v54;
        if (*(void *)v54 == -1) {
          goto LABEL_114;
        }
      }
      goto LABEL_97;
    }
    uint64_t v56 = 0;
LABEL_114:
    if (v56) {
      uint64_t v60 = v56;
    }
    else {
      uint64_t v60 = v54;
    }
    if (*(void *)v60 == v20) {
      goto LABEL_97;
    }
    if (*(void *)v60 == -2) {
      --v78;
    }
    else {
      ++HIDWORD(v77);
    }
    *(void *)uint64_t v60 = v20;
LABEL_41:
    uint64_t v27 = *(void *)(v20 + 8);
    if (v27)
    {
      unint64_t v28 = v71;
      do
      {
        uint64_t v29 = *(void *)(v27 + 24);
        if (v28 == v70)
        {
          uint64_t v30 = &v70[8 * HIDWORD(v72)];
          if (HIDWORD(v72))
          {
            uint64_t v31 = 0;
            while (*(void *)&v70[v31] != v29)
            {
              v31 += 8;
              if (8 * HIDWORD(v72) == v31) {
                goto LABEL_48;
              }
            }
            uint64_t v30 = &v70[v31];
LABEL_48:
            int v32 = HIDWORD(v72);
          }
          else
          {
            int v32 = 0;
          }
          unint64_t v28 = v70;
        }
        else
        {
          int v33 = v72 - 1;
          unsigned int v34 = (v72 - 1) & ((v29 >> 4) ^ (v29 >> 9));
          uint64_t v30 = &v71[8 * v34];
          uint64_t v35 = *(void *)v30;
          if (*(void *)v30 == -1)
          {
            uint64_t v36 = 0;
LABEL_65:
            if (v36) {
              uint64_t v30 = v36;
            }
            uint64_t v40 = *(void *)v30;
          }
          else
          {
            uint64_t v36 = 0;
            int v37 = 1;
            while (v35 != v29)
            {
              if (v36) {
                BOOL v38 = 0;
              }
              else {
                BOOL v38 = v35 == -2;
              }
              if (v38) {
                uint64_t v36 = v30;
              }
              unsigned int v39 = v34 + v37++;
              unsigned int v34 = v39 & v33;
              uint64_t v30 = &v71[8 * (v39 & v33)];
              uint64_t v35 = *(void *)v30;
              if (*(void *)v30 == -1) {
                goto LABEL_65;
              }
            }
            uint64_t v40 = *(void *)(v27 + 24);
          }
          if (v71 == v70) {
            int v41 = HIDWORD(v72);
          }
          else {
            int v41 = v72;
          }
          unsigned int v42 = &v71[8 * v41];
          if (v40 != v29) {
            uint64_t v30 = v42;
          }
          int v32 = HIDWORD(v72);
          unint64_t v28 = v71;
        }
        if (v28 != v70) {
          int v32 = v72;
        }
        if (v30 == &v28[8 * v32]) {
          goto LABEL_97;
        }
        uint64_t v27 = *(void *)(v27 + 8);
      }
      while (v27);
    }
    if ((const llvm::Instruction *)v20 == a2) {
      break;
    }
    if ((llvm *)v20 == this
      || *(unsigned __int8 *)(v20 + 16) >= 0x1Cu
      && (llvm::Instruction::mayHaveSideEffects((llvm::Instruction *)v20) & 1) == 0
      && *(unsigned __int8 *)(v20 + 16) - 29 >= 0xB)
    {
      uint64_t v43 = v71;
      uint64_t v44 = HIDWORD(v72);
      if (v71 == v70)
      {
        if (HIDWORD(v72))
        {
          unint64_t v45 = 0;
          uint64_t v46 = 8 * HIDWORD(v72);
          unsigned int v47 = v71;
          while (*v47 != v20)
          {
            if (*v47 == -2) {
              unint64_t v45 = v47;
            }
            ++v47;
            v46 -= 8;
            if (!v46)
            {
              if (!v45) {
                goto LABEL_90;
              }
              void *v45 = v20;
              --v73;
              goto LABEL_92;
            }
          }
          goto LABEL_92;
        }
LABEL_90:
        unsigned int v48 = v72;
        if (HIDWORD(v72) < v72)
        {
          ++HIDWORD(v72);
          *(void *)&v71[8 * v44] = v20;
LABEL_92:
          if (v20 && *(unsigned __int8 *)(v20 + 16) - 21 >= 7)
          {
            int v49 = *(_DWORD *)(v20 + 20);
            if ((v49 & 0x40000000) != 0)
            {
              unint64_t v51 = *(char **)(v20 - 8);
              uint64_t v50 = v49 & 0x7FFFFFF;
            }
            else
            {
              uint64_t v50 = v49 & 0x7FFFFFF;
              unint64_t v51 = (char *)(v20 - 32 * v50);
            }
            sub_1CBF74A6C((uint64_t)&v80, (uint64_t)&v80[v81], v51, &v51[32 * v50]);
          }
          goto LABEL_97;
        }
      }
      else
      {
        unsigned int v48 = v72;
      }
      if (3 * v48 <= 4 * (HIDWORD(v72) - v73))
      {
        if (v48 >= 0x40) {
          v48 *= 2;
        }
        else {
          unsigned int v48 = 128;
        }
      }
      else if (v48 - HIDWORD(v72) >= v48 >> 3)
      {
        goto LABEL_124;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v70, v48);
      unsigned int v48 = v72;
      uint64_t v43 = v71;
LABEL_124:
      unsigned int v61 = v48 - 1;
      unsigned int v62 = (v48 - 1) & ((v20 >> 4) ^ (v20 >> 9));
      unint64_t v63 = &v43[8 * v62];
      uint64_t v64 = *(void *)v63;
      if (*(void *)v63 == -1)
      {
        int v65 = 0;
LABEL_137:
        if (v65) {
          uint64_t v69 = v65;
        }
        else {
          uint64_t v69 = v63;
        }
        if (*(void *)v69 != v20)
        {
          if (*(void *)v69 == -2) {
            --v73;
          }
          else {
            ++HIDWORD(v72);
          }
          *(void *)uint64_t v69 = v20;
        }
      }
      else
      {
        int v65 = 0;
        int v66 = 1;
        while (v64 != v20)
        {
          if (v65) {
            BOOL v67 = 0;
          }
          else {
            BOOL v67 = v64 == -2;
          }
          if (v67) {
            int v65 = v63;
          }
          unsigned int v68 = v62 + v66++;
          unsigned int v62 = v68 & v61;
          unint64_t v63 = &v43[8 * (v68 & v61)];
          uint64_t v64 = *(void *)v63;
          if (*(void *)v63 == -1) {
            goto LABEL_137;
          }
        }
      }
      goto LABEL_92;
    }
LABEL_97:
    unsigned int v19 = v81;
    if (!v81)
    {
      uint64_t v14 = 1;
      goto LABEL_144;
    }
  }
  uint64_t v14 = 0;
LABEL_144:
  if (v71 != v70) {
    free(v71);
  }
LABEL_26:
  if (v76 != v75) {
    free(v76);
  }
  if (v80 != v82) {
    free(v80);
  }
  return v14;
}

uint64_t llvm::isGuaranteedToTransferExecutionToSuccessor(uint64_t a1, uint64_t a2, int a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    while (1)
    {
      if (v5) {
        uint64_t v6 = v5 - 24;
      }
      else {
        uint64_t v6 = 0;
      }
      if (!sub_1CBF63B28(v6))
      {
        if (!--a3) {
          return 0;
        }
        uint64_t result = 0;
        int v9 = *(unsigned __int8 *)(v6 + 16);
        if (v9 == 29 || v9 == 35) {
          return result;
        }
        if (v9 == 80)
        {
          uint64_t v11 = *(void *)(*(void *)(v6 + 40) + 56);
          int v12 = *(_DWORD *)(v11 + 20);
          if ((v12 & 0x40000000) != 0) {
            unint64_t v13 = *(llvm::Value ***)(v11 - 8);
          }
          else {
            unint64_t v13 = (llvm::Value **)(v11 - 32 * (v12 & 0x7FFFFFF));
          }
          if (llvm::classifyEHPersonality(*v13, v7) != 10) {
            return 0;
          }
        }
        else
        {
          if (v5 && v9 == 84)
          {
            uint64_t v10 = *(void *)(v6 + 64);
            if (!v10 || (*(unsigned char *)(v10 + 16) & 0x20) == 0)
            {
              uint64_t result = llvm::CallBase::hasFnAttrOnCalledFunction(v6, 37);
              if (!result) {
                return result;
              }
            }
          }
          else if (v5 && v9 == 36 || v5 && v9 == 38)
          {
            if ((*(_WORD *)(v6 + 18) & 1) == 0) {
              return 0;
            }
          }
          else if (v9 == 34)
          {
            return 0;
          }
          uint64_t result = llvm::Instruction::willReturn((llvm::Instruction *)v6);
          if (!result) {
            return result;
          }
        }
      }
      uint64_t v5 = *(void *)(v5 + 8);
      if (v5 == a2) {
        return 1;
      }
    }
  }
  return 1;
}

uint64_t llvm::getIntrinsicForCallSite(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 - 32);
  if (!v2 || *(unsigned char *)(v2 + 16) || *(void *)(v2 + 24) != *(void *)(a1 + 72)) {
    return 0;
  }
  int v4 = *(_DWORD *)(v2 + 32);
  if ((v4 & 0x2000) != 0) {
    return *(unsigned int *)(v2 + 36);
  }
  uint64_t result = 0;
  int v8 = 0;
  if (a2)
  {
    if ((v4 & 0xFu) - 7 >= 2)
    {
      uint64_t result = sub_1CC0A4DF4(a2, a1, &v8);
      if (result)
      {
        uint64_t result = sub_1CBF99AB0(a1, 45);
        if (result)
        {
          if (v8 <= 306)
          {
            if (v8 > 202)
            {
              switch(v8)
              {
                case 203:
                case 210:
                case 211:
                  return 75;
                case 204:
                case 205:
                case 206:
                case 212:
                case 213:
                case 214:
                case 218:
                case 219:
                case 220:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 237:
                case 238:
                case 239:
                  return 0;
                case 207:
                case 208:
                case 209:
                  return 76;
                case 215:
                case 216:
                case 217:
                  return 139;
                case 234:
                case 235:
                case 236:
                  return 140;
                case 240:
                case 241:
                case 242:
                  return 193;
                case 243:
                case 244:
                case 245:
                  return 202;
                default:
                  if ((v8 - 301) < 3) {
                    return 176;
                  }
                  if (v8 != 300) {
                    return 0;
                  }
                  return 175;
              }
            }
            char v7 = v8 + 78;
            if ((v8 - 178) <= 0xF)
            {
              if (((1 << v7) & 7) != 0) {
                return 14;
              }
              if (((1 << v7) & 0x380) != 0) {
                return 19;
              }
              if (((1 << v7) & 0x8C00) != 0) {
                return 51;
              }
            }
            return 0;
          }
          if (v8 <= 369)
          {
            char v6 = v8 - 57;
            if ((v8 - 313) <= 0x24)
            {
              if (((1 << v6) & 0x1C00000) != 0) {
                return 203;
              }
              if (((1 << v6) & 0x1C00000000) != 0) {
                return 238;
              }
              if (((1 << v6) & 3) != 0) {
                return 175;
              }
            }
            if ((v8 - 307) < 3) {
              return 177;
            }
            return 0;
          }
          uint64_t result = 273;
          switch(v8)
          {
            case 370:
            case 371:
            case 372:
              uint64_t result = 258;
              break;
            case 373:
            case 380:
            case 381:
            case 382:
            case 383:
            case 386:
            case 387:
            case 388:
            case 390:
            case 391:
            case 392:
              return 0;
            case 374:
            case 378:
            case 379:
              uint64_t result = 259;
              break;
            case 375:
            case 376:
            case 377:
              uint64_t result = 260;
              break;
            case 384:
            case 385:
            case 389:
              return result;
            case 393:
            case 394:
            case 395:
              uint64_t result = 280;
              break;
            default:
              if ((v8 - 445) >= 3) {
                return 0;
              }
              uint64_t result = 296;
              break;
          }
        }
      }
    }
  }
  return result;
}

uint64_t llvm::CannotBeNegativeZero(uint64_t a1, uint64_t *a2, int a3)
{
  unsigned int v6 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v6 == 17)
  {
    if (*(_UNKNOWN **)(a1 + 32) == &unk_1CFB2E344) {
      char v10 = *(unsigned char *)(*(void *)(a1 + 40) + 28);
    }
    else {
      char v10 = *(unsigned char *)(a1 + 52);
    }
    if ((v10 & 7) != 3) {
      return 1;
    }
    return (v10 & 8) == 0;
  }
  if (a3 == 6) {
    return 0;
  }
  uint64_t result = 0;
  BOOL v9 = v6 < 0x1C && v6 != 5;
  if (a1 && !v9)
  {
    if (v6 == 5)
    {
      if (*(_WORD *)(a1 + 18) == 14
        && sub_1CC185C44((uint64_t)&v15, *(llvm::Constant **)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32)))
      {
        return 1;
      }
    }
    else if (v6 == 42 && sub_1CC04C850((uint64_t)&v15, *(llvm::Constant **)(a1 - 32)))
    {
      return 1;
    }
    int v11 = *(unsigned __int8 *)(a1 + 16);
    if ((v11 - 71) < 2) {
      return 1;
    }
    if (v11 != 84) {
      return 0;
    }
    int v12 = llvm::getIntrinsicForCallSite(a1, a2);
    uint64_t result = 0;
    uint64_t v13 = 1;
    if (v12 > 117)
    {
      if (v12 == 139) {
        return v13;
      }
      if (v12 != 280)
      {
        if (v12 == 118) {
          return v13;
        }
        return result;
      }
    }
    else if (v12 != 13)
    {
      if (v12 != 115)
      {
        if (v12 == 116)
        {
          unsigned __int16 RoundingMode = llvm::ConstrainedFPIntrinsic::getRoundingMode((llvm::ConstrainedFPIntrinsic *)a1);
          uint64_t v13 = 0;
          if (RoundingMode < 0x100u || RoundingMode != 1) {
            return v13;
          }
          return llvm::CannotBeNegativeZero(*(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)), a2, (a3 + 1));
        }
        return result;
      }
      return v13;
    }
    return llvm::CannotBeNegativeZero(*(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)), a2, (a3 + 1));
  }
  return result;
}

BOOL llvm::ValueIsKnownClamped(llvm *this, const llvm::Value *a2, unsigned int a3)
{
  LODWORD(v3) = a2;
  int v4 = this;
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = *((unsigned __int8 *)this + 16);
  BOOL v6 = this == 0;
  if (!this) {
    goto LABEL_3;
  }
LABEL_2:
  if (v5 != 17)
  {
    while (1)
    {
LABEL_3:
      if (v3 == 6) {
        return 0;
      }
      int v7 = v5 - 28;
      BOOL v8 = v5 >= 0x1C || v5 == 5;
      BOOL v9 = !v8;
      if (v6 || v9) {
        return 0;
      }
      if (v5 <= 0x1B) {
        int v7 = *((unsigned __int16 *)v4 + 9);
      }
      BOOL v10 = 0;
      if (v7 <= 55) {
        break;
      }
      if (v7 == 56)
      {
        if (v5 != 84) {
          return 0;
        }
        uint64_t v17 = *((void *)v4 - 4);
        if (!v17
          || *(unsigned char *)(v17 + 16)
          || *(void *)(v17 + 24) != *((void *)v4 + 9)
          || (*(unsigned char *)(v17 + 33) & 0x20) == 0)
        {
          return 0;
        }
        int v18 = *(_DWORD *)(v17 + 36);
        if (v18 <= 201)
        {
          if (v18 == 139)
          {
LABEL_15:
            int v11 = *((_DWORD *)v4 + 5);
            if ((v11 & 0x40000000) != 0) {
              int v12 = (llvm **)*((void *)v4 - 1);
            }
            else {
              int v12 = (llvm **)((char *)v4 - 32 * (v11 & 0x7FFFFFF));
            }
            LODWORD(v3) = v3 + 1;
            goto LABEL_47;
          }
          if (v18 != 193) {
            return 0;
          }
        }
        else
        {
          BOOL v10 = 1;
          if (v18 <= 1846)
          {
            if (v18 != 202)
            {
              if (v18 == 1830) {
                return v10;
              }
              return 0;
            }
          }
          else if (v18 != 1847)
          {
            if ((v18 - 2095) <= 0x24 && ((1 << (v18 - 47)) & 0x1000000003) != 0
              || v18 == 1851)
            {
              return v10;
            }
            return 0;
          }
        }
        goto LABEL_24;
      }
      if (v7 != 57) {
        return v10;
      }
      int v13 = *((_DWORD *)v4 + 5);
      if ((v13 & 0x40000000) != 0) {
        uint64_t v14 = (llvm **)*((void *)v4 - 1);
      }
      else {
        uint64_t v14 = (llvm **)((char *)v4 - 32 * (v13 & 0x7FFFFFF));
      }
      int v3 = (const llvm::Value *)(v3 + 1);
      if (!llvm::ValueIsKnownClamped(v14[4], v3, a3)) {
        return 0;
      }
      int v21 = *((_DWORD *)v4 + 5);
      if ((v21 & 0x40000000) != 0) {
        uint64_t v22 = (char *)*((void *)v4 - 1);
      }
      else {
        uint64_t v22 = (char *)v4 - 32 * (v21 & 0x7FFFFFF);
      }
      int v12 = (llvm **)(v22 + 64);
LABEL_47:
      int v4 = *v12;
      unsigned int v5 = *((unsigned __int8 *)*v12 + 16);
      BOOL v6 = v4 == 0;
      if (v4) {
        goto LABEL_2;
      }
    }
    if ((v7 - 45) < 2) {
      goto LABEL_15;
    }
    if (v7 != 18) {
      return v10;
    }
LABEL_24:
    int v15 = *((_DWORD *)v4 + 5);
    if ((v15 & 0x40000000) != 0) {
      uint64_t v16 = (llvm **)*((void *)v4 - 1);
    }
    else {
      uint64_t v16 = (llvm **)((char *)v4 - 32 * (v15 & 0x7FFFFFF));
    }
    int v3 = (const llvm::Value *)(v3 + 1);
    if (!llvm::ValueIsKnownClamped(*v16, v3, a3)) {
      return 0;
    }
    int v19 = *((_DWORD *)v4 + 5);
    if ((v19 & 0x40000000) != 0) {
      uint64_t v20 = (char *)*((void *)v4 - 1);
    }
    else {
      uint64_t v20 = (char *)v4 - 32 * (v19 & 0x7FFFFFF);
    }
    int v12 = (llvm **)(v20 + 32);
    goto LABEL_47;
  }
  uint64_t v23 = (void **)((char *)v4 + 32);
  if (*((_UNKNOWN **)v4 + 4) == &unk_1CFB2E344) {
    uint64_t v24 = (char *)*((void *)v4 + 5);
  }
  else {
    uint64_t v24 = (char *)v4 + 24;
  }
  if ((v24[28] & 8) != 0) {
    return 0;
  }
  LODWORD(v35) = 32;
  unsigned int v34 = 0;
  llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v40, &v34);
  uint64_t v46 = v40;
  unsigned int v47 = v41;
  int v48 = v42;
  unsigned __int8 v49 = v49 & 0xF0 | BYTE4(v42) & 0xF;
  int v39 = 32;
  uint64_t v38 = 1065353216;
  llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v34, (const llvm::APInt **)&v38);
  int v41 = v34;
  uint64_t v42 = v35;
  int v43 = v36;
  unsigned __int8 v44 = v44 & 0xF0 | v37 & 0xF;
  LOBYTE(v34) = 0;
  llvm::APFloat::convert((uint64_t)v45, *v23, 1, &v34);
  llvm::APFloat::convert((uint64_t)&v40, *v23, 1, &v34);
  if (*v23 == &unk_1CFB2E344)
  {
    int v26 = llvm::detail::DoubleAPFloat::compare((llvm *)((char *)v4 + 32), (const llvm::detail::DoubleAPFloat *)&v46);
  }
  else
  {
    unsigned int v25 = *((unsigned __int8 *)v4 + 52);
    int v26 = 3;
    switch(4 * (v25 & 7) + (v49 & 7))
    {
      case 1u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 9u:
      case 0xDu:
        break;
      case 2u:
      case 3u:
      case 0xBu:
        int v26 = ~(v25 >> 2) & 2;
        break;
      case 8u:
      case 0xCu:
      case 0xEu:
        int v26 = (v49 >> 2) & 2;
        break;
      case 0xAu:
        int v27 = (v25 >> 3) & 1;
        if (v27 != ((v49 >> 3) & 1)) {
          goto LABEL_86;
        }
        int v28 = llvm::detail::IEEEFloat::compareAbsoluteValue((llvm *)((char *)v4 + 32), (const llvm::detail::IEEEFloat *)&v46);
        int v26 = v28;
        if ((*((unsigned char *)v4 + 52) & 8) != 0)
        {
          if (v28)
          {
            if (v28 == 2) {
              int v26 = 0;
            }
            else {
              int v26 = v28;
            }
          }
          else
          {
            int v26 = 2;
          }
        }
        break;
      case 0xFu:
        goto LABEL_75;
      default:
        int v27 = (v25 >> 3) & 1;
        if (v27 == ((v49 >> 3) & 1)) {
LABEL_75:
        }
          int v26 = 1;
        else {
LABEL_86:
        }
          int v26 = (2 * v27) ^ 2;
        break;
    }
  }
  if (*v23 == &unk_1CFB2E344)
  {
    unsigned int v30 = llvm::detail::DoubleAPFloat::compare((llvm *)((char *)v4 + 32), (const llvm::detail::DoubleAPFloat *)&v41);
  }
  else
  {
    unsigned int v29 = *((unsigned __int8 *)v4 + 52);
    unsigned int v30 = 3;
    switch(4 * (v29 & 7) + (v44 & 7))
    {
      case 1u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 9u:
      case 0xDu:
        break;
      case 2u:
      case 3u:
      case 0xBu:
        unsigned int v30 = ~(v29 >> 2) & 2;
        break;
      case 8u:
      case 0xCu:
      case 0xEu:
        unsigned int v30 = (v44 >> 2) & 2;
        break;
      case 0xAu:
        int v31 = (v29 >> 3) & 1;
        if (v31 != ((v44 >> 3) & 1)) {
          goto LABEL_101;
        }
        unsigned int v30 = llvm::detail::IEEEFloat::compareAbsoluteValue((llvm *)((char *)v4 + 32), (const llvm::detail::IEEEFloat *)&v41);
        if ((*((unsigned char *)v4 + 52) & 8) != 0)
        {
          if (v30)
          {
            if (v30 == 2) {
              unsigned int v30 = 0;
            }
          }
          else
          {
            unsigned int v30 = 2;
          }
        }
        break;
      case 0xFu:
        goto LABEL_89;
      default:
        int v31 = (v29 >> 3) & 1;
        if (v31 == ((v44 >> 3) & 1)) {
LABEL_89:
        }
          unsigned int v30 = 1;
        else {
LABEL_101:
        }
          unsigned int v30 = (2 * v31) ^ 2;
        break;
    }
  }
  BOOL v10 = (v26 - 1) < 2 && v30 < 2;
  if (v41 == (const llvm::APInt *)&unk_1CFB2E344)
  {
    sub_1CB845718(&v42);
  }
  else if ((*((_DWORD *)v41 + 2) - 64) <= 0xFFFFFF7F && v42)
  {
    MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
  }
  if ((_UNKNOWN *)v46 == &unk_1CFB2E344)
  {
    sub_1CB845718((uint64_t *)&v47);
  }
  else if ((*(_DWORD *)(v46 + 8) - 64) <= 0xFFFFFF7F && v47)
  {
    MEMORY[0x1D25D9CB0](v47, 0x1000C8000313F17);
  }
  return v10;
}

uint64_t llvm::CannotBeOrderedLessThanZero(uint64_t a1, uint64_t *a2)
{
  return sub_1CC164EB8(a1, a2, 0, 0);
}

uint64_t sub_1CC164EB8(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v7 = a1;
  unsigned int v52 = a2;
  unsigned int v8 = *(unsigned __int8 *)(a1 + 16);
  BOOL v9 = a1 == 0;
  if (!a1) {
    goto LABEL_3;
  }
LABEL_2:
  if (v8 == 17)
  {
    if (*(_UNKNOWN **)(v7 + 32) == &unk_1CFB2E344) {
      char v38 = *(unsigned char *)(*(void *)(v7 + 40) + 28);
    }
    else {
      char v38 = *(unsigned char *)(v7 + 52);
    }
    uint64_t result = (v38 & 8) == 0;
    if ((v38 & 8) != 0 && (a3 & 1) == 0) {
      return (v38 & 7) == 3;
    }
    return result;
  }
  while (1)
  {
LABEL_3:
    if (!v9 && v8 <= 0x14 && *(void *)v7 && *(unsigned char *)(*(void *)v7 + 8) == 18)
    {
      int v39 = *(_DWORD *)(*(void *)v7 + 32);
      if (v39)
      {
        uint64_t v40 = 0;
        while (1)
        {
          uint64_t result = (uint64_t)llvm::Constant::getAggregateElement((llvm::Constant *)v7, v40);
          if (!result) {
            break;
          }
          if (*(unsigned char *)(result + 16) != 17) {
            return 0;
          }
          uint64_t v41 = result + 24;
          uint64_t v42 = *(void **)(result + 32);
          uint64_t v43 = result + 24;
          if (v42 == &unk_1CFB2E344) {
            uint64_t v43 = *(void *)(result + 40);
          }
          if ((*(unsigned char *)(v43 + 28) & 8) != 0)
          {
            if (a3) {
              return 0;
            }
            if (v42 == &unk_1CFB2E344) {
              uint64_t v41 = *(void *)(result + 40);
            }
            if ((*(unsigned char *)(v41 + 28) & 7) != 3) {
              return 0;
            }
          }
          uint64_t v40 = (llvm::Type *)(v40 + 1);
          uint64_t result = 1;
          if (v39 == v40) {
            return result;
          }
        }
        return result;
      }
      return 1;
    }
    if (a4 == 6) {
      return 0;
    }
    int v11 = v8 - 28;
    BOOL v12 = v8 >= 0x1C || v8 == 5;
    BOOL v13 = !v12;
    if (v9 || v13) {
      return 0;
    }
    if (v8 <= 0x1B) {
      int v11 = *(unsigned __int16 *)(v7 + 18);
    }
    uint64_t result = 0;
    if (v11 <= 44) {
      break;
    }
    if (v11 > 56)
    {
      if (v11 == 57)
      {
        int v22 = *(_DWORD *)(v7 + 20);
        if ((v22 & 0x40000000) != 0) {
          uint64_t v23 = *(void *)(v7 - 8);
        }
        else {
          uint64_t v23 = v7 - 32 * (v22 & 0x7FFFFFF);
        }
        if (!sub_1CC164EB8(*(void *)(v23 + 32), a2, a3, (a4 + 1))) {
          return 0;
        }
        int v24 = *(_DWORD *)(v7 + 20);
        if ((v24 & 0x40000000) == 0)
        {
          uint64_t v25 = v24 & 0x7FFFFFF;
          goto LABEL_78;
        }
        goto LABEL_79;
      }
      if (v11 != 61) {
        return result;
      }
LABEL_34:
      int v17 = *(_DWORD *)(v7 + 20);
      if ((v17 & 0x40000000) != 0) {
        goto LABEL_88;
      }
      uint64_t v18 = v17 & 0x7FFFFFF;
      goto LABEL_36;
    }
    if ((v11 - 45) < 2) {
      goto LABEL_34;
    }
    if (v11 != 56) {
      return result;
    }
    int v15 = llvm::getIntrinsicForCallSite(v7, a2);
    uint64_t result = 0;
    uint64_t v16 = 1;
    if (v15 <= 200)
    {
      if (v15 > 191)
      {
        if (v15 != 192)
        {
          if (v15 != 193) {
            return result;
          }
          char v51 = a3;
          int v50 = a4;
          int v44 = *(_DWORD *)(v7 + 20);
          if ((v44 & 0x40000000) != 0) {
            unint64_t v45 = *(unsigned __int8 ***)(v7 - 8);
          }
          else {
            unint64_t v45 = (unsigned __int8 **)(v7 - 32 * (v44 & 0x7FFFFFF));
          }
          uint64_t v46 = *v45;
          unsigned int v47 = v45[4];
          v49[0] = &v51;
          v49[1] = &v52;
          v49[2] = &v50;
          if ((sub_1CC184260((uint64_t)v49, v46) & 1) == 0) {
            return sub_1CC184260((uint64_t)v49, v47);
          }
          return 1;
        }
        int v34 = *(_DWORD *)(v7 + 20);
        if ((v34 & 0x40000000) != 0) {
          uint64_t v35 = *(void **)(v7 - 8);
        }
        else {
          uint64_t v35 = (void *)(v7 - 32 * (v34 & 0x7FFFFFF));
        }
        if (sub_1CC164EB8(*v35, a2, a3, (a4 + 1))) {
          return 1;
        }
        goto LABEL_61;
      }
      if ((v15 - 142) >= 2)
      {
        if ((v15 - 75) < 2 || v15 == 139) {
          return v16;
        }
        return result;
      }
      int v26 = *(_DWORD *)(v7 + 20);
      if ((v26 & 0x40000000) != 0) {
        int v27 = *(void **)(v7 - 8);
      }
      else {
        int v27 = (void *)(v7 - 32 * (v26 & 0x7FFFFFF));
      }
      if (*v27 != v27[4] || a3 && (*(unsigned char *)(v7 + 17) & 4) == 0) {
        return 0;
      }
      if ((v26 & 0x40000000) == 0)
      {
        uint64_t v25 = v26 & 0x7FFFFFF;
LABEL_78:
        uint64_t v36 = v7 - 32 * v25;
LABEL_80:
        int v19 = (uint64_t *)(v36 + 64);
        goto LABEL_89;
      }
LABEL_79:
      uint64_t v36 = *(void *)(v7 - 8);
      goto LABEL_80;
    }
    if (v15 <= 238)
    {
      if ((v15 - 201) >= 2) {
        return result;
      }
LABEL_57:
      int v28 = *(_DWORD *)(v7 + 20);
      if ((v28 & 0x40000000) != 0) {
        unsigned int v29 = *(void **)(v7 - 8);
      }
      else {
        unsigned int v29 = (void *)(v7 - 32 * (v28 & 0x7FFFFFF));
      }
      if (!sub_1CC164EB8(*v29, a2, a3, (a4 + 1))) {
        return 0;
      }
LABEL_61:
      int v30 = *(_DWORD *)(v7 + 20);
      if ((v30 & 0x40000000) != 0) {
        uint64_t v31 = *(void *)(v7 - 8);
      }
      else {
        uint64_t v31 = v7 - 32 * (v30 & 0x7FFFFFF);
      }
      int v19 = (uint64_t *)(v31 + 32);
      goto LABEL_89;
    }
    if (v15 > 1846)
    {
      if (v15 != 1847)
      {
        if ((v15 - 2092) <= 0x27 && ((1 << (v15 - 44)) & 0x8000000019) != 0
          || v15 == 1851)
        {
          return v16;
        }
        return result;
      }
      goto LABEL_57;
    }
    if (v15 > 260)
    {
      if (v15 == 261) {
        return v16;
      }
      if (v15 != 280)
      {
        if (v15 == 1830) {
          return v16;
        }
        return result;
      }
      if (a3)
      {
        if ((*(unsigned char *)(v7 + 17) & 4) == 0) {
          return 0;
        }
        if ((*(unsigned char *)(v7 + 17) & 0x10) == 0)
        {
          uint64_t v48 = *(void *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF));
          return llvm::CannotBeNegativeZero(v48, a2, 0);
        }
      }
      return 1;
    }
    if (v15 != 239) {
      return result;
    }
    int v32 = *(_DWORD *)(v7 + 20);
    if ((v32 & 0x40000000) != 0) {
      uint64_t v33 = *(void *)(v7 - 8);
    }
    else {
      uint64_t v33 = v7 - 32 * (v32 & 0x7FFFFFF);
    }
    uint64_t v37 = *(void *)(v33 + 32);
    if (v37 && *(unsigned char *)(v37 + 16) == 16 && *(_DWORD *)(v37 + 32) <= 0x40u && (*(unsigned char *)(v37 + 24) & 1) == 0) {
      return 1;
    }
    if ((v32 & 0x40000000) != 0)
    {
LABEL_88:
      int v19 = *(uint64_t **)(v7 - 8);
      goto LABEL_89;
    }
    uint64_t v18 = v32 & 0x7FFFFFF;
LABEL_36:
    int v19 = (uint64_t *)(v7 - 32 * v18);
LABEL_89:
    ++a4;
    uint64_t v7 = *v19;
    unsigned int v52 = a2;
    unsigned int v8 = *(unsigned __int8 *)(v7 + 16);
    BOOL v9 = v7 == 0;
    if (v7) {
      goto LABEL_2;
    }
  }
  if (v11 <= 20)
  {
    if (v11 == 14) {
      goto LABEL_57;
    }
    if (v11 != 18) {
      return result;
    }
LABEL_39:
    int v20 = *(_DWORD *)(v7 + 20);
    if ((v20 & 0x40000000) != 0) {
      int v21 = *(void **)(v7 - 8);
    }
    else {
      int v21 = (void *)(v7 - 32 * (v20 & 0x7FFFFFF));
    }
    if (*v21 == v21[4] && (!a3 || (*(unsigned char *)(v7 + 17) & 4) != 0)) {
      return 1;
    }
    goto LABEL_57;
  }
  switch(v11)
  {
    case 21:
      goto LABEL_39;
    case 24:
      goto LABEL_57;
    case 43:
      return 1;
  }
  return result;
}

uint64_t llvm::SignBitMustBeZero(uint64_t a1, uint64_t *a2)
{
  return sub_1CC164EB8(a1, a2, 1, 0);
}

BOOL llvm::isKnownNeverInfinity(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  for (uint64_t i = (a3 + 1); ; uint64_t i = (i + 1))
  {
    BOOL v6 = sub_1CB845E74(a1);
    if (a1 && v6 && (*(unsigned char *)(a1 + 17) & 8) != 0) {
      return 1;
    }
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    if (a1 && v7 == 17)
    {
      if (*(_UNKNOWN **)(a1 + 32) == &unk_1CFB2E344) {
        uint64_t v21 = *(void *)(a1 + 40);
      }
      else {
        uint64_t v21 = a1 + 24;
      }
      return (*(unsigned char *)(v21 + 28) & 7) != 0;
    }
    if (i == 7) {
      return 0;
    }
    if (!a1 || v7 < 0x1C) {
      goto LABEL_22;
    }
    if (v7 != 85) {
      break;
    }
    int v8 = *(_DWORD *)(a1 + 20);
    if ((v8 & 0x40000000) != 0) {
      uint64_t v9 = *(void *)(a1 - 8);
    }
    else {
      uint64_t v9 = a1 - 32 * (v8 & 0x7FFFFFF);
    }
    if (!llvm::isKnownNeverInfinity(*(void *)(v9 + 32), a2, i)) {
      return 0;
    }
    int v10 = *(_DWORD *)(a1 + 20);
    if ((v10 & 0x40000000) != 0) {
      uint64_t v11 = *(void *)(a1 - 8);
    }
    else {
      uint64_t v11 = a1 - 32 * (v10 & 0x7FFFFFF);
    }
    a1 = *(void *)(v11 + 64);
  }
  if (v7 - 71 >= 2)
  {
LABEL_22:
    BOOL v14 = 0;
    if (v7 <= 0x14)
    {
      uint64_t v15 = *(void *)a1;
      if (*(void *)a1)
      {
        if (*(unsigned char *)(v15 + 8) == 18)
        {
          int v16 = *(_DWORD *)(v15 + 32);
          if (v16)
          {
            int v17 = 0;
            BOOL v14 = 1;
            while (1)
            {
              AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)a1, v17);
              if (!AggregateElement) {
                break;
              }
              int v19 = *((unsigned __int8 *)AggregateElement + 16);
              if ((v19 - 11) >= 2)
              {
                if (v19 != 17) {
                  break;
                }
                int v20 = (_UNKNOWN *)AggregateElement[4] == &unk_1CFB2E344
                    ? (void *)AggregateElement[5]
                    : AggregateElement + 3;
                if ((*((unsigned char *)v20 + 28) & 7) == 0) {
                  break;
                }
              }
              int v17 = (llvm::Type *)(v17 + 1);
              if (v16 == v17) {
                return v14;
              }
            }
            return 0;
          }
          return 1;
        }
      }
    }
  }
  else
  {
    int v12 = *(_DWORD *)(a1 + 20);
    if ((v12 & 0x40000000) != 0) {
      BOOL v13 = *(uint64_t ***)(a1 - 8);
    }
    else {
      BOOL v13 = (uint64_t **)(a1 - 32 * (v12 & 0x7FFFFFF));
    }
    uint64_t v22 = **v13;
    if ((*(_DWORD *)(v22 + 8) & 0xFE) == 0x12) {
      uint64_t v22 = **(void **)(v22 + 16);
    }
    unsigned int PrimitiveSizeInBits = (llvm::APFloatBase *)llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v22);
    int v24 = *(_DWORD *)(*(void *)a1 + 8);
    if ((v24 & 0xFE) == 0x12) {
      int v24 = *(_DWORD *)(**(void **)(*(void *)a1 + 16) + 8);
    }
    int v25 = v24;
    if (v24 == 2)
    {
      int v26 = (llvm::APFloatBase *)&unk_1CFB2E308;
    }
    else
    {
      int v26 = (llvm::APFloatBase *)&unk_1CFB2E2E0;
      switch(v25)
      {
        case 1:
          int v33 = (int)PrimitiveSizeInBits;
          unsigned int PrimitiveSizeInBits = (llvm::APFloatBase *)llvm::APFloatBase::BFloat(PrimitiveSizeInBits);
          goto LABEL_69;
        case 2:
          __break(1u);
          goto LABEL_66;
        case 3:
LABEL_66:
          int v26 = (llvm::APFloatBase *)&unk_1CFB2E31C;
          break;
        case 4:
          int v33 = (int)PrimitiveSizeInBits;
          unsigned int PrimitiveSizeInBits = (llvm::APFloatBase *)llvm::APFloatBase::x87DoubleExtended(PrimitiveSizeInBits);
          goto LABEL_69;
        case 5:
          int v33 = (int)PrimitiveSizeInBits;
          unsigned int PrimitiveSizeInBits = (llvm::APFloatBase *)llvm::APFloatBase::IEEEquad(PrimitiveSizeInBits);
LABEL_69:
          int v26 = PrimitiveSizeInBits;
          BOOL v35 = PrimitiveSizeInBits == (llvm::APFloatBase *)&unk_1CFB2E344;
          LODWORD(PrimitiveSizeInBits) = v33;
          if (!v35) {
            break;
          }
          goto LABEL_71;
        case 6:
LABEL_71:
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v37, (uint64_t)&unk_1CFB2E344);
        default:
          break;
      }
    }
    uint64_t v37 = v26;
    int v27 = (void *)*((unsigned int *)v26 + 2);
    if ((v27 + 64) >= 0x80) {
      operator new[]();
    }
    char v40 = 3;
    int v39 = *((_DWORD *)v26 + 1) - 1;
    int v28 = *((_DWORD *)v26 + 2);
    if ((v28 - 64) < 0xFFFFFF80)
    {
      void *v27 = 0;
      int v34 = (int)PrimitiveSizeInBits;
      bzero(v27 + 1, 8 * (((v28 + 64) >> 6) - 2) + 8);
      LODWORD(PrimitiveSizeInBits) = v34;
    }
    else
    {
      uint64_t v38 = 0;
    }
    int v29 = PrimitiveSizeInBits - (v7 == 72);
    sub_1CB87E774((uint64_t)v36, 0);
    if (v37 == (llvm::APFloatBase *)&unk_1CFB2E344) {
      uint64_t v31 = (llvm::detail *)(v38 + 8);
    }
    else {
      uint64_t v31 = (llvm::detail *)&v37;
    }
    BOOL v14 = (int)llvm::detail::ilogb(v31, v30) >= v29;
    if (v37 == (llvm::APFloatBase *)&unk_1CFB2E344)
    {
      sub_1CB845718(&v38);
    }
    else if ((*((_DWORD *)v37 + 2) - 64) <= 0xFFFFFF7F && v38)
    {
      MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
    }
  }
  return v14;
}

uint64_t llvm::isKnownNeverNaN(uint64_t a1, uint64_t *a2, int a3)
{
  LODWORD(v3) = a3;
  while (1)
  {
    BOOL v6 = sub_1CB845E74(a1);
    if (a1 && v6 && (*(unsigned char *)(a1 + 17) & 4) != 0) {
      return 1;
    }
    unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
    if (a1 && v7 == 17)
    {
      if (*(_UNKNOWN **)(a1 + 32) == &unk_1CFB2E344) {
        uint64_t v17 = *(void *)(a1 + 40);
      }
      else {
        uint64_t v17 = a1 + 24;
      }
      return (*(unsigned char *)(v17 + 28) & 7) != 1;
    }
    if (v3 == 6) {
      return 0;
    }
    if (a1 && v7 >= 0x1C)
    {
      switch(*(unsigned char *)(a1 + 16))
      {
        case 'G':
        case 'H':
          return 1;
        case 'I':
        case 'J':
          int v8 = *(_DWORD *)(a1 + 20);
          if ((v8 & 0x40000000) == 0) {
            goto LABEL_33;
          }
          uint64_t v9 = *(uint64_t **)(a1 - 8);
          goto LABEL_34;
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
        case 'S':
          goto LABEL_49;
        case 'T':
          goto LABEL_14;
        case 'U':
          int v13 = *(_DWORD *)(a1 + 20);
          if ((v13 & 0x40000000) != 0) {
            uint64_t v14 = *(void *)(a1 - 8);
          }
          else {
            uint64_t v14 = a1 - 32 * (v13 & 0x7FFFFFF);
          }
          uint64_t v3 = (v3 + 1);
          uint64_t result = llvm::isKnownNeverNaN(*(void *)(v14 + 32), a2, v3);
          if (!result) {
            return result;
          }
          int v15 = *(_DWORD *)(a1 + 20);
          if ((v15 & 0x40000000) != 0) {
            uint64_t v16 = *(void *)(a1 - 8);
          }
          else {
            uint64_t v16 = a1 - 32 * (v15 & 0x7FFFFFF);
          }
          uint64_t v9 = (uint64_t *)(v16 + 64);
          break;
        default:
          uint64_t result = 0;
          switch(*(unsigned char *)(a1 + 16))
          {
            case '*':
            case ',':
              int v18 = *(_DWORD *)(a1 + 20);
              if ((v18 & 0x40000000) != 0) {
                int v19 = *(void **)(a1 - 8);
              }
              else {
                int v19 = (void *)(a1 - 32 * (v18 & 0x7FFFFFF));
              }
              uint64_t v25 = (v3 + 1);
              uint64_t result = llvm::isKnownNeverNaN(*v19, a2, v25);
              if (!result) {
                return result;
              }
              int v26 = *(_DWORD *)(a1 + 20);
              uint64_t v27 = (v26 & 0x40000000) != 0 ? *(void *)(a1 - 8) : a1 - 32 * (v26 & 0x7FFFFFF);
              uint64_t result = llvm::isKnownNeverNaN(*(void *)(v27 + 32), a2, v25);
              if (!result) {
                return result;
              }
              int v30 = *(_DWORD *)(a1 + 20);
              if ((v30 & 0x40000000) != 0) {
                uint64_t v31 = *(uint64_t **)(a1 - 8);
              }
              else {
                uint64_t v31 = (uint64_t *)(a1 - 32 * (v30 & 0x7FFFFFF));
              }
              if (llvm::isKnownNeverInfinity(*v31, (uint64_t)a2, v25)) {
                return 1;
              }
LABEL_95:
              int v37 = *(_DWORD *)(a1 + 20);
              if ((v37 & 0x40000000) != 0) {
                uint64_t v38 = *(void *)(a1 - 8);
              }
              else {
                uint64_t v38 = a1 - 32 * (v37 & 0x7FFFFFF);
              }
              uint64_t v39 = *(void *)(v38 + 32);
              uint64_t result = llvm::isKnownNeverInfinity(v39, (uint64_t)a2, v25);
              break;
            case '.':
              int v28 = *(_DWORD *)(a1 + 20);
              if ((v28 & 0x40000000) != 0) {
                int v29 = *(void **)(a1 - 8);
              }
              else {
                int v29 = (void *)(a1 - 32 * (v28 & 0x7FFFFFF));
              }
              uint64_t v25 = (v3 + 1);
              uint64_t result = llvm::isKnownNeverNaN(*v29, a2, v25);
              if (result)
              {
                int v32 = *(_DWORD *)(a1 + 20);
                int v33 = (v32 & 0x40000000) != 0 ? *(uint64_t **)(a1 - 8) : (uint64_t *)(a1 - 32 * (v32 & 0x7FFFFFF));
                uint64_t result = llvm::isKnownNeverInfinity(*v33, (uint64_t)a2, v25);
                if (result)
                {
                  int v35 = *(_DWORD *)(a1 + 20);
                  uint64_t v36 = (v35 & 0x40000000) != 0 ? *(void *)(a1 - 8) : a1 - 32 * (v35 & 0x7FFFFFF);
                  uint64_t result = llvm::isKnownNeverNaN(*(void *)(v36 + 32), a2, v25);
                  if (result) {
                    goto LABEL_95;
                  }
                }
              }
              return result;
            case '1':
            case '4':
              return result;
            default:
              goto LABEL_49;
          }
          return result;
      }
      goto LABEL_35;
    }
    if (v7 != 84) {
      break;
    }
LABEL_14:
    uint64_t v10 = *(void *)(a1 - 32);
    if (!v10
      || *(unsigned char *)(v10 + 16)
      || *(void *)(v10 + 24) != *(void *)(a1 + 72)
      || (*(unsigned char *)(v10 + 33) & 0x20) == 0)
    {
      break;
    }
    uint64_t result = 0;
    int v12 = *(_DWORD *)(v10 + 36);
    if (v12 <= 192)
    {
      if (((v12 - 13) > 0x3F || ((1 << (v12 - 13)) & 0xC000000000000043) == 0)
        && (v12 - 139) >= 2)
      {
        return result;
      }
      goto LABEL_32;
    }
    if (v12 > 257)
    {
      if ((v12 - 258) >= 3 && v12 != 296)
      {
        if (v12 == 280)
        {
          uint64_t result = llvm::isKnownNeverNaN(*(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)), a2, (v3 + 1));
          if (result)
          {
            uint64_t v34 = *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
            return sub_1CC164EB8(v34, a2, 0, 0);
          }
        }
        return result;
      }
      goto LABEL_32;
    }
    if (v12 != 193 && v12 != 202)
    {
      if (v12 != 203) {
        return result;
      }
LABEL_32:
      int v8 = *(_DWORD *)(a1 + 20);
LABEL_33:
      uint64_t v9 = (uint64_t *)(a1 - 32 * (v8 & 0x7FFFFFF));
LABEL_34:
      LODWORD(v3) = v3 + 1;
      goto LABEL_35;
    }
    uint64_t v3 = (v3 + 1);
    if (llvm::isKnownNeverNaN(*(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)), a2, v3)) {
      return 1;
    }
    uint64_t v9 = (uint64_t *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32);
LABEL_35:
    a1 = *v9;
  }
LABEL_49:
  uint64_t result = 0;
  if (v7 <= 0x14)
  {
    uint64_t v20 = *(void *)a1;
    if (*(void *)a1)
    {
      if (*(unsigned char *)(v20 + 8) == 18)
      {
        int v21 = *(_DWORD *)(v20 + 32);
        if (!v21) {
          return 1;
        }
        uint64_t v22 = 0;
        while (1)
        {
          uint64_t result = (uint64_t)llvm::Constant::getAggregateElement((llvm::Constant *)a1, v22);
          if (!result) {
            break;
          }
          int v23 = *(unsigned __int8 *)(result + 16);
          if ((v23 - 11) >= 2)
          {
            if (v23 != 17) {
              return 0;
            }
            uint64_t v24 = *(_UNKNOWN **)(result + 32) == &unk_1CFB2E344 ? *(void *)(result + 40) : result + 24;
            if ((*(unsigned char *)(v24 + 28) & 7) == 1) {
              return 0;
            }
          }
          uint64_t v22 = (llvm::Type *)(v22 + 1);
          if (v21 == v22) {
            return 1;
          }
        }
      }
    }
  }
  return result;
}

llvm::Value *llvm::isBytewiseValue(llvm *this, llvm::Value *a2, const llvm::DataLayout *a3)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)this;
  if (*(_DWORD *)(*(void *)this + 8) == 2061) {
    return this;
  }
  while (1)
  {
    unsigned int v7 = *(llvm::ConstantInt **)v4;
    int v8 = llvm::UndefValue::get((llvm::UndefValue *)(**(void **)v4 + 1912), a2);
    if (*((unsigned __int8 *)v3 + 16) - 11 < 2
      || (unint64_t)(sub_1CB83544C((uint64_t)a2, *(void *)v3) + 7) < 8)
    {
      return v8;
    }
    unsigned int v10 = *((unsigned __int8 *)v3 + 16);
    if (v10 > 0x14) {
      return 0;
    }
    switch(v10)
    {
      case 0x10u:
        uint64_t v25 = *((unsigned int *)v3 + 8);
        if (v25 >= 0x41)
        {
          int v44 = 0;
          int64_t v45 = (unint64_t)(v25 + 63) >> 6;
          do
          {
            if (v45-- < 1) {
              break;
            }
            unint64_t v47 = *(void *)(*((void *)v3 + 3) + 8 * v45);
            v44 += __clz(v47);
          }
          while (!v47);
          int v48 = v25 | 0xFFFFFFC0;
          if ((v25 & 0x3F) == 0) {
            int v48 = 0;
          }
          if (v44 + v48 != v25)
          {
LABEL_41:
            if ((*((unsigned char *)v3 + 32) & 7) == 0)
            {
              uint64_t v27 = (unsigned __int8 *)v3 + 24;
              if (llvm::APInt::isSplat((llvm *)((char *)v3 + 24), 8u))
              {
                if (*((_DWORD *)v3 + 8) >= 0x41u) {
                  uint64_t v27 = *(unsigned __int8 **)v27;
                }
                uint64_t v29 = *v27;
                unsigned int v51 = 8;
                uint64_t v50 = v29;
                unsigned int v5 = llvm::ConstantInt::get(v7, (llvm::LLVMContext *)&v50, v28);
                if (v51 >= 0x41 && v50) {
                  MEMORY[0x1D25D9CB0](v50, 0x1000C8000313F17);
                }
                return (llvm::Value *)v5;
              }
            }
            return 0;
          }
        }
        else if (*((void *)v3 + 3))
        {
          goto LABEL_41;
        }
LABEL_85:
        unsigned __int8 v49 = (llvm::Constant *)(*(void *)v7 + 1912);
        return llvm::Constant::getNullValue(v49, a2, v9);
      case 0x11u:
        if (sub_1CB844168((uint64_t)v3, 0.0)) {
          goto LABEL_85;
        }
        unsigned int v10 = *((unsigned __int8 *)v3 + 16);
        break;
      case 5u:
        if (*((_WORD *)v3 + 9) != 48) {
          return 0;
        }
        unsigned int v5 = 0;
        if (!*(void *)v3) {
          return (llvm::Value *)v5;
        }
        unsigned int v13 = *(_DWORD *)(*(void *)v3 + 8);
        if (v13 != 15) {
          return (llvm::Value *)v5;
        }
        if (v13 < 0x100) {
          goto LABEL_28;
        }
        unsigned int v14 = v13 >> 8;
        uint64_t v15 = *((unsigned int *)a2 + 60);
        uint64_t v16 = *((void *)a2 + 29);
        if (v15)
        {
          uint64_t v16 = *((void *)a2 + 29);
          unint64_t v17 = *((unsigned int *)a2 + 60);
          do
          {
            unint64_t v18 = v17 >> 1;
            uint64_t v19 = v16 + 16 * (v17 >> 1);
            unsigned int v20 = *(_DWORD *)(v19 + 8);
            uint64_t v21 = v19 + 16;
            v17 += ~(v17 >> 1);
            if (v20 < v14) {
              uint64_t v16 = v21;
            }
            else {
              unint64_t v17 = v18;
            }
          }
          while (v17);
        }
        if (v16 == *((void *)a2 + 29) + 16 * v15 || *(_DWORD *)(v16 + 8) != v14) {
LABEL_28:
        }
          uint64_t v16 = *((void *)a2 + 29);
        uint64_t v22 = (llvm::ConstantExpr *)*((void *)v3 - 4 * (*((_DWORD *)v3 + 5) & 0x7FFFFFF));
        int v23 = (llvm::Type ***)llvm::IntegerType::get(v7, (llvm::LLVMContext *)*(unsigned int *)(v16 + 4));
        IntegerCast = llvm::ConstantExpr::getIntegerCast(v22, v23, 0);
        goto LABEL_36;
      default:
        if (v10 - 18 < 3 || v10 == 13) {
          goto LABEL_85;
        }
        break;
    }
    if (v10 != 17) {
      break;
    }
    int v11 = *(unsigned __int8 *)(*(void *)v3 + 8);
    if (v11 == 3)
    {
      int v12 = (llvm::Constant *)(*(void *)v7 + 1984);
    }
    else if (v11 == 2)
    {
      int v12 = (llvm::Constant *)(*(void *)v7 + 1960);
    }
    else
    {
      if (*(unsigned char *)(*(void *)v3 + 8)) {
        return 0;
      }
      int v12 = (llvm::Constant *)(*(void *)v7 + 1936);
    }
    if (*(llvm::Constant **)v3 != v12)
    {
      IntegerCast = sub_1CC56C0C0((llvm *)0x31, v3, v12, 0);
LABEL_36:
      uint64_t v3 = IntegerCast;
    }
    uint64_t v4 = *(void *)v3;
    unsigned int v5 = v3;
    if (*(_DWORD *)(*(void *)v3 + 8) == 2061) {
      return (llvm::Value *)v5;
    }
  }
  if (v10 == 16) {
    goto LABEL_41;
  }
  if ((v10 & 0xFE) == 0xE)
  {
    int v30 = *(_DWORD *)(*(void *)v3 + 32);
    if (v30)
    {
      unsigned int v31 = 0;
      int v32 = v8;
      while (1)
      {
        ElementAsunint64_t Constant = (llvm *)llvm::ConstantDataSequential::getElementAsConstant((llvm::ConstantFP ***)v3, v31);
        uint64_t isBytewiseValue = llvm::isBytewiseValue(ElementAsConstant, a2, v34);
        if (v32 == (llvm::UndefValue *)isBytewiseValue)
        {
          uint64_t isBytewiseValue = (uint64_t)v32;
          if (!v32) {
            return 0;
          }
        }
        else
        {
          unsigned int v5 = 0;
          if (!v32 || !isBytewiseValue) {
            return (llvm::Value *)v5;
          }
          if (v8 != v32)
          {
            BOOL v36 = v8 == (llvm::UndefValue *)isBytewiseValue;
            uint64_t isBytewiseValue = (uint64_t)v32;
            if (!v36) {
              return 0;
            }
          }
        }
        ++v31;
        int v32 = (llvm::UndefValue *)isBytewiseValue;
        unsigned int v5 = (void *)isBytewiseValue;
        if (v30 == v31) {
          return (llvm::Value *)v5;
        }
      }
    }
    return v8;
  }
  if (v10 - 8 > 2) {
    return 0;
  }
  uint64_t v37 = *((_DWORD *)v3 + 5) & 0x7FFFFFF;
  if (v37)
  {
    uint64_t v38 = 0;
    uint64_t v39 = 32 * v37;
    char v40 = v8;
    while (1)
    {
      int v41 = *((_DWORD *)v3 + 5);
      if ((v41 & 0x40000000) != 0) {
        uint64_t v42 = (char *)*((void *)v3 - 1);
      }
      else {
        uint64_t v42 = (char *)v3 - 32 * (v41 & 0x7FFFFFF);
      }
      uint64_t v43 = llvm::isBytewiseValue(*(llvm **)&v42[v38], a2, v9);
      if (v40 == (llvm::UndefValue *)v43)
      {
        uint64_t v43 = (uint64_t)v40;
        if (!v40) {
          return 0;
        }
      }
      else
      {
        unsigned int v5 = 0;
        if (!v40 || !v43) {
          return (llvm::Value *)v5;
        }
        if (v8 != v40)
        {
          BOOL v36 = v8 == (llvm::UndefValue *)v43;
          uint64_t v43 = (uint64_t)v40;
          if (!v36) {
            return 0;
          }
        }
      }
      v38 += 32;
      char v40 = (llvm::UndefValue *)v43;
      unsigned int v5 = (void *)v43;
      if (v39 == v38) {
        return (llvm::Value *)v5;
      }
    }
  }
  return v8;
}

BOOL llvm::isGEPBasedOnPointerToString(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 20);
  if ((v2 & 0x7FFFFFF) != 3) {
    return 0;
  }
  uint64_t v3 = 24;
  if (*(unsigned char *)(a1 + 16) == 62) {
    uint64_t v3 = 64;
  }
  uint64_t v4 = *(void *)(a1 + v3);
  if (!v4 || *(unsigned char *)(v4 + 8) != 17) {
    return 0;
  }
  unsigned int v6 = *(_DWORD *)(*(void *)(v4 + 24) + 8);
  int v7 = v6;
  unsigned int v8 = v6 >> 8;
  if (v7 != 13 || v8 != a2) {
    return 0;
  }
  uint64_t v10 = (v2 & 0x40000000) != 0 ? *(void *)(a1 - 8) : a1 - 96;
  uint64_t v11 = *(void *)(v10 + 32);
  if (!v11 || *(unsigned char *)(v11 + 16) != 16) {
    return 0;
  }
  uint64_t v14 = *(unsigned int *)(v11 + 32);
  if (v14 > 0x40)
  {
    int v16 = 0;
    int64_t v17 = (unint64_t)(v14 + 63) >> 6;
    do
    {
      if (v17-- < 1) {
        break;
      }
      unint64_t v19 = *(void *)(*(void *)(v11 + 24) + 8 * v17);
      v16 += __clz(v19);
    }
    while (!v19);
    int v20 = v14 | 0xFFFFFFC0;
    if ((v14 & 0x3F) == 0) {
      int v20 = 0;
    }
    return v16 + v20 == v14;
  }
  else
  {
    return *(void *)(v11 + 24) == 0;
  }
}

BOOL llvm::getConstantDataArrayInfo(llvm::Value *a1, uint64_t *a2, unsigned int a3, unint64_t a4)
{
  while (1)
  {
    int v7 = llvm::Value::stripPointerCasts(a1);
    unsigned int v8 = v7;
    int v9 = *((unsigned __int8 *)v7 + 16);
    if (v9 != 5) {
      break;
    }
    if (*((_WORD *)v7 + 9) != 34) {
      return 0;
    }
LABEL_5:
    BOOL result = llvm::isGEPBasedOnPointerToString((uint64_t)v7, a3);
    if (!result) {
      return result;
    }
    int v11 = *((_DWORD *)v8 + 5);
    if ((v11 & 0x40000000) != 0) {
      int v12 = (char *)*((void *)v8 - 1);
    }
    else {
      int v12 = (char *)v8 - 32 * (v11 & 0x7FFFFFF);
    }
    uint64_t v13 = *((void *)v12 + 8);
    if (v13) {
      BOOL v14 = *(unsigned char *)(v13 + 16) == 16;
    }
    else {
      BOOL v14 = 0;
    }
    if (!v14) {
      return 0;
    }
    uint64_t v15 = (void *)(v13 + 24);
    if (*(_DWORD *)(v13 + 32) >= 0x41u) {
      uint64_t v15 = (void *)*v15;
    }
    if ((v11 & 0x40000000) != 0) {
      int v16 = (llvm::Value **)*((void *)v8 - 1);
    }
    else {
      int v16 = (llvm::Value **)((char *)v8 - 32 * (v11 & 0x7FFFFFF));
    }
    a1 = *v16;
    a4 += *v15;
  }
  if (v9 == 62) {
    goto LABEL_5;
  }
  if (v9 != 3
    || (*((unsigned char *)v7 + 80) & 1) == 0
    || (*((_DWORD *)v7 + 5) & 0x7FFFFFF) == 0
    || (llvm::GlobalValue::isInterposable(v7) & 1) != 0
    || (*((unsigned char *)v8 + 80) & 2) != 0)
  {
    return 0;
  }
  uint64_t v17 = *((void *)v8 - 4);
  unsigned int v18 = *(unsigned __int8 *)(v17 + 16);
  if (!v17 || v18 != 16)
  {
    if (v17 && v18 == 17)
    {
      if (sub_1CB844168(v17, 0.0)) {
        goto LABEL_38;
      }
      uint64_t v17 = *((void *)v8 - 4);
      unsigned int v18 = *(unsigned __int8 *)(v17 + 16);
    }
    else if (v18 <= 0x14 && ((1 << v18) & 0x1C2000) != 0)
    {
      goto LABEL_38;
    }
    if (v18 != 14) {
      return 0;
    }
    uint64_t v20 = *(void *)v17;
    goto LABEL_46;
  }
  uint64_t v19 = *(unsigned int *)(v17 + 32);
  if (v19 >= 0x41)
  {
    int v28 = 0;
    int64_t v29 = (unint64_t)(v19 + 63) >> 6;
    do
    {
      BOOL v23 = v29-- < 1;
      if (v23) {
        break;
      }
      unint64_t v30 = *(void *)(*(void *)(v17 + 24) + 8 * v29);
      v28 += __clz(v30);
    }
    while (!v30);
    BOOL result = 0;
    int v31 = v19 | 0xFFFFFFC0;
    if ((v19 & 0x3F) == 0) {
      int v31 = 0;
    }
    if (v28 + v31 == v19) {
      goto LABEL_38;
    }
    return result;
  }
  if (*(void *)(v17 + 24)) {
    return 0;
  }
LABEL_38:
  uint64_t v20 = *((void *)v8 + 3);
  if (v20) {
    BOOL v21 = *(unsigned char *)(v20 + 8) == 17;
  }
  else {
    BOOL v21 = 0;
  }
  if (v21)
  {
    uint64_t v17 = 0;
LABEL_46:
    if (*(_DWORD *)(*(void *)(v20 + 24) + 8) != 13
      || *(_DWORD *)(*(void *)(v20 + 24) + 8) >> 8 != a3)
    {
      return 0;
    }
    unint64_t v26 = *(void *)(v20 + 32);
    BOOL v27 = v26 >= a4;
    unint64_t v24 = v26 - a4;
    if (!v27) {
      return 0;
    }
    *a2 = v17;
    a2[1] = a4;
    goto LABEL_54;
  }
  unint64_t v22 = ((unint64_t)(sub_1CB83544C(*((void *)v8 + 5) + 272, v20) + 7) >> 3) / (a3 >> 3);
  BOOL v23 = v22 > a4;
  unint64_t v24 = v22 - a4;
  if (!v23) {
    return 0;
  }
  *a2 = 0;
  a2[1] = 0;
LABEL_54:
  BOOL result = 1;
  a2[2] = v24;
  return result;
}

uint64_t sub_1CC166508(llvm::Value *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = (unsigned __int8 *)llvm::Value::stripPointerCasts(a1);
  unsigned int v6 = v5;
  int v7 = v5[16];
  if (v5 && v7 == 83)
  {
    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v9 = *(unsigned int *)(a2 + 20);
    if (v8 == *(void *)a2)
    {
      if (v9)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 8 * v9;
        int v12 = *(unsigned __int8 ***)(a2 + 8);
        do
        {
          if (*v12 == v5) {
            return -1;
          }
          if (*v12 == (unsigned __int8 *)-2) {
            uint64_t v10 = v12;
          }
          ++v12;
          v11 -= 8;
        }
        while (v11);
        if (v10)
        {
          *uint64_t v10 = v5;
          --*(_DWORD *)(a2 + 24);
          goto LABEL_53;
        }
      }
      unsigned int v13 = *(_DWORD *)(a2 + 16);
      if (v9 < v13)
      {
        *(_DWORD *)(a2 + 20) = v9 + 1;
        *(void *)(v8 + 8 * v9) = v5;
        goto LABEL_53;
      }
    }
    else
    {
      unsigned int v13 = *(_DWORD *)(a2 + 16);
    }
    if (3 * v13 <= 4 * ((int)v9 - *(_DWORD *)(a2 + 24)))
    {
      if (v13 >= 0x40) {
        v13 *= 2;
      }
      else {
        unsigned int v13 = 128;
      }
    }
    else if (v13 - v9 >= v13 >> 3)
    {
LABEL_34:
      unsigned int v22 = v13 - 1;
      unsigned int v23 = (v13 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      unint64_t v24 = (unsigned __int8 **)(v8 + 8 * v23);
      uint64_t v25 = *v24;
      if (*v24 != (unsigned __int8 *)-1)
      {
        unint64_t v26 = 0;
        int v27 = 1;
        while (v25 != v6)
        {
          if (v26) {
            BOOL v28 = 0;
          }
          else {
            BOOL v28 = v25 == (unsigned __int8 *)-2;
          }
          if (v28) {
            unint64_t v26 = v24;
          }
          unsigned int v29 = v23 + v27++;
          unsigned int v23 = v29 & v22;
          unint64_t v24 = (unsigned __int8 **)(v8 + 8 * (v29 & v22));
          uint64_t v25 = *v24;
          if (*v24 == (unsigned __int8 *)-1) {
            goto LABEL_46;
          }
        }
        return -1;
      }
      unint64_t v26 = 0;
LABEL_46:
      if (v26) {
        unint64_t v30 = v26;
      }
      else {
        unint64_t v30 = v24;
      }
      if (*v30 == v6) {
        return -1;
      }
      if (*v30 == (unsigned __int8 *)-2) {
        --*(_DWORD *)(a2 + 24);
      }
      else {
        ++*(_DWORD *)(a2 + 20);
      }
      *unint64_t v30 = v6;
LABEL_53:
      int v31 = *((_DWORD *)v6 + 5);
      if ((v31 & 0x40000000) != 0)
      {
        int v33 = (unsigned __int8 *)*((void *)v6 - 1);
        uint64_t v32 = v31 & 0x7FFFFFF;
        if (v32) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v32 = v31 & 0x7FFFFFF;
        int v33 = &v6[-32 * v32];
        if (v32)
        {
LABEL_55:
          uint64_t v34 = 32 * v32;
          uint64_t v35 = -1;
          while (1)
          {
            uint64_t result = sub_1CC166508(*(void *)v33, a2, a3);
            if (result == -1)
            {
              uint64_t result = v35;
            }
            else
            {
              if (!result) {
                return result;
              }
              if (v35 != -1 && result != v35) {
                return 0;
              }
            }
            v33 += 32;
            uint64_t v35 = result;
            v34 -= 32;
            if (!v34) {
              return result;
            }
          }
        }
      }
      return -1;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a2, v13);
    unsigned int v13 = *(_DWORD *)(a2 + 16);
    uint64_t v8 = *(void *)(a2 + 8);
    goto LABEL_34;
  }
  if (v5 && v7 == 85)
  {
    uint64_t result = sub_1CC166508(*((void *)v5 - 8), a2, a3);
    if (result)
    {
      uint64_t v15 = result;
      uint64_t result = sub_1CC166508(*((void *)v6 - 4), a2, a3);
      if (result)
      {
        if (v15 != -1)
        {
          if (v15 == result) {
            uint64_t v16 = v15;
          }
          else {
            uint64_t v16 = 0;
          }
          if (result == -1) {
            return v15;
          }
          else {
            return v16;
          }
        }
      }
    }
  }
  else
  {
    BOOL ConstantDataArrayInfo = llvm::getConstantDataArrayInfo((llvm::Value *)v5, (uint64_t *)&v36, a3, 0);
    uint64_t result = 0;
    if (ConstantDataArrayInfo)
    {
      unsigned int v18 = v36;
      if (v36)
      {
        int v19 = v38;
        if (v38)
        {
          int v20 = 0;
          int v21 = v37;
          while (llvm::ConstantDataSequential::getElementAsInteger(v18, v21 + v20))
          {
            if (v19 == ++v20)
            {
              int v20 = v19;
              return (v20 + 1);
            }
          }
        }
        else
        {
          int v20 = 0;
        }
        return (v20 + 1);
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t llvm::getArgumentAliasingToReturnedPointer(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2 && (*(unsigned char *)(v2 + 29) & 0x40) != 0)
  {
    uint64_t v8 = *(unsigned int *)(v2 + 8);
    if (v8)
    {
      uint64_t v9 = v2 + 40;
      int v10 = -1;
      while (!*(void *)v9 || (*(unsigned char *)(*(void *)v9 + 17) & 0x40) == 0)
      {
        ++v10;
        v9 += 8;
        if (!--v8) {
          goto LABEL_30;
        }
      }
LABEL_31:
      uint64_t v5 = *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * (v10 - 1));
      if (v5) {
        return v5;
      }
      uint64_t v3 = *(void *)(a1 - 32);
      if (!v3) {
        return 0;
      }
      goto LABEL_8;
    }
LABEL_30:
    int v10 = 0;
    goto LABEL_31;
  }
  uint64_t v3 = *(void *)(a1 - 32);
  if (!v3) {
    return 0;
  }
  if (!*(unsigned char *)(v3 + 16) && *(void *)(v3 + 24) == *(void *)(a1 + 72))
  {
    uint64_t v4 = *(void *)(v3 + 112);
    if (v4)
    {
      if ((*(unsigned char *)(v4 + 29) & 0x40) != 0)
      {
        uint64_t v11 = *(unsigned int *)(v4 + 8);
        if (v11)
        {
          uint64_t v12 = v4 + 40;
          int v10 = -1;
          while (!*(void *)v12 || (*(unsigned char *)(*(void *)v12 + 17) & 0x40) == 0)
          {
            ++v10;
            v12 += 8;
            if (!--v11) {
              goto LABEL_30;
            }
          }
          goto LABEL_31;
        }
        goto LABEL_30;
      }
    }
  }
LABEL_8:
  if (*(unsigned char *)(v3 + 16) || *(void *)(v3 + 24) != *(void *)(a1 + 72)) {
    return 0;
  }
  uint64_t v5 = 0;
  int v6 = *(_DWORD *)(v3 + 36);
  if (v6 > 289)
  {
    if (v6 == 290 || v6 == 442 || v6 == 1260) {
      return *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
    }
  }
  else
  {
    if (v6 == 166) {
      return *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
    }
    if (v6 == 252)
    {
      if (a2) {
        return 0;
      }
      return *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
    }
  }
  return v5;
}

uint64_t llvm::isIntrinsicReturningPointerAliasingArgumentWithoutCapturing(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 - 32);
  if (!v2 || *(unsigned char *)(v2 + 16) || *(void *)(v2 + 24) != *(void *)(a1 + 72)) {
    return 0;
  }
  int v3 = *(_DWORD *)(v2 + 36);
  uint64_t result = 1;
  if (v3 <= 289)
  {
    if (v3 == 166) {
      return result;
    }
    if (v3 == 252) {
      return a2 ^ 1u;
    }
    return 0;
  }
  if (v3 != 290 && v3 != 442 && v3 != 1260) {
    return 0;
  }
  return result;
}

llvm *llvm::getUnderlyingObject(llvm *this, const llvm::Value *a2)
{
  int v3 = this;
  if (*(unsigned char *)(*(void *)this + 8) == 15)
  {
    unsigned int v4 = 0;
    unsigned int v5 = a2 - 1;
    while (1)
    {
      unsigned int v6 = *((unsigned __int8 *)v3 + 16);
      if (v6 == 62)
      {
LABEL_7:
        int v8 = *((_DWORD *)v3 + 5);
        if ((v8 & 0x40000000) != 0) {
          uint64_t v9 = (llvm **)*((void *)v3 - 1);
        }
        else {
          uint64_t v9 = (llvm **)((char *)v3 - 32 * (v8 & 0x7FFFFFF));
        }
LABEL_19:
        int v3 = *v9;
        goto LABEL_51;
      }
      if (v6 == 5)
      {
        unsigned int v7 = *((unsigned __int16 *)v3 + 9);
        if (v7 == 49) {
          goto LABEL_12;
        }
        if (v7 == 34) {
          goto LABEL_7;
        }
      }
      else
      {
        unsigned int v7 = v6 - 28;
        if (v6 < 0x1C) {
          goto LABEL_14;
        }
        if (v6 == 77) {
          goto LABEL_12;
        }
      }
      if (v7 == 50)
      {
LABEL_12:
        int v10 = *((_DWORD *)v3 + 5);
        if ((v10 & 0x40000000) != 0) {
          uint64_t v11 = (llvm **)*((void *)v3 - 1);
        }
        else {
          uint64_t v11 = (llvm **)((char *)v3 - 32 * (v10 & 0x7FFFFFF));
        }
        int v3 = *v11;
        uint64_t result = *v11;
        if (*(unsigned char *)(*(void *)*v11 + 8) != 15) {
          return result;
        }
        goto LABEL_51;
      }
LABEL_14:
      if (v6 != 83)
      {
        if (v6 == 1)
        {
          if (llvm::GlobalValue::isInterposable(v3)) {
            return v3;
          }
          uint64_t v9 = (llvm **)((char *)v3 - 32);
          goto LABEL_19;
        }
        if (v6 < 0x1C || (unsigned int v15 = v6 - 33, v15 > 0x33) || ((1 << v15) & 0x8000000000041) == 0)
        {
LABEL_47:
          unsigned int v20 = 0;
          uint64_t v2 = (uint64_t)v3;
          goto LABEL_48;
        }
        uint64_t v16 = *((void *)v3 + 8);
        if (v16 && (*(unsigned char *)(v16 + 29) & 0x40) != 0)
        {
          uint64_t v21 = *(unsigned int *)(v16 + 8);
          if (v21)
          {
            uint64_t v22 = v16 + 40;
            int v23 = -1;
            while (!*(void *)v22 || (*(unsigned char *)(*(void *)v22 + 17) & 0x40) == 0)
            {
              ++v23;
              v22 += 8;
              if (!--v21) {
                goto LABEL_64;
              }
            }
LABEL_65:
            unint64_t v26 = (llvm *)*((void *)v3 + 4 * (v23 - 1) + -4 * (*((_DWORD *)v3 + 5) & 0x7FFFFFF));
            if (!v26)
            {
              uint64_t v17 = *((void *)v3 - 4);
              if (!v17) {
                goto LABEL_47;
              }
LABEL_36:
              if (*(unsigned char *)(v17 + 16) || *(void *)(v17 + 24) != *((void *)v3 + 9)) {
                goto LABEL_47;
              }
              int v19 = *(_DWORD *)(v17 + 36);
              if (v19 > 289)
              {
                if (v19 != 290 && v19 != 1260 && v19 != 442) {
                  goto LABEL_47;
                }
              }
              else if (v19 != 166 && v19 != 252)
              {
                goto LABEL_47;
              }
              unint64_t v26 = (llvm *)*((void *)v3 - 4 * (*((_DWORD *)v3 + 5) & 0x7FFFFFF));
              if (!v26) {
                goto LABEL_47;
              }
            }
            unsigned int v20 = 4;
            int v3 = v26;
            goto LABEL_48;
          }
        }
        else
        {
          uint64_t v17 = *((void *)v3 - 4);
          if (!v17) {
            goto LABEL_47;
          }
          if (*(unsigned char *)(v17 + 16)) {
            goto LABEL_36;
          }
          if (*(void *)(v17 + 24) != *((void *)v3 + 9)) {
            goto LABEL_36;
          }
          uint64_t v18 = *(void *)(v17 + 112);
          if (!v18 || (*(unsigned char *)(v18 + 29) & 0x40) == 0) {
            goto LABEL_36;
          }
          uint64_t v24 = *(unsigned int *)(v18 + 8);
          if (v24)
          {
            uint64_t v25 = v18 + 40;
            int v23 = -1;
            while (!*(void *)v25 || (*(unsigned char *)(*(void *)v25 + 17) & 0x40) == 0)
            {
              ++v23;
              v25 += 8;
              if (!--v24) {
                goto LABEL_64;
              }
            }
            goto LABEL_65;
          }
        }
LABEL_64:
        int v23 = 0;
        goto LABEL_65;
      }
      int v13 = *((_DWORD *)v3 + 5);
      if ((v13 & 0x7FFFFFF) != 1) {
        goto LABEL_47;
      }
      if ((v13 & 0x40000000) != 0) {
        BOOL v14 = (llvm **)*((void *)v3 - 1);
      }
      else {
        BOOL v14 = (llvm **)((char *)v3 - 32);
      }
      int v3 = *v14;
      unsigned int v20 = 4;
LABEL_48:
      if (v20 <= 1) {
        unsigned int v20 = 1;
      }
      uint64_t result = (llvm *)v2;
      if (v20 != 4) {
        return result;
      }
LABEL_51:
      ++v4;
      uint64_t result = v3;
      if (v5 < v4) {
        return result;
      }
    }
  }
  return v3;
}

void llvm::getUnderlyingObjects(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Value *a4)
{
  v62[4] = *MEMORY[0x1E4F143B8];
  unsigned int v52 = v56;
  unsigned int v53 = v56;
  uint64_t v54 = 4;
  int v55 = 0;
  unsigned int v59 = v62;
  unsigned int v61 = 4;
  v62[0] = a1;
  unsigned int v7 = 1;
  do
  {
    int v8 = (llvm *)*((void *)v59 + v7 - 1);
    unsigned int v60 = v7 - 1;
    UnderlyingObject = llvm::getUnderlyingObject(v8, a4);
    int v10 = UnderlyingObject;
    uint64_t v11 = v53;
    uint64_t v12 = HIDWORD(v54);
    if (v53 == v52)
    {
      if (HIDWORD(v54))
      {
        int v13 = 0;
        uint64_t v14 = 8 * HIDWORD(v54);
        unsigned int v15 = (llvm **)v53;
        while (*v15 != UnderlyingObject)
        {
          if (*v15 == (llvm *)-2) {
            int v13 = v15;
          }
          ++v15;
          v14 -= 8;
          if (!v14)
          {
            if (!v13) {
              goto LABEL_10;
            }
            *int v13 = UnderlyingObject;
            --v55;
            goto LABEL_12;
          }
        }
        goto LABEL_18;
      }
LABEL_10:
      unsigned int v16 = v54;
      if (HIDWORD(v54) < v54)
      {
        ++HIDWORD(v54);
        *(void *)&v53[8 * v12] = UnderlyingObject;
        goto LABEL_12;
      }
    }
    else
    {
      unsigned int v16 = v54;
    }
    if (3 * v16 <= 4 * (HIDWORD(v54) - v55))
    {
      if (v16 >= 0x40) {
        v16 *= 2;
      }
      else {
        unsigned int v16 = 128;
      }
LABEL_59:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v52, v16);
      unsigned int v16 = v54;
      uint64_t v11 = v53;
      goto LABEL_24;
    }
    if (v16 - HIDWORD(v54) < v16 >> 3) {
      goto LABEL_59;
    }
LABEL_24:
    unsigned int v19 = v16 - 1;
    unsigned int v20 = (v16 - 1) & ((v10 >> 4) ^ (v10 >> 9));
    uint64_t v21 = &v11[8 * v20];
    uint64_t v22 = *(llvm **)v21;
    if (*(void *)v21 != -1)
    {
      int v23 = 0;
      int v24 = 1;
      while (v22 != v10)
      {
        if (v23) {
          BOOL v25 = 0;
        }
        else {
          BOOL v25 = v22 == (llvm *)-2;
        }
        if (v25) {
          int v23 = v21;
        }
        unsigned int v26 = v20 + v24++;
        unsigned int v20 = v26 & v19;
        uint64_t v21 = &v11[8 * (v26 & v19)];
        uint64_t v22 = *(llvm **)v21;
        if (*(void *)v21 == -1) {
          goto LABEL_34;
        }
      }
      goto LABEL_18;
    }
    int v23 = 0;
LABEL_34:
    if (v23) {
      int v27 = (llvm **)v23;
    }
    else {
      int v27 = (llvm **)v21;
    }
    if (*v27 == v10) {
      goto LABEL_18;
    }
    if (*v27 == (llvm *)-2) {
      --v55;
    }
    else {
      ++HIDWORD(v54);
    }
    unsigned __int8 *v27 = v10;
LABEL_12:
    int v17 = *((unsigned __int8 *)v10 + 16);
    if (!v10 || v17 != 85)
    {
      if (!v10 || v17 != 83)
      {
        unint64_t v18 = *(unsigned int *)(a2 + 8);
        if (v18 >= *(unsigned int *)(a2 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a2 + 8 * v18) = v10;
        ++*(_DWORD *)(a2 + 8);
        goto LABEL_18;
      }
      if (!a3) {
        goto LABEL_52;
      }
      int v33 = *(_DWORD *)(a3 + 16);
      if (!v33) {
        goto LABEL_52;
      }
      uint64_t v34 = *((void *)v10 + 5);
      uint64_t v35 = *(void *)a3;
      unsigned int v36 = v33 - 1;
      uint64_t v37 = ((v34 >> 4) ^ (v34 >> 9)) & (v33 - 1);
      uint64_t v38 = *(void *)(*(void *)a3 + 16 * v37);
      if (v34 != v38)
      {
        int v39 = 1;
        while (v38 != -4096)
        {
          int v40 = v37 + v39++;
          uint64_t v37 = v40 & v36;
          uint64_t v38 = *(void *)(v35 + 16 * v37);
          if (v34 == v38) {
            goto LABEL_67;
          }
        }
        goto LABEL_52;
      }
LABEL_67:
      uint64_t v41 = *(void *)(v35 + 16 * v37 + 8);
      if (v41 && **(void **)(v41 + 32) == v34)
      {
        uint64_t v57 = 0;
        uint64_t v58 = v34;
        uint64_t v42 = sub_1CB834D78((uint64_t *)a3, &v58, &v57) ? *(void *)(v57 + 8) : 0;
        int v43 = *((_DWORD *)v10 + 5);
        if ((v43 & 0x7FFFFFF) == 2)
        {
          if ((v43 & 0x40000000) != 0) {
            int v44 = (uint64_t *)*((void *)v10 - 1);
          }
          else {
            int v44 = (uint64_t *)((char *)v10 - 64);
          }
          uint64_t v45 = *v44;
          if (*v44 && *(unsigned __int8 *)(v45 + 16) >= 0x1Cu)
          {
            uint64_t v46 = *(void *)(v45 + 40);
            uint64_t v57 = 0;
            uint64_t v58 = v46;
            int v47 = sub_1CB834D78((uint64_t *)a3, &v58, &v57);
            uint64_t v48 = 0;
            if (v47) {
              uint64_t v48 = *(void *)(v57 + 8);
            }
            if (v48 == v42)
            {
LABEL_83:
              uint64_t v50 = *(void *)(v45 + 40);
              uint64_t v57 = 0;
              uint64_t v58 = v50;
              if (sub_1CB834D78((uint64_t *)a3, &v58, &v57)) {
                uint64_t v51 = *(void *)(v57 + 8);
              }
              else {
                uint64_t v51 = 0;
              }
              if (v51 == v42 && *(unsigned char *)(v45 + 16) == 60 && !llvm::Loop::isLoopInvariant(v42, *(void *)(v45 - 32))) {
                goto LABEL_18;
              }
              goto LABEL_52;
            }
            int v43 = *((_DWORD *)v10 + 5);
          }
          if ((v43 & 0x40000000) != 0) {
            unsigned __int8 v49 = (char *)*((void *)v10 - 1);
          }
          else {
            unsigned __int8 v49 = (char *)v10 - 32 * (v43 & 0x7FFFFFF);
          }
          uint64_t v45 = *((void *)v49 + 4);
          if (*(unsigned __int8 *)(v45 + 16) >= 0x1Cu) {
            goto LABEL_83;
          }
        }
      }
LABEL_52:
      int v30 = *((_DWORD *)v10 + 5);
      if ((v30 & 0x40000000) != 0)
      {
        int v31 = (char *)*((void *)v10 - 1);
        uint64_t v32 = v30 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v32 = v30 & 0x7FFFFFF;
        int v31 = (char *)v10 - 32 * v32;
      }
      sub_1CBF74A6C((uint64_t)&v59, (uint64_t)v59 + 8 * v60, v31, &v31[32 * v32]);
LABEL_18:
      unsigned int v7 = v60;
      continue;
    }
    if (v60 >= (unint64_t)v61) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v59 + v60) = *((void *)v10 - 8);
    unsigned int v28 = v60 + 1;
    unsigned int v60 = v28;
    uint64_t v29 = *((void *)v10 - 4);
    if (v28 >= v61) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v59 + v28) = v29;
    unsigned int v7 = ++v60;
  }
  while (v7);
  if (v59 != v62) {
    free(v59);
  }
  if (v53 != v52) {
    free(v53);
  }
}

uint64_t llvm::getUnderlyingObjectsForCodeGen(uint64_t a1, uint64_t a2)
{
  v59[4] = *MEMORY[0x1E4F143B8];
  uint64_t v48 = v52;
  unsigned __int8 v49 = v52;
  uint64_t v50 = (llvm::Value *)16;
  int v51 = 0;
  uint64_t v56 = v59;
  unsigned int v58 = 4;
  v59[0] = a1;
  unsigned int v3 = 1;
  do
  {
    uint64_t v4 = v56[v3 - 1];
    unsigned int v57 = v3 - 1;
    unsigned int v53 = v55;
    uint64_t v54 = 0x400000000;
    llvm::getUnderlyingObjects(v4, (uint64_t)&v53, 0, (llvm::Value *)6);
    if (!v54)
    {
LABEL_102:
      uint64_t v45 = 1;
      goto LABEL_104;
    }
    unsigned int v6 = (uint64_t *)v53;
    unsigned int v7 = (char *)v53 + 8 * v54;
    while (1)
    {
      uint64_t v8 = *v6;
      uint64_t v9 = v49;
      uint64_t v10 = HIDWORD(v50);
      if (v49 == v48)
      {
        if (HIDWORD(v50))
        {
          uint64_t v11 = 0;
          uint64_t v12 = 8 * HIDWORD(v50);
          int v13 = v49;
          do
          {
            if (*(void *)v13 == v8) {
              goto LABEL_93;
            }
            if (*(void *)v13 == -2) {
              uint64_t v11 = v13;
            }
            v13 += 8;
            v12 -= 8;
          }
          while (v12);
          if (v11)
          {
            *(void *)uint64_t v11 = v8;
            --v51;
            goto LABEL_36;
          }
        }
        unsigned int v5 = (const llvm::Value *)v50;
        if (HIDWORD(v50) < v50)
        {
          ++HIDWORD(v50);
          *(void *)&v49[8 * v10] = v8;
          goto LABEL_36;
        }
      }
      else
      {
        unsigned int v5 = (const llvm::Value *)v50;
      }
      if (3 * (int)v5 <= (4 * (HIDWORD(v50) - v51)))
      {
        if (v5 >= 0x40) {
          LODWORD(v5) = 2 * v5;
        }
        else {
          LODWORD(v5) = 128;
        }
LABEL_99:
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v48, v5);
        unsigned int v5 = (const llvm::Value *)v50;
        uint64_t v9 = v49;
        goto LABEL_17;
      }
      if ((int)v5 - HIDWORD(v50) < v5 >> 3) {
        goto LABEL_99;
      }
LABEL_17:
      int v14 = v5 - 1;
      unsigned int v15 = (v5 - 1) & ((v8 >> 4) ^ (v8 >> 9));
      unsigned int v16 = &v9[8 * v15];
      uint64_t v17 = *(void *)v16;
      if (*(void *)v16 != -1)
      {
        unint64_t v18 = 0;
        int v19 = 1;
        while (v17 != v8)
        {
          if (v18) {
            BOOL v20 = 0;
          }
          else {
            BOOL v20 = v17 == -2;
          }
          if (v20) {
            unint64_t v18 = v16;
          }
          unsigned int v21 = v15 + v19++;
          unsigned int v15 = v21 & v14;
          unsigned int v16 = &v9[8 * (v21 & v14)];
          uint64_t v17 = *(void *)v16;
          if (*(void *)v16 == -1) {
            goto LABEL_29;
          }
        }
        goto LABEL_93;
      }
      unint64_t v18 = 0;
LABEL_29:
      if (v18) {
        uint64_t v22 = v18;
      }
      else {
        uint64_t v22 = v16;
      }
      if (*(void *)v22 == v8) {
        goto LABEL_93;
      }
      if (*(void *)v22 == -2) {
        --v51;
      }
      else {
        ++HIDWORD(v50);
      }
      *(void *)uint64_t v22 = v8;
LABEL_36:
      unsigned int v23 = *(unsigned __int8 *)(v8 + 16);
      if (v8 && v23 > 0x1B)
      {
        unsigned int v24 = v23 - 28;
      }
      else
      {
        if (!v8 || v23 != 5) {
          break;
        }
        unsigned int v24 = *(unsigned __int16 *)(v8 + 18);
      }
      if (v24 != 48) {
        break;
      }
      int v25 = *(_DWORD *)(v8 + 20);
      if ((v25 & 0x40000000) != 0) {
        unsigned int v26 = *(uint64_t **)(v8 - 8);
      }
      else {
        unsigned int v26 = (uint64_t *)(v8 - 32 * (v25 & 0x7FFFFFF));
      }
      uint64_t v27 = *v26;
      unsigned int v28 = *(unsigned __int8 *)(*v26 + 16);
      BOOL v29 = v28 < 0x1C;
      BOOL v30 = v28 != 5 && v28 < 0x1C;
      if (v27 && !v30)
      {
        while (1)
        {
          if (v29) {
            unsigned int v31 = *(unsigned __int16 *)(v27 + 18);
          }
          else {
            unsigned int v31 = v28 - 28;
          }
          if (v31 == 47)
          {
            int v41 = *(_DWORD *)(v27 + 20);
            if ((v41 & 0x40000000) != 0) {
              uint64_t v42 = *(uint64_t **)(v27 - 8);
            }
            else {
              uint64_t v42 = (uint64_t *)(v27 - 32 * (v41 & 0x7FFFFFF));
            }
            uint64_t v27 = *v42;
            goto LABEL_86;
          }
          if (v31 != 13) {
            goto LABEL_86;
          }
          int v32 = *(_DWORD *)(v27 + 20);
          if ((v32 & 0x40000000) == 0) {
            break;
          }
          unsigned int v36 = *(void **)(v27 - 8);
          uint64_t v33 = v36[4];
          unsigned int v34 = *(unsigned __int8 *)(v33 + 16);
          if (v34 != 16) {
            goto LABEL_60;
          }
LABEL_73:
          uint64_t v27 = *v36;
          unsigned int v28 = *(unsigned __int8 *)(*v36 + 16);
          BOOL v29 = v28 < 0x1C;
          BOOL v39 = v28 != 5 && v28 < 0x1C;
          if (v27) {
            BOOL v40 = !v39;
          }
          else {
            BOOL v40 = 0;
          }
          if (!v40) {
            goto LABEL_86;
          }
        }
        uint64_t v33 = *(void *)(v27 - 32 * (v32 & 0x7FFFFFF) + 32);
        unsigned int v34 = *(unsigned __int8 *)(v33 + 16);
        if (v34 == 16)
        {
          uint64_t v35 = -(uint64_t)(v32 & 0x7FFFFFF);
LABEL_71:
          unsigned int v36 = (void *)(v27 + 32 * v35);
          goto LABEL_73;
        }
LABEL_60:
        if (v34 <= 0x1B)
        {
          if (v34 == 5)
          {
            unsigned int v37 = *(unsigned __int16 *)(v33 + 18);
            goto LABEL_64;
          }
          goto LABEL_65;
        }
        unsigned int v37 = v34 - 28;
LABEL_64:
        if (v37 != 17)
        {
LABEL_65:
          if ((v32 & 0x40000000) != 0) {
            uint64_t v38 = *(void *)(v27 - 8);
          }
          else {
            uint64_t v38 = v27 - 32 * (v32 & 0x7FFFFFF);
          }
          if (*(unsigned char *)(*(void *)(v38 + 32) + 16) != 83) {
            goto LABEL_86;
          }
        }
        if ((v32 & 0x40000000) != 0)
        {
          unsigned int v36 = *(void **)(v27 - 8);
          goto LABEL_73;
        }
        uint64_t v35 = -(uint64_t)(v32 & 0x7FFFFFF);
        goto LABEL_71;
      }
LABEL_86:
      if (*(unsigned char *)(*(void *)v27 + 8) != 15) {
        break;
      }
      unint64_t v43 = v57;
      if (v57 >= (unint64_t)v58) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v44 = &v56;
LABEL_92:
      (*v44)[v43] = v27;
      ++*((_DWORD *)v44 + 2);
LABEL_93:
      if (++v6 == (uint64_t *)v7) {
        goto LABEL_102;
      }
    }
    if (llvm::isIdentifiedObject((llvm *)v8, v5))
    {
      unint64_t v43 = *(unsigned int *)(a2 + 8);
      if (v43 >= *(unsigned int *)(a2 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v44 = (void **)a2;
      uint64_t v27 = v8;
      goto LABEL_92;
    }
    uint64_t v45 = 0;
    *(_DWORD *)(a2 + 8) = 0;
LABEL_104:
    if (v53 != v55) {
      free(v53);
    }
    unsigned int v3 = v57;
    if (v57) {
      char v46 = v45;
    }
    else {
      char v46 = 0;
    }
  }
  while ((v46 & 1) != 0);
  if (v56 != v59) {
    free(v56);
  }
  if (v49 != v48) {
    free(v49);
  }
  return v45;
}

uint64_t llvm::findAllocaForValue(llvm *this, llvm::Value *a2)
{
  int v2 = (int)a2;
  uint64_t v3 = 0;
  v114[4] = *MEMORY[0x1E4F143B8];
  unsigned int v106 = v110;
  uint64_t v107 = v110;
  int v109 = 0;
  uint64_t v111 = v114;
  unsigned int v113 = 4;
  uint64_t v108 = 0x100000004;
  v110[0] = this;
  v114[0] = this;
  unsigned int v4 = 1;
  do
  {
    while (1)
    {
      while (1)
      {
        unsigned int v5 = v111;
        uint64_t v6 = *((void *)v111 + v4 - 1);
        unsigned int v112 = --v4;
        unsigned int v7 = *(unsigned __int8 *)(v6 + 16);
        if (!v6 || v7 != 59) {
          break;
        }
        if (v3)
        {
          BOOL v25 = v3 == v6;
          uint64_t v3 = v6;
          if (!v25) {
            goto LABEL_274;
          }
          goto LABEL_264;
        }
        uint64_t v3 = v6;
        if (!v4) {
          goto LABEL_275;
        }
      }
      if (v7 >= 0x1C && v7 - 79 >= 0xFFFFFFF3)
      {
        uint64_t v12 = *(void *)(v6 - 32);
        int v13 = v107;
        uint64_t v14 = HIDWORD(v108);
        if (v107 == v106)
        {
          if (HIDWORD(v108))
          {
            unsigned int v15 = 0;
            uint64_t v16 = 8 * HIDWORD(v108);
            uint64_t v17 = v107;
            do
            {
              if (*v17 == v12) {
                goto LABEL_264;
              }
              if (*v17 == -2) {
                unsigned int v15 = v17;
              }
              ++v17;
              v16 -= 8;
            }
            while (v16);
            if (v15)
            {
LABEL_238:
              *unsigned int v15 = v12;
              --v109;
              goto LABEL_261;
            }
          }
          unsigned int v18 = v108;
          if (HIDWORD(v108) < v108) {
            goto LABEL_26;
          }
        }
        else
        {
          unsigned int v18 = v108;
        }
        if (3 * v18 <= 4 * (HIDWORD(v108) - v109))
        {
          if (v18 >= 0x40) {
            v18 *= 2;
          }
          else {
            unsigned int v18 = 128;
          }
        }
        else if (v18 - HIDWORD(v108) >= v18 >> 3)
        {
          goto LABEL_32;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v106, v18);
        unsigned int v18 = v108;
        int v13 = v107;
LABEL_32:
        unsigned int v19 = v18 - 1;
        unsigned int v20 = (v18 - 1) & ((v12 >> 4) ^ (v12 >> 9));
        unsigned int v21 = &v13[v20];
        uint64_t v22 = *v21;
        if (*v21 != -1)
        {
          unsigned int v23 = 0;
          int v24 = 1;
          while (v22 != v12)
          {
            if (v23) {
              BOOL v25 = 0;
            }
            else {
              BOOL v25 = v22 == -2;
            }
            if (v25) {
              unsigned int v23 = v21;
            }
            unsigned int v26 = v20 + v24++;
            unsigned int v20 = v26 & v19;
            unsigned int v21 = &v13[v26 & v19];
            uint64_t v22 = *v21;
            if (*v21 == -1) {
              goto LABEL_254;
            }
          }
          goto LABEL_266;
        }
        goto LABEL_253;
      }
      if (v7 == 62)
      {
        if (v2 && !llvm::GetElementPtrInst::hasAllZeroIndices((llvm::GetElementPtrInst *)v6)) {
          goto LABEL_274;
        }
        uint64_t v12 = *(void *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF));
        int v13 = v107;
        uint64_t v14 = HIDWORD(v108);
        if (v107 == v106)
        {
          if (HIDWORD(v108))
          {
            unsigned int v15 = 0;
            uint64_t v34 = 8 * HIDWORD(v108);
            uint64_t v35 = v107;
            do
            {
              if (*v35 == v12) {
                goto LABEL_264;
              }
              if (*v35 == -2) {
                unsigned int v15 = v35;
              }
              ++v35;
              v34 -= 8;
            }
            while (v34);
            if (v15) {
              goto LABEL_238;
            }
          }
          unsigned int v36 = v108;
          if (HIDWORD(v108) < v108) {
            goto LABEL_26;
          }
        }
        else
        {
          unsigned int v36 = v108;
        }
        if (3 * v36 <= 4 * (HIDWORD(v108) - v109))
        {
          if (v36 >= 0x40) {
            v36 *= 2;
          }
          else {
            unsigned int v36 = 128;
          }
        }
        else if (v36 - HIDWORD(v108) >= v36 >> 3)
        {
          goto LABEL_145;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v106, v36);
        unsigned int v36 = v108;
        int v13 = v107;
LABEL_145:
        unsigned int v72 = v36 - 1;
        unsigned int v73 = (v36 - 1) & ((v12 >> 4) ^ (v12 >> 9));
        unsigned int v21 = &v13[v73];
        uint64_t v74 = *v21;
        if (*v21 != -1)
        {
          unsigned int v23 = 0;
          int v75 = 1;
          while (v74 != v12)
          {
            if (v23) {
              BOOL v76 = 0;
            }
            else {
              BOOL v76 = v74 == -2;
            }
            if (v76) {
              unsigned int v23 = v21;
            }
            unsigned int v77 = v73 + v75++;
            unsigned int v73 = v77 & v72;
            unsigned int v21 = &v13[v77 & v72];
            uint64_t v74 = *v21;
            if (*v21 == -1) {
              goto LABEL_254;
            }
          }
          goto LABEL_266;
        }
        goto LABEL_253;
      }
      if (v7 == 85) {
        break;
      }
      if (v7 != 83)
      {
        if (v7 < 0x1C
          || ((v37 = v7 - 33, BOOL v38 = v37 > 0x33, v39 = (1 << v37) & 0x8000000000041, !v38)
            ? (BOOL v40 = v39 == 0)
            : (BOOL v40 = 1),
              v40))
        {
LABEL_274:
          uint64_t v3 = 0;
          goto LABEL_276;
        }
        uint64_t v41 = *(void *)(v6 + 64);
        if (v41 && (*(unsigned char *)(v41 + 29) & 0x40) != 0)
        {
          uint64_t v93 = *(unsigned int *)(v41 + 8);
          if (v93)
          {
            uint64_t v94 = v41 + 40;
            int v46 = -1;
            while (!*(void *)v94 || (*(unsigned char *)(*(void *)v94 + 17) & 0x40) == 0)
            {
              ++v46;
              v94 += 8;
              if (!--v93) {
                goto LABEL_226;
              }
            }
LABEL_227:
            uint64_t v12 = *(void *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 32 * (v46 - 1));
            if (!v12) {
              goto LABEL_274;
            }
            int v13 = v107;
            uint64_t v14 = HIDWORD(v108);
            if (v107 == v106)
            {
              if (HIDWORD(v108))
              {
                unsigned int v15 = 0;
                uint64_t v95 = 8 * HIDWORD(v108);
                __int32 v96 = v107;
                do
                {
                  if (*v96 == v12) {
                    goto LABEL_264;
                  }
                  if (*v96 == -2) {
                    unsigned int v15 = v96;
                  }
                  ++v96;
                  v95 -= 8;
                }
                while (v95);
                if (v15) {
                  goto LABEL_238;
                }
              }
              unsigned int v97 = v108;
              if (HIDWORD(v108) < v108)
              {
LABEL_26:
                HIDWORD(v108) = v14 + 1;
                v13[v14] = v12;
                goto LABEL_261;
              }
            }
            else
            {
              unsigned int v97 = v108;
            }
            if (3 * v97 <= 4 * (HIDWORD(v108) - v109))
            {
              if (v97 >= 0x40) {
                v97 *= 2;
              }
              else {
                unsigned int v97 = 128;
              }
            }
            else if (v97 - HIDWORD(v108) >= v97 >> 3)
            {
              goto LABEL_242;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v106, v97);
            unsigned int v97 = v108;
            int v13 = v107;
LABEL_242:
            unsigned int v98 = v97 - 1;
            unsigned int v99 = (v97 - 1) & ((v12 >> 4) ^ (v12 >> 9));
            unsigned int v21 = &v13[v99];
            uint64_t v100 = *v21;
            if (*v21 != -1)
            {
              unsigned int v23 = 0;
              int v101 = 1;
              while (v100 != v12)
              {
                if (v23) {
                  BOOL v102 = 0;
                }
                else {
                  BOOL v102 = v100 == -2;
                }
                if (v102) {
                  unsigned int v23 = v21;
                }
                unsigned int v103 = v99 + v101++;
                unsigned int v99 = v103 & v98;
                unsigned int v21 = &v13[v103 & v98];
                uint64_t v100 = *v21;
                if (*v21 == -1) {
                  goto LABEL_254;
                }
              }
              goto LABEL_266;
            }
LABEL_253:
            unsigned int v23 = 0;
LABEL_254:
            if (v23) {
              int8x8_t v104 = v23;
            }
            else {
              int8x8_t v104 = v21;
            }
            if (*v104 != v12)
            {
              if (*v104 == -2) {
                --v109;
              }
              else {
                ++HIDWORD(v108);
              }
              *int8x8_t v104 = v12;
              unsigned int v4 = v112;
LABEL_261:
              if (v4 >= v113) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v111 + v4) = v12;
LABEL_263:
              unsigned int v4 = ++v112;
              goto LABEL_264;
            }
            goto LABEL_266;
          }
        }
        else
        {
          uint64_t v42 = *(void *)(v6 - 32);
          if (!v42) {
            goto LABEL_274;
          }
          if (*(unsigned char *)(v42 + 16)) {
            goto LABEL_274;
          }
          if (*(void *)(v42 + 24) != *(void *)(v6 + 72)) {
            goto LABEL_274;
          }
          uint64_t v43 = *(void *)(v42 + 112);
          if (!v43 || (*(unsigned char *)(v43 + 29) & 0x40) == 0) {
            goto LABEL_274;
          }
          uint64_t v44 = *(unsigned int *)(v43 + 8);
          if (v44)
          {
            uint64_t v45 = v43 + 40;
            int v46 = -1;
            while (!*(void *)v45 || (*(unsigned char *)(*(void *)v45 + 17) & 0x40) == 0)
            {
              ++v46;
              v45 += 8;
              if (!--v44) {
                goto LABEL_226;
              }
            }
            goto LABEL_227;
          }
        }
LABEL_226:
        int v46 = 0;
        goto LABEL_227;
      }
      int v9 = *(_DWORD *)(v6 + 20);
      if ((v9 & 0x40000000) == 0)
      {
        uint64_t v10 = v9 & 0x7FFFFFF;
        uint64_t v11 = (uint64_t *)(v6 - 32 * v10);
        if (v10) {
          goto LABEL_84;
        }
        goto LABEL_264;
      }
      uint64_t v11 = *(uint64_t **)(v6 - 8);
      uint64_t v10 = v9 & 0x7FFFFFF;
      if (v10)
      {
LABEL_84:
        int v47 = &v11[4 * v10];
        while (1)
        {
          uint64_t v48 = *v11;
          unsigned __int8 v49 = (char *)v107;
          uint64_t v50 = HIDWORD(v108);
          if (v107 == v106)
          {
            if (HIDWORD(v108))
            {
              int v51 = 0;
              uint64_t v52 = 8 * HIDWORD(v108);
              unsigned int v53 = v107;
              while (*v53 != v48)
              {
                if (*v53 == -2) {
                  int v51 = v53;
                }
                ++v53;
                v52 -= 8;
                if (!v52)
                {
                  if (!v51) {
                    goto LABEL_93;
                  }
                  *int v51 = v48;
                  --v109;
                  goto LABEL_117;
                }
              }
              goto LABEL_119;
            }
LABEL_93:
            unsigned int v54 = v108;
            if (HIDWORD(v108) < v108)
            {
              ++HIDWORD(v108);
              v107[v50] = v48;
              goto LABEL_117;
            }
          }
          else
          {
            unsigned int v54 = v108;
          }
          if (3 * v54 <= 4 * (HIDWORD(v108) - v109)) {
            break;
          }
          if (v54 - HIDWORD(v108) < v54 >> 3) {
            goto LABEL_126;
          }
LABEL_98:
          unsigned int v55 = v54 - 1;
          unsigned int v56 = (v54 - 1) & ((v48 >> 4) ^ (v48 >> 9));
          unsigned int v57 = &v49[8 * v56];
          uint64_t v58 = *(void *)v57;
          if (*(void *)v57 != -1)
          {
            unsigned int v59 = 0;
            int v60 = 1;
            while (v58 != v48)
            {
              if (v59) {
                BOOL v61 = 0;
              }
              else {
                BOOL v61 = v58 == -2;
              }
              if (v61) {
                unsigned int v59 = v57;
              }
              unsigned int v62 = v56 + v60++;
              unsigned int v56 = v62 & v55;
              unsigned int v57 = &v49[8 * (v62 & v55)];
              uint64_t v58 = *(void *)v57;
              if (*(void *)v57 == -1) {
                goto LABEL_110;
              }
            }
            goto LABEL_119;
          }
          unsigned int v59 = 0;
LABEL_110:
          if (v59) {
            unint64_t v63 = v59;
          }
          else {
            unint64_t v63 = v57;
          }
          if (*(void *)v63 == v48) {
            goto LABEL_119;
          }
          if (*(void *)v63 == -2) {
            --v109;
          }
          else {
            ++HIDWORD(v108);
          }
          *(void *)unint64_t v63 = v48;
LABEL_117:
          if (v112 >= (unint64_t)v113) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v111 + v112++) = v48;
LABEL_119:
          v11 += 4;
          if (v11 == v47) {
            goto LABEL_266;
          }
        }
        if (v54 >= 0x40) {
          v54 *= 2;
        }
        else {
          unsigned int v54 = 128;
        }
LABEL_126:
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v106, v54);
        unsigned int v54 = v108;
        unsigned __int8 v49 = (char *)v107;
        goto LABEL_98;
      }
LABEL_264:
      if (!v4) {
        goto LABEL_275;
      }
    }
    uint64_t v27 = *(void *)(v6 - 64);
    unsigned int v28 = v107;
    uint64_t v29 = HIDWORD(v108);
    if (v107 == v106)
    {
      if (HIDWORD(v108))
      {
        uint64_t v30 = 0;
        unsigned int v31 = 0;
        while (1)
        {
          uint64_t v32 = v107[v30];
          if (v32 == v27) {
            goto LABEL_165;
          }
          if (v32 == -2) {
            unsigned int v31 = &v107[v30];
          }
          if (HIDWORD(v108) == ++v30)
          {
            if (!v31) {
              break;
            }
            void *v31 = v27;
            --v109;
            goto LABEL_163;
          }
        }
      }
      unsigned int v33 = v108;
      if (HIDWORD(v108) < v108)
      {
        ++HIDWORD(v108);
        v107[v29] = v27;
LABEL_163:
        if (v4 >= v113) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v111 + v4) = v27;
        ++v112;
        unsigned int v28 = v107;
        goto LABEL_165;
      }
    }
    else
    {
      unsigned int v33 = v108;
    }
    if (3 * v33 <= 4 * (HIDWORD(v108) - v109))
    {
      if (v33 >= 0x40) {
        v33 *= 2;
      }
      else {
        unsigned int v33 = 128;
      }
    }
    else if (v33 - HIDWORD(v108) >= v33 >> 3)
    {
      goto LABEL_131;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v106, v33);
    unsigned int v33 = v108;
    unsigned int v28 = v107;
LABEL_131:
    unsigned int v64 = v33 - 1;
    unsigned int v65 = (v33 - 1) & ((v27 >> 4) ^ (v27 >> 9));
    int v66 = &v28[v65];
    uint64_t v67 = *v66;
    if (*v66 != -1)
    {
      unsigned int v68 = 0;
      int v69 = 1;
      while (v67 != v27)
      {
        if (v68) {
          BOOL v70 = 0;
        }
        else {
          BOOL v70 = v67 == -2;
        }
        if (v70) {
          unsigned int v68 = v66;
        }
        unsigned int v71 = v65 + v69++;
        unsigned int v65 = v71 & v64;
        int v66 = &v28[v71 & v64];
        uint64_t v67 = *v66;
        if (*v66 == -1) {
          goto LABEL_157;
        }
      }
      goto LABEL_165;
    }
    unsigned int v68 = 0;
LABEL_157:
    if (v68) {
      int v66 = v68;
    }
    if (*v66 != v27)
    {
      if (*v66 == -2) {
        --v109;
      }
      else {
        ++HIDWORD(v108);
      }
      *int v66 = v27;
      unsigned int v4 = v112;
      goto LABEL_163;
    }
LABEL_165:
    uint64_t v78 = *(void *)(v6 - 32);
    uint64_t v79 = HIDWORD(v108);
    if (v28 == v106)
    {
      if (HIDWORD(v108))
      {
        unsigned int v80 = 0;
        uint64_t v81 = 8 * HIDWORD(v108);
        unsigned int v82 = v28;
        do
        {
          if (*v82 == v78) {
            goto LABEL_266;
          }
          if (*v82 == -2) {
            unsigned int v80 = v82;
          }
          ++v82;
          v81 -= 8;
        }
        while (v81);
        if (v80)
        {
          *unsigned int v80 = v78;
          --v109;
          goto LABEL_197;
        }
      }
      unsigned int v83 = v108;
      if (HIDWORD(v108) < v108)
      {
        ++HIDWORD(v108);
        v28[v79] = v78;
LABEL_197:
        if (v112 >= (unint64_t)v113) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v111 + v112) = v78;
        goto LABEL_263;
      }
    }
    else
    {
      unsigned int v83 = v108;
    }
    if (3 * v83 <= 4 * (HIDWORD(v108) - v109))
    {
      if (v83 >= 0x40) {
        v83 *= 2;
      }
      else {
        unsigned int v83 = 128;
      }
    }
    else if (v83 - HIDWORD(v108) >= v83 >> 3)
    {
      goto LABEL_178;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v106, v83);
    unsigned int v83 = v108;
    unsigned int v28 = v107;
LABEL_178:
    unsigned int v84 = v83 - 1;
    unsigned int v85 = (v83 - 1) & ((v78 >> 4) ^ (v78 >> 9));
    int v86 = &v28[v85];
    uint64_t v87 = *v86;
    if (*v86 == -1)
    {
      int64_t v88 = 0;
LABEL_190:
      if (v88) {
        unsigned int v92 = v88;
      }
      else {
        unsigned int v92 = v86;
      }
      if (*v92 != v78)
      {
        if (*v92 == -2) {
          --v109;
        }
        else {
          ++HIDWORD(v108);
        }
        *unsigned int v92 = v78;
        goto LABEL_197;
      }
    }
    else
    {
      int64_t v88 = 0;
      int v89 = 1;
      while (v87 != v78)
      {
        if (v88) {
          BOOL v90 = 0;
        }
        else {
          BOOL v90 = v87 == -2;
        }
        if (v90) {
          int64_t v88 = v86;
        }
        unsigned int v91 = v85 + v89++;
        unsigned int v85 = v91 & v84;
        int v86 = &v28[v91 & v84];
        uint64_t v87 = *v86;
        if (*v86 == -1) {
          goto LABEL_190;
        }
      }
    }
LABEL_266:
    unsigned int v4 = v112;
  }
  while (v112);
LABEL_275:
  unsigned int v5 = v111;
LABEL_276:
  if (v5 != v114) {
    free(v5);
  }
  if (v107 != v106) {
    free(v107);
  }
  return v3;
}

BOOL llvm::onlyUsedByLifetimeMarkers(llvm *this, const llvm::Value *a2)
{
  return sub_1CC168130((uint64_t)this, 0);
}

BOOL sub_1CC168130(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 1;
  }
  while (1)
  {
    uint64_t v4 = *(void *)(v2 + 24);
    if (*(unsigned char *)(v4 + 16) != 84) {
      break;
    }
    uint64_t v5 = *(void *)(v4 - 32);
    if (!v5 || *(unsigned char *)(v5 + 16) || *(void *)(v5 + 24) != *(void *)(v4 + 72) || (*(unsigned char *)(v5 + 33) & 0x20) == 0) {
      break;
    }
    if (!llvm::Instruction::isLifetimeStartOrEnd(*(llvm::Instruction **)(v2 + 24)))
    {
      if (!a2) {
        return 0;
      }
      if (!sub_1CBF698E4(v4))
      {
        BOOL result = sub_1CC27D470(v4);
        if (!result) {
          return result;
        }
      }
    }
    uint64_t v2 = *(void *)(v2 + 8);
    if (!v2) {
      return 1;
    }
  }
  return 0;
}

BOOL llvm::onlyUsedByLifetimeMarkersOrDroppableInsts(llvm *this, const llvm::Value *a2)
{
  return sub_1CC168130((uint64_t)this, 1);
}

uint64_t llvm::mustSuppressSpeculation(uint64_t a1)
{
  if ((*(_WORD *)(a1 + 18) & 0x301) == 0)
  {
    uint64_t v1 = *(void *)(*(void *)(*(void *)(a1 + 40) + 56) + 112);
    if (!v1) {
      return 0;
    }
    unsigned int v2 = *(unsigned __int8 *)(v1 + 18);
    if ((v2 & 0x44444444) == 0) {
      return (v2 >> 3) & 1;
    }
  }
  return 1;
}

uint64_t llvm::isSafeToSpeculativelyExecute(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t result = 0;
  unsigned int v6 = *(unsigned __int8 *)(a1 + 16);
  BOOL v8 = v6 < 0x1C && v6 != 5;
  if (a1 && !v8)
  {
    uint64_t v12 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
    if (v12)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 32 * v12;
      do
      {
        int v15 = *(_DWORD *)(a1 + 20);
        if ((v15 & 0x40000000) != 0) {
          uint64_t v16 = *(void *)(a1 - 8);
        }
        else {
          uint64_t v16 = a1 - 32 * (v15 & 0x7FFFFFF);
        }
        uint64_t v17 = *(void *)(v16 + v13);
        if (v17) {
          BOOL v18 = *(unsigned __int8 *)(v17 + 16) > 0x14u;
        }
        else {
          BOOL v18 = 1;
        }
        if (!v18)
        {
          unsigned int v56 = (llvm::APInt **)v60;
          unsigned int v57 = (llvm::APInt **)v60;
          uint64_t v58 = 4;
          int v59 = 0;
          BOOL v19 = sub_1CC565AD0(v17, (uint64_t)&v56);
          if (v57 == v56)
          {
            if (v19) {
              return 0;
            }
          }
          else
          {
            BOOL v53 = v19;
            free(v57);
            if (v53) {
              return 0;
            }
          }
        }
        v13 += 32;
      }
      while (v14 != v13);
      unsigned int v6 = *(unsigned __int8 *)(a1 + 16);
    }
    if (v6 > 0x1B) {
      unsigned int v20 = v6 - 28;
    }
    else {
      unsigned int v20 = *(unsigned __int16 *)(a1 + 18);
    }
    uint64_t result = 1;
    switch(v20)
    {
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0x1Fu:
      case 0x21u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x33u:
      case 0x34u:
      case 0x37u:
      case 0x3Cu:
      case 0x42u:
        return 0;
      case 0x13u:
      case 0x16u:
        unsigned int v55 = 0;
        int v21 = *(_DWORD *)(a1 + 20);
        if ((v21 & 0x40000000) != 0) {
          uint64_t v22 = *(void *)(a1 - 8);
        }
        else {
          uint64_t v22 = a1 - 32 * (v21 & 0x7FFFFFF);
        }
        unsigned int v33 = *(unsigned __int8 **)(v22 + 32);
        unsigned int v56 = &v55;
        unsigned int v57 = 0;
        uint64_t result = sub_1CBF528D8((uint64_t)&v56, v33);
        if (!result) {
          return result;
        }
        uint64_t v34 = v55;
        uint64_t v35 = *((unsigned int *)v55 + 2);
        if (v35 < 0x41) {
          return *(void *)v34 != 0;
        }
        int v36 = 0;
        int64_t v37 = (unint64_t)(v35 + 63) >> 6;
        do
        {
          BOOL v18 = v37-- < 1;
          if (v18) {
            break;
          }
          unint64_t v38 = *(void *)(*(void *)v55 + 8 * v37);
          v36 += __clz(v38);
        }
        while (!v38);
        int v39 = v35 | 0xFFFFFFC0;
        if ((v35 & 0x3F) == 0) {
          int v39 = 0;
        }
        if ((v35 - v36 - v39) > 0x40) {
          return 1;
        }
        uint64_t v34 = *(llvm::APInt **)v55;
        return *(void *)v34 != 0;
      case 0x14u:
      case 0x17u:
        unsigned int v54 = 0;
        unsigned int v55 = 0;
        int v23 = *(_DWORD *)(a1 + 20);
        if ((v23 & 0x40000000) != 0) {
          uint64_t v24 = *(void *)(a1 - 8);
        }
        else {
          uint64_t v24 = a1 - 32 * (v23 & 0x7FFFFFF);
        }
        BOOL v40 = *(unsigned __int8 **)(v24 + 32);
        unsigned int v56 = &v54;
        unsigned int v57 = 0;
        uint64_t result = sub_1CBF528D8((uint64_t)&v56, v40);
        if (!result) {
          return result;
        }
        uint64_t v41 = *((unsigned int *)v54 + 2);
        uint64_t v42 = v54;
        if (v41 < 0x41) {
          goto LABEL_66;
        }
        int v43 = 0;
        int64_t v44 = (unint64_t)(v41 + 63) >> 6;
        do
        {
          BOOL v18 = v44-- < 1;
          if (v18) {
            break;
          }
          unint64_t v45 = *(void *)(*(void *)v54 + 8 * v44);
          v43 += __clz(v45);
        }
        while (!v45);
        int v46 = v41 | 0xFFFFFFC0;
        if ((v41 & 0x3F) == 0) {
          int v46 = 0;
        }
        if ((v41 - v43 - v46) > 0x40) {
          goto LABEL_71;
        }
        uint64_t v42 = *(llvm::APInt **)v54;
LABEL_66:
        if (!*(void *)v42) {
          return 0;
        }
        if (!v41) {
          goto LABEL_72;
        }
        if (v41 > 0x40)
        {
LABEL_71:
          if (llvm::APInt::countTrailingOnesSlowCase(v54) != v41) {
            return 1;
          }
        }
        else if (*(void *)v54 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v41)
        {
          return 1;
        }
LABEL_72:
        int v47 = *(_DWORD *)(a1 + 20);
        if ((v47 & 0x40000000) != 0) {
          uint64_t v48 = *(unsigned __int8 ***)(a1 - 8);
        }
        else {
          uint64_t v48 = (unsigned __int8 **)(a1 - 32 * (v47 & 0x7FFFFFF));
        }
        unsigned __int8 v49 = *v48;
        unsigned int v56 = &v55;
        unsigned int v57 = 0;
        uint64_t result = sub_1CBF528D8((uint64_t)&v56, v49);
        if (!result) {
          return result;
        }
        unsigned int v50 = *((_DWORD *)v55 + 2);
        if (v50 > 0x40)
        {
          if (((*(void *)(*(void *)v55 + 8 * ((v50 - 1) >> 6)) >> (v50 - 1)) & 1) == 0)
          {
            int v52 = 0;
            return v52 ^ 1u;
          }
          BOOL v51 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v55) == v50 - 1;
        }
        else
        {
          BOOL v51 = *(void *)v55 == 1 << (v50 - 1);
        }
        int v52 = v51;
        return v52 ^ 1u;
      case 0x20u:
        unint64_t v27 = *(unsigned __int16 *)(a1 + 18);
        if ((v27 & 0x301) != 0) {
          return 0;
        }
        uint64_t v28 = *(void *)(*(void *)(a1 + 40) + 56);
        uint64_t v29 = *(void *)(v28 + 112);
        if (v29)
        {
          if ((*(unsigned char *)(v29 + 18) & 0x4C) != 0) {
            return 0;
          }
        }
        uint64_t v30 = *(void *)(v28 + 40) + 272;
        uint64_t v31 = *(void *)(a1 - 32);
        uint64_t v32 = *(void *)a1;
        return llvm::isDereferenceableAndAlignedPointer(v31, v32, (v27 >> 1) & 0x3F, v30, a2, a3, a4);
      case 0x38u:
        uint64_t v25 = *(void *)(a1 - 32);
        if (!v25) {
          return 0;
        }
        if (*(unsigned char *)(v25 + 16)) {
          return 0;
        }
        if (*(void *)(v25 + 24) != *(void *)(a1 + 72)) {
          return 0;
        }
        uint64_t v26 = *(void *)(v25 + 112);
        if (!v26) {
          return 0;
        }
        return *(unsigned char *)(v26 + 19) & 1;
      default:
        return result;
    }
  }
  return result;
}

uint64_t llvm::mayHaveNonDefUseDependency(llvm *this, const llvm::Instruction *a2)
{
  int v3 = *((unsigned __int8 *)this + 16);
  uint64_t v4 = (v3 - 33);
  if (v4 > 0x37) {
    goto LABEL_5;
  }
  if (((1 << (v3 - 33)) & 0x8000000000041) != 0)
  {
    uint64_t v10 = *((void *)this + 8);
    if (!v10 || (*(unsigned char *)(v10 + 20) & 4) == 0 && (*(unsigned char *)(v10 + 17) & 0x10) == 0)
    {
      __int32 v27 = 7;
      if (sub_1CC5CB59C((uint64_t)this, &v27, 1uLL))
      {
        uint64_t v17 = *((void *)this - 4);
        if (!v17
          || *(unsigned char *)(v17 + 16)
          || *(void *)(v17 + 24) != *((void *)this + 9)
          || *(_DWORD *)(v17 + 36) != 7)
        {
          return 1;
        }
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 66) & 1) == 0
        && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44))
      {
        return 1;
      }
    }
LABEL_23:
    int v3 = *((unsigned __int8 *)this + 16);
    goto LABEL_5;
  }
  if (((1 << (v3 - 33)) & 0x808001C8000010) != 0) {
    return 1;
  }
  if (v4 == 28)
  {
    if ((*((_WORD *)this + 9) & 0x301) != 0) {
      return 1;
    }
    goto LABEL_23;
  }
LABEL_5:
  uint64_t v5 = (v3 - 33);
  if (v5 > 0x37) {
    goto LABEL_9;
  }
  if (((1 << v5) & 0x8000000000041) != 0)
  {
    uint64_t v11 = *((void *)this + 8);
    if (!v11 || (*(unsigned char *)(v11 + 17) & 0x30) == 0)
    {
      int v12 = *((_DWORD *)this + 5);
      if (v12 < 0)
      {
        BOOL v18 = (char *)this - 32 * (v12 & 0x7FFFFFF);
        uint64_t v21 = *((void *)v18 - 1);
        BOOL v19 = v18 - 8;
        uint64_t v20 = v21;
        if (v21)
        {
          uint64_t v22 = -v20;
          do
          {
            unsigned int v23 = *(_DWORD *)(*(void *)&v19[v22] + 8);
            BOOL v24 = v23 > 7;
            int v25 = (1 << v23) & 0x83;
            if (v24 || v25 == 0) {
              return 1;
            }
            v22 += 16;
          }
          while (v22);
        }
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 45) & 1) == 0
        && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44))
      {
        return 1;
      }
    }
  }
  else
  {
    if (v5 != 27)
    {
      if (((1 << v5) & 0x808001D0000010) == 0) {
        goto LABEL_9;
      }
      return 1;
    }
    if ((*((_WORD *)this + 9) & 0x301) != 0) {
      return 1;
    }
  }
LABEL_9:
  if (!llvm::isSafeToSpeculativelyExecute((uint64_t)this, 0, 0, 0)) {
    return 1;
  }
  int v7 = *((unsigned __int8 *)this + 16);
  if (v7 == 84)
  {
    uint64_t v13 = *((void *)this + 8);
    if (v13 && (*(unsigned char *)(v13 + 16) & 0x20) != 0
      || (int hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 37)) != 0)
    {
LABEL_15:
      int hasFnAttrOnCalledFunction = llvm::Instruction::willReturn(this);
    }
  }
  else
  {
    int hasFnAttrOnCalledFunction = 0;
    switch(*((unsigned char *)this + 16))
    {
      case 0x1D:
      case 0x22:
      case 0x23:
        return hasFnAttrOnCalledFunction ^ 1u;
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x25:
        goto LABEL_15;
      case 0x24:
      case 0x26:
        if (*((_WORD *)this + 9)) {
          goto LABEL_15;
        }
        int hasFnAttrOnCalledFunction = 0;
        break;
      default:
        if (v7 != 80) {
          goto LABEL_15;
        }
        uint64_t v14 = *(void *)(*((void *)this + 5) + 56);
        int v15 = *(_DWORD *)(v14 + 20);
        if ((v15 & 0x40000000) != 0) {
          uint64_t v16 = *(llvm::Value ***)(v14 - 8);
        }
        else {
          uint64_t v16 = (llvm::Value **)(v14 - 32 * (v15 & 0x7FFFFFF));
        }
        int hasFnAttrOnCalledFunction = llvm::classifyEHPersonality(*v16, v6) == 10;
        break;
    }
  }
  return hasFnAttrOnCalledFunction ^ 1u;
}

uint64_t llvm::isGuaranteedToTransferExecutionToSuccessor(llvm *this, const llvm::Instruction *a2)
{
  int v3 = *((unsigned __int8 *)this + 16);
  if (v3 == 84)
  {
    uint64_t v5 = *((void *)this + 8);
    if (v5 && (*(unsigned char *)(v5 + 16) & 0x20) != 0
      || (uint64_t result = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 37), result))
    {
LABEL_4:
      return llvm::Instruction::willReturn(this);
    }
  }
  else
  {
    uint64_t result = 0;
    switch(v3)
    {
      case 29:
      case 34:
      case 35:
        return result;
      case 30:
      case 31:
      case 32:
      case 33:
      case 37:
        goto LABEL_4;
      case 36:
      case 38:
        if (*((_WORD *)this + 9)) {
          goto LABEL_4;
        }
        uint64_t result = 0;
        break;
      default:
        if (v3 != 80) {
          goto LABEL_4;
        }
        uint64_t v6 = *(void *)(*((void *)this + 5) + 56);
        int v7 = *(_DWORD *)(v6 + 20);
        if ((v7 & 0x40000000) != 0) {
          BOOL v8 = *(llvm::Value ***)(v6 - 8);
        }
        else {
          BOOL v8 = (llvm::Value **)(v6 - 32 * (v7 & 0x7FFFFFF));
        }
        uint64_t result = llvm::classifyEHPersonality(*v8, a2) == 10;
        break;
    }
  }
  return result;
}

uint64_t llvm::computeOverflowForUnsignedMul(llvm *this, const llvm::Value *a2, const llvm::Value *a3, const llvm::DataLayout *a4, llvm::AssumptionCache *a5, const llvm::Instruction *a6, const llvm::DominatorTree *a7)
{
  char v7 = (char)a7;
  int v9 = a5;
  if (!a5 || (uint64_t v13 = a5, !*((void *)a5 + 5)))
  {
    if (!this || *((unsigned __int8 *)this + 16) < 0x1Cu || (uint64_t v13 = this, !*((void *)this + 5))) {
      uint64_t v13 = 0;
    }
  }
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = v13;
  uint64_t v31 = a6;
  uint64_t v32 = 0;
  char v33 = (char)a7;
  sub_1CC16089C((uint64_t *)this, 0, (const llvm::DataLayout **)&v28, (uint64_t)&v24);
  if (!v9 || !*((void *)v9 + 5))
  {
    if (!a2 || *((unsigned __int8 *)a2 + 16) < 0x1Cu || (int v9 = a2, !*((void *)a2 + 5))) {
      int v9 = 0;
    }
  }
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = v9;
  uint64_t v31 = a6;
  uint64_t v32 = 0;
  char v33 = v7;
  sub_1CC16089C((uint64_t *)a2, 0, (const llvm::DataLayout **)&v28, (uint64_t)&v20);
  llvm::ConstantRange::fromKnownBits(&v24, 0, (uint64_t)&v28);
  llvm::ConstantRange::fromKnownBits(&v20, 0, (uint64_t)&v16);
  uint64_t MayOverflow = llvm::ConstantRange::unsignedMulMayOverflow(&v28, &v16);
  if (v19 >= 0x41 && v18) {
    MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
  }
  if (v17 >= 0x41 && v16) {
    MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
  }
  if (v31 >= 0x41 && v30) {
    MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
  }
  if (v29 >= 0x41 && v28) {
    MEMORY[0x1D25D9CB0](v28, 0x1000C8000313F17);
  }
  if (v23 >= 0x41 && v22) {
    MEMORY[0x1D25D9CB0](v22, 0x1000C8000313F17);
  }
  if (v21 >= 0x41 && v20) {
    MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
  }
  if (v27 >= 0x41 && v26) {
    MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
  }
  if (v25 >= 0x41 && v24) {
    MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
  }
  return MayOverflow;
}

uint64_t llvm::computeOverflowForSignedMul(llvm *this, const llvm::Value *a2, const llvm::Value *a3, const llvm::DataLayout *a4, llvm::AssumptionCache *a5, const llvm::Instruction *a6, const llvm::DominatorTree *a7)
{
  char v7 = (char)a7;
  uint64_t v14 = *(void *)this;
  if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12) {
    uint64_t v14 = **(void **)(v14 + 16);
  }
  int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v14);
  if (!a5 || (uint64_t v16 = a5, !*((void *)a5 + 5)))
  {
    if (*((unsigned __int8 *)this + 16) < 0x1Cu || (uint64_t v16 = this, !*((void *)this + 5))) {
      uint64_t v16 = 0;
    }
  }
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  int v36 = v16;
  int64_t v37 = a6;
  uint64_t v38 = 0;
  char v39 = 1;
  int v17 = sub_1CC162D6C(this, 0, (uint64_t)&v34);
  if (!a5 || (uint64_t v18 = a5, !*((void *)a5 + 5)))
  {
    if (!a2 || *((unsigned __int8 *)a2 + 16) < 0x1Cu || (uint64_t v18 = a2, !*((void *)a2 + 5))) {
      uint64_t v18 = 0;
    }
  }
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  int v36 = v18;
  int64_t v37 = a6;
  uint64_t v38 = 0;
  char v39 = 1;
  unsigned int v19 = sub_1CC162D6C(a2, 0, (uint64_t)&v34) + v17;
  if (v19 <= PrimitiveSizeInBits + 1)
  {
    if (v19 != PrimitiveSizeInBits + 1) {
      return 2;
    }
    if (!a5 || (unsigned int v21 = a5, !*((void *)a5 + 5)))
    {
      if (*((unsigned __int8 *)this + 16) < 0x1Cu || (unsigned int v21 = this, !*((void *)this + 5))) {
        unsigned int v21 = 0;
      }
    }
    uint64_t v34 = a3;
    uint64_t v35 = a4;
    int v36 = v21;
    int64_t v37 = a6;
    uint64_t v38 = 0;
    char v39 = v7;
    sub_1CC16089C((uint64_t *)this, 0, &v34, (uint64_t)&v30);
    if (!a5 || !*((void *)a5 + 5))
    {
      if (!a2 || *((unsigned __int8 *)a2 + 16) < 0x1Cu || (a5 = a2, !*((void *)a2 + 5))) {
        a5 = 0;
      }
    }
    uint64_t v34 = a3;
    uint64_t v35 = a4;
    int v36 = a5;
    int64_t v37 = a6;
    uint64_t v38 = 0;
    char v39 = v7;
    sub_1CC16089C((uint64_t *)a2, 0, &v34, (uint64_t)&v26);
    unsigned int v22 = v31 - 1;
    unsigned int v23 = &v30;
    if (v31 >= 0x41) {
      unsigned int v23 = (uint64_t *)(v30 + 8 * (v22 >> 6));
    }
    if ((((unint64_t)*v23 >> v22) & 1) == 0)
    {
      unsigned int v24 = v27;
      unsigned int v25 = (uint64_t *)(v26 + 8 * ((v27 - 1) >> 6));
      if (v27 < 0x41) {
        unsigned int v25 = &v26;
      }
      if ((((unint64_t)*v25 >> (v27 - 1)) & 1) == 0)
      {
        if (v29 >= 0x41 && v28)
        {
          MEMORY[0x1D25D9CB0](v28, 0x1000C8000313F17);
          unsigned int v24 = v27;
        }
        if (v24 >= 0x41 && v26) {
          MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
        }
        if (v33 >= 0x41 && v32) {
          MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
        }
        if (v31 >= 0x41 && v30) {
          MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
        }
        return 2;
      }
    }
    if (v29 >= 0x41 && v28) {
      MEMORY[0x1D25D9CB0](v28, 0x1000C8000313F17);
    }
    if (v27 >= 0x41 && v26) {
      MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
    }
    if (v33 >= 0x41 && v32) {
      MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
    }
    if (v31 >= 0x41)
    {
      if (v30) {
        MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
      }
    }
  }
  return 3;
}

uint64_t llvm::computeOverflowForUnsignedAdd(llvm *this, const llvm::Value *a2, const llvm::Value *a3, const llvm::DataLayout *a4, llvm::AssumptionCache *a5, const llvm::Instruction *a6, const llvm::DominatorTree *a7)
{
  sub_1CC1692B8((uint64_t)this, 0, a3, (uint64_t)a4, a5, (uint64_t)a6, a7, (uint64_t)&v19);
  sub_1CC1692B8((uint64_t)a2, 0, a3, (uint64_t)a4, a5, (uint64_t)a6, a7, (uint64_t)&v15);
  uint64_t MayOverflow = llvm::ConstantRange::unsignedAddMayOverflow(&v19, &v15);
  if (v18 >= 0x41 && v17) {
    MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
  }
  if (v16 >= 0x41 && v15) {
    MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
  }
  if (v22 >= 0x41 && v21) {
    MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
  }
  if (v20 >= 0x41 && v19) {
    MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
  }
  return MayOverflow;
}

const llvm::DataLayout *sub_1CC1692B8@<X0>(uint64_t a1@<X0>, int a2@<W1>, const llvm::DataLayout *a3@<X2>, uint64_t a4@<X3>, const llvm::DataLayout *a5@<X4>, uint64_t a6@<X5>, const llvm::Value *a7@<X6>, uint64_t a8@<X8>)
{
  if (!a5 || !*((void *)a5 + 5))
  {
    if (!a1 || *(unsigned __int8 *)(a1 + 16) < 0x1Cu || (a5 = (const llvm::DataLayout *)a1, !*(void *)(a1 + 40))) {
      a5 = 0;
    }
  }
  unsigned int v22 = a3;
  uint64_t v23 = a4;
  unsigned int v24 = a5;
  uint64_t v25 = a6;
  uint64_t v26 = 0;
  char v27 = (char)a7;
  sub_1CC16089C((uint64_t *)a1, 0, &v22, (uint64_t)&v18);
  llvm::ConstantRange::fromKnownBits(&v18, a2, (uint64_t)&v22);
  llvm::computeConstantRange((llvm *)a1, a7, 0, 0, 0, 1, 0, &v14);
  if (a2) {
    uint64_t v12 = 2;
  }
  else {
    uint64_t v12 = 1;
  }
  uint64_t result = (const llvm::DataLayout *)llvm::ConstantRange::intersectWith((uint64_t)&v22, (llvm::ConstantRange *)&v14, v12, a8);
  if (v17 >= 0x41)
  {
    uint64_t result = v16;
    if (v16) {
      uint64_t result = (const llvm::DataLayout *)MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
    }
  }
  if (v15 >= 0x41)
  {
    uint64_t result = v14;
    if (v14) {
      uint64_t result = (const llvm::DataLayout *)MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
    }
  }
  if (v25 >= 0x41)
  {
    uint64_t result = v24;
    if (v24) {
      uint64_t result = (const llvm::DataLayout *)MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
    }
  }
  if (v23 >= 0x41)
  {
    uint64_t result = v22;
    if (v22) {
      uint64_t result = (const llvm::DataLayout *)MEMORY[0x1D25D9CB0](v22, 0x1000C8000313F17);
    }
  }
  if (v21 >= 0x41)
  {
    uint64_t result = v20;
    if (v20) {
      uint64_t result = (const llvm::DataLayout *)MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
    }
  }
  if (v19 >= 0x41)
  {
    uint64_t result = v18;
    if (v18) {
      return (const llvm::DataLayout *)MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t llvm::computeOverflowForUnsignedSub(llvm *this, const llvm::Value *a2, const llvm::Value *a3, const llvm::DataLayout *a4, llvm::AssumptionCache *a5, const llvm::Instruction *a6, const llvm::DominatorTree *a7)
{
  uint64_t v12 = this;
  *(_DWORD *)uint64_t v23 = 312;
  *(void *)&v23[4] = 0;
  if (a5)
  {
    if (*((unsigned char *)a5 + 16) == 84)
    {
      uint64_t v15 = *((void *)a5 - 4);
      if (v15)
      {
        if (!*(unsigned char *)(v15 + 16)
          && *(void *)(v15 + 24) == *((void *)a5 + 9)
          && *(_DWORD *)(v15 + 36) == *(_DWORD *)v23)
        {
          unsigned __int16 isImpliedByDomCondition = llvm::isImpliedByDomCondition(35, (uint64_t)this, (uint64_t)a2, (uint64_t)a5, a3);
          uint64_t v12 = this;
          uint64_t v17 = (_BYTE)isImpliedByDomCondition ? 3 : 0;
          if (isImpliedByDomCondition > 0xFFu) {
            return v17;
          }
        }
      }
    }
  }
  sub_1CC1692B8((uint64_t)v12, 0, a3, (uint64_t)a4, a5, (uint64_t)a6, (const llvm::Value *)1, (uint64_t)v23);
  sub_1CC1692B8((uint64_t)a2, 0, a3, (uint64_t)a4, a5, (uint64_t)a6, (const llvm::Value *)1, (uint64_t)&v19);
  uint64_t MayOverflow = llvm::ConstantRange::unsignedSubMayOverflow((const void **)v23, (const llvm::ConstantRange *)&v19);
  if (v22 >= 0x41 && v21) {
    MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
  }
  if (v20 >= 0x41 && v19) {
    MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
  }
  if (v25 >= 0x41 && v24) {
    MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
  }
  if (*(_DWORD *)&v23[8] >= 0x41u && *(void *)v23) {
    MEMORY[0x1D25D9CB0](*(void *)v23, 0x1000C8000313F17);
  }
  return MayOverflow;
}

uint64_t llvm::isImpliedByDomCondition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const llvm::DataLayout *a5)
{
  int v9 = (uint64_t *)sub_1CC16FA94(a4);
  if (v9)
  {
    LOWORD(v9) = llvm::isImpliedCondition(v9, a1, a2, a3, a5, v10 & 1, 0);
    int v11 = BYTE1(v9);
  }
  else
  {
    int v11 = 0;
  }
  return v9 | (v11 << 8);
}

uint64_t llvm::computeOverflowForSignedSub(llvm *this, const llvm::Value *a2, const llvm::Value *a3, const llvm::DataLayout *a4, llvm::AssumptionCache *a5, const llvm::Instruction *a6, const llvm::DominatorTree *a7)
{
  if (!a5 || (uint64_t v13 = a5, !*((void *)a5 + 5)))
  {
    if (!this || *((unsigned __int8 *)this + 16) < 0x1Cu || (uint64_t v13 = this, !*((void *)this + 5))) {
      uint64_t v13 = 0;
    }
  }
  uint64_t v21 = a3;
  unsigned int v22 = a4;
  uint64_t v23 = v13;
  uint64_t v24 = a6;
  uint64_t v25 = 0;
  char v26 = 1;
  if (sub_1CC162D6C(this, 0, (uint64_t)&v21) < 2) {
    goto LABEL_4;
  }
  if (!a5 || (unsigned int v16 = a5, !*((void *)a5 + 5)))
  {
    if (!a2 || *((unsigned __int8 *)a2 + 16) < 0x1Cu || (unsigned int v16 = a2, !*((void *)a2 + 5))) {
      unsigned int v16 = 0;
    }
  }
  uint64_t v21 = a3;
  unsigned int v22 = a4;
  uint64_t v23 = v16;
  uint64_t v24 = a6;
  uint64_t v25 = 0;
  char v26 = 1;
  if (sub_1CC162D6C(a2, 0, (uint64_t)&v21) > 1) {
    return 3;
  }
LABEL_4:
  sub_1CC1692B8((uint64_t)this, 1, a3, (uint64_t)a4, a5, (uint64_t)a6, (const llvm::Value *)1, (uint64_t)&v21);
  sub_1CC1692B8((uint64_t)a2, 1, a3, (uint64_t)a4, a5, (uint64_t)a6, (const llvm::Value *)1, (uint64_t)&v17);
  uint64_t MayOverflow = llvm::ConstantRange::signedSubMayOverflow(&v21, (const llvm::ConstantRange *)&v17);
  if (v20 >= 0x41 && v19) {
    MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
  }
  if (v18 >= 0x41 && v17) {
    MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
  }
  if (v24 >= 0x41 && v23) {
    MEMORY[0x1D25D9CB0](v23, 0x1000C8000313F17);
  }
  if (v22 >= 0x41 && v21) {
    MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
  }
  return MayOverflow;
}

uint64_t llvm::isOverflowIntrinsicNoWrap(uint64_t a1, llvm::DominatorTree *a2)
{
  v19[2] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = v19;
  uint64_t v18 = 0x200000000;
  uint64_t v14 = v16;
  uint64_t v15 = 0x200000000;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    while (1)
    {
      uint64_t v4 = 0;
      uint64_t v5 = *(void *)(v2 + 24);
      if (!v5 || *(unsigned char *)(v5 + 16) != 92) {
        break;
      }
      if (**(_DWORD **)(v5 + 64))
      {
        for (uint64_t i = *(void *)(v5 + 8); i; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v7 = *(void *)(i + 24);
          if (v7) {
            BOOL v8 = *(unsigned char *)(v7 + 16) == 30;
          }
          else {
            BOOL v8 = 0;
          }
          if (v8)
          {
            if (v18 >= (unint64_t)HIDWORD(v18)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v17 + v18) = v7;
            LODWORD(v18) = v18 + 1;
          }
        }
      }
      else
      {
        if (v15 >= (unint64_t)HIDWORD(v15)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v14 + v15) = v5;
        LODWORD(v15) = v15 + 1;
      }
      uint64_t v2 = *(void *)(v2 + 8);
      if (!v2)
      {
        if (!v18) {
          goto LABEL_27;
        }
        int v9 = (char *)v17;
        char v10 = (char *)v17 + 8 * v18;
        while (1)
        {
          uint64_t v11 = *(void *)(*(void *)v9 - 64);
          v13[0] = *(void *)(*(void *)v9 + 40);
          v13[1] = v11;
          if (llvm::BasicBlockEdge::isSingleEdge((llvm::BasicBlockEdge *)v13)) {
            break;
          }
          v9 += 8;
          if (v9 == v10) {
            goto LABEL_27;
          }
        }
        if (v15) {
          llvm::DominatorTree::dominates(a2, (const llvm::BasicBlockEdge *)v13, *(const llvm::BasicBlock **)(*(void *)v14 + 40));
        }
        uint64_t v4 = 1;
        break;
      }
    }
  }
  else
  {
LABEL_27:
    uint64_t v4 = 0;
  }
  if (v14 != v16) {
    free(v14);
  }
  if (v17 != v19) {
    free(v17);
  }
  return v4;
}

uint64_t llvm::canCreateUndefOrPoison(llvm *this, const llvm::Operator *a2)
{
  return sub_1CC169B54((uint64_t)this, 0, (int)a2);
}

uint64_t sub_1CC169B54(uint64_t a1, char a2, int a3)
{
  v62[3] = *MEMORY[0x1E4F143B8];
  if (!a3) {
    goto LABEL_10;
  }
  if (a1 && (unsigned int v6 = *(unsigned __int8 *)(a1 + 16), v6 > 0x1B)) {
    unsigned int v7 = v6 - 28;
  }
  else {
    unsigned int v7 = *(unsigned __int16 *)(a1 + 18);
  }
  if (v7 > 0x22)
  {
LABEL_9:
    if (!sub_1CB845E74(a1) || (*(unsigned char *)(a1 + 17) & 0xC) == 0) {
      goto LABEL_10;
    }
LABEL_123:
    char v13 = 1;
    return v13 & 1;
  }
  if (((1 << v7) & 0x202A000) != 0)
  {
    if ((*(unsigned char *)(a1 + 17) & 6) != 0) {
      goto LABEL_123;
    }
  }
  else if (((1 << v7) & 0xC180000) != 0)
  {
    if ((*(unsigned char *)(a1 + 17) & 2) != 0) {
      goto LABEL_123;
    }
  }
  else
  {
    if (v7 != 34) {
      goto LABEL_9;
    }
    if (*(unsigned __int8 *)(a1 + 17) > 1u) {
      goto LABEL_123;
    }
  }
LABEL_10:
  unsigned int v8 = *(unsigned __int8 *)(a1 + 16);
  if (a1) {
    BOOL v9 = v8 >= 0x1C;
  }
  else {
    BOOL v9 = 0;
  }
  int v10 = !v9;
  unsigned int v11 = v8 - 28;
  int v12 = v8 - 28;
  if (v10 == 1) {
    int v12 = *(unsigned __int16 *)(a1 + 18);
  }
  if (v12 <= 33)
  {
    if (v12 <= 21)
    {
      if (v12 == 5 || v12 == 11)
      {
LABEL_66:
        char v13 = sub_1CBF5BCC4(a1, 36) ^ 1;
        return v13 & 1;
      }
      if (v12 != 12)
      {
LABEL_32:
        if (v8 == 5) {
          uint64_t v17 = a1;
        }
        else {
          uint64_t v17 = 0;
        }
        if ((v8 < 0x1C || v8 - 66 >= 0xD) && (!v17 || *(unsigned __int16 *)(v17 + 18) - 38 >= 0xD))
        {
          char v13 = (v12 - 31) < 0xFFFFFFEE;
          return v13 & 1;
        }
      }
    }
    else
    {
      if ((v12 - 25) < 3)
      {
        int v14 = *(_DWORD *)(a1 + 20);
        if ((v14 & 0x40000000) != 0) {
          uint64_t v15 = *(void *)(a1 - 8);
        }
        else {
          uint64_t v15 = a1 - 32 * (v14 & 0x7FFFFFF);
        }
        unsigned int v20 = *(unsigned __int8 **)(v15 + 32);
        if (v20) {
          BOOL v21 = v20[16] > 0x14u;
        }
        else {
          BOOL v21 = 1;
        }
        char v22 = v21;
        if (!v21)
        {
          unsigned int v60 = 0;
          int v23 = *(unsigned __int8 *)(*(void *)v20 + 8);
          if (*(void *)v20) {
            BOOL v24 = v23 == 18;
          }
          else {
            BOOL v24 = 0;
          }
          if (v24)
          {
            int v45 = *(_DWORD *)(*(void *)v20 + 32);
            if (v45)
            {
              int v46 = 0;
              do
              {
                AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)v20, v46);
                if (v60 >= 4uLL) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                v62[v60 - 1] = AggregateElement;
                unsigned int v48 = ++v60;
                int v46 = (llvm::Type *)(v46 + 1);
              }
              while (v45 != v46);
              if (v48)
              {
                uint64_t v25 = &v62[v48 - 1];
LABEL_107:
                unsigned __int8 v49 = &v61;
                while (1)
                {
                  uint64_t v50 = *v49;
                  if (!*v49 || *(unsigned char *)(v50 + 16) != 16) {
                    break;
                  }
                  BOOL v51 = (unint64_t *)(v50 + 24);
                  unint64_t v52 = *(unsigned int *)(*(void *)v50 + 8);
                  uint64_t v53 = *(unsigned int *)(v50 + 32);
                  if (v53 >= 0x41)
                  {
                    int v54 = 0;
                    int64_t v55 = (unint64_t)(v53 + 63) >> 6;
                    do
                    {
                      BOOL v21 = v55-- < 1;
                      if (v21) {
                        break;
                      }
                      unint64_t v56 = *(void *)(*v51 + 8 * v55);
                      v54 += __clz(v56);
                    }
                    while (!v56);
                    int v57 = v53 | 0xFFFFFFC0;
                    if ((v53 & 0x3F) == 0) {
                      int v57 = 0;
                    }
                    if ((v53 - v54 - v57) > 0x40) {
                      break;
                    }
                    BOOL v51 = (unint64_t *)*v51;
                  }
                  if (*v51 >= v52 >> 8) {
                    break;
                  }
                  if (++v49 == v25) {
                    goto LABEL_120;
                  }
                }
                char v3 = 1;
                goto LABEL_125;
              }
LABEL_120:
              char v3 = 0;
            }
            else
            {
              char v3 = 0;
            }
          }
          else
          {
            char v3 = 1;
            if (v23 != 19)
            {
              uint64_t v61 = *(void *)(v15 + 32);
              uint64_t v25 = v62;
              goto LABEL_107;
            }
          }
        }
LABEL_125:
        char v13 = v22 | v3;
        return v13 & 1;
      }
      if ((v12 - 22) >= 2) {
        goto LABEL_32;
      }
    }
LABEL_20:
    char v13 = 0;
    return v13 & 1;
  }
  char v13 = 1;
  switch(v12)
  {
    case '""':
    case '5':
    case '6':
    case '7':
    case '9':
    case '@':
    case 'A':
    case 'C':
      goto LABEL_20;
    case ')':
    case '*':
      return v13 & 1;
    case '8':
      if (v8 != 84) {
        goto LABEL_66;
      }
      uint64_t v26 = *(void *)(a1 - 32);
      if (!v26
        || *(unsigned char *)(v26 + 16)
        || *(void *)(v26 + 24) != *(void *)(a1 + 72)
        || (*(unsigned char *)(v26 + 33) & 0x20) == 0)
      {
        goto LABEL_66;
      }
      char v13 = 0;
      int v59 = *(_DWORD *)(v26 + 36);
      if (((v59 - 263) > 0x31 || ((1 << (v59 - 7)) & 0x2404000208001) == 0)
        && v59 != 53)
      {
        goto LABEL_66;
      }
      return v13 & 1;
    case '=':
    case '>':
      int v18 = *(_DWORD *)(a1 + 20);
      if ((v18 & 0x40000000) != 0)
      {
        uint64_t v19 = *(void *)(a1 - 8);
        if (!v10) {
          goto LABEL_78;
        }
      }
      else
      {
        uint64_t v19 = a1 - 32 * (v18 & 0x7FFFFFF);
        if (!v10) {
          goto LABEL_78;
        }
      }
      unsigned int v11 = *(unsigned __int16 *)(a1 + 18);
LABEL_78:
      uint64_t v34 = 1;
      if (v11 == 62) {
        uint64_t v34 = 2;
      }
      if ((v18 & 0x40000000) != 0) {
        uint64_t v35 = *(void *)(a1 - 8);
      }
      else {
        uint64_t v35 = a1 - 32 * (v18 & 0x7FFFFFF);
      }
      uint64_t v36 = *(void *)(v35 + 32 * v34);
      if (v36) {
        BOOL v37 = *(unsigned char *)(v36 + 16) == 16;
      }
      else {
        BOOL v37 = 0;
      }
      if (!v37) {
        goto LABEL_123;
      }
      uint64_t v38 = (unint64_t *)(v36 + 24);
      unint64_t v39 = *(unsigned int *)(**(void **)v19 + 32);
      uint64_t v40 = *(unsigned int *)(v36 + 32);
      if (v40 < 0x41) {
        goto LABEL_96;
      }
      int v41 = 0;
      int64_t v42 = (unint64_t)(v40 + 63) >> 6;
      do
      {
        BOOL v21 = v42-- < 1;
        if (v21) {
          break;
        }
        unint64_t v43 = *(void *)(*v38 + 8 * v42);
        v41 += __clz(v43);
      }
      while (!v43);
      int v44 = v40 | 0xFFFFFFC0;
      if ((v40 & 0x3F) == 0) {
        int v44 = 0;
      }
      if ((v40 - v41 - v44) > 0x40) {
        goto LABEL_123;
      }
      uint64_t v38 = (unint64_t *)*v38;
LABEL_96:
      char v13 = *v38 >= v39;
      break;
    case '?':
      if (a2) {
        goto LABEL_20;
      }
      BOOL v27 = v8 == 5;
      uint64_t v28 = 72;
      if (v8 == 5) {
        uint64_t v28 = 32;
      }
      uint64_t v29 = 64;
      if (v27) {
        uint64_t v29 = 24;
      }
      uint64_t v30 = *(__int32 **)(a1 + v29);
      size_t v31 = *(unsigned int *)(a1 + v28);
      uint64_t v32 = wmemchr(v30, -1, v31);
      if (v32) {
        unsigned int v33 = v32;
      }
      else {
        unsigned int v33 = &v30[v31];
      }
      char v13 = v31 != v33 - v30;
      return v13 & 1;
    default:
      goto LABEL_32;
  }
  return v13 & 1;
}

uint64_t llvm::canCreatePoison(llvm *this, const llvm::Operator *a2)
{
  return sub_1CC169B54((uint64_t)this, 1, (int)a2);
}

uint64_t llvm::impliesPoison(llvm *this, const llvm::Value *a2, const llvm::Value *a3)
{
  return sub_1CC16A138((uint64_t)this, (uint64_t)a2, 0);
}

uint64_t sub_1CC16A138(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((sub_1CC16A22C((uint64_t ***)a1, 0, 0, 0, 0, 0) & 1) != 0 || sub_1CC1848BC(a1, a2, 0)) {
    return 1;
  }
  if (a3 > 1) {
    return 0;
  }
  uint64_t result = 0;
  if (a1 && *(unsigned __int8 *)(a1 + 16) >= 0x1Cu)
  {
    if (sub_1CC169B54(a1, 1, 1)) {
      return 0;
    }
    int v7 = *(_DWORD *)(a1 + 20);
    if ((v7 & 0x40000000) != 0)
    {
      BOOL v9 = *(uint64_t **)(a1 - 8);
      uint64_t v8 = v7 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v8 = v7 & 0x7FFFFFF;
      BOOL v9 = (uint64_t *)(a1 - 32 * v8);
    }
    if (!v8) {
      return 1;
    }
    uint64_t v10 = a3 + 1;
    uint64_t v11 = 32 * v8 - 32;
    do
    {
      uint64_t v12 = *v9;
      v9 += 4;
      uint64_t result = sub_1CC16A138(v12, a2, v10);
      if (result) {
        BOOL v13 = v11 == 0;
      }
      else {
        BOOL v13 = 1;
      }
      v11 -= 32;
    }
    while (!v13);
  }
  return result;
}

uint64_t llvm::isGuaranteedNotToBeUndefOrPoison(uint64_t ***this, const llvm::Value *a2, llvm::AssumptionCache *a3, const llvm::Instruction *a4, const llvm::DominatorTree *a5)
{
  return sub_1CC16A22C(this, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, 0);
}

uint64_t sub_1CC16A22C(uint64_t ***a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  if (a5 > 5) {
    return 0;
  }
  v76[11] = v6;
  v76[12] = v7;
  unsigned int v10 = *((unsigned __int8 *)a1 + 16);
  if (v10 == 23) {
    return 0;
  }
  if (v10 == 21)
  {
    unsigned int v16 = a1[3][14];
    if (v16)
    {
      unsigned int v17 = *((_DWORD *)a1 + 8) + 2;
      if (v17 < *((_DWORD *)v16 + 2))
      {
        uint64_t v18 = v16[v17 + 5];
        if (v18)
        {
          if ((*(unsigned char *)(v18 + 16) & 0x10) != 0) {
            return 1;
          }
        }
      }
    }
    goto LABEL_11;
  }
  if (v10 <= 0x14)
  {
    if (v10 - 11 <= 1)
    {
      if (v10 == 12) {
        return 0;
      }
      else {
        return a6;
      }
    }
    if (v10 < 0x14 && ((0xB0009u >> v10) & 1) != 0) {
      return 1;
    }
    if (v10 != 5 && ((*a1)[1] & 0xFE) == 0x12)
    {
      if (a6)
      {
        if (llvm::Constant::containsPoisonElement((llvm::Constant *)a1)) {
          return 0;
        }
      }
      else if (llvm::Constant::containsUndefOrPoisonElement((llvm::Constant *)a1))
      {
        return 0;
      }
      return !llvm::Constant::containsConstantExpression((llvm::Constant *)a1);
    }
  }
LABEL_11:
  unint64_t v19 = *((unsigned __int8 *)llvm::Value::stripPointerCastsSameRepresentation((llvm::Value *)a1) + 16);
  if (v19 < 0x3C && ((0x800000000080009uLL >> v19) & 1) != 0) {
    return 1;
  }
  unsigned int v20 = *((unsigned __int8 *)a1 + 16);
  if (v20 <= 0x1B && v20 != 5) {
    goto LABEL_15;
  }
  if (v20 == 95) {
    return 1;
  }
  if (v20 >= 0x1C)
  {
    if (v20 - 33 <= 0x33 && ((1 << (v20 - 33)) & 0x8000000000041) != 0)
    {
      if (sub_1CBF5BCC4((uint64_t)a1, 36)) {
        return 1;
      }
      unsigned int v20 = *((unsigned __int8 *)a1 + 16);
    }
    if (v20 == 83)
    {
      int v29 = *((_DWORD *)a1 + 5);
      uint64_t v30 = v29 & 0x7FFFFFF;
      if ((v29 & 0x7FFFFFF) == 0) {
        return 1;
      }
      uint64_t v31 = 0;
      uint64_t v32 = a5 + 1;
      while (1)
      {
        int v33 = *((_DWORD *)a1 + 5);
        if ((v33 & 0x40000000) != 0) {
          uint64_t v34 = (uint64_t ***)*(a1 - 1);
        }
        else {
          uint64_t v34 = &a1[-4 * (v33 & 0x7FFFFFF)];
        }
        uint64_t v35 = (&v34[4 * *((unsigned int *)a1 + 15)])[v31];
        uint64_t v36 = (uint64_t **)v35[5];
        if (v36 == v35 + 5)
        {
          uint64_t v38 = 0;
          if ((v33 & 0x40000000) == 0) {
            goto LABEL_50;
          }
        }
        else
        {
          if (v36) {
            BOOL v37 = v36 - 3;
          }
          else {
            BOOL v37 = 0;
          }
          if (*((unsigned __int8 *)v37 + 16) - 29 >= 0xB) {
            uint64_t v38 = 0;
          }
          else {
            uint64_t v38 = v37;
          }
          if ((v33 & 0x40000000) == 0)
          {
LABEL_50:
            unint64_t v39 = &a1[-4 * (v33 & 0x7FFFFFF)];
            goto LABEL_53;
          }
        }
        unint64_t v39 = (uint64_t ***)*(a1 - 1);
LABEL_53:
        if ((sub_1CC16A22C(v39[4 * v31], a2, v38, a4, v32, a6) & 1) == 0) {
          goto LABEL_64;
        }
        ++v31;
        uint64_t result = 1;
        if (v31 == v30) {
          return result;
        }
      }
    }
  }
  if ((sub_1CC169B54((uint64_t)a1, 0, 1) & 1) == 0)
  {
    int v54 = *((_DWORD *)a1 + 5);
    if ((v54 & 0x40000000) != 0)
    {
      unint64_t v56 = (uint64_t ***)*(a1 - 1);
      uint64_t v55 = v54 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v55 = v54 & 0x7FFFFFF;
      unint64_t v56 = &a1[-4 * v55];
    }
    if (!v55) {
      return 1;
    }
    uint64_t v57 = a5 + 1;
    uint64_t v58 = 32 * v55;
    while ((sub_1CC16A22C(*v56, a2, a3, a4, v57, a6) & 1) != 0)
    {
      v56 += 4;
      uint64_t result = 1;
      v58 -= 32;
      if (!v58) {
        return result;
      }
    }
  }
LABEL_64:
  if (*((unsigned char *)a1 + 16) == 60 && (*((unsigned char *)a1 + 23) & 0x20) != 0)
  {
    uint64_t v40 = ***a1;
    v76[0] = (uint64_t)a1;
    int v41 = *(_DWORD *)(v40 + 2496);
    if (v41)
    {
      uint64_t v42 = *(void *)(v40 + 2480);
      int v43 = v41 - 1;
      unsigned int v44 = v43 & ((a1 >> 4) ^ (a1 >> 9));
      int v45 = (uint64_t ****)(v42 + 40 * v44);
      int v46 = *v45;
      if (*v45 == a1) {
        goto LABEL_76;
      }
      int v47 = 0;
      int v48 = 1;
      while (v46 != (uint64_t ***)-4096)
      {
        if (v47) {
          BOOL v49 = 0;
        }
        else {
          BOOL v49 = v46 == (uint64_t ***)-8192;
        }
        if (v49) {
          int v47 = v45;
        }
        unsigned int v50 = v44 + v48++;
        unsigned int v44 = v50 & v43;
        int v45 = (uint64_t ****)(v42 + 40 * v44);
        int v46 = *v45;
        if (*v45 == a1) {
          goto LABEL_76;
        }
      }
      if (v47) {
        unsigned int v73 = v47;
      }
      else {
        unsigned int v73 = v45;
      }
    }
    else
    {
      unsigned int v73 = 0;
    }
    int v45 = (uint64_t ****)sub_1CC609054(v40 + 2480, (uint64_t)v76, v76, v73);
    uint64_t v74 = v76[0];
    v45[3] = 0;
    v45[4] = 0;
    void *v45 = (uint64_t ***)v74;
    v45[1] = (uint64_t ***)(v45 + 3);
    v45[2] = (uint64_t ***)0x100000000;
LABEL_76:
    uint64_t v51 = *((unsigned int *)v45 + 4);
    if (v51)
    {
      unint64_t v52 = v45[1] + 1;
      uint64_t v53 = 16 * v51;
      while (*((_DWORD *)v52 - 2) != 29)
      {
        v52 += 2;
        v53 -= 16;
        if (!v53) {
          goto LABEL_15;
        }
      }
      if (*v52) {
        return 1;
      }
    }
  }
LABEL_15:
  if (sub_1CC16BAFC((uint64_t)a1, a6, 0)) {
    return 1;
  }
  if (!a3) {
    return 0;
  }
  uint64_t result = 0;
  if (!a4) {
    return result;
  }
  uint64_t v21 = *(void *)(a3 + 40);
  if (!v21) {
    return result;
  }
  uint64_t v22 = *(void *)(a4 + 24);
  uint64_t v23 = *(unsigned int *)(a4 + 40);
  if (!v23) {
    goto LABEL_91;
  }
  LODWORD(v24) = (v23 - 1) & ((v21 >> 4) ^ (v21 >> 9));
  uint64_t v25 = (uint64_t *)(v22 + 16 * v24);
  uint64_t v26 = *v25;
  if (v21 != *v25)
  {
    int v27 = 1;
    while (v26 != -4096)
    {
      int v28 = v24 + v27++;
      uint64_t v24 = v28 & (v23 - 1);
      uint64_t v26 = *(void *)(v22 + 16 * v24);
      if (v21 == v26)
      {
        uint64_t v25 = (uint64_t *)(v22 + 16 * v24);
        goto LABEL_92;
      }
    }
LABEL_91:
    uint64_t v25 = (uint64_t *)(v22 + 16 * v23);
  }
LABEL_92:
  if (v25 == (uint64_t *)(v22 + 16 * v23)) {
    return 0;
  }
  uint64_t v59 = v25[1];
  if (!v59) {
    return 0;
  }
  unsigned int v60 = *(void **)(v59 + 8);
  if (!v60)
  {
LABEL_124:
    int v75 = 36;
    llvm::getKnowledgeValidInContext((uint64_t)a1, &v75, 1, a3, a4, a2, (uint64_t)v76);
    return LODWORD(v76[0]) != 0;
  }
  while (1)
  {
    uint64_t v61 = *(void *)(*v60 + 40);
    if (v61 == *v60 + 40) {
      goto LABEL_123;
    }
    uint64_t v62 = v61 ? v61 - 24 : 0;
    int v63 = *(unsigned __int8 *)(v62 + 16);
    if ((v63 - 29) > 0xA) {
      goto LABEL_123;
    }
    if (v63 != 30) {
      break;
    }
    if ((*(_DWORD *)(v62 + 20) & 0x7FFFFFF) == 3)
    {
      unsigned int v64 = (uint64_t *)(v62 - 96);
      goto LABEL_107;
    }
LABEL_123:
    unsigned int v60 = (void *)v60[1];
    if (!v60) {
      goto LABEL_124;
    }
  }
  if (*(unsigned char *)(v61 - 8) != 31) {
    goto LABEL_123;
  }
  int v65 = *(_DWORD *)(v61 - 4);
  if ((v65 & 0x40000000) != 0) {
    unsigned int v64 = *(uint64_t **)(v61 - 32);
  }
  else {
    unsigned int v64 = (uint64_t *)(v61 - 24 - 32 * (v65 & 0x7FFFFFF));
  }
LABEL_107:
  uint64_t v66 = *v64;
  if (!v66) {
    goto LABEL_123;
  }
  if ((uint64_t ***)v66 == a1) {
    return 1;
  }
  if (!a6) {
    goto LABEL_123;
  }
  unsigned int v67 = *(unsigned __int8 *)(v66 + 16);
  if (v67 <= 0x1B && v67 != 5) {
    goto LABEL_123;
  }
  int v69 = *(_DWORD *)(v66 + 20);
  if ((v69 & 0x40000000) != 0)
  {
    unsigned int v71 = *(uint64_t *****)(v66 - 8);
    uint64_t v70 = v69 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v70 = v69 & 0x7FFFFFF;
    unsigned int v71 = (uint64_t ****)(v66 - 32 * v70);
  }
  if (!v70) {
    goto LABEL_123;
  }
  uint64_t v72 = 32 * v70;
  while (*v71 != a1 || !llvm::propagatesPoison((uint64_t)v71))
  {
    v71 += 4;
    v72 -= 32;
    if (!v72) {
      goto LABEL_123;
    }
  }
  return 1;
}

uint64_t llvm::isGuaranteedNotToBePoison(uint64_t ***this, const llvm::Value *a2, llvm::AssumptionCache *a3, const llvm::Instruction *a4, const llvm::DominatorTree *a5)
{
  return sub_1CC16A22C(this, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, 1);
}

uint64_t sub_1CC16A7F0(uint64_t a1, uint64_t a2, unsigned char *a3, const llvm::DataLayout *a4, uint64_t a5, const llvm::DataLayout *a6, uint64_t a7)
{
  if (a3 && (a3[17] & 4) != 0) {
    return 3;
  }
  if (!a6 || (int v14 = a6, !*((void *)a6 + 5)))
  {
    if (!a1 || *(unsigned __int8 *)(a1 + 16) < 0x1Cu || (int v14 = (const llvm::DataLayout *)a1, !*(void *)(a1 + 40))) {
      int v14 = 0;
    }
  }
  *(void *)&long long v36 = a4;
  *((void *)&v36 + 1) = a5;
  BOOL v37 = v14;
  uint64_t v38 = a7;
  uint64_t v39 = 0;
  char v40 = 1;
  if (sub_1CC162D6C((llvm::Constant *)a1, 0, (uint64_t)&v36) >= 2)
  {
    if (!a6 || (uint64_t v15 = a6, !*((void *)a6 + 5)))
    {
      if (!a2 || *(unsigned __int8 *)(a2 + 16) < 0x1Cu || (uint64_t v15 = (const llvm::DataLayout *)a2, !*(void *)(a2 + 40))) {
        uint64_t v15 = 0;
      }
    }
    *(void *)&long long v36 = a4;
    *((void *)&v36 + 1) = a5;
    BOOL v37 = v15;
    uint64_t v38 = a7;
    uint64_t v39 = 0;
    char v40 = 1;
    if (sub_1CC162D6C((llvm::Constant *)a2, 0, (uint64_t)&v36) > 1) {
      return 3;
    }
  }
  sub_1CC1692B8(a1, 1, a4, a5, a6, a7, (const llvm::Value *)1, (uint64_t)&v32);
  sub_1CC1692B8(a2, 1, a4, a5, a6, a7, (const llvm::Value *)1, (uint64_t)&v28);
  uint64_t MayOverflow = llvm::ConstantRange::signedAddMayOverflow(&v32, &v28);
  uint64_t v16 = MayOverflow;
  if (a3 && MayOverflow == 2)
  {
    BOOL v18 = llvm::ConstantRange::isAllNonNegative((llvm::ConstantRange *)&v32)
       || llvm::ConstantRange::isAllNonNegative((llvm::ConstantRange *)&v28);
    if (llvm::ConstantRange::isAllNegative((llvm::ConstantRange *)&v32))
    {
      int isAllNegative = 1;
    }
    else
    {
      int isAllNegative = llvm::ConstantRange::isAllNegative((llvm::ConstantRange *)&v28);
      if ((v18 | isAllNegative) != 1)
      {
LABEL_38:
        uint64_t v16 = 2;
        goto LABEL_39;
      }
    }
    unsigned int v25 = v33;
    if (v33 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v24);
    }
    unsigned int v27 = v33;
    uint64_t v24 = 0;
    uint64_t v26 = 0;
    *(void *)&long long v36 = a4;
    *((void *)&v36 + 1) = a5;
    BOOL v37 = a6;
    uint64_t v38 = a7;
    uint64_t v39 = 0;
    char v40 = 1;
    sub_1CC17B6B4(a3, (unsigned int *)&v24, 0, &v36);
    unsigned int v20 = v25;
    uint64_t v21 = (uint64_t *)(v24 + 8 * ((v25 - 1) >> 6));
    if (v25 < 0x41) {
      uint64_t v21 = &v24;
    }
    if (((unint64_t)*v21 >> (v25 - 1)) & v18) {
      goto LABEL_53;
    }
    uint64_t v22 = (uint64_t *)(v26 + 8 * ((v27 - 1) >> 6));
    if (v27 < 0x41) {
      uint64_t v22 = &v26;
    }
    if (((unint64_t)*v22 >> (v27 - 1)) & isAllNegative)
    {
LABEL_53:
      if (v27 >= 0x41 && v26)
      {
        MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
        unsigned int v20 = v25;
      }
      if (v20 >= 0x41 && v24) {
        MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
      }
      uint64_t v16 = 3;
      goto LABEL_39;
    }
    if (v27 >= 0x41 && v26)
    {
      MEMORY[0x1D25D9CB0]();
      unsigned int v20 = v25;
    }
    if (v20 >= 0x41 && v24) {
      MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
    }
    goto LABEL_38;
  }
LABEL_39:
  if (v31 >= 0x41 && v30) {
    MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
  }
  if (v29 >= 0x41 && v28) {
    MEMORY[0x1D25D9CB0](v28, 0x1000C8000313F17);
  }
  if (v35 >= 0x41 && v34) {
    MEMORY[0x1D25D9CB0](v34, 0x1000C8000313F17);
  }
  if (v33 >= 0x41 && v32) {
    MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
  }
  return v16;
}

uint64_t llvm::computeOverflowForSignedAdd(llvm *this, const llvm::Value *a2, const llvm::Value *a3, const llvm::DataLayout *a4, llvm::AssumptionCache *a5, const llvm::Instruction *a6, const llvm::DominatorTree *a7)
{
  return sub_1CC16A7F0((uint64_t)this, (uint64_t)a2, 0, a3, (uint64_t)a4, a5, (uint64_t)a6);
}

BOOL llvm::propagatesPoison(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  unsigned int v3 = *(unsigned __int8 *)(v2 + 16);
  if (v2) {
    BOOL v4 = v3 > 0x1B;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    unsigned int v5 = v3 - 28;
  }
  else {
    unsigned int v5 = *(unsigned __int16 *)(v2 + 18);
  }
  BOOL result = 0;
  switch(v5)
  {
    case '5':
    case '6':
      return 1;
    case '7':
    case 'C':
      return result;
    case '8':
      if (v3 != 84) {
        return 0;
      }
      uint64_t v10 = *(void *)(v2 - 32);
      if (!v10
        || *(unsigned char *)(v10 + 16)
        || *(void *)(v10 + 24) != *(void *)(v2 + 72)
        || (*(unsigned char *)(v10 + 33) & 0x20) == 0)
      {
        return 0;
      }
      int v13 = *(_DWORD *)(v10 + 36);
      BOOL result = 1;
      BOOL v14 = (v13 - 263) > 0x31 || ((1 << (v13 - 7)) & 0x2404000208001) == 0;
      if (v14 && v13 != 53) {
        return 0;
      }
      return result;
    case '9':
      int v11 = *(_DWORD *)(v2 + 20);
      if ((v11 & 0x40000000) != 0) {
        uint64_t v12 = *(void *)(v2 - 8);
      }
      else {
        uint64_t v12 = v2 - 32 * (v11 & 0x7FFFFFF);
      }
      return ((a1 - v12) & 0x1FFFFFFFE0) == 0;
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '?':
    case '@':
    case 'A':
    case 'B':
      goto LABEL_12;
    default:
      if (v5 == 5) {
        return result;
      }
      if (v5 == 34) {
        return 1;
      }
LABEL_12:
      BOOL v8 = v3 > 0x1B && v3 - 41 < 0x12;
      BOOL result = 1;
      if (v3 != 40 && !v8) {
        return v3 > 0x1B && v3 - 66 < 0xD;
      }
      return result;
  }
}

void llvm::getGuaranteedWellDefinedOps(uint64_t a1, llvm::SmallPtrSetImplBase *this, int a3)
{
  if (*(unsigned char *)(a1 + 16) == 84)
  {
LABEL_11:
    uint64_t v6 = *(unsigned __int8 **)(a1 - 32);
    unsigned int v7 = v6[16];
    if (v7 < 0x15 || v7 == 24) {
      goto LABEL_16;
    }
    uint64_t v69 = *((void *)this + 1);
    if (v69 != *(void *)this) {
      goto LABEL_175;
    }
    uint64_t v70 = *((unsigned int *)this + 5);
    if (v70)
    {
      unsigned int v71 = 0;
      uint64_t v72 = 8 * v70;
      unsigned int v73 = (unsigned __int8 **)*((void *)this + 1);
      do
      {
        if (*v73 == v6) {
          goto LABEL_16;
        }
        if (*v73 == (unsigned __int8 *)-2) {
          unsigned int v71 = v73;
        }
        ++v73;
        v72 -= 8;
      }
      while (v72);
      if (v71)
      {
        *unsigned int v71 = v6;
        --*((_DWORD *)this + 6);
        goto LABEL_16;
      }
    }
    if (v70 < *((_DWORD *)this + 4))
    {
      *((_DWORD *)this + 5) = v70 + 1;
      *(void *)(v69 + 8 * v70) = v6;
    }
    else
    {
LABEL_175:
      llvm::SmallPtrSetImplBase::insert_imp_big(this, v6);
    }
LABEL_16:
    for (unint64_t i = 0; ; ++i)
    {
      int v10 = *(unsigned __int8 *)(a1 + 16);
      if (v10 == 84)
      {
        uint64_t v11 = 0;
      }
      else if (v10 == 39)
      {
        uint64_t v11 = (*(_DWORD *)(a1 + 80) + 1);
      }
      else
      {
        uint64_t v11 = 2;
      }
      int v12 = *(_DWORD *)(a1 + 20);
      if (v12 < 0 && (uint64_t v74 = v12 & 0x7FFFFFF, (*(void *)(a1 - 32 * v74 - 8) & 0xFFFFFFFF0) != 0))
      {
        uint64_t v14 = -v74;
        int v13 = *(_DWORD *)(a1 - 32 * v74 - 12) - *(_DWORD *)(a1 - 32 * v74 - *(void *)(a1 - 32 * v74 - 8));
      }
      else
      {
        int v13 = 0;
        uint64_t v14 = -(uint64_t)(v12 & 0x7FFFFFF);
      }
      if (i >= ((-32 - 32 * v11 + 32 * (unint64_t)-v13 - 32 * v14) >> 5)) {
        return;
      }
      if ((llvm::CallBase::paramHasAttr(a1, i, 36) & 1) != 0 || llvm::CallBase::paramHasAttr(a1, i, 76))
      {
        uint64_t v33 = *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * i);
        uint64_t v34 = *((void *)this + 1);
        uint64_t v35 = *((unsigned int *)this + 5);
        if (v34 != *(void *)this)
        {
          unsigned int v39 = *((_DWORD *)this + 4);
          goto LABEL_84;
        }
        if (!v35)
        {
LABEL_67:
          unsigned int v39 = *((_DWORD *)this + 4);
          if (v35 < v39)
          {
            *((_DWORD *)this + 5) = v35 + 1;
            *(void *)(v34 + 8 * v35) = v33;
            continue;
          }
LABEL_84:
          if (3 * v39 <= 4 * ((int)v35 - *((_DWORD *)this + 6)))
          {
            if (v39 >= 0x40) {
              v39 *= 2;
            }
            else {
              unsigned int v39 = 128;
            }
          }
          else if (v39 - v35 >= v39 >> 3)
          {
            goto LABEL_86;
          }
          uint64_t v75 = *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * i);
          llvm::SmallPtrSetImplBase::Grow(this, v39);
          uint64_t v33 = v75;
          unsigned int v39 = *((_DWORD *)this + 4);
          uint64_t v34 = *((void *)this + 1);
LABEL_86:
          unsigned int v46 = v39 - 1;
          unsigned int v47 = (v39 - 1) & ((v33 >> 4) ^ (v33 >> 9));
          int v48 = (void *)(v34 + 8 * v47);
          uint64_t v49 = *v48;
          if (*v48 == -1)
          {
            unsigned int v50 = 0;
LABEL_98:
            if (v50) {
              int v54 = v50;
            }
            else {
              int v54 = v48;
            }
            if (*v54 != v33)
            {
              if (*v54 == -2) {
                --*((_DWORD *)this + 6);
              }
              else {
                ++*((_DWORD *)this + 5);
              }
              void *v54 = v33;
            }
          }
          else
          {
            unsigned int v50 = 0;
            int v51 = 1;
            while (v49 != v33)
            {
              if (v50) {
                BOOL v52 = 0;
              }
              else {
                BOOL v52 = v49 == -2;
              }
              if (v52) {
                unsigned int v50 = v48;
              }
              unsigned int v53 = v47 + v51++;
              unsigned int v47 = v53 & v46;
              int v48 = (void *)(v34 + 8 * (v53 & v46));
              uint64_t v49 = *v48;
              if (*v48 == -1) {
                goto LABEL_98;
              }
            }
          }
          continue;
        }
        long long v36 = 0;
        uint64_t v37 = 8 * v35;
        uint64_t v38 = (void *)*((void *)this + 1);
        while (*v38 != v33)
        {
          if (*v38 == -2) {
            long long v36 = v38;
          }
          ++v38;
          v37 -= 8;
          if (!v37)
          {
            if (!v36) {
              goto LABEL_67;
            }
            *long long v36 = v33;
            --*((_DWORD *)this + 6);
            break;
          }
        }
      }
    }
  }
  switch(*(unsigned char *)(a1 + 16))
  {
    case '<':
      uint64_t v15 = *(void *)(a1 - 32);
      uint64_t v16 = *((void *)this + 1);
      uint64_t v17 = *((unsigned int *)this + 5);
      if (v16 == *(void *)this)
      {
        if (v17)
        {
          BOOL v18 = 0;
          uint64_t v19 = 8 * v17;
          unsigned int v20 = (void *)*((void *)this + 1);
          do
          {
            if (*v20 == v15) {
              return;
            }
            if (*v20 == -2) {
              BOOL v18 = v20;
            }
            ++v20;
            v19 -= 8;
          }
          while (v19);
          if (v18) {
            goto LABEL_127;
          }
        }
        unsigned int v21 = *((_DWORD *)this + 4);
        if (v17 < v21) {
          goto LABEL_34;
        }
      }
      else
      {
        unsigned int v21 = *((_DWORD *)this + 4);
      }
      if (3 * v21 <= 4 * ((int)v17 - *((_DWORD *)this + 6)))
      {
        if (v21 >= 0x40) {
          v21 *= 2;
        }
        else {
          unsigned int v21 = 128;
        }
      }
      else if (v21 - v17 >= v21 >> 3)
      {
        goto LABEL_38;
      }
      llvm::SmallPtrSetImplBase::Grow(this, v21);
      unsigned int v21 = *((_DWORD *)this + 4);
      uint64_t v16 = *((void *)this + 1);
LABEL_38:
      unsigned int v22 = v21 - 1;
      unsigned int v23 = (v21 - 1) & ((v15 >> 4) ^ (v15 >> 9));
      uint64_t v24 = (void *)(v16 + 8 * v23);
      uint64_t v25 = *v24;
      if (*v24 == -1) {
        goto LABEL_143;
      }
      uint64_t v26 = 0;
      int v27 = 1;
      while (v25 != v15)
      {
        if (v26) {
          BOOL v28 = 0;
        }
        else {
          BOOL v28 = v25 == -2;
        }
        if (v28) {
          uint64_t v26 = v24;
        }
        unsigned int v29 = v23 + v27++;
        unsigned int v23 = v29 & v22;
        uint64_t v24 = (void *)(v16 + 8 * (v29 & v22));
        uint64_t v25 = *v24;
        if (*v24 == -1) {
          goto LABEL_144;
        }
      }
      return;
    case '=':
      uint64_t v15 = *(void *)(a1 - 32);
      uint64_t v16 = *((void *)this + 1);
      uint64_t v17 = *((unsigned int *)this + 5);
      if (v16 == *(void *)this)
      {
        if (v17)
        {
          BOOL v18 = 0;
          uint64_t v30 = 8 * v17;
          unsigned int v31 = (void *)*((void *)this + 1);
          do
          {
            if (*v31 == v15) {
              return;
            }
            if (*v31 == -2) {
              BOOL v18 = v31;
            }
            ++v31;
            v30 -= 8;
          }
          while (v30);
          if (v18) {
            goto LABEL_127;
          }
        }
        unsigned int v32 = *((_DWORD *)this + 4);
        if (v17 < v32) {
          goto LABEL_34;
        }
      }
      else
      {
        unsigned int v32 = *((_DWORD *)this + 4);
      }
      if (3 * v32 <= 4 * ((int)v17 - *((_DWORD *)this + 6)))
      {
        if (v32 >= 0x40) {
          v32 *= 2;
        }
        else {
          unsigned int v32 = 128;
        }
      }
      else if (v32 - v17 >= v32 >> 3)
      {
        goto LABEL_72;
      }
      llvm::SmallPtrSetImplBase::Grow(this, v32);
      unsigned int v32 = *((_DWORD *)this + 4);
      uint64_t v16 = *((void *)this + 1);
LABEL_72:
      unsigned int v40 = v32 - 1;
      unsigned int v41 = (v32 - 1) & ((v15 >> 4) ^ (v15 >> 9));
      uint64_t v24 = (void *)(v16 + 8 * v41);
      uint64_t v42 = *v24;
      if (*v24 == -1) {
        goto LABEL_143;
      }
      uint64_t v26 = 0;
      int v43 = 1;
      while (v42 != v15)
      {
        if (v26) {
          BOOL v44 = 0;
        }
        else {
          BOOL v44 = v42 == -2;
        }
        if (v44) {
          uint64_t v26 = v24;
        }
        unsigned int v45 = v41 + v43++;
        unsigned int v41 = v45 & v40;
        uint64_t v24 = (void *)(v16 + 8 * (v45 & v40));
        uint64_t v42 = *v24;
        if (*v24 == -1) {
          goto LABEL_144;
        }
      }
      return;
    case '>':
    case '?':
      return;
    case '@':
LABEL_7:
      uint64_t v5 = *(void *)(a1 - 96);
      goto LABEL_8;
    case 'A':
      uint64_t v15 = *(void *)(a1 - 64);
      uint64_t v16 = *((void *)this + 1);
      uint64_t v17 = *((unsigned int *)this + 5);
      if (v16 == *(void *)this)
      {
        if (v17)
        {
          BOOL v18 = 0;
          uint64_t v59 = 8 * v17;
          unsigned int v60 = (void *)*((void *)this + 1);
          do
          {
            if (*v60 == v15) {
              return;
            }
            if (*v60 == -2) {
              BOOL v18 = v60;
            }
            ++v60;
            v59 -= 8;
          }
          while (v59);
          if (v18)
          {
LABEL_127:
            *BOOL v18 = v15;
            --*((_DWORD *)this + 6);
            return;
          }
        }
        unsigned int v61 = *((_DWORD *)this + 4);
        if (v17 < v61)
        {
LABEL_34:
          *((_DWORD *)this + 5) = v17 + 1;
          *(void *)(v16 + 8 * v17) = v15;
          return;
        }
      }
      else
      {
        unsigned int v61 = *((_DWORD *)this + 4);
      }
      if (3 * v61 <= 4 * ((int)v17 - *((_DWORD *)this + 6)))
      {
        if (v61 >= 0x40) {
          v61 *= 2;
        }
        else {
          unsigned int v61 = 128;
        }
      }
      else if (v61 - v17 >= v61 >> 3)
      {
        goto LABEL_132;
      }
      llvm::SmallPtrSetImplBase::Grow(this, v61);
      unsigned int v61 = *((_DWORD *)this + 4);
      uint64_t v16 = *((void *)this + 1);
LABEL_132:
      unsigned int v62 = v61 - 1;
      unsigned int v63 = (v61 - 1) & ((v15 >> 4) ^ (v15 >> 9));
      uint64_t v24 = (void *)(v16 + 8 * v63);
      uint64_t v64 = *v24;
      if (*v24 == -1)
      {
LABEL_143:
        uint64_t v26 = 0;
      }
      else
      {
        uint64_t v26 = 0;
        int v65 = 1;
        do
        {
          if (v64 == v15) {
            return;
          }
          if (v26) {
            BOOL v66 = 0;
          }
          else {
            BOOL v66 = v64 == -2;
          }
          if (v66) {
            uint64_t v26 = v24;
          }
          unsigned int v67 = v63 + v65++;
          unsigned int v63 = v67 & v62;
          uint64_t v24 = (void *)(v16 + 8 * (v67 & v62));
          uint64_t v64 = *v24;
        }
        while (*v24 != -1);
      }
LABEL_144:
      if (v26) {
        unsigned int v68 = v26;
      }
      else {
        unsigned int v68 = v24;
      }
      if (*v68 != v15)
      {
        if (*v68 == -2) {
          --*((_DWORD *)this + 6);
        }
        else {
          ++*((_DWORD *)this + 5);
        }
        void *v68 = v15;
      }
      break;
    default:
      switch(*(unsigned char *)(a1 + 16))
      {
        case 0x1D:
          uint64_t v55 = *(void *)(*(void *)(*(void *)(a1 + 40) + 56) + 112);
          if (v55)
          {
            if (*(_DWORD *)(v55 + 8) >= 2u)
            {
              uint64_t v56 = *(void *)(v55 + 48);
              if (v56)
              {
                if ((*(unsigned char *)(v56 + 16) & 0x10) != 0) {
                  goto LABEL_115;
                }
              }
            }
          }
          return;
        case 0x1E:
          if (a3 && (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) == 3) {
            goto LABEL_7;
          }
          return;
        case 0x1F:
          if (!a3) {
            return;
          }
LABEL_115:
          int v57 = *(_DWORD *)(a1 + 20);
          if ((v57 & 0x40000000) != 0) {
            uint64_t v58 = *(uint64_t **)(a1 - 8);
          }
          else {
            uint64_t v58 = (uint64_t *)(a1 - 32 * (v57 & 0x7FFFFFF));
          }
          uint64_t v5 = *v58;
          break;
        case 0x21:
          goto LABEL_11;
        default:
          return;
      }
LABEL_8:
      sub_1CB89694C(this, v5);
      return;
  }
}

void llvm::getGuaranteedNonPoisonOps(uint64_t a1, uint64_t a2, int a3)
{
  llvm::getGuaranteedWellDefinedOps(a1, (llvm::SmallPtrSetImplBase *)a2, a3);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  if (v5 > 0x33) {
    return;
  }
  if (v5 == 30)
  {
    if (!byte_1EBD04CB8 || (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) != 3) {
      return;
    }
    uint64_t v6 = *(void *)(a1 - 96);
    goto LABEL_9;
  }
  if (((1 << v5) & 0xD800000000000) == 0)
  {
    if (v5 != 31 || !byte_1EBD04CB8) {
      return;
    }
    int v25 = *(_DWORD *)(a1 + 20);
    if ((v25 & 0x40000000) != 0) {
      uint64_t v26 = *(uint64_t **)(a1 - 8);
    }
    else {
      uint64_t v26 = (uint64_t *)(a1 - 32 * (v25 & 0x7FFFFFF));
    }
    uint64_t v6 = *v26;
LABEL_9:
    sub_1CB89694C((llvm::SmallPtrSetImplBase *)a2, v6);
    return;
  }
  int v7 = *(_DWORD *)(a1 + 20);
  if ((v7 & 0x40000000) != 0) {
    uint64_t v8 = *(void *)(a1 - 8);
  }
  else {
    uint64_t v8 = a1 - 32 * (v7 & 0x7FFFFFF);
  }
  uint64_t v9 = *(void *)(v8 + 32);
  uint64_t v10 = *(void *)(a2 + 8);
  uint64_t v11 = *(unsigned int *)(a2 + 20);
  if (v10 != *(void *)a2)
  {
    unsigned int v15 = *(_DWORD *)(a2 + 16);
    goto LABEL_25;
  }
  if (!v11)
  {
LABEL_22:
    unsigned int v15 = *(_DWORD *)(a2 + 16);
    if (v11 < v15)
    {
      *(_DWORD *)(a2 + 20) = v11 + 1;
      *(void *)(v10 + 8 * v11) = v9;
      return;
    }
LABEL_25:
    if (3 * v15 <= 4 * ((int)v11 - *(_DWORD *)(a2 + 24)))
    {
      if (v15 >= 0x40) {
        v15 *= 2;
      }
      else {
        unsigned int v15 = 128;
      }
    }
    else if (v15 - v11 >= v15 >> 3)
    {
      goto LABEL_27;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a2, v15);
    unsigned int v15 = *(_DWORD *)(a2 + 16);
    uint64_t v10 = *(void *)(a2 + 8);
LABEL_27:
    unsigned int v16 = v15 - 1;
    unsigned int v17 = (v15 - 1) & ((v9 >> 4) ^ (v9 >> 9));
    BOOL v18 = (void *)(v10 + 8 * v17);
    uint64_t v19 = *v18;
    if (*v18 == -1)
    {
      unsigned int v20 = 0;
LABEL_39:
      if (v20) {
        uint64_t v24 = v20;
      }
      else {
        uint64_t v24 = v18;
      }
      if (*v24 != v9)
      {
        if (*v24 == -2) {
          --*(_DWORD *)(a2 + 24);
        }
        else {
          ++*(_DWORD *)(a2 + 20);
        }
        *uint64_t v24 = v9;
      }
    }
    else
    {
      unsigned int v20 = 0;
      int v21 = 1;
      while (v19 != v9)
      {
        if (v20) {
          BOOL v22 = 0;
        }
        else {
          BOOL v22 = v19 == -2;
        }
        if (v22) {
          unsigned int v20 = v18;
        }
        unsigned int v23 = v17 + v21++;
        unsigned int v17 = v23 & v16;
        BOOL v18 = (void *)(v10 + 8 * (v23 & v16));
        uint64_t v19 = *v18;
        if (*v18 == -1) {
          goto LABEL_39;
        }
      }
    }
    return;
  }
  int v12 = 0;
  uint64_t v13 = 8 * v11;
  uint64_t v14 = *(void **)(a2 + 8);
  while (*v14 != v9)
  {
    if (*v14 == -2) {
      int v12 = v14;
    }
    ++v14;
    v13 -= 8;
    if (!v13)
    {
      if (!v12) {
        goto LABEL_22;
      }
      *int v12 = v9;
      --*(_DWORD *)(a2 + 24);
      return;
    }
  }
}

uint64_t llvm::mustTriggerUB(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v56 = v60;
  int v57 = v60;
  uint64_t v58 = 4;
  int v59 = 0;
  llvm::getGuaranteedNonPoisonOps(a1, (uint64_t)&v56, a3);
  if (v57 != v56)
  {
    unsigned int v31 = (unint64_t *)v57;
    if (v58)
    {
      uint64_t v53 = 8 * v58;
      unsigned int v31 = (unint64_t *)v57;
      while (*v31 >= 0xFFFFFFFFFFFFFFFELL)
      {
        unsigned int v55 = 0;
        ++v31;
        v53 -= 8;
        if (!v53) {
          goto LABEL_89;
        }
      }
    }
    unsigned int v32 = &v57[8 * v58];
    if (v31 != (unint64_t *)v32)
    {
      uint64_t v34 = *a2;
      uint64_t v33 = a2[1];
      int v35 = *((_DWORD *)a2 + 4);
      uint64_t v36 = *((unsigned int *)a2 + 5);
      unint64_t v37 = *v31;
      uint64_t v38 = v33;
LABEL_56:
      if (v38 == v34)
      {
        unsigned int v39 = (unint64_t *)(v34 + 8 * v36);
        if (v36)
        {
          uint64_t v40 = 0;
          while (*(void *)(v34 + v40) != v37)
          {
            v40 += 8;
            if (8 * *((unsigned int *)a2 + 5) == v40) {
              goto LABEL_61;
            }
          }
          unsigned int v39 = (unint64_t *)(v34 + v40);
LABEL_61:
          unsigned int v41 = *((_DWORD *)a2 + 5);
        }
        else
        {
          unsigned int v41 = 0;
        }
        uint64_t v38 = *a2;
      }
      else
      {
        int v43 = v35 - 1;
        unsigned int v44 = (v35 - 1) & ((v37 >> 4) ^ (v37 >> 9));
        unsigned int v39 = (unint64_t *)(v33 + 8 * v44);
        unint64_t v45 = *v39;
        if (*v39 == -1)
        {
          unsigned int v46 = 0;
LABEL_95:
          if (v46) {
            unsigned int v39 = v46;
          }
          unint64_t v50 = *v39;
        }
        else
        {
          unsigned int v46 = 0;
          int v47 = 1;
          while (v45 != v37)
          {
            if (v46) {
              BOOL v48 = 0;
            }
            else {
              BOOL v48 = v45 == -2;
            }
            if (v48) {
              unsigned int v46 = v39;
            }
            unsigned int v49 = v44 + v47++;
            unsigned int v44 = v49 & v43;
            unsigned int v39 = (unint64_t *)(v33 + 8 * (v49 & v43));
            unint64_t v45 = *v39;
            if (*v39 == -1) {
              goto LABEL_95;
            }
          }
          unint64_t v50 = v37;
        }
        if (v33 == v34) {
          unsigned int v51 = *((_DWORD *)a2 + 5);
        }
        else {
          unsigned int v51 = *((_DWORD *)a2 + 4);
        }
        BOOL v52 = (unint64_t *)(v33 + 8 * v51);
        if (v50 != v37) {
          unsigned int v39 = v52;
        }
        unsigned int v41 = *((_DWORD *)a2 + 5);
        uint64_t v38 = a2[1];
      }
      if (v38 != v34) {
        unsigned int v41 = *((_DWORD *)a2 + 4);
      }
      if (v39 != (unint64_t *)(v38 + 8 * v41))
      {
        unsigned int v55 = 1;
        goto LABEL_89;
      }
      uint64_t v42 = v31 + 1;
      while (v42 != (unint64_t *)v32)
      {
        unint64_t v54 = *v42++;
        unint64_t v37 = v54;
        if (v54 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          unsigned int v31 = v42 - 1;
          goto LABEL_56;
        }
      }
    }
    unsigned int v55 = 0;
LABEL_89:
    if (v57 != v56) {
      free(v57);
    }
    return v55;
  }
  if (HIDWORD(v58))
  {
    uint64_t v29 = 8 * HIDWORD(v58);
    for (unint64_t i = (unint64_t *)v57; *i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      uint64_t v27 = 0;
      v29 -= 8;
      if (!v29) {
        return v27;
      }
    }
  }
  else
  {
    unint64_t i = (unint64_t *)v57;
  }
  uint64_t v5 = &v57[8 * HIDWORD(v58)];
  if (i != (unint64_t *)v5)
  {
    uint64_t v7 = *a2;
    uint64_t v6 = a2[1];
    int v8 = *((_DWORD *)a2 + 4);
    uint64_t v9 = *((unsigned int *)a2 + 5);
    unint64_t v10 = *i;
    uint64_t v11 = v6;
LABEL_6:
    if (v11 == v7)
    {
      int v12 = (unint64_t *)(v7 + 8 * v9);
      if (v9)
      {
        uint64_t v13 = 0;
        while (*(void *)(v7 + v13) != v10)
        {
          v13 += 8;
          if (8 * *((unsigned int *)a2 + 5) == v13) {
            goto LABEL_11;
          }
        }
        int v12 = (unint64_t *)(v7 + v13);
LABEL_11:
        unsigned int v14 = *((_DWORD *)a2 + 5);
      }
      else
      {
        unsigned int v14 = 0;
      }
      uint64_t v11 = *a2;
    }
    else
    {
      int v16 = v8 - 1;
      unsigned int v17 = (v8 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      BOOL v18 = (unint64_t *)(v6 + 8 * v17);
      unint64_t v19 = *v18;
      if (*v18 == -1)
      {
        unsigned int v20 = 0;
LABEL_44:
        if (v20) {
          BOOL v18 = v20;
        }
        unint64_t v24 = *v18;
      }
      else
      {
        unsigned int v20 = 0;
        int v21 = 1;
        while (v19 != v10)
        {
          if (v20) {
            BOOL v22 = 0;
          }
          else {
            BOOL v22 = v19 == -2;
          }
          if (v22) {
            unsigned int v20 = v18;
          }
          unsigned int v23 = v17 + v21++;
          unsigned int v17 = v23 & v16;
          BOOL v18 = (unint64_t *)(v6 + 8 * (v23 & v16));
          unint64_t v19 = *v18;
          if (*v18 == -1) {
            goto LABEL_44;
          }
        }
        unint64_t v24 = v10;
      }
      if (v6 == v7) {
        unsigned int v25 = *((_DWORD *)a2 + 5);
      }
      else {
        unsigned int v25 = *((_DWORD *)a2 + 4);
      }
      uint64_t v26 = (unint64_t *)(v6 + 8 * v25);
      if (v24 == v10) {
        int v12 = v18;
      }
      else {
        int v12 = v26;
      }
      unsigned int v14 = *((_DWORD *)a2 + 5);
      uint64_t v11 = a2[1];
    }
    if (v11 != v7) {
      unsigned int v14 = *((_DWORD *)a2 + 4);
    }
    if (v12 != (unint64_t *)(v11 + 8 * v14)) {
      return 1;
    }
    unsigned int v15 = i + 1;
    while (v15 != (unint64_t *)v5)
    {
      unint64_t v30 = *v15++;
      unint64_t v10 = v30;
      if (v30 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t i = v15 - 1;
        goto LABEL_6;
      }
    }
  }
  return 0;
}

uint64_t llvm::programUndefinedIfUndefOrPoison(llvm *this, const llvm::Instruction *a2)
{
  return sub_1CC16BAFC((uint64_t)this, 0, (int)a2);
}

uint64_t sub_1CC16BAFC(uint64_t a1, char a2, int a3)
{
  int v3 = a3;
  unsigned int v5 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v5 >= 0x1C)
  {
    uint64_t v6 = *(llvm::BasicBlock **)(a1 + 40);
    uint64_t v7 = (void *)(a1 + 32);
  }
  else
  {
    uint64_t v8 = 0;
    if (!a1 || v5 != 21) {
      return v8;
    }
    uint64_t v9 = *(void *)(*(void *)(a1 + 24) + 80);
    uint64_t v6 = (llvm::BasicBlock *)(v9 - 24);
    if (v9) {
      uint64_t v10 = v9 - 24;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v7 = (void *)(v10 + 48);
  }
  uint64_t v11 = (void *)*v7;
  uint64_t v137 = v6;
  int v12 = (void *)((char *)v6 + 40);
  if ((a2 & 1) == 0)
  {
    if (v11 == v12)
    {
      char v31 = 0;
LABEL_136:
      int v49 = 2;
      return (v49 != 2) & v31;
    }
    char v31 = 0;
    int v32 = 32;
    unsigned int v33 = (a1 >> 4) ^ (a1 >> 9);
    while (1)
    {
      if (v11) {
        uint64_t v34 = (uint64_t)(v11 - 3);
      }
      else {
        uint64_t v34 = 0;
      }
      if (sub_1CBF63B28(v34)) {
        goto LABEL_110;
      }
      if (!--v32) {
        goto LABEL_136;
      }
      uint64_t v145 = (char *)v149;
      unint64_t v146 = (char *)v149;
      uint64_t v147 = 4;
      int v148 = 0;
      llvm::getGuaranteedWellDefinedOps(v34, (llvm::SmallPtrSetImplBase *)&v145, 0);
      uint64_t v36 = v145;
      if (v146 == v145)
      {
        int v37 = HIDWORD(v147);
        uint64_t v38 = &v146[8 * HIDWORD(v147)];
        if (HIDWORD(v147))
        {
          uint64_t v39 = 0;
          while (*(void *)&v146[v39] != a1)
          {
            v39 += 8;
            if (8 * HIDWORD(v147) == v39) {
              goto LABEL_79;
            }
          }
          uint64_t v38 = &v146[v39];
        }
LABEL_79:
        uint64_t v36 = v146;
      }
      else
      {
        int v40 = v147 - 1;
        unsigned int v41 = (v147 - 1) & v33;
        uint64_t v38 = &v146[8 * v41];
        uint64_t v42 = *(void *)v38;
        if (*(void *)v38 == -1)
        {
          int v43 = 0;
LABEL_98:
          if (v43) {
            uint64_t v38 = v43;
          }
          int v37 = HIDWORD(v147);
          if (*(void *)v38 != a1) {
            uint64_t v38 = &v146[8 * v147];
          }
        }
        else
        {
          int v43 = 0;
          int v44 = 1;
          while (v42 != a1)
          {
            if (v43) {
              BOOL v45 = 0;
            }
            else {
              BOOL v45 = v42 == -2;
            }
            if (v45) {
              int v43 = v38;
            }
            unsigned int v46 = v41 + v44++;
            unsigned int v41 = v46 & v40;
            uint64_t v38 = &v146[8 * (v46 & v40)];
            uint64_t v42 = *(void *)v38;
            if (*(void *)v38 == -1) {
              goto LABEL_98;
            }
          }
          int v37 = HIDWORD(v147);
        }
      }
      if (v146 == v36) {
        int v47 = v37;
      }
      else {
        int v47 = v147;
      }
      if (v38 != &v146[8 * v47])
      {
        int v48 = 0;
        int v49 = 1;
        char v31 = 1;
        goto LABEL_107;
      }
      int v48 = 0;
      int v50 = *(unsigned __int8 *)(v34 + 16);
      int v49 = 2;
      if (v50 != 29 && v50 != 35) {
        break;
      }
LABEL_107:
      if (v146 != v145) {
        free(v146);
      }
      if (!v48) {
        return (v49 != 2) & v31;
      }
LABEL_110:
      uint64_t v11 = (void *)v11[1];
      if (v11 == v12) {
        goto LABEL_136;
      }
    }
    if (v50 == 80)
    {
      uint64_t v52 = *(void *)(*(void *)(v34 + 40) + 56);
      int v53 = *(_DWORD *)(v52 + 20);
      if ((v53 & 0x40000000) != 0) {
        unint64_t v54 = *(llvm::Value ***)(v52 - 8);
      }
      else {
        unint64_t v54 = (llvm::Value **)(v52 - 32 * (v53 & 0x7FFFFFF));
      }
      if (llvm::classifyEHPersonality(*v54, v35) == 10)
      {
LABEL_96:
        int v49 = 0;
        int v48 = 1;
        goto LABEL_107;
      }
      goto LABEL_106;
    }
    if (v11 && v50 == 84)
    {
      uint64_t v51 = *(void *)(v34 + 64);
      if ((!v51 || (*(unsigned char *)(v51 + 16) & 0x20) == 0)
        && !llvm::CallBase::hasFnAttrOnCalledFunction(v34, 37))
      {
        goto LABEL_106;
      }
    }
    else
    {
      if ((!v11 || v50 != 36) && (!v11 || v50 != 38))
      {
        if (v50 != 34) {
          goto LABEL_95;
        }
LABEL_106:
        int v48 = 0;
        goto LABEL_107;
      }
      if ((*(_WORD *)(v34 + 18) & 1) == 0) {
        goto LABEL_106;
      }
    }
LABEL_95:
    if (llvm::Instruction::willReturn((llvm::Instruction *)v34)) {
      goto LABEL_96;
    }
    goto LABEL_106;
  }
  uint64_t v145 = (char *)v149;
  unint64_t v146 = (char *)v149;
  int v148 = 0;
  uint64_t v13 = v144;
  int64_t v140 = v144;
  int64_t v141 = v144;
  uint64_t v142 = 4;
  int v143 = 0;
  uint64_t v147 = 0x100000010;
  v149[0] = a1;
  uint64_t v14 = *(void *)(a1 + 8);
  if (!v14)
  {
    unsigned int v56 = 0;
    unsigned int v55 = v144;
    goto LABEL_145;
  }
  unsigned int v15 = 16;
  do
  {
    if (!llvm::propagatesPoison(v14)) {
      goto LABEL_45;
    }
    uint64_t v16 = *(void *)(v14 + 24);
    unsigned int v17 = v146;
    uint64_t v18 = HIDWORD(v147);
    if (v146 != v145) {
      goto LABEL_24;
    }
    if (!HIDWORD(v147))
    {
LABEL_22:
      if (HIDWORD(v147) < v15)
      {
        ++HIDWORD(v147);
        *(void *)&v146[8 * v18] = v16;
        goto LABEL_45;
      }
LABEL_24:
      if (3 * v15 <= 4 * (HIDWORD(v147) - v148))
      {
        if (v15 >= 0x40) {
          v15 *= 2;
        }
        else {
          unsigned int v15 = 128;
        }
      }
      else if (v15 - HIDWORD(v147) >= v15 >> 3)
      {
        goto LABEL_26;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v145, v15);
      unsigned int v15 = v147;
      unsigned int v17 = v146;
LABEL_26:
      unsigned int v22 = v15 - 1;
      unsigned int v23 = (v15 - 1) & ((v16 >> 4) ^ (v16 >> 9));
      unint64_t v24 = &v17[8 * v23];
      uint64_t v25 = *(void *)v24;
      if (*(void *)v24 == -1)
      {
        uint64_t v26 = 0;
LABEL_38:
        if (v26) {
          unint64_t v30 = v26;
        }
        else {
          unint64_t v30 = v24;
        }
        if (*(void *)v30 != v16)
        {
          if (*(void *)v30 == -2) {
            --v148;
          }
          else {
            ++HIDWORD(v147);
          }
          *(void *)unint64_t v30 = v16;
        }
      }
      else
      {
        uint64_t v26 = 0;
        int v27 = 1;
        while (v25 != v16)
        {
          if (v26) {
            BOOL v28 = 0;
          }
          else {
            BOOL v28 = v25 == -2;
          }
          if (v28) {
            uint64_t v26 = v24;
          }
          unsigned int v29 = v23 + v27++;
          unsigned int v23 = v29 & v22;
          unint64_t v24 = &v17[8 * (v29 & v22)];
          uint64_t v25 = *(void *)v24;
          if (*(void *)v24 == -1) {
            goto LABEL_38;
          }
        }
      }
      goto LABEL_45;
    }
    unint64_t v19 = 0;
    uint64_t v20 = 8 * HIDWORD(v147);
    int v21 = v146;
    while (*v21 != v16)
    {
      if (*v21 == -2) {
        unint64_t v19 = v21;
      }
      ++v21;
      v20 -= 8;
      if (!v20)
      {
        if (!v19) {
          goto LABEL_22;
        }
        *unint64_t v19 = v16;
        --v148;
        break;
      }
    }
LABEL_45:
    uint64_t v14 = *(void *)(v14 + 8);
  }
  while (v14);
  unsigned int v55 = v141;
  unsigned int v56 = HIDWORD(v142);
  if (v141 != v140)
  {
    unsigned int v57 = v142;
    int v3 = a3;
    goto LABEL_121;
  }
  uint64_t v13 = &v141[8 * HIDWORD(v142)];
  int v3 = a3;
  if (!HIDWORD(v142))
  {
LABEL_145:
    unsigned int v57 = v142;
    if (v56 < v142)
    {
      HIDWORD(v142) = v56 + 1;
      *(void *)uint64_t v13 = v137;
      goto LABEL_155;
    }
LABEL_121:
    if (3 * v57 <= 4 * (v56 - v143))
    {
      if (v57 >= 0x40) {
        v57 *= 2;
      }
      else {
        unsigned int v57 = 128;
      }
    }
    else if (v57 - v56 >= v57 >> 3)
    {
      goto LABEL_123;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v140, v57);
    unsigned int v57 = v142;
    unsigned int v55 = v141;
LABEL_123:
    unsigned int v58 = v57 - 1;
    unsigned int v59 = (v57 - 1) & ((v137 >> 4) ^ (v137 >> 9));
    unsigned int v60 = (llvm::BasicBlock **)&v55[8 * v59];
    unsigned int v61 = *v60;
    if (*v60 == (llvm::BasicBlock *)-1)
    {
      unsigned int v62 = 0;
LABEL_148:
      if (v62) {
        uint64_t v69 = v62;
      }
      else {
        uint64_t v69 = v60;
      }
      if (*v69 != v137)
      {
        if (*v69 == (llvm::BasicBlock *)-2) {
          --v143;
        }
        else {
          ++HIDWORD(v142);
        }
        *uint64_t v69 = v137;
      }
    }
    else
    {
      unsigned int v62 = 0;
      int v63 = 1;
      while (v61 != v137)
      {
        if (v62) {
          BOOL v64 = 0;
        }
        else {
          BOOL v64 = v61 == (llvm::BasicBlock *)-2;
        }
        if (v64) {
          unsigned int v62 = v60;
        }
        unsigned int v65 = v59 + v63++;
        unsigned int v59 = v65 & v58;
        unsigned int v60 = (llvm::BasicBlock **)&v55[8 * (v65 & v58)];
        unsigned int v61 = *v60;
        if (*v60 == (llvm::BasicBlock *)-1) {
          goto LABEL_148;
        }
      }
    }
    goto LABEL_155;
  }
  uint64_t v66 = 0;
  unsigned int v67 = 0;
  while (1)
  {
    unsigned int v68 = *(llvm::BasicBlock **)&v141[v66];
    if (v68 == v137) {
      break;
    }
    if (v68 == (llvm::BasicBlock *)-2) {
      unsigned int v67 = (llvm::BasicBlock **)&v141[v66];
    }
    v66 += 8;
    if (8 * HIDWORD(v142) == v66)
    {
      if (!v67) {
        goto LABEL_145;
      }
      *unsigned int v67 = v137;
      --v143;
      break;
    }
  }
LABEL_155:
  int v70 = 32;
  while (2)
  {
    if (v11 == v12)
    {
LABEL_268:
      Singleuint64_t Successor = llvm::BasicBlock::getSingleSuccessor(v137);
      if (!SingleSuccessor) {
        goto LABEL_316;
      }
      BOOL v114 = (llvm::BasicBlock *)SingleSuccessor;
      unsigned int v115 = v141;
      uint64_t v116 = HIDWORD(v142);
      if (v141 == v140)
      {
        if (HIDWORD(v142))
        {
          uint64_t v117 = 0;
          uint64_t v118 = 8 * HIDWORD(v142);
          unint64_t v119 = (uint64_t *)v141;
          while (*v119 != SingleSuccessor)
          {
            if (*v119 == -2) {
              uint64_t v117 = v119;
            }
            ++v119;
            v118 -= 8;
            if (!v118)
            {
              if (!v117) {
                goto LABEL_277;
              }
              *uint64_t v117 = SingleSuccessor;
              --v143;
              goto LABEL_301;
            }
          }
          goto LABEL_316;
        }
LABEL_277:
        unsigned int v120 = v142;
        if (HIDWORD(v142) < v142)
        {
          ++HIDWORD(v142);
          *(void *)&v141[8 * v116] = SingleSuccessor;
LABEL_301:
          int v12 = (void *)((char *)v114 + 40);
          uint64_t v137 = v114;
          for (unint64_t i = (void *)*((void *)v114 + 6); i != v12; unint64_t i = (void *)i[1])
          {
            uint64_t v131 = i - 3;
            if (i) {
              uint64_t v132 = i - 3;
            }
            else {
              uint64_t v132 = 0;
            }
            if (*((unsigned char *)v132 + 16) != 83) {
              goto LABEL_315;
            }
          }
          uint64_t v131 = 0;
LABEL_315:
          uint64_t v11 = v131 + 3;
          continue;
        }
      }
      else
      {
        unsigned int v120 = v142;
      }
      if (3 * v120 <= 4 * (HIDWORD(v142) - v143))
      {
        if (v120 >= 0x40) {
          v120 *= 2;
        }
        else {
          unsigned int v120 = 128;
        }
      }
      else if (v120 - HIDWORD(v142) >= v120 >> 3)
      {
LABEL_282:
        unsigned int v121 = v120 - 1;
        unsigned int v122 = (v120 - 1) & ((v114 >> 4) ^ (v114 >> 9));
        unint64_t v123 = &v115[8 * v122];
        uint64_t v124 = *(llvm::BasicBlock **)v123;
        if (*(void *)v123 != -1)
        {
          int v125 = 0;
          int v126 = 1;
          while (v124 != v114)
          {
            if (v125) {
              BOOL v127 = 0;
            }
            else {
              BOOL v127 = v124 == (llvm::BasicBlock *)-2;
            }
            if (v127) {
              int v125 = v123;
            }
            unsigned int v128 = v122 + v126++;
            unsigned int v122 = v128 & v121;
            unint64_t v123 = &v115[8 * (v128 & v121)];
            uint64_t v124 = *(llvm::BasicBlock **)v123;
            if (*(void *)v123 == -1) {
              goto LABEL_294;
            }
          }
LABEL_316:
          uint64_t v8 = 0;
          goto LABEL_318;
        }
        int v125 = 0;
LABEL_294:
        if (v125) {
          int v129 = (llvm::BasicBlock **)v125;
        }
        else {
          int v129 = (llvm::BasicBlock **)v123;
        }
        if (*v129 == v114) {
          goto LABEL_316;
        }
        if (*v129 == (llvm::BasicBlock *)-2) {
          --v143;
        }
        else {
          ++HIDWORD(v142);
        }
        *int v129 = v114;
        goto LABEL_301;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v140, v120);
      unsigned int v120 = v142;
      unsigned int v115 = v141;
      goto LABEL_282;
    }
    break;
  }
  int v134 = v12;
  while (1)
  {
    if (v11) {
      uint64_t v71 = (uint64_t)(v11 - 3);
    }
    else {
      uint64_t v71 = 0;
    }
    if (sub_1CBF63B28(v71)) {
      goto LABEL_227;
    }
    if (!--v70) {
      goto LABEL_316;
    }
    if (llvm::mustTriggerUB(v71, (uint64_t *)&v145, v3)) {
      break;
    }
    uint64_t v8 = 0;
    int v73 = *(unsigned __int8 *)(v71 + 16);
    if (v73 == 29 || v73 == 35) {
      goto LABEL_318;
    }
    if (v73 == 80)
    {
      uint64_t v110 = *(void *)(*(void *)(v71 + 40) + 56);
      int v111 = *(_DWORD *)(v110 + 20);
      if ((v111 & 0x40000000) != 0) {
        unsigned int v112 = *(llvm::Value ***)(v110 - 8);
      }
      else {
        unsigned int v112 = (llvm::Value **)(v110 - 32 * (v111 & 0x7FFFFFF));
      }
      int v3 = a3;
      if (llvm::classifyEHPersonality(*v112, v72) != 10) {
        goto LABEL_316;
      }
    }
    else
    {
      if (v11 && v73 == 84)
      {
        uint64_t v109 = *(void *)(v71 + 64);
        if ((!v109 || (*(unsigned char *)(v109 + 16) & 0x20) == 0)
          && !llvm::CallBase::hasFnAttrOnCalledFunction(v71, 37))
        {
          goto LABEL_316;
        }
      }
      else if (v11 && v73 == 36 || v11 && v73 == 38)
      {
        if ((*(_WORD *)(v71 + 18) & 1) == 0) {
          goto LABEL_316;
        }
      }
      else if (v73 == 34)
      {
        goto LABEL_316;
      }
      if (!llvm::Instruction::willReturn((llvm::Instruction *)v71)) {
        goto LABEL_316;
      }
    }
    int v74 = *(_DWORD *)(v71 + 20);
    int64_t v139 = v11;
    if ((v74 & 0x40000000) != 0)
    {
      BOOL v76 = *(uint64_t **)(v71 - 8);
      uint64_t v75 = v74 & 0x7FFFFFF;
      if (!v75) {
        goto LABEL_227;
      }
    }
    else
    {
      uint64_t v75 = v74 & 0x7FFFFFF;
      BOOL v76 = (uint64_t *)(v71 - 32 * v75);
      if (!v75) {
        goto LABEL_227;
      }
    }
    uint64_t v136 = v71;
    int v138 = v70;
    unsigned int v77 = &v76[4 * v75];
    uint64_t v78 = (uint64_t)v145;
    uint64_t v79 = v146;
    unsigned int v80 = v147;
    uint64_t v81 = HIDWORD(v147);
    int v82 = v147 - 1;
    unsigned int v83 = &v146[8 * v147];
    unsigned int v84 = &v146[8 * HIDWORD(v147)];
    uint64_t v85 = 8 * HIDWORD(v147);
    while (1)
    {
      uint64_t v86 = *v76;
      if (v79 == (void *)v78)
      {
        if (v81)
        {
          unint64_t v87 = 0;
          while (v79[v87 / 8] != v86)
          {
            v87 += 8;
            if (v85 == v87)
            {
              unsigned int v88 = v81;
              goto LABEL_198;
            }
          }
          unsigned int v97 = (char *)&v79[v87 / 8];
          unsigned int v88 = v81;
          unsigned int v98 = v79;
        }
        else
        {
          unsigned int v88 = 0;
LABEL_198:
          unsigned int v98 = v79;
          unsigned int v97 = v84;
        }
      }
      else
      {
        unsigned int v89 = v82 & ((v86 >> 4) ^ (v86 >> 9));
        BOOL v90 = (char *)&v79[v89];
        uint64_t v91 = *(void *)v90;
        if (*(void *)v90 == -1)
        {
          unsigned int v92 = 0;
LABEL_200:
          if (v92) {
            BOOL v90 = v92;
          }
          uint64_t v96 = *(void *)v90;
        }
        else
        {
          unsigned int v92 = 0;
          int v93 = 1;
          while (v91 != v86)
          {
            if (v92) {
              BOOL v94 = 0;
            }
            else {
              BOOL v94 = v91 == -2;
            }
            if (v94) {
              unsigned int v92 = v90;
            }
            unsigned int v95 = v89 + v93++;
            unsigned int v89 = v95 & v82;
            BOOL v90 = (char *)&v79[v95 & v82];
            uint64_t v91 = *(void *)v90;
            if (*(void *)v90 == -1) {
              goto LABEL_200;
            }
          }
          uint64_t v96 = *v76;
        }
        unsigned int v97 = v96 == v86 ? v90 : v83;
        unsigned int v88 = v81;
        unsigned int v98 = (void *)v78;
      }
      if (v79 != v98) {
        unsigned int v88 = v80;
      }
      if (v97 != (char *)&v79[v88] && llvm::propagatesPoison((uint64_t)v76)) {
        break;
      }
      v76 += 4;
      if (v76 == v77)
      {
        int v12 = v134;
        uint64_t v11 = v139;
LABEL_226:
        int v3 = a3;
        int v70 = v138;
        goto LABEL_227;
      }
    }
    uint64_t v11 = v139;
    if (v79 == (void *)v78)
    {
      if (v81)
      {
        unsigned int v99 = 0;
        uint64_t v100 = 8 * v81;
        int v101 = v79;
        while (*v101 != v136)
        {
          if (*v101 == -2) {
            unsigned int v99 = v101;
          }
          ++v101;
          v100 -= 8;
          if (!v100)
          {
            if (!v99) {
              goto LABEL_223;
            }
            *unsigned int v99 = v136;
            --v148;
            goto LABEL_225;
          }
        }
        goto LABEL_225;
      }
LABEL_223:
      if (v80 > v81)
      {
        HIDWORD(v147) = v81 + 1;
        *(void *)unsigned int v84 = v136;
LABEL_225:
        int v12 = v134;
        goto LABEL_226;
      }
    }
    if (3 * v80 <= 4 * ((int)v81 - v148))
    {
      if (v80 >= 0x40) {
        v80 *= 2;
      }
      else {
        unsigned int v80 = 128;
      }
      int v70 = v138;
LABEL_260:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v145, v80);
      uint64_t v79 = v146;
      int v82 = v147 - 1;
      goto LABEL_231;
    }
    int v70 = v138;
    if (v80 - v81 < v80 >> 3) {
      goto LABEL_260;
    }
LABEL_231:
    unsigned int v102 = v82 & ((v136 >> 4) ^ (v136 >> 9));
    unsigned int v103 = &v79[v102];
    uint64_t v104 = *v103;
    if (*v103 == -1)
    {
      uint64_t v105 = 0;
LABEL_247:
      if (v105) {
        unsigned int v103 = v105;
      }
      if (*v103 != v136)
      {
        int v12 = v134;
        int v3 = a3;
        if (*v103 == -2) {
          --v148;
        }
        else {
          ++HIDWORD(v147);
        }
        *unsigned int v103 = v136;
        goto LABEL_227;
      }
    }
    else
    {
      uint64_t v105 = 0;
      int v106 = 1;
      while (v104 != v136)
      {
        if (v105) {
          BOOL v107 = 0;
        }
        else {
          BOOL v107 = v104 == -2;
        }
        if (v107) {
          uint64_t v105 = v103;
        }
        unsigned int v108 = v102 + v106++;
        unsigned int v102 = v108 & v82;
        unsigned int v103 = &v79[v108 & v82];
        uint64_t v104 = *v103;
        if (*v103 == -1) {
          goto LABEL_247;
        }
      }
    }
    int v12 = v134;
    int v3 = a3;
LABEL_227:
    uint64_t v11 = (void *)v11[1];
    if (v11 == v12) {
      goto LABEL_268;
    }
  }
  uint64_t v8 = 1;
LABEL_318:
  if (v141 != v140) {
    free(v141);
  }
  if (v146 != v145) {
    free(v146);
  }
  return v8;
}

uint64_t llvm::programUndefinedIfPoison(llvm *this, const llvm::Instruction *a2)
{
  return sub_1CC16BAFC((uint64_t)this, 1, (int)a2);
}

BOOL llvm::isKnownNegation(llvm *this, const llvm::Value *a2, const llvm::Value *a3)
{
  if (a3)
  {
    unsigned int v41 = a2;
    if (sub_1CC185D70((uint64_t)&v40, (uint64_t)this)) {
      return 1;
    }
    unsigned int v41 = this;
    if (sub_1CC185D70((uint64_t)&v40, (uint64_t)a2)) {
      return 1;
    }
    unsigned int v17 = *((unsigned __int8 *)this + 16);
    if (v17 < 0x1C)
    {
      if (v17 != 5) {
        return 0;
      }
      unsigned int v23 = *((unsigned __int16 *)this + 9);
      HIDWORD(v27) = v23 - 13;
      LODWORD(v27) = v23 - 13;
      unsigned int v26 = v27 >> 1;
      BOOL v20 = v26 > 6;
      int v28 = (1 << v26) & 0x47;
      if (v20 || v28 == 0) {
        return 0;
      }
    }
    else
    {
      HIDWORD(v19) = v17 - 41;
      LODWORD(v19) = v17 - 41;
      unsigned int v18 = v19 >> 1;
      BOOL v20 = v18 > 6;
      int v21 = (1 << v18) & 0x47;
      if (v20 || v21 == 0) {
        return 0;
      }
      unsigned int v23 = v17 - 28;
    }
    if (v23 != 15 || (*((unsigned char *)this + 17) & 4) == 0) {
      return 0;
    }
    int v24 = *((_DWORD *)this + 5);
    uint64_t v25 = (v24 & 0x40000000) != 0 ? (llvm *)*((void *)this - 1) : (llvm *)((char *)this - 32 * (v24 & 0x7FFFFFF));
    uint64_t v30 = *(void *)v25;
    if (!*(void *)v25) {
      return 0;
    }
    uint64_t v31 = *((void *)v25 + 4);
    if (!v31) {
      return 0;
    }
    unsigned int v32 = *((unsigned __int8 *)a2 + 16);
    if (v32 < 0x1C)
    {
      if (v32 != 5) {
        return 0;
      }
      BOOL result = 0;
      unsigned int v35 = *((unsigned __int16 *)a2 + 9);
      HIDWORD(v39) = v35 - 13;
      LODWORD(v39) = v35 - 13;
      unsigned int v38 = v39 >> 1;
      if (v38 > 6 || ((1 << v38) & 0x47) == 0) {
        return result;
      }
    }
    else
    {
      BOOL result = 0;
      HIDWORD(v34) = v32 - 41;
      LODWORD(v34) = v32 - 41;
      unsigned int v33 = v34 >> 1;
      if (v33 > 6 || ((1 << v33) & 0x47) == 0) {
        return result;
      }
      unsigned int v35 = v32 - 28;
    }
    if (v35 == 15 && (*((unsigned char *)a2 + 17) & 4) != 0)
    {
      int v36 = *((_DWORD *)a2 + 5);
      int v37 = (v36 & 0x40000000) != 0
          ? (const llvm::Value *)*((void *)a2 - 1)
          : (const llvm::Value *)((char *)a2 - 32 * (v36 & 0x7FFFFFF));
      if (*(void *)v37 == v31) {
        return *((void *)v37 + 4) == v30;
      }
    }
    return 0;
  }
  int v43 = a2;
  int v6 = *((unsigned __int8 *)this + 16);
  if (v6 == 5)
  {
    if (*((_WORD *)this + 9) != 15
      || !sub_1CC03F414((uint64_t)v42, *((llvm::Constant **)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))))
    {
      goto LABEL_7;
    }
    uint64_t v7 = (llvm *)((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[4];
  }
  else
  {
    if (v6 != 43 || !sub_1CBF535C4((uint64_t)v42, *((llvm::Constant **)this - 8))) {
      goto LABEL_7;
    }
    uint64_t v7 = (llvm *)*((void *)this - 4);
  }
  if (v43 == v7) {
    return 1;
  }
LABEL_7:
  int v43 = this;
  int v8 = *((unsigned __int8 *)a2 + 16);
  if (v8 == 5)
  {
    if (*((_WORD *)a2 + 9) != 15
      || !sub_1CC03F414((uint64_t)v42, *((llvm::Constant **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))))
    {
      goto LABEL_12;
    }
    uint64_t v9 = (llvm *)((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
  }
  else
  {
    if (v8 != 43 || !sub_1CBF535C4((uint64_t)v42, *((llvm::Constant **)a2 - 8))) {
      goto LABEL_12;
    }
    uint64_t v9 = (llvm *)*((void *)a2 - 4);
  }
  if (v43 == v9) {
    return 1;
  }
LABEL_12:
  int v10 = *((unsigned __int8 *)this + 16);
  if (v10 == 5)
  {
    if (*((_WORD *)this + 9) != 15) {
      return 0;
    }
    uint64_t v14 = (uint64_t *)((char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
    uint64_t v11 = *v14;
    if (!*v14) {
      return 0;
    }
    uint64_t v12 = v14[4];
    if (!v12) {
      return 0;
    }
  }
  else
  {
    if (v10 != 43) {
      return 0;
    }
    uint64_t v11 = *((void *)this - 8);
    if (!v11) {
      return 0;
    }
    uint64_t v12 = *((void *)this - 4);
    if (!v12) {
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a2 + 16);
  if (v15 == 43) {
    return v12 == *((void *)a2 - 8) && v11 == *((void *)a2 - 4);
  }
  if (v15 == 5)
  {
    BOOL v3 = 0;
    if (*((_WORD *)a2 + 9) == 15)
    {
      uint64_t v16 = (void *)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
      if (v12 == *v16 && v11 == v16[4]) {
        BOOL v3 = 1;
      }
    }
  }
  return (v15 == 5) & v3;
}

unint64_t llvm::matchSelectPattern(uint64_t a1, uint64_t a2, void *a3, llvm::Type *a4, unsigned int a5)
{
  if (a5 <= 5)
  {
    uint64_t v5 = 0;
    if (a1)
    {
      unint64_t v6 = 0;
      if (*(unsigned char *)(a1 + 16) == 85)
      {
        uint64_t v5 = 0;
        uint64_t v7 = *(void *)(a1 - 96);
        if (v7)
        {
          unsigned int v8 = *(unsigned __int8 *)(v7 + 16);
          BOOL v9 = v8 >= 0x1C && v8 - 83 >= 0xFFFFFFFE;
          unint64_t v6 = 0;
          if (v9)
          {
            unint64_t matched = llvm::matchDecomposedSelectPattern(*(void *)(a1 - 96), *(unsigned __int8 **)(a1 - 64), *(unsigned __int8 **)(a1 - 32), a2, a3, a4, a5);
            unint64_t v6 = matched & 0xFFFFFFFF00000000;
            uint64_t v5 = matched;
          }
        }
        else
        {
          unint64_t v6 = 0;
        }
      }
    }
    else
    {
      unint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
  }
  return v6 | v5;
}

unint64_t llvm::matchDecomposedSelectPattern(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, void *a5, llvm::Type *a6, int a7)
{
  __int16 v13 = *(_WORD *)(a1 + 18);
  uint64_t v14 = *(llvm::ConstantDataSequential **)(a1 - 64);
  int v15 = *(llvm::Constant **)(a1 - 32);
  BOOL v16 = sub_1CB845E74(a1);
  if (v16)
  {
    if (*(unsigned __int8 *)(a1 + 17) >> 1 == 127) {
      LOBYTE(v17) = -1;
    }
    else {
      int v17 = *(unsigned __int8 *)(a1 + 17) >> 1;
    }
  }
  else
  {
    LOBYTE(v17) = 0;
  }
  unsigned int v18 = *(_WORD *)(a1 + 18) & 0x3F;
  if (v18 - 32 >= 0xA)
  {
    BOOL v21 = v18 > 0xE;
    int v22 = (1 << v18) & 0x4242;
    if (!v21 && v22 != 0) {
      goto LABEL_5;
    }
LABEL_14:
    unint64_t v24 = v13 & 0x3F;
    if (v16 && (uint64_t v33 = *(void *)(*(void *)(a1 + 40) + 56)) != 0)
    {
      unsigned int v39 = v13 & 0x3F;
      uint64_t v34 = *(void *)(v33 + 40);
      if (*(char *)(v34 + 239) < 0) {
        sub_1CB8BDF7C((uint64_t)&v42, *(const void **)(v34 + 216), *(void *)(v34 + 224));
      }
      else {
        std::string v42 = *(std::string *)(v34 + 216);
      }
      if (!std::string::compare(&v42, 0, 4uLL, "agx1"))
      {
        unsigned int v35 = -2;
      }
      else if (!std::string::compare(&v42, 0, 4uLL, "agx2"))
      {
        unsigned int v35 = -1;
      }
      else if (!std::string::compare(&v42, 0, 4uLL, "agx3"))
      {
        unsigned int v35 = 0;
      }
      else
      {
        unsigned int v35 = -29;
      }
      unint64_t v24 = v39;
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v42.__r_.__value_.__l.__data_);
        unint64_t v24 = v39;
      }
      BOOL v25 = v35 < 0xFFFFFFFE;
      if (!a6) {
        goto LABEL_16;
      }
    }
    else
    {
      BOOL v25 = 1;
      if (!a6) {
        goto LABEL_16;
      }
    }
    if (*(void *)v14 != *(void *)a2)
    {
      unsigned int v40 = v24;
      int v36 = sub_1CC16CE24(a1, (uint64_t)a2, a3, a6);
      if (v36)
      {
        uint64_t v31 = (llvm::Value *)v36;
        if ((*(_DWORD *)a6 - 41) >= 2) {
          char v26 = v17;
        }
        else {
          char v26 = v17 | 8;
        }
        uint64_t v30 = (llvm *)*((void *)a2 - 4);
        void v38[4] = v25;
        *(_DWORD *)unsigned int v38 = a7;
        unint64_t v27 = v40;
        goto LABEL_42;
      }
      int v37 = sub_1CC16CE24(a1, (uint64_t)a3, a2, a6);
      unint64_t v24 = v40;
      if (v37)
      {
        uint64_t v30 = (llvm *)v37;
        if ((*(_DWORD *)a6 - 41) >= 2) {
          char v26 = v17;
        }
        else {
          char v26 = v17 | 8;
        }
        uint64_t v31 = (llvm::Value *)*((void *)a3 - 4);
        void v38[4] = v25;
        *(_DWORD *)unsigned int v38 = a7;
        unint64_t v27 = v40;
LABEL_42:
        int v28 = v14;
        unsigned int v29 = v15;
        goto LABEL_17;
      }
    }
LABEL_16:
    char v26 = v17;
    void v38[4] = v25;
    *(_DWORD *)unsigned int v38 = a7;
    unint64_t v27 = v24;
    int v28 = v14;
    unsigned int v29 = v15;
    uint64_t v30 = (llvm *)a2;
    uint64_t v31 = (llvm::Value *)a3;
LABEL_17:
    uint64_t v19 = sub_1CC16D004((uint64_t *)v27, v26, v28, v29, v30, v31, a4, a5, *(int *)v38, v38[4]);
    unint64_t v20 = v19 & 0xFFFFFFFF00000000;
    return v20 | v19;
  }
  if ((*(_WORD *)(a1 + 18) & 0x3E) != 0x20) {
    goto LABEL_14;
  }
LABEL_5:
  LODWORD(v19) = 0;
  unint64_t v20 = 0;
  return v20 | v19;
}

unsigned __int8 *sub_1CC16CE24(uint64_t a1, uint64_t a2, unsigned __int8 *a3, llvm::Type *a4)
{
  uint64_t v4 = 0;
  if (!a2) {
    return (unsigned __int8 *)v4;
  }
  unsigned int v6 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v7 = (llvm::ConstantExpr *)(v6 - 28);
  if (v6 < 0x1C || v6 - 79 < 0xFFFFFFF3) {
    return (unsigned __int8 *)v4;
  }
  *(_DWORD *)a4 = v7;
  uint64_t v11 = **(llvm::Type *****)(a2 - 32);
  unsigned int v12 = a3[16];
  if (a3)
  {
    if (v12 >= 0x1C && v12 - 79 >= 0xFFFFFFF3)
    {
      if (v6 == v12)
      {
        if (v11 == **((llvm::Type *****)a3 - 4)) {
          return (unsigned __int8 *)*((void *)a3 - 4);
        }
        else {
          return 0;
        }
      }
      return 0;
    }
  }
  uint64_t v4 = 0;
  if (!a3 || v12 > 0x14) {
    return (unsigned __int8 *)v4;
  }
  switch(v6)
  {
    case 'B':
      uint64_t v14 = *(unsigned __int8 **)(a1 - 32);
      if (v14 && v14[16] <= 0x14u && *(llvm::Type ****)v14 == v11) {
        goto LABEL_37;
      }
      IntegerCast = llvm::ConstantExpr::getIntegerCast((llvm::ConstantExpr *)a3, v11, (llvm::Type *)((*(_WORD *)(a1 + 18) & 0x3Eu) - 38 < 4));
      break;
    case 'C':
      if ((*(_WORD *)(a1 + 18) & 0x3Eu) - 34 > 3) {
        return 0;
      }
      IntegerCast = sub_1CC56C0C0((llvm *)0x26, (llvm::detail::IEEEFloat *)a3, (llvm::Constant *)v11, 0);
      break;
    case 'D':
      if ((*(_WORD *)(a1 + 18) & 0x3Eu) - 38 > 3) {
        return 0;
      }
      uint64_t v16 = 38;
      goto LABEL_34;
    case 'E':
      uint64_t v16 = 43;
      goto LABEL_34;
    case 'F':
      uint64_t v16 = 44;
      goto LABEL_34;
    case 'G':
      uint64_t v16 = 41;
      goto LABEL_34;
    case 'H':
      uint64_t v16 = 42;
      goto LABEL_34;
    case 'I':
      uint64_t v16 = 46;
      goto LABEL_34;
    case 'J':
      uint64_t v16 = 45;
LABEL_34:
      IntegerCast = llvm::ConstantFoldCastInstruction((llvm *)v16, (llvm::detail::IEEEFloat *)a3, (llvm::Constant *)v11, a4);
      break;
    default:
      return 0;
  }
  uint64_t v14 = (unsigned __int8 *)IntegerCast;
  if (!IntegerCast) {
    return 0;
  }
  uint64_t v7 = (llvm::ConstantExpr *)*(unsigned int *)a4;
LABEL_37:
  if (llvm::ConstantExpr::getCast(v7, (llvm::ConstantExpr *)v14, *(llvm::Constant ****)a3, (llvm::Type *)1) == (llvm::ConstantExpr *)a3) {
    return v14;
  }
  else {
    return 0;
  }
}

uint64_t sub_1CC16D004(uint64_t *a1, char a2, llvm::ConstantDataSequential *this, llvm::Constant *a4, llvm *a5, llvm::Value *a6, uint64_t a7, void *a8, int a9, unsigned __int8 a10)
{
  int v17 = a1;
  if (a1 <= 0xF)
  {
    if (sub_1CC0241FC((uint64_t)&v329, a5)
      && !sub_1CC0241FC((uint64_t)&v335, a6)
      && (unsigned int v18 = a5, (llvm::Constant::containsUndefOrPoisonElement(a5) & 1) == 0)
      || sub_1CC0241FC((uint64_t)&v329, a6)
      && !sub_1CC0241FC((uint64_t)&v335, a5)
      && (unsigned int v18 = a6, (llvm::Constant::containsUndefOrPoisonElement(a6) & 1) == 0))
    {
      if (v18)
      {
        if (sub_1CC0241FC((uint64_t)&v329, this)) {
          this = v18;
        }
        if (sub_1CC0241FC((uint64_t)&v329, a4)) {
          a4 = v18;
        }
      }
    }
  }
  *(void *)a7 = this;
  *a8 = a4;
  HIDWORD(v20) = v17 - 3;
  LODWORD(v20) = v17 - 3;
  unsigned int v19 = v20 >> 1;
  BOOL v21 = v19 > 5;
  int v22 = (1 << v19) & 0x33;
  BOOL v23 = v21 || v22 == 0;
  if (!v23 && (a2 & 8) == 0 && !sub_1CC184A78(this) && !sub_1CC184A78(a4)) {
    goto LABEL_550;
  }
  LODWORD(v24) = a10;
  char v313 = a2;
  BOOL v25 = a5;
  char v26 = a6;
  BOOL v27 = sub_1CC184C04(this, a2);
  BOOL v28 = sub_1CC184C04(a4, a2);
  if (v27 && v28 && (a10 & 1) != 0)
  {
    uint64_t v29 = 3;
    goto LABEL_38;
  }
  if ((v17 - 1) > 6)
  {
    if (v27)
    {
      if (a10) {
        uint64_t v29 = 2;
      }
      else {
        uint64_t v29 = 1;
      }
      goto LABEL_38;
    }
    if (!v28) {
      goto LABEL_550;
    }
    goto LABEL_37;
  }
  if (v27)
  {
LABEL_37:
    uint64_t v29 = 1;
    goto LABEL_38;
  }
  if (!v28) {
    goto LABEL_550;
  }
  if (a10) {
    uint64_t v29 = 2;
  }
  else {
    uint64_t v29 = 1;
  }
LABEL_38:
  uint64_t v30 = (uint64_t)v26;
  uint64_t v31 = v25;
  while (2)
  {
    if (a4 == v31 && this == (llvm::ConstantDataSequential *)v30)
    {
      int v17 = (uint64_t *)dword_1CFAC48C8[(int)v17];
      if (v24)
      {
        if (v29 == 1)
        {
          uint64_t v29 = 2;
        }
        else if (v29 == 2)
        {
          uint64_t v29 = 1;
        }
        else
        {
          uint64_t v29 = v29;
        }
      }
      a4 = (llvm::Constant *)v30;
      this = v31;
    }
    if (this != v31 || a4 != (llvm::Constant *)v30)
    {
      if (!llvm::isKnownNegation(v31, (const llvm::Value *)v30, 0)) {
        goto LABEL_105;
      }
      uint64_t v24 = v30;
      v329 = (llvm::APInt **)this;
      v330 = (llvm::APInt **)this;
      if (this == v31 || sub_1CC184DAC(&v330, (uint64_t)v31))
      {
        *(void *)a7 = v31;
        *a8 = v30;
        uint64_t v336 = v30;
        int v34 = *((unsigned __int8 *)this + 16);
        if (v34 == 5)
        {
          if (*((_WORD *)this + 9) == 15
            && sub_1CC03F414((uint64_t)&v335, *((llvm::Constant **)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))))
          {
            uint64_t v35 = ((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[4];
LABEL_74:
            if (v336 == v35)
            {
              uint64_t v38 = *(void *)a7;
              *(void *)a7 = *a8;
              *a8 = v38;
            }
          }
        }
        else if (v34 == 43 && sub_1CBF535C4((uint64_t)&v335, *((llvm::Constant **)this - 8)))
        {
          uint64_t v35 = *((void *)this - 4);
          goto LABEL_74;
        }
        unsigned int v39 = a4;
        switch(v17)
        {
          case '(':
            char v42 = sub_1CBF535C4((uint64_t)&v339, a4);
            if (v42) {
              goto LABEL_100;
            }
            char v43 = sub_1CBF5250C((uint64_t)&v339 + 1, a4);
LABEL_99:
            a4 = v39;
            if (v43) {
              goto LABEL_100;
            }
            break;
          case '\'':
            char v41 = sub_1CBF535C4((uint64_t)&v339, a4);
            if (v41) {
              goto LABEL_103;
            }
            char v40 = sub_1CBF5250C((uint64_t)&v339 + 1, a4);
LABEL_85:
            if ((v40 & 1) == 0) {
              break;
            }
LABEL_103:
            uint64_t v33 = 7;
            goto LABEL_551;
          case '&':
            if (sub_1CBF535C4((uint64_t)&v340, a4)) {
              goto LABEL_103;
            }
            char v40 = sub_1CBF687D0((uint64_t)&v340 + 1, a4);
            goto LABEL_85;
        }
LABEL_104:
        uint64_t v30 = v24;
LABEL_105:
        *(void *)a7 = v31;
        *a8 = v30;
        a7 = v30;
        unsigned int v46 = v31;
        LODWORD(a8) = v17;
        if (a4 != v31)
        {
          a7 = (uint64_t)v31;
          unsigned int v46 = (llvm::Constant *)v30;
          a8 = v17;
          switch((int)v17)
          {
            case ' ':
            case '!':
              break;
            case '""':
              LODWORD(a8) = 36;
              goto LABEL_129;
            case '#':
              LODWORD(a8) = 37;
              goto LABEL_129;
            case '$':
              LODWORD(a8) = 34;
              goto LABEL_129;
            case '%':
              LODWORD(a8) = 35;
              goto LABEL_129;
            case '&':
              LODWORD(a8) = 40;
              goto LABEL_129;
            case '\'':
              LODWORD(a8) = 41;
              goto LABEL_129;
            case '(':
              LODWORD(a8) = 38;
              goto LABEL_129;
            case ')':
              LODWORD(a8) = 39;
LABEL_129:
              a7 = (uint64_t)v31;
              unsigned int v46 = (llvm::Constant *)v30;
              break;
            default:
              if (v29 != 3 || (v313 & 8) == 0 && !sub_1CC184A78(this) && !sub_1CC184A78(a4)) {
                goto LABEL_550;
              }
              if (a4 == (llvm::Constant *)v30)
              {
                int v47 = (llvm::Constant *)v30;
                uint64_t v30 = 14;
                uint64_t v48 = (uint64_t)v31;
                switch((int)v17)
                {
                  case 0:
                    LODWORD(v30) = 15;
                    goto LABEL_462;
                  case 1:
                    goto LABEL_463;
                  case 2:
                    LODWORD(v30) = 13;
                    goto LABEL_462;
                  case 3:
                    LODWORD(v30) = 12;
                    goto LABEL_462;
                  case 4:
                    LODWORD(v30) = 11;
                    goto LABEL_462;
                  case 5:
                    LODWORD(v30) = 10;
                    goto LABEL_462;
                  case 6:
                    LODWORD(v30) = 9;
                    goto LABEL_462;
                  case 7:
                    LODWORD(v30) = 8;
                    goto LABEL_462;
                  case 8:
                    LODWORD(v30) = 7;
                    goto LABEL_462;
                  case 9:
                    LODWORD(v30) = 6;
                    goto LABEL_462;
                  case 10:
                    LODWORD(v30) = 5;
                    goto LABEL_462;
                  case 11:
                    LODWORD(v30) = 4;
                    goto LABEL_462;
                  case 12:
                    LODWORD(v30) = 3;
                    goto LABEL_462;
                  case 13:
                    LODWORD(v30) = 2;
                    goto LABEL_462;
                  case 14:
                    LODWORD(v30) = 1;
                    goto LABEL_462;
                  case 15:
                    LODWORD(v30) = 0;
LABEL_462:
                    uint64_t v48 = (uint64_t)v31;
                    goto LABEL_463;
                  default:
                    uint64_t v29 = 0;
                    continue;
                }
              }
              uint64_t v48 = v30;
              int v47 = v31;
              LODWORD(v30) = v17;
LABEL_463:
              *(void *)uint64_t v31 = v47;
              *int v17 = v48;
              v335 = 0;
              if (v47 != a4) {
                goto LABEL_550;
              }
              v329 = (llvm::APInt **)&v335;
              v330 = 0;
              if (!sub_1CC04AFFC((uint64_t)&v329, (unsigned __int8 *)a4)) {
                goto LABEL_550;
              }
              unint64_t v210 = v335;
              if (v335[1] == (llvm::APInt *)&unk_1CFB2E344) {
                unint64_t v210 = (llvm::APInt **)v335[2];
              }
              if ((*((unsigned char *)v210 + 28) & 7u) < 2) {
                goto LABEL_550;
              }
              v340 = 0;
              if (v30 > 0xD) {
                goto LABEL_550;
              }
              if (((1 << v30) & 0xC0C) == 0)
              {
                if (((1 << v30) & 0x3030) == 0) {
                  goto LABEL_550;
                }
                v329 = (llvm::APInt **)this;
                v330 = &v340;
                uint64_t v331 = 0;
                v332 = this;
                v333 = &v340;
                uint64_t v334 = 0;
                if (*(unsigned char *)(v48 + 16) != 85) {
                  goto LABEL_550;
                }
                uint64_t v211 = *(void *)(v48 - 96);
                if (v211 && *(unsigned char *)(v211 + 16) == 82)
                {
                  if ((v212 = *(llvm::ConstantDataSequential **)(v48 - 64),
                        int v213 = *(unsigned __int8 **)(v48 - 32),
                        uint64_t v214 = *(llvm::ConstantDataSequential **)(v211 - 64),
                        int v215 = *(unsigned __int8 **)(v211 - 32),
                        v212 == v214)
                    && v213 == v215
                    || v212 == (llvm::ConstantDataSequential *)v215 && v213 == (unsigned __int8 *)v214)
                  {
                    int v216 = *(_WORD *)(v211 + 18) & 0x3E;
                    if (v212 == v214)
                    {
                      if (v216 != 4) {
                        goto LABEL_494;
                      }
                    }
                    else if (v216 != 10)
                    {
                      goto LABEL_494;
                    }
                    if (this == v214)
                    {
                      char v241 = sub_1CC04AFFC((uint64_t)&v330, v215);
                      if (v241)
                      {
LABEL_529:
                        int v242 = v335;
                        int v243 = (llvm::detail::IEEEFloat *)(v335 + 1);
                        int v244 = (llvm::APInt *)((char *)v340 + 8);
                        if (v335[1] != (llvm::APInt *)&unk_1CFB2E344)
                        {
                          unsigned int v245 = *((unsigned __int8 *)v335 + 28);
                          unsigned int v246 = *((unsigned __int8 *)v340 + 28);
                          switch(4 * (v245 & 7) + (v246 & 7))
                          {
                            case 1u:
                            case 4u:
                            case 5u:
                            case 6u:
                            case 7u:
                            case 9u:
                            case 0xDu:
                            case 0xFu:
                              goto LABEL_550;
                            case 2u:
                            case 3u:
                            case 0xBu:
                              int v297 = ~(v245 >> 2) & 2;
                              goto LABEL_549;
                            case 8u:
                            case 0xCu:
                            case 0xEu:
                              int v297 = (v246 >> 2) & 2;
                              goto LABEL_549;
                            case 0xAu:
                              int v250 = (v245 >> 3) & 1;
                              if (v250 != ((v246 >> 3) & 1)) {
                                goto LABEL_612;
                              }
                              int v297 = llvm::detail::IEEEFloat::compareAbsoluteValue(v243, v244);
                              if ((*((unsigned char *)v242 + 28) & 8) == 0) {
                                goto LABEL_549;
                              }
                              if (v297 == 2) {
                                goto LABEL_604;
                              }
                              goto LABEL_550;
                            default:
                              int v250 = (v245 >> 3) & 1;
                              if (v250 == ((v246 >> 3) & 1)) {
                                goto LABEL_550;
                              }
LABEL_612:
                              int v297 = (2 * v250) ^ 2;
                              goto LABEL_549;
                          }
                        }
                        int v297 = llvm::detail::DoubleAPFloat::compare(v243, v244);
LABEL_549:
                        if (!v297)
                        {
LABEL_604:
                          uint64_t v32 = 3;
                          uint64_t v33 = 6;
                          return v33 | (v32 << 32);
                        }
                        goto LABEL_550;
                      }
                      if (*(unsigned char *)(v48 + 16) != 85) {
                        goto LABEL_550;
                      }
                    }
                  }
                }
LABEL_494:
                uint64_t v223 = *(void *)(v48 - 96);
                if (!v223 || *(unsigned char *)(v223 + 16) != 82) {
                  goto LABEL_550;
                }
                uint64_t v224 = *(unsigned __int8 **)(v48 - 64);
                unint64_t v225 = *(unsigned __int8 **)(v48 - 32);
                unint64_t v226 = *(llvm::ConstantDataSequential **)(v223 - 64);
                unint64_t v227 = *(unsigned __int8 **)(v223 - 32);
                if ((v224 != (unsigned __int8 *)v226 || v225 != v227)
                  && (v224 != v227 || v225 != (unsigned __int8 *)v226))
                {
                  goto LABEL_550;
                }
                int v228 = *(_WORD *)(v223 + 18) & 0x3E;
                if (v224 == (unsigned __int8 *)v226)
                {
                  if (v228 != 12) {
                    goto LABEL_550;
                  }
                }
                else if (v228 != 2)
                {
                  goto LABEL_550;
                }
                if (v332 != v226 || !sub_1CC04AFFC((uint64_t)&v333, v227)) {
                  goto LABEL_550;
                }
                goto LABEL_529;
              }
              v329 = (llvm::APInt **)this;
              v330 = &v340;
              uint64_t v331 = 0;
              v332 = this;
              v333 = &v340;
              uint64_t v334 = 0;
              if (*(unsigned char *)(v48 + 16) != 85) {
                goto LABEL_550;
              }
              uint64_t v217 = *(void *)(v48 - 96);
              if (!v217 || *(unsigned char *)(v217 + 16) != 82) {
                goto LABEL_506;
              }
              unint64_t v218 = *(llvm::ConstantDataSequential **)(v48 - 64);
              unsigned int v219 = *(unsigned __int8 **)(v48 - 32);
              unsigned int v220 = *(llvm::ConstantDataSequential **)(v217 - 64);
              uint64_t v221 = *(unsigned __int8 **)(v217 - 32);
              if ((v218 != v220 || v219 != v221)
                && (v218 != (llvm::ConstantDataSequential *)v221 || v219 != (unsigned __int8 *)v220))
              {
                goto LABEL_506;
              }
              int v222 = *(_WORD *)(v217 + 18) & 0x3E;
              if (v218 == v220)
              {
                if (v222 != 2) {
                  goto LABEL_506;
                }
              }
              else if (v222 != 12)
              {
                goto LABEL_506;
              }
              if (this == v220)
              {
                char v235 = sub_1CC04AFFC((uint64_t)&v330, v221);
                if (v235)
                {
LABEL_524:
                  uint64_t v236 = v335;
                  uint64_t v237 = (llvm::detail::IEEEFloat *)(v335 + 1);
                  int v238 = (llvm::APInt *)((char *)v340 + 8);
                  if (v335[1] != (llvm::APInt *)&unk_1CFB2E344)
                  {
                    unsigned int v239 = *((unsigned __int8 *)v335 + 28);
                    unsigned int v240 = *((unsigned __int8 *)v340 + 28);
                    switch(4 * (v239 & 7) + (v240 & 7))
                    {
                      case 1u:
                      case 4u:
                      case 5u:
                      case 6u:
                      case 7u:
                      case 9u:
                      case 0xDu:
                      case 0xFu:
                        goto LABEL_550;
                      case 2u:
                      case 3u:
                      case 0xBu:
                        int v296 = ~(v239 >> 2) & 2;
                        goto LABEL_545;
                      case 8u:
                      case 0xCu:
                      case 0xEu:
                        int v296 = (v240 >> 2) & 2;
                        goto LABEL_545;
                      case 0xAu:
                        int v249 = (v239 >> 3) & 1;
                        if (v249 != ((v240 >> 3) & 1)) {
                          goto LABEL_610;
                        }
                        int v296 = llvm::detail::IEEEFloat::compareAbsoluteValue(v237, v238);
                        if ((*((unsigned char *)v236 + 28) & 8) == 0) {
                          goto LABEL_545;
                        }
                        if (!v296) {
                          goto LABEL_546;
                        }
                        goto LABEL_550;
                      default:
                        int v249 = (v239 >> 3) & 1;
                        if (v249 == ((v240 >> 3) & 1)) {
                          goto LABEL_550;
                        }
LABEL_610:
                        int v296 = (2 * v249) ^ 2;
                        goto LABEL_545;
                    }
                  }
                  int v296 = llvm::detail::DoubleAPFloat::compare(v237, v238);
LABEL_545:
                  if (v296 == 2)
                  {
LABEL_546:
                    uint64_t v32 = 3;
                    uint64_t v33 = 5;
                    return v33 | (v32 << 32);
                  }
                  goto LABEL_550;
                }
                if (*(unsigned char *)(v48 + 16) != 85) {
                  goto LABEL_550;
                }
              }
LABEL_506:
              uint64_t v229 = *(void *)(v48 - 96);
              if (!v229 || *(unsigned char *)(v229 + 16) != 82) {
                goto LABEL_550;
              }
              uint64_t v230 = *(unsigned __int8 **)(v48 - 64);
              uint64_t v231 = *(unsigned __int8 **)(v48 - 32);
              uint64_t v232 = *(llvm::ConstantDataSequential **)(v229 - 64);
              uint64_t v233 = *(unsigned __int8 **)(v229 - 32);
              if ((v230 != (unsigned __int8 *)v232 || v231 != v233)
                && (v230 != v233 || v231 != (unsigned __int8 *)v232))
              {
                goto LABEL_550;
              }
              int v234 = *(_WORD *)(v229 + 18) & 0x3E;
              if (v230 == (unsigned __int8 *)v232)
              {
                if (v234 != 10) {
                  goto LABEL_550;
                }
              }
              else if (v234 != 4)
              {
                goto LABEL_550;
              }
              if (v332 != v232 || !sub_1CC04AFFC((uint64_t)&v333, v233)) {
                goto LABEL_550;
              }
              goto LABEL_524;
          }
        }
        v335 = 0;
        if (v46 != a4) {
          goto LABEL_241;
        }
        v329 = (llvm::APInt **)&v335;
        v330 = 0;
        if (!sub_1CBF528D8((uint64_t)&v329, (unsigned __int8 *)a4)) {
          goto LABEL_241;
        }
        v340 = 0;
        v329 = (llvm::APInt **)this;
        v330 = &v340;
        uint64_t v331 = 0;
        int v49 = *(unsigned __int8 *)(a7 + 16);
        if (v49 == 85)
        {
          uint64_t v52 = *(void *)(a7 - 96);
          if (!v52 || *(unsigned char *)(v52 + 16) != 81) {
            goto LABEL_154;
          }
          int v53 = *(llvm::ConstantDataSequential **)(a7 - 64);
          unint64_t v54 = *(unsigned __int8 **)(a7 - 32);
          unsigned int v55 = *(llvm::ConstantDataSequential **)(v52 - 64);
          unsigned int v56 = *(unsigned __int8 **)(v52 - 32);
          if ((v53 != v55 || v54 != v56)
            && (v53 != (llvm::ConstantDataSequential *)v56 || v54 != (unsigned __int8 *)v55))
          {
            goto LABEL_154;
          }
          int v57 = *(_WORD *)(v52 + 18) & 0x3E;
          if (v53 == v55)
          {
            if (v57 != 40) {
              goto LABEL_154;
            }
          }
          else if (v57 != 38)
          {
            goto LABEL_154;
          }
          if (this != v55) {
            goto LABEL_154;
          }
          if (!sub_1CBF528D8((uint64_t)&v330, v56)) {
            goto LABEL_154;
          }
        }
        else
        {
          if (v49 != 84) {
            goto LABEL_154;
          }
          uint64_t v50 = *(void *)(a7 - 32);
          if (!v50) {
            goto LABEL_154;
          }
          if (*(unsigned char *)(v50 + 16)) {
            goto LABEL_154;
          }
          if (*(void *)(v50 + 24) != *(void *)(a7 + 72)) {
            goto LABEL_154;
          }
          if ((*(unsigned char *)(v50 + 33) & 0x20) == 0) {
            goto LABEL_154;
          }
          if (*(_DWORD *)(v50 + 36) != 275) {
            goto LABEL_154;
          }
          uint64_t v51 = a7 - 32 * (*(_DWORD *)(a7 + 20) & 0x7FFFFFF);
          if (this != *(llvm::ConstantDataSequential **)v51
            || (sub_1CBF528D8((uint64_t)&v330, *(unsigned __int8 **)(v51 + 32)) & 1) == 0)
          {
            goto LABEL_154;
          }
        }
        int v148 = v340;
        uint64_t v149 = *((unsigned int *)v335 + 2);
        if (v149 > 0x40)
        {
          int v264 = (int)v17;
          int v265 = v31;
          v266 = this;
          int v267 = a4;
          uint64_t v268 = v30;
          uint64_t v269 = *((void *)*v335 + ((v149 - 1) >> 6)) & (1 << (v149 - 1));
          unsigned int v270 = *((_DWORD *)v340 + 2);
          unsigned int v271 = v270 - 1;
          if (v270 >= 0x41) {
            int v148 = (llvm::APInt *)(*(void *)v340 + 8 * (v271 >> 6));
          }
          if ((v269 != 0) == ((*(void *)v148 >> v271) & 1))
          {
            unint64_t v277 = ((unint64_t)(v149 + 63) >> 3) & 0x3FFFFFF8;
            do
            {
              uint64_t v30 = v268;
              a4 = v267;
              this = v266;
              uint64_t v31 = v265;
              LODWORD(v17) = v264;
              if (!v277) {
                goto LABEL_154;
              }
              unint64_t v278 = *(void *)((char *)*v335 + v277 - 8);
              unint64_t v279 = *(void *)(*(void *)v340 - 8 + v277);
              v277 -= 8;
            }
            while (v278 == v279);
            uint64_t v30 = v268;
            a4 = v267;
            this = v266;
            uint64_t v31 = v265;
            LODWORD(v17) = v264;
            if (v278 > v279) {
              goto LABEL_154;
            }
          }
          else if (!v269)
          {
            goto LABEL_154;
          }
        }
        else if ((uint64_t)((void)*v335 << -(char)v149) >> -(char)v149 >= (uint64_t)(*(void *)v340 << -(char)v149) >> -(char)v149)
        {
          goto LABEL_154;
        }
        if (a8 == 40)
        {
          uint64_t v33 = 3;
          goto LABEL_551;
        }
LABEL_154:
        v329 = (llvm::APInt **)this;
        v330 = &v340;
        uint64_t v331 = 0;
        int v58 = *(unsigned __int8 *)(a7 + 16);
        if (v58 == 85)
        {
          uint64_t v61 = *(void *)(a7 - 96);
          if (!v61 || *(unsigned char *)(v61 + 16) != 81) {
            goto LABEL_183;
          }
          unsigned int v62 = *(llvm::ConstantDataSequential **)(a7 - 64);
          int v63 = *(void **)(a7 - 32);
          BOOL v64 = *(llvm::ConstantDataSequential **)(v61 - 64);
          unsigned int v65 = *(unsigned __int8 **)(v61 - 32);
          if ((v62 != v64 || v63 != v65) && (v62 != (llvm::ConstantDataSequential *)v65 || v63 != v64)) {
            goto LABEL_183;
          }
          int v68 = *(_WORD *)(v61 + 18) & 0x3E;
          BOOL v69 = v62 == v64 ? v68 == 38 : v68 == 40;
          if (!v69 || this != v64) {
            goto LABEL_183;
          }
          if (!sub_1CBF528D8((uint64_t)&v330, v65)) {
            goto LABEL_183;
          }
        }
        else
        {
          if (v58 != 84) {
            goto LABEL_183;
          }
          uint64_t v59 = *(void *)(a7 - 32);
          if (!v59) {
            goto LABEL_183;
          }
          if (*(unsigned char *)(v59 + 16)) {
            goto LABEL_183;
          }
          if (*(void *)(v59 + 24) != *(void *)(a7 + 72)) {
            goto LABEL_183;
          }
          if ((*(unsigned char *)(v59 + 33) & 0x20) == 0) {
            goto LABEL_183;
          }
          if (*(_DWORD *)(v59 + 36) != 274) {
            goto LABEL_183;
          }
          uint64_t v60 = a7 - 32 * (*(_DWORD *)(a7 + 20) & 0x7FFFFFF);
          if (this != *(llvm::ConstantDataSequential **)v60
            || (sub_1CBF528D8((uint64_t)&v330, *(unsigned __int8 **)(v60 + 32)) & 1) == 0)
          {
            goto LABEL_183;
          }
        }
        uint64_t v136 = v340;
        uint64_t v137 = *((unsigned int *)v335 + 2);
        if (v137 > 0x40)
        {
          int v256 = (int)v17;
          uint64_t v257 = v31;
          int v258 = this;
          int v259 = a4;
          uint64_t v260 = v30;
          uint64_t v261 = *((void *)*v335 + ((v137 - 1) >> 6)) & (1 << (v137 - 1));
          unsigned int v262 = *((_DWORD *)v340 + 2);
          unsigned int v263 = v262 - 1;
          if (v262 >= 0x41) {
            uint64_t v136 = (llvm::APInt *)(*(void *)v340 + 8 * (v263 >> 6));
          }
          if ((v261 != 0) == ((*(void *)v136 >> v263) & 1))
          {
            unint64_t v274 = ((unint64_t)(v137 + 63) >> 3) & 0x3FFFFFF8;
            do
            {
              uint64_t v30 = v260;
              a4 = v259;
              this = v258;
              uint64_t v31 = v257;
              LODWORD(v17) = v256;
              if (!v274) {
                goto LABEL_183;
              }
              unint64_t v275 = *(void *)((char *)*v335 + v274 - 8);
              unint64_t v276 = *(void *)(*(void *)v340 - 8 + v274);
              v274 -= 8;
            }
            while (v275 == v276);
            uint64_t v30 = v260;
            a4 = v259;
            this = v258;
            uint64_t v31 = v257;
            LODWORD(v17) = v256;
            if (v275 <= v276) {
              goto LABEL_183;
            }
          }
          else if (v261)
          {
            goto LABEL_183;
          }
        }
        else if ((uint64_t)((void)*v335 << -(char)v137) >> -(char)v137 <= (uint64_t)(*(void *)v340 << -(char)v137) >> -(char)v137)
        {
          goto LABEL_183;
        }
        if (a8 == 38)
        {
          uint64_t v33 = 1;
          goto LABEL_551;
        }
LABEL_183:
        v329 = (llvm::APInt **)this;
        v330 = &v340;
        uint64_t v331 = 0;
        int v71 = *(unsigned __int8 *)(a7 + 16);
        if (v71 == 85)
        {
          uint64_t v74 = *(void *)(a7 - 96);
          if (!v74 || *(unsigned char *)(v74 + 16) != 81) {
            goto LABEL_212;
          }
          uint64_t v75 = *(llvm::ConstantDataSequential **)(a7 - 64);
          BOOL v76 = *(void **)(a7 - 32);
          unsigned int v77 = *(llvm::ConstantDataSequential **)(v74 - 64);
          uint64_t v78 = *(unsigned __int8 **)(v74 - 32);
          if ((v75 != v77 || v76 != v78) && (v75 != (llvm::ConstantDataSequential *)v78 || v76 != v77)) {
            goto LABEL_212;
          }
          int v81 = *(_WORD *)(v74 + 18) & 0x3E;
          BOOL v82 = v75 == v77 ? v81 == 36 : v81 == 34;
          if (!v82 || this != v77) {
            goto LABEL_212;
          }
          if (!sub_1CBF528D8((uint64_t)&v330, v78)) {
            goto LABEL_212;
          }
        }
        else
        {
          if (v71 != 84) {
            goto LABEL_212;
          }
          uint64_t v72 = *(void *)(a7 - 32);
          if (!v72) {
            goto LABEL_212;
          }
          if (*(unsigned char *)(v72 + 16)) {
            goto LABEL_212;
          }
          if (*(void *)(v72 + 24) != *(void *)(a7 + 72)) {
            goto LABEL_212;
          }
          if ((*(unsigned char *)(v72 + 33) & 0x20) == 0) {
            goto LABEL_212;
          }
          if (*(_DWORD *)(v72 + 36) != 306) {
            goto LABEL_212;
          }
          uint64_t v73 = a7 - 32 * (*(_DWORD *)(a7 + 20) & 0x7FFFFFF);
          if (this != *(llvm::ConstantDataSequential **)v73
            || (sub_1CBF528D8((uint64_t)&v330, *(unsigned __int8 **)(v73 + 32)) & 1) == 0)
          {
            goto LABEL_212;
          }
        }
        uint64_t v139 = *((unsigned int *)v335 + 2);
        if (v139 <= 0x40)
        {
          if ((unint64_t)*v335 >= *(void *)v340) {
            goto LABEL_212;
          }
        }
        else
        {
          int v288 = (int)v17;
          v289 = v31;
          v290 = this;
          v291 = a4;
          uint64_t v292 = v30;
          unint64_t v293 = ((unint64_t)(v139 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            uint64_t v30 = v292;
            a4 = v291;
            this = v290;
            uint64_t v31 = v289;
            LODWORD(v17) = v288;
            if (!v293) {
              goto LABEL_212;
            }
            unint64_t v294 = *(void *)((char *)*v335 + v293 - 8);
            unint64_t v295 = *(void *)(*(void *)v340 - 8 + v293);
            v293 -= 8;
          }
          while (v294 == v295);
          uint64_t v30 = v292;
          a4 = v291;
          this = v290;
          uint64_t v31 = v289;
          LODWORD(v17) = v288;
          if (v294 > v295) {
            goto LABEL_212;
          }
        }
        if (a8 == 36)
        {
          uint64_t v33 = 4;
          goto LABEL_551;
        }
LABEL_212:
        v329 = (llvm::APInt **)this;
        v330 = &v340;
        uint64_t v331 = 0;
        int v84 = *(unsigned __int8 *)(a7 + 16);
        if (v84 == 85)
        {
          uint64_t v87 = *(void *)(a7 - 96);
          if (!v87 || *(unsigned char *)(v87 + 16) != 81) {
            goto LABEL_241;
          }
          unsigned int v88 = *(llvm::ConstantDataSequential **)(a7 - 64);
          unsigned int v89 = *(void **)(a7 - 32);
          BOOL v90 = *(llvm::ConstantDataSequential **)(v87 - 64);
          uint64_t v91 = *(unsigned __int8 **)(v87 - 32);
          if ((v88 != v90 || v89 != v91) && (v88 != (llvm::ConstantDataSequential *)v91 || v89 != v90)) {
            goto LABEL_241;
          }
          int v94 = *(_WORD *)(v87 + 18) & 0x3E;
          BOOL v95 = v88 == v90 ? v94 == 34 : v94 == 36;
          if (!v95 || this != v90) {
            goto LABEL_241;
          }
          if (!sub_1CBF528D8((uint64_t)&v330, v91)) {
            goto LABEL_241;
          }
        }
        else
        {
          if (v84 != 84) {
            goto LABEL_241;
          }
          uint64_t v85 = *(void *)(a7 - 32);
          if (!v85) {
            goto LABEL_241;
          }
          if (*(unsigned char *)(v85 + 16)) {
            goto LABEL_241;
          }
          if (*(void *)(v85 + 24) != *(void *)(a7 + 72)) {
            goto LABEL_241;
          }
          if ((*(unsigned char *)(v85 + 33) & 0x20) == 0) {
            goto LABEL_241;
          }
          if (*(_DWORD *)(v85 + 36) != 305) {
            goto LABEL_241;
          }
          uint64_t v86 = a7 - 32 * (*(_DWORD *)(a7 + 20) & 0x7FFFFFF);
          if (this != *(llvm::ConstantDataSequential **)v86
            || (sub_1CBF528D8((uint64_t)&v330, *(unsigned __int8 **)(v86 + 32)) & 1) == 0)
          {
            goto LABEL_241;
          }
        }
        uint64_t v134 = *((unsigned int *)v335 + 2);
        if (v134 <= 0x40)
        {
          if ((unint64_t)*v335 > *(void *)v340) {
            goto LABEL_354;
          }
        }
        else
        {
          int v280 = (int)v17;
          long long v281 = v31;
          long long v282 = this;
          v283 = a4;
          uint64_t v284 = v30;
          unint64_t v285 = ((unint64_t)(v134 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            uint64_t v30 = v284;
            a4 = v283;
            this = v282;
            uint64_t v31 = v281;
            LODWORD(v17) = v280;
            if (!v285) {
              goto LABEL_241;
            }
            unint64_t v286 = *(void *)((char *)*v335 + v285 - 8);
            unint64_t v287 = *(void *)(*(void *)v340 - 8 + v285);
            v285 -= 8;
          }
          while (v286 == v287);
          uint64_t v30 = v284;
          a4 = v283;
          this = v282;
          uint64_t v31 = v281;
          LODWORD(v17) = v280;
          if (v286 > v287)
          {
LABEL_354:
            if (a8 == 34)
            {
              uint64_t v33 = 2;
              goto LABEL_551;
            }
          }
        }
LABEL_241:
        v340 = 0;
        v339 = 0;
        unsigned int matched = llvm::matchSelectPattern(v31, &v340, &v339, 0, (a9 + 1));
        unsigned int v98 = matched;
        if (matched <= 8 && ((1 << matched) & 0x181) != 0) {
          goto LABEL_275;
        }
        v337 = 0;
        uint64_t v338 = 0;
        uint64_t v99 = v30;
        if (matched != llvm::matchSelectPattern(v30, &v338, &v337, 0, (a9 + 1)))
        {
LABEL_274:
          uint64_t v30 = v99;
          goto LABEL_275;
        }
        switch(v98)
        {
          case 1u:
            BOOL v100 = (v17 & 0xFFFFFFFE) == 38;
            goto LABEL_247;
          case 2u:
            if ((v17 & 0xFFFFFFFE) == 0x22) {
              int v101 = this;
            }
            else {
              int v101 = a4;
            }
            if ((v17 & 0xFFFFFFFE) == 0x22) {
              unsigned int v102 = a4;
            }
            else {
              unsigned int v102 = this;
            }
            unsigned int v103 = v17 - 34;
            goto LABEL_269;
          case 3u:
            BOOL v100 = (v17 & 0xFFFFFFFE) == 40;
LABEL_247:
            if (v100) {
              int v101 = this;
            }
            else {
              int v101 = a4;
            }
            if (v100) {
              unsigned int v102 = a4;
            }
            else {
              unsigned int v102 = this;
            }
            unsigned int v103 = v17 - 38;
LABEL_269:
            if (v103 < 4) {
              goto LABEL_270;
            }
            goto LABEL_274;
          case 4u:
            if ((v17 & 0xFFFFFFFE) == 0x24) {
              int v101 = this;
            }
            else {
              int v101 = a4;
            }
            if ((v17 & 0xFFFFFFFE) == 0x24) {
              unsigned int v102 = a4;
            }
            else {
              unsigned int v102 = this;
            }
            if ((v17 - 34) > 3) {
              goto LABEL_274;
            }
LABEL_270:
            uint64_t v105 = v337;
            uint64_t v104 = v338;
            int v106 = v339;
            BOOL v107 = v340;
            if (v337 != v339) {
              goto LABEL_271;
            }
            if (v102 == v340 && v101 == (llvm::ConstantDataSequential *)v338) {
              goto LABEL_341;
            }
            v329 = (llvm::APInt **)v102;
            int v113 = *(unsigned __int8 *)(v338 + 16);
            if (v113 == 5)
            {
              if (*(_WORD *)(v338 + 18) != 30) {
                goto LABEL_271;
              }
              uint64_t v150 = *(_DWORD *)(v338 + 20) & 0x7FFFFFF;
              uint64_t v151 = (llvm::APInt **)(v338 - 32 * v150);
              if (v102 == *v151)
              {
                v304 = v339;
                v320 = v101;
                char v165 = sub_1CBF68974((uint64_t)&v330, v151[4]);
                int v106 = v304;
                int v101 = v320;
                if (v165) {
                  goto LABEL_403;
                }
                int v153 = v329;
                uint64_t v152 = -(uint64_t)(*(_DWORD *)(v104 + 20) & 0x7FFFFFF);
              }
              else
              {
                uint64_t v152 = -v150;
                int v153 = v102;
              }
              uint64_t v166 = v104 + 32 * v152;
              if (v153 != *(void **)(v166 + 32)) {
                goto LABEL_271;
              }
              v305 = v106;
              v321 = v101;
              int v167 = sub_1CBF68974((uint64_t)&v330, *(llvm::Constant **)v166);
              int v106 = v305;
              int v101 = v321;
              if (!v167) {
                goto LABEL_271;
              }
            }
            else
            {
              if (v113 != 58) {
                goto LABEL_271;
              }
              BOOL v114 = v102;
              if (v102 == *(llvm::APInt **)(v338 - 64))
              {
                v298 = v339;
                v314 = v101;
                char v115 = sub_1CBF687D0((uint64_t)&v330, *(llvm::Constant **)(v338 - 32));
                int v106 = v298;
                int v101 = v314;
                if (v115) {
                  goto LABEL_403;
                }
                BOOL v114 = v329;
              }
              if (v114 != *(void **)(v104 - 32)) {
                goto LABEL_271;
              }
              v299 = v106;
              v315 = v101;
              char v116 = sub_1CBF687D0((uint64_t)&v330, *(llvm::Constant **)(v104 - 64));
              int v106 = v299;
              int v101 = v315;
              if ((v116 & 1) == 0) {
                goto LABEL_271;
              }
            }
LABEL_403:
            v335 = (llvm::APInt **)v101;
            int v168 = *((unsigned __int8 *)v107 + 16);
            if (v168 != 5)
            {
              if (v168 != 58) {
                goto LABEL_271;
              }
              v306 = v106;
              v322 = v101;
              uint64_t v169 = v101;
              if (v101 == *((llvm::ConstantDataSequential **)v107 - 8))
              {
                if (sub_1CBF687D0((uint64_t)&v336, *((llvm::Constant **)v107 - 4))) {
                  goto LABEL_341;
                }
                uint64_t v169 = v335;
              }
              int v106 = v306;
              int v101 = v322;
              if (v169 != *((void **)v107 - 4)) {
                goto LABEL_271;
              }
              char v170 = sub_1CBF687D0((uint64_t)&v336, *((llvm::Constant **)v107 - 8));
              goto LABEL_541;
            }
            if (*((_WORD *)v107 + 9) == 30)
            {
              v306 = v106;
              v322 = v101;
              uint64_t v171 = *((_DWORD *)v107 + 5) & 0x7FFFFFF;
              uint64_t v172 = (llvm::ConstantDataSequential **)((char *)v107 - 32 * v171);
              if (v101 == *v172)
              {
                char v247 = sub_1CBF68974((uint64_t)&v336, v172[4]);
                if (v247) {
                  goto LABEL_341;
                }
                uint64_t v174 = v335;
                uint64_t v173 = -(uint64_t)(*((_DWORD *)v107 + 5) & 0x7FFFFFF);
              }
              else
              {
                uint64_t v173 = -v171;
                uint64_t v174 = v101;
              }
              int v248 = (void **)((char *)v107 + 32 * v173);
              int v106 = v306;
              int v101 = v322;
              if (v174 == v248[4])
              {
                char v170 = sub_1CBF68974((uint64_t)&v336, (llvm::Constant *)*v248);
LABEL_541:
                int v106 = v306;
                int v101 = v322;
                if (v170) {
                  goto LABEL_341;
                }
              }
            }
LABEL_271:
            if ((llvm::APInt *)v104 != v106) {
              goto LABEL_272;
            }
            if (v102 == v107 && v101 == v105) {
              goto LABEL_341;
            }
            v329 = (llvm::APInt **)v102;
            int v123 = *((unsigned __int8 *)v105 + 16);
            if (v123 == 5)
            {
              if (*((_WORD *)v105 + 9) != 30) {
                goto LABEL_272;
              }
              uint64_t v154 = *((_DWORD *)v105 + 5) & 0x7FFFFFF;
              uint64_t v155 = (llvm::APInt **)((char *)v105 - 32 * v154);
              if (v102 == *v155)
              {
                v307 = v106;
                v323 = v101;
                char v175 = sub_1CBF68974((uint64_t)&v330, v155[4]);
                int v106 = v307;
                int v101 = v323;
                if (v175) {
                  goto LABEL_418;
                }
                unint64_t v157 = v329;
                uint64_t v156 = -(uint64_t)(*((_DWORD *)v105 + 5) & 0x7FFFFFF);
              }
              else
              {
                uint64_t v156 = -v154;
                unint64_t v157 = v102;
              }
              unint64_t v176 = (void **)((char *)v105 + 32 * v156);
              if (v157 != v176[4]) {
                goto LABEL_272;
              }
              v308 = v106;
              v324 = v101;
              int v177 = sub_1CBF68974((uint64_t)&v330, (llvm::Constant *)*v176);
              int v106 = v308;
              int v101 = v324;
              if (!v177) {
                goto LABEL_272;
              }
            }
            else
            {
              if (v123 != 58) {
                goto LABEL_272;
              }
              uint64_t v124 = v102;
              if (v102 == *((llvm::APInt **)v105 - 8))
              {
                v300 = v106;
                v316 = v101;
                char v125 = sub_1CBF687D0((uint64_t)&v330, *((llvm::Constant **)v105 - 4));
                int v106 = v300;
                int v101 = v316;
                if (v125) {
                  goto LABEL_418;
                }
                uint64_t v124 = v329;
              }
              if (v124 != *((void **)v105 - 4)) {
                goto LABEL_272;
              }
              v301 = v106;
              v317 = v101;
              char v126 = sub_1CBF687D0((uint64_t)&v330, *((llvm::Constant **)v105 - 8));
              int v106 = v301;
              int v101 = v317;
              if ((v126 & 1) == 0) {
                goto LABEL_272;
              }
            }
LABEL_418:
            v335 = (llvm::APInt **)v101;
            int v178 = *((unsigned __int8 *)v107 + 16);
            if (v178 == 5)
            {
              if (*((_WORD *)v107 + 9) != 30) {
                goto LABEL_272;
              }
              v309 = v106;
              v325 = v101;
              uint64_t v181 = *((_DWORD *)v107 + 5) & 0x7FFFFFF;
              uint64_t v182 = (llvm::ConstantDataSequential **)((char *)v107 - 32 * v181);
              if (v101 == *v182)
              {
                char v252 = sub_1CBF68974((uint64_t)&v336, v182[4]);
                if (v252) {
                  goto LABEL_341;
                }
                unsigned int v184 = v335;
                uint64_t v183 = -(uint64_t)(*((_DWORD *)v107 + 5) & 0x7FFFFFF);
              }
              else
              {
                uint64_t v183 = -v181;
                unsigned int v184 = v101;
              }
              unint64_t v253 = (void **)((char *)v107 + 32 * v183);
              int v106 = v309;
              int v101 = v325;
              if (v184 != v253[4])
              {
LABEL_272:
                if (v105 != v107) {
                  goto LABEL_273;
                }
                if (v102 == v106 && v101 == (llvm::ConstantDataSequential *)v104) {
                  goto LABEL_341;
                }
                v329 = (llvm::APInt **)v102;
                int v127 = *(unsigned __int8 *)(v104 + 16);
                if (v127 == 5)
                {
                  if (*(_WORD *)(v104 + 18) != 30) {
                    goto LABEL_273;
                  }
                  uint64_t v158 = *(_DWORD *)(v104 + 20) & 0x7FFFFFF;
                  uint64_t v159 = (llvm::APInt **)(v104 - 32 * v158);
                  if (v102 == *v159)
                  {
                    v310 = v106;
                    v326 = v101;
                    char v185 = sub_1CBF68974((uint64_t)&v330, v159[4]);
                    int v106 = v310;
                    int v101 = v326;
                    if (v185) {
                      goto LABEL_433;
                    }
                    unint64_t v161 = v329;
                    uint64_t v160 = -(uint64_t)(*(_DWORD *)(v104 + 20) & 0x7FFFFFF);
                  }
                  else
                  {
                    uint64_t v160 = -v158;
                    unint64_t v161 = v102;
                  }
                  uint64_t v186 = v104 + 32 * v160;
                  if (v161 != *(void **)(v186 + 32)) {
                    goto LABEL_273;
                  }
                  v311 = v106;
                  v327 = v101;
                  int v187 = sub_1CBF68974((uint64_t)&v330, *(llvm::Constant **)v186);
                  int v106 = v311;
                  int v101 = v327;
                  if (!v187) {
                    goto LABEL_273;
                  }
                }
                else
                {
                  if (v127 != 58) {
                    goto LABEL_273;
                  }
                  unsigned int v128 = v102;
                  if (v102 == *(llvm::APInt **)(v104 - 64))
                  {
                    v302 = v106;
                    v318 = v101;
                    char v129 = sub_1CBF687D0((uint64_t)&v330, *(llvm::Constant **)(v104 - 32));
                    int v106 = v302;
                    int v101 = v318;
                    if (v129) {
                      goto LABEL_433;
                    }
                    unsigned int v128 = v329;
                  }
                  if (v128 != *(void **)(v104 - 32)) {
                    goto LABEL_273;
                  }
                  v303 = v106;
                  v319 = v101;
                  char v130 = sub_1CBF687D0((uint64_t)&v330, *(llvm::Constant **)(v104 - 64));
                  int v106 = v303;
                  int v101 = v319;
                  if ((v130 & 1) == 0) {
                    goto LABEL_273;
                  }
                }
LABEL_433:
                v335 = (llvm::APInt **)v101;
                int v188 = *((unsigned __int8 *)v106 + 16);
                if (v188 == 5)
                {
                  if (*((_WORD *)v106 + 9) != 30) {
                    goto LABEL_273;
                  }
                  uint64_t v191 = *((_DWORD *)v106 + 5) & 0x7FFFFFF;
                  v312 = v106;
                  v328 = v101;
                  unint64_t v192 = (llvm::ConstantDataSequential **)((char *)v106 - 32 * v191);
                  if (v101 == *v192)
                  {
                    char v254 = sub_1CBF68974((uint64_t)&v336, v192[4]);
                    if (v254) {
                      goto LABEL_341;
                    }
                    uint64_t v194 = v335;
                    uint64_t v193 = -(uint64_t)(*((_DWORD *)v312 + 5) & 0x7FFFFFF);
                  }
                  else
                  {
                    uint64_t v193 = -v191;
                    uint64_t v194 = v101;
                  }
                  int v106 = v312;
                  int v101 = v328;
                  uint64_t v255 = (void **)((char *)v312 + 32 * v193);
                  if (v194 != v255[4])
                  {
LABEL_273:
                    if ((llvm::APInt *)v104 != v107) {
                      goto LABEL_274;
                    }
                    if (v102 == v106 && v101 == v105)
                    {
LABEL_341:
                      uint64_t v33 = v98;
                      uint64_t v30 = v99;
                      if (v98) {
                        goto LABEL_551;
                      }
LABEL_275:
                      if (sub_1CC184E1C((unsigned __int8 *)v31) == this && sub_1CC184E1C((unsigned __int8 *)v30) == a4)
                      {
                        int v108 = v17 - 34;
                        if (v17 - 34) < 7 && ((0x55u >> v108))
                        {
                          uint64_t v32 = 0;
                          uint64_t v33 = qword_1CFAC4840[v108];
                          return v33 | (v32 << 32);
                        }
                      }
                      if (sub_1CC184E1C((unsigned __int8 *)v30) == this && sub_1CC184E1C((unsigned __int8 *)v31) == a4)
                      {
                        if ((v17 - 34) < 7)
                        {
                          uint64_t v32 = 0;
                          uint64_t v33 = qword_1CFAC4878[(int)v17 - 34];
                          return v33 | (v32 << 32);
                        }
                        goto LABEL_550;
                      }
                      if (v17 == 40 || v17 == 38)
                      {
                        v340 = 0;
                        v329 = &v340;
                        v330 = 0;
                        int v109 = sub_1CBF528D8((uint64_t)&v329, (unsigned __int8 *)a4);
                        uint64_t v33 = 0;
                        if (!v109) {
                          goto LABEL_551;
                        }
                        v339 = 0;
                        if (this != v31
                          || (v329 = &v339, v330 = 0, (sub_1CBF528D8((uint64_t)&v329, (unsigned __int8 *)v30) & 1) == 0))
                        {
                          if (this != (llvm::ConstantDataSequential *)v30) {
                            goto LABEL_550;
                          }
                          v335 = &v339;
                          uint64_t v336 = 0;
                          char v110 = sub_1CBF528D8((uint64_t)&v335, (unsigned __int8 *)v31);
                          uint64_t v33 = 0;
                          if ((v110 & 1) == 0) {
                            goto LABEL_551;
                          }
                        }
                        if (v17 == 38)
                        {
                          unsigned int v112 = *((_DWORD *)v340 + 2);
                          if (v112)
                          {
                            if (v112 <= 0x40)
                            {
                              uint64_t v33 = 0;
                              if (*(void *)v340 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v112) {
                                goto LABEL_551;
                              }
                            }
                            else
                            {
                              int v131 = llvm::APInt::countTrailingOnesSlowCase(v340);
                              if (v131 != v112) {
                                goto LABEL_550;
                              }
                            }
                          }
                          unsigned int v132 = *((_DWORD *)v339 + 2);
                          if (v132 > 0x40)
                          {
                            if (((*(void *)(*(void *)v339 + 8 * ((v132 - 1) >> 6)) >> (v132 - 1)) & 1) == 0
                              || llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v339) != v132 - 1)
                            {
                              goto LABEL_550;
                            }
                          }
                          else if (*(void *)v339 != 1 << (v132 - 1))
                          {
                            goto LABEL_550;
                          }
                          BOOL v122 = this == (llvm::ConstantDataSequential *)v30;
LABEL_347:
                          uint64_t v33 = 2;
                          if (v122) {
                            uint64_t v33 = 4;
                          }
                          goto LABEL_551;
                        }
                        uint64_t v111 = *((unsigned int *)v340 + 2);
                        if (v111 <= 0x40)
                        {
                          if (*(void *)v340) {
                            goto LABEL_550;
                          }
                        }
                        else
                        {
                          int v117 = 0;
                          int64_t v118 = (unint64_t)(v111 + 63) >> 6;
                          do
                          {
                            BOOL v21 = v118-- < 1;
                            if (v21) {
                              break;
                            }
                            unint64_t v119 = *(void *)(*(void *)v340 + 8 * v118);
                            v117 += __clz(v119);
                          }
                          while (!v119);
                          int v120 = v111 | 0xFFFFFFC0;
                          if ((v111 & 0x3F) == 0) {
                            int v120 = 0;
                          }
                          if (v117 + v120 != v111) {
                            goto LABEL_550;
                          }
                        }
                        unsigned int v121 = *((_DWORD *)v339 + 2);
                        if (v121 > 0x40)
                        {
                          if (((*(void *)(*(void *)v339 + 8 * ((v121 - 1) >> 6)) >> (v121 - 1)) & 1) == 0
                            && llvm::APInt::countTrailingOnesSlowCase(v339) == v121 - 1)
                          {
                            goto LABEL_318;
                          }
                        }
                        else if (*(void *)v339 == ~(-1 << (v121 - 1)))
                        {
LABEL_318:
                          BOOL v122 = this == v31;
                          goto LABEL_347;
                        }
                      }
LABEL_550:
                      uint64_t v33 = 0;
                      goto LABEL_551;
                    }
                    v329 = (llvm::APInt **)v102;
                    int v140 = *((unsigned __int8 *)v105 + 16);
                    if (v140 == 5)
                    {
                      if (*((_WORD *)v105 + 9) != 30) {
                        goto LABEL_274;
                      }
                      uint64_t v162 = *((_DWORD *)v105 + 5) & 0x7FFFFFF;
                      unsigned int v163 = (llvm::APInt **)((char *)v105 - 32 * v162);
                      if (v102 == *v163)
                      {
                        int v195 = v101;
                        uint64_t v196 = v106;
                        char v197 = sub_1CBF68974((uint64_t)&v330, v163[4]);
                        int v106 = v196;
                        int v101 = v195;
                        if (v197) {
                          goto LABEL_449;
                        }
                        unsigned int v102 = (llvm::APInt *)v329;
                        uint64_t v164 = -(uint64_t)(*((_DWORD *)v105 + 5) & 0x7FFFFFF);
                      }
                      else
                      {
                        uint64_t v164 = -v162;
                      }
                      int v198 = (llvm::Constant **)((char *)v105 + 32 * v164);
                      if (v102 != v198[4]) {
                        goto LABEL_274;
                      }
                      uint64_t v199 = v101;
                      unsigned int v200 = v106;
                      int v201 = sub_1CBF68974((uint64_t)&v330, *v198);
                      int v106 = v200;
                      int v101 = v199;
                      if (!v201) {
                        goto LABEL_274;
                      }
                    }
                    else
                    {
                      if (v140 != 58) {
                        goto LABEL_274;
                      }
                      if (v102 == *((llvm::APInt **)v105 - 8))
                      {
                        int64_t v141 = v101;
                        uint64_t v142 = v106;
                        char v143 = sub_1CBF687D0((uint64_t)&v330, *((llvm::Constant **)v105 - 4));
                        int v106 = v142;
                        int v101 = v141;
                        if (v143) {
                          goto LABEL_449;
                        }
                        unsigned int v102 = (llvm::APInt *)v329;
                      }
                      if (v102 != *((llvm::APInt **)v105 - 4)) {
                        goto LABEL_274;
                      }
                      unint64_t v144 = v101;
                      uint64_t v145 = v106;
                      char v146 = sub_1CBF687D0((uint64_t)&v330, *((llvm::Constant **)v105 - 8));
                      int v106 = v145;
                      int v101 = v144;
                      if ((v146 & 1) == 0) {
                        goto LABEL_274;
                      }
                    }
LABEL_449:
                    v335 = (llvm::APInt **)v101;
                    int v202 = *((unsigned __int8 *)v106 + 16);
                    if (v202 == 5)
                    {
                      if (*((_WORD *)v106 + 9) != 30) {
                        goto LABEL_274;
                      }
                      uint64_t v205 = *((_DWORD *)v106 + 5) & 0x7FFFFFF;
                      uint64_t v206 = v106;
                      unsigned int v207 = (llvm::ConstantDataSequential **)((char *)v106 - 32 * v205);
                      if (v101 == *v207)
                      {
                        char v272 = sub_1CBF68974((uint64_t)&v336, v207[4]);
                        if (v272) {
                          goto LABEL_341;
                        }
                        unint64_t v208 = v335;
                        uint64_t v209 = -(uint64_t)(*((_DWORD *)v206 + 5) & 0x7FFFFFF);
                      }
                      else
                      {
                        unint64_t v208 = v101;
                        uint64_t v209 = -v205;
                      }
                      uint64_t v273 = (void **)((char *)v206 + 32 * v209);
                      if (v208 != v273[4] || (sub_1CBF68974((uint64_t)&v336, (llvm::Constant *)*v273) & 1) == 0) {
                        goto LABEL_274;
                      }
                    }
                    else
                    {
                      if (v202 != 58) {
                        goto LABEL_274;
                      }
                      unsigned int v203 = v106;
                      uint64_t v204 = v101;
                      if (v101 == *((llvm::ConstantDataSequential **)v106 - 8))
                      {
                        if (sub_1CBF687D0((uint64_t)&v336, *((llvm::Constant **)v106 - 4))) {
                          goto LABEL_341;
                        }
                        uint64_t v204 = v335;
                      }
                      if (v204 != *((void **)v203 - 4)
                        || (sub_1CBF687D0((uint64_t)&v336, *((llvm::Constant **)v203 - 8)) & 1) == 0)
                      {
                        goto LABEL_274;
                      }
                    }
                    goto LABEL_341;
                  }
                  char v190 = sub_1CBF68974((uint64_t)&v336, (llvm::Constant *)*v255);
                }
                else
                {
                  if (v188 != 58) {
                    goto LABEL_273;
                  }
                  v312 = v106;
                  v328 = v101;
                  v189 = v101;
                  if (v101 == *((llvm::ConstantDataSequential **)v106 - 8))
                  {
                    if (sub_1CBF687D0((uint64_t)&v336, *((llvm::Constant **)v106 - 4))) {
                      goto LABEL_341;
                    }
                    v189 = v335;
                  }
                  int v106 = v312;
                  int v101 = v328;
                  if (v189 != *((void **)v312 - 4)) {
                    goto LABEL_273;
                  }
                  char v190 = sub_1CBF687D0((uint64_t)&v336, *((llvm::Constant **)v312 - 8));
                }
                int v106 = v312;
                int v101 = v328;
                if (v190) {
                  goto LABEL_341;
                }
                goto LABEL_273;
              }
              char v180 = sub_1CBF68974((uint64_t)&v336, (llvm::Constant *)*v253);
            }
            else
            {
              if (v178 != 58) {
                goto LABEL_272;
              }
              v309 = v106;
              v325 = v101;
              unint64_t v179 = v101;
              if (v101 == *((llvm::ConstantDataSequential **)v107 - 8))
              {
                if (sub_1CBF687D0((uint64_t)&v336, *((llvm::Constant **)v107 - 4))) {
                  goto LABEL_341;
                }
                unint64_t v179 = v335;
              }
              int v106 = v309;
              int v101 = v325;
              if (v179 != *((void **)v107 - 4)) {
                goto LABEL_272;
              }
              char v180 = sub_1CBF687D0((uint64_t)&v336, *((llvm::Constant **)v107 - 8));
            }
            int v106 = v309;
            int v101 = v325;
            if (v180) {
              goto LABEL_341;
            }
            goto LABEL_272;
          default:
            goto LABEL_274;
        }
      }
      if (v329 != (llvm::APInt **)v30 && !sub_1CC184DAC(&v330, v30)) {
        goto LABEL_104;
      }
      *(void *)a7 = v30;
      *a8 = v31;
      uint64_t v336 = (uint64_t)v31;
      int v36 = *((unsigned __int8 *)this + 16);
      if (v36 == 5)
      {
        if (*((_WORD *)this + 9) == 15
          && sub_1CC03F414((uint64_t)&v335, *((llvm::Constant **)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))))
        {
          uint64_t v37 = ((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[4];
LABEL_92:
          if (v336 == v37)
          {
            uint64_t v44 = *(void *)a7;
            *(void *)a7 = *a8;
            *a8 = v44;
          }
        }
      }
      else if (v36 == 43 && sub_1CBF535C4((uint64_t)&v335, *((llvm::Constant **)this - 8)))
      {
        uint64_t v37 = *((void *)this - 4);
        goto LABEL_92;
      }
      if (v17 == 40)
      {
        char v45 = sub_1CBF535C4((uint64_t)&v339, a4);
        if ((v45 & 1) == 0 && !sub_1CBF5250C((uint64_t)&v339 + 1, a4)) {
          goto LABEL_104;
        }
        goto LABEL_103;
      }
      if (v17 == 38)
      {
        unsigned int v39 = a4;
        if (sub_1CBF535C4((uint64_t)&v340, a4))
        {
LABEL_100:
          uint64_t v33 = 8;
LABEL_551:
          uint64_t v32 = 0;
          return v33 | (v32 << 32);
        }
        char v43 = sub_1CBF687D0((uint64_t)&v340 + 1, a4);
        goto LABEL_99;
      }
      goto LABEL_104;
    }
    break;
  }
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  switch((int)v17)
  {
    case 2:
    case 3:
    case 10:
    case 11:
      uint64_t v33 = 6;
      goto LABEL_60;
    case 4:
    case 5:
    case 12:
    case 13:
      uint64_t v33 = 5;
LABEL_60:
      uint64_t v32 = v29;
      break;
    case 34:
    case 35:
      uint64_t v32 = 0;
      uint64_t v33 = 4;
      break;
    case 36:
    case 37:
      uint64_t v32 = 0;
      uint64_t v33 = 2;
      break;
    case 38:
    case 39:
      uint64_t v32 = 0;
      uint64_t v33 = 3;
      break;
    case 40:
    case 41:
      uint64_t v32 = 0;
      uint64_t v33 = 1;
      break;
    default:
      return v33 | (v32 << 32);
  }
  return v33 | (v32 << 32);
}

uint64_t llvm::getMinMaxPred(int a1, int a2)
{
  if (a1 == 2) {
    return 36;
  }
  int v3 = a1 - 1;
  uint64_t result = 40;
  switch(v3)
  {
    case 0:
      return result;
    case 2:
      uint64_t result = 38;
      break;
    case 3:
      uint64_t result = 34;
      break;
    case 4:
      BOOL v4 = a2 == 0;
      unsigned int v5 = 12;
      unsigned int v6 = 4;
      goto LABEL_7;
    default:
      BOOL v4 = a2 == 0;
      unsigned int v5 = 10;
      unsigned int v6 = 2;
LABEL_7:
      if (v4) {
        uint64_t result = v5;
      }
      else {
        uint64_t result = v6;
      }
      break;
  }
  return result;
}

uint64_t llvm::getInverseMinMaxFlavor(int a1)
{
  if ((a1 - 1) > 2) {
    return 2;
  }
  else {
    return dword_1CFAC48BC[a1 - 1];
  }
}

uint64_t llvm::getInverseMinMaxIntrinsic(llvm *this)
{
  if (this == 275) {
    int v1 = 274;
  }
  else {
    int v1 = 306;
  }
  if (this == 274) {
    unsigned int v2 = 275;
  }
  else {
    unsigned int v2 = v1;
  }
  if (this == 306) {
    return 305;
  }
  else {
    return v2;
  }
}

uint64_t llvm::getInverseMinMaxPred(int a1)
{
  if ((a1 - 1) > 2) {
    return 36;
  }
  else {
    return dword_1CFAC48B0[a1 - 1];
  }
}

uint64_t llvm::getMinMaxLimit@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, llvm::APInt *a3@<X8>)
{
  switch(result)
  {
    case 4:
      *((_DWORD *)a3 + 2) = a2;
      if (a2 <= 0x40)
      {
        unint64_t v4 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
        if (!a2) {
          unint64_t v4 = 0;
        }
LABEL_5:
        *(void *)a3 = v4;
        return result;
      }
      unsigned int v6 = a3;
LABEL_17:
      llvm::APInt::initSlowCase(v6);
    case 1:
      *((_DWORD *)a3 + 2) = a2;
      if (a2 > 0x40) {
        llvm::APInt::initSlowCase(a3);
      }
      *(void *)a3 = 0;
      unint64_t v4 = (1 << (a2 - 1)) | *(void *)a3;
      goto LABEL_5;
    case 3:
      *((_DWORD *)a3 + 2) = a2;
      if (a2 > 0x40) {
        llvm::APInt::initSlowCase(a3);
      }
      unint64_t v5 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
      if (!a2) {
        unint64_t v5 = 0;
      }
      *(void *)a3 = v5;
      unint64_t v4 = *(void *)a3 & ~(1 << (a2 - 1));
      goto LABEL_5;
  }
  *((_DWORD *)a3 + 2) = a2;
  if (a2 > 0x40)
  {
    unsigned int v6 = a3;
    goto LABEL_17;
  }
  *(void *)a3 = 0;
  return result;
}

uint64_t llvm::matchSimpleRecurrence(uint64_t a1, void *a2, void *a3, void *a4)
{
  int v4 = *(_DWORD *)(a1 + 20);
  if ((v4 & 0x7FFFFFF) != 2) {
    return 0;
  }
  char v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 1;
  while (1)
  {
    char v8 = v5;
    uint64_t v9 = a1 - 64;
    if ((v4 & 0x40000000) != 0) {
      uint64_t v9 = *(void *)(a1 - 8);
    }
    uint64_t v10 = *(void *)(v9 + 32 * v6);
    unsigned int v11 = *(unsigned __int8 *)(v10 + 16);
    unsigned int v12 = v11 - 28;
    BOOL v13 = v11 >= 0x1C || v11 == 5;
    BOOL v14 = !v13;
    if (v10 && !v14)
    {
      if (v11 <= 0x1B) {
        unsigned int v12 = *(unsigned __int16 *)(v10 + 18);
      }
      BOOL v15 = v12 > 0x1D;
      int v16 = (1 << v12) & 0x3E06A000;
      if (!v15 && v16 != 0)
      {
        int v18 = *(_DWORD *)(v10 + 20);
        if ((v18 & 0x40000000) != 0) {
          unsigned int v19 = *(uint64_t **)(v10 - 8);
        }
        else {
          unsigned int v19 = (uint64_t *)(v10 - 32 * (v18 & 0x7FFFFFF));
        }
        uint64_t v20 = *v19;
        uint64_t v21 = v19[4];
        if (v20 == a1) {
          goto LABEL_27;
        }
        if (v21 == a1) {
          break;
        }
      }
    }
    uint64_t v7 = 0;
    char v5 = 1;
    uint64_t v6 = 1;
    if (v8) {
      return 0;
    }
  }
  uint64_t v21 = v20;
LABEL_27:
  uint64_t v23 = *(void *)(v9 + 32 * v7);
  *a2 = v10;
  *a3 = v23;
  *a4 = v21;
  return 1;
}

uint64_t llvm::matchSimpleRecurrence(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  uint64_t v9 = 0;
  uint64_t v5 = *(void *)(a1 - 64);
  if (*(unsigned char *)(v5 + 16) == 83) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  *a2 = v6;
  if (!v6)
  {
    uint64_t v5 = *(void *)(a1 - 32);
    uint64_t v7 = *(unsigned char *)(v5 + 16) == 83 ? *(void *)(a1 - 32) : 0;
    *a2 = v7;
    if (!v7) {
      return 0;
    }
  }
  uint64_t result = llvm::matchSimpleRecurrence(v5, &v9, a3, a4);
  if (result) {
    return v9 == a1;
  }
  return result;
}

uint64_t llvm::isImpliedCondition(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, const llvm::DataLayout *a5, uint64_t a6, int a7)
{
  if (a7 == 6) {
    goto LABEL_25;
  }
  uint64_t v8 = a2;
  if ((*(_DWORD *)(*(void *)a3 + 8) & 0xFE) == 0x12 || (*(_DWORD *)(*a1 + 8) & 0xFE) == 18) {
    goto LABEL_25;
  }
  unsigned int v14 = *((unsigned __int8 *)a1 + 16);
  if (v14 == 81)
  {
    uint64_t v15 = *(a1 - 8);
    uint64_t v16 = *(a1 - 4);
    uint64_t v17 = *((_WORD *)a1 + 9) & 0x3FLL;
    if ((a6 & 1) == 0) {
      uint64_t v17 = dword_1CFAC4970[v17];
    }
    BOOL v19 = v15 == a4 && v16 == a3;
    if (v16 == a4 && v15 == a3 || v19)
    {
      if (v19) {
        LODWORD(v8) = llvm::CmpInst::getSwappedPredicate(a2);
      }
      if ((llvm::CmpInst::isImpliedTrueByMatchingCmp(v17, v8) & 1) == 0)
      {
        int isImpliedFalseByMatchingCmp = llvm::CmpInst::isImpliedFalseByMatchingCmp(v17, v8);
        goto LABEL_26;
      }
LABEL_75:
      int isImpliedFalseByMatchingCmp = 1;
      LOBYTE(v23) = 1;
      return v23 | (isImpliedFalseByMatchingCmp << 8);
    }
    if (v15 == a3 && *(unsigned char *)(v16 + 16) == 16 && *(unsigned char *)(a4 + 16) == 16)
    {
      llvm::ConstantRange::makeExactICmpRegion(v17, v16 + 24, (uint64_t)&p_s1);
      llvm::ConstantRange::makeExactICmpRegion(v8, a4 + 24, (uint64_t)&v53);
      llvm::ConstantRange::intersectWith((uint64_t)&p_s1, (llvm::ConstantRange *)&v53, 0, (uint64_t)&__s1);
      llvm::ConstantRange::difference((llvm::ConstantRange *)&p_s1, (const llvm::ConstantRange *)&v53, (uint64_t)&v45);
      uint64_t v31 = v50;
      if (v50 >= 0x41)
      {
        uint64_t v35 = __s1;
        if (memcmp(__s1, __s2, (((unint64_t)v50 + 63) >> 3) & 0x3FFFFFF8)) {
          goto LABEL_47;
        }
        int v36 = 0;
        int64_t v37 = (unint64_t)(v31 + 63) >> 6;
        do
        {
          BOOL v26 = v37-- < 1;
          if (v26) {
            break;
          }
          unint64_t v38 = v35[v37];
          v36 += __clz(v38);
        }
        while (!v38);
        int v39 = v31 | 0xFFFFFFC0;
        if ((v31 & 0x3F) == 0) {
          int v39 = 0;
        }
        if (v36 + v39 != v31)
        {
LABEL_47:
          uint64_t v32 = v46;
          if (v46 > 0x40)
          {
            char v40 = v45;
            if (memcmp(v45, v47, (((unint64_t)v46 + 63) >> 3) & 0x3FFFFFF8))
            {
              int v34 = 0;
LABEL_52:
              int isImpliedFalseByMatchingCmp = v34;
              goto LABEL_53;
            }
            int v41 = 0;
            int64_t v42 = (unint64_t)(v32 + 63) >> 6;
            do
            {
              BOOL v26 = v42-- < 1;
              if (v26) {
                break;
              }
              unint64_t v43 = v40[v42];
              v41 += __clz(v43);
            }
            while (!v43);
            int v44 = v32 | 0xFFFFFFC0;
            if ((v32 & 0x3F) == 0) {
              int v44 = 0;
            }
            BOOL v33 = v41 + v44 == v32;
          }
          else
          {
            BOOL v33 = ((unint64_t)v47 | (unint64_t)v45) == 0;
          }
          int v34 = v33;
          goto LABEL_52;
        }
      }
      else if ((unint64_t)__s2 | (unint64_t)__s1)
      {
        goto LABEL_47;
      }
      LOBYTE(v34) = 0;
      int isImpliedFalseByMatchingCmp = 1;
LABEL_53:
      if (v48 >= 0x41 && v47) {
        MEMORY[0x1D25D9CB0](v47, 0x1000C8000313F17);
      }
      if (v46 >= 0x41 && v45) {
        MEMORY[0x1D25D9CB0](v45, 0x1000C8000313F17);
      }
      if (v52 >= 0x41 && __s2) {
        MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
      }
      if (v50 >= 0x41 && __s1) {
        MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
      }
      if (v56 >= 0x41 && v55) {
        MEMORY[0x1D25D9CB0](v55, 0x1000C8000313F17);
      }
      if (v54 >= 0x41 && v53) {
        MEMORY[0x1D25D9CB0](v53, 0x1000C8000313F17);
      }
      if (v60 >= 0x41 && v59) {
        MEMORY[0x1D25D9CB0](v59, 0x1000C8000313F17);
      }
      if (v58 >= 0x41 && p_s1) {
        MEMORY[0x1D25D9CB0](p_s1, 0x1000C8000313F17);
      }
      if (isImpliedFalseByMatchingCmp) {
        LOBYTE(v23) = v34;
      }
      else {
        LOBYTE(v23) = 0;
      }
      return v23 | (isImpliedFalseByMatchingCmp << 8);
    }
    if (v17 == a2)
    {
      if ((a2 - 36) < 2)
      {
        if (!sub_1CC184F8C(0x25u, a3, v15, a5, a7)) {
          goto LABEL_25;
        }
        unsigned int v30 = 37;
      }
      else
      {
        if ((a2 - 40) > 1 || !sub_1CC184F8C(0x29u, a3, v15, a5, a7)) {
          goto LABEL_25;
        }
        unsigned int v30 = 41;
      }
      if (sub_1CC184F8C(v30, v16, a4, a5, a7)) {
        goto LABEL_75;
      }
    }
LABEL_25:
    int isImpliedFalseByMatchingCmp = 0;
LABEL_26:
    LOBYTE(v23) = 0;
    return v23 | (isImpliedFalseByMatchingCmp << 8);
  }
  if (v14 < 0x1C) {
    goto LABEL_25;
  }
  unsigned int v25 = v14 - 56;
  BOOL v26 = v25 > 0x1D;
  int v27 = (1 << v25) & 0x20000003;
  if (v26 || v27 == 0) {
    goto LABEL_25;
  }
  __s1 = 0;
  char v45 = 0;
  if ((a6 & 1) == 0)
  {
    p_s1 = &__s1;
    int v58 = &v45;
    if (sub_1CC185634(&p_s1, a1)) {
      goto LABEL_35;
    }
    LOBYTE(v23) = 0;
LABEL_66:
    int isImpliedFalseByMatchingCmp = 0;
    return v23 | (isImpliedFalseByMatchingCmp << 8);
  }
  int v53 = &__s1;
  unint64_t v54 = &v45;
  int v23 = sub_1CC185750(&v53, a1);
  if (!v23) {
    goto LABEL_66;
  }
LABEL_35:
  uint64_t v29 = (a7 + 1);
  LOWORD(v23) = llvm::isImpliedCondition(__s1, v8, a3, a4, a5, a6, v29);
  int isImpliedFalseByMatchingCmp = BYTE1(v23);
  if (!BYTE1(v23))
  {
    LOWORD(v23) = llvm::isImpliedCondition(v45, v8, a3, a4, a5, a6, v29);
    int isImpliedFalseByMatchingCmp = BYTE1(v23);
    if (!BYTE1(v23)) {
      LOBYTE(v23) = 0;
    }
  }
  return v23 | (isImpliedFalseByMatchingCmp << 8);
}

uint64_t llvm::isImpliedCondition(llvm *this, const llvm::Value *a2, const llvm::Value *a3, const llvm::DataLayout *a4, int a5)
{
  if (this == a2)
  {
    int v6 = 1;
    LOBYTE(this) = (_BYTE)a4;
  }
  else
  {
    uint64_t v5 = (uint64_t *)this;
    LOBYTE(this) = 0;
    if (a2)
    {
      int v6 = 0;
      if (*((unsigned char *)a2 + 16) == 81)
      {
        LOWORD(this) = llvm::isImpliedCondition(v5, *((_WORD *)a2 + 9) & 0x3F, *((void *)a2 - 8), *((void *)a2 - 4), a3, (uint64_t)a4, a5);
        int v6 = BYTE1(this);
      }
    }
    else
    {
      int v6 = 0;
    }
  }
  return this | (v6 << 8);
}

uint64_t llvm::isImpliedByDomCondition(llvm *this, const llvm::Value *a2, const llvm::Instruction *a3, const llvm::DataLayout *a4)
{
  int v6 = (uint64_t *)sub_1CC16FA94((uint64_t)a2);
  if (v6)
  {
    if (v6 == (uint64_t *)this)
    {
      int v8 = 1;
      unsigned __int8 v9 = v7 & 1;
    }
    else
    {
      int v8 = 0;
      if (this)
      {
        unsigned __int8 v9 = 0;
        if (*((unsigned char *)this + 16) == 81)
        {
          __int16 isImpliedCondition = llvm::isImpliedCondition(v6, *((_WORD *)this + 9) & 0x3F, *((void *)this - 8), *((void *)this - 4), a3, v7 & 1, 0);
          unsigned __int8 v9 = isImpliedCondition;
          int v8 = HIBYTE(isImpliedCondition);
        }
      }
      else
      {
        unsigned __int8 v9 = 0;
      }
    }
  }
  else
  {
    int v8 = 0;
    unsigned __int8 v9 = 0;
  }
  return v9 | (v8 << 8);
}

uint64_t sub_1CC16FA94(uint64_t result)
{
  if (result)
  {
    if (!*(void *)(result + 40)) {
      return 0;
    }
    uint64_t result = llvm::BasicBlock::getSinglePredecessor(*(llvm::BasicBlock **)(result + 40));
    if (result)
    {
      uint64_t v1 = *(void *)(result + 40);
      if (v1 == result + 40) {
        return 0;
      }
      uint64_t result = 0;
      uint64_t v2 = v1 - 24;
      if (!v1) {
        uint64_t v2 = 0;
      }
      unsigned int v3 = *(unsigned __int8 *)(v2 + 16) - 40;
      if (v3 < 0xFFFFFFF5) {
        uint64_t v2 = 0;
      }
      if (v1)
      {
        if (*(unsigned char *)(v2 + 16) == 30 && v3 >= 0xFFFFFFF5)
        {
          if ((*(_DWORD *)(v2 + 20) & 0x7FFFFFF) != 3) {
            return 0;
          }
          uint64_t result = *(void *)(v2 - 96);
          if (result)
          {
            uint64_t v5 = *(void *)(v2 - 32);
            if (!v5) {
              return 0;
            }
            uint64_t v6 = *(void *)(v2 - 64);
            if (!v6 || v5 == v6) {
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

void llvm::computeConstantRange(llvm *this@<X0>, const llvm::Value *a2@<X1>, llvm::AssumptionCache *a3@<X4>, const llvm::Instruction *a4@<X5>, const llvm::DominatorTree *a5@<X6>, BOOL a6@<W2>, uint64_t a7@<X3>, void *a8@<X8>)
{
  if (a5 == 6)
  {
    uint64_t v10 = *(llvm::Type **)this;
    if ((*(_DWORD *)(*(void *)this + 8) & 0xFE) == 0x12) {
      uint64_t v10 = (llvm::Type *)**((void **)v10 + 2);
    }
    unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v10);
    *((_DWORD *)a8 + 2) = PrimitiveSizeInBits;
    if (PrimitiveSizeInBits > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)a8);
    }
    unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
    if (!PrimitiveSizeInBits) {
      unint64_t v12 = 0;
    }
    *a8 = v12;
    *((_DWORD *)a8 + 6) = PrimitiveSizeInBits;
    BOOL v13 = (void *)*a8;
LABEL_36:
    a8[2] = v13;
    return;
  }
  int v14 = (int)a5;
  int v19 = (int)a2;
  uint64_t v338 = 0;
  __src = &v338;
  v327 = 0;
  if (sub_1CBF528D8((uint64_t)&__src, (unsigned __int8 *)this))
  {
    unsigned int v20 = *(_DWORD *)(v338 + 8);
    if (v20 > 0x40) {
      operator new[]();
    }
    uint64_t v21 = *(void **)v338;
    *((_DWORD *)a8 + 2) = v20;
    *a8 = v21;
    LODWORD(v327) = v20;
    __src = v21;
    llvm::APInt::operator+=((uint64_t)&__src, 1uLL);
    *((_DWORD *)a8 + 6) = v327;
    BOOL v13 = __src;
    goto LABEL_36;
  }
  int v22 = *(llvm::Type **)this;
  if ((*(_DWORD *)(*(void *)this + 8) & 0xFE) == 0x12) {
    int v22 = (llvm::Type *)**((void **)v22 + 2);
  }
  unsigned int v23 = llvm::Type::getPrimitiveSizeInBits(v22);
  unsigned int v337 = v23;
  v317 = a3;
  if (v23 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v336);
  }
  unint64_t v336 = 0;
  unsigned int v335 = v23;
  __dst = 0;
  unsigned int v24 = *((unsigned __int8 *)this + 16);
  if (v24 >= 0x1C && v24 - 59 >= 0xFFFFFFEE)
  {
    unint64_t v25 = v337;
    v341[0] = 0;
    switch(v24)
    {
      case ')':
        BOOL v26 = (unsigned __int8 *)*((void *)this - 4);
        __src = v341;
        v327 = 0;
        if (!sub_1CBF528D8((uint64_t)&__src, v26)) {
          goto LABEL_504;
        }
        int v27 = (unint64_t *)v341[0];
        uint64_t v28 = *((unsigned int *)v341[0] + 2);
        if (v28 > 0x40)
        {
          int v119 = 0;
          int64_t v120 = (unint64_t)(v28 + 63) >> 6;
          do
          {
            BOOL v65 = v120-- < 1;
            if (v65) {
              break;
            }
            unint64_t v121 = (*v341[0])[v120];
            v119 += __clz(v121);
          }
          while (!v121);
          int v122 = v28 | 0xFFFFFFC0;
          if ((v28 & 0x3F) == 0) {
            int v122 = 0;
          }
          if (v119 + v122 == v28 || !a6) {
            goto LABEL_504;
          }
        }
        else if (!*v341[0] || !a6)
        {
          goto LABEL_504;
        }
        unsigned int v124 = *((unsigned __int8 *)this + 17);
        int v125 = (v124 >> 1) & 1;
        if (v19) {
          int v125 = (v124 & 6) == 2;
        }
        if (v125 != 1)
        {
          if ((v124 & 4) == 0) {
            goto LABEL_504;
          }
          unsigned int v158 = *((_DWORD *)v341[0] + 2);
          unsigned int v159 = v158 - 1;
          if (v158 >= 0x41) {
            int v27 = &(*v341[0])[v159 >> 6];
          }
          if ((*v27 >> v159))
          {
            LODWORD(v327) = v25;
            if (v25 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&__src);
            }
            __src = (void *)(1 << (v25 - 1));
            if (v337 >= 0x41 && v336) {
              MEMORY[0x1D25D9CB0](v336, 0x1000C8000313F17);
            }
            unint64_t v336 = (unint64_t)__src;
            unsigned int v337 = v25;
            LODWORD(v323) = v25;
            if (v25) {
              unint64_t v160 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v25;
            }
            else {
              unint64_t v160 = 0;
            }
            v322 = (void *)(v160 & ~(1 << (v25 - 1)));
            unint64_t v161 = v341[0];
            goto LABEL_339;
          }
          LODWORD(v327) = v25;
          if (v25 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&__src);
          }
          unsigned int v215 = v25;
          __src = (void *)(1 << (v25 - 1));
          int v216 = v341[0];
          goto LABEL_493;
        }
        if (v337 <= 0x40)
        {
          unsigned int v84 = *((_DWORD *)v341[0] + 2);
          if (v84 <= 0x40)
          {
            uint64_t v85 = *v341[0];
            goto LABEL_121;
          }
        }
        if (&v336 == (unint64_t *)v341[0]) {
          goto LABEL_504;
        }
        llvm::APInt::reallocate((uint64_t)&v336, *((_DWORD *)v341[0] + 2));
        uint64_t v106 = v337;
        if (v337 > 0x40)
        {
          BOOL v107 = (void *)v336;
          int v108 = (const void *)*v27;
          goto LABEL_191;
        }
        unint64_t v289 = *v27;
        goto LABEL_705;
      case '/':
        int v57 = (unsigned __int8 *)*((void *)this - 4);
        __src = v341;
        v327 = 0;
        if (!sub_1CBF528D8((uint64_t)&__src, v57)) {
          goto LABEL_240;
        }
        uint64_t v58 = *((unsigned int *)v341[0] + 2);
        if (v58 > 0x40)
        {
          int v126 = 0;
          int64_t v127 = (unint64_t)(v58 + 63) >> 6;
          do
          {
            BOOL v65 = v127-- < 1;
            if (v65) {
              break;
            }
            unint64_t v128 = (*v341[0])[v127];
            v126 += __clz(v128);
          }
          while (!v128);
          int v129 = v58 | 0xFFFFFFC0;
          if ((v58 & 0x3F) == 0) {
            int v129 = 0;
          }
          if (v126 + v129 != v58) {
            goto LABEL_73;
          }
        }
        else if (*v341[0])
        {
LABEL_73:
          LODWORD(v323) = v25;
          if (v25 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v322);
          }
          if (v25) {
            uint64_t v59 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v25);
          }
          else {
            uint64_t v59 = 0;
          }
          v322 = v59;
          llvm::APInt::udiv((uint64_t)&v322, (const llvm::APInt *)v341[0], (uint64_t)&__src);
          goto LABEL_91;
        }
LABEL_240:
        uint64_t v86 = (unsigned __int8 *)*((void *)this - 8);
LABEL_241:
        __src = v341;
        v327 = 0;
        if (sub_1CBF528D8((uint64_t)&__src, v86)) {
          goto LABEL_431;
        }
        goto LABEL_504;
      case '0':
        unsigned int v46 = (unsigned __int8 *)*((void *)this - 4);
        __src = v341;
        v327 = 0;
        if (sub_1CBF528D8((uint64_t)&__src, v46))
        {
          LODWORD(v327) = v25;
          if (v25 >= 0x41) {
            llvm::APInt::initSlowCase((llvm::APInt *)&__src);
          }
          __src = (void *)(1 << (v25 - 1));
          LODWORD(v323) = v25;
          if (v25) {
            unint64_t v47 = 0xFFFFFFFFFFFFFFFFLL >> ((v25 - 1) & 0x3F ^ 0x3F);
          }
          else {
            unint64_t v47 = 0;
          }
          v322 = (void *)(v47 & ~(1 << (v25 - 1)));
          unsigned int v48 = (const llvm::APInt *)v341[0];
          uint64_t v49 = *((unsigned int *)v341[0] + 2);
          if (v49)
          {
            if (v49 > 0x40)
            {
              if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v341[0]) != v49)
              {
                int v180 = 0;
                int64_t v181 = (unint64_t)(v49 + 63) >> 6;
                do
                {
                  BOOL v65 = v181-- < 1;
                  if (v65) {
                    break;
                  }
                  unint64_t v182 = *(void *)(*(void *)v48 + 8 * v181);
                  v180 += __clz(v182);
                }
                while (!v182);
                int v183 = v49 | 0xFFFFFFC0;
                if ((v49 & 0x3F) == 0) {
                  int v183 = 0;
                }
                unsigned int v50 = v180 + v183;
LABEL_397:
                if (v50 >= (int)v25 - 1) {
                  goto LABEL_460;
                }
                llvm::APInt::sdiv((llvm::APInt *)&__src, v48, (uint64_t)&v318);
                if (v337 >= 0x41 && v336) {
                  MEMORY[0x1D25D9CB0](v336, 0x1000C8000313F17);
                }
                unint64_t v336 = v318;
                unsigned int v337 = v319;
                llvm::APInt::sdiv((llvm::APInt *)&v322, (const llvm::APInt *)v341[0], (uint64_t)&v318);
                if (v335 >= 0x41 && __dst) {
                  MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
                }
                unsigned int v184 = (unsigned int *)v318;
                __dst = (void *)v318;
                unsigned int v185 = v319;
                unsigned int v335 = v319;
                unsigned int v186 = v337;
                if (v337 > 0x40)
                {
                  int v187 = (void *)v336;
                  uint64_t v283 = *(void *)(v336 + 8 * ((v337 - 1) >> 6)) & (1 << (v337 - 1));
                  p_dst = (void **)(v318 + 8 * ((v319 - 1) >> 6));
                  if (v319 < 0x41) {
                    p_dst = &__dst;
                  }
                  if ((v283 != 0) == (((unint64_t)*p_dst >> (v319 - 1)) & 1))
                  {
                    unint64_t v286 = (((unint64_t)v337 + 63) >> 3) & 0x3FFFFFF8;
                    do
                    {
                      if (!v286) {
                        goto LABEL_406;
                      }
                      unint64_t v287 = *(void *)(v336 - 8 + v286);
                      unint64_t v288 = *(void *)(v318 - 8 + v286);
                      v286 -= 8;
                    }
                    while (v287 == v288);
                    if (v287 <= v288)
                    {
LABEL_406:
                      unsigned int v319 = v185;
                      if (v185 > 0x40) {
                        operator new[]();
                      }
                      unint64_t v318 = (unint64_t)v184;
                      llvm::APInt::operator+=((uint64_t)&v318, 1uLL);
                      unsigned int v150 = v319;
                      uint64_t v151 = (void *)v318;
                      unsigned int v319 = 0;
                      if (v335 > 0x40 && __dst)
                      {
                        MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
                        __dst = v151;
                        unsigned int v335 = v150;
                        if (v319 < 0x41) {
                          goto LABEL_460;
                        }
                        unint64_t v152 = v318;
                        if (!v318) {
                          goto LABEL_460;
                        }
                        goto LABEL_315;
                      }
                      goto LABEL_459;
                    }
                  }
                  else if (v283)
                  {
                    goto LABEL_406;
                  }
                }
                else
                {
                  int v187 = (void *)v336;
                  if ((uint64_t)(v336 << -(char)v337) >> -(char)v337 <= (uint64_t)(v318 << -(char)v337) >> -(char)v337) {
                    goto LABEL_406;
                  }
                }
                unint64_t v336 = v318;
                unsigned int v337 = v319;
                __dst = v187;
                unsigned int v184 = (unsigned int *)v187;
                unsigned int v185 = v186;
                unsigned int v335 = v186;
                goto LABEL_406;
              }
            }
            else if (*v341[0] != (unint64_t *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v49))
            {
              unsigned int v50 = v49 + __clz((unint64_t)*v341[0]) - 64;
              goto LABEL_397;
            }
          }
          unsigned int v319 = v327;
          if (v327 > 0x40) {
            operator new[]();
          }
          unint64_t v318 = (unint64_t)__src;
          llvm::APInt::operator+=((uint64_t)&v318, 1uLL);
          unsigned int v148 = v319;
          unint64_t v149 = v318;
          unsigned int v319 = 0;
          if (v337 > 0x40 && v336)
          {
            MEMORY[0x1D25D9CB0](v336, 0x1000C8000313F17);
            unint64_t v336 = v149;
            unsigned int v337 = v148;
            if (v319 >= 0x41 && v318) {
              MEMORY[0x1D25D9CB0](v318, 0x1000C8000313F17);
            }
          }
          else
          {
            unint64_t v336 = v318;
            unsigned int v337 = v148;
          }
          unsigned int v340 = v323;
          if (v323 > 0x40) {
            operator new[]();
          }
          v339 = v322;
          llvm::APInt::operator+=((uint64_t)&v339, 1uLL);
          unsigned int v150 = v340;
          uint64_t v151 = v339;
          unsigned int v340 = 0;
          if (v335 > 0x40 && __dst)
          {
            MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
            __dst = v151;
            unsigned int v335 = v150;
            if (v340 < 0x41 || (unint64_t v152 = (unint64_t)v339) == 0)
            {
LABEL_460:
              if (v323 >= 0x41 && v322) {
                MEMORY[0x1D25D9CB0](v322, 0x1000C8000313F17);
              }
              goto LABEL_463;
            }
LABEL_315:
            MEMORY[0x1D25D9CB0](v152, 0x1000C8000313F17);
            goto LABEL_460;
          }
LABEL_459:
          __dst = v151;
          unsigned int v335 = v150;
          goto LABEL_460;
        }
        unsigned int v102 = (unsigned __int8 *)*((void *)this - 8);
        __src = v341;
        v327 = 0;
        if (!sub_1CBF528D8((uint64_t)&__src, v102)) {
          goto LABEL_504;
        }
        unsigned int v103 = (const void **)v341[0];
        unsigned int v104 = *((_DWORD *)v341[0] + 2);
        if (v104 > 0x40)
        {
          if ((((*v341[0])[(v104 - 1) >> 6] >> (v104 - 1)) & 1) != 0
            && llvm::APInt::countTrailingZerosSlowCase(v341[0]) == v104 - 1)
          {
            goto LABEL_801;
          }
        }
        else
        {
          unint64_t v105 = (unint64_t)*v341[0];
          if (*v341[0] == (unint64_t *)(1 << (v104 - 1)))
          {
            if (v337 <= 0x40)
            {
              unint64_t v336 = (unint64_t)*v341[0];
              unsigned int v337 = v104;
              LODWORD(v327) = v104;
LABEL_804:
              if (v104 != 1)
              {
                unint64_t v157 = (void *)(v105 >> 1);
                goto LABEL_434;
              }
              __src = 0;
              goto LABEL_436;
            }
LABEL_801:
            if (&v336 != (unint64_t *)v103)
            {
              llvm::APInt::reallocate((uint64_t)&v336, v104);
              unsigned int v104 = v337;
              if (v337 <= 0x40)
              {
                unint64_t v105 = (unint64_t)*v103;
                unint64_t v336 = (unint64_t)*v103;
                LODWORD(v327) = v337;
                goto LABEL_804;
              }
              memcpy((void *)v336, *v103, (((unint64_t)v337 + 63) >> 3) & 0x3FFFFFF8);
            }
            unsigned int v104 = v337;
            LODWORD(v327) = v337;
            if (v337 > 0x40) {
              operator new[]();
            }
            unint64_t v105 = v336;
            goto LABEL_804;
          }
        }
        sub_1CBF71A98((const llvm::APInt *)v103, (llvm::APInt *)&__src);
        llvm::APInt::operator+=((uint64_t)&__src, 1uLL);
        unsigned int v290 = v327;
        v291 = __src;
        LODWORD(v327) = 0;
        if (v335 > 0x40 && __dst)
        {
          MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
          __dst = v291;
          unsigned int v335 = v290;
          if (v327 >= 0x41 && __src)
          {
            MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
            unsigned int v290 = v335;
          }
        }
        else
        {
          __dst = __src;
          unsigned int v335 = v290;
        }
        unsigned int v319 = v290;
        if (v290 > 0x40) {
          operator new[]();
        }
        if (v290) {
          unint64_t v292 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v290;
        }
        else {
          unint64_t v292 = 0;
        }
        unint64_t v318 = v292 & ~(unint64_t)__dst;
        llvm::APInt::operator++((uint64_t)&v318);
        LODWORD(v323) = v319;
        v322 = (void *)v318;
        unsigned int v319 = 0;
        llvm::APInt::operator+=((uint64_t)&v322, 1uLL);
        unsigned int v293 = v323;
        unint64_t v294 = v322;
        LODWORD(v323) = 0;
        if (v337 > 0x40 && v336)
        {
          MEMORY[0x1D25D9CB0](v336, 0x1000C8000313F17);
          unint64_t v336 = (unint64_t)v294;
          unsigned int v337 = v293;
          if (v323 >= 0x41 && v322) {
            MEMORY[0x1D25D9CB0](v322, 0x1000C8000313F17);
          }
        }
        else
        {
          unint64_t v336 = (unint64_t)v322;
          unsigned int v337 = v293;
        }
        if (v319 >= 0x41 && v318) {
          goto LABEL_466;
        }
        goto LABEL_504;
      case '2':
        uint64_t v79 = (unsigned __int8 *)*((void *)this - 4);
        __src = v341;
        v327 = 0;
        if (!sub_1CBF528D8((uint64_t)&__src, v79)) {
          goto LABEL_504;
        }
        unsigned int v80 = v341[0];
        if (v335 <= 0x40)
        {
          unsigned int v81 = *((_DWORD *)v341[0] + 2);
          if (v81 <= 0x40)
          {
            __dst = *v341[0];
            goto LABEL_146;
          }
        }
        if (&__dst == (void **)v341[0]) {
          goto LABEL_504;
        }
        llvm::APInt::reallocate((uint64_t)&__dst, *((_DWORD *)v341[0] + 2));
        uint64_t v106 = v335;
        if (v335 > 0x40)
        {
          BOOL v107 = __dst;
          goto LABEL_190;
        }
        uint64_t v32 = *v80;
        goto LABEL_34;
      case '3':
        BOOL v82 = (unsigned __int8 *)*((void *)this - 4);
        __src = v341;
        v327 = 0;
        if (!sub_1CBF528D8((uint64_t)&__src, v82)) {
          goto LABEL_504;
        }
        sub_1CBF71A98((const llvm::APInt *)v341[0], (llvm::APInt *)&__src);
        if (v335 >= 0x41 && __dst) {
          MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
        }
        __dst = __src;
        unsigned int v335 = v327;
        LODWORD(v323) = v327;
        if (v327 >= 0x41) {
          operator new[]();
        }
        if (v327) {
          unint64_t v130 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v327;
        }
        else {
          unint64_t v130 = 0;
        }
        v322 = (void *)(v130 & ~(unint64_t)__src);
        llvm::APInt::operator++((uint64_t)&v322);
        LODWORD(v327) = v323;
        __src = v322;
        LODWORD(v323) = 0;
        llvm::APInt::operator+=((uint64_t)&__src, 1uLL);
        unsigned int v131 = v327;
        unsigned int v132 = __src;
        LODWORD(v327) = 0;
        if (v337 > 0x40 && v336)
        {
          MEMORY[0x1D25D9CB0](v336, 0x1000C8000313F17);
          unsigned int v71 = v327;
          unint64_t v336 = (unint64_t)v132;
          unsigned int v337 = v131;
          goto LABEL_249;
        }
        unint64_t v336 = (unint64_t)__src;
        unsigned int v337 = v131;
        goto LABEL_253;
      case '5':
        uint64_t v51 = (unsigned __int8 *)*((void *)this - 8);
        __src = v341;
        v327 = 0;
        if (!sub_1CBF528D8((uint64_t)&__src, v51)) {
          goto LABEL_504;
        }
        if (a6 && (*((unsigned char *)this + 17) & 2) != 0)
        {
          unsigned int v52 = (const void **)v341[0];
          unsigned int v53 = v337;
          if (v337 <= 0x40)
          {
            unsigned int v54 = *((_DWORD *)v341[0] + 2);
            if (v54 < 0x41)
            {
              unint64_t v55 = (unint64_t)*v341[0];
              unint64_t v336 = v55;
              unsigned int v337 = v54;
              int v56 = v54 + __clz(v55) - 64;
              LODWORD(v327) = v54;
              unsigned int v53 = v54;
              goto LABEL_368;
            }
          }
          if (&v336 != (unint64_t *)v341[0])
          {
            llvm::APInt::reallocate((uint64_t)&v336, *((_DWORD *)v341[0] + 2));
            unsigned int v53 = v337;
            if (v337 <= 0x40)
            {
              unint64_t v55 = (unint64_t)*v52;
              unint64_t v336 = v55;
LABEL_297:
              int v56 = v53 + __clz(v55) - 64;
              LODWORD(v327) = v53;
LABEL_368:
              unint64_t v174 = v55 << v56;
              if (v53 == v56) {
                unint64_t v174 = 0;
              }
              if (v53) {
                unint64_t v175 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v53;
              }
              else {
                unint64_t v175 = 0;
              }
              __src = (void *)(v175 & v174);
              llvm::APInt::operator+=((uint64_t)&__src, 1uLL);
              unsigned int v176 = v327;
              int v177 = __src;
              LODWORD(v327) = 0;
              if (v335 >= 0x41 && __dst) {
                MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
              }
              __dst = v177;
              unsigned int v335 = v176;
LABEL_463:
              unsigned int v198 = v327;
              goto LABEL_464;
            }
            memcpy((void *)v336, *v52, (((unint64_t)v337 + 63) >> 3) & 0x3FFFFFF8);
            unsigned int v53 = v337;
          }
          if (v53 > 0x40)
          {
            int v171 = 0;
            int64_t v172 = ((unint64_t)v53 + 63) >> 6;
            do
            {
              BOOL v65 = v172-- < 1;
              if (v65) {
                break;
              }
              unint64_t v173 = *(void *)(v336 + 8 * v172);
              v171 += __clz(v173);
            }
            while (!v173);
            LODWORD(v327) = v53;
            operator new[]();
          }
          unint64_t v55 = v336;
          goto LABEL_297;
        }
        if ((*((unsigned char *)this + 17) & 4) == 0) {
          goto LABEL_504;
        }
        unsigned int v112 = v341[0];
        uint64_t v113 = *((unsigned int *)v341[0] + 2);
        unsigned int v114 = v113 - 1;
        if (v113 > 0x40)
        {
          if (((*v341[0])[v114 >> 6] >> v114))
          {
            llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)v341[0]);
            LODWORD(v327) = v113;
            operator new[]();
          }
          int v208 = 0;
          int64_t v209 = (unint64_t)(v113 + 63) >> 6;
          do
          {
            BOOL v65 = v209-- < 1;
            if (v65) {
              break;
            }
            unint64_t v210 = (*v341[0])[v209];
            v208 += __clz(v210);
          }
          while (!v210);
          v316 = a4;
          int v211 = (v113 | 0xFFFFFFC0) - 1;
          if ((v113 & 0x3F) == 0) {
            int v211 = -1;
          }
          int v207 = v211 + v208;
        }
        else
        {
          unint64_t v115 = (unint64_t)*v341[0];
          if (((unint64_t)*v341[0] >> v114))
          {
            int v116 = __clz(~(v115 << -(char)v113)) - 1;
            if (!v113) {
              int v116 = -1;
            }
            LODWORD(v327) = *((_DWORD *)v341[0] + 2);
            unint64_t v117 = v115 << v116;
            if (v113 == v116) {
              unint64_t v117 = 0;
            }
            if (v113) {
              unint64_t v118 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v113;
            }
            else {
              unint64_t v118 = 0;
            }
            __src = (void *)(v118 & v117);
            goto LABEL_426;
          }
          v316 = a4;
          int v207 = v113 + __clz(v115) - 65;
          if (v337 < 0x41)
          {
            unint64_t v336 = (unint64_t)*v341[0];
            unsigned int v337 = v113;
            goto LABEL_483;
          }
        }
        if (&v336 != (unint64_t *)v341[0])
        {
          llvm::APInt::reallocate((uint64_t)&v336, v113);
          if (v337 <= 0x40) {
            unint64_t v336 = (unint64_t)*v112;
          }
          else {
            memcpy((void *)v336, *v112, (((unint64_t)v337 + 63) >> 3) & 0x3FFFFFF8);
          }
        }
        unsigned int v112 = v341[0];
LABEL_483:
        unsigned int v212 = *((_DWORD *)v112 + 2);
        LODWORD(v327) = v212;
        if (v212 > 0x40) {
          operator new[]();
        }
        uint64_t v213 = (void)*v112 << v207;
        if (v212 == v207) {
          uint64_t v213 = 0;
        }
        unint64_t v214 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v212;
        if (!v212) {
          unint64_t v214 = 0;
        }
        __src = (void *)(v214 & v213);
        llvm::APInt::operator+=((uint64_t)&__src, 1uLL);
        unsigned int v196 = v327;
        char v197 = __src;
        LODWORD(v327) = 0;
        a4 = v316;
        if (v335 > 0x40) {
          goto LABEL_437;
        }
        goto LABEL_503;
      case '6':
        unsigned int v60 = (unsigned __int8 *)*((void *)this - 4);
        __src = v341;
        v327 = 0;
        if (!sub_1CBF528D8((uint64_t)&__src, v60)) {
          goto LABEL_147;
        }
        uint64_t v61 = *((unsigned int *)v341[0] + 2);
        unsigned int v62 = v341[0];
        if (v61 < 0x41) {
          goto LABEL_86;
        }
        int v63 = 0;
        int64_t v64 = (unint64_t)(v61 + 63) >> 6;
        do
        {
          BOOL v65 = v64-- < 1;
          if (v65) {
            break;
          }
          unint64_t v66 = (*v341[0])[v64];
          v63 += __clz(v66);
        }
        while (!v66);
        int v67 = v61 | 0xFFFFFFC0;
        if ((v61 & 0x3F) == 0) {
          int v67 = 0;
        }
        if ((v61 - v63 - v67) <= 0x40)
        {
          unsigned int v62 = (unint64_t **)*v341[0];
LABEL_86:
          if ((unint64_t)*v62 < v25)
          {
            LODWORD(v323) = v25;
            if (v25 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v322);
            }
            if (v25) {
              int v68 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v25);
            }
            else {
              int v68 = 0;
            }
            v322 = v68;
            LODWORD(v327) = v25;
            __src = v68;
            llvm::APInt::lshrInPlace((llvm::APInt *)&__src, (const llvm::APInt *)v341[0]);
LABEL_91:
            llvm::APInt::operator+=((uint64_t)&__src, 1uLL);
            unsigned int v69 = v327;
            int v70 = __src;
            LODWORD(v327) = 0;
            if (v335 > 0x40 && __dst)
            {
              MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
              unsigned int v71 = v327;
              __dst = v70;
              unsigned int v335 = v69;
LABEL_249:
              if (v71 >= 0x41 && __src) {
                MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
              }
            }
            else
            {
              __dst = __src;
              unsigned int v335 = v69;
            }
LABEL_253:
            unsigned int v133 = v323;
LABEL_254:
            if (v133 < 0x41 || !v322) {
              goto LABEL_504;
            }
LABEL_466:
            MEMORY[0x1D25D9CB0]();
            goto LABEL_504;
          }
        }
LABEL_147:
        unsigned int v89 = (unsigned __int8 *)*((void *)this - 8);
        __src = v341;
        v327 = 0;
        if (!sub_1CBF528D8((uint64_t)&__src, v89)) {
          goto LABEL_504;
        }
        uint64_t v90 = *((unsigned int *)v341[0] + 2);
        if (v90 > 0x40)
        {
          int v134 = 0;
          int64_t v135 = (unint64_t)(v90 + 63) >> 6;
          do
          {
            BOOL v65 = v135-- < 1;
            if (v65) {
              break;
            }
            unint64_t v136 = (*v341[0])[v135];
            v134 += __clz(v136);
          }
          while (!v136);
          int v137 = v90 | 0xFFFFFFC0;
          if ((v90 & 0x3F) == 0) {
            int v137 = 0;
          }
          BOOL v91 = v134 + v137 == v90;
        }
        else
        {
          BOOL v91 = *v341[0] == 0;
        }
        char v138 = v91;
        v315 = a4;
        if ((v138 & 1) == 0
          && a6
          && (unsigned int v139 = *((unsigned __int8 *)this + 16), v139 <= 0x37)
          && ((1 << v139) & 0xC1800000000000) != 0
          && (*((unsigned char *)this + 17) & 2) != 0)
        {
          if (v90 <= 0x40)
          {
            unint64_t v141 = (unint64_t)*v341[0];
            unsigned int v179 = __clz(__rbit64((unint64_t)*v341[0]));
            if (v90 >= v179) {
              unsigned int v140 = v179;
            }
            else {
              unsigned int v140 = *((_DWORD *)v341[0] + 2);
            }
            LODWORD(v327) = *((_DWORD *)v341[0] + 2);
            goto LABEL_273;
          }
          llvm::APInt::countTrailingZerosSlowCase(v341[0]);
          LODWORD(v327) = v90;
        }
        else
        {
          unsigned int v140 = v25 - 1;
          LODWORD(v327) = *((_DWORD *)v341[0] + 2);
          if (v90 <= 0x40)
          {
            unint64_t v141 = (unint64_t)*v341[0];
LABEL_273:
            if (v90 == v140)
            {
              unint64_t v142 = 0;
              __src = 0;
            }
            else
            {
              unint64_t v142 = v141 >> v140;
              __src = (void *)v142;
            }
            a4 = v315;
            if (v337 >= 0x41 && v336) {
              MEMORY[0x1D25D9CB0](v336, 0x1000C8000313F17);
            }
            unint64_t v336 = v142;
LABEL_430:
            unsigned int v337 = v327;
LABEL_431:
            int v195 = v341[0];
            goto LABEL_432;
          }
        }
        operator new[]();
      case '7':
        uint64_t v72 = (unsigned __int8 *)*((void *)this - 4);
        __src = v341;
        v327 = 0;
        if (!sub_1CBF528D8((uint64_t)&__src, v72)) {
          goto LABEL_150;
        }
        uint64_t v73 = v341[0];
        uint64_t v74 = *((unsigned int *)v341[0] + 2);
        if (v74 < 0x41) {
          goto LABEL_103;
        }
        int v75 = 0;
        int64_t v76 = (unint64_t)(v74 + 63) >> 6;
        do
        {
          BOOL v65 = v76-- < 1;
          if (v65) {
            break;
          }
          unint64_t v77 = (*v341[0])[v76];
          v75 += __clz(v77);
        }
        while (!v77);
        int v78 = v74 | 0xFFFFFFC0;
        if ((v74 & 0x3F) == 0) {
          int v78 = 0;
        }
        if ((v74 - v75 - v78) <= 0x40)
        {
          uint64_t v73 = (unint64_t **)*v341[0];
LABEL_103:
          if ((unint64_t)*v73 < v25)
          {
            LODWORD(v323) = v25;
            if (v25 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v322);
            }
            LODWORD(v327) = v25;
            __src = (void *)(1 << (v25 - 1));
            llvm::APInt::ashrInPlace((unsigned int *)&__src, (const llvm::APInt *)v341[0]);
            if (v337 >= 0x41 && v336) {
              MEMORY[0x1D25D9CB0](v336, 0x1000C8000313F17);
            }
            unint64_t v336 = (unint64_t)__src;
            unsigned int v337 = v327;
            LODWORD(v323) = v25;
            if (v25) {
              unint64_t v168 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v25;
            }
            else {
              unint64_t v168 = 0;
            }
            v322 = (void *)(v168 & ~(1 << (v25 - 1)));
            LODWORD(v327) = v25;
            __src = v322;
            llvm::APInt::ashrInPlace((unsigned int *)&__src, (const llvm::APInt *)v341[0]);
            llvm::APInt::operator+=((uint64_t)&__src, 1uLL);
            unsigned int v169 = v327;
            char v170 = __src;
            LODWORD(v327) = 0;
            if (v335 > 0x40 && __dst)
            {
              MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
              __dst = v170;
              unsigned int v335 = v169;
              if (v327 >= 0x41 && __src) {
                MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
              }
            }
            else
            {
              __dst = __src;
              unsigned int v335 = v169;
            }
            goto LABEL_504;
          }
        }
LABEL_150:
        unsigned int v92 = (unsigned __int8 *)*((void *)this - 8);
        __src = v341;
        v327 = 0;
        if (!sub_1CBF528D8((uint64_t)&__src, v92)) {
          goto LABEL_504;
        }
        v314 = a4;
        int v93 = v341[0];
        uint64_t v94 = *((unsigned int *)v341[0] + 2);
        if (v94 <= 0x40)
        {
          BOOL v99 = *v341[0] == 0;
        }
        else
        {
          int v95 = 0;
          int64_t v96 = (unint64_t)(v94 + 63) >> 6;
          do
          {
            BOOL v65 = v96-- < 1;
            if (v65) {
              break;
            }
            unint64_t v97 = (*v341[0])[v96];
            v95 += __clz(v97);
          }
          while (!v97);
          int v98 = v94 | 0xFFFFFFC0;
          if ((v94 & 0x3F) == 0) {
            int v98 = 0;
          }
          BOOL v99 = v95 + v98 == v94;
        }
        char v143 = v99;
        if ((v143 & 1) == 0
          && a6
          && (unsigned int v144 = *((unsigned __int8 *)this + 16), v144 <= 0x37)
          && ((1 << v144) & 0xC1800000000000) != 0
          && (*((unsigned char *)this + 17) & 2) != 0)
        {
          if (v94 <= 0x40)
          {
            unsigned int v199 = __clz(__rbit64((unint64_t)*v341[0]));
            if (v94 >= v199) {
              int v145 = v199;
            }
            else {
              int v145 = *((_DWORD *)v341[0] + 2);
            }
            LOBYTE(v146) = v94 - 1;
            uint64_t v147 = v341[0];
LABEL_290:
            if (((unint64_t)*v147 >> v146))
            {
              if (v94 > 0x40 || v337 > 0x40)
              {
                if (&v336 != (unint64_t *)v93)
                {
                  llvm::APInt::reallocate((uint64_t)&v336, v94);
                  if (v337 <= 0x40) {
                    unint64_t v336 = (unint64_t)*v93;
                  }
                  else {
                    memcpy((void *)v336, *v93, (((unint64_t)v337 + 63) >> 3) & 0x3FFFFFF8);
                  }
                }
                int v93 = v341[0];
              }
              else
              {
                unint64_t v336 = (unint64_t)*v93;
                unsigned int v337 = v94;
              }
              unsigned int v153 = *((_DWORD *)v93 + 2);
              LODWORD(v327) = v153;
              a4 = v314;
              if (v153 > 0x40) {
                operator new[]();
              }
              if (v153 == v145) {
                char v154 = 63;
              }
              else {
                char v154 = v145;
              }
              uint64_t v155 = (uint64_t)((void)*v93 << -(char)v153) >> -(char)v153 >> v154;
              if (v153) {
                unint64_t v156 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v153;
              }
              else {
                unint64_t v156 = 0;
              }
              unint64_t v157 = (void *)(v156 & v155);
              goto LABEL_434;
            }
            LODWORD(v327) = v94;
            if (v94 > 0x40) {
              operator new[]();
            }
            if (v94 == v145) {
              char v188 = 63;
            }
            else {
              char v188 = v145;
            }
            uint64_t v189 = (uint64_t)((void)*v93 << -(char)v94) >> -(char)v94 >> v188;
            if (v94) {
              unint64_t v190 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v94;
            }
            else {
              unint64_t v190 = 0;
            }
            __src = (void *)(v190 & v189);
            a4 = v314;
LABEL_426:
            if (v337 >= 0x41 && v336) {
              MEMORY[0x1D25D9CB0](v336, 0x1000C8000313F17);
            }
            unint64_t v336 = (unint64_t)__src;
            goto LABEL_430;
          }
          int v145 = llvm::APInt::countTrailingZerosSlowCase(v341[0]);
          unsigned int v146 = v94 - 1;
        }
        else
        {
          int v145 = v25 - 1;
          unsigned int v146 = v94 - 1;
          uint64_t v147 = v341[0];
          if (v94 < 0x41) {
            goto LABEL_290;
          }
        }
        uint64_t v147 = (unint64_t **)&(*v93)[v146 >> 6];
        goto LABEL_290;
      case '8':
        uint64_t v86 = (unsigned __int8 *)*((void *)this - 4);
        goto LABEL_241;
      case '9':
        unsigned int v83 = (unsigned __int8 *)*((void *)this - 4);
        __src = v341;
        v327 = 0;
        if (!sub_1CBF528D8((uint64_t)&__src, v83)) {
          goto LABEL_504;
        }
        unsigned int v80 = v341[0];
        goto LABEL_118;
      default:
        goto LABEL_504;
    }
  }
  if (v24 == 85)
  {
    char v313 = a4;
    __src = 0;
    v322 = 0;
    int matched = llvm::matchSelectPattern((uint64_t)this, (uint64_t)&__src, &v322, 0, 0);
    if (!matched)
    {
LABEL_208:
      a4 = v313;
      goto LABEL_504;
    }
    int v34 = *(llvm::Type **)this;
    if ((*(_DWORD *)(*(void *)this + 8) & 0xFE) == 0x12) {
      int v34 = (llvm::Type *)**((void **)v34 + 2);
    }
    uint64_t v35 = (unsigned __int8 *)v322;
    int v36 = (unsigned __int8 *)__src;
    unsigned int v37 = llvm::Type::getPrimitiveSizeInBits(v34);
    unsigned int v38 = v37;
    if (matched == 8)
    {
      LODWORD(v327) = v37;
      if (v37 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&__src);
      }
      unsigned int v100 = v37;
      __src = (void *)(1 << (v37 - 1));
      if (v337 >= 0x41 && v336) {
        MEMORY[0x1D25D9CB0](v336, 0x1000C8000313F17);
      }
      unint64_t v336 = (unint64_t)__src;
      unsigned int v337 = v100;
      LODWORD(v327) = v38;
      if (v38 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&__src);
      }
      if (v38) {
        unint64_t v101 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v38;
      }
      else {
        LOBYTE(v101) = 0;
      }
      __src = (void *)(v101 & 1);
      if (v335 >= 0x41 && __dst) {
        MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
      }
      __dst = __src;
      unsigned int v335 = v327;
      goto LABEL_208;
    }
    if (matched != 7)
    {
      unint64_t v318 = 0;
      __src = &v318;
      v327 = 0;
      if ((sub_1CBF528D8((uint64_t)&__src, v36) & 1) != 0
        || (v322 = &v318, uint64_t v323 = 0, (sub_1CBF528D8((uint64_t)&v322, v35) & 1) != 0))
      {
        switch(matched)
        {
          case 1:
            LODWORD(v327) = v38;
            if (v38 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&__src);
            }
            __src = (void *)(1 << (v38 - 1));
            if (v337 >= 0x41 && v336) {
              MEMORY[0x1D25D9CB0](v336, 0x1000C8000313F17);
            }
            unint64_t v336 = (unint64_t)__src;
            unsigned int v337 = v38;
            goto LABEL_177;
          case 2:
LABEL_177:
            LODWORD(v327) = *(_DWORD *)(v318 + 8);
            if (v327 > 0x40) {
              operator new[]();
            }
            __src = *(void **)v318;
            goto LABEL_202;
          case 3:
            uint64_t v164 = (const void **)v318;
            if (v337 > 0x40 || (unsigned int v165 = *(_DWORD *)(v318 + 8), v165 > 0x40))
            {
              if (&v336 != (unint64_t *)v318)
              {
                llvm::APInt::reallocate((uint64_t)&v336, *(_DWORD *)(v318 + 8));
                if (v337 <= 0x40) {
                  unint64_t v336 = (unint64_t)*v164;
                }
                else {
                  memcpy((void *)v336, *v164, (((unint64_t)v337 + 63) >> 3) & 0x3FFFFFF8);
                }
              }
            }
            else
            {
              unint64_t v336 = *(void *)v318;
              unsigned int v337 = v165;
            }
            goto LABEL_377;
          case 4:
            uint64_t v166 = (const void **)v318;
            if (v337 > 0x40 || (unsigned int v167 = *(_DWORD *)(v318 + 8), v167 > 0x40))
            {
              if (&v336 != (unint64_t *)v318)
              {
                llvm::APInt::reallocate((uint64_t)&v336, *(_DWORD *)(v318 + 8));
                if (v337 <= 0x40) {
                  unint64_t v336 = (unint64_t)*v166;
                }
                else {
                  memcpy((void *)v336, *v166, (((unint64_t)v337 + 63) >> 3) & 0x3FFFFFF8);
                }
              }
            }
            else
            {
              unint64_t v336 = *(void *)v318;
              unsigned int v337 = v167;
            }
            goto LABEL_208;
          default:
            goto LABEL_208;
        }
      }
      goto LABEL_208;
    }
    LODWORD(v327) = v37;
    if (v37 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&__src);
    }
    __src = 0;
    if (v337 >= 0x41 && v336) {
      MEMORY[0x1D25D9CB0](v336, 0x1000C8000313F17);
    }
    unint64_t v336 = (unint64_t)__src;
    unsigned int v337 = v327;
    v327 = v36;
    int v39 = v35[16];
    if (v39 == 5)
    {
      if (*((_WORD *)v35 + 9) != 15
        || !sub_1CC03F414((uint64_t)&__src, *(llvm::Constant **)&v35[-32 * (*((_DWORD *)v35 + 5) & 0x7FFFFFF)]))
      {
        goto LABEL_199;
      }
      char v40 = *(unsigned __int8 **)&v35[-32 * (*((_DWORD *)v35 + 5) & 0x7FFFFFF) + 32];
    }
    else
    {
      if (v39 != 43 || !sub_1CBF535C4((uint64_t)&__src, *((llvm::Constant **)v35 - 8))) {
        goto LABEL_199;
      }
      char v40 = (unsigned __int8 *)*((void *)v35 - 4);
    }
    if (v327 == v40 && a6 && (v35[17] & 4) != 0)
    {
LABEL_377:
      LODWORD(v327) = v38;
      if (v38 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&__src);
      }
      if (v38) {
        unint64_t v178 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v38;
      }
      else {
        unint64_t v178 = 0;
      }
      __src = (void *)v178;
      int v109 = (void *)(v178 & ~(1 << (v38 - 1)));
LABEL_201:
      __src = v109;
LABEL_202:
      llvm::APInt::operator+=((uint64_t)&__src, 1uLL);
      unsigned int v110 = v327;
      uint64_t v111 = __src;
      LODWORD(v327) = 0;
      if (v335 > 0x40 && __dst)
      {
        MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
        __dst = v111;
        unsigned int v335 = v110;
        if (v327 >= 0x41 && __src) {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
      }
      else
      {
        __dst = __src;
        unsigned int v335 = v110;
      }
      goto LABEL_208;
    }
LABEL_199:
    LODWORD(v327) = v38;
    if (v38 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&__src);
    }
    __src = 0;
    int v109 = (void *)(1 << (v38 - 1));
    goto LABEL_201;
  }
  if (v24 != 84)
  {
    if (v24 - 69 <= 1)
    {
      int v41 = *(llvm::Type **)this;
      if ((*(_DWORD *)(*(void *)this + 8) & 0xFE) == 0x12) {
        int v41 = (llvm::Type *)**((void **)v41 + 2);
      }
      unsigned int v42 = llvm::Type::getPrimitiveSizeInBits(v41);
      unsigned int v43 = v42;
      int v44 = *((_DWORD *)this + 5);
      if ((v44 & 0x40000000) != 0) {
        char v45 = (uint64_t **)*((void *)this - 1);
      }
      else {
        char v45 = (uint64_t **)((char *)this - 32 * (v44 & 0x7FFFFFF));
      }
      uint64_t v87 = **v45;
      if ((*(_DWORD *)(v87 + 8) & 0xFE) == 0x12) {
        int v88 = *(unsigned __int8 *)(**(void **)(v87 + 16) + 8);
      }
      else {
        int v88 = *(_DWORD *)(v87 + 8);
      }
      if (!v88)
      {
        if (v24 == 70 && v42 >= 0x11)
        {
          LODWORD(v327) = v42;
          if (v42 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&__src);
          }
          __src = (void *)((0xFFFFFFFFFFFFFFFFLL >> -(char)v42) & 0xFFFFFFFFFFFF0020);
          if (v337 >= 0x41 && v336) {
            MEMORY[0x1D25D9CB0](v336, 0x1000C8000313F17);
          }
          unint64_t v336 = (unint64_t)__src;
          unsigned int v337 = v327;
          LODWORD(v327) = v43;
          if (v43 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&__src);
          }
          __src = (void *)((0xFFFFFFFFFFFFFFFFLL >> -(char)v43) & 0xFFE1);
          if (v335 >= 0x41 && __dst) {
            MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
          }
          __dst = __src;
          unsigned int v335 = v327;
          unsigned int v24 = *((unsigned __int8 *)this + 16);
        }
        if (v24 == 69 && v43 >= 0x10)
        {
          LODWORD(v327) = v43;
          if (v43 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&__src);
          }
          __src = (void *)((0xFFFFFFFFFFFFFFFFLL >> -(char)v43) & 0xFFE1);
          if (v335 >= 0x41 && __dst) {
            MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
          }
          __dst = __src;
          unsigned int v81 = v327;
LABEL_146:
          unsigned int v335 = v81;
        }
      }
    }
    goto LABEL_504;
  }
  uint64_t v29 = *((void *)this - 4);
  if (!v29
    || *(unsigned char *)(v29 + 16)
    || *(void *)(v29 + 24) != *((void *)this + 9)
    || (*(unsigned char *)(v29 + 33) & 0x20) == 0)
  {
    goto LABEL_504;
  }
  LODWORD(v25) = v337;
  unint64_t v318 = 0;
  int v30 = *(_DWORD *)(v29 + 36);
  if (v30 > 282)
  {
    if (v30 <= 304)
    {
      if (v30 != 283)
      {
        if (v30 != 300) {
          goto LABEL_504;
        }
        uint64_t v205 = (unsigned __int8 *)*((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
        __src = &v318;
        v327 = 0;
        if ((sub_1CBF528D8((uint64_t)&__src, v205) & 1) == 0)
        {
          uint64_t v206 = (unsigned __int8 *)((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[4];
          v322 = &v318;
          uint64_t v323 = 0;
          if ((sub_1CBF528D8((uint64_t)&v322, v206) & 1) == 0) {
            goto LABEL_504;
          }
        }
        goto LABEL_593;
      }
      unsigned int v262 = (unsigned __int8 *)*((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
      __src = &v318;
      v327 = 0;
      if (sub_1CBF528D8((uint64_t)&__src, v262))
      {
        unsigned int v263 = (uint64_t **)v318;
        unsigned int v264 = *(_DWORD *)(v318 + 8);
        unsigned int v265 = v264 - 1;
        v266 = (void *)v318;
        if (v264 >= 0x41) {
          v266 = (void *)(*(void *)v318 + 8 * (v265 >> 6));
        }
        if ((*v266 >> v265))
        {
          LODWORD(v327) = v25;
          if (v25 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&__src);
          }
          __src = (void *)(1 << (v25 - 1));
          if (v337 >= 0x41 && v336) {
            MEMORY[0x1D25D9CB0](v336, 0x1000C8000313F17);
          }
          unint64_t v336 = (unint64_t)__src;
          unsigned int v337 = v25;
          int v267 = (uint64_t **)v318;
          LODWORD(v323) = v25;
          v322 = (void *)(1 << (v25 - 1));
          if (v25) {
            unint64_t v268 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v323;
          }
          else {
            unint64_t v268 = 0;
          }
          v322 = (void *)(v268 & ~(unint64_t)v322);
          llvm::APInt::operator++((uint64_t)&v322);
          int v269 = v323;
          if (v323 >= 0x41)
          {
            uint64_t v295 = 0;
            int v296 = (unint64_t *)v322;
            int v297 = *v267;
            unint64_t v298 = ((unint64_t)v323 + 63) >> 6;
            unint64_t v299 = v298;
            do
            {
              uint64_t v300 = *v297++;
              unint64_t v301 = v300 + *v296;
              BOOL v302 = v301 + 1 <= *v296;
              if (v295)
              {
                ++v301;
                uint64_t v295 = v302;
              }
              else
              {
                uint64_t v295 = v301 < *v296;
              }
              *v296++ = v301;
              --v299;
            }
            while (v299);
            *((void *)v322 + (v298 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v269;
            int v269 = v323;
            unsigned int v271 = v322;
          }
          else
          {
            if (v323) {
              unint64_t v270 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v323;
            }
            else {
              unint64_t v270 = 0;
            }
            unsigned int v271 = (void *)(v270 & ((unint64_t)*v267 + (void)v322));
            v322 = v271;
          }
          LODWORD(v327) = v269;
          __src = v271;
          LODWORD(v323) = 0;
          goto LABEL_91;
        }
        LODWORD(v327) = v25;
        if (v25 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&__src);
        }
        if (v25) {
          unint64_t v277 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v25;
        }
        else {
          unint64_t v277 = 0;
        }
        __src = (void *)(v277 & ~(1 << (v25 - 1)));
        if (v327 > 0x40)
        {
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&__src);
        }
        else
        {
          if (v327) {
            unint64_t v278 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v327;
          }
          else {
            unint64_t v278 = 0;
          }
          __src = (void *)(v278 & ~(unint64_t)__src);
        }
        llvm::APInt::operator++((uint64_t)&__src);
        unsigned int v279 = v327;
        if (v327 >= 0x41)
        {
          uint64_t v303 = 0;
          v304 = (unint64_t *)__src;
          v305 = *v263;
          unint64_t v306 = ((unint64_t)v327 + 63) >> 6;
          unint64_t v307 = v306;
          do
          {
            uint64_t v308 = *v305++;
            unint64_t v309 = v308 + *v304;
            BOOL v310 = v309 + 1 <= *v304;
            if (v303)
            {
              ++v309;
              uint64_t v303 = v310;
            }
            else
            {
              uint64_t v303 = v309 < *v304;
            }
            *v304++ = v309;
            --v307;
          }
          while (v307);
          *((void *)__src + (v306 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v279;
          unsigned int v279 = v327;
          unint64_t v282 = (unint64_t)__src;
        }
        else
        {
          unint64_t v280 = (unint64_t)*v263 + (void)__src;
          if (v327) {
            unint64_t v281 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v327;
          }
          else {
            unint64_t v281 = 0;
          }
          unint64_t v282 = v281 & v280;
          __src = (void *)(v281 & v280);
        }
        LODWORD(v327) = 0;
        if (v337 > 0x40 && v336)
        {
          MEMORY[0x1D25D9CB0](v336, 0x1000C8000313F17);
          unint64_t v336 = v282;
          unsigned int v337 = v279;
          if (v327 >= 0x41 && __src) {
            MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
        }
        else
        {
          unint64_t v336 = v282;
          unsigned int v337 = v279;
        }
LABEL_635:
        LODWORD(v327) = v25;
        if (v25 <= 0x40)
        {
          if (!v25) {
            goto LABEL_598;
          }
LABEL_637:
          unint64_t v255 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v25;
          goto LABEL_638;
        }
LABEL_730:
        llvm::APInt::initSlowCase((llvm::APInt *)&__src);
      }
      uint64_t v273 = (unsigned __int8 *)((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[4];
      __src = &v318;
      v327 = 0;
      if (!sub_1CBF528D8((uint64_t)&__src, v273)) {
        goto LABEL_504;
      }
      unint64_t v274 = (void *)v318;
      unsigned int v275 = *(_DWORD *)(v318 + 8);
      unsigned int v276 = v275 - 1;
      if (v275 >= 0x41) {
        unint64_t v274 = (void *)(*(void *)v318 + 8 * (v276 >> 6));
      }
      if ((*v274 >> v276))
      {
        LODWORD(v327) = v25;
        if (v25 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&__src);
        }
        unsigned int v215 = v25;
        __src = (void *)(1 << (v25 - 1));
        unint64_t v217 = (unint64_t)__src - *(void *)v318;
        if (v25)
        {
LABEL_494:
          unint64_t v218 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v215;
LABEL_495:
          unint64_t v219 = v218 & v217;
          __src = (void *)(v218 & v217);
          LODWORD(v327) = 0;
          if (v337 > 0x40 && v336) {
            MEMORY[0x1D25D9CB0](v336, 0x1000C8000313F17);
          }
          unint64_t v336 = v219;
          unsigned int v337 = v215;
          LODWORD(v323) = v25;
          if (v25) {
            unint64_t v220 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v25;
          }
          else {
            unint64_t v220 = 0;
          }
          v322 = (void *)(v220 & ~(1 << (v25 - 1)));
          llvm::APInt::operator+=((uint64_t)&v322, 1uLL);
          unsigned int v196 = v323;
          char v197 = v322;
          LODWORD(v323) = 0;
          if (v335 > 0x40 && __dst)
          {
            MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
            unsigned int v133 = v323;
            __dst = v197;
            unsigned int v335 = v196;
            goto LABEL_254;
          }
LABEL_503:
          __dst = v197;
          unsigned int v335 = v196;
          goto LABEL_504;
        }
LABEL_650:
        unint64_t v218 = 0;
        goto LABEL_495;
      }
      LODWORD(v327) = v25;
      if (v25 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&__src);
      }
      __src = (void *)(1 << (v25 - 1));
      if (v337 >= 0x41 && v336) {
        MEMORY[0x1D25D9CB0](v336, 0x1000C8000313F17);
      }
      unint64_t v336 = (unint64_t)__src;
      unsigned int v337 = v25;
      LODWORD(v323) = v25;
      if (v25) {
        unint64_t v285 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v25;
      }
      else {
        unint64_t v285 = 0;
      }
      v322 = (void *)(v285 & ~(1 << (v25 - 1)));
      uint64_t v194 = (void *)v318;
    }
    else
    {
      if ((v30 - 305) < 2) {
        goto LABEL_446;
      }
      if (v30 != 311) {
        goto LABEL_504;
      }
      uint64_t v191 = (unsigned __int8 *)*((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
      __src = &v318;
      v327 = 0;
      if (sub_1CBF528D8((uint64_t)&__src, v191)) {
        goto LABEL_633;
      }
      unint64_t v192 = (unsigned __int8 *)((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[4];
      __src = &v318;
      v327 = 0;
      if (!sub_1CBF528D8((uint64_t)&__src, v192)) {
        goto LABEL_504;
      }
      LODWORD(v323) = v25;
      if (v25 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v322);
      }
      if (v25) {
        uint64_t v193 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v25);
      }
      else {
        uint64_t v193 = 0;
      }
      v322 = v193;
      uint64_t v194 = (void *)v318;
    }
    unint64_t v162 = (unint64_t)v322 - *v194;
    if (v25)
    {
LABEL_340:
      unint64_t v163 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v25;
LABEL_341:
      v322 = (void *)(v163 & v162);
      LODWORD(v327) = v25;
      __src = (void *)(v163 & v162);
      LODWORD(v323) = 0;
      goto LABEL_436;
    }
LABEL_694:
    unint64_t v163 = 0;
    goto LABEL_341;
  }
  if (v30 > 261)
  {
    if ((v30 - 274) < 2)
    {
LABEL_446:
      unsigned int v200 = (unsigned __int8 *)*((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
      __src = &v318;
      v327 = 0;
      if ((sub_1CBF528D8((uint64_t)&__src, v200) & 1) == 0)
      {
        int v201 = (unsigned __int8 *)((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[4];
        v322 = &v318;
        uint64_t v323 = 0;
        if ((sub_1CBF528D8((uint64_t)&v322, v201) & 1) == 0) {
          goto LABEL_504;
        }
      }
      int v202 = *(_DWORD *)(*((void *)this - 4) + 36);
      if (v202 <= 304)
      {
        if (v202 == 274)
        {
          unsigned int v203 = (const void **)v318;
          if (v337 > 0x40 || (unsigned int v204 = *(_DWORD *)(v318 + 8), v204 > 0x40))
          {
            if (&v336 != (unint64_t *)v318)
            {
              llvm::APInt::reallocate((uint64_t)&v336, *(_DWORD *)(v318 + 8));
              if (v337 <= 0x40) {
                unint64_t v336 = (unint64_t)*v203;
              }
              else {
                memcpy((void *)v336, *v203, (((unint64_t)v337 + 63) >> 3) & 0x3FFFFFF8);
              }
            }
          }
          else
          {
            unint64_t v336 = *(void *)v318;
            unsigned int v337 = v204;
          }
          goto LABEL_635;
        }
        LODWORD(v327) = v25;
        if (v25 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&__src);
        }
        __src = (void *)(1 << (v25 - 1));
        if (v337 >= 0x41 && v336) {
          MEMORY[0x1D25D9CB0](v336, 0x1000C8000313F17);
        }
        unint64_t v336 = (unint64_t)__src;
        unsigned int v337 = v25;
LABEL_633:
        int v195 = (unint64_t **)v318;
LABEL_432:
        LODWORD(v327) = *((_DWORD *)v195 + 2);
        if (v327 > 0x40) {
          operator new[]();
        }
        unint64_t v157 = *v195;
LABEL_434:
        __src = v157;
        goto LABEL_436;
      }
      if (v202 != 305) {
        goto LABEL_633;
      }
LABEL_593:
      unsigned int v80 = (unint64_t **)v318;
LABEL_118:
      if (v337 > 0x40 || (unsigned int v84 = *((_DWORD *)v80 + 2), v84 > 0x40))
      {
        if (&v336 != (unint64_t *)v80)
        {
          llvm::APInt::reallocate((uint64_t)&v336, *((_DWORD *)v80 + 2));
          uint64_t v106 = v337;
          if (v337 <= 0x40)
          {
            unint64_t v289 = (unint64_t)*v80;
LABEL_705:
            unint64_t v336 = v289;
          }
          else
          {
            BOOL v107 = (void *)v336;
LABEL_190:
            int v108 = *v80;
LABEL_191:
            memcpy(v107, v108, ((unint64_t)(v106 + 63) >> 3) & 0x3FFFFFF8);
          }
        }
      }
      else
      {
        uint64_t v85 = *v80;
LABEL_121:
        unint64_t v336 = (unint64_t)v85;
        unsigned int v337 = v84;
      }
      goto LABEL_504;
    }
    if (v30 != 262) {
      goto LABEL_504;
    }
    int v256 = (unsigned __int8 *)*((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
    __src = &v318;
    v327 = 0;
    if ((sub_1CBF528D8((uint64_t)&__src, v256) & 1) == 0)
    {
      uint64_t v257 = (unsigned __int8 *)((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[4];
      v322 = &v318;
      uint64_t v323 = 0;
      if ((sub_1CBF528D8((uint64_t)&v322, v257) & 1) == 0) {
        goto LABEL_504;
      }
    }
    int v258 = (void *)v318;
    unsigned int v259 = *(_DWORD *)(v318 + 8);
    unsigned int v260 = v259 - 1;
    if (v259 >= 0x41) {
      int v258 = (void *)(*(void *)v318 + 8 * (v260 >> 6));
    }
    if ((*v258 >> v260))
    {
      LODWORD(v327) = v25;
      if (v25 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&__src);
      }
      __src = (void *)(1 << (v25 - 1));
      if (v337 >= 0x41 && v336) {
        MEMORY[0x1D25D9CB0](v336, 0x1000C8000313F17);
      }
      unint64_t v336 = (unint64_t)__src;
      unsigned int v337 = v25;
      LODWORD(v323) = v25;
      if (v25) {
        unint64_t v261 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v25;
      }
      else {
        unint64_t v261 = 0;
      }
      v322 = (void *)(v261 & ~(1 << (v25 - 1)));
      unint64_t v161 = (unint64_t **)v318;
LABEL_339:
      unint64_t v162 = (unint64_t)*v161 + (void)v322;
      if (v25) {
        goto LABEL_340;
      }
      goto LABEL_694;
    }
    LODWORD(v327) = v25;
    if (v25 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&__src);
    }
    unsigned int v215 = v25;
    __src = (void *)(1 << (v25 - 1));
    int v216 = (unint64_t **)v318;
LABEL_493:
    unint64_t v217 = (unint64_t)*v216 + (void)__src;
    if (v215) {
      goto LABEL_494;
    }
    goto LABEL_650;
  }
  if ((v30 - 52) < 3)
  {
    if (v335) {
      unint64_t v31 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v335;
    }
    else {
      LODWORD(v31) = 0;
    }
    uint64_t v32 = (unint64_t *)(v31 & (v337 + 1));
LABEL_34:
    __dst = v32;
    goto LABEL_504;
  }
  if (v30 != 1) {
    goto LABEL_504;
  }
  if (!sub_1CBF5250C((uint64_t)&__src, ((llvm::Constant **)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[4]))
  {
    LODWORD(v327) = v25;
    if (v25 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&__src);
    }
    __src = 0;
    char v272 = (void *)(1 << (v25 - 1));
    goto LABEL_643;
  }
  LODWORD(v327) = v25;
  if (v25 > 0x40) {
    goto LABEL_730;
  }
  if (v25) {
    goto LABEL_637;
  }
LABEL_598:
  unint64_t v255 = 0;
LABEL_638:
  __src = (void *)v255;
  char v272 = (void *)(v255 & ~(1 << (v25 - 1)));
LABEL_643:
  __src = v272;
LABEL_436:
  llvm::APInt::operator+=((uint64_t)&__src, 1uLL);
  unsigned int v196 = v327;
  char v197 = __src;
  LODWORD(v327) = 0;
  if (v335 <= 0x40) {
    goto LABEL_503;
  }
LABEL_437:
  if (!__dst) {
    goto LABEL_503;
  }
  MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
  unsigned int v198 = v327;
  __dst = v197;
  unsigned int v335 = v196;
LABEL_464:
  if (v198 >= 0x41 && __src) {
    goto LABEL_466;
  }
LABEL_504:
  unsigned int v333 = v337;
  if (v337 > 0x40) {
    operator new[]();
  }
  unint64_t v332 = v336;
  unsigned int v331 = v335;
  if (v335 > 0x40) {
    operator new[]();
  }
  v330 = __dst;
  sub_1CC062A8C(&v332, (uint64_t)&v330, (uint64_t)a8);
  if (v331 >= 0x41 && v330) {
    MEMORY[0x1D25D9CB0](v330, 0x1000C8000313F17);
  }
  if (v333 >= 0x41 && v332) {
    MEMORY[0x1D25D9CB0](v332, 0x1000C8000313F17);
  }
  if (*((unsigned __int8 *)this + 16) < 0x1Cu || !a6 || (*((unsigned char *)this + 23) & 0x20) == 0) {
    goto LABEL_540;
  }
  uint64_t v222 = ***(void ***)this;
  __src = this;
  int v223 = *(_DWORD *)(v222 + 2496);
  if (v223)
  {
    uint64_t v224 = *(void *)(v222 + 2480);
    int v225 = v223 - 1;
    unsigned int v226 = v225 & ((this >> 4) ^ (this >> 9));
    unint64_t v227 = (llvm **)(v224 + 40 * v226);
    int v228 = *v227;
    if (*v227 == this) {
      goto LABEL_529;
    }
    uint64_t v229 = 0;
    int v230 = 1;
    while (v228 != (llvm *)-4096)
    {
      if (v229) {
        BOOL v231 = 0;
      }
      else {
        BOOL v231 = v228 == (llvm *)-8192;
      }
      if (v231) {
        uint64_t v229 = v227;
      }
      unsigned int v232 = v226 + v230++;
      unsigned int v226 = v232 & v225;
      unint64_t v227 = (llvm **)(v224 + 40 * v226);
      int v228 = *v227;
      if (*v227 == this) {
        goto LABEL_529;
      }
    }
    if (v229) {
      int v244 = v229;
    }
    else {
      int v244 = v227;
    }
  }
  else
  {
    int v244 = 0;
  }
  unint64_t v227 = (llvm **)sub_1CC609054(v222 + 2480, (uint64_t)&__src, (uint64_t *)&__src, v244);
  unsigned int v245 = (llvm *)__src;
  v227[3] = 0;
  v227[4] = 0;
  *unint64_t v227 = v245;
  v227[1] = (llvm *)(v227 + 3);
  v227[2] = (llvm *)0x100000000;
LABEL_529:
  uint64_t v233 = *((unsigned int *)v227 + 4);
  if (v233)
  {
    int v234 = (uint64_t *)((char *)v227[1] + 8);
    uint64_t v235 = 16 * v233;
    while (*((_DWORD *)v234 - 2) != 4)
    {
      v234 += 2;
      v235 -= 16;
      if (!v235) {
        goto LABEL_540;
      }
    }
    if (*v234)
    {
      llvm::getConstantRangeFromMetadata(*v234, (uint64_t)&v322);
      llvm::ConstantRange::intersectWith((uint64_t)a8, (llvm::ConstantRange *)&v322, 0, (uint64_t)&__src);
      if (*((_DWORD *)a8 + 2) >= 0x41u && *a8) {
        MEMORY[0x1D25D9CB0](*a8, 0x1000C8000313F17);
      }
      *a8 = __src;
      *((_DWORD *)a8 + 2) = v327;
      LODWORD(v327) = 0;
      if (*((_DWORD *)a8 + 6) >= 0x41u && (uint64_t v311 = a8[2]) != 0)
      {
        MEMORY[0x1D25D9CB0](v311, 0x1000C8000313F17);
        unsigned int v312 = v327;
        a8[2] = v328;
        *((_DWORD *)a8 + 6) = v329;
        unsigned int v329 = 0;
        if (v312 >= 0x41 && __src) {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
      }
      else
      {
        a8[2] = v328;
        *((_DWORD *)a8 + 6) = v329;
        unsigned int v329 = 0;
      }
      if (v325 >= 0x41 && v324) {
        MEMORY[0x1D25D9CB0](v324, 0x1000C8000313F17);
      }
      if (v323 >= 0x41 && v322) {
        MEMORY[0x1D25D9CB0](v322, 0x1000C8000313F17);
      }
    }
  }
LABEL_540:
  if (a7 && v317)
  {
    if (!*(unsigned char *)(a7 + 184)) {
      llvm::AssumptionCache::scanFunction((llvm::AssumptionCache *)a7);
    }
    uint64_t v236 = *(void *)(a7 + 160);
    unsigned int v237 = *(_DWORD *)(a7 + 176);
    if (v237)
    {
      unsigned int v239 = v237 - 1;
      unsigned int v240 = (v237 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v238 = v236 + 88 * v240;
      char v241 = *(llvm **)(v238 + 24);
      if (v241 == this) {
        goto LABEL_546;
      }
      int v242 = 1;
      while (v241 != (llvm *)-4096)
      {
        unsigned int v243 = v240 + v242++;
        unsigned int v240 = v243 & v239;
        uint64_t v238 = v236 + 88 * (v243 & v239);
        char v241 = *(llvm **)(v238 + 24);
        if (v241 == this) {
          goto LABEL_546;
        }
      }
    }
    uint64_t v238 = v236 + 88 * v237;
LABEL_546:
    if (v238 != v236 + 88 * v237)
    {
      uint64_t v246 = *(unsigned int *)(v238 + 48);
      if (v246)
      {
        char v247 = (const llvm::DominatorTree *)(v14 + 1);
        uint64_t v248 = 32 * v246;
        int v249 = (llvm **)(*(void *)(v238 + 40) + 16);
        do
        {
          int v250 = *v249;
          if (*v249)
          {
            if (llvm::isValidAssumeForContext(*v249, v317, a4, v221))
            {
              uint64_t v252 = *((void *)v250 - 4 * (*((_DWORD *)v250 + 5) & 0x7FFFFFF));
              if (v252)
              {
                if (*(unsigned char *)(v252 + 16) == 81 && *(llvm **)(v252 - 64) == this)
                {
                  llvm::computeConstantRange((uint64_t *)&__src, *(llvm **)(v252 - 32), 0, a6, a7, v250, a4, v247, v251);
                  llvm::ConstantRange::makeAllowedICmpRegion((llvm::ConstantRange *)&__src, *(_WORD *)(v252 + 18) & 0x3F, (uint64_t)&v318);
                  llvm::ConstantRange::intersectWith((uint64_t)a8, (llvm::ConstantRange *)&v318, 0, (uint64_t)&v322);
                  if (*((_DWORD *)a8 + 2) >= 0x41u && *a8) {
                    MEMORY[0x1D25D9CB0](*a8, 0x1000C8000313F17);
                  }
                  *a8 = v322;
                  *((_DWORD *)a8 + 2) = v323;
                  LODWORD(v323) = 0;
                  if (*((_DWORD *)a8 + 6) >= 0x41u && (uint64_t v253 = a8[2]) != 0)
                  {
                    MEMORY[0x1D25D9CB0](v253, 0x1000C8000313F17);
                    unsigned int v254 = v323;
                    a8[2] = v324;
                    *((_DWORD *)a8 + 6) = v325;
                    unsigned int v325 = 0;
                    if (v254 >= 0x41 && v322) {
                      MEMORY[0x1D25D9CB0](v322, 0x1000C8000313F17);
                    }
                  }
                  else
                  {
                    a8[2] = v324;
                    *((_DWORD *)a8 + 6) = v325;
                    unsigned int v325 = 0;
                  }
                  if (v321 >= 0x41 && v320) {
                    MEMORY[0x1D25D9CB0](v320, 0x1000C8000313F17);
                  }
                  if (v319 >= 0x41 && v318) {
                    MEMORY[0x1D25D9CB0](v318, 0x1000C8000313F17);
                  }
                  if (v329 >= 0x41 && v328) {
                    MEMORY[0x1D25D9CB0](v328, 0x1000C8000313F17);
                  }
                  if (v327 >= 0x41 && __src) {
                    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                  }
                }
              }
            }
          }
          v249 += 4;
          v248 -= 32;
        }
        while (v248);
      }
    }
  }
  if (v335 >= 0x41 && __dst) {
    MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
  }
  if (v337 >= 0x41 && v336) {
    MEMORY[0x1D25D9CB0](v336, 0x1000C8000313F17);
  }
}

uint64_t sub_1CC173AC0(uint64_t a1, unsigned int a2, llvm::DataLayout *a3)
{
  unsigned int v4 = a2;
  BOOL v6 = *(unsigned char *)(a1 + 16) != 62 || a1 == 0;
  uint64_t v7 = 64;
  if (v6) {
    uint64_t v7 = 24;
  }
  uint64_t v8 = *(void *)(a1 + v7);
  int v9 = *(_DWORD *)(a1 + 20);
  if ((v9 & 0x40000000) != 0) {
    uint64_t v10 = *(void *)(a1 - 8);
  }
  else {
    uint64_t v10 = a1 - 32 * (v9 & 0x7FFFFFF);
  }
  int v39 = (llvm::Constant **)(v10 + 32);
  uint64_t v40 = v8 | 4;
  unsigned int v11 = a2 - 1;
  if (a2 != 1)
  {
    do
    {
      sub_1CB8460E4((uint64_t)&v39);
      --v11;
    }
    while (v11);
    int v9 = *(_DWORD *)(a1 + 20);
  }
  int v12 = v9 & 0x7FFFFFF;
  if ((v9 & 0x7FFFFFF) != v4)
  {
    uint64_t v13 = 0;
    while (1)
    {
      int v14 = *(_DWORD *)(a1 + 20);
      if ((v14 & 0x40000000) != 0) {
        uint64_t v15 = *(void *)(a1 - 8);
      }
      else {
        uint64_t v15 = a1 - 32 * (v14 & 0x7FFFFFF);
      }
      uint64_t v16 = *(void *)(v15 + 32 * v4);
      if (v16) {
        BOOL v17 = *(unsigned char *)(v16 + 16) == 16;
      }
      else {
        BOOL v17 = 0;
      }
      if (!v17) {
        return 0;
      }
      int v18 = (uint64_t *)(v16 + 24);
      uint64_t v19 = *(unsigned int *)(v16 + 32);
      if (v19 > 0x40)
      {
        int v20 = 0;
        int64_t v21 = (unint64_t)(v19 + 63) >> 6;
        do
        {
          if (v21-- < 1) {
            break;
          }
          unint64_t v23 = *(void *)(*v18 + 8 * v21);
          v20 += __clz(v23);
        }
        while (!v23);
        int v24 = v19 | 0xFFFFFFC0;
        if ((v19 & 0x3F) == 0) {
          int v24 = 0;
        }
        if (v20 + v24 == v19) {
          goto LABEL_52;
        }
      }
      else if (!*v18)
      {
        goto LABEL_52;
      }
      unint64_t v25 = (llvm::Type *)(v40 & 0xFFFFFFFFFFFFFFF8);
      if ((v40 & 4) != 0 || !v25)
      {
        if ((v40 & 4) == 0 || !v25)
        {
          AggregateElement = *v39;
          if (*v39) {
            BOOL v28 = *((unsigned char *)*v39 + 16) == 16;
          }
          else {
            BOOL v28 = 0;
          }
          if (!v28) {
            AggregateElement = (llvm::Constant *)llvm::Constant::getAggregateElement(AggregateElement, 0);
          }
          unint64_t v31 = (unsigned int *)*((void *)AggregateElement + 3);
          uint64_t v29 = (unsigned int *)((char *)AggregateElement + 24);
          int v30 = v31;
          if (v29[2] < 0x41) {
            int v30 = v29;
          }
          unint64_t v25 = *(llvm::Type **)(*((void *)v25 + 2) + 8 * *v30);
        }
        uint64_t v32 = sub_1CB83544C((uint64_t)a3, (uint64_t)v25);
        BOOL v34 = v33 == 1;
        char Alignment = llvm::DataLayout::getAlignment(a3, v25, 1);
        if (v34) {
          return 0;
        }
        unsigned int v36 = *(_DWORD *)(v16 + 32);
        if (v36 > 0x40) {
          uint64_t v37 = *(void *)*v18;
        }
        else {
          uint64_t v37 = *v18 << -(char)v36 >> -(char)v36;
        }
        v13 += v37 * (((1 << Alignment) + ((unint64_t)(v32 + 7) >> 3) - 1) & -(1 << Alignment));
      }
      else
      {
        StructLayout = llvm::DataLayout::getStructLayout(a3, (llvm::StructType *)(v40 & 0xFFFFFFFFFFFFFFF8));
        if (*(_DWORD *)(v16 + 32) >= 0x41u) {
          int v18 = (uint64_t *)*v18;
        }
        v13 += *((void *)StructLayout + *(unsigned int *)v18 + 2);
      }
LABEL_52:
      ++v4;
      sub_1CB8460E4((uint64_t)&v39);
      if (v4 == v12) {
        return v13;
      }
    }
  }
  return 0;
}

uint64_t sub_1CC173D40(llvm::Constant *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)a1;
  unsigned int v6 = *(_DWORD *)(*(void *)a1 + 8);
  if (v6 == 19) {
    return 1;
  }
  if ((v6 & 0xFE) == 0x12)
  {
    uint64_t v10 = *(uint64_t **)(v5 + 16);
    uint64_t v5 = *v10;
    unsigned int v6 = *(_DWORD *)(*v10 + 8);
  }
  unsigned int v11 = *(const llvm::DataLayout **)a4;
  if (v6 == 15)
  {
    if ((v6 & 0xFE) == 0x12) {
      unsigned int v6 = *(_DWORD *)(**(void **)(v5 + 16) + 8);
    }
    if (v6 < 0x100) {
      goto LABEL_16;
    }
    unsigned int v12 = v6 >> 8;
    uint64_t v13 = *((unsigned int *)v11 + 60);
    uint64_t v14 = *((void *)v11 + 29);
    if (v13)
    {
      uint64_t v14 = *((void *)v11 + 29);
      unint64_t v15 = *((unsigned int *)v11 + 60);
      do
      {
        unint64_t v16 = v15 >> 1;
        uint64_t v17 = v14 + 16 * (v15 >> 1);
        unsigned int v18 = *(_DWORD *)(v17 + 8);
        uint64_t v19 = v17 + 16;
        v15 += ~(v15 >> 1);
        if (v18 < v12) {
          uint64_t v14 = v19;
        }
        else {
          unint64_t v15 = v16;
        }
      }
      while (v15);
    }
    if (v14 == *((void *)v11 + 29) + 16 * v13 || *(_DWORD *)(v14 + 8) != v12) {
LABEL_16:
    }
      uint64_t v14 = *((void *)v11 + 29);
    uint64_t v20 = *(unsigned int *)(v14 + 4);
  }
  else
  {
    uint64_t v20 = sub_1CB83544C((uint64_t)v11, v5);
    if (v21 == 1) {
  }
    }
  if (a3 == 6) {
    return 1;
  }
  unsigned int v23 = *((unsigned __int8 *)a1 + 16);
  if (v23 > 0x1B || v23 == 5)
  {
    if (v23 > 0x1B) {
      unsigned int v25 = v23 - 28;
    }
    else {
      unsigned int v25 = *((unsigned __int16 *)a1 + 9);
    }
    unsigned int v24 = 1;
    switch(v25)
    {
      case 0xDu:
        int v52 = *((_DWORD *)a1 + 5);
        if ((v52 & 0x40000000) != 0) {
          unsigned int v53 = (void *)*((void *)a1 - 1);
        }
        else {
          unsigned int v53 = (void *)((char *)a1 - 32 * (v52 & 0x7FFFFFF));
        }
        uint64_t v98 = sub_1CC162D6C(*v53, a3 + 1, a4);
        if (v98 == 1) {
          goto LABEL_331;
        }
        uint64_t v99 = v98;
        int v100 = *((_DWORD *)a1 + 5);
        if ((v100 & 0x40000000) != 0) {
          unint64_t v101 = (char *)*((void *)a1 - 1);
        }
        else {
          unint64_t v101 = (char *)a1 - 32 * (v100 & 0x7FFFFFF);
        }
        unsigned int v124 = (unsigned __int8 *)*((void *)v101 + 4);
        if (v124 && v124[16] <= 0x14u && llvm::Constant::isAllOnesValue((llvm::Constant *)v124))
        {
          LODWORD(__src[1]) = v20;
          if (v20 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)__src);
          }
          DWORD2(v262[0]) = v20;
          __src[0] = 0;
          *(void *)&v262[0] = 0;
          int v125 = *((_DWORD *)a1 + 5);
          if ((v125 & 0x40000000) != 0) {
            int v126 = (uint64_t *)*((void *)a1 - 1);
          }
          else {
            int v126 = (uint64_t *)((char *)a1 - 32 * (v125 & 0x7FFFFFF));
          }
          sub_1CC15FBF8(*v126, (int8x8_t *)__src, a3 + 1, (const llvm::DataLayout **)a4);
          if (LODWORD(__src[1]) > 0x40) {
            operator new[]();
          }
          if (LODWORD(__src[1]))
          {
            BOOL v164 = 0;
            uint64_t v22 = v20;
            if ((((unint64_t)__src[0] | 1) & (0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]))) != 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]))
            {
              BOOL v164 = (((unint64_t)__src[0] >> (LOBYTE(__src[1]) - 1)) & 1) == 0;
              uint64_t v22 = v99;
            }
          }
          else
          {
            BOOL v164 = 0;
            uint64_t v22 = v20;
          }
          if (DWORD2(v262[0]) >= 0x41 && *(void *)&v262[0]) {
            MEMORY[0x1D25D9CB0](*(void *)&v262[0], 0x1000C8000313F17);
          }
          if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
            MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
          }
          if (!v164) {
            return v22;
          }
        }
        int v166 = *((_DWORD *)a1 + 5);
        if ((v166 & 0x40000000) != 0) {
          unsigned int v167 = (char *)*((void *)a1 - 1);
        }
        else {
          unsigned int v167 = (char *)a1 - 32 * (v166 & 0x7FFFFFF);
        }
        unsigned int v168 = sub_1CC162D6C(*((void *)v167 + 4), a3 + 1, a4);
        if (v168 == 1) {
          goto LABEL_331;
        }
        if (v168 >= v99) {
          unsigned int v169 = v99;
        }
        else {
          unsigned int v169 = v168;
        }
        return v169 - 1;
      case 0xEu:
      case 0x10u:
      case 0x12u:
      case 0x13u:
      case 0x15u:
      case 0x16u:
      case 0x18u:
      case 0x1Au:
        goto LABEL_332;
      case 0xFu:
        int v60 = *((_DWORD *)a1 + 5);
        if ((v60 & 0x40000000) != 0) {
          uint64_t v61 = (char *)*((void *)a1 - 1);
        }
        else {
          uint64_t v61 = (char *)a1 - 32 * (v60 & 0x7FFFFFF);
        }
        uint64_t v115 = sub_1CC162D6C(*((void *)v61 + 4), a3 + 1, a4);
        if (v115 == 1) {
          goto LABEL_331;
        }
        uint64_t v116 = v115;
        int v117 = *((_DWORD *)a1 + 5);
        if ((v117 & 0x40000000) != 0) {
          unint64_t v118 = (uint64_t *)*((void *)a1 - 1);
        }
        else {
          unint64_t v118 = (uint64_t *)((char *)a1 - 32 * (v117 & 0x7FFFFFF));
        }
        uint64_t v141 = *v118;
        if (!*v118) {
          goto LABEL_306;
        }
        unsigned int v142 = *(unsigned __int8 *)(v141 + 16);
        if (v142 > 0x14) {
          goto LABEL_306;
        }
        if (v142 == 16)
        {
          uint64_t v143 = *(unsigned int *)(v141 + 32);
          if (v143 >= 0x41)
          {
            int v237 = 0;
            int64_t v238 = (unint64_t)(v143 + 63) >> 6;
            do
            {
              BOOL v88 = v238-- < 1;
              if (v88) {
                break;
              }
              unint64_t v239 = *(void *)(*(void *)(v141 + 24) + 8 * v238);
              v237 += __clz(v239);
            }
            while (!v239);
            int v240 = v143 | 0xFFFFFFC0;
            if ((v143 & 0x3F) == 0) {
              int v240 = 0;
            }
            if (v237 + v240 != v143) {
              goto LABEL_306;
            }
          }
          else if (*(void *)(v141 + 24))
          {
            goto LABEL_306;
          }
        }
        else if (v142 == 17)
        {
          if ((sub_1CB844168(v141, 0.0) & 1) == 0) {
            goto LABEL_306;
          }
        }
        else if (v142 - 18 >= 3 && v142 != 13)
        {
          goto LABEL_306;
        }
        LODWORD(__src[1]) = v20;
        if (v20 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)__src);
        }
        DWORD2(v262[0]) = v20;
        __src[0] = 0;
        *(void *)&v262[0] = 0;
        int v144 = *((_DWORD *)a1 + 5);
        if ((v144 & 0x40000000) != 0) {
          int v145 = (char *)*((void *)a1 - 1);
        }
        else {
          int v145 = (char *)a1 - 32 * (v144 & 0x7FFFFFF);
        }
        sub_1CC15FBF8(*((void *)v145 + 4), (int8x8_t *)__src, a3 + 1, (const llvm::DataLayout **)a4);
        if (LODWORD(__src[1]) > 0x40) {
          operator new[]();
        }
        if (LODWORD(__src[1]))
        {
          BOOL v165 = 0;
          uint64_t v22 = v20;
          if ((((unint64_t)__src[0] | 1) & (0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]))) != 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]))
          {
            BOOL v165 = (((unint64_t)__src[0] >> (LOBYTE(__src[1]) - 1)) & 1) == 0;
            uint64_t v22 = v116;
          }
        }
        else
        {
          BOOL v165 = 0;
          uint64_t v22 = v20;
        }
        if (DWORD2(v262[0]) >= 0x41 && *(void *)&v262[0]) {
          MEMORY[0x1D25D9CB0](*(void *)&v262[0], 0x1000C8000313F17);
        }
        if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
          MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
        }
        if (!v165) {
          return v22;
        }
LABEL_306:
        int v182 = *((_DWORD *)a1 + 5);
        if ((v182 & 0x40000000) != 0) {
          int v183 = (void *)*((void *)a1 - 1);
        }
        else {
          int v183 = (void *)((char *)a1 - 32 * (v182 & 0x7FFFFFF));
        }
        unsigned int v184 = sub_1CC162D6C(*v183, a3 + 1, a4);
        if (v184 == 1) {
          goto LABEL_331;
        }
        if (v116 >= v184) {
          unsigned int v169 = v184;
        }
        else {
          unsigned int v169 = v116;
        }
        return v169 - 1;
      case 0x11u:
        int v54 = *((_DWORD *)a1 + 5);
        if ((v54 & 0x40000000) != 0) {
          unint64_t v55 = (void *)*((void *)a1 - 1);
        }
        else {
          unint64_t v55 = (void *)((char *)a1 - 32 * (v54 & 0x7FFFFFF));
        }
        int v102 = sub_1CC162D6C(*v55, a3 + 1, a4);
        if (v102 == 1) {
          goto LABEL_332;
        }
        int v103 = v102;
        int v104 = *((_DWORD *)a1 + 5);
        unint64_t v105 = (v104 & 0x40000000) != 0
             ? (llvm::Constant *)*((void *)a1 - 1)
             : (llvm::Constant *)((char *)a1 - 32 * (v104 & 0x7FFFFFF));
        int v127 = sub_1CC162D6C(*((void *)v105 + 4), a3 + 1, a4);
        if (v127 == 1) {
          goto LABEL_332;
        }
        unsigned int v128 = 2 * v20 - (v103 + v127) + 2;
        BOOL v129 = v20 >= v128;
        int v130 = v20 - v128;
        if (v129) {
          return (v130 + 1);
        }
        else {
          return 1;
        }
      case 0x14u:
        unsigned int v265 = 0;
        int v50 = *((_DWORD *)a1 + 5);
        if ((v50 & 0x40000000) != 0) {
          uint64_t v51 = (char *)*((void *)a1 - 1);
        }
        else {
          uint64_t v51 = (char *)a1 - 32 * (v50 & 0x7FFFFFF);
        }
        int v93 = (unsigned __int8 *)*((void *)v51 + 4);
        __src[0] = &v265;
        __src[1] = 0;
        if (!sub_1CBF528D8((uint64_t)__src, v93)) {
          goto LABEL_331;
        }
        uint64_t v94 = *((unsigned int *)v265 + 2);
        unsigned int v95 = v94 - 1;
        if (v94 > 0x40)
        {
          if ((*(void *)(*v265 + 8 * (v95 >> 6)) >> v95)) {
            goto LABEL_331;
          }
          int v223 = 0;
          int64_t v224 = (unint64_t)(v94 + 63) >> 6;
          do
          {
            BOOL v88 = v224-- < 1;
            if (v88) {
              break;
            }
            unint64_t v225 = *(void *)(*v265 + 8 * v224);
            v223 += __clz(v225);
          }
          while (!v225);
          int v226 = v94 | 0xFFFFFFC0;
          if ((v94 & 0x3F) == 0) {
            int v226 = 0;
          }
          if (v223 + v226 == v94) {
            goto LABEL_331;
          }
        }
        else if (!*v265 || (*v265 & (1 << v95)) != 0)
        {
          goto LABEL_331;
        }
        int v96 = *((_DWORD *)a1 + 5);
        if ((v96 & 0x40000000) != 0) {
          unint64_t v97 = (void *)*((void *)a1 - 1);
        }
        else {
          unint64_t v97 = (void *)((char *)a1 - 32 * (v96 & 0x7FFFFFF));
        }
        int v153 = sub_1CC162D6C(*v97, a3 + 1, a4);
        uint64_t v154 = *((unsigned int *)v265 + 2);
        if (v154 > 0x40)
        {
          int v156 = 0;
          int64_t v157 = (unint64_t)(v154 + 63) >> 6;
          do
          {
            BOOL v88 = v157-- < 1;
            if (v88) {
              break;
            }
            unint64_t v158 = *(void *)(*v265 + 8 * v157);
            v156 += __clz(v158);
          }
          while (!v158);
          int v159 = v154 | 0xFFFFFFC0;
          if ((v154 & 0x3F) == 0) {
            int v159 = 0;
          }
          int v155 = v156 + v159;
        }
        else
        {
          int v155 = v154 + __clz(*v265) - 64;
        }
        unsigned int v92 = v154 + v153 + ~v155;
LABEL_248:
        if (v92 >= v20) {
          return v20;
        }
        else {
          return v92;
        }
      case 0x17u:
        int v58 = *((_DWORD *)a1 + 5);
        if ((v58 & 0x40000000) != 0) {
          uint64_t v59 = (void *)*((void *)a1 - 1);
        }
        else {
          uint64_t v59 = (void *)((char *)a1 - 32 * (v58 & 0x7FFFFFF));
        }
        uint64_t v22 = sub_1CC162D6C(*v59, a3 + 1, a4);
        unsigned int v265 = 0;
        int v109 = *((_DWORD *)a1 + 5);
        if ((v109 & 0x40000000) != 0) {
          unsigned int v110 = (char *)*((void *)a1 - 1);
        }
        else {
          unsigned int v110 = (char *)a1 - 32 * (v109 & 0x7FFFFFF);
        }
        uint64_t v111 = (unsigned __int8 *)*((void *)v110 + 4);
        __src[0] = &v265;
        __src[1] = 0;
        if (!sub_1CBF528D8((uint64_t)__src, v111)) {
          return v22;
        }
        uint64_t v112 = *((unsigned int *)v265 + 2);
        unsigned int v113 = v112 - 1;
        if (v112 > 0x40)
        {
          if ((*(void *)(*v265 + 8 * (v113 >> 6)) >> v113)) {
            return v22;
          }
          int v227 = 0;
          int64_t v228 = (unint64_t)(v112 + 63) >> 6;
          do
          {
            BOOL v88 = v228-- < 1;
            if (v88) {
              break;
            }
            unint64_t v229 = *(void *)(*v265 + 8 * v228);
            v227 += __clz(v229);
          }
          while (!v229);
          int v230 = v112 | 0xFFFFFFC0;
          if ((v112 & 0x3F) == 0) {
            int v230 = 0;
          }
          if (v227 + v230 == v112) {
            return v22;
          }
        }
        else if (!*v265 || (*v265 & (1 << v113)) != 0)
        {
          return v22;
        }
        unsigned int v114 = v20 - sub_1CC1755AC((uint64_t)v265);
        if (v22 <= v114) {
          return v114;
        }
        else {
          return v22;
        }
      case 0x19u:
        unsigned int v265 = 0;
        int v56 = *((_DWORD *)a1 + 5);
        if ((v56 & 0x40000000) != 0) {
          int v57 = (char *)*((void *)a1 - 1);
        }
        else {
          int v57 = (char *)a1 - 32 * (v56 & 0x7FFFFFF);
        }
        uint64_t v106 = (unsigned __int8 *)*((void *)v57 + 4);
        __src[0] = &v265;
        __src[1] = 0;
        if (!sub_1CBF528D8((uint64_t)__src, v106)) {
          goto LABEL_331;
        }
        int v107 = *((_DWORD *)a1 + 5);
        if ((v107 & 0x40000000) != 0) {
          int v108 = (void *)*((void *)a1 - 1);
        }
        else {
          int v108 = (void *)((char *)a1 - 32 * (v107 & 0x7FFFFFF));
        }
        unsigned int v131 = sub_1CC162D6C(*v108, a3 + 1, a4);
        uint64_t v132 = *((unsigned int *)v265 + 2);
        if (v132 >= 0x41)
        {
          int v134 = 0;
          int64_t v135 = (unint64_t)(v132 + 63) >> 6;
          uint64_t v136 = v135;
          do
          {
            BOOL v88 = v136-- < 1;
            if (v88) {
              break;
            }
            unint64_t v137 = *(void *)(*v265 + 8 * v136);
            v134 += __clz(v137);
          }
          while (!v137);
          int v138 = v132 | 0xFFFFFFC0;
          if ((v132 & 0x3F) == 0) {
            int v138 = 0;
          }
          if ((v132 - v134 - v138) >= 0x41) {
            goto LABEL_331;
          }
          unint64_t v133 = *(void *)*v265;
          if (v133 >= v20) {
            goto LABEL_331;
          }
          int v139 = 0;
          do
          {
            BOOL v88 = v135-- < 1;
            if (v88) {
              break;
            }
            unint64_t v140 = *(void *)(*v265 + 8 * v135);
            v139 += __clz(v140);
          }
          while (!v140);
          if ((v132 - (v138 + v139)) > 0x40) {
            goto LABEL_331;
          }
        }
        else
        {
          unint64_t v133 = *v265;
          if (*v265 >= v20) {
            goto LABEL_331;
          }
        }
        if (v133 >= v131) {
          goto LABEL_331;
        }
        return v131 - v133;
      case 0x1Bu:
        int v48 = *((_DWORD *)a1 + 5);
        if ((v48 & 0x40000000) != 0) {
          uint64_t v49 = (void *)*((void *)a1 - 1);
        }
        else {
          uint64_t v49 = (void *)((char *)a1 - 32 * (v48 & 0x7FFFFFF));
        }
        uint64_t v22 = sub_1CC162D6C(*v49, a3 + 1, a4);
        unsigned int v265 = 0;
        int v81 = *((_DWORD *)a1 + 5);
        if ((v81 & 0x40000000) != 0) {
          BOOL v82 = (char *)*((void *)a1 - 1);
        }
        else {
          BOOL v82 = (char *)a1 - 32 * (v81 & 0x7FFFFFF);
        }
        unsigned int v83 = (unsigned __int8 *)*((void *)v82 + 4);
        __src[0] = &v265;
        __src[1] = 0;
        if (!sub_1CBF528D8((uint64_t)__src, v83)) {
          return v22;
        }
        unsigned int v84 = v265;
        uint64_t v85 = *((unsigned int *)v265 + 2);
        if (v85 < 0x41) {
          goto LABEL_125;
        }
        int v86 = 0;
        int64_t v87 = (unint64_t)(v85 + 63) >> 6;
        do
        {
          BOOL v88 = v87-- < 1;
          if (v88) {
            break;
          }
          unint64_t v89 = *(void *)(*v265 + 8 * v87);
          v86 += __clz(v89);
        }
        while (!v89);
        int v90 = v85 | 0xFFFFFFC0;
        if ((v85 & 0x3F) == 0) {
          int v90 = 0;
        }
        if ((v85 - v86 - v90) >= 0x41) {
          goto LABEL_331;
        }
        unsigned int v84 = (unint64_t *)*v265;
LABEL_125:
        unint64_t v91 = *v84;
        if (v91 >= v20) {
          goto LABEL_331;
        }
        unsigned int v92 = v22 + v91;
        goto LABEL_248;
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
        int v26 = *((_DWORD *)a1 + 5);
        if ((v26 & 0x40000000) != 0) {
          int v27 = (void *)*((void *)a1 - 1);
        }
        else {
          int v27 = (void *)((char *)a1 - 32 * (v26 & 0x7FFFFFF));
        }
        unsigned int v42 = sub_1CC162D6C(*v27, a3 + 1, a4);
        if (v42 != 1)
        {
          unsigned int v43 = v42;
          int v44 = *((_DWORD *)a1 + 5);
          if ((v44 & 0x40000000) != 0) {
            char v45 = (char *)*((void *)a1 - 1);
          }
          else {
            char v45 = (char *)a1 - 32 * (v44 & 0x7FFFFFF);
          }
          unsigned int v80 = sub_1CC162D6C(*((void *)v45 + 4), a3 + 1, a4);
          if (v80 >= v43) {
            unsigned int v24 = v43;
          }
          else {
            unsigned int v24 = v80;
          }
        }
        goto LABEL_332;
      default:
        switch(v25)
        {
          case '7':
            uint64_t v28 = *((_DWORD *)a1 + 5) & 0x7FFFFFF;
            if ((v28 - 5) < 0xFFFFFFFC) {
              goto LABEL_332;
            }
            long long v29 = *(_OWORD *)(a4 + 16);
            *(_OWORD *)__src = *(_OWORD *)a4;
            v262[0] = v29;
            v262[1] = *(_OWORD *)(a4 + 32);
            if (v20 == 1) {
              return 1;
            }
            uint64_t v30 = 0;
            uint64_t v31 = 0;
            uint64_t v32 = a3 + 1;
            uint64_t v33 = v28 - 1;
            do
            {
              int v34 = *((_DWORD *)a1 + 5);
              if ((v34 & 0x40000000) != 0) {
                uint64_t v35 = (char *)*((void *)a1 - 1);
              }
              else {
                uint64_t v35 = (char *)a1 - 32 * (v34 & 0x7FFFFFF);
              }
              uint64_t v36 = *(void *)&v35[32 * *((unsigned int *)a1 + 15) + 8 * v31];
              uint64_t v37 = *(void *)(v36 + 40);
              if (v37 == v36 + 40)
              {
                uint64_t v38 = 0;
              }
              else
              {
                if (v37) {
                  uint64_t v38 = v37 - 24;
                }
                else {
                  uint64_t v38 = 0;
                }
                if (*(unsigned __int8 *)(v38 + 16) - 29 >= 0xB) {
                  uint64_t v38 = 0;
                }
              }
              *(void *)&v262[0] = v38;
              if ((v34 & 0x40000000) != 0) {
                int v39 = (char *)*((void *)a1 - 1);
              }
              else {
                int v39 = (char *)a1 - 32 * (v34 & 0x7FFFFFF);
              }
              unsigned int v40 = sub_1CC162D6C(*(void *)&v39[v30], v32, __src);
              if (v40 < v20) {
                LODWORD(v20) = v40;
              }
              BOOL v41 = v33 == v31;
              if (v33 == v31) {
                break;
              }
              ++v31;
              v30 += 32;
            }
            while (v20 != 1);
            if (v41) {
              return v20;
            }
            else {
              return 1;
            }
          case '8':
            if (v23 != 84) {
              goto LABEL_332;
            }
            uint64_t v69 = *((void *)a1 - 4);
            if (!v69
              || *(unsigned char *)(v69 + 16)
              || *(void *)(v69 + 24) != *((void *)a1 + 9)
              || (*(unsigned char *)(v69 + 33) & 0x20) == 0)
            {
              goto LABEL_332;
            }
            int v70 = *(_DWORD *)(v69 + 36);
            if ((v70 - 274) >= 2)
            {
              if (v70 != 1) {
                goto LABEL_332;
              }
              int v185 = *((_DWORD *)a1 + 5);
              unsigned int v186 = (v185 & 0x40000000) != 0
                   ? (llvm::Constant *)*((void *)a1 - 1)
                   : (llvm::Constant *)((char *)a1 - 32 * (v185 & 0x7FFFFFF));
              int v187 = sub_1CC162D6C(*(void *)v186, a3 + 1, a4);
              uint64_t v22 = (v187 - 1);
              if (v187 == 1) {
                goto LABEL_332;
              }
              return v22;
            }
            unsigned int v263 = 0;
            unsigned int v264 = 0;
            if (v70 == 274) {
              int v71 = 275;
            }
            else {
              int v71 = 274;
            }
            uint64_t v72 = (void *)((char *)a1 - 32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF));
            uint64_t v73 = *v72;
            if (*(unsigned char *)(*v72 + 16) != 84) {
              goto LABEL_331;
            }
            uint64_t v74 = *(void *)(v73 - 32);
            if (!v74) {
              goto LABEL_331;
            }
            if (*(unsigned char *)(v74 + 16)) {
              goto LABEL_331;
            }
            if (*(void *)(v74 + 24) != *(void *)(v73 + 72)) {
              goto LABEL_331;
            }
            if ((*(unsigned char *)(v74 + 33) & 0x20) == 0) {
              goto LABEL_331;
            }
            if (*(_DWORD *)(v74 + 36) != v71) {
              goto LABEL_331;
            }
            int v75 = (unsigned __int8 *)v72[4];
            __src[0] = &v264;
            __src[1] = 0;
            if (!sub_1CBF528D8((uint64_t)__src, v75)) {
              goto LABEL_331;
            }
            int64_t v76 = *(unsigned __int8 **)(v73 - 32 * (*(_DWORD *)(v73 + 20) & 0x7FFFFFF) + 32);
            unsigned int v265 = (unint64_t *)&v263;
            uint64_t v266 = 0;
            if ((sub_1CBF528D8((uint64_t)&v265, v76) & 1) == 0) {
              goto LABEL_331;
            }
            unint64_t v77 = v263;
            int v78 = v264;
            if (*(_DWORD *)(*((void *)a1 - 4) + 36) == 275)
            {
              unsigned int v263 = v264;
              unsigned int v264 = v77;
              uint64_t v79 = v77;
            }
            else
            {
              uint64_t v79 = v264;
              int v78 = v263;
            }
            uint64_t v241 = v79[2];
            if (v241 <= 0x40)
            {
              unint64_t v242 = *(void *)v79;
              uint64_t v243 = *(void *)v79 << -(char)v241;
              unint64_t v173 = *(void *)v78;
              if (v243 >> -(char)v241 > (uint64_t)(*(void *)v78 << -(char)v241) >> -(char)v241) {
                goto LABEL_331;
              }
              if ((v242 >> (v241 - 1)))
              {
                if (v241) {
                  unsigned int v174 = __clz(~v243);
                }
                else {
                  unsigned int v174 = 0;
                }
              }
              else
              {
                unsigned int v174 = v241 + __clz(v242) - 64;
              }
LABEL_442:
              uint64_t v175 = v78[2];
              unsigned int v176 = v175 - 1;
              if (v175 <= 0x40) {
                goto LABEL_293;
              }
              if (((*(void *)(v173 + 8 * (v176 >> 6)) >> v176) & 1) == 0)
              {
                int v244 = 0;
                int64_t v245 = (unint64_t)(v175 + 63) >> 6;
                do
                {
                  BOOL v88 = v245-- < 1;
                  if (v88) {
                    break;
                  }
                  unint64_t v246 = *(void *)(v173 + 8 * v245);
                  v244 += __clz(v246);
                }
                while (!v246);
                goto LABEL_480;
              }
              goto LABEL_484;
            }
            unint64_t v247 = *(void *)v79;
            uint64_t v248 = *(void *)(*(void *)v79 + 8 * ((v241 - 1) >> 6)) & (1 << (v241
                                                                                                - 1));
            unsigned int v249 = v78[2];
            unsigned int v250 = v249 - 1;
            unint64_t v173 = *(void *)v78;
            if (v249 >= 0x41) {
              unsigned int v251 = (unsigned int *)(*(void *)v78 + 8 * (v250 >> 6));
            }
            else {
              unsigned int v251 = v78;
            }
            if ((v248 != 0) == ((*(void *)v251 >> v250) & 1))
            {
              int64_t v252 = (unint64_t)(v241 + 63) >> 6;
              uint64_t v253 = 8 * v252;
              do
              {
                if (!v253) {
                  goto LABEL_466;
                }
                unint64_t v254 = *(void *)(v247 - 8 + v253);
                unint64_t v255 = *(void *)(v173 + v253 - 8);
                v253 -= 8;
              }
              while (v254 == v255);
              if (v254 > v255) {
                goto LABEL_331;
              }
LABEL_466:
              if (!v248)
              {
                do
                {
                  BOOL v88 = v252-- < 1;
                  if (v88) {
                    break;
                  }
                  unint64_t v256 = *(void *)(v247 + 8 * v252);
                  LODWORD(v248) = v248 + __clz(v256);
                }
                while (!v256);
                if ((v241 & 0x3F) != 0) {
                  int v257 = v241 | 0xFFFFFFC0;
                }
                else {
                  int v257 = 0;
                }
                unsigned int v174 = v248 + v257;
                goto LABEL_442;
              }
            }
            else if (!v248)
            {
              goto LABEL_331;
            }
            unsigned int v174 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)v79);
            goto LABEL_442;
          case '9':
            unsigned int v263 = 0;
            unsigned int v264 = 0;
            __src[0] = 0;
            unsigned int v265 = 0;
            int matched = llvm::matchSelectPattern((uint64_t)a1, (uint64_t)__src, &v265, 0, 0);
            if ((matched & 0xFFFFFFFD) != 1) {
              goto LABEL_327;
            }
            unint64_t v66 = __src[0];
            __src[0] = &v264;
            __src[1] = 0;
            if (!sub_1CBF528D8((uint64_t)__src, (unsigned __int8 *)v265)) {
              goto LABEL_327;
            }
            __src[0] = 0;
            unsigned int v265 = 0;
            int v67 = llvm::matchSelectPattern((uint64_t)v66, (uint64_t)__src, &v265, 0, 0);
            unsigned int v68 = (matched - 1) > 2 ? 2 : dword_1CFAC48BC[matched - 1];
            if (v68 != v67) {
              goto LABEL_327;
            }
            __src[0] = &v263;
            __src[1] = 0;
            if (!sub_1CBF528D8((uint64_t)__src, (unsigned __int8 *)v265)) {
              goto LABEL_327;
            }
            uint64_t v151 = v263;
            unint64_t v152 = v264;
            if (matched == 1)
            {
              unsigned int v263 = v264;
              unsigned int v264 = v151;
              int v78 = v152;
            }
            else
            {
              int v78 = v263;
              uint64_t v151 = v264;
            }
            uint64_t v170 = v151[2];
            if (v170 <= 0x40)
            {
              unint64_t v171 = *(void *)v151;
              uint64_t v172 = *(void *)v151 << -(char)v170;
              unint64_t v173 = *(void *)v78;
              if (v172 >> -(char)v170 <= (uint64_t)(*(void *)v78 << -(char)v170) >> -(char)v170)
              {
                if ((v171 >> (v170 - 1)))
                {
                  if (v170) {
                    unsigned int v174 = __clz(~v172);
                  }
                  else {
                    unsigned int v174 = 0;
                  }
                }
                else
                {
                  unsigned int v174 = v170 + __clz(v171) - 64;
                }
                goto LABEL_292;
              }
              goto LABEL_327;
            }
            unint64_t v188 = *(void *)v151;
            uint64_t v189 = *(void *)(*(void *)v151 + 8 * ((v170 - 1) >> 6)) & (1 << (v170
                                                                                                 - 1));
            unsigned int v190 = v78[2];
            unsigned int v191 = v190 - 1;
            unint64_t v173 = *(void *)v78;
            if (v190 >= 0x41) {
              unint64_t v192 = (unsigned int *)(*(void *)v78 + 8 * (v191 >> 6));
            }
            else {
              unint64_t v192 = v78;
            }
            if ((v189 != 0) == ((*(void *)v192 >> v191) & 1))
            {
              int64_t v231 = (unint64_t)(v170 + 63) >> 6;
              uint64_t v232 = 8 * v231;
              do
              {
                if (!v232) {
                  goto LABEL_418;
                }
                unint64_t v233 = *(void *)(v188 - 8 + v232);
                unint64_t v234 = *(void *)(v173 + v232 - 8);
                v232 -= 8;
              }
              while (v233 == v234);
              if (v233 > v234) {
                goto LABEL_327;
              }
LABEL_418:
              if (!v189)
              {
                do
                {
                  BOOL v88 = v231-- < 1;
                  if (v88) {
                    break;
                  }
                  unint64_t v235 = *(void *)(v188 + 8 * v231);
                  LODWORD(v189) = v189 + __clz(v235);
                }
                while (!v235);
                if ((v170 & 0x3F) != 0) {
                  int v236 = v170 | 0xFFFFFFC0;
                }
                else {
                  int v236 = 0;
                }
                unsigned int v174 = v189 + v236;
                goto LABEL_292;
              }
            }
            else if (!v189)
            {
LABEL_327:
              int v193 = *((_DWORD *)a1 + 5);
              if ((v193 & 0x40000000) != 0) {
                uint64_t v194 = (char *)*((void *)a1 - 1);
              }
              else {
                uint64_t v194 = (char *)a1 - 32 * (v193 & 0x7FFFFFF);
              }
              unsigned int v195 = sub_1CC162D6C(*((void *)v194 + 4), a3 + 1, a4);
              if (v195 != 1)
              {
                unsigned int v218 = v195;
                int v219 = *((_DWORD *)a1 + 5);
                if ((v219 & 0x40000000) != 0) {
                  unint64_t v220 = (char *)*((void *)a1 - 1);
                }
                else {
                  unint64_t v220 = (char *)a1 - 32 * (v219 & 0x7FFFFFF);
                }
                unsigned int v221 = sub_1CC162D6C(*((void *)v220 + 8), a3 + 1, a4);
                if (v221 >= v218) {
                  return v218;
                }
                else {
                  return v221;
                }
              }
LABEL_331:
              unsigned int v24 = 1;
LABEL_332:
              unsigned int v23 = *((unsigned __int8 *)a1 + 16);
              goto LABEL_333;
            }
            unsigned int v174 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)v151);
LABEL_292:
            uint64_t v175 = v78[2];
            unsigned int v176 = v175 - 1;
            if (v175 > 0x40)
            {
              if ((*(void *)(v173 + 8 * (v176 >> 6)) >> v176))
              {
LABEL_484:
                unsigned int v181 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)v78);
              }
              else
              {
                int v244 = 0;
                int64_t v258 = (unint64_t)(v175 + 63) >> 6;
                do
                {
                  BOOL v88 = v258-- < 1;
                  if (v88) {
                    break;
                  }
                  unint64_t v259 = *(void *)(v173 + 8 * v258);
                  v244 += __clz(v259);
                }
                while (!v259);
LABEL_480:
                if ((v175 & 0x3F) != 0) {
                  int v260 = v175 | 0xFFFFFFC0;
                }
                else {
                  int v260 = 0;
                }
                unsigned int v181 = v244 + v260;
              }
            }
            else
            {
LABEL_293:
              unint64_t v177 = v173 >> v176;
              unsigned int v178 = v175 + __clz(v173) - 64;
              unsigned int v179 = __clz(~(v173 << -(char)v175));
              if (v175) {
                unsigned int v180 = v179;
              }
              else {
                unsigned int v180 = 0;
              }
              if (v177) {
                unsigned int v181 = v180;
              }
              else {
                unsigned int v181 = v178;
              }
            }
            if (v181 >= v174) {
              return v174;
            }
            else {
              return v181;
            }
          case ':':
          case ';':
          case '<':
          case '>':
            goto LABEL_332;
          case '=':
            int v63 = *((_DWORD *)a1 + 5);
            if ((v63 & 0x40000000) != 0) {
              int64_t v64 = (uint64_t *)*((void *)a1 - 1);
            }
            else {
              int64_t v64 = (uint64_t *)((char *)a1 - 32 * (v63 & 0x7FFFFFF));
            }
            uint64_t v119 = *v64;
            return sub_1CC162D6C(v119, a3 + 1, a4);
          case '?':
            uint64_t v22 = 1;
            if (v23 != 91) {
              return v22;
            }
            LODWORD(__src[1]) = 1;
            __src[0] = 0;
            LODWORD(v266) = 1;
            unsigned int v265 = 0;
            int v62 = 1;
            if (!sub_1CC175684((uint64_t)a1, a2, __src, (void **)&v265)) {
              goto LABEL_225;
            }
            if (LODWORD(__src[1]) > 0x40)
            {
              int v146 = 0;
              int64_t v147 = ((unint64_t)LODWORD(__src[1]) + 63) >> 6;
              do
              {
                BOOL v88 = v147-- < 1;
                if (v88) {
                  break;
                }
                unint64_t v148 = *((void *)__src[0] + v147);
                v146 += __clz(v148);
              }
              while (!v148);
              unsigned int v149 = LODWORD(__src[1]) | 0xFFFFFFC0;
              if (((uint64_t)__src[1] & 0x3F) == 0) {
                unsigned int v149 = 0;
              }
              if (v146 + v149 != LODWORD(__src[1]))
              {
LABEL_81:
                uint64_t v22 = sub_1CC173D40(*((void *)a1 - 8), __src, a3 + 1, a4);
                if (v22 == 1)
                {
                  int v62 = 2;
                  goto LABEL_225;
                }
LABEL_217:
                if (v266 > 0x40)
                {
                  int v160 = 0;
                  int64_t v161 = ((unint64_t)v266 + 63) >> 6;
                  do
                  {
                    BOOL v88 = v161-- < 1;
                    if (v88) {
                      break;
                    }
                    unint64_t v162 = v265[v161];
                    v160 += __clz(v162);
                  }
                  while (!v162);
                  int v163 = v266 | 0xFFFFFFC0;
                  if ((v266 & 0x3F) == 0) {
                    int v163 = 0;
                  }
                  if (v160 + v163 == v266) {
                    goto LABEL_222;
                  }
                }
                else if (!v265)
                {
LABEL_222:
                  if (v22 == 1) {
                    int v62 = 2;
                  }
                  else {
                    int v62 = 1;
                  }
LABEL_225:
                  if (v266 >= 0x41 && v265) {
                    MEMORY[0x1D25D9CB0](v265, 0x1000C8000313F17);
                  }
                  if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
                    MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
                  }
                  if (v62 != 2) {
                    return v22;
                  }
                  goto LABEL_331;
                }
                unsigned int v150 = sub_1CC173D40(*((void *)a1 - 4), &v265, a3 + 1, a4);
                if (v150 >= v22) {
                  uint64_t v22 = v22;
                }
                else {
                  uint64_t v22 = v150;
                }
                goto LABEL_222;
              }
            }
            else if (__src[0])
            {
              goto LABEL_81;
            }
            uint64_t v22 = 0xFFFFFFFFLL;
            goto LABEL_217;
          default:
            if (v25 != 40) {
              goto LABEL_332;
            }
            int v46 = *((_DWORD *)a1 + 5);
            if ((v46 & 0x40000000) != 0) {
              unint64_t v47 = (uint64_t **)*((void *)a1 - 1);
            }
            else {
              unint64_t v47 = (uint64_t **)((char *)a1 - 32 * (v46 & 0x7FFFFFF));
            }
            uint64_t v121 = **v47;
            if ((*(_DWORD *)(v121 + 8) & 0xFE) == 0x12) {
              uint64_t v121 = **(void **)(v121 + 16);
            }
            int v122 = v20 - llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v121);
            if ((v46 & 0x40000000) != 0) {
              int v123 = (void *)*((void *)a1 - 1);
            }
            else {
              int v123 = (void *)((char *)a1 - 32 * (v46 & 0x7FFFFFF));
            }
            return v122 + sub_1CC162D6C(*v123, a3 + 1, a4);
        }
    }
  }
  unsigned int v24 = 1;
LABEL_333:
  if (v23 > 0x14 || *(unsigned char *)(*(void *)a1 + 8) != 18) {
    goto LABEL_365;
  }
  int v196 = *(_DWORD *)(*(void *)a1 + 32);
  uint64_t v22 = v20;
  if (v196)
  {
    char v197 = 0;
    uint64_t v22 = v20;
    do
    {
      if (*(_DWORD *)(a2 + 8) >= 0x41u) {
        unsigned int v198 = (void *)(*(void *)a2 + 8 * (v197 >> 6));
      }
      else {
        unsigned int v198 = (void *)a2;
      }
      if ((*v198 >> (char)v197))
      {
        AggregateElement = llvm::Constant::getAggregateElement(a1, v197);
        if (!AggregateElement) {
          goto LABEL_365;
        }
        unsigned int v200 = AggregateElement;
        if (*((unsigned char *)AggregateElement + 16) != 16) {
          goto LABEL_365;
        }
        int v201 = (llvm::APInt *)(AggregateElement + 3);
        uint64_t v202 = *((unsigned int *)v200 + 8);
        unsigned int v203 = v202 - 1;
        if (v202 > 0x40)
        {
          if ((*(void *)(*(void *)v201 + 8 * (v203 >> 6)) >> v203))
          {
            unsigned int v208 = llvm::APInt::countLeadingOnesSlowCase(v201);
          }
          else
          {
            int v209 = 0;
            int64_t v210 = (unint64_t)(v202 + 63) >> 6;
            do
            {
              BOOL v88 = v210-- < 1;
              if (v88) {
                break;
              }
              unint64_t v211 = *(void *)(*(void *)v201 + 8 * v210);
              v209 += __clz(v211);
            }
            while (!v211);
            if ((v202 & 0x3F) != 0) {
              int v212 = v202 | 0xFFFFFFC0;
            }
            else {
              int v212 = 0;
            }
            unsigned int v208 = v209 + v212;
          }
        }
        else
        {
          uint64_t v204 = *(void *)v201 >> v203;
          unsigned int v205 = v202 + __clz(*(void *)v201) - 64;
          unsigned int v206 = __clz(~(*(void *)v201 << -(char)v202));
          if (v202) {
            unsigned int v207 = v206;
          }
          else {
            unsigned int v207 = 0;
          }
          if (v204) {
            unsigned int v208 = v207;
          }
          else {
            unsigned int v208 = v205;
          }
        }
        if (v208 >= v22) {
          uint64_t v22 = v22;
        }
        else {
          uint64_t v22 = v208;
        }
      }
      char v197 = (llvm::Type *)(v197 + 1);
    }
    while (v197 != v196);
  }
  if (!v22)
  {
LABEL_365:
    LODWORD(__src[1]) = v20;
    if (v20 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)__src);
    }
    DWORD2(v262[0]) = v20;
    __src[0] = 0;
    *(void *)&v262[0] = 0;
    sub_1CC15FDD8((uint64_t)a1, a2, (int8x8_t *)__src, a3, (const llvm::DataLayout **)a4);
    unsigned int v213 = __src[1];
    unsigned int v214 = LODWORD(__src[1]) - 1;
    if (LODWORD(__src[1]) > 0x40)
    {
      if ((*((void *)__src[0] + (v214 >> 6)) >> v214))
      {
        uint64_t v222 = __src;
        goto LABEL_393;
      }
    }
    else if (((unint64_t)__src[0] >> v214))
    {
      unsigned int v217 = __clz(~((uint64_t)__src[0] << -LOBYTE(__src[1])));
      if (LODWORD(__src[1])) {
        unsigned int v216 = v217;
      }
      else {
        unsigned int v216 = 0;
      }
      goto LABEL_374;
    }
    unsigned int v215 = DWORD2(v262[0]) - 1;
    if (DWORD2(v262[0]) <= 0x40)
    {
      if (((*(void *)&v262[0] >> v215) & 1) == 0)
      {
LABEL_370:
        unsigned int v216 = 1;
        goto LABEL_374;
      }
      if (DWORD2(v262[0])) {
        unsigned int v216 = __clz(~(*(void *)&v262[0] << -BYTE8(v262[0])));
      }
      else {
        unsigned int v216 = 0;
      }
LABEL_374:
      if (v24 <= v216) {
        uint64_t v22 = v216;
      }
      else {
        uint64_t v22 = v24;
      }
      if (DWORD2(v262[0]) >= 0x41 && *(void *)&v262[0])
      {
        MEMORY[0x1D25D9CB0](*(void *)&v262[0], 0x1000C8000313F17);
        unsigned int v213 = __src[1];
      }
      if (v213 >= 0x41)
      {
        if (__src[0]) {
          MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
        }
      }
      return v22;
    }
    if (((*(void *)(*(void *)&v262[0] + 8 * (v215 >> 6)) >> v215) & 1) == 0) {
      goto LABEL_370;
    }
    uint64_t v222 = (void **)v262;
LABEL_393:
    unsigned int v216 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)v222);
    goto LABEL_374;
  }
  return v22;
}

uint64_t sub_1CC1755AC(uint64_t a1)
{
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  if (v6 > 0x40) {
    operator new[]();
  }
  unint64_t v5 = *(void *)a1;
  llvm::APInt::operator--((uint64_t)&v5);
  unsigned int v1 = v6;
  if (v6 > 0x40)
  {
    int v4 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v5);
    if (v5) {
      MEMORY[0x1D25D9CB0](v5, 0x1000C8000313F17);
    }
    int v2 = v4;
  }
  else
  {
    int v2 = v6 + __clz(v5) - 64;
  }
  return v1 - v2;
}

uint64_t sub_1CC175684(uint64_t a1, uint64_t a2, void **this, void **a4)
{
  if (*(unsigned char *)(*(void *)a1 + 8) == 19) {
    return 0;
  }
  signed int v9 = *(_DWORD *)(**(void **)(a1 - 64) + 32);
  uint64_t v10 = *(unsigned int *)(*(void *)a1 + 32);
  unsigned int v31 = v9;
  if (v9 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v30);
  }
  uint64_t v30 = 0;
  if (*((_DWORD *)a4 + 2) >= 0x41u && *a4) {
    MEMORY[0x1D25D9CB0](*a4, 0x1000C8000313F17);
  }
  unsigned int v11 = v30;
  *a4 = v30;
  unsigned int v12 = v31;
  *((_DWORD *)a4 + 2) = v31;
  if (*((_DWORD *)this + 2) > 0x40u || v12 > 0x40)
  {
    if (this != a4)
    {
      llvm::APInt::reallocate((uint64_t)this, v12);
      uint64_t v29 = *((unsigned int *)this + 2);
      if (v29 <= 0x40) {
        *this = *a4;
      }
      else {
        memcpy(*this, *a4, ((unint64_t)(v29 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
  }
  else
  {
    *this = v11;
    *((_DWORD *)this + 2) = *((_DWORD *)a4 + 2);
  }
  uint64_t v13 = *(unsigned int *)(a2 + 8);
  if (v13 > 0x40)
  {
    int v14 = 0;
    int64_t v15 = (unint64_t)(v13 + 63) >> 6;
    do
    {
      if (v15-- < 1) {
        break;
      }
      unint64_t v17 = *(void *)(*(void *)a2 + 8 * v15);
      v14 += __clz(v17);
    }
    while (!v17);
    int v18 = v13 | 0xFFFFFFC0;
    if ((v13 & 0x3F) == 0) {
      int v18 = 0;
    }
    if (v14 + v18 == v13) {
      return 1;
    }
    goto LABEL_20;
  }
  if (*(void *)a2)
  {
LABEL_20:
    uint64_t v19 = *(unsigned int *)(a1 + 72);
    if (!v19)
    {
LABEL_24:
      if (*((_DWORD *)this + 2) >= 0x41u) {
        uint64_t v22 = (void **)*this;
      }
      else {
        uint64_t v22 = this;
      }
      *uint64_t v22 = (void *)((unint64_t)*v22 | 1);
      return 1;
    }
    uint64_t v20 = *(_DWORD **)(a1 + 64);
    uint64_t v21 = 4 * v19;
    while (!*v20)
    {
      ++v20;
      v21 -= 4;
      if (!v21) {
        goto LABEL_24;
      }
    }
    if (!v10) {
      return 1;
    }
    for (uint64_t i = 0; v10 != i; ++i)
    {
      if (*(_DWORD *)(a2 + 8) >= 0x41u) {
        unsigned int v24 = (void *)(*(void *)a2 + 8 * (i >> 6));
      }
      else {
        unsigned int v24 = (void *)a2;
      }
      if (((*v24 >> i) & 1) == 0) {
        continue;
      }
      signed int v25 = *(_DWORD *)(*(void *)(a1 + 64) + 4 * i);
      if (v25 == -1) {
        return 0;
      }
      unsigned int v26 = v25 % v9;
      if (v25 >= v9)
      {
        int v27 = a4;
        if (*((_DWORD *)a4 + 2) >= 0x41u)
        {
          uint64_t v28 = (char *)*a4;
          goto LABEL_41;
        }
      }
      else
      {
        int v27 = this;
        if (*((_DWORD *)this + 2) >= 0x41u)
        {
          uint64_t v28 = (char *)*this;
LABEL_41:
          int v27 = (void **)&v28[8 * (v26 >> 6)];
        }
      }
      void *v27 = (void *)((unint64_t)*v27 | (1 << v26));
    }
  }
  return 1;
}

void sub_1CC1758F4(llvm::UndefValue *a1, uint64_t a2, int8x8_t *a3, unsigned int a4, uint64_t a5)
{
  unint64_t v10 = a3[1].u32[0];
  unsigned int v726 = v10;
  if (v10 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v725);
  }
  unsigned int v728 = v10;
  unint64_t v725 = 0;
  unint64_t v727 = 0;
  unsigned int v11 = *((unsigned __int8 *)a1 + 16);
  if (a1 && v11 > 0x1B) {
    unsigned int v12 = v11 - 28;
  }
  else {
    unsigned int v12 = *((unsigned __int16 *)a1 + 9);
  }
  switch(v12)
  {
    case 5u:
    case 0x38u:
      if (!*(unsigned char *)(a5 + 40) || (*((unsigned char *)a1 + 23) & 0x20) == 0) {
        goto LABEL_682;
      }
      uint64_t v15 = ***(void ***)a1;
      v700[0] = a1;
      int v16 = *(_DWORD *)(v15 + 2496);
      if (!v16)
      {
        v416 = 0;
LABEL_786:
        uint64_t v20 = (llvm::UndefValue **)sub_1CC609054(v15 + 2480, (uint64_t)v700, (uint64_t *)v700, v416);
        v417 = (llvm::UndefValue *)v700[0];
        v20[3] = 0;
        v20[4] = 0;
        _DWORD *v20 = v417;
        v20[1] = (llvm::UndefValue *)(v20 + 3);
        v20[2] = (llvm::UndefValue *)0x100000000;
        goto LABEL_21;
      }
      uint64_t v17 = *(void *)(v15 + 2480);
      int v18 = v16 - 1;
      unsigned int v19 = v18 & ((a1 >> 4) ^ (a1 >> 9));
      uint64_t v20 = (llvm::UndefValue **)(v17 + 40 * v19);
      uint64_t v21 = *v20;
      if (*v20 == a1) {
        goto LABEL_21;
      }
      uint64_t v22 = 0;
      int v23 = 1;
      do
      {
        if (v21 == (llvm::UndefValue *)-4096)
        {
          if (v22) {
            v416 = v22;
          }
          else {
            v416 = v20;
          }
          goto LABEL_786;
        }
        if (v22) {
          BOOL v24 = 0;
        }
        else {
          BOOL v24 = v21 == (llvm::UndefValue *)-8192;
        }
        if (v24) {
          uint64_t v22 = v20;
        }
        unsigned int v25 = v19 + v23++;
        unsigned int v19 = v25 & v18;
        uint64_t v20 = (llvm::UndefValue **)(v17 + 40 * v19);
        uint64_t v21 = *v20;
      }
      while (*v20 != a1);
LABEL_21:
      uint64_t v26 = *((unsigned int *)v20 + 4);
      if (v26)
      {
        int v27 = (uint64_t *)((char *)v20[1] + 8);
        uint64_t v28 = 16 * v26;
        while (*((_DWORD *)v27 - 2) != 4)
        {
          v27 += 2;
          v28 -= 16;
          if (!v28) {
            goto LABEL_682;
          }
        }
        if (*v27) {
          llvm::computeKnownBitsFromRangeMetadata(*v27, (void **)a3, (llvm::KnownBits *)a3);
        }
      }
LABEL_682:
      v376 = (void **)*((void *)a1 + 8);
      if (v376 && (*((unsigned char *)v376 + 29) & 0x40) != 0)
      {
        uint64_t v638 = *((unsigned int *)v376 + 2);
        if (v638)
        {
          v639 = v376 + 5;
          int v640 = -1;
          while (!*v639 || (*((unsigned char *)*v639 + 17) & 0x40) == 0)
          {
            ++v640;
            ++v639;
            if (!--v638) {
              goto LABEL_1376;
            }
          }
          goto LABEL_1377;
        }
      }
      else
      {
        uint64_t v377 = *((void *)a1 - 4);
        if (!v377) {
          goto LABEL_689;
        }
        if (*(unsigned char *)(v377 + 16)) {
          goto LABEL_689;
        }
        if (*(void *)(v377 + 24) != *((void *)a1 + 9)) {
          goto LABEL_689;
        }
        uint64_t v378 = *(void *)(v377 + 112);
        if (!v378 || (*(unsigned char *)(v378 + 29) & 0x40) == 0) {
          goto LABEL_689;
        }
        uint64_t v641 = *(unsigned int *)(v378 + 8);
        if (v641)
        {
          uint64_t v642 = v378 + 40;
          int v640 = -1;
          while (!*(void *)v642 || (*(unsigned char *)(*(void *)v642 + 17) & 0x40) == 0)
          {
            ++v640;
            v642 += 8;
            if (!--v641) {
              goto LABEL_1376;
            }
          }
          goto LABEL_1377;
        }
      }
LABEL_1376:
      int v640 = 0;
LABEL_1377:
      v643 = (void **)*((void *)a1 + 4 * (v640 - 1) + -4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF));
      if (v643)
      {
        sub_1CC15FBF8(v643, &v725, a4 + 1, a5);
        uint64_t v644 = a3[1].u32[0];
        if (v644 > 0x40)
        {
          v649 = (void *)*a3;
          v650 = (uint64_t *)v725;
          unint64_t v651 = (unint64_t)(v644 + 63) >> 6;
          do
          {
            uint64_t v652 = *v650++;
            *v649++ |= v652;
            --v651;
          }
          while (v651);
        }
        else
        {
          *(void *)a3 |= v725;
        }
        uint64_t v653 = a3[3].u32[0];
        if (v653 > 0x40)
        {
          v654 = (void *)a3[2];
          v655 = (uint64_t *)v727;
          unint64_t v656 = (unint64_t)(v653 + 63) >> 6;
          do
          {
            uint64_t v657 = *v655++;
            *v654++ |= v657;
            --v656;
          }
          while (v656);
        }
        else
        {
          *(void *)&a3[2] |= v727;
        }
      }
LABEL_689:
      if (*((unsigned char *)a1 + 16) != 84) {
        goto LABEL_1245;
      }
      uint64_t v379 = *((void *)a1 - 4);
      if (!v379
        || *(unsigned char *)(v379 + 16)
        || *(void *)(v379 + 24) != *((void *)a1 + 9)
        || (*(unsigned char *)(v379 + 33) & 0x20) == 0)
      {
        goto LABEL_1245;
      }
      int v380 = *(_DWORD *)(v379 + 36);
      if (v380 > 274)
      {
        if (v380 <= 310)
        {
          if (v380 > 304)
          {
            if (v380 == 305)
            {
              int v494 = *((_DWORD *)a1 + 5);
              if ((v494 & 0x40000000) != 0) {
                v495 = (void *)*((void *)a1 - 1);
              }
              else {
                v495 = (void *)((char *)a1 - 32 * (v494 & 0x7FFFFFF));
              }
              sub_1CC15FBF8(*v495, a3, a4 + 1, a5);
              int v519 = *((_DWORD *)a1 + 5);
              if ((v519 & 0x40000000) != 0) {
                v520 = (void ***)*((void *)a1 - 1);
              }
              else {
                v520 = (void ***)((char *)a1 - 32 * (v519 & 0x7FFFFFF));
              }
              sub_1CC15FBF8(v520[4], &v725, a4 + 1, a5);
LABEL_1022:
              llvm::KnownBits::umax((llvm::KnownBits *)a3, (const llvm::KnownBits *)&v725, (uint64_t)v700);
            }
            else
            {
              if (v380 != 306) {
                goto LABEL_1245;
              }
              int v473 = *((_DWORD *)a1 + 5);
              if ((v473 & 0x40000000) != 0) {
                v474 = (void *)*((void *)a1 - 1);
              }
              else {
                v474 = (void *)((char *)a1 - 32 * (v473 & 0x7FFFFFF));
              }
              sub_1CC15FBF8(*v474, a3, a4 + 1, a5);
              int v521 = *((_DWORD *)a1 + 5);
              if ((v521 & 0x40000000) != 0) {
                v522 = (void ***)*((void *)a1 - 1);
              }
              else {
                v522 = (void ***)((char *)a1 - 32 * (v521 & 0x7FFFFFF));
              }
              sub_1CC15FBF8(v522[4], &v725, a4 + 1, a5);
LABEL_1028:
              llvm::KnownBits::umin((llvm::KnownBits *)a3, (const llvm::KnownBits *)&v725, (uint64_t)v700);
            }
LABEL_262:
            if (a3[1].i32[0] >= 0x41u && *(void *)a3) {
              ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a3, 0x1000C8000313F17);
            }
            *a3 = (int8x8_t)v700[0];
            a3[1].i32[0] = (__int32)v700[1];
            LODWORD(v700[1]) = 0;
            if (a3[3].i32[0] >= 0x41u)
            {
              int8x8_t v123 = a3[2];
              if (v123)
              {
LABEL_1272:
                MEMORY[0x1D25D9CB0](*(void *)&v123, 0x1000C8000313F17);
                unsigned int v400 = v700[1];
                a3[2] = (int8x8_t)__src[0];
                a3[3].i32[0] = (__int32)__src[1];
                LODWORD(__src[1]) = 0;
LABEL_746:
                if (v400 < 0x41) {
                  goto LABEL_1245;
                }
LABEL_1243:
                if (!v700[0]) {
                  goto LABEL_1245;
                }
                goto LABEL_1244;
              }
            }
LABEL_264:
            a3[2] = (int8x8_t)__src[0];
            a3[3].i32[0] = (__int32)__src[1];
            goto LABEL_1245;
          }
          if (v380 == 275)
          {
            int v492 = *((_DWORD *)a1 + 5);
            if ((v492 & 0x40000000) != 0) {
              v493 = (void *)*((void *)a1 - 1);
            }
            else {
              v493 = (void *)((char *)a1 - 32 * (v492 & 0x7FFFFFF));
            }
            sub_1CC15FBF8(*v493, a3, a4 + 1, a5);
            int v517 = *((_DWORD *)a1 + 5);
            if ((v517 & 0x40000000) != 0) {
              v518 = (void ***)*((void *)a1 - 1);
            }
            else {
              v518 = (void ***)((char *)a1 - 32 * (v517 & 0x7FFFFFF));
            }
            sub_1CC15FBF8(v518[4], &v725, a4 + 1, a5);
LABEL_593:
            llvm::KnownBits::smin((llvm::KnownBits *)a3, (const llvm::KnownBits *)&v725, (uint64_t)v700);
LABEL_1170:
            if (a3[1].i32[0] >= 0x41u && *(void *)a3) {
              ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a3, 0x1000C8000313F17);
            }
            *a3 = (int8x8_t)v700[0];
            a3[1].i32[0] = (__int32)v700[1];
            if (a3[3].i32[0] >= 0x41u)
            {
              int8x8_t v591 = a3[2];
              if (v591) {
                MEMORY[0x1D25D9CB0](*(void *)&v591, 0x1000C8000313F17);
              }
            }
            goto LABEL_264;
          }
          if (v380 != 300) {
            goto LABEL_1245;
          }
        }
        else
        {
          if (v380 > 9410)
          {
            if (v380 == 9411 || v380 == 9413)
            {
              if (v10 < 0x20) {
                goto LABEL_1245;
              }
              unsigned int v193 = a3[1].u32[0];
              if (v193 == 31) {
                goto LABEL_1245;
              }
              if (v193 <= 0x40)
              {
                unint64_t v348 = *(void *)a3 | (0xFFFFFFFFFFFFFFFFLL >> (95 - v193) << 31);
                goto LABEL_612;
              }
              v617 = a3;
              unsigned int v345 = 31;
            }
            else
            {
              if (v380 != 12309) {
                goto LABEL_1245;
              }
              unsigned int v193 = a3[1].u32[0];
              if (v193 == 32) {
                goto LABEL_1245;
              }
              if (v193 <= 0x40)
              {
                unint64_t v348 = *(void *)a3 | (0xFFFFFFFFFFFFFFFFLL >> (96 - v193) << 32);
                goto LABEL_612;
              }
              v617 = a3;
              unsigned int v345 = 32;
            }
            goto LABEL_1329;
          }
          if (v380 != 311)
          {
            if (v380 != 382) {
              goto LABEL_1245;
            }
            v477 = (void **)*((void *)a1 + 5);
            if (!v477) {
              goto LABEL_1245;
            }
            v478 = v477[7];
            if (!v478) {
              goto LABEL_1245;
            }
            uint64_t v481 = v478[14];
            v479 = v478 + 14;
            uint64_t v480 = v481;
            if (!v481) {
              goto LABEL_1245;
            }
            if ((*(unsigned char *)(v480 + 22) & 1) == 0) {
              goto LABEL_1245;
            }
            AttributeAtIndex = (_DWORD *)llvm::AttributeList::getAttributeAtIndex(v479, -1, 80);
            v700[0] = AttributeAtIndex;
            uint64_t VScaleRangeMax = llvm::Attribute::getVScaleRangeMax((llvm::Attribute *)v700);
            if ((VScaleRangeMax & 0xFF00000000) == 0) {
              goto LABEL_1245;
            }
            if (AttributeAtIndex[5] == VScaleRangeMax)
            {
              uint64_t v484 = VScaleRangeMax;
              uint64_t v485 = a3[3].u32[0];
              if (v485 > 0x40)
              {
                **(void **)&a3[2] = VScaleRangeMax;
                bzero((void *)(*(void *)&a3[2] + 8), (((unint64_t)(v485 + 63) >> 3) - 8) & 0xFFFFFFF8);
              }
              else
              {
                if (v485) {
                  unint64_t v486 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v485;
                }
                else {
                  LODWORD(v486) = 0;
                }
                a3[2] = (int8x8_t)(v486 & VScaleRangeMax);
              }
              uint64_t v633 = a3[1].u32[0];
              if (v633 > 0x40)
              {
                **(void **)a3 = v484;
                bzero((void *)(*(void *)a3 + 8), (((unint64_t)(v633 + 63) >> 3) - 8) & 0xFFFFFFF8);
                LODWORD(v633) = a3[1].i32[0];
                if (v633 > 0x40)
                {
                  llvm::APInt::flipAllBitsSlowCase((uint64_t)a3);
                  goto LABEL_1245;
                }
                int8x8_t v636 = *a3;
                unint64_t v634 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v633;
              }
              else
              {
                unint64_t v634 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v633;
                unint64_t v635 = v634;
                if (!v633) {
                  unint64_t v635 = 0;
                }
                int8x8_t v636 = (int8x8_t)(v635 & v484);
              }
              unint64_t v637 = ~*(void *)&v636;
              if (!v633) {
                unint64_t v634 = 0;
              }
              unint64_t v348 = v634 & v637;
              goto LABEL_612;
            }
            int v346 = __clz(VScaleRangeMax);
            unsigned int v345 = 32 - v346;
            if (32 - v346 >= v10) {
              goto LABEL_1245;
            }
            unsigned int v193 = a3[1].u32[0];
            if (v345 == v193) {
              goto LABEL_1245;
            }
            if (v193 <= 0x40)
            {
              LOBYTE(v346) = 96 - v346 - v193;
              goto LABEL_605;
            }
LABEL_1328:
            v617 = a3;
LABEL_1329:
            llvm::APInt::setBitsSlowCase(v617, v345, v193);
            goto LABEL_1245;
          }
        }
        int v488 = *((_DWORD *)a1 + 5);
        if ((v488 & 0x40000000) != 0) {
          v489 = (void *)*((void *)a1 - 1);
        }
        else {
          v489 = (void *)((char *)a1 - 32 * (v488 & 0x7FFFFFF));
        }
        sub_1CC15FBF8(*v489, a3, a4 + 1, a5);
        int v496 = *((_DWORD *)a1 + 5);
        if ((v496 & 0x40000000) != 0) {
          v497 = (void ***)*((void *)a1 - 1);
        }
        else {
          v497 = (void ***)((char *)a1 - 32 * (v496 & 0x7FFFFFF));
        }
        sub_1CC15FBF8(v497[4], &v725, a4 + 1, a5);
        if (v380 == 300)
        {
          v498 = (llvm::APInt *)&a3[2];
          unsigned int v499 = a3[3].u32[0];
          if (v499 > 0x40)
          {
            unsigned int v500 = llvm::APInt::countLeadingOnesSlowCase(v498);
          }
          else if (v499)
          {
            unsigned int v500 = __clz(~(*(void *)v498 << -(char)v499));
          }
          else
          {
            unsigned int v500 = 0;
          }
          unsigned int v523 = v728;
          if (v728 <= 0x40)
          {
            if (v728)
            {
LABEL_1032:
              unsigned int v524 = __clz(~(v727 << -(char)v523));
              goto LABEL_1038;
            }
            goto LABEL_1036;
          }
        }
        else
        {
          unsigned int v501 = a3[1].u32[0];
          if (v501 > 0x40)
          {
            unsigned int v500 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)a3);
          }
          else if (v501)
          {
            unsigned int v500 = __clz(~(*(void *)a3 << -(char)v501));
          }
          else
          {
            unsigned int v500 = 0;
          }
          unsigned int v523 = v728;
          if (v728 <= 0x40)
          {
            if (v728) {
              goto LABEL_1032;
            }
LABEL_1036:
            unsigned int v524 = 0;
            goto LABEL_1038;
          }
        }
        unsigned int v524 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v727);
LABEL_1038:
        if (v500 <= v524) {
          unsigned int v525 = v524;
        }
        else {
          unsigned int v525 = v500;
        }
        unsigned int v697 = v726;
        if (v726 > 0x40) {
          operator new[]();
        }
        int8x8_t v696 = (int8x8_t)v725;
        unsigned int v699 = v523;
        if (v523 > 0x40) {
          operator new[]();
        }
        unint64_t v698 = v727;
        llvm::KnownBits::computeForAddSub(v380 == 300, 0, (uint64_t)a3, (uint64_t)&v696, (uint64_t)v700);
        if (a3[1].i32[0] >= 0x41u && *(void *)a3) {
          ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a3, 0x1000C8000313F17);
        }
        *a3 = (int8x8_t)v700[0];
        a3[1].i32[0] = (__int32)v700[1];
        LODWORD(v700[1]) = 0;
        v526 = a3 + 2;
        if (a3[3].i32[0] >= 0x41u && *(void *)v526)
        {
          ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*v526, 0x1000C8000313F17);
          unsigned int v658 = v700[1];
          a3[2] = (int8x8_t)__src[0];
          a3[3].i32[0] = (__int32)__src[1];
          LODWORD(__src[1]) = 0;
          if (v658 >= 0x41 && v700[0]) {
            MEMORY[0x1D25D9CB0](v700[0], 0x1000C8000313F17);
          }
        }
        else
        {
          a3[2] = (int8x8_t)__src[0];
          a3[3].i32[0] = (__int32)__src[1];
          LODWORD(__src[1]) = 0;
        }
        if (v699 >= 0x41 && v698) {
          MEMORY[0x1D25D9CB0](v698, 0x1000C8000313F17);
        }
        if (v697 >= 0x41 && *(void *)&v696) {
          MEMORY[0x1D25D9CB0](*(void *)&v696, 0x1000C8000313F17);
        }
        if (v380 == 300)
        {
          if (v525)
          {
            unsigned int v527 = a3[3].u32[0];
            unsigned int v528 = v527 - v525;
            if (v527 > 0x40 || v528 > 0x3F) {
              llvm::APInt::setBitsSlowCase(&a3[2], v528, v527);
            }
            else {
              *(void *)v526 |= 0xFFFFFFFFFFFFFFFFLL >> -(char)v525 << v528;
            }
          }
          uint64_t v312 = a3[1].u32[0];
          if (v312 > 0x40)
          {
            char v313 = (void *)*a3;
            goto LABEL_541;
          }
          *a3 = 0;
        }
        else
        {
          if (v525)
          {
            unsigned int v529 = a3[1].u32[0];
            unsigned int v530 = v529 - v525;
            if (v529 > 0x40 || v530 > 0x3F) {
              llvm::APInt::setBitsSlowCase(a3, v530, v529);
            }
            else {
              *(void *)a3 |= 0xFFFFFFFFFFFFFFFFLL >> -(char)v525 << v530;
            }
          }
          uint64_t v312 = a3[3].u32[0];
          if (v312 > 0x40)
          {
            char v313 = (void *)*v526;
            goto LABEL_541;
          }
          int8x8_t *v526 = 0;
        }
        goto LABEL_1245;
      }
      if (v380 > 53)
      {
        if ((v380 - 148) >= 2)
        {
          if (v380 == 54)
          {
            int v513 = *((_DWORD *)a1 + 5);
            if ((v513 & 0x40000000) != 0) {
              v514 = (void *)*((void *)a1 - 1);
            }
            else {
              v514 = (void *)((char *)a1 - 32 * (v513 & 0x7FFFFFF));
            }
            sub_1CC15FBF8(*v514, &v725, a4 + 1, a5);
            if (v728 > 0x40)
            {
              unsigned int v532 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v727);
            }
            else
            {
              unsigned int v584 = __clz(__rbit64(v727));
              if (v728 >= v584) {
                unsigned int v532 = v584;
              }
              else {
                unsigned int v532 = v728;
              }
            }
            goto LABEL_1156;
          }
          if (v380 != 274) {
            goto LABEL_1245;
          }
          int v471 = *((_DWORD *)a1 + 5);
          if ((v471 & 0x40000000) != 0) {
            v472 = (void *)*((void *)a1 - 1);
          }
          else {
            v472 = (void *)((char *)a1 - 32 * (v471 & 0x7FFFFFF));
          }
          sub_1CC15FBF8(*v472, a3, a4 + 1, a5);
          int v589 = *((_DWORD *)a1 + 5);
          if ((v589 & 0x40000000) != 0) {
            v590 = (void ***)*((void *)a1 - 1);
          }
          else {
            v590 = (void ***)((char *)a1 - 32 * (v589 & 0x7FFFFFF));
          }
          sub_1CC15FBF8(v590[4], &v725, a4 + 1, a5);
LABEL_1169:
          llvm::KnownBits::smax((llvm::KnownBits *)a3, (const llvm::KnownBits *)&v725, (uint64_t)v700);
          goto LABEL_1170;
        }
        v729 = 0;
        int v490 = *((_DWORD *)a1 + 5);
        if ((v490 & 0x40000000) != 0) {
          v491 = (void ***)*((void *)a1 - 1);
        }
        else {
          v491 = (void ***)((char *)a1 - 32 * (v490 & 0x7FFFFFF));
        }
        v508 = (unsigned __int8 *)v491[8];
        v700[0] = &v729;
        v700[1] = 0;
        if (!sub_1CBF528D8((uint64_t)v700, v508)) {
          goto LABEL_1245;
        }
        int v509 = llvm::APInt::urem(v729, v10);
        if (*(_DWORD *)(*((void *)a1 - 4) + 36) == 149) {
          int v510 = v10 - v509;
        }
        else {
          int v510 = v509;
        }
        LODWORD(v700[1]) = v10;
        LODWORD(__src[1]) = v10;
        v700[0] = 0;
        __src[0] = 0;
        int v511 = *((_DWORD *)a1 + 5);
        if ((v511 & 0x40000000) != 0) {
          v512 = (void *)*((void *)a1 - 1);
        }
        else {
          v512 = (void *)((char *)a1 - 32 * (v511 & 0x7FFFFFF));
        }
        uint64_t v565 = a4 + 1;
        sub_1CC15FBF8(*v512, &v725, v565, a5);
        int v566 = *((_DWORD *)a1 + 5);
        if ((v566 & 0x40000000) != 0) {
          v567 = (void ***)*((void *)a1 - 1);
        }
        else {
          v567 = (void ***)((char *)a1 - 32 * (v566 & 0x7FFFFFF));
        }
        sub_1CC15FBF8(v567[4], v700, v565, a5);
        unsigned int v718 = v726;
        if (v726 > 0x40) {
          operator new[]();
        }
        unint64_t v568 = v725 << v510;
        if (v726 == v510) {
          unint64_t v568 = 0;
        }
        if (v726) {
          unint64_t v569 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v726;
        }
        else {
          unint64_t v569 = 0;
        }
        unint64_t v717 = v569 & v568;
        int v570 = v10 - v510;
        __int32 v571 = (__int32)v700[1];
        unsigned int v712 = v700[1];
        if (LODWORD(v700[1]) > 0x40) {
          operator new[]();
        }
        unint64_t v572 = (unint64_t)v700[0] >> v570;
        if (LODWORD(v700[1]) == v570) {
          unint64_t v572 = 0;
        }
        unint64_t v573 = v717;
        unint64_t v574 = v572 | v717;
        if (a3[1].i32[0] >= 0x41u && *(void *)a3) {
          ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a3, 0x1000C8000313F17);
        }
        *a3 = (int8x8_t)v574;
        a3[1].i32[0] = v571;
        if (v718 >= 0x41 && v573 != 0) {
          MEMORY[0x1D25D9CB0](v573, 0x1000C8000313F17);
        }
        unsigned int v718 = v728;
        if (v728 > 0x40) {
          operator new[]();
        }
        unint64_t v576 = v727 << v510;
        if (v728 == v510) {
          unint64_t v576 = 0;
        }
        if (v728) {
          unint64_t v577 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v728;
        }
        else {
          unint64_t v577 = 0;
        }
        unint64_t v717 = v577 & v576;
        __int32 v578 = (__int32)__src[1];
        unsigned int v712 = __src[1];
        if (LODWORD(__src[1]) > 0x40) {
          operator new[]();
        }
        unint64_t v579 = (unint64_t)__src[0] >> v570;
        if (LODWORD(__src[1]) == v570) {
          unint64_t v579 = 0;
        }
        unint64_t v580 = v717;
        unint64_t v581 = v579 | v717;
        if (a3[3].i32[0] >= 0x41u)
        {
          int8x8_t v582 = a3[2];
          if (v582) {
            MEMORY[0x1D25D9CB0](*(void *)&v582, 0x1000C8000313F17);
          }
        }
        a3[2] = (int8x8_t)v581;
        a3[3].i32[0] = v578;
        if (v718 >= 0x41 && v580 != 0) {
          MEMORY[0x1D25D9CB0](v580, 0x1000C8000313F17);
        }
        if (LODWORD(__src[1]) < 0x41) {
          goto LABEL_745;
        }
        v393 = __src[0];
        if (!__src[0]) {
          goto LABEL_745;
        }
LABEL_744:
        MEMORY[0x1D25D9CB0](v393, 0x1000C8000313F17);
LABEL_745:
        unsigned int v400 = v700[1];
        goto LABEL_746;
      }
      if (v380 <= 8)
      {
        if (v380 != 1)
        {
          if (v380 != 8) {
            goto LABEL_1245;
          }
          int v475 = *((_DWORD *)a1 + 5);
          if ((v475 & 0x40000000) != 0) {
            v476 = (void *)*((void *)a1 - 1);
          }
          else {
            v476 = (void *)((char *)a1 - 32 * (v475 & 0x7FFFFFF));
          }
          sub_1CC15FDD8(*v476, a2, &v725, a4 + 1, a5);
          llvm::APInt::reverseBits((unsigned int *)&v725, (llvm::APInt *)v700);
          uint64_t v555 = a3[1].u32[0];
          if (v555 > 0x40)
          {
            v556 = (void *)*a3;
            v557 = (uint64_t *)v700[0];
            unint64_t v558 = (unint64_t)(v555 + 63) >> 6;
            do
            {
              uint64_t v559 = *v557++;
              *v556++ |= v559;
              --v558;
            }
            while (v558);
          }
          else
          {
            *(void *)a3 |= (unint64_t)v700[0];
          }
          if (LODWORD(v700[1]) >= 0x41 && v700[0]) {
            MEMORY[0x1D25D9CB0](v700[0], 0x1000C8000313F17);
          }
          llvm::APInt::reverseBits((unsigned int *)&v727, (llvm::APInt *)v700);
          uint64_t v560 = a3[3].u32[0];
          if (v560 > 0x40)
          {
            v561 = (void *)a3[2];
            v562 = (uint64_t *)v700[0];
            unint64_t v563 = (unint64_t)(v560 + 63) >> 6;
            do
            {
              uint64_t v564 = *v562++;
              *v561++ |= v564;
              --v563;
            }
            while (v563);
            goto LABEL_745;
          }
          goto LABEL_1102;
        }
        int v506 = *((_DWORD *)a1 + 5);
        if ((v506 & 0x40000000) != 0) {
          v507 = (void *)*((void *)a1 - 1);
        }
        else {
          v507 = (void *)((char *)a1 - 32 * (v506 & 0x7FFFFFF));
        }
        sub_1CC15FBF8(*v507, &v725, a4 + 1, a5);
        char v554 = sub_1CBF5250C((uint64_t)v700, ((llvm::Constant **)a1 - 4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF))[4]);
        llvm::KnownBits::abs((uint64_t)&v725, v554, (uint64_t)v700);
        goto LABEL_262;
      }
      if (v380 == 9)
      {
        int v504 = *((_DWORD *)a1 + 5);
        if ((v504 & 0x40000000) != 0) {
          v505 = (void *)*((void *)a1 - 1);
        }
        else {
          v505 = (void *)((char *)a1 - 32 * (v504 & 0x7FFFFFF));
        }
        sub_1CC15FDD8(*v505, a2, &v725, a4 + 1, a5);
        llvm::APInt::byteSwap((llvm::APInt *)&v725, (uint64_t)v700);
        uint64_t v544 = a3[1].u32[0];
        if (v544 > 0x40)
        {
          v545 = (void *)*a3;
          v546 = (uint64_t *)v700[0];
          unint64_t v547 = (unint64_t)(v544 + 63) >> 6;
          do
          {
            uint64_t v548 = *v546++;
            *v545++ |= v548;
            --v547;
          }
          while (v547);
        }
        else
        {
          *(void *)a3 |= (unint64_t)v700[0];
        }
        if (LODWORD(v700[1]) >= 0x41 && v700[0]) {
          MEMORY[0x1D25D9CB0](v700[0], 0x1000C8000313F17);
        }
        llvm::APInt::byteSwap((llvm::APInt *)&v727, (uint64_t)v700);
        uint64_t v549 = a3[3].u32[0];
        if (v549 > 0x40)
        {
          v550 = (void *)a3[2];
          v551 = (uint64_t *)v700[0];
          unint64_t v552 = (unint64_t)(v549 + 63) >> 6;
          do
          {
            uint64_t v553 = *v551++;
            *v550++ |= v553;
            --v552;
          }
          while (v552);
          goto LABEL_745;
        }
LABEL_1102:
        *(void *)&a3[2] |= (unint64_t)v700[0];
        goto LABEL_745;
      }
      if (v380 != 52)
      {
        if (v380 == 53)
        {
          int v381 = *((_DWORD *)a1 + 5);
          if ((v381 & 0x40000000) != 0) {
            v382 = (void *)*((void *)a1 - 1);
          }
          else {
            v382 = (void *)((char *)a1 - 32 * (v381 & 0x7FFFFFF));
          }
          sub_1CC15FBF8(*v382, &v725, a4 + 1, a5);
          if (v726 > 0x40)
          {
            __int32 v538 = 0;
            unint64_t v539 = ((unint64_t)v726 + 63) >> 6;
            v540 = (int8x8_t *)v725;
            do
            {
              int8x8_t v541 = *v540++;
              uint8x8_t v542 = (uint8x8_t)vcnt_s8(v541);
              v542.i16[0] = vaddlv_u8(v542);
              v538 += v542.i32[0];
              --v539;
            }
            while (v539);
          }
          else
          {
            uint8x8_t v537 = (uint8x8_t)vcnt_s8((int8x8_t)v725);
            v537.i16[0] = vaddlv_u8(v537);
            __int32 v538 = v537.i32[0];
          }
          unsigned int v543 = v726 - v538;
          goto LABEL_1161;
        }
        goto LABEL_1245;
      }
      int v502 = *((_DWORD *)a1 + 5);
      if ((v502 & 0x40000000) != 0) {
        v503 = (void *)*((void *)a1 - 1);
      }
      else {
        v503 = (void *)((char *)a1 - 32 * (v502 & 0x7FFFFFF));
      }
      sub_1CC15FBF8(*v503, &v725, a4 + 1, a5);
      if (v728 > 0x40)
      {
        int v533 = 0;
        int64_t v534 = ((unint64_t)v728 + 63) >> 6;
        do
        {
          BOOL v245 = v534-- < 1;
          if (v245) {
            break;
          }
          unint64_t v535 = *(void *)(v727 + 8 * v534);
          v533 += __clz(v535);
        }
        while (!v535);
        if ((v728 & 0x3F) != 0) {
          unsigned int v536 = v728 | 0xFFFFFFC0;
        }
        else {
          unsigned int v536 = 0;
        }
        unsigned int v532 = v533 + v536;
      }
      else
      {
        unsigned int v532 = v728 + __clz(v727) - 64;
      }
LABEL_1156:
      v585 = (void *)((void *)a1 - 4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF))[4];
      v586 = **(uint64_t ***)a1;
      uint64_t v587 = *v586;
      v588 = *(void **)(*v586 + 1560);
      if (!v588)
      {
        v626 = *(llvm::ConstantInt **)(v587 + 1888);
        unsigned int v627 = *(_DWORD *)(v587 + 1896);
        LODWORD(v700[1]) = v627 >> 8;
        if (v627 >> 8 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)v700);
        }
        if (v627 <= 0xFF) {
          char v628 = 0;
        }
        else {
          char v628 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v627);
        }
        v700[0] = (void *)(v628 & 1);
        v588 = llvm::ConstantInt::get(v626, (llvm::LLVMContext *)v700, v531);
        if (LODWORD(v700[1]) >= 0x41 && v700[0]) {
          MEMORY[0x1D25D9CB0](v700[0], 0x1000C8000313F17);
        }
        *(void *)(v587 + 1560) = v588;
      }
      unsigned int v543 = v10 - 1;
      if ((int)v10 - 1 >= v532) {
        unsigned int v543 = v532;
      }
      if (v585 != v588) {
        unsigned int v543 = v532;
      }
LABEL_1161:
      int v346 = __clz(v543);
      unsigned int v345 = 32 - v346;
      unsigned int v193 = a3[1].u32[0];
      if (32 - v346 != v193)
      {
        if (v193 <= 0x40)
        {
          LOBYTE(v346) = 96 - v193 - v346;
LABEL_605:
          unint64_t v347 = 0xFFFFFFFFFFFFFFFFLL >> v346 << v345;
LABEL_611:
          unint64_t v348 = *(void *)a3 | v347;
LABEL_612:
          *a3 = (int8x8_t)v348;
          goto LABEL_1245;
        }
        goto LABEL_1328;
      }
LABEL_1245:
      if (v728 >= 0x41 && v727) {
        MEMORY[0x1D25D9CB0](v727, 0x1000C8000313F17);
      }
      if (v726 >= 0x41)
      {
        if (v725) {
          MEMORY[0x1D25D9CB0](v725, 0x1000C8000313F17);
        }
      }
      return;
    case 0xDu:
      if (*(unsigned char *)(a5 + 40)) {
        int v71 = (*((unsigned __int8 *)a1 + 17) >> 2) & 1;
      }
      else {
        int v71 = 0;
      }
      int v319 = *((_DWORD *)a1 + 5);
      if ((v319 & 0x40000000) != 0) {
        uint64_t v320 = (uint64_t *)*((void *)a1 - 1);
      }
      else {
        uint64_t v320 = (uint64_t *)((char *)a1 - 32 * (v319 & 0x7FFFFFF));
      }
      sub_1CC17FB3C(1, *v320, v320[4], v71, a2, (uint64_t)a3, (uint64_t)&v725, a4, a5);
      goto LABEL_1245;
    case 0xFu:
      if (*(unsigned char *)(a5 + 40)) {
        int v104 = (*((unsigned __int8 *)a1 + 17) >> 2) & 1;
      }
      else {
        int v104 = 0;
      }
      int v331 = *((_DWORD *)a1 + 5);
      if ((v331 & 0x40000000) != 0) {
        unint64_t v332 = (uint64_t *)*((void *)a1 - 1);
      }
      else {
        unint64_t v332 = (uint64_t *)((char *)a1 - 32 * (v331 & 0x7FFFFFF));
      }
      uint64_t v158 = *v332;
      uint64_t v159 = v332[4];
      uint64_t v687 = a5;
      int v160 = 0;
      goto LABEL_581;
    case 0x11u:
      if (*(unsigned char *)(a5 + 40)) {
        int v105 = (*((unsigned __int8 *)a1 + 17) >> 2) & 1;
      }
      else {
        int v105 = 0;
      }
      int v333 = *((_DWORD *)a1 + 5);
      if ((v333 & 0x40000000) != 0) {
        uint64_t v334 = (uint64_t ****)*((void *)a1 - 1);
      }
      else {
        uint64_t v334 = (uint64_t ****)((char *)a1 - 32 * (v333 & 0x7FFFFFF));
      }
      unsigned int v335 = *v334;
      unint64_t v336 = v334[4];
      goto LABEL_587;
    case 0x13u:
      int v72 = *((_DWORD *)a1 + 5);
      if ((v72 & 0x40000000) != 0) {
        uint64_t v73 = (void *)*((void *)a1 - 1);
      }
      else {
        uint64_t v73 = (void *)((char *)a1 - 32 * (v72 & 0x7FFFFFF));
      }
      sub_1CC15FBF8(*v73, a3, a4 + 1, a5);
      int v167 = *((_DWORD *)a1 + 5);
      if ((v167 & 0x40000000) != 0) {
        unsigned int v168 = (void ***)*((void *)a1 - 1);
      }
      else {
        unsigned int v168 = (void ***)((char *)a1 - 32 * (v167 & 0x7FFFFFF));
      }
      sub_1CC15FBF8(v168[4], &v725, a4 + 1, a5);
      llvm::KnownBits::udiv((llvm::KnownBits *)a3, (const llvm::KnownBits *)&v725, (uint64_t)v700);
      goto LABEL_262;
    case 0x16u:
      int v84 = *((_DWORD *)a1 + 5);
      if ((v84 & 0x40000000) != 0) {
        uint64_t v85 = (void *)*((void *)a1 - 1);
      }
      else {
        uint64_t v85 = (void *)((char *)a1 - 32 * (v84 & 0x7FFFFFF));
      }
      sub_1CC15FBF8(*v85, a3, a4 + 1, a5);
      int v183 = *((_DWORD *)a1 + 5);
      if ((v183 & 0x40000000) != 0) {
        unsigned int v184 = (void ***)*((void *)a1 - 1);
      }
      else {
        unsigned int v184 = (void ***)((char *)a1 - 32 * (v183 & 0x7FFFFFF));
      }
      sub_1CC15FBF8(v184[4], &v725, a4 + 1, a5);
      llvm::KnownBits::urem((llvm::KnownBits *)a3, (int8x8_t *)&v725, (uint64_t)v700);
      goto LABEL_262;
    case 0x17u:
      int v86 = *((_DWORD *)a1 + 5);
      if ((v86 & 0x40000000) != 0) {
        int64_t v87 = (void *)*((void *)a1 - 1);
      }
      else {
        int64_t v87 = (void *)((char *)a1 - 32 * (v86 & 0x7FFFFFF));
      }
      sub_1CC15FBF8(*v87, a3, a4 + 1, a5);
      int v185 = *((_DWORD *)a1 + 5);
      if ((v185 & 0x40000000) != 0) {
        unsigned int v186 = (void ***)*((void *)a1 - 1);
      }
      else {
        unsigned int v186 = (void ***)((char *)a1 - 32 * (v185 & 0x7FFFFFF));
      }
      sub_1CC15FBF8(v186[4], &v725, a4 + 1, a5);
      llvm::KnownBits::srem((uint64_t)a3, (int8x8_t *)&v725, (uint64_t)v700);
      goto LABEL_262;
    case 0x19u:
      LOBYTE(v108) = *(unsigned char *)(a5 + 40);
      if ((_BYTE)v108) {
        int v108 = (*((unsigned __int8 *)a1 + 17) >> 2) & 1;
      }
      LOBYTE(v711) = v108;
      sub_1CC17F168((uint64_t)a1, a2, a3, (uint64_t)&v725, a4, a5, (void (*)(int8x8_t *__return_ptr, uint64_t, uint64_t, int8x8_t *))sub_1CC182BA4, (uint64_t)&v711);
      unint64_t v717 = 0;
      int v109 = *((_DWORD *)a1 + 5);
      if ((v109 & 0x40000000) != 0) {
        unsigned int v110 = (unsigned __int8 **)*((void *)a1 - 1);
      }
      else {
        unsigned int v110 = (unsigned __int8 **)((char *)a1 - 32 * (v109 & 0x7FFFFFF));
      }
      unsigned int v190 = *v110;
      v700[0] = &v717;
      v700[1] = 0;
      if (!sub_1CBF528D8((uint64_t)v700, v190)) {
        goto LABEL_1245;
      }
      unsigned int v191 = *(_DWORD *)(v717 + 8);
      if (v191 > 0x40)
      {
        unsigned int v193 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v717);
      }
      else
      {
        unsigned int v192 = __clz(__rbit64(*(void *)v717));
        unsigned int v193 = v191 >= v192 ? v192 : *(_DWORD *)(v717 + 8);
      }
      if (!v193) {
        goto LABEL_1245;
      }
      if (v193 > 0x40)
      {
        v617 = a3;
        unsigned int v345 = 0;
        goto LABEL_1329;
      }
      int v89 = -v193;
LABEL_610:
      unint64_t v347 = 0xFFFFFFFFFFFFFFFFLL >> v89;
      if (a3[1].i32[0] > 0x40u)
      {
        **(void **)a3 |= v347;
        goto LABEL_1245;
      }
      goto LABEL_611;
    case 0x1Au:
      sub_1CC17F168((uint64_t)a1, a2, a3, (uint64_t)&v725, a4, a5, (void (*)(int8x8_t *__return_ptr, uint64_t, uint64_t, int8x8_t *))sub_1CC182C98, (uint64_t)&v711);
      unint64_t v717 = 0;
      int v106 = *((_DWORD *)a1 + 5);
      if ((v106 & 0x40000000) != 0) {
        int v107 = (unsigned __int8 **)*((void *)a1 - 1);
      }
      else {
        int v107 = (unsigned __int8 **)((char *)a1 - 32 * (v106 & 0x7FFFFFF));
      }
      int v187 = *v107;
      v700[0] = &v717;
      v700[1] = 0;
      if (!sub_1CBF528D8((uint64_t)v700, v187)) {
        goto LABEL_1245;
      }
      uint64_t v188 = *(unsigned int *)(v717 + 8);
      if (v188 > 0x40)
      {
        int v341 = 0;
        int64_t v342 = (unint64_t)(v188 + 63) >> 6;
        do
        {
          BOOL v245 = v342-- < 1;
          if (v245) {
            break;
          }
          unint64_t v343 = *(void *)(*(void *)v717 + 8 * v342);
          v341 += __clz(v343);
        }
        while (!v343);
        int v344 = (v188 & 0x3F) != 0 ? v188 | 0xFFFFFFC0 : 0;
        int v189 = v341 + v344;
      }
      else
      {
        int v189 = v188 + __clz(*(void *)v717) - 64;
      }
      if (!v189) {
        goto LABEL_1245;
      }
      unsigned int v193 = a3[1].u32[0];
      unsigned int v345 = v193 - v189;
      if (v193 > 0x40 || v345 > 0x3F) {
        goto LABEL_1328;
      }
      int v346 = -v189;
      goto LABEL_605;
    case 0x1Bu:
      sub_1CC17F168((uint64_t)a1, a2, a3, (uint64_t)&v725, a4, a5, (void (*)(int8x8_t *__return_ptr, uint64_t, uint64_t, int8x8_t *))sub_1CC182CA4, (uint64_t)v700);
      goto LABEL_1245;
    case 0x1Cu:
      int v74 = *((_DWORD *)a1 + 5);
      if ((v74 & 0x40000000) != 0) {
        int v75 = (void ***)*((void *)a1 - 1);
      }
      else {
        int v75 = (void ***)((char *)a1 - 32 * (v74 & 0x7FFFFFF));
      }
      sub_1CC15FDD8(v75[4], a2, a3, a4 + 1, a5);
      int v169 = *((_DWORD *)a1 + 5);
      if ((v169 & 0x40000000) != 0) {
        uint64_t v170 = (void *)*((void *)a1 - 1);
      }
      else {
        uint64_t v170 = (void *)((char *)a1 - 32 * (v169 & 0x7FFFFFF));
      }
      sub_1CC15FDD8(*v170, a2, &v725, a4 + 1, a5);
      uint64_t v171 = a3[1].u32[0];
      if (v171 > 0x40)
      {
        v618 = (void *)*a3;
        v619 = (uint64_t *)v725;
        unint64_t v620 = (unint64_t)(v171 + 63) >> 6;
        do
        {
          uint64_t v621 = *v619++;
          *v618++ |= v621;
          --v620;
        }
        while (v620);
      }
      else
      {
        *(void *)a3 |= v725;
      }
      uint64_t v172 = (unint64_t *)&a3[2];
      uint64_t v173 = a3[3].u32[0];
      if (v173 > 0x40)
      {
        v622 = (void *)*v172;
        v623 = (uint64_t *)v727;
        unint64_t v624 = (unint64_t)(v173 + 63) >> 6;
        do
        {
          uint64_t v625 = *v623++;
          *v622++ &= v625;
          --v624;
        }
        while (v624);
      }
      else
      {
        *v172 &= v727;
      }
      if (v171 >= 0x41) {
        unsigned int v174 = (int8x8_t *)*a3;
      }
      else {
        unsigned int v174 = a3;
      }
      if (v174->i8[0]) {
        goto LABEL_1245;
      }
      uint64_t v175 = (int8x8_t *)*v172;
      if (v173 < 0x41) {
        uint64_t v175 = a3 + 2;
      }
      if (v175->i8[0]) {
        goto LABEL_1245;
      }
      if (!a1) {
        goto LABEL_1245;
      }
      unsigned int v176 = *((unsigned __int8 *)a1 + 16);
      if (v176 < 0x1C || v176 - 59 < 0xFFFFFFEE) {
        goto LABEL_1245;
      }
      uint64_t v177 = *((void *)a1 - 8);
      uint64_t v178 = *((void *)a1 - 4);
      if (v177)
      {
        int v179 = *(unsigned __int8 *)(v178 + 16);
        if (v179 == 5)
        {
          if (*(_WORD *)(v178 + 18) == 13)
          {
            v430 = (void *)(v178 - 32 * (*(_DWORD *)(v178 + 20) & 0x7FFFFFF));
            if (v177 == *v430)
            {
              uint64_t v180 = v430[4];
              if (v180) {
                goto LABEL_958;
              }
            }
          }
        }
        else if (v179 == 41 && v177 == *(void *)(v178 - 64))
        {
          uint64_t v180 = *(void *)(v178 - 32);
          if (v180) {
            goto LABEL_958;
          }
        }
      }
      else if (!v178)
      {
        goto LABEL_1245;
      }
      int v431 = *(unsigned __int8 *)(v177 + 16);
      if (v431 == 5)
      {
        if (*(_WORD *)(v177 + 18) != 13) {
          goto LABEL_1245;
        }
        v432 = (void *)(v177 - 32 * (*(_DWORD *)(v177 + 20) & 0x7FFFFFF));
        if (v178 != *v432) {
          goto LABEL_1245;
        }
        uint64_t v180 = v432[4];
        if (!v180) {
          goto LABEL_1245;
        }
      }
      else
      {
        if (v431 != 41) {
          goto LABEL_1245;
        }
        if (v178 != *(void *)(v177 - 64)) {
          goto LABEL_1245;
        }
        uint64_t v180 = *(void *)(v177 - 32);
        if (!v180) {
          goto LABEL_1245;
        }
      }
LABEL_958:
      if (v726 > 0x40) {
        bzero((void *)v725, (((unint64_t)v726 + 63) >> 3) & 0x3FFFFFF8);
      }
      else {
        unint64_t v725 = 0;
      }
      if (v728 > 0x40) {
        bzero((void *)v727, (((unint64_t)v728 + 63) >> 3) & 0x3FFFFFF8);
      }
      else {
        unint64_t v727 = 0;
      }
      sub_1CC15FDD8(v180, a2, &v725, a4 + 1, a5);
      if (v728 > 0x40) {
        int v487 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v727);
      }
      else {
        int v487 = __clz(__rbit64(~v727));
      }
      if (v487)
      {
        if (a3[1].i32[0] <= 0x40u)
        {
          unint64_t v348 = *(void *)a3 | 1;
          goto LABEL_612;
        }
        **(void **)a3 |= 1uLL;
      }
      goto LABEL_1245;
    case 0x1Du:
      int v67 = *((_DWORD *)a1 + 5);
      if ((v67 & 0x40000000) != 0) {
        unsigned int v68 = (void ***)*((void *)a1 - 1);
      }
      else {
        unsigned int v68 = (void ***)((char *)a1 - 32 * (v67 & 0x7FFFFFF));
      }
      sub_1CC15FDD8(v68[4], a2, a3, a4 + 1, a5);
      int v161 = *((_DWORD *)a1 + 5);
      if ((v161 & 0x40000000) != 0) {
        unint64_t v162 = (void *)*((void *)a1 - 1);
      }
      else {
        unint64_t v162 = (void *)((char *)a1 - 32 * (v161 & 0x7FFFFFF));
      }
      sub_1CC15FDD8(*v162, a2, &v725, a4 + 1, a5);
      uint64_t v163 = a3[1].u32[0];
      if (v163 > 0x40)
      {
        v667 = (void *)*a3;
        v668 = (uint64_t *)v725;
        unint64_t v669 = (unint64_t)(v163 + 63) >> 6;
        do
        {
          uint64_t v670 = *v668++;
          *v667++ &= v670;
          --v669;
        }
        while (v669);
      }
      else
      {
        *(void *)a3 &= v725;
      }
      uint64_t v164 = a3[3].u32[0];
      if (v164 > 0x40)
      {
        v671 = (void *)a3[2];
        v672 = (uint64_t *)v727;
        unint64_t v673 = (unint64_t)(v164 + 63) >> 6;
        do
        {
          uint64_t v674 = *v672++;
          *v671++ |= v674;
          --v673;
        }
        while (v673);
      }
      else
      {
        *(void *)&a3[2] |= v727;
      }
      goto LABEL_1245;
    case 0x1Eu:
      int v53 = *((_DWORD *)a1 + 5);
      if ((v53 & 0x40000000) != 0) {
        int v54 = (void ***)*((void *)a1 - 1);
      }
      else {
        int v54 = (void ***)((char *)a1 - 32 * (v53 & 0x7FFFFFF));
      }
      sub_1CC15FDD8(v54[4], a2, a3, a4 + 1, a5);
      int v124 = *((_DWORD *)a1 + 5);
      if ((v124 & 0x40000000) != 0) {
        int v125 = (void *)*((void *)a1 - 1);
      }
      else {
        int v125 = (void *)((char *)a1 - 32 * (v124 & 0x7FFFFFF));
      }
      sub_1CC15FDD8(*v125, a2, &v725, a4 + 1, a5);
      llvm::KnownBits::operator^=((uint64_t)a3, &v725);
      goto LABEL_1245;
    case 0x1Fu:
      int v88 = __clz(1 << *((_WORD *)a1 + 9)) ^ 0x3F;
      if (!v88) {
        goto LABEL_1245;
      }
      int v89 = -v88;
      goto LABEL_610;
    case 0x20u:
      if (!*(unsigned char *)(a5 + 40) || (*((unsigned char *)a1 + 23) & 0x20) == 0) {
        goto LABEL_1245;
      }
      uint64_t v90 = ***(void ***)a1;
      v700[0] = a1;
      int v91 = *(_DWORD *)(v90 + 2496);
      if (v91)
      {
        uint64_t v92 = *(void *)(v90 + 2480);
        int v93 = v91 - 1;
        unsigned int v94 = v93 & ((a1 >> 4) ^ (a1 >> 9));
        unsigned int v95 = (llvm::UndefValue **)(v92 + 40 * v94);
        int v96 = *v95;
        if (*v95 == a1) {
          goto LABEL_115;
        }
        unint64_t v97 = 0;
        int v98 = 1;
        while (v96 != (llvm::UndefValue *)-4096)
        {
          if (v97) {
            BOOL v99 = 0;
          }
          else {
            BOOL v99 = v96 == (llvm::UndefValue *)-8192;
          }
          if (v99) {
            unint64_t v97 = v95;
          }
          unsigned int v100 = v94 + v98++;
          unsigned int v94 = v100 & v93;
          unsigned int v95 = (llvm::UndefValue **)(v92 + 40 * v94);
          int v96 = *v95;
          if (*v95 == a1)
          {
LABEL_115:
            uint64_t v101 = *((unsigned int *)v95 + 4);
            if (v101)
            {
              int v102 = (uint64_t *)((char *)v95[1] + 8);
              uint64_t v103 = 16 * v101;
              while (*((_DWORD *)v102 - 2) != 4)
              {
                v102 += 2;
                v103 -= 16;
                if (!v103) {
                  goto LABEL_1245;
                }
              }
              if (*v102) {
                llvm::computeKnownBitsFromRangeMetadata(*v102, (void **)a3, (llvm::KnownBits *)a3);
              }
            }
            goto LABEL_1245;
          }
        }
        if (v97) {
          v445 = v97;
        }
        else {
          v445 = v95;
        }
      }
      else
      {
        v445 = 0;
      }
      unsigned int v95 = (llvm::UndefValue **)sub_1CC609054(v90 + 2480, (uint64_t)v700, (uint64_t *)v700, v445);
      v446 = (llvm::UndefValue *)v700[0];
      v95[3] = 0;
      v95[4] = 0;
      *unsigned int v95 = v446;
      v95[1] = (llvm::UndefValue *)(v95 + 3);
      v95[2] = (llvm::UndefValue *)0x100000000;
      goto LABEL_115;
    case 0x22u:
      int v111 = *((_DWORD *)a1 + 5);
      if ((v111 & 0x40000000) != 0) {
        uint64_t v112 = (void *)*((void *)a1 - 1);
      }
      else {
        uint64_t v112 = (void *)((char *)a1 - 32 * (v111 & 0x7FFFFFF));
      }
      unsigned int v690 = a4 + 1;
      sub_1CC15FBF8(*v112, a3, a4 + 1, a5);
      unsigned int v724 = v10;
      unint64_t v723 = 0;
      v694 = (uint64_t *)a5;
      BOOL v194 = *((unsigned char *)a1 + 16) != 62 || a1 == 0;
      uint64_t v195 = 64;
      if (v194) {
        uint64_t v195 = 24;
      }
      unint64_t v196 = *(void *)((char *)a1 + v195);
      int v197 = *((_DWORD *)a1 + 5);
      if ((v197 & 0x40000000) != 0)
      {
        unsigned int v199 = (void ***)*((void *)a1 - 1);
        int v198 = v197 & 0x7FFFFFF;
      }
      else
      {
        int v198 = v197 & 0x7FFFFFF;
        unsigned int v199 = (void ***)((char *)a1 - 32 * (v197 & 0x7FFFFFF));
      }
      v721 = (llvm::Constant **)(v199 + 4);
      uint64_t v722 = v196 | 4;
      if (v198 == 1) {
        goto LABEL_285;
      }
      uint64_t v203 = 1;
      while (1)
      {
        uint64_t v204 = a3[1].u32[0];
        if (v204 > 0x40)
        {
          int v278 = 0;
          int64_t v279 = (unint64_t)(v204 + 63) >> 6;
          do
          {
            BOOL v245 = v279-- < 1;
            if (v245) {
              break;
            }
            unint64_t v280 = *(void *)(*(void *)a3 + 8 * v279);
            v278 += __clz(v280);
          }
          while (!v280);
          int v281 = v204 | 0xFFFFFFC0;
          if ((v204 & 0x3F) == 0) {
            int v281 = 0;
          }
          if (v278 + v281 != v204) {
            goto LABEL_298;
          }
        }
        else if (*a3)
        {
          goto LABEL_298;
        }
        uint64_t v205 = a3[3].u32[0];
        if (v205 > 0x40)
        {
          int v284 = 0;
          int64_t v285 = (unint64_t)(v205 + 63) >> 6;
          do
          {
            BOOL v245 = v285-- < 1;
            if (v245) {
              break;
            }
            unint64_t v286 = *(void *)(*(void *)&a3[2] + 8 * v285);
            v284 += __clz(v286);
          }
          while (!v286);
          int v287 = v205 | 0xFFFFFFC0;
          if ((v205 & 0x3F) == 0) {
            int v287 = 0;
          }
          if (v284 + v287 == v205) {
            goto LABEL_285;
          }
        }
        else if (!*(void *)&a3[2])
        {
          goto LABEL_285;
        }
LABEL_298:
        int v206 = *((_DWORD *)a1 + 5);
        if ((v206 & 0x40000000) != 0) {
          unsigned int v207 = (void ***)*((void *)a1 - 1);
        }
        else {
          unsigned int v207 = (void ***)((char *)a1 - 32 * (v206 & 0x7FFFFFF));
        }
        unsigned int v208 = (unsigned int *)v207[4 * v203];
        if (*((unsigned __int8 *)v208 + 16) >= 0x15u) {
          uint64_t v209 = 0;
        }
        else {
          uint64_t v209 = (uint64_t)v207[4 * v203];
        }
        if (v209)
        {
          if (*(unsigned char *)(v209 + 16) == 17)
          {
            if (*(_UNKNOWN **)(v209 + 32) == &unk_1CFB2E344) {
              unint64_t v282 = *(char **)(v209 + 40);
            }
            else {
              unint64_t v282 = (char *)(v209 + 24);
            }
LABEL_481:
            if ((v282[28] & 7) == 3) {
              goto LABEL_420;
            }
            goto LABEL_310;
          }
          if ((*(_DWORD *)(*(void *)v209 + 8) & 0xFE) == 0x12)
          {
            SplatValue = llvm::Constant::getSplatValue((llvm::Constant *)v209, 0);
            if (SplatValue)
            {
              if (*((unsigned char *)SplatValue + 16) == 17)
              {
                if ((_UNKNOWN *)SplatValue[4] == &unk_1CFB2E344) {
                  unint64_t v282 = (char *)SplatValue[5];
                }
                else {
                  unint64_t v282 = (char *)(SplatValue + 3);
                }
                goto LABEL_481;
              }
            }
          }
          int v210 = *(unsigned __int8 *)(v209 + 16);
          if (v210 == 16)
          {
            uint64_t v211 = *(unsigned int *)(v209 + 32);
            if (v211 >= 0x41)
            {
              int v243 = 0;
              int64_t v244 = (unint64_t)(v211 + 63) >> 6;
              do
              {
                BOOL v245 = v244-- < 1;
                if (v245) {
                  break;
                }
                unint64_t v246 = *(void *)(*(void *)(v209 + 24) + 8 * v244);
                v243 += __clz(v246);
              }
              while (!v246);
              int v247 = v211 | 0xFFFFFFC0;
              if ((v211 & 0x3F) == 0) {
                int v247 = 0;
              }
              if (v243 + v247 == v211) {
                goto LABEL_420;
              }
            }
            else if (!*(void *)(v209 + 24))
            {
              goto LABEL_420;
            }
          }
          else if (v210 == 17)
          {
            if (sub_1CB844168(v209, 0.0)) {
              goto LABEL_420;
            }
          }
          else if ((v210 - 18) < 3 || v210 == 13)
          {
            goto LABEL_420;
          }
        }
LABEL_310:
        unint64_t v212 = v722 & 0xFFFFFFFFFFFFFFF8;
        if ((v722 & 4) != 0 || !v212)
        {
          if ((v722 & 4) == 0 || !v212)
          {
            AggregateElement = *v721;
            if (*v721) {
              BOOL v217 = *((unsigned char *)*v721 + 16) == 16;
            }
            else {
              BOOL v217 = 0;
            }
            if (!v217) {
              AggregateElement = (llvm::Constant *)llvm::Constant::getAggregateElement(AggregateElement, 0);
            }
            unint64_t v220 = (unsigned int *)*((void *)AggregateElement + 3);
            unsigned int v218 = (unsigned int *)((char *)AggregateElement + 24);
            int v219 = v220;
            if (v218[2] < 0x41) {
              int v219 = v218;
            }
            unint64_t v212 = *(void *)(*(void *)(v212 + 16) + 8 * *v219);
          }
          unsigned int v221 = *(unsigned __int8 *)(v212 + 8);
          if (v221 > 0x11) {
            goto LABEL_330;
          }
          if (((1 << v221) & 0xAC7F) == 0)
          {
            if (((1 << v221) & 0x30000) == 0)
            {
LABEL_330:
              if ((v221 & 0xFE) != 0x12 && v221 != 21)
              {
LABEL_787:
                uint64_t v418 = a3[1].u32[0];
                if (v418 > 0x40) {
                  bzero(*(void **)a3, ((unint64_t)(v418 + 63) >> 3) & 0x3FFFFFF8);
                }
                else {
                  *a3 = 0;
                }
                uint64_t v447 = a3[3].u32[0];
                if (v447 > 0x40) {
                  bzero(*(void **)&a3[2], ((unint64_t)(v447 + 63) >> 3) & 0x3FFFFFF8);
                }
                else {
                  a3[2] = 0;
                }
LABEL_285:
                uint64_t v200 = a3[1].u32[0];
                if (v200 > 0x40)
                {
                  int v645 = 0;
                  int64_t v646 = (unint64_t)(v200 + 63) >> 6;
                  do
                  {
                    BOOL v245 = v646-- < 1;
                    if (v245) {
                      break;
                    }
                    unint64_t v647 = *(void *)(*(void *)a3 + 8 * v646);
                    v645 += __clz(v647);
                  }
                  while (!v647);
                  int v648 = v200 | 0xFFFFFFC0;
                  if ((v200 & 0x3F) == 0) {
                    int v648 = 0;
                  }
                  if (v645 + v648 != v200) {
                    goto LABEL_289;
                  }
LABEL_287:
                  uint64_t v201 = a3[3].u32[0];
                  if (v201 > 0x40)
                  {
                    int v675 = 0;
                    int64_t v676 = (unint64_t)(v201 + 63) >> 6;
                    do
                    {
                      BOOL v245 = v676-- < 1;
                      if (v245) {
                        break;
                      }
                      unint64_t v677 = *(void *)(*(void *)&a3[2] + 8 * v676);
                      v675 += __clz(v677);
                    }
                    while (!v677);
                    int v678 = v201 | 0xFFFFFFC0;
                    if ((v201 & 0x3F) == 0) {
                      int v678 = 0;
                    }
                    if (v675 + v678 != v201) {
                      goto LABEL_289;
                    }
                  }
                  else if (a3[2])
                  {
                    goto LABEL_289;
                  }
LABEL_554:
                  if (v724 < 0x41) {
                    goto LABEL_1245;
                  }
                  unint64_t v316 = v723;
                }
                else
                {
                  if (!*(void *)a3) {
                    goto LABEL_287;
                  }
LABEL_289:
                  if (v724 <= 0x40)
                  {
                    if (!v723) {
                      goto LABEL_1245;
                    }
                    if (v724) {
                      unint64_t v202 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v724;
                    }
                    else {
                      unint64_t v202 = 0;
                    }
                    unsigned int v704 = v724;
                    unint64_t v703 = v202 & ~v723;
                    unsigned int v706 = v724;
                    unint64_t v705 = v723;
                    llvm::KnownBits::computeForAddSub(1, 0, (uint64_t)a3, (uint64_t)&v703, (uint64_t)v700);
                    if (a3[1].i32[0] >= 0x41u && *(void *)a3) {
                      ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a3, 0x1000C8000313F17);
                    }
                    *a3 = (int8x8_t)v700[0];
                    a3[1].i32[0] = (__int32)v700[1];
                    LODWORD(v700[1]) = 0;
                    if (a3[3].i32[0] >= 0x41u && (int8x8_t v630 = a3[2], *(void *)&v630))
                    {
                      MEMORY[0x1D25D9CB0](*(void *)&v630, 0x1000C8000313F17);
                      unsigned int v631 = v700[1];
                      a3[2] = (int8x8_t)__src[0];
                      a3[3].i32[0] = (__int32)__src[1];
                      LODWORD(__src[1]) = 0;
                      if (v631 >= 0x41 && v700[0]) {
                        MEMORY[0x1D25D9CB0](v700[0], 0x1000C8000313F17);
                      }
                    }
                    else
                    {
                      a3[2] = (int8x8_t)__src[0];
                      a3[3].i32[0] = (__int32)__src[1];
                      LODWORD(__src[1]) = 0;
                    }
                    if (v706 >= 0x41 && v705) {
                      MEMORY[0x1D25D9CB0](v705, 0x1000C8000313F17);
                    }
                    if (v704 >= 0x41 && v703) {
                      MEMORY[0x1D25D9CB0](v703, 0x1000C8000313F17);
                    }
                    goto LABEL_554;
                  }
                  int v314 = 0;
                  int64_t v315 = ((unint64_t)v724 + 63) >> 6;
                  unint64_t v316 = v723;
                  do
                  {
                    BOOL v245 = v315-- < 1;
                    if (v245) {
                      break;
                    }
                    unint64_t v317 = *(void *)(v723 + 8 * v315);
                    v314 += __clz(v317);
                  }
                  while (!v317);
                  unsigned int v318 = v724 | 0xFFFFFFC0;
                  if ((v724 & 0x3F) == 0) {
                    unsigned int v318 = 0;
                  }
                  if (v314 + v318 != v724)
                  {
                    LODWORD(v700[1]) = v724;
                    operator new[]();
                  }
                }
                if (!v316) {
                  goto LABEL_1245;
                }
LABEL_1244:
                MEMORY[0x1D25D9CB0]();
                goto LABEL_1245;
              }
            }
            if ((llvm::Type::isSizedDerivedType(v212, 0) & 1) == 0) {
              goto LABEL_787;
            }
          }
          int v223 = *(llvm::Type **)v208;
          if ((*(_DWORD *)(*(void *)v208 + 8) & 0xFE) == 0x12) {
            int v223 = (llvm::Type *)**((void **)v223 + 2);
          }
          unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v223);
          unsigned int v225 = PrimitiveSizeInBits;
          LODWORD(v700[1]) = PrimitiveSizeInBits;
          if (PrimitiveSizeInBits > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)v700);
          }
          LODWORD(__src[1]) = PrimitiveSizeInBits;
          v700[0] = 0;
          __src[0] = 0;
          sub_1CC15FBF8(v208, v700, v690, v694);
          int v226 = (llvm::DataLayout *)*v694;
          uint64_t v227 = sub_1CB83544C(*v694, v212);
          BOOL v229 = v228 == 1;
          char Alignment = llvm::DataLayout::getAlignment(v226, (llvm::Type *)v212, 1);
          unsigned int v718 = v225;
          unsigned int v720 = v225;
          unint64_t v717 = 0;
          v719 = 0;
          unint64_t v231 = (1 << Alignment) + ((unint64_t)(v227 + 7) >> 3) - 1;
          unint64_t v232 = v231 & -(1 << Alignment);
          if (v229)
          {
            int v233 = __clz(__rbit64(v232));
            if (v231 >> Alignment) {
              int v234 = v233;
            }
            else {
              int v234 = 64;
            }
            if (v234)
            {
              unint64_t v235 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v234;
              if (v718 > 0x40) {
                *(void *)v717 |= v235;
              }
              else {
                v717 |= v235;
              }
            }
LABEL_399:
            llvm::KnownBits::mul((llvm::KnownBits *)v700, (const llvm::KnownBits *)&v717, 0, (uint64_t)&v711);
            if (LODWORD(v700[1]) >= 0x41 && v700[0]) {
              MEMORY[0x1D25D9CB0](v700[0], 0x1000C8000313F17);
            }
            v700[0] = v711;
            LODWORD(v700[1]) = v712;
            unsigned int v712 = 0;
            if (LODWORD(__src[1]) >= 0x41 && __src[0])
            {
              MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
              __src[0] = v713;
              LODWORD(__src[1]) = v714;
              __int32 v714 = 0;
              if (v712 >= 0x41 && v711) {
                MEMORY[0x1D25D9CB0](v711, 0x1000C8000313F17);
              }
            }
            else
            {
              __src[0] = v713;
              LODWORD(__src[1]) = v714;
            }
            unsigned int v260 = v700[1];
            if (LODWORD(v700[1]) < v10)
            {
              llvm::APInt::sext((uint64_t)v700, v10, (uint64_t)&v711);
              llvm::APInt::sext((uint64_t)__src, v10, (uint64_t)&v729);
              unsigned int v260 = v712;
              unint64_t v261 = v711;
              unsigned int v262 = v730;
              unsigned int v263 = v729;
            }
            else if (LODWORD(v700[1]) > v10)
            {
              if (LODWORD(v700[1]) >= 0x41) {
                unint64_t v274 = (void **)v700[0];
              }
              else {
                unint64_t v274 = v700;
              }
              unint64_t v275 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v10;
              if (!v10) {
                unint64_t v275 = 0;
              }
              unsigned int v276 = __src;
              if (LODWORD(__src[1]) >= 0x41) {
                unsigned int v276 = (void **)__src[0];
              }
              unint64_t v277 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v10;
              if (!v10) {
                unint64_t v277 = 0;
              }
              unint64_t v261 = (void *)(v275 & (unint64_t)*v274);
              unsigned int v263 = (uint64_t **)(v277 & (unint64_t)*v276);
              unsigned int v262 = v10;
              unsigned int v260 = v10;
            }
            else
            {
              if (LODWORD(v700[1]) > 0x40) {
                operator new[]();
              }
              unint64_t v261 = v700[0];
              unsigned int v262 = __src[1];
              if (LODWORD(__src[1]) > 0x40) {
                operator new[]();
              }
              unsigned int v263 = (uint64_t **)__src[0];
            }
            if (LODWORD(v700[1]) >= 0x41 && v700[0]) {
              MEMORY[0x1D25D9CB0](v700[0], 0x1000C8000313F17);
            }
            v700[0] = v261;
            LODWORD(v700[1]) = v260;
            if (LODWORD(__src[1]) >= 0x41 && __src[0])
            {
              MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
              unsigned int v260 = v700[1];
            }
            __src[0] = v263;
            LODWORD(__src[1]) = v262;
            unsigned int v708 = v260;
            if (v260 > 0x40) {
              operator new[]();
            }
            v707 = v700[0];
            unsigned int v710 = v262;
            if (v262 > 0x40) {
              operator new[]();
            }
            v709 = __src[0];
            llvm::KnownBits::computeForAddSub(1, 0, (uint64_t)a3, (uint64_t)&v707, (uint64_t)&v711);
            if (a3[1].i32[0] >= 0x41u && *(void *)a3) {
              ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a3, 0x1000C8000313F17);
            }
            *a3 = (int8x8_t)v711;
            a3[1].i32[0] = v712;
            unsigned int v712 = 0;
            if (a3[3].i32[0] >= 0x41u && (int8x8_t v264 = a3[2], *(void *)&v264))
            {
              MEMORY[0x1D25D9CB0](*(void *)&v264, 0x1000C8000313F17);
              unsigned int v265 = v712;
              a3[2] = (int8x8_t)v713;
              a3[3].i32[0] = v714;
              __int32 v714 = 0;
              if (v265 >= 0x41 && v711) {
                MEMORY[0x1D25D9CB0](v711, 0x1000C8000313F17);
              }
            }
            else
            {
              a3[2] = (int8x8_t)v713;
              a3[3].i32[0] = v714;
              __int32 v714 = 0;
            }
            if (v710 >= 0x41 && v709) {
              MEMORY[0x1D25D9CB0](v709, 0x1000C8000313F17);
            }
            if (v708 >= 0x41 && v707) {
              MEMORY[0x1D25D9CB0](v707, 0x1000C8000313F17);
            }
LABEL_416:
            if (v720 >= 0x41 && v719) {
              MEMORY[0x1D25D9CB0](v719, 0x1000C8000313F17);
            }
            if (v718 >= 0x41 && v717) {
              MEMORY[0x1D25D9CB0](v717, 0x1000C8000313F17);
            }
            if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
              MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
            }
            if (LODWORD(v700[1]) >= 0x41 && v700[0]) {
              MEMORY[0x1D25D9CB0](v700[0], 0x1000C8000313F17);
            }
            goto LABEL_420;
          }
          if (LODWORD(v700[1]) > 0x40)
          {
            __int32 v237 = 0;
            unint64_t v248 = ((unint64_t)LODWORD(v700[1]) + 63) >> 6;
            unsigned int v249 = (int8x8_t *)v700[0];
            do
            {
              int8x8_t v250 = *v249++;
              uint8x8_t v251 = (uint8x8_t)vcnt_s8(v250);
              v251.i16[0] = vaddlv_u8(v251);
              v237 += v251.i32[0];
              --v248;
            }
            while (v248);
          }
          else
          {
            uint8x8_t v236 = (uint8x8_t)vcnt_s8((int8x8_t)v700[0]);
            v236.i16[0] = vaddlv_u8(v236);
            __int32 v237 = v236.i32[0];
          }
          if (LODWORD(__src[1]) > 0x40)
          {
            int v252 = 0;
            unint64_t v253 = ((unint64_t)LODWORD(__src[1]) + 63) >> 6;
            unint64_t v254 = (int8x8_t *)__src[0];
            do
            {
              int8x8_t v255 = *v254++;
              uint8x8_t v256 = (uint8x8_t)vcnt_s8(v255);
              v256.i16[0] = vaddlv_u8(v256);
              v252 += v256.i32[0];
              --v253;
            }
            while (v253);
            if (v252 + v237 == LODWORD(v700[1]))
            {
              unsigned int v730 = __src[1];
              operator new[]();
            }
          }
          else
          {
            uint8x8_t v238 = (uint8x8_t)vcnt_s8((int8x8_t)__src[0]);
            v238.i16[0] = vaddlv_u8(v238);
            if (v237 + v238.i32[0] == LODWORD(v700[1]))
            {
              unsigned int v730 = __src[1];
              v729 = (uint64_t **)__src[0];
              unsigned int v716 = v225;
              if (v225) {
                unint64_t v239 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v225;
              }
              else {
                unint64_t v239 = 0;
              }
              unint64_t v715 = v239 & v232;
              llvm::APInt::operator*((uint64_t)&v729, &v715, (uint64_t)&v711);
              if (v730 >= 0x41 && v729) {
                MEMORY[0x1D25D9CB0](v729, 0x1000C8000313F17);
              }
              v729 = (uint64_t **)v711;
              unsigned int v730 = v712;
              llvm::APInt::sextOrTrunc((uint64_t)&v729, v10, (uint64_t)&v711);
              char v240 = v724;
              if (v724 >= 0x41)
              {
                uint64_t v266 = 0;
                int v267 = (unint64_t *)v723;
                unint64_t v268 = v711;
                unint64_t v269 = ((unint64_t)v724 + 63) >> 6;
                unint64_t v270 = v269;
                do
                {
                  uint64_t v271 = *(void *)v268;
                  v268 += 8;
                  unint64_t v272 = v271 + *v267;
                  BOOL v273 = v272 + 1 <= *v267;
                  if (v266)
                  {
                    ++v272;
                    uint64_t v266 = v273;
                  }
                  else
                  {
                    uint64_t v266 = v272 < *v267;
                  }
                  *v267++ = v272;
                  --v270;
                }
                while (v270);
                *(void *)(v723 + 8 * (v269 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -v240;
              }
              else
              {
                if (v724) {
                  unint64_t v241 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v724;
                }
                else {
                  unint64_t v241 = 0;
                }
                unint64_t v723 = v241 & (unint64_t)&v711[v723];
              }
              if (v712 >= 0x41 && v711) {
                MEMORY[0x1D25D9CB0](v711, 0x1000C8000313F17);
              }
              if (v716 >= 0x41 && v715) {
                MEMORY[0x1D25D9CB0](v715, 0x1000C8000313F17);
              }
              if (v730 >= 0x41 && v729) {
                MEMORY[0x1D25D9CB0](v729, 0x1000C8000313F17);
              }
              goto LABEL_416;
            }
          }
          unsigned int v730 = v225;
          if (v225) {
            unint64_t v257 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v225;
          }
          else {
            unint64_t v257 = 0;
          }
          unint64_t v258 = v257 & v232;
          v729 = (uint64_t **)(v257 & v232);
          if (v225) {
            unint64_t v259 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v225;
          }
          else {
            unint64_t v259 = 0;
          }
          unint64_t v717 = v259 & ~v258;
          unsigned int v718 = v225;
          v719 = (unint64_t *)v258;
          unsigned int v720 = v225;
          goto LABEL_399;
        }
        if ((*(_DWORD *)(*(void *)v209 + 8) & 0xFE) == 0x12) {
          unsigned int v208 = (unsigned int *)llvm::Constant::getSplatValue((llvm::Constant *)v209, 0);
        }
        unsigned int v213 = v208 + 6;
        if (v208[8] >= 0x41) {
          unsigned int v213 = *(unsigned int **)v213;
        }
        uint64_t v214 = *v213;
        StructLayout = llvm::DataLayout::getStructLayout((llvm::DataLayout *)*v694, (llvm::StructType *)v212);
        llvm::APInt::operator+=((uint64_t)&v723, *((void *)StructLayout + v214 + 2));
LABEL_420:
        ++v203;
        sub_1CB8460E4((uint64_t)&v721);
        if (v198 == v203) {
          goto LABEL_285;
        }
      }
    case 0x26u:
    case 0x27u:
    case 0x2Fu:
    case 0x30u:
      int v13 = *((_DWORD *)a1 + 5);
      if ((v13 & 0x40000000) != 0) {
        int v14 = (uint64_t **)*((void *)a1 - 1);
      }
      else {
        int v14 = (uint64_t **)((char *)a1 - 32 * (v13 & 0x7FFFFFF));
      }
      uint64_t v29 = **v14;
      unsigned int v30 = *(_DWORD *)(v29 + 8);
      if ((v30 & 0xFE) == 0x12)
      {
        unsigned int v31 = *(uint64_t **)(v29 + 16);
        uint64_t v29 = *v31;
        unsigned int v30 = *(_DWORD *)(*v31 + 8);
      }
      uint64_t v32 = *(unsigned char **)a5;
      if (v30 == 15)
      {
        if ((v30 & 0xFE) == 0x12) {
          unsigned int v30 = *(_DWORD *)(**(void **)(v29 + 16) + 8);
        }
        if (v30 < 0x100) {
          goto LABEL_41;
        }
        unsigned int v33 = v30 >> 8;
        uint64_t v34 = *((unsigned int *)v32 + 60);
        uint64_t v35 = *((void *)v32 + 29);
        if (v34)
        {
          uint64_t v35 = *((void *)v32 + 29);
          unint64_t v36 = *((unsigned int *)v32 + 60);
          do
          {
            unint64_t v37 = v36 >> 1;
            uint64_t v38 = v35 + 16 * (v36 >> 1);
            unsigned int v39 = *(_DWORD *)(v38 + 8);
            uint64_t v40 = v38 + 16;
            v36 += ~(v36 >> 1);
            if (v39 < v33) {
              uint64_t v35 = v40;
            }
            else {
              unint64_t v36 = v37;
            }
          }
          while (v36);
        }
        if (v35 == *((void *)v32 + 29) + 16 * v34 || *(_DWORD *)(v35 + 8) != v33) {
LABEL_41:
        }
          uint64_t v35 = *((void *)v32 + 29);
        unsigned int v41 = *(_DWORD *)(v35 + 4);
      }
      else
      {
        unsigned int v41 = sub_1CB83544C((uint64_t)v32, v29);
        if (v42 == 1) {
      }
        }
      sub_1CC17EE08((unint64_t)a3, v41, (uint64_t)v700);
      if (a3[1].i32[0] >= 0x41u && *(void *)a3) {
        ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a3, 0x1000C8000313F17);
      }
      *a3 = (int8x8_t)v700[0];
      a3[1].i32[0] = (__int32)v700[1];
      LODWORD(v700[1]) = 0;
      unsigned int v43 = a3 + 2;
      if (a3[3].i32[0] >= 0x41u && *(void *)v43)
      {
        ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*v43, 0x1000C8000313F17);
        unsigned int v616 = v700[1];
        a3[2] = (int8x8_t)__src[0];
        a3[3].i32[0] = (__int32)__src[1];
        LODWORD(__src[1]) = 0;
        if (v616 >= 0x41 && v700[0]) {
          MEMORY[0x1D25D9CB0](v700[0], 0x1000C8000313F17);
        }
      }
      else
      {
        a3[2] = (int8x8_t)__src[0];
        a3[3].i32[0] = (__int32)__src[1];
      }
      int v44 = *((_DWORD *)a1 + 5);
      if ((v44 & 0x40000000) != 0) {
        char v45 = (void *)*((void *)a1 - 1);
      }
      else {
        char v45 = (void *)((char *)a1 - 32 * (v44 & 0x7FFFFFF));
      }
      sub_1CC15FBF8(*v45, a3, a4 + 1, a5);
      unsigned int v46 = a3[1].u32[0];
      if (v46 < v10)
      {
        sub_1CB9F87DC((uint64_t *)a3, v10, (uint64_t)v700);
      }
      else if (v46 > v10)
      {
        unint64_t v47 = a3;
        if (v46 >= 0x41) {
          unint64_t v47 = (int8x8_t *)*a3;
        }
        unint64_t v48 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v10;
        unint64_t v49 = v48;
        if (!v10) {
          unint64_t v49 = 0;
        }
        int8x8_t v50 = *v47;
        uint64_t v51 = a3 + 2;
        if (a3[3].i32[0] >= 0x41u) {
          uint64_t v51 = (int8x8_t *)*v43;
        }
        if (!v10) {
          unint64_t v48 = 0;
        }
        int v52 = (void *)(v48 & *(void *)v51);
        LODWORD(v700[1]) = v10;
        v700[0] = (void *)(v49 & *(void *)&v50);
        LODWORD(__src[1]) = v10;
        __src[0] = v52;
      }
      else
      {
        LODWORD(v700[1]) = a3[1].i32[0];
        if (v46 > 0x40) {
          operator new[]();
        }
        v700[0] = (void *)*a3;
        LODWORD(__src[1]) = a3[3].i32[0];
        if (LODWORD(__src[1]) > 0x40) {
          operator new[]();
        }
        __src[0] = (void *)*v43;
      }
      if (a3[1].i32[0] >= 0x41u && *(void *)a3) {
        ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a3, 0x1000C8000313F17);
      }
      *a3 = (int8x8_t)v700[0];
      a3[1].i32[0] = (__int32)v700[1];
      LODWORD(v700[1]) = 0;
      if (a3[3].i32[0] < 0x41u) {
        goto LABEL_264;
      }
      int8x8_t v123 = *v43;
      if (!*(void *)v43) {
        goto LABEL_264;
      }
      goto LABEL_1272;
    case 0x28u:
      int v55 = *((_DWORD *)a1 + 5);
      if ((v55 & 0x40000000) != 0) {
        int v56 = (uint64_t **)*((void *)a1 - 1);
      }
      else {
        int v56 = (uint64_t **)((char *)a1 - 32 * (v55 & 0x7FFFFFF));
      }
      uint64_t v126 = **v56;
      if ((*(_DWORD *)(v126 + 8) & 0xFE) == 0x12) {
        uint64_t v126 = **(void **)(v126 + 16);
      }
      unsigned int v127 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v126);
      unsigned int v128 = v127;
      unsigned int v129 = a3[1].u32[0];
      if (v127 > 0x40)
      {
        uint64_t v136 = a5;
        if (v129 != v127) {
          operator new[]();
        }
        sub_1CD0463BC((uint64_t)v700, (uint64_t)a3);
        int v134 = a3 + 2;
        if (a3[3].i32[0] != v128) {
          operator new[]();
        }
        sub_1CD0463BC((uint64_t)&v717, (uint64_t)&a3[2]);
        unsigned int v128 = v718;
        unint64_t v138 = v717;
      }
      else
      {
        int v130 = a3;
        if (v129 >= 0x41) {
          int v130 = (int8x8_t *)*a3;
        }
        int8x8_t v131 = *v130;
        LODWORD(v700[1]) = v127;
        unint64_t v132 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v127;
        if (v127) {
          unint64_t v133 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v127;
        }
        else {
          unint64_t v133 = 0;
        }
        v700[0] = (void *)(v133 & *(void *)&v131);
        int v134 = a3 + 2;
        int64_t v135 = a3 + 2;
        if (a3[3].i32[0] >= 0x41u) {
          int64_t v135 = (int8x8_t *)*v134;
        }
        uint64_t v136 = a5;
        int8x8_t v137 = *v135;
        if (!v127) {
          unint64_t v132 = 0;
        }
        unint64_t v138 = v132 & *(void *)&v137;
      }
      __int32 v139 = (__int32)v700[1];
      unint64_t v140 = v700[0];
      if (a3[1].i32[0] >= 0x41u && *(void *)a3) {
        ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a3, 0x1000C8000313F17);
      }
      *a3 = (int8x8_t)v140;
      a3[1].i32[0] = v139;
      if (a3[3].i32[0] >= 0x41u && *(void *)v134) {
        ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*v134, 0x1000C8000313F17);
      }
      a3[2] = (int8x8_t)v138;
      a3[3].i32[0] = v128;
      int v141 = *((_DWORD *)a1 + 5);
      if ((v141 & 0x40000000) != 0) {
        unsigned int v142 = (void *)*((void *)a1 - 1);
      }
      else {
        unsigned int v142 = (void *)((char *)a1 - 32 * (v141 & 0x7FFFFFF));
      }
      sub_1CC15FBF8(*v142, a3, a4 + 1, v136);
      llvm::APInt::sext((uint64_t)a3, v10, (uint64_t)v700);
      llvm::APInt::sext((uint64_t)v134, v10, (uint64_t)&v717);
      __int32 v143 = (__int32)v700[1];
      int v144 = v700[0];
      unsigned int v145 = v718;
      unint64_t v146 = v717;
      if (a3[1].i32[0] >= 0x41u && *(void *)a3) {
        ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a3, 0x1000C8000313F17);
      }
      *a3 = (int8x8_t)v144;
      a3[1].i32[0] = v143;
      if (a3[3].i32[0] >= 0x41u && *(void *)v134) {
        ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*v134, 0x1000C8000313F17);
      }
      a3[2] = (int8x8_t)v146;
      a3[3].i32[0] = v145;
      goto LABEL_1245;
    case 0x31u:
      int v69 = *((_DWORD *)a1 + 5);
      if ((v69 & 0x40000000) != 0) {
        int v70 = (uint64_t **)*((void *)a1 - 1);
      }
      else {
        int v70 = (uint64_t **)((char *)a1 - 32 * (v69 & 0x7FFFFFF));
      }
      uint64_t v165 = **v70;
      if ((*(_DWORD *)(v165 + 8) & 0xFD) == 0xD && (*(_DWORD *)(*(void *)a1 + 8) & 0xFE) != 0x12)
      {
        if ((v69 & 0x40000000) != 0) {
          unsigned int v337 = (uint64_t *)*((void *)a1 - 1);
        }
        else {
          unsigned int v337 = (uint64_t *)((char *)a1 - 32 * (v69 & 0x7FFFFFF));
        }
        uint64_t v338 = *v337;
        uint64_t v340 = a4 + 1;
        v339 = a3;
LABEL_704:
        sub_1CC15FBF8(v338, v339, v340, a5);
      }
      else if (*(_DWORD *)(v165 + 8) == 18 && *(unsigned char *)(*(void *)(v165 + 24) + 8) == 13)
      {
        int v166 = (*(_DWORD *)(*(void *)a1 + 8) & 0xFE) == 0x12
             ? *(unsigned __int8 *)(**(void **)(*(void *)a1 + 16) + 8)
             : *(_DWORD *)(*(void *)a1 + 8);
        if (v166 == 13)
        {
          unsigned int v403 = llvm::Type::getPrimitiveSizeInBits(**(llvm::Type ***)(v165 + 16));
          unsigned int v404 = v10 / v403;
          unsigned int v689 = v403;
          if (!(v10 % v403))
          {
            int v405 = *(_DWORD *)(a2 + 8);
            unsigned int v718 = v404 * v405;
            if (v404 * v405 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v717);
            }
            unint64_t v717 = 0;
            if (v405)
            {
              unsigned int v406 = 0;
              unsigned int v407 = *(_DWORD *)(a2 + 8);
              unsigned int v408 = v718;
              do
              {
                v409 = (void *)(*(void *)a2 + 8 * (v406 >> 6));
                if (v407 < 0x41) {
                  v409 = (void *)a2;
                }
                if ((*v409 >> v406))
                {
                  uint64_t v410 = 1 << (v406 * v404);
                  if (v408 > 0x40) {
                    *(void *)(v717 + 8 * ((v406 * v404) >> 6)) |= v410;
                  }
                  else {
                    v717 |= v410;
                  }
                }
                ++v406;
              }
              while (v405 != v406);
            }
            LODWORD(v700[1]) = v403;
            if (v403 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)v700);
            }
            LODWORD(__src[1]) = v403;
            v700[0] = 0;
            __src[0] = 0;
            if (v10 >= v403)
            {
              uint64_t v435 = 0;
              unsigned int v692 = a4 + 1;
              uint64_t v436 = v718;
              unint64_t v437 = v717;
              size_t v688 = 0xFFFFFFFFFFFFFFFFLL >> ~(v718 + 63);
              do
              {
                int v438 = *((_DWORD *)a1 + 5);
                if ((v438 & 0x40000000) != 0) {
                  v439 = (uint64_t *)*((void *)a1 - 1);
                }
                else {
                  v439 = (uint64_t *)((char *)a1 - 32 * (v438 & 0x7FFFFFF));
                }
                uint64_t v440 = *v439;
                unsigned int v712 = v436;
                if (v436 > 0x40) {
                  operator new[]();
                }
                unint64_t v441 = v437 << v435;
                if (v436 == v435) {
                  unint64_t v441 = 0;
                }
                size_t v442 = v688;
                if (!v436) {
                  size_t v442 = 0;
                }
                v711 = (unsigned __int8 *)(v442 & v441);
                sub_1CC15FDD8(v440, &v711, v700, v692, a5);
                if (**(unsigned char **)a5) {
                  unsigned int v443 = v404 + ~v435;
                }
                else {
                  unsigned int v443 = v435;
                }
                unsigned int v444 = v443 * v689;
                llvm::APInt::insertBits((void **)a3, (const llvm::APInt *)v700, v443 * v689);
                llvm::APInt::insertBits((void **)&a3[2], (const llvm::APInt *)__src, v444);
                ++v435;
              }
              while (v404 != v435);
            }
            if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
              MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
            }
            if (LODWORD(v700[1]) >= 0x41 && v700[0]) {
              MEMORY[0x1D25D9CB0](v700[0], 0x1000C8000313F17);
            }
            if (v718 >= 0x41 && v717) {
              goto LABEL_1244;
            }
          }
        }
      }
      goto LABEL_1245;
    case 0x37u:
      v711 = 0;
      v729 = 0;
      unint64_t v723 = 0;
      if (!llvm::matchSimpleRecurrence((uint64_t)a1, &v711, &v729, &v723)) {
        goto LABEL_870;
      }
      int v60 = v711;
      unsigned int v61 = v711[16];
      if (v61 - 53 > 2 || *((llvm::UndefValue **)v711 - 8) != a1) {
        goto LABEL_75;
      }
      long long v401 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)v700 = *(_OWORD *)a5;
      *(_OWORD *)__src = v401;
      long long v702 = *(_OWORD *)(a5 + 32);
      __src[0] = a1;
      sub_1CC15FDD8(v729, a2, &v725, a4 + 1, v700);
      if (v61 != 55)
      {
        if (v61 == 54)
        {
          if (v726 > 0x40)
          {
            int v433 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v725);
          }
          else
          {
            if (!v726) {
              goto LABEL_75;
            }
            int v433 = __clz(~(v725 << -(char)v726));
          }
          if (!v433) {
            goto LABEL_75;
          }
          unsigned int v402 = a3[1].u32[0];
          uint64_t v59 = (llvm::Type *)(v402 - v433);
          if (v402 <= 0x40 && v59 <= 0x3F)
          {
            unint64_t v468 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v433 << (v402 - v433);
LABEL_927:
            *(void *)a3 |= v468;
            goto LABEL_75;
          }
          v632 = a3;
        }
        else
        {
          if (v61 != 53) {
            goto LABEL_75;
          }
          unsigned int v402 = v726 > 0x40 ? llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v725) : __clz(__rbit64(~v725));
          if (!v402) {
            goto LABEL_75;
          }
          if (v402 <= 0x40)
          {
            unint64_t v468 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v402;
            if (a3[1].i32[0] <= 0x40u) {
              goto LABEL_927;
            }
            **(void **)a3 |= v468;
LABEL_75:
            if (v61 > 0x39 || ((1 << v61) & 0x3002A0000000000) == 0) {
              goto LABEL_870;
            }
            long long v62 = *(_OWORD *)(a5 + 16);
            *(_OWORD *)v700 = *(_OWORD *)a5;
            *(_OWORD *)__src = v62;
            long long v702 = *(_OWORD *)(a5 + 32);
            int v63 = *((_DWORD *)a1 + 5);
            if ((v63 & 0x40000000) != 0) {
              int64_t v64 = (void *)*((void *)a1 - 1);
            }
            else {
              int64_t v64 = (void *)((char *)a1 - 32 * (v63 & 0x7FFFFFF));
            }
            BOOL v350 = *v64 != (void)v729;
            uint64_t v351 = *((unsigned int *)a1 + 15);
            uint64_t v352 = v64[4 * v351 + (*v64 != (void)v729)];
            uint64_t v353 = *(void *)(v352 + 40);
            if (v353 == v352 + 40)
            {
              v354 = 0;
            }
            else
            {
              if (v353) {
                v354 = (unsigned __int8 *)(v353 - 24);
              }
              else {
                v354 = 0;
              }
              if (v354[16] - 29 >= 0xB) {
                v354 = 0;
              }
            }
            unsigned int v359 = !v350;
            if ((v63 & 0x40000000) != 0) {
              v360 = (void ***)*((void *)a1 - 1);
            }
            else {
              v360 = (void ***)((char *)a1 - 32 * (v63 & 0x7FFFFFF));
            }
            v361 = (&v360[4 * v351])[v359];
            v362 = (void **)v361[5];
            if (v362 == v361 + 5)
            {
              v364 = 0;
            }
            else
            {
              if (v362) {
                v363 = (unsigned __int8 *)(v362 - 3);
              }
              else {
                v363 = 0;
              }
              if (v363[16] - 29 >= 0xB) {
                v364 = 0;
              }
              else {
                v364 = v363;
              }
            }
            __src[0] = v354;
            sub_1CC15FBF8(v729, &v725, a4 + 1, v700);
            unsigned int v718 = v10;
            unsigned int v720 = v10;
            unint64_t v717 = 0;
            v719 = 0;
            __src[0] = v364;
            sub_1CC15FBF8(v723, &v717, a4 + 1, v700);
            if (v726 > 0x40) {
              unsigned int v365 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v725);
            }
            else {
              unsigned int v365 = __clz(__rbit64(~v725));
            }
            if (v718 > 0x40) {
              unsigned int v366 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v717);
            }
            else {
              unsigned int v366 = __clz(__rbit64(~v717));
            }
            if (v366 >= v365) {
              unsigned int v367 = v365;
            }
            else {
              unsigned int v367 = v366;
            }
            if (v367)
            {
              if (v367 > 0x40)
              {
                llvm::APInt::setBitsSlowCase(a3, 0, v367);
              }
              else
              {
                unint64_t v368 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v367;
                if (a3[1].i32[0] > 0x40u) {
                  **(void **)a3 |= v368;
                }
                else {
                  *(void *)a3 |= v368;
                }
              }
            }
            HIDWORD(v370) = v60[16] - 41;
            LODWORD(v370) = HIDWORD(v370);
            unsigned int v369 = v370 >> 1;
            if (v369 > 6 || ((1 << v369) & 0x47) == 0 || !*(unsigned char *)(a5 + 40) || (v60[17] & 4) == 0) {
              goto LABEL_867;
            }
            switch(v61)
            {
              case '-':
                unsigned int v426 = v726 - 1;
                v427 = (int8x8_t *)&v725;
                if (v726 >= 0x41) {
                  v427 = (int8x8_t *)(v725 + 8 * (v426 >> 6));
                }
                if (((*(unint64_t *)v427 >> v426) & 1) == 0) {
                  goto LABEL_867;
                }
                v428 = &v717;
                if (v718 >= 0x41) {
                  v428 = (unint64_t *)(v717 + 8 * ((v718 - 1) >> 6));
                }
                if (((*v428 >> (v718 - 1)) & 1) == 0) {
                  goto LABEL_867;
                }
                break;
              case '+':
                if (*((llvm::UndefValue **)v60 - 8) != a1) {
                  goto LABEL_867;
                }
                v419 = (int8x8_t *)&v725;
                if (v726 >= 0x41) {
                  v419 = (int8x8_t *)(v725 + 8 * ((v726 - 1) >> 6));
                }
                if (((*(unint64_t *)v419 >> (v726 - 1)) & 1) == 0
                  || (v720 >= 0x41 ? (v420 = (unint64_t **)&v719[(v720 - 1) >> 6]) : (v420 = &v719),
                      (((unint64_t)*v420 >> (v720 - 1)) & 1) == 0))
                {
                  if (v728 >= 0x41) {
                    v421 = (unint64_t *)(v727 + 8 * ((v728 - 1) >> 6));
                  }
                  else {
                    v421 = &v727;
                  }
                  if (((*v421 >> (v728 - 1)) & 1) == 0) {
                    goto LABEL_867;
                  }
                  char v374 = v718 - 1;
                  v375 = (unint64_t **)&v717;
                  if (v718 >= 0x41) {
                    v375 = (unint64_t **)(v717 + 8 * ((v718 - 1) >> 6));
                  }
                  goto LABEL_803;
                }
                break;
              case ')':
                v371 = (int8x8_t *)&v725;
                if (v726 >= 0x41) {
                  v371 = (int8x8_t *)(v725 + 8 * ((v726 - 1) >> 6));
                }
                if (((*(unint64_t *)v371 >> (v726 - 1)) & 1) == 0) {
                  goto LABEL_673;
                }
                v372 = &v717;
                if (v718 >= 0x41) {
                  v372 = (unint64_t *)(v717 + 8 * ((v718 - 1) >> 6));
                }
                if (((*v372 >> (v718 - 1)) & 1) == 0)
                {
LABEL_673:
                  if (v728 >= 0x41) {
                    v373 = (unint64_t *)(v727 + 8 * ((v728 - 1) >> 6));
                  }
                  else {
                    v373 = &v727;
                  }
                  if (((*v373 >> (v728 - 1)) & 1) == 0) {
                    goto LABEL_867;
                  }
                  char v374 = v720 - 1;
                  if (v720 >= 0x41) {
                    v375 = (unint64_t **)&v719[(v720 - 1) >> 6];
                  }
                  else {
                    v375 = &v719;
                  }
LABEL_803:
                  if (((unint64_t)*v375 >> v374))
                  {
                    v422 = a3 + 2;
                    unsigned int v423 = a3[3].u32[0];
                    unsigned int v424 = v423 - 1;
                    if (v423 >= 0x41)
                    {
                      int8x8_t v425 = *v422;
LABEL_865:
                      v422 = (int8x8_t *)(*(void *)&v425 + 8 * (v424 >> 6));
                      goto LABEL_866;
                    }
                    goto LABEL_866;
                  }
LABEL_867:
                  if (v720 >= 0x41 && v719) {
                    MEMORY[0x1D25D9CB0](v719, 0x1000C8000313F17);
                  }
                  if (v718 >= 0x41 && v717) {
                    MEMORY[0x1D25D9CB0](v717, 0x1000C8000313F17);
                  }
                  if (((1 << v61) & 0x3002A0000000000) != 0) {
                    goto LABEL_1245;
                  }
LABEL_870:
                  if (a4 > 4) {
                    goto LABEL_1245;
                  }
                  int v448 = *((_DWORD *)a1 + 5);
                  uint64_t v449 = v448 & 0x7FFFFFF;
                  if ((v448 & 0x7FFFFFF) == 0) {
                    goto LABEL_1245;
                  }
                  uint64_t v450 = a3[1].u32[0];
                  if (v450 > 0x40)
                  {
                    int v451 = 0;
                    int64_t v452 = (unint64_t)(v450 + 63) >> 6;
                    do
                    {
                      BOOL v245 = v452-- < 1;
                      if (v245) {
                        break;
                      }
                      unint64_t v453 = *(void *)(*(void *)a3 + 8 * v452);
                      v451 += __clz(v453);
                    }
                    while (!v453);
                    int v454 = v450 | 0xFFFFFFC0;
                    if ((v450 & 0x3F) == 0) {
                      int v454 = 0;
                    }
                    if (v451 + v454 != v450) {
                      goto LABEL_1245;
                    }
                  }
                  else if (*a3)
                  {
                    goto LABEL_1245;
                  }
                  v455 = a3 + 2;
                  uint64_t v456 = a3[3].u32[0];
                  if (v456 > 0x40)
                  {
                    int v457 = 0;
                    int64_t v458 = (unint64_t)(v456 + 63) >> 6;
                    do
                    {
                      BOOL v245 = v458-- < 1;
                      if (v245) {
                        break;
                      }
                      unint64_t v459 = *(void *)(*(void *)v455 + 8 * v458);
                      v457 += __clz(v459);
                    }
                    while (!v459);
                    int v460 = v456 | 0xFFFFFFC0;
                    if ((v456 & 0x3F) == 0) {
                      int v460 = 0;
                    }
                    if (v457 + v460 != v456) {
                      goto LABEL_1245;
                    }
                  }
                  else if (*v455)
                  {
                    goto LABEL_1245;
                  }
                  if ((v448 & 0x40000000) != 0) {
                    v461 = (llvm::UndefValue **)*((void *)a1 - 1);
                  }
                  else {
                    v461 = (llvm::UndefValue **)((char *)a1 - 32 * v449);
                  }
                  v462 = *v461;
                  int v463 = v449 - 1;
                  if (v449 != 1)
                  {
                    v464 = (void ***)((char *)a1 - 32 * v449);
                    uint64_t v465 = 4;
                    do
                    {
                      if ((v448 & 0x40000000) != 0) {
                        v466 = *(llvm::UndefValue **)(*((void *)a1 - 1) + v465 * 8);
                      }
                      else {
                        v466 = (llvm::UndefValue *)v464[v465];
                      }
                      if (v466 != v462 && v466 != a1)
                      {
                        if (v462 != a1) {
                          goto LABEL_1178;
                        }
                        v467 = v464;
                        if ((v448 & 0x40000000) != 0) {
                          v467 = (void ***)*((void *)a1 - 1);
                        }
                        v462 = (llvm::UndefValue *)v467[v465];
                      }
                      v465 += 4;
                      --v463;
                    }
                    while (v463);
                  }
                  if (v462 == a1)
                  {
                    v462 = llvm::UndefValue::get(*(llvm::UndefValue **)a1, v59);
                    if (!v462) {
                      goto LABEL_1178;
                    }
                  }
                  else if (!v462)
                  {
                    goto LABEL_1178;
                  }
                  if (*((unsigned __int8 *)v462 + 16) - 11 < 2) {
                    goto LABEL_1245;
                  }
LABEL_1178:
                  uint64_t v592 = a3[1].u32[0];
                  if (v592 > 0x40)
                  {
                    memset(*(void **)a3, 255, ((unint64_t)(v592 + 63) >> 3) & 0x3FFFFFF8);
                    LODWORD(v592) = a3[1].i32[0];
                    if (v592)
                    {
LABEL_1180:
                      unint64_t v593 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v592;
                      if (v592 >= 0x41)
                      {
                        v594 = (int8x8_t *)(*(void *)a3
                                          + 8 * ((((unint64_t)v592 + 63) >> 6) - 1));
LABEL_1182:
                        *(void *)v594 &= v593;
                        uint64_t v595 = a3[3].u32[0];
                        if (v595 > 0x40)
                        {
                          memset(*(void **)&a3[2], 255, ((unint64_t)(v595 + 63) >> 3) & 0x3FFFFFF8);
                          LODWORD(v595) = a3[3].i32[0];
                          if (v595)
                          {
LABEL_1184:
                            unint64_t v596 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v595;
                            if (v595 >= 0x41)
                            {
                              v597 = (int8x8_t *)(*(void *)v455
                                                + 8
                                                * ((((unint64_t)v595 + 63) >> 6) - 1));
                              goto LABEL_1186;
                            }
LABEL_1185:
                            v597 = a3 + 2;
LABEL_1186:
                            *(void *)v597 &= v596;
                            int v598 = *((_DWORD *)a1 + 5);
                            uint64_t v599 = v598 & 0x7FFFFFF;
                            if ((v598 & 0x7FFFFFF) == 0) {
                              goto LABEL_1245;
                            }
                            uint64_t v600 = 0;
                            while (1)
                            {
                              int v601 = *((_DWORD *)a1 + 5);
                              if ((v601 & 0x40000000) != 0) {
                                v602 = (void ***)*((void *)a1 - 1);
                              }
                              else {
                                v602 = (void ***)((char *)a1 - 32 * (v601 & 0x7FFFFFF));
                              }
                              v603 = (llvm::UndefValue *)v602[4 * v600];
                              if (v603 == a1) {
                                goto LABEL_1209;
                              }
                              long long v604 = *(_OWORD *)(a5 + 16);
                              *(_OWORD *)v700 = *(_OWORD *)a5;
                              *(_OWORD *)__src = v604;
                              long long v702 = *(_OWORD *)(a5 + 32);
                              v605 = (&v602[4 * *((unsigned int *)a1 + 15)])[v600];
                              v606 = (void **)v605[5];
                              if (v606 == v605 + 5)
                              {
                                v607 = 0;
                              }
                              else
                              {
                                if (v606) {
                                  v607 = (unsigned __int8 *)(v606 - 3);
                                }
                                else {
                                  v607 = 0;
                                }
                                if (v607[16] - 29 >= 0xB) {
                                  v607 = 0;
                                }
                              }
                              __src[0] = v607;
                              unsigned int v718 = v10;
                              unsigned int v720 = v10;
                              unint64_t v717 = 0;
                              v719 = 0;
                              if (v726 >= 0x41 && v725) {
                                MEMORY[0x1D25D9CB0](v725, 0x1000C8000313F17);
                              }
                              unint64_t v725 = v717;
                              unsigned int v726 = v718;
                              unsigned int v718 = 0;
                              if (v728 >= 0x41 && v727) {
                                MEMORY[0x1D25D9CB0](v727, 0x1000C8000313F17);
                              }
                              unint64_t v727 = (unint64_t)v719;
                              unsigned int v728 = v720;
                              sub_1CC15FBF8(v603, &v725, 5, v700);
                              unsigned int v608 = a3[1].u32[0];
                              if (v608 > 0x40) {
                                operator new[]();
                              }
                              int8x8_t v609 = (int8x8_t)(v725 & *(void *)a3);
                              unsigned int v610 = a3[3].u32[0];
                              if (v610 > 0x40) {
                                operator new[]();
                              }
                              unint64_t v611 = v727 & *(void *)v455;
                              if (a3[1].i32[0] >= 0x41u && *(void *)a3) {
                                ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a3, 0x1000C8000313F17);
                              }
                              *a3 = v609;
                              a3[1].i32[0] = v608;
                              if (a3[3].i32[0] >= 0x41u && *(void *)v455)
                              {
                                ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*v455, 0x1000C8000313F17);
                                unsigned int v608 = a3[1].u32[0];
                              }
                              a3[2] = (int8x8_t)v611;
                              a3[3].i32[0] = v610;
                              if (v608 > 0x40)
                              {
                                int v612 = 0;
                                int64_t v613 = ((unint64_t)v608 + 63) >> 6;
                                do
                                {
                                  BOOL v245 = v613-- < 1;
                                  if (v245) {
                                    break;
                                  }
                                  unint64_t v614 = *(void *)(*(void *)a3 + 8 * v613);
                                  v612 += __clz(v614);
                                }
                                while (!v614);
                                unsigned int v615 = v608 | 0xFFFFFFC0;
                                if ((v608 & 0x3F) == 0) {
                                  unsigned int v615 = 0;
                                }
                                if (v612 + v615 != v608) {
                                  goto LABEL_1209;
                                }
                              }
                              else if (*a3)
                              {
                                goto LABEL_1209;
                              }
                              if (!v611) {
                                goto LABEL_1245;
                              }
LABEL_1209:
                              if (++v600 == v599) {
                                goto LABEL_1245;
                              }
                            }
                          }
                        }
                        else
                        {
                          int8x8_t *v455 = (int8x8_t)-1;
                          if (v595) {
                            goto LABEL_1184;
                          }
                        }
                        unint64_t v596 = 0;
                        goto LABEL_1185;
                      }
LABEL_1181:
                      v594 = a3;
                      goto LABEL_1182;
                    }
                  }
                  else
                  {
                    *a3 = (int8x8_t)-1;
                    if (v592) {
                      goto LABEL_1180;
                    }
                  }
                  unint64_t v593 = 0;
                  goto LABEL_1181;
                }
                break;
              default:
                goto LABEL_867;
            }
            unsigned int v429 = a3[1].u32[0];
            unsigned int v424 = v429 - 1;
            if (v429 >= 0x41)
            {
              int8x8_t v425 = *a3;
              goto LABEL_865;
            }
            v422 = a3;
LABEL_866:
            *(void *)v422 |= 1 << v424;
            goto LABEL_867;
          }
          v632 = a3;
          LODWORD(v59) = 0;
        }
LABEL_1334:
        llvm::APInt::setBitsSlowCase(v632, v59, v402);
        goto LABEL_75;
      }
      if (v726 > 0x40)
      {
        int v434 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v725);
      }
      else
      {
        if (!v726)
        {
LABEL_915:
          if (v728 > 0x40)
          {
            int v470 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v727);
          }
          else
          {
            if (!v728) {
              goto LABEL_75;
            }
            int v470 = __clz(~(v727 << -(char)v728));
          }
          if (!v470) {
            goto LABEL_75;
          }
          unsigned int v402 = a3[3].u32[0];
          uint64_t v59 = (llvm::Type *)(v402 - v470);
          if (v402 <= 0x40 && v59 <= 0x3F)
          {
            *(void *)&a3[2] |= 0xFFFFFFFFFFFFFFFFLL >> -(char)v470 << (v402 - v470);
            goto LABEL_75;
          }
          v632 = a3 + 2;
          goto LABEL_1334;
        }
        int v434 = __clz(~(v725 << -(char)v726));
      }
      if (v434)
      {
        unsigned int v469 = a3[1].u32[0];
        uint64_t v59 = (llvm::Type *)(v469 - v434);
        if (v469 > 0x40 || v59 > 0x3F) {
          llvm::APInt::setBitsSlowCase(a3, v59, v469);
        }
        else {
          *(void *)a3 |= 0xFFFFFFFFFFFFFFFFLL >> -(char)v434 << (v469 - v434);
        }
      }
      goto LABEL_915;
    case 0x39u:
      v700[0] = 0;
      unint64_t v717 = 0;
      unsigned int matched = llvm::matchSelectPattern((uint64_t)a1, (uint64_t)v700, &v717, 0, 0);
      unsigned int v79 = matched;
      unsigned int v80 = v700[0];
      unint64_t v81 = v717;
      if (matched > 8 || ((1 << matched) & 0x181) == 0)
      {
        sub_1CC15FBF8(v717, a3, a4 + 1, a5);
        sub_1CC15FBF8(v80, &v725, a4 + 1, a5);
        switch(v79)
        {
          case 2u:
            goto LABEL_1028;
          case 3u:
            goto LABEL_1169;
          case 4u:
            goto LABEL_1022;
          default:
            goto LABEL_593;
        }
      }
      int v82 = *((_DWORD *)a1 + 5);
      if ((v82 & 0x40000000) != 0) {
        unsigned int v83 = (void ***)*((void *)a1 - 1);
      }
      else {
        unsigned int v83 = (void ***)((char *)a1 - 32 * (v82 & 0x7FFFFFF));
      }
      uint64_t v321 = a4 + 1;
      sub_1CC15FBF8(v83[8], a3, v321, a5);
      int v322 = *((_DWORD *)a1 + 5);
      if ((v322 & 0x40000000) != 0) {
        uint64_t v323 = (void ***)*((void *)a1 - 1);
      }
      else {
        uint64_t v323 = (void ***)((char *)a1 - 32 * (v322 & 0x7FFFFFF));
      }
      uint64_t v324 = a5;
      sub_1CC15FBF8(v323[4], &v725, v321, a5);
      unsigned int v325 = a3[1].u32[0];
      if (v325 > 0x40) {
        operator new[]();
      }
      int8x8_t v326 = (int8x8_t)(v725 & *(void *)a3);
      unsigned int v327 = a3[3].u32[0];
      if (v327 > 0x40) {
        operator new[]();
      }
      unint64_t v328 = v727 & *(void *)&a3[2];
      if (a3[1].i32[0] >= 0x41u && *(void *)a3) {
        ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a3, 0x1000C8000313F17);
      }
      *a3 = v326;
      a3[1].i32[0] = v325;
      if (a3[3].i32[0] >= 0x41u)
      {
        int8x8_t v629 = a3[2];
        if (v629) {
          MEMORY[0x1D25D9CB0](*(void *)&v629, 0x1000C8000313F17);
        }
      }
      a3[2] = (int8x8_t)v328;
      a3[3].i32[0] = v327;
      if (v79 != 7) {
        goto LABEL_1245;
      }
      v700[1] = v80;
      int v329 = *(unsigned __int8 *)(v81 + 16);
      if (v329 == 5)
      {
        if (*(_WORD *)(v81 + 18) != 15
          || !sub_1CC03F414((uint64_t)v700, *(llvm::Constant **)(v81 - 32 * (*(_DWORD *)(v81 + 20) & 0x7FFFFFF))))
        {
          goto LABEL_1245;
        }
        v330 = *(void **)(v81 - 32 * (*(_DWORD *)(v81 + 20) & 0x7FFFFFF) + 32);
      }
      else
      {
        if (v329 != 43 || !sub_1CBF535C4((uint64_t)v700, *(llvm::Constant **)(v81 - 64))) {
          goto LABEL_1245;
        }
        v330 = *(void **)(v81 - 32);
      }
      if (v700[1] == v330 && *(unsigned char *)(v324 + 40) && (*(unsigned char *)(v81 + 17) & 4) != 0)
      {
        unsigned int v383 = a3[1].u32[0];
        unint64_t v347 = 1 << (v383 - 1);
        if (v383 <= 0x40) {
          goto LABEL_611;
        }
        *(void *)(*(void *)a3 + 8 * ((v383 - 1) >> 6)) |= v347;
      }
      goto LABEL_1245;
    case 0x3Du:
      int v57 = *((_DWORD *)a1 + 5);
      if ((v57 & 0x40000000) != 0) {
        int v58 = (uint64_t *)*((void *)a1 - 1);
      }
      else {
        int v58 = (uint64_t *)((char *)a1 - 32 * (v57 & 0x7FFFFFF));
      }
      uint64_t v147 = *v58;
      uint64_t v148 = v58[4];
      if (*(unsigned char *)(v148 + 16) == 16) {
        uint64_t v149 = v148;
      }
      else {
        uint64_t v149 = 0;
      }
      if (*(unsigned char *)(*(void *)v147 + 8) == 19) {
        goto LABEL_535;
      }
      unint64_t v150 = *(unsigned int *)(*(void *)v147 + 32);
      LODWORD(v700[1]) = v150;
      if (v150 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)v700);
      }
      uint64_t v151 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v150);
      if (!v150) {
        uint64_t v151 = 0;
      }
      v700[0] = v151;
      if (!v149) {
        goto LABEL_1241;
      }
      uint64_t v152 = *(unsigned int *)(v149 + 32);
      if (v152 >= 0x41)
      {
        int v355 = 0;
        int64_t v356 = (unint64_t)(v152 + 63) >> 6;
        do
        {
          BOOL v245 = v356-- < 1;
          if (v245) {
            break;
          }
          unint64_t v357 = *(void *)(*(void *)(v149 + 24) + 8 * v356);
          v355 += __clz(v357);
        }
        while (!v357);
        int v358 = v152 | 0xFFFFFFC0;
        if ((v152 & 0x3F) == 0) {
          int v358 = 0;
        }
        if ((v152 - v355 - v358) >= 0x41) {
          goto LABEL_1241;
        }
        unint64_t v153 = **(void **)(v149 + 24);
      }
      else
      {
        unint64_t v153 = *(void *)(v149 + 24);
      }
      if (v153 < v150)
      {
        unsigned int v718 = v150;
        if (LODWORD(v700[1]) >= 0x41 && v700[0]) {
          MEMORY[0x1D25D9CB0](v700[0], 0x1000C8000313F17);
        }
        v700[0] = (void *)(1 << v153);
        LODWORD(v700[1]) = v150;
LABEL_1242:
        sub_1CC15FDD8(v147, v700, a3, a4 + 1, a5);
        if (v150 < 0x41) {
          goto LABEL_1245;
        }
        goto LABEL_1243;
      }
LABEL_1241:
      LODWORD(v150) = v700[1];
      goto LABEL_1242;
    case 0x3Eu:
      int v120 = *((_DWORD *)a1 + 5);
      if ((v120 & 0x40000000) != 0) {
        int v122 = (llvm::APInt **)*((void *)a1 - 1);
      }
      else {
        int v122 = (llvm::APInt **)((char *)a1 - 32 * (v120 & 0x7FFFFFF));
      }
      unint64_t v288 = v122[8];
      if (v288) {
        BOOL v289 = *((unsigned char *)v288 + 16) == 16;
      }
      else {
        BOOL v289 = 0;
      }
      if (!v289) {
        goto LABEL_535;
      }
      unsigned int v290 = *v122;
      v291 = v122[4];
      unint64_t v292 = (void *)((char *)v288 + 24);
      uint64_t v293 = *((unsigned int *)v288 + 8);
      unint64_t v294 = (void *)((char *)v288 + 24);
      if (v293 < 0x41) {
        goto LABEL_513;
      }
      int v295 = 0;
      int64_t v296 = (unint64_t)(v293 + 63) >> 6;
      do
      {
        BOOL v245 = v296-- < 1;
        if (v245) {
          break;
        }
        unint64_t v297 = *(void *)(*v292 + 8 * v296);
        v295 += __clz(v297);
      }
      while (!v297);
      int v298 = v293 | 0xFFFFFFC0;
      if ((v293 & 0x3F) == 0) {
        int v298 = 0;
      }
      if ((v293 - v295 - v298) > 0x40) {
        goto LABEL_535;
      }
      unint64_t v294 = (void *)*v292;
LABEL_513:
      if (*v294 >= (unint64_t)*(unsigned int *)(a2 + 8))
      {
LABEL_535:
        uint64_t v311 = a3[1].u32[0];
        if (v311 > 0x40) {
          bzero(*(void **)a3, ((unint64_t)(v311 + 63) >> 3) & 0x3FFFFFF8);
        }
        else {
          *a3 = 0;
        }
        uint64_t v312 = a3[3].u32[0];
        if (v312 > 0x40)
        {
          char v313 = (void *)a3[2];
LABEL_541:
          bzero(v313, ((unint64_t)(v312 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          a3[2] = 0;
        }
        goto LABEL_1245;
      }
      unint64_t v299 = (llvm::APInt *)&a3[2];
      uint64_t v300 = a3[3].u32[0];
      v691 = v290;
      v695 = (llvm::APInt *)&a3[2];
      if (v300 > 0x40)
      {
        memset(*(void **)&a3[2], 255, ((unint64_t)(v300 + 63) >> 3) & 0x3FFFFFF8);
        unint64_t v299 = v695;
        LODWORD(v300) = a3[3].i32[0];
        if (v300)
        {
LABEL_516:
          unint64_t v301 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v300;
          if (v300 >= 0x41)
          {
            BOOL v302 = (llvm::APInt *)(*(void *)v299
                                 + 8 * ((((unint64_t)v300 + 63) >> 6) - 1));
LABEL_518:
            *(void *)v302 &= v301;
            uint64_t v303 = a3[1].u32[0];
            if (v303 > 0x40)
            {
              memset(*(void **)a3, 255, ((unint64_t)(v303 + 63) >> 3) & 0x3FFFFFF8);
              LODWORD(v303) = a3[1].i32[0];
              if (v303)
              {
LABEL_520:
                unint64_t v304 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v303;
                if (v303 >= 0x41)
                {
                  v305 = (int8x8_t *)(*(void *)a3
                                    + 8 * ((((unint64_t)v303 + 63) >> 6) - 1));
LABEL_522:
                  *(void *)v305 &= v304;
                  if (*((_DWORD *)v288 + 8) >= 0x41u) {
                    unint64_t v292 = (void *)*v292;
                  }
                  unint64_t v306 = (void *)*v292;
                  if (*(_DWORD *)(a2 + 8) >= 0x41u) {
                    unint64_t v307 = (void *)(*(void *)a2 + 8 * (*v292 >> 6));
                  }
                  else {
                    unint64_t v307 = (void *)a2;
                  }
                  uint64_t v308 = 1 << (char)v306;
                  if ((*v307 & (1 << (char)v306)) == 0) {
                    goto LABEL_532;
                  }
                  sub_1CC15FBF8(v291, a3, a4 + 1, a5);
                  uint64_t v309 = a3[1].u32[0];
                  if (v309 > 0x40)
                  {
                    int v663 = 0;
                    int64_t v664 = (unint64_t)(v309 + 63) >> 6;
                    do
                    {
                      BOOL v245 = v664-- < 1;
                      if (v245) {
                        break;
                      }
                      unint64_t v665 = *(void *)(*(void *)a3 + 8 * v664);
                      v663 += __clz(v665);
                    }
                    while (!v665);
                    int v666 = v309 | 0xFFFFFFC0;
                    if ((v309 & 0x3F) == 0) {
                      int v666 = 0;
                    }
                    if (v663 + v666 != v309) {
                      goto LABEL_532;
                    }
                  }
                  else if (*a3)
                  {
                    goto LABEL_532;
                  }
                  uint64_t v310 = a3[3].u32[0];
                  if (v310 > 0x40)
                  {
                    int v683 = 0;
                    int64_t v684 = (unint64_t)(v310 + 63) >> 6;
                    do
                    {
                      BOOL v245 = v684-- < 1;
                      if (v245) {
                        break;
                      }
                      unint64_t v685 = *(void *)(*(void *)v695 + 8 * v684);
                      v683 += __clz(v685);
                    }
                    while (!v685);
                    int v686 = v310 | 0xFFFFFFC0;
                    if ((v310 & 0x3F) == 0) {
                      int v686 = 0;
                    }
                    if (v683 + v686 == v310) {
                      goto LABEL_1245;
                    }
                  }
                  else if (!*(void *)v695)
                  {
                    goto LABEL_1245;
                  }
LABEL_532:
                  LODWORD(v700[1]) = *(_DWORD *)(a2 + 8);
                  if (LODWORD(v700[1]) > 0x40) {
                    operator new[]();
                  }
                  v700[0] = (void *)(*(void *)a2 & ~v308);
                  if (v700[0])
                  {
                    sub_1CC15FDD8(v691, v700, &v725, a4 + 1, a5);
                    unsigned int v411 = a3[1].u32[0];
                    if (v411 > 0x40) {
                      operator new[]();
                    }
                    int8x8_t v412 = (int8x8_t)(v725 & *(void *)a3);
                    v413 = v695;
                    unsigned int v414 = a3[3].u32[0];
                    if (v414 > 0x40) {
                      operator new[]();
                    }
                    unint64_t v415 = v727 & *(void *)v695;
                    if (a3[1].i32[0] >= 0x41u && *(void *)a3)
                    {
                      ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a3, 0x1000C8000313F17);
                      v413 = v695;
                    }
                    *a3 = v412;
                    a3[1].i32[0] = v411;
                    if (a3[3].i32[0] >= 0x41u && *(void *)v413) {
                      MEMORY[0x1D25D9CB0](*(void *)v413, 0x1000C8000313F17);
                    }
                    a3[2] = (int8x8_t)v415;
                    a3[3].i32[0] = v414;
                  }
                  goto LABEL_1245;
                }
LABEL_521:
                v305 = a3;
                goto LABEL_522;
              }
            }
            else
            {
              *a3 = (int8x8_t)-1;
              if (v303) {
                goto LABEL_520;
              }
            }
            unint64_t v304 = 0;
            goto LABEL_521;
          }
LABEL_517:
          BOOL v302 = v299;
          goto LABEL_518;
        }
      }
      else
      {
        *(void *)unint64_t v299 = -1;
        if (v300) {
          goto LABEL_516;
        }
      }
      unint64_t v301 = 0;
      goto LABEL_517;
    case 0x3Fu:
      if (!a1 || v11 != 91) {
        goto LABEL_535;
      }
      LODWORD(v700[1]) = 1;
      v700[0] = 0;
      unsigned int v718 = 1;
      unint64_t v717 = 0;
      if ((sub_1CC175684((uint64_t)a1, a2, v700, (void **)&v717) & 1) == 0)
      {
        uint64_t v349 = a3[1].u32[0];
        if (v349 > 0x40) {
          bzero(*(void **)a3, ((unint64_t)(v349 + 63) >> 3) & 0x3FFFFFF8);
        }
        else {
          *a3 = 0;
        }
        uint64_t v390 = a3[3].u32[0];
        if (v390 > 0x40) {
          bzero(*(void **)&a3[2], ((unint64_t)(v390 + 63) >> 3) & 0x3FFFFFF8);
        }
        else {
          a3[2] = 0;
        }
        goto LABEL_741;
      }
      unsigned int v113 = a3 + 2;
      uint64_t v114 = a3[3].u32[0];
      if (v114 > 0x40)
      {
        memset(*(void **)&a3[2], 255, ((unint64_t)(v114 + 63) >> 3) & 0x3FFFFFF8);
        LODWORD(v114) = a3[3].i32[0];
        if (v114)
        {
LABEL_137:
          unint64_t v115 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v114;
          if (v114 < 0x41)
          {
LABEL_138:
            uint64_t v116 = a3 + 2;
            goto LABEL_139;
          }
          uint64_t v116 = (int8x8_t *)(*(void *)v113
                            + 8 * ((((unint64_t)v114 + 63) >> 6) - 1));
LABEL_139:
          *(void *)v116 &= v115;
          uint64_t v117 = a3[1].u32[0];
          if (v117 > 0x40)
          {
            memset(*(void **)a3, 255, ((unint64_t)(v117 + 63) >> 3) & 0x3FFFFFF8);
            LODWORD(v117) = a3[1].i32[0];
            if (v117)
            {
LABEL_141:
              unint64_t v118 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v117;
              if (v117 >= 0x41)
              {
                uint64_t v119 = (int8x8_t *)(*(void *)a3
                                  + 8 * ((((unint64_t)v117 + 63) >> 6) - 1));
LABEL_143:
                *(void *)v119 &= v118;
                if (LODWORD(v700[1]) > 0x40)
                {
                  int v384 = 0;
                  int64_t v385 = ((unint64_t)LODWORD(v700[1]) + 63) >> 6;
                  do
                  {
                    BOOL v245 = v385-- < 1;
                    if (v245) {
                      break;
                    }
                    unint64_t v386 = *((void *)v700[0] + v385);
                    v384 += __clz(v386);
                  }
                  while (!v386);
                  unsigned int v387 = LODWORD(v700[1]) | 0xFFFFFFC0;
                  if (((uint64_t)v700[1] & 0x3F) == 0) {
                    unsigned int v387 = 0;
                  }
                  if (v384 + v387 == LODWORD(v700[1])) {
                    goto LABEL_723;
                  }
                }
                else if (!v700[0])
                {
                  goto LABEL_723;
                }
                sub_1CC15FDD8(*((void *)a1 - 8), v700, a3, a4 + 1, a5);
                uint64_t v388 = a3[1].u32[0];
                if (v388 > 0x40)
                {
                  int v659 = 0;
                  int64_t v660 = (unint64_t)(v388 + 63) >> 6;
                  do
                  {
                    BOOL v245 = v660-- < 1;
                    if (v245) {
                      break;
                    }
                    unint64_t v661 = *(void *)(*(void *)a3 + 8 * v660);
                    v659 += __clz(v661);
                  }
                  while (!v661);
                  int v662 = v388 | 0xFFFFFFC0;
                  if ((v388 & 0x3F) == 0) {
                    int v662 = 0;
                  }
                  if (v659 + v662 != v388) {
                    goto LABEL_723;
                  }
                }
                else if (*a3)
                {
                  goto LABEL_723;
                }
                uint64_t v389 = a3[3].u32[0];
                if (v389 > 0x40)
                {
                  int v679 = 0;
                  int64_t v680 = (unint64_t)(v389 + 63) >> 6;
                  do
                  {
                    BOOL v245 = v680-- < 1;
                    if (v245) {
                      break;
                    }
                    unint64_t v681 = *(void *)(*(void *)v113 + 8 * v680);
                    v679 += __clz(v681);
                  }
                  while (!v681);
                  int v682 = v389 | 0xFFFFFFC0;
                  if ((v389 & 0x3F) == 0) {
                    int v682 = 0;
                  }
                  if (v679 + v682 == v389) {
                    goto LABEL_741;
                  }
                }
                else if (!*(void *)v113)
                {
                  goto LABEL_741;
                }
LABEL_723:
                if (v718 > 0x40)
                {
                  int v391 = 0;
                  int64_t v392 = ((unint64_t)v718 + 63) >> 6;
                  v393 = (void *)v717;
                  do
                  {
                    BOOL v245 = v392-- < 1;
                    if (v245) {
                      break;
                    }
                    unint64_t v394 = *(void *)(v717 + 8 * v392);
                    v391 += __clz(v394);
                  }
                  while (!v394);
                  unsigned int v395 = v718 | 0xFFFFFFC0;
                  if ((v718 & 0x3F) == 0) {
                    unsigned int v395 = 0;
                  }
                  if (v391 + v395 == v718) {
                    goto LABEL_743;
                  }
                }
                else if (!v717)
                {
                  goto LABEL_745;
                }
                sub_1CC15FDD8(*((void *)a1 - 4), &v717, &v725, a4 + 1, a5);
                unsigned int v396 = a3[1].u32[0];
                if (v396 > 0x40) {
                  operator new[]();
                }
                int8x8_t v397 = (int8x8_t)(v725 & *(void *)a3);
                unsigned int v398 = a3[3].u32[0];
                if (v398 > 0x40) {
                  operator new[]();
                }
                unint64_t v399 = v727 & *(void *)v113;
                if (a3[1].i32[0] >= 0x41u && *(void *)a3) {
                  ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a3, 0x1000C8000313F17);
                }
                *a3 = v397;
                a3[1].i32[0] = v396;
                if (a3[3].i32[0] >= 0x41u && *(void *)v113) {
                  ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*v113, 0x1000C8000313F17);
                }
                a3[2] = (int8x8_t)v399;
                a3[3].i32[0] = v398;
LABEL_741:
                if (v718 < 0x41) {
                  goto LABEL_745;
                }
                v393 = (void *)v717;
LABEL_743:
                if (!v393) {
                  goto LABEL_745;
                }
                goto LABEL_744;
              }
LABEL_142:
              uint64_t v119 = a3;
              goto LABEL_143;
            }
          }
          else
          {
            *a3 = (int8x8_t)-1;
            if (v117) {
              goto LABEL_141;
            }
          }
          unint64_t v118 = 0;
          goto LABEL_142;
        }
      }
      else
      {
        *unsigned int v113 = (int8x8_t)-1;
        if (v114) {
          goto LABEL_137;
        }
      }
      unint64_t v115 = 0;
      goto LABEL_138;
    case 0x40u:
      int v65 = *((_DWORD *)a1 + 5);
      if ((v65 & 0x40000000) != 0) {
        unint64_t v66 = (uint64_t *)*((void *)a1 - 1);
      }
      else {
        unint64_t v66 = (uint64_t *)((char *)a1 - 32 * (v65 & 0x7FFFFFF));
      }
      uint64_t v154 = *v66;
      if (*(unsigned char *)(v154 + 16) != 84) {
        goto LABEL_1245;
      }
      uint64_t v155 = *(void *)(v154 - 32);
      if (!v155) {
        goto LABEL_1245;
      }
      if (*(unsigned char *)(v155 + 16)) {
        goto LABEL_1245;
      }
      if (*(void *)(v155 + 24) != *(void *)(v154 + 72)) {
        goto LABEL_1245;
      }
      if ((*(unsigned char *)(v155 + 33) & 0x20) == 0) {
        goto LABEL_1245;
      }
      if (*((_DWORD *)a1 + 18) != 1) {
        goto LABEL_1245;
      }
      if (**((_DWORD **)a1 + 8)) {
        goto LABEL_1245;
      }
      unsigned int v156 = *(_DWORD *)(v155 + 36) - 263;
      if (v156 > 0x31) {
        goto LABEL_1245;
      }
      if (((1 << v156) & 0x4000000001) != 0)
      {
        v516 = (uint64_t *)(v154 - 32 * (*(_DWORD *)(v154 + 20) & 0x7FFFFFF));
        uint64_t v158 = *v516;
        uint64_t v159 = v516[4];
        uint64_t v687 = a5;
        int v160 = 1;
      }
      else
      {
        if (((1 << v156) & 0x400000008000) != 0)
        {
          v515 = (uint64_t ****)(v154 - 32 * (*(_DWORD *)(v154 + 20) & 0x7FFFFFF));
          unsigned int v335 = *v515;
          unint64_t v336 = v515[4];
          int v105 = 0;
LABEL_587:
          sub_1CC17EA2C(v335, v336, v105, a2, (uint64_t)a3, (uint64_t)&v725, a4, (uint64_t *)a5);
          goto LABEL_1245;
        }
        if (((1 << v156) & 0x2000000200000) == 0) {
          goto LABEL_1245;
        }
        int64_t v157 = (uint64_t *)(v154 - 32 * (*(_DWORD *)(v154 + 20) & 0x7FFFFFF));
        uint64_t v158 = *v157;
        uint64_t v159 = v157[4];
        uint64_t v687 = a5;
        int v160 = 0;
      }
      int v104 = 0;
LABEL_581:
      sub_1CC17FB3C(v160, v158, v159, v104, a2, (uint64_t)a3, (uint64_t)&v725, a4, v687);
      goto LABEL_1245;
    case 0x43u:
      int v76 = *((_DWORD *)a1 + 5);
      if ((v76 & 0x40000000) != 0) {
        unint64_t v77 = (uint64_t ****)*((void *)a1 - 1);
      }
      else {
        unint64_t v77 = (uint64_t ****)((char *)a1 - 32 * (v76 & 0x7FFFFFF));
      }
      if (!sub_1CC16A22C(*v77, *(void *)(a5 + 8), *(void *)(a5 + 16), *(void *)(a5 + 24), a4 + 1, 1))goto LABEL_1245; {
      int v181 = *((_DWORD *)a1 + 5);
      }
      if ((v181 & 0x40000000) != 0) {
        int v182 = (uint64_t *)*((void *)a1 - 1);
      }
      else {
        int v182 = (uint64_t *)((char *)a1 - 32 * (v181 & 0x7FFFFFF));
      }
      uint64_t v338 = *v182;
      v339 = a3;
      uint64_t v340 = a4 + 1;
      goto LABEL_704;
    default:
      goto LABEL_1245;
  }
}

void sub_1CC17B6B4(void *a1, unsigned int *a2, int a3, long long *a4)
{
  v348[35] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a4 + 1);
  if (!v4) {
    return;
  }
  unsigned int v6 = (const llvm::DominatorTree *)*((void *)a4 + 2);
  if (!v6) {
    return;
  }
  unint64_t v10 = a2[2];
  if (*(unsigned char *)(*(void *)a1 + 8) == 15)
  {
    LODWORD(__src) = 74;
    llvm::getKnowledgeValidInContext((uint64_t)a1, &__src, 1, (uint64_t)v6, *((void *)a4 + 3), v4, (uint64_t)&v343);
    if (v343)
    {
      uint8x8_t v11 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v343 + 8));
      v11.i16[0] = vaddlv_u8(v11);
      if (v11.u32[0] == 1)
      {
        unsigned int v12 = __clz(*((unint64_t *)&v343 + 1));
        if (v12 != 63)
        {
          if (v12 > 0x3F)
          {
            uint64_t v318 = 0;
            *(void *)(*(void *)a2 + 536870904) |= 0x7FFFFFFFFFFFFFFFuLL;
            **(void **)a2 = -1;
            do
            {
              *(void *)(*(void *)a2 + v318 + 8) = -1;
              v318 += 8;
            }
            while (v318 != 536870896);
          }
          else
          {
            unint64_t v13 = 0x7FFFFFFFFFFFFFFFuLL >> v12;
            int v14 = a2;
            if (a2[2] >= 0x41) {
              int v14 = *(unsigned int **)a2;
            }
            *(void *)v14 |= v13;
          }
        }
      }
    }
    uint64_t v4 = *((void *)a4 + 1);
  }
  if (!*(unsigned char *)(v4 + 184)) {
    llvm::AssumptionCache::scanFunction((llvm::AssumptionCache *)v4);
  }
  uint64_t v15 = *(void *)(v4 + 160);
  unsigned int v16 = *(_DWORD *)(v4 + 176);
  if (v16)
  {
    unsigned int v24 = v16 - 1;
    unsigned int v25 = (v16 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    uint64_t v17 = v15 + 88 * v25;
    uint64_t v26 = *(void **)(v17 + 24);
    if (v26 == a1) {
      goto LABEL_16;
    }
    int v27 = 1;
    while (v26 != (void *)-4096)
    {
      unsigned int v28 = v25 + v27++;
      unsigned int v25 = v28 & v24;
      uint64_t v17 = v15 + 88 * (v28 & v24);
      uint64_t v26 = *(void **)(v17 + 24);
      if (v26 == a1) {
        goto LABEL_16;
      }
    }
  }
  uint64_t v17 = v15 + 88 * v16;
LABEL_16:
  if (v17 != v15 + 88 * v16)
  {
    uint64_t v36 = *(unsigned int *)(v17 + 48);
    if (v36)
    {
      uint64_t v37 = *(void *)(v17 + 40);
      uint64_t v38 = v37 + 32 * v36;
      unsigned int v320 = a3 + 1;
      int v319 = (void **)(a2 + 4);
      while (1)
      {
        unsigned int v39 = *(llvm **)(v37 + 16);
        if (!v39) {
          goto LABEL_482;
        }
        uint64_t v40 = *((void *)v39 - 4 * (*((_DWORD *)v39 + 5) & 0x7FFFFFF));
        if ((void *)v40 == a1
          && llvm::isValidAssumeForContext(*(llvm **)(v37 + 16), *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), v6))
        {
          uint64_t v311 = a2[2];
          if (v311 > 0x40) {
            bzero(*(void **)a2, ((unint64_t)(v311 + 63) >> 3) & 0x3FFFFFF8);
          }
          else {
            *(void *)a2 = 0;
          }
          uint64_t v312 = a2[6];
          if (v312 > 0x40)
          {
            memset(*((void **)a2 + 2), 255, ((unint64_t)(v312 + 63) >> 3) & 0x3FFFFFF8);
            LODWORD(v312) = a2[6];
            if (v312) {
              goto LABEL_688;
            }
          }
          else
          {
            llvm::ConstantDataSequential *v319 = (void *)-1;
            if (v312)
            {
LABEL_688:
              unint64_t v313 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v312;
              if (v312 >= 0x41) {
                int v319 = (void **)((char *)*v319 + 8 * (((unint64_t)v312 + 63) >> 6)
              }
                                               - 8);
LABEL_690:
              llvm::ConstantDataSequential *v319 = (void *)((unint64_t)*v319 & v313);
              return;
            }
          }
          unint64_t v313 = 0;
          goto LABEL_690;
        }
        *(void *)&long long v343 = a1;
        int v41 = *(unsigned __int8 *)(v40 + 16);
        if (v41 == 5)
        {
          if (*(_WORD *)(v40 + 18) != 30) {
            goto LABEL_80;
          }
          uint64_t v43 = *(_DWORD *)(v40 + 20) & 0x7FFFFFF;
          uint64_t v44 = v40 - 32 * v43;
          if (*(void **)v44 != a1)
          {
            uint64_t v45 = -v43;
            unsigned int v46 = a1;
LABEL_77:
            uint64_t v47 = v40 + 32 * v45;
            if (v46 != *(void **)(v47 + 32)
              || !sub_1CBF68974((uint64_t)&v343 + 8, *(llvm::Constant **)v47))
            {
              goto LABEL_80;
            }
            goto LABEL_79;
          }
          if ((sub_1CBF68974((uint64_t)&v343 + 8, *(llvm::Constant **)(v44 + 32)) & 1) == 0)
          {
            unsigned int v46 = (void *)v343;
            uint64_t v45 = -(uint64_t)(*(_DWORD *)(v40 + 20) & 0x7FFFFFF);
            goto LABEL_77;
          }
        }
        else
        {
          if (v41 != 58) {
            goto LABEL_80;
          }
          unsigned int v42 = a1;
          if (*(void **)(v40 - 64) != a1) {
            goto LABEL_69;
          }
          if ((sub_1CBF687D0((uint64_t)&v343 + 8, *(llvm::Constant **)(v40 - 32)) & 1) == 0)
          {
            unsigned int v42 = (void *)v343;
LABEL_69:
            if (v42 != *(void **)(v40 - 32)
              || (sub_1CBF687D0((uint64_t)&v343 + 8, *(llvm::Constant **)(v40 - 64)) & 1) == 0)
            {
              goto LABEL_80;
            }
          }
        }
LABEL_79:
        if (llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), v6))
        {
          uint64_t v314 = a2[2];
          if (v314 <= 0x40)
          {
            *(void *)a2 = -1;
            if (v314) {
              goto LABEL_693;
            }
LABEL_704:
            unint64_t v315 = 0;
            goto LABEL_694;
          }
          memset(*(void **)a2, 255, ((unint64_t)(v314 + 63) >> 3) & 0x3FFFFFF8);
          LODWORD(v314) = a2[2];
          if (!v314) {
            goto LABEL_704;
          }
LABEL_693:
          unint64_t v315 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v314;
          if (v314 >= 0x41) {
            unint64_t v316 = (unsigned int *)(*(void *)a2
          }
                                  + 8 * ((((unint64_t)v314 + 63) >> 6) - 1));
          else {
LABEL_694:
          }
            unint64_t v316 = a2;
          *(void *)v316 &= v315;
          uint64_t v317 = a2[6];
          if (v317 > 0x40) {
            bzero(*v319, ((unint64_t)(v317 + 63) >> 3) & 0x3FFFFFF8);
          }
          else {
            llvm::ConstantDataSequential *v319 = 0;
          }
          return;
        }
LABEL_80:
        if (*(unsigned char *)(v40 + 16) != 81) {
          goto LABEL_482;
        }
        long long v48 = a4[1];
        long long v343 = *a4;
        long long v344 = v48;
        *(_OWORD *)unsigned int v345 = a4[2];
        *((void *)&v343 + 1) = 0;
        uint64_t v331 = 0;
        unint64_t v332 = 0;
        int v330 = 0;
        *(void *)int v329 = 0;
        switch(*(_WORD *)(v40 + 18) & 0x3F)
        {
          case ' ':
            __src = &v330;
            uint64_t v334 = (uint64_t)a1;
            v335[0] = a1;
            v335[1] = &v332;
            uint64_t v49 = *(void *)(v40 - 64);
            if (void *)v49 == a1 || (sub_1CC0452A0(v335, v49))
            {
              uint64_t v50 = *(void *)(v40 - 32);
              if (v50)
              {
                *(void *)v335[1] = v50;
                int v51 = *(_WORD *)(v40 + 18) & 0x3F;
                goto LABEL_155;
              }
              uint64_t v76 = 0;
            }
            else
            {
              uint64_t v76 = *(void *)(v40 - 32);
            }
            if (v334 != v76 && !sub_1CC0452A0(v335, v76)) {
              goto LABEL_160;
            }
            uint64_t v77 = *(void *)(v40 - 64);
            if (!v77) {
              goto LABEL_160;
            }
            *(void *)v335[1] = v77;
            int v51 = dword_1CFAC48C8[*(_WORD *)(v40 + 18) & 0x3F];
LABEL_155:
            *(_DWORD *)__src = v51;
            if (llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), v6))
            {
              sub_1CC16089C(&v325, v332, v320, &v343);
              sub_1CC17EE08((unint64_t)&v325, v10, (uint64_t)&__src);
              if (v328 >= 0x41 && v327) {
                MEMORY[0x1D25D9CB0](v327, 0x1000C8000313F17);
              }
              if (v326 >= 0x41 && v325) {
                MEMORY[0x1D25D9CB0](v325, 0x1000C8000313F17);
              }
              uint64_t v78 = a2[2];
              if (v78 > 0x40)
              {
                uint64_t v114 = *(unsigned int **)a2;
                unint64_t v115 = (uint64_t *)__src;
                unint64_t v116 = (unint64_t)(v78 + 63) >> 6;
                do
                {
                  uint64_t v117 = *v115++;
                  *(void *)v114 |= v117;
                  v114 += 2;
                  --v116;
                }
                while (v116);
              }
              else
              {
                *(void *)a2 |= (unint64_t)__src;
              }
              uint64_t v118 = a2[6];
              if (v118 > 0x40)
              {
                uint64_t v119 = *v319;
                int v120 = (uint64_t *)v335[0];
                unint64_t v121 = (unint64_t)(v118 + 63) >> 6;
                do
                {
                  uint64_t v122 = *v120++;
                  *v119++ |= v122;
                  --v121;
                }
                while (v121);
              }
              else
              {
                llvm::ConstantDataSequential *v319 = (void *)((unint64_t)*v319 | (unint64_t)v335[0]);
              }
              if (LODWORD(v335[1]) >= 0x41 && v335[0]) {
                MEMORY[0x1D25D9CB0](v335[0], 0x1000C8000313F17);
              }
              if (v334 < 0x41 || !__src) {
                goto LABEL_482;
              }
LABEL_224:
              MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
              goto LABEL_482;
            }
LABEL_160:
            __src = &v330;
            uint64_t v334 = (uint64_t)a1;
            v335[0] = a1;
            v335[1] = &v331;
            unint64_t v336 = &v332;
            int v79 = sub_1CC182CB0((uint64_t)&v334, *(void *)(v40 - 64), (char)&v332);
            uint64_t v82 = *(void *)(v40 - 32);
            if (v79 && v82)
            {
              *unint64_t v336 = (unsigned __int8 *)v82;
              int v83 = *(_WORD *)(v40 + 18) & 0x3F;
            }
            else
            {
              if (!sub_1CC182CB0((uint64_t)&v334, v82, v81)) {
                goto LABEL_173;
              }
              int v84 = *(unsigned __int8 **)(v40 - 64);
              if (!v84) {
                goto LABEL_173;
              }
              *unint64_t v336 = v84;
              int v83 = dword_1CFAC48C8[*(_WORD *)(v40 + 18) & 0x3F];
            }
            *(_DWORD *)__src = v83;
            if (llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), v80))
            {
              sub_1CC16089C(&v325, v332, v320, &v343);
              sub_1CC17EE08((unint64_t)&v325, v10, (uint64_t)&__src);
              if (v328 >= 0x41 && v327) {
                MEMORY[0x1D25D9CB0](v327, 0x1000C8000313F17);
              }
              if (v326 >= 0x41 && v325) {
                MEMORY[0x1D25D9CB0](v325, 0x1000C8000313F17);
              }
              sub_1CC16089C(&v321, v331, v320, &v343);
              sub_1CC17EE08((unint64_t)&v321, v10, (uint64_t)&v325);
              if (v324 >= 0x41 && v323) {
                MEMORY[0x1D25D9CB0](v323, 0x1000C8000313F17);
              }
              if (v322 >= 0x41 && v321) {
                MEMORY[0x1D25D9CB0](v321, 0x1000C8000313F17);
              }
              unsigned int v85 = v334;
              if (v334 > 0x40) {
                operator new[]();
              }
              unint64_t v86 = v327 & (unint64_t)__src;
              uint64_t v138 = a2[2];
              if (v138 > 0x40)
              {
                __int32 v139 = *(unsigned int **)a2;
                unint64_t v140 = (unint64_t)(v138 + 63) >> 6;
                int v141 = (uint64_t *)(v327 & (unint64_t)__src);
                do
                {
                  uint64_t v142 = *v141++;
                  *(void *)v139 |= v142;
                  v139 += 2;
                  --v140;
                }
                while (v140);
              }
              else
              {
                *(void *)a2 |= v86;
              }
              if (v85 >= 0x41 && v86) {
                MEMORY[0x1D25D9CB0](v86, 0x1000C8000313F17);
              }
              unsigned int v143 = v335[1];
              if (LODWORD(v335[1]) > 0x40) {
                operator new[]();
              }
              unint64_t v144 = v327 & (uint64_t)v335[0];
              uint64_t v145 = a2[6];
              if (v145 <= 0x40) {
                goto LABEL_472;
              }
              unint64_t v146 = *v319;
              unint64_t v147 = (unint64_t)(v145 + 63) >> 6;
              uint64_t v148 = (uint64_t *)(v327 & (uint64_t)v335[0]);
              do
              {
                uint64_t v149 = *v148++;
                *v146++ |= v149;
                --v147;
              }
              while (v147);
              goto LABEL_473;
            }
LABEL_173:
            __src = &v330;
            uint64_t v334 = (uint64_t)a1;
            v335[0] = a1;
            v335[1] = &v331;
            *(void *)&long long v337 = &v332;
            int v87 = sub_1CC182E0C((uint64_t)&v334, *(void *)(v40 - 64));
            uint64_t v89 = *(void *)(v40 - 32);
            if (v87 && v89)
            {
              *(void *)long long v337 = v89;
              int v90 = *(_WORD *)(v40 + 18) & 0x3F;
            }
            else
            {
              if (!sub_1CC182E0C((uint64_t)&v334, v89)) {
                goto LABEL_186;
              }
              uint64_t v91 = *(void *)(v40 - 64);
              if (!v91) {
                goto LABEL_186;
              }
              *(void *)long long v337 = v91;
              int v90 = dword_1CFAC48C8[*(_WORD *)(v40 + 18) & 0x3F];
            }
            *(_DWORD *)__src = v90;
            if (llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), v88))
            {
              sub_1CC16089C(&v325, v332, v320, &v343);
              sub_1CC17EE08((unint64_t)&v325, v10, (uint64_t)&__src);
              if (v328 >= 0x41 && v327) {
                MEMORY[0x1D25D9CB0](v327, 0x1000C8000313F17);
              }
              if (v326 >= 0x41 && v325) {
                MEMORY[0x1D25D9CB0](v325, 0x1000C8000313F17);
              }
              sub_1CC16089C(&v321, v331, v320, &v343);
              sub_1CC17EE08((unint64_t)&v321, v10, (uint64_t)&v325);
              if (v324 >= 0x41 && v323) {
                MEMORY[0x1D25D9CB0](v323, 0x1000C8000313F17);
              }
              if (v322 >= 0x41 && v321) {
                MEMORY[0x1D25D9CB0](v321, 0x1000C8000313F17);
              }
              unsigned int v92 = v335[1];
              if (LODWORD(v335[1]) > 0x40) {
                operator new[]();
              }
              uint64_t v93 = v327 & (uint64_t)v335[0];
              uint64_t v172 = a2[2];
              if (v172 > 0x40)
              {
                uint64_t v173 = *(unsigned int **)a2;
                unint64_t v174 = (unint64_t)(v172 + 63) >> 6;
                uint64_t v175 = (uint64_t *)(v327 & (uint64_t)v335[0]);
                do
                {
                  uint64_t v176 = *v175++;
                  *(void *)v173 |= v176;
                  v173 += 2;
                  --v174;
                }
                while (v174);
              }
              else
              {
                *(void *)a2 |= v93;
              }
              if (v92 >= 0x41 && v93) {
                MEMORY[0x1D25D9CB0](v93, 0x1000C8000313F17);
              }
              unsigned int v143 = v334;
              if (v334 > 0x40) {
                operator new[]();
              }
              unint64_t v144 = v327 & (unint64_t)__src;
              uint64_t v177 = a2[6];
              if (v177 <= 0x40) {
                goto LABEL_472;
              }
              uint64_t v178 = *v319;
              unint64_t v179 = (unint64_t)(v177 + 63) >> 6;
              uint64_t v180 = (uint64_t *)(v327 & (unint64_t)__src);
              do
              {
                uint64_t v181 = *v180++;
                *v178++ |= v181;
                --v179;
              }
              while (v179);
              goto LABEL_473;
            }
LABEL_186:
            __src = &v330;
            uint64_t v334 = (uint64_t)a1;
            v335[0] = a1;
            v335[1] = &v331;
            unint64_t v336 = &v332;
            int v94 = sub_1CC182F34((uint64_t)&v334, *(void *)(v40 - 64), (char)&v332);
            uint64_t v97 = *(void *)(v40 - 32);
            if (v94 && v97)
            {
              *unint64_t v336 = (unsigned __int8 *)v97;
              int v98 = *(_WORD *)(v40 + 18) & 0x3F;
            }
            else
            {
              if (!sub_1CC182F34((uint64_t)&v334, v97, v96)) {
                goto LABEL_199;
              }
              BOOL v99 = *(unsigned __int8 **)(v40 - 64);
              if (!v99) {
                goto LABEL_199;
              }
              *unint64_t v336 = v99;
              int v98 = dword_1CFAC48C8[*(_WORD *)(v40 + 18) & 0x3F];
            }
            *(_DWORD *)__src = v98;
            if (llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), v95))
            {
              sub_1CC16089C(&v325, v332, v320, &v343);
              sub_1CC17EE08((unint64_t)&v325, v10, (uint64_t)&__src);
              if (v328 >= 0x41 && v327) {
                MEMORY[0x1D25D9CB0](v327, 0x1000C8000313F17);
              }
              if (v326 >= 0x41 && v325) {
                MEMORY[0x1D25D9CB0](v325, 0x1000C8000313F17);
              }
              sub_1CC16089C(&v321, v331, v320, &v343);
              sub_1CC17EE08((unint64_t)&v321, v10, (uint64_t)&v325);
              if (v324 >= 0x41 && v323) {
                MEMORY[0x1D25D9CB0](v323, 0x1000C8000313F17);
              }
              if (v322 >= 0x41 && v321) {
                MEMORY[0x1D25D9CB0](v321, 0x1000C8000313F17);
              }
              unsigned int v100 = v334;
              if (v334 > 0x40) {
                operator new[]();
              }
              unint64_t v101 = v325 & (unint64_t)__src;
              uint64_t v196 = a2[2];
              if (v196 > 0x40)
              {
                int v197 = *(unsigned int **)a2;
                unint64_t v198 = (unint64_t)(v196 + 63) >> 6;
                unsigned int v199 = (uint64_t *)(v325 & (unint64_t)__src);
                do
                {
                  uint64_t v200 = *v199++;
                  *(void *)v197 |= v200;
                  v197 += 2;
                  --v198;
                }
                while (v198);
              }
              else
              {
                *(void *)a2 |= v101;
              }
              if (v100 >= 0x41 && v101) {
                MEMORY[0x1D25D9CB0](v101, 0x1000C8000313F17);
              }
              unsigned int v143 = v335[1];
              if (LODWORD(v335[1]) > 0x40) {
                operator new[]();
              }
              unint64_t v144 = v325 & (unint64_t)v335[0];
              uint64_t v201 = a2[6];
              if (v201 <= 0x40) {
                goto LABEL_472;
              }
              unint64_t v202 = *v319;
              unint64_t v203 = (unint64_t)(v201 + 63) >> 6;
              uint64_t v204 = (uint64_t *)(v325 & (unint64_t)v335[0]);
              do
              {
                uint64_t v205 = *v204++;
                *v202++ |= v205;
                --v203;
              }
              while (v203);
              goto LABEL_473;
            }
LABEL_199:
            __src = &v330;
            uint64_t v334 = (uint64_t)a1;
            v335[0] = a1;
            v335[1] = &v331;
            *(void *)&long long v337 = &v332;
            int v102 = sub_1CC183090((uint64_t)&v334, *(void *)(v40 - 64));
            uint64_t v104 = *(void *)(v40 - 32);
            if (v102 && v104)
            {
              *(void *)long long v337 = v104;
              int v105 = *(_WORD *)(v40 + 18) & 0x3F;
            }
            else
            {
              if (!sub_1CC183090((uint64_t)&v334, v104)) {
                goto LABEL_212;
              }
              uint64_t v106 = *(void *)(v40 - 64);
              if (!v106) {
                goto LABEL_212;
              }
              *(void *)long long v337 = v106;
              int v105 = dword_1CFAC48C8[*(_WORD *)(v40 + 18) & 0x3F];
            }
            *(_DWORD *)__src = v105;
            if (llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), v103))
            {
              sub_1CC16089C(&v325, v332, v320, &v343);
              sub_1CC17EE08((unint64_t)&v325, v10, (uint64_t)&__src);
              if (v328 >= 0x41 && v327) {
                MEMORY[0x1D25D9CB0](v327, 0x1000C8000313F17);
              }
              if (v326 >= 0x41 && v325) {
                MEMORY[0x1D25D9CB0](v325, 0x1000C8000313F17);
              }
              sub_1CC16089C(&v321, v331, v320, &v343);
              sub_1CC17EE08((unint64_t)&v321, v10, (uint64_t)&v325);
              if (v324 >= 0x41 && v323) {
                MEMORY[0x1D25D9CB0](v323, 0x1000C8000313F17);
              }
              if (v322 >= 0x41 && v321) {
                MEMORY[0x1D25D9CB0](v321, 0x1000C8000313F17);
              }
              unsigned int v107 = v335[1];
              if (LODWORD(v335[1]) > 0x40) {
                operator new[]();
              }
              uint64_t v108 = v325 & (unint64_t)v335[0];
              uint64_t v206 = a2[2];
              if (v206 > 0x40)
              {
                unsigned int v207 = *(unsigned int **)a2;
                unint64_t v208 = (unint64_t)(v206 + 63) >> 6;
                uint64_t v209 = (uint64_t *)(v325 & (unint64_t)v335[0]);
                do
                {
                  uint64_t v210 = *v209++;
                  *(void *)v207 |= v210;
                  v207 += 2;
                  --v208;
                }
                while (v208);
              }
              else
              {
                *(void *)a2 |= v108;
              }
              if (v107 >= 0x41 && v108) {
                MEMORY[0x1D25D9CB0](v108, 0x1000C8000313F17);
              }
              unsigned int v143 = v334;
              if (v334 > 0x40) {
                operator new[]();
              }
              unint64_t v144 = v325 & (unint64_t)__src;
              uint64_t v211 = a2[6];
              if (v211 <= 0x40) {
                goto LABEL_472;
              }
              unint64_t v212 = *v319;
              unint64_t v213 = (unint64_t)(v211 + 63) >> 6;
              uint64_t v214 = (uint64_t *)(v325 & (unint64_t)__src);
              do
              {
                uint64_t v215 = *v214++;
                *v212++ |= v215;
                --v213;
              }
              while (v213);
              goto LABEL_473;
            }
LABEL_212:
            __src = &v330;
            uint64_t v334 = (uint64_t)a1;
            v335[0] = a1;
            v335[1] = &v331;
            unint64_t v336 = &v332;
            int v109 = sub_1CC1831B8((uint64_t)&v334, *(void *)(v40 - 64), (char)&v332);
            uint64_t v112 = *(void *)(v40 - 32);
            if (v109 && v112)
            {
              *unint64_t v336 = (unsigned __int8 *)v112;
              int v113 = *(_WORD *)(v40 + 18) & 0x3F;
            }
            else
            {
              if (!sub_1CC1831B8((uint64_t)&v334, v112, v111)) {
                goto LABEL_241;
              }
              int8x8_t v123 = *(unsigned __int8 **)(v40 - 64);
              if (!v123) {
                goto LABEL_241;
              }
              *unint64_t v336 = v123;
              int v113 = dword_1CFAC48C8[*(_WORD *)(v40 + 18) & 0x3F];
            }
            *(_DWORD *)__src = v113;
            if (llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), v110))
            {
              sub_1CC16089C(&v325, v332, v320, &v343);
              sub_1CC17EE08((unint64_t)&v325, v10, (uint64_t)&__src);
              if (v328 >= 0x41 && v327) {
                MEMORY[0x1D25D9CB0](v327, 0x1000C8000313F17);
              }
              if (v326 >= 0x41 && v325) {
                MEMORY[0x1D25D9CB0](v325, 0x1000C8000313F17);
              }
              sub_1CC16089C(&v321, v331, v320, &v343);
              sub_1CC17EE08((unint64_t)&v321, v10, (uint64_t)&v325);
              if (v324 >= 0x41 && v323) {
                MEMORY[0x1D25D9CB0](v323, 0x1000C8000313F17);
              }
              if (v322 >= 0x41 && v321) {
                MEMORY[0x1D25D9CB0](v321, 0x1000C8000313F17);
              }
              unsigned int v124 = v334;
              if (v334 > 0x40) {
                operator new[]();
              }
              unint64_t v125 = v325 & (unint64_t)__src;
              uint64_t v216 = a2[2];
              if (v216 > 0x40)
              {
                BOOL v217 = *(unsigned int **)a2;
                unint64_t v218 = (unint64_t)(v216 + 63) >> 6;
                int v219 = (uint64_t *)(v325 & (unint64_t)__src);
                do
                {
                  uint64_t v220 = *v219++;
                  *(void *)v217 |= v220;
                  v217 += 2;
                  --v218;
                }
                while (v218);
              }
              else
              {
                *(void *)a2 |= v125;
              }
              if (v124 >= 0x41 && v125) {
                MEMORY[0x1D25D9CB0](v125, 0x1000C8000313F17);
              }
              unsigned int v221 = v335[1];
              if (LODWORD(v335[1]) > 0x40) {
                operator new[]();
              }
              uint64_t v222 = v325 & (unint64_t)v335[0];
              uint64_t v223 = a2[6];
              if (v223 > 0x40)
              {
                int64_t v224 = *v319;
                unint64_t v225 = (unint64_t)(v223 + 63) >> 6;
                int v226 = (uint64_t *)(v325 & (unint64_t)v335[0]);
                do
                {
                  uint64_t v227 = *v226++;
                  *v224++ |= v227;
                  --v225;
                }
                while (v225);
              }
              else
              {
                llvm::ConstantDataSequential *v319 = (void *)((unint64_t)*v319 | v222);
              }
              if (v221 >= 0x41 && v222) {
                MEMORY[0x1D25D9CB0](v222, 0x1000C8000313F17);
              }
              unsigned int v228 = v335[1];
              if (LODWORD(v335[1]) > 0x40) {
                operator new[]();
              }
              uint64_t v229 = v327 & (uint64_t)v335[0];
              uint64_t v230 = a2[2];
              if (v230 > 0x40)
              {
                unint64_t v231 = *(unsigned int **)a2;
                unint64_t v232 = (unint64_t)(v230 + 63) >> 6;
                int v233 = (uint64_t *)(v327 & (uint64_t)v335[0]);
                do
                {
                  uint64_t v234 = *v233++;
                  *(void *)v231 |= v234;
                  v231 += 2;
                  --v232;
                }
                while (v232);
              }
              else
              {
                *(void *)a2 |= v229;
              }
              if (v228 >= 0x41 && v229) {
                MEMORY[0x1D25D9CB0](v229, 0x1000C8000313F17);
              }
              unsigned int v143 = v334;
              if (v334 > 0x40) {
                operator new[]();
              }
              unint64_t v144 = v327 & (unint64_t)__src;
              uint64_t v235 = a2[6];
              if (v235 <= 0x40) {
                goto LABEL_472;
              }
              uint8x8_t v236 = *v319;
              unint64_t v237 = (unint64_t)(v235 + 63) >> 6;
              uint8x8_t v238 = (uint64_t *)(v327 & (unint64_t)__src);
              do
              {
                uint64_t v239 = *v238++;
                *v236++ |= v239;
                --v237;
              }
              while (v237);
              goto LABEL_473;
            }
LABEL_241:
            __src = &v330;
            uint64_t v334 = (uint64_t)a1;
            v335[0] = a1;
            v335[1] = &v331;
            *(void *)&long long v337 = &v332;
            int v126 = sub_1CC183314((uint64_t)&v334, *(void *)(v40 - 64));
            uint64_t v128 = *(void *)(v40 - 32);
            if (v126 && v128)
            {
              *(void *)long long v337 = v128;
              int v129 = *(_WORD *)(v40 + 18) & 0x3F;
            }
            else
            {
              if (!sub_1CC183314((uint64_t)&v334, v128)) {
                goto LABEL_254;
              }
              uint64_t v130 = *(void *)(v40 - 64);
              if (!v130) {
                goto LABEL_254;
              }
              *(void *)long long v337 = v130;
              int v129 = dword_1CFAC48C8[*(_WORD *)(v40 + 18) & 0x3F];
            }
            *(_DWORD *)__src = v129;
            if (llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), v127))
            {
              sub_1CC16089C(&v325, v332, v320, &v343);
              sub_1CC17EE08((unint64_t)&v325, v10, (uint64_t)&__src);
              if (v328 >= 0x41 && v327) {
                MEMORY[0x1D25D9CB0](v327, 0x1000C8000313F17);
              }
              if (v326 >= 0x41 && v325) {
                MEMORY[0x1D25D9CB0](v325, 0x1000C8000313F17);
              }
              sub_1CC16089C(&v321, v331, v320, &v343);
              sub_1CC17EE08((unint64_t)&v321, v10, (uint64_t)&v325);
              if (v324 >= 0x41 && v323) {
                MEMORY[0x1D25D9CB0](v323, 0x1000C8000313F17);
              }
              if (v322 >= 0x41 && v321) {
                MEMORY[0x1D25D9CB0](v321, 0x1000C8000313F17);
              }
              unsigned int v131 = v335[1];
              if (LODWORD(v335[1]) > 0x40) {
                operator new[]();
              }
              uint64_t v132 = v325 & (unint64_t)v335[0];
              uint64_t v240 = a2[2];
              if (v240 > 0x40)
              {
                unint64_t v241 = *(unsigned int **)a2;
                unint64_t v242 = (unint64_t)(v240 + 63) >> 6;
                int v243 = (uint64_t *)(v325 & (unint64_t)v335[0]);
                do
                {
                  uint64_t v244 = *v243++;
                  *(void *)v241 |= v244;
                  v241 += 2;
                  --v242;
                }
                while (v242);
              }
              else
              {
                *(void *)a2 |= v132;
              }
              if (v131 >= 0x41 && v132) {
                MEMORY[0x1D25D9CB0](v132, 0x1000C8000313F17);
              }
              unsigned int v245 = v334;
              if (v334 > 0x40) {
                operator new[]();
              }
              unint64_t v246 = v325 & (unint64_t)__src;
              uint64_t v247 = a2[6];
              if (v247 > 0x40)
              {
                unint64_t v248 = *v319;
                unint64_t v249 = (unint64_t)(v247 + 63) >> 6;
                int8x8_t v250 = (uint64_t *)(v325 & (unint64_t)__src);
                do
                {
                  uint64_t v251 = *v250++;
                  *v248++ |= v251;
                  --v249;
                }
                while (v249);
              }
              else
              {
                llvm::ConstantDataSequential *v319 = (void *)((unint64_t)*v319 | v246);
              }
              if (v245 >= 0x41 && v246) {
                MEMORY[0x1D25D9CB0](v246, 0x1000C8000313F17);
              }
              unsigned int v252 = v334;
              if (v334 > 0x40) {
                operator new[]();
              }
              unint64_t v253 = v327 & (unint64_t)__src;
              uint64_t v254 = a2[2];
              if (v254 > 0x40)
              {
                int8x8_t v255 = *(unsigned int **)a2;
                unint64_t v256 = (unint64_t)(v254 + 63) >> 6;
                unint64_t v257 = (uint64_t *)(v327 & (unint64_t)__src);
                do
                {
                  uint64_t v258 = *v257++;
                  *(void *)v255 |= v258;
                  v255 += 2;
                  --v256;
                }
                while (v256);
              }
              else
              {
                *(void *)a2 |= v253;
              }
              if (v252 >= 0x41 && v253) {
                MEMORY[0x1D25D9CB0](v253, 0x1000C8000313F17);
              }
              unsigned int v143 = v335[1];
              if (LODWORD(v335[1]) > 0x40) {
                operator new[]();
              }
              unint64_t v144 = v327 & (uint64_t)v335[0];
              uint64_t v259 = a2[6];
              if (v259 > 0x40)
              {
                unsigned int v260 = *v319;
                unint64_t v261 = (unint64_t)(v259 + 63) >> 6;
                unsigned int v262 = (uint64_t *)(v327 & (uint64_t)v335[0]);
                do
                {
                  uint64_t v263 = *v262++;
                  *v260++ |= v263;
                  --v261;
                }
                while (v261);
              }
              else
              {
LABEL_472:
                llvm::ConstantDataSequential *v319 = (void *)((unint64_t)*v319 | v144);
              }
LABEL_473:
              if (v143 >= 0x41 && v144) {
                MEMORY[0x1D25D9CB0](v144, 0x1000C8000313F17);
              }
              if (v328 >= 0x41 && v327) {
                MEMORY[0x1D25D9CB0](v327, 0x1000C8000313F17);
              }
              if (v326 >= 0x41 && v325)
              {
LABEL_537:
                MEMORY[0x1D25D9CB0]();
                goto LABEL_478;
              }
              goto LABEL_478;
            }
LABEL_254:
            __src = &v330;
            uint64_t v334 = (uint64_t)a1;
            v335[0] = a1;
            v335[1] = v329;
            unint64_t v336 = &v332;
            int v133 = sub_1CC18343C((uint64_t)&v334, *(void *)(v40 - 64), (char)&v332);
            uint64_t v136 = *(void *)(v40 - 32);
            if (v133 && v136)
            {
              *unint64_t v336 = (unsigned __int8 *)v136;
              int v137 = *(_WORD *)(v40 + 18) & 0x3F;
            }
            else
            {
              if (!sub_1CC18343C((uint64_t)&v334, v136, v135)) {
                goto LABEL_313;
              }
              int v167 = *(unsigned __int8 **)(v40 - 64);
              if (!v167) {
                goto LABEL_313;
              }
              *unint64_t v336 = v167;
              int v137 = dword_1CFAC48C8[*(_WORD *)(v40 + 18) & 0x3F];
            }
            *(_DWORD *)__src = v137;
            if (llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), v134)&& *(void *)v329 < v10)
            {
              sub_1CC16089C(&v325, v332, v320, &v343);
              sub_1CC17EE08((unint64_t)&v325, v10, (uint64_t)&__src);
              if (v328 >= 0x41 && v327) {
                MEMORY[0x1D25D9CB0](v327, 0x1000C8000313F17);
              }
              if (v326 >= 0x41 && v325) {
                MEMORY[0x1D25D9CB0](v325, 0x1000C8000313F17);
              }
              if (v334 > 0x40)
              {
                llvm::APInt::lshrSlowCase(&__src, v329[0]);
              }
              else if (v334 == v329[0])
              {
                __src = 0;
              }
              else
              {
                __src = (void *)((unint64_t)__src >> SLOBYTE(v329[0]));
              }
              uint64_t v290 = a2[2];
              if (v290 > 0x40)
              {
                v291 = *(unsigned int **)a2;
                unint64_t v292 = (uint64_t *)__src;
                unint64_t v293 = (unint64_t)(v290 + 63) >> 6;
                do
                {
                  uint64_t v294 = *v292++;
                  *(void *)v291 |= v294;
                  v291 += 2;
                  --v293;
                }
                while (v293);
              }
              else
              {
                *(void *)a2 |= (unint64_t)__src;
              }
              if (LODWORD(v335[1]) > 0x40)
              {
                llvm::APInt::lshrSlowCase(v335, v329[0]);
              }
              else if (LODWORD(v335[1]) == v329[0])
              {
                v335[0] = 0;
              }
              else
              {
                v335[0] = (void *)((unint64_t)v335[0] >> SLOBYTE(v329[0]));
              }
              uint64_t v295 = a2[6];
              if (v295 <= 0x40)
              {
                unint64_t v296 = (unint64_t)v335[0];
LABEL_565:
                llvm::ConstantDataSequential *v319 = (void *)((unint64_t)*v319 | v296);
                goto LABEL_478;
              }
              unint64_t v297 = *v319;
              int v298 = (uint64_t *)v335[0];
              unint64_t v299 = (unint64_t)(v295 + 63) >> 6;
              do
              {
                uint64_t v300 = *v298++;
                *v297++ |= v300;
                --v299;
              }
              while (v299);
              goto LABEL_478;
            }
LABEL_313:
            __src = &v330;
            uint64_t v334 = (uint64_t)a1;
            v335[0] = a1;
            v335[1] = v329;
            *(void *)&long long v337 = &v332;
            int v168 = sub_1CC183598((uint64_t)&v334, *(void *)(v40 - 64));
            uint64_t v170 = *(void *)(v40 - 32);
            if (v168 && v170)
            {
              *(void *)long long v337 = v170;
              int v171 = *(_WORD *)(v40 + 18) & 0x3F;
            }
            else
            {
              if (!sub_1CC183598((uint64_t)&v334, v170) || (uint64_t v182 = *(void *)(v40 - 64)) == 0)
              {
LABEL_341:
                __src = &v330;
                uint64_t v334 = (uint64_t)a1;
                v335[0] = a1;
                v335[1] = v329;
                unint64_t v336 = &v332;
                int v183 = sub_1CC1836C0((uint64_t)&v334, *(void *)(v40 - 64));
                uint64_t v185 = *(void *)(v40 - 32);
                if (v183 && v185)
                {
                  *unint64_t v336 = (unsigned __int8 *)v185;
                  int v186 = *(_WORD *)(v40 + 18) & 0x3F;
LABEL_347:
                  *(_DWORD *)__src = v186;
                  if (llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), v184)&& *(void *)v329 < v10)
                  {
                    sub_1CC16089C(&v325, v332, v320, &v343);
                    sub_1CC17EE08((unint64_t)&v325, v10, (uint64_t)&__src);
                    if (v328 >= 0x41 && v327) {
                      MEMORY[0x1D25D9CB0](v327, 0x1000C8000313F17);
                    }
                    if (v326 >= 0x41 && v325) {
                      MEMORY[0x1D25D9CB0](v325, 0x1000C8000313F17);
                    }
                    unsigned int v326 = v334;
                    if (v334 > 0x40) {
                      operator new[]();
                    }
                    uint64_t v188 = (void)__src << SLOBYTE(v329[0]);
                    if (v334 == v329[0]) {
                      uint64_t v188 = 0;
                    }
                    if (v334) {
                      unint64_t v189 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v334;
                    }
                    else {
                      unint64_t v189 = 0;
                    }
                    unint64_t v325 = v189 & v188;
                    uint64_t v264 = a2[2];
                    if (v264 > 0x40)
                    {
                      uint64_t v266 = 0;
                      int v267 = *(char **)a2;
                      unint64_t v265 = v325;
                      unint64_t v268 = ((unint64_t)(v264 + 63) >> 3) & 0x3FFFFFF8;
                      do
                      {
                        *(void *)&v267[v266] |= *(void *)(v265 + v266);
                        v266 += 8;
                      }
                      while (v268 != v266);
                    }
                    else
                    {
                      unint64_t v265 = v325;
                      *(void *)a2 |= v325;
                    }
                    if (v326 >= 0x41 && v265 != 0) {
                      MEMORY[0x1D25D9CB0]();
                    }
                    unsigned int v326 = v335[1];
                    if (LODWORD(v335[1]) > 0x40) {
                      operator new[]();
                    }
                    uint64_t v270 = (uint64_t)v335[0] << SLOBYTE(v329[0]);
                    if (LODWORD(v335[1]) == v329[0]) {
                      uint64_t v270 = 0;
                    }
                    if (LODWORD(v335[1])) {
                      unint64_t v271 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(v335[1]);
                    }
                    else {
                      unint64_t v271 = 0;
                    }
                    unint64_t v325 = v271 & v270;
                    uint64_t v272 = a2[6];
                    if (v272 > 0x40)
                    {
                      uint64_t v273 = 0;
                      unint64_t v274 = (char *)*v319;
                      unint64_t v275 = v325;
                      unint64_t v276 = ((unint64_t)(v272 + 63) >> 3) & 0x3FFFFFF8;
                      do
                      {
                        *(void *)&v274[v273] |= *(void *)(v275 + v273);
                        v273 += 8;
                      }
                      while (v276 != v273);
                      goto LABEL_533;
                    }
LABEL_530:
                    unint64_t v275 = v325;
                    llvm::ConstantDataSequential *v319 = (void *)((unint64_t)*v319 | v325);
LABEL_533:
                    if (v326 >= 0x41 && v275 != 0) {
                      goto LABEL_537;
                    }
                    goto LABEL_478;
                  }
                }
                else if (sub_1CC1836C0((uint64_t)&v334, v185))
                {
                  int v187 = *(unsigned __int8 **)(v40 - 64);
                  if (v187)
                  {
                    *unint64_t v336 = v187;
                    int v186 = dword_1CFAC48C8[*(_WORD *)(v40 + 18) & 0x3F];
                    goto LABEL_347;
                  }
                }
                __src = &v330;
                uint64_t v334 = (uint64_t)a1;
                v335[0] = a1;
                v335[1] = v329;
                *(void *)&long long v337 = &v332;
                int v190 = sub_1CC183854((uint64_t)&v334, *(void *)(v40 - 64));
                uint64_t v191 = *(void *)(v40 - 32);
                if (v190 && v191)
                {
                  *(void *)long long v337 = v191;
                  int v192 = *(_WORD *)(v40 + 18) & 0x3F;
                }
                else
                {
                  if (!sub_1CC183854((uint64_t)&v334, v191)) {
                    goto LABEL_482;
                  }
                  uint64_t v193 = *(void *)(v40 - 64);
                  if (!v193) {
                    goto LABEL_482;
                  }
                  *(void *)long long v337 = v193;
                  int v192 = dword_1CFAC48C8[*(_WORD *)(v40 + 18) & 0x3F];
                }
                *(_DWORD *)__src = v192;
                if (!llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), v6)|| *(void *)v329 >= v10)
                {
                  goto LABEL_482;
                }
                sub_1CC16089C(&v325, v332, v320, &v343);
                sub_1CC17EE08((unint64_t)&v325, v10, (uint64_t)&__src);
                if (v328 >= 0x41 && v327) {
                  MEMORY[0x1D25D9CB0](v327, 0x1000C8000313F17);
                }
                if (v326 >= 0x41 && v325) {
                  MEMORY[0x1D25D9CB0](v325, 0x1000C8000313F17);
                }
                unsigned int v326 = v335[1];
                if (LODWORD(v335[1]) > 0x40) {
                  operator new[]();
                }
                uint64_t v194 = (uint64_t)v335[0] << SLOBYTE(v329[0]);
                if (LODWORD(v335[1]) == v329[0]) {
                  uint64_t v194 = 0;
                }
                if (LODWORD(v335[1])) {
                  unint64_t v195 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(v335[1]);
                }
                else {
                  unint64_t v195 = 0;
                }
                unint64_t v325 = v195 & v194;
                uint64_t v277 = a2[2];
                if (v277 > 0x40)
                {
                  uint64_t v279 = 0;
                  unint64_t v280 = *(char **)a2;
                  unint64_t v278 = v325;
                  unint64_t v281 = ((unint64_t)(v277 + 63) >> 3) & 0x3FFFFFF8;
                  do
                  {
                    *(void *)&v280[v279] |= *(void *)(v278 + v279);
                    v279 += 8;
                  }
                  while (v281 != v279);
                }
                else
                {
                  unint64_t v278 = v325;
                  *(void *)a2 |= v325;
                }
                if (v326 >= 0x41 && v278 != 0) {
                  MEMORY[0x1D25D9CB0]();
                }
                unsigned int v326 = v334;
                if (v334 > 0x40) {
                  operator new[]();
                }
                uint64_t v283 = (void)__src << SLOBYTE(v329[0]);
                if (v334 == v329[0]) {
                  uint64_t v283 = 0;
                }
                if (v334) {
                  unint64_t v284 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v334;
                }
                else {
                  unint64_t v284 = 0;
                }
                unint64_t v325 = v284 & v283;
                uint64_t v285 = a2[6];
                if (v285 > 0x40)
                {
                  uint64_t v286 = 0;
                  int v287 = (char *)*v319;
                  unint64_t v275 = v325;
                  unint64_t v288 = ((unint64_t)(v285 + 63) >> 3) & 0x3FFFFFF8;
                  do
                  {
                    *(void *)&v287[v286] |= *(void *)(v275 + v286);
                    v286 += 8;
                  }
                  while (v288 != v286);
                  goto LABEL_533;
                }
                goto LABEL_530;
              }
              *(void *)long long v337 = v182;
              int v171 = dword_1CFAC48C8[*(_WORD *)(v40 + 18) & 0x3F];
            }
            *(_DWORD *)__src = v171;
            if (!llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), v169)|| *(void *)v329 >= v10)
            {
              goto LABEL_341;
            }
            sub_1CC16089C(&v325, v332, v320, &v343);
            sub_1CC17EE08((unint64_t)&v325, v10, (uint64_t)&__src);
            if (v328 >= 0x41 && v327) {
              MEMORY[0x1D25D9CB0](v327, 0x1000C8000313F17);
            }
            if (v326 >= 0x41 && v325) {
              MEMORY[0x1D25D9CB0](v325, 0x1000C8000313F17);
            }
            if (LODWORD(v335[1]) > 0x40)
            {
              llvm::APInt::lshrSlowCase(v335, v329[0]);
            }
            else if (LODWORD(v335[1]) == v329[0])
            {
              v335[0] = 0;
            }
            else
            {
              v335[0] = (void *)((unint64_t)v335[0] >> SLOBYTE(v329[0]));
            }
            uint64_t v301 = a2[2];
            if (v301 > 0x40)
            {
              BOOL v302 = *(unsigned int **)a2;
              uint64_t v303 = (uint64_t *)v335[0];
              unint64_t v304 = (unint64_t)(v301 + 63) >> 6;
              do
              {
                uint64_t v305 = *v303++;
                *(void *)v302 |= v305;
                v302 += 2;
                --v304;
              }
              while (v304);
            }
            else
            {
              *(void *)a2 |= (unint64_t)v335[0];
            }
            if (v334 > 0x40)
            {
              llvm::APInt::lshrSlowCase(&__src, v329[0]);
            }
            else if (v334 == v329[0])
            {
              __src = 0;
            }
            else
            {
              __src = (void *)((unint64_t)__src >> SLOBYTE(v329[0]));
            }
            uint64_t v306 = a2[6];
            if (v306 <= 0x40)
            {
              unint64_t v296 = (unint64_t)__src;
              goto LABEL_565;
            }
            unint64_t v307 = *v319;
            uint64_t v308 = (uint64_t *)__src;
            unint64_t v309 = (unint64_t)(v306 + 63) >> 6;
            do
            {
              uint64_t v310 = *v308++;
              *v307++ |= v310;
              --v309;
            }
            while (v309);
LABEL_478:
            unsigned int v61 = v335[1];
LABEL_479:
            if (v61 >= 0x41)
            {
LABEL_578:
              int v75 = v335[0];
              if (v335[0]) {
LABEL_579:
              }
                MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
            }
LABEL_480:
            unsigned int v70 = v334;
LABEL_481:
            if (v70 < 0x41) {
              goto LABEL_482;
            }
LABEL_576:
            if (__src) {
              goto LABEL_224;
            }
LABEL_482:
            v37 += 32;
            if (v37 == v38) {
              goto LABEL_17;
            }
            break;
          case '$':
            __src = &v330;
            uint64_t v334 = (uint64_t)a1;
            v335[0] = a1;
            v335[1] = &v332;
            if (!sub_1CC18397C((uint64_t)&__src, v40)
              || !llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), v6))
            {
              goto LABEL_482;
            }
            sub_1CC16089C(&v325, v332, v320, &v343);
            sub_1CC17EE08((unint64_t)&v325, v10, (uint64_t)&__src);
            if (v328 >= 0x41 && v327) {
              MEMORY[0x1D25D9CB0](v327, 0x1000C8000313F17);
            }
            if (v326 >= 0x41 && v325) {
              MEMORY[0x1D25D9CB0](v325, 0x1000C8000313F17);
            }
            int v53 = v334;
            if (!v334) {
              goto LABEL_284;
            }
            if (v334 > 0x40)
            {
              if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__src) == v53)
              {
LABEL_284:
                uint64_t v156 = a2[2];
                if (v156 <= 0x40)
                {
                  *(void *)a2 = -1;
                  if (v156) {
                    goto LABEL_286;
                  }
LABEL_570:
                  unint64_t v157 = 0;
                  goto LABEL_287;
                }
                memset(*(void **)a2, 255, ((unint64_t)(v156 + 63) >> 3) & 0x3FFFFFF8);
                LODWORD(v156) = a2[2];
                if (!v156) {
                  goto LABEL_570;
                }
LABEL_286:
                unint64_t v157 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v156;
                if (v156 >= 0x41) {
                  uint64_t v158 = (unsigned int *)(*(void *)a2
                }
                                        + 8 * ((((unint64_t)v156 + 63) >> 6) - 1));
                else {
LABEL_287:
                }
                  uint64_t v158 = a2;
                *(void *)v158 &= v157;
                uint64_t v159 = a2[6];
                if (v159 <= 0x40)
                {
                  llvm::ConstantDataSequential *v319 = (void *)-1;
                  if (v159) {
                    goto LABEL_290;
                  }
LABEL_572:
                  unint64_t v160 = 0;
                  goto LABEL_291;
                }
                memset(*((void **)a2 + 2), 255, ((unint64_t)(v159 + 63) >> 3) & 0x3FFFFFF8);
                LODWORD(v159) = a2[6];
                if (!v159) {
                  goto LABEL_572;
                }
LABEL_290:
                unint64_t v160 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v159;
                if (v159 >= 0x41) {
                  int v161 = (char *)*v319 + 8 * (((unint64_t)v159 + 63) >> 6) - 8;
                }
                else {
LABEL_291:
                }
                  int v161 = a2 + 4;
                *v161 &= v160;
                goto LABEL_478;
              }
            }
            else if (__src == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v334))
            {
              goto LABEL_284;
            }
            int v54 = sub_1CC161328(v332, 0, v320, (uint64_t)&v343);
            int v55 = v334;
            BOOL v56 = v334 > 0x40;
            if (v54)
            {
              if (v334 <= 0x40)
              {
                if (v334) {
                  int v57 = __clz(~((void)__src << -(char)v334));
                }
                else {
                  int v57 = 0;
                }
LABEL_105:
                unsigned int v58 = a2[2];
                unsigned int v59 = v58 + ~v57;
                if (v59 <= 0x3F && v58 <= 0x40)
                {
                  LOBYTE(v60) = ~(_BYTE)v57;
LABEL_230:
                  *(void *)a2 |= 0xFFFFFFFFFFFFFFFFLL >> v60 << v59;
                  goto LABEL_478;
                }
LABEL_575:
                llvm::APInt::setBitsSlowCase(a2, v59, v58);
                goto LABEL_478;
              }
              int v57 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&__src);
              if (v57 != -1) {
                goto LABEL_105;
              }
            }
            else
            {
LABEL_124:
              if (v56)
              {
                int v68 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&__src);
              }
              else
              {
                if (!v55) {
                  goto LABEL_478;
                }
                int v68 = __clz(~((void)__src << -(char)v55));
              }
              if (v68)
              {
                unsigned int v58 = a2[2];
                unsigned int v59 = v58 - v68;
                if (v58 <= 0x40 && v59 <= 0x3F)
                {
                  int v60 = -v68;
                  goto LABEL_230;
                }
                goto LABEL_575;
              }
            }
            goto LABEL_478;
          case '%':
            __src = &v330;
            uint64_t v334 = (uint64_t)a1;
            v335[0] = a1;
            v335[1] = &v332;
            if (!sub_1CC18397C((uint64_t)&__src, v40)
              || !llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), v6))
            {
              goto LABEL_482;
            }
            sub_1CC16089C(&v325, v332, v320, &v343);
            sub_1CC17EE08((unint64_t)&v325, v10, (uint64_t)&__src);
            if (v328 >= 0x41 && v327) {
              MEMORY[0x1D25D9CB0](v327, 0x1000C8000313F17);
            }
            if (v326 >= 0x41 && v325) {
              MEMORY[0x1D25D9CB0](v325, 0x1000C8000313F17);
            }
            int v55 = v334;
            BOOL v56 = v334 > 0x40;
            goto LABEL_124;
          case '&':
            __src = &v330;
            uint64_t v334 = (uint64_t)a1;
            v335[0] = a1;
            v335[1] = &v332;
            if (!sub_1CC18397C((uint64_t)&__src, v40)
              || !llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), v6))
            {
              goto LABEL_482;
            }
            sub_1CC16089C(&v325, v332, v320, &v343);
            sub_1CC17EE08((unint64_t)&v325, v10, (uint64_t)&__src);
            if (v328 >= 0x41 && v327) {
              MEMORY[0x1D25D9CB0](v327, 0x1000C8000313F17);
            }
            if (v326 >= 0x41 && v325) {
              MEMORY[0x1D25D9CB0](v325, 0x1000C8000313F17);
            }
            unsigned int v69 = v335[1];
            if (!LODWORD(v335[1])) {
              goto LABEL_297;
            }
            if (LODWORD(v335[1]) > 0x40)
            {
              if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v335) == v69) {
                goto LABEL_297;
              }
            }
            else if (v335[0] == (void *)(0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(v335[1])))
            {
              goto LABEL_297;
            }
            unsigned int v162 = v334 - 1;
            p_src = &__src;
            if (v334 >= 0x41) {
              p_src = (void **)((char *)__src + 8 * (v162 >> 6));
            }
            if (((unint64_t)*p_src >> v162))
            {
LABEL_297:
              unsigned int v164 = a2[2];
              uint64_t v165 = 1 << (v164 - 1);
              if (v164 >= 0x41) {
                int v166 = (unsigned int *)(*(void *)a2 + 8 * ((v164 - 1) >> 6));
              }
              else {
                int v166 = a2;
              }
              *(void *)v166 |= v165;
            }
            if (v69 >= 0x41) {
              goto LABEL_578;
            }
            goto LABEL_480;
          case '\'':
            __src = &v330;
            uint64_t v334 = (uint64_t)a1;
            v335[0] = a1;
            v335[1] = &v332;
            if (!sub_1CC18397C((uint64_t)&__src, v40)
              || !llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), v6))
            {
              goto LABEL_482;
            }
            sub_1CC16089C(&v325, v332, v320, &v343);
            sub_1CC17EE08((unint64_t)&v325, v10, (uint64_t)&__src);
            if (v328 >= 0x41 && v327) {
              MEMORY[0x1D25D9CB0](v327, 0x1000C8000313F17);
            }
            if (v326 >= 0x41 && v325) {
              MEMORY[0x1D25D9CB0](v325, 0x1000C8000313F17);
            }
            unsigned int v70 = v334;
            int v71 = (void **)((char *)__src + 8 * ((v334 - 1) >> 6));
            if (v334 < 0x41) {
              int v71 = &__src;
            }
            if (((unint64_t)*v71 >> (v334 - 1)))
            {
              unsigned int v72 = a2[2];
              uint64_t v73 = 1 << (v72 - 1);
              if (v72 >= 0x41) {
                int v74 = (unsigned int *)(*(void *)a2 + 8 * ((v72 - 1) >> 6));
              }
              else {
                int v74 = a2;
              }
              *(void *)v74 |= v73;
            }
            if (LODWORD(v335[1]) < 0x41) {
              goto LABEL_481;
            }
            int v75 = v335[0];
            if (!v335[0]) {
              goto LABEL_481;
            }
            goto LABEL_579;
          case '(':
            __src = &v330;
            uint64_t v334 = (uint64_t)a1;
            v335[0] = a1;
            v335[1] = &v332;
            if (!sub_1CC18397C((uint64_t)&__src, v40)
              || !llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), v6))
            {
              goto LABEL_482;
            }
            sub_1CC16089C(&v325, v332, v320, &v343);
            sub_1CC17EE08((unint64_t)&v325, v10, (uint64_t)&__src);
            if (v328 >= 0x41 && v327) {
              MEMORY[0x1D25D9CB0](v327, 0x1000C8000313F17);
            }
            if (v326 >= 0x41 && v325) {
              MEMORY[0x1D25D9CB0](v325, 0x1000C8000313F17);
            }
            unsigned int v52 = v334;
            if (!v334) {
              goto LABEL_276;
            }
            if (v334 > 0x40)
            {
              if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__src) == v52) {
                goto LABEL_276;
              }
            }
            else if (__src == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v334))
            {
              goto LABEL_276;
            }
            unsigned int v150 = v335[1];
            uint64_t v151 = (void **)((char *)v335[0] + 8 * ((LODWORD(v335[1]) - 1) >> 6));
            if (LODWORD(v335[1]) < 0x41) {
              uint64_t v151 = v335;
            }
            if (((unint64_t)*v151 >> (LOBYTE(v335[1]) - 1)))
            {
LABEL_276:
              unsigned int v152 = a2[6];
              uint64_t v153 = 1 << (v152 - 1);
              uint64_t v154 = *((void *)a2 + 2) + 8 * ((v152 - 1) >> 6);
              BOOL v66 = v152 >= 0x41;
              uint64_t v155 = a2 + 4;
              if (v66) {
                uint64_t v155 = (void *)v154;
              }
              *v155 |= v153;
              unsigned int v150 = v335[1];
            }
            if (v150 >= 0x41 && v335[0])
            {
              MEMORY[0x1D25D9CB0](v335[0], 0x1000C8000313F17);
              unsigned int v52 = v334;
            }
            if (v52 >= 0x41) {
              goto LABEL_576;
            }
            goto LABEL_482;
          case ')':
            __src = &v330;
            uint64_t v334 = (uint64_t)a1;
            v335[0] = a1;
            v335[1] = &v332;
            if (!sub_1CC18397C((uint64_t)&__src, v40)
              || !llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), v6))
            {
              goto LABEL_482;
            }
            sub_1CC16089C(&v325, v332, v320, &v343);
            sub_1CC17EE08((unint64_t)&v325, v10, (uint64_t)&__src);
            if (v328 >= 0x41 && v327) {
              MEMORY[0x1D25D9CB0](v327, 0x1000C8000313F17);
            }
            if (v326 >= 0x41 && v325) {
              MEMORY[0x1D25D9CB0](v325, 0x1000C8000313F17);
            }
            unsigned int v61 = v335[1];
            long long v62 = (void **)((char *)v335[0] + 8 * ((LODWORD(v335[1]) - 1) >> 6));
            if (LODWORD(v335[1]) < 0x41) {
              long long v62 = v335;
            }
            if (((unint64_t)*v62 >> (LOBYTE(v335[1]) - 1)))
            {
              unsigned int v63 = a2[6];
              uint64_t v64 = 1 << (v63 - 1);
              uint64_t v65 = *((void *)a2 + 2) + 8 * ((v63 - 1) >> 6);
              BOOL v66 = v63 >= 0x41;
              int v67 = a2 + 4;
              if (v66) {
                int v67 = (void *)v65;
              }
              *v67 |= v64;
            }
            goto LABEL_479;
          default:
            goto LABEL_482;
        }
      }
    }
  }
LABEL_17:
  uint64_t v18 = a2[2];
  if (v18 > 0x40)
  {
    unint64_t v19 = 0;
    uint64_t v20 = *(unsigned int **)a2;
    while ((*(void *)(*((void *)a2 + 2) + v19) & *(void *)&v20[v19 / 4]) == 0)
    {
      v19 += 8;
      if ((((unint64_t)(v18 + 63) >> 3) & 0x3FFFFFF8) == v19) {
        return;
      }
    }
    bzero(v20, ((unint64_t)(v18 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    if ((*((void *)a2 + 2) & *(void *)a2) == 0) {
      return;
    }
    *(void *)a2 = 0;
  }
  uint64_t v21 = a2[6];
  if (v21 > 0x40) {
    bzero(*((void **)a2 + 2), ((unint64_t)(v21 + 63) >> 3) & 0x3FFFFFF8);
  }
  else {
    *((void *)a2 + 2) = 0;
  }
  uint64_t v22 = (uint64_t ***)*((void *)a4 + 4);
  if (v22)
  {
    uint64_t v23 = *(void *)***v22;
    if (*(void *)(v23 + 128)
      || (*(unsigned int (**)(void))(**(void **)(v23 + 72) + 48))(*(void *)(v23 + 72)))
    {
      llvm::OptimizationRemarkAnalysis::OptimizationRemarkAnalysis((uint64_t)&v343, (uint64_t)"value-tracking", (uint64_t)"BadAssumption", 13, *((void *)a4 + 2));
      __src = "Detected conflicting code assumptions. Program may have undefined behavior, or compiler may have internal error.";
      uint64_t v334 = 112;
      sub_1CC59ADEC((uint64_t *)&v346, (uint64_t)&__src);
      LODWORD(v334) = DWORD2(v343);
      BYTE4(v334) = BYTE12(v343);
      *(_OWORD *)unsigned int v335 = v344;
      unint64_t v336 = (unsigned __int8 **)v345[0];
      long long v337 = *(_OWORD *)&v345[1];
      long long v338 = *(_OWORD *)&v345[3];
      __src = &unk_1F2616800;
      uint64_t v339 = v345[5];
      uint64_t v340 = v342;
      uint64_t v341 = 0x400000000;
      unsigned int v29 = v347;
      if (v347)
      {
        sub_1CD494D68((uint64_t)&v340, (uint64_t)&v346);
        unsigned int v29 = v347;
      }
      v342[32] = v348[32];
      v342[33] = v348[33];
      __src = &unk_1F26165E0;
      *(void *)&long long v343 = &unk_1F2616800;
      unsigned int v30 = (char *)v346;
      if (v29)
      {
        unint64_t v31 = (unint64_t)v29 << 6;
        do
        {
          uint64_t v32 = (void **)&v30[v31];
          if (v30[v31 - 17] < 0) {
            operator delete(*(v32 - 5));
          }
          if (*((char *)v32 - 41) < 0) {
            operator delete(*(v32 - 8));
          }
          v31 -= 64;
        }
        while (v31);
        unsigned int v30 = (char *)v346;
      }
      if (v30 != (char *)v348) {
        free(v30);
      }
      llvm::OptimizationRemarkEmitter::emit(v22, (llvm::DiagnosticInfoOptimizationBase *)&__src);
      __src = &unk_1F2616800;
      unsigned int v33 = (char *)v340;
      if (v341)
      {
        unint64_t v34 = (unint64_t)v341 << 6;
        do
        {
          uint64_t v35 = (void **)&v33[v34];
          if (v33[v34 - 17] < 0) {
            operator delete(*(v35 - 5));
          }
          if (*((char *)v35 - 41) < 0) {
            operator delete(*(v35 - 8));
          }
          v34 -= 64;
        }
        while (v34);
        unsigned int v33 = (char *)v340;
      }
      if (v33 != (char *)v342) {
        free(v33);
      }
    }
  }
}

uint64_t sub_1CC17EA2C(uint64_t ***a1, uint64_t ***a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t *a8)
{
  uint64_t v15 = (a7 + 1);
  sub_1CC15FDD8(a2, a4, a5, v15, a8);
  sub_1CC15FDD8(a1, a4, a6, v15, a8);
  if (!a3)
  {
    int v16 = 0;
    goto LABEL_57;
  }
  if (a1 == a2)
  {
    int v16 = 0;
    a3 = 1;
    goto LABEL_57;
  }
  int v16 = 0;
  unsigned int v17 = *(_DWORD *)(a5 + 8);
  char v18 = v17 - 1;
  if (v17 >= 0x41) {
    unint64_t v19 = (void *)(*(void *)a5 + 8 * ((v17 - 1) >> 6));
  }
  else {
    unint64_t v19 = (void *)a5;
  }
  a3 = 1;
  uint64_t v20 = (1 << v18) & *v19;
  unsigned int v21 = *(_DWORD *)(a6 + 8);
  char v22 = v21 - 1;
  if (v21 >= 0x41) {
    uint64_t v23 = (void *)(*(void *)a6 + 8 * ((v21 - 1) >> 6));
  }
  else {
    uint64_t v23 = (void *)a6;
  }
  uint64_t v24 = *(unsigned int *)(a5 + 24);
  unsigned int v25 = v24 - 1;
  uint64_t v26 = *(void *)(a5 + 16);
  if (v24 >= 0x41) {
    int v27 = (void *)(v26 + 8 * (v25 >> 6));
  }
  else {
    int v27 = (void *)(a5 + 16);
  }
  uint64_t v28 = *(unsigned int *)(a6 + 24);
  unsigned int v29 = v28 - 1;
  unsigned int v30 = (uint64_t *)(a6 + 16);
  uint64_t v31 = *(void *)(a6 + 16);
  if (v28 >= 0x41) {
    unsigned int v30 = (uint64_t *)(v31 + 8 * (v29 >> 6));
  }
  uint64_t v32 = (1 << v22) & *v23;
  uint64_t v33 = (1 << v25) & *v27;
  uint64_t v34 = 1 << v29;
  uint64_t v35 = *v30;
  if (v32) {
    BOOL v36 = v20 != 0;
  }
  else {
    BOOL v36 = 0;
  }
  BOOL v37 = (v34 & v35) == 0 || v33 == 0;
  if (v37 && !v36)
  {
    if (v33) {
      BOOL v38 = v32 == 0;
    }
    else {
      BOOL v38 = 1;
    }
    if (v38)
    {
      int v16 = 0;
      a3 = 0;
LABEL_43:
      if ((v34 & v35) != 0 && v20)
      {
        if (v24 > 0x40)
        {
          int v47 = 0;
          int64_t v48 = (unint64_t)(v24 + 63) >> 6;
          do
          {
            BOOL v42 = v48-- < 1;
            if (v42) {
              break;
            }
            unint64_t v49 = *(void *)(v26 + 8 * v48);
            v47 += __clz(v49);
          }
          while (!v49);
          int v50 = v24 | 0xFFFFFFC0;
          if ((v24 & 0x3F) == 0) {
            int v50 = 0;
          }
          BOOL v46 = v47 + v50 == v24;
        }
        else
        {
          BOOL v46 = v26 == 0;
        }
        int v51 = v46;
        a3 = 0;
        int v16 = v51 ^ 1;
      }
      goto LABEL_57;
    }
    if (v28 > 0x40)
    {
      int v40 = 0;
      int64_t v41 = (unint64_t)(v28 + 63) >> 6;
      do
      {
        BOOL v42 = v41-- < 1;
        if (v42) {
          break;
        }
        unint64_t v43 = *(void *)(v31 + 8 * v41);
        v40 += __clz(v43);
      }
      while (!v43);
      int v44 = v28 | 0xFFFFFFC0;
      if ((v28 & 0x3F) == 0) {
        int v44 = 0;
      }
      BOOL v39 = v40 + v44 == v28;
    }
    else
    {
      BOOL v39 = v31 == 0;
    }
    int v45 = v39;
    a3 = 0;
    int v16 = v45 ^ 1;
    if (((v45 ^ 1) & 1) == 0) {
      goto LABEL_43;
    }
  }
LABEL_57:
  if (a1 == a2) {
    unsigned int v52 = (const llvm::KnownBits *)sub_1CC16A22C(a1, a8[1], a8[2], a8[3], v15, 0);
  }
  else {
    unsigned int v52 = 0;
  }
  uint64_t result = llvm::KnownBits::mul((llvm::KnownBits *)a5, (const llvm::KnownBits *)a6, v52, (uint64_t)&v66);
  if (*(_DWORD *)(a5 + 8) >= 0x41u)
  {
    uint64_t result = *(void *)a5;
    if (*(void *)a5) {
      uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
    }
  }
  *(void *)a5 = v66;
  *(_DWORD *)(a5 + 8) = v67;
  unsigned int v67 = 0;
  int v54 = (uint64_t *)(a5 + 16);
  if (*(_DWORD *)(a5 + 24) >= 0x41u && (uint64_t result = *v54) != 0)
  {
    uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
    unsigned int v65 = v67;
    *(void *)(a5 + 16) = v68;
    *(_DWORD *)(a5 + 24) = v69;
    int v69 = 0;
    if (v65 >= 0x41)
    {
      uint64_t result = v66;
      if (v66) {
        uint64_t result = MEMORY[0x1D25D9CB0](v66, 0x1000C8000313F17);
      }
    }
  }
  else
  {
    *(void *)(a5 + 16) = v68;
    *(_DWORD *)(a5 + 24) = v69;
  }
  if (a3)
  {
    unsigned int v55 = *(_DWORD *)(a5 + 24);
    char v56 = v55 - 1;
    int v57 = (void *)(v55 >= 0x41 ? *(void *)(a5 + 16) + 8 * ((v55 - 1) >> 6) : a5 + 16);
    if (((*v57 >> v56) & 1) == 0)
    {
      unsigned int v64 = *(_DWORD *)(a5 + 8);
      unsigned int v62 = v64 - 1;
      if (v64 >= 0x41)
      {
        uint64_t v63 = *(void *)a5;
        goto LABEL_78;
      }
      int v54 = (uint64_t *)a5;
LABEL_79:
      *v54 |= 1 << v62;
      return result;
    }
  }
  if (v16)
  {
    unsigned int v58 = *(_DWORD *)(a5 + 8);
    char v59 = v58 - 1;
    int v60 = (void *)(v58 >= 0x41 ? *(void *)a5 + 8 * ((v58 - 1) >> 6) : a5);
    if (((*v60 >> v59) & 1) == 0)
    {
      unsigned int v61 = *(_DWORD *)(a5 + 24);
      unsigned int v62 = v61 - 1;
      if (v61 >= 0x41)
      {
        uint64_t v63 = *v54;
LABEL_78:
        int v54 = (uint64_t *)(v63 + 8 * (v62 >> 6));
        goto LABEL_79;
      }
      goto LABEL_79;
    }
  }
  return result;
}

unint64_t sub_1CC17EE08@<X0>(unint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result;
  unsigned int v5 = *(_DWORD *)(result + 8);
  if (v5 >= a2)
  {
    if (v5 <= a2)
    {
      *(_DWORD *)(a3 + 8) = v5;
      if (v5 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)a3, (const llvm::APInt *)result);
      }
      *(void *)a3 = *(void *)result;
      uint64_t result = a3 + 16;
      int v16 = (const llvm::APInt *)(v3 + 16);
      unsigned int v17 = *(_DWORD *)(v3 + 24);
      *(_DWORD *)(a3 + 24) = v17;
      if (v17 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)result, v16);
      }
      *(void *)uint64_t result = *(void *)v16;
    }
    else
    {
      if (a2 > 0x40) {
        operator new[]();
      }
      signed int v9 = (uint64_t *)result;
      if (v5 >= 0x41) {
        signed int v9 = *(uint64_t **)result;
      }
      uint64_t v10 = *v9;
      unint64_t v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
      if (a2) {
        unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
      }
      else {
        unint64_t v12 = 0;
      }
      unint64_t v13 = v12 & v10;
      int v14 = (unint64_t *)(result + 16);
      if (*(_DWORD *)(result + 24) >= 0x41u) {
        int v14 = (unint64_t *)*v14;
      }
      unint64_t v15 = *v14;
      if (!a2) {
        unint64_t v11 = 0;
      }
      uint64_t result = v11 & v15;
      *(_DWORD *)(a3 + 8) = a2;
      *(void *)a3 = v13;
      *(_DWORD *)(a3 + 24) = a2;
      *(void *)(a3 + 16) = v11 & v15;
    }
  }
  else
  {
    if (a2 >= 0x41) {
      operator new[]();
    }
    unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    unint64_t v7 = *(void *)result & v6;
    unint64_t v8 = *(void *)(result + 16) & v6;
    *(_DWORD *)(a3 + 8) = a2;
    *(void *)a3 = v7;
    *(_DWORD *)(a3 + 24) = a2;
    *(void *)(a3 + 16) = v8;
  }
  return result;
}

void sub_1CC17F168(uint64_t a1, uint64_t a2, int8x8_t *a3, uint64_t a4, int a5, uint64_t a6, void (*a7)(int8x8_t *__return_ptr, uint64_t, uint64_t, int8x8_t *), uint64_t a8)
{
  int v13 = *(_DWORD *)(a1 + 20);
  if ((v13 & 0x40000000) != 0) {
    int v14 = *(void **)(a1 - 8);
  }
  else {
    int v14 = (void *)(a1 - 32 * (v13 & 0x7FFFFFF));
  }
  unint64_t v15 = a3[1].u32[0];
  uint64_t v16 = (a5 + 1);
  sub_1CC15FDD8(*v14, a2, a4, v16, a6);
  int v17 = *(_DWORD *)(a1 + 20);
  if ((v17 & 0x40000000) != 0) {
    uint64_t v18 = *(void *)(a1 - 8);
  }
  else {
    uint64_t v18 = a1 - 32 * (v17 & 0x7FFFFFF);
  }
  uint64_t v81 = a2;
  sub_1CC15FDD8(*(void *)(v18 + 32), a2, a3, v16, a6);
  uint64_t v19 = a3[1].u32[0];
  int8x8_t v20 = *a3;
  if (v19 >= 0x41) {
    unsigned int v21 = (int8x8_t *)*a3;
  }
  else {
    unsigned int v21 = a3;
  }
  uint64_t v23 = (void **)&a3[2];
  char v22 = (int8x8_t *)a3[2];
  uint64_t v24 = a3[3].u32[0];
  if (v24 >= 0x41) {
    unsigned int v25 = (int8x8_t *)a3[2];
  }
  else {
    unsigned int v25 = a3 + 2;
  }
  if (v19 > 0x40)
  {
    __int32 v27 = 0;
    unint64_t v70 = (unint64_t)(v19 + 63) >> 6;
    int v71 = (int8x8_t *)*a3;
    do
    {
      int8x8_t v72 = *v71++;
      uint8x8_t v73 = (uint8x8_t)vcnt_s8(v72);
      v73.i16[0] = vaddlv_u8(v73);
      v27 += v73.i32[0];
      --v70;
    }
    while (v70);
  }
  else
  {
    uint8x8_t v26 = (uint8x8_t)vcnt_s8(v20);
    v26.i16[0] = vaddlv_u8(v26);
    __int32 v27 = v26.i32[0];
  }
  if (v24 > 0x40)
  {
    __int32 v29 = 0;
    unint64_t v74 = (unint64_t)(v24 + 63) >> 6;
    do
    {
      int8x8_t v75 = *v22++;
      uint8x8_t v76 = (uint8x8_t)vcnt_s8(v75);
      v76.i16[0] = vaddlv_u8(v76);
      v29 += v76.i32[0];
      --v74;
    }
    while (v74);
  }
  else
  {
    uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
    v28.i16[0] = vaddlv_u8(v28);
    __int32 v29 = v28.i32[0];
  }
  int8x8_t v30 = *v21;
  int8x8_t v86 = *v25;
  unsigned int v92 = a3[1].u32[0];
  if (v19 > 0x40) {
    operator new[]();
  }
  uint64_t v31 = ~*(void *)&v20;
  unint64_t v32 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
  if (!v19) {
    unint64_t v32 = 0;
  }
  BOOL v33 = (v32 & v31) >= v15;
  if (v29 + v27 == v19)
  {
    a7(&v91, a8, a4, a3);
    if (a3[1].i32[0] >= 0x41u && *(void *)a3) {
      ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a3, 0x1000C8000313F17);
    }
    *a3 = v91;
    a3[1].i32[0] = v92;
    unsigned int v92 = 0;
    if (a3[3].i32[0] >= 0x41u && *v23)
    {
      MEMORY[0x1D25D9CB0](*v23, 0x1000C8000313F17);
      unsigned int v77 = v92;
      a3[2] = v93;
      a3[3].i32[0] = v94;
      unsigned int v94 = 0;
      if (v77 >= 0x41)
      {
        if (v91) {
          MEMORY[0x1D25D9CB0](*(void *)&v91, 0x1000C8000313F17);
        }
      }
    }
    else
    {
      a3[2] = v93;
      a3[3].i32[0] = v94;
    }
    uint64_t v34 = a3[1].u32[0];
    if (v34 > 0x40)
    {
      uint64_t v35 = 0;
      BOOL v36 = (void *)*a3;
      unint64_t v37 = (unint64_t)(v34 + 63) >> 3;
      while ((*(void *)(*(void *)&a3[2] + v35) & *(void *)((unsigned char *)v36 + v35)) == 0)
      {
        v35 += 8;
        if ((((unint64_t)(v34 + 63) >> 3) & 0x3FFFFFF8) == v35) {
          return;
        }
      }
      goto LABEL_108;
    }
LABEL_97:
    if ((*(void *)&a3[2] & *(void *)a3) == 0) {
      return;
    }
    *a3 = (int8x8_t)-1;
    if (!v34) {
      goto LABEL_109;
    }
    goto LABEL_99;
  }
  uint64_t v38 = a3[1].u32[0];
  if (v33)
  {
    if (v38 > 0x40) {
      bzero(*(void **)a3, ((unint64_t)(v38 + 63) >> 3) & 0x3FFFFFF8);
    }
    else {
      *a3 = 0;
    }
    uint64_t v40 = a3[3].u32[0];
    if (v40 <= 0x40) {
      goto LABEL_102;
    }
    int64_t v41 = *v23;
    bzero(v41, ((unint64_t)(v40 + 63) >> 3) & 0x3FFFFFF8);
    return;
  }
  int8x8_t v39 = v30;
  if (v38 > 0x40) {
    bzero(*(void **)a3, ((unint64_t)(v38 + 63) >> 3) & 0x3FFFFFF8);
  }
  else {
    *a3 = 0;
  }
  uint64_t v42 = a3[3].u32[0];
  if (v42 > 0x40) {
    bzero(*v23, ((unint64_t)(v42 + 63) >> 3) & 0x3FFFFFF8);
  }
  else {
    *uint64_t v23 = 0;
  }
  int8x8_t v43 = v39;
  if (!v15)
  {
    if (!*(void *)&v39)
    {
      uint64_t v46 = -1;
      goto LABEL_48;
    }
LABEL_49:
    char v83 = 0;
    goto LABEL_50;
  }
  unint64_t v44 = (v15 - 1) | ((v15 - 1) >> 1) | (((v15 - 1) | ((v15 - 1) >> 1)) >> 2);
  unint64_t v45 = v44 | (v44 >> 4) | ((v44 | (v44 >> 4)) >> 8);
  uint64_t v46 = v45 | (v45 >> 16) | ((v45 | (v45 >> 16)) >> 32);
  if ((v46 & *(void *)&v39) != 0) {
    goto LABEL_49;
  }
LABEL_48:
  if ((v46 & *(void *)&v86) != 0) {
    goto LABEL_49;
  }
  int v66 = *(_DWORD *)(a1 + 20);
  if ((v66 & 0x40000000) != 0) {
    uint64_t v67 = *(void *)(a1 - 8);
  }
  else {
    uint64_t v67 = a1 - 32 * (v66 & 0x7FFFFFF);
  }
  if (!sub_1CC17FE50(*(llvm::Constant **)(v67 + 32), v81, v16, a6)) {
    return;
  }
  char v83 = 1;
  int8x8_t v43 = v39;
LABEL_50:
  uint64_t v47 = a3[1].u32[0];
  if (v47 <= 0x40)
  {
    *a3 = (int8x8_t)-1;
    if (v47) {
      goto LABEL_52;
    }
LABEL_118:
    unint64_t v48 = 0;
    goto LABEL_53;
  }
  int8x8_t v68 = v43;
  memset(*(void **)a3, 255, ((unint64_t)(v47 + 63) >> 3) & 0x3FFFFFF8);
  int8x8_t v43 = v68;
  LODWORD(v47) = a3[1].i32[0];
  if (!v47) {
    goto LABEL_118;
  }
LABEL_52:
  unint64_t v48 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v47;
  if (v47 < 0x41)
  {
LABEL_53:
    unint64_t v49 = a3;
    goto LABEL_54;
  }
  unint64_t v49 = (int8x8_t *)(*(void *)a3 + 8 * ((((unint64_t)v47 + 63) >> 6) - 1));
LABEL_54:
  *(void *)v49 &= v48;
  uint64_t v50 = a3[3].u32[0];
  if (v50 > 0x40)
  {
    int8x8_t v69 = v43;
    memset(*(void **)&a3[2], 255, ((unint64_t)(v50 + 63) >> 3) & 0x3FFFFFF8);
    int8x8_t v43 = v69;
    LODWORD(v50) = a3[3].i32[0];
  }
  else
  {
    *uint64_t v23 = (void *)-1;
  }
  uint64_t v82 = a4;
  uint64_t v80 = a6;
  unsigned int v79 = v16;
  if (!v50)
  {
    unint64_t v51 = 0;
    goto LABEL_58;
  }
  unint64_t v51 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v50;
  if (v50 < 0x41)
  {
LABEL_58:
    unsigned int v52 = a3 + 2;
    goto LABEL_59;
  }
  unsigned int v52 = (int8x8_t *)((char *)*v23 + 8 * (((unint64_t)v50 + 63) >> 6) - 8);
LABEL_59:
  *(void *)v52 &= v51;
  if (v15)
  {
    uint64_t v53 = 0;
    uint64_t v54 = ~*(void *)&v43;
    char v55 = v83;
    do
    {
      if ((v53 & ~v54) == 0 && (v53 | *(void *)&v86) == v53)
      {
        if (v53) {
          goto LABEL_64;
        }
        if (!v83)
        {
          int v60 = *(_DWORD *)(a1 + 20);
          if ((v60 & 0x40000000) != 0) {
            uint64_t v61 = *(void *)(a1 - 8);
          }
          else {
            uint64_t v61 = a1 - 32 * (v60 & 0x7FFFFFF);
          }
          char v55 = sub_1CC17FE50(*(llvm::Constant **)(v61 + 32), v81, v79, v80);
        }
        char v83 = 1;
        if (!v55)
        {
          char v55 = 0;
LABEL_64:
          unsigned int v88 = 32;
          uint64_t v87 = v53 ^ 0xFFFFFFFFLL;
          unsigned int v90 = 32;
          uint64_t v89 = v53;
          a7(&v91, a8, v82, (int8x8_t *)&v87);
          unsigned int v56 = a3[1].u32[0];
          if (v56 > 0x40) {
            operator new[]();
          }
          size_t v57 = *(void *)&v91 & *(void *)a3;
          unsigned int v58 = a3[3].u32[0];
          if (v58 > 0x40) {
            operator new[]();
          }
          unint64_t v59 = *(void *)&v93 & (unint64_t)*v23;
          if (a3[1].i32[0] >= 0x41u && *(void *)a3)
          {
            size_t __n = *(void *)&v91 & *(void *)a3;
            ((void (*)(void, void))MEMORY[0x1D25D9CB0])(*a3, 0x1000C8000313F17);
            size_t v57 = __n;
          }
          *a3 = (int8x8_t)v57;
          a3[1].i32[0] = v56;
          if (a3[3].i32[0] >= 0x41u && *v23) {
            MEMORY[0x1D25D9CB0](*v23, 0x1000C8000313F17);
          }
          a3[2] = (int8x8_t)v59;
          a3[3].i32[0] = v58;
          if (v94 >= 0x41 && *(void *)&v93) {
            MEMORY[0x1D25D9CB0](*(void *)&v93, 0x1000C8000313F17);
          }
          if (v92 >= 0x41 && *(void *)&v91) {
            MEMORY[0x1D25D9CB0](*(void *)&v91, 0x1000C8000313F17);
          }
          if (v90 >= 0x41 && v89) {
            MEMORY[0x1D25D9CB0](v89, 0x1000C8000313F17);
          }
          if (v88 >= 0x41 && v87) {
            MEMORY[0x1D25D9CB0](v87, 0x1000C8000313F17);
          }
          goto LABEL_81;
        }
        char v55 = 1;
      }
LABEL_81:
      ++v53;
    }
    while (v53 != v15);
  }
  uint64_t v34 = a3[1].u32[0];
  if (v34 <= 0x40) {
    goto LABEL_97;
  }
  uint64_t v65 = 0;
  BOOL v36 = (void *)*a3;
  unint64_t v37 = (unint64_t)(v34 + 63) >> 3;
  while ((*(void *)(*(void *)&a3[2] + v65) & *(void *)((unsigned char *)v36 + v65)) == 0)
  {
    v65 += 8;
    if ((((unint64_t)(v34 + 63) >> 3) & 0x3FFFFFF8) == v65) {
      return;
    }
  }
LABEL_108:
  memset(v36, 255, v37 & 0x3FFFFFF8);
  LODWORD(v34) = a3[1].i32[0];
  if (!v34)
  {
LABEL_109:
    unint64_t v62 = 0;
    goto LABEL_100;
  }
LABEL_99:
  unint64_t v62 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v34;
  if (v34 >= 0x41)
  {
    uint64_t v63 = (int8x8_t *)(*(void *)a3 + 8 * ((((unint64_t)v34 + 63) >> 6) - 1));
    goto LABEL_101;
  }
LABEL_100:
  uint64_t v63 = a3;
LABEL_101:
  *(void *)v63 &= v62;
  uint64_t v64 = a3[3].u32[0];
  if (v64 <= 0x40)
  {
LABEL_102:
    *uint64_t v23 = 0;
    return;
  }
  bzero(*v23, ((unint64_t)(v64 + 63) >> 3) & 0x3FFFFFF8);
}

uint64_t sub_1CC17FB3C(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v15 = (a8 + 1);
  uint64_t result = sub_1CC15FDD8(a3, a5, a6, v15, a9);
  uint64_t v17 = *(unsigned int *)(a6 + 8);
  if (v17 > 0x40)
  {
    int v23 = 0;
    int64_t v24 = (unint64_t)(v17 + 63) >> 6;
    do
    {
      BOOL v25 = v24-- < 1;
      if (v25) {
        break;
      }
      unint64_t v26 = *(void *)(*(void *)a6 + 8 * v24);
      v23 += __clz(v26);
    }
    while (!v26);
    int v27 = v17 | 0xFFFFFFC0;
    if ((v17 & 0x3F) == 0) {
      int v27 = 0;
    }
    if (v23 + v27 != v17) {
      goto LABEL_12;
    }
  }
  else if (*(void *)a6)
  {
LABEL_12:
    sub_1CC15FDD8(a2, a5, a7, v15, a9);
    unsigned int v33 = *(_DWORD *)(a6 + 8);
    if (v33 > 0x40) {
      operator new[]();
    }
    uint64_t v32 = *(void *)a6;
    unsigned int v35 = *(_DWORD *)(a6 + 24);
    if (v35 > 0x40) {
      operator new[]();
    }
    uint64_t v34 = *(void *)(a6 + 16);
    uint64_t result = llvm::KnownBits::computeForAddSub(a1, a4, a7, (uint64_t)&v32, (uint64_t)&v36);
    if (*(_DWORD *)(a6 + 8) >= 0x41u)
    {
      uint64_t result = *(void *)a6;
      if (*(void *)a6) {
        uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
      }
    }
    *(void *)a6 = v36;
    *(_DWORD *)(a6 + 8) = v37;
    unsigned int v37 = 0;
    if (*(_DWORD *)(a6 + 24) >= 0x41u && (uint64_t result = *(void *)(a6 + 16)) != 0)
    {
      uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
      unsigned int v22 = v37;
      *(void *)(a6 + 16) = v38;
      *(_DWORD *)(a6 + 24) = v39;
      int v39 = 0;
      if (v22 >= 0x41)
      {
        uint64_t result = v36;
        if (v36) {
          uint64_t result = MEMORY[0x1D25D9CB0](v36, 0x1000C8000313F17);
        }
      }
    }
    else
    {
      *(void *)(a6 + 16) = v38;
      *(_DWORD *)(a6 + 24) = v39;
      int v39 = 0;
    }
    if (v35 >= 0x41)
    {
      uint64_t result = v34;
      if (v34) {
        uint64_t result = MEMORY[0x1D25D9CB0](v34, 0x1000C8000313F17);
      }
    }
    if (v33 >= 0x41)
    {
      uint64_t result = v32;
      if (v32) {
        return MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
      }
    }
    return result;
  }
  uint64_t v18 = *(unsigned int *)(a6 + 24);
  if (v18 > 0x40)
  {
    int v28 = 0;
    int64_t v29 = (unint64_t)(v18 + 63) >> 6;
    do
    {
      BOOL v25 = v29-- < 1;
      if (v25) {
        break;
      }
      unint64_t v30 = *(void *)(*(void *)(a6 + 16) + 8 * v29);
      v28 += __clz(v30);
    }
    while (!v30);
    int v31 = v18 | 0xFFFFFFC0;
    if ((v18 & 0x3F) == 0) {
      int v31 = 0;
    }
    BOOL v19 = v28 + v31 == v18;
  }
  else
  {
    BOOL v19 = *(void *)(a6 + 16) == 0;
  }
  if (!v19 || a4 != 0) {
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_1CC17FE50(llvm::Constant *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v424 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*(void *)a1 + 8) == 19) {
    return 0;
  }
  unsigned int v9 = *((unsigned __int8 *)a1 + 16);
  if (v9 > 0x14) {
    goto LABEL_4;
  }
  if (v9 == 16)
  {
    uint64_t v32 = *((unsigned int *)a1 + 8);
    if (v32 >= 0x41)
    {
      int v362 = 0;
      int64_t v363 = (unint64_t)(v32 + 63) >> 6;
      do
      {
        BOOL v155 = v363-- < 1;
        if (v155) {
          break;
        }
        unint64_t v364 = *(void *)(*((void *)a1 + 3) + 8 * v363);
        v362 += __clz(v364);
      }
      while (!v364);
      uint64_t v4 = 0;
      int v365 = v32 | 0xFFFFFFC0;
      if ((v32 & 0x3F) == 0) {
        int v365 = 0;
      }
      if (v362 + v365 == v32) {
        return v4;
      }
      return 1;
    }
    return *((void *)a1 + 3) != 0;
  }
  if (v9 == 17)
  {
    if (sub_1CB844168((uint64_t)a1, 0.0)) {
      return 0;
    }
    unsigned int v9 = *((unsigned __int8 *)a1 + 16);
  }
  else if (v9 - 18 < 3 || v9 == 13)
  {
    return 0;
  }
  if (v9 == 16) {
    return 1;
  }
  if (v9 != 5
    || *((unsigned __int16 *)a1 + 9) - 47 > 1
    || (unint64_t v35 = sub_1CB83544C(*(void *)a4, **((void **)a1 - 4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF))),
        v35 > sub_1CB83544C(*(void *)a4, *(void *)a1)))
  {
    uint64_t v36 = *(unsigned char **)a1;
    if (*(void *)a1 && v36[8] == 18)
    {
      int v37 = *((_DWORD *)v36 + 8);
      if (v37)
      {
        uint64_t v38 = 0;
        while (1)
        {
          if (*(_DWORD *)(a2 + 8) >= 0x41u) {
            int v39 = (void *)(*(void *)a2 + 8 * (v38 >> 6));
          }
          else {
            int v39 = (void *)a2;
          }
          if ((*v39 >> (char)v38))
          {
            AggregateElement = llvm::Constant::getAggregateElement(a1, v38);
            if (!AggregateElement) {
              return 0;
            }
            int64_t v41 = AggregateElement;
            unsigned int v42 = *((unsigned __int8 *)AggregateElement + 16);
            if (v42 == 16)
            {
              uint64_t v43 = *((unsigned int *)AggregateElement + 8);
              if (v43 >= 0x41)
              {
                int v45 = 0;
                int64_t v46 = (unint64_t)(v43 + 63) >> 6;
                do
                {
                  BOOL v155 = v46-- < 1;
                  if (v155) {
                    break;
                  }
                  unint64_t v47 = *(void *)(AggregateElement[3] + 8 * v46);
                  v45 += __clz(v47);
                }
                while (!v47);
                int v48 = v43 | 0xFFFFFFC0;
                if ((v43 & 0x3F) == 0) {
                  int v48 = 0;
                }
                if (v45 + v48 == v43) {
                  return 0;
                }
              }
              else if (!AggregateElement[3])
              {
                return 0;
              }
            }
            else
            {
              if (v42 == 17)
              {
                if (sub_1CB844168((uint64_t)AggregateElement, 0.0)) {
                  return 0;
                }
                unsigned int v42 = *((unsigned __int8 *)v41 + 16);
              }
              else if (v42 - 18 < 3 || v42 == 13)
              {
                return 0;
              }
              uint64_t v4 = 0;
              if (v42 > 0x10 || ((1 << v42) & 0x11800) == 0) {
                return v4;
              }
            }
          }
          uint64_t v38 = (llvm::Type *)(v38 + 1);
          uint64_t v4 = 1;
          if (v38 == v37) {
            return v4;
          }
        }
      }
      return 1;
    }
    unsigned int v63 = *((unsigned __int8 *)a1 + 16);
    if (v63 > 3) {
      return 0;
    }
    if ((v63 - 2 >= 2 && *((unsigned char *)a1 + 16) || !llvm::Value::getMetadata(a1, 21))
      && (llvm::GlobalValue::hasExternalWeakLinkage(a1) & 1) == 0
      && *(_DWORD *)(*(void *)a1 + 8) < 0x100u)
    {
      return 1;
    }
LABEL_4:
    BOOL v10 = *((unsigned __int8 *)a1 + 16) < 0x1Cu || *(unsigned char *)(a4 + 40) == 0;
    if (v10 || (*((unsigned char *)a1 + 23) & 0x20) == 0) {
      goto LABEL_23;
    }
    uint64_t v11 = ***(void ***)a1;
    v417[0] = a1;
    int v12 = *(_DWORD *)(v11 + 2496);
    if (v12)
    {
      uint64_t v13 = *(void *)(v11 + 2480);
      int v14 = v12 - 1;
      unsigned int v15 = v14 & ((a1 >> 4) ^ (a1 >> 9));
      uint64_t v16 = (llvm::Constant **)(v13 + 40 * v15);
      uint64_t v17 = *v16;
      if (*v16 == a1)
      {
LABEL_19:
        uint64_t v22 = *((unsigned int *)v16 + 4);
        if (v22)
        {
          int v23 = (void *)((char *)v16[1] + 8);
          uint64_t v24 = 16 * v22;
          while (*((_DWORD *)v23 - 2) != 4)
          {
            v23 += 2;
            v24 -= 16;
            if (!v24) {
              goto LABEL_23;
            }
          }
          uint64_t v49 = *v23;
          if (*v23)
          {
            unsigned int v50 = *(_DWORD *)(*(void *)a1 + 8);
            if (*(void *)a1 && *(_DWORD *)(*(void *)a1 + 8) == 13)
            {
              LODWORD(v421) = v50 >> 8;
              if (v50 >> 8 > 0x40) {
                llvm::APInt::initSlowCase((llvm::APInt *)&v420);
              }
              v420 = 0;
              uint64_t v410 = a4;
              unint64_t v52 = *(unsigned int *)(v49 + 8);
              if (v52 < 2)
              {
                BOOL v409 = 0;
              }
              else
              {
                uint64_t v53 = 0;
                unint64_t v406 = v52 >> 1;
                uint64_t v407 = a2;
                BOOL v409 = 1;
                uint64_t v54 = v49;
                do
                {
                  char v55 = (void *)(v54 - 8 * *(unsigned int *)(v49 + 8));
                  uint64_t v56 = *(void *)(*v55 + 128);
                  uint64_t v57 = *(void *)(v55[1] + 128);
                  unsigned int v58 = *(_DWORD *)(v56 + 32);
                  if (v58 > 0x40) {
                    operator new[]();
                  }
                  unint64_t v59 = *(void **)(v56 + 24);
                  unsigned int v60 = *(_DWORD *)(v57 + 32);
                  if (v60 > 0x40) {
                    operator new[]();
                  }
                  uint64_t v61 = *(void *)(v57 + 24);
                  LODWORD(v417[1]) = v58;
                  v417[0] = v59;
                  DWORD2(v418) = v60;
                  *(void *)&long long v418 = v61;
                  BOOL v62 = llvm::ConstantRange::contains((llvm::ConstantRange *)v417, (const llvm::APInt *)&v420);
                  a2 = v407;
                  if (v62) {
                    break;
                  }
                  BOOL v409 = ++v53 < v406;
                  v54 += 16;
                }
                while (v406 != v53);
              }
              if (v421 >= 0x41 && v420) {
                MEMORY[0x1D25D9CB0](v420, 0x1000C8000313F17);
              }
              a4 = v410;
              if (!v409) {
                return 1;
              }
            }
          }
        }
LABEL_23:
        uint64_t v25 = *(void *)(a4 + 8);
        if (!v25) {
          goto LABEL_114;
        }
        uint64_t v26 = *(void *)(a4 + 16);
        if (!v26) {
          goto LABEL_114;
        }
        int v27 = *(uint64_t ***)a1;
        if (*(unsigned char *)(*(void *)a1 + 8) != 15)
        {
LABEL_109:
          if (!*(unsigned char *)(v25 + 184)) {
            llvm::AssumptionCache::scanFunction((llvm::AssumptionCache *)v25);
          }
          uint64_t v65 = *(void *)(v25 + 160);
          unsigned int v66 = *(_DWORD *)(v25 + 176);
          if (v66)
          {
            unsigned int v74 = v66 - 1;
            unsigned int v75 = (v66 - 1) & ((a1 >> 4) ^ (a1 >> 9));
            uint64_t v67 = v65 + 88 * v75;
            uint8x8_t v76 = *(llvm::Constant **)(v67 + 24);
            if (v76 == a1) {
              goto LABEL_113;
            }
            int v77 = 1;
            while (v76 != (llvm::Constant *)-4096)
            {
              unsigned int v78 = v75 + v77++;
              unsigned int v75 = v78 & v74;
              uint64_t v67 = v65 + 88 * (v78 & v74);
              uint8x8_t v76 = *(llvm::Constant **)(v67 + 24);
              if (v76 == a1) {
                goto LABEL_113;
              }
            }
          }
          uint64_t v67 = v65 + 88 * v66;
LABEL_113:
          if (v67 != v65 + 88 * v66)
          {
            uint64_t v315 = *(unsigned int *)(v67 + 48);
            if (v315)
            {
              uint64_t v316 = 32 * v315;
              uint64_t v317 = (llvm **)(*(void *)(v67 + 40) + 16);
              while (1)
              {
                uint64_t v318 = *v317;
                if (!*v317) {
                  goto LABEL_711;
                }
                uint64_t v319 = a2;
                uint64_t v320 = a4;
                v420 = 0;
                LODWORD(v412) = 0;
                uint64_t v321 = *((void *)v318 - 4 * (*((_DWORD *)v318 + 5) & 0x7FFFFFF));
                v417[0] = &v412;
                v417[1] = a1;
                *(void *)&long long v418 = a1;
                *((void *)&v418 + 1) = &v420;
                if (!v321 || *(unsigned char *)(v321 + 16) != 81) {
                  goto LABEL_778;
                }
                uint64_t v322 = *(void *)(v321 - 64);
                if ((llvm::Constant *)v322 != a1 && (sub_1CC0452A0(&v418, v322) & 1) == 0) {
                  break;
                }
                uint64_t v323 = *(void *)(v321 - 32);
                if (!v323)
                {
                  unint64_t v325 = 0;
                  goto LABEL_704;
                }
                **((void **)&v418 + 1) = v323;
                int v324 = *(_WORD *)(v321 + 18) & 0x3F;
LABEL_708:
                *(_DWORD *)v417[0] = v324;
                a4 = v320;
                if (sub_1CC182938(v412, (uint64_t)v420)
                  && llvm::isValidAssumeForContext(v318, *(const llvm::Instruction **)(v320 + 16), *(const llvm::Instruction **)(v320 + 24), v327))
                {
                  return 1;
                }
                a2 = v319;
LABEL_711:
                v317 += 4;
                v316 -= 32;
                if (!v316) {
                  goto LABEL_114;
                }
              }
              unint64_t v325 = *(void **)(v321 - 32);
LABEL_704:
              if (v417[1] != v325 && !sub_1CC0452A0(&v418, (uint64_t)v325)
                || (uint64_t v326 = *(void *)(v321 - 64)) == 0)
              {
LABEL_778:
                a4 = v320;
                a2 = v319;
                goto LABEL_114;
              }
              **((void **)&v418 + 1) = v326;
              int v324 = dword_1CFAC48C8[*(_WORD *)(v321 + 18) & 0x3F];
              goto LABEL_708;
            }
          }
LABEL_114:
          if (a3 > 5) {
            return 0;
          }
          uint64_t v68 = (a3 + 1);
          int8x8_t v69 = *(uint64_t ***)a1;
          if (!*(void *)a1 || *((unsigned char *)v69 + 8) != 15) {
            goto LABEL_194;
          }
          unsigned int v70 = *((unsigned __int8 *)a1 + 16);
          if (v70 != 21)
          {
            if (v70 == 59)
            {
              if (!*(_DWORD *)(*(void *)a4 + 4)) {
                return 1;
              }
              goto LABEL_194;
            }
LABEL_139:
            if (v70 != 60)
            {
LABEL_160:
              if (v70 < 0x1C) {
                goto LABEL_194;
              }
              unsigned int v98 = v70 - 33;
              BOOL v155 = v98 > 0x33;
              uint64_t v99 = (1 << v98) & 0x8000000000041;
              if (v155 || v99 == 0) {
                goto LABEL_194;
              }
              if (llvm::CallBase::isReturnNonNull(a1)) {
                return 1;
              }
              unint64_t v101 = (void **)*((void *)a1 + 8);
              if (v101 && (*((unsigned char *)v101 + 29) & 0x40) != 0)
              {
                uint64_t v400 = *((unsigned int *)v101 + 2);
                if (v400)
                {
                  long long v401 = v101 + 5;
                  int v402 = -1;
                  while (!*v401 || (*((unsigned char *)*v401 + 17) & 0x40) == 0)
                  {
                    ++v402;
                    ++v401;
                    if (!--v400) {
                      goto LABEL_919;
                    }
                  }
LABEL_920:
                  uint64_t v218 = *((void *)a1 + 4 * (v402 - 1) + -4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF));
                  if (v218) {
                    return sub_1CC1620B8(v218, v68, a4);
                  }
                  uint64_t v102 = *((void *)a1 - 4);
                  if (!v102) {
                    goto LABEL_194;
                  }
                  goto LABEL_173;
                }
              }
              else
              {
                uint64_t v102 = *((void *)a1 - 4);
                if (!v102) {
                  goto LABEL_194;
                }
                if (*(unsigned char *)(v102 + 16)
                  || *(void *)(v102 + 24) != *((void *)a1 + 9)
                  || (uint64_t v103 = *(void *)(v102 + 112)) == 0
                  || (*(unsigned char *)(v103 + 29) & 0x40) == 0)
                {
LABEL_173:
                  if (*(unsigned char *)(v102 + 16) || *(void *)(v102 + 24) != *((void *)a1 + 9)) {
                    goto LABEL_194;
                  }
                  int v104 = *(_DWORD *)(v102 + 36);
                  if (v104 > 441)
                  {
                    if (v104 != 1260 && v104 != 442) {
                      goto LABEL_194;
                    }
                  }
                  else if (v104 != 166 && v104 != 290)
                  {
                    goto LABEL_194;
                  }
LABEL_924:
                  uint64_t v218 = *((void *)a1 - 4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF));
                  if (v218) {
                    return sub_1CC1620B8(v218, v68, a4);
                  }
LABEL_194:
                  uint64_t v108 = *(const llvm::BasicBlock ***)(a4 + 16);
                  int v109 = *(llvm::DominatorTree **)(a4 + 24);
                  int v110 = *((unsigned __int8 *)a1 + 16);
                  if (v110 >= 0x15 && v108 != 0 && v109 != 0)
                  {
                    uint64_t v114 = (void **)*((void *)a1 + 1);
                    if (v114)
                    {
                      unsigned int v405 = v68;
                      unsigned int v115 = 0;
                      uint64_t v408 = a2;
                      uint64_t v411 = a4;
                      while (v115 < dword_1EBCC8748)
                      {
                        a2 = (uint64_t)v114[3];
                        unsigned int v116 = *(unsigned __int8 *)(a2 + 16);
                        if (v116 >= 0x1C)
                        {
                          unsigned int v117 = v116 - 33;
                          BOOL v155 = v117 > 0x33;
                          uint64_t v118 = (1 << v117) & 0x8000000000041;
                          if (!v155 && v118 != 0)
                          {
                            uint64_t v120 = *(void *)(a2 - 32);
                            if (v120)
                            {
                              if (!*(unsigned char *)(v120 + 16) && *(void *)(v120 + 24) == *(void *)(a2 + 72))
                              {
                                if ((*(_WORD *)(v120 + 18) & 1) == 0)
                                {
                                  uint64_t v183 = *(void *)(v120 + 88);
                                  goto LABEL_395;
                                }
                                llvm::Function::BuildLazyArguments(*(llvm::Function **)(a2 - 32));
                                uint64_t v183 = *(void *)(v120 + 88);
                                if (*(_WORD *)(v120 + 18))
                                {
                                  llvm::Function::BuildLazyArguments((llvm::Function *)v120);
                                  uint64_t v184 = *(void *)(v120 + 88);
                                }
                                else
                                {
LABEL_395:
                                  uint64_t v184 = v183;
                                }
                                uint64_t v185 = v184 + 40 * *(void *)(v120 + 96);
                                while (v183 != v185)
                                {
                                  uint64_t v186 = *(unsigned int *)(v183 + 32);
                                  if (*(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * v186) != a1) {
                                    goto LABEL_402;
                                  }
                                  unsigned int v187 = *(_DWORD *)(*(void *)v183 + 8);
                                  if (v187 != 15) {
                                    goto LABEL_402;
                                  }
                                  uint64_t v188 = *(void *)(v183 + 24);
                                  uint64_t v189 = *(void *)(v188 + 112);
                                  if (!v189) {
                                    goto LABEL_402;
                                  }
                                  unsigned int v190 = v186 + 2;
                                  if (v190 >= *(_DWORD *)(v189 + 8)) {
                                    goto LABEL_402;
                                  }
                                  uint64_t v191 = *(void *)(v189 + 8 * v190 + 40);
                                  if (!v191) {
                                    goto LABEL_402;
                                  }
                                  int v192 = *(char *)(v191 + 16);
                                  if (v192 < 0 && (v192 & 0x10) != 0) {
                                    goto LABEL_421;
                                  }
                                  if ((*(unsigned char *)(v191 + 21) & 0x10) == 0) {
                                    goto LABEL_402;
                                  }
                                  uint64_t v193 = (void *)(v191 + 48);
                                  uint64_t v194 = 8 * *(unsigned int *)(v191 + 8) - 8 * *(unsigned int *)(v191 + 32);
                                  if (v194)
                                  {
                                    unint64_t v195 = v194 >> 3;
                                    do
                                    {
                                      unint64_t v196 = v195 >> 1;
                                      int v197 = &v193[v195 >> 1];
                                      uint64_t v198 = *v197;
                                      if (*v197) {
                                        LODWORD(v198) = *(_DWORD *)(v198 + 12);
                                      }
                                      unsigned int v199 = v197 + 1;
                                      v195 += ~v196;
                                      if ((int)v198 < 76) {
                                        uint64_t v193 = v199;
                                      }
                                      else {
                                        unint64_t v195 = v196;
                                      }
                                    }
                                    while (v195);
                                  }
                                  if (!*(void *)(*v193 + 16)) {
                                    goto LABEL_402;
                                  }
                                  if ((v187 & 0xFE) == 0x12)
                                  {
                                    unsigned int v187 = *(_DWORD *)(**(void **)(*(void *)v183 + 16) + 8);
                                    if (v188) {
                                      goto LABEL_417;
                                    }
                                  }
                                  else if (v188)
                                  {
LABEL_417:
                                    if ((*(unsigned char *)(v189 + 17) & 1) == 0 && v187 <= 0xFF) {
                                      goto LABEL_421;
                                    }
                                    goto LABEL_402;
                                  }
                                  if (v187 <= 0xFF)
                                  {
LABEL_421:
                                    if (llvm::DominatorTree::dominates(v109, (const llvm::Value *)a2, (const llvm::Instruction *)v108))return 1; {
                                  }
                                    }
LABEL_402:
                                  v183 += 40;
                                  continue;
                                }
                              }
                            }
                          }
                        }
                        int v121 = *(unsigned __int8 *)(a2 + 16);
                        if ((v121 - 62) >= 0xFFFFFFFE) {
                          uint64_t v122 = *(llvm::Constant **)(a2 - 32);
                        }
                        else {
                          uint64_t v122 = 0;
                        }
                        if (v122 == a1)
                        {
                          unsigned int v123 = *(_DWORD *)(*(void *)a1 + 8);
                          if ((v123 & 0xFE) == 0x12) {
                            unsigned int v123 = *(_DWORD *)(**(void **)(*(void *)a1 + 16) + 8);
                          }
                          uint64_t v124 = *(void *)(*(void *)(a2 + 40) + 56);
                          if ((!v124 || (uint64_t v125 = *(void *)(v124 + 112)) == 0 || (*(unsigned char *)(v125 + 17) & 1) == 0)
                            && v123 <= 0xFF)
                          {
                            if (llvm::DominatorTree::dominates(v109, (const llvm::Value *)a2, (const llvm::Instruction *)v108))return 1; {
                            int v121 = *(unsigned __int8 *)(a2 + 16);
                            }
                          }
                        }
                        if (v121 == 81)
                        {
                          int v126 = *(llvm::Constant **)(a2 - 64);
                          a4 = *(void *)(a2 - 32);
                          if (v126 == a1 && a4)
                          {
                            uint64_t v129 = *(_WORD *)(a2 + 18) & 0x3F;
LABEL_241:
                            uint64_t v68 = sub_1CC182938(v129, a4);
                            if ((v68 & 1) != 0 || sub_1CC182938(dword_1CFAC4970[v129], a4))
                            {
                              v420 = &v422;
                              uint64_t v421 = 0x400000000;
                              v417[0] = v419;
                              v417[1] = v419;
                              *(void *)&long long v418 = 4;
                              DWORD2(v418) = 0;
                              uint64_t v130 = *(void *)(a2 + 8);
                              if (v130)
                              {
                                while (1)
                                {
                                  uint64_t v131 = *(void *)(v130 + 24);
                                  uint64_t v132 = (char *)v417[1];
                                  uint64_t v133 = DWORD1(v418);
                                  if (v417[1] == v417[0])
                                  {
                                    if (DWORD1(v418))
                                    {
                                      int v134 = 0;
                                      uint64_t v135 = 8 * DWORD1(v418);
                                      uint64_t v136 = v417[1];
                                      do
                                      {
                                        if (*v136 == v131) {
                                          goto LABEL_376;
                                        }
                                        if (*v136 == -2) {
                                          int v134 = v136;
                                        }
                                        ++v136;
                                        v135 -= 8;
                                      }
                                      while (v135);
                                      if (v134)
                                      {
                                        unint64_t v138 = 0;
                                        void *v134 = v131;
                                        --DWORD2(v418);
                                        goto LABEL_276;
                                      }
                                    }
                                    unsigned int v137 = v418;
                                    if (DWORD1(v418) < v418)
                                    {
                                      unint64_t v138 = 0;
                                      ++DWORD1(v418);
                                      *((void *)v417[1] + v133) = v131;
                                      goto LABEL_276;
                                    }
                                  }
                                  else
                                  {
                                    unsigned int v137 = v418;
                                  }
                                  if (3 * v137 <= 4 * (DWORD1(v418) - DWORD2(v418))) {
                                    break;
                                  }
                                  if (v137 - DWORD1(v418) < v137 >> 3) {
                                    goto LABEL_383;
                                  }
LABEL_257:
                                  unsigned int v139 = v137 - 1;
                                  unsigned int v140 = (v137 - 1) & ((v131 >> 4) ^ (v131 >> 9));
                                  int v141 = &v132[8 * v140];
                                  uint64_t v142 = *(void *)v141;
                                  if (*(void *)v141 != -1)
                                  {
                                    unsigned int v143 = 0;
                                    int v144 = 1;
                                    while (v142 != v131)
                                    {
                                      if (v143) {
                                        BOOL v145 = 0;
                                      }
                                      else {
                                        BOOL v145 = v142 == -2;
                                      }
                                      if (v145) {
                                        unsigned int v143 = v141;
                                      }
                                      unsigned int v146 = v140 + v144++;
                                      unsigned int v140 = v146 & v139;
                                      int v141 = &v132[8 * (v146 & v139)];
                                      uint64_t v142 = *(void *)v141;
                                      if (*(void *)v141 == -1) {
                                        goto LABEL_269;
                                      }
                                    }
LABEL_375:
                                    unsigned int v148 = v421;
                                    if (v421) {
                                      goto LABEL_278;
                                    }
                                    goto LABEL_376;
                                  }
                                  unsigned int v143 = 0;
LABEL_269:
                                  if (v143) {
                                    unint64_t v147 = v143;
                                  }
                                  else {
                                    unint64_t v147 = v141;
                                  }
                                  if (*(void *)v147 == v131) {
                                    goto LABEL_375;
                                  }
                                  if (*(void *)v147 == -2) {
                                    --DWORD2(v418);
                                  }
                                  else {
                                    ++DWORD1(v418);
                                  }
                                  *(void *)unint64_t v147 = v131;
                                  unint64_t v138 = v421;
LABEL_276:
                                  if (v138 >= HIDWORD(v421)) {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                                  }
                                  *((void *)v420 + v138) = v131;
                                  unsigned int v148 = v421 + 1;
                                  LODWORD(v421) = v148;
                                  if (v148)
                                  {
                                    do
                                    {
LABEL_278:
                                      uint64_t v149 = (const llvm::Value *)*((void *)v420 + v148 - 1);
                                      LODWORD(v421) = v148 - 1;
                                      unsigned int v150 = *((unsigned __int8 *)v149 + 16);
                                      if (v68)
                                      {
                                        if (v149) {
                                          BOOL v151 = v150 >= 0x1C;
                                        }
                                        else {
                                          BOOL v151 = 0;
                                        }
                                        if (v151)
                                        {
                                          int v152 = *(_DWORD *)(*(void *)v149 + 8);
                                          if ((v152 & 0xFE) == 0x12) {
                                            int v152 = *(_DWORD *)(**(void **)(*(void *)v149 + 16) + 8);
                                          }
                                          if (v152 == 269)
                                          {
                                            if (v150 == 56) {
                                              goto LABEL_296;
                                            }
                                            if (v150 == 85)
                                            {
                                              uint64_t v153 = *((void *)v149 - 4);
                                              unsigned int v154 = *(unsigned __int8 *)(v153 + 16);
                                              if (v153) {
                                                BOOL v155 = v154 > 0x14;
                                              }
                                              else {
                                                BOOL v155 = 1;
                                              }
                                              if (v155) {
                                                goto LABEL_366;
                                              }
                                              if (v154 == 16)
                                              {
                                                uint64_t v156 = *(unsigned int *)(v153 + 32);
                                                if (v156 < 0x41)
                                                {
                                                  if (!*(void *)(v153 + 24)) {
                                                    goto LABEL_296;
                                                  }
                                                  goto LABEL_366;
                                                }
                                                int v178 = 0;
                                                int64_t v179 = (unint64_t)(v156 + 63) >> 6;
                                                do
                                                {
                                                  BOOL v155 = v179-- < 1;
                                                  if (v155) {
                                                    break;
                                                  }
                                                  unint64_t v180 = *(void *)(*(void *)(v153 + 24) + 8 * v179);
                                                  v178 += __clz(v180);
                                                }
                                                while (!v180);
                                                int v181 = v156 | 0xFFFFFFC0;
                                                if ((v156 & 0x3F) == 0) {
                                                  int v181 = 0;
                                                }
                                                if (v178 + v181 != v156) {
                                                  goto LABEL_366;
                                                }
LABEL_296:
                                                while (2)
                                                {
                                                  while (2)
                                                  {
                                                    uint64_t v149 = (const llvm::Value *)*((void *)v149 + 1);
                                                    if (!v149) {
                                                      goto LABEL_366;
                                                    }
                                                    uint64_t v157 = *((void *)v149 + 3);
                                                    uint64_t v158 = (char *)v417[1];
                                                    uint64_t v159 = DWORD1(v418);
                                                    if (v417[1] == v417[0])
                                                    {
                                                      if (DWORD1(v418))
                                                      {
                                                        unint64_t v160 = 0;
                                                        uint64_t v161 = 8 * DWORD1(v418);
                                                        unsigned int v162 = v417[1];
                                                        while (*v162 != v157)
                                                        {
                                                          if (*v162 == -2) {
                                                            unint64_t v160 = v162;
                                                          }
                                                          ++v162;
                                                          v161 -= 8;
                                                          if (!v161)
                                                          {
                                                            if (!v160) {
                                                              goto LABEL_305;
                                                            }
                                                            *unint64_t v160 = v157;
                                                            --DWORD2(v418);
                                                            goto LABEL_329;
                                                          }
                                                        }
                                                        continue;
                                                      }
LABEL_305:
                                                      unsigned int v163 = v418;
                                                      if (DWORD1(v418) < v418)
                                                      {
                                                        ++DWORD1(v418);
                                                        *((void *)v417[1] + v159) = v157;
LABEL_329:
                                                        if (v421 >= (unint64_t)HIDWORD(v421)) {
                                                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                                                        }
                                                        *((void *)v420 + v421) = v157;
                                                        LODWORD(v421) = v421 + 1;
                                                        continue;
                                                      }
                                                    }
                                                    else
                                                    {
                                                      unsigned int v163 = v418;
                                                    }
                                                    break;
                                                  }
                                                  if (3 * v163 <= 4 * (DWORD1(v418) - DWORD2(v418)))
                                                  {
                                                    if (v163 >= 0x40) {
                                                      v163 *= 2;
                                                    }
                                                    else {
                                                      unsigned int v163 = 128;
                                                    }
                                                  }
                                                  else if (v163 - DWORD1(v418) >= v163 >> 3)
                                                  {
                                                    goto LABEL_310;
                                                  }
                                                  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v417, v163);
                                                  unsigned int v163 = v418;
                                                  uint64_t v158 = (char *)v417[1];
LABEL_310:
                                                  unsigned int v164 = v163 - 1;
                                                  unsigned int v165 = (v163 - 1) & ((v157 >> 4) ^ (v157 >> 9));
                                                  int v166 = &v158[8 * v165];
                                                  uint64_t v167 = *(void *)v166;
                                                  if (*(void *)v166 == -1)
                                                  {
                                                    int v168 = 0;
LABEL_322:
                                                    if (v168) {
                                                      uint64_t v172 = v168;
                                                    }
                                                    else {
                                                      uint64_t v172 = v166;
                                                    }
                                                    if (*(void *)v172 != v157)
                                                    {
                                                      if (*(void *)v172 == -2) {
                                                        --DWORD2(v418);
                                                      }
                                                      else {
                                                        ++DWORD1(v418);
                                                      }
                                                      *(void *)uint64_t v172 = v157;
                                                      goto LABEL_329;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    int v168 = 0;
                                                    int v169 = 1;
                                                    while (v167 != v157)
                                                    {
                                                      if (v168) {
                                                        BOOL v170 = 0;
                                                      }
                                                      else {
                                                        BOOL v170 = v167 == -2;
                                                      }
                                                      if (v170) {
                                                        int v168 = v166;
                                                      }
                                                      unsigned int v171 = v165 + v169++;
                                                      unsigned int v165 = v171 & v164;
                                                      int v166 = &v158[8 * (v171 & v164)];
                                                      uint64_t v167 = *(void *)v166;
                                                      if (*(void *)v166 == -1) {
                                                        goto LABEL_322;
                                                      }
                                                    }
                                                  }
                                                  continue;
                                                }
                                              }
                                              if (v154 != 17)
                                              {
                                                if (v154 - 18 < 3 || v154 == 13) {
                                                  goto LABEL_296;
                                                }
                                                goto LABEL_366;
                                              }
                                              if (sub_1CB844168(v153, 0.0)) {
                                                goto LABEL_296;
                                              }
                                              unsigned int v150 = *((unsigned __int8 *)v149 + 16);
                                            }
                                          }
                                        }
                                        if (v149) {
                                          BOOL v175 = v150 == 30;
                                        }
                                        else {
                                          BOOL v175 = 0;
                                        }
                                        if (v175) {
                                          goto LABEL_364;
                                        }
                                        if (v149)
                                        {
                                          if (v150 == 84)
                                          {
                                            uint64_t v176 = *((void *)v149 - 4);
                                            if (v176)
                                            {
                                              if (!*(unsigned char *)(v176 + 16)
                                                && *(void *)(v176 + 24) == *((void *)v149 + 9)
                                                && *(_DWORD *)(v176 + 36) == 125
                                                && (llvm::DominatorTree::dominates(v109, v149, (const llvm::Instruction *)v108) & 1) != 0)
                                              {
                                                int v182 = 0;
                                                goto LABEL_386;
                                              }
                                            }
                                          }
                                        }
                                      }
                                      else if (v150 == 30 && v149 != 0)
                                      {
LABEL_364:
                                        uint64_t v177 = *((void *)v149 + 4 * v68 - 8);
                                        uint64_t v412 = *((void *)v149 + 5);
                                        uint64_t v413 = v177;
                                        if (llvm::BasicBlockEdge::isSingleEdge((llvm::BasicBlockEdge *)&v412)) {
                                          llvm::DominatorTree::dominates(v109, (const llvm::BasicBlockEdge *)&v412, v108[5]);
                                        }
                                      }
LABEL_366:
                                      unsigned int v148 = v421;
                                    }
                                    while (v421);
                                  }
LABEL_376:
                                  uint64_t v130 = *(void *)(v130 + 8);
                                  if (!v130) {
                                    goto LABEL_385;
                                  }
                                }
                                if (v137 >= 0x40) {
                                  v137 *= 2;
                                }
                                else {
                                  unsigned int v137 = 128;
                                }
LABEL_383:
                                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v417, v137);
                                unsigned int v137 = v418;
                                uint64_t v132 = (char *)v417[1];
                                goto LABEL_257;
                              }
LABEL_385:
                              int v182 = 1;
LABEL_386:
                              if (v417[1] != v417[0]) {
                                free(v417[1]);
                              }
                              if (v420 != &v422) {
                                free(v420);
                              }
                              if (!v182) {
                                return 1;
                              }
                            }
                          }
                          else
                          {
                            if (v126) {
                              BOOL v127 = a4 == (void)a1;
                            }
                            else {
                              BOOL v127 = 0;
                            }
                            if (v127)
                            {
                              a4 = *(void *)(a2 - 64);
                              __int16 v128 = *(_WORD *)(a2 + 18);
                              uint64_t v129 = v128 & 0x3F;
                              switch(v128 & 0x3F)
                              {
                                case 2:
                                  uint64_t v129 = 4;
                                  goto LABEL_241;
                                case 3:
                                  uint64_t v129 = 5;
                                  goto LABEL_241;
                                case 4:
                                  uint64_t v129 = 2;
                                  goto LABEL_241;
                                case 5:
                                  uint64_t v129 = 3;
                                  goto LABEL_241;
                                case 0xA:
                                  uint64_t v129 = 12;
                                  goto LABEL_241;
                                case 0xB:
                                  uint64_t v129 = 13;
                                  goto LABEL_241;
                                case 0xC:
                                  uint64_t v129 = 10;
                                  goto LABEL_241;
                                case 0xD:
                                  uint64_t v129 = 11;
                                  goto LABEL_241;
                                case 0x10:
                                case 0x11:
                                case 0x12:
                                case 0x13:
                                case 0x14:
                                case 0x15:
                                case 0x16:
                                case 0x17:
                                case 0x18:
                                case 0x19:
                                case 0x1A:
                                case 0x1B:
                                case 0x1C:
                                case 0x1D:
                                case 0x1E:
                                case 0x1F:
                                  __break(1u);
                                  goto LABEL_924;
                                case 0x22:
                                  uint64_t v129 = 36;
                                  goto LABEL_241;
                                case 0x23:
                                  uint64_t v129 = 37;
                                  goto LABEL_241;
                                case 0x24:
                                  uint64_t v129 = 34;
                                  goto LABEL_241;
                                case 0x25:
                                  uint64_t v129 = 35;
                                  goto LABEL_241;
                                case 0x26:
                                  uint64_t v129 = 40;
                                  goto LABEL_241;
                                case 0x27:
                                  uint64_t v129 = 41;
                                  goto LABEL_241;
                                case 0x28:
                                  uint64_t v129 = 38;
                                  goto LABEL_241;
                                case 0x29:
                                  uint64_t v129 = 39;
                                  goto LABEL_241;
                                default:
                                  goto LABEL_241;
                              }
                            }
                          }
                        }
                        ++v115;
                        uint64_t v114 = (void **)v114[1];
                        a4 = v411;
                        if (!v114) {
                          break;
                        }
                      }
                      int v110 = *((unsigned __int8 *)a1 + 16);
                      a2 = v408;
                      uint64_t v68 = v405;
                    }
                  }
                  if (*(unsigned char *)(*(void *)a1 + 8) != 15) {
                    goto LABEL_452;
                  }
                  if (v110 > 75)
                  {
                    if (v110 == 76)
                    {
                      unint64_t v201 = sub_1CB83544C(*(void *)a4, **((void **)a1 - 4));
                      if (v201 <= sub_1CB83544C(*(void *)a4, *(void *)a1)) {
                        goto LABEL_474;
                      }
                      int v110 = *((unsigned __int8 *)a1 + 16);
LABEL_452:
                      if (v110 != 75) {
                        goto LABEL_454;
                      }
                      unint64_t v202 = sub_1CB83544C(*(void *)a4, **((void **)a1 - 4));
                      if (v202 > sub_1CB83544C(*(void *)a4, *(void *)a1)) {
                        goto LABEL_454;
                      }
LABEL_474:
                      uint64_t v218 = *((void *)a1 - 4);
                      return sub_1CC1620B8(v218, v68, a4);
                    }
                    if (v110 != 77) {
                      goto LABEL_452;
                    }
                  }
                  else
                  {
                    if (v110 != 5)
                    {
                      if (v110 == 62)
                      {
                        int v113 = *(void **)(*((void *)a1 + 5) + 56);
                        goto LABEL_495;
                      }
                      goto LABEL_452;
                    }
                    int v200 = *((unsigned __int16 *)a1 + 9);
                    if (v200 == 34)
                    {
                      int v113 = 0;
LABEL_495:
                      if ((*((unsigned char *)a1 + 17) & 2) != 0)
                      {
                        int v227 = *((_DWORD *)a1 + 5);
                        if ((v227 & 0x40000000) != 0) {
                          unsigned int v228 = (uint64_t **)*((void *)a1 - 1);
                        }
                        else {
                          unsigned int v228 = (uint64_t **)((char *)a1 - 32 * (v227 & 0x7FFFFFF));
                        }
                        uint64_t v229 = **v228;
                        unsigned int v230 = *(_DWORD *)(v229 + 8);
                        if ((v230 & 0xFE) == 0x12) {
                          unsigned int v230 = *(_DWORD *)(**(void **)(v229 + 16) + 8);
                        }
                        if (v113)
                        {
                          uint64_t v231 = v113[14];
                          if (v231)
                          {
                            uint64_t v4 = 0;
                            if ((*(unsigned char *)(v231 + 17) & 1) != 0 || v230 > 0xFF) {
                              return v4;
                            }
LABEL_554:
                            if ((v227 & 0x40000000) != 0) {
                              unint64_t v253 = (uint64_t *)*((void *)a1 - 1);
                            }
                            else {
                              unint64_t v253 = (uint64_t *)((char *)a1 - 32 * (v227 & 0x7FFFFFF));
                            }
                            if ((sub_1CC1620B8(*v253, v68, a4) & 1) == 0)
                            {
                              uint64_t v254 = 24;
                              if (*((unsigned char *)a1 + 16) == 62) {
                                uint64_t v254 = 64;
                              }
                              unint64_t v255 = *(void *)((char *)a1 + v254);
                              int v256 = *((_DWORD *)a1 + 5);
                              if ((v256 & 0x40000000) != 0)
                              {
                                uint64_t v258 = (void ***)*((void *)a1 - 1);
                                uint64_t v257 = v256 & 0x7FFFFFF;
                              }
                              else
                              {
                                uint64_t v257 = v256 & 0x7FFFFFF;
                                uint64_t v258 = (void ***)((char *)a1 - 32 * v257);
                              }
                              int v267 = (void *)(v255 | 4);
                              unint64_t v268 = (llvm::Constant **)(v258 + 4);
                              v417[0] = v258 + 4;
                              v417[1] = v267;
                              if (v257 != 1)
                              {
                                unint64_t v269 = &v258[4 * v257];
                                while (1)
                                {
                                  uint64_t v270 = (llvm::Type *)((unint64_t)v417[1] & 0xFFFFFFFFFFFFFFF8);
                                  if (((uint64_t)v417[1] & 4) != 0 || !v270)
                                  {
                                    unint64_t v274 = *(llvm::DataLayout **)a4;
                                    if (((uint64_t)v417[1] & 4) == 0 || !v270)
                                    {
                                      unint64_t v275 = *v268;
                                      int v276 = *((unsigned __int8 *)*v268 + 16);
                                      if (v275) {
                                        BOOL v277 = v276 == 16;
                                      }
                                      else {
                                        BOOL v277 = 0;
                                      }
                                      if (!v277) {
                                        unint64_t v275 = (llvm::Constant *)llvm::Constant::getAggregateElement(v275, 0);
                                      }
                                      unint64_t v280 = (unsigned int *)*((void *)v275 + 3);
                                      unint64_t v278 = (unsigned int *)((char *)v275 + 24);
                                      uint64_t v279 = v280;
                                      if (v278[2] < 0x41) {
                                        uint64_t v279 = v278;
                                      }
                                      uint64_t v270 = *(llvm::Type **)(*((void *)v270 + 2) + 8 * *v279);
                                    }
                                    unint64_t v281 = (unint64_t)(sub_1CB83544C((uint64_t)v274, (uint64_t)v270) + 7) >> 3;
                                    char Alignment = llvm::DataLayout::getAlignment(v274, v270, 1);
                                    if ((v281 + ~(-1 << Alignment)) >> Alignment)
                                    {
                                      uint64_t v283 = *(void *)v417[0];
                                      if (*(void *)v417[0]) {
                                        BOOL v284 = *(unsigned char *)(*(void *)v417[0] + 16) == 16;
                                      }
                                      else {
                                        BOOL v284 = 0;
                                      }
                                      if (v284)
                                      {
                                        uint64_t v285 = *(unsigned int *)(v283 + 32);
                                        if (v285 > 0x40)
                                        {
                                          int v287 = 0;
                                          int64_t v288 = (unint64_t)(v285 + 63) >> 6;
                                          do
                                          {
                                            BOOL v155 = v288-- < 1;
                                            if (v155) {
                                              break;
                                            }
                                            unint64_t v289 = *(void *)(*(void *)(v283 + 24) + 8 * v288);
                                            v287 += __clz(v289);
                                          }
                                          while (!v289);
                                          int v290 = v285 | 0xFFFFFFC0;
                                          if ((v285 & 0x3F) == 0) {
                                            int v290 = 0;
                                          }
                                          if (v287 + v290 != v285) {
                                            return 1;
                                          }
                                        }
                                        else if (*(void *)(v283 + 24))
                                        {
                                          return 1;
                                        }
                                      }
                                      else if (v68 <= 5)
                                      {
                                        char v286 = sub_1CC1620B8(v283, (v68 + 1), a4);
                                        LODWORD(v68) = v68 + 1;
                                        if (v286) {
                                          return 1;
                                        }
                                      }
                                      else
                                      {
                                        LODWORD(v68) = v68 + 1;
                                      }
                                    }
                                  }
                                  else
                                  {
                                    unint64_t v271 = *v268;
                                    uint64_t v272 = (unsigned int *)((char *)*v268 + 24);
                                    if (*((_DWORD *)v271 + 8) >= 0x41u) {
                                      uint64_t v272 = *(unsigned int **)v272;
                                    }
                                    uint64_t v273 = *v272;
                                    if (*((void *)llvm::DataLayout::getStructLayout(*(llvm::DataLayout **)a4, (llvm::StructType *)((unint64_t)v417[1] & 0xFFFFFFFFFFFFFFF8))+ v273+ 2))return 1; {
                                  }
                                    }
                                  sub_1CB8460E4((uint64_t)v417);
                                  unint64_t v268 = (llvm::Constant **)v417[0];
                                  if (v417[0] == v269) {
                                    return 0;
                                  }
                                }
                              }
                              return 0;
                            }
                            return 1;
                          }
                        }
                        if (v230 <= 0xFF) {
                          goto LABEL_554;
                        }
                      }
                      return 0;
                    }
                    if (v200 != 49)
                    {
LABEL_454:
                      unint64_t v203 = *(llvm::Type **)a1;
                      unsigned int v204 = *(_DWORD *)(*(void *)a1 + 8);
                      if ((v204 & 0xFE) == 0x12)
                      {
                        uint64_t v205 = (llvm::Type **)*((void *)v203 + 2);
                        unint64_t v203 = *v205;
                        unsigned int v204 = *((_DWORD *)*v205 + 2);
                      }
                      if ((v204 & 0xFE) == 0x12)
                      {
                        v291 = (llvm::Type *)**((void **)v203 + 2);
                        unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v291);
                        if (PrimitiveSizeInBits) {
                          goto LABEL_469;
                        }
                        unsigned int v204 = *((_DWORD *)v291 + 2);
                      }
                      else
                      {
                        unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v203);
                        if (PrimitiveSizeInBits) {
                          goto LABEL_469;
                        }
                      }
                      if (v204 < 0x100) {
                        goto LABEL_467;
                      }
                      unsigned int v207 = v204 >> 8;
                      uint64_t v208 = *(unsigned int *)(*(void *)a4 + 240);
                      uint64_t v209 = *(void *)(*(void *)a4 + 232);
                      if (v208)
                      {
                        uint64_t v209 = *(void *)(*(void *)a4 + 232);
                        unint64_t v210 = *(unsigned int *)(*(void *)a4 + 240);
                        do
                        {
                          unint64_t v211 = v210 >> 1;
                          uint64_t v212 = v209 + 16 * (v210 >> 1);
                          unsigned int v213 = *(_DWORD *)(v212 + 8);
                          uint64_t v214 = v212 + 16;
                          v210 += ~(v210 >> 1);
                          if (v213 < v207) {
                            uint64_t v209 = v214;
                          }
                          else {
                            unint64_t v210 = v211;
                          }
                        }
                        while (v210);
                      }
                      if (v209 == *(void *)(*(void *)a4 + 232) + 16 * v208 || *(_DWORD *)(v209 + 8) != v207) {
LABEL_467:
                      }
                        uint64_t v209 = *(void *)(*(void *)a4 + 232);
                      unsigned int PrimitiveSizeInBits = *(_DWORD *)(v209 + 4);
LABEL_469:
                      unsigned int v215 = *((unsigned __int8 *)a1 + 16);
                      if (v215 == 5)
                      {
                        int v219 = *((unsigned __int16 *)a1 + 9);
                        if (v219 == 29)
                        {
                          uint64_t v220 = (uint64_t *)((char *)a1 - 32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF));
                          uint64_t v216 = *v220;
                          if (*v220)
                          {
                            BOOL v217 = (void **)v220[4];
                            if (v217)
                            {
LABEL_478:
                              if (sub_1CC17FE50(v216, a2, v68, a4)) {
                                return 1;
                              }
                              unsigned int v221 = v217;
                              return sub_1CC17FE50(v221, a2, v68, a4);
                            }
                          }
                          goto LABEL_530;
                        }
                        if (v219 != 25)
                        {
                          if ((v219 & 0xFFFE) != 0x1A
                            || (uint64_t v234 = (uint64_t **)((char *)a1 - 32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)),
                                (uint64_t v235 = *v234) == 0)
                            || (uint8x8_t v236 = v234[4]) == 0)
                          {
                            unsigned int v241 = v219 - 19;
                            if (v241 > 8 || ((0x183u >> v241) & 1) == 0) {
                              goto LABEL_530;
                            }
                            char v266 = 1;
LABEL_580:
                            if ((*((unsigned char *)a1 + 17) & 2) != 0)
                            {
                              if (v266)
                              {
                                if (v215 == 45) {
                                  goto LABEL_663;
                                }
                                if (v215 == 41)
                                {
LABEL_666:
                                  uint64_t v244 = (uint64_t *)*((void *)a1 - 8);
                                  if (!v244) {
                                    goto LABEL_786;
                                  }
                                  unsigned int v245 = (uint64_t *)*((void *)a1 - 4);
                                  if (!v245) {
                                    goto LABEL_786;
                                  }
                                  goto LABEL_534;
                                }
                                if (v215 != 5) {
                                  goto LABEL_786;
                                }
                                if (*((unsigned __int16 *)a1 + 9) - 19 <= 1)
                                {
                                  unsigned int v221 = (void **)*((void *)a1 - 4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF));
                                  if (v221) {
                                    return sub_1CC17FE50(v221, a2, v68, a4);
                                  }
                                }
LABEL_530:
                                int v242 = *((unsigned __int16 *)a1 + 9);
                                if (v242 == 17)
                                {
                                  unint64_t v249 = (uint64_t *)((char *)a1 - 32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF));
                                  uint64_t v250 = *v249;
                                  if (!*v249) {
                                    goto LABEL_786;
                                  }
                                  uint64_t v251 = v249[4];
                                  if (!v251) {
                                    goto LABEL_786;
                                  }
                                  goto LABEL_547;
                                }
                                if (v242 != 13) {
                                  goto LABEL_786;
                                }
                                int v243 = (uint64_t **)((char *)a1 - 32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF));
                                uint64_t v244 = *v243;
                                if (!*v243) {
                                  goto LABEL_786;
                                }
                                unsigned int v245 = v243[4];
                                if (!v245) {
                                  goto LABEL_786;
                                }
LABEL_534:
                                sub_1CC160A60(v244, a2, v68, a4, (uint64_t)v417);
                                sub_1CC160A60(v245, a2, v68, a4, (uint64_t)&v420);
                                if (LODWORD(v417[1]) >= 0x41) {
                                  unint64_t v246 = (void **)((char *)v417[0] + 8 * ((LODWORD(v417[1]) - 1) >> 6));
                                }
                                else {
                                  unint64_t v246 = v417;
                                }
                                if (((unint64_t)*v246 >> (LOBYTE(v417[1]) - 1)))
                                {
                                  uint64_t v247 = v421 >= 0x41
                                       ? (char *)v420 + 8 * ((v421 - 1) >> 6)
                                       : (char *)&v420;
                                  if (((*(void *)v247 >> (v421 - 1)) & 1) != 0
                                    && ((sub_1CC17FE50(v244, a2, v68, a4) & 1) != 0
                                     || (sub_1CC17FE50(v245, a2, v68, a4) & 1) != 0))
                                  {
                                    LOBYTE(v248) = 0;
                                    goto LABEL_730;
                                  }
                                }
                                unint64_t v261 = &v418;
                                unsigned int v262 = DWORD2(v418) - 1;
                                if (DWORD2(v418) >= 0x41) {
                                  unint64_t v261 = (long long *)(v418 + 8 * (v262 >> 6));
                                }
                                if (((*(void *)v261 >> v262) & 1) == 0) {
                                  goto LABEL_721;
                                }
                                uint64_t v263 = &v422;
                                unsigned int v264 = v423 - 1;
                                if (v423 >= 0x41) {
                                  uint64_t v263 = (unint64_t *)(v422 + 8 * (v264 >> 6));
                                }
                                if (((*v263 >> v264) & 1) == 0)
                                {
LABEL_721:
                                  unsigned int v336 = LODWORD(v417[1]) - 1;
                                  long long v337 = v417;
                                  if (LODWORD(v417[1]) >= 0x41) {
                                    long long v337 = (void **)((char *)v417[0] + 8 * (v336 >> 6));
                                  }
                                  if ((((unint64_t)*v337 >> v336) & 1) == 0
                                    || (LOBYTE(v248) = 0, (sub_1CC161328((unsigned __int8 *)v245, 0, v68, a4) & 1) == 0))
                                  {
                                    unsigned int v338 = v421 - 1;
                                    uint64_t v339 = &v420;
                                    if (v421 >= 0x41) {
                                      uint64_t v339 = (void **)((char *)v420 + 8 * (v338 >> 6));
                                    }
                                    if ((((unint64_t)*v339 >> v338) & 1) == 0
                                      || (LOBYTE(v248) = 0,
                                          (sub_1CC161328((unsigned __int8 *)v244, 0, v68, a4) & 1) == 0))
                                    {
                                      LOBYTE(v248) = 1;
                                    }
                                  }
LABEL_730:
                                  if (v423 >= 0x41 && v422) {
                                    MEMORY[0x1D25D9CB0](v422, 0x1000C8000313F17);
                                  }
                                  if (v421 >= 0x41 && v420) {
                                    MEMORY[0x1D25D9CB0](v420, 0x1000C8000313F17);
                                  }
                                  if (DWORD2(v418) >= 0x41 && (void)v418) {
                                    MEMORY[0x1D25D9CB0](v418, 0x1000C8000313F17);
                                  }
                                  if (LODWORD(v417[1]) >= 0x41 && v417[0]) {
                                    MEMORY[0x1D25D9CB0](v417[0], 0x1000C8000313F17);
                                  }
                                  if ((v248 & 1) == 0) {
                                    return 1;
                                  }
                                  goto LABEL_786;
                                }
                                LODWORD(v413) = PrimitiveSizeInBits;
                                if (PrimitiveSizeInBits > 0x40) {
                                  llvm::APInt::initSlowCase((llvm::APInt *)&v412);
                                }
                                if (PrimitiveSizeInBits) {
                                  unint64_t v265 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
                                }
                                else {
                                  unint64_t v265 = 0;
                                }
                                uint64_t v412 = v265 & ~(1 << (PrimitiveSizeInBits - 1));
                                if (DWORD2(v418) > 0x40)
                                {
                                  unint64_t v307 = ((unint64_t)DWORD2(v418) + 63) >> 6;
                                  uint64_t v308 = (uint64_t *)v418;
                                  unint64_t v309 = (uint64_t *)v412;
                                  while (1)
                                  {
                                    uint64_t v311 = *v308++;
                                    uint64_t v310 = v311;
                                    uint64_t v312 = *v309++;
                                    if ((v312 & v310) != 0) {
                                      break;
                                    }
                                    if (!--v307) {
                                      goto LABEL_684;
                                    }
                                  }
                                }
                                else if ((v412 & (unint64_t)v418) == 0)
                                {
LABEL_684:
                                  if (v423 > 0x40)
                                  {
                                    unsigned int v328 = (uint64_t *)v422;
                                    int v329 = (uint64_t *)v412;
                                    unint64_t v330 = (((unint64_t)v423 + 63) >> 6) - 1;
                                    do
                                    {
                                      uint64_t v332 = *v328++;
                                      uint64_t v331 = v332;
                                      uint64_t v333 = *v329++;
                                      uint64_t v334 = v333 & v331;
                                      BOOL v313 = (v333 & v331) != 0;
                                      if (v334) {
                                        BOOL v335 = 1;
                                      }
                                      else {
                                        BOOL v335 = v330 == 0;
                                      }
                                      --v330;
                                    }
                                    while (!v335);
                                  }
                                  else
                                  {
                                    BOOL v313 = (v412 & v422) != 0;
                                  }
                                  int v248 = !v313;
LABEL_720:
                                  if (!v248) {
                                    goto LABEL_730;
                                  }
                                  goto LABEL_721;
                                }
                                int v248 = 0;
                                goto LABEL_720;
                              }
                              if (v215 - 47 <= 1)
                              {
                                int v300 = *((_DWORD *)a1 + 5);
                                uint64_t v301 = (v300 & 0x40000000) != 0
                                     ? (llvm::Constant *)*((void *)a1 - 1)
                                     : (llvm::Constant *)((char *)a1 - 32 * (v300 & 0x7FFFFFF));
                                unsigned int v221 = *(void ***)v301;
                                if (*(void *)v301) {
                                  return sub_1CC17FE50(v221, a2, v68, a4);
                                }
                              }
                            }
                            if (v215 != 5)
                            {
                              if (v215 == 45) {
                                goto LABEL_663;
                              }
                              if (v215 != 41) {
                                goto LABEL_786;
                              }
                              goto LABEL_666;
                            }
                            goto LABEL_530;
                          }
LABEL_523:
                          if ((*((unsigned char *)a1 + 17) & 2) == 0)
                          {
                            sub_1CC160A60(v235, a2, v68, a4, (uint64_t)v417);
                            unint64_t v237 = &v418;
                            unsigned int v238 = DWORD2(v418);
                            unsigned int v239 = DWORD2(v418) - 1;
                            if (DWORD2(v418) >= 0x41) {
                              unint64_t v237 = (long long *)(v418 + 8 * (v239 >> 6));
                            }
                            if ((*(void *)v237 >> v239)) {
                              goto LABEL_527;
                            }
                            if (*((unsigned char *)v236 + 16) != 16) {
                              goto LABEL_781;
                            }
                            unint64_t v304 = PrimitiveSizeInBits - 1;
                            uint64_t v305 = *((unsigned int *)v236 + 8);
                            if (v305 >= 0x41)
                            {
                              int v348 = 0;
                              int64_t v349 = (unint64_t)(v305 + 63) >> 6;
                              do
                              {
                                BOOL v155 = v349-- < 1;
                                if (v155) {
                                  break;
                                }
                                unint64_t v350 = *(void *)(v236[3] + 8 * v349);
                                v348 += __clz(v350);
                              }
                              while (!v350);
                              int v351 = v305 | 0xFFFFFFC0;
                              if ((v305 & 0x3F) == 0) {
                                int v351 = 0;
                              }
                              if ((v305 - v348 - v351) > 0x40) {
                                goto LABEL_765;
                              }
                              unint64_t v306 = *(void *)v236[3];
                            }
                            else
                            {
                              unint64_t v306 = v236[3];
                            }
                            if (v306 <= v304) {
                              unint64_t v304 = v306;
                            }
LABEL_765:
                            if (DWORD2(v418) > 0x40)
                            {
                              int v353 = 0;
                              int64_t v354 = ((unint64_t)DWORD2(v418) + 63) >> 6;
                              do
                              {
                                BOOL v155 = v354-- < 1;
                                if (v155) {
                                  break;
                                }
                                unint64_t v355 = *(void *)(v418 + 8 * v354);
                                v353 += __clz(v355);
                              }
                              while (!v355);
                              unsigned int v356 = DWORD2(v418) | 0xFFFFFFC0;
                              if ((BYTE8(v418) & 0x3F) == 0) {
                                unsigned int v356 = 0;
                              }
                              unsigned int v352 = v353 + v356;
                            }
                            else
                            {
                              unsigned int v352 = DWORD2(v418) + __clz(v418) - 64;
                            }
                            if (PrimitiveSizeInBits - v304 > v352)
                            {
LABEL_527:
                              char v240 = 0;
LABEL_782:
                              uint64_t v4 = 1;
LABEL_783:
                              if (v238 >= 0x41 && (void)v418) {
                                MEMORY[0x1D25D9CB0](v418, 0x1000C8000313F17);
                              }
                              if (LODWORD(v417[1]) >= 0x41 && v417[0]) {
                                MEMORY[0x1D25D9CB0](v417[0], 0x1000C8000313F17);
                              }
                              if ((v240 & 1) == 0) {
                                return v4;
                              }
                              goto LABEL_786;
                            }
                            if (LODWORD(v417[1]) > 0x40) {
                              unsigned int v357 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v417);
                            }
                            else {
                              unsigned int v357 = __clz(__rbit64(~(uint64_t)v417[0]));
                            }
                            if (v304 <= v357)
                            {
                              uint64_t v4 = sub_1CC17FE50(v235, a2, v68, a4);
                              char v240 = 0;
                              unsigned int v238 = DWORD2(v418);
                              goto LABEL_783;
                            }
LABEL_781:
                            char v240 = 1;
                            goto LABEL_782;
                          }
                          uint64_t v218 = (uint64_t)v235;
                          return sub_1CC1620B8(v218, v68, a4);
                        }
                        unint64_t v225 = (uint64_t *)((char *)a1 - 32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF));
                        uint64_t v226 = *v225;
                        if (!*v225 || !v225[4]) {
                          goto LABEL_530;
                        }
                      }
                      else
                      {
                        if (v215 == 57)
                        {
                          uint64_t v216 = *((void *)a1 - 8);
                          if (!v216) {
                            goto LABEL_786;
                          }
                          BOOL v217 = (void **)*((void *)a1 - 4);
                          if (!v217) {
                            goto LABEL_786;
                          }
                          goto LABEL_478;
                        }
                        if (v215 - 67 <= 1) {
                          goto LABEL_482;
                        }
                        if (v215 != 53)
                        {
                          if (v215 < 0x1C) {
                            goto LABEL_786;
                          }
                          if ((v215 & 0xFE) != 0x36
                            || ((int v259 = *((_DWORD *)a1 + 5), (v259 & 0x40000000) != 0)
                              ? (unsigned int v260 = (uint64_t **)*((void *)a1 - 1))
                              : (unsigned int v260 = (uint64_t **)((char *)a1 - 32 * (v259 & 0x7FFFFFF))),
                                (uint64_t v235 = *v260) == 0 || (v236 = v260[4]) == 0))
                          {
                            if (*((unsigned __int8 *)a1 + 16) <= 0x52u)
                            {
                              char v266 = 0;
                              if (*((unsigned __int8 *)a1 + 16) > 0x35u)
                              {
                                if (v215 - 54 >= 2) {
                                  goto LABEL_786;
                                }
                              }
                              else if (v215 - 47 >= 2)
                              {
                                if (v215 != 41)
                                {
                                  if (v215 != 45) {
                                    goto LABEL_786;
                                  }
LABEL_663:
                                  uint64_t v250 = *((void *)a1 - 8);
                                  if (!v250) {
                                    goto LABEL_786;
                                  }
                                  uint64_t v251 = *((void *)a1 - 4);
                                  if (!v251) {
                                    goto LABEL_786;
                                  }
LABEL_547:
                                  if (!*(unsigned char *)(a4 + 40)
                                    || (*((unsigned char *)a1 + 17) & 6) == 0
                                    || !sub_1CC17FE50(v250, a2, v68, a4))
                                  {
                                    goto LABEL_786;
                                  }
                                  uint64_t v252 = v251;
LABEL_551:
                                  if (sub_1CC17FE50(v252, a2, v68, a4)) {
                                    return 1;
                                  }
LABEL_786:
                                  LODWORD(v417[1]) = PrimitiveSizeInBits;
                                  if (PrimitiveSizeInBits > 0x40) {
                                    llvm::APInt::initSlowCase((llvm::APInt *)v417);
                                  }
                                  DWORD2(v418) = PrimitiveSizeInBits;
                                  v417[0] = 0;
                                  *(void *)&long long v418 = 0;
                                  sub_1CC15FDD8(a1, a2, v417, v68, a4);
                                  if (DWORD2(v418) < 0x41)
                                  {
                                    uint64_t v4 = v418 != 0;
                                    goto LABEL_798;
                                  }
                                  int v358 = 0;
                                  int64_t v359 = ((unint64_t)DWORD2(v418) + 63) >> 6;
                                  do
                                  {
                                    BOOL v155 = v359-- < 1;
                                    if (v155) {
                                      break;
                                    }
                                    unint64_t v360 = *(void *)(v418 + 8 * v359);
                                    v358 += __clz(v360);
                                  }
                                  while (!v360);
                                  unsigned int v361 = DWORD2(v418) | 0xFFFFFFC0;
                                  if ((BYTE8(v418) & 0x3F) == 0) {
                                    unsigned int v361 = 0;
                                  }
                                  if (DWORD2(v418) - v358 - v361 > 0x40)
                                  {
                                    uint64_t v4 = 1;
                                    if (!(void)v418) {
                                      goto LABEL_798;
                                    }
                                  }
                                  else
                                  {
                                    uint64_t v4 = *(void *)v418 != 0;
                                  }
                                  MEMORY[0x1D25D9CB0](v418, 0x1000C8000313F17);
LABEL_798:
                                  if (LODWORD(v417[1]) < 0x41) {
                                    return v4;
                                  }
LABEL_900:
                                  if (v417[0]) {
                                    MEMORY[0x1D25D9CB0](v417[0], 0x1000C8000313F17);
                                  }
                                  return v4;
                                }
                                goto LABEL_666;
                              }
                              goto LABEL_580;
                            }
                            if (*((unsigned __int8 *)a1 + 16) <= 0x58u)
                            {
                              if (v215 != 83)
                              {
                                if (v215 != 85 || !sub_1CC17FE50(*((void *)a1 - 8), a2, v68, a4)) {
                                  goto LABEL_786;
                                }
                                uint64_t v252 = *((void *)a1 - 4);
                                goto LABEL_551;
                              }
                              if (*(unsigned char *)(a4 + 40))
                              {
                                v420 = 0;
                                uint64_t v412 = 0;
                                uint64_t v415 = 0;
                                v416 = 0;
                                uint64_t v414 = 0;
                                if (llvm::matchSimpleRecurrence((uint64_t)a1, &v420, &v412, &v416))
                                {
                                  v417[0] = &v415;
                                  v417[1] = 0;
                                  if (sub_1CBF528D8((uint64_t)v417, (unsigned __int8 *)v412))
                                  {
                                    uint64_t v340 = *(unsigned int *)(v415 + 8);
                                    if (v340 <= 0x40)
                                    {
                                      if (!*(void *)v415) {
                                        goto LABEL_862;
                                      }
LABEL_828:
                                      unsigned int v374 = *((unsigned __int8 *)v420 + 16);
                                      if (v374 > 0x35)
                                      {
                                        if (v374 - 54 < 2 && (*((unsigned char *)v420 + 17) & 2) != 0) {
                                          return 1;
                                        }
                                      }
                                      else if (v374 == 41)
                                      {
                                        if ((*((unsigned char *)v420 + 17) & 2) != 0) {
                                          return 1;
                                        }
                                        if ((*((unsigned char *)v420 + 17) & 4) != 0)
                                        {
                                          v417[0] = &v414;
                                          v417[1] = 0;
                                          if (sub_1CBF528D8((uint64_t)v417, v416))
                                          {
                                            v375 = (void *)v415;
                                            unsigned int v376 = *(_DWORD *)(v415 + 8);
                                            unsigned int v377 = v376 - 1;
                                            if (v376 >= 0x41) {
                                              v375 = (void *)(*(void *)v415 + 8 * (v377 >> 6));
                                            }
                                            uint64_t v378 = *v375 & (1 << v377);
                                            uint64_t v379 = (void *)v414;
                                            unsigned int v380 = *(_DWORD *)(v414 + 8);
                                            unsigned int v381 = v380 - 1;
                                            if (v380 >= 0x41) {
                                              uint64_t v379 = (void *)(*(void *)v414 + 8 * (v381 >> 6));
                                            }
                                            if (((v378 == 0) ^ (*v379 >> v381))) {
                                              return 1;
                                            }
                                          }
                                        }
                                      }
                                      else if (v374 == 45)
                                      {
                                        if ((*((unsigned char *)v420 + 17) & 6) != 0)
                                        {
                                          v417[0] = &v414;
                                          v417[1] = 0;
                                          if (sub_1CBF528D8((uint64_t)v417, v416))
                                          {
                                            uint64_t v382 = *(unsigned int *)(v414 + 8);
                                            if (v382 > 0x40)
                                            {
                                              int v383 = 0;
                                              int64_t v384 = (unint64_t)(v382 + 63) >> 6;
                                              do
                                              {
                                                BOOL v155 = v384-- < 1;
                                                if (v155) {
                                                  break;
                                                }
                                                unint64_t v385 = *(void *)(*(void *)v414 + 8 * v384);
                                                v383 += __clz(v385);
                                              }
                                              while (!v385);
                                              int v386 = v382 | 0xFFFFFFC0;
                                              if ((v382 & 0x3F) == 0) {
                                                int v386 = 0;
                                              }
                                              if (v383 + v386 != v382) {
                                                return 1;
                                              }
                                            }
                                            else if (*(void *)v414)
                                            {
                                              return 1;
                                            }
                                          }
                                        }
                                      }
                                      else if (v374 == 53 {
                                             && ((*((unsigned char *)v420 + 17) & 2) != 0 || (*((unsigned char *)v420 + 17) & 4) != 0))
                                      }
                                      {
                                        return 1;
                                      }
                                      goto LABEL_862;
                                    }
                                    int v370 = 0;
                                    int64_t v371 = (unint64_t)(v340 + 63) >> 6;
                                    do
                                    {
                                      BOOL v155 = v371-- < 1;
                                      if (v155) {
                                        break;
                                      }
                                      unint64_t v372 = *(void *)(*(void *)v415 + 8 * v371);
                                      v370 += __clz(v372);
                                    }
                                    while (!v372);
                                    int v373 = v340 | 0xFFFFFFC0;
                                    if ((v340 & 0x3F) == 0) {
                                      int v373 = 0;
                                    }
                                    if (v370 + v373 != v340) {
                                      goto LABEL_828;
                                    }
                                  }
                                }
                              }
LABEL_862:
                              long long v387 = *(_OWORD *)(a4 + 16);
                              *(_OWORD *)v417 = *(_OWORD *)a4;
                              long long v418 = v387;
                              v419[0] = *(_OWORD *)(a4 + 32);
                              if (v68 <= 5) {
                                uint64_t v388 = 5;
                              }
                              else {
                                uint64_t v388 = v68;
                              }
                              int v389 = *((_DWORD *)a1 + 5);
                              if ((v389 & 0x40000000) != 0)
                              {
                                int v391 = (char *)*((void *)a1 - 1);
                                uint64_t v390 = v389 & 0x7FFFFFF;
                              }
                              else
                              {
                                uint64_t v390 = v389 & 0x7FFFFFF;
                                int v391 = (char *)a1 - 32 * v390;
                              }
                              if (v390)
                              {
                                uint64_t v392 = 32 * v390;
                                for (uint64_t i = v391; ; i += 32)
                                {
                                  unint64_t v394 = *(void ****)v391;
                                  if (*(llvm::Constant **)v391 != a1)
                                  {
                                    int v395 = *((_DWORD *)a1 + 5);
                                    unsigned int v396 = (v395 & 0x40000000) != 0
                                         ? (char *)*((void *)a1 - 1)
                                         : (char *)a1 - 32 * (v395 & 0x7FFFFFF);
                                    int8x8_t v397 = *(void **)&v396[32 * *((unsigned int *)a1 + 15)
                                                           + 8 * ((unint64_t)(i - v396) >> 5)];
                                    unsigned int v398 = (void *)v397[5];
                                    if (v398 == v397 + 5)
                                    {
                                      unint64_t v399 = 0;
                                    }
                                    else
                                    {
                                      if (v398) {
                                        unint64_t v399 = v398 - 3;
                                      }
                                      else {
                                        unint64_t v399 = 0;
                                      }
                                      if (*((unsigned __int8 *)v399 + 16) - 29 >= 0xB) {
                                        unint64_t v399 = 0;
                                      }
                                    }
                                    *(void *)&long long v418 = v399;
                                    if (!sub_1CC17FE50(v394, a2, v388, v417)) {
                                      break;
                                    }
                                  }
                                  v391 += 32;
                                  v392 -= 32;
                                  if (!v392) {
                                    return 1;
                                  }
                                }
                                return 0;
                              }
                              return 1;
                            }
                            if (v215 != 89)
                            {
                              if (v215 == 95)
                              {
                                uint64_t v314 = (uint64_t ***)*((void *)a1 - 4);
                                if (sub_1CC1620B8((uint64_t)v314, v68, a4))
                                {
                                  uint64_t v4 = 1;
                                  if (sub_1CC16A22C(v314, *(void *)(a4 + 8), *(void *)(a4 + 16), *(void *)(a4 + 24), v68, 1))return v4; {
                                }
                                  }
                              }
                              goto LABEL_786;
                            }
                            uint64_t v341 = (uint64_t *)*((void *)a1 - 8);
                            if (*(unsigned char *)(*((void *)a1 - 4) + 16) == 16) {
                              uint64_t v342 = *((void *)a1 - 4);
                            }
                            else {
                              uint64_t v342 = 0;
                            }
                            uint64_t v343 = *v341;
                            if (!*v341 || *(unsigned char *)(v343 + 8) != 18) {
                              goto LABEL_786;
                            }
                            unint64_t v344 = *(unsigned int *)(v343 + 32);
                            LODWORD(v417[1]) = v344;
                            if (v344 > 0x40) {
                              llvm::APInt::initSlowCase((llvm::APInt *)v417);
                            }
                            if (v344) {
                              unsigned int v345 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v344);
                            }
                            else {
                              unsigned int v345 = 0;
                            }
                            v417[0] = v345;
                            if (!v342) {
                              goto LABEL_898;
                            }
                            uint64_t v346 = *(unsigned int *)(v342 + 32);
                            if (v346 >= 0x41)
                            {
                              int v366 = 0;
                              int64_t v367 = (unint64_t)(v346 + 63) >> 6;
                              do
                              {
                                BOOL v155 = v367-- < 1;
                                if (v155) {
                                  break;
                                }
                                unint64_t v368 = *(void *)(*(void *)(v342 + 24) + 8 * v367);
                                v366 += __clz(v368);
                              }
                              while (!v368);
                              int v369 = v346 | 0xFFFFFFC0;
                              if ((v346 & 0x3F) == 0) {
                                int v369 = 0;
                              }
                              if ((v346 - v366 - v369) >= 0x41) {
                                goto LABEL_898;
                              }
                              unint64_t v347 = **(void **)(v342 + 24);
                            }
                            else
                            {
                              unint64_t v347 = *(void *)(v342 + 24);
                            }
                            if (v347 < v344)
                            {
                              LODWORD(v421) = v344;
                              if (LODWORD(v417[1]) >= 0x41 && v417[0]) {
                                MEMORY[0x1D25D9CB0](v417[0], 0x1000C8000313F17);
                              }
                              v417[0] = (void *)(1 << v347);
                              LODWORD(v417[1]) = v344;
LABEL_899:
                              uint64_t v4 = sub_1CC17FE50(v341, v417, v68, a4);
                              if (v344 < 0x41) {
                                return v4;
                              }
                              goto LABEL_900;
                            }
LABEL_898:
                            LODWORD(v344) = v417[1];
                            goto LABEL_899;
                          }
                          goto LABEL_523;
                        }
                        uint64_t v226 = *((void *)a1 - 8);
                        if (!v226 || !*((void *)a1 - 4)) {
                          goto LABEL_786;
                        }
                      }
                      if (!*(unsigned char *)(a4 + 40) || (*((unsigned char *)a1 + 17) & 2) == 0)
                      {
                        LODWORD(v417[1]) = PrimitiveSizeInBits;
                        if (PrimitiveSizeInBits > 0x40) {
                          llvm::APInt::initSlowCase((llvm::APInt *)v417);
                        }
                        DWORD2(v418) = PrimitiveSizeInBits;
                        v417[0] = 0;
                        *(void *)&long long v418 = 0;
                        sub_1CC15FDD8(v226, a2, v417, v68, a4);
                        if (DWORD2(v418) >= 0x41) {
                          unint64_t v232 = (uint64_t *)v418;
                        }
                        else {
                          unint64_t v232 = (uint64_t *)&v418;
                        }
                        uint64_t v233 = *v232;
                        if (DWORD2(v418) >= 0x41 && (void)v418) {
                          MEMORY[0x1D25D9CB0]();
                        }
                        if (LODWORD(v417[1]) >= 0x41 && v417[0]) {
                          MEMORY[0x1D25D9CB0](v417[0], 0x1000C8000313F17);
                        }
                        if (v233) {
                          return 1;
                        }
                        goto LABEL_786;
                      }
                      uint64_t v218 = v226;
                      return sub_1CC1620B8(v218, v68, a4);
                    }
                  }
LABEL_482:
                  int v223 = *((_DWORD *)a1 + 5);
                  if ((v223 & 0x40000000) != 0) {
                    int64_t v224 = (uint64_t *)*((void *)a1 - 1);
                  }
                  else {
                    int64_t v224 = (uint64_t *)((char *)a1 - 32 * (v223 & 0x7FFFFFF));
                  }
                  uint64_t v218 = *v224;
                  return sub_1CC1620B8(v218, v68, a4);
                }
                uint64_t v403 = *(unsigned int *)(v103 + 8);
                if (v403)
                {
                  uint64_t v404 = v103 + 40;
                  int v402 = -1;
                  while (!*(void *)v404 || (*(unsigned char *)(*(void *)v404 + 17) & 0x40) == 0)
                  {
                    ++v402;
                    v404 += 8;
                    if (!--v403) {
                      goto LABEL_919;
                    }
                  }
                  goto LABEL_920;
                }
              }
LABEL_919:
              int v402 = 0;
              goto LABEL_920;
            }
            if (!*(unsigned char *)(a4 + 40)) {
              goto LABEL_194;
            }
            int v83 = *((_DWORD *)a1 + 5);
            if (*((void *)a1 + 6))
            {
              if ((v83 & 0x20000000) == 0)
              {
LABEL_159:
                unsigned int v70 = *((unsigned __int8 *)a1 + 16);
                goto LABEL_160;
              }
            }
            else if ((v83 & 0x20000000) == 0)
            {
              goto LABEL_194;
            }
            uint64_t v84 = **v69;
            v417[0] = a1;
            int v85 = *(_DWORD *)(v84 + 2496);
            if (v85)
            {
              uint64_t v86 = *(void *)(v84 + 2480);
              int v87 = v85 - 1;
              unsigned int v88 = v87 & ((a1 >> 4) ^ (a1 >> 9));
              uint64_t v89 = (llvm::Constant **)(v86 + 40 * v88);
              unsigned int v90 = *v89;
              if (*v89 == a1)
              {
LABEL_155:
                uint64_t v95 = *((unsigned int *)v89 + 4);
                if (v95)
                {
                  char v96 = (void *)((char *)v89[1] + 8);
                  uint64_t v97 = 16 * v95;
                  while (*((_DWORD *)v96 - 2) != 11)
                  {
                    v96 += 2;
                    v97 -= 16;
                    if (!v97) {
                      goto LABEL_159;
                    }
                  }
                  if (*v96) {
                    return 1;
                  }
                }
                goto LABEL_159;
              }
              int8x8_t v91 = 0;
              int v92 = 1;
              while (v90 != (llvm::Constant *)-4096)
              {
                if (v91) {
                  BOOL v93 = 0;
                }
                else {
                  BOOL v93 = v90 == (llvm::Constant *)-8192;
                }
                if (v93) {
                  int8x8_t v91 = v89;
                }
                unsigned int v94 = v88 + v92++;
                unsigned int v88 = v94 & v87;
                uint64_t v89 = (llvm::Constant **)(v86 + 40 * v88);
                unsigned int v90 = *v89;
                if (*v89 == a1) {
                  goto LABEL_155;
                }
              }
              if (v91) {
                BOOL v302 = v91;
              }
              else {
                BOOL v302 = v89;
              }
            }
            else
            {
              BOOL v302 = 0;
            }
            uint64_t v89 = (llvm::Constant **)sub_1CC609054(v84 + 2480, (uint64_t)v417, (uint64_t *)v417, v302);
            uint64_t v303 = (llvm::Constant *)v417[0];
            v89[3] = 0;
            v89[4] = 0;
            *uint64_t v89 = v303;
            v89[1] = (llvm::Constant *)(v89 + 3);
            v89[2] = (llvm::Constant *)0x100000000;
            goto LABEL_155;
          }
          if (llvm::Argument::hasPassPointeeByValueCopyAttr(a1))
          {
            int v71 = (void **)*((void *)a1 + 3);
            unsigned int v72 = *((_DWORD *)v69 + 2);
            if (v71 && (uint8x8_t v73 = v71[14]) != 0)
            {
              if ((*((unsigned char *)v73 + 17) & 1) == 0 && v72 <= 0xFF) {
                return 1;
              }
            }
            else if (v72 < 0x100)
            {
              return 1;
            }
          }
          int8x8_t v69 = *(uint64_t ***)a1;
          unsigned int v79 = *(_DWORD *)(*(void *)a1 + 8);
          if (v79 != 15) {
            goto LABEL_138;
          }
          uint64_t v80 = (void **)*((void *)a1 + 3);
          uint64_t v81 = v80[14];
          if (!v81) {
            goto LABEL_138;
          }
          unsigned int v82 = *((_DWORD *)a1 + 8) + 2;
          if (v82 >= *((_DWORD *)v81 + 2)) {
            goto LABEL_138;
          }
          uint64_t v292 = v81[v82 + 5];
          if (!v292) {
            goto LABEL_138;
          }
          if (*(char *)(v292 + 16) < 0) {
            return 1;
          }
          if ((*(unsigned char *)(v292 + 21) & 0x10) == 0) {
            goto LABEL_138;
          }
          unint64_t v293 = (void *)(v292 + 48);
          uint64_t v294 = 8 * *(unsigned int *)(v292 + 8) - 8 * *(unsigned int *)(v292 + 32);
          if (v294)
          {
            unint64_t v295 = v294 >> 3;
            do
            {
              unint64_t v296 = v295 >> 1;
              unint64_t v297 = &v293[v295 >> 1];
              uint64_t v298 = *v297;
              if (*v297) {
                LODWORD(v298) = *(_DWORD *)(v298 + 12);
              }
              unint64_t v299 = v297 + 1;
              v295 += ~v296;
              if ((int)v298 < 76) {
                unint64_t v293 = v299;
              }
              else {
                unint64_t v295 = v296;
              }
            }
            while (v295);
          }
          if (!*(void *)(*v293 + 16))
          {
LABEL_138:
            unsigned int v70 = *((unsigned __int8 *)a1 + 16);
            goto LABEL_139;
          }
          if ((v79 & 0xFE) == 0x12)
          {
            unsigned int v79 = *(_DWORD *)(*v69[2] + 8);
            if (v80) {
              goto LABEL_649;
            }
          }
          else if (v80)
          {
LABEL_649:
            uint64_t v68 = (a3 + 1);
            if ((*((unsigned char *)v81 + 17) & 1) == 0 && v79 <= 0xFF) {
              return 1;
            }
            goto LABEL_138;
          }
          uint64_t v68 = (a3 + 1);
          if (v79 < 0x100) {
            return 1;
          }
          goto LABEL_138;
        }
        v417[0] = &v418;
        LODWORD(v418) = 39;
        v417[1] = (void *)0x200000001;
        uint64_t v28 = *(void *)(*(void *)(v26 + 40) + 56);
        unsigned int v29 = *((_DWORD *)v27 + 2);
        if ((v29 & 0xFE) == 0x12) {
          unsigned int v29 = *(_DWORD *)(*v27[2] + 8);
        }
        if (v28 && (uint64_t v30 = *(void *)(v28 + 112)) != 0)
        {
          uint64_t v31 = 1;
          if ((*(unsigned char *)(v30 + 17) & 1) != 0 || v29 > 0xFF) {
            goto LABEL_105;
          }
        }
        else if (v29 > 0xFF)
        {
          uint64_t v31 = 1;
          goto LABEL_105;
        }
        uint64_t v31 = 2;
        DWORD1(v418) = 76;
        LODWORD(v417[1]) = 2;
LABEL_105:
        llvm::getKnowledgeValidInContext((uint64_t)a1, &v418, v31, v26, *(void *)(a4 + 24), v25, (uint64_t)&v420);
        int v64 = (int)v420;
        if (v417[0] != &v418) {
          free(v417[0]);
        }
        if (v64) {
          return 1;
        }
        uint64_t v25 = *(void *)(a4 + 8);
        goto LABEL_109;
      }
      uint64_t v18 = 0;
      int v19 = 1;
      while (v17 != (llvm::Constant *)-4096)
      {
        if (v18) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v17 == (llvm::Constant *)-8192;
        }
        if (v20) {
          uint64_t v18 = v16;
        }
        unsigned int v21 = v15 + v19++;
        unsigned int v15 = v21 & v14;
        uint64_t v16 = (llvm::Constant **)(v13 + 40 * v15);
        uint64_t v17 = *v16;
        if (*v16 == a1) {
          goto LABEL_19;
        }
      }
      if (v18) {
        int v105 = v18;
      }
      else {
        int v105 = v16;
      }
    }
    else
    {
      int v105 = 0;
    }
    uint64_t v16 = (llvm::Constant **)sub_1CC609054(v11 + 2480, (uint64_t)v417, (uint64_t *)v417, v105);
    uint64_t v106 = (llvm::Constant *)v417[0];
    v16[3] = 0;
    v16[4] = 0;
    const llvm::APInt *v16 = v106;
    v16[1] = (llvm::Constant *)(v16 + 3);
    v16[2] = (llvm::Constant *)0x100000000;
    goto LABEL_19;
  }
  uint64_t v107 = *((void *)a1 - 4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF));

  return sub_1CC1620B8(v107, a3, a4);
}

uint64_t sub_1CC182938(uint64_t a1, uint64_t a2)
{
  if (a1 == 34) {
    return 1;
  }
  if (a1 == 33)
  {
    uint64_t v4 = 0;
    if (a2)
    {
      unsigned int v5 = *(unsigned __int8 *)(a2 + 16);
      if (v5 <= 0x14)
      {
        if (v5 == 16)
        {
          uint64_t v6 = *(unsigned int *)(a2 + 32);
          if (v6 >= 0x41)
          {
            int v9 = 0;
            int64_t v10 = (unint64_t)(v6 + 63) >> 6;
            do
            {
              if (v10-- < 1) {
                break;
              }
              unint64_t v12 = *(void *)(*(void *)(a2 + 24) + 8 * v10);
              v9 += __clz(v12);
            }
            while (!v12);
            int v13 = v6 | 0xFFFFFFC0;
            if ((v6 & 0x3F) == 0) {
              int v13 = 0;
            }
            if (v9 + v13 != v6) {
              return sub_1CC03F414((uint64_t)&v16, (llvm::Constant *)a2);
            }
          }
          else if (*(void *)(a2 + 24))
          {
            return sub_1CC03F414((uint64_t)&v16, (llvm::Constant *)a2);
          }
          return 1;
        }
        if (v5 == 17)
        {
          if ((sub_1CB844168(a2, 0.0) & 1) == 0) {
            return sub_1CC03F414((uint64_t)&v16, (llvm::Constant *)a2);
          }
          return 1;
        }
        uint64_t v4 = 1;
        if (v5 - 18 >= 3 && v5 != 13) {
          return sub_1CC03F414((uint64_t)&v16, (llvm::Constant *)a2);
        }
      }
    }
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v16 = &v20;
    uint64_t v17 = 0;
    if (sub_1CBF528D8((uint64_t)&v16, (unsigned __int8 *)a2))
    {
      llvm::ConstantRange::makeExactICmpRegion(a1, v20, (uint64_t)&v16);
      unsigned int v15 = *(_DWORD *)(v20 + 8);
      if (v15 > 0x40) {
        operator new[]();
      }
      uint64_t v14 = 0;
      BOOL v7 = llvm::ConstantRange::contains((llvm::ConstantRange *)&v16, (const llvm::APInt *)&v14);
      if (v19 >= 0x41 && v18) {
        MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
      }
      uint64_t v4 = !v7;
      if (v17 >= 0x41 && v16) {
        MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
      }
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_1CC182BA4(llvm::KnownBits *this@<X1>, int8x8_t *a2@<X2>, unsigned char *a3@<X0>, uint64_t a4@<X8>)
{
  llvm::KnownBits::shl(this, a2, a4);
  if (*a3)
  {
    unsigned int v7 = *((_DWORD *)this + 2);
    char v8 = v7 - 1;
    if (v7 >= 0x41) {
      int v9 = (llvm::KnownBits *)(*(void *)this + 8 * ((v7 - 1) >> 6));
    }
    else {
      int v9 = this;
    }
    if ((*(void *)v9 >> v8))
    {
      unsigned int v10 = *(_DWORD *)(a4 + 8);
      uint64_t v11 = 1 << (v10 - 1);
      if (v10 >= 0x41) {
        unint64_t v12 = (void *)(*(void *)a4 + 8 * ((v10 - 1) >> 6));
      }
      else {
        unint64_t v12 = (void *)a4;
      }
      *v12 |= v11;
    }
    uint64_t v14 = *((void *)this + 2);
    int v13 = (char *)this + 16;
    unsigned int v15 = *((_DWORD *)v13 + 2);
    uint64_t v16 = (void *)(v14 + 8 * ((v15 - 1) >> 6));
    if (v15 < 0x41) {
      uint64_t v16 = v13;
    }
    if ((*v16 >> (v15 - 1)))
    {
      uint64_t v18 = *(void *)(a4 + 16);
      uint64_t v17 = a4 + 16;
      unsigned int v19 = *(_DWORD *)(v17 + 8);
      uint64_t v20 = (void *)(v18 + 8 * ((v19 - 1) >> 6));
      if (v19 < 0x41) {
        uint64_t v20 = (void *)v17;
      }
      *v20 |= 1 << (v19 - 1);
    }
  }
}

void sub_1CC182C98(llvm::KnownBits *this@<X1>, int8x8_t *a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_1CC182CA4@<X0>(llvm::KnownBits *this@<X1>, int8x8_t *a2@<X2>, _DWORD *a3@<X8>)
{
  return llvm::KnownBits::ashr((uint64_t)this, a2, (unint64_t)a2, a3);
}

uint64_t sub_1CC182CB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  int v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 != 56)
  {
    if (v5 != 5) {
      return (v5 == 5) & a3;
    }
    if (*(_WORD *)(a2 + 18) != 28) {
      goto LABEL_25;
    }
    uint64_t v9 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
    uint64_t v10 = *(void *)(a2 - 32 * v9);
    if (*(void *)a1 == v10)
    {
      uint64_t v11 = -v9;
    }
    else
    {
      char v15 = sub_1CD497D64((void *)(a1 + 8), v10);
      uint64_t v11 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
      if ((v15 & 1) == 0)
      {
        uint64_t v13 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
LABEL_12:
        if (*(void *)a1 != v13)
        {
          if (!sub_1CD497D64((void *)(a1 + 8), v13)) {
            goto LABEL_25;
          }
          uint64_t v11 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
        }
        uint64_t v12 = *(void *)(a2 + 32 * v11);
        if (v12) {
          goto LABEL_14;
        }
LABEL_25:
        a3 = 0;
        return (v5 == 5) & a3;
      }
    }
    uint64_t v12 = *(void *)(a2 + 32 * v11 + 32);
    if (v12)
    {
LABEL_14:
      **(void **)(a1 + 16) = v12;
      a3 = 1;
      return (v5 == 5) & a3;
    }
    uint64_t v13 = 0;
    goto LABEL_12;
  }
  uint64_t v6 = *(void *)(a2 - 64);
  if (*(void *)a1 == v6 || (sub_1CC0452A0((void *)(a1 + 8), v6) & 1) != 0)
  {
    uint64_t v7 = *(void *)(a2 - 32);
    if (v7)
    {
LABEL_19:
      **(void **)(a1 + 16) = v7;
      return 1;
    }
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(a2 - 32);
  }
  if (*(void *)a1 == v8 || (uint64_t result = sub_1CC0452A0((void *)(a1 + 8), v8), result))
  {
    uint64_t v7 = *(void *)(a2 - 64);
    if (v7) {
      goto LABEL_19;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1CC182E0C(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 != 5)
  {
    if (v4 == 58)
    {
      if (!sub_1CC182CB0(a1, *(void *)(a2 - 64), 58)
        || (sub_1CBF687D0(a1 + 24, *(llvm::Constant **)(a2 - 32)) & 1) == 0)
      {
        uint64_t result = sub_1CC182CB0(a1, *(void *)(a2 - 32), v5);
        if (result)
        {
          uint64_t v7 = *(llvm::Constant **)(a2 - 64);
          return sub_1CBF687D0(a1 + 24, v7);
        }
        return result;
      }
      return 1;
    }
    return 0;
  }
  if (*(_WORD *)(a2 + 18) != 30) {
    return 0;
  }
  uint64_t v8 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  if (sub_1CC182CB0(a1, *v8, (char)v8)
    && (sub_1CBF68974(a1 + 24, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)) & 1) != 0)
  {
    return 1;
  }
  uint64_t v9 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  uint64_t result = sub_1CC182CB0(a1, *(void *)(v9 + 32), v9);
  if (result)
  {
    uint64_t v10 = *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    return sub_1CBF68974(a1 + 24, v10);
  }
  return result;
}

uint64_t sub_1CC182F34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  int v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 != 57)
  {
    if (v5 != 5) {
      return (v5 == 5) & a3;
    }
    if (*(_WORD *)(a2 + 18) != 29) {
      goto LABEL_25;
    }
    uint64_t v9 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
    uint64_t v10 = *(void *)(a2 - 32 * v9);
    if (*(void *)a1 == v10)
    {
      uint64_t v11 = -v9;
    }
    else
    {
      char v15 = sub_1CD497D64((void *)(a1 + 8), v10);
      uint64_t v11 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
      if ((v15 & 1) == 0)
      {
        uint64_t v13 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
LABEL_12:
        if (*(void *)a1 != v13)
        {
          if (!sub_1CD497D64((void *)(a1 + 8), v13)) {
            goto LABEL_25;
          }
          uint64_t v11 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
        }
        uint64_t v12 = *(void *)(a2 + 32 * v11);
        if (v12) {
          goto LABEL_14;
        }
LABEL_25:
        a3 = 0;
        return (v5 == 5) & a3;
      }
    }
    uint64_t v12 = *(void *)(a2 + 32 * v11 + 32);
    if (v12)
    {
LABEL_14:
      **(void **)(a1 + 16) = v12;
      a3 = 1;
      return (v5 == 5) & a3;
    }
    uint64_t v13 = 0;
    goto LABEL_12;
  }
  uint64_t v6 = *(void *)(a2 - 64);
  if (*(void *)a1 == v6 || (sub_1CC0452A0((void *)(a1 + 8), v6) & 1) != 0)
  {
    uint64_t v7 = *(void *)(a2 - 32);
    if (v7)
    {
LABEL_19:
      **(void **)(a1 + 16) = v7;
      return 1;
    }
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(a2 - 32);
  }
  if (*(void *)a1 == v8 || (uint64_t result = sub_1CC0452A0((void *)(a1 + 8), v8), result))
  {
    uint64_t v7 = *(void *)(a2 - 64);
    if (v7) {
      goto LABEL_19;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1CC183090(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 != 5)
  {
    if (v4 == 58)
    {
      if (!sub_1CC182F34(a1, *(void *)(a2 - 64), 58)
        || (sub_1CBF687D0(a1 + 24, *(llvm::Constant **)(a2 - 32)) & 1) == 0)
      {
        uint64_t result = sub_1CC182F34(a1, *(void *)(a2 - 32), v5);
        if (result)
        {
          uint64_t v7 = *(llvm::Constant **)(a2 - 64);
          return sub_1CBF687D0(a1 + 24, v7);
        }
        return result;
      }
      return 1;
    }
    return 0;
  }
  if (*(_WORD *)(a2 + 18) != 30) {
    return 0;
  }
  uint64_t v8 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  if (sub_1CC182F34(a1, *v8, (char)v8)
    && (sub_1CBF68974(a1 + 24, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)) & 1) != 0)
  {
    return 1;
  }
  uint64_t v9 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  uint64_t result = sub_1CC182F34(a1, *(void *)(v9 + 32), v9);
  if (result)
  {
    uint64_t v10 = *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    return sub_1CBF68974(a1 + 24, v10);
  }
  return result;
}

uint64_t sub_1CC1831B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  int v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 != 58)
  {
    if (v5 != 5) {
      return (v5 == 5) & a3;
    }
    if (*(_WORD *)(a2 + 18) != 30) {
      goto LABEL_25;
    }
    uint64_t v9 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
    uint64_t v10 = *(void *)(a2 - 32 * v9);
    if (*(void *)a1 == v10)
    {
      uint64_t v11 = -v9;
    }
    else
    {
      char v15 = sub_1CD497D64((void *)(a1 + 8), v10);
      uint64_t v11 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
      if ((v15 & 1) == 0)
      {
        uint64_t v13 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
LABEL_12:
        if (*(void *)a1 != v13)
        {
          if (!sub_1CD497D64((void *)(a1 + 8), v13)) {
            goto LABEL_25;
          }
          uint64_t v11 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
        }
        uint64_t v12 = *(void *)(a2 + 32 * v11);
        if (v12) {
          goto LABEL_14;
        }
LABEL_25:
        a3 = 0;
        return (v5 == 5) & a3;
      }
    }
    uint64_t v12 = *(void *)(a2 + 32 * v11 + 32);
    if (v12)
    {
LABEL_14:
      **(void **)(a1 + 16) = v12;
      a3 = 1;
      return (v5 == 5) & a3;
    }
    uint64_t v13 = 0;
    goto LABEL_12;
  }
  uint64_t v6 = *(void *)(a2 - 64);
  if (*(void *)a1 == v6 || (sub_1CC0452A0((void *)(a1 + 8), v6) & 1) != 0)
  {
    uint64_t v7 = *(void *)(a2 - 32);
    if (v7)
    {
LABEL_19:
      **(void **)(a1 + 16) = v7;
      return 1;
    }
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(a2 - 32);
  }
  if (*(void *)a1 == v8 || (uint64_t result = sub_1CC0452A0((void *)(a1 + 8), v8), result))
  {
    uint64_t v7 = *(void *)(a2 - 64);
    if (v7) {
      goto LABEL_19;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1CC183314(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 != 5)
  {
    if (v4 == 58)
    {
      if (!sub_1CC1831B8(a1, *(void *)(a2 - 64), 58)
        || (sub_1CBF687D0(a1 + 24, *(llvm::Constant **)(a2 - 32)) & 1) == 0)
      {
        uint64_t result = sub_1CC1831B8(a1, *(void *)(a2 - 32), v5);
        if (result)
        {
          uint64_t v7 = *(llvm::Constant **)(a2 - 64);
          return sub_1CBF687D0(a1 + 24, v7);
        }
        return result;
      }
      return 1;
    }
    return 0;
  }
  if (*(_WORD *)(a2 + 18) != 30) {
    return 0;
  }
  uint64_t v8 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  if (sub_1CC1831B8(a1, *v8, (char)v8)
    && (sub_1CBF68974(a1 + 24, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)) & 1) != 0)
  {
    return 1;
  }
  uint64_t v9 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  uint64_t result = sub_1CC1831B8(a1, *(void *)(v9 + 32), v9);
  if (result)
  {
    uint64_t v10 = *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    return sub_1CBF68974(a1 + 24, v10);
  }
  return result;
}

uint64_t sub_1CC18343C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  int v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 != 53)
  {
    if (v5 != 5) {
      return (v5 == 5) & a3;
    }
    if (*(_WORD *)(a2 + 18) != 25)
    {
LABEL_13:
      a3 = 0;
      return (v5 == 5) & a3;
    }
    uint64_t v12 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
    uint64_t v13 = *(void *)(a2 - 32 * v12);
    if (*(void *)a1 != v13)
    {
      if (!sub_1CD497D64((void *)(a1 + 8), v13)) {
        goto LABEL_13;
      }
      uint64_t v12 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
    }
    if (sub_1CD497E24((void **)(a1 + 16), *(void *)(a2 - 32 * v12 + 32)))
    {
      a3 = 1;
      return (v5 == 5) & a3;
    }
    goto LABEL_13;
  }
  uint64_t v6 = *(void *)(a2 - 64);
  if (*(void *)a1 == v6 || (uint64_t result = sub_1CC0452A0((void *)(a1 + 8), v6), result))
  {
    uint64_t v8 = *(void *)(a2 - 32);
    if (v8) {
      BOOL v9 = *(unsigned char *)(v8 + 16) == 16;
    }
    else {
      BOOL v9 = 0;
    }
    if (!v9) {
      return 0;
    }
    uint64_t v10 = (void *)(v8 + 24);
    uint64_t v11 = *(unsigned int *)(v8 + 32);
    if (v11 < 0x41) {
      goto LABEL_10;
    }
    int v14 = 0;
    int64_t v15 = (unint64_t)(v11 + 63) >> 6;
    do
    {
      if (v15-- < 1) {
        break;
      }
      unint64_t v17 = *(void *)(*v10 + 8 * v15);
      v14 += __clz(v17);
    }
    while (!v17);
    uint64_t result = 0;
    int v18 = v11 | 0xFFFFFFC0;
    if ((v11 & 0x3F) == 0) {
      int v18 = 0;
    }
    if ((v11 - v14 - v18) <= 0x40)
    {
      uint64_t v10 = (void *)*v10;
LABEL_10:
      **(void **)(a1 + 16) = *v10;
      return 1;
    }
  }
  return result;
}

uint64_t sub_1CC183598(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 != 5)
  {
    if (v4 == 58)
    {
      if (!sub_1CC18343C(a1, *(void *)(a2 - 64), 58)
        || (sub_1CBF687D0(a1 + 24, *(llvm::Constant **)(a2 - 32)) & 1) == 0)
      {
        uint64_t result = sub_1CC18343C(a1, *(void *)(a2 - 32), v5);
        if (result)
        {
          uint64_t v7 = *(llvm::Constant **)(a2 - 64);
          return sub_1CBF687D0(a1 + 24, v7);
        }
        return result;
      }
      return 1;
    }
    return 0;
  }
  if (*(_WORD *)(a2 + 18) != 30) {
    return 0;
  }
  uint64_t v8 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  if (sub_1CC18343C(a1, *v8, (char)v8)
    && (sub_1CBF68974(a1 + 24, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)) & 1) != 0)
  {
    return 1;
  }
  uint64_t v9 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  uint64_t result = sub_1CC18343C(a1, *(void *)(v9 + 32), v9);
  if (result)
  {
    uint64_t v10 = *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    return sub_1CBF68974(a1 + 24, v10);
  }
  return result;
}

uint64_t sub_1CC1836C0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v4 >= 0x1C)
  {
    if ((v4 & 0xFE) == 0x36)
    {
      int v5 = *(_DWORD *)(a2 + 20);
      if ((v5 & 0x40000000) != 0) {
        uint64_t v6 = *(uint64_t **)(a2 - 8);
      }
      else {
        uint64_t v6 = (uint64_t *)(a2 - 32 * (v5 & 0x7FFFFFF));
      }
      if (*(void *)a1 != *v6)
      {
        uint64_t result = sub_1CC0452A0((void *)(a1 + 8), *v6);
        if (!result) {
          return result;
        }
        int v5 = *(_DWORD *)(a2 + 20);
      }
      if ((v5 & 0x40000000) != 0) {
        uint64_t v8 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v8 = a2 - 32 * (v5 & 0x7FFFFFF);
      }
      uint64_t result = 0;
      uint64_t v9 = *(void *)(v8 + 32);
      if (v9 && *(unsigned char *)(v9 + 16) == 16)
      {
        uint64_t v10 = (void *)(v9 + 24);
        uint64_t v11 = *(unsigned int *)(v9 + 32);
        if (v11 < 0x41)
        {
LABEL_20:
          **(void **)(a1 + 16) = *v10;
          return 1;
        }
        int v15 = 0;
        int64_t v16 = (unint64_t)(v11 + 63) >> 6;
        do
        {
          if (v16-- < 1) {
            break;
          }
          unint64_t v18 = *(void *)(*v10 + 8 * v16);
          v15 += __clz(v18);
        }
        while (!v18);
        uint64_t result = 0;
        int v19 = v11 | 0xFFFFFFC0;
        if ((v11 & 0x3F) == 0) {
          int v19 = 0;
        }
        if ((v11 - v15 - v19) <= 0x40)
        {
          uint64_t v10 = (void *)*v10;
          goto LABEL_20;
        }
      }
      return result;
    }
    return 0;
  }
  if (v4 != 5 || (*(_WORD *)(a2 + 18) & 0xFFFE) != 0x1A) {
    return 0;
  }
  uint64_t v12 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  uint64_t v13 = *(void *)(a2 - 32 * v12);
  if (*(void *)a1 != v13)
  {
    uint64_t result = sub_1CD497D64((void *)(a1 + 8), v13);
    if (!result) {
      return result;
    }
    uint64_t v12 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  }
  uint64_t v14 = *(void *)(a2 - 32 * v12 + 32);

  return sub_1CD497E24((void **)(a1 + 16), v14);
}

uint64_t sub_1CC183854(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 != 5)
  {
    if (v4 == 58)
    {
      if (!sub_1CC1836C0(a1, *(void *)(a2 - 64))
        || (sub_1CBF687D0(a1 + 24, *(llvm::Constant **)(a2 - 32)) & 1) == 0)
      {
        uint64_t result = sub_1CC1836C0(a1, *(void *)(a2 - 32));
        if (result)
        {
          uint64_t v6 = *(llvm::Constant **)(a2 - 64);
          return sub_1CBF687D0(a1 + 24, v6);
        }
        return result;
      }
      return 1;
    }
    return 0;
  }
  if (*(_WORD *)(a2 + 18) != 30) {
    return 0;
  }
  if (sub_1CC1836C0(a1, *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)))
    && (sub_1CBF68974(a1 + 24, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)) & 1) != 0)
  {
    return 1;
  }
  uint64_t result = sub_1CC1836C0(a1, *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32));
  if (result)
  {
    uint64_t v7 = *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    return sub_1CBF68974(a1 + 24, v7);
  }
  return result;
}

uint64_t sub_1CC18397C(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 - 64);
  if (*(void *)(a1 + 8) == v4 || (uint64_t result = sub_1CC0452A0((void *)(a1 + 16), v4), result))
  {
    uint64_t v6 = *(void *)(a2 - 32);
    if (v6)
    {
      **(void **)(a1 + 24) = v6;
      **(_DWORD **)a1 = *(_WORD *)(a2 + 18) & 0x3F;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL sub_1CC1839F8(llvm::APInt *a1)
{
  unsigned int v1 = *((_DWORD *)a1 + 2);
  if (v1 > 0x40)
  {
    uint64_t v3 = *((unsigned int *)a1 + 2);
    if (llvm::APInt::countLeadingZerosSlowCase(a1) == v1)
    {
      return 1;
    }
    else
    {
      int v4 = 0;
      unint64_t v5 = (unint64_t)(v3 + 63) >> 6;
      uint64_t v6 = *(int8x8_t **)a1;
      do
      {
        int8x8_t v7 = *v6++;
        uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
        v8.i16[0] = vaddlv_u8(v8);
        v4 += v8.i32[0];
        --v5;
      }
      while (v5);
      return v4 == 1;
    }
  }
  else
  {
    return !*(void *)a1 || (*(void *)a1 & (*(void *)a1 - 1)) == 0;
  }
}

void *sub_1CC183AA0@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = result;
  unsigned int v6 = *((unsigned __int8 *)result + 16);
  if (result) {
    BOOL v7 = v6 >= 0x1C;
  }
  else {
    BOOL v7 = 0;
  }
  int v8 = !v7;
  unsigned int v9 = v6 - 28;
  unsigned int v10 = v9;
  if (v8 == 1) {
    unsigned int v10 = *((unsigned __int16 *)result + 9);
  }
  if (a2 && (unsigned int v11 = *(unsigned __int8 *)(a2 + 16), v11 > 0x1B)) {
    unsigned int v12 = v11 - 28;
  }
  else {
    unsigned int v12 = *(unsigned __int16 *)(a2 + 18);
  }
  if (v10 == v12)
  {
    if (v8) {
      unsigned int v9 = *((unsigned __int16 *)result + 9);
    }
    switch(v9)
    {
      case 0xDu:
      case 0xFu:
        int v13 = *((_DWORD *)result + 5);
        if ((v13 & 0x40000000) != 0) {
          uint64_t v14 = (uint64_t *)*(result - 1);
        }
        else {
          uint64_t v14 = &result[-4 * (v13 & 0x7FFFFFF)];
        }
        uint64_t v21 = *v14;
        int v22 = *(_DWORD *)(a2 + 20);
        if ((v22 & 0x40000000) != 0) {
          int v23 = *(void **)(a2 - 8);
        }
        else {
          int v23 = (void *)(a2 - 32 * (v22 & 0x7FFFFFF));
        }
        if (v21 == *v23)
        {
          if ((v13 & 0x40000000) != 0) {
            unsigned int v29 = (void *)*(result - 1);
          }
          else {
            unsigned int v29 = &result[-4 * (v13 & 0x7FFFFFF)];
          }
          uint64_t v34 = v29[4];
          if ((v22 & 0x40000000) != 0) {
            uint64_t v35 = *(void *)(a2 - 8);
          }
          else {
            uint64_t v35 = a2 - 32 * (v22 & 0x7FFFFFF);
          }
          uint64_t v36 = *(void *)(v35 + 32);
          goto LABEL_84;
        }
        if ((v13 & 0x40000000) != 0) {
          uint64_t v24 = (void *)*(result - 1);
        }
        else {
          uint64_t v24 = &result[-4 * (v13 & 0x7FFFFFF)];
        }
        uint64_t v30 = v24[4];
        if ((v22 & 0x40000000) != 0) {
          uint64_t v31 = *(void *)(a2 - 8);
        }
        else {
          uint64_t v31 = a2 - 32 * (v22 & 0x7FFFFFF);
        }
        if (v30 == *(void *)(v31 + 32))
        {
          if ((v13 & 0x40000000) != 0) {
            uint64_t v32 = (uint64_t *)*(result - 1);
          }
          else {
            uint64_t v32 = &result[-4 * (v13 & 0x7FFFFFF)];
          }
          uint64_t v34 = *v32;
          if ((v22 & 0x40000000) != 0) {
            int v37 = *(uint64_t **)(a2 - 8);
          }
          else {
            int v37 = (uint64_t *)(a2 - 32 * (v22 & 0x7FFFFFF));
          }
          uint64_t v36 = *v37;
LABEL_84:
          *(void *)a3 = v34;
          *(void *)(a3 + 8) = v36;
          goto LABEL_111;
        }
        break;
      case 0xEu:
      case 0x10u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
        break;
      case 0x11u:
        if (((*((unsigned char *)result + 17) & 2) == 0 || (*(unsigned char *)(a2 + 17) & 2) == 0)
          && ((*((unsigned char *)result + 17) & 4) == 0 || (*(unsigned char *)(a2 + 17) & 4) == 0))
        {
          break;
        }
        int v15 = *((_DWORD *)result + 5);
        int v19 = (v15 & 0x40000000) != 0 ? (void *)*(result - 1) : &result[-4 * (v15 & 0x7FFFFFF)];
        uint64_t v38 = v19[4];
        int v26 = *(_DWORD *)(a2 + 20);
        uint64_t v39 = (v26 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v26 & 0x7FFFFFF);
        if (v38 != *(void *)(v39 + 32)) {
          break;
        }
        uint64_t v40 = (v15 & 0x40000000) != 0 ? (void *)*(result - 1) : &result[-4 * (v15 & 0x7FFFFFF)];
        uint64_t v41 = v40[4];
        if (*(unsigned char *)(v41 + 16) != 16) {
          break;
        }
        uint64_t v42 = *(unsigned int *)(v41 + 32);
        if (v42 <= 0x40)
        {
          if (*(void *)(v41 + 24)) {
            goto LABEL_103;
          }
          break;
        }
        int v43 = 0;
        int64_t v44 = (unint64_t)(v42 + 63) >> 6;
        do
        {
          if (v44-- < 1) {
            break;
          }
          unint64_t v46 = *(void *)(*(void *)(v41 + 24) + 8 * v44);
          v43 += __clz(v46);
        }
        while (!v46);
        int v47 = v42 | 0xFFFFFFC0;
        if ((v42 & 0x3F) == 0) {
          int v47 = 0;
        }
        if (v43 + v47 == v42) {
          break;
        }
        goto LABEL_103;
      case 0x19u:
        if (((*((unsigned char *)result + 17) & 2) == 0 || (*(unsigned char *)(a2 + 17) & 2) == 0)
          && ((*((unsigned char *)result + 17) & 4) == 0 || (*(unsigned char *)(a2 + 17) & 4) == 0))
        {
          break;
        }
        goto LABEL_43;
      case 0x1Au:
      case 0x1Bu:
        if ((*((unsigned char *)result + 17) & 2) == 0 || (*(unsigned char *)(a2 + 17) & 2) == 0) {
          break;
        }
LABEL_43:
        int v15 = *((_DWORD *)result + 5);
        if ((v15 & 0x40000000) != 0) {
          uint64_t v20 = (void *)*(result - 1);
        }
        else {
          uint64_t v20 = &result[-4 * (v15 & 0x7FFFFFF)];
        }
        uint64_t v25 = v20[4];
        int v26 = *(_DWORD *)(a2 + 20);
        if ((v26 & 0x40000000) != 0) {
          uint64_t v33 = *(void *)(a2 - 8);
        }
        else {
          uint64_t v33 = a2 - 32 * (v26 & 0x7FFFFFF);
        }
        uint64_t v28 = *(void *)(v33 + 32);
        goto LABEL_71;
      default:
        if (v9 - 39 >= 2)
        {
          if (v9 != 55) {
            break;
          }
          uint64_t v56 = 0;
          uint64_t v57 = 0;
          uint64_t v53 = 0;
          uint64_t v54 = 0;
          if (result[5] != *(void *)(a2 + 40)) {
            break;
          }
          uint64_t result = (void *)llvm::matchSimpleRecurrence((uint64_t)result, &v57, &v56, &v55);
          if (!result) {
            break;
          }
          uint64_t result = (void *)llvm::matchSimpleRecurrence(a2, &v54, &v53, &v52);
          if (!result) {
            break;
          }
          uint64_t result = sub_1CC183AA0(v50, v57, v54);
          if (!v51 || (void *)v50[0] != v4 || v50[1] != a2) {
            break;
          }
          uint64_t v17 = v56;
          uint64_t v18 = v53;
        }
        else
        {
          int v15 = *((_DWORD *)result + 5);
          if ((v15 & 0x40000000) != 0) {
            int64_t v16 = (uint64_t **)*(result - 1);
          }
          else {
            int64_t v16 = (uint64_t **)&result[-4 * (v15 & 0x7FFFFFF)];
          }
          uint64_t v25 = **v16;
          int v26 = *(_DWORD *)(a2 + 20);
          if ((v26 & 0x40000000) != 0) {
            int v27 = *(uint64_t ***)(a2 - 8);
          }
          else {
            int v27 = (uint64_t **)(a2 - 32 * (v26 & 0x7FFFFFF));
          }
          uint64_t v28 = **v27;
LABEL_71:
          if (v25 != v28) {
            break;
          }
LABEL_103:
          if ((v15 & 0x40000000) != 0) {
            int v48 = (uint64_t *)*(result - 1);
          }
          else {
            int v48 = &result[-4 * (v15 & 0x7FFFFFF)];
          }
          uint64_t v17 = *v48;
          if ((v26 & 0x40000000) != 0) {
            uint64_t v49 = *(uint64_t **)(a2 - 8);
          }
          else {
            uint64_t v49 = (uint64_t *)(a2 - 32 * (v26 & 0x7FFFFFF));
          }
          uint64_t v18 = *v49;
        }
        *(void *)a3 = v17;
        *(void *)(a3 + 8) = v18;
LABEL_111:
        *(unsigned char *)(a3 + 16) = 1;
        return result;
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

uint64_t sub_1CC183EE0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 != 41 || a1 == 0 || v4 < 0x1C || v4 - 59 < 0xFFFFFFEE) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 - 64);
  uint64_t v9 = *(void *)(a1 - 32);
  if (v8 != a2)
  {
    if (v9 != a2) {
      return 0;
    }
    uint64_t v9 = v8;
  }
  return sub_1CC1620B8(v9, (a3 + 1), a4);
}

uint64_t sub_1CC183F2C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int v8 = *(unsigned __int8 *)(a2 + 16);
  if (v8 < 0x1C)
  {
    if (v8 != 5) {
      return 0;
    }
    int v14 = *(unsigned __int16 *)(a2 + 18);
    HIDWORD(v16) = v14 - 13;
    LODWORD(v16) = v14 - 13;
    unsigned int v15 = v16 >> 1;
    BOOL v11 = v15 > 6;
    int v17 = (1 << v15) & 0x47;
    if (v11 || v17 == 0) {
      return 0;
    }
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v28 = &v30;
    if (v14 != 17) {
      return 0;
    }
    uint64_t v19 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
    if (*(void *)v19 != a1) {
      return 0;
    }
    uint64_t result = sub_1CBF5295C((uint64_t)&v28, *(llvm::Constant **)(v19 + 32));
    if (!result) {
      return result;
    }
  }
  else
  {
    HIDWORD(v10) = v8 - 41;
    LODWORD(v10) = v8 - 41;
    unsigned int v9 = v10 >> 1;
    BOOL v11 = v9 > 6;
    int v12 = (1 << v9) & 0x47;
    if (v11 || v12 == 0) {
      return 0;
    }
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v28 = &v30;
    if (v8 != 45
      || *(void *)(a2 - 64) != a1
      || (sub_1CBF528D8((uint64_t)&v28, *(unsigned __int8 **)(a2 - 32)) & 1) == 0)
    {
      return 0;
    }
  }
  if ((*(unsigned char *)(a2 + 17) & 6) == 0) {
    return 0;
  }
  uint64_t v21 = *(unsigned int *)(v30 + 8);
  if (v21 <= 0x40)
  {
    if (*(void *)v30 < 2uLL) {
      return 0;
    }
    return sub_1CC1620B8(a1, (a3 + 1), a4);
  }
  int v22 = 0;
  int64_t v23 = (unint64_t)(v21 + 63) >> 6;
  do
  {
    BOOL v11 = v23-- < 1;
    if (v11) {
      break;
    }
    unint64_t v24 = *(void *)(*(void *)v30 + 8 * v23);
    v22 += __clz(v24);
  }
  while (!v24);
  uint64_t result = 0;
  int v25 = v21 | 0xFFFFFFC0;
  if ((v21 & 0x3F) == 0) {
    int v25 = 0;
  }
  int v26 = v22 + v25;
  if (v26 != v21 && v26 != v21 - 1) {
    return sub_1CC1620B8(a1, (a3 + 1), a4);
  }
  return result;
}

uint64_t sub_1CC1840CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int v8 = *(unsigned __int8 *)(a2 + 16);
  if (v8 < 0x1C)
  {
    if (v8 != 5) {
      return 0;
    }
    int v14 = *(unsigned __int16 *)(a2 + 18);
    HIDWORD(v16) = v14 - 13;
    LODWORD(v16) = v14 - 13;
    unsigned int v15 = v16 >> 1;
    BOOL v11 = v15 > 6;
    int v17 = (1 << v15) & 0x47;
    if (v11 || v17 == 0) {
      return 0;
    }
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    int v26 = &v28;
    if (v14 != 25) {
      return 0;
    }
    uint64_t v19 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
    if (*(void *)v19 != a1) {
      return 0;
    }
    uint64_t result = sub_1CBF5295C((uint64_t)&v26, *(llvm::Constant **)(v19 + 32));
    if (!result) {
      return result;
    }
  }
  else
  {
    HIDWORD(v10) = v8 - 41;
    LODWORD(v10) = v8 - 41;
    unsigned int v9 = v10 >> 1;
    BOOL v11 = v9 > 6;
    int v12 = (1 << v9) & 0x47;
    if (v11 || v12 == 0) {
      return 0;
    }
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    int v26 = &v28;
    if (v8 != 53
      || *(void *)(a2 - 64) != a1
      || (sub_1CBF528D8((uint64_t)&v26, *(unsigned __int8 **)(a2 - 32)) & 1) == 0)
    {
      return 0;
    }
  }
  if ((*(unsigned char *)(a2 + 17) & 6) == 0) {
    return 0;
  }
  uint64_t v21 = *(unsigned int *)(v28 + 8);
  if (v21 <= 0x40)
  {
    if (!*(void *)v28) {
      return 0;
    }
    return sub_1CC1620B8(a1, (a3 + 1), a4);
  }
  int v22 = 0;
  int64_t v23 = (unint64_t)(v21 + 63) >> 6;
  do
  {
    BOOL v11 = v23-- < 1;
    if (v11) {
      break;
    }
    unint64_t v24 = *(void *)(*(void *)v28 + 8 * v23);
    v22 += __clz(v24);
  }
  while (!v24);
  uint64_t result = 0;
  int v25 = v21 | 0xFFFFFFC0;
  if ((v21 & 0x3F) == 0) {
    int v25 = 0;
  }
  if (v22 + v25 != v21) {
    return sub_1CC1620B8(a1, (a3 + 1), a4);
  }
  return result;
}

uint64_t sub_1CC184260(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!**(unsigned char **)a1)
  {
    int isKnownNeverNaN = llvm::isKnownNeverNaN(a2, **(void **)(a1 + 8), 0);
    uint64_t result = 0;
    if (isKnownNeverNaN)
    {
      uint64_t v13 = **(void **)(a1 + 8);
      uint64_t v14 = (**(_DWORD **)(a1 + 16) + 1);
      return sub_1CC164EB8(a2, v13, 0, v14);
    }
    return result;
  }
  v24[1] = 0;
  uint64_t v25 = 0;
  v24[0] = &v25;
  uint64_t result = sub_1CC04AFFC((uint64_t)v24, a2);
  if (!result) {
    return result;
  }
  uint64_t v4 = v25;
  unint64_t v5 = (llvm::detail::DoubleAPFloat *)(v25 + 8);
  uint64_t v6 = *(void *)(v25 + 8);
  if ((_UNKNOWN *)v6 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(&v26, (uint64_t)&unk_1CFB2E344);
  }
  uint64_t v26 = *(void *)(v25 + 8);
  if ((*(_DWORD *)(v6 + 8) + 64) >= 0x80) {
    operator new[]();
  }
  unsigned __int8 v29 = v29 & 0xF0 | 3;
  int v28 = *(_DWORD *)(v6 + 4) - 1;
  int v7 = *(_DWORD *)(v6 + 8);
  if ((v7 - 64) < 0xFFFFFF80)
  {
    uint64_t v19 = v27;
    void *v27 = 0;
    int v22 = v5;
    bzero(v19 + 1, 8 * (((v7 + 64) >> 6) - 2) + 8);
    unint64_t v5 = v22;
  }
  else
  {
    uint64_t v27 = 0;
  }
  if ((_UNKNOWN *)v26 == &unk_1CFB2E344)
  {
    int64_t v23 = v5;
    llvm::detail::DoubleAPFloat::makeZero((llvm::detail::DoubleAPFloat *)&v26, 0);
LABEL_38:
    unint64_t v5 = v23;
    goto LABEL_10;
  }
  unsigned __int8 v29 = v29 & 0xF0 | 3;
  int v28 = *(_DWORD *)(v26 + 4) - 1;
  int v8 = *(_DWORD *)(v26 + 8);
  if ((v8 - 64) < 0xFFFFFF80)
  {
    uint64_t v20 = v27;
    void *v27 = 0;
    int64_t v23 = v5;
    bzero(v20 + 1, 8 * (((v8 + 64) >> 6) - 2) + 8);
    goto LABEL_38;
  }
  uint64_t v27 = 0;
LABEL_10:
  if (*(_UNKNOWN **)v5 == &unk_1CFB2E344)
  {
    int v10 = llvm::detail::DoubleAPFloat::compare(v5, (const llvm::detail::DoubleAPFloat *)&v26);
  }
  else
  {
    unsigned int v9 = *(unsigned __int8 *)(v4 + 28);
    int v10 = 3;
    switch(4 * (v9 & 7) + (v29 & 7))
    {
      case 1u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 9u:
      case 0xDu:
        break;
      case 2u:
      case 3u:
      case 0xBu:
        int v10 = ~(v9 >> 2) & 2;
        break;
      case 8u:
      case 0xCu:
      case 0xEu:
        int v10 = (v29 >> 2) & 2;
        break;
      case 0xAu:
        int v15 = (v9 >> 3) & 1;
        if (v15 == ((v29 >> 3) & 1))
        {
          int v16 = llvm::detail::IEEEFloat::compareAbsoluteValue(v5, (const llvm::detail::IEEEFloat *)&v26);
          int v10 = v16;
          if ((*(unsigned char *)(v4 + 28) & 8) != 0)
          {
            if (v16)
            {
              if (v16 == 2) {
                int v10 = 0;
              }
              else {
                int v10 = v16;
              }
            }
            else
            {
              int v10 = 2;
            }
          }
        }
        else
        {
          int v10 = (2 * v15) ^ 2;
        }
        break;
      case 0xFu:
        int v10 = 1;
        break;
      default:
        int v17 = (v9 >> 3) & 1;
        BOOL v18 = v17 == ((v29 >> 3) & 1);
        int v10 = (2 * v17) ^ 2;
        if (v18) {
          int v10 = 1;
        }
        break;
    }
  }
  uint64_t result = v10 == 2;
  if ((_UNKNOWN *)v26 == &unk_1CFB2E344)
  {
    BOOL v21 = v10 == 2;
    sub_1CB845718((uint64_t *)&v27);
    return v21;
  }
  if ((*(_DWORD *)(v26 + 8) - 64) <= 0xFFFFFF7F && v27)
  {
    BOOL v21 = v10 == 2;
    MEMORY[0x1D25D9CB0](v27, 0x1000C8000313F17);
    return v21;
  }
  return result;
}

llvm::Value *sub_1CC184644(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v9 = a2;
  if (a3 && *(unsigned char *)(a3 + 8) == 16)
  {
    uint64_t v12 = *(unsigned int *)(a3 + 12);
    if (v12)
    {
      uint64_t v13 = 0;
      unsigned int v14 = *(_DWORD *)(a4 + 8);
      int v15 = a2;
      while (1)
      {
        if (v14 >= *(_DWORD *)(a4 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a4 + 4 * v14) = v13;
        ++*(_DWORD *)(a4 + 8);
        uint64_t v16 = sub_1CC184644(a1, v15, *(void *)(*(void *)(a3 + 16) + 8 * v13), a4, a5, a6);
        unsigned int v14 = *(_DWORD *)(a4 + 8) - 1;
        *(_DWORD *)(a4 + 8) = v14;
        if (!v16) {
          break;
        }
        int v17 = (llvm::Value *)v16;
        ++v13;
        int v15 = (void *)v16;
        if (v12 == v13) {
          return v17;
        }
      }
      if (v15 != v9) {
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
      unsigned int v9 = 0;
    }
    else
    {
      int v17 = (llvm::Value *)a2;
      if (a2) {
        return v17;
      }
    }
  }
  uint64_t InsertedValue = llvm::FindInsertedValue(a1, *(void *)a4, *(unsigned int *)(a4 + 8), 0);
  if (!InsertedValue) {
    return 0;
  }
  uint64_t v20 = InsertedValue;
  uint64_t v21 = *(unsigned int *)(a4 + 8);
  int v22 = (void *)(*(void *)a4 + 4 * a5);
  uint64_t v32 = "tmp";
  __int16 v33 = 259;
  int64_t v23 = (char *)operator new(0xA0uLL);
  unint64_t v24 = v23;
  *((void *)v23 + 8) = *v9;
  int v17 = (llvm::Value *)(v23 + 64);
  *(void *)int64_t v23 = 0;
  *((void *)v23 + 1) = 0;
  *((void *)v23 + 2) = 0;
  *((void *)v23 + 3) = v23 + 64;
  *((void *)v23 + 4) = 0;
  *((void *)v23 + 5) = 0;
  *((void *)v23 + 6) = 0;
  *((void *)v23 + 7) = v23 + 64;
  uint64_t v25 = v21 - a5;
  *((void *)v23 + 9) = 0;
  *((void *)v23 + 10) = 0x20000005DLL;
  *(_OWORD *)(v23 + 88) = 0u;
  uint64_t v26 = v23 + 88;
  *(_OWORD *)(v23 + 104) = 0u;
  *((_DWORD *)v23 + 30) = 0;
  if (a6)
  {
    uint64_t v27 = *(void *)(a6 + 40);
    int v28 = (uint64_t *)(a6 + 24);
    *((void *)v23 + 13) = v27;
    *(_WORD *)(v27 + 18) &= ~0x8000u;
    if ((v23[87] & 0x10) != 0)
    {
      uint64_t v30 = *(void *)(v27 + 56);
      if (v30)
      {
        uint64_t v31 = *(llvm::ValueSymbolTable **)(v30 + 104);
        if (v31) {
          llvm::ValueSymbolTable::reinsertValue(v31, v17);
        }
      }
    }
    uint64_t v29 = *v28;
    v24[11] = *v28;
    v24[12] = v28;
    *(void *)(v29 + 8) = v26;
    *int v28 = (uint64_t)v26;
  }
  v24[16] = v24 + 18;
  v24[17] = 0x400000000;
  llvm::InsertValueInst::init(v17, (uint64_t)v9, v20, v22, v25, &v32);
  return v17;
}

BOOL sub_1CC1848BC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a1 == a2) {
    return 1;
  }
  if (a3 > 1) {
    return 0;
  }
  BOOL result = 0;
  if (!a2) {
    return result;
  }
  unsigned int v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 < 0x1C) {
    return result;
  }
  int v7 = *(_DWORD *)(a2 + 20);
  if ((v7 & 0x40000000) == 0)
  {
    uint64_t v8 = v7 & 0x7FFFFFF;
    unsigned int v9 = (void *)(a2 - 32 * v8);
    if (!v8) {
      goto LABEL_16;
    }
LABEL_11:
    uint64_t v10 = a3 + 1;
    uint64_t v11 = 32 * v8;
    while (!llvm::propagatesPoison((uint64_t)v9) || (sub_1CC1848BC(a1, *v9, v10) & 1) == 0)
    {
      v9 += 4;
      v11 -= 32;
      if (!v11)
      {
        unsigned int v6 = *(unsigned __int8 *)(a2 + 16);
        goto LABEL_16;
      }
    }
    return 1;
  }
  unsigned int v9 = *(void **)(a2 - 8);
  uint64_t v8 = v7 & 0x7FFFFFF;
  if (v8) {
    goto LABEL_11;
  }
LABEL_16:
  if (v6 != 92) {
    return 0;
  }
  uint64_t v12 = *(void *)(a2 - 32);
  int v13 = sub_1CC062BC4(v12);
  BOOL result = 0;
  if (v12 && v13)
  {
    if (a1 && *(unsigned char *)(a1 + 16) == 92 && v12 == *(void *)(a1 - 32)) {
      return 1;
    }
    int v14 = *(_DWORD *)(v12 + 20);
    uint64_t v15 = v14 & 0x7FFFFFF;
    uint64_t v16 = (void *)(v12 - 32 * v15);
    int v17 = *(unsigned __int8 *)(v12 + 16);
    if (v17 == 84)
    {
      uint64_t v18 = 0;
    }
    else if (v17 == 39)
    {
      uint64_t v18 = (*(_DWORD *)(v12 + 80) + 1);
    }
    else
    {
      uint64_t v18 = 2;
    }
    if (v14 < 0 && (uint64_t v22 = *(v16 - 1), (v22 & 0xFFFFFFFF0) != 0)) {
      uint64_t v19 = (*((_DWORD *)v16 - 3) - *(_DWORD *)((char *)v16 - v22));
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = v12 - 32 * v18 - 32 * v19 - 32;
    if (v16 != (void *)v20)
    {
      uint64_t v21 = 32 * v15 - 32 * v18 - 32 * v19 - 32;
      while (*v16 != a1)
      {
        v16 += 4;
        v21 -= 32;
        if (!v21)
        {
          uint64_t v16 = (void *)(v12 - 32 * v18 - 32 * v19 - 32);
          break;
        }
      }
    }
    return v16 != (void *)v20;
  }
  return result;
}

BOOL sub_1CC184A78(llvm::ConstantDataSequential *this)
{
  v16[2] = *MEMORY[0x1E4F143B8];
  int v2 = *((unsigned __int8 *)this + 16);
  if (!this || v2 != 17)
  {
    if (v2 != 15 || *(unsigned __int8 *)(*(void *)(*(void *)this + 24) + 8) > 6u) {
      return 0;
    }
    int v4 = *(_DWORD *)(*(void *)this + 32);
    if (!v4) {
      return 1;
    }
    unsigned int v5 = 0;
    int v6 = v4 - 1;
    while (1)
    {
      llvm::ConstantDataSequential::getElementAsAPFloat(this, v5, (uint64_t)v14);
      if ((_UNKNOWN *)v15 == &unk_1CFB2E344) {
        int v7 = (unsigned char *)v16[0];
      }
      else {
        int v7 = v14;
      }
      int v8 = v7[28] & 7;
      BOOL result = v8 != 3;
      if ((_UNKNOWN *)v15 == &unk_1CFB2E344)
      {
        int v12 = v8;
        BOOL v13 = v8 != 3;
        sub_1CB845718(v16);
      }
      else
      {
        if ((*(_DWORD *)(v15 + 8) - 64) > 0xFFFFFF7F || v16[0] == 0) {
          goto LABEL_18;
        }
        int v12 = v8;
        BOOL v13 = v8 != 3;
        MEMORY[0x1D25D9CB0](v16[0], 0x1000C8000313F17);
      }
      int v8 = v12;
      BOOL result = v13;
LABEL_18:
      if (v8 == 3 || v6 == v5++) {
        return result;
      }
    }
  }
  if (*((_UNKNOWN **)this + 4) == &unk_1CFB2E344) {
    uint64_t v3 = (char *)*((void *)this + 5);
  }
  else {
    uint64_t v3 = (char *)this + 24;
  }
  return (v3[28] & 7) != 3;
}

BOOL sub_1CC184C04(llvm::ConstantDataSequential *this, char a2)
{
  uint64_t v15[2] = *MEMORY[0x1E4F143B8];
  if ((a2 & 2) != 0) {
    return 1;
  }
  int v3 = *((unsigned __int8 *)this + 16);
  if (!this || v3 != 17)
  {
    if (!this || v3 != 15) {
      return v3 == 13;
    }
    if (*(unsigned __int8 *)(*(void *)(*(void *)this + 24) + 8) > 6u) {
      return 0;
    }
    unsigned int v5 = *(_DWORD *)(*(void *)this + 32);
    if (v5)
    {
      BOOL v6 = 0;
      unsigned int v7 = 0;
      while (1)
      {
        llvm::ConstantDataSequential::getElementAsAPFloat(this, v7, (uint64_t)v13);
        if ((_UNKNOWN *)v14 == &unk_1CFB2E344) {
          int v8 = (unsigned char *)v15[0];
        }
        else {
          int v8 = v13;
        }
        char v9 = v8[28];
        if ((_UNKNOWN *)v14 == &unk_1CFB2E344)
        {
          char v12 = v9;
          sub_1CB845718(v15);
        }
        else
        {
          if ((*(_DWORD *)(v14 + 8) - 64) > 0xFFFFFF7F || v15[0] == 0) {
            goto LABEL_20;
          }
          char v12 = v9;
          MEMORY[0x1D25D9CB0]();
        }
        char v9 = v12;
LABEL_20:
        if ((v9 & 7) != 1)
        {
          BOOL v6 = ++v7 >= v5;
          if (v5 != v7) {
            continue;
          }
        }
        return v6;
      }
    }
    return 1;
  }
  if (*((_UNKNOWN **)this + 4) == &unk_1CFB2E344) {
    int v4 = (char *)*((void *)this + 5);
  }
  else {
    int v4 = (char *)this + 24;
  }
  return (v4[28] & 7) != 1;
}

uint64_t sub_1CC184DAC(void *a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 16);
  unsigned int v3 = v2 - 28;
  BOOL v5 = v2 < 0x1C && v2 != 5 || a2 == 0;
  int v6 = v5;
  if (!v5)
  {
    if (v2 <= 0x1B) {
      unsigned int v3 = *(unsigned __int16 *)(a2 + 18);
    }
    if (v3 == 40)
    {
      int v8 = *(_DWORD *)(a2 + 20);
      if ((v8 & 0x40000000) != 0) {
        char v9 = *(void **)(a2 - 8);
      }
      else {
        char v9 = (void *)(a2 - 32 * (v8 & 0x7FFFFFF));
      }
      unsigned int v3 = *a1 == *v9;
    }
    else
    {
      unsigned int v3 = 0;
    }
  }
  return (v6 ^ 1) & v3;
}

llvm::Value *sub_1CC184E1C(unsigned __int8 *a1)
{
  uint64_t v13 = 0;
  uint64_t v11 = &v13;
  if (sub_1CBF686A0(&v11, 30, (uint64_t)a1)) {
    return (llvm::Value *)v13;
  }
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0;
  Splat = 0;
  if (sub_1CBF528D8((uint64_t)&v11, a1))
  {
    uint64_t v4 = *(void *)a1;
    unsigned int v5 = *(_DWORD *)(v10 + 8);
    if (v5 > 0x40) {
      operator new[]();
    }
    unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
    if (!v5) {
      unint64_t v6 = 0;
    }
    unsigned int v7 = (uint64_t *)(v6 & ~*(void *)v10);
    LODWORD(v12) = *(_DWORD *)(v10 + 8);
    uint64_t v11 = v7;
    int v8 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v4, (llvm::LLVMContext *)&v11, v3);
    Splat = v8;
    if ((*(_DWORD *)(v4 + 8) & 0xFE) == 0x12) {
      Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v4 + 32) | ((unint64_t)(*(_DWORD *)(v4 + 8) == 19) << 32)), (uint64_t)v8);
    }
    if (v12 >= 0x41 && v11) {
      MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
    }
  }
  return Splat;
}

uint64_t sub_1CC184F8C(unsigned int a1, uint64_t a2, uint64_t a3, const llvm::DataLayout *a4, int a5)
{
  uint64_t result = 0;
  if (a1 > 0x29 || ((1 << a1) & 0x2A90000AA00) == 0) {
    return result;
  }
  uint64_t v69 = v5;
  uint64_t v70 = v6;
  if (a2 == a3) {
    return 1;
  }
  if (a1 != 37)
  {
    if (a1 == 41)
    {
      int8x8_t v59 = 0;
      unsigned int v63 = (const llvm::DataLayout *)a2;
      int v64 = &v59;
      uint64_t v65 = 0;
      unsigned int v11 = *(unsigned __int8 *)(a3 + 16);
      if (v11 < 0x1C)
      {
        if (v11 != 5) {
          return 0;
        }
        unsigned int v14 = *(unsigned __int16 *)(a3 + 18);
        HIDWORD(v18) = v14 - 13;
        LODWORD(v18) = v14 - 13;
        unsigned int v17 = v18 >> 1;
        if (v17 > 6 || ((1 << v17) & 0x47) == 0) {
          return 0;
        }
      }
      else
      {
        HIDWORD(v13) = v11 - 41;
        LODWORD(v13) = v11 - 41;
        unsigned int v12 = v13 >> 1;
        if (v12 > 6 || ((1 << v12) & 0x47) == 0) {
          return 0;
        }
        unsigned int v14 = v11 - 28;
      }
      if (v14 == 13 && (*(unsigned char *)(a3 + 17) & 4) != 0)
      {
        int v19 = *(_DWORD *)(a3 + 20);
        uint64_t v20 = (v19 & 0x40000000) != 0 ? *(void *)(a3 - 8) : a3 - 32 * (v19 & 0x7FFFFFF);
        if (*(void *)v20 == a2)
        {
          uint64_t result = sub_1CBF528D8((uint64_t)&v64, *(unsigned __int8 **)(v20 + 32));
          if (result)
          {
            uint64_t v29 = (void *)v59;
            unsigned int v30 = *(_DWORD *)(*(void *)&v59 + 8);
            unsigned int v31 = v30 - 1;
            if (v30 >= 0x41) {
              uint64_t v29 = (void *)(**(void **)&v59 + 8 * (v31 >> 6));
            }
            return ((*v29 >> v31) & 1) == 0;
          }
          return result;
        }
      }
    }
    return 0;
  }
  uint64_t v58 = 0;
  unsigned int v63 = (const llvm::DataLayout *)a2;
  int v64 = (int8x8_t *)&v58;
  uint64_t v65 = 0;
  if (sub_1CC185580(&v63, a3)) {
    return 1;
  }
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v55 = 0;
  unsigned int v63 = (const llvm::DataLayout *)&v57;
  int v64 = (int8x8_t *)&v56;
  uint64_t v65 = 0;
  unsigned int v21 = *(unsigned __int8 *)(a2 + 16);
  if (v21 < 0x1C)
  {
    if (v21 != 5) {
      goto LABEL_47;
    }
    unsigned int v24 = *(unsigned __int16 *)(a2 + 18);
    HIDWORD(v26) = v24 - 13;
    LODWORD(v26) = v24 - 13;
    unsigned int v25 = v26 >> 1;
    if (v25 > 6 || ((1 << v25) & 0x47) == 0) {
      goto LABEL_47;
    }
  }
  else
  {
    HIDWORD(v23) = v21 - 41;
    LODWORD(v23) = v21 - 41;
    unsigned int v22 = v23 >> 1;
    if (v22 > 6 || ((1 << v22) & 0x47) == 0) {
      goto LABEL_47;
    }
    unsigned int v24 = v21 - 28;
  }
  if (v24 != 13 || (*(unsigned char *)(a2 + 17) & 2) == 0) {
    goto LABEL_47;
  }
  int v27 = *(_DWORD *)(a2 + 20);
  int v28 = (v27 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v27 & 0x7FFFFFF));
  uint64_t v32 = *v28;
  if (!v32
    || ((v57 = v32, int v33 = *(_DWORD *)(a2 + 20), (v33 & 0x40000000) != 0)
      ? (uint64_t v34 = *(void *)(a2 - 8))
      : (uint64_t v34 = a2 - 32 * (v33 & 0x7FFFFFF)),
        !sub_1CBF528D8((uint64_t)&v64, *(unsigned __int8 **)(v34 + 32))
     || (int8x8_t v59 = (int8x8_t)v57, v60 = &v55, v61 = 0, (sub_1CC185580(&v59, a3) & 1) == 0)))
  {
LABEL_47:
    unsigned int v63 = (const llvm::DataLayout *)&v57;
    int v64 = (int8x8_t *)&v56;
    uint64_t v65 = 0;
    int v37 = *(unsigned __int8 *)(a2 + 16);
    if (v37 == 5)
    {
      if (*(_WORD *)(a2 + 18) != 29) {
        return 0;
      }
      uint64_t v38 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
      if (!*(void *)v38) {
        return 0;
      }
      uint64_t v57 = *(void *)v38;
      if ((sub_1CBF5295C((uint64_t)&v64, *(llvm::Constant **)(v38 + 32)) & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if (v37 != 57) {
        return 0;
      }
      if (!*(void *)(a2 - 64)) {
        return 0;
      }
      uint64_t v57 = *(void *)(a2 - 64);
      if (!sub_1CBF528D8((uint64_t)&v64, *(unsigned __int8 **)(a2 - 32))) {
        return 0;
      }
    }
    int8x8_t v59 = (int8x8_t)v57;
    unsigned int v60 = &v55;
    uint64_t v61 = 0;
    int v39 = *(unsigned __int8 *)(a3 + 16);
    if (v39 == 5)
    {
      if (*(_WORD *)(a3 + 18) != 29) {
        return 0;
      }
      uint64_t v40 = a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF);
      if (v57 != *(void *)v40 || (sub_1CBF5295C((uint64_t)&v60, *(llvm::Constant **)(v40 + 32)) & 1) == 0) {
        return 0;
      }
    }
    else if (v39 != 57 {
           || v57 != *(void *)(a3 - 64)
    }
           || !sub_1CBF528D8((uint64_t)&v60, *(unsigned __int8 **)(a3 - 32)))
    {
      return 0;
    }
    unsigned int v41 = *(_DWORD *)(v56 + 8);
    LODWORD(v60) = v41;
    if (v41 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v59);
    }
    unsigned int v62 = v41;
    int8x8_t v59 = 0;
    uint64_t v61 = 0;
    if (!v57 || *(unsigned __int8 *)(v57 + 16) < 0x1Cu || (uint64_t v42 = v57, !*(void *)(v57 + 40))) {
      uint64_t v42 = 0;
    }
    unsigned int v63 = a4;
    int v64 = 0;
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    uint64_t v65 = v42;
    char v68 = 1;
    sub_1CC15FBF8(v57, &v59, a5 + 1, &v63);
    uint64_t v43 = *(unsigned int *)(v56 + 8);
    if (v43 > 0x40)
    {
      uint64_t v45 = 0;
      int8x8_t v44 = v59;
      while ((*(void *)(*(void *)v56 + v45) & ~*(void *)(*(void *)&v59 + v45)) == 0)
      {
        v45 += 8;
        if ((((unint64_t)(v43 + 63) >> 3) & 0x3FFFFFF8) == v45) {
          goto LABEL_77;
        }
      }
    }
    else
    {
      int8x8_t v44 = v59;
      if ((*(void *)v56 & ~*(void *)&v59) == 0)
      {
LABEL_77:
        uint64_t v46 = *(unsigned int *)(v55 + 8);
        if (v46 > 0x40)
        {
          unint64_t v47 = (unint64_t)(v46 + 63) >> 6;
          int v48 = *(uint64_t **)v55;
          while (1)
          {
            uint64_t v50 = *v48++;
            uint64_t v49 = v50;
            uint64_t v51 = **(void **)&v44;
            *(void *)&v44 += 8;
            if ((v49 & ~v51) != 0) {
              break;
            }
            if (!--v47) {
              goto LABEL_79;
            }
          }
        }
        else if ((*(void *)v55 & ~*(void *)&v44) == 0)
        {
LABEL_79:
          if (v62 >= 0x41 && v61) {
            MEMORY[0x1D25D9CB0](v61, 0x1000C8000313F17);
          }
          if (v60 >= 0x41 && *(void *)&v59) {
            MEMORY[0x1D25D9CB0](*(void *)&v59, 0x1000C8000313F17);
          }
          goto LABEL_43;
        }
      }
    }
    if (v62 >= 0x41 && v61) {
      MEMORY[0x1D25D9CB0](v61, 0x1000C8000313F17);
    }
    if (v60 >= 0x41 && *(void *)&v59) {
      MEMORY[0x1D25D9CB0](*(void *)&v59, 0x1000C8000313F17);
    }
    return 0;
  }
LABEL_43:
  uint64_t v35 = *(unsigned int *)(v56 + 8);
  if (v35 > 0x40)
  {
    unint64_t v52 = ((unint64_t)(v35 + 63) >> 3) & 0x3FFFFFF8;
    do
    {
      if (!v52)
      {
        int v36 = 0;
        return v36 < 1;
      }
      unint64_t v53 = *(void *)(*(void *)v56 - 8 + v52);
      unint64_t v54 = *(void *)(*(void *)v55 - 8 + v52);
      v52 -= 8;
    }
    while (v53 == v54);
    if (v53 > v54) {
      int v36 = 1;
    }
    else {
      int v36 = -1;
    }
  }
  else
  {
    int v36 = *(void *)v56 > *(void *)v55;
    if (*(void *)v56 < *(void *)v55) {
      int v36 = -1;
    }
  }
  return v36 < 1;
}

uint64_t sub_1CC185580(void *a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 < 0x1C)
  {
    if (v2 != 5) {
      return 0;
    }
    unsigned int v8 = *(unsigned __int16 *)(a2 + 18);
    HIDWORD(v10) = v8 - 13;
    LODWORD(v10) = v8 - 13;
    unsigned int v9 = v10 >> 1;
    BOOL v5 = v9 > 6;
    int v11 = (1 << v9) & 0x47;
    if (v5 || v11 == 0) {
      return 0;
    }
  }
  else
  {
    HIDWORD(v4) = v2 - 41;
    LODWORD(v4) = v2 - 41;
    unsigned int v3 = v4 >> 1;
    BOOL v5 = v3 > 6;
    int v6 = (1 << v3) & 0x47;
    if (v5 || v6 == 0) {
      return 0;
    }
    unsigned int v8 = v2 - 28;
  }
  if (v8 != 13 || (*(unsigned char *)(a2 + 17) & 2) == 0) {
    return 0;
  }
  int v13 = *(_DWORD *)(a2 + 20);
  uint64_t v14 = (v13 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v13 & 0x7FFFFFF);
  if (*a1 != *(void *)v14) {
    return 0;
  }
  return sub_1CBF528D8((uint64_t)(a1 + 1), *(unsigned __int8 **)(v14 + 32));
}

uint64_t sub_1CC185634(void **a1, uint64_t *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = *a2;
  int v4 = *(_DWORD *)(*a2 + 8);
  if ((v4 & 0xFE) == 0x12) {
    int v4 = *(_DWORD *)(**(void **)(v3 + 16) + 8);
  }
  if (v4 != 269) {
    return 0;
  }
  int v5 = *((unsigned __int8 *)a2 + 16);
  if (v5 == 85)
  {
    int v9 = 0;
    unint64_t v10 = (unsigned __int8 *)*(a2 - 8);
    if (!v10 || v10[16] > 0x14u) {
      return v9 & v3;
    }
    uint64_t v11 = *(a2 - 12);
    uint64_t v12 = *(a2 - 4);
    if (llvm::Constant::isOneValue((llvm::Constant *)v10))
    {
      if (v11 && (**a1 = v11, v12))
      {
        *a1[1] = v12;
        int v9 = 1;
        LODWORD(v3) = 1;
      }
      else
      {
        LODWORD(v3) = 0;
        int v9 = 1;
      }
      return v9 & v3;
    }
LABEL_16:
    int v9 = 0;
    return v9 & v3;
  }
  if (v5 != 57) {
    goto LABEL_16;
  }
  int v6 = *((_DWORD *)a2 + 5);
  if ((v6 & 0x40000000) != 0) {
    unsigned int v7 = (uint64_t *)*(a2 - 1);
  }
  else {
    unsigned int v7 = &a2[-4 * (v6 & 0x7FFFFFF)];
  }
  uint64_t v13 = *v7;
  if (*v7)
  {
    uint64_t v14 = v7[4];
    **a1 = v13;
    if (v14)
    {
      *a1[1] = v14;
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1CC185750(void **a1, uint64_t *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = *a2;
  int v4 = *(_DWORD *)(*a2 + 8);
  if ((v4 & 0xFE) == 0x12) {
    int v4 = *(_DWORD *)(**(void **)(v3 + 16) + 8);
  }
  if (v4 != 269) {
    return 0;
  }
  int v5 = *((unsigned __int8 *)a2 + 16);
  if (v5 == 85)
  {
    int v9 = 0;
    uint64_t v10 = *(a2 - 4);
    if (!v10) {
      return v9 & v3;
    }
    unsigned int v11 = *(unsigned __int8 *)(v10 + 16);
    if (v11 > 0x14) {
      return v9 & v3;
    }
    uint64_t v12 = *(a2 - 12);
    uint64_t v13 = *(a2 - 8);
    if (v11 == 16)
    {
      uint64_t v14 = *(unsigned int *)(v10 + 32);
      if (v14 >= 0x41)
      {
        int v18 = 0;
        int64_t v19 = (unint64_t)(v14 + 63) >> 6;
        do
        {
          if (v19-- < 1) {
            break;
          }
          unint64_t v21 = *(void *)(*(void *)(v10 + 24) + 8 * v19);
          v18 += __clz(v21);
        }
        while (!v21);
        int v22 = v14 | 0xFFFFFFC0;
        if ((v14 & 0x3F) == 0) {
          int v22 = 0;
        }
        LODWORD(v3) = v18 + v22;
        if (v3 != v14) {
          goto LABEL_15;
        }
      }
      else if (*(void *)(v10 + 24))
      {
        goto LABEL_15;
      }
    }
    else if (v11 == 17)
    {
      if ((sub_1CB844168(v10, 0.0) & 1) == 0) {
        goto LABEL_15;
      }
    }
    else if (v11 - 18 >= 3 && v11 != 13)
    {
      goto LABEL_15;
    }
    if (v12 && (**a1 = v12, v13))
    {
      *a1[1] = v13;
      int v9 = 1;
      LODWORD(v3) = 1;
    }
    else
    {
      LODWORD(v3) = 0;
      int v9 = 1;
    }
    return v9 & v3;
  }
  if (v5 != 56)
  {
LABEL_15:
    int v9 = 0;
    return v9 & v3;
  }
  int v6 = *((_DWORD *)a2 + 5);
  if ((v6 & 0x40000000) != 0) {
    unsigned int v7 = (uint64_t *)*(a2 - 1);
  }
  else {
    unsigned int v7 = &a2[-4 * (v6 & 0x7FFFFFF)];
  }
  uint64_t v15 = *v7;
  if (*v7)
  {
    uint64_t v16 = v7[4];
    **a1 = v15;
    if (v16)
    {
      *a1[1] = v16;
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1CC1858EC(void *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 != 5)
  {
    if (v4 != 58) {
      return 0;
    }
    uint64_t v5 = *(void *)(a2 - 64);
    int v6 = *(unsigned __int8 *)(v5 + 16);
    if (v6 == 5)
    {
      if (*(_WORD *)(v5 + 18) != 29) {
        goto LABEL_28;
      }
      uint64_t v16 = (uint64_t *)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF));
      uint64_t v7 = *v16;
      if (*a1 == *v16)
      {
        uint64_t v17 = v16[4];
        if (a1[1] == v17) {
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v17 = v16[4];
      }
      if (*a1 != v17) {
        goto LABEL_28;
      }
    }
    else
    {
      if (v6 != 57) {
        goto LABEL_28;
      }
      uint64_t v7 = *(void *)(v5 - 64);
      if (*a1 == v7)
      {
        uint64_t v8 = *(void *)(v5 - 32);
        if (a1[1] == v8) {
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v8 = *(void *)(v5 - 32);
      }
      if (*a1 != v8) {
        goto LABEL_28;
      }
    }
    if (a1[1] != v7) {
      goto LABEL_28;
    }
LABEL_27:
    if ((sub_1CBF687D0((uint64_t)(a1 + 2), *(llvm::Constant **)(a2 - 32)) & 1) == 0)
    {
LABEL_28:
      uint64_t v20 = *(void *)(a2 - 32);
      int v21 = *(unsigned __int8 *)(v20 + 16);
      if (v21 != 5)
      {
        if (v21 != 57) {
          return 0;
        }
        uint64_t v22 = *(void *)(v20 - 64);
        if (*a1 != v22)
        {
          uint64_t v23 = *(void *)(v20 - 32);
          goto LABEL_36;
        }
        uint64_t v23 = *(void *)(v20 - 32);
        if (a1[1] != v23)
        {
LABEL_36:
          if (*a1 != v23) {
            return 0;
          }
          goto LABEL_40;
        }
LABEL_41:
        unint64_t v26 = *(llvm::Constant **)(a2 - 64);
        return sub_1CBF687D0((uint64_t)(a1 + 2), v26);
      }
      if (*(_WORD *)(v20 + 18) != 29) {
        return 0;
      }
      unsigned int v24 = (uint64_t *)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF));
      uint64_t v22 = *v24;
      if (*a1 == *v24)
      {
        uint64_t v25 = v24[4];
        if (a1[1] == v25) {
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t v25 = v24[4];
      }
      if (*a1 != v25) {
        return 0;
      }
LABEL_40:
      if (a1[1] == v22) {
        goto LABEL_41;
      }
      return 0;
    }
    return 1;
  }
  if (*(_WORD *)(a2 + 18) != 30) {
    return 0;
  }
  uint64_t v9 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  uint64_t v10 = -v9;
  unsigned int v11 = (llvm::Constant **)(a2 - 32 * v9);
  uint64_t v12 = *v11;
  int v13 = *((unsigned __int8 *)*v11 + 16);
  if (v13 == 5)
  {
    if (*((_WORD *)v12 + 9) != 29) {
      goto LABEL_50;
    }
    int v18 = (uint64_t *)((char *)v12 - 32 * (*((_DWORD *)v12 + 5) & 0x7FFFFFF));
    uint64_t v14 = *v18;
    if (*a1 == *v18)
    {
      uint64_t v19 = v18[4];
      if (a1[1] == v19) {
        goto LABEL_47;
      }
    }
    else
    {
      uint64_t v19 = v18[4];
    }
    if (*a1 != v19) {
      goto LABEL_50;
    }
LABEL_46:
    if (a1[1] != v14) {
      goto LABEL_50;
    }
    goto LABEL_47;
  }
  if (v13 != 57) {
    goto LABEL_50;
  }
  uint64_t v14 = *((void *)v12 - 8);
  if (*a1 != v14)
  {
    uint64_t v15 = *((void *)v12 - 4);
    goto LABEL_22;
  }
  uint64_t v15 = *((void *)v12 - 4);
  if (a1[1] != v15)
  {
LABEL_22:
    if (*a1 != v15) {
      goto LABEL_50;
    }
    goto LABEL_46;
  }
LABEL_47:
  if (sub_1CBF68974((uint64_t)(a1 + 2), v11[4])) {
    return 1;
  }
  uint64_t v10 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
LABEL_50:
  uint64_t v28 = a2 + 32 * v10;
  uint64_t v29 = *(void *)(v28 + 32);
  int v30 = *(unsigned __int8 *)(v29 + 16);
  if (v30 == 5)
  {
    if (*(_WORD *)(v29 + 18) != 29) {
      return 0;
    }
    int v33 = (uint64_t *)(v29 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF));
    uint64_t v31 = *v33;
    if (*a1 == *v33)
    {
      uint64_t v34 = v33[4];
      if (a1[1] == v34) {
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v34 = v33[4];
    }
    if (*a1 != v34) {
      return 0;
    }
  }
  else
  {
    if (v30 != 57) {
      return 0;
    }
    uint64_t v31 = *(void *)(v29 - 64);
    if (*a1 == v31)
    {
      uint64_t v32 = *(void *)(v29 - 32);
      if (a1[1] == v32) {
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v32 = *(void *)(v29 - 32);
    }
    if (*a1 != v32) {
      return 0;
    }
  }
  if (a1[1] != v31) {
    return 0;
  }
LABEL_64:
  uint64_t v35 = *(llvm::Constant **)v28;

  return sub_1CBF68974((uint64_t)(a1 + 2), v35);
}

BOOL sub_1CC185C44(uint64_t a1, llvm::Constant *a2)
{
  if (!a2 || *((unsigned char *)a2 + 16) != 17)
  {
    uint64_t v6 = *(void *)a2;
    if (*(void *)a2) {
      BOOL v7 = (*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 18;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      SplatValue = llvm::Constant::getSplatValue(a2, 0);
      if (SplatValue && SplatValue[16] == 17) {
        goto LABEL_4;
      }
      if (*(unsigned char *)(v6 + 8) == 18)
      {
        int v8 = *(_DWORD *)(v6 + 32);
        if (v8)
        {
          uint64_t v9 = 0;
          BOOL v5 = 0;
          while (1)
          {
            AggregateElement = llvm::Constant::getAggregateElement(a2, v9);
            if (!AggregateElement) {
              break;
            }
            int v11 = *((unsigned __int8 *)AggregateElement + 16);
            if ((v11 - 11) >= 2)
            {
              if (v11 != 17) {
                break;
              }
              uint64_t v12 = AggregateElement + 3;
              if ((_UNKNOWN *)AggregateElement[4] == &unk_1CFB2E344) {
                uint64_t v12 = (void *)AggregateElement[5];
              }
              if ((*((unsigned char *)v12 + 28) & 0xF) != 3) {
                break;
              }
              BOOL v5 = 1;
            }
            uint64_t v9 = (llvm::Type *)(v9 + 1);
            if (v8 == v9) {
              return v5;
            }
          }
        }
      }
    }
    return 0;
  }
  SplatValue = a2;
LABEL_4:
  int v4 = SplatValue + 24;
  if (*((_UNKNOWN **)SplatValue + 4) == &unk_1CFB2E344) {
    int v4 = (char *)*((void *)SplatValue + 5);
  }
  return (v4[28] & 0xF) == 3;
}

uint64_t sub_1CC185D70(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 < 0x1C)
  {
    if (v4 != 5) {
      return 0;
    }
    unsigned int v10 = *(unsigned __int16 *)(a2 + 18);
    HIDWORD(v12) = v10 - 13;
    LODWORD(v12) = v10 - 13;
    unsigned int v11 = v12 >> 1;
    BOOL v7 = v11 > 6;
    int v13 = (1 << v11) & 0x47;
    if (v7 || v13 == 0) {
      return 0;
    }
  }
  else
  {
    HIDWORD(v6) = v4 - 41;
    LODWORD(v6) = v4 - 41;
    unsigned int v5 = v6 >> 1;
    BOOL v7 = v5 > 6;
    int v8 = (1 << v5) & 0x47;
    if (v7 || v8 == 0) {
      return 0;
    }
    unsigned int v10 = v4 - 28;
  }
  if (v10 != 15 || (*(unsigned char *)(a2 + 17) & 4) == 0) {
    return 0;
  }
  int v16 = *(_DWORD *)(a2 + 20);
  if ((v16 & 0x40000000) != 0) {
    uint64_t v17 = *(llvm::Constant ***)(a2 - 8);
  }
  else {
    uint64_t v17 = (llvm::Constant **)(a2 - 32 * (v16 & 0x7FFFFFF));
  }
  uint64_t result = sub_1CBF535C4(a1, *v17);
  if (result)
  {
    int v18 = *(_DWORD *)(a2 + 20);
    if ((v18 & 0x40000000) != 0) {
      uint64_t v19 = *(void *)(a2 - 8);
    }
    else {
      uint64_t v19 = a2 - 32 * (v18 & 0x7FFFFFF);
    }
    return *(void *)(a1 + 8) == *(void *)(v19 + 32);
  }
  return result;
}

uint64_t sub_1CC185E64()
{
  int v3 = 1;
  int v1 = 20;
  unsigned int v2 = &v1;
  sub_1CD4D3A54(&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCC86C8, &dword_1CB82C000);
  int v3 = 1;
  LOBYTE(v1) = 0;
  unsigned int v2 = &v1;
  sub_1CD45C54C((uint64_t)&unk_1EBD04C38, "branch-on-poison-as-ub", &v3, (unsigned char **)&v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD04C38, &dword_1CB82C000);
}

BOOL llvm::hasVectorInstrinsicScalarOpd(llvm *this, int a2)
{
  if (this <= 0x36 && ((1 << (char)this) & 0x50000000000002) != 0) {
    return a2 == 1;
  }
  if ((this - 276) > 0x20 || ((1 << (this - 20)) & 0x180000003) == 0)
  {
    if (this != 239) {
      return 0;
    }
    return a2 == 1;
  }
  return a2 == 2;
}

llvm *llvm::getVectorIntrinsicIDForCall(uint64_t a1, uint64_t *a2)
{
  unsigned int v2 = (llvm *)llvm::getIntrinsicForCallSite(a1, a2);
  int v3 = v2;
  if (v2 && (llvm::isTriviallyVectorizable(v2) & 1) == 0)
  {
    if ((int)v3 <= 125)
    {
      if (v3 == 7) {
        return v3;
      }
      return 0;
    }
    if (((v3 - 126) > 0x2A || ((1 << (v3 - 126)) & 0x60000000001) == 0)
      && v3 != 244
      && v3 != 272)
    {
      return 0;
    }
  }
  return v3;
}

unint64_t llvm::getGEPInductionOperand(llvm *this, const llvm::GetElementPtrInst *a2)
{
  int v3 = (llvm::DataLayout *)(*(void *)(*(void *)(*((void *)this + 5) + 56) + 40) + 272);
  unint64_t v4 = (*((_DWORD *)this + 5) & 0x7FFFFFFu) - 1;
  unsigned int v5 = (llvm::Type *)*((void *)this + 9);
  uint64_t v6 = sub_1CB83544C((uint64_t)v3, (uint64_t)v5);
  uint64_t v8 = v7;
  uint64_t Alignment = llvm::DataLayout::getAlignment(v3, v5, 1);
  unint64_t v10 = (unint64_t)(v6 + 7) >> 3;
  do
  {
    if (v4 < 2) {
      break;
    }
    uint64_t v11 = *((void *)this + 4 * v4 + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
    unsigned int v12 = *(unsigned __int8 *)(v11 + 16);
    BOOL v13 = !v11 || v12 > 0x14;
    if (v13) {
      break;
    }
    if (v12 == 16)
    {
      uint64_t v14 = *(unsigned int *)(v11 + 32);
      if (v14 >= 0x41)
      {
        int v33 = 0;
        int64_t v34 = (unint64_t)(v14 + 63) >> 6;
        do
        {
          BOOL v13 = v34-- < 1;
          if (v13) {
            break;
          }
          unint64_t v35 = *(void *)(*(void *)(v11 + 24) + 8 * v34);
          v33 += __clz(v35);
        }
        while (!v35);
        int v36 = v14 | 0xFFFFFFC0;
        if ((v14 & 0x3F) == 0) {
          int v36 = 0;
        }
        if (v33 + v36 != v14)
        {
LABEL_31:
          if ((sub_1CC03F414((uint64_t)&v38, (llvm::Constant *)v11) & 1) == 0) {
            return v4;
          }
        }
      }
      else if (*(void *)(v11 + 24))
      {
        goto LABEL_31;
      }
    }
    else if (v12 == 17)
    {
      if ((sub_1CB844168(*((void *)this + 4 * v4 + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)), 0.0) & 1) == 0) {
        goto LABEL_31;
      }
    }
    else if (v12 - 18 >= 3 && v12 != 13)
    {
      goto LABEL_31;
    }
    if (*((unsigned char *)this + 16) != 62 || this == 0) {
      uint64_t v16 = 24;
    }
    else {
      uint64_t v16 = 64;
    }
    int v17 = *((_DWORD *)this + 5);
    if ((v17 & 0x40000000) != 0) {
      int v18 = (char *)*((void *)this - 1);
    }
    else {
      int v18 = (char *)this - 32 * (v17 & 0x7FFFFFF);
    }
    uint64_t v19 = *(void *)((char *)this + v16) | 4;
    uint64_t v38 = (const llvm::Value **)(v18 + 32);
    uint64_t v39 = v19;
    if (v4 != 2)
    {
      unint64_t v20 = (v4 - 2) + 1;
      do
      {
        sub_1CB8460E4((uint64_t)&v38);
        --v20;
      }
      while (v20 > 1);
      uint64_t v19 = v39;
    }
    TypeAtIndex = (llvm::StructType *)(v19 & 0xFFFFFFFFFFFFFFF8);
    if ((v19 & 4) == 0 || !TypeAtIndex) {
      TypeAtIndex = (llvm::StructType *)llvm::StructType::getTypeAtIndex(TypeAtIndex, *v38);
    }
    BOOL v37 = v8 == 1;
    uint64_t v22 = ((1 << Alignment) + v10 - 1) & -(1 << Alignment);
    unint64_t v23 = (unint64_t)(sub_1CB83544C((uint64_t)v3, (uint64_t)TypeAtIndex) + 7) >> 3;
    unint64_t v24 = v10;
    uint64_t v25 = Alignment;
    uint64_t v26 = v8;
    BOOL v28 = v27 == 1;
    char v29 = llvm::DataLayout::getAlignment(v3, TypeAtIndex, 1);
    char v30 = v37 ^ v28;
    uint64_t v8 = v26;
    uint64_t Alignment = v25;
    unint64_t v10 = v24;
    unint64_t v4 = (__PAIR64__(v4, ((((1 << v29) + v23 - 1) & -(1 << v29)) != v22) | (v30 & 1)) - 1) >> 32;
  }
  while (!(((((1 << v29) + v23 - 1) & -(1 << v29)) != v22) | v30 & 1));
  return v4;
}

llvm *llvm::stripGetElementPtr(llvm *this, llvm::Value *a2, llvm::ScalarEvolution *a3, llvm::Loop *a4)
{
  unint64_t v4 = this;
  if (this && *((unsigned char *)this + 16) == 62)
  {
    unsigned int GEPInductionOperand = llvm::getGEPInductionOperand(this, a2);
    int v8 = *((_DWORD *)v4 + 5);
    uint64_t v9 = GEPInductionOperand;
    uint64_t v10 = v8 & 0x7FFFFFF;
    if ((v8 & 0x7FFFFFF) != 0)
    {
      uint64_t v11 = 0;
      while (v11 == v9)
      {
LABEL_16:
        if (++v11 == v10)
        {
          uint64_t v21 = *((_DWORD *)v4 + 5) & 0x7FFFFFF;
          return (llvm *)*((void *)v4 + 4 * v9 + -4 * v21);
        }
      }
      unint64_t v12 = *((void *)v4 + 4 * v11 + -4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF));
      uint64_t v13 = *((void *)a2 + 13);
      unsigned int v14 = *((_DWORD *)a2 + 30);
      if (v14)
      {
        unsigned int v15 = ((v12 >> 4) ^ (v12 >> 9)) & (v14 - 1);
        uint64_t v16 = v13 + 48 * v15;
        uint64_t v17 = *(void *)(v16 + 24);
        if (v17 == v12)
        {
LABEL_13:
          if (v16 == v13 + 48 * v14 || (SCEVIter = *(const llvm::SCEV **)(v16 + 40)) == 0) {
            SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(a2, v12);
          }
          if (llvm::ScalarEvolution::getLoopDisposition(a2, SCEVIter, a3) != 1) {
            return v4;
          }
          goto LABEL_16;
        }
        int v18 = 1;
        while (v17 != -4096)
        {
          unsigned int v19 = v15 + v18++;
          unsigned int v15 = v19 & (v14 - 1);
          uint64_t v16 = v13 + 48 * v15;
          uint64_t v17 = *(void *)(v16 + 24);
          if (v17 == v12) {
            goto LABEL_13;
          }
        }
      }
      uint64_t v16 = v13 + 48 * v14;
      goto LABEL_13;
    }
    uint64_t v21 = 0;
    return (llvm *)*((void *)v4 + 4 * v9 + -4 * v21);
  }
  return v4;
}

uint64_t llvm::getUniqueCastUse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t result = *(void *)(v3 + 24);
      unsigned int v6 = *(unsigned __int8 *)(result + 16);
      if (result) {
        BOOL v7 = v6 >= 0x1C;
      }
      else {
        BOOL v7 = 0;
      }
      BOOL v8 = v7 && v6 - 79 >= 0xFFFFFFF3;
      if (v8 && *(void *)result == a3)
      {
        if (v4) {
          return 0;
        }
      }
      else
      {
        uint64_t result = v4;
      }
      uint64_t v3 = *(void *)(v3 + 8);
      uint64_t v4 = result;
      if (!v3) {
        return result;
      }
    }
  }
  return 0;
}

uint64_t llvm::getStrideFromPointer(llvm *this, llvm::Value *a2, llvm::ScalarEvolution *a3, llvm::Loop *a4)
{
  v44[3] = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)(*(void *)this + 8) & 0xFE) == 0x10
    || *(void *)this == 0
    || *(_DWORD *)(*(void *)this + 8) != 15)
  {
    return 0;
  }
  ElementPtr = llvm::stripGetElementPtr(this, a2, a3, a4);
  uint64_t v10 = ElementPtr;
  uint64_t v11 = *((void *)a2 + 13);
  unsigned int v12 = *((_DWORD *)a2 + 30);
  if (!v12) {
    goto LABEL_15;
  }
  unsigned int v13 = ((ElementPtr >> 4) ^ (ElementPtr >> 9)) & (v12 - 1);
  uint64_t v14 = v11 + 48 * v13;
  unsigned int v15 = *(llvm **)(v14 + 24);
  if (v15 != ElementPtr)
  {
    int v16 = 1;
    while (v15 != (llvm *)-4096)
    {
      unsigned int v17 = v13 + v16++;
      unsigned int v13 = v17 & (v12 - 1);
      uint64_t v14 = v11 + 48 * v13;
      unsigned int v15 = *(llvm **)(v14 + 24);
      if (v15 == ElementPtr) {
        goto LABEL_16;
      }
    }
LABEL_15:
    uint64_t v14 = v11 + 48 * v12;
  }
LABEL_16:
  if (v14 == v11 + 48 * v12 || (uint64_t SCEVIter = *(void *)(v14 + 40)) == 0) {
    uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter(a2, (unint64_t)v10);
  }
  int v19 = *(unsigned __int16 *)(SCEVIter + 24);
  if (v10 != this && (v19 - 1) <= 2)
  {
    do
    {
      uint64_t SCEVIter = *(void *)(SCEVIter + 32);
      int v19 = *(unsigned __int16 *)(SCEVIter + 24);
      if (SCEVIter) {
        BOOL v20 = (v19 - 1) >= 3;
      }
      else {
        BOOL v20 = 1;
      }
    }
    while (!v20);
  }
  if (v19 != 7) {
    return 0;
  }
  uint64_t v21 = *(void *)(SCEVIter + 40);
  if (v21 == 2)
  {
    uint64_t v22 = *(void *)(*(void *)(SCEVIter + 32) + 8);
  }
  else
  {
    uint64_t v37 = *(void *)(SCEVIter + 32);
    uint64_t v41 = SCEVIter;
    uint64_t v42 = v44;
    uint64_t v43 = 0x300000000;
    uint64_t v38 = v21;
    size_t v39 = 8 * v21 - 8;
    if (v39 >= 0x19) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v40 = 0;
    if (v38 != 1)
    {
      memcpy(v42, (const void *)(v37 + 8), v39);
      int v40 = v43;
    }
    LODWORD(v43) = v40 + (v39 >> 3);
    uint64_t v22 = sub_1CD478318(a2, (uint64_t)&v42, *(const llvm::Loop **)(v41 + 48), 0);
    if (v42 != v44) {
      free(v42);
    }
  }
  if (!v22) {
    return 0;
  }
  if (v10 != this || *(_WORD *)(v22 + 24) != 5) {
    goto LABEL_36;
  }
  unint64_t v23 = *(void **)(v22 + 32);
  if (*(_WORD *)(*v23 + 24)) {
    return 0;
  }
  uint64_t v24 = *(void *)(*v23 + 32);
  unsigned int v25 = *(_DWORD *)(v24 + 32);
  if (v25 > 0x40) {
    return 0;
  }
  uint64_t v26 = 0;
  if ((uint64_t)(*(void *)(v24 + 24) << -(char)v25) >> -(char)v25 == 1)
  {
    uint64_t v22 = v23[1];
LABEL_36:
    int v27 = *(unsigned __int16 *)(v22 + 24);
    if (v22) {
      BOOL v28 = (v27 - 4) >= 0xFFFFFFFD;
    }
    else {
      BOOL v28 = 0;
    }
    if (v28)
    {
      uint64_t v30 = v22 + 32;
      uint64_t v22 = *(void *)(v22 + 32);
      uint64_t v29 = *(void *)(v30 + 8);
      int v27 = *(unsigned __int16 *)(v22 + 24);
    }
    else
    {
      uint64_t v29 = 0;
    }
    if (v27 != 14) {
      return 0;
    }
    uint64_t v26 = *(void *)(v22 - 8);
    if (!llvm::Loop::isLoopInvariant((uint64_t)a3, v26)) {
      return 0;
    }
    if (v29)
    {
      uint64_t v31 = *(void *)(v26 + 8);
      if (v31)
      {
        uint64_t v32 = 0;
        while (1)
        {
          uint64_t v26 = *(void *)(v31 + 24);
          unsigned int v33 = *(unsigned __int8 *)(v26 + 16);
          if (v26) {
            BOOL v34 = v33 >= 0x1C;
          }
          else {
            BOOL v34 = 0;
          }
          BOOL v35 = v34 && v33 - 79 >= 0xFFFFFFF3;
          if (v35 && *(void *)v26 == v29)
          {
            if (v32) {
              return 0;
            }
          }
          else
          {
            uint64_t v26 = v32;
          }
          uint64_t v31 = *(void *)(v31 + 8);
          uint64_t v32 = v26;
          if (!v31) {
            return v26;
          }
        }
      }
      return 0;
    }
  }
  return v26;
}

llvm::UndefValue *llvm::findScalarElement(llvm *this, llvm::Value *a2)
{
  unsigned int v2 = a2;
  while (2)
  {
    while (1)
    {
      uint64_t v4 = (unsigned __int8 *)this;
      while (1)
      {
        uint64_t v5 = *(void *)v4;
        int v6 = *(unsigned __int8 *)(*(void *)v4 + 8);
        if (*(void *)v4) {
          BOOL v7 = v6 == 18;
        }
        else {
          BOOL v7 = 0;
        }
        if (v7 && *(_DWORD *)(v5 + 32) <= v2) {
          goto LABEL_54;
        }
        unsigned int v8 = v4[16];
        if (v8 <= 0x14)
        {
          return (llvm::UndefValue *)llvm::Constant::getAggregateElement((llvm::Constant *)v4, v2);
        }
        if (v8 != 90) {
          break;
        }
        uint64_t v9 = *((void *)v4 - 4);
        if (*(unsigned char *)(v9 + 16) != 16) {
          return 0;
        }
        uint64_t v10 = (void *)(v9 + 24);
        if (*(_DWORD *)(v9 + 32) >= 0x41u) {
          uint64_t v10 = (void *)*v10;
        }
        if (v2 == *(_DWORD *)v10) {
          return (llvm::UndefValue *)*((void *)v4 - 8);
        }
        BOOL v7 = *((void *)v4 - 12) == (void)v4;
        uint64_t v4 = (unsigned __int8 *)*((void *)v4 - 12);
        if (v7) {
          return 0;
        }
      }
      if (v8 != 41) {
        break;
      }
      this = (llvm *)*((void *)v4 - 8);
      if (!this) {
        goto LABEL_44;
      }
      uint64_t v14 = (unsigned __int8 *)*((void *)v4 - 4);
      if (!v14) {
        goto LABEL_44;
      }
      if (v14[16] > 0x14u) {
        goto LABEL_44;
      }
      AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)v14, v2);
      if (!AggregateElement) {
        goto LABEL_44;
      }
      int v16 = *((unsigned __int8 *)AggregateElement + 16);
      if (v16 != 16)
      {
        if (v16 == 17)
        {
          if (sub_1CB844168((uint64_t)AggregateElement, 0.0)) {
            continue;
          }
        }
        else if ((v16 - 18) < 3 || v16 == 13)
        {
          continue;
        }
        goto LABEL_44;
      }
      uint64_t v17 = *((unsigned int *)AggregateElement + 8);
      if (v17 < 0x41)
      {
        if (!AggregateElement[3]) {
          continue;
        }
LABEL_44:
        int v6 = *(unsigned __int8 *)(v5 + 8);
LABEL_45:
        if (v6 == 19)
        {
          if ((*(_DWORD *)(*(void *)v4 + 8) & 0xFE) == 0x12 && v4[16] <= 0x14u)
          {
            uint64_t result = (llvm::UndefValue *)llvm::Constant::getSplatValue((llvm::Constant *)v4, 0);
            if (result) {
              goto LABEL_58;
            }
          }
          else
          {
            int v27 = 0;
            uint64_t v26 = &v27;
            if (sub_1CC189A5C((uint64_t)v25, (uint64_t)v4))
            {
              uint64_t result = v27;
              if (v27)
              {
LABEL_58:
                if (*(_DWORD *)(v5 + 32) > v2) {
                  return result;
                }
              }
            }
          }
        }
        return 0;
      }
      int v18 = 0;
      int64_t v19 = (unint64_t)(v17 + 63) >> 6;
      do
      {
        if (v19-- < 1) {
          break;
        }
        unint64_t v21 = *(void *)(AggregateElement[3] + 8 * v19);
        v18 += __clz(v21);
      }
      while (!v21);
      int v22 = v17 | 0xFFFFFFC0;
      if ((v17 & 0x3F) == 0) {
        int v22 = 0;
      }
      if (v18 + v22 != v17) {
        goto LABEL_44;
      }
    }
    if (v8 != 91 || v6 != 18) {
      goto LABEL_45;
    }
    unsigned int v2 = (llvm::Type *)*(unsigned int *)(*((void *)v4 + 8) + 4 * v2);
    if ((v2 & 0x80000000) == 0)
    {
      this = (llvm *)*((void *)v4 - 8);
      int v11 = *(_DWORD *)(*(void *)this + 32);
      BOOL v12 = __OFSUB__(v2, v11);
      unsigned int v13 = (llvm::Type *)(v2 - v11);
      if ((int)v13 < 0 == v12)
      {
        this = (llvm *)*((void *)v4 - 4);
        unsigned int v2 = v13;
      }
      continue;
    }
    break;
  }
LABEL_54:
  uint64_t v24 = *(llvm::UndefValue **)(v5 + 24);

  return llvm::UndefValue::get(v24, a2);
}

void *llvm::getSplatValue(llvm *this, const llvm::Value *a2)
{
  if ((*(_DWORD *)(*(void *)this + 8) & 0xFE) == 0x12 && *((unsigned __int8 *)this + 16) <= 0x14u)
  {
    return llvm::Constant::getSplatValue(this, 0);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = &v5;
    if (sub_1CC189A5C((uint64_t)v3, (uint64_t)this)) {
      return (void *)v5;
    }
    else {
      return 0;
    }
  }
}

uint64_t llvm::getSplatIndex(unsigned int *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = 4 * a2;
    uint64_t v3 = 0xFFFFFFFFLL;
    while (1)
    {
      uint64_t v4 = *a1;
      if ((v4 & 0x80000000) != 0)
      {
        uint64_t v4 = v3;
      }
      else if (v3 != -1 && v3 != v4)
      {
        return 0xFFFFFFFFLL;
      }
      ++a1;
      uint64_t v3 = v4;
      v2 -= 4;
      if (!v2) {
        return v4;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t llvm::isSplatValue(const void **this, const llvm::Value *a2, int a3, unsigned int a4)
{
  unsigned int v6 = *((unsigned __int8 *)this + 16);
  if ((*((_DWORD *)*this + 2) & 0xFE) == 0x12)
  {
    if (v6 - 11 < 2) {
      return 1;
    }
    if (v6 <= 0x14) {
      return llvm::Constant::getSplatValue((llvm::Constant *)this, 0) != 0;
    }
  }
  if (v6 != 91)
  {
    if (a3 == 6) {
      return 0;
    }
    int v9 = a3 + 1;
    int v18 = 0;
    int64_t v19 = 0;
    uint64_t v17 = 0;
    BOOL v10 = v6 < 0x1C || v6 - 41 > 0x11;
    if (!v10 && (int v11 = (llvm *)*(this - 8)) != 0 && (v19 = (llvm *)*(this - 8), *(this - 4)))
    {
      int v18 = (llvm *)*(this - 4);
      if ((llvm::isSplatValue(v11, a2, a3 + 1, a4) & 1) == 0) {
        return 0;
      }
      unsigned int v13 = &v18;
    }
    else
    {
      v16[0] = &v19;
      v16[1] = &v18;
      v16[2] = &v17;
      uint64_t result = sub_1CC189B48(v16, (uint64_t)this);
      if (!result) {
        return result;
      }
      uint64_t result = llvm::isSplatValue(v19, a2, v9, v14);
      if (!result) {
        return result;
      }
      uint64_t result = llvm::isSplatValue(v18, a2, v9, v15);
      if (!result) {
        return result;
      }
      unsigned int v13 = (llvm **)&v17;
    }
    return llvm::isSplatValue(*v13, a2, v9, v12);
  }
  uint64_t v8 = *((unsigned int *)this + 18);
  if (!v8 || v8 != 1 && memcmp((char *)this[8] + 4, this[8], 4 * v8 - 4)) {
    return 0;
  }
  if (a2 == -1) {
    return 1;
  }
  return *((_DWORD *)this[8] + a2) == a2;
}

uint64_t llvm::narrowShuffleMaskElts(uint64_t result, int *__src, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = __src;
  if (result == 1)
  {
    int v6 = 0;
    *(_DWORD *)(a4 + 8) = 0;
    if ((4 * a3) >> 2 > (unint64_t)*(unsigned int *)(a4 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unint64_t v7 = 4 * a3;
    if (a3)
    {
      uint64_t result = (uint64_t)memcpy(*(void **)a4, __src, 4 * a3);
      int v6 = *(_DWORD *)(a4 + 8);
    }
    *(_DWORD *)(a4 + 8) = v6 + (v7 >> 2);
  }
  else
  {
    *(_DWORD *)(a4 + 8) = 0;
    if (a3)
    {
      unsigned int v8 = 0;
      do
      {
        if (result)
        {
          int v9 = *v5;
          int v10 = result;
          int v11 = *v5 * result;
          do
          {
            if (v9 >= 0) {
              int v12 = v11;
            }
            else {
              int v12 = v9;
            }
            if (v8 >= *(_DWORD *)(a4 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(*(void *)a4 + 4 * v8) = v12;
            unsigned int v8 = *(_DWORD *)(a4 + 8) + 1;
            *(_DWORD *)(a4 + 8) = v8;
            ++v11;
            --v10;
          }
          while (v10);
        }
        ++v5;
      }
      while (v5 != &__src[a3]);
    }
  }
  return result;
}

void llvm::computeMinimumValueSizes(uint64_t a1@<X0>, uint64_t a2@<X1>, llvm::DemandedBits *a3@<X2>, void *a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v5 = a5;
  v176[16] = *MEMORY[0x1E4F143B8];
  long long v6 = 0uLL;
  long long v173 = 0u;
  uint64_t v172 = (uint64_t *)&v173;
  unint64_t v174 = v176;
  uint64_t v175 = 0x1000000000;
  uint64_t v167 = v171;
  int v168 = v171;
  uint64_t v169 = 4;
  int v170 = 0;
  unsigned int v162 = v166;
  unsigned int v163 = v166;
  uint64_t v164 = 16;
  int v165 = 0;
  unsigned int v161 = 0;
  long long v160 = 0u;
  BOOL v155 = v159;
  uint64_t v156 = v159;
  uint64_t v157 = 4;
  int v158 = 0;
  int v153 = 0;
  long long v152 = 0u;
  memset(v154, 0, sizeof(v154));
  if (!a2)
  {
    uint64_t v7 = 0;
    int v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
LABEL_237:
    *(void *)uint64_t v5 = v9;
    long long v152 = 0uLL;
    *((void *)v5 + 1) = v10;
    *((_DWORD *)v5 + 4) = v8;
    int v153 = 0;
    *(_OWORD *)((char *)v5 + 24) = v6;
    *((void *)v5 + 5) = v7;
    memset(v154, 0, sizeof(v154));
    goto LABEL_331;
  }
  uint64_t v12 = a1;
  int v13 = 0;
  uint64_t v14 = a1 + 8 * a2;
  do
  {
    uint64_t v15 = *(void *)v12 + 40;
    for (uint64_t i = *(void *)(*(void *)v12 + 48); i != v15; uint64_t i = *(void *)(i + 8))
    {
      if (i) {
        uint64_t v17 = (uint64_t *)(i - 24);
      }
      else {
        uint64_t v17 = 0;
      }
      int v18 = v156;
      uint64_t v19 = HIDWORD(v157);
      if (v156 != v155)
      {
        unsigned int v23 = v157;
LABEL_21:
        if (3 * v23 <= 4 * (HIDWORD(v157) - v158))
        {
          if (v23 >= 0x40) {
            v23 *= 2;
          }
          else {
            unsigned int v23 = 128;
          }
        }
        else if (v23 - HIDWORD(v157) >= v23 >> 3)
        {
LABEL_23:
          unsigned int v24 = v23 - 1;
          unsigned int v25 = (v23 - 1) & ((v17 >> 4) ^ (v17 >> 9));
          uint64_t v26 = &v18[8 * v25];
          int v27 = *(uint64_t **)v26;
          if (*(void *)v26 == -1)
          {
            BOOL v28 = 0;
LABEL_35:
            if (v28) {
              uint64_t v32 = v28;
            }
            else {
              uint64_t v32 = v26;
            }
            if (*(uint64_t **)v32 != v17)
            {
              if (*(void *)v32 == -2) {
                --v158;
              }
              else {
                ++HIDWORD(v157);
              }
              *(void *)uint64_t v32 = v17;
            }
          }
          else
          {
            BOOL v28 = 0;
            int v29 = 1;
            while (v27 != v17)
            {
              if (v28) {
                BOOL v30 = 0;
              }
              else {
                BOOL v30 = v27 == (uint64_t *)-2;
              }
              if (v30) {
                BOOL v28 = v26;
              }
              unsigned int v31 = v25 + v29++;
              unsigned int v25 = v31 & v24;
              uint64_t v26 = &v18[8 * (v31 & v24)];
              int v27 = *(uint64_t **)v26;
              if (*(void *)v26 == -1) {
                goto LABEL_35;
              }
            }
          }
          goto LABEL_42;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v155, v23);
        unsigned int v23 = v157;
        int v18 = v156;
        goto LABEL_23;
      }
      if (HIDWORD(v157))
      {
        BOOL v20 = 0;
        uint64_t v21 = 8 * HIDWORD(v157);
        int v22 = (uint64_t **)v156;
        while (*v22 != v17)
        {
          if (*v22 == (uint64_t *)-2) {
            BOOL v20 = v22;
          }
          ++v22;
          v21 -= 8;
          if (!v21)
          {
            if (!v20) {
              goto LABEL_17;
            }
            void *v20 = v17;
            --v158;
            if (a4) {
              goto LABEL_43;
            }
            goto LABEL_48;
          }
        }
LABEL_42:
        if (!a4) {
          goto LABEL_48;
        }
        goto LABEL_43;
      }
LABEL_17:
      unsigned int v23 = v157;
      if (HIDWORD(v157) >= v157) {
        goto LABEL_21;
      }
      ++HIDWORD(v157);
      *(void *)&v156[8 * v19] = v17;
      if (!a4) {
        goto LABEL_48;
      }
LABEL_43:
      if (*((unsigned __int8 *)v17 + 16) - 67 <= 1)
      {
        int v33 = *((_DWORD *)v17 + 5);
        if ((v33 & 0x40000000) != 0) {
          BOOL v34 = (uint64_t *)*(v17 - 1);
        }
        else {
          BOOL v34 = &v17[-4 * (v33 & 0x7FFFFFF)];
        }
        v13 |= (*(uint64_t (**)(void, void))(*(void *)*a4 + 480))(*a4, *(void *)*v34) ^ 1;
      }
LABEL_48:
      int v35 = *((unsigned __int8 *)v17 + 16);
      if (v35 != 81 && v35 != 66) {
        continue;
      }
      uint64_t v36 = *v17;
      if ((*(_DWORD *)(*v17 + 8) & 0xFE) == 0x12) {
        continue;
      }
      int v37 = *((_DWORD *)v17 + 5);
      if ((v37 & 0x40000000) != 0) {
        uint64_t v38 = (uint64_t **)*(v17 - 1);
      }
      else {
        uint64_t v38 = (uint64_t **)&v17[-4 * (v37 & 0x7FFFFFF)];
      }
      uint64_t v39 = **v38;
      if ((*(_DWORD *)(v39 + 8) & 0xFE) == 0x12) {
        uint64_t v39 = **(void **)(v39 + 16);
      }
      if (llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v39) > 0x40
        || a4 && v35 == 66 && ((*(uint64_t (**)(void, uint64_t))(*(void *)*a4 + 480))(*a4, v36) & 1) != 0)
      {
        continue;
      }
      if (v175 >= (unint64_t)HIDWORD(v175)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v174[v175] = v17;
      LODWORD(v175) = v175 + 1;
      int v40 = v168;
      uint64_t v41 = HIDWORD(v169);
      if (v168 != v167)
      {
        unsigned int v45 = v169;
        goto LABEL_72;
      }
      if (!HIDWORD(v169))
      {
LABEL_69:
        unsigned int v45 = v169;
        if (HIDWORD(v169) < v169)
        {
          ++HIDWORD(v169);
          *(void *)&v168[8 * v41] = v17;
          continue;
        }
LABEL_72:
        if (3 * v45 <= 4 * (HIDWORD(v169) - v170))
        {
          if (v45 >= 0x40) {
            v45 *= 2;
          }
          else {
            unsigned int v45 = 128;
          }
        }
        else if (v45 - HIDWORD(v169) >= v45 >> 3)
        {
          goto LABEL_74;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v167, v45);
        unsigned int v45 = v169;
        int v40 = v168;
LABEL_74:
        unsigned int v46 = v45 - 1;
        unsigned int v47 = (v45 - 1) & ((v17 >> 4) ^ (v17 >> 9));
        int v48 = &v40[8 * v47];
        uint64_t v49 = *(uint64_t **)v48;
        if (*(void *)v48 == -1)
        {
          uint64_t v50 = 0;
LABEL_88:
          if (v50) {
            unint64_t v54 = v50;
          }
          else {
            unint64_t v54 = v48;
          }
          if (*(uint64_t **)v54 != v17)
          {
            if (*(void *)v54 == -2) {
              --v170;
            }
            else {
              ++HIDWORD(v169);
            }
            *(void *)unint64_t v54 = v17;
          }
        }
        else
        {
          uint64_t v50 = 0;
          int v51 = 1;
          while (v49 != v17)
          {
            if (v50) {
              BOOL v52 = 0;
            }
            else {
              BOOL v52 = v49 == (uint64_t *)-2;
            }
            if (v52) {
              uint64_t v50 = v48;
            }
            unsigned int v53 = v47 + v51++;
            unsigned int v47 = v53 & v46;
            int v48 = &v40[8 * (v53 & v46)];
            uint64_t v49 = *(uint64_t **)v48;
            if (*(void *)v48 == -1) {
              goto LABEL_88;
            }
          }
        }
        continue;
      }
      uint64_t v42 = 0;
      uint64_t v43 = 8 * HIDWORD(v169);
      int8x8_t v44 = (uint64_t **)v168;
      while (*v44 != v17)
      {
        if (*v44 == (uint64_t *)-2) {
          uint64_t v42 = v44;
        }
        ++v44;
        v43 -= 8;
        if (!v43)
        {
          if (!v42) {
            goto LABEL_69;
          }
          void *v42 = v17;
          --v170;
          break;
        }
      }
    }
    v12 += 8;
  }
  while (v12 != v14);
  unsigned int v55 = v175;
  if (!v175 || !((a4 == 0) | v13 & 1))
  {
    uint64_t v10 = *((void *)&v152 + 1);
    uint64_t v9 = v152;
    int v8 = v153;
    long long v6 = *(_OWORD *)v154;
    uint64_t v7 = *(void *)&v154[16];
    uint64_t v5 = a5;
    goto LABEL_237;
  }
  uint64_t v56 = a3;
  while (2)
  {
    unint64_t v57 = v174[v55 - 1];
    LODWORD(v175) = v55 - 1;
    BOOL v151 = 0;
    uint64_t v58 = sub_1CD4D6F30(&v172, v57, (uint64_t *)v57);
    BOOL v151 = *(uint64_t **)(sub_1CD4D6EE8((uint64_t)(v58 + 4)) + 16);
    unsigned int v60 = v162;
    int8x8_t v59 = v163;
    if (v163 == v162)
    {
      unsigned int v61 = HIDWORD(v164);
      unsigned int v62 = &v163[8 * HIDWORD(v164)];
      if (HIDWORD(v164))
      {
        uint64_t v63 = 0;
        while (*(void *)&v163[v63] != v57)
        {
          v63 += 8;
          if (8 * HIDWORD(v164) == v63) {
            goto LABEL_131;
          }
        }
        unsigned int v62 = &v163[v63];
      }
LABEL_131:
      unsigned int v60 = v163;
    }
    else
    {
      int v64 = v164 - 1;
      unsigned int v65 = (v164 - 1) & ((v57 >> 4) ^ (v57 >> 9));
      unsigned int v62 = &v163[8 * v65];
      uint64_t v66 = *(void *)v62;
      if (*(void *)v62 == -1)
      {
        uint64_t v67 = 0;
LABEL_160:
        if (v67) {
          unsigned int v62 = v67;
        }
        unsigned int v61 = HIDWORD(v164);
        if (*(void *)v62 != v57) {
          unsigned int v62 = &v163[8 * v164];
        }
      }
      else
      {
        uint64_t v67 = 0;
        int v68 = 1;
        while (v66 != v57)
        {
          if (v67) {
            BOOL v69 = 0;
          }
          else {
            BOOL v69 = v66 == -2;
          }
          if (v69) {
            uint64_t v67 = v62;
          }
          unsigned int v70 = v65 + v68++;
          unsigned int v65 = v70 & v64;
          unsigned int v62 = &v163[8 * (v70 & v64)];
          uint64_t v66 = *(void *)v62;
          if (*(void *)v62 == -1) {
            goto LABEL_160;
          }
        }
        unsigned int v61 = HIDWORD(v164);
      }
    }
    unsigned int v71 = v164;
    if (v163 == v60) {
      int v72 = v61;
    }
    else {
      int v72 = v164;
    }
    if (v62 != &v163[8 * v72])
    {
LABEL_183:
      unsigned int v55 = v175;
      goto LABEL_184;
    }
    if (v163 != v60) {
      goto LABEL_146;
    }
    if (v61)
    {
      uint8x8_t v73 = 0;
      uint64_t v74 = 8 * v61;
      unsigned int v75 = (unint64_t *)v163;
      while (*v75 != v57)
      {
        if (*v75 == -2) {
          uint8x8_t v73 = v75;
        }
        ++v75;
        v74 -= 8;
        if (!v74)
        {
          if (!v73) {
            goto LABEL_144;
          }
          *uint8x8_t v73 = v57;
          --v165;
          goto LABEL_173;
        }
      }
      goto LABEL_173;
    }
LABEL_144:
    if (v164 <= v61)
    {
LABEL_146:
      if (3 * (int)v164 <= 4 * (v61 - v165))
      {
        if (v164 >= 0x40) {
          unsigned int v71 = 2 * v164;
        }
        else {
          unsigned int v71 = 128;
        }
      }
      else if (v164 - v61 >= v164 >> 3)
      {
        goto LABEL_148;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v162, v71);
      unsigned int v71 = v164;
      int8x8_t v59 = v163;
LABEL_148:
      unsigned int v76 = v71 - 1;
      unsigned int v77 = (v71 - 1) & ((v57 >> 4) ^ (v57 >> 9));
      unsigned int v78 = &v59[8 * v77];
      unint64_t v79 = *(void *)v78;
      if (*(void *)v78 == -1)
      {
        uint64_t v80 = 0;
LABEL_166:
        if (v80) {
          uint64_t v84 = v80;
        }
        else {
          uint64_t v84 = (unint64_t *)v78;
        }
        if (*v84 != v57)
        {
          if (*v84 == -2) {
            --v165;
          }
          else {
            ++HIDWORD(v164);
          }
          *uint64_t v84 = v57;
        }
      }
      else
      {
        uint64_t v80 = 0;
        int v81 = 1;
        while (v79 != v57)
        {
          if (v80) {
            BOOL v82 = 0;
          }
          else {
            BOOL v82 = v79 == -2;
          }
          if (v82) {
            uint64_t v80 = (unint64_t *)v78;
          }
          unsigned int v83 = v77 + v81++;
          unsigned int v77 = v83 & v76;
          unsigned int v78 = &v59[8 * (v83 & v76)];
          unint64_t v79 = *(void *)v78;
          if (*(void *)v78 == -1) {
            goto LABEL_166;
          }
        }
      }
      goto LABEL_173;
    }
    HIDWORD(v164) = v61 + 1;
    *(void *)&v163[8 * v61] = v57;
LABEL_173:
    if (*(unsigned __int8 *)(v57 + 16) < 0x1Cu) {
      goto LABEL_183;
    }
    llvm::DemandedBits::getDemandedBits(v56, (llvm::Instruction *)v57, (llvm::APInt *)&v149);
    if (v150 >= 0x41)
    {
      if (v149) {
        MEMORY[0x1D25D9CB0](v149, 0x1000C8000313F17);
      }
      a5[1] = 0u;
      a5[2] = 0u;
      *a5 = 0u;
      goto LABEL_331;
    }
    llvm::DemandedBits::getDemandedBits(v56, (llvm::Instruction *)v57, (llvm::APInt *)&v149);
    if (v150 >= 0x41) {
      int v85 = v149;
    }
    else {
      int v85 = (uint64_t *)&v149;
    }
    uint64_t v86 = *v85;
    if (v150 >= 0x41 && v149) {
      MEMORY[0x1D25D9CB0]();
    }
    int v87 = sub_1CD4D7004((uint64_t *)&v160, &v151);
    v87[1] |= v86;
    uint64_t v149 = (uint64_t *)v57;
    sub_1CD4D7004((uint64_t *)&v160, &v149)[1] = v86;
    int v88 = *(unsigned __int8 *)(v57 + 16);
    if ((v88 - 60) <= 8 && ((1 << (v88 - 60)) & 0x181) != 0) {
      goto LABEL_183;
    }
    uint64_t v89 = v155;
    if (v156 == v155)
    {
      int v90 = HIDWORD(v157);
      int8x8_t v91 = &v156[8 * HIDWORD(v157)];
      if (HIDWORD(v157))
      {
        uint64_t v92 = 0;
        while (*(void *)&v156[v92] != v57)
        {
          v92 += 8;
          if (8 * HIDWORD(v157) == v92) {
            goto LABEL_206;
          }
        }
        int8x8_t v91 = &v156[v92];
      }
LABEL_206:
      uint64_t v89 = v156;
    }
    else
    {
      int v93 = v157 - 1;
      unsigned int v94 = (v157 - 1) & ((v57 >> 4) ^ (v57 >> 9));
      int8x8_t v91 = &v156[8 * v94];
      uint64_t v95 = *(void *)v91;
      if (*(void *)v91 == -1)
      {
        char v96 = 0;
LABEL_219:
        if (v96) {
          int8x8_t v91 = v96;
        }
        int v90 = HIDWORD(v157);
        if (*(void *)v91 != v57) {
          int8x8_t v91 = &v156[8 * v157];
        }
      }
      else
      {
        char v96 = 0;
        int v97 = 1;
        while (v95 != v57)
        {
          if (v96) {
            BOOL v98 = 0;
          }
          else {
            BOOL v98 = v95 == -2;
          }
          if (v98) {
            char v96 = v91;
          }
          unsigned int v99 = v94 + v97++;
          unsigned int v94 = v99 & v93;
          int8x8_t v91 = &v156[8 * (v99 & v93)];
          uint64_t v95 = *(void *)v91;
          if (*(void *)v91 == -1) {
            goto LABEL_219;
          }
        }
        int v90 = HIDWORD(v157);
      }
    }
    int v100 = v156 == v89 ? v90 : v157;
    if (v91 == &v156[8 * v100]) {
      goto LABEL_183;
    }
    if ((v88 - 75) < 3 || *(unsigned char *)(*(void *)v57 + 8) != 13)
    {
      sub_1CD4D7004((uint64_t *)&v160, &v151)[1] = -1;
      goto LABEL_183;
    }
    if (v88 == 83 || sub_1CD4D7004((uint64_t *)&v160, &v151)[1] == -1) {
      goto LABEL_183;
    }
    int v101 = *(_DWORD *)(v57 + 20);
    if ((v101 & 0x40000000) != 0)
    {
      uint64_t v103 = *(uint64_t **)(v57 - 8);
      uint64_t v102 = v101 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v102 = v101 & 0x7FFFFFF;
      uint64_t v103 = (uint64_t *)(v57 - 32 * v102);
    }
    if (!v102) {
      goto LABEL_183;
    }
    uint64_t v104 = 32 * v102;
    do
    {
      uint64_t v105 = *v103;
      uint64_t v149 = (uint64_t *)*v103;
      sub_1CD4D44F8(&v172, v151, (unint64_t *)&v149);
      if (v175 >= (unint64_t)HIDWORD(v175)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v174[v175] = v105;
      unsigned int v55 = v175 + 1;
      LODWORD(v175) = v175 + 1;
      v103 += 4;
      v104 -= 32;
      uint64_t v56 = a3;
    }
    while (v104);
LABEL_184:
    if (v55) {
      continue;
    }
    break;
  }
  uint64_t v106 = (uint64_t **)(v160 + 16 * v161);
  if (DWORD2(v160))
  {
    uint64_t v108 = a5;
    if (v161)
    {
      uint64_t v109 = 16 * v161;
      uint64_t v107 = (uint64_t **)v160;
      while (((unint64_t)*v107 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v107 += 2;
        v109 -= 16;
        if (!v109)
        {
          uint64_t v107 = (uint64_t **)(v160 + 16 * v161);
          break;
        }
      }
    }
    else
    {
      uint64_t v107 = (uint64_t **)v160;
    }
  }
  else
  {
    uint64_t v107 = (uint64_t **)(v160 + 16 * v161);
    uint64_t v108 = a5;
  }
  int v110 = (uint64_t **)(v160 + 16 * v161);
  if (v107 != v110)
  {
    while (1)
    {
      uint64_t v111 = (*v107)[1];
      if (v111) {
        break;
      }
LABEL_261:
      uint64_t v118 = v107 + 2;
      uint64_t v107 = v106;
      if (v118 != v106)
      {
        uint64_t v107 = v118;
        while (((unint64_t)*v107 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v107 += 2;
          if (v107 == v106)
          {
            uint64_t v107 = v106;
            break;
          }
        }
      }
      if (v107 == v110) {
        goto LABEL_267;
      }
    }
    while (2)
    {
      uint64_t v112 = *(void *)(v111 + 24);
      if (*(unsigned char *)(*(void *)v112 + 8) == 13)
      {
        if (v161)
        {
          unsigned int v113 = (v161 - 1) & ((v112 >> 4) ^ (v112 >> 9));
          uint64_t v114 = *(void *)(v160 + 16 * v113);
          if (v112 == v114) {
            goto LABEL_254;
          }
          int v115 = 1;
          while (v114 != -4096)
          {
            unsigned int v116 = v113 + v115++;
            unsigned int v113 = v116 & (v161 - 1);
            uint64_t v114 = *(void *)(v160 + 16 * v113);
            if (v112 == v114) {
              goto LABEL_254;
            }
          }
        }
        unsigned int v117 = (void *)sub_1CD4D44B0(&v172, *v107);
        sub_1CD4D7004((uint64_t *)&v160, v117)[1] = -1;
      }
LABEL_254:
      uint64_t v111 = *(void *)(v111 + 8);
      if (!v111) {
        goto LABEL_261;
      }
      continue;
    }
  }
LABEL_267:
  uint64_t v119 = v172;
  if (v172 != (uint64_t *)&v173)
  {
    do
    {
      unint64_t v120 = (unint64_t)(v119 + 4);
      if (v119[5])
      {
        unint64_t v121 = 0;
        unint64_t v122 = (unint64_t)(v119 + 4);
        do
        {
          uint64_t v149 = *(uint64_t **)(v122 + 16);
          v121 |= sub_1CD4D7004((uint64_t *)&v160, &v149)[1];
          unint64_t v122 = *(void *)(v122 + 8) & 0xFFFFFFFFFFFFFFFELL;
        }
        while (v122);
      }
      else
      {
        unint64_t v121 = 0;
      }
      unint64_t v123 = 64 - __clz(v121);
      if (!v121 || (uint8x8_t v124 = (uint8x8_t)vcnt_s8((int8x8_t)v123), v124.i16[0] = vaddlv_u8(v124), v124.u32[0] >= 2uLL))
      {
        unint64_t v125 = v123 | (v123 >> 1) | ((v123 | (v123 >> 1)) >> 2);
        unint64_t v123 = (v125 | (v125 >> 4)) + 1;
      }
      if (v119[5])
      {
        unint64_t v126 = (unint64_t)(v119 + 4);
        while (1)
        {
          BOOL v127 = *(unsigned char **)(v126 + 16);
          if (v127[16] == 83)
          {
            __int16 v128 = *(llvm::Type **)v127;
            if ((*(_DWORD *)(*(void *)v127 + 8) & 0xFE) == 0x12) {
              __int16 v128 = (llvm::Type *)**((void **)v128 + 2);
            }
            if (v123 < llvm::Type::getPrimitiveSizeInBits(v128)) {
              break;
            }
          }
          unint64_t v126 = *(void *)(v126 + 8) & 0xFFFFFFFFFFFFFFFELL;
          if (!v126)
          {
            do
            {
              uint64_t v132 = *(void *)(v120 + 16);
              if (*(unsigned __int8 *)(v132 + 16) >= 0x1Cu)
              {
                uint64_t v133 = v167;
                if (v168 == v167)
                {
                  int v131 = HIDWORD(v169);
                  uint64_t v130 = &v168[8 * HIDWORD(v169)];
                  if (HIDWORD(v169))
                  {
                    uint64_t v134 = 0;
                    while (*(void *)&v168[v134] != v132)
                    {
                      v134 += 8;
                      if (8 * HIDWORD(v169) == v134) {
                        goto LABEL_309;
                      }
                    }
                    uint64_t v130 = &v168[v134];
                  }
LABEL_309:
                  uint64_t v133 = v168;
                }
                else
                {
                  int v135 = v169 - 1;
                  unsigned int v136 = (v169 - 1) & ((v132 >> 4) ^ (v132 >> 9));
                  uint64_t v130 = &v168[8 * v136];
                  uint64_t v137 = *(void *)v130;
                  if (*(void *)v130 == -1)
                  {
                    uint64_t v129 = 0;
LABEL_284:
                    if (v129) {
                      uint64_t v130 = v129;
                    }
                    int v131 = HIDWORD(v169);
                    if (*(void *)v130 != v132) {
                      uint64_t v130 = &v168[8 * v169];
                    }
                  }
                  else
                  {
                    uint64_t v129 = 0;
                    int v138 = 1;
                    while (v137 != v132)
                    {
                      if (v129) {
                        BOOL v139 = 0;
                      }
                      else {
                        BOOL v139 = v137 == -2;
                      }
                      if (v139) {
                        uint64_t v129 = v130;
                      }
                      unsigned int v140 = v136 + v138++;
                      unsigned int v136 = v140 & v135;
                      uint64_t v130 = &v168[8 * (v140 & v135)];
                      uint64_t v137 = *(void *)v130;
                      if (*(void *)v130 == -1) {
                        goto LABEL_284;
                      }
                    }
                    int v131 = HIDWORD(v169);
                  }
                }
                if (v168 == v133) {
                  int v141 = v131;
                }
                else {
                  int v141 = v169;
                }
                if (v130 == &v168[8 * v141])
                {
                  uint64_t v144 = *(void *)v132;
                }
                else
                {
                  int v142 = *(_DWORD *)(v132 + 20);
                  if ((v142 & 0x40000000) != 0) {
                    unsigned int v143 = *(uint64_t ***)(v132 - 8);
                  }
                  else {
                    unsigned int v143 = (uint64_t **)(v132 - 32 * (v142 & 0x7FFFFFF));
                  }
                  uint64_t v144 = **v143;
                }
                if ((*(_DWORD *)(v144 + 8) & 0xFE) == 0x12) {
                  uint64_t v144 = **(void **)(v144 + 16);
                }
                if (v123 < llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v144))
                {
                  uint64_t v149 = (uint64_t *)v132;
                  *(void *)sub_1CD48CC08((uint64_t)&v152, (uint64_t *)&v149) = v123;
                }
              }
              unint64_t v120 = *(void *)(v120 + 8) & 0xFFFFFFFFFFFFFFFELL;
            }
            while (v120);
            break;
          }
        }
      }
      BOOL v145 = (uint64_t *)v119[1];
      if (v145)
      {
        do
        {
          unsigned int v146 = v145;
          BOOL v145 = (uint64_t *)*v145;
        }
        while (v145);
      }
      else
      {
        do
        {
          unsigned int v146 = (uint64_t *)v119[2];
          BOOL v30 = *v146 == (void)v119;
          uint64_t v119 = v146;
        }
        while (!v30);
      }
      uint64_t v119 = v146;
    }
    while (v146 != (uint64_t *)&v173);
  }
  *uint64_t v108 = v152;
  long long v152 = 0uLL;
  *((_DWORD *)v108 + 4) = v153;
  int v153 = 0;
  *(_OWORD *)((char *)v108 + 24) = *(_OWORD *)v154;
  *((void *)v108 + 5) = *(void *)&v154[16];
  memset(v154, 0, sizeof(v154));
LABEL_331:
  sub_1CD456CB4(&v152);
  if (v156 != v155) {
    free(v156);
  }
  MEMORY[0x1D25D9CD0](v160, 8);
  if (v163 != v162) {
    free(v163);
  }
  if (v168 != v167) {
    free(v168);
  }
  if (v174 != v176) {
    free(v174);
  }
  sub_1CD40B1BC((void *)v173);
}

BOOL sub_1CC187D0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = -8 * v4;
    do
    {
      uint64_t v7 = *(void *)(a2 + v5);
      BOOL result = sub_1CC189BDC(a1, &v7);
      v5 += 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v7 = a2;
    return sub_1CC189BDC(a1, &v7);
  }
  return result;
}

llvm *llvm::propagateMetadata(llvm *a1, llvm::MDNode **a2, uint64_t a3)
{
  v52[8] = *MEMORY[0x1E4F143B8];
  if (!a3) {
    return a1;
  }
  unsigned int v4 = a3;
  uint64_t v5 = *a2;
  v51[0] = v52;
  v51[1] = (void *)0x400000000;
  llvm::Value::getAllMetadata(v5, (uint64_t)v51);
  uint64_t v8 = 0;
  uint64_t v9 = (v5 >> 4) ^ (v5 >> 9);
  uint64_t v49 = v4;
  do
  {
    int v10 = dword_1CFAC4A30[v8];
    int v11 = (llvm::MDNode *)*((void *)v5 + 6);
    if (!v11 && (*((unsigned char *)v5 + 23) & 0x20) == 0)
    {
LABEL_5:
      int v11 = 0;
      goto LABEL_6;
    }
    if (v10)
    {
      if ((*((unsigned char *)v5 + 23) & 0x20) == 0) {
        goto LABEL_5;
      }
      uint64_t v12 = ***(void ***)v5;
      uint64_t v50 = v5;
      int v13 = *(_DWORD *)(v12 + 2496);
      if (v13)
      {
        uint64_t v14 = *(void *)(v12 + 2480);
        int v15 = v13 - 1;
        unsigned int v16 = v15 & v9;
        MostGenericFPMath = (llvm::MDNode **)(v14 + 40 * (v15 & v9));
        uint64_t v17 = *MostGenericFPMath;
        if (*MostGenericFPMath == v5)
        {
LABEL_12:
          uint64_t v18 = *((unsigned int *)MostGenericFPMath + 4);
          if (!v18) {
            goto LABEL_5;
          }
          uint64_t v19 = (llvm::MDNode **)((char *)MostGenericFPMath[1] + 8);
          uint64_t v20 = 16 * v18;
          while (*((_DWORD *)v19 - 2) != v10)
          {
            int v11 = 0;
            v19 += 2;
            v20 -= 16;
            if (!v20) {
              goto LABEL_6;
            }
          }
          int v11 = *v19;
          goto LABEL_27;
        }
        uint64_t v21 = 0;
        int v22 = 1;
        while (v17 != (llvm::MDNode *)-4096)
        {
          if (v21) {
            BOOL v23 = 0;
          }
          else {
            BOOL v23 = v17 == (llvm::MDNode *)-8192;
          }
          if (v23) {
            uint64_t v21 = MostGenericFPMath;
          }
          unsigned int v24 = v16 + v22++;
          unsigned int v16 = v24 & v15;
          MostGenericFPMath = (llvm::MDNode **)(v14 + 40 * v16);
          uint64_t v17 = *MostGenericFPMath;
          if (*MostGenericFPMath == v5) {
            goto LABEL_12;
          }
        }
        if (v21) {
          int8x8_t v44 = v21;
        }
        else {
          int8x8_t v44 = MostGenericFPMath;
        }
      }
      else
      {
        int8x8_t v44 = 0;
      }
      MostGenericFPMath = (llvm::MDNode **)sub_1CC609054(v12 + 2480, (uint64_t)&v50, (uint64_t *)&v50, v44);
      uint64_t v45 = (uint64_t)v50;
      MostGenericFPMath[4] = 0;
      MostGenericFPMath[3] = 0;
      *MostGenericFPMath = (llvm::MDNode *)v45;
      MostGenericFPMath[1] = (llvm::MDNode *)(MostGenericFPMath + 3);
      MostGenericFPMath[2] = (llvm::MDNode *)0x100000000;
      goto LABEL_12;
    }
LABEL_27:
    if (v49 != 1 && v11)
    {
      uint64_t v25 = 1;
      while (2)
      {
        uint64_t v26 = v9;
        int v27 = a2[v25];
        if (!*((void *)v27 + 6) && (*((unsigned char *)v27 + 23) & 0x20) == 0 || (*((unsigned char *)v27 + 23) & 0x20) == 0) {
          goto LABEL_40;
        }
        uint64_t v28 = ***(void ***)v27;
        uint64_t v50 = a2[v25];
        int v29 = *(_DWORD *)(v28 + 2496);
        if (v29)
        {
          uint64_t v30 = *(void *)(v28 + 2480);
          int v31 = v29 - 1;
          unsigned int v32 = v31 & ((v27 >> 4) ^ (v27 >> 9));
          MostGenericFPMath = (llvm::MDNode **)(v30 + 40 * v32);
          int v33 = *MostGenericFPMath;
          if (*MostGenericFPMath == v27) {
            goto LABEL_35;
          }
          uint64_t v39 = 0;
          int v40 = 1;
          while (v33 != (llvm::MDNode *)-4096)
          {
            if (v39) {
              BOOL v41 = 0;
            }
            else {
              BOOL v41 = v33 == (llvm::MDNode *)-8192;
            }
            if (v41) {
              uint64_t v39 = MostGenericFPMath;
            }
            unsigned int v42 = v32 + v40++;
            unsigned int v32 = v42 & v31;
            MostGenericFPMath = (llvm::MDNode **)(v30 + 40 * v32);
            int v33 = *MostGenericFPMath;
            if (*MostGenericFPMath == v27) {
              goto LABEL_35;
            }
          }
          unsigned int v46 = v39 ? v39 : MostGenericFPMath;
        }
        else
        {
          unsigned int v46 = 0;
        }
        MostGenericFPMath = (llvm::MDNode **)sub_1CC609054(v28 + 2480, (uint64_t)&v50, (uint64_t *)&v50, v46);
        uint64_t v47 = (uint64_t)v50;
        MostGenericFPMath[4] = 0;
        MostGenericFPMath[3] = 0;
        *MostGenericFPMath = (llvm::MDNode *)v47;
        MostGenericFPMath[1] = (llvm::MDNode *)(MostGenericFPMath + 3);
        MostGenericFPMath[2] = (llvm::MDNode *)0x100000000;
LABEL_35:
        uint64_t v34 = *((unsigned int *)MostGenericFPMath + 4);
        if (v34)
        {
          int v35 = (llvm::MDNode **)((char *)MostGenericFPMath[1] + 8);
          uint64_t v36 = 16 * v34;
          while (*((_DWORD *)v35 - 2) != v10)
          {
            int v37 = 0;
            v35 += 2;
            v36 -= 16;
            if (!v36) {
              goto LABEL_41;
            }
          }
          int v37 = *v35;
        }
        else
        {
LABEL_40:
          int v37 = 0;
        }
LABEL_41:
        switch(v10)
        {
          case 1:
            uint64_t v50 = 0;
            MostGenericFPMath = (llvm::MDNode **)((uint64_t (*)(llvm::MDNode *, llvm::MDNode *, llvm::MDNode **))loc_1CC15C65C)(v11, v37, &v50);
            int v11 = v50;
            goto LABEL_45;
          case 2:
          case 4:
          case 5:
            __break(1u);
            goto LABEL_74;
          case 3:
            MostGenericFPMath = (llvm::MDNode **)llvm::MDNode::getMostGenericFPMath(v11, v37, v7);
            goto LABEL_44;
          case 6:
          case 8:
          case 9:
            MostGenericFPMath = (llvm::MDNode **)llvm::MDNode::intersect(v11, v37, v7);
            goto LABEL_44;
          case 7:
            MostGenericFPMath = (llvm::MDNode **)llvm::MDNode::getMostGenericAliasScope(v11, v37, v7);
            goto LABEL_44;
          default:
            MostGenericFPMath = (llvm::MDNode **)llvm::intersectAccessGroups(a1, v27, v7);
LABEL_44:
            int v11 = (llvm::MDNode *)MostGenericFPMath;
LABEL_45:
            uint64_t v9 = v26;
            ++v25;
            if (v11) {
              BOOL v38 = v25 == v49;
            }
            else {
              BOOL v38 = 1;
            }
            if (!v38) {
              continue;
            }
            goto LABEL_6;
        }
      }
    }
LABEL_6:
    llvm::Instruction::setMetadata(a1, v10, v11);
    ++v8;
  }
  while (v8 != 7);
  MostGenericFPMath = (llvm::MDNode **)v51[0];
  if (v51[0] != v52) {
LABEL_74:
  }
    free(MostGenericFPMath);
  return a1;
}

_DWORD *llvm::createUnaryMask@<X0>(_DWORD *result@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = a4 + 16;
  *(void *)(a4 + 8) = 0x1000000000;
  if (a2)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 4 * a2;
    do
    {
      if (*result >= a3) {
        int v6 = a3;
      }
      else {
        int v6 = 0;
      }
      if (v4 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v4) = *result - v6;
      unsigned int v4 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v4;
      ++result;
      v5 -= 4;
    }
    while (v5);
  }
  return result;
}

unsigned int *sub_1CC188254(unsigned int *result, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = result;
  size_t v4 = a3 - a2;
  uint64_t v5 = result[2];
  if (v5 + ((a3 - a2) >> 3) > (unint64_t)result[3]) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a3)
  {
    BOOL result = (unsigned int *)memcpy((void *)(*(void *)result + 8 * v5), a2, v4);
    LODWORD(v5) = v3[2];
  }
  void v3[2] = v5 + (v4 >> 3);
  return result;
}

BOOL llvm::InterleavedAccessInfo::isStrided(llvm::InterleavedAccessInfo *this)
{
  if ((int)this >= 0) {
    unsigned int v1 = this;
  }
  else {
    unsigned int v1 = -(int)this;
  }
  return v1 > 1 && v1 <= dword_1EBCC8808;
}

void *llvm::InterleavedAccessInfo::analyzeInterleaving(llvm::InterleavedAccessInfo *this, char a2)
{
  v168[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 4) + 64;
  v147[0] = 0;
  v147[1] = 0;
  int v148 = 0;
  unsigned int v150 = 0;
  uint64_t v151 = 0;
  uint64_t v149 = 0;
  uint64_t v135 = v3;
  llvm::InterleavedAccessInfo::collectConstStrideAccesses((uint64_t)this, (uint64_t)v147, v3);
  if (v149 == v150) {
    return sub_1CD456CB4(v147);
  }
  uint64_t v144 = this;
  sub_1CD4D56D0(this);
  uint64_t v163 = 1;
  int64x2_t v164 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  int64x2_t v165 = v164;
  int v166 = v168;
  uint64_t v167 = 0x400000000;
  uint64_t v157 = 1;
  int64x2_t v158 = v164;
  int64x2_t v159 = v164;
  long long v160 = v162;
  uint64_t v161 = 0x400000000;
  size_t v4 = v149;
  uint64_t v5 = v150;
  if (v150 == v149) {
    goto LABEL_207;
  }
  int v141 = (uint64_t *)((char *)this + 48);
  int v6 = &unk_1EBCC8000;
  uint64_t v7 = v150;
  BOOL v145 = v149;
LABEL_4:
  uint64_t v10 = *(v7 - 5);
  uint64_t v8 = *(v7 - 4);
  uint64_t v9 = v7 - 5;
  int v138 = (const llvm::APInt *)v9[2];
  uint64_t v139 = v9[3];
  uint64_t v140 = v8;
  if ((int)v8 >= 0) {
    unsigned int v11 = v8;
  }
  else {
    unsigned int v11 = -(int)v8;
  }
  BOOL v12 = v11 < 2 || v11 > v6[514];
  unsigned int v146 = v5;
  if (!v12) {
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch();
  }
  if (v9 != v4)
  {
    int v142 = v9;
    uint64_t v143 = v10;
    uint64_t v137 = v10 - 8;
    int v13 = v9;
    while (1)
    {
      uint64_t v15 = *(v13 - 5);
      v13 -= 5;
      uint64_t v14 = v15;
      unsigned int v16 = (llvm::SCEV *)v13[2];
      uint64_t v17 = v13[3];
      uint64_t v18 = *v13;
      uint64_t v19 = v13[1];
      uint64_t v20 = *(unsigned __int8 *)(*v13 + 16) - 33;
      if (v20 > 0x37) {
        goto LABEL_18;
      }
      uint64_t v22 = *(v5 - 5);
      uint64_t v21 = *(v5 - 4);
      if (((1 << (*(unsigned char *)(*v13 + 16) - 33)) & 0x8000000000041) != 0)
      {
        uint64_t v27 = *(void *)(v18 + 64);
        if (v27 && (*(unsigned char *)(v27 + 17) & 0x30) != 0) {
          goto LABEL_18;
        }
        int v28 = *(_DWORD *)(v18 + 20);
        if (v28 < 0
          && (uint64_t v55 = v18 - 32 * (v28 & 0x7FFFFFF), v58 = *(void *)(v55 - 8), v56 = v55 - 8, (v57 = v58) != 0))
        {
          uint64_t v59 = -v57;
          while (1)
          {
            unsigned int v60 = *(_DWORD *)(*(void *)(v56 + v59) + 8);
            BOOL v12 = v60 > 7;
            int v61 = (1 << v60) & 0x83;
            BOOL v62 = v12 || v61 == 0;
            size_t v4 = v145;
            uint64_t v5 = v146;
            int v6 = (_DWORD *)&unk_1EBCC8000;
            if (v62) {
              break;
            }
            v59 += 16;
            if (!v59) {
              goto LABEL_35;
            }
          }
        }
        else
        {
LABEL_35:
          char hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction(*v13, 45);
          size_t v4 = v145;
          uint64_t v5 = v146;
          int v6 = (_DWORD *)&unk_1EBCC8000;
          if (hasFnAttrOnCalledFunction) {
            goto LABEL_18;
          }
          char v30 = llvm::CallBase::hasFnAttrOnCalledFunction(v18, 44);
          size_t v4 = v145;
          uint64_t v5 = v146;
          int v6 = (_DWORD *)&unk_1EBCC8000;
          if (v30) {
            goto LABEL_18;
          }
        }
      }
      else if (v20 == 27)
      {
        if ((*(_WORD *)(v18 + 18) & 0x301) == 0) {
          goto LABEL_18;
        }
      }
      else if (((1 << (*(unsigned char *)(*v13 + 16) - 33)) & 0x808001D0000010) == 0)
      {
        goto LABEL_18;
      }
      if ((int)v19 >= 0) {
        unsigned int v31 = v19;
      }
      else {
        unsigned int v31 = -(int)v19;
      }
      unsigned int v32 = v6[514];
      if (v31 >= 2 && v31 <= v32 || ((int)v21 >= 0 ? (unsigned int v33 = v21) : (unsigned int v33 = -(int)v21), v33 >= 2 && v33 <= v32))
      {
        uint64_t v34 = *((void *)v144 + 4);
        if (!v34 || !*(unsigned char *)(*(void *)(v34 + 16) + 216)) {
          goto LABEL_198;
        }
        int v153 = 0;
        if (sub_1CD4A7E9C(*((void *)v144 + 17), *((_DWORD *)v144 + 38), v18, &v153))
        {
          int v35 = v153;
          uint64_t v36 = *((void *)v144 + 17);
          unsigned int v37 = *((_DWORD *)v144 + 38);
        }
        else
        {
          uint64_t v36 = *((void *)v144 + 17);
          unsigned int v37 = *((_DWORD *)v144 + 38);
          int v35 = (void *)(v36 + 56 * v37);
        }
        size_t v4 = v145;
        uint64_t v5 = v146;
        int v6 = (_DWORD *)&unk_1EBCC8000;
        if ((void *)(v36 + 56 * v37) != v35)
        {
          sub_1CD4D67A8((uint64_t)&v153, v36, v37, v18);
          uint64_t v45 = v154;
          if (v154 == v153)
          {
            size_t v4 = v145;
            uint64_t v5 = v146;
            int v6 = (_DWORD *)&unk_1EBCC8000;
            if (v156)
            {
              uint64_t v46 = 8 * v156;
              while (*v45 != v22)
              {
                ++v45;
                v46 -= 8;
                if (!v46) {
                  goto LABEL_18;
                }
              }
              if (v46) {
                goto LABEL_198;
              }
            }
          }
          else
          {
            unsigned int v48 = (v155 - 1) & ((v22 >> 4) ^ (v22 >> 9));
            uint64_t v49 = &v154[8 * v48];
            uint64_t v50 = *(void *)v49;
            uint64_t v133 = v155;
            int v51 = 0;
            if (*(void *)v49 == -1)
            {
LABEL_88:
              if (v51) {
                uint64_t v49 = v51;
              }
              uint64_t v134 = *(void *)v49;
            }
            else
            {
              int v52 = 1;
              while (v50 != v22)
              {
                if (v51) {
                  BOOL v53 = 0;
                }
                else {
                  BOOL v53 = v50 == -2;
                }
                if (v53) {
                  int v51 = v49;
                }
                unsigned int v54 = v48 + v52++;
                unsigned int v48 = v54 & (v155 - 1);
                uint64_t v49 = &v154[8 * v48];
                uint64_t v50 = *(void *)v49;
                if (*(void *)v49 == -1) {
                  goto LABEL_88;
                }
              }
              uint64_t v134 = v22;
            }
            free(v154);
            size_t v4 = v145;
            uint64_t v5 = v146;
            int v6 = (_DWORD *)&unk_1EBCC8000;
            if (v134 == v22 && v49 != (char *)&v45[v133])
            {
LABEL_198:
              uint64_t v152 = 0;
              int v153 = (char *)v14;
              if (sub_1CD3C8538(v141, &v153, &v152))
              {
                uint64_t v103 = v152;
                uint64_t v104 = (uint64_t)v144;
                uint64_t v105 = *((void *)v144 + 6);
                uint64_t v106 = *((unsigned int *)v144 + 16);
              }
              else
              {
                uint64_t v104 = (uint64_t)v144;
                uint64_t v105 = *((void *)v144 + 6);
                uint64_t v106 = *((unsigned int *)v144 + 16);
                uint64_t v103 = v105 + 16 * v106;
              }
              size_t v4 = v145;
              int v6 = (_DWORD *)&unk_1EBCC8000;
              if (v103 != v105 + 16 * v106)
              {
                uint64_t v152 = 0;
                int v153 = (char *)v14;
                uint64_t v107 = 0;
                if (sub_1CD3C8538(v141, &v153, &v152)) {
                  uint64_t v107 = *(void *)(v152 + 8);
                }
                int v153 = (char *)v107;
                sub_1CD4D5854((uint64_t)&v163, (uint64_t *)&v153);
                sub_1CD4D58D4(v104, v107);
                size_t v4 = v145;
                int v6 = (_DWORD *)&unk_1EBCC8000;
              }
LABEL_202:
              uint64_t v7 = v142;
              uint64_t v5 = v142;
              goto LABEL_4;
            }
          }
        }
      }
LABEL_18:
      if ((int)v19 >= 0) {
        unsigned int v23 = v19;
      }
      else {
        unsigned int v23 = -(int)v19;
      }
      if (v11 < 2) {
        goto LABEL_30;
      }
      unsigned int v24 = v6[514];
      BOOL v25 = v23 < 2 || v23 > v24;
      if (v25 || v11 > v24) {
        goto LABEL_30;
      }
      uint64_t v152 = 0;
      int v153 = (char *)v14;
      if (sub_1CD3C8538(v141, &v153, &v152))
      {
        uint64_t v39 = v152;
        uint64_t v40 = *((void *)v144 + 6);
        uint64_t v41 = *((unsigned int *)v144 + 16);
      }
      else
      {
        uint64_t v40 = *((void *)v144 + 6);
        uint64_t v41 = *((unsigned int *)v144 + 16);
        uint64_t v39 = v40 + 16 * v41;
      }
      size_t v4 = v145;
      uint64_t v5 = v146;
      int v6 = (_DWORD *)&unk_1EBCC8000;
      if (v39 != v40 + 16 * v41) {
        goto LABEL_30;
      }
      int v42 = 0;
      uint64_t v43 = *(unsigned __int8 *)(v14 + 16) - 33;
      if (v43 > 0x37) {
        goto LABEL_113;
      }
      if (((1 << (*(unsigned char *)(v14 + 16) - 33)) & 0x8000000000041) != 0)
      {
        uint64_t v47 = *(void *)(v14 + 64);
        uint64_t v44 = v143;
        if (v47 && ((*(unsigned char *)(v47 + 20) & 4) != 0 || (*(unsigned char *)(v47 + 17) & 0x10) != 0))
        {
          int v42 = 0;
          goto LABEL_114;
        }
        LODWORD(v153) = 7;
        if (!sub_1CC5CB59C(v14, (__int32 *)&v153, 1uLL)) {
          goto LABEL_74;
        }
        uint64_t v63 = *(void *)(v14 - 32);
        if (v63 && !*(unsigned char *)(v63 + 16) && *(void *)(v63 + 24) == *(void *)(v14 + 72))
        {
          uint64_t v44 = v143;
          if (*(_DWORD *)(v63 + 36) == 7)
          {
LABEL_74:
            if (llvm::CallBase::hasFnAttrOnCalledFunction(v14, 66)) {
              int v42 = 0;
            }
            else {
              int v42 = llvm::CallBase::hasFnAttrOnCalledFunction(v14, 44) ^ 1;
            }
          }
          else
          {
            int v42 = 1;
          }
          size_t v4 = v145;
          uint64_t v5 = v146;
          int v6 = (_DWORD *)&unk_1EBCC8000;
          goto LABEL_114;
        }
        int v42 = 1;
        size_t v4 = v145;
        uint64_t v5 = v146;
        int v6 = (_DWORD *)&unk_1EBCC8000;
LABEL_113:
        uint64_t v44 = v143;
        goto LABEL_114;
      }
      uint64_t v44 = v143;
      if (((1 << (*(unsigned char *)(v14 + 16) - 33)) & 0x808001C8000010) != 0)
      {
        int v42 = 1;
      }
      else if (v43 == 28)
      {
        int v42 = (*(_WORD *)(v14 + 18) & 0x301) != 0;
      }
LABEL_114:
      uint64_t v64 = *(unsigned __int8 *)(v44 + 16) - 33;
      if (v64 <= 0x37)
      {
        if (((1 << (*(unsigned char *)(v44 + 16) - 33)) & 0x8000000000041) != 0)
        {
          uint64_t v68 = *(void *)(v44 + 64);
          if (!v68 || (*(unsigned char *)(v68 + 20) & 4) == 0 && (*(unsigned char *)(v68 + 17) & 0x10) == 0)
          {
            LODWORD(v153) = 7;
            if (sub_1CC5CB59C(v44, (__int32 *)&v153, 1uLL))
            {
              uint64_t v74 = *(void *)(v44 - 32);
              if (!v74 || *(unsigned char *)(v74 + 16) || *(void *)(v74 + 24) != *(void *)(v143 + 72))
              {
                size_t v4 = v145;
                uint64_t v5 = v146;
                int v6 = (_DWORD *)&unk_1EBCC8000;
LABEL_145:
                if ((v42 & 1) == 0) {
                  goto LABEL_30;
                }
                goto LABEL_119;
              }
              size_t v4 = v145;
              uint64_t v5 = v146;
              int v6 = (_DWORD *)&unk_1EBCC8000;
              uint64_t v44 = v143;
              if (*(_DWORD *)(v74 + 36) != 7) {
                goto LABEL_145;
              }
            }
            char v69 = llvm::CallBase::hasFnAttrOnCalledFunction(v44, 66);
            size_t v4 = v145;
            uint64_t v5 = v146;
            int v6 = (_DWORD *)&unk_1EBCC8000;
            if ((v69 & 1) == 0)
            {
              int v70 = llvm::CallBase::hasFnAttrOnCalledFunction(v44, 44);
              size_t v4 = v145;
              uint64_t v5 = v146;
              int v6 = (_DWORD *)&unk_1EBCC8000;
              int v71 = v70 ^ 1;
              goto LABEL_129;
            }
          }
        }
        else
        {
          if (((1 << (*(unsigned char *)(v44 + 16) - 33)) & 0x808001C8000010) != 0) {
            goto LABEL_145;
          }
          if (v64 == 28)
          {
            int v71 = (*(_WORD *)(v44 + 18) & 0x301) != 0;
LABEL_129:
            if (v42 != v71) {
              goto LABEL_30;
            }
            goto LABEL_119;
          }
        }
      }
      if (v42) {
        goto LABEL_30;
      }
LABEL_119:
      int v65 = 0;
      uint64_t v66 = *(unsigned __int8 *)(v14 + 16) - 33;
      if (v66 > 0x37) {
        goto LABEL_156;
      }
      if (((1 << (*(unsigned char *)(v14 + 16) - 33)) & 0x8000000000041) != 0)
      {
        uint64_t v72 = *(void *)(v14 + 64);
        uint64_t v67 = v143;
        if (v72 && (*(unsigned char *)(v72 + 17) & 0x30) != 0)
        {
          int v65 = 0;
          goto LABEL_157;
        }
        int v73 = *(_DWORD *)(v14 + 20);
        if (v73 < 0)
        {
          uint64_t v75 = v14 - 32 * (v73 & 0x7FFFFFF);
          uint64_t v78 = *(void *)(v75 - 8);
          uint64_t v76 = v75 - 8;
          uint64_t v77 = v78;
          if (v78)
          {
            uint64_t v79 = -v77;
            while (1)
            {
              unsigned int v80 = *(_DWORD *)(*(void *)(v76 + v79) + 8);
              BOOL v12 = v80 > 7;
              int v81 = (1 << v80) & 0x83;
              if (v12 || v81 == 0) {
                break;
              }
              v79 += 16;
              uint64_t v67 = v143;
              if (!v79) {
                goto LABEL_134;
              }
            }
            int v65 = 1;
            size_t v4 = v145;
            uint64_t v5 = v146;
            int v6 = (_DWORD *)&unk_1EBCC8000;
LABEL_156:
            uint64_t v67 = v143;
            goto LABEL_157;
          }
        }
LABEL_134:
        if (llvm::CallBase::hasFnAttrOnCalledFunction(v14, 45)) {
          int v65 = 0;
        }
        else {
          int v65 = llvm::CallBase::hasFnAttrOnCalledFunction(v14, 44) ^ 1;
        }
        size_t v4 = v145;
        uint64_t v5 = v146;
        int v6 = (_DWORD *)&unk_1EBCC8000;
      }
      else
      {
        uint64_t v67 = v143;
        if (v66 == 27) {
          int v65 = (*(_WORD *)(v14 + 18) & 0x301) != 0;
        }
        else {
          int v65 = ((1 << (*(unsigned char *)(v14 + 16) - 33)) & 0x808001D0000010) != 0;
        }
      }
LABEL_157:
      uint64_t v83 = *(unsigned __int8 *)(v67 + 16) - 33;
      if (v83 > 0x37) {
        goto LABEL_161;
      }
      if (((1 << (*(unsigned char *)(v67 + 16) - 33)) & 0x8000000000041) != 0)
      {
        uint64_t v93 = *(void *)(v67 + 64);
        if (v93 && (*(unsigned char *)(v93 + 17) & 0x30) != 0)
        {
LABEL_161:
          if ((v65 & 1) == 0) {
            goto LABEL_162;
          }
          goto LABEL_30;
        }
        int v94 = *(_DWORD *)(v67 + 20);
        if ((v94 & 0x80000000) == 0 || (BOOL v98 = (void *)(v137 - 32 * (v94 & 0x7FFFFFF)), !*v98))
        {
LABEL_179:
          char v95 = llvm::CallBase::hasFnAttrOnCalledFunction(v67, 45);
          size_t v4 = v145;
          uint64_t v5 = v146;
          int v6 = (_DWORD *)&unk_1EBCC8000;
          if (v95) {
            goto LABEL_161;
          }
          int v96 = llvm::CallBase::hasFnAttrOnCalledFunction(v67, 44);
          size_t v4 = v145;
          uint64_t v5 = v146;
          int v6 = (_DWORD *)&unk_1EBCC8000;
          int v97 = v96 ^ 1;
          goto LABEL_182;
        }
        uint64_t v99 = -*v98;
        while (1)
        {
          unsigned int v100 = *(_DWORD *)(*(void *)((char *)v98 + v99) + 8);
          BOOL v12 = v100 > 7;
          int v101 = (1 << v100) & 0x83;
          BOOL v102 = v12 || v101 == 0;
          size_t v4 = v145;
          uint64_t v5 = v146;
          int v6 = (_DWORD *)&unk_1EBCC8000;
          if (v102) {
            break;
          }
          v99 += 16;
          if (!v99) {
            goto LABEL_179;
          }
        }
      }
      else
      {
        if (v83 == 27)
        {
          int v97 = (*(_WORD *)(v67 + 18) & 0x301) != 0;
LABEL_182:
          if (v65 == v97) {
            goto LABEL_162;
          }
          goto LABEL_30;
        }
        if (((1 << (*(unsigned char *)(v67 + 16) - 33)) & 0x808001D0000010) == 0) {
          goto LABEL_161;
        }
      }
      if (v65)
      {
LABEL_162:
        if (v19 == v140 && v17 == v139)
        {
          uint64_t v84 = **(void **)(v14 - 32);
          unsigned int v85 = *(_DWORD *)(v84 + 8);
          if ((v85 & 0xFE) == 0x12) {
            unsigned int v85 = *(_DWORD *)(**(void **)(v84 + 16) + 8);
          }
          uint64_t v86 = **(void **)(v143 - 32);
          int v87 = *(_DWORD *)(v86 + 8);
          if ((v87 & 0xFE) == 0x12) {
            int v87 = *(_DWORD *)(**(void **)(v86 + 16) + 8);
          }
          if ((v87 ^ v85) <= 0xFF)
          {
            unint64_t MinusSCEV = llvm::ScalarEvolution::getMinusSCEV(*(llvm::ScalarEvolution **)(*(void *)v144 + 88), v16, v138, 0, 0);
            size_t v4 = v145;
            uint64_t v5 = v146;
            int v6 = (_DWORD *)&unk_1EBCC8000;
            if (MinusSCEV && *(_WORD *)(MinusSCEV + 24) == 0)
            {
              uint64_t v90 = *(void *)(MinusSCEV + 32);
              unsigned int v91 = *(_DWORD *)(v90 + 32);
              if (v91 > 0x40) {
                uint64_t v92 = **(void **)(v90 + 24);
              }
              else {
                uint64_t v92 = (uint64_t)(*(void *)(v90 + 24) << -(char)v91) >> -(char)v91;
              }
              if (!(v92 % v139)) {
                llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch();
              }
            }
          }
        }
      }
LABEL_30:
      if (v13 == v4) {
        goto LABEL_202;
      }
    }
  }
  if (v161)
  {
    unint64_t v123 = (uint64_t *)v160;
    for (uint64_t i = 8 * v161; i; i -= 8)
    {
      uint64_t v125 = *v123;
      if (*(_DWORD *)(*v123 + 16) != *(_DWORD *)*v123)
      {
        LODWORD(v153) = *(_DWORD *)(v125 + 32);
        uint64_t v126 = sub_1CD4D6838((uint64_t *)(v125 + 8), &v153);
        int v127 = *(unsigned __int8 *)(v126 + 16);
        if (v126 && v127 == 60)
        {
          __int16 v128 = *(llvm::Value **)(v126 - 32);
        }
        else
        {
          __int16 v128 = 0;
          if (v126 && v127 == 61) {
            __int16 v128 = *(llvm::Value **)(v126 - 32);
          }
          uint64_t v126 = *(void *)(v126 - 64);
        }
        if (llvm::getPtrStride(*(int8x16_t **)v144, *(llvm::Type **)v126, v128, *((void *)v144 + 1), v135, 0, 1))
        {
          LODWORD(v153) = *(_DWORD *)v125 + *(_DWORD *)(v125 + 32) - 1;
          if (sub_1CD4D6838((uint64_t *)(v125 + 8), &v153))
          {
            LODWORD(v153) = *(_DWORD *)v125 + *(_DWORD *)(v125 + 32) - 1;
            uint64_t v130 = sub_1CD4D6838((uint64_t *)(v125 + 8), &v153);
            int v131 = *(unsigned __int8 *)(v130 + 16);
            if (v130 && v131 == 60)
            {
              uint64_t v132 = *(llvm::Value **)(v130 - 32);
            }
            else
            {
              uint64_t v132 = 0;
              if (v130 && v131 == 61) {
                uint64_t v132 = *(llvm::Value **)(v130 - 32);
              }
              uint64_t v130 = *(void *)(v130 - 64);
            }
            if (llvm::getPtrStride(*(int8x16_t **)v144, *(llvm::Type **)v130, v132, *((void *)v144 + 1), v135, 0, 1)) {
              goto LABEL_248;
            }
          }
          else if (!*(unsigned char *)(v125 + 4))
          {
            *((unsigned char *)v144 + 40) = 1;
            goto LABEL_248;
          }
          uint64_t v129 = (uint64_t)v144;
        }
        else
        {
          uint64_t v129 = (uint64_t)v144;
        }
        sub_1CD4D58D4(v129, v125);
      }
LABEL_248:
      ++v123;
    }
  }
LABEL_207:
  if (v167)
  {
    uint64_t v109 = v166;
    int v110 = (char *)&v166[v167];
    do
    {
      uint64_t v111 = *v109;
      if (*(_DWORD *)(*v109 + 16) != *(_DWORD *)*v109)
      {
        if (a2)
        {
          LODWORD(v153) = *(_DWORD *)(v111 + 32);
          uint64_t v112 = sub_1CD4D6838((uint64_t *)(v111 + 8), &v153);
          int v113 = *(unsigned __int8 *)(v112 + 16);
          if (v112 && v113 == 60)
          {
            uint64_t v114 = *(llvm::Value **)(v112 - 32);
          }
          else
          {
            uint64_t v114 = 0;
            if (v112 && v113 == 61) {
              uint64_t v114 = *(llvm::Value **)(v112 - 32);
            }
            uint64_t v112 = *(void *)(v112 - 64);
          }
          if (llvm::getPtrStride(*(int8x16_t **)v144, *(llvm::Type **)v112, v114, *((void *)v144 + 1), v135, 0, 1))
          {
            int v115 = *(_DWORD *)v111 - 1;
            while (1)
            {
              int v116 = v115 - 1;
              if (v115 < 1) {
                goto LABEL_219;
              }
              LODWORD(v153) = v115 + *(_DWORD *)(v111 + 32);
              uint64_t v117 = sub_1CD4D6838((uint64_t *)(v111 + 8), &v153);
              int v115 = v116;
              if (v117)
              {
                LODWORD(v153) = *(_DWORD *)(v111 + 32) + v116 + 1;
                uint64_t v118 = sub_1CD4D6838((uint64_t *)(v111 + 8), &v153);
                int v119 = *(unsigned __int8 *)(v118 + 16);
                if (v118 && v119 == 60)
                {
                  unint64_t v120 = *(llvm::Value **)(v118 - 32);
                  unint64_t v121 = v144;
                }
                else
                {
                  unint64_t v120 = 0;
                  if (v118)
                  {
                    BOOL v53 = v119 == 61;
                    unint64_t v121 = v144;
                    if (v53) {
                      unint64_t v120 = *(llvm::Value **)(v118 - 32);
                    }
                  }
                  else
                  {
                    unint64_t v121 = v144;
                  }
                  uint64_t v118 = *(void *)(v118 - 64);
                }
                if (llvm::getPtrStride(*(int8x16_t **)v121, *(llvm::Type **)v118, v120, *((void *)v121 + 1), v135, 0, 1))
                {
                  goto LABEL_219;
                }
                goto LABEL_244;
              }
            }
          }
          uint64_t v122 = (uint64_t)v144;
        }
        else
        {
LABEL_244:
          uint64_t v122 = (uint64_t)v144;
        }
        sub_1CD4D58D4(v122, v111);
      }
LABEL_219:
      ++v109;
    }
    while (v109 != (uint64_t *)v110);
  }
  if (v160 != v162) {
    free(v160);
  }
  if ((v157 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v158.i64[0], 8);
  }
  if (v166 != v168) {
    free(v166);
  }
  if ((v163 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v164.i64[0], 8);
  }
  return sub_1CD456CB4(v147);
}

void llvm::VFABI::getVectorVariantNames(uint64_t a1, uint64_t a2)
{
  v36[16] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 64);
  if (!v3) {
    goto LABEL_10;
  }
  if (!*(_DWORD *)(v3 + 8)) {
    goto LABEL_10;
  }
  uint64_t v4 = *(void *)(v3 + 40);
  if (!v4) {
    goto LABEL_10;
  }
  int v5 = *(_DWORD *)(v4 + 40);
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v6 = *(void *)(v4 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v19 = v6;
    int v20 = __cxa_guard_acquire(&qword_1EBCBE588);
    uint64_t v6 = v19;
    if (v20)
    {
      unint64_t v21 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v21 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v21;
      __cxa_guard_release(&qword_1EBCBE588);
      uint64_t v6 = v19;
    }
  }
  uint64_t v7 = __ROR8__(qword_1EBCBE580 ^ 0x54AC860665EEB7E3, 30);
  unint64_t v8 = 0x9DDFEA08EB382D69
     * ((qword_1EBCBE580 - 0x64CD130D9C3B577) ^ ((0x9DDFEA08EB382D69
                                                  * ((v7 - 0x4EDB291E9D31B372) ^ (qword_1EBCBE580 - 0x64CD130D9C3B577))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v7 - 0x4EDB291E9D31B372) ^ (qword_1EBCBE580 - 0x64CD130D9C3B577))));
  unsigned int v9 = -348639895 * ((v8 >> 47) ^ v8);
  for (int i = 1; ; ++i)
  {
    unsigned int v11 = v9 & (v5 - 1);
    uint64_t v12 = v6 + 24 * v11;
    int v13 = *(void **)v12;
    if (*(void *)v12 == -1)
    {
      if ("vector-function-abi-variant" == (char *)-1) {
        goto LABEL_26;
      }
      goto LABEL_9;
    }
    if (v13 != (void *)-2) {
      break;
    }
    if ("vector-function-abi-variant" == (char *)-2) {
      goto LABEL_26;
    }
LABEL_9:
    if (v13 == (void *)-1) {
      goto LABEL_10;
    }
    unsigned int v9 = i + v11;
  }
  if (*(void *)(v12 + 8) != 27) {
    goto LABEL_9;
  }
  BOOL v15 = *v13 == 0x662D726F74636576 && v13[1] == 0x2D6E6F6974636E75;
  BOOL v16 = v15 && v13[2] == 0x697261762D696261;
  if (!v16 || *(void *)((char *)v13 + 19) != 0x746E61697261762DLL) {
    goto LABEL_9;
  }
LABEL_26:
  uint64_t v18 = *(void *)(v12 + 16);
  if (!v18) {
LABEL_10:
  }
    llvm::CallBase::getFnAttrOnCalledFunction<llvm::StringRef>();
  uint64_t v14 = *(unsigned int *)(v18 + 16);
  *(void *)&long long v33 = v18 + *(unsigned int *)(v18 + 12) + 25;
  *((void *)&v33 + 1) = v14;
  if (v14)
  {
    uint64_t v34 = v36;
    uint64_t v35 = 0x800000000;
    llvm::StringRef::split(&v33, (uint64_t)&v34, ",", 1uLL, -1, 1);
    v28[0] = 0;
    v28[1] = 0;
    int v29 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v30 = 0;
    sub_1CC18A2B4((uint64_t)v28, (uint64_t)v34, (uint64_t)v34 + 16 * v35);
    uint64_t v22 = v30;
    for (uint64_t j = v31; v22 != j; v22 += 16)
    {
      std::string::__init(&__p, *(const std::string::value_type **)v22, *(void *)(v22 + 8));
      unint64_t v24 = sub_1CBFCD38C(a2, (unint64_t)&__p, 1);
      uint64_t v25 = *(void *)a2 + 24 * *(unsigned int *)(a2 + 8);
      long long v26 = *(_OWORD *)v24;
      *(void *)(v25 + 16) = *(void *)(v24 + 16);
      *(_OWORD *)uint64_t v25 = v26;
      *(void *)(v24 + 8) = 0;
      *(void *)(v24 + 16) = 0;
      *(void *)unint64_t v24 = 0;
      ++*(_DWORD *)(a2 + 8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    sub_1CC189978(v28);
    if (v34 != v36) {
      free(v34);
    }
  }
}

BOOL llvm::VFShape::hasValidParameterList(llvm::VFShape *this)
{
  unint64_t v1 = *((unsigned int *)this + 4);
  if (v1)
  {
    uint64_t v2 = 0;
    BOOL v3 = 0;
    uint64_t v4 = *((void *)this + 1);
    for (int i = (int *)(v4 + 20); ; i += 4)
    {
      uint64_t v6 = v4 + 16 * v2;
      int v7 = *(_DWORD *)(v6 + 4);
      if ((v7 - 1) < 4)
      {
        if (!*(_DWORD *)(v6 + 8)) {
          return v3;
        }
      }
      else if ((v7 - 5) >= 4)
      {
        uint64_t v10 = i;
        uint64_t v11 = v2;
        if (v7 == 10)
        {
          while (++v11 < v1)
          {
            int v12 = *v10;
            v10 += 4;
            if (v12 == 10) {
              return v3;
            }
          }
        }
      }
      else
      {
        uint64_t v8 = *(int *)(v4 + 16 * v2 + 8);
        if ((int)v8 >= (int)v1) {
          return v3;
        }
        if (v2 == v8 || *(_DWORD *)(v4 + 16 * v8 + 4) != 9) {
          return v3;
        }
      }
      BOOL v3 = ++v2 >= v1;
      if (v2 == v1) {
        return v3;
      }
    }
  }
  return 1;
}

void *sub_1CC189978(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  MEMORY[0x1D25D9CD0](*a1, 8);
  return a1;
}

unsigned int *sub_1CC1899BC(unsigned int *result, unsigned char *a2, unsigned char *a3)
{
  BOOL v3 = result;
  size_t v4 = a3 - a2;
  uint64_t v5 = result[2];
  unint64_t v6 = result[3];
  unint64_t v7 = v5 + ((a3 - a2) >> 2);
  BOOL v8 = v7 > v6;
  BOOL v9 = v7 <= v6;
  if (!v8 && a2 != a3) {
    goto LABEL_3;
  }
  if (!v9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a3)
  {
LABEL_3:
    BOOL result = (unsigned int *)memcpy((void *)(*(void *)result + 4 * v5), a2, v4);
    LODWORD(v5) = v3[2];
  }
  void v3[2] = v5 + (v4 >> 2);
  return result;
}

uint64_t sub_1CC189A5C(uint64_t a1, uint64_t a2)
{
  int v2 = 91;
  if (a2) {
    BOOL v3 = *(unsigned char *)(a2 + 16) == 91;
  }
  else {
    BOOL v3 = 0;
  }
  int v4 = v3;
  if (v3)
  {
    if (sub_1CC189AE8(a1, *(void *)(a2 - 64)))
    {
      uint64_t v6 = *(unsigned int *)(a2 + 72);
      if (v6)
      {
        unint64_t v7 = *(int **)(a2 + 64);
        uint64_t v8 = 4 * v6 - 4;
        do
        {
          int v9 = *v7++;
          int v2 = (v9 + 1) < 2;
          BOOL v10 = (v9 + 1) > 1 || v8 == 0;
          v8 -= 4;
        }
        while (!v10);
      }
      else
      {
        int v2 = 1;
      }
    }
    else
    {
      int v2 = 0;
    }
  }
  return v4 & v2;
}

uint64_t sub_1CC189AE8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16) != 90) {
    return 0;
  }
  int v2 = *(_DWORD *)(a2 + 20);
  uint64_t v3 = (v2 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v2 & 0x7FFFFFF);
  uint64_t v4 = *(void *)(v3 + 32);
  if (!v4) {
    return 0;
  }
  **(void **)(a1 + 8) = v4;
  uint64_t v5 = a1 + 16;
  int v6 = *(_DWORD *)(a2 + 20);
  if ((v6 & 0x40000000) != 0) {
    uint64_t v7 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v7 = a2 - 32 * (v6 & 0x7FFFFFF);
  }
  return sub_1CBF535C4(v5, *(llvm::Constant **)(v7 + 64));
}

uint64_t sub_1CC189B48(void **a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16) != 85) {
    return 0;
  }
  int v2 = *(_DWORD *)(a2 + 20);
  uint64_t v3 = (v2 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v2 & 0x7FFFFFF));
  uint64_t v4 = *v3;
  if (!v4) {
    return 0;
  }
  **a1 = v4;
  int v5 = *(_DWORD *)(a2 + 20);
  uint64_t v6 = (v5 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v5 & 0x7FFFFFF);
  uint64_t v7 = *(void *)(v6 + 32);
  if (!v7) {
    return 0;
  }
  *a1[1] = v7;
  int v8 = *(_DWORD *)(a2 + 20);
  uint64_t v9 = (v8 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v8 & 0x7FFFFFF);
  uint64_t v10 = *(void *)(v9 + 64);
  if (!v10) {
    return 0;
  }
  *a1[2] = v10;
  return 1;
}

BOOL sub_1CC189BDC(uint64_t a1, uint64_t *a2)
{
  sub_1CC189C6C(a1, a2, (uint64_t)&v8);
  int v4 = v9;
  if (v9)
  {
    uint64_t v5 = *a2;
    unsigned int v6 = *(_DWORD *)(a1 + 48);
    if (v6 >= *(_DWORD *)(a1 + 52)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 40) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 48);
  }
  return v4 != 0;
}

void *sub_1CC189C6C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = a1 + 8;
  int v6 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    int v8 = 4;
    uint64_t v9 = a1 + 8;
  }
  else
  {
    int v8 = *(_DWORD *)(a1 + 16);
    if (!v8)
    {
      unint64_t v21 = 0;
      goto LABEL_19;
    }
    uint64_t v9 = *(void *)(a1 + 8);
  }
  int v10 = v8 - 1;
  unsigned int v11 = ((*a2 >> 4) ^ (*a2 >> 9)) & v10;
  BOOL result = (void *)(v9 + 8 * v11);
  uint64_t v13 = *result;
  if (*a2 == *result)
  {
LABEL_13:
    if (v6)
    {
      uint64_t v18 = 4;
    }
    else
    {
      uint64_t v7 = *(void *)(a1 + 8);
      uint64_t v18 = *(unsigned int *)(a1 + 16);
    }
    char v19 = 0;
    uint64_t v20 = v7 + 8 * v18;
    goto LABEL_22;
  }
  uint64_t v14 = 0;
  int v15 = 1;
  while (v13 != -4096)
  {
    if (v14) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = v13 == -8192;
    }
    if (v16) {
      uint64_t v14 = result;
    }
    unsigned int v17 = v11 + v15++;
    unsigned int v11 = v17 & v10;
    BOOL result = (void *)(v9 + 8 * v11);
    uint64_t v13 = *result;
    if (*a2 == *result) {
      goto LABEL_13;
    }
  }
  if (v14) {
    unint64_t v21 = v14;
  }
  else {
    unint64_t v21 = result;
  }
LABEL_19:
  BOOL result = sub_1CC189E38(a1, (uint64_t)a2, a2, v21);
  void *result = *a2;
  if (*(unsigned char *)a1)
  {
    uint64_t v22 = 4;
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v22 = *(unsigned int *)(a1 + 16);
  }
  uint64_t v20 = v7 + 8 * v22;
  char v19 = 1;
LABEL_22:
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v20;
  *(unsigned char *)(a3 + 16) = v19;
  return result;
}

uint64_t sub_1CC189D90(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_16;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_13:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      uint64_t v7 = (void *)(v3 + 8 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_13;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_16:
  *a3 = v7;
  return result;
}

void *sub_1CC189E38(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 4;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1CC189FB0(a1, 2 * v8);
    uint64_t v11 = a1 + 8;
    int v6 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v12 = 4;
    }
    else
    {
      int v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        int v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      uint64_t v11 = *(void *)(a1 + 8);
    }
    int v9 = *(_DWORD *)a1 & 1;
    int v13 = v12 - 1;
    unsigned int v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (void *)(v11 + 8 * v14);
    uint64_t v15 = *a4;
    if (*a3 != *a4)
    {
      BOOL v16 = 0;
      int v17 = 1;
      while (v15 != -4096)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -8192;
        }
        if (v18) {
          BOOL v16 = a4;
        }
        unsigned int v19 = v14 + v17++;
        unsigned int v14 = v19 & v13;
        a4 = (void *)(v11 + 8 * v14);
        uint64_t v15 = *a4;
        if (*a3 == *a4) {
          goto LABEL_7;
        }
      }
      if (v16) {
        a4 = v16;
      }
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1CC189FB0(a1, v8);
      uint64_t v20 = 0;
      sub_1CC189D90(a1, a3, &v20);
      a4 = v20;
      int v6 = *(_DWORD *)a1;
    }
    int v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  return a4;
}

int *sub_1CC189FB0(uint64_t a1, unsigned int a2)
{
  void v14[4] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 4)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CC014474((int *)a1, v11, &v11[v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  int v6 = v14;
  for (uint64_t i = 8; i != 40; i += 8)
  {
    uint64_t v8 = *(void *)(a1 + i);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v6++ = v8;
    }
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CC014474((int *)a1, v14, v6);
}

uint64_t sub_1CC18A12C(_DWORD *a1, uint64_t a2)
{
  int v5 = 0;
  uint64_t result = sub_1CD426E14((uint64_t)a1, a2, &v5);
  if (result)
  {
    *int v5 = -8192;
    int v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

uint64_t sub_1CC18A180(unsigned int a1, unsigned int a2, void (*a3)(uint64_t **__return_ptr, char *, uint64_t *, char *), uint64_t a4)
{
  unsigned int v15 = 32;
  uint64_t v14 = a1;
  unsigned int v13 = 32;
  uint64_t v12 = a2;
  char v11 = 0;
  a3(&v9, (char *)&v14 + (a4 >> 1), &v12, &v11);
  if (v11)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    if (v10 > 0x40) {
      uint64_t v7 = *v9;
    }
    else {
      uint64_t v7 = (uint64_t)((void)v9 << -(char)v10) >> -(char)v10;
    }
    uint64_t v6 = v7 & 0xFFFFFF00;
    uint64_t v4 = v7;
    uint64_t v5 = 0x100000000;
  }
  if (v10 >= 0x41 && v9) {
    MEMORY[0x1D25D9CB0](v9, 0x1000C8000313F17);
  }
  if (v13 >= 0x41 && v12) {
    MEMORY[0x1D25D9CB0](v12, 0x1000C8000313F17);
  }
  if (v15 >= 0x41 && v14) {
    MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
  }
  return v5 | v4 | v6;
}

void sub_1CC18A2B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = a2;
    do
    {
      int v5 = *(_DWORD *)(a1 + 16);
      if (v5)
      {
        uint64_t v6 = *(void *)a1;
        unsigned int v7 = sub_1CD0B03C8(*(void **)v3, *(void *)v3 + *(void *)(v3 + 8));
        uint64_t v8 = 0;
        int v9 = v5 - 1;
        unsigned int v10 = *(const void **)v3;
        size_t v11 = *(void *)(v3 + 8);
        for (int i = 1; ; int i = v29 + 1)
        {
          int v29 = i;
          unsigned int v13 = v7 & v9;
          uint64_t v14 = v6 + 16 * (v7 & v9);
          unsigned int v15 = *(const void **)v14;
          if (*(void *)v14 == -1)
          {
            if (v10 == (const void *)-1) {
              goto LABEL_42;
            }
          }
          else if (v15 == (const void *)-2)
          {
            if (v10 == (const void *)-2) {
              goto LABEL_42;
            }
          }
          else if (v11 == *(void *)(v14 + 8) && (!v11 || !memcmp(v10, *(const void **)v14, v11)))
          {
            goto LABEL_42;
          }
          if (v15 == (const void *)-1) {
            break;
          }
          if (v8) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v15 == (const void *)-2;
          }
          if (v16) {
            uint64_t v8 = v6 + 16 * v13;
          }
          unsigned int v7 = v29 + v13;
        }
        if (v8) {
          uint64_t v17 = v8;
        }
        else {
          uint64_t v17 = v6 + 16 * v13;
        }
      }
      else
      {
        uint64_t v17 = 0;
      }
      *(_OWORD *)sub_1CC18A5D0(a1, v3, v3, v17) = *(_OWORD *)v3;
      unsigned int v19 = *(_OWORD **)(a1 + 32);
      unint64_t v18 = *(void *)(a1 + 40);
      if ((unint64_t)v19 >= v18)
      {
        unint64_t v21 = *(_OWORD **)(a1 + 24);
        uint64_t v22 = v19 - v21;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 60) {
          abort();
        }
        uint64_t v24 = v18 - (void)v21;
        if (v24 >> 3 > v23) {
          unint64_t v23 = v24 >> 3;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        if (v25)
        {
          if (v25 >> 60) {
            sub_1CB833614();
          }
          long long v26 = (char *)operator new(16 * v25);
        }
        else
        {
          long long v26 = 0;
        }
        uint64_t v27 = &v26[16 * v22];
        *(_OWORD *)uint64_t v27 = *(_OWORD *)v3;
        int v28 = v27;
        if (v19 != v21)
        {
          do
          {
            *((_OWORD *)v28 - 1) = *(v19 - 1);
            v28 -= 16;
            --v19;
          }
          while (v19 != v21);
          unsigned int v19 = *(_OWORD **)(a1 + 24);
        }
        uint64_t v20 = v27 + 16;
        *(void *)(a1 + 24) = v28;
        *(void *)(a1 + 32) = v27 + 16;
        *(void *)(a1 + 40) = &v26[16 * v25];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *unsigned int v19 = *(_OWORD *)v3;
        uint64_t v20 = v19 + 1;
      }
      *(void *)(a1 + 32) = v20;
LABEL_42:
      v3 += 16;
    }
    while (v3 != a3);
  }
}

uint64_t sub_1CC18A4C4(uint64_t *a1, uint64_t a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    unsigned int v7 = sub_1CD0B03C8(*(void **)a2, *(void *)a2 + *(void *)(a2 + 8));
    uint64_t v8 = 0;
    int v9 = v4 - 1;
    unsigned int v10 = *(const void **)a2;
    for (int i = 1; ; ++i)
    {
      unsigned int v12 = v7 & v9;
      uint64_t v13 = v6 + 16 * (v7 & v9);
      uint64_t v14 = *(const void **)v13;
      if (*(void *)v13 == -1)
      {
        if (v10 == (const void *)-1) {
          goto LABEL_11;
        }
      }
      else if (v14 == (const void *)-2)
      {
        if (v10 == (const void *)-2) {
          goto LABEL_11;
        }
      }
      else
      {
        size_t v15 = *(void *)(a2 + 8);
        if (v15 == *(void *)(v13 + 8) && (!v15 || !memcmp(v10, *(const void **)v13, v15)))
        {
LABEL_11:
          uint64_t result = 1;
          goto LABEL_12;
        }
      }
      if (v14 == (const void *)-1) {
        break;
      }
      if (v8) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v14 == (const void *)-2;
      }
      if (v17) {
        uint64_t v8 = v6 + 16 * v12;
      }
      unsigned int v7 = i + v12;
    }
    uint64_t result = 0;
    if (v8) {
      uint64_t v13 = v8;
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t result = 0;
  }
LABEL_12:
  *a3 = v13;
  return result;
}

uint64_t sub_1CC18A5D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1CC18A76C(a1, 2 * v7);
    int v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = *(void *)a1;
      unsigned int v12 = sub_1CD0B03C8(*(void **)a3, *(void *)a3 + *(void *)(a3 + 8));
      uint64_t v13 = 0;
      int v14 = v10 - 1;
      size_t v15 = *(const void **)a3;
      for (int i = 1; ; ++i)
      {
        unsigned int v17 = v12 & v14;
        a4 = v11 + 16 * (v12 & v14);
        unint64_t v18 = *(const void **)a4;
        if (*(void *)a4 == -1)
        {
          if (v15 == (const void *)-1) {
            goto LABEL_4;
          }
        }
        else if (v18 == (const void *)-2)
        {
          if (v15 == (const void *)-2) {
            goto LABEL_4;
          }
        }
        else
        {
          size_t v19 = *(void *)(a3 + 8);
          if (v19 == *(void *)(a4 + 8) && (!v19 || !memcmp(v15, *(const void **)a4, v19))) {
            goto LABEL_4;
          }
        }
        if (v18 == (const void *)-1) {
          break;
        }
        if (v13) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v18 == (const void *)-2;
        }
        if (v20) {
          uint64_t v13 = v11 + 16 * v17;
        }
        unsigned int v12 = i + v17;
      }
      if (v13) {
        a4 = v13;
      }
    }
    else
    {
      a4 = 0;
    }
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
    sub_1CC18A76C(a1, v7);
    uint64_t v21 = 0;
    sub_1CC18A4C4((uint64_t *)a1, a3, &v21);
    a4 = v21;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)a4 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_OWORD *sub_1CC18A76C(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(_OWORD **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD4D72FC(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *result++ = xmmword_1CFAC4A20;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC18A83C()
{
  int v4 = 1;
  *(void *)&long long v3 = "Maximum factor for an interleaved access group (default = 8)";
  *((void *)&v3 + 1) = 60;
  int v1 = 8;
  int v2 = &v1;
  sub_1CD413D64((uint64_t)&unk_1EBCC8788, "max-interleave-group-factor", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCC8788, &dword_1CB82C000);
}

void llvm::VFABI::tryDemangleForVFABI(unsigned __int8 *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, unsigned char *a5@<X8>)
{
  v125[16] = *MEMORY[0x1E4F143B8];
  if (a2 < 4 || *(_DWORD *)a1 != 1447516767 || a2 < 5) {
    goto LABEL_60;
  }
  if (a2 - 4 >= 6 && (*((_DWORD *)a1 + 1) == 1447840863 ? (BOOL v9 = *((unsigned __int16 *)a1 + 4) == 24397) : (BOOL v9 = 0), v9))
  {
    int v11 = 6;
    uint64_t v12 = -10;
    uint64_t v13 = 10;
  }
  else
  {
    int v10 = a1[4];
    switch(a1[4])
    {
      case 'b':
        int v11 = 2;
        break;
      case 'c':
        int v11 = 3;
        break;
      case 'd':
        int v11 = 4;
        break;
      case 'e':
        int v11 = 5;
        break;
      default:
        if (v10 == 110)
        {
          int v11 = 0;
        }
        else if (v10 == 115)
        {
          int v11 = 1;
        }
        else
        {
          int v11 = 7;
        }
        break;
    }
    uint64_t v12 = -5;
    uint64_t v13 = 5;
  }
  size_t v14 = a2 + v12;
  if (!v14) {
    goto LABEL_60;
  }
  size_t v15 = &a1[v13];
  int v16 = *v15;
  if ((v16 - 77) >= 2) {
    goto LABEL_60;
  }
  uint64_t v108 = v15 + 1;
  size_t v109 = v14 - 1;
  if (v14 == 1 || v15[1] != 120)
  {
    int8x8_t v110 = 0;
    char v17 = llvm::consumeUnsignedInteger((llvm *)&v108, (llvm::StringRef *)0xA, (unint64_t *)&v110, a4);
    __int32 v18 = 0;
    if (*(void *)&v110 < 0x100000000uLL) {
      __int32 v18 = v110.i32[0];
    }
    if ((v17 & 1) == 0 && !HIDWORD(*(void *)&v110) && v18)
    {
      int v102 = v16;
      unsigned int v100 = v18;
      int v105 = 1;
      int v106 = v11;
      goto LABEL_32;
    }
LABEL_60:
    *a5 = 0;
    a5[208] = 0;
    return;
  }
  int v102 = v16;
  int v105 = 0;
  int v106 = v11;
  unsigned int v100 = 0;
  uint64_t v108 = v15 + 2;
  size_t v109 = v14 - 2;
LABEL_32:
  unsigned int v19 = 0;
  unint64_t v123 = (char *)v125;
  for (uint64_t i = 0x800000000; ; LODWORD(i) = i + 1)
  {
    v119.i32[0] = 0;
    unsigned int v107 = 0;
    if (!v109) {
      break;
    }
    int v20 = *v108;
    if (v20 != 117)
    {
      if (v20 == 118)
      {
        size_t v21 = v109 - 1;
        ++v108;
        size_t v109 = v21;
        v119.i32[0] = 0;
        if (!v21) {
          goto LABEL_56;
        }
        goto LABEL_51;
      }
      break;
    }
    size_t v21 = v109 - 1;
    ++v108;
    size_t v109 = v21;
    v119.i32[0] = 9;
    if (!v21) {
      goto LABEL_56;
    }
LABEL_51:
    if (*v108 != 97)
    {
LABEL_56:
      unint64_t v24 = 0;
      goto LABEL_57;
    }
    ++v108;
    size_t v109 = v21 - 1;
    int8x8_t v110 = 0;
    if (llvm::consumeUnsignedInteger((llvm *)&v108, (llvm::StringRef *)0xA, (unint64_t *)&v110, a4))goto LABEL_155; {
    if (!*(void *)&v110)
    }
      goto LABEL_155;
    uint8x8_t v23 = (uint8x8_t)vcnt_s8(v110);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL) {
      goto LABEL_155;
    }
    unint64_t v24 = __clz(*(void *)&v110) ^ 0x3F;
LABEL_57:
    uint64_t v25 = v107;
    if (i >= (unint64_t)HIDWORD(i)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    long long v26 = (unint64_t *)&v123[16 * i];
    *long long v26 = v19 | ((unint64_t)v119.u32[0] << 32);
    v26[1] = v25 | (v24 << 32);
    unsigned int v19 = i + 1;
  }
  int v22 = sub_1CC18B470((const void **)&v108, &v119, &v107, "ls", 2uLL);
  if (v22 == 1)
  {
    int v22 = sub_1CC18B470((const void **)&v108, &v119, &v107, "Rs", 2uLL);
    if (v22 == 1)
    {
      int v22 = sub_1CC18B470((const void **)&v108, &v119, &v107, "Ls", 2uLL);
      if (v22 == 1) {
        int v22 = sub_1CC18B470((const void **)&v108, &v119, &v107, "Us", 2uLL);
      }
    }
  }
  if (v22 == 1)
  {
    if (!sub_1CC18B514((const void **)&v108, &v119, &v107, "l", 1uLL)
      || !sub_1CC18B514((const void **)&v108, &v119, &v107, "R", 1uLL)
      || !sub_1CC18B514((const void **)&v108, &v119, &v107, "L", 1uLL))
    {
LABEL_48:
      size_t v21 = v109;
      if (!v109) {
        goto LABEL_56;
      }
      goto LABEL_51;
    }
    int v22 = sub_1CC18B514((const void **)&v108, &v119, &v107, "U", 1uLL);
  }
  if (!v22) {
    goto LABEL_48;
  }
  if (v22 == 2) {
    goto LABEL_155;
  }
  uint64_t v27 = i;
  if (!i) {
    goto LABEL_155;
  }
  size_t v28 = v109;
  if (!v109) {
    goto LABEL_155;
  }
  int v29 = v108;
  if (*v108 != 95) {
    goto LABEL_155;
  }
  uint64_t v30 = v108 + 1;
  unint64_t v31 = v109 - 1;
  ++v108;
  --v109;
  if (v28 == 1)
  {
LABEL_70:
    unint64_t v32 = -1;
  }
  else
  {
    unint64_t v32 = 0;
    while (v30[v32] != 40)
    {
      if (v31 == ++v32) {
        goto LABEL_70;
      }
    }
  }
  uint64_t v33 = v31 >= v32 ? v32 : v28 - 1;
  if (!v33) {
    goto LABEL_155;
  }
  size_t v98 = v33;
  unint64_t first_not_of = llvm::StringRef::find_first_not_of(&v108, v30, v33, 0);
  if (first_not_of >= v31) {
    unint64_t v35 = v28 - 1;
  }
  else {
    unint64_t v35 = first_not_of;
  }
  int v97 = v29 + 1;
  uint64_t v36 = (char *)&v29[v35 + 1];
  unint64_t v37 = v31 - v35;
  uint64_t v108 = (unsigned __int8 *)v36;
  size_t v109 = v37;
  __s1 = a1;
  BOOL v38 = v31 > first_not_of;
  unint64_t v39 = a2;
  if (v38)
  {
    __s1 = a1;
    unint64_t v39 = a2;
    if (*v36 == 40)
    {
      uint64_t v40 = (unsigned __int8 *)(v36 + 1);
      unint64_t v41 = v37 - 1;
      __s1 = v40;
      uint64_t v108 = v40;
      size_t v109 = v37 - 1;
      if (v37 != 1 && v29[v28 - 1] == 41)
      {
        unint64_t v42 = v37 - 2;
        if (v41 < v42) {
          unint64_t v42 = v41;
        }
        size_t v109 = v42;
        if (v42)
        {
          unint64_t v39 = v42;
          goto LABEL_87;
        }
      }
LABEL_155:
      *a5 = 0;
      a5[208] = 0;
      goto LABEL_156;
    }
  }
LABEL_87:
  int v43 = v106;
  if (v106 == 6 && v39 == a2 && !memcmp(__s1, a1, a2)) {
    goto LABEL_155;
  }
  if (v102 == 77)
  {
    if (v27 >= HIDWORD(i)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v44 = (uint64_t *)&v123[16 * v27];
    *uint64_t v44 = v27 | 0xA00000000;
    v44[1] = 0;
    int v45 = i + 1;
    LODWORD(i) = i + 1;
  }
  else
  {
    int v45 = 1;
  }
  if ((v105 & 1) == 0)
  {
    int v94 = v45;
    uint64_t v46 = *(uint64_t **)(a3 + 112);
    unint64_t v60 = *((unsigned int *)v46 + 8);
    size_t v61 = v39;
    if ((v60 & 0x80000000) == 0)
    {
      if (v60 <= 1) {
        unint64_t v62 = 1;
      }
      else {
        unint64_t v62 = v60;
      }
      if (v39 < v62) {
        unint64_t v62 = v39;
      }
      if (v39 > v60) {
        size_t v61 = v62;
      }
      else {
        size_t v61 = v39;
      }
    }
    unint64_t v93 = *((unsigned int *)v46 + 8);
    size_t __lena = v39;
    uint64_t v101 = *((unsigned int *)v46 + 2);
    if (!v101) {
      goto LABEL_155;
    }
    int v63 = 0;
    size_t v64 = v61;
    int v65 = __s1;
    do
    {
      int v66 = *v65++;
      int v63 = 33 * v63 + v66;
      --v64;
    }
    while (v64);
    uint64_t v67 = *v46;
    uint64_t v68 = *v46 + 8 * v101 + 8;
    int v69 = 1;
    int v70 = v63;
    uint64_t v104 = *v46;
    while (1)
    {
      uint64_t v71 = v70 & (v101 - 1);
      uint64_t v72 = *(void **)(v67 + 8 * v71);
      if (v72 != (void *)-8)
      {
        if (!v72) {
          goto LABEL_155;
        }
        if (*(_DWORD *)(v68 + 4 * v71) == v63 && v61 == *v72)
        {
          size_t v73 = v61;
          int v74 = memcmp(__s1, (char *)v72 + *((unsigned int *)v46 + 5), v61);
          uint64_t v67 = v104;
          size_t v61 = v73;
          if (!v74) {
            break;
          }
        }
      }
      int v70 = v69 + v71;
      ++v69;
    }
    if (v71 == -1) {
      goto LABEL_155;
    }
    if ((int)v71 == v101) {
      goto LABEL_155;
    }
    uint64_t v75 = *(void *)(*(void *)(v104 + 8 * (int)v71) + 8);
    if (!v75 || *(unsigned char *)(v75 + 16)) {
      goto LABEL_155;
    }
    uint64_t v76 = *(void *)(v75 + 24);
    uint64_t v77 = *(uint64_t **)(v76 + 16);
    uint64_t v78 = *v77;
    if (*v77) {
      BOOL v79 = (*(_DWORD *)(*v77 + 8) & 0xFE) == 18;
    }
    else {
      BOOL v79 = 0;
    }
    if (!v79)
    {
      uint64_t v80 = 8 * *(unsigned int *)(v76 + 12) - 8;
      if (!v80)
      {
        unsigned int v100 = 1;
LABEL_181:
        unint64_t v39 = __lena;
        unint64_t v47 = v93;
        goto LABEL_97;
      }
      int v81 = v77 + 1;
      uint64_t v82 = 8 * (v80 >> 3);
      while (1)
      {
        uint64_t v78 = *v81;
        if (*v81 && (*(_DWORD *)(*v81 + 8) & 0xFE) == 18) {
          break;
        }
        ++v81;
        unsigned int v100 = 1;
        v82 -= 8;
        if (!v82) {
          goto LABEL_181;
        }
      }
    }
    unsigned int v100 = *(_DWORD *)(v78 + 32);
    int v43 = v106;
    unint64_t v39 = __lena;
    int v45 = v94;
  }
  if (!v100) {
    goto LABEL_155;
  }
  int v94 = v45;
  int v106 = v43;
  uint64_t v46 = *(uint64_t **)(a3 + 112);
  unint64_t v47 = *((unsigned int *)v46 + 8);
LABEL_97:
  if (v47 <= 1) {
    unint64_t v48 = 1;
  }
  else {
    unint64_t v48 = v47;
  }
  if (v39 < v48) {
    unint64_t v48 = v39;
  }
  if (v39 <= v47) {
    unint64_t v48 = v39;
  }
  size_t __len = v39;
  if ((v47 & 0x80000000) == 0) {
    size_t v49 = v48;
  }
  else {
    size_t v49 = v39;
  }
  uint64_t v103 = *((unsigned int *)v46 + 2);
  if (!v103) {
    goto LABEL_155;
  }
  int v50 = 0;
  size_t v51 = v49;
  int v52 = __s1;
  do
  {
    int v53 = *v52++;
    int v50 = 33 * v50 + v53;
    --v51;
  }
  while (v51);
  uint64_t v54 = *v46;
  uint64_t v55 = *v46 + 8 * v103 + 8;
  int v56 = 1;
  int v57 = v50;
  while (1)
  {
    uint64_t v58 = v57 & (v103 - 1);
    uint64_t v59 = *(void **)(v54 + 8 * v58);
    if (v59 != (void *)-8)
    {
      if (!v59) {
        goto LABEL_155;
      }
      if (*(_DWORD *)(v55 + 4 * v58) == v50
        && v49 == *v59
        && !memcmp(__s1, (char *)v59 + *((unsigned int *)v46 + 5), v49))
      {
        break;
      }
    }
    int v57 = v56 + v58;
    ++v56;
  }
  if (v58 == -1) {
    goto LABEL_155;
  }
  if ((int)v58 == v103) {
    goto LABEL_155;
  }
  uint64_t v84 = *(void *)(*(void *)(v54 + 8 * (int)v58) + 8);
  if (!v84 || *(unsigned char *)(v84 + 16)) {
    goto LABEL_155;
  }
  uint64_t v85 = 0x100000000;
  if (v105) {
    uint64_t v85 = 0;
  }
  int8x8_t v86 = (int8x8_t)(v85 | v100);
  int8x8_t v119 = v86;
  unint64_t v120 = v122;
  uint64_t v121 = 0x800000000;
  if (v94)
  {
    sub_1CD49DFB4((uint64_t)&v120, (uint64_t)&v123);
    int8x8_t v110 = v119;
    uint64_t v111 = v113;
    uint64_t v112 = 0x800000000;
    if (v121) {
      sub_1CD49DFB4((uint64_t)&v111, (uint64_t)&v120);
    }
  }
  else
  {
    int8x8_t v110 = v86;
    uint64_t v111 = v113;
    uint64_t v112 = 0x800000000;
  }
  if (v98 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_183;
  }
  if (v98 >= 0x17)
  {
    uint64_t v88 = (v98 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v98 | 7) != 0x17) {
      uint64_t v88 = v98 | 7;
    }
    uint64_t v89 = v88 + 1;
    int v87 = operator new(v88 + 1);
    v114[1] = v98;
    unint64_t v115 = v89 | 0x8000000000000000;
    v114[0] = v87;
  }
  else
  {
    int v87 = v114;
    HIBYTE(v115) = v98;
  }
  memmove(v87, v97, v98);
  *((unsigned char *)v87 + v98) = 0;
  if (__len > 0x7FFFFFFFFFFFFFF7) {
LABEL_183:
  }
    abort();
  if (__len >= 0x17)
  {
    uint64_t v91 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      uint64_t v91 = __len | 7;
    }
    uint64_t v92 = v91 + 1;
    uint64_t v90 = operator new(v91 + 1);
    v116[1] = __len;
    unint64_t v117 = v92 | 0x8000000000000000;
    v116[0] = v90;
  }
  else
  {
    uint64_t v90 = v116;
    HIBYTE(v117) = __len;
  }
  memmove(v90, __s1, __len);
  *((unsigned char *)v90 + __len) = 0;
  int v118 = v106;
  sub_1CD49DCF4((uint64_t)a5, (uint64_t)&v110);
  a5[208] = 1;
  sub_1CD49DEA4((uint64_t)&v110);
  if (v120 != v122) {
    free(v120);
  }
LABEL_156:
  if (v123 != (char *)v125) {
    free(v123);
  }
}

uint64_t llvm::VFABI::getVFParamKindFromString(_WORD *a1, uint64_t a2)
{
  if (a2 == 2)
  {
    switch(*a1)
    {
      case 0x736C:
        uint64_t v3 = 0x100000005;
        goto LABEL_26;
      case 0x734C:
        uint64_t v3 = 0x100000006;
        goto LABEL_26;
      case 0x7352:
        uint64_t v3 = 0x100000007;
        goto LABEL_26;
      case 0x7355:
        uint64_t v3 = 0x100000008;
        goto LABEL_26;
    }
LABEL_12:
    uint64_t v3 = 0;
    goto LABEL_26;
  }
  if (a2 != 1) {
    goto LABEL_12;
  }
  unsigned int v2 = *(unsigned __int8 *)a1;
  if (v2 <= 0x54)
  {
    if (v2 == 76)
    {
      uint64_t v3 = 0x100000003;
    }
    else
    {
      if (v2 != 82) {
        goto LABEL_21;
      }
      uint64_t v3 = 0x100000002;
    }
  }
  else
  {
    switch(v2)
    {
      case 'U':
        uint64_t v3 = 0x100000004;
        break;
      case 'l':
        uint64_t v3 = 0x100000001;
        break;
      case 'v':
        uint64_t v3 = 0x100000000;
        break;
      default:
LABEL_21:
        if (v2 == 117) {
          uint64_t v3 = 0x100000009;
        }
        else {
          uint64_t v3 = 0;
        }
        break;
    }
  }
LABEL_26:
  if ((v3 & 0x300000000) != 0) {
    return v3;
  }
  else {
    return 11;
  }
}

uint64_t sub_1CC18B470(const void **a1, _DWORD *a2, _DWORD *a3, _WORD *a4, size_t __n)
{
  if (!sub_1CD41D698(a1, a4, __n)) {
    return 1;
  }
  *a2 = llvm::VFABI::getVFParamKindFromString(a4, __n);
  unint64_t v12 = 0;
  if ((llvm::consumeSignedInteger((llvm *)a1, (llvm::StringRef *)0xA, &v12, v10) & 1) != 0 || v12 != (int)v12) {
    return 2;
  }
  uint64_t result = 0;
  *a3 = v12;
  return result;
}

uint64_t sub_1CC18B514(const void **a1, _DWORD *a2, _DWORD *a3, _WORD *a4, size_t __n)
{
  if (!sub_1CD41D698(a1, a4, __n)) {
    return 1;
  }
  *a2 = llvm::VFABI::getVFParamKindFromString(a4, __n);
  int v11 = 1;
  int v12 = sub_1CD41D698(a1, "n", 1uLL);
  unint64_t v15 = 0;
  if ((llvm::consumeSignedInteger((llvm *)a1, (llvm::StringRef *)0xA, &v15, v13) & 1) != 0
    || (int v14 = v15, v15 != (int)v15))
  {
    *a3 = 1;
  }
  else
  {
    *a3 = v15;
    int v11 = v14;
  }
  uint64_t result = 0;
  if (v12) {
    *a3 = -v11;
  }
  return result;
}

uint64_t llvm::LLLexer::Warning(uint64_t a1, char *a2, llvm::Twine *a3)
{
  return llvm::SourceMgr::PrintMessage(*(llvm **)(a1 + 32), a2, 1, a3, 0, 0, 0, 0, 1u);
}

unint64_t llvm::LLLexer::atoull(llvm::LLLexer *this, const char *a2, const char *a3)
{
  if (a2 == a3) {
    return 0;
  }
  uint64_t v10 = v3;
  uint64_t v11 = v4;
  unint64_t v5 = 0;
  while (1)
  {
    unint64_t v6 = *a2 + 10 * v5 - 48;
    if (v6 < v5) {
      break;
    }
    ++a2;
    unint64_t v5 = v6;
    if (a2 == a3) {
      return v6;
    }
  }
  unsigned int v8 = "constant bigger than 64 bits detected!";
  __int16 v9 = 259;
  sub_1CD4D7520((uint64_t)this, (llvm::Twine *)&v8);
  return 0;
}

unint64_t llvm::LLLexer::HexIntToVal(llvm::LLLexer *this, const char *a2, const char *a3)
{
  if (a2 == a3) {
    return 0;
  }
  uint64_t v10 = v3;
  uint64_t v11 = v4;
  unint64_t v5 = 0;
  while (1)
  {
    unint64_t v6 = 16 * v5 + word_1CFAC4A4C[*(unsigned __int8 *)a2];
    if (v6 < v5) {
      break;
    }
    ++a2;
    unint64_t v5 = v6;
    if (a2 == a3) {
      return v6;
    }
  }
  unsigned int v8 = "constant bigger than 64 bits detected!";
  __int16 v9 = 259;
  sub_1CD4D7520((uint64_t)this, (llvm::Twine *)&v8);
  return 0;
}

uint64_t llvm::LLLexer::LLLexer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = a6;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 96) = 0;
  int v13 = 64;
  int v12 = 0;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)v9, &v12);
  uint64_t v7 = v9[1];
  *(void *)(a1 + 112) = v9[0];
  *(void *)(a1 + 120) = v7;
  *(_DWORD *)(a1 + 128) = v10;
  *(unsigned char *)(a1 + 132) = *(unsigned char *)(a1 + 132) & 0xF0 | v11 & 0xF;
  *(_DWORD *)(a1 + 144) = 1;
  *(void *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 148) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(void *)a1 = *(void *)(a1 + 8);
  return a1;
}

{
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = a6;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 96) = 0;
  sub_1CB892E1C(a1 + 104, 0.0);
  *(_DWORD *)(a1 + 144) = 1;
  *(void *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 148) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(void *)a1 = *(void *)(a1 + 8);
  return a1;
}

uint64_t llvm::LLLexer::getNextChar(llvm::LLLexer *this)
{
  int v1 = (unsigned char *)(*(void *)this)++;
  uint64_t v2 = *v1;
  if (!*v1)
  {
    if (v1 == (unsigned char *)(*((void *)this + 1) + *((void *)this + 2)))
    {
      *(void *)this = v1;
      return 0xFFFFFFFFLL;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t llvm::LLLexer::LexToken(llvm::LLLexer *this)
{
  uint64_t v2 = *(std::string::value_type **)this;
  while (1)
  {
    uint64_t v3 = v2;
    *((void *)this + 6) = v2++;
    *(void *)this = v2;
    uint64_t v4 = *v3;
    if (*v3 > 0x7Au) {
      break;
    }
    switch(*v3)
    {
      case 9:
      case 10:
      case 13:
      case 32:
        continue;
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 38:
      case 39:
      case 47:
      case 63:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 92:
        goto LABEL_21;
      case 33:
        return llvm::LLLexer::LexExclaim(this);
      case 34:
        return llvm::LLLexer::LexQuote(this);
      case 35:
        uint64_t v14 = 435;
        goto LABEL_74;
      case 36:
        return llvm::LLLexer::LexDollar(this);
      case 37:
        uint64_t v15 = 440;
        uint64_t v16 = 434;
        goto LABEL_70;
      case 40:
        return 12;
      case 41:
        return 13;
      case 42:
        return 5;
      case 43:
        return llvm::LLLexer::LexPositive(this);
      case 44:
        return 4;
      case 45:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        return llvm::LLLexer::LexDigitOrNegative(this);
      case 46:
        unsigned int v10 = *v2;
        if (v10 == 58) {
          goto LABEL_51;
        }
        uint64_t v11 = MEMORY[0x1E4F14390];
        while (1)
        {
          int v12 = (v10 & 0x80) != 0 ? __maskrune(v10, 0x500uLL) : *(_DWORD *)(v11 + 4 * v10 + 60) & 0x500;
          if (!v12 && (v10 - 36 > 0x3B || ((1 << (v10 - 36)) & 0x800000000000601) == 0)) {
            break;
          }
          unsigned int v13 = *++v2;
          unsigned int v10 = v13;
          if (v13 == 58)
          {
            uint64_t v3 = (std::string::value_type *)*((void *)this + 6);
LABEL_51:
            *(void *)this = v2 + 1;
            sub_1CC19262C((std::string *)((char *)this + 64), v3, v2, v2 - v3);
            return 437;
          }
        }
        char v17 = *(std::string::value_type **)this;
        if (**(unsigned char **)this == 46 && v17[1] == 46)
        {
          *(void *)this = v17 + 2;
          return 2;
        }
        return 1;
      case 58:
        return 16;
      case 59:
        break;
      case 60:
        return 10;
      case 61:
        return 3;
      case 62:
        return 11;
      case 64:
        uint64_t v15 = 438;
        uint64_t v16 = 433;
LABEL_70:
        return llvm::LLLexer::LexVar((uint64_t)this, v15, v16);
      case 91:
        return 6;
      case 93:
        return 7;
      case 94:
        uint64_t v14 = 436;
LABEL_74:
        return llvm::LLLexer::LexUIntID((unsigned __int8 **)this, v14);
      default:
        if (*v3) {
          goto LABEL_21;
        }
        if (v3 != (std::string::value_type *)(*((void *)this + 1) + *((void *)this + 2))) {
          continue;
        }
        uint64_t result = 0;
        *(void *)this = v3;
        return result;
    }
    while (1)
    {
      unint64_t v5 = v2;
      int v6 = *v2;
      if (v6 == 10 || v6 == 13) {
        break;
      }
      ++v2;
      *(void *)this = v5 + 1;
      if (!*v5 && v5 == (std::string::value_type *)(*((void *)this + 1) + *((void *)this + 2)))
      {
        *(void *)this = v5;
        break;
      }
    }
    uint64_t v2 = v5;
  }
  switch(v4)
  {
    case '{':
      return 8;
    case '|':
      return 15;
    case '}':
      return 9;
  }
LABEL_21:
  if ((v4 & 0x80) != 0) {
    int v9 = __maskrune(*v3, 0x100uLL);
  }
  else {
    int v9 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v4 + 60) & 0x100;
  }
  if (v4 != 95 && !v9) {
    return 1;
  }

  return llvm::LLLexer::LexIdentifier(this);
}

uint64_t llvm::LLLexer::LexIdentifier(llvm::LLLexer *this)
{
  uint64_t v2 = 0;
  uint64_t v3 = *(char **)this;
  uint64_t v4 = *(void *)this - 1;
  if (*(unsigned char *)v4 == 105) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = *(char **)this;
  }
  uint64_t v6 = MEMORY[0x1E4F14390];
  for (uint64_t i = *(char **)this; ; *(void *)this = i)
  {
    int v8 = *i;
    int v9 = v8;
    if (v8 < 0) {
      break;
    }
    if ((*(_DWORD *)(v6 + 4 * v8 + 60) & 0x500) == 0) {
      goto LABEL_9;
    }
LABEL_13:
    uint64_t v11 = *(std::string::value_type **)this;
    if (!v5)
    {
      if ((*(_DWORD *)(v6 + 4 * *v11 + 60) & 0x400) != 0) {
        unint64_t v5 = 0;
      }
      else {
        unint64_t v5 = *(char **)this;
      }
    }
    if (!v2)
    {
      uint64_t v12 = *v11;
      if (*v11 < 0)
      {
        int v13 = __maskrune(v12, 0x500uLL);
        uint64_t v11 = *(std::string::value_type **)this;
        if (v13)
        {
LABEL_20:
          uint64_t v2 = 0;
          goto LABEL_25;
        }
      }
      else if ((*(_DWORD *)(v6 + 4 * v12 + 60) & 0x500) != 0)
      {
        goto LABEL_20;
      }
      if (*v11 == 95) {
        uint64_t v2 = 0;
      }
      else {
        uint64_t v2 = v11;
      }
    }
LABEL_25:
    uint64_t i = v11 + 1;
  }
  if (__maskrune(v8, 0x500uLL)) {
    goto LABEL_13;
  }
LABEL_9:
  if ((v9 - 36) <= 0x3B && ((1 << (v9 - 36)) & 0x800000000000601) != 0) {
    goto LABEL_13;
  }
  if (!*((unsigned char *)this + 152))
  {
    uint64_t v14 = *(std::string::value_type **)this;
    if (**(unsigned char **)this == 58)
    {
      *(void *)this = v14 + 1;
      sub_1CC19262C((std::string *)((char *)this + 64), (std::string::value_type *)v4, v14, (std::string::size_type)&v14[-v4]);
      return 437;
    }
  }
  if (!v5) {
    unint64_t v5 = *(char **)this;
  }
  if (v5 != v3)
  {
    unint64_t v16 = 0;
    *(void *)this = v5;
    do
    {
      unint64_t v17 = v16;
      unint64_t v16 = *v3 + 10 * v16 - 48;
      if (v16 < v17)
      {
        __src = "constant bigger than 64 bits detected!";
        __int16 v452 = 259;
        sub_1CD4D7520((uint64_t)this, (llvm::Twine *)&__src);
        goto LABEL_64;
      }
      ++v3;
    }
    while (v3 != v5);
    if (v16 - 8388609 > 0xFFFFFFFFFF7FFFFFLL)
    {
      uint64_t v18 = llvm::IntegerType::get(*((llvm::IntegerType **)this + 5), (llvm::LLVMContext *)v16);
      goto LABEL_37;
    }
LABEL_64:
    __src = "bitwidth for integer type out of range!";
    __int16 v452 = 259;
    sub_1CD4D7520((uint64_t)this, (llvm::Twine *)&__src);
    return 1;
  }
  if (!v2) {
    uint64_t v2 = *(std::string::value_type **)this;
  }
  *(void *)this = v2;
  unint64_t v19 = (unint64_t)&v2[-v4];
  if (&v2[-v4] != (std::string::value_type *)4)
  {
    int v22 = 0;
    int v39 = 0;
    int v40 = 0;
    int v41 = 0;
    int v42 = 0;
    int v43 = 0;
    int v44 = 0;
    int v45 = 0;
    int v46 = 0;
    int v47 = 0;
    uint64_t v27 = 0;
    int v48 = 0;
    switch(v19)
    {
      case 1uLL:
        goto LABEL_462;
      case 2uLL:
        if (*(_WORD *)v4 == 28532) {
          return 55;
        }
        if (*(_WORD *)v4 == 25447) {
          return 101;
        }
        if (*(_WORD *)v4 != 25443)
        {
          int v22 = 0;
          int v42 = 0;
          int v41 = 0;
          int v39 = 0;
          int v46 = 0;
          int v47 = 0;
          LODWORD(v27) = 0;
          int v48 = 0;
          int v40 = 0;
          int v45 = 1;
          goto LABEL_1162;
        }
        return 105;
      case 3uLL:
        if (*(_WORD *)v4 == 29550 && *(unsigned char *)(v4 + 2) == 122) {
          return 79;
        }
        if (*(_WORD *)v4 == 26209 && *(unsigned char *)(v4 + 2) == 110) {
          return 83;
        }
        if (*(_WORD *)v4 == 30062 && *(unsigned char *)(v4 + 2) == 119) {
          return 85;
        }
        if (*(_WORD *)v4 == 29550 && *(unsigned char *)(v4 + 2) == 119) {
          return 86;
        }
        if (*(_WORD *)v4 == 29537 && *(unsigned char *)(v4 + 2) == 109) {
          return 97;
        }
        if (*(_WORD *)v4 == 25443 && *(unsigned char *)(v4 + 2) == 99) {
          return 106;
        }
        if (*(_WORD *)v4 == 29555 && *(unsigned char *)(v4 + 2) == 112) {
          return 219;
        }
        if (*(_WORD *)v4 != 28257 || *(unsigned char *)(v4 + 2) != 121)
        {
          int v20 = 0;
          BOOL v21 = 0;
          int v22 = 0;
          int v23 = 0;
          int v24 = 0;
          int v25 = 0;
          int v26 = 0;
          uint64_t v27 = 0;
          int v28 = 0;
          int v29 = 0;
          int v30 = 0;
          int v31 = 0;
          int v32 = 0;
          int v33 = 0;
          int v34 = 0;
          int v35 = 0;
          int v36 = 0;
          BOOL v37 = 0;
          BOOL v38 = 0;
          int v126 = 1;
          goto LABEL_1681;
        }
        return 245;
      case 4uLL:
      case 0x11uLL:
      case 0x13uLL:
      case 0x15uLL:
        goto LABEL_1162;
      case 5uLL:
        if (*(_DWORD *)v4 == 1936482662 && *(unsigned char *)(v4 + 4) == 101) {
          return 20;
        }
        if (*(_DWORD *)v4 == 1701080693 && *(unsigned char *)(v4 + 4) == 102) {
          return 51;
        }
        if (*(_DWORD *)v4 == 1667332197 && *(unsigned char *)(v4 + 4) == 116) {
          return 87;
        }
        if (*(_DWORD *)v4 == 1734962273 && *(unsigned char *)(v4 + 4) == 110) {
          return 90;
        }
        if (*(_DWORD *)v4 == 1634298977 && *(unsigned char *)(v4 + 4) == 115) {
          return 94;
        }
        if (*(_DWORD *)v4 == 1853187689 && *(unsigned char *)(v4 + 4) == 99) {
          return 95;
        }
        if (*(_DWORD *)v4 != 1667459175 || *(unsigned char *)(v4 + 4) != 99)
        {
          int v39 = 0;
          int v40 = 0;
          int v42 = 0;
          int v43 = 0;
          int v44 = 0;
          int v22 = 1;
          goto LABEL_1112;
        }
        return 146;
      case 6uLL:
        if (*(_DWORD *)v4 == 1768318308 && *(_WORD *)(v4 + 4) == 25966) {
          return 22;
        }
        if (*(_DWORD *)v4 == 1651469415 && *(_WORD *)(v4 + 4) == 27745) {
          return 23;
        }
        if (*(_DWORD *)v4 == 1835888483 && *(_WORD *)(v4 + 4) == 28271) {
          return 36;
        }
        if (*(_DWORD *)v4 == 1684302184 && *(_WORD *)(v4 + 4) == 28261) {
          return 39;
        }
        if (*(_DWORD *)v4 == 1936289648 && *(_WORD *)(v4 + 4) == 28271) {
          return 52;
        }
        if (*(_DWORD *)v4 == 1819042147 && *(_WORD *)(v4 + 4) == 29285) {
          return 56;
        }
        if (*(_DWORD *)v4 == 1752459639 && *(_WORD *)(v4 + 4) == 28265) {
          return 57;
        }
        if (*(_DWORD *)v4 == 1635020654 && *(_WORD *)(v4 + 4) == 27753) {
          return 61;
        }
        if (*(_DWORD *)v4 == 1735549300 && *(_WORD *)(v4 + 4) == 29797) {
          return 62;
        }
        if (*(_DWORD *)v4 == 1885958772 && *(_WORD *)(v4 + 4) == 25964) {
          return 63;
        }
        if (*(_DWORD *)v4 == 1769434741 && *(_WORD *)(v4 + 4) == 25710) {
          return 65;
        }
        if (*(_DWORD *)v4 == 1836020833 && *(_WORD *)(v4 + 4) == 25449) {
          return 69;
        }
        if (*(_DWORD *)v4 == 1969516397 && *(_WORD *)(v4 + 4) == 25964) {
          return 96;
        }
        if (*(_DWORD *)v4 == 1717924464 && *(_WORD *)(v4 + 4) == 30825) {
          return 102;
        }
        if (*(_DWORD *)v4 == 1953718630 && *(_WORD *)(v4 + 4) == 25443) {
          return 107;
        }
        if (*(_DWORD *)v4 == 1684828003 && *(_WORD *)(v4 + 4) == 25443) {
          return 108;
        }
        if (*(_DWORD *)v4 == 1836476520 && *(_WORD *)(v4 + 4) == 25443) {
          return 148;
        }
        if (*(_DWORD *)v4 == 1818845556 && *(_WORD *)(v4 + 4) == 25443) {
          return 160;
        }
        if (*(_DWORD *)v4 == 1919315822 && *(_WORD *)(v4 + 4) == 25957) {
          return 193;
        }
        if (*(_DWORD *)v4 == 2037608302 && *(_WORD *)(v4 + 4) == 25454) {
          return 203;
        }
        if (*(_DWORD *)v4 != 1919972211 || *(_WORD *)(v4 + 4) != 29029)
        {
          BOOL v37 = 0;
          int v36 = 0;
          int v35 = 0;
          int v41 = 0;
          int v33 = 0;
          int v32 = 0;
          int v88 = 0;
          int v29 = 0;
          int v26 = 0;
          int v25 = 0;
          int v89 = 0;
          int v23 = 0;
          int v22 = 0;
          BOOL v21 = 0;
          int v20 = 0;
          int v30 = 1;
          goto LABEL_1587;
        }
        return 220;
      case 7uLL:
        if (*(_DWORD *)v4 == 1818453348 && *(_DWORD *)(v4 + 3) == 1701994860) {
          return 21;
        }
        if (*(_DWORD *)v4 == 1986622064 && *(_DWORD *)(v4 + 3) == 1702125942) {
          return 27;
        }
        if (*(_DWORD *)v4 == 1634100580 && *(_DWORD *)(v4 + 3) == 1953264993) {
          return 38;
        }
        if (*(_DWORD *)v4 == 1970365281 && *(_DWORD *)(v4 + 3) == 1701996917) {
          return 72;
        }
        if (*(_DWORD *)v4 == 1701602674 && *(_DWORD *)(v4 + 3) == 1702060389) {
          return 73;
        }
        if (*(_DWORD *)v4 == 1601266529 && *(_DWORD *)(v4 + 3) == 1818587743) {
          return 74;
        }
        if (*(_DWORD *)v4 == 1601267059 && *(_DWORD *)(v4 + 3) == 1953719135) {
          return 75;
        }
        if (*(_DWORD *)v4 == 1935762802 && *(_DWORD *)(v4 + 3) == 1668248435) {
          return 82;
        }
        if (*(_DWORD *)v4 == 1634889321 && *(_DWORD *)(v4 + 3) == 1701277281) {
          return 89;
        }
        if (*(_DWORD *)v4 == 1952671091 && *(_DWORD *)(v4 + 3) == 1852795252) {
          return 92;
        }
        if (*(_DWORD *)v4 == 913205623 && *(_DWORD *)(v4 + 3) == 1667445814) {
          return 139;
        }
        if (*(_DWORD *)v4 == 1718187891 && *(_DWORD *)(v4 + 3) == 1667462246) {
          return 142;
        }
        if (*(_DWORD *)v4 != 1818850658 || *(_DWORD *)(v4 + 3) != 1852404844)
        {
          int v43 = 0;
          int v42 = 0;
          int v41 = 0;
          int v39 = 0;
          int v47 = 0;
          int v44 = 0;
          int v48 = 0;
          int v40 = 0;
          int v46 = 1;
          goto LABEL_1057;
        }
        return 170;
      case 8uLL:
        switch(*(void *)v4)
        {
          case 0x746E6174736E6F63:
            return 24;
          case 0x6C616E7265746E69:
            return 28;
          case 0x65636E6F6B6E696CLL:
            return 29;
          case 0x72646F5F6B616577:
            return 32;
          case 0x6C616E7265747865:
            return 45;
          case 0x6C6961747473756DLL:
            return 60;
          case 0x656C6974616C6F76:
            return 68;
          case 0x74636172746E6F63:
            return 81;
          case 0x73646E756F626E69:
            return 88;
          case 0x6575676F6C6F7270:
            return 103;
          case 0x636369745F786761:
            return 128;
          case 0x636373705F786761:
            return 129;
          case 0x636373765F786761:
            return 130;
          case 0x636373735F786761:
            return 131;
          case 0x636366735F786761:
            return 132;
          case 0x636369735F786761:
            return 133;
          case 0x63636C635F786761:
            return 134;
          case 0x636373645F786761:
            return 135;
          case 0x636372705F786761:
            return 136;
          case 0x6363726D5F786761:
            return 137;
          case 0x6363676572796E61:
            return 141;
          case 0x6363635F6D766868:
            return 149;
          case 0x61636F6C6C616E69:
            return 172;
          case 0x656E696C6E696F6ELL:
            return 195;
          case 0x6E72757465726F6ELL:
            return 202;
          case 0x646E69776E756F6ELL:
            return 205;
          case 0x656E6F6E64616572:
            return 213;
          case 0x796C6E6F64616572:
            return 214;
          case 0x64656E7275746572:
            return 215;
        }
        if (*(void *)v4 != 0x7066746369727473)
        {
          BOOL v37 = 0;
          int v36 = 0;
          int v35 = 0;
          int v41 = 0;
          int v33 = 0;
          int v32 = 0;
          int v88 = 0;
          int v30 = 0;
          int v26 = 0;
          int v25 = 0;
          int v89 = 0;
          int v23 = 0;
          int v22 = 0;
          BOOL v21 = 0;
          int v20 = 0;
          int v29 = 1;
          goto LABEL_1587;
        }
        return 228;
      case 9uLL:
        if (*(void *)v4 == 0x61636F6C5F6F7364 && *(unsigned char *)(v4 + 8) == 108) {
          return 25;
        }
        if (*(void *)v4 == 0x6E69646E65707061 && *(unsigned char *)(v4 + 8) == 103) {
          return 33;
        }
        if (*(void *)v4 == 0x726F706D696C6C64 && *(unsigned char *)(v4 + 8) == 116) {
          return 34;
        }
        if (*(void *)v4 == 0x726F7078656C6C64 && *(unsigned char *)(v4 + 8) == 116) {
          return 35;
        }
        if (*(void *)v4 == 0x65746365746F7270 && *(unsigned char *)(v4 + 8) == 100) {
          return 40;
        }
        if (*(void *)v4 == 0x6578656C61636F6CLL && *(unsigned char *)(v4 + 8) == 99) {
          return 49;
        }
        if (*(void *)v4 == 0x65726564726F6E75 && *(unsigned char *)(v4 + 8) == 100) {
          return 70;
        }
        if (*(void *)v4 == 0x696E6F746F6E6F6DLL && *(unsigned char *)(v4 + 8) == 99) {
          return 71;
        }
        if (*(void *)v4 == 0x706F6373636E7973 && *(unsigned char *)(v4 + 8) == 101) {
          return 76;
        }
        if (*(void *)v4 == 0x6361707372646461 && *(unsigned char *)(v4 + 8) == 101) {
          return 91;
        }
        if (*(void *)v4 == 0x6F69746974726170 && *(unsigned char *)(v4 + 8) == 110) {
          return 93;
        }
        if (*(void *)v4 != 0x6E75665F72697073 || *(unsigned char *)(v4 + 8) != 99)
        {
          int v40 = 0;
          char v66 = 0;
          int v44 = 0;
          int v39 = 1;
          goto LABEL_234;
        }
        return 127;
      case 0xAuLL:
        if (*(void *)v4 == 0x6F79616C61746164 && *(_WORD *)(v4 + 8) == 29813) {
          return 67;
        }
        if (*(void *)v4 == 0x6566666565646973 && *(_WORD *)(v4 + 8) == 29795) {
          return 98;
        }
        if (*(void *)v4 == 0x6174736E67696C61 && *(_WORD *)(v4 + 8) == 27491) {
          return 99;
        }
        if (*(void *)v4 == 0x736370615F6D7261 && *(_WORD *)(v4 + 8) == 25443) {
          return 116;
        }
        if (*(void *)v4 == 0x72746E695F727661 && *(_WORD *)(v4 + 8) == 25443) {
          return 122;
        }
        if (*(void *)v4 == 0x6E72656B5F787470 && *(_WORD *)(v4 + 8) == 27749) {
          return 124;
        }
        if (*(void *)v4 != 0x697665645F787470 || *(_WORD *)(v4 + 8) != 25955)
        {
          int v39 = 0;
          int v40 = 0;
          char v66 = 0;
          int v44 = 1;
          goto LABEL_234;
        }
        return 125;
      case 0xBuLL:
        if (*(void *)v4 == 0x775F6E7265747865 && *(void *)(v4 + 3) == 0x6B6165775F6E7265) {
          return 44;
        }
        if (*(void *)v4 == 0x656C616974696E69 && *(void *)(v4 + 3) == 0x636578656C616974) {
          return 48;
        }
        if (*(void *)v4 == 0x637061615F6D7261 && *(void *)(v4 + 3) == 0x636373637061615FLL) {
          return 117;
        }
        if (*(void *)v4 == 0x72656B5F72697073 && *(void *)(v4 + 3) == 0x6C656E72656B5F72) {
          return 126;
        }
        if (*(void *)v4 == 0x6A5F74696B626577 && *(void *)(v4 + 3) == 0x6363736A5F74696BLL) {
          return 140;
        }
        if (*(void *)v4 == 0x6961747466697773 && *(void *)(v4 + 3) == 0x63636C6961747466) {
          return 143;
        }
        if (*(void *)v4 != 0x74746E656D656C65 || *(void *)(v4 + 3) != 0x65707974746E656DLL)
        {
          int v22 = 0;
          int v42 = 0;
          int v41 = 0;
          int v45 = 0;
          int v39 = 0;
          int v46 = 0;
          int v47 = 0;
          LODWORD(v27) = 0;
          int v48 = 0;
          int v40 = 0;
          int v36 = 1;
          goto LABEL_1174;
        }
        return 178;
      case 0xCuLL:
        if (*(void *)v4 == 0x65636E6F6B6E696CLL && *(_DWORD *)(v4 + 8) == 1919184735) {
          return 30;
        }
        if (*(void *)v4 == 0x5F64656D616E6E75 && *(_DWORD *)(v4 + 8) == 1919181921) {
          return 41;
        }
        if (*(void *)v4 == 0x6C5F646165726874 && *(_DWORD *)(v4 + 8) == 1818321775) {
          return 46;
        }
        if (*(void *)v4 == 0x6E79646C61636F6CLL && *(_DWORD *)(v4 + 8) == 1667853665) {
          return 47;
        }
        if (*(void *)v4 == 0x6169646C65746E69 && *(_DWORD *)(v4 + 8) == 1952671084) {
          return 100;
        }
        if (*(void *)v4 != 0x6E6769735F727661 || *(_DWORD *)(v4 + 8) != 1667460193)
        {
          int v39 = 0;
          char v66 = 0;
          int v44 = 0;
          int v40 = 1;
          goto LABEL_234;
        }
        return 123;
      case 0xDuLL:
        if (*(void *)v4 == 0x636474735F363878 && *(void *)(v4 + 5) == 0x63636C6C61636474) {
          return 111;
        }
        if (*(void *)v4 == 0x695F30333470736DLL && *(void *)(v4 + 5) == 0x636372746E695F30) {
          return 121;
        }
        if (*(void *)v4 == 0x735F34365F363878 && *(void *)(v4 + 5) == 0x6363767379735F34) {
          return 138;
        }
        if (*(void *)v4 != 0x636765725F363878 || *(void *)(v4 + 5) != 0x63636C6C61636765)
        {
          int v22 = 0;
          int v39 = 0;
          int v40 = 0;
          int v42 = 0;
          int v44 = 0;
          int v43 = 1;
          goto LABEL_1112;
        }
        return 115;
      case 0xEuLL:
        if (*(void *)v4 == 0x747361665F363878 && *(void *)(v4 + 6) == 0x63636C6C61637473) {
          return 112;
        }
        if (*(void *)v4 == 0x736968745F363878 && *(void *)(v4 + 6) == 0x63636C6C61637369) {
          return 113;
        }
        if (*(void *)v4 == 0x636F5F6C65746E69 && *(void *)(v4 + 6) == 0x636369625F6C636FLL) {
          return 109;
        }
        int v39 = 0;
        int v40 = 0;
        int v44 = 0;
        char v66 = 1;
LABEL_234:
        if (v66)
        {
          if (*(void *)v4 == 0x6576726573657270 && *(void *)(v4 + 6) == 0x63636C6C615F6576) {
            return 145;
          }
          int v22 = 0;
          int v43 = 0;
          int v42 = 1;
        }
        else
        {
          int v22 = 0;
          int v42 = 0;
          int v43 = 0;
        }
LABEL_1112:
        if (v44)
        {
          if (*(void *)v4 == 0x72746E695F363878 && *(_WORD *)(v4 + 8) == 25443) {
            return 147;
          }
        }
        if (v42)
        {
          if (*(void *)v4 == 0x747361665F787863 && *(void *)(v4 + 6) == 0x6363736C745F7473) {
            return 150;
          }
        }
        if (!v39) {
          goto LABEL_1151;
        }
        if (*(void *)v4 == 0x765F757067646D61 && *(unsigned char *)(v4 + 8) == 115) {
          return 151;
        }
        if (*(void *)v4 == 0x6C5F757067646D61 && *(unsigned char *)(v4 + 8) == 115) {
          return 152;
        }
        if (*(void *)v4 == 0x685F757067646D61 && *(unsigned char *)(v4 + 8) == 115) {
          return 153;
        }
        if (*(void *)v4 == 0x655F757067646D61 && *(unsigned char *)(v4 + 8) == 115) {
          return 154;
        }
        if (*(void *)v4 == 0x675F757067646D61 && *(unsigned char *)(v4 + 8) == 115) {
          return 155;
        }
        if (*(void *)v4 == 0x705F757067646D61 && *(unsigned char *)(v4 + 8) == 115) {
          return 156;
        }
        if (*(void *)v4 == 0x635F757067646D61 && *(unsigned char *)(v4 + 8) == 115) {
          return 157;
        }
LABEL_1151:
        if (v43)
        {
          if (*(void *)v4 == 0x6B5F757067646D61 && *(void *)(v4 + 5) == 0x6C656E72656B5F75) {
            return 158;
          }
        }
        else if (v44)
        {
          if (*(void *)v4 != 0x675F757067646D61 || *(_WORD *)(v4 + 8) != 30822)
          {
            int v41 = 0;
            int v44 = 1;
            goto LABEL_461;
          }
          return 159;
        }
        int v41 = 0;
        goto LABEL_461;
      case 0xFuLL:
        if (*(void *)v4 == 0x656572705F6F7364 && *(void *)(v4 + 7) == 0x656C626174706D65) {
          return 26;
        }
        if (*(void *)v4 == 0x74696E696F72657ALL && *(void *)(v4 + 7) == 0x72657A696C616974) {
          return 50;
        }
        if (*(void *)v4 == 0x665F656372756F73 && *(void *)(v4 + 7) == 0x656D616E656C6966) {
          return 64;
        }
        if (*(void *)v4 == 0x5F64726175676663 && *(void *)(v4 + 7) == 0x63636B636568635FLL) {
          return 110;
        }
        if (*(void *)v4 == 0x637061615F6D7261 && *(void *)(v4 + 7) == 0x63637066765F7363) {
          return 118;
        }
        if (*(void *)v4 == 0x6576726573657270 && *(void *)(v4 + 7) == 0x636374736F6D5F65) {
          return 144;
        }
        if (*(void *)v4 == 0x6572656665726564 && *(void *)(v4 + 7) == 0x656C626165636E65) {
          return 175;
        }
        if (*(void *)v4 == 0x63696C706D696F6ELL && *(void *)(v4 + 7) == 0x74616F6C66746963) {
          return 194;
        }
        if (*(void *)v4 != 0x6163776F64616873 || *(void *)(v4 + 7) != 0x6B636174736C6C61)
        {
          BOOL v37 = 0;
          int v36 = 0;
          int v35 = 0;
          int v33 = 0;
          int v32 = 0;
          int v31 = 0;
          int v30 = 0;
          int v29 = 0;
          int v26 = 0;
          int v25 = 0;
          int v24 = 0;
          int v23 = 0;
          int v22 = 0;
          BOOL v21 = 0;
          int v20 = 0;
          int v58 = 1;
          goto LABEL_1593;
        }
        return 223;
      case 0x10uLL:
        if (*(void *)v4 == 0x746365765F363878 && *(void *)(v4 + 8) == 0x63636C6C6163726FLL) {
          return 114;
        }
        if (*(void *)v4 == 0x65746E695F726961 && *(void *)(v4 + 8) == 0x6E6F697463657372) {
          return 161;
        }
        int v22 = 0;
        int v39 = 0;
        int v40 = 0;
        int v42 = 0;
        int v43 = 0;
        int v44 = 0;
        int v41 = 1;
LABEL_461:
        if (v19 == 1)
        {
LABEL_462:
          if (*(unsigned char *)v4 == 99) {
            return 104;
          }
          int v48 = 1;
        }
        else if (v44)
        {
          if (*(void *)v4 == 0x7475626972747461 && *(_WORD *)(v4 + 8) == 29541) {
            return 162;
          }
          int v48 = 0;
          int v44 = 1;
        }
        else
        {
          int v48 = 0;
        }
        if (v40)
        {
          if (*(void *)v4 == 0x6E69737961776C61 && *(_DWORD *)(v4 + 8) == 1701734764) {
            return 165;
          }
        }
        if (v44)
        {
          if (*(void *)v4 == 0x696C61636F6C6C61 && *(_WORD *)(v4 + 8) == 28263) {
            return 163;
          }
        }
        if (v39)
        {
          if (*(void *)v4 == 0x7A6973636F6C6C61 && *(unsigned char *)(v4 + 8) == 101) {
            return 164;
          }
        }
        if (v44)
        {
          if (*(void *)v4 == 0x6E6F6D656D677261 && *(_WORD *)(v4 + 8) == 31084) {
            return 166;
          }
        }
        int v46 = 0;
        int v47 = v22;
LABEL_1057:
        if (v47)
        {
          if (*(_DWORD *)v4 == 1635154274 && *(unsigned char *)(v4 + 4) == 108) {
            return 171;
          }
        }
        if (v44)
        {
          if (*(void *)v4 == 0x65677265766E6F63 && *(_WORD *)(v4 + 8) == 29806) {
            return 174;
          }
          int v45 = 0;
          LODWORD(v27) = 1;
        }
        else
        {
          int v45 = 0;
          LODWORD(v27) = 0;
        }
        int v22 = v43;
LABEL_1162:
        if (v19 == 33)
        {
          int v442 = v48;
          int v443 = v47;
          int v445 = v40;
          int v446 = v45;
          int v444 = v27;
          int v279 = v42;
          if (!memcmp((const void *)v4, "disable_sanitizer_instrumentation", 0x21uLL)) {
            return 177;
          }
          int v36 = 0;
          int v42 = v279;
          LODWORD(v27) = v444;
          int v40 = v445;
          int v48 = v442;
          int v47 = v443;
          int v45 = v446;
        }
        else
        {
          if (v19 == 23)
          {
            BOOL v277 = *(void *)v4 == 0x6572656665726564 && *(void *)(v4 + 8) == 0x5F656C626165636ELL;
            if (v277 && *(void *)(v4 + 15) == 0x6C6C756E5F726F5FLL) {
              return 176;
            }
          }
          int v36 = 0;
        }
LABEL_1174:
        if (v19 == 29)
        {
          if (*(void *)v4 == 0x7373656363616E69
            && *(void *)(v4 + 8) == 0x5F6D656D656C6269
            && *(void *)(v4 + 16) == 0x656D6772615F726FLL
            && *(void *)(v4 + 21) == 0x796C6E6F6D656D67)
          {
            return 180;
          }
        }
        else
        {
          if (v19 == 19)
          {
            if (*(void *)v4 == 0x7373656363616E69
              && *(void *)(v4 + 8) == 0x6F6D656D656C6269
              && *(void *)(v4 + 11) == 0x796C6E6F6D656D65)
            {
              return 179;
            }
            int v23 = 1;
LABEL_1203:
            if (v47)
            {
              if (*(_DWORD *)v4 == 1701998185 && *(unsigned char *)(v4 + 4) == 103) {
                return 182;
              }
            }
            if (v39)
            {
              if (*(void *)v4 == 0x6C626174706D756ALL && *(unsigned char *)(v4 + 8) == 101) {
                return 183;
              }
            }
            if (v46)
            {
              if (*(_DWORD *)v4 == 1936615789 && *(_DWORD *)(v4 + 3) == 1702521203) {
                return 184;
              }
            }
            if (v47)
            {
              if (*(_DWORD *)v4 == 1701536110 && *(unsigned char *)(v4 + 4) == 100) {
                return 185;
              }
            }
            if (v46)
            {
              if (*(_DWORD *)v4 == 1818324846 && *(_DWORD *)(v4 + 3) == 1935763820) {
                return 187;
              }
            }
            if (v39)
            {
              if (*(void *)v4 == 0x69746C6975626F6ELL && *(unsigned char *)(v4 + 8) == 110) {
                return 189;
              }
            }
            if (v27)
            {
              if (*(void *)v4 == 0x61626C6C61636F6ELL && *(_WORD *)(v4 + 8) == 27491) {
                return 190;
              }
            }
            if (v39)
            {
              if (*(void *)v4 == 0x7275747061636F6ELL && *(unsigned char *)(v4 + 8) == 101) {
                return 191;
              }
            }
            if (v36)
            {
              if (*(void *)v4 == 0x63696C7075646F6ELL && *(void *)(v4 + 3) == 0x65746163696C7075) {
                return 192;
              }
            }
            if (v39)
            {
              if (*(void *)v4 == 0x7372756365726F6ELL && *(unsigned char *)(v4 + 8) == 101) {
                return 196;
              }
            }
            if (v36)
            {
              if (*(void *)v4 == 0x62797A616C6E6F6ELL && *(void *)(v4 + 3) == 0x646E6962797A616CLL) {
                return 197;
              }
            }
            if (v46)
            {
              if (*(_DWORD *)v4 == 1701670766 && *(_DWORD *)(v4 + 3) == 1701278309) {
                return 198;
              }
              if (*(_DWORD *)v4 == 1852731246 && *(_DWORD *)(v4 + 3) == 1819047278) {
                return 199;
              }
            }
            if (v39)
            {
              if (*(void *)v4 == 0x6C69666F72706F6ELL && *(unsigned char *)(v4 + 8) == 101) {
                return 200;
              }
              if (*(void *)v4 == 0x6E6F7A6465726F6ELL && *(unsigned char *)(v4 + 8) == 101) {
                return 201;
              }
            }
            if (v27)
            {
              if (*(void *)v4 == 0x6568635F66636F6ELL && *(_WORD *)(v4 + 8) == 27491) {
                return 204;
              }
            }
            if (v46)
            {
              if (*(_DWORD *)v4 == 1853189998 && *(_DWORD *)(v4 + 3) == 1717920878) {
                return 188;
              }
            }
            BOOL v37 = v19 == 17;
            int v25 = v48;
            int v33 = v45;
            int v88 = v47;
            int v26 = v27;
            int v89 = v40;
            int v35 = v42;
            if (v19 == 17)
            {
              if (*(void *)v4 == 0x6974696E61736F6ELL
                && *(void *)(v4 + 8) == 0x646E756F625F657ALL
                && *(unsigned char *)(v4 + 16) == 115)
              {
                return 206;
              }
            }
            else
            {
              if (!v23)
              {
                BOOL v21 = v19 == 21;
                if (v19 == 21)
                {
                  if (*(void *)v4 == 0x696F705F6C6C756ELL
                    && *(void *)(v4 + 8) == 0x5F73695F7265746ELL
                    && *(void *)(v4 + 13) == 0x64696C61765F7369)
                  {
                    return 208;
                  }
                }
                else if (v22)
                {
                  if (*(void *)v4 == 0x7566726F6674706FLL && *(void *)(v4 + 5) == 0x676E697A7A756672) {
                    return 209;
                  }
                  int v22 = 1;
                }
                BOOL v37 = 0;
                int v23 = 0;
                int v20 = 0;
                if (!v46)
                {
LABEL_1561:
                  if (v40)
                  {
                    if (*(void *)v4 == 0x636F6C6C61657270 && *(_DWORD *)(v4 + 8) == 1684370529) {
                      return 212;
                    }
                  }
                  if (v22)
                  {
                    if (*(void *)v4 == 0x5F736E7275746572 && *(void *)(v4 + 5) == 0x65636977745F736ELL) {
                      return 216;
                    }
                  }
                  if (v20)
                  {
                    if (*(_DWORD *)v4 == 1852270963 && *(_DWORD *)(v4 + 3) == 1954047342) {
                      return 217;
                    }
                  }
                  if (v40)
                  {
                    if (*(void *)v4 == 0x74616C7563657073 && *(_DWORD *)(v4 + 8) == 1701601889) {
                      return 218;
                    }
                  }
                  if (v39)
                  {
                    if (*(void *)v4 == 0x6E6F727473707373 && *(unsigned char *)(v4 + 8) == 103) {
                      return 221;
                    }
                    int v30 = 0;
                    int v29 = 0;
                    int v32 = 1;
LABEL_1587:
                    if (v32)
                    {
                      if (*(void *)v4 == 0x6361747365666173 && *(unsigned char *)(v4 + 8) == 107) {
                        return 222;
                      }
                    }
                    int v58 = 0;
                    int v24 = v89;
                    int v31 = v88;
                    if (!v41)
                    {
LABEL_1593:
                      int v34 = 0;
                      uint64_t v27 = 0;
                      if (v58)
                      {
                        if (*(void *)v4 == 0x657A6974696E6173 && *(void *)(v4 + 7) == 0x6761746D656D5F65) {
                          return 169;
                        }
                        if (*(void *)v4 == 0x657A6974696E6173 && *(void *)(v4 + 7) == 0x6461657268745F65) {
                          return 225;
                        }
                        if (*(void *)v4 != 0x657A6974696E6173 || *(void *)(v4 + 7) != 0x79726F6D656D5F65)
                        {
                          int v28 = 1;
                          goto LABEL_1595;
                        }
                        return 226;
                      }
LABEL_1594:
                      int v28 = 0;
LABEL_1595:
                      BOOL v38 = v19 == 26;
                      if (v19 == 26)
                      {
                        if (*(void *)v4 == 0x74616C7563657073
                          && *(void *)(v4 + 8) == 0x64616F6C5F657669
                          && *(void *)(v4 + 16) == 0x696E65647261685FLL
                          && *(_WORD *)(v4 + 24) == 26478)
                        {
                          return 227;
                        }
                      }
                      else if (v26)
                      {
                        if (*(void *)v4 == 0x7272657466697773 && *(_WORD *)(v4 + 8) == 29295) {
                          return 229;
                        }
                        int v26 = 1;
                      }
                      if (v32)
                      {
                        if (*(void *)v4 == 0x6C65737466697773 && *(unsigned char *)(v4 + 8) == 102) {
                          return 230;
                        }
                      }
                      if (v26)
                      {
                        if (*(void *)v4 == 0x7973617466697773 && *(_WORD *)(v4 + 8) == 25454) {
                          return 231;
                        }
                      }
                      if (v20)
                      {
                        if (*(_DWORD *)v4 == 1635022709 && *(_DWORD *)(v4 + 3) == 1701601889) {
                          return 232;
                        }
                      }
                      if (v24)
                      {
                        if (*(void *)v4 == 0x725F656C61637376 && *(_DWORD *)(v4 + 8) == 1701277281) {
                          return 233;
                        }
                      }
                      if (v26)
                      {
                        if (*(void *)v4 == 0x757465726C6C6977 && *(_WORD *)(v4 + 8) == 28274) {
                          return 234;
                        }
                      }
                      if (v32)
                      {
                        if (*(void *)v4 == 0x6C6E6F6574697277 && *(unsigned char *)(v4 + 8) == 121) {
                          return 235;
                        }
                      }
                      if (v20)
                      {
                        if (*(_DWORD *)v4 == 1869768058 && *(_DWORD *)(v4 + 3) == 1954047343) {
                          return 236;
                        }
                      }
                      if (v30)
                      {
                        if (*(_DWORD *)v4 == 1634561385 && *(_WORD *)(v4 + 4) == 26482) {
                          return 237;
                        }
                      }
                      if (v31)
                      {
                        if (*(_DWORD *)v4 == 1702000994 && *(unsigned char *)(v4 + 4) == 102) {
                          return 238;
                        }
                      }
                      if (v24)
                      {
                        if (*(void *)v4 == 0x676F72707473756DLL && *(_DWORD *)(v4 + 8) == 1936942450) {
                          return 239;
                        }
                      }
LABEL_1664:
                      if (v31)
                      {
                        if (*(_DWORD *)v4 == 1853453153 && *(unsigned char *)(v4 + 4) == 99) {
                          return 241;
                        }
                      }
                      if (v19 == 4 && *(_DWORD *)v4 == 1701869940) {
                        return 242;
                      }
                      if (v30)
                      {
                        if (*(_DWORD *)v4 == 1902211183 && *(_WORD *)(v4 + 4) == 25973) {
                          return 243;
                        }
                        if (*(_DWORD *)v4 == 1684893539 && *(_WORD *)(v4 + 4) == 29793) {
                          return 244;
                        }
                      }
                      int v126 = 0;
LABEL_1681:
                      if (v26)
                      {
                        if (*(void *)v4 == 0x74616D7463617865 && *(_WORD *)(v4 + 8) == 26723) {
                          return 246;
                        }
                      }
                      if (v20)
                      {
                        if (*(_DWORD *)v4 == 1735549292 && *(_DWORD *)(v4 + 3) == 1953719655) {
                          return 247;
                        }
                      }
                      if (v22)
                      {
                        if (*(void *)v4 == 0x6C70756465646F6ELL && *(void *)(v4 + 5) == 0x65746163696C7075) {
                          return 248;
                        }
                      }
                      if (v29 && *(void *)v4 == 0x657A6973656D6173) {
                        return 249;
                      }
                      if (v33)
                      {
                        if (*(_WORD *)v4 == 29029) {
                          return 250;
                        }
                        if (*(_WORD *)v4 == 25966) {
                          return 251;
                        }
                      }
                      int v447 = v33;
                      if (v126)
                      {
                        if (*(_WORD *)v4 == 27763 && *(unsigned char *)(v4 + 2) == 116) {
                          return 252;
                        }
                        if (*(_WORD *)v4 == 26483 && *(unsigned char *)(v4 + 2) == 116) {
                          return 253;
                        }
                        if (*(_WORD *)v4 == 27763 && *(unsigned char *)(v4 + 2) == 101) {
                          return 254;
                        }
                        if (*(_WORD *)v4 == 26483 && *(unsigned char *)(v4 + 2) == 101) {
                          return 255;
                        }
                        if (*(_WORD *)v4 == 27765 && *(unsigned char *)(v4 + 2) == 116) {
                          return 256;
                        }
                        if (*(_WORD *)v4 == 26485 && *(unsigned char *)(v4 + 2) == 116) {
                          return 257;
                        }
                        if (*(_WORD *)v4 == 27765 && *(unsigned char *)(v4 + 2) == 101) {
                          return 258;
                        }
                        if (*(_WORD *)v4 == 26485 && *(unsigned char *)(v4 + 2) == 101) {
                          return 259;
                        }
                        if (*(_WORD *)v4 == 25967 && *(unsigned char *)(v4 + 2) == 113) {
                          return 260;
                        }
                        if (*(_WORD *)v4 == 28271 && *(unsigned char *)(v4 + 2) == 101) {
                          return 261;
                        }
                        if (*(_WORD *)v4 == 27759 && *(unsigned char *)(v4 + 2) == 116) {
                          return 262;
                        }
                        if (*(_WORD *)v4 == 26479 && *(unsigned char *)(v4 + 2) == 116) {
                          return 263;
                        }
                        if (*(_WORD *)v4 == 27759 && *(unsigned char *)(v4 + 2) == 101) {
                          return 264;
                        }
                        if (*(_WORD *)v4 == 26479 && *(unsigned char *)(v4 + 2) == 101) {
                          return 265;
                        }
                        if (*(_WORD *)v4 == 29295 && *(unsigned char *)(v4 + 2) == 100) {
                          return 266;
                        }
                        if (*(_WORD *)v4 == 28277 && *(unsigned char *)(v4 + 2) == 111) {
                          return 267;
                        }
                        if (*(_WORD *)v4 == 25973 && *(unsigned char *)(v4 + 2) == 113) {
                          return 268;
                        }
                        if (*(_WORD *)v4 == 28277 && *(unsigned char *)(v4 + 2) == 101) {
                          return 269;
                        }
                      }
                      if (v19 == 4)
                      {
                        if (*(_DWORD *)v4 == 1734894456) {
                          return 270;
                        }
                        if (*(_DWORD *)v4 == 1684955502) {
                          return 271;
                        }
                      }
                      if (v126)
                      {
                        if (*(_WORD *)v4 == 24941 && *(unsigned char *)(v4 + 2) == 120) {
                          return 272;
                        }
                        if (*(_WORD *)v4 == 26989 && *(unsigned char *)(v4 + 2) == 110) {
                          return 273;
                        }
                      }
                      if (v19 == 4)
                      {
                        if (*(_DWORD *)v4 == 2019650933) {
                          return 274;
                        }
                        if (*(_DWORD *)v4 == 1852403061) {
                          return 275;
                        }
                      }
                      if (v30)
                      {
                        if (*(_DWORD *)v4 == 1633907574 && *(_WORD *)(v4 + 4) == 25964) {
                          return 17;
                        }
                      }
                      if (v25 && *(unsigned char *)v4 == 120) {
                        return 18;
                      }
                      if (v24)
                      {
                        if (*(void *)v4 == 0x6464616B636F6C62 && *(_DWORD *)(v4 + 8) == 1936942450) {
                          return 344;
                        }
                      }
                      if (v30)
                      {
                        if (*(_DWORD *)v4 == 1667198830 && *(_WORD *)(v4 + 4) == 26982) {
                          return 346;
                        }
                      }
                      if (v29 && *(void *)v4 == 0x74636E6974736964) {
                        return 348;
                      }
                      if (v24)
                      {
                        if (*(void *)v4 == 0x6F7473696C657375 && *(_DWORD *)(v4 + 8) == 1919247474) {
                          return 349;
                        }
                      }
                      if (v28)
                      {
                        if (*(void *)v4 == 0x6F7473696C657375 && *(void *)(v4 + 7) == 0x62625F726564726FLL) {
                          return 350;
                        }
                      }
                      if (v36)
                      {
                        if (*(void *)v4 == 0x6C616E6F73726570 && *(void *)(v4 + 3) == 0x7974696C616E6F73) {
                          return 315;
                        }
                      }
                      if (v20)
                      {
                        if (*(_DWORD *)v4 == 1634036835 && *(_DWORD *)(v4 + 3) == 1886744161) {
                          return 316;
                        }
                      }
                      if (v31)
                      {
                        if (*(_DWORD *)v4 == 1668571491 && *(unsigned char *)(v4 + 4) == 104) {
                          return 317;
                        }
                      }
                      if (v30)
                      {
                        if (*(_DWORD *)v4 == 1953261926 && *(_WORD *)(v4 + 4) == 29285) {
                          return 318;
                        }
                      }
                      if (v19 == 4)
                      {
                        switch(*(_DWORD *)v4)
                        {
                          case 0x68746170:
                            return 351;
                          case 0x68736168:
                            return 352;
                          case 0x64697567:
                            return 354;
                          case 0x656D616E:
                            return 355;
                        }
                      }
                      else if (v33)
                      {
                        if (*(_WORD *)v4 == 30311) {
                          return 353;
                        }
                        int v447 = 1;
                      }
                      else
                      {
                        int v447 = 0;
                      }
                      if (v32)
                      {
                        if (*(void *)v4 == 0x656972616D6D7573 && *(unsigned char *)(v4 + 8) == 115) {
                          return 356;
                        }
                      }
                      if (v31)
                      {
                        if (*(_DWORD *)v4 == 1734437990 && *(unsigned char *)(v4 + 4) == 115) {
                          return 357;
                        }
                      }
                      if (v26)
                      {
                        if (*(void *)v4 == 0x756F636B636F6C62 && *(_WORD *)(v4 + 8) == 29806) {
                          return 358;
                        }
                      }
                      if (v20)
                      {
                        if (*(_DWORD *)v4 == 1802398060 && *(_DWORD *)(v4 + 3) == 1701273963) {
                          return 359;
                        }
                      }
                      if (v26)
                      {
                        if (*(void *)v4 == 0x696C696269736976 && *(_WORD *)(v4 + 8) == 31092) {
                          return 360;
                        }
                      }
                      else if (v23)
                      {
                        if (*(void *)v4 == 0x6967696C45746F6ELL
                          && *(void *)(v4 + 8) == 0x706D496F54656C62
                          && *(void *)(v4 + 11) == 0x74726F706D496F54)
                        {
                          return 361;
                        }
                        int v23 = 1;
                      }
                      else
                      {
                        if (v19 == 4 && *(_DWORD *)v4 == 1702259052) {
                          return 362;
                        }
                        int v23 = 0;
                      }
                      if (v29 && *(void *)v4 == 0x6C61636F4C6F7364) {
                        return 363;
                      }
                      if (v36)
                      {
                        if (*(void *)v4 == 0x486F7475416E6163 && *(void *)(v4 + 3) == 0x656469486F747541) {
                          return 364;
                        }
                      }
                      if (v29 && *(void *)v4 == 0x6E6F6974636E7566) {
                        return 365;
                      }
                      if (v31)
                      {
                        if (*(_DWORD *)v4 == 1953721961 && *(unsigned char *)(v4 + 4) == 115) {
                          return 366;
                        }
                      }
                      if (v32)
                      {
                        if (*(void *)v4 == 0x67616C46636E7566 && *(unsigned char *)(v4 + 8) == 115) {
                          return 367;
                        }
                      }
                      if (v29)
                      {
                        if (*(void *)v4 == 0x656E6F4E64616572) {
                          return 368;
                        }
                        if (*(void *)v4 == 0x796C6E4F64616572) {
                          return 369;
                        }
                      }
                      if (v32)
                      {
                        if (*(void *)v4 == 0x7372756365526F6ELL && *(unsigned char *)(v4 + 8) == 101) {
                          return 370;
                        }
                      }
                      if (v27)
                      {
                        BOOL v411 = *(void *)v4 == 0x6F446E7275746572 && *(void *)(v4 + 8) == 0x696C41746F4E7365;
                        uint64_t v27 = 29537;
                        if (v411 && *(_WORD *)(v4 + 16) == 29537) {
                          return 371;
                        }
                      }
                      if (v29)
                      {
                        uint64_t v27 = *(void *)v4;
                        if (*(void *)v4 == 0x656E696C6E496F6ELL) {
                          return 372;
                        }
                      }
                      if (v24)
                      {
                        uint64_t v27 = 1701734764;
                        if (*(void *)v4 == 0x6E49737961776C61 && *(_DWORD *)(v4 + 8) == 1701734764) {
                          return 373;
                        }
                      }
                      if (v29)
                      {
                        if (*(void *)v4 == 0x646E69776E556F6ELL) {
                          return 374;
                        }
                        uint64_t v27 = *(void *)v4;
                        if (*(void *)v4 == 0x776F72685479616DLL) {
                          return 375;
                        }
                      }
                      if (v35)
                      {
                        uint64_t v27 = 0x6C6C61436E776F6ELL;
                        if (*(void *)v4 == 0x6F6E6B6E55736168 && *(void *)(v4 + 6) == 0x6C6C61436E776F6ELL) {
                          return 376;
                        }
                      }
                      if (v37)
                      {
                        uint64_t v27 = *(void *)(v4 + 8);
                        BOOL v415 = *(void *)v4 == 0x6E5565427473756DLL && v27 == 0x6C62616863616572;
                        if (v415 && *(unsigned char *)(v4 + 16) == 101) {
                          return 377;
                        }
                      }
                      if (v31)
                      {
                        uint64_t v27 = *(unsigned __int8 *)(v4 + 4);
                        if (*(_DWORD *)v4 == 1819042147 && v27 == 115) {
                          return 378;
                        }
                      }
                      if (v30)
                      {
                        if (*(_DWORD *)v4 == 1819042147 && *(_WORD *)(v4 + 4) == 25957) {
                          return 379;
                        }
                        uint64_t v27 = *(unsigned __int16 *)(v4 + 4);
                        if (*(_DWORD *)v4 == 1634886000 && v27 == 29549) {
                          return 380;
                        }
                      }
                      if (v31)
                      {
                        uint64_t v27 = *(unsigned __int8 *)(v4 + 4);
                        if (*(_DWORD *)v4 == 1634886000 && v27 == 109) {
                          return 381;
                        }
                      }
                      if (v20)
                      {
                        if (*(_DWORD *)v4 == 1853124456 && *(_DWORD *)(v4 + 3) == 1936942446) {
                          return 382;
                        }
                        uint64_t v27 = *(unsigned int *)(v4 + 3);
                        if (*(_DWORD *)v4 == 1852534389 && v27 == 1853321070) {
                          return 383;
                        }
                      }
                      if (v126)
                      {
                        uint64_t v27 = *(unsigned __int8 *)(v4 + 2);
                        if (*(_WORD *)v4 == 28520 && v27 == 116) {
                          return 384;
                        }
                      }
                      if (v29)
                      {
                        uint64_t v27 = 0x6C61636974697263;
                        if (*(void *)v4 == 0x6C61636974697263) {
                          return 385;
                        }
                      }
                      if (v31)
                      {
                        uint64_t v27 = *(unsigned __int8 *)(v4 + 4);
                        if (*(_DWORD *)v4 == 1651271026 && v27 == 102) {
                          return 386;
                        }
                      }
                      if (v29)
                      {
                        uint64_t v27 = 0x656C626169726176;
                        if (*(void *)v4 == 0x656C626169726176) {
                          return 387;
                        }
                      }
                      if (v36)
                      {
                        uint64_t v27 = *(void *)(v4 + 3);
                        if (*(void *)v4 == 0x7546656C62615476 && v27 == 0x73636E7546656C62) {
                          return 388;
                        }
                      }
                      if (v29)
                      {
                        uint64_t v27 = 0x636E754674726976;
                        if (*(void *)v4 == 0x636E754674726976) {
                          return 389;
                        }
                      }
                      if (v20)
                      {
                        uint64_t v27 = *(unsigned int *)(v4 + 3);
                        if (*(_DWORD *)v4 == 1634298977 && v27 == 1701147489) {
                          return 390;
                        }
                      }
                      if (v19 == 4)
                      {
                        uint64_t v27 = 1936090482;
                        if (*(_DWORD *)v4 == 1936090482) {
                          return 391;
                        }
                      }
                      else if (v26)
                      {
                        uint64_t v27 = *(unsigned __int16 *)(v4 + 8);
                        if (*(void *)v4 == 0x6E49644965707974 && v27 == 28518) {
                          return 392;
                        }
                        int v26 = 1;
                      }
                      if (v32)
                      {
                        uint64_t v27 = *(unsigned __int8 *)(v4 + 8);
                        if (*(void *)v4 == 0x7473655465707974 && v27 == 115) {
                          return 393;
                        }
                      }
                      if (v21)
                      {
                        uint64_t v27 = *(void *)(v4 + 13);
                        BOOL v431 = *(void *)v4 == 0x6365684365707974 && *(void *)(v4 + 8) == 0x5664616F4C64656BLL;
                        if (v431 && v27 == 0x736C6C6143566461) {
                          return 395;
                        }
                      }
                      if (v19 == 25)
                      {
                        uint64_t v27 = *(unsigned __int8 *)(v4 + 24);
                        if (*(void *)v4 == 0x7473655465707974
                          && *(void *)(v4 + 8) == 0x6F43656D75737341
                          && *(void *)(v4 + 16) == 0x6C6C61435674736ELL
                          && v27 == 115)
                        {
                          return 396;
                        }
                      }
                      else if (v38)
                      {
                        uint64_t v27 = *(unsigned __int16 *)(v4 + 24);
                        BOOL v436 = *(void *)v4 == 0x6365684365707974 && *(void *)(v4 + 8) == 0x4364616F4C64656BLL;
                        BOOL v437 = v436 && *(void *)(v4 + 16) == 0x6C61435674736E6FLL;
                        if (v437 && v27 == 29548) {
                          return 397;
                        }
                      }
                      if (v20)
                      {
                        if (*(_DWORD *)v4 == 1853179510 && *(_DWORD *)(v4 + 3) == 1682531182) {
                          return 398;
                        }
                      }
                      if (v30)
                      {
                        if (*(_DWORD *)v4 == 1936090735 && *(_WORD *)(v4 + 4) == 29797) {
                          return 399;
                        }
                      }
                      if (v19 == 4 && *(_DWORD *)v4 == 1936159329) {
                        return 400;
                      }
                      if (v30)
                      {
                        if (*(_DWORD *)v4 == 1701869940 && *(_WORD *)(v4 + 4) == 25705) {
                          return 401;
                        }
                        int v172 = 1;
                      }
                      else
                      {
                        int v172 = 0;
                      }
                      int v174 = v24;
                      int v173 = v26;
                      int v171 = v31;
                      int v170 = v447;
                      if (v20)
                      {
                        if (*(_DWORD *)v4 == 1835890035 && *(_DWORD *)(v4 + 3) == 2037539181) {
                          return 403;
                        }
                      }
LABEL_583:
                      if (v36)
                      {
                        if (*(void *)v4 == 0x7473655465707974 && *(void *)(v4 + 3) == 0x7365527473655465) {
                          return 404;
                        }
                      }
                      if (v19 == 4 && *(_DWORD *)v4 == 1684957547) {
                        return 405;
                      }
                      if (v171)
                      {
                        if (*(_DWORD *)v4 == 1634954869 && *(unsigned char *)(v4 + 4) == 116) {
                          return 406;
                        }
                      }
                      if (v32)
                      {
                        if (*(void *)v4 == 0x6172724165747962 && *(unsigned char *)(v4 + 8) == 121) {
                          return 407;
                        }
                      }
                      if (v172)
                      {
                        if (*(_DWORD *)v4 == 1768713833 && *(_WORD *)(v4 + 4) == 25966) {
                          return 408;
                        }
                        if (*(_DWORD *)v4 == 1735289203 && *(_WORD *)(v4 + 4) == 25964) {
                          return 409;
                        }
                      }
                      if (v20)
                      {
                        if (*(_DWORD *)v4 == 1332505697 && *(_DWORD *)(v4 + 3) == 1936027215) {
                          return 410;
                        }
                      }
                      if (v35)
                      {
                        if (*(void *)v4 == 0x6942314D657A6973 && *(void *)(v4 + 6) == 0x6874646957746942) {
                          return 411;
                        }
                      }
                      if (v32)
                      {
                        if (*(void *)v4 == 0x676F4C6E67696C61 && *(unsigned char *)(v4 + 8) == 50) {
                          return 412;
                        }
                      }
                      if (v172)
                      {
                        if (*(_DWORD *)v4 == 1702521203 && *(_WORD *)(v4 + 4) == 12621) {
                          return 413;
                        }
                      }
                      if (v20)
                      {
                        if (*(_DWORD *)v4 == 1299474786 && *(_DWORD *)(v4 + 3) == 1802723661) {
                          return 414;
                        }
                      }
                      if (v173)
                      {
                        if (*(void *)v4 == 0x6942656E696C6E69 && *(_WORD *)(v4 + 8) == 29556) {
                          return 415;
                        }
                      }
                      if (v34)
                      {
                        if (*(void *)v4 == 0x69765F6C6C616376 && *(void *)(v4 + 8) == 0x7974696C69626973) {
                          return 416;
                        }
                      }
                      int v188 = v35;
                      if (v35)
                      {
                        if (*(void *)v4 == 0x6C6F736552647077 && *(void *)(v4 + 6) == 0x736E6F6974756C6FLL) {
                          return 417;
                        }
                      }
                      if (v172)
                      {
                        if (*(_DWORD *)v4 == 1382314103 && *(_WORD *)(v4 + 4) == 29541) {
                          return 418;
                        }
                      }
                      if (v171)
                      {
                        if (*(_DWORD *)v4 == 1768189545 && *(unsigned char *)(v4 + 4) == 114) {
                          return 419;
                        }
                      }
                      if (v173)
                      {
                        if (*(void *)v4 == 0x6D49656C676E6973 && *(_WORD *)(v4 + 8) == 27760) {
                          return 420;
                        }
                      }
                      if (v174)
                      {
                        if (*(void *)v4 == 0x754668636E617262 && *(_DWORD *)(v4 + 8) == 1818586734) {
                          return 421;
                        }
                      }
                      if (v35)
                      {
                        if (*(void *)v4 == 0x6D49656C676E6973 && *(void *)(v4 + 6) == 0x656D614E6C706D49) {
                          return 422;
                        }
                      }
                      if (v29 && *(void *)v4 == 0x6772417942736572) {
                        return 423;
                      }
                      if (v171)
                      {
                        if (*(_DWORD *)v4 == 1916893538 && *(unsigned char *)(v4 + 4) == 103) {
                          return 424;
                        }
                      }
                      if (v22)
                      {
                        if (*(void *)v4 == 0x526D726F66696E75 && *(void *)(v4 + 5) == 0x6C61567465526D72) {
                          return 425;
                        }
                      }
                      if (v174)
                      {
                        if (*(void *)v4 == 0x6552657571696E75 && *(_DWORD *)(v4 + 8) == 1818318452) {
                          return 426;
                        }
                      }
                      if (v34)
                      {
                        if (*(void *)v4 == 0x436C617574726976 && *(void *)(v4 + 8) == 0x706F725074736E6FLL) {
                          return 427;
                        }
                      }
                      if (v19 == 4)
                      {
                        if (*(_DWORD *)v4 == 1868983913) {
                          return 428;
                        }
                        if (*(_DWORD *)v4 == 1702132066) {
                          return 429;
                        }
                      }
                      if (v126)
                      {
                        if (*(_WORD *)v4 == 26978 && *(unsigned char *)(v4 + 2) == 116) {
                          return 430;
                        }
                      }
                      if (v29 && *(void *)v4 == 0x7367616C46726176) {
                        return 431;
                      }
                      if (v19 == 4)
                      {
                        if (*(_DWORD *)v4 == 1684631414)
                        {
                          uint64_t v390 = **((void **)this + 5) + 1576;
                          goto LABEL_2157;
                        }
                        if (*(_DWORD *)v4 == 1718378856)
                        {
                          uint64_t v390 = **((void **)this + 5) + 1624;
                          goto LABEL_2157;
                        }
                      }
                      if (v172
                        && (*(_DWORD *)v4 == 1869375074 ? (BOOL v200 = *(unsigned __int16 *)(v4 + 4) == 29793) : (BOOL v200 = 0),
                            v200))
                      {
                        uint64_t v390 = **((void **)this + 5) + 1648;
                      }
                      else if (v171 {
                             && (*(_DWORD *)v4 == 1634692198 ? (BOOL v201 = *(unsigned char *)(v4 + 4) == 116) : (BOOL v201 = 0), v201))
                      }
                      {
                        uint64_t v390 = **((void **)this + 5) + 1672;
                      }
                      else if (v172 {
                             && (*(_DWORD *)v4 == 1651863396
                      }
                               ? (BOOL v202 = *(unsigned __int16 *)(v4 + 4) == 25964)
                               : (BOOL v202 = 0),
                                 v202))
                      {
                        uint64_t v390 = **((void **)this + 5) + 1696;
                      }
                      else if (v29 && *(void *)v4 == 0x303870665F363878)
                      {
                        uint64_t v390 = **((void **)this + 5) + 1768;
                      }
                      else if (v171 {
                             && (*(_DWORD *)v4 == 842100838 ? (BOOL v203 = *(unsigned char *)(v4 + 4) == 56) : (BOOL v203 = 0), v203))
                      }
                      {
                        uint64_t v390 = **((void **)this + 5) + 1792;
                      }
                      else if (v32 {
                             && (*(void *)v4 == 0x323170665F637070 ? (BOOL v204 = *(unsigned char *)(v4 + 8) == 56) : (BOOL v204 = 0),
                      }
                                 v204))
                      {
                        uint64_t v390 = **((void **)this + 5) + 1816;
                      }
                      else if (v171 {
                             && (*(_DWORD *)v4 == 1700946284 ? (BOOL v205 = *(unsigned char *)(v4 + 4) == 108) : (BOOL v205 = 0), v205))
                      }
                      {
                        uint64_t v390 = **((void **)this + 5) + 1600;
                      }
                      else if (v29 && *(void *)v4 == 0x617461646174656DLL)
                      {
                        uint64_t v390 = **((void **)this + 5) + 1720;
                      }
                      else
                      {
                        if (v20)
                        {
                          uint64_t v27 = 2020437343;
                          if (*(_DWORD *)v4 == 1597388920 && *(_DWORD *)(v4 + 3) == 2020437343)
                          {
                            uint64_t v390 = **((void **)this + 5) + 1840;
                            goto LABEL_2157;
                          }
                          if (*(_DWORD *)v4 == 1597388920 && *(_DWORD *)(v4 + 3) == 2020434271)
                          {
                            uint64_t v390 = **((void **)this + 5) + 1864;
                            goto LABEL_2157;
                          }
                        }
                        if (!v171
                          || (*(_DWORD *)v4 == 1701539700 ? (BOOL v208 = *(unsigned char *)(v4 + 4) == 110) : (BOOL v208 = 0), !v208))
                        {
                          if (v126)
                          {
                            if (*(_WORD *)v4 == 29808 && *(unsigned char *)(v4 + 2) == 114)
                            {
                              char hasOpaquePointersValue = llvm::LLVMContextImpl::hasOpaquePointersValue(**((llvm::LLVMContextImpl ***)this + 5));
                              v428 = (llvm::LLVMContext *)*((void *)this + 5);
                              if (hasOpaquePointersValue)
                              {
                                if (llvm::LLVMContext::supportsTypedPointers(v428))
                                {
                                  __src = "ptr type is only supported in -opaque-pointers mode";
                                  __int16 v452 = 259;
                                  llvm::SourceMgr::PrintMessage(*((llvm **)this + 4), *((char **)this + 6), 1, (llvm::Twine *)&__src, 0, 0, 0, 0, 1u);
                                  return 1;
                                }
                              }
                              else
                              {
                                llvm::LLVMContextImpl::setOpaquePointers(*(void *)v428, 1);
                              }
                              uint64_t v18 = llvm::PointerType::get(*((uint64_t ***)this + 5), 0);
LABEL_37:
                              *((void *)this + 12) = v18;
                              return 455;
                            }
                          }
                          if (v19 == 4 && *(_DWORD *)v4 == 1734700646)
                          {
                            *((_DWORD *)this + 22) = 12;
                            return 276;
                          }
                          if (v126)
                          {
                            if (*(_WORD *)v4 == 25697 && *(unsigned char *)(v4 + 2) == 100)
                            {
                              *((_DWORD *)this + 22) = 13;
                              return 277;
                            }
                          }
                          if (v19 == 4 && *(_DWORD *)v4 == 1684300134)
                          {
                            *((_DWORD *)this + 22) = 14;
                            return 278;
                          }
                          if (v126)
                          {
                            if (*(_WORD *)v4 == 30067 && *(unsigned char *)(v4 + 2) == 98)
                            {
                              *((_DWORD *)this + 22) = 15;
                              return 279;
                            }
                          }
                          if (v19 == 4 && *(_DWORD *)v4 == 1651864422)
                          {
                            *((_DWORD *)this + 22) = 16;
                            return 280;
                          }
                          if (v126)
                          {
                            if (*(_WORD *)v4 == 30061 && *(unsigned char *)(v4 + 2) == 108)
                            {
                              *((_DWORD *)this + 22) = 17;
                              return 281;
                            }
                          }
                          if (v19 == 4)
                          {
                            switch(*(_DWORD *)v4)
                            {
                              case 0x6C756D66:
                                *((_DWORD *)this + 22) = 18;
                                return 282;
                              case 0x76696475:
                                *((_DWORD *)this + 22) = 19;
                                return 283;
                              case 0x76696473:
                                *((_DWORD *)this + 22) = 20;
                                return 284;
                              case 0x76696466:
                                *((_DWORD *)this + 22) = 21;
                                return 285;
                              case 0x6D657275:
                                *((_DWORD *)this + 22) = 22;
                                return 286;
                              case 0x6D657273:
                                *((_DWORD *)this + 22) = 23;
                                return 287;
                              case 0x6D657266:
                                *((_DWORD *)this + 22) = 24;
                                return 288;
                            }
                          }
                          if (v126)
                          {
                            if (*(_WORD *)v4 == 26739 && *(unsigned char *)(v4 + 2) == 108)
                            {
                              *((_DWORD *)this + 22) = 25;
                              return 289;
                            }
                          }
                          if (v19 == 4)
                          {
                            if (*(_DWORD *)v4 == 1919447916)
                            {
                              *((_DWORD *)this + 22) = 26;
                              return 290;
                            }
                            if (*(_DWORD *)v4 == 1919447905)
                            {
                              *((_DWORD *)this + 22) = 27;
                              return 291;
                            }
                          }
                          if (v126)
                          {
                            if (*(_WORD *)v4 == 28257 && *(unsigned char *)(v4 + 2) == 100)
                            {
                              *((_DWORD *)this + 22) = 28;
                              return 292;
                            }
                          }
                          if (v170 && *(_WORD *)v4 == 29295)
                          {
                            *((_DWORD *)this + 22) = 29;
                            return 293;
                          }
                          if (v126)
                          {
                            if (*(_WORD *)v4 == 28536 && *(unsigned char *)(v4 + 2) == 114)
                            {
                              *((_DWORD *)this + 22) = 30;
                              return 294;
                            }
                          }
                          if (v19 == 4)
                          {
                            if (*(_DWORD *)v4 == 1886217065)
                            {
                              *((_DWORD *)this + 22) = 53;
                              return 295;
                            }
                            if (*(_DWORD *)v4 == 1886217062)
                            {
                              *((_DWORD *)this + 22) = 54;
                              return 296;
                            }
                          }
                          if (v126)
                          {
                            if (*(_WORD *)v4 == 26736 && *(unsigned char *)(v4 + 2) == 105)
                            {
                              *((_DWORD *)this + 22) = 55;
                              return 297;
                            }
                          }
                          if (v19 == 4 && *(_DWORD *)v4 == 1819042147)
                          {
                            *((_DWORD *)this + 22) = 56;
                            return 298;
                          }
                          if (v171)
                          {
                            if (*(_DWORD *)v4 == 1853190772 && *(unsigned char *)(v4 + 4) == 99)
                            {
                              *((_DWORD *)this + 22) = 38;
                              return 299;
                            }
                          }
                          if (v19 == 4)
                          {
                            if (*(_DWORD *)v4 == 1954047354)
                            {
                              *((_DWORD *)this + 22) = 39;
                              return 300;
                            }
                            if (*(_DWORD *)v4 == 1954047347)
                            {
                              *((_DWORD *)this + 22) = 40;
                              return 301;
                            }
                          }
                          if (v20)
                          {
                            if (*(_DWORD *)v4 == 1920233574 && *(_DWORD *)(v4 + 3) == 1668183410)
                            {
                              *((_DWORD *)this + 22) = 45;
                              return 302;
                            }
                          }
                          if (v171)
                          {
                            if (*(_DWORD *)v4 == 2019913830 && *(unsigned char *)(v4 + 4) == 116)
                            {
                              *((_DWORD *)this + 22) = 46;
                              return 303;
                            }
                          }
                          if (v172)
                          {
                            if (*(_DWORD *)v4 == 1869900149 && *(_WORD *)(v4 + 4) == 28774)
                            {
                              *((_DWORD *)this + 22) = 43;
                              return 304;
                            }
                            uint64_t v27 = *(unsigned __int16 *)(v4 + 4);
                            if (*(_DWORD *)v4 == 1869900147 && v27 == 28774)
                            {
                              *((_DWORD *)this + 22) = 44;
                              return 305;
                            }
                            if (*(_DWORD *)v4 == 1869901926 && *(_WORD *)(v4 + 4) == 26997)
                            {
                              *((_DWORD *)this + 22) = 41;
                              return 306;
                            }
                            if (*(_DWORD *)v4 == 1869901926 && *(_WORD *)(v4 + 4) == 26995)
                            {
                              *((_DWORD *)this + 22) = 42;
                              return 307;
                            }
                          }
                          if (v29)
                          {
                            if (*(void *)v4 == 0x7274706F74746E69)
                            {
                              *((_DWORD *)this + 22) = 48;
                              return 308;
                            }
                            if (*(void *)v4 == 0x746E696F74727470)
                            {
                              *((_DWORD *)this + 22) = 47;
                              return 309;
                            }
                          }
                          if (v20)
                          {
                            if (*(_DWORD *)v4 == 1668573538 && *(_DWORD *)(v4 + 3) == 1953718627)
                            {
                              *((_DWORD *)this + 22) = 49;
                              return 310;
                            }
                          }
                          if (v22)
                          {
                            if (*(void *)v4 == 0x6361707372646461 && *(void *)(v4 + 5) == 0x7473616365636170)
                            {
                              *((_DWORD *)this + 22) = 50;
                              return 311;
                            }
                          }
                          if (v172)
                          {
                            if (*(_DWORD *)v4 == 1701602675 && *(_WORD *)(v4 + 4) == 29795)
                            {
                              *((_DWORD *)this + 22) = 57;
                              return 312;
                            }
                            if (*(_DWORD *)v4 == 1633640822 && *(_WORD *)(v4 + 4) == 26482)
                            {
                              *((_DWORD *)this + 22) = 60;
                              return 313;
                            }
                          }
                          if (v126)
                          {
                            if (*(_WORD *)v4 == 25970 && *(unsigned char *)(v4 + 2) == 116)
                            {
                              *((_DWORD *)this + 22) = 1;
                              return 319;
                            }
                          }
                          if (v170 && *(_WORD *)v4 == 29282)
                          {
                            *((_DWORD *)this + 22) = 2;
                            return 320;
                          }
                          if (v172)
                          {
                            if (*(_DWORD *)v4 == 1953068915 && *(_WORD *)(v4 + 4) == 26723)
                            {
                              *((_DWORD *)this + 22) = 3;
                              return 321;
                            }
                          }
                          if (v173)
                          {
                            if (*(void *)v4 == 0x7463657269646E69 && *(_WORD *)(v4 + 8) == 29282)
                            {
                              *((_DWORD *)this + 22) = 4;
                              return 322;
                            }
                          }
                          if (v172)
                          {
                            if (*(_DWORD *)v4 == 1870032489 && *(_WORD *)(v4 + 4) == 25963)
                            {
                              *((_DWORD *)this + 22) = 5;
                              return 323;
                            }
                            if (*(_DWORD *)v4 == 1970496882 && *(_WORD *)(v4 + 4) == 25965)
                            {
                              *((_DWORD *)this + 22) = 6;
                              return 324;
                            }
                          }
                          if (v36)
                          {
                            if (*(void *)v4 == 0x6168636165726E75 && *(void *)(v4 + 3) == 0x656C626168636165)
                            {
                              *((_DWORD *)this + 22) = 7;
                              return 325;
                            }
                          }
                          if (v172)
                          {
                            if (*(_DWORD *)v4 == 1819042147 && *(_WORD *)(v4 + 4) == 29282)
                            {
                              *((_DWORD *)this + 22) = 11;
                              return 331;
                            }
                            if (*(_DWORD *)v4 == 1869376609 && *(_WORD *)(v4 + 4) == 24931)
                            {
                              *((_DWORD *)this + 22) = 31;
                              return 332;
                            }
                          }
                          if (v19 == 4 && *(_DWORD *)v4 == 1684107116)
                          {
                            *((_DWORD *)this + 22) = 32;
                            return 333;
                          }
                          if (v171)
                          {
                            if (*(_DWORD *)v4 == 1919906931 && *(unsigned char *)(v4 + 4) == 101)
                            {
                              *((_DWORD *)this + 22) = 33;
                              return 334;
                            }
                          }
                          if (v20)
                          {
                            if (*(_DWORD *)v4 == 2020633955 && *(_DWORD *)(v4 + 3) == 1734894456)
                            {
                              *((_DWORD *)this + 22) = 36;
                              return 336;
                            }
                          }
                          if (v32)
                          {
                            if (*(void *)v4 == 0x6D7263696D6F7461 && *(unsigned char *)(v4 + 8) == 119)
                            {
                              *((_DWORD *)this + 22) = 37;
                              return 337;
                            }
                          }
                          if (v171)
                          {
                            if (*(_DWORD *)v4 == 1668179302 && *(unsigned char *)(v4 + 4) == 101)
                            {
                              *((_DWORD *)this + 22) = 35;
                              return 335;
                            }
                          }
                          if (v22)
                          {
                            if (*(void *)v4 == 0x656D656C65746567 && *(void *)(v4 + 5) == 0x727470746E656D65)
                            {
                              *((_DWORD *)this + 22) = 34;
                              return 338;
                            }
                          }
                          if (v35)
                          {
                            if (*(void *)v4 == 0x6574636172747865 && *(void *)(v4 + 6) == 0x746E656D656C6574)
                            {
                              *((_DWORD *)this + 22) = 61;
                              return 339;
                            }
                          }
                          if (v22)
                          {
                            if (*(void *)v4 == 0x6C65747265736E69 && *(void *)(v4 + 5) == 0x746E656D656C6574)
                            {
                              *((_DWORD *)this + 22) = 62;
                              return 340;
                            }
                            if (*(void *)v4 == 0x76656C6666756873 && *(void *)(v4 + 5) == 0x726F74636576656CLL)
                            {
                              *((_DWORD *)this + 22) = 63;
                              return 341;
                            }
                          }
                          if (v174)
                          {
                            if (*(void *)v4 == 0x7674636172747865 && *(_DWORD *)(v4 + 8) == 1702194273)
                            {
                              *((_DWORD *)this + 22) = 64;
                              return 342;
                            }
                          }
                          if (v36)
                          {
                            if (*(void *)v4 == 0x6176747265736E69 && *(void *)(v4 + 3) == 0x65756C6176747265)
                            {
                              *((_DWORD *)this + 22) = 65;
                              return 343;
                            }
                          }
                          if (v173)
                          {
                            if (*(void *)v4 == 0x70676E69646E616CLL && *(_WORD *)(v4 + 8) == 25697)
                            {
                              *((_DWORD *)this + 22) = 66;
                              return 314;
                            }
                            if (*(void *)v4 == 0x7270756E61656C63 && *(_WORD *)(v4 + 8) == 29797)
                            {
                              *((_DWORD *)this + 22) = 8;
                              return 326;
                            }
                          }
                          if (v29 && *(void *)v4 == 0x7465726863746163)
                          {
                            *((_DWORD *)this + 22) = 9;
                            return 328;
                          }
                          if (v36)
                          {
                            if (*(void *)v4 == 0x6977736863746163 && *(void *)(v4 + 3) == 0x6863746977736863)
                            {
                              *((_DWORD *)this + 22) = 10;
                              return 327;
                            }
                          }
                          if (v29 && *(void *)v4 == 0x6461706863746163)
                          {
                            *((_DWORD *)this + 22) = 52;
                            return 329;
                          }
                          if (v173)
                          {
                            if (*(void *)v4 == 0x7070756E61656C63 && *(_WORD *)(v4 + 8) == 25697)
                            {
                              *((_DWORD *)this + 22) = 51;
                              return 330;
                            }
                          }
                          if (v172)
                          {
                            if (*(_DWORD *)v4 == 1701147238 && *(_WORD *)(v4 + 4) == 25978)
                            {
                              *((_DWORD *)this + 22) = 67;
                              return 347;
                            }
                          }
                          if (v19 < 7)
                          {
                            if (v19 != 6)
                            {
                              if (v19 < 4) {
                                goto LABEL_1391;
                              }
                              goto LABEL_1390;
                            }
                            goto LABEL_1033;
                          }
LABEL_1023:
                          if (*(_DWORD *)v4 == 1415534404 && *(_DWORD *)(v4 + 3) == 1598505300)
                          {
                            sub_1CC19262C((std::string *)((char *)this + 64), (std::string::value_type *)v4, v2, (std::string::size_type)&v2[-v4]);
                            return 443;
                          }
                          if (*(_DWORD *)v4 == 1096767300 && *(_DWORD *)(v4 + 3) == 1598379073)
                          {
                            sub_1CC19262C((std::string *)((char *)this + 64), (std::string::value_type *)v4, v2, (std::string::size_type)&v2[-v4]);
                            return 444;
                          }
                          if (v19 >= 0xE)
                          {
                            if (*(void *)v4 == 0x55545249565F5744 && *(void *)(v4 + 6) == 0x5F5954494C415554)
                            {
                              sub_1CC19262C((std::string *)((char *)this + 64), (std::string::value_type *)v4, v2, (std::string::size_type)&v2[-v4]);
                              return 445;
                            }
                          }
                          else if (v19 < 8)
                          {
LABEL_1033:
                            char v259 = 1;
                            goto LABEL_1371;
                          }
                          if (*(void *)v4 == 0x5F474E414C5F5744)
                          {
                            sub_1CC19262C((std::string *)((char *)this + 64), (std::string::value_type *)v4, v2, (std::string::size_type)&v2[-v4]);
                            return 446;
                          }
                          char v259 = 0;
LABEL_1371:
                          if (*(_DWORD *)v4 == 1130321732 && *(_WORD *)(v4 + 4) == 24387)
                          {
                            sub_1CC19262C((std::string *)((char *)this + 64), (std::string::value_type *)v4, v2, (std::string::size_type)&v2[-v4]);
                            return 447;
                          }
                          if (*(_DWORD *)v4 == 1331648324 && *(_WORD *)(v4 + 4) == 24400)
                          {
                            sub_1CC19262C((std::string *)((char *)this + 64), (std::string::value_type *)v4, v2, (std::string::size_type)&v2[-v4]);
                            return 450;
                          }
                          if (v19 >= 0xB
                            && *(void *)v4 == 0x4E4943414D5F5744
                            && *(void *)(v4 + 3) == 0x5F4F464E4943414DLL)
                          {
                            sub_1CC19262C((std::string *)((char *)this + 64), (std::string::value_type *)v4, v2, (std::string::size_type)&v2[-v4]);
                            return 453;
                          }
                          if (*(_DWORD *)v4 == 1816545604 && *(_WORD *)(v4 + 4) == 26465)
                          {
                            sub_1CC19262C((std::string *)((char *)this + 64), (std::string::value_type *)v4, v2, (std::string::size_type)&v2[-v4]);
                            return 451;
                          }
                          if ((v259 & 1) == 0 && *(void *)v4 == 0x67616C4650534944)
                          {
                            sub_1CC19262C((std::string *)((char *)this + 64), (std::string::value_type *)v4, v2, (std::string::size_type)&v2[-v4]);
                            return 452;
                          }
LABEL_1390:
                          if (*(_DWORD *)v4 == 1598772035)
                          {
                            sub_1CC19262C((std::string *)((char *)this + 64), (std::string::value_type *)v4, v2, (std::string::size_type)&v2[-v4]);
                            return 454;
                          }
LABEL_1391:
                          if (v20
                            && (*(_DWORD *)v4 == 1698983758 ? (BOOL v311 = *(_DWORD *)(v4 + 3) == 1735746149) : (BOOL v311 = 0),
                                v311)
                            || v32
                            && (*(void *)v4 == 0x756265446C6C7546 ? (BOOL v312 = *(unsigned char *)(v4 + 8) == 103) : (BOOL v312 = 0),
                                v312)
                            || v188
                            && (*(void *)v4 == 0x6C626154656E694CLL
                              ? (BOOL v313 = *(void *)(v4 + 6) == 0x796C6E4F73656C62)
                              : (BOOL v313 = 0),
                                v313)
                            || v23
                            && (*(void *)v4 == 0x7269446775626544
                              ? (BOOL v314 = *(void *)(v4 + 8) == 0x4F73657669746365)
                              : (BOOL v314 = 0),
                                v314 ? (BOOL v315 = *(void *)(v4 + 11) == 0x796C6E4F73657669) : (BOOL v315 = 0),
                                v315))
                          {
                            sub_1CC19262C((std::string *)((char *)this + 64), (std::string::value_type *)v4, v2, (std::string::size_type)&v2[-v4]);
                            return 448;
                          }
                          if (v126 && (*(_WORD *)v4 == 20039 ? (BOOL v316 = *(unsigned char *)(v4 + 2) == 85) : (BOOL v316 = 0), v316)
                            || v19 == 4 && *(_DWORD *)v4 == 1701736270
                            || v20
                            && (*(_DWORD *)v4 == 1634100548 ? (BOOL v317 = *(_DWORD *)(v4 + 3) == 1953264993) : (BOOL v317 = 0),
                                v317))
                          {
                            sub_1CC19262C((std::string *)((char *)this + 64), (std::string::value_type *)v4, v2, (std::string::size_type)&v2[-v4]);
                            return 449;
                          }
                          uint64_t v318 = (unsigned __int8 *)*((void *)this + 6);
                          int v319 = *v318;
                          if (v319 == 99)
                          {
                            if (v318[1] == 99)
                            {
                              *(void *)this = v318 + 2;
                              return 105;
                            }
                          }
                          else if ((v319 == 117 || v319 == 115) && v318[1] == 48 && v318[2] == 120)
                          {
                            uint64_t v320 = (char *)(v318 + 3);
                            if ((*(_DWORD *)(v6 + 4 * v318[3] + 60) & 0x10000) != 0)
                            {
                              int v321 = v2 - v318 - 3;
                              if (v321)
                              {
                                uint64_t v322 = v321;
                                uint64_t v323 = v320;
                                while ((*v323 & 0x80000000) == 0
                                     && (*(_DWORD *)(v6 + 4 * *v323 + 60) & 0x10000) != 0)
                                {
                                  ++v323;
                                  if (!--v322) {
                                    goto LABEL_1437;
                                  }
                                }
                                *(void *)this = v320;
                                return 1;
                              }
                              else
                              {
LABEL_1437:
                                unsigned int v324 = 4 * v321;
                                unsigned int v451 = 4 * v321;
                                llvm::APInt::fromString((uint64_t)&__src, v27, v320, v321, 0x10u);
                                unsigned int v325 = v451;
                                if (v451 > 0x40)
                                {
                                  int v396 = 0;
                                  int64_t v397 = ((unint64_t)v451 + 63) >> 6;
                                  unint64_t v326 = (unint64_t)__src;
                                  do
                                  {
                                    if (v397-- < 1) {
                                      break;
                                    }
                                    unint64_t v399 = *((void *)__src + v397);
                                    v396 += __clz(v399);
                                  }
                                  while (!v399);
                                  unsigned int v400 = v451 | 0xFFFFFFC0;
                                  if ((v451 & 0x3F) == 0) {
                                    unsigned int v400 = 0;
                                  }
                                  int v327 = v396 + v400;
                                }
                                else
                                {
                                  unint64_t v326 = (unint64_t)__src;
                                  int v327 = v451 + __clz((unint64_t)__src) - 64;
                                }
                                unsigned int v401 = v451 - v327;
                                if (v451 != v327 && v401 < v324)
                                {
                                  if (v401 > 0x40)
                                  {
                                    if (v327) {
                                      operator new[]();
                                    }
                                    sub_1CD0463BC((uint64_t)&v448, (uint64_t)&__src);
                                  }
                                  else
                                  {
                                    if (v451 >= 0x41) {
                                      unint64_t v326 = *(void *)v326;
                                    }
                                    unsigned int v449 = v451 - v327;
                                    int v448 = (void *)((0xFFFFFFFFFFFFFFFFLL >> (v327
                                                                              - v451)) & v326);
                                  }
                                  if (v451 >= 0x41 && __src) {
                                    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                                  }
                                  unint64_t v326 = (unint64_t)v448;
                                  __src = v448;
                                  unsigned int v325 = v449;
                                  unsigned int v451 = v449;
                                }
                                if (v325 >= 0x41) {
                                  operator new[]();
                                }
                                BOOL v403 = **((unsigned char **)this + 6) == 117;
                                if (*((_DWORD *)this + 36) >= 0x41u)
                                {
                                  uint64_t v404 = *((void *)this + 17);
                                  if (v404) {
                                    MEMORY[0x1D25D9CB0](v404, 0x1000C8000313F17);
                                  }
                                }
                                *((void *)this + 17) = v326;
                                *((_DWORD *)this + 36) = v325;
                                *((unsigned char *)this + 148) = v403;
                                if (v451 >= 0x41 && __src) {
                                  MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                                }
                                return 457;
                              }
                            }
                          }
                          *(void *)this = v318 + 1;
                          return 1;
                        }
                        uint64_t v390 = **((void **)this + 5) + 1744;
                      }
LABEL_2157:
                      *((void *)this + 12) = v390;
                      return 455;
                    }
                  }
                  else
                  {
                    int v29 = 0;
                    int v30 = 0;
                    int v32 = 0;
                    uint64_t v27 = 0;
                    int v28 = 0;
                    int v34 = 0;
                    int v24 = v40;
                    int v31 = v88;
                    if ((v41 & 1) == 0) {
                      goto LABEL_1595;
                    }
                  }
                  if (*(void *)v4 != 0x657A6974696E6173 || *(void *)(v4 + 8) != 0x737365726464615FLL)
                  {
                    uint64_t v27 = 0;
                    int v34 = 1;
                    goto LABEL_1594;
                  }
                  return 167;
                }
LABEL_1552:
                if (*(_DWORD *)v4 == 1853124719 && *(_DWORD *)(v4 + 3) == 1701736302) {
                  return 210;
                }
                if (*(_DWORD *)v4 == 1937010799 && *(_DWORD *)(v4 + 3) == 1702521203) {
                  return 211;
                }
                int v20 = 1;
                goto LABEL_1561;
              }
              if (*(void *)v4 == 0x6974696E61736F6ELL
                && *(void *)(v4 + 8) == 0x7265766F635F657ALL
                && *(void *)(v4 + 11) == 0x6567617265766F63)
              {
                return 207;
              }
              int v23 = 1;
            }
            BOOL v21 = 0;
            int v20 = 0;
            if ((v46 & 1) == 0) {
              goto LABEL_1561;
            }
            goto LABEL_1552;
          }
          if (v27)
          {
            if (*(void *)v4 == 0x6968656E696C6E69 && *(_WORD *)(v4 + 8) == 29806) {
              return 181;
            }
            int v23 = 0;
            LODWORD(v27) = 1;
            goto LABEL_1203;
          }
        }
        int v23 = 0;
        goto LABEL_1203;
      case 0x12uLL:
        if (*(void *)v4 == 0x6E755F6C61636F6CLL
          && *(void *)(v4 + 8) == 0x64615F64656D616ELL
          && *(_WORD *)(v4 + 16) == 29284)
        {
          return 42;
        }
        if (*(void *)v4 == 0x5F34366863726161
          && *(void *)(v4 + 8) == 0x705F726F74636576
          && *(_WORD *)(v4 + 16) == 29539)
        {
          return 119;
        }
        if (*(void *)v4 != 0x657A6974696E6173
          || *(void *)(v4 + 8) != 0x657264646177685FLL
          || *(_WORD *)(v4 + 16) != 29555)
        {
          BOOL v37 = 0;
          int v36 = 0;
          int v35 = 0;
          int v34 = 0;
          int v33 = 0;
          int v32 = 0;
          int v31 = 0;
          int v30 = 0;
          int v29 = 0;
          int v26 = 0;
          int v25 = 0;
          int v24 = 0;
          int v23 = 0;
          int v22 = 0;
          BOOL v21 = 0;
          int v20 = 0;
          uint64_t v27 = 1;
          goto LABEL_1594;
        }
        return 168;
      case 0x14uLL:
        if (*(void *)v4 == 0x6C62616C69617661
          && *(void *)(v4 + 8) == 0x6E72657478655F65
          && *(_DWORD *)(v4 + 16) == 2037148769)
        {
          return 37;
        }
        if (*(void *)v4 == 0x61636F6C5F6F7364
          && *(void *)(v4 + 8) == 0x6176697571655F6CLL
          && *(_DWORD *)(v4 + 16) == 1953391980)
        {
          return 345;
        }
        if (*(void *)v4 != 0x7473655465707974
          || *(void *)(v4 + 8) != 0x4356656D75737341
          || *(_DWORD *)(v4 + 16) != 1936485473)
        {
          int v188 = 0;
          int v126 = 0;
          int v32 = 0;
          int v20 = 0;
          int v23 = 0;
          goto LABEL_1023;
        }
        return 394;
      case 0x16uLL:
        if (*(void *)v4 == 0x6C616E7265747865
          && *(void *)(v4 + 8) == 0x6974696E695F796CLL
          && *(void *)(v4 + 14) == 0x64657A696C616974)
        {
          return 43;
        }
        if (*(void *)v4 == 0x5F34366863726161
          && *(void *)(v4 + 8) == 0x746365765F657673
          && *(void *)(v4 + 14) == 0x7363705F726F7463)
        {
          return 120;
        }
        if (*(void *)v4 != 0x6F43646965707974
          || *(void *)(v4 + 8) != 0x656C62697461706DLL
          || *(void *)(v4 + 14) != 0x656C62615456656CLL)
        {
          int v36 = 0;
          int v35 = 0;
          int v34 = 0;
          int v126 = 0;
          int v170 = 0;
          int v32 = 0;
          int v171 = 0;
          int v172 = 0;
          int v29 = 0;
          int v173 = 0;
          int v174 = 0;
          int v23 = 0;
          int v22 = 0;
          int v20 = 0;
          goto LABEL_583;
        }
        return 402;
      default:
        int v42 = 0;
        int v41 = 0;
        int v45 = 0;
        int v39 = 0;
        int v46 = 0;
        int v47 = 0;
        LODWORD(v27) = 0;
        int v48 = 0;
        int v40 = 0;
        goto LABEL_1162;
    }
  }
  switch(*(_DWORD *)v4)
  {
    case 0x65757274:
      return 19;
    case 0x6B616577:
      return 31;
    case 0x6C6C756E:
      return 53;
    case 0x656E6F6E:
      return 54;
    case 0x6D6F7266:
      return 58;
    case 0x6C696174:
      return 59;
    case 0x6E616E6E:
      return 77;
    case 0x666E696E:
      return 78;
    case 0x70637261:
      return 80;
    case 0x74736166:
      return 84;
    case 0x646C6F63:
      return 173;
    case 0x7473656E:
      return 186;
    case 0x74657273:
      return 224;
  }
  if (*(_DWORD *)v4 != 1668184435)
  {
    int v20 = 0;
    BOOL v21 = 0;
    int v22 = 0;
    int v23 = 0;
    int v24 = 0;
    int v25 = 0;
    int v26 = 0;
    uint64_t v27 = 0;
    int v28 = 0;
    int v29 = 0;
    int v30 = 0;
    int v31 = 0;
    int v32 = 0;
    int v33 = 0;
    int v34 = 0;
    int v35 = 0;
    int v36 = 0;
    BOOL v37 = 0;
    BOOL v38 = 0;
    goto LABEL_1664;
  }
  return 240;
}

uint64_t llvm::LLLexer::LexAt(llvm::LLLexer *this)
{
  return llvm::LLLexer::LexVar((uint64_t)this, 438, 433);
}

uint64_t llvm::LLLexer::LexDollar(llvm::LLLexer *this)
{
  uint64_t v2 = (std::string::value_type *)*((void *)this + 6);
  unsigned int v3 = *v2;
  if (v3 == 58)
  {
    uint64_t v4 = (std::string::value_type *)*((void *)this + 6);
LABEL_12:
    *(void *)this = v2 + 1;
    sub_1CC19262C((std::string *)((char *)this + 64), v4, v2, v2 - v4);
    return 437;
  }
  uint64_t v5 = MEMORY[0x1E4F14390];
  while ((v3 & 0x80) == 0)
  {
    if ((*(_DWORD *)(v5 + 4 * v3 + 60) & 0x500) == 0) {
      goto LABEL_8;
    }
LABEL_10:
    unsigned int v6 = *++v2;
    unsigned int v3 = v6;
    if (v6 == 58)
    {
      uint64_t v4 = (std::string::value_type *)*((void *)this + 6);
      goto LABEL_12;
    }
  }
  if (__maskrune(v3, 0x500uLL)) {
    goto LABEL_10;
  }
LABEL_8:
  if (v3 - 36 <= 0x3B && ((1 << (v3 - 36)) & 0x800000000000601) != 0) {
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)this;
  if (**(unsigned char **)this != 34)
  {
    if (llvm::LLLexer::ReadVarName(this)) {
      return 439;
    }
    else {
      return 1;
    }
  }
  int v9 = (std::string::value_type *)(v8 + 1);
  uint64_t v10 = 1 - v8;
  while (2)
  {
    *(void *)this = v9 + 1;
    if (!*v9)
    {
      if (v9 == (std::string::value_type *)(*((void *)this + 1) + *((void *)this + 2)))
      {
        *(void *)this = v9;
        uint64_t v18 = "end of file in COMDAT variable name";
        goto LABEL_37;
      }
      goto LABEL_20;
    }
    if (*v9 != 34)
    {
LABEL_20:
      --v10;
      ++v9;
      continue;
    }
    break;
  }
  uint64_t v11 = (void *)((char *)this + 64);
  sub_1CC19262C((std::string *)((char *)this + 64), (std::string::value_type *)(*((void *)this + 6) + 2), v9, -v10 - *((void *)this + 6));
  sub_1CC192388((std::string *)((char *)this + 64));
  char v12 = *((unsigned char *)this + 87);
  int v13 = v12;
  size_t v14 = v12 & 0x7F;
  if (v13 >= 0) {
    size_t v15 = v14;
  }
  else {
    size_t v15 = *((void *)this + 9);
  }
  if (!v15) {
    return 439;
  }
  if (v13 < 0) {
    uint64_t v11 = (void *)*v11;
  }
  unint64_t v16 = memchr(v11, 0, v15);
  if (!v16 || v16 - (unsigned char *)v11 == -1) {
    return 439;
  }
  uint64_t v18 = "Null bytes are not allowed in names";
LABEL_37:
  unint64_t v19 = v18;
  __int16 v20 = 259;
  sub_1CD4D7520((uint64_t)this, (llvm::Twine *)&v19);
  return 1;
}

uint64_t llvm::LLLexer::LexPercent(llvm::LLLexer *this)
{
  return llvm::LLLexer::LexVar((uint64_t)this, 440, 434);
}

unsigned __int8 **llvm::LLLexer::SkipLineComment(unsigned __int8 **this)
{
  int v1 = *this;
  while (1)
  {
    uint64_t v2 = v1;
    int v3 = *v1;
    if (v3 == 10 || v3 == 13) {
      break;
    }
    int v1 = v2 + 1;
    *this = v2 + 1;
    if (!*v2 && v2 == &this[2][(void)this[1]])
    {
      *this = v2;
      return this;
    }
  }
  return this;
}

uint64_t llvm::LLLexer::LexCaret(unsigned __int8 **this)
{
  return llvm::LLLexer::LexUIntID(this, 436);
}

uint64_t llvm::LLLexer::LexHash(unsigned __int8 **this)
{
  return llvm::LLLexer::LexUIntID(this, 435);
}

uint64_t llvm::LLLexer::LexDigitOrNegative(llvm::LLLexer *this)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::string::value_type *)*((void *)this + 6);
  uint64_t v3 = *v2;
  uint64_t v4 = MEMORY[0x1E4F14390];
  uint64_t v5 = *(std::string::value_type **)this;
  unsigned int v6 = **(unsigned __int8 **)this;
  int v7 = *(_DWORD *)(MEMORY[0x1E4F14390] + 60 + 4 * **(unsigned __int8 **)this);
  if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 60 + 4 * v3) & 0x400) == 0)
  {
    if ((v7 & 0x400) == 0)
    {
      if (v6 != 58)
      {
        while (1)
        {
          if ((v6 & 0x80) != 0)
          {
            if (__maskrune(v6, 0x500uLL)) {
              goto LABEL_10;
            }
          }
          else if ((*(_DWORD *)(v4 + 4 * v6 + 60) & 0x500) != 0)
          {
            goto LABEL_10;
          }
          if (v6 - 36 > 0x3B || ((1 << (v6 - 36)) & 0x800000000000601) == 0) {
            return 1;
          }
LABEL_10:
          unsigned int v8 = *++v5;
          unsigned int v6 = v8;
          if (v8 == 58)
          {
            uint64_t v2 = (std::string::value_type *)*((void *)this + 6);
            break;
          }
        }
      }
      int v9 = v5 + 1;
      uint64_t v10 = (std::string *)((char *)this + 64);
LABEL_44:
      sub_1CC19262C(v10, v2, v5, v5 - v2);
      *(void *)this = v9;
      return 437;
    }
    goto LABEL_14;
  }
  if ((v7 & 0x400) != 0)
  {
LABEL_14:
    uint64_t v11 = (unsigned __int8 *)(v5 + 1);
    do
    {
      *(void *)this = v11;
      unsigned int v12 = *v11++;
      unsigned int v6 = v12;
      int v7 = *(_DWORD *)(v4 + 4 * v12 + 60);
    }
    while ((v7 & 0x400) != 0);
    LODWORD(v3) = *v2;
    uint64_t v5 = (std::string::value_type *)(v11 - 1);
  }
  if ((v3 & 0x80) == 0)
  {
    int v13 = *(_DWORD *)(v4 + 4 * v3 + 60) & 0x400;
    if (v6 == 58 && v13 != 0)
    {
      if (v2 == v5)
      {
        LODWORD(v15) = 0;
        uint64_t v20 = (uint64_t)(v2 + 1);
      }
      else
      {
        unint64_t v15 = 0;
        while (1)
        {
          unint64_t v16 = v15;
          unint64_t v15 = *v2 + 10 * v15 - 48;
          if (v15 < v16) {
            break;
          }
          if (++v2 == v5)
          {
            *(void *)this = v5 + 1;
            if (HIDWORD(v15))
            {
              int v30 = "invalid value number (too large)!";
              __int16 v33 = 259;
              sub_1CD4D7520((uint64_t)this, (llvm::Twine *)&v30);
            }
            goto LABEL_47;
          }
        }
        int v30 = "constant bigger than 64 bits detected!";
        __int16 v33 = 259;
        sub_1CD4D7520((uint64_t)this, (llvm::Twine *)&v30);
        LODWORD(v15) = 0;
        uint64_t v20 = *(void *)this + 1;
      }
      *(void *)this = v20;
LABEL_47:
      *((_DWORD *)this + 22) = v15;
      return 432;
    }
  }
  if ((v6 & 0x80) != 0)
  {
    if (__maskrune(v6, 0x500uLL)) {
      goto LABEL_35;
    }
  }
  else if ((v7 & 0x500) != 0)
  {
    goto LABEL_35;
  }
  if (v6 - 36 <= 0x3B && ((1 << (v6 - 36)) & 0x800000000000601) != 0
    || (v21 = *(void *)this, int v22 = **(unsigned __int8 **)this, v22 == 58))
  {
LABEL_35:
    uint64_t v5 = *(std::string::value_type **)this;
    unsigned int v17 = **(unsigned __int8 **)this;
    if (v17 == 58)
    {
LABEL_43:
      int v9 = v5 + 1;
      uint64_t v10 = (std::string *)((char *)this + 64);
      uint64_t v2 = (std::string::value_type *)*((void *)this + 6);
      goto LABEL_44;
    }
    while (1)
    {
      if ((v17 & 0x80) != 0)
      {
        if (__maskrune(v17, 0x500uLL)) {
          goto LABEL_42;
        }
      }
      else if ((*(_DWORD *)(v4 + 4 * v17 + 60) & 0x500) != 0)
      {
        goto LABEL_42;
      }
      if (v17 - 36 > 0x3B || ((1 << (v17 - 36)) & 0x800000000000601) == 0)
      {
        uint64_t v21 = *(void *)this;
        int v22 = **(unsigned __int8 **)this;
        break;
      }
LABEL_42:
      unsigned int v18 = *++v5;
      unsigned int v17 = v18;
      if (v18 == 58) {
        goto LABEL_43;
      }
    }
  }
  if (v22 == 46)
  {
    int v23 = (unsigned __int8 *)(v21 + 2);
    do
    {
      *(void *)this = v23 - 1;
      uint64_t v24 = *(v23++ - 1);
    }
    while ((*(_DWORD *)(v4 + 4 * v24 + 60) & 0x400) != 0);
    int v25 = v23 - 2;
    if ((v24 | 0x20) == 0x65)
    {
      uint64_t v26 = *(v23 - 1);
      if ((*(_DWORD *)(v4 + 4 * v26 + 60) & 0x400) != 0
        || (v26 == 43 || v26 == 45) && (*(_DWORD *)(v4 + 4 * *v23 + 60) & 0x400) != 0)
      {
        do
        {
          *(void *)this = v23;
          unsigned int v27 = *v23++;
        }
        while ((*(_DWORD *)(v4 + 4 * v27 + 60) & 0x400) != 0);
        int v25 = v23 - 1;
      }
    }
    llvm::APFloat::APFloat((uint64_t)&v30, &unk_1CFB2E31C, *((unsigned __int8 **)this + 6), (unint64_t)&v25[-*((void *)this + 6)]);
    sub_1CB9190C0((uint64_t *)this + 14, (void **)&v31);
    if (v31 == (_DWORD *)&unk_1CFB2E344)
    {
      sub_1CB845718(&v32);
    }
    else if ((v31[2] - 64) <= 0xFFFFFF7F && v32)
    {
      MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
    }
    return 456;
  }
  else
  {
    int v28 = (char *)*((void *)this + 6);
    if (*v28 == 48 && v28[1] == 120)
    {
      return llvm::LLLexer::Lex0x((uint64_t)this);
    }
    else
    {
      llvm::APSInt::APSInt((unint64_t *)&v30, v28, v21 - (void)v28);
      if (*((_DWORD *)this + 36) >= 0x41u)
      {
        uint64_t v29 = *((void *)this + 17);
        if (v29) {
          MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
        }
      }
      *((void *)this + 17) = v30;
      *((_DWORD *)this + 36) = v31;
      *((unsigned char *)this + 148) = BYTE4(v31);
      return 457;
    }
  }
}

void sub_1CC192388(std::string *a1)
{
  unsigned __int8 v1 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  int v2 = (char)v1;
  std::string::size_type size = v1 & 0x7F;
  if (v2 < 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::size_type v4 = 0;
    if (v2 >= 0) {
      uint64_t v5 = (unsigned __int8 *)a1;
    }
    else {
      uint64_t v5 = (unsigned __int8 *)a1->__r_.__value_.__r.__words[0];
    }
    unsigned int v6 = &v5[size];
    uint64_t v7 = MEMORY[0x1E4F14390];
    unsigned int v8 = v5;
    do
    {
      int v9 = *v8;
      if (v9 == 92)
      {
        if (v8 < v6 - 1 && v8[1] == 92)
        {
          v5[v4] = 92;
          v8 += 2;
        }
        else if (v8 < v6 - 2 {
               && (uint64_t v10 = v8[1], (*(_DWORD *)(v7 + 4 * v10 + 60) & 0x10000) != 0)
        }
               && (uint64_t v11 = v8[2], (*(_DWORD *)(v7 + 4 * v11 + 60) & 0x10000) != 0))
        {
          v5[v4] = word_1CFAC4A4C[v11] + 16 * word_1CFAC4A4C[v10];
          v8 += 3;
        }
        else
        {
          ++v8;
          v5[v4] = 92;
        }
      }
      else
      {
        ++v8;
        v5[v4] = v9;
      }
      ++v4;
    }
    while (v8 != v6);
    std::string::resize(a1, v4, 0);
  }
}

uint64_t sub_1CC1924A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      *(_OWORD *)a3 = *(_OWORD *)v4;
      unsigned int v6 = (void **)(a3 + 16);
      if (*(char *)(a3 + 39) < 0) {
        operator delete(*v6);
      }
      long long v7 = *(_OWORD *)(v4 + 16);
      *(void *)(a3 + 32) = *(void *)(v4 + 32);
      *(_OWORD *)unsigned int v6 = v7;
      *(unsigned char *)(v4 + 39) = 0;
      *(unsigned char *)(v4 + 16) = 0;
      a3 += 40;
      v4 += 40;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_1CC192528(uint64_t a1)
{
  sub_1CC1925A4((void **)(a1 + 128));
  int v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(void *)(a1 + 112) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void **sub_1CC1925A4(void **result)
{
  unsigned __int8 v1 = (void **)*result;
  uint64_t v2 = *((unsigned int *)result + 2);
  if (v2)
  {
    uint64_t v5 = (char *)*result;
    unsigned int v6 = result;
    uint64_t v3 = 40 * v2;
    do
    {
      if (v5[v3 - 1] < 0) {
        operator delete(*(void **)&v5[v3 - 24]);
      }
      v3 -= 40;
    }
    while (v3);
    uint64_t result = v6;
    unsigned __int8 v1 = (void **)*v6;
  }
  if (v1 != result + 2)
  {
    uint64_t v4 = result;
    free(v1);
    return v4;
  }
  return result;
}

void sub_1CC19262C(std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    unsigned int v8 = this;
    if (a4 <= 0x16) {
      goto LABEL_11;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v10 = 22;
    goto LABEL_6;
  }
  unint64_t v11 = this->__r_.__value_.__r.__words[2];
  std::string::size_type v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  unint64_t v12 = HIBYTE(v11);
LABEL_8:
  unsigned int v8 = this;
  if ((v12 & 0x80) != 0) {
    unsigned int v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
LABEL_11:
  while (a2 != a3)
  {
    std::string::value_type v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    unsigned int v8 = (std::string *)((char *)v8 + 1);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    this->__r_.__value_.__l.__size_ = a4;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
  }
}

uint64_t llvm::LLParser::parseTypeAtBeginning(uint64_t a1, llvm::Type **a2, _DWORD *a3, uint64_t a4)
{
  llvm::LLParser::restoreParsingState(a1, a4);
  *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  *a3 = 0;
  uint64_t v7 = *(void *)(a1 + 216);
  *a2 = 0;
  int v9 = "expected type";
  __int16 v10 = 259;
  uint64_t result = llvm::LLParser::parseType((llvm::LLParser *)a1, a2, (const llvm::Twine *)&v9, 0);
  if ((result & 1) == 0) {
    *a3 = *(_DWORD *)(a1 + 216) - v7;
  }
  return result;
}

double LLVMSetSourceFileName_0(uint64_t a1, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    p_dst = (long long *)operator new(v7 + 1);
    *((void *)&__dst + 1) = __len;
    unint64_t v12 = v8 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v12) = __len;
  p_dst = &__dst;
  if (__len) {
LABEL_8:
  }
    memmove(p_dst, __src, __len);
  *((unsigned char *)p_dst + __len) = 0;
  int v9 = (void **)(a1 + 192);
  if (*(char *)(a1 + 215) < 0) {
    operator delete(*v9);
  }
  double result = *(double *)&__dst;
  *(_OWORD *)int v9 = __dst;
  *(void *)(a1 + 208) = v12;
  return result;
}

BOOL llvm::LLParser::parseOptionalFunctionMetadata(llvm::LLParser *this, llvm::Function *a2)
{
  do
    int v4 = *((_DWORD *)this + 56);
  while (v4 == 441 && !llvm::LLParser::parseGlobalObjectMetadataAttachment(this, a2));
  return v4 == 441;
}

uint64_t llvm::LLParser::parseOptionalUnnamedAddr(uint64_t a1, int *a2)
{
  int v3 = *(_DWORD *)(a1 + 224);
  if (v3 == 41)
  {
    int v4 = 2;
  }
  else
  {
    if (v3 != 42)
    {
      int v4 = 0;
      goto LABEL_7;
    }
    int v4 = 1;
  }
  *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
LABEL_7:
  *a2 = v4;
  return 0;
}

uint64_t llvm::LLParser::parseAliasOrIFunc(uint64_t a1, uint64_t a2, char *a3, unsigned int a4, int a5, char a6, int a7, char a8, char a9)
{
  uint64_t v135 = *MEMORY[0x1E4F143B8];
  unsigned int v17 = (llvm::LLLexer *)(a1 + 168);
  int v18 = *(_DWORD *)(a1 + 224);
  unint64_t v19 = (llvm::LLLexer *)(a1 + 168);
  if (v18 == 94)
  {
    *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken(v19);
    if (a4 > 8 || ((1 << a4) & 0x1BD) == 0)
    {
      uint64_t v20 = "invalid linkage type for alias";
      goto LABEL_9;
    }
    if (!a5) {
      goto LABEL_11;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken(v19);
    if (!a5) {
      goto LABEL_11;
    }
  }
  if (a4 - 9 >= 0xFFFFFFFE)
  {
    uint64_t v20 = "symbol with local linkage must have default visibility";
LABEL_9:
    v120[0] = v20;
    WORD4(v121) = 259;
    uint64_t v21 = (uint64_t)v17;
    int v22 = a3;
    return llvm::LLLexer::Error(v21, v22, (llvm::Twine *)v120);
  }
LABEL_11:
  uint64_t v113 = a2;
  uint64_t v24 = *(char **)(a1 + 216);
  int8x8_t v119 = 0;
  v120[0] = "expected type";
  WORD4(v121) = 259;
  if ((llvm::LLParser::parseType((llvm::LLParser *)a1, &v119, (const llvm::Twine *)v120, 0) & 1) != 0
    || (llvm::LLParser::parseToken(a1, 4, "expected comma after alias or ifunc's type") & 1) != 0)
  {
    return 1;
  }
  int v118 = 0;
  int8x8_t v110 = v24;
  uint64_t v111 = *(char **)(a1 + 216);
  unsigned int v26 = *(_DWORD *)(a1 + 224) - 308;
  if (v26 > 0x1E || (uint64_t v23 = 1, ((1 << v26) & 0x4000000D) == 0))
  {
    if ((llvm::LLParser::parseGlobalTypeAndValue((llvm::ConstantInt **)a1, &v118) & 1) == 0)
    {
      unsigned int v27 = v118;
      goto LABEL_21;
    }
    return 1;
  }
  LODWORD(v120[0]) = 0;
  v120[1] = 0;
  long long v121 = 0u;
  long long v122 = 0u;
  long long v123 = 0u;
  uint64_t v124 = 0;
  uint64_t v125 = 0;
  int v126 = 1;
  char v127 = 0;
  LODWORD(v114.__r_.__value_.__r.__words[1]) = 64;
  v114.__r_.__value_.__r.__words[0] = 0;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)__p, (const llvm::APInt **)&v114);
  __int16 v128 = __p[0];
  uint64_t v129 = __p[1];
  int v130 = v116;
  char v131 = v131 & 0xF0 | BYTE4(v116) & 0xF;
  uint64_t v133 = 0;
  char v134 = 0;
  if (llvm::LLParser::parseValID((uint64_t **)a1, (uint64_t)v120, 0, 0))
  {
LABEL_29:
    sub_1CD4F271C((uint64_t)v120);
    return v23;
  }
  if (LODWORD(v120[0]) != 12)
  {
    __p[0] = "invalid aliasee";
    __int16 v117 = 259;
    uint64_t v23 = llvm::LLLexer::Error((uint64_t)v17, v111, (llvm::Twine *)__p);
    goto LABEL_29;
  }
  unsigned int v27 = v132;
  int v118 = v132;
  sub_1CD4F271C((uint64_t)v120);
LABEL_21:
  uint64_t v28 = *(void *)v27;
  if (!*(void *)v27 || *(_DWORD *)(v28 + 8) != 15)
  {
    v120[0] = "An alias or ifunc must have pointer type";
    WORD4(v121) = 259;
    uint64_t v21 = (uint64_t)v17;
    int v22 = v111;
    return llvm::LLLexer::Error(v21, v22, (llvm::Twine *)v120);
  }
  if (v18 != 94)
  {
    if (!*(void *)(v28 + 24) || *(unsigned char *)(**(void **)(v28 + 16) + 8) == 14) {
      goto LABEL_35;
    }
    v120[0] = "explicit pointee type should be a function type";
    WORD4(v121) = 259;
    uint64_t v21 = (uint64_t)v17;
    int v22 = v110;
    return llvm::LLLexer::Error(v21, v22, (llvm::Twine *)v120);
  }
  uint64_t v29 = *(llvm::Type **)(v28 + 24);
  if (v29 && v29 != v119)
  {
    sub_1CC196358((uint64_t)__p, v119, **(llvm::Type ***)(v28 + 16));
    WORD4(v121) = 260;
    v120[0] = (const char *)__p;
    uint64_t v23 = llvm::LLLexer::Error((uint64_t)v17, v110, (llvm::Twine *)v120);
    if (SHIBYTE(v116) < 0)
    {
      int v30 = __p[0];
LABEL_105:
      operator delete(v30);
      return v23;
    }
    return v23;
  }
LABEL_35:
  unsigned int v109 = *(_DWORD *)(v28 + 8);
  char v112 = a6;
  char v31 = *(unsigned char *)(v113 + 23);
  int v32 = v31;
  uint64_t v33 = v31 & 0x7F;
  if (v32 < 0) {
    uint64_t v33 = *(void *)(v113 + 8);
  }
  if (!v33)
  {
    uint64_t v34 = *(void *)(a1 + 1016);
    if (v34)
    {
      uint64_t v35 = (*(void *)(a1 + 1040) - *(void *)(a1 + 1032)) >> 3;
      uint64_t v36 = a1 + 1016;
      do
      {
        unsigned int v37 = *(_DWORD *)(v34 + 32);
        BOOL v38 = v37 >= v35;
        if (v37 >= v35) {
          int v39 = (uint64_t *)v34;
        }
        else {
          int v39 = (uint64_t *)(v34 + 8);
        }
        if (v38) {
          uint64_t v36 = v34;
        }
        uint64_t v34 = *v39;
      }
      while (*v39);
      if (v36 != a1 + 1016 && *(_DWORD *)(v36 + 32) <= v35)
      {
        int v40 = *(llvm::ValueAsMetadata **)(v36 + 40);
        sub_1CD491B50((uint64_t **)(a1 + 1008), (uint64_t *)v36);
        operator delete((void *)v36);
        goto LABEL_59;
      }
    }
    goto LABEL_58;
  }
  uint64_t v41 = sub_1CD4F3EC8(a1 + 984, (void *)v113);
  if (a1 + 992 != v41)
  {
    int v40 = *(llvm::ValueAsMetadata **)(v41 + 56);
    uint64_t v70 = sub_1CD4F3EC8(a1 + 984, (void *)v113);
    if (a1 + 992 != v70) {
      sub_1CD4F3F94((uint64_t **)(a1 + 984), v70);
    }
LABEL_59:
    int v47 = (llvm::Type *)(v109 >> 8);
    __p[0] = 0;
    WORD4(v121) = 260;
    v120[0] = (const char *)v113;
    if (v18 == 94)
    {
      int v48 = llvm::GlobalAlias::create(v119, v47, a4, v120, (unint64_t)v27, 0);
      sub_1CC196550((llvm::Value **)__p, (llvm::Value *)v48);
      size_t v49 = 0;
      int v50 = (unint64_t *)__p[0];
    }
    else
    {
      size_t v49 = llvm::GlobalIFunc::create(v119, v47, a4, v120, (unint64_t)v27, 0);
      int v50 = v49;
    }
    int v51 = *((_DWORD *)v50 + 8);
    unsigned int v52 = v51 & 0xFFFFE3CF | ((a8 & 7) << 10) | (16 * (a5 & 3));
    *((_DWORD *)v50 + 8) = v52;
    if ((v51 & 0xFu) - 7 < 2
      || 16 * (a5 & 3)
      && (char hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v50),
          unsigned int v52 = *((_DWORD *)v50 + 8),
          (hasExternalWeakLinkage & 1) == 0))
    {
      v52 |= 0x4000u;
    }
    if (a7) {
      unsigned int v53 = ((v112 & 3) << 8) | ((a9 & 3) << 6) | v52 & 0xFFFFFC3F | 0x4000;
    }
    else {
      unsigned int v53 = ((v112 & 3) << 8) | ((a9 & 3) << 6) | v52 & 0xFFFFFC3F;
    }
    *((_DWORD *)v50 + 8) = v53;
    while (*(_DWORD *)(a1 + 224) == 4)
    {
      int v54 = llvm::LLLexer::LexToken(v17);
      *(_DWORD *)(a1 + 224) = v54;
      if (v54 != 93)
      {
        v120[0] = "unknown alias or ifunc property!";
        WORD4(v121) = 259;
        unsigned int v100 = *(char **)(a1 + 216);
        uint64_t v101 = (uint64_t)v17;
LABEL_143:
        uint64_t v23 = llvm::LLLexer::Error(v101, v100, (llvm::Twine *)v120);
LABEL_121:
        if (v49)
        {
          uint64_t v87 = v49[6];
          if (v87) {
            llvm::Comdat::removeUser(v87, (uint64_t)v49);
          }
          v49[6] = 0;
          llvm::Constant::removeDeadConstantUsers((uint64_t)v49);
          llvm::Value::~Value((llvm::Value *)v49, v88);
          int v89 = *((_DWORD *)v49 + 5);
          if ((v89 & 0x40000000) != 0)
          {
            uint64_t v104 = (char *)*(v49 - 1);
            uint64_t v103 = v49 - 1;
            int v102 = v104;
            uint64_t v105 = v89 & 0x7FFFFFF;
            if (v105)
            {
              uint64_t v106 = 32 * v105;
              do
              {
                unsigned int v107 = &v102[v106];
                if (*(void *)&v102[v106 - 32])
                {
                  **((void **)v107 - 2) = *((void *)v107 - 3);
                  uint64_t v108 = *((void *)v107 - 3);
                  if (v108) {
                    *(void *)(v108 + 16) = *((void *)v107 - 2);
                  }
                }
                v106 -= 32;
              }
              while (v106);
            }
            operator delete(v102);
            uint64_t v91 = v103;
          }
          else
          {
            uint64_t v90 = v89 & 0x7FFFFFF;
            uint64_t v91 = &v49[-4 * v90];
            if (v90)
            {
              uint64_t v92 = v49 - 2;
              uint64_t v93 = -32 * v90;
              do
              {
                if (*(v92 - 2))
                {
                  *(void *)*uint64_t v92 = *(v92 - 1);
                  uint64_t v94 = *(v92 - 1);
                  if (v94) {
                    *(void *)(v94 + 16) = *v92;
                  }
                }
                v92 -= 4;
                v93 += 32;
              }
              while (v93);
            }
            if (v89 < 0) {
              uint64_t v91 = (unint64_t *)((char *)v91 - *(v91 - 1) - 8);
            }
          }
          operator delete(v91);
        }
        goto LABEL_138;
      }
      *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken(v17);
      char v55 = *(unsigned char *)(a1 + 255);
      BOOL v56 = v55 < 0;
      if (v55 >= 0) {
        int v57 = (unsigned char *)(a1 + 232);
      }
      else {
        int v57 = *(unsigned char **)(a1 + 232);
      }
      size_t v58 = v55 & 0x7F;
      if (v56) {
        size_t v59 = *(void *)(a1 + 240);
      }
      else {
        size_t v59 = v58;
      }
      if ((*((unsigned char *)v50 + 33) & 0x80) != 0 || v59)
      {
        if (v59)
        {
          int v57 = llvm::UniqueStringSaver::save(**(void **)*v50 + 2136, v57, v59);
          uint64_t v60 = v61;
        }
        else
        {
          uint64_t v60 = 0;
        }
        uint64_t v62 = **(void **)*v50 + 2528;
        v120[0] = (const char *)v50;
        int v63 = sub_1CD4CB550(v62, (uint64_t *)v120);
        v63[1] = v57;
        v63[2] = v60;
        *((_DWORD *)v50 + 8) = v50[4] & 0xFFFF7FFF | ((v60 != 0) << 15);
      }
      if (llvm::LLParser::parseToken(a1, 442, "expected partition string"))
      {
        uint64_t v23 = 1;
        goto LABEL_121;
      }
    }
    char v64 = *(unsigned char *)(v113 + 23);
    int v65 = v64;
    uint64_t v66 = v64 & 0x7F;
    if (v65 < 0) {
      uint64_t v66 = *(void *)(v113 + 8);
    }
    if (!v66)
    {
      uint64_t v67 = *(unint64_t ***)(a1 + 1040);
      unint64_t v68 = *(void *)(a1 + 1048);
      if ((unint64_t)v67 >= v68)
      {
        uint64_t v71 = *(void **)(a1 + 1032);
        uint64_t v72 = v67 - (unint64_t **)v71;
        unint64_t v73 = v72 + 1;
        if ((unint64_t)(v72 + 1) >> 61) {
          abort();
        }
        uint64_t v74 = v68 - (void)v71;
        if (v74 >> 2 > v73) {
          unint64_t v73 = v74 >> 2;
        }
        if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v75 = v73;
        }
        if (v75)
        {
          if (v75 >> 61) {
            sub_1CB833614();
          }
          uint64_t v76 = (char *)operator new(8 * v75);
        }
        else
        {
          uint64_t v76 = 0;
        }
        BOOL v79 = (unint64_t **)&v76[8 * v72];
        *BOOL v79 = v50;
        int v69 = v79 + 1;
        if (v67 != v71)
        {
          do
          {
            uint64_t v80 = *--v67;
            *--BOOL v79 = v80;
          }
          while (v67 != v71);
          uint64_t v67 = *(unint64_t ***)(a1 + 1032);
        }
        *(void *)(a1 + 1032) = v79;
        *(void *)(a1 + 1040) = v69;
        *(void *)(a1 + 1048) = &v76[8 * v75];
        if (v67) {
          operator delete(v67);
        }
      }
      else
      {
        *uint64_t v67 = v50;
        int v69 = v67 + 1;
      }
      *(void *)(a1 + 1040) = v69;
    }
    if (v40)
    {
      if (*(void *)v40 != *v50)
      {
        v120[0] = "forward reference and definition of alias have different types";
        WORD4(v121) = 259;
        uint64_t v101 = (uint64_t)v17;
        unsigned int v100 = v110;
        goto LABEL_143;
      }
      llvm::Value::doRAUW(v40, (llvm::Value *)v50, (llvm::Value *)1);
      llvm::GlobalValue::eraseFromParent(v40);
    }
    unint64_t v81 = *(void *)(a1 + 328);
    if (v18 == 94)
    {
      uint64_t v82 = (uint64_t *)(v81 + 40);
      uint64_t v83 = (char *)__p[0];
      __p[0] = 0;
      *((void *)v83 + 5) = v81;
      if ((v83[23] & 0x10) != 0)
      {
        uint64_t v84 = *(llvm::ValueSymbolTable **)(v81 + 112);
        if (v84) {
          llvm::ValueSymbolTable::reinsertValue(v84, (llvm::Value *)v83);
        }
      }
      uint64_t v23 = 0;
      uint64_t v85 = *v82;
      *((void *)v83 + 6) = *v82;
      *((void *)v83 + 7) = v82;
      int8x8_t v86 = v83 + 48;
      *(void *)(v85 + 8) = v86;
      *uint64_t v82 = (uint64_t)v86;
      goto LABEL_121;
    }
    char v95 = (unint64_t *)(v81 + 56);
    v49[5] = v81;
    if ((*((unsigned char *)v49 + 23) & 0x10) != 0)
    {
      int v96 = *(llvm::ValueSymbolTable **)(v81 + 112);
      if (v96) {
        llvm::ValueSymbolTable::reinsertValue(v96, (llvm::Value *)v49);
      }
    }
    uint64_t v23 = 0;
    unint64_t v97 = *v95;
    v49[7] = *v95;
    v49[8] = (unint64_t)v95;
    size_t v98 = v49 + 7;
    *(void *)(v97 + 8) = v98;
    *char v95 = (unint64_t)v98;
LABEL_138:
    sub_1CC196550((llvm::Value **)__p, 0);
    return v23;
  }
  char v42 = *(unsigned char *)(v113 + 23);
  BOOL v43 = v42 < 0;
  if (v42 >= 0) {
    int v44 = (unsigned __int8 *)v113;
  }
  else {
    int v44 = *(unsigned __int8 **)v113;
  }
  unint64_t v45 = v42 & 0x7F;
  if (v43) {
    unint64_t v46 = *(void *)(v113 + 8);
  }
  else {
    unint64_t v46 = v45;
  }
  if (!llvm::Module::getNamedValue(*(void *)(a1 + 328), v44, v46))
  {
LABEL_58:
    int v40 = 0;
    goto LABEL_59;
  }
  std::operator+<char>();
  uint64_t v77 = std::string::append(&v114, "'");
  std::string::size_type v78 = v77->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
  std::string::size_type v116 = v78;
  v77->__r_.__value_.__l.__size_ = 0;
  v77->__r_.__value_.__r.__words[2] = 0;
  v77->__r_.__value_.__r.__words[0] = 0;
  WORD4(v121) = 260;
  v120[0] = (const char *)__p;
  uint64_t v23 = llvm::LLLexer::Error((uint64_t)v17, a3, (llvm::Twine *)v120);
  if (SHIBYTE(v116) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
  {
    int v30 = (void *)v114.__r_.__value_.__r.__words[0];
    goto LABEL_105;
  }
  return v23;
}

uint64_t llvm::LLParser::parseTypeIdCompatibleVtableEntry(llvm::LLParser *this, unsigned int a2)
{
  int v4 = (llvm::LLParser *)((char *)this + 168);
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  memset(&v81, 0, sizeof(v81));
  if ((llvm::LLParser::parseToken((uint64_t)this, 16, "expected ':' here") & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 355, "expected 'name' here") & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 16, "expected ':' here") & 1) != 0
    || (llvm::LLParser::parseStringConstant((uint64_t)this, &v81) & 1) != 0
    || ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (size_t v7 = &v81)
      : (size_t v7 = (std::string *)v81.__r_.__value_.__r.__words[0]),
        (v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (std::string::size_type v8 = *((unsigned char *)&v81.__r_.__value_.__s + 23) & 0x7F)
      : (std::string::size_type v8 = v81.__r_.__value_.__l.__size_),
        (int v9 = sub_1CD4AF7A0(*((void *)this + 42), (const std::string::value_type *)v7, v8),
         (llvm::LLParser::parseToken((uint64_t)this, 4, "expected ',' here") & 1) != 0)
     || (llvm::LLParser::parseToken((uint64_t)this, 403, "expected 'summary' here") & 1) != 0
     || (llvm::LLParser::parseToken((uint64_t)this, 16, "expected ':' here") & 1) != 0
     || (llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0))
  {
    uint64_t v5 = 1;
  }
  else
  {
    v80[0] = 0;
    v80[1] = 0;
    BOOL v79 = (uint64_t *)v80;
    unint64_t v73 = 0;
    for (uint64_t i = this; ; uint64_t i = this)
    {
      if (llvm::LLParser::parseToken((uint64_t)i, 12, "expected '(' here"))
        goto LABEL_96;
      if (llvm::LLParser::parseToken((uint64_t)this, 399, "expected 'offset' here")) {
        goto LABEL_96;
      }
      if (llvm::LLParser::parseToken((uint64_t)this, 16, "expected ':' here")) {
        goto LABEL_96;
      }
      if (llvm::LLParser::parseUInt64((char **)this, &v73)) {
        goto LABEL_96;
      }
      if (llvm::LLParser::parseToken((uint64_t)this, 4, "expected ',' here")) {
        goto LABEL_96;
      }
      uint64_t v11 = *((void *)this + 27);
      unsigned int v78 = 0;
      unint64_t v77 = 0;
      if (llvm::LLParser::parseGVReference(this, (llvm::ValueInfo *)&v77, &v78)) {
        goto LABEL_96;
      }
      unint64_t v12 = v77;
      if ((~v77 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
        std::string::value_type v13 = sub_1CD4F4F28(&v79, v78, &v78);
        size_t v14 = v13;
        uint64_t v71 = (*((void *)v9 + 1) - *(void *)v9) >> 4;
        unint64_t v16 = v13[6];
        unint64_t v15 = v13[7];
        if (v16 >= v15)
        {
          int v18 = v13[5];
          uint64_t v19 = ((char *)v16 - (char *)v18) >> 4;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 60) {
            goto LABEL_119;
          }
          uint64_t v21 = (char *)v15 - (char *)v18;
          if (v21 >> 3 > v20) {
            unint64_t v20 = v21 >> 3;
          }
          BOOL v60 = (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0;
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
          if (!v60) {
            unint64_t v22 = v20;
          }
          unint64_t v69 = v22;
          if (v22)
          {
            if (v22 >> 60) {
              goto LABEL_120;
            }
            uint64_t v23 = (char *)operator new(16 * v22);
          }
          else
          {
            uint64_t v23 = 0;
          }
          uint64_t v24 = &v23[16 * v19];
          *(_DWORD *)uint64_t v24 = v71;
          *((void *)v24 + 1) = v11;
          int v25 = (uint64_t *)v24;
          if (v16 != v18)
          {
            do
            {
              *((_OWORD *)v25 - 1) = *((_OWORD *)v16 - 1);
              v25 -= 2;
              v16 -= 2;
            }
            while (v16 != v18);
            unint64_t v16 = v14[5];
          }
          unsigned int v17 = (uint64_t *)(v24 + 16);
          uint64_t v14[5] = v25;
          _OWORD v14[6] = (uint64_t *)(v24 + 16);
          v14[7] = (uint64_t *)&v23[16 * v69];
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v16 = v71;
          v16[1] = v11;
          unsigned int v17 = v16 + 2;
        }
        _OWORD v14[6] = v17;
      }
      unint64_t v26 = v73;
      uint64_t v28 = (unint64_t *)*((void *)v9 + 1);
      unint64_t v27 = *((void *)v9 + 2);
      if ((unint64_t)v28 >= v27)
      {
        int v30 = *(unint64_t **)v9;
        uint64_t v31 = ((uint64_t)v28 - *(void *)v9) >> 4;
        unint64_t v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 60) {
LABEL_119:
        }
          abort();
        uint64_t v33 = v27 - (void)v30;
        if (v33 >> 3 > v32) {
          unint64_t v32 = v33 >> 3;
        }
        unint64_t v34 = (unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v32;
        if (v34)
        {
          if (v34 >> 60) {
LABEL_120:
          }
            sub_1CB833614();
          uint64_t v35 = (char *)operator new(16 * v34);
        }
        else
        {
          uint64_t v35 = 0;
        }
        uint64_t v36 = (unint64_t *)&v35[16 * v31];
        *uint64_t v36 = v26;
        v36[1] = v12;
        unsigned int v37 = v36;
        if (v28 != v30)
        {
          do
          {
            *((_OWORD *)v37 - 1) = *((_OWORD *)v28 - 1);
            v37 -= 2;
            v28 -= 2;
          }
          while (v28 != v30);
          uint64_t v28 = *(unint64_t **)v9;
        }
        uint64_t v29 = v36 + 2;
        *(void *)int v9 = v37;
        *((void *)v9 + 1) = v36 + 2;
        *((void *)v9 + 2) = &v35[16 * v34];
        if (v28) {
          operator delete(v28);
        }
      }
      else
      {
        *uint64_t v28 = v73;
        v28[1] = v12;
        uint64_t v29 = v28 + 2;
      }
      *((void *)v9 + 1) = v29;
      if (llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' in call")) {
        goto LABEL_96;
      }
      if (*((_DWORD *)this + 56) != 4) {
        break;
      }
      *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v4);
      unint64_t v73 = 0;
    }
    uint64_t v70 = v79;
    if (v79 != (uint64_t *)v80)
    {
      do
      {
        LODWORD(v73) = *((_DWORD *)v70 + 8);
        unint64_t v75 = 0;
        uint64_t v76 = 0;
        uint64_t v74 = 0;
        sub_1CC0C57E8(&v74, (unsigned char *)v70[5], (unsigned char *)v70[6], (v70[6] - v70[5]) >> 4);
        uint64_t v72 = sub_1CD4F4F28((uint64_t **)this + 145, v73, &v73);
        BOOL v38 = v74;
        unint64_t v68 = v75;
        if (v74 != v75)
        {
          int v39 = v72[6];
          do
          {
            uint64_t v40 = v38[1];
            uint64_t v41 = *(void *)v9 + 16 * *(unsigned int *)v38 + 8;
            char v42 = v72[7];
            if (v39 >= v42)
            {
              BOOL v43 = v72[5];
              uint64_t v44 = ((char *)v39 - (char *)v43) >> 4;
              unint64_t v45 = v44 + 1;
              if ((unint64_t)(v44 + 1) >> 60) {
                goto LABEL_119;
              }
              uint64_t v46 = (char *)v42 - (char *)v43;
              if (v46 >> 3 > v45) {
                unint64_t v45 = v46 >> 3;
              }
              if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v47 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v47 = v45;
              }
              if (v47 >> 60) {
                goto LABEL_120;
              }
              int v48 = (char *)operator new(16 * v47);
              size_t v49 = (uint64_t *)&v48[16 * v44];
              *size_t v49 = v41;
              v49[1] = v40;
              if (v39 == v43)
              {
                int v51 = (uint64_t *)&v48[16 * v44];
              }
              else
              {
                int v50 = &v48[16 * v44];
                do
                {
                  int v51 = (uint64_t *)(v50 - 16);
                  *((_OWORD *)v50 - 1) = *((_OWORD *)v39 - 1);
                  v39 -= 2;
                  v50 -= 16;
                }
                while (v39 != v43);
              }
              int v39 = v49 + 2;
              v72[5] = v51;
              v72[6] = v49 + 2;
              v72[7] = (uint64_t *)&v48[16 * v47];
              if (v43) {
                operator delete(v43);
              }
            }
            else
            {
              uint64_t *v39 = v41;
              v39[1] = v40;
              v39 += 2;
            }
            v72[6] = v39;
            v38 += 2;
          }
          while (v38 != v68);
          BOOL v38 = v74;
        }
        if (v38) {
          operator delete(v38);
        }
        unsigned int v52 = (uint64_t *)v70[1];
        if (v52)
        {
          do
          {
            unsigned int v53 = v52;
            unsigned int v52 = (uint64_t *)*v52;
          }
          while (v52);
        }
        else
        {
          do
          {
            unsigned int v53 = (uint64_t *)v70[2];
            BOOL v54 = *v53 == (void)v70;
            uint64_t v70 = v53;
          }
          while (!v54);
        }
        uint64_t v70 = v53;
      }
      while (v53 != (uint64_t *)v80);
    }
    if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0 {
      || (llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0)
    }
    {
LABEL_96:
      uint64_t v5 = 1;
      goto LABEL_97;
    }
    char v55 = (char *)*((void *)this + 155);
    if (v55)
    {
      BOOL v56 = (uint64_t **)((char *)this + 1232);
      int v57 = (char *)this + 1240;
      size_t v58 = (char *)this + 1240;
      do
      {
        unsigned int v59 = *((_DWORD *)v55 + 8);
        BOOL v60 = v59 >= a2;
        if (v59 >= a2) {
          uint64_t v61 = (char **)v55;
        }
        else {
          uint64_t v61 = (char **)(v55 + 8);
        }
        if (v60) {
          size_t v58 = v55;
        }
        char v55 = *v61;
      }
      while (*v61);
      if (v58 != v57 && *((_DWORD *)v58 + 8) <= a2)
      {
        uint64_t v62 = (uint64_t **)*((void *)v58 + 5);
        for (j = (uint64_t **)*((void *)v58 + 6); v62 != j; *char v64 = sub_1CD4F0108(v66, size))
        {
          int v65 = *v62;
          v62 += 2;
          char v64 = v65;
          if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v66 = (int *)&v81;
          }
          else {
            uint64_t v66 = (int *)v81.__r_.__value_.__r.__words[0];
          }
          if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t size = *((unsigned char *)&v81.__r_.__value_.__s + 23) & 0x7F;
          }
          else {
            size_t size = v81.__r_.__value_.__l.__size_;
          }
        }
        sub_1CD4F4E84(v56, (uint64_t *)v58);
      }
    }
    uint64_t v5 = 0;
LABEL_97:
    sub_1CD4F4ECC(v80[0]);
  }
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v81.__r_.__value_.__l.__data_);
  }
  return v5;
}

uint64_t llvm::LLParser::parseValID(uint64_t **a1, uint64_t a2, const llvm::APInt *a3, llvm::Type *a4)
{
  uint64_t v277 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = (llvm::LLLexer *)(a1 + 21);
  *(void *)(a2 + 8) = a1[27];
  int v7 = *((_DWORD *)a1 + 56);
  if (v7 > 275)
  {
    if (v7 > 432)
    {
      switch(v7)
      {
        case 433:
          *(_DWORD *)(a2 + 16) = *((_DWORD *)a1 + 64);
          int v8 = 1;
          goto LABEL_71;
        case 434:
          int v8 = 0;
          *(_DWORD *)(a2 + 16) = *((_DWORD *)a1 + 64);
          goto LABEL_71;
        case 435:
        case 436:
        case 437:
        case 439:
          goto LABEL_123;
        case 438:
          std::string::operator=((std::string *)(a2 + 32), (const std::string *)(a1 + 29));
          int v8 = 3;
          goto LABEL_71;
        case 440:
          std::string::operator=((std::string *)(a2 + 32), (const std::string *)(a1 + 29));
          int v8 = 2;
          goto LABEL_71;
        default:
          if (v7 == 456)
          {
            uint64_t v19 = *(void **)(a2 + 104);
            unint64_t v20 = (void **)(a1 + 35);
            uint64_t v21 = a1[35];
            if (v19 == &unk_1CFB2E344 || v21 == (uint64_t *)&unk_1CFB2E344)
            {
              if (v19 == &unk_1CFB2E344 && v21 == (uint64_t *)&unk_1CFB2E344)
              {
                llvm::detail::DoubleAPFloat::operator=((const llvm::detail::DoubleAPFloat *)(a2 + 104), (const llvm::detail::DoubleAPFloat *)(a1 + 35));
              }
              else if ((void **)(a2 + 104) != v20)
              {
                if (v19 == &unk_1CFB2E344) {
                  sub_1CB845718((uint64_t *)(a2 + 112));
                }
                else {
                  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)(a2 + 104));
                }
                unsigned int v207 = (void *)(a2 + 104);
                BOOL v208 = (const llvm::detail::DoubleAPFloat *)(a1 + 35);
                if (*v20 == &unk_1CFB2E344) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(v207, v208);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v207, v208);
                }
              }
            }
            else
            {
              llvm::detail::IEEEFloat::operator=((void *)(a2 + 104), a1 + 35);
            }
            int v8 = 5;
          }
          else
          {
            if (v7 != 457) {
              goto LABEL_123;
            }
            if (*(_DWORD *)(a2 + 88) > 0x40u || *((_DWORD *)a1 + 78) > 0x40u)
            {
              int v39 = (const void **)(a1 + 38);
              uint64_t v40 = (void **)(a2 + 80);
              if ((uint64_t **)(a2 + 80) != a1 + 38)
              {
                llvm::APInt::reallocate(a2 + 80, *((_DWORD *)a1 + 78));
                uint64_t v81 = *(unsigned int *)(a2 + 88);
                if (v81 <= 0x40) {
                  *uint64_t v40 = (void *)*v39;
                }
                else {
                  memcpy(*v40, *v39, ((unint64_t)(v81 + 63) >> 3) & 0x3FFFFFF8);
                }
              }
            }
            else
            {
              *(void *)(a2 + 80) = a1[38];
              *(_DWORD *)(a2 + 88) = *((_DWORD *)a1 + 78);
            }
            *(unsigned char *)(a2 + 92) = *((unsigned char *)a1 + 316);
            int v8 = 4;
          }
          break;
      }
      goto LABEL_71;
    }
    switch(v7)
    {
      case 276:
        int v65 = (llvm::ConstantExpr *)*((unsigned int *)a1 + 64);
        __p.__r_.__value_.__r.__words[0] = 0;
        *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 21));
        if (llvm::LLParser::parseToken((uint64_t)a1, 12, "expected '(' in unary constantexpr"))
          goto LABEL_83;
        v230[0] = 0;
        __src = "expected type";
        WORD4(v235) = 259;
        if ((llvm::LLParser::parseType((llvm::LLParser *)a1, v230, (const llvm::Twine *)&__src, 0) & 1) != 0
          || (llvm::LLParser::parseGlobalValue((llvm::ConstantInt **)a1, v230[0], (llvm::Constant **)&__p) & 1) != 0
          || (llvm::LLParser::parseToken((uint64_t)a1, 13, "expected ')' in unary constantexpr") & 1) != 0)
        {
          goto LABEL_83;
        }
        if ((*(_DWORD *)(*(void *)__p.__r_.__value_.__l.__data_ + 8) & 0xFE) == 0x12) {
          unsigned int v67 = *(unsigned __int8 *)(**(void **)(*(void *)__p.__r_.__value_.__l.__data_ + 16) + 8);
        }
        else {
          unsigned int v67 = *(_DWORD *)(*(void *)__p.__r_.__value_.__l.__data_ + 8);
        }
        if (v67 >= 7) {
          goto LABEL_477;
        }
        uint64_t FCmp = llvm::ConstantExpr::get(v65, (unsigned __int8 *)__p.__r_.__value_.__l.__data_, 0, 0, v66);
        goto LABEL_418;
      case 277:
      case 278:
      case 279:
      case 280:
      case 281:
      case 282:
      case 283:
      case 284:
      case 285:
      case 286:
      case 287:
      case 288:
      case 289:
      case 290:
      case 291:
        unint64_t v22 = (llvm *)*((unsigned int *)a1 + 64);
        __p.__r_.__value_.__r.__words[0] = 0;
        v249.__r_.__value_.__r.__words[0] = 0;
        int v23 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 21));
        int v24 = v23;
        *((_DWORD *)a1 + 56) = v23;
        HIDWORD(v26) = v22 - 13;
        LODWORD(v26) = v22 - 13;
        unsigned int v25 = v26 >> 1;
        BOOL v27 = v25 > 6;
        int v28 = (1 << v25) & 0x47;
        BOOL v29 = v27 || v28 == 0;
        if (v29)
        {
          char v32 = 0;
          if (v22 > 0x1B)
          {
            int v34 = 0;
            BOOL v30 = 0;
          }
          else
          {
            int v34 = 0;
            BOOL v30 = 0;
            if (((1 << (char)v22) & 0xC180000) != 0)
            {
              if (v23 == 87)
              {
                int v34 = 0;
                BOOL v30 = 0;
                *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken(v6);
                char v32 = 1;
              }
              else
              {
                char v32 = 0;
                int v34 = 0;
                BOOL v30 = 0;
              }
            }
          }
        }
        else
        {
          BOOL v30 = v23 == 85;
          if (v23 == 85)
          {
            int v23 = llvm::LLLexer::LexToken(v6);
            *((_DWORD *)a1 + 56) = v23;
          }
          if (v23 == 86)
          {
            int v31 = llvm::LLLexer::LexToken(v6);
            *((_DWORD *)a1 + 56) = v31;
            if (v31 == 85) {
              *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken(v6);
            }
            char v32 = 0;
            BOOL v30 = v24 == 85 || v31 == 85;
            int v34 = 1;
          }
          else
          {
            char v32 = 0;
            int v34 = 0;
          }
        }
        if (llvm::LLParser::parseToken((uint64_t)a1, 12, "expected '(' in binary constantexpr"))
          goto LABEL_83;
        v230[0] = 0;
        __src = "expected type";
        WORD4(v235) = 259;
        if (llvm::LLParser::parseType((llvm::LLParser *)a1, v230, (const llvm::Twine *)&__src, 0)) {
          goto LABEL_83;
        }
        if (llvm::LLParser::parseGlobalValue((llvm::ConstantInt **)a1, v230[0], (llvm::Constant **)&__p)) {
          goto LABEL_83;
        }
        if (llvm::LLParser::parseToken((uint64_t)a1, 4, "expected comma in binary constantexpr")) {
          goto LABEL_83;
        }
        v230[0] = 0;
        __src = "expected type";
        WORD4(v235) = 259;
        if ((llvm::LLParser::parseType((llvm::LLParser *)a1, v230, (const llvm::Twine *)&__src, 0) & 1) != 0
          || (llvm::LLParser::parseGlobalValue((llvm::ConstantInt **)a1, v230[0], (llvm::Constant **)&v249) & 1) != 0
          || (llvm::LLParser::parseToken((uint64_t)a1, 13, "expected ')' in binary constantexpr") & 1) != 0)
        {
          goto LABEL_83;
        }
        unint64_t v77 = (llvm::Type *)__p.__r_.__value_.__r.__words[0];
        uint64_t v78 = *(void *)__p.__r_.__value_.__l.__data_;
        BOOL v79 = (llvm::Type *)v249.__r_.__value_.__r.__words[0];
        if (*(void *)__p.__r_.__value_.__l.__data_ != *(void *)v249.__r_.__value_.__l.__data_) {
          goto LABEL_483;
        }
        if (((1 << (char)v22) & 0xEDAA000) != 0)
        {
          if ((*(_DWORD *)(v78 + 8) & 0xFE) == 0x12) {
            int v80 = *(unsigned __int8 *)(**(void **)(v78 + 16) + 8);
          }
          else {
            int v80 = *(_DWORD *)(v78 + 8);
          }
          if (v80 != 13)
          {
            BOOL v60 = *(char **)(a2 + 8);
            uint64_t v90 = "constexpr requires integer operands";
            goto LABEL_200;
          }
        }
        else
        {
          if ((*(_DWORD *)(v78 + 8) & 0xFE) == 0x12) {
            unsigned int v203 = *(unsigned __int8 *)(**(void **)(v78 + 16) + 8);
          }
          else {
            unsigned int v203 = *(_DWORD *)(v78 + 8);
          }
          if (v203 >= 7)
          {
LABEL_477:
            BOOL v60 = *(char **)(a2 + 8);
            uint64_t v90 = "constexpr requires fp operands";
            goto LABEL_200;
          }
        }
        if (v34) {
          char v204 = v30 | 2;
        }
        else {
          char v204 = v30;
        }
        uint64_t FCmp = (uint64_t)llvm::ConstantFoldBinaryInstruction(v22, (llvm::Constant *)__p.__r_.__value_.__l.__data_, (llvm::Constant *)v249.__r_.__value_.__l.__data_, v76);
        if (FCmp) {
          goto LABEL_418;
        }
        BOOL v205 = *(void ***)v77;
        if (!*(void *)v77) {
          goto LABEL_530;
        }
        v230[0] = v77;
        v230[1] = v79;
        uint64_t v206 = **v205 + 1512;
        LOBYTE(__src) = (_BYTE)v22;
        BYTE1(__src) = v204 | v32;
        goto LABEL_476;
      case 292:
      case 293:
      case 294:
        size_t v49 = (llvm *)*((unsigned int *)a1 + 64);
        __p.__r_.__value_.__r.__words[0] = 0;
        v249.__r_.__value_.__r.__words[0] = 0;
        *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 21));
        if (llvm::LLParser::parseToken((uint64_t)a1, 12, "expected '(' in logical constantexpr"))
          goto LABEL_83;
        v230[0] = 0;
        __src = "expected type";
        WORD4(v235) = 259;
        if (llvm::LLParser::parseType((llvm::LLParser *)a1, v230, (const llvm::Twine *)&__src, 0)) {
          goto LABEL_83;
        }
        if (llvm::LLParser::parseGlobalValue((llvm::ConstantInt **)a1, v230[0], (llvm::Constant **)&__p)) {
          goto LABEL_83;
        }
        if (llvm::LLParser::parseToken((uint64_t)a1, 4, "expected comma in logical constantexpr")) {
          goto LABEL_83;
        }
        v230[0] = 0;
        __src = "expected type";
        WORD4(v235) = 259;
        if ((llvm::LLParser::parseType((llvm::LLParser *)a1, v230, (const llvm::Twine *)&__src, 0) & 1) != 0
          || (llvm::LLParser::parseGlobalValue((llvm::ConstantInt **)a1, v230[0], (llvm::Constant **)&v249) & 1) != 0
          || (llvm::LLParser::parseToken((uint64_t)a1, 13, "expected ')' in logical constantexpr") & 1) != 0)
        {
          goto LABEL_83;
        }
        int v51 = (llvm::Type *)__p.__r_.__value_.__r.__words[0];
        uint64_t v52 = *(void *)__p.__r_.__value_.__l.__data_;
        unsigned int v53 = (llvm::Type *)v249.__r_.__value_.__r.__words[0];
        if (*(void *)__p.__r_.__value_.__l.__data_ != *(void *)v249.__r_.__value_.__l.__data_)
        {
LABEL_483:
          BOOL v60 = *(char **)(a2 + 8);
          uint64_t v90 = "operands of constexpr must have same type";
          goto LABEL_200;
        }
        if ((*(_DWORD *)(v52 + 8) & 0xFE) == 0x12) {
          int v54 = *(unsigned __int8 *)(**(void **)(v52 + 16) + 8);
        }
        else {
          int v54 = *(_DWORD *)(v52 + 8);
        }
        if (v54 != 13)
        {
          BOOL v60 = *(char **)(a2 + 8);
          uint64_t v90 = "constexpr requires integer or integer vector operands";
          goto LABEL_200;
        }
        uint64_t FCmp = (uint64_t)llvm::ConstantFoldBinaryInstruction(v49, (llvm::Constant *)__p.__r_.__value_.__l.__data_, (llvm::Constant *)v249.__r_.__value_.__l.__data_, v50);
        if (!FCmp)
        {
          BOOL v205 = *(void ***)v51;
          if (*(void *)v51)
          {
            v230[0] = v51;
            v230[1] = v53;
            uint64_t v206 = **v205 + 1512;
            LOWORD(__src) = v49;
LABEL_476:
            WORD1(__src) = 0;
            uint64_t v233 = (llvm::Type *)v230;
            uint64_t v234 = 2;
            long long v235 = 0u;
            long long v236 = 0u;
            *(void *)&long long v237 = 0;
            uint64_t FCmp = sub_1CC56C20C(v206, (uint64_t)v205, (unsigned __int8 *)&__src);
          }
          else
          {
LABEL_530:
            uint64_t FCmp = 0;
          }
        }
        goto LABEL_418;
      case 295:
      case 296:
        LODWORD(v229.__r_.__value_.__l.__data_) = 0;
        int v55 = *((_DWORD *)a1 + 64);
        __p.__r_.__value_.__r.__words[0] = 0;
        v249.__r_.__value_.__r.__words[0] = 0;
        *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 21));
        if (llvm::LLParser::parseCmpPredicate((llvm::LLParser *)a1, (unsigned int *)&v229, v55)) {
          goto LABEL_83;
        }
        if (llvm::LLParser::parseToken((uint64_t)a1, 12, "expected '(' in compare constantexpr"))
          goto LABEL_83;
        v230[0] = 0;
        __src = "expected type";
        WORD4(v235) = 259;
        if (llvm::LLParser::parseType((llvm::LLParser *)a1, v230, (const llvm::Twine *)&__src, 0)) {
          goto LABEL_83;
        }
        if (llvm::LLParser::parseGlobalValue((llvm::ConstantInt **)a1, v230[0], (llvm::Constant **)&__p)) {
          goto LABEL_83;
        }
        if (llvm::LLParser::parseToken((uint64_t)a1, 4, "expected comma in compare constantexpr")) {
          goto LABEL_83;
        }
        v230[0] = 0;
        __src = "expected type";
        WORD4(v235) = 259;
        if ((llvm::LLParser::parseType((llvm::LLParser *)a1, v230, (const llvm::Twine *)&__src, 0) & 1) != 0
          || (llvm::LLParser::parseGlobalValue((llvm::ConstantInt **)a1, v230[0], (llvm::Constant **)&v249) & 1) != 0
          || (llvm::LLParser::parseToken((uint64_t)a1, 13, "expected ')' in compare constantexpr") & 1) != 0)
        {
          goto LABEL_83;
        }
        uint64_t v57 = *(void *)__p.__r_.__value_.__l.__data_;
        if (*(void *)__p.__r_.__value_.__l.__data_ == *(void *)v249.__r_.__value_.__l.__data_)
        {
          unsigned int v58 = *(_DWORD *)(v57 + 8);
          int v59 = *(_DWORD *)(v57 + 8) & 0xFE;
          if (v55 == 54)
          {
            if (v59 == 18) {
              unsigned int v58 = *(unsigned __int8 *)(**(void **)(v57 + 16) + 8);
            }
            if (v58 < 7)
            {
              uint64_t FCmp = llvm::ConstantExpr::getFCmp((llvm::ConstantExpr *)LOWORD(v229.__r_.__value_.__l.__data_), (uint64_t ***)__p.__r_.__value_.__l.__data_, (llvm::Constant *)v249.__r_.__value_.__l.__data_, 0);
              goto LABEL_418;
            }
            BOOL v60 = *(char **)(a2 + 8);
            uint64_t v90 = "fcmp requires floating point operands";
          }
          else
          {
            if (v59 == 18) {
              unsigned int v58 = *(unsigned __int8 *)(**(void **)(v57 + 16) + 8);
            }
            if (v58 == 13 || v58 == 15)
            {
              uint64_t FCmp = (uint64_t)llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)LOWORD(v229.__r_.__value_.__l.__data_), (llvm::Type *)__p.__r_.__value_.__l.__data_, (llvm::Constant *)v249.__r_.__value_.__l.__data_, 0, v56);
              goto LABEL_418;
            }
            BOOL v60 = *(char **)(a2 + 8);
            uint64_t v90 = "icmp requires pointer or integer operands";
          }
        }
        else
        {
          BOOL v60 = *(char **)(a2 + 8);
          uint64_t v90 = "compare operands must have the same type";
        }
        goto LABEL_200;
      case 299:
      case 300:
      case 301:
      case 302:
      case 303:
      case 304:
      case 305:
      case 306:
      case 307:
      case 308:
      case 309:
      case 310:
      case 311:
        uint64_t v35 = (llvm::ConstantExpr *)*((unsigned int *)a1 + 64);
        v223[0] = 0;
        int v227 = 0;
        *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 21));
        if (llvm::LLParser::parseToken((uint64_t)a1, 12, "expected '(' after constantexpr cast"))
          goto LABEL_83;
        v230[0] = 0;
        __src = "expected type";
        WORD4(v235) = 259;
        if (llvm::LLParser::parseType((llvm::LLParser *)a1, v230, (const llvm::Twine *)&__src, 0)) {
          goto LABEL_83;
        }
        if (llvm::LLParser::parseGlobalValue((llvm::ConstantInt **)a1, v230[0], &v227)) {
          goto LABEL_83;
        }
        if (llvm::LLParser::parseToken((uint64_t)a1, 55, "expected 'to' in constantexpr cast")) {
          goto LABEL_83;
        }
        __src = "expected type";
        WORD4(v235) = 259;
        if ((llvm::LLParser::parseType((llvm::LLParser *)a1, v223, (const llvm::Twine *)&__src, 0) & 1) != 0
          || (llvm::LLParser::parseToken((uint64_t)a1, 13, "expected ')' at end of constantexpr cast") & 1) != 0)
        {
          goto LABEL_83;
        }
        uint64_t v36 = v227;
        unsigned int v37 = (llvm::Constant ***)v223[0];
        if (llvm::CastInst::castIsValid((int)v35, *(llvm::Type **)v227, (uint64_t)v223[0]))
        {
          uint64_t FCmp = (uint64_t)llvm::ConstantExpr::getCast(v35, v36, v37, 0);
LABEL_418:
          char v11 = 0;
          *(void *)(a2 + 128) = FCmp;
          *(_DWORD *)a2 = 12;
        }
        else
        {
          int v192 = *(char **)(a2 + 8);
          sub_1CC196EB4((uint64_t)&v228, *(llvm::Type **)v36);
          uint64_t v193 = std::string::insert(&v228, 0, "invalid cast opcode for cast from '");
          std::string::size_type v194 = v193->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v229.__r_.__value_.__l.__data_ = *(_OWORD *)&v193->__r_.__value_.__l.__data_;
          v229.__r_.__value_.__r.__words[2] = v194;
          v193->__r_.__value_.__l.__size_ = 0;
          v193->__r_.__value_.__r.__words[2] = 0;
          v193->__r_.__value_.__r.__words[0] = 0;
          unint64_t v195 = std::string::append(&v229, "' to '");
          std::string::size_type v196 = v195->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v249.__r_.__value_.__l.__data_ = *(_OWORD *)&v195->__r_.__value_.__l.__data_;
          v249.__r_.__value_.__r.__words[2] = v196;
          v195->__r_.__value_.__l.__size_ = 0;
          v195->__r_.__value_.__r.__words[2] = 0;
          v195->__r_.__value_.__r.__words[0] = 0;
          sub_1CC196EB4((uint64_t)&v226, (llvm::Type *)v37);
          if ((v226.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v197 = &v226;
          }
          else {
            int v197 = (std::string *)v226.__r_.__value_.__r.__words[0];
          }
          if ((v226.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = *((unsigned char *)&v226.__r_.__value_.__s + 23) & 0x7F;
          }
          else {
            std::string::size_type size = v226.__r_.__value_.__l.__size_;
          }
          unsigned int v199 = std::string::append(&v249, (const std::string::value_type *)v197, size);
          std::string::size_type v200 = v199->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v199->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v200;
          v199->__r_.__value_.__l.__size_ = 0;
          v199->__r_.__value_.__r.__words[2] = 0;
          v199->__r_.__value_.__r.__words[0] = 0;
          BOOL v201 = std::string::append(&__p, "'");
          std::string::size_type v202 = v201->__r_.__value_.__r.__words[2];
          *(_OWORD *)unsigned int v230 = *(_OWORD *)&v201->__r_.__value_.__l.__data_;
          v231[0] = v202;
          v201->__r_.__value_.__l.__size_ = 0;
          v201->__r_.__value_.__r.__words[2] = 0;
          v201->__r_.__value_.__r.__words[0] = 0;
          WORD4(v235) = 260;
          __src = v230;
          char v11 = llvm::LLLexer::Error((uint64_t)v6, v192, (llvm::Twine *)&__src);
          if (SHIBYTE(v231[0]) < 0) {
            operator delete(v230[0]);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v226.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v249.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v229.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v228.__r_.__value_.__l.__data_);
          }
        }
        return v11 & 1;
      case 312:
      case 338:
      case 339:
      case 340:
      case 341:
        int v45 = *((_DWORD *)a1 + 64);
        __src = &v234;
        uint64_t v233 = (llvm::Type *)0x1000000000;
        v249.__r_.__value_.__r.__words[0] = 0;
        int v46 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 21));
        *((_DWORD *)a1 + 56) = v46;
        if (v45 == 34)
        {
          char v11 = v46 == 88;
          if (v46 == 88) {
            *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken(v6);
          }
          if (llvm::LLParser::parseToken((uint64_t)a1, 12, "expected '(' in constantexpr")) {
            goto LABEL_106;
          }
          unint64_t v47 = (char *)a1[27];
          v230[0] = (llvm::Type *)"expected type";
          LOWORD(v231[2]) = 259;
          if ((llvm::LLParser::parseType((llvm::LLParser *)a1, (llvm::Type **)&v249, (const llvm::Twine *)v230, 0) & 1) != 0
            || (llvm::LLParser::parseToken((uint64_t)a1, 4, "expected comma after getelementptr's type") & 1) != 0)
          {
            goto LABEL_106;
          }
          int v48 = &v229;
        }
        else
        {
          if (llvm::LLParser::parseToken((uint64_t)a1, 12, "expected '(' in constantexpr"))
            goto LABEL_106;
          char v11 = 0;
          int v48 = 0;
          unint64_t v47 = (char *)a1[27];
        }
        v229.__r_.__value_.__s.__data_[0] = 0;
        v229.__r_.__value_.__s.__data_[4] = 0;
        if ((llvm::LLParser::parseGlobalValueVector((llvm::LLParser *)a1, (uint64_t)&__src, (uint64_t)v48) & 1) == 0
          && (llvm::LLParser::parseToken((uint64_t)a1, 13, "expected ')' in constantexpr") & 1) == 0)
        {
          switch(v45)
          {
            case '""':
              if (v233)
              {
                uint64_t v104 = **(void **)__src;
                if ((*(_DWORD *)(v104 + 8) & 0xFE) == 0x12)
                {
                  uint64_t v105 = **(void **)(v104 + 16);
                  if (*(unsigned char *)(v105 + 8) == 15)
                  {
                    uint64_t v106 = (unsigned __int8 *)v249.__r_.__value_.__r.__words[0];
                    uint64_t v107 = *(void *)(v105 + 24);
                    if (v107) {
                      BOOL v108 = v107 == v249.__r_.__value_.__r.__words[0];
                    }
                    else {
                      BOOL v108 = 1;
                    }
                    if (!v108)
                    {
                      uint64_t v104 = **(void **)(v104 + 16);
                      goto LABEL_412;
                    }
                    int v109 = *(_DWORD *)(v104 + 32);
LABEL_325:
                    uint64_t v143 = (char *)__src + 8;
                    unint64_t v144 = 8 * v233 - 8;
                    if (v233 != 1)
                    {
                      uint64_t v145 = 8 * v233 - 8;
                      unsigned int v146 = (uint64_t **)((char *)__src + 8);
                      do
                      {
                        uint64_t v147 = **v146;
                        if ((*(_DWORD *)(v147 + 8) & 0xFE) == 0x12)
                        {
                          if (*(unsigned char *)(**(void **)(v147 + 16) + 8) != 13) {
                            goto LABEL_414;
                          }
                          int v148 = *(_DWORD *)(v147 + 32);
                          if (v109)
                          {
                            BOOL v29 = v148 == v109;
                            int v109 = v148;
                            if (!v29)
                            {
                              unsigned int v187 = *(char **)(a2 + 8);
                              int v188 = "getelementptr vector index has a wrong number of elements";
                              goto LABEL_400;
                            }
                          }
                          else
                          {
                            int v109 = v148;
                          }
                        }
                        else if (*(_DWORD *)(v147 + 8) != 13)
                        {
LABEL_414:
                          unsigned int v187 = *(char **)(a2 + 8);
                          int v188 = "getelementptr index must be an integer";
                          goto LABEL_400;
                        }
                        ++v146;
                        v145 -= 8;
                      }
                      while (v145);
                    }
                    v230[0] = (llvm::Type *)&v231[2];
                    v230[1] = (llvm::Type *)&v231[2];
                    v231[0] = 4;
                    LODWORD(v231[1]) = 0;
                    if (8 * v233 == 8) {
                      goto LABEL_341;
                    }
                    unsigned int v149 = v106[8];
                    if (v149 <= 0x11)
                    {
                      if (((1 << v149) & 0xAC7F) != 0) {
                        goto LABEL_341;
                      }
                      if (((1 << v149) & 0x30000) != 0) {
                        goto LABEL_340;
                      }
                    }
                    if ((v149 & 0xFE) == 0x12 || v149 == 21)
                    {
LABEL_340:
                      if (llvm::Type::isSizedDerivedType((uint64_t)v106, (uint64_t)v230))
                      {
LABEL_341:
                        uint64_t v150 = v144 >> 3;
                        if (llvm::GetElementPtrInst::getIndexedType((uint64_t)v106, (uint64_t)v143, v150))
                        {
                          if (!v229.__r_.__value_.__s.__data_[4])
                          {
LABEL_345:
                            *(void *)(a2 + 128) = llvm::ConstantExpr::getGetElementPtr((uint64_t)v106, *(uint64_t **)__src, (uint64_t)v143, v150, v11, (uint64_t)v229.__r_.__value_.__l.__data_, 0);
                            char v151 = 1;
                            goto LABEL_346;
                          }
                          if (LODWORD(v229.__r_.__value_.__l.__data_))
                          {
                            --LODWORD(v229.__r_.__value_.__l.__data_);
                            goto LABEL_345;
                          }
                          uint64_t v183 = *(char **)(a2 + 8);
                          uint64_t v184 = "inrange keyword may not appear on pointer operand";
                        }
                        else
                        {
                          uint64_t v183 = *(char **)(a2 + 8);
                          uint64_t v184 = "invalid getelementptr indices";
                        }
LABEL_411:
                        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v184;
                        WORD4(v264) = 259;
                        char v11 = llvm::LLLexer::Error((uint64_t)v6, v183, (llvm::Twine *)&__p);
                        char v151 = 0;
LABEL_346:
                        if (v230[1] != v230[0]) {
                          free(v230[1]);
                        }
                        if ((v151 & 1) == 0)
                        {
LABEL_107:
                          size_t v14 = (llvm::Type *)__src;
                          if (__src == &v234) {
                            return v11 & 1;
                          }
LABEL_108:
                          free(v14);
                          return v11 & 1;
                        }
LABEL_374:
                        char v11 = 0;
                        *(_DWORD *)a2 = 12;
                        goto LABEL_107;
                      }
                    }
                    uint64_t v183 = *(char **)(a2 + 8);
                    uint64_t v184 = "base element of getelementptr must be sized";
                    goto LABEL_411;
                  }
                }
                else if (*(_DWORD *)(v104 + 8) == 15)
                {
                  uint64_t v106 = (unsigned __int8 *)v249.__r_.__value_.__r.__words[0];
                  uint64_t v141 = *(void *)(v104 + 24);
                  if (v141) {
                    BOOL v142 = v141 == v249.__r_.__value_.__r.__words[0];
                  }
                  else {
                    BOOL v142 = 1;
                  }
                  if (!v142)
                  {
LABEL_412:
                    sub_1CC196358((uint64_t)&__p, (llvm::Type *)v106, **(llvm::Type ***)(v104 + 16));
                    LOWORD(v231[2]) = 260;
                    v230[0] = (llvm::Type *)&__p;
                    char v11 = llvm::LLLexer::Error((uint64_t)v6, v47, (llvm::Twine *)v230);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__p.__r_.__value_.__l.__data_);
                    }
                    goto LABEL_107;
                  }
                  int v109 = 0;
                  goto LABEL_325;
                }
              }
              unsigned int v187 = *(char **)(a2 + 8);
              int v188 = "base of getelementptr must be a pointer";
              break;
            case '?':
              if (v233 == 3)
              {
                if (llvm::ShuffleVectorInst::isValidOperands(*(llvm::ShuffleVectorInst **)__src, *((const llvm::Value **)__src + 1), *((const llvm::Value **)__src + 2), v102))
                {
                  v230[0] = (llvm::Type *)v231;
                  v230[1] = (llvm::Type *)0x1000000000;
                  llvm::ShuffleVectorInst::getShuffleMask(*((llvm::Constant **)__src + 2), (uint64_t)v230);
                  *(void *)(a2 + 128) = llvm::ConstantExpr::getShuffleVector(*(llvm **)__src, *((llvm **)__src + 1), (int *)v230[0], (llvm::Type *)LODWORD(v230[1]), 0);
                  if ((void *)v230[0] != v231) {
                    free(v230[0]);
                  }
                  goto LABEL_374;
                }
                unsigned int v187 = *(char **)(a2 + 8);
                int v188 = "invalid operands to shufflevector";
              }
              else
              {
                unsigned int v187 = *(char **)(a2 + 8);
                int v188 = "expected three operands to shufflevector";
              }
              break;
            case '=':
              if (v233 == 2)
              {
                uint64_t v161 = *(uint64_t **)__src;
                if ((*(_DWORD *)(**(void **)__src + 8) & 0xFE) == 0x12)
                {
                  std::string::size_type v162 = *((void *)__src + 1);
                  if (*(unsigned char *)(*(void *)v162 + 8) == 13)
                  {
                    uint64_t ElementInstruction = (uint64_t)llvm::ConstantFoldExtractElementInstruction(*(llvm **)__src, *((llvm::Constant **)__src + 1), v101);
                    if (!ElementInstruction)
                    {
                      uint64_t v163 = (void **)*v161;
                      uint64_t v164 = *(void *)(*v161 + 24);
                      if (v164)
                      {
                        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v161;
                        __p.__r_.__value_.__l.__size_ = v162;
                        uint64_t v165 = **v163 + 1512;
                        LODWORD(v230[0]) = 61;
                        v230[1] = (llvm::Type *)&__p;
                        v231[0] = 2;
                        memset(&v231[1], 0, 40);
                        uint64_t ElementInstruction = sub_1CC56C20C(v165, v164, (unsigned __int8 *)v230);
                      }
                      else
                      {
                        uint64_t ElementInstruction = 0;
                      }
                    }
                    goto LABEL_373;
                  }
                }
                unsigned int v187 = *(char **)(a2 + 8);
                int v188 = "invalid extractelement operands";
              }
              else
              {
                unsigned int v187 = *(char **)(a2 + 8);
                int v188 = "expected two operands to extractelement";
              }
              break;
            case '9':
              if (v233 == 3)
              {
                int v138 = (llvm::Type *)llvm::SelectInst::areInvalidOperands(*(uint64_t **)__src, *((uint64_t **)__src + 1), *((void **)__src + 2));
                if (!v138)
                {
                  uint64_t ElementInstruction = (uint64_t)llvm::ConstantExpr::getSelect(*(llvm::ConstantExpr **)__src, *((llvm::PoisonValue ***)__src + 1), *((llvm::Constant **)__src + 2), 0, v139);
LABEL_373:
                  *(void *)(a2 + 128) = ElementInstruction;
                  goto LABEL_374;
                }
                unsigned int v187 = *(char **)(a2 + 8);
                char v186 = 1;
                BYTE1(v231[2]) = 1;
                if (*(unsigned char *)v138)
                {
                  v230[0] = v138;
                  char v186 = 3;
                }
                LOBYTE(v231[2]) = v186;
LABEL_401:
                char v11 = llvm::LLLexer::Error((uint64_t)v6, v187, (llvm::Twine *)v230);
                goto LABEL_107;
              }
              unsigned int v187 = *(char **)(a2 + 8);
              int v188 = "expected three operands to select";
              break;
            default:
              if (v233 == 3)
              {
                uint64_t v166 = **(void **)__src;
                if ((*(_DWORD *)(v166 + 8) & 0xFE) == 0x12)
                {
                  uint64_t v167 = (llvm::Constant *)*((void *)__src + 1);
                  if (*(void *)v167 == *(void *)(v166 + 24))
                  {
                    int v168 = (llvm::Constant *)*((void *)__src + 2);
                    if (*(unsigned char *)(*(void *)v168 + 8) == 13)
                    {
                      uint64_t ElementInstruction = (uint64_t)llvm::ConstantExpr::getInsertElement(*(llvm::ConstantExpr **)__src, v167, v168, 0, v103);
                      goto LABEL_373;
                    }
                  }
                }
                unsigned int v187 = *(char **)(a2 + 8);
                int v188 = "invalid insertelement operands";
              }
              else
              {
                unsigned int v187 = *(char **)(a2 + 8);
                int v188 = "expected three operands to insertelement";
              }
              break;
          }
LABEL_400:
          v230[0] = (llvm::Type *)v188;
          LOWORD(v231[2]) = 259;
          goto LABEL_401;
        }
LABEL_106:
        char v11 = 1;
        goto LABEL_107;
      case 342:
        *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 21));
        v249.__r_.__value_.__r.__words[0] = 0;
        BOOL v43 = v231;
        v230[0] = (llvm::Type *)v231;
        v230[1] = (llvm::Type *)0x400000000;
        if (llvm::LLParser::parseToken((uint64_t)a1, 12, "expected '(' in extractvalue constantexpr"))
          goto LABEL_168;
        __p.__r_.__value_.__r.__words[0] = 0;
        __src = "expected type";
        WORD4(v235) = 259;
        if ((llvm::LLParser::parseType((llvm::LLParser *)a1, (llvm::Type **)&__p, (const llvm::Twine *)&__src, 0) & 1) != 0
          || (llvm::LLParser::parseGlobalValue((llvm::ConstantInt **)a1, (llvm::Type *)__p.__r_.__value_.__l.__data_, (llvm::Constant **)&v249) & 1) != 0|| (sub_1CD4E3398((uint64_t)a1, (uint64_t)v230) & 1) != 0|| (llvm::LLParser::parseToken((uint64_t)a1, 13, "expected ')' in extractvalue constantexpr") & 1) != 0)
        {
          goto LABEL_168;
        }
        uint64_t v117 = *(void *)v249.__r_.__value_.__l.__data_;
        if ((*(_DWORD *)(*(void *)v249.__r_.__value_.__l.__data_ + 8) & 0xFE) == 0x10)
        {
          if (!LODWORD(v230[1])) {
            goto LABEL_435;
          }
          uint64_t v118 = 4 * LODWORD(v230[1]);
          int8x8_t v119 = v230[0];
          do
          {
            unint64_t v120 = *(unsigned int *)v119;
            int v121 = *(unsigned __int8 *)(v117 + 8);
            if (v117 && v121 == 17)
            {
              if (*(void *)(v117 + 32) <= v120) {
                goto LABEL_461;
              }
              long long v122 = (uint64_t *)(v117 + 24);
            }
            else
            {
              if (!v117 || v121 != 16 || v120 >= *(_DWORD *)(v117 + 12)) {
                goto LABEL_461;
              }
              long long v122 = (uint64_t *)(*(void *)(v117 + 16) + 8 * v120);
            }
            uint64_t v117 = *v122;
            int8x8_t v119 = (llvm::Type *)((char *)v119 + 4);
            v118 -= 4;
          }
          while (v118);
          if (v117)
          {
LABEL_435:
            Value = llvm::ConstantExpr::getExtractValue((llvm::Constant *)v249.__r_.__value_.__l.__data_, (unsigned int *)v230[0], LODWORD(v230[1]), 0);
            goto LABEL_436;
          }
LABEL_461:
          unsigned int v190 = *(char **)(a2 + 8);
          uint64_t v191 = "invalid indices for extractvalue";
        }
        else
        {
          unsigned int v190 = *(char **)(a2 + 8);
          uint64_t v191 = "extractvalue operand must be aggregate type";
        }
        goto LABEL_462;
      case 343:
        *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 21));
        int v227 = 0;
        unint64_t v225 = 0;
        BOOL v43 = v231;
        v230[0] = (llvm::Type *)v231;
        v230[1] = (llvm::Type *)0x400000000;
        if ((llvm::LLParser::parseToken((uint64_t)a1, 12, "expected '(' in insertvalue constantexpr") & 1) != 0
          || (__p.__r_.__value_.__r.__words[0] = 0,
              __src = "expected type",
              WORD4(v235) = 259,
              (llvm::LLParser::parseType((llvm::LLParser *)a1, (llvm::Type **)&__p, (const llvm::Twine *)&__src, 0) & 1) != 0)
          || (llvm::LLParser::parseGlobalValue((llvm::ConstantInt **)a1, (llvm::Type *)__p.__r_.__value_.__l.__data_, &v227) & 1) != 0|| (llvm::LLParser::parseToken((uint64_t)a1, 4, "expected comma in insertvalue constantexpr") & 1) != 0|| (__p.__r_.__value_.__r.__words[0] = 0, __src = "expected type", WORD4(v235) = 259, (llvm::LLParser::parseType((llvm::LLParser *)a1, (llvm::Type **)&__p, (const llvm::Twine *)&__src, 0) & 1) != 0)|| (llvm::LLParser::parseGlobalValue((llvm::ConstantInt **)a1, (llvm::Type *)__p.__r_.__value_.__l.__data_, &v225) & 1) != 0|| (sub_1CD4E3398((uint64_t)a1, (uint64_t)v230) & 1) != 0|| (llvm::LLParser::parseToken((uint64_t)a1, 13, "expected ')' in insertvalue constantexpr") & 1) != 0)
        {
LABEL_168:
          char v11 = 1;
          goto LABEL_169;
        }
        uint64_t v70 = *(llvm::Type **)v227;
        if ((*(_DWORD *)(*(void *)v227 + 8) & 0xFE) != 0x10)
        {
          unsigned int v190 = *(char **)(a2 + 8);
          uint64_t v191 = "insertvalue operand must be aggregate type";
          goto LABEL_462;
        }
        if (!LODWORD(v230[1])) {
          goto LABEL_499;
        }
        uint64_t v71 = 4 * LODWORD(v230[1]);
        uint64_t v72 = v230[0];
        do
        {
          unint64_t v73 = *(unsigned int *)v72;
          int v74 = *((unsigned __int8 *)v70 + 8);
          if (v70 && v74 == 17)
          {
            if (*((void *)v70 + 4) <= v73) {
              goto LABEL_522;
            }
            unint64_t v75 = (llvm::Type **)((char *)v70 + 24);
          }
          else
          {
            if (!v70 || v74 != 16 || v73 >= *((_DWORD *)v70 + 3)) {
              goto LABEL_522;
            }
            unint64_t v75 = (llvm::Type **)(*((void *)v70 + 2) + 8 * v73);
          }
          uint64_t v70 = *v75;
          uint64_t v72 = (llvm::Type *)((char *)v72 + 4);
          v71 -= 4;
        }
        while (v71);
        if (v70)
        {
LABEL_499:
          if (v70 == *(llvm::Type **)v225)
          {
            Value = llvm::ConstantExpr::getInsertValue(v227, (uint64_t *)v225, (_DWORD *)v230[0], LODWORD(v230[1]), 0);
LABEL_436:
            char v11 = 0;
            *(void *)(a2 + 128) = Value;
            *(_DWORD *)a2 = 12;
          }
          else
          {
            uint64_t v209 = *(char **)(a2 + 8);
            sub_1CC196EB4((uint64_t)&v226, *(llvm::Type **)v225);
            unint64_t v210 = std::string::insert(&v226, 0, "insertvalue operand and field disagree in type: '");
            std::string::size_type v211 = v210->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v228.__r_.__value_.__l.__data_ = *(_OWORD *)&v210->__r_.__value_.__l.__data_;
            v228.__r_.__value_.__r.__words[2] = v211;
            v210->__r_.__value_.__l.__size_ = 0;
            v210->__r_.__value_.__r.__words[2] = 0;
            v210->__r_.__value_.__r.__words[0] = 0;
            uint64_t v212 = std::string::append(&v228, "' instead of '");
            std::string::size_type v213 = v212->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v229.__r_.__value_.__l.__data_ = *(_OWORD *)&v212->__r_.__value_.__l.__data_;
            v229.__r_.__value_.__r.__words[2] = v213;
            v212->__r_.__value_.__l.__size_ = 0;
            v212->__r_.__value_.__r.__words[2] = 0;
            v212->__r_.__value_.__r.__words[0] = 0;
            sub_1CC196EB4((uint64_t)v223, v70);
            if (v224 >= 0) {
              uint64_t v214 = v223;
            }
            else {
              uint64_t v214 = (llvm::Type **)v223[0];
            }
            if (v224 >= 0) {
              std::string::size_type v215 = v224 & 0x7F;
            }
            else {
              std::string::size_type v215 = (std::string::size_type)v223[1];
            }
            uint64_t v216 = std::string::append(&v229, (const std::string::value_type *)v214, v215);
            std::string::size_type v217 = v216->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v249.__r_.__value_.__l.__data_ = *(_OWORD *)&v216->__r_.__value_.__l.__data_;
            v249.__r_.__value_.__r.__words[2] = v217;
            v216->__r_.__value_.__l.__size_ = 0;
            v216->__r_.__value_.__r.__words[2] = 0;
            v216->__r_.__value_.__r.__words[0] = 0;
            uint64_t v218 = std::string::append(&v249, "'");
            std::string::size_type v219 = v218->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v218->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v219;
            v218->__r_.__value_.__l.__size_ = 0;
            v218->__r_.__value_.__r.__words[2] = 0;
            v218->__r_.__value_.__r.__words[0] = 0;
            WORD4(v235) = 260;
            __src = &__p;
            char v11 = llvm::LLLexer::Error((uint64_t)v6, v209, (llvm::Twine *)&__src);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v249.__r_.__value_.__l.__data_);
            }
            if (v224 < 0) {
              operator delete(v223[0]);
            }
            if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v229.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v228.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v226.__r_.__value_.__l.__data_);
            }
          }
          goto LABEL_169;
        }
LABEL_522:
        unsigned int v190 = *(char **)(a2 + 8);
        uint64_t v191 = "invalid indices for insertvalue";
LABEL_462:
        __src = v191;
        WORD4(v235) = 259;
        char v11 = llvm::LLLexer::Error((uint64_t)v6, v190, (llvm::Twine *)&__src);
LABEL_169:
        size_t v14 = v230[0];
        goto LABEL_79;
      case 344:
        *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 21));
        LODWORD(__p.__r_.__value_.__l.__data_) = 0;
        long long v264 = 0u;
        long long v265 = 0u;
        long long v266 = 0u;
        uint64_t v268 = 0;
        __p.__r_.__value_.__l.__size_ = 0;
        uint64_t v267 = 0;
        char v11 = 1;
        int v269 = 1;
        char v270 = 0;
        LODWORD(v230[1]) = 64;
        v230[0] = 0;
        llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&__src, v230);
        unint64_t v271 = __src;
        uint64_t v272 = v233;
        int v273 = v234;
        char v274 = v274 & 0xF0 | BYTE4(v234) & 0xF;
        uint64_t v275 = 0;
        char v276 = 0;
        LODWORD(v249.__r_.__value_.__l.__data_) = 0;
        long long v250 = 0u;
        long long v251 = 0u;
        long long v252 = 0u;
        uint64_t v254 = 0;
        v249.__r_.__value_.__l.__size_ = 0;
        uint64_t v253 = 0;
        int v255 = 1;
        char v256 = 0;
        LODWORD(v230[1]) = 64;
        v230[0] = 0;
        llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&__src, v230);
        uint64_t v257 = __src;
        uint64_t v258 = v233;
        int v259 = v234;
        char v260 = v260 & 0xF0 | BYTE4(v234) & 0xF;
        uint64_t v261 = 0;
        char v262 = 0;
        if ((llvm::LLParser::parseToken((uint64_t)a1, 12, "expected '(' in block address expression") & 1) != 0
          || (llvm::LLParser::parseValID(a1, &__p, a3, 0) & 1) != 0
          || (llvm::LLParser::parseToken((uint64_t)a1, 4, "expected comma in block address expression") & 1) != 0
          || (llvm::LLParser::parseValID(a1, &v249, a3, 0) & 1) != 0
          || (llvm::LLParser::parseToken((uint64_t)a1, 13, "expected ')' in block address expression") & 1) != 0)
        {
          goto LABEL_313;
        }
        if (((uint64_t)__p.__r_.__value_.__l.__data_ & 0xFFFFFFFD) != 1) {
          goto LABEL_311;
        }
        if (((uint64_t)v249.__r_.__value_.__l.__data_ & 0xFFFFFFFD) != 0)
        {
          int v126 = (char *)v249.__r_.__value_.__l.__size_;
          char v127 = "expected basic block name in blockaddress";
LABEL_312:
          __src = v127;
          WORD4(v235) = 259;
          char v11 = llvm::LLLexer::Error((uint64_t)v6, v126, (llvm::Twine *)&__src);
LABEL_313:
          sub_1CD4F271C((uint64_t)&v249);
          p_p = &__p;
LABEL_314:
          sub_1CD4F271C((uint64_t)p_p);
          return v11 & 1;
        }
        if (LODWORD(__p.__r_.__value_.__l.__data_) == 1)
        {
          int v63 = a1[129];
          if (LODWORD(__p.__r_.__value_.__r.__words[2]) < (unint64_t)(a1[130] - v63))
          {
            uint64_t NamedValue = v63[LODWORD(__p.__r_.__value_.__r.__words[2])];
            goto LABEL_286;
          }
        }
        else if (!sub_1CD4F49C0(a1[124], (void *)&v264 + 1))
        {
          if (v265 >= 0) {
            __int16 v128 = (unsigned __int8 *)&v264 + 8;
          }
          else {
            __int16 v128 = (unsigned __int8 *)*((void *)&v264 + 1);
          }
          if (v265 >= 0) {
            unint64_t v129 = HIBYTE(v265) & 0x7F;
          }
          else {
            unint64_t v129 = v265;
          }
          uint64_t NamedValue = llvm::Module::getNamedValue((uint64_t)a1[41], v128, v129);
LABEL_286:
          if (!NamedValue) {
            goto LABEL_287;
          }
          if (*(unsigned char *)(NamedValue + 16))
          {
LABEL_311:
            int v126 = (char *)__p.__r_.__value_.__l.__size_;
            char v127 = "expected function name in blockaddress";
            goto LABEL_312;
          }
          if (*(void *)(NamedValue + 72) == NamedValue + 72 && (*(unsigned char *)(NamedValue + 34) & 0x80) == 0)
          {
            int v126 = (char *)__p.__r_.__value_.__l.__size_;
            char v127 = "cannot take blockaddress inside a declaration";
            goto LABEL_312;
          }
          uint64_t v152 = (uint64_t)a1[138];
          if (v152)
          {
            int data = (int)v249.__r_.__value_.__l.__data_;
            if (NamedValue == *(void *)(v152 + 8))
            {
              if (LODWORD(v249.__r_.__value_.__l.__data_)) {
                BB = llvm::LLParser::PerFunctionState::getBB(v152, (uint64_t *)&v250 + 1, (char *)v249.__r_.__value_.__l.__size_);
              }
              else {
                BB = llvm::LLParser::PerFunctionState::getBB(v152, v249.__r_.__value_.__r.__words[2], (char *)v249.__r_.__value_.__l.__size_);
              }
              uint64_t v185 = BB;
              if (BB) {
                goto LABEL_441;
              }
              goto LABEL_405;
            }
          }
          else
          {
            int data = (int)v249.__r_.__value_.__l.__data_;
          }
          if (!data)
          {
            int v126 = (char *)v249.__r_.__value_.__l.__size_;
            char v127 = "cannot take address of numeric label after the function is defined";
            goto LABEL_312;
          }
          int v170 = *(uint64_t **)(NamedValue + 104);
          int v171 = (unsigned __int8 *)*((void *)&v250 + 1);
          if (v251 >= 0) {
            int v171 = (unsigned __int8 *)&v250 + 8;
          }
          unsigned int v221 = v171;
          uint64_t v222 = *(void *)(NamedValue + 104);
          if (v251 >= 0) {
            size_t v172 = HIBYTE(v251) & 0x7F;
          }
          else {
            size_t v172 = v251;
          }
          unint64_t v173 = *((unsigned int *)v170 + 8);
          if ((v173 & 0x80000000) == 0 && v172 > v173)
          {
            unint64_t v173 = v173 <= 1 ? 1 : v173;
            if (v172 >= v173) {
              size_t v172 = v173;
            }
          }
          uint64_t v220 = *((unsigned int *)v170 + 2);
          if (v220)
          {
            int v174 = 0;
            if (v172)
            {
              size_t v175 = v172;
              do
              {
                int v176 = *v171++;
                int v174 = 33 * v174 + v176;
                --v175;
              }
              while (v175);
            }
            uint64_t v177 = *v170;
            uint64_t v178 = *v170 + 8 * v220 + 8;
            int v179 = 1;
            int v180 = v174;
            while (1)
            {
              uint64_t v181 = v180 & (v220 - 1);
              int v182 = *(void **)(v177 + 8 * v181);
              if (v182 != (void *)-8)
              {
                if (!v182) {
                  goto LABEL_405;
                }
                if (*(_DWORD *)(v178 + 4 * v181) == v174
                  && v172 == *v182
                  && (!v172 || !memcmp(v221, (char *)v182 + *(unsigned int *)(v222 + 20), v172)))
                {
                  break;
                }
              }
              int v180 = v179 + v181;
              ++v179;
            }
            if (v181 != -1 && (int)v181 != v220)
            {
              uint64_t v185 = *(llvm::Type ***)(*(void *)(v177 + 8 * (int)v181) + 8);
              if (v185)
              {
                if (*((unsigned char *)v185 + 16) == 22)
                {
LABEL_441:
                  uint64_t v132 = llvm::BlockAddress::get((llvm::BlockAddress *)NamedValue, (llvm::Function *)v185, v62);
                  goto LABEL_298;
                }
              }
            }
          }
LABEL_405:
          int v126 = (char *)v249.__r_.__value_.__l.__size_;
          char v127 = "referenced value is not a basic block";
          goto LABEL_312;
        }
LABEL_287:
        *(_OWORD *)&v229.__r_.__value_.__r.__words[1] = 0uLL;
        v229.__r_.__value_.__r.__words[0] = (std::string::size_type)&v229.__r_.__value_.__l.__size_;
        sub_1CD4F27B0((uint64_t)&__src, (uint64_t)&__p);
        std::string v248 = v229;
        if (v229.__r_.__value_.__r.__words[2])
        {
          *(void *)(v229.__r_.__value_.__l.__size_ + 16) = &v248.__r_.__value_.__l.__size_;
          v229.__r_.__value_.__r.__words[0] = (std::string::size_type)&v229.__r_.__value_.__l.__size_;
          *(_OWORD *)&v229.__r_.__value_.__r.__words[1] = 0uLL;
        }
        else
        {
          v248.__r_.__value_.__r.__words[0] = (std::string::size_type)&v248.__r_.__value_.__l.__size_;
        }
        int v130 = sub_1CD4F4AD4((uint64_t)(a1 + 135), &__src, &__src) + 23;
        sub_1CD4F27B0((uint64_t)v230, (uint64_t)&v249);
        v231[17] = 0;
        char v131 = sub_1CD4F4D08((uint64_t)v130, v230, (uint64_t)v230);
        sub_1CD4F271C((uint64_t)v230);
        sub_1CD4F4A78((uint64_t)&v248, (void *)v248.__r_.__value_.__l.__size_);
        sub_1CD4F271C((uint64_t)&__src);
        sub_1CD4F4A78((uint64_t)&v229, (void *)v229.__r_.__value_.__l.__size_);
        uint64_t v132 = (void *)v131[23];
        if (v132) {
          goto LABEL_298;
        }
        if (!a4)
        {
          uint64_t v133 = (_DWORD *)((char *)a3 + 8);
          goto LABEL_296;
        }
        unsigned int v134 = *((_DWORD *)a4 + 2);
        if (v134 == 15)
        {
          if ((v134 & 0xFE) != 0x12) {
            goto LABEL_297;
          }
          uint64_t v133 = (_DWORD *)((char *)a4 + 16);
LABEL_296:
          unsigned int v134 = *(_DWORD *)(**(void **)v133 + 8);
LABEL_297:
          uint64_t v135 = (char *)operator new(0x78uLL);
          *((_DWORD *)v135 + 13) = *((_DWORD *)v135 + 13) & 0x38000000 | 1;
          *(void *)uint64_t v135 = 0;
          *((void *)v135 + 1) = 0;
          *((void *)v135 + 2) = 0;
          *((void *)v135 + 3) = v135 + 32;
          uint64_t v136 = (uint64_t)a1[41];
          uint64_t v137 = (llvm::PointerType *)(**a1 + 1912);
          WORD4(v235) = 257;
          uint64_t v132 = llvm::GlobalVariable::GlobalVariable((unint64_t *)v135 + 4, v136, v137, 0, 7, 0, (const char **)&__src, 0, 0, (llvm::Type *)((v134 >> 8) | 0x100000000), 0);
          v131[23] = (uint64_t)v132;
LABEL_298:
          char v11 = 0;
          *(void *)(a2 + 128) = v132;
          *(_DWORD *)a2 = 12;
          goto LABEL_313;
        }
        unsigned int v154 = *(char **)(a2 + 8);
        sub_1CC196EB4((uint64_t)&v228, a4);
        unsigned int v155 = std::string::insert(&v228, 0, "type of blockaddress must be a pointer and not '");
        std::string::size_type v156 = v155->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v229.__r_.__value_.__l.__data_ = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
        v229.__r_.__value_.__r.__words[2] = v156;
        v155->__r_.__value_.__l.__size_ = 0;
        v155->__r_.__value_.__r.__words[2] = 0;
        v155->__r_.__value_.__r.__words[0] = 0;
        uint64_t v157 = std::string::append(&v229, "'");
        std::string::size_type v158 = v157->__r_.__value_.__r.__words[2];
        *(_OWORD *)unsigned int v230 = *(_OWORD *)&v157->__r_.__value_.__l.__data_;
        v231[0] = v158;
        v157->__r_.__value_.__l.__size_ = 0;
        v157->__r_.__value_.__r.__words[2] = 0;
        v157->__r_.__value_.__r.__words[0] = 0;
        WORD4(v235) = 260;
        __src = v230;
        char v11 = llvm::LLLexer::Error((uint64_t)v6, v154, (llvm::Twine *)&__src);
        if (SHIBYTE(v231[0]) < 0) {
          operator delete(v230[0]);
        }
        if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v229.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v228.__r_.__value_.__l.__data_);
        }
        goto LABEL_313;
      case 345:
        *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 21));
        LODWORD(__src) = 0;
        long long v235 = 0u;
        long long v236 = 0u;
        long long v237 = 0u;
        uint64_t v238 = 0;
        uint64_t v239 = 0;
        uint64_t v233 = 0;
        char v11 = 1;
        int v240 = 1;
        char v241 = 0;
        LODWORD(__p.__r_.__value_.__r.__words[1]) = 64;
        __p.__r_.__value_.__r.__words[0] = 0;
        llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)v230, (const llvm::APInt **)&__p);
        int v242 = v230[0];
        int v243 = v230[1];
        int v244 = v231[0];
        char v245 = BYTE4(v231[0]) & 0xF;
        uint64_t v246 = 0;
        char v247 = 0;
        if (llvm::LLParser::parseValID(a1, &__src, a3, 0)) {
          goto LABEL_242;
        }
        if ((__src & 0xFFFFFFFD) == 1)
        {
          if (__src == 1)
          {
            unint64_t v69 = (llvm::DSOLocalEquivalent *)a1[129][v234];
          }
          else
          {
            sub_1CD4F49C0(a1[124], (void *)&v235 + 1);
            if (v236 >= 0) {
              int8x8_t v110 = (unsigned __int8 *)&v235 + 8;
            }
            else {
              int8x8_t v110 = (unsigned __int8 *)*((void *)&v235 + 1);
            }
            if (v236 >= 0) {
              unint64_t v111 = HIBYTE(v236) & 0x7F;
            }
            else {
              unint64_t v111 = v236;
            }
            unint64_t v69 = (llvm::DSOLocalEquivalent *)llvm::Module::getNamedValue((uint64_t)a1[41], v110, v111);
          }
          if (*(unsigned char *)(*((void *)v69 + 3) + 8) == 14)
          {
            char v11 = 0;
            *(void *)(a2 + 128) = llvm::DSOLocalEquivalent::get(v69, v68);
            *(_DWORD *)a2 = 12;
            goto LABEL_242;
          }
          int v88 = (char *)v233;
          int v89 = "expected a function, alias to function, or ifunc in dso_local_equivalent";
        }
        else
        {
          int v88 = (char *)v233;
          int v89 = "expected global value name in dso_local_equivalent";
        }
        v230[0] = (llvm::Type *)v89;
        LOWORD(v231[2]) = 259;
        char v11 = llvm::LLLexer::Error((uint64_t)v6, v88, (llvm::Twine *)v230);
LABEL_242:
        p_p = (std::string *)&__src;
        goto LABEL_314;
      case 346:
        *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 21));
        if (llvm::LLParser::parseValID(a1, a2, a3, 0))
        {
LABEL_83:
          char v11 = 1;
          return v11 & 1;
        }
        if ((*(_DWORD *)a2 | 2) == 3)
        {
          char v11 = 0;
          *(unsigned char *)(a2 + 144) = 1;
          return v11 & 1;
        }
        BOOL v60 = *(char **)(a2 + 8);
        uint64_t v90 = "expected global value name in no_cfi";
LABEL_200:
        __src = v90;
        WORD4(v235) = 259;
        goto LABEL_124;
      default:
        goto LABEL_123;
    }
  }
  if (v7 > 49)
  {
    int v9 = v7 - 50;
    int v8 = 6;
    switch(v9)
    {
      case 0:
        int v8 = 8;
        goto LABEL_71;
      case 1:
        int v8 = 7;
        goto LABEL_71;
      case 2:
        int v8 = 10;
        goto LABEL_71;
      case 3:
        goto LABEL_71;
      case 4:
        int v8 = 9;
        goto LABEL_71;
      default:
        goto LABEL_123;
    }
  }
  if (v7 > 18)
  {
    if (v7 == 19)
    {
      uint64_t v41 = **a1;
      unint64_t v16 = *(void **)(v41 + 1560);
      if (!v16)
      {
        uint64_t v113 = *(llvm::ConstantInt **)(v41 + 1888);
        unsigned int v114 = *(_DWORD *)(v41 + 1896);
        LODWORD(v233) = v114 >> 8;
        if (v114 >> 8 > 0x40) {
          operator new[]();
        }
        if (v114 <= 0xFF) {
          LOBYTE(v115) = 0;
        }
        else {
          unint64_t v115 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v114) + 63);
        }
        __src = (void *)(v115 & 1);
        unint64_t v16 = llvm::ConstantInt::get(v113, (llvm::LLVMContext *)&__src, a3);
        if (v233 >= 0x41 && __src) {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
        *(void *)(v41 + 1560) = v16;
      }
    }
    else
    {
      if (v7 != 20)
      {
LABEL_123:
        __src = "expected value token";
        WORD4(v235) = 259;
        BOOL v60 = (char *)a1[27];
LABEL_124:
        char v11 = llvm::LLLexer::Error((uint64_t)v6, v60, (llvm::Twine *)&__src);
        return v11 & 1;
      }
      uint64_t v15 = **a1;
      unint64_t v16 = *(void **)(v15 + 1568);
      if (!v16)
      {
        unsigned int v17 = *(llvm::ConstantInt **)(v15 + 1888);
        unsigned int v18 = *(_DWORD *)(v15 + 1896);
        LODWORD(v233) = v18 >> 8;
        if (v18 >> 8 > 0x40) {
          operator new[]();
        }
        __src = 0;
        unint64_t v16 = llvm::ConstantInt::get(v17, (llvm::LLVMContext *)&__src, a3);
        if (v233 >= 0x41 && __src) {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
        *(void *)(v15 + 1568) = v16;
      }
    }
    *(void *)(a2 + 128) = v16;
    int v8 = 12;
LABEL_71:
    *(_DWORD *)a2 = v8;
    char v11 = 0;
    *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken(v6);
    return v11 & 1;
  }
  if (v7 != 6)
  {
    if (v7 != 8)
    {
      if (v7 == 10)
      {
        int v12 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 21));
        *((_DWORD *)a1 + 56) = v12;
        if (v12 == 8) {
          *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken(v6);
        }
        __src = &v234;
        uint64_t v233 = (llvm::Type *)0x1000000000;
        std::string::value_type v13 = (char *)a1[27];
        if (llvm::LLParser::parseGlobalValueVector((llvm::LLParser *)a1, (uint64_t)&__src, 0)) {
          goto LABEL_19;
        }
        if (v12 == 8)
        {
          if ((llvm::LLParser::parseToken((uint64_t)a1, 9, "expected end of packed struct") & 1) == 0
            && (llvm::LLParser::parseToken((uint64_t)a1, 11, "expected end of constant") & 1) == 0)
          {
            operator new[]();
          }
          goto LABEL_19;
        }
        if (llvm::LLParser::parseToken((uint64_t)a1, 11, "expected end of constant"))
        {
LABEL_19:
          char v11 = 1;
          goto LABEL_20;
        }
        uint64_t v91 = v233;
        if (v233)
        {
          uint64_t v92 = (llvm::FixedVectorType ***)__src;
          uint64_t v93 = **(unsigned __int8 ***)__src;
          unsigned int v94 = v93[8];
          if (v94 < 7 || v94 == 13 || v94 == 15)
          {
            if (v233 == 1)
            {
LABEL_215:
              uint64_t Impl = (uint64_t)llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)__src, (llvm::Type *)v233);
              if (!Impl)
              {
                llvm::FixedVectorType::get(**v92, (llvm::Type *)v91);
                uint64_t Impl = sub_1CC56A4DC(**v100 + 1288, (uint64_t)v100, v92, v91);
              }
              char v11 = 0;
              *(void *)(a2 + 128) = Impl;
              *(_DWORD *)a2 = 12;
            }
            else
            {
              unsigned int v97 = 1;
              while (1)
              {
                unsigned int v98 = v97;
                if (**((unsigned __int8 ***)__src + v97) != v93) {
                  break;
                }
                ++v97;
                if (v233 == v98 + 1) {
                  goto LABEL_215;
                }
              }
              v249.__r_.__value_.__r.__words[0] = (std::string::size_type)"vector element #";
              v249.__r_.__value_.__r.__words[2] = v97;
              WORD4(v250) = 2051;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v249;
              __p.__r_.__value_.__r.__words[2] = (std::string::size_type)" is not of type '";
              WORD4(v264) = 770;
              sub_1CC196EB4((uint64_t)&v229, (llvm::Type *)v93);
              v230[0] = (llvm::Type *)&__p;
              v231[0] = &v229;
              LOWORD(v231[2]) = 1026;
              char v11 = llvm::LLLexer::Error((uint64_t)v6, v13, (llvm::Twine *)v230);
              if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v229.__r_.__value_.__l.__data_);
              }
            }
LABEL_20:
            size_t v14 = (llvm::Type *)__src;
            if (__src == &v234) {
              return v11 & 1;
            }
            goto LABEL_108;
          }
          v230[0] = (llvm::Type *)"vector elements must have integer, pointer or floating point type";
          LOWORD(v231[2]) = 259;
          uint64_t v159 = (uint64_t)v6;
          long long v160 = v13;
        }
        else
        {
          long long v160 = *(char **)(a2 + 8);
          v230[0] = (llvm::Type *)"constant vector must not be empty";
          LOWORD(v231[2]) = 259;
          uint64_t v159 = (uint64_t)v6;
        }
        char v11 = llvm::LLLexer::Error(v159, v160, (llvm::Twine *)v230);
        goto LABEL_20;
      }
      goto LABEL_123;
    }
    *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 21));
    BOOL v43 = &v234;
    __src = &v234;
    uint64_t v233 = (llvm::Type *)0x1000000000;
    if ((llvm::LLParser::parseGlobalValueVector((llvm::LLParser *)a1, (uint64_t)&__src, 0) & 1) == 0
      && (llvm::LLParser::parseToken((uint64_t)a1, 9, "expected end of struct constant") & 1) == 0)
    {
      operator new[]();
    }
    goto LABEL_77;
  }
  *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 21));
  BOOL v43 = &v234;
  __src = &v234;
  uint64_t v233 = (llvm::Type *)0x1000000000;
  uint64_t v44 = (char *)a1[27];
  if ((llvm::LLParser::parseGlobalValueVector((llvm::LLParser *)a1, (uint64_t)&__src, 0) & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)a1, 7, "expected end of array constant") & 1) != 0)
  {
LABEL_77:
    char v11 = 1;
    goto LABEL_78;
  }
  if (!v233)
  {
    char v11 = 0;
    int v116 = 11;
LABEL_269:
    *(_DWORD *)a2 = v116;
    goto LABEL_78;
  }
  int v82 = *(unsigned __int8 *)(**(void **)__src + 8);
  if (v82 == 14 || v82 == 7)
  {
    sub_1CC196EB4((uint64_t)&v249, **(llvm::Type ***)__src);
    long long v123 = std::string::insert(&v249, 0, "invalid array element type: ");
    std::string::size_type v124 = v123->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v124;
    v123->__r_.__value_.__l.__size_ = 0;
    v123->__r_.__value_.__r.__words[2] = 0;
    v123->__r_.__value_.__r.__words[0] = 0;
    LOWORD(v231[2]) = 260;
    v230[0] = (llvm::Type *)&__p;
    char v11 = llvm::LLLexer::Error((uint64_t)v6, v44, (llvm::Twine *)v230);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v249.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_78;
    }
    uint64_t v125 = (void *)v249.__r_.__value_.__r.__words[0];
    goto LABEL_291;
  }
  uint64_t v84 = llvm::ArrayType::get(**(llvm::ArrayType ***)__src, (llvm::Type *)v233);
  uint64_t v85 = v233;
  if (!v233)
  {
    uint64_t v85 = 0;
LABEL_268:
    char v11 = 0;
    *(void *)(a2 + 128) = llvm::ConstantArray::get(v84, (llvm::Type *)__src, v85);
    int v116 = 12;
    goto LABEL_269;
  }
  std::string::size_type v86 = 0;
  uint64_t v87 = **(llvm::Type ***)__src;
  while (**((llvm::Type ***)__src + v86) == v87)
  {
    if (v233 == ++v86) {
      goto LABEL_268;
    }
  }
  v249.__r_.__value_.__r.__words[0] = (std::string::size_type)"array element #";
  v249.__r_.__value_.__r.__words[2] = v86;
  WORD4(v250) = 2051;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v249;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)" is not of type '";
  WORD4(v264) = 770;
  sub_1CC196EB4((uint64_t)&v229, v87);
  v230[0] = (llvm::Type *)&__p;
  v231[0] = &v229;
  LOWORD(v231[2]) = 1026;
  char v11 = llvm::LLLexer::Error((uint64_t)v6, v44, (llvm::Twine *)v230);
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v125 = (void *)v229.__r_.__value_.__r.__words[0];
LABEL_291:
    operator delete(v125);
  }
LABEL_78:
  size_t v14 = (llvm::Type *)__src;
LABEL_79:
  if (v14 != (llvm::Type *)v43) {
    goto LABEL_108;
  }
  return v11 & 1;
}

void sub_1CC196358(uint64_t a1, llvm::Type *a2, llvm::Type *a3)
{
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v17 = 0;
  int v8 = 0;
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v15 = v16;
  int v14 = 0;
  int v7 = &unk_1F2646F30;
  uint64_t v9 = 0;
  __int16 v10 = 0;
  char v11 = 0;
  llvm::raw_ostream::write((llvm::raw_ostream *)&v7, "explicit pointee type doesn't match operand's pointee type", 0x3AuLL);
  if ((unint64_t)(v10 - v11) > 1)
  {
    *(_WORD *)char v11 = 10272;
    v11 += 2;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v7, " (", 2uLL);
  }
  llvm::Type::print(a2, (llvm::raw_ostream *)&v7, 0, 0);
  if ((unint64_t)(v10 - v11) > 3)
  {
    *(_DWORD *)char v11 = 544437792;
    v11 += 4;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v7, " vs ", 4uLL);
  }
  llvm::Type::print(a3, (llvm::raw_ostream *)&v7, 0, 0);
  if (v10 == v11) {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v7, ")", 1uLL);
  }
  else {
    *v11++ = 41;
  }
  if (*((char *)v15 + 23) < 0)
  {
    sub_1CB8BDF7C(a1, *v15, (unint64_t)v15[1]);
  }
  else
  {
    long long v6 = *(_OWORD *)v15;
    *(void *)(a1 + 16) = v15[2];
    *(_OWORD *)a1 = v6;
  }
  int v7 = &unk_1F2646B98;
  if (v14 == 1 && v9) {
    MEMORY[0x1D25D9CB0](v9, 0x1000C8077774924);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(v16[0]);
  }
}

void sub_1CC196550(llvm::Value **a1, llvm::Value *a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    llvm::Constant::removeDeadConstantUsers((uint64_t)v2);
    llvm::Value::~Value(v2, v3);
    int v4 = *((_DWORD *)v2 + 5);
    if ((v4 & 0x40000000) != 0)
    {
      char v12 = (char *)*((void *)v2 - 1);
      char v11 = (char *)v2 - 8;
      __int16 v10 = v12;
      uint64_t v13 = v4 & 0x7FFFFFF;
      if (v13)
      {
        uint64_t v14 = 32 * v13;
        do
        {
          uint64_t v15 = &v10[v14];
          if (*(void *)&v10[v14 - 32])
          {
            **((void **)v15 - 2) = *((void *)v15 - 3);
            uint64_t v16 = *((void *)v15 - 3);
            if (v16) {
              *(void *)(v16 + 16) = *((void *)v15 - 2);
            }
          }
          v14 -= 32;
        }
        while (v14);
      }
      operator delete(v10);
      long long v6 = v11;
    }
    else
    {
      uint64_t v5 = v4 & 0x7FFFFFF;
      long long v6 = (char *)v2 - 32 * v5;
      if (v5)
      {
        int v7 = (void **)((char *)v2 - 16);
        uint64_t v8 = -32 * v5;
        do
        {
          if (*(v7 - 2))
          {
            **int v7 = *(v7 - 1);
            uint64_t v9 = (uint64_t)*(v7 - 1);
            if (v9) {
              *(void *)(v9 + 16) = *v7;
            }
          }
          v7 -= 4;
          v8 += 32;
        }
        while (v8);
      }
      if (v4 < 0) {
        long long v6 = &v6[-*((void *)v6 - 1) - 8];
      }
    }
    operator delete(v6);
  }
}

uint64_t sub_1CC196644(uint64_t result, char a2)
{
  uint64_t v2 = result;
  int v3 = *(_DWORD *)(result + 32) & 0xF;
  unsigned int v4 = *(_DWORD *)(result + 32) & 0xFFFFFFCF | (16 * (a2 & 3));
  *(_DWORD *)(result + 32) = v4;
  if ((v3 - 7) < 2) {
    goto LABEL_6;
  }
  if (16 * (a2 & 3))
  {
    double result = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)result);
    if ((result & 1) == 0)
    {
      unsigned int v4 = *(_DWORD *)(v2 + 32);
LABEL_6:
      *(_DWORD *)(v2 + 32) = v4 | 0x4000;
    }
  }
  return result;
}

llvm::GlobalValue *sub_1CC1966A4(llvm::GlobalValue *result, int a2)
{
  int v2 = *((_DWORD *)result + 8);
  if ((a2 - 7) < 2) {
    v2 &= 0xFFFFFFCF;
  }
  unsigned int v3 = v2 & 0xFFFFFFF0 | a2 & 0xF;
  *((_DWORD *)result + 8) = v3;
  if ((a2 & 0xFu) - 7 < 2) {
    goto LABEL_8;
  }
  if ((v2 & 0x30) != 0)
  {
    uint64_t v5 = result;
    char hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage(result);
    double result = v5;
    if ((hasExternalWeakLinkage & 1) == 0)
    {
      unsigned int v3 = *((_DWORD *)v5 + 8);
LABEL_8:
      *((_DWORD *)result + 8) = v3 | 0x4000;
    }
  }
  return result;
}

uint64_t llvm::LLParser::parseFnAttributeValuePairs(uint64_t a1, uint64_t a2, char **a3, int a4, char **a5)
{
  int v10 = 0;
  *(_DWORD *)(a2 + 16) = 0;
  char v11 = (llvm::LLLexer *)(a1 + 168);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v12 = *(_DWORD *)(a1 + 224);
        if (v12 != 442) {
          break;
        }
        if (llvm::LLParser::parseStringAttribute((llvm::LLParser *)a1, (uint64_t **)a2))
        {
LABEL_39:
          LOBYTE(v10) = 1;
          return v10 & 1;
        }
      }
      if (v12 == 9) {
        return v10 & 1;
      }
      if (v12 != 435) {
        break;
      }
      if (a4)
      {
        BOOL v30 = *(char **)(a1 + 216);
        v36[0] = "cannot have an attribute group reference in an attribute group";
        __int16 v37 = 259;
        v10 |= llvm::LLLexer::Error((uint64_t)v11, v30, (llvm::Twine *)v36);
      }
      else
      {
        int v16 = *(_DWORD *)(a1 + 256);
        unsigned int v18 = a3[1];
        unint64_t v17 = (unint64_t)a3[2];
        if ((unint64_t)v18 >= v17)
        {
          unint64_t v20 = *a3;
          uint64_t v21 = (v18 - *a3) >> 2;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 62) {
            abort();
          }
          uint64_t v23 = v17 - (void)v20;
          if (v23 >> 1 > v22) {
            unint64_t v22 = v23 >> 1;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
          }
          unint64_t v35 = v22;
          if (v22)
          {
            uint64_t v33 = (v18 - *a3) >> 2;
            int v34 = *(_DWORD *)(a1 + 256);
            if (v22 >> 62) {
              sub_1CB833614();
            }
            int v24 = (char *)operator new(4 * v22);
            int v16 = v34;
            uint64_t v21 = v33;
          }
          else
          {
            int v24 = 0;
          }
          unsigned int v25 = &v24[4 * v21];
          *(_DWORD *)unsigned int v25 = v16;
          uint64_t v19 = v25 + 4;
          if (v18 == v20)
          {
            unint64_t v26 = v35;
          }
          else
          {
            unint64_t v26 = v35;
            do
            {
              int v27 = *((_DWORD *)v18 - 1);
              v18 -= 4;
              *((_DWORD *)v25 - 1) = v27;
              v25 -= 4;
            }
            while (v18 != v20);
          }
          *a3 = v25;
          a3[1] = v19;
          a3[2] = &v24[4 * v26];
          if (v20)
          {
            int v28 = v20;
            BOOL v29 = v19;
            operator delete(v28);
            uint64_t v19 = v29;
          }
        }
        else
        {
          *(_DWORD *)unsigned int v18 = v16;
          uint64_t v19 = v18 + 4;
        }
        a3[1] = v19;
      }
      *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken(v11);
    }
    uint64_t v13 = *(char **)(a1 + 216);
    if (v12 == 170) {
      *a5 = v13;
    }
    unsigned int v14 = sub_1CC1969A4(v12);
    if (!v14) {
      break;
    }
    unsigned int v15 = v14;
    if (llvm::LLParser::parseEnumAttribute(a1, v14, (uint64_t **)a2)) {
      goto LABEL_39;
    }
    if (v15 != 74 && (byte_1CFAC7B70[v15 - 1] & 1) == 0)
    {
      v36[0] = "this attribute does not apply to functions";
      __int16 v37 = 259;
      v10 |= llvm::LLLexer::Error((uint64_t)v11, v13, (llvm::Twine *)v36);
    }
  }
  if (a4)
  {
    char v32 = *(char **)(a1 + 216);
    v36[0] = "unterminated attribute group";
    __int16 v37 = 259;
    LOBYTE(v10) = llvm::LLLexer::Error((uint64_t)v11, v32, (llvm::Twine *)v36);
  }
  return v10 & 1;
}

uint64_t sub_1CC1969A4(int a1)
{
  int v1 = a1 - 90;
  uint64_t result = 1;
  switch(v1)
  {
    case 0:
      uint64_t result = 74;
      break;
    case 9:
      uint64_t result = 78;
      break;
    case 73:
      return result;
    case 74:
      uint64_t result = 75;
      break;
    case 75:
      uint64_t result = 2;
      break;
    case 76:
      uint64_t result = 3;
      break;
    case 77:
      uint64_t result = 50;
      break;
    case 78:
      uint64_t result = 51;
      break;
    case 79:
      uint64_t result = 52;
      break;
    case 80:
      uint64_t result = 4;
      break;
    case 81:
      uint64_t result = 69;
      break;
    case 82:
      uint64_t result = 71;
      break;
    case 83:
      uint64_t result = 5;
      break;
    case 84:
      uint64_t result = 6;
      break;
    case 85:
      uint64_t result = 76;
      break;
    case 86:
      uint64_t result = 77;
      break;
    case 87:
      uint64_t result = 7;
      break;
    case 88:
      uint64_t result = 70;
      break;
    case 89:
      uint64_t result = 11;
      break;
    case 90:
      uint64_t result = 12;
      break;
    case 91:
      uint64_t result = 13;
      break;
    case 92:
      uint64_t result = 10;
      break;
    case 93:
      uint64_t result = 14;
      break;
    case 94:
      uint64_t result = 15;
      break;
    case 95:
      uint64_t result = 17;
      break;
    case 96:
      uint64_t result = 18;
      break;
    case 97:
      uint64_t result = 19;
      break;
    case 98:
      uint64_t result = 36;
      break;
    case 99:
      uint64_t result = 20;
      break;
    case 100:
      uint64_t result = 21;
      break;
    case 101:
      uint64_t result = 22;
      break;
    case 102:
      uint64_t result = 24;
      break;
    case 103:
      uint64_t result = 25;
      break;
    case 104:
      uint64_t result = 26;
      break;
    case 105:
      uint64_t result = 27;
      break;
    case 106:
      uint64_t result = 30;
      break;
    case 107:
      uint64_t result = 38;
      break;
    case 108:
      uint64_t result = 28;
      break;
    case 109:
      uint64_t result = 39;
      break;
    case 110:
      uint64_t result = 29;
      break;
    case 111:
      uint64_t result = 31;
      break;
    case 112:
      uint64_t result = 32;
      break;
    case 113:
      uint64_t result = 35;
      break;
    case 114:
      uint64_t result = 23;
      break;
    case 115:
      uint64_t result = 37;
      break;
    case 116:
      uint64_t result = 33;
      break;
    case 117:
      uint64_t result = 34;
      break;
    case 118:
      uint64_t result = 40;
      break;
    case 119:
      uint64_t result = 41;
      break;
    case 120:
      uint64_t result = 43;
      break;
    case 121:
      uint64_t result = 42;
      break;
    case 122:
      uint64_t result = 72;
      break;
    case 123:
      uint64_t result = 44;
      break;
    case 124:
      uint64_t result = 45;
      break;
    case 125:
      uint64_t result = 46;
      break;
    case 126:
      uint64_t result = 47;
      break;
    case 127:
      uint64_t result = 48;
      break;
    case 128:
      uint64_t result = 56;
      break;
    case 129:
      uint64_t result = 58;
      break;
    case 130:
      uint64_t result = 59;
      break;
    case 131:
      uint64_t result = 60;
      break;
    case 132:
      uint64_t result = 49;
      break;
    case 133:
      uint64_t result = 55;
      break;
    case 134:
      uint64_t result = 73;
      break;
    case 135:
      uint64_t result = 54;
      break;
    case 136:
      uint64_t result = 53;
      break;
    case 137:
      uint64_t result = 57;
      break;
    case 138:
      uint64_t result = 61;
      break;
    case 139:
      uint64_t result = 63;
      break;
    case 140:
      uint64_t result = 64;
      break;
    case 141:
      uint64_t result = 62;
      break;
    case 142:
      uint64_t result = 79;
      break;
    case 143:
      uint64_t result = 80;
      break;
    case 144:
      uint64_t result = 65;
      break;
    case 145:
      uint64_t result = 66;
      break;
    case 146:
      uint64_t result = 67;
      break;
    case 147:
      uint64_t result = 9;
      break;
    case 148:
      uint64_t result = 68;
      break;
    case 149:
      uint64_t result = 16;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void sub_1CC196EB4(uint64_t a1, llvm::Type *a2)
{
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v14 = 0;
  int v5 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  int v12 = v13;
  int v11 = 0;
  unsigned int v4 = &unk_1F2646F30;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  llvm::Type::print(a2, (llvm::raw_ostream *)&v4, 0, 0);
  if (*((char *)v12 + 23) < 0)
  {
    sub_1CB8BDF7C(a1, *v12, (unint64_t)v12[1]);
  }
  else
  {
    long long v3 = *(_OWORD *)v12;
    *(void *)(a1 + 16) = v12[2];
    *(_OWORD *)a1 = v3;
  }
  unsigned int v4 = &unk_1F2646B98;
  if (v11 == 1 && v6) {
    MEMORY[0x1D25D9CB0](v6, 0x1000C8077774924);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
}

uint64_t sub_1CC196FC4(uint64_t *a1, unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v3 = *((unsigned int *)a1 + 8);
  if (v3 <= 1) {
    unint64_t v4 = 1;
  }
  else {
    unint64_t v4 = v3;
  }
  if (a3 < v4) {
    unint64_t v4 = a3;
  }
  if (a3 <= v3) {
    unint64_t v4 = a3;
  }
  if ((v3 & 0x80000000) == 0) {
    size_t v6 = v4;
  }
  else {
    size_t v6 = a3;
  }
  uint64_t v7 = *((unsigned int *)a1 + 2);
  if (!v7) {
    return 0;
  }
  int v9 = 0;
  if (v6)
  {
    size_t v10 = v6;
    int v11 = a2;
    do
    {
      unsigned __int8 v12 = *v11++;
      int v9 = 33 * v9 + v12;
      --v10;
    }
    while (v10);
  }
  uint64_t v13 = *a1;
  uint64_t v14 = *a1 + 8 * v7 + 8;
  int v15 = 1;
  int v16 = v9;
  while (1)
  {
    uint64_t v17 = v16 & (v7 - 1);
    unsigned int v18 = *(void **)(v13 + 8 * v17);
    if (v18 != (void *)-8)
    {
      if (!v18) {
        return 0;
      }
      if (*(_DWORD *)(v14 + 4 * v17) == v9
        && v6 == *v18
        && (!v6 || !memcmp(a2, (char *)v18 + *((unsigned int *)a1 + 5), v6)))
      {
        break;
      }
    }
    int v16 = v15 + v17;
    ++v15;
  }
  if (v17 != -1 && (int)v17 != v7) {
    return *(void *)(*(void *)(v13 + 8 * (int)v17) + 8);
  }
  uint64_t result = 0;
  if ((int)v17 != v7 && v17 != -1) {
    return *(void *)(*(void *)(v13 + 8 * (int)v17) + 8);
  }
  return result;
}

unint64_t *sub_1CC197104(void **a1, uint64_t a2)
{
  if (*(void *)(a2 + 24))
  {
    unint64_t v4 = **(llvm::PointerType ***)(a2 + 16);
    if (v4) {
      BOOL v5 = *((unsigned char *)v4 + 8) == 14;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      size_t v10 = (llvm::Type *)(*(_DWORD *)(a2 + 8) >> 8);
      __int16 v13 = 257;
      int v11 = operator new(0x80uLL);
      *((_DWORD *)v11 + 7) = *((_DWORD *)v11 + 7) & 0x38000000 | 0x40000000;
      *(void *)int v11 = 0;
      return llvm::Function::Function((unint64_t *)v11 + 1, v4, 9, v10, v12, (unint64_t)a1);
    }
    else
    {
      size_t v6 = (char *)operator new(0x78uLL);
      *((_DWORD *)v6 + 13) = *((_DWORD *)v6 + 13) & 0x38000000 | 1;
      *(void *)size_t v6 = 0;
      *((void *)v6 + 1) = 0;
      *((void *)v6 + 2) = 0;
      *((void *)v6 + 3) = v6 + 32;
      __int16 v13 = 257;
      return llvm::GlobalVariable::GlobalVariable((unint64_t *)v6 + 4, (uint64_t)a1, v4, 0, 9, 0, v12, 0, 0, (llvm::Type *)(((unint64_t)*(unsigned int *)(a2 + 8) >> 8) | 0x100000000), 0);
    }
  }
  else
  {
    uint64_t v8 = (char *)operator new(0x78uLL);
    *((_DWORD *)v8 + 13) = *((_DWORD *)v8 + 13) & 0x38000000 | 1;
    *(void *)uint64_t v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = 0;
    *((void *)v8 + 3) = v8 + 32;
    int v9 = (llvm::PointerType *)(**a1 + 1912);
    __int16 v13 = 257;
    return llvm::GlobalVariable::GlobalVariable((unint64_t *)v8 + 4, (uint64_t)a1, v9, 0, 9, 0, v12, 0, 0, (llvm::Type *)(((unint64_t)*(unsigned int *)(a2 + 8) >> 8) | 0x100000000), 0);
  }
}

uint64_t sub_1CC197270(int a1, unsigned char *a2)
{
  *a2 = 1;
  int v2 = a1 - 27;
  if (a1 - 27) < 0x13 && ((0x6067Fu >> v2)) {
    return dword_1CFAC4C80[v2];
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t llvm::LLParser::parseOptionalVisibility(uint64_t this, unsigned int *a2)
{
  unsigned int v2 = *(_DWORD *)(this + 224) - 38;
  if (v2 >= 3)
  {
    *a2 = 0;
  }
  else
  {
    uint64_t v3 = this;
    *a2 = v2;
    this = llvm::LLLexer::LexToken((llvm::LLLexer *)(this + 168));
    *(_DWORD *)(v3 + 224) = this;
  }
  return this;
}

uint64_t llvm::LLParser::parseOptionalDLLStorageClass(uint64_t this, unsigned int *a2)
{
  uint64_t v2 = this;
  int v3 = *(_DWORD *)(this + 224);
  if (v3 == 34)
  {
    unsigned int v4 = 1;
    goto LABEL_5;
  }
  if (v3 == 35)
  {
    unsigned int v4 = 2;
LABEL_5:
    *a2 = v4;
    this = llvm::LLLexer::LexToken((llvm::LLLexer *)(this + 168));
    *(_DWORD *)(v2 + 224) = this;
    return this;
  }
  *a2 = 0;
  return this;
}

uint64_t llvm::LLParser::parseMDNode(char **this, llvm::MDNode **a2)
{
  if (*((_DWORD *)this + 56) == 441)
  {
    return llvm::LLParser::parseSpecializedMDNode(this, a2, 0);
  }
  else if (llvm::LLParser::parseToken((uint64_t)this, 14, "expected '!' here"))
  {
    return 1;
  }
  else if (*((_DWORD *)this + 56) == 8)
  {
    return llvm::LLParser::parseMDTuple((llvm::LLParser *)this, a2, 0);
  }
  else
  {
    return llvm::LLParser::parseMDNodeID((llvm::LLParser *)this, a2);
  }
}

uint64_t llvm::LLParser::parseScopeAndOrdering(llvm::LLParser *a1, int a2, unsigned __int8 *a3, _DWORD *a4)
{
  if (!a2) {
    return 0;
  }
  if (llvm::LLParser::parseScope(a1, a3)) {
    return 1;
  }

  return llvm::LLParser::parseOrdering((uint64_t)a1, a4);
}

uint64_t llvm::LLParser::parseMetadataAsValue(llvm::LLParser *this, llvm::Value **a2, llvm::LLParser::PerFunctionState *a3)
{
  uint64_t v7 = 0;
  uint64_t v5 = llvm::LLParser::parseMetadata((uint64_t)this, &v7, a3);
  if ((v5 & 1) == 0) {
    *a2 = (llvm::Value *)llvm::MetadataAsValue::get(*(void *)this, (unsigned __int8 *)v7);
  }
  return v5;
}

uint64_t llvm::LLParser::parseMDNodeTail(llvm::LLParser *this, llvm::MDNode **a2)
{
  if (*((_DWORD *)this + 56) == 8) {
    return llvm::LLParser::parseMDTuple(this, a2, 0);
  }
  else {
    return llvm::LLParser::parseMDNodeID(this, a2);
  }
}

uint64_t llvm::LLParser::parseDIEnumerator(llvm::LLParser *this, llvm::MDNode **a2, int a3)
{
  uint64_t v48 = 0;
  __int16 v49 = 256;
  __int16 v47 = 0;
  size_t v6 = (llvm::LLParser *)((char *)this + 168);
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  if (!llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here"))
  {
    int v39 = a3;
    uint64_t v40 = a2;
    int v8 = *((_DWORD *)this + 56);
    if (v8 == 437)
    {
      unint64_t v9 = 0;
      int v41 = 0;
      unint64_t v42 = 0;
      int v10 = 0;
      int v11 = (char **)((char *)this + 232);
      LOBYTE(v12) = 1;
      int v13 = 1;
      while (1)
      {
        unint64_t v14 = *((unsigned __int8 *)this + 255);
        if ((v14 & 0x80u) == 0) {
          unint64_t v15 = v14 & 0x7F;
        }
        else {
          unint64_t v15 = *((void *)this + 30);
        }
        switch(v15)
        {
          case 0xAuLL:
            uint64_t v19 = (char *)this + 232;
            if ((v14 & 0x80) != 0)
            {
              uint64_t v19 = *v11;
              unint64_t v14 = *((void *)this + 30);
            }
            if (v14 >= 0xA) {
              size_t v20 = 10;
            }
            else {
              size_t v20 = v14;
            }
            if (memcmp(v19, "isUnsigned", v20) || v14 != 10) {
              goto LABEL_50;
            }
            if (sub_1CC19E4DC((uint64_t)this, (uint64_t)"isUnsigned", 10, (char *)&v47)) {
              return 1;
            }
            break;
          case 5uLL:
            unint64_t v22 = (char *)this + 232;
            if ((v14 & 0x80) != 0)
            {
              unint64_t v22 = *v11;
              unint64_t v14 = *((void *)this + 30);
            }
            if (v14 >= 5) {
              size_t v23 = 5;
            }
            else {
              size_t v23 = v14;
            }
            if (memcmp(v22, "value", v23) || v14 != 5)
            {
LABEL_50:
              v50[0] = "invalid field '";
              int v51 = (char *)this + 232;
              __int16 v53 = 1027;
              __src = (const char *)v50;
              int v27 = "'";
              goto LABEL_51;
            }
            if (v10)
            {
              __int16 v53 = 1283;
              v50[0] = "field '";
              int v51 = "value";
              uint64_t v52 = 5;
              __src = (const char *)v50;
              int v27 = "' cannot be specified more than once";
LABEL_51:
              uint64_t v57 = v27;
              __int16 v28 = 770;
            }
            else
            {
              int v25 = llvm::LLLexer::LexToken(v6);
              *((_DWORD *)this + 56) = v25;
              if (v25 == 457)
              {
                unsigned int v12 = *((_DWORD *)this + 78);
                if (v12 > 0x40) {
                  operator new[]();
                }
                unint64_t v9 = *((void *)this + 38);
                int v41 = *((unsigned __int8 *)this + 316);
                int v26 = llvm::LLLexer::LexToken(v6);
                *((_DWORD *)this + 56) = v26;
                int v10 = 1;
                unint64_t v42 = v9;
                int v13 = v12;
                goto LABEL_54;
              }
              __src = "expected integer";
              __int16 v28 = 259;
            }
            __int16 v58 = v28;
            if (llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)&__src)) {
              return 1;
            }
            break;
          case 4uLL:
            int v16 = (char *)this + 232;
            if ((v14 & 0x80) != 0)
            {
              int v16 = *v11;
              unint64_t v14 = *((void *)this + 30);
            }
            size_t v17 = v14 >= 4 ? 4 : v14;
            if (memcmp(v16, "name", v17) || v14 != 4) {
              goto LABEL_50;
            }
            if (sub_1CC19E984((uint64_t)this, (uint64_t)"name", 4, (uint64_t)&v48)) {
              return 1;
            }
            break;
          default:
            goto LABEL_50;
        }
        int v26 = *((_DWORD *)this + 56);
LABEL_54:
        if (v26 != 4) {
          goto LABEL_60;
        }
        int v29 = llvm::LLLexer::LexToken(v6);
        *((_DWORD *)this + 56) = v29;
        if (v29 != 437) {
          goto LABEL_71;
        }
      }
    }
    unint64_t v9 = 0;
    int v41 = 0;
    unint64_t v42 = 0;
    int v10 = 0;
    LOBYTE(v12) = 1;
    int v13 = 1;
    if (v8 != 13)
    {
LABEL_71:
      __src = "expected field label here";
      __int16 v58 = 259;
      if (llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)&__src)) {
        return 1;
      }
    }
LABEL_60:
    BOOL v30 = (char *)*((void *)this + 27);
    if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) == 0)
    {
      if ((_BYTE)v49)
      {
        if (v10)
        {
          if (!(_BYTE)v47 || v41 || (v9 & (1 << (v13 - 1))) == 0)
          {
            int v55 = v13;
            __src = (const char *)v42;
            char v56 = v41;
            if (!(_BYTE)v47 && v41 && (v9 & (1 << (v12 - 1))) != 0)
            {
              unsigned int v31 = v13 + 1;
              if ((v13 + 1) > 0x40) {
                operator new[]();
              }
              unint64_t v32 = (0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v13) & v42;
              __src = (const char *)v32;
              int v55 = v13 + 1;
            }
            else
            {
              unint64_t v32 = v42;
              unsigned int v31 = v13;
            }
            int v34 = *(void **)this;
            if (v39)
            {
              unsigned int v46 = v31;
              unint64_t v45 = v32;
              *uint64_t v40 = llvm::DIEnumerator::getImpl(v34, (const llvm::APInt *)&v45, v47 != 0, v48, 1, 1);
              if (v46 < 0x41) {
                return 0;
              }
              unint64_t v35 = v45;
              if (!v45) {
                return 0;
              }
            }
            else
            {
              unsigned int v44 = v31;
              unint64_t v43 = v32;
              *uint64_t v40 = llvm::DIEnumerator::getImpl(v34, (const llvm::APInt *)&v43, v47 != 0, v48, 0, 1);
              if (v44 < 0x41) {
                return 0;
              }
              unint64_t v35 = v43;
              if (!v43) {
                return 0;
              }
            }
            MEMORY[0x1D25D9CB0](v35, 0x1000C8000313F17);
            return 0;
          }
          __src = "unsigned enumerator with negative value";
          __int16 v58 = 259;
          BOOL v38 = (char *)*((void *)this + 27);
          uint64_t v37 = (uint64_t)v6;
          return llvm::LLLexer::Error(v37, v38, (llvm::Twine *)&__src);
        }
        uint64_t v36 = "missing required field 'value'";
      }
      else
      {
        uint64_t v36 = "missing required field 'name'";
      }
      __src = v36;
      __int16 v58 = 259;
      uint64_t v37 = (uint64_t)v6;
      BOOL v38 = v30;
      return llvm::LLLexer::Error(v37, v38, (llvm::Twine *)&__src);
    }
    return 1;
  }
  return 1;
}

uint64_t llvm::LLParser::parseDIArgList(llvm::LLParser *this, llvm::MDNode **a2, int a3)
{
  return llvm::LLParser::parseDIArgList(this, a2, a3, 0);
}

uint64_t sub_1CC197D7C(uint64_t a1, uint64_t a2, const llvm::APInt *a3)
{
  int v3 = *(_DWORD *)(a2 + 52);
  if (v3 == 2) {
    return *(void *)(a2 + 32);
  }
  if (v3 != 1) {
    return 0;
  }
  Signed = (llvm::ValueAsMetadata *)llvm::ConstantInt::getSigned((llvm::ConstantInt *)(**(void **)a1 + 1984), *(void *)a2, a3);

  return llvm::ValueAsMetadata::get(Signed, v5);
}

uint64_t llvm::LLParser::parseMetadata(uint64_t a1, llvm::Metadata **a2, llvm::LLParser::PerFunctionState *a3)
{
  int v5 = *(_DWORD *)(a1 + 224);
  if (v5 != 14)
  {
    if (v5 != 441)
    {
      v14[0] = (llvm::MDString *)"expected metadata operand";
      __int16 v15 = 259;
      return llvm::LLParser::parseValueAsMetadata((llvm::LLParser *)a1, a2, (const llvm::Twine *)v14, a3);
    }
    v14[0] = 0;
    unint64_t v7 = *(unsigned __int8 *)(a1 + 255);
    if ((v7 & 0x80u) == 0) {
      unint64_t v8 = v7 & 0x7F;
    }
    else {
      unint64_t v8 = *(void *)(a1 + 240);
    }
    if (v8 != 9) {
      goto LABEL_16;
    }
    unint64_t v9 = (void *)(a1 + 232);
    if ((v7 & 0x80) != 0)
    {
      unint64_t v9 = (void *)*v9;
      unint64_t v7 = *(void *)(a1 + 240);
    }
    size_t v10 = v7 >= 9 ? 9 : v7;
    if (!memcmp(v9, "DIArgList", v10) && v7 == 9)
    {
      if (llvm::LLParser::parseDIArgList((llvm::LLParser *)a1, v14, 0, a3)) {
        return 1;
      }
    }
    else
    {
LABEL_16:
      if (llvm::LLParser::parseSpecializedMDNode((llvm::LLParser *)a1, v14, 0)) {
        return 1;
      }
    }
    goto LABEL_28;
  }
  int v13 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  *(_DWORD *)(a1 + 224) = v13;
  if (v13 != 442)
  {
    v14[0] = 0;
    if (v13 == 8)
    {
      if (llvm::LLParser::parseMDTuple((llvm::LLParser *)a1, v14, 0)) {
        return 1;
      }
    }
    else if (llvm::LLParser::parseMDNodeID((llvm::LLParser *)a1, v14))
    {
      return 1;
    }
LABEL_28:
    uint64_t result = 0;
    goto LABEL_29;
  }
  v14[0] = 0;
  uint64_t result = llvm::LLParser::parseMDString((uint64_t **)a1, v14);
  if ((result & 1) == 0) {
LABEL_29:
  }
    *a2 = v14[0];
  return result;
}

uint64_t sub_1CC197F50@<X0>(llvm::APInt *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  if (*((unsigned char *)this + 12))
  {
    int v5 = v10;
    uint64_t result = (uint64_t)llvm::APInt::zextOrTrunc((uint64_t *)this, a2, (uint64_t)v10);
  }
  else
  {
    int v5 = v9;
    uint64_t result = llvm::APInt::sextOrTrunc((uint64_t)this, a2, (uint64_t)v9);
  }
  char v7 = *((unsigned char *)this + 12);
  uint64_t v8 = *(void *)v5;
  *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 + 2);
  *(void *)a3 = v8;
  *(unsigned char *)(a3 + 12) = v7;
  return result;
}

uint64_t llvm::LLParser::parseInstruction(llvm::LLParser *this, llvm::Instruction **a2, llvm::BasicBlock *a3, llvm::LLParser::PerFunctionState *a4)
{
  int v5 = (llvm::LLParser *)((char *)this + 168);
  int v6 = *((_DWORD *)this + 56);
  if (!v6)
  {
    unint64_t v32 = "found end of file when expecting more instructions";
    __int16 v33 = 259;
    unsigned int v18 = (char *)*((void *)this + 27);
    uint64_t v19 = (llvm::LLParser *)((char *)this + 168);
    return llvm::LLLexer::Error((uint64_t)v19, v18, (llvm::Twine *)&v32);
  }
  unint64_t v9 = (char *)*((void *)this + 27);
  int v10 = *((_DWORD *)this + 64);
  int v11 = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  *((_DWORD *)this + 56) = v11;
  if (v6 <= 275)
  {
    switch(v6)
    {
      case ';':
        int v25 = this;
        int v26 = (unint64_t *)a2;
        int v27 = a4;
        int v28 = 1;
        return llvm::LLParser::parseCall((uint64_t)v25, v26, v27, v28);
      case '<':
        int v25 = this;
        int v26 = (unint64_t *)a2;
        int v27 = a4;
        int v28 = 2;
        return llvm::LLParser::parseCall((uint64_t)v25, v26, v27, v28);
      case '=':
        int v25 = this;
        int v26 = (unint64_t *)a2;
        int v27 = a4;
        int v28 = 3;
        return llvm::LLParser::parseCall((uint64_t)v25, v26, v27, v28);
    }
LABEL_95:
    BOOL v30 = "expected instruction opcode";
LABEL_96:
    unint64_t v32 = v30;
    __int16 v33 = 259;
    uint64_t v19 = v5;
    unsigned int v18 = v9;
    return llvm::LLLexer::Error((uint64_t)v19, v18, (llvm::Twine *)&v32);
  }
  int v13 = v11;
  switch(v6)
  {
    case 276:
      int v20 = sub_1CD4ED1D4((uint64_t)this);
      uint64_t v16 = 1;
      if (llvm::LLParser::parseUnaryOp(this, a2, a4, v10, 1)) {
        return v16;
      }
      goto LABEL_23;
    case 277:
    case 279:
    case 281:
    case 289:
      int v23 = v11;
      if (v11 == 85)
      {
        int v23 = llvm::LLLexer::LexToken(v5);
        *((_DWORD *)this + 56) = v23;
      }
      int v24 = v23;
      if (v23 == 86)
      {
        int v24 = llvm::LLLexer::LexToken(v5);
        *((_DWORD *)this + 56) = v24;
      }
      if (v13 == 85) {
        goto LABEL_32;
      }
      if (v24 == 85)
      {
        *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v5);
LABEL_32:
        if (llvm::LLParser::parseArithmetic(this, a2, a4, v10, 0)) {
          return 1;
        }
        *((unsigned char *)*a2 + 17) |= 2u;
        if (v23 != 86) {
          return 0;
        }
        goto LABEL_89;
      }
      uint64_t v31 = llvm::LLParser::parseArithmetic(this, a2, a4, v10, 0);
      uint64_t v16 = v31;
      if (v23 == 86 && (v31 & 1) == 0)
      {
LABEL_89:
        uint64_t v16 = 0;
        uint64_t v21 = *a2;
        char v22 = *((unsigned char *)*a2 + 17) | 4;
        goto LABEL_100;
      }
      break;
    case 278:
    case 280:
    case 282:
    case 285:
    case 288:
      int v20 = sub_1CD4ED1D4((uint64_t)this);
      uint64_t v16 = 1;
      if (llvm::LLParser::parseArithmetic(this, a2, a4, v10, 1)) {
        return v16;
      }
      goto LABEL_23;
    case 283:
    case 284:
    case 290:
    case 291:
      if (v11 != 87) {
        return llvm::LLParser::parseArithmetic(this, a2, a4, v10, 0);
      }
      *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v5);
      if (llvm::LLParser::parseArithmetic(this, a2, a4, v10, 0)) {
        return 1;
      }
      uint64_t v16 = 0;
      uint64_t v21 = *a2;
      char v22 = *((unsigned char *)*a2 + 17) | 2;
      goto LABEL_100;
    case 286:
    case 287:
      return llvm::LLParser::parseArithmetic(this, a2, a4, v10, 0);
    case 292:
    case 293:
    case 294:
      return llvm::LLParser::parseLogical(this, a2, a4, v10);
    case 295:
      return llvm::LLParser::parseCompare((char **)this, a2, a4, v10);
    case 296:
      int v20 = sub_1CD4ED1D4((uint64_t)this);
      if (llvm::LLParser::parseCompare((char **)this, a2, a4, v10)) {
        return 1;
      }
LABEL_23:
      if (!v20) {
        return 0;
      }
      uint64_t v16 = 0;
      uint64_t v21 = *a2;
      char v22 = *((unsigned char *)*a2 + 17) | (2 * v20);
      goto LABEL_100;
    case 297:
      int v29 = sub_1CD4ED1D4((uint64_t)this);
      uint64_t v16 = llvm::LLParser::parsePHI(this, a2, a4);
      if (v16) {
        return v16;
      }
      if (!v29) {
        return 0;
      }
      if (sub_1CB845E74((uint64_t)*a2)) {
        goto LABEL_99;
      }
      BOOL v30 = "fast-math-flags specified for phi without floating-point scalar or vector return type";
      goto LABEL_96;
    case 298:
      int v25 = this;
      int v26 = (unint64_t *)a2;
      int v27 = a4;
      int v28 = 0;
      return llvm::LLParser::parseCall((uint64_t)v25, v26, v27, v28);
    case 299:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
      return llvm::LLParser::parseCast(this, a2, a4, v10);
    case 312:
      int v29 = sub_1CD4ED1D4((uint64_t)this);
      if (llvm::LLParser::parseSelect(this, a2, a4)) {
        return 1;
      }
      if (!v29) {
        return 0;
      }
      if (!sub_1CB845E74((uint64_t)*a2))
      {
        BOOL v30 = "fast-math-flags specified for select without floating-point scalar or vector return type";
        goto LABEL_96;
      }
LABEL_99:
      uint64_t v16 = 0;
      uint64_t v21 = *a2;
      char v22 = *((unsigned char *)*a2 + 17) | (2 * v29);
LABEL_100:
      *((unsigned char *)v21 + 17) = v22;
      return v16;
    case 313:
      return llvm::LLParser::parseVAArg((llvm::ConstantInt **)this, a2, a4);
    case 314:
      return llvm::LLParser::parseLandingPad((char **)this, a2, a4);
    case 319:
      return llvm::LLParser::parseRet(this, a2, v12, a4);
    case 320:
      return llvm::LLParser::parseBr(this, a2, a4);
    case 321:
      return llvm::LLParser::parseSwitch(this, a2, a4);
    case 322:
      return llvm::LLParser::parseIndirectBr(this, a2, a4);
    case 323:
      return llvm::LLParser::parseInvoke(this, a2, a4);
    case 324:
      return llvm::LLParser::parseResume((llvm::ConstantInt **)this, a2, a4);
    case 325:
      __int16 v15 = (char *)operator new(0x40uLL);
      uint64_t v16 = 0;
      *(void *)__int16 v15 = **(void **)this + 1576;
      *((void *)v15 + 1) = 0;
      v15[16] = 35;
      *(_OWORD *)(v15 + 17) = 0u;
      *(_OWORD *)(v15 + 33) = 0u;
      *(_OWORD *)(v15 + 44) = 0u;
      *a2 = (llvm::Instruction *)v15;
      return v16;
    case 326:
      return llvm::LLParser::parseCleanupRet((llvm::Type **)this, a2, a4);
    case 327:
      return llvm::LLParser::parseCatchSwitch(this, a2, a4);
    case 328:
      return llvm::LLParser::parseCatchRet((llvm::Type **)this, a2, a4);
    case 329:
      return llvm::LLParser::parseCatchPad(this, a2, a4);
    case 330:
      return llvm::LLParser::parseCleanupPad(this, a2, a4);
    case 331:
      return llvm::LLParser::parseCallBr(this, a2, a4);
    case 332:
      return llvm::LLParser::parseAlloc(this, a2, a4);
    case 333:
      return llvm::LLParser::parseLoad(this, a2, a4);
    case 334:
      return llvm::LLParser::parseStore(this, a2, a4);
    case 335:
      return llvm::LLParser::parseFence(this, a2, v12);
    case 336:
      return llvm::LLParser::parseCmpXchg(this, a2, a4);
    case 337:
      return llvm::LLParser::parseAtomicRMW(this, a2, a4);
    case 338:
      return llvm::LLParser::parseGetElementPtr(this, a2, a4);
    case 339:
      return llvm::LLParser::parseExtractElement(this, a2, a4);
    case 340:
      return llvm::LLParser::parseInsertElement(this, a2, a4);
    case 341:
      return llvm::LLParser::parseShuffleVector(this, a2, a4);
    case 342:
      return llvm::LLParser::parseExtractValue(this, a2, a4);
    case 343:
      return llvm::LLParser::parseInsertValue(this, a2, a4);
    case 347:
      return llvm::LLParser::parseFreeze((llvm::ConstantInt **)this, a2, a4);
    default:
      goto LABEL_95;
  }
  return v16;
}

uint64_t llvm::LLParser::parseBr(llvm::LLParser *this, llvm::Instruction **a2, llvm::LLParser::PerFunctionState *a3)
{
  int v24 = 0;
  int v25 = 0;
  int v6 = (char *)*((void *)this + 27);
  int v26 = v6;
  if (llvm::LLParser::parseTypeAndValue((llvm::ConstantInt **)this, &v24, a3)) {
    return 1;
  }
  uint64_t v8 = v24;
  if (v24) {
    BOOL v9 = *((unsigned char *)v24 + 16) == 22;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    int v10 = (char *)operator new(0x60uLL);
    *((_DWORD *)v10 + 13) = *((_DWORD *)v10 + 13) & 0x38000000 | 1;
    *(void *)int v10 = 0;
    *((void *)v10 + 2) = 0;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 4) = ***(void ***)v8 + 1576;
    *((void *)v10 + 3) = v10 + 32;
    *((void *)v10 + 5) = 0;
    v10[48] = 30;
    v10[49] = 0;
    *((_WORD *)v10 + 25) = 0;
    *((_DWORD *)v10 + 13) = 1;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *((_DWORD *)v10 + 22) = 0;
    int v11 = (void *)((char *)v8 + 8);
    uint64_t v12 = *((void *)v8 + 1);
    *(void *)int v10 = v8;
    *((void *)v10 + 1) = v12;
    if (v12) {
      *(void *)(v12 + 16) = v10 + 8;
    }
    uint64_t v7 = 0;
    *((void *)v10 + 2) = v11;
    *int v11 = v10;
    *a2 = (llvm::Instruction *)(v10 + 32);
  }
  else
  {
    if (*(void *)v24 != **(void **)this + 1888)
    {
      v21[0] = (llvm::Value *)"branch condition must have 'i1' type";
      __int16 v22 = 259;
      return llvm::LLLexer::Error((uint64_t)this + 168, v6, (llvm::Twine *)v21);
    }
    if (llvm::LLParser::parseToken((uint64_t)this, 4, "expected ',' after branch condition")) {
      return 1;
    }
    v21[0] = 0;
    if (llvm::LLParser::parseTypeAndBasicBlock((uint64_t)this, v21, &v26, a3)) {
      return 1;
    }
    if (llvm::LLParser::parseToken((uint64_t)this, 4, "expected ',' after true destination")) {
      return 1;
    }
    int v23 = 0;
    if (llvm::LLParser::parseTypeAndBasicBlock((uint64_t)this, &v23, &v25, a3)) {
      return 1;
    }
    unint64_t v14 = v21[0];
    __int16 v15 = v23;
    uint64_t v16 = operator new(0xA0uLL);
    uint64_t v17 = 0;
    unsigned int v18 = (llvm::BranchInst *)(v16 + 24);
    v16[29] = v16[29] & 0x38000000 | 3;
    do
    {
      uint64_t v19 = &v16[v17];
      *uint64_t v19 = 0;
      v19[1] = 0;
      v19[2] = 0;
      void v19[3] = v18;
      v17 += 8;
    }
    while (v17 != 24);
    int v20 = llvm::BranchInst::BranchInst(v18, v14, v15, v8, 0);
    uint64_t v7 = 0;
    *a2 = v20;
  }
  return v7;
}

uint64_t llvm::LLParser::parseLandingPad(char **this, llvm::Instruction **a2, llvm::LLParser::PerFunctionState *a3)
{
  uint64_t v37 = 0;
  v38[0] = "expected type";
  __int16 v39 = 259;
  if (llvm::LLParser::parseType((llvm::LLParser *)this, &v37, (const llvm::Twine *)v38, 0)) {
    return 1;
  }
  __int16 v39 = 257;
  BOOL v9 = llvm::LandingPadInst::Create(v37, 0, v38, 0, v6);
  int v10 = *((_DWORD *)this + 56);
  int v11 = v10;
  if (v10 == 316)
  {
    int v11 = llvm::LLLexer::LexToken((llvm::LLLexer *)(this + 21));
    *((_DWORD *)this + 56) = v11;
  }
  *((_WORD *)v9 + 9) = *((_WORD *)v9 + 9) & 0xFFFE | (v10 == 316);
  if ((v11 - 317) > 1)
  {
LABEL_17:
    uint64_t v7 = 0;
    *a2 = v9;
    return v7;
  }
  while (1)
  {
    *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLLexer *)(this + 21));
    uint64_t v36 = 0;
    uint64_t v12 = this[27];
    if (llvm::LLParser::parseTypeAndValue((llvm::ConstantInt **)this, &v36, a3))
    {
      uint64_t v7 = 1;
      if (!v9) {
        return v7;
      }
      goto LABEL_19;
    }
    unint64_t v14 = (unsigned __int8 *)v36;
    int v15 = *(unsigned __int8 *)(*(void *)v36 + 8);
    if (v11 == 317)
    {
      if (v15 != 17) {
        goto LABEL_12;
      }
      v38[0] = "'catch' clause has an invalid type";
    }
    else
    {
      if (v15 == 17) {
        goto LABEL_12;
      }
      v38[0] = "'filter' clause has an invalid type";
    }
    __int16 v39 = 259;
    llvm::LLLexer::Error((uint64_t)(this + 21), v12, (llvm::Twine *)v38);
LABEL_12:
    if (v14[16] >= 0x15u) {
      break;
    }
    llvm::LandingPadInst::addClause(v9, (llvm::Constant *)v14);
    int v11 = *((_DWORD *)this + 56);
    if ((v11 - 317) >= 2) {
      goto LABEL_17;
    }
  }
  v38[0] = "clause argument must be a constant";
  __int16 v39 = 259;
  uint64_t v7 = llvm::LLLexer::Error((uint64_t)(this + 21), v12, (llvm::Twine *)v38);
  if (!v9) {
    return v7;
  }
LABEL_19:
  if ((*((unsigned char *)v9 + 23) & 8) != 0)
  {
    int v34 = llvm::UndefValue::get(*(llvm::UndefValue **)v9, v13);
    llvm::ValueAsMetadata::handleRAUW((uint64_t *)v9, v34, v35);
  }
  uint64_t v16 = (unsigned __int8 *)*((void *)v9 + 6);
  if (v16)
  {
    int v23 = *v16;
    if ((v23 - 4) > 0x1E)
    {
      if ((v23 - 3) >= 0xFFFFFFFE) {
        uint64_t v33 = *((void *)v9 + 6);
      }
      else {
        uint64_t v33 = 0;
      }
      if ((v23 - 3) < 0xFFFFFFFE)
      {
        if (v23 == 3) {
          *((void *)v16 + 1) = 0;
        }
        goto LABEL_22;
      }
      unint64_t v25 = v33 + 8;
    }
    else
    {
      if ((v16[1] & 0x7F) != 2 && !*((_DWORD *)v16 + 3)) {
        goto LABEL_22;
      }
      uint64_t v24 = *((void *)v16 + 2);
      if ((v24 & 4) == 0) {
        goto LABEL_22;
      }
      unint64_t v25 = v24 & 0xFFFFFFFFFFFFFFF8;
      if (!v25) {
        goto LABEL_22;
      }
    }
    v38[0] = (char *)v9 + 48;
    sub_1CC5FA668(v25 + 16, v38);
  }
LABEL_22:
  llvm::Value::~Value(v9, v13);
  int v17 = *((_DWORD *)v9 + 5);
  if ((v17 & 0x40000000) != 0)
  {
    int v28 = (char *)*((void *)v9 - 1);
    int v27 = (char *)v9 - 8;
    int v26 = v28;
    uint64_t v29 = v17 & 0x7FFFFFF;
    if (v29)
    {
      uint64_t v30 = 32 * v29;
      do
      {
        uint64_t v31 = &v26[v30];
        if (*(void *)&v26[v30 - 32])
        {
          **((void **)v31 - 2) = *((void *)v31 - 3);
          uint64_t v32 = *((void *)v31 - 3);
          if (v32) {
            *(void *)(v32 + 16) = *((void *)v31 - 2);
          }
        }
        v30 -= 32;
      }
      while (v30);
    }
    operator delete(v26);
    uint64_t v19 = v27;
  }
  else
  {
    uint64_t v18 = v17 & 0x7FFFFFF;
    uint64_t v19 = (char *)v9 - 32 * v18;
    if (v18)
    {
      int v20 = (void **)((char *)v9 - 16);
      uint64_t v21 = -32 * v18;
      do
      {
        if (*(v20 - 2))
        {
          *llvm::Instruction *v20 = *(v20 - 1);
          uint64_t v22 = (uint64_t)*(v20 - 1);
          if (v22) {
            *(void *)(v22 + 16) = *v20;
          }
        }
        v20 -= 4;
        v21 += 32;
      }
      while (v21);
    }
    if (v17 < 0) {
      uint64_t v19 = &v19[-*((void *)v19 - 1) - 8];
    }
  }
  operator delete(v19);
  return v7;
}

uint64_t llvm::LLParser::parseLoad(llvm::LLParser *this, llvm::Instruction **a2, llvm::LLParser::PerFunctionState *a3)
{
  __int16 v35 = 0;
  unsigned __int8 v34 = 0;
  int v33 = 0;
  unsigned __int8 v32 = 1;
  int v6 = (llvm::LLParser *)((char *)this + 168);
  int v7 = *((_DWORD *)this + 56);
  int v8 = v7;
  if (v7 == 69)
  {
    int v8 = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
    *((_DWORD *)this + 56) = v8;
  }
  if (v8 == 68) {
    *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v6);
  }
  uint64_t v31 = 0;
  BOOL v9 = (char *)*((void *)this + 27);
  int v26 = (void **)"expected type";
  v30[0] = 259;
  if (llvm::LLParser::parseType(this, &v31, (const llvm::Twine *)&v26, 0)) {
    return 1;
  }
  if (llvm::LLParser::parseToken((uint64_t)this, 4, "expected comma after load's type")) {
    return 1;
  }
  uint64_t v36 = 0;
  uint64_t v12 = (char *)*((void *)this + 27);
  if ((llvm::LLParser::parseTypeAndValue((llvm::ConstantInt **)this, &v36, a3) & 1) != 0
    || v7 == 69
    && ((llvm::LLParser::parseScope(this, &v32) & 1) != 0
     || (llvm::LLParser::parseOrdering((uint64_t)this, &v33) & 1) != 0))
  {
    return 1;
  }
  if (llvm::LLParser::parseOptionalCommaAlign((uint64_t)this, &v35, &v34)) {
    return 1;
  }
  int v13 = v36;
  uint64_t v14 = *(void *)v36;
  if (*(unsigned char *)(*(void *)v36 + 8) != 15 || (int v15 = v31, v16 = *((unsigned __int8 *)v31 + 8), v16 == 14) || v16 == 7)
  {
    uint64_t v22 = "load operand must be a pointer to a first class type";
LABEL_36:
    int v26 = (void **)v22;
    v30[0] = 259;
    return llvm::LLLexer::Error((uint64_t)v6, v12, (llvm::Twine *)&v26);
  }
  if (v7 == 69 && !HIBYTE(v35))
  {
    uint64_t v22 = "atomic load must have explicit non-zero alignment";
    goto LABEL_36;
  }
  __int16 v17 = v33;
  if ((v33 - 5) <= 1)
  {
    uint64_t v22 = "atomic load cannot use Release ordering";
    goto LABEL_36;
  }
  uint64_t v18 = *(llvm::Type **)(v14 + 24);
  if (!v18 || v18 == v31)
  {
    int v26 = (void **)v30;
    int v27 = (void **)v30;
    uint64_t v28 = 4;
    int v29 = 0;
    if (HIBYTE(v35))
    {
      char Alignment = v35;
LABEL_30:
      int v20 = operator new(0x60uLL);
      uint64_t v21 = (llvm::Instruction *)(v20 + 8);
      v20[13] = v20[13] & 0x38000000 | 1;
      *(void *)int v20 = 0;
      *((void *)v20 + 1) = 0;
      *((void *)v20 + 2) = 0;
      *((void *)v20 + 3) = v20 + 8;
      __int16 v25 = 257;
      llvm::LoadInst::LoadInst((llvm::Value *)(v20 + 8), (uint64_t)v15, (uint64_t)v13, (const char **)__p, v8 == 68, Alignment, v17, v32, 0);
      *a2 = v21;
      uint64_t v10 = 2 * v34;
      goto LABEL_31;
    }
    if (v16 <= 0x11)
    {
      if (((1 << v16) & 0xAC7F) != 0)
      {
LABEL_29:
        char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*((void *)this + 41) + 272), v15, 1);
        goto LABEL_30;
      }
      if (((1 << v16) & 0x30000) != 0) {
        goto LABEL_28;
      }
    }
    if ((v16 & 0xFE) == 0x12 || v16 == 21)
    {
LABEL_28:
      if (llvm::Type::isSizedDerivedType((uint64_t)v31, (uint64_t)&v26)) {
        goto LABEL_29;
      }
    }
    __p[0] = "loading unsized types is not allowed";
    __int16 v25 = 259;
    uint64_t v10 = llvm::LLLexer::Error((uint64_t)v6, v9, (llvm::Twine *)__p);
LABEL_31:
    if (v27 != v26) {
      free(v27);
    }
    return v10;
  }
  sub_1CC196358((uint64_t)__p, v31, **(llvm::Type ***)(v14 + 16));
  v30[0] = 260;
  int v26 = __p;
  uint64_t v10 = llvm::LLLexer::Error((uint64_t)v6, v9, (llvm::Twine *)&v26);
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  return v10;
}

uint64_t llvm::LLParser::parseStore(llvm::LLParser *this, llvm::Instruction **a2, llvm::LLParser::PerFunctionState *a3)
{
  __int16 v36 = 0;
  unsigned __int8 v35 = 0;
  int v34 = 0;
  unsigned __int8 v33 = 1;
  int v6 = (llvm::LLParser *)((char *)this + 168);
  int v7 = *((_DWORD *)this + 56);
  int v8 = v7;
  if (v7 == 69)
  {
    int v8 = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
    *((_DWORD *)this + 56) = v8;
  }
  if (v8 == 68) {
    *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v6);
  }
  BOOL v38 = 0;
  BOOL v9 = (char *)*((void *)this + 27);
  if (llvm::LLParser::parseTypeAndValue((llvm::ConstantInt **)this, &v38, a3)) {
    return 1;
  }
  if (llvm::LLParser::parseToken((uint64_t)this, 4, "expected ',' after store operand")) {
    return 1;
  }
  uint64_t v37 = 0;
  uint64_t v12 = (char *)*((void *)this + 27);
  if ((llvm::LLParser::parseTypeAndValue((llvm::ConstantInt **)this, &v37, a3) & 1) != 0
    || v7 == 69
    && ((llvm::LLParser::parseScope(this, &v33) & 1) != 0
     || (llvm::LLParser::parseOrdering((uint64_t)this, &v34) & 1) != 0))
  {
    return 1;
  }
  if (llvm::LLParser::parseOptionalCommaAlign((uint64_t)this, &v36, &v35)) {
    return 1;
  }
  int v13 = v37;
  if (*(unsigned char *)(*(void *)v37 + 8) != 15)
  {
    uint64_t v28 = "store operand must be a pointer";
    v32[0] = 259;
    uint64_t v24 = (uint64_t)v6;
    __int16 v25 = v12;
    return llvm::LLLexer::Error(v24, v25, (llvm::Twine *)&v28);
  }
  uint64_t v14 = v38;
  int v15 = *(llvm::Type **)v38;
  unsigned int v16 = *(unsigned __int8 *)(*(void *)v38 + 8);
  if (v16 == 14 || v16 == 7)
  {
    int v23 = "store operand must be a first class value";
LABEL_41:
    uint64_t v28 = v23;
    v32[0] = 259;
    uint64_t v24 = (uint64_t)v6;
    __int16 v25 = v9;
    return llvm::LLLexer::Error(v24, v25, (llvm::Twine *)&v28);
  }
  uint64_t v18 = *(llvm::Type **)(*(void *)v37 + 24);
  if (v18 && v18 != v15)
  {
    int v23 = "stored value and pointer type do not match";
    goto LABEL_41;
  }
  if (v7 == 69 && !HIBYTE(v36))
  {
    int v23 = "atomic store must have explicit non-zero alignment";
    goto LABEL_41;
  }
  __int16 v19 = v34;
  if ((v34 & 0xFFFFFFFD) == 4)
  {
    int v23 = "atomic store cannot use Acquire ordering";
    goto LABEL_41;
  }
  uint64_t v28 = (const char *)v32;
  int v29 = (char *)v32;
  uint64_t v30 = 4;
  int v31 = 0;
  if (HIBYTE(v36))
  {
    char Alignment = v36;
LABEL_33:
    uint64_t v21 = operator new(0x80uLL);
    v21[21] = v21[21] & 0x38000000 | 2;
    uint64_t v22 = (llvm::Instruction *)(v21 + 16);
    *(void *)uint64_t v21 = 0;
    *((void *)v21 + 1) = 0;
    *((void *)v21 + 2) = 0;
    *((void *)v21 + 3) = v21 + 16;
    *((void *)v21 + 4) = 0;
    *((void *)v21 + 5) = 0;
    *((void *)v21 + 6) = 0;
    *((void *)v21 + 7) = v21 + 16;
    llvm::StoreInst::StoreInst((llvm::Value *)(v21 + 16), (uint64_t)v14, (uint64_t)v13, v8 == 68, Alignment, v19, v33, 0);
    *a2 = v22;
    uint64_t v10 = 2 * v35;
    goto LABEL_34;
  }
  if (v16 <= 0x11)
  {
    if (((1 << v16) & 0xAC7F) != 0)
    {
LABEL_32:
      char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*((void *)this + 41) + 272), v15, 1);
      goto LABEL_33;
    }
    if (((1 << v16) & 0x30000) != 0) {
      goto LABEL_48;
    }
  }
  if ((v16 & 0xFE) == 0x12 || v16 == 21)
  {
LABEL_48:
    if (llvm::Type::isSizedDerivedType((uint64_t)v15, (uint64_t)&v28))
    {
      int v15 = *(llvm::Type **)v14;
      goto LABEL_32;
    }
  }
  int v26 = "storing unsized types is not allowed";
  __int16 v27 = 259;
  uint64_t v10 = llvm::LLLexer::Error((uint64_t)v6, v9, (llvm::Twine *)&v26);
LABEL_34:
  if (v29 != v28) {
    free(v29);
  }
  return v10;
}

uint64_t llvm::LLParser::parseAtomicRMW(llvm::LLParser *this, llvm::Instruction **a2, llvm::LLParser::PerFunctionState *a3)
{
  unsigned __int8 v48 = 0;
  int v47 = 0;
  unsigned __int8 v46 = 1;
  __int16 v45 = 0;
  int v6 = *((_DWORD *)this + 56);
  int v7 = v6;
  if (v6 == 68)
  {
    int v7 = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
    *((_DWORD *)this + 56) = v7;
  }
  int v8 = (char *)this + 168;
  int v9 = 0;
  int v10 = 0;
  int v11 = 1;
  switch(v7)
  {
    case 270:
      goto LABEL_19;
    case 271:
      int v11 = 0;
      int v10 = 0;
      int v9 = 4;
      goto LABEL_19;
    case 272:
      int v11 = 0;
      int v10 = 0;
      int v9 = 7;
      goto LABEL_19;
    case 273:
      int v11 = 0;
      int v10 = 0;
      int v9 = 8;
      goto LABEL_19;
    case 274:
      int v11 = 0;
      int v10 = 0;
      int v9 = 9;
      goto LABEL_19;
    case 275:
      int v11 = 0;
      int v10 = 0;
      int v9 = 10;
      goto LABEL_19;
    case 277:
      int v11 = 0;
      int v10 = 0;
      int v9 = 1;
      goto LABEL_19;
    case 278:
      int v11 = 0;
      int v10 = 1;
      int v9 = 11;
      goto LABEL_19;
    case 279:
      int v11 = 0;
      int v10 = 0;
      int v9 = 2;
      goto LABEL_19;
    case 280:
      int v11 = 0;
      int v10 = 1;
      int v9 = 12;
      goto LABEL_19;
    case 292:
      int v11 = 0;
      int v10 = 0;
      int v9 = 3;
      goto LABEL_19;
    case 293:
      int v11 = 0;
      int v10 = 0;
      int v9 = 5;
      goto LABEL_19;
    case 294:
      int v11 = 0;
      int v10 = 0;
      int v9 = 6;
LABEL_19:
      int v50 = 0;
      *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
      unsigned int v16 = (char *)*((void *)this + 27);
      if (llvm::LLParser::parseTypeAndValue((llvm::ConstantInt **)this, &v50, a3)) {
        return 1;
      }
      if (llvm::LLParser::parseToken((uint64_t)this, 4, "expected ',' after atomicrmw address")) {
        return 1;
      }
      __int16 v49 = 0;
      __int16 v17 = (char *)*((void *)this + 27);
      if ((llvm::LLParser::parseTypeAndValue((llvm::ConstantInt **)this, &v49, a3) & 1) != 0
        || (llvm::LLParser::parseScope(this, &v46) & 1) != 0
        || (llvm::LLParser::parseOrdering((uint64_t)this, &v47) & 1) != 0
        || (llvm::LLParser::parseOptionalCommaAlign((uint64_t)this, &v45, &v48) & 1) != 0)
      {
        return 1;
      }
      __int16 v38 = v47;
      if (v47 == 1)
      {
        uint64_t v12 = "atomicrmw cannot be unordered";
LABEL_12:
        v43[0] = v12;
        __int16 v44 = 259;
        int v13 = (char *)*((void *)this + 27);
        uint64_t v14 = (char *)this + 168;
        return llvm::LLLexer::Error((uint64_t)v14, v13, (llvm::Twine *)v43);
      }
      uint64_t v18 = v50;
      if (*(unsigned char *)(*(void *)v50 + 8) != 15)
      {
        v43[0] = "atomicrmw operand must be a pointer";
        __int16 v44 = 259;
        uint64_t v14 = v8;
        int v13 = v16;
        return llvm::LLLexer::Error((uint64_t)v14, v13, (llvm::Twine *)v43);
      }
      __int16 v19 = (uint64_t *)v49;
      int v20 = *(unsigned __int8 **)v49;
      uint64_t v21 = *(unsigned __int8 **)(*(void *)v50 + 24);
      if (v21 && v21 != v20)
      {
        unsigned __int8 v35 = "atomicrmw value and pointer type do not match";
LABEL_51:
        v43[0] = v35;
        __int16 v36 = 259;
LABEL_54:
        __int16 v44 = v36;
        uint64_t v14 = v8;
        int v13 = v17;
        return llvm::LLLexer::Error((uint64_t)v14, v13, (llvm::Twine *)v43);
      }
      unsigned int v22 = v20[8];
      if (v11)
      {
        if (v22 >= 7 && v22 != 13)
        {
          __int16 v42 = 1283;
          __int16 v39 = "atomicrmw ";
          OperationName = "xchg";
          uint64_t v41 = 4;
          int v23 = " operand must be an integer or floating point type";
LABEL_53:
          v43[0] = &v39;
          v43[2] = v23;
          __int16 v36 = 770;
          goto LABEL_54;
        }
      }
      else if (v10)
      {
        if (v22 >= 7)
        {
          __int16 v42 = 1283;
          __int16 v39 = "atomicrmw ";
          OperationName = llvm::AtomicRMWInst::getOperationName(v9);
          uint64_t v41 = v24;
          int v23 = " operand must be a floating point type";
          goto LABEL_53;
        }
      }
      else if (v22 != 13)
      {
        __int16 v42 = 1283;
        __int16 v39 = "atomicrmw ";
        OperationName = llvm::AtomicRMWInst::getOperationName(v9);
        uint64_t v41 = v37;
        int v23 = " operand must be an integer";
        goto LABEL_53;
      }
      unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v20);
      if (v25 == 1) {
      if (PrimitiveSizeInBits < 8
      }
        || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)PrimitiveSizeInBits), v27.i16[0] = vaddlv_u8(v27), v27.i32[0] >= 2u))
      {
        unsigned __int8 v35 = "atomicrmw operand must be power-of-two byte-sized integer";
        goto LABEL_51;
      }
      unint64_t v29 = (unint64_t)(sub_1CB83544C(*(void *)(*((void *)a3 + 1) + 40) + 272, *v19) + 7) >> 3;
      if (v28 == 1) {
      char v30 = __clz(v29);
      }
      int v31 = (char *)operator new(0x80uLL);
      *((void *)v31 + 1) = 0;
      *((void *)v31 + 2) = 0;
      *(void *)int v31 = 0;
      *((void *)v31 + 5) = 0;
      *((void *)v31 + 6) = 0;
      *((void *)v31 + 4) = 0;
      *((void *)v31 + 8) = *v19;
      unsigned __int8 v32 = (llvm::Instruction *)(v31 + 64);
      *((void *)v31 + 3) = v31 + 64;
      *((void *)v31 + 7) = v31 + 64;
      unsigned __int8 v33 = 63 - v30;
      if (HIBYTE(v45)) {
        unsigned __int8 v33 = v45;
      }
      char v34 = v46;
      *((void *)v31 + 9) = 0;
      v31[80] = 65;
      v31[81] = 0;
      *((_WORD *)v31 + 41) = 0;
      *((_DWORD *)v31 + 21) = 2;
      *(_OWORD *)(v31 + 88) = 0u;
      *(_OWORD *)(v31 + 104) = 0u;
      *((_DWORD *)v31 + 30) = 0;
      llvm::AtomicRMWInst::Init((uint64_t)(v31 + 64), v9, (uint64_t)v18, (uint64_t)v19, v33, v38, v34);
      *((_WORD *)v32 + 9) = *((_WORD *)v32 + 9) & 0xFFFE | (v6 == 68);
      *a2 = v32;
      return 2 * v48;
    default:
      uint64_t v12 = "expected binary operation in atomicrmw";
      goto LABEL_12;
  }
}

uint64_t llvm::LLParser::parseGetElementPtr(llvm::LLParser *this, llvm::Instruction **a2, llvm::LLParser::PerFunctionState *a3)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  __int16 v49 = 0;
  int v50 = 0;
  int v6 = *((_DWORD *)this + 56);
  if (v6 == 88) {
    *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  }
  unsigned __int8 v48 = 0;
  int v7 = (char *)*((void *)this + 27);
  p_p = "expected type";
  __int16 v54 = 259;
  if (llvm::LLParser::parseType(this, &v48, (const llvm::Twine *)&p_p, 0)) {
    return 1;
  }
  if (llvm::LLParser::parseToken((uint64_t)this, 4, "expected comma after getelementptr's type")) {
    return 1;
  }
  int v10 = (char *)*((void *)this + 27);
  if (llvm::LLParser::parseTypeAndValue((llvm::ConstantInt **)this, &v50, a3)) {
    return 1;
  }
  uint64_t v11 = *(void *)v50;
  if ((*(_DWORD *)(*(void *)v50 + 8) & 0xFE) == 0x12)
  {
    uint64_t v12 = **(void **)(v11 + 16);
    int v13 = *(unsigned __int8 *)(v12 + 8);
  }
  else
  {
    int v13 = *(_DWORD *)(*(void *)v50 + 8);
    uint64_t v12 = *(void *)v50;
  }
  if (v13 == 15)
  {
    __int16 v39 = v10;
    uint64_t v14 = v48;
    int v15 = *(llvm::Type **)(v12 + 24);
    if (v15) {
      BOOL v16 = v15 == v48;
    }
    else {
      BOOL v16 = 1;
    }
    if (v16)
    {
      p_p = v53;
      uint64_t v52 = 0x1000000000;
      if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12) {
        unint64_t v17 = *(unsigned int *)(v11 + 32) | ((unint64_t)(*(_DWORD *)(v11 + 8) == 19) << 32);
      }
      else {
        unint64_t v17 = 0;
      }
      uint64_t v40 = (uint64_t *)v50;
      if (*((_DWORD *)this + 56) == 4)
      {
        unint64_t v18 = HIDWORD(v17);
        while (1)
        {
          int v19 = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
          *((_DWORD *)this + 56) = v19;
          if (v19 == 441)
          {
            uint64_t v8 = 2;
            unsigned int v26 = v52;
            goto LABEL_41;
          }
          int v20 = (char *)*((void *)this + 27);
          if (llvm::LLParser::parseTypeAndValue((llvm::ConstantInt **)this, &v49, a3))
          {
            uint64_t v8 = 1;
            goto LABEL_59;
          }
          uint64_t v21 = *(void *)v49;
          int v22 = *(_DWORD *)(*(void *)v49 + 8);
          if ((*(_DWORD *)(*(void *)v49 + 8) & 0xFE) == 0x12)
          {
            if (*(unsigned char *)(**(void **)(v21 + 16) + 8) != 13) {
              goto LABEL_68;
            }
            int v23 = *(_DWORD *)(v21 + 32);
            int v24 = v22 == 19;
            if (v17 | v18)
            {
              if (v17 != v23 || v18 != v24)
              {
                __int16 v38 = "getelementptr vector index has a wrong number of elements";
LABEL_69:
                std::string __p = v38;
                v47[0] = 259;
                uint64_t v8 = llvm::LLLexer::Error((uint64_t)this + 168, v20, (llvm::Twine *)&__p);
                goto LABEL_59;
              }
            }
            else
            {
              LODWORD(v17) = v23;
              LODWORD(v18) = v24;
            }
          }
          else if (v22 != 13)
          {
LABEL_68:
            __int16 v38 = "getelementptr index must be an integer";
            goto LABEL_69;
          }
          if (v52 >= (unint64_t)HIDWORD(v52)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)p_p + v52) = v49;
          unsigned int v26 = v52 + 1;
          LODWORD(v52) = v52 + 1;
          if (*((_DWORD *)this + 56) != 4)
          {
            uint64_t v8 = 0;
LABEL_41:
            std::string __p = v47;
            __int16 v44 = v47;
            uint64_t v45 = 4;
            int v46 = 0;
            if (!v26) {
              goto LABEL_52;
            }
            unsigned int v27 = *((unsigned __int8 *)v14 + 8);
            if (v27 <= 0x11)
            {
              if (((1 << v27) & 0xAC7F) != 0) {
                goto LABEL_52;
              }
              if (((1 << v27) & 0x30000) != 0) {
                goto LABEL_72;
              }
            }
            if ((v27 & 0xFE) == 0x12 || v27 == 21)
            {
LABEL_72:
              if (llvm::Type::isSizedDerivedType((uint64_t)v14, (uint64_t)&__p))
              {
                unsigned int v26 = v52;
                goto LABEL_52;
              }
            }
            uint64_t v37 = "base element of getelementptr must be sized";
LABEL_65:
            v41[0] = v37;
            __int16 v42 = 259;
            uint64_t v8 = llvm::LLLexer::Error((uint64_t)this + 168, v39, (llvm::Twine *)v41);
            goto LABEL_57;
          }
        }
      }
      uint64_t v8 = 0;
      unsigned int v26 = 0;
      std::string __p = v47;
      __int16 v44 = v47;
      uint64_t v45 = 4;
      int v46 = 0;
LABEL_52:
      if (!llvm::GetElementPtrInst::getIndexedType((uint64_t)v14, (uint64_t)p_p, v26))
      {
        uint64_t v37 = "invalid getelementptr indices";
        goto LABEL_65;
      }
      unint64_t v29 = (uint64_t *)p_p;
      uint64_t v30 = v52;
      uint64_t v31 = (v52 + 1);
      BOOL v32 = v52 == -1;
      __int16 v42 = 257;
      unsigned __int8 v33 = operator new(32 * v31 + 80);
      char v34 = &v33[4 * v31];
      *((_DWORD *)v34 + 5) = *((_DWORD *)v34 + 5) & 0x38000000 | v31 & 0x7FFFFFF;
      if (!v32)
      {
        do
        {
          void *v33 = 0;
          v33[1] = 0;
          v33[2] = 0;
          v33[3] = v34;
          v33 += 4;
        }
        while (v33 != v34);
      }
      sub_1CB845A7C((uint64_t)v14, v40, (uint64_t)v29, v30);
      *char v34 = v35;
      v34[1] = 0;
      int v36 = *((_DWORD *)v34 + 5) & 0xC0000000 | v31 & 0x7FFFFFF;
      *((_DWORD *)v34 + 4) = 62;
      *((_DWORD *)v34 + 5) = v36;
      *(_OWORD *)(v34 + 3) = 0u;
      *(_OWORD *)(v34 + 5) = 0u;
      *((_DWORD *)v34 + 14) = 0;
      v34[8] = v14;
      v34[9] = llvm::GetElementPtrInst::getIndexedType((uint64_t)v14, (uint64_t)v29, v30);
      llvm::GetElementPtrInst::init((uint64_t ***)v34, (uint64_t **)v40, v29, v30, v41);
      *a2 = (llvm::Instruction *)v34;
      if (v6 == 88) {
        *((unsigned char *)v34 + 17) |= 2u;
      }
LABEL_57:
      if (v44 != __p) {
        free(v44);
      }
LABEL_59:
      if (p_p != v53) {
        free(p_p);
      }
    }
    else
    {
      sub_1CC196358((uint64_t)&__p, v48, **(llvm::Type ***)(v12 + 16));
      __int16 v54 = 260;
      p_p = &__p;
      uint64_t v8 = llvm::LLLexer::Error((uint64_t)this + 168, v7, (llvm::Twine *)&p_p);
      if (SHIBYTE(v45) < 0) {
        operator delete(__p);
      }
    }
  }
  else
  {
    p_p = "base of getelementptr must be a pointer";
    __int16 v54 = 259;
    return llvm::LLLexer::Error((uint64_t)this + 168, v10, (llvm::Twine *)&p_p);
  }
  return v8;
}

llvm::Value *sub_1CC199EFC(uint64_t a1, uint64_t *a2, uint64_t a3, const char **a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (char *)operator new(0xA0uLL);
  int v13 = v12;
  uint64_t v14 = 0;
  int v15 = (llvm::Value *)(v12 + 96);
  *((_DWORD *)v12 + 29) = *((_DWORD *)v12 + 29) & 0x38000000 | 3;
  do
  {
    BOOL v16 = &v12[v14];
    *(void *)BOOL v16 = 0;
    *((void *)v16 + 1) = 0;
    *((void *)v16 + 2) = 0;
    *((void *)v16 + 3) = v15;
    v14 += 32;
  }
  while (v14 != 96);
  uint64_t v17 = *a2;
  *(_OWORD *)(v12 + 120) = 0u;
  unint64_t v18 = v12 + 120;
  *((void *)v12 + 12) = v17;
  *((void *)v12 + 13) = 0;
  unsigned int v19 = *((_DWORD *)v12 + 29) & 0xC0000000 | 3;
  *((_DWORD *)v12 + 28) = 85;
  *((_DWORD *)v12 + 29) = v19;
  *(_OWORD *)(v12 + 136) = 0u;
  *((_DWORD *)v12 + 38) = 0;
  if (a5)
  {
    uint64_t v31 = *(void *)(a5 + 40);
    BOOL v32 = (uint64_t *)(a5 + 24);
    *((void *)v12 + 17) = v31;
    *(_WORD *)(v31 + 18) &= ~0x8000u;
    if ((v12[119] & 0x10) != 0)
    {
      uint64_t v48 = *(void *)(v31 + 56);
      if (v48)
      {
        __int16 v49 = *(llvm::ValueSymbolTable **)(v48 + 104);
        if (v49) {
          llvm::ValueSymbolTable::reinsertValue(v49, v15);
        }
      }
    }
    uint64_t v33 = *v32;
    *((void *)v13 + 15) = *v32;
    *((void *)v13 + 16) = v32;
    *(void *)(v33 + 8) = v18;
    *BOOL v32 = (uint64_t)v18;
  }
  if (*(void *)v13)
  {
    **((void **)v13 + 2) = *((void *)v13 + 1);
    uint64_t v50 = *((void *)v13 + 1);
    if (v50) {
      *(void *)(v50 + 16) = *((void *)v13 + 2);
    }
  }
  *(void *)int v13 = a1;
  if (a1)
  {
    uint64_t v22 = *(void *)(a1 + 8);
    uint64_t v21 = (void *)(a1 + 8);
    uint64_t v20 = v22;
    *((void *)v13 + 1) = v22;
    if (v22) {
      *(void *)(v20 + 16) = v13 + 8;
    }
    *((void *)v13 + 2) = v21;
    void *v21 = v13;
  }
  if (*((void *)v13 + 4))
  {
    **((void **)v13 + 6) = *((void *)v13 + 5);
    uint64_t v51 = *((void *)v13 + 5);
    if (v51) {
      *(void *)(v51 + 16) = *((void *)v13 + 6);
    }
  }
  int v24 = a2 + 1;
  uint64_t v23 = a2[1];
  *((void *)v13 + 5) = v23;
  *((void *)v13 + 4) = a2;
  if (v23) {
    *(void *)(v23 + 16) = v13 + 40;
  }
  __int16 v25 = v13 + 64;
  uint64_t v26 = *((void *)v13 + 8);
  *((void *)v13 + 6) = v24;
  *int v24 = v13 + 32;
  if (v26)
  {
    **((void **)v13 + 10) = *((void *)v13 + 9);
    uint64_t v52 = *((void *)v13 + 9);
    if (v52) {
      *(void *)(v52 + 16) = *((void *)v13 + 10);
    }
  }
  void *v25 = a3;
  if (a3)
  {
    uint64_t v29 = *(void *)(a3 + 8);
    uint64_t v28 = (void *)(a3 + 8);
    uint64_t v27 = v29;
    *((void *)v13 + 9) = v29;
    if (v29) {
      *(void *)(v27 + 16) = v13 + 72;
    }
    *((void *)v13 + 10) = v28;
    *uint64_t v28 = v25;
  }
  llvm::Value::setNameImpl(v15, a4);
  if (!v13[112])
  {
    if ((v13[119] & 0x10) == 0) {
      goto LABEL_38;
    }
    uint64_t v34 = ***(void ***)v15;
    uint64_t v35 = *(void *)(v34 + 152);
    uint64_t v36 = *(unsigned int *)(v34 + 168);
    if (v36)
    {
      LODWORD(v37) = (v36 - 1) & ((v15 >> 4) ^ (v15 >> 9));
      __int16 v38 = (llvm::Value **)(v35 + 16 * v37);
      __int16 v39 = *v38;
      if (*v38 == v15)
      {
LABEL_30:
        __int16 v42 = v38[1];
        unint64_t v45 = *(void *)v42;
        unint64_t v43 = (char *)v42 + 16;
        unint64_t v44 = v45;
        if (v45 >= 5 && *(_DWORD *)v43 == *(_DWORD *)"llvm." && v43[4] == aLlvm_1[4])
        {
          *((_DWORD *)v13 + 32) |= 0x2000u;
          int v47 = llvm::Function::lookupIntrinsicID(v43, v44);
LABEL_37:
          *((_DWORD *)v13 + 33) = v47;
          goto LABEL_18;
        }
LABEL_38:
        int v47 = 0;
        *((_DWORD *)v13 + 32) &= ~0x2000u;
        goto LABEL_37;
      }
      int v40 = 1;
      while (v39 != (llvm::Value *)-4096)
      {
        int v41 = v37 + v40++;
        uint64_t v37 = v41 & (v36 - 1);
        __int16 v39 = *(llvm::Value **)(v35 + 16 * v37);
        if (v39 == v15)
        {
          __int16 v38 = (llvm::Value **)(v35 + 16 * v37);
          goto LABEL_30;
        }
      }
    }
    __int16 v38 = (llvm::Value **)(v35 + 16 * v36);
    goto LABEL_30;
  }
LABEL_18:
  if (a6) {
    llvm::Instruction::copyMetadata((uint64_t)v15, a6, 0, 0);
  }
  return v15;
}

llvm::Value *sub_1CC19A1F8(uint64_t a1, int a2, const char **a3, uint64_t a4)
{
  uint64_t v8 = operator new(0x48uLL);
  int v9 = v8;
  v8[1] = a1;
  int v10 = (llvm::Value *)(v8 + 1);
  void *v8 = 0;
  v8[2] = 0;
  void v8[3] = 0x4000000000000053;
  *((_OWORD *)v8 + 2) = 0u;
  uint64_t v11 = (char *)(v8 + 4);
  *((_OWORD *)v8 + 3) = 0u;
  *((_DWORD *)v8 + 16) = 0;
  if (a4)
  {
    uint64_t v16 = *(void *)(a4 + 40);
    uint64_t v17 = (uint64_t *)(a4 + 24);
    v8[6] = v16;
    *(_WORD *)(v16 + 18) &= ~0x8000u;
    if ((*((unsigned char *)v8 + 31) & 0x10) != 0)
    {
      uint64_t v33 = *(void *)(v16 + 56);
      if (v33)
      {
        uint64_t v34 = *(llvm::ValueSymbolTable **)(v33 + 104);
        if (v34) {
          llvm::ValueSymbolTable::reinsertValue(v34, v10);
        }
      }
    }
    uint64_t v18 = *v17;
    v9[4] = *v17;
    v9[5] = v17;
    *(void *)(v18 + 8) = v11;
    *uint64_t v17 = (uint64_t)v11;
  }
  *((_DWORD *)v9 + 17) = a2;
  llvm::Value::setNameImpl(v10, a3);
  if (!*((unsigned char *)v9 + 24))
  {
    if ((*((unsigned char *)v9 + 31) & 0x10) == 0) {
      goto LABEL_24;
    }
    uint64_t v19 = ***(void ***)v10;
    uint64_t v20 = *(void *)(v19 + 152);
    uint64_t v21 = *(unsigned int *)(v19 + 168);
    if (v21)
    {
      LODWORD(v22) = (v21 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      uint64_t v23 = (llvm::Value **)(v20 + 16 * v22);
      int v24 = *v23;
      if (*v23 == v10)
      {
LABEL_16:
        uint64_t v27 = v23[1];
        unint64_t v30 = *(void *)v27;
        uint64_t v28 = (char *)v27 + 16;
        unint64_t v29 = v30;
        if (v30 >= 5 && *(_DWORD *)v28 == *(_DWORD *)"llvm." && v28[4] == aLlvm_1[4])
        {
          *((_DWORD *)v9 + 10) |= 0x2000u;
          int v32 = llvm::Function::lookupIntrinsicID(v28, v29);
LABEL_23:
          *((_DWORD *)v9 + 11) = v32;
          goto LABEL_3;
        }
LABEL_24:
        int v32 = 0;
        *((_DWORD *)v9 + 10) &= ~0x2000u;
        goto LABEL_23;
      }
      int v25 = 1;
      while (v24 != (llvm::Value *)-4096)
      {
        int v26 = v22 + v25++;
        uint64_t v22 = v26 & (v21 - 1);
        int v24 = *(llvm::Value **)(v20 + 16 * v22);
        if (v24 == v10)
        {
          uint64_t v23 = (llvm::Value **)(v20 + 16 * v22);
          goto LABEL_16;
        }
      }
    }
    uint64_t v23 = (llvm::Value **)(v20 + 16 * v21);
    goto LABEL_16;
  }
LABEL_3:
  uint64_t v12 = *((unsigned int *)v9 + 17);
  int v13 = operator new(40 * v12);
  *int v9 = v13;
  if (v12)
  {
    uint64_t v14 = &v13[4 * v12];
    do
    {
      *int v13 = 0;
      v13[1] = 0;
      void v13[2] = 0;
      v13[3] = v10;
      v13 += 4;
    }
    while (v13 != v14);
  }
  return v10;
}

uint64_t sub_1CC19A3E0(uint64_t **a1, uint64_t **a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, const char **a7, uint64_t a8)
{
  if (a6)
  {
    int v27 = 0;
    uint64_t v28 = 48 * a6;
    unint64_t v29 = (void *)(a5 + 32);
    do
    {
      v27 += (*v29 - *(v29 - 1)) >> 3;
      v29 += 6;
      v28 -= 48;
    }
    while (v28);
    int v39 = a4 + 1;
    uint64_t v30 = (v27 + a4 + 1);
    uint64_t v38 = (16 * a6);
    if (v38) {
      uint64_t v31 = (16 * a6) | 8u;
    }
    else {
      uint64_t v31 = 0;
    }
    int v32 = (char *)operator new(v31 + 32 * v30 + 80);
    uint64_t v33 = &v32[v31];
    uint64_t v18 = (uint64_t)&v32[32 * v30 + v31];
    *(_DWORD *)(v18 + 20) = v30 & 0x7FFFFFF | ((v38 != 0) << 31) | *(_DWORD *)(v18 + 20) & 0x38000000;
    if (v30)
    {
      do
      {
        *(void *)uint64_t v33 = 0;
        *((void *)v33 + 1) = 0;
        *((void *)v33 + 2) = 0;
        *((void *)v33 + 3) = v18;
        v33 += 32;
      }
      while (v33 != (char *)v18);
    }
    if (v38) {
      *(void *)&v32[v38] = v38;
    }
    int v34 = 0;
    if (a6)
    {
      uint64_t v36 = 48 * a6;
      uint64_t v37 = (void *)(a5 + 32);
      do
      {
        v34 += (*v37 - *(v37 - 1)) >> 3;
        v37 += 6;
        v36 -= 48;
      }
      while (v36);
    }
    *(void *)uint64_t v18 = *a1[2];
    *(void *)(v18 + 8) = 0;
    unsigned int v35 = *(_DWORD *)(v18 + 20) & 0xC0000000 | (v34 + v39) & 0x7FFFFFF;
    *(_DWORD *)(v18 + 16) = 84;
    *(_DWORD *)(v18 + 20) = v35;
  }
  else
  {
    uint64_t v15 = (a4 + 1);
    BOOL v16 = a4 == -1;
    uint64_t v17 = operator new(32 * v15 + 80);
    uint64_t v18 = (uint64_t)&v17[4 * v15];
    *(_DWORD *)(v18 + 20) = *(_DWORD *)(v18 + 20) & 0x38000000 | v15 & 0x7FFFFFF;
    if (!v16)
    {
      do
      {
        *uint64_t v17 = 0;
        v17[1] = 0;
        v17[2] = 0;
        v17[3] = v18;
        v17 += 4;
      }
      while (v17 != (void *)v18);
    }
    *(void *)uint64_t v18 = *a1[2];
    *(void *)(v18 + 8) = 0;
    int v19 = *(_DWORD *)(v18 + 20) & 0xC0000000 | v15 & 0x7FFFFFF;
    *(_DWORD *)(v18 + 16) = 84;
    *(_DWORD *)(v18 + 20) = v19;
  }
  *(_OWORD *)(v18 + 24) = 0u;
  uint64_t v20 = v18 + 24;
  *(_OWORD *)(v18 + 40) = 0u;
  *(_DWORD *)(v18 + 56) = 0;
  if (a8)
  {
    uint64_t v22 = *(void *)(a8 + 40);
    uint64_t v23 = (uint64_t *)(a8 + 24);
    *(void *)(v18 + 40) = v22;
    *(_WORD *)(v22 + 18) &= ~0x8000u;
    if ((*(unsigned char *)(v18 + 23) & 0x10) != 0)
    {
      uint64_t v25 = *(void *)(v22 + 56);
      if (v25)
      {
        int v26 = *(llvm::ValueSymbolTable **)(v25 + 104);
        if (v26) {
          llvm::ValueSymbolTable::reinsertValue(v26, (llvm::Value *)v18);
        }
      }
    }
    uint64_t v24 = *v23;
    *(void *)(v18 + 24) = *v23;
    *(void *)(v18 + 32) = v23;
    *(void *)(v24 + 8) = v20;
    *uint64_t v23 = v20;
  }
  *(void *)(v18 + 64) = 0;
  llvm::CallInst::init((uint64_t ***)v18, a1, a2, a3, a4, a5, a6, a7);
  return v18;
}

llvm::Value *sub_1CC19A650(uint64_t *a1, unsigned int *a2, uint64_t a3, const char **a4, uint64_t a5)
{
  int v10 = (char *)operator new(0x80uLL);
  uint64_t v11 = v10;
  uint64_t v12 = (llvm::Value *)(v10 + 32);
  *((_DWORD *)v10 + 13) = *((_DWORD *)v10 + 13) & 0x38000000 | 1;
  *(void *)int v10 = 0;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *((void *)v10 + 3) = v10 + 32;
  uint64_t v13 = *a1;
  if (!a3)
  {
    uint64_t v18 = *a1;
    goto LABEL_10;
  }
  uint64_t v14 = 4 * a3;
  uint64_t v15 = a2;
  while (1)
  {
    unint64_t v16 = *v15;
    int v17 = *(unsigned __int8 *)(v13 + 8);
    if (!v13 || v17 != 17) {
      break;
    }
    if (*(void *)(v13 + 32) <= v16) {
      goto LABEL_24;
    }
    int v19 = (uint64_t *)(v13 + 24);
LABEL_9:
    uint64_t v13 = *v19;
    ++v15;
    uint64_t v18 = v13;
    v14 -= 4;
    if (!v14) {
      goto LABEL_10;
    }
  }
  uint64_t v18 = 0;
  if (!v13 || v17 != 16) {
    goto LABEL_10;
  }
  if (v16 < *(_DWORD *)(v13 + 12))
  {
    int v19 = (uint64_t *)(*(void *)(v13 + 16) + 8 * v16);
    goto LABEL_9;
  }
LABEL_24:
  uint64_t v18 = 0;
LABEL_10:
  *(_OWORD *)(v10 + 56) = 0u;
  uint64_t v20 = v10 + 56;
  *((void *)v10 + 4) = v18;
  *((void *)v10 + 5) = 0;
  *((void *)v10 + 6) = 0x10000005CLL;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 22) = 0;
  if (a5)
  {
    uint64_t v25 = *(void *)(a5 + 40);
    int v26 = (uint64_t *)(a5 + 24);
    *((void *)v10 + 9) = v25;
    *(_WORD *)(v25 + 18) &= ~0x8000u;
    if ((v10[55] & 0x10) != 0
      && (uint64_t v28 = *(void *)(v25 + 56)) != 0
      && (unint64_t v29 = *(llvm::ValueSymbolTable **)(v28 + 104)) != 0)
    {
      llvm::ValueSymbolTable::reinsertValue(v29, v12);
      uint64_t v30 = *(void *)v11;
      uint64_t v31 = *v26;
      *((void *)v11 + 7) = *v26;
      *((void *)v11 + 8) = v26;
      *(void *)(v31 + 8) = v20;
      *int v26 = (uint64_t)v20;
      if (v30)
      {
        **((void **)v11 + 2) = *((void *)v11 + 1);
        uint64_t v32 = *((void *)v11 + 1);
        if (v32) {
          *(void *)(v32 + 16) = *((void *)v11 + 2);
        }
      }
    }
    else
    {
      uint64_t v27 = *v26;
      *((void *)v11 + 7) = *v26;
      *((void *)v11 + 8) = v26;
      *(void *)(v27 + 8) = v20;
      *int v26 = (uint64_t)v20;
    }
  }
  *(void *)uint64_t v11 = a1;
  uint64_t v23 = a1[1];
  uint64_t v22 = a1 + 1;
  uint64_t v21 = v23;
  *((void *)v11 + 1) = v23;
  if (v23) {
    *(void *)(v21 + 16) = v11 + 8;
  }
  *((void *)v11 + 2) = v22;
  *uint64_t v22 = v11;
  *((void *)v11 + 12) = v11 + 112;
  *((void *)v11 + 13) = 0x400000000;
  llvm::ExtractValueInst::init(v12, a2, a3, a4);
  return v12;
}

llvm::Value *sub_1CC19A834(void *a1, uint64_t a2, void *a3, uint64_t a4, const char **a5, uint64_t a6)
{
  uint64_t v12 = (char *)operator new(0xA0uLL);
  uint64_t v13 = v12;
  *((void *)v12 + 8) = *a1;
  uint64_t v14 = (llvm::Value *)(v12 + 64);
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *((void *)v12 + 3) = v12 + 64;
  *((void *)v12 + 4) = 0;
  *((void *)v12 + 5) = 0;
  *((void *)v12 + 6) = 0;
  *((void *)v12 + 7) = v12 + 64;
  *((void *)v12 + 9) = 0;
  *((void *)v12 + 10) = 0x20000005DLL;
  *(_OWORD *)(v12 + 88) = 0u;
  uint64_t v15 = v12 + 88;
  *(_OWORD *)(v12 + 104) = 0u;
  *((_DWORD *)v12 + 30) = 0;
  if (a6)
  {
    uint64_t v17 = *(void *)(a6 + 40);
    uint64_t v18 = (uint64_t *)(a6 + 24);
    *((void *)v12 + 13) = v17;
    *(_WORD *)(v17 + 18) &= ~0x8000u;
    if ((v12[87] & 0x10) != 0)
    {
      uint64_t v20 = *(void *)(v17 + 56);
      if (v20)
      {
        uint64_t v21 = *(llvm::ValueSymbolTable **)(v20 + 104);
        if (v21) {
          llvm::ValueSymbolTable::reinsertValue(v21, v14);
        }
      }
    }
    uint64_t v19 = *v18;
    v13[11] = *v18;
    v13[12] = v18;
    *(void *)(v19 + 8) = v15;
    *uint64_t v18 = (uint64_t)v15;
  }
  v13[16] = v13 + 18;
  v13[17] = 0x400000000;
  llvm::InsertValueInst::init(v14, (uint64_t)a1, a2, a3, a4, a5);
  return v14;
}

uint64_t llvm::LLParser::sortUseListOrder(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char *a5)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  int v5 = (uint64_t *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  if (!v6)
  {
    uint64_t v45 = (uint64_t)"value has no uses";
    __int16 v48 = 259;
    return llvm::LLLexer::Error(a1 + 168, a5, (llvm::Twine *)&v45);
  }
  uint64_t v45 = 1;
  for (uint64_t i = 8; i != 264; i += 16)
    *(uint64_t *)((char *)&v45 + i) = -4096;
  unsigned int v11 = 0;
  do
  {
    unint64_t v12 = v11 + 1;
    if (a4 < v12) {
      break;
    }
    int v13 = *(_DWORD *)(a3 + 4 * v11);
    v49[0] = v6;
    if (v45)
    {
      int v14 = 16;
      uint64_t v15 = &v46;
    }
    else
    {
      int v14 = v47;
      if (!v47)
      {
        uint64_t v24 = 0;
LABEL_22:
        uint64_t v18 = sub_1CC1A0178((uint64_t)&v45, (uint64_t)v49, v49, v24);
        *uint64_t v18 = v49[0];
        *((_DWORD *)v18 + 2) = 0;
        goto LABEL_23;
      }
      uint64_t v15 = v46;
    }
    int v16 = v14 - 1;
    unsigned int v17 = v16 & ((v6 >> 4) ^ (v6 >> 9));
    uint64_t v18 = &v15[2 * v17];
    uint64_t v19 = *v18;
    if (v6 != *v18)
    {
      uint64_t v20 = 0;
      int v21 = 1;
      while (v19 != -4096)
      {
        if (v20) {
          BOOL v22 = 0;
        }
        else {
          BOOL v22 = v19 == -8192;
        }
        if (v22) {
          uint64_t v20 = v18;
        }
        unsigned int v23 = v17 + v21++;
        unsigned int v17 = v23 & v16;
        uint64_t v18 = &v15[2 * v17];
        uint64_t v19 = *v18;
        if (v6 == *v18) {
          goto LABEL_23;
        }
      }
      if (v20) {
        uint64_t v24 = v20;
      }
      else {
        uint64_t v24 = v18;
      }
      goto LABEL_22;
    }
LABEL_23:
    *((_DWORD *)v18 + 2) = v13;
    uint64_t v6 = *(void *)(v6 + 8);
    unsigned int v11 = v12;
  }
  while (v6);
  if (v12 <= 1)
  {
    v49[0] = "value only has one use";
    WORD4(v51) = 259;
    uint64_t v40 = a1 + 168;
    int v41 = a5;
    goto LABEL_66;
  }
  if (a4 >= v12 && a4 == (unint64_t)v45 >> 1)
  {
    uint64_t v26 = *v5;
    if (!*v5) {
      goto LABEL_56;
    }
    uint64_t v27 = *(void *)(v26 + 8);
    if (!v27) {
      goto LABEL_56;
    }
    long long v64 = 0u;
    long long v63 = 0u;
    long long v62 = 0u;
    long long v61 = 0u;
    long long v60 = 0u;
    long long v59 = 0u;
    long long v58 = 0u;
    long long v57 = 0u;
    long long v56 = 0u;
    long long v55 = 0u;
    long long v54 = 0u;
    long long v53 = 0u;
    long long v52 = 0u;
    long long v51 = 0u;
    long long v50 = 0u;
    uint64_t v65 = 0;
    *(void *)(v26 + 8) = 0;
    v49[0] = v26;
    uint64_t v28 = *(void *)(v27 + 8);
    if (v28)
    {
      unsigned int v29 = 1;
      do
      {
        uint64_t v30 = v27;
        uint64_t v27 = v28;
        uint64_t v31 = v29;
        *(void *)(v30 + 8) = 0;
        if (v29)
        {
          uint64_t v32 = 0;
          while (1)
          {
            uint64_t v33 = v49[v32];
            if (!v33) {
              break;
            }
            uint64_t v30 = sub_1CC1A0594(v33, v30, (int *)&v45);
            v49[v32++] = 0;
            if (v31 == v32)
            {
              LODWORD(v32) = v31;
              break;
            }
          }
        }
        else
        {
          LODWORD(v32) = 0;
        }
        if (v32 == v31) {
          unsigned int v29 = v31 + 1;
        }
        else {
          unsigned int v29 = v31;
        }
        v49[v32] = v30;
        uint64_t v28 = *(void *)(v27 + 8);
      }
      while (v28);
      *int v5 = v27;
      if (!v29)
      {
        do
        {
LABEL_55:
          uint64_t v37 = *(void *)(v27 + 8);
          uint64_t v36 = (uint64_t *)(v27 + 8);
          v36[1] = (uint64_t)v5;
          int v5 = v36;
          uint64_t v27 = v37;
        }
        while (v37);
LABEL_56:
        uint64_t v38 = 0;
        goto LABEL_57;
      }
    }
    else
    {
      *int v5 = v27;
      unsigned int v29 = 1;
    }
    uint64_t v34 = v29;
    unsigned int v35 = v49;
    do
    {
      if (*v35)
      {
        uint64_t v27 = sub_1CC1A0594(*v35, v27, (int *)&v45);
        *int v5 = v27;
      }
      ++v35;
      --v34;
    }
    while (v34);
    if (!v27) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  uint64_t v42 = *v5;
  if (*v5)
  {
    LODWORD(v43) = 0;
    int v41 = a5;
    do
    {
      uint64_t v43 = (v43 + 1);
      uint64_t v42 = *(void *)(v42 + 8);
    }
    while (v42);
  }
  else
  {
    uint64_t v43 = 0;
    int v41 = a5;
  }
  v49[0] = "wrong number of indexes, expected ";
  *((void *)&v50 + 1) = v43;
  WORD4(v51) = 2051;
  uint64_t v40 = a1 + 168;
LABEL_66:
  uint64_t v38 = llvm::LLLexer::Error(v40, v41, (llvm::Twine *)v49);
LABEL_57:
  if ((v45 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v46, 8);
  }
  return v38;
}

uint64_t llvm::LLParser::parseArgs(uint64_t a1, uint64_t a2)
{
  if (llvm::LLParser::parseToken(a1, 400, "expected 'args' here")) {
    return 1;
  }
  if (llvm::LLParser::parseToken(a1, 16, "expected ':' here")) {
    return 1;
  }
  if (llvm::LLParser::parseToken(a1, 12, "expected '(' here"))
    return 1;
  unint64_t v22 = 0;
  if (llvm::LLParser::parseUInt64((char **)a1, &v22)) {
    return 1;
  }
  int v5 = (llvm::LLLexer *)(a1 + 168);
  while (1)
  {
    int v7 = *(unint64_t **)(a2 + 8);
    unint64_t v6 = *(void *)(a2 + 16);
    if ((unint64_t)v7 >= v6)
    {
      uint64_t v8 = *(unint64_t **)a2;
      uint64_t v9 = ((uint64_t)v7 - *(void *)a2) >> 3;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61) {
        abort();
      }
      uint64_t v11 = v6 - (void)v8;
      if (v11 >> 2 > v10) {
        unint64_t v10 = v11 >> 2;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v10)
      {
        int v21 = v5;
        if (v10 >> 61) {
          sub_1CB833614();
        }
        uint64_t v13 = ((uint64_t)v7 - *(void *)a2) >> 3;
        int v14 = *(unint64_t **)(a2 + 8);
        uint64_t v15 = *(unint64_t **)a2;
        unint64_t v20 = v10;
        unint64_t v12 = (char *)operator new(8 * v10);
        uint64_t v8 = v15;
        int v7 = v14;
        uint64_t v9 = v13;
        unint64_t v10 = v20;
        int v5 = v21;
      }
      else
      {
        unint64_t v12 = 0;
      }
      int v16 = (unint64_t *)&v12[8 * v9];
      unint64_t *v16 = v22;
      unsigned int v17 = v16 + 1;
      while (v7 != v8)
      {
        unint64_t v18 = *--v7;
        *--int v16 = v18;
      }
      *(void *)a2 = v16;
      *(void *)(a2 + 8) = v17;
      *(void *)(a2 + 16) = &v12[8 * v10];
      if (v8)
      {
        uint64_t v19 = v17;
        operator delete(v8);
        unsigned int v17 = v19;
      }
      *(void *)(a2 + 8) = v17;
    }
    else
    {
      *int v7 = v22;
      *(void *)(a2 + 8) = v7 + 1;
    }
    if (*(_DWORD *)(a1 + 224) != 4) {
      break;
    }
    *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken(v5);
    unint64_t v22 = 0;
    if (llvm::LLParser::parseUInt64((char **)a1, &v22)) {
      return 1;
    }
  }

  return llvm::LLParser::parseToken(a1, 13, "expected ')' here");
}

void llvm::LLParser::addGlobalValueToIndex(uint64_t a1, void *a2, unint64_t a3, int a4, unsigned int a5, uint64_t *a6)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v35 = *(void *)(a1 + 336);
    unsigned int v34 = *(unsigned __int8 *)(v35 + 133);
    uint64_t v33 = sub_1CD4ADB54(v35, a3);
  }
  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *(void *)(a1 + 328);
    if (v10)
    {
      char v36 = *((unsigned char *)a2 + 23);
      BOOL v37 = v36 < 0;
      if (v36 < 0) {
        a2 = (void *)*a2;
      }
      unint64_t v38 = v36 & 0x7F;
      if (v37) {
        unint64_t v39 = v9[1];
      }
      else {
        unint64_t v39 = v38;
      }
      uint64_t NamedValue = (llvm::GlobalValue *)llvm::Module::getNamedValue(v10, (unsigned __int8 *)a2, v39);
      uint64_t v41 = *(void *)(a1 + 336);
      unint64_t v42 = sub_1CD4AC784(NamedValue);
      uint64_t v33 = sub_1CD4ADB54(v41, v42);
      *((void *)v33 + 1) = NamedValue;
      unsigned int v34 = *(unsigned __int8 *)(v41 + 133);
    }
    else
    {
      char v11 = *((unsigned char *)a2 + 23);
      BOOL v12 = v11 < 0;
      if (v11 >= 0) {
        uint64_t v13 = (const std::string::value_type *)a2;
      }
      else {
        uint64_t v13 = (const std::string::value_type *)*a2;
      }
      uint64_t v14 = v11 & 0x7F;
      if (v12) {
        uint64_t v15 = a2[1];
      }
      else {
        uint64_t v15 = v14;
      }
      char v16 = *(unsigned char *)(a1 + 1311);
      BOOL v17 = v16 < 0;
      if (v16 >= 0) {
        unint64_t v18 = (const std::string::value_type *)(a1 + 1288);
      }
      else {
        unint64_t v18 = *(const std::string::value_type **)(a1 + 1288);
      }
      std::string::size_type v19 = v16 & 0x7F;
      if (v17) {
        std::string::size_type v20 = *(void *)(a1 + 1296);
      }
      else {
        std::string::size_type v20 = v19;
      }
      llvm::GlobalValue::getGlobalIdentifier(v13, v15, a4, v18, v20, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = (int *)&__p;
      }
      else {
        p_p = (int *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
      }
      else {
        size_t size = __p.__r_.__value_.__l.__size_;
      }
      long long v82 = xmmword_1CFAC4320;
      uint64_t v83 = 0;
      llvm::MD5::update((int *)&v82, p_p, size);
      llvm::MD5::final((int *)&v82, (int *)&v81);
      unint64_t v23 = v81;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v24 = *(void *)(a1 + 336);
      char v25 = *((unsigned char *)v9 + 23);
      int v26 = v25;
      uint64_t v27 = (const void *)*v9;
      size_t v28 = v25 & 0x7F;
      if (v26 >= 0) {
        size_t v29 = v28;
      }
      else {
        size_t v29 = v9[1];
      }
      uint64_t v30 = (unsigned char *)sub_1CB906F34(*(uint64_t **)(v24 + 192), v29 + 1, 0);
      uint64_t v31 = v30;
      if (v29)
      {
        if (v26 >= 0) {
          uint64_t v32 = v9;
        }
        else {
          uint64_t v32 = v27;
        }
        memcpy(v30, v32, v29);
      }
      v31[v29] = 0;
      uint64_t v33 = sub_1CD4ADB54(v24, v23);
      *((void *)v33 + 1) = v31;
      *((void *)v33 + 2) = v29;
      unsigned int v34 = *(unsigned __int8 *)(v24 + 133);
    }
  }
  unint64_t v43 = (unint64_t)v33 & 0xFFFFFFFFFFFFFFF8 | v34;
  uint64_t v44 = *(void *)(a1 + 1168);
  if (v44)
  {
    uint64_t v45 = a1 + 1168;
    do
    {
      unsigned int v46 = *(_DWORD *)(v44 + 32);
      BOOL v47 = v46 >= a5;
      if (v46 >= a5) {
        __int16 v48 = (uint64_t *)v44;
      }
      else {
        __int16 v48 = (uint64_t *)(v44 + 8);
      }
      if (v47) {
        uint64_t v45 = v44;
      }
      uint64_t v44 = *v48;
    }
    while (*v48);
    if (v45 != a1 + 1168 && *(_DWORD *)(v45 + 32) <= a5)
    {
      uint64_t v71 = *(unint64_t ***)(v45 + 40);
      uint64_t v72 = *(unint64_t ***)(v45 + 48);
      while (v71 != v72)
      {
        unint64_t v73 = *v71;
        v71 += 2;
        *unint64_t v73 = *v73 & 6 | v43;
      }
      sub_1CD4F4E84((uint64_t **)(a1 + 1160), (uint64_t *)v45);
    }
  }
  uint64_t v49 = *(void *)(a1 + 1192);
  if (v49)
  {
    uint64_t v50 = a1 + 1192;
    do
    {
      unsigned int v51 = *(_DWORD *)(v49 + 32);
      BOOL v52 = v51 >= a5;
      if (v51 >= a5) {
        long long v53 = (uint64_t *)v49;
      }
      else {
        long long v53 = (uint64_t *)(v49 + 8);
      }
      if (v52) {
        uint64_t v50 = v49;
      }
      uint64_t v49 = *v53;
    }
    while (*v53);
    if (v50 != a1 + 1192 && *(_DWORD *)(v50 + 32) <= a5)
    {
      int v74 = *(uint64_t **)(v50 + 40);
      unint64_t v75 = *(uint64_t **)(v50 + 48);
      while (v74 != v75)
      {
        uint64_t v76 = *v74;
        v74 += 2;
        uint64_t v77 = *a6;
        *(void *)(v76 + 64) = v43;
        *(void *)(v76 + 72) = v77;
      }
      sub_1CD4F4E84((uint64_t **)(a1 + 1184), (uint64_t *)v50);
    }
  }
  uint64_t v54 = *a6;
  if (*a6)
  {
    uint64_t v55 = *(void *)(a1 + 336);
    *a6 = 0;
    uint64_t v79 = v54;
    sub_1CC0C4C58(v55, v43, &v79);
    uint64_t v56 = v79;
    uint64_t v79 = 0;
    if (v56) {
      (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
    }
  }
  uint64_t v57 = a5;
  long long v58 = *(char **)(a1 + 1216);
  long long v59 = *(char **)(a1 + 1208);
  unint64_t v60 = (v58 - v59) >> 3;
  if (v60 == a5)
  {
    unint64_t v61 = *(void *)(a1 + 1224);
    if ((unint64_t)v58 >= v61)
    {
      uint64_t v64 = v61 - (void)v59;
      if (v64 >> 2 <= (unint64_t)a5 + 1) {
        uint64_t v65 = a5 + 1;
      }
      else {
        uint64_t v65 = v64 >> 2;
      }
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v66 = v65;
      }
      if (v66 >> 61) {
        sub_1CB833614();
      }
      unsigned int v67 = (char *)operator new(8 * v66);
      unint64_t v68 = (unint64_t *)&v67[8 * v57];
      unint64_t v69 = &v67[8 * v66];
      unint64_t *v68 = v43;
      long long v62 = v68 + 1;
      while (v58 != v59)
      {
        unint64_t v70 = *((void *)v58 - 1);
        v58 -= 8;
        *--unint64_t v68 = v70;
      }
      *(void *)(a1 + 1208) = v68;
      *(void *)(a1 + 1216) = v62;
      *(void *)(a1 + 1224) = v69;
      if (v59) {
        operator delete(v59);
      }
    }
    else
    {
      *(void *)long long v58 = v43;
      long long v62 = v58 + 8;
    }
    *(void *)(a1 + 1216) = v62;
  }
  else
  {
    if (v60 < a5)
    {
      unint64_t v63 = a5 + 1;
      if (v63 > v60)
      {
        uint64_t v78 = (char **)(a1 + 1208);
        sub_1CD4F51C4(v78, v63 - v60);
        long long v59 = *v78;
      }
      else if (v63 < v60)
      {
        *(void *)(a1 + 1216) = &v59[8 * v63];
      }
    }
    *(void *)&v59[8 * a5] = v43;
  }
}

uint64_t llvm::LLParser::parseVariableSummary(uint64_t a1)
{
  uint64_t v2 = (llvm::LLLexer *)(a1 + 168);
  *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  __n128 v15 = 0uLL;
  LOWORD(v14) = 0;
  LOBYTE(v13) = 0;
  memset(v12, 0, sizeof(v12));
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v11 = 0;
  if ((llvm::LLParser::parseToken(a1, 16, "expected ':' here") & 1) != 0
    || (llvm::LLParser::parseToken(a1, 12, "expected '(' here") & 1) != 0)
  {
    uint64_t v3 = 1;
  }
  else
  {
    llvm::LLParser::parseModuleReference((llvm::LLParser *)a1, &v15);
    if ((v5 & 1) == 0
      && (llvm::LLParser::parseToken(a1, 4, "expected ',' here") & 1) == 0
      && (llvm::LLParser::parseGVFlags(a1, &v14) & 1) == 0
      && (llvm::LLParser::parseToken(a1, 4, "expected ',' here") & 1) == 0
      && (llvm::LLParser::parseGVarFlags(a1, &v13) & 1) == 0)
    {
      while (*(_DWORD *)(a1 + 224) == 4)
      {
        int v6 = llvm::LLLexer::LexToken(v2);
        *(_DWORD *)(a1 + 224) = v6;
        if (v6 == 391)
        {
          if (llvm::LLParser::parseOptionalRefs(a1, v12)) {
            goto LABEL_8;
          }
        }
        else
        {
          if (v6 != 388)
          {
            int v7 = *(char **)(a1 + 216);
            uint64_t v8 = "expected optional variable summary field";
            __int16 v9 = 259;
            uint64_t v3 = llvm::LLLexer::Error((uint64_t)v2, v7, (llvm::Twine *)&v8);
            goto LABEL_9;
          }
          if (llvm::LLParser::parseOptionalVTableFuncs(a1, (char **)__p)) {
            goto LABEL_8;
          }
        }
      }
      if ((llvm::LLParser::parseToken(a1, 13, "expected ')' here") & 1) == 0) {
        operator new();
      }
    }
LABEL_8:
    uint64_t v3 = 1;
LABEL_9:
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }
  if (v12[0]) {
    operator delete(v12[0]);
  }
  return v3;
}

uint64_t llvm::LLParser::parseAliasSummary(_DWORD *a1)
{
  a1[56] = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 42));
  __n128 v7 = 0uLL;
  LOWORD(v6) = 0;
  if ((llvm::LLParser::parseToken((uint64_t)a1, 16, "expected ':' here") & 1) == 0
    && (llvm::LLParser::parseToken((uint64_t)a1, 12, "expected '(' here") & 1) == 0)
  {
    llvm::LLParser::parseModuleReference((llvm::LLParser *)a1, &v7);
    if ((v3 & 1) == 0
      && (llvm::LLParser::parseToken((uint64_t)a1, 4, "expected ',' here") & 1) == 0
      && (llvm::LLParser::parseGVFlags((uint64_t)a1, &v6) & 1) == 0
      && (llvm::LLParser::parseToken((uint64_t)a1, 4, "expected ',' here") & 1) == 0
      && (llvm::LLParser::parseToken((uint64_t)a1, 390, "expected 'aliasee' here") & 1) == 0
      && (llvm::LLParser::parseToken((uint64_t)a1, 16, "expected ':' here") & 1) == 0)
    {
      *(void *)char v5 = 0;
      unsigned int v4 = 0;
      if ((llvm::LLParser::parseGVReference((llvm::LLParser *)a1, (llvm::ValueInfo *)v5, &v4) & 1) == 0
        && (llvm::LLParser::parseToken((uint64_t)a1, 13, "expected ')' here") & 1) == 0)
      {
        operator new();
      }
    }
  }
  return 1;
}

uint64_t llvm::LLParser::parseOptionalCalls(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  unsigned int v4 = (llvm::LLLexer *)(a1 + 168);
  *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  if ((llvm::LLParser::parseToken(v3, 16, "expected ':' in calls") & 1) != 0
    || (llvm::LLParser::parseToken(v3, 12, "expected '(' in calls") & 1) != 0)
  {
    return 1;
  }
  v69[0] = 0;
  v69[1] = 0;
  unint64_t v68 = (uint64_t *)v69;
  uint64_t v61 = 0;
  if ((llvm::LLParser::parseToken(v3, 12, "expected '(' in call") & 1) == 0)
  {
    uint64_t v59 = v3;
    unint64_t v60 = a2;
    do
    {
      if (llvm::LLParser::parseToken(v3, 379, "expected 'callee' in call")) {
        break;
      }
      if (llvm::LLParser::parseToken(v3, 16, "expected ':'")) {
        break;
      }
      uint64_t v7 = *(void *)(v3 + 216);
      unsigned int v67 = 0;
      if (llvm::LLParser::parseGVReference((llvm::LLParser *)v3, (llvm::ValueInfo *)&v61, &v67)) {
        break;
      }
      char v66 = 0;
      unsigned int v65 = 0;
      if (*(_DWORD *)(v3 + 224) == 4)
      {
        int v8 = llvm::LLLexer::LexToken(v4);
        *(_DWORD *)(v3 + 224) = v8;
        if (v8 == 382)
        {
          *(_DWORD *)(v3 + 224) = llvm::LLLexer::LexToken(v4);
          if ((llvm::LLParser::parseToken(v3, 16, "expected ':'") & 1) != 0
            || (llvm::LLParser::parseHotness(v3, &v66) & 1) != 0)
          {
            break;
          }
        }
        else if ((llvm::LLParser::parseToken(v3, 386, "expected relbf") & 1) != 0 {
               || (llvm::LLParser::parseToken(v3, 16, "expected ':'") & 1) != 0
        }
               || (llvm::LLParser::parseUInt32((char **)v3, &v65) & 1) != 0)
        {
          break;
        }
      }
      uint64_t v9 = v61;
      if ((~v61 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
        uint64_t v10 = sub_1CD4F4F28(&v68, v67, &v67);
        uint64_t v11 = v10;
        uint64_t v12 = (a2[1] - *a2) >> 4;
        int v14 = v10[6];
        int v13 = v10[7];
        if (v14 >= v13)
        {
          char v16 = v10[5];
          uint64_t v17 = ((char *)v14 - (char *)v16) >> 4;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 60) {
            goto LABEL_94;
          }
          uint64_t v19 = (char *)v13 - (char *)v16;
          if (v19 >> 3 > v18) {
            unint64_t v18 = v19 >> 3;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          if (v20)
          {
            if (v20 >> 60) {
              goto LABEL_95;
            }
            int v21 = (char *)operator new(16 * v20);
          }
          else
          {
            int v21 = 0;
          }
          unint64_t v22 = &v21[16 * v17];
          *(_DWORD *)unint64_t v22 = v12;
          *((void *)v22 + 1) = v7;
          unint64_t v23 = (uint64_t *)v22;
          if (v14 == v16)
          {
            uint64_t v3 = v59;
          }
          else
          {
            uint64_t v3 = v59;
            do
            {
              *((_OWORD *)v23 - 1) = *((_OWORD *)v14 - 1);
              v23 -= 2;
              v14 -= 2;
            }
            while (v14 != v16);
            int v14 = v11[5];
          }
          __n128 v15 = (uint64_t *)(v22 + 16);
          void v11[5] = v23;
          v11[6] = (uint64_t *)(v22 + 16);
          void v11[7] = (uint64_t *)&v21[16 * v20];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(_DWORD *)int v14 = v12;
          v14[1] = v7;
          __n128 v15 = v14 + 2;
          uint64_t v3 = v59;
        }
        v11[6] = v15;
        a2 = v60;
      }
      unsigned int v24 = v66 & 7 | (8 * v65);
      int v26 = (_DWORD *)a2[1];
      unint64_t v25 = a2[2];
      if ((unint64_t)v26 >= v25)
      {
        size_t v28 = (_DWORD *)*a2;
        uint64_t v29 = ((uint64_t)v26 - *a2) >> 4;
        unint64_t v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 60) {
LABEL_94:
        }
          abort();
        uint64_t v31 = v25 - (void)v28;
        if (v31 >> 3 > v30) {
          unint64_t v30 = v31 >> 3;
        }
        unint64_t v32 = (unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v30;
        if (v32)
        {
          if (v32 >> 60) {
LABEL_95:
          }
            sub_1CB833614();
          uint64_t v33 = (char *)operator new(16 * v32);
        }
        else
        {
          uint64_t v33 = 0;
        }
        unsigned int v34 = &v33[16 * v29];
        *(void *)unsigned int v34 = v9;
        *((_DWORD *)v34 + 2) = v24;
        uint64_t v35 = v34;
        if (v26 == v28)
        {
          char v36 = (char **)a2;
        }
        else
        {
          do
          {
            *((_OWORD *)v35 - 1) = *((_OWORD *)v26 - 1);
            v35 -= 16;
            v26 -= 4;
          }
          while (v26 != v28);
          int v26 = (_DWORD *)*a2;
          char v36 = (char **)a2;
        }
        uint64_t v27 = v34 + 16;
        *char v36 = v35;
        v36[1] = v34 + 16;
        v36[2] = &v33[16 * v32];
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *(void *)int v26 = v9;
        v26[2] = v24;
        uint64_t v27 = v26 + 4;
      }
      v60[1] = v27;
      a2 = v60;
      if (llvm::LLParser::parseToken(v3, 13, "expected ')' in call")) {
        break;
      }
      if (*(_DWORD *)(v3 + 224) != 4)
      {
        BOOL v37 = v68;
        if (v68 != (uint64_t *)v69)
        {
          unint64_t v38 = (uint64_t **)(v59 + 1160);
          do
          {
            LODWORD(v61) = *((_DWORD *)v37 + 8);
            unint64_t v63 = 0;
            uint64_t v64 = 0;
            long long v62 = 0;
            sub_1CC0C57E8(&v62, (unsigned char *)v37[5], (unsigned char *)v37[6], (v37[6] - v37[5]) >> 4);
            unint64_t v39 = sub_1CD4F4F28(v38, v61, &v61);
            uint64_t v41 = v62;
            uint64_t v40 = v63;
            if (v62 != v63)
            {
              unint64_t v42 = v39;
              unint64_t v43 = v39[6];
              do
              {
                uint64_t v44 = v41[1];
                uint64_t v45 = *a2 + 16 * *(unsigned int *)v41;
                unint64_t v46 = (unint64_t)v42[7];
                if ((unint64_t)v43 >= v46)
                {
                  BOOL v47 = v42[5];
                  uint64_t v48 = ((char *)v43 - (char *)v47) >> 4;
                  unint64_t v49 = v48 + 1;
                  if ((unint64_t)(v48 + 1) >> 60) {
                    goto LABEL_94;
                  }
                  uint64_t v50 = v46 - (void)v47;
                  if (v50 >> 3 > v49) {
                    unint64_t v49 = v50 >> 3;
                  }
                  if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v51 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v51 = v49;
                  }
                  if (v51 >> 60) {
                    goto LABEL_95;
                  }
                  BOOL v52 = (char *)operator new(16 * v51);
                  long long v53 = (uint64_t *)&v52[16 * v48];
                  *long long v53 = v45;
                  v53[1] = v44;
                  if (v43 == v47)
                  {
                    uint64_t v55 = &v52[16 * v48];
                    a2 = v60;
                  }
                  else
                  {
                    uint64_t v54 = &v52[16 * v48];
                    a2 = v60;
                    do
                    {
                      uint64_t v55 = v54 - 16;
                      *((_OWORD *)v54 - 1) = *((_OWORD *)v43 - 1);
                      v43 -= 2;
                      v54 -= 16;
                    }
                    while (v43 != v47);
                  }
                  unint64_t v43 = v53 + 2;
                  v42[5] = (uint64_t *)v55;
                  v42[6] = v53 + 2;
                  v42[7] = (uint64_t *)&v52[16 * v51];
                  if (v47) {
                    operator delete(v47);
                  }
                }
                else
                {
                  *unint64_t v43 = v45;
                  v43[1] = v44;
                  v43 += 2;
                }
                v42[6] = v43;
                v41 += 2;
              }
              while (v41 != v40);
              uint64_t v41 = v62;
              unint64_t v38 = (uint64_t **)(v59 + 1160);
            }
            if (v41) {
              operator delete(v41);
            }
            uint64_t v56 = (uint64_t *)v37[1];
            if (v56)
            {
              do
              {
                uint64_t v57 = v56;
                uint64_t v56 = (uint64_t *)*v56;
              }
              while (v56);
            }
            else
            {
              do
              {
                uint64_t v57 = (uint64_t *)v37[2];
                BOOL v58 = *v57 == (void)v37;
                BOOL v37 = v57;
              }
              while (!v58);
            }
            BOOL v37 = v57;
          }
          while (v57 != (uint64_t *)v69);
        }
        uint64_t v5 = llvm::LLParser::parseToken(v59, 13, "expected ')' in calls");
        goto LABEL_7;
      }
      *(_DWORD *)(v3 + 224) = llvm::LLLexer::LexToken(v4);
      uint64_t v61 = 0;
    }
    while ((llvm::LLParser::parseToken(v3, 12, "expected '(' in call") & 1) == 0);
  }
  uint64_t v5 = 1;
LABEL_7:
  sub_1CD4F4ECC(v69[0]);
  return v5;
}

uint64_t llvm::LLParser::parseOptionalRefs(uint64_t a1, char **a2)
{
  unsigned int v4 = (llvm::LLLexer *)(a1 + 168);
  *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  if ((llvm::LLParser::parseToken(a1, 16, "expected ':' in refs") & 1) != 0
    || (llvm::LLParser::parseToken(a1, 12, "expected '(' in refs") & 1) != 0)
  {
    return 1;
  }
  int v80 = a2;
  *(void *)&long long v81 = 0;
  long long v82 = *(void **)(a1 + 216);
  uint64_t v78 = a1;
  char v7 = llvm::LLParser::parseGVReference((llvm::LLParser *)a1, (llvm::ValueInfo *)&v81, (unsigned int *)&v81 + 2);
  int v8 = 0;
  if (v7)
  {
LABEL_26:
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    int v8 = 0;
    while (1)
    {
      if (v10 >= (unint64_t)v9)
      {
        uint64_t v12 = v8;
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)v8) >> 3);
        unint64_t v14 = v13 + 1;
        if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_106:
        }
          abort();
        __n128 v15 = v12;
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v9 - (unsigned char *)v12) >> 3);
        if (2 * v16 > v14) {
          unint64_t v14 = 2 * v16;
        }
        unint64_t v17 = v16 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v14;
        if (v17)
        {
          if (v17 > 0xAAAAAAAAAAAAAAALL) {
LABEL_107:
          }
            sub_1CB833614();
          unint64_t v18 = (char *)operator new(24 * v17);
        }
        else
        {
          unint64_t v18 = 0;
        }
        uint64_t v19 = &v18[24 * v13];
        *(_OWORD *)uint64_t v19 = v81;
        *((void *)v19 + 2) = v82;
        for (unint64_t i = (unint64_t)v19; (void *)v10 != v15; v10 -= 24)
        {
          long long v21 = *(_OWORD *)(v10 - 24);
          *(void *)(i - 8) = *(void *)(v10 - 8);
          *(_OWORD *)(i - 24) = v21;
          i -= 24;
        }
        uint64_t v9 = &v18[24 * v17];
        unint64_t v10 = (unint64_t)(v19 + 24);
        if (v15) {
          operator delete(v15);
        }
        unint64_t v79 = i;
      }
      else
      {
        unint64_t v79 = (unint64_t)v8;
        long long v11 = v81;
        *(void *)(v10 + 16) = v82;
        *(_OWORD *)unint64_t v10 = v11;
        v10 += 24;
      }
      if (*(_DWORD *)(v78 + 224) != 4) {
        break;
      }
      *(_DWORD *)(v78 + 224) = llvm::LLLexer::LexToken(v4);
      unint64_t v22 = *(void **)(v78 + 216);
      *(void *)&long long v81 = 0;
      long long v82 = v22;
      char v23 = llvm::LLParser::parseGVReference((llvm::LLParser *)v78, (llvm::ValueInfo *)&v81, (unsigned int *)&v81 + 2);
      int v8 = (void *)v79;
      if (v23) {
        goto LABEL_26;
      }
    }
    unint64_t v24 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v79) >> 3));
    if (v10 == v79) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = v24;
    }
    sub_1CC1A09D8(v79, v10, v25, 1);
    v85[0] = 0;
    v85[1] = 0;
    uint64_t v84 = (uint64_t *)v85;
    int v26 = v80;
    if (v10 != v79)
    {
      unint64_t v27 = v79;
      do
      {
        if ((~*(void *)v27 & 0xFFFFFFFFFFFFFFF8) == 0)
        {
          uint64_t v40 = sub_1CD4F4F28(&v84, *(_DWORD *)(v27 + 8), (_DWORD *)(v27 + 8));
          uint64_t v41 = v40;
          unint64_t v42 = (unint64_t)(v26[1] - *v26) >> 3;
          uint64_t v43 = *(void *)(v27 + 16);
          uint64_t v45 = v40[6];
          uint64_t v44 = v40[7];
          if (v45 >= v44)
          {
            BOOL v47 = v40[5];
            uint64_t v48 = ((char *)v45 - (char *)v47) >> 4;
            unint64_t v49 = v48 + 1;
            if ((unint64_t)(v48 + 1) >> 60) {
              goto LABEL_106;
            }
            uint64_t v50 = (char *)v44 - (char *)v47;
            if (v50 >> 3 > v49) {
              unint64_t v49 = v50 >> 3;
            }
            if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v51 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v51 = v49;
            }
            if (v51)
            {
              if (v51 >> 60) {
                goto LABEL_107;
              }
              BOOL v52 = (char *)operator new(16 * v51);
            }
            else
            {
              BOOL v52 = 0;
            }
            long long v53 = &v52[16 * v48];
            *(_DWORD *)long long v53 = v42;
            *((void *)v53 + 1) = v43;
            uint64_t v54 = (uint64_t *)v53;
            if (v45 == v47)
            {
              int v26 = v80;
            }
            else
            {
              int v26 = v80;
              do
              {
                *((_OWORD *)v54 - 1) = *((_OWORD *)v45 - 1);
                v54 -= 2;
                v45 -= 2;
              }
              while (v45 != v47);
              uint64_t v45 = v41[5];
            }
            uint64_t v55 = (uint64_t *)&v52[16 * v51];
            unint64_t v46 = (uint64_t *)(v53 + 16);
            v41[5] = v54;
            v41[6] = (uint64_t *)(v53 + 16);
            v41[7] = v55;
            if (v45) {
              operator delete(v45);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v45 = v42;
            v45[1] = v43;
            unint64_t v46 = v45 + 2;
            int v26 = v80;
          }
          v41[6] = v46;
        }
        uint64_t v29 = v26[1];
        unint64_t v28 = (unint64_t)v26[2];
        if ((unint64_t)v29 >= v28)
        {
          uint64_t v31 = *v26;
          uint64_t v32 = (v29 - *v26) >> 3;
          unint64_t v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 61) {
            goto LABEL_106;
          }
          uint64_t v34 = v28 - (void)v31;
          if (v34 >> 2 > v33) {
            unint64_t v33 = v34 >> 2;
          }
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v35 = v33;
          }
          if (v35)
          {
            if (v35 >> 61) {
              goto LABEL_107;
            }
            char v36 = (char *)operator new(8 * v35);
          }
          else
          {
            char v36 = 0;
          }
          BOOL v37 = &v36[8 * v32];
          *(void *)BOOL v37 = *(void *)v27;
          unint64_t v30 = v37 + 8;
          while (v29 != v31)
          {
            uint64_t v38 = *((void *)v29 - 1);
            v29 -= 8;
            *((void *)v37 - 1) = v38;
            v37 -= 8;
          }
          unint64_t v39 = &v36[8 * v35];
          int v26 = v80;
          *int v80 = v37;
          v80[1] = v30;
          v80[2] = v39;
          if (v31) {
            operator delete(v31);
          }
        }
        else
        {
          *(void *)uint64_t v29 = *(void *)v27;
          unint64_t v30 = v29 + 8;
        }
        v26[1] = v30;
        v27 += 24;
      }
      while (v27 != v10);
      uint64_t v56 = v84;
      if (v84 != (uint64_t *)v85)
      {
        uint64_t v57 = (uint64_t **)(v78 + 1160);
        do
        {
          LODWORD(v81) = *((_DWORD *)v56 + 8);
          long long v82 = 0;
          uint64_t v83 = 0;
          *((void *)&v81 + 1) = 0;
          sub_1CC0C57E8((void *)&v81 + 1, (unsigned char *)v56[5], (unsigned char *)v56[6], (v56[6] - v56[5]) >> 4);
          BOOL v58 = sub_1CD4F4F28(v57, v81, &v81);
          unint64_t v60 = (void *)*((void *)&v81 + 1);
          uint64_t v59 = v82;
          if (*((void **)&v81 + 1) != v82)
          {
            uint64_t v61 = v58;
            long long v62 = v58[6];
            do
            {
              uint64_t v63 = v60[1];
              uint64_t v64 = (uint64_t)&(*v26)[8 * *(unsigned int *)v60];
              unint64_t v65 = (unint64_t)v61[7];
              if ((unint64_t)v62 >= v65)
              {
                char v66 = v61[5];
                uint64_t v67 = ((char *)v62 - (char *)v66) >> 4;
                unint64_t v68 = v67 + 1;
                if ((unint64_t)(v67 + 1) >> 60) {
                  goto LABEL_106;
                }
                uint64_t v69 = v65 - (void)v66;
                if (v69 >> 3 > v68) {
                  unint64_t v68 = v69 >> 3;
                }
                if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v70 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v70 = v68;
                }
                if (v70 >> 60) {
                  goto LABEL_107;
                }
                uint64_t v71 = (char *)operator new(16 * v70);
                uint64_t v72 = (uint64_t *)&v71[16 * v67];
                uint64_t *v72 = v64;
                v72[1] = v63;
                if (v62 == v66)
                {
                  int v74 = &v71[16 * v67];
                }
                else
                {
                  unint64_t v73 = &v71[16 * v67];
                  do
                  {
                    int v74 = v73 - 16;
                    *((_OWORD *)v73 - 1) = *((_OWORD *)v62 - 1);
                    v62 -= 2;
                    v73 -= 16;
                  }
                  while (v62 != v66);
                }
                long long v62 = v72 + 2;
                v61[5] = (uint64_t *)v74;
                v61[6] = v72 + 2;
                v61[7] = (uint64_t *)&v71[16 * v70];
                if (v66) {
                  operator delete(v66);
                }
                int v26 = v80;
              }
              else
              {
                uint64_t *v62 = v64;
                v62[1] = v63;
                v62 += 2;
              }
              v61[6] = v62;
              v60 += 2;
            }
            while (v60 != v59);
            unint64_t v60 = (void *)*((void *)&v81 + 1);
            uint64_t v57 = (uint64_t **)(v78 + 1160);
          }
          if (v60) {
            operator delete(v60);
          }
          unint64_t v75 = (uint64_t *)v56[1];
          if (v75)
          {
            do
            {
              uint64_t v76 = v75;
              unint64_t v75 = (uint64_t *)*v75;
            }
            while (v75);
          }
          else
          {
            do
            {
              uint64_t v76 = (uint64_t *)v56[2];
              BOOL v77 = *v76 == (void)v56;
              uint64_t v56 = v76;
            }
            while (!v77);
          }
          uint64_t v56 = v76;
        }
        while (v76 != (uint64_t *)v85);
      }
    }
    uint64_t v5 = llvm::LLParser::parseToken(v78, 13, "expected ')' in refs");
    sub_1CD4F4ECC(v85[0]);
    int v8 = (void *)v79;
  }
  if (v8) {
    operator delete(v8);
  }
  return v5;
}

uint64_t llvm::LLParser::parseOptionalVTableFuncs(uint64_t a1, char **a2)
{
  uint64_t v3 = a1;
  unsigned int v4 = (llvm::LLLexer *)(a1 + 168);
  *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  if ((llvm::LLParser::parseToken(v3, 16, "expected ':' in vTableFuncs") & 1) != 0
    || (llvm::LLParser::parseToken(v3, 12, "expected '(' in vTableFuncs") & 1) != 0)
  {
    return 1;
  }
  v67[0] = 0;
  v67[1] = 0;
  char v66 = (uint64_t *)v67;
  uint64_t v60 = 0;
  if ((llvm::LLParser::parseToken(v3, 12, "expected '(' in vTableFunc") & 1) == 0)
  {
    uint64_t v59 = a2;
    do
    {
      if (llvm::LLParser::parseToken(v3, 389, "expected 'callee' in vTableFunc")) {
        break;
      }
      if (llvm::LLParser::parseToken(v3, 16, "expected ':'")) {
        break;
      }
      uint64_t v7 = *(void *)(v3 + 216);
      unsigned int v65 = 0;
      if (llvm::LLParser::parseGVReference((llvm::LLParser *)v3, (llvm::ValueInfo *)&v60, &v65)) {
        break;
      }
      unint64_t v64 = 0;
      if ((llvm::LLParser::parseToken(v3, 4, "expected comma") & 1) != 0
        || (llvm::LLParser::parseToken(v3, 399, "expected offset") & 1) != 0
        || (llvm::LLParser::parseToken(v3, 16, "expected ':'") & 1) != 0
        || (llvm::LLParser::parseUInt64((char **)v3, &v64) & 1) != 0)
      {
        break;
      }
      uint64_t v8 = v60;
      if ((~v60 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
        uint64_t v9 = sub_1CD4F4F28(&v66, v65, &v65);
        unint64_t v10 = v9;
        unint64_t v11 = (unint64_t)(a2[1] - *a2) >> 4;
        unint64_t v13 = v9[6];
        uint64_t v12 = v9[7];
        if (v13 >= v12)
        {
          __n128 v15 = v9[5];
          uint64_t v16 = ((char *)v13 - (char *)v15) >> 4;
          unint64_t v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 60) {
            goto LABEL_89;
          }
          uint64_t v18 = (char *)v12 - (char *)v15;
          if (v18 >> 3 > v17) {
            unint64_t v17 = v18 >> 3;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19)
          {
            if (v19 >> 60) {
              goto LABEL_90;
            }
            unint64_t v20 = (char *)operator new(16 * v19);
          }
          else
          {
            unint64_t v20 = 0;
          }
          long long v21 = &v20[16 * v16];
          *(_DWORD *)long long v21 = v11;
          *((void *)v21 + 1) = v7;
          unint64_t v22 = (uint64_t *)v21;
          if (v13 != v15)
          {
            do
            {
              *((_OWORD *)v22 - 1) = *((_OWORD *)v13 - 1);
              v22 -= 2;
              v13 -= 2;
            }
            while (v13 != v15);
            unint64_t v13 = v10[5];
          }
          unint64_t v14 = (uint64_t *)(v21 + 16);
          void v10[5] = v22;
          v10[6] = (uint64_t *)(v21 + 16);
          v10[7] = (uint64_t *)&v20[16 * v19];
          a2 = v59;
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v13 = v11;
          v13[1] = v7;
          unint64_t v14 = v13 + 2;
        }
        v10[6] = v14;
      }
      char v23 = a2;
      unint64_t v24 = v64;
      int v26 = v23[1];
      unint64_t v25 = (unint64_t)v23[2];
      if ((unint64_t)v26 >= v25)
      {
        unint64_t v28 = *v23;
        uint64_t v29 = (v26 - *v23) >> 4;
        unint64_t v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 60) {
LABEL_89:
        }
          abort();
        uint64_t v31 = v25 - (void)v28;
        if (v31 >> 3 > v30) {
          unint64_t v30 = v31 >> 3;
        }
        unint64_t v32 = (unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v30;
        if (v32)
        {
          if (v32 >> 60) {
LABEL_90:
          }
            sub_1CB833614();
          unint64_t v33 = (char *)operator new(16 * v32);
        }
        else
        {
          unint64_t v33 = 0;
        }
        uint64_t v34 = &v33[16 * v29];
        *(void *)uint64_t v34 = v8;
        *((void *)v34 + 1) = v24;
        unint64_t v35 = v34;
        if (v26 == v28)
        {
          a2 = v59;
        }
        else
        {
          a2 = v59;
          do
          {
            *((_OWORD *)v35 - 1) = *((_OWORD *)v26 - 1);
            v35 -= 16;
            v26 -= 16;
          }
          while (v26 != v28);
          int v26 = *v59;
        }
        unint64_t v27 = v34 + 16;
        *a2 = v35;
        a2[1] = v34 + 16;
        a2[2] = &v33[16 * v32];
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *(void *)int v26 = v8;
        *((void *)v26 + 1) = v24;
        unint64_t v27 = v26 + 16;
        a2 = v23;
      }
      a2[1] = v27;
      if (llvm::LLParser::parseToken(v3, 13, "expected ')' in vTableFunc")) {
        break;
      }
      if (*(_DWORD *)(v3 + 224) != 4)
      {
        char v36 = v66;
        if (v66 != (uint64_t *)v67)
        {
          uint64_t v57 = v3;
          BOOL v58 = (uint64_t **)(v3 + 1160);
          do
          {
            LODWORD(v60) = *((_DWORD *)v36 + 8);
            long long v62 = 0;
            uint64_t v63 = 0;
            uint64_t v61 = 0;
            sub_1CC0C57E8(&v61, (unsigned char *)v36[5], (unsigned char *)v36[6], (v36[6] - v36[5]) >> 4);
            BOOL v37 = sub_1CD4F4F28(v58, v60, &v60);
            unint64_t v39 = v61;
            uint64_t v38 = v62;
            if (v61 != v62)
            {
              uint64_t v40 = v37;
              uint64_t v41 = v37[6];
              do
              {
                uint64_t v42 = v39[1];
                uint64_t v43 = (uint64_t)&(*a2)[16 * *(unsigned int *)v39];
                unint64_t v44 = (unint64_t)v40[7];
                if ((unint64_t)v41 >= v44)
                {
                  uint64_t v45 = v40[5];
                  uint64_t v46 = ((char *)v41 - (char *)v45) >> 4;
                  unint64_t v47 = v46 + 1;
                  if ((unint64_t)(v46 + 1) >> 60) {
                    goto LABEL_89;
                  }
                  uint64_t v48 = v44 - (void)v45;
                  if (v48 >> 3 > v47) {
                    unint64_t v47 = v48 >> 3;
                  }
                  if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v49 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v49 = v47;
                  }
                  if (v49 >> 60) {
                    goto LABEL_90;
                  }
                  uint64_t v50 = (char *)operator new(16 * v49);
                  unint64_t v51 = (uint64_t *)&v50[16 * v46];
                  *unint64_t v51 = v43;
                  v51[1] = v42;
                  if (v41 == v45)
                  {
                    long long v53 = &v50[16 * v46];
                    a2 = v59;
                  }
                  else
                  {
                    BOOL v52 = &v50[16 * v46];
                    a2 = v59;
                    do
                    {
                      long long v53 = v52 - 16;
                      *((_OWORD *)v52 - 1) = *((_OWORD *)v41 - 1);
                      v41 -= 2;
                      v52 -= 16;
                    }
                    while (v41 != v45);
                  }
                  uint64_t v41 = v51 + 2;
                  v40[5] = (uint64_t *)v53;
                  v40[6] = v51 + 2;
                  v40[7] = (uint64_t *)&v50[16 * v49];
                  if (v45) {
                    operator delete(v45);
                  }
                }
                else
                {
                  *uint64_t v41 = v43;
                  v41[1] = v42;
                  v41 += 2;
                }
                v40[6] = v41;
                v39 += 2;
              }
              while (v39 != v38);
              unint64_t v39 = v61;
            }
            uint64_t v3 = v57;
            if (v39) {
              operator delete(v39);
            }
            uint64_t v54 = (uint64_t *)v36[1];
            if (v54)
            {
              do
              {
                uint64_t v55 = v54;
                uint64_t v54 = (uint64_t *)*v54;
              }
              while (v54);
            }
            else
            {
              do
              {
                uint64_t v55 = (uint64_t *)v36[2];
                BOOL v56 = *v55 == (void)v36;
                char v36 = v55;
              }
              while (!v56);
            }
            char v36 = v55;
          }
          while (v55 != (uint64_t *)v67);
        }
        uint64_t v5 = llvm::LLParser::parseToken(v3, 13, "expected ')' in vTableFuncs");
        goto LABEL_7;
      }
      *(_DWORD *)(v3 + 224) = llvm::LLLexer::LexToken(v4);
      uint64_t v60 = 0;
    }
    while ((llvm::LLParser::parseToken(v3, 12, "expected '(' in vTableFunc") & 1) == 0);
  }
  uint64_t v5 = 1;
LABEL_7:
  sub_1CD4F4ECC(v67[0]);
  return v5;
}

uint64_t sub_1CC19CB54(uint64_t a1, void **this)
{
  uint64_t v3 = (llvm::LLLexer *)(a1 + 168);
  if (*(_DWORD *)(a1 + 224) == 457)
  {
    if (*((_DWORD *)this + 2) > 0x40u || *(_DWORD *)(a1 + 312) > 0x40u)
    {
      uint64_t v5 = (const void **)(a1 + 304);
      if ((void **)(a1 + 304) != this)
      {
        llvm::APInt::reallocate((uint64_t)this, *(_DWORD *)(a1 + 312));
        uint64_t v11 = *((unsigned int *)this + 2);
        if (v11 <= 0x40) {
          *this = (void *)*v5;
        }
        else {
          memcpy(*this, *v5, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
        }
      }
    }
    else
    {
      *this = *(void **)(a1 + 304);
      *((_DWORD *)this + 2) = *(_DWORD *)(a1 + 312);
    }
    int v6 = *(unsigned __int8 *)(a1 + 316);
    *((unsigned char *)this + 12) = v6;
    unsigned int v7 = *((_DWORD *)this + 2);
    if (v6)
    {
      if (v7 <= 0x3F) {
        goto LABEL_9;
      }
    }
    else if (v7 <= 0x3F)
    {
      uint64_t v8 = (uint64_t)((void)*this << -(char)v7) >> -(char)v7;
      goto LABEL_10;
    }
    if (v7 != 64)
    {
      uint64_t v8 = *(void *)*this;
      MEMORY[0x1D25D9CB0]();
      goto LABEL_10;
    }
LABEL_9:
    uint64_t v8 = (uint64_t)*this;
LABEL_10:
    *this = (void *)v8;
    *((_DWORD *)this + 2) = 64;
    *((unsigned char *)this + 12) = 0;
    int v9 = llvm::LLLexer::LexToken(v3);
    uint64_t result = 0;
    *(_DWORD *)(a1 + 224) = v9;
    return result;
  }
  uint64_t v12 = "expected integer";
  __int16 v13 = 259;
  return llvm::LLLexer::Error(a1 + 168, *(char **)(a1 + 216), (llvm::Twine *)&v12);
}

uint64_t llvm::LLParser::parseParamAccess(_DWORD *a1, unint64_t *a2, uint64_t a3)
{
  if ((llvm::LLParser::parseToken((uint64_t)a1, 12, "expected '(' here") & 1) == 0
    && (llvm::LLParser::parseParamNo((char **)a1, a2) & 1) == 0
    && (llvm::LLParser::parseToken((uint64_t)a1, 4, "expected ',' here") & 1) == 0
    && (llvm::LLParser::parseParamAccessOffset((llvm::LLParser *)a1, (llvm::ConstantRange *)(a2 + 1)) & 1) == 0)
  {
    if (a1[56] != 4) {
      return llvm::LLParser::parseToken((uint64_t)a1, 13, "expected ')' here");
    }
    a1[56] = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 42));
    if ((llvm::LLParser::parseToken((uint64_t)a1, 378, "expected 'calls' here") & 1) == 0
      && (llvm::LLParser::parseToken((uint64_t)a1, 16, "expected ':' here") & 1) == 0
      && (llvm::LLParser::parseToken((uint64_t)a1, 12, "expected '(' here") & 1) == 0)
    {
      while (1)
      {
        long long v32 = 0uLL;
        unsigned int v34 = 64;
        __src = (void *)-1;
        unsigned int v36 = 64;
        unint64_t v35 = (void *)-1;
        char v7 = llvm::LLParser::parseParamAccessCall((llvm::LLParser *)a1, (unint64_t *)&v32, a3);
        if ((v7 & 1) == 0)
        {
          unint64_t v9 = a2[6];
          unint64_t v8 = a2[7];
          if (v9 >= v8)
          {
            unint64_t v13 = a2[5];
            unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v13) >> 4);
            unint64_t v15 = v14 + 1;
            if (v14 + 1 > 0x555555555555555) {
              abort();
            }
            unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v13) >> 4);
            if (2 * v16 > v15) {
              unint64_t v15 = 2 * v16;
            }
            if (v16 >= 0x2AAAAAAAAAAAAAALL) {
              unint64_t v17 = 0x555555555555555;
            }
            else {
              unint64_t v17 = v15;
            }
            if (v17)
            {
              if (v17 > 0x555555555555555) {
                sub_1CB833614();
              }
              uint64_t v18 = (char *)operator new(48 * v17);
            }
            else
            {
              uint64_t v18 = 0;
            }
            unint64_t v19 = &v18[48 * v14];
            *(_OWORD *)unint64_t v19 = v32;
            unsigned int v20 = v34;
            *((_DWORD *)v19 + 6) = v34;
            if (v20 > 0x40) {
              operator new[]();
            }
            *((void *)v19 + 2) = __src;
            long long v21 = &v18[48 * v14];
            unsigned int v22 = v36;
            *((_DWORD *)v21 + 10) = v36;
            if (v22 > 0x40) {
              operator new[]();
            }
            *((void *)v21 + 4) = v35;
            char v23 = &v18[48 * v17];
            unint64_t v12 = (unint64_t)(v19 + 48);
            unint64_t v24 = (char *)a2[5];
            unint64_t v25 = (char *)a2[6];
            if (v25 == v24)
            {
              a2[5] = (unint64_t)v19;
              a2[6] = v12;
              a2[7] = (unint64_t)v23;
            }
            else
            {
              uint64_t v26 = 0;
              do
              {
                unint64_t v27 = &v19[v26];
                unint64_t v28 = &v25[v26];
                *((_OWORD *)v27 - 3) = *(_OWORD *)&v25[v26 - 48];
                *((_DWORD *)v27 - 6) = *(_DWORD *)&v25[v26 - 24];
                *((void *)v27 - 4) = *(void *)&v25[v26 - 32];
                *((_DWORD *)v28 - 6) = 0;
                *((_DWORD *)v27 - 2) = *(_DWORD *)&v25[v26 - 8];
                *((void *)v27 - 2) = *(void *)&v25[v26 - 16];
                *((_DWORD *)v28 - 2) = 0;
                v26 -= 48;
              }
              while (&v25[v26] != v24);
              unint64_t v25 = (char *)a2[5];
              uint64_t v29 = (char *)a2[6];
              a2[5] = (unint64_t)&v19[v26];
              a2[6] = v12;
              a2[7] = (unint64_t)v23;
              while (v29 != v25)
              {
                if (*((_DWORD *)v29 - 2) >= 0x41u)
                {
                  uint64_t v30 = *((void *)v29 - 2);
                  if (v30) {
                    MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
                  }
                }
                if (*((_DWORD *)v29 - 6) >= 0x41u)
                {
                  uint64_t v31 = *((void *)v29 - 4);
                  if (v31) {
                    MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
                  }
                }
                v29 -= 48;
              }
            }
            if (v25) {
              operator delete(v25);
            }
          }
          else
          {
            *(_OWORD *)unint64_t v9 = v32;
            unsigned int v10 = v34;
            *(_DWORD *)(v9 + 24) = v34;
            if (v10 > 0x40) {
              operator new[]();
            }
            *(void *)(v9 + 16) = __src;
            unsigned int v11 = v36;
            *(_DWORD *)(v9 + 40) = v36;
            if (v11 > 0x40) {
              operator new[]();
            }
            *(void *)(v9 + 32) = v35;
            unint64_t v12 = v9 + 48;
          }
          a2[6] = v12;
        }
        if (v36 >= 0x41 && v35) {
          MEMORY[0x1D25D9CB0](v35, 0x1000C8000313F17);
        }
        if (v34 >= 0x41)
        {
          if (__src) {
            MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
        }
        if (v7) {
          break;
        }
        if (a1[56] != 4)
        {
          if (llvm::LLParser::parseToken((uint64_t)a1, 13, "expected ')' here")) {
            return 1;
          }
          return llvm::LLParser::parseToken((uint64_t)a1, 13, "expected ')' here");
        }
        a1[56] = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 42));
      }
    }
  }
  return 1;
}

uint64_t llvm::LLParser::parseTypeTests(uint64_t a1, unint64_t **a2)
{
  unsigned int v4 = (llvm::LLLexer *)(a1 + 168);
  *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  if ((llvm::LLParser::parseToken(a1, 16, "expected ':' here") & 1) != 0
    || (llvm::LLParser::parseToken(a1, 12, "expected '(' in typeIdInfo") & 1) != 0)
  {
    return 1;
  }
  v63[0] = 0;
  v63[1] = 0;
  long long v62 = (uint64_t *)v63;
  int v7 = *(_DWORD *)(a1 + 224);
  BOOL v56 = a2;
  while (1)
  {
    unint64_t v57 = 0;
    if (v7 == 436)
    {
      unsigned int v61 = *(_DWORD *)(a1 + 256);
      uint64_t v8 = *(void *)(a1 + 216);
      unint64_t v9 = sub_1CD4F4F28(&v62, v61, &v61);
      unsigned int v10 = v9;
      unint64_t v11 = (unint64_t)((char *)a2[1] - (char *)*a2) >> 3;
      unint64_t v13 = v9[6];
      unint64_t v12 = v9[7];
      if (v13 >= v12)
      {
        unint64_t v15 = v9[5];
        uint64_t v16 = ((char *)v13 - (char *)v15) >> 4;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 60) {
          goto LABEL_79;
        }
        uint64_t v18 = (char *)v12 - (char *)v15;
        if (v18 >> 3 > v17) {
          unint64_t v17 = v18 >> 3;
        }
        unint64_t v19 = (unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v17;
        if (v19)
        {
          if (v19 >> 60) {
            goto LABEL_80;
          }
          unsigned int v20 = (char *)operator new(16 * v19);
        }
        else
        {
          unsigned int v20 = 0;
        }
        long long v21 = &v20[16 * v16];
        *(_DWORD *)long long v21 = v11;
        *((void *)v21 + 1) = v8;
        unsigned int v22 = (uint64_t *)v21;
        if (v13 != v15)
        {
          do
          {
            *((_OWORD *)v22 - 1) = *((_OWORD *)v13 - 1);
            v22 -= 2;
            v13 -= 2;
          }
          while (v13 != v15);
          unint64_t v13 = v10[5];
        }
        unint64_t v14 = (uint64_t *)(v21 + 16);
        void v10[5] = v22;
        v10[6] = (uint64_t *)(v21 + 16);
        v10[7] = (uint64_t *)&v20[16 * v19];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v13 = v11;
        v13[1] = v8;
        unint64_t v14 = v13 + 2;
      }
      v10[6] = v14;
      *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken(v4);
      a2 = v56;
    }
    else if (llvm::LLParser::parseUInt64((char **)a1, &v57))
    {
      uint64_t v5 = 1;
      goto LABEL_78;
    }
    unint64_t v24 = a2[1];
    unint64_t v23 = (unint64_t)a2[2];
    if ((unint64_t)v24 >= v23)
    {
      uint64_t v26 = *a2;
      uint64_t v27 = v24 - *a2;
      unint64_t v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 61) {
LABEL_79:
      }
        abort();
      uint64_t v29 = v23 - (void)v26;
      if (v29 >> 2 > v28) {
        unint64_t v28 = v29 >> 2;
      }
      unint64_t v30 = (unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v28;
      if (v30)
      {
        if (v30 >> 61) {
LABEL_80:
        }
          sub_1CB833614();
        uint64_t v31 = (char *)operator new(8 * v30);
      }
      else
      {
        uint64_t v31 = 0;
      }
      long long v32 = (unint64_t *)&v31[8 * v27];
      *long long v32 = v57;
      unint64_t v25 = v32 + 1;
      if (v24 == v26)
      {
        a2 = v56;
      }
      else
      {
        a2 = v56;
        do
        {
          unint64_t v33 = *--v24;
          *--long long v32 = v33;
        }
        while (v24 != v26);
      }
      *a2 = v32;
      a2[1] = v25;
      a2[2] = (unint64_t *)&v31[8 * v30];
      if (v26) {
        operator delete(v26);
      }
    }
    else
    {
      *unint64_t v24 = v57;
      unint64_t v25 = v24 + 1;
    }
    a2[1] = v25;
    if (*(_DWORD *)(a1 + 224) != 4) {
      break;
    }
    int v7 = llvm::LLLexer::LexToken(v4);
    *(_DWORD *)(a1 + 224) = v7;
  }
  uint64_t v55 = a1;
  unsigned int v34 = v62;
  if (v62 != (uint64_t *)v63)
  {
    do
    {
      LODWORD(v57) = *((_DWORD *)v34 + 8);
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      BOOL v58 = 0;
      sub_1CC0C57E8(&v58, (unsigned char *)v34[5], (unsigned char *)v34[6], (v34[6] - v34[5]) >> 4);
      unint64_t v35 = sub_1CD4F4F28((uint64_t **)(v55 + 1232), v57, &v57);
      BOOL v37 = v58;
      unsigned int v36 = v59;
      if (v58 != v59)
      {
        uint64_t v38 = v35;
        unint64_t v39 = v35[6];
        do
        {
          uint64_t v40 = v37[1];
          uint64_t v41 = (uint64_t)&(*a2)[*(unsigned int *)v37];
          unint64_t v42 = (unint64_t)v38[7];
          if ((unint64_t)v39 >= v42)
          {
            uint64_t v43 = v38[5];
            uint64_t v44 = ((char *)v39 - (char *)v43) >> 4;
            unint64_t v45 = v44 + 1;
            if ((unint64_t)(v44 + 1) >> 60) {
              goto LABEL_79;
            }
            uint64_t v46 = v42 - (void)v43;
            if (v46 >> 3 > v45) {
              unint64_t v45 = v46 >> 3;
            }
            if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v47 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v47 = v45;
            }
            if (v47 >> 60) {
              goto LABEL_80;
            }
            uint64_t v48 = (char *)operator new(16 * v47);
            unint64_t v49 = (uint64_t *)&v48[16 * v44];
            *unint64_t v49 = v41;
            v49[1] = v40;
            if (v39 == v43)
            {
              unint64_t v51 = &v48[16 * v44];
            }
            else
            {
              uint64_t v50 = &v48[16 * v44];
              do
              {
                unint64_t v51 = v50 - 16;
                *((_OWORD *)v50 - 1) = *((_OWORD *)v39 - 1);
                v39 -= 2;
                v50 -= 16;
              }
              while (v39 != v43);
            }
            unint64_t v39 = v49 + 2;
            unsigned char v38[5] = (uint64_t *)v51;
            v38[6] = v49 + 2;
            v38[7] = (uint64_t *)&v48[16 * v47];
            if (v43) {
              operator delete(v43);
            }
            a2 = v56;
          }
          else
          {
            uint64_t *v39 = v41;
            v39[1] = v40;
            v39 += 2;
          }
          v38[6] = v39;
          v37 += 2;
        }
        while (v37 != v36);
        BOOL v37 = v58;
      }
      if (v37) {
        operator delete(v37);
      }
      BOOL v52 = (uint64_t *)v34[1];
      if (v52)
      {
        do
        {
          long long v53 = v52;
          BOOL v52 = (uint64_t *)*v52;
        }
        while (v52);
      }
      else
      {
        do
        {
          long long v53 = (uint64_t *)v34[2];
          BOOL v54 = *v53 == (void)v34;
          unsigned int v34 = v53;
        }
        while (!v54);
      }
      unsigned int v34 = v53;
    }
    while (v53 != (uint64_t *)v63);
  }
  uint64_t v5 = llvm::LLParser::parseToken(v55, 13, "expected ')' in typeIdInfo");
LABEL_78:
  sub_1CD4F4ECC(v63[0]);
  return v5;
}

uint64_t llvm::LLParser::parseVFuncIdList(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (llvm::LLLexer *)(a1 + 168);
  *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  if ((llvm::LLParser::parseToken(a1, 16, "expected ':' here") & 1) != 0
    || (llvm::LLParser::parseToken(a1, 12, "expected '(' here") & 1) != 0)
  {
    return 1;
  }
  v48[0] = 0;
  v48[1] = 0;
  unint64_t v47 = (uint64_t *)v48;
  if (llvm::LLParser::parseVFuncId(a1, (unint64_t *)&v44, &v47, (a3[1] - *a3) >> 4)) {
    goto LABEL_28;
  }
  uint64_t v43 = a3;
  while (1)
  {
    unint64_t v9 = (_OWORD *)a3[1];
    unint64_t v8 = a3[2];
    if ((unint64_t)v9 >= v8)
    {
      unint64_t v11 = (_OWORD *)*a3;
      uint64_t v12 = ((uint64_t)v9 - *a3) >> 4;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60) {
LABEL_61:
      }
        abort();
      uint64_t v14 = v8 - (void)v11;
      if (v14 >> 3 > v13) {
        unint64_t v13 = v14 >> 3;
      }
      unint64_t v15 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v13;
      if (v15)
      {
        if (v15 >> 60) {
LABEL_62:
        }
          sub_1CB833614();
        uint64_t v16 = (char *)operator new(16 * v15);
      }
      else
      {
        uint64_t v16 = 0;
      }
      unint64_t v17 = &v16[16 * v12];
      *(_OWORD *)unint64_t v17 = v44;
      uint64_t v18 = v17;
      if (v9 != v11)
      {
        do
        {
          *((_OWORD *)v18 - 1) = *(v9 - 1);
          v18 -= 16;
          --v9;
        }
        while (v9 != v11);
        unint64_t v9 = (_OWORD *)*a3;
      }
      unint64_t v19 = (char **)a3;
      unsigned int v10 = v17 + 16;
      *unint64_t v19 = v18;
      v19[1] = v17 + 16;
      v19[2] = &v16[16 * v15];
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *unint64_t v9 = v44;
      unsigned int v10 = v9 + 1;
    }
    v43[1] = v10;
    a3 = v43;
    if (*(_DWORD *)(a1 + 224) != 4) {
      break;
    }
    *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken(v5);
    if (llvm::LLParser::parseVFuncId(a1, (unint64_t *)&v44, &v47, (v43[1] - *v43) >> 4)) {
      goto LABEL_28;
    }
  }
  if (llvm::LLParser::parseToken(a1, 13, "expected ')' here"))
  {
LABEL_28:
    uint64_t v6 = 1;
  }
  else
  {
    unsigned int v20 = v47;
    if (v47 != (uint64_t *)v48)
    {
      long long v21 = (uint64_t **)(a1 + 1232);
      unint64_t v42 = (uint64_t **)(a1 + 1232);
      do
      {
        LODWORD(v44) = *((_DWORD *)v20 + 8);
        unint64_t v45 = 0;
        uint64_t v46 = 0;
        *((void *)&v44 + 1) = 0;
        sub_1CC0C57E8((void *)&v44 + 1, (unsigned char *)v20[5], (unsigned char *)v20[6], (v20[6] - v20[5]) >> 4);
        unsigned int v22 = sub_1CD4F4F28(v21, v44, &v44);
        unint64_t v24 = (void *)*((void *)&v44 + 1);
        unint64_t v23 = v45;
        if (*((void **)&v44 + 1) != v45)
        {
          unint64_t v25 = v22;
          uint64_t v26 = v22[6];
          do
          {
            uint64_t v27 = v24[1];
            uint64_t v28 = *a3 + 16 * *(unsigned int *)v24;
            unint64_t v29 = (unint64_t)v25[7];
            if ((unint64_t)v26 >= v29)
            {
              unint64_t v30 = v25[5];
              uint64_t v31 = ((char *)v26 - (char *)v30) >> 4;
              unint64_t v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 60) {
                goto LABEL_61;
              }
              uint64_t v33 = v29 - (void)v30;
              if (v33 >> 3 > v32) {
                unint64_t v32 = v33 >> 3;
              }
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v34 = v32;
              }
              if (v34 >> 60) {
                goto LABEL_62;
              }
              unint64_t v35 = (char *)operator new(16 * v34);
              unsigned int v36 = (uint64_t *)&v35[16 * v31];
              *unsigned int v36 = v28;
              v36[1] = v27;
              if (v26 == v30)
              {
                uint64_t v38 = &v35[16 * v31];
                a3 = v43;
              }
              else
              {
                BOOL v37 = &v35[16 * v31];
                a3 = v43;
                do
                {
                  uint64_t v38 = v37 - 16;
                  *((_OWORD *)v37 - 1) = *((_OWORD *)v26 - 1);
                  v26 -= 2;
                  v37 -= 16;
                }
                while (v26 != v30);
              }
              uint64_t v26 = v36 + 2;
              v25[5] = (uint64_t *)v38;
              v25[6] = v36 + 2;
              v25[7] = (uint64_t *)&v35[16 * v34];
              if (v30) {
                operator delete(v30);
              }
            }
            else
            {
              *uint64_t v26 = v28;
              v26[1] = v27;
              v26 += 2;
            }
            v25[6] = v26;
            v24 += 2;
          }
          while (v24 != v23);
          unint64_t v24 = (void *)*((void *)&v44 + 1);
          long long v21 = v42;
        }
        if (v24) {
          operator delete(v24);
        }
        unint64_t v39 = (uint64_t *)v20[1];
        if (v39)
        {
          do
          {
            uint64_t v40 = v39;
            unint64_t v39 = (uint64_t *)*v39;
          }
          while (v39);
        }
        else
        {
          do
          {
            uint64_t v40 = (uint64_t *)v20[2];
            BOOL v41 = *v40 == (void)v20;
            unsigned int v20 = v40;
          }
          while (!v41);
        }
        unsigned int v20 = v40;
      }
      while (v40 != (uint64_t *)v48);
    }
    uint64_t v6 = 0;
  }
  sub_1CD4F4ECC(v48[0]);
  return v6;
}

uint64_t llvm::LLParser::parseConstVCallList(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = (llvm::LLLexer *)(a1 + 168);
  *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  if ((llvm::LLParser::parseToken(a1, 16, "expected ':' here") & 1) == 0
    && (llvm::LLParser::parseToken(a1, 12, "expected '(' here") & 1) == 0)
  {
    v38[0] = 0;
    v38[1] = 0;
    uint64_t v36 = 0;
    BOOL v37 = (uint64_t *)v38;
    std::string __p = 0;
    unint64_t v35 = 0;
    if (llvm::LLParser::parseConstVCall(a1, (unint64_t *)&v33, &v37, -858993459 * ((unint64_t)(a3[1] - *a3) >> 3)))
    {
LABEL_13:
      if (__p)
      {
        unint64_t v35 = __p;
        operator delete(__p);
      }
    }
    else
    {
      while (1)
      {
        unint64_t v8 = a3[1];
        if (v8 >= a3[2])
        {
          uint64_t v9 = sub_1CC0C48B0(a3, (uint64_t)&v33);
        }
        else
        {
          *(_OWORD *)unint64_t v8 = v33;
          *(void *)(v8 + 24) = 0;
          *(void *)(v8 + 32) = 0;
          *(void *)(v8 + 16) = 0;
          sub_1CBFCBA2C((void *)(v8 + 16), __p, (uint64_t)v35, (v35 - (unsigned char *)__p) >> 3);
          uint64_t v9 = v8 + 40;
        }
        a3[1] = v9;
        if (__p)
        {
          unint64_t v35 = __p;
          operator delete(__p);
        }
        if (*(_DWORD *)(a1 + 224) != 4) {
          break;
        }
        *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken(v5);
        std::string __p = 0;
        unint64_t v35 = 0;
        uint64_t v36 = 0;
        if (llvm::LLParser::parseConstVCall(a1, (unint64_t *)&v33, &v37, -858993459 * ((unint64_t)(a3[1] - *a3) >> 3)))goto LABEL_13; {
      }
        }
      if ((llvm::LLParser::parseToken(a1, 13, "expected ')' here") & 1) == 0)
      {
        unsigned int v10 = v37;
        if (v37 != (uint64_t *)v38)
        {
          uint64_t v31 = (uint64_t **)(a1 + 1232);
          do
          {
            LODWORD(v33) = *((_DWORD *)v10 + 8);
            std::string __p = 0;
            unint64_t v35 = 0;
            *((void *)&v33 + 1) = 0;
            sub_1CC0C57E8((void *)&v33 + 1, (unsigned char *)v10[5], (unsigned char *)v10[6], (v10[6] - v10[5]) >> 4);
            unint64_t v11 = sub_1CD4F4F28(v31, v33, &v33);
            unint64_t v13 = (void *)*((void *)&v33 + 1);
            uint64_t v12 = __p;
            if (*((void **)&v33 + 1) != __p)
            {
              uint64_t v14 = v11;
              unint64_t v15 = v11[6];
              unint64_t v32 = __p;
              do
              {
                uint64_t v16 = v13[1];
                uint64_t v17 = *a3 + 40 * *(unsigned int *)v13;
                unint64_t v18 = (unint64_t)v14[7];
                if ((unint64_t)v15 >= v18)
                {
                  unint64_t v19 = v14[5];
                  uint64_t v20 = ((char *)v15 - (char *)v19) >> 4;
                  unint64_t v21 = v20 + 1;
                  if ((unint64_t)(v20 + 1) >> 60) {
                    abort();
                  }
                  uint64_t v22 = v18 - (void)v19;
                  if (v22 >> 3 > v21) {
                    unint64_t v21 = v22 >> 3;
                  }
                  if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v23 = v21;
                  }
                  if (v23 >> 60) {
                    sub_1CB833614();
                  }
                  unint64_t v24 = (char *)operator new(16 * v23);
                  unint64_t v25 = (uint64_t *)&v24[16 * v20];
                  uint64_t *v25 = v17;
                  v25[1] = v16;
                  if (v15 == v19)
                  {
                    uint64_t v27 = &v24[16 * v20];
                  }
                  else
                  {
                    uint64_t v26 = &v24[16 * v20];
                    do
                    {
                      uint64_t v27 = v26 - 16;
                      *((_OWORD *)v26 - 1) = *((_OWORD *)v15 - 1);
                      v15 -= 2;
                      v26 -= 16;
                    }
                    while (v15 != v19);
                  }
                  unint64_t v15 = v25 + 2;
                  uint64_t v14[5] = (uint64_t *)v27;
                  _OWORD v14[6] = v25 + 2;
                  v14[7] = (uint64_t *)&v24[16 * v23];
                  if (v19) {
                    operator delete(v19);
                  }
                  uint64_t v12 = v32;
                }
                else
                {
                  *unint64_t v15 = v17;
                  v15[1] = v16;
                  v15 += 2;
                }
                _OWORD v14[6] = v15;
                v13 += 2;
              }
              while (v13 != v12);
              unint64_t v13 = (void *)*((void *)&v33 + 1);
            }
            if (v13) {
              operator delete(v13);
            }
            uint64_t v28 = (uint64_t *)v10[1];
            if (v28)
            {
              do
              {
                unint64_t v29 = v28;
                uint64_t v28 = (uint64_t *)*v28;
              }
              while (v28);
            }
            else
            {
              do
              {
                unint64_t v29 = (uint64_t *)v10[2];
                BOOL v30 = *v29 == (void)v10;
                unsigned int v10 = v29;
              }
              while (!v30);
            }
            unsigned int v10 = v29;
          }
          while (v29 != (uint64_t *)v38);
        }
        uint64_t v6 = 0;
        goto LABEL_17;
      }
    }
    uint64_t v6 = 1;
LABEL_17:
    sub_1CD4F4ECC(v38[0]);
    return v6;
  }
  return 1;
}

uint64_t sub_1CC19DD44(_DWORD *a1, unsigned int *a2)
{
  a1[56] = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 42));
  if (llvm::LLParser::parseToken((uint64_t)a1, 16, "expected ':'")) {
    return 1;
  }

  return llvm::LLParser::parseFlag((llvm::LLParser *)a1, a2);
}

llvm::Value *sub_1CC19DDB4(llvm::Value *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  int v7 = (void *)((char *)a1 - 32);
  *(void *)a1 = a2;
  *((void *)a1 + 1) = 0;
  *((unsigned char *)a1 + 16) = a3 + 28;
  *((unsigned char *)a1 + 17) = 0;
  *((_WORD *)a1 + 9) = 0;
  *((_DWORD *)a1 + 5) = *((_DWORD *)a1 + 5) & 0xC0000000 | 1;
  *(_OWORD *)((char *)a1 + 24) = 0u;
  unint64_t v8 = (char *)a1 + 24;
  *(_OWORD *)((char *)a1 + 40) = 0u;
  *((_DWORD *)a1 + 14) = 0;
  if (a5)
  {
    uint64_t v13 = *(void *)(a5 + 40);
    uint64_t v14 = (uint64_t *)(a5 + 24);
    *((void *)a1 + 5) = v13;
    *(_WORD *)(v13 + 18) &= ~0x8000u;
    if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
    {
      uint64_t v16 = *(void *)(v13 + 56);
      if (v16)
      {
        uint64_t v17 = *(llvm::ValueSymbolTable **)(v16 + 104);
        if (v17) {
          llvm::ValueSymbolTable::reinsertValue(v17, a1);
        }
      }
    }
    uint64_t v15 = *v14;
    *((void *)a1 + 3) = *v14;
    *((void *)a1 + 4) = v14;
    *(void *)(v15 + 8) = v8;
    uint64_t *v14 = (uint64_t)v8;
  }
  if (*v7)
  {
    **((void **)a1 - 2) = *((void *)a1 - 3);
    uint64_t v18 = *((void *)a1 - 3);
    if (v18) {
      *(void *)(v18 + 16) = *((void *)a1 - 2);
    }
  }
  *int v7 = a4;
  if (a4)
  {
    uint64_t v11 = *(void *)(a4 + 8);
    unsigned int v10 = (void *)(a4 + 8);
    uint64_t v9 = v11;
    *((void *)a1 - 3) = v11;
    if (v11) {
      *(void *)(v9 + 16) = (char *)a1 - 24;
    }
    *((void *)a1 - 2) = v10;
    *unsigned int v10 = v7;
  }
  return a1;
}

uint64_t sub_1CC19DEC4(uint64_t a1, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1CB8BDF7C(a1, *(const void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v4;
  }
  long long v5 = *(long long *)((char *)a2 + 24);
  long long v6 = *(long long *)((char *)a2 + 40);
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  sub_1CC19DF38(a1 + 64, (void *)a2 + 8);
  return a1;
}

uint64_t sub_1CC19DF38(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  long long v4 = a2 + 1;
  long long v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_1CD4F2B94((void **)a1, v3, v5 + 4, v5 + 4);
      long long v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          int v7 = v6;
          long long v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          int v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          long long v5 = v7;
        }
        while (!v8);
      }
      long long v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

uint64_t sub_1CC19DFD0(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  long long v4 = (unint64_t **)(a2 + 1);
  long long v5 = (unint64_t **)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_1CD4F2E4C((void **)a1, v3, v5 + 4, (uint64_t)(v5 + 4));
      long long v6 = v5[1];
      if (v6)
      {
        do
        {
          int v7 = (unint64_t **)v6;
          long long v6 = (unint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          int v7 = (unint64_t **)v5[2];
          BOOL v8 = *v7 == (unint64_t *)v5;
          long long v5 = v7;
        }
        while (!v8);
      }
      long long v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

unsigned __int8 **sub_1CC19E068(unsigned __int8 **result, unsigned __int8 *a2)
{
  if (*result)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    llvm::MetadataTracking::untrack((uint64_t)result, *result);
    a2 = v2;
    uint64_t result = v3;
  }
  _OWORD *result = a2;
  if (a2)
  {
    return (unsigned __int8 **)llvm::MetadataTracking::track((uint64_t)result, a2, 2);
  }
  return result;
}

void *sub_1CC19E0C8(void *result, char *__src, char *a3, unint64_t a4)
{
  long long v6 = __src;
  int v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *int v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      goto LABEL_23;
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    unint64_t v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 62) {
LABEL_23:
    }
      abort();
    uint64_t result = operator new(4 * v11);
    uint64_t v9 = (char *)result;
    *int v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + 4 * v11;
    size_t v12 = a3 - v6;
    if (v12) {
      uint64_t result = memcpy(result, v6, v12);
    }
    uint64_t v13 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  uint64_t v13 = (void **)(result + 1);
  uint64_t v14 = (unsigned char *)result[1];
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
  {
    size_t v12 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    uint64_t v17 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v17, __src, v12);
    goto LABEL_22;
  }
  uint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v14 - v9);
    uint64_t v9 = (char *)*v13;
  }
  size_t v12 = a3 - v16;
  if (v12)
  {
    uint64_t v17 = v9;
    __src = v16;
    goto LABEL_21;
  }
LABEL_22:
  *uint64_t v13 = &v9[v12];
  return result;
}

void sub_1CC19E208(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  if (a2 != a4)
  {
    long long v6 = (uint64_t *)a4[1];
    if (v6 != a2)
    {
      llvm::SymbolTableListTraits<llvm::BasicBlock>::transferNodesFromList(a1, a3, (uint64_t)a4, a4[1]);
      if (v6 != a4)
      {
        uint64_t v7 = *v6;
        uint64_t v8 = *a4;
        *(void *)(v8 + 8) = v6;
        uint64_t *v6 = v8;
        uint64_t v9 = *a2;
        *(void *)(v7 + 8) = a2;
        *a4 = v9;
        *(void *)(v9 + 8) = a4;
        *a2 = v7;
      }
    }
  }
}

uint64_t sub_1CC19E288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a4 + 8))
  {
    __int16 v10 = 1283;
    v9[0] = "field '";
    void v9[2] = a2;
    void v9[3] = a3;
    v11[0] = v9;
    v11[2] = "' cannot be specified more than once";
    __int16 v12 = 770;
    return llvm::LLLexer::Error(a1 + 168, *(char **)(a1 + 216), (llvm::Twine *)v11);
  }
  else
  {
    *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
    return sub_1CC19E5CC(a1, a2, a3, a4);
  }
}

uint64_t sub_1CC19E350(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8))
  {
    __int16 v6 = 1283;
    v5[0] = "field '";
    int v5[2] = "column";
    v5[3] = 6;
    v7[0] = v5;
    v7[2] = "' cannot be specified more than once";
    __int16 v8 = 770;
    return llvm::LLLexer::Error(a1 + 168, *(char **)(a1 + 216), (llvm::Twine *)v7);
  }
  else
  {
    *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
    return sub_1CC19E5CC(a1, (uint64_t)"column", 6, a2);
  }
}

uint64_t sub_1CC19E414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a4 + 8))
  {
    __int16 v10 = 1283;
    v9[0] = "field '";
    void v9[2] = a2;
    void v9[3] = a3;
    v11[0] = v9;
    v11[2] = "' cannot be specified more than once";
    __int16 v12 = 770;
    return llvm::LLLexer::Error(a1 + 168, *(char **)(a1 + 216), (llvm::Twine *)v11);
  }
  else
  {
    *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
    return sub_1CC19E704(a1, a2, a3, a4);
  }
}

uint64_t sub_1CC19E4DC(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  if (a4[1])
  {
    __int16 v13 = 1283;
    v12[0] = "field '";
    v12[2] = a2;
    v12[3] = a3;
    v14[0] = v12;
    v14[2] = "' cannot be specified more than once";
    __int16 v15 = 770;
    uint64_t v10 = a1 + 168;
    unint64_t v11 = *(char **)(a1 + 216);
    return llvm::LLLexer::Error(v10, v11, (llvm::Twine *)v14);
  }
  int v6 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  *(_DWORD *)(a1 + 224) = v6;
  char v7 = 1;
  if (v6 != 19)
  {
    if (v6 == 20)
    {
      char v7 = 0;
      goto LABEL_5;
    }
    v14[0] = "expected 'true' or 'false'";
    __int16 v15 = 259;
    unint64_t v11 = *(char **)(a1 + 216);
    uint64_t v10 = a1 + 168;
    return llvm::LLLexer::Error(v10, v11, (llvm::Twine *)v14);
  }
LABEL_5:
  a4[1] = 1;
  *a4 = v7;
  int v8 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  uint64_t result = 0;
  *(_DWORD *)(a1 + 224) = v8;
  return result;
}

uint64_t sub_1CC19E5CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v5 = (llvm::LLLexer *)(a1 + 168);
  if (*(_DWORD *)(a1 + 224) != 457 || !*(unsigned char *)(a1 + 316))
  {
    v20[0] = "expected unsigned integer";
    __int16 v15 = 259;
LABEL_17:
    __int16 v21 = v15;
    return llvm::LLLexer::Error((uint64_t)v5, *(char **)(a1 + 216), (llvm::Twine *)v20);
  }
  uint64_t v6 = *(unsigned int *)(a1 + 312);
  if (v6 >= 0x41)
  {
    int v8 = 0;
    int64_t v9 = (unint64_t)(v6 + 63) >> 6;
    do
    {
      if (v9-- < 1) {
        break;
      }
      unint64_t v11 = *(void *)(*(void *)(a1 + 304) + 8 * v9);
      v8 += __clz(v11);
    }
    while (!v11);
    int v12 = v6 | 0xFFFFFFC0;
    if ((v6 & 0x3F) == 0) {
      int v12 = 0;
    }
    if ((v6 - v8 - v12) > 0x40) {
      goto LABEL_16;
    }
    unint64_t v7 = **(void **)(a1 + 304);
  }
  else
  {
    unint64_t v7 = *(void *)(a1 + 304);
  }
  if (v7 > *(void *)(a4 + 16))
  {
LABEL_16:
    __int16 v17 = 1283;
    v16[0] = "value for '";
    v16[2] = a2;
    uint64_t v16[3] = a3;
    v18[0] = v16;
    v18[2] = "' too large, limit is ";
    __int16 v19 = 770;
    v20[0] = v18;
    v20[2] = a4 + 16;
    __int16 v15 = 3074;
    goto LABEL_17;
  }
  *(unsigned char *)(a4 + 8) = 1;
  *(void *)a4 = v7;
  int v13 = llvm::LLLexer::LexToken(v5);
  uint64_t result = 0;
  *(_DWORD *)(a1 + 224) = v13;
  return result;
}

uint64_t sub_1CC19E704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(a1 + 224) == 53)
  {
    uint64_t v6 = (llvm::LLLexer *)(a1 + 168);
    if (*(unsigned char *)(a4 + 9))
    {
      int v7 = llvm::LLLexer::LexToken(v6);
      uint64_t result = 0;
      *(_DWORD *)(a1 + 224) = v7;
      *(unsigned char *)(a4 + 8) = 1;
      *(void *)a4 = 0;
    }
    else
    {
      __int16 v11 = 1283;
      v10[0] = "'";
      void v10[2] = a2;
      v10[3] = a3;
      v12[0] = (llvm::Metadata *)v10;
      v12[2] = (llvm::Metadata *)"' cannot be null";
      __int16 v13 = 770;
      return llvm::LLLexer::Error((uint64_t)v6, *(char **)(a1 + 216), (llvm::Twine *)v12);
    }
  }
  else
  {
    v12[0] = 0;
    uint64_t result = llvm::LLParser::parseMetadata(a1, v12, 0);
    if ((result & 1) == 0)
    {
      int64_t v9 = v12[0];
      *(unsigned char *)(a4 + 8) = 1;
      *(void *)a4 = v9;
    }
  }
  return result;
}

uint64_t sub_1CC19E7D4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8))
  {
    __int16 v21 = 1283;
    v18[0] = "field '";
    __int16 v19 = "tag";
    uint64_t v20 = 3;
    uint64_t v22 = (const char *)v18;
    unint64_t v23 = "' cannot be specified more than once";
    __int16 v24 = 770;
    uint64_t v13 = a1 + 168;
    uint64_t v14 = *(char **)(a1 + 216);
    return llvm::LLLexer::Error(v13, v14, (llvm::Twine *)&v22);
  }
  int v4 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  *(_DWORD *)(a1 + 224) = v4;
  if (v4 == 443)
  {
    char v6 = *(unsigned char *)(a1 + 255);
    int v7 = v6;
    if (v6 >= 0) {
      int v8 = (char *)(a1 + 232);
    }
    else {
      int v8 = *(char **)(a1 + 232);
    }
    uint64_t v9 = v6 & 0x7F;
    if (v7 >= 0) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = *(void *)(a1 + 240);
    }
    unsigned int Tag = llvm::dwarf::getTag(v8, v10);
    if (Tag != -1)
    {
      *(unsigned char *)(a2 + 8) = 1;
      *(void *)a2 = Tag;
      int v12 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
      uint64_t result = 0;
      *(_DWORD *)(a1 + 224) = v12;
      return result;
    }
    v16[0] = "invalid DWARF tag";
    v16[2] = " '";
    __int16 v17 = 771;
    v18[0] = v16;
    __int16 v19 = (const char *)(a1 + 232);
    __int16 v21 = 1026;
    uint64_t v22 = (const char *)v18;
    unint64_t v23 = "'";
    __int16 v15 = 770;
    goto LABEL_18;
  }
  if (v4 != 457)
  {
    uint64_t v22 = "expected DWARF tag";
    __int16 v15 = 259;
LABEL_18:
    __int16 v24 = v15;
    uint64_t v14 = *(char **)(a1 + 216);
    uint64_t v13 = a1 + 168;
    return llvm::LLLexer::Error(v13, v14, (llvm::Twine *)&v22);
  }

  return sub_1CC19E5CC(a1, (uint64_t)"tag", 3, a2);
}

uint64_t sub_1CC19E984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a4 + 8))
  {
    __int16 v20 = 1283;
    v17[0] = "field '";
    uint64_t v18 = a2;
    uint64_t v19 = a3;
    v21[0] = v17;
    uint64_t v22 = "' cannot be specified more than once";
    __int16 v23 = 770;
    return llvm::LLLexer::Error(a1 + 168, *(char **)(a1 + 216), (llvm::Twine *)v21);
  }
  *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  int v8 = *(char **)(a1 + 216);
  memset(&v24, 0, sizeof(v24));
  if (llvm::LLParser::parseStringConstant(a1, &v24))
  {
    uint64_t v9 = 1;
    goto LABEL_21;
  }
  if (*(unsigned char *)(a4 + 9))
  {
    std::string::size_type size = v24.__r_.__value_.__l.__size_;
    size_t v11 = *((unsigned char *)&v24.__r_.__value_.__s + 23) & 0x7F;
LABEL_11:
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v13 = v11;
    }
    else {
      size_t v13 = size;
    }
    if (v13)
    {
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v14 = &v24;
      }
      else {
        uint64_t v14 = (std::string *)v24.__r_.__value_.__r.__words[0];
      }
      __int16 v15 = llvm::MDString::get(*(uint64_t **)a1, (unsigned __int8 *)v14, v13);
    }
    else
    {
      __int16 v15 = 0;
    }
    uint64_t v9 = 0;
    *(unsigned char *)(a4 + 8) = 1;
    *(void *)a4 = v15;
    goto LABEL_21;
  }
  std::string::size_type size = v24.__r_.__value_.__l.__size_;
  size_t v11 = *((unsigned char *)&v24.__r_.__value_.__s + 23) & 0x7F;
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v12 = *((unsigned char *)&v24.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type v12 = v24.__r_.__value_.__l.__size_;
  }
  if (v12) {
    goto LABEL_11;
  }
  __int16 v20 = 1283;
  v17[0] = "'";
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  v21[0] = v17;
  uint64_t v22 = "' cannot be empty";
  __int16 v23 = 770;
  uint64_t v9 = llvm::LLLexer::Error(a1 + 168, v8, (llvm::Twine *)v21);
LABEL_21:
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  return v9;
}

uint64_t sub_1CC19EB20(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  if (*((unsigned char *)a4 + 48))
  {
    __int16 v16 = 1283;
    v15[0] = "field '";
    uint64_t v15[2] = a2;
    uint64_t v15[3] = a3;
    *(void *)&long long v17 = v15;
    *(void *)&long long v18 = "' cannot be specified more than once";
    __int16 v19 = 770;
    return llvm::LLLexer::Error(a1 + 168, *(char **)(a1 + 216), (llvm::Twine *)&v17);
  }
  int v8 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  *(_DWORD *)(a1 + 224) = v8;
  if (v8 == 457)
  {
    long long v9 = a4[1];
    long long v17 = *a4;
    long long v18 = v9;
    uint64_t result = sub_1CC19EC30(a1, a2, a3, (uint64_t)&v17);
    if (result) {
      return result;
    }
    long long v11 = v18;
    *a4 = v17;
    a4[1] = v11;
    int v12 = 1;
    *((unsigned char *)a4 + 48) = 1;
  }
  else
  {
    long long v17 = a4[2];
    uint64_t result = sub_1CC19E704(a1, a2, a3, (uint64_t)&v17);
    if (result) {
      return result;
    }
    __int16 v14 = WORD4(v17);
    uint64_t v13 = v17;
    *((unsigned char *)a4 + 48) = 1;
    *((void *)a4 + 4) = v13;
    *((_WORD *)a4 + 20) = v14;
    int v12 = 2;
  }
  *((_DWORD *)a4 + 13) = v12;
  return result;
}

uint64_t sub_1CC19EC30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v5 = (llvm::LLLexer *)(a1 + 168);
  if (*(_DWORD *)(a1 + 224) != 457)
  {
    v23[0] = "expected signed integer";
    __int16 v15 = 259;
LABEL_17:
    __int16 v24 = v15;
    return llvm::LLLexer::Error((uint64_t)v5, *(char **)(a1 + 216), (llvm::Twine *)v23);
  }
  long long v9 = (uint64_t *)(a1 + 304);
  uint64_t v10 = a4 + 16;
  if (sub_1CC19EDB4(a1 + 304, *(void *)(a4 + 16)))
  {
    __int16 v20 = 1283;
    long long v17 = "value for '";
    uint64_t v18 = a2;
    uint64_t v19 = a3;
    __int16 v16 = "' too small, limit is ";
LABEL_16:
    v21[0] = &v17;
    void v21[2] = v16;
    __int16 v22 = 770;
    v23[0] = v21;
    v23[2] = v10;
    __int16 v15 = 3330;
    goto LABEL_17;
  }
  uint64_t v10 = a4 + 24;
  if (sub_1CC19EE24(a1 + 304, *(void *)(a4 + 24)))
  {
    __int16 v20 = 1283;
    long long v17 = "value for '";
    uint64_t v18 = a2;
    uint64_t v19 = a3;
    __int16 v16 = "' too large, limit is ";
    goto LABEL_16;
  }
  unsigned int v11 = *(_DWORD *)(a1 + 312);
  if (*(unsigned char *)(a1 + 316))
  {
    if (v11 >= 0x41) {
      long long v9 = (uint64_t *)*v9;
    }
    uint64_t v12 = *v9;
  }
  else if (v11 > 0x40)
  {
    uint64_t v12 = *(void *)*v9;
  }
  else
  {
    uint64_t v12 = *v9 << -(char)v11 >> -(char)v11;
  }
  *(unsigned char *)(a4 + 8) = 1;
  *(void *)a4 = v12;
  int v13 = llvm::LLLexer::LexToken(v5);
  uint64_t result = 0;
  *(_DWORD *)(a1 + 224) = v13;
  return result;
}

uint64_t sub_1CC19EDB4(uint64_t a1, uint64_t a2)
{
  unsigned int v6 = 64;
  uint64_t v5 = a2;
  char v7 = 0;
  unsigned int v2 = sub_1CC19EE98(a1, (uint64_t)&v5);
  if (v6 >= 0x41 && v5)
  {
    unsigned int v4 = v2;
    MEMORY[0x1D25D9CB0](v5, 0x1000C8000313F17);
    unsigned int v2 = v4;
  }
  return v2 >> 31;
}

BOOL sub_1CC19EE24(uint64_t a1, uint64_t a2)
{
  unsigned int v6 = 64;
  uint64_t v5 = a2;
  char v7 = 0;
  int v2 = sub_1CC19EE98(a1, (uint64_t)&v5);
  if (v6 >= 0x41 && v5)
  {
    int v4 = v2;
    MEMORY[0x1D25D9CB0](v5, 0x1000C8000313F17);
    int v2 = v4;
  }
  return v2 > 0;
}

uint64_t sub_1CC19EE98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v4 == v5 && (*(unsigned char *)(a1 + 12) == 0) == (*(unsigned char *)(a2 + 12) == 0))
  {
    if (!*(unsigned char *)(a1 + 12))
    {
      if (v4 <= 0x40)
      {
        uint64_t v6 = (uint64_t)(*(void *)a1 << -(char)v4) >> -(char)v4;
        uint64_t v7 = (uint64_t)(*(void *)a2 << -(char)v4) >> -(char)v4;
        BOOL v18 = v6 < v7;
        BOOL v8 = v6 > v7;
        if (v18) {
          return 0xFFFFFFFFLL;
        }
        else {
          return v8;
        }
      }
      unsigned int v19 = (v4 - 1) >> 6;
      uint64_t v20 = 1 << (v4 - 1);
      if (((*(void *)(*(void *)a1 + 8 * v19) & v20) != 0) != ((*(void *)(*(void *)a2 + 8 * v19) & v20) != 0))
      {
        if ((*(void *)(*(void *)a1 + 8 * v19) & v20) != 0) {
          return 0xFFFFFFFFLL;
        }
        else {
          return 1;
        }
      }
      unint64_t v21 = ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8;
      while (v21)
      {
        unint64_t v22 = *(void *)(*(void *)a1 - 8 + v21);
        unint64_t v23 = *(void *)(*(void *)a2 - 8 + v21);
        v21 -= 8;
        BOOL v18 = v22 > v23;
        if (v22 != v23) {
          goto LABEL_38;
        }
      }
      return 0;
    }
    if (v4 > 0x40)
    {
      unint64_t v15 = ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8;
      while (v15)
      {
        unint64_t v16 = *(void *)(*(void *)a1 - 8 + v15);
        unint64_t v17 = *(void *)(*(void *)a2 - 8 + v15);
        v15 -= 8;
        BOOL v18 = v16 > v17;
        if (v16 != v17) {
          goto LABEL_38;
        }
      }
      return 0;
    }
    goto LABEL_23;
  }
  if (v4 > v5)
  {
    sub_1CC19F124(a2, v4, (uint64_t)&v28);
    uint64_t v12 = &v28;
    unsigned int v11 = (uint64_t *)a1;
  }
  else
  {
    if (v5 <= v4)
    {
      if (*(unsigned char *)(a1 + 12))
      {
        if (!*(unsigned char *)(a2 + 12))
        {
          char v13 = v5 - 1;
          __int16 v14 = (void *)(v5 >= 0x41 ? *(void *)a2 + 8 * ((v5 - 1) >> 6) : a2);
          if ((*v14 >> v13)) {
            return 1;
          }
        }
      }
      else
      {
        uint64_t v27 = (void *)(*(void *)a1 + 8 * ((v4 - 1) >> 6));
        if (v4 < 0x41) {
          uint64_t v27 = (void *)a1;
        }
        if ((*v27 >> (v4 - 1))) {
          return 0xFFFFFFFFLL;
        }
      }
      if (v4 > 0x40)
      {
        unint64_t v24 = ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8;
        while (v24)
        {
          unint64_t v25 = *(void *)(*(void *)a1 - 8 + v24);
          unint64_t v26 = *(void *)(*(void *)a2 - 8 + v24);
          v24 -= 8;
          BOOL v18 = v25 > v26;
          if (v25 != v26)
          {
LABEL_38:
            if (v18) {
              return 1;
            }
            else {
              return 0xFFFFFFFFLL;
            }
          }
        }
        return 0;
      }
LABEL_23:
      if (*(void *)a1 < *(void *)a2) {
        return 0xFFFFFFFFLL;
      }
      else {
        return *(void *)a1 > *(void *)a2;
      }
    }
    sub_1CC19F124(a1, *(_DWORD *)(a2 + 8), (uint64_t)&v28);
    unsigned int v11 = &v28;
    uint64_t v12 = (uint64_t *)a2;
  }
  uint64_t v9 = sub_1CC19EE98(v11, v12);
  if (v29 >= 0x41 && v28) {
    MEMORY[0x1D25D9CB0](v28, 0x1000C8000313F17);
  }
  return v9;
}

uint64_t sub_1CC19F124@<X0>(uint64_t this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v3 = a2;
  uint64_t v4 = this;
  if (*(unsigned char *)(this + 12))
  {
    if (a2 > 0x40)
    {
      if (*(_DWORD *)(this + 8) != a2) {
        operator new[]();
      }
      uint64_t v6 = &v11;
      this = sub_1CD0463BC((uint64_t)&v11, this);
      unsigned int v3 = v12;
    }
    else
    {
      unint64_t v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
      if (!a2) {
        unint64_t v9 = 0;
      }
      unint64_t v11 = v9 & *(void *)this;
      uint64_t v6 = &v11;
    }
  }
  else
  {
    uint64_t v6 = (unint64_t *)v10;
    this = llvm::APInt::sext(this, a2, (uint64_t)v10);
    unsigned int v3 = v10[2];
  }
  char v7 = *(unsigned char *)(v4 + 12);
  unint64_t v8 = *v6;
  *(_DWORD *)(a3 + 8) = v3;
  *(void *)a3 = v8;
  *(unsigned char *)(a3 + 12) = v7;
  return this;
}

uint64_t sub_1CC19F260(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8))
  {
    __int16 v21 = 1283;
    v18[0] = "field '";
    unsigned int v19 = "encoding";
    uint64_t v20 = 8;
    unint64_t v22 = (const char *)v18;
    unint64_t v23 = "' cannot be specified more than once";
    __int16 v24 = 770;
    uint64_t v13 = a1 + 168;
    __int16 v14 = *(char **)(a1 + 216);
    return llvm::LLLexer::Error(v13, v14, (llvm::Twine *)&v22);
  }
  int v4 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  *(_DWORD *)(a1 + 224) = v4;
  if (v4 == 444)
  {
    char v6 = *(unsigned char *)(a1 + 255);
    int v7 = v6;
    if (v6 >= 0) {
      uint64_t v8 = a1 + 232;
    }
    else {
      uint64_t v8 = *(void *)(a1 + 232);
    }
    uint64_t v9 = v6 & 0x7F;
    if (v7 >= 0) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = *(void *)(a1 + 240);
    }
    unsigned int AttributeEncoding = llvm::dwarf::getAttributeEncoding(v8, v10);
    if (AttributeEncoding)
    {
      *(unsigned char *)(a2 + 8) = 1;
      *(void *)a2 = AttributeEncoding;
      int v12 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
      uint64_t result = 0;
      *(_DWORD *)(a1 + 224) = v12;
      return result;
    }
    v16[0] = "invalid DWARF type attribute encoding";
    v16[2] = " '";
    __int16 v17 = 771;
    v18[0] = v16;
    unsigned int v19 = (const char *)(a1 + 232);
    __int16 v21 = 1026;
    unint64_t v22 = (const char *)v18;
    unint64_t v23 = "'";
    __int16 v15 = 770;
    goto LABEL_18;
  }
  if (v4 != 457)
  {
    unint64_t v22 = "expected DWARF type attribute encoding";
    __int16 v15 = 259;
LABEL_18:
    __int16 v24 = v15;
    __int16 v14 = *(char **)(a1 + 216);
    uint64_t v13 = a1 + 168;
    return llvm::LLLexer::Error(v13, v14, (llvm::Twine *)&v22);
  }

  return sub_1CC19E5CC(a1, (uint64_t)"encoding", 8, a2);
}

uint64_t sub_1CC19F40C(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 4))
  {
    int v4 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
    int v5 = 0;
    while (1)
    {
      *(_DWORD *)(a1 + 224) = v4;
      if (v4 == 451)
      {
        char v6 = *(unsigned char *)(a1 + 255);
        BOOL v7 = v6 < 0;
        if (v6 >= 0) {
          uint64_t v8 = a1 + 232;
        }
        else {
          uint64_t v8 = *(void *)(a1 + 232);
        }
        uint64_t v9 = v6 & 0x7F;
        if (v7) {
          uint64_t v10 = *(void *)(a1 + 240);
        }
        else {
          uint64_t v10 = v9;
        }
        unsigned int Flag = llvm::DINode::getFlag(v8, v10);
        if (Flag)
        {
          unsigned int v12 = Flag;
          int v13 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
          *(_DWORD *)(a1 + 224) = v13;
          goto LABEL_12;
        }
        v15[0] = "invalid debug info flag '";
        unint64_t v16 = (const char *)(a1 + 232);
        __int16 v18 = 1027;
        *(void *)unsigned int v19 = v15;
        uint64_t v20 = "'";
        __int16 v21 = 770;
      }
      else
      {
        if (v4 == 457 && *(unsigned char *)(a1 + 316))
        {
          v19[0] = 0;
          if (llvm::LLParser::parseUInt32((char **)a1, v19)) {
            return 1;
          }
          unsigned int v12 = v19[0];
          goto LABEL_20;
        }
        *(void *)unsigned int v19 = "expected debug info flag";
        __int16 v21 = 259;
      }
      if (llvm::LLLexer::Error(a1 + 168, *(char **)(a1 + 216), (llvm::Twine *)v19)) {
        return 1;
      }
      unsigned int v12 = 0;
LABEL_20:
      int v13 = *(_DWORD *)(a1 + 224);
LABEL_12:
      v5 |= v12;
      if (v13 != 15)
      {
        uint64_t result = 0;
        *(unsigned char *)(a2 + 4) = 1;
        *(_DWORD *)a2 = v5;
        return result;
      }
      int v4 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
    }
  }
  __int16 v18 = 1283;
  v15[0] = "field '";
  unint64_t v16 = "flags";
  uint64_t v17 = 5;
  *(void *)unsigned int v19 = v15;
  uint64_t v20 = "' cannot be specified more than once";
  __int16 v21 = 770;
  return llvm::LLLexer::Error(a1 + 168, *(char **)(a1 + 216), (llvm::Twine *)v19);
}

uint64_t sub_1CC19F5D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a4 + 8))
  {
    __int16 v25 = 1283;
    v22[0] = "field '";
    uint64_t v23 = a2;
    uint64_t v24 = a3;
    unint64_t v26 = (const char *)v22;
    uint64_t v27 = "' cannot be specified more than once";
    __int16 v28 = 770;
    uint64_t v17 = a1 + 168;
    __int16 v18 = *(char **)(a1 + 216);
    return llvm::LLLexer::Error(v17, v18, (llvm::Twine *)&v26);
  }
  int v8 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  *(_DWORD *)(a1 + 224) = v8;
  if (v8 == 446)
  {
    char v10 = *(unsigned char *)(a1 + 255);
    int v11 = v10;
    if (v10 >= 0) {
      uint64_t v12 = a1 + 232;
    }
    else {
      uint64_t v12 = *(void *)(a1 + 232);
    }
    uint64_t v13 = v10 & 0x7F;
    if (v11 >= 0) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = *(void *)(a1 + 240);
    }
    unsigned int Language = llvm::dwarf::getLanguage(v12, v14);
    if (Language)
    {
      *(unsigned char *)(a4 + 8) = 1;
      *(void *)a4 = Language;
      int v16 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
      uint64_t result = 0;
      *(_DWORD *)(a1 + 224) = v16;
      return result;
    }
    v20[0] = "invalid DWARF language";
    v20[2] = " '";
    __int16 v21 = 771;
    v22[0] = v20;
    uint64_t v23 = a1 + 232;
    __int16 v25 = 1026;
    unint64_t v26 = (const char *)v22;
    uint64_t v27 = "'";
    __int16 v19 = 770;
    goto LABEL_18;
  }
  if (v8 != 457)
  {
    unint64_t v26 = "expected DWARF language";
    __int16 v19 = 259;
LABEL_18:
    __int16 v28 = v19;
    __int16 v18 = *(char **)(a1 + 216);
    uint64_t v17 = a1 + 168;
    return llvm::LLLexer::Error(v17, v18, (llvm::Twine *)&v26);
  }

  return sub_1CC19E5CC(a1, a2, a3, a4);
}

uint64_t sub_1CC19F780(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8))
  {
    __int16 v21 = 1283;
    v18[0] = "field '";
    __int16 v19 = "emissionKind";
    uint64_t v20 = 12;
    unint64_t v22 = (const char *)v18;
    uint64_t v23 = "' cannot be specified more than once";
    __int16 v24 = 770;
    uint64_t v13 = a1 + 168;
    uint64_t v14 = *(char **)(a1 + 216);
    return llvm::LLLexer::Error(v13, v14, (llvm::Twine *)&v22);
  }
  int v4 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  *(_DWORD *)(a1 + 224) = v4;
  if (v4 != 457)
  {
    if (v4 == 448)
    {
      char v6 = *(unsigned char *)(a1 + 255);
      int v7 = v6;
      if (v6 >= 0) {
        int v8 = (int *)(a1 + 232);
      }
      else {
        int v8 = *(int **)(a1 + 232);
      }
      uint64_t v9 = v6 & 0x7F;
      if (v7 >= 0) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = *(void *)(a1 + 240);
      }
      uint64_t EmissionKind = llvm::DICompileUnit::getEmissionKind(v8, v10);
      if ((EmissionKind & 0xFF00000000) != 0)
      {
        *(unsigned char *)(a2 + 8) = 1;
        *(void *)a2 = EmissionKind;
        int v12 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
        uint64_t result = 0;
        *(_DWORD *)(a1 + 224) = v12;
        return result;
      }
      v16[0] = "invalid emission kind";
      v16[2] = " '";
      __int16 v17 = 771;
      v18[0] = v16;
      __int16 v19 = (const char *)(a1 + 232);
      __int16 v21 = 1026;
      unint64_t v22 = (const char *)v18;
      uint64_t v23 = "'";
      __int16 v15 = 770;
    }
    else
    {
      unint64_t v22 = "expected emission kind";
      __int16 v15 = 259;
    }
    __int16 v24 = v15;
    uint64_t v14 = *(char **)(a1 + 216);
    uint64_t v13 = a1 + 168;
    return llvm::LLLexer::Error(v13, v14, (llvm::Twine *)&v22);
  }

  return sub_1CC19E5CC(a1, (uint64_t)"emissionKind", 12, a2);
}

uint64_t sub_1CC19F930(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8))
  {
    __int16 v21 = 1283;
    v18[0] = "field '";
    __int16 v19 = "nameTableKind";
    uint64_t v20 = 13;
    unint64_t v22 = (const char *)v18;
    uint64_t v23 = "' cannot be specified more than once";
    __int16 v24 = 770;
    uint64_t v13 = a1 + 168;
    uint64_t v14 = *(char **)(a1 + 216);
    return llvm::LLLexer::Error(v13, v14, (llvm::Twine *)&v22);
  }
  int v4 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  *(_DWORD *)(a1 + 224) = v4;
  if (v4 != 457)
  {
    if (v4 == 449)
    {
      char v6 = *(unsigned char *)(a1 + 255);
      int v7 = v6;
      if (v6 >= 0) {
        uint64_t v8 = a1 + 232;
      }
      else {
        uint64_t v8 = *(void *)(a1 + 232);
      }
      uint64_t v9 = v6 & 0x7F;
      if (v7 >= 0) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = *(void *)(a1 + 240);
      }
      uint64_t NameTableKind = llvm::DICompileUnit::getNameTableKind(v8, v10);
      if ((NameTableKind & 0xFF00000000) != 0)
      {
        *(unsigned char *)(a2 + 8) = 1;
        *(void *)a2 = NameTableKind;
        int v12 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
        uint64_t result = 0;
        *(_DWORD *)(a1 + 224) = v12;
        return result;
      }
      v16[0] = "invalid nameTable kind";
      v16[2] = " '";
      __int16 v17 = 771;
      v18[0] = v16;
      __int16 v19 = (const char *)(a1 + 232);
      __int16 v21 = 1026;
      unint64_t v22 = (const char *)v18;
      uint64_t v23 = "'";
      __int16 v15 = 770;
    }
    else
    {
      unint64_t v22 = "expected nameTable kind";
      __int16 v15 = 259;
    }
    __int16 v24 = v15;
    uint64_t v14 = *(char **)(a1 + 216);
    uint64_t v13 = a1 + 168;
    return llvm::LLLexer::Error(v13, v14, (llvm::Twine *)&v22);
  }

  return sub_1CC19E5CC(a1, (uint64_t)"nameTableKind", 13, a2);
}

uint64_t sub_1CC19FAE0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8))
  {
    __int16 v21 = 1283;
    v18[0] = "field '";
    __int16 v19 = "virtuality";
    uint64_t v20 = 10;
    unint64_t v22 = (const char *)v18;
    uint64_t v23 = "' cannot be specified more than once";
    __int16 v24 = 770;
    uint64_t v13 = a1 + 168;
    uint64_t v14 = *(char **)(a1 + 216);
    return llvm::LLLexer::Error(v13, v14, (llvm::Twine *)&v22);
  }
  int v4 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  *(_DWORD *)(a1 + 224) = v4;
  if (v4 == 445)
  {
    char v6 = *(unsigned char *)(a1 + 255);
    int v7 = v6;
    if (v6 >= 0) {
      uint64_t v8 = a1 + 232;
    }
    else {
      uint64_t v8 = *(void *)(a1 + 232);
    }
    uint64_t v9 = v6 & 0x7F;
    if (v7 >= 0) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = *(void *)(a1 + 240);
    }
    unsigned int Virtuality = llvm::dwarf::getVirtuality(v8, v10);
    if (Virtuality != -1)
    {
      *(unsigned char *)(a2 + 8) = 1;
      *(void *)a2 = Virtuality;
      int v12 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
      uint64_t result = 0;
      *(_DWORD *)(a1 + 224) = v12;
      return result;
    }
    v16[0] = "invalid DWARF virtuality code";
    v16[2] = " '";
    __int16 v17 = 771;
    v18[0] = v16;
    __int16 v19 = (const char *)(a1 + 232);
    __int16 v21 = 1026;
    unint64_t v22 = (const char *)v18;
    uint64_t v23 = "'";
    __int16 v15 = 770;
    goto LABEL_18;
  }
  if (v4 != 457)
  {
    unint64_t v22 = "expected DWARF virtuality code";
    __int16 v15 = 259;
LABEL_18:
    __int16 v24 = v15;
    uint64_t v14 = *(char **)(a1 + 216);
    uint64_t v13 = a1 + 168;
    return llvm::LLLexer::Error(v13, v14, (llvm::Twine *)&v22);
  }

  return sub_1CC19E5CC(a1, (uint64_t)"virtuality", 10, a2);
}

uint64_t sub_1CC19FC90(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8))
  {
    __int16 v6 = 1283;
    v5[0] = "field '";
    int v5[2] = "thisAdjustment";
    v5[3] = 14;
    v7[0] = v5;
    v7[2] = "' cannot be specified more than once";
    __int16 v8 = 770;
    return llvm::LLLexer::Error(a1 + 168, *(char **)(a1 + 216), (llvm::Twine *)v7);
  }
  else
  {
    *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
    return sub_1CC19EC30(a1, (uint64_t)"thisAdjustment", 14, a2);
  }
}

uint64_t sub_1CC19FD54(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 4))
  {
    int v4 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
    int v5 = 0;
    while (1)
    {
      *(_DWORD *)(a1 + 224) = v4;
      if (v4 == 452)
      {
        char v6 = *(unsigned char *)(a1 + 255);
        BOOL v7 = v6 < 0;
        if (v6 >= 0) {
          uint64_t v8 = a1 + 232;
        }
        else {
          uint64_t v8 = *(void *)(a1 + 232);
        }
        uint64_t v9 = v6 & 0x7F;
        if (v7) {
          uint64_t v10 = *(void *)(a1 + 240);
        }
        else {
          uint64_t v10 = v9;
        }
        unsigned int Flag = llvm::DISubprogram::getFlag(v8, v10);
        if (Flag)
        {
          unsigned int v12 = Flag;
          int v13 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
          *(_DWORD *)(a1 + 224) = v13;
          goto LABEL_12;
        }
        v15[0] = "invalid subprogram debug info flag '";
        int v16 = (const char *)(a1 + 232);
        __int16 v18 = 1027;
        *(void *)__int16 v19 = v15;
        uint64_t v20 = "'";
        __int16 v21 = 770;
      }
      else
      {
        if (v4 == 457 && *(unsigned char *)(a1 + 316))
        {
          v19[0] = 0;
          if (llvm::LLParser::parseUInt32((char **)a1, v19)) {
            return 1;
          }
          unsigned int v12 = v19[0];
          goto LABEL_20;
        }
        *(void *)__int16 v19 = "expected debug info flag";
        __int16 v21 = 259;
      }
      if (llvm::LLLexer::Error(a1 + 168, *(char **)(a1 + 216), (llvm::Twine *)v19)) {
        return 1;
      }
      unsigned int v12 = 0;
LABEL_20:
      int v13 = *(_DWORD *)(a1 + 224);
LABEL_12:
      v5 |= v12;
      if (v13 != 15)
      {
        uint64_t result = 0;
        *(unsigned char *)(a2 + 4) = 1;
        *(_DWORD *)a2 = v5;
        return result;
      }
      int v4 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
    }
  }
  __int16 v18 = 1283;
  v15[0] = "field '";
  int v16 = "spFlags";
  uint64_t v17 = 7;
  *(void *)__int16 v19 = v15;
  uint64_t v20 = "' cannot be specified more than once";
  __int16 v21 = 770;
  return llvm::LLLexer::Error(a1 + 168, *(char **)(a1 + 216), (llvm::Twine *)v19);
}

uint64_t sub_1CC19FF18(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8))
  {
    __int16 v21 = 1283;
    v18[0] = "field '";
    __int16 v19 = "type";
    uint64_t v20 = 4;
    unint64_t v22 = (const char *)v18;
    uint64_t v23 = "' cannot be specified more than once";
    __int16 v24 = 770;
    uint64_t v13 = a1 + 168;
    uint64_t v14 = *(char **)(a1 + 216);
    return llvm::LLLexer::Error(v13, v14, (llvm::Twine *)&v22);
  }
  int v4 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  *(_DWORD *)(a1 + 224) = v4;
  if (v4 == 453)
  {
    char v6 = *(unsigned char *)(a1 + 255);
    int v7 = v6;
    if (v6 >= 0) {
      uint64_t v8 = a1 + 232;
    }
    else {
      uint64_t v8 = *(void *)(a1 + 232);
    }
    uint64_t v9 = v6 & 0x7F;
    if (v7 >= 0) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = *(void *)(a1 + 240);
    }
    unsigned int Macinfo = llvm::dwarf::getMacinfo(v8, v10);
    if (Macinfo != -1)
    {
      *(unsigned char *)(a2 + 8) = 1;
      *(void *)a2 = Macinfo;
      int v12 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
      uint64_t result = 0;
      *(_DWORD *)(a1 + 224) = v12;
      return result;
    }
    v16[0] = "invalid DWARF macinfo type";
    v16[2] = " '";
    __int16 v17 = 771;
    v18[0] = v16;
    __int16 v19 = (const char *)(a1 + 232);
    __int16 v21 = 1026;
    unint64_t v22 = (const char *)v18;
    uint64_t v23 = "'";
    __int16 v15 = 770;
    goto LABEL_18;
  }
  if (v4 != 457)
  {
    unint64_t v22 = "expected DWARF macinfo type";
    __int16 v15 = 259;
LABEL_18:
    __int16 v24 = v15;
    uint64_t v14 = *(char **)(a1 + 216);
    uint64_t v13 = a1 + 168;
    return llvm::LLLexer::Error(v13, v14, (llvm::Twine *)&v22);
  }

  return sub_1CC19E5CC(a1, (uint64_t)"type", 4, a2);
}

uint64_t sub_1CC1A00C8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      int v7 = 0;
      uint64_t result = 0;
      goto LABEL_6;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  int v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      int v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_6;
      }
    }
    uint64_t result = 0;
    if (v10) {
      int v7 = v10;
    }
  }
LABEL_6:
  *a3 = v7;
  return result;
}

void *sub_1CC1A0178(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 16;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1CC1A02F0(a1, 2 * v8);
    uint64_t v11 = a1 + 8;
    int v6 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v12 = 16;
    }
    else
    {
      int v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        int v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      uint64_t v11 = *(void *)(a1 + 8);
    }
    int v9 = *(_DWORD *)a1 & 1;
    int v13 = v12 - 1;
    unsigned int v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (void *)(v11 + 16 * v14);
    uint64_t v15 = *a4;
    if (*a3 != *a4)
    {
      int v16 = 0;
      int v17 = 1;
      while (v15 != -4096)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -8192;
        }
        if (v18) {
          int v16 = a4;
        }
        unsigned int v19 = v14 + v17++;
        unsigned int v14 = v19 & v13;
        a4 = (void *)(v11 + 16 * v14);
        uint64_t v15 = *a4;
        if (*a3 == *a4) {
          goto LABEL_7;
        }
      }
      if (v16) {
        a4 = v16;
      }
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1CC1A02F0(a1, v8);
      uint64_t v20 = 0;
      sub_1CC1A00C8(a1, a3, &v20);
      a4 = v20;
      int v6 = *(_DWORD *)a1;
    }
    int v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  return a4;
}

int *sub_1CC1A02F0(uint64_t a1, unsigned int a2)
{
  v14[32] = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x11)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 0x10)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CC1A0488((int *)a1, v11, &v11[2 * v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  int v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *int v7 = v8;
      *((_DWORD *)v7 + 2) = *(_DWORD *)(a1 + v6 + 16);
      v7 += 2;
    }
    v6 += 16;
  }
  while (v6 != 256);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CC1A0488((int *)a1, v14, v7);
}

int *sub_1CC1A0488(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    uint64_t v6 = result + 66;
    int v5 = result + 2;
  }
  else
  {
    uint64_t v4 = result[4];
    if (!v4) {
      goto LABEL_5;
    }
    int v5 = (void *)*((void *)result + 1);
    uint64_t v6 = &v5[2 * v4];
  }
  do
  {
    *int v5 = -4096;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    uint64_t v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (*(unsigned char *)result)
      {
        int v9 = 16;
        uint64_t v8 = result + 2;
      }
      else
      {
        uint64_t v8 = (int *)*((void *)result + 1);
        int v9 = result[4];
      }
      int v10 = v9 - 1;
      unsigned int v11 = (v9 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      uint64_t v12 = (uint64_t *)&v8[4 * v11];
      uint64_t v13 = *v12;
      if (v7 != *v12)
      {
        unsigned int v14 = 0;
        int v15 = 1;
        while (v13 != -4096)
        {
          if (v14) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v13 == -8192;
          }
          if (v16) {
            unsigned int v14 = v12;
          }
          unsigned int v17 = v11 + v15++;
          unsigned int v11 = v17 & v10;
          uint64_t v12 = (uint64_t *)&v8[4 * (v17 & v10)];
          uint64_t v13 = *v12;
          if (v7 == *v12) {
            goto LABEL_10;
          }
        }
        if (v14) {
          uint64_t v12 = v14;
        }
      }
LABEL_10:
      *uint64_t v12 = v7;
      *((_DWORD *)v12 + 2) = *((_DWORD *)a2 + 2);
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1CC1A0594(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v21 = 0;
  int v3 = &v21;
  while (a2)
  {
    int v4 = *a3;
    if (*a3)
    {
      int v5 = 16;
      uint64_t v6 = a3 + 2;
    }
    else
    {
      int v5 = a3[4];
      if (!v5) {
        goto LABEL_20;
      }
      uint64_t v6 = (int *)*((void *)a3 + 1);
    }
    int v7 = v5 - 1;
    uint64_t v8 = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v9 = *(void *)&v6[4 * v8];
    if (a2 == v9)
    {
LABEL_10:
      unsigned int v12 = v6[4 * v8 + 2];
      if ((v4 & 1) == 0) {
        goto LABEL_11;
      }
    }
    else
    {
      int v10 = 1;
      while (v9 != -4096)
      {
        int v11 = v8 + v10++;
        uint64_t v8 = v11 & v7;
        uint64_t v9 = *(void *)&v6[4 * v8];
        if (a2 == v9) {
          goto LABEL_10;
        }
      }
      unsigned int v12 = 0;
      if ((v4 & 1) == 0)
      {
LABEL_11:
        int v13 = a3[4];
        if (!v13) {
          goto LABEL_20;
        }
        unsigned int v14 = (int *)*((void *)a3 + 1);
        goto LABEL_13;
      }
    }
    int v13 = 16;
    unsigned int v14 = a3 + 2;
LABEL_13:
    int v15 = v13 - 1;
    uint64_t v16 = (v13 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    uint64_t v17 = *(void *)&v14[4 * v16];
    if (a1 != v17)
    {
      int v18 = 1;
      while (v17 != -4096)
      {
        int v19 = v16 + v18++;
        uint64_t v16 = v19 & v15;
        uint64_t v17 = *(void *)&v14[4 * v16];
        if (a1 == v17) {
          goto LABEL_17;
        }
      }
      goto LABEL_20;
    }
LABEL_17:
    if (v12 >= v14[4 * v16 + 2])
    {
LABEL_20:
      *int v3 = a1;
      int v3 = (uint64_t *)(a1 + 8);
      a1 = *(void *)(a1 + 8);
      if (!a1) {
        goto LABEL_26;
      }
    }
    else
    {
      *int v3 = a2;
      int v3 = (uint64_t *)(a2 + 8);
      a2 = *(void *)(a2 + 8);
      if (!a1) {
        goto LABEL_26;
      }
    }
  }
  a2 = a1;
LABEL_26:
  *int v3 = a2;
  return v21;
}

char *sub_1CC1A06D8(char **a1, int a2, uint64_t a3)
{
  int v3 = *a1;
  int v4 = a1[1];
  uint64_t v5 = (v4 - *a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    abort();
  }
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v6) {
    unint64_t v6 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9 >> 60) {
    sub_1CB833614();
  }
  unsigned int v12 = (char *)operator new(16 * v9);
  int v13 = &v12[16 * v5];
  *(_DWORD *)int v13 = a2;
  *((void *)v13 + 1) = a3;
  unsigned int v14 = v13 + 16;
  if (v4 == v3)
  {
    int v15 = &v12[16 * v5];
  }
  else
  {
    do
    {
      int v15 = v13 - 16;
      *((_OWORD *)v13 - 1) = *((_OWORD *)v4 - 1);
      v4 -= 16;
      v13 -= 16;
    }
    while (v4 != v3);
  }
  *a1 = v15;
  a1[1] = v14;
  a1[2] = &v12[16 * v9];
  if (v3) {
    operator delete(v3);
  }
  return v14;
}

uint64_t sub_1CC1A07C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 6;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 58) {
    abort();
  }
  uint64_t v5 = (uint64_t)(a1 + 2);
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 5 > v3) {
    unint64_t v3 = v6 >> 5;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v7 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v20 = a1 + 2;
  if (v7 >> 58) {
    sub_1CB833614();
  }
  unint64_t v9 = (char *)operator new(v7 << 6);
  uint64_t v10 = (uint64_t)&v9[64 * v2];
  *(_DWORD *)(v10 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
  int v11 = &v9[64 * v7];
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(v10 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(v10 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a2 + 32) = 0;
  *(_OWORD *)(v10 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(v10 + 56) = *(void *)(a2 + 56);
  uint64_t v12 = v10 + 64;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  sub_1CC14C4EC(v5, a1[1], a1[1], *a1, *a1, v10, v10);
  long long v13 = *(_OWORD *)a1;
  *a1 = v14;
  a1[1] = v12;
  long long v18 = v13;
  uint64_t v15 = a1[2];
  a1[2] = (uint64_t)v11;
  uint64_t v19 = v15;
  uint64_t v17 = v13;
  sub_1CD4CA25C((uint64_t)&v17);
  return v12;
}

char *sub_1CC1A08EC(char **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *a1;
  int v4 = a1[1];
  uint64_t v5 = (v4 - *a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    abort();
  }
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v6) {
    unint64_t v6 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9 >> 60) {
    sub_1CB833614();
  }
  uint64_t v12 = (char *)operator new(16 * v9);
  long long v13 = &v12[16 * v5];
  *(void *)long long v13 = a2;
  *((void *)v13 + 1) = a3;
  uint64_t v14 = v13 + 16;
  if (v4 == v3)
  {
    uint64_t v15 = &v12[16 * v5];
  }
  else
  {
    do
    {
      uint64_t v15 = v13 - 16;
      *((_OWORD *)v13 - 1) = *((_OWORD *)v4 - 1);
      v4 -= 16;
      v13 -= 16;
    }
    while (v4 != v3);
  }
  *a1 = v15;
  a1[1] = v14;
  a1[2] = &v12[16 * v9];
  if (v3) {
    operator delete(v3);
  }
  return v14;
}

void sub_1CC1A09D8(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          uint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return;
              case 2:
                int v42 = *(_DWORD *)(a2 - 24);
                unint64_t v41 = a2 - 24;
                if ((v42 & 6u) < (*(_DWORD *)v10 & 6u))
                {
                  uint64_t v114 = *(void *)(v10 + 16);
                  long long v105 = *(_OWORD *)v10;
                  long long v43 = *(_OWORD *)v41;
                  *(void *)(v10 + 16) = *(void *)(v41 + 16);
                  *(_OWORD *)unint64_t v10 = v43;
                  *(void *)(v41 + 16) = v114;
                  *(_OWORD *)unint64_t v41 = v105;
                }
                break;
              case 3:
                sub_1CC1A1340((long long *)v10, (long long *)(v10 + 24), (long long *)(a2 - 24));
                break;
              case 4:
                sub_1CC1A171C(v10, v10 + 24, v10 + 48, a2 - 24);
                break;
              case 5:
                long long v44 = (long long *)(v10 + 24);
                unint64_t v45 = (long long *)(v10 + 48);
                uint64_t v46 = (long long *)(v10 + 72);
                sub_1CC1A171C(v10, v10 + 24, v10 + 48, v10 + 72);
                int v48 = *(_DWORD *)(a2 - 24);
                unint64_t v47 = a2 - 24;
                if ((v48 & 6u) < (*(_DWORD *)(v10 + 72) & 6u))
                {
                  long long v49 = *v46;
                  uint64_t v50 = *(void *)(v10 + 88);
                  uint64_t v51 = *(void *)(v47 + 16);
                  *uint64_t v46 = *(_OWORD *)v47;
                  *(void *)(v10 + 88) = v51;
                  *(void *)(v47 + 16) = v50;
                  *(_OWORD *)unint64_t v47 = v49;
                  if ((*(_DWORD *)v46 & 6u) < (*(_DWORD *)v45 & 6u))
                  {
                    uint64_t v52 = *(void *)(v10 + 64);
                    long long v53 = *v45;
                    long long *v45 = *v46;
                    *(void *)(v10 + 64) = *(void *)(v10 + 88);
                    *uint64_t v46 = v53;
                    *(void *)(v10 + 88) = v52;
                    if ((*(_DWORD *)v45 & 6u) < (*(_DWORD *)v44 & 6u))
                    {
                      uint64_t v54 = *(void *)(v10 + 40);
                      long long v55 = *v44;
                      *long long v44 = *v45;
                      *(void *)(v10 + 40) = *(void *)(v10 + 64);
                      long long *v45 = v55;
                      *(void *)(v10 + 64) = v54;
                      if ((*(_DWORD *)(v10 + 24) & 6u) < (*(_DWORD *)v10 & 6u))
                      {
                        uint64_t v115 = *(void *)(v10 + 16);
                        long long v106 = *(_OWORD *)v10;
                        *(_OWORD *)unint64_t v10 = *v44;
                        *(void *)(v10 + 16) = *(void *)(v10 + 40);
                        *long long v44 = v106;
                        *(void *)(v10 + 40) = v115;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 575)
          {
            unint64_t v56 = v10 + 24;
            BOOL v58 = v10 == a2 || v56 == a2;
            if (a4)
            {
              if (!v58)
              {
                uint64_t v59 = 0;
                unint64_t v60 = v10;
                do
                {
                  unint64_t v61 = v56;
                  uint64_t v62 = *(void *)(v60 + 24);
                  if ((v62 & 6u) < (*(_DWORD *)v60 & 6u))
                  {
                    long long v107 = *(_OWORD *)(v60 + 32);
                    uint64_t v63 = v59;
                    while (1)
                    {
                      uint64_t v64 = v10 + v63;
                      *(_OWORD *)(v64 + 24) = *(_OWORD *)(v10 + v63);
                      *(void *)(v64 + 40) = *(void *)(v10 + v63 + 16);
                      if (!v63) {
                        break;
                      }
                      v63 -= 24;
                      if ((v62 & 6u) >= (*(_DWORD *)(v64 - 24) & 6u))
                      {
                        uint64_t v65 = v10 + v63 + 24;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v62;
                    *(_OWORD *)(v65 + 8) = v107;
                  }
                  unint64_t v56 = v61 + 24;
                  v59 += 24;
                  unint64_t v60 = v61;
                }
                while (v61 + 24 != a2);
              }
            }
            else if (!v58)
            {
              do
              {
                unint64_t v95 = v56;
                uint64_t v96 = *(void *)(a1 + 24);
                if ((v96 & 6u) < (*(_DWORD *)a1 & 6u))
                {
                  long long v110 = *(_OWORD *)(a1 + 32);
                  unint64_t v97 = v56;
                  do
                  {
                    *(_OWORD *)unint64_t v97 = *(_OWORD *)(v97 - 24);
                    *(void *)(v97 + 16) = *(void *)(v97 - 8);
                    char v98 = *(_DWORD *)(v97 - 48);
                    v97 -= 24;
                  }
                  while ((v96 & 6u) < (v98 & 6u));
                  *(void *)unint64_t v97 = v96;
                  *(_OWORD *)(v97 + 8) = v110;
                }
                v56 += 24;
                a1 = v95;
              }
              while (v95 + 24 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (unint64_t)(v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = (void *)(v10 + 24 * v69);
                  if (2 * v68 + 2 < v12)
                  {
                    uint64_t v71 = *v70;
                    if ((*(_DWORD *)v70 & 6u) < (v70[3] & 6u))
                    {
                      uint64_t v71 = v70[3];
                      v70 += 3;
                      uint64_t v69 = 2 * v68 + 2;
                    }
                  }
                  else
                  {
                    uint64_t v71 = *v70;
                  }
                  uint64_t v72 = (void *)(v10 + 24 * v68);
                  unsigned int v73 = v71 & 6;
                  uint64_t v74 = *v72;
                  uint64_t v75 = *v72 & 6;
                  if (v73 >= v75)
                  {
                    long long v108 = *(_OWORD *)(v72 + 1);
                    do
                    {
                      uint64_t v76 = v72;
                      uint64_t v72 = v70;
                      long long v77 = *(_OWORD *)v70;
                      v76[2] = v70[2];
                      *(_OWORD *)uint64_t v76 = v77;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v78 = (2 * v69) | 1;
                      unint64_t v70 = (void *)(v10 + 24 * v78);
                      uint64_t v69 = 2 * v69 + 2;
                      if (v69 < v12)
                      {
                        uint64_t v79 = *v70;
                        if ((*(_DWORD *)v70 & 6u) >= (v70[3] & 6u))
                        {
                          uint64_t v69 = v78;
                        }
                        else
                        {
                          uint64_t v79 = v70[3];
                          v70 += 3;
                        }
                      }
                      else
                      {
                        uint64_t v79 = *v70;
                        uint64_t v69 = v78;
                      }
                    }
                    while ((v79 & 6u) >= v75);
                    void *v72 = v74;
                    *(_OWORD *)(v72 + 1) = v108;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              do
              {
                uint64_t v80 = 0;
                uint64_t v116 = *(void *)(v10 + 16);
                long long v109 = *(_OWORD *)v10;
                unint64_t v81 = v10;
                do
                {
                  uint64_t v82 = v81 + 24 * v80 + 24;
                  uint64_t v83 = (2 * v80) | 1;
                  uint64_t v84 = 2 * v80 + 2;
                  if (v84 < v12 && (*(_DWORD *)v82 & 6u) < (*(_DWORD *)(v82 + 24) & 6u))
                  {
                    v82 += 24;
                    uint64_t v83 = v84;
                  }
                  long long v85 = *(_OWORD *)v82;
                  *(void *)(v81 + 16) = *(void *)(v82 + 16);
                  *(_OWORD *)unint64_t v81 = v85;
                  unint64_t v81 = v82;
                  uint64_t v80 = v83;
                }
                while (v83 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                a2 -= 24;
                if (v82 == a2)
                {
                  *(void *)(v82 + 16) = v116;
                  *(_OWORD *)uint64_t v82 = v109;
                }
                else
                {
                  long long v86 = *(_OWORD *)a2;
                  *(void *)(v82 + 16) = *(void *)(a2 + 16);
                  *(_OWORD *)uint64_t v82 = v86;
                  *(void *)(a2 + 16) = v116;
                  *(_OWORD *)a2 = v109;
                  uint64_t v87 = v82 - v10 + 24;
                  if (v87 >= 25)
                  {
                    unint64_t v88 = (v87 / 0x18uLL - 2) >> 1;
                    uint64_t v89 = v10 + 24 * v88;
                    uint64_t v90 = *(void *)v82;
                    uint64_t v91 = *(void *)v82 & 6;
                    if ((*(_DWORD *)v89 & 6u) < v91)
                    {
                      long long v101 = *(_OWORD *)(v82 + 8);
                      do
                      {
                        uint64_t v92 = v82;
                        uint64_t v82 = v89;
                        long long v93 = *(_OWORD *)v89;
                        *(void *)(v92 + 16) = *(void *)(v89 + 16);
                        *(_OWORD *)uint64_t v92 = v93;
                        if (!v88) {
                          break;
                        }
                        unint64_t v88 = (v88 - 1) >> 1;
                        uint64_t v89 = v10 + 24 * v88;
                      }
                      while ((*(_DWORD *)v89 & 6u) < v91);
                      *(void *)uint64_t v82 = v90;
                      *(_OWORD *)(v82 + 8) = v101;
                    }
                  }
                }
              }
              while (v12-- > 2);
            }
            return;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          unint64_t v14 = v10 + 24 * ((unint64_t)v12 >> 1);
          if ((unint64_t)v11 >= 0xC01)
          {
            sub_1CC1A1340((long long *)a1, (long long *)(a1 + 24 * ((unint64_t)v12 >> 1)), (long long *)(a2 - 24));
            uint64_t v15 = 3 * v13;
            uint64_t v16 = (long long *)(a1 + 24 * v13 - 24);
            sub_1CC1A1340((long long *)(a1 + 24), v16, (long long *)(a2 - 48));
            uint64_t v17 = (long long *)(a1 + 24 + 8 * v15);
            sub_1CC1A1340((long long *)(a1 + 48), v17, (long long *)(a2 - 72));
            sub_1CC1A1340(v16, (long long *)v14, v17);
            uint64_t v111 = *(void *)(a1 + 16);
            long long v102 = *(_OWORD *)a1;
            uint64_t v18 = *(void *)(v14 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(void *)(a1 + 16) = v18;
            *(void *)(v14 + 16) = v111;
            *(_OWORD *)unint64_t v14 = v102;
          }
          else
          {
            sub_1CC1A1340((long long *)(a1 + 24 * ((unint64_t)v12 >> 1)), (long long *)a1, (long long *)(a2 - 24));
          }
          --a3;
          uint64_t v19 = *(void *)a1;
          if (a4) {
            break;
          }
          unsigned int v20 = v19 & 6;
          if ((*(_DWORD *)(a1 - 24) & 6u) < v20) {
            goto LABEL_12;
          }
          long long v100 = *(_OWORD *)(a1 + 8);
          if (v20 >= (*(_DWORD *)(a2 - 24) & 6u))
          {
            unint64_t v34 = a1 + 24;
            do
            {
              unint64_t v10 = v34;
              if (v34 >= a2) {
                break;
              }
              v34 += 24;
            }
            while (v20 >= (*(_DWORD *)v10 & 6u));
          }
          else
          {
            unint64_t v10 = a1;
            do
            {
              int v33 = *(_DWORD *)(v10 + 24);
              v10 += 24;
            }
            while (v20 >= (v33 & 6u));
          }
          unint64_t v35 = a2;
          if (v10 < a2)
          {
            unint64_t v35 = a2;
            do
            {
              int v36 = *(_DWORD *)(v35 - 24);
              v35 -= 24;
            }
            while (v20 < (v36 & 6u));
          }
          while (v10 < v35)
          {
            uint64_t v113 = *(void *)(v10 + 16);
            long long v104 = *(_OWORD *)v10;
            long long v37 = *(_OWORD *)v35;
            *(void *)(v10 + 16) = *(void *)(v35 + 16);
            *(_OWORD *)unint64_t v10 = v37;
            *(void *)(v35 + 16) = v113;
            *(_OWORD *)unint64_t v35 = v104;
            do
            {
              int v38 = *(_DWORD *)(v10 + 24);
              v10 += 24;
            }
            while (v20 >= (v38 & 6u));
            do
            {
              int v39 = *(_DWORD *)(v35 - 24);
              v35 -= 24;
            }
            while (v20 < (v39 & 6u));
          }
          BOOL v4 = v10 - 24 >= a1;
          BOOL v5 = v10 - 24 == a1;
          if (v10 - 24 != a1)
          {
            long long v40 = *(_OWORD *)(v10 - 24);
            *(void *)(a1 + 16) = *(void *)(v10 - 8);
            *(_OWORD *)a1 = v40;
          }
          a4 = 0;
          *(void *)(v10 - 24) = v19;
          *(_OWORD *)(v10 - 16) = v100;
        }
        unsigned int v20 = v19 & 6;
LABEL_12:
        uint64_t v21 = 0;
        long long v99 = *(_OWORD *)(a1 + 8);
        do
        {
          unsigned int v22 = *(_DWORD *)(a1 + v21 + 24) & 6;
          v21 += 24;
        }
        while (v22 < v20);
        unint64_t v23 = a1 + v21;
        unint64_t v24 = a2;
        if (v21 == 24)
        {
          unint64_t v24 = a2;
          do
          {
            if (v23 >= v24) {
              break;
            }
            int v26 = *(_DWORD *)(v24 - 24);
            v24 -= 24;
          }
          while ((v26 & 6u) >= v20);
        }
        else
        {
          do
          {
            int v25 = *(_DWORD *)(v24 - 24);
            v24 -= 24;
          }
          while ((v25 & 6u) >= v20);
        }
        unint64_t v10 = a1 + v21;
        if (v23 < v24)
        {
          unint64_t v27 = v24;
          do
          {
            uint64_t v112 = *(void *)(v10 + 16);
            long long v103 = *(_OWORD *)v10;
            long long v28 = *(_OWORD *)v27;
            *(void *)(v10 + 16) = *(void *)(v27 + 16);
            *(_OWORD *)unint64_t v10 = v28;
            *(void *)(v27 + 16) = v112;
            *(_OWORD *)unint64_t v27 = v103;
            do
            {
              int v29 = *(_DWORD *)(v10 + 24);
              v10 += 24;
            }
            while ((v29 & 6u) < v20);
            do
            {
              int v30 = *(_DWORD *)(v27 - 24);
              v27 -= 24;
            }
            while ((v30 & 6u) >= v20);
          }
          while (v10 < v27);
        }
        if (v10 - 24 != a1)
        {
          long long v31 = *(_OWORD *)(v10 - 24);
          *(void *)(a1 + 16) = *(void *)(v10 - 8);
          *(_OWORD *)a1 = v31;
        }
        *(void *)(v10 - 24) = v19;
        *(_OWORD *)(v10 - 16) = v99;
        if (v23 >= v24) {
          break;
        }
LABEL_31:
        sub_1CC1A09D8(a1, v10 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v32 = sub_1CC1A144C(a1, v10 - 24);
      if (sub_1CC1A144C(v10, a2)) {
        break;
      }
      if (!v32) {
        goto LABEL_31;
      }
    }
    a2 = v10 - 24;
    if (!v32) {
      continue;
    }
    break;
  }
}

long long *sub_1CC1A1340(long long *result, long long *a2, long long *a3)
{
  unsigned int v3 = *(_DWORD *)a2 & 6;
  unsigned int v4 = *(_DWORD *)a3 & 6;
  if (v3 >= (*(_DWORD *)result & 6u))
  {
    if (v4 < v3)
    {
      uint64_t v8 = *((void *)a2 + 2);
      long long v9 = *a2;
      uint64_t v10 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v10;
      *a3 = v9;
      *((void *)a3 + 2) = v8;
      if ((*(_DWORD *)a2 & 6u) < (*(_DWORD *)result & 6u))
      {
        uint64_t v11 = *((void *)result + 2);
        long long v12 = *result;
        uint64_t v13 = *((void *)a2 + 2);
        _OWORD *result = *a2;
        *((void *)result + 2) = v13;
        *a2 = v12;
        *((void *)a2 + 2) = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      uint64_t v14 = *((void *)result + 2);
      long long v15 = *result;
      uint64_t v16 = *((void *)a2 + 2);
      _OWORD *result = *a2;
      *((void *)result + 2) = v16;
      *a2 = v15;
      *((void *)a2 + 2) = v14;
      if ((*(_DWORD *)a3 & 6u) >= (*(_DWORD *)a2 & 6u)) {
        return result;
      }
      uint64_t v5 = *((void *)a2 + 2);
      long long v6 = *a2;
      uint64_t v17 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v17;
    }
    else
    {
      uint64_t v5 = *((void *)result + 2);
      long long v6 = *result;
      uint64_t v7 = *((void *)a3 + 2);
      _OWORD *result = *a3;
      *((void *)result + 2) = v7;
    }
    *a3 = v6;
    *((void *)a3 + 2) = v5;
  }
  return result;
}

BOOL sub_1CC1A144C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      long long v6 = (long long *)(a2 - 24);
      if ((*(_DWORD *)(a2 - 24) & 6u) < (*(_DWORD *)a1 & 6u))
      {
        uint64_t v7 = *(void *)(a1 + 16);
        long long v8 = *(_OWORD *)a1;
        uint64_t v9 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(void *)(a1 + 16) = v9;
        long long *v6 = v8;
        *(void *)(a2 - 8) = v7;
      }
      return result;
    case 3uLL:
      sub_1CC1A1340((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_1CC1A171C(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      uint64_t v19 = (long long *)(a1 + 24);
      unsigned int v20 = (long long *)(a1 + 48);
      uint64_t v21 = (long long *)(a1 + 72);
      sub_1CC1A171C(a1, a1 + 24, a1 + 48, a1 + 72);
      int v23 = *(_DWORD *)(a2 - 24);
      uint64_t v22 = a2 - 24;
      if ((v23 & 6u) < (*(_DWORD *)(a1 + 72) & 6u))
      {
        uint64_t v24 = *(void *)(a1 + 88);
        long long v25 = *v21;
        uint64_t v26 = *(void *)(v22 + 16);
        long long *v21 = *(_OWORD *)v22;
        *(void *)(a1 + 88) = v26;
        *(_OWORD *)uint64_t v22 = v25;
        *(void *)(v22 + 16) = v24;
        if ((*(_DWORD *)v21 & 6u) < (*(_DWORD *)v20 & 6u))
        {
          uint64_t v27 = *(void *)(a1 + 64);
          long long v28 = *v20;
          long long *v20 = *v21;
          *(void *)(a1 + 64) = *(void *)(a1 + 88);
          long long *v21 = v28;
          *(void *)(a1 + 88) = v27;
          if ((*(_DWORD *)v20 & 6u) < (*(_DWORD *)v19 & 6u))
          {
            uint64_t v29 = *(void *)(a1 + 40);
            long long v30 = *v19;
            *uint64_t v19 = *v20;
            *(void *)(a1 + 40) = *(void *)(a1 + 64);
            long long *v20 = v30;
            *(void *)(a1 + 64) = v29;
            if ((*(_DWORD *)(a1 + 24) & 6u) < (*(_DWORD *)a1 & 6u))
            {
              uint64_t v31 = *(void *)(a1 + 16);
              long long v32 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v19;
              *(void *)(a1 + 16) = *(void *)(a1 + 40);
              *uint64_t v19 = v32;
              *(void *)(a1 + 40) = v31;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v10 = (_DWORD *)(a1 + 48);
      sub_1CC1A1340((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48));
      uint64_t v11 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    uint64_t v14 = *(void *)v11;
    uint64_t v15 = *(void *)v11 & 6;
    if (v15 < (*v10 & 6u))
    {
      long long v33 = *(_OWORD *)(v11 + 8);
      uint64_t v16 = v12;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(void *)(v17 + 88) = *(void *)(a1 + v16 + 64);
        if (v16 == -48) {
          break;
        }
        v16 -= 24;
        if (v15 >= (*(_DWORD *)(v17 + 24) & 6u))
        {
          uint64_t v18 = a1 + v16 + 72;
          goto LABEL_13;
        }
      }
      uint64_t v18 = a1;
LABEL_13:
      *(void *)uint64_t v18 = v14;
      *(_OWORD *)(v18 + 8) = v33;
      if (++v13 == 8) {
        return v11 + 24 == a2;
      }
    }
    uint64_t v10 = (_DWORD *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2) {
      return 1;
    }
  }
}

__n128 sub_1CC1A171C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1CC1A1340((long long *)a1, (long long *)a2, (long long *)a3);
  if ((*(_DWORD *)a4 & 6u) < (*(_DWORD *)a3 & 6u))
  {
    uint64_t v9 = *(void *)(a3 + 16);
    __n128 result = *(__n128 *)a3;
    uint64_t v10 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v10;
    *(__n128 *)a4 = result;
    *(void *)(a4 + 16) = v9;
    if ((*(_DWORD *)a3 & 6u) < (*(_DWORD *)a2 & 6u))
    {
      uint64_t v11 = *(void *)(a2 + 16);
      __n128 result = *(__n128 *)a2;
      uint64_t v12 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v12;
      *(__n128 *)a3 = result;
      *(void *)(a3 + 16) = v11;
      if ((*(_DWORD *)a2 & 6u) < (*(_DWORD *)a1 & 6u))
      {
        uint64_t v13 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v14 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v13;
      }
    }
  }
  return result;
}

void llvm::parseAssemblyInto(_OWORD *a1)
{
  long long v1 = a1[1];
  v2[0] = *a1;
  v2[1] = v1;
  sub_1CC1A183C(v2);
}

void sub_1CC1A183C(_OWORD *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  long long v1 = a1[1];
  v5[0] = *a1;
  v5[1] = v1;
  llvm::MemoryBuffer::getMemBuffer((uint64_t *)v5, &v6);
  uint64_t v4 = v6;
  sub_1CD452CE0((uint64_t)v7, &v4, 0);
  uint64_t v2 = v4;
  uint64_t v4 = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  llvm::LLVMContext::LLVMContext((llvm::LLVMContext *)v3);
}

void llvm::parseAssemblyFile(const void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  LOWORD(v28) = 261;
  long long v25 = a1;
  size_t v26 = a2;
  llvm::MemoryBuffer::getFileOrSTDIN((llvm::MemoryBuffer *)&v25, 0, 1, (uint64_t)&v38);
  if ((v39 & 1) == 0)
  {
    std::system_category();
    uint64_t v8 = *(void *)&v38.__val_;
    goto LABEL_4;
  }
  uint64_t v8 = *(void *)&v38.__val_;
  std::error_code v24 = v38;
  if (!v38.__val_)
  {
LABEL_4:
    (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
    llvm::parseAssembly();
  }
  std::error_code::message(&v22, &v24);
  uint64_t v9 = std::string::insert(&v22, 0, "Could not open input file: ");
  std::string __p = *v9;
  unint64_t v10 = __p.__r_.__value_.__r.__words[2];
  v9->__r_.__value_.__r.__words[0] = 0;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  unint64_t v11 = HIBYTE(v10);
  BOOL v12 = (v11 & 0x80u) != 0;
  if ((v11 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  std::string::size_type v14 = v11 & 0x7F;
  if (v12) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type size = v14;
  }
  long long v25 = 0;
  size_t v26 = 0;
  if (a2 > 0x7FFFFFFFFFFFFFF7) {
LABEL_43:
  }
    abort();
  if (a2 >= 0x17)
  {
    uint64_t v17 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v17 = a2 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v16 = operator new(v17 + 1);
    v27[1] = (void *)a2;
    unint64_t v28 = v18 | 0x8000000000000000;
    v27[0] = v16;
    goto LABEL_18;
  }
  uint64_t v16 = v27;
  HIBYTE(v28) = a2;
  if (a2) {
LABEL_18:
  }
    memmove(v16, a1, a2);
  *((unsigned char *)v16 + a2) = 0;
  uint64_t v29 = -1;
  int v30 = 0;
  if (size > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_43;
  }
  if (size >= 0x17)
  {
    uint64_t v20 = (size & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((size | 7) != 0x17) {
      uint64_t v20 = size | 7;
    }
    uint64_t v21 = v20 + 1;
    uint64_t v19 = operator new(v20 + 1);
    v31[1] = (void *)size;
    unint64_t v32 = v21 | 0x8000000000000000;
    v31[0] = v19;
    goto LABEL_26;
  }
  uint64_t v19 = v31;
  HIBYTE(v32) = size;
  if (size) {
LABEL_26:
  }
    memmove(v19, p_p, size);
  *((unsigned char *)v19 + size) = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v33 = 0u;
  v36[0] = &v37;
  v36[1] = (void *)0x400000000;
  sub_1CD4D7434(a3, (uint64_t)&v25);
  sub_1CC1925A4(v36);
  if (*((void *)&v34 + 1))
  {
    *(void *)&long long v35 = *((void *)&v34 + 1);
    operator delete(*((void **)&v34 + 1));
  }
  if (SBYTE7(v34) < 0) {
    operator delete((void *)v33);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(v31[0]);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(v27[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  *a4 = 0;
  if ((v39 & 1) == 0)
  {
    if (*(void *)&v38.__val_) {
      (*(void (**)(void))(**(void **)&v38.__val_ + 8))(*(void *)&v38.__val_);
    }
  }
}

void llvm::parseAssemblyWithIndex()
{
}

void sub_1CC1A1D58()
{
}

void llvm::parseAssemblyFileWithIndex(const void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
}

void sub_1CC1A1ED0(void *a1, const void *a2, size_t a3, uint64_t a4)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  LOWORD(v28) = 261;
  long long v25 = a2;
  size_t v26 = a3;
  llvm::MemoryBuffer::getFileOrSTDIN((llvm::MemoryBuffer *)&v25, (const llvm::Twine *)1, 1, (uint64_t)&v38);
  if ((v39 & 1) == 0)
  {
    std::system_category();
    uint64_t v8 = *(void *)&v38.__val_;
    goto LABEL_4;
  }
  uint64_t v8 = *(void *)&v38.__val_;
  std::error_code v24 = v38;
  if (!v38.__val_)
  {
LABEL_4:
    (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
    sub_1CC1A1D58();
  }
  std::error_code::message(&v22, &v24);
  uint64_t v9 = std::string::insert(&v22, 0, "Could not open input file: ");
  std::string __p = *v9;
  unint64_t v10 = __p.__r_.__value_.__r.__words[2];
  v9->__r_.__value_.__r.__words[0] = 0;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  unint64_t v11 = HIBYTE(v10);
  BOOL v12 = (v11 & 0x80u) != 0;
  if ((v11 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  std::string::size_type v14 = v11 & 0x7F;
  if (v12) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type size = v14;
  }
  long long v25 = 0;
  size_t v26 = 0;
  if (a3 > 0x7FFFFFFFFFFFFFF7) {
LABEL_44:
  }
    abort();
  if (a3 >= 0x17)
  {
    uint64_t v17 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v17 = a3 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v16 = operator new(v17 + 1);
    v27[1] = (void *)a3;
    unint64_t v28 = v18 | 0x8000000000000000;
    v27[0] = v16;
    goto LABEL_21;
  }
  uint64_t v16 = v27;
  HIBYTE(v28) = a3;
  if (a3) {
LABEL_21:
  }
    memmove(v16, a2, a3);
  *((unsigned char *)v16 + a3) = 0;
  uint64_t v29 = -1;
  int v30 = 0;
  if (size > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_44;
  }
  if (size >= 0x17)
  {
    uint64_t v20 = (size & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((size | 7) != 0x17) {
      uint64_t v20 = size | 7;
    }
    uint64_t v21 = v20 + 1;
    uint64_t v19 = operator new(v20 + 1);
    v31[1] = (void *)size;
    unint64_t v32 = v21 | 0x8000000000000000;
    v31[0] = v19;
    goto LABEL_29;
  }
  uint64_t v19 = v31;
  HIBYTE(v32) = size;
  if (size) {
LABEL_29:
  }
    memmove(v19, p_p, size);
  *((unsigned char *)v19 + size) = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v33 = 0u;
  v36[0] = &v37;
  v36[1] = (void *)0x400000000;
  sub_1CD4D7434(a4, (uint64_t)&v25);
  sub_1CC1925A4(v36);
  if (*((void *)&v34 + 1))
  {
    *(void *)&long long v35 = *((void *)&v34 + 1);
    operator delete(*((void **)&v34 + 1));
  }
  if (SBYTE7(v34) < 0) {
    operator delete((void *)v33);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(v31[0]);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(v27[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  *a1 = 0;
  a1[1] = 0;
  if ((v39 & 1) == 0)
  {
    if (*(void *)&v38.__val_) {
      (*(void (**)(void))(**(void **)&v38.__val_ + 8))(*(void *)&v38.__val_);
    }
  }
}

void llvm::parseAssemblyFileWithIndexNoUpgradeDebugInfo(const void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
}

void llvm::parseAssemblyString()
{
}

void llvm::parseSummaryIndexAssembly()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void llvm::parseSummaryIndexAssemblyFile(const void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  LOWORD(v28) = 261;
  long long v25 = a1;
  size_t v26 = a2;
  llvm::MemoryBuffer::getFileOrSTDIN((llvm::MemoryBuffer *)&v25, 0, 1, (uint64_t)&v38);
  if ((v39 & 1) == 0)
  {
    std::system_category();
    uint64_t v8 = *(void *)&v38.__val_;
    goto LABEL_4;
  }
  uint64_t v8 = *(void *)&v38.__val_;
  std::error_code v24 = v38;
  if (!v38.__val_)
  {
LABEL_4:
    (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
    llvm::parseSummaryIndexAssembly();
  }
  std::error_code::message(&v22, &v24);
  uint64_t v9 = std::string::insert(&v22, 0, "Could not open input file: ");
  std::string __p = *v9;
  unint64_t v10 = __p.__r_.__value_.__r.__words[2];
  v9->__r_.__value_.__r.__words[0] = 0;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  unint64_t v11 = HIBYTE(v10);
  BOOL v12 = (v11 & 0x80u) != 0;
  if ((v11 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  std::string::size_type v14 = v11 & 0x7F;
  if (v12) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type size = v14;
  }
  long long v25 = 0;
  size_t v26 = 0;
  if (a2 > 0x7FFFFFFFFFFFFFF7) {
LABEL_44:
  }
    abort();
  if (a2 >= 0x17)
  {
    uint64_t v17 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v17 = a2 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v16 = operator new(v17 + 1);
    v27[1] = (void *)a2;
    unint64_t v28 = v18 | 0x8000000000000000;
    v27[0] = v16;
    goto LABEL_21;
  }
  uint64_t v16 = v27;
  HIBYTE(v28) = a2;
  if (a2) {
LABEL_21:
  }
    memmove(v16, a1, a2);
  *((unsigned char *)v16 + a2) = 0;
  uint64_t v29 = -1;
  int v30 = 0;
  if (size > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_44;
  }
  if (size >= 0x17)
  {
    uint64_t v20 = (size & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((size | 7) != 0x17) {
      uint64_t v20 = size | 7;
    }
    uint64_t v21 = v20 + 1;
    uint64_t v19 = operator new(v20 + 1);
    v31[1] = (void *)size;
    unint64_t v32 = v21 | 0x8000000000000000;
    v31[0] = v19;
    goto LABEL_29;
  }
  uint64_t v19 = v31;
  HIBYTE(v32) = size;
  if (size) {
LABEL_29:
  }
    memmove(v19, p_p, size);
  *((unsigned char *)v19 + size) = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v33 = 0u;
  v36[0] = &v37;
  v36[1] = (void *)0x400000000;
  sub_1CD4D7434(a3, (uint64_t)&v25);
  sub_1CC1925A4(v36);
  if (*((void *)&v34 + 1))
  {
    *(void *)&long long v35 = *((void *)&v34 + 1);
    operator delete(*((void **)&v34 + 1));
  }
  if (SBYTE7(v34) < 0) {
    operator delete((void *)v33);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(v31[0]);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(v27[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  *a4 = 0;
  if ((v39 & 1) == 0)
  {
    if (*(void *)&v38.__val_) {
      (*(void (**)(void))(**(void **)&v38.__val_ + 8))(*(void *)&v38.__val_);
    }
  }
}

llvm::Type *llvm::parseType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  v27[22] = *(void **)MEMORY[0x1E4F143B8];
  unsigned int v17 = 0;
  __n128 result = llvm::parseTypeAtBeginning(a1, a2, &v17, a3, a4, a5);
  if (result)
  {
    uint64_t v9 = v17;
    if (a2 != v17)
    {
      uint64_t v16 = 0;
      memset(v15, 0, sizeof(v15));
      __int16 v19 = 261;
      v18[0] = "";
      v18[1] = 0;
      v12[0] = v18;
      unint64_t v10 = sub_1CD096174((llvm::raw_ostream *)0x18, (uint64_t)v12);
      *unint64_t v10 = &unk_1F2644E70;
      v10[1] = a1;
      void v10[2] = a1 + a2;
      std::string::size_type v14 = v10;
      sub_1CD452CE0((uint64_t)v15, (uint64_t *)&v14, 0);
      uint64_t v11 = (uint64_t)v14;
      std::string::size_type v14 = 0;
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
      v12[0] = "expected end of string";
      __int16 v13 = 259;
      llvm::SourceMgr::GetMessage((llvm::Twine *)v12, (uint64_t *)v15, (char *)(a1 + v9), 0, 0, 0, 0, 0, (uint64_t)v18);
      sub_1CD4D7434(a3, (uint64_t)v18);
      sub_1CC1925A4(v27);
      if (__p)
      {
        size_t v26 = __p;
        operator delete(__p);
      }
      if (v24 < 0) {
        operator delete(v23);
      }
      if (v22 < 0) {
        operator delete(v21);
      }
      if (v20 < 0) {
        operator delete((void *)v18[2]);
      }
      llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)v15);
      return 0;
    }
  }
  return result;
}

llvm::Type *llvm::parseTypeAtBeginning(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  __int16 v22 = 261;
  v21[0] = "";
  v21[1] = 0;
  char v20 = (llvm::Type *)v21;
  BOOL v12 = sub_1CD096174((llvm::raw_ostream *)0x18, (uint64_t)&v20);
  *BOOL v12 = &unk_1F2644E70;
  v12[1] = a1;
  v12[2] = a1 + a2;
  unsigned int v17 = v12;
  sub_1CD452CE0((uint64_t)v18, (uint64_t *)&v17, 0);
  uint64_t v13 = (uint64_t)v17;
  unsigned int v17 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  char v20 = 0;
  sub_1CD4F5514((uint64_t)v21, a1, a2, (uint64_t)v18, a4, (uint64_t)a5, 0, *a5, 0);
  int v14 = llvm::LLParser::parseTypeAtBeginning((uint64_t)v21, &v20, a3, a6);
  sub_1CD4F568C((uint64_t)v21);
  if (v14) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = v20;
  }
  llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)v18);
  return v15;
}

void sub_1CC1A2B14(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

void sub_1CC1A2B20(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

void sub_1CC1A2B2C(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(unsigned char *a1, uint64_t a2, int a3, uint64_t (*a4)(void, void), uint64_t a5)
{
  int v5 = *(unsigned __int8 *)(*(void *)a2 + 8);
  if ((v5 - 9) > 0xFFFFFFFD) {
    return 0;
  }
  if (v5 != a3)
  {
    if (v5 != 5 || *a1 != 0) {
      return 0;
    }
    uint64_t v11 = a4;
    llvm::msgpack::DocNode::fromString(a2, *(std::string::value_type **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)"", 0);
    a4 = v11;
    if (*(unsigned __int8 *)(*(void *)a2 + 8) != a3) {
      return 0;
    }
  }
  if (!a4) {
    return 1;
  }

  return a4(a5, a2);
}

uint64_t llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyInteger(llvm::AMDGPU::HSAMD::V3::MetadataVerifier *this, llvm::msgpack::DocNode *a2)
{
  if (llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, (uint64_t)a2, 1, 0, 0)) {
    return 1;
  }
  int v4 = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, (uint64_t)a2, 0, 0, 0);
  uint64_t result = 0;
  if (v4) {
    return 1;
  }
  return result;
}

uint64_t llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyArray(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5, char a6)
{
  if (*(unsigned char *)(*a2 + 8) != 7) {
    return 0;
  }
  uint64_t v8 = (uint64_t *)a2[1];
  if (a6)
  {
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    if (0xAAAAAAAAAAAAAAABLL * ((v10 - *v8) >> 3) != a5) {
      return 0;
    }
  }
  else
  {
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
  }
  if (v9 == v10) {
    return 1;
  }
  do
  {
    uint64_t result = a3(a4, v9);
    if (!result) {
      break;
    }
    v9 += 24;
  }
  while (v9 != v10);
  return result;
}

uint64_t llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t (*a6)(uint64_t, uint64_t), uint64_t a7)
{
  uint64_t v10 = *(void *)(a2 + 8);
  *(void *)&v14[0] = **(void **)a2 + 176;
  *(void *)&v14[1] = a3;
  *(void *)&v14[2] = a4;
  uint64_t v11 = sub_1CC1B437C(v10, v14);
  if (*(void *)(a2 + 8) + 8 == v11) {
    return a5 ^ 1u;
  }

  return a6(a7, v11 + 56);
}

uint64_t llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalarEntry(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t (*a7)(void, void), uint64_t a8)
{
  uint64_t v14 = *(void *)(a2 + 8);
  *(void *)&v17[0] = **(void **)a2 + 176;
  *(void *)&v17[1] = a3;
  *(void *)&void v17[2] = a4;
  uint64_t v15 = sub_1CC1B437C(v14, v17);
  if (*(void *)(a2 + 8) + 8 == v15) {
    return a5 ^ 1u;
  }

  return llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(a1, v15 + 56, a6, a7, a8);
}

uint64_t llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyIntegerEntry(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10 = a1;
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)&v11[0] = **(void **)a2 + 176;
  *(void *)&v11[1] = a3;
  *(void *)&v11[2] = a4;
  uint64_t v8 = sub_1CC1B437C(v7, v11);
  if (*(void *)(a2 + 8) + 8 == v8) {
    return a5 ^ 1u;
  }
  else {
    return sub_1CC1A3D58(&v10, v8 + 56);
  }
}

uint64_t llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyKernelArgs(llvm::AMDGPU::HSAMD::V3::MetadataVerifier *this, llvm::msgpack::DocNode *a2)
{
  if (*(unsigned char *)(*(void *)a2 + 8) != 8) {
    return 0;
  }
  uint64_t v31 = **(void **)a2 + 176;
  unint64_t v32 = ".name";
  uint64_t v33 = 5;
  uint64_t v4 = sub_1CC1B437C(*((void *)a2 + 1), (double *)&v31);
  uint64_t v5 = *((void *)a2 + 1);
  if (v5 + 8 != v4)
  {
    uint64_t result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v4 + 56, 5, 0, 0);
    if (!result) {
      return result;
    }
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v31 = **(void **)a2 + 176;
  unint64_t v32 = ".type_name";
  uint64_t v33 = 10;
  uint64_t v7 = sub_1CC1B437C(v5, (double *)&v31);
  uint64_t v8 = *((void *)a2 + 1);
  if (v8 + 8 != v7)
  {
    uint64_t result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v7 + 56, 5, 0, 0);
    if (!result) {
      return result;
    }
    uint64_t v8 = *((void *)a2 + 1);
  }
  int v30 = this;
  uint64_t v31 = **(void **)a2 + 176;
  unint64_t v32 = ".size";
  uint64_t v33 = 5;
  uint64_t v9 = sub_1CC1B437C(v8, (double *)&v31);
  if (*((void *)a2 + 1) + 8 == v9) {
    return 0;
  }
  uint64_t result = sub_1CC1A3D58(&v30, v9 + 56);
  if (!result) {
    return result;
  }
  int v30 = this;
  uint64_t v10 = *((void *)a2 + 1);
  uint64_t v31 = **(void **)a2 + 176;
  unint64_t v32 = ".offset";
  uint64_t v33 = 7;
  uint64_t v11 = sub_1CC1B437C(v10, (double *)&v31);
  if (*((void *)a2 + 1) + 8 == v11) {
    return 0;
  }
  uint64_t result = sub_1CC1A3D58(&v30, v11 + 56);
  if (!result) {
    return result;
  }
  uint64_t v12 = *((void *)a2 + 1);
  uint64_t v31 = **(void **)a2 + 176;
  unint64_t v32 = ".value_kind";
  uint64_t v33 = 11;
  uint64_t v13 = sub_1CC1B437C(v12, (double *)&v31);
  if (*((void *)a2 + 1) + 8 == v13) {
    return 0;
  }
  uint64_t result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v13 + 56, 5, (uint64_t (*)(void, void))sub_1CC1A3DBC, (uint64_t)&v30);
  if (!result) {
    return result;
  }
  int v30 = this;
  uint64_t v14 = *((void *)a2 + 1);
  uint64_t v31 = **(void **)a2 + 176;
  unint64_t v32 = ".pointee_align";
  uint64_t v33 = 14;
  uint64_t v15 = sub_1CC1B437C(v14, (double *)&v31);
  uint64_t v16 = *((void *)a2 + 1);
  if (v16 + 8 != v15)
  {
    uint64_t result = sub_1CC1A3D58(&v30, v15 + 56);
    if (!result) {
      return result;
    }
    uint64_t v16 = *((void *)a2 + 1);
  }
  uint64_t v31 = **(void **)a2 + 176;
  unint64_t v32 = ".address_space";
  uint64_t v33 = 14;
  uint64_t v17 = sub_1CC1B437C(v16, (double *)&v31);
  uint64_t v18 = *((void *)a2 + 1);
  if (v18 + 8 != v17)
  {
    uint64_t result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v17 + 56, 5, (uint64_t (*)(void, void))sub_1CC1A4694, (uint64_t)&v30);
    if (!result) {
      return result;
    }
    uint64_t v18 = *((void *)a2 + 1);
  }
  uint64_t v31 = **(void **)a2 + 176;
  unint64_t v32 = ".access";
  uint64_t v33 = 7;
  uint64_t v19 = sub_1CC1B437C(v18, (double *)&v31);
  uint64_t v20 = *((void *)a2 + 1);
  if (v20 + 8 != v19)
  {
    uint64_t result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v19 + 56, 5, (uint64_t (*)(void, void))sub_1CC1A4800, (uint64_t)&v30);
    if (!result) {
      return result;
    }
    uint64_t v20 = *((void *)a2 + 1);
  }
  uint64_t v31 = **(void **)a2 + 176;
  unint64_t v32 = ".actual_access";
  uint64_t v33 = 14;
  uint64_t v21 = sub_1CC1B437C(v20, (double *)&v31);
  uint64_t v22 = *((void *)a2 + 1);
  if (v22 + 8 != v21)
  {
    uint64_t result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v21 + 56, 5, (uint64_t (*)(void, void))sub_1CC1A48E8, (uint64_t)&v30);
    if (!result) {
      return result;
    }
    uint64_t v22 = *((void *)a2 + 1);
  }
  uint64_t v31 = **(void **)a2 + 176;
  unint64_t v32 = ".is_const";
  uint64_t v33 = 9;
  uint64_t v23 = sub_1CC1B437C(v22, (double *)&v31);
  uint64_t v24 = *((void *)a2 + 1);
  if (v24 + 8 != v23)
  {
    uint64_t result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v23 + 56, 3, 0, 0);
    if (!result) {
      return result;
    }
    uint64_t v24 = *((void *)a2 + 1);
  }
  uint64_t v31 = **(void **)a2 + 176;
  unint64_t v32 = ".is_restrict";
  uint64_t v33 = 12;
  uint64_t v25 = sub_1CC1B437C(v24, (double *)&v31);
  uint64_t v26 = *((void *)a2 + 1);
  if (v26 + 8 != v25)
  {
    uint64_t result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v25 + 56, 3, 0, 0);
    if (!result) {
      return result;
    }
    uint64_t v26 = *((void *)a2 + 1);
  }
  uint64_t v31 = **(void **)a2 + 176;
  unint64_t v32 = ".is_volatile";
  uint64_t v33 = 12;
  uint64_t v27 = sub_1CC1B437C(v26, (double *)&v31);
  uint64_t v28 = *((void *)a2 + 1);
  if (v28 + 8 != v27)
  {
    uint64_t result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v27 + 56, 3, 0, 0);
    if (!result) {
      return result;
    }
    uint64_t v28 = *((void *)a2 + 1);
  }
  uint64_t v31 = **(void **)a2 + 176;
  unint64_t v32 = ".is_pipe";
  uint64_t v33 = 8;
  uint64_t v29 = sub_1CC1B437C(v28, (double *)&v31);
  if (*((void *)a2 + 1) + 8 == v29) {
    return 1;
  }
  else {
    return llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v29 + 56, 3, 0, 0);
  }
}

uint64_t llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyKernel(llvm::AMDGPU::HSAMD::V3::MetadataVerifier *this, llvm::msgpack::DocNode *a2)
{
  if (*(unsigned char *)(*(void *)a2 + 8) != 8) {
    return 0;
  }
  uint64_t v55 = **(void **)a2 + 176;
  unint64_t v56 = ".name";
  uint64_t v57 = 5;
  uint64_t v4 = sub_1CC1B437C(*((void *)a2 + 1), (double *)&v55);
  if (*((void *)a2 + 1) + 8 == v4) {
    return 0;
  }
  uint64_t result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v4 + 56, 5, 0, 0);
  if (!result) {
    return result;
  }
  uint64_t v6 = *((void *)a2 + 1);
  uint64_t v55 = **(void **)a2 + 176;
  unint64_t v56 = ".symbol";
  uint64_t v57 = 7;
  uint64_t v7 = sub_1CC1B437C(v6, (double *)&v55);
  if (*((void *)a2 + 1) + 8 == v7) {
    return 0;
  }
  uint64_t result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v7 + 56, 5, 0, 0);
  if (!result) {
    return result;
  }
  uint64_t v8 = *((void *)a2 + 1);
  uint64_t v55 = **(void **)a2 + 176;
  unint64_t v56 = ".language";
  uint64_t v57 = 9;
  uint64_t v9 = sub_1CC1B437C(v8, (double *)&v55);
  uint64_t v10 = *((void *)a2 + 1);
  if (v10 + 8 != v9)
  {
    uint64_t result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v9 + 56, 5, (uint64_t (*)(void, void))sub_1CC1A49D0, (uint64_t)&v54);
    if (!result) {
      return result;
    }
    uint64_t v10 = *((void *)a2 + 1);
  }
  uint64_t v55 = **(void **)a2 + 176;
  unint64_t v56 = ".language_version";
  uint64_t v57 = 17;
  uint64_t v11 = sub_1CC1B437C(v10, (double *)&v55);
  uint64_t v12 = *((void *)a2 + 1);
  if (v12 + 8 != v11)
  {
    if (*(unsigned char *)(*(void *)(v11 + 56) + 8) != 7) {
      return 0;
    }
    uint64_t v13 = *(uint64_t **)(v11 + 64);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    if (v15 - *v13 != 48) {
      return 0;
    }
    if (v14 != v15)
    {
      while (1)
      {
        if ((llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v14, 1, 0, 0) & 1) == 0)
        {
          uint64_t result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v14, 0, 0, 0);
          if (!result) {
            return result;
          }
        }
        v14 += 24;
        if (v14 == v15)
        {
          uint64_t v12 = *((void *)a2 + 1);
          break;
        }
      }
    }
  }
  uint64_t v55 = **(void **)a2 + 176;
  unint64_t v56 = ".args";
  uint64_t v57 = 5;
  uint64_t v16 = sub_1CC1B437C(v12, (double *)&v55);
  uint64_t v17 = *((void *)a2 + 1);
  if (v17 + 8 != v16)
  {
    if (*(unsigned char *)(*(void *)(v16 + 56) + 8) != 7) {
      return 0;
    }
    uint64_t v18 = *(llvm::msgpack::DocNode ***)(v16 + 64);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    if (*v18 != v20)
    {
      while ((llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyKernelArgs(this, v19) & 1) != 0)
      {
        uint64_t v19 = (llvm::msgpack::DocNode *)((char *)v19 + 24);
        if (v19 == v20)
        {
          uint64_t v17 = *((void *)a2 + 1);
          goto LABEL_23;
        }
      }
      return 0;
    }
  }
LABEL_23:
  uint64_t v55 = **(void **)a2 + 176;
  unint64_t v56 = ".reqd_workgroup_size";
  uint64_t v57 = 20;
  uint64_t v21 = sub_1CC1B437C(v17, (double *)&v55);
  uint64_t v22 = *((void *)a2 + 1);
  if (v22 + 8 != v21)
  {
    if (*(unsigned char *)(*(void *)(v21 + 56) + 8) != 7) {
      return 0;
    }
    uint64_t v23 = *(uint64_t **)(v21 + 64);
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
    if (v25 - *v23 != 72) {
      return 0;
    }
    if (v24 != v25)
    {
      while (1)
      {
        if ((llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v24, 1, 0, 0) & 1) == 0)
        {
          uint64_t result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v24, 0, 0, 0);
          if (!result) {
            return result;
          }
        }
        v24 += 24;
        if (v24 == v25)
        {
          uint64_t v22 = *((void *)a2 + 1);
          break;
        }
      }
    }
  }
  uint64_t v55 = **(void **)a2 + 176;
  unint64_t v56 = ".workgroup_size_hint";
  uint64_t v57 = 20;
  uint64_t v26 = sub_1CC1B437C(v22, (double *)&v55);
  uint64_t v27 = *((void *)a2 + 1);
  if (v27 + 8 == v26) {
    goto LABEL_39;
  }
  if (*(unsigned char *)(*(void *)(v26 + 56) + 8) != 7) {
    return 0;
  }
  uint64_t v28 = *(uint64_t **)(v26 + 64);
  uint64_t v29 = *v28;
  uint64_t v30 = v28[1];
  if (v30 - *v28 != 72) {
    return 0;
  }
  if (v29 != v30)
  {
    while (1)
    {
      if ((llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v29, 1, 0, 0) & 1) == 0)
      {
        uint64_t result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v29, 0, 0, 0);
        if (!result) {
          return result;
        }
      }
      v29 += 24;
      if (v29 == v30)
      {
        uint64_t v27 = *((void *)a2 + 1);
        break;
      }
    }
  }
LABEL_39:
  uint64_t v55 = **(void **)a2 + 176;
  unint64_t v56 = ".vec_type_hint";
  uint64_t v57 = 14;
  uint64_t v31 = sub_1CC1B437C(v27, (double *)&v55);
  uint64_t v32 = *((void *)a2 + 1);
  if (v32 + 8 != v31)
  {
    uint64_t result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v31 + 56, 5, 0, 0);
    if (!result) {
      return result;
    }
    uint64_t v32 = *((void *)a2 + 1);
  }
  uint64_t v55 = **(void **)a2 + 176;
  unint64_t v56 = ".device_enqueue_symbol";
  uint64_t v57 = 22;
  uint64_t v33 = sub_1CC1B437C(v32, (double *)&v55);
  uint64_t v34 = *((void *)a2 + 1);
  if (v34 + 8 != v33)
  {
    uint64_t result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v33 + 56, 5, 0, 0);
    if (!result) {
      return result;
    }
    uint64_t v34 = *((void *)a2 + 1);
  }
  uint64_t v54 = this;
  uint64_t v55 = **(void **)a2 + 176;
  unint64_t v56 = ".kernarg_segment_size";
  uint64_t v57 = 21;
  uint64_t v35 = sub_1CC1B437C(v34, (double *)&v55);
  if (*((void *)a2 + 1) + 8 == v35) {
    return 0;
  }
  uint64_t result = sub_1CC1A3D58(&v54, v35 + 56);
  if (!result) {
    return result;
  }
  uint64_t v54 = this;
  uint64_t v36 = *((void *)a2 + 1);
  uint64_t v55 = **(void **)a2 + 176;
  unint64_t v56 = ".group_segment_fixed_size";
  uint64_t v57 = 25;
  uint64_t v37 = sub_1CC1B437C(v36, (double *)&v55);
  if (*((void *)a2 + 1) + 8 == v37) {
    return 0;
  }
  uint64_t result = sub_1CC1A3D58(&v54, v37 + 56);
  if (!result) {
    return result;
  }
  uint64_t v54 = this;
  uint64_t v38 = *((void *)a2 + 1);
  uint64_t v55 = **(void **)a2 + 176;
  unint64_t v56 = ".private_segment_fixed_size";
  uint64_t v57 = 27;
  uint64_t v39 = sub_1CC1B437C(v38, (double *)&v55);
  if (*((void *)a2 + 1) + 8 == v39) {
    return 0;
  }
  uint64_t result = sub_1CC1A3D58(&v54, v39 + 56);
  if (!result) {
    return result;
  }
  uint64_t v54 = this;
  uint64_t v40 = *((void *)a2 + 1);
  uint64_t v55 = **(void **)a2 + 176;
  unint64_t v56 = ".kernarg_segment_align";
  uint64_t v57 = 22;
  uint64_t v41 = sub_1CC1B437C(v40, (double *)&v55);
  if (*((void *)a2 + 1) + 8 == v41) {
    return 0;
  }
  uint64_t result = sub_1CC1A3D58(&v54, v41 + 56);
  if (!result) {
    return result;
  }
  uint64_t v54 = this;
  uint64_t v42 = *((void *)a2 + 1);
  uint64_t v55 = **(void **)a2 + 176;
  unint64_t v56 = ".wavefront_size";
  uint64_t v57 = 15;
  uint64_t v43 = sub_1CC1B437C(v42, (double *)&v55);
  if (*((void *)a2 + 1) + 8 == v43) {
    return 0;
  }
  uint64_t result = sub_1CC1A3D58(&v54, v43 + 56);
  if (!result) {
    return result;
  }
  uint64_t v54 = this;
  uint64_t v44 = *((void *)a2 + 1);
  uint64_t v55 = **(void **)a2 + 176;
  unint64_t v56 = ".sgpr_count";
  uint64_t v57 = 11;
  uint64_t v45 = sub_1CC1B437C(v44, (double *)&v55);
  if (*((void *)a2 + 1) + 8 == v45) {
    return 0;
  }
  uint64_t result = sub_1CC1A3D58(&v54, v45 + 56);
  if (!result) {
    return result;
  }
  uint64_t v54 = this;
  uint64_t v46 = *((void *)a2 + 1);
  uint64_t v55 = **(void **)a2 + 176;
  unint64_t v56 = ".vgpr_count";
  uint64_t v57 = 11;
  uint64_t v47 = sub_1CC1B437C(v46, (double *)&v55);
  if (*((void *)a2 + 1) + 8 == v47) {
    return 0;
  }
  uint64_t result = sub_1CC1A3D58(&v54, v47 + 56);
  if (!result) {
    return result;
  }
  uint64_t v54 = this;
  uint64_t v48 = *((void *)a2 + 1);
  uint64_t v55 = **(void **)a2 + 176;
  unint64_t v56 = ".max_flat_workgroup_size";
  uint64_t v57 = 24;
  uint64_t v49 = sub_1CC1B437C(v48, (double *)&v55);
  if (*((void *)a2 + 1) + 8 == v49) {
    return 0;
  }
  uint64_t result = sub_1CC1A3D58(&v54, v49 + 56);
  if (!result) {
    return result;
  }
  uint64_t v54 = this;
  uint64_t v50 = *((void *)a2 + 1);
  uint64_t v55 = **(void **)a2 + 176;
  unint64_t v56 = ".sgpr_spill_count";
  uint64_t v57 = 17;
  uint64_t v51 = sub_1CC1B437C(v50, (double *)&v55);
  uint64_t v52 = *((void *)a2 + 1);
  if (v52 + 8 != v51)
  {
    uint64_t result = sub_1CC1A3D58(&v54, v51 + 56);
    if (!result) {
      return result;
    }
    uint64_t v52 = *((void *)a2 + 1);
  }
  uint64_t v54 = this;
  uint64_t v55 = **(void **)a2 + 176;
  unint64_t v56 = ".vgpr_spill_count";
  uint64_t v57 = 17;
  uint64_t v53 = sub_1CC1B437C(v52, (double *)&v55);
  if (*((void *)a2 + 1) + 8 == v53) {
    return 1;
  }
  else {
    return sub_1CC1A3D58(&v54, v53 + 56);
  }
}

uint64_t llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verify(llvm::AMDGPU::HSAMD::V3::MetadataVerifier *this, llvm::msgpack::DocNode *a2)
{
  if (*(unsigned char *)(*(void *)a2 + 8) != 8) {
    return 0;
  }
  uint64_t v19 = **(void **)a2 + 176;
  uint64_t v20 = "amdhsa.version";
  uint64_t v21 = 14;
  uint64_t v4 = sub_1CC1B437C(*((void *)a2 + 1), (double *)&v19);
  uint64_t v5 = *((void *)a2 + 1);
  if (v5 + 8 == v4) {
    return 0;
  }
  if (*(unsigned char *)(*(void *)(v4 + 56) + 8) != 7) {
    return 0;
  }
  uint64_t v6 = *(uint64_t **)(v4 + 64);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (v8 - *v6 != 48) {
    return 0;
  }
  if (v7 == v8)
  {
LABEL_10:
    uint64_t v19 = **(void **)a2 + 176;
    uint64_t v20 = "amdhsa.printf";
    uint64_t v21 = 13;
    uint64_t v10 = sub_1CC1B437C(v5, (double *)&v19);
    uint64_t v11 = *((void *)a2 + 1);
    if (v11 + 8 != v10)
    {
      if (*(unsigned char *)(*(void *)(v10 + 56) + 8) != 7) {
        return 0;
      }
      uint64_t v12 = *(uint64_t **)(v10 + 64);
      uint64_t v13 = *v12;
      uint64_t v14 = v12[1];
      if (*v12 != v14)
      {
        while ((llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v13, 5, 0, 0) & 1) != 0)
        {
          v13 += 24;
          if (v13 == v14)
          {
            uint64_t v11 = *((void *)a2 + 1);
            goto LABEL_16;
          }
        }
        return 0;
      }
    }
LABEL_16:
    uint64_t v19 = **(void **)a2 + 176;
    uint64_t v20 = "amdhsa.kernels";
    uint64_t v21 = 14;
    uint64_t v15 = sub_1CC1B437C(v11, (double *)&v19);
    if (*((void *)a2 + 1) + 8 != v15 && *(unsigned char *)(*(void *)(v15 + 56) + 8) == 7)
    {
      uint64_t v16 = *(llvm::msgpack::DocNode ***)(v15 + 64);
      uint64_t v17 = *v16;
      uint64_t v18 = v16[1];
      if (*v16 == v18) {
        return 1;
      }
      do
      {
        uint64_t result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyKernel(this, v17);
        if (!result) {
          break;
        }
        uint64_t v17 = (llvm::msgpack::DocNode *)((char *)v17 + 24);
      }
      while (v17 != v18);
      return result;
    }
    return 0;
  }
  while (1)
  {
    if ((llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v7, 1, 0, 0) & 1) == 0)
    {
      uint64_t result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v7, 0, 0, 0);
      if (!result) {
        return result;
      }
    }
    v7 += 24;
    if (v7 == v8)
    {
      uint64_t v5 = *((void *)a2 + 1);
      goto LABEL_10;
    }
  }
}

uint64_t sub_1CC1A3D58(unsigned char **a1, uint64_t a2)
{
  unsigned int v3 = *a1;
  if (llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(*a1, a2, 1, 0, 0)) {
    return 1;
  }
  int v4 = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(v3, a2, 0, 0, 0);
  uint64_t result = 0;
  if (v4) {
    return 1;
  }
  return result;
}

BOOL sub_1CC1A3DBC(uint64_t a1, uint64_t a2)
{
  int v2 = 0;
  unsigned int v3 = *(uint64_t **)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  unsigned int v5 = 0;
  switch(v4)
  {
    case 4:
      int v2 = 0;
      unsigned int v6 = bswap32(*(_DWORD *)v3);
      BOOL v7 = v6 >= 0x70697065;
      BOOL v8 = v6 > 0x70697065;
      goto LABEL_20;
    case 5:
      BOOL v12 = *(_DWORD *)v3 == 1734438249 && *((unsigned char *)v3 + 4) == 101;
      unsigned int v5 = 257;
      BOOL v13 = 0;
      LOBYTE(v14) = 0;
      int v2 = 0;
      int v15 = 0;
      if (v12) {
        goto LABEL_104;
      }
      if (*(_DWORD *)v3 ^ 0x75657571 | *((unsigned __int8 *)v3 + 4) ^ 0x65) {
        unsigned int v5 = 0;
      }
      else {
        unsigned int v5 = 257;
      }
      goto LABEL_114;
    case 6:
    case 9:
    case 10:
    case 11:
    case 12:
      goto LABEL_60;
    case 7:
      unsigned int v16 = 1935764848;
      unsigned int v17 = bswap32(*(_DWORD *)v3);
      if (v17 == 1935764848)
      {
        unsigned int v16 = 1886152050;
        unsigned int v17 = bswap32(*(_DWORD *)((char *)v3 + 3));
        if (v17 == 1886152050) {
          goto LABEL_29;
        }
      }
      int v2 = 0;
      BOOL v18 = v17 >= v16;
      goto LABEL_50;
    case 8:
      int v2 = 0;
      unint64_t v19 = bswap64(*v3);
      BOOL v7 = v19 >= 0x62795F76616C7565;
      BOOL v8 = v19 > 0x62795F76616C7565;
LABEL_20:
      int v20 = v8;
      int v21 = !v7;
      int v11 = v20 - v21;
      goto LABEL_57;
    case 13:
      unint64_t v22 = 0x676C6F62616C5F62;
      unint64_t v23 = bswap64(*v3);
      if (v23 == 0x676C6F62616C5F62
        && (unint64_t v22 = 0x6C5F627566666572, v23 = bswap64(*(uint64_t *)((char *)v3 + 5)), v23 == 0x6C5F627566666572))
      {
LABEL_29:
        int v11 = 0;
        int v2 = 0;
      }
      else
      {
        int v2 = 0;
        BOOL v18 = v23 >= v22;
LABEL_50:
        if (v18) {
          int v11 = 1;
        }
        else {
          int v11 = -1;
        }
      }
      goto LABEL_57;
    default:
      if (v4 == 20)
      {
        BOOL v25 = *v3 == 0x625F6E6564646968 && v3[1] == 0x756F635F6B636F6CLL && *((_DWORD *)v3 + 4) == 2019521646;
        int v2 = !v25;
        if (v25)
        {
          unsigned int v5 = 257;
        }
        else
        {
          unsigned int v5 = 0;
          if (*v3 == 0x625F6E6564646968 && v3[1] == 0x756F635F6B636F6CLL && *((_DWORD *)v3 + 4) == 2036298862)
          {
            LOBYTE(v13) = 0;
            LOBYTE(v14) = 0;
            int v2 = 0;
            unsigned int v5 = 257;
LABEL_266:
            int v15 = 1;
            goto LABEL_114;
          }
        }
        if (v2)
        {
          int v2 = 0;
          LOBYTE(v14) = 0;
          LOBYTE(v13) = 0;
          BOOL v52 = 0;
          if (*((_DWORD *)v3 + 4) == 2053076078 && v3[1] == 0x756F635F6B636F6CLL && *v3 == 0x625F6E6564646968) {
            unsigned int v5 = 257;
          }
          BOOL v51 = v5 < 0x100;
          int v15 = 1;
          goto LABEL_181;
        }
        LOBYTE(v13) = 0;
        LOBYTE(v14) = 0;
        goto LABEL_266;
      }
      unsigned int v5 = 0;
      if (v4 == 22)
      {
        unint64_t v9 = 0x64796E616D69635FLL;
        unint64_t v10 = bswap64(*v3);
        if (v10 == 0x64796E616D69635FLL
          && (unint64_t v9 = 0x7368617265645F70, v10 = bswap64(v3[1]), v10 == 0x7368617265645F70)
          && (unint64_t v9 = 0x5F706F696E746572, v10 = bswap64(*(uint64_t *)((char *)v3 + 14)), v10 == 0x5F706F696E746572))
        {
          int v11 = 0;
        }
        else if (v10 < v9)
        {
          int v11 = -1;
        }
        else
        {
          int v11 = 1;
        }
        int v2 = 1;
LABEL_57:
        if (v11) {
          unsigned int v5 = 0;
        }
        else {
          unsigned int v5 = 257;
        }
      }
LABEL_60:
      BOOL v14 = v4 == 19;
      if (v4 == 19 && v5 <= 0xFF)
      {
        if (*(uint64_t *)((char *)v3 + 11) == 0x785F657A69735F70
          && v3[1] == 0x7A69735F70756F72
          && *v3 == 0x675F6E6564646968)
        {
          unsigned int v5 = 257;
        }
        BOOL v14 = 1;
      }
      if (v14 && v5 <= 0xFF)
      {
        BOOL v30 = *(uint64_t *)((char *)v3 + 11) == 0x795F657A69735F70 && v3[1] == 0x7A69735F70756F72;
        if (v30 && *v3 == 0x675F6E6564646968) {
          unsigned int v5 = 257;
        }
      }
      char v32 = !v14;
      if (v5 > 0xFF) {
        char v32 = 1;
      }
      if ((v32 & 1) == 0)
      {
        if (*(uint64_t *)((char *)v3 + 11) == 0x7A5F657A69735F70
          && v3[1] == 0x7A69735F70756F72
          && *v3 == 0x675F6E6564646968)
        {
          unsigned int v5 = 257;
        }
        LOBYTE(v14) = 1;
      }
      int v15 = 0;
      BOOL v13 = v4 == 18;
      if (v4 == 18 && v5 <= 0xFF)
      {
        int v15 = 0;
        if (*((_WORD *)v3 + 8) == 30815 && v3[1] == 0x7265646E69616D65 && *v3 == 0x725F6E6564646968) {
          unsigned int v5 = 257;
        }
        BOOL v13 = 1;
      }
LABEL_104:
      if (v13 && v5 <= 0xFF)
      {
        BOOL v37 = *((_WORD *)v3 + 8) == 31071 && v3[1] == 0x7265646E69616D65;
        if (v37 && *v3 == 0x725F6E6564646968) {
          unsigned int v5 = 257;
        }
      }
LABEL_114:
      char v39 = !v13;
      if (v5 > 0xFF) {
        char v39 = 1;
      }
      if ((v39 & 1) == 0)
      {
        BOOL v40 = *((_WORD *)v3 + 8) == 31327 && v3[1] == 0x7265646E69616D65;
        if (v40 && *v3 == 0x725F6E6564646968) {
          unsigned int v5 = 257;
        }
      }
      char v42 = v2 ^ 1;
      if (v5 > 0xFF) {
        char v43 = 1;
      }
      else {
        char v43 = v2 ^ 1;
      }
      if ((v43 & 1) == 0)
      {
        BOOL v44 = *(uint64_t *)((char *)v3 + 14) == 0x785F74657366666FLL && v3[1] == 0x666F5F6C61626F6CLL;
        if (v44 && *v3 == 0x675F6E6564646968) {
          unsigned int v5 = 257;
        }
      }
      if (v5 > 0xFF) {
        char v42 = 1;
      }
      if ((v42 & 1) == 0)
      {
        BOOL v46 = *(uint64_t *)((char *)v3 + 14) == 0x795F74657366666FLL && v3[1] == 0x666F5F6C61626F6CLL;
        if (v46 && *v3 == 0x675F6E6564646968) {
          unsigned int v5 = 257;
        }
      }
      char v48 = v2 ^ 1;
      if (v5 > 0xFF) {
        char v48 = 1;
      }
      if ((v48 & 1) == 0)
      {
        BOOL v49 = *(uint64_t *)((char *)v3 + 14) == 0x7A5F74657366666FLL && v3[1] == 0x666F5F6C61626F6CLL;
        if (v49 && *v3 == 0x675F6E6564646968) {
          unsigned int v5 = 257;
        }
      }
      BOOL v51 = v5 < 0x100;
      BOOL v52 = v4 == 16;
      if (v4 == 16 && v5 <= 0xFF)
      {
        if (v3[1] == 0x736D69645F646972 && *v3 == 0x675F6E6564646968) {
          unsigned int v5 = 257;
        }
        BOOL v52 = 1;
        goto LABEL_192;
      }
      if (v4 == 11 && v5 <= 0xFF)
      {
        uint64_t v54 = *v3;
        BOOL v55 = *(uint64_t *)((char *)v3 + 3) == 0x656E6F6E5F6E6564;
        uint64_t v56 = 0x6E5F6E6564646968;
        goto LABEL_187;
      }
LABEL_181:
      if (!v15 || !v51) {
        goto LABEL_192;
      }
      uint64_t v54 = *v3;
      BOOL v55 = *((_DWORD *)v3 + 4) == 1919247974 && v3[1] == 0x75625F66746E6972;
      uint64_t v56 = 0x705F6E6564646968;
LABEL_187:
      if (v55 && v54 == v56) {
        unsigned int v5 = 257;
      }
LABEL_192:
      if (v2 && v5 <= 0xFF)
      {
        BOOL v60 = *(uint64_t *)((char *)v3 + 14) == 0x7265666675625F6CLL && v3[1] == 0x5F6C6C616374736FLL;
        if (v60 && *v3 == 0x685F6E6564646968) {
          unsigned int v5 = 257;
        }
      }
      if (v4 == 14 && v5 <= 0xFF)
      {
        uint64_t v62 = *v3;
        BOOL v63 = *(uint64_t *)((char *)v3 + 6) == 0x31765F706165685FLL;
        uint64_t v64 = 0x685F6E6564646968;
      }
      else
      {
        char v65 = v15 ^ 1;
        if (v5 > 0xFF) {
          char v65 = 1;
        }
        if (v65)
        {
          if (v4 == 24 && v5 <= 0xFF)
          {
            uint64_t v62 = *v3;
            BOOL v63 = v3[2] == 0x6E6F697463615F6ELL && v3[1] == 0x6F6974656C706D6FLL;
            uint64_t v64 = 0x635F6E6564646968;
          }
          else
          {
            if (v4 != 25 || v5 > 0xFF) {
              goto LABEL_232;
            }
            uint64_t v62 = *v3;
            BOOL v63 = *((unsigned char *)v3 + 24) == 103 && v3[2] == 0x72615F636E79735FLL && v3[1] == 0x6469726769746C75;
            uint64_t v64 = 0x6D5F6E6564646968;
          }
        }
        else
        {
          uint64_t v62 = *v3;
          BOOL v63 = *((_DWORD *)v3 + 4) == 1702192501 && v3[1] == 0x715F746C75616665;
          uint64_t v64 = 0x645F6E6564646968;
        }
      }
      if (v63 && v62 == v64) {
        unsigned int v5 = 257;
      }
LABEL_232:
      char v68 = !v14;
      if (v5 > 0xFF) {
        char v68 = 1;
      }
      if ((v68 & 1) == 0)
      {
        BOOL v69 = *(uint64_t *)((char *)v3 + 11) == 0x657361625F657461 && v3[1] == 0x625F657461766972;
        if (v69 && *v3 == 0x705F6E6564646968) {
          unsigned int v5 = 257;
        }
      }
      char v71 = !v13;
      if (v5 > 0xFF) {
        char v71 = 1;
      }
      if ((v71 & 1) == 0)
      {
        uint64_t v72 = *v3;
        BOOL v73 = *((_WORD *)v3 + 8) == 25971 && v3[1] == 0x61625F6465726168;
        uint64_t v74 = 0x735F6E6564646968;
LABEL_254:
        if (v73 && v72 == v74) {
          unsigned int v5 = 257;
        }
        goto LABEL_259;
      }
      char v75 = !v52;
      if (v5 > 0xFF) {
        char v75 = 1;
      }
      if ((v75 & 1) == 0)
      {
        uint64_t v72 = *v3;
        BOOL v73 = v3[1] == 0x7274705F65756575;
        uint64_t v74 = 0x715F6E6564646968;
        goto LABEL_254;
      }
LABEL_259:
      if ((_BYTE)v5) {
        BOOL v77 = v5 >> 8 == 0;
      }
      else {
        BOOL v77 = 1;
      }
      return !v77;
  }
}

BOOL sub_1CC1A4694(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  switch(*(void *)(a2 + 16))
  {
    case 5:
      int v3 = *(_DWORD *)v2 ^ 0x61636F6C;
      int v4 = *(unsigned __int8 *)(v2 + 4);
      int v5 = 108;
      goto LABEL_11;
    case 6:
      int v8 = *(_DWORD *)v2 ^ 0x626F6C67 | *(unsigned __int16 *)(v2 + 4) ^ 0x6C61;
      BOOL v7 = v8 == 0;
      if (v8)
      {
        BOOL v7 = (*(_DWORD *)v2 ^ 0x69676572 | *(unsigned __int16 *)(v2 + 4) ^ 0x6E6F) == 0;
        BOOL v9 = (*(_DWORD *)v2 ^ 0x69676572 | *(unsigned __int16 *)(v2 + 4) ^ 0x6E6F) == 0;
        goto LABEL_19;
      }
      int v6 = 1;
      break;
    case 7:
      if (*(_DWORD *)v2 == 1986622064 && *(_DWORD *)(v2 + 3) == 1702125942)
      {
        int v6 = 1;
        BOOL v7 = 1;
      }
      else
      {
        int v3 = *(_DWORD *)v2 ^ 0x656E6567;
        int v4 = *(_DWORD *)(v2 + 3);
        int v5 = 1667854949;
LABEL_11:
        BOOL v11 = (v3 | v4 ^ v5) == 0;
LABEL_13:
        BOOL v7 = v11;
        BOOL v9 = v11;
LABEL_19:
        int v6 = v9;
      }
      break;
    case 8:
      BOOL v11 = *(void *)v2 == 0x746E6174736E6F63;
      goto LABEL_13;
    default:
      int v6 = 0;
      BOOL v7 = 0;
      return v7 && v6 != 0;
  }
  return v7 && v6 != 0;
}

BOOL sub_1CC1A4800(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2 == 10)
  {
    uint64_t v6 = *(void *)v3 ^ 0x6E6F5F6574697277 | *(unsigned __int16 *)(v3 + 8) ^ 0x796CLL;
    BOOL v4 = v6 == 0;
    if (v6)
    {
      BOOL v4 = (*(void *)v3 ^ 0x6972775F64616572 | *(unsigned __int16 *)(v3 + 8) ^ 0x6574) == 0;
      BOOL v5 = (*(void *)v3 ^ 0x6972775F64616572 | *(unsigned __int16 *)(v3 + 8) ^ 0x6574) == 0;
      goto LABEL_6;
    }
    int v7 = 1;
  }
  else
  {
    if (v2 == 9)
    {
      BOOL v4 = (*(void *)v3 ^ 0x6C6E6F5F64616572 | *(unsigned __int8 *)(v3 + 8) ^ 0x79) == 0;
      BOOL v5 = (*(void *)v3 ^ 0x6C6E6F5F64616572 | *(unsigned __int8 *)(v3 + 8) ^ 0x79) == 0;
LABEL_6:
      int v7 = v5;
      return v4 && v7 != 0;
    }
    int v7 = 0;
    BOOL v4 = 0;
  }
  return v4 && v7 != 0;
}

BOOL sub_1CC1A48E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2 == 10)
  {
    uint64_t v6 = *(void *)v3 ^ 0x6E6F5F6574697277 | *(unsigned __int16 *)(v3 + 8) ^ 0x796CLL;
    BOOL v4 = v6 == 0;
    if (v6)
    {
      BOOL v4 = (*(void *)v3 ^ 0x6972775F64616572 | *(unsigned __int16 *)(v3 + 8) ^ 0x6574) == 0;
      BOOL v5 = (*(void *)v3 ^ 0x6972775F64616572 | *(unsigned __int16 *)(v3 + 8) ^ 0x6574) == 0;
      goto LABEL_6;
    }
    int v7 = 1;
  }
  else
  {
    if (v2 == 9)
    {
      BOOL v4 = (*(void *)v3 ^ 0x6C6E6F5F64616572 | *(unsigned __int8 *)(v3 + 8) ^ 0x79) == 0;
      BOOL v5 = (*(void *)v3 ^ 0x6C6E6F5F64616572 | *(unsigned __int8 *)(v3 + 8) ^ 0x79) == 0;
LABEL_6:
      int v7 = v5;
      return v4 && v7 != 0;
    }
    int v7 = 0;
    BOOL v4 = 0;
  }
  return v4 && v7 != 0;
}

BOOL sub_1CC1A49D0(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = 0;
  uint64_t v3 = *(unsigned __int16 **)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  BOOL v5 = 1;
  switch(v4)
  {
    case 3:
      int v6 = *v3 ^ 0x4348 | *((unsigned __int8 *)v3 + 2) ^ 0x43;
      unsigned int v7 = v6 == 0;
      if (v6)
      {
        int v8 = *v3 ^ 0x4948 | *((unsigned __int8 *)v3 + 2) ^ 0x50;
        unsigned int v7 = v8 == 0;
        BOOL v9 = v8 == 0;
        goto LABEL_5;
      }
      int v10 = 1;
      goto LABEL_33;
    case 6:
      unsigned int v7 = (*(_DWORD *)v3 ^ 0x6E65704F | v3[2] ^ 0x504D) == 0;
      BOOL v9 = (*(_DWORD *)v3 ^ 0x6E65704F | v3[2] ^ 0x504D) == 0;
LABEL_5:
      int v10 = v9;
      goto LABEL_33;
    case 8:
      unint64_t v11 = bswap64(*(void *)v3);
      BOOL v12 = v11 >= 0x4F70656E434C2043;
      BOOL v13 = v11 > 0x4F70656E434C2043;
      int v14 = !v12;
      int v15 = v13 - v14;
      goto LABEL_16;
    case 10:
      unint64_t v16 = 0x4F70656E434C2043;
      unint64_t v17 = bswap64(*(void *)v3);
      if (v17 == 0x4F70656E434C2043 && (unint64_t v17 = bswap32(v3[4]) >> 16, v16 = 11051, v17 == 11051))
      {
        int v15 = 0;
      }
      else if (v17 < v16)
      {
        int v15 = -1;
      }
      else
      {
        int v15 = 1;
      }
LABEL_16:
      BOOL v5 = v15 != 0;
      if (v15) {
        unsigned int v2 = 0;
      }
      else {
        unsigned int v2 = 257;
      }
      goto LABEL_19;
    default:
LABEL_19:
      if (v4 != 9 || !v5)
      {
        int v10 = v2;
        unsigned int v7 = v2 >> 8;
      }
      else
      {
        if (*((unsigned char *)v3 + 8) == 114 && *(void *)v3 == 0x656C626D65737341) {
          unsigned int v20 = 257;
        }
        else {
          unsigned int v20 = v2;
        }
        int v10 = v20;
        unsigned int v7 = v20 >> 8;
      }
LABEL_33:
      if (v7) {
        BOOL v21 = v10 == 0;
      }
      else {
        BOOL v21 = 1;
      }
      return !v21;
  }
}

const char *llvm::dwarf::TagString(llvm::dwarf *this)
{
  int v1 = (int)this;
  uint64_t result = 0;
  if (v1 <= 16512)
  {
    switch(v1)
    {
      case 0:
        uint64_t result = "DW_TAG_null";
        break;
      case 1:
        uint64_t result = "DW_TAG_array_type";
        break;
      case 2:
        uint64_t result = "DW_TAG_class_type";
        break;
      case 3:
        uint64_t result = "DW_TAG_entry_point";
        break;
      case 4:
        uint64_t result = "DW_TAG_enumeration_type";
        break;
      case 5:
        uint64_t result = "DW_TAG_formal_parameter";
        break;
      case 8:
        uint64_t result = "DW_TAG_imported_declaration";
        break;
      case 10:
        uint64_t result = "DW_TAG_label";
        break;
      case 11:
        uint64_t result = "DW_TAG_lexical_block";
        break;
      case 13:
        uint64_t result = "DW_TAG_member";
        break;
      case 15:
        uint64_t result = "DW_TAG_pointer_type";
        break;
      case 16:
        uint64_t result = "DW_TAG_reference_type";
        break;
      case 17:
        uint64_t result = "DW_TAG_compile_unit";
        break;
      case 18:
        uint64_t result = "DW_TAG_string_type";
        break;
      case 19:
        uint64_t result = "DW_TAG_structure_type";
        break;
      case 21:
        uint64_t result = "DW_TAG_subroutine_type";
        break;
      case 22:
        uint64_t result = "DW_TAG_typedef";
        break;
      case 23:
        uint64_t result = "DW_TAG_union_type";
        break;
      case 24:
        uint64_t result = "DW_TAG_unspecified_parameters";
        break;
      case 25:
        uint64_t result = "DW_TAG_variant";
        break;
      case 26:
        uint64_t result = "DW_TAG_common_block";
        break;
      case 27:
        uint64_t result = "DW_TAG_common_inclusion";
        break;
      case 28:
        uint64_t result = "DW_TAG_inheritance";
        break;
      case 29:
        uint64_t result = "DW_TAG_inlined_subroutine";
        break;
      case 30:
        uint64_t result = "DW_TAG_module";
        break;
      case 31:
        uint64_t result = "DW_TAG_ptr_to_member_type";
        break;
      case 32:
        uint64_t result = "DW_TAG_set_type";
        break;
      case 33:
        uint64_t result = "DW_TAG_subrange_type";
        break;
      case 34:
        uint64_t result = "DW_TAG_with_stmt";
        break;
      case 35:
        uint64_t result = "DW_TAG_access_declaration";
        break;
      case 36:
        uint64_t result = "DW_TAG_base_type";
        break;
      case 37:
        uint64_t result = "DW_TAG_catch_block";
        break;
      case 38:
        uint64_t result = "DW_TAG_const_type";
        break;
      case 39:
        uint64_t result = "DW_TAG_constant";
        break;
      case 40:
        uint64_t result = "DW_TAG_enumerator";
        break;
      case 41:
        uint64_t result = "DW_TAG_file_type";
        break;
      case 42:
        uint64_t result = "DW_TAG_friend";
        break;
      case 43:
        uint64_t result = "DW_TAG_namelist";
        break;
      case 44:
        uint64_t result = "DW_TAG_namelist_item";
        break;
      case 45:
        uint64_t result = "DW_TAG_packed_type";
        break;
      case 46:
        uint64_t result = "DW_TAG_subprogram";
        break;
      case 47:
        uint64_t result = "DW_TAG_template_type_parameter";
        break;
      case 48:
        uint64_t result = "DW_TAG_template_value_parameter";
        break;
      case 49:
        uint64_t result = "DW_TAG_thrown_type";
        break;
      case 50:
        uint64_t result = "DW_TAG_try_block";
        break;
      case 51:
        uint64_t result = "DW_TAG_variant_part";
        break;
      case 52:
        uint64_t result = "DW_TAG_variable";
        break;
      case 53:
        uint64_t result = "DW_TAG_volatile_type";
        break;
      case 54:
        uint64_t result = "DW_TAG_dwarf_procedure";
        break;
      case 55:
        uint64_t result = "DW_TAG_restrict_type";
        break;
      case 56:
        uint64_t result = "DW_TAG_interface_type";
        break;
      case 57:
        uint64_t result = "DW_TAG_namespace";
        break;
      case 58:
        uint64_t result = "DW_TAG_imported_module";
        break;
      case 59:
        uint64_t result = "DW_TAG_unspecified_type";
        break;
      case 60:
        uint64_t result = "DW_TAG_partial_unit";
        break;
      case 61:
        uint64_t result = "DW_TAG_imported_unit";
        break;
      case 63:
        uint64_t result = "DW_TAG_condition";
        break;
      case 64:
        uint64_t result = "DW_TAG_shared_type";
        break;
      case 65:
        uint64_t result = "DW_TAG_type_unit";
        break;
      case 66:
        uint64_t result = "DW_TAG_rvalue_reference_type";
        break;
      case 67:
        uint64_t result = "DW_TAG_template_alias";
        break;
      case 68:
        uint64_t result = "DW_TAG_coarray_type";
        break;
      case 69:
        uint64_t result = "DW_TAG_generic_subrange";
        break;
      case 70:
        uint64_t result = "DW_TAG_dynamic_type";
        break;
      case 71:
        uint64_t result = "DW_TAG_atomic_type";
        break;
      case 72:
        uint64_t result = "DW_TAG_call_site";
        break;
      case 73:
        uint64_t result = "DW_TAG_call_site_parameter";
        break;
      case 74:
        uint64_t result = "DW_TAG_skeleton_unit";
        break;
      case 75:
        uint64_t result = "DW_TAG_immutable_type";
        break;
      default:
        return result;
    }
    return result;
  }
  if (v1 > 20752)
  {
    if (v1 > 34661)
    {
      if (v1 >= 40960)
      {
        if (v1 == 40960)
        {
          return "DW_TAG_PGI_kanji_type";
        }
        else if (v1 == 40992)
        {
          return "DW_TAG_PGI_interface_block";
        }
        else
        {
          switch(v1)
          {
            case 45056:
              uint64_t result = "DW_TAG_BORLAND_property";
              break;
            case 45057:
              uint64_t result = "DW_TAG_BORLAND_Delphi_string";
              break;
            case 45058:
              uint64_t result = "DW_TAG_BORLAND_Delphi_dynamic_array";
              break;
            case 45059:
              uint64_t result = "DW_TAG_BORLAND_Delphi_set";
              break;
            case 45060:
              uint64_t result = "DW_TAG_BORLAND_Delphi_variant";
              break;
            default:
              return result;
          }
        }
      }
      else
      {
        int v8 = "DW_TAG_UPC_relaxed";
        if (v1 != 34663) {
          int v8 = 0;
        }
        if (v1 == 34662) {
          return "DW_TAG_UPC_strict_type";
        }
        else {
          return v8;
        }
      }
    }
    else
    {
      if (v1 > 32771)
      {
        BOOL v9 = v1 == 34661;
        int v10 = "DW_TAG_UPC_shared_type";
        goto LABEL_120;
      }
      uint64_t v3 = "DW_TAG_LLVM_annotation";
      if (v1 != 24576) {
        uint64_t v3 = 0;
      }
      if (v1 == 20753) {
        return "DW_TAG_ALTIUM_rom";
      }
      else {
        return v3;
      }
    }
  }
  else
  {
    if (v1 <= 17151)
    {
      if (v1 <= 16895)
      {
        if (v1 == 16513) {
          return "DW_TAG_MIPS_loop";
        }
        switch(v1)
        {
          case 16641:
            uint64_t result = "DW_TAG_format_label";
            break;
          case 16642:
            uint64_t result = "DW_TAG_function_template";
            break;
          case 16643:
            uint64_t result = "DW_TAG_class_template";
            break;
          case 16644:
            uint64_t result = "DW_TAG_GNU_BINCL";
            break;
          case 16645:
            uint64_t result = "DW_TAG_GNU_EINCL";
            break;
          case 16646:
            uint64_t result = "DW_TAG_GNU_template_template_param";
            break;
          case 16647:
            uint64_t result = "DW_TAG_GNU_template_parameter_pack";
            break;
          case 16648:
            uint64_t result = "DW_TAG_GNU_formal_parameter_pack";
            break;
          case 16649:
            uint64_t result = "DW_TAG_GNU_call_site";
            break;
          case 16650:
            uint64_t result = "DW_TAG_GNU_call_site_parameter";
            break;
          default:
            return result;
        }
        return result;
      }
      BOOL v9 = v1 == 17151;
      int v10 = "DW_TAG_SUN_hi";
LABEL_120:
      if (v9) {
        return v10;
      }
      else {
        return 0;
      }
    }
    uint64_t v4 = "DW_TAG_ALTIUM_rev_carry_type";
    if (v1 != 20739) {
      uint64_t v4 = 0;
    }
    if (v1 == 20738) {
      BOOL v5 = "DW_TAG_ALTIUM_mwa_circ_type";
    }
    else {
      BOOL v5 = v4;
    }
    int v6 = "DW_TAG_ALTIUM_circ_type";
    if (v1 != 20737) {
      int v6 = 0;
    }
    if (v1 == 17152) {
      unsigned int v7 = "DW_TAG_APPLE_ptrauth_type";
    }
    else {
      unsigned int v7 = v6;
    }
    if (v1 <= 20737) {
      return v7;
    }
    else {
      return v5;
    }
  }
  return result;
}

uint64_t llvm::dwarf::getTag(char *__s1, uint64_t a2)
{
  unint64_t v4 = 0;
  unint64_t v5 = 0x100000002;
  int v6 = 1;
  switch(a2)
  {
    case 11:
      if (*(void *)__s1 == 0x6E5F4741545F5744 && *(void *)(__s1 + 3) == 0x6C6C756E5F474154) {
        unint64_t v4 = 0x100000000;
      }
      else {
        unint64_t v4 = 0;
      }
      goto LABEL_1081;
    case 12:
      if (*(void *)__s1 != 0x6C5F4741545F5744 || *((_DWORD *)__s1 + 2) != 1818583649) {
        goto LABEL_104;
      }
      unint64_t v4 = 0x10000000ALL;
      goto LABEL_1081;
    case 13:
      if (*(void *)__s1 != 0x6D5F4741545F5744 || *(void *)(__s1 + 5) != 0x7265626D656D5F47) {
        goto LABEL_104;
      }
      unint64_t v4 = 0x10000000DLL;
      goto LABEL_1081;
    case 14:
      if (*(void *)__s1 == 0x745F4741545F5744 && *(void *)(__s1 + 6) == 0x666564657079745FLL)
      {
        unint64_t v4 = 0x100000016;
      }
      else
      {
        if (*(void *)__s1 != 0x765F4741545F5744 || *(void *)(__s1 + 6) != 0x746E61697261765FLL) {
          goto LABEL_96;
        }
        unint64_t v4 = 0x100000019;
      }
      goto LABEL_1081;
    case 17:
      if (*(void *)__s1 == 0x615F4741545F5744 && *((void *)__s1 + 1) == 0x7079745F79617272 && __s1[16] == 101)
      {
        int v6 = 0;
        unint64_t v4 = 0x100000001;
        goto LABEL_105;
      }
      if (*(void *)__s1 == 0x635F4741545F5744 && *((void *)__s1 + 1) == 0x7079745F7373616CLL && __s1[16] == 101)
      {
        uint64_t v160 = 2;
        goto LABEL_590;
      }
      if (*(void *)__s1 != 0x755F4741545F5744 || *((void *)__s1 + 1) != 0x7079745F6E6F696ELL || __s1[16] != 101)
      {
        unint64_t v4 = 0;
        goto LABEL_505;
      }
      unint64_t v4 = 0x100000017;
      goto LABEL_1081;
    case 18:
      if (*(void *)__s1 == 0x655F4741545F5744
        && *((void *)__s1 + 1) == 0x696F705F7972746ELL
        && *((_WORD *)__s1 + 8) == 29806)
      {
        goto LABEL_587;
      }
      if (*(void *)__s1 == 0x735F4741545F5744
        && *((void *)__s1 + 1) == 0x79745F676E697274
        && *((_WORD *)__s1 + 8) == 25968)
      {
        unint64_t v4 = 0x100000012;
      }
      else
      {
        if (a2 != 18) {
          goto LABEL_104;
        }
        if (*(void *)__s1 != 0x695F4741545F5744
          || *((void *)__s1 + 1) != 0x6E6174697265686ELL
          || *((_WORD *)__s1 + 8) != 25955)
        {
          goto LABEL_189;
        }
        unint64_t v4 = 0x10000001CLL;
      }
      goto LABEL_1081;
    case 19:
      if (*(void *)__s1 == 0x705F4741545F5744
        && *((void *)__s1 + 1) == 0x745F7265746E696FLL
        && *(void *)(__s1 + 11) == 0x657079745F726574)
      {
        unint64_t v4 = 0x10000000FLL;
      }
      else if (*(void *)__s1 == 0x635F4741545F5744 {
             && *((void *)__s1 + 1) == 0x755F656C69706D6FLL
      }
             && *(void *)(__s1 + 11) == 0x74696E755F656C69)
      {
        unint64_t v4 = 0x100000011;
      }
      else
      {
        if (*(void *)__s1 != 0x635F4741545F5744
          || *((void *)__s1 + 1) != 0x6C625F6E6F6D6D6FLL
          || *(void *)(__s1 + 11) != 0x6B636F6C625F6E6FLL)
        {
LABEL_96:
          unint64_t v4 = 0;
          goto LABEL_126;
        }
        unint64_t v4 = 0x10000001ALL;
      }
      goto LABEL_1081;
    case 20:
      if (*(void *)__s1 != 0x6C5F4741545F5744
        || *((void *)__s1 + 1) != 0x625F6C6163697865
        || *((_DWORD *)__s1 + 4) != 1801678700)
      {
LABEL_104:
        unint64_t v4 = 0;
        goto LABEL_105;
      }
      unint64_t v4 = 0x10000000BLL;
      goto LABEL_1081;
    case 21:
      if (*(void *)__s1 == 0x725F4741545F5744
        && *((void *)__s1 + 1) == 0x65636E6572656665
        && *(void *)(__s1 + 13) == 0x657079745F65636ELL)
      {
        unint64_t v4 = 0x100000010;
      }
      else
      {
        if (*(void *)__s1 != 0x735F4741545F5744
          || *((void *)__s1 + 1) != 0x6572757463757274
          || *(void *)(__s1 + 13) != 0x657079745F657275)
        {
          int v39 = 0;
          unint64_t v4 = 0;
          int v40 = 0;
          goto LABEL_360;
        }
        unint64_t v4 = 0x100000013;
      }
      goto LABEL_1081;
    case 22:
      if (*(void *)__s1 != 0x735F4741545F5744
        || *((void *)__s1 + 1) != 0x6E6974756F726275
        || *(void *)(__s1 + 14) != 0x657079745F656E69)
      {
        int v40 = 0;
        unint64_t v4 = 0;
        int v39 = 0;
        goto LABEL_349;
      }
      unint64_t v4 = 0x100000015;
      goto LABEL_1081;
    case 23:
      if (*(void *)__s1 == 0x655F4741545F5744
        && *((void *)__s1 + 1) == 0x69746172656D756ELL
        && *(void *)(__s1 + 15) == 0x657079745F6E6F69)
      {
        unint64_t v4 = 0x100000004;
      }
      else if (*(void *)__s1 == 0x665F4741545F5744 {
             && *((void *)__s1 + 1) == 0x61705F6C616D726FLL
      }
             && *(void *)(__s1 + 15) == 0x726574656D617261)
      {
        unint64_t v4 = 0x100000005;
      }
      else
      {
        if (*(void *)__s1 != 0x635F4741545F5744
          || *((void *)__s1 + 1) != 0x6E695F6E6F6D6D6FLL
          || *(void *)(__s1 + 15) != 0x6E6F6973756C636ELL)
        {
LABEL_189:
          unint64_t v4 = 0;
          goto LABEL_190;
        }
        unint64_t v4 = 0x10000001BLL;
      }
      goto LABEL_1081;
    case 25:
      if (*(void *)__s1 == 0x695F4741545F5744
        && *((void *)__s1 + 1) == 0x735F64656E696C6ELL
        && *((void *)__s1 + 2) == 0x6E6974756F726275
        && __s1[24] == 101)
      {
        unint64_t v4 = 0x10000001DLL;
      }
      else if (*(void *)__s1 == 0x705F4741545F5744 {
             && *((void *)__s1 + 1) == 0x656D5F6F745F7274
      }
             && *((void *)__s1 + 2) == 0x7079745F7265626DLL
             && __s1[24] == 101)
      {
        unint64_t v4 = 0x10000001FLL;
      }
      else if (*(void *)__s1 == 0x615F4741545F5744 {
             && *((void *)__s1 + 1) == 0x65645F7373656363
      }
             && *((void *)__s1 + 2) == 0x6F69746172616C63
             && __s1[24] == 110)
      {
        unint64_t v4 = 0x100000023;
      }
      else if (*(void *)__s1 == 0x415F4741545F5744 {
             && *((void *)__s1 + 1) == 0x7274705F454C5050
      }
             && *((void *)__s1 + 2) == 0x7079745F68747561
             && __s1[24] == 101)
      {
        unint64_t v4 = 0x100004300;
      }
      else if (*(void *)__s1 == 0x535F4741545F5744 {
             && *((void *)__s1 + 1) == 0x7373616C635F4E55
      }
             && *((void *)__s1 + 2) == 0x74616C706D65745FLL
             && __s1[24] == 101)
      {
        unint64_t v4 = 0x100004202;
      }
      else if (*(void *)__s1 == 0x535F4741545F5744 {
             && *((void *)__s1 + 1) == 0x6E6F696E755F4E55
      }
             && *((void *)__s1 + 2) == 0x74616C706D65745FLL
             && __s1[24] == 101)
      {
        unint64_t v4 = 0x100004204;
      }
      else
      {
        if (*(void *)__s1 != 0x535F4741545F5744
          || *((void *)__s1 + 1) != 0x635F706D6F5F4E55
          || *((void *)__s1 + 2) != 0x6E75665F646C6968
          || __s1[24] != 99)
        {
          unint64_t v4 = 0;
          goto LABEL_484;
        }
        unint64_t v4 = 0x100004208;
      }
      goto LABEL_1081;
    case 27:
      if (*(void *)__s1 != 0x695F4741545F5744
        || *((void *)__s1 + 1) != 0x5F646574726F706DLL
        || *((void *)__s1 + 2) != 0x746172616C636564
        || *(void *)(__s1 + 19) != 0x6E6F69746172616CLL)
      {
        unint64_t v4 = 0;
        goto LABEL_310;
      }
      unint64_t v4 = 0x100000008;
      goto LABEL_1081;
    case 29:
      if (*(void *)__s1 != 0x755F4741545F5744
        || *((void *)__s1 + 1) != 0x696669636570736ELL
        || *((void *)__s1 + 2) != 0x6D617261705F6465
        || *(void *)(__s1 + 21) != 0x73726574656D6172)
      {
        unint64_t v4 = 0;
        BOOL v90 = 1;
        goto LABEL_343;
      }
      unint64_t v4 = 0x100000018;
      goto LABEL_1081;
    default:
LABEL_105:
      if (a2 == 13 && v6)
      {
        if (*(void *)__s1 == 0x6D5F4741545F5744 && *(void *)(__s1 + 5) == 0x656C75646F6D5F47)
        {
          unint64_t v4 = 0x10000001ELL;
          goto LABEL_1081;
        }
        int v6 = 1;
LABEL_112:
        if (a2 == 13 && v6)
        {
          if (*(void *)__s1 == 0x665F4741545F5744 && *(void *)(__s1 + 5) == 0x646E656972665F47)
          {
            unint64_t v4 = 0x10000002ALL;
            goto LABEL_1081;
          }
          goto LABEL_118;
        }
        goto LABEL_200;
      }
LABEL_126:
      if (a2 == 15 && v6)
      {
        if (*(void *)__s1 == 0x735F4741545F5744 && *(void *)(__s1 + 7) == 0x657079745F746573)
        {
          unint64_t v4 = 0x100000020;
          goto LABEL_1081;
        }
        if (*(void *)__s1 == 0x635F4741545F5744 && *(void *)(__s1 + 7) == 0x746E6174736E6F63)
        {
          unint64_t v4 = 0x100000027;
          goto LABEL_1081;
        }
        if (*(void *)__s1 == 0x6E5F4741545F5744 && *(void *)(__s1 + 7) == 0x7473696C656D616ELL)
        {
          unint64_t v4 = 0x10000002BLL;
          goto LABEL_1081;
        }
        if (*(void *)__s1 == 0x765F4741545F5744 && *(void *)(__s1 + 7) == 0x656C626169726176)
        {
          unint64_t v4 = 0x100000034;
          goto LABEL_1081;
        }
        int v39 = 0;
        int v6 = 1;
        int v40 = 1;
        goto LABEL_210;
      }
LABEL_190:
      if (a2 == 20 && v6)
      {
        if (*(void *)__s1 == 0x735F4741545F5744
          && *((void *)__s1 + 1) == 0x5F65676E61726275
          && *((_DWORD *)__s1 + 4) == 1701869940)
        {
          unint64_t v4 = 0x100000021;
          goto LABEL_1081;
        }
        int v6 = 1;
LABEL_200:
        if (a2 == 20 && v6)
        {
          if (*(void *)__s1 == 0x6E5F4741545F5744
            && *((void *)__s1 + 1) == 0x5F7473696C656D61
            && *((_DWORD *)__s1 + 4) == 1835365481)
          {
            unint64_t v4 = 0x10000002CLL;
            goto LABEL_1081;
          }
          int v39 = 0;
          int v40 = 0;
          goto LABEL_210;
        }
        char v110 = v6 ^ 1;
        if (a2 == 30) {
          char v111 = v6 ^ 1;
        }
        else {
          char v111 = 1;
        }
        if ((v111 & 1) == 0)
        {
          if (*(void *)__s1 == 0x745F4741545F5744
            && *((void *)__s1 + 1) == 0x5F6574616C706D65
            && *((void *)__s1 + 2) == 0x7261705F65707974
            && *(void *)(__s1 + 22) == 0x726574656D617261)
          {
            unint64_t v4 = 0x10000002FLL;
            goto LABEL_1081;
          }
          if (*(void *)__s1 == 0x475F4741545F5744
            && *((void *)__s1 + 1) == 0x5F6C6C61635F554ELL
            && *((void *)__s1 + 2) == 0x7261705F65746973
            && *(void *)(__s1 + 22) == 0x726574656D617261)
          {
            unint64_t v4 = 0x10000410ALL;
            goto LABEL_1081;
          }
          int v103 = 0;
          int v40 = 0;
          int v118 = 0;
          int v119 = 0;
          int v120 = 0;
          int v62 = 0;
          goto LABEL_417;
        }
        if (a2 != 31) {
          char v110 = 1;
        }
        if ((v110 & 1) == 0)
        {
          if (*(void *)__s1 == 0x745F4741545F5744
            && *((void *)__s1 + 1) == 0x5F6574616C706D65
            && *((void *)__s1 + 2) == 0x61705F65756C6176
            && *(void *)(__s1 + 23) == 0x726574656D617261)
          {
            unint64_t v4 = 0x100000030;
            goto LABEL_1081;
          }
          int v62 = 0;
          int v120 = 0;
          int v40 = 0;
          LOBYTE(v103) = 0;
          goto LABEL_852;
        }
        goto LABEL_597;
      }
      char v104 = v6 ^ 1;
      if (a2 == 16) {
        char v105 = v6 ^ 1;
      }
      else {
        char v105 = 1;
      }
      if (v105)
      {
        if (a2 != 18) {
          char v104 = 1;
        }
        if ((v104 & 1) == 0)
        {
          if (*(void *)__s1 == 0x635F4741545F5744
            && *((void *)__s1 + 1) == 0x6F6C625F68637461
            && *((_WORD *)__s1 + 8) == 27491)
          {
            unint64_t v4 = 0x100000025;
            goto LABEL_1081;
          }
          if (*(void *)__s1 == 0x705F4741545F5744
            && *((void *)__s1 + 1) == 0x79745F64656B6361
            && *((_WORD *)__s1 + 8) == 25968)
          {
            unint64_t v4 = 0x10000002DLL;
            goto LABEL_1081;
          }
          if (*(void *)__s1 == 0x745F4741545F5744
            && *((void *)__s1 + 1) == 0x79745F6E776F7268
            && *((_WORD *)__s1 + 8) == 25968)
          {
            unint64_t v4 = 0x100000031;
            goto LABEL_1081;
          }
          if (*(void *)__s1 == 0x735F4741545F5744
            && *((void *)__s1 + 1) == 0x79745F6465726168
            && *((_WORD *)__s1 + 8) == 25968)
          {
            unint64_t v4 = 0x100000040;
            goto LABEL_1081;
          }
          if (*(void *)__s1 == 0x615F4741545F5744
            && *((void *)__s1 + 1) == 0x79745F63696D6F74
            && *((_WORD *)__s1 + 8) == 25968)
          {
            unint64_t v4 = 0x100000047;
            goto LABEL_1081;
          }
LABEL_484:
          BOOL v90 = (v4 & 0x100000000) == 0;
LABEL_485:
          if (a2 == 22 && v90)
          {
            if (*(void *)__s1 == 0x4C5F4741545F5744
              && *((void *)__s1 + 1) == 0x6F6E6E615F4D564CLL
              && *(void *)(__s1 + 14) == 0x6E6F697461746F6ELL)
            {
              unint64_t v4 = 0x100006000;
              goto LABEL_1081;
            }
            if (*(void *)__s1 == 0x555F4741545F5744
              && *((void *)__s1 + 1) == 0x65726168735F4350
              && *(void *)(__s1 + 14) == 0x657079745F646572)
            {
              unint64_t v4 = 0x100008765;
              goto LABEL_1081;
            }
            uint64_t v142 = 0x100008766;
            BOOL v143 = (*(void *)__s1 ^ 0x555F4741545F5744 | *((void *)__s1 + 1) ^ 0x63697274735F4350 | *(void *)(__s1 + 14) ^ 0x657079745F746369) == 0;
            goto LABEL_502;
          }
          char v163 = !v90;
          char v164 = a2 != 20 || !v90;
          if ((v164 & 1) == 0)
          {
            if (*(void *)__s1 != 0x475F4741545F5744
              || *((void *)__s1 + 1) != 0x73656D616E5F5348
              || *((_DWORD *)__s1 + 4) != 1701011824)
            {
              goto LABEL_1081;
            }
            uint64_t v160 = 32772;
            goto LABEL_590;
          }
          if (a2 != 26) {
            char v163 = 1;
          }
          if ((v163 & 1) == 0)
          {
            if (*(void *)__s1 == 0x475F4741545F5744
              && *((void *)__s1 + 1) == 0x676E6973755F5348
              && *((void *)__s1 + 2) == 0x617073656D616E5FLL
              && *((_WORD *)__s1 + 12) == 25955)
            {
              unint64_t v4 = 0x100008005;
            }
            else if (*(void *)__s1 == 0x505F4741545F5744 {
                   && *((void *)__s1 + 1) == 0x7265746E695F4947
            }
                   && *((void *)__s1 + 2) == 0x6F6C625F65636166
                   && *((_WORD *)__s1 + 12) == 27491)
            {
              unint64_t v4 = 0x10000A020;
            }
            goto LABEL_1081;
          }
          char v201 = !v90;
          char v202 = a2 != 31 || !v90;
          if ((v202 & 1) == 0)
          {
            uint64_t v96 = *(void *)__s1 ^ 0x475F4741545F5744 | *((void *)__s1 + 1) ^ 0x6C706D65745F5348 | *((void *)__s1 + 2) ^ 0x706D65745F657461 | *(void *)(__s1 + 23) ^ 0x6D617261705F6C70;
            uint64_t v97 = 0x100008007;
            goto LABEL_346;
          }
          if (a2 != 18) {
            char v201 = 1;
          }
          if ((v201 & 1) == 0)
          {
            uint64_t v96 = *(void *)__s1 ^ 0x555F4741545F5744 | *((void *)__s1 + 1) ^ 0x78616C65725F4350 | *((unsigned __int16 *)__s1 + 8) ^ 0x6465;
            uint64_t v97 = 0x100008767;
            goto LABEL_346;
          }
          char v252 = !v90;
          char v253 = a2 != 21 || !v90;
          if ((v253 & 1) == 0)
          {
            BOOL v143 = (*(void *)__s1 ^ 0x505F4741545F5744 | *((void *)__s1 + 1) ^ 0x696A6E616B5F4947 | *(void *)(__s1 + 13) ^ 0x657079745F696A6ELL) == 0;
            uint64_t v142 = 0x10000A000;
LABEL_502:
            if (v143) {
              unint64_t v4 = v142;
            }
            goto LABEL_1081;
          }
          if (a2 != 23) {
            char v252 = 1;
          }
          if ((v252 & 1) == 0)
          {
            uint64_t v96 = *(void *)__s1 ^ 0x425F4741545F5744 | *((void *)__s1 + 1) ^ 0x705F444E414C524FLL | *(void *)(__s1 + 15) ^ 0x79747265706F7270;
            uint64_t v97 = 0x10000B000;
LABEL_346:
            if (!v96) {
              unint64_t v4 = v97;
            }
            goto LABEL_1081;
          }
          char v255 = !v90;
          char v256 = a2 != 35 || !v90;
          if ((v256 & 1) == 0)
          {
            if (memcmp(__s1, "DW_TAG_BORLAND_Delphi_dynamic_array", 0x23uLL)) {
              goto LABEL_1081;
            }
            uint64_t v159 = 45057;
            goto LABEL_586;
          }
          if (a2 != 25) {
            char v255 = 1;
          }
          if (v255)
          {
LABEL_343:
            if (a2 != 29 || !v90) {
              goto LABEL_1081;
            }
            uint64_t v96 = *(void *)__s1 ^ 0x425F4741545F5744 | *((void *)__s1 + 1) ^ 0x445F444E414C524FLL | *((void *)__s1 + 2) ^ 0x61765F6968706C65 | *(void *)(__s1 + 21) ^ 0x746E61697261765FLL;
            uint64_t v97 = 0x10000B004;
            goto LABEL_346;
          }
          if (*(void *)__s1 != 0x425F4741545F5744
            || *((void *)__s1 + 1) != 0x445F444E414C524FLL
            || *((void *)__s1 + 2) != 0x65735F6968706C65
            || __s1[24] != 116)
          {
            goto LABEL_1081;
          }
          uint64_t v254 = 45057;
LABEL_1053:
          unint64_t v4 = v254 & 0xFFFF0000FFFFFFFDLL | 0x100000002;
          goto LABEL_1081;
        }
LABEL_505:
        if (a2 == 17 && v6)
        {
          if (*(void *)__s1 == 0x635F4741545F5744
            && *((void *)__s1 + 1) == 0x7079745F74736E6FLL
            && __s1[16] == 101)
          {
            unint64_t v4 = 0x100000026;
            goto LABEL_1081;
          }
          if (*(void *)__s1 == 0x655F4741545F5744
            && *((void *)__s1 + 1) == 0x6F746172656D756ELL
            && __s1[16] == 114)
          {
            unint64_t v4 = 0x100000028;
            goto LABEL_1081;
          }
          if (*(void *)__s1 == 0x735F4741545F5744
            && *((void *)__s1 + 1) == 0x6172676F72706275
            && __s1[16] == 109)
          {
            unint64_t v4 = 0x10000002ELL;
            goto LABEL_1081;
          }
LABEL_597:
          int v39 = 0;
          goto LABEL_598;
        }
        goto LABEL_112;
      }
      if (*(void *)__s1 == 0x775F4741545F5744 && *((void *)__s1 + 1) == 0x746D74735F687469)
      {
        unint64_t v4 = 0x100000022;
        goto LABEL_1081;
      }
      if (*(void *)__s1 == 0x625F4741545F5744 && *((void *)__s1 + 1) == 0x657079745F657361)
      {
        unint64_t v4 = 0x100000024;
        goto LABEL_1081;
      }
      if (*(void *)__s1 == 0x665F4741545F5744 && *((void *)__s1 + 1) == 0x657079745F656C69)
      {
        unint64_t v4 = 0x100000029;
        goto LABEL_1081;
      }
      if (*(void *)__s1 == 0x745F4741545F5744 && *((void *)__s1 + 1) == 0x6B636F6C625F7972)
      {
        unint64_t v4 = 0x100000032;
        goto LABEL_1081;
      }
      int v6 = 1;
      int v39 = 1;
LABEL_598:
      int v40 = 0;
      if (a2 == 19 && v6)
      {
        if (*(void *)__s1 == 0x765F4741545F5744
          && *((void *)__s1 + 1) == 0x705F746E61697261
          && *(void *)(__s1 + 11) == 0x747261705F746E61)
        {
          unint64_t v4 = 0x100000033;
          goto LABEL_1081;
        }
        int v40 = 0;
        int v62 = 0;
        int v6 = 1;
        int v61 = 1;
        if (!v39) {
          goto LABEL_433;
        }
        goto LABEL_429;
      }
LABEL_210:
      if (a2 == 20 && v6)
      {
        if (*(void *)__s1 == 0x765F4741545F5744
          && *((void *)__s1 + 1) == 0x5F656C6974616C6FLL
          && *((_DWORD *)__s1 + 4) == 1701869940)
        {
          unint64_t v4 = 0x100000035;
          goto LABEL_1081;
        }
        if (*(void *)__s1 == 0x725F4741545F5744
          && *((void *)__s1 + 1) == 0x5F74636972747365
          && *((_DWORD *)__s1 + 4) == 1701869940)
        {
          unint64_t v4 = 0x100000037;
          goto LABEL_1081;
        }
        int v61 = 0;
        int v6 = 1;
        int v62 = 1;
        if (!v39) {
          goto LABEL_433;
        }
        goto LABEL_429;
      }
LABEL_349:
      if (a2 == 22 && v6)
      {
        if (*(void *)__s1 == 0x645F4741545F5744
          && *((void *)__s1 + 1) == 0x6F72705F66726177
          && *(void *)(__s1 + 14) == 0x6572756465636F72)
        {
          unint64_t v4 = 0x100000036;
          goto LABEL_1081;
        }
        int v61 = 0;
        int v62 = 0;
        int v6 = 1;
        if (!v39) {
          goto LABEL_433;
        }
        goto LABEL_429;
      }
LABEL_360:
      int v61 = 0;
      if (a2 == 21 && v6)
      {
        if (*(void *)__s1 == 0x695F4741545F5744
          && *((void *)__s1 + 1) == 0x656361667265746ELL
          && *(void *)(__s1 + 13) == 0x657079745F656361)
        {
          unint64_t v4 = 0x100000038;
          goto LABEL_1081;
        }
        int v102 = 0;
        int v62 = 0;
        int v6 = 1;
        int v103 = 1;
        goto LABEL_632;
      }
      int v62 = 0;
      if (v39)
      {
LABEL_429:
        if (*(void *)__s1 == 0x6E5F4741545F5744 && *((void *)__s1 + 1) == 0x6563617073656D61)
        {
          unint64_t v4 = 0x100000039;
          goto LABEL_1081;
        }
      }
LABEL_433:
      char v124 = v6 ^ 1;
      if (a2 == 22) {
        char v125 = v6 ^ 1;
      }
      else {
        char v125 = 1;
      }
      if (v125)
      {
        if (a2 != 23) {
          char v124 = 1;
        }
        if ((v124 & 1) == 0)
        {
          BOOL v150 = *(void *)__s1 == 0x755F4741545F5744 && *((void *)__s1 + 1) == 0x696669636570736ELL;
          if (v150 && *(void *)(__s1 + 15) == 0x657079745F646569)
          {
            unint64_t v4 = 0x10000003BLL;
            goto LABEL_1081;
          }
        }
      }
      else if (*(void *)__s1 == 0x695F4741545F5744 {
             && *((void *)__s1 + 1) == 0x5F646574726F706DLL
      }
             && *(void *)(__s1 + 14) == 0x656C75646F6D5F64)
      {
        unint64_t v4 = 0x10000003ALL;
        goto LABEL_1081;
      }
      if (v61)
      {
        if (*(void *)__s1 == 0x705F4741545F5744
          && *((void *)__s1 + 1) == 0x755F6C6169747261
          && *(void *)(__s1 + 11) == 0x74696E755F6C6169)
        {
          unint64_t v4 = 0x10000003CLL;
          goto LABEL_1081;
        }
        int v103 = 0;
        int v102 = 1;
      }
      else if (v62)
      {
        if (*(void *)__s1 == 0x695F4741545F5744
          && *((void *)__s1 + 1) == 0x5F646574726F706DLL
          && *((_DWORD *)__s1 + 4) == 1953066613)
        {
          unint64_t v4 = 0x10000003DLL;
          goto LABEL_1081;
        }
        int v103 = 0;
        int v102 = 0;
        int v62 = 1;
      }
      else
      {
        int v103 = 0;
        int v102 = 0;
      }
LABEL_632:
      if (v39)
      {
        if (*(void *)__s1 == 0x635F4741545F5744 && *((void *)__s1 + 1) == 0x6E6F697469646E6FLL)
        {
          unint64_t v4 = 0x10000003FLL;
          goto LABEL_1081;
        }
        if (*(void *)__s1 == 0x745F4741545F5744 && *((void *)__s1 + 1) == 0x74696E755F657079)
        {
          unint64_t v4 = 0x100000041;
          goto LABEL_1081;
        }
      }
      if (a2 == 28) {
        int v118 = v6;
      }
      else {
        int v118 = 0;
      }
      if (v118 == 1)
      {
        if (*(void *)__s1 == 0x725F4741545F5744
          && *((void *)__s1 + 1) == 0x65725F65756C6176
          && *((void *)__s1 + 2) == 0x5F65636E65726566
          && *((_DWORD *)__s1 + 6) == 1701869940)
        {
          unint64_t v4 = 0x100000042;
          goto LABEL_1081;
        }
      }
      else if (v103)
      {
        if (*(void *)__s1 == 0x745F4741545F5744
          && *((void *)__s1 + 1) == 0x5F6574616C706D65
          && *(void *)(__s1 + 13) == 0x7361696C615F6574)
        {
          unint64_t v4 = 0x100000043;
          goto LABEL_1081;
        }
        int v103 = 1;
      }
      if (v102)
      {
        if (*(void *)__s1 == 0x635F4741545F5744
          && *((void *)__s1 + 1) == 0x745F79617272616FLL
          && *(void *)(__s1 + 11) == 0x657079745F796172)
        {
          unint64_t v4 = 0x100000044;
          goto LABEL_1081;
        }
        if (*(void *)__s1 == 0x645F4741545F5744
          && *((void *)__s1 + 1) == 0x745F63696D616E79
          && *(void *)(__s1 + 11) == 0x657079745F63696DLL)
        {
          unint64_t v4 = 0x100000046;
          goto LABEL_1081;
        }
      }
      else
      {
        char v178 = v6 ^ 1;
        if (a2 != 23) {
          char v178 = 1;
        }
        if ((v178 & 1) == 0)
        {
          BOOL v179 = *(void *)__s1 == 0x675F4741545F5744 && *((void *)__s1 + 1) == 0x735F636972656E65;
          if (v179 && *(void *)(__s1 + 15) == 0x65676E6172627573)
          {
            unint64_t v4 = 0x100000045;
            goto LABEL_1081;
          }
        }
      }
      if (v39)
      {
        if (*(void *)__s1 == 0x635F4741545F5744 && *((void *)__s1 + 1) == 0x657469735F6C6C61)
        {
          unint64_t v4 = 0x100000048;
          goto LABEL_1081;
        }
      }
      if (a2 == 26) {
        int v119 = v6;
      }
      else {
        int v119 = 0;
      }
      if (v119 == 1)
      {
        if (*(void *)__s1 == 0x635F4741545F5744
          && *((void *)__s1 + 1) == 0x657469735F6C6C61
          && *((void *)__s1 + 2) == 0x74656D617261705FLL
          && *((_WORD *)__s1 + 12) == 29285)
        {
          unint64_t v4 = 0x100000049;
          goto LABEL_1081;
        }
      }
      else if (v62)
      {
        if (*(void *)__s1 == 0x735F4741545F5744
          && *((void *)__s1 + 1) == 0x5F6E6F74656C656BLL
          && *((_DWORD *)__s1 + 4) == 1953066613)
        {
          unint64_t v4 = 0x10000004ALL;
          goto LABEL_1081;
        }
        int v62 = 1;
      }
      if (v103)
      {
        if (*(void *)__s1 == 0x695F4741545F5744
          && *((void *)__s1 + 1) == 0x656C626174756D6DLL
          && *(void *)(__s1 + 13) == 0x657079745F656C62)
        {
          unint64_t v4 = 0x10000004BLL;
          goto LABEL_1081;
        }
      }
      else if (v39)
      {
        if (*(void *)__s1 == 0x4D5F4741545F5744 && *((void *)__s1 + 1) == 0x706F6F6C5F535049)
        {
          uint64_t v160 = 16513;
          goto LABEL_590;
        }
        int v39 = 1;
      }
      if (v102)
      {
        if (*(void *)__s1 == 0x665F4741545F5744
          && *((void *)__s1 + 1) == 0x616C5F74616D726FLL
          && *(void *)(__s1 + 11) == 0x6C6562616C5F7461)
        {
          unint64_t v4 = 0x100004101;
          goto LABEL_1081;
        }
      }
      else
      {
        char v203 = v6 ^ 1;
        if (a2 != 24) {
          char v203 = 1;
        }
        if ((v203 & 1) == 0)
        {
          BOOL v204 = *(void *)__s1 == 0x665F4741545F5744 && *((void *)__s1 + 1) == 0x5F6E6F6974636E75;
          if (v204 && *((void *)__s1 + 2) == 0x6574616C706D6574)
          {
            unint64_t v4 = 0x100004102;
            goto LABEL_1081;
          }
        }
      }
      if (v103)
      {
        if (*(void *)__s1 == 0x635F4741545F5744
          && *((void *)__s1 + 1) == 0x6D65745F7373616CLL
          && *(void *)(__s1 + 13) == 0x6574616C706D6574)
        {
          unint64_t v4 = 0x100004103;
          goto LABEL_1081;
        }
        if (!v39)
        {
          int v103 = 1;
          goto LABEL_1008;
        }
      }
      else
      {
        if (!v39)
        {
          int v103 = 0;
          goto LABEL_1008;
        }
        if (*(void *)__s1 == 0x475F4741545F5744 && *((void *)__s1 + 1) == 0x4C434E49425F554ELL)
        {
          unint64_t v4 = 0x100004104;
          goto LABEL_1081;
        }
      }
      if (*(void *)__s1 == 0x475F4741545F5744 && *((void *)__s1 + 1) == 0x4C434E49455F554ELL)
      {
        unint64_t v4 = 0x100004105;
        goto LABEL_1081;
      }
LABEL_1008:
      char v245 = v6 ^ 1;
      if (a2 == 34) {
        char v246 = v6 ^ 1;
      }
      else {
        char v246 = 1;
      }
      if (v246)
      {
        if (a2 != 32) {
          char v245 = 1;
        }
        if ((v245 & 1) == 0)
        {
          if (*(void *)__s1 == 0x475F4741545F5744
            && *((void *)__s1 + 1) == 0x616D726F665F554ELL
            && *((void *)__s1 + 2) == 0x656D617261705F6CLL
            && *((void *)__s1 + 3) == 0x6B6361705F726574)
          {
            unint64_t v4 = 0x100004108;
            goto LABEL_1081;
          }
          int v120 = 1;
          goto LABEL_417;
        }
      }
      else
      {
        if (!memcmp(__s1, "DW_TAG_GNU_template_template_param", 0x22uLL))
        {
          unint64_t v4 = 0x100004106;
          goto LABEL_1081;
        }
        if (!memcmp(__s1, "DW_TAG_GNU_template_parameter_pack", 0x22uLL))
        {
          unint64_t v4 = 0x100004107;
          goto LABEL_1081;
        }
      }
      if (v62)
      {
        if (*(void *)__s1 == 0x475F4741545F5744
          && *((void *)__s1 + 1) == 0x5F6C6C61635F554ELL
          && *((_DWORD *)__s1 + 4) == 1702127987)
        {
          unint64_t v4 = 0x100004109;
          goto LABEL_1081;
        }
        int v120 = 0;
        int v62 = 1;
      }
      else
      {
        int v120 = 0;
      }
LABEL_417:
      if (v103)
      {
        if (*(void *)__s1 == 0x415F4741545F5744
          && *((void *)__s1 + 1) == 0x6F72705F454C5050
          && *(void *)(__s1 + 13) == 0x79747265706F7270)
        {
          unint64_t v4 = 0x100004200;
          goto LABEL_1081;
        }
        if ((v118 & 1) == 0)
        {
          LOBYTE(v103) = 1;
          goto LABEL_840;
        }
      }
      else if (!v118)
      {
        LOBYTE(v103) = 0;
        goto LABEL_840;
      }
      if (*(void *)__s1 == 0x535F4741545F5744
        && *((void *)__s1 + 1) == 0x74636E75665F4E55
        && *((void *)__s1 + 2) == 0x706D65745F6E6F69
        && *((_DWORD *)__s1 + 6) == 1702125932)
      {
        unint64_t v4 = 0x100004201;
        goto LABEL_1081;
      }
LABEL_840:
      if (!v119)
      {
LABEL_852:
        int v211 = 0;
        goto LABEL_853;
      }
      if (*(void *)__s1 == 0x535F4741545F5744
        && *((void *)__s1 + 1) == 0x63757274735F4E55
        && *((void *)__s1 + 2) == 0x616C706D65745F74
        && *((_WORD *)__s1 + 12) == 25972)
      {
        unint64_t v4 = 0x100004203;
        goto LABEL_1081;
      }
      int v211 = 1;
LABEL_853:
      if (a2 == 31 && v6)
      {
        if (*(void *)__s1 == 0x535F4741545F5744
          && *((void *)__s1 + 1) == 0x7269646E695F4E55
          && *((void *)__s1 + 2) == 0x65686E695F746365
          && *(void *)(__s1 + 23) == 0x65636E6174697265)
        {
          unint64_t v4 = 0x100004205;
          goto LABEL_1081;
        }
      }
      else if (v62)
      {
        if (*(void *)__s1 == 0x535F4741545F5744
          && *((void *)__s1 + 1) == 0x6665646F635F4E55
          && *((_DWORD *)__s1 + 4) == 1936154988)
        {
          unint64_t v4 = 0x100004206;
          goto LABEL_1081;
        }
        int v62 = 1;
      }
      if (v103)
      {
        if (*(void *)__s1 == 0x535F4741545F5744
          && *((void *)__s1 + 1) == 0x706F6D656D5F4E55
          && *(void *)(__s1 + 13) == 0x6F666E695F706F6DLL)
        {
          unint64_t v4 = 0x100004207;
          goto LABEL_1081;
        }
        if (!v211) {
          goto LABEL_885;
        }
      }
      else if ((v211 & 1) == 0)
      {
LABEL_885:
        if (v62)
        {
          BOOL v219 = *(void *)__s1 == 0x535F4741545F5744 && *((void *)__s1 + 1) == 0x5F726F74645F4E55;
          if (v219 && *((_DWORD *)__s1 + 4) == 1868983913)
          {
            unint64_t v4 = 0x10000420ALL;
            goto LABEL_1081;
          }
        }
        goto LABEL_906;
      }
      if (*(void *)__s1 == 0x535F4741545F5744
        && *((void *)__s1 + 1) == 0x5F697474725F4E55
        && *((void *)__s1 + 2) == 0x7470697263736564
        && *((_WORD *)__s1 + 12) == 29295)
      {
        unint64_t v4 = 0x100004209;
        goto LABEL_1081;
      }
LABEL_906:
      if (v40)
      {
        if (*(void *)__s1 == 0x535F4741545F5744 && *(void *)(__s1 + 7) == 0x726F74645F4E5553)
        {
          unint64_t v4 = 0x10000420BLL;
          goto LABEL_1081;
        }
      }
      else
      {
        char v225 = v6 ^ 1;
        if (a2 != 24) {
          char v225 = 1;
        }
        if ((v225 & 1) == 0)
        {
          BOOL v226 = *(void *)__s1 == 0x535F4741545F5744 && *((void *)__s1 + 1) == 0x695F3039665F4E55;
          if (v226 && *((void *)__s1 + 2) == 0x656361667265746ELL)
          {
            unint64_t v4 = 0x10000420CLL;
            goto LABEL_1081;
          }
        }
      }
      if (v120)
      {
        if (*(void *)__s1 == 0x535F4741545F5744
          && *((void *)__s1 + 1) == 0x7274726F665F4E55
          && *((void *)__s1 + 2) == 0x735F7861765F6E61
          && *((void *)__s1 + 3) == 0x6572757463757274)
        {
          unint64_t v4 = 0x10000420DLL;
          goto LABEL_1081;
        }
        goto LABEL_934;
      }
LABEL_118:
      if (a2 == 13 && v6)
      {
        if (*(void *)__s1 == 0x535F4741545F5744 && *(void *)(__s1 + 5) == 0x69685F4E55535F47)
        {
          unint64_t v4 = 0x1000042FFLL;
          goto LABEL_1081;
        }
        goto LABEL_320;
      }
LABEL_934:
      if (a2 == 23 && v6)
      {
        if (*(void *)__s1 == 0x415F4741545F5744
          && *((void *)__s1 + 1) == 0x69635F4D5549544CLL
          && *(void *)(__s1 + 15) == 0x657079745F637269)
        {
          uint64_t v160 = 20737;
          goto LABEL_590;
        }
        goto LABEL_320;
      }
      char v233 = v6 ^ 1;
      if (a2 != 27) {
        char v233 = 1;
      }
      if (v233)
      {
        BOOL v90 = (v4 & 0x100000000) == 0;
        if (a2 == 28 && (v4 & 0x100000000) == 0)
        {
          if (*(void *)__s1 == 0x415F4741545F5744
            && *((void *)__s1 + 1) == 0x65725F4D5549544CLL
            && *((void *)__s1 + 2) == 0x5F79727261635F76
            && *((_DWORD *)__s1 + 6) == 1701869940)
          {
            uint64_t v254 = 20737;
          }
          else
          {
            if (*(void *)__s1 != 0x475F4741545F5744
              || *((void *)__s1 + 1) != 0x676E6973755F5348
              || *((void *)__s1 + 2) != 0x6172616C6365645FLL
              || *((_DWORD *)__s1 + 6) != 1852795252)
            {
              if (*(void *)__s1 != 0x425F4741545F5744
                || *((void *)__s1 + 1) != 0x445F444E414C524FLL
                || *((void *)__s1 + 2) != 0x74735F6968706C65
                || *((_DWORD *)__s1 + 6) != 1735289202)
              {
                goto LABEL_1081;
              }
              uint64_t v160 = 45057;
LABEL_590:
              unint64_t v4 = v160 & 0xFFFF0000FFFFFFFFLL | 0x100000000;
              goto LABEL_1081;
            }
            uint64_t v254 = 32772;
          }
          goto LABEL_1053;
        }
        goto LABEL_321;
      }
LABEL_310:
      if (*(void *)__s1 != 0x415F4741545F5744
        || *((void *)__s1 + 1) != 0x776D5F4D5549544CLL
        || *((void *)__s1 + 2) != 0x745F637269635F61
        || *(void *)(__s1 + 19) != 0x657079745F637269)
      {
LABEL_320:
        BOOL v90 = (v4 & 0x100000000) == 0;
LABEL_321:
        if (a2 == 17 && v90)
        {
          if (*(void *)__s1 == 0x415F4741545F5744
            && *((void *)__s1 + 1) == 0x6F725F4D5549544CLL
            && __s1[16] == 109)
          {
            unint64_t v4 = 0x100005111;
          }
          goto LABEL_1081;
        }
        goto LABEL_485;
      }
      uint64_t v159 = 20737;
LABEL_586:
      unint64_t v5 = v159 & 0xFFFF0000FFFFFFFFLL | 0x100000000;
LABEL_587:
      unint64_t v4 = v5 + 1;
LABEL_1081:
      if ((v4 & 0x300000000) != 0) {
        return v4;
      }
      else {
        return 0xFFFFFFFFLL;
      }
  }
}

uint64_t llvm::dwarf::TagVersion(unsigned int a1)
{
  if (a1 > 0x4B) {
    return 0;
  }
  else {
    return dword_1CFAC4D28[(__int16)a1];
  }
}

uint64_t llvm::dwarf::TagVendor(int a1)
{
  if (a1 > 17150)
  {
    if (a1 > 34660)
    {
      if (a1 >= 40960)
      {
        switch(a1)
        {
          case 45056:
          case 45057:
          case 45058:
          case 45059:
          case 45060:
            uint64_t result = 2;
            break;
          default:
            if (a1 == 40992) {
              unsigned int v11 = 15;
            }
            else {
              unsigned int v11 = 0;
            }
            if (a1 == 40960) {
              uint64_t result = 15;
            }
            else {
              uint64_t result = v11;
            }
            break;
        }
      }
      else
      {
        int v7 = 34661;
        unsigned int v8 = 17;
        if (a1 == 34663) {
          int v9 = 17;
        }
        else {
          int v9 = 0;
        }
        if (a1 == 34662) {
          unsigned int v10 = 17;
        }
        else {
          unsigned int v10 = v9;
        }
LABEL_40:
        if (a1 == v7) {
          return v8;
        }
        else {
          return v10;
        }
      }
    }
    else if (a1 > 20752)
    {
      switch(a1)
      {
        case 32772:
        case 32773:
        case 32774:
        case 32775:
          uint64_t result = 10;
          break;
        default:
          int v7 = 20753;
          unsigned int v8 = 8;
          if (a1 == 24576) {
            unsigned int v10 = 5;
          }
          else {
            unsigned int v10 = 0;
          }
          goto LABEL_40;
      }
    }
    else
    {
      if (a1 == 20739) {
        int v2 = 8;
      }
      else {
        int v2 = 0;
      }
      if (a1 == 20738) {
        int v3 = 8;
      }
      else {
        int v3 = v2;
      }
      if (a1 == 20737) {
        unsigned int v4 = 8;
      }
      else {
        unsigned int v4 = v3;
      }
      if (a1 == 17152) {
        int v5 = 5;
      }
      else {
        int v5 = 0;
      }
      if (a1 == 17151) {
        unsigned int v6 = 16;
      }
      else {
        unsigned int v6 = v5;
      }
      if (a1 <= 20736) {
        return v6;
      }
      else {
        return v4;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 16896:
        uint64_t result = 1;
        break;
      case 16897:
      case 16898:
      case 16899:
      case 16900:
      case 16901:
      case 16902:
      case 16903:
      case 16904:
      case 16905:
      case 16906:
      case 16907:
      case 16908:
      case 16909:
        uint64_t result = 16;
        break;
      default:
        switch(a1)
        {
          case 16641:
          case 16642:
          case 16643:
          case 16644:
          case 16645:
          case 16646:
          case 16647:
          case 16648:
          case 16649:
          case 16650:
            uint64_t result = 3;
            break;
          default:
            if (a1 == 16513) {
              uint64_t result = 6;
            }
            else {
              uint64_t result = 0;
            }
            break;
        }
        break;
    }
  }
  return result;
}

const char *llvm::dwarf::ChildrenString(llvm::dwarf *this)
{
  int v1 = "DW_CHILDREN_yes";
  if (this != 1) {
    int v1 = 0;
  }
  if (this) {
    return v1;
  }
  else {
    return "DW_CHILDREN_no";
  }
}

const char *llvm::dwarf::AttributeString(llvm::dwarf *this)
{
  int v1 = (int)this;
  uint64_t result = 0;
  if (v1 > 2055)
  {
    if (v1 <= 15120)
    {
      if (v1 > 8704)
      {
        if (v1 > 14654)
        {
          if (v1 > 14847)
          {
            if (v1 == 14848) {
              return "DW_AT_PGI_lbase";
            }
            unsigned int v4 = "DW_AT_PGI_soffset";
            int v5 = 14849;
            BOOL v6 = v1 == 14850;
            int v7 = "DW_AT_PGI_lstride";
          }
          else
          {
            unsigned int v4 = "DW_AT_IBM_home_location";
            int v5 = 14655;
            BOOL v6 = v1 == 14656;
            int v7 = "DW_AT_IBM_alt_srcview";
          }
LABEL_206:
          if (!v6) {
            int v7 = 0;
          }
          if (v1 == v5) {
            return v4;
          }
          else {
            return v7;
          }
        }
        else if (v1 > 10495)
        {
          if (v1 == 12816)
          {
            return "DW_AT_UPC_threads_scaled";
          }
          else if (v1 == 14654)
          {
            return "DW_AT_IBM_wsa_addr";
          }
          else
          {
            return 0;
          }
        }
        else
        {
          switch(v1)
          {
            case 8705:
              uint64_t result = "DW_AT_SUN_template";
              break;
            case 8706:
              uint64_t result = "DW_AT_SUN_alignment";
              break;
            case 8707:
              uint64_t result = "DW_AT_SUN_vtable";
              break;
            case 8708:
              uint64_t result = "DW_AT_SUN_count_guarantee";
              break;
            case 8709:
              uint64_t result = "DW_AT_SUN_command_line";
              break;
            case 8710:
              uint64_t result = "DW_AT_SUN_vbase";
              break;
            case 8711:
              uint64_t result = "DW_AT_SUN_compile_options";
              break;
            case 8712:
              uint64_t result = "DW_AT_SUN_language";
              break;
            case 8713:
              uint64_t result = "DW_AT_SUN_browser_file";
              break;
            case 8714:
            case 8715:
            case 8716:
            case 8717:
            case 8718:
            case 8719:
            case 8730:
            case 8731:
            case 8732:
            case 8733:
            case 8734:
            case 8735:
            case 8751:
              return result;
            case 8720:
              uint64_t result = "DW_AT_SUN_vtable_abi";
              break;
            case 8721:
              uint64_t result = "DW_AT_SUN_func_offsets";
              break;
            case 8722:
              uint64_t result = "DW_AT_SUN_cf_kind";
              break;
            case 8723:
              uint64_t result = "DW_AT_SUN_vtable_index";
              break;
            case 8724:
              uint64_t result = "DW_AT_SUN_omp_tpriv_addr";
              break;
            case 8725:
              uint64_t result = "DW_AT_SUN_omp_child_func";
              break;
            case 8726:
              uint64_t result = "DW_AT_SUN_func_offset";
              break;
            case 8727:
              uint64_t result = "DW_AT_SUN_memop_type_ref";
              break;
            case 8728:
              uint64_t result = "DW_AT_SUN_profile_id";
              break;
            case 8729:
              uint64_t result = "DW_AT_SUN_memop_signature";
              break;
            case 8736:
              uint64_t result = "DW_AT_SUN_obj_dir";
              break;
            case 8737:
              uint64_t result = "DW_AT_SUN_obj_file";
              break;
            case 8738:
              uint64_t result = "DW_AT_SUN_original_name";
              break;
            case 8739:
              uint64_t result = "DW_AT_SUN_hwcprof_signature";
              break;
            case 8740:
              uint64_t result = "DW_AT_SUN_amd64_parmdump";
              break;
            case 8741:
              uint64_t result = "DW_AT_SUN_part_link_name";
              break;
            case 8742:
              uint64_t result = "DW_AT_SUN_link_name";
              break;
            case 8743:
              uint64_t result = "DW_AT_SUN_pass_with_const";
              break;
            case 8744:
              uint64_t result = "DW_AT_SUN_return_with_const";
              break;
            case 8745:
              uint64_t result = "DW_AT_SUN_import_by_name";
              break;
            case 8746:
              uint64_t result = "DW_AT_SUN_90_pointer";
              break;
            case 8747:
              uint64_t result = "DW_AT_SUN_pass_by_ref";
              break;
            case 8748:
              uint64_t result = "DW_AT_SUN_f90_allocatable";
              break;
            case 8749:
              uint64_t result = "DW_AT_SUN_f90_assumed_shape_array";
              break;
            case 8750:
              uint64_t result = "DW_AT_SUN_c_vla";
              break;
            case 8752:
              uint64_t result = "DW_AT_SUN_return_value_ptr";
              break;
            case 8753:
              uint64_t result = "DW_AT_SUN_dtor_start";
              break;
            case 8754:
              uint64_t result = "DW_AT_SUN_dtor_length";
              break;
            case 8755:
              uint64_t result = "DW_AT_SUN_dtor_state_initial";
              break;
            case 8756:
              uint64_t result = "DW_AT_SUN_dtor_state_final";
              break;
            case 8757:
              uint64_t result = "DW_AT_SUN_dtor_state_deltas";
              break;
            case 8758:
              uint64_t result = "DW_AT_SUN_import_by_lname";
              break;
            case 8759:
              uint64_t result = "DW_AT_SUN_f90_use_only";
              break;
            case 8760:
              uint64_t result = "DW_AT_SUN_namelist_spec";
              break;
            case 8761:
              uint64_t result = "DW_AT_SUN_is_omp_child_func";
              break;
            case 8762:
              uint64_t result = "DW_AT_SUN_fortran_main_alias";
              break;
            case 8763:
              uint64_t result = "DW_AT_SUN_fortran_based";
              break;
            default:
              JUMPOUT(0);
          }
        }
      }
      else if (v1 <= 8337)
      {
        if (v1 == 2056)
        {
          return "DW_AT_GHS_using_declaration";
        }
        else
        {
          switch(v1)
          {
            case 8323:
              uint64_t result = "DW_AT_GHS_rsm";
              break;
            case 8325:
              uint64_t result = "DW_AT_GHS_frsm";
              break;
            case 8326:
              uint64_t result = "DW_AT_GHS_frames";
              break;
            case 8327:
              uint64_t result = "DW_AT_GHS_rso";
              break;
            default:
              return result;
          }
        }
      }
      else
      {
        switch(v1)
        {
          case 8449:
            uint64_t result = "DW_AT_sf_names";
            break;
          case 8450:
            uint64_t result = "DW_AT_src_info";
            break;
          case 8451:
            uint64_t result = "DW_AT_mac_info";
            break;
          case 8452:
            uint64_t result = "DW_AT_src_coords";
            break;
          case 8453:
            uint64_t result = "DW_AT_body_begin";
            break;
          case 8454:
            uint64_t result = "DW_AT_body_end";
            break;
          case 8455:
            uint64_t result = "DW_AT_GNU_vector";
            break;
          case 8456:
          case 8457:
          case 8458:
          case 8459:
          case 8460:
          case 8461:
          case 8462:
          case 8475:
          case 8476:
          case 8477:
          case 8478:
          case 8479:
          case 8480:
          case 8481:
          case 8482:
          case 8483:
          case 8484:
          case 8485:
          case 8486:
          case 8487:
          case 8488:
          case 8489:
          case 8490:
          case 8491:
          case 8492:
          case 8493:
          case 8494:
          case 8495:
            return result;
          case 8463:
            uint64_t result = "DW_AT_GNU_odr_signature";
            break;
          case 8464:
            uint64_t result = "DW_AT_GNU_template_name";
            break;
          case 8465:
            uint64_t result = "DW_AT_GNU_call_site_value";
            break;
          case 8466:
            uint64_t result = "DW_AT_GNU_call_site_data_value";
            break;
          case 8467:
            uint64_t result = "DW_AT_GNU_call_site_target";
            break;
          case 8468:
            uint64_t result = "DW_AT_GNU_call_site_target_clobbered";
            break;
          case 8469:
            uint64_t result = "DW_AT_GNU_tail_call";
            break;
          case 8470:
            uint64_t result = "DW_AT_GNU_all_tail_call_sites";
            break;
          case 8471:
            uint64_t result = "DW_AT_GNU_all_call_sites";
            break;
          case 8472:
            uint64_t result = "DW_AT_GNU_all_source_call_sites";
            break;
          case 8473:
            uint64_t result = "DW_AT_GNU_macros";
            break;
          case 8474:
            uint64_t result = "DW_AT_GNU_deleted";
            break;
          case 8496:
            uint64_t result = "DW_AT_GNU_dwo_name";
            break;
          case 8497:
            uint64_t result = "DW_AT_GNU_dwo_id";
            break;
          case 8498:
            uint64_t result = "DW_AT_GNU_ranges_base";
            break;
          case 8499:
            uint64_t result = "DW_AT_GNU_addr_base";
            break;
          case 8500:
            uint64_t result = "DW_AT_GNU_pubnames";
            break;
          case 8501:
            uint64_t result = "DW_AT_GNU_pubtypes";
            break;
          case 8502:
            uint64_t result = "DW_AT_GNU_discriminator";
            break;
          case 8503:
            uint64_t result = "DW_AT_GNU_locviews";
            break;
          case 8504:
            uint64_t result = "DW_AT_GNU_entry_view";
            break;
          default:
            unsigned int v4 = "DW_AT_GHS_subcpu";
            int v5 = 8338;
            BOOL v6 = v1 == 8339;
            int v7 = "DW_AT_GHS_lbrace_line";
            goto LABEL_206;
        }
      }
    }
    else
    {
      switch(v1)
      {
        case 16353:
          uint64_t result = "DW_AT_APPLE_optimized";
          break;
        case 16354:
          uint64_t result = "DW_AT_APPLE_flags";
          break;
        case 16355:
          uint64_t result = "DW_AT_APPLE_isa";
          break;
        case 16356:
          uint64_t result = "DW_AT_APPLE_block";
          break;
        case 16357:
          uint64_t result = "DW_AT_APPLE_major_runtime_vers";
          break;
        case 16358:
          uint64_t result = "DW_AT_APPLE_runtime_class";
          break;
        case 16359:
          uint64_t result = "DW_AT_APPLE_omit_frame_ptr";
          break;
        case 16360:
          uint64_t result = "DW_AT_APPLE_property_name";
          break;
        case 16361:
          uint64_t result = "DW_AT_APPLE_property_getter";
          break;
        case 16362:
          uint64_t result = "DW_AT_APPLE_property_setter";
          break;
        case 16363:
          uint64_t result = "DW_AT_APPLE_property_attribute";
          break;
        case 16364:
          uint64_t result = "DW_AT_APPLE_objc_complete_type";
          break;
        case 16365:
          uint64_t result = "DW_AT_APPLE_property";
          break;
        case 16366:
          uint64_t result = "DW_AT_APPLE_objc_direct";
          break;
        case 16367:
          uint64_t result = "DW_AT_APPLE_sdk";
          break;
        default:
          switch(v1)
          {
            case 15872:
              uint64_t result = "DW_AT_LLVM_include_path";
              break;
            case 15873:
              uint64_t result = "DW_AT_LLVM_config_macros";
              break;
            case 15874:
              uint64_t result = "DW_AT_LLVM_sysroot";
              break;
            case 15875:
              uint64_t result = "DW_AT_LLVM_tag_offset";
              break;
            case 15876:
              uint64_t result = "DW_AT_APPLE_ptrauth_key";
              break;
            case 15877:
              uint64_t result = "DW_AT_APPLE_ptrauth_address_discriminated";
              break;
            case 15878:
              uint64_t result = "DW_AT_APPLE_ptrauth_extra_discriminator";
              break;
            case 15879:
              uint64_t result = "DW_AT_LLVM_apinotes";
              break;
            case 15880:
              uint64_t result = "DW_AT_APPLE_ptrauth_isa_pointer";
              break;
            case 15881:
              uint64_t result = "DW_AT_APPLE_ptrauth_authenticates_null_values";
              break;
            default:
              switch(v1)
              {
                case 15121:
                  uint64_t result = "DW_AT_BORLAND_property_read";
                  break;
                case 15122:
                  uint64_t result = "DW_AT_BORLAND_property_write";
                  break;
                case 15123:
                  uint64_t result = "DW_AT_BORLAND_property_implements";
                  break;
                case 15124:
                  uint64_t result = "DW_AT_BORLAND_property_index";
                  break;
                case 15125:
                  uint64_t result = "DW_AT_BORLAND_property_default";
                  break;
                case 15136:
                  uint64_t result = "DW_AT_BORLAND_Delphi_unit";
                  break;
                case 15137:
                  uint64_t result = "DW_AT_BORLAND_Delphi_class";
                  break;
                case 15138:
                  uint64_t result = "DW_AT_BORLAND_Delphi_record";
                  break;
                case 15139:
                  uint64_t result = "DW_AT_BORLAND_Delphi_metaclass";
                  break;
                case 15140:
                  uint64_t result = "DW_AT_BORLAND_Delphi_constructor";
                  break;
                case 15141:
                  uint64_t result = "DW_AT_BORLAND_Delphi_destructor";
                  break;
                case 15142:
                  uint64_t result = "DW_AT_BORLAND_Delphi_anonymous_method";
                  break;
                case 15143:
                  uint64_t result = "DW_AT_BORLAND_Delphi_interface";
                  break;
                case 15144:
                  uint64_t result = "DW_AT_BORLAND_Delphi_ABI";
                  break;
                case 15145:
                  uint64_t result = "DW_AT_BORLAND_Delphi_return";
                  break;
                case 15152:
                  uint64_t result = "DW_AT_BORLAND_Delphi_frameptr";
                  break;
                case 15153:
                  uint64_t result = "DW_AT_BORLAND_closure";
                  break;
                default:
                  return result;
              }
              break;
          }
          break;
      }
    }
  }
  else
  {
    switch(v1)
    {
      case 1:
        uint64_t result = "DW_AT_sibling";
        break;
      case 2:
        uint64_t result = "DW_AT_location";
        break;
      case 3:
        uint64_t result = "DW_AT_name";
        break;
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 10:
      case 14:
      case 15:
      case 20:
      case 31:
      case 35:
      case 36:
      case 38:
      case 40:
      case 41:
      case 43:
      case 45:
      case 48:
        return result;
      case 9:
        uint64_t result = "DW_AT_ordering";
        break;
      case 11:
        uint64_t result = "DW_AT_byte_size";
        break;
      case 12:
        uint64_t result = "DW_AT_bit_offset";
        break;
      case 13:
        uint64_t result = "DW_AT_bit_size";
        break;
      case 16:
        uint64_t result = "DW_AT_stmt_list";
        break;
      case 17:
        uint64_t result = "DW_AT_low_pc";
        break;
      case 18:
        uint64_t result = "DW_AT_high_pc";
        break;
      case 19:
        uint64_t result = "DW_AT_language";
        break;
      case 21:
        uint64_t result = "DW_AT_discr";
        break;
      case 22:
        uint64_t result = "DW_AT_discr_value";
        break;
      case 23:
        uint64_t result = "DW_AT_visibility";
        break;
      case 24:
        uint64_t result = "DW_AT_import";
        break;
      case 25:
        uint64_t result = "DW_AT_string_length";
        break;
      case 26:
        uint64_t result = "DW_AT_common_reference";
        break;
      case 27:
        uint64_t result = "DW_AT_comp_dir";
        break;
      case 28:
        uint64_t result = "DW_AT_const_value";
        break;
      case 29:
        uint64_t result = "DW_AT_containing_type";
        break;
      case 30:
        uint64_t result = "DW_AT_default_value";
        break;
      case 32:
        uint64_t result = "DW_AT_inline";
        break;
      case 33:
        uint64_t result = "DW_AT_is_optional";
        break;
      case 34:
        uint64_t result = "DW_AT_lower_bound";
        break;
      case 37:
        uint64_t result = "DW_AT_producer";
        break;
      case 39:
        uint64_t result = "DW_AT_prototyped";
        break;
      case 42:
        uint64_t result = "DW_AT_return_addr";
        break;
      case 44:
        uint64_t result = "DW_AT_start_scope";
        break;
      case 46:
        uint64_t result = "DW_AT_bit_stride";
        break;
      case 47:
        uint64_t result = "DW_AT_upper_bound";
        break;
      case 49:
        uint64_t result = "DW_AT_abstract_origin";
        break;
      case 50:
        uint64_t result = "DW_AT_accessibility";
        break;
      case 51:
        uint64_t result = "DW_AT_address_class";
        break;
      case 52:
        uint64_t result = "DW_AT_artificial";
        break;
      case 53:
        uint64_t result = "DW_AT_base_types";
        break;
      case 54:
        uint64_t result = "DW_AT_calling_convention";
        break;
      case 55:
        uint64_t result = "DW_AT_count";
        break;
      case 56:
        uint64_t result = "DW_AT_data_member_location";
        break;
      case 57:
        uint64_t result = "DW_AT_decl_column";
        break;
      case 58:
        uint64_t result = "DW_AT_decl_file";
        break;
      case 59:
        uint64_t result = "DW_AT_decl_line";
        break;
      case 60:
        uint64_t result = "DW_AT_declaration";
        break;
      case 61:
        uint64_t result = "DW_AT_discr_list";
        break;
      case 62:
        uint64_t result = "DW_AT_encoding";
        break;
      case 63:
        uint64_t result = "DW_AT_external";
        break;
      case 64:
        uint64_t result = "DW_AT_frame_base";
        break;
      case 65:
        uint64_t result = "DW_AT_friend";
        break;
      case 66:
        uint64_t result = "DW_AT_identifier_case";
        break;
      case 67:
        uint64_t result = "DW_AT_macro_info";
        break;
      case 68:
        uint64_t result = "DW_AT_namelist_item";
        break;
      case 69:
        uint64_t result = "DW_AT_priority";
        break;
      case 70:
        uint64_t result = "DW_AT_segment";
        break;
      case 71:
        uint64_t result = "DW_AT_specification";
        break;
      case 72:
        uint64_t result = "DW_AT_static_link";
        break;
      case 73:
        uint64_t result = "DW_AT_type";
        break;
      case 74:
        uint64_t result = "DW_AT_use_location";
        break;
      case 75:
        uint64_t result = "DW_AT_variable_parameter";
        break;
      case 76:
        uint64_t result = "DW_AT_virtuality";
        break;
      case 77:
        uint64_t result = "DW_AT_vtable_elem_location";
        break;
      case 78:
        uint64_t result = "DW_AT_allocated";
        break;
      case 79:
        uint64_t result = "DW_AT_associated";
        break;
      case 80:
        uint64_t result = "DW_AT_data_location";
        break;
      case 81:
        uint64_t result = "DW_AT_byte_stride";
        break;
      case 82:
        uint64_t result = "DW_AT_entry_pc";
        break;
      case 83:
        uint64_t result = "DW_AT_use_UTF8";
        break;
      case 84:
        uint64_t result = "DW_AT_extension";
        break;
      case 85:
        uint64_t result = "DW_AT_ranges";
        break;
      case 86:
        uint64_t result = "DW_AT_trampoline";
        break;
      case 87:
        uint64_t result = "DW_AT_call_column";
        break;
      case 88:
        uint64_t result = "DW_AT_call_file";
        break;
      case 89:
        uint64_t result = "DW_AT_call_line";
        break;
      case 90:
        uint64_t result = "DW_AT_description";
        break;
      case 91:
        uint64_t result = "DW_AT_binary_scale";
        break;
      case 92:
        uint64_t result = "DW_AT_decimal_scale";
        break;
      case 93:
        uint64_t result = "DW_AT_small";
        break;
      case 94:
        uint64_t result = "DW_AT_decimal_sign";
        break;
      case 95:
        uint64_t result = "DW_AT_digit_count";
        break;
      case 96:
        uint64_t result = "DW_AT_picture_string";
        break;
      case 97:
        uint64_t result = "DW_AT_mutable";
        break;
      case 98:
        uint64_t result = "DW_AT_threads_scaled";
        break;
      case 99:
        uint64_t result = "DW_AT_explicit";
        break;
      case 100:
        uint64_t result = "DW_AT_object_pointer";
        break;
      case 101:
        uint64_t result = "DW_AT_endianity";
        break;
      case 102:
        uint64_t result = "DW_AT_elemental";
        break;
      case 103:
        uint64_t result = "DW_AT_pure";
        break;
      case 104:
        uint64_t result = "DW_AT_recursive";
        break;
      case 105:
        uint64_t result = "DW_AT_signature";
        break;
      case 106:
        uint64_t result = "DW_AT_main_subprogram";
        break;
      case 107:
        uint64_t result = "DW_AT_data_bit_offset";
        break;
      case 108:
        uint64_t result = "DW_AT_const_expr";
        break;
      case 109:
        uint64_t result = "DW_AT_enum_class";
        break;
      case 110:
        uint64_t result = "DW_AT_linkage_name";
        break;
      case 111:
        uint64_t result = "DW_AT_string_length_bit_size";
        break;
      case 112:
        uint64_t result = "DW_AT_string_length_byte_size";
        break;
      case 113:
        uint64_t result = "DW_AT_rank";
        break;
      case 114:
        uint64_t result = "DW_AT_str_offsets_base";
        break;
      case 115:
        uint64_t result = "DW_AT_addr_base";
        break;
      case 116:
        uint64_t result = "DW_AT_rnglists_base";
        break;
      case 117:
        uint64_t result = "DW_AT_dwo_id";
        break;
      case 118:
        uint64_t result = "DW_AT_dwo_name";
        break;
      case 119:
        uint64_t result = "DW_AT_reference";
        break;
      case 120:
        uint64_t result = "DW_AT_rvalue_reference";
        break;
      case 121:
        uint64_t result = "DW_AT_macros";
        break;
      case 122:
        uint64_t result = "DW_AT_call_all_calls";
        break;
      case 123:
        uint64_t result = "DW_AT_call_all_source_calls";
        break;
      case 124:
        uint64_t result = "DW_AT_call_all_tail_calls";
        break;
      case 125:
        uint64_t result = "DW_AT_call_return_pc";
        break;
      case 126:
        uint64_t result = "DW_AT_call_value";
        break;
      case 127:
        uint64_t result = "DW_AT_call_origin";
        break;
      case 128:
        uint64_t result = "DW_AT_call_parameter";
        break;
      case 129:
        uint64_t result = "DW_AT_call_pc";
        break;
      case 130:
        uint64_t result = "DW_AT_call_tail_call";
        break;
      case 131:
        uint64_t result = "DW_AT_call_target";
        break;
      case 132:
        uint64_t result = "DW_AT_call_target_clobbered";
        break;
      case 133:
        uint64_t result = "DW_AT_call_data_location";
        break;
      case 134:
        uint64_t result = "DW_AT_call_data_value";
        break;
      case 135:
        uint64_t result = "DW_AT_noreturn";
        break;
      case 136:
        uint64_t result = "DW_AT_alignment";
        break;
      case 137:
        uint64_t result = "DW_AT_export_symbols";
        break;
      case 138:
        uint64_t result = "DW_AT_deleted";
        break;
      case 139:
        uint64_t result = "DW_AT_defaulted";
        break;
      case 140:
        uint64_t result = "DW_AT_loclists_base";
        break;
      default:
        int v3 = "DW_AT_GHS_using_namespace";
        if (v1 != 2055) {
          int v3 = 0;
        }
        if (v1 == 2054) {
          uint64_t result = "DW_AT_GHS_namespace_alias";
        }
        else {
          uint64_t result = v3;
        }
        break;
    }
  }
  return result;
}