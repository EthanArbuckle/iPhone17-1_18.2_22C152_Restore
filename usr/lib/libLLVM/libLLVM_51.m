uint64_t sub_1CD115180(llvm::Instruction *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *i;
  uint64_t *v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  llvm::Value *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  llvm::ValueSymbolTable *v38;
  uint64_t v40;
  void v41[2];
  int v42;

  v3 = *((void *)this + 5);
  v41[0] = 0;
  v41[1] = 0;
  v42 = 0;
  v4 = *((void *)this + 1);
  if (!v4) {
LABEL_55:
  }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  v6 = 0;
  do
  {
    v7 = v4;
    v8 = (void *)(v4 + 8);
    v4 = *(void *)(v4 + 8);
    v9 = v8[2];
    v10 = *(void *)(v9 + 40);
    v40 = v10;
    if (v9 && *(unsigned char *)(v9 + 16) == 83)
    {
      if (!a2) {
        continue;
      }
      v11 = *(_DWORD *)(v9 + 20);
      if ((v11 & 0x40000000) != 0) {
        v12 = *(void *)(v9 - 8);
      }
      else {
        v12 = v9 - 32 * (v11 & 0x7FFFFFF);
      }
      v10 = *(void *)(v12 + 32 * *(unsigned int *)(v9 + 60) + 8
                                                                * ((unint64_t)(v7 - v12) >> 5));
      v40 = v10;
    }
    if (v10 != v3)
    {
      if (v42)
      {
        v13 = (v42 - 1) & ((v10 >> 4) ^ (v10 >> 9));
        v14 = (uint64_t *)(v41[0] + 16 * v13);
        v15 = *v14;
        if (v10 == *v14)
        {
LABEL_27:
          v21 = v14[1];
          if (!v21)
          {
            v22 = (uint64_t *)(v40 + 40);
            for (i = *(uint64_t **)(v40 + 48); i != v22; i = (uint64_t *)i[1])
            {
              v24 = i - 3;
              if (!i) {
                v24 = 0;
              }
              if (*((unsigned char *)v24 + 16) != 83)
              {
                v25 = *((unsigned __int8 *)i - 8) - 38;
                v26 = v25 > 0x38;
                v27 = (1 << v25) & 0x100060000000001;
                if (v26 || v27 == 0) {
                  v22 = i;
                }
                else {
                  v22 = (uint64_t *)i[1];
                }
                break;
              }
            }
            v29 = (llvm::Value *)llvm::Instruction::clone(this);
            v14[1] = (uint64_t)v29;
            v30 = v40;
            *((void *)v29 + 5) = v40;
            *(_WORD *)(v30 + 18) &= ~0x8000u;
            if ((*((unsigned char *)v29 + 23) & 0x10) != 0)
            {
              v37 = *(void *)(v30 + 56);
              if (v37)
              {
                v38 = *(llvm::ValueSymbolTable **)(v37 + 104);
                if (v38) {
                  llvm::ValueSymbolTable::reinsertValue(v38, v29);
                }
              }
            }
            v31 = *v22;
            *((void *)v29 + 3) = *v22;
            *((void *)v29 + 4) = v22;
            v32 = (void *)((char *)v29 + 24);
            *(void *)(v31 + 8) = v32;
            *v22 = (uint64_t)v32;
            v21 = v14[1];
            v6 = 1;
          }
          if (*(void *)v7)
          {
            **(void **)(v7 + 16) = *(void *)(v7 + 8);
            v33 = *(void *)(v7 + 8);
            if (v33) {
              *(void *)(v33 + 16) = *(void *)(v7 + 16);
            }
          }
          *(void *)v7 = v21;
          if (v21)
          {
            v36 = *(void *)(v21 + 8);
            v34 = (void *)(v21 + 8);
            v35 = v36;
            *v8 = v36;
            if (v36) {
              *(void *)(v35 + 16) = v8;
            }
            *(void *)(v7 + 16) = v34;
            *v34 = v7;
          }
          continue;
        }
        v16 = 0;
        v17 = 1;
        while (v15 != -4096)
        {
          if (v16) {
            v18 = 0;
          }
          else {
            v18 = v15 == -8192;
          }
          if (v18) {
            v16 = v14;
          }
          v19 = v13 + v17++;
          v13 = v19 & (v42 - 1);
          v14 = (uint64_t *)(v41[0] + 16 * v13);
          v15 = *v14;
          if (v10 == *v14) {
            goto LABEL_27;
          }
        }
        if (v16) {
          v20 = v16;
        }
        else {
          v20 = v14;
        }
      }
      else
      {
        v20 = 0;
      }
      v14 = sub_1CB8463E8((uint64_t)v41, (uint64_t)&v40, &v40, v20);
      *v14 = v40;
      v14[1] = 0;
      goto LABEL_27;
    }
  }
  while (v4);
  if (!*((void *)this + 1)) {
    goto LABEL_55;
  }
  MEMORY[0x1D25D9CD0](v41[0], 8);
  return v6 & 1;
}

uint64_t sub_1CD115444(uint64_t a1, unsigned int a2)
{
  if (a2 > 5) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return 1;
  }
  while (1)
  {
    uint64_t v4 = *(void *)(v3 + 24);
    int v5 = *(unsigned __int8 *)(v4 + 16);
    if ((v5 - 66) <= 2)
    {
      if ((sub_1CD115444() & 1) == 0) {
        return 0;
      }
      goto LABEL_15;
    }
    if (v5 == 41) {
      goto LABEL_10;
    }
    if (v5 != 62) {
      break;
    }
LABEL_15:
    uint64_t v3 = *(void *)(v3 + 8);
    if (!v3) {
      return 1;
    }
  }
  if (v5 != 45) {
    return 0;
  }
LABEL_10:
  int v6 = *(_DWORD *)(v4 + 20);
  if ((v6 & 0x40000000) != 0) {
    uint64_t v7 = *(void *)(v4 - 8);
  }
  else {
    uint64_t v7 = v4 - 32 * (v6 & 0x7FFFFFF);
  }
  if (*(unsigned char *)(*(void *)(v7 + 32) + 16) == 16)
  {
    uint64_t result = sub_1CD115444();
    if (!result) {
      return result;
    }
    goto LABEL_15;
  }
  return 0;
}

double sub_1CD115504(uint64_t a1, uint64_t *a2)
{
  uint64_t v10 = 0;
  char v4 = sub_1CD115614(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v10);
  uint64_t v6 = v10;
  if (v4) {
    return result;
  }
  int v7 = *(_DWORD *)(a1 + 8);
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_9:
    sub_1CD1156A8(a1, v8);
    uint64_t v10 = 0;
    sub_1CD115614(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v10);
    uint64_t v6 = v10;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)v6 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  uint64_t v9 = *a2;
  *(_OWORD *)(v6 + 40) = 0u;
  *(void *)(v6 + 56) = 0;
  *(_OWORD *)(v6 + 24) = 0u;
  *(void *)uint64_t v6 = v9;
  *(void *)(v6 + 8) = v6 + 24;
  *(void *)&double result = 0x100000000;
  *(void *)(v6 + 16) = 0x100000000;
  *(void *)(v6 + 32) = v6 + 48;
  *(_DWORD *)(v6 + 44) = 2;
  return result;
}

uint64_t sub_1CD115614(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    uint64_t v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    int v5 = (void *)(a1 + (v4 << 6));
    uint64_t v6 = *v5;
    if (*v5 == a3)
    {
      uint64_t v9 = 1;
    }
    else
    {
      int v7 = 0;
      int v8 = 1;
      while (v6 != -4096)
      {
        if (v7) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v6 == -8192;
        }
        if (v11) {
          int v7 = v5;
        }
        int v12 = v4 + v8++;
        uint64_t v4 = v12 & (a2 - 1);
        int v5 = (void *)(a1 + (v4 << 6));
        uint64_t v6 = *v5;
        uint64_t v9 = 1;
        if (*v5 == a3) {
          goto LABEL_7;
        }
      }
      uint64_t v9 = 0;
      if (v7) {
        int v5 = v7;
      }
    }
  }
  else
  {
    int v5 = 0;
    uint64_t v9 = 0;
  }
LABEL_7:
  *a4 = v5;
  return v9;
}

void *sub_1CD1156A8(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = operator new((unint64_t)v8 << 6, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD872708(a1, v4, &v4[8 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = v10 << 6;
    do
    {
      *double result = -4096;
      result += 8;
      v11 -= 64;
    }
    while (v11);
  }
  return result;
}

void *sub_1CD115774(void *result, uint64_t a2)
{
  *double result = result + 2;
  result[1] = 0x100000000;
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    sub_1CD642788((uint64_t)result, a2);
    a2 = v2;
    double result = v3;
  }
  result[3] = result + 5;
  result[4] = 0x200000000;
  if (*(_DWORD *)(a2 + 32))
  {
    uint64_t v4 = result;
    sub_1CD642788((uint64_t)(result + 3), a2 + 24);
    return v4;
  }
  return result;
}

uint64_t sub_1CD1157F4@<X0>(llvm::Module *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  v23 = "agx.unified.store.limits";
  __int16 v24 = 259;
  uint64_t result = llvm::Module::getNamedMetadata(a1, &v23);
  if (result)
  {
    if (a2) {
      unint64_t v6 = "min-temp-reg-limit";
    }
    else {
      unint64_t v6 = "temp-reg-limit";
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 8) = 0;
    int v7 = *(uint64_t **)(result + 48);
    uint64_t v8 = *((unsigned int *)v7 + 2);
    if (v8)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      int v22 = 0;
      if (a2) {
        size_t v11 = 18;
      }
      else {
        size_t v11 = 14;
      }
      uint64_t v12 = *v7;
      do
      {
        uint64_t v13 = *(void *)(v12 + 8 * v10);
        uint64_t v14 = *(unsigned int *)(v13 + 8);
        v15 = (void *)(v13 - 8 * v14);
        if (!*(unsigned char *)*v15)
        {
          v16 = *(void **)(*v15 + 8);
          if (*v16 == v11)
          {
            uint64_t result = memcmp(v16 + 3, v6, v11);
            if (v14 >= 2 && result == 0)
            {
              uint64_t v18 = v15[1];
              if (*(unsigned char *)v18 == 1)
              {
                uint64_t v19 = *(void *)(v18 + 128);
                if (*(unsigned char *)(v19 + 16) == 16)
                {
                  v20 = (void *)(v19 + 24);
                  if (*(_DWORD *)(v19 + 32) >= 0x41u) {
                    v20 = (void *)*v20;
                  }
                  v21 = (void *)*v20;
                  if (v22)
                  {
                    if (*(_DWORD *)a3 > v21)
                    {
                      *(_DWORD *)a3 = v21;
                      *(_DWORD *)(a3 + 4) = v10;
                    }
                    int v22 = 1;
                  }
                  else
                  {
                    *(void *)a3 = v9 + v21;
                    int v22 = 1;
                    *(unsigned char *)(a3 + 8) = 1;
                  }
                }
              }
            }
          }
        }
        ++v10;
        v9 += 0x100000000;
      }
      while (v8 != v10);
    }
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 8) = 0;
  }
  return result;
}

uint64_t sub_1CD115988(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 1;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      int v7 = 0;
      uint64_t result = 0;
      goto LABEL_6;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      int v7 = (void *)(v3 + 8 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_6;
      }
    }
    uint64_t result = 0;
    if (v10) {
      int v7 = v10;
    }
  }
LABEL_6:
  *a3 = v7;
  return result;
}

uint64_t sub_1CD115A34(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 2)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  int v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    int v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 > 1)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 = v6 | 1;
    }
    sub_1CD115BAC(a1, v11, &v11[v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = &v14;
  if (v7 != -4096 && v7 != -8192)
  {
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v8 = &v15;
  }
  if (a2 >= 2)
  {
    *(_DWORD *)a1 = v6 & 0xFFFFFFFE;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CD115BAC(a1, &v14, v8);
}

uint64_t sub_1CD115BAC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v3)
  {
    int v5 = (void *)(result + 8);
    int v6 = (void *)(result + 16);
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(result + 16);
    if (!v4) {
      goto LABEL_5;
    }
    int v5 = *(void **)(result + 8);
    int v6 = &v5[v4];
  }
  do
    *v5++ = -4096;
  while (v5 != v6);
LABEL_5:
  if (a2 != a3)
  {
    do
    {
      uint64_t v10 = a3;
      uint64_t v7 = (_DWORD *)result;
      uint64_t v8 = a2;
      uint64_t v9 = *a2;
      if ((v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v11 = 0;
        sub_1CD115988(result, v9, &v11);
        *int v11 = *v8;
        *v7 += 2;
      }
      a2 = v8 + 1;
      a3 = v10;
      uint64_t result = (uint64_t)v7;
    }
    while (v8 + 1 != v10);
  }
  return result;
}

uint64_t sub_1CD115C80(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_14;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & (37 * a2);
  uint64_t v7 = (_DWORD *)(v3 + 24 * v6);
  int v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -1)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -2;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (_DWORD *)(v3 + 24 * (v13 & v5));
      int v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_14;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_14:
  *a3 = v7;
  return result;
}

_DWORD *sub_1CD115D30(_DWORD *a1, int *a2, _DWORD *a3)
{
  int v5 = *a1 >> 1;
  if (*a1) {
    unsigned int v6 = 16;
  }
  else {
    unsigned int v6 = a1[4];
  }
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_5;
  }
  sub_1CD115DF4((uint64_t)a1, v6);
  int v8 = 0;
  sub_1CD115C80((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_5:
  *a1 += 2;
  if (*a3 != -1) {
    --a1[1];
  }
  return a3;
}

uint64_t sub_1CD115DF4(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x11)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    unsigned int v12 = *(_DWORD *)(a1 + 16);
    if (a2 <= 0x10)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CD115FA0(a1, v11, v11 + 24 * v12);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  uint64_t v7 = v14;
  do
  {
    unsigned int v8 = *(_DWORD *)(a1 + v6 + 8);
    if (v8 <= 0xFFFFFFFD)
    {
      *(_DWORD *)uint64_t v7 = v8;
      *(_OWORD *)(v7 + 8) = *(_OWORD *)(a1 + v6 + 16);
      v7 += 24;
    }
    v6 += 24;
  }
  while (v6 != 384);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CD115FA0(a1, (uint64_t)v14, (uint64_t)v7);
}

uint64_t sub_1CD115FA0(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    unsigned int v8 = (_DWORD *)(result + 8);
    uint64_t v9 = (_DWORD *)(result + 392);
  }
  else
  {
    int v7 = *(_DWORD *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    unsigned int v8 = *(_DWORD **)(result + 8);
    uint64_t v9 = &v8[6 * v7];
  }
  do
  {
    *unsigned int v8 = -1;
    v8 += 6;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    int v10 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      unsigned int v12 = 0;
      uint64_t result = sub_1CD115C80((uint64_t)v5, v10, &v12);
      uint64_t v11 = v12;
      *unsigned int v12 = *(_DWORD *)a2;
      *(_OWORD *)(v11 + 2) = *(_OWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 24;
  }
  return result;
}

_DWORD *sub_1CD116064(_DWORD *a1, int *a2)
{
  int v7 = 0;
  char v4 = sub_1CD115C80((uint64_t)a1, *a2, &v7);
  int v5 = v7;
  if ((v4 & 1) == 0)
  {
    int v5 = sub_1CD115D30(a1, a2, v7);
    *int v5 = *a2;
    *((void *)v5 + 1) = 0;
    *((void *)v5 + 2) = 0;
  }
  return v5;
}

uint64_t sub_1CD1160CC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      int v7 = 0;
      uint64_t result = 0;
      goto LABEL_15;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      int v7 = (void *)(v3 + 8 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_15;
      }
    }
    uint64_t result = 0;
    if (v9) {
      int v7 = v9;
    }
  }
LABEL_15:
  *a3 = v7;
  return result;
}

uint64_t sub_1CD116178(uint64_t a1, unsigned int a2)
{
  v14[8] = *MEMORY[0x1E4F143B8];
  if (a2 >= 9)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 8)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CD1162F4(a1, v11, &v11[v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  unsigned int v6 = v14;
  for (uint64_t i = 8; i != 72; i += 8)
  {
    uint64_t v8 = *(void *)(a1 + i);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v6++ = v8;
    }
  }
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CD1162F4(a1, v14, v6);
}

uint64_t sub_1CD1162F4(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 72);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CD1160CC((uint64_t)v5, v10, &v11);
      *uint64_t v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1CD1163B0(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4)
{
  uint64_t v20 = 0;
  uint64_t result = sub_1CD116504(a2, *a3, &v20);
  uint64_t v9 = v20;
  unsigned int v10 = *(_DWORD *)a2;
  if (result)
  {
    if (v10)
    {
      uint64_t v18 = a2 + 8;
      uint64_t v19 = 16;
    }
    else
    {
      uint64_t v18 = *(void *)(a2 + 8);
      uint64_t v19 = *(unsigned int *)(a2 + 16);
    }
    char v17 = 0;
    uint64_t v16 = v18 + 32 * v19;
    goto LABEL_11;
  }
  unsigned int v11 = v10 >> 1;
  if (v10) {
    unsigned int v12 = 16;
  }
  else {
    unsigned int v12 = *(_DWORD *)(a2 + 16);
  }
  if (4 * v11 + 4 >= 3 * v12)
  {
    v12 *= 2;
    goto LABEL_15;
  }
  if (v12 + ~v11 - *(_DWORD *)(a2 + 4) <= v12 >> 3)
  {
LABEL_15:
    sub_1CD1165A8(a2, v12);
    uint64_t v20 = 0;
    uint64_t result = sub_1CD116504(a2, *a3, &v20);
    uint64_t v9 = v20;
  }
  *(_DWORD *)a2 += 2;
  if (*(void *)v9 != -4096) {
    --*(_DWORD *)(a2 + 4);
  }
  *(void *)uint64_t v9 = *a3;
  long long v13 = *a4;
  *(void *)(v9 + 24) = *((void *)a4 + 2);
  *(_OWORD *)(v9 + 8) = v13;
  uint64_t v14 = a2 + 8;
  if (*(unsigned char *)a2)
  {
    uint64_t v15 = 16;
  }
  else
  {
    uint64_t v14 = *(void *)(a2 + 8);
    uint64_t v15 = *(unsigned int *)(a2 + 16);
  }
  uint64_t v16 = v14 + 32 * v15;
  char v17 = 1;
LABEL_11:
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v16;
  *(unsigned char *)(a1 + 16) = v17;
  return result;
}

uint64_t sub_1CD116504(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_15;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  uint64_t v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 32 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
LABEL_12:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      int v12 = v6 + v10++;
      uint64_t v6 = v12 & v5;
      uint64_t v7 = (void *)(v3 + 32 * v6);
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_12;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_15:
  *a3 = v7;
  return result;
}

uint64_t sub_1CD1165A8(uint64_t a1, unsigned int a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x11)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v13 = *(void *)(a1 + 8);
    uint64_t v14 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      uint64_t v15 = a2;
      *(void *)(a1 + 8) = operator new(32 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v15;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD116748(a1, v13, v13 + 32 * v14);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  uint64_t v7 = v16;
  do
  {
    uint64_t v8 = a1 + v6;
    uint64_t v9 = *(void *)(a1 + v6 + 8);
    if ((v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(void *)uint64_t v7 = v9;
      long long v10 = *(_OWORD *)(v8 + 16);
      *((void *)v7 + 3) = *(void *)(v8 + 32);
      *(_OWORD *)(v7 + 8) = v10;
      v7 += 32;
    }
    v6 += 32;
  }
  while (v6 != 512);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(32 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CD116748(a1, (uint64_t)v16, (uint64_t)v7);
}

uint64_t sub_1CD116748(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 520);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[4 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 4;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v13 = 0;
      uint64_t result = sub_1CD116504((uint64_t)v5, v10, &v13);
      uint64_t v11 = v13;
      *uint64_t v13 = *(void *)a2;
      long long v12 = *(_OWORD *)(a2 + 8);
      v11[3] = *(void *)(a2 + 24);
      *(_OWORD *)(v11 + 1) = v12;
      *v5 += 2;
    }
    a2 += 32;
  }
  return result;
}

_DWORD *sub_1CD116814(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unint64_t v4 = *(int **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)4uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD8729B0(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *uint64_t result = -1;
      result += 2;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

void sub_1CD1168E4()
{
}

void *sub_1CD1168F8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2647630;
  result[1] = v3;
  return result;
}

uint64_t sub_1CD116940(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2647630;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CD11696C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  unsigned int v3 = *(_DWORD *)(v2 + 8);
  if (v3 >= *(_DWORD *)(v2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v2 + 8 * v3) = *a2;
  ++*(_DWORD *)(v2 + 8);
  return result;
}

uint64_t sub_1CD1169CC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v5 = 8;
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 16);
    if (!v5)
    {
      long long v12 = 0;
      uint64_t result = 0;
      goto LABEL_26;
    }
    uint64_t v4 = *(void *)(a1 + 8);
  }
  unint64_t v6 = ((a3 >> 4) ^ (a3 >> 9) | ((unint64_t)((a2 >> 4) ^ (a2 >> 9)) << 32))
     + ~((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
  unint64_t v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
  unint64_t v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
  int v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~(v8 << 27));
  int v10 = v5 - 1;
  unsigned int v11 = (v5 - 1) & v9;
  long long v12 = (void *)(v4 + 16 * v11);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  if (*v12 == a2 && v14 == a3)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v16 = 0;
    int v17 = 1;
    uint64_t result = 1;
    while (v13 != -4096 || v14 != -4096)
    {
      if (v16) {
        BOOL v19 = 0;
      }
      else {
        BOOL v19 = v14 == -8192;
      }
      if (v19 && v13 == -8192) {
        uint64_t v16 = v12;
      }
      unsigned int v21 = v11 + v17++;
      unsigned int v11 = v21 & v10;
      long long v12 = (void *)(v4 + 16 * (v21 & v10));
      uint64_t v13 = *v12;
      uint64_t v14 = v12[1];
      if (*v12 == a2 && v14 == a3) {
        goto LABEL_26;
      }
    }
    uint64_t result = 0;
    if (v16) {
      long long v12 = v16;
    }
  }
LABEL_26:
  *a4 = v12;
  return result;
}

void sub_1CD116ACC(uint64_t a1, unsigned int a2)
{
  v14[16] = *MEMORY[0x1E4F143B8];
  if (a2 >= 9)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    unsigned int v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 8)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CD116C64(a1, v11, &v11[2 * v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  unint64_t v7 = v14;
  do
  {
    uint64_t v9 = *(void *)(a1 + v6 + 8);
    uint64_t v8 = *(void *)(a1 + v6 + 16);
    if ((v9 != -4096 || v8 != -4096) && (v9 != -8192 || v8 != -8192))
    {
      *(_OWORD *)unint64_t v7 = *(_OWORD *)(a1 + v6 + 8);
      v7 += 2;
    }
    v6 += 16;
  }
  while (v6 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v10 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v10;
  }
  sub_1CD116C64(a1, v14, v7);
}

void sub_1CD116C64(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)a1;
  *(void *)a1 = *(_DWORD *)a1 & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(a1 + 8);
    size_t v9 = 128;
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (!v7) {
      goto LABEL_11;
    }
    uint64_t v8 = *(void **)(a1 + 8);
    size_t v9 = 16 * v7;
  }
  memset_pattern16(v8, &unk_1CFAC3070, v9);
LABEL_11:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    uint64_t v11 = a2[1];
    if ((*a2 != -4096 || v11 != -4096) && (v10 != -8192 || v11 != -8192))
    {
      uint64_t v13 = 0;
      sub_1CD1169CC(a1, v10, v11, &v13);
      uint64_t v12 = v13;
      *uint64_t v13 = *a2;
      v12[1] = a2[1];
      *(_DWORD *)a1 += 2;
    }
    a2 += 2;
  }
}

_OWORD *sub_1CD116D38(uint64_t *a1, int a2)
{
  uint64_t v3 = *((unsigned int *)a1 + 4);
  unint64_t v4 = (uint64_t *)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    uint64_t v12 = *((unsigned int *)a1 + 4);
    if (v12)
    {
      uint64_t v13 = 16 * v12;
      uint64_t v14 = result;
      do
      {
        *v14++ = xmmword_1CFAC30E0;
        v13 -= 16;
      }
      while (v13);
    }
    if (v3)
    {
      int v15 = 0;
      int v16 = v12 - 1;
      int v17 = v4;
      do
      {
        uint64_t v18 = *v17;
        int v19 = *((_DWORD *)v17 + 2);
        if ((*v17 != -4096 || v19 != -1) && (v18 != -8192 || v19 != -2))
        {
          unint64_t v22 = ~((unint64_t)(37 * v19) << 32)
              + (37 * v19)
              + ((unint64_t)((v18 >> 4) ^ (v18 >> 9)) << 32);
          unint64_t v23 = (v22 ^ (v22 >> 22)) + ~((v22 ^ (v22 >> 22)) << 13);
          unint64_t v24 = (9 * (v23 ^ (v23 >> 8))) ^ ((9 * (v23 ^ (v23 >> 8))) >> 15);
          unsigned int v25 = v16 & (((v24 + ~(v24 << 27)) >> 31) ^ (v24 + ~(v24 << 27)));
          v26 = &result[v25];
          uint64_t v27 = *(void *)v26;
          int v28 = *((_DWORD *)v26 + 2);
          if (v18 != *(void *)v26 || v19 != v28)
          {
            v30 = 0;
            int v31 = 1;
            while (v27 != -4096 || v28 != -1)
            {
              if (v30) {
                BOOL v32 = 0;
              }
              else {
                BOOL v32 = v28 == -2;
              }
              if (v32 && v27 == -8192) {
                v30 = v26;
              }
              unsigned int v34 = v25 + v31++;
              unsigned int v25 = v34 & v16;
              v26 = &result[v34 & v16];
              uint64_t v27 = *(void *)v26;
              int v28 = *((_DWORD *)v26 + 2);
              if (v18 == *(void *)v26 && v19 == v28) {
                goto LABEL_45;
              }
            }
            if (v30) {
              v26 = v30;
            }
          }
LABEL_45:
          *(void *)v26 = v18;
          *((_DWORD *)v26 + 2) = v19;
          *((_DWORD *)a1 + 2) = ++v15;
        }
        v17 += 2;
      }
      while (v17 != &v4[2 * v3]);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  a1[1] = 0;
  uint64_t v10 = *((unsigned int *)a1 + 4);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *result++ = xmmword_1CFAC30E0;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

BOOL sub_1CD116F34(uint64_t a1, int a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(a3 + 16);
  LOBYTE(v6) = a2 + 28;
  if (a2 + 28 == v5)
  {
    BOOL result = sub_1CC0241FC(a1, *(llvm::Constant **)(a3 - 64));
    if (result)
    {
      uint64_t v8 = *(void *)(a3 - 32);
      if (v8)
      {
        **(void **)(a1 + 8) = v8;
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    if (v5 == 5)
    {
      if (*(unsigned __int16 *)(a3 + 18) == a2
        && sub_1CC04C9B0(a1, *(llvm::Constant **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF))))
      {
        uint64_t v6 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32);
        if (v6)
        {
          **(void **)(a1 + 8) = v6;
          LOBYTE(v6) = 1;
        }
      }
      else
      {
        LOBYTE(v6) = 0;
      }
    }
    return (v5 == 5) & v6;
  }
  return result;
}

void sub_1CD117008()
{
}

void *sub_1CD11701C()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F2647678;
  return result;
}

void sub_1CD117054(uint64_t a1, void *a2)
{
  *a2 = &unk_1F2647678;
}

uint64_t sub_1CD11707C(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFFFFFF00) != 0x200 || (*(unsigned char *)(a2 + 80) & 2) != 0) {
    return 0;
  }
  if (*(unsigned char *)(a2 + 16))
  {
    if (*(unsigned char *)(a2 + 16) == 3 && (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 0)
    {
      int v2 = *(_DWORD *)(a2 + 32);
      goto LABEL_9;
    }
  }
  else if (*(void *)(a2 + 72) == a2 + 72)
  {
    int v2 = *(_DWORD *)(a2 + 32);
    if ((v2 & 0x800000) == 0)
    {
LABEL_9:
      if ((v2 & 0xF) != 0) {
        return 0;
      }
      if ((v2 & 0x400000) == 0) {
        return 1;
      }
      uint64_t v4 = ***(void ***)a2;
      uint64_t v17 = a2;
      int v5 = *(_DWORD *)(v4 + 2520);
      if (v5)
      {
        uint64_t v6 = *(void *)(v4 + 2504);
        int v7 = v5 - 1;
        unsigned int v8 = v7 & ((a2 >> 4) ^ (a2 >> 9));
        size_t v9 = (void *)(v6 + 24 * v8);
        uint64_t v10 = *v9;
        if (*v9 == a2) {
          return v9[2] == 0;
        }
        uint64_t v11 = 0;
        int v12 = 1;
        while (v10 != -4096)
        {
          if (v11) {
            BOOL v13 = 0;
          }
          else {
            BOOL v13 = v10 == -8192;
          }
          if (v13) {
            uint64_t v11 = v9;
          }
          unsigned int v14 = v8 + v12++;
          unsigned int v8 = v14 & v7;
          size_t v9 = (void *)(v6 + 24 * v8);
          uint64_t v10 = *v9;
          if (*v9 == a2) {
            return v9[2] == 0;
          }
        }
        if (v11) {
          int v15 = v11;
        }
        else {
          int v15 = v9;
        }
      }
      else
      {
        int v15 = 0;
      }
      size_t v9 = sub_1CC5BF31C(v4 + 2504, (uint64_t)&v17, &v17, v15);
      uint64_t v16 = v17;
      v9[1] = 0;
      v9[2] = 0;
      *size_t v9 = v16;
      return v9[2] == 0;
    }
  }
  return 1;
}

void sub_1CD1171C8()
{
}

void *sub_1CD1171DC()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F26476C0;
  return result;
}

void sub_1CD117214(uint64_t a1, void *a2)
{
  *a2 = &unk_1F26476C0;
}

BOOL sub_1CD11723C(uint64_t a1, unsigned char *a2)
{
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFFFFFF00) != 0x200 || (a2[34] & 0x40) == 0) {
    return 0;
  }
  uint64_t v2 = ***(void ***)a2;
  uint64_t v20 = a2;
  int v3 = *(_DWORD *)(v2 + 2520);
  if (v3)
  {
    uint64_t v4 = *(void *)(v2 + 2504);
    int v5 = v3 - 1;
    unsigned int v6 = v5 & ((a2 >> 4) ^ (a2 >> 9));
    int v7 = (void *)(v4 + 24 * v6);
    unsigned int v8 = (unsigned char *)*v7;
    if ((unsigned char *)*v7 == a2) {
      goto LABEL_5;
    }
    unsigned int v14 = 0;
    int v15 = 1;
    while (v8 != (unsigned char *)-4096)
    {
      if (v14) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v8 == (unsigned char *)-8192;
      }
      if (v16) {
        unsigned int v14 = v7;
      }
      unsigned int v17 = v6 + v15++;
      unsigned int v6 = v17 & v5;
      int v7 = (void *)(v4 + 24 * v6);
      unsigned int v8 = (unsigned char *)*v7;
      if ((unsigned char *)*v7 == a2) {
        goto LABEL_5;
      }
    }
    if (v14) {
      uint64_t v18 = v14;
    }
    else {
      uint64_t v18 = v7;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  int v7 = sub_1CC5BF31C(v2 + 2504, (uint64_t)&v20, (uint64_t *)&v20, v18);
  uint64_t v19 = (uint64_t)v20;
  v7[1] = 0;
  v7[2] = 0;
  *int v7 = v19;
LABEL_5:
  if (v7[2] != 15) {
    return 0;
  }
  size_t v9 = (uint64_t *)v7[1];
  uint64_t v10 = *v9;
  uint64_t v11 = *(uint64_t *)((char *)v9 + 7);
  return v10 == 0x625F6C61626F6C67 && v11 == 0x73676E69646E6962;
}

void *sub_1CD11736C(void *a1)
{
  *a1 = &unk_1F2647708;
  uint64_t v2 = a1 + 71;
  int v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F2647770;
  uint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }

  return sub_1CB87DD48(a1);
}

void llvm::initializeAGXShaderCanonicalizerPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFB7B0, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CD1174C4;
    v4[1] = &v2;
    int v3 = v4;
    std::__call_once(&qword_1EBCFB7B0, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD1174C4()
{
}

uint64_t sub_1CD117560(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCFB7A8;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F2647800;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFB7B0, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CD1174C4;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCFB7B0, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void *sub_1CD117610(void *a1)
{
  *a1 = &unk_1F2647770;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CD117664(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7 = a1;
  int v18 = 0;
  uint64_t v8 = *(void *)(*(void *)(a1 + 160) + 24);
  if (v8) {
    a4 = a6;
  }
  if (v8) {
    a3 = a5;
  }
  uint64_t v11 = *(unsigned int *)(a1 + 176);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 168);
    while (1)
    {
      if (*(void *)(v12 + 8) == a4)
      {
        if (!a4) {
          break;
        }
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!a1) {
          break;
        }
      }
      v12 += 48;
      if (!--v11) {
        goto LABEL_13;
      }
    }
    int v15 = *(_DWORD *)(v12 + 40);
    int v18 = v15;
  }
  else
  {
LABEL_13:
    __int16 v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    __int16 v22 = 770;
    BOOL v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if (llvm::cl::Option::error((void *)v7, (llvm::Twine *)v21, 0, 0, v13)) {
      return 1;
    }
    int v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  uint64_t v16 = *(void *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1CB920400();
    return sub_1CD1177A0(v17);
  }
}

uint64_t sub_1CD1177A0(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

void sub_1CD1177B8(void *a1)
{
  *a1 = &unk_1F2647708;
  uint64_t v2 = a1 + 71;
  int v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F2647770;
  uint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }
  sub_1CB87DD48(a1);

  JUMPOUT(0x1D25D9CE0);
}

unint64_t sub_1CD1178B4(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t sub_1CD1178C0(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *sub_1CD1178D0(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    int v3 = *((_DWORD *)result + 32);
LABEL_5:
    uint64_t v4 = &unk_1F26477C0;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 148))
  {
    int v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3) {
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t sub_1CD117954(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void *sub_1CD117968(uint64_t a1, uint64_t a2)
{
  return sub_1CD42FB24((void *)(a1 + 152), a2);
}

void sub_1CD117970(void *a1)
{
  *a1 = &unk_1F2647770;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD1179E4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CD1179EC(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1CD117A00(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1CD117A14(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1CD117A28(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void sub_1CD117A54()
{
}

void sub_1CD117A94(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD117ACC(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

uint64_t sub_1CD117AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 191) < 0) {
    operator delete(*(void **)(a2 + 168));
  }
  *(unsigned char *)(a2 + 168) = 0;
  *(unsigned char *)(a2 + 191) = 0;
  if (*(char *)(a2 + 215) < 0) {
    operator delete(*(void **)(a2 + 192));
  }
  *(unsigned char *)(a2 + 192) = 0;
  *(unsigned char *)(a2 + 215) = 0;
  llvm::DataLayout::reset(a2 + 272, "", 0);
  for (uint64_t i = 0; i != 6; ++i)
  {
    uint64_t v4 = off_1E685A1B8[i];
    __int16 v115 = 257;
    if (*v4)
    {
      v113 = (char *)v4;
      char v5 = 3;
    }
    else
    {
      char v5 = 1;
    }
    LOBYTE(v115) = v5;
    NamedMetadata = (llvm::Module **)llvm::Module::getNamedMetadata((llvm::Module *)a2, (const char **)&v113);
    if (NamedMetadata) {
      llvm::Module::eraseNamedMetadata(NamedMetadata[5], (llvm::NamedMDNode *)NamedMetadata);
    }
  }
  v118[0] = &unk_1F26478A0;
  v119 = v118;
  sub_1CD1184E0("llvm.module.flags", (unsigned __int8 *)0x11, (llvm::Module *)a2, (uint64_t)v118);
  if (v119 == v118)
  {
    (*(void (**)(void *))(v118[0] + 32))(v118);
  }
  else if (v119)
  {
    (*(void (**)(void *))(*v119 + 40))(v119);
  }
  v116[0] = &unk_1F26478E8;
  v117 = v116;
  sub_1CD1184E0("agxcompiler.config", (unsigned __int8 *)0x12, (llvm::Module *)a2, (uint64_t)v116);
  if (v117 == v116)
  {
    (*(void (**)(void *))(v116[0] + 32))(v116);
  }
  else if (v117)
  {
    (*(void (**)(void *))(*v117 + 40))(v117);
  }
  if (dword_1EBCFB5D0 != 1)
  {
    v113 = "agx.reduce.reg.pressure";
    __int16 v115 = 259;
    uint64_t v8 = llvm::Module::getNamedMetadata((llvm::Module *)a2, (const char **)&v113);
    if (v8)
    {
      size_t v9 = *(uint64_t ***)(v8 + 48);
      if (*((_DWORD *)v9 + 2) == 1)
      {
        uint64_t v10 = **v9;
        if (*(_DWORD *)(v10 + 8) == 1)
        {
          uint64_t v11 = *(void *)(v10 - 8);
          if (*(unsigned char *)v11 == 1)
          {
            uint64_t v12 = *(void *)(v11 + 128);
            if (*(unsigned char *)(v12 + 16) == 16 && *(_DWORD *)(v12 + 32) == 1 && !*(void *)(v12 + 24)) {
              llvm::Module::eraseNamedMetadata(*(llvm::Module **)(v8 + 40), (llvm::NamedMDNode *)v8);
            }
          }
        }
      }
    }
    v113 = "agx.interpolations";
    __int16 v115 = 259;
    BOOL v13 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata((llvm::Module *)a2, (const char **)&v113);
    sub_1CD118A58(v13);
    v113 = "agx.driver_bindings";
    __int16 v115 = 259;
    unsigned int v14 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata((llvm::Module *)a2, (const char **)&v113);
    sub_1CD118A58(v14);
    v113 = "llvm.ident";
    __int16 v115 = 259;
    int v15 = (llvm::Module **)llvm::Module::getNamedMetadata((llvm::Module *)a2, (const char **)&v113);
    if (v15) {
      llvm::Module::eraseNamedMetadata(v15[5], (llvm::NamedMDNode *)v15);
    }
    llvm::Module::getIdentifiedStructTypes((llvm::Module *)a2, &v113);
    uint64_t v16 = (uint64_t *)v113;
    uint64_t v17 = (uint64_t *)v114;
    if (v113 != v114)
    {
      do
      {
        uint64_t v18 = *v16++;
        llvm::StructType::setName(v18, "", 0);
      }
      while (v16 != v17);
      uint64_t v16 = (uint64_t *)v113;
    }
    if (v16)
    {
      v114 = (const char *)v16;
      operator delete(v16);
    }
    uint64_t v19 = *(void *)(a2 + 16);
    if (v19 != a2 + 8)
    {
      while (1)
      {
        if (v19) {
          __int16 v20 = (llvm::Value *)(v19 - 56);
        }
        else {
          __int16 v20 = 0;
        }
        __int16 v115 = 257;
        llvm::Value::setNameImpl(v20, (const char **)&v113);
        if (!v19 || *((unsigned char *)v20 + 16)) {
          goto LABEL_43;
        }
        if ((*((unsigned char *)v20 + 23) & 0x10) == 0)
        {
LABEL_60:
          int v34 = 0;
          *((_DWORD *)v20 + 8) &= ~0x2000u;
          goto LABEL_61;
        }
        uint64_t v21 = ***(void ***)v20;
        uint64_t v22 = *(void *)(v21 + 152);
        uint64_t v23 = *(unsigned int *)(v21 + 168);
        if (!v23) {
          goto LABEL_52;
        }
        LODWORD(v24) = (v23 - 1) & ((v20 >> 4) ^ (v20 >> 9));
        unsigned int v25 = (llvm::Value **)(v22 + 16 * v24);
        v26 = *v25;
        if (*v25 != v20) {
          break;
        }
LABEL_53:
        v29 = v25[1];
        unint64_t v32 = *(void *)v29;
        v30 = (char *)v29 + 16;
        unint64_t v31 = v32;
        if (v32 < 5) {
          goto LABEL_60;
        }
        if (*(_DWORD *)v30 != *(_DWORD *)"llvm." || v30[4] != aLlvm_1[4]) {
          goto LABEL_60;
        }
        *((_DWORD *)v20 + 8) |= 0x2000u;
        int v34 = llvm::Function::lookupIntrinsicID(v30, v31);
LABEL_61:
        *((_DWORD *)v20 + 9) = v34;
LABEL_43:
        uint64_t v19 = *(void *)(v19 + 8);
        if (v19 == a2 + 8) {
          goto LABEL_62;
        }
      }
      int v27 = 1;
      while (v26 != (llvm::Value *)-4096)
      {
        int v28 = v24 + v27++;
        uint64_t v24 = v28 & (v23 - 1);
        v26 = *(llvm::Value **)(v22 + 16 * v24);
        if (v26 == v20)
        {
          unsigned int v25 = (llvm::Value **)(v22 + 16 * v24);
          goto LABEL_53;
        }
      }
LABEL_52:
      unsigned int v25 = (llvm::Value **)(v22 + 16 * v23);
      goto LABEL_53;
    }
LABEL_62:
    uint64_t v35 = a2 + 24;
    uint64_t v36 = *(void *)(a2 + 32);
    if (v36 == a2 + 24) {
      return 1;
    }
    while (2)
    {
      if (v36) {
        v37 = (uint64_t ***)(v36 - 56);
      }
      else {
        v37 = 0;
      }
      if ((*((unsigned char *)v37 + 23) & 0x10) == 0) {
        goto LABEL_81;
      }
      uint64_t v38 = ***v37;
      uint64_t v39 = *(void *)(v38 + 152);
      uint64_t v40 = *(unsigned int *)(v38 + 168);
      if (v40)
      {
        LODWORD(v41) = (v40 - 1) & ((v37 >> 4) ^ (v37 >> 9));
        v42 = (uint64_t ****)(v39 + 16 * v41);
        v43 = *v42;
        if (*v42 != v37)
        {
          int v44 = 1;
          do
          {
            if (v43 == (uint64_t ***)-4096) {
              goto LABEL_73;
            }
            int v45 = v41 + v44++;
            uint64_t v41 = v45 & (v40 - 1);
            v43 = *(uint64_t ****)(v39 + 16 * v41);
          }
          while (v43 != v37);
          v42 = (uint64_t ****)(v39 + 16 * v41);
        }
      }
      else
      {
LABEL_73:
        v42 = (uint64_t ****)(v39 + 16 * v40);
      }
      v46 = v42[1];
      if ((unint64_t)*v46 < 5
        || (*((_DWORD *)v46 + 4) == 1836477548 ? (BOOL v47 = *((unsigned char *)v46 + 20) == 46) : (BOOL v47 = 0),
            !v47 && ((unint64_t)*v46 < 8 || v46[2] != (uint64_t **)0x6E69616D2E636761)))
      {
LABEL_81:
        __int16 v115 = 257;
        llvm::Value::setNameImpl((llvm::Value *)v37, (const char **)&v113);
        if (v36 && !*((unsigned char *)v37 + 16))
        {
          if ((*((unsigned char *)v37 + 23) & 0x10) == 0) {
            goto LABEL_178;
          }
          uint64_t v99 = ***v37;
          uint64_t v100 = *(void *)(v99 + 152);
          uint64_t v101 = *(unsigned int *)(v99 + 168);
          if (v101)
          {
            LODWORD(v102) = (v101 - 1) & ((v37 >> 4) ^ (v37 >> 9));
            v103 = (uint64_t ****)(v100 + 16 * v102);
            v104 = *v103;
            if (*v103 != v37)
            {
              int v105 = 1;
              do
              {
                if (v104 == (uint64_t ***)-4096) {
                  goto LABEL_170;
                }
                int v106 = v102 + v105++;
                uint64_t v102 = v106 & (v101 - 1);
                v104 = *(uint64_t ****)(v100 + 16 * v102);
              }
              while (v104 != v37);
              v103 = (uint64_t ****)(v100 + 16 * v102);
            }
          }
          else
          {
LABEL_170:
            v103 = (uint64_t ****)(v100 + 16 * v101);
          }
          v107 = v103[1];
          unint64_t v110 = (unint64_t)*v107;
          v108 = v107 + 2;
          unint64_t v109 = v110;
          if (v110 >= 5 && (*(_DWORD *)v108 == *(_DWORD *)"llvm." ? (BOOL v111 = v108[4] == aLlvm_1[4]) : (BOOL v111 = 0), v111))
          {
            *((_DWORD *)v37 + 8) |= 0x2000u;
            int v112 = llvm::Function::lookupIntrinsicID(v108, v109);
          }
          else
          {
LABEL_178:
            int v112 = 0;
            *((_DWORD *)v37 + 8) &= ~0x2000u;
          }
          *((_DWORD *)v37 + 9) = v112;
        }
      }
      if (*((_WORD *)v37 + 9))
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)v37);
        v48 = (llvm::Value *)v37[11];
        if (*((_WORD *)v37 + 9))
        {
          llvm::Function::BuildLazyArguments((llvm::Function *)v37);
          v49 = (llvm::Value *)v37[11];
LABEL_86:
          v50 = (llvm::Value *)((char *)v49 + 40 * (void)v37[12]);
          while (v48 != v50)
          {
            __int16 v115 = 257;
            llvm::Value::setNameImpl(v48, (const char **)&v113);
            if (v48 && !*((unsigned char *)v48 + 16))
            {
              if ((*((unsigned char *)v48 + 23) & 0x10) == 0) {
                goto LABEL_106;
              }
              uint64_t v51 = ***(void ***)v48;
              uint64_t v52 = *(void *)(v51 + 152);
              uint64_t v53 = *(unsigned int *)(v51 + 168);
              if (!v53) {
                goto LABEL_98;
              }
              LODWORD(v54) = (v53 - 1) & ((v48 >> 4) ^ (v48 >> 9));
              v55 = (llvm::Value **)(v52 + 16 * v54);
              v56 = *v55;
              if (*v55 != v48)
              {
                int v57 = 1;
                while (v56 != (llvm::Value *)-4096)
                {
                  int v58 = v54 + v57++;
                  uint64_t v54 = v58 & (v53 - 1);
                  v56 = *(llvm::Value **)(v52 + 16 * v54);
                  if (v56 == v48)
                  {
                    v55 = (llvm::Value **)(v52 + 16 * v54);
                    goto LABEL_99;
                  }
                }
LABEL_98:
                v55 = (llvm::Value **)(v52 + 16 * v53);
              }
LABEL_99:
              v59 = v55[1];
              unint64_t v62 = *(void *)v59;
              v60 = (char *)v59 + 16;
              unint64_t v61 = v62;
              if (v62 >= 5 && (*(_DWORD *)v60 == *(_DWORD *)"llvm." ? (BOOL v63 = v60[4] == aLlvm_1[4]) : (BOOL v63 = 0), v63))
              {
                *((_DWORD *)v48 + 8) |= 0x2000u;
                int v64 = llvm::Function::lookupIntrinsicID(v60, v61);
              }
              else
              {
LABEL_106:
                int v64 = 0;
                *((_DWORD *)v48 + 8) &= ~0x2000u;
              }
              *((_DWORD *)v48 + 9) = v64;
            }
            v48 = (llvm::Value *)((char *)v48 + 40);
          }
          v65 = (uint64_t **)(v37 + 9);
          v66 = v37[10];
LABEL_109:
          if (v66 == v65)
          {
            uint64_t v36 = *(void *)(v36 + 8);
            if (v36 == v35) {
              return 1;
            }
            continue;
          }
          if (v66) {
            v67 = (llvm::Value *)(v66 - 3);
          }
          else {
            v67 = 0;
          }
          __int16 v115 = 257;
          llvm::Value::setNameImpl(v67, (const char **)&v113);
          if (!v66 || *((unsigned char *)v67 + 16)) {
            goto LABEL_115;
          }
          if ((*((unsigned char *)v67 + 23) & 0x10) == 0) {
            goto LABEL_157;
          }
          uint64_t v85 = ***(void ***)v67;
          uint64_t v86 = *(void *)(v85 + 152);
          uint64_t v87 = *(unsigned int *)(v85 + 168);
          if (v87)
          {
            LODWORD(v88) = (v87 - 1) & ((v67 >> 4) ^ (v67 >> 9));
            v89 = (llvm::Value **)(v86 + 16 * v88);
            v90 = *v89;
            if (*v89 == v67)
            {
LABEL_150:
              v93 = v89[1];
              unint64_t v96 = *(void *)v93;
              v94 = (char *)v93 + 16;
              unint64_t v95 = v96;
              if (v96 >= 5 && *(_DWORD *)v94 == *(_DWORD *)"llvm." && v94[4] == aLlvm_1[4])
              {
                *((_DWORD *)v67 + 8) |= 0x2000u;
                int v98 = llvm::Function::lookupIntrinsicID(v94, v95);
LABEL_158:
                *((_DWORD *)v67 + 9) = v98;
LABEL_115:
                v68 = (void ***)((char *)v67 + 40);
                for (j = (void **)*((void *)v67 + 6); ; j = (void **)j[1])
                {
                  if (j == v68)
                  {
                    v66 = (uint64_t **)v66[1];
                    goto LABEL_109;
                  }
                  v70 = j ? (llvm::Value *)(j - 3) : 0;
                  if (*(unsigned char *)(*(void *)v70 + 8) != 7)
                  {
                    __int16 v115 = 257;
                    llvm::Value::setNameImpl(v70, (const char **)&v113);
                    if (j)
                    {
                      if (!*((unsigned char *)v70 + 16)) {
                        break;
                      }
                    }
                  }
LABEL_123:
                  ;
                }
                if ((*((unsigned char *)v70 + 23) & 0x10) == 0) {
                  goto LABEL_139;
                }
                uint64_t v71 = ***(void ***)v70;
                uint64_t v72 = *(void *)(v71 + 152);
                uint64_t v73 = *(unsigned int *)(v71 + 168);
                if (v73)
                {
                  LODWORD(v74) = (v73 - 1) & ((v70 >> 4) ^ (v70 >> 9));
                  v75 = (llvm::Value **)(v72 + 16 * v74);
                  v76 = *v75;
                  if (*v75 == v70)
                  {
LABEL_132:
                    v79 = v75[1];
                    unint64_t v82 = *(void *)v79;
                    v80 = (char *)v79 + 16;
                    unint64_t v81 = v82;
                    if (v82 >= 5 && *(_DWORD *)v80 == *(_DWORD *)"llvm." && v80[4] == aLlvm_1[4])
                    {
                      *((_DWORD *)v70 + 8) |= 0x2000u;
                      int v84 = llvm::Function::lookupIntrinsicID(v80, v81);
LABEL_140:
                      *((_DWORD *)v70 + 9) = v84;
                      goto LABEL_123;
                    }
LABEL_139:
                    int v84 = 0;
                    *((_DWORD *)v70 + 8) &= ~0x2000u;
                    goto LABEL_140;
                  }
                  int v77 = 1;
                  while (v76 != (llvm::Value *)-4096)
                  {
                    int v78 = v74 + v77++;
                    uint64_t v74 = v78 & (v73 - 1);
                    v76 = *(llvm::Value **)(v72 + 16 * v74);
                    if (v76 == v70)
                    {
                      v75 = (llvm::Value **)(v72 + 16 * v74);
                      goto LABEL_132;
                    }
                  }
                }
                v75 = (llvm::Value **)(v72 + 16 * v73);
                goto LABEL_132;
              }
LABEL_157:
              int v98 = 0;
              *((_DWORD *)v67 + 8) &= ~0x2000u;
              goto LABEL_158;
            }
            int v91 = 1;
            while (v90 != (llvm::Value *)-4096)
            {
              int v92 = v88 + v91++;
              uint64_t v88 = v92 & (v87 - 1);
              v90 = *(llvm::Value **)(v86 + 16 * v88);
              if (v90 == v67)
              {
                v89 = (llvm::Value **)(v86 + 16 * v88);
                goto LABEL_150;
              }
            }
          }
          v89 = (llvm::Value **)(v86 + 16 * v87);
          goto LABEL_150;
        }
      }
      else
      {
        v48 = (llvm::Value *)v37[11];
      }
      break;
    }
    v49 = v48;
    goto LABEL_86;
  }
  return 1;
}

void sub_1CD1184E0(unsigned __int8 *a1, unsigned __int8 *a2, llvm::Module *this, uint64_t a4)
{
  v27[16] = *MEMORY[0x1E4F143B8];
  v24[0] = 1;
  uint64_t v6 = 1;
  int64x2_t v7 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v24[v6] = v7;
    v6 += 2;
  }
  while (v6 != 17);
  unsigned int v25 = v27;
  uint64_t v26 = 0x1000000000;
  __int16 v23 = 261;
  v22[0] = a1;
  v22[1] = a2;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(this, (const char **)v22);
  if (NamedMetadata)
  {
    uint64_t v9 = NamedMetadata;
    uint64_t v10 = *(unsigned int *)(*(void *)(NamedMetadata + 48) + 8);
    if (v10)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *(void *)this;
      uint64_t v13 = 8 * v10;
      do
      {
        uint64_t v21 = 0;
        uint64_t v21 = *(unsigned __int8 **)(**(void **)(v9 + 48) + v11);
        if (sub_1CD6A0E6C((uint64_t)v24, (uint64_t *)&v21))
        {
          v22[0] = v21;
          uint64_t v14 = *(void *)(a4 + 24);
          if (!v14)
          {
            sub_1CB920400();
            JUMPOUT(0x1CD1186D8);
          }
          (*(void (**)(uint64_t, unsigned __int8 **, void *, uint64_t))(*(void *)v14 + 48))(v14, v22, v24, v12);
        }
        v11 += 8;
      }
      while (v13 != v11);
    }
    llvm::NamedMDNode::clearOperands(v9);
    if (v26)
    {
      int v15 = (unsigned __int8 **)v25;
      uint64_t v16 = 8 * v26;
      do
      {
        uint64_t v17 = *v15;
        v22[0] = *v15;
        uint64_t v18 = *(void *)(v9 + 48);
        uint64_t v19 = *(unsigned int *)(v18 + 8);
        if (v19 >= *(_DWORD *)(v18 + 12))
        {
          sub_1CC608328(*(void *)(v9 + 48), v22);
        }
        else
        {
          __int16 v20 = (unsigned __int8 **)(*(void *)v18 + 8 * v19);
          llvm::Value *v20 = v17;
          if (v17)
          {
            llvm::MetadataTracking::track((uint64_t)v20, v17, 2);
            LODWORD(v19) = *(_DWORD *)(v18 + 8);
          }
          *(_DWORD *)(v18 + 8) = v19 + 1;
        }
        ++v15;
        v16 -= 8;
      }
      while (v16);
    }
  }
  if (v25 != v27) {
    free(v25);
  }
  if ((v24[0] & 1) == 0) {
    MEMORY[0x1D25D9CD0](v24[1], 8);
  }
}

void sub_1CD1186DC()
{
}

void *sub_1CD1186F0()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F26478A0;
  return result;
}

void sub_1CD118728(uint64_t a1, void *a2)
{
  *a2 = &unk_1F26478A0;
}

void sub_1CD118750(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v13 = v3;
  if (*(_DWORD *)(v3 + 8) == 3)
  {
    uint64_t v4 = *(void *)(v3 - 16);
    if (!*(unsigned char *)v4)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = *(char ***)(v4 + 8);
      uint64_t v11 = *v8;
      uint64_t v9 = v8 + 3;
      uint64_t v10 = v11;
      do
      {
        BOOL v12 = (&off_1E685A1E8)[v6 + 1] == v10;
        if (v10 && (&off_1E685A1E8)[v6 + 1] == v10) {
          BOOL v12 = memcmp((&off_1E685A1E8)[v6], v9, (size_t)v10) == 0;
        }
        v7 += v12;
        v6 += 2;
      }
      while (v6 != 12);
      if (v7) {
        sub_1CD7B505C(a3, &v13);
      }
    }
  }
}

void sub_1CD118818()
{
}

void *sub_1CD11882C()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F26478E8;
  return result;
}

void sub_1CD118864(uint64_t a1, void *a2)
{
  *a2 = &unk_1F26478E8;
}

void sub_1CD11888C(int a1, uint64_t *a2, uint64_t a3, llvm::IntegerType *this)
{
  v30[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  uint64_t v29 = v4;
  if (*(_DWORD *)(v4 + 8) != 2) {
    return;
  }
  uint64_t v5 = *(void *)(v4 - 16);
  if (*(unsigned char *)v5) {
    return;
  }
  uint64_t v7 = *(uint64_t **)(v5 + 8);
  uint64_t v8 = *v7;
  if (*v7 == 21)
  {
    uint64_t v9 = v7[3];
    uint64_t v10 = v7[4];
    uint64_t v11 = *(uint64_t *)((char *)v7 + 37);
    if (v9 == 0x525458455F584741 && v10 == 0x415F4D564C4C5F41 && v11 == 0x4249525454415F4DLL) {
      sub_1CD7B505C(a3, &v29);
    }
    return;
  }
  if (dword_1EBCFB5D0 == 1) {
    return;
  }
  if (v8 != 16)
  {
    if (v8 != 7) {
      return;
    }
    int v15 = *((_DWORD *)v7 + 6);
    int v16 = *(_DWORD *)((char *)v7 + 27);
    if (v15 != 1215588679 || v16 != 1752392008) {
      return;
    }
    uint64_t v18 = llvm::MDString::get((uint64_t *)this, "", 0);
LABEL_29:
    int v27 = v18;
    sub_1CD7B505C(a3, &v29);
    v30[0] = v5;
    v30[1] = v27;
    Impl = llvm::MDTuple::getImpl((uint64_t)this, v30, 2, 0, 1);
    sub_1CD6A0E6C(a3, (uint64_t *)&Impl);
    return;
  }
  uint64_t v20 = v7[3];
  uint64_t v19 = v7[4];
  if (v20 == 0x2E74736575716552 && v19 == 0x4449726564616853)
  {
    uint64_t v22 = (llvm::Constant *)llvm::IntegerType::get(this, (llvm::LLVMContext *)0x20);
    NullValue = llvm::Constant::getNullValue(v22, v23, v24);
    uint64_t v18 = (void *)llvm::ValueAsMetadata::get(NullValue, v26);
    if (v18) {
      goto LABEL_29;
    }
  }
}

void sub_1CD118A58(llvm::NamedMDNode *a1)
{
  v17[8] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v15 = v17;
    uint64_t v16 = 0x800000000;
    uint64_t v2 = *(unsigned int *)(*((void *)a1 + 6) + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      unsigned int v4 = 0;
      uint64_t v5 = 8 * v2;
      while (1)
      {
        uint64_t v6 = *(void *)(**((void **)a1 + 6) + v3);
        if (*(unsigned char *)v6 != 4) {
          break;
        }
        uint64_t v7 = *(unsigned int *)(v6 + 8);
        if (!v7) {
          break;
        }
        if (*(void *)(v6 - 8 * v7))
        {
          if (v4 >= HIDWORD(v16)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v15 + v4) = v6;
          unsigned int v4 = v16 + 1;
          LODWORD(v16) = v16 + 1;
        }
        v3 += 8;
        if (v5 == v3)
        {
          if (!v4) {
            goto LABEL_23;
          }
          if (v4 < *(_DWORD *)(*((void *)a1 + 6) + 8))
          {
            llvm::NamedMDNode::clearOperands((uint64_t)a1);
            if (v16)
            {
              uint64_t v8 = (unsigned __int8 **)v15;
              uint64_t v9 = 8 * v16;
              do
              {
                uint64_t v10 = *v8;
                uint64_t v14 = *v8;
                uint64_t v11 = *((void *)a1 + 6);
                uint64_t v12 = *(unsigned int *)(v11 + 8);
                if (v12 >= *(_DWORD *)(v11 + 12))
                {
                  sub_1CC608328(*((void *)a1 + 6), &v14);
                }
                else
                {
                  uint64_t v13 = (unsigned __int8 **)(*(void *)v11 + 8 * v12);
                  *uint64_t v13 = v10;
                  if (v10)
                  {
                    llvm::MetadataTracking::track((uint64_t)v13, v10, 2);
                    LODWORD(v12) = *(_DWORD *)(v11 + 8);
                  }
                  *(_DWORD *)(v11 + 8) = v12 + 1;
                }
                ++v8;
                v9 -= 8;
              }
              while (v9);
            }
          }
          break;
        }
      }
    }
    else
    {
LABEL_23:
      llvm::Module::eraseNamedMetadata(*((llvm::Module **)a1 + 5), a1);
    }
    if (v15 != v17) {
      free(v15);
    }
  }
}

void sub_1CD118C14()
{
}

void *sub_1CD118C28()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F2647930;
  return result;
}

void sub_1CD118C60(uint64_t a1, void *a2)
{
  *a2 = &unk_1F2647930;
}

uint64_t sub_1CD118C8C()
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v35 = v37;
  v37[0] = "agx-canon-dedup";
  v37[1] = 15;
  int v38 = 0;
  uint64_t v39 = "Strip all metadata that does not change assembly output (or WILL in undesirable way), drop most type and value n"
        "ames. Optimal for IR deduplication purposes";
  uint64_t v40 = 155;
  uint64_t v41 = "agx-canon-test";
  uint64_t v42 = 14;
  int v43 = 1;
  int v44 = "Only strip metadata that we don't care to have in OfflineIR suite and regression tests";
  uint64_t v45 = 86;
  uint64_t v36 = 0x400000002;
  uint64_t v0 = sub_1CB883A14((uint64_t)&unk_1EBCFB550, 0, 0);
  *(_DWORD *)(v0 + 128) = 0;
  *(void *)(v0 + 136) = &unk_1F26477C0;
  *(void *)(v0 + 144) = 0;
  *(void *)uint64_t v0 = &unk_1F2647708;
  *(void *)(v0 + 152) = &unk_1F2647770;
  *(void *)(v0 + 160) = v0;
  *(void *)(v0 + 168) = v0 + 184;
  *(void *)(v0 + 176) = 0x800000000;
  *(void *)(v0 + 568) = &unk_1F2647930;
  *(void *)(v0 + 592) = v0 + 568;
  *(void *)(v0 + 32) = "Pick mode of operation for agx-shader-canonicalizer:";
  *(void *)(v0 + 40) = 52;
  if (v36)
  {
    int v1 = (char *)v35;
    uint64_t v2 = (char *)v35 + 40 * v36;
    do
    {
      uint64_t v3 = *(unsigned __int8 **)v1;
      size_t v4 = *((void *)v1 + 1);
      long long v5 = *(_OWORD *)(v1 + 24);
      int v6 = *((_DWORD *)v1 + 4);
      v30[0] = *(void *)v1;
      v30[1] = v4;
      long long v31 = v5;
      unint64_t v32 = &unk_1F26477C0;
      char v34 = 1;
      int v33 = v6;
      unsigned int v7 = dword_1EBCFB600;
      uint64_t v8 = qword_1EBCFB5F8;
      if (dword_1EBCFB600 >= dword_1EBCFB604)
      {
        unint64_t v14 = dword_1EBCFB600 + 1;
        BOOL v16 = qword_1EBCFB5F8 <= (unint64_t)v30
           && qword_1EBCFB5F8 + 48 * (unint64_t)dword_1EBCFB600 > (unint64_t)v30;
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v30 - qword_1EBCFB5F8) >> 4);
        BOOL v29 = v16;
        if (!v16) {
          unint64_t v17 = -1;
        }
        unint64_t v28 = v17;
        if (dword_1EBCFB600 == -1) {
          sub_1CD0A88F0(v14);
        }
        if (dword_1EBCFB604 == -1) {
          sub_1CD0A89A8(0xFFFFFFFFuLL);
        }
        unint64_t v18 = (2 * dword_1EBCFB604) | 1;
        if (v18 <= v14) {
          unint64_t v18 = dword_1EBCFB600 + 1;
        }
        if (v18 >= 0xFFFFFFFF) {
          unint64_t v18 = 0xFFFFFFFFLL;
        }
        int v27 = v18;
        uint64_t v19 = malloc_type_malloc(48 * v18, 0x4065EBACuLL);
        if (!v19) {
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        }
        uint64_t v8 = (uint64_t)v19;
        uint64_t v20 = (_OWORD *)qword_1EBCFB5F8;
        if (dword_1EBCFB600)
        {
          uint64_t v21 = qword_1EBCFB5F8 + 48 * dword_1EBCFB600;
          uint64_t v22 = v8 + 32;
          uint64_t v23 = v8;
          do
          {
            long long v24 = v20[1];
            *(_OWORD *)uint64_t v23 = *v20;
            *(_OWORD *)(v23 + 16) = v24;
            *(void *)(v23 + 32) = &unk_1F26477E0;
            int v25 = *((_DWORD *)v20 + 10);
            *(unsigned char *)(v23 + 44) = *((unsigned char *)v20 + 44);
            *(_DWORD *)(v23 + 40) = v25;
            *(void *)(v23 + 32) = &unk_1F26477C0;
            v22 += 48;
            v20 += 3;
            v23 += 48;
          }
          while (v20 != (_OWORD *)v21);
          uint64_t v20 = (_OWORD *)qword_1EBCFB5F8;
        }
        if (v20 != (_OWORD *)&unk_1EBCFB608) {
          free(v20);
        }
        qword_1EBCFB5F8 = v8;
        dword_1EBCFB604 = v27;
        uint64_t v9 = v30;
        if (v29)
        {
          uint64_t v9 = (_OWORD *)(v8 + 48 * v28);
          uint64_t v10 = (int *)v9 + 10;
        }
        else
        {
          uint64_t v10 = &v33;
        }
        unsigned int v7 = dword_1EBCFB600;
      }
      else
      {
        uint64_t v9 = v30;
        uint64_t v10 = &v33;
      }
      uint64_t v11 = v8 + 48 * v7;
      long long v12 = v9[1];
      *(_OWORD *)uint64_t v11 = *v9;
      *(_OWORD *)(v11 + 16) = v12;
      *(void *)(v11 + 32) = &unk_1F26477E0;
      int v13 = *v10;
      *(unsigned char *)(v11 + 44) = *((unsigned char *)v10 + 4);
      *(_DWORD *)(v11 + 40) = v13;
      *(void *)(v11 + 32) = &unk_1F26477C0;
      ++dword_1EBCFB600;
      llvm::cl::AddLiteralOption(qword_1EBCFB5F0, v3, v4);
      v1 += 40;
    }
    while (v1 != v2);
  }
  dword_1EBCFB5D0 = 0;
  byte_1EBCFB5E4 = 1;
  dword_1EBCFB5E0 = 0;
  word_1EBCFB55A = word_1EBCFB55A & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&unk_1EBCFB550);
  if (v35 != v37) {
    free(v35);
  }
  return __cxa_atexit((void (*)(void *))sub_1CD11736C, &unk_1EBCFB550, &dword_1CB82C000);
}

void llvm::initializeAddDiscriminatorsLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFB880, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CD119178;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCFB880, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD119178()
{
}

uint64_t sub_1CD119214(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCFB878;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2647978;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFB880, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CD119178;
    v5[1] = &PassRegistry;
    size_t v4 = v5;
    std::__call_once(&qword_1EBCFB880, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CD1192C4(uint64_t a1, llvm::Module *a2)
{
  if (byte_1EBCFB838 || (*(unsigned char *)(a1 + 23) & 0x20) == 0)
  {
LABEL_2:
    char v2 = 0;
    return v2 & 1;
  }
  uint64_t v5 = ***(void ***)a1;
  v99[0] = a1;
  int v6 = *(_DWORD *)(v5 + 2496);
  if (!v6)
  {
    uint64_t v86 = 0;
LABEL_154:
    uint64_t v10 = sub_1CC609054(v5 + 2480, (uint64_t)v99, v99, v86);
    uint64_t v87 = v99[0];
    v10[3] = 0;
    v10[4] = 0;
    *uint64_t v10 = v87;
    v10[1] = v10 + 3;
    v10[2] = 0x100000000;
    goto LABEL_15;
  }
  uint64_t v7 = *(void *)(v5 + 2480);
  int v8 = v6 - 1;
  unsigned int v9 = v8 & ((a1 >> 4) ^ (a1 >> 9));
  uint64_t v10 = (void *)(v7 + 40 * v9);
  uint64_t v11 = *v10;
  if (*v10 != a1)
  {
    long long v12 = 0;
    int v13 = 1;
    while (v11 != -4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v11 == -8192;
      }
      if (v14) {
        long long v12 = v10;
      }
      unsigned int v15 = v9 + v13++;
      unsigned int v9 = v15 & v8;
      uint64_t v10 = (void *)(v7 + 40 * v9);
      uint64_t v11 = *v10;
      if (*v10 == a1) {
        goto LABEL_15;
      }
    }
    if (v12) {
      uint64_t v86 = v12;
    }
    else {
      uint64_t v86 = v10;
    }
    goto LABEL_154;
  }
LABEL_15:
  uint64_t v16 = *((unsigned int *)v10 + 4);
  if (!v16) {
    goto LABEL_2;
  }
  unint64_t v17 = (void *)(v10[1] + 8);
  uint64_t v18 = 16 * v16;
  char v2 = 0;
  while (*((_DWORD *)v17 - 2))
  {
    v17 += 2;
    v18 -= 16;
    if (!v18) {
      return v2 & 1;
    }
  }
  if (!*v17) {
    goto LABEL_2;
  }
  if (byte_1EBD064B8) {
    llvm::sampleprofutil::createFSDiscriminatorVariable(*(llvm::Type ***)(a1 + 40), a2);
  }
  char v2 = 0;
  v97[0] = 0;
  v97[1] = 0;
  unsigned int v98 = 0;
  uint64_t v19 = a1 + 72;
  v95[0] = 0;
  v95[1] = 0;
  int v96 = 0;
  uint64_t v20 = *(void *)(a1 + 80);
  if (v20 == a1 + 72) {
    goto LABEL_150;
  }
  char v2 = 0;
  do
  {
    if (v20) {
      uint64_t v21 = v20 - 24;
    }
    else {
      uint64_t v21 = 0;
    }
    for (uint64_t i = *(void *)(v21 + 48); i != v21 + 40; uint64_t i = *(void *)(i + 8))
    {
      if (i) {
        uint64_t v23 = i - 24;
      }
      else {
        uint64_t v23 = 0;
      }
      if (*(unsigned char *)(v23 + 16) == 84)
      {
        uint64_t v24 = *(void *)(v23 - 32);
        if (v24)
        {
          if (!*(unsigned char *)(v24 + 16)
            && *(void *)(v24 + 24) == *(void *)(v23 + 72)
            && (*(unsigned char *)(v24 + 33) & 0x20) != 0
            && !sub_1CBFB3AB0(v23))
          {
            continue;
          }
        }
      }
      uint64_t v27 = *(void *)(v23 + 48);
      int v25 = (unsigned __int8 **)(v23 + 48);
      uint64_t v26 = v27;
      if (v27)
      {
        uint64_t v28 = *(void *)(v26 - 8 * *(unsigned int *)(v26 + 8));
        if (*(unsigned char *)v28 == 15 || (uint64_t v28 = *(void *)(v28 - 8 * *(unsigned int *)(v28 + 8))) != 0)
        {
          uint64_t v28 = *(void *)(v28 - 8 * *(unsigned int *)(v28 + 8));
          if (v28)
          {
            BOOL v29 = *(void **)(v28 + 8);
            uint64_t v31 = *v29;
            v30 = (const char *)(v29 + 3);
            uint64_t v28 = v31;
          }
          else
          {
            v30 = 0;
          }
        }
        else
        {
          v30 = "";
        }
        int v32 = *(_DWORD *)(v26 + 4);
        int v92 = v30;
        uint64_t v93 = v28;
        int v94 = v32;
        uint64_t v33 = sub_1CD872C60((uint64_t)v97, (uint64_t)&v92);
        v89[0] = v21;
        sub_1CD4201D0(v33 + 24, v89, (uint64_t)v99);
        if (*(_DWORD *)(v33 + 32) != 1)
        {
          int v34 = v100;
          uint64_t v35 = sub_1CD873210((uint64_t)v95, (uint64_t)&v92);
          unint64_t v39 = *(unsigned int *)(v35 + 24);
          if (v34)
          {
            unint64_t v39 = (v39 + 1);
            *(_DWORD *)(v35 + 24) = v39;
          }
          uint64_t v40 = (unsigned __int8 *)sub_1CD872B88(v26, (llvm::DILocation *)v39, v36, v37, v38);
          if (!v41) {
            goto LABEL_55;
          }
          int v91 = v40;
          if (v40) {
            llvm::MetadataTracking::track((uint64_t)&v91, v40, 2);
          }
          if (&v91 != v25)
          {
            uint64_t v42 = *v25;
            if (!*v25) {
              goto LABEL_53;
            }
            int v44 = *v42;
            if ((v44 - 4) > 0x1E)
            {
              if ((v44 - 3) >= 0xFFFFFFFE) {
                BOOL v47 = *v25;
              }
              else {
                BOOL v47 = 0;
              }
              if ((v44 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v46 = (unint64_t)(v47 + 8);
LABEL_67:
                v99[0] = (uint64_t)v25;
                sub_1CC5FA668(v46 + 16, v99);
                goto LABEL_53;
              }
              if (v44 == 3) {
                *((void *)v42 + 1) = 0;
              }
            }
            else if ((v42[1] & 0x7F) == 2 || *((_DWORD *)v42 + 3))
            {
              uint64_t v45 = *((void *)v42 + 2);
              if ((v45 & 4) != 0)
              {
                unint64_t v46 = v45 & 0xFFFFFFFFFFFFFFF8;
                if (v46) {
                  goto LABEL_67;
                }
              }
            }
LABEL_53:
            int v43 = v91;
            *int v25 = v91;
            if (v43)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v91, v43, (uint64_t)v25);
              int v91 = 0;
            }
LABEL_55:
            char v2 = 1;
            continue;
          }
          if (!v91) {
            goto LABEL_55;
          }
          int v48 = *v91;
          if ((v48 - 4) > 0x1E)
          {
            if ((v48 - 3) >= 0xFFFFFFFE) {
              uint64_t v51 = v91;
            }
            else {
              uint64_t v51 = 0;
            }
            if ((v48 - 3) < 0xFFFFFFFE)
            {
              if (v48 == 3) {
                *((void *)v91 + 1) = 0;
              }
            }
            else
            {
              unint64_t v50 = (unint64_t)(v51 + 8);
LABEL_84:
              v99[0] = (uint64_t)&v91;
              sub_1CC5FA668(v50 + 16, v99);
            }
            goto LABEL_55;
          }
          if ((v91[1] & 0x7F) != 2 && !*((_DWORD *)v91 + 3)) {
            goto LABEL_55;
          }
          uint64_t v49 = *((void *)v91 + 2);
          char v2 = 1;
          if ((v49 & 4) != 0)
          {
            unint64_t v50 = v49 & 0xFFFFFFFFFFFFFFF8;
            if (v50) {
              goto LABEL_84;
            }
          }
        }
      }
    }
    uint64_t v20 = *(void *)(v20 + 8);
  }
  while (v20 != v19);
  uint64_t v52 = *(void *)(a1 + 80);
  if (v52 != v19)
  {
    while (1)
    {
      uint64_t v53 = v52 - 24;
      if (!v52) {
        uint64_t v53 = 0;
      }
      uint64_t v54 = v53 + 40;
      int v92 = 0;
      uint64_t v93 = 0;
      int v94 = 0;
      uint64_t v55 = *(void *)(v53 + 48);
      if (v55 != v53 + 40) {
        break;
      }
      int v84 = 0;
LABEL_149:
      MEMORY[0x1D25D9CD0](v84, 8);
      uint64_t v52 = *(void *)(v52 + 8);
      if (v52 == v19) {
        goto LABEL_150;
      }
    }
    while (2)
    {
      if (v55) {
        uint64_t v56 = v55 - 24;
      }
      else {
        uint64_t v56 = 0;
      }
      int v57 = *(unsigned __int8 *)(v56 + 16);
      if (v57 != 33)
      {
        if (v57 != 84) {
          goto LABEL_102;
        }
        uint64_t v58 = *(void *)(v56 - 32);
        if (v58)
        {
          if (!*(unsigned char *)(v58 + 16)
            && *(void *)(v58 + 24) == *(void *)(v56 + 72)
            && (*(unsigned char *)(v58 + 33) & 0x20) != 0)
          {
            goto LABEL_102;
          }
        }
      }
      uint64_t v61 = *(void *)(v56 + 48);
      v59 = (unsigned __int8 **)(v56 + 48);
      uint64_t v60 = v61;
      if (!v61) {
        goto LABEL_102;
      }
      uint64_t v62 = *(void *)(v60 - 8 * *(unsigned int *)(v60 + 8));
      if (*(unsigned char *)v62 == 15 || (uint64_t v62 = *(void *)(v62 - 8 * *(unsigned int *)(v62 + 8))) != 0)
      {
        uint64_t v62 = *(void *)(v62 - 8 * *(unsigned int *)(v62 + 8));
        if (v62)
        {
          BOOL v63 = *(void **)(v62 + 8);
          uint64_t v65 = *v63;
          int v64 = (const char *)(v63 + 3);
          uint64_t v62 = v65;
        }
        else
        {
          int v64 = 0;
        }
      }
      else
      {
        int v64 = "";
      }
      int v66 = *(_DWORD *)(v60 + 4);
      v89[0] = v64;
      v89[1] = v62;
      int v90 = v66;
      sub_1CD87366C((uint64_t)v99, (uint64_t)&v92, (uint64_t)v89);
      if (v100) {
        goto LABEL_102;
      }
      uint64_t v67 = sub_1CD873210((uint64_t)v95, (uint64_t)v89);
      v68 = (llvm::DILocation *)(*(_DWORD *)(v67 + 24) + 1);
      *(_DWORD *)(v67 + 24) = v68;
      uint64_t v72 = (unsigned __int8 *)sub_1CD872B88(v60, v68, v69, v70, v71);
      if (!v73) {
        goto LABEL_102;
      }
      uint64_t v88 = v72;
      if (v72) {
        llvm::MetadataTracking::track((uint64_t)&v88, v72, 2);
      }
      if (&v88 != v59)
      {
        uint64_t v74 = *v59;
        if (!*v59) {
          goto LABEL_114;
        }
        int v76 = *v74;
        if ((v76 - 4) <= 0x1E)
        {
          if ((v74[1] & 0x7F) != 2 && !*((_DWORD *)v74 + 3)) {
            goto LABEL_114;
          }
          uint64_t v77 = *((void *)v74 + 2);
          if ((v77 & 4) == 0) {
            goto LABEL_114;
          }
          unint64_t v78 = v77 & 0xFFFFFFFFFFFFFFF8;
          if (!v78) {
            goto LABEL_114;
          }
          goto LABEL_128;
        }
        if ((v76 - 3) >= 0xFFFFFFFE) {
          v79 = *v59;
        }
        else {
          v79 = 0;
        }
        if ((v76 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v78 = (unint64_t)(v79 + 8);
LABEL_128:
          v99[0] = (uint64_t)v59;
          sub_1CC5FA668(v78 + 16, v99);
          goto LABEL_114;
        }
        if (v76 == 3) {
          *((void *)v74 + 1) = 0;
        }
LABEL_114:
        v75 = v88;
        llvm::Value *v59 = v88;
        if (v75)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v88, v75, (uint64_t)v59);
          uint64_t v88 = 0;
        }
LABEL_116:
        char v2 = 1;
LABEL_102:
        uint64_t v55 = *(void *)(v55 + 8);
        if (v55 == v54)
        {
          int v84 = v92;
          goto LABEL_149;
        }
        continue;
      }
      break;
    }
    if (!v88) {
      goto LABEL_116;
    }
    int v80 = *v88;
    if ((v80 - 4) > 0x1E)
    {
      if ((v80 - 3) >= 0xFFFFFFFE) {
        v83 = v88;
      }
      else {
        v83 = 0;
      }
      if ((v80 - 3) < 0xFFFFFFFE)
      {
        if (v80 == 3) {
          *((void *)v88 + 1) = 0;
        }
        goto LABEL_116;
      }
      unint64_t v82 = (unint64_t)(v83 + 8);
    }
    else
    {
      if ((v88[1] & 0x7F) != 2 && !*((_DWORD *)v88 + 3)) {
        goto LABEL_116;
      }
      uint64_t v81 = *((void *)v88 + 2);
      char v2 = 1;
      if ((v81 & 4) == 0) {
        goto LABEL_102;
      }
      unint64_t v82 = v81 & 0xFFFFFFFFFFFFFFF8;
      if (!v82) {
        goto LABEL_102;
      }
    }
    v99[0] = (uint64_t)&v88;
    sub_1CC5FA668(v82 + 16, v99);
    goto LABEL_116;
  }
LABEL_150:
  MEMORY[0x1D25D9CD0](v95[0], 8);
  uint64_t v85 = v97[0];
  sub_1CD873AF8(v97[0], v98);
  MEMORY[0x1D25D9CD0](v85, 8);
  return v2 & 1;
}

void sub_1CD1199C4()
{
}

void sub_1CD119A04(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD119A3C(uint64_t a1, llvm::Module *a2)
{
  return sub_1CD1192C4((uint64_t)a2, a2);
}

uint64_t sub_1CD119A44()
{
  char v2 = 0;
  uint64_t v3 = &v2;
  *(void *)&long long v1 = "Disable generation of discriminator information.";
  *((void *)&v1 + 1) = 48;
  sub_1CD873B98(&v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, qword_1EBCFB7B8, &dword_1CB82C000);
}

void llvm::emitAMDGPUPrintfCall(uint64_t a1, llvm **a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  v29[0] = (uint64_t)v29;
  v29[1] = (uint64_t)v29;
  v29[2] = 0;
  v29[3] = (uint64_t)v29;
  uint64_t v31 = 0;
  unint64_t v32 = 0;
  BOOL ConstantStringInfo = llvm::getConstantStringInfo(v3, (const llvm::Value *)&v31, 0, 1);
  unint64_t v6 = v32;
  if (ConstantStringInfo && v32 != 0)
  {
    unint64_t v15 = 0;
    int v16 = 1;
    uint64_t v17 = v31;
    do
    {
      uint64_t v18 = memchr((void *)(v17 + v15), 37, v6 - v15);
      if (!v18) {
        break;
      }
      unint64_t v19 = (unint64_t)&v18[-v17];
      if (&v18[-v17] == (unsigned char *)-1) {
        break;
      }
      if (v18[1] == 37)
      {
        unint64_t v15 = v19 + 2;
      }
      else
      {
        uint64_t first_of = llvm::StringRef::find_first_of(&v31, "diouxXfFeEgGaAcspn", 18, v19);
        if (first_of == -1) {
          break;
        }
        unint64_t v15 = first_of + 1;
        if (v6 >= v19) {
          unint64_t v21 = v19;
        }
        else {
          unint64_t v21 = v6;
        }
        if (v21 <= v15) {
          unint64_t v22 = first_of + 1;
        }
        else {
          unint64_t v22 = v21;
        }
        if (v6 < v22) {
          unint64_t v22 = v6;
        }
        unint64_t v23 = v21 - v22;
        if (v21 == v22)
        {
          int v24 = 0;
        }
        else
        {
          int v24 = 0;
          int v25 = (unsigned __int8 *)(v17 + v21);
          do
          {
            int v26 = *v25++;
            if (v26 == 42) {
              ++v24;
            }
          }
          while (!__CFADD__(v23++, 1));
        }
        unsigned int v28 = v24 + v16;
        if (*(unsigned char *)(v17 + first_of) == 115) {
          sub_1CD873CA8(v29, v28);
        }
        int v16 = v28 + 1;
      }
    }
    while (v6 > v15);
  }
  uint64_t v8 = **(void **)(a1 + 64);
  unsigned int v9 = *(llvm::ConstantInt **)(v8 + 1984);
  unsigned int v10 = *(_DWORD *)(v8 + 1992);
  LODWORD(v32) = v10 >> 8;
  if (v10 >> 8 < 0x41)
  {
    uint64_t v31 = 0;
    uint64_t v11 = llvm::ConstantInt::get(v9, (llvm::LLVMContext *)&v31, v5);
    if (v32 >= 0x41)
    {
      if (v31) {
        MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
      }
    }
    v30[0] = (uint64_t)v11;
    long long v12 = (uint64_t **)sub_1CD57B9C0(*(void *)(*(void *)(*(void *)(a1 + 48) + 56) + 40), "__ockl_printf_begin", (const char *)0x13, 0, (uint64_t **)(**(void **)(a1 + 64) + 1984), **(void **)(a1 + 64) + 1984);
    LOWORD(v33) = 257;
    uint64_t v14 = sub_1CB845BAC((uint64_t *)a1, v12, v13, v30, 1, (uint64_t)&v31, 0);
    sub_1CD11A788((uint64_t *)a1, v14, (unsigned __int8 *)v3);
  }
  operator new[]();
}

void sub_1CD11A788(uint64_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = *(_DWORD *)(*(void *)a3 + 8);
  if ((v5 & 0xFE) == 0x12) {
    unsigned int v5 = *(_DWORD *)(**(void **)(*(void *)a3 + 16) + 8);
  }
  unint64_t v6 = llvm::PointerType::get((llvm::PointerType *)(*(void *)a1[8] + 1912), (llvm::Type *)(v5 >> 8));
  __int16 v36 = 257;
  if (*(void *)a3 != v6)
  {
    if (a3[16] <= 0x14u)
    {
      long long v12 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, unint64_t))(*(void *)a1[9] + 224))(a1[9], 49, a3, v6);
      if (v12) {
        BOOL v13 = v12[16] >= 0x1Cu;
      }
      else {
        BOOL v13 = 0;
      }
      if (v13)
      {
        (*(void (**)(uint64_t, unsigned __int8 *, uint64_t *, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v12, &v35, a1[6], a1[7]);
        uint64_t v29 = *((unsigned int *)a1 + 2);
        if (v29)
        {
          uint64_t v30 = *a1;
          uint64_t v31 = *a1 + 16 * v29;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v12, *(_DWORD *)v30, *(llvm::MDNode **)(v30 + 8));
            v30 += 16;
          }
          while (v30 != v31);
        }
      }
    }
    else
    {
      __int16 v34 = 257;
      uint64_t v8 = llvm::CastInst::Create(49, (uint64_t)a3, v6, &v32, 0);
      (*(void (**)(uint64_t, llvm::Instruction *, uint64_t *, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v8, &v35, a1[6], a1[7]);
      uint64_t v9 = *((unsigned int *)a1 + 2);
      if (v9)
      {
        uint64_t v10 = *a1;
        uint64_t v11 = *a1 + 16 * v9;
        do
        {
          llvm::Instruction::setMetadata(v8, *(_DWORD *)v10, *(llvm::MDNode **)(v10 + 8));
          v10 += 16;
        }
        while (v10 != v11);
      }
    }
  }
  uint64_t v14 = a1[6];
  uint64_t v15 = *(void *)a1[8];
  int v16 = *(llvm::ConstantInt **)(v15 + 1912);
  unsigned int v17 = *(_DWORD *)(v15 + 1920);
  unsigned int v33 = v17 >> 8;
  if (v17 >> 8 < 0x41)
  {
    unint64_t v32 = 0;
    llvm::ConstantInt::get(v16, (llvm::LLVMContext *)&v32, v7);
    if (v33 >= 0x41 && v32) {
      MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
    }
    uint64_t v19 = *(void *)a1[8];
    uint64_t v20 = *(llvm::ConstantInt **)(v19 + 1984);
    unint64_t v21 = *(unsigned int *)(v19 + 1992);
    unsigned int v33 = v21 >> 8;
    if (v21 >> 8 <= 0x40)
    {
      if (v21 <= 0xFF) {
        LOBYTE(v22) = 0;
      }
      else {
        unint64_t v22 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v21) + 63);
      }
      unint64_t v32 = (const char *)(v22 & 1);
      llvm::ConstantInt::get(v20, (llvm::LLVMContext *)&v32, v18);
      if (v33 >= 0x41 && v32) {
        MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
      }
      uint64_t v24 = *(void *)a1[8];
      int v25 = *(llvm::ConstantInt **)(v24 + 1984);
      unsigned int v26 = *(_DWORD *)(v24 + 1992);
      unsigned int v33 = v26 >> 8;
      if (v26 >> 8 < 0x41)
      {
        unint64_t v32 = 0;
        llvm::ConstantInt::get(v25, (llvm::LLVMContext *)&v32, v23);
        if (v33 >= 0x41 && v32) {
          MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
        }
        uint64_t v27 = *(void *)(v14 + 40);
        if (v27 != v14 + 40 && v27 && *(unsigned __int8 *)(v27 - 8) - 40 >= 0xFFFFFFF5)
        {
          uint64_t v28 = a1[7];
          unint64_t v32 = "strlen.join";
          __int16 v34 = 259;
          llvm::BasicBlock::splitBasicBlock(v14, v28, (uint64_t)&v32, 0);
        }
        unint64_t v32 = "strlen.join";
        __int16 v34 = 259;
        operator new();
      }
      operator new[]();
    }
    operator new[]();
  }
  operator new[]();
}

llvm::Instruction *llvm::computeEltAddr(llvm::CastInst *a1, unsigned __int8 *a2, unsigned __int8 *a3, llvm::PointerType *this, unsigned __int8 *a5, uint64_t a6)
{
  uint64_t v11 = (llvm::Value *)llvm::PointerType::get(this, (llvm::Type *)(*(_DWORD *)(*(void *)a1 + 8) >> 8));
  __int16 v56 = 257;
  unint64_t v50 = a5;
  uint64_t v51 = sub_1CC277FE0(a6, a1, v11, (uint64_t)v55, v12);
  unsigned int v13 = *(_DWORD *)(*(void *)a2 + 8) >> 8;
  unsigned int v14 = *(_DWORD *)(*(void *)a3 + 8) >> 8;
  unsigned int v15 = *(_DWORD *)(*(void *)a5 + 8);
  unsigned int v16 = v15 >> 8;
  if (v13 <= v14) {
    unsigned int v17 = *(_DWORD *)(*(void *)a3 + 8) >> 8;
  }
  else {
    unsigned int v17 = *(_DWORD *)(*(void *)a2 + 8) >> 8;
  }
  if (v17 <= v15 >> 8) {
    unint64_t v18 = v16;
  }
  else {
    unint64_t v18 = v17;
  }
  uint64_t v19 = llvm::IntegerType::get(*(llvm::IntegerType **)(a6 + 64), (llvm::LLVMContext *)v18);
  if (v13 == v18 && v14 == v18 && v16 >= v17)
  {
    uint64_t v28 = (uint64_t *)v51;
    uint64_t v27 = this;
    uint64_t v24 = v50;
    goto LABEL_46;
  }
  uint64_t v22 = v19;
  __int16 v54 = 257;
  if (*(void *)a2 == v19) {
    goto LABEL_48;
  }
  if (a2[16] > 0x14u)
  {
    __int16 v56 = 257;
    a2 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)a2, v19, v55, 0);
    (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**(void **)(a6 + 80) + 16))(*(void *)(a6 + 80), a2, v53, *(void *)(a6 + 48), *(void *)(a6 + 56));
    uint64_t v23 = *(unsigned int *)(a6 + 8);
    uint64_t v24 = v50;
    if (v23)
    {
      uint64_t v25 = *(void *)a6;
      uint64_t v26 = *(void *)a6 + 16 * v23;
      do
      {
        llvm::Instruction::setMetadata((llvm::Instruction *)a2, *(_DWORD *)v25, *(llvm::MDNode **)(v25 + 8));
        v25 += 16;
      }
      while (v25 != v26);
    }
    goto LABEL_25;
  }
  a2 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(a6 + 72)
                                                                                                 + 224))(*(void *)(a6 + 72), 39, a2, v19);
  if (a2) {
    BOOL v29 = a2[16] >= 0x1Cu;
  }
  else {
    BOOL v29 = 0;
  }
  uint64_t v24 = v50;
  if (v29)
  {
    (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**(void **)(a6 + 80) + 16))(*(void *)(a6 + 80), a2, v53, *(void *)(a6 + 48), *(void *)(a6 + 56));
    uint64_t v41 = *(unsigned int *)(a6 + 8);
    if (v41)
    {
      uint64_t v44 = *(void *)a6;
      uint64_t v45 = *(void *)a6 + 16 * v41;
      do
      {
        llvm::Instruction::setMetadata((llvm::Instruction *)a2, *(_DWORD *)v44, *(llvm::MDNode **)(v44 + 8));
        v44 += 16;
      }
      while (v44 != v45);
    }
LABEL_48:
    uint64_t v24 = v50;
  }
LABEL_25:
  __int16 v54 = 257;
  if (*(void *)a3 != v22)
  {
    if (a3[16] <= 0x14u)
    {
      a3 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(a6 + 72) + 224))(*(void *)(a6 + 72), 39, a3, v22);
      if (a3) {
        BOOL v33 = a3[16] >= 0x1Cu;
      }
      else {
        BOOL v33 = 0;
      }
      if (v33)
      {
        (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**(void **)(a6 + 80) + 16))(*(void *)(a6 + 80), a3, v53, *(void *)(a6 + 48), *(void *)(a6 + 56));
        uint64_t v42 = *(unsigned int *)(a6 + 8);
        if (v42)
        {
          uint64_t v46 = *(void *)a6;
          uint64_t v47 = *(void *)a6 + 16 * v42;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)a3, *(_DWORD *)v46, *(llvm::MDNode **)(v46 + 8));
            v46 += 16;
          }
          while (v46 != v47);
        }
        uint64_t v24 = v50;
      }
    }
    else
    {
      __int16 v56 = 257;
      a3 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)a3, v22, v55, 0);
      (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**(void **)(a6 + 80) + 16))(*(void *)(a6 + 80), a3, v53, *(void *)(a6 + 48), *(void *)(a6 + 56));
      uint64_t v30 = *(unsigned int *)(a6 + 8);
      if (v30)
      {
        uint64_t v31 = *(void *)a6;
        uint64_t v32 = *(void *)a6 + 16 * v30;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)a3, *(_DWORD *)v31, *(llvm::MDNode **)(v31 + 8));
          v31 += 16;
        }
        while (v31 != v32);
      }
    }
  }
  __int16 v54 = 257;
  if (*(void *)v24 == v22) {
    goto LABEL_45;
  }
  if (v24[16] > 0x14u)
  {
    __int16 v56 = 257;
    uint64_t v24 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v24, v22, v55, 0);
    (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**(void **)(a6 + 80) + 16))(*(void *)(a6 + 80), v24, v53, *(void *)(a6 + 48), *(void *)(a6 + 56));
    uint64_t v34 = *(unsigned int *)(a6 + 8);
    if (v34)
    {
      uint64_t v35 = *(void *)a6;
      uint64_t v36 = *(void *)a6 + 16 * v34;
      do
      {
        llvm::Instruction::setMetadata((llvm::Instruction *)v24, *(_DWORD *)v35, *(llvm::MDNode **)(v35 + 8));
        v35 += 16;
      }
      while (v35 != v36);
    }
LABEL_45:
    uint64_t v28 = (uint64_t *)v51;
    uint64_t v27 = this;
    goto LABEL_46;
  }
  uint64_t v24 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(a6 + 72)
                                                                                                  + 224))(*(void *)(a6 + 72), 39, v24, v22);
  if (v24) {
    BOOL v37 = v24[16] >= 0x1Cu;
  }
  else {
    BOOL v37 = 0;
  }
  if (!v37) {
    goto LABEL_45;
  }
  (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**(void **)(a6 + 80) + 16))(*(void *)(a6 + 80), v24, v53, *(void *)(a6 + 48), *(void *)(a6 + 56));
  uint64_t v43 = *(unsigned int *)(a6 + 8);
  if (v43)
  {
    uint64_t v48 = *(void *)a6;
    uint64_t v49 = *(void *)a6 + 16 * v43;
    do
    {
      llvm::Instruction::setMetadata((llvm::Instruction *)v24, *(_DWORD *)v48, *(llvm::MDNode **)(v48 + 8));
      v48 += 16;
    }
    while (v48 != v49);
  }
  uint64_t v28 = (uint64_t *)v51;
  uint64_t v27 = this;
LABEL_46:
  __int16 v56 = 257;
  int v38 = sub_1CC09A1EC(a6, (uint64_t)a3, (uint64_t)v24, (uint64_t)v55, 0, 0);
  __int16 v56 = 257;
  unint64_t v39 = sub_1CB844A3C(a6, a2, (uint64_t)v38, (uint64_t)v55, 0, 0);
  __int16 v56 = 257;
  return sub_1CB930F7C((uint64_t *)a6, (uint64_t)v27, v28, (const char *)v39, (uint64_t)v55);
}

BOOL sub_1CD11C0C8(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 24) > *(void *)(a2 + 24);
}

void sub_1CD11C0DC(uint64_t a1, char *a2, unsigned int (**a3)(uint64_t, uint64_t), __n128 a4)
{
  unint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&a2[-a1] >> 3);
  if ((uint64_t)&a2[-a1] < 7169)
  {
LABEL_5:
    sub_1CD8745CC(a1, a2, a3, v7, 0, 0, a4);
  }
  else
  {
    uint64_t v8 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&a2[-a1] >> 3);
    while (1)
    {
      uint64_t v10 = operator new(56 * v9, v8);
      if (v10) {
        break;
      }
      BOOL v11 = v9 > 1;
      v9 >>= 1;
      if (!v11) {
        goto LABEL_5;
      }
    }
    long long v12 = v10;
    sub_1CD8745CC(a1, a2, a3, v7, (uint64_t)v10, v9, a4);
    operator delete(v12);
  }
}

uint64_t sub_1CD11C1E8(uint64_t result, char *a2, char *a3, unsigned int (**a4)(char *, unint64_t), uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (!a6) {
    return result;
  }
  uint64_t v10 = a6;
  unsigned int v15 = (char *)result;
  while (a5 > a8 && v10 > a8)
  {
    if (!a5) {
      return result;
    }
    for (uint64_t i = v15; ; i += 56)
    {
      BOOL result = ((uint64_t (*)(char *, char *))*a4)(a2, v15);
      if (result) {
        break;
      }
      v15 += 56;
      if (!--a5) {
        return result;
      }
    }
    unint64_t v95 = a4;
    __src = a2;
    uint64_t v93 = a8;
    uint64_t v94 = v10;
    if (a5 >= v10)
    {
      if (a5 == 1)
      {
        uint64_t v116 = *((void *)v15 + 6);
        long long v106 = *((_OWORD *)v15 + 1);
        long long v111 = *((_OWORD *)v15 + 2);
        long long v101 = *(_OWORD *)v15;
        long long v85 = *(_OWORD *)a2;
        long long v86 = *((_OWORD *)a2 + 1);
        long long v87 = *((_OWORD *)a2 + 2);
        *((void *)v15 + 6) = *((void *)a2 + 6);
        *((_OWORD *)v15 + 1) = v86;
        *((_OWORD *)v15 + 2) = v87;
        *(_OWORD *)unsigned int v15 = v85;
        *((void *)a2 + 6) = v116;
        *((_OWORD *)a2 + 1) = v106;
        *((_OWORD *)a2 + 2) = v111;
        *(_OWORD *)a2 = v101;
        return result;
      }
      uint64_t v22 = a7;
      if (a5 >= 0) {
        uint64_t v24 = a5;
      }
      else {
        uint64_t v24 = a5 + 1;
      }
      unint64_t v21 = v24 >> 1;
      uint64_t v19 = &v15[56 * (v24 >> 1)];
      uint64_t v23 = a2;
      unint64_t v18 = 0x6DB6DB6DB6DB6DB7 * ((a3 - a2) >> 3);
      if (a3 == __src)
      {
        uint64_t v20 = a3;
      }
      else
      {
        uint64_t v25 = *a4;
        uint64_t v20 = __src;
        do
        {
          uint64_t v26 = &v20[56 * (v18 >> 1)];
          unsigned int v27 = v25(v26, (unint64_t)v19);
          if (v27) {
            v18 += ~(v18 >> 1);
          }
          else {
            v18 >>= 1;
          }
          if (v27) {
            uint64_t v20 = v26 + 56;
          }
        }
        while (v18);
        uint64_t v23 = __src;
        unint64_t v18 = 0x6DB6DB6DB6DB6DB7 * ((v20 - __src) >> 3);
        uint64_t v22 = a7;
      }
    }
    else
    {
      if (v10 >= 0) {
        uint64_t v17 = v10;
      }
      else {
        uint64_t v17 = v10 + 1;
      }
      unint64_t v18 = v17 >> 1;
      uint64_t v19 = __src;
      uint64_t v20 = &__src[56 * (v17 >> 1)];
      unint64_t v21 = 0x6DB6DB6DB6DB6DB7 * ((__src - i) >> 3);
      uint64_t v22 = a7;
      if (v15 == __src)
      {
        unsigned int v15 = __src;
        goto LABEL_46;
      }
      uint64_t v19 = v15;
      do
      {
        if ((*v95)(v20, (unint64_t)&v19[56 * (v21 >> 1)]))
        {
          v21 >>= 1;
        }
        else
        {
          v19 += 56 * (v21 >> 1) + 56;
          v21 += ~(v21 >> 1);
        }
      }
      while (v21);
      unint64_t v21 = 0x6DB6DB6DB6DB6DB7 * ((v19 - i) >> 3);
      uint64_t v22 = a7;
      uint64_t v23 = __src;
    }
    if (v19 != v23)
    {
      if (v23 == v20)
      {
        uint64_t v20 = v23;
        __src = v19;
      }
      else if (v19 + 56 == v23)
      {
        uint64_t v113 = *((void *)v19 + 6);
        long long v103 = *((_OWORD *)v19 + 1);
        long long v108 = *((_OWORD *)v19 + 2);
        long long v98 = *(_OWORD *)v19;
        int64_t v35 = v20 - v23;
        uint64_t v36 = v22;
        memmove(v19, v23, v20 - v23);
        uint64_t v22 = v36;
        BOOL v37 = &v19[v35];
        *((void *)v37 + 6) = v113;
        *((_OWORD *)v37 + 1) = v103;
        *((_OWORD *)v37 + 2) = v108;
        *(_OWORD *)BOOL v37 = v98;
        __src = &v19[v35];
      }
      else if (v23 + 56 == v20)
      {
        uint64_t v114 = *((void *)v20 - 1);
        long long v104 = *(_OWORD *)(v20 - 40);
        long long v109 = *(_OWORD *)(v20 - 24);
        long long v99 = *(_OWORD *)(v20 - 56);
        if (v20 - 56 != v19)
        {
          int v38 = v22;
          memmove(v19 + 56, v19, v20 - 56 - v19);
          uint64_t v22 = v38;
        }
        __src = v19 + 56;
        *((void *)v19 + 6) = v114;
        *((_OWORD *)v19 + 1) = v104;
        *((_OWORD *)v19 + 2) = v109;
        *(_OWORD *)uint64_t v19 = v99;
      }
      else
      {
        uint64_t v28 = 0x6DB6DB6DB6DB6DB7 * ((v23 - v19) >> 3);
        if (v28 == 0x6DB6DB6DB6DB6DB7 * ((v20 - v23) >> 3))
        {
          uint64_t v29 = 0;
          do
          {
            uint64_t v30 = &__src[v29];
            uint64_t v31 = &v19[v29];
            uint64_t v112 = *(void *)&v19[v29 + 48];
            long long v102 = *(_OWORD *)&v19[v29 + 16];
            long long v107 = *(_OWORD *)&v19[v29 + 32];
            long long v97 = *(_OWORD *)&v19[v29];
            long long v32 = *(_OWORD *)&__src[v29];
            long long v33 = *(_OWORD *)&__src[v29 + 16];
            long long v34 = *(_OWORD *)&__src[v29 + 32];
            *((void *)v31 + 6) = *(void *)&__src[v29 + 48];
            *((_OWORD *)v31 + 1) = v33;
            *((_OWORD *)v31 + 2) = v34;
            *(_OWORD *)uint64_t v31 = v32;
            *((void *)v30 + 6) = v112;
            *((_OWORD *)v30 + 1) = v102;
            *((_OWORD *)v30 + 2) = v107;
            *(_OWORD *)uint64_t v30 = v97;
            if (&v19[v29 + 56] == __src) {
              break;
            }
            v29 += 56;
          }
          while (v30 + 56 != v20);
        }
        else
        {
          uint64_t v39 = 0x6DB6DB6DB6DB6DB7 * ((v20 - v23) >> 3);
          uint64_t v40 = 0x6DB6DB6DB6DB6DB7 * ((v23 - v19) >> 3);
          do
          {
            uint64_t v41 = v40;
            uint64_t v40 = v39;
            uint64_t v39 = v41 % v39;
          }
          while (v39);
          if (v40)
          {
            uint64_t v42 = &v19[56 * v40];
            do
            {
              long long v43 = *(_OWORD *)(v42 - 56);
              long long v44 = *(_OWORD *)(v42 - 40);
              long long v45 = *(_OWORD *)(v42 - 24);
              uint64_t v46 = *((void *)v42 - 1);
              v42 -= 56;
              uint64_t v115 = v46;
              long long v105 = v44;
              long long v110 = v45;
              long long v100 = v43;
              uint64_t v47 = &v42[8 * ((v23 - v19) >> 3)];
              uint64_t v48 = v42;
              do
              {
                uint64_t v49 = v48;
                uint64_t v48 = v47;
                long long v50 = *(_OWORD *)v47;
                long long v51 = *((_OWORD *)v47 + 1);
                long long v52 = *((_OWORD *)v47 + 2);
                *((void *)v49 + 6) = *((void *)v47 + 6);
                *((_OWORD *)v49 + 1) = v51;
                *((_OWORD *)v49 + 2) = v52;
                *(_OWORD *)uint64_t v49 = v50;
                uint64_t v53 = 0x6DB6DB6DB6DB6DB7 * ((v20 - v47) >> 3);
                BOOL v54 = __OFSUB__(v28, v53);
                uint64_t v56 = v28 - v53;
                char v55 = (v56 < 0) ^ v54;
                uint64_t v47 = &v19[56 * v56];
                if (v55) {
                  uint64_t v47 = &v48[8 * ((v23 - v19) >> 3)];
                }
              }
              while (v47 != v42);
              *((void *)v48 + 6) = v115;
              *((_OWORD *)v48 + 1) = v105;
              *((_OWORD *)v48 + 2) = v110;
              *(_OWORD *)uint64_t v48 = v100;
            }
            while (v42 != v19);
          }
          __src = &v19[8 * ((v20 - v23) >> 3)];
        }
      }
      goto LABEL_62;
    }
    uint64_t v19 = v23;
LABEL_46:
    __src = v20;
LABEL_62:
    unint64_t v57 = v94 - v18;
    if ((uint64_t)(v18 + v21) >= (uint64_t)(v94 - (v18 + v21) + a5))
    {
      a7 = v22;
      BOOL result = sub_1CD11C1E8(__src, v20, a3, v95, a5 - v21, v94 - v18);
      uint64_t v20 = v19;
      unint64_t v57 = v18;
      unint64_t v61 = v21;
      a8 = v93;
      a3 = __src;
    }
    else
    {
      uint64_t v58 = v15;
      unsigned int v15 = __src;
      unint64_t v59 = a5 - v21;
      unint64_t v60 = v21;
      a7 = v22;
      a8 = v93;
      BOOL result = sub_1CD11C1E8(v58, v19, __src, v95, v60, v18);
      unint64_t v61 = v59;
    }
    a5 = v61;
    uint64_t v10 = v57;
    a2 = v20;
    a4 = v95;
    if (!v57) {
      return result;
    }
  }
  if (a5 <= v10)
  {
    if (v15 != a2)
    {
      uint64_t v73 = 0;
      do
      {
        uint64_t v74 = &a7[v73];
        long long v75 = *(_OWORD *)&v15[v73];
        long long v76 = *(_OWORD *)&v15[v73 + 16];
        long long v77 = *(_OWORD *)&v15[v73 + 32];
        *((void *)v74 + 6) = *(void *)&v15[v73 + 48];
        *((_OWORD *)v74 + 1) = v76;
        *((_OWORD *)v74 + 2) = v77;
        *(_OWORD *)uint64_t v74 = v75;
        v73 += 56;
      }
      while (&v15[v73] != a2);
      if (v73)
      {
        unint64_t v78 = a7;
        while (a2 != a3)
        {
          BOOL result = ((uint64_t (*)(char *, char *))*a4)(a2, v78);
          if (result)
          {
            long long v79 = *(_OWORD *)a2;
            long long v80 = *((_OWORD *)a2 + 1);
            long long v81 = *((_OWORD *)a2 + 2);
            *((void *)v15 + 6) = *((void *)a2 + 6);
            *((_OWORD *)v15 + 1) = v80;
            *((_OWORD *)v15 + 2) = v81;
            *(_OWORD *)unsigned int v15 = v79;
            a2 += 56;
          }
          else
          {
            long long v82 = *(_OWORD *)v78;
            long long v83 = *((_OWORD *)v78 + 1);
            long long v84 = *((_OWORD *)v78 + 2);
            *((void *)v15 + 6) = *((void *)v78 + 6);
            *((_OWORD *)v15 + 1) = v83;
            *((_OWORD *)v15 + 2) = v84;
            *(_OWORD *)unsigned int v15 = v82;
            v78 += 56;
          }
          v15 += 56;
          if (&a7[v73] == v78) {
            return result;
          }
        }
        return (uint64_t)memmove(v15, v78, a7 - v78 + v73);
      }
    }
  }
  else if (a2 != a3)
  {
    uint64_t v62 = 0;
    do
    {
      BOOL v63 = &a7[v62];
      long long v64 = *(_OWORD *)&a2[v62];
      long long v65 = *(_OWORD *)&a2[v62 + 16];
      long long v66 = *(_OWORD *)&a2[v62 + 32];
      *((void *)v63 + 6) = *(void *)&a2[v62 + 48];
      *((_OWORD *)v63 + 1) = v65;
      *((_OWORD *)v63 + 2) = v66;
      *(_OWORD *)BOOL v63 = v64;
      v62 += 56;
    }
    while (&a2[v62] != a3);
    if (v62)
    {
      uint64_t v67 = &a7[v62];
      v68 = a3 - 56;
      while (a2 != v15)
      {
        BOOL result = ((uint64_t (*)(char *, char *))*a4)(v67 - 56, a2 - 56);
        if (result) {
          uint64_t v69 = a2 - 56;
        }
        else {
          uint64_t v69 = v67 - 56;
        }
        if (result) {
          a2 -= 56;
        }
        else {
          v67 -= 56;
        }
        long long v71 = *((_OWORD *)v69 + 1);
        long long v70 = *((_OWORD *)v69 + 2);
        long long v72 = *(_OWORD *)v69;
        *((void *)v68 + 6) = *((void *)v69 + 6);
        *((_OWORD *)v68 + 1) = v71;
        *((_OWORD *)v68 + 2) = v70;
        *(_OWORD *)v68 = v72;
        v68 -= 56;
        if (v67 == a7) {
          return result;
        }
      }
      if (v67 != a7)
      {
        uint64_t v88 = 0;
        do
        {
          v89 = &v68[v88];
          long long v90 = *(_OWORD *)&v67[v88 - 56];
          long long v91 = *(_OWORD *)&v67[v88 - 40];
          long long v92 = *(_OWORD *)&v67[v88 - 24];
          *((void *)v89 + 6) = *(void *)&v67[v88 - 8];
          *((_OWORD *)v89 + 1) = v91;
          *((_OWORD *)v89 + 2) = v92;
          *(_OWORD *)v89 = v90;
          v88 -= 56;
        }
        while (&v67[v88] != a7);
      }
    }
  }
  return result;
}

uint64_t llvm::buildAssumeFromInst(llvm *this, llvm::Instruction *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!byte_1EBD0C1D8) {
    return 0;
  }
  uint64_t v10 = *(uint64_t ***)(*(void *)(*((void *)this + 5) + 56) + 40);
  uint64_t v11 = 1;
  for (uint64_t i = 2; i != 26; i += 3)
    *(_OWORD *)&(&v10)[i] = xmmword_1CFAC3080;
  unsigned int v13 = v15;
  uint64_t v14 = 0x800000000;
  memset(&v15[192], 0, 24);
  sub_1CD11CA2C((uint64_t)&v10, (uint64_t)this, a3, a4, a5, a6, a7);
  uint64_t v8 = sub_1CD11CB94(&v10);
  if (v13 != v15) {
    free(v13);
  }
  if ((v11 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v12, 8);
  }
  return v8;
}

uint64_t sub_1CD11CA2C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v7 = *(unsigned __int8 *)(a2 + 16);
  if (v7 <= 0x3B)
  {
    if (v7 != 33 && v7 != 39) {
      return result;
    }
    goto LABEL_8;
  }
  switch(v7)
  {
    case '<':
      uint64_t v17 = *(void *)(a2 - 32);
      uint64_t v18 = *(void *)a2;
      break;
    case '=':
      uint64_t v17 = *(void *)(a2 - 32);
      uint64_t v18 = **(void **)(a2 - 64);
      break;
    case 'T':
LABEL_8:
      uint64_t v23 = a2;
      v22[0] = &v23;
      v22[1] = result;
      if (v7 == 84)
      {
        uint64_t v8 = 0;
      }
      else if (v7 == 39)
      {
        uint64_t v8 = (*(_DWORD *)(a2 + 80) + 1);
      }
      else
      {
        uint64_t v8 = 2;
      }
      int v9 = 0;
      int v10 = *(_DWORD *)(a2 + 20);
      uint64_t v11 = -(uint64_t)(v10 & 0x7FFFFFF);
      if (v10 < 0)
      {
        uint64_t v20 = a2 - 32 * (v10 & 0x7FFFFFF);
        uint64_t v21 = *(void *)(v20 - 8);
        if ((v21 & 0xFFFFFFFF0) != 0) {
          int v9 = *(_DWORD *)(v20 - 12) - *(_DWORD *)(v20 - v21);
        }
        else {
          int v9 = 0;
        }
      }
      BOOL result = sub_1CD11F1F0((unint64_t)v22, *(void *)(a2 + 64), (-32 * v8 + 32 * (unint64_t)-v9 - 32 * v11 - 32) >> 5, a4, a5, a6, a7);
      uint64_t v16 = *(void *)(v23 - 32);
      if (v16 && !*(unsigned char *)(v16 + 16) && *(void *)(v16 + 24) == *(void *)(v23 + 72)) {
        return sub_1CD11F1F0((unint64_t)v22, *(void *)(v16 + 112), *(_DWORD *)(v16 + 96), v12, v13, v14, v15);
      }
      return result;
    default:
      return result;
  }
  unint64_t v19 = ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1) & 0x3F | 0x100;

  return sub_1CD11F0F4(result, a2, v17, v18, v19);
}

uint64_t sub_1CD11CB94(uint64_t ***a1)
{
  v66[48] = *MEMORY[0x1E4F143B8];
  if (!*((_DWORD *)a1 + 54)) {
    return 0;
  }
  char v2 = *a1;
  llvm::Intrinsic::getType(**a1, 7, 0, 0);
  Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v2, 7, 0, 0);
  llvm::Module::getOrInsertFunction((uint64_t)v2, "llvm.assume", (const char *)0xB, Type, 0);
  uint64_t v6 = v5;
  uint64_t v53 = **a1;
  long long v64 = v66;
  uint64_t v65 = 0x800000000;
  unsigned int v7 = *((_DWORD *)a1 + 54);
  if (v7)
  {
    uint64_t v8 = a1[26];
    int v9 = &v8[3 * v7];
    do
    {
      unint64_t v61 = v63;
      uint64_t v62 = 0x200000000;
      if (*v8)
      {
        v63[0] = *v8;
        LODWORD(v62) = 1;
      }
      unint64_t v10 = (unint64_t)v8[2];
      if (v10)
      {
        uint64_t v11 = ***a1;
        uint64_t v12 = *(llvm::ConstantInt **)(v11 + 1984);
        unint64_t v13 = *(unsigned int *)(v11 + 1992);
        LODWORD(v56[1]) = v13 >> 8;
        if (v13 >> 8 > 0x40) {
          operator new[]();
        }
        if (v13 <= 0xFF) {
          unint64_t v14 = 0;
        }
        else {
          unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v13) + 63);
        }
        v56[0] = (void *)(v14 & v10);
        uint64_t v15 = llvm::ConstantInt::get(v12, (llvm::LLVMContext *)v56, v4);
        if (LODWORD(v56[1]) >= 0x41 && v56[0]) {
          MEMORY[0x1D25D9CB0](v56[0], 0x1000C8000313F17);
        }
        if (v62 >= (unint64_t)HIDWORD(v62)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v61 + v62) = v15;
        LODWORD(v62) = v62 + 1;
      }
      NameFromAttrKind = llvm::Attribute::getNameFromAttrKind(*((_DWORD *)v8 + 2));
      if (v17 >= 0x7FFFFFFFFFFFFFF8) {
        abort();
      }
      uint64_t v18 = NameFromAttrKind;
      size_t v19 = v17;
      if (v17 >= 0x17)
      {
        uint64_t v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v17 | 7) != 0x17) {
          uint64_t v21 = v17 | 7;
        }
        uint64_t v22 = v21 + 1;
        p_dst = (long long *)operator new(v21 + 1);
        *((void *)&__dst + 1) = v19;
        unint64_t v55 = v22 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v55) = v17;
        p_dst = &__dst;
        if (!v17) {
          goto LABEL_22;
        }
      }
      memmove(p_dst, v18, v19);
LABEL_22:
      *((unsigned char *)p_dst + v19) = 0;
      uint64_t v23 = v61;
      uint64_t v24 = v62;
      *(_OWORD *)uint64_t v56 = __dst;
      unint64_t v57 = v55;
      long long __dst = 0uLL;
      unint64_t v55 = 0;
      unint64_t v59 = 0;
      unint64_t v60 = 0;
      __p = 0;
      if (v62)
      {
        size_t v25 = 8 * v62;
        __p = operator new(v25);
        unint64_t v59 = __p;
        uint64_t v26 = (char *)__p + 8 * v24;
        unint64_t v60 = v26;
        memmove(__p, v23, v25);
        unint64_t v59 = v26;
      }
      sub_1CD506E6C((uint64_t)&v64, (unint64_t)v56);
      if (__p)
      {
        unint64_t v59 = __p;
        operator delete(__p);
      }
      if (SHIBYTE(v57) < 0) {
        operator delete(v56[0]);
      }
      if (v61 != v63) {
        free(v61);
      }
      v8 += 3;
    }
    while (v8 != v9);
  }
  if (v6) {
    unsigned int v27 = *(uint64_t ***)(v6 + 24);
  }
  else {
    unsigned int v27 = 0;
  }
  uint64_t v29 = *v53;
  uint64_t v30 = *(void **)(*v53 + 1560);
  if (!v30)
  {
    long long v44 = *(llvm::ConstantInt **)(v29 + 1888);
    unsigned int v45 = *(_DWORD *)(v29 + 1896);
    LODWORD(v56[1]) = v45 >> 8;
    if (v45 >> 8 > 0x40) {
      operator new[]();
    }
    if (v45 <= 0xFF) {
      LOBYTE(v46) = 0;
    }
    else {
      unint64_t v46 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v45) + 63);
    }
    v56[0] = (void *)(v46 & 1);
    uint64_t v30 = llvm::ConstantInt::get(v44, (llvm::LLVMContext *)v56, v4);
    if (LODWORD(v56[1]) >= 0x41 && v56[0]) {
      MEMORY[0x1D25D9CB0](v56[0], 0x1000C8000313F17);
    }
    *(void *)(v29 + 1560) = v30;
  }
  unint64_t v61 = v30;
  uint64_t v31 = (char *)v64;
  uint64_t v32 = v65;
  LOWORD(v59) = 257;
  if (v65)
  {
    int v47 = 0;
    uint64_t v48 = 48 * v65;
    uint64_t v49 = (char *)v64 + 32;
    do
    {
      v47 += (*v49 - *(v49 - 1)) >> 3;
      v49 += 6;
      v48 -= 48;
    }
    while (v48);
    unsigned int v33 = v47 + 2;
  }
  else
  {
    unsigned int v33 = 2;
  }
  uint64_t v34 = (16 * v65);
  if (v34) {
    uint64_t v35 = (16 * v65) | 8u;
  }
  else {
    uint64_t v35 = 0;
  }
  uint64_t v36 = (char *)operator new(v35 + 32 * v33 + 80);
  BOOL v37 = &v36[v35];
  uint64_t v28 = (uint64_t)&v36[32 * v33 + v35];
  *(_DWORD *)(v28 + 20) = v33 & 0x7FFFFFF | ((v34 != 0) << 31) | *(_DWORD *)(v28 + 20) & 0x38000000;
  if (v33)
  {
    do
    {
      *(void *)BOOL v37 = 0;
      *((void *)v37 + 1) = 0;
      *((void *)v37 + 2) = 0;
      *((void *)v37 + 3) = v28;
      v37 += 32;
    }
    while (v37 != (char *)v28);
  }
  if (v34) {
    *(void *)&v36[v34] = v34;
  }
  if (v32)
  {
    int v50 = 0;
    uint64_t v51 = 48 * v32;
    long long v52 = v31 + 32;
    do
    {
      v50 += (*v52 - *(v52 - 1)) >> 3;
      v52 += 6;
      v51 -= 48;
    }
    while (v51);
    int v38 = (v50 + 2) & 0x7FFFFFF;
  }
  else
  {
    int v38 = 2;
  }
  *(void *)uint64_t v28 = *v27[2];
  *(void *)(v28 + 8) = 0;
  unsigned int v39 = *(_DWORD *)(v28 + 20) & 0xC0000000 | v38;
  *(_DWORD *)(v28 + 16) = 84;
  *(_DWORD *)(v28 + 20) = v39;
  *(_OWORD *)(v28 + 24) = 0u;
  *(_OWORD *)(v28 + 40) = 0u;
  *(_DWORD *)(v28 + 56) = 0;
  *(void *)(v28 + 64) = 0;
  llvm::CallInst::init((uint64_t ***)v28, v27, (uint64_t **)v6, (uint64_t *)&v61, 1, (uint64_t)v31, v32, (const char **)v56);
  uint64_t v40 = v64;
  if (v65)
  {
    uint64_t v41 = 48 * v65;
    uint64_t v42 = (char *)v64 - 48;
    do
    {
      sub_1CD4AF9B4((uint64_t)&v42[v41]);
      v41 -= 48;
    }
    while (v41);
    uint64_t v40 = v64;
  }
  if (v40 != v66) {
    free(v40);
  }
  return v28;
}

void llvm::salvageKnowledge(llvm *this, char **a2, llvm::AssumptionCache *a3, llvm::DominatorTree *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v17[27] = *MEMORY[0x1E4F143B8];
  if (byte_1EBD0C1D8 && *((unsigned __int8 *)this + 16) - 29 >= 0xB)
  {
    uint64_t v12 = *(uint64_t ***)(*(void *)(*((void *)this + 5) + 56) + 40);
    uint64_t v13 = 1;
    for (uint64_t i = 2; i != 26; i += 3)
      *(_OWORD *)&(&v12)[i] = xmmword_1CFAC3080;
    uint64_t v15 = v17;
    uint64_t v16 = 0x800000000;
    v17[24] = this;
    v17[25] = a2;
    v17[26] = a3;
    sub_1CD11CA2C((uint64_t)&v12, (uint64_t)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7);
    uint64_t v8 = (llvm::Instruction *)sub_1CD11CB94(&v12);
    if (v8)
    {
      uint64_t v9 = (uint64_t)v8;
      llvm::Instruction::insertBefore(v8, this);
      if (a2) {
        llvm::AssumptionCache::registerAssumption(a2, v9);
      }
    }
    if (v15 != v17) {
      free(v15);
    }
    if ((v13 & 1) == 0) {
      MEMORY[0x1D25D9CD0](v14, 8);
    }
  }
}

uint64_t sub_1CD11D2E0(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  long long v17 = *a2;
  uint64_t v18 = *((void *)a2 + 2);
  sub_1CD11D3EC((llvm::DataLayout *)(*(void *)a1 + 272), (int *)&v17, a7, (uint64_t)&v19);
  *a2 = v19;
  uint64_t v9 = v20;
  *((void *)a2 + 2) = v20;
  long long v15 = *a2;
  uint64_t v16 = v9;
  uint64_t result = sub_1CD11D624(a1, (uint64_t)&v15);
  if (result)
  {
    long long v13 = *a2;
    uint64_t v14 = *((void *)a2 + 2);
    uint64_t result = sub_1CD11D750(a1, (int *)&v13);
    if ((result & 1) == 0)
    {
      *(void *)&long long v19 = *((void *)a2 + 2);
      DWORD2(v19) = *(_DWORD *)a2;
      uint64_t result = sub_1CD8750E0(a1 + 8, &v19);
      if (result == *(void *)(a1 + 208) + 24 * *(unsigned int *)(a1 + 216))
      {
        uint64_t v12 = *((void *)a2 + 1);
        uint64_t result = sub_1CD875144(a1 + 8, &v19);
        *(void *)uint64_t result = v12;
      }
      else
      {
        unint64_t v11 = *(void *)(result + 16);
        if (v11 <= *((void *)a2 + 1)) {
          unint64_t v11 = *((void *)a2 + 1);
        }
        *(void *)(result + 16) = v11;
      }
    }
  }
  return result;
}

__n128 sub_1CD11D3EC@<Q0>(llvm::DataLayout *a1@<X1>, int *a2@<X0>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  int v6 = *a2;
  if ((*a2 - 76) < 2)
  {
    uint64_t v9 = (llvm::GlobalValue *)*((void *)a2 + 2);
    unsigned int v10 = *(_DWORD *)(*(void *)v9 + 8);
    if ((v10 & 0xFE) == 0x12) {
      unsigned int v10 = *(_DWORD *)(**(void **)(*(void *)v9 + 16) + 8);
    }
    if (v10 < 0x100) {
      goto LABEL_16;
    }
    unsigned int v11 = v10 >> 8;
    uint64_t v12 = *((unsigned int *)a1 + 60);
    uint64_t v13 = *((void *)a1 + 29);
    if (v12)
    {
      uint64_t v13 = *((void *)a1 + 29);
      unint64_t v14 = *((unsigned int *)a1 + 60);
      do
      {
        unint64_t v15 = v14 >> 1;
        uint64_t v16 = v13 + 16 * (v14 >> 1);
        unsigned int v17 = *(_DWORD *)(v16 + 8);
        uint64_t v18 = v16 + 16;
        v14 += ~(v14 >> 1);
        if (v17 < v11) {
          uint64_t v13 = v18;
        }
        else {
          unint64_t v14 = v15;
        }
      }
      while (v14);
    }
    if (v13 == *((void *)a1 + 29) + 16 * v12 || *(_DWORD *)(v13 + 8) != v11) {
LABEL_16:
    }
      uint64_t v13 = *((void *)a1 + 29);
    LODWORD(v23) = *(_DWORD *)(v13 + 12);
    if (v23 > 0x40) {
      operator new[]();
    }
    uint64_t v22 = 0;
    long long v19 = llvm::Value::stripAndAccumulateConstantOffsets(v9, a1, (llvm::APInt *)&v22, 0, 0, 0, a3);
    if (v23 > 0x40)
    {
      uint64_t v20 = *v22;
      MEMORY[0x1D25D9CB0]();
      if (v20 < 0) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v20 = (uint64_t)((void)v22 << -(uint64_t)v23) >> -(uint64_t)v23;
      if (v20 < 0) {
        goto LABEL_26;
      }
    }
    *((void *)a2 + 1) += v20;
    *((void *)a2 + 2) = v19;
    *(void *)(a4 + 16) = v19;
LABEL_23:
    __n128 result = *(__n128 *)a2;
    *(_OWORD *)a4 = *(_OWORD *)a2;
    return result;
  }
  if (v6 == 39)
  {
    uint64_t UnderlyingObject = (uint64_t)llvm::getUnderlyingObject(*((llvm **)a2 + 2), (const llvm::Value *)6);
    goto LABEL_22;
  }
  if (v6 == 74)
  {
    uint64_t v7 = *((void *)a2 + 2);
    uint64_t v22 = (uint64_t *)a2;
    uint64_t v23 = a1;
    uint64_t UnderlyingObject = llvm::Value::stripInBoundsOffsets(v7, (void (*)(uint64_t, uint64_t))sub_1CD11F454, (uint64_t)&v22);
LABEL_22:
    *((void *)a2 + 2) = UnderlyingObject;
    *(void *)(a4 + 16) = UnderlyingObject;
    goto LABEL_23;
  }
LABEL_26:
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)a4 = *(_OWORD *)a2;
  *(void *)(a4 + 16) = *((void *)a2 + 2);
  return result;
}

uint64_t sub_1CD11D624(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)a2) {
    return 0;
  }
  uint64_t v3 = *(void *)(a2 + 16);
  if (!v3) {
    return 1;
  }
  if (*(unsigned char *)(*(void *)v3 + 8) == 15)
  {
    unint64_t v5 = *((unsigned __int8 *)llvm::getUnderlyingObject(*(llvm **)(a2 + 16), (const llvm::Value *)6) + 16);
    if (v5 < 0x3C && ((0x80000000000000FuLL >> v5) & 1) != 0) {
      return 0;
    }
    uint64_t v3 = *(void *)(a2 + 16);
  }
  unsigned int v6 = *(unsigned __int8 *)(v3 + 16);
  if (v3 && v6 == 21)
  {
    if (!llvm::Argument::hasAttribute(v3, *(_DWORD *)a2)) {
      return 1;
    }
    if ((*(_DWORD *)a2 - 74) <= 6)
    {
      uint64_t AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex((uint64_t *)(*(void *)(v3 + 24) + 112), *(_DWORD *)(v3 + 32) + 1, *(_DWORD *)a2);
      unint64_t v8 = AttributeAtIndex ? *(void *)(AttributeAtIndex + 16) : 0;
      if (v8 < *(void *)(a2 + 8)) {
        return 1;
      }
    }
    return 0;
  }
  uint64_t result = 1;
  if (v3 && v6 >= 0x1C)
  {
    if (llvm::wouldInstructionBeTriviallyDead(v3, 0))
    {
      unsigned int v10 = *(llvm::Value **)(a2 + 16);
      if (!*((void *)v10 + 1)) {
        return 0;
      }
      uint64_t SingleUndroppableUse = llvm::Value::getSingleUndroppableUse(v10);
      if (SingleUndroppableUse)
      {
        if (*(void *)(SingleUndroppableUse + 24) == *(void *)(a1 + 416)) {
          return 0;
        }
      }
    }
    return 1;
  }
  return result;
}

uint64_t sub_1CD11D750(unint64_t a1, int *a2)
{
  if (!*(void *)(a1 + 416)) {
    return 0;
  }
  uint64_t result = *((void *)a2 + 2);
  if (result)
  {
    char v26 = 0;
    uint64_t v25 = 0;
    int v24 = *a2;
    uint64_t v5 = *(void *)(a1 + 424);
    unint64_t v20 = a1;
    uint64_t v21 = a2;
    uint64_t v22 = &v26;
    uint64_t v23 = &v25;
    llvm::getKnowledgeForValue(result, &v24, 1, v5, (uint64_t (*)(uint64_t, long long *, uint64_t, uint64_t))sub_1CD11F4C4, (uint64_t)&v20, (uint64_t)v19);
    uint64_t v7 = v25;
    if (v25)
    {
      uint64_t v8 = ***(void ***)a1;
      uint64_t v9 = *((void *)a2 + 1);
      unsigned int v10 = *(llvm::ConstantInt **)(v8 + 1984);
      unsigned int v11 = *(_DWORD *)(v8 + 1992);
      LODWORD(v21) = v11 >> 8;
      if (v11 >> 8 > 0x40) {
        operator new[]();
      }
      unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v11) + 63);
      if (v11 <= 0xFF) {
        unint64_t v12 = 0;
      }
      unint64_t v20 = v12 & v9;
      uint64_t v13 = llvm::ConstantInt::get(v10, (llvm::LLVMContext *)&v20, v6);
      if (v21 >= 0x41 && v20)
      {
        uint64_t v18 = v13;
        MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
        uint64_t v13 = v18;
      }
      if (*(void *)v7)
      {
        **(void **)(v7 + 16) = *(void *)(v7 + 8);
        uint64_t v14 = *(void *)(v7 + 8);
        if (v14) {
          *(void *)(v14 + 16) = *(void *)(v7 + 16);
        }
      }
      *(void *)uint64_t v7 = v13;
      if (v13)
      {
        uint64_t v17 = v13[1];
        unint64_t v15 = v13 + 1;
        uint64_t v16 = v17;
        *(void *)(v7 + 8) = v17;
        if (v17) {
          *(void *)(v16 + 16) = v7 + 8;
        }
        *(void *)(v7 + 16) = v15;
        void *v15 = v7;
      }
    }
    return v26 != 0;
  }
  return result;
}

BOOL sub_1CD11D938(uint64_t ***a1, char **a2, llvm::Instruction *a3)
{
  v293[158] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = **a1;
  v274 = a1;
  v275 = a2;
  v276 = a3;
  v277 = v3;
  uint64_t v278 = 1;
  int64x2_t v279 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  int64x2_t v280 = v279;
  inserted = llvm::LLVMContextImpl::getOrInsertBundleTag((_DWORD *)*v3, "ignore", 6uLL);
  size_t v4 = &v282;
  uint64_t v282 = 1;
  uint64_t v5 = &v283;
  for (uint64_t i = 11; i != 67; i += 7)
    (&v274)[i] = (uint64_t ***)-4096;
  unsigned __int8 v285 = 0;
  sub_1CD11F6E8((uint64_t)&v274, 0);
  uint64_t v286 = 1;
  uint64_t v7 = &v287;
  for (uint64_t j = 8; j != 1288; j += 80)
    *(_OWORD *)((char *)&v286 + j) = xmmword_1CFAC3080;
  sub_1CD4C4D08(&v260, (uint64_t)v274[10]);
  uint64_t v9 = v256;
  *(void *)&long long v253 = v256;
  unsigned int v10 = (const void *)*((void *)&v260 + 1);
  if (*((void *)&v260 + 1) == (void)v260)
  {
    *((void *)&v253 + 1) = v256;
    unsigned int v11 = (const void *)*((void *)&v260 + 1);
  }
  else
  {
    int v220 = v261;
    uint64_t v9 = malloc_type_malloc(8 * v261, 0x4065EBACuLL);
    if (!v9)
    {
      if (v220) {
        goto LABEL_370;
      }
      uint64_t v9 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v9) {
        goto LABEL_370;
      }
    }
    *((void *)&v253 + 1) = v9;
    unsigned int v10 = (const void *)*((void *)&v260 + 1);
    unsigned int v11 = (const void *)v260;
  }
  int v12 = HIDWORD(v261);
  LODWORD(v254) = v261;
  if (v10 == v11) {
    unsigned int v13 = HIDWORD(v261);
  }
  else {
    unsigned int v13 = v261;
  }
  if (v13)
  {
    memmove(v9, v10, 8 * v13);
    int v12 = HIDWORD(v261);
  }
  HIDWORD(v254) = v12;
  int v255 = v262;
  v258 = 0;
  uint64_t v259 = 0;
  __p = 0;
  sub_1CBFE1720(&__p, v263, v264, (v264 - (unsigned char *)v263) >> 5);
  uint64_t v14 = v249;
  v244 = v249;
  unint64_t v15 = __src;
  if (__src != v265)
  {
    unsigned int v221 = v267;
    uint64_t v14 = malloc_type_malloc(8 * v267, 0x4065EBACuLL);
    if (v14 || !v221 && (uint64_t v14 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v245 = v14;
      uint64_t v16 = v265;
      unint64_t v15 = __src;
      goto LABEL_14;
    }
LABEL_370:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v245 = v249;
  uint64_t v16 = __src;
LABEL_14:
  unsigned int v17 = v268;
  unsigned int v246 = v267;
  if (v15 == v16) {
    unsigned int v18 = v268;
  }
  else {
    unsigned int v18 = v267;
  }
  if (v18)
  {
    memmove(v14, v15, 8 * v18);
    unsigned int v17 = v268;
  }
  unsigned int v247 = v17;
  int v248 = v269;
  v251 = 0;
  uint64_t v252 = 0;
  v250 = 0;
  sub_1CBFE1720(&v250, v270, v271, (v271 - (unsigned char *)v270) >> 5);
  while (1)
  {
    if (v258 - (unsigned char *)__p != v251 - v250) {
      goto LABEL_34;
    }
    if (__p == v258) {
      break;
    }
    long long v19 = v250 + 16;
    unint64_t v20 = (char *)__p + 16;
    while (1)
    {
      uint64_t v21 = v20 - 16;
      if (*((void *)v20 - 2) != *((void *)v19 - 2)) {
        break;
      }
      int v22 = v19[8];
      if (v20[8]) {
        BOOL v23 = v22 == 0;
      }
      else {
        BOOL v23 = 1;
      }
      if (v23)
      {
        if ((v20[8] == 0) == (v22 != 0)) {
          break;
        }
      }
      else if (*(_DWORD *)v20 != *(_DWORD *)v19)
      {
        break;
      }
      v19 += 32;
      v20 += 32;
      if (v21 + 32 == v258) {
        goto LABEL_177;
      }
    }
LABEL_34:
    uint64_t v243 = *((void *)v258 - 4);
    int v24 = sub_1CD875B38(v4, &v243);
    uint64_t v25 = *((unsigned int *)v24 + 4);
    if (v25)
    {
      char v26 = (uint64_t *)v24[1];
      unsigned int v27 = &v26[v25];
      while (1)
      {
        uint64_t v28 = *v26;
        if (*v26)
        {
          v242 = (llvm *)*v26;
          int v29 = *(_DWORD *)(v28 + 20);
          if (v29 < 0)
          {
            uint64_t v30 = v28 - 32 * (v29 & 0x7FFFFFF);
            uint64_t v31 = *(void *)(v30 - 8);
            uint64_t v235 = v30 - 8;
            if (v31) {
              break;
            }
          }
        }
LABEL_39:
        if (++v26 == v27) {
          goto LABEL_35;
        }
      }
      uint64_t v32 = v235 - v31;
      v232 = v26;
      v233 = v27;
      v226 = v5;
      v228 = v7;
      v230 = v4;
      while (2)
      {
        if (*(void **)v32 == inserted)
        {
          sub_1CD4B58BC((uint64_t)&v292, (uint64_t)&v278, (uint64_t *)&v242);
          goto LABEL_133;
        }
        unsigned int v33 = v242;
        llvm::getKnowledgeFromBundle((uint64_t)v242, v32, (uint64_t)&v239);
        uint64_t v34 = v241;
        if (v241 && *(unsigned char *)(v241 + 16) == 21)
        {
          int v35 = v239;
          int hasAttribute = llvm::Argument::hasAttribute(v241, v239);
          if (hasAttribute
            && ((v35 - 74) > 6
             || ((AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex((uint64_t *)(*(void *)(v34 + 24) + 112), *(_DWORD *)(v34 + 32) + 1, v35)) == 0? (unint64_t v39 = 0): (unint64_t v39 = *(void *)(AttributeAtIndex + 16)), v39 >= v240)))
          {
            sub_1CD4B58BC((uint64_t)&v292, (uint64_t)&v278, (uint64_t *)&v242);
            uint64_t v103 = *(unsigned int *)(v32 + 8);
            if (v103 != *(_DWORD *)(v32 + 12))
            {
              long long v104 = (_DWORD *)((char *)v33 - 32 * (*((_DWORD *)v33 + 5) & 0x7FFFFFF));
              goto LABEL_142;
            }
          }
          else
          {
            uint64_t v40 = v274[10];
            uint64_t v41 = v40 - 3;
            if (!v40) {
              uint64_t v41 = 0;
            }
            uint64_t v42 = v41 + 5;
            for (k = v41[6]; k != (uint64_t *)v42; k = (uint64_t *)k[1])
            {
              long long v44 = k - 3;
              if (!k) {
                long long v44 = 0;
              }
              if (*((unsigned char *)v44 + 16) != 83)
              {
                if (*((unsigned __int8 *)k - 8) - 38 > 0x38
                  || ((1 << (*((unsigned char *)k - 8) - 38)) & 0x100060000000001) == 0)
                {
                  uint64_t v42 = (uint64_t **)k;
                }
                else
                {
                  uint64_t v42 = (uint64_t **)k[1];
                }
                break;
              }
            }
            if (v42) {
              unint64_t v46 = (const llvm::Instruction *)(v42 - 3);
            }
            else {
              unint64_t v46 = 0;
            }
            if ((llvm::isValidAssumeForContext(v33, v46, 0, v36) & 1) == 0)
            {
              int v47 = v274[10];
              uint64_t v48 = v47 - 3;
              if (!v47) {
                uint64_t v48 = 0;
              }
              uint64_t v49 = v48 + 5;
              for (m = v48[6]; m != (uint64_t *)v49; m = (uint64_t *)m[1])
              {
                uint64_t v51 = m - 3;
                if (!m) {
                  uint64_t v51 = 0;
                }
                if (*((unsigned char *)v51 + 16) != 83)
                {
                  if (*((unsigned __int8 *)m - 8) - 38 > 0x38
                    || ((1 << (*((unsigned char *)m - 8) - 38)) & 0x100060000000001) == 0)
                  {
                    uint64_t v49 = (uint64_t **)m;
                  }
                  else
                  {
                    uint64_t v49 = (uint64_t **)m[1];
                  }
                  break;
                }
              }
              unsigned int v33 = v242;
              uint64_t v53 = v49 ? (uint64_t)(v49 - 3) : 0;
              if (v242 != (llvm *)v53)
              {
                uint64_t v34 = v241;
                break;
              }
            }
            unsigned int v98 = v239;
            if (hasAttribute)
            {
              uint64_t v99 = *(void *)(v34 + 24);
              *(void *)(v99 + 112) = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(v99 + 112), **(uint64_t ***)v99, *(_DWORD *)(v34 + 32) + 1, v239);
            }
            unint64_t v100 = llvm::Attribute::get(v277, v98, v240);
            uint64_t v101 = *(void *)(v34 + 24);
            LODWORD(v292) = *(_DWORD *)(v34 + 32);
            *(void *)(v101 + 112) = llvm::AttributeList::addParamAttribute((void *)(v101 + 112), **(uint64_t ***)v101, &v292, 1, v100);
            unsigned __int8 v285 = 1;
            sub_1CD4B58BC((uint64_t)&v292, (uint64_t)&v278, (uint64_t *)&v242);
            uint64_t v103 = *(unsigned int *)(v32 + 8);
            if (v103 != *(_DWORD *)(v32 + 12))
            {
              long long v104 = (_DWORD *)((char *)v242 - 32 * (*((_DWORD *)v242 + 5) & 0x7FFFFFF));
LABEL_142:
              long long v105 = &v104[8 * v103];
              long long v106 = llvm::UndefValue::get(**(llvm::UndefValue ***)v105, v102);
              if (*(void *)v105)
              {
                **((void **)v105 + 2) = *((void *)v105 + 1);
                uint64_t v107 = *((void *)v105 + 1);
                if (v107) {
                  *(void *)(v107 + 16) = *((void *)v105 + 2);
                }
              }
              *(void *)long long v105 = v106;
              if (v106)
              {
                uint64_t v110 = *((void *)v106 + 1);
                long long v108 = (void *)((char *)v106 + 8);
                uint64_t v109 = v110;
                long long v111 = &v104[8 * v103];
                *((void *)v111 + 1) = v110;
                uint64_t v112 = v111 + 2;
                if (v110) {
                  *(void *)(v109 + 16) = v112;
                }
                *(void *)&v104[8 * v103 + 4] = v108;
                void *v108 = v105;
              }
            }
          }
          *(void *)uint64_t v32 = inserted;
LABEL_133:
          v32 += 16;
          unsigned int v27 = v233;
          uint64_t v5 = v226;
          uint64_t v7 = v228;
          size_t v4 = v230;
          char v26 = v232;
          if (v32 == v235) {
            goto LABEL_39;
          }
          continue;
        }
        break;
      }
      uint64_t v237 = v34;
      int v238 = v239;
      uint64_t v272 = 0;
      char v54 = sub_1CD120F14((uint64_t)&v286, &v237, &v272);
      uint64_t v56 = v272;
      if (v54)
      {
        unint64_t v57 = (unint64_t *)(v272 + 16);
        unint64_t v58 = *(void *)(v272 + 16);
        unint64_t v60 = (_DWORD *)(v272 + 24);
        uint64_t v59 = *(unsigned int *)(v272 + 24);
        unint64_t v61 = v240;
        if (v59)
        {
          uint64_t v62 = 24 * v59;
          while (1)
          {
            if (llvm::isValidAssumeForContext(*(llvm **)v58, v33, v276, v55))
            {
              if (*(void *)(v58 + 8) >= v61) {
                goto LABEL_109;
              }
              if (llvm::isValidAssumeForContext(v33, *(const llvm::Instruction **)v58, v276, v55)) {
                break;
              }
            }
LABEL_94:
            v58 += 24;
            v62 -= 24;
            if (!v62)
            {
              unint64_t v95 = *v60;
              unint64_t v58 = *v57;
              goto LABEL_131;
            }
          }
          long long v64 = *(const llvm::Instruction **)v58;
          int v224 = *(_DWORD *)(*(void *)v58 + 20);
          int v223 = *(_DWORD *)(*(void *)(v58 + 16) + 8);
          v222 = *(llvm::ConstantInt **)(*v277 + 1984);
          unsigned int v65 = *(_DWORD *)(*v277 + 1992);
          DWORD2(v292) = v65 >> 8;
          if (v65 >> 8 > 0x40) {
            operator new[]();
          }
          if (v65 <= 0xFF) {
            unint64_t v66 = 0;
          }
          else {
            unint64_t v66 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v65) + 63);
          }
          *(void *)&long long v292 = v66 & v61;
          uint64_t v67 = llvm::ConstantInt::get(v222, (llvm::LLVMContext *)&v292, v63);
          if (DWORD2(v292) >= 0x41 && (void)v292) {
            MEMORY[0x1D25D9CB0](v292, 0x1000C8000313F17);
          }
          v68 = (char *)v64 - 32 * (v224 & 0x7FFFFFF);
          uint64_t v69 = (v223 + 1);
          long long v70 = &v68[32 * v69];
          if (*(void *)v70)
          {
            long long v71 = &v68[32 * v69];
            uint64_t v73 = (void *)*((void *)v71 + 2);
            long long v72 = v71 + 16;
            *uint64_t v73 = *(v72 - 1);
            uint64_t v74 = *(v72 - 1);
            if (v74) {
              *(void *)(v74 + 16) = *v72;
            }
          }
          *(void *)long long v70 = v67;
          if (v67)
          {
            uint64_t v77 = v67[1];
            long long v76 = (char **)(v67 + 1);
            uint64_t v75 = v77;
            unint64_t v78 = &v68[32 * v69];
            *((void *)v78 + 1) = v77;
            if (v77) {
              *(void *)(v75 + 16) = v78 + 8;
            }
            *((void *)v78 + 2) = v76;
            llvm::Value *v76 = v70;
          }
          unsigned __int8 v285 = 1;
LABEL_109:
          sub_1CD4B58BC((uint64_t)&v292, (uint64_t)&v278, (uint64_t *)&v242);
          uint64_t v80 = *(unsigned int *)(v32 + 8);
          if (v80 != *(_DWORD *)(v32 + 12))
          {
            v225 = (_DWORD *)((char *)v33 - 32 * (*((_DWORD *)v33 + 5) & 0x7FFFFFF));
            long long v81 = &v225[8 * v80];
            long long v82 = llvm::UndefValue::get(**(llvm::UndefValue ***)v81, v79);
            if (*(void *)v81)
            {
              **((void **)v81 + 2) = *((void *)v81 + 1);
              uint64_t v83 = *((void *)v81 + 1);
              if (v83) {
                *(void *)(v83 + 16) = *((void *)v81 + 2);
              }
            }
            *(void *)long long v81 = v82;
            if (v82)
            {
              uint64_t v86 = *((void *)v82 + 1);
              long long v84 = (void *)((char *)v82 + 8);
              uint64_t v85 = v86;
              long long v87 = &v225[8 * v80];
              *((void *)v87 + 1) = v86;
              uint64_t v88 = v87 + 2;
              if (v86) {
                *(void *)(v85 + 16) = v88;
              }
              *(void *)&v225[8 * v80 + 4] = v84;
              *long long v84 = v81;
            }
          }
          *(void *)uint64_t v32 = inserted;
          goto LABEL_94;
        }
        unint64_t v95 = 0;
LABEL_131:
        *(void *)&long long v292 = v33;
        *((void *)&v292 + 1) = v61;
        v293[0] = v32;
        if (v95 >= *(unsigned int *)(v56 + 28))
        {
          if (v58 > (unint64_t)&v292 || v58 + 24 * v95 <= (unint64_t)&v292) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unint64_t v96 = v58 + 24 * *v60;
        long long v97 = v292;
        *(void *)(v96 + 16) = v293[0];
        *(_OWORD *)unint64_t v96 = v97;
        ++*v60;
        goto LABEL_133;
      }
      uint64_t v273 = v272;
      int v89 = v286;
      unsigned int v90 = v288[0];
      unsigned int v91 = v286 >> 1;
      int v92 = v286 & 1;
      if (v286) {
        unsigned int v93 = 16;
      }
      else {
        unsigned int v93 = v288[0];
      }
      if (4 * v91 + 4 >= 3 * v93)
      {
        v93 *= 2;
      }
      else if (v93 + ~v91 - HIDWORD(v286) > v93 >> 3)
      {
LABEL_126:
        LODWORD(v286) = ((v89 & 0xFFFFFFFE) + 2) | v92;
        if (*(void *)v56 != -4096 || *(_DWORD *)(v56 + 8) != 82) {
          --HIDWORD(v286);
        }
        unint64_t v95 = 0;
        *(void *)uint64_t v56 = v237;
        int v94 = v238;
        unint64_t v58 = v56 + 32;
        *(void *)(v56 + 16) = v56 + 32;
        *(_DWORD *)(v56 + 8) = v94;
        *(void *)(v56 + 24) = 0x200000000;
        unint64_t v60 = (_DWORD *)(v56 + 24);
        unsigned int v33 = v242;
        unint64_t v61 = v240;
        goto LABEL_131;
      }
      if (v93 >= 0x11)
      {
        unint64_t v113 = (v93 - 1) | ((unint64_t)(v93 - 1) >> 1);
        unint64_t v114 = v113 | (v113 >> 2) | ((v113 | (v113 >> 2)) >> 4);
        int v115 = ((v114 | (v114 >> 8)) >> 16) | v114 | (v114 >> 8);
        if ((v115 + 1) > 0x40) {
          unsigned int v93 = v115 + 1;
        }
        else {
          unsigned int v93 = 64;
        }
      }
      if (v286)
      {
        uint64_t v117 = 0;
        v118 = &v292;
        do
        {
          v119 = *(uint64_t ***)((char *)&v286 + v117 * 8 + 8);
          int v120 = v288[v117];
          if ((v119 != (uint64_t **)-4096 || v120 != 82) && (v119 != (uint64_t **)-8192 || v120 != 83))
          {
            long long *v118 = *(_OWORD *)((char *)&v286 + v117 * 8 + 8);
            sub_1CD121014((uint64_t)(v118 + 1), (uint64_t)&v288[v117 + 1]);
            v118 += 5;
            v121 = (void *)v288[v117 + 1];
            if (&v288[v117 + 3] != v121) {
              free(v121);
            }
          }
          v117 += 10;
        }
        while (v117 != 160);
        if (v93 > 0x10)
        {
          LODWORD(v286) = v286 & 0xFFFFFFFE;
          uint64_t v287 = (uint64_t)operator new(80 * v93, (std::align_val_t)8uLL);
          v288[0] = v93;
        }
        sub_1CD1210DC((uint64_t)&v286, (uint64_t)&v292, (uint64_t)v118);
      }
      else
      {
        uint64_t v116 = v287;
        if (v93 > 0x10)
        {
          uint64_t v287 = (uint64_t)operator new(80 * v93, (std::align_val_t)8uLL);
          v288[0] = v93;
        }
        else
        {
          LODWORD(v286) = v286 | 1;
        }
        sub_1CD1210DC((uint64_t)&v286, v116, v116 + 80 * v90);
        MEMORY[0x1D25D9CD0](v116, 8);
      }
      sub_1CD120F14((uint64_t)&v286, &v237, &v273);
      int v89 = v286;
      uint64_t v56 = v273;
      int v92 = v286 & 1;
      goto LABEL_126;
    }
LABEL_35:
    sub_1CD4B9FD0((void **)&v253);
  }
LABEL_177:
  if (v250)
  {
    v251 = v250;
    operator delete(v250);
  }
  if (v245 != v244) {
    free(v245);
  }
  if (__p)
  {
    v258 = (char *)__p;
    operator delete(__p);
  }
  if (*((void *)&v253 + 1) != (void)v253) {
    free(*((void **)&v253 + 1));
  }
  if (v270)
  {
    v271 = v270;
    operator delete(v270);
  }
  if (__src != v265) {
    free(__src);
  }
  if (v263)
  {
    v264 = v263;
    operator delete(v263);
  }
  if (*((void *)&v260 + 1) != (void)v260) {
    free(*((void **)&v260 + 1));
  }
  char v122 = v286;
  unsigned int v123 = v288[0];
  if (v286 & 1 | LODWORD(v288[0]))
  {
    uint64_t v124 = v287;
    if (v286)
    {
      uint64_t v124 = (uint64_t)v7;
      unsigned int v123 = 16;
    }
    if (v123)
    {
      uint64_t v125 = v124 + 80 * v123;
      v126 = (void *)(v124 + 32);
      do
      {
        v128 = (char *)(v126 - 4);
        uint64_t v127 = *(v126 - 4);
        int v129 = *((_DWORD *)v126 - 6);
        if ((v127 != -4096 || v129 != 82) && (v127 != -8192 || v129 != 83))
        {
          v130 = (void *)*(v126 - 2);
          if (v126 != v130) {
            free(v130);
          }
        }
        v126 += 10;
      }
      while (v128 + 80 != (char *)v125);
      char v122 = v286;
    }
  }
  if ((v122 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v287, 8);
  }
  sub_1CD11F574((uint64_t)&v274, 0);
  sub_1CD11F6E8((uint64_t)&v274, 1);
  *(void *)&long long v292 = v293;
  *((void *)&v292 + 1) = 0x400000000;
  v131 = sub_1CD875958((int *)v4);
  if (v282) {
    v133 = v5;
  }
  else {
    v133 = v283;
  }
  unsigned int v134 = v284;
  if (v282) {
    unsigned int v134 = 8;
  }
  v135 = (int *)&v133[7 * v134];
  if (v135 != v131)
  {
    v136 = v131;
    v231 = v4;
    v137 = v291;
    v138 = (uint64_t **)v293;
    v234 = v132;
    long long v139 = xmmword_1CFAC3080;
    v236 = v135;
    while (1)
    {
      uint64_t v140 = v136[4];
      if (v140 < 2) {
        goto LABEL_348;
      }
      v141 = (uint64_t *)*((void *)v136 + 1);
      uint64_t v142 = *v141;
      uint64_t v143 = v141[v140 - 1];
      if (!HIDWORD(v292)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *v138 = v141;
      unsigned int v144 = ++DWORD2(v292);
      v145 = (uint64_t *)*((void *)v136 + 1);
      if (v142 != v143) {
        break;
      }
LABEL_249:
      if (v144 >= HIDWORD(v292)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(v292 + 8 * v144) = &v145[v136[4]];
      unsigned int v160 = DWORD2(v292) + 1;
      DWORD2(v292) = v160;
      v138 = (uint64_t **)v292;
      v161 = (uint64_t **)v292;
      while (v161 != &v138[v160 - 1])
      {
        v162 = *v161;
        v164 = v161[1];
        ++v161;
        v163 = v164;
        if (v162 != v164 && v162 + 1 != v163)
        {
          uint64_t v166 = *(void *)v136;
          uint64_t v286 = (uint64_t)v274[5];
          uint64_t v287 = 1;
          for (uint64_t n = 16; n != 208; n += 24)
            *(_OWORD *)((char *)&v286 + n) = v139;
          v168 = v137;
          v289 = v137;
          uint64_t v290 = 0x800000000;
          memset(&v291[192], 0, 24);
          for (iuint64_t i = *(void *)(v166 + 48); ; iuint64_t i = *(void *)(ii + 8))
          {
            uint64_t v170 = ii - 24;
            uint64_t v171 = ii ? ii - 24 : 0;
            if (*(unsigned char *)(v171 + 16) != 83) {
              break;
            }
          }
          if (*(unsigned char *)(ii - 8) == 94)
          {
            uint64_t v173 = ii + 8;
            uint64_t v172 = *(void *)(ii + 8);
            uint64_t v174 = *(void *)(v173 + 8) + 40;
            if (v172) {
              BOOL v175 = v172 == v174;
            }
            else {
              BOOL v175 = 1;
            }
            if (v175) {
              uint64_t v170 = 0;
            }
            else {
              uint64_t v170 = v172 - 24;
            }
          }
          v176 = v162;
          do
          {
            v244 = (unsigned char *)*v176;
            uint64_t v177 = (uint64_t)v244;
            sub_1CD4B58BC((uint64_t)&v260, (uint64_t)&v278, (uint64_t *)&v244);
            int v178 = *(_DWORD *)(v177 + 20);
            if (v178 < 0)
            {
              uint64_t v179 = v177 - 32 * (v178 & 0x7FFFFFF);
              uint64_t v180 = *(void *)(v179 - 8);
              uint64_t v227 = v179 - 8;
              if (v180)
              {
                uint64_t v229 = v227 - v180;
                do
                {
                  llvm::getKnowledgeFromBundle(v177, v229, (uint64_t)&v260);
                  if (v260)
                  {
                    long long v253 = v260;
                    uint64_t v254 = v261;
                    sub_1CD11D2E0((unint64_t)&v286, &v253, v181, v182, v183, v184, v185);
                    uint64_t v186 = v261;
                    if (v261)
                    {
                      if (*(unsigned __int8 *)(v261 + 16) >= 0x1Cu)
                      {
                        uint64_t v187 = *(void *)(v261 + 40);
                        if (v187 == *(void *)(v170 + 40))
                        {
                          int v188 = *(__int16 *)(v187 + 18);
                          if ((v188 & 0x80000000) == 0)
                          {
                            uint64_t v193 = *(void *)(v187 + 48);
                            if (v193 != v187 + 40)
                            {
                              int v194 = 0;
                              do
                              {
                                uint64_t v195 = v193 - 24;
                                if (!v193) {
                                  uint64_t v195 = 0;
                                }
                                *(_DWORD *)(v195 + 56) = v194++;
                                uint64_t v193 = *(void *)(v193 + 8);
                              }
                              while (v193 != v187 + 40);
                            }
                            *(_WORD *)(v187 + 18) = v188 | 0x8000;
                          }
                          if (*(_DWORD *)(v170 + 56) < *(_DWORD *)(v186 + 56) || v170 == v186)
                          {
                            uint64_t v190 = *(void *)(v186 + 32);
                            uint64_t v191 = v187 + 40;
                            if (v190) {
                              BOOL v192 = v190 == v191;
                            }
                            else {
                              BOOL v192 = 1;
                            }
                            if (v192) {
                              uint64_t v170 = 0;
                            }
                            else {
                              uint64_t v170 = v190 - 24;
                            }
                          }
                        }
                      }
                    }
                  }
                  v229 += 16;
                }
                while (v229 != v227);
              }
            }
            ++v176;
          }
          while (v176 != v163);
          uint64_t v196 = *v162;
          uint64_t v197 = *(void *)(v170 + 40);
          int v198 = *(__int16 *)(v197 + 18);
          if ((v198 & 0x80000000) == 0)
          {
            uint64_t v213 = *(void *)(v197 + 48);
            if (v213 != v197 + 40)
            {
              int v214 = 0;
              do
              {
                uint64_t v215 = v213 - 24;
                if (!v213) {
                  uint64_t v215 = 0;
                }
                *(_DWORD *)(v215 + 56) = v214++;
                uint64_t v213 = *(void *)(v213 + 8);
              }
              while (v213 != v197 + 40);
            }
            *(_WORD *)(v197 + 18) = v198 | 0x8000;
          }
          if (*(_DWORD *)(v170 + 56) < *(_DWORD *)(v196 + 56) && v196 != v170)
          {
            v205 = (void *)(v196 + 24);
            while (1)
            {
              if (v205) {
                uint64_t v206 = (uint64_t)(v205 - 3);
              }
              else {
                uint64_t v206 = 0;
              }
              int v207 = *(unsigned __int8 *)(v206 + 16);
              if (v207 != 84)
              {
                switch(*(unsigned char *)(v206 + 16))
                {
                  case 0x1D:
                  case 0x22:
                  case 0x23:
                    goto LABEL_332;
                  case 0x1E:
                  case 0x1F:
                  case 0x20:
                  case 0x21:
                  case 0x25:
                    goto LABEL_324;
                  case 0x24:
                  case 0x26:
                    if ((*(_WORD *)(v206 + 18) & 1) == 0) {
                      goto LABEL_332;
                    }
                    goto LABEL_324;
                  default:
                    if (v207 != 80) {
                      goto LABEL_324;
                    }
                    PersonalityFuint64_t n = (llvm::Value *)llvm::Function::getPersonalityFn(*(llvm::Function **)(*(void *)(v206 + 40) + 56));
                    if (llvm::classifyEHPersonality(PersonalityFn, v210) != 10) {
                      goto LABEL_332;
                    }
                    goto LABEL_325;
                }
              }
              uint64_t v208 = *(void *)(v206 + 64);
              if ((!v208 || (*(unsigned char *)(v208 + 16) & 0x20) == 0)
                && !llvm::CallBase::hasFnAttrOnCalledFunction(v206, 37))
              {
                break;
              }
LABEL_324:
              if ((llvm::Instruction::willReturn((llvm::Instruction *)v206) & 1) == 0) {
                break;
              }
LABEL_325:
              v205 = (void *)*v205;
              if (v205 == (void *)(v170 + 24)) {
                goto LABEL_306;
              }
            }
LABEL_332:
            uint64_t v211 = *(void *)(v206 + 32);
            if (v211) {
              BOOL v212 = v211 == *(void *)(v206 + 40) + 40;
            }
            else {
              BOOL v212 = 1;
            }
            if (v212) {
              uint64_t v170 = 0;
            }
            else {
              uint64_t v170 = v211 - 24;
            }
          }
LABEL_306:
          uint64_t v200 = sub_1CD11CB94((uint64_t ***)&v286);
          if (v200)
          {
            v201 = (llvm::Value *)v200;
            unsigned __int8 v285 = 1;
            uint64_t v202 = *(void *)(v170 + 40);
            *(void *)(v200 + 40) = v202;
            *(_WORD *)(v202 + 18) &= ~0x8000u;
            if ((*(unsigned char *)(v200 + 23) & 0x10) != 0)
            {
              uint64_t v216 = *(void *)(v202 + 56);
              if (v216)
              {
                v217 = *(llvm::ValueSymbolTable **)(v216 + 104);
                if (v217) {
                  llvm::ValueSymbolTable::reinsertValue(v217, v201);
                }
              }
            }
            uint64_t v204 = *(void *)(v170 + 24);
            v203 = (void *)(v170 + 24);
            *((void *)v201 + 4) = v203;
            *((void *)v201 + 3) = v204;
            *(void *)(v204 + 8) = (char *)v201 + 24;
            void *v203 = (char *)v201 + 24;
            llvm::AssumptionCache::registerAssumption(v275, (uint64_t)v201);
          }
          v137 = v168;
          if (v289 != v168) {
            free(v289);
          }
          if ((v287 & 1) == 0) {
            MEMORY[0x1D25D9CD0](v288[0], 8);
          }
          v138 = (uint64_t **)v292;
          unsigned int v160 = DWORD2(v292);
          long long v139 = xmmword_1CFAC3080;
        }
      }
      DWORD2(v292) = 0;
      v132 = v234;
      v135 = v236;
LABEL_348:
      while (1)
      {
        v136 += 14;
        if (v136 == v132) {
          break;
        }
        if ((*(void *)v136 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_352;
        }
      }
      v136 = v132;
LABEL_352:
      if (v136 == v135)
      {
        size_t v4 = v231;
        if (v138 != v293) {
          free(v138);
        }
        goto LABEL_358;
      }
    }
    uint64_t v146 = v142 + 24;
    uint64_t v147 = v143 + 24;
    while (2)
    {
      if (v146) {
        uint64_t v148 = v146 - 24;
      }
      else {
        uint64_t v148 = 0;
      }
      int v149 = *(unsigned __int8 *)(v148 + 16);
      if (v149 != 84)
      {
        switch(*(unsigned char *)(v148 + 16))
        {
          case 0x1D:
          case 0x22:
          case 0x23:
            goto LABEL_241;
          case 0x1E:
          case 0x1F:
          case 0x20:
          case 0x21:
          case 0x25:
            goto LABEL_227;
          case 0x24:
          case 0x26:
            if ((*(_WORD *)(v148 + 18) & 1) == 0) {
              goto LABEL_241;
            }
            goto LABEL_227;
          default:
            if (v149 != 80) {
              goto LABEL_227;
            }
            v152 = (llvm::Value *)llvm::Function::getPersonalityFn(*(llvm::Function **)(*(void *)(v148 + 40) + 56));
            if (llvm::classifyEHPersonality(v152, v153) == 10) {
              goto LABEL_228;
            }
            goto LABEL_241;
        }
      }
      uint64_t v151 = *(void *)(v148 + 64);
      if (v151 && (*(unsigned char *)(v151 + 16) & 0x20) != 0
        || llvm::CallBase::hasFnAttrOnCalledFunction(v148, 37))
      {
LABEL_227:
        if ((llvm::Instruction::willReturn((llvm::Instruction *)v148) & 1) == 0) {
          goto LABEL_241;
        }
LABEL_228:
        v150 = v145;
        long long v139 = xmmword_1CFAC3080;
      }
      else
      {
        do
        {
LABEL_241:
          v150 = v145;
          uint64_t v157 = *v145;
          uint64_t v158 = *(void *)(*v145 + 40);
          int v159 = *(__int16 *)(v158 + 18);
          if ((v159 & 0x80000000) == 0)
          {
            uint64_t v154 = *(void *)(v158 + 48);
            if (v154 != v158 + 40)
            {
              int v155 = 0;
              do
              {
                uint64_t v156 = v154 - 24;
                if (!v154) {
                  uint64_t v156 = 0;
                }
                *(_DWORD *)(v156 + 56) = v155++;
                uint64_t v154 = *(void *)(v154 + 8);
              }
              while (v154 != v158 + 40);
            }
            *(_WORD *)(v158 + 18) = v159 | 0x8000;
          }
          ++v145;
        }
        while (*(_DWORD *)(v157 + 56) < *(_DWORD *)(v148 + 56));
        long long v139 = xmmword_1CFAC3080;
        if (*(uint64_t **)(v292 + 8 * DWORD2(v292) - 8) != v150)
        {
          if (DWORD2(v292) >= HIDWORD(v292)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(v292 + 8 * DWORD2(v292)) = v150;
          ++DWORD2(v292);
        }
      }
      uint64_t v146 = *(void *)(v146 + 8);
      v145 = v150;
      if (v146 == v147)
      {
        v145 = (uint64_t *)*((void *)v136 + 1);
        unsigned int v144 = DWORD2(v292);
        goto LABEL_249;
      }
      continue;
    }
  }
LABEL_358:
  sub_1CD11F574((uint64_t)&v274, 1);
  int v218 = v285;
  sub_1CD876030((uint64_t)v4);
  if ((v278 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v279.i64[0], 8);
  }
  return v218 != 0;
}

void llvm::initializeAssumeSimplifyPassLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  char v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFB898, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CD11EE9C;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCFB898, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD11EE9C(uint64_t a1)
{
}

uint64_t sub_1CD11EF38(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCFB890;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2647A18;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFB898, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CD11EE9C;
    v5[1] = &PassRegistry;
    size_t v4 = v5;
    std::__call_once(&qword_1EBCFB898, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void llvm::initializeAssumeBuilderPassLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  char v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFB8A0, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CD11F058;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCFB8A0, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD11F058(uint64_t a1)
{
}

uint64_t sub_1CD11F0F4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result = sub_1CB83544C(*(void *)(*(void *)(*(void *)(a2 + 40) + 56) + 40) + 272, a4);
  if (((unint64_t)(result + 7) >> 3))
  {
    LODWORD(v22) = 76;
    *((void *)&v22 + 1) = ((unint64_t)(result + 7) >> 3);
    uint64_t v23 = a3;
    uint64_t result = sub_1CD11D2E0(a1, &v22, v10, v11, v12, v13, v14);
    uint64_t v15 = *(void *)(*(void *)(a2 + 40) + 56);
    unsigned int v16 = *(_DWORD *)(*(void *)a3 + 8);
    if ((v16 & 0xFE) == 0x12) {
      unsigned int v16 = *(_DWORD *)(**(void **)(*(void *)a3 + 16) + 8);
    }
    if ((!v15 || (uint64_t v17 = *(void *)(v15 + 112)) == 0 || (*(unsigned char *)(v17 + 17) & 1) == 0) && v16 <= 0xFF)
    {
      LODWORD(v20) = 39;
      *((void *)&v20 + 1) = 0;
      uint64_t v21 = a3;
      uint64_t result = sub_1CD11D2E0(a1, &v20, v10, v11, v12, v13, v14);
    }
  }
  if (a5)
  {
    LODWORD(v18) = 74;
    *((void *)&v18 + 1) = 1 << a5;
    uint64_t v19 = a3;
    return sub_1CD11D2E0(a1, &v18, v10, v11, v12, v13, v14);
  }
  return result;
}

unint64_t sub_1CD11F1F0(unint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v8 = *(void *)(result + 8);
  if (a3)
  {
    uint64_t v9 = (uint64_t **)result;
    uint64_t v10 = 0;
    uint64_t v11 = a3;
    do
    {
      if (a2)
      {
        if ((v10 + 2) < *(_DWORD *)(a2 + 8))
        {
          uint64_t v12 = *(void *)(a2 + 40 + 8 * (v10 + 2));
          if (v12)
          {
            uint64_t v13 = *(unsigned int *)(v12 + 8);
            if (v13)
            {
              uint64_t v14 = (uint64_t *)(v12 + 48);
              uint64_t v15 = 8 * v13;
              do
              {
                uint64_t v16 = *v14;
                if (!*v14
                  || *(unsigned char *)(v16 + 8) == 2
                  || (int v17 = *(_DWORD *)(v16 + 12), v17 != 74) && v17 != 39
                  || (v23 = *v14, uint64_t result = sub_1CD11F33C(**v9, v10), v16 = v23, result))
                {
                  uint64_t result = sub_1CD11F3AC(v8, v16, *(void *)(**v9 - 32 * (*(_DWORD *)(**v9 + 20) & 0x7FFFFFF) + 32 * v10), a4, a5, a6, a7);
                }
                ++v14;
                v15 -= 8;
              }
              while (v15);
            }
          }
        }
      }
      ++v10;
    }
    while (v10 != v11);
  }
  if (a2)
  {
    if (*(_DWORD *)(a2 + 8))
    {
      uint64_t v18 = *(void *)(a2 + 40);
      if (v18)
      {
        uint64_t v19 = *(unsigned int *)(v18 + 8);
        if (v19)
        {
          long long v20 = (uint64_t *)(v18 + 48);
          uint64_t v21 = 8 * v19;
          do
          {
            uint64_t v22 = *v20++;
            uint64_t result = sub_1CD11F3AC(v8, v22, 0, a4, a5, a6, a7);
            v21 -= 8;
          }
          while (v21);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CD11F33C(uint64_t a1, int a2)
{
  if (llvm::CallBase::paramHasAttr(a1, a2, 36) & 1) != 0 || (llvm::CallBase::paramHasAttr(a1, a2, 76)) {
    return 1;
  }

  return llvm::CallBase::paramHasAttr(a1, a2, 77);
}

unint64_t sub_1CD11F3AC(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a2)
  {
    if (!byte_1EBD0C118) {
      return result;
    }
    uint64_t v11 = 0;
    int v12 = 0;
LABEL_16:
    LODWORD(v13) = v12;
    *((void *)&v13 + 1) = v11;
    uint64_t v14 = a3;
    return sub_1CD11D2E0(result, &v13, a3, a4, a5, a6, a7);
  }
  int v7 = *(unsigned __int8 *)(a2 + 8);
  if ((v7 & 0xFE) != 2)
  {
    if (byte_1EBD0C118
      || ((int v8 = *(_DWORD *)(a2 + 12), (v8 - 36) <= 0x29)
        ? (BOOL v9 = ((1 << (v8 - 36)) & 0x34000000009) == 0)
        : (BOOL v9 = 1),
          v9 ? (BOOL v10 = v8 == 5) : (BOOL v10 = 1),
          v10))
    {
      if (v7 == 1) {
        uint64_t v11 = *(void *)(a2 + 16);
      }
      else {
        uint64_t v11 = 0;
      }
      int v12 = *(_DWORD *)(a2 + 12);
      goto LABEL_16;
    }
  }
  return result;
}

const llvm::DataLayout **sub_1CD11F454(const llvm::DataLayout **result, uint64_t a2)
{
  char v2 = result;
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (v3 == 62 || v3 == 5 && *(_WORD *)(a2 + 18) == 34)
  {
    uint64_t v4 = *((void *)*result + 1);
    uint64_t result = (const llvm::DataLayout **)llvm::GEPOperator::getMaxPreservedAlignment((llvm::GEPOperator *)a2, result[1]);
    *((void *)*v2 + 1) = ((1 << (char)result) | v4) & -((1 << (char)result) | v4);
  }
  return result;
}

uint64_t sub_1CD11F4C4(uint64_t *a1, uint64_t a2, llvm *this, const llvm::DominatorTree *a4)
{
  unint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *a1;
  uint64_t result = llvm::isValidAssumeForContext(this, *(const llvm::Instruction **)(*a1 + 416), *(const llvm::Instruction **)(*a1 + 432), a4);
  if (result)
  {
    if (v7 >= *(void *)(a1[1] + 8))
    {
      uint64_t result = 1;
      *(unsigned char *)a1[2] = 1;
    }
    else
    {
      uint64_t result = llvm::isValidAssumeForContext(*(llvm **)(v8 + 416), this, *(const llvm::Instruction **)(v8 + 432), v10);
      if (result)
      {
        uint64_t result = 1;
        uint64_t v11 = (void *)a1[3];
        *(unsigned char *)a1[2] = 1;
        *uint64_t v11 = (char *)this + 32 * (*((_DWORD *)a4 + 2) + 1) + -32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
      }
    }
  }
  return result;
}

void *sub_1CD11F574(uint64_t a1, char a2)
{
  uint64_t v4 = (void *)(a1 + 32);
  uint64_t v5 = sub_1CD49B408((int *)(a1 + 32));
  unsigned int v6 = (uint64_t *)v5;
  uint64_t v8 = v7;
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v9 = a1 + 40;
    uint64_t v10 = 4;
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = *(unsigned int *)(a1 + 48);
  }
  uint64_t v11 = (uint64_t *)(v9 + 8 * v10);
  if (v11 != (uint64_t *)v5)
  {
    do
    {
      uint64_t v12 = *(void *)(*v6 - 32 * (*(_DWORD *)(*v6 + 20) & 0x7FFFFFF));
      if (v12) {
        BOOL v13 = *(unsigned char *)(v12 + 16) == 16;
      }
      else {
        BOOL v13 = 0;
      }
      if (!v13) {
        goto LABEL_22;
      }
      uint64_t v14 = *(unsigned int *)(v12 + 32);
      if (v14 <= 0x40)
      {
        if (!*(void *)(v12 + 24)) {
          goto LABEL_22;
        }
LABEL_19:
        if ((a2 & 1) != 0 || llvm::isAssumeWithEmptyBundle(*v6))
        {
          *(unsigned char *)(a1 + 536) = 1;
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        goto LABEL_22;
      }
      int v15 = 0;
      int64_t v16 = (unint64_t)(v14 + 63) >> 6;
      do
      {
        if (v16-- < 1) {
          break;
        }
        unint64_t v18 = *(void *)(*(void *)(v12 + 24) + 8 * v16);
        v15 += __clz(v18);
      }
      while (!v18);
      int v19 = v14 | 0xFFFFFFC0;
      if ((v14 & 0x3F) == 0) {
        int v19 = 0;
      }
      if (v15 + v19 != v14) {
        goto LABEL_19;
      }
LABEL_22:
      while (++v6 != v8)
      {
        if ((*v6 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_26;
        }
      }
      unsigned int v6 = v8;
LABEL_26:
      ;
    }
    while (v6 != v11);
  }

  return sub_1CD646000(v4);
}

unint64_t sub_1CD11F6E8(uint64_t a1, int a2)
{
  uint64_t v4 = (int *)(a1 + 80);
  sub_1CD875874(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v5 + 184)) {
    llvm::AssumptionCache::scanFunction(*(llvm::AssumptionCache **)(a1 + 8));
  }
  uint64_t v6 = *(unsigned int *)(v5 + 24);
  if (v6)
  {
    uint64_t v13 = *(void *)(v5 + 16);
    uint64_t v14 = v13 + 32 * v6;
    do
    {
      uint64_t v15 = *(void *)(v13 + 16);
      if (v15)
      {
        if (!a2) {
          goto LABEL_23;
        }
        uint64_t v16 = *(void *)(v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF));
        if (v16 && *(unsigned char *)(v16 + 16) == 16)
        {
          uint64_t v18 = *(unsigned int *)(v16 + 32);
          if (v18 > 0x40)
          {
            int v19 = 0;
            int64_t v20 = (unint64_t)(v18 + 63) >> 6;
            do
            {
              if (v20-- < 1) {
                break;
              }
              unint64_t v22 = *(void *)(*(void *)(v16 + 24) + 8 * v20);
              v19 += __clz(v22);
            }
            while (!v22);
            int v23 = v18 | 0xFFFFFFC0;
            if ((v18 & 0x3F) == 0) {
              int v23 = 0;
            }
            if (v19 + v23 == v18) {
              goto LABEL_25;
            }
LABEL_23:
            uint64_t v30 = *(void *)(v15 + 40);
            int v24 = sub_1CD875B38(v4, &v30);
            unint64_t v25 = *((unsigned int *)v24 + 4);
            if (v25 >= *((unsigned int *)v24 + 5)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(v24[1] + 8 * v25) = v15;
            ++*((_DWORD *)v24 + 4);
            goto LABEL_25;
          }
          if (*(void *)(v16 + 24)) {
            goto LABEL_23;
          }
        }
      }
LABEL_25:
      v13 += 32;
    }
    while (v13 != v14);
  }
  unint64_t result = (unint64_t)sub_1CD875958(v4);
  unint64_t v8 = result;
  unint64_t v10 = v9;
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v11 = a1 + 88;
    unsigned int v12 = 8;
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 88);
    unsigned int v12 = *(_DWORD *)(a1 + 96);
  }
  uint64_t v26 = v11 + 56 * v12;
  if (v26 != result)
  {
    do
    {
      unint64_t v27 = *(unsigned int *)(v8 + 16);
      unint64_t v28 = 126 - 2 * __clz(v27);
      if (v27) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      unint64_t result = sub_1CD11F8D4(*(void *)(v8 + 8), (uint64_t *)(*(void *)(v8 + 8) + 8 * v27), v29, 1);
      while (1)
      {
        v8 += 56;
        if (v8 == v10) {
          break;
        }
        if ((*(void *)v8 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_38;
        }
      }
      unint64_t v8 = v10;
LABEL_38:
      ;
    }
    while (v8 != v26);
  }
  return result;
}

unint64_t sub_1CD11F8D4(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v9 = (uint64_t *)result;
  while (2)
  {
    unint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v92 = *(a2 - 1);
                uint64_t v93 = *v10;
                uint64_t v94 = *(void *)(v92 + 40);
                int v95 = *(__int16 *)(v94 + 18);
                if ((v95 & 0x80000000) == 0)
                {
                  uint64_t v209 = *(void *)(v94 + 48);
                  if (v209 != v94 + 40)
                  {
                    int v210 = 0;
                    do
                    {
                      uint64_t v211 = v209 - 24;
                      if (!v209) {
                        uint64_t v211 = 0;
                      }
                      *(_DWORD *)(v211 + 56) = v210++;
                      uint64_t v209 = *(void *)(v209 + 8);
                    }
                    while (v209 != v94 + 40);
                  }
                  *(_WORD *)(v94 + 18) = v95 | 0x8000;
                }
                if (*(_DWORD *)(v92 + 56) < *(_DWORD *)(v93 + 56))
                {
                  *unint64_t v10 = v92;
                  *(a2 - 1) = v93;
                }
                break;
              case 3:
                unint64_t result = (unint64_t)sub_1CD1207B4(v10, v10 + 1, a2 - 1);
                break;
              case 4:
                unint64_t result = (unint64_t)sub_1CD120D98(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5:
                unint64_t v96 = v10 + 2;
                long long v97 = v10 + 3;
                unint64_t result = (unint64_t)sub_1CD120D98(v10, v10 + 1, v10 + 2, v10 + 3);
                uint64_t v98 = *(a2 - 1);
                uint64_t v99 = v10[3];
                uint64_t v100 = *(void *)(v98 + 40);
                int v101 = *(__int16 *)(v100 + 18);
                if ((v101 & 0x80000000) == 0)
                {
                  uint64_t v212 = *(void *)(v100 + 48);
                  if (v212 != v100 + 40)
                  {
                    int v213 = 0;
                    do
                    {
                      uint64_t v214 = v212 - 24;
                      if (!v212) {
                        uint64_t v214 = 0;
                      }
                      *(_DWORD *)(v214 + 56) = v213++;
                      uint64_t v212 = *(void *)(v212 + 8);
                    }
                    while (v212 != v100 + 40);
                  }
                  *(_WORD *)(v100 + 18) = v101 | 0x8000;
                }
                if (*(_DWORD *)(v98 + 56) < *(_DWORD *)(v99 + 56))
                {
                  *long long v97 = v98;
                  *(a2 - 1) = v99;
                  uint64_t v102 = *v97;
                  uint64_t v103 = *v96;
                  uint64_t v104 = *(void *)(*v97 + 40);
                  int v105 = *(__int16 *)(v104 + 18);
                  if ((v105 & 0x80000000) == 0)
                  {
                    uint64_t v215 = *(void *)(v104 + 48);
                    if (v215 != v104 + 40)
                    {
                      int v216 = 0;
                      do
                      {
                        uint64_t v217 = v215 - 24;
                        if (!v215) {
                          uint64_t v217 = 0;
                        }
                        *(_DWORD *)(v217 + 56) = v216++;
                        uint64_t v215 = *(void *)(v215 + 8);
                      }
                      while (v215 != v104 + 40);
                    }
                    *(_WORD *)(v104 + 18) = v105 | 0x8000;
                  }
                  unsigned int v106 = *(_DWORD *)(v102 + 56);
                  if (v106 < *(_DWORD *)(v103 + 56))
                  {
                    *unint64_t v96 = v102;
                    *long long v97 = v103;
                    uint64_t v107 = v10[1];
                    uint64_t v108 = *(void *)(v102 + 40);
                    int v109 = *(__int16 *)(v108 + 18);
                    if ((v109 & 0x80000000) == 0)
                    {
                      uint64_t v218 = *(void *)(v108 + 48);
                      if (v218 != v108 + 40)
                      {
                        int v219 = 0;
                        do
                        {
                          uint64_t v220 = v218 - 24;
                          if (!v218) {
                            uint64_t v220 = 0;
                          }
                          *(_DWORD *)(v220 + 56) = v219++;
                          uint64_t v218 = *(void *)(v218 + 8);
                        }
                        while (v218 != v108 + 40);
                        unsigned int v106 = *(_DWORD *)(v102 + 56);
                      }
                      *(_WORD *)(v108 + 18) = v109 | 0x8000;
                    }
                    if (v106 < *(_DWORD *)(v107 + 56))
                    {
                      v10[1] = v102;
                      v10[2] = v107;
                      uint64_t v110 = *v10;
                      uint64_t v111 = *(void *)(v102 + 40);
                      int v112 = *(__int16 *)(v111 + 18);
                      if ((v112 & 0x80000000) == 0)
                      {
                        uint64_t v221 = *(void *)(v111 + 48);
                        if (v221 != v111 + 40)
                        {
                          int v222 = 0;
                          do
                          {
                            uint64_t v223 = v221 - 24;
                            if (!v221) {
                              uint64_t v223 = 0;
                            }
                            *(_DWORD *)(v223 + 56) = v222++;
                            uint64_t v221 = *(void *)(v221 + 8);
                          }
                          while (v221 != v111 + 40);
                          unsigned int v106 = *(_DWORD *)(v102 + 56);
                        }
                        *(_WORD *)(v111 + 18) = v112 | 0x8000;
                      }
                      if (v106 < *(_DWORD *)(v110 + 56))
                      {
                        *unint64_t v10 = v102;
                        v10[1] = v110;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            unint64_t v113 = v10 + 1;
            BOOL v115 = v10 == a2 || v113 == a2;
            if (a4)
            {
              if (!v115)
              {
                uint64_t v116 = v10;
                do
                {
                  uint64_t v117 = v113;
                  uint64_t v119 = *v116;
                  uint64_t v118 = v116[1];
                  uint64_t v120 = *(void *)(v118 + 40);
                  int v121 = *(__int16 *)(v120 + 18);
                  if ((v121 & 0x80000000) == 0)
                  {
                    uint64_t v129 = *(void *)(v120 + 48);
                    if (v129 != v120 + 40)
                    {
                      int v130 = 0;
                      do
                      {
                        uint64_t v131 = v129 - 24;
                        if (!v129) {
                          uint64_t v131 = 0;
                        }
                        *(_DWORD *)(v131 + 56) = v130++;
                        uint64_t v129 = *(void *)(v129 + 8);
                      }
                      while (v129 != v120 + 40);
                    }
                    *(_WORD *)(v120 + 18) = v121 | 0x8000;
                  }
                  unsigned int v122 = *(_DWORD *)(v118 + 56);
                  if (v122 < *(_DWORD *)(v119 + 56))
                  {
                    unsigned int v123 = v117;
                    while (1)
                    {
                      *unsigned int v123 = v119;
                      if (v116 == v10) {
                        break;
                      }
                      unsigned int v123 = v116;
                      uint64_t v124 = *--v116;
                      uint64_t v119 = v124;
                      uint64_t v125 = *(void *)(v118 + 40);
                      int v126 = *(__int16 *)(v125 + 18);
                      if ((v126 & 0x80000000) == 0)
                      {
                        uint64_t v127 = *(void *)(v125 + 48);
                        if (v127 != v125 + 40)
                        {
                          int v128 = 0;
                          do
                          {
                            unint64_t result = v127 - 24;
                            if (!v127) {
                              unint64_t result = 0;
                            }
                            *(_DWORD *)(result + 56) = v128++;
                            uint64_t v127 = *(void *)(v127 + 8);
                          }
                          while (v127 != v125 + 40);
                          unsigned int v122 = *(_DWORD *)(v118 + 56);
                        }
                        *(_WORD *)(v125 + 18) = v126 | 0x8000;
                      }
                      if (v122 >= *(_DWORD *)(v119 + 56)) {
                        goto LABEL_175;
                      }
                    }
                    unsigned int v123 = v10;
LABEL_175:
                    *unsigned int v123 = v118;
                  }
                  unint64_t v113 = v117 + 1;
                  uint64_t v116 = v117;
                }
                while (v117 + 1 != a2);
              }
            }
            else if (!v115)
            {
              do
              {
                v165 = v113;
                uint64_t v167 = *v9;
                uint64_t v166 = v9[1];
                uint64_t v168 = *(void *)(v166 + 40);
                int v169 = *(__int16 *)(v168 + 18);
                if ((v169 & 0x80000000) == 0)
                {
                  uint64_t v178 = *(void *)(v168 + 48);
                  if (v178 != v168 + 40)
                  {
                    int v179 = 0;
                    do
                    {
                      uint64_t v180 = v178 - 24;
                      if (!v178) {
                        uint64_t v180 = 0;
                      }
                      *(_DWORD *)(v180 + 56) = v179++;
                      uint64_t v178 = *(void *)(v178 + 8);
                    }
                    while (v178 != v168 + 40);
                  }
                  *(_WORD *)(v168 + 18) = v169 | 0x8000;
                }
                unsigned int v170 = *(_DWORD *)(v166 + 56);
                if (v170 < *(_DWORD *)(v167 + 56))
                {
                  uint64_t v171 = v165;
                  do
                  {
                    *uint64_t v171 = v167;
                    uint64_t v171 = v9;
                    uint64_t v172 = *--v9;
                    uint64_t v167 = v172;
                    uint64_t v173 = *(void *)(v166 + 40);
                    int v174 = *(__int16 *)(v173 + 18);
                    if ((v174 & 0x80000000) == 0)
                    {
                      uint64_t v175 = *(void *)(v173 + 48);
                      if (v175 != v173 + 40)
                      {
                        int v176 = 0;
                        do
                        {
                          uint64_t v177 = v175 - 24;
                          if (!v175) {
                            uint64_t v177 = 0;
                          }
                          *(_DWORD *)(v177 + 56) = v176++;
                          uint64_t v175 = *(void *)(v175 + 8);
                        }
                        while (v175 != v173 + 40);
                        unsigned int v170 = *(_DWORD *)(v166 + 56);
                      }
                      *(_WORD *)(v173 + 18) = v174 | 0x8000;
                    }
                  }
                  while (v170 < *(_DWORD *)(v167 + 56));
                  *uint64_t v171 = v166;
                }
                unint64_t v113 = v165 + 1;
                unint64_t v9 = v165;
              }
              while (v165 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v132 = (unint64_t)(v12 - 2) >> 1;
              int64_t v133 = v132;
              do
              {
                int64_t v134 = v133;
                if (v132 >= v133)
                {
                  uint64_t v135 = (2 * v133) | 1;
                  v136 = &v10[v135];
                  if (2 * v134 + 2 < v12)
                  {
                    uint64_t v137 = *v136;
                    uint64_t v138 = v136[1];
                    uint64_t v139 = *(void *)(*v136 + 40);
                    unint64_t result = *(__int16 *)(v139 + 18);
                    if ((result & 0x80000000) == 0)
                    {
                      uint64_t v162 = *(void *)(v139 + 48);
                      if (v162 != v139 + 40)
                      {
                        int v163 = 0;
                        do
                        {
                          uint64_t v164 = v162 - 24;
                          if (!v162) {
                            uint64_t v164 = 0;
                          }
                          *(_DWORD *)(v164 + 56) = v163++;
                          uint64_t v162 = *(void *)(v162 + 8);
                        }
                        while (v162 != v139 + 40);
                      }
                      unint64_t result = result | 0x8000;
                      *(_WORD *)(v139 + 18) = result;
                    }
                    if (*(_DWORD *)(v137 + 56) < *(_DWORD *)(v138 + 56))
                    {
                      ++v136;
                      uint64_t v135 = 2 * v134 + 2;
                    }
                  }
                  uint64_t v140 = &v10[v134];
                  uint64_t v141 = *v136;
                  uint64_t v142 = *v140;
                  uint64_t v143 = *(void *)(*v136 + 40);
                  int v144 = *(__int16 *)(v143 + 18);
                  if ((v144 & 0x80000000) == 0)
                  {
                    unint64_t result = v143 + 40;
                    int v159 = *(uint64_t **)(v143 + 48);
                    if (v159 != (uint64_t *)(v143 + 40))
                    {
                      int v160 = 0;
                      do
                      {
                        v161 = v159 - 3;
                        if (!v159) {
                          v161 = 0;
                        }
                        *((_DWORD *)v161 + 14) = v160++;
                        int v159 = (uint64_t *)v159[1];
                      }
                      while (v159 != (uint64_t *)result);
                    }
                    *(_WORD *)(v143 + 18) = v144 | 0x8000;
                  }
                  if (*(_DWORD *)(v141 + 56) >= *(_DWORD *)(v142 + 56))
                  {
                    do
                    {
                      v145 = v136;
                      *uint64_t v140 = v141;
                      if (v132 < v135) {
                        break;
                      }
                      uint64_t v146 = (2 * v135) | 1;
                      v136 = &v10[v146];
                      uint64_t v135 = 2 * v135 + 2;
                      if (v135 < v12)
                      {
                        uint64_t v147 = *v136;
                        uint64_t v148 = v136[1];
                        uint64_t v149 = *(void *)(*v136 + 40);
                        int v150 = *(__int16 *)(v149 + 18);
                        if ((v150 & 0x80000000) == 0)
                        {
                          uint64_t v156 = *(void *)(v149 + 48);
                          if (v156 != v149 + 40)
                          {
                            int v157 = 0;
                            do
                            {
                              uint64_t v158 = v156 - 24;
                              if (!v156) {
                                uint64_t v158 = 0;
                              }
                              *(_DWORD *)(v158 + 56) = v157++;
                              uint64_t v156 = *(void *)(v156 + 8);
                            }
                            while (v156 != v149 + 40);
                          }
                          *(_WORD *)(v149 + 18) = v150 | 0x8000;
                        }
                        if (*(_DWORD *)(v147 + 56) >= *(_DWORD *)(v148 + 56)) {
                          uint64_t v135 = v146;
                        }
                        else {
                          ++v136;
                        }
                      }
                      else
                      {
                        uint64_t v135 = v146;
                      }
                      uint64_t v141 = *v136;
                      uint64_t v151 = *(void *)(*v136 + 40);
                      int v152 = *(__int16 *)(v151 + 18);
                      if ((v152 & 0x80000000) == 0)
                      {
                        uint64_t v153 = *(void *)(v151 + 48);
                        if (v153 != v151 + 40)
                        {
                          int v154 = 0;
                          do
                          {
                            uint64_t v155 = v153 - 24;
                            if (!v153) {
                              uint64_t v155 = 0;
                            }
                            *(_DWORD *)(v155 + 56) = v154++;
                            uint64_t v153 = *(void *)(v153 + 8);
                          }
                          while (v153 != v151 + 40);
                        }
                        *(_WORD *)(v151 + 18) = v152 | 0x8000;
                      }
                      unint64_t result = *(unsigned int *)(v142 + 56);
                      uint64_t v140 = v145;
                    }
                    while (*(_DWORD *)(v141 + 56) >= result);
                    uint64_t *v145 = v142;
                  }
                }
                int64_t v133 = v134 - 1;
              }
              while (v134);
              do
              {
                uint64_t v183 = 0;
                uint64_t v184 = *v10;
                uint64_t v185 = v10;
                do
                {
                  uint64_t v186 = &v185[v183 + 1];
                  uint64_t v187 = (2 * v183) | 1;
                  uint64_t v188 = 2 * v183 + 2;
                  if (v188 < v12)
                  {
                    uint64_t v189 = *v186;
                    uint64_t v190 = v186[1];
                    unint64_t result = *(void *)(*v186 + 40);
                    int v191 = *(__int16 *)(result + 18);
                    if ((v191 & 0x80000000) == 0)
                    {
                      BOOL v192 = *(uint64_t **)(result + 48);
                      if (v192 != (uint64_t *)(result + 40))
                      {
                        int v193 = 0;
                        do
                        {
                          int v194 = v192 - 3;
                          if (!v192) {
                            int v194 = 0;
                          }
                          *((_DWORD *)v194 + 14) = v193++;
                          BOOL v192 = (uint64_t *)v192[1];
                        }
                        while (v192 != (uint64_t *)(result + 40));
                      }
                      *(_WORD *)(result + 18) = v191 | 0x8000;
                    }
                    if (*(_DWORD *)(v189 + 56) < *(_DWORD *)(v190 + 56))
                    {
                      ++v186;
                      uint64_t v187 = v188;
                    }
                  }
                  *uint64_t v185 = *v186;
                  uint64_t v185 = v186;
                  uint64_t v183 = v187;
                }
                while (v187 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if (v186 == --a2)
                {
                  *uint64_t v186 = v184;
                }
                else
                {
                  *uint64_t v186 = *a2;
                  *a2 = v184;
                  uint64_t v195 = (char *)v186 - (char *)v10 + 8;
                  if (v195 >= 9)
                  {
                    unint64_t v196 = (((unint64_t)v195 >> 3) - 2) >> 1;
                    uint64_t v197 = &v10[v196];
                    uint64_t v198 = *v197;
                    uint64_t v199 = *v186;
                    uint64_t v200 = *(void *)(*v197 + 40);
                    int v201 = *(__int16 *)(v200 + 18);
                    if ((v201 & 0x80000000) == 0)
                    {
                      uint64_t v181 = *(void *)(v200 + 48);
                      if (v181 != v200 + 40)
                      {
                        LODWORD(result) = 0;
                        do
                        {
                          uint64_t v182 = v181 - 24;
                          if (!v181) {
                            uint64_t v182 = 0;
                          }
                          *(_DWORD *)(v182 + 56) = result;
                          unint64_t result = (result + 1);
                          uint64_t v181 = *(void *)(v181 + 8);
                        }
                        while (v181 != v200 + 40);
                      }
                      *(_WORD *)(v200 + 18) = v201 | 0x8000;
                    }
                    unsigned int v202 = *(_DWORD *)(v199 + 56);
                    if (*(_DWORD *)(v198 + 56) < v202)
                    {
                      do
                      {
                        v203 = v197;
                        *uint64_t v186 = v198;
                        if (!v196) {
                          break;
                        }
                        unint64_t v196 = (v196 - 1) >> 1;
                        uint64_t v197 = &v10[v196];
                        uint64_t v198 = *v197;
                        uint64_t v204 = *(void *)(*v197 + 40);
                        int v205 = *(__int16 *)(v204 + 18);
                        if ((v205 & 0x80000000) == 0)
                        {
                          unint64_t result = *(void *)(v204 + 48);
                          if (result != v204 + 40)
                          {
                            int v206 = 0;
                            do
                            {
                              int v207 = (uint64_t *)(result - 24);
                              if (!result) {
                                int v207 = 0;
                              }
                              *((_DWORD *)v207 + 14) = v206++;
                              unint64_t result = *(void *)(result + 8);
                            }
                            while (result != v204 + 40);
                            unsigned int v202 = *(_DWORD *)(v199 + 56);
                          }
                          *(_WORD *)(v204 + 18) = v205 | 0x8000;
                        }
                        uint64_t v186 = v203;
                      }
                      while (*(_DWORD *)(v198 + 56) < v202);
                      uint64_t *v203 = v199;
                    }
                  }
                }
              }
              while (v12-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = &v10[(unint64_t)v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            sub_1CD1207B4(v9, &v9[(unint64_t)v12 >> 1], a2 - 1);
            sub_1CD1207B4(v9 + 1, v14 - 1, a2 - 2);
            sub_1CD1207B4(v9 + 2, &v9[v13 + 1], a2 - 3);
            unint64_t result = (unint64_t)sub_1CD1207B4(v14 - 1, v14, &v9[v13 + 1]);
            uint64_t v15 = *v9;
            *unint64_t v9 = *v14;
            *uint64_t v14 = v15;
          }
          else
          {
            unint64_t result = (unint64_t)sub_1CD1207B4(&v9[(unint64_t)v12 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v16 = *v9;
          if (a4) {
            break;
          }
          uint64_t v17 = *(v9 - 1);
          uint64_t v18 = *(void *)(v17 + 40);
          int v19 = *(__int16 *)(v18 + 18);
          if ((v19 & 0x80000000) == 0)
          {
            uint64_t v63 = *(void *)(v18 + 48);
            if (v63 != v18 + 40)
            {
              int v64 = 0;
              do
              {
                uint64_t v65 = v63 - 24;
                if (!v63) {
                  uint64_t v65 = 0;
                }
                *(_DWORD *)(v65 + 56) = v64++;
                uint64_t v63 = *(void *)(v63 + 8);
              }
              while (v63 != v18 + 40);
            }
            *(_WORD *)(v18 + 18) = v19 | 0x8000;
          }
          unsigned int v20 = *(_DWORD *)(v17 + 56);
          unsigned int v21 = *(_DWORD *)(v16 + 56);
          if (v20 < v21) {
            break;
          }
          uint64_t v66 = *(a2 - 1);
          uint64_t v67 = *(void *)(v16 + 40);
          int v68 = *(__int16 *)(v67 + 18);
          if ((v68 & 0x80000000) == 0)
          {
            uint64_t v89 = *(void *)(v67 + 48);
            if (v89 != v67 + 40)
            {
              int v90 = 0;
              do
              {
                uint64_t v91 = v89 - 24;
                if (!v89) {
                  uint64_t v91 = 0;
                }
                *(_DWORD *)(v91 + 56) = v90++;
                uint64_t v89 = *(void *)(v89 + 8);
              }
              while (v89 != v67 + 40);
              unsigned int v21 = *(_DWORD *)(v16 + 56);
            }
            LOWORD(v68) = v68 | 0x8000;
            *(_WORD *)(v67 + 18) = v68;
          }
          if (v21 >= *(_DWORD *)(v66 + 56))
          {
            long long v70 = v9 + 1;
            do
            {
              unint64_t v10 = v70;
              if (v70 >= a2) {
                break;
              }
              ++v70;
            }
            while (v21 >= *(_DWORD *)(*v10 + 56));
          }
          else
          {
            unint64_t v10 = v9;
            do
            {
              uint64_t v69 = v10[1];
              ++v10;
            }
            while (v21 >= *(_DWORD *)(v69 + 56));
          }
          if (v10 >= a2)
          {
            long long v72 = a2;
          }
          else
          {
            uint64_t v71 = v67 + 40;
            long long v72 = a2;
            do
            {
              uint64_t v74 = *--v72;
              uint64_t v73 = v74;
              if ((v68 & 0x8000) == 0)
              {
                uint64_t v75 = *(void *)(v67 + 48);
                if (v75 != v71)
                {
                  int v76 = 0;
                  do
                  {
                    uint64_t v77 = v75 - 24;
                    if (!v75) {
                      uint64_t v77 = 0;
                    }
                    *(_DWORD *)(v77 + 56) = v76++;
                    uint64_t v75 = *(void *)(v75 + 8);
                  }
                  while (v75 != v71);
                  unsigned int v21 = *(_DWORD *)(v16 + 56);
                }
                LOWORD(v68) = v68 | 0x8000;
                *(_WORD *)(v67 + 18) = v68;
              }
            }
            while (v21 < *(_DWORD *)(v73 + 56));
          }
          if (v10 < v72)
          {
            uint64_t v78 = *v10;
            uint64_t v79 = *v72;
            do
            {
              *unint64_t v10 = v79;
              *long long v72 = v78;
              uint64_t v80 = *(void *)(v16 + 40);
              __int16 v81 = *(_WORD *)(v80 + 18);
              uint64_t v82 = v80 + 40;
              do
              {
                uint64_t v83 = v10[1];
                ++v10;
                uint64_t v78 = v83;
                if ((v81 & 0x8000) == 0)
                {
                  uint64_t v84 = *(void *)(v80 + 48);
                  if (v84 != v82)
                  {
                    int v85 = 0;
                    do
                    {
                      uint64_t v86 = v84 - 24;
                      if (!v84) {
                        uint64_t v86 = 0;
                      }
                      *(_DWORD *)(v86 + 56) = v85++;
                      uint64_t v84 = *(void *)(v84 + 8);
                    }
                    while (v84 != v82);
                    unsigned int v21 = *(_DWORD *)(v16 + 56);
                  }
                  v81 |= 0x8000u;
                  *(_WORD *)(v80 + 18) = v81;
                }
              }
              while (v21 >= *(_DWORD *)(v78 + 56));
              do
              {
                uint64_t v87 = *--v72;
                uint64_t v79 = v87;
              }
              while (v21 < *(_DWORD *)(v87 + 56));
            }
            while (v10 < v72);
          }
          uint64_t v88 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *unint64_t v9 = *v88;
          }
          a4 = 0;
          *uint64_t v88 = v16;
        }
        unint64_t v22 = v9;
        do
        {
          int v23 = v22;
          uint64_t v25 = v22[1];
          ++v22;
          uint64_t v24 = v25;
          uint64_t v26 = *(void *)(v25 + 40);
          int v27 = *(__int16 *)(v26 + 18);
          if ((v27 & 0x80000000) == 0)
          {
            uint64_t v29 = *(void *)(v26 + 48);
            if (v29 != v26 + 40)
            {
              int v30 = 0;
              do
              {
                uint64_t v31 = v29 - 24;
                if (!v29) {
                  uint64_t v31 = 0;
                }
                *(_DWORD *)(v31 + 56) = v30++;
                uint64_t v29 = *(void *)(v29 + 8);
              }
              while (v29 != v26 + 40);
            }
            *(_WORD *)(v26 + 18) = v27 | 0x8000;
          }
          unsigned int v28 = *(_DWORD *)(v16 + 56);
        }
        while (*(_DWORD *)(v24 + 56) < v28);
        if (v23 == v9)
        {
          uint64_t v32 = a2;
          do
          {
            if (v22 >= v32) {
              break;
            }
            uint64_t v41 = *--v32;
            uint64_t v40 = v41;
            uint64_t v42 = *(void *)(v41 + 40);
            int v43 = *(__int16 *)(v42 + 18);
            if ((v43 & 0x80000000) == 0)
            {
              uint64_t v44 = *(void *)(v42 + 48);
              if (v44 != v42 + 40)
              {
                int v45 = 0;
                do
                {
                  uint64_t v46 = v44 - 24;
                  if (!v44) {
                    uint64_t v46 = 0;
                  }
                  *(_DWORD *)(v46 + 56) = v45++;
                  uint64_t v44 = *(void *)(v44 + 8);
                }
                while (v44 != v42 + 40);
                unsigned int v28 = *(_DWORD *)(v16 + 56);
              }
              *(_WORD *)(v42 + 18) = v43 | 0x8000;
            }
          }
          while (*(_DWORD *)(v40 + 56) >= v28);
        }
        else
        {
          uint64_t v32 = a2;
          do
          {
            uint64_t v34 = *--v32;
            uint64_t v33 = v34;
            uint64_t v35 = *(void *)(v34 + 40);
            int v36 = *(__int16 *)(v35 + 18);
            if ((v36 & 0x80000000) == 0)
            {
              uint64_t v37 = *(void *)(v35 + 48);
              if (v37 != v35 + 40)
              {
                int v38 = 0;
                do
                {
                  uint64_t v39 = v37 - 24;
                  if (!v37) {
                    uint64_t v39 = 0;
                  }
                  *(_DWORD *)(v39 + 56) = v38++;
                  uint64_t v37 = *(void *)(v37 + 8);
                }
                while (v37 != v35 + 40);
                unsigned int v28 = *(_DWORD *)(v16 + 56);
              }
              *(_WORD *)(v35 + 18) = v36 | 0x8000;
            }
          }
          while (*(_DWORD *)(v33 + 56) >= v28);
        }
        if (v22 >= v32)
        {
          unint64_t v10 = v22;
        }
        else
        {
          uint64_t v47 = *v32;
          unint64_t v10 = v22;
          uint64_t v48 = v32;
          do
          {
            *unint64_t v10 = v47;
            uint64_t *v48 = v24;
            do
            {
              uint64_t v49 = v10[1];
              ++v10;
              uint64_t v24 = v49;
              uint64_t v50 = *(void *)(v49 + 40);
              int v51 = *(__int16 *)(v50 + 18);
              if ((v51 & 0x80000000) == 0)
              {
                uint64_t v52 = *(void *)(v50 + 48);
                if (v52 != v50 + 40)
                {
                  int v53 = 0;
                  do
                  {
                    uint64_t v54 = v52 - 24;
                    if (!v52) {
                      uint64_t v54 = 0;
                    }
                    *(_DWORD *)(v54 + 56) = v53++;
                    uint64_t v52 = *(void *)(v52 + 8);
                  }
                  while (v52 != v50 + 40);
                  unsigned int v28 = *(_DWORD *)(v16 + 56);
                }
                *(_WORD *)(v50 + 18) = v51 | 0x8000;
              }
            }
            while (*(_DWORD *)(v24 + 56) < v28);
            do
            {
              uint64_t v58 = *--v48;
              uint64_t v47 = v58;
              uint64_t v59 = *(void *)(v58 + 40);
              int v60 = *(__int16 *)(v59 + 18);
              if ((v60 & 0x80000000) == 0)
              {
                uint64_t v55 = *(void *)(v59 + 48);
                if (v55 != v59 + 40)
                {
                  int v56 = 0;
                  do
                  {
                    uint64_t v57 = v55 - 24;
                    if (!v55) {
                      uint64_t v57 = 0;
                    }
                    *(_DWORD *)(v57 + 56) = v56++;
                    uint64_t v55 = *(void *)(v55 + 8);
                  }
                  while (v55 != v59 + 40);
                  unsigned int v28 = *(_DWORD *)(v16 + 56);
                }
                *(_WORD *)(v59 + 18) = v60 | 0x8000;
              }
            }
            while (*(_DWORD *)(v47 + 56) >= v28);
          }
          while (v10 < v48);
        }
        unint64_t v61 = v10 - 1;
        if (v10 - 1 != v9) {
          *unint64_t v9 = *v61;
        }
        *unint64_t v61 = v16;
        if (v22 >= v32) {
          break;
        }
LABEL_77:
        unint64_t result = sub_1CD11F8D4(v9, v10 - 1, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v62 = sub_1CD12097C(v9, v10 - 1);
      unint64_t result = sub_1CD12097C(v10, a2);
      if (result) {
        break;
      }
      if (!v62) {
        goto LABEL_77;
      }
    }
    a2 = v10 - 1;
    if (!v62) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1CD1207B4(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  uint64_t v5 = *(void *)(*a2 + 40);
  int v6 = *(__int16 *)(v5 + 18);
  if ((v6 & 0x80000000) == 0)
  {
    uint64_t v21 = *(void *)(v5 + 48);
    if (v21 != v5 + 40)
    {
      int v22 = 0;
      do
      {
        uint64_t v23 = v21 - 24;
        if (!v21) {
          uint64_t v23 = 0;
        }
        *(_DWORD *)(v23 + 56) = v22++;
        uint64_t v21 = *(void *)(v21 + 8);
      }
      while (v21 != v5 + 40);
    }
    *(_WORD *)(v5 + 18) = v6 | 0x8000;
  }
  unsigned int v7 = *(_DWORD *)(v3 + 56);
  unsigned int v8 = *(_DWORD *)(v4 + 56);
  uint64_t v9 = *a3;
  uint64_t v10 = *(void *)(*a3 + 40);
  int v11 = *(__int16 *)(v10 + 18);
  if (v11 < 0)
  {
    unsigned int v12 = *(_DWORD *)(v3 + 56);
  }
  else
  {
    uint64_t v24 = *(void *)(v10 + 48);
    unsigned int v12 = *(_DWORD *)(v3 + 56);
    if (v24 != v10 + 40)
    {
      int v25 = 0;
      do
      {
        uint64_t v26 = v24 - 24;
        if (!v24) {
          uint64_t v26 = 0;
        }
        *(_DWORD *)(v26 + 56) = v25++;
        uint64_t v24 = *(void *)(v24 + 8);
      }
      while (v24 != v10 + 40);
      unsigned int v12 = *(_DWORD *)(v3 + 56);
    }
    *(_WORD *)(v10 + 18) = v11 | 0x8000;
  }
  unsigned int v13 = *(_DWORD *)(v9 + 56);
  if (v7 >= v8)
  {
    if (v13 < v12)
    {
      *a2 = v9;
      *a3 = v3;
      uint64_t v14 = *a2;
      uint64_t v15 = *result;
      uint64_t v16 = *(void *)(*a2 + 40);
      int v17 = *(__int16 *)(v16 + 18);
      if ((v17 & 0x80000000) == 0)
      {
        uint64_t v27 = *(void *)(v16 + 48);
        if (v27 != v16 + 40)
        {
          int v28 = 0;
          do
          {
            uint64_t v29 = v27 - 24;
            if (!v27) {
              uint64_t v29 = 0;
            }
            *(_DWORD *)(v29 + 56) = v28++;
            uint64_t v27 = *(void *)(v27 + 8);
          }
          while (v27 != v16 + 40);
        }
        *(_WORD *)(v16 + 18) = v17 | 0x8000;
      }
      if (*(_DWORD *)(v14 + 56) < *(_DWORD *)(v15 + 56))
      {
        *unint64_t result = v14;
        *a2 = v15;
      }
    }
  }
  else
  {
    if (v13 < v12)
    {
      *unint64_t result = v9;
LABEL_14:
      *a3 = v4;
      return result;
    }
    *unint64_t result = v3;
    *a2 = v4;
    uint64_t v18 = *a3;
    uint64_t v19 = *(void *)(*a3 + 40);
    int v20 = *(__int16 *)(v19 + 18);
    if ((v20 & 0x80000000) == 0)
    {
      uint64_t v30 = *(void *)(v19 + 48);
      if (v30 != v19 + 40)
      {
        int v31 = 0;
        do
        {
          uint64_t v32 = v30 - 24;
          if (!v30) {
            uint64_t v32 = 0;
          }
          *(_DWORD *)(v32 + 56) = v31++;
          uint64_t v30 = *(void *)(v30 + 8);
        }
        while (v30 != v19 + 40);
      }
      *(_WORD *)(v19 + 18) = v20 | 0x8000;
    }
    if (*(_DWORD *)(v18 + 56) < *(_DWORD *)(v4 + 56))
    {
      *a2 = v18;
      goto LABEL_14;
    }
  }
  return result;
}

BOOL sub_1CD12097C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      uint64_t v8 = *(void *)(v6 + 40);
      int v9 = *(__int16 *)(v8 + 18);
      if ((v9 & 0x80000000) == 0)
      {
        uint64_t v45 = *(void *)(v8 + 48);
        if (v45 != v8 + 40)
        {
          int v46 = 0;
          do
          {
            uint64_t v47 = v45 - 24;
            if (!v45) {
              uint64_t v47 = 0;
            }
            *(_DWORD *)(v47 + 56) = v46++;
            uint64_t v45 = *(void *)(v45 + 8);
          }
          while (v45 != v8 + 40);
        }
        *(_WORD *)(v8 + 18) = v9 | 0x8000;
      }
      if (*(_DWORD *)(v6 + 56) < *(_DWORD *)(v7 + 56))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      sub_1CD1207B4(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1CD120D98(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      int v28 = a1 + 2;
      uint64_t v29 = a1 + 3;
      sub_1CD120D98(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v30 = *(a2 - 1);
      uint64_t v31 = a1[3];
      uint64_t v32 = *(void *)(v30 + 40);
      int v33 = *(__int16 *)(v32 + 18);
      if ((v33 & 0x80000000) == 0)
      {
        uint64_t v48 = *(void *)(v32 + 48);
        if (v48 != v32 + 40)
        {
          int v49 = 0;
          do
          {
            uint64_t v50 = v48 - 24;
            if (!v48) {
              uint64_t v50 = 0;
            }
            *(_DWORD *)(v50 + 56) = v49++;
            uint64_t v48 = *(void *)(v48 + 8);
          }
          while (v48 != v32 + 40);
        }
        *(_WORD *)(v32 + 18) = v33 | 0x8000;
      }
      if (*(_DWORD *)(v30 + 56) < *(_DWORD *)(v31 + 56))
      {
        uint64_t *v29 = v30;
        *(a2 - 1) = v31;
        uint64_t v34 = *v29;
        uint64_t v35 = *v28;
        uint64_t v36 = *(void *)(*v29 + 40);
        int v37 = *(__int16 *)(v36 + 18);
        if ((v37 & 0x80000000) == 0)
        {
          uint64_t v51 = *(void *)(v36 + 48);
          if (v51 != v36 + 40)
          {
            int v52 = 0;
            do
            {
              uint64_t v53 = v51 - 24;
              if (!v51) {
                uint64_t v53 = 0;
              }
              *(_DWORD *)(v53 + 56) = v52++;
              uint64_t v51 = *(void *)(v51 + 8);
            }
            while (v51 != v36 + 40);
          }
          *(_WORD *)(v36 + 18) = v37 | 0x8000;
        }
        unsigned int v38 = *(_DWORD *)(v34 + 56);
        if (v38 < *(_DWORD *)(v35 + 56))
        {
          *int v28 = v34;
          uint64_t *v29 = v35;
          uint64_t v39 = a1[1];
          uint64_t v40 = *(void *)(v34 + 40);
          int v41 = *(__int16 *)(v40 + 18);
          if ((v41 & 0x80000000) == 0)
          {
            uint64_t v54 = *(void *)(v40 + 48);
            if (v54 != v40 + 40)
            {
              int v55 = 0;
              do
              {
                uint64_t v56 = v54 - 24;
                if (!v54) {
                  uint64_t v56 = 0;
                }
                *(_DWORD *)(v56 + 56) = v55++;
                uint64_t v54 = *(void *)(v54 + 8);
              }
              while (v54 != v40 + 40);
              unsigned int v38 = *(_DWORD *)(v34 + 56);
            }
            *(_WORD *)(v40 + 18) = v41 | 0x8000;
          }
          if (v38 < *(_DWORD *)(v39 + 56))
          {
            a1[1] = v34;
            a1[2] = v39;
            uint64_t v42 = *a1;
            uint64_t v43 = *(void *)(v34 + 40);
            int v44 = *(__int16 *)(v43 + 18);
            if ((v44 & 0x80000000) == 0)
            {
              uint64_t v57 = *(void *)(v43 + 48);
              if (v57 != v43 + 40)
              {
                int v58 = 0;
                do
                {
                  uint64_t v59 = v57 - 24;
                  if (!v57) {
                    uint64_t v59 = 0;
                  }
                  *(_DWORD *)(v59 + 56) = v58++;
                  uint64_t v57 = *(void *)(v57 + 8);
                }
                while (v57 != v43 + 40);
                unsigned int v38 = *(_DWORD *)(v34 + 56);
              }
              *(_WORD *)(v43 + 18) = v44 | 0x8000;
            }
            if (v38 < *(_DWORD *)(v42 + 56))
            {
              *a1 = v34;
              a1[1] = v42;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      sub_1CD1207B4(a1, a1 + 1, a1 + 2);
      int v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      break;
  }
  while (1)
  {
    uint64_t v13 = *v11;
    uint64_t v14 = *v10;
    uint64_t v15 = *(void *)(*v11 + 40);
    int v16 = *(__int16 *)(v15 + 18);
    if ((v16 & 0x80000000) == 0)
    {
      uint64_t v25 = *(void *)(v15 + 48);
      if (v25 != v15 + 40)
      {
        int v26 = 0;
        do
        {
          uint64_t v27 = v25 - 24;
          if (!v25) {
            uint64_t v27 = 0;
          }
          *(_DWORD *)(v27 + 56) = v26++;
          uint64_t v25 = *(void *)(v25 + 8);
        }
        while (v25 != v15 + 40);
      }
      *(_WORD *)(v15 + 18) = v16 | 0x8000;
    }
    unsigned int v17 = *(_DWORD *)(v13 + 56);
    if (v17 < *(_DWORD *)(v14 + 56))
    {
      uint64_t v18 = v11;
      while (1)
      {
        *uint64_t v18 = v14;
        if (v10 == a1) {
          break;
        }
        uint64_t v18 = v10;
        uint64_t v19 = *--v10;
        uint64_t v14 = v19;
        uint64_t v20 = *(void *)(v13 + 40);
        int v21 = *(__int16 *)(v20 + 18);
        if ((v21 & 0x80000000) == 0)
        {
          uint64_t v22 = *(void *)(v20 + 48);
          if (v22 != v20 + 40)
          {
            int v23 = 0;
            do
            {
              uint64_t v24 = v22 - 24;
              if (!v22) {
                uint64_t v24 = 0;
              }
              *(_DWORD *)(v24 + 56) = v23++;
              uint64_t v22 = *(void *)(v22 + 8);
            }
            while (v22 != v20 + 40);
            unsigned int v17 = *(_DWORD *)(v13 + 56);
          }
          *(_WORD *)(v20 + 18) = v21 | 0x8000;
        }
        if (v17 >= *(_DWORD *)(v14 + 56)) {
          goto LABEL_22;
        }
      }
      uint64_t v18 = a1;
LABEL_22:
      *uint64_t v18 = v13;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11++;
    if (v11 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_1CD120D98(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = sub_1CD1207B4(a1, a2, a3);
  uint64_t v9 = *a4;
  uint64_t v10 = *a3;
  uint64_t v11 = *(void *)(*a4 + 40);
  int v12 = *(__int16 *)(v11 + 18);
  if ((v12 & 0x80000000) == 0)
  {
    uint64_t v21 = *(void *)(v11 + 48);
    if (v21 != v11 + 40)
    {
      int v22 = 0;
      do
      {
        uint64_t v23 = v21 - 24;
        if (!v21) {
          uint64_t v23 = 0;
        }
        *(_DWORD *)(v23 + 56) = v22++;
        uint64_t v21 = *(void *)(v21 + 8);
      }
      while (v21 != v11 + 40);
    }
    *(_WORD *)(v11 + 18) = v12 | 0x8000;
  }
  if (*(_DWORD *)(v9 + 56) < *(_DWORD *)(v10 + 56))
  {
    *a3 = v9;
    *a4 = v10;
    uint64_t v13 = *a3;
    uint64_t v14 = *a2;
    uint64_t v15 = *(void *)(*a3 + 40);
    int v16 = *(__int16 *)(v15 + 18);
    if ((v16 & 0x80000000) == 0)
    {
      uint64_t v24 = *(void *)(v15 + 48);
      if (v24 != v15 + 40)
      {
        int v25 = 0;
        do
        {
          uint64_t v26 = v24 - 24;
          if (!v24) {
            uint64_t v26 = 0;
          }
          *(_DWORD *)(v26 + 56) = v25++;
          uint64_t v24 = *(void *)(v24 + 8);
        }
        while (v24 != v15 + 40);
      }
      *(_WORD *)(v15 + 18) = v16 | 0x8000;
    }
    if (*(_DWORD *)(v13 + 56) < *(_DWORD *)(v14 + 56))
    {
      *a2 = v13;
      *a3 = v14;
      uint64_t v17 = *a2;
      uint64_t v18 = *a1;
      uint64_t v19 = *(void *)(*a2 + 40);
      int v20 = *(__int16 *)(v19 + 18);
      if ((v20 & 0x80000000) == 0)
      {
        uint64_t v27 = *(void *)(v19 + 48);
        if (v27 != v19 + 40)
        {
          int v28 = 0;
          do
          {
            uint64_t v29 = v27 - 24;
            if (!v27) {
              uint64_t v29 = 0;
            }
            *(_DWORD *)(v29 + 56) = v28++;
            uint64_t v27 = *(void *)(v27 + 8);
          }
          while (v27 != v19 + 40);
        }
        *(_WORD *)(v19 + 18) = v20 | 0x8000;
      }
      if (*(_DWORD *)(v17 + 56) < *(_DWORD *)(v18 + 56))
      {
        *a1 = v17;
        *a2 = v18;
      }
    }
  }
  return result;
}

uint64_t sub_1CD120F14(uint64_t a1, _DWORD *a2, void *a3)
{
  uint64_t v5 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v6 = 16;
  }
  else
  {
    int v6 = *(_DWORD *)(a1 + 16);
    if (!v6)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_4;
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  int v9 = sub_1CD45B110(a2);
  int v10 = v6 - 1;
  int v11 = a2[2];
  unsigned int v12 = v9 & (v6 - 1);
  uint64_t v7 = (uint64_t *)(v5 + 80 * v12);
  uint64_t v13 = *v7;
  int v14 = *((_DWORD *)v7 + 2);
  if (*(void *)a2 == *v7 && v11 == v14)
  {
    uint64_t result = 1;
  }
  else
  {
    int v16 = 0;
    int v17 = 1;
    uint64_t result = 1;
    while (v13 != -4096 || v14 != 82)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v14 == 83;
      }
      if (v18 && v13 == -8192) {
        int v16 = v7;
      }
      unsigned int v20 = v12 + v17++;
      unsigned int v12 = v20 & v10;
      uint64_t v7 = (uint64_t *)(v5 + 80 * (v20 & v10));
      uint64_t v13 = *v7;
      int v14 = *((_DWORD *)v7 + 2);
      if (*(void *)a2 == *v7 && v11 == v14) {
        goto LABEL_4;
      }
    }
    uint64_t result = 0;
    if (v16) {
      uint64_t v7 = v16;
    }
  }
LABEL_4:
  *a3 = v7;
  return result;
}

uint64_t sub_1CD121014(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x200000000;
  if (a1 != a2)
  {
    unsigned int v4 = *(_DWORD *)(a2 + 8);
    if (v4)
    {
      uint64_t v5 = *(const void **)a2;
      if (*(void *)a2 == a2 + 16)
      {
        if (v4 >= 3) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy((void *)(a1 + 16), v5, 24 * v4);
        *(_DWORD *)(a1 + 8) = v4;
      }
      else
      {
        *(void *)a1 = v5;
        int v6 = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a1 + 8) = v4;
        *(_DWORD *)(a1 + 12) = v6;
        *(void *)a2 = a2 + 16;
        *(_DWORD *)(a2 + 12) = 0;
      }
      *(_DWORD *)(a2 + 8) = 0;
    }
  }
  return a1;
}

void sub_1CD1210DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)a1;
  *(void *)a1 = *(_DWORD *)a1 & 1;
  if (v6)
  {
    uint64_t v8 = (_OWORD *)(a1 + 8);
    int v9 = (_OWORD *)(a1 + 1288);
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(a1 + 16);
    if (!v7) {
      goto LABEL_14;
    }
    uint64_t v8 = *(_OWORD **)(a1 + 8);
    int v9 = &v8[5 * v7];
  }
  do
  {
    *uint64_t v8 = xmmword_1CFAC3080;
    v8 += 5;
  }
  while (v8 != v9);
LABEL_14:
  while (a2 != a3)
  {
    int v10 = *(_DWORD *)(a2 + 8);
    if ((*(void *)a2 != -4096 || v10 != 82) && (*(void *)a2 != -8192 || v10 != 83))
    {
      uint64_t v13 = 0;
      sub_1CD120F14(a1, (_DWORD *)a2, &v13);
      int v11 = v13;
      *uint64_t v13 = *(void *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      sub_1CD121014((uint64_t)(v11 + 2), a2 + 16);
      *(_DWORD *)a1 += 2;
      unsigned int v12 = *(void **)(a2 + 16);
      if ((void *)(a2 + 32) != v12) {
        free(v12);
      }
    }
    a2 += 80;
  }
}

void sub_1CD1211E4()
{
}

void sub_1CD121224(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD12125C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

BOOL sub_1CD121294(llvm::FunctionPass *a1, llvm::LLVMContextImpl ****a2)
{
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0 || !byte_1EBD0C1D8) {
    return 0;
  }
  unsigned int v4 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_6:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(char **)v5 != llvm::AssumptionCacheTracker::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_6;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  int v9 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v7 + 96))(v7, llvm::AssumptionCacheTracker::ID);
  AssumptionCache = (char **)llvm::AssumptionCacheTracker::getAssumptionCache(v9, (llvm::Function *)a2);
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((void *)a1 + 1) + 24), &llvm::DominatorTreeWrapperPass::ID, 1);
  if (AnalysisPass) {
    uint64_t AnalysisPass = (*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::DominatorTreeWrapperPass::ID);
  }
  if (AnalysisPass) {
    unsigned int v12 = (llvm::Instruction *)(AnalysisPass + 32);
  }
  else {
    unsigned int v12 = 0;
  }

  return sub_1CD11D938((uint64_t ***)a2, AssumptionCache, v12);
}

void sub_1CD1213C8()
{
}

void sub_1CD121494(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD1214CC(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

uint64_t sub_1CD121504(uint64_t a1, llvm::Function *a2)
{
  unsigned int v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(char **)v5 != llvm::AssumptionCacheTracker::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  uint64_t v8 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v7 + 96))(v7, llvm::AssumptionCacheTracker::ID);
  AssumptionCache = (char **)llvm::AssumptionCacheTracker::getAssumptionCache(v8, a2);
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24), &llvm::DominatorTreeWrapperPass::ID, 1);
  if (AnalysisPass) {
    uint64_t AnalysisPass = (*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::DominatorTreeWrapperPass::ID);
  }
  uint64_t v15 = (void *)((char *)a2 + 72);
  for (uint64_t i = (void *)*((void *)a2 + 10); i != v15; uint64_t i = (void *)i[1])
  {
    int v17 = i - 3;
    if (!i) {
      int v17 = 0;
    }
    BOOL v18 = (void *)v17[6];
    if (v18 != v17 + 5)
    {
      if (AnalysisPass) {
        uint64_t v19 = (llvm::AssumptionCache *)(AnalysisPass + 32);
      }
      else {
        uint64_t v19 = 0;
      }
      while (1)
      {
        if (v18) {
          unsigned int v20 = (llvm *)(v18 - 3);
        }
        else {
          unsigned int v20 = 0;
        }
        llvm::salvageKnowledge(v20, AssumptionCache, v19, v11, v12, v13, v14);
        BOOL v18 = (void *)v18[1];
        uint64_t v21 = i - 3;
        if (!i) {
          uint64_t v21 = 0;
        }
        if (v18 == v21 + 5) {
          break;
        }
LABEL_27:
        if (i == v15) {
          return 1;
        }
      }
      while (1)
      {
        uint64_t i = (void *)i[1];
        if (i == v15) {
          return 1;
        }
        int v22 = i - 3;
        if (!i) {
          int v22 = 0;
        }
        BOOL v18 = (void *)v22[6];
        if (v18 != v22 + 5) {
          goto LABEL_27;
        }
      }
    }
  }
  return 1;
}

uint64_t sub_1CD12169C()
{
  char v3 = 0;
  unsigned int v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"enable preservation of all attrbitues. even those that are unlikely to be usefull";
  v1.n128_u64[1] = 81;
  sub_1CBA9E5B0((llvm::cl::Option *)&llvm::ShouldPreserveAllAttributes, "assume-preserve-all", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::ShouldPreserveAllAttributes, &dword_1CB82C000);
  char v3 = 0;
  unsigned int v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"enable preservation of attributes throughout code transformation";
  v1.n128_u64[1] = 64;
  sub_1CBA9E5B0((llvm::cl::Option *)&llvm::EnableKnowledgeRetention, "enable-knowledge-retention", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::EnableKnowledgeRetention, &dword_1CB82C000);
  uint64_t result = sub_1CBF64200((llvm::DebugCounter *)"assume-builder-counter", 0x16uLL, "Controls which assumes gets created", 0x23uLL);
  dword_1EBCFB888 = result;
  return result;
}

void llvm::detachDeadBlocks(uint64_t *a1, llvm::Type *a2, uint64_t a3, int a4)
{
  if (!a2) {
    return;
  }
  uint64_t v5 = a1;
  uint64_t v47 = &a1[(void)a2];
  while (2)
  {
    uint64_t v6 = *v5;
    int v49 = v53;
    uint64_t v50 = v53;
    uint64_t v51 = 4;
    int v52 = 0;
    uint64_t v8 = (llvm::Type ***)(v6 + 40);
    uint64_t v7 = *(llvm::Type ***)(v6 + 40);
    if (v7 == (llvm::Type **)(v6 + 40)) {
      goto LABEL_34;
    }
    if (v7) {
      int v9 = v7 - 3;
    }
    else {
      int v9 = 0;
    }
    int v10 = *((unsigned __int8 *)v9 + 16);
    int v11 = v10 - 29;
    if (v10 != 30)
    {
      unsigned int v23 = 2;
      switch(v11)
      {
        case 1:
LABEL_88:
          __break(1u);
          goto LABEL_89;
        case 2:
          unsigned int v23 = (*((_DWORD *)v9 + 5) >> 1) & 0x3FFFFFF;
          goto LABEL_41;
        case 3:
        case 9:
LABEL_89:
          unsigned int v23 = (*((_DWORD *)v9 + 5) & 0x7FFFFFF) - 1;
          goto LABEL_41;
        case 4:
          goto LABEL_13;
        case 7:
          unsigned int v23 = *((_WORD *)v9 + 9) & 1;
          goto LABEL_41;
        case 8:
          unsigned int v23 = 1;
          goto LABEL_13;
        case 10:
          unsigned int v23 = *((_DWORD *)v9 + 20) + 1;
LABEL_41:
          if (!v23) {
            goto LABEL_27;
          }
          goto LABEL_13;
        default:
          goto LABEL_27;
      }
    }
    if ((*((_DWORD *)v9 + 5) & 0x7FFFFFF) == 3) {
      unsigned int v23 = 2;
    }
    else {
      unsigned int v23 = 1;
    }
LABEL_13:
    uint64_t v12 = 0;
    uint64_t v13 = v9 - 4;
    uint64_t v14 = v23;
    do
    {
      int v15 = *((unsigned __int8 *)v9 + 16);
      if (v15 == 30)
      {
        uint64_t v7 = &v13[-4 * v12];
      }
      else
      {
        uint64_t v24 = (v15 - 31);
        uint64_t v7 = v9 - 4;
        switch(v24)
        {
          case 1:
          case 7:
            int v44 = *((_DWORD *)v9 + 5);
            if ((v44 & 0x40000000) != 0) {
              uint64_t v45 = (llvm::Type **)*(v9 - 1);
            }
            else {
              uint64_t v45 = &v9[-4 * (v44 & 0x7FFFFFF)];
            }
            uint64_t v7 = &v45[4 * (v12 + 1)];
            break;
          case 2:
            uint64_t v46 = 0x1FFFFFFFFFFFFFF8;
            if (!v12) {
              uint64_t v46 = 0x1FFFFFFFFFFFFFF4;
            }
            uint64_t v7 = &v9[v46];
            break;
          case 3:
          case 4:
            goto LABEL_88;
          case 5:
            if ((*((_WORD *)v9 + 9) & 1) == 0)
            {
              int v16 = 0;
              goto LABEL_18;
            }
            uint64_t v27 = &v9[-4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF)];
LABEL_47:
            uint64_t v7 = v27 + 4;
            break;
          case 6:
            break;
          case 8:
            if (v12) {
              uint64_t v7 = &v13[4 * v12 - 4] - 4 * *((unsigned int *)v9 + 20);
            }
            else {
              uint64_t v7 = &v9[-4 * *((unsigned int *)v9 + 20) - 8];
            }
            break;
          default:
            int v25 = *((_DWORD *)v9 + 5);
            if ((v25 & 0x40000000) != 0) {
              uint64_t v26 = (llvm::Type **)*(v9 - 1);
            }
            else {
              uint64_t v26 = &v9[-4 * (v25 & 0x7FFFFFF)];
            }
            uint64_t v27 = &v26[4 * (2 * v12)];
            goto LABEL_47;
        }
      }
      int v16 = *v7;
LABEL_18:
      llvm::BasicBlock::removePredecessor(v16, (llvm::BasicBlock *)v6, a4);
      if (!a3) {
        goto LABEL_19;
      }
      uint64_t v30 = v50;
      uint64_t v31 = HIDWORD(v51);
      if (v50 == v49)
      {
        if (HIDWORD(v51))
        {
          int v17 = 0;
          uint64_t v19 = 8 * HIDWORD(v51);
          BOOL v18 = v50;
          while (*(llvm::Type **)v18 != v16)
          {
            if (*(void *)v18 == -2) {
              int v17 = v18;
            }
            v18 += 8;
            v19 -= 8;
            if (!v19)
            {
              if (!v17) {
                goto LABEL_55;
              }
              *(void *)int v17 = v16;
              --v52;
              goto LABEL_57;
            }
          }
          goto LABEL_19;
        }
LABEL_55:
        a2 = (llvm::Type *)v51;
        if (HIDWORD(v51) < v51)
        {
          ++HIDWORD(v51);
          *(void *)&v50[8 * v31] = v16;
LABEL_57:
          unint64_t v32 = *(unsigned int *)(a3 + 8);
          if (v32 >= *(unsigned int *)(a3 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v33 = (void *)(*(void *)a3 + 16 * v32);
          *int v33 = v6;
          v33[1] = (unint64_t)v16 | 4;
          ++*(_DWORD *)(a3 + 8);
          goto LABEL_19;
        }
      }
      else
      {
        a2 = (llvm::Type *)v51;
      }
      if (3 * (int)a2 <= (4 * (HIDWORD(v51) - v52)))
      {
        if (a2 >= 0x40) {
          LODWORD(a2) = 2 * a2;
        }
        else {
          LODWORD(a2) = 128;
        }
      }
      else if ((int)a2 - HIDWORD(v51) >= a2 >> 3)
      {
        goto LABEL_62;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v49, a2);
      a2 = (llvm::Type *)v51;
      uint64_t v30 = v50;
LABEL_62:
      int v34 = a2 - 1;
      unsigned int v35 = (a2 - 1) & ((v16 >> 4) ^ (v16 >> 9));
      uint64_t v36 = &v30[8 * v35];
      int v37 = *(llvm::Type **)v36;
      if (*(void *)v36 == -1)
      {
        unsigned int v38 = 0;
LABEL_74:
        if (v38) {
          uint64_t v43 = v38;
        }
        else {
          uint64_t v43 = (llvm::Type **)v36;
        }
        if (*v43 != v16)
        {
          if (*v43 == (llvm::Type *)-2) {
            --v52;
          }
          else {
            ++HIDWORD(v51);
          }
          *uint64_t v43 = v16;
          goto LABEL_57;
        }
      }
      else
      {
        unsigned int v38 = 0;
        int v39 = 1;
        while (v37 != v16)
        {
          if (v38) {
            BOOL v40 = 0;
          }
          else {
            BOOL v40 = v37 == (llvm::Type *)-2;
          }
          if (v40) {
            unsigned int v38 = (llvm::Type **)v36;
          }
          unsigned int v41 = v35 + v39++;
          unsigned int v35 = v41 & v34;
          uint64_t v36 = &v30[8 * (v41 & v34)];
          int v37 = *(llvm::Type **)v36;
          if (*(void *)v36 == -1) {
            goto LABEL_74;
          }
        }
      }
LABEL_19:
      ++v12;
    }
    while (v12 != v14);
    uint64_t v7 = *v8;
LABEL_27:
    if (v7 != (llvm::Type **)v8)
    {
      if (v7) {
        unsigned int v20 = v7 - 3;
      }
      else {
        unsigned int v20 = 0;
      }
      if (v20[1])
      {
        uint64_t v42 = llvm::UndefValue::get(*v20, a2);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v20, v42, (llvm::Value *)1);
      }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
LABEL_34:
    uint64_t v21 = (char *)operator new(0x40uLL);
    *((_DWORD *)v21 + 5) &= 0x38000000u;
    *(void *)uint64_t v21 = ***(void ***)v6 + 1576;
    *((void *)v21 + 1) = 0;
    v21[16] = 35;
    *(_OWORD *)(v21 + 44) = 0u;
    *(_OWORD *)(v21 + 33) = 0u;
    *(_OWORD *)(v21 + 17) = 0u;
    *((void *)v21 + 5) = v6;
    *(_WORD *)(v6 + 18) &= ~0x8000u;
    if ((v21[23] & 0x10) != 0)
    {
      uint64_t v28 = *(void *)(v6 + 56);
      if (v28)
      {
        uint64_t v29 = *(llvm::ValueSymbolTable **)(v28 + 104);
        if (v29) {
          llvm::ValueSymbolTable::reinsertValue(v29, (llvm::Value *)v21);
        }
      }
    }
    int v22 = *v8;
    *((void *)v21 + 3) = *v8;
    *((void *)v21 + 4) = v8;
    v22[1] = (llvm::Type *)(v21 + 24);
    *uint64_t v8 = (llvm::Type **)(v21 + 24);
    if (v50 != v49) {
      free(v50);
    }
    if (++v5 != v47) {
      continue;
    }
    break;
  }
}

void sub_1CD121D24()
{
}

void llvm::DeleteDeadBlock(llvm *this, llvm::BasicBlock *a2, llvm::DomTreeUpdater *a3)
{
  int v3 = (int)a3;
  v9[8] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = this;
  uint64_t v7 = v9;
  uint64_t v8 = 0x400000000;
  if (a2) {
    uint64_t v5 = &v7;
  }
  else {
    uint64_t v5 = 0;
  }
  llvm::detachDeadBlocks((uint64_t *)&v6, (llvm::Type *)1, (uint64_t)v5, v3);
  if (a2)
  {
    llvm::DomTreeUpdater::applyUpdates((uint64_t)a2, (unint64_t *)v7, v8);
    llvm::DomTreeUpdater::deleteBB(a2, v6);
  }
  else
  {
    llvm::BasicBlock::eraseFromParent(v6);
  }
  if (v7 != v9) {
    free(v7);
  }
}

void llvm::DeleteDeadBlocks(uint64_t *a1, llvm::Type *a2, llvm::DomTreeUpdater *a3, int a4)
{
  uint64_t v6 = (llvm::BasicBlock **)a1;
  v11[8] = *MEMORY[0x1E4F143B8];
  int v9 = v11;
  uint64_t v10 = 0x400000000;
  if (a3) {
    uint64_t v7 = &v9;
  }
  else {
    uint64_t v7 = 0;
  }
  llvm::detachDeadBlocks(a1, a2, (uint64_t)v7, a4);
  if (a3) {
    llvm::DomTreeUpdater::applyUpdates((uint64_t)a3, (unint64_t *)v9, v10);
  }
  if (a2)
  {
    uint64_t v8 = 8 * (void)a2;
    do
    {
      if (a3) {
        llvm::DomTreeUpdater::deleteBB(a3, *v6);
      }
      else {
        llvm::BasicBlock::eraseFromParent(*v6);
      }
      ++v6;
      v8 -= 8;
    }
    while (v8);
  }
  if (v9 != v11) {
    free(v9);
  }
}

BOOL llvm::EliminateUnreachableBlocks(llvm *this, llvm::Function *a2, llvm::DomTreeUpdater *a3)
{
  int v82 = (int)a3;
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (llvm::SmallPtrSetImplBase *)&v84;
  uint64_t v84 = (char *)v88;
  int v85 = (char *)v88;
  int v87 = 0;
  uint64_t v6 = *((void *)this + 10);
  if (v6) {
    uint64_t v7 = v6 - 24;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v86 = 0x100000008;
  v88[0] = v7;
  uint64_t v8 = operator new(0x20uLL);
  *(void *)uint64_t v8 = v7;
  v8[8] = 0;
  v8[24] = 0;
  uint64_t v89 = (llvm::SmallPtrSetImplBase *)&v84;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  sub_1CBFE1720(&v90, v8, v8 + 32, 1uLL);
  operator delete(v8);
  int v9 = (unsigned char *)v90;
  uint64_t v10 = v91;
  unint64_t v11 = (uint64_t)&v91[-v90] >> 5;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  uint64_t v12 = (char *)sub_1CBFE1720(&v90, v9, v10, v11);
  uint64_t v13 = v91;
  if (v91 == (char *)v90)
  {
LABEL_114:
    if (v13) {
      goto LABEL_115;
    }
    goto LABEL_116;
  }
LABEL_5:
  while (2)
  {
    uint64_t v14 = *((void *)v13 - 4);
    if (!*(v13 - 8))
    {
      uint64_t v15 = *(void *)(v14 + 40);
      if (v15 == v14 + 40)
      {
        uint64_t v54 = 0;
      }
      else
      {
        if (v15) {
          uint64_t v54 = v15 - 24;
        }
        else {
          uint64_t v54 = 0;
        }
        if (*(unsigned __int8 *)(v54 + 16) - 29 >= 0xB) {
          uint64_t v54 = 0;
        }
      }
      *((void *)v13 - 3) = v54;
      *((void *)v13 - 2) = 0;
      *(v13 - 8) = 1;
    }
    int v16 = (void *)(v14 + 40);
    while (1)
    {
      int v17 = (void *)*v16;
      if ((void *)*v16 == v16)
      {
LABEL_66:
        int v41 = 0;
      }
      else
      {
        BOOL v18 = v17 - 3;
        if (!v17) {
          BOOL v18 = 0;
        }
        int v19 = *((unsigned __int8 *)v18 + 16);
        int v20 = v19 - 29;
        if (v19 != 30)
        {
          int v41 = 0;
          switch(v20)
          {
            case 0:
            case 5:
            case 6:
              goto LABEL_23;
            case 1:
LABEL_194:
              __break(1u);
              goto LABEL_195;
            case 2:
              int v41 = (*((_DWORD *)v18 + 5) >> 1) & 0x3FFFFFF;
              goto LABEL_23;
            case 3:
            case 9:
              int v41 = (*((_DWORD *)v18 + 5) & 0x7FFFFFF) - 1;
              goto LABEL_23;
            case 4:
              int v41 = 2;
              goto LABEL_23;
            case 7:
              int v41 = *((_WORD *)v18 + 9) & 1;
              goto LABEL_23;
            case 8:
              int v41 = 1;
              goto LABEL_23;
            case 10:
              int v41 = *((_DWORD *)v18 + 20) + 1;
              goto LABEL_23;
            default:
              goto LABEL_66;
          }
        }
        int v41 = (*((_DWORD *)v18 + 5) & 0x7FFFFFF) == 3 ? 2 : 1;
      }
LABEL_23:
      int v21 = *((_DWORD *)v13 - 4);
      if (v21 == v41) {
        break;
      }
      uint64_t v23 = *((void *)v13 - 3);
      uint64_t v22 = *((void *)v13 - 2);
      *((_DWORD *)v13 - 4) = v21 + 1;
      if (*(unsigned char *)(v23 + 16) == 30)
      {
        uint64_t v24 = (uint64_t *)(v23 - 32 * v22 - 32);
      }
      else
      {
        switch(*(unsigned char *)(v23 + 16))
        {
          case ' ':
          case '&':
            int v44 = *(_DWORD *)(v23 + 20);
            if ((v44 & 0x40000000) != 0) {
              uint64_t v45 = *(void *)(v23 - 8);
            }
            else {
              uint64_t v45 = v23 - 32 * (v44 & 0x7FFFFFF);
            }
            uint64_t v24 = (uint64_t *)(v45 + 32 * (v22 + 1));
            break;
          case '!':
            BOOL v37 = v22 == 0;
            uint64_t v46 = -64;
            if (v37) {
              uint64_t v46 = -96;
            }
            uint64_t v24 = (uint64_t *)(v23 + v46);
            break;
          case '""':
          case '#':
            goto LABEL_194;
          case '$':
            if ((*(_WORD *)(v23 + 18) & 1) == 0)
            {
              uint64_t v25 = 0;
              goto LABEL_27;
            }
            uint64_t v24 = (uint64_t *)(v23 - 32 * (*(_DWORD *)(v23 + 20) & 0x7FFFFFF) + 32);
            break;
          case '%':
            uint64_t v24 = (uint64_t *)(v23 - 32);
            break;
          case '\'':
            if (v22) {
              uint64_t v24 = (uint64_t *)(v23 - 32 * *(unsigned int *)(v23 + 80) + 32 * (v22 - 1) - 32);
            }
            else {
              uint64_t v24 = (uint64_t *)(v23 - 32 * *(unsigned int *)(v23 + 80) - 64);
            }
            break;
          default:
            int v42 = *(_DWORD *)(v23 + 20);
            if ((v42 & 0x40000000) != 0) {
              uint64_t v43 = *(void *)(v23 - 8);
            }
            else {
              uint64_t v43 = v23 - 32 * (v42 & 0x7FFFFFF);
            }
            uint64_t v24 = (uint64_t *)(v43 + 32 * (2 * v22) + 32);
            break;
        }
      }
      uint64_t v25 = *v24;
LABEL_27:
      int v3 = v89;
      uint64_t v26 = *((void *)v89 + 1);
      uint64_t v27 = *((unsigned int *)v89 + 5);
      if (v26 != *(void *)v89)
      {
        unsigned int v31 = *((_DWORD *)v89 + 4);
        goto LABEL_38;
      }
      if (v27)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 8 * v27;
        uint64_t v30 = (void *)*((void *)v89 + 1);
        while (*v30 != v25)
        {
          if (*v30 == -2) {
            uint64_t v28 = v30;
          }
          ++v30;
          v29 -= 8;
          if (!v29)
          {
            if (!v28) {
              goto LABEL_36;
            }
            *uint64_t v28 = v25;
            --*((_DWORD *)v3 + 6);
            goto LABEL_93;
          }
        }
      }
      else
      {
LABEL_36:
        unsigned int v31 = *((_DWORD *)v89 + 4);
        if (v27 < v31)
        {
          *((_DWORD *)v89 + 5) = v27 + 1;
          *(void *)(v26 + 8 * v27) = v25;
          goto LABEL_93;
        }
LABEL_38:
        if (3 * v31 <= 4 * ((int)v27 - *((_DWORD *)v89 + 6)))
        {
          if (v31 >= 0x40) {
            v31 *= 2;
          }
          else {
            unsigned int v31 = 128;
          }
LABEL_65:
          llvm::SmallPtrSetImplBase::Grow(v89, v31);
          unsigned int v31 = *((_DWORD *)v3 + 4);
          uint64_t v26 = *((void *)v3 + 1);
          goto LABEL_40;
        }
        if (v31 - v27 < v31 >> 3) {
          goto LABEL_65;
        }
LABEL_40:
        unsigned int v32 = v31 - 1;
        unsigned int v33 = (v31 - 1) & ((v25 >> 4) ^ (v25 >> 9));
        int v34 = (void *)(v26 + 8 * v33);
        uint64_t v35 = *v34;
        if (*v34 == -1)
        {
          int v39 = 0;
LABEL_51:
          if (v39) {
            BOOL v40 = v39;
          }
          else {
            BOOL v40 = v34;
          }
          if (*v40 != v25)
          {
            if (*v40 == -2) {
              --*((_DWORD *)v3 + 6);
            }
            else {
              ++*((_DWORD *)v3 + 5);
            }
            *BOOL v40 = v25;
LABEL_93:
            int v3 = (llvm::SmallPtrSetImplBase *)v91;
            if (v91 >= v92)
            {
              uint64_t v5 = (llvm::SmallPtrSetImplBase *)v90;
              uint64_t v47 = (uint64_t)&v91[-v90] >> 5;
              unint64_t v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 59) {
LABEL_192:
              }
                abort();
              uint64_t v49 = (uint64_t)&v92[-v90];
              if ((uint64_t)&v92[-v90] >> 4 > v48) {
                unint64_t v48 = v49 >> 4;
              }
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v50 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v50 = v48;
              }
              if (v50)
              {
                if (v50 >> 59) {
LABEL_193:
                }
                  sub_1CB833614();
                uint64_t v12 = (char *)operator new(32 * v50);
              }
              else
              {
                uint64_t v12 = 0;
              }
              uint64_t v51 = &v12[32 * v47];
              *(void *)uint64_t v51 = v25;
              v51[8] = 0;
              v51[24] = 0;
              uint64_t v52 = (uint64_t)v51;
              if (v3 != v5)
              {
                do
                {
                  long long v53 = *((_OWORD *)v3 - 1);
                  *(_OWORD *)(v52 - 32) = *((_OWORD *)v3 - 2);
                  *(_OWORD *)(v52 - 16) = v53;
                  v52 -= 32;
                  int v3 = (llvm::SmallPtrSetImplBase *)((char *)v3 - 32);
                }
                while (v3 != v5);
                int v3 = (llvm::SmallPtrSetImplBase *)v90;
              }
              uint64_t v13 = v51 + 32;
              uint64_t v90 = v52;
              uint64_t v91 = v51 + 32;
              uint64_t v92 = &v12[32 * v50];
              if (v3) {
                operator delete(v3);
              }
            }
            else
            {
              *(void *)uint64_t v91 = v25;
              *((unsigned char *)v3 + 8) = 0;
              uint64_t v13 = (char *)v3 + 32;
              *((unsigned char *)v3 + 24) = 0;
            }
            uint64_t v91 = v13;
            if (v13 == (char *)v90)
            {
              uint64_t v13 = (char *)v90;
              goto LABEL_114;
            }
            goto LABEL_5;
          }
        }
        else
        {
          int v39 = 0;
          int v36 = 1;
          while (v35 != v25)
          {
            if (v39) {
              BOOL v37 = 0;
            }
            else {
              BOOL v37 = v35 == -2;
            }
            if (v37) {
              int v39 = v34;
            }
            unsigned int v38 = v33 + v36++;
            unsigned int v33 = v38 & v32;
            int v34 = (void *)(v26 + 8 * (v38 & v32));
            uint64_t v35 = *v34;
            if (*v34 == -1) {
              goto LABEL_51;
            }
          }
        }
      }
    }
    uint64_t v13 = v91 - 32;
    uint64_t v91 = v13;
    if ((char *)v90 != v13) {
      continue;
    }
    break;
  }
LABEL_115:
  uint64_t v91 = v13;
  operator delete(v13);
LABEL_116:
  if (v9) {
    operator delete(v9);
  }
  int v55 = (char *)this + 72;
  uint64_t v56 = (char *)*((void *)this + 10);
  if (v56 != (char *)this + 72)
  {
    int v3 = 0;
    uint64_t v57 = 0;
    int v58 = 0;
    while (1)
    {
      if (v56) {
        uint64_t v59 = v56 - 24;
      }
      else {
        uint64_t v59 = 0;
      }
      int v60 = v84;
      if (v85 == v84)
      {
        int v61 = HIDWORD(v86);
        BOOL v62 = &v85[8 * HIDWORD(v86)];
        if (HIDWORD(v86))
        {
          uint64_t v63 = 0;
          while (*(char **)&v85[v63] != v59)
          {
            v63 += 8;
            if (8 * HIDWORD(v86) == v63) {
              goto LABEL_144;
            }
          }
          BOOL v62 = &v85[v63];
        }
LABEL_144:
        int v60 = v85;
      }
      else
      {
        int v64 = v86 - 1;
        unsigned int v65 = (v86 - 1) & ((v59 >> 4) ^ (v59 >> 9));
        BOOL v62 = &v85[8 * v65];
        uint64_t v66 = *(char **)v62;
        if (*(void *)v62 == -1)
        {
          uint64_t v75 = 0;
LABEL_163:
          if (v75) {
            BOOL v62 = v75;
          }
          int v61 = HIDWORD(v86);
          if (*(char **)v62 != v59) {
            BOOL v62 = &v85[8 * v86];
          }
        }
        else
        {
          uint64_t v75 = 0;
          int v67 = 1;
          while (v66 != v59)
          {
            if (v75) {
              BOOL v68 = 0;
            }
            else {
              BOOL v68 = v66 == (char *)-2;
            }
            if (v68) {
              uint64_t v75 = v62;
            }
            unsigned int v69 = v65 + v67++;
            unsigned int v65 = v69 & v64;
            BOOL v62 = &v85[8 * (v69 & v64)];
            uint64_t v66 = *(char **)v62;
            if (*(void *)v62 == -1) {
              goto LABEL_163;
            }
          }
          int v61 = HIDWORD(v86);
        }
      }
      if (v85 == v60) {
        int v70 = v61;
      }
      else {
        int v70 = v86;
      }
      if (v62 != &v85[8 * v70]) {
        goto LABEL_151;
      }
      if (v57 < v58) {
        break;
      }
      uint64_t v71 = (v57 - (char *)v3) >> 3;
      unint64_t v72 = v71 + 1;
      if ((unint64_t)(v71 + 1) >> 61) {
        goto LABEL_192;
      }
      if ((v58 - (char *)v3) >> 2 > v72) {
        unint64_t v72 = (v58 - (char *)v3) >> 2;
      }
      if ((unint64_t)(v58 - (char *)v3) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v73 = v72;
      }
      if (v73)
      {
        if (v73 >> 61) {
          goto LABEL_193;
        }
        uint64_t v74 = (char *)operator new(8 * v73);
      }
      else
      {
        uint64_t v74 = 0;
      }
      int v76 = &v74[8 * v71];
      *(void *)int v76 = v59;
      uint64_t v5 = (llvm::SmallPtrSetImplBase *)(v76 + 8);
      while (v57 != (char *)v3)
      {
        uint64_t v77 = *((void *)v57 - 1);
        v57 -= 8;
        *((void *)v76 - 1) = v77;
        v76 -= 8;
      }
      int v58 = &v74[8 * v73];
      if (v3) {
        operator delete(v3);
      }
      int v3 = (llvm::SmallPtrSetImplBase *)v76;
LABEL_152:
      uint64_t v56 = (char *)*((void *)v56 + 1);
      uint64_t v57 = (char *)v5;
      if (v56 == v55) {
        goto LABEL_175;
      }
    }
    *(void *)uint64_t v57 = v59;
    v57 += 8;
LABEL_151:
    uint64_t v5 = (llvm::SmallPtrSetImplBase *)v57;
    goto LABEL_152;
  }
  uint64_t v5 = 0;
  int v3 = 0;
LABEL_175:
  uint64_t v89 = (llvm::SmallPtrSetImplBase *)&v91;
  uint64_t v90 = 0x400000000;
  if (a2) {
    uint64_t v78 = &v89;
  }
  else {
    uint64_t v78 = 0;
  }
  llvm::detachDeadBlocks((uint64_t *)v3, (llvm::Type *)((v5 - v3) >> 3), (uint64_t)v78, v82);
  if (a2) {
    llvm::DomTreeUpdater::applyUpdates((uint64_t)a2, (unint64_t *)v89, v90);
  }
  if (v5 != v3)
  {
    uint64_t v79 = 8 * ((v5 - v3) >> 3);
    uint64_t v80 = (llvm::BasicBlock **)v3;
    do
    {
      if (a2) {
        llvm::DomTreeUpdater::deleteBB(a2, *v80);
      }
      else {
        llvm::BasicBlock::eraseFromParent(*v80);
      }
      ++v80;
      v79 -= 8;
    }
    while (v79);
  }
  uint64_t v12 = (char *)v89;
  if (v89 == (llvm::SmallPtrSetImplBase *)&v91)
  {
    if (v3) {
      goto LABEL_188;
    }
  }
  else
  {
LABEL_195:
    free(v12);
    if (v3) {
LABEL_188:
    }
      operator delete(v3);
  }
  if (v85 != v84) {
    free(v85);
  }
  return v3 != v5;
}

BOOL llvm::FoldSingleEntryPHINodes(llvm *this, llvm::BasicBlock *a2, llvm::MemoryDependenceResults *a3)
{
  uint64_t v3 = *((void *)this + 6);
  unsigned int v4 = (llvm::UndefValue **)(v3 - 24);
  if (v3) {
    uint64_t v5 = v3 - 24;
  }
  else {
    uint64_t v5 = 0;
  }
  int v6 = *(unsigned __int8 *)(v5 + 16);
  if (v3 && v6 == 83)
  {
    int v8 = *(_DWORD *)(v3 - 4);
    if ((v8 & 0x40000000) != 0) {
      int v9 = (llvm::UndefValue **)*(v4 - 1);
    }
    else {
      int v9 = &v4[-4 * (v8 & 0x7FFFFFF)];
    }
    uint64_t v10 = *v9;
    if (*v9 == (llvm::UndefValue *)v4) {
      uint64_t v10 = llvm::UndefValue::get(*v4, v10);
    }
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v4, v10, (llvm::Value *)1);
    if (a2) {
      llvm::MemoryDependenceResults::removeInstruction(a2, (llvm::Instruction *)v4);
    }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  return v6 == 83;
}

uint64_t llvm::DeleteDeadPHIs(uint64_t a1, uint64_t *a2, int32x2_t **a3)
{
  v43[24] = *MEMORY[0x1E4F143B8];
  int v41 = (char *)v43;
  uint64_t v42 = 0x800000000;
  if (*(void *)(a1 + 40) == a1 + 40) {
    goto LABEL_50;
  }
  LOBYTE(v3) = 0;
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = v4 - 24;
  if (v4) {
    uint64_t v6 = v4 - 24;
  }
  else {
    uint64_t v6 = 0;
  }
  if (!v4 || *(unsigned char *)(v6 + 16) != 83) {
    goto LABEL_46;
  }
  unsigned int v9 = 0;
  do
  {
    uint64_t v38 = 6;
    int v39 = 0;
    BOOL v40 = (int32x2_t ****)v5;
    if (v5 != -8192 && v5 != -4096 && v5)
    {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v38);
      unsigned int v9 = v42;
    }
    uint64_t v10 = v41;
    if (v9 >= HIDWORD(v42))
    {
      unint64_t v35 = v9 + 1;
      BOOL v36 = &v41[24 * v9] > (char *)&v38;
      if (v41 <= (char *)&v38 && v36)
      {
        uint64_t v37 = (char *)&v38 - v41;
        sub_1CC261F80((unsigned int *)&v41, v35);
        uint64_t v10 = v41;
        unint64_t v11 = (uint64_t *)&v41[v37];
      }
      else
      {
        sub_1CC261F80((unsigned int *)&v41, v35);
        unint64_t v11 = &v38;
        uint64_t v10 = v41;
      }
    }
    else
    {
      unint64_t v11 = &v38;
    }
    int v12 = v42;
    uint64_t v13 = (unint64_t *)&v10[24 * v42];
    *uint64_t v13 = 6;
    v13[1] = 0;
    uint64_t v14 = v11[2];
    v13[2] = v14;
    if (v14 != -8192 && v14 != -4096 && v14 != 0)
    {
      unint64_t v16 = *v11 & 0xFFFFFFFFFFFFFFF8;
      v13[1] = *(void *)v16;
      *(void *)unint64_t v16 = v13;
      *uint64_t v13 = v16 | 6;
      int v17 = (unint64_t *)v13[1];
      if (v17) {
        *int v17 = *v17 & 7 | (unint64_t)(v13 + 1);
      }
    }
    unsigned int v9 = v12 + 1;
    LODWORD(v42) = v12 + 1;
    if (v40 != (int32x2_t ****)-8192 && v40 != (int32x2_t ****)-4096 && v40)
    {
      unint64_t v18 = v38 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v38 & 0xFFFFFFFFFFFFFFF8) = v39;
      if (v39)
      {
        *int v39 = *v39 & 7 | v18;
      }
      else
      {
        int v19 = v40;
        int v20 = ***v40;
        unint64_t v21 = (unint64_t)v20[303];
        if (v21 <= v18)
        {
          uint64_t v22 = v20[305].u32[0];
          if (v21 + 16 * v22 > v18)
          {
            unsigned int v23 = v22 - 1;
            LODWORD(v24) = v23 & ((v40 >> 4) ^ (v40 >> 9));
            uint64_t v25 = (int32x2_t *****)(v21 + 16 * v24);
            uint64_t v26 = *v25;
            if (v40 == *v25)
            {
LABEL_32:
              *uint64_t v25 = (int32x2_t ****)-8192;
              v20[304] = vadd_s32(v20[304], (int32x2_t)0x1FFFFFFFFLL);
              int v19 = v40;
            }
            else
            {
              int v27 = 1;
              while (v26 != (int32x2_t ****)-4096)
              {
                int v28 = v24 + v27++;
                uint64_t v24 = v28 & v23;
                uint64_t v26 = *(int32x2_t *****)(v21 + 16 * v24);
                if (v40 == v26)
                {
                  uint64_t v25 = (int32x2_t *****)(v21 + 16 * v24);
                  goto LABEL_32;
                }
              }
            }
            *((unsigned char *)v19 + 17) &= ~1u;
          }
        }
      }
    }
    uint64_t v29 = *(void *)(v5 + 32);
    uint64_t v5 = v29 - 24;
    if (v29) {
      uint64_t v30 = v29 - 24;
    }
    else {
      uint64_t v30 = 0;
    }
  }
  while (v29 && *(unsigned char *)(v30 + 16) == 83);
  if (!v9)
  {
LABEL_50:
    LOBYTE(v3) = 0;
    goto LABEL_46;
  }
  uint64_t v31 = 0;
  int v3 = 0;
  uint64_t v32 = 24 * v9;
  do
  {
    unsigned int v33 = *(llvm::Instruction **)&v41[v31 + 16];
    if (v33 && *((unsigned char *)v33 + 16) == 83) {
      v3 |= llvm::RecursivelyDeleteDeadPHINode(v33, a2, a3);
    }
    v31 += 24;
  }
  while (v32 != v31);
LABEL_46:
  sub_1CC45E8E8(&v41);
  return v3 & 1;
}

uint64_t llvm::MergeBlockIntoPredecessor(llvm *this, unint64_t a2, llvm::DomTreeUpdater *a3, unint64_t a4, llvm::MemorySSAUpdater *a5, llvm::MemoryDependenceResults *a6)
{
  v238[4] = *MEMORY[0x1E4F143B8];
  if ((*((_WORD *)this + 9) & 0x7FFF) != 0) {
    return 0;
  }
  int v7 = (int)a6;
  uint64_t UniquePredecessor = llvm::BasicBlock::getUniquePredecessor(this);
  uint64_t result = 0;
  if (UniquePredecessor && (llvm *)UniquePredecessor != this)
  {
    unint64_t v15 = UniquePredecessor + 40;
    uint64_t v14 = *(void *)(UniquePredecessor + 40);
    if (v14) {
      uint64_t v16 = v14 - 24;
    }
    else {
      uint64_t v16 = 0;
    }
    unsigned int v17 = *(unsigned __int8 *)(v16 + 16) - 40;
    if (v17 < 0xFFFFFFF5) {
      uint64_t v16 = 0;
    }
    int v18 = *(unsigned __int8 *)(v16 + 16);
    if (v18 - 33) < 6 && ((0x3Bu >> (v18 - 33))) {
      return 0;
    }
    if (v7)
    {
      uint64_t result = 0;
      if (!v14) {
        return result;
      }
      if (v18 != 30 || v17 < 0xFFFFFFF5) {
        return result;
      }
      uint64_t v20 = *((void *)this + 5);
      if ((llvm *)v20 != (llvm *)((char *)this + 40))
      {
        uint64_t result = 0;
        uint64_t v21 = v20 - 24;
        if (!v20) {
          uint64_t v21 = 0;
        }
        unsigned int v22 = *(unsigned __int8 *)(v21 + 16) - 40;
        if (v22 < 0xFFFFFFF5) {
          uint64_t v21 = 0;
        }
        if (!v20) {
          return result;
        }
        if (*(unsigned char *)(v21 + 16) != 30 || v22 < 0xFFFFFFF5) {
          return result;
        }
        if ((*(_DWORD *)(v21 + 20) & 0x7FFFFFF) == 1)
        {
          int v220 = v7;
LABEL_35:
          uint64_t v24 = (uint64_t)this + 40;
          if ((llvm *)v20 == (llvm *)((char *)this + 40))
          {
LABEL_458:
            uint64_t v218 = (int32x2_t **)a4;
            uint64_t v25 = *((void *)this + 6);
          }
          else
          {
            uint64_t v25 = *((void *)this + 6);
            uint64_t v26 = v25 - 24;
            if (v25) {
              uint64_t v27 = v25 - 24;
            }
            else {
              uint64_t v27 = 0;
            }
            if (v25)
            {
              do
              {
                if (*(unsigned char *)(v27 + 16) != 83) {
                  break;
                }
                int v28 = *(_DWORD *)(v26 + 20);
                if ((v28 & 0x40000000) != 0)
                {
                  uint64_t v30 = *(char **)(v26 - 8);
                  uint64_t v29 = v28 & 0x7FFFFFF;
                  if (v29)
                  {
LABEL_43:
                    uint64_t v31 = 32 * v29;
                    uint64_t v32 = v30;
                    while (*(void *)v32 != v26)
                    {
                      v32 += 32;
                      v31 -= 32;
                      if (!v31)
                      {
                        uint64_t v32 = &v30[32 * v29];
                        goto LABEL_49;
                      }
                    }
                    goto LABEL_49;
                  }
                }
                else
                {
                  uint64_t v29 = v28 & 0x7FFFFFF;
                  uint64_t v30 = (char *)(v26 - 32 * v29);
                  if (v29) {
                    goto LABEL_43;
                  }
                }
                uint64_t v32 = v30;
LABEL_49:
                if (v29 != (v32 - v30) >> 5) {
                  return 0;
                }
                uint64_t v33 = *(void *)(v26 + 32);
                uint64_t v26 = v33 - 24;
                if (v33) {
                  uint64_t v27 = v33 - 24;
                }
                else {
                  uint64_t v27 = 0;
                }
              }
              while (v33);
            }
            uint64_t v218 = (int32x2_t **)a4;
          }
          v236 = v238;
          uint64_t v237 = 0x400000000;
          a4 = v25 - 24;
          if (v25) {
            uint64_t v34 = v25 - 24;
          }
          else {
            uint64_t v34 = 0;
          }
          if (*(unsigned char *)(v34 + 16) == 83)
          {
            if (v20 != v24 && v25)
            {
              unsigned int v35 = 0;
              do
              {
                int v36 = *(_DWORD *)(a4 + 20);
                if ((v36 & 0x40000000) != 0) {
                  uint64_t v37 = *(char **)(a4 - 8);
                }
                else {
                  uint64_t v37 = (char *)(a4 - 32 * (v36 & 0x7FFFFFF));
                }
                uint64_t v38 = *(void *)v37;
                if (*(unsigned char *)(*(void *)v37 + 16) != 83 || *(llvm **)(v38 + 40) != this)
                {
                  if (v35 >= HIDWORD(v237)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  v236[v35] = v38;
                  unsigned int v35 = v237 + 1;
                  LODWORD(v237) = v237 + 1;
                }
                uint64_t v39 = *(void *)(a4 + 32);
                a4 = v39 - 24;
                if (v39) {
                  uint64_t v40 = v39 - 24;
                }
                else {
                  uint64_t v40 = 0;
                }
              }
              while (v39 && *(unsigned char *)(v40 + 16) == 83);
            }
            llvm::FoldSingleEntryPHINodes(this, a5, v12);
          }
          __p = 0;
          int v224 = 0;
          v225 = 0;
          int v41 = *(void **)v15;
          uint64_t v221 = (void *)v24;
          uint64_t v222 = UniquePredecessor;
          int v219 = (void *)v15;
          if (!a2) {
            goto LABEL_407;
          }
          v231 = v235;
          v232 = v235;
          uint64_t v233 = 8;
          int v234 = 0;
          if (v41 == (void *)v15)
          {
LABEL_152:
            BOOL v68 = 0;
            uint64_t v20 = 0;
            v226 = (llvm::BasicBlock *)v230;
            uint64_t v227 = (llvm::BasicBlock *)v230;
            uint64_t v228 = 2;
            int v229 = 0;
LABEL_153:
            uint64_t v69 = *(void *)v24;
            if (*(void *)v24 == v24)
            {
LABEL_161:
              int v189 = 0;
            }
            else
            {
              uint64_t v70 = v69 - 24;
              if (!v69) {
                uint64_t v70 = 0;
              }
              int v71 = *(unsigned __int8 *)(v70 + 16);
              int v72 = v71 - 29;
              if (v71 != 30)
              {
                int v189 = 0;
                switch(v72)
                {
                  case 0:
                  case 5:
                  case 6:
                    goto LABEL_162;
                  case 1:
                    goto LABEL_457;
                  case 2:
                    int v189 = (*(_DWORD *)(v70 + 20) >> 1) & 0x3FFFFFF;
                    goto LABEL_162;
                  case 3:
                  case 9:
                    int v189 = (*(_DWORD *)(v70 + 20) & 0x7FFFFFF) - 1;
                    goto LABEL_162;
                  case 4:
                    int v189 = 2;
                    goto LABEL_162;
                  case 7:
                    int v189 = *(_WORD *)(v70 + 18) & 1;
                    goto LABEL_162;
                  case 8:
                    int v189 = 1;
                    goto LABEL_162;
                  case 10:
                    int v189 = *(_DWORD *)(v70 + 80) + 1;
                    goto LABEL_162;
                  default:
                    goto LABEL_161;
                }
              }
              if ((*(_DWORD *)(v70 + 20) & 0x7FFFFFF) == 3) {
                int v189 = 2;
              }
              else {
                int v189 = 1;
              }
            }
LABEL_162:
            sub_1CC292E4C((uint64_t)&__p, ((v20 - (uint64_t)v68) >> 4) + (2 * v189) + 1);
            uint64_t v73 = *(void *)v24;
            if (*(void *)v24 != v24)
            {
              if (v73) {
                a5 = (llvm::MemorySSAUpdater *)(v73 - 24);
              }
              else {
                a5 = 0;
              }
              int v74 = *((unsigned __int8 *)a5 + 16);
              int v75 = v74 - 29;
              if (v74 != 30)
              {
                uint64_t v20 = 2;
                switch(v75)
                {
                  case 1:
                    goto LABEL_457;
                  case 2:
                    LODWORD(v20) = (*((_DWORD *)a5 + 5) >> 1) & 0x3FFFFFF;
                    goto LABEL_445;
                  case 3:
                  case 9:
                    LODWORD(v20) = (*((_DWORD *)a5 + 5) & 0x7FFFFFF) - 1;
                    goto LABEL_445;
                  case 4:
                    goto LABEL_171;
                  case 7:
                    LODWORD(v20) = *((_WORD *)a5 + 9) & 1;
                    goto LABEL_445;
                  case 8:
                    LODWORD(v20) = 1;
                    goto LABEL_171;
                  case 10:
                    LODWORD(v20) = *((_DWORD *)a5 + 20) + 1;
LABEL_445:
                    if (!v20) {
                      goto LABEL_285;
                    }
                    goto LABEL_171;
                  default:
                    goto LABEL_285;
                }
              }
              if ((*((_DWORD *)a5 + 5) & 0x7FFFFFF) == 3) {
                LODWORD(v20) = 2;
              }
              else {
                LODWORD(v20) = 1;
              }
LABEL_171:
              unint64_t v15 = 0;
              int v76 = (char *)a5 - 32;
              uint64_t v24 = -2;
              a4 = v20;
              while (2)
              {
                int v77 = *((unsigned __int8 *)a5 + 16);
                if (v77 != 30)
                {
                  uint64_t v115 = (v77 - 31);
                  uint64_t v20 = (uint64_t)a5 - 32;
                  switch(v115)
                  {
                    case 1:
                    case 7:
                      int v118 = *((_DWORD *)a5 + 5);
                      if ((v118 & 0x40000000) != 0) {
                        uint64_t v119 = (char *)*((void *)a5 - 1);
                      }
                      else {
                        uint64_t v119 = (char *)a5 - 32 * (v118 & 0x7FFFFFF);
                      }
                      uint64_t v20 = (uint64_t)&v119[32 * v15 + 32];
                      goto LABEL_283;
                    case 2:
                      uint64_t v120 = -64;
                      if (!v15) {
                        uint64_t v120 = -96;
                      }
                      uint64_t v20 = (uint64_t)a5 + v120;
                      goto LABEL_175;
                    case 3:
                    case 4:
                      goto LABEL_457;
                    case 5:
                      if (*((_WORD *)a5 + 9))
                      {
                        uint64_t v121 = *((_DWORD *)a5 + 5) & 0x7FFFFFF;
                        unsigned int v122 = (char *)a5 + 32;
                        goto LABEL_282;
                      }
                      uint64_t v78 = 0;
                      uint64_t v24 = -2;
LABEL_176:
                      uint64_t v79 = v226;
                      if (v227 == v226)
                      {
                        unsigned int v80 = HIDWORD(v228);
                        __int16 v81 = (char *)v227 + 8 * HIDWORD(v228);
                        if (HIDWORD(v228))
                        {
                          uint64_t v82 = 0;
                          while (*(llvm::MemorySSAUpdater **)((char *)v227 + v82) != v78)
                          {
                            v82 += 8;
                            if (8 * HIDWORD(v228) == v82) {
                              goto LABEL_196;
                            }
                          }
                          __int16 v81 = (char *)v227 + v82;
                        }
LABEL_196:
                        uint64_t v79 = v227;
                      }
                      else
                      {
                        int v83 = v228 - 1;
                        unsigned int v84 = (v228 - 1) & ((v78 >> 4) ^ (v78 >> 9));
                        __int16 v81 = (char *)v227 + 8 * v84;
                        int v85 = *(llvm::MemorySSAUpdater **)v81;
                        if (*(void *)v81 == -1)
                        {
                          uint64_t v103 = 0;
LABEL_226:
                          if (v103) {
                            __int16 v81 = v103;
                          }
                          unsigned int v80 = HIDWORD(v228);
                          if (*(llvm::MemorySSAUpdater **)v81 != v78) {
                            __int16 v81 = (char *)v227 + 8 * v228;
                          }
                        }
                        else
                        {
                          uint64_t v103 = 0;
                          int v86 = 1;
                          while (v85 != v78)
                          {
                            if (v103) {
                              BOOL v87 = 0;
                            }
                            else {
                              BOOL v87 = v85 == (llvm::MemorySSAUpdater *)-2;
                            }
                            if (v87) {
                              uint64_t v103 = v81;
                            }
                            unsigned int v88 = v84 + v86++;
                            unsigned int v84 = v88 & v83;
                            __int16 v81 = (char *)v227 + 8 * (v88 & v83);
                            int v85 = *(llvm::MemorySSAUpdater **)v81;
                            if (*(void *)v81 == -1) {
                              goto LABEL_226;
                            }
                          }
                          unsigned int v80 = HIDWORD(v228);
                        }
                      }
                      if (v227 == v79) {
                        unsigned int v89 = v80;
                      }
                      else {
                        unsigned int v89 = v228;
                      }
                      if (v81 != (char *)v227 + 8 * v89) {
                        goto LABEL_257;
                      }
                      uint64_t v90 = v232;
                      uint64_t v91 = HIDWORD(v233);
                      if (v232 == v231)
                      {
                        if (HIDWORD(v233))
                        {
                          uint64_t v92 = 0;
                          uint64_t v93 = 8 * HIDWORD(v233);
                          uint64_t v94 = v232;
                          do
                          {
                            if (*(llvm::MemorySSAUpdater **)v94 == v78) {
                              goto LABEL_257;
                            }
                            if (*(void *)v94 == -2) {
                              uint64_t v92 = v94;
                            }
                            v94 += 8;
                            v93 -= 8;
                          }
                          while (v93);
                          if (v92)
                          {
                            *(void *)uint64_t v92 = v78;
                            --v234;
                            goto LABEL_239;
                          }
                        }
                        unsigned int v95 = v233;
                        if (HIDWORD(v233) < v233)
                        {
                          ++HIDWORD(v233);
                          *(void *)&v232[8 * v91] = v78;
LABEL_239:
                          uint64_t UniquePredecessor = (unint64_t)v78 & 0xFFFFFFFFFFFFFFFBLL;
                          unsigned int v106 = v224;
                          if (v224 >= (uint64_t *)v225)
                          {
                            uint64_t v108 = __p;
                            uint64_t v109 = ((char *)v224 - (unsigned char *)__p) >> 4;
                            unint64_t v110 = v109 + 1;
                            if ((unint64_t)(v109 + 1) >> 60) {
                              goto LABEL_455;
                            }
                            uint64_t v111 = v225 - (unsigned char *)__p;
                            if ((v225 - (unsigned char *)__p) >> 3 > v110) {
                              unint64_t v110 = v111 >> 3;
                            }
                            if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF0) {
                              a2 = 0xFFFFFFFFFFFFFFFLL;
                            }
                            else {
                              a2 = v110;
                            }
                            if (a2)
                            {
                              if (a2 >> 60) {
                                goto LABEL_456;
                              }
                              int v112 = (char *)operator new(16 * a2);
                            }
                            else
                            {
                              int v112 = 0;
                            }
                            unint64_t v113 = (uint64_t *)&v112[16 * v109];
                            uint64_t *v113 = v222;
                            v113[1] = UniquePredecessor;
                            unint64_t v114 = (char *)v113;
                            uint64_t v24 = -2;
                            if (v106 != v108)
                            {
                              do
                              {
                                *((_OWORD *)v114 - 1) = *((_OWORD *)v106 - 1);
                                v114 -= 16;
                                v106 -= 2;
                              }
                              while (v106 != v108);
                              unsigned int v106 = __p;
                            }
                            uint64_t v107 = v113 + 2;
                            __p = v114;
                            int v224 = v113 + 2;
                            v225 = &v112[16 * a2];
                            if (v106) {
                              operator delete(v106);
                            }
                          }
                          else
                          {
                            *int v224 = v222;
                            v106[1] = UniquePredecessor;
                            uint64_t v107 = v106 + 2;
                          }
                          int v224 = v107;
                          goto LABEL_257;
                        }
                      }
                      else
                      {
                        unsigned int v95 = v233;
                      }
                      if (3 * v95 <= 4 * (HIDWORD(v233) - v234))
                      {
                        if (v95 >= 0x40) {
                          v95 *= 2;
                        }
                        else {
                          unsigned int v95 = 128;
                        }
                      }
                      else if (v95 - HIDWORD(v233) >= v95 >> 3)
                      {
                        goto LABEL_214;
                      }
                      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v231, v95);
                      unsigned int v95 = v233;
                      uint64_t v90 = v232;
LABEL_214:
                      unsigned int v96 = v95 - 1;
                      unsigned int v97 = (v95 - 1) & ((v78 >> 4) ^ (v78 >> 9));
                      uint64_t v98 = &v90[8 * v97];
                      uint64_t v99 = *(llvm::MemorySSAUpdater **)v98;
                      if (*(void *)v98 == -1)
                      {
                        uint64_t v104 = 0;
LABEL_231:
                        if (v104) {
                          int v105 = (llvm::MemorySSAUpdater **)v104;
                        }
                        else {
                          int v105 = (llvm::MemorySSAUpdater **)v98;
                        }
                        if (*v105 != v78)
                        {
                          if (*v105 == (llvm::MemorySSAUpdater *)-2) {
                            --v234;
                          }
                          else {
                            ++HIDWORD(v233);
                          }
                          *int v105 = v78;
                          goto LABEL_239;
                        }
                      }
                      else
                      {
                        uint64_t v104 = 0;
                        int v100 = 1;
                        while (v99 != v78)
                        {
                          if (v104) {
                            BOOL v101 = 0;
                          }
                          else {
                            BOOL v101 = v99 == (llvm::MemorySSAUpdater *)-2;
                          }
                          if (v101) {
                            uint64_t v104 = v98;
                          }
                          unsigned int v102 = v97 + v100++;
                          unsigned int v97 = v102 & v96;
                          uint64_t v98 = &v90[8 * (v102 & v96)];
                          uint64_t v99 = *(llvm::MemorySSAUpdater **)v98;
                          if (*(void *)v98 == -1) {
                            goto LABEL_231;
                          }
                        }
                      }
LABEL_257:
                      if (++v15 == a4) {
                        goto LABEL_285;
                      }
                      continue;
                    case 6:
                      goto LABEL_175;
                    case 8:
                      if (v15)
                      {
                        uint64_t v20 = (uint64_t)&v76[32 * v15 - 32 + -32 * *((unsigned int *)a5 + 20)];
                      }
                      else
                      {
                        uint64_t v121 = *((unsigned int *)a5 + 20);
                        unsigned int v122 = (char *)a5 - 64;
LABEL_282:
                        uint64_t v20 = (uint64_t)&v122[-32 * v121];
                      }
LABEL_283:
                      uint64_t v24 = -2;
                      goto LABEL_175;
                    default:
                      int v116 = *((_DWORD *)a5 + 5);
                      if ((v116 & 0x40000000) != 0) {
                        uint64_t v117 = (char *)*((void *)a5 - 1);
                      }
                      else {
                        uint64_t v117 = (char *)a5 - 32 * (v116 & 0x7FFFFFF);
                      }
                      uint64_t v20 = (uint64_t)&v117[32 * (2 * v15) + 32];
                      goto LABEL_175;
                  }
                }
                break;
              }
              uint64_t v20 = (uint64_t)&v76[-32 * v15];
LABEL_175:
              uint64_t v78 = *(llvm::MemorySSAUpdater **)v20;
              goto LABEL_176;
            }
LABEL_285:
            if (v232 != v231)
            {
              if (v233 >= 0x21 && 4 * (HIDWORD(v233) - v234) < v233)
              {
                llvm::SmallPtrSetImplBase::shrink_and_clear(&v231);
                goto LABEL_287;
              }
              memset(v232, 255, 8 * v233);
            }
            int v234 = 0;
            HIDWORD(v233) = 0;
LABEL_287:
            unsigned int v123 = (void *)*v221;
            if ((void *)*v221 != v221)
            {
              if (v123) {
                a4 = (unint64_t)(v123 - 3);
              }
              else {
                a4 = 0;
              }
              int v124 = *(unsigned __int8 *)(a4 + 16);
              int v125 = v124 - 29;
              if (v124 != 30)
              {
                uint64_t v20 = 2;
                switch(v125)
                {
                  case 1:
                    goto LABEL_457;
                  case 2:
                    LODWORD(v20) = (*(_DWORD *)(a4 + 20) >> 1) & 0x3FFFFFF;
                    goto LABEL_448;
                  case 3:
                  case 9:
                    LODWORD(v20) = (*(_DWORD *)(a4 + 20) & 0x7FFFFFF) - 1;
                    goto LABEL_448;
                  case 4:
                    goto LABEL_296;
                  case 7:
                    LODWORD(v20) = *(_WORD *)(a4 + 18) & 1;
                    goto LABEL_448;
                  case 8:
                    LODWORD(v20) = 1;
                    goto LABEL_296;
                  case 10:
                    LODWORD(v20) = *(_DWORD *)(a4 + 80) + 1;
LABEL_448:
                    if (!v20) {
                      goto LABEL_385;
                    }
                    goto LABEL_296;
                  default:
                    goto LABEL_385;
                }
              }
              if ((*(_DWORD *)(a4 + 20) & 0x7FFFFFF) == 3) {
                LODWORD(v20) = 2;
              }
              else {
                LODWORD(v20) = 1;
              }
LABEL_296:
              uint64_t v126 = 0;
              unint64_t v15 = a4 - 32;
              a5 = (llvm::MemorySSAUpdater *)v20;
              while (2)
              {
                int v127 = *(unsigned __int8 *)(a4 + 16);
                if (v127 != 30)
                {
                  uint64_t v152 = (v127 - 31);
                  uint64_t v20 = a4 - 32;
                  switch(v152)
                  {
                    case 1:
                    case 7:
                      int v156 = *(_DWORD *)(a4 + 20);
                      if ((v156 & 0x40000000) != 0) {
                        int v157 = *(char **)(a4 - 8);
                      }
                      else {
                        int v157 = (char *)(a4 - 32 * (v156 & 0x7FFFFFF));
                      }
                      uint64_t v155 = &v157[32 * v126];
                      goto LABEL_357;
                    case 2:
                      uint64_t v158 = -64;
                      if (!v126) {
                        uint64_t v158 = -96;
                      }
                      uint64_t v20 = a4 + v158;
                      goto LABEL_300;
                    case 3:
                    case 4:
                      goto LABEL_457;
                    case 5:
                      if (*(_WORD *)(a4 + 18))
                      {
                        uint64_t v159 = *(_DWORD *)(a4 + 20) & 0x7FFFFFF;
                        int v160 = (char *)(a4 + 32);
                        goto LABEL_377;
                      }
                      int v128 = 0;
LABEL_301:
                      uint64_t v129 = v232;
                      uint64_t v130 = HIDWORD(v233);
                      if (v232 == v231)
                      {
                        if (HIDWORD(v233))
                        {
                          uint64_t v131 = 0;
                          uint64_t v132 = 8 * HIDWORD(v233);
                          int64_t v133 = (llvm::MemorySSAUpdater **)v232;
                          do
                          {
                            if (*v133 == v128) {
                              goto LABEL_351;
                            }
                            if (*v133 == (llvm::MemorySSAUpdater *)-2) {
                              uint64_t v131 = v133;
                            }
                            ++v133;
                            v132 -= 8;
                          }
                          while (v132);
                          if (v131)
                          {
                            int *v131 = v128;
                            --v234;
                            goto LABEL_333;
                          }
                        }
                        unsigned int v134 = v233;
                        if (HIDWORD(v233) < v233)
                        {
                          ++HIDWORD(v233);
                          *(void *)&v232[8 * v130] = v128;
LABEL_333:
                          uint64_t UniquePredecessor = (unint64_t)v128 | 4;
                          int v144 = v224;
                          if (v224 >= (uint64_t *)v225)
                          {
                            uint64_t v146 = __p;
                            uint64_t v24 = ((char *)v224 - (unsigned char *)__p) >> 4;
                            unint64_t v147 = v24 + 1;
                            if ((unint64_t)(v24 + 1) >> 60) {
                              goto LABEL_455;
                            }
                            uint64_t v148 = v225 - (unsigned char *)__p;
                            if ((v225 - (unsigned char *)__p) >> 3 > v147) {
                              unint64_t v147 = v148 >> 3;
                            }
                            if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFF0) {
                              a2 = 0xFFFFFFFFFFFFFFFLL;
                            }
                            else {
                              a2 = v147;
                            }
                            if (a2)
                            {
                              if (a2 >> 60) {
                                goto LABEL_456;
                              }
                              uint64_t v149 = (char *)operator new(16 * a2);
                            }
                            else
                            {
                              uint64_t v149 = 0;
                            }
                            int v150 = &v149[16 * v24];
                            *(void *)int v150 = this;
                            *((void *)v150 + 1) = UniquePredecessor;
                            uint64_t v151 = v150;
                            if (v144 != v146)
                            {
                              do
                              {
                                *((_OWORD *)v151 - 1) = *((_OWORD *)v144 - 1);
                                v151 -= 16;
                                v144 -= 2;
                              }
                              while (v144 != v146);
                              int v144 = __p;
                            }
                            v145 = (uint64_t *)(v150 + 16);
                            __p = v151;
                            int v224 = (uint64_t *)(v150 + 16);
                            v225 = &v149[16 * a2];
                            if (v144) {
                              operator delete(v144);
                            }
                          }
                          else
                          {
                            *int v224 = (uint64_t)this;
                            v144[1] = UniquePredecessor;
                            v145 = v144 + 2;
                          }
                          int v224 = v145;
                          goto LABEL_351;
                        }
                      }
                      else
                      {
                        unsigned int v134 = v233;
                      }
                      if (3 * v134 <= 4 * (HIDWORD(v233) - v234))
                      {
                        if (v134 >= 0x40) {
                          v134 *= 2;
                        }
                        else {
                          unsigned int v134 = 128;
                        }
                      }
                      else if (v134 - HIDWORD(v233) >= v134 >> 3)
                      {
                        goto LABEL_314;
                      }
                      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v231, v134);
                      unsigned int v134 = v233;
                      uint64_t v129 = v232;
LABEL_314:
                      unsigned int v135 = v134 - 1;
                      unsigned int v136 = (v134 - 1) & ((v128 >> 4) ^ (v128 >> 9));
                      uint64_t v137 = &v129[8 * v136];
                      uint64_t v138 = *(llvm::MemorySSAUpdater **)v137;
                      if (*(void *)v137 == -1)
                      {
                        uint64_t v142 = 0;
LABEL_325:
                        if (v142) {
                          uint64_t v143 = (llvm::MemorySSAUpdater **)v142;
                        }
                        else {
                          uint64_t v143 = (llvm::MemorySSAUpdater **)v137;
                        }
                        if (*v143 != v128)
                        {
                          if (*v143 == (llvm::MemorySSAUpdater *)-2) {
                            --v234;
                          }
                          else {
                            ++HIDWORD(v233);
                          }
                          *uint64_t v143 = v128;
                          goto LABEL_333;
                        }
                      }
                      else
                      {
                        uint64_t v142 = 0;
                        int v139 = 1;
                        while (v138 != v128)
                        {
                          if (v142) {
                            BOOL v140 = 0;
                          }
                          else {
                            BOOL v140 = v138 == (llvm::MemorySSAUpdater *)-2;
                          }
                          if (v140) {
                            uint64_t v142 = v137;
                          }
                          unsigned int v141 = v136 + v139++;
                          unsigned int v136 = v141 & v135;
                          uint64_t v137 = &v129[8 * (v141 & v135)];
                          uint64_t v138 = *(llvm::MemorySSAUpdater **)v137;
                          if (*(void *)v137 == -1) {
                            goto LABEL_325;
                          }
                        }
                      }
LABEL_351:
                      if ((llvm::MemorySSAUpdater *)++v126 == a5) {
                        goto LABEL_385;
                      }
                      continue;
                    case 6:
                      goto LABEL_300;
                    case 8:
                      if (v126)
                      {
                        uint64_t v20 = v15 - 32 * *(unsigned int *)(a4 + 80) + 32 * v126 - 32;
                      }
                      else
                      {
                        uint64_t v159 = *(unsigned int *)(a4 + 80);
                        int v160 = (char *)(a4 - 64);
LABEL_377:
                        uint64_t v20 = (uint64_t)&v160[-32 * v159];
                      }
                      goto LABEL_300;
                    default:
                      int v153 = *(_DWORD *)(a4 + 20);
                      if ((v153 & 0x40000000) != 0) {
                        int v154 = *(char **)(a4 - 8);
                      }
                      else {
                        int v154 = (char *)(a4 - 32 * (v153 & 0x7FFFFFF));
                      }
                      uint64_t v155 = &v154[32 * (2 * v126)];
LABEL_357:
                      uint64_t v20 = (uint64_t)(v155 + 32);
                      goto LABEL_300;
                  }
                }
                break;
              }
              uint64_t v20 = v15 - 32 * v126;
LABEL_300:
              int v128 = *(llvm::MemorySSAUpdater **)v20;
              goto LABEL_301;
            }
LABEL_385:
            unint64_t v162 = (unint64_t)this | 4;
            int v163 = v224;
            if (v224 >= (uint64_t *)v225)
            {
              uint64_t UniquePredecessor = v222;
              v165 = __p;
              uint64_t v166 = ((char *)v224 - (unsigned char *)__p) >> 4;
              unint64_t v167 = v166 + 1;
              unint64_t v15 = (unint64_t)v219;
              if ((unint64_t)(v166 + 1) >> 60) {
LABEL_455:
              }
                abort();
              uint64_t v168 = v225 - (unsigned char *)__p;
              if ((v225 - (unsigned char *)__p) >> 3 > v167) {
                unint64_t v167 = v168 >> 3;
              }
              if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v169 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v169 = v167;
              }
              if (v169)
              {
                if (v169 >> 60) {
LABEL_456:
                }
                  sub_1CB833614();
                unsigned int v170 = (char *)operator new(16 * v169);
              }
              else
              {
                unsigned int v170 = 0;
              }
              uint64_t v171 = (uint64_t *)&v170[16 * v166];
              *uint64_t v171 = v222;
              v171[1] = v162;
              uint64_t v164 = v171 + 2;
              if (v163 != v165)
              {
                do
                {
                  *((_OWORD *)v171 - 1) = *((_OWORD *)v163 - 1);
                  v171 -= 2;
                  v163 -= 2;
                }
                while (v163 != v165);
                int v163 = __p;
              }
              __p = v171;
              int v224 = v164;
              v225 = &v170[16 * v169];
              if (v163) {
                operator delete(v163);
              }
            }
            else
            {
              uint64_t UniquePredecessor = v222;
              *int v224 = v222;
              v163[1] = v162;
              uint64_t v164 = v163 + 2;
              unint64_t v15 = (unint64_t)v219;
            }
            int v224 = v164;
            if (v227 != v226) {
              free(v227);
            }
            uint64_t v24 = (uint64_t)v221;
            if (v232 != v231) {
              free(v232);
            }
            int v41 = *(void **)v15;
LABEL_407:
            if (v41 == (void *)v15)
            {
              uint64_t v172 = 0;
            }
            else
            {
              if (v41) {
                uint64_t v172 = v41 - 3;
              }
              else {
                uint64_t v172 = 0;
              }
              if (*((unsigned __int8 *)v172 + 16) - 29 >= 0xB) {
                uint64_t v172 = 0;
              }
            }
            uint64_t v173 = *(void *)v24;
            if (*(void *)v24 == v24)
            {
              uint64_t v174 = 0;
            }
            else
            {
              if (v173) {
                uint64_t v174 = v173 - 24;
              }
              else {
                uint64_t v174 = 0;
              }
              if (*(unsigned __int8 *)(v174 + 16) - 29 >= 0xB) {
                uint64_t v174 = 0;
              }
            }
            uint64_t v175 = (uint64_t *)*((void *)this + 6);
            int v176 = (llvm::Instruction *)(v175 - 3);
            if (!v175) {
              int v176 = 0;
            }
            if (v176 == (llvm::Instruction *)v174) {
              uint64_t v177 = (llvm::Instruction *)v172;
            }
            else {
              uint64_t v177 = v176;
            }
            uint64_t v178 = (uint64_t *)(v174 + 24);
            if (v175 != (uint64_t *)(v174 + 24) && v172 != (uint64_t *)v174)
            {
              *(_WORD *)(UniquePredecessor + 18) &= ~0x8000u;
              uint64_t v179 = *(void *)(UniquePredecessor + 56);
              if (v179) {
                uint64_t v180 = *(llvm::ValueSymbolTable **)(v179 + 104);
              }
              else {
                uint64_t v180 = 0;
              }
              uint64_t v181 = v172 + 3;
              uint64_t v182 = *((void *)this + 7);
              if (v182) {
                uint64_t v183 = *(llvm::ValueSymbolTable **)(v182 + 104);
              }
              else {
                uint64_t v183 = 0;
              }
              if (v180 == v183)
              {
                uint64_t v184 = v175;
                uint64_t UniquePredecessor = v222;
                do
                {
                  uint64_t v185 = v184 - 3;
                  if (!v184) {
                    uint64_t v185 = 0;
                  }
                  v185[5] = v222;
                  uint64_t v184 = (uint64_t *)v184[1];
                }
                while (v184 != v178);
              }
              else
              {
                uint64_t v212 = v175;
                do
                {
                  uint64_t v190 = (llvm::Value *)(v212 - 3);
                  if (!v212) {
                    uint64_t v190 = 0;
                  }
                  uint64_t v214 = v190;
                  int v210 = *((_DWORD *)v190 + 5) & 0x10000000;
                  if (v183 && v210)
                  {
                    uint64_t v191 = ***(void ***)v190;
                    uint64_t v192 = *(void *)(v191 + 152);
                    uint64_t v193 = *(unsigned int *)(v191 + 168);
                    if (v193)
                    {
                      LODWORD(v194) = (v193 - 1) & ((v214 >> 4) ^ (v214 >> 9));
                      uint64_t v195 = (llvm::Value **)(v192 + 16 * v194);
                      unint64_t v196 = *v195;
                      if (*v195 != v214)
                      {
                        int v197 = 1;
                        do
                        {
                          if (v196 == (llvm::Value *)-4096) {
                            goto LABEL_471;
                          }
                          int v198 = v194 + v197++;
                          uint64_t v194 = v198 & (v193 - 1);
                          unint64_t v196 = *(llvm::Value **)(v192 + 16 * v194);
                        }
                        while (v196 != v214);
                        uint64_t v195 = (llvm::Value **)(v192 + 16 * v194);
                      }
                    }
                    else
                    {
LABEL_471:
                      uint64_t v195 = (llvm::Value **)(v192 + 16 * v193);
                    }
                    uint64_t v199 = *((unsigned int *)v183 + 2);
                    if (v199)
                    {
                      uint64_t v200 = (size_t *)v195[1];
                      uint64_t v209 = *((unsigned int *)v183 + 5);
                      __s1 = (unsigned __int8 *)v200 + v209;
                      __uint64_t n = *v200;
                      if (*v200)
                      {
                        int v217 = 0;
                        size_t v201 = *v200;
                        unsigned int v202 = __s1;
                        do
                        {
                          int v203 = *v202++;
                          int v217 = 33 * v217 + v203;
                          --v201;
                        }
                        while (v201);
                      }
                      else
                      {
                        int v217 = 0;
                      }
                      unsigned int v215 = v199 - 1;
                      uint64_t v204 = *(void *)v183;
                      uint64_t v213 = *(void *)v183 + 8 * v199 + 8;
                      int v205 = 1;
                      int v206 = v217;
                      while (1)
                      {
                        uint64_t v207 = v206 & v215;
                        uint64_t v208 = *(void **)(v204 + 8 * v207);
                        if (v208 != (void *)-8)
                        {
                          if (!v208) {
                            goto LABEL_485;
                          }
                          if (*(_DWORD *)(v213 + 4 * v207) == v217
                            && __n == *v208
                            && (!__n || !memcmp(__s1, (char *)v208 + v209, __n)))
                          {
                            break;
                          }
                        }
                        int v206 = v205 + v207;
                        ++v205;
                      }
                      *(void *)(v204 + 8 * (int)v207) = -8;
                      *(int32x2_t *)((char *)v183 + 12) = vadd_s32(*(int32x2_t *)((char *)v183 + 12), (int32x2_t)0x1FFFFFFFFLL);
                    }
                  }
LABEL_485:
                  *((void *)v214 + 5) = v222;
                  if (v180 && v210) {
                    llvm::ValueSymbolTable::reinsertValue(v180, v214);
                  }
                  uint64_t v212 = (uint64_t *)v212[1];
                  uint64_t UniquePredecessor = v222;
                }
                while (v212 != v178);
              }
              uint64_t v186 = *v178;
              uint64_t v187 = *v175;
              *(void *)(v187 + 8) = v178;
              *uint64_t v178 = v187;
              uint64_t v188 = *v181;
              *(void *)(v186 + 8) = v181;
              *uint64_t v175 = v188;
              *(void *)(v188 + 8) = v175;
              *uint64_t v181 = v186;
            }
            if (v218) {
              llvm::MemorySSAUpdater::moveAllAfterMergeBlocks(v218, (llvm::BasicBlock **)this, (llvm::BasicBlock *)UniquePredecessor, v177);
            }
            llvm::Value::doRAUW(this, (llvm::Value *)UniquePredecessor, (llvm::Value *)1);
            if (v220) {
              sub_1CD121D24();
            }
            sub_1CD121D24();
          }
          if (v41) {
            a4 = (unint64_t)(v41 - 3);
          }
          else {
            a4 = 0;
          }
          int v42 = *(unsigned __int8 *)(a4 + 16);
          int v43 = v42 - 29;
          if (v42 != 30)
          {
            uint64_t v20 = 2;
            switch(v43)
            {
              case 1:
LABEL_457:
                __break(1u);
                goto LABEL_458;
              case 2:
                LODWORD(v20) = (*(_DWORD *)(a4 + 20) >> 1) & 0x3FFFFFF;
                goto LABEL_453;
              case 3:
              case 9:
                LODWORD(v20) = (*(_DWORD *)(a4 + 20) & 0x7FFFFFF) - 1;
                goto LABEL_453;
              case 4:
                goto LABEL_87;
              case 7:
                LODWORD(v20) = *(_WORD *)(a4 + 18) & 1;
                goto LABEL_453;
              case 8:
                LODWORD(v20) = 1;
                goto LABEL_87;
              case 10:
                LODWORD(v20) = *(_DWORD *)(a4 + 80) + 1;
LABEL_453:
                v226 = (llvm::BasicBlock *)v230;
                uint64_t v227 = (llvm::BasicBlock *)v230;
                uint64_t v228 = 2;
                int v229 = 0;
                if (v20) {
                  goto LABEL_88;
                }
                BOOL v68 = 0;
                uint64_t v20 = 0;
                break;
              default:
                goto LABEL_152;
            }
            goto LABEL_150;
          }
          if ((*(_DWORD *)(a4 + 20) & 0x7FFFFFF) == 3) {
            LODWORD(v20) = 2;
          }
          else {
            LODWORD(v20) = 1;
          }
LABEL_87:
          v226 = (llvm::BasicBlock *)v230;
          uint64_t v227 = (llvm::BasicBlock *)v230;
          uint64_t v228 = 2;
          int v229 = 0;
LABEL_88:
          uint64_t v44 = 0;
          uint64_t v45 = (char *)(a4 - 32);
          uint64_t v24 = a4 - 64;
          unsigned int v46 = 2;
          a2 = -2;
          uint64_t UniquePredecessor = 128;
          unint64_t v15 = v20;
          while (1)
          {
            int v47 = *(unsigned __int8 *)(a4 + 16);
            if (v47 == 30) {
              break;
            }
            uint64_t v62 = (v47 - 31);
            uint64_t v20 = a4 - 32;
            switch(v62)
            {
              case 1:
              case 7:
                int v65 = *(_DWORD *)(a4 + 20);
                if ((v65 & 0x40000000) != 0) {
                  uint64_t v66 = *(char **)(a4 - 8);
                }
                else {
                  uint64_t v66 = (char *)(a4 - 32 * (v65 & 0x7FFFFFF));
                }
                uint64_t v20 = (uint64_t)&v66[32 * v44 + 32];
                goto LABEL_92;
              case 2:
                if (v44) {
                  uint64_t v67 = -64;
                }
                else {
                  uint64_t v67 = -96;
                }
                uint64_t v20 = a4 + v67;
                goto LABEL_92;
              case 3:
              case 4:
                goto LABEL_457;
              case 5:
                if (*(_WORD *)(a4 + 18))
                {
                  uint64_t v20 = a4 + 32 - 32 * (*(_DWORD *)(a4 + 20) & 0x7FFFFFF);
                  goto LABEL_92;
                }
                a5 = 0;
LABEL_93:
                unint64_t v48 = v227;
                uint64_t v49 = HIDWORD(v228);
                if (v227 != v226) {
                  goto LABEL_103;
                }
                if (HIDWORD(v228))
                {
                  unint64_t v50 = 0;
                  uint64_t v51 = 8 * HIDWORD(v228);
                  uint64_t v52 = (llvm::MemorySSAUpdater **)v227;
                  do
                  {
                    if (*v52 == a5) {
                      goto LABEL_124;
                    }
                    if (*v52 == (llvm::MemorySSAUpdater *)-2) {
                      unint64_t v50 = v52;
                    }
                    ++v52;
                    v51 -= 8;
                  }
                  while (v51);
                  if (v50)
                  {
                    char *v50 = a5;
                    --v229;
                    goto LABEL_124;
                  }
                }
                if (HIDWORD(v228) >= v46)
                {
LABEL_103:
                  if (3 * v46 <= 4 * (HIDWORD(v228) - v229))
                  {
                    if (v46 >= 0x40) {
                      v46 *= 2;
                    }
                    else {
                      unsigned int v46 = 128;
                    }
                  }
                  else if (v46 - HIDWORD(v228) >= v46 >> 3)
                  {
                    goto LABEL_105;
                  }
                  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v226, v46);
                  unsigned int v46 = v228;
                  unint64_t v48 = v227;
LABEL_105:
                  unsigned int v53 = v46 - 1;
                  unsigned int v54 = (v46 - 1) & ((a5 >> 4) ^ (a5 >> 9));
                  int v55 = (llvm::MemorySSAUpdater **)((char *)v48 + 8 * v54);
                  uint64_t v56 = *v55;
                  if (*v55 == (llvm::MemorySSAUpdater *)-1)
                  {
                    int v60 = 0;
LABEL_116:
                    if (v60) {
                      int v61 = v60;
                    }
                    else {
                      int v61 = v55;
                    }
                    if (*v61 != a5)
                    {
                      if (*v61 == (llvm::MemorySSAUpdater *)-2) {
                        --v229;
                      }
                      else {
                        ++HIDWORD(v228);
                      }
                      *int v61 = a5;
                    }
                  }
                  else
                  {
                    int v60 = 0;
                    int v57 = 1;
                    while (v56 != a5)
                    {
                      if (v60) {
                        BOOL v58 = 0;
                      }
                      else {
                        BOOL v58 = v56 == (llvm::MemorySSAUpdater *)-2;
                      }
                      if (v58) {
                        int v60 = v55;
                      }
                      unsigned int v59 = v54 + v57++;
                      unsigned int v54 = v59 & v53;
                      int v55 = (llvm::MemorySSAUpdater **)((char *)v48 + 8 * (v59 & v53));
                      uint64_t v56 = *v55;
                      if (*v55 == (llvm::MemorySSAUpdater *)-1) {
                        goto LABEL_116;
                      }
                    }
                  }
                  goto LABEL_124;
                }
                ++HIDWORD(v228);
                *((void *)v227 + v49) = a5;
LABEL_124:
                if (++v44 == v15)
                {
                  BOOL v68 = __p;
                  uint64_t v20 = (uint64_t)v224;
LABEL_150:
                  uint64_t v24 = (uint64_t)v221;
                  goto LABEL_153;
                }
                break;
              case 6:
                goto LABEL_92;
              case 8:
                uint64_t v20 = v24 - 32 * *(unsigned int *)(a4 + 80);
                if (v44) {
                  uint64_t v20 = (uint64_t)&v45[32 * (v44 - 1) + -32 * *(unsigned int *)(a4 + 80)];
                }
                goto LABEL_92;
              default:
                int v63 = *(_DWORD *)(a4 + 20);
                if ((v63 & 0x40000000) != 0) {
                  int v64 = *(char **)(a4 - 8);
                }
                else {
                  int v64 = (char *)(a4 - 32 * (v63 & 0x7FFFFFF));
                }
                uint64_t v20 = (uint64_t)&v64[64 * v44 + 32];
                goto LABEL_92;
            }
          }
          uint64_t v20 = (uint64_t)&v45[-32 * v44];
LABEL_92:
          a5 = *(llvm::MemorySSAUpdater **)v20;
          goto LABEL_93;
        }
      }
    }
    else if ((llvm *)llvm::BasicBlock::getUniqueSuccessor((llvm::BasicBlock *)UniquePredecessor) == this)
    {
      int v220 = v7;
      uint64_t v20 = *((void *)this + 5);
      goto LABEL_35;
    }
    return 0;
  }
  return result;
}

void sub_1CD124434(void *a1, void *a2, void *a3)
{
  if ((void *)*a3 != a3 && a2 != a3)
  {
    int v3 = (void *)a3[1];
    *((_WORD *)a1 - 11) &= ~0x8000u;
    if (a1 != a3)
    {
      uint64_t v4 = a1[2];
      if (v4) {
        uint64_t v5 = *(llvm::ValueSymbolTable **)(v4 + 104);
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = a3[2];
      if (v6) {
        int v7 = *(uint64_t **)(v6 + 104);
      }
      else {
        int v7 = 0;
      }
      if (v5 == (llvm::ValueSymbolTable *)v7)
      {
        if (v3 != a3)
        {
          int v8 = v3;
          do
          {
            unsigned int v9 = v8 - 3;
            if (!v8) {
              unsigned int v9 = 0;
            }
            v9[5] = a1 - 5;
            int v8 = (void *)v8[1];
          }
          while (v8 != a3);
        }
      }
      else
      {
        uint64_t v21 = v5;
        unsigned int v22 = v7;
        if (v3 != a3)
        {
          uint64_t v13 = v3;
          int v19 = v3;
          uint64_t v20 = a1 - 5;
          unsigned int v17 = a3;
          int v18 = a2;
          do
          {
            if (v13) {
              uint64_t v14 = v13 - 3;
            }
            else {
              uint64_t v14 = 0;
            }
            int v15 = *((_DWORD *)v14 + 5) & 0x10000000;
            if (v22 && v15)
            {
              ValueName = (size_t *)llvm::Value::getValueName((llvm::Value *)v14);
              llvm::ValueSymbolTable::removeValueName(v22, ValueName);
            }
            v14[5] = v20;
            if (v21 && v15) {
              llvm::ValueSymbolTable::reinsertValue(v21, (llvm::Value *)v14);
            }
            uint64_t v13 = (void *)v13[1];
            a3 = v17;
            a2 = v18;
            int v3 = v19;
          }
          while (v13 != v17);
        }
      }
    }
    if (v3 != a3)
    {
      uint64_t v10 = (void *)*a3;
      uint64_t v11 = *v3;
      *(void *)(v11 + 8) = a3;
      *a3 = v11;
      uint64_t v12 = *a2;
      v10[1] = a2;
      *int v3 = v12;
      *(void *)(v12 + 8) = v3;
      *a2 = v10;
    }
  }
}

uint64_t llvm::RemoveRedundantDbgInstrs(llvm *this, llvm::BasicBlock *a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v51 = v53;
  uint64_t v52 = 0x800000000;
  unint64_t v48 = (void *)1;
  uint64_t v3 = 8;
  do
  {
    uint64_t v4 = (char *)&v48 + v3;
    *(void *)uint64_t v4 = 0;
    v4[8] = 0;
    v4[24] = 0;
    *((void *)v4 + 4) = 0;
    v3 += 40;
  }
  while (v4 + 40 != (char *)&v51);
  uint64_t v5 = (llvm *)((char *)this + 40);
  uint64_t v6 = (llvm *)*((void *)this + 5);
  if (v6 == (llvm *)((char *)this + 40)) {
    goto LABEL_40;
  }
  do
  {
    if (v6) {
      uint64_t v7 = (uint64_t)v6 - 24;
    }
    else {
      uint64_t v7 = 0;
    }
    BOOL v8 = sub_1CC27FAEC(v7);
    if (!v8) {
      uint64_t v7 = 0;
    }
    if (v6 && v8)
    {
      uint64_t v9 = *(void *)(v7 + 48);
      if (*(_DWORD *)(v9 + 8) == 2) {
        uint64_t v10 = *(void *)(v9 - 8);
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v15 = v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF);
      uint64_t v16 = *(void *)(*(void *)(v15 + 32) + 24);
      uint64_t v17 = *(void *)(*(void *)(v15 + 64) + 24);
      *(void *)&long long v55 = v16;
      if (v17)
      {
        llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v17 + 24), *(uint64_t **)(v17 + 32), (int8x16_t *)((char *)&v55 + 8));
      }
      else
      {
        BYTE8(v55) = 0;
        v56[8] = 0;
      }
      uint64_t v57 = v10;
      sub_1CC449D74((uint64_t)&v48, (uint64_t)&v55, (uint64_t)&v39);
      if (!v41)
      {
        if (v52 >= (unint64_t)HIDWORD(v52)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)&v51[8 * v52] = v7;
        LODWORD(v52) = v52 + 1;
      }
    }
    else
    {
      if (v48 <= 1 && HIDWORD(v48) == 0) {
        goto LABEL_31;
      }
      if (v48)
      {
        uint64_t v13 = (void **)&v51;
        uint64_t v12 = &v49;
        do
        {
LABEL_21:
          *uint64_t v12 = 0;
          *((unsigned char *)v12 + 8) = 0;
          *(uint64_t *)((char *)v12 + 9) = v55;
          v12[2] = *(void *)((char *)&v55 + 7);
          *((unsigned char *)v12 + 24) = 0;
          *(_DWORD *)((char *)v12 + 25) = v39;
          *((_DWORD *)v12 + 7) = *(_DWORD *)((char *)&v39 + 3);
          v12[4] = 0;
          v12 += 5;
        }
        while (v12 != (uint64_t *)v13);
        unsigned int v14 = v48 & 1;
        goto LABEL_23;
      }
      if (((2 * v48) & 0xFFFFFFFC) >= v50[0])
      {
        if (v50[0])
        {
LABEL_20:
          uint64_t v12 = (uint64_t *)v49;
          uint64_t v13 = (void **)(v49 + 40 * v50[0]);
          goto LABEL_21;
        }
        unsigned int v14 = 0;
LABEL_23:
        unint64_t v48 = (void *)v14;
        goto LABEL_31;
      }
      if (v50[0] <= 0x40u) {
        goto LABEL_20;
      }
      sub_1CD571DA8((uint64_t)&v48);
    }
LABEL_31:
    uint64_t v6 = *(llvm **)v6;
  }
  while (v6 != v5);
  if (v52) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
LABEL_40:
  if ((v48 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v49, 8);
  }
  if (v51 != v53) {
    free(v51);
  }
  unint64_t v48 = v50;
  uint64_t v49 = 0x800000000;
  v44[0] = 0;
  v44[1] = 0;
  unsigned int v45 = 0;
  int v18 = (llvm *)*((void *)this + 6);
  if (v18 != v5)
  {
    do
    {
      if (v18) {
        uint64_t v19 = (uint64_t)v18 - 24;
      }
      else {
        uint64_t v19 = 0;
      }
      BOOL v20 = sub_1CC27FAEC(v19);
      if (!v20) {
        uint64_t v19 = 0;
      }
      if (v18 && v20)
      {
        uint64_t v21 = *(void *)(v19 + 48);
        if (*(_DWORD *)(v21 + 8) == 2) {
          uint64_t v22 = *(void *)(v21 - 8);
        }
        else {
          uint64_t v22 = 0;
        }
        uint64_t v39 = *(void *)(*(void *)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF) + 32) + 24);
        char v40 = 0;
        char v42 = 0;
        uint64_t v43 = v22;
        uint64_t v51 = 0;
        uint64_t v23 = v44[0];
        unsigned int v24 = v45;
        int v25 = sub_1CD12C3C8(v44[0], v45, &v39, (uint64_t *)&v51);
        uint64_t v26 = v51;
        llvm::DbgVariableIntrinsic::location_ops(v19, &v51);
        *(void *)&long long v55 = v56;
        *((void *)&v55 + 1) = 0x400000000;
        uint64_t v46 = v52;
        int v47 = v51;
        sub_1CD7E93F4((uint64_t)&v55, (unint64_t *)&v47, &v46);
        int v27 = DWORD2(v55);
        if (v25
          && v26 != (void *)(v23 + 96 * v24)
          && *((_DWORD *)v26 + 12) == DWORD2(v55)
          && !memcmp(*((const void **)v26 + 5), (const void *)v55, 8 * DWORD2(v55))
          && *((void *)v26 + 11) == *(void *)(*(void *)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF) + 64)
                                                + 24))
        {
          if (v49 >= (unint64_t)HIDWORD(v49)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v48 + v49) = v19;
          LODWORD(v49) = v49 + 1;
        }
        else
        {
          uint64_t v28 = *(void *)(*(void *)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF) + 64) + 24);
          uint64_t v51 = v53;
          uint64_t v52 = 0x400000000;
          if (v27) {
            sub_1CBB08064((uint64_t)&v51, (uint64_t)&v55);
          }
          uint64_t v54 = v28;
          uint64_t v29 = sub_1CD876784((uint64_t)v44, (uint64_t)&v39);
          uint64_t v30 = (void **)(v29 + 40);
          uint64_t v31 = v51;
          if ((char **)(v29 + 40) != &v51)
          {
            if (v51 == v53)
            {
              int v32 = v52;
              uint64_t v33 = *(unsigned int *)(v29 + 48);
              if (v33 >= v52)
              {
                if (v52) {
                  memmove(*v30, v53, 8 * v52);
                }
              }
              else
              {
                if (*(_DWORD *)(v29 + 52) < v52)
                {
                  *(_DWORD *)(v29 + 48) = 0;
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                if (v33) {
                  memmove(*v30, v53, 8 * v33);
                }
                else {
                  uint64_t v33 = 0;
                }
                if (v33 != v52) {
                  memcpy((char *)*v30 + 8 * v33, &v51[8 * v33], 8 * v52 - 8 * v33);
                }
              }
              *(_DWORD *)(v29 + 48) = v32;
            }
            else
            {
              if (*(void *)(v29 + 40) != v29 + 56)
              {
                free(*(void **)(v29 + 40));
                uint64_t v31 = v51;
              }
              *(void *)(v29 + 40) = v31;
              *(void *)(v29 + 48) = v52;
              uint64_t v51 = v53;
              HIDWORD(v52) = 0;
            }
            LODWORD(v52) = 0;
            uint64_t v31 = v51;
          }
          *(void *)(v29 + 88) = v54;
          if (v31 != v53) {
            free(v31);
          }
        }
        if ((unsigned char *)v55 != v56) {
          free((void *)v55);
        }
      }
      int v18 = (llvm *)*((void *)v18 + 1);
    }
    while (v18 != v5);
    if (v49) {
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
  }
  uint64_t v34 = v44[0];
  if (v45)
  {
    uint64_t v35 = v44[0] + 56;
    uint64_t v36 = 96 * v45;
    do
    {
      if (*(void *)(v35 - 56) || *(unsigned char *)(v35 - 32) && *(_OWORD *)(v35 - 48) != 0 || *(void *)(v35 - 24))
      {
        uint64_t v37 = *(void **)(v35 - 16);
        if ((void *)v35 != v37) {
          free(v37);
        }
      }
      v35 += 96;
      v36 -= 96;
    }
    while (v36);
  }
  MEMORY[0x1D25D9CD0](v34, 8);
  if (v48 != v50) {
    free(v48);
  }
  return 0;
}

void llvm::ReplaceInstWithValue(int a1, void *a2, llvm::Value *a3)
{
  if (*a2) {
    uint64_t v4 = (llvm::ValueAsMetadata *)(*a2 - 24);
  }
  else {
    uint64_t v4 = 0;
  }
  llvm::Value::doRAUW(v4, a3, (llvm::Value *)1);
  if ((*((unsigned char *)v4 + 23) & 0x10) != 0 && (*((unsigned char *)a3 + 23) & 0x10) == 0) {
    llvm::Value::takeName((int32x2_t ****)a3, v4);
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
}

void llvm::ReplaceInstWithInst(uint64_t a1, uint64_t **a2, llvm::Value *a3)
{
  uint64_t v6 = (unsigned __int8 **)((char *)a3 + 48);
  if (!*((void *)a3 + 6))
  {
    if (*a2) {
      uint64_t v7 = (uint64_t)(*a2 - 3);
    }
    else {
      uint64_t v7 = 0;
    }
    BOOL v8 = *(unsigned __int8 **)(v7 + 48);
    unsigned int v14 = v8;
    if (v8) {
      llvm::MetadataTracking::track((uint64_t)&v14, v8, 2);
    }
    if (&v14 == v6)
    {
      if (v14) {
        llvm::MetadataTracking::untrack((uint64_t)&v14, v14);
      }
    }
    else
    {
      if (*v6) {
        llvm::MetadataTracking::untrack((uint64_t)v6, *v6);
      }
      uint64_t v9 = v14;
      *uint64_t v6 = v14;
      if (v9)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v14, v9, (uint64_t)v6);
        unsigned int v14 = 0;
      }
    }
  }
  uint64_t v10 = *a2;
  *((void *)a3 + 5) = a1 - 40;
  *(_WORD *)(a1 - 22) &= ~0x8000u;
  if ((*((unsigned char *)a3 + 23) & 0x10) != 0)
  {
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = *(llvm::ValueSymbolTable **)(v12 + 104);
      if (v13) {
        llvm::ValueSymbolTable::reinsertValue(v13, a3);
      }
    }
  }
  uint64_t v11 = *v10;
  *((void *)a3 + 4) = v10;
  *((void *)a3 + 3) = v11;
  *(void *)(v11 + 8) = (char *)a3 + 24;
  *uint64_t v10 = (uint64_t)a3 + 24;
  llvm::ReplaceInstWithValue(a1, a2, a3);
}

uint64_t llvm::IsBlockFollowedByDeoptOrUnreachable(llvm *this, const llvm::BasicBlock *a2)
{
  uint64_t UniqueSuccessor = (uint64_t)this;
  uint64_t v21 = v25;
  uint64_t v22 = v25;
  uint64_t v23 = 8;
  int v24 = 0;
  if (!this) {
    return UniqueSuccessor;
  }
  unsigned int v3 = 0;
  while (1)
  {
    if (v3 >= dword_1EBD0C298)
    {
LABEL_56:
      uint64_t UniqueSuccessor = 0;
      goto LABEL_52;
    }
    uint64_t v4 = (char *)v22;
    uint64_t v5 = HIDWORD(v23);
    if (v22 == v21)
    {
      if (HIDWORD(v23))
      {
        uint64_t v6 = 0;
        uint64_t v7 = 0;
        while (1)
        {
          uint64_t v8 = *(void *)((char *)v22 + v6);
          if (v8 == UniqueSuccessor) {
            goto LABEL_44;
          }
          if (v8 == -2) {
            uint64_t v7 = (uint64_t *)((char *)v22 + v6);
          }
          v6 += 8;
          if (8 * HIDWORD(v23) == v6)
          {
            if (!v7) {
              break;
            }
            *uint64_t v7 = UniqueSuccessor;
            --v24;
            goto LABEL_14;
          }
        }
      }
      unsigned int v9 = v23;
      if (HIDWORD(v23) < v23)
      {
        ++HIDWORD(v23);
        *((void *)v22 + v5) = UniqueSuccessor;
        goto LABEL_14;
      }
    }
    else
    {
      unsigned int v9 = v23;
    }
    if (3 * v9 <= 4 * (HIDWORD(v23) - v24))
    {
      if (v9 >= 0x40) {
        v9 *= 2;
      }
      else {
        unsigned int v9 = 128;
      }
LABEL_50:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v21, v9);
      unsigned int v9 = v23;
      uint64_t v4 = (char *)v22;
      goto LABEL_26;
    }
    if (v9 - HIDWORD(v23) < v9 >> 3) {
      goto LABEL_50;
    }
LABEL_26:
    unsigned int v12 = v9 - 1;
    unsigned int v13 = (v9 - 1) & ((UniqueSuccessor >> 4) ^ (UniqueSuccessor >> 9));
    unsigned int v14 = (uint64_t *)&v4[8 * v13];
    uint64_t v15 = *v14;
    if (*v14 != -1)
    {
      uint64_t v16 = 0;
      int v17 = 1;
      while (v15 != UniqueSuccessor)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -2;
        }
        if (v18) {
          uint64_t v16 = v14;
        }
        unsigned int v19 = v13 + v17++;
        unsigned int v13 = v19 & v12;
        unsigned int v14 = (uint64_t *)&v4[8 * (v19 & v12)];
        uint64_t v15 = *v14;
        if (*v14 == -1) {
          goto LABEL_38;
        }
      }
LABEL_44:
      uint64_t UniqueSuccessor = 0;
      goto LABEL_53;
    }
    uint64_t v16 = 0;
LABEL_38:
    if (v16) {
      unsigned int v14 = v16;
    }
    if (*v14 == UniqueSuccessor) {
      goto LABEL_56;
    }
    if (*v14 == -2) {
      --v24;
    }
    else {
      ++HIDWORD(v23);
    }
    *unsigned int v14 = UniqueSuccessor;
LABEL_14:
    if (llvm::BasicBlock::getTerminatingDeoptimizeCall((llvm::BasicBlock *)UniqueSuccessor)) {
      break;
    }
    uint64_t v10 = *(void *)(UniqueSuccessor + 40);
    if (v10) {
      uint64_t v11 = v10 - 24;
    }
    else {
      uint64_t v11 = 0;
    }
    if (*(unsigned __int8 *)(v11 + 16) - 29 >= 0xB) {
      uint64_t v11 = 0;
    }
    if (*(unsigned char *)(v11 + 16) == 35) {
      break;
    }
    ++v3;
    uint64_t UniqueSuccessor = llvm::BasicBlock::getUniqueSuccessor((llvm::BasicBlock *)UniqueSuccessor);
    if (!UniqueSuccessor) {
      goto LABEL_52;
    }
  }
  uint64_t UniqueSuccessor = 1;
LABEL_52:
  uint64_t v4 = (char *)v22;
LABEL_53:
  if (v4 != v21) {
    free(v4);
  }
  return UniqueSuccessor;
}

uint64_t llvm::ehAwareSplitEdge(llvm *a1, llvm::BasicBlock *a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::MemorySSAUpdater *a6, const llvm::Twine *a7)
{
  v50[4] = *MEMORY[0x1E4F143B8];
  for (uint64_t i = (void *)*((void *)a2 + 6); i != (void *)((char *)a2 + 40); uint64_t i = (void *)i[1])
  {
    uint64_t v8 = i - 3;
    if (i) {
      unsigned int v9 = i - 3;
    }
    else {
      unsigned int v9 = 0;
    }
    if (*((unsigned char *)v9 + 16) != 83) {
      goto LABEL_9;
    }
  }
  uint64_t v8 = 0;
LABEL_9:
  if (!a4)
  {
    unsigned int v10 = *((unsigned __int8 *)v8 + 16) - 38;
    BOOL v27 = v10 > 0x38;
    uint64_t v11 = (1 << v10) & 0x100060000000001;
    if (v27 || v11 == 0)
    {
      uint64_t v46 = *(llvm::BasicBlock **)a5;
      int v47 = *(llvm::DominatorTree **)(a5 + 16);
      unint64_t v48 = *(llvm::LoopInfo **)(a5 + 24);
      return llvm::SplitEdge(a1, a2, v46, v47, v48, a6, a7);
    }
  }
  unsigned int v13 = *(uint64_t **)(a5 + 16);
  int v49 = 0;
  if (*(unsigned char *)(a5 + 36)) {
    BOOL v14 = v13 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14) {
    goto LABEL_65;
  }
  int v15 = *((_DWORD *)v13 + 4);
  if (!v15) {
    goto LABEL_65;
  }
  uint64_t v16 = *v13;
  unsigned int v17 = v15 - 1;
  uint64_t v18 = (v15 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  unsigned int v19 = *(llvm **)(*v13 + 16 * v18);
  if (v19 != a1)
  {
    int v20 = 1;
    while (v19 != (llvm *)-4096)
    {
      int v21 = v18 + v20++;
      uint64_t v18 = v21 & v17;
      unsigned int v19 = *(llvm **)(v16 + 16 * v18);
      if (v19 == a1) {
        goto LABEL_23;
      }
    }
LABEL_65:
    operator new();
  }
LABEL_23:
  uint64_t v22 = *(void *)(v16 + 16 * v18 + 8);
  if (!v22) {
    goto LABEL_65;
  }
  uint64_t v23 = *((void *)a2 + 1);
  if (!v23) {
    goto LABEL_65;
  }
  while (1)
  {
    uint64_t v24 = *(void *)(v23 + 24);
    unsigned int v25 = *(unsigned __int8 *)(v24 + 16);
    BOOL v26 = v24 && v25 >= 0x1C;
    BOOL v27 = !v26 || v25 - 29 > 0xA;
    if (!v27) {
      break;
    }
    uint64_t v23 = *(void *)(v23 + 8);
    if (!v23) {
      goto LABEL_65;
    }
  }
  unsigned int v28 = 0;
LABEL_35:
  uint64_t v29 = *(llvm **)(v24 + 40);
  if (v29 == a1) {
    goto LABEL_46;
  }
  int v30 = *((_DWORD *)v13 + 4);
  if (v30)
  {
    uint64_t v31 = *v13;
    unsigned int v32 = v30 - 1;
    uint64_t v33 = (v30 - 1) & ((v29 >> 4) ^ (v29 >> 9));
    uint64_t v34 = *(llvm **)(*v13 + 16 * v33);
    if (v29 == v34)
    {
LABEL_41:
      uint64_t v37 = *(void *)(v31 + 16 * v33 + 8);
      goto LABEL_43;
    }
    int v35 = 1;
    while (v34 != (llvm *)-4096)
    {
      int v36 = v33 + v35++;
      uint64_t v33 = v36 & v32;
      uint64_t v34 = *(llvm **)(v31 + 16 * v33);
      if (v29 == v34) {
        goto LABEL_41;
      }
    }
  }
  uint64_t v37 = 0;
LABEL_43:
  if (v37 != v22) {
    goto LABEL_65;
  }
  if (v28 >= 4) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v50[v28] = v29;
  unsigned int v28 = ++v49;
LABEL_46:
  while (1)
  {
    uint64_t v23 = *(void *)(v23 + 8);
    if (!v23) {
      break;
    }
    uint64_t v24 = *(void *)(v23 + 24);
    unsigned int v38 = *(unsigned __int8 *)(v24 + 16);
    if (v24) {
      BOOL v39 = v38 >= 0x1C;
    }
    else {
      BOOL v39 = 0;
    }
    if (v39 && v38 - 29 < 0xB) {
      goto LABEL_35;
    }
  }
  if (!v28) {
    goto LABEL_65;
  }
  char v41 = v50;
  uint64_t v42 = 8 * v28;
  while (1)
  {
    uint64_t v43 = *(void *)(*v41 + 40);
    if (v43) {
      uint64_t v44 = v43 - 24;
    }
    else {
      uint64_t v44 = 0;
    }
    if (*(unsigned __int8 *)(v44 + 16) - 29 >= 0xB) {
      uint64_t v44 = 0;
    }
    if (*(unsigned char *)(v44 + 16) == 32) {
      return 0;
    }
    ++v41;
    v42 -= 8;
    if (!v42) {
      goto LABEL_65;
    }
  }
}

void llvm::SplitBlock(llvm *this, llvm::BasicBlock *a2, llvm::Instruction *a3, llvm::DominatorTree *a4, llvm::LoopInfo *a5, llvm::MemorySSAUpdater *a6, const llvm::Twine *a7)
{
}

void llvm::createPHIsForSplitLoopExit(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a4 + 40) != a4 + 40)
  {
    uint64_t v4 = *(void *)(a4 + 48);
    uint64_t v5 = (uint64_t *)(v4 - 24);
    uint64_t v6 = v4 ? v4 - 24 : 0;
    if (v4 && *(unsigned char *)(v6 + 16) == 83)
    {
      uint64_t v7 = a2;
      uint64_t v82 = (void *)(a3 + 40);
      uint64_t v85 = a3;
      int v86 = (uint64_t *)(a3 + 48);
      uint64_t v8 = &a1[a2];
      BOOL v87 = v8;
      while (1)
      {
        int v9 = *((_DWORD *)v5 + 5);
        uint64_t v10 = v9 & 0x7FFFFFF;
        if ((v9 & 0x7FFFFFF) != 0)
        {
          uint64_t v11 = 0;
          while (1)
          {
            unsigned int v12 = &v5[-4 * v10];
            if ((v9 & 0x40000000) != 0) {
              unsigned int v12 = (uint64_t *)*(v5 - 1);
            }
            if (v12[4 * *((unsigned int *)v5 + 15) + v11] == a3) {
              break;
            }
            if (v10 == ++v11) {
              goto LABEL_14;
            }
          }
        }
        else
        {
LABEL_14:
          LODWORD(v11) = -1;
        }
        if ((v9 & 0x40000000) != 0) {
          unsigned int v13 = (uint64_t *)*(v5 - 1);
        }
        else {
          unsigned int v13 = &v5[-4 * v10];
        }
        uint64_t v14 = v11;
        uint64_t v15 = v13[4 * v11];
        if (v15 && *(unsigned char *)(v15 + 16) == 83 && *(void *)(v15 + 40) == a3) {
          goto LABEL_84;
        }
        uint64_t v16 = *v5;
        v93[0] = "split";
        unsigned int v17 = v86;
        __int16 v94 = 259;
        do
        {
          uint64_t v18 = *v17;
          uint64_t v19 = v18 - 24;
          if (!v18) {
            uint64_t v19 = 0;
          }
          int v20 = *(unsigned __int8 *)(v19 + 16);
          unsigned int v17 = (uint64_t *)(v18 + 8);
        }
        while (v20 == 83);
        uint64_t v89 = v14;
        uint64_t v90 = v5;
        if (v20 == 94)
        {
          if (*v86) {
            uint64_t v21 = *v86 - 24;
          }
          else {
            uint64_t v21 = 0;
          }
        }
        else
        {
          uint64_t v22 = (void *)*v82;
          if ((void *)*v82 == v82)
          {
            uint64_t v21 = 0;
          }
          else
          {
            uint64_t v23 = (uint64_t)(v22 - 3);
            if (v22) {
              uint64_t v24 = v22 - 3;
            }
            else {
              uint64_t v24 = 0;
            }
            if (*((unsigned __int8 *)v24 + 16) - 29 >= 0xB) {
              uint64_t v21 = 0;
            }
            else {
              uint64_t v21 = v23;
            }
          }
        }
        unsigned int v25 = operator new(0x48uLL);
        BOOL v26 = v25;
        v25[1] = v16;
        BOOL v27 = (llvm::Value *)(v25 + 1);
        *unsigned int v25 = 0;
        v25[2] = 0;
        unsigned int v88 = v25 + 2;
        v25[3] = 0x4000000000000053;
        *((_OWORD *)v25 + 2) = 0u;
        unsigned int v28 = (char *)(v25 + 4);
        *((_OWORD *)v25 + 3) = 0u;
        *((_DWORD *)v25 + 16) = 0;
        if (v21)
        {
          uint64_t v64 = *(void *)(v21 + 40);
          v25[6] = v64;
          *(_WORD *)(v64 + 18) &= ~0x8000u;
          if ((*((unsigned char *)v25 + 31) & 0x10) != 0)
          {
            uint64_t v74 = *(void *)(v64 + 56);
            if (v74)
            {
              int v75 = *(llvm::ValueSymbolTable **)(v74 + 104);
              if (v75) {
                llvm::ValueSymbolTable::reinsertValue(v75, v27);
              }
            }
          }
          uint64_t v65 = *(void *)(v21 + 24);
          v26[4] = v65;
          v26[5] = v21 + 24;
          *(void *)(v65 + 8) = v28;
          *(void *)(v21 + 24) = v28;
        }
        *((_DWORD *)v26 + 17) = v7;
        llvm::Value::setNameImpl(v27, v93);
        if (!*((unsigned char *)v26 + 24)) {
          break;
        }
LABEL_39:
        uint64_t v29 = *((unsigned int *)v26 + 17);
        int v30 = operator new(40 * v29);
        void *v26 = v30;
        if (v29)
        {
          uint64_t v31 = &v30[4 * v29];
          do
          {
            void *v30 = 0;
            v30[1] = 0;
            void v30[2] = 0;
            void v30[3] = v27;
            v30 += 4;
          }
          while (v30 != v31);
        }
        if (v7)
        {
          unsigned int v32 = (char **)(v15 + 8);
          LODWORD(v33) = *((_DWORD *)v26 + 17);
          uint64_t v34 = a1;
          uint64_t v91 = v27;
          do
          {
            uint64_t v35 = *v34;
            int v36 = *((_DWORD *)v26 + 7);
            if ((v36 & 0x7FFFFFF) == v33)
            {
              unsigned int v47 = v33 + (v33 >> 1);
              if (v47 <= 2) {
                uint64_t v48 = 2;
              }
              else {
                uint64_t v48 = v47;
              }
              *((_DWORD *)v26 + 17) = v48;
              if ((v36 & 0x40000000) != 0) {
                int v49 = (uint64_t *)*v26;
              }
              else {
                int v49 = (uint64_t *)((char *)v27 - 32 * v33);
              }
              __p = v49;
              unint64_t v50 = operator new(40 * v48);
              void *v26 = v50;
              uint64_t v51 = v50;
              do
              {
                *uint64_t v51 = 0;
                v51[1] = 0;
                v51[2] = 0;
                v51[3] = v27;
                v51 += 4;
              }
              while (v51 != &v50[4 * v48]);
              int v52 = *((_DWORD *)v26 + 7);
              if ((v52 & 0x40000000) != 0) {
                uint64_t v53 = (uint64_t)v50;
              }
              else {
                uint64_t v53 = (uint64_t)v27 - 32 * (v52 & 0x7FFFFFF);
              }
              sub_1CC5E4108((uint64_t)v93, __p, &__p[4 * v33], v53);
              if (v33)
              {
                memmove((void *)(v53 + 32 * v48), &__p[4 * v33], 8 * v33);
                uint64_t v54 = 4 * v33;
                do
                {
                  long long v55 = &__p[v54];
                  if (__p[v54 - 4])
                  {
                    *(void *)*(v55 - 2) = *(v55 - 3);
                    uint64_t v56 = *(v55 - 3);
                    if (v56) {
                      *(void *)(v56 + 16) = *(v55 - 2);
                    }
                  }
                  v54 -= 4;
                }
                while (v54 * 8);
              }
              operator delete(__p);
              int v36 = *((_DWORD *)v26 + 7);
              uint64_t v8 = v87;
              BOOL v27 = v91;
            }
            uint64_t v37 = (v36 + 1) & 0x7FFFFFF;
            *((_DWORD *)v26 + 7) = v36 & 0xF8000000 | (v36 + 1) & 0x7FFFFFF;
            if ((v36 & 0x40000000) != 0) {
              unsigned int v38 = (char *)*v26;
            }
            else {
              unsigned int v38 = (char *)v27 - 32 * v37;
            }
            uint64_t v39 = (v37 - 1);
            char v40 = &v38[32 * v39];
            if (*(void *)v40)
            {
              **((void **)v40 + 2) = *((void *)v40 + 1);
              uint64_t v46 = *((void *)v40 + 1);
              if (v46) {
                *(void *)(v46 + 16) = *((void *)v40 + 2);
              }
            }
            *(void *)char v40 = v15;
            if (v15)
            {
              char v41 = *v32;
              uint64_t v42 = &v38[32 * v39];
              *((void *)v42 + 1) = *v32;
              if (v41) {
                *((void *)v41 + 2) = v42 + 8;
              }
              *((void *)v42 + 2) = v32;
              *unsigned int v32 = v40;
            }
            int v43 = *((_DWORD *)v26 + 7);
            uint64_t v44 = v43 & 0x7FFFFFF;
            if ((v43 & 0x40000000) != 0) {
              unsigned int v45 = (char *)*v26;
            }
            else {
              unsigned int v45 = (char *)v27 - 32 * v44;
            }
            uint64_t v33 = *((unsigned int *)v26 + 17);
            *(void *)&v45[32 * v33 + 8 * (v44 - 1)] = v35;
            ++v34;
          }
          while (v34 != v8);
        }
        uint64_t v5 = v90;
        int v57 = *((_DWORD *)v90 + 5);
        if ((v57 & 0x40000000) != 0) {
          uint64_t v58 = (uint64_t *)*(v90 - 1);
        }
        else {
          uint64_t v58 = &v90[-4 * (v57 & 0x7FFFFFF)];
        }
        a3 = v85;
        unsigned int v59 = &v58[4 * v89];
        if (*v59)
        {
          *(void *)v59[2] = v59[1];
          uint64_t v63 = v59[1];
          if (v63) {
            *(void *)(v63 + 16) = v59[2];
          }
        }
        uint64_t *v59 = (uint64_t)v27;
        uint64_t v60 = *v88;
        v59[1] = *v88;
        uint64_t v7 = a2;
        if (v60) {
          *(void *)(v60 + 16) = v59 + 1;
        }
        v58[4 * v89 + 2] = (uint64_t)v88;
        *unsigned int v88 = (uint64_t)v59;
LABEL_84:
        uint64_t v61 = v5[4];
        uint64_t v5 = (uint64_t *)(v61 - 24);
        if (v61) {
          uint64_t v62 = v61 - 24;
        }
        else {
          uint64_t v62 = 0;
        }
        if (!v61 || *(unsigned char *)(v62 + 16) != 83) {
          return;
        }
      }
      if ((*((unsigned char *)v26 + 31) & 0x10) == 0) {
        goto LABEL_112;
      }
      uint64_t v66 = ***(void ***)v27;
      uint64_t v67 = *(void *)(v66 + 152);
      uint64_t v68 = *(unsigned int *)(v66 + 168);
      if (v68)
      {
        LODWORD(v69) = (v68 - 1) & ((v27 >> 4) ^ (v27 >> 9));
        uint64_t v70 = (llvm::Value **)(v67 + 16 * v69);
        int v71 = *v70;
        if (*v70 == v27)
        {
LABEL_105:
          int v76 = v70[1];
          unint64_t v79 = *(void *)v76;
          int v77 = (char *)v76 + 16;
          unint64_t v78 = v79;
          if (v79 >= 5 && *(_DWORD *)v77 == *(_DWORD *)"llvm." && v77[4] == aLlvm_1[4])
          {
            *((_DWORD *)v26 + 10) |= 0x2000u;
            int v81 = llvm::Function::lookupIntrinsicID(v77, v78);
LABEL_113:
            *((_DWORD *)v26 + 11) = v81;
            goto LABEL_39;
          }
LABEL_112:
          int v81 = 0;
          *((_DWORD *)v26 + 10) &= ~0x2000u;
          goto LABEL_113;
        }
        int v72 = 1;
        while (v71 != (llvm::Value *)-4096)
        {
          int v73 = v69 + v72++;
          uint64_t v69 = v73 & (v68 - 1);
          int v71 = *(llvm::Value **)(v67 + 16 * v69);
          if (v71 == v27)
          {
            uint64_t v70 = (llvm::Value **)(v67 + 16 * v69);
            goto LABEL_105;
          }
        }
      }
      uint64_t v70 = (llvm::Value **)(v67 + 16 * v68);
      goto LABEL_105;
    }
  }
}

uint64_t llvm::SplitBlockPredecessors(uint64_t **a1, int a2, int a3, char *a4, int a5, int a6, int a7, char a8)
{
  return sub_1CD1271B8(a1, a2, a3, a4, 0, a5, a6, a7, a8);
}

{
  return sub_1CD1271B8(a1, a2, a3, a4, a5, 0, a6, a7, a8);
}

void sub_1CD126150(llvm *a1, llvm::BasicBlock *a2, llvm::Instruction *a3, uint64_t a4, llvm::DomTreeUpdater *a5, llvm::LoopInfo *a6, llvm::Twine *this, int a8)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (a8)
  {
    int v9 = &v33;
    uint64_t v33 = &v35;
    uint64_t v34 = 0x1000000000;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = a4;
    uint64_t v41 = 0;
    char v42 = 1;
    int v43 = v47;
    uint64_t v44 = v47;
    uint64_t v45 = 8;
    int v46 = 0;
    if (!a4) {
      int v9 = 0;
    }
    if (!a3) {
      a3 = (llvm::Instruction *)v9;
    }
    memset(&v47[64], 0, 24);
    __int16 v48 = 0;
    llvm::splitBlockBefore(a1, a2, a3, a5, a6, this, this);
  }
  for (uint64_t i = (uint64_t)a2 + 24; ; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v11 = i - 24;
    if (!i) {
      uint64_t v11 = 0;
    }
    unsigned int v12 = *(unsigned __int8 *)(v11 + 16) - 38;
    BOOL v13 = v12 > 0x38;
    uint64_t v14 = (1 << v12) & 0x100260000000001;
    if (v13 || v14 == 0) {
      break;
    }
  }
  uint64_t v16 = __p;
  llvm::Twine::str(this, __p);
  unsigned int v17 = (void *)(v32 & 0x7F);
  if (v32 < 0) {
    unsigned int v17 = __p[1];
  }
  if (v17)
  {
    char v18 = 1;
    char v19 = 4;
  }
  else
  {
    if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
    {
      uint64_t v20 = ***(void ***)a1;
      uint64_t v21 = *(void *)(v20 + 152);
      uint64_t v22 = *(unsigned int *)(v20 + 168);
      if (v22)
      {
        LODWORD(v23) = (v22 - 1) & ((a1 >> 4) ^ (a1 >> 9));
        uint64_t v24 = (llvm **)(v21 + 16 * v23);
        unsigned int v25 = *v24;
        if (*v24 != a1)
        {
          int v26 = 1;
          do
          {
            if (v25 == (llvm *)-4096) {
              goto LABEL_26;
            }
            int v27 = v23 + v26++;
            uint64_t v23 = v27 & (v22 - 1);
            unsigned int v25 = *(llvm **)(v21 + 16 * v23);
          }
          while (v25 != a1);
          uint64_t v24 = (llvm **)(v21 + 16 * v23);
        }
      }
      else
      {
LABEL_26:
        uint64_t v24 = (llvm **)(v21 + 16 * v22);
      }
      unsigned int v28 = v24[1];
      uint64_t v30 = *(void *)v28;
      uint64_t v16 = (void **)((char *)v28 + 16);
      uint64_t v29 = v30;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v16 = (void **)&byte_1CFBCE98E;
    }
    uint64_t v34 = v29;
    uint64_t v35 = ".split";
    char v18 = 3;
    char v19 = 5;
  }
  char v36 = v19;
  char v37 = v18;
  uint64_t v33 = v16;
  llvm::BasicBlock::splitBasicBlock((uint64_t)a1, i, (uint64_t)&v33, 0);
}

void llvm::SplitBlock(llvm *this, llvm::BasicBlock *a2, llvm::Instruction *a3, llvm::DomTreeUpdater *a4, llvm::LoopInfo *a5, llvm::MemorySSAUpdater *a6, const llvm::Twine *a7)
{
}

void llvm::splitBlockBefore(llvm *this, llvm::BasicBlock *a2, llvm::Instruction *a3, llvm::DomTreeUpdater *a4, llvm::LoopInfo *a5, llvm::MemorySSAUpdater *a6, const llvm::Twine *a7)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  for (uint64_t i = (char *)a2 + 24; ; uint64_t i = (char *)*((void *)i + 1))
  {
    int v9 = i - 24;
    if (!i) {
      int v9 = 0;
    }
    unsigned int v10 = v9[16] - 38;
    BOOL v11 = v10 > 0x38;
    uint64_t v12 = (1 << v10) & 0x100260000000001;
    if (v11 || v12 == 0) {
      break;
    }
  }
  uint64_t v14 = __p;
  llvm::Twine::str(a6, __p);
  uint64_t v15 = (void *)(v30 & 0x7F);
  if (v30 < 0) {
    uint64_t v15 = __p[1];
  }
  if (v15)
  {
    char v16 = 1;
    char v17 = 4;
  }
  else
  {
    if ((*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v18 = ***(void ***)this;
      uint64_t v19 = *(void *)(v18 + 152);
      uint64_t v20 = *(unsigned int *)(v18 + 168);
      if (v20)
      {
        LODWORD(v21) = (v20 - 1) & ((this >> 4) ^ (this >> 9));
        uint64_t v22 = v19 + 16 * v21;
        uint64_t v23 = *(llvm **)v22;
        if (*(llvm **)v22 != this)
        {
          int v24 = 1;
          do
          {
            if (v23 == (llvm *)-4096) {
              goto LABEL_20;
            }
            int v25 = v21 + v24++;
            uint64_t v21 = v25 & (v20 - 1);
            uint64_t v23 = *(llvm **)(v19 + 16 * v21);
          }
          while (v23 != this);
          uint64_t v22 = v19 + 16 * v21;
        }
      }
      else
      {
LABEL_20:
        uint64_t v22 = v19 + 16 * v20;
      }
      int v26 = *(void ***)(v22 + 8);
      unsigned int v28 = *v26;
      uint64_t v14 = v26 + 2;
      int v27 = v28;
    }
    else
    {
      int v27 = 0;
      uint64_t v14 = (void **)&byte_1CFBCE98E;
    }
    v31[1] = v27;
    v31[2] = ".split";
    char v16 = 3;
    char v17 = 5;
  }
  char v32 = v17;
  char v33 = v16;
  v31[0] = v14;
  llvm::BasicBlock::splitBasicBlock((uint64_t)this, (uint64_t)i, (uint64_t)v31, 1);
}

uint64_t sub_1CD1271B8(uint64_t **a1, int a2, int a3, char *__s, int a5, int a6, int a7, int a8, char a9)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  BOOL v11 = (uint64_t *)(a1 + 6);
  do
  {
    uint64_t v12 = *v11;
    uint64_t v13 = v12 - 24;
    if (!v12) {
      uint64_t v13 = 0;
    }
    int v14 = *(unsigned __int8 *)(v13 + 16);
    BOOL v11 = (uint64_t *)(v12 + 8);
  }
  while (v14 == 83);
  if ((v14 - 38) > 0x2A || ((1 << (v14 - 38)) & 0x60000000001) == 0)
  {
    char v16 = (uint64_t *)(a1 + 6);
    do
    {
      uint64_t v17 = *v16;
      uint64_t v18 = v17 - 24;
      if (!v17) {
        uint64_t v18 = 0;
      }
      int v19 = *(unsigned __int8 *)(v18 + 16);
      char v16 = (uint64_t *)(v17 + 8);
    }
    while (v19 == 83);
    if (v19 != 94)
    {
      uint64_t v23 = **a1;
      if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
      {
        uint64_t v24 = *(void *)(*(void *)v23 + 152);
        uint64_t v25 = *(unsigned int *)(*(void *)v23 + 168);
        if (v25)
        {
          LODWORD(v26) = (v25 - 1) & ((a1 >> 4) ^ (a1 >> 9));
          int v27 = (uint64_t ***)(v24 + 16 * v26);
          unsigned int v28 = *v27;
          if (*v27 != a1)
          {
            int v29 = 1;
            do
            {
              if (v28 == (uint64_t **)-4096) {
                goto LABEL_33;
              }
              int v30 = v26 + v29++;
              uint64_t v26 = v30 & (v25 - 1);
              unsigned int v28 = *(uint64_t ***)(v24 + 16 * v26);
            }
            while (v28 != a1);
            int v27 = (uint64_t ***)(v24 + 16 * v26);
          }
        }
        else
        {
LABEL_33:
          int v27 = (uint64_t ***)(v24 + 16 * v25);
        }
        uint64_t v35 = v27[1];
        uint64_t v38 = (uint64_t)*v35;
        char v36 = (char *)(v35 + 2);
        uint64_t v37 = v38;
      }
      else
      {
        uint64_t v37 = 0;
        char v36 = &byte_1CFBCE98E;
      }
      __int16 v46 = 773;
      int v43 = (char **)v36;
      uint64_t v44 = v37;
      uint64_t v45 = __s;
      operator new();
    }
    int v43 = &v45;
    uint64_t v44 = 0x200000000;
    size_t v20 = strlen(__s);
    if (v20 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    std::string::size_type v21 = v20;
    if (v20 >= 0x17)
    {
      uint64_t v31 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17) {
        uint64_t v31 = v20 | 7;
      }
      uint64_t v32 = v31 + 1;
      p_dst = (std::string *)operator new(v31 + 1);
      __dst.__r_.__value_.__l.__size_ = v21;
      __dst.__r_.__value_.__r.__words[2] = v32 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v20;
      p_dst = &__dst;
      if (!v20)
      {
LABEL_30:
        p_dst->__r_.__value_.__s.__data_[v21] = 0;
        char v33 = std::string::append(&__dst, ".split-lp");
        std::string::size_type v34 = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        std::string::size_type v42 = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        sub_1CD127BEC(a1);
      }
    }
    memcpy(p_dst, __s, v21);
    goto LABEL_30;
  }
  return 0;
}

void sub_1CD127BEC(uint64_t **a1)
{
  uint64_t v1 = **a1;
  if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
  {
    uint64_t v2 = *(void *)(*(void *)v1 + 152);
    int v3 = *(_DWORD *)(*(void *)v1 + 168);
    if (v3)
    {
      unsigned int v4 = (v3 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      uint64_t v5 = *(uint64_t ***)(v2 + 16 * v4);
      if (v5 != a1)
      {
        int v6 = 1;
        do
        {
          if (v5 == (uint64_t **)-4096) {
            break;
          }
          unsigned int v7 = v4 + v6++;
          unsigned int v4 = v7 & (v3 - 1);
          uint64_t v5 = *(uint64_t ***)(v2 + 16 * v4);
        }
        while (v5 != a1);
      }
    }
  }
  operator new();
}

void llvm::FoldReturnIntoUncondBranch(llvm *this, llvm::ReturnInst *a2, llvm::BasicBlock *a3, llvm::BasicBlock *a4, llvm::DomTreeUpdater *a5)
{
  unsigned int v7 = (uint64_t *)((char *)a3 + 40);
  uint64_t v8 = llvm::Instruction::clone(this);
  v8[5] = (uint64_t)a3;
  *((_WORD *)a3 + 9) &= ~0x8000u;
  if ((*((unsigned char *)v8 + 23) & 0x10) != 0)
  {
    uint64_t v53 = *((void *)a3 + 7);
    if (v53)
    {
      uint64_t v54 = *(llvm::ValueSymbolTable **)(v53 + 104);
      if (v54) {
        llvm::ValueSymbolTable::reinsertValue(v54, (llvm::Value *)v8);
      }
    }
  }
  uint64_t v9 = *v7;
  v8[3] = *v7;
  v8[4] = (uint64_t)v7;
  unsigned int v10 = v8 + 3;
  *(void *)(v9 + 8) = v8 + 3;
  *unsigned int v7 = (uint64_t)(v8 + 3);
  int v11 = *((_DWORD *)v8 + 5);
  if ((v11 & 0x40000000) != 0)
  {
    uint64_t v13 = (uint64_t *)*(v8 - 1);
    uint64_t v12 = v11 & 0x7FFFFFF;
    if (!v12) {
      goto LABEL_75;
    }
  }
  else
  {
    uint64_t v12 = v11 & 0x7FFFFFF;
    uint64_t v13 = &v8[-4 * v12];
    if (!v12)
    {
LABEL_75:
      llvm::BasicBlock::removePredecessor(a2, a3, 0);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
  }
  uint64_t v14 = 32 * v12;
  uint64_t v15 = (uint64_t **)(v13 + 1);
  while (1)
  {
    char v16 = 0;
    uint64_t v18 = (uint64_t *)(v15 - 1);
    uint64_t v17 = (unsigned __int8 *)*(v15 - 1);
    int v19 = v17[16];
    if (v17 && v19 == 77)
    {
      size_t v20 = (unsigned __int8 *)*((void *)v17 - 4);
      char v16 = (uint64_t **)llvm::Instruction::clone((llvm::Instruction *)v17);
      v16[5] = (uint64_t *)a3;
      *((_WORD *)a3 + 9) &= ~0x8000u;
      if ((*((unsigned char *)v16 + 23) & 0x10) != 0)
      {
        uint64_t v44 = *((void *)a3 + 7);
        if (v44)
        {
          uint64_t v45 = *(llvm::ValueSymbolTable **)(v44 + 104);
          if (v45) {
            llvm::ValueSymbolTable::reinsertValue(v45, (llvm::Value *)v16);
          }
        }
      }
      std::string::size_type v21 = (uint64_t *)*v10;
      v16[3] = (uint64_t *)*v10;
      v16[4] = v10;
      v21[1] = (uint64_t)(v16 + 3);
      *unsigned int v10 = (uint64_t)(v16 + 3);
      if (*v18)
      {
        *v15[1] = (uint64_t)*v15;
        if (*v15) {
          (*v15)[2] = (uint64_t)v15[1];
        }
      }
      *(v15 - 1) = (uint64_t *)v16;
      uint64_t v22 = v16 + 1;
      uint64_t v23 = v16[1];
      void *v15 = v23;
      if (v23) {
        v23[2] = (uint64_t)v15;
      }
      v15[1] = (uint64_t *)v22;
      *uint64_t v22 = v18;
      int v19 = v20[16];
      uint64_t v17 = v20;
    }
    if (v19 == 92)
    {
      uint64_t v24 = *((void *)v17 - 4);
      uint64_t v25 = llvm::Instruction::clone((llvm::Instruction *)v17);
      uint64_t v26 = (uint64_t **)v25;
      if (v16)
      {
        int v27 = *((_DWORD *)v16 + 5);
        if ((v27 & 0x40000000) != 0) {
          unsigned int v28 = (uint64_t **)*(v16 - 1);
        }
        else {
          unsigned int v28 = &v16[-4 * (v27 & 0x7FFFFFF)];
        }
        if (*v28)
        {
          *v28[2] = (uint64_t)v28[1];
          int v29 = v28[1];
          if (v29) {
            v29[2] = (uint64_t)v28[2];
          }
        }
        *unsigned int v28 = v25;
        if (v25)
        {
          int v30 = v25 + 1;
          uint64_t v31 = (uint64_t *)v25[1];
          v28[1] = v31;
          if (v31) {
            v31[2] = (uint64_t)(v28 + 1);
          }
          v28[2] = v30;
          uint64_t *v30 = (uint64_t)v28;
        }
        v25[5] = a3;
        *((_WORD *)a3 + 9) &= ~0x8000u;
        if ((*((unsigned char *)v25 + 23) & 0x10) != 0)
        {
          uint64_t v49 = *((void *)a3 + 7);
          if (v49)
          {
            unint64_t v50 = *(llvm::ValueSymbolTable **)(v49 + 104);
            if (v50) {
              llvm::ValueSymbolTable::reinsertValue(v50, (llvm::Value *)v26);
            }
          }
        }
        uint64_t v32 = v16[3];
        v26[3] = v32;
        v26[4] = (uint64_t *)(v16 + 3);
        v32[1] = (uint64_t)(v26 + 3);
        v16[3] = (uint64_t *)(v26 + 3);
        if (!v24) {
          goto LABEL_54;
        }
      }
      else
      {
        v25[5] = a3;
        *((_WORD *)a3 + 9) &= ~0x8000u;
        if ((*((unsigned char *)v25 + 23) & 0x10) != 0)
        {
          uint64_t v51 = *((void *)a3 + 7);
          if (v51)
          {
            int v52 = *(llvm::ValueSymbolTable **)(v51 + 104);
            if (v52) {
              llvm::ValueSymbolTable::reinsertValue(v52, (llvm::Value *)v26);
            }
          }
        }
        uint64_t v33 = *v10;
        v26[3] = (uint64_t *)*v10;
        v26[4] = v10;
        *(void *)(v33 + 8) = v26 + 3;
        *unsigned int v10 = (uint64_t)(v26 + 3);
        if (*v18)
        {
          *v15[1] = (uint64_t)*v15;
          if (*v15) {
            (*v15)[2] = (uint64_t)v15[1];
          }
        }
        *(v15 - 1) = (uint64_t *)v26;
        std::string::size_type v34 = v26 + 1;
        uint64_t v35 = v26[1];
        void *v15 = v35;
        if (v35) {
          v35[2] = (uint64_t)v15;
        }
        v15[1] = (uint64_t *)v34;
        *std::string::size_type v34 = v18;
        if (!v24) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      uint64_t v26 = 0;
      uint64_t v24 = (uint64_t)v17;
      if (!v17) {
        goto LABEL_54;
      }
    }
    if (*(unsigned char *)(v24 + 16) == 83 && *(llvm::ReturnInst **)(v24 + 40) == a2)
    {
      if (v26)
      {
        uint64_t v36 = sub_1CBF73380(v24, (uint64_t)a3);
        int v37 = *((_DWORD *)v26 + 5);
        if ((v37 & 0x40000000) != 0) {
          uint64_t v38 = *(v26 - 1);
        }
        else {
          uint64_t v38 = (uint64_t *)&v26[-4 * (v37 & 0x7FFFFFF)];
        }
      }
      else
      {
        uint64_t v36 = sub_1CBF73380(v24, (uint64_t)a3);
        if (!v16)
        {
          if (*v18)
          {
            *v15[1] = (uint64_t)*v15;
            if (*v15) {
              (*v15)[2] = (uint64_t)v15[1];
            }
          }
          *uint64_t v18 = v36;
          if (v36)
          {
            __int16 v48 = *(void **)(v36 + 8);
            __int16 v46 = (uint64_t **)(v36 + 8);
            uint64_t v47 = v48;
            void *v15 = v48;
            if (v48) {
              v47[2] = v15;
            }
            v15[1] = (uint64_t *)v46;
            *__int16 v46 = v18;
          }
          goto LABEL_54;
        }
        int v39 = *((_DWORD *)v16 + 5);
        if ((v39 & 0x40000000) != 0) {
          uint64_t v38 = *(v16 - 1);
        }
        else {
          uint64_t v38 = (uint64_t *)&v16[-4 * (v39 & 0x7FFFFFF)];
        }
      }
      if (*v38)
      {
        *(void *)v38[2] = v38[1];
        uint64_t v40 = v38[1];
        if (v40) {
          *(void *)(v40 + 16) = v38[2];
        }
      }
      *uint64_t v38 = v36;
      if (v36)
      {
        uint64_t v43 = *(void *)(v36 + 8);
        uint64_t v41 = (uint64_t **)(v36 + 8);
        uint64_t v42 = v43;
        v38[1] = v43;
        if (v43) {
          *(void *)(v42 + 16) = v38 + 1;
        }
        v38[2] = (uint64_t)v41;
        *uint64_t v41 = v38;
      }
    }
LABEL_54:
    v15 += 4;
    v14 -= 32;
    if (!v14) {
      goto LABEL_75;
    }
  }
}

void sub_1CD1290BC(uint64_t a1, uint64_t a2)
{
  v7[16] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = v7;
  uint64_t v6 = 0x800000000;
  uint64_t v2 = *(void *)(a2 + 40);
  __int16 v4 = 257;
  llvm::BasicBlock::splitBasicBlock(v2, a2 + 24, (uint64_t)&v3, 0);
}

void llvm::SplitBlockAndInsertIfThenElse(llvm *this, llvm::Value *a2, llvm::Instruction *a3, llvm::Instruction **a4, llvm::Instruction **a5, llvm::MDNode *a6)
{
  uint64_t v6 = *((void *)a2 + 5);
  __int16 v8 = 257;
  llvm::BasicBlock::splitBasicBlock(v6, (uint64_t)a2 + 24, (uint64_t)v7, 0);
}

void *llvm::GetIfCondition(llvm *this, llvm::BasicBlock *a2, llvm::BasicBlock **a3, llvm::BasicBlock **a4)
{
  uint64_t v7 = *((void *)this + 6);
  uint64_t v8 = v7 - 24;
  if (!v7) {
    uint64_t v8 = 0;
  }
  int v9 = *(unsigned __int8 *)(v8 + 16);
  if (v9 != 83) {
    uint64_t v8 = 0;
  }
  if (!v7 || v9 != 83)
  {
    uint64_t v12 = *((void *)this + 1);
    if (v12)
    {
      while (1)
      {
        uint64_t v13 = *(void *)(v12 + 24);
        unsigned int v14 = *(unsigned __int8 *)(v13 + 16);
        BOOL v15 = v13 && v14 >= 0x1C;
        if (v15 && v14 - 29 <= 0xA) {
          break;
        }
        uint64_t v12 = *(void *)(v12 + 8);
        if (!v12) {
          return 0;
        }
      }
      while (1)
      {
        uint64_t v12 = *(void *)(v12 + 8);
        if (!v12) {
          break;
        }
        uint64_t v17 = *(void *)(v12 + 24);
        unsigned int v18 = *(unsigned __int8 *)(v17 + 16);
        if (v17) {
          BOOL v19 = v18 >= 0x1C;
        }
        else {
          BOOL v19 = 0;
        }
        if (v19 && v18 - 29 <= 0xA)
        {
          std::string::size_type v34 = *(llvm::BasicBlock **)(v13 + 40);
          while (1)
          {
            uint64_t v12 = *(void *)(v12 + 8);
            if (!v12) {
              break;
            }
            uint64_t v35 = *(void *)(v12 + 24);
            unsigned int v36 = *(unsigned __int8 *)(v35 + 16);
            if (v35) {
              BOOL v37 = v36 >= 0x1C;
            }
            else {
              BOOL v37 = 0;
            }
            if (v37 && v36 - 29 < 0xB) {
              return 0;
            }
          }
          uint64_t v22 = (llvm::BasicBlock **)(v17 + 40);
          goto LABEL_33;
        }
      }
    }
    return 0;
  }
  int v10 = *(_DWORD *)(v8 + 20);
  if ((v10 & 0x7FFFFFF) != 2) {
    return 0;
  }
  if ((v10 & 0x40000000) != 0) {
    uint64_t v11 = *(void *)(v8 - 8);
  }
  else {
    uint64_t v11 = v8 - 64;
  }
  uint64_t v21 = *(unsigned int *)(v8 + 60);
  std::string::size_type v34 = *(llvm::BasicBlock **)(v11 + 32 * v21);
  uint64_t v22 = (llvm::BasicBlock **)(v11 + 32 * v21 + 8);
LABEL_33:
  uint64_t v23 = *v22;
  uint64_t v24 = (void *)*((void *)v34 + 5);
  if (v24 == (void *)((char *)v34 + 40))
  {
    uint64_t v25 = 0;
  }
  else
  {
    if (v24) {
      uint64_t v25 = v24 - 3;
    }
    else {
      uint64_t v25 = 0;
    }
    if (*((unsigned __int8 *)v25 + 16) - 29 >= 0xB) {
      uint64_t v25 = 0;
    }
  }
  if (*((unsigned char *)v25 + 16) == 30) {
    uint64_t v26 = v25;
  }
  else {
    uint64_t v26 = 0;
  }
  int v27 = (void *)*((void *)v23 + 5);
  if (v27 == (void *)((char *)v23 + 40))
  {
    int v29 = 0;
  }
  else
  {
    if (v27) {
      unsigned int v28 = v27 - 3;
    }
    else {
      unsigned int v28 = 0;
    }
    if (*((unsigned __int8 *)v28 + 16) - 29 >= 0xB) {
      int v29 = 0;
    }
    else {
      int v29 = v28;
    }
  }
  uint64_t result = 0;
  if (*((unsigned char *)v29 + 16) == 30) {
    uint64_t v31 = v29;
  }
  else {
    uint64_t v31 = 0;
  }
  if (v26) {
    BOOL v32 = v31 == 0;
  }
  else {
    BOOL v32 = 1;
  }
  if (!v32)
  {
    if ((v31[5] & 0x7FFFFFF) == 3)
    {
      uint64_t v33 = v34;
      if ((v26[5] & 0x7FFFFFF) == 3) {
        return 0;
      }
    }
    else
    {
      uint64_t v33 = v23;
      uint64_t v23 = v34;
      int v29 = v25;
    }
    if ((*((_DWORD *)v29 + 5) & 0x7FFFFFF) == 3)
    {
      uint64_t result = (void *)llvm::BasicBlock::getSinglePredecessor(v33);
      if (!result) {
        return result;
      }
      int v39 = (llvm *)*(v29 - 4);
      if (v39 == this && (llvm::BasicBlock *)*(v29 - 8) == v33)
      {
        uint64_t v40 = v33;
        uint64_t v33 = v23;
      }
      else
      {
        if (v39 != v33) {
          return 0;
        }
        uint64_t v40 = v23;
        if ((llvm *)*(v29 - 8) != this) {
          return 0;
        }
      }
      *(void *)a2 = v33;
LABEL_104:
      *a3 = v40;
      return v29;
    }
    uint64_t result = (void *)llvm::BasicBlock::getSinglePredecessor(v23);
    if (!result) {
      return result;
    }
    uint64_t v41 = (uint64_t)result;
    if (result != (void *)llvm::BasicBlock::getSinglePredecessor(v33)) {
      return 0;
    }
    uint64_t v42 = *(void *)(v41 + 40);
    if (v42 == v41 + 40) {
      return 0;
    }
    uint64_t result = 0;
    int v29 = (void *)(v42 - 24);
    if (v42) {
      uint64_t v43 = v42 - 24;
    }
    else {
      uint64_t v43 = 0;
    }
    unsigned int v44 = *(unsigned __int8 *)(v43 + 16) - 40;
    if (v44 < 0xFFFFFFF5) {
      uint64_t v43 = 0;
    }
    if (v42)
    {
      if (*(unsigned char *)(v43 + 16) == 30 && v44 >= 0xFFFFFFF5)
      {
        __int16 v46 = *(llvm::BasicBlock **)(v43 - 32);
        BOOL v47 = v46 == v23;
        if (v46 == v23) {
          __int16 v48 = v23;
        }
        else {
          __int16 v48 = v33;
        }
        *(void *)a2 = v48;
        if (v47) {
          uint64_t v40 = v33;
        }
        else {
          uint64_t v40 = v23;
        }
        goto LABEL_104;
      }
    }
  }
  return result;
}

void llvm::CreateControlFlowHub()
{
}

void sub_1CD12BBB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v125 = a1 + 40;
  if (v4 != a1 + 40)
  {
    uint64_t v5 = a1;
    while (1)
    {
      if (v4) {
        uint64_t v6 = v4 - 24;
      }
      else {
        uint64_t v6 = 0;
      }
      if (*(unsigned char *)(v6 + 16) != 83) {
        return;
      }
      uint64_t v128 = v4;
      uint64_t v7 = *(llvm::UndefValue **)v6;
      if ((*(unsigned char *)(v6 + 23) & 0x10) != 0) {
        break;
      }
      uint64_t v17 = 0;
      unsigned int v18 = &byte_1CFBCE98E;
LABEL_16:
      uint64_t v21 = *(void *)(a3 + 24);
      uint64_t v20 = *(void *)(a3 + 32);
      __int16 v135 = 773;
      v134[0] = v18;
      v134[1] = v17;
      v134[2] = ".moved";
      uint64_t v22 = *(uint64_t **)(a4 + 40);
      uint64_t v23 = operator new(0x48uLL);
      uint64_t v24 = v23;
      v23[1] = v7;
      uint64_t v25 = (llvm::Value *)(v23 + 1);
      void *v23 = 0;
      v23[2] = 0;
      int v127 = v23 + 2;
      v23[3] = 0x4000000000000053;
      *((_OWORD *)v23 + 2) = 0u;
      uint64_t v26 = (char *)(v23 + 4);
      *((_OWORD *)v23 + 3) = 0u;
      *((_DWORD *)v23 + 16) = 0;
      if (v22)
      {
        uint64_t v106 = v22[2];
        v23[6] = v106;
        *(_WORD *)(v106 + 18) &= ~0x8000u;
        if ((*((unsigned char *)v23 + 31) & 0x10) != 0)
        {
          uint64_t v116 = *(void *)(v106 + 56);
          if (v116)
          {
            uint64_t v117 = *(llvm::ValueSymbolTable **)(v116 + 104);
            if (v117) {
              llvm::ValueSymbolTable::reinsertValue(v117, v25);
            }
          }
        }
        uint64_t v107 = *v22;
        v24[4] = *v22;
        v24[5] = v22;
        *(void *)(v107 + 8) = v26;
        *uint64_t v22 = (uint64_t)v26;
      }
      *((_DWORD *)v24 + 17) = (unint64_t)(v20 - v21) >> 3;
      llvm::Value::setNameImpl(v25, v134);
      if (*((unsigned char *)v24 + 24)) {
        goto LABEL_18;
      }
      if ((*((unsigned char *)v24 + 31) & 0x10) == 0)
      {
LABEL_138:
        int v123 = 0;
        *((_DWORD *)v24 + 10) &= ~0x2000u;
        goto LABEL_139;
      }
      uint64_t v108 = ***(void ***)v25;
      uint64_t v109 = *(void *)(v108 + 152);
      uint64_t v110 = *(unsigned int *)(v108 + 168);
      if (!v110) {
        goto LABEL_130;
      }
      LODWORD(v111) = (v110 - 1) & ((v25 >> 4) ^ (v25 >> 9));
      int v112 = (llvm::Value **)(v109 + 16 * v111);
      unint64_t v113 = *v112;
      if (*v112 != v25)
      {
        int v114 = 1;
        while (v113 != (llvm::Value *)-4096)
        {
          int v115 = v111 + v114++;
          uint64_t v111 = v115 & (v110 - 1);
          unint64_t v113 = *(llvm::Value **)(v109 + 16 * v111);
          if (v113 == v25)
          {
            int v112 = (llvm::Value **)(v109 + 16 * v111);
            goto LABEL_131;
          }
        }
LABEL_130:
        int v112 = (llvm::Value **)(v109 + 16 * v110);
      }
LABEL_131:
      int v118 = v112[1];
      unint64_t v121 = *(void *)v118;
      uint64_t v119 = (char *)v118 + 16;
      unint64_t v120 = v121;
      if (v121 < 5) {
        goto LABEL_138;
      }
      if (*(_DWORD *)v119 != *(_DWORD *)"llvm." || v119[4] != aLlvm_1[4]) {
        goto LABEL_138;
      }
      *((_DWORD *)v24 + 10) |= 0x2000u;
      int v123 = llvm::Function::lookupIntrinsicID(v119, v120);
LABEL_139:
      *((_DWORD *)v24 + 11) = v123;
LABEL_18:
      uint64_t v27 = *((unsigned int *)v24 + 17);
      unsigned int v28 = operator new(40 * v27);
      *uint64_t v24 = v28;
      if (v27)
      {
        int v30 = &v28[4 * v27];
        do
        {
          *unsigned int v28 = 0;
          v28[1] = 0;
          v28[2] = 0;
          v28[3] = v25;
          v28 += 4;
        }
        while (v28 != v30);
      }
      BOOL v32 = *(uint64_t **)(a3 + 24);
      uint64_t v31 = *(uint64_t **)(a3 + 32);
      uint64_t v131 = v31;
      for (uint64_t i = v25; v32 != v31; ++v32)
      {
        uint64_t v33 = *v32;
        std::string::size_type v34 = llvm::UndefValue::get(*(llvm::UndefValue **)v6, v29);
        uint64_t v35 = v25;
        if (v33 != v5)
        {
          int v36 = *(_DWORD *)(v6 + 20);
          uint64_t v37 = v36 & 0x7FFFFFF;
          if ((v36 & 0x7FFFFFF) != 0)
          {
            uint64_t v38 = v6 - 32 * v37;
            uint64_t v39 = v36 & 0x7FFFFFF;
            uint64_t v40 = 32 * *(unsigned int *)(v6 + 60);
            while (1)
            {
              uint64_t v41 = v6 - 32 * v37;
              if ((v36 & 0x40000000) != 0) {
                uint64_t v41 = *(void *)(v6 - 8);
              }
              if (*(void *)(v41 + v40) == v33) {
                break;
              }
              v40 += 8;
              if (!--v39) {
                goto LABEL_29;
              }
            }
            uint64_t v42 = 0;
            while (1)
            {
              uint64_t v43 = v6 - 32 * v37;
              if ((v36 & 0x40000000) != 0) {
                uint64_t v43 = *(void *)(v6 - 8);
              }
              if (*(void *)(v43 + 32 * *(unsigned int *)(v6 + 60) + 8 * v42) == v33) {
                break;
              }
              if (v37 == ++v42)
              {
                uint64_t v44 = 0xFFFFFFFFLL;
                goto LABEL_37;
              }
            }
            uint64_t v44 = v42;
LABEL_37:
            if ((v36 & 0x40000000) != 0)
            {
              uint64_t v38 = *(void *)(v6 - 8);
              uint64_t v45 = (void *)(v38 + 32 * v44);
              __int16 v46 = (uint64_t *)(v38 + 32 * v37);
            }
            else
            {
              uint64_t v45 = (void *)(v38 + 32 * v44);
              __int16 v46 = (uint64_t *)v6;
            }
            uint64_t v35 = (llvm::Value *)*v45;
            sub_1CC5E4108((uint64_t)v134, v45 + 4, v46, v38 + 32 * v44);
            int v47 = *(_DWORD *)(v6 + 20);
            if ((v47 & 0x40000000) != 0)
            {
              uint64_t v48 = *(void *)(v6 - 8);
              uint64_t v49 = *(unsigned int *)(v6 + 60);
              uint64_t v50 = v48 + 32 * v49;
              uint64_t v51 = v47 & 0x7FFFFFF;
            }
            else
            {
              uint64_t v51 = v47 & 0x7FFFFFF;
              uint64_t v48 = v6 - 32 * v51;
              uint64_t v49 = *(unsigned int *)(v6 + 60);
              uint64_t v50 = v48 + 32 * v49;
            }
            int v52 = (llvm::Type *)(v50 + 8 * v51);
            int v29 = (llvm::Type *)(v50 + 8 * v44 + 8);
            if (v52 != v29)
            {
              memmove((void *)(v48 + 32 * v49 + 8 * v44), v29, v52 - v29);
              int v47 = *(_DWORD *)(v6 + 20);
            }
            if ((v47 & 0x40000000) != 0)
            {
              uint64_t v53 = *(void *)(v6 - 8);
              uint64_t v54 = v47 & 0x7FFFFFF;
            }
            else
            {
              uint64_t v54 = v47 & 0x7FFFFFF;
              uint64_t v53 = v6 - 32 * v54;
            }
            uint64_t v55 = v53 + 32 * v54;
            if (*(void *)(v55 - 32))
            {
              **(void **)(v55 - 16) = *(void *)(v55 - 24);
              uint64_t v56 = *(void *)(v55 - 24);
              if (v56) {
                *(void *)(v56 + 16) = *(void *)(v55 - 16);
              }
            }
            *(void *)(v55 - 32) = 0;
            *(_DWORD *)(v6 + 20) = *(_DWORD *)(v6 + 20) & 0xF8000000 | (*(_DWORD *)(v6 + 20) - 1) & 0x7FFFFFF;
          }
          else
          {
LABEL_29:
            uint64_t v35 = v34;
          }
        }
        int v57 = *((_DWORD *)v24 + 7);
        uint64_t v58 = v57 & 0x7FFFFFF;
        if ((v57 & 0x7FFFFFF) == *((_DWORD *)v24 + 17))
        {
          unsigned int v71 = v58 + (v58 >> 1);
          if (v71 <= 2) {
            uint64_t v72 = 2;
          }
          else {
            uint64_t v72 = v71;
          }
          *((_DWORD *)v24 + 17) = v72;
          if ((v57 & 0x40000000) != 0) {
            int v73 = (uint64_t *)*v24;
          }
          else {
            int v73 = (uint64_t *)((char *)v25 - 32 * v58);
          }
          __p = v73;
          uint64_t v74 = operator new(40 * v72);
          *uint64_t v24 = v74;
          int v75 = v74;
          do
          {
            void *v75 = 0;
            v75[1] = 0;
            v75[2] = 0;
            v75[3] = v25;
            v75 += 4;
          }
          while (v75 != &v74[4 * v72]);
          int v76 = *((_DWORD *)v24 + 7);
          if ((v76 & 0x40000000) != 0) {
            uint64_t v77 = (uint64_t)v74;
          }
          else {
            uint64_t v77 = (uint64_t)v25 - 32 * (v76 & 0x7FFFFFF);
          }
          sub_1CC5E4108((uint64_t)v134, __p, &__p[4 * v58], v77);
          if (v58)
          {
            memmove((void *)(v77 + 32 * v72), &__p[4 * v58], 8 * v58);
            uint64_t v78 = 4 * v58;
            do
            {
              unint64_t v79 = &__p[v78];
              if (__p[v78 - 4])
              {
                *(void *)*(v79 - 2) = *(v79 - 3);
                uint64_t v80 = *(v79 - 3);
                if (v80) {
                  *(void *)(v80 + 16) = *(v79 - 2);
                }
              }
              v78 -= 4;
            }
            while (v78 * 8);
          }
          operator delete(__p);
          int v57 = *((_DWORD *)v24 + 7);
          uint64_t v5 = a1;
          uint64_t v31 = v131;
          uint64_t v25 = i;
        }
        uint64_t v59 = (v57 + 1) & 0x7FFFFFF;
        *((_DWORD *)v24 + 7) = v57 & 0xF8000000 | (v57 + 1) & 0x7FFFFFF;
        if ((v57 & 0x40000000) != 0) {
          uint64_t v60 = (char *)*v24;
        }
        else {
          uint64_t v60 = (char *)v25 - 32 * v59;
        }
        uint64_t v61 = (v59 - 1);
        uint64_t v62 = &v60[32 * v61];
        if (*(void *)v62)
        {
          **((void **)v62 + 2) = *((void *)v62 + 1);
          uint64_t v70 = *((void *)v62 + 1);
          if (v70) {
            *(void *)(v70 + 16) = *((void *)v62 + 2);
          }
        }
        *(void *)uint64_t v62 = v35;
        if (v35)
        {
          uint64_t v65 = *((void *)v35 + 1);
          uint64_t v64 = (char **)((char *)v35 + 8);
          uint64_t v63 = v65;
          uint64_t v66 = &v60[32 * v61];
          *((void *)v66 + 1) = v65;
          if (v65) {
            *(void *)(v63 + 16) = v66 + 8;
          }
          *((void *)v66 + 2) = v64;
          *uint64_t v64 = v62;
        }
        int v67 = *((_DWORD *)v24 + 7);
        uint64_t v68 = v67 & 0x7FFFFFF;
        if ((v67 & 0x40000000) != 0) {
          uint64_t v69 = (char *)*v24;
        }
        else {
          uint64_t v69 = (char *)v25 - 32 * v68;
        }
        *(void *)&v69[32 * *((unsigned int *)v24 + 17) + 8 * (v68 - 1)] = v33;
      }
      int v81 = *(_DWORD *)(v6 + 20);
      uint64_t v82 = v81 & 0x7FFFFFF;
      if ((v81 & 0x7FFFFFF) == 0)
      {
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v6, v25, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
      if (v82 == *(_DWORD *)(v6 + 60))
      {
        unsigned int v92 = v82 + (v82 >> 1);
        if (v92 <= 2) {
          uint64_t v93 = 2;
        }
        else {
          uint64_t v93 = v92;
        }
        *(_DWORD *)(v6 + 60) = v93;
        if ((v81 & 0x40000000) != 0) {
          __int16 v94 = *(uint64_t **)(v6 - 8);
        }
        else {
          __int16 v94 = (uint64_t *)(v6 - 32 * v82);
        }
        unsigned int v95 = v25;
        unsigned int v96 = operator new(40 * v93);
        *(void *)(v6 - 8) = v96;
        unsigned int v97 = v96;
        do
        {
          *unsigned int v97 = 0;
          v97[1] = 0;
          uint64_t v97[2] = 0;
          v97[3] = v6;
          v97 += 4;
        }
        while (v97 != &v96[4 * v93]);
        int v98 = *(_DWORD *)(v6 + 20);
        if ((v98 & 0x40000000) != 0) {
          uint64_t v99 = (uint64_t)v96;
        }
        else {
          uint64_t v99 = v6 - 32 * (v98 & 0x7FFFFFF);
        }
        uint64_t v100 = v82;
        unsigned int v101 = v82;
        uint64_t v102 = 4 * v82;
        uint64_t v103 = &v94[4 * v100];
        sub_1CC5E4108((uint64_t)v134, v94, v103, v99);
        memmove((void *)(v99 + 32 * v93), v103, 8 * v101);
        uint64_t v25 = v95;
        do
        {
          uint64_t v104 = &v94[v102];
          if (v94[v102 - 4])
          {
            *(void *)*(v104 - 2) = *(v104 - 3);
            uint64_t v105 = *(v104 - 3);
            if (v105) {
              *(void *)(v105 + 16) = *(v104 - 2);
            }
          }
          v102 -= 4;
        }
        while (v102 * 8);
        operator delete(v94);
        int v81 = *(_DWORD *)(v6 + 20);
      }
      uint64_t v83 = (v81 + 1) & 0x7FFFFFF;
      *(_DWORD *)(v6 + 20) = v81 & 0xF8000000 | (v81 + 1) & 0x7FFFFFF;
      if ((v81 & 0x40000000) != 0) {
        uint64_t v84 = *(void *)(v6 - 8);
      }
      else {
        uint64_t v84 = v6 - 32 * v83;
      }
      uint64_t v85 = (v83 - 1);
      uint64_t v86 = v84 + 32 * v85;
      if (*(void *)v86)
      {
        **(void **)(v86 + 16) = *(void *)(v86 + 8);
        uint64_t v91 = *(void *)(v86 + 8);
        if (v91) {
          *(void *)(v91 + 16) = *(void *)(v86 + 16);
        }
      }
      *(void *)uint64_t v86 = v25;
      uint64_t v87 = *v127;
      *(void *)(v86 + 8) = *v127;
      if (v87) {
        *(void *)(v87 + 16) = v86 + 8;
      }
      *(void *)(v84 + 32 * v85 + 16) = v127;
      *int v127 = v86;
      int v88 = *(_DWORD *)(v6 + 20);
      uint64_t v89 = v88 & 0x7FFFFFF;
      if ((v88 & 0x40000000) != 0) {
        uint64_t v90 = *(void *)(v6 - 8);
      }
      else {
        uint64_t v90 = v6 - 32 * v89;
      }
      *(void *)(v90 + 32 * *(unsigned int *)(v6 + 60) + 8 * (v89 - 1)) = a2;
      uint64_t v4 = *(void *)(v128 + 8);
      if (v4 == v125) {
        return;
      }
    }
    uint64_t v8 = **(void **)v7;
    uint64_t v9 = *(void *)(v8 + 152);
    uint64_t v10 = *(unsigned int *)(v8 + 168);
    if (v10)
    {
      LODWORD(v11) = (v10 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      uint64_t v12 = (uint64_t *)(v9 + 16 * v11);
      uint64_t v13 = *v12;
      if (*v12 == v6)
      {
LABEL_15:
        char v16 = (void *)v12[1];
        BOOL v19 = (const char *)*v16;
        unsigned int v18 = (const char *)(v16 + 2);
        uint64_t v17 = v19;
        goto LABEL_16;
      }
      int v14 = 1;
      while (v13 != -4096)
      {
        int v15 = v11 + v14++;
        uint64_t v11 = v15 & (v10 - 1);
        uint64_t v13 = *(void *)(v9 + 16 * v11);
        if (v13 == v6)
        {
          uint64_t v12 = (uint64_t *)(v9 + 16 * v11);
          goto LABEL_15;
        }
      }
    }
    uint64_t v12 = (uint64_t *)(v9 + 16 * v10);
    goto LABEL_15;
  }
}

uint64_t sub_1CD12C3C8(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  if (!a2)
  {
    uint64_t v9 = 0;
    uint64_t result = 0;
    goto LABEL_5;
  }
  int v7 = a2 - 1;
  unsigned int v8 = sub_1CC2E9470(a3) & (a2 - 1);
  uint64_t v9 = a1 + 96 * v8;
  if (sub_1CC2E9944((uint64_t)a3, v9))
  {
    uint64_t result = 1;
    goto LABEL_5;
  }
  uint64_t v11 = 0;
  int v12 = 1;
  while (1)
  {
    if (*(void *)v9) {
      goto LABEL_8;
    }
    if (!*(unsigned char *)(v9 + 24)) {
      break;
    }
    if (*(_OWORD *)(v9 + 8) == 0)
    {
      BOOL v13 = *(void *)(v9 + 32) == 0;
      goto LABEL_9;
    }
LABEL_8:
    BOOL v13 = 0;
LABEL_9:
    if (v13 && v11 == 0) {
      uint64_t v11 = v9;
    }
    int v14 = v12 + 1;
    unsigned int v8 = (v8 + v12) & v7;
    uint64_t v9 = a1 + 96 * v8;
    BOOL v15 = sub_1CC2E9944((uint64_t)a3, v9);
    uint64_t result = 1;
    int v12 = v14;
    if (v15) {
      goto LABEL_5;
    }
  }
  if (*(void *)(v9 + 32)) {
    goto LABEL_8;
  }
  uint64_t result = 0;
  if (v11) {
    uint64_t v9 = v11;
  }
LABEL_5:
  *a4 = v9;
  return result;
}

void sub_1CD12C4E4(uint64_t a1, long long *a2, long long *a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)a1;
    uint64_t v8 = *(void *)a1 + 96 * v6;
    do
    {
      *(void *)uint64_t v7 = 0;
      *(unsigned char *)(v7 + 8) = 0;
      *(unsigned char *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      v7 += 96;
    }
    while (v7 != v8);
  }
  if (a2 != a3)
  {
    do
    {
      if (*(void *)v4 || *((unsigned char *)v4 + 24) && *(long long *)((char *)v4 + 8) != 0 || *((void *)v4 + 4))
      {
        uint64_t v15 = 0;
        sub_1CD12C3C8(*(void *)a1, *(_DWORD *)(a1 + 16), (uint64_t *)v4, &v15);
        uint64_t v9 = v15;
        long long v10 = *v4;
        long long v11 = v4[1];
        *(void *)(v15 + 32) = *((void *)v4 + 4);
        *(_OWORD *)uint64_t v9 = v10;
        *(_OWORD *)(v9 + 16) = v11;
        *(void *)(v9 + 40) = v9 + 56;
        *(void *)(v9 + 48) = 0x400000000;
        int v12 = (char *)*((void *)v4 + 5);
        if (v4 != (long long *)v9)
        {
          unsigned int v13 = *((_DWORD *)v4 + 12);
          if (v13)
          {
            if ((char *)v4 + 56 == v12)
            {
              if (v13 >= 5) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy((void *)(v9 + 56), v12, 8 * *((unsigned int *)v4 + 12));
              *(_DWORD *)(v9 + 48) = v13;
              int v12 = (char *)*((void *)v4 + 5);
            }
            else
            {
              *(void *)(v9 + 40) = v12;
              int v14 = *((_DWORD *)v4 + 13);
              *(_DWORD *)(v9 + 48) = v13;
              *(_DWORD *)(v9 + 52) = v14;
              *((void *)v4 + 5) = (char *)v4 + 56;
              *((_DWORD *)v4 + 13) = 0;
              int v12 = (char *)v4 + 56;
            }
            *((_DWORD *)v4 + 12) = 0;
          }
        }
        *(void *)(v9 + 88) = *((void *)v4 + 11);
        ++*(_DWORD *)(a1 + 8);
        if ((char *)v4 + 56 != v12) {
          free(v12);
        }
      }
      v4 += 6;
    }
    while (v4 != a3);
  }
}

void sub_1CD12C694(llvm::BasicBlock *a1, uint64_t a2, uint64_t *a3, uint64_t a4, llvm::DomTreeUpdater *a5, uint64_t a6, uint64_t *a7, llvm::MemorySSAUpdater *a8)
{
  uint64_t v9 = a7;
  uint64_t v11 = a4;
  int v12 = a3;
  unsigned int v13 = (llvm::BasicBlock *)a2;
  v100[16] = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    uint64_t v15 = *(llvm::Function **)(a2 + 56);
    uint64_t v16 = *((void *)v15 + 10);
    if (v16) {
      uint64_t v17 = (llvm::BasicBlock *)(v16 - 24);
    }
    else {
      uint64_t v17 = 0;
    }
    if (v17 == v13 && *((void *)a5 + 36))
    {
      llvm::DomTreeUpdater::recalculate(a5, v15);
    }
    else
    {
      int v98 = v100;
      uint64_t v93 = v97;
      __int16 v94 = v97;
      uint64_t v95 = 8;
      int v96 = 0;
      v100[0] = v13;
      v100[1] = (unint64_t)a1 & 0xFFFFFFFFFFFFFFFBLL;
      uint64_t v99 = 0x800000001;
      if (((2 * a4) | 1uLL) >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (a4)
      {
        unsigned int v18 = a3;
        BOOL v19 = &a3[a4];
        while (1)
        {
          uint64_t v20 = *v18;
          uint64_t v21 = v94;
          uint64_t v22 = HIDWORD(v95);
          if (v94 == v93)
          {
            if (HIDWORD(v95))
            {
              uint64_t v23 = 0;
              uint64_t v24 = 8 * HIDWORD(v95);
              uint64_t v25 = v94;
              while (*(void *)v25 != v20)
              {
                if (*(void *)v25 == -2) {
                  uint64_t v23 = (uint64_t *)v25;
                }
                v25 += 8;
                v24 -= 8;
                if (!v24)
                {
                  if (!v23) {
                    goto LABEL_19;
                  }
                  uint64_t *v23 = v20;
                  --v96;
                  goto LABEL_43;
                }
              }
              goto LABEL_46;
            }
LABEL_19:
            unsigned int v26 = v95;
            if (HIDWORD(v95) < v95)
            {
              ++HIDWORD(v95);
              *(void *)&v94[8 * v22] = v20;
              goto LABEL_43;
            }
          }
          else
          {
            unsigned int v26 = v95;
          }
          if (3 * v26 <= 4 * (HIDWORD(v95) - v96)) {
            break;
          }
          if (v26 - HIDWORD(v95) < v26 >> 3) {
            goto LABEL_53;
          }
LABEL_24:
          unsigned int v27 = v26 - 1;
          unsigned int v28 = (v26 - 1) & ((v20 >> 4) ^ (v20 >> 9));
          int v29 = &v21[8 * v28];
          uint64_t v30 = *(void *)v29;
          if (*(void *)v29 != -1)
          {
            uint64_t v31 = 0;
            int v32 = 1;
            while (v30 != v20)
            {
              if (v31) {
                BOOL v33 = 0;
              }
              else {
                BOOL v33 = v30 == -2;
              }
              if (v33) {
                uint64_t v31 = v29;
              }
              unsigned int v34 = v28 + v32++;
              unsigned int v28 = v34 & v27;
              int v29 = &v21[8 * (v34 & v27)];
              uint64_t v30 = *(void *)v29;
              if (*(void *)v29 == -1) {
                goto LABEL_36;
              }
            }
            goto LABEL_46;
          }
          uint64_t v31 = 0;
LABEL_36:
          if (v31) {
            uint64_t v35 = v31;
          }
          else {
            uint64_t v35 = v29;
          }
          if (*(void *)v35 == v20) {
            goto LABEL_46;
          }
          if (*(void *)v35 == -2) {
            --v96;
          }
          else {
            ++HIDWORD(v95);
          }
          *(void *)uint64_t v35 = v20;
LABEL_43:
          if (v99 >= (unint64_t)HIDWORD(v99)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v36 = (uint64_t *)((char *)v98 + 16 * v99);
          *int v36 = v20;
          v36[1] = a2 & 0xFFFFFFFFFFFFFFFBLL;
          unsigned int v37 = v99 + 1;
          LODWORD(v99) = v37;
          if (v37 >= HIDWORD(v99)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v38 = (uint64_t *)((char *)v98 + 16 * v37);
          *uint64_t v38 = v20;
          v38[1] = (unint64_t)a1 | 4;
          LODWORD(v99) = v99 + 1;
LABEL_46:
          if (++v18 == v19) {
            goto LABEL_56;
          }
        }
        if (v26 >= 0x40) {
          v26 *= 2;
        }
        else {
          unsigned int v26 = 128;
        }
LABEL_53:
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v93, v26);
        unsigned int v26 = v95;
        uint64_t v21 = v94;
        goto LABEL_24;
      }
LABEL_56:
      llvm::DomTreeUpdater::applyUpdates((uint64_t)a5, (unint64_t *)v98, v99);
      if (v94 != v93) {
        free(v94);
      }
      uint64_t v9 = a7;
      uint64_t v11 = a4;
      unsigned int v13 = (llvm::BasicBlock *)a2;
      if (v98 != v100) {
        free(v98);
      }
    }
  }
  else if (a6)
  {
    if (**(llvm::BasicBlock ***)(a6 + 48) == a1) {
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::setNewRoot();
    }
    sub_1CC59D634(a6, a2);
  }
  if (a8) {
    llvm::MemorySSAUpdater::wireOldPredecessorsToNewImmediatePredecessor(a8, a1, v13, v12, v11, 1);
  }
  if (v9)
  {
    if (a5 && *((void *)a5 + 36)) {
      llvm::DomTreeUpdater::getDomTree(a5);
    }
    int v39 = *((_DWORD *)v9 + 4);
    if (v39)
    {
      uint64_t v40 = *v9;
      unsigned int v41 = v39 - 1;
      uint64_t v42 = (v39 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      uint64_t v43 = *(llvm::BasicBlock **)(*v9 + 16 * v42);
      if (v43 == a1)
      {
LABEL_74:
        uint64_t v46 = *(void *)(v40 + 16 * v42 + 8);
        goto LABEL_76;
      }
      int v44 = 1;
      while (v43 != (llvm::BasicBlock *)-4096)
      {
        int v45 = v42 + v44++;
        uint64_t v42 = v45 & v41;
        uint64_t v43 = *(llvm::BasicBlock **)(v40 + 16 * v42);
        if (v43 == a1) {
          goto LABEL_74;
        }
      }
    }
    uint64_t v46 = 0;
LABEL_76:
    int v47 = &v12[v11];
    if (v11) {
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
    }
    if (v46 && a4)
    {
      uint64_t v48 = 0;
      uint64_t v49 = *v9;
      int v50 = *((_DWORD *)v9 + 4);
      unsigned int v51 = v50 - 1;
      unsigned int v52 = (a1 >> 4) ^ (a1 >> 9);
      do
      {
        if (v50)
        {
          uint64_t v53 = ((*v12 >> 4) ^ (*v12 >> 9)) & v51;
          uint64_t v54 = *(void *)(v49 + 16 * v53);
          if (*v12 == v54)
          {
LABEL_86:
            int v57 = *(uint64_t **)(v49 + 16 * v53 + 8);
            if (v57)
            {
              while (1)
              {
                uint64_t v59 = v57[7];
                uint64_t v58 = v57[8];
                if (v58 == v59)
                {
                  uint64_t v60 = *((unsigned int *)v57 + 19);
                  uint64_t v61 = (llvm::BasicBlock **)(v58 + 8 * v60);
                  if (v60)
                  {
                    uint64_t v62 = 0;
                    uint64_t v63 = 8 * v60;
                    while (*(llvm::BasicBlock **)(v58 + v62) != a1)
                    {
                      v62 += 8;
                      if (v63 == v62) {
                        goto LABEL_105;
                      }
                    }
                    uint64_t v61 = (llvm::BasicBlock **)(v58 + v62);
                  }
LABEL_105:
                  uint64_t v72 = v57[8];
                }
                else
                {
                  uint64_t v64 = *((unsigned int *)v57 + 18);
                  int v65 = v64 - 1;
                  unsigned int v66 = (v64 - 1) & v52;
                  uint64_t v61 = (llvm::BasicBlock **)(v58 + 8 * v66);
                  int v67 = *v61;
                  if (*v61 == (llvm::BasicBlock *)-1)
                  {
                    uint64_t v68 = 0;
LABEL_107:
                    if (v68) {
                      uint64_t v61 = v68;
                    }
                    if (*v61 != a1) {
                      uint64_t v61 = (llvm::BasicBlock **)(v58 + 8 * v64);
                    }
                  }
                  else
                  {
                    uint64_t v68 = 0;
                    int v69 = 1;
                    while (v67 != a1)
                    {
                      if (v68) {
                        BOOL v70 = 0;
                      }
                      else {
                        BOOL v70 = v67 == (llvm::BasicBlock *)-2;
                      }
                      if (v70) {
                        uint64_t v68 = v61;
                      }
                      unsigned int v71 = v66 + v69++;
                      unsigned int v66 = v71 & v65;
                      uint64_t v61 = (llvm::BasicBlock **)(v58 + 8 * (v71 & v65));
                      int v67 = *v61;
                      if (*v61 == (llvm::BasicBlock *)-1) {
                        goto LABEL_107;
                      }
                    }
                  }
                  uint64_t v72 = v57[7];
                }
                uint64_t v73 = v58 == v72 ? 76 : 72;
                if (v61 != (llvm::BasicBlock **)(v58 + 8 * *(unsigned int *)((char *)v57 + v73))) {
                  break;
                }
                int v57 = (uint64_t *)*v57;
                if (!v57) {
                  goto LABEL_148;
                }
              }
              if (v58 == v72)
              {
                uint64_t v74 = *((unsigned int *)v57 + 19);
                int v75 = (llvm::BasicBlock **)(v58 + 8 * v74);
                if (v74)
                {
                  uint64_t v76 = 0;
                  uint64_t v77 = 8 * v74;
                  while (*(llvm::BasicBlock **)(v58 + v76) != a1)
                  {
                    v76 += 8;
                    if (v77 == v76) {
                      goto LABEL_136;
                    }
                  }
                  int v75 = (llvm::BasicBlock **)(v58 + v76);
                }
LABEL_136:
                uint64_t v59 = v57[8];
              }
              else
              {
                int v78 = *((_DWORD *)v57 + 18) - 1;
                int v79 = v78 & v52;
                int v75 = (llvm::BasicBlock **)(v58 + 8 * (v78 & v52));
                uint64_t v80 = *v75;
                if (*v75 == (llvm::BasicBlock *)-1)
                {
                  int v81 = 0;
LABEL_151:
                  if (v81) {
                    int v75 = v81;
                  }
                  if (*v75 != a1)
                  {
                    if (v58 == v59) {
                      uint64_t v89 = (unsigned int *)v57 + 19;
                    }
                    else {
                      uint64_t v89 = (unsigned int *)(v57 + 9);
                    }
                    int v75 = (llvm::BasicBlock **)(v58 + 8 * *v89);
                  }
                }
                else
                {
                  int v81 = 0;
                  int v82 = 1;
                  while (v80 != a1)
                  {
                    if (v81) {
                      BOOL v83 = 0;
                    }
                    else {
                      BOOL v83 = v80 == (llvm::BasicBlock *)-2;
                    }
                    if (v83) {
                      int v81 = v75;
                    }
                    int v84 = v79 + v82++;
                    int v79 = v84 & v78;
                    int v75 = (llvm::BasicBlock **)(v58 + 8 * (v84 & v78));
                    uint64_t v80 = *v75;
                    if (*v75 == (llvm::BasicBlock *)-1) {
                      goto LABEL_151;
                    }
                  }
                }
              }
              if (v58 == v59) {
                uint64_t v85 = (unsigned int *)v57 + 19;
              }
              else {
                uint64_t v85 = (unsigned int *)(v57 + 9);
              }
              if (v75 != (llvm::BasicBlock **)(v58 + 8 * *v85))
              {
                if (!v48) {
                  goto LABEL_147;
                }
                unsigned int v86 = 0;
                uint64_t v87 = v48;
                do
                {
                  uint64_t v87 = (void *)*v87;
                  ++v86;
                }
                while (v87);
                int v88 = v57;
                do
                {
                  int v88 = (void *)*v88;
                  LODWORD(v87) = v87 + 1;
                }
                while (v88);
                if (v86 < v87) {
LABEL_147:
                }
                  uint64_t v48 = v57;
              }
            }
          }
          else
          {
            int v55 = 1;
            while (v54 != -4096)
            {
              int v56 = v53 + v55++;
              uint64_t v53 = v56 & v51;
              uint64_t v54 = *(void *)(v49 + 16 * v53);
              if (*v12 == v54) {
                goto LABEL_86;
              }
            }
          }
        }
LABEL_148:
        ++v12;
      }
      while (v12 != v47);
      if (v48) {
        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop();
      }
    }
  }
}

void sub_1CD12D090(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6)
{
  int v200 = a4;
  sub_1CC0BED68((llvm::SmallPtrSetImplBase *)&v210, a3, &a3[a4]);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = v7 - 24;
  if (v7) {
    uint64_t v9 = v7 - 24;
  }
  else {
    uint64_t v9 = 0;
  }
  if (*(unsigned char *)(v9 + 16) == 83)
  {
    int v198 = (uint64_t *)(a5 + 24);
    while (1)
    {
      uint64_t v7 = *(void *)(v7 + 8);
      if (a6)
      {
        unsigned int v10 = *(_DWORD *)(v8 + 20);
      }
      else
      {
        uint64_t v11 = sub_1CBF73380(v8, *a3);
        unsigned int v10 = *(_DWORD *)(v8 + 20);
        uint64_t v12 = v10 & 0x7FFFFFF;
        if ((v10 & 0x7FFFFFF) != 0)
        {
          uint64_t v13 = 0;
          unsigned int v14 = v212 - 1;
          do
          {
            uint64_t v15 = v8 - 32 * v12;
            if ((v10 & 0x40000000) != 0) {
              uint64_t v15 = *(void *)(v8 - 8);
            }
            uint64_t v16 = *(void *)(v15 + 32 * *(unsigned int *)(v8 + 60) + 8 * v13);
            if (v211 == v210)
            {
              if (v213)
              {
                uint64_t v17 = 0;
                while (*(void *)&v211[v17] != v16)
                {
                  v17 += 8;
                  if (8 * v213 == v17)
                  {
                    unsigned int v18 = v213;
                    goto LABEL_32;
                  }
                }
                unsigned int v27 = &v211[v17];
                unsigned int v18 = v213;
                unsigned int v28 = v211;
              }
              else
              {
                unsigned int v18 = 0;
LABEL_32:
                unsigned int v28 = v211;
                unsigned int v27 = &v211[8 * v213];
              }
            }
            else
            {
              unsigned int v19 = v14 & ((v16 >> 4) ^ (v16 >> 9));
              uint64_t v20 = &v211[8 * v19];
              uint64_t v21 = *(void *)v20;
              if (*(void *)v20 == -1)
              {
                uint64_t v22 = 0;
LABEL_34:
                if (v22) {
                  uint64_t v20 = v22;
                }
                uint64_t v26 = *(void *)v20;
              }
              else
              {
                uint64_t v22 = 0;
                int v23 = 1;
                while (v21 != v16)
                {
                  if (v22) {
                    BOOL v24 = 0;
                  }
                  else {
                    BOOL v24 = v21 == -2;
                  }
                  if (v24) {
                    uint64_t v22 = v20;
                  }
                  unsigned int v25 = v19 + v23++;
                  unsigned int v19 = v25 & v14;
                  uint64_t v20 = &v211[8 * (v25 & v14)];
                  uint64_t v21 = *(void *)v20;
                  if (*(void *)v20 == -1) {
                    goto LABEL_34;
                  }
                }
                uint64_t v26 = v16;
              }
              if (v26 == v16) {
                unsigned int v27 = v20;
              }
              else {
                unsigned int v27 = &v211[8 * v212];
              }
              unsigned int v18 = v213;
              unsigned int v28 = v210;
            }
            if (v211 != v28) {
              unsigned int v18 = v212;
            }
            if (v27 != &v211[8 * v18])
            {
              uint64_t v29 = v8 - 32 * v12;
              if (v11)
              {
                if ((v10 & 0x40000000) != 0) {
                  uint64_t v29 = *(void *)(v8 - 8);
                }
                if (v11 != *(void *)(v29 + 32 * v13)) {
                  goto LABEL_105;
                }
              }
              else
              {
                if ((v10 & 0x40000000) != 0) {
                  uint64_t v29 = *(void *)(v8 - 8);
                }
                uint64_t v11 = *(void *)(v29 + 32 * v13);
              }
            }
            ++v13;
          }
          while (v13 != v12);
        }
        if (v11)
        {
          uint64_t v30 = (v12 - 1);
          uint64_t v31 = (_DWORD *)(v8 + 60);
          do
          {
            if ((v10 & 0x40000000) != 0) {
              uint64_t v32 = *(void *)(v8 - 8);
            }
            else {
              uint64_t v32 = v8 - 32 * (v10 & 0x7FFFFFF);
            }
            uint64_t v33 = *(void *)(v32 + 32 * *v31 + 8 * v30);
            unsigned int v34 = v210;
            if (v211 == v210)
            {
              unsigned int v35 = v213;
              int v36 = &v211[8 * v213];
              if (v213)
              {
                uint64_t v37 = 0;
                while (*(void *)&v211[v37] != v33)
                {
                  v37 += 8;
                  if (8 * v213 == v37) {
                    goto LABEL_77;
                  }
                }
                int v36 = &v211[v37];
              }
LABEL_77:
              unsigned int v34 = v211;
            }
            else
            {
              unsigned int v38 = v212 - 1;
              unsigned int v39 = (v212 - 1) & ((v33 >> 4) ^ (v33 >> 9));
              int v36 = &v211[8 * v39];
              uint64_t v40 = *(void *)v36;
              if (*(void *)v36 == -1)
              {
                unsigned int v41 = 0;
LABEL_97:
                if (v41) {
                  int v36 = v41;
                }
                unsigned int v35 = v213;
                if (*(void *)v36 != v33) {
                  int v36 = &v211[8 * v212];
                }
              }
              else
              {
                unsigned int v41 = 0;
                int v42 = 1;
                while (v40 != v33)
                {
                  if (v41) {
                    BOOL v43 = 0;
                  }
                  else {
                    BOOL v43 = v40 == -2;
                  }
                  if (v43) {
                    unsigned int v41 = v36;
                  }
                  unsigned int v44 = v39 + v42++;
                  unsigned int v39 = v44 & v38;
                  int v36 = &v211[8 * (v44 & v38)];
                  uint64_t v40 = *(void *)v36;
                  if (*(void *)v36 == -1) {
                    goto LABEL_97;
                  }
                }
                unsigned int v35 = v213;
              }
            }
            unsigned int v45 = v212;
            if (v211 == v34) {
              unsigned int v45 = v35;
            }
            if (v36 != &v211[8 * v45])
            {
              if ((v10 & 0x40000000) != 0)
              {
                uint64_t v46 = *(void *)(v8 - 8);
                int v47 = (uint64_t *)(v46 + 32 * (v10 & 0x7FFFFFF));
              }
              else
              {
                uint64_t v46 = v8 - 32 * (v10 & 0x7FFFFFF);
                int v47 = (uint64_t *)v8;
              }
              sub_1CC5E4108((uint64_t)v208, (uint64_t *)(v46 + 32 * v30 + 32), v47, v46 + 32 * v30);
              int v48 = *(_DWORD *)(v8 + 20);
              if ((v48 & 0x40000000) != 0)
              {
                uint64_t v49 = *(void *)(v8 - 8);
                uint64_t v50 = *(unsigned int *)(v8 + 60);
                uint64_t v51 = v49 + 32 * v50;
                uint64_t v52 = v48 & 0x7FFFFFF;
              }
              else
              {
                uint64_t v52 = v48 & 0x7FFFFFF;
                uint64_t v49 = v8 - 32 * v52;
                uint64_t v50 = *(unsigned int *)(v8 + 60);
                uint64_t v51 = v49 + 32 * v50;
              }
              uint64_t v53 = (unsigned char *)(v51 + 8 * v52);
              uint64_t v54 = (unsigned char *)(v51 + 8 * v30 + 8);
              if (v53 != v54)
              {
                memmove((void *)(v49 + 32 * v50 + 8 * v30), v54, v53 - v54);
                int v48 = *(_DWORD *)(v8 + 20);
              }
              if ((v48 & 0x40000000) != 0)
              {
                uint64_t v55 = *(void *)(v8 - 8);
                uint64_t v56 = v48 & 0x7FFFFFF;
              }
              else
              {
                uint64_t v56 = v48 & 0x7FFFFFF;
                uint64_t v55 = v8 - 32 * v56;
              }
              uint64_t v57 = v55 + 32 * v56;
              if (*(void *)(v57 - 32))
              {
                **(void **)(v57 - 16) = *(void *)(v57 - 24);
                uint64_t v58 = *(void *)(v57 - 24);
                if (v58) {
                  *(void *)(v58 + 16) = *(void *)(v57 - 16);
                }
              }
              *(void *)(v57 - 32) = 0;
              unsigned int v10 = *(_DWORD *)(v8 + 20) & 0xF8000000 | (*(_DWORD *)(v8 + 20) - 1) & 0x7FFFFFF;
              *(_DWORD *)(v8 + 20) = v10;
            }
            BOOL v59 = v30-- <= 0;
          }
          while (!v59);
          uint64_t v69 = v10 & 0x7FFFFFF;
          if (v69 == *v31)
          {
            uint64_t v171 = v7;
            unsigned int v172 = v69 + (v69 >> 1);
            if (v172 <= 2) {
              uint64_t v173 = 2;
            }
            else {
              uint64_t v173 = v172;
            }
            *uint64_t v31 = v173;
            if ((v10 & 0x40000000) != 0) {
              uint64_t v174 = *(uint64_t **)(v8 - 8);
            }
            else {
              uint64_t v174 = (uint64_t *)(v8 - 32 * v69);
            }
            uint64_t v175 = operator new(40 * v173);
            *(void *)(v8 - 8) = v175;
            int v176 = v175;
            do
            {
              void *v176 = 0;
              v176[1] = 0;
              v176[2] = 0;
              v176[3] = v8;
              v176 += 4;
            }
            while (v176 != &v175[4 * v173]);
            int v177 = *(_DWORD *)(v8 + 20);
            if ((v177 & 0x40000000) != 0) {
              uint64_t v178 = (uint64_t)v175;
            }
            else {
              uint64_t v178 = v8 - 32 * (v177 & 0x7FFFFFF);
            }
            sub_1CC5E4108((uint64_t)v208, v174, &v174[4 * v69], v178);
            if (v69)
            {
              memmove((void *)(v178 + 32 * v173), &v174[4 * v69], 8 * v69);
              uint64_t v179 = 4 * v69;
              do
              {
                uint64_t v180 = &v174[v179];
                if (v174[v179 - 4])
                {
                  *(void *)*(v180 - 2) = *(v180 - 3);
                  uint64_t v181 = *(v180 - 3);
                  if (v181) {
                    *(void *)(v181 + 16) = *(v180 - 2);
                  }
                }
                v179 -= 4;
              }
              while (v179 * 8);
            }
            operator delete(v174);
            unsigned int v10 = *(_DWORD *)(v8 + 20);
            uint64_t v7 = v171;
          }
          uint64_t v70 = (v10 + 1) & 0x7FFFFFF;
          *(_DWORD *)(v8 + 20) = v10 & 0xF8000000 | (v10 + 1) & 0x7FFFFFF;
          if ((v10 & 0x40000000) != 0) {
            uint64_t v71 = *(void *)(v8 - 8);
          }
          else {
            uint64_t v71 = v8 - 32 * v70;
          }
          uint64_t v72 = (v70 - 1);
          uint64_t v73 = v71 + 32 * v72;
          if (*(void *)v73)
          {
            **(void **)(v73 + 16) = *(void *)(v73 + 8);
            uint64_t v168 = *(void *)(v73 + 8);
            if (v168) {
              *(void *)(v168 + 16) = *(void *)(v73 + 16);
            }
          }
          *(void *)uint64_t v73 = v11;
          uint64_t v76 = *(void *)(v11 + 8);
          int v75 = (uint64_t *)(v11 + 8);
          uint64_t v74 = v76;
          *(void *)(v73 + 8) = v76;
          if (v76) {
            *(void *)(v74 + 16) = v73 + 8;
          }
          *(void *)(v71 + 32 * v72 + 16) = v75;
          uint64_t *v75 = v73;
          int v77 = *(_DWORD *)(v8 + 20);
          uint64_t v78 = v77 & 0x7FFFFFF;
          if ((v77 & 0x40000000) != 0) {
            uint64_t v79 = *(void *)(v8 - 8);
          }
          else {
            uint64_t v79 = v8 - 32 * v78;
          }
          goto LABEL_220;
        }
      }
LABEL_105:
      uint64_t v60 = *(uint64_t ***)v8;
      if ((v10 & 0x10000000) != 0) {
        break;
      }
      int v81 = 0;
      int v82 = &byte_1CFBCE98E;
LABEL_122:
      __int16 v209 = 773;
      v208[0] = v82;
      v208[1] = v81;
      v208[2] = ".ph";
      int v84 = operator new(0x48uLL);
      uint64_t v85 = v84;
      v84[1] = v60;
      unsigned int v86 = (llvm::Value *)(v84 + 1);
      *int v84 = 0;
      v84[2] = 0;
      uint64_t v204 = v84 + 2;
      v84[3] = 0x4000000000000053;
      *((_OWORD *)v84 + 2) = 0u;
      uint64_t v87 = (char *)(v84 + 4);
      *((_OWORD *)v84 + 3) = 0u;
      *((_DWORD *)v84 + 16) = 0;
      if (a5)
      {
        uint64_t v169 = *(void *)(a5 + 40);
        v84[6] = v169;
        *(_WORD *)(v169 + 18) &= ~0x8000u;
        if ((*((unsigned char *)v84 + 31) & 0x10) != 0)
        {
          uint64_t v190 = *(void *)(v169 + 56);
          if (v190)
          {
            uint64_t v191 = *(llvm::ValueSymbolTable **)(v190 + 104);
            if (v191) {
              llvm::ValueSymbolTable::reinsertValue(v191, v86);
            }
          }
        }
        uint64_t v170 = *v198;
        v85[4] = *v198;
        v85[5] = v198;
        *(void *)(v170 + 8) = v87;
        *int v198 = (uint64_t)v87;
      }
      *((_DWORD *)v85 + 17) = v200;
      llvm::Value::setNameImpl(v86, v208);
      if (!*((unsigned char *)v85 + 24))
      {
        if ((*((unsigned char *)v85 + 31) & 0x10) == 0) {
          goto LABEL_284;
        }
        uint64_t v182 = ***(void ***)v86;
        uint64_t v183 = *(void *)(v182 + 152);
        uint64_t v184 = *(unsigned int *)(v182 + 168);
        if (!v184) {
          goto LABEL_276;
        }
        LODWORD(v185) = (v184 - 1) & ((v86 >> 4) ^ (v86 >> 9));
        uint64_t v186 = (llvm::Value **)(v183 + 16 * v185);
        uint64_t v187 = *v186;
        if (*v186 != v86)
        {
          int v188 = 1;
          while (v187 != (llvm::Value *)-4096)
          {
            int v189 = v185 + v188++;
            uint64_t v185 = v189 & (v184 - 1);
            uint64_t v187 = *(llvm::Value **)(v183 + 16 * v185);
            if (v187 == v86)
            {
              uint64_t v186 = (llvm::Value **)(v183 + 16 * v185);
              goto LABEL_277;
            }
          }
LABEL_276:
          uint64_t v186 = (llvm::Value **)(v183 + 16 * v184);
        }
LABEL_277:
        uint64_t v192 = v186[1];
        unint64_t v195 = *(void *)v192;
        uint64_t v193 = (char *)v192 + 16;
        unint64_t v194 = v195;
        if (v195 >= 5 && (*(_DWORD *)v193 == *(_DWORD *)"llvm." ? (BOOL v196 = v193[4] == aLlvm_1[4]) : (BOOL v196 = 0), v196))
        {
          *((_DWORD *)v85 + 10) |= 0x2000u;
          int v197 = llvm::Function::lookupIntrinsicID(v193, v194);
        }
        else
        {
LABEL_284:
          int v197 = 0;
          *((_DWORD *)v85 + 10) &= ~0x2000u;
        }
        *((_DWORD *)v85 + 11) = v197;
      }
      uint64_t v205 = v7;
      uint64_t v88 = *((unsigned int *)v85 + 17);
      uint64_t v89 = operator new(40 * v88);
      *uint64_t v85 = v89;
      if (v88)
      {
        uint64_t v90 = &v89[4 * v88];
        do
        {
          void *v89 = 0;
          v89[1] = 0;
          void v89[2] = 0;
          v89[3] = v86;
          v89 += 4;
        }
        while (v89 != v90);
      }
      uint64_t v91 = (*(_DWORD *)(v8 + 20) & 0x7FFFFFFu) - 1;
      uint64_t v31 = (_DWORD *)(v8 + 60);
      int v206 = v86;
      do
      {
        int v92 = *(_DWORD *)(v8 + 20);
        if ((v92 & 0x40000000) != 0) {
          uint64_t v93 = *(void *)(v8 - 8);
        }
        else {
          uint64_t v93 = v8 - 32 * (v92 & 0x7FFFFFF);
        }
        uint64_t v94 = *(void *)(v93 + 32 * *v31 + 8 * v91);
        uint64_t v95 = v210;
        if (v211 == v210)
        {
          unsigned int v96 = v213;
          unsigned int v97 = &v211[8 * v213];
          if (v213)
          {
            uint64_t v98 = 0;
            while (*(void *)&v211[v98] != v94)
            {
              v98 += 8;
              if (8 * v213 == v98) {
                goto LABEL_150;
              }
            }
            unsigned int v97 = &v211[v98];
          }
LABEL_150:
          uint64_t v95 = v211;
        }
        else
        {
          unsigned int v99 = v212 - 1;
          unsigned int v100 = (v212 - 1) & ((v94 >> 4) ^ (v94 >> 9));
          unsigned int v97 = &v211[8 * v100];
          uint64_t v101 = *(void *)v97;
          if (*(void *)v97 == -1)
          {
            uint64_t v102 = 0;
LABEL_181:
            if (v102) {
              unsigned int v97 = v102;
            }
            unsigned int v96 = v213;
            if (*(void *)v97 != v94) {
              unsigned int v97 = &v211[8 * v212];
            }
          }
          else
          {
            uint64_t v102 = 0;
            int v103 = 1;
            while (v101 != v94)
            {
              if (v102) {
                BOOL v104 = 0;
              }
              else {
                BOOL v104 = v101 == -2;
              }
              if (v104) {
                uint64_t v102 = v97;
              }
              unsigned int v105 = v100 + v103++;
              unsigned int v100 = v105 & v99;
              unsigned int v97 = &v211[8 * (v105 & v99)];
              uint64_t v101 = *(void *)v97;
              if (*(void *)v97 == -1) {
                goto LABEL_181;
              }
            }
            unsigned int v96 = v213;
          }
        }
        if (v211 == v95) {
          unsigned int v106 = v96;
        }
        else {
          unsigned int v106 = v212;
        }
        if (v97 != &v211[8 * v106])
        {
          if ((v92 & 0x40000000) != 0)
          {
            uint64_t v107 = *(void *)(v8 - 8);
            uint64_t v108 = (uint64_t *)(v107 + 32 * (v92 & 0x7FFFFFF));
          }
          else
          {
            uint64_t v107 = v8 - 32 * (v92 & 0x7FFFFFF);
            uint64_t v108 = (uint64_t *)v8;
          }
          uint64_t v109 = (uint64_t *)(v107 + 32 * v91);
          uint64_t v110 = *v109;
          sub_1CC5E4108((uint64_t)v208, v109 + 4, v108, (uint64_t)v109);
          int v111 = *(_DWORD *)(v8 + 20);
          if ((v111 & 0x40000000) != 0)
          {
            uint64_t v112 = *(void *)(v8 - 8);
            uint64_t v113 = *(unsigned int *)(v8 + 60);
            uint64_t v114 = v112 + 32 * v113;
            uint64_t v115 = v111 & 0x7FFFFFF;
          }
          else
          {
            uint64_t v115 = v111 & 0x7FFFFFF;
            uint64_t v112 = v8 - 32 * v115;
            uint64_t v113 = *(unsigned int *)(v8 + 60);
            uint64_t v114 = v112 + 32 * v113;
          }
          uint64_t v116 = (unsigned char *)(v114 + 8 * v115);
          uint64_t v117 = (unsigned char *)(v114 + 8 * v91 + 8);
          if (v116 != v117)
          {
            memmove((void *)(v112 + 32 * v113 + 8 * v91), v117, v116 - v117);
            int v111 = *(_DWORD *)(v8 + 20);
          }
          if ((v111 & 0x40000000) != 0)
          {
            uint64_t v118 = *(void *)(v8 - 8);
            uint64_t v119 = v111 & 0x7FFFFFF;
          }
          else
          {
            uint64_t v119 = v111 & 0x7FFFFFF;
            uint64_t v118 = v8 - 32 * v119;
          }
          uint64_t v120 = v118 + 32 * v119;
          if (*(void *)(v120 - 32))
          {
            **(void **)(v120 - 16) = *(void *)(v120 - 24);
            uint64_t v121 = *(void *)(v120 - 24);
            if (v121) {
              *(void *)(v121 + 16) = *(void *)(v120 - 16);
            }
          }
          *(void *)(v120 - 32) = 0;
          *(_DWORD *)(v8 + 20) = *(_DWORD *)(v8 + 20) & 0xF8000000 | (*(_DWORD *)(v8 + 20) - 1) & 0x7FFFFFF;
          int v122 = *((_DWORD *)v85 + 7);
          uint64_t v123 = v122 & 0x7FFFFFF;
          if ((v122 & 0x7FFFFFF) == *((_DWORD *)v85 + 17))
          {
            unsigned int v136 = v123 + (v123 >> 1);
            if (v136 <= 2) {
              uint64_t v137 = 2;
            }
            else {
              uint64_t v137 = v136;
            }
            *((_DWORD *)v85 + 17) = v137;
            if ((v122 & 0x40000000) != 0) {
              uint64_t v138 = (uint64_t *)*v85;
            }
            else {
              uint64_t v138 = (uint64_t *)((char *)v86 - 32 * v123);
            }
            __p = v138;
            int v139 = operator new(40 * v137);
            *uint64_t v85 = v139;
            BOOL v140 = v139;
            do
            {
              *BOOL v140 = 0;
              v140[1] = 0;
              v140[2] = 0;
              v140[3] = v86;
              v140 += 4;
            }
            while (v140 != &v139[4 * v137]);
            int v141 = *((_DWORD *)v85 + 7);
            if ((v141 & 0x40000000) != 0) {
              uint64_t v142 = (uint64_t)v139;
            }
            else {
              uint64_t v142 = (uint64_t)v86 - 32 * (v141 & 0x7FFFFFF);
            }
            sub_1CC5E4108((uint64_t)v208, __p, &__p[4 * v123], v142);
            if (v123)
            {
              memmove((void *)(v142 + 32 * v137), &__p[4 * v123], 8 * v123);
              uint64_t v143 = 4 * v123;
              do
              {
                int v144 = &__p[v143];
                if (__p[v143 - 4])
                {
                  *(void *)*(v144 - 2) = *(v144 - 3);
                  uint64_t v145 = *(v144 - 3);
                  if (v145) {
                    *(void *)(v145 + 16) = *(v144 - 2);
                  }
                }
                v143 -= 4;
              }
              while (v143 * 8);
            }
            operator delete(__p);
            int v122 = *((_DWORD *)v85 + 7);
            unsigned int v86 = v206;
            uint64_t v31 = (_DWORD *)(v8 + 60);
          }
          uint64_t v124 = (v122 + 1) & 0x7FFFFFF;
          *((_DWORD *)v85 + 7) = v122 & 0xF8000000 | (v122 + 1) & 0x7FFFFFF;
          if ((v122 & 0x40000000) != 0) {
            uint64_t v125 = (char *)*v85;
          }
          else {
            uint64_t v125 = (char *)v86 - 32 * v124;
          }
          uint64_t v126 = (v124 - 1);
          int v127 = &v125[32 * v126];
          if (*(void *)v127)
          {
            **((void **)v127 + 2) = *((void *)v127 + 1);
            uint64_t v135 = *((void *)v127 + 1);
            if (v135) {
              *(void *)(v135 + 16) = *((void *)v127 + 2);
            }
          }
          *(void *)int v127 = v110;
          if (v110)
          {
            uint64_t v130 = *(void *)(v110 + 8);
            uint64_t v129 = (char **)(v110 + 8);
            uint64_t v128 = v130;
            uint64_t v131 = &v125[32 * v126];
            *((void *)v131 + 1) = v130;
            if (v130) {
              *(void *)(v128 + 16) = v131 + 8;
            }
            *((void *)v131 + 2) = v129;
            *uint64_t v129 = v127;
          }
          int v132 = *((_DWORD *)v85 + 7);
          uint64_t v133 = v132 & 0x7FFFFFF;
          if ((v132 & 0x40000000) != 0) {
            unsigned int v134 = (char *)*v85;
          }
          else {
            unsigned int v134 = (char *)v86 - 32 * v133;
          }
          *(void *)&v134[32 * *((unsigned int *)v85 + 17) + 8 * (v133 - 1)] = v94;
        }
        BOOL v59 = v91-- <= 0;
      }
      while (!v59);
      int v146 = *(_DWORD *)(v8 + 20);
      uint64_t v147 = v146 & 0x7FFFFFF;
      if ((v146 & 0x7FFFFFF) == *(_DWORD *)(v8 + 60))
      {
        unsigned int v157 = v147 + (v147 >> 1);
        if (v157 <= 2) {
          uint64_t v158 = 2;
        }
        else {
          uint64_t v158 = v157;
        }
        *uint64_t v31 = v158;
        if ((v146 & 0x40000000) != 0) {
          uint64_t v159 = *(uint64_t **)(v8 - 8);
        }
        else {
          uint64_t v159 = (uint64_t *)(v8 - 32 * v147);
        }
        int v160 = v86;
        v161 = operator new(40 * v158);
        *(void *)(v8 - 8) = v161;
        unint64_t v162 = v161;
        do
        {
          void *v162 = 0;
          v162[1] = 0;
          v162[2] = 0;
          v162[3] = v8;
          v162 += 4;
        }
        while (v162 != &v161[4 * v158]);
        int v163 = *(_DWORD *)(v8 + 20);
        if ((v163 & 0x40000000) != 0) {
          uint64_t v164 = (uint64_t)v161;
        }
        else {
          uint64_t v164 = v8 - 32 * (v163 & 0x7FFFFFF);
        }
        sub_1CC5E4108((uint64_t)v208, v159, &v159[4 * v147], v164);
        if (v147)
        {
          memmove((void *)(v164 + 32 * v158), &v159[4 * v147], 8 * v147);
          uint64_t v165 = 4 * v147;
          do
          {
            uint64_t v166 = &v159[v165];
            if (v159[v165 - 4])
            {
              *(void *)*(v166 - 2) = *(v166 - 3);
              uint64_t v167 = *(v166 - 3);
              if (v167) {
                *(void *)(v167 + 16) = *(v166 - 2);
              }
            }
            v165 -= 4;
          }
          while (v165 * 8);
        }
        operator delete(v159);
        int v146 = *(_DWORD *)(v8 + 20);
        uint64_t v148 = v204;
        uint64_t v7 = v205;
        uint64_t v31 = (_DWORD *)(v8 + 60);
        unsigned int v86 = v160;
      }
      else
      {
        uint64_t v148 = v204;
        uint64_t v7 = v205;
      }
      uint64_t v149 = (v146 + 1) & 0x7FFFFFF;
      *(_DWORD *)(v8 + 20) = v146 & 0xF8000000 | (v146 + 1) & 0x7FFFFFF;
      if ((v146 & 0x40000000) != 0) {
        uint64_t v150 = *(void *)(v8 - 8);
      }
      else {
        uint64_t v150 = v8 - 32 * v149;
      }
      uint64_t v151 = (v149 - 1);
      uint64_t v152 = v150 + 32 * v151;
      if (*(void *)v152)
      {
        **(void **)(v152 + 16) = *(void *)(v152 + 8);
        uint64_t v156 = *(void *)(v152 + 8);
        if (v156) {
          *(void *)(v156 + 16) = *(void *)(v152 + 16);
        }
      }
      *(void *)uint64_t v152 = v86;
      uint64_t v153 = *v148;
      *(void *)(v152 + 8) = *v148;
      if (v153) {
        *(void *)(v153 + 16) = v152 + 8;
      }
      *(void *)(v150 + 32 * v151 + 16) = v148;
      *uint64_t v148 = v152;
      int v154 = *(_DWORD *)(v8 + 20);
      uint64_t v78 = v154 & 0x7FFFFFF;
      if ((v154 & 0x40000000) != 0) {
        uint64_t v79 = *(void *)(v8 - 8);
      }
      else {
        uint64_t v79 = v8 - 32 * v78;
      }
LABEL_220:
      *(void *)(v79 + 32 * *v31 + 8 * (v78 - 1)) = a2;
      uint64_t v8 = v7 - 24;
      if (v7) {
        uint64_t v155 = v7 - 24;
      }
      else {
        uint64_t v155 = 0;
      }
      if (*(unsigned char *)(v155 + 16) != 83) {
        goto LABEL_292;
      }
    }
    uint64_t v61 = **v60;
    uint64_t v62 = *(void *)(v61 + 152);
    uint64_t v63 = *(unsigned int *)(v61 + 168);
    if (v63)
    {
      LODWORD(v64) = (v63 - 1) & ((v8 >> 4) ^ (v8 >> 9));
      int v65 = (uint64_t *)(v62 + 16 * v64);
      uint64_t v66 = *v65;
      if (*v65 == v8)
      {
LABEL_121:
        uint64_t v80 = (void *)v65[1];
        BOOL v83 = (const char *)*v80;
        int v82 = (const char *)(v80 + 2);
        int v81 = v83;
        goto LABEL_122;
      }
      int v67 = 1;
      while (v66 != -4096)
      {
        int v68 = v64 + v67++;
        uint64_t v64 = v68 & (v63 - 1);
        uint64_t v66 = *(void *)(v62 + 16 * v64);
        if (v66 == v8)
        {
          int v65 = (uint64_t *)(v62 + 16 * v64);
          goto LABEL_121;
        }
      }
    }
    int v65 = (uint64_t *)(v62 + 16 * v63);
    goto LABEL_121;
  }
LABEL_292:
  if (v211 != v210) {
    free(v211);
  }
}

uint64_t sub_1CD12DE1C()
{
  int v3 = 8;
  uint64_t v4 = &v3;
  int v2 = 1;
  *(void *)&long long v1 = "Set the maximum path length when checking whether a basic block is followed by a block that either ha"
                   "s a terminating deoptimizing call or is terminated with an unreachable";
  *((void *)&v1 + 1) = 171;
  sub_1CD8769B0(&v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBD0C218, &dword_1CB82C000);
}

void sub_1CD12DE94()
{
}

uint64_t sub_1CD12DF30(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EA61F348;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2647B58;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFB8A8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CD12DE94;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCFB8A8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t llvm::SplitCriticalEdge(llvm::Instruction *a1, unsigned int a2, uint64_t a3, llvm::Twine *a4)
{
  int v8 = *(unsigned __int8 *)(a3 + 32);
  uint64_t Successor = llvm::Instruction::getSuccessor(a1, a2);
  if (!llvm::isCriticalEdge((uint64_t)a1, Successor, v8)) {
    return 0;
  }

  return llvm::SplitKnownCriticalEdge(a1, a2, a3, a4);
}

uint64_t llvm::SplitKnownCriticalEdge(llvm::Instruction *a1, unsigned int a2, uint64_t a3, llvm::Twine *a4)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = (llvm::BasicBlock *)*((void *)a1 + 5);
  int v77 = v6;
  uint64_t Successor = (llvm::BasicBlock *)llvm::Instruction::getSuccessor(a1, a2);
  int v8 = Successor;
  for (uint64_t i = *((void *)Successor + 6); ; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v10 = i - 24;
    if (!i) {
      uint64_t v10 = 0;
    }
    if (*(unsigned char *)(v10 + 16) != 83) {
      break;
    }
  }
  unsigned int v11 = *(unsigned __int8 *)(i - 8) - 38;
  BOOL v28 = v11 > 0x38;
  uint64_t v12 = (1 << v11) & 0x100060000000001;
  BOOL v13 = v28 || v12 == 0;
  if (!v13 || *(unsigned char *)(a3 + 35) && llvm::BasicBlock::getFirstNonPHIOrDbgOrLifetime(Successor, 1)[16] == 35) {
    return 0;
  }
  uint64_t v15 = *(uint64_t **)(a3 + 16);
  uint64_t v80 = v82;
  *(void *)int v81 = 0x400000000;
  if (!v15) {
    goto LABEL_74;
  }
  int v16 = *((_DWORD *)v15 + 4);
  if (!v16) {
    goto LABEL_74;
  }
  uint64_t v17 = *v15;
  unsigned int v18 = v16 - 1;
  uint64_t v19 = (v16 - 1) & ((v6 >> 4) ^ (v6 >> 9));
  uint64_t v20 = *(llvm::BasicBlock **)(*v15 + 16 * v19);
  if (v6 != v20)
  {
    int v21 = 1;
    do
    {
      if (v20 == (llvm::BasicBlock *)-4096) {
        goto LABEL_74;
      }
      int v22 = v19 + v21++;
      uint64_t v19 = v22 & v18;
      uint64_t v20 = *(llvm::BasicBlock **)(v17 + 16 * v19);
    }
    while (v6 != v20);
  }
  uint64_t v23 = *(void *)(v17 + 16 * v19 + 8);
  if (!v23) {
    goto LABEL_74;
  }
  uint64_t v24 = *((void *)v8 + 1);
  if (!v24) {
    goto LABEL_74;
  }
  while (1)
  {
    uint64_t v25 = *(void *)(v24 + 24);
    unsigned int v26 = *(unsigned __int8 *)(v25 + 16);
    BOOL v27 = v25 && v26 >= 0x1C;
    BOOL v28 = !v27 || v26 - 29 > 0xA;
    if (!v28) {
      break;
    }
    uint64_t v24 = *(void *)(v24 + 8);
    if (!v24)
    {
LABEL_74:
      llvm::Twine::str(a4, __p);
      if (SHIBYTE(v84) >= 0) {
        uint64_t v50 = (void *)HIBYTE(v84);
      }
      else {
        uint64_t v50 = __p[1];
      }
      if (SHIBYTE(v84) < 0) {
        operator delete(__p[0]);
      }
      if (v50) {
        operator new();
      }
      if ((*((unsigned char *)v6 + 23) & 0x10) != 0)
      {
        uint64_t v51 = ***(void ***)v6;
        uint64_t v52 = *(void *)(v51 + 152);
        uint64_t v53 = *(unsigned int *)(v51 + 168);
        if (v53)
        {
          LODWORD(v54) = (v53 - 1) & ((v6 >> 4) ^ (v6 >> 9));
          uint64_t v55 = (llvm::BasicBlock **)(v52 + 16 * v54);
          uint64_t v56 = *v55;
          if (*v55 != v6)
          {
            int v57 = 1;
            do
            {
              if (v56 == (llvm::BasicBlock *)-4096) {
                goto LABEL_88;
              }
              int v58 = v54 + v57++;
              uint64_t v54 = v58 & (v53 - 1);
              uint64_t v56 = *(llvm::BasicBlock **)(v52 + 16 * v54);
            }
            while (v56 != v6);
            uint64_t v55 = (llvm::BasicBlock **)(v52 + 16 * v54);
          }
        }
        else
        {
LABEL_88:
          uint64_t v55 = (llvm::BasicBlock **)(v52 + 16 * v53);
        }
        BOOL v59 = v55[1];
        uint64_t v62 = *(void *)v59;
        uint64_t v60 = (char *)v59 + 16;
        uint64_t v61 = v62;
      }
      else
      {
        uint64_t v61 = 0;
        uint64_t v60 = &byte_1CFBCE98E;
      }
      __int16 v76 = 773;
      v75[0] = v60;
      v75[1] = v61;
      v75[2] = ".";
      if ((*((unsigned char *)v8 + 23) & 0x10) != 0)
      {
        uint64_t v63 = ***(void ***)v8;
        uint64_t v64 = *(void *)(v63 + 152);
        uint64_t v65 = *(unsigned int *)(v63 + 168);
        if (v65)
        {
          LODWORD(v66) = (v65 - 1) & ((v8 >> 4) ^ (v8 >> 9));
          int v67 = (llvm::BasicBlock **)(v64 + 16 * v66);
          int v68 = *v67;
          if (*v67 != v8)
          {
            int v69 = 1;
            do
            {
              if (v68 == (llvm::BasicBlock *)-4096) {
                goto LABEL_97;
              }
              int v70 = v66 + v69++;
              uint64_t v66 = v70 & (v65 - 1);
              int v68 = *(llvm::BasicBlock **)(v64 + 16 * v66);
            }
            while (v68 != v8);
            int v67 = (llvm::BasicBlock **)(v64 + 16 * v66);
          }
        }
        else
        {
LABEL_97:
          int v67 = (llvm::BasicBlock **)(v64 + 16 * v65);
        }
        uint64_t v71 = v67[1];
        uint64_t v74 = *(void **)v71;
        uint64_t v72 = (char *)v71 + 16;
        uint64_t v73 = v74;
      }
      else
      {
        uint64_t v73 = 0;
        uint64_t v72 = &byte_1CFBCE98E;
      }
      v78[0] = v75;
      v78[2] = v72;
      v78[3] = v73;
      LOWORD(v79) = 1282;
      __p[0] = v78;
      int v84 = "_crit_edge";
      __int16 v85 = 770;
      operator new();
    }
  }
  unsigned int v29 = 0;
LABEL_31:
  uint64_t v30 = *(llvm::BasicBlock **)(v25 + 40);
  if (v30 == v6) {
    goto LABEL_42;
  }
  int v31 = *((_DWORD *)v15 + 4);
  if (v31)
  {
    uint64_t v32 = *v15;
    unsigned int v33 = v31 - 1;
    uint64_t v34 = (v31 - 1) & ((v30 >> 4) ^ (v30 >> 9));
    unsigned int v35 = *(llvm::BasicBlock **)(*v15 + 16 * v34);
    if (v30 == v35)
    {
LABEL_37:
      uint64_t v38 = *(void *)(v32 + 16 * v34 + 8);
      goto LABEL_39;
    }
    int v36 = 1;
    while (v35 != (llvm::BasicBlock *)-4096)
    {
      int v37 = v34 + v36++;
      uint64_t v34 = v37 & v33;
      unsigned int v35 = *(llvm::BasicBlock **)(v32 + 16 * v34);
      if (v30 == v35) {
        goto LABEL_37;
      }
    }
  }
  uint64_t v38 = 0;
LABEL_39:
  if (v38 != v23) {
    goto LABEL_73;
  }
  if (v29 >= v81[1]) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((void *)v80 + v29) = v30;
  unsigned int v29 = ++v81[0];
LABEL_42:
  while (1)
  {
    uint64_t v24 = *(void *)(v24 + 8);
    if (!v24) {
      break;
    }
    uint64_t v25 = *(void *)(v24 + 24);
    unsigned int v39 = *(unsigned __int8 *)(v25 + 16);
    if (v25) {
      BOOL v40 = v39 >= 0x1C;
    }
    else {
      BOOL v40 = 0;
    }
    if (v40 && v39 - 29 < 0xB) {
      goto LABEL_31;
    }
  }
  if (!v29) {
    goto LABEL_74;
  }
  int v42 = (char *)v80;
  uint64_t v43 = 8 * v29;
  while (1)
  {
    uint64_t v44 = *(void *)(*(void *)v42 + 40);
    if (v44 == *(void *)v42 + 40)
    {
      int v48 = MEMORY[0x10];
    }
    else
    {
      uint64_t v45 = v44 - 24;
      if (!v44) {
        uint64_t v45 = 0;
      }
      unsigned int v46 = *(unsigned __int8 *)(v45 + 16) - 40;
      if (v46 >= 0xFFFFFFF5) {
        uint64_t v47 = v45;
      }
      else {
        uint64_t v47 = 0;
      }
      int v48 = *(unsigned __int8 *)(v47 + 16);
      if (v44)
      {
        if (v48 == 39 && v46 > 0xFFFFFFF4)
        {
          if (*(void *)(v47 - 32 * *(unsigned int *)(v47 + 80) - 64) != *(void *)v42) {
            break;
          }
          goto LABEL_70;
        }
      }
    }
    if (v48 == 32) {
      break;
    }
LABEL_70:
    v42 += 8;
    v43 -= 8;
    if (!v43) {
      goto LABEL_74;
    }
  }
  if (!*(unsigned char *)(a3 + 36))
  {
LABEL_73:
    v81[0] = 0;
    goto LABEL_74;
  }
  if (v80 != v82) {
    free(v80);
  }
  return 0;
}

uint64_t llvm::SplitIndirectBrCriticalEdges(llvm *this, llvm::Function *a2, uint64_t a3, llvm::BranchProbabilityInfo *a4, llvm::BlockFrequencyInfo *a5)
{
  int v5 = (int)a2;
  v91[16] = *MEMORY[0x1E4F143B8];
  uint64_t v86 = 1;
  uint64_t v6 = 8;
  int64x2_t v7 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)((char *)&v86 + v6) = v7;
    v6 += 16;
  }
  while (v6 != 136);
  uint64_t v89 = v91;
  uint64_t v90 = 0x1000000000;
  int v8 = (char *)this + 72;
  uint64_t v9 = (char *)*((void *)this + 10);
  if (v9 == (char *)this + 72) {
    goto LABEL_161;
  }
  unsigned int v10 = 0;
  do
  {
    if (v9) {
      unsigned int v11 = v9 - 24;
    }
    else {
      unsigned int v11 = 0;
    }
    uint64_t v12 = (char *)*((void *)v11 + 5);
    if (v12 != v11 + 40)
    {
      uint64_t v13 = v12 ? (uint64_t)(v12 - 24) : 0;
      unsigned int v14 = *(unsigned __int8 *)(v13 + 16) - 40;
      uint64_t v15 = v14 >= 0xFFFFFFF5 ? v13 : 0;
      if (v12)
      {
        if (*(unsigned char *)(v15 + 16) == 32 && v14 >= 0xFFFFFFF5)
        {
          int v17 = *(_DWORD *)(v15 + 20) & 0x7FFFFFF;
          uint64_t v18 = (v17 - 1);
          if (v17 != 1)
          {
            uint64_t v19 = 0;
            do
            {
              int v20 = *(_DWORD *)(v15 + 20);
              if ((v20 & 0x40000000) != 0) {
                uint64_t v21 = *(void *)(v15 - 8);
              }
              else {
                uint64_t v21 = v15 - 32 * (v20 & 0x7FFFFFF);
              }
              ++v19;
              int v22 = *(void **)(v21 + 32 * v19);
              BOOL v83 = v22;
              if (v86)
              {
                int v23 = 16;
                uint64_t v24 = &v87;
              }
              else
              {
                int v23 = v88;
                if (!v88)
                {
                  unsigned int v33 = 0;
LABEL_43:
                  uint64_t v34 = sub_1CCD11EEC((uint64_t)&v86, (uint64_t)&v83, &v83, v33);
                  *uint64_t v34 = v83;
                  if (v90 >= (unint64_t)HIDWORD(v90)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v89 + v90) = v83;
                  unsigned int v10 = v90 + 1;
                  LODWORD(v90) = v90 + 1;
                  continue;
                }
                uint64_t v24 = v87;
              }
              int v25 = v23 - 1;
              unsigned int v26 = v25 & ((v22 >> 4) ^ (v22 >> 9));
              BOOL v27 = &v24[v26];
              BOOL v28 = (void *)*v27;
              if (v22 != (void *)*v27)
              {
                unsigned int v29 = 0;
                int v30 = 1;
                while (v28 != (void *)-4096)
                {
                  if (v29) {
                    BOOL v31 = 0;
                  }
                  else {
                    BOOL v31 = v28 == (void *)-8192;
                  }
                  if (v31) {
                    unsigned int v29 = v27;
                  }
                  unsigned int v32 = v26 + v30++;
                  unsigned int v26 = v32 & v25;
                  BOOL v27 = &v24[v26];
                  BOOL v28 = (void *)*v27;
                  if (v22 == (void *)*v27) {
                    goto LABEL_45;
                  }
                }
                if (v29) {
                  unsigned int v33 = v29;
                }
                else {
                  unsigned int v33 = v27;
                }
                goto LABEL_43;
              }
LABEL_45:
              ;
            }
            while (v19 != v18);
          }
        }
      }
    }
    uint64_t v9 = (char *)*((void *)v9 + 1);
  }
  while (v9 != v8);
  unsigned int v35 = (char *)v89;
  if (v10)
  {
    if (a3) {
      BOOL v36 = a4 == 0;
    }
    else {
      BOOL v36 = 1;
    }
    int v37 = !v36;
    int v76 = v37;
    uint64_t v38 = (char *)v89 + 8 * v10;
    do
    {
      unsigned int v39 = *(void **)v35;
      if (!v5 || (void *)v39[5] != v39 + 5 && (uint64_t v40 = v39[6]) != 0 && *(unsigned char *)(v40 - 8) == 83)
      {
        BOOL v83 = v85;
        uint64_t v84 = 0x1000000000;
        uint64_t v41 = v39[1];
        if (v41)
        {
          while (1)
          {
            uint64_t v42 = *(void *)(v41 + 24);
            unsigned int v43 = *(unsigned __int8 *)(v42 + 16);
            BOOL v44 = v42 && v43 >= 0x1C;
            BOOL v45 = !v44 || v43 - 29 > 0xA;
            if (!v45) {
              break;
            }
            uint64_t v41 = *(void *)(v41 + 8);
            if (!v41) {
              goto LABEL_107;
            }
          }
          unsigned int v46 = 0;
          uint64_t v47 = 0;
LABEL_73:
          uint64_t v48 = *(void *)(v42 + 40);
          uint64_t v49 = *(void *)(v48 + 40);
          if (v49) {
            uint64_t v50 = v49 - 24;
          }
          else {
            uint64_t v50 = 0;
          }
          if (*(unsigned __int8 *)(v50 + 16) - 29 >= 0xB) {
            uint64_t v50 = 0;
          }
          int v51 = *(unsigned __int8 *)(v50 + 16);
          if ((v51 - 30) >= 2)
          {
            if (v51 == 32 && v47 == 0) {
              goto LABEL_86;
            }
          }
          else
          {
            if (v46 >= HIDWORD(v84)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v83 + v46) = v48;
            unsigned int v46 = v84 + 1;
            LODWORD(v84) = v84 + 1;
            uint64_t v48 = v47;
LABEL_86:
            while (1)
            {
              uint64_t v41 = *(void *)(v41 + 8);
              if (!v41) {
                break;
              }
              uint64_t v42 = *(void *)(v41 + 24);
              unsigned int v53 = *(unsigned __int8 *)(v42 + 16);
              if (v42) {
                BOOL v54 = v53 >= 0x1C;
              }
              else {
                BOOL v54 = 0;
              }
              if (v54 && v53 - 29 < 0xB)
              {
                uint64_t v47 = v48;
                goto LABEL_73;
              }
            }
            if (v48 && v46)
            {
              for (uint64_t i = v39[6]; ; uint64_t i = *(void *)(i + 8))
              {
                uint64_t v57 = i - 24;
                if (!i) {
                  uint64_t v57 = 0;
                }
                if (*(unsigned char *)(v57 + 16) != 83) {
                  break;
                }
              }
              unsigned int v58 = *(unsigned __int8 *)(i - 8) - 38;
              BOOL v45 = v58 > 0x38;
              uint64_t v59 = (1 << v58) & 0x100060000000001;
              if (v45 || v59 == 0)
              {
                int v75 = v38;
                uint64_t v61 = v39 + 5;
                uint64_t v62 = v39 + 6;
                do
                {
                  uint64_t v63 = *v62;
                  uint64_t v64 = v63 - 24;
                  if (!v63) {
                    uint64_t v64 = 0;
                  }
                  int v65 = *(unsigned __int8 *)(v64 + 16);
                  uint64_t v62 = (uint64_t *)(v63 + 8);
                }
                while (v65 == 83);
                if (v65 != 94)
                {
                  uint64_t v80 = &v82;
                  uint64_t v81 = 0x400000000;
                  if (v76)
                  {
                    uint64_t v66 = (void *)*v61;
                    if ((void *)*v61 == v61)
                    {
                      int v67 = 0;
                    }
                    else
                    {
                      int v67 = v66 - 3;
                      if (!v66) {
                        int v67 = 0;
                      }
                      if (*((unsigned __int8 *)v67 + 16) - 29 >= 0xB) {
                        int v67 = 0;
                      }
                    }
                    if (*((unsigned __int8 *)v67 + 16) - 29 >= 2)
                    {
                      switch(*((unsigned char *)v67 + 16))
                      {
                        case ' ':
                        case '&':
                          unsigned int v72 = (*((_DWORD *)v67 + 5) & 0x7FFFFFF) - 1;
                          goto LABEL_148;
                        case '!':
                        case '""':
                        case '#':
                        case '$':
                        case '%':
                          break;
                        case '\'':
                          unsigned int v72 = *((_DWORD *)v67 + 20) + 1;
                          goto LABEL_148;
                        default:
                          unsigned int v72 = (*((_DWORD *)v67 + 5) >> 1) & 0x3FFFFFF;
LABEL_148:
                          if (v72 >= 5) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          return result;
                      }
                    }
                    if (v66 == v61)
                    {
                      int v68 = 0;
                    }
                    else
                    {
                      if (v66) {
                        int v68 = v66 - 3;
                      }
                      else {
                        int v68 = 0;
                      }
                      if (*((unsigned __int8 *)v68 + 16) - 29 >= 0xB) {
                        int v68 = 0;
                      }
                    }
                    if (*((unsigned char *)v68 + 16) != 30)
                    {
                      int v69 = 2;
                      switch(*((unsigned char *)v68 + 16))
                      {
                        case 0x1E:
                          __break(1u);
                          JUMPOUT(0x1CD13035CLL);
                        case 0x1F:
                          int v69 = (*((_DWORD *)v68 + 5) >> 1) & 0x3FFFFFF;
                          goto LABEL_151;
                        case 0x20:
                        case 0x26:
                          int v69 = (*((_DWORD *)v68 + 5) & 0x7FFFFFF) - 1;
                          goto LABEL_151;
                        case 0x21:
                          goto LABEL_138;
                        case 0x24:
                          int v69 = *((_WORD *)v68 + 9) & 1;
                          goto LABEL_151;
                        case 0x25:
                          int v69 = 1;
                          goto LABEL_138;
                        case 0x27:
                          int v69 = *((_DWORD *)v68 + 20) + 1;
LABEL_151:
                          if (!v69) {
                            goto LABEL_144;
                          }
                          goto LABEL_138;
                        default:
                          goto LABEL_144;
                      }
                    }
                    if ((*((_DWORD *)v68 + 5) & 0x7FFFFFF) == 3) {
                      int v69 = 2;
                    }
                    else {
                      int v69 = 1;
                    }
LABEL_138:
                    for (int j = 0; j != v69; ++j)
                    {
                      int EdgeProbability = llvm::BranchProbabilityInfo::getEdgeProbability(a3, (uint64_t)v39, j);
                      if (v81 >= HIDWORD(v81)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((_DWORD *)v80 + v81) = EdgeProbability;
                      LODWORD(v81) = v81 + 1;
                    }
LABEL_144:
                    llvm::BranchProbabilityInfo::eraseBlock(a3, (const llvm::BasicBlock *)v39);
                  }
                  uint64_t v78 = ".split";
                  __int16 v79 = 259;
                  llvm::BasicBlock::splitBasicBlock((uint64_t)v39, i, (uint64_t)&v78, 0);
                }
                uint64_t v38 = v75;
              }
            }
          }
        }
LABEL_107:
        if (v83 != v85) {
          free(v83);
        }
      }
      v35 += 8;
    }
    while (v35 != v38);
    unsigned int v35 = (char *)v89;
  }
  if (v35 != (char *)v91) {
    free(v35);
  }
LABEL_161:
  if ((v86 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v87, 8);
  }
  return 0;
}

void sub_1CD1303AC()
{
}

void sub_1CD1303EC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD130424(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 112;
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, v3, (uint64_t)&llvm::LoopInfoWrapperPass::ID);

  sub_1CB843600(a2, v3, (uint64_t)&unk_1EA61F34C);
}

BOOL sub_1CD130490(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24);
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(v4, &llvm::DominatorTreeWrapperPass::ID, 1);
  if (AnalysisPass)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::DominatorTreeWrapperPass::ID);
    uint64_t v4 = *(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24);
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = llvm::PMDataManager::findAnalysisPass(v4, &llvm::PostDominatorTreeWrapperPass::ID, 1);
  if (v7)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::PostDominatorTreeWrapperPass::ID);
    uint64_t v4 = *(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = llvm::PMDataManager::findAnalysisPass(v4, &llvm::LoopInfoWrapperPass::ID, 1);
  if (v9) {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v9 + 96))(v9, &llvm::LoopInfoWrapperPass::ID);
  }
  uint64_t v10 = v8 + 32;
  if (!v8) {
    uint64_t v10 = 0;
  }
  uint64_t v11 = v6 + 32;
  if (!v6) {
    uint64_t v11 = 0;
  }
  v14[0] = v11;
  v14[1] = v10;
  if (v9) {
    uint64_t v12 = v9 + 32;
  }
  else {
    uint64_t v12 = 0;
  }
  v14[2] = v12;
  v14[3] = 0;
  int v15 = 0;
  char v16 = 1;
  return llvm::SplitAllCriticalEdges(a2, (uint64_t)v14) != 0;
}

uint64_t llvm::inferLibFuncAttributes(uint64_t ***a1, uint64_t *a2)
{
  unsigned int v322 = 0;
  BOOL LibFunc = llvm::TargetLibraryInfoImpl::getLibFunc(*a2, a1, &v322);
  uint64_t result = 0;
  if (!LibFunc) {
    return result;
  }
  unsigned int v6 = v322;
  if (((*(void *)(a2[1] + (((unint64_t)v322 >> 3) & 0x1FFFFFF8)) >> v322) & 1) != 0
    || ((*(unsigned __int8 *)(*a2 + ((unint64_t)v322 >> 2)) >> (2 * (v322 & 3))) & 3) == 0)
  {
    return 0;
  }
  if (llvm::isLibFreeFunction((llvm::Function *)a1, v322)
    || (llvm::isReallocLikeFn((unint64_t)a1, a2) & 1) != 0
    || (int v15 = a1[14]) != 0 && (*((unsigned char *)v15 + 15) & 2) != 0)
  {
    int v7 = 0;
  }
  else
  {
    a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 25);
    int v7 = 1;
  }
  uint64_t v8 = (llvm::Module *)a1[5];
  if (v8 && llvm::Module::getRtLibUseGOT(v8))
  {
    uint64_t v9 = a1[14];
    if (v9 && ((_BYTE)v9[2] & 0x40) != 0)
    {
      int v10 = 0;
    }
    else
    {
      a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 38);
      int v10 = 1;
    }
    v7 |= v10;
  }
  uint64_t result = 0;
  switch(v6)
  {
    case 0x14u:
    case 0xB7u:
    case 0xB8u:
    case 0xC2u:
    case 0xDAu:
    case 0xDCu:
    case 0xDEu:
    case 0xE2u:
    case 0xE3u:
    case 0xE7u:
    case 0xE9u:
    case 0x108u:
    case 0x109u:
    case 0x10Au:
    case 0x10Bu:
    case 0x110u:
    case 0x111u:
    case 0x112u:
    case 0x113u:
    case 0x114u:
    case 0x117u:
    case 0x118u:
    case 0x11Du:
    case 0x157u:
    case 0x171u:
    case 0x17Du:
    case 0x17Fu:
    case 0x1B9u:
    case 0x1C0u:
      int v20 = sub_1CD133FB0((uint64_t)a1);
      int v21 = v20 | sub_1CD134034((uint64_t)a1);
      uint64_t v22 = (uint64_t)a1[14];
      if (v22 && (*(unsigned char *)(v22 + 16) & 0x20) != 0)
      {
        int v23 = 1;
      }
      else
      {
        uint64_t v22 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        int v23 = 0;
        a1[14] = (uint64_t **)v22;
        if (!v22) {
          goto LABEL_61;
        }
      }
      if (*(_DWORD *)(v22 + 8) >= 3u)
      {
        uint64_t v172 = *(void *)(v22 + 56);
        if (v172)
        {
          if ((*(unsigned char *)(v172 + 14) & 0x40) != 0)
          {
LABEL_345:
            int v67 = 1;
LABEL_95:
            int v68 = v21 | v23 & v67 ^ 1;
            return v7 | v68;
          }
        }
      }
LABEL_61:
      unsigned int v39 = **a1;
      uint64_t v40 = (uint64_t *)(a1 + 14);
      int v41 = 1;
      goto LABEL_62;
    case 0x15u:
    case 0xFDu:
    case 0xFEu:
    case 0x10Cu:
    case 0x10Du:
    case 0x10Eu:
    case 0x10Fu:
    case 0x11Cu:
    case 0x160u:
    case 0x161u:
    case 0x1C1u:
      int v31 = sub_1CD133FB0((uint64_t)a1);
      int v21 = v31 | sub_1CD134034((uint64_t)a1);
      unsigned int v33 = (uint64_t *)(a1 + 14);
      uint64_t v32 = (uint64_t)a1[14];
      if (!v32 || (*(unsigned char *)(v32 + 16) & 0x20) == 0)
      {
        uint64_t v34 = **a1;
        unsigned int v35 = (uint64_t *)(a1 + 14);
        int v36 = -1;
        signed int v37 = 37;
        goto LABEL_53;
      }
      int v23 = 1;
      goto LABEL_121;
    case 0x4Au:
    case 0x4Bu:
    case 0x70u:
    case 0x74u:
    case 0x75u:
    case 0x8Cu:
    case 0x8Eu:
    case 0x8Fu:
    case 0x90u:
    case 0x91u:
    case 0x92u:
    case 0x93u:
    case 0x95u:
    case 0x96u:
    case 0x97u:
    case 0x98u:
    case 0x99u:
    case 0x9Au:
    case 0x9Bu:
    case 0x9Cu:
    case 0x9Du:
    case 0x9Eu:
    case 0x9Fu:
    case 0xA0u:
    case 0xA1u:
    case 0xA2u:
    case 0xA3u:
    case 0xAFu:
    case 0xB0u:
    case 0xB1u:
    case 0xB2u:
    case 0xB3u:
    case 0xB4u:
    case 0xB9u:
    case 0xBAu:
    case 0xBBu:
    case 0xBCu:
    case 0xBDu:
    case 0xBEu:
    case 0xBFu:
    case 0xC0u:
    case 0xC1u:
    case 0xCBu:
    case 0xCFu:
    case 0xD0u:
    case 0xD1u:
    case 0xD2u:
    case 0xD3u:
    case 0xD4u:
    case 0xD5u:
    case 0xD6u:
    case 0xD7u:
    case 0xD8u:
    case 0xD9u:
    case 0xDFu:
    case 0xE0u:
    case 0xE1u:
    case 0xEAu:
    case 0xEBu:
    case 0xECu:
    case 0xEDu:
    case 0xEEu:
    case 0xEFu:
    case 0xF0u:
    case 0xF1u:
    case 0xF2u:
    case 0xF3u:
    case 0xF4u:
    case 0xF5u:
    case 0xF6u:
    case 0xF7u:
    case 0xF8u:
    case 0x124u:
    case 0x125u:
    case 0x126u:
    case 0x12Bu:
    case 0x12Cu:
    case 0x12Du:
    case 0x12Eu:
    case 0x12Fu:
    case 0x130u:
    case 0x131u:
    case 0x132u:
    case 0x133u:
    case 0x134u:
    case 0x135u:
    case 0x136u:
    case 0x137u:
    case 0x138u:
    case 0x139u:
    case 0x13Au:
    case 0x14Fu:
    case 0x150u:
    case 0x151u:
    case 0x15Bu:
    case 0x15Cu:
    case 0x15Du:
    case 0x172u:
    case 0x173u:
    case 0x174u:
    case 0x176u:
    case 0x17Au:
    case 0x17Bu:
    case 0x180u:
    case 0x181u:
    case 0x182u:
    case 0x183u:
    case 0x184u:
    case 0x185u:
    case 0x189u:
    case 0x18Au:
    case 0x18Bu:
    case 0x1B3u:
    case 0x1B4u:
    case 0x1B5u:
    case 0x1B6u:
    case 0x1B7u:
    case 0x1B8u:
    case 0x1BCu:
    case 0x1BDu:
    case 0x1BEu:
    case 0x1BFu:
      uint64_t v11 = a1[14];
      if (v11 && ((_BYTE)v11[2] & 0x20) != 0)
      {
        int v12 = 1;
      }
      else
      {
        uint64_t v11 = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        a1[14] = v11;
        if (!v11)
        {
LABEL_18:
          uint64_t v11 = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 25);
          int v12 = 0;
          a1[14] = v11;
          if (!v11)
          {
LABEL_19:
            signed int v13 = 66;
            goto LABEL_20;
          }
LABEL_28:
          if ((*((unsigned char *)v11 + 17) & 0x10) == 0 && (*((unsigned char *)v11 + 20) & 4) == 0)
          {
            if ((*((unsigned char *)v11 + 17) & 0x20) == 0) {
              goto LABEL_19;
            }
            llvm::Function::removeFnAttr((uint64_t)a1, 45);
            uint64_t v11 = a1[14];
            if (!v11 || (*((unsigned char *)v11 + 17) & 0x10) == 0)
            {
              signed int v13 = 44;
LABEL_20:
              uint64_t v11 = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, v13);
              a1[14] = v11;
              int v14 = 1;
              if (!v11)
              {
LABEL_36:
                uint64_t v16 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
                int v17 = 0;
                a1[14] = (uint64_t **)v16;
                goto LABEL_37;
              }
              goto LABEL_35;
            }
          }
          int v14 = 0;
LABEL_35:
          if ((*((unsigned char *)v11 + 20) & 2) == 0) {
            goto LABEL_36;
          }
          int v17 = 1;
LABEL_37:
          int v18 = v12 & v17 ^ 1;
          int v19 = v7 | v14;
          return v19 | v18;
        }
        int v12 = 0;
      }
      if ((*((unsigned char *)v11 + 15) & 2) != 0) {
        goto LABEL_28;
      }
      goto LABEL_18;
    case 0x59u:
    case 0x8Du:
    case 0xB5u:
    case 0xB6u:
    case 0x11Eu:
    case 0x127u:
    case 0x14Au:
    case 0x158u:
    case 0x15Fu:
    case 0x164u:
    case 0x16Bu:
    case 0x16Fu:
    case 0x175u:
    case 0x17Cu:
    case 0x1C2u:
    case 0x1C3u:
    case 0x1CDu:
    case 0x1CEu:
      int v24 = sub_1CD133FB0((uint64_t)a1);
      int v21 = v24 | sub_1CD134034((uint64_t)a1);
      unsigned int v26 = (uint64_t *)(a1 + 14);
      uint64_t v25 = (uint64_t)a1[14];
      if (!v25 || (*(unsigned char *)(v25 + 16) & 0x20) == 0)
      {
        BOOL v27 = **a1;
        BOOL v28 = (uint64_t *)(a1 + 14);
        int v29 = -1;
        signed int v30 = 37;
        goto LABEL_48;
      }
      int v23 = 1;
      goto LABEL_88;
    case 0x5Au:
    case 0x170u:
    case 0x18Cu:
    case 0x1C4u:
    case 0x1C5u:
    case 0x1D1u:
      int v52 = sub_1CD133FB0((uint64_t)a1);
      int v21 = v52 | sub_1CD134034((uint64_t)a1);
      BOOL v54 = (uint64_t *)(a1 + 14);
      uint64_t v53 = (uint64_t)a1[14];
      if (!v53 || (*(unsigned char *)(v53 + 16) & 0x20) == 0)
      {
        uint64_t v55 = **a1;
        uint64_t v56 = (uint64_t *)(a1 + 14);
        int v57 = -1;
        signed int v58 = 37;
        goto LABEL_77;
      }
      int v23 = 1;
      goto LABEL_79;
    case 0x67u:
      uint64_t v131 = (uint64_t)a1[14];
      goto LABEL_223;
    case 0x6Au:
      uint64_t v92 = (uint64_t)a1[14];
      goto LABEL_150;
    case 0x6Bu:
      int v173 = sub_1CD133FB0((uint64_t)a1);
      int v73 = v173 | sub_1CD134034((uint64_t)a1);
      uint64_t v174 = (uint64_t)a1[14];
      if (v174 && (*(unsigned char *)(v174 + 17) & 0x10) != 0)
      {
        int v72 = 1;
      }
      else
      {
        uint64_t v174 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 44);
        int v72 = 0;
        a1[14] = (uint64_t **)v174;
        if (!v174) {
          goto LABEL_631;
        }
      }
      if ((*(unsigned char *)(v174 + 16) & 0x20) != 0) {
        goto LABEL_751;
      }
LABEL_631:
      uint64_t v128 = **a1;
      uint64_t v129 = (uint64_t *)(a1 + 14);
      int v130 = -1;
      signed int v235 = 37;
      goto LABEL_646;
    case 0x82u:
      uint64_t v43 = (uint64_t)a1[14];
      goto LABEL_360;
    case 0x88u:
      uint64_t v43 = (uint64_t)a1[14];
      if (v43
        && *(_DWORD *)(v43 + 8) >= 4u
        && (uint64_t v294 = *(void *)(v43 + 64)) != 0
        && (*(unsigned char *)(v294 + 16) & 0x10) != 0)
      {
        int v175 = 0;
      }
      else
      {
        uint64_t v43 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 2, 36);
        a1[14] = (uint64_t **)v43;
        int v175 = 1;
      }
      v7 |= v175;
LABEL_360:
      BOOL v44 = (uint64_t *)(a1 + 14);
      if (!v43 || (*(unsigned char *)(v43 + 16) & 0x20) == 0) {
        goto LABEL_475;
      }
      int v45 = 1;
      goto LABEL_477;
    case 0x89u:
      uint64_t v133 = (uint64_t *)(a1 + 14);
      uint64_t v131 = (uint64_t)a1[14];
      if (!v131 || (*(unsigned char *)(v131 + 16) & 0x20) == 0)
      {
        uint64_t v153 = **a1;
        int v154 = (uint64_t *)(a1 + 14);
        int v155 = -1;
        signed int v156 = 37;
        goto LABEL_547;
      }
      int v45 = 1;
      goto LABEL_549;
    case 0x94u:
      int v176 = a1[14];
      if (v176 && *((_DWORD *)v176 + 2) >= 3u && (v295 = v176[7]) != 0 && (*((unsigned char *)v295 + 12) & 2) != 0)
      {
        int v177 = 0;
      }
      else
      {
        int v177 = 1;
        a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 1);
      }
      v7 |= v177 | sub_1CD133F30((llvm::LLVMContext ***)a1, 1, 0);
      goto LABEL_370;
    case 0xA4u:
    case 0xA5u:
    case 0xA6u:
    case 0xA7u:
      uint64_t v71 = (uint64_t *)(a1 + 14);
      int v70 = a1[14];
      if (v70 && ((_BYTE)v70[2] & 0x20) != 0)
      {
        int v72 = 1;
      }
      else
      {
        int v72 = 0;
        a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
      }
      int v73 = sub_1CD133ED8((uint64_t)a1);
      uint64_t v74 = (uint64_t)a1[14];
      if (v74) {
        goto LABEL_105;
      }
      goto LABEL_216;
    case 0xA8u:
      __int16 v79 = (uint64_t *)(a1 + 14);
      uint64_t v188 = (uint64_t)a1[14];
      if (v188 && (*(unsigned char *)(v188 + 16) & 0x20) != 0)
      {
        int v189 = 1;
      }
      else
      {
        uint64_t v188 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        int v189 = 0;
        a1[14] = (uint64_t **)v188;
        if (!v188)
        {
LABEL_635:
          int v245 = 0;
          a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
          goto LABEL_636;
        }
      }
      if ((*(unsigned char *)(v188 + 12) & 8) == 0) {
        goto LABEL_635;
      }
      int v245 = 1;
LABEL_636:
      int v73 = sub_1CD133ED8((uint64_t)a1);
      uint64_t v148 = (uint64_t)a1[14];
      if (v148 && (*(unsigned char *)(v148 + 20) & 2) != 0)
      {
        int v72 = v189 & v245;
        goto LABEL_640;
      }
LABEL_638:
      uint64_t v148 = llvm::AttributeList::addAttributeAtIndex(v79, **a1, -1, 65);
      a1[14] = (uint64_t **)v148;
      if (v148)
      {
        int v72 = 0;
LABEL_640:
        if (*(_DWORD *)(v148 + 8) >= 3u)
        {
          uint64_t v291 = *(void *)(v148 + 56);
          if (v291)
          {
            if ((*(unsigned char *)(v291 + 14) & 0x40) != 0) {
              goto LABEL_643;
            }
          }
        }
        goto LABEL_641;
      }
      goto LABEL_641;
    case 0xA9u:
      uint64_t v47 = (uint64_t *)(a1 + 14);
      uint64_t v46 = (uint64_t)a1[14];
      if (v46 && (*(unsigned char *)(v46 + 16) & 0x20) != 0)
      {
        int v45 = 1;
      }
      else
      {
        uint64_t v46 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        a1[14] = (uint64_t **)v46;
        if (!v46)
        {
LABEL_392:
          uint64_t v46 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
          a1[14] = (uint64_t **)v46;
          if (!v46)
          {
LABEL_393:
            uint64_t v46 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
            a1[14] = (uint64_t **)v46;
            if (!v46)
            {
LABEL_655:
              uint64_t v46 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 22);
              a1[14] = (uint64_t **)v46;
              if (!v46) {
                goto LABEL_658;
              }
              int v45 = 0;
LABEL_657:
              if (*(_DWORD *)(v46 + 8) >= 3u)
              {
                uint64_t v301 = *(void *)(v46 + 56);
                if (v301)
                {
                  if ((*(unsigned char *)(v301 + 17) & 0x20) != 0)
                  {
LABEL_660:
                    if (*(_DWORD *)(v46 + 8) < 4u) {
                      goto LABEL_661;
                    }
                    uint64_t v302 = *(void *)(v46 + 64);
                    if (!v302 || (*(unsigned char *)(v302 + 20) & 4) == 0) {
                      goto LABEL_661;
                    }
LABEL_284:
                    if (*(_DWORD *)(v46 + 8) >= 4u)
                    {
                      uint64_t v256 = *(void *)(v46 + 64);
                      if (v256)
                      {
                        if ((*(unsigned char *)(v256 + 14) & 0x40) != 0) {
                          goto LABEL_607;
                        }
                      }
                    }
LABEL_285:
                    uint64_t v109 = **a1;
                    uint64_t v110 = v47;
                    int v111 = 2;
                    signed int v112 = 22;
LABEL_192:
                    uint64_t v113 = llvm::AttributeList::addAttributeAtIndex(v110, v109, v111, v112);
                    int v114 = 0;
                    a1[14] = (uint64_t **)v113;
LABEL_193:
                    int v68 = v45 & v114 ^ 1;
                    return v7 | v68;
                  }
                }
              }
LABEL_658:
              uint64_t v46 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 45);
              a1[14] = (uint64_t **)v46;
              if (!v46)
              {
LABEL_661:
                uint64_t v48 = **a1;
                uint64_t v49 = (uint64_t *)(a1 + 14);
                int v50 = 2;
                signed int v51 = 66;
                goto LABEL_72;
              }
              int v45 = 0;
              goto LABEL_660;
            }
            int v45 = 0;
LABEL_654:
            if (*(_DWORD *)(v46 + 8) >= 3u)
            {
              uint64_t v300 = *(void *)(v46 + 56);
              if (v300)
              {
                if ((*(unsigned char *)(v300 + 14) & 0x40) != 0) {
                  goto LABEL_657;
                }
              }
            }
            goto LABEL_655;
          }
          int v45 = 0;
LABEL_653:
          if ((*(unsigned char *)(v46 + 20) & 2) != 0) {
            goto LABEL_654;
          }
          goto LABEL_393;
        }
        int v45 = 0;
      }
      if ((*(unsigned char *)(v46 + 12) & 8) != 0) {
        goto LABEL_653;
      }
      goto LABEL_392;
    case 0xAAu:
      uint64_t v190 = (uint64_t)a1[14];
      if (v190 && (*(unsigned char *)(v190 + 16) & 0x20) != 0)
      {
        int v45 = 1;
      }
      else
      {
        uint64_t v190 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        a1[14] = (uint64_t **)v190;
        if (!v190)
        {
LABEL_398:
          uint64_t v190 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
          a1[14] = (uint64_t **)v190;
          if (!v190)
          {
LABEL_399:
            uint64_t v190 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
            a1[14] = (uint64_t **)v190;
            if (!v190) {
              goto LABEL_669;
            }
            int v45 = 0;
LABEL_668:
            if (*(_DWORD *)(v190 + 8) >= 3u)
            {
              uint64_t v303 = *(void *)(v190 + 56);
              if (v303)
              {
                if ((*(unsigned char *)(v303 + 14) & 0x40) != 0)
                {
LABEL_670:
                  if (*(_DWORD *)(v190 + 8) < 3u) {
                    goto LABEL_671;
                  }
                  uint64_t v304 = *(void *)(v190 + 56);
                  if (!v304 || (*(unsigned char *)(v304 + 20) & 4) == 0) {
                    goto LABEL_671;
                  }
LABEL_607:
                  int v114 = 1;
                  goto LABEL_193;
                }
              }
            }
LABEL_669:
            uint64_t v190 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 22);
            int v45 = 0;
            a1[14] = (uint64_t **)v190;
            if (!v190)
            {
LABEL_671:
              uint64_t v109 = **a1;
              uint64_t v110 = (uint64_t *)(a1 + 14);
              int v111 = 1;
              signed int v112 = 66;
              goto LABEL_192;
            }
            goto LABEL_670;
          }
          int v45 = 0;
LABEL_667:
          if ((*(unsigned char *)(v190 + 20) & 2) != 0) {
            goto LABEL_668;
          }
          goto LABEL_399;
        }
        int v45 = 0;
      }
      if ((*(unsigned char *)(v190 + 12) & 8) != 0) {
        goto LABEL_667;
      }
      goto LABEL_398;
    case 0xAEu:
    case 0x1C7u:
      int v115 = sub_1CD133F30((llvm::LLVMContext ***)a1, 0, 0x100000001);
      uint64_t v117 = (uint64_t *)(a1 + 14);
      uint64_t v116 = a1[14];
      if (v116 && (*((unsigned char *)v116 + 13) & 8) != 0)
      {
        int v118 = 0;
      }
      else
      {
        a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 11);
        int v118 = 1;
      }
      int v119 = v115 | v118;
      int v120 = sub_1CD133FB0((uint64_t)a1);
      unsigned int v121 = v119 | v120 | sub_1CD134034((uint64_t)a1);
      goto LABEL_198;
    case 0xDBu:
      int v191 = sub_1CD133FB0((uint64_t)a1);
      int v21 = v191 | sub_1CD134034((uint64_t)a1);
      BOOL v54 = (uint64_t *)(a1 + 14);
      uint64_t v53 = (uint64_t)a1[14];
      if (v53 && (*(unsigned char *)(v53 + 16) & 0x20) != 0)
      {
        int v23 = 1;
      }
      else
      {
        uint64_t v53 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        a1[14] = (uint64_t **)v53;
        if (!v53)
        {
LABEL_674:
          v161 = **a1;
          unint64_t v162 = (uint64_t *)(a1 + 14);
          int v163 = 0;
          signed int v164 = 19;
          goto LABEL_290;
        }
        int v23 = 0;
      }
      if (*(_DWORD *)(v53 + 8) < 2u) {
        goto LABEL_674;
      }
      uint64_t v305 = *(void *)(v53 + 48);
      if (!v305 || (*(unsigned char *)(v305 + 14) & 8) == 0) {
        goto LABEL_674;
      }
      goto LABEL_292;
    case 0xDDu:
      int v192 = sub_1CD133FB0((uint64_t)a1);
      int v193 = v192 | sub_1CD134034((uint64_t)a1);
      uint64_t v194 = (uint64_t)a1[14];
      if (v194 && (*(unsigned char *)(v194 + 16) & 0x20) != 0)
      {
        int v195 = 1;
      }
      else
      {
        uint64_t v194 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        int v195 = 0;
        a1[14] = (uint64_t **)v194;
        if (!v194) {
          goto LABEL_677;
        }
      }
      if (*(_DWORD *)(v194 + 8) >= 3u)
      {
        uint64_t v306 = *(void *)(v194 + 56);
        if (v306)
        {
          if ((*(unsigned char *)(v306 + 14) & 0x40) != 0)
          {
            int v249 = 1;
LABEL_678:
            unsigned int v83 = v193 | v195 & v249 ^ 1;
            int v90 = v7 | sub_1CD133ED8((uint64_t)a1);
            return v90 | v83;
          }
        }
      }
LABEL_677:
      uint64_t v248 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 22);
      int v249 = 0;
      a1[14] = (uint64_t **)v248;
      goto LABEL_678;
    case 0xE4u:
    case 0x120u:
      int v124 = sub_1CD133FB0((uint64_t)a1);
      int v21 = v124 | sub_1CD134034((uint64_t)a1);
      unsigned int v33 = (uint64_t *)(a1 + 14);
      uint64_t v32 = (uint64_t)a1[14];
      if (v32 && (*(unsigned char *)(v32 + 16) & 0x20) != 0)
      {
        int v23 = 1;
      }
      else
      {
        uint64_t v32 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        a1[14] = (uint64_t **)v32;
        if (!v32) {
          goto LABEL_562;
        }
        int v23 = 0;
      }
      if (*(_DWORD *)(v32 + 8) >= 3u)
      {
        uint64_t v286 = *(void *)(v32 + 56);
        if (v286)
        {
          if ((*(unsigned char *)(v286 + 14) & 0x40) != 0)
          {
LABEL_121:
            if (*(_DWORD *)(v32 + 8) >= 4u)
            {
              uint64_t v236 = *(void *)(v32 + 64);
              if (v236)
              {
                if ((*(unsigned char *)(v236 + 14) & 0x40) != 0) {
                  goto LABEL_345;
                }
              }
            }
LABEL_122:
            unsigned int v39 = **a1;
            uint64_t v40 = v33;
            int v41 = 2;
            goto LABEL_62;
          }
        }
      }
LABEL_562:
      uint64_t v34 = **a1;
      unsigned int v35 = (uint64_t *)(a1 + 14);
      int v36 = 1;
      signed int v37 = 22;
LABEL_53:
      uint64_t v32 = llvm::AttributeList::addAttributeAtIndex(v35, v34, v36, v37);
      int v23 = 0;
      a1[14] = (uint64_t **)v32;
      if (!v32) {
        goto LABEL_122;
      }
      goto LABEL_121;
    case 0xE5u:
    case 0xE6u:
      int v125 = sub_1CD133FB0((uint64_t)a1);
      int v21 = v125 | sub_1CD134034((uint64_t)a1);
      uint64_t v126 = (uint64_t)a1[14];
      if (v126 && (*(unsigned char *)(v126 + 16) & 0x20) != 0)
      {
        int v23 = 1;
      }
      else
      {
        uint64_t v126 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        int v23 = 0;
        a1[14] = (uint64_t **)v126;
        if (!v126) {
          goto LABEL_565;
        }
      }
      if (*(_DWORD *)(v126 + 8) >= 5u)
      {
        uint64_t v287 = *(void *)(v126 + 72);
        if (v287)
        {
          if ((*(unsigned char *)(v287 + 14) & 0x40) != 0) {
            goto LABEL_345;
          }
        }
      }
LABEL_565:
      unsigned int v39 = **a1;
      uint64_t v40 = (uint64_t *)(a1 + 14);
      int v41 = 3;
      goto LABEL_62;
    case 0xF9u:
    case 0xFAu:
    case 0x159u:
      int v81 = sub_1CD133FB0((uint64_t)a1);
      int v21 = v81 | sub_1CD134034((uint64_t)a1);
      BOOL v54 = (uint64_t *)(a1 + 14);
      uint64_t v53 = (uint64_t)a1[14];
      if (v53 && (*(unsigned char *)(v53 + 16) & 0x20) != 0)
      {
        int v23 = 1;
      }
      else
      {
        uint64_t v53 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        a1[14] = (uint64_t **)v53;
        if (!v53)
        {
LABEL_520:
          uint64_t v55 = **a1;
          uint64_t v56 = (uint64_t *)(a1 + 14);
          int v57 = 0;
          signed int v58 = 19;
LABEL_77:
          uint64_t v53 = llvm::AttributeList::addAttributeAtIndex(v56, v55, v57, v58);
          a1[14] = (uint64_t **)v53;
          if (!v53)
          {
LABEL_80:
            uint64_t v53 = llvm::AttributeList::addAttributeAtIndex(v54, **a1, 1, 22);
            a1[14] = (uint64_t **)v53;
            if (!v53)
            {
LABEL_83:
              uint64_t v53 = llvm::AttributeList::addAttributeAtIndex(v54, **a1, 2, 22);
              a1[14] = (uint64_t **)v53;
              if (!v53) {
                goto LABEL_86;
              }
              int v23 = 0;
LABEL_85:
              if (*(_DWORD *)(v53 + 8) >= 3u)
              {
                uint64_t v238 = *(void *)(v53 + 56);
                if (v238)
                {
                  if ((*(unsigned char *)(v238 + 17) & 0x20) != 0) {
                    goto LABEL_296;
                  }
                }
              }
LABEL_86:
              uint64_t v59 = **a1;
              uint64_t v60 = v54;
              int v61 = 1;
              signed int v62 = 45;
              goto LABEL_295;
            }
            int v23 = 0;
LABEL_82:
            if (*(_DWORD *)(v53 + 8) >= 4u)
            {
              uint64_t v240 = *(void *)(v53 + 64);
              if (v240)
              {
                if ((*(unsigned char *)(v240 + 14) & 0x40) != 0) {
                  goto LABEL_85;
                }
              }
            }
            goto LABEL_83;
          }
          int v23 = 0;
LABEL_79:
          if (*(_DWORD *)(v53 + 8) >= 3u)
          {
            uint64_t v239 = *(void *)(v53 + 56);
            if (v239)
            {
              if ((*(unsigned char *)(v239 + 14) & 0x40) != 0) {
                goto LABEL_82;
              }
            }
          }
          goto LABEL_80;
        }
        int v23 = 0;
      }
      if (*(_DWORD *)(v53 + 8) >= 2u)
      {
        uint64_t v279 = *(void *)(v53 + 48);
        if (v279)
        {
          if ((*(unsigned char *)(v279 + 14) & 8) != 0) {
            goto LABEL_79;
          }
        }
      }
      goto LABEL_520;
    case 0xFCu:
    case 0x107u:
    case 0x1CBu:
    case 0x1CCu:
    case 0x1D0u:
      int v69 = sub_1CD133FB0((uint64_t)a1);
      int v21 = v69 | sub_1CD134034((uint64_t)a1);
      BOOL v54 = (uint64_t *)(a1 + 14);
      uint64_t v53 = (uint64_t)a1[14];
      if (v53 && (*(unsigned char *)(v53 + 16) & 0x20) != 0)
      {
        int v23 = 1;
      }
      else
      {
        uint64_t v53 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        a1[14] = (uint64_t **)v53;
        if (!v53) {
          goto LABEL_289;
        }
        int v23 = 0;
      }
      if (*(_DWORD *)(v53 + 8) >= 3u)
      {
        uint64_t v261 = *(void *)(v53 + 56);
        if (v261)
        {
          if ((*(unsigned char *)(v261 + 14) & 0x40) != 0)
          {
LABEL_292:
            if (*(_DWORD *)(v53 + 8) < 4u || (uint64_t v257 = *(void *)(v53 + 64)) == 0 || (*(unsigned char *)(v257 + 14) & 0x40) == 0)
            {
LABEL_293:
              uint64_t v59 = **a1;
              uint64_t v60 = v54;
              int v61 = 2;
LABEL_294:
              signed int v62 = 22;
LABEL_295:
              uint64_t v53 = llvm::AttributeList::addAttributeAtIndex(v60, v59, v61, v62);
              int v23 = 0;
              a1[14] = (uint64_t **)v53;
              if (!v53)
              {
LABEL_297:
                unsigned int v39 = **a1;
                uint64_t v40 = v54;
                int v41 = 2;
                goto LABEL_93;
              }
            }
LABEL_296:
            if (*(_DWORD *)(v53 + 8) >= 4u)
            {
              uint64_t v230 = *(void *)(v53 + 64);
              if (v230)
              {
                if ((*(unsigned char *)(v230 + 17) & 0x20) != 0) {
                  goto LABEL_345;
                }
              }
            }
            goto LABEL_297;
          }
        }
      }
LABEL_289:
      v161 = **a1;
      unint64_t v162 = (uint64_t *)(a1 + 14);
      int v163 = 1;
      signed int v164 = 22;
      goto LABEL_290;
    case 0xFFu:
    case 0x100u:
    case 0x13Bu:
    case 0x13Cu:
    case 0x168u:
    case 0x18Du:
    case 0x18Eu:
    case 0x18Fu:
    case 0x190u:
      int v38 = sub_1CD133FB0((uint64_t)a1);
      int v21 = v38 | sub_1CD134034((uint64_t)a1);
      unsigned int v26 = (uint64_t *)(a1 + 14);
      uint64_t v25 = (uint64_t)a1[14];
      if (v25 && (*(unsigned char *)(v25 + 16) & 0x20) != 0)
      {
        int v23 = 1;
      }
      else
      {
        uint64_t v25 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        a1[14] = (uint64_t **)v25;
        if (!v25) {
          goto LABEL_179;
        }
        int v23 = 0;
      }
      if (*(_DWORD *)(v25 + 8) >= 3u)
      {
        uint64_t v241 = *(void *)(v25 + 56);
        if (v241)
        {
          if ((*(unsigned char *)(v241 + 14) & 0x40) != 0)
          {
LABEL_181:
            if (*(_DWORD *)(v25 + 8) < 4u) {
              goto LABEL_182;
            }
            uint64_t v242 = *(void *)(v25 + 64);
            if (!v242 || (*(unsigned char *)(v242 + 14) & 0x40) == 0) {
              goto LABEL_182;
            }
LABEL_91:
            if (*(_DWORD *)(v25 + 8) >= 3u)
            {
              uint64_t v171 = *(void *)(v25 + 56);
              if (v171)
              {
                if ((*(unsigned char *)(v171 + 17) & 0x20) != 0) {
                  goto LABEL_345;
                }
              }
            }
LABEL_92:
            unsigned int v39 = **a1;
            uint64_t v40 = v26;
            int v41 = 1;
LABEL_93:
            signed int v42 = 45;
LABEL_94:
            uint64_t v66 = llvm::AttributeList::addAttributeAtIndex(v40, v39, v41, v42);
            int v67 = 0;
            a1[14] = (uint64_t **)v66;
            goto LABEL_95;
          }
        }
      }
LABEL_179:
      uint64_t v25 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 22);
      a1[14] = (uint64_t **)v25;
      if (!v25)
      {
LABEL_182:
        uint64_t v63 = **a1;
        uint64_t v64 = (uint64_t *)(a1 + 14);
        int v65 = 2;
        goto LABEL_90;
      }
      int v23 = 0;
      goto LABEL_181;
    case 0x101u:
    case 0x102u:
    case 0x115u:
    case 0x116u:
      int v75 = sub_1CD133FB0((uint64_t)a1);
      int v21 = v75 | sub_1CD134034((uint64_t)a1);
      uint64_t v76 = (uint64_t)a1[14];
      if (v76 && (*(unsigned char *)(v76 + 16) & 0x20) != 0)
      {
        int v23 = 1;
      }
      else
      {
        uint64_t v76 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        a1[14] = (uint64_t **)v76;
        if (!v76) {
          goto LABEL_309;
        }
        int v23 = 0;
      }
      if (*(_DWORD *)(v76 + 8) >= 3u)
      {
        uint64_t v263 = *(void *)(v76 + 56);
        if (v263)
        {
          if ((*(unsigned char *)(v263 + 14) & 0x40) != 0) {
            goto LABEL_310;
          }
        }
      }
LABEL_309:
      uint64_t v76 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 22);
      int v23 = 0;
      a1[14] = (uint64_t **)v76;
      if (!v76) {
        goto LABEL_311;
      }
LABEL_310:
      if (*(_DWORD *)(v76 + 8) >= 6u)
      {
        uint64_t v264 = *(void *)(v76 + 80);
        if (v264)
        {
          if ((*(unsigned char *)(v264 + 14) & 0x40) != 0) {
            goto LABEL_345;
          }
        }
      }
LABEL_311:
      unsigned int v39 = **a1;
      uint64_t v40 = (uint64_t *)(a1 + 14);
      int v41 = 4;
LABEL_62:
      signed int v42 = 22;
      goto LABEL_94;
    case 0x103u:
    case 0x1C8u:
      uint64_t v71 = (uint64_t *)(a1 + 14);
      int v127 = a1[14];
      if (v127 && (*((unsigned char *)v127 + 13) & 0x10) != 0)
      {
        int v72 = 1;
      }
      else
      {
        int v72 = 0;
        a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 12);
      }
      int v73 = sub_1CD134034((uint64_t)a1);
      uint64_t v74 = (uint64_t)a1[14];
      if (!v74 || (*(unsigned char *)(v74 + 16) & 0x20) == 0) {
        goto LABEL_215;
      }
      goto LABEL_105;
    case 0x104u:
    case 0x105u:
    case 0x106u:
    case 0x14Cu:
    case 0x14Du:
    case 0x14Eu:
      uint64_t v47 = (uint64_t *)(a1 + 14);
      uint64_t v46 = (uint64_t)a1[14];
      if (v46 && (*(unsigned char *)(v46 + 16) & 0x20) != 0)
      {
        int v45 = 1;
      }
      else
      {
        uint64_t v46 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        a1[14] = (uint64_t **)v46;
        if (!v46) {
          goto LABEL_71;
        }
        int v45 = 0;
      }
      if ((*(unsigned char *)(v46 + 20) & 2) != 0) {
        goto LABEL_284;
      }
LABEL_71:
      uint64_t v48 = **a1;
      uint64_t v49 = (uint64_t *)(a1 + 14);
      int v50 = -1;
      signed int v51 = 65;
LABEL_72:
      uint64_t v46 = llvm::AttributeList::addAttributeAtIndex(v49, v48, v50, v51);
      int v45 = 0;
      a1[14] = (uint64_t **)v46;
      if (v46) {
        goto LABEL_284;
      }
      goto LABEL_285;
    case 0x119u:
    case 0x11Au:
    case 0x11Fu:
      int v82 = sub_1CD133FB0((uint64_t)a1);
      unsigned int v83 = v82 | sub_1CD134034((uint64_t)a1);
      goto LABEL_128;
    case 0x11Bu:
      int v196 = sub_1CD133FB0((uint64_t)a1);
      int v197 = v196 | sub_1CD134034((uint64_t)a1);
      int v198 = a1[14];
      if (v198 && ((_BYTE)v198[2] & 0x20) != 0)
      {
        int v199 = 0;
      }
      else
      {
        a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        int v199 = 1;
      }
      unsigned int v121 = v197 | v199 | sub_1CD133ED8((uint64_t)a1);
      int v200 = a1[14];
      if (v200 && *((_DWORD *)v200 + 2) >= 3u && (v296 = v200[7]) != 0 && (*((unsigned char *)v296 + 14) & 0x40) != 0)
      {
        int v201 = 0;
      }
      else
      {
        int v201 = 1;
        a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 22);
      }
      int v202 = v7 | v201;
      return v202 | v121;
    case 0x121u:
    case 0x122u:
    case 0x152u:
    case 0x153u:
      uint64_t v77 = (uint64_t)a1[14];
      if (v77 && (*(unsigned char *)(v77 + 16) & 0x20) != 0)
      {
        int v45 = 1;
      }
      else
      {
        uint64_t v77 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        int v45 = 0;
        a1[14] = (uint64_t **)v77;
        if (!v77) {
          goto LABEL_314;
        }
      }
      if ((*(unsigned char *)(v77 + 17) & 0x10) != 0) {
        goto LABEL_607;
      }
LABEL_314:
      uint64_t v109 = **a1;
      uint64_t v110 = (uint64_t *)(a1 + 14);
      int v111 = -1;
      signed int v112 = 44;
      goto LABEL_192;
    case 0x128u:
    case 0x129u:
    case 0x12Au:
      unsigned int v83 = sub_1CD1340E0((uint64_t)a1, 1, *a2);
      uint64_t v84 = (uint64_t *)(a1 + 14);
      uint64_t v91 = a1[14];
      if (v91 && (*((unsigned char *)v91 + 20) & 2) != 0) {
        goto LABEL_844;
      }
      uint64_t v86 = **a1;
      int v87 = -1;
      signed int v88 = 65;
      goto LABEL_131;
    case 0x13Du:
    case 0x1C6u:
    case 0x1C9u:
LABEL_370:
      int v178 = v7 | sub_1CD133F30((llvm::LLVMContext ***)a1, 0, 0);
      uint64_t v179 = a1[14];
      if (v179 && (*((unsigned char *)v179 + 13) & 8) != 0)
      {
        int v180 = 0;
      }
      else
      {
        a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 11);
        int v180 = 1;
      }
      int v181 = v178 | v180;
      int v182 = sub_1CD133FB0((uint64_t)a1);
      int v183 = v181 | v182 | sub_1CD134034((uint64_t)a1);
      uint64_t v184 = (uint64_t)a1[14];
      if (v184 && (*(unsigned char *)(v184 + 16) & 0x20) != 0)
      {
        int v185 = 1;
      }
      else
      {
        uint64_t v184 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        a1[14] = (uint64_t **)v184;
        if (!v184) {
          goto LABEL_380;
        }
        int v185 = 0;
      }
      if (*(_DWORD *)(v184 + 8) >= 2u)
      {
        uint64_t v267 = *(void *)(v184 + 48);
        if (v267)
        {
          if ((*(unsigned char *)(v267 + 14) & 8) != 0) {
            goto LABEL_381;
          }
        }
      }
LABEL_380:
      uint64_t v184 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 0, 19);
      int v185 = 0;
      a1[14] = (uint64_t **)v184;
      if (!v184)
      {
LABEL_382:
        uint64_t v186 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
        int v187 = 0;
        a1[14] = (uint64_t **)v186;
        return v183 | v185 & v187 ^ 1u;
      }
LABEL_381:
      if ((*(unsigned char *)(v184 + 20) & 2) == 0) {
        goto LABEL_382;
      }
      int v187 = 1;
      return v183 | v185 & v187 ^ 1u;
    case 0x13Eu:
      int v203 = sub_1CD133F30((llvm::LLVMContext ***)a1, 1, 0);
      uint64_t v117 = (uint64_t *)(a1 + 14);
      uint64_t v204 = (uint64_t)a1[14];
      if (v204
        && *(_DWORD *)(v204 + 8) >= 3u
        && (uint64_t v297 = *(void *)(v204 + 56)) != 0
        && (*(unsigned char *)(v297 + 12) & 2) != 0)
      {
        int v205 = 1;
      }
      else
      {
        uint64_t v204 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 1);
        int v205 = 0;
        a1[14] = (uint64_t **)v204;
        if (!v204)
        {
LABEL_420:
          uint64_t v206 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 11);
          int v207 = 0;
          a1[14] = (uint64_t **)v206;
          goto LABEL_421;
        }
      }
      if ((*(unsigned char *)(v204 + 13) & 8) == 0) {
        goto LABEL_420;
      }
      int v207 = 1;
LABEL_421:
      unsigned int v121 = sub_1CD133FB0((uint64_t)a1) | v203 | v205 & v207 ^ 1;
LABEL_198:
      uint64_t v122 = (uint64_t)a1[14];
      if (v122 && (*(unsigned char *)(v122 + 16) & 0x20) != 0)
      {
        int v123 = 1;
      }
      else
      {
        uint64_t v122 = llvm::AttributeList::addAttributeAtIndex(v117, **a1, -1, 37);
        a1[14] = (uint64_t **)v122;
        if (!v122) {
          goto LABEL_510;
        }
        int v123 = 0;
      }
      if (*(_DWORD *)(v122 + 8) >= 2u)
      {
        uint64_t v278 = *(void *)(v122 + 48);
        if (v278)
        {
          if ((*(unsigned char *)(v278 + 14) & 8) != 0)
          {
LABEL_511:
            if ((*(unsigned char *)(v122 + 20) & 2) != 0)
            {
              int v221 = 1;
LABEL_513:
              int v202 = v7 | v123 & v221 ^ 1;
              return v202 | v121;
            }
LABEL_512:
            uint64_t v220 = llvm::AttributeList::addAttributeAtIndex(v117, **a1, -1, 65);
            int v221 = 0;
            a1[14] = (uint64_t **)v220;
            goto LABEL_513;
          }
        }
      }
LABEL_510:
      uint64_t v122 = llvm::AttributeList::addAttributeAtIndex(v117, **a1, 0, 19);
      int v123 = 0;
      a1[14] = (uint64_t **)v122;
      if (!v122) {
        goto LABEL_512;
      }
      goto LABEL_511;
    case 0x13Fu:
    case 0x144u:
      uint64_t v131 = (uint64_t)a1[14];
      if (v131 && (*(unsigned char *)(v131 + 20) & 2) != 0)
      {
        int v132 = 0;
      }
      else
      {
        uint64_t v131 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
        a1[14] = (uint64_t **)v131;
        int v132 = 1;
      }
      v7 |= v132;
LABEL_223:
      uint64_t v133 = (uint64_t *)(a1 + 14);
      if (v131 && (*(unsigned char *)(v131 + 16) & 0x20) != 0)
      {
        int v45 = 1;
      }
      else
      {
        uint64_t v131 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        a1[14] = (uint64_t **)v131;
        if (!v131)
        {
LABEL_226:
          uint64_t v131 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
          a1[14] = (uint64_t **)v131;
          if (!v131) {
            goto LABEL_539;
          }
          int v45 = 0;
LABEL_538:
          if (*(_DWORD *)(v131 + 8) >= 3u)
          {
            uint64_t v283 = *(void *)(v131 + 56);
            if (v283)
            {
              if ((*(unsigned char *)(v283 + 14) & 8) != 0)
              {
LABEL_542:
                if (*(_DWORD *)(v131 + 8) < 3u
                  || (uint64_t v270 = *(void *)(v131 + 56)) == 0
                  || (*(unsigned char *)(v270 + 20) & 4) == 0)
                {
LABEL_543:
                  uint64_t v131 = llvm::AttributeList::addAttributeAtIndex(v133, **a1, 1, 66);
                  a1[14] = (uint64_t **)v131;
                  if (!v131)
                  {
LABEL_546:
                    uint64_t v153 = **a1;
                    int v154 = v133;
                    int v155 = 2;
                    signed int v156 = 19;
LABEL_547:
                    uint64_t v131 = llvm::AttributeList::addAttributeAtIndex(v154, v153, v155, v156);
                    a1[14] = (uint64_t **)v131;
                    if (!v131)
                    {
LABEL_550:
                      uint64_t v131 = llvm::AttributeList::addAttributeAtIndex(v133, **a1, 2, 22);
                      int v45 = 0;
                      a1[14] = (uint64_t **)v131;
                      if (!v131)
                      {
LABEL_552:
                        uint64_t v109 = **a1;
                        uint64_t v110 = v133;
                        int v111 = 2;
                        goto LABEL_191;
                      }
LABEL_551:
                      if (*(_DWORD *)(v131 + 8) >= 4u)
                      {
                        uint64_t v244 = *(void *)(v131 + 64);
                        if (v244)
                        {
                          if ((*(unsigned char *)(v244 + 17) & 0x20) != 0) {
                            goto LABEL_607;
                          }
                        }
                      }
                      goto LABEL_552;
                    }
                    int v45 = 0;
LABEL_549:
                    if (*(_DWORD *)(v131 + 8) >= 4u)
                    {
                      uint64_t v243 = *(void *)(v131 + 64);
                      if (v243)
                      {
                        if ((*(unsigned char *)(v243 + 14) & 0x40) != 0) {
                          goto LABEL_551;
                        }
                      }
                    }
                    goto LABEL_550;
                  }
                  int v45 = 0;
                }
                if (*(_DWORD *)(v131 + 8) >= 4u)
                {
                  uint64_t v271 = *(void *)(v131 + 64);
                  if (v271)
                  {
                    if ((*(unsigned char *)(v271 + 14) & 8) != 0) {
                      goto LABEL_549;
                    }
                  }
                }
                goto LABEL_546;
              }
            }
          }
LABEL_539:
          uint64_t v227 = **a1;
          uint64_t v228 = (uint64_t *)(a1 + 14);
          signed int v229 = 19;
          goto LABEL_540;
        }
        int v45 = 0;
      }
      if ((*(unsigned char *)(v131 + 12) & 8) != 0) {
        goto LABEL_538;
      }
      goto LABEL_226;
    case 0x140u:
    case 0x145u:
      uint64_t v135 = (uint64_t *)(a1 + 14);
      uint64_t v134 = (uint64_t)a1[14];
      if (v134 && (*(unsigned char *)(v134 + 16) & 0x20) != 0)
      {
        int v136 = 1;
      }
      else
      {
        uint64_t v134 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        int v136 = 0;
        a1[14] = (uint64_t **)v134;
        if (!v134) {
          goto LABEL_570;
        }
      }
      if ((*(unsigned char *)(v134 + 12) & 8) != 0)
      {
        int v233 = 1;
LABEL_571:
        int v72 = v136 & v233;
        int v73 = sub_1CD133ED8((uint64_t)a1);
        int v234 = a1[14];
        if (v234 && (*((unsigned char *)v234 + 20) & 2) != 0) {
          goto LABEL_751;
        }
LABEL_573:
        uint64_t v128 = **a1;
        uint64_t v129 = v135;
        int v130 = -1;
        signed int v235 = 65;
LABEL_646:
        uint64_t v246 = llvm::AttributeList::addAttributeAtIndex(v129, v128, v130, v235);
        int v247 = 0;
        a1[14] = (uint64_t **)v246;
LABEL_647:
        int v18 = v72 & v247 ^ 1;
        int v19 = v7 | v73;
        return v19 | v18;
      }
LABEL_570:
      uint64_t v232 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
      int v233 = 0;
      a1[14] = (uint64_t **)v232;
      goto LABEL_571;
    case 0x141u:
      __int16 v79 = (uint64_t *)(a1 + 14);
      uint64_t v208 = a1[14];
      if (v208 && (*((unsigned char *)v208 + 12) & 8) != 0)
      {
        int v72 = 1;
      }
      else
      {
        int v72 = 0;
        a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
      }
      int v73 = sub_1CD133ED8((uint64_t)a1);
      uint64_t v148 = (uint64_t)a1[14];
      if (v148 && (*(unsigned char *)(v148 + 16) & 0x20) != 0) {
        goto LABEL_429;
      }
      uint64_t v148 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
      a1[14] = (uint64_t **)v148;
      if (v148)
      {
        int v72 = 0;
LABEL_429:
        if ((*(unsigned char *)(v148 + 20) & 2) != 0) {
          goto LABEL_640;
        }
      }
      goto LABEL_638;
    case 0x142u:
      uint64_t v133 = (uint64_t *)(a1 + 14);
      uint64_t v131 = (uint64_t)a1[14];
      if (v131 && (*(unsigned char *)(v131 + 16) & 0x20) != 0)
      {
        int v45 = 1;
      }
      else
      {
        uint64_t v131 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        a1[14] = (uint64_t **)v131;
        if (!v131) {
          goto LABEL_434;
        }
        int v45 = 0;
      }
      if ((*(unsigned char *)(v131 + 12) & 8) != 0) {
        goto LABEL_687;
      }
LABEL_434:
      uint64_t v131 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
      a1[14] = (uint64_t **)v131;
      if (!v131) {
        goto LABEL_435;
      }
      int v45 = 0;
LABEL_687:
      if ((*(unsigned char *)(v131 + 20) & 2) != 0) {
        goto LABEL_688;
      }
LABEL_435:
      uint64_t v131 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
      a1[14] = (uint64_t **)v131;
      if (!v131) {
        goto LABEL_689;
      }
      int v45 = 0;
LABEL_688:
      if (*(_DWORD *)(v131 + 8) >= 3u)
      {
        uint64_t v307 = *(void *)(v131 + 56);
        if (v307)
        {
          if ((*(unsigned char *)(v307 + 14) & 8) != 0) {
            goto LABEL_691;
          }
        }
      }
LABEL_689:
      uint64_t v131 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 19);
      a1[14] = (uint64_t **)v131;
      if (!v131) {
        goto LABEL_692;
      }
      int v45 = 0;
LABEL_691:
      if (*(_DWORD *)(v131 + 8) >= 3u)
      {
        uint64_t v308 = *(void *)(v131 + 56);
        if (v308)
        {
          if ((*(unsigned char *)(v308 + 17) & 0x40) != 0) {
            goto LABEL_542;
          }
        }
      }
LABEL_692:
      uint64_t v227 = **a1;
      uint64_t v228 = (uint64_t *)(a1 + 14);
      signed int v229 = 46;
LABEL_540:
      uint64_t v131 = llvm::AttributeList::addAttributeAtIndex(v228, v227, 1, v229);
      a1[14] = (uint64_t **)v131;
      if (v131)
      {
        int v45 = 0;
        goto LABEL_542;
      }
      goto LABEL_543;
    case 0x143u:
      uint64_t v133 = (uint64_t *)(a1 + 14);
      uint64_t v131 = (uint64_t)a1[14];
      if (v131 && (*(unsigned char *)(v131 + 16) & 0x20) != 0)
      {
        int v45 = 1;
      }
      else
      {
        uint64_t v131 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        a1[14] = (uint64_t **)v131;
        if (!v131)
        {
LABEL_440:
          uint64_t v131 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
          a1[14] = (uint64_t **)v131;
          if (!v131)
          {
LABEL_441:
            uint64_t v131 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
            a1[14] = (uint64_t **)v131;
            if (!v131)
            {
LABEL_700:
              uint64_t v131 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 46);
              a1[14] = (uint64_t **)v131;
              if (!v131) {
                goto LABEL_703;
              }
              int v45 = 0;
LABEL_702:
              if (*(_DWORD *)(v131 + 8) >= 3u)
              {
                uint64_t v310 = *(void *)(v131 + 56);
                if (v310)
                {
                  if ((*(unsigned char *)(v310 + 20) & 4) != 0) {
                    goto LABEL_549;
                  }
                }
              }
LABEL_703:
              uint64_t v153 = **a1;
              int v154 = (uint64_t *)(a1 + 14);
              int v155 = 1;
              signed int v156 = 66;
              goto LABEL_547;
            }
            int v45 = 0;
LABEL_699:
            if (*(_DWORD *)(v131 + 8) >= 3u)
            {
              uint64_t v309 = *(void *)(v131 + 56);
              if (v309)
              {
                if ((*(unsigned char *)(v309 + 17) & 0x40) != 0) {
                  goto LABEL_702;
                }
              }
            }
            goto LABEL_700;
          }
          int v45 = 0;
LABEL_698:
          if ((*(unsigned char *)(v131 + 20) & 2) != 0) {
            goto LABEL_699;
          }
          goto LABEL_441;
        }
        int v45 = 0;
      }
      if ((*(unsigned char *)(v131 + 12) & 8) != 0) {
        goto LABEL_698;
      }
      goto LABEL_440;
    case 0x146u:
      uint64_t v92 = (uint64_t)a1[14];
      goto LABEL_146;
    case 0x147u:
    case 0x148u:
    case 0x149u:
      uint64_t v92 = (uint64_t)a1[14];
      if (v92
        && *(_DWORD *)(v92 + 8) >= 3u
        && (uint64_t v272 = *(void *)(v92 + 56)) != 0
        && (*(unsigned char *)(v272 + 14) & 0x40) != 0)
      {
        int v93 = 1;
      }
      else
      {
        uint64_t v92 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 22);
        a1[14] = (uint64_t **)v92;
        if (!v92) {
          goto LABEL_142;
        }
        int v93 = 0;
      }
      if (*(_DWORD *)(v92 + 8) >= 4u)
      {
        uint64_t v273 = *(void *)(v92 + 64);
        if (v273)
        {
          if ((*(unsigned char *)(v273 + 14) & 0x40) != 0)
          {
LABEL_143:
            if (*(_DWORD *)(v92 + 8) >= 4u)
            {
              uint64_t v274 = *(void *)(v92 + 64);
              if (v274)
              {
                if ((*(unsigned char *)(v274 + 17) & 0x20) != 0)
                {
                  int v94 = 1;
LABEL_145:
                  v7 |= v93 & v94 ^ 1;
LABEL_146:
                  if (v92 && (*(unsigned char *)(v92 + 20) & 2) != 0)
                  {
                    int v95 = 0;
                  }
                  else
                  {
                    uint64_t v92 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
                    a1[14] = (uint64_t **)v92;
                    int v95 = 1;
                  }
                  v7 |= v95;
LABEL_150:
                  if (v92 && (*(unsigned char *)(v92 + 12) & 8) != 0)
                  {
                    int v45 = 1;
                  }
                  else
                  {
                    uint64_t v92 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
                    a1[14] = (uint64_t **)v92;
                    if (!v92) {
                      goto LABEL_300;
                    }
                    int v45 = 0;
                  }
                  if (*(_DWORD *)(v92 + 8) >= 3u)
                  {
                    uint64_t v262 = *(void *)(v92 + 56);
                    if (v262)
                    {
                      if ((*(unsigned char *)(v262 + 20) & 4) != 0)
                      {
LABEL_301:
                        if ((*(unsigned char *)(v92 + 16) & 0x20) != 0) {
                          goto LABEL_607;
                        }
LABEL_302:
                        uint64_t v109 = **a1;
                        uint64_t v110 = (uint64_t *)(a1 + 14);
                        int v111 = -1;
                        signed int v112 = 37;
                        goto LABEL_192;
                      }
                    }
                  }
LABEL_300:
                  uint64_t v92 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 66);
                  int v45 = 0;
                  a1[14] = (uint64_t **)v92;
                  if (!v92) {
                    goto LABEL_302;
                  }
                  goto LABEL_301;
                }
              }
            }
LABEL_144:
            uint64_t v92 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 2, 45);
            int v94 = 0;
            a1[14] = (uint64_t **)v92;
            goto LABEL_145;
          }
        }
      }
LABEL_142:
      uint64_t v92 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 2, 22);
      int v93 = 0;
      a1[14] = (uint64_t **)v92;
      if (!v92) {
        goto LABEL_144;
      }
      goto LABEL_143;
    case 0x14Bu:
      int v209 = sub_1CD133FB0((uint64_t)a1);
      int v73 = v209 | sub_1CD134034((uint64_t)a1);
      uint64_t v71 = (uint64_t *)(a1 + 14);
      uint64_t v74 = (uint64_t)a1[14];
      if (v74 && (*(unsigned char *)(v74 + 16) & 0x20) != 0)
      {
        int v72 = 1;
      }
      else
      {
LABEL_215:
        uint64_t v74 = llvm::AttributeList::addAttributeAtIndex(v71, **a1, -1, 37);
        a1[14] = (uint64_t **)v74;
        if (!v74) {
          goto LABEL_216;
        }
        int v72 = 0;
      }
LABEL_105:
      if ((*(unsigned char *)(v74 + 20) & 2) != 0)
      {
LABEL_217:
        if (*(_DWORD *)(v74 + 8) >= 3u)
        {
          uint64_t v255 = *(void *)(v74 + 56);
          if (v255)
          {
            if ((*(unsigned char *)(v255 + 14) & 0x40) != 0)
            {
LABEL_751:
              int v247 = 1;
              goto LABEL_647;
            }
          }
        }
LABEL_218:
        uint64_t v128 = **a1;
        uint64_t v129 = v71;
        int v130 = 1;
        goto LABEL_645;
      }
LABEL_216:
      uint64_t v74 = llvm::AttributeList::addAttributeAtIndex(v71, **a1, -1, 65);
      int v72 = 0;
      a1[14] = (uint64_t **)v74;
      if (!v74) {
        goto LABEL_218;
      }
      goto LABEL_217;
    case 0x154u:
    case 0x155u:
    case 0x1B2u:
      int v104 = sub_1CD133FB0((uint64_t)a1);
      int v21 = v104 | sub_1CD134034((uint64_t)a1);
      unsigned int v26 = (uint64_t *)(a1 + 14);
      uint64_t v25 = (uint64_t)a1[14];
      if (!v25) {
        goto LABEL_89;
      }
      if (*(_DWORD *)(v25 + 8) < 3u) {
        goto LABEL_89;
      }
      uint64_t v105 = *(void *)(v25 + 56);
      if (!v105 || (*(unsigned char *)(v105 + 14) & 0x40) == 0) {
        goto LABEL_89;
      }
      int v23 = 1;
      goto LABEL_91;
    case 0x156u:
      int v210 = sub_1CD133FB0((uint64_t)a1);
      int v21 = v210 | sub_1CD134034((uint64_t)a1);
      unsigned int v26 = (uint64_t *)(a1 + 14);
      uint64_t v25 = (uint64_t)a1[14];
      if (v25 && (*(unsigned char *)(v25 + 16) & 0x20) != 0)
      {
        int v23 = 1;
      }
      else
      {
        uint64_t v25 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        a1[14] = (uint64_t **)v25;
        if (!v25) {
          goto LABEL_706;
        }
        int v23 = 0;
      }
      if (*(_DWORD *)(v25 + 8) >= 2u)
      {
        uint64_t v311 = *(void *)(v25 + 48);
        if (v311)
        {
          if ((*(unsigned char *)(v311 + 14) & 8) != 0) {
            goto LABEL_88;
          }
        }
      }
LABEL_706:
      BOOL v27 = **a1;
      BOOL v28 = (uint64_t *)(a1 + 14);
      int v29 = 0;
      signed int v30 = 19;
LABEL_48:
      uint64_t v25 = llvm::AttributeList::addAttributeAtIndex(v28, v27, v29, v30);
      a1[14] = (uint64_t **)v25;
      if (!v25) {
        goto LABEL_89;
      }
      int v23 = 0;
LABEL_88:
      if (*(_DWORD *)(v25 + 8) >= 3u)
      {
        uint64_t v231 = *(void *)(v25 + 56);
        if (v231)
        {
          if ((*(unsigned char *)(v231 + 14) & 0x40) != 0) {
            goto LABEL_91;
          }
        }
      }
LABEL_89:
      uint64_t v63 = **a1;
      uint64_t v64 = v26;
      int v65 = 1;
LABEL_90:
      uint64_t v25 = llvm::AttributeList::addAttributeAtIndex(v64, v63, v65, 22);
      int v23 = 0;
      a1[14] = (uint64_t **)v25;
      if (v25) {
        goto LABEL_91;
      }
      goto LABEL_92;
    case 0x15Eu:
    case 0x167u:
      int v139 = sub_1CD133FB0((uint64_t)a1);
      unsigned int v83 = v139 | sub_1CD134034((uint64_t)a1);
      uint64_t v84 = (uint64_t *)(a1 + 14);
      BOOL v140 = a1[14];
      if (v140)
      {
        if (*((_DWORD *)v140 + 2) >= 4u)
        {
          unsigned int v284 = v140[8];
          if (v284)
          {
            if ((*((unsigned char *)v284 + 14) & 0x40) != 0) {
              goto LABEL_844;
            }
          }
        }
      }
      uint64_t v86 = **a1;
      int v87 = 2;
      goto LABEL_236;
    case 0x162u:
    case 0x163u:
      int v137 = sub_1CD133FB0((uint64_t)a1);
      int v138 = v137 | sub_1CD134034((uint64_t)a1);
      unsigned int v83 = v138 | sub_1CD1340E0((uint64_t)a1, 0, *a2);
LABEL_128:
      uint64_t v84 = (uint64_t *)(a1 + 14);
      __int16 v85 = a1[14];
      if (v85 && ((_BYTE)v85[2] & 0x20) != 0) {
        goto LABEL_844;
      }
      uint64_t v86 = **a1;
      int v87 = -1;
      signed int v88 = 37;
      goto LABEL_131;
    case 0x165u:
    case 0x1D3u:
      int v159 = sub_1CD133FB0((uint64_t)a1);
      int v21 = v159 | sub_1CD134034((uint64_t)a1);
      BOOL v54 = (uint64_t *)(a1 + 14);
      uint64_t v53 = (uint64_t)a1[14];
      if (!v53) {
        goto LABEL_293;
      }
      if (*(_DWORD *)(v53 + 8) < 4u) {
        goto LABEL_293;
      }
      uint64_t v160 = *(void *)(v53 + 64);
      if (!v160 || (*(unsigned char *)(v160 + 14) & 0x40) == 0) {
        goto LABEL_293;
      }
      int v23 = 1;
      goto LABEL_296;
    case 0x166u:
      int v211 = sub_1CD133FB0((uint64_t)a1);
      unsigned int v83 = v211 | sub_1CD134034((uint64_t)a1);
      uint64_t v84 = (uint64_t *)(a1 + 14);
      unsigned int v212 = a1[14];
      if (v212 && *((_DWORD *)v212 + 2) >= 6u && (v298 = v212[10]) != 0 && (*((unsigned char *)v298 + 14) & 0x40) != 0)
      {
LABEL_844:
        int v89 = 0;
      }
      else
      {
        uint64_t v86 = **a1;
        int v87 = 4;
LABEL_236:
        signed int v88 = 22;
LABEL_131:
        a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex(v84, v86, v87, v88);
        int v89 = 1;
      }
      int v90 = v7 | v89;
      return v90 | v83;
    case 0x169u:
    case 0x16Au:
    case 0x1CAu:
      int v96 = sub_1CD133F30((llvm::LLVMContext ***)a1, 1, 0);
      unsigned int v97 = a1[14];
      if (v97 && (*((unsigned char *)v97 + 13) & 0x10) != 0)
      {
        int v98 = 0;
      }
      else
      {
        a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 12);
        int v98 = 1;
      }
      int v21 = v96 | v98 | sub_1CD133FB0((uint64_t)a1);
      uint64_t v99 = (uint64_t)a1[14];
      if (v99 && (*(unsigned char *)(v99 + 16) & 0x20) != 0)
      {
        int v23 = 1;
      }
      else
      {
        uint64_t v99 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        a1[14] = (uint64_t **)v99;
        if (!v99)
        {
LABEL_497:
          uint64_t v99 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 0, 19);
          a1[14] = (uint64_t **)v99;
          if (!v99)
          {
LABEL_500:
            uint64_t v99 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
            a1[14] = (uint64_t **)v99;
            if (!v99) {
              goto LABEL_503;
            }
            int v23 = 0;
LABEL_502:
            if (*(_DWORD *)(v99 + 8) >= 3u)
            {
              uint64_t v276 = *(void *)(v99 + 56);
              if (v276)
              {
                if ((*(unsigned char *)(v276 + 14) & 0x40) != 0)
                {
LABEL_504:
                  if (*(_DWORD *)(v99 + 8) >= 4u)
                  {
                    uint64_t v277 = *(void *)(v99 + 64);
                    if (v277)
                    {
                      if ((*(unsigned char *)(v277 + 16) & 0x10) != 0) {
                        goto LABEL_345;
                      }
                    }
                  }
LABEL_505:
                  unsigned int v39 = **a1;
                  uint64_t v40 = (uint64_t *)(a1 + 14);
                  int v41 = 2;
                  signed int v42 = 36;
                  goto LABEL_94;
                }
              }
            }
LABEL_503:
            uint64_t v99 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 22);
            int v23 = 0;
            a1[14] = (uint64_t **)v99;
            if (!v99) {
              goto LABEL_505;
            }
            goto LABEL_504;
          }
          int v23 = 0;
LABEL_499:
          if ((*(unsigned char *)(v99 + 20) & 2) != 0) {
            goto LABEL_502;
          }
          goto LABEL_500;
        }
        int v23 = 0;
      }
      if (*(_DWORD *)(v99 + 8) >= 2u)
      {
        uint64_t v275 = *(void *)(v99 + 48);
        if (v275)
        {
          if ((*(unsigned char *)(v275 + 14) & 8) != 0) {
            goto LABEL_499;
          }
        }
      }
      goto LABEL_497;
    case 0x17Eu:
      int v213 = sub_1CD133FB0((uint64_t)a1);
      int v21 = v213 | sub_1CD134034((uint64_t)a1);
      BOOL v54 = (uint64_t *)(a1 + 14);
      uint64_t v53 = (uint64_t)a1[14];
      if (v53 && (*(unsigned char *)(v53 + 16) & 0x20) != 0)
      {
        int v23 = 1;
      }
      else
      {
        uint64_t v53 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        a1[14] = (uint64_t **)v53;
        if (!v53)
        {
LABEL_457:
          uint64_t v53 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
          a1[14] = (uint64_t **)v53;
          if (!v53)
          {
LABEL_711:
            uint64_t v53 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 2, 22);
            a1[14] = (uint64_t **)v53;
            if (!v53) {
              goto LABEL_714;
            }
            int v23 = 0;
LABEL_713:
            if (*(_DWORD *)(v53 + 8) >= 5u)
            {
              uint64_t v313 = *(void *)(v53 + 72);
              if (v313)
              {
                if ((*(unsigned char *)(v313 + 14) & 0x40) != 0) {
                  goto LABEL_296;
                }
              }
            }
LABEL_714:
            uint64_t v59 = **a1;
            uint64_t v60 = (uint64_t *)(a1 + 14);
            int v61 = 3;
            goto LABEL_294;
          }
          int v23 = 0;
LABEL_710:
          if (*(_DWORD *)(v53 + 8) >= 4u)
          {
            uint64_t v312 = *(void *)(v53 + 64);
            if (v312)
            {
              if ((*(unsigned char *)(v312 + 14) & 0x40) != 0) {
                goto LABEL_713;
              }
            }
          }
          goto LABEL_711;
        }
        int v23 = 0;
      }
      if ((*(unsigned char *)(v53 + 20) & 2) != 0) {
        goto LABEL_710;
      }
      goto LABEL_457;
    case 0x187u:
      int v214 = sub_1CD133FB0((uint64_t)a1);
      int v21 = v214 | sub_1CD134034((uint64_t)a1);
      int v216 = (uint64_t *)(a1 + 14);
      uint64_t v215 = (uint64_t)a1[14];
      if (v215 && (*(unsigned char *)(v215 + 16) & 0x20) != 0)
      {
        int v23 = 1;
      }
      else
      {
        uint64_t v215 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        a1[14] = (uint64_t **)v215;
        if (!v215)
        {
LABEL_717:
          uint64_t v215 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 22);
          a1[14] = (uint64_t **)v215;
          if (!v215)
          {
LABEL_720:
            uint64_t v215 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 19);
            a1[14] = (uint64_t **)v215;
            if (!v215) {
              goto LABEL_723;
            }
            int v23 = 0;
LABEL_722:
            if (*(_DWORD *)(v215 + 8) >= 3u)
            {
              uint64_t v316 = *(void *)(v215 + 56);
              if (v316)
              {
                if ((*(unsigned char *)(v316 + 20) & 4) != 0)
                {
LABEL_743:
                  if (*(_DWORD *)(v215 + 8) < 5u
                    || (uint64_t v292 = *(void *)(v215 + 72)) == 0
                    || (*(unsigned char *)(v292 + 14) & 0x40) == 0)
                  {
LABEL_744:
                    uint64_t v215 = llvm::AttributeList::addAttributeAtIndex(v216, **a1, 3, 22);
                    int v23 = 0;
                    a1[14] = (uint64_t **)v215;
                    if (!v215)
                    {
LABEL_746:
                      unsigned int v39 = **a1;
                      uint64_t v40 = v216;
                      int v41 = 3;
                      goto LABEL_93;
                    }
                  }
                  if (*(_DWORD *)(v215 + 8) >= 5u)
                  {
                    uint64_t v293 = *(void *)(v215 + 72);
                    if (v293)
                    {
                      if ((*(unsigned char *)(v293 + 17) & 0x20) != 0) {
                        goto LABEL_345;
                      }
                    }
                  }
                  goto LABEL_746;
                }
              }
            }
LABEL_723:
            v250 = **a1;
            v251 = (uint64_t *)(a1 + 14);
            signed int v252 = 66;
            goto LABEL_741;
          }
          int v23 = 0;
LABEL_719:
          if (*(_DWORD *)(v215 + 8) >= 3u)
          {
            uint64_t v315 = *(void *)(v215 + 56);
            if (v315)
            {
              if ((*(unsigned char *)(v315 + 14) & 8) != 0) {
                goto LABEL_722;
              }
            }
          }
          goto LABEL_720;
        }
        int v23 = 0;
      }
      if (*(_DWORD *)(v215 + 8) >= 3u)
      {
        uint64_t v314 = *(void *)(v215 + 56);
        if (v314)
        {
          if ((*(unsigned char *)(v314 + 14) & 0x40) != 0) {
            goto LABEL_719;
          }
        }
      }
      goto LABEL_717;
    case 0x188u:
      int v217 = sub_1CD133FB0((uint64_t)a1);
      int v21 = v217 | sub_1CD134034((uint64_t)a1);
      BOOL v54 = (uint64_t *)(a1 + 14);
      uint64_t v53 = (uint64_t)a1[14];
      if (v53 && (*(unsigned char *)(v53 + 16) & 0x20) != 0)
      {
        int v23 = 1;
      }
      else
      {
        uint64_t v53 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        a1[14] = (uint64_t **)v53;
        if (!v53) {
          goto LABEL_726;
        }
        int v23 = 0;
      }
      if (*(_DWORD *)(v53 + 8) >= 3u)
      {
        uint64_t v317 = *(void *)(v53 + 56);
        if (v317)
        {
          if ((*(unsigned char *)(v317 + 14) & 0x40) != 0) {
            goto LABEL_728;
          }
        }
      }
LABEL_726:
      uint64_t v53 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 22);
      a1[14] = (uint64_t **)v53;
      if (!v53) {
        goto LABEL_729;
      }
      int v23 = 0;
LABEL_728:
      if (*(_DWORD *)(v53 + 8) >= 3u)
      {
        uint64_t v318 = *(void *)(v53 + 56);
        if (v318)
        {
          if ((*(unsigned char *)(v318 + 14) & 8) != 0) {
            goto LABEL_731;
          }
        }
      }
LABEL_729:
      uint64_t v53 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 19);
      a1[14] = (uint64_t **)v53;
      if (!v53) {
        goto LABEL_732;
      }
      int v23 = 0;
LABEL_731:
      if (*(_DWORD *)(v53 + 8) >= 3u)
      {
        uint64_t v319 = *(void *)(v53 + 56);
        if (v319)
        {
          if ((*(unsigned char *)(v319 + 20) & 4) != 0) {
            goto LABEL_292;
          }
        }
      }
LABEL_732:
      v161 = **a1;
      unint64_t v162 = (uint64_t *)(a1 + 14);
      int v163 = 1;
      signed int v164 = 66;
LABEL_290:
      uint64_t v53 = llvm::AttributeList::addAttributeAtIndex(v162, v161, v163, v164);
      a1[14] = (uint64_t **)v53;
      if (v53)
      {
        int v23 = 0;
        goto LABEL_292;
      }
      goto LABEL_293;
    case 0x191u:
    case 0x192u:
      goto LABEL_255;
    case 0x193u:
    case 0x197u:
    case 0x19Eu:
      int v100 = sub_1CD133ED8((uint64_t)a1);
      uint64_t v101 = (uint64_t)a1[14];
      if (v101 && (*(unsigned char *)(v101 + 16) & 0x20) != 0)
      {
        int v102 = 1;
      }
      else
      {
        uint64_t v101 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        a1[14] = (uint64_t **)v101;
        if (!v101)
        {
LABEL_164:
          uint64_t v101 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
          a1[14] = (uint64_t **)v101;
          if (!v101) {
            goto LABEL_524;
          }
          int v102 = 0;
LABEL_523:
          if (*(_DWORD *)(v101 + 8) >= 3u)
          {
            uint64_t v280 = *(void *)(v101 + 56);
            if (v280)
            {
              if ((*(unsigned char *)(v280 + 14) & 0x40) != 0)
              {
LABEL_525:
                if (*(_DWORD *)(v101 + 8) >= 4u)
                {
                  uint64_t v281 = *(void *)(v101 + 64);
                  if (v281)
                  {
                    if ((*(unsigned char *)(v281 + 14) & 0x40) != 0)
                    {
LABEL_838:
                      int v226 = 1;
LABEL_535:
                      int v18 = v102 & v226 ^ 1;
                      int v19 = v7 | v100;
                      return v19 | v18;
                    }
                  }
                }
LABEL_526:
                uint64_t v222 = **a1;
                uint64_t v223 = (uint64_t *)(a1 + 14);
                int v224 = 2;
                goto LABEL_534;
              }
            }
          }
LABEL_524:
          uint64_t v101 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 22);
          int v102 = 0;
          a1[14] = (uint64_t **)v101;
          if (!v101) {
            goto LABEL_526;
          }
          goto LABEL_525;
        }
        int v102 = 0;
      }
      if ((*(unsigned char *)(v101 + 20) & 2) != 0) {
        goto LABEL_523;
      }
      goto LABEL_164;
    case 0x194u:
    case 0x19Fu:
      uint64_t v142 = (uint64_t *)(a1 + 14);
      uint64_t v141 = (uint64_t)a1[14];
      if (v141 && (*(unsigned char *)(v141 + 12) & 8) != 0)
      {
        int v45 = 1;
      }
      else
      {
        uint64_t v141 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
        a1[14] = (uint64_t **)v141;
        if (!v141)
        {
LABEL_240:
          uint64_t v141 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
          a1[14] = (uint64_t **)v141;
          if (!v141)
          {
LABEL_241:
            uint64_t v141 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
            a1[14] = (uint64_t **)v141;
            if (!v141)
            {
LABEL_581:
              uint64_t v141 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 46);
              a1[14] = (uint64_t **)v141;
              if (!v141)
              {
LABEL_584:
                uint64_t v167 = **a1;
                uint64_t v168 = (uint64_t *)(a1 + 14);
                int v169 = 2;
                signed int v170 = 22;
                goto LABEL_334;
              }
              int v45 = 0;
LABEL_583:
              if (*(_DWORD *)(v141 + 8) < 4u) {
                goto LABEL_584;
              }
              uint64_t v289 = *(void *)(v141 + 64);
              if (!v289 || (*(unsigned char *)(v289 + 14) & 0x40) == 0) {
                goto LABEL_584;
              }
LABEL_336:
              if (*(_DWORD *)(v141 + 8) < 4u
                || (uint64_t v258 = *(void *)(v141 + 64)) == 0
                || (*(unsigned char *)(v258 + 17) & 0x20) == 0)
              {
LABEL_337:
                uint64_t v141 = llvm::AttributeList::addAttributeAtIndex(v142, **a1, 2, 45);
                a1[14] = (uint64_t **)v141;
                if (!v141) {
                  goto LABEL_340;
                }
                int v45 = 0;
              }
              if (*(_DWORD *)(v141 + 8) >= 3u)
              {
                uint64_t v259 = *(void *)(v141 + 56);
                if (v259)
                {
                  if ((*(unsigned char *)(v259 + 14) & 8) != 0)
                  {
LABEL_341:
                    if (*(_DWORD *)(v141 + 8) >= 4u)
                    {
                      uint64_t v260 = *(void *)(v141 + 64);
                      if (v260)
                      {
                        if ((*(unsigned char *)(v260 + 14) & 8) != 0) {
                          goto LABEL_607;
                        }
                      }
                    }
LABEL_342:
                    uint64_t v109 = **a1;
                    uint64_t v110 = v142;
                    int v111 = 2;
                    signed int v112 = 19;
                    goto LABEL_192;
                  }
                }
              }
LABEL_340:
              uint64_t v141 = llvm::AttributeList::addAttributeAtIndex(v142, **a1, 1, 19);
              int v45 = 0;
              a1[14] = (uint64_t **)v141;
              if (!v141) {
                goto LABEL_342;
              }
              goto LABEL_341;
            }
            int v45 = 0;
LABEL_580:
            if (*(_DWORD *)(v141 + 8) >= 3u)
            {
              uint64_t v288 = *(void *)(v141 + 56);
              if (v288)
              {
                if ((*(unsigned char *)(v288 + 17) & 0x40) != 0) {
                  goto LABEL_583;
                }
              }
            }
            goto LABEL_581;
          }
          int v45 = 0;
LABEL_579:
          if ((*(unsigned char *)(v141 + 20) & 2) != 0) {
            goto LABEL_580;
          }
          goto LABEL_241;
        }
        int v45 = 0;
      }
      if ((*(unsigned char *)(v141 + 16) & 0x20) != 0) {
        goto LABEL_579;
      }
      goto LABEL_240;
    case 0x195u:
    case 0x1A5u:
      uint64_t v135 = (uint64_t *)(a1 + 14);
      uint64_t v143 = a1[14];
      if (v143 && (*((unsigned char *)v143 + 12) & 8) != 0)
      {
        int v72 = 1;
      }
      else
      {
        int v72 = 0;
        a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
      }
      int v73 = sub_1CD133ED8((uint64_t)a1);
      uint64_t v144 = (uint64_t)a1[14];
      if (v144 && (*(unsigned char *)(v144 + 16) & 0x20) != 0
        || (uint64_t v144 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37),
            int v72 = 0,
            (a1[14] = (uint64_t **)v144) != 0))
      {
        if ((*(unsigned char *)(v144 + 20) & 2) != 0) {
          goto LABEL_751;
        }
      }
      goto LABEL_573;
    case 0x196u:
    case 0x199u:
    case 0x1A0u:
    case 0x1A6u:
      __int16 v79 = (uint64_t *)(a1 + 14);
      uint64_t v78 = a1[14];
      if (v78 && ((_BYTE)v78[2] & 0x20) != 0)
      {
        int v80 = 1;
      }
      else
      {
        uint64_t v78 = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        a1[14] = v78;
        if (!v78) {
          goto LABEL_118;
        }
        int v80 = 0;
      }
      if ((*((unsigned char *)v78 + 12) & 8) != 0)
      {
LABEL_317:
        if ((*((unsigned char *)v78 + 20) & 2) != 0)
        {
          int v165 = 1;
LABEL_319:
          int v73 = sub_1CD133ED8((uint64_t)a1);
          uint64_t v148 = (uint64_t)a1[14];
          if (v148)
          {
            if (*(_DWORD *)(v148 + 8) >= 3u)
            {
              uint64_t v166 = *(void *)(v148 + 56);
              if (v166)
              {
                if ((*(unsigned char *)(v166 + 14) & 0x40) != 0)
                {
                  int v72 = v80 & v165;
                  goto LABEL_643;
                }
              }
            }
          }
LABEL_641:
          uint64_t v149 = **a1;
          uint64_t v150 = v79;
          int v151 = 1;
          signed int v152 = 22;
LABEL_642:
          uint64_t v148 = llvm::AttributeList::addAttributeAtIndex(v150, v149, v151, v152);
          int v72 = 0;
          a1[14] = (uint64_t **)v148;
          if (!v148)
          {
LABEL_644:
            uint64_t v128 = **a1;
            uint64_t v129 = v79;
            int v130 = 2;
LABEL_645:
            signed int v235 = 22;
            goto LABEL_646;
          }
LABEL_643:
          if (*(_DWORD *)(v148 + 8) >= 4u)
          {
            uint64_t v253 = *(void *)(v148 + 64);
            if (v253)
            {
              if ((*(unsigned char *)(v253 + 14) & 0x40) != 0) {
                goto LABEL_751;
              }
            }
          }
          goto LABEL_644;
        }
LABEL_318:
        int v165 = 0;
        a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
        goto LABEL_319;
      }
LABEL_118:
      uint64_t v78 = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
      int v80 = 0;
      a1[14] = v78;
      if (!v78) {
        goto LABEL_318;
      }
      goto LABEL_317;
    case 0x198u:
    case 0x1A1u:
      uint64_t v145 = a1[14];
      if (v145 && *((_DWORD *)v145 + 2) >= 3u && (unsigned __int8 v285 = v145[7]) != 0 && (*((unsigned char *)v285 + 17) & 0x40) != 0)
      {
        int v146 = 0;
      }
      else
      {
        int v146 = 1;
        a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 1, 46);
      }
      v7 |= v146;
LABEL_255:
      uint64_t v142 = (uint64_t *)(a1 + 14);
      uint64_t v141 = (uint64_t)a1[14];
      if (v141 && (*(unsigned char *)(v141 + 12) & 8) != 0)
      {
        int v45 = 1;
      }
      else
      {
        uint64_t v141 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
        a1[14] = (uint64_t **)v141;
        if (!v141) {
          goto LABEL_258;
        }
        int v45 = 0;
      }
      if ((*(unsigned char *)(v141 + 16) & 0x20) != 0) {
        goto LABEL_328;
      }
LABEL_258:
      uint64_t v141 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
      a1[14] = (uint64_t **)v141;
      if (!v141) {
        goto LABEL_259;
      }
      int v45 = 0;
LABEL_328:
      if ((*(unsigned char *)(v141 + 20) & 2) != 0) {
        goto LABEL_329;
      }
LABEL_259:
      uint64_t v141 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
      a1[14] = (uint64_t **)v141;
      if (!v141) {
        goto LABEL_330;
      }
      int v45 = 0;
LABEL_329:
      if (*(_DWORD *)(v141 + 8) >= 4u)
      {
        uint64_t v265 = *(void *)(v141 + 64);
        if (v265)
        {
          if ((*(unsigned char *)(v265 + 14) & 0x40) != 0) {
            goto LABEL_332;
          }
        }
      }
LABEL_330:
      uint64_t v141 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 2, 22);
      a1[14] = (uint64_t **)v141;
      if (!v141) {
        goto LABEL_333;
      }
      int v45 = 0;
LABEL_332:
      if (*(_DWORD *)(v141 + 8) >= 3u)
      {
        uint64_t v266 = *(void *)(v141 + 56);
        if (v266)
        {
          if ((*(unsigned char *)(v266 + 20) & 4) != 0) {
            goto LABEL_336;
          }
        }
      }
LABEL_333:
      uint64_t v167 = **a1;
      uint64_t v168 = (uint64_t *)(a1 + 14);
      int v169 = 1;
      signed int v170 = 66;
LABEL_334:
      uint64_t v141 = llvm::AttributeList::addAttributeAtIndex(v168, v167, v169, v170);
      a1[14] = (uint64_t **)v141;
      if (v141)
      {
        int v45 = 0;
        goto LABEL_336;
      }
      goto LABEL_337;
    case 0x19Au:
      uint64_t v43 = (uint64_t)a1[14];
      goto LABEL_472;
    case 0x19Du:
    case 0x1A3u:
    case 0x1D2u:
      int v100 = sub_1CD133ED8((uint64_t)a1);
      uint64_t v103 = (uint64_t)a1[14];
      if (v103 && (*(unsigned char *)(v103 + 16) & 0x20) != 0)
      {
        int v102 = 1;
      }
      else
      {
        uint64_t v103 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        a1[14] = (uint64_t **)v103;
        if (!v103) {
          goto LABEL_169;
        }
        int v102 = 0;
      }
      if ((*(unsigned char *)(v103 + 12) & 8) != 0) {
        goto LABEL_531;
      }
LABEL_169:
      uint64_t v103 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
      a1[14] = (uint64_t **)v103;
      if (!v103) {
        goto LABEL_170;
      }
      int v102 = 0;
LABEL_531:
      if ((*(unsigned char *)(v103 + 20) & 2) != 0) {
        goto LABEL_532;
      }
LABEL_170:
      uint64_t v103 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
      int v102 = 0;
      a1[14] = (uint64_t **)v103;
      if (!v103) {
        goto LABEL_533;
      }
LABEL_532:
      if (*(_DWORD *)(v103 + 8) >= 3u)
      {
        uint64_t v282 = *(void *)(v103 + 56);
        if (v282)
        {
          if ((*(unsigned char *)(v282 + 14) & 0x40) != 0) {
            goto LABEL_838;
          }
        }
      }
LABEL_533:
      uint64_t v222 = **a1;
      uint64_t v223 = (uint64_t *)(a1 + 14);
      int v224 = 1;
LABEL_534:
      uint64_t v225 = llvm::AttributeList::addAttributeAtIndex(v223, v222, v224, 22);
      int v226 = 0;
      a1[14] = (uint64_t **)v225;
      goto LABEL_535;
    case 0x1A2u:
      uint64_t v43 = (uint64_t)a1[14];
      if (v43
        && *(_DWORD *)(v43 + 8) >= 4u
        && (uint64_t v299 = *(void *)(v43 + 64)) != 0
        && (*(unsigned char *)(v299 + 16) & 0x10) != 0)
      {
        int v218 = 0;
      }
      else
      {
        uint64_t v43 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, 2, 36);
        a1[14] = (uint64_t **)v43;
        int v218 = 1;
      }
      v7 |= v218;
LABEL_472:
      BOOL v44 = (uint64_t *)(a1 + 14);
      if (v43 && (*(unsigned char *)(v43 + 13) & 0x10) != 0)
      {
        int v45 = 1;
      }
      else
      {
        uint64_t v43 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 12);
        a1[14] = (uint64_t **)v43;
        if (!v43)
        {
LABEL_475:
          uint64_t v43 = llvm::AttributeList::addAttributeAtIndex(v44, **a1, -1, 37);
          a1[14] = (uint64_t **)v43;
          if (!v43)
          {
LABEL_478:
            uint64_t v43 = llvm::AttributeList::addAttributeAtIndex(v44, **a1, 0, 19);
            a1[14] = (uint64_t **)v43;
            if (!v43)
            {
LABEL_481:
              uint64_t v43 = llvm::AttributeList::addAttributeAtIndex(v44, **a1, -1, 65);
              a1[14] = (uint64_t **)v43;
              if (!v43) {
                goto LABEL_484;
              }
              int v45 = 0;
LABEL_483:
              if (*(_DWORD *)(v43 + 8) >= 3u)
              {
                uint64_t v269 = *(void *)(v43 + 56);
                if (v269)
                {
                  if ((*(unsigned char *)(v269 + 14) & 0x40) != 0)
                  {
LABEL_189:
                    if (*(_DWORD *)(v43 + 8) >= 3u)
                    {
                      uint64_t v237 = *(void *)(v43 + 56);
                      if (v237)
                      {
                        if ((*(unsigned char *)(v237 + 17) & 0x20) != 0) {
                          goto LABEL_607;
                        }
                      }
                    }
LABEL_190:
                    uint64_t v109 = **a1;
                    uint64_t v110 = v44;
                    int v111 = 1;
LABEL_191:
                    signed int v112 = 45;
                    goto LABEL_192;
                  }
                }
              }
LABEL_484:
              unsigned int v106 = **a1;
              uint64_t v107 = v44;
              int v108 = 1;
              goto LABEL_188;
            }
            int v45 = 0;
LABEL_480:
            if ((*(unsigned char *)(v43 + 20) & 2) != 0) {
              goto LABEL_483;
            }
            goto LABEL_481;
          }
          int v45 = 0;
LABEL_477:
          if (*(_DWORD *)(v43 + 8) >= 2u)
          {
            uint64_t v268 = *(void *)(v43 + 48);
            if (v268)
            {
              if ((*(unsigned char *)(v268 + 14) & 8) != 0) {
                goto LABEL_480;
              }
            }
          }
          goto LABEL_478;
        }
        int v45 = 0;
      }
      if ((*(unsigned char *)(v43 + 16) & 0x20) != 0) {
        goto LABEL_477;
      }
      goto LABEL_475;
    case 0x1A4u:
    case 0x1A7u:
      __int16 v79 = (uint64_t *)(a1 + 14);
      uint64_t v147 = a1[14];
      if (v147 && (*((unsigned char *)v147 + 12) & 8) != 0)
      {
        int v72 = 1;
      }
      else
      {
        int v72 = 0;
        a1[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 3);
      }
      int v73 = sub_1CD133ED8((uint64_t)a1);
      uint64_t v148 = (uint64_t)a1[14];
      if (v148 && (*(unsigned char *)(v148 + 16) & 0x20) != 0) {
        goto LABEL_588;
      }
      uint64_t v148 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
      a1[14] = (uint64_t **)v148;
      if (v148)
      {
        int v72 = 0;
LABEL_588:
        if ((*(unsigned char *)(v148 + 20) & 2) != 0) {
          goto LABEL_643;
        }
      }
      uint64_t v149 = **a1;
      uint64_t v150 = (uint64_t *)(a1 + 14);
      int v151 = -1;
      signed int v152 = 65;
      goto LABEL_642;
    case 0x1A8u:
    case 0x1A9u:
    case 0x1ACu:
    case 0x1ADu:
    case 0x1AEu:
    case 0x1AFu:
    case 0x1B0u:
      BOOL v44 = (uint64_t *)(a1 + 14);
      uint64_t v43 = (uint64_t)a1[14];
      if (v43 && (*(unsigned char *)(v43 + 16) & 0x20) != 0)
      {
        int v45 = 1;
      }
      else
      {
        uint64_t v43 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        a1[14] = (uint64_t **)v43;
        if (!v43) {
          goto LABEL_66;
        }
        int v45 = 0;
      }
      if ((*(unsigned char *)(v43 + 20) & 2) != 0) {
        goto LABEL_186;
      }
LABEL_66:
      uint64_t v43 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
      a1[14] = (uint64_t **)v43;
      if (!v43) {
        goto LABEL_187;
      }
      int v45 = 0;
LABEL_186:
      if (*(_DWORD *)(v43 + 8) >= 4u)
      {
        uint64_t v254 = *(void *)(v43 + 64);
        if (v254)
        {
          if ((*(unsigned char *)(v254 + 14) & 0x40) != 0) {
            goto LABEL_189;
          }
        }
      }
LABEL_187:
      unsigned int v106 = **a1;
      uint64_t v107 = (uint64_t *)(a1 + 14);
      int v108 = 2;
LABEL_188:
      uint64_t v43 = llvm::AttributeList::addAttributeAtIndex(v107, v106, v108, 22);
      int v45 = 0;
      a1[14] = (uint64_t **)v43;
      if (v43) {
        goto LABEL_189;
      }
      goto LABEL_190;
    case 0x1AAu:
    case 0x1ABu:
      uint64_t v133 = (uint64_t *)(a1 + 14);
      uint64_t v131 = (uint64_t)a1[14];
      if (v131 && (*(unsigned char *)(v131 + 16) & 0x20) != 0)
      {
        int v45 = 1;
      }
      else
      {
        uint64_t v131 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        a1[14] = (uint64_t **)v131;
        if (!v131) {
          goto LABEL_271;
        }
        int v45 = 0;
      }
      if ((*(unsigned char *)(v131 + 20) & 2) != 0) {
        goto LABEL_549;
      }
LABEL_271:
      uint64_t v153 = **a1;
      int v154 = (uint64_t *)(a1 + 14);
      int v155 = -1;
      signed int v156 = 65;
      goto LABEL_547;
    case 0x1B1u:
      uint64_t v133 = (uint64_t *)(a1 + 14);
      uint64_t v131 = (uint64_t)a1[14];
      if (v131 && (*(unsigned char *)(v131 + 16) & 0x20) != 0)
      {
        int v45 = 1;
      }
      else
      {
        uint64_t v131 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        a1[14] = (uint64_t **)v131;
        if (!v131)
        {
LABEL_488:
          uint64_t v131 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 65);
          a1[14] = (uint64_t **)v131;
          if (!v131) {
            goto LABEL_737;
          }
          int v45 = 0;
LABEL_736:
          if (*(_DWORD *)(v131 + 8) >= 3u)
          {
            uint64_t v320 = *(void *)(v131 + 56);
            if (v320)
            {
              if ((*(unsigned char *)(v320 + 14) & 0x40) != 0) {
                goto LABEL_549;
              }
            }
          }
LABEL_737:
          uint64_t v153 = **a1;
          int v154 = (uint64_t *)(a1 + 14);
          int v155 = 1;
          signed int v156 = 22;
          goto LABEL_547;
        }
        int v45 = 0;
      }
      if ((*(unsigned char *)(v131 + 20) & 2) != 0) {
        goto LABEL_736;
      }
      goto LABEL_488;
    case 0x1BAu:
    case 0x1BBu:
      int v157 = sub_1CD133FB0((uint64_t)a1);
      int v21 = v157 | sub_1CD134034((uint64_t)a1);
      uint64_t v158 = (uint64_t)a1[14];
      if (v158 && (*(unsigned char *)(v158 + 16) & 0x20) != 0)
      {
        int v23 = 1;
      }
      else
      {
        uint64_t v158 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        int v23 = 0;
        a1[14] = (uint64_t **)v158;
        if (!v158) {
          goto LABEL_596;
        }
      }
      if (*(_DWORD *)(v158 + 8) >= 2u)
      {
        uint64_t v290 = *(void *)(v158 + 48);
        if (v290)
        {
          if ((*(unsigned char *)(v290 + 14) & 8) != 0) {
            goto LABEL_345;
          }
        }
      }
LABEL_596:
      unsigned int v39 = **a1;
      uint64_t v40 = (uint64_t *)(a1 + 14);
      int v41 = 0;
      signed int v42 = 19;
      goto LABEL_94;
    case 0x1CFu:
      int v219 = sub_1CD133FB0((uint64_t)a1);
      int v21 = v219 | sub_1CD134034((uint64_t)a1);
      int v216 = (uint64_t *)(a1 + 14);
      uint64_t v215 = (uint64_t)a1[14];
      if (v215 && (*(unsigned char *)(v215 + 16) & 0x20) != 0)
      {
        int v23 = 1;
      }
      else
      {
        uint64_t v215 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)a1 + 14, **a1, -1, 37);
        a1[14] = (uint64_t **)v215;
        if (!v215) {
          goto LABEL_740;
        }
        int v23 = 0;
      }
      if (*(_DWORD *)(v215 + 8) >= 3u)
      {
        uint64_t v321 = *(void *)(v215 + 56);
        if (v321)
        {
          if ((*(unsigned char *)(v321 + 14) & 0x40) != 0) {
            goto LABEL_743;
          }
        }
      }
LABEL_740:
      v250 = **a1;
      v251 = (uint64_t *)(a1 + 14);
      signed int v252 = 22;
LABEL_741:
      uint64_t v215 = llvm::AttributeList::addAttributeAtIndex(v251, v250, 1, v252);
      a1[14] = (uint64_t **)v215;
      if (v215)
      {
        int v23 = 0;
        goto LABEL_743;
      }
      goto LABEL_744;
    default:
      return result;
  }
}

uint64_t sub_1CD133ED8(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 112);
  int v2 = (uint64_t *)(a1 + 112);
  uint64_t v3 = v4;
  if (v4 && (*(unsigned char *)(v3 + 17) & 0x30) != 0) {
    return 0;
  }
  *(void *)(a1 + 112) = llvm::AttributeList::addAttributeAtIndex(v2, **(uint64_t ***)a1, -1, 45);
  return 1;
}

uint64_t sub_1CD133F30(llvm::LLVMContext ***a1, uint64_t a2, uint64_t a3)
{
  int v5 = (llvm::AttributeList *)(a1 + 14);
  uint64_t v4 = a1[14];
  if (v4 && (*((unsigned char *)v4 + 21) & 8) != 0) {
    return 0;
  }
  unsigned int v6 = (uint64_t *)**a1;
  uint64_t v7 = a3;
  if ((a3 & 0xFF00000000) == 0) {
    uint64_t v7 = 0xFFFFFFFFLL;
  }
  unint64_t v8 = llvm::Attribute::get(v6, 0x4Bu, v7 | (a2 << 32));
  a1[14] = (llvm::LLVMContext **)llvm::AttributeList::addAttributeAtIndex(v5, **a1, -1, v8);
  return 1;
}

uint64_t sub_1CD133FB0(uint64_t a1)
{
  if (*(unsigned char *)(**(void **)(*(void *)(a1 + 24) + 16) + 8) == 7) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v3 = (uint64_t *)(a1 + 112);
  uint64_t v4 = v5;
  if (v5)
  {
    if (*(_DWORD *)(v4 + 8) >= 2u)
    {
      uint64_t v6 = *(void *)(v4 + 48);
      if (v6)
      {
        if ((*(unsigned char *)(v6 + 16) & 0x10) != 0) {
          return 0;
        }
      }
    }
  }
  *(void *)(a1 + 112) = llvm::AttributeList::addAttributeAtIndex(v3, **(uint64_t ***)a1, 0, 36);
  return 1;
}

uint64_t sub_1CD134034(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 96);
  if (v1)
  {
    unsigned int v3 = 0;
    char v4 = 0;
    uint64_t v6 = (uint64_t *)(a1 + 112);
    uint64_t v5 = *(void *)(a1 + 112);
    do
    {
      if (v5
        && v3 + 2 < *(_DWORD *)(v5 + 8)
        && (uint64_t v7 = *(void *)(v5 + 8 * (v3 + 2) + 40)) != 0
        && (*(unsigned char *)(v7 + 16) & 0x10) != 0)
      {
        ++v3;
      }
      else
      {
        uint64_t v5 = llvm::AttributeList::addAttributeAtIndex(v6, **(uint64_t ***)a1, ++v3, 36);
        *(void *)(a1 + 112) = v5;
        unint64_t v1 = *(void *)(a1 + 96);
        char v4 = 1;
      }
    }
    while (v1 > v3);
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

uint64_t sub_1CD1340E0(uint64_t a1, int a2, uint64_t a3)
{
  if (!*(unsigned char *)(a3 + 144) && !*(unsigned char *)(a3 + 146)) {
    return 0;
  }
  char v4 = (uint64_t *)(a1 + 112);
  uint64_t v5 = *(void *)(a1 + 112);
  if (v5)
  {
    if ((a2 + 2) < *(_DWORD *)(v5 + 8))
    {
      uint64_t v7 = *(void *)(v5 + 8 * (a2 + 2) + 40);
      if (v7)
      {
        if (*(unsigned char *)(v7 + 18)) {
          return 0;
        }
      }
    }
  }
  *(void *)(a1 + 112) = llvm::AttributeList::addAttributeAtIndex(v4, **(uint64_t ***)a1, a2 + 1, 48);
  return 1;
}

BOOL llvm::hasFloatFn(void *a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  int v5 = *(unsigned __int8 *)(a2 + 8);
  if (v5 == 2)
  {
    if (((*(void *)(a1[1] + 8 * (a4 >> 6)) >> a4) & 1) == 0) {
      return ((*(unsigned __int8 *)(*a1 + ((unint64_t)a4 >> 2)) >> (2 * (a4 & 3))) & 3) != 0;
    }
  }
  else if (*(unsigned char *)(a2 + 8))
  {
    if (v5 == 3)
    {
      a4 = a3;
      if (((*(void *)(a1[1] + 8 * (a3 >> 6)) >> a3) & 1) == 0) {
        return ((*(unsigned __int8 *)(*a1 + ((unint64_t)a4 >> 2)) >> (2 * (a4 & 3))) & 3) != 0;
      }
    }
    else
    {
      a4 = a5;
      if (((*(void *)(a1[1] + 8 * (a5 >> 6)) >> a5) & 1) == 0) {
        return ((*(unsigned __int8 *)(*a1 + ((unint64_t)a4 >> 2)) >> (2 * (a4 & 3))) & 3) != 0;
      }
    }
  }
  return 0;
}

uint64_t sub_1CD1341F8(unsigned int a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7, uint64_t *a8, unsigned __int8 a9)
{
  if (((*(void *)(a8[1] + 8 * (a1 >> 6)) >> a1) & 1) != 0
    || ((*(unsigned __int8 *)(*a8 + ((unint64_t)a1 >> 2)) >> (2 * (a1 & 3))) & 3) == 0)
  {
    return 0;
  }
  uint64_t v18 = *(void *)(*(void *)(a7[6] + 56) + 40);
  int v19 = (unsigned __int8 *)sub_1CC92CEDC(a8, a1);
  int v20 = a2;
  uint64_t v22 = v21;
  int v23 = (llvm::PointerType *)llvm::FunctionType::get(v20, a3, a4, a9);
  inserted = llvm::Module::getOrInsertFunction(v18, v19, v22, v23, 0);
  uint64_t v25 = *(uint64_t **)(v18 + 112);
  unint64_t v26 = *((unsigned int *)v25 + 8);
  uint64_t v44 = a6;
  signed int v42 = v22;
  uint64_t v43 = a5;
  uint64_t v40 = (uint64_t **)inserted;
  int v41 = v27;
  if ((v26 & 0x80000000) == 0 && (unint64_t)v22 > v26)
  {
    unint64_t v26 = v26 <= 1 ? 1 : v26;
    if ((unint64_t)v22 >= v26) {
      uint64_t v22 = (const char *)v26;
    }
  }
  uint64_t v45 = *((unsigned int *)v25 + 2);
  if (v45)
  {
    int v28 = 0;
    if (v22)
    {
      int v29 = v22;
      signed int v30 = v19;
      do
      {
        int v31 = *v30++;
        int v28 = 33 * v28 + v31;
        --v29;
      }
      while (v29);
    }
    uint64_t v32 = *v25;
    uint64_t v33 = *v25 + 8 * v45 + 8;
    int v34 = 1;
    int v35 = v28;
    while (1)
    {
      uint64_t v36 = v35 & (v45 - 1);
      signed int v37 = *(const char ***)(v32 + 8 * v36);
      if (v37 != (const char **)-8)
      {
        if (!v37) {
          goto LABEL_24;
        }
        if (*(_DWORD *)(v33 + 4 * v36) == v28
          && v22 == *v37
          && (!v22 || !memcmp(v19, (char *)v37 + *((unsigned int *)v25 + 5), (size_t)v22)))
        {
          break;
        }
      }
      int v35 = v34 + v36;
      ++v34;
    }
    if (v36 != -1 && (int)v36 != v45)
    {
      uint64_t v38 = *(void *)(*(void *)(v32 + 8 * (int)v36) + 8);
      if (v38)
      {
        if (!*(unsigned char *)(v38 + 16)) {
          llvm::inferLibFuncAttributes((uint64_t ***)v38, a8);
        }
      }
    }
  }
LABEL_24:
  __int16 v47 = 261;
  v46[0] = v19;
  v46[1] = v42;
  uint64_t v10 = sub_1CB845BAC(a7, v40, v41, v43, v44, (uint64_t)v46, 0);
  unsigned int v39 = llvm::Value::stripPointerCasts((llvm::Value *)v41);
  if (v39 && !*((unsigned char *)v39 + 16)) {
    *(_WORD *)(v10 + 18) = (*((_WORD *)v39 + 9) >> 2) & 0xFFC | *(_WORD *)(v10 + 18) & 0xF003;
  }
  return v10;
}

uint64_t llvm::emitMemCpyChk(llvm *a1, llvm *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  v36[4] = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(a7[1] + 12) & 0x80) != 0 || *(unsigned __int8 *)(*a7 + 25) < 0x40u) {
    return 0;
  }
  int v15 = *(uint64_t ***)(*(void *)(*(void *)(a5 + 48) + 56) + 40);
  uint64_t v16 = *v15;
  v33[0] = 37;
  uint64_t v35 = llvm::AttributeList::get(v16, 0xFFFFFFFF, v33, 1);
  int v17 = ***(llvm::IntegerType ****)(a5 + 48);
  uint64_t v32 = llvm::AttributeList::get(*v15, &v35, 1);
  int v31 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(**(void **)(a5 + 64) + 1912), 0);
  unint64_t v30 = llvm::PointerType::get((llvm::PointerType *)(**(void **)(a5 + 64) + 1912), 0);
  unint64_t v18 = llvm::PointerType::get((llvm::PointerType *)(**(void **)(a5 + 64) + 1912), 0);
  uint64_t v19 = llvm::IntegerType::get(v17, (llvm::LLVMContext *)*(unsigned int *)(*(void *)(a6 + 232) + 4));
  uint64_t v20 = llvm::IntegerType::get(v17, (llvm::LLVMContext *)*(unsigned int *)(*(void *)(a6 + 232) + 4));
  int v21 = (uint64_t **)sub_1CD877414((uint64_t)v15, v32, v31, v30, v18, v19, v20);
  int v23 = v22;
  uint64_t v25 = llvm::castToCStr(a1, (llvm::Value *)a5, v24);
  BOOL v27 = llvm::castToCStr(a2, (llvm::Value *)a5, v26);
  v36[0] = (uint64_t)v25;
  v36[1] = (uint64_t)v27;
  v36[2] = a3;
  v36[3] = a4;
  __int16 v34 = 257;
  uint64_t v7 = sub_1CB845BAC((uint64_t *)a5, v21, v23, v36, 4, (uint64_t)v33, 0);
  int v28 = llvm::Value::stripPointerCasts((llvm::Value *)v23);
  if (v28) {
    BOOL v29 = *((unsigned char *)v28 + 16) == 0;
  }
  else {
    BOOL v29 = 0;
  }
  if (v29) {
    *(_WORD *)(v7 + 18) = (*((_WORD *)v28 + 9) >> 2) & 0xFFC | *(_WORD *)(v7 + 18) & 0xF003;
  }
  return v7;
}

void *sub_1CD134660(void *result, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned char *)(*(void *)result + 8) != 3)
  {
    int v5 = result;
    size_t v6 = *(void *)(a2 + 8);
    uint64_t v7 = a3[1];
    if (a3[2] < v6 + v7) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    if (v6)
    {
      uint64_t result = memcpy((void *)(*a3 + v7), *(const void **)a2, v6);
      uint64_t v7 = a3[1];
    }
    uint64_t v8 = v7 + v6;
    a3[1] = v8;
    if (*(unsigned char *)(*(void *)v5 + 8) == 2) {
      char v9 = 102;
    }
    else {
      char v9 = 108;
    }
    if (v8 + 1 > (unint64_t)a3[2]) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(unsigned char *)(*a3 + v8) = v9;
    uint64_t v10 = *a3;
    uint64_t v11 = a3[1] + 1;
    a3[1] = v11;
    *(void *)a2 = v10;
    *(void *)(a2 + 8) = v11;
  }
  return result;
}

uint64_t sub_1CD134754(uint64_t ***a1, unsigned __int8 *a2, const char *a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v18 = a1;
  char v9 = (uint64_t **)sub_1CD57B9C0(*(void *)(*(void *)(*(void *)(a4 + 48) + 56) + 40), a2, a3, 0, *a1, (uint64_t)*a1);
  uint64_t v11 = (llvm::Value *)v10;
  __int16 v17 = 261;
  v16[0] = a2;
  v16[1] = a3;
  uint64_t v12 = sub_1CB845BAC((uint64_t *)a4, v9, v10, (uint64_t *)&v18, 1, (uint64_t)v16, 0);
  *(void *)(v12 + 64) = llvm::AttributeList::removeAttributeAtIndex(a5, *(uint64_t **)(a4 + 64), -1, 56);
  signed int v13 = llvm::Value::stripPointerCasts(v11);
  if (v13) {
    BOOL v14 = *((unsigned char *)v13 + 16) == 0;
  }
  else {
    BOOL v14 = 0;
  }
  if (v14) {
    *(_WORD *)(v12 + 18) = (*((_WORD *)v13 + 9) >> 2) & 0xFFC | *(_WORD *)(v12 + 18) & 0xF003;
  }
  return v12;
}

uint64_t sub_1CD134844(uint64_t ***a1, uint64_t *a2, unsigned __int8 *a3, const char *a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  v39[2] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a5 + 48) + 56) + 40);
  unint64_t v30 = (uint64_t **)sub_1CD661480(v8, a3, a4, 0, *a1, (uint64_t)*a1, *a2);
  uint64_t v33 = v9;
  if (a7)
  {
    uint64_t v10 = *(uint64_t **)(v8 + 112);
    unint64_t v11 = *((unsigned int *)v10 + 8);
    if ((v11 & 0x80000000) != 0)
    {
      size_t v12 = (size_t)a4;
    }
    else
    {
      size_t v12 = (size_t)a4;
      if ((unint64_t)a4 > v11)
      {
        unint64_t v11 = v11 <= 1 ? 1 : v11;
        if ((unint64_t)a4 >= v11) {
          size_t v12 = v11;
        }
      }
    }
    uint64_t v13 = *((unsigned int *)v10 + 2);
    if (v13)
    {
      int v14 = 0;
      if (v12)
      {
        size_t v15 = v12;
        uint64_t v16 = a3;
        do
        {
          int v17 = *v16++;
          int v14 = 33 * v14 + v17;
          --v15;
        }
        while (v15);
      }
      uint64_t v18 = *v10;
      uint64_t v19 = *v10 + 8 * v13 + 8;
      int v20 = 1;
      int v21 = v14;
      while (1)
      {
        uint64_t v22 = v21 & (v13 - 1);
        int v23 = *(void **)(v18 + 8 * v22);
        if (v23 != (void *)-8)
        {
          if (!v23) {
            goto LABEL_28;
          }
          if (*(_DWORD *)(v19 + 4 * v22) == v14
            && v12 == *v23
            && (!v12 || !memcmp(a3, (char *)v23 + *((unsigned int *)v10 + 5), v12)))
          {
            break;
          }
        }
        int v21 = v20 + v22;
        ++v20;
      }
      if (v22 != -1 && (int)v22 != v13)
      {
        uint64_t v24 = *(void *)(*(void *)(v18 + 8 * (int)v22) + 8);
        if (v24)
        {
          if (!*(unsigned char *)(v24 + 16)) {
            llvm::inferLibFuncAttributes((uint64_t ***)v24, a7);
          }
        }
      }
    }
  }
LABEL_28:
  v39[0] = (uint64_t)a1;
  v39[1] = (uint64_t)a2;
  __int16 v38 = 261;
  v37[0] = a3;
  v37[1] = a4;
  uint64_t v25 = sub_1CB845BAC((uint64_t *)a5, v30, v33, v39, 2, (uint64_t)v37, 0);
  *(void *)(v25 + 64) = llvm::AttributeList::removeAttributeAtIndex(a6, *(uint64_t **)(a5 + 64), -1, 56);
  unint64_t v26 = llvm::Value::stripPointerCasts((llvm::Value *)v33);
  if (v26) {
    BOOL v27 = *((unsigned char *)v26 + 16) == 0;
  }
  else {
    BOOL v27 = 0;
  }
  if (v27) {
    *(_WORD *)(v25 + 18) = (*((_WORD *)v26 + 9) >> 2) & 0xFFC | *(_WORD *)(v25 + 18) & 0xF003;
  }
  return v25;
}

uint64_t llvm::emitPutChar(llvm::CastInst *a1, uint64_t a2, uint64_t *a3)
{
  if ((*(unsigned char *)(a3[1] + 44) & 4) != 0 || (*(unsigned char *)(*a3 + 88) & 0x30) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a2 + 48) + 56) + 40);
  char v9 = (unsigned __int8 *)sub_1CC92CEDC(a3, 0x162u);
  unint64_t v11 = v10;
  __int16 v34 = v9;
  size_t v12 = sub_1CD57B9C0(v8, v9, v10, 0, (uint64_t **)(**(void **)(a2 + 64) + 1960), **(void **)(a2 + 64) + 1960);
  uint64_t v35 = *(uint64_t **)(v8 + 112);
  unint64_t v14 = *((unsigned int *)v35 + 8);
  int v31 = v11;
  uint64_t v32 = v15;
  unint64_t v30 = (uint64_t **)v12;
  if ((v14 & 0x80000000) != 0 || (unint64_t)v11 <= v14)
  {
    size_t v16 = (size_t)v11;
  }
  else
  {
    if (v14 <= 1) {
      unint64_t v14 = 1;
    }
    else {
      unint64_t v14 = v14;
    }
    if ((unint64_t)v11 >= v14) {
      size_t v16 = v14;
    }
    else {
      size_t v16 = (size_t)v11;
    }
  }
  uint64_t v33 = *((unsigned int *)v35 + 2);
  if (v33)
  {
    int v17 = 0;
    if (v16)
    {
      size_t v18 = v16;
      uint64_t v19 = v34;
      do
      {
        int v20 = *v19++;
        int v17 = 33 * v17 + v20;
        --v18;
      }
      while (v18);
    }
    uint64_t v21 = *v35;
    uint64_t v22 = *v35 + 8 * v33 + 8;
    int v23 = 1;
    int v24 = v17;
    while (1)
    {
      uint64_t v25 = v24 & (v33 - 1);
      unint64_t v26 = *(void **)(v21 + 8 * v25);
      if (v26 != (void *)-8)
      {
        if (!v26) {
          goto LABEL_25;
        }
        if (*(_DWORD *)(v22 + 4 * v25) == v17
          && v16 == *v26
          && (!v16 || !memcmp(v34, (char *)v26 + *((unsigned int *)v35 + 5), v16)))
        {
          break;
        }
      }
      int v24 = v23 + v25;
      ++v23;
    }
    if (v25 != -1 && (int)v25 != v33)
    {
      uint64_t v27 = *(void *)(*(void *)(v21 + 8 * (int)v25) + 8);
      if (v27)
      {
        if (!*(unsigned char *)(v27 + 16)) {
          llvm::inferLibFuncAttributes((uint64_t ***)v27, a3);
        }
      }
    }
  }
LABEL_25:
  int v28 = (llvm::Type ***)(**(void **)(a2 + 64) + 1960);
  __int16 v38 = "chari";
  __int16 v39 = 259;
  uint64_t v40 = sub_1CBF56614(a2, a1, v28, (llvm::Type *)1, (uint64_t)&v38, v13);
  __int16 v37 = 261;
  v36[0] = v34;
  v36[1] = v31;
  uint64_t v4 = sub_1CB845BAC((uint64_t *)a2, v30, v32, (uint64_t *)&v40, 1, (uint64_t)v36, 0);
  BOOL v29 = llvm::Value::stripPointerCasts((llvm::Value *)v32);
  if (v29 && !*((unsigned char *)v29 + 16)) {
    *(_WORD *)(v4 + 18) = (*((_WORD *)v29 + 9) >> 2) & 0xFFC | *(_WORD *)(v4 + 18) & 0xF003;
  }
  return v4;
}

uint64_t llvm::emitPutS(llvm *a1, uint64_t a2, uint64_t *a3)
{
  if ((*(unsigned char *)(a3[1] + 44) & 0x10) != 0 || (*(unsigned char *)(*a3 + 89) & 3) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a2 + 48) + 56) + 40);
  char v9 = (unsigned __int8 *)sub_1CC92CEDC(a3, 0x164u);
  unint64_t v11 = v10;
  uint64_t v12 = **(void **)(a2 + 64);
  uint64_t v13 = (uint64_t **)(v12 + 1960);
  unint64_t v14 = llvm::PointerType::get((llvm::PointerType *)(v12 + 1912), 0);
  uint64_t v35 = v9;
  size_t v15 = sub_1CD57B9C0(v8, v9, v11, 0, v13, v14);
  uint64_t v36 = *(uint64_t **)(v8 + 112);
  unint64_t v17 = *((unsigned int *)v36 + 8);
  uint64_t v33 = v18;
  uint64_t v32 = (uint64_t **)v15;
  if ((v17 & 0x80000000) != 0 || (unint64_t)v11 <= v17)
  {
    size_t v19 = (size_t)v11;
  }
  else
  {
    if (v17 <= 1) {
      unint64_t v17 = 1;
    }
    else {
      unint64_t v17 = v17;
    }
    if ((unint64_t)v11 >= v17) {
      size_t v19 = v17;
    }
    else {
      size_t v19 = (size_t)v11;
    }
  }
  uint64_t v34 = *((unsigned int *)v36 + 2);
  if (v34)
  {
    int v20 = 0;
    if (v19)
    {
      size_t v21 = v19;
      uint64_t v22 = v9;
      do
      {
        int v23 = *v22++;
        int v20 = 33 * v20 + v23;
        --v21;
      }
      while (v21);
    }
    uint64_t v24 = *v36;
    uint64_t v25 = *v36 + 8 * v34 + 8;
    int v26 = 1;
    int v27 = v20;
    while (1)
    {
      uint64_t v28 = v27 & (v34 - 1);
      BOOL v29 = *(void **)(v24 + 8 * v28);
      if (v29 != (void *)-8)
      {
        if (!v29) {
          goto LABEL_25;
        }
        if (*(_DWORD *)(v25 + 4 * v28) == v20
          && v19 == *v29
          && (!v19 || !memcmp(v35, (char *)v29 + *((unsigned int *)v36 + 5), v19)))
        {
          break;
        }
      }
      int v27 = v26 + v28;
      ++v26;
    }
    if (v28 != -1 && (int)v28 != v34)
    {
      uint64_t v30 = *(void *)(*(void *)(v24 + 8 * (int)v28) + 8);
      if (v30)
      {
        if (!*(unsigned char *)(v30 + 16)) {
          llvm::inferLibFuncAttributes((uint64_t ***)v30, a3);
        }
      }
    }
  }
LABEL_25:
  __int16 v39 = llvm::castToCStr(a1, (llvm::Value *)a2, v16);
  __int16 v38 = 261;
  v37[0] = v35;
  v37[1] = v11;
  uint64_t v4 = sub_1CB845BAC((uint64_t *)a2, v32, v33, (uint64_t *)&v39, 1, (uint64_t)v37, 0);
  int v31 = llvm::Value::stripPointerCasts((llvm::Value *)v33);
  if (v31 && !*((unsigned char *)v31 + 16)) {
    *(_WORD *)(v4 + 18) = (*((_WORD *)v31 + 9) >> 2) & 0xFFC | *(_WORD *)(v4 + 18) & 0xF003;
  }
  return v4;
}

uint64_t llvm::emitFPutC(llvm::CastInst *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  v39[2] = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(a4[1] + 31) & 0x20) != 0 || (*(unsigned char *)(*a4 + 63) & 0xC) == 0) {
    return 0;
  }
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a3 + 48) + 56) + 40);
  uint64_t v36 = (unsigned __int8 *)sub_1CC92CEDC(a4, 0xFDu);
  __uint64_t n = (size_t)v11;
  uint64_t v32 = (uint64_t **)sub_1CD694730(v10, v36, v11, (uint64_t **)(**(void **)(a3 + 64) + 1960), **(void **)(a3 + 64) + 1960, *a2);
  uint64_t v33 = v12;
  if (*(unsigned char *)(*a2 + 8) == 15)
  {
    uint64_t v35 = *(uint64_t **)(v10 + 112);
    unint64_t v14 = *((unsigned int *)v35 + 8);
    if ((v14 & 0x80000000) != 0)
    {
      size_t v15 = __n;
    }
    else
    {
      size_t v15 = __n;
      if (__n > v14)
      {
        unint64_t v14 = v14 <= 1 ? 1 : v14;
        if (__n >= v14) {
          size_t v15 = v14;
        }
      }
    }
    uint64_t v31 = *((unsigned int *)v35 + 2);
    if (v31)
    {
      int v16 = 0;
      if (v15)
      {
        size_t v17 = v15;
        size_t v18 = v36;
        do
        {
          int v19 = *v18++;
          int v16 = 33 * v16 + v19;
          --v17;
        }
        while (v17);
      }
      unsigned int v20 = v31 - 1;
      uint64_t v21 = *v35;
      uint64_t v22 = *v35 + 8 * v31 + 8;
      int v23 = 1;
      int v24 = v16;
      while (1)
      {
        uint64_t v25 = v24 & v20;
        int v26 = *(void **)(v21 + 8 * v25);
        if (v26 != (void *)-8)
        {
          if (!v26) {
            goto LABEL_32;
          }
          if (*(_DWORD *)(v22 + 4 * v25) == v16 && v15 == *v26)
          {
            if (!v15) {
              break;
            }
            int v27 = memcmp(v36, (char *)v26 + *((unsigned int *)v35 + 5), v15);
            unsigned int v20 = v31 - 1;
            if (!v27) {
              break;
            }
          }
        }
        int v24 = v23 + v25;
        ++v23;
      }
      if (v25 != -1 && (int)v25 != v31)
      {
        uint64_t v28 = *(void *)(*(void *)(v21 + 8 * (int)v25) + 8);
        if (v28)
        {
          if (!*(unsigned char *)(v28 + 16)) {
            llvm::inferLibFuncAttributes((uint64_t ***)v28, a4);
          }
        }
      }
    }
  }
LABEL_32:
  BOOL v29 = (llvm::Type ***)(**(void **)(a3 + 64) + 1960);
  v37[0] = "chari";
  __int16 v38 = 259;
  v39[0] = (uint64_t)sub_1CBF56614(a3, a1, v29, (llvm::Type *)1, (uint64_t)v37, v13);
  v39[1] = (uint64_t)a2;
  __int16 v38 = 261;
  v37[0] = v36;
  v37[1] = __n;
  uint64_t v5 = sub_1CB845BAC((uint64_t *)a3, v32, v33, v39, 2, (uint64_t)v37, 0);
  uint64_t v30 = llvm::Value::stripPointerCasts((llvm::Value *)v33);
  if (v30 && !*((unsigned char *)v30 + 16)) {
    *(_WORD *)(v5 + 18) = (*((_WORD *)v30 + 9) >> 2) & 0xFFC | *(_WORD *)(v5 + 18) & 0xF003;
  }
  return v5;
}

uint64_t llvm::emitFPutS(llvm *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  v40[2] = *MEMORY[0x1E4F143B8];
  if ((*(void *)(a4[1] + 24) & 0x8000000000000000) != 0 || *(unsigned __int8 *)(*a4 + 63) < 0x40u) {
    return 0;
  }
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a3 + 48) + 56) + 40);
  unint64_t v11 = (unsigned __int8 *)sub_1CC92CEDC(a4, 0xFFu);
  uint64_t v13 = v12;
  uint64_t v14 = **(void **)(a3 + 64);
  size_t v15 = (uint64_t **)(v14 + 1960);
  unint64_t v16 = llvm::PointerType::get((llvm::PointerType *)(v14 + 1912), 0);
  __s1 = v11;
  uint64_t v33 = (uint64_t **)sub_1CD661480(v10, v11, v13, 0, v15, v16, *a2);
  uint64_t v34 = v17;
  if (*(unsigned char *)(*a2 + 8) == 15)
  {
    uint64_t v35 = *(uint64_t **)(v10 + 112);
    unint64_t v19 = *((unsigned int *)v35 + 8);
    if ((v19 & 0x80000000) != 0)
    {
      size_t v20 = (size_t)v13;
    }
    else
    {
      size_t v20 = (size_t)v13;
      if ((unint64_t)v13 > v19)
      {
        unint64_t v19 = v19 <= 1 ? 1 : v19;
        if ((unint64_t)v13 >= v19) {
          size_t v20 = v19;
        }
      }
    }
    uint64_t v32 = *((unsigned int *)v35 + 2);
    if (v32)
    {
      int v21 = 0;
      if (v20)
      {
        size_t v22 = v20;
        int v23 = v11;
        do
        {
          int v24 = *v23++;
          int v21 = 33 * v21 + v24;
          --v22;
        }
        while (v22);
      }
      uint64_t v25 = *v35;
      uint64_t v36 = *v35 + 8 * v32 + 8;
      int v26 = 1;
      int v27 = v21;
      while (1)
      {
        uint64_t v28 = v27 & (v32 - 1);
        BOOL v29 = *(void **)(v25 + 8 * v28);
        if (v29 != (void *)-8)
        {
          if (!v29) {
            goto LABEL_32;
          }
          if (*(_DWORD *)(v36 + 4 * v28) == v21
            && v20 == *v29
            && (!v20 || !memcmp(__s1, (char *)v29 + *((unsigned int *)v35 + 5), v20)))
          {
            break;
          }
        }
        int v27 = v26 + v28;
        ++v26;
      }
      if (v28 != -1 && (int)v28 != v32)
      {
        uint64_t v30 = *(void *)(*(void *)(v25 + 8 * (int)v28) + 8);
        if (v30)
        {
          if (!*(unsigned char *)(v30 + 16)) {
            llvm::inferLibFuncAttributes((uint64_t ***)v30, a4);
          }
        }
      }
    }
  }
LABEL_32:
  v40[0] = (uint64_t)llvm::castToCStr(a1, (llvm::Value *)a3, v18);
  v40[1] = (uint64_t)a2;
  __int16 v39 = 261;
  v38[0] = __s1;
  v38[1] = v13;
  uint64_t v5 = sub_1CB845BAC((uint64_t *)a3, v33, v34, v40, 2, (uint64_t)v38, 0);
  uint64_t v31 = llvm::Value::stripPointerCasts((llvm::Value *)v34);
  if (v31 && !*((unsigned char *)v31 + 16)) {
    *(_WORD *)(v5 + 18) = (*((_WORD *)v31 + 9) >> 2) & 0xFFC | *(_WORD *)(v5 + 18) & 0xF003;
  }
  return v5;
}

uint64_t llvm::emitFWrite(llvm *a1, uint64_t a2, uint64_t *a3, llvm::Value *a4, uint64_t a5, uint64_t *a6)
{
  v62[4] = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(a6[1] + 34) & 0x20) != 0 || (*(unsigned char *)(*a6 + 69) & 0xC) == 0) {
    return 0;
  }
  uint64_t v13 = *((void *)a4 + 6);
  uint64_t v14 = *(void *)(*(void *)(v13 + 56) + 40);
  size_t v15 = **(llvm::IntegerType ***)v13;
  unint64_t v16 = (unsigned __int8 *)sub_1CC92CEDC(a6, 0x115u);
  size_t v18 = v17;
  unint64_t v19 = (uint64_t **)llvm::IntegerType::get(v15, (llvm::LLVMContext *)*(unsigned int *)(*(void *)(a5 + 232) + 4));
  signed int v51 = a4;
  uint64_t v20 = *((void *)a4 + 8);
  uint64_t v21 = v14;
  unint64_t v57 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v20 + 1912), 0);
  uint64_t v22 = llvm::IntegerType::get(v15, (llvm::LLVMContext *)*(unsigned int *)(*(void *)(a5 + 232) + 4));
  int v52 = v15;
  uint64_t v23 = llvm::IntegerType::get(v15, (llvm::LLVMContext *)*(unsigned int *)(*(void *)(a5 + 232) + 4));
  uint64_t v55 = v16;
  uint64_t v53 = (uint64_t **)sub_1CD878560(v21, v16, v18, v19, v57, v22, v23, *a3);
  BOOL v54 = v24;
  if (*(unsigned char *)(*a3 + 8) == 15)
  {
    size_t v26 = (size_t)v18;
    uint64_t v56 = *(uint64_t **)(v21 + 112);
    unint64_t v27 = *((unsigned int *)v56 + 8);
    if ((v27 & 0x80000000) == 0 && (unint64_t)v18 > v27)
    {
      unint64_t v27 = v27 <= 1 ? 1 : v27;
      if ((unint64_t)v18 >= v27) {
        size_t v26 = v27;
      }
    }
    uint64_t v49 = *((unsigned int *)v56 + 2);
    if (v49)
    {
      int v28 = 0;
      if (v26)
      {
        size_t v29 = v26;
        uint64_t v30 = v16;
        do
        {
          int v31 = *v30++;
          int v28 = 33 * v28 + v31;
          --v29;
        }
        while (v29);
      }
      uint64_t v32 = (v49 - 1);
      uint64_t v33 = *v56;
      uint64_t v58 = *v56 + 8 * v49 + 8;
      int v34 = 1;
      int v35 = v28;
      while (1)
      {
        uint64_t v36 = v35 & v32;
        __int16 v37 = *(void **)(v33 + 8 * v36);
        if (v37 != (void *)-8)
        {
          if (!v37) {
            goto LABEL_25;
          }
          if (*(_DWORD *)(v58 + 4 * v36) == v28 && v26 == *v37)
          {
            if (!v26) {
              break;
            }
            __int16 v38 = a3;
            uint64_t v39 = v32;
            int v40 = memcmp(v55, (char *)v37 + *((unsigned int *)v56 + 5), v26);
            uint64_t v32 = v39;
            a3 = v38;
            if (!v40) {
              break;
            }
          }
        }
        int v35 = v34 + v36;
        ++v34;
      }
      if (v36 != -1 && (int)v36 != v49)
      {
        uint64_t v41 = *(void *)(*(void *)(v33 + 8 * (int)v36) + 8);
        if (v41)
        {
          if (!*(unsigned char *)(v41 + 16)) {
            llvm::inferLibFuncAttributes((uint64_t ***)v41, a6);
          }
        }
      }
    }
  }
LABEL_25:
  v62[0] = (uint64_t)llvm::castToCStr(a1, v51, v25);
  v62[1] = a2;
  uint64_t v42 = llvm::IntegerType::get(v52, (llvm::LLVMContext *)*(unsigned int *)(*(void *)(a5 + 232) + 4));
  uint64_t v44 = *(llvm::ConstantInt **)v42;
  unsigned int v45 = *(_DWORD *)(v42 + 8);
  unsigned int v60 = v45 >> 8;
  if (v45 >> 8 > 0x40) {
    operator new[]();
  }
  if (v45 <= 0xFF) {
    LOBYTE(v46) = 0;
  }
  else {
    unint64_t v46 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v45) + 63);
  }
  unint64_t v59 = v46 & 1;
  __int16 v47 = llvm::ConstantInt::get(v44, (llvm::LLVMContext *)&v59, v43);
  if (v60 >= 0x41 && v59) {
    MEMORY[0x1D25D9CB0](v59, 0x1000C8000313F17);
  }
  v62[2] = (uint64_t)v47;
  v62[3] = (uint64_t)a3;
  __int16 v61 = 257;
  uint64_t v7 = sub_1CB845BAC((uint64_t *)v51, v53, v54, v62, 4, (uint64_t)&v59, 0);
  uint64_t v48 = llvm::Value::stripPointerCasts((llvm::Value *)v54);
  if (v48 && !*((unsigned char *)v48 + 16)) {
    *(_WORD *)(v7 + 18) = (*((_WORD *)v48 + 9) >> 2) & 0xFFC | *(_WORD *)(v7 + 18) & 0xF003;
  }
  return v7;
}

uint64_t llvm::emitMalloc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v40 = a1;
  if ((*(unsigned char *)(a4[1] + 39) & 0x20) != 0 || (*(unsigned char *)(*a4 + 79) & 0xC) == 0) {
    return 0;
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a2 + 48) + 56) + 40);
  uint64_t v10 = (unsigned __int8 *)sub_1CC92CEDC(a4, 0x13Du);
  uint64_t v12 = v11;
  uint64_t v13 = ***(llvm::IntegerType ****)(a2 + 48);
  uint64_t v14 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(**(void **)(a2 + 64) + 1912), 0);
  uint64_t v15 = llvm::IntegerType::get(v13, (llvm::LLVMContext *)*(unsigned int *)(*(void *)(a3 + 232) + 4));
  __s1 = v10;
  unint64_t v16 = sub_1CD57B9C0(v9, v10, v12, 0, v14, v15);
  size_t v17 = *(uint64_t **)(v9 + 112);
  unint64_t v18 = *((unsigned int *)v17 + 8);
  int v34 = v19;
  int v35 = v12;
  uint64_t v33 = (uint64_t **)v16;
  if ((v18 & 0x80000000) != 0 || (unint64_t)v12 <= v18)
  {
    size_t v20 = (size_t)v12;
  }
  else
  {
    if (v18 <= 1) {
      unint64_t v18 = 1;
    }
    else {
      unint64_t v18 = v18;
    }
    if ((unint64_t)v12 >= v18) {
      size_t v20 = v18;
    }
    else {
      size_t v20 = (size_t)v12;
    }
  }
  uint64_t v36 = *((unsigned int *)v17 + 2);
  if (v36)
  {
    int v21 = 0;
    if (v20)
    {
      size_t v22 = v20;
      uint64_t v23 = v10;
      do
      {
        int v24 = *v23++;
        int v21 = 33 * v21 + v24;
        --v22;
      }
      while (v22);
    }
    uint64_t v25 = *v17;
    uint64_t v26 = *v17 + 8 * v36 + 8;
    int v27 = 1;
    int v28 = v21;
    while (1)
    {
      uint64_t v29 = v28 & (v36 - 1);
      uint64_t v30 = *(void **)(v25 + 8 * v29);
      if (v30 != (void *)-8)
      {
        if (!v30) {
          goto LABEL_25;
        }
        if (*(_DWORD *)(v26 + 4 * v29) == v21
          && v20 == *v30
          && (!v20 || !memcmp(__s1, (char *)v30 + *((unsigned int *)v17 + 5), v20)))
        {
          break;
        }
      }
      int v28 = v27 + v29;
      ++v27;
    }
    if (v29 != -1 && (int)v29 != v36)
    {
      uint64_t v31 = *(void *)(*(void *)(v25 + 8 * (int)v29) + 8);
      if (v31)
      {
        if (!*(unsigned char *)(v31 + 16)) {
          llvm::inferLibFuncAttributes((uint64_t ***)v31, a4);
        }
      }
    }
  }
LABEL_25:
  __int16 v39 = 261;
  v38[0] = __s1;
  v38[1] = v35;
  uint64_t v5 = sub_1CB845BAC((uint64_t *)a2, v33, v34, &v40, 1, (uint64_t)v38, 0);
  uint64_t v32 = llvm::Value::stripPointerCasts((llvm::Value *)v34);
  if (v32 && !*((unsigned char *)v32 + 16)) {
    *(_WORD *)(v5 + 18) = (*((_WORD *)v32 + 9) >> 2) & 0xFFC | *(_WORD *)(v5 + 18) & 0xF003;
  }
  return v5;
}

uint64_t llvm::emitCalloc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v39[2] = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(a4[1] + 21) & 0x40) != 0 || (*(unsigned char *)(*a4 + 43) & 0x30) == 0) {
    return 0;
  }
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a3 + 48) + 56) + 40);
  unint64_t v11 = (unsigned __int8 *)sub_1CC92CEDC(a4, 0xAEu);
  uint64_t v13 = v12;
  uint64_t v14 = llvm::IntegerType::get(***(llvm::IntegerType ****)(a3 + 48), (llvm::LLVMContext *)*(unsigned int *)(*(void *)(v10 + 504) + 4));
  uint64_t v15 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(**(void **)(a3 + 64) + 1912), 0);
  int v35 = v11;
  unint64_t v16 = sub_1CD661480(v10, v11, v13, 0, v15, v14, v14);
  uint64_t v36 = *(uint64_t **)(v10 + 112);
  unint64_t v17 = *((unsigned int *)v36 + 8);
  uint64_t v32 = v18;
  uint64_t v33 = v13;
  uint64_t v31 = (uint64_t **)v16;
  if ((v17 & 0x80000000) == 0 && (unint64_t)v13 > v17)
  {
    unint64_t v17 = v17 <= 1 ? 1 : v17;
    if ((unint64_t)v13 >= v17) {
      uint64_t v13 = (const char *)v17;
    }
  }
  uint64_t v34 = *((unsigned int *)v36 + 2);
  if (v34)
  {
    int v19 = 0;
    if (v13)
    {
      size_t v20 = v13;
      int v21 = v11;
      do
      {
        int v22 = *v21++;
        int v19 = 33 * v19 + v22;
        --v20;
      }
      while (v20);
    }
    uint64_t v23 = *v36;
    uint64_t v24 = *v36 + 8 * v34 + 8;
    int v25 = 1;
    int v26 = v19;
    while (1)
    {
      uint64_t v27 = v26 & (v34 - 1);
      int v28 = *(const char ***)(v23 + 8 * v27);
      if (v28 != (const char **)-8)
      {
        if (!v28) {
          goto LABEL_24;
        }
        if (*(_DWORD *)(v24 + 4 * v27) == v19
          && v13 == *v28
          && (!v13 || !memcmp(v35, (char *)v28 + *((unsigned int *)v36 + 5), (size_t)v13)))
        {
          break;
        }
      }
      int v26 = v25 + v27;
      ++v25;
    }
    if (v27 != -1 && (int)v27 != v34)
    {
      uint64_t v29 = *(void *)(*(void *)(v23 + 8 * (int)v27) + 8);
      if (v29)
      {
        if (!*(unsigned char *)(v29 + 16)) {
          llvm::inferLibFuncAttributes((uint64_t ***)v29, a4);
        }
      }
    }
  }
LABEL_24:
  v39[0] = a1;
  v39[1] = a2;
  __int16 v38 = 261;
  v37[0] = v35;
  v37[1] = v33;
  uint64_t v5 = sub_1CB845BAC((uint64_t *)a3, v31, v32, v39, 2, (uint64_t)v37, 0);
  uint64_t v30 = llvm::Value::stripPointerCasts((llvm::Value *)v32);
  if (v30 && !*((unsigned char *)v30 + 16)) {
    *(_WORD *)(v5 + 18) = (*((_WORD *)v30 + 9) >> 2) & 0xFFC | *(_WORD *)(v5 + 18) & 0xF003;
  }
  return v5;
}

uint64_t llvm::bypassSlowDivision(uint64_t a1, uint64_t *a2)
{
  v165[1] = *MEMORY[0x1E4F143B8];
  int v2 = *(void **)(a1 + 48);
  if (!v2)
  {
    uint64_t v4 = 0;
    LODWORD(v5) = 0;
    goto LABEL_209;
  }
  unsigned int v3 = a2;
  int v127 = 0;
  int v123 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  do
  {
    size_t v6 = (void *)v2[1];
    BOOL v8 = v6 == (void *)(v2[2] + 40) || v6 == 0;
    if (!*(v2 - 2)) {
      goto LABEL_119;
    }
    unsigned int v9 = *((unsigned __int8 *)v2 - 8);
    BOOL v10 = v9 > 0x33;
    uint64_t v11 = (1 << v9) & 0xD800000000000;
    if (v10 || v11 == 0) {
      goto LABEL_119;
    }
    uint64_t v13 = v2 - 3;
    uint64_t v129 = v2 - 3;
    uint64_t v14 = *(v2 - 3);
    if (!v14 || *(_DWORD *)(v14 + 8) != 13) {
      goto LABEL_119;
    }
    uint64_t v15 = *v3;
    uint64_t v16 = *((unsigned int *)v3 + 4);
    if (v16)
    {
      int v17 = *(_DWORD *)(v14 + 8) >> 8;
      LODWORD(v18) = (v16 - 1) & (37 * v17);
      int v19 = (int *)(v15 + 8 * v18);
      int v20 = *v19;
      if (v17 == *v19) {
        goto LABEL_18;
      }
      uint64_t v94 = v4;
      uint64_t v95 = v5;
      int v96 = 1;
      while (1)
      {
        unsigned int v3 = a2;
        uint64_t v5 = v95;
        uint64_t v4 = v94;
        if (v20 == -1) {
          break;
        }
        int v97 = v18 + v96++;
        uint64_t v18 = v97 & (v16 - 1);
        int v20 = *(_DWORD *)(v15 + 8 * v18);
        if (v17 == v20)
        {
          int v19 = (int *)(v15 + 8 * v18);
          unsigned int v3 = a2;
          uint64_t v5 = v95;
          uint64_t v4 = v94;
          goto LABEL_18;
        }
      }
    }
    int v19 = (int *)(v15 + 8 * v16);
LABEL_18:
    if ((int *)(v15 + 8 * v16) == v19) {
      goto LABEL_119;
    }
    uint64_t v21 = llvm::IntegerType::get(*(llvm::IntegerType **)v14, (llvm::LLVMContext *)v19[1]);
    int v22 = (uint64_t **)v2[2];
    uint64_t v130 = v21;
    uint64_t v131 = v22;
    v128[0] = 1;
    int v23 = *((_DWORD *)v2 - 1);
    if ((v23 & 0x40000000) != 0) {
      uint64_t v24 = (uint64_t *)*(v2 - 4);
    }
    else {
      uint64_t v24 = &v13[-4 * (v23 & 0x7FFFFFF)];
    }
    uint64_t v25 = *v24;
    uint64_t v26 = v24[4];
    BOOL v28 = *((unsigned char *)v2 - 8) == 48 || *((unsigned char *)v2 - 8) == 51;
    LOBYTE(v132) = v28;
    *((void *)&v132 + 1) = v25;
    uint64_t v133 = v26;
    *(void *)int v151 = 0;
    int v29 = sub_1CD137490(v4, v5, (unsigned __int8 *)&v132, v151);
    uint64_t v30 = *(unsigned char **)v151;
    if (!v29) {
      uint64_t v30 = (unsigned char *)(v4 + 40 * v5);
    }
    if (v30 == (unsigned char *)(v4 + 40 * v5))
    {
      uint64_t v125 = v4;
      uint64_t v32 = v5;
      if ((v23 & 0x40000000) != 0) {
        uint64_t v33 = (uint64_t *)*(v2 - 4);
      }
      else {
        uint64_t v33 = &v13[-4 * (v23 & 0x7FFFFFF)];
      }
      uint64_t v34 = *v33;
      uint64_t v35 = v33[4];
      BOOL v140 = v144;
      uint64_t v141 = v144;
      uint64_t v142 = 4;
      int v143 = 0;
      uint64_t v36 = (unsigned __int8 *)v34;
      int v37 = sub_1CD137550((uint64_t)v128, v34, (uint64_t)&v140);
      if (v37 == 2)
      {
        __int16 v38 = 0;
        int v39 = 0;
        uint64_t v31 = v2 - 3;
        uint64_t v5 = v32;
        uint64_t v4 = v125;
        goto LABEL_101;
      }
      int v40 = v37;
      uint64_t v135 = v139;
      int v136 = v139;
      uint64_t v137 = 4;
      int v138 = 0;
      unsigned int v121 = (llvm::BasicBlock *)v35;
      int v41 = sub_1CD137550((uint64_t)v128, v35, (uint64_t)&v135);
      if (v41 == 2) {
        goto LABEL_38;
      }
      if (v41 | v40)
      {
        int v42 = *(unsigned __int8 *)(v35 + 16);
        if (v42 != 16)
        {
          uint64_t v5 = v32;
          if (v42 != 77 || *(void *)(v35 + 40) != v2[2] || *(unsigned char *)(*(void *)(v35 - 32) + 16) != 16)
          {
            sub_1CBF537B4((uint64_t)v149, v22, (uint64_t)(v22 + 5), 0, 0, 0);
            uint64_t v43 = (unsigned __int8 *)v2[3];
            uint64_t v134 = v43;
            if (v43)
            {
              llvm::MetadataTracking::track((uint64_t)&v134, v43, 2);
              uint64_t v44 = (uint64_t)v134;
            }
            else
            {
              uint64_t v44 = 0;
            }
            sub_1CB8461A4((uint64_t)v149, 0, v44);
            if (v134)
            {
              int v54 = *v134;
              if ((v54 - 4) > 0x1E)
              {
                if ((v54 - 3) >= 0xFFFFFFFE) {
                  int v73 = v134;
                }
                else {
                  int v73 = 0;
                }
                if ((v54 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v74 = (unint64_t)(v73 + 8);
                  goto LABEL_126;
                }
                if (v54 == 3) {
                  *((void *)v134 + 1) = 0;
                }
              }
              else if ((v134[1] & 0x7F) == 2 || *((_DWORD *)v134 + 3))
              {
                uint64_t v93 = *((void *)v134 + 2);
                if ((v93 & 4) != 0)
                {
                  unint64_t v74 = v93 & 0xFFFFFFFFFFFFFFF8;
                  if (v74)
                  {
LABEL_126:
                    *(void *)int v151 = &v134;
                    sub_1CC5FA668(v74 + 16, v151);
                  }
                }
              }
            }
            if (!v40)
            {
              int v55 = *((unsigned __int8 *)v2 - 8);
              if (v55 != 48 && v55 != 51)
              {
                WORD4(v152) = 257;
                llvm::BasicBlock::splitBasicBlock((uint64_t)v22, (uint64_t)v2, (uint64_t)v151, 0);
              }
            }
            WORD4(v152) = 257;
            llvm::BasicBlock::splitBasicBlock((uint64_t)v22, (uint64_t)v2, (uint64_t)v151, 0);
          }
          __int16 v38 = 0;
          int v39 = 0;
          uint64_t v31 = v2 - 3;
          goto LABEL_39;
        }
LABEL_38:
        __int16 v38 = 0;
        int v39 = 0;
        uint64_t v31 = v2 - 3;
        uint64_t v5 = v32;
LABEL_39:
        uint64_t v4 = v125;
LABEL_99:
        if (v136 != v135) {
          free(v136);
        }
LABEL_101:
        if (v141 != v140) {
          free(v141);
        }
        if (!v39)
        {
          unsigned int v3 = a2;
          goto LABEL_119;
        }
        *(_OWORD *)int v151 = v132;
        *(void *)&v151[16] = v133;
        *(void *)&long long v152 = v38;
        *((void *)&v152 + 1) = v120;
        uint64_t v135 = 0;
        char v67 = sub_1CD137490(v4, v5, v151, &v135);
        uint64_t v30 = v135;
        if (v67) {
          goto LABEL_113;
        }
        BOOL v140 = v135;
        if (4 * v127 + 4 >= (3 * v5))
        {
          int v68 = 2 * v5;
        }
        else
        {
          int v68 = v5;
          if (~v127 - v123 + (int)v5 > v5 >> 3)
          {
            uint64_t v69 = v4;
            uint64_t v70 = v5;
LABEL_108:
            if (*v30 || *((void *)v30 + 1) || *((void *)v30 + 2)) {
              --v123;
            }
            ++v127;
            unsigned char *v30 = v151[0];
            *(_OWORD *)(v30 + 8) = *(_OWORD *)&v151[8];
            *(_OWORD *)(v30 + 24) = v152;
            uint64_t v4 = v69;
            uint64_t v5 = v70;
LABEL_113:
            unsigned int v3 = a2;
            goto LABEL_114;
          }
        }
        unint64_t v82 = (v68 - 1) | ((unint64_t)(v68 - 1) >> 1);
        unint64_t v83 = v82 | (v82 >> 2) | ((v82 | (v82 >> 2)) >> 4);
        int v84 = ((v83 | (v83 >> 8)) >> 16) | v83 | (v83 >> 8);
        if ((v84 + 1) > 0x40) {
          uint64_t v70 = (v84 + 1);
        }
        else {
          uint64_t v70 = 64;
        }
        __int16 v85 = (char *)operator new(40 * v70, (std::align_val_t)8uLL);
        uint64_t v69 = (uint64_t)v85;
        uint64_t v86 = &v85[40 * v70];
        if (v4)
        {
          int v87 = v85;
          do
          {
            *int v87 = 0;
            *((void *)v87 + 1) = 0;
            *((void *)v87 + 2) = 0;
            v87 += 40;
          }
          while (v87 != v86);
          if (v5)
          {
            int v127 = 0;
            uint64_t v88 = 40 * v5;
            uint64_t v89 = v4;
            do
            {
              unsigned __int8 v90 = *(unsigned char *)v89;
              if (*(void *)(v89 + 8) || *(void *)(v89 + 16))
              {
                v149[0] = 0;
                unsigned __int8 v126 = v90;
                sub_1CD137490(v69, v70, (unsigned __int8 *)v89, v149);
                uint64_t v91 = (char *)v149[0];
                *(unsigned char *)v149[0] = v126;
                *((void *)v91 + 1) = *(void *)(v89 + 8);
                *((void *)v91 + 2) = *(void *)(v89 + 16);
                *(_OWORD *)(v91 + 24) = *(_OWORD *)(v89 + 24);
                ++v127;
              }
              v89 += 40;
              v88 -= 40;
            }
            while (v88);
          }
          else
          {
            int v127 = 0;
          }
          MEMORY[0x1D25D9CD0](v4, 8);
        }
        else
        {
          uint64_t v92 = v85;
          do
          {
            *uint64_t v92 = 0;
            *((void *)v92 + 1) = 0;
            *((void *)v92 + 2) = 0;
            v92 += 40;
          }
          while (v92 != v86);
          int v127 = 0;
        }
        sub_1CD137490(v69, v70, v151, &v140);
        int v123 = 0;
        uint64_t v30 = v140;
        goto LABEL_108;
      }
      uint64_t v45 = 0;
      uint64_t v46 = *(void *)*(v2 - 3);
      *(void *)int v151 = &v151[16];
      *(void *)&v151[8] = 0x200000000;
      uint64_t v155 = v46;
      signed int v156 = &v164;
      int v157 = v165;
      uint64_t v158 = 0;
      int v159 = 0;
      __int16 v160 = 512;
      char v161 = 7;
      uint64_t v153 = 0;
      int v154 = 0;
      uint64_t v162 = 0;
      uint64_t v163 = 0;
      signed int v164 = &unk_1F2616E88;
      v165[0] = &unk_1F2617008;
      uint64_t v153 = v2[2];
      int v154 = v2;
      __int16 v47 = (unsigned __int8 *)v2[3];
      uint64_t v145 = v47;
      uint64_t v48 = v36;
      if (v47)
      {
        llvm::MetadataTracking::track((uint64_t)&v145, v47, 2);
        uint64_t v45 = (uint64_t)v145;
      }
      sub_1CB8461A4((uint64_t)v151, 0, v45);
      uint64_t v5 = v32;
      uint64_t v4 = v125;
      if (!v145)
      {
LABEL_51:
        uint64_t v49 = v130;
        __int16 v146 = 257;
        if (*(void *)v48 != v130)
        {
          if (v48[16] <= 0x14u)
          {
            uint64_t v52 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v156 + 28))(v156, 38, v48, v130);
            uint64_t v48 = (unsigned __int8 *)v52;
            if (v52)
            {
              uint64_t v53 = (uint64_t)v121;
              if (*(unsigned __int8 *)(v52 + 16) >= 0x1Cu)
              {
                uint64_t v99 = v5;
                (*(void (**)(void *, uint64_t, unsigned __int8 **, uint64_t, void *))(*v157 + 16))(v157, v52, &v145, v153, v154);
                if (*(_DWORD *)&v151[8])
                {
                  uint64_t v106 = *(void *)v151;
                  uint64_t v107 = *(void *)v151 + 16 * *(unsigned int *)&v151[8];
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v48, *(_DWORD *)v106, *(llvm::MDNode **)(v106 + 8));
                    v106 += 16;
                  }
                  while (v106 != v107);
                }
                uint64_t v53 = (uint64_t)v121;
                uint64_t v5 = v99;
                uint64_t v4 = v125;
              }
              goto LABEL_70;
            }
          }
          else
          {
            __int16 v150 = 257;
            uint64_t v48 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v48, v130, (const char **)v149, 0);
            (*(void (**)(void *, unsigned __int8 *, unsigned __int8 **, uint64_t, void *))(*v157 + 16))(v157, v48, &v145, v153, v154);
            if (*(_DWORD *)&v151[8])
            {
              uint64_t v50 = *(void *)v151;
              uint64_t v51 = *(void *)v151 + 16 * *(unsigned int *)&v151[8];
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v48, *(_DWORD *)v50, *(llvm::MDNode **)(v50 + 8));
                v50 += 16;
              }
              while (v50 != v51);
            }
          }
        }
        uint64_t v53 = (uint64_t)v121;
LABEL_70:
        __int16 v146 = 257;
        if (*(void *)v53 != v49)
        {
          if (*(unsigned __int8 *)(v53 + 16) <= 0x14u)
          {
            uint64_t v53 = (*((uint64_t (**)(void **, uint64_t, uint64_t, uint64_t))*v156 + 28))(v156, 38, v53, v49);
            if (v53) {
              BOOL v57 = *(unsigned __int8 *)(v53 + 16) >= 0x1Cu;
            }
            else {
              BOOL v57 = 0;
            }
            if (v57)
            {
              int v98 = (llvm::Instruction *)v53;
              (*(void (**)(void *, uint64_t, unsigned __int8 **, uint64_t, void *))(*v157 + 16))(v157, v53, &v145, v153, v154);
              if (*(_DWORD *)&v151[8])
              {
                uint64_t v100 = *(void *)v151;
                uint64_t v101 = *(void *)v151 + 16 * *(unsigned int *)&v151[8];
                do
                {
                  llvm::Instruction::setMetadata(v98, *(_DWORD *)v100, *(llvm::MDNode **)(v100 + 8));
                  v100 += 16;
                }
                while (v100 != v101);
              }
              uint64_t v53 = (uint64_t)v98;
              uint64_t v4 = v125;
            }
          }
          else
          {
            __int16 v150 = 257;
            uint64_t v56 = llvm::CastInst::Create(38, v53, v49, (const char **)v149, 0);
            (*(void (**)(void *))(*v157 + 16))(v157);
            if (*(_DWORD *)&v151[8])
            {
              uint64_t v78 = *(void *)v151;
              uint64_t v79 = *(void *)v151 + 16 * *(unsigned int *)&v151[8];
              do
              {
                llvm::Instruction::setMetadata(v56, *(_DWORD *)v78, *(llvm::MDNode **)(v78 + 8));
                v78 += 16;
              }
              while (v78 != v79);
            }
            uint64_t v53 = (uint64_t)v56;
          }
        }
        __int16 v150 = 257;
        uint64_t v58 = v53;
        __int16 v38 = (unsigned __int8 *)sub_1CC57DA50((uint64_t)v151, (uint64_t)v48, v53, (uint64_t)v149, 0);
        __int16 v150 = 257;
        unint64_t v59 = sub_1CC57DDE0((uint64_t)v151, (uint64_t)v48, v58, (uint64_t)v149);
        uint64_t v31 = v129;
        uint64_t v60 = *v129;
        __int16 v146 = 257;
        if (*(void *)v38 != v60)
        {
          if (v38[16] <= 0x14u)
          {
            __int16 v38 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v156 + 28))(v156, 39, v38, v60);
            if (v38) {
              BOOL v61 = v38[16] >= 0x1Cu;
            }
            else {
              BOOL v61 = 0;
            }
            if (v61)
            {
              (*(void (**)(void *, unsigned __int8 *, unsigned __int8 **, uint64_t, void *))(*v157 + 16))(v157, v38, &v145, v153, v154);
              if (*(_DWORD *)&v151[8])
              {
                uint64_t v102 = *(void *)v151;
                uint64_t v103 = *(void *)v151 + 16 * *(unsigned int *)&v151[8];
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v38, *(_DWORD *)v102, *(llvm::MDNode **)(v102 + 8));
                  v102 += 16;
                }
                while (v102 != v103);
              }
              uint64_t v4 = v125;
            }
          }
          else
          {
            __int16 v150 = 257;
            __int16 v38 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v38, v60, (const char **)v149, 0);
            (*(void (**)(void *, unsigned __int8 *, unsigned __int8 **, uint64_t, void *))(*v157 + 16))(v157, v38, &v145, v153, v154);
            if (*(_DWORD *)&v151[8])
            {
              uint64_t v80 = *(void *)v151;
              uint64_t v122 = (llvm::BasicBlock *)(*(void *)v151 + 16 * *(unsigned int *)&v151[8]);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v38, *(_DWORD *)v80, *(llvm::MDNode **)(v80 + 8));
                v80 += 16;
              }
              while ((llvm::BasicBlock *)v80 != v122);
            }
          }
        }
        uint64_t v62 = *v31;
        __int16 v146 = 257;
        if (*(void *)v59 == v62)
        {
          int v120 = v59;
        }
        else if (*((unsigned __int8 *)v59 + 16) <= 0x14u)
        {
          uint64_t v65 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v156 + 28))(v156, 39, v59, v62);
          int v120 = (llvm::BasicBlock *)v65;
          if (v65) {
            BOOL v66 = *(unsigned __int8 *)(v65 + 16) >= 0x1Cu;
          }
          else {
            BOOL v66 = 0;
          }
          if (v66)
          {
            (*(void (**)(void *, uint64_t, unsigned __int8 **, uint64_t, void *))(*v157 + 16))(v157, v65, &v145, v153, v154);
            if (*(_DWORD *)&v151[8])
            {
              uint64_t v104 = *(void *)v151;
              uint64_t v105 = *(void *)v151 + 16 * *(unsigned int *)&v151[8];
              do
              {
                llvm::Instruction::setMetadata(v120, *(_DWORD *)v104, *(llvm::MDNode **)(v104 + 8));
                v104 += 16;
              }
              while (v104 != v105);
            }
            uint64_t v4 = v125;
          }
        }
        else
        {
          __int16 v150 = 257;
          int v120 = llvm::CastInst::Create(39, (uint64_t)v59, v62, (const char **)v149, 0);
          (*(void (**)(void *))(*v157 + 16))(v157);
          if (*(_DWORD *)&v151[8])
          {
            uint64_t v63 = *(void *)v151;
            uint64_t v64 = *(void *)v151 + 16 * *(unsigned int *)&v151[8];
            do
            {
              llvm::Instruction::setMetadata(v120, *(_DWORD *)v63, *(llvm::MDNode **)(v63 + 8));
              v63 += 16;
            }
            while (v63 != v64);
          }
        }
        if (*(unsigned char **)v151 != &v151[16]) {
          free(*(void **)v151);
        }
        int v39 = 1;
        goto LABEL_99;
      }
      int v75 = *v145;
      if ((v75 - 4) > 0x1E)
      {
        if ((v75 - 3) >= 0xFFFFFFFE) {
          int v81 = v145;
        }
        else {
          int v81 = 0;
        }
        if ((v75 - 3) < 0xFFFFFFFE)
        {
          if (v75 == 3) {
            *((void *)v145 + 1) = 0;
          }
          goto LABEL_51;
        }
        unint64_t v77 = (unint64_t)(v81 + 8);
      }
      else
      {
        if ((v145[1] & 0x7F) != 2 && !*((_DWORD *)v145 + 3)) {
          goto LABEL_51;
        }
        uint64_t v76 = *((void *)v145 + 2);
        if ((v76 & 4) == 0) {
          goto LABEL_51;
        }
        unint64_t v77 = v76 & 0xFFFFFFFFFFFFFFF8;
        if (!v77) {
          goto LABEL_51;
        }
      }
      v149[0] = &v145;
      sub_1CC5FA668(v77 + 16, v149);
      goto LABEL_51;
    }
    uint64_t v31 = v2 - 3;
LABEL_114:
    uint64_t v71 = 32;
    if (*((unsigned __int8 *)v31 + 16) - 47 < 2) {
      uint64_t v71 = 24;
    }
    int v72 = *(llvm::Value **)&v30[v71];
    if (v72)
    {
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)(v2 - 3), v72, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
LABEL_119:
    int v2 = v6;
  }
  while (!v8);
  if (!v127)
  {
LABEL_209:
    unsigned int v110 = v5;
    uint64_t v111 = v4 + 40 * v5;
    uint64_t v108 = v111;
    goto LABEL_210;
  }
  uint64_t v108 = v4 + 40 * v5;
  if (!v5)
  {
    unsigned int v110 = 0;
    uint64_t v111 = v4;
    goto LABEL_210;
  }
  uint64_t v109 = 0;
  unsigned int v110 = v5;
  uint64_t v111 = v4;
  while (2)
  {
    uint64_t v112 = *(void *)(v4 + v109 + 8);
    if (*(unsigned char *)(v4 + v109))
    {
      if (v112) {
        goto LABEL_210;
      }
LABEL_205:
      if (*(void *)(v4 + v109 + 16)) {
        goto LABEL_210;
      }
      v111 += 40;
      v109 += 40;
      if (40 * v5 == v109)
      {
        uint64_t v111 = v4 + 40 * v5;
        goto LABEL_210;
      }
      continue;
    }
    break;
  }
  if (!v112) {
    goto LABEL_205;
  }
  uint64_t v111 = v4 + v109;
LABEL_210:
  uint64_t v113 = v4 + 40 * v110;
  while (v111 != v113)
  {
    char v114 = 0;
    uint64_t v115 = 0;
    *(_OWORD *)int v151 = *(_OWORD *)(v111 + 24);
    do
    {
      char v116 = v114;
      uint64_t v117 = *(void *)&v151[8 * v115];
      uint64_t v148 = 0;
      llvm::RecursivelyDeleteTriviallyDeadInstructions(v117, 0, 0, (uint64_t)v147);
      if (v148 == v147)
      {
        (*(void (**)(void *))(v147[0] + 32))(v147);
      }
      else if (v148)
      {
        (*(void (**)(void))(*v148 + 40))();
      }
      char v114 = 1;
      uint64_t v115 = 1;
    }
    while ((v116 & 1) == 0);
    uint64_t v118 = v111 + 40;
    uint64_t v111 = v108;
    if (v118 != v108)
    {
      uint64_t v111 = v118;
      while (!*(void *)(v111 + 8) && !*(void *)(v111 + 16))
      {
        v111 += 40;
        if (v111 == v108)
        {
          uint64_t v111 = v108;
          break;
        }
      }
    }
  }
  MEMORY[0x1D25D9CD0](v4, 8);
  return 0;
}

uint64_t sub_1CD137490(uint64_t a1, int a2, unsigned __int8 *a3, void *a4)
{
  if (!a2)
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    goto LABEL_23;
  }
  uint64_t v4 = 0;
  uint64_t v5 = *((void *)a3 + 1);
  uint64_t v6 = *((void *)a3 + 2);
  int v7 = *a3;
  unsigned int v8 = v6 ^ v5 ^ v7;
  int v9 = a2 - 1;
  for (int i = 1; ; ++i)
  {
    unsigned int v11 = v8 & v9;
    uint64_t v12 = (unsigned __int8 *)(a1 + 40 * (v8 & v9));
    uint64_t v13 = *((void *)v12 + 1);
    if (v7 == *v12 && v5 == v13)
    {
      uint64_t v13 = *((void *)a3 + 1);
      if (v6 == *((void *)v12 + 2))
      {
        uint64_t result = 1;
        goto LABEL_23;
      }
    }
    if (!*v12) {
      break;
    }
    if (!v13)
    {
      BOOL v15 = *((void *)v12 + 2) == 0;
      goto LABEL_14;
    }
LABEL_13:
    BOOL v15 = 0;
LABEL_14:
    if (v15 && v4 == 0) {
      uint64_t v4 = (unsigned __int8 *)(a1 + 40 * v11);
    }
    unsigned int v8 = v11 + i;
  }
  if (v13 || *((void *)v12 + 2)) {
    goto LABEL_13;
  }
  uint64_t result = 0;
  if (v4) {
    uint64_t v12 = v4;
  }
LABEL_23:
  *a4 = v12;
  return result;
}

uint64_t sub_1CD137550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *(_DWORD *)(*(void *)(a1 + 16) + 8);
  unint64_t v7 = *(unsigned int *)(*(void *)a2 + 8);
  unint64_t v8 = v7 >> 8;
  int v9 = (const llvm::DataLayout *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 40) + 56) + 40) + 272);
  unsigned int v57 = *(_DWORD *)(*(void *)a2 + 8) >> 8;
  if (v7 >> 8 > 0x40) {
    operator new[]();
  }
  unsigned int v59 = v7 >> 8;
  int8x8_t v56 = 0;
  unint64_t v58 = 0;
  if (*(unsigned __int8 *)(a2 + 16) < 0x1Cu || (BOOL v10 = (const llvm::DataLayout *)a2, !*(void *)(a2 + 40))) {
    BOOL v10 = 0;
  }
  v60[0] = v9;
  v60[1] = 0;
  unsigned int v11 = v8 - (v6 >> 8);
  v60[3] = 0;
  v60[4] = 0;
  v60[2] = v10;
  char v61 = 1;
  sub_1CC15FBF8(a2, &v56, 0, v60);
  if (v57 > 0x40)
  {
    unsigned int v12 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v56);
  }
  else if (v57)
  {
    unsigned int v12 = __clz(~(*(void *)&v56 << -(char)v57));
  }
  else
  {
    unsigned int v12 = 0;
  }
  if (v12 < v11)
  {
    if (v59 > 0x40)
    {
      int v15 = 0;
      int64_t v16 = ((unint64_t)v59 + 63) >> 6;
      do
      {
        BOOL v17 = v16-- < 1;
        if (v17) {
          break;
        }
        unint64_t v18 = *(void *)(v58 + 8 * v16);
        v15 += __clz(v18);
      }
      while (!v18);
      if ((v59 & 0x3F) != 0) {
        unsigned int v19 = v59 | 0xFFFFFFC0;
      }
      else {
        unsigned int v19 = 0;
      }
      unsigned int v13 = v15 + v19;
    }
    else
    {
      unsigned int v13 = v59 + __clz(v58) - 64;
    }
    if (v13 < v11) {
      goto LABEL_20;
    }
    unsigned int v20 = *(unsigned __int8 *)(a2 + 16);
    if (v20 < 0x1C) {
      goto LABEL_22;
    }
    if (v20 != 83)
    {
      if (v20 == 58) {
        goto LABEL_20;
      }
      if (v20 == 45)
      {
        int v22 = *(_DWORD *)(a2 + 20);
        uint64_t v23 = (v22 & 0x40000000) != 0 ? *(void *)(a2 - 8) : a2 - 32 * (v22 & 0x7FFFFFF);
        if ((uint64_t v31 = *(void *)(v23 + 32), v32 = *(unsigned __int8 *)(v31 + 16), v31) && v32 == 16
          || v32 == 77 && (uint64_t v31 = *(void *)(v31 - 32), *(unsigned char *)(v31 + 16) == 16))
        {
          uint64_t v33 = (llvm::APInt *)(v31 + 24);
          uint64_t v34 = *(unsigned int *)(v31 + 32);
          unsigned int v35 = v34 - 1;
          if (v34 > 0x40)
          {
            if ((*(void *)(*(void *)v33 + 8 * (v35 >> 6)) >> v35))
            {
              int v37 = llvm::APInt::countLeadingOnesSlowCase(v33);
            }
            else
            {
              int v52 = 0;
              int64_t v53 = (unint64_t)(v34 + 63) >> 6;
              do
              {
                BOOL v17 = v53-- < 1;
                if (v17) {
                  break;
                }
                unint64_t v54 = *(void *)(*(void *)v33 + 8 * v53);
                v52 += __clz(v54);
              }
              while (!v54);
              int v55 = v34 | 0xFFFFFFC0;
              if ((v34 & 0x3F) == 0) {
                int v55 = 0;
              }
              int v37 = v52 + v55;
            }
          }
          else
          {
            unint64_t v36 = *(void *)v33;
            if ((*(void *)v33 >> v35)) {
              int v37 = v34 ? __clz(~(v36 << -(char)v34)) : 0;
            }
            else {
              int v37 = v34 + __clz(v36) - 64;
            }
          }
          if ((v34 - v37 + 1) > *(_DWORD *)(*(void *)(a1 + 16) + 8) >> 8) {
            goto LABEL_20;
          }
        }
      }
      goto LABEL_22;
    }
    uint64_t v24 = *(unsigned int *)(a3 + 20);
    int v25 = *(_DWORD *)(a3 + 24);
    if ((v24 - v25) > 0xF) {
      goto LABEL_22;
    }
    uint64_t v26 = *(void *)(a3 + 8);
    if (v26 == *(void *)a3)
    {
      if (v24)
      {
        uint64_t v27 = 0;
        uint64_t v28 = 8 * v24;
        int v29 = *(uint64_t **)(a3 + 8);
        while (*v29 != a2)
        {
          if (*v29 == -2) {
            uint64_t v27 = v29;
          }
          ++v29;
          v28 -= 8;
          if (!v28)
          {
            if (!v27) {
              goto LABEL_40;
            }
            *uint64_t v27 = a2;
            *(_DWORD *)(a3 + 24) = v25 - 1;
            goto LABEL_75;
          }
        }
        goto LABEL_20;
      }
LABEL_40:
      unsigned int v30 = *(_DWORD *)(a3 + 16);
      if (v24 < v30)
      {
        *(_DWORD *)(a3 + 20) = v24 + 1;
        *(void *)(v26 + 8 * v24) = a2;
LABEL_75:
        int v47 = *(_DWORD *)(a2 + 20);
        if ((v47 & 0x40000000) != 0)
        {
          uint64_t v49 = *(void **)(a2 - 8);
          uint64_t v48 = v47 & 0x7FFFFFF;
        }
        else
        {
          uint64_t v48 = v47 & 0x7FFFFFF;
          uint64_t v49 = (void *)(a2 - 32 * v48);
        }
        if (!v48)
        {
LABEL_20:
          uint64_t v14 = 2;
          goto LABEL_23;
        }
        uint64_t v50 = 32 * v48;
        while (1)
        {
          uint64_t v51 = *v49;
          if (sub_1CD137550(a1, *v49, a3) != 2 && *(unsigned __int8 *)(v51 + 16) - 11 > 1) {
            break;
          }
          v49 += 4;
          v50 -= 32;
          if (!v50) {
            goto LABEL_20;
          }
        }
LABEL_22:
        uint64_t v14 = 1;
        goto LABEL_23;
      }
    }
    else
    {
      unsigned int v30 = *(_DWORD *)(a3 + 16);
    }
    if (3 * v30 <= 4 * ((int)v24 - v25))
    {
      if (v30 >= 0x40) {
        v30 *= 2;
      }
      else {
        unsigned int v30 = 128;
      }
    }
    else if (v30 - v24 >= v30 >> 3)
    {
LABEL_56:
      unsigned int v38 = v30 - 1;
      unsigned int v39 = (v30 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      int v40 = (uint64_t *)(v26 + 8 * v39);
      uint64_t v41 = *v40;
      if (*v40 != -1)
      {
        int v42 = 0;
        int v43 = 1;
        while (v41 != a2)
        {
          if (v42) {
            BOOL v44 = 0;
          }
          else {
            BOOL v44 = v41 == -2;
          }
          if (v44) {
            int v42 = v40;
          }
          unsigned int v45 = v39 + v43++;
          unsigned int v39 = v45 & v38;
          int v40 = (uint64_t *)(v26 + 8 * (v45 & v38));
          uint64_t v41 = *v40;
          if (*v40 == -1) {
            goto LABEL_68;
          }
        }
        goto LABEL_20;
      }
      int v42 = 0;
LABEL_68:
      if (v42) {
        uint64_t v46 = v42;
      }
      else {
        uint64_t v46 = v40;
      }
      if (*v46 == a2) {
        goto LABEL_20;
      }
      if (*v46 == -2) {
        --*(_DWORD *)(a3 + 24);
      }
      else {
        ++*(_DWORD *)(a3 + 20);
      }
      *uint64_t v46 = a2;
      goto LABEL_75;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a3, v30);
    unsigned int v30 = *(_DWORD *)(a3 + 16);
    uint64_t v26 = *(void *)(a3 + 8);
    goto LABEL_56;
  }
  uint64_t v14 = 0;
LABEL_23:
  if (v59 >= 0x41 && v58) {
    MEMORY[0x1D25D9CB0](v58, 0x1000C8000313F17);
  }
  if (v57 >= 0x41 && *(void *)&v56) {
    MEMORY[0x1D25D9CB0](*(void *)&v56, 0x1000C8000313F17);
  }
  return v14;
}

void sub_1CD137AB8(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  __int16 v1 = 257;
  operator new();
}

llvm::Instruction *sub_1CD1382E4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  v131[15] = *MEMORY[0x1E4F143B8];
  sub_1CBF537B4((uint64_t)v130, (uint64_t **)a4, *(void *)(a4 + 48), 0, 0, 0);
  unint64_t v7 = *(unsigned __int8 **)(*(void *)(a1 + 8) + 48);
  uint64_t v129 = v7;
  if (v7)
  {
    llvm::MetadataTracking::track((uint64_t)&v129, v7, 2);
    uint64_t v8 = (uint64_t)v129;
  }
  else
  {
    uint64_t v8 = 0;
  }
  sub_1CB8461A4((uint64_t)v130, 0, v8);
  if (v129)
  {
    int v9 = *v129;
    if ((v9 - 4) > 0x1E)
    {
      if ((v9 - 3) >= 0xFFFFFFFE) {
        unint64_t v77 = v129;
      }
      else {
        unint64_t v77 = 0;
      }
      if ((v9 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v78 = (unint64_t)(v77 + 8);
LABEL_56:
        v127[0] = &v129;
        sub_1CC5FA668(v78 + 16, v127);
        goto LABEL_8;
      }
      if (v9 == 3) {
        *((void *)v129 + 1) = 0;
      }
    }
    else if ((v129[1] & 0x7F) == 2 || *((_DWORD *)v129 + 3))
    {
      uint64_t v123 = *((void *)v129 + 2);
      if ((v123 & 4) != 0)
      {
        unint64_t v78 = v123 & 0xFFFFFFFFFFFFFFF8;
        if (v78) {
          goto LABEL_56;
        }
      }
    }
  }
LABEL_8:
  uint64_t v10 = **(void **)(a1 + 8);
  __int16 v128 = 257;
  unsigned int v11 = sub_1CB93113C((uint64_t)v130, v10, 2, (uint64_t)v127);
  unsigned int v12 = v11;
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  int v15 = *((_DWORD *)v11 + 5);
  uint64_t v16 = v15 & 0x7FFFFFF;
  if ((v15 & 0x7FFFFFF) == *((_DWORD *)v11 + 15))
  {
    unsigned int v83 = v16 + (v16 >> 1);
    if (v83 <= 2) {
      uint64_t v84 = 2;
    }
    else {
      uint64_t v84 = v83;
    }
    *((_DWORD *)v11 + 15) = v84;
    if ((v15 & 0x40000000) != 0) {
      __int16 v85 = (uint64_t *)*((void *)v11 - 1);
    }
    else {
      __int16 v85 = (uint64_t *)((char *)v11 - 32 * v16);
    }
    __p = v85;
    uint64_t v86 = operator new(40 * v84);
    *((void *)v12 - 1) = v86;
    int v87 = v86;
    do
    {
      *int v87 = 0;
      v87[1] = 0;
      v87[2] = 0;
      v87[3] = v12;
      v87 += 4;
    }
    while (v87 != &v86[4 * v84]);
    int v88 = *((_DWORD *)v12 + 5);
    if ((v88 & 0x40000000) != 0) {
      uint64_t v89 = (uint64_t)v86;
    }
    else {
      uint64_t v89 = (uint64_t)v12 - 32 * (v88 & 0x7FFFFFF);
    }
    sub_1CC5E4108((uint64_t)v127, __p, &__p[4 * v16], v89);
    if (v16)
    {
      memmove((void *)(v89 + 32 * v84), &__p[4 * v16], 8 * v16);
      uint64_t v90 = 4 * v16;
      do
      {
        uint64_t v91 = &__p[v90];
        if (__p[v90 - 4])
        {
          *(void *)*(v91 - 2) = *(v91 - 3);
          uint64_t v92 = *(v91 - 3);
          if (v92) {
            *(void *)(v92 + 16) = *(v91 - 2);
          }
        }
        v90 -= 4;
      }
      while (v90 * 8);
    }
    operator delete(__p);
    int v15 = *((_DWORD *)v12 + 5);
  }
  uint64_t v17 = (v15 + 1) & 0x7FFFFFF;
  *((_DWORD *)v12 + 5) = v15 & 0xF8000000 | (v15 + 1) & 0x7FFFFFF;
  uint64_t v18 = (v17 - 1);
  if ((v15 & 0x40000000) != 0) {
    unsigned int v19 = (char *)*((void *)v12 - 1);
  }
  else {
    unsigned int v19 = (char *)v12 - 32 * v17;
  }
  unsigned int v20 = &v19[32 * v18];
  if (*(void *)v20)
  {
    **((void **)v20 + 2) = *((void *)v20 + 1);
    uint64_t v79 = *((void *)v20 + 1);
    if (v79) {
      *(void *)(v79 + 16) = *((void *)v20 + 2);
    }
  }
  *(void *)unsigned int v20 = v14;
  if (v14)
  {
    uint64_t v23 = *(void *)(v14 + 8);
    int v22 = (char **)(v14 + 8);
    uint64_t v21 = v23;
    uint64_t v24 = &v19[32 * v18];
    *((void *)v24 + 1) = v23;
    if (v23) {
      *(void *)(v21 + 16) = v24 + 8;
    }
    *((void *)v24 + 2) = v22;
    *int v22 = v20;
  }
  int v25 = *((_DWORD *)v12 + 5);
  uint64_t v26 = v25 & 0x7FFFFFF;
  if ((v25 & 0x40000000) != 0) {
    uint64_t v27 = (char *)*((void *)v12 - 1);
  }
  else {
    uint64_t v27 = (char *)v12 - 32 * v26;
  }
  uint64_t v28 = *((unsigned int *)v12 + 15);
  *(void *)&v27[32 * v28 + 8 * (v26 - 1)] = v13;
  uint64_t v29 = *a3;
  uint64_t v30 = a3[1];
  int v31 = *((_DWORD *)v12 + 5);
  if ((v31 & 0x7FFFFFF) == v28)
  {
    unsigned int v93 = v28 + (v28 >> 1);
    if (v93 <= 2) {
      uint64_t v94 = 2;
    }
    else {
      uint64_t v94 = v93;
    }
    *((_DWORD *)v12 + 15) = v94;
    if ((v31 & 0x40000000) != 0) {
      uint64_t v95 = (uint64_t *)*((void *)v12 - 1);
    }
    else {
      uint64_t v95 = (uint64_t *)((char *)v12 - 32 * v28);
    }
    __pa = v95;
    int v96 = operator new(40 * v94);
    *((void *)v12 - 1) = v96;
    int v97 = v96;
    do
    {
      *int v97 = 0;
      v97[1] = 0;
      uint64_t v97[2] = 0;
      v97[3] = v12;
      v97 += 4;
    }
    while (v97 != &v96[4 * v94]);
    int v98 = *((_DWORD *)v12 + 5);
    if ((v98 & 0x40000000) != 0) {
      uint64_t v99 = (uint64_t)v96;
    }
    else {
      uint64_t v99 = (uint64_t)v12 - 32 * (v98 & 0x7FFFFFF);
    }
    sub_1CC5E4108((uint64_t)v127, __pa, &__pa[4 * v28], v99);
    if (v28)
    {
      memmove((void *)(v99 + 32 * v94), &__pa[4 * v28], 8 * v28);
      uint64_t v100 = 4 * v28;
      do
      {
        uint64_t v101 = &__pa[v100];
        if (__pa[v100 - 4])
        {
          *(void *)*(v101 - 2) = *(v101 - 3);
          uint64_t v102 = *(v101 - 3);
          if (v102) {
            *(void *)(v102 + 16) = *(v101 - 2);
          }
        }
        v100 -= 4;
      }
      while (v100 * 8);
    }
    operator delete(__pa);
    int v31 = *((_DWORD *)v12 + 5);
  }
  uint64_t v32 = (v31 + 1) & 0x7FFFFFF;
  *((_DWORD *)v12 + 5) = v31 & 0xF8000000 | (v31 + 1) & 0x7FFFFFF;
  uint64_t v33 = (v32 - 1);
  if ((v31 & 0x40000000) != 0) {
    uint64_t v34 = (char *)*((void *)v12 - 1);
  }
  else {
    uint64_t v34 = (char *)v12 - 32 * v32;
  }
  unsigned int v35 = &v34[32 * v33];
  if (*(void *)v35)
  {
    **((void **)v35 + 2) = *((void *)v35 + 1);
    uint64_t v80 = *((void *)v35 + 1);
    if (v80) {
      *(void *)(v80 + 16) = *((void *)v35 + 2);
    }
  }
  *(void *)unsigned int v35 = v30;
  if (v30)
  {
    uint64_t v38 = *(void *)(v30 + 8);
    int v37 = (char **)(v30 + 8);
    uint64_t v36 = v38;
    unsigned int v39 = &v34[32 * v33];
    *((void *)v39 + 1) = v38;
    if (v38) {
      *(void *)(v36 + 16) = v39 + 8;
    }
    *((void *)v39 + 2) = v37;
    *int v37 = v35;
  }
  int v40 = *((_DWORD *)v12 + 5);
  uint64_t v41 = v40 & 0x7FFFFFF;
  if ((v40 & 0x40000000) != 0) {
    int v42 = (char *)*((void *)v12 - 1);
  }
  else {
    int v42 = (char *)v12 - 32 * v41;
  }
  *(void *)&v42[32 * *((unsigned int *)v12 + 15) + 8 * (v41 - 1)] = v29;
  uint64_t v43 = **(void **)(a1 + 8);
  __int16 v128 = 257;
  BOOL v44 = sub_1CB93113C((uint64_t)v130, v43, 2, (uint64_t)v127);
  unsigned int v45 = v44;
  uint64_t v46 = a2[2];
  uint64_t v47 = *a2;
  int v48 = *((_DWORD *)v44 + 5);
  uint64_t v49 = v48 & 0x7FFFFFF;
  if ((v48 & 0x7FFFFFF) == *((_DWORD *)v44 + 15))
  {
    unsigned int v103 = v49 + (v49 >> 1);
    if (v103 <= 2) {
      uint64_t v104 = 2;
    }
    else {
      uint64_t v104 = v103;
    }
    *((_DWORD *)v44 + 15) = v104;
    if ((v48 & 0x40000000) != 0) {
      uint64_t v105 = (uint64_t *)*((void *)v44 - 1);
    }
    else {
      uint64_t v105 = (uint64_t *)((char *)v44 - 32 * v49);
    }
    __pb = v105;
    uint64_t v106 = operator new(40 * v104);
    *((void *)v45 - 1) = v106;
    uint64_t v107 = v106;
    do
    {
      *uint64_t v107 = 0;
      v107[1] = 0;
      v107[2] = 0;
      v107[3] = v45;
      v107 += 4;
    }
    while (v107 != &v106[4 * v104]);
    int v108 = *((_DWORD *)v45 + 5);
    if ((v108 & 0x40000000) != 0) {
      uint64_t v109 = (uint64_t)v106;
    }
    else {
      uint64_t v109 = (uint64_t)v45 - 32 * (v108 & 0x7FFFFFF);
    }
    sub_1CC5E4108((uint64_t)v127, __pb, &__pb[4 * v49], v109);
    if (v49)
    {
      memmove((void *)(v109 + 32 * v104), &__pb[4 * v49], 8 * v49);
      uint64_t v110 = 4 * v49;
      do
      {
        uint64_t v111 = &__pb[v110];
        if (__pb[v110 - 4])
        {
          *(void *)*(v111 - 2) = *(v111 - 3);
          uint64_t v112 = *(v111 - 3);
          if (v112) {
            *(void *)(v112 + 16) = *(v111 - 2);
          }
        }
        v110 -= 4;
      }
      while (v110 * 8);
    }
    operator delete(__pb);
    int v48 = *((_DWORD *)v45 + 5);
  }
  uint64_t v50 = (v48 + 1) & 0x7FFFFFF;
  *((_DWORD *)v45 + 5) = v48 & 0xF8000000 | (v48 + 1) & 0x7FFFFFF;
  uint64_t v51 = (v50 - 1);
  if ((v48 & 0x40000000) != 0) {
    int v52 = (char *)*((void *)v45 - 1);
  }
  else {
    int v52 = (char *)v45 - 32 * v50;
  }
  int64_t v53 = &v52[32 * v51];
  if (*(void *)v53)
  {
    **((void **)v53 + 2) = *((void *)v53 + 1);
    uint64_t v81 = *((void *)v53 + 1);
    if (v81) {
      *(void *)(v81 + 16) = *((void *)v53 + 2);
    }
  }
  *(void *)int64_t v53 = v46;
  if (v46)
  {
    uint64_t v56 = *(void *)(v46 + 8);
    int v55 = (char **)(v46 + 8);
    uint64_t v54 = v56;
    unsigned int v57 = &v52[32 * v51];
    *((void *)v57 + 1) = v56;
    if (v56) {
      *(void *)(v54 + 16) = v57 + 8;
    }
    *((void *)v57 + 2) = v55;
    *int v55 = v53;
  }
  int v58 = *((_DWORD *)v45 + 5);
  uint64_t v59 = v58 & 0x7FFFFFF;
  if ((v58 & 0x40000000) != 0) {
    uint64_t v60 = (char *)*((void *)v45 - 1);
  }
  else {
    uint64_t v60 = (char *)v45 - 32 * v59;
  }
  uint64_t v61 = *((unsigned int *)v45 + 15);
  *(void *)&v60[32 * v61 + 8 * (v59 - 1)] = v47;
  uint64_t v62 = a3[2];
  uint64_t v63 = *a3;
  int v64 = *((_DWORD *)v45 + 5);
  if ((v64 & 0x7FFFFFF) == v61)
  {
    unsigned int v113 = v61 + (v61 >> 1);
    if (v113 <= 2) {
      uint64_t v114 = 2;
    }
    else {
      uint64_t v114 = v113;
    }
    *((_DWORD *)v45 + 15) = v114;
    if ((v64 & 0x40000000) != 0) {
      uint64_t v115 = (uint64_t *)*((void *)v45 - 1);
    }
    else {
      uint64_t v115 = (uint64_t *)((char *)v45 - 32 * v61);
    }
    char v116 = operator new(40 * v114);
    *((void *)v45 - 1) = v116;
    uint64_t v117 = v116;
    do
    {
      void *v117 = 0;
      v117[1] = 0;
      v117[2] = 0;
      v117[3] = v45;
      v117 += 4;
    }
    while (v117 != &v116[4 * v114]);
    int v118 = *((_DWORD *)v45 + 5);
    if ((v118 & 0x40000000) != 0) {
      uint64_t v119 = (uint64_t)v116;
    }
    else {
      uint64_t v119 = (uint64_t)v45 - 32 * (v118 & 0x7FFFFFF);
    }
    sub_1CC5E4108((uint64_t)v127, v115, &v115[4 * v61], v119);
    if (v61)
    {
      memmove((void *)(v119 + 32 * v114), &v115[4 * v61], 8 * v61);
      uint64_t v120 = 4 * v61;
      do
      {
        unsigned int v121 = &v115[v120];
        if (v115[v120 - 4])
        {
          *(void *)*(v121 - 2) = *(v121 - 3);
          uint64_t v122 = *(v121 - 3);
          if (v122) {
            *(void *)(v122 + 16) = *(v121 - 2);
          }
        }
        v120 -= 4;
      }
      while (v120 * 8);
    }
    operator delete(v115);
    int v64 = *((_DWORD *)v45 + 5);
  }
  uint64_t v65 = (v64 + 1) & 0x7FFFFFF;
  *((_DWORD *)v45 + 5) = v64 & 0xF8000000 | (v64 + 1) & 0x7FFFFFF;
  uint64_t v66 = (v65 - 1);
  if ((v64 & 0x40000000) != 0) {
    char v67 = (char *)*((void *)v45 - 1);
  }
  else {
    char v67 = (char *)v45 - 32 * v65;
  }
  int v68 = &v67[32 * v66];
  if (*(void *)v68)
  {
    **((void **)v68 + 2) = *((void *)v68 + 1);
    uint64_t v82 = *((void *)v68 + 1);
    if (v82) {
      *(void *)(v82 + 16) = *((void *)v68 + 2);
    }
  }
  *(void *)int v68 = v62;
  if (v62)
  {
    uint64_t v71 = *(void *)(v62 + 8);
    uint64_t v70 = (char **)(v62 + 8);
    uint64_t v69 = v71;
    int v72 = &v67[32 * v66];
    *((void *)v72 + 1) = v71;
    if (v71) {
      *(void *)(v69 + 16) = v72 + 8;
    }
    *((void *)v72 + 2) = v70;
    uint64_t *v70 = v68;
  }
  int v73 = *((_DWORD *)v45 + 5);
  uint64_t v74 = v73 & 0x7FFFFFF;
  if ((v73 & 0x40000000) != 0) {
    int v75 = (char *)*((void *)v45 - 1);
  }
  else {
    int v75 = (char *)v45 - 32 * v74;
  }
  *(void *)&v75[32 * *((unsigned int *)v45 + 15) + 8 * (v74 - 1)] = v63;
  if (v130[0] != v131) {
    free(v130[0]);
  }
  return v12;
}

void llvm::versionCallSite(llvm *this, llvm::CallBase *a2, llvm::Instruction **a3, llvm::MDNode *a4)
{
  uint64_t v7 = 0;
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = **(void **)this;
  uint64_t v27 = &v29;
  uint64_t v28 = 0x200000000;
  uint64_t v32 = v8;
  uint64_t v33 = &v41;
  uint64_t v34 = &v42;
  uint64_t v35 = 0;
  int v36 = 0;
  __int16 v37 = 512;
  char v38 = 7;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = &unk_1F2616E88;
  int v42 = &unk_1F2617008;
  int v9 = (unsigned __int8 *)*((void *)this + 6);
  uint64_t v30 = *((void *)this + 5);
  int v31 = (char *)this + 24;
  v25[0] = v9;
  if (v9)
  {
    llvm::MetadataTracking::track((uint64_t)v25, v9, 2);
    uint64_t v7 = v25[0];
  }
  sub_1CB8461A4((uint64_t)&v27, 0, v7);
  if (!v25[0])
  {
LABEL_4:
    uint64_t v10 = (uint64_t *)*((void *)this - 4);
    uint64_t v11 = *v10;
    if (*v10 != *(void *)a2)
    {
      __int16 v26 = 257;
      if (*((unsigned __int8 *)a2 + 16) <= 0x14u)
      {
        uint64_t v14 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, llvm::CallBase *, uint64_t))*v33 + 28))(v33, 49, a2, v11);
        a2 = (llvm::CallBase *)v14;
        if (v14)
        {
          if (v14[16] >= 0x1Cu)
          {
            (*((void (**)(void **, unsigned __int8 *, void *, uint64_t, char *))*v34 + 2))(v34, v14, v25, v30, v31);
            if (v28)
            {
              uint64_t v21 = (llvm::MDNode **)v27;
              int v22 = (llvm::MDNode **)((char *)v27 + 16 * v28);
              do
              {
                llvm::Instruction::setMetadata(a2, *(_DWORD *)v21, v21[1]);
                v21 += 2;
              }
              while (v21 != v22);
            }
          }
        }
      }
      else
      {
        __int16 v44 = 257;
        a2 = llvm::CastInst::Create(49, (uint64_t)a2, v11, (const char **)&v43, 0);
        (*((void (**)(void **, llvm::CallBase *, void *, uint64_t, char *))*v34 + 2))(v34, a2, v25, v30, v31);
        if (v28)
        {
          unsigned int v12 = (llvm::MDNode **)v27;
          uint64_t v13 = (llvm::MDNode **)((char *)v27 + 16 * v28);
          do
          {
            llvm::Instruction::setMetadata(a2, *(_DWORD *)v12, v12[1]);
            v12 += 2;
          }
          while (v12 != v13);
        }
      }
      uint64_t v10 = (uint64_t *)*((void *)this - 4);
    }
    __int16 v44 = 257;
    int v15 = sub_1CB845F20((uint64_t)&v27, 32, v10, (uint64_t)a2, (uint64_t)&v43);
    if (*((unsigned char *)this + 16) == 84 && (*((_WORD *)this + 9) & 3) == 2) {
      sub_1CD1290BC((uint64_t)v15, (uint64_t)this);
    }
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    llvm::SplitBlockAndInsertIfThenElse(v15, this, (llvm::Instruction *)&v24, &v23, a3, v16);
  }
  int v17 = *(unsigned __int8 *)v25[0];
  if ((v17 - 4) > 0x1E)
  {
    if ((v17 - 3) >= 0xFFFFFFFE) {
      uint64_t v20 = v25[0];
    }
    else {
      uint64_t v20 = 0;
    }
    if ((v17 - 3) < 0xFFFFFFFE)
    {
      if (v17 == 3) {
        *(void *)(v25[0] + 8) = 0;
      }
      goto LABEL_4;
    }
    unint64_t v19 = v20 + 8;
  }
  else
  {
    if ((*(unsigned char *)(v25[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v25[0] + 12)) {
      goto LABEL_4;
    }
    uint64_t v18 = *(void *)(v25[0] + 16);
    if ((v18 & 4) == 0) {
      goto LABEL_4;
    }
    unint64_t v19 = v18 & 0xFFFFFFFFFFFFFFF8;
    if (!v19) {
      goto LABEL_4;
    }
  }
  uint64_t v43 = v25;
  sub_1CC5FA668(v19 + 16, &v43);
  goto LABEL_4;
}

uint64_t llvm::isLegalToPromote(llvm::Type **this, const llvm::CallBase *a2, llvm::Function *a3, const char **a4)
{
  uint64_t v7 = (llvm::Type *)(*((void *)a2 + 5) + 272);
  uint64_t v8 = *this;
  uint64_t v9 = *((void *)a2 + 3);
  uint64_t v10 = **(llvm::CastInst ***)(v9 + 16);
  if (v8 != v10)
  {
    if (!llvm::CastInst::isBitOrNoopPointerCastable(v10, v8, v7, (const llvm::DataLayout *)a4))
    {
      if (a3)
      {
        uint64_t v27 = "Return type mismatch";
        goto LABEL_39;
      }
      return 0;
    }
    uint64_t v9 = *((void *)a2 + 3);
  }
  int v11 = *(_DWORD *)(v9 + 12);
  int v12 = *((unsigned __int8 *)this + 16);
  if (v12 == 84)
  {
    uint64_t NumSubclassExtraOperandsDynamic = 0;
  }
  else if (v12 == 39)
  {
    uint64_t NumSubclassExtraOperandsDynamic = llvm::CallBase::getNumSubclassExtraOperandsDynamic((llvm::CallBase *)this);
  }
  else
  {
    uint64_t NumSubclassExtraOperandsDynamic = 2;
  }
  int v14 = *((_DWORD *)this + 5);
  if (v14 < 0)
  {
    Descriptor = llvm::User::getDescriptor((llvm::User *)this);
    int v14 = *((_DWORD *)this + 5);
    if (v14 < 0)
    {
      uint64_t v28 = llvm::User::getDescriptor((llvm::User *)this);
      uint64_t v16 = &v28[v29];
      int v14 = *((_DWORD *)this + 5);
      goto LABEL_7;
    }
  }
  else
  {
    Descriptor = 0;
  }
  uint64_t v16 = 0;
LABEL_7:
  uint64_t v17 = (v11 - 1);
  if (((v16 - Descriptor) & 0xFFFFFFFF0) != 0)
  {
    int v30 = *((_DWORD *)llvm::User::getDescriptor((llvm::User *)this) + 2);
    int v31 = llvm::User::getDescriptor((llvm::User *)this);
    int v18 = *(_DWORD *)&v31[v32 - 4] - v30;
    int v14 = *((_DWORD *)this + 5);
  }
  else
  {
    int v18 = 0;
  }
  unint64_t v19 = (-32 * NumSubclassExtraOperandsDynamic
       + 32 * -v18
       - 32 * (unint64_t)-(v14 & 0x7FFFFFF)
       - 32) >> 5;
  if (v17 != v19 && *(_DWORD *)(*((void *)a2 + 3) + 8) <= 0xFFu)
  {
    if (a3)
    {
      uint64_t v27 = "The number of arguments mismatch";
      goto LABEL_39;
    }
    return 0;
  }
  if (!v17)
  {
LABEL_14:
    if (v17 >= v19) {
      return 1;
    }
    while (!llvm::CallBase::paramHasAttr((uint64_t)this, v17, 73))
    {
      LODWORD(v17) = v17 + 1;
      uint64_t result = 1;
      if (v19 == v17) {
        return result;
      }
    }
    if (a3)
    {
      uint64_t v27 = "SRet arg to vararg function";
      goto LABEL_39;
    }
    return 0;
  }
  uint64_t v20 = 0;
  uint64_t v21 = (llvm *)this;
  while (1)
  {
    int v22 = *(llvm::Type **)(*(void *)(*((void *)a2 + 3) + 16) + 8 * v20 + 8);
    uint64_t v23 = (llvm::CastInst *)**((void **)v21 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
    if (v22 == v23) {
      goto LABEL_13;
    }
    if (!llvm::CastInst::isBitOrNoopPointerCastable(v23, v22, v7, (const llvm::DataLayout *)a4))
    {
      if (!a3) {
        return 0;
      }
      uint64_t v27 = "Argument type mismatch";
      goto LABEL_39;
    }
    int hasParamAttribute = llvm::Function::hasParamAttribute((uint64_t)a2, v20, 69);
    uint64_t v33 = this[8];
    if (hasParamAttribute != llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v33, (int)v20 + 1, 69)) {
      break;
    }
    int v26 = llvm::Function::hasParamAttribute((uint64_t)a2, v20, 71);
    uint64_t v33 = this[8];
    if (v26 != llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v33, (int)v20 + 1, 71))
    {
      if (!a3) {
        return 0;
      }
      uint64_t v27 = "inalloca mismatch";
      goto LABEL_39;
    }
LABEL_13:
    ++v20;
    uint64_t v21 = (llvm *)((char *)v21 + 32);
    if (v17 == v20) {
      goto LABEL_14;
    }
  }
  if (!a3) {
    return 0;
  }
  uint64_t v27 = "byval mismatch";
LABEL_39:
  uint64_t result = 0;
  *(void *)a3 = v27;
  return result;
}

llvm *llvm::promoteCall(llvm *this, llvm::CallBase *a2, llvm::Function *a3, llvm::CastInst **a4)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (void *)((char *)this - 32);
  if (*((void *)this - 4))
  {
    **((void **)this - 2) = *((void *)this - 3);
    uint64_t v8 = *((void *)this - 3);
    if (v8) {
      *(void *)(v8 + 16) = *((void *)this - 2);
    }
  }
  *uint64_t v7 = a2;
  if (a2)
  {
    uint64_t v9 = (void *)((char *)a2 + 8);
    uint64_t v10 = *((void *)a2 + 1);
    *((void *)this - 3) = v10;
    if (v10) {
      *(void *)(v10 + 16) = (char *)this - 24;
    }
    *((void *)this - 2) = v9;
    *uint64_t v9 = v7;
  }
  llvm::Instruction::setMetadata(this, 2, 0);
  llvm::Instruction::setMetadata(this, 23, 0);
  uint64_t v11 = *((void *)a2 + 3);
  if (*((void *)this + 9) != v11)
  {
    uint64_t v46 = *(llvm::Value **)this;
    uint64_t v47 = **(void **)(v11 + 16);
    *(void *)this = v47;
    *((void *)this + 9) = v11;
    uint64_t v13 = (*(_DWORD *)(v11 + 12) - 1);
    uint64_t Context = llvm::Function::getContext(a2);
    uint64_t v16 = *((void *)this + 8);
    uint64_t v49 = (llvm::AttributeSet *)Context;
    uint64_t v50 = v16;
    __src = v59;
    __uint64_t n = 0x400000000;
    if (v13)
    {
      uint64_t v17 = 0;
      char v18 = 0;
      uint64_t v48 = v16 + 40;
      unint64_t v19 = this;
      do
      {
        uint64_t v20 = (llvm::CastInst *)*((void *)v19 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
        uint64_t v21 = *(llvm::Value **)(*(void *)(v11 + 16) + 8 * v17 + 8);
        if (v21 == *(llvm::Value **)v20)
        {
          if (v16 && (v17 + 2) < *(_DWORD *)(v16 + 8)) {
            uint64_t v22 = *(void *)(v48 + 8 * (v17 + 2));
          }
          else {
            uint64_t v22 = 0;
          }
          if (__n >= (unint64_t)HIDWORD(__n)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)__src + __n) = v22;
          LODWORD(__n) = __n + 1;
        }
        else
        {
          __int16 v64 = 257;
          BitOrPointerCast = llvm::CastInst::CreateBitOrPointerCast(v20, v21, (const char **)&v60, this, v15);
          LLVMSetArgOperand_0((uint64_t)this, v17, (uint64_t)BitOrPointerCast);
          if (v16 && (v17 + 2) < *(_DWORD *)(v16 + 8)) {
            uint64_t v24 = *(char **)(v48 + 8 * (v17 + 2));
          }
          else {
            uint64_t v24 = 0;
          }
          llvm::AttrBuilder::AttrBuilder(&v60, (uint64_t)v49, v24);
          llvm::AttributeFuncs::typeIncompatible((uint64_t)v21, 3, (uint64_t *)&v53);
          llvm::AttrBuilder::remove((uint64_t)&v60, (uint64_t)&v53);
          sub_1CC1E4850((uint64_t)&v55, v56);
          if (llvm::AttrBuilder::getTypeAttr((uint64_t)&v60, 69))
          {
            ParamByValType = (llvm::Type *)llvm::AttributeList::getParamByValType((llvm::CallBase *)((char *)a2 + 112), v17);
            llvm::AttrBuilder::addByValAttr((uint64_t **)&v60, ParamByValType);
          }
          if (llvm::AttrBuilder::getTypeAttr((uint64_t)&v60, 71))
          {
            ParamInAllocaType = (llvm::Type *)llvm::AttributeList::getParamInAllocaType((llvm::CallBase *)((char *)a2 + 112), v17);
            llvm::AttrBuilder::addInAllocaAttr((uint64_t **)&v60, ParamInAllocaType);
          }
          uint64_t v26 = llvm::AttributeSet::get(v49, (uint64_t **)&v60, v25);
          if (__n >= (unint64_t)HIDWORD(__n)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)__src + __n) = v26;
          LODWORD(__n) = __n + 1;
          if (v61 != &v63) {
            free(v61);
          }
          char v18 = 1;
        }
        ++v17;
        unint64_t v19 = (llvm *)((char *)v19 + 32);
      }
      while (v13 != v17);
    }
    else
    {
      char v18 = 0;
    }
    RetAttrs = (char *)llvm::AttributeList::getRetAttrs((llvm::AttributeList *)&v50);
    llvm::AttrBuilder::AttrBuilder(&v53, (uint64_t)v49, RetAttrs);
    if (*((unsigned char *)v46 + 8) == 7 || v46 == (llvm::Value *)v47)
    {
      if ((v18 & 1) == 0)
      {
LABEL_42:
        if (v54 != &v56) {
          free(v54);
        }
        if (__src != v59) {
          free(__src);
        }
        return this;
      }
    }
    else
    {
      uint64_t v34 = *((void *)this + 1);
      uint64_t v60 = &v62;
      uint64_t v61 = (void *)0x1000000000;
      sub_1CD13ACC0((uint64_t)&v60, v34);
      if (*((unsigned char *)this + 16) == 33)
      {
        __int16 v37 = (llvm *)*((void *)this + 5);
        char v38 = (llvm::BasicBlock *)*((void *)this - 12);
        __int16 v52 = 257;
        uint64_t v39 = *(void *)(llvm::SplitEdge(v37, v38, 0, 0, 0, (llvm::MemorySSAUpdater *)v51, v36) + 48);
      }
      else
      {
        uint64_t v39 = *((void *)this + 4);
      }
      if (v39) {
        uint64_t v40 = (const llvm::Twine *)(v39 - 24);
      }
      else {
        uint64_t v40 = 0;
      }
      __int16 v52 = 257;
      uint64_t v41 = llvm::CastInst::CreateBitOrPointerCast(this, v46, v51, v40, v35);
      int v42 = v41;
      if (a3) {
        *(void *)a3 = v41;
      }
      uint64_t v43 = (llvm::User **)v60;
      if (v61)
      {
        uint64_t v44 = 8 * v61;
        do
        {
          uint64_t v45 = *v43++;
          llvm::User::replaceUsesOfWith(v45, this, v42);
          v44 -= 8;
        }
        while (v44);
        uint64_t v43 = (llvm::User **)v60;
      }
      if (v43 != (llvm::User **)&v62) {
        free(v43);
      }
      llvm::AttributeFuncs::typeIncompatible(v47, 3, (uint64_t *)&v60);
      llvm::AttrBuilder::remove((uint64_t)&v53, (uint64_t)&v60);
      sub_1CC1E4850((uint64_t)&v62, v63);
    }
    uint64_t FnAttrs = llvm::AttributeList::getFnAttrs((llvm::AttributeList *)&v50);
    uint64_t v31 = llvm::AttributeSet::get(v49, &v53, v30);
    *((void *)this + 8) = llvm::AttributeList::get((uint64_t *)v49, FnAttrs, v31, __src, __n);
    goto LABEL_42;
  }
  return this;
}

void llvm::promoteCallWithIfThenElse(llvm *this, llvm::CallBase *a2, llvm::Instruction **a3, llvm::MDNode *a4)
{
}

uint64_t llvm::tryPromoteCall(llvm *this, llvm::CallBase *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *((void *)this - 4);
  if (!v3 || *(unsigned char *)(v3 + 16) != 60) {
    return v2;
  }
  unint64_t v5 = *(void *)(*(void *)(*((void *)this + 5) + 56) + 40);
  unsigned int v6 = *(uint64_t **)(v3 - 32);
  unsigned int v9 = sub_1CB83544C(v5 + 272, *v6);
  if (v7 == 1) {
  unsigned int v51 = v9;
  }
  if (v9 > 0x40) {
    operator new[]();
  }
  uint64_t v50 = 0;
  uint64_t v10 = llvm::Value::stripAndAccumulateConstantOffsets((llvm::GlobalValue *)v6, (llvm::DataLayout *)(v5 + 272), (llvm::APInt *)&v50, 1, 0, 0, v8);
  uint64_t v2 = 0;
  if (v10)
  {
    uint64_t v11 = (uint64_t *)v10;
    if (*((unsigned char *)v10 + 16) == 60)
    {
      int v12 = (uint64_t *)*((void *)v10 - 4);
      unsigned int v13 = sub_1CB83544C(v5 + 272, *v12);
      if (v14 == 1)
      {
        unsigned int v44 = v13;
        unsigned int v13 = v44;
      }
      unsigned int v49 = v13;
      if (v13 > 0x40) {
        operator new[]();
      }
      uint64_t v48 = 0;
      uint64_t v16 = llvm::Value::stripAndAccumulateConstantOffsets((llvm::GlobalValue *)v12, (llvm::DataLayout *)(v5 + 272), (llvm::APInt *)&v48, 1, 0, 0, v15);
      unsigned int v17 = v49;
      if (*((unsigned char *)v16 + 16) != 59) {
        goto LABEL_21;
      }
      char v18 = v48;
      if (v49 >= 0x41)
      {
        int v19 = 0;
        int64_t v20 = ((unint64_t)v49 + 63) >> 6;
        do
        {
          if (v20-- < 1) {
            break;
          }
          unint64_t v22 = v48[v20];
          v19 += __clz(v22);
        }
        while (!v22);
        unsigned int v23 = v49 | 0xFFFFFFC0;
        if ((v49 & 0x3F) == 0) {
          unsigned int v23 = 0;
        }
        if (v49 - v19 - v23 > 0x40)
        {
          uint64_t v2 = 0;
          if (!v48) {
            goto LABEL_25;
          }
          goto LABEL_24;
        }
        char v18 = (void *)*v48;
      }
      if (!v18)
      {
        uint64_t v47 = v11 + 3;
        AvailableLoadedValue = (uint64_t *)llvm::FindAvailableLoadedValue((llvm::MemoryLocation *)v11, v11[5], &v47, 0, 0, 0, 0);
        if (AvailableLoadedValue)
        {
          uint64_t v26 = (llvm::GlobalValue *)AvailableLoadedValue;
          unsigned int v29 = sub_1CB83544C(v5 + 272, *AvailableLoadedValue);
          if (v27 == 1) {
          unsigned int v46 = v29;
          }
          if (v29 > 0x40) {
            operator new[]();
          }
          __src = 0;
          int v30 = llvm::Value::stripAndAccumulateConstantOffsets(v26, (llvm::DataLayout *)(v5 + 272), (llvm::APInt *)&__src, 1, 0, 0, v28);
          uint64_t v2 = 0;
          if (v30)
          {
            uint64_t v31 = v30;
            if (*((unsigned char *)v30 + 16) == 3)
            {
              if ((*((unsigned char *)v30 + 80) & 1) == 0
                || (*((_DWORD *)v30 + 5) & 0x7FFFFFF) == 0
                || (llvm::GlobalValue::isInterposable(v30) & 1) != 0
                || (*((unsigned char *)v31 + 80) & 2) != 0)
              {
                uint64_t v2 = 0;
              }
              else
              {
                uint64_t v33 = (llvm *)*((void *)v31 - 4);
                unsigned int v34 = v46;
                if (v46 >= 0x41) {
                  operator new[]();
                }
                unint64_t v35 = (unint64_t)__src + v50;
                if (v46) {
                  unint64_t v36 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v46;
                }
                else {
                  unint64_t v36 = 0;
                }
                unint64_t v37 = v36 & v35;
                PointerAtOffset = llvm::getPointerAtOffset(v33, v36 & v35, v5, 0, v32);
                if (PointerAtOffset
                  && ((uint64_t v39 = llvm::Value::stripPointerCasts(PointerAtOffset)) != 0
                    ? (BOOL v41 = *((unsigned char *)v39 + 16) == 0)
                    : (BOOL v41 = 0),
                      v41 && (int v42 = v39, llvm::isLegalToPromote((llvm::Type **)this, v39, 0, v40))))
                {
                  llvm::promoteCall(this, v42, 0, v43);
                  uint64_t v2 = 1;
                }
                else
                {
                  uint64_t v2 = 0;
                }
                if (v34 >= 0x41 && v37) {
                  MEMORY[0x1D25D9CB0](v37, 0x1000C8000313F17);
                }
              }
            }
          }
          if (v46 >= 0x41 && __src) {
            MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
        }
        else
        {
          uint64_t v2 = 0;
        }
        unsigned int v17 = v49;
      }
      else
      {
LABEL_21:
        uint64_t v2 = 0;
      }
      if (v17 >= 0x41 && v48) {
LABEL_24:
      }
        MEMORY[0x1D25D9CB0]();
    }
  }
LABEL_25:
  if (v51 >= 0x41 && v50) {
    MEMORY[0x1D25D9CB0](v50, 0x1000C8000313F17);
  }
  return v2;
}

uint64_t sub_1CD13ACC0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = 0;
  if (a2)
  {
    uint64_t v4 = a2;
    do
    {
      ++v3;
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4);
  }
  uint64_t v5 = *(unsigned int *)(result + 8);
  if (v3 + v5 > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2)
  {
    unsigned int v6 = (void *)(*(void *)result + 8 * v5);
    do
    {
      *v6++ = *(void *)(v2 + 24);
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2);
  }
  *(_DWORD *)(result + 8) = v5 + v3;
  return result;
}

uint64_t llvm::CallGraphUpdater::replaceCallSite(llvm::CallGraphUpdater *this, llvm::CallBase *a2, llvm::CallBase *a3)
{
  uint64_t v4 = (llvm::CallGraph *)*((void *)this + 56);
  if (v4)
  {
    uint64_t v7 = *((void *)a2 + 5);
    uint64_t v8 = *((void *)a3 - 4);
    if (!v8 || *(unsigned char *)(v8 + 16) || *(void *)(v8 + 24) != *((void *)a3 + 9)) {
      uint64_t v8 = 0;
    }
    unint64_t v9 = *(void *)(v7 + 56);
    inserted = llvm::CallGraph::getOrInsertFunction(v4, (const llvm::Function *)v8);
    uint64_t v11 = *((void *)this + 56);
    int v14 = *(void **)(v11 + 16);
    int v12 = (void *)(v11 + 16);
    unsigned int v13 = v14;
    if (!v14) {
      goto LABEL_17;
    }
    uint64_t v15 = v12;
    do
    {
      unint64_t v16 = v13[4];
      BOOL v17 = v16 >= v9;
      if (v16 >= v9) {
        char v18 = v13;
      }
      else {
        char v18 = v13 + 1;
      }
      if (v17) {
        uint64_t v15 = v13;
      }
      unsigned int v13 = (void *)*v18;
    }
    while (*v18);
    if (v15 == v12 || v15[4] > v9) {
LABEL_17:
    }
      uint64_t v15 = v12;
    int v19 = (llvm::CallGraphNode *)v15[5];
    for (uint64_t i = *((void *)v19 + 2); ; i += 40)
    {
      if (i == *((void *)v19 + 3)) {
        return 0;
      }
      if (*(unsigned char *)(i + 24) && *(llvm::CallBase **)(i + 16) == a2) {
        break;
      }
    }
    llvm::CallGraphNode::replaceCallEdge(v19, (uint64_t ****)a2, a3, (llvm::CallGraphNode *)inserted);
  }
  return 1;
}

void llvm::initializeCanonicalizeAliasesLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFB8B0, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CD13AEB4;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCFB8B0, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD13AEB4()
{
}

llvm::Constant *sub_1CD13AF4C(uint64_t a1, unsigned char *a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v4 == 1)
  {
    uint64_t v5 = (llvm::Constant *)sub_1CD13AF4C(*(void *)(a1 - 32), a2);
    if (v5 != *(llvm::Constant **)(a1 - 32))
    {
      llvm::GlobalAlias::setAliasee(a1, v5);
      *a2 = 1;
    }
    return v5;
  }
  if (!a1 || v4 != 5) {
    return (llvm::Constant *)a1;
  }
  int v6 = *(_DWORD *)(a1 + 20);
  if ((v6 & 0x40000000) != 0)
  {
    uint64_t v8 = *(void **)(a1 - 8);
    uint64_t v7 = v6 & 0x7FFFFFF;
    if (v7)
    {
LABEL_9:
      unint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      int v12 = &v8[4 * v7];
      do
      {
        uint64_t v13 = sub_1CD13AF4C(*v8, a2);
        uint64_t v14 = v13;
        if (v11 >= v9)
        {
          uint64_t v16 = v11 - v10;
          unint64_t v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 61) {
            abort();
          }
          if (((char *)v9 - (char *)v10) >> 2 > v17) {
            unint64_t v17 = ((char *)v9 - (char *)v10) >> 2;
          }
          if ((unint64_t)((char *)v9 - (char *)v10) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v17;
          }
          if (v18)
          {
            if (v18 >> 61) {
              sub_1CB833614();
            }
            int v19 = (char *)operator new(8 * v18);
          }
          else
          {
            int v19 = 0;
          }
          int64_t v20 = (uint64_t *)&v19[8 * v16];
          uint64_t *v20 = v14;
          uint64_t v15 = v20 + 1;
          while (v11 != v10)
          {
            uint64_t v21 = *--v11;
            *--int64_t v20 = v21;
          }
          unint64_t v9 = (uint64_t *)&v19[8 * v18];
          if (v10) {
            operator delete(v10);
          }
          uint64_t v10 = v20;
        }
        else
        {
          *uint64_t v11 = v13;
          uint64_t v15 = v11 + 1;
        }
        v8 += 4;
        uint64_t v11 = v15;
      }
      while (v8 != v12);
      goto LABEL_33;
    }
  }
  else
  {
    uint64_t v7 = v6 & 0x7FFFFFF;
    uint64_t v8 = (void *)(a1 - 32 * v7);
    if (v7) {
      goto LABEL_9;
    }
  }
  uint64_t v15 = 0;
  uint64_t v10 = 0;
LABEL_33:
  uint64_t v5 = llvm::ConstantExpr::getWithOperands((llvm::ConstantExpr *)a1, (llvm::ConstantExpr **)v10, v15 - v10, *(llvm::Constant ****)a1, 0, 0);
  if (v10) {
    operator delete(v10);
  }
  return v5;
}

void sub_1CD13B118()
{
}

void sub_1CD13B178(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CD13B1B0()
{
  return "Canonicalize Aliases";
}

BOOL sub_1CD13B1C0(uint64_t a1, uint64_t a2)
{
  char v6 = 0;
  uint64_t v2 = a2 + 40;
  uint64_t v3 = *(void *)(a2 + 48);
  if (v3 == a2 + 40) {
    return 0;
  }
  do
  {
    if (v3) {
      uint64_t v4 = v3 - 48;
    }
    else {
      uint64_t v4 = 0;
    }
    sub_1CD13AF4C(v4, &v6);
    uint64_t v3 = *(void *)(v3 + 8);
  }
  while (v3 != v2);
  return v6 != 0;
}

void sub_1CD13B22C(llvm::Loop **a1)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  llvm::Loop::isLoopSimplifyForm(*a1);
}

void llvm::initializeCanonicalizeFreezeInLoopsPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFB8C0, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CD13B92C;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCFB8C0, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD13B92C(llvm *a1)
{
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v2);
  llvm::initializeLoopSimplifyPass(a1, v3);
  operator new();
}

uint64_t sub_1CD13B9DC(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCFB8B8;
  *(_DWORD *)(a1 + 24) = 1;
  *(void *)a1 = &unk_1F2647C98;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFB8C0, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CD13B92C;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCFB8C0, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

unint64_t sub_1CD13BA8C(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *(void *)(v4 + 24);
      if (v5 && *(unsigned char *)(v5 + 16) == 95)
      {
        *(void *)a3 = v5;
        uint64_t v6 = *((unsigned int *)a4 + 2);
        unint64_t v7 = *a4;
        if (v6 >= *((_DWORD *)a4 + 3))
        {
          unint64_t v10 = v7 + 32 * v6;
          if (v7 > a3 || v10 <= a3) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v8 = (_OWORD *)(v7 + 32 * *((unsigned int *)a4 + 2));
        long long v9 = *(_OWORD *)(a3 + 16);
        *uint64_t v8 = *(_OWORD *)a3;
        v8[1] = v9;
        ++*((_DWORD *)a4 + 2);
      }
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != a2);
  }
  return a3;
}

void sub_1CD13BB80()
{
}

void sub_1CD13BE14()
{
}

void sub_1CD13BE54(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD13BE8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 112;
  sub_1CB843600(a2, a2 + 112, (uint64_t)&unk_1EA61F34C);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
  sub_1CB843600(a2, v3, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&unk_1EA61F34C);
  sub_1CB843600(a2, a2, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1CB843600(a2, v3, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);

  sub_1CB843600(a2, v3, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1CD13BF64(llvm::LoopPass *a1, llvm::Loop *a2)
{
  if ((llvm::LoopPass::skipLoop(a1, a2) & 1) == 0)
  {
    uint64_t v5 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    if (v6 == v7)
    {
LABEL_6:
      uint64_t v8 = 0;
    }
    else
    {
      while (*(char **)v6 != llvm::ScalarEvolutionWrapperPass::ID)
      {
        v6 += 16;
        if (v6 == v7) {
          goto LABEL_6;
        }
      }
      uint64_t v8 = *(void *)(v6 + 8);
    }
    long long v9 = *(llvm::Loop **)((*(uint64_t (**)(uint64_t, char *))(*(void *)v8 + 96))(v8, llvm::ScalarEvolutionWrapperPass::ID)+ 32);
    unint64_t v10 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    if (v11 == v12)
    {
LABEL_11:
      uint64_t v13 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v11 != &llvm::DominatorTreeWrapperPass::ID)
      {
        v11 += 16;
        if (v11 == v12) {
          goto LABEL_11;
        }
      }
      uint64_t v13 = *(void *)(v11 + 8);
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v13 + 96))(v13, &llvm::DominatorTreeWrapperPass::ID);
    v15[0] = a2;
    v15[1] = v9;
    v15[2] = (llvm::Loop *)(v14 + 32);
    sub_1CD13B22C(v15);
  }
  return 0;
}

void llvm::CloneBasicBlock()
{
}

void llvm::CloneFunctionInto(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, unsigned char *a6)
{
  v134[4] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a1 + 112);
  llvm::Function::copyAttributesFrom((llvm::Function *)a1, (const llvm::Function *)a2);
  *(void *)(a1 + 112) = v9;
  if ((*(_WORD *)(a2 + 18) & 8) != 0) {
    operator new();
  }
  unint64_t v10 = *(void *)(a1 + 96);
  uint64_t v131 = v134;
  int v133 = 4;
  if (v10 >= 5)
  {
    unsigned int v132 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v10) {
    bzero(v134, 8 * v10);
  }
  unsigned int v132 = v10;
  uint64_t v11 = *(void *)(a2 + 112);
  uint64_t v103 = a2;
  uint64_t v12 = sub_1CB923B44((llvm::Function *)a2);
  if (v12 != v13)
  {
    uint64_t v14 = v12;
    uint64_t v15 = v13;
    do
    {
      uint64_t v115 = 2;
      char v116 = 0;
      uint64_t v117 = (int32x2_t ****)v14;
      if (v14 != -8192 && v14 != -4096 && v14) {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v115);
      }
      uint64_t v114 = &unk_1F2615EC8;
      uint64_t v118 = a3;
      uint64_t v16 = sub_1CC4CFF80(a3, &v114);
      if (v117 != (int32x2_t ****)-8192 && v117 != (int32x2_t ****)-4096 && v117 != 0)
      {
        unint64_t v18 = v115 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v115 & 0xFFFFFFFFFFFFFFF8) = v116;
        if (v116)
        {
          *char v116 = *v116 & 7 | v18;
        }
        else
        {
          int v19 = v117;
          int64_t v20 = ***v117;
          unint64_t v21 = (unint64_t)v20[303];
          if (v21 <= v18)
          {
            uint64_t v22 = v20[305].u32[0];
            if (v21 + 16 * v22 > v18)
            {
              unsigned int v23 = v22 - 1;
              LODWORD(v24) = v23 & ((v117 >> 4) ^ (v117 >> 9));
              int v25 = (int32x2_t *****)(v21 + 16 * v24);
              uint64_t v26 = *v25;
              if (v117 == *v25)
              {
LABEL_24:
                *int v25 = (int32x2_t ****)-8192;
                v20[304] = vadd_s32(v20[304], (int32x2_t)0x1FFFFFFFFLL);
                int v19 = v117;
              }
              else
              {
                int v27 = 1;
                while (v26 != (int32x2_t ****)-4096)
                {
                  int v28 = v24 + v27++;
                  uint64_t v24 = v28 & v23;
                  uint64_t v26 = *(int32x2_t *****)(v21 + 16 * v24);
                  if (v117 == v26)
                  {
                    int v25 = (int32x2_t *****)(v21 + 16 * v24);
                    goto LABEL_24;
                  }
                }
              }
              *((unsigned char *)v19 + 17) &= ~1u;
            }
          }
        }
      }
      uint64_t v29 = v16[7];
      if (v29) {
        BOOL v30 = *(unsigned char *)(v29 + 16) == 21;
      }
      else {
        BOOL v30 = 0;
      }
      if (v30)
      {
        if (v11 && (unsigned int v31 = *(_DWORD *)(v14 + 32) + 2, v31 < *(_DWORD *)(v11 + 8))) {
          uint64_t v32 = *(void *)(v11 + 40 + 8 * v31);
        }
        else {
          uint64_t v32 = 0;
        }
        v131[*(unsigned int *)(v29 + 32)] = v32;
      }
      v14 += 40;
    }
    while (v14 != v15);
  }
  if (v11 && (int v33 = *(_DWORD *)(v11 + 8)) != 0)
  {
    uint64_t v34 = *(void *)(v11 + 40);
    unint64_t v35 = (unsigned char *)a2;
    if (v33 == 1) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = *(void *)(v11 + 48);
    }
  }
  else
  {
    uint64_t v34 = 0;
    uint64_t v36 = 0;
    unint64_t v35 = (unsigned char *)a2;
  }
  *(void *)(a1 + 112) = llvm::AttributeList::get(**(uint64_t ***)a1, v34, v36, v131, v132);
  if (v35 && v35[16] == 3)
  {
    if ((*((_DWORD *)v35 + 5) & 0x7FFFFFF) == 0) {
      goto LABEL_187;
    }
  }
  else if (!v35[16] && *((unsigned char **)v35 + 9) == v35 + 72 && (v35[34] & 0x80) == 0)
  {
    goto LABEL_187;
  }
  LOBYTE(v114) = 0;
  char v130 = 0;
  if (a4 > 1)
  {
    if (a4 == 2) {
      sub_1CD145288((uint64_t)&v114);
    }
    goto LABEL_71;
  }
  sub_1CD145288((uint64_t)&v114);
  if ((v35[23] & 0x20) == 0)
  {
LABEL_71:
    __int16 v52 = 0;
LABEL_72:
    unsigned int v51 = a6;
    goto LABEL_73;
  }
  uint64_t v37 = ***(void ***)v35;
  uint64_t v105 = v35;
  int v38 = *(_DWORD *)(v37 + 2496);
  if (v38)
  {
    uint64_t v39 = *(void *)(v37 + 2480);
    int v40 = v38 - 1;
    unsigned int v41 = v40 & ((v35 >> 4) ^ (v35 >> 9));
    int v42 = (void *)(v39 + 40 * v41);
    uint64_t v43 = (unsigned char *)*v42;
    if ((unsigned char *)*v42 == v35) {
      goto LABEL_64;
    }
    unsigned int v44 = 0;
    int v45 = 1;
    while (v43 != (unsigned char *)-4096)
    {
      if (v44) {
        BOOL v46 = 0;
      }
      else {
        BOOL v46 = v43 == (unsigned char *)-8192;
      }
      if (v46) {
        unsigned int v44 = v42;
      }
      unsigned int v47 = v41 + v45++;
      unsigned int v41 = v47 & v40;
      int v42 = (void *)(v39 + 40 * v41);
      uint64_t v43 = (unsigned char *)*v42;
      if ((unsigned char *)*v42 == v35) {
        goto LABEL_64;
      }
    }
    if (v44) {
      uint64_t v99 = v44;
    }
    else {
      uint64_t v99 = v42;
    }
  }
  else
  {
    uint64_t v99 = 0;
  }
  int v42 = sub_1CC609054(v37 + 2480, (uint64_t)&v105, (uint64_t *)&v105, v99);
  uint64_t v100 = (uint64_t)v105;
  v42[3] = 0;
  v42[4] = 0;
  *int v42 = v100;
  v42[1] = v42 + 3;
  v42[2] = 0x100000000;
LABEL_64:
  uint64_t v48 = *((unsigned int *)v42 + 4);
  if (!v48) {
    goto LABEL_71;
  }
  unsigned int v49 = (llvm::DISubprogram **)(v42[1] + 8);
  uint64_t v50 = 16 * v48;
  unsigned int v51 = a6;
  __int16 v52 = 0;
  while (*((_DWORD *)v49 - 2))
  {
    v49 += 2;
    v50 -= 16;
    if (!v50) {
      goto LABEL_73;
    }
  }
  __int16 v52 = *v49;
  if (*v49)
  {
    llvm::DebugInfoFinder::processSubprogram((llvm::DebugInfoFinder *)&v114, *v49);
    goto LABEL_72;
  }
LABEL_73:
  uint64_t v101 = v52;
  if (*((unsigned char **)v35 + 10) != v35 + 72)
  {
    char v53 = 1;
    BYTE1(v109[0]) = 1;
    if (*v51)
    {
      uint64_t v105 = v51;
      char v53 = 3;
    }
    LOBYTE(v109[0]) = v53;
    llvm::CloneBasicBlock();
  }
  if (a4 < 2 && v120)
  {
    uint64_t v54 = (void **)v119;
    uint64_t v55 = (void *)(a3 + 24);
    uint64_t v56 = 8 * v120;
    do
    {
      unsigned int v57 = *v54;
      if (*v54 != v101)
      {
        uint64_t v111 = *v54;
        if (!*(unsigned char *)(a3 + 48))
        {
          *uint64_t v55 = 0;
          *(void *)(a3 + 32) = 0;
          *(_DWORD *)(a3 + 40) = 0;
          *(unsigned char *)(a3 + 48) = 1;
        }
        uint64_t v110 = v57;
        sub_1CD8796A0((uint64_t)&v105, (_DWORD *)(a3 + 24), &v110, (unsigned __int8 **)&v111);
      }
      ++v54;
      v56 -= 8;
    }
    while (v56);
    if (v115)
    {
      int v58 = (void **)v114;
      uint64_t v59 = 8 * v115;
      do
      {
        uint64_t v60 = *v58;
        uint64_t v111 = *v58;
        if (!*(unsigned char *)(a3 + 48))
        {
          *uint64_t v55 = 0;
          *(void *)(a3 + 32) = 0;
          *(_DWORD *)(a3 + 40) = 0;
          *(unsigned char *)(a3 + 48) = 1;
        }
        uint64_t v110 = v60;
        sub_1CD8796A0((uint64_t)&v105, (_DWORD *)(a3 + 24), &v110, (unsigned __int8 **)&v111);
        ++v58;
        v59 -= 8;
      }
      while (v59);
    }
    if (v125)
    {
      uint64_t v61 = (void **)v124;
      uint64_t v62 = 8 * v125;
      do
      {
        uint64_t v63 = *v61;
        uint64_t v111 = *v61;
        if (!*(unsigned char *)(a3 + 48))
        {
          *uint64_t v55 = 0;
          *(void *)(a3 + 32) = 0;
          *(_DWORD *)(a3 + 40) = 0;
          *(unsigned char *)(a3 + 48) = 1;
        }
        uint64_t v110 = v63;
        sub_1CD8796A0((uint64_t)&v105, (_DWORD *)(a3 + 24), &v110, (unsigned __int8 **)&v111);
        ++v61;
        v62 -= 8;
      }
      while (v62);
    }
  }
  uint64_t v111 = v113;
  uint64_t v112 = 0x100000000;
  llvm::Value::getAllMetadata(v35, (uint64_t)&v111);
  if (v112) {
    operator new();
  }
  uint64_t v64 = *(void *)(v103 + 80);
  if (v64) {
    uint64_t v65 = (int32x2_t ****)(v64 - 24);
  }
  else {
    uint64_t v65 = 0;
  }
  unint64_t v106 = 2;
  uint64_t v107 = 0;
  int v108 = v65;
  if (v65 != (int32x2_t ****)-8192 && v65 != (int32x2_t ****)-4096 && v65) {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v106);
  }
  uint64_t v105 = &unk_1F2615EC8;
  v109[0] = a3;
  uint64_t v66 = sub_1CC4CFF80(a3, &v105);
  if (v108 != (int32x2_t ****)-8192 && v108 != (int32x2_t ****)-4096 && v108)
  {
    unint64_t v67 = v106 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v106 & 0xFFFFFFFFFFFFFFF8) = v107;
    if (v107)
    {
      *(void *)uint64_t v107 = *(void *)v107 & 7 | v67;
    }
    else
    {
      int v68 = v108;
      uint64_t v69 = ***v108;
      unint64_t v70 = (unint64_t)v69[303];
      if (v70 <= v67)
      {
        uint64_t v71 = v69[305].u32[0];
        if (v70 + 16 * v71 > v67)
        {
          unsigned int v72 = v71 - 1;
          LODWORD(v73) = v72 & ((v108 >> 4) ^ (v108 >> 9));
          uint64_t v74 = (int32x2_t *****)(v70 + 16 * v73);
          int v75 = *v74;
          if (v108 == *v74)
          {
LABEL_117:
            *uint64_t v74 = (int32x2_t ****)-8192;
            v69[304] = vadd_s32(v69[304], (int32x2_t)0x1FFFFFFFFLL);
            int v68 = v108;
          }
          else
          {
            int v76 = 1;
            while (v75 != (int32x2_t ****)-4096)
            {
              int v77 = v73 + v76++;
              uint64_t v73 = v77 & v72;
              int v75 = *(int32x2_t *****)(v70 + 16 * v73);
              if (v108 == v75)
              {
                uint64_t v74 = (int32x2_t *****)(v70 + 16 * v73);
                goto LABEL_117;
              }
            }
          }
          *((unsigned char *)v68 + 17) &= ~1u;
        }
      }
    }
  }
  for (uint64_t i = v66[7] + 24; i != a1 + 72; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v79 = i - 24;
    if (!i) {
      uint64_t v79 = 0;
    }
    if (*(void *)(v79 + 48) != v79 + 40) {
      operator new();
    }
  }
  if (a4 == 2)
  {
    uint64_t inserted = llvm::Module::getOrInsertNamedMetadata(*(_DWORD **)(a1 + 40), "llvm.dbg.cu", 0xBuLL);
    uint64_t v105 = v109;
    unint64_t v106 = (unint64_t)v109;
    uint64_t v107 = 8;
    LODWORD(v108) = 0;
    uint64_t v81 = *(unsigned int *)(*(void *)(inserted + 48) + 8);
    if (v81)
    {
      uint64_t v82 = 0;
      unsigned int v83 = 8;
      while (1)
      {
        uint64_t v84 = *(void *)(**(void **)(inserted + 48) + 8 * v82);
        unint64_t v85 = v106;
        uint64_t v86 = HIDWORD(v107);
        if ((void *)v106 != v105) {
          break;
        }
        if (HIDWORD(v107))
        {
          int v87 = 0;
          uint64_t v88 = 8 * HIDWORD(v107);
          uint64_t v89 = (void *)v106;
          while (*v89 != v84)
          {
            if (*v89 == -2) {
              int v87 = v89;
            }
            ++v89;
            v88 -= 8;
            if (!v88)
            {
              if (!v87) {
                goto LABEL_137;
              }
              *int v87 = v84;
              LODWORD(v108) = v108 - 1;
              goto LABEL_160;
            }
          }
          goto LABEL_160;
        }
LABEL_137:
        if (HIDWORD(v107) >= v83) {
          break;
        }
        ++HIDWORD(v107);
        *(void *)(v106 + 8 * v86) = v84;
LABEL_160:
        if (++v82 == v81) {
          goto LABEL_168;
        }
      }
      if (3 * v83 <= 4 * (HIDWORD(v107) - (int)v108))
      {
        if (v83 >= 0x40) {
          v83 *= 2;
        }
        else {
          unsigned int v83 = 128;
        }
      }
      else if (v83 - HIDWORD(v107) >= v83 >> 3)
      {
        goto LABEL_141;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v105, v83);
      unsigned int v83 = v107;
      unint64_t v85 = v106;
LABEL_141:
      unsigned int v90 = v83 - 1;
      unsigned int v91 = (v83 - 1) & ((v84 >> 4) ^ (v84 >> 9));
      uint64_t v92 = (void *)(v85 + 8 * v91);
      uint64_t v93 = *v92;
      if (*v92 == -1)
      {
        uint64_t v94 = 0;
LABEL_153:
        if (v94) {
          int v98 = v94;
        }
        else {
          int v98 = v92;
        }
        if (*v98 != v84)
        {
          if (*v98 == -2) {
            LODWORD(v108) = v108 - 1;
          }
          else {
            ++HIDWORD(v107);
          }
          *int v98 = v84;
        }
      }
      else
      {
        uint64_t v94 = 0;
        int v95 = 1;
        while (v93 != v84)
        {
          if (v94) {
            BOOL v96 = 0;
          }
          else {
            BOOL v96 = v93 == -2;
          }
          if (v96) {
            uint64_t v94 = v92;
          }
          unsigned int v97 = v91 + v95++;
          unsigned int v91 = v97 & v90;
          uint64_t v92 = (void *)(v85 + 8 * (v97 & v90));
          uint64_t v93 = *v92;
          if (*v92 == -1) {
            goto LABEL_153;
          }
        }
      }
      goto LABEL_160;
    }
LABEL_168:
    if (v115) {
      operator new();
    }
    if ((void *)v106 != v105) {
      free((void *)v106);
    }
  }
  if (v111 != v113) {
    free(v111);
  }
  if (v130)
  {
    if (v129 != (void *)v128[8]) {
      free(v129);
    }
    if (v127 != v128) {
      free(v127);
    }
    if (v124 != &v126) {
      free(v124);
    }
    if (v122 != &v123) {
      free(v122);
    }
    if (v119 != &v121) {
      free(v119);
    }
    if (v114 != &v116) {
      free(v114);
    }
  }
LABEL_187:
  if (v131 != v134) {
    free(v131);
  }
}

char *llvm::CloneFunction(llvm::Function *this, uint64_t a2)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  if ((*((_WORD *)this + 9) & 1) == 0)
  {
    uint64_t v4 = (void *)*((void *)this + 11);
LABEL_3:
    uint64_t v5 = v4;
    goto LABEL_4;
  }
  llvm::Function::BuildLazyArguments(this);
  uint64_t v4 = (void *)*((void *)this + 11);
  if ((*((_WORD *)this + 9) & 1) == 0) {
    goto LABEL_3;
  }
  llvm::Function::BuildLazyArguments(this);
  uint64_t v5 = (void *)*((void *)this + 11);
LABEL_4:
  uint64_t v6 = &v5[5 * *((void *)this + 12)];
  if (v4 != v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = *(unsigned int *)(a2 + 16);
      if (v10)
      {
        uint64_t v11 = *(void *)a2;
        uint64_t v12 = (v10 - 1) & ((v4 >> 4) ^ (v4 >> 9));
        uint64_t v13 = *(void *)a2 + (v12 << 6);
        uint64_t v14 = *(void **)(v13 + 24);
        if (v4 == v14)
        {
LABEL_11:
          if (v13 != v11 + (v10 << 6)) {
            goto LABEL_14;
          }
        }
        else
        {
          int v15 = 1;
          while (v14 != (void *)-4096)
          {
            int v16 = v12 + v15++;
            uint64_t v12 = v16 & (v10 - 1);
            uint64_t v13 = v11 + (v12 << 6);
            uint64_t v14 = *(void **)(v13 + 24);
            if (v4 == v14) {
              goto LABEL_11;
            }
          }
        }
      }
      uint64_t v17 = *v4;
      if (v8 >= v7)
      {
        uint64_t v19 = (v8 - v9) >> 3;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 61) {
          abort();
        }
        if ((v7 - v9) >> 2 > v20) {
          unint64_t v20 = (v7 - v9) >> 2;
        }
        if ((unint64_t)(v7 - v9) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v21)
        {
          if (v21 >> 61) {
            sub_1CB833614();
          }
          uint64_t v22 = (char *)operator new(8 * v21);
        }
        else
        {
          uint64_t v22 = 0;
        }
        unsigned int v23 = &v22[8 * v19];
        *(void *)unsigned int v23 = v17;
        unint64_t v18 = v23 + 8;
        if (v8 != v9)
        {
          do
          {
            uint64_t v24 = *((void *)v8 - 1);
            v8 -= 8;
            *((void *)v23 - 1) = v24;
            v23 -= 8;
          }
          while (v8 != v9);
          uint64_t v8 = v9;
        }
        uint64_t v9 = v23;
        uint64_t v7 = &v22[8 * v21];
        if (v8) {
          operator delete(v8);
        }
        goto LABEL_15;
      }
      *(void *)uint64_t v8 = v17;
      v8 += 8;
LABEL_14:
      unint64_t v18 = v8;
LABEL_15:
      v4 += 5;
      uint64_t v8 = v18;
      if (v4 == v6) {
        goto LABEL_35;
      }
    }
  }
  uint64_t v9 = 0;
  unint64_t v18 = 0;
LABEL_35:
  int v25 = (llvm::PointerType *)llvm::FunctionType::get(**(uint64_t ****)(*((void *)this + 3) + 16), (uint64_t)v9, (v18 - v9) >> 3, *(_DWORD *)(*((void *)this + 3) + 8) > 0xFFu);
  char v26 = *((_DWORD *)this + 8) & 0xF;
  int v27 = (llvm::Type *)(*(_DWORD *)(*(void *)this + 8) >> 8);
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v28 = ***(void ***)this;
    uint64_t v29 = *(void *)(v28 + 152);
    uint64_t v30 = *(unsigned int *)(v28 + 168);
    if (v30)
    {
      LODWORD(v31) = (v30 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v32 = v29 + 16 * v31;
      int v33 = *(llvm::Function **)v32;
      if (*(llvm::Function **)v32 == this)
      {
LABEL_42:
        uint64_t v36 = *(void **)(v32 + 8);
        uint64_t v39 = *v36;
        uint64_t v37 = (char *)(v36 + 2);
        uint64_t v38 = v39;
        goto LABEL_43;
      }
      int v34 = 1;
      while (v33 != (llvm::Function *)-4096)
      {
        int v35 = v31 + v34++;
        uint64_t v31 = v35 & (v30 - 1);
        int v33 = *(llvm::Function **)(v29 + 16 * v31);
        if (v33 == this)
        {
          uint64_t v32 = v29 + 16 * v31;
          goto LABEL_42;
        }
      }
    }
    uint64_t v32 = v29 + 16 * v30;
    goto LABEL_42;
  }
  uint64_t v38 = 0;
  uint64_t v37 = &byte_1CFBCE98E;
LABEL_43:
  LOWORD(v100) = 261;
  BOOL v96 = v37;
  uint64_t v97 = v38;
  unint64_t v40 = *((void *)this + 5);
  unsigned int v41 = (char *)operator new(0x80uLL);
  *((_DWORD *)v41 + 7) = *((_DWORD *)v41 + 7) & 0x38000000 | 0x40000000;
  *(void *)unsigned int v41 = 0;
  llvm::Function::Function((unint64_t *)v41 + 1, v25, v26, v27, (const char **)&v96, v40);
  if (*((_WORD *)v41 + 13)) {
    llvm::Function::BuildLazyArguments((llvm::Function *)(v41 + 8));
  }
  int v42 = (llvm::Value *)*((void *)v41 + 12);
  if ((*((_WORD *)this + 9) & 1) == 0)
  {
    uint64_t v43 = (uint64_t ***)*((void *)this + 11);
LABEL_47:
    unsigned int v44 = v43;
    goto LABEL_48;
  }
  llvm::Function::BuildLazyArguments(this);
  uint64_t v43 = (uint64_t ***)*((void *)this + 11);
  if ((*((_WORD *)this + 9) & 1) == 0) {
    goto LABEL_47;
  }
  llvm::Function::BuildLazyArguments(this);
  unsigned int v44 = (uint64_t ***)*((void *)this + 11);
LABEL_48:
  int v45 = &v44[5 * *((void *)this + 12)];
  if (v43 != v45)
  {
    while (1)
    {
      uint64_t v46 = *(unsigned int *)(a2 + 16);
      unsigned int v47 = v43 >> 4;
      if (!v46) {
        goto LABEL_55;
      }
      uint64_t v48 = *(void *)a2;
      uint64_t v49 = (v46 - 1) & (v47 ^ (v43 >> 9));
      uint64_t v50 = *(void *)a2 + (v49 << 6);
      unsigned int v51 = *(uint64_t ****)(v50 + 24);
      if (v43 != v51) {
        break;
      }
LABEL_54:
      if (v50 == v48 + (v46 << 6)) {
        goto LABEL_55;
      }
      uint64_t v79 = v42;
LABEL_90:
      v43 += 5;
      int v42 = v79;
      if (v43 == v45) {
        goto LABEL_96;
      }
    }
    int v52 = 1;
    while (v51 != (uint64_t ***)-4096)
    {
      int v53 = v49 + v52++;
      uint64_t v49 = v53 & (v46 - 1);
      uint64_t v50 = v48 + (v49 << 6);
      unsigned int v51 = *(uint64_t ****)(v50 + 24);
      if (v43 == v51) {
        goto LABEL_54;
      }
    }
LABEL_55:
    if ((*((unsigned char *)v43 + 23) & 0x10) == 0)
    {
      uint64_t v63 = 0;
      uint64_t v64 = &byte_1CFBCE98E;
      goto LABEL_63;
    }
    uint64_t v54 = ***v43;
    uint64_t v55 = *(void *)(v54 + 152);
    uint64_t v56 = *(unsigned int *)(v54 + 168);
    if (v56)
    {
      LODWORD(v57) = (v56 - 1) & (v47 ^ (v43 >> 9));
      int v58 = (uint64_t ****)(v55 + 16 * v57);
      uint64_t v59 = *v58;
      if (*v58 == v43)
      {
LABEL_62:
        uint64_t v62 = v58[1];
        uint64_t v65 = (uint64_t)*v62;
        uint64_t v64 = (char *)(v62 + 2);
        uint64_t v63 = v65;
LABEL_63:
        LOWORD(v100) = 261;
        BOOL v96 = v64;
        uint64_t v97 = v63;
        llvm::Value::setNameImpl(v42, (const char **)&v96);
        if (!v42 || *((unsigned char *)v42 + 16)) {
          goto LABEL_65;
        }
        if ((*((unsigned char *)v42 + 23) & 0x10) == 0) {
          goto LABEL_121;
        }
        uint64_t v82 = ***(void ***)v42;
        uint64_t v83 = *(void *)(v82 + 152);
        uint64_t v84 = *(unsigned int *)(v82 + 168);
        if (v84)
        {
          LODWORD(v85) = (v84 - 1) & ((v42 >> 4) ^ (v42 >> 9));
          uint64_t v86 = (llvm::Value **)(v83 + 16 * v85);
          int v87 = *v86;
          if (*v86 == v42)
          {
LABEL_113:
            unsigned int v90 = v86[1];
            unint64_t v93 = *(void *)v90;
            unsigned int v91 = (char *)v90 + 16;
            unint64_t v92 = v93;
            if (v93 >= 5 && *(_DWORD *)v91 == *(_DWORD *)"llvm." && v91[4] == aLlvm_1[4])
            {
              *((_DWORD *)v42 + 8) |= 0x2000u;
              int v95 = llvm::Function::lookupIntrinsicID(v91, v92);
LABEL_120:
              *((_DWORD *)v42 + 9) = v95;
LABEL_65:
              uint64_t v97 = 2;
              int v98 = 0;
              uint64_t v99 = (int32x2_t ****)v43;
              if (v43 != (uint64_t ***)-8192 && v43 != (uint64_t ***)-4096 && v43) {
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v97);
              }
              BOOL v96 = &unk_1F2615EC8;
              uint64_t v100 = a2;
              uint64_t v66 = sub_1CC4CFF80(a2, &v96);
              unint64_t v67 = v66;
              if (v99 != (int32x2_t ****)-8192 && v99 != (int32x2_t ****)-4096 && v99)
              {
                unint64_t v68 = v97 & 0xFFFFFFFFFFFFFFF8;
                *(void *)(v97 & 0xFFFFFFFFFFFFFFF8) = v98;
                if (v98)
                {
                  *int v98 = *v98 & 7 | v68;
                }
                else
                {
                  uint64_t v69 = v99;
                  unint64_t v70 = ***v99;
                  unint64_t v71 = (unint64_t)v70[303];
                  if (v71 <= v68)
                  {
                    uint64_t v72 = v70[305].u32[0];
                    if (v71 + 16 * v72 > v68)
                    {
                      unsigned int v73 = v72 - 1;
                      LODWORD(v74) = v73 & ((v99 >> 4) ^ (v99 >> 9));
                      int v75 = (int32x2_t *****)(v71 + 16 * v74);
                      int v76 = *v75;
                      if (v99 == *v75)
                      {
LABEL_80:
                        char *v75 = (int32x2_t ****)-8192;
                        v70[304] = vadd_s32(v70[304], (int32x2_t)0x1FFFFFFFFLL);
                        uint64_t v69 = v99;
                      }
                      else
                      {
                        int v77 = 1;
                        while (v76 != (int32x2_t ****)-4096)
                        {
                          int v78 = v74 + v77++;
                          uint64_t v74 = v78 & v73;
                          int v76 = *(int32x2_t *****)(v71 + 16 * v74);
                          if (v99 == v76)
                          {
                            int v75 = (int32x2_t *****)(v71 + 16 * v74);
                            goto LABEL_80;
                          }
                        }
                      }
                      *((unsigned char *)v69 + 17) &= ~1u;
                    }
                  }
                }
              }
              uint64_t v79 = (llvm::Value *)((char *)v42 + 40);
              uint64_t v80 = (llvm::Value *)v66[7];
              if (v80 != v42)
              {
                if (v80 && v80 != (llvm::Value *)-8192 && v80 != (llvm::Value *)-4096) {
                  llvm::ValueHandleBase::RemoveFromUseList(v66 + 5);
                }
                v67[7] = v42;
                if (v42 != (llvm::Value *)-8192 && v42 != (llvm::Value *)-4096 && v42) {
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v67 + 5));
                }
              }
              goto LABEL_90;
            }
LABEL_121:
            int v95 = 0;
            *((_DWORD *)v42 + 8) &= ~0x2000u;
            goto LABEL_120;
          }
          int v88 = 1;
          while (v87 != (llvm::Value *)-4096)
          {
            int v89 = v85 + v88++;
            uint64_t v85 = v89 & (v84 - 1);
            int v87 = *(llvm::Value **)(v83 + 16 * v85);
            if (v87 == v42)
            {
              uint64_t v86 = (llvm::Value **)(v83 + 16 * v85);
              goto LABEL_113;
            }
          }
        }
        uint64_t v86 = (llvm::Value **)(v83 + 16 * v84);
        goto LABEL_113;
      }
      int v60 = 1;
      while (v59 != (uint64_t ***)-4096)
      {
        int v61 = v57 + v60++;
        uint64_t v57 = v61 & (v56 - 1);
        uint64_t v59 = *(uint64_t ****)(v55 + 16 * v57);
        if (v59 == v43)
        {
          int v58 = (uint64_t ****)(v55 + 16 * v57);
          goto LABEL_62;
        }
      }
    }
    int v58 = (uint64_t ****)(v55 + 16 * v56);
    goto LABEL_62;
  }
LABEL_96:
  BOOL v96 = &v98;
  uint64_t v97 = 0x800000000;
  llvm::CloneFunctionInto((uint64_t)(v41 + 8), (uint64_t)this, a2, 0, (uint64_t)&v96, "");
  if (v96 != &v98) {
    free(v96);
  }
  if (v9) {
    operator delete(v9);
  }
  return v41 + 8;
}

void llvm::CloneAndPruneIntoFromInst(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a4;
  v413[8] = *MEMORY[0x1E4F143B8];
  v385[0] = a1;
  v385[1] = a2;
  v385[2] = a4;
  char v386 = a5;
  uint64_t v387 = a7;
  uint64_t v388 = a8;
  uint64_t v11 = a1[14];
  if (v11) {
    LODWORD(v11) = (*(unsigned __int8 *)(v11 + 19) >> 5) & 1;
  }
  char v389 = v11;
  if (a3) {
    uint64_t v12 = *(int32x2_t *****)(a3 + 40);
  }
  else {
    uint64_t v12 = (int32x2_t ****)(*(void *)(a2 + 80) - 24);
  }
  sub_1CD140890((uint64_t)v385, v12);
  v376 = v12;
  v408 = v410;
  uint64_t v409 = 0x1000000000;
  uint64_t v13 = *(void *)(a2 + 80);
  if (v13 == a2 + 72) {
    goto LABEL_322;
  }
  uint64_t v14 = a1 + 9;
  uint64_t v15 = a5 ^ 1u;
  do
  {
    if (v13) {
      uint64_t v16 = v13 - 24;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = *(void *)v9;
    uint64_t v18 = *(unsigned int *)(v9 + 16);
    if (v18)
    {
      uint64_t v19 = ((v16 >> 4) ^ (v16 >> 9)) & (v18 - 1);
      unint64_t v20 = (void *)(v17 + (v19 << 6));
      uint64_t v21 = v20[3];
      if (v16 == v21) {
        goto LABEL_18;
      }
      int v22 = 1;
      while (v21 != -4096)
      {
        int v23 = v19 + v22++;
        uint64_t v19 = v23 & (v18 - 1);
        unint64_t v20 = (void *)(v17 + (v19 << 6));
        uint64_t v21 = v20[3];
        if (v16 == v21) {
          goto LABEL_18;
        }
      }
    }
    unint64_t v20 = (void *)(v17 + (v18 << 6));
LABEL_18:
    v395 = (void *)6;
    if (v20 == (void *)(v17 + (v18 << 6)))
    {
      unint64_t v24 = 0;
      int v25 = 0;
      unint64_t v396 = 0;
      uint64_t v397 = 0;
    }
    else
    {
      unint64_t v24 = 0;
      int v25 = (llvm::Value *)v20[7];
      unint64_t v396 = 0;
      uint64_t v397 = (uint64_t)v25;
      if (v25 != (llvm::Value *)-8192)
      {
        BOOL v26 = v25 == (llvm::Value *)-4096 || v25 == 0;
        if (!v26)
        {
          unint64_t v27 = v20[5] & 0xFFFFFFFFFFFFFFF8;
          unint64_t v396 = *(void *)v27;
          *(void *)unint64_t v27 = &v395;
          v395 = (void *)(v27 | 6);
          unint64_t v24 = v396;
          if (v396) {
            *(void *)unint64_t v396 = *(void *)v396 & 7 | (unint64_t)&v396;
          }
          int v25 = (llvm::Value *)v397;
        }
      }
    }
    if (v25 != (llvm::Value *)-8192 && v25 != (llvm::Value *)-4096 && v25 != 0)
    {
      unint64_t v46 = (unint64_t)v395 & 0xFFFFFFFFFFFFFFF8;
      *(void *)((unint64_t)v395 & 0xFFFFFFFFFFFFFFF8) = v24;
      if (v396)
      {
        *(void *)unint64_t v396 = *(void *)v396 & 7 | v46;
      }
      else
      {
        uint64_t v47 = v397;
        uint64_t v48 = ***(int32x2_t ****)v397;
        unint64_t v49 = (unint64_t)v48[303];
        if (v49 <= v46)
        {
          uint64_t v50 = v48[305].u32[0];
          if (v49 + 16 * v50 > v46)
          {
            unsigned int v51 = v50 - 1;
            LODWORD(v52) = v51 & ((v397 >> 4) ^ (v397 >> 9));
            int v53 = (uint64_t *)(v49 + 16 * v52);
            uint64_t v54 = *v53;
            if (v397 == *v53)
            {
LABEL_75:
              *int v53 = -8192;
              v48[304] = vadd_s32(v48[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v47 = v397;
            }
            else
            {
              int v55 = 1;
              while (v54 != -4096)
              {
                int v56 = v52 + v55++;
                uint64_t v52 = v56 & v51;
                uint64_t v54 = *(void *)(v49 + 16 * v52);
                if (v397 == v54)
                {
                  int v53 = (uint64_t *)(v49 + 16 * v52);
                  goto LABEL_75;
                }
              }
            }
            *(unsigned char *)(v47 + 17) &= ~1u;
          }
        }
      }
    }
    if (v25)
    {
      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v14, v25);
      uint64_t v29 = *v14;
      *((void *)v25 + 3) = *v14;
      *((void *)v25 + 4) = v14;
      *(void *)(v29 + 8) = (char *)v25 + 24;
      *uint64_t v14 = (uint64_t)v25 + 24;
      if (*(void *)(v16 + 40) != v16 + 40)
      {
        for (uint64_t i = *(void *)(v16 + 48); ; uint64_t i = *(void *)(v31 + 32))
        {
          uint64_t v31 = i - 24;
          uint64_t v32 = i ? i - 24 : 0;
          if (!i || *(unsigned char *)(v32 + 16) != 83) {
            break;
          }
          unint64_t v396 = 2;
          uint64_t v397 = 0;
          v398 = (int32x2_t ****)(i - 24);
          if (i != -8168 && i != -4072 && i != 24) {
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v396);
          }
          v395 = &unk_1F2615EC8;
          v399[0] = v9;
          int v33 = sub_1CC4CFF80(v9, &v395);
          if (v398 != (int32x2_t ****)-8192 && v398 != (int32x2_t ****)-4096 && v398 != 0)
          {
            unint64_t v35 = v396 & 0xFFFFFFFFFFFFFFF8;
            *(void *)(v396 & 0xFFFFFFFFFFFFFFF8) = v397;
            if (v397)
            {
              *(void *)uint64_t v397 = *(void *)v397 & 7 | v35;
            }
            else
            {
              uint64_t v36 = v398;
              uint64_t v37 = ***v398;
              unint64_t v38 = (unint64_t)v37[303];
              if (v38 <= v35)
              {
                uint64_t v39 = v37[305].u32[0];
                if (v38 + 16 * v39 > v35)
                {
                  unsigned int v40 = v39 - 1;
                  LODWORD(v41) = v40 & ((v398 >> 4) ^ (v398 >> 9));
                  int v42 = (int32x2_t *****)(v38 + 16 * v41);
                  uint64_t v43 = *v42;
                  if (v398 != *v42)
                  {
                    int v44 = 1;
                    do
                    {
                      if (v43 == (int32x2_t ****)-4096) {
                        goto LABEL_60;
                      }
                      int v45 = v41 + v44++;
                      uint64_t v41 = v45 & v40;
                      uint64_t v43 = *(int32x2_t *****)(v38 + 16 * v41);
                    }
                    while (v398 != v43);
                    int v42 = (int32x2_t *****)(v38 + 16 * v41);
                  }
                  *int v42 = (int32x2_t ****)-8192;
                  v37[304] = vadd_s32(v37[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v36 = v398;
LABEL_60:
                  *((unsigned char *)v36 + 17) &= ~1u;
                }
              }
            }
          }
          if (*(unsigned char *)(v33[7] + 16) != 83) {
            break;
          }
          if (v409 >= (unint64_t)HIDWORD(v409)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v408 + v409) = v31;
          LODWORD(v409) = v409 + 1;
        }
      }
      operator new();
    }
    uint64_t v13 = *(void *)(v13 + 8);
  }
  while (v13 != a2 + 72);
  int v379 = v409;
  if (v409)
  {
    uint64_t v57 = 0;
    uint64_t v381 = v9;
    while (1)
    {
      uint64_t v58 = *((void *)v408 + v57);
      int v59 = *(_DWORD *)(v58 + 20);
      int v60 = *(int32x2_t *****)(v58 + 40);
      unint64_t v396 = 2;
      uint64_t v397 = 0;
      v398 = v60;
      v382 = v60;
      if (v60 != (int32x2_t ****)-8192 && v60 != (int32x2_t ****)-4096 && v60 != 0) {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v396);
      }
      v395 = &unk_1F2615EC8;
      v399[0] = v9;
      uint64_t v62 = sub_1CC4CFF80(v9, &v395);
      if (v398 != (int32x2_t ****)-8192 && v398 != (int32x2_t ****)-4096 && v398 != 0)
      {
        unint64_t v65 = v396 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v396 & 0xFFFFFFFFFFFFFFF8) = v397;
        if (v397)
        {
          *(void *)uint64_t v397 = *(void *)v397 & 7 | v65;
        }
        else
        {
          uint64_t v66 = v398;
          unint64_t v67 = ***v398;
          unint64_t v68 = (unint64_t)v67[303];
          if (v68 <= v65)
          {
            uint64_t v69 = v67[305].u32[0];
            if (v68 + 16 * v69 > v65)
            {
              unsigned int v70 = v69 - 1;
              LODWORD(v71) = v70 & ((v398 >> 4) ^ (v398 >> 9));
              uint64_t v72 = (int32x2_t *****)(v68 + 16 * v71);
              unsigned int v73 = *v72;
              if (v398 == *v72)
              {
LABEL_101:
                *uint64_t v72 = (int32x2_t ****)-8192;
                v67[304] = vadd_s32(v67[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v66 = v398;
              }
              else
              {
                int v74 = 1;
                while (v73 != (int32x2_t ****)-4096)
                {
                  int v75 = v71 + v74++;
                  uint64_t v71 = v75 & v70;
                  unsigned int v73 = *(int32x2_t *****)(v68 + 16 * v71);
                  if (v398 == v73)
                  {
                    uint64_t v72 = (int32x2_t *****)(v68 + 16 * v71);
                    goto LABEL_101;
                  }
                }
              }
              *((unsigned char *)v66 + 17) &= ~1u;
            }
          }
        }
      }
      uint64_t v380 = v62[7];
      if (v409 != v57) {
        break;
      }
LABEL_171:
      uint64_t v118 = *(void *)(v380 + 48);
      if (v118) {
        uint64_t v119 = v118 - 24;
      }
      else {
        uint64_t v119 = 0;
      }
      uint64_t v120 = *(void *)(v380 + 8);
      if (v120)
      {
        while (1)
        {
          uint64_t v121 = *(void *)(v120 + 24);
          unsigned int v122 = *(unsigned __int8 *)(v121 + 16);
          BOOL v123 = v121 && v122 >= 0x1C;
          BOOL v124 = !v123 || v122 - 29 > 0xA;
          if (!v124) {
            break;
          }
          uint64_t v120 = *(void *)(v120 + 8);
          if (!v120) {
            goto LABEL_184;
          }
        }
        int v190 = 0;
LABEL_291:
        ++v190;
        while (1)
        {
          uint64_t v120 = *(void *)(v120 + 8);
          if (!v120) {
            break;
          }
          uint64_t v191 = *(void *)(v120 + 24);
          unsigned int v192 = *(unsigned __int8 *)(v191 + 16);
          if (v191) {
            BOOL v193 = v192 >= 0x1C;
          }
          else {
            BOOL v193 = 0;
          }
          if (v193 && v192 - 29 < 0xB) {
            goto LABEL_291;
          }
        }
      }
      else
      {
LABEL_184:
        int v190 = 0;
      }
      if (v190 != (*(_DWORD *)(v119 + 20) & 0x7FFFFFF))
      {
        unint64_t v396 = 0;
        uint64_t v397 = 0;
        v395 = &v396;
        uint64_t v125 = *(void *)(v380 + 8);
        if (v125)
        {
          while (1)
          {
            uint64_t v126 = *(void *)(v125 + 24);
            unsigned int v127 = *(unsigned __int8 *)(v126 + 16);
            BOOL v128 = v126 && v127 >= 0x1C;
            if (v128 && v127 - 29 <= 0xA) {
              break;
            }
            uint64_t v125 = *(void *)(v125 + 8);
            if (!v125) {
              goto LABEL_196;
            }
          }
          int v195 = 0;
LABEL_301:
          unint64_t v196 = *(void *)(v126 + 40);
          int v197 = &v396;
          int v198 = &v396;
          if (v195)
          {
            do
            {
              while (1)
              {
                int v198 = v195;
                unint64_t v199 = v195[4];
                if (v199 <= v196) {
                  break;
                }
                int v195 = (unint64_t *)*v195;
                int v197 = v198;
                if (!*v198) {
                  goto LABEL_309;
                }
              }
              if (v199 >= v196) {
                goto LABEL_312;
              }
              int v195 = (unint64_t *)v195[1];
            }
            while (v195);
            int v197 = v198 + 1;
          }
LABEL_309:
          int v200 = v198;
          int v198 = (unint64_t *)operator new(0x30uLL);
          v198[4] = v196;
          *((_DWORD *)v198 + 10) = 0;
          *int v198 = 0;
          v198[1] = 0;
          v198[2] = (unint64_t)v200;
          *int v197 = (unint64_t)v198;
          int v201 = (uint64_t *)v198;
          if (*(void *)v395)
          {
            v395 = *(void **)v395;
            int v201 = (uint64_t *)*v197;
          }
          sub_1CB8358B8((uint64_t *)v396, v201);
          ++v397;
LABEL_312:
          --*((_DWORD *)v198 + 10);
          while (1)
          {
            uint64_t v125 = *(void *)(v125 + 8);
            if (!v125) {
              break;
            }
            uint64_t v126 = *(void *)(v125 + 24);
            unsigned int v202 = *(unsigned __int8 *)(v126 + 16);
            if (v126) {
              BOOL v203 = v202 >= 0x1C;
            }
            else {
              BOOL v203 = 0;
            }
            if (v203 && v202 - 29 <= 0xA)
            {
              int v195 = (unint64_t *)v396;
              goto LABEL_301;
            }
          }
        }
LABEL_196:
        int v130 = *(_DWORD *)(v119 + 20);
        uint64_t v131 = v130 & 0x7FFFFFF;
        if ((v130 & 0x7FFFFFF) != 0)
        {
          uint64_t v132 = 0;
          do
          {
            int v133 = *(_DWORD *)(v119 + 20);
            if ((v133 & 0x40000000) != 0) {
              uint64_t v134 = *(void *)(v119 - 8);
            }
            else {
              uint64_t v134 = v119 - 32 * (v133 & 0x7FFFFFF);
            }
            unint64_t v135 = *(void *)(v134 + 32 * *(unsigned int *)(v119 + 60) + 8 * v132);
            unint64_t v136 = v396;
            uint64_t v137 = &v396;
            int v138 = &v396;
            if (v396)
            {
              do
              {
                while (1)
                {
                  int v138 = (unint64_t *)v136;
                  unint64_t v139 = *(void *)(v136 + 32);
                  if (v139 <= v135) {
                    break;
                  }
                  unint64_t v136 = *v138;
                  uint64_t v137 = v138;
                  if (!*v138) {
                    goto LABEL_207;
                  }
                }
                if (v139 >= v135) {
                  goto LABEL_210;
                }
                unint64_t v136 = v138[1];
              }
              while (v136);
              uint64_t v137 = v138 + 1;
            }
LABEL_207:
            uint64_t v140 = v119;
            uint64_t v141 = v131;
            uint64_t v142 = v57;
            uint64_t v143 = v15;
            uint64_t v144 = v138;
            int v138 = (unint64_t *)operator new(0x30uLL);
            v138[4] = v135;
            *((_DWORD *)v138 + 10) = 0;
            *int v138 = 0;
            v138[1] = 0;
            v138[2] = (unint64_t)v144;
            unint64_t *v137 = (unint64_t)v138;
            uint64_t v145 = (uint64_t *)v138;
            if (*(void *)v395)
            {
              v395 = *(void **)v395;
              uint64_t v145 = (uint64_t *)*v137;
            }
            sub_1CB8358B8((uint64_t *)v396, v145);
            ++v397;
            uint64_t v15 = v143;
            uint64_t v57 = v142;
            uint64_t v131 = v141;
            uint64_t v119 = v140;
            uint64_t v9 = v381;
LABEL_210:
            ++*((_DWORD *)v138 + 10);
            ++v132;
          }
          while (v132 != v131);
        }
        uint64_t v146 = *(void *)(v380 + 48);
        uint64_t v147 = (_DWORD *)(v146 - 24);
        if (v146) {
          uint64_t v148 = v146 - 24;
        }
        else {
          uint64_t v148 = 0;
        }
        if (v146 && *(unsigned char *)(v148 + 16) == 83)
        {
          do
          {
            uint64_t v149 = v395;
            if (v395 != &v396)
            {
              do
              {
                int v150 = *((_DWORD *)v149 + 10);
                if (v150)
                {
                  uint64_t v151 = *((void *)v149 + 4);
                  do
                  {
                    int v152 = v147[5];
                    uint64_t v153 = v152 & 0x7FFFFFF;
                    if ((v152 & 0x7FFFFFF) != 0)
                    {
                      uint64_t v154 = 0;
                      while (1)
                      {
                        uint64_t v155 = &v147[-8 * v153];
                        if ((v152 & 0x40000000) != 0) {
                          uint64_t v155 = (_DWORD *)*((void *)v147 - 1);
                        }
                        if (*(void *)&v155[8 * v147[15] + 2 * v154] == v151) {
                          break;
                        }
                        if (v153 == ++v154) {
                          goto LABEL_225;
                        }
                      }
                    }
                    else
                    {
LABEL_225:
                      LODWORD(v154) = -1;
                    }
                    llvm::PHINode::removeIncomingValue((llvm::PHINode *)v147, v154, 0);
                    --v150;
                  }
                  while (v150);
                }
                signed int v156 = (void **)*((void *)v149 + 1);
                if (v156)
                {
                  do
                  {
                    int v157 = v156;
                    signed int v156 = (void **)*v156;
                  }
                  while (v156);
                }
                else
                {
                  do
                  {
                    int v157 = (void **)*((void *)v149 + 2);
                    BOOL v26 = *v157 == v149;
                    uint64_t v149 = v157;
                  }
                  while (!v26);
                }
                uint64_t v149 = v157;
              }
              while (v157 != (void **)&v396);
            }
            uint64_t v146 = *(void *)(v146 + 8);
            uint64_t v158 = v146 - 24;
            if (!v146) {
              uint64_t v158 = 0;
            }
            int v159 = *(unsigned __int8 *)(v158 + 16);
            if (v159 == 83) {
              uint64_t v147 = (_DWORD *)v158;
            }
            else {
              uint64_t v147 = 0;
            }
          }
          while (v146 && v159 == 83);
        }
        sub_1CD40B1BC((void *)v396);
        uint64_t v118 = *(void *)(v380 + 48);
      }
      if (v118) {
        uint64_t v160 = v118 - 24;
      }
      else {
        uint64_t v160 = 0;
      }
      if ((*(_DWORD *)(v160 + 20) & 0x7FFFFFF) == 0 && v118 && *(unsigned char *)(v160 + 16) == 83)
      {
        char v161 = v382[6];
        uint64_t v162 = llvm::UndefValue::get(*(llvm::UndefValue **)(v118 - 24), v63);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)(v118 - 24), v162, (llvm::Value *)1);
        uint64_t v163 = (int32x2_t ****)(v161 - 3);
        if (!v161) {
          uint64_t v163 = 0;
        }
        unint64_t v396 = 2;
        uint64_t v397 = 0;
        v398 = v163;
        if (v163 != (int32x2_t ****)-8192 && v163 != (int32x2_t ****)-4096 && v163 != 0) {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v396);
        }
        v395 = &unk_1F2615EC8;
        v399[0] = v9;
        int v165 = sub_1CC4CFF80(v9, &v395);
        if (v398 != (int32x2_t ****)-8192 && v398 != (int32x2_t ****)-4096 && v398)
        {
          unint64_t v166 = v396 & 0xFFFFFFFFFFFFFFF8;
          *(void *)(v396 & 0xFFFFFFFFFFFFFFF8) = v397;
          if (v397)
          {
            *(void *)uint64_t v397 = *(void *)v397 & 7 | v166;
          }
          else
          {
            uint64_t v167 = v398;
            uint64_t v168 = ***v398;
            unint64_t v169 = (unint64_t)v168[303];
            if (v169 <= v166)
            {
              uint64_t v170 = v168[305].u32[0];
              if (v169 + 16 * v170 > v166)
              {
                unsigned int v171 = v170 - 1;
                LODWORD(v172) = v171 & ((v398 >> 4) ^ (v398 >> 9));
                int v173 = (int32x2_t *****)(v169 + 16 * v172);
                uint64_t v174 = *v173;
                if (v398 != *v173)
                {
                  int v175 = 1;
                  do
                  {
                    if (v174 == (int32x2_t ****)-4096) {
                      goto LABEL_269;
                    }
                    int v176 = v172 + v175++;
                    uint64_t v172 = v176 & v171;
                    uint64_t v174 = *(int32x2_t *****)(v169 + 16 * v172);
                  }
                  while (v398 != v174);
                  int v173 = (int32x2_t *****)(v169 + 16 * v172);
                }
                *int v173 = (int32x2_t ****)-8192;
                v168[304] = vadd_s32(v168[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v167 = v398;
LABEL_269:
                *((unsigned char *)v167 + 17) &= ~1u;
              }
            }
          }
        }
        int v177 = (llvm::UndefValue *)v165[7];
        if (v177 != v162)
        {
          if (v177 && v177 != (llvm::UndefValue *)-8192 && v177 != (llvm::UndefValue *)-4096)
          {
            unint64_t v178 = v165[5] & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v178 = v165[6];
            uint64_t v179 = (unint64_t *)v165[6];
            if (v179)
            {
              *uint64_t v179 = *v179 & 7 | v178;
            }
            else
            {
              uint64_t v180 = v165[7];
              int v181 = ***(int32x2_t ****)v180;
              unint64_t v182 = (unint64_t)v181[303];
              if (v182 <= v178)
              {
                uint64_t v183 = v181[305].u32[0];
                if (v182 + 16 * v183 > v178)
                {
                  unsigned int v184 = v183 - 1;
                  LODWORD(v185) = v184 & ((v180 >> 4) ^ (v180 >> 9));
                  uint64_t v186 = (uint64_t *)(v182 + 16 * v185);
                  uint64_t v187 = *v186;
                  if (v180 != *v186)
                  {
                    int v188 = 1;
                    do
                    {
                      if (v187 == -4096) {
                        goto LABEL_289;
                      }
                      int v189 = v185 + v188++;
                      uint64_t v185 = v189 & v184;
                      uint64_t v187 = *(void *)(v182 + 16 * v185);
                    }
                    while (v180 != v187);
                    uint64_t v186 = (uint64_t *)(v182 + 16 * v185);
                  }
                  *uint64_t v186 = -8192;
                  v181[304] = vadd_s32(v181[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v180 = v165[7];
LABEL_289:
                  *(unsigned char *)(v180 + 17) &= ~1u;
                }
              }
            }
          }
          v165[7] = v162;
          if (v162 != (llvm::UndefValue *)-8192 && v162 != (llvm::UndefValue *)-4096 && v162) {
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v165 + 5));
          }
        }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
      if (v57 == v379) {
        goto LABEL_322;
      }
    }
    int v383 = v59 & 0x7FFFFFF;
    while (1)
    {
      uint64_t v76 = *((void *)v408 + v57);
      if (*(int32x2_t *****)(v76 + 40) != v382) {
        goto LABEL_171;
      }
      unint64_t v396 = 2;
      uint64_t v397 = 0;
      v398 = (int32x2_t ****)v76;
      if (v76 != -8192 && v76 != -4096 && v76 != 0) {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v396);
      }
      v395 = &unk_1F2615EC8;
      v399[0] = v9;
      int v78 = sub_1CC4CFF80(v9, &v395);
      if (v398 != (int32x2_t ****)-8192 && v398 != (int32x2_t ****)-4096 && v398)
      {
        unint64_t v79 = v396 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v396 & 0xFFFFFFFFFFFFFFF8) = v397;
        if (v397)
        {
          *(void *)uint64_t v397 = *(void *)v397 & 7 | v79;
        }
        else
        {
          uint64_t v80 = v398;
          uint64_t v81 = ***v398;
          unint64_t v82 = (unint64_t)v81[303];
          if (v82 <= v79)
          {
            uint64_t v83 = v81[305].u32[0];
            if (v82 + 16 * v83 > v79)
            {
              unsigned int v84 = v83 - 1;
              LODWORD(v85) = v84 & ((v398 >> 4) ^ (v398 >> 9));
              uint64_t v86 = (int32x2_t *****)(v82 + 16 * v85);
              int v87 = *v86;
              if (v398 == *v86)
              {
LABEL_124:
                *uint64_t v86 = (int32x2_t ****)-8192;
                v81[304] = vadd_s32(v81[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v80 = v398;
              }
              else
              {
                int v88 = 1;
                while (v87 != (int32x2_t ****)-4096)
                {
                  int v89 = v85 + v88++;
                  uint64_t v85 = v89 & v84;
                  int v87 = *(int32x2_t *****)(v82 + 16 * v85);
                  if (v398 == v87)
                  {
                    uint64_t v86 = (int32x2_t *****)(v82 + 16 * v85);
                    goto LABEL_124;
                  }
                }
              }
              *((unsigned char *)v80 + 17) &= ~1u;
            }
          }
        }
      }
      if (v383) {
        break;
      }
LABEL_170:
      uint64_t v57 = (v57 + 1);
      if (v409 == v57) {
        goto LABEL_171;
      }
    }
    unsigned int v90 = (_DWORD *)v78[7];
    int v91 = v383;
    while (2)
    {
      int v92 = v90[5];
      if ((v92 & 0x40000000) != 0) {
        unint64_t v93 = (_DWORD *)*((void *)v90 - 1);
      }
      else {
        unint64_t v93 = &v90[-8 * (v92 & 0x7FFFFFF)];
      }
      uint64_t v94 = *(void *)v9;
      uint64_t v95 = *(unsigned int *)(v9 + 16);
      if (v95)
      {
        uint64_t v96 = *(void *)&v93[8 * v90[15]];
        uint64_t v97 = ((v96 >> 4) ^ (v96 >> 9)) & (v95 - 1);
        int v98 = (void *)(v94 + (v97 << 6));
        uint64_t v99 = v98[3];
        if (v96 != v99)
        {
          int v100 = 1;
          while (v99 != -4096)
          {
            int v101 = v97 + v100++;
            uint64_t v97 = v101 & (v95 - 1);
            int v98 = (void *)(v94 + (v97 << 6));
            uint64_t v99 = v98[3];
            if (v96 == v99) {
              goto LABEL_139;
            }
          }
          goto LABEL_138;
        }
      }
      else
      {
LABEL_138:
        int v98 = (void *)(v94 + (v95 << 6));
      }
LABEL_139:
      v395 = (void *)6;
      if (v98 == (void *)(v94 + (v95 << 6)))
      {
        unint64_t v102 = 0;
        uint64_t v103 = 0;
        unint64_t v396 = 0;
        uint64_t v397 = 0;
      }
      else
      {
        unint64_t v102 = 0;
        uint64_t v103 = v98[7];
        unint64_t v396 = 0;
        uint64_t v397 = v103;
        if (v103 != -8192 && v103 != -4096 && v103 != 0)
        {
          unint64_t v105 = v98[5] & 0xFFFFFFFFFFFFFFF8;
          unint64_t v396 = *(void *)v105;
          *(void *)unint64_t v105 = &v395;
          v395 = (void *)(v105 | 6);
          unint64_t v102 = v396;
          if (v396) {
            *(void *)unint64_t v396 = *(void *)v396 & 7 | (unint64_t)&v396;
          }
          uint64_t v103 = v397;
        }
      }
      if (v103 != -8192 && v103 != -4096 && v103 != 0)
      {
        unint64_t v107 = (unint64_t)v395 & 0xFFFFFFFFFFFFFFF8;
        *(void *)((unint64_t)v395 & 0xFFFFFFFFFFFFFFF8) = v102;
        if (v396)
        {
          *(void *)unint64_t v396 = *(void *)v396 & 7 | v107;
        }
        else
        {
          uint64_t v108 = v397;
          uint64_t v109 = ***(int32x2_t ****)v397;
          unint64_t v110 = (unint64_t)v109[303];
          if (v110 <= v107)
          {
            uint64_t v111 = v109[305].u32[0];
            if (v110 + 16 * v111 > v107)
            {
              unsigned int v112 = v111 - 1;
              LODWORD(v113) = v112 & ((v397 >> 4) ^ (v397 >> 9));
              uint64_t v114 = (uint64_t *)(v110 + 16 * v113);
              uint64_t v115 = *v114;
              if (v397 == *v114)
              {
LABEL_167:
                uint64_t *v114 = -8192;
                v109[304] = vadd_s32(v109[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v108 = v397;
              }
              else
              {
                int v116 = 1;
                while (v115 != -4096)
                {
                  int v117 = v113 + v116++;
                  uint64_t v113 = v117 & v112;
                  uint64_t v115 = *(void *)(v110 + 16 * v113);
                  if (v397 == v115)
                  {
                    uint64_t v114 = (uint64_t *)(v110 + 16 * v113);
                    goto LABEL_167;
                  }
                }
              }
              *(unsigned char *)(v108 + 17) &= ~1u;
            }
          }
        }
      }
      if (v103) {
        operator new();
      }
      llvm::PHINode::removeIncomingValue((llvm::PHINode *)v90, 0, 0);
      if (!--v91) {
        goto LABEL_170;
      }
      continue;
    }
  }
LABEL_322:
  uint64_t v400 = 1;
  uint64_t v205 = a1[5];
  int64x2_t v401 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  int64x2_t v402 = v401;
  int64x2_t v403 = v401;
  int64x2_t v404 = v401;
  v405 = v407;
  uint64_t v406 = 0x800000000;
  uint64_t v206 = v409;
  if (v409)
  {
    uint64_t v207 = 0;
    v384 = (void *)(v205 + 272);
    do
    {
      uint64_t v208 = (int32x2_t ****)*((void *)v408 + v207);
      unint64_t v396 = 2;
      uint64_t v397 = 0;
      v398 = v208;
      if (v208 != (int32x2_t ****)-8192 && v208 != (int32x2_t ****)-4096 && v208 != 0) {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v396);
      }
      v395 = &unk_1F2615EC8;
      v399[0] = v9;
      int v210 = sub_1CC4CFF80(v9, &v395);
      if (v398 != (int32x2_t ****)-8192 && v398 != (int32x2_t ****)-4096 && v398 != 0)
      {
        unint64_t v215 = v396 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v396 & 0xFFFFFFFFFFFFFFF8) = v397;
        if (v397)
        {
          *(void *)uint64_t v397 = *(void *)v397 & 7 | v215;
        }
        else
        {
          int v216 = v398;
          int v217 = ***v398;
          unint64_t v218 = (unint64_t)v217[303];
          if (v218 <= v215)
          {
            uint64_t v219 = v217[305].u32[0];
            if (v218 + 16 * v219 > v215)
            {
              unsigned int v220 = v219 - 1;
              LODWORD(v221) = v220 & ((v398 >> 4) ^ (v398 >> 9));
              uint64_t v222 = (int32x2_t *****)(v218 + 16 * v221);
              uint64_t v223 = *v222;
              if (v398 == *v222)
              {
LABEL_343:
                uint64_t *v222 = (int32x2_t ****)-8192;
                v217[304] = vadd_s32(v217[304], (int32x2_t)0x1FFFFFFFFLL);
                int v216 = v398;
              }
              else
              {
                int v224 = 1;
                while (v223 != (int32x2_t ****)-4096)
                {
                  int v225 = v221 + v224++;
                  uint64_t v221 = v225 & v220;
                  uint64_t v223 = *(int32x2_t *****)(v218 + 16 * v221);
                  if (v398 == v223)
                  {
                    uint64_t v222 = (int32x2_t *****)(v218 + 16 * v221);
                    goto LABEL_343;
                  }
                }
              }
              *((unsigned char *)v216 + 17) &= ~1u;
            }
          }
        }
      }
      if (*(unsigned char *)(v210[7] + 16) == 83)
      {
        v395 = (void *)*((void *)v408 + v207);
        sub_1CD143B0C((uint64_t)&v400, (uint64_t *)&v395);
      }
      ++v207;
    }
    while (v207 != v206);
    if (v406)
    {
      for (unsigned int j = 0; v406 != j; ++j)
      {
        uint64_t v227 = *((void *)v405 + j);
        uint64_t v228 = *(void *)v9;
        uint64_t v229 = *(unsigned int *)(v9 + 16);
        if (v229)
        {
          uint64_t v230 = (v229 - 1) & ((v227 >> 4) ^ (v227 >> 9));
          uint64_t v231 = (void *)(v228 + (v230 << 6));
          uint64_t v232 = v231[3];
          if (v227 == v232) {
            goto LABEL_358;
          }
          int v233 = 1;
          while (v232 != -4096)
          {
            int v234 = v230 + v233++;
            uint64_t v230 = v234 & (v229 - 1);
            uint64_t v231 = (void *)(v228 + (v230 << 6));
            uint64_t v232 = v231[3];
            if (v227 == v232) {
              goto LABEL_358;
            }
          }
        }
        uint64_t v231 = (void *)(v228 + (v229 << 6));
LABEL_358:
        v395 = (void *)6;
        if (v231 == (void *)(v228 + (v229 << 6)))
        {
          unint64_t v235 = 0;
          uint64_t v236 = 0;
          uint64_t v239 = 0;
          unint64_t v396 = 0;
          uint64_t v397 = 0;
        }
        else
        {
          unint64_t v235 = 0;
          uint64_t v236 = v231[7];
          unint64_t v396 = 0;
          uint64_t v397 = v236;
          if (v236 != -8192 && v236 != -4096 && v236 != 0)
          {
            unint64_t v238 = v231[5] & 0xFFFFFFFFFFFFFFF8;
            unint64_t v396 = *(void *)v238;
            *(void *)unint64_t v238 = &v395;
            v395 = (void *)(v238 | 6);
            unint64_t v235 = v396;
            if (v396) {
              *(void *)unint64_t v396 = *(void *)v396 & 7 | (unint64_t)&v396;
            }
            uint64_t v236 = v397;
          }
          if (v236)
          {
            if (*(unsigned __int8 *)(v236 + 16) <= 0x1Bu) {
              uint64_t v239 = 0;
            }
            else {
              uint64_t v239 = v236;
            }
          }
          else
          {
            uint64_t v239 = 0;
          }
        }
        if (v236 == -8192 || v236 == -4096 || !v236) {
          goto LABEL_386;
        }
        unint64_t v240 = (unint64_t)v395 & 0xFFFFFFFFFFFFFFF8;
        *(void *)((unint64_t)v395 & 0xFFFFFFFFFFFFFFF8) = v235;
        if (!v396)
        {
          uint64_t v241 = v397;
          uint64_t v242 = ***(int32x2_t ****)v397;
          unint64_t v243 = (unint64_t)v242[303];
          if (v243 <= v240)
          {
            uint64_t v244 = v242[305].u32[0];
            if (v243 + 16 * v244 > v240)
            {
              unsigned int v245 = v244 - 1;
              LODWORD(v246) = v245 & ((v397 >> 4) ^ (v397 >> 9));
              int v247 = (uint64_t *)(v243 + 16 * v246);
              uint64_t v248 = *v247;
              if (v397 == *v247)
              {
LABEL_384:
                *int v247 = -8192;
                v242[304] = vadd_s32(v242[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v241 = v397;
              }
              else
              {
                int v249 = 1;
                while (v248 != -4096)
                {
                  int v250 = v246 + v249++;
                  uint64_t v246 = v250 & v245;
                  uint64_t v248 = *(void *)(v243 + 16 * v246);
                  if (v397 == v248)
                  {
                    int v247 = (uint64_t *)(v243 + 16 * v246);
                    goto LABEL_384;
                  }
                }
              }
              *(unsigned char *)(v241 + 17) &= ~1u;
            }
          }
LABEL_386:
          if (!v239) {
            continue;
          }
          goto LABEL_387;
        }
        *(void *)unint64_t v396 = *(void *)v396 & 7 | v240;
        if (!v239) {
          continue;
        }
LABEL_387:
        unsigned int v251 = *(unsigned __int8 *)(v239 + 16) - 33;
        BOOL v124 = v251 > 0x33;
        uint64_t v252 = (1 << v251) & 0x8000000000041;
        BOOL v253 = v124 || v252 == 0;
        if (v253
          || (uint64_t v254 = *(void *)(v239 - 32)) == 0
          || *(unsigned char *)(v254 + 16)
          || *(void *)(v254 + 24) != *(void *)(v239 + 72)
          || (*(unsigned char *)(v254 + 33) & 0x20) != 0)
        {
          v393[0] = v384;
          memset(&v393[1], 0, 32);
          __int16 v394 = 257;
          int v255 = *(_DWORD *)(v239 + 20);
          if ((v255 & 0x40000000) != 0)
          {
            uint64_t v257 = *(uint64_t **)(v239 - 8);
            unint64_t v256 = v255 & 0x7FFFFFF;
          }
          else
          {
            unint64_t v256 = v255 & 0x7FFFFFF;
            uint64_t v257 = (uint64_t *)(v239 - 32 * v256);
          }
          v395 = &v397;
          unint64_t v396 = 0x800000000;
          if (v256 >= 9) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v256)
          {
            uint64_t v258 = 32 * v256;
            uint64_t v259 = &v397;
            do
            {
              uint64_t v260 = *v257;
              v257 += 4;
              *v259++ = v260;
              v258 -= 32;
            }
            while (v258);
            uint64_t v261 = (uint64_t *)v395;
          }
          else
          {
            uint64_t v261 = &v397;
          }
          LODWORD(v396) = v256;
          uint64_t v262 = llvm::SimplifyInstructionWithOperands((llvm *)v239, (uint64_t)v261, v256, (uint64_t)v393, v211, v212, v213);
          if (v395 == &v397)
          {
            if (v262) {
              goto LABEL_405;
            }
          }
          else
          {
            free(v395);
            if (v262)
            {
LABEL_405:
              for (uint64_t k = *(void *)(v227 + 8); k; uint64_t k = *(void *)(k + 8))
              {
                v395 = *(void **)(k + 24);
                sub_1CD143B0C((uint64_t)&v400, (uint64_t *)&v395);
              }
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v239, v262, (llvm::Value *)1);
              if (!*(void *)(v239 + 8) && (llvm::wouldInstructionBeTriviallyDead(v239, 0) & 1) != 0) {
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
              }
              unint64_t v396 = 2;
              uint64_t v397 = 0;
              v398 = (int32x2_t ****)v227;
              if (v227 != -8192 && v227 != -4096 && v227) {
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v396);
              }
              v395 = &unk_1F2615EC8;
              v399[0] = v9;
              uint64_t v264 = sub_1CC4CFF80(v9, &v395);
              if (v398 != (int32x2_t ****)-8192 && v398 != (int32x2_t ****)-4096 && v398)
              {
                unint64_t v265 = v396 & 0xFFFFFFFFFFFFFFF8;
                *(void *)(v396 & 0xFFFFFFFFFFFFFFF8) = v397;
                if (v397)
                {
                  *(void *)uint64_t v397 = *(void *)v397 & 7 | v265;
                }
                else
                {
                  uint64_t v266 = v398;
                  uint64_t v267 = ***v398;
                  unint64_t v268 = (unint64_t)v267[303];
                  if (v268 <= v265)
                  {
                    uint64_t v269 = v267[305].u32[0];
                    if (v268 + 16 * v269 > v265)
                    {
                      unsigned int v270 = v269 - 1;
                      LODWORD(v271) = v270 & ((v398 >> 4) ^ (v398 >> 9));
                      uint64_t v272 = (int32x2_t *****)(v268 + 16 * v271);
                      uint64_t v273 = *v272;
                      if (v398 == *v272)
                      {
LABEL_423:
                        *uint64_t v272 = (int32x2_t ****)-8192;
                        v267[304] = vadd_s32(v267[304], (int32x2_t)0x1FFFFFFFFLL);
                        uint64_t v266 = v398;
                      }
                      else
                      {
                        int v274 = 1;
                        while (v273 != (int32x2_t ****)-4096)
                        {
                          int v275 = v271 + v274++;
                          uint64_t v271 = v275 & v270;
                          uint64_t v273 = *(int32x2_t *****)(v268 + 16 * v271);
                          if (v398 == v273)
                          {
                            uint64_t v272 = (int32x2_t *****)(v268 + 16 * v271);
                            goto LABEL_423;
                          }
                        }
                      }
                      *((unsigned char *)v266 + 17) &= ~1u;
                    }
                  }
                }
              }
              uint64_t v276 = v264[7];
              if (v276 != v239)
              {
                if (v276 && v276 != -8192 && v276 != -4096)
                {
                  unint64_t v277 = v264[5] & 0xFFFFFFFFFFFFFFF8;
                  *(void *)unint64_t v277 = v264[6];
                  uint64_t v278 = (unint64_t *)v264[6];
                  if (v278)
                  {
                    *uint64_t v278 = *v278 & 7 | v277;
                  }
                  else
                  {
                    uint64_t v279 = v264[7];
                    uint64_t v280 = ***(int32x2_t ****)v279;
                    unint64_t v281 = (unint64_t)v280[303];
                    if (v281 <= v277)
                    {
                      uint64_t v282 = v280[305].u32[0];
                      if (v281 + 16 * v282 > v277)
                      {
                        unsigned int v283 = v282 - 1;
                        LODWORD(v284) = v283 & ((v279 >> 4) ^ (v279 >> 9));
                        unsigned __int8 v285 = (uint64_t *)(v281 + 16 * v284);
                        uint64_t v286 = *v285;
                        if (v279 == *v285)
                        {
LABEL_448:
                          *unsigned __int8 v285 = -8192;
                          v280[304] = vadd_s32(v280[304], (int32x2_t)0x1FFFFFFFFLL);
                          uint64_t v279 = v264[7];
                        }
                        else
                        {
                          int v287 = 1;
                          while (v286 != -4096)
                          {
                            int v288 = v284 + v287++;
                            uint64_t v284 = v288 & v283;
                            uint64_t v286 = *(void *)(v281 + 16 * v284);
                            if (v279 == v286)
                            {
                              unsigned __int8 v285 = (uint64_t *)(v281 + 16 * v284);
                              goto LABEL_448;
                            }
                          }
                        }
                        *(unsigned char *)(v279 + 17) &= ~1u;
                      }
                    }
                  }
                }
                v264[7] = v239;
                if (v239 != -8192 && v239 != -4096) {
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v264 + 5));
                }
              }
            }
          }
        }
      }
    }
  }
  unint64_t v396 = 2;
  uint64_t v397 = 0;
  v398 = v376;
  if (v376 != (int32x2_t ****)-8192 && v376 != (int32x2_t ****)-4096 && v376) {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v396);
  }
  v395 = &unk_1F2615EC8;
  v399[0] = v9;
  uint64_t v289 = sub_1CC4CFF80(v9, &v395);
  if (v398 != (int32x2_t ****)-8192 && v398 != (int32x2_t ****)-4096 && v398)
  {
    unint64_t v290 = v396 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v396 & 0xFFFFFFFFFFFFFFF8) = v397;
    if (v397)
    {
      *(void *)uint64_t v397 = *(void *)v397 & 7 | v290;
    }
    else
    {
      uint64_t v291 = v398;
      uint64_t v292 = ***v398;
      unint64_t v293 = (unint64_t)v292[303];
      if (v293 <= v290)
      {
        uint64_t v294 = v292[305].u32[0];
        if (v293 + 16 * v294 > v290)
        {
          unsigned int v295 = v294 - 1;
          LODWORD(v296) = v295 & ((v398 >> 4) ^ (v398 >> 9));
          uint64_t v297 = (int32x2_t *****)(v293 + 16 * v296);
          v298 = *v297;
          if (v398 == *v297)
          {
LABEL_469:
            *uint64_t v297 = (int32x2_t ****)-8192;
            v292[304] = vadd_s32(v292[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v291 = v398;
          }
          else
          {
            int v299 = 1;
            while (v298 != (int32x2_t ****)-4096)
            {
              int v300 = v296 + v299++;
              uint64_t v296 = v300 & v295;
              v298 = *(int32x2_t *****)(v293 + 16 * v296);
              if (v398 == v298)
              {
                uint64_t v297 = (int32x2_t *****)(v293 + 16 * v296);
                goto LABEL_469;
              }
            }
          }
          *((unsigned char *)v291 + 17) &= ~1u;
        }
      }
    }
  }
  uint64_t v301 = (char *)v289[7];
  uint64_t v302 = v301 + 24;
  uint64_t v303 = (char *)(a1 + 9);
  if (v301 + 24 != (char *)(a1 + 9))
  {
    uint64_t v304 = v301 + 24;
    do
    {
      if (v304) {
        uint64_t v305 = (llvm::BasicBlock *)(v304 - 24);
      }
      else {
        uint64_t v305 = 0;
      }
      uint64_t v289 = (void *)llvm::ConstantFoldTerminator(v305, 0, 0, 0);
      uint64_t v304 = (char *)*((void *)v304 + 1);
    }
    while (v304 != v303);
  }
  v395 = v399;
  unint64_t v396 = (unint64_t)v399;
  uint64_t v397 = 16;
  LODWORD(v398) = 0;
  v393[0] = &v393[2];
  HIDWORD(v393[1]) = 16;
  v393[2] = v301;
  uint64_t v306 = 1;
  unsigned int v307 = 1;
  while (2)
  {
    uint64_t v308 = *((void *)v393[0] + v307 - 1);
    LODWORD(v393[1]) = v307 - 1;
    unint64_t v309 = v396;
    uint64_t v310 = HIDWORD(v397);
    if ((void *)v396 == v395)
    {
      if (HIDWORD(v397))
      {
        uint64_t v311 = 0;
        uint64_t v312 = 8 * HIDWORD(v397);
        uint64_t v313 = (void *)v396;
        while (*v313 != v308)
        {
          if (*v313 == -2) {
            uint64_t v311 = v313;
          }
          ++v313;
          v312 -= 8;
          if (!v312)
          {
            if (!v311) {
              goto LABEL_487;
            }
            *uint64_t v311 = v308;
            LODWORD(v398) = v398 - 1;
            goto LABEL_511;
          }
        }
        goto LABEL_522;
      }
LABEL_487:
      unsigned int v314 = v397;
      if (HIDWORD(v397) < v397)
      {
        ++HIDWORD(v397);
        *(void *)(v396 + 8 * v310) = v308;
LABEL_511:
        uint64_t v324 = *(void *)(v308 + 40);
        if (v324 == v308 + 40)
        {
LABEL_532:
          uint64_t v325 = 0;
          uint64_t v326 = 0;
          int v329 = 0;
        }
        else
        {
          uint64_t v325 = v324 - 24;
          if (v324) {
            uint64_t v326 = v324 - 24;
          }
          else {
            uint64_t v326 = 0;
          }
          int v327 = *(unsigned __int8 *)(v326 + 16);
          int v328 = v327 - 29;
          if (v327 != 30)
          {
            int v330 = 0;
            switch(v328)
            {
              case 0:
              case 5:
              case 6:
                goto LABEL_520;
              case 1:
                __break(1u);
                goto LABEL_658;
              case 2:
                int v330 = (*(_DWORD *)(v326 + 20) >> 1) & 0x3FFFFFF;
                goto LABEL_520;
              case 3:
              case 9:
                int v330 = (*(_DWORD *)(v326 + 20) & 0x7FFFFFF) - 1;
                goto LABEL_520;
              case 4:
                int v330 = 2;
                goto LABEL_520;
              case 7:
                int v330 = *(_WORD *)(v326 + 18) & 1;
                goto LABEL_520;
              case 8:
                int v330 = 1;
                goto LABEL_520;
              case 10:
                int v330 = *(_DWORD *)(v326 + 80) + 1;
                goto LABEL_520;
              default:
                goto LABEL_532;
            }
          }
          if ((*(_DWORD *)(v326 + 20) & 0x7FFFFFF) == 3) {
            int v330 = 2;
          }
          else {
            int v330 = 1;
          }
LABEL_520:
          int v329 = v330;
        }
        uint64_t v289 = sub_1CBFC9784((uint64_t)v393, (uint64_t)v393[0] + 8 * LODWORD(v393[1]), (llvm::Instruction *)v326, 0, v325, v329);
        goto LABEL_522;
      }
    }
    else
    {
      unsigned int v314 = v397;
    }
    if (3 * v314 <= 4 * (HIDWORD(v397) - (int)v398))
    {
      if (v314 >= 0x40) {
        v314 *= 2;
      }
      else {
        unsigned int v314 = 128;
      }
    }
    else if (v314 - HIDWORD(v397) >= v314 >> 3)
    {
      goto LABEL_492;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v395, v314);
    unsigned int v314 = v397;
    unint64_t v309 = v396;
LABEL_492:
    unsigned int v315 = v314 - 1;
    unsigned int v316 = (v314 - 1) & ((v308 >> 4) ^ (v308 >> 9));
    uint64_t v317 = (void *)(v309 + 8 * v316);
    uint64_t v318 = *v317;
    if (*v317 != -1)
    {
      uint64_t v319 = 0;
      int v320 = 1;
      while (v318 != v308)
      {
        if (v319) {
          BOOL v321 = 0;
        }
        else {
          BOOL v321 = v318 == -2;
        }
        if (v321) {
          uint64_t v319 = v317;
        }
        unsigned int v322 = v316 + v320++;
        unsigned int v316 = v322 & v315;
        uint64_t v317 = (void *)(v309 + 8 * (v322 & v315));
        uint64_t v318 = *v317;
        if (*v317 == -1) {
          goto LABEL_504;
        }
      }
      goto LABEL_522;
    }
    uint64_t v319 = 0;
LABEL_504:
    if (v319) {
      v323 = v319;
    }
    else {
      v323 = v317;
    }
    if (*v323 != v308)
    {
      if (*v323 == -2) {
        LODWORD(v398) = v398 - 1;
      }
      else {
        ++HIDWORD(v397);
      }
      void *v323 = v308;
      goto LABEL_511;
    }
LABEL_522:
    unsigned int v307 = v393[1];
    if (LODWORD(v393[1])) {
      continue;
    }
    break;
  }
  uint64_t v306 = (uint64_t)v392;
  v390 = v392;
  uint64_t v391 = 0x1000000000;
  if (v302 == v303)
  {
    v347 = 0;
    v346 = (uint64_t *)v392;
  }
  else
  {
    unsigned int v331 = 0;
    v332 = v302;
    do
    {
      if (v332) {
        v333 = v332 - 24;
      }
      else {
        v333 = 0;
      }
      v334 = v395;
      if ((void *)v396 == v395)
      {
        unsigned int v335 = HIDWORD(v397);
        v336 = (char *)(v396 + 8 * HIDWORD(v397));
        if (HIDWORD(v397))
        {
          uint64_t v337 = 0;
          while (*(char **)(v396 + v337) != v333)
          {
            v337 += 8;
            if (8 * HIDWORD(v397) == v337) {
              goto LABEL_562;
            }
          }
          v336 = (char *)(v396 + v337);
        }
LABEL_562:
        v334 = (void *)v396;
      }
      else
      {
        int v338 = v397 - 1;
        unsigned int v339 = (v397 - 1) & ((v333 >> 4) ^ (v333 >> 9));
        v336 = (char *)(v396 + 8 * v339);
        v340 = *(char **)v336;
        if (*(void *)v336 == -1)
        {
          v341 = 0;
LABEL_572:
          if (v341) {
            v336 = v341;
          }
          unsigned int v335 = HIDWORD(v397);
          if (*(char **)v336 != v333) {
            v336 = (char *)(v396 + 8 * v397);
          }
        }
        else
        {
          v341 = 0;
          int v342 = 1;
          while (v340 != v333)
          {
            if (v341) {
              BOOL v343 = 0;
            }
            else {
              BOOL v343 = v340 == (char *)-2;
            }
            if (v343) {
              v341 = v336;
            }
            unsigned int v344 = v339 + v342++;
            unsigned int v339 = v344 & v338;
            v336 = (char *)(v396 + 8 * (v344 & v338));
            v340 = *(char **)v336;
            if (*(void *)v336 == -1) {
              goto LABEL_572;
            }
          }
          unsigned int v335 = HIDWORD(v397);
        }
      }
      if ((void *)v396 == v334) {
        unsigned int v345 = v335;
      }
      else {
        unsigned int v345 = v397;
      }
      if (v336 == (char *)(v396 + 8 * v345))
      {
        if (v331 >= HIDWORD(v391)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v390 + v331) = v333;
        unsigned int v331 = v391 + 1;
        LODWORD(v391) = v391 + 1;
      }
      v332 = (char *)*((void *)v332 + 1);
    }
    while (v332 != v303);
    v346 = (uint64_t *)v390;
    v347 = (llvm::Type *)v331;
  }
  v411 = v413;
  uint64_t v412 = 0x400000000;
  llvm::detachDeadBlocks(v346, v347, 0, 0);
  if (v347)
  {
    uint64_t v348 = 8 * (void)v347;
    do
    {
      v349 = (llvm::BasicBlock *)*v346++;
      llvm::BasicBlock::eraseFromParent(v349);
      v348 -= 8;
    }
    while (v348);
  }
  uint64_t v289 = v411;
  if (v411 != v413) {
LABEL_658:
  }
    free(v289);
  if (v390 != (void *)v306) {
    free(v390);
  }
  if (v393[0] != &v393[2]) {
    free(v393[0]);
  }
  if ((void *)v396 != v395) {
    free((void *)v396);
  }
  while (v302 != v303)
  {
    if (v302) {
      v350 = v302 - 24;
    }
    else {
      v350 = 0;
    }
    v351 = (char *)*((void *)v350 + 5);
    if (v351 != v350 + 40)
    {
      uint64_t v352 = v351 ? (uint64_t)(v351 - 24) : 0;
      unsigned int v353 = *(unsigned __int8 *)(v352 + 16) - 40;
      uint64_t v354 = v353 >= 0xFFFFFFF5 ? v352 : 0;
      if (v351)
      {
        BOOL v355 = *(unsigned char *)(v354 + 16) == 30 && v353 >= 0xFFFFFFF5;
        if (v355
          && (*(_DWORD *)(v354 + 20) & 0x7FFFFFF) != 3
          && llvm::BasicBlock::getSinglePredecessor(*(llvm::BasicBlock **)(v354 - 32)))
        {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
      }
    }
    uint64_t v302 = (char *)*((void *)v302 + 1);
  }
  unint64_t v396 = 2;
  uint64_t v397 = 0;
  v398 = v376;
  if (v376 != (int32x2_t ****)-8192 && v376 != (int32x2_t ****)-4096 && v376) {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v396);
  }
  v395 = &unk_1F2615EC8;
  v399[0] = v9;
  v356 = sub_1CC4CFF80(v9, &v395);
  if (v398 != (int32x2_t ****)-8192 && v398 != (int32x2_t ****)-4096 && v398)
  {
    unint64_t v357 = v396 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v396 & 0xFFFFFFFFFFFFFFF8) = v397;
    if (v397)
    {
      *(void *)uint64_t v397 = *(void *)v397 & 7 | v357;
    }
    else
    {
      v358 = v398;
      v359 = ***v398;
      unint64_t v360 = (unint64_t)v359[303];
      if (v360 <= v357)
      {
        uint64_t v361 = v359[305].u32[0];
        if (v360 + 16 * v361 > v357)
        {
          unsigned int v362 = v361 - 1;
          LODWORD(v363) = v362 & ((v398 >> 4) ^ (v398 >> 9));
          v364 = (int32x2_t *****)(v360 + 16 * v363);
          v365 = *v364;
          if (v398 == *v364)
          {
LABEL_625:
            *v364 = (int32x2_t ****)-8192;
            v359[304] = vadd_s32(v359[304], (int32x2_t)0x1FFFFFFFFLL);
            v358 = v398;
          }
          else
          {
            int v366 = 1;
            while (v365 != (int32x2_t ****)-4096)
            {
              int v367 = v363 + v366++;
              uint64_t v363 = v367 & v362;
              v365 = *(int32x2_t *****)(v360 + 16 * v363);
              if (v398 == v365)
              {
                v364 = (int32x2_t *****)(v360 + 16 * v363);
                goto LABEL_625;
              }
            }
          }
          *((unsigned char *)v358 + 17) &= ~1u;
        }
      }
    }
  }
  for (uint64_t m = v356[7] + 24; (char *)m != v303; uint64_t m = *(void *)(m + 8))
  {
    if (m) {
      uint64_t v369 = m - 24;
    }
    else {
      uint64_t v369 = 0;
    }
    uint64_t v370 = *(void *)(v369 + 40);
    if (v370 != v369 + 40)
    {
      uint64_t v371 = v370 ? v370 - 24 : 0;
      unsigned int v372 = *(unsigned __int8 *)(v371 + 16) - 40;
      uint64_t v373 = v372 >= 0xFFFFFFF5 ? v371 : 0;
      if (v370)
      {
        if (*(unsigned char *)(v373 + 16) == 29 && v372 >= 0xFFFFFFF5)
        {
          unint64_t v375 = *(unsigned int *)(a6 + 8);
          if (v375 >= *(unsigned int *)(a6 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a6 + 8 * v375) = v373;
          ++*(_DWORD *)(a6 + 8);
        }
      }
    }
  }
  if (v405 != v407) {
    free(v405);
  }
  if ((v400 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v401.i64[0], 8);
  }
  if (v408 != v410) {
    free(v408);
  }
}

void *sub_1CD140890(uint64_t a1, int32x2_t ****a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v17 = 2;
  uint64_t v18 = 0;
  uint64_t v19 = a2;
  if (a2 != (int32x2_t ****)-8192 && a2 != (int32x2_t ****)-4096 && a2) {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v17);
  }
  uint64_t v16 = &unk_1F2615EC8;
  uint64_t v20 = v2;
  uint64_t result = sub_1CC4CFF80(v2, &v16);
  if (v19 != (int32x2_t ****)-8192 && v19 != (int32x2_t ****)-4096 && v19 != 0)
  {
    unint64_t v5 = v17 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v17 & 0xFFFFFFFFFFFFFFF8) = v18;
    if (v18)
    {
      *uint64_t v18 = *v18 & 7 | v5;
    }
    else
    {
      uint64_t v6 = v19;
      uint64_t v7 = ***v19;
      unint64_t v8 = (unint64_t)v7[303];
      if (v8 <= v5)
      {
        uint64_t v9 = v7[305].u32[0];
        if (v8 + 16 * v9 > v5)
        {
          unsigned int v10 = v9 - 1;
          LODWORD(v11) = v10 & ((v19 >> 4) ^ (v19 >> 9));
          uint64_t v12 = (int32x2_t *****)(v8 + 16 * v11);
          uint64_t v13 = *v12;
          if (v19 == *v12)
          {
LABEL_18:
            *uint64_t v12 = (int32x2_t ****)-8192;
            v7[304] = vadd_s32(v7[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v6 = v19;
          }
          else
          {
            int v14 = 1;
            while (v13 != (int32x2_t ****)-4096)
            {
              int v15 = v11 + v14++;
              uint64_t v11 = v15 & v10;
              uint64_t v13 = *(int32x2_t *****)(v8 + 16 * v11);
              if (v19 == v13)
              {
                uint64_t v12 = (int32x2_t *****)(v8 + 16 * v11);
                goto LABEL_18;
              }
            }
          }
          *((unsigned char *)v6 + 17) &= ~1u;
        }
      }
    }
  }
  if (!result[7])
  {
    LOWORD(v20) = 257;
    operator new();
  }
  return result;
}

uint64_t sub_1CD143B0C(uint64_t a1, uint64_t *a2)
{
  unsigned int v10 = 0;
  uint64_t result = sub_1CD145328(a1, *a2, &v10);
  if (result) {
    return result;
  }
  int v5 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v6 = 8;
  }
  else {
    unsigned int v6 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_14;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 4) <= v6 >> 3)
  {
LABEL_14:
    sub_1CD1453CC(a1, v6);
    unsigned int v10 = 0;
    uint64_t result = sub_1CD145328(a1, *a2, &v10);
  }
  uint64_t v7 = v10;
  *(_DWORD *)a1 += 2;
  if (*v7 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  *uint64_t v7 = *a2;
  uint64_t v8 = *a2;
  unsigned int v9 = *(_DWORD *)(a1 + 80);
  if (v9 >= *(_DWORD *)(a1 + 84)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a1 + 72) + 8 * v9) = v8;
  ++*(_DWORD *)(a1 + 80);
  return result;
}

void llvm::CloneAndPruneFunctionInto(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = *(void *)(a2 + 80);
  if (v12) {
    uint64_t v13 = v12 - 24;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(void *)(v13 + 48);
  if (v14) {
    uint64_t v15 = v14 - 24;
  }
  else {
    uint64_t v15 = 0;
  }
  llvm::CloneAndPruneIntoFromInst(a1, a2, v15, a3, a4, a5, a6, a7);
}

uint64_t *llvm::remapInstructionsInBlocks(uint64_t *result)
{
  uint64_t v1 = *((unsigned int *)result + 2);
  if (v1)
  {
    uint64_t v2 = *result;
    do
    {
      if (*(void *)(*(void *)v2 + 48) != *(void *)v2 + 40) {
        operator new();
      }
      v2 += 8;
    }
    while (v2 != *result + 8 * v1);
  }
  return result;
}

llvm::Value *llvm::DuplicateInstructionsInSplitBetween(unint64_t a1, llvm *a2, int32x2_t ****a3, uint64_t a4, uint64_t a5, uint64_t a6, const llvm::Twine *a7)
{
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = (int32x2_t ****)(v10 - 24);
  if (v10) {
    uint64_t v12 = v10 - 24;
  }
  else {
    uint64_t v12 = 0;
  }
  if (v10 && *(unsigned char *)(v12 + 16) == 83)
  {
    do
    {
      uint64_t v13 = sub_1CBF73380((uint64_t)v11, (uint64_t)a2);
      uint64_t v159 = 2;
      uint64_t v160 = 0;
      char v161 = v11;
      if (v11 != (int32x2_t ****)-8192 && v11 != (int32x2_t ****)-4096 && v11) {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v159);
      }
      uint64_t v158 = (const char *)&unk_1F2615EC8;
      uint64_t v162 = a4;
      uint64_t v14 = sub_1CC4CFF80(a4, &v158);
      if (v161 != (int32x2_t ****)-8192 && v161 != (int32x2_t ****)-4096 && v161 != 0)
      {
        unint64_t v16 = v159 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v159 & 0xFFFFFFFFFFFFFFF8) = v160;
        if (v160)
        {
          *(void *)uint64_t v160 = *(void *)v160 & 7 | v16;
        }
        else
        {
          uint64_t v17 = v161;
          uint64_t v18 = ***v161;
          unint64_t v19 = (unint64_t)v18[303];
          if (v19 <= v16)
          {
            uint64_t v20 = v18[305].u32[0];
            if (v19 + 16 * v20 > v16)
            {
              unsigned int v21 = v20 - 1;
              LODWORD(v22) = v21 & ((v161 >> 4) ^ (v161 >> 9));
              int v23 = (int32x2_t *****)(v19 + 16 * v22);
              unint64_t v24 = *v23;
              if (v161 == *v23)
              {
LABEL_23:
                char *v23 = (int32x2_t ****)-8192;
                v18[304] = vadd_s32(v18[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v17 = v161;
              }
              else
              {
                int v25 = 1;
                while (v24 != (int32x2_t ****)-4096)
                {
                  int v26 = v22 + v25++;
                  uint64_t v22 = v26 & v21;
                  unint64_t v24 = *(int32x2_t *****)(v19 + 16 * v22);
                  if (v161 == v24)
                  {
                    int v23 = (int32x2_t *****)(v19 + 16 * v22);
                    goto LABEL_23;
                  }
                }
              }
              *((unsigned char *)v17 + 17) &= ~1u;
            }
          }
        }
      }
      uint64_t v27 = v14[7];
      if (v27 != v13)
      {
        if (v27 && v27 != -8192 && v27 != -4096)
        {
          unint64_t v29 = v14[5] & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v29 = v14[6];
          uint64_t v30 = (unint64_t *)v14[6];
          if (v30)
          {
            unint64_t *v30 = *v30 & 7 | v29;
          }
          else
          {
            uint64_t v31 = v14[7];
            uint64_t v32 = ***(int32x2_t ****)v31;
            unint64_t v33 = (unint64_t)v32[303];
            if (v33 <= v29)
            {
              uint64_t v34 = v32[305].u32[0];
              if (v33 + 16 * v34 > v29)
              {
                unsigned int v35 = v34 - 1;
                LODWORD(v36) = v35 & ((v31 >> 4) ^ (v31 >> 9));
                uint64_t v37 = (uint64_t *)(v33 + 16 * v36);
                uint64_t v38 = *v37;
                if (v31 == *v37)
                {
LABEL_48:
                  *uint64_t v37 = -8192;
                  v32[304] = vadd_s32(v32[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v31 = v14[7];
                }
                else
                {
                  int v39 = 1;
                  while (v38 != -4096)
                  {
                    int v40 = v36 + v39++;
                    uint64_t v36 = v40 & v35;
                    uint64_t v38 = *(void *)(v33 + 16 * v36);
                    if (v31 == v38)
                    {
                      uint64_t v37 = (uint64_t *)(v33 + 16 * v36);
                      goto LABEL_48;
                    }
                  }
                }
                *(unsigned char *)(v31 + 17) &= ~1u;
              }
            }
          }
        }
        v14[7] = v13;
        if (v13 != -8192 && v13 != -4096 && v13) {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v14 + 5));
        }
      }
      uint64_t v10 = *(void *)(v10 + 8);
      uint64_t v11 = (int32x2_t ****)(v10 - 24);
      if (v10) {
        uint64_t v28 = v10 - 24;
      }
      else {
        uint64_t v28 = 0;
      }
    }
    while (v10 && *(unsigned char *)(v28 + 16) == 83);
  }
  LOWORD(v162) = 257;
  uint64_t v41 = (llvm::Value *)llvm::SplitEdge(a2, (llvm::BasicBlock *)a1, 0, 0, 0, (llvm::MemorySSAUpdater *)&v158, a7);
  uint64_t v42 = (uint64_t)v41;
  if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
  {
    uint64_t v54 = 0;
    int v53 = &byte_1CFBCE98E;
    unint64_t v46 = a3;
    goto LABEL_60;
  }
  uint64_t v43 = ***(void ***)a2;
  uint64_t v44 = *(void *)(v43 + 152);
  uint64_t v45 = *(unsigned int *)(v43 + 168);
  unint64_t v46 = a3;
  if (!v45) {
    goto LABEL_58;
  }
  LODWORD(v47) = (v45 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v48 = (llvm **)(v44 + 16 * v47);
  unint64_t v49 = *v48;
  if (*v48 != a2)
  {
    int v50 = 1;
    while (v49 != (llvm *)-4096)
    {
      int v51 = v47 + v50++;
      uint64_t v47 = v51 & (v45 - 1);
      unint64_t v49 = *(llvm **)(v44 + 16 * v47);
      if (v49 == a2)
      {
        uint64_t v48 = (llvm **)(v44 + 16 * v47);
        goto LABEL_59;
      }
    }
LABEL_58:
    uint64_t v48 = (llvm **)(v44 + 16 * v45);
  }
LABEL_59:
  uint64_t v52 = v48[1];
  uint64_t v55 = *(void *)v52;
  int v53 = (char *)v52 + 16;
  uint64_t v54 = v55;
LABEL_60:
  LOWORD(v162) = 773;
  uint64_t v158 = v53;
  uint64_t v159 = v54;
  uint64_t v160 = ".split";
  llvm::Value::setNameImpl(v41, &v158);
  if (v42 && !*(unsigned char *)(v42 + 16))
  {
    if ((*(unsigned char *)(v42 + 23) & 0x10) == 0) {
      goto LABEL_201;
    }
    uint64_t v142 = ***(void ***)v42;
    uint64_t v143 = *(void *)(v142 + 152);
    uint64_t v144 = *(unsigned int *)(v142 + 168);
    if (v144)
    {
      LODWORD(v145) = (v144 - 1) & ((v42 >> 4) ^ (v42 >> 9));
      uint64_t v146 = (llvm::Value **)(v143 + 16 * v145);
      uint64_t v147 = *v146;
      if (*v146 == (llvm::Value *)v42)
      {
LABEL_194:
        int v150 = v146[1];
        unint64_t v153 = *(void *)v150;
        uint64_t v151 = (char *)v150 + 16;
        unint64_t v152 = v153;
        if (v153 >= 5 && *(_DWORD *)v151 == *(_DWORD *)"llvm." && v151[4] == aLlvm_1[4])
        {
          *(_DWORD *)(v42 + 32) |= 0x2000u;
          int v155 = llvm::Function::lookupIntrinsicID(v151, v152);
LABEL_202:
          *(_DWORD *)(v42 + 36) = v155;
          goto LABEL_62;
        }
LABEL_201:
        int v155 = 0;
        *(_DWORD *)(v42 + 32) &= ~0x2000u;
        goto LABEL_202;
      }
      int v148 = 1;
      while (v147 != (llvm::Value *)-4096)
      {
        int v149 = v145 + v148++;
        uint64_t v145 = v149 & (v144 - 1);
        uint64_t v147 = *(llvm::Value **)(v143 + 16 * v145);
        if (v147 == (llvm::Value *)v42)
        {
          uint64_t v146 = (llvm::Value **)(v143 + 16 * v145);
          goto LABEL_194;
        }
      }
    }
    uint64_t v146 = (llvm::Value **)(v143 + 16 * v144);
    goto LABEL_194;
  }
LABEL_62:
  int v56 = *(llvm::Value **)(v42 + 40);
  if (v56 == (llvm::Value *)(v42 + 40))
  {
    uint64_t v58 = 0;
  }
  else
  {
    if (v56) {
      uint64_t v57 = (uint64_t)v56 - 24;
    }
    else {
      uint64_t v57 = 0;
    }
    if (*(unsigned __int8 *)(v57 + 16) - 29 >= 0xB) {
      uint64_t v58 = 0;
    }
    else {
      uint64_t v58 = v57;
    }
  }
  uint64_t v158 = (const char *)a2;
  uint64_t v159 = a1 | 4;
  uint64_t v160 = (char *)a2;
  char v161 = (int32x2_t ****)(v42 & 0xFFFFFFFFFFFFFFFBLL);
  uint64_t v162 = v42;
  unint64_t v163 = a1 & 0xFFFFFFFFFFFFFFFBLL;
  llvm::DomTreeUpdater::applyUpdates(a5, (unint64_t *)&v158, 3);
  if (v11 != v46)
  {
    int v59 = (void *)(a1 + 40);
    int v60 = (uint64_t *)(v58 + 24);
    while (1)
    {
      int v61 = (void *)*v59;
      if ((void *)*v59 == v59)
      {
        uint64_t v62 = 0;
      }
      else
      {
        if (v61) {
          uint64_t v62 = (int32x2_t ****)(v61 - 3);
        }
        else {
          uint64_t v62 = 0;
        }
        if (*((unsigned __int8 *)v62 + 16) - 29 >= 0xB) {
          uint64_t v62 = 0;
        }
      }
      if (v62 == v11) {
        return (llvm::Value *)v42;
      }
      uint64_t v63 = (llvm::Value *)llvm::Instruction::clone((llvm::Instruction *)v11);
      uint64_t v64 = v63;
      if ((*((unsigned char *)v11 + 23) & 0x10) == 0)
      {
        uint64_t v74 = 0;
        int v75 = &byte_1CFBCE98E;
        goto LABEL_90;
      }
      unint64_t v65 = ***v11;
      int32x2_t v66 = v65[19];
      uint64_t v67 = v65[21].u32[0];
      if (!v67) {
        goto LABEL_88;
      }
      LODWORD(v68) = (v67 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      uint64_t v69 = (int32x2_t *****)(*(void *)&v66 + 16 * v68);
      unsigned int v70 = *v69;
      if (*v69 != v11) {
        break;
      }
LABEL_89:
      unsigned int v73 = v69[1];
      uint64_t v76 = (uint64_t)*v73;
      int v75 = (const char *)(v73 + 2);
      uint64_t v74 = v76;
LABEL_90:
      LOWORD(v162) = 261;
      uint64_t v158 = v75;
      uint64_t v159 = v74;
      llvm::Value::setNameImpl(v63, &v158);
      if (!v64 || *((unsigned char *)v64 + 16)) {
        goto LABEL_92;
      }
      if ((*((unsigned char *)v64 + 23) & 0x10) == 0)
      {
LABEL_182:
        int v140 = 0;
        *((_DWORD *)v64 + 8) &= ~0x2000u;
        goto LABEL_183;
      }
      uint64_t v127 = ***(void ***)v64;
      uint64_t v128 = *(void *)(v127 + 152);
      uint64_t v129 = *(unsigned int *)(v127 + 168);
      if (!v129) {
        goto LABEL_174;
      }
      LODWORD(v130) = (v129 - 1) & ((v64 >> 4) ^ (v64 >> 9));
      uint64_t v131 = (llvm::Value **)(v128 + 16 * v130);
      uint64_t v132 = *v131;
      if (*v131 != v64)
      {
        int v133 = 1;
        while (v132 != (llvm::Value *)-4096)
        {
          int v134 = v130 + v133++;
          uint64_t v130 = v134 & (v129 - 1);
          uint64_t v132 = *(llvm::Value **)(v128 + 16 * v130);
          if (v132 == v64)
          {
            uint64_t v131 = (llvm::Value **)(v128 + 16 * v130);
            goto LABEL_175;
          }
        }
LABEL_174:
        uint64_t v131 = (llvm::Value **)(v128 + 16 * v129);
      }
LABEL_175:
      unint64_t v135 = v131[1];
      unint64_t v138 = *(void *)v135;
      unint64_t v136 = (char *)v135 + 16;
      unint64_t v137 = v138;
      if (v138 < 5) {
        goto LABEL_182;
      }
      if (*(_DWORD *)v136 != *(_DWORD *)"llvm." || v136[4] != aLlvm_1[4]) {
        goto LABEL_182;
      }
      *((_DWORD *)v64 + 8) |= 0x2000u;
      int v140 = llvm::Function::lookupIntrinsicID(v136, v137);
LABEL_183:
      *((_DWORD *)v64 + 9) = v140;
LABEL_92:
      uint64_t v77 = *(void *)(v58 + 40);
      *((void *)v64 + 5) = v77;
      *(_WORD *)(v77 + 18) &= ~0x8000u;
      if ((*((unsigned char *)v64 + 23) & 0x10) != 0)
      {
        uint64_t v113 = *(void *)(v77 + 56);
        if (v113)
        {
          uint64_t v114 = *(llvm::ValueSymbolTable **)(v113 + 104);
          if (v114) {
            llvm::ValueSymbolTable::reinsertValue(v114, v64);
          }
        }
      }
      uint64_t v78 = *v60;
      *((void *)v64 + 3) = *v60;
      *((void *)v64 + 4) = v60;
      *(void *)(v78 + 8) = (char *)v64 + 24;
      uint64_t *v60 = (uint64_t)v64 + 24;
      uint64_t v159 = 2;
      uint64_t v160 = 0;
      char v161 = v11;
      if (v11 != (int32x2_t ****)-8192 && v11 != (int32x2_t ****)-4096 && v11) {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v159);
      }
      uint64_t v158 = (const char *)&unk_1F2615EC8;
      uint64_t v162 = a4;
      unint64_t v79 = sub_1CC4CFF80(a4, &v158);
      if (v161 != (int32x2_t ****)-8192 && v161 != (int32x2_t ****)-4096 && v161)
      {
        unint64_t v80 = v159 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v159 & 0xFFFFFFFFFFFFFFF8) = v160;
        if (v160)
        {
          *(void *)uint64_t v160 = *(void *)v160 & 7 | v80;
        }
        else
        {
          uint64_t v81 = v161;
          unint64_t v82 = ***v161;
          unint64_t v83 = (unint64_t)v82[303];
          if (v83 <= v80)
          {
            uint64_t v84 = v82[305].u32[0];
            if (v83 + 16 * v84 > v80)
            {
              unsigned int v85 = v84 - 1;
              LODWORD(v86) = v85 & ((v161 >> 4) ^ (v161 >> 9));
              int v87 = (int32x2_t *****)(v83 + 16 * v86);
              int v88 = *v87;
              if (v161 == *v87)
              {
LABEL_108:
                *int v87 = (int32x2_t ****)-8192;
                v82[304] = vadd_s32(v82[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v81 = v161;
              }
              else
              {
                int v89 = 1;
                while (v88 != (int32x2_t ****)-4096)
                {
                  int v90 = v86 + v89++;
                  uint64_t v86 = v90 & v85;
                  int v88 = *(int32x2_t *****)(v83 + 16 * v86);
                  if (v161 == v88)
                  {
                    int v87 = (int32x2_t *****)(v83 + 16 * v86);
                    goto LABEL_108;
                  }
                }
              }
              *((unsigned char *)v81 + 17) &= ~1u;
            }
          }
        }
      }
      int v91 = (llvm::Value *)v79[7];
      if (v91 != v64)
      {
        if (v91 && v91 != (llvm::Value *)-8192 && v91 != (llvm::Value *)-4096)
        {
          unint64_t v115 = v79[5] & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v115 = v79[6];
          int v116 = (unint64_t *)v79[6];
          if (v116)
          {
            *int v116 = *v116 & 7 | v115;
          }
          else
          {
            uint64_t v117 = v79[7];
            uint64_t v118 = ***(int32x2_t ****)v117;
            unint64_t v119 = (unint64_t)v118[303];
            if (v119 <= v115)
            {
              uint64_t v120 = v118[305].u32[0];
              if (v119 + 16 * v120 > v115)
              {
                unsigned int v121 = v120 - 1;
                LODWORD(v122) = v121 & ((v117 >> 4) ^ (v117 >> 9));
                BOOL v123 = (uint64_t *)(v119 + 16 * v122);
                uint64_t v124 = *v123;
                if (v117 == *v123)
                {
LABEL_163:
                  *BOOL v123 = -8192;
                  v118[304] = vadd_s32(v118[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v117 = v79[7];
                }
                else
                {
                  int v125 = 1;
                  while (v124 != -4096)
                  {
                    int v126 = v122 + v125++;
                    uint64_t v122 = v126 & v121;
                    uint64_t v124 = *(void *)(v119 + 16 * v122);
                    if (v117 == v124)
                    {
                      BOOL v123 = (uint64_t *)(v119 + 16 * v122);
                      goto LABEL_163;
                    }
                  }
                }
                *(unsigned char *)(v117 + 17) &= ~1u;
              }
            }
          }
        }
        v79[7] = v64;
        if (v64 != (llvm::Value *)-8192 && v64 != (llvm::Value *)-4096 && v64) {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v79 + 5));
        }
      }
      uint64_t v92 = *((_DWORD *)v64 + 5) & 0x7FFFFFF;
      if (v92)
      {
        for (uint64_t i = 0; i != v92; ++i)
        {
          int v94 = *((_DWORD *)v64 + 5);
          if ((v94 & 0x40000000) != 0) {
            uint64_t v95 = (char *)*((void *)v64 - 1);
          }
          else {
            uint64_t v95 = (char *)v64 - 32 * (v94 & 0x7FFFFFF);
          }
          uint64_t v96 = *(void *)&v95[32 * i];
          if (v96) {
            BOOL v97 = *(unsigned __int8 *)(v96 + 16) >= 0x1Cu;
          }
          else {
            BOOL v97 = 0;
          }
          if (v97)
          {
            uint64_t v98 = *(unsigned int *)(a4 + 16);
            if (v98)
            {
              uint64_t v99 = *(void *)a4;
              uint64_t v100 = (v98 - 1) & ((v96 >> 4) ^ (v96 >> 9));
              uint64_t v101 = *(void *)a4 + (v100 << 6);
              uint64_t v102 = *(void *)(v101 + 24);
              if (v96 == v102)
              {
LABEL_132:
                if (v101 != v99 + (v98 << 6))
                {
                  if ((v94 & 0x40000000) != 0) {
                    unint64_t v105 = (char *)*((void *)v64 - 1);
                  }
                  else {
                    unint64_t v105 = (char *)v64 - 32 * (v94 & 0x7FFFFFF);
                  }
                  uint64_t v106 = *(void *)(v101 + 56);
                  unint64_t v107 = &v105[32 * i];
                  if (*(void *)v107)
                  {
                    **((void **)v107 + 2) = *((void *)v107 + 1);
                    uint64_t v108 = *((void *)v107 + 1);
                    if (v108) {
                      *(void *)(v108 + 16) = *((void *)v107 + 2);
                    }
                  }
                  *(void *)unint64_t v107 = v106;
                  if (v106)
                  {
                    uint64_t v111 = *(void *)(v106 + 8);
                    uint64_t v109 = (char **)(v106 + 8);
                    uint64_t v110 = v111;
                    unsigned int v112 = &v105[32 * i];
                    *((void *)v112 + 1) = v111;
                    if (v111) {
                      *(void *)(v110 + 16) = v112 + 8;
                    }
                    *((void *)v112 + 2) = v109;
                    *uint64_t v109 = v107;
                  }
                }
              }
              else
              {
                int v103 = 1;
                while (v102 != -4096)
                {
                  int v104 = v100 + v103++;
                  uint64_t v100 = v104 & (v98 - 1);
                  uint64_t v101 = v99 + (v100 << 6);
                  uint64_t v102 = *(void *)(v101 + 24);
                  if (v96 == v102) {
                    goto LABEL_132;
                  }
                }
              }
            }
          }
        }
      }
      uint64_t v10 = *(void *)(v10 + 8);
      if (v10) {
        uint64_t v11 = (int32x2_t ****)(v10 - 24);
      }
      else {
        uint64_t v11 = 0;
      }
      if (v11 == v46) {
        return (llvm::Value *)v42;
      }
    }
    int v71 = 1;
    while (v70 != (int32x2_t ****)-4096)
    {
      int v72 = v68 + v71++;
      uint64_t v68 = v72 & (v67 - 1);
      unsigned int v70 = *(int32x2_t *****)(*(void *)&v66 + 16 * v68);
      if (v70 == v11)
      {
        uint64_t v69 = (int32x2_t *****)(*(void *)&v66 + 16 * v68);
        goto LABEL_89;
      }
    }
LABEL_88:
    uint64_t v69 = (int32x2_t *****)(*(void *)&v66 + 16 * v67);
    goto LABEL_89;
  }
  return (llvm::Value *)v42;
}

void llvm::cloneNoAliasScopes(uint64_t *a1, uint64_t a2, uint64_t a3, const void *a4, size_t a5, uint64_t *a6)
{
  uint64_t v38 = a6;
  if (a2)
  {
    unsigned int v9 = a1;
    uint64_t v10 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a5 | 7) != 0x17) {
      uint64_t v10 = a5 | 7;
    }
    size_t __sz = v10 + 1;
    unint64_t v24 = &a1[a2];
    unint64_t v25 = (v10 + 1) | 0x8000000000000000;
    while (1)
    {
      uint64_t v11 = *v9;
      uint64_t v12 = *(unsigned int *)(*v9 + 8);
      if (v12) {
        break;
      }
LABEL_34:
      if (++v9 == v24) {
        return;
      }
    }
    uint64_t v13 = -8 * v12;
    while (1)
    {
      uint64_t v14 = *(llvm::MDString **)(v11 + v13);
      if (*(unsigned __int8 *)v14 - 4 <= 0x1E) {
        break;
      }
LABEL_33:
      v13 += 8;
      if (!v13) {
        goto LABEL_34;
      }
    }
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v37 = 0;
    uint64_t v15 = sub_1CD8795C4((uint64_t)v14);
    if (v16)
    {
      uint64_t v27 = v15;
      v28[0] = v16;
      v28[1] = ":";
      __int16 v29 = 773;
      *(void *)&long long __dst = &v27;
      unint64_t v31 = (unint64_t)a4;
      size_t v32 = a5;
      __int16 v33 = 1282;
      llvm::Twine::str((llvm::Twine *)&__dst, &v34);
      if (SHIBYTE(v37) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)__p = v34;
      uint64_t v18 = v35;
      goto LABEL_21;
    }
    if (a5 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (a5 >= 0x17)
    {
      p_dst = (long long *)operator new(__sz);
      *((void *)&__dst + 1) = a5;
      unint64_t v31 = v25;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v31) = a5;
      p_dst = &__dst;
      if (!a5) {
        goto LABEL_18;
      }
    }
    memmove(p_dst, a4, a5);
LABEL_18:
    *((unsigned char *)p_dst + a5) = 0;
    if (SHIBYTE(v37) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = __dst;
    uint64_t v18 = (const void *)v31;
LABEL_21:
    uint64_t v37 = v18;
    uint64_t v19 = *((unsigned int *)v14 + 2);
    if (v19 >= 2)
    {
      uint64_t v20 = (unsigned char *)((void *)v14 - v19)[1];
      if (v20)
      {
        switch(*v20)
        {
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x1F:
          case 0x20:
          case 0x21:
          case 0x22:
            break;
          default:
            goto LABEL_22;
        }
      }
    }
    else
    {
LABEL_22:
      uint64_t v20 = 0;
    }
    if (SHIBYTE(v37) >= 0) {
      unsigned int v21 = (unsigned __int8 *)__p;
    }
    else {
      unsigned int v21 = (unsigned __int8 *)__p[0];
    }
    if (SHIBYTE(v37) >= 0) {
      size_t v22 = HIBYTE(v37) & 0x7F;
    }
    else {
      size_t v22 = (size_t)__p[1];
    }
    int v23 = llvm::MDBuilder::createAnonymousAARoot(&v38, v21, v22, (uint64_t)v20);
    uint64_t v27 = v14;
    v28[0] = v23;
    sub_1CD879788((uint64_t)&__dst, a3, &v27, v28);
    if (SHIBYTE(v37) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_33;
  }
}

void llvm::adaptNoAliasScopes(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  v53[0] = a2;
  v53[1] = a3;
  BOOL v4 = sub_1CC9E8BD8((uint64_t)a1);
  if (a1)
  {
    if (v4)
    {
      int v5 = (unsigned __int8 *)sub_1CD144E54(v53, a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)][3]);
      if (v5)
      {
        uint64_t v6 = llvm::MetadataAsValue::get(**a1, v5);
        uint64_t v7 = *((_DWORD *)a1 + 5) & 0x7FFFFFF;
        uint64_t v8 = -v7;
        unsigned int v9 = (uint64_t *)&a1[-4 * v7];
        if (*v9)
        {
          uint64_t v10 = &a1[4 * v8];
          uint64_t v12 = v10[2];
          uint64_t v11 = v10 + 2;
          *uint64_t v12 = *(v11 - 1);
          uint64_t v13 = *(v11 - 1);
          if (v13) {
            *(void *)(v13 + 16) = *v11;
          }
        }
        *unsigned int v9 = v6;
        if (v6)
        {
          uint64_t v16 = *(uint64_t **)(v6 + 8);
          uint64_t v14 = (uint64_t **)(v6 + 8);
          uint64_t v15 = v16;
          uint64_t v17 = &a1[4 * v8];
          v17[1] = v16;
          if (v16) {
            v15[2] = (uint64_t)(v17 + 1);
          }
          v17[2] = (uint64_t *)v14;
          *uint64_t v14 = v9;
        }
      }
    }
  }
  unsigned int v18 = a1 >> 4;
  if ((*((unsigned char *)a1 + 23) & 0x20) == 0) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)**a1;
  uint64_t v54 = a1;
  int v20 = *(_DWORD *)(v19 + 2496);
  if (v20)
  {
    uint64_t v21 = *(void *)(v19 + 2480);
    int v22 = v20 - 1;
    unsigned int v23 = v22 & (v18 ^ (a1 >> 9));
    unint64_t v24 = (uint64_t ***)(v21 + 40 * v23);
    unint64_t v25 = *v24;
    if (*v24 == a1) {
      goto LABEL_22;
    }
    int v26 = 0;
    int v27 = 1;
    while (v25 != (uint64_t **)-4096)
    {
      if (v26) {
        BOOL v28 = 0;
      }
      else {
        BOOL v28 = v25 == (uint64_t **)-8192;
      }
      if (v28) {
        int v26 = v24;
      }
      unsigned int v29 = v23 + v27++;
      unsigned int v23 = v29 & v22;
      unint64_t v24 = (uint64_t ***)(v21 + 40 * v23);
      unint64_t v25 = *v24;
      if (*v24 == a1) {
        goto LABEL_22;
      }
    }
    if (v26) {
      unint64_t v49 = v26;
    }
    else {
      unint64_t v49 = v24;
    }
  }
  else
  {
    unint64_t v49 = 0;
  }
  unint64_t v24 = (uint64_t ***)sub_1CC609054(v19 + 2480, (uint64_t)&v54, (uint64_t *)&v54, v49);
  uint64_t v50 = (uint64_t)v54;
  v24[3] = 0;
  v24[4] = 0;
  *unint64_t v24 = (uint64_t **)v50;
  v24[1] = (uint64_t **)(v24 + 3);
  v24[2] = (uint64_t **)0x100000000;
LABEL_22:
  uint64_t v30 = *((unsigned int *)v24 + 4);
  if (v30)
  {
    unint64_t v31 = (uint64_t *)(v24[1] + 1);
    uint64_t v32 = 16 * v30;
    while (*((_DWORD *)v31 - 2) != 8)
    {
      v31 += 2;
      v32 -= 16;
      if (!v32) {
        goto LABEL_26;
      }
    }
    if (*v31)
    {
      uint64_t v47 = sub_1CD144E54(v53, *v31);
      if (v47) {
        llvm::Value::setMetadata((uint64_t ***)a1, 8, v47);
      }
    }
  }
LABEL_26:
  if ((*((unsigned char *)a1 + 23) & 0x20) == 0) {
    return;
  }
  uint64_t v33 = *(void *)**a1;
  uint64_t v54 = a1;
  int v34 = *(_DWORD *)(v33 + 2496);
  if (v34)
  {
    uint64_t v35 = *(void *)(v33 + 2480);
    int v36 = v34 - 1;
    unsigned int v37 = v36 & (v18 ^ (a1 >> 9));
    uint64_t v38 = (uint64_t ***)(v35 + 40 * v37);
    int v39 = *v38;
    if (*v38 == a1) {
      goto LABEL_37;
    }
    int v40 = 0;
    int v41 = 1;
    while (v39 != (uint64_t **)-4096)
    {
      if (v40) {
        BOOL v42 = 0;
      }
      else {
        BOOL v42 = v39 == (uint64_t **)-8192;
      }
      if (v42) {
        int v40 = v38;
      }
      unsigned int v43 = v37 + v41++;
      unsigned int v37 = v43 & v36;
      uint64_t v38 = (uint64_t ***)(v35 + 40 * v37);
      int v39 = *v38;
      if (*v38 == a1) {
        goto LABEL_37;
      }
    }
    if (v40) {
      int v51 = v40;
    }
    else {
      int v51 = v38;
    }
  }
  else
  {
    int v51 = 0;
  }
  uint64_t v38 = (uint64_t ***)sub_1CC609054(v33 + 2480, (uint64_t)&v54, (uint64_t *)&v54, v51);
  uint64_t v52 = (uint64_t)v54;
  v38[3] = 0;
  void v38[4] = 0;
  *uint64_t v38 = (uint64_t **)v52;
  v38[1] = (uint64_t **)(v38 + 3);
  v38[2] = (uint64_t **)0x100000000;
LABEL_37:
  uint64_t v44 = *((unsigned int *)v38 + 4);
  if (v44)
  {
    uint64_t v45 = (uint64_t *)(v38[1] + 1);
    uint64_t v46 = 16 * v44;
    while (*((_DWORD *)v45 - 2) != 7)
    {
      v45 += 2;
      v46 -= 16;
      if (!v46) {
        return;
      }
    }
    if (*v45)
    {
      uint64_t v48 = sub_1CD144E54(v53, *v45);
      if (v48)
      {
        llvm::Value::setMetadata((uint64_t ***)a1, 7, v48);
      }
    }
  }
}

llvm::MDNode *sub_1CD144E54(uint64_t *a1, uint64_t a2)
{
  v17[8] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = v17;
  uint64_t v16 = 0x800000000;
  uint64_t v2 = *(unsigned int *)(a2 + 8);
  if (!v2) {
    return 0;
  }
  unsigned int v5 = 0;
  char v6 = 0;
  uint64_t v7 = (uint64_t *)(a2 - 8 * v2);
  do
  {
    while (1)
    {
      uint64_t v8 = *v7;
      if (*(unsigned __int8 *)*v7 - 4 > 0x1E) {
        goto LABEL_8;
      }
      uint64_t v9 = *a1;
      uint64_t v14 = 0;
      if ((sub_1CD40EA84(*(void *)v9, *(_DWORD *)(v9 + 16), v8, &v14) & 1) == 0) {
        break;
      }
      uint64_t v10 = *(void *)(v14 + 8);
      if (!v10) {
        break;
      }
      if (v16 >= (unint64_t)HIDWORD(v16)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v15 + v16) = v10;
      unsigned int v5 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v7;
      char v6 = 1;
      if (v7 == (uint64_t *)a2)
      {
        uint64_t v13 = v15;
LABEL_16:
        Impl = llvm::MDTuple::getImpl(a1[1], v13, v5, 0, 1);
        uint64_t v13 = v15;
        goto LABEL_19;
      }
    }
    if (v16 >= (unint64_t)HIDWORD(v16)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v15 + v16) = v8;
    unsigned int v5 = v16 + 1;
    LODWORD(v16) = v16 + 1;
LABEL_8:
    ++v7;
  }
  while (v7 != (uint64_t *)a2);
  uint64_t v13 = v15;
  if (v6) {
    goto LABEL_16;
  }
  Impl = 0;
LABEL_19:
  if (v13 != v17) {
    free(v13);
  }
  return Impl;
}

uint64_t *llvm::cloneAndAdaptNoAliasScopes(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, const void *a6, size_t a7)
{
  if (a2)
  {
    uint64_t v18 = v7;
    uint64_t v19 = v8;
    v16[0] = 0;
    v16[1] = 0;
    int v17 = 0;
    llvm::cloneNoAliasScopes(result, a2, (uint64_t)v16, a6, a7, a5);
    if (a4)
    {
      uint64_t v10 = a3 + 8 * a4;
      do
      {
        uint64_t v11 = *(void *)a3 + 40;
        for (uint64_t i = *(void *)(*(void *)a3 + 48); i != v11; uint64_t i = *(void *)(i + 8))
        {
          if (i) {
            uint64_t v13 = (uint64_t **)(i - 24);
          }
          else {
            uint64_t v13 = 0;
          }
          llvm::adaptNoAliasScopes(v13, (uint64_t)v16, (uint64_t)a5);
        }
        a3 += 8;
      }
      while (a3 != v10);
    }
    return (uint64_t *)MEMORY[0x1D25D9CD0](v16[0], 8);
  }
  return result;
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  void v13[2];
  int v14;

  if (a2)
  {
    v13[0] = 0;
    v13[1] = 0;
    uint64_t v14 = 0;
    llvm::cloneNoAliasScopes(result, a2, (uint64_t)v13, a6, a7, a5);
    uint64_t v10 = a3 + 24;
    uint64_t v11 = *(void *)(a4 + 32);
    while (v10 != v11)
    {
      if (v10) {
        uint64_t v12 = (uint64_t **)(v10 - 24);
      }
      else {
        uint64_t v12 = 0;
      }
      llvm::adaptNoAliasScopes(v12, (uint64_t)v13, (uint64_t)a5);
      uint64_t v10 = *(void *)(v10 + 8);
    }
    return (uint64_t *)MEMORY[0x1D25D9CD0](v13[0], 8);
  }
  return result;
}

BOOL llvm::identifyNoAliasScopesToClone(BOOL result, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = result;
    uint64_t v5 = result + 8 * a2;
    do
    {
      uint64_t v6 = *(void *)v4 + 40;
      for (uint64_t i = *(void *)(*(void *)v4 + 48); i != v6; uint64_t i = *(void *)(i + 8))
      {
        if (i) {
          uint64_t v8 = i - 24;
        }
        else {
          uint64_t v8 = 0;
        }
        uint64_t result = sub_1CC9E8BD8(v8);
        if (i && result)
        {
          uint64_t v9 = *(void *)(*(void *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)) + 24);
          unint64_t v10 = *(unsigned int *)(a3 + 8);
          if (v10 >= *(unsigned int *)(a3 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a3 + 8 * v10) = v9;
          ++*(_DWORD *)(a3 + 8);
        }
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  return result;
}

uint64_t llvm::identifyNoAliasScopesToClone(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    do
    {
      if (v5) {
        uint64_t v6 = v5 - 24;
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t result = sub_1CC9E8BD8(v6);
      if (v5 && result)
      {
        uint64_t v7 = *(void *)(*(void *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF)) + 24);
        unint64_t v8 = *(unsigned int *)(a3 + 8);
        if (v8 >= *(unsigned int *)(a3 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a3 + 8 * v8) = v7;
        ++*(_DWORD *)(a3 + 8);
      }
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5 != a2);
  }
  return result;
}

double sub_1CD145288(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 688)) {
    sub_1CCCB6860(a1);
  }
  bzero((void *)(a1 + 16), 0x2A0uLL);
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x800000000;
  *(void *)(a1 + 8) = 0x800000000;
  *(void *)(a1 + 80) = a1 + 96;
  *(_DWORD *)(a1 + 92) = 8;
  *(void *)(a1 + 160) = a1 + 176;
  *(_DWORD *)(a1 + 172) = 8;
  *(void *)(a1 + 240) = a1 + 256;
  *(_DWORD *)(a1 + 252) = 8;
  *(void *)(a1 + 320) = a1 + 336;
  *(_DWORD *)(a1 + 332) = 8;
  *(void *)(a1 + 400) = a1 + 432;
  *(void *)(a1 + 408) = a1 + 432;
  *(_DWORD *)(a1 + 416) = 32;
  *(unsigned char *)(a1 + 688) = 1;
  return result;
}

uint64_t sub_1CD145328(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_16;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
LABEL_13:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      uint64_t v7 = (void *)(v3 + 8 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_13;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_16:
  *a3 = v7;
  return result;
}

uint64_t sub_1CD1453CC(uint64_t a1, unsigned int a2)
{
  v14[8] = *MEMORY[0x1E4F143B8];
  if (a2 >= 9)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    BOOL v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 8)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CD145548(a1, v11, &v11[v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  unsigned int v6 = v14;
  for (uint64_t i = 8; i != 72; i += 8)
  {
    uint64_t v8 = *(void *)(a1 + i);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v6++ = v8;
    }
  }
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CD145548(a1, v14, v6);
}

uint64_t sub_1CD145548(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 72);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      BOOL v11 = 0;
      uint64_t result = sub_1CD145328((uint64_t)v5, v10, &v11);
      *BOOL v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

void llvm::CloneModule()
{
}

{
  operator new();
}

llvm::GlobalObject *sub_1CD145638(llvm::GlobalObject *result, uint64_t a2)
{
  if (a2)
  {
    unint64_t v4 = result;
    uint64_t inserted = llvm::Module::getOrInsertComdat(*((void *)result + 5), (unsigned __int8 *)(*(void *)a2 + 72), **(void **)a2);
    *((_DWORD *)inserted + 2) = *(_DWORD *)(a2 + 8);
    return (llvm::GlobalObject *)llvm::GlobalObject::setComdat(v4, (llvm::Comdat *)inserted);
  }
  return result;
}

void LLVMCloneModule(llvm *a1, const llvm::Module *a2)
{
}

uint64_t sub_1CD1456BC()
{
  return 1;
}

void *sub_1CD1456C4(uint64_t a1, char **a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  v125[16] = *MEMORY[0x1E4F143B8];
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  int v114 = 0;
  int v116 = 0;
  uint64_t v117 = 0;
  unint64_t v115 = 0;
  if (!a3)
  {
    uint64_t v12 = 0;
    int v88 = 0;
LABEL_223:
    *(void *)a1 = v112;
    *(void *)(a1 + 8) = v113;
    uint64_t v112 = 0;
    uint64_t v113 = 0;
    *(_DWORD *)(a1 + 16) = v114;
    int v114 = 0;
    *(void *)(a1 + 24) = v88;
    *(void *)(a1 + 32) = v12;
    *(void *)(a1 + 40) = v117;
    int v116 = 0;
    uint64_t v117 = 0;
    unint64_t v115 = 0;
    return sub_1CC189978(&v112);
  }
  uint64_t v11 = 8 * a3;
  do
  {
    uint64_t v118 = *a2;
    if (a4) {
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
    }
    sub_1CBB239A4((uint64_t)&v112, &v118);
    ++a2;
    v11 -= 8;
  }
  while (v11);
  uint64_t v12 = v115;
  uint64_t v111 = v116;
  if (v115 == v116)
  {
    int v88 = v115;
    goto LABEL_223;
  }
  int v110 = a5;
  while (2)
  {
    uint64_t v13 = *v12;
    if ((*(_WORD *)(*v12 + 18) & 0x7FFF) != 0) {
      break;
    }
    uint64_t v118 = v122;
    unint64_t v119 = v122;
    uint64_t v120 = 16;
    int v121 = 0;
    BOOL v123 = v125;
    uint64_t v124 = 0x1000000000;
    uint64_t v14 = v13 + 40;
    uint64_t v15 = *(void *)(v13 + 48);
    if (v15 != v13 + 40)
    {
      unsigned int v16 = 0;
      do
      {
        if (v15) {
          uint64_t v17 = v15 - 24;
        }
        else {
          uint64_t v17 = 0;
        }
        if (v16 >= HIDWORD(v124)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v123 + v16) = v17;
        unsigned int v16 = v124 + 1;
        LODWORD(v124) = v124 + 1;
        uint64_t v15 = *(void *)(v15 + 8);
      }
      while (v15 != v14);
      while (1)
      {
        if (!v16) {
          goto LABEL_77;
        }
        uint64_t v25 = *((void *)v123 + v16 - 1);
        LODWORD(v124) = v16 - 1;
        unint64_t v24 = v119;
        uint64_t v26 = HIDWORD(v120);
        if (v119 == v118)
        {
          if (HIDWORD(v120))
          {
            int v27 = 0;
            uint64_t v28 = 8 * HIDWORD(v120);
            unsigned int v29 = v119;
            while (*(void *)v29 != v25)
            {
              if (*(void *)v29 == -2) {
                int v27 = v29;
              }
              v29 += 8;
              v28 -= 8;
              if (!v28)
              {
                if (v27)
                {
                  *(void *)int v27 = v25;
                  --v121;
                  goto LABEL_75;
                }
                goto LABEL_51;
              }
            }
            goto LABEL_35;
          }
LABEL_51:
          unsigned int v23 = v120;
          if (HIDWORD(v120) < v120)
          {
            ++HIDWORD(v120);
            *(void *)&v119[8 * v26] = v25;
            goto LABEL_75;
          }
        }
        else
        {
          unsigned int v23 = v120;
        }
        if (3 * v23 <= 4 * (HIDWORD(v120) - v121)) {
          break;
        }
        if (v23 - HIDWORD(v120) < v23 >> 3) {
          goto LABEL_41;
        }
LABEL_56:
        unsigned int v30 = v23 - 1;
        unsigned int v31 = (v23 - 1) & ((v25 >> 4) ^ (v25 >> 9));
        uint64_t v32 = &v24[8 * v31];
        uint64_t v33 = *(void *)v32;
        if (*(void *)v32 != -1)
        {
          int v34 = 0;
          int v35 = 1;
          while (v33 != v25)
          {
            if (v34) {
              BOOL v36 = 0;
            }
            else {
              BOOL v36 = v33 == -2;
            }
            if (v36) {
              int v34 = v32;
            }
            unsigned int v37 = v31 + v35++;
            unsigned int v31 = v37 & v30;
            uint64_t v32 = &v24[8 * (v37 & v30)];
            uint64_t v33 = *(void *)v32;
            if (*(void *)v32 == -1) {
              goto LABEL_68;
            }
          }
          goto LABEL_35;
        }
        int v34 = 0;
LABEL_68:
        if (v34) {
          uint64_t v38 = v34;
        }
        else {
          uint64_t v38 = v32;
        }
        if (*(void *)v38 != v25)
        {
          if (*(void *)v38 == -2) {
            --v121;
          }
          else {
            ++HIDWORD(v120);
          }
          *(void *)uint64_t v38 = v25;
LABEL_75:
          unsigned int v39 = *(unsigned __int8 *)(v25 + 16);
          if (v39 == 4) {
            goto LABEL_76;
          }
          if (v39 < 0x1C || *(void *)(v25 + 40) == v13)
          {
            int v18 = *(_DWORD *)(v25 + 20);
            if ((v18 & 0x40000000) != 0)
            {
              uint64_t v20 = *(void *)(v25 - 8);
              uint64_t v19 = v18 & 0x7FFFFFF;
              if (!v19) {
                goto LABEL_35;
              }
            }
            else
            {
              uint64_t v19 = v18 & 0x7FFFFFF;
              uint64_t v20 = v25 - 32 * v19;
              if (!v19) {
                goto LABEL_35;
              }
            }
            uint64_t v21 = 32 * v19;
            do
            {
              if (*(void *)v20) {
                BOOL v22 = *(unsigned __int8 *)(*(void *)v20 + 16) - 21 >= 7;
              }
              else {
                BOOL v22 = 0;
              }
              if (v22)
              {
                if (v124 >= (unint64_t)HIDWORD(v124)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v123 + v124) = *(void *)v20;
                LODWORD(v124) = v124 + 1;
              }
              v20 += 32;
              v21 -= 32;
            }
            while (v21);
          }
        }
LABEL_35:
        unsigned int v16 = v124;
      }
      if (v23 >= 0x40) {
        v23 *= 2;
      }
      else {
        unsigned int v23 = 128;
      }
LABEL_41:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v118, v23);
      unsigned int v23 = v120;
      unint64_t v24 = v119;
      goto LABEL_56;
    }
LABEL_77:
    uint64_t v41 = *(void *)(v13 + 48);
    if (v41 == v14)
    {
LABEL_174:
      char v40 = 1;
      goto LABEL_175;
    }
    int v42 = v114 - 1;
    while (1)
    {
      uint64_t v43 = v41 - 24;
      if (!v41) {
        uint64_t v43 = 0;
      }
      int v44 = *(unsigned __int8 *)(v43 + 16);
      if (v44 == 59)
      {
        if ((a6 & 1) == 0) {
          goto LABEL_76;
        }
        goto LABEL_134;
      }
      if (v41 && v44 == 33)
      {
        uint64_t v45 = *(void *)(v43 - 64);
        if (v45)
        {
          if (!v114) {
            goto LABEL_76;
          }
          unsigned int v46 = ((v45 >> 4) ^ (v45 >> 9)) & v42;
          uint64_t v47 = *(void *)(v112 + 8 * v46);
          if (v45 != v47)
          {
            int v48 = 1;
            while (v47 != -4096)
            {
              unsigned int v49 = v46 + v48++;
              unsigned int v46 = v49 & v42;
              uint64_t v47 = *(void *)(v112 + 8 * v46);
              if (v45 == v47) {
                goto LABEL_134;
              }
            }
            goto LABEL_76;
          }
        }
        goto LABEL_134;
      }
      uint64_t v50 = v44 == 38 ? v43 : 0;
      if (!v41 || v44 != 38) {
        break;
      }
      __int16 v51 = *(_WORD *)(v50 + 18);
      int v52 = *(_DWORD *)(v50 + 20);
      if (v51)
      {
        uint64_t v53 = (v52 & 0x40000000) != 0 ? *(void *)(v50 - 8) : v50 - 32 * (v52 & 0x7FFFFFF);
        uint64_t v66 = *(void *)(v53 + 32);
        if (v66)
        {
          if (!v114) {
            goto LABEL_76;
          }
          unsigned int v67 = ((v66 >> 4) ^ (v66 >> 9)) & v42;
          uint64_t v68 = *(void *)(v112 + 8 * v67);
          if (v66 != v68)
          {
            int v86 = 1;
            while (v68 != -4096)
            {
              unsigned int v87 = v67 + v86++;
              unsigned int v67 = v87 & v42;
              uint64_t v68 = *(void *)(v112 + 8 * v67);
              if (v66 == v68) {
                goto LABEL_127;
              }
            }
            goto LABEL_76;
          }
        }
      }
LABEL_127:
      if ((v52 & 0x40000000) != 0)
      {
        uint64_t v70 = *(void *)(v50 - 8);
        uint64_t v69 = v52 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v69 = v52 & 0x7FFFFFF;
        uint64_t v70 = v50 - 32 * v69;
      }
      if (v51) {
        uint64_t v71 = 2;
      }
      else {
        uint64_t v71 = 1;
      }
      if (v71 != v69)
      {
        if (v114)
        {
          int v72 = (void *)(v70 + 32 * v69);
          unsigned int v73 = (void *)(v70 + 32 * v71);
          while (1)
          {
            unsigned int v74 = ((*v73 >> 4) ^ (*v73 >> 9)) & v42;
            uint64_t v75 = *(void *)(v112 + 8 * v74);
            if (*v73 != v75) {
              break;
            }
LABEL_139:
            v73 += 4;
            if (v73 == v72) {
              goto LABEL_134;
            }
          }
          int v76 = 1;
          while (v75 != -4096)
          {
            unsigned int v77 = v74 + v76++;
            unsigned int v74 = v77 & v42;
            uint64_t v75 = *(void *)(v112 + 8 * v74);
            if (*v73 == v75) {
              goto LABEL_139;
            }
          }
        }
        goto LABEL_76;
      }
LABEL_134:
      uint64_t v41 = *(void *)(v41 + 8);
      if (v41 == v14) {
        goto LABEL_174;
      }
    }
    if (v41 && v44 == 80)
    {
LABEL_103:
      while (1)
      {
        uint64_t v43 = *(void *)(v43 + 8);
        if (!v43) {
          goto LABEL_134;
        }
        uint64_t v54 = *(void *)(v43 + 24);
        if (v54 && *(unsigned char *)(v54 + 16) == 37)
        {
          if (!v114) {
            goto LABEL_76;
          }
          uint64_t v55 = *(void *)(v54 + 40);
          unsigned int v56 = ((v55 >> 4) ^ (v55 >> 9)) & v42;
          uint64_t v57 = *(void *)(v112 + 8 * v56);
          if (v55 != v57)
          {
            int v58 = 1;
            while (v57 != -4096)
            {
              unsigned int v59 = v56 + v58++;
              unsigned int v56 = v59 & v42;
              uint64_t v57 = *(void *)(v112 + 8 * v56);
              if (v55 == v57) {
                goto LABEL_103;
              }
            }
            goto LABEL_76;
          }
        }
      }
    }
    if (v41 && v44 == 79)
    {
LABEL_114:
      while (1)
      {
        uint64_t v43 = *(void *)(v43 + 8);
        if (!v43) {
          goto LABEL_134;
        }
        uint64_t v60 = *(void *)(v43 + 24);
        if (v60 && *(unsigned char *)(v60 + 16) == 36)
        {
          if (!v114) {
            goto LABEL_76;
          }
          uint64_t v61 = *(void *)(v60 + 40);
          unsigned int v62 = ((v61 >> 4) ^ (v61 >> 9)) & v42;
          uint64_t v63 = *(void *)(v112 + 8 * v62);
          if (v61 != v63)
          {
            int v64 = 1;
            while (v63 != -4096)
            {
              unsigned int v65 = v62 + v64++;
              unsigned int v62 = v65 & v42;
              uint64_t v63 = *(void *)(v112 + 8 * v62);
              if (v61 == v63) {
                goto LABEL_114;
              }
            }
            goto LABEL_76;
          }
        }
      }
    }
    if (v44 == 36) {
      uint64_t v78 = v43;
    }
    else {
      uint64_t v78 = 0;
    }
    if (!v41 || v44 != 36)
    {
      if (v44 != 84) {
        uint64_t v43 = 0;
      }
      if (v41)
      {
        if (v44 == 84)
        {
          uint64_t v84 = *(void *)(v43 - 32);
          if (v84)
          {
            if (!*(unsigned char *)(v84 + 16) && *(void *)(v84 + 24) == *(void *)(v43 + 72))
            {
              int v85 = *(_DWORD *)(v84 + 36);
              if (v85 == 315)
              {
                if (!v110) {
                  goto LABEL_76;
                }
              }
              else if (v85 == 73)
              {
                goto LABEL_76;
              }
            }
          }
        }
      }
      goto LABEL_134;
    }
    if ((*(_WORD *)(v78 + 18) & 1) == 0) {
      goto LABEL_134;
    }
    uint64_t v79 = *(void *)(v78 - 32 * (*(_DWORD *)(v78 + 20) & 0x7FFFFFF) + 32);
    if (!v79) {
      goto LABEL_134;
    }
    if (!v114) {
      goto LABEL_76;
    }
    unsigned int v80 = ((v79 >> 4) ^ (v79 >> 9)) & v42;
    uint64_t v81 = *(void *)(v112 + 8 * v80);
    if (v79 == v81) {
      goto LABEL_134;
    }
    int v82 = 1;
    while (v81 != -4096)
    {
      unsigned int v83 = v80 + v82++;
      unsigned int v80 = v83 & v42;
      uint64_t v81 = *(void *)(v112 + 8 * v80);
      if (v79 == v81) {
        goto LABEL_134;
      }
    }
LABEL_76:
    char v40 = 0;
LABEL_175:
    if (v123 != v125) {
      free(v123);
    }
    if (v119 != v118) {
      free(v119);
    }
    if (v40)
    {
      int v88 = v115;
      if (v13 == *v115)
      {
        for (uint64_t i = *(void *)(v13 + 48); ; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v95 = i - 24;
          if (!i) {
            uint64_t v95 = 0;
          }
          if (*(unsigned char *)(v95 + 16) != 83) {
            break;
          }
        }
        unsigned int v96 = *(unsigned __int8 *)(i - 8) - 38;
        BOOL v97 = v96 > 0x38;
        uint64_t v98 = (1 << v96) & 0x100060000000001;
        if (!v97 && v98 != 0) {
          break;
        }
      }
      else
      {
        uint64_t v89 = *(void *)(v13 + 8);
        if (v89)
        {
          while (1)
          {
            uint64_t v90 = *(void *)(v89 + 24);
            unsigned int v91 = *(unsigned __int8 *)(v90 + 16);
            BOOL v92 = v90 && v91 >= 0x1C;
            if (v92 && v91 - 29 < 0xB) {
              break;
            }
            uint64_t v89 = *(void *)(v89 + 8);
            if (!v89) {
              goto LABEL_202;
            }
          }
          if (v114)
          {
            int v100 = v114 - 1;
LABEL_206:
            uint64_t v101 = *(void *)(v90 + 40);
            unsigned int v102 = ((v101 >> 4) ^ (v101 >> 9)) & v100;
            uint64_t v103 = *(void *)(v112 + 8 * v102);
            if (v101 == v103) {
              goto LABEL_207;
            }
            int v107 = 1;
            while (v103 != -4096)
            {
              unsigned int v108 = v102 + v107++;
              unsigned int v102 = v108 & v100;
              uint64_t v103 = *(void *)(v112 + 8 * v102);
              if (v101 == v103)
              {
LABEL_207:
                while (1)
                {
                  uint64_t v89 = *(void *)(v89 + 8);
                  if (!v89) {
                    goto LABEL_202;
                  }
                  uint64_t v90 = *(void *)(v89 + 24);
                  unsigned int v104 = *(unsigned __int8 *)(v90 + 16);
                  if (v90) {
                    BOOL v105 = v104 >= 0x1C;
                  }
                  else {
                    BOOL v105 = 0;
                  }
                  if (v105 && v104 - 29 < 0xB) {
                    goto LABEL_206;
                  }
                }
              }
            }
          }
          break;
        }
      }
LABEL_202:
      if (++v12 == v111)
      {
        uint64_t v12 = v116;
        goto LABEL_223;
      }
      continue;
    }
    break;
  }
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return sub_1CC189978(&v112);
}

llvm::CodeExtractorAnalysisCache *llvm::CodeExtractorAnalysisCache::CodeExtractorAnalysisCache(llvm::CodeExtractorAnalysisCache *this, llvm::Function *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  *(void *)this = (char *)this + 16;
  *((void *)this + 1) = 0x1000000000;
  unint64_t v3 = (char *)a2 + 72;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((_DWORD *)this + 40) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((_DWORD *)this + 46) = 0;
  unint64_t v4 = (char *)*((void *)a2 + 10);
  if (v4 != (char *)a2 + 72)
  {
    do
    {
      if (v4) {
        int v5 = (llvm::BasicBlock *)(v4 - 24);
      }
      else {
        int v5 = 0;
      }
      llvm::BasicBlock::instructionsWithoutDebug(v5, 1, (uint64_t)&v19);
      long long v16 = v19;
      if (v21)
      {
        if (v21 == v20)
        {
          int v18 = v17;
          (*(void (**)(void *, void *))(v20[0] + 24))(v20, v17);
        }
        else
        {
          int v18 = (void *)(*(uint64_t (**)(void))(*v21 + 16))();
        }
      }
      else
      {
        int v18 = 0;
      }
      uint64_t v13 = v22;
      if (v24)
      {
        if (v24 == v23)
        {
          uint64_t v15 = v14;
          (*(void (**)(void *, void *))(v23[0] + 24))(v23, v14);
        }
        else
        {
          uint64_t v15 = (void *)(*(uint64_t (**)(void))(*v24 + 16))();
        }
      }
      else
      {
        uint64_t v15 = 0;
      }
      uint64_t v6 = v16;
LABEL_16:
      while (v6 != v13)
      {
        if (v6) {
          uint64_t v7 = v6 - 24;
        }
        else {
          uint64_t v7 = 0;
        }
        if (v6 && *(unsigned char *)(v7 + 16) == 59)
        {
          unint64_t v8 = *((unsigned int *)this + 2);
          if (v8 >= *((unsigned int *)this + 3)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)this + 8 * v8) = v7;
          ++*((_DWORD *)this + 2);
          uint64_t v6 = v16;
        }
        while (1)
        {
          uint64_t v6 = *(void *)(v6 + 8);
          *(void *)&long long v16 = v6;
          if (v6 == *((void *)&v16 + 1)) {
            break;
          }
          if (!v18)
          {
            sub_1CB920400();
            return (llvm::CodeExtractorAnalysisCache *)llvm::CodeExtractorAnalysisCache::findSideEffectInfoForBlock(v11, v12);
          }
          char v9 = (*(uint64_t (**)(void))(*v18 + 48))();
          uint64_t v6 = v16;
          if (v9) {
            goto LABEL_16;
          }
        }
      }
      if (v15 == v14)
      {
        (*(void (**)(void *))(v14[0] + 32))(v14);
      }
      else if (v15)
      {
        (*(void (**)(void))(*v15 + 40))();
      }
      if (v18 == v17)
      {
        (*(void (**)(void *))(v17[0] + 32))(v17);
      }
      else if (v18)
      {
        (*(void (**)(void))(*v18 + 40))();
      }
      if (v24 == v23)
      {
        (*(void (**)(void *))(v23[0] + 32))(v23);
      }
      else if (v24)
      {
        (*(void (**)(void))(*v24 + 40))();
      }
      if (v21 == v20)
      {
        (*(void (**)(void *))(v20[0] + 32))(v20);
      }
      else if (v21)
      {
        (*(void (**)(void))(*v21 + 40))();
      }
      llvm::CodeExtractorAnalysisCache::findSideEffectInfoForBlock(this, v5);
      unint64_t v4 = (char *)*((void *)v4 + 1);
    }
    while (v4 != v3);
  }
  return this;
}

void *llvm::CodeExtractorAnalysisCache::findSideEffectInfoForBlock(llvm::CodeExtractorAnalysisCache *this, llvm::BasicBlock *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  llvm::BasicBlock::instructionsWithoutDebug(a2, 1, (uint64_t)&v26);
  long long v23 = v26;
  if (v28)
  {
    if (v28 == v27)
    {
      uint64_t v25 = v24;
      (*(void (**)(void))(*v28 + 24))();
    }
    else
    {
      uint64_t v25 = (void *)(*(uint64_t (**)(void))(*v28 + 16))();
    }
  }
  else
  {
    uint64_t v25 = 0;
  }
  long long v20 = v29;
  if (v31)
  {
    if (v31 == v30)
    {
      long long v22 = v21;
      (*(void (**)(void))(*v31 + 24))();
    }
    else
    {
      long long v22 = (void *)(*(uint64_t (**)(void))(*v31 + 16))();
    }
  }
  else
  {
    long long v22 = 0;
  }
  uint64_t v4 = v23;
  if ((void)v23 == (void)v20) {
    goto LABEL_36;
  }
  while (2)
  {
    int v5 = (llvm::Instruction *)(v4 - 24);
    if (v4) {
      uint64_t v6 = v4 - 24;
    }
    else {
      uint64_t v6 = 0;
    }
    int v7 = *(unsigned __int8 *)(v6 + 16);
    if ((v7 & 0xFE) == 0x3C)
    {
      unint64_t v8 = *(unsigned __int8 **)(v6 - 32);
      if (v8[16] < 0x15u) {
        goto LABEL_25;
      }
      int v18 = 0;
      int v18 = llvm::Value::stripInBoundsConstantOffsets((llvm::Value *)v8);
      if (*((unsigned char *)v18 + 16) == 59)
      {
        uint64_t v17 = a2;
        char v9 = sub_1CD87ABB0((uint64_t)this + 144, (uint64_t *)&v17);
        sub_1CBF5FAF4((uint64_t)(v9 + 1), &v18, (uint64_t)v19);
        goto LABEL_25;
      }
      uint64_t v13 = (_DWORD *)((char *)this + 168);
      uint64_t v17 = a2;
      uint64_t v14 = &v17;
LABEL_35:
      sub_1CBB23C3C(v13, v14, (uint64_t)v19);
      break;
    }
    if (v7 != 84
      || (uint64_t v10 = *(void *)(v6 - 32)) == 0
      || *(unsigned char *)(v10 + 16)
      || *(void *)(v10 + 24) != *(void *)(v6 + 72)
      || (*(unsigned char *)(v10 + 33) & 0x20) == 0)
    {
      if (!llvm::Instruction::mayHaveSideEffects((llvm::Instruction *)v6)) {
        goto LABEL_25;
      }
LABEL_33:
      uint64_t v13 = (_DWORD *)((char *)this + 168);
      int v18 = a2;
      uint64_t v14 = &v18;
      goto LABEL_35;
    }
    if (!llvm::Instruction::isLifetimeStartOrEnd(v5)) {
      goto LABEL_33;
    }
LABEL_25:
    uint64_t v11 = *((void *)&v23 + 1);
    uint64_t v4 = *(void *)(v23 + 8);
    *(void *)&long long v23 = v4;
    while (v4 != v11)
    {
      if (!v25)
      {
        sub_1CB920400();
        goto LABEL_50;
      }
      char v12 = (*(uint64_t (**)(void))(*v25 + 48))();
      uint64_t v4 = v23;
      if (v12) {
        break;
      }
      uint64_t v4 = *(void *)(v23 + 8);
      *(void *)&long long v23 = v4;
      uint64_t v11 = *((void *)&v23 + 1);
    }
    if (v4 != (void)v20) {
      continue;
    }
    break;
  }
LABEL_36:
  if (v22 == v21)
  {
    (*(void (**)(void *))(v21[0] + 32))(v21);
  }
  else if (v22)
  {
    (*(void (**)(void))(*v22 + 40))();
  }
  if (v25 == v24)
  {
    (*(void (**)(void *))(v24[0] + 32))(v24);
  }
  else if (v25)
  {
    (*(void (**)(void))(*v25 + 40))();
  }
  uint64_t v15 = v31;
  if (v31 == v30)
  {
    (*(void (**)(void *))(v30[0] + 32))(v30);
  }
  else
  {
LABEL_50:
    if (v15) {
      (*(void (**)(void *))(*v15 + 40))(v15);
    }
  }
  uint64_t result = v28;
  if (v28 == v27) {
    return (void *)(*(uint64_t (**)(void *))(v27[0] + 32))(v27);
  }
  if (v28) {
    return (void *)(*(uint64_t (**)(void))(*v28 + 40))();
  }
  return result;
}

uint64_t llvm::CodeExtractor::findOrCreateBlockForHoisting(llvm::CodeExtractor *this, llvm::BasicBlock *a2)
{
  long long v20 = a2;
  uint64_t v4 = *((void *)a2 + 1);
  if (!v4) {
    goto LABEL_27;
  }
  while (1)
  {
    uint64_t v5 = *(void *)(v4 + 24);
    unsigned int v6 = *(unsigned __int8 *)(v5 + 16);
    BOOL v7 = v5 && v6 >= 0x1C;
    if (v7 && v6 - 29 < 0xB) {
      break;
    }
    uint64_t v4 = *(void *)(v4 + 8);
    if (!v4) {
      goto LABEL_27;
    }
  }
  uint64_t v9 = 0;
LABEL_12:
  uint64_t v10 = *(void *)(v5 + 40);
  v18[0] = v10;
  uint64_t v21 = 0;
  if (!sub_1CBFFBBB4((uint64_t *)this + 7, v18, &v21)) {
    goto LABEL_17;
  }
  if (v9)
  {
    if (v9 == v10) {
      goto LABEL_17;
    }
    goto LABEL_27;
  }
  uint64_t v9 = v10;
LABEL_17:
  while (1)
  {
    uint64_t v4 = *(void *)(v4 + 8);
    if (!v4) {
      break;
    }
    uint64_t v5 = *(void *)(v4 + 24);
    unsigned int v11 = *(unsigned __int8 *)(v5 + 16);
    if (v5) {
      BOOL v12 = v11 >= 0x1C;
    }
    else {
      BOOL v12 = 0;
    }
    if (v12 && v11 - 29 < 0xB) {
      goto LABEL_12;
    }
  }
  if (!v9)
  {
LABEL_27:
    for (uint64_t i = (void *)*((void *)a2 + 6); i != (void *)((char *)a2 + 40); uint64_t i = (void *)i[1])
    {
      uint64_t v15 = i - 3;
      if (i) {
        long long v16 = i - 3;
      }
      else {
        long long v16 = 0;
      }
      if (*((unsigned char *)v16 + 16) != 83) {
        goto LABEL_35;
      }
    }
    uint64_t v15 = 0;
LABEL_35:
    __int16 v19 = 257;
    llvm::BasicBlock::splitBasicBlock((uint64_t)a2, (uint64_t)(v15 + 3), (uint64_t)v18, 0);
  }
  return v9;
}

uint64_t llvm::CodeExtractor::getLifetimeMarkers@<X0>(uint64_t this@<X0>, const llvm::CodeExtractorAnalysisCache *a2@<X1>, llvm::Instruction *a3@<X2>, llvm::BasicBlock *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = *((void *)a3 + 1);
  if (!v6) {
    goto LABEL_36;
  }
  unint64_t v8 = (llvm::CodeExtractor *)this;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  BOOL v12 = (uint64_t *)(this + 56);
  do
  {
    uint64_t v13 = v11;
    uint64_t v14 = v10;
    uint64_t v10 = *(void *)(v6 + 24);
    unsigned int v15 = *(unsigned __int8 *)(v10 + 16);
    if (v15 != 84)
    {
      if (v15 < 0x1C) {
        goto LABEL_36;
      }
LABEL_13:
      uint64_t v18 = *(void *)(v10 + 40);
      uint64_t v26 = 0;
      uint64_t v27 = v18;
      this = sub_1CBFFBBB4(v12, &v27, &v26);
      uint64_t v10 = v14;
      if ((this & 1) == 0) {
        goto LABEL_36;
      }
      goto LABEL_14;
    }
    uint64_t v16 = *(void *)(v10 - 32);
    if (!v16
      || *(unsigned char *)(v16 + 16)
      || *(void *)(v16 + 24) != *(void *)(v10 + 72)
      || (*(unsigned char *)(v16 + 33) & 0x20) == 0)
    {
      goto LABEL_13;
    }
    int v17 = *(_DWORD *)(v16 + 36);
    if (v17 != 167)
    {
      if (v17 == 168)
      {
        uint64_t v11 = *(void *)(v6 + 24);
        uint64_t v10 = v14;
        if (v13) {
          goto LABEL_36;
        }
        goto LABEL_14;
      }
      if ((v17 - 55) < 4)
      {
        uint64_t v10 = v14;
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    if (v14) {
      goto LABEL_36;
    }
LABEL_14:
    uint64_t v6 = *(void *)(v6 + 8);
  }
  while (v6);
  if (!v11 || !v10) {
    goto LABEL_36;
  }
  BOOL v20 = 1;
  if (*(unsigned __int8 *)(v11 + 16) >= 0x1Cu)
  {
    uint64_t v19 = *(void *)(v11 + 40);
    uint64_t v26 = 0;
    uint64_t v27 = v19;
    if (sub_1CBFFBBB4(v12, &v27, &v26)) {
      BOOL v20 = 0;
    }
  }
  if (*(unsigned __int8 *)(v10 + 16) < 0x1Cu)
  {
    char v22 = 0;
    LOBYTE(v23) = 1;
  }
  else
  {
    uint64_t v21 = *(void *)(v10 + 40);
    uint64_t v26 = 0;
    uint64_t v27 = v21;
    this = sub_1CBFFBBB4(v12, &v27, &v26);
    char v22 = this;
    int v23 = this ^ 1;
    if (!v20 && !v23) {
      goto LABEL_29;
    }
  }
  this = llvm::CodeExtractor::isLegalToShrinkwrapLifetimeMarkers(v8, a2, a3);
  if (this & 1) != 0 && (a4 ? (char v24 = 1) : (char v24 = v22), (v24))
  {
LABEL_29:
    *(unsigned char *)a5 = v20;
    *(unsigned char *)(a5 + 1) = v23;
    *(void *)(a5 + 8) = v11;
    *(void *)(a5 + 16) = v10;
  }
  else
  {
LABEL_36:
    *(_WORD *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
  }
  return this;
}

void llvm::CodeExtractor::findAllocas(uint64_t a1, unsigned int *a2, void *a3, void *a4, llvm::BasicBlock **a5)
{
  v64[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (uint64_t *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *(void *)(a1 + 88);
  uint64_t v8 = *(void *)(*(void *)v6 + 56);
  if (v6 == v7)
  {
LABEL_29:
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = *(void *)(*(void *)v6 + 40);
      if (v10 != *(void *)v6 + 40)
      {
        if (v10) {
          uint64_t v11 = v10 - 24;
        }
        else {
          uint64_t v11 = 0;
        }
        if (*(unsigned char *)(v11 + 16) != 30)
        {
          int v14 = 2;
          switch(*(unsigned char *)(v11 + 16))
          {
            case 0x1E:
              __break(1u);
              JUMPOUT(0x1CD1472E8);
            case 0x1F:
              int v14 = (*(_DWORD *)(v11 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_23;
            case 0x20:
            case 0x26:
              int v14 = (*(_DWORD *)(v11 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_23;
            case 0x21:
              goto LABEL_12;
            case 0x24:
              int v14 = *(_WORD *)(v11 + 18) & 1;
              goto LABEL_23;
            case 0x25:
              int v14 = 1;
              goto LABEL_12;
            case 0x27:
              int v14 = *(_DWORD *)(v11 + 80) + 1;
LABEL_23:
              if (!v14) {
                goto LABEL_19;
              }
              goto LABEL_12;
            default:
              goto LABEL_19;
          }
        }
        if ((*(_DWORD *)(v11 + 20) & 0x7FFFFFF) == 3) {
          int v14 = 2;
        }
        else {
          int v14 = 1;
        }
LABEL_12:
        for (unsigned int i = 0; i != v14; ++i)
        {
          uint64_t Successor = (llvm::BasicBlock *)llvm::Instruction::getSuccessor((llvm::Instruction *)v11, i);
          unsigned int v56 = Successor;
          unsigned int v62 = 0;
          if ((sub_1CBFFBBB4(v5, &v56, &v62) & 1) == 0)
          {
            if (v9)
            {
              if (v9 != Successor) {
                goto LABEL_29;
              }
            }
            else
            {
              uint64_t v9 = Successor;
            }
          }
        }
      }
LABEL_19:
      v6 += 8;
    }
    while (v6 != v7);
  }
  *a5 = v9;
  uint64_t v15 = a2[2];
  if (v15)
  {
    uint64_t v16 = *(llvm::Instruction ***)a2;
    uint64_t v17 = *(void *)a2 + 8 * v15;
    do
    {
      uint64_t v18 = *v16;
      uint64_t v19 = (void *)*((void *)*v16 + 5);
      unsigned int v56 = v19;
      unsigned int v62 = 0;
      if ((sub_1CBFFBBB4(v5, &v56, &v62) & 1) == 0 && v19[7] == v8)
      {
        llvm::CodeExtractor::getLifetimeMarkers(a1, (const llvm::CodeExtractorAnalysisCache *)a2, v18, *a5, (uint64_t)v52);
        if (v53)
        {
          if (v52[0])
          {
            unsigned int v56 = v53;
            sub_1CBF5F714(a3, &v56);
          }
          if (v52[1])
          {
            unsigned int v56 = v54;
            sub_1CBF5F714(a4, &v56);
          }
          unsigned int v56 = v18;
          sub_1CBF5F714(a3, &v56);
        }
        else
        {
          unsigned int v62 = (const llvm::Twine **)v64;
          uint64_t v63 = 0x200000000;
          uint64_t v20 = *((void *)v18 + 1);
          if (v20)
          {
            do
            {
              uint64_t v24 = *(void *)(v20 + 24);
              if (v24) {
                BOOL v25 = *(unsigned __int8 *)(v24 + 16) >= 0x1Cu;
              }
              else {
                BOOL v25 = 0;
              }
              if (v25)
              {
                unsigned int v56 = *(void **)(v24 + 40);
                unsigned int v59 = 0;
                if (sub_1CBFFBBB4(v5, &v56, &v59))
                {
                  if (llvm::Value::stripInBoundsConstantOffsets((llvm::Value *)v24) == v18)
                  {
                    for (uint64_t j = *(void *)(v24 + 8); j; uint64_t j = *(void *)(j + 8))
                    {
                      uint64_t v22 = *(void *)(j + 24);
                      if (*(unsigned char *)(v22 + 16) == 84)
                      {
                        uint64_t v23 = *(void *)(v22 - 32);
                        if (v23)
                        {
                          if (!*(unsigned char *)(v23 + 16)
                            && *(void *)(v23 + 24) == *(void *)(v22 + 72)
                            && (*(unsigned char *)(v23 + 33) & 0x20) != 0
                            && llvm::Instruction::isLifetimeStartOrEnd(*(llvm::Instruction **)(j + 24)))
                          {
                            unsigned int v56 = *(void **)(v22 + 40);
                            unsigned int v59 = 0;
                            if ((sub_1CBFFBBB4(v5, &v56, &v59) & 1) == 0)
                            {
                              if (v63 >= (unint64_t)HIDWORD(v63)) {
                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                              }
                              v62[v63] = (const llvm::Twine *)v22;
                              LODWORD(v63) = v63 + 1;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              uint64_t v20 = *(void *)(v20 + 8);
            }
            while (v20);
            if (v63)
            {
              uint64_t v26 = v62;
              uint64_t v27 = 8 * v63;
              do
              {
                uint64_t v28 = *v26;
                long long v29 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)(***(void ***)(v8 + 40) + 1912), 0);
                unsigned int v56 = "lt.cast";
                v58[8] = 259;
                PointerCast = llvm::CastInst::CreatePointerCast(v18, v29, (const char **)&v56, v28, v30);
                int v32 = *((_DWORD *)v28 + 5);
                if ((v32 & 0x40000000) != 0) {
                  uint64_t v33 = (llvm::Value **)*((void *)v28 - 1);
                }
                else {
                  uint64_t v33 = (llvm::Value **)((char *)v28 - 32 * (v32 & 0x7FFFFFF));
                }
                llvm::User::replaceUsesOfWith(v28, v33[4], PointerCast);
                ++v26;
                v27 -= 8;
              }
              while (v27);
            }
          }
          unsigned int v59 = v61;
          uint64_t v60 = 0x200000000;
          unsigned int v56 = v58;
          uint64_t v57 = 0x200000000;
          uint64_t v34 = *((void *)v18 + 1);
          if (v34)
          {
            do
            {
              uint64_t v35 = *(void *)(v34 + 24);
              if (llvm::Value::stripInBoundsConstantOffsets((llvm::Value *)v35) == v18
                && (llvm::CodeExtractor::getLifetimeMarkers(a1, (const llvm::CodeExtractorAnalysisCache *)a2, (llvm::Instruction *)v35, *a5, (uint64_t)v51), v51[1]))
              {
                if (v60 >= (unint64_t)HIDWORD(v60)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)&v59[8 * v60] = v35;
                LODWORD(v60) = v60 + 1;
                unint64_t v37 = sub_1CD483108((uint64_t)&v56, (unint64_t)v51);
                uint64_t v38 = (char *)v56 + 24 * v57;
                long long v39 = *(_OWORD *)v37;
                *((void *)v38 + 2) = *(void *)(v37 + 16);
                *(_OWORD *)uint64_t v38 = v39;
                LODWORD(v57) = v57 + 1;
              }
              else
              {
                if (v35) {
                  BOOL v36 = *(unsigned __int8 *)(v35 + 16) >= 0x1Cu;
                }
                else {
                  BOOL v36 = 0;
                }
                if (!v36 || (v51[0] = *(void *)(v35 + 40), uint64_t v55 = 0, (sub_1CBFFBBB4(v5, v51, &v55) & 1) == 0))
                {
                  LODWORD(v60) = 0;
                  goto LABEL_84;
                }
              }
              uint64_t v34 = *(void *)(v34 + 8);
            }
            while (v34);
            if (v60)
            {
              v51[0] = v18;
              sub_1CBF5F714(a3, v51);
              if (v60)
              {
                uint64_t v40 = 0;
                uint64_t v41 = 0;
                uint64_t v42 = 8 * v60;
                do
                {
                  uint64_t v43 = *(void *)&v59[v41];
                  int v44 = v56;
                  if (*(void *)((char *)v56 + v40 + 8))
                  {
                    if (*((unsigned char *)v56 + v40))
                    {
                      v51[0] = *(void *)((char *)v56 + v40 + 8);
                      sub_1CBF5F714(a3, v51);
                    }
                    if (v44[v40 + 1])
                    {
                      v51[0] = *(void *)&v44[v40 + 16];
                      sub_1CBF5F714(a4, v51);
                    }
                  }
                  if (v43) {
                    BOOL v45 = *(unsigned __int8 *)(v43 + 16) >= 0x1Cu;
                  }
                  else {
                    BOOL v45 = 0;
                  }
                  if (!v45 || (v51[0] = *(void *)(v43 + 40), uint64_t v55 = 0, (sub_1CBFFBBB4(v5, v51, &v55) & 1) == 0))
                  {
                    v51[0] = v43;
                    sub_1CBF5F714(a3, v51);
                  }
                  v41 += 8;
                  v40 += 24;
                }
                while (v42 != v41);
              }
            }
          }
LABEL_84:
          if (v56 != v58) {
            free(v56);
          }
          if (v59 != v61) {
            free(v59);
          }
          if (v62 != v64) {
            free(v62);
          }
        }
      }
      ++v16;
    }
    while (v16 != (llvm::Instruction **)v17);
  }
}

uint64_t llvm::CodeExtractor::isEligible(llvm::CodeExtractor *this)
{
  uint64_t v1 = *((void *)this + 10);
  if (v1 == *((void *)this + 11)) {
    return 0;
  }
  if (*((unsigned char *)this + 48))
  {
    uint64_t v2 = *(void *)(*(void *)v1 + 56);
    if (*(_DWORD *)(*(void *)(v2 + 24) + 8) >= 0x100u)
    {
      uint64_t v3 = v2 + 72;
      uint64_t v4 = *(void *)(v2 + 80);
      if (v4 != v2 + 72)
      {
        uint64_t v5 = (uint64_t *)((char *)this + 56);
        do
        {
          if (v4) {
            uint64_t v6 = v4 - 24;
          }
          else {
            uint64_t v6 = 0;
          }
          uint64_t v11 = 0;
          uint64_t v12 = v6;
          if ((sub_1CBFFBBB4(v5, &v12, &v11) & 1) == 0)
          {
            for (uint64_t i = *(void *)(v6 + 48); i != v6 + 40; uint64_t i = *(void *)(i + 8))
            {
              uint64_t v8 = i - 24;
              if (!i) {
                uint64_t v8 = 0;
              }
              if (*(unsigned char *)(v8 + 16) == 84)
              {
                uint64_t v9 = *(void *)(v8 - 32);
                if (v9)
                {
                  if (!*(unsigned char *)(v9 + 16)
                    && *(void *)(v9 + 24) == *(void *)(v8 + 72)
                    && (*(_DWORD *)(v9 + 36) & 0xFFFFFFFE) == 0x13A)
                  {
                    return 0;
                  }
                }
              }
            }
          }
          uint64_t v4 = *(void *)(v4 + 8);
        }
        while (v4 != v3);
      }
    }
  }
  return 1;
}

uint64_t llvm::CodeExtractor::severSplitPHINodesOfEntry(llvm::CodeExtractor *this, llvm::BasicBlock **a2)
{
  uint64_t result = (uint64_t)*a2;
  uint64_t v5 = *(void *)(*((void *)*a2 + 7) + 80);
  if (v5) {
    uint64_t v6 = v5 - 24;
  }
  else {
    uint64_t v6 = 0;
  }
  if (result == v6) {
    goto LABEL_22;
  }
  uint64_t v7 = *(void *)(result + 48);
  uint64_t v8 = v7 - 24;
  if (!v7) {
    uint64_t v8 = 0;
  }
  int v9 = *(unsigned __int8 *)(v8 + 16);
  if (v9 == 83) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v7)
  {
    if (v9 == 83)
    {
      uint64_t v11 = *(_DWORD *)(v10 + 20) & 0x7FFFFFF;
      if (v11)
      {
        uint64_t v12 = 0;
        int v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = this;
        uint64_t v16 = (uint64_t *)((char *)this + 56);
        uint64_t v17 = 8 * v11;
        do
        {
          int v18 = *(_DWORD *)(v10 + 20);
          if ((v18 & 0x40000000) != 0) {
            uint64_t v19 = *(void *)(v10 - 8);
          }
          else {
            uint64_t v19 = v10 - 32 * (v18 & 0x7FFFFFF);
          }
          uint64_t v24 = *(void *)(v19 + 32 * *(unsigned int *)(v10 + 60) + v12);
          uint64_t v26 = 0;
          uint64_t result = sub_1CBFFBBB4(v16, &v24, &v26);
          v14 += result ^ 1;
          v13 += result;
          v12 += 8;
        }
        while (v17 != v12);
        if (v14 >= 2)
        {
          this = v15;
          uint64_t result = (uint64_t)*a2;
LABEL_22:
          for (uint64_t i = *(void *)(result + 48); i != result + 40; uint64_t i = *(void *)(i + 8))
          {
            uint64_t v21 = (llvm::BasicBlock *)(i - 24);
            if (i) {
              uint64_t v22 = i - 24;
            }
            else {
              uint64_t v22 = 0;
            }
            if (*(unsigned char *)(v22 + 16) != 83) {
              goto LABEL_30;
            }
          }
          uint64_t v21 = 0;
LABEL_30:
          uint64_t v23 = *(void *)this;
          __int16 v25 = 257;
          sub_1CD126150((llvm *)result, v21, 0, v23, 0, 0, (llvm::Twine *)&v24, 0);
        }
      }
    }
  }
  return result;
}

void llvm::CodeExtractor::severSplitPHINodesOfExits(uint64_t a1, void *a2)
{
  v41[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a2[1];
  if (v2 == *a2) {
    uint64_t v3 = (unsigned int *)a2 + 5;
  }
  else {
    uint64_t v3 = (unsigned int *)(a2 + 2);
  }
  uint64_t v4 = *v3;
  if (v4)
  {
    uint64_t v5 = 8 * v4;
    for (uint64_t i = (unint64_t *)a2[1]; *i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v5 -= 8;
      if (!v5) {
        return;
      }
    }
  }
  else
  {
    uint64_t i = (unint64_t *)a2[1];
  }
  uint64_t v7 = (unint64_t *)(v2 + 8 * v4);
  if (i != v7)
  {
    uint64_t v34 = v7;
    uint64_t v35 = i;
    uint64_t v8 = (uint64_t *)(a1 + 56);
    unint64_t v9 = *i;
LABEL_12:
    if (*(void *)(v9 + 40) != v9 + 40)
    {
      uint64_t v10 = *(void *)(v9 + 48);
      uint64_t v11 = v10 - 24;
      uint64_t v12 = v10 ? v10 - 24 : 0;
      if (v10 && *(unsigned char *)(v12 + 16) == 83)
      {
        do
        {
          long long v39 = v41;
          uint64_t v40 = 0x200000000;
          int v13 = *(_DWORD *)(v11 + 20);
          unint64_t v14 = v13 & 0x7FFFFFF;
          if ((v13 & 0x7FFFFFF) != 0)
          {
            unint64_t v15 = 0;
            do
            {
              if ((v13 & 0x40000000) != 0) {
                uint64_t v16 = *(void *)(v11 - 8);
              }
              else {
                uint64_t v16 = v11 - 32 * v14;
              }
              uint64_t v17 = *(void **)(v16 + 32 * *(unsigned int *)(v11 + 60) + 8 * v15);
              uint64_t v36 = 0;
              v37[0] = v17;
              if (sub_1CBFFBBB4(v8, v37, &v36))
              {
                if (v40 >= (unint64_t)HIDWORD(v40)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                v39[v40] = v15;
                LODWORD(v40) = v40 + 1;
              }
              ++v15;
              int v13 = *(_DWORD *)(v11 + 20);
              unint64_t v14 = v13 & 0x7FFFFFF;
            }
            while (v15 < v14);
            if (v40 >= 2)
            {
              uint64_t v18 = **(void **)v9;
              if ((*(unsigned char *)(v9 + 23) & 0x10) != 0)
              {
                uint64_t v19 = *(void *)(*(void *)v18 + 152);
                uint64_t v20 = *(unsigned int *)(*(void *)v18 + 168);
                if (v20)
                {
                  LODWORD(v21) = (v20 - 1) & ((v9 >> 4) ^ (v9 >> 9));
                  uint64_t v22 = (uint64_t *)(v19 + 16 * v21);
                  uint64_t v23 = *v22;
                  if (*v22 != v9)
                  {
                    int v24 = 1;
                    do
                    {
                      if (v23 == -4096) {
                        goto LABEL_37;
                      }
                      int v25 = v21 + v24++;
                      uint64_t v21 = v25 & (v20 - 1);
                      uint64_t v23 = *(void *)(v19 + 16 * v21);
                    }
                    while (v23 != v9);
                    uint64_t v22 = (uint64_t *)(v19 + 16 * v21);
                  }
                }
                else
                {
LABEL_37:
                  uint64_t v22 = (uint64_t *)(v19 + 16 * v20);
                }
                uint64_t v26 = (void *)v22[1];
                long long v29 = (void *)*v26;
                uint64_t v28 = (char *)(v26 + 2);
                uint64_t v27 = v29;
              }
              else
              {
                uint64_t v27 = 0;
                uint64_t v28 = &byte_1CFBCE98E;
              }
              __int16 v38 = 773;
              v37[0] = v28;
              v37[1] = v27;
              void v37[2] = ".split";
              operator new();
            }
          }
          if (v39 != (_DWORD *)v41) {
            free(v39);
          }
          uint64_t v30 = *(void *)(v11 + 32);
          uint64_t v11 = v30 - 24;
          if (v30) {
            uint64_t v31 = v30 - 24;
          }
          else {
            uint64_t v31 = 0;
          }
        }
        while (v30 && *(unsigned char *)(v31 + 16) == 83);
      }
    }
    int v32 = v35 + 1;
    while (v32 != v34)
    {
      unint64_t v33 = *v32++;
      unint64_t v9 = v33;
      if (v33 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v35 = v32 - 1;
        goto LABEL_12;
      }
    }
  }
}

uint64_t llvm::CodeExtractor::splitReturnBlocks(uint64_t this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(uint64_t **)(this + 80);
  for (uint64_t i = *(uint64_t **)(this + 88); v1 != i; ++v1)
  {
    uint64_t v3 = *v1;
    uint64_t v4 = *(void *)(*v1 + 40);
    if (v4 != *v1 + 40)
    {
      uint64_t v5 = v4 - 24;
      if (!v4) {
        uint64_t v5 = 0;
      }
      unsigned int v6 = *(unsigned __int8 *)(v5 + 16) - 40;
      if (v6 < 0xFFFFFFF5) {
        uint64_t v5 = 0;
      }
      if (v4)
      {
        if (*(unsigned char *)(v5 + 16) == 29 && v6 >= 0xFFFFFFF5)
        {
          if ((*(unsigned char *)(v3 + 23) & 0x10) != 0)
          {
            uint64_t v8 = ***(void ***)v3;
            uint64_t v9 = *(void *)(v8 + 152);
            uint64_t v10 = *(unsigned int *)(v8 + 168);
            if (v10)
            {
              LODWORD(v11) = (v10 - 1) & ((v3 >> 4) ^ (v3 >> 9));
              uint64_t v12 = (uint64_t *)(v9 + 16 * v11);
              uint64_t v13 = *v12;
              if (*v12 != v3)
              {
                int v14 = 1;
                do
                {
                  if (v13 == -4096) {
                    goto LABEL_20;
                  }
                  int v15 = v11 + v14++;
                  uint64_t v11 = v15 & (v10 - 1);
                  uint64_t v13 = *(void *)(v9 + 16 * v11);
                }
                while (v13 != v3);
                uint64_t v12 = (uint64_t *)(v9 + 16 * v11);
              }
            }
            else
            {
LABEL_20:
              uint64_t v12 = (uint64_t *)(v9 + 16 * v10);
            }
            uint64_t v16 = (void *)v12[1];
            uint64_t v19 = (void *)*v16;
            uint64_t v18 = (char *)(v16 + 2);
            uint64_t v17 = v19;
          }
          else
          {
            uint64_t v17 = 0;
            uint64_t v18 = &byte_1CFBCE98E;
          }
          __int16 v21 = 773;
          v20[0] = v18;
          v20[1] = v17;
          v20[2] = ".ret";
          llvm::BasicBlock::splitBasicBlock(v3, v5 + 24, (uint64_t)v20, 0);
        }
      }
    }
  }
  return this;
}

llvm::LLVMContext ***llvm::CodeExtractor::constructFunction(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Value *a4, llvm::Value *a5, llvm::Value *a6, uint64_t ***a7, uint64_t **a8)
{
  uint64_t v8 = a2;
  uint64_t v9 = a1;
  uint64_t v323 = *MEMORY[0x1E4F143B8];
  unsigned int v10 = *(_DWORD *)(a1 + 104);
  if (v10 >= 2)
  {
    if (v10 == 2) {
      uint64_t v11 = ***(void ***)a4 + 1888;
    }
    else {
      uint64_t v11 = ***(void ***)a4 + 1936;
    }
  }
  else
  {
    uint64_t v11 = ***(void ***)a4 + 1576;
  }
  *(void *)(a1 + 112) = v11;
  v313[0] = 0;
  v313[1] = 0;
  int v314 = 0;
  unsigned int v316 = 0;
  uint64_t v317 = 0;
  unsigned int v315 = 0;
  uint64_t v12 = *(const char ***)(a2 + 24);
  uint64_t v13 = *(const char ***)(a2 + 32);
  if (v12 != v13)
  {
    int v14 = 0;
    int v15 = 0;
    uint64_t v16 = 0;
    uint64_t v301 = 0;
    uint64_t v17 = 0;
    __p = 0;
    uint64_t v294 = (uint64_t *)(a1 + 192);
    while (1)
    {
      *(void *)&long long __dst = 0;
      uint64_t v18 = *v12;
      *(void *)&long long __dst = *v12;
      if (!*(unsigned char *)(v9 + 8)) {
        goto LABEL_9;
      }
      uint64_t v306 = (char *)v18;
      NullValue = 0;
      if (sub_1CD420258(v294, &v306, &NullValue))
      {
        uint64_t v27 = NullValue;
        uint64_t v28 = *(void *)(v9 + 192);
        uint64_t v29 = *(unsigned int *)(v9 + 208);
      }
      else
      {
        uint64_t v28 = *(void *)(v9 + 192);
        uint64_t v29 = *(unsigned int *)(v9 + 208);
        uint64_t v27 = (llvm::Value *)(v28 + 8 * v29);
      }
      uint64_t v30 = (llvm::Value *)(v28 + 8 * v29);
      uint64_t v18 = (const char *)__dst;
      if (v27 == v30)
      {
        uint64_t v31 = *(void *)__dst;
        if (v17 >= v301)
        {
          uint64_t v33 = (v17 - __p) >> 3;
          unint64_t v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 61) {
            goto LABEL_377;
          }
          if ((v301 - __p) >> 2 > v34) {
            unint64_t v34 = (v301 - __p) >> 2;
          }
          if ((unint64_t)(v301 - __p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v35 = v34;
          }
          if (v35)
          {
            if (v35 >> 61) {
              goto LABEL_378;
            }
            uint64_t v36 = (char *)operator new(8 * v35);
          }
          else
          {
            uint64_t v36 = 0;
          }
          unint64_t v37 = &v36[8 * v33];
          *(void *)unint64_t v37 = v31;
          int v32 = v37 + 8;
          if (v17 == __p)
          {
            __p = v37;
            uint64_t v9 = a1;
          }
          else
          {
            uint64_t v9 = a1;
            do
            {
              uint64_t v38 = *((void *)v17 - 1);
              v17 -= 8;
              *((void *)v37 - 1) = v38;
              v37 -= 8;
            }
            while (v17 != __p);
            uint64_t v17 = __p;
            __p = v37;
          }
          uint64_t v301 = &v36[8 * v35];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          *(void *)uint64_t v17 = v31;
          int v32 = v17 + 8;
          uint64_t v9 = a1;
        }
        sub_1CBF5F714(v313, &__dst);
        uint64_t v17 = v32;
      }
      else
      {
LABEL_9:
        unint64_t v19 = *(void *)v18;
        if (v15 >= (unint64_t *)v14)
        {
          uint64_t v20 = v15 - v16;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 61) {
            goto LABEL_377;
          }
          if ((v14 - (char *)v16) >> 2 > v21) {
            unint64_t v21 = (v14 - (char *)v16) >> 2;
          }
          if ((unint64_t)(v14 - (char *)v16) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v21;
          }
          if (v22)
          {
            if (v22 >> 61) {
              goto LABEL_378;
            }
            uint64_t v23 = (char *)operator new(8 * v22);
          }
          else
          {
            uint64_t v23 = 0;
          }
          int v24 = (unint64_t *)&v23[8 * v20];
          *int v24 = v19;
          int v25 = v24 + 1;
          if (v15 != v16)
          {
            do
            {
              unint64_t v26 = *--v15;
              *--int v24 = v26;
            }
            while (v15 != v16);
            int v15 = v16;
          }
          uint64_t v16 = v24;
          int v14 = &v23[8 * v22];
          if (v15) {
            operator delete(v15);
          }
          int v15 = v25;
          uint64_t v9 = a1;
        }
        else
        {
          *v15++ = v19;
        }
      }
      if (++v12 == v13) {
        goto LABEL_54;
      }
    }
  }
  __p = 0;
  uint64_t v17 = 0;
  uint64_t v301 = 0;
  uint64_t v16 = 0;
  int v15 = 0;
  int v14 = 0;
LABEL_54:
  long long v39 = *(const char ***)(a3 + 24);
  uint64_t v40 = *(const char ***)(a3 + 32);
  if (v39 != v40)
  {
    unsigned int v295 = (uint64_t *)(v9 + 192);
    do
    {
      *(void *)&long long __dst = 0;
      uint64_t v41 = *v39;
      *(void *)&long long __dst = *v39;
      if (!*(unsigned char *)(v9 + 8)) {
        goto LABEL_57;
      }
      uint64_t v306 = (char *)v41;
      NullValue = 0;
      if (sub_1CD420258(v295, &v306, &NullValue))
      {
        __int16 v51 = NullValue;
        uint64_t v52 = *(void *)(v9 + 192);
        uint64_t v53 = *(unsigned int *)(v9 + 208);
      }
      else
      {
        uint64_t v52 = *(void *)(v9 + 192);
        uint64_t v53 = *(unsigned int *)(v9 + 208);
        __int16 v51 = (llvm::Value *)(v52 + 8 * v53);
      }
      uint64_t v54 = (llvm::Value *)(v52 + 8 * v53);
      uint64_t v41 = (const char *)__dst;
      if (v51 == v54)
      {
        uint64_t v55 = *(void *)__dst;
        if (v17 >= v301)
        {
          uint64_t v57 = (v17 - __p) >> 3;
          unint64_t v58 = v57 + 1;
          if ((unint64_t)(v57 + 1) >> 61) {
            goto LABEL_377;
          }
          if ((v301 - __p) >> 2 > v58) {
            unint64_t v58 = (v301 - __p) >> 2;
          }
          if ((unint64_t)(v301 - __p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v59 = v58;
          }
          if (v59)
          {
            if (v59 >> 61) {
              goto LABEL_378;
            }
            unint64_t v302 = v59;
            uint64_t v60 = (char *)operator new(8 * v59);
            unint64_t v59 = v302;
          }
          else
          {
            uint64_t v60 = 0;
          }
          uint64_t v61 = &v60[8 * v57];
          *(void *)uint64_t v61 = v55;
          unsigned int v56 = v61 + 8;
          if (v17 == __p)
          {
            __p = v61;
            uint64_t v9 = a1;
          }
          else
          {
            uint64_t v9 = a1;
            do
            {
              uint64_t v62 = *((void *)v17 - 1);
              v17 -= 8;
              *((void *)v61 - 1) = v62;
              v61 -= 8;
            }
            while (v17 != __p);
            uint64_t v17 = __p;
            __p = v61;
          }
          uint64_t v301 = &v60[8 * v59];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          *(void *)uint64_t v17 = v55;
          unsigned int v56 = v17 + 8;
          uint64_t v9 = a1;
        }
        sub_1CBF5F714(v313, &__dst);
        uint64_t v17 = v56;
      }
      else
      {
LABEL_57:
        unint64_t v42 = llvm::PointerType::get(*(llvm::PointerType **)v41, 0);
        unint64_t v43 = v42;
        if (v15 >= (unint64_t *)v14)
        {
          uint64_t v44 = v15 - v16;
          unint64_t v45 = v44 + 1;
          if ((unint64_t)(v44 + 1) >> 61) {
            goto LABEL_377;
          }
          if ((v14 - (char *)v16) >> 2 > v45) {
            unint64_t v45 = (v14 - (char *)v16) >> 2;
          }
          if ((unint64_t)(v14 - (char *)v16) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v46 = v45;
          }
          if (v46)
          {
            if (v46 >> 61) {
              goto LABEL_378;
            }
            uint64_t v47 = (char *)operator new(8 * v46);
          }
          else
          {
            uint64_t v47 = 0;
          }
          int v48 = (unint64_t *)&v47[8 * v44];
          unint64_t *v48 = v43;
          unsigned int v49 = v48 + 1;
          if (v15 != v16)
          {
            do
            {
              unint64_t v50 = *--v15;
              *--int v48 = v50;
            }
            while (v15 != v16);
            int v15 = v16;
          }
          uint64_t v16 = v48;
          int v14 = &v47[8 * v46];
          if (v15) {
            operator delete(v15);
          }
          int v15 = v49;
          uint64_t v9 = a1;
        }
        else
        {
          *v15++ = v42;
        }
      }
      ++v39;
    }
    while (v39 != v40);
  }
  uint64_t v63 = 0;
  uint64_t v303 = v15 - v16;
  if (*(unsigned char *)(v9 + 8))
  {
    int v64 = v16;
    unsigned int v65 = v15;
    uint64_t v66 = a7;
    unint64_t v67 = (unint64_t)a8;
    if (__p != v17)
    {
      uint64_t v63 = (llvm::PointerType *)llvm::StructType::get(*a8, (uint64_t)__p, (v17 - __p) >> 3, 0);
      unint64_t v68 = llvm::PointerType::get(v63, 0);
      unint64_t v69 = v68;
      if (v15 >= (unint64_t *)v14)
      {
        unint64_t v70 = v303 + 1;
        if ((unint64_t)(v303 + 1) >> 61) {
          goto LABEL_377;
        }
        if ((v14 - (char *)v16) >> 2 > v70) {
          unint64_t v70 = (v14 - (char *)v16) >> 2;
        }
        if ((unint64_t)(v14 - (char *)v16) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (v70)
        {
          if (v70 >> 61) {
LABEL_378:
          }
            sub_1CB833614();
          uint64_t v71 = (char *)operator new(8 * v70);
        }
        else
        {
          uint64_t v71 = 0;
        }
        int v64 = (unint64_t *)&v71[8 * v303];
        *int v64 = v69;
        unsigned int v65 = v64 + 1;
        if (v15 != v16)
        {
          int v72 = v15;
          do
          {
            unint64_t v73 = *--v72;
            *--int v64 = v73;
          }
          while (v72 != v16);
        }
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        unint64_t *v15 = v68;
        unsigned int v65 = v15 + 1;
        int v64 = v16;
      }
    }
  }
  else
  {
    int v64 = v16;
    unsigned int v65 = v15;
    uint64_t v66 = a7;
    unint64_t v67 = (unint64_t)a8;
  }
  if (*(unsigned char *)(a1 + 48)) {
    BOOL v74 = *((_DWORD *)v66[3] + 2) > 0xFFu;
  }
  else {
    BOOL v74 = 0;
  }
  uint64_t v75 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(a1 + 112), (uint64_t)v64, v65 - v64, v74);
  int v76 = (const void **)(a1 + 168);
  uint64_t v290 = (uint64_t)v63;
  if (*(char *)(a1 + 191) < 0)
  {
    unint64_t v77 = *(void *)(a1 + 176);
    if (v77)
    {
      sub_1CB8BDF7C((uint64_t)&__dst, *v76, v77);
      goto LABEL_156;
    }
  }
  else if (*(unsigned char *)(a1 + 191))
  {
    long long __dst = *(_OWORD *)v76;
    unint64_t v312 = *(void *)(a1 + 184);
    goto LABEL_156;
  }
  if ((*((unsigned char *)a4 + 23) & 0x10) == 0) {
    goto LABEL_145;
  }
  uint64_t v78 = ***(void ***)a4;
  uint64_t v79 = *(void *)(v78 + 152);
  uint64_t v80 = *(unsigned int *)(v78 + 168);
  unsigned int v81 = a4 >> 4;
  if (!v80)
  {
LABEL_137:
    uint64_t v82 = v80;
LABEL_138:
    if (**(void **)(v79 + 16 * v82 + 8))
    {
      if (!v80) {
        goto LABEL_146;
      }
      goto LABEL_140;
    }
LABEL_145:
    HIBYTE(v312) = 9;
    strcpy((char *)&__dst, "extracted");
    goto LABEL_156;
  }
  LODWORD(v82) = (v80 - 1) & (v81 ^ (a4 >> 9));
  uint64_t v83 = v79 + 16 * v82;
  uint64_t v84 = *(llvm::Value **)v83;
  if (*(llvm::Value **)v83 != a4)
  {
    int v85 = 1;
    while (v84 != (llvm::Value *)-4096)
    {
      int v86 = v82 + v85++;
      uint64_t v82 = v86 & (v80 - 1);
      uint64_t v84 = *(llvm::Value **)(v79 + 16 * v82);
      if (v84 == a4) {
        goto LABEL_138;
      }
    }
    goto LABEL_137;
  }
  if (!**(void **)(v83 + 8)) {
    goto LABEL_145;
  }
LABEL_140:
  LODWORD(v87) = (v80 - 1) & (v81 ^ (a4 >> 9));
  int v88 = (llvm::Value **)(v79 + 16 * v87);
  uint64_t v89 = *v88;
  if (*v88 == a4) {
    goto LABEL_147;
  }
  int v90 = 1;
  while (v89 != (llvm::Value *)-4096)
  {
    int v91 = v87 + v90++;
    uint64_t v87 = v91 & (v80 - 1);
    uint64_t v89 = *(llvm::Value **)(v79 + 16 * v87);
    if (v89 == a4)
    {
      int v88 = (llvm::Value **)(v79 + 16 * v87);
      goto LABEL_147;
    }
  }
LABEL_146:
  int v88 = (llvm::Value **)(v79 + 16 * v80);
LABEL_147:
  BOOL v92 = (unint64_t *)v88[1];
  unint64_t v95 = *v92;
  int v94 = v92 + 2;
  size_t v93 = v95;
  if (v95 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_377:
  }
    abort();
  if (v93 >= 0x17)
  {
    uint64_t v97 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v93 | 7) != 0x17) {
      uint64_t v97 = v93 | 7;
    }
    unint64_t v98 = v67;
    uint64_t v99 = v97 + 1;
    p_dst = (long long *)operator new(v97 + 1);
    unint64_t v100 = v99 | 0x8000000000000000;
    unint64_t v67 = v98;
    uint64_t v66 = a7;
    *((void *)&__dst + 1) = v93;
    unint64_t v312 = v100;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v312) = v93;
    p_dst = &__dst;
    if (!v93) {
      goto LABEL_155;
    }
  }
  memmove(p_dst, v94, v93);
LABEL_155:
  *((unsigned char *)p_dst + v93) = 0;
LABEL_156:
  uint64_t v101 = (llvm::Type *)(*((_DWORD *)*v66 + 2) >> 8);
  uint64_t v284 = v64;
  if ((*((unsigned char *)v66 + 23) & 0x10) != 0)
  {
    uint64_t v102 = ***v66;
    uint64_t v103 = *(void *)(v102 + 152);
    uint64_t v104 = *(unsigned int *)(v102 + 168);
    if (v104)
    {
      LODWORD(v105) = (v104 - 1) & ((v66 >> 4) ^ (v66 >> 9));
      uint64_t v106 = (uint64_t ****)(v103 + 16 * v105);
      int v107 = *v106;
      if (*v106 == v66)
      {
LABEL_164:
        int v110 = v106[1];
        uint64_t v113 = *v110;
        uint64_t v111 = (char *)(v110 + 2);
        uint64_t v112 = v113;
        goto LABEL_165;
      }
      int v108 = 1;
      while (v107 != (uint64_t ***)-4096)
      {
        int v109 = v105 + v108++;
        uint64_t v105 = v109 & (v104 - 1);
        int v107 = *(uint64_t ****)(v103 + 16 * v105);
        if (v107 == v66)
        {
          uint64_t v106 = (uint64_t ****)(v103 + 16 * v105);
          goto LABEL_164;
        }
      }
    }
    uint64_t v106 = (uint64_t ****)(v103 + 16 * v104);
    goto LABEL_164;
  }
  uint64_t v112 = 0;
  uint64_t v111 = &byte_1CFBCE98E;
LABEL_165:
  __int16 v322 = 773;
  NullValue = (llvm::Value *)v111;
  int v320 = v112;
  BOOL v321 = ".";
  uint64_t v306 = (char *)&NullValue;
  uint64_t v308 = (const char *)&__dst;
  __int16 v310 = 1026;
  int v114 = (char *)operator new(0x80uLL);
  *((_DWORD *)v114 + 7) = *((_DWORD *)v114 + 7) & 0x38000000 | 0x40000000;
  uint64_t v292 = v114;
  unint64_t v293 = (llvm::LLVMContext ***)(v114 + 8);
  *(void *)int v114 = 0;
  llvm::Function::Function((unint64_t *)v114 + 1, v75, 7, v101, (const char **)&v306, v67);
  unint64_t v115 = v66[14];
  if (v115)
  {
    if (*((_DWORD *)v115 + 2))
    {
      int v116 = v115[5];
      if (v116)
      {
        uint64_t v117 = *((unsigned int *)v116 + 2);
        if (v117)
        {
          uint64_t v118 = v116 + 6;
          for (uint64_t i = 8 * v117; i; i -= 8)
          {
            uint64_t v120 = *v118;
            if (*v118)
            {
              if (*(unsigned char *)(v120 + 8) == 2)
              {
                if (*(_DWORD *)(v120 + 12) == 5 && *(_DWORD *)(v120 + 24) == 1853188212 && *(unsigned char *)(v120 + 28) == 107) {
                  goto LABEL_182;
                }
              }
              else
              {
                int v122 = *(_DWORD *)(v120 + 12);
                BOOL v123 = (v122 - 3) > 0x3F
                    || ((1 << (v122 - 3)) & 0xC020160122024B0BLL) == 0;
                if (!v123 || v122 == 75 || v122 == 78) {
                  goto LABEL_182;
                }
              }
            }
            *((void *)v292 + 15) = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(v292 + 120), **v293, -1, v120);
LABEL_182:
            ++v118;
          }
        }
      }
    }
  }
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v292 + 80), a5);
  uint64_t v126 = *((void *)v292 + 10);
  *((void *)a5 + 3) = v126;
  *((void *)a5 + 4) = v292 + 80;
  *(void *)(v126 + 8) = (char *)a5 + 24;
  *((void *)v292 + 10) = (char *)a5 + 24;
  if (v292[26]) {
    llvm::Function::BuildLazyArguments((llvm::Function *)v293);
  }
  unint64_t v127 = *(void *)(v8 + 32) - *(void *)(v8 + 24);
  uint64_t v128 = a1;
  if ((v127 & 0x7FFFFFFF8) != 0)
  {
    uint64_t v129 = 0;
    unsigned int v298 = 0;
    uint64_t v130 = (llvm::Value *)*((void *)v292 + 12);
    uint64_t v131 = (uint64_t *)((char *)v130 + 40 * v303);
    uint64_t v300 = (v127 >> 3);
    uint64_t v304 = v131;
    uint64_t v289 = v8;
    do
    {
      if (*(unsigned char *)(v128 + 8) && v314)
      {
        uint64_t v132 = *(void *)(*(void *)(v8 + 24) + 8 * v129);
        unsigned int v133 = ((v132 >> 4) ^ (v132 >> 9)) & (v314 - 1);
        uint64_t v134 = *(void *)(v313[0] + 8 * v133);
        if (v132 == v134)
        {
LABEL_194:
          if (v133 != v314)
          {
            NullValue = 0;
            int v320 = 0;
            NullValue = llvm::Constant::getNullValue((llvm::Constant *)(***(void ***)a4 + 1960), v124, v125);
            uint64_t v145 = ***(void ***)a4;
            uint64_t v146 = *(llvm::ConstantInt **)(v145 + 1960);
            unint64_t v147 = *(unsigned int *)(v145 + 1968);
            LODWORD(v307) = v147 >> 8;
            if (v147 >> 8 > 0x40) {
              operator new[]();
            }
            if (v147 <= 0xFF) {
              LODWORD(v148) = 0;
            }
            else {
              unint64_t v148 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v147) + 63);
            }
            uint64_t v306 = (char *)(v148 & v298);
            int v149 = llvm::ConstantInt::get(v146, (llvm::LLVMContext *)&v306, v144);
            if (v307 >= 0x41 && v306) {
              MEMORY[0x1D25D9CB0](v306, 0x1000C8000313F17);
            }
            int v320 = v149;
            uint64_t v150 = *((void *)v292 + 11);
            uint64_t v151 = v150 - 24;
            if (!v150) {
              uint64_t v151 = 0;
            }
            uint64_t v152 = *(void *)(v151 + 40);
            if (v152 == v151 + 40)
            {
              unint64_t v153 = 0;
            }
            else
            {
              if (v152) {
                unint64_t v153 = (unsigned __int8 *)(v152 - 24);
              }
              else {
                unint64_t v153 = 0;
              }
              if (v153[16] - 29 >= 0xB) {
                unint64_t v153 = 0;
              }
            }
            uint64_t v296 = (llvm::Instruction *)v153;
            uint64_t v154 = *(uint64_t ****)(*(void *)(v8 + 24) + 8 * v129);
            if ((*((unsigned char *)v154 + 23) & 0x10) != 0)
            {
              uint64_t v155 = ***v154;
              uint64_t v156 = *(void *)(v155 + 152);
              uint64_t v157 = *(unsigned int *)(v155 + 168);
              if (!v157) {
                goto LABEL_235;
              }
              LODWORD(v158) = (v157 - 1) & ((v154 >> 4) ^ (v154 >> 9));
              uint64_t v159 = (uint64_t ****)(v156 + 16 * v158);
              uint64_t v160 = *v159;
              if (*v159 != v154)
              {
                int v161 = 1;
                while (v160 != (uint64_t ***)-4096)
                {
                  int v162 = v158 + v161++;
                  uint64_t v158 = v162 & (v157 - 1);
                  uint64_t v160 = *(uint64_t ****)(v156 + 16 * v158);
                  if (v160 == v154)
                  {
                    uint64_t v159 = (uint64_t ****)(v156 + 16 * v158);
                    goto LABEL_236;
                  }
                }
LABEL_235:
                uint64_t v159 = (uint64_t ****)(v156 + 16 * v157);
              }
LABEL_236:
              unint64_t v163 = v159[1];
              unint64_t v166 = *v163;
              int v165 = (char *)(v163 + 2);
              uint64_t v164 = v166;
            }
            else
            {
              uint64_t v164 = 0;
              int v165 = &byte_1CFBCE98E;
            }
            __int16 v310 = 1283;
            uint64_t v306 = "gep_";
            uint64_t v308 = v165;
            unint64_t v309 = v164;
            uint64_t v167 = operator new(0xB0uLL);
            uint64_t v168 = v167;
            uint64_t v169 = 0;
            uint64_t v170 = (llvm::Value *)(v167 + 24);
            v167[29] = v167[29] & 0x38000000 | 3;
            do
            {
              unsigned int v171 = &v167[v169];
              *unsigned int v171 = 0;
              v171[1] = 0;
              v171[2] = 0;
              v171[3] = v170;
              v169 += 8;
            }
            while (v169 != 24);
            uint64_t v172 = v290;
            sub_1CB845A7C(v290, v131, (uint64_t)&NullValue, 2);
            int v173 = (uint64_t **)v131;
            *(_OWORD *)(v168 + 30) = 0u;
            uint64_t v174 = v168 + 30;
            *((void *)v168 + 12) = v175;
            *((void *)v168 + 13) = 0;
            unsigned int v176 = v168[29] & 0xC0000000 | 3;
            v168[28] = 62;
            v168[29] = v176;
            *(_OWORD *)(v168 + 34) = 0u;
            v168[38] = 0;
            int v177 = v296;
            if (v296)
            {
              uint64_t v194 = *((void *)v296 + 5);
              *((void *)v168 + 17) = v194;
              *(_WORD *)(v194 + 18) &= ~0x8000u;
              if ((*((unsigned char *)v168 + 119) & 0x10) != 0)
              {
                uint64_t v196 = *(void *)(v194 + 56);
                if (v196)
                {
                  int v197 = *(llvm::ValueSymbolTable **)(v196 + 104);
                  if (v197)
                  {
                    llvm::ValueSymbolTable::reinsertValue(v197, v170);
                    int v177 = v296;
                  }
                }
              }
              uint64_t v195 = *((void *)v177 + 3);
              *((void *)v168 + 15) = v195;
              *((void *)v168 + 16) = (char *)v177 + 24;
              *(void *)(v195 + 8) = v174;
              *((void *)v177 + 3) = v174;
              uint64_t v172 = v290;
              int v173 = (uint64_t **)v304;
            }
            *((void *)v168 + 20) = v172;
            *((void *)v168 + 21) = llvm::GetElementPtrInst::getIndexedType(v172, (uint64_t)&NullValue, 2);
            llvm::GetElementPtrInst::init((uint64_t ***)v170, v173, (uint64_t *)&NullValue, 2, (const char **)&v306);
            unint64_t v178 = operator new(0x60uLL);
            unint64_t v135 = (llvm::Value *)(v178 + 8);
            v178[13] = v178[13] & 0x38000000 | 1;
            *(void *)unint64_t v178 = 0;
            *((void *)v178 + 1) = 0;
            *((void *)v178 + 2) = 0;
            *((void *)v178 + 3) = v178 + 8;
            uint64_t v179 = *(llvm::Type **)(*(void *)(v172 + 16) + 8 * v298);
            uint64_t v8 = v289;
            uint64_t v180 = *(uint64_t ****)(*(void *)(v289 + 24) + 8 * v129);
            if ((*((unsigned char *)v180 + 23) & 0x10) != 0)
            {
              uint64_t v181 = ***v180;
              uint64_t v182 = *(void *)(v181 + 152);
              uint64_t v183 = *(unsigned int *)(v181 + 168);
              unsigned int v184 = v296;
              if (!v183) {
                goto LABEL_247;
              }
              LODWORD(v185) = (v183 - 1) & ((v180 >> 4) ^ (v180 >> 9));
              uint64_t v186 = (uint64_t ****)(v182 + 16 * v185);
              uint64_t v187 = *v186;
              if (*v186 != v180)
              {
                int v188 = 1;
                while (v187 != (uint64_t ***)-4096)
                {
                  int v189 = v185 + v188++;
                  uint64_t v185 = v189 & (v183 - 1);
                  uint64_t v187 = *(uint64_t ****)(v182 + 16 * v185);
                  if (v187 == v180)
                  {
                    uint64_t v186 = (uint64_t ****)(v182 + 16 * v185);
                    goto LABEL_248;
                  }
                }
LABEL_247:
                uint64_t v186 = (uint64_t ****)(v182 + 16 * v183);
              }
LABEL_248:
              int v190 = v186[1];
              BOOL v193 = *v190;
              unsigned int v192 = (char *)(v190 + 2);
              uint64_t v191 = v193;
            }
            else
            {
              uint64_t v191 = 0;
              unsigned int v192 = &byte_1CFBCE98E;
              unsigned int v184 = v296;
            }
            __int16 v310 = 1283;
            uint64_t v306 = "loadgep_";
            uint64_t v308 = v192;
            unint64_t v309 = v191;
            llvm::LoadInst::LoadInst((llvm::LoadInst *)(v178 + 8), v179, v170, (const char **)&v306, 0, v184);
            ++v298;
            goto LABEL_196;
          }
        }
        else
        {
          int v198 = 1;
          while (v134 != -4096)
          {
            unsigned int v199 = v133 + v198++;
            unsigned int v133 = v199 & (v314 - 1);
            uint64_t v134 = *(void *)(v313[0] + 8 * v133);
            if (v132 == v134) {
              goto LABEL_194;
            }
          }
        }
      }
      unint64_t v135 = v130;
      uint64_t v130 = (llvm::Value *)((char *)v130 + 40);
LABEL_196:
      uint64_t v136 = *(void *)(*(void *)(*(void *)(v8 + 24) + 8 * v129) + 8);
      unsigned int v307 = 0;
      uint64_t v308 = 0;
      uint64_t v306 = 0;
      unint64_t v137 = 0;
      if (v136)
      {
        uint64_t v138 = v136;
        do
        {
          ++v137;
          uint64_t v138 = *(void *)(v138 + 8);
        }
        while (v138);
      }
      sub_1CC9A301C(&v306, v136, 0, v137);
      unint64_t v139 = v306;
      int v140 = (char *)v307;
      if (v306 != v307)
      {
        do
        {
          uint64_t v141 = *(llvm::User **)v139;
          if (*(void *)v139) {
            BOOL v142 = *(unsigned __int8 *)(*(void *)v139 + 16) >= 0x1Cu;
          }
          else {
            BOOL v142 = 0;
          }
          if (v142)
          {
            uint64_t v143 = (llvm::Value *)*((void *)v141 + 5);
            uint64_t v318 = 0;
            NullValue = v143;
            if (sub_1CBFFBBB4((uint64_t *)(a1 + 56), &NullValue, &v318)) {
              llvm::User::replaceUsesOfWith(v141, *(llvm::Value **)(*(void *)(v8 + 24) + 8 * v129), v135);
            }
          }
          v139 += 8;
        }
        while (v139 != v140);
        unint64_t v139 = v306;
      }
      if (v139)
      {
        unsigned int v307 = v139;
        operator delete(v139);
      }
      ++v129;
      uint64_t v131 = v304;
      uint64_t v128 = a1;
    }
    while (v129 != v300);
  }
  if (v15 != v16)
  {
    if (*((_WORD *)v292 + 13)) {
      llvm::Function::BuildLazyArguments((llvm::Function *)v293);
    }
    int v200 = (llvm::Value *)*((void *)v292 + 12);
    unint64_t v201 = *(void *)(v8 + 32) - *(void *)(v8 + 24);
    if ((v201 & 0x7FFFFFFF8) != 0)
    {
      uint64_t v202 = 0;
      uint64_t v203 = (v201 >> 3);
      while (1)
      {
        uint64_t v204 = *(uint64_t ****)(*(void *)(v8 + 24) + 8 * v202);
        unsigned int v205 = v204 >> 4;
        if (!v314) {
          goto LABEL_272;
        }
        unsigned int v206 = (v205 ^ (v204 >> 9)) & (v314 - 1);
        uint64_t v207 = *(uint64_t ****)(v313[0] + 8 * v206);
        if (v204 != v207) {
          break;
        }
LABEL_271:
        if (v206 == v314) {
          goto LABEL_272;
        }
LABEL_283:
        ++v202;
        int v200 = (llvm::Value *)((char *)v200 + 40);
        if (v202 == v203) {
          goto LABEL_307;
        }
      }
      int v234 = 1;
      while (v207 != (uint64_t ***)-4096)
      {
        unsigned int v235 = v206 + v234++;
        unsigned int v206 = v235 & (v314 - 1);
        uint64_t v207 = *(uint64_t ****)(v313[0] + 8 * v206);
        if (v204 == v207) {
          goto LABEL_271;
        }
      }
LABEL_272:
      if ((*((unsigned char *)v204 + 23) & 0x10) == 0)
      {
        int v217 = 0;
        unint64_t v218 = &byte_1CFBCE98E;
        goto LABEL_281;
      }
      uint64_t v208 = ***v204;
      uint64_t v209 = *(void *)(v208 + 152);
      uint64_t v210 = *(unsigned int *)(v208 + 168);
      if (v210)
      {
        LODWORD(v211) = (v210 - 1) & (v205 ^ (v204 >> 9));
        unsigned int v212 = (uint64_t ****)(v209 + 16 * v211);
        uint64_t v213 = *v212;
        if (*v212 == v204)
        {
LABEL_280:
          int v216 = v212[1];
          uint64_t v219 = (const char *)*v216;
          unint64_t v218 = (const char *)(v216 + 2);
          int v217 = v219;
LABEL_281:
          __int16 v310 = 261;
          uint64_t v306 = (char *)v218;
          unsigned int v307 = v217;
          llvm::Value::setNameImpl(v200, (const char **)&v306);
          if (!v200 || *((unsigned char *)v200 + 16)) {
            goto LABEL_283;
          }
          if ((*((unsigned char *)v200 + 23) & 0x10) == 0) {
            goto LABEL_301;
          }
          uint64_t v220 = ***(void ***)v200;
          uint64_t v221 = *(void *)(v220 + 152);
          uint64_t v222 = *(unsigned int *)(v220 + 168);
          if (v222)
          {
            LODWORD(v223) = (v222 - 1) & ((v200 >> 4) ^ (v200 >> 9));
            int v224 = (llvm::Value **)(v221 + 16 * v223);
            int v225 = *v224;
            if (*v224 == v200)
            {
LABEL_294:
              uint64_t v228 = v224[1];
              unint64_t v231 = *(void *)v228;
              uint64_t v229 = (char *)v228 + 16;
              unint64_t v230 = v231;
              if (v231 >= 5 && *(_DWORD *)v229 == *(_DWORD *)"llvm." && v229[4] == aLlvm_1[4])
              {
                *((_DWORD *)v200 + 8) |= 0x2000u;
                int v233 = llvm::Function::lookupIntrinsicID(v229, v230);
LABEL_302:
                *((_DWORD *)v200 + 9) = v233;
                goto LABEL_283;
              }
LABEL_301:
              int v233 = 0;
              *((_DWORD *)v200 + 8) &= ~0x2000u;
              goto LABEL_302;
            }
            int v226 = 1;
            while (v225 != (llvm::Value *)-4096)
            {
              int v227 = v223 + v226++;
              uint64_t v223 = v227 & (v222 - 1);
              int v225 = *(llvm::Value **)(v221 + 16 * v223);
              if (v225 == v200)
              {
                int v224 = (llvm::Value **)(v221 + 16 * v223);
                goto LABEL_294;
              }
            }
          }
          int v224 = (llvm::Value **)(v221 + 16 * v222);
          goto LABEL_294;
        }
        int v214 = 1;
        while (v213 != (uint64_t ***)-4096)
        {
          int v215 = v211 + v214++;
          uint64_t v211 = v215 & (v210 - 1);
          uint64_t v213 = *(uint64_t ****)(v209 + 16 * v211);
          if (v213 == v204)
          {
            unsigned int v212 = (uint64_t ****)(v209 + 16 * v211);
            goto LABEL_280;
          }
        }
      }
      unsigned int v212 = (uint64_t ****)(v209 + 16 * v210);
      goto LABEL_280;
    }
LABEL_307:
    unint64_t v236 = *(void *)(a3 + 32) - *(void *)(a3 + 24);
    if ((v236 & 0x7FFFFFFF8) != 0)
    {
      uint64_t v237 = 0;
      uint64_t v238 = (v236 >> 3);
      while (1)
      {
        uint64_t v239 = *(uint64_t ****)(*(void *)(a3 + 24) + 8 * v237);
        unsigned int v240 = v239 >> 4;
        if (!v314) {
          goto LABEL_312;
        }
        unsigned int v241 = (v240 ^ (v239 >> 9)) & (v314 - 1);
        uint64_t v242 = *(uint64_t ****)(v313[0] + 8 * v241);
        if (v239 != v242) {
          break;
        }
LABEL_311:
        if (v241 == v314) {
          goto LABEL_312;
        }
LABEL_323:
        ++v237;
        int v200 = (llvm::Value *)((char *)v200 + 40);
        if (v237 == v238) {
          goto LABEL_347;
        }
      }
      int v269 = 1;
      while (v242 != (uint64_t ***)-4096)
      {
        unsigned int v270 = v241 + v269++;
        unsigned int v241 = v270 & (v314 - 1);
        uint64_t v242 = *(uint64_t ****)(v313[0] + 8 * v241);
        if (v239 == v242) {
          goto LABEL_311;
        }
      }
LABEL_312:
      if ((*((unsigned char *)v239 + 23) & 0x10) == 0)
      {
        uint64_t v252 = 0;
        BOOL v253 = &byte_1CFBCE98E;
        goto LABEL_321;
      }
      uint64_t v243 = ***v239;
      uint64_t v244 = *(void *)(v243 + 152);
      uint64_t v245 = *(unsigned int *)(v243 + 168);
      if (v245)
      {
        LODWORD(v246) = (v245 - 1) & (v240 ^ (v239 >> 9));
        int v247 = (uint64_t ****)(v244 + 16 * v246);
        uint64_t v248 = *v247;
        if (*v247 == v239)
        {
LABEL_320:
          unsigned int v251 = v247[1];
          uint64_t v254 = (const char *)*v251;
          BOOL v253 = (const char *)(v251 + 2);
          uint64_t v252 = v254;
LABEL_321:
          __int16 v310 = 773;
          uint64_t v306 = (char *)v253;
          unsigned int v307 = v252;
          uint64_t v308 = ".out";
          llvm::Value::setNameImpl(v200, (const char **)&v306);
          if (!v200 || *((unsigned char *)v200 + 16)) {
            goto LABEL_323;
          }
          if ((*((unsigned char *)v200 + 23) & 0x10) == 0) {
            goto LABEL_341;
          }
          uint64_t v255 = ***(void ***)v200;
          uint64_t v256 = *(void *)(v255 + 152);
          uint64_t v257 = *(unsigned int *)(v255 + 168);
          if (v257)
          {
            LODWORD(v258) = (v257 - 1) & ((v200 >> 4) ^ (v200 >> 9));
            uint64_t v259 = (llvm::Value **)(v256 + 16 * v258);
            uint64_t v260 = *v259;
            if (*v259 == v200)
            {
LABEL_334:
              uint64_t v263 = v259[1];
              unint64_t v266 = *(void *)v263;
              uint64_t v264 = (char *)v263 + 16;
              unint64_t v265 = v266;
              if (v266 >= 5 && *(_DWORD *)v264 == *(_DWORD *)"llvm." && v264[4] == aLlvm_1[4])
              {
                *((_DWORD *)v200 + 8) |= 0x2000u;
                int v268 = llvm::Function::lookupIntrinsicID(v264, v265);
LABEL_342:
                *((_DWORD *)v200 + 9) = v268;
                goto LABEL_323;
              }
LABEL_341:
              int v268 = 0;
              *((_DWORD *)v200 + 8) &= ~0x2000u;
              goto LABEL_342;
            }
            int v261 = 1;
            while (v260 != (llvm::Value *)-4096)
            {
              int v262 = v258 + v261++;
              uint64_t v258 = v262 & (v257 - 1);
              uint64_t v260 = *(llvm::Value **)(v256 + 16 * v258);
              if (v260 == v200)
              {
                uint64_t v259 = (llvm::Value **)(v256 + 16 * v258);
                goto LABEL_334;
              }
            }
          }
          uint64_t v259 = (llvm::Value **)(v256 + 16 * v257);
          goto LABEL_334;
        }
        int v249 = 1;
        while (v248 != (uint64_t ***)-4096)
        {
          int v250 = v246 + v249++;
          uint64_t v246 = v250 & (v245 - 1);
          uint64_t v248 = *(uint64_t ****)(v244 + 16 * v246);
          if (v248 == v239)
          {
            int v247 = (uint64_t ****)(v244 + 16 * v246);
            goto LABEL_320;
          }
        }
      }
      int v247 = (uint64_t ****)(v244 + 16 * v245);
      goto LABEL_320;
    }
  }
LABEL_347:
  uint64_t v271 = *((void *)a4 + 1);
  unsigned int v307 = 0;
  uint64_t v308 = 0;
  uint64_t v306 = 0;
  unint64_t v272 = 0;
  if (v271)
  {
    uint64_t v273 = v271;
    int v274 = a7;
    int v275 = a6;
    do
    {
      ++v272;
      uint64_t v273 = *(void *)(v273 + 8);
    }
    while (v273);
  }
  else
  {
    int v274 = a7;
    int v275 = a6;
  }
  sub_1CC9A301C(&v306, v271, 0, v272);
  uint64_t v276 = v306;
  unint64_t v277 = (char *)v307;
  if (v306 != v307)
  {
    do
    {
      uint64_t v278 = *(llvm::User **)v276;
      unsigned int v279 = *(unsigned __int8 *)(*(void *)v276 + 16);
      if (*(void *)v276) {
        BOOL v280 = v279 >= 0x1C;
      }
      else {
        BOOL v280 = 0;
      }
      if (v280 && v279 - 29 <= 0xA)
      {
        uint64_t v282 = *((void *)v278 + 5);
        if (*(uint64_t ****)(v282 + 56) == v274)
        {
          uint64_t v318 = 0;
          NullValue = (llvm::Value *)v282;
          if ((sub_1CBFFBBB4((uint64_t *)(a1 + 56), &NullValue, &v318) & 1) == 0) {
            llvm::User::replaceUsesOfWith(v278, a4, v275);
          }
        }
      }
      v276 += 8;
    }
    while (v276 != v277);
    uint64_t v276 = v306;
  }
  if (v276)
  {
    unsigned int v307 = v276;
    operator delete(v276);
  }
  if (SHIBYTE(v312) < 0) {
    operator delete((void *)__dst);
  }
  if (v315)
  {
    unsigned int v316 = v315;
    operator delete(v315);
  }
  MEMORY[0x1D25D9CD0](v313[0], 8);
  if (__p) {
    operator delete(__p);
  }
  if (v284) {
    operator delete(v284);
  }
  return v293;
}

llvm::Value *llvm::CodeExtractor::emitCallAndSwitchStatement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v462[2] = *(void **)MEMORY[0x1E4F143B8];
  v454[0] = 0;
  v454[1] = 0;
  int v455 = 0;
  v457 = 0;
  uint64_t v458 = 0;
  v456 = 0;
  uint64_t v436 = *(void *)(a2 + 40);
  v433 = *(uint64_t **)v436;
  v451 = &v453;
  uint64_t v452 = 0x100000000;
  uint64_t v5 = *(void ***)(a4 + 24);
  unsigned int v6 = *(void ***)(a4 + 32);
  if (v5 != v6)
  {
    uint64_t v18 = a1;
    unsigned int v9 = 0;
    uint64_t v8 = 0;
    uint64_t v7 = 0;
    __p = 0;
    unint64_t v19 = (uint64_t *)(a1 + 192);
    while (1)
    {
      uint64_t v20 = *v5;
      v459 = (llvm::Value *)*v5;
      if (!*(unsigned char *)(v18 + 8)) {
        goto LABEL_10;
      }
      int v32 = v8;
      p_NullValue = v20;
      NullValue = 0;
      if (sub_1CD420258(v19, &p_NullValue, &NullValue))
      {
        uint64_t v33 = (uint64_t *)NullValue;
        uint64_t v34 = *(void *)(v18 + 192);
        uint64_t v35 = *(unsigned int *)(v18 + 208);
      }
      else
      {
        uint64_t v34 = *(void *)(v18 + 192);
        uint64_t v35 = *(unsigned int *)(v18 + 208);
        uint64_t v33 = (uint64_t *)(v34 + 8 * v35);
      }
      uint64_t v8 = v32;
      if (v33 == (uint64_t *)(v34 + 8 * v35))
      {
        sub_1CBF5F714(v454, &v459);
        uint64_t v8 = v32;
      }
      else
      {
LABEL_10:
        if (v7 >= (llvm::Value **)v8)
        {
          uint64_t v21 = ((char *)v7 - (char *)__p) >> 3;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 61) {
            goto LABEL_537;
          }
          if ((v8 - (char *)__p) >> 2 > v22) {
            unint64_t v22 = (v8 - (char *)__p) >> 2;
          }
          if ((unint64_t)(v8 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v22;
          }
          if (v23)
          {
            if (v23 >> 61) {
              goto LABEL_544;
            }
            int v24 = (char *)operator new(8 * v23);
            int v25 = __p;
          }
          else
          {
            int v25 = __p;
            int v24 = 0;
          }
          unint64_t v26 = (uint64_t *)&v24[8 * v21];
          uint64_t *v26 = (uint64_t)v459;
          uint64_t v27 = (llvm::Value **)(v26 + 1);
          if (v7 != (llvm::Value **)v25)
          {
            do
            {
              uint64_t v28 = (uint64_t)*--v7;
              *--unint64_t v26 = v28;
            }
            while (v7 != (llvm::Value **)v25);
            uint64_t v7 = (llvm::Value **)v25;
          }
          __p = v26;
          uint64_t v8 = &v24[8 * v23];
          if (v7)
          {
            uint64_t v29 = &v24[8 * v23];
            operator delete(v7);
            uint64_t v8 = v29;
          }
          uint64_t v7 = v27;
          uint64_t v18 = a1;
        }
        else
        {
          *v7++ = v459;
        }
        int v30 = *((unsigned __int8 *)v459 + 16);
        if (v459) {
          BOOL v31 = v30 == 21;
        }
        else {
          BOOL v31 = 0;
        }
        if (v31)
        {
          uint64_t v36 = *(void *)(*((void *)v459 + 3) + 112);
          if (v36)
          {
            unsigned int v37 = *((_DWORD *)v459 + 8) + 2;
            if (v37 < *(_DWORD *)(v36 + 8))
            {
              uint64_t v38 = *(void *)(v36 + 8 * v37 + 40);
              if (v38)
              {
                if (*(char *)(v38 + 19) < 0)
                {
LABEL_42:
                  if (v452 >= (unint64_t)HIDWORD(v452)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((_DWORD *)v451 + v452) = v9;
                  LODWORD(v452) = v452 + 1;
                }
              }
            }
          }
        }
        else if (v459 && v30 == 59 && (*((_WORD *)v459 + 9) & 0x80) != 0)
        {
          goto LABEL_42;
        }
      }
      ++v9;
      if (++v5 == v6) {
        goto LABEL_3;
      }
    }
  }
  __p = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  unsigned int v9 = 0;
LABEL_3:
  unsigned int v418 = v9;
  unsigned int v10 = *(void ***)(a5 + 24);
  v437 = *(void ***)(a5 + 32);
  if (v10 != v437)
  {
    int v13 = 0;
    long long v39 = 0;
    uint64_t v12 = 0;
    uint64_t v11 = 0;
    while (1)
    {
      unint64_t v40 = (unint64_t)v8;
      v459 = 0;
      uint64_t v41 = *v10;
      v459 = (llvm::Value *)*v10;
      if (!*(unsigned char *)(a1 + 8)) {
        break;
      }
      p_NullValue = v41;
      NullValue = 0;
      if (sub_1CD420258((uint64_t *)(a1 + 192), &p_NullValue, &NullValue))
      {
        uint64_t v82 = (uint64_t *)NullValue;
        uint64_t v83 = *(void *)(a1 + 192);
        uint64_t v84 = *(unsigned int *)(a1 + 208);
      }
      else
      {
        uint64_t v83 = *(void *)(a1 + 192);
        uint64_t v84 = *(unsigned int *)(a1 + 208);
        uint64_t v82 = (uint64_t *)(v83 + 8 * v84);
      }
      if (v82 != (uint64_t *)(v83 + 8 * v84)) {
        break;
      }
      sub_1CBF5F714(v454, &v459);
      uint64_t v8 = (char *)v40;
LABEL_104:
      if (++v10 == v437) {
        goto LABEL_5;
      }
    }
    unint64_t v42 = operator new(0x68uLL);
    unint64_t v43 = (llvm::Value *)(v42 + 8);
    v42[13] = v42[13] & 0x38000000 | 1;
    *(void *)unint64_t v42 = 0;
    *((void *)v42 + 1) = 0;
    *((void *)v42 + 2) = 0;
    *((void *)v42 + 3) = v42 + 8;
    uint64_t v44 = *(llvm::Type **)v459;
    if ((*((unsigned char *)v459 + 23) & 0x10) == 0)
    {
      uint64_t v54 = 0;
      uint64_t v55 = &byte_1CFBCE98E;
      goto LABEL_61;
    }
    uint64_t v45 = **(void **)v44;
    uint64_t v46 = *(void *)(v45 + 152);
    uint64_t v47 = *(unsigned int *)(v45 + 168);
    if (v47)
    {
      LODWORD(v48) = (v47 - 1) & ((v459 >> 4) ^ (v459 >> 9));
      unsigned int v49 = (llvm::Value **)(v46 + 16 * v48);
      unint64_t v50 = *v49;
      if (*v49 == v459)
      {
LABEL_60:
        uint64_t v53 = v49[1];
        unsigned int v56 = *(unsigned char **)v53;
        uint64_t v55 = (char *)v53 + 16;
        uint64_t v54 = v56;
LABEL_61:
        uint64_t v57 = (llvm::Type *)*(unsigned int *)(v436 + 276);
        __int16 v450 = 773;
        p_NullValue = v55;
        v447 = v54;
        v448 = ".loc";
        uint64_t v58 = *(void *)(*(void *)(a3 + 56) + 80);
        if (v58) {
          uint64_t v59 = v58 - 24;
        }
        else {
          uint64_t v59 = 0;
        }
        uint64_t v60 = *(void *)(v59 + 48);
        if (v60) {
          uint64_t v61 = (llvm::Instruction *)(v60 - 24);
        }
        else {
          uint64_t v61 = 0;
        }
        llvm::AllocaInst::AllocaInst((llvm::AllocaInst *)(v42 + 8), v44, v57, 0, (const char **)&p_NullValue, v61);
        if (v12 >= v39)
        {
          uint64_t v62 = (v12 - v11) >> 3;
          unint64_t v63 = v62 + 1;
          if ((unint64_t)(v62 + 1) >> 61) {
            goto LABEL_537;
          }
          if ((v39 - v11) >> 2 > v63) {
            unint64_t v63 = (v39 - v11) >> 2;
          }
          if ((unint64_t)(v39 - v11) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v64 = v63;
          }
          if (v64)
          {
            if (v64 >> 61) {
              goto LABEL_544;
            }
            unsigned int v65 = (char *)operator new(8 * v64);
          }
          else
          {
            unsigned int v65 = 0;
          }
          uint64_t v66 = &v65[8 * v62];
          *(void *)uint64_t v66 = v43;
          unint64_t v67 = v66 + 8;
          if (v12 != v11)
          {
            do
            {
              uint64_t v68 = *((void *)v12 - 1);
              v12 -= 8;
              *((void *)v66 - 1) = v68;
              v66 -= 8;
            }
            while (v12 != v11);
            uint64_t v12 = v11;
          }
          uint64_t v11 = v66;
          long long v39 = &v65[8 * v64];
          if (v12) {
            operator delete(v12);
          }
          uint64_t v12 = v67;
        }
        else
        {
          *(void *)uint64_t v12 = v43;
          v12 += 8;
        }
        uint64_t v8 = (char *)v40;
        if ((unint64_t)v7 >= v40)
        {
          uint64_t v70 = ((char *)v7 - (char *)__p) >> 3;
          unint64_t v71 = v70 + 1;
          if ((unint64_t)(v70 + 1) >> 61) {
            goto LABEL_537;
          }
          int v72 = v10;
          unint64_t v73 = v39;
          int v74 = v13;
          uint64_t v75 = v11;
          if ((v8 - (char *)__p) >> 2 > v71) {
            unint64_t v71 = (v8 - (char *)__p) >> 2;
          }
          if ((unint64_t)(v8 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v76 = v71;
          }
          if (v76)
          {
            if (v76 >> 61) {
              goto LABEL_544;
            }
            unint64_t v77 = (char *)operator new(8 * v76);
            uint64_t v78 = __p;
          }
          else
          {
            uint64_t v78 = __p;
            unint64_t v77 = 0;
          }
          uint64_t v79 = (uint64_t *)&v77[8 * v70];
          uint64_t *v79 = (uint64_t)v43;
          unint64_t v69 = (llvm::Value **)(v79 + 1);
          if (v7 != (llvm::Value **)v78)
          {
            do
            {
              uint64_t v80 = (uint64_t)*--v7;
              *--uint64_t v79 = v80;
            }
            while (v7 != (llvm::Value **)v78);
            uint64_t v7 = (llvm::Value **)v78;
          }
          __p = v79;
          uint64_t v8 = &v77[8 * v76];
          if (v7)
          {
            unsigned int v81 = &v77[8 * v76];
            operator delete(v7);
            uint64_t v8 = v81;
          }
          uint64_t v11 = v75;
          int v13 = v74;
          long long v39 = v73;
          unsigned int v10 = v72;
        }
        else
        {
          *uint64_t v7 = v43;
          unint64_t v69 = v7 + 1;
        }
        ++v13;
        uint64_t v7 = v69;
        goto LABEL_104;
      }
      int v51 = 1;
      while (v50 != (llvm::Value *)-4096)
      {
        int v52 = v48 + v51++;
        uint64_t v48 = v52 & (v47 - 1);
        unint64_t v50 = *(llvm::Value **)(v46 + 16 * v48);
        if (v50 == v459)
        {
          unsigned int v49 = (llvm::Value **)(v46 + 16 * v48);
          goto LABEL_60;
        }
      }
    }
    unsigned int v49 = (llvm::Value **)(v46 + 16 * v47);
    goto LABEL_60;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v13 = 0;
LABEL_5:
  unint64_t v434 = (unint64_t)v8;
  uint64_t v438 = (uint64_t)v11;
  uint64_t v14 = a1;
  int v417 = v13;
  if (!*(unsigned char *)(a1 + 8) || (v16 = v456, int v15 = v457, v456 == v457))
  {
    int v435 = 0;
    v421 = 0;
    uint64_t v17 = 0;
    goto LABEL_175;
  }
  int v85 = 0;
  int v86 = 0;
  uint64_t v87 = 0;
  int v88 = v457;
  do
  {
    uint64_t v89 = **v16;
    if (v86 >= v87)
    {
      uint64_t v90 = (v86 - v85) >> 3;
      unint64_t v91 = v90 + 1;
      if ((unint64_t)(v90 + 1) >> 61) {
        goto LABEL_537;
      }
      if ((v87 - v85) >> 2 > v91) {
        unint64_t v91 = (v87 - v85) >> 2;
      }
      if ((unint64_t)(v87 - v85) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v92 = v91;
      }
      if (v92)
      {
        if (v92 >> 61) {
          goto LABEL_544;
        }
        size_t v93 = (char *)operator new(8 * v92);
      }
      else
      {
        size_t v93 = 0;
      }
      int v94 = &v93[8 * v90];
      *(void *)int v94 = v89;
      unint64_t v95 = v94 + 8;
      while (v86 != v85)
      {
        uint64_t v96 = *((void *)v86 - 1);
        v86 -= 8;
        *((void *)v94 - 1) = v96;
        v94 -= 8;
      }
      uint64_t v87 = &v93[8 * v92];
      if (v85) {
        operator delete(v85);
      }
      int v85 = v94;
      int v86 = v95;
      int v15 = v88;
    }
    else
    {
      *(void *)int v86 = v89;
      v86 += 8;
    }
    ++v16;
  }
  while (v16 != v15);
  uint64_t v17 = (llvm::Type *)llvm::StructType::get(**(uint64_t ***)a2, (uint64_t)v85, (v86 - v85) >> 3, 0);
  uint64_t v97 = operator new(0x68uLL);
  unint64_t v98 = (uint64_t *)(v97 + 8);
  v97[13] = v97[13] & 0x38000000 | 1;
  *(void *)uint64_t v97 = 0;
  *((void *)v97 + 1) = 0;
  *((void *)v97 + 2) = 0;
  *((void *)v97 + 3) = v97 + 8;
  uint64_t v99 = (llvm::Type *)*(unsigned int *)(v436 + 276);
  p_NullValue = "structArg";
  __int16 v450 = 259;
  uint64_t v100 = *(void *)(a1 + 40);
  if (v100)
  {
    uint64_t v104 = v100 + 40;
    for (uint64_t i = *(void *)(v100 + 48); i != v104; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v106 = i - 24;
      if (!i) {
        uint64_t v106 = 0;
      }
      if (*(unsigned char *)(v106 + 16) != 83)
      {
        unsigned int v107 = *(unsigned __int8 *)(i - 8) - 38;
        BOOL v108 = v107 > 0x38;
        uint64_t v109 = (1 << v107) & 0x100060000000001;
        if (!v108 && v109 != 0)
        {
          uint64_t v103 = (uint64_t *)(i + 8);
          goto LABEL_137;
        }
        uint64_t v104 = i;
        break;
      }
    }
  }
  else
  {
    uint64_t v101 = *(void *)(*(void *)(a3 + 56) + 80);
    if (v101) {
      uint64_t v102 = v101 - 24;
    }
    else {
      uint64_t v102 = 0;
    }
    uint64_t v103 = (uint64_t *)(v102 + 48);
LABEL_137:
    uint64_t v104 = *v103;
  }
  if (v104) {
    uint64_t v111 = (llvm::Instruction *)(v104 - 24);
  }
  else {
    uint64_t v111 = 0;
  }
  llvm::AllocaInst::AllocaInst((llvm::AllocaInst *)(v97 + 8), v17, v99, 0, (const char **)&p_NullValue, v111);
  v421 = v98;
  if ((unint64_t)v7 >= v434)
  {
    int v116 = __p;
    uint64_t v117 = ((char *)v7 - (char *)__p) >> 3;
    unint64_t v118 = v117 + 1;
    if ((unint64_t)(v117 + 1) >> 61) {
LABEL_537:
    }
      abort();
    if ((uint64_t)(v434 - (void)__p) >> 2 > v118) {
      unint64_t v118 = (uint64_t)(v434 - (void)__p) >> 2;
    }
    if (v434 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v118 = 0x1FFFFFFFFFFFFFFFLL;
    }
    if (v118)
    {
      if (v118 >> 61) {
LABEL_544:
      }
        sub_1CB833614();
      unint64_t v119 = (char *)operator new(8 * v118);
      int v116 = __p;
    }
    else
    {
      unint64_t v119 = 0;
    }
    unint64_t v115 = (uint64_t *)&v119[8 * v117];
    *unint64_t v115 = (uint64_t)v421;
    uint64_t v112 = (llvm::Value **)(v115 + 1);
    while (v7 != (llvm::Value **)v116)
    {
      uint64_t v120 = (uint64_t)*--v7;
      *--unint64_t v115 = v120;
    }
    if (v116) {
      operator delete(v116);
    }
    uint64_t v113 = a3;
    uint64_t v114 = a4;
  }
  else
  {
    *uint64_t v7 = (llvm::Value *)v98;
    uint64_t v112 = v7 + 1;
    uint64_t v113 = a3;
    uint64_t v114 = a4;
    unint64_t v115 = __p;
  }
  __p = v115;
  if ((((char *)v457 - (char *)v456) & 0x7FFFFFFF8) != 0)
  {
    uint64_t v355 = 0;
    int v435 = 0;
    size_t v429 = v113 + 40;
    uint64_t v356 = ((unint64_t)((char *)v457 - (char *)v456) >> 3);
    while (1)
    {
      p_NullValue = v456[v355];
      NullValue = 0;
      if (sub_1CD420258((uint64_t *)v114, &p_NullValue, &NullValue))
      {
        if (NullValue != (unsigned __int8 *)(*(void *)v114 + 8 * *(unsigned int *)(v114 + 16))) {
          break;
        }
      }
LABEL_477:
      if (++v355 == v356) {
        goto LABEL_172;
      }
    }
    NullValue = 0;
    v462[0] = 0;
    NullValue = (unsigned __int8 *)llvm::Constant::getNullValue((llvm::Constant *)(*v433 + 1960), v357, v358);
    unint64_t v360 = *(llvm::ConstantInt **)(*v433 + 1960);
    unsigned int v361 = *(_DWORD *)(*v433 + 1968);
    LODWORD(v447) = v361 >> 8;
    if (v361 >> 8 > 0x40) {
      operator new[]();
    }
    if (v361 <= 0xFF) {
      unint64_t v362 = 0;
    }
    else {
      unint64_t v362 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v361) + 63);
    }
    p_NullValue = (void *)(v362 & v355);
    uint64_t v363 = llvm::ConstantInt::get(v360, (llvm::LLVMContext *)&p_NullValue, v359);
    if (v447 >= 0x41 && p_NullValue) {
      MEMORY[0x1D25D9CB0](p_NullValue, 0x1000C8000313F17);
    }
    v462[0] = v363;
    v364 = (uint64_t ***)v456[v355];
    if ((*((unsigned char *)v364 + 23) & 0x10) == 0)
    {
      v374 = 0;
      unint64_t v375 = &byte_1CFBCE98E;
LABEL_473:
      __int16 v450 = 1283;
      p_NullValue = "gep_";
      v448 = v375;
      v449 = v374;
      v377 = (char *)operator new(0xB0uLL);
      v378 = v377;
      uint64_t v379 = 0;
      uint64_t v380 = (uint64_t ***)(v377 + 96);
      *((_DWORD *)v377 + 29) = *((_DWORD *)v377 + 29) & 0x38000000 | 3;
      do
      {
        uint64_t v381 = &v377[v379];
        *(void *)uint64_t v381 = 0;
        *((void *)v381 + 1) = 0;
        *((void *)v381 + 2) = 0;
        *((void *)v381 + 3) = v380;
        v379 += 32;
      }
      while (v379 != 96);
      sub_1CB845A7C((uint64_t)v17, v421, (uint64_t)&NullValue, 2);
      *(_OWORD *)(v378 + 120) = 0u;
      v382 = v378 + 120;
      *((void *)v378 + 12) = v383;
      *((void *)v378 + 13) = 0;
      unsigned int v384 = *((_DWORD *)v378 + 29) & 0xC0000000 | 3;
      *((_DWORD *)v378 + 28) = 62;
      *((_DWORD *)v378 + 29) = v384;
      *(_OWORD *)(v378 + 136) = 0u;
      *((_DWORD *)v378 + 38) = 0;
      *((void *)v378 + 20) = v17;
      *((void *)v378 + 21) = llvm::GetElementPtrInst::getIndexedType((uint64_t)v17, (uint64_t)&NullValue, 2);
      llvm::GetElementPtrInst::init(v380, (uint64_t **)v421, (uint64_t *)&NullValue, 2, (const char **)&p_NullValue);
      v385 = (llvm::BasicBlock *)a3;
      *((void *)v378 + 17) = a3;
      *(_WORD *)(a3 + 18) &= ~0x8000u;
      if ((v378[119] & 0x10) != 0)
      {
        uint64_t v389 = *(void *)(a3 + 56);
        if (v389)
        {
          v390 = *(llvm::ValueSymbolTable **)(v389 + 104);
          if (v390)
          {
            llvm::ValueSymbolTable::reinsertValue(v390, (llvm::Value *)v380);
            v385 = (llvm::BasicBlock *)a3;
          }
        }
      }
      uint64_t v386 = *((void *)v385 + 5);
      *((void *)v378 + 15) = v386;
      *((void *)v378 + 16) = v429;
      *(void *)(v386 + 8) = v382;
      *((void *)v385 + 5) = v382;
      uint64_t v387 = v385;
      uint64_t v388 = operator new(0x80uLL);
      v388[21] = v388[21] & 0x38000000 | 2;
      *(void *)uint64_t v388 = 0;
      *((void *)v388 + 1) = 0;
      *((void *)v388 + 2) = 0;
      *((void *)v388 + 3) = v388 + 16;
      *((void *)v388 + 4) = 0;
      *((void *)v388 + 5) = 0;
      *((void *)v388 + 6) = 0;
      *((void *)v388 + 7) = v388 + 16;
      llvm::StoreInst::StoreInst((llvm::StoreInst *)(v388 + 16), (llvm::Type **)v456[v355], (llvm::Value *)v380, 0, v387);
      ++v435;
      uint64_t v114 = a4;
      goto LABEL_477;
    }
    uint64_t v365 = ***v364;
    uint64_t v366 = *(void *)(v365 + 152);
    uint64_t v367 = *(unsigned int *)(v365 + 168);
    if (v367)
    {
      LODWORD(v368) = (v367 - 1) & ((v364 >> 4) ^ (v364 >> 9));
      uint64_t v369 = (uint64_t ****)(v366 + 16 * v368);
      uint64_t v370 = *v369;
      if (*v369 == v364)
      {
LABEL_472:
        uint64_t v373 = v369[1];
        v376 = *v373;
        unint64_t v375 = (char *)(v373 + 2);
        v374 = v376;
        goto LABEL_473;
      }
      int v371 = 1;
      while (v370 != (uint64_t ***)-4096)
      {
        int v372 = v368 + v371++;
        uint64_t v368 = v372 & (v367 - 1);
        uint64_t v370 = *(uint64_t ****)(v366 + 16 * v368);
        if (v370 == v364)
        {
          uint64_t v369 = (uint64_t ****)(v366 + 16 * v368);
          goto LABEL_472;
        }
      }
    }
    uint64_t v369 = (uint64_t ****)(v366 + 16 * v367);
    goto LABEL_472;
  }
  int v435 = 0;
LABEL_172:
  if (v85) {
    operator delete(v85);
  }
  uint64_t v7 = v112;
  uint64_t v14 = a1;
LABEL_175:
  if (a2) {
    int v121 = *(uint64_t ***)(a2 + 24);
  }
  else {
    int v121 = 0;
  }
  int v122 = "targetBlock";
  if (*(_DWORD *)(v14 + 104) <= 1u) {
    int v122 = "";
  }
  char v123 = 1;
  HIBYTE(v450) = 1;
  if (*v122)
  {
    p_NullValue = v122;
    char v123 = 3;
  }
  unint64_t v124 = (unint64_t)((char *)v7 - (char *)__p) >> 3;
  LOBYTE(v450) = v123;
  uint64_t v125 = (v124 + 1);
  BOOL v126 = v124 == -1;
  unint64_t v127 = operator new(32 * v125 + 80);
  uint64_t v128 = &v127[4 * v125];
  int v129 = *((_DWORD *)v128 + 5) & 0x38000000 | v125 & 0x7FFFFFF;
  *((_DWORD *)v128 + 5) = v129;
  if (!v126)
  {
    do
    {
      *unint64_t v127 = 0;
      v127[1] = 0;
      v127[2] = 0;
      v127[3] = v128;
      v127 += 4;
    }
    while (v127 != v128);
    int v129 = *((_DWORD *)v128 + 5);
  }
  void *v128 = *v121[2];
  v128[1] = 0;
  v416 = (llvm::Value ***)(v128 + 1);
  *((unsigned char *)v128 + 16) = 84;
  *((unsigned char *)v128 + 17) = 0;
  *((_WORD *)v128 + 9) = 0;
  *(_OWORD *)(v128 + 3) = 0u;
  uint64_t v130 = (char *)(v128 + 3);
  *((_DWORD *)v128 + 5) = v129 & 0xC0000000 | v125 & 0x7FFFFFF;
  *(_OWORD *)(v128 + 5) = 0u;
  *((_DWORD *)v128 + 14) = 0;
  char v128[8] = 0;
  uint64_t v131 = v128 + 8;
  v419 = (llvm::Value *)v128;
  llvm::CallInst::init((uint64_t ***)v128, v121, (uint64_t **)a2, __p, ((char *)v7 - (char *)__p) >> 3, 0, 0, (const char **)&p_NullValue);
  uint64_t v133 = a3;
  uint64_t v134 = *(uint64_t ****)(a3 + 56);
  if ((*((unsigned char *)v134 + 23) & 0x20) == 0) {
    goto LABEL_220;
  }
  uint64_t v135 = ***v134;
  p_NullValue = *(void **)(a3 + 56);
  int v136 = *(_DWORD *)(v135 + 2496);
  if (!v136)
  {
    uint64_t v400 = 0;
LABEL_513:
    int v140 = sub_1CC609054(v135 + 2480, (uint64_t)&p_NullValue, (uint64_t *)&p_NullValue, v400);
    int64x2_t v401 = p_NullValue;
    v140[4] = 0;
    v140[3] = 0;
    *int v140 = v401;
    v140[1] = v140 + 3;
    v140[2] = 0x100000000;
    uint64_t v133 = a3;
    goto LABEL_196;
  }
  uint64_t v137 = *(void *)(v135 + 2480);
  int v138 = v136 - 1;
  unsigned int v139 = v138 & ((v134 >> 4) ^ (v134 >> 9));
  int v140 = (void *)(v137 + 40 * v139);
  uint64_t v141 = *v140;
  if ((uint64_t ***)*v140 != v134)
  {
    BOOL v142 = 0;
    int v143 = 1;
    while (v141 != -4096)
    {
      if (v142) {
        BOOL v144 = 0;
      }
      else {
        BOOL v144 = v141 == -8192;
      }
      if (v144) {
        BOOL v142 = v140;
      }
      unsigned int v145 = v139 + v143++;
      unsigned int v139 = v145 & v138;
      int v140 = (void *)(v137 + 40 * v139);
      uint64_t v141 = *v140;
      if ((uint64_t ***)*v140 == v134) {
        goto LABEL_196;
      }
    }
    if (v142) {
      uint64_t v400 = v142;
    }
    else {
      uint64_t v400 = v140;
    }
    goto LABEL_513;
  }
LABEL_196:
  uint64_t v146 = *((unsigned int *)v140 + 4);
  if (v146)
  {
    unint64_t v147 = (void *)(v140[1] + 8);
    uint64_t v148 = 16 * v146;
    while (*((_DWORD *)v147 - 2))
    {
      v147 += 2;
      v148 -= 16;
      if (!v148) {
        goto LABEL_220;
      }
    }
    if (*v147)
    {
      uint64_t v149 = *(void *)(a2 + 80);
      if (v149) {
        uint64_t v150 = v149 - 24;
      }
      else {
        uint64_t v150 = 0;
      }
      uint64_t v151 = *(void *)(v150 + 40);
      if (v151) {
        uint64_t v152 = v151 - 24;
      }
      else {
        uint64_t v152 = 0;
      }
      if (*(unsigned __int8 *)(v152 + 16) - 29 >= 0xB) {
        uint64_t v152 = 0;
      }
      unint64_t v153 = *(uint64_t **)(v152 + 48);
      NullValue = (unsigned __int8 *)v153;
      if (!v153) {
        goto LABEL_219;
      }
      llvm::MetadataTracking::track((uint64_t)&NullValue, (unsigned __int8 *)v153, 2);
      if (!NullValue) {
        goto LABEL_219;
      }
      v445 = (uint64_t *)NullValue;
      llvm::MetadataTracking::track((uint64_t)&v445, NullValue, 2);
      uint64_t v155 = (uint64_t **)((char *)v419 + 48);
      uint64_t v154 = (unsigned __int8 *)*((void *)v419 + 6);
      if (!v154)
      {
LABEL_213:
        uint64_t v156 = (unsigned __int8 *)v445;
        *uint64_t v155 = v445;
        if (v156)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v445, v156, (uint64_t)v155);
          v445 = 0;
        }
        if (!NullValue) {
          goto LABEL_219;
        }
        int v157 = *NullValue;
        if ((v157 - 4) > 0x1E)
        {
          if ((v157 - 3) >= 0xFFFFFFFE) {
            uint64_t v409 = (uint64_t *)NullValue;
          }
          else {
            uint64_t v409 = 0;
          }
          if ((v157 - 3) < 0xFFFFFFFE)
          {
            if (v157 == 3) {
              *((void *)NullValue + 1) = 0;
            }
            goto LABEL_219;
          }
          unint64_t v410 = (unint64_t)(v409 + 1);
        }
        else
        {
          if ((NullValue[1] & 0x7F) != 2 && !*((_DWORD *)NullValue + 3)) {
            goto LABEL_219;
          }
          uint64_t v415 = *((void *)NullValue + 2);
          if ((v415 & 4) == 0) {
            goto LABEL_219;
          }
          unint64_t v410 = v415 & 0xFFFFFFFFFFFFFFF8;
          if (!v410) {
            goto LABEL_219;
          }
        }
        p_NullValue = &NullValue;
        sub_1CC5FA668(v410 + 16, &p_NullValue);
LABEL_219:
        uint64_t v133 = a3;
        goto LABEL_220;
      }
      int v411 = *v154;
      if ((v411 - 4) > 0x1E)
      {
        if ((v411 - 3) >= 0xFFFFFFFE) {
          uint64_t v414 = *((void *)v419 + 6);
        }
        else {
          uint64_t v414 = 0;
        }
        if ((v411 - 3) < 0xFFFFFFFE)
        {
          if (v411 == 3) {
            *((void *)v154 + 1) = 0;
          }
          goto LABEL_213;
        }
        unint64_t v413 = v414 + 8;
      }
      else
      {
        if ((v154[1] & 0x7F) != 2 && !*((_DWORD *)v154 + 3)) {
          goto LABEL_213;
        }
        uint64_t v412 = *((void *)v154 + 2);
        if ((v412 & 4) == 0) {
          goto LABEL_213;
        }
        unint64_t v413 = v412 & 0xFFFFFFFFFFFFFFF8;
        if (!v413) {
          goto LABEL_213;
        }
      }
      p_NullValue = (char *)v419 + 48;
      sub_1CC5FA668(v413 + 16, &p_NullValue);
      goto LABEL_213;
    }
  }
LABEL_220:
  uint64_t v426 = (uint64_t)v17;
  uint64_t v158 = (char **)(v133 + 40);
  *((void *)v419 + 5) = v133;
  *(_WORD *)(v133 + 18) &= ~0x8000u;
  if ((*((unsigned char *)v419 + 23) & 0x10) != 0)
  {
    uint64_t v398 = *(void *)(v133 + 56);
    if (v398)
    {
      v399 = *(llvm::ValueSymbolTable **)(v398 + 104);
      if (v399) {
        llvm::ValueSymbolTable::reinsertValue(v399, v419);
      }
    }
  }
  uint64_t v159 = *v158;
  *((void *)v419 + 3) = *v158;
  *((void *)v419 + 4) = v158;
  *((void *)v159 + 1) = v130;
  *uint64_t v158 = v130;
  if (v452)
  {
    uint64_t v160 = (int *)v451;
    uint64_t v161 = 4 * v452;
    do
    {
      int v162 = *v160++;
      *((void *)v419 + 8) = llvm::AttributeList::addAttributeAtIndex(v131, **(uint64_t ***)v419, v162 + 1, 63);
      *(void *)(a2 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(a2 + 112), **(uint64_t ***)a2, v162 + 1, 63);
      v161 -= 4;
    }
    while (v161);
  }
  unint64_t v163 = *(void *)(a5 + 32) - *(void *)(a5 + 24);
  if ((v163 & 0x7FFFFFFF8) != 0)
  {
    uint64_t v178 = 0;
    unsigned int v427 = 0;
    uint64_t v164 = 0;
    uint64_t v179 = 0;
    size_t v431 = 0;
    v425 = (llvm::SwitchInst *)(v163 >> 3);
    int v423 = v435;
    while (1)
    {
      if (!*(unsigned char *)(a1 + 8) || !v455) {
        goto LABEL_235;
      }
      uint64_t v180 = *(void *)(*(void *)(a5 + 24) + 8 * v178);
      unsigned int v181 = ((v180 >> 4) ^ (v180 >> 9)) & (v455 - 1);
      uint64_t v182 = *(void *)(v454[0] + 8 * v181);
      if (v180 != v182)
      {
        int v242 = 1;
        while (v182 != -4096)
        {
          unsigned int v243 = v181 + v242++;
          unsigned int v181 = v243 & (v455 - 1);
          uint64_t v182 = *(void *)(v454[0] + 8 * v181);
          if (v180 == v182) {
            goto LABEL_234;
          }
        }
LABEL_235:
        uint64_t v183 = *(uint64_t ****)(v438 + 8 * v427++);
        goto LABEL_236;
      }
LABEL_234:
      if (v181 == v455) {
        goto LABEL_235;
      }
      NullValue = 0;
      v462[0] = 0;
      NullValue = (unsigned __int8 *)llvm::Constant::getNullValue((llvm::Constant *)(*v433 + 1960), (llvm::Type *)v133, v132);
      int v215 = *(llvm::ConstantInt **)(*v433 + 1960);
      unsigned int v216 = *(_DWORD *)(*v433 + 1968);
      LODWORD(v447) = v216 >> 8;
      if (v216 >> 8 > 0x40) {
        operator new[]();
      }
      if (v216 <= 0xFF) {
        LODWORD(v217) = 0;
      }
      else {
        unint64_t v217 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v216) + 63);
      }
      p_NullValue = (void *)(v217 & v423);
      unint64_t v218 = llvm::ConstantInt::get(v215, (llvm::LLVMContext *)&p_NullValue, v214);
      if (v447 >= 0x41 && p_NullValue) {
        MEMORY[0x1D25D9CB0](p_NullValue, 0x1000C8000313F17);
      }
      v462[0] = v218;
      uint64_t v219 = *(uint64_t ****)(*(void *)(a5 + 24) + 8 * v178);
      if ((*((unsigned char *)v219 + 23) & 0x10) != 0) {
        break;
      }
      uint64_t v229 = 0;
      unint64_t v230 = &byte_1CFBCE98E;
LABEL_291:
      __int16 v450 = 1283;
      p_NullValue = "gep_reload_";
      v448 = v230;
      v449 = v229;
      uint64_t v232 = (char *)operator new(0xB0uLL);
      int v233 = v232;
      uint64_t v234 = 0;
      uint64_t v183 = (uint64_t ***)(v232 + 96);
      *((_DWORD *)v232 + 29) = *((_DWORD *)v232 + 29) & 0x38000000 | 3;
      do
      {
        unsigned int v235 = &v232[v234];
        *(void *)unsigned int v235 = 0;
        *((void *)v235 + 1) = 0;
        *((void *)v235 + 2) = 0;
        *((void *)v235 + 3) = v183;
        v234 += 32;
      }
      while (v234 != 96);
      sub_1CB845A7C(v426, v421, (uint64_t)&NullValue, 2);
      *(_OWORD *)(v233 + 120) = 0u;
      unint64_t v236 = v233 + 120;
      *((void *)v233 + 12) = v237;
      *((void *)v233 + 13) = 0;
      unsigned int v238 = *((_DWORD *)v233 + 29) & 0xC0000000 | 3;
      *((_DWORD *)v233 + 28) = 62;
      *((_DWORD *)v233 + 29) = v238;
      *(_OWORD *)(v233 + 136) = 0u;
      *((_DWORD *)v233 + 38) = 0;
      *((void *)v233 + 20) = v426;
      *((void *)v233 + 21) = llvm::GetElementPtrInst::getIndexedType(v426, (uint64_t)&NullValue, 2);
      llvm::GetElementPtrInst::init(v183, (uint64_t **)v421, (uint64_t *)&NullValue, 2, (const char **)&p_NullValue);
      *((void *)v233 + 17) = a3;
      *(_WORD *)(a3 + 18) &= ~0x8000u;
      if ((v233[119] & 0x10) != 0)
      {
        uint64_t v240 = *(void *)(a3 + 56);
        if (v240)
        {
          unsigned int v241 = *(llvm::ValueSymbolTable **)(v240 + 104);
          if (v241) {
            llvm::ValueSymbolTable::reinsertValue(v241, (llvm::Value *)v183);
          }
        }
      }
      uint64_t v239 = *v158;
      *((void *)v233 + 15) = *v158;
      *((void *)v233 + 16) = v158;
      *((void *)v239 + 1) = v236;
      *uint64_t v158 = v236;
      ++v423;
LABEL_236:
      unsigned int v184 = operator new(0x60uLL);
      uint64_t v185 = (llvm::Value *)(v184 + 8);
      v184[13] = v184[13] & 0x38000000 | 1;
      *(void *)unsigned int v184 = 0;
      *((void *)v184 + 1) = 0;
      *((void *)v184 + 2) = 0;
      *((void *)v184 + 3) = v184 + 8;
      uint64_t v186 = *(void *)(*(void *)(a5 + 24) + 8 * v178);
      uint64_t v187 = *(llvm::Type **)v186;
      if ((*(unsigned char *)(v186 + 23) & 0x10) == 0)
      {
        int v197 = 0;
        int v198 = &byte_1CFBCE98E;
        goto LABEL_245;
      }
      uint64_t v188 = **(void **)v187;
      uint64_t v189 = *(void *)(v188 + 152);
      uint64_t v190 = *(unsigned int *)(v188 + 168);
      if (!v190) {
        goto LABEL_243;
      }
      LODWORD(v191) = (v190 - 1) & ((v186 >> 4) ^ (v186 >> 9));
      unsigned int v192 = (uint64_t *)(v189 + 16 * v191);
      uint64_t v193 = *v192;
      if (*v192 != v186)
      {
        int v194 = 1;
        while (v193 != -4096)
        {
          int v195 = v191 + v194++;
          uint64_t v191 = v195 & (v190 - 1);
          uint64_t v193 = *(void *)(v189 + 16 * v191);
          if (v193 == v186)
          {
            unsigned int v192 = (uint64_t *)(v189 + 16 * v191);
            goto LABEL_244;
          }
        }
LABEL_243:
        unsigned int v192 = (uint64_t *)(v189 + 16 * v190);
      }
LABEL_244:
      uint64_t v196 = (void *)v192[1];
      unsigned int v199 = (unsigned char *)*v196;
      int v198 = (char *)(v196 + 2);
      int v197 = v199;
LABEL_245:
      __int16 v450 = 773;
      p_NullValue = v198;
      v447 = v197;
      v448 = ".reload";
      llvm::LoadInst::LoadInst((llvm::LoadInst *)(v184 + 8), v187, (llvm::Value *)v183, (const char **)&p_NullValue, 0, (llvm::BasicBlock *)a3);
      if ((unint64_t)v179 >= v431)
      {
        uint64_t v200 = v179 - v164;
        unint64_t v201 = v200 + 1;
        if ((unint64_t)(v200 + 1) >> 61) {
          goto LABEL_537;
        }
        if ((uint64_t)(v431 - (void)v164) >> 2 > v201) {
          unint64_t v201 = (uint64_t)(v431 - (void)v164) >> 2;
        }
        if (v431 - (unint64_t)v164 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v202 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v202 = v201;
        }
        if (v202)
        {
          if (v202 >> 61) {
            goto LABEL_544;
          }
          uint64_t v203 = (char *)operator new(8 * v202);
        }
        else
        {
          uint64_t v203 = 0;
        }
        uint64_t v204 = (llvm::Value **)&v203[8 * v200];
        *uint64_t v204 = v185;
        unsigned int v205 = v204 + 1;
        while (v179 != v164)
        {
          unsigned int v206 = *--v179;
          *--uint64_t v204 = v206;
        }
        size_t v431 = (size_t)&v203[8 * v202];
        if (v164) {
          operator delete(v164);
        }
        uint64_t v164 = v204;
        uint64_t v179 = v205;
      }
      else
      {
        *v179++ = v185;
      }
      unint64_t v207 = 0;
      uint64_t v208 = *(void *)(*(void *)(*(void *)(a5 + 24) + 8 * v178) + 8);
      v447 = 0;
      v448 = 0;
      p_NullValue = 0;
      if (v208)
      {
        unint64_t v207 = 0;
        uint64_t v209 = v208;
        do
        {
          ++v207;
          uint64_t v209 = *(void *)(v209 + 8);
        }
        while (v209);
      }
      sub_1CC9A301C(&p_NullValue, v208, 0, v207);
      uint64_t v210 = p_NullValue;
      if (((v447 - (unsigned char *)p_NullValue) & 0x7FFFFFFF8) != 0)
      {
        uint64_t v211 = 0;
        uint64_t v212 = ((unint64_t)(v447 - (unsigned char *)p_NullValue) >> 3);
        do
        {
          uint64_t v213 = (llvm::User *)*((void *)p_NullValue + v211);
          NullValue = (unsigned __int8 *)*((void *)v213 + 5);
          v459 = 0;
          if ((sub_1CBFFBBB4((uint64_t *)(a1 + 56), &NullValue, &v459) & 1) == 0) {
            llvm::User::replaceUsesOfWith(v213, *(llvm::Value **)(*(void *)(a5 + 24) + 8 * v178), v185);
          }
          ++v211;
        }
        while (v212 != v211);
        uint64_t v210 = p_NullValue;
      }
      if (v210)
      {
        v447 = v210;
        operator delete(v210);
      }
      if ((llvm::SwitchInst *)++v178 == v425) {
        goto LABEL_226;
      }
    }
    uint64_t v220 = ***v219;
    uint64_t v221 = *(void *)(v220 + 152);
    uint64_t v222 = *(unsigned int *)(v220 + 168);
    if (v222)
    {
      LODWORD(v223) = (v222 - 1) & ((v219 >> 4) ^ (v219 >> 9));
      int v224 = (uint64_t ****)(v221 + 16 * v223);
      int v225 = *v224;
      if (*v224 == v219)
      {
LABEL_290:
        uint64_t v228 = v224[1];
        unint64_t v231 = *v228;
        unint64_t v230 = (char *)(v228 + 2);
        uint64_t v229 = v231;
        goto LABEL_291;
      }
      int v226 = 1;
      while (v225 != (uint64_t ***)-4096)
      {
        int v227 = v223 + v226++;
        uint64_t v223 = v227 & (v222 - 1);
        int v225 = *(uint64_t ****)(v221 + 16 * v223);
        if (v225 == v219)
        {
          int v224 = (uint64_t ****)(v221 + 16 * v223);
          goto LABEL_290;
        }
      }
    }
    int v224 = (uint64_t ****)(v221 + 16 * v222);
    goto LABEL_290;
  }
  uint64_t v164 = 0;
LABEL_226:
  int v165 = llvm::Constant::getNullValue((llvm::Constant *)(*v433 + 1936), (llvm::Type *)v133, v132);
  unint64_t v166 = operator new(0x48uLL);
  v166[7] = v166[7] & 0x38000000 | 0x40000000;
  v422 = v166;
  v424 = (llvm::Instruction *)(v166 + 2);
  *(void *)unint64_t v166 = 0;
  uint64_t v167 = (uint64_t)llvm::SwitchInst::SwitchInst((llvm::SwitchInst *)(v166 + 2), v165, (llvm::BasicBlock *)a3, 0, (llvm::BasicBlock *)a3);
  v462[0] = 0;
  v462[1] = 0;
  NullValue = (unsigned __int8 *)v462;
  uint64_t v171 = *(unsigned int *)(a1 + 128);
  if (v171)
  {
    uint64_t v244 = *(uint64_t ***)(a1 + 120);
    uint64_t v245 = &v244[v171];
    do
    {
      uint64_t v246 = *v244;
      v444 = v246;
      p_NullValue = v246;
      v459 = 0;
      uint64_t v167 = sub_1CBFFBBB4((uint64_t *)(a1 + 56), &p_NullValue, &v459);
      if ((v167 & 1) == 0)
      {
        uint64_t v167 = (uint64_t)sub_1CD508D28((uint64_t **)&NullValue, (unint64_t)v246, &v444);
        if (!*(void *)(v167 + 40))
        {
          if ((*((unsigned char *)v246 + 23) & 0x10) != 0)
          {
            uint64_t v247 = **(void **)*v246;
            uint64_t v248 = *(void *)(v247 + 152);
            uint64_t v249 = *(unsigned int *)(v247 + 168);
            if (v249)
            {
              LODWORD(v250) = (v249 - 1) & ((v246 >> 4) ^ (v246 >> 9));
              unsigned int v251 = (uint64_t **)(v248 + 16 * v250);
              uint64_t v252 = *v251;
              if (*v251 != v246)
              {
                int v253 = 1;
                do
                {
                  if (v252 == (uint64_t *)-4096) {
                    goto LABEL_318;
                  }
                  int v254 = v250 + v253++;
                  uint64_t v250 = v254 & (v249 - 1);
                  uint64_t v252 = *(uint64_t **)(v248 + 16 * v250);
                }
                while (v252 != v246);
                unsigned int v251 = (uint64_t **)(v248 + 16 * v250);
              }
            }
            else
            {
LABEL_318:
              unsigned int v251 = (uint64_t **)(v248 + 16 * v249);
            }
            uint64_t v255 = v251[1];
            uint64_t v258 = (unsigned char *)*v255;
            uint64_t v257 = (char *)(v255 + 2);
            uint64_t v256 = v258;
          }
          else
          {
            uint64_t v256 = 0;
            uint64_t v257 = &byte_1CFBCE98E;
          }
          __int16 v450 = 773;
          p_NullValue = v257;
          v447 = v256;
          v448 = ".exitStub";
          operator new();
        }
      }
      ++v244;
    }
    while (v244 != v245);
  }
  uint64_t v172 = *(llvm::Value **)(a1 + 80);
  for (uint64_t j = *(llvm::Value **)(a1 + 88); v172 != j; v172 = (llvm::Value *)((char *)v172 + 8))
  {
    uint64_t v260 = *(void *)v172 + 40;
    uint64_t v259 = *(void *)v260;
    if (*(void *)v260 == v260)
    {
      uint64_t v262 = 0;
    }
    else
    {
      if (v259) {
        uint64_t v261 = v259 - 24;
      }
      else {
        uint64_t v261 = 0;
      }
      LODWORD(v260) = *(unsigned __int8 *)(v261 + 16) - 29;
      if (v260 >= 0xB) {
        uint64_t v262 = 0;
      }
      else {
        uint64_t v262 = v261;
      }
    }
    int v263 = *(unsigned __int8 *)(v262 + 16);
    if (v263 == 30)
    {
      if ((*(_DWORD *)(v262 + 20) & 0x7FFFFFF) == 3) {
        LODWORD(v177) = 2;
      }
      else {
        LODWORD(v177) = 1;
      }
    }
    else
    {
      uint64_t v177 = 2;
      switch(*(unsigned char *)(v262 + 16))
      {
        case 0x1E:
          __break(1u);
          goto LABEL_552;
        case 0x1F:
          LODWORD(v177) = (*(_DWORD *)(v262 + 20) >> 1) & 0x3FFFFFF;
          break;
        case 0x20:
        case 0x26:
          LODWORD(v177) = (*(_DWORD *)(v262 + 20) & 0x7FFFFFF) - 1;
          break;
        case 0x21:
          goto LABEL_334;
        case 0x24:
          LODWORD(v177) = *(_WORD *)(v262 + 18) & 1;
          break;
        case 0x25:
          LODWORD(v177) = 1;
          goto LABEL_334;
        case 0x27:
          LODWORD(v177) = *(_DWORD *)(v262 + 80) + 1;
          break;
        default:
          continue;
      }
      if (!v177) {
        continue;
      }
    }
LABEL_334:
    unsigned int v264 = 0;
    do
    {
      p_NullValue = (void *)llvm::Instruction::getSuccessor((llvm::Instruction *)v262, v264);
      v459 = 0;
      uint64_t v167 = sub_1CBFFBBB4((uint64_t *)(a1 + 56), &p_NullValue, &v459);
      if ((v167 & 1) == 0)
      {
        p_NullValue = (void *)llvm::Instruction::getSuccessor((llvm::Instruction *)v262, v264);
        unint64_t v265 = sub_1CD508D28((uint64_t **)&NullValue, (unint64_t)p_NullValue, (uint64_t **)&p_NullValue);
        uint64_t v167 = llvm::Instruction::setSuccessor(v262, v264, (llvm::BasicBlock *)v265[5]);
      }
      ++v264;
    }
    while (v177 != v264);
  }
  if (*(_WORD *)(a2 + 18))
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)a2);
    uint64_t v174 = *(void *)(a2 + 88);
    unsigned int v175 = v418;
    unsigned int v176 = (llvm::Value *)(v174 + 40 * v418);
    uint64_t v177 = v438;
    if (*(_WORD *)(a2 + 18))
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)a2);
      uint64_t v174 = *(void *)(a2 + 88);
    }
  }
  else
  {
    uint64_t v174 = *(void *)(a2 + 88);
    unsigned int v175 = v418;
    unsigned int v176 = (llvm::Value *)(v174 + 40 * v418);
    uint64_t v177 = v438;
  }
  unint64_t v266 = *(void *)(a5 + 32) - *(void *)(a5 + 24);
  if ((v266 & 0x7FFFFFFF8) != 0)
  {
    uint64_t v269 = 0;
    size_t v270 = (v266 >> 3);
    size_t v428 = v270;
    v432 = (uint64_t *)(v174 + 40 * (v417 + v175));
    do
    {
      uint64_t v271 = *(void *)(*(void *)(a5 + 24) + 8 * v269);
      unsigned int v272 = *(unsigned __int8 *)(v271 + 16);
      if (v271) {
        BOOL v273 = v272 >= 0x1C;
      }
      else {
        BOOL v273 = 0;
      }
      if (v273)
      {
        if (v272 == 83)
        {
          uint64_t v278 = *(void *)(v271 + 40);
          int v275 = (uint64_t *)(v278 + 40);
          for (uint64_t k = *(void *)(v278 + 48); (uint64_t *)k != v275; uint64_t k = *(void *)(k + 8))
          {
            uint64_t v279 = k - 24;
            if (!k) {
              uint64_t v279 = 0;
            }
            if (*(unsigned char *)(v279 + 16) != 83)
            {
LABEL_377:
              unsigned int v280 = *(unsigned __int8 *)(k - 8) - 38;
              BOOL v108 = v280 > 0x38;
              uint64_t v281 = (1 << v280) & 0x100060000000001;
              if (!v108 && v281 != 0)
              {
                BOOL v321 = (uint64_t **)(k + 8);
                goto LABEL_384;
              }
              int v275 = (uint64_t *)k;
              break;
            }
          }
        }
        else if (v272 == 33)
        {
          uint64_t v274 = *(void *)(v271 - 96);
          int v275 = (uint64_t *)(v274 + 40);
          for (uint64_t k = *(void *)(v274 + 48); (uint64_t *)k != v275; uint64_t k = *(void *)(k + 8))
          {
            uint64_t v277 = k - 24;
            if (!k) {
              uint64_t v277 = 0;
            }
            if (*(unsigned char *)(v277 + 16) != 83) {
              goto LABEL_377;
            }
          }
        }
        else
        {
          BOOL v321 = (uint64_t **)(v271 + 32);
LABEL_384:
          int v275 = *v321;
        }
        if (v275) {
          unsigned int v283 = (llvm::Instruction *)(v275 - 3);
        }
        else {
          unsigned int v283 = 0;
        }
        if (*(unsigned char *)(a1 + 8) && v455)
        {
          unsigned int v284 = (v455 - 1) & ((v271 >> 4) ^ (v271 >> 9));
          uint64_t v285 = *(void *)(v454[0] + 8 * v284);
          if (v271 == v285)
          {
LABEL_391:
            if (v284 != v455)
            {
              v459 = 0;
              v460 = 0;
              v459 = llvm::Constant::getNullValue((llvm::Constant *)(*v433 + 1960), v168, v169);
              int v288 = *(llvm::ConstantInt **)(*v433 + 1960);
              unsigned int v289 = *(_DWORD *)(*v433 + 1968);
              LODWORD(v447) = v289 >> 8;
              if (v289 >> 8 > 0x40) {
                operator new[]();
              }
              if (v289 <= 0xFF) {
                LODWORD(v290) = 0;
              }
              else {
                unint64_t v290 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v289) + 63);
              }
              p_NullValue = (void *)(v290 & v435);
              uint64_t v291 = llvm::ConstantInt::get(v288, (llvm::LLVMContext *)&p_NullValue, v287);
              if (v447 >= 0x41 && p_NullValue) {
                MEMORY[0x1D25D9CB0](p_NullValue, 0x1000C8000313F17);
              }
              v460 = v291;
              uint64_t v292 = *(uint64_t ****)(*(void *)(a5 + 24) + 8 * v269);
              if ((*((unsigned char *)v292 + 23) & 0x10) != 0)
              {
                uint64_t v293 = ***v292;
                uint64_t v294 = *(void *)(v293 + 152);
                uint64_t v295 = *(unsigned int *)(v293 + 168);
                if (!v295) {
                  goto LABEL_407;
                }
                LODWORD(v296) = (v295 - 1) & ((v292 >> 4) ^ (v292 >> 9));
                uint64_t v297 = (uint64_t ****)(v294 + 16 * v296);
                unsigned int v298 = *v297;
                if (*v297 != v292)
                {
                  int v299 = 1;
                  while (v298 != (uint64_t ***)-4096)
                  {
                    int v300 = v296 + v299++;
                    uint64_t v296 = v300 & (v295 - 1);
                    unsigned int v298 = *(uint64_t ****)(v294 + 16 * v296);
                    if (v298 == v292)
                    {
                      uint64_t v297 = (uint64_t ****)(v294 + 16 * v296);
                      goto LABEL_408;
                    }
                  }
LABEL_407:
                  uint64_t v297 = (uint64_t ****)(v294 + 16 * v295);
                }
LABEL_408:
                uint64_t v301 = v297[1];
                uint64_t v304 = *v301;
                uint64_t v303 = (char *)(v301 + 2);
                unint64_t v302 = v304;
              }
              else
              {
                unint64_t v302 = 0;
                uint64_t v303 = &byte_1CFBCE98E;
              }
              v440 = v176;
              __int16 v450 = 1283;
              p_NullValue = "gep_";
              v448 = v303;
              v449 = v302;
              uint64_t v305 = operator new(0xB0uLL);
              uint64_t v306 = v305;
              uint64_t v307 = 0;
              uint64_t v308 = (llvm::Value *)(v305 + 24);
              v305[29] = v305[29] & 0x38000000 | 3;
              do
              {
                unint64_t v309 = &v305[v307];
                *unint64_t v309 = 0;
                v309[1] = 0;
                v309[2] = 0;
                v309[3] = v308;
                v307 += 8;
              }
              while (v307 != 24);
              __int16 v310 = (uint64_t **)v432;
              sub_1CB845A7C(v426, v432, (uint64_t)&v459, 2);
              *(_OWORD *)(v306 + 30) = 0u;
              uint64_t v311 = v306 + 30;
              *((void *)v306 + 12) = v312;
              *((void *)v306 + 13) = 0;
              unsigned int v313 = v306[29] & 0xC0000000 | 3;
              v306[28] = 62;
              v306[29] = v313;
              *(_OWORD *)(v306 + 34) = 0u;
              v306[38] = 0;
              if (v275)
              {
                uint64_t v315 = v275[2];
                *((void *)v306 + 17) = v315;
                *(_WORD *)(v315 + 18) &= ~0x8000u;
                if ((*((unsigned char *)v306 + 119) & 0x10) != 0)
                {
                  uint64_t v317 = *(void *)(v315 + 56);
                  if (v317)
                  {
                    uint64_t v318 = *(llvm::ValueSymbolTable **)(v317 + 104);
                    if (v318) {
                      llvm::ValueSymbolTable::reinsertValue(v318, v308);
                    }
                  }
                }
                uint64_t v316 = *v275;
                *((void *)v306 + 15) = *v275;
                *((void *)v306 + 16) = v275;
                *(void *)(v316 + 8) = v311;
                *int v275 = (uint64_t)v311;
                __int16 v310 = (uint64_t **)v432;
              }
              *((void *)v306 + 20) = v426;
              *((void *)v306 + 21) = llvm::GetElementPtrInst::getIndexedType(v426, (uint64_t)&v459, 2);
              llvm::GetElementPtrInst::init((uint64_t ***)v308, v310, (uint64_t *)&v459, 2, (const char **)&p_NullValue);
              int v314 = operator new(0x80uLL);
              v314[21] = v314[21] & 0x38000000 | 2;
              *(void *)int v314 = 0;
              *((void *)v314 + 1) = 0;
              *((void *)v314 + 2) = 0;
              *((void *)v314 + 3) = v314 + 16;
              *((void *)v314 + 4) = 0;
              *((void *)v314 + 5) = 0;
              *((void *)v314 + 6) = 0;
              *((void *)v314 + 7) = v314 + 16;
              llvm::StoreInst::StoreInst((llvm::StoreInst *)(v314 + 16), *(llvm::Type ***)(*(void *)(a5 + 24) + 8 * v269), v308, 0, v283);
              ++v435;
              uint64_t v177 = v438;
              unsigned int v176 = v440;
              size_t v270 = v428;
              goto LABEL_393;
            }
          }
          else
          {
            int v319 = 1;
            while (v285 != -4096)
            {
              unsigned int v320 = v284 + v319++;
              unsigned int v284 = v320 & (v455 - 1);
              uint64_t v285 = *(void *)(v454[0] + 8 * v284);
              if (v271 == v285) {
                goto LABEL_391;
              }
            }
          }
        }
        uint64_t v286 = operator new(0x80uLL);
        v286[21] = v286[21] & 0x38000000 | 2;
        *(void *)uint64_t v286 = 0;
        *((void *)v286 + 1) = 0;
        *((void *)v286 + 2) = 0;
        *((void *)v286 + 3) = v286 + 16;
        *((void *)v286 + 4) = 0;
        *((void *)v286 + 5) = 0;
        *((void *)v286 + 6) = 0;
        *((void *)v286 + 7) = v286 + 16;
        llvm::StoreInst::StoreInst((llvm::StoreInst *)(v286 + 16), *(llvm::Type ***)(*(void *)(a5 + 24) + 8 * v269), v176, 0, v283);
        unsigned int v176 = (llvm::Value *)((char *)v176 + 40);
        uint64_t v177 = v438;
      }
LABEL_393:
      ++v269;
    }
    while (v269 != v270);
  }
  int v263 = *(_DWORD *)(a1 + 104);
  if (!v263)
  {
    uint64_t v324 = v424;
    uint64_t v325 = **(llvm::Constant ***)(*(void *)(*(void *)(*((void *)v422 + 6) + 56) + 24) + 16);
    if (*((unsigned char *)v325 + 8) == 7)
    {
      uint64_t v326 = (llvm::ReturnInst *)operator new(0x40uLL);
      *((_DWORD *)v326 + 5) &= 0x38000000u;
      int v327 = (llvm::LLVMContext *)v433;
      int v328 = 0;
    }
    else
    {
      int v342 = v422[7];
      if ((v342 & 0x40000000) != 0) {
        BOOL v343 = *(llvm::Value ***)v422;
      }
      else {
        BOOL v343 = (llvm::Value **)((char *)v424 - 32 * (v342 & 0x7FFFFFF));
      }
      uint64_t v391 = *v343;
      if (v325 == *(llvm::Constant **)*v343)
      {
        v392 = operator new(0x60uLL);
        v392[13] = v392[13] & 0x38000000 | 1;
        *(void *)v392 = 0;
        *((void *)v392 + 1) = 0;
        *((void *)v392 + 2) = 0;
        *((void *)v392 + 3) = v392 + 8;
        uint64_t v326 = (llvm::ReturnInst *)(v392 + 8);
        int v327 = (llvm::LLVMContext *)v433;
        int v328 = v391;
      }
      else
      {
        v393 = llvm::Constant::getNullValue(v325, v168, v169);
        BOOL v394 = v393 != 0;
        if (v393) {
          size_t v395 = 96;
        }
        else {
          size_t v395 = 64;
        }
        unint64_t v396 = (llvm::ReturnInst *)operator new(v395);
        uint64_t v326 = (llvm::ReturnInst *)((char *)v396 + 32 * v394);
        *((_DWORD *)v326 + 5) = *((_DWORD *)v326 + 5) & 0x38000000 | v394;
        if (v393)
        {
          do
          {
            *(void *)unint64_t v396 = 0;
            *((void *)v396 + 1) = 0;
            *((void *)v396 + 2) = 0;
            *((void *)v396 + 3) = v326;
            unint64_t v396 = (llvm::ReturnInst *)((char *)v396 + 32);
          }
          while (v396 != v326);
        }
        int v327 = (llvm::LLVMContext *)v433;
        int v328 = v393;
        uint64_t v324 = v424;
      }
    }
    llvm::ReturnInst::ReturnInst(v326, v327, v328, v324);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  LODWORD(v169) = v263 - 1;
  uint64_t v172 = v419;
  uint64_t v170 = v422;
  uint64_t v167 = (uint64_t)v424;
  if (v263 == 1)
  {
    int v322 = v422[7];
    if ((v322 & 0x40000000) != 0) {
      uint64_t v323 = *(llvm::Value ***)v422;
    }
    else {
      uint64_t v323 = (llvm::Value **)((char *)v424 - 32 * (v322 & 0x7FFFFFF));
    }
    v333 = v323[12];
    v334 = (char *)operator new(0x60uLL);
    *((_DWORD *)v334 + 13) = *((_DWORD *)v334 + 13) & 0x38000000 | 1;
    *((void *)v334 + 1) = 0;
    *((void *)v334 + 2) = 0;
    *(void *)v334 = 0;
    *((void *)v334 + 4) = ***(void ***)v333 + 1576;
    *((void *)v334 + 3) = v334 + 32;
    *((void *)v334 + 5) = 0;
    v334[48] = 30;
    v334[49] = 0;
    *((_WORD *)v334 + 25) = 0;
    *((_DWORD *)v334 + 13) = 1;
    *(_OWORD *)(v334 + 56) = 0u;
    unsigned int v335 = v334 + 56;
    *(_OWORD *)(v334 + 72) = 0u;
    *((_DWORD *)v334 + 22) = 0;
    uint64_t v336 = *((void *)v422 + 6);
    uint64_t v337 = (uint64_t *)(v422 + 8);
    *((void *)v334 + 9) = v336;
    *(_WORD *)(v336 + 18) &= ~0x8000u;
    if ((v334[55] & 0x10) != 0
      && (uint64_t v404 = *(void *)(v336 + 56)) != 0
      && (v405 = *(llvm::ValueSymbolTable **)(v404 + 104)) != 0)
    {
      llvm::ValueSymbolTable::reinsertValue(v405, (llvm::Value *)(v334 + 32));
      uint64_t v406 = *(void *)v334;
      uint64_t v407 = *v337;
      *((void *)v334 + 7) = *v337;
      *((void *)v334 + 8) = v337;
      *(void *)(v407 + 8) = v335;
      *uint64_t v337 = (uint64_t)v335;
      if (v406)
      {
        **((void **)v334 + 2) = *((void *)v334 + 1);
        uint64_t v408 = *((void *)v334 + 1);
        if (v408) {
          *(void *)(v408 + 16) = *((void *)v334 + 2);
        }
      }
    }
    else
    {
      uint64_t v338 = *v337;
      *((void *)v334 + 7) = *v337;
      *((void *)v334 + 8) = v337;
      *(void *)(v338 + 8) = v335;
      *uint64_t v337 = (uint64_t)v335;
    }
    *(void *)v334 = v333;
    uint64_t v341 = *((void *)v333 + 1);
    v340 = (void *)((char *)v333 + 8);
    uint64_t v339 = v341;
    *((void *)v334 + 1) = v341;
    if (v341) {
      *(void *)(v339 + 16) = v334 + 8;
    }
    *((void *)v334 + 2) = v340;
    void *v340 = v334;
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  if (v263 == 2)
  {
    int v267 = v422[7];
    if ((v267 & 0x40000000) != 0) {
      int v268 = *(llvm::Value ***)v422;
    }
    else {
      int v268 = (llvm::Value **)((char *)v424 - 32 * (v267 & 0x7FFFFFF));
    }
    unsigned int v344 = v268[12];
    unsigned int v345 = v268[20];
    v346 = operator new(0xA0uLL);
    uint64_t v347 = 0;
    uint64_t v348 = (llvm::BranchInst *)(v346 + 24);
    v346[29] = v346[29] & 0x38000000 | 3;
    do
    {
      v349 = &v346[v347];
      void *v349 = 0;
      v349[1] = 0;
      v349[2] = 0;
      v349[3] = v348;
      v347 += 8;
    }
    while (v347 != 24);
    llvm::BranchInst::BranchInst(v348, v344, v345, v419, v424);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  LODWORD(v260) = v422[7];
  if ((v260 & 0x40000000) != 0) {
    int v329 = *(llvm::Value ***)v422;
  }
  else {
LABEL_552:
  }
    int v329 = (llvm::Value **)(v167 - 32 * (v260 & 0x7FFFFFF));
  if (*v329)
  {
    *(void *)v329[2] = v329[1];
    int64x2_t v402 = v329[1];
    if (v402) {
      *((void *)v402 + 2) = v329[2];
    }
  }
  *int v329 = v172;
  int v330 = (llvm::Value *)*((void *)v172 + 1);
  v329[1] = v330;
  if (v330) {
    *((void *)v330 + 2) = v329 + 1;
  }
  v329[2] = (llvm::Value *)v416;
  *v416 = v329;
  int v331 = v170[7];
  if ((v331 & 0x40000000) != 0) {
    uint64_t v332 = *(void *)v170;
  }
  else {
    uint64_t v332 = v167 - 32 * (v331 & 0x7FFFFFF);
  }
  uint64_t v350 = *(void *)(v332 + 32 * ((2 * v263) | 1u));
  v351 = (void *)(v332 + 32);
  if (*(void *)(v332 + 32))
  {
    **(void **)(v332 + 48) = *(void *)(v332 + 40);
    uint64_t v403 = *(void *)(v332 + 40);
    if (v403) {
      *(void *)(v403 + 16) = *(void *)(v332 + 48);
    }
  }
  void *v351 = v350;
  if (v350)
  {
    uint64_t v354 = *(void *)(v350 + 8);
    uint64_t v352 = (void *)(v350 + 8);
    uint64_t v353 = v354;
    *(void *)(v332 + 40) = v354;
    if (v354) {
      *(void *)(v353 + 16) = v332 + 40;
    }
    *(void *)(v332 + 48) = v352;
    *uint64_t v352 = v351;
  }
  llvm::SwitchInst::removeCase(v167, v167, (int)v169);
  sub_1CD14C7F8((uint64_t **)v436, (llvm::CastInst **)v177, (uint64_t)&v12[-v177] >> 3, (llvm::CastInst **)v177, (uint64_t)&v12[-v177] >> 3, (uint64_t)v172);
  sub_1CD40B1BC(v462[0]);
  if (v451 != &v453) {
    free(v451);
  }
  if (v456)
  {
    v457 = v456;
    operator delete(v456);
  }
  MEMORY[0x1D25D9CD0](v454[0], 8);
  if (v164) {
    operator delete(v164);
  }
  if (v177) {
    operator delete((void *)v177);
  }
  if (__p) {
    operator delete(__p);
  }
  return v172;
}

uint64_t sub_1CD14C7F8(uint64_t **a1, llvm::CastInst **a2, uint64_t a3, llvm::CastInst **a4, uint64_t a5, uint64_t a6)
{
  uint64_t v28 = a6;
  uint64_t v12 = *a1;
  unint64_t v13 = llvm::PointerType::get((llvm::PointerType *)(**a1 + 1912), 0);
  unint64_t v27 = v13;
  Signed = llvm::ConstantInt::getSigned((llvm::ConstantInt *)(*v12 + 1984), 0xFFFFFFFFFFFFFFFFLL, v14);
  uint64_t v15 = *(void *)(a6 + 40);
  uint64_t v16 = *(void *)(v15 + 40);
  if (v16 == v15 + 40)
  {
    uint64_t v17 = 0;
  }
  else
  {
    if (v16) {
      uint64_t v17 = v16 - 24;
    }
    else {
      uint64_t v17 = 0;
    }
    if (*(unsigned __int8 *)(v17 + 16) - 29 >= 0xB) {
      uint64_t v17 = 0;
    }
  }
  uint64_t v25 = v17;
  v23[0] = 0;
  v23[1] = 0;
  int v24 = 0;
  v22[0] = v23;
  v22[1] = &v27;
  void v22[2] = &v28;
  v22[3] = &Signed;
  v22[4] = &v25;
  if (a3)
  {
    unint64_t v21 = v13;
    Declaratiouint64_t n = llvm::Intrinsic::getDeclaration(a1, 168, (uint64_t)&v21, 1);
    sub_1CD14EAB8((uint64_t)v22, Declaration, a2, a3, 1);
  }
  if (a5)
  {
    unint64_t v21 = v27;
    uint64_t v19 = llvm::Intrinsic::getDeclaration(a1, 167, (uint64_t)&v21, 1);
    sub_1CD14EAB8((uint64_t)v22, v19, a4, a5, 0);
  }
  return MEMORY[0x1D25D9CD0](v23[0], 8);
}

uint64_t llvm::CodeExtractor::extractCodeRegion(uint64_t a1)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  if (!llvm::CodeExtractor::isEligible((llvm::CodeExtractor *)a1)) {
    return 0;
  }
  uint64_t v4 = *(llvm::BasicBlock ***)(a1 + 80);
  uint64_t v5 = *v4;
  uint64_t v87 = *v4;
  if (*(void *)(a1 + 16))
  {
    uint64_t v6 = *((void *)v5 + 1);
    if (v6)
    {
      while (1)
      {
        uint64_t v7 = *(void *)(v6 + 24);
        unsigned int v8 = *(unsigned __int8 *)(v7 + 16);
        BOOL v9 = v7 && v8 >= 0x1C;
        if (v9 && v8 - 29 < 0xB) {
          break;
        }
        uint64_t v6 = *(void *)(v6 + 8);
        if (!v6) {
          goto LABEL_15;
        }
      }
      uint64_t v57 = 0;
LABEL_134:
      uint64_t v58 = *(void *)(v7 + 40);
      uint64_t Successor = (const char *)v58;
      v89[0] = 0;
      if ((sub_1CBFFBBB4((uint64_t *)(a1 + 56), &Successor, v89) & 1) == 0)
      {
        uint64_t v59 = *(uint64_t **)(a1 + 16);
        uint64_t v60 = *v59;
        if (!*v59 || (unsigned int v61 = sub_1CBF7A45C(*v59, v58), v61 == -1)) {
          uint64_t v62 = 0;
        }
        else {
          uint64_t v62 = *(const char **)(*(void *)(v60 + 8) + 24 * v61 + 16);
        }
        uint64_t Successor = v62;
        unsigned int EdgeProbability = llvm::BranchProbabilityInfo::getEdgeProbability(*(void *)(a1 + 24), v58, (uint64_t)v5);
        unint64_t v64 = llvm::BlockFrequency::operator*((unint64_t *)&Successor, EdgeProbability);
        if (__CFADD__(v64, v57)) {
          uint64_t v57 = -1;
        }
        else {
          v57 += v64;
        }
      }
      while (1)
      {
        uint64_t v6 = *(void *)(v6 + 8);
        if (!v6) {
          break;
        }
        uint64_t v7 = *(void *)(v6 + 24);
        unsigned int v65 = *(unsigned __int8 *)(v7 + 16);
        if (v7) {
          BOOL v66 = v65 >= 0x1C;
        }
        else {
          BOOL v66 = 0;
        }
        if (v66 && v65 - 29 < 0xB) {
          goto LABEL_134;
        }
      }
      uint64_t v4 = *(llvm::BasicBlock ***)(a1 + 80);
    }
  }
LABEL_15:
  uint64_t v11 = *(llvm::BasicBlock ***)(a1 + 88);
  while (v4 != v11)
  {
    uint64_t v12 = (uint64_t)*v4 + 40;
    uint64_t v13 = *((void *)*v4 + 6);
    while (v13 != v12)
    {
      uint64_t v14 = v13;
      uint64_t v13 = *(void *)(v13 + 8);
      if (v14) {
        uint64_t v15 = v14 - 24;
      }
      else {
        uint64_t v15 = 0;
      }
      BOOL v16 = sub_1CBF698E4(v15);
      if (!v16) {
        uint64_t v15 = 0;
      }
      if (v14 && v16)
      {
        uint64_t v17 = *(void *)(a1 + 32);
        if (v17) {
          llvm::AssumptionCache::unregisterAssumption(v17, v15);
        }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
    }
    ++v4;
  }
  llvm::CodeExtractor::splitReturnBlocks(a1);
  v85[0] = 0;
  v85[1] = 0;
  int v86 = 0;
  uint64_t v80 = (char *)&v84;
  unsigned int v81 = (char *)&v84;
  uint64_t v82 = 1;
  int v83 = 0;
  uint64_t v18 = *(uint64_t **)(a1 + 80);
  unint64_t v73 = *(uint64_t **)(a1 + 88);
  if (v18 == v73)
  {
    *(_DWORD *)(a1 + 104) = 0;
    goto LABEL_104;
  }
  uint64_t v2 = -2;
  while (1)
  {
    uint64_t v19 = *v18;
    uint64_t v20 = *(void *)(*v18 + 40);
    if (v20 != *v18 + 40) {
      break;
    }
LABEL_94:
    if (++v18 == v73)
    {
      *(_DWORD *)(a1 + 104) = HIDWORD(v82) - v83;
      uint64_t v2 = *(void *)(a1 + 80);
      for (uint64_t i = *(void *)(a1 + 88); v2 != i; v2 += 8)
      {
        uint64_t v50 = *(void *)(*(void *)v2 + 40);
        if (v50 == *(void *)v2 + 40)
        {
          uint64_t v52 = 0;
        }
        else
        {
          if (v50) {
            uint64_t v51 = v50 - 24;
          }
          else {
            uint64_t v51 = 0;
          }
          if (*(unsigned __int8 *)(v51 + 16) - 29 >= 0xB) {
            uint64_t v52 = 0;
          }
          else {
            uint64_t v52 = v51;
          }
        }
        if (*(unsigned char *)(v52 + 16) != 30)
        {
          int v53 = 2;
          switch(*(unsigned char *)(v52 + 16))
          {
            case 0x1E:
              goto LABEL_173;
            case 0x1F:
              int v53 = (*(_DWORD *)(v52 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_128;
            case 0x20:
            case 0x26:
              int v53 = (*(_DWORD *)(v52 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_128;
            case 0x21:
              goto LABEL_117;
            case 0x24:
              int v53 = *(_WORD *)(v52 + 18) & 1;
              goto LABEL_128;
            case 0x25:
              int v53 = 1;
              goto LABEL_117;
            case 0x27:
              int v53 = *(_DWORD *)(v52 + 80) + 1;
LABEL_128:
              if (!v53) {
                continue;
              }
              goto LABEL_117;
            default:
              continue;
          }
        }
        if ((*(_DWORD *)(v52 + 20) & 0x7FFFFFF) == 3) {
          int v53 = 2;
        }
        else {
          int v53 = 1;
        }
LABEL_117:
        for (unsigned int j = 0; j != v53; ++j)
        {
          uint64_t Successor = (const char *)llvm::Instruction::getSuccessor((llvm::Instruction *)v52, j);
          v89[0] = 0;
          if ((sub_1CBFFBBB4((uint64_t *)(a1 + 56), &Successor, v89) & 1) == 0)
          {
            uint64_t v55 = llvm::Instruction::getSuccessor((llvm::Instruction *)v52, j);
            unint64_t v56 = *(unsigned int *)(a1 + 128);
            if (v56 >= *(unsigned int *)(a1 + 132)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(a1 + 120) + 8 * v56) = v55;
            ++*(_DWORD *)(a1 + 128);
          }
        }
      }
LABEL_104:
      llvm::CodeExtractor::severSplitPHINodesOfEntry((llvm::CodeExtractor *)a1, &v87);
      llvm::CodeExtractor::severSplitPHINodesOfExits(a1, &v80);
      uint64_t Successor = "codeRepl";
      __int16 v91 = 259;
      operator new();
    }
  }
  if (v20) {
    uint64_t v21 = v20 - 24;
  }
  else {
    uint64_t v21 = 0;
  }
  if (*(unsigned char *)(v21 + 16) == 30)
  {
    if ((*(_DWORD *)(v21 + 20) & 0x7FFFFFF) == 3) {
      int v48 = 2;
    }
    else {
      int v48 = 1;
    }
LABEL_42:
    unsigned int v22 = 0;
    while (1)
    {
      int v88 = 0;
      int v88 = (void *)llvm::Instruction::getSuccessor((llvm::Instruction *)v21, v22);
      uint64_t Successor = (const char *)v88;
      v89[0] = 0;
      if ((sub_1CBFFBBB4((uint64_t *)(a1 + 56), &Successor, v89) & 1) == 0)
      {
        if (*(void *)(a1 + 16))
        {
          long long v39 = sub_1CD4D7004(v85, &v88);
          unint64_t v40 = *(uint64_t **)(a1 + 16);
          uint64_t v41 = *v40;
          if (!*v40 || (unsigned int v42 = sub_1CBF7A45C(*v40, v19), v42 == -1)) {
            unint64_t v43 = 0;
          }
          else {
            unint64_t v43 = *(const char **)(*(void *)(v41 + 8) + 24 * v42 + 16);
          }
          uint64_t Successor = v43;
          unsigned int v44 = llvm::BranchProbabilityInfo::getEdgeProbability(*(void *)(a1 + 24), v19, (uint64_t)v88);
          unint64_t v45 = llvm::BlockFrequency::operator*((unint64_t *)&Successor, v44);
          uint64_t v46 = v39[1];
          BOOL v9 = __CFADD__(v45, v46);
          uint64_t v47 = v45 + v46;
          if (v9) {
            uint64_t v47 = -1;
          }
          v39[1] = v47;
        }
        unint64_t v23 = v88;
        int v24 = v81;
        uint64_t v25 = HIDWORD(v82);
        if (v81 != v80)
        {
          unsigned int v29 = v82;
LABEL_56:
          if (3 * v29 <= 4 * (HIDWORD(v82) - v83))
          {
            if (v29 >= 0x40) {
              v29 *= 2;
            }
            else {
              unsigned int v29 = 128;
            }
          }
          else if (v29 - HIDWORD(v82) >= v29 >> 3)
          {
            goto LABEL_58;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v80, v29);
          unsigned int v29 = v82;
          int v24 = v81;
LABEL_58:
          unsigned int v30 = v29 - 1;
          unsigned int v31 = (v29 - 1) & ((v23 >> 4) ^ (v23 >> 9));
          int v32 = &v24[8 * v31];
          uint64_t v33 = *(void **)v32;
          if (*(void *)v32 == -1)
          {
            uint64_t v34 = 0;
LABEL_70:
            if (v34) {
              uint64_t v38 = v34;
            }
            else {
              uint64_t v38 = (void **)v32;
            }
            if (*v38 != v23)
            {
              if (*v38 == (void *)-2) {
                --v83;
              }
              else {
                ++HIDWORD(v82);
              }
              *uint64_t v38 = v23;
            }
          }
          else
          {
            uint64_t v34 = 0;
            int v35 = 1;
            while (v33 != v23)
            {
              if (v34) {
                BOOL v36 = 0;
              }
              else {
                BOOL v36 = v33 == (void *)-2;
              }
              if (v36) {
                uint64_t v34 = (void **)v32;
              }
              unsigned int v37 = v31 + v35++;
              unsigned int v31 = v37 & v30;
              int v32 = &v24[8 * (v37 & v30)];
              uint64_t v33 = *(void **)v32;
              if (*(void *)v32 == -1) {
                goto LABEL_70;
              }
            }
          }
          goto LABEL_77;
        }
        if (HIDWORD(v82))
        {
          unint64_t v26 = 0;
          uint64_t v27 = 8 * HIDWORD(v82);
          uint64_t v28 = (void **)v81;
          while (*v28 != v88)
          {
            if (*v28 == (void *)-2) {
              unint64_t v26 = v28;
            }
            ++v28;
            v27 -= 8;
            if (!v27)
            {
              if (!v26) {
                goto LABEL_53;
              }
              uint64_t *v26 = v88;
              --v83;
              goto LABEL_77;
            }
          }
          goto LABEL_77;
        }
LABEL_53:
        unsigned int v29 = v82;
        if (HIDWORD(v82) >= v82) {
          goto LABEL_56;
        }
        ++HIDWORD(v82);
        *(void *)&v81[8 * v25] = v88;
      }
LABEL_77:
      if (v48 == ++v22) {
        goto LABEL_94;
      }
    }
  }
  int v48 = 2;
  switch(*(unsigned char *)(v21 + 16))
  {
    case 0x1E:
LABEL_173:
      __break(1u);
      MEMORY[0x1D25D9CD0](v89[1], 8);
      sub_1CC2DBB1C((uint64_t)&Successor);
      uint64_t v72 = *(void *)(v2 + 80);
      break;
    case 0x1F:
      int v48 = (*(_DWORD *)(v21 + 20) >> 1) & 0x3FFFFFF;
      goto LABEL_97;
    case 0x20:
    case 0x26:
      int v48 = (*(_DWORD *)(v21 + 20) & 0x7FFFFFF) - 1;
      goto LABEL_97;
    case 0x21:
      goto LABEL_42;
    case 0x24:
      int v48 = *(_WORD *)(v21 + 18) & 1;
      goto LABEL_97;
    case 0x25:
      int v48 = 1;
      goto LABEL_42;
    case 0x27:
      int v48 = *(_DWORD *)(v21 + 80) + 1;
LABEL_97:
      if (!v48) {
        goto LABEL_94;
      }
      goto LABEL_42;
    default:
      goto LABEL_94;
  }
  while (v72 != v2 + 72)
  {
    uint64_t v68 = v72 - 24;
    if (!v72) {
      uint64_t v68 = 0;
    }
    uint64_t v69 = *(void *)(v68 + 40);
    if (v69) {
      uint64_t v70 = v69 - 24;
    }
    else {
      uint64_t v70 = 0;
    }
    if (*(unsigned __int8 *)(v70 + 16) - 29 >= 0xB) {
      uint64_t v70 = 0;
    }
    int v71 = *(unsigned __int8 *)(v70 + 16);
    if (v71 == 29 || v71 == 34) {
      goto LABEL_164;
    }
    uint64_t v72 = *(void *)(v72 + 8);
  }
  *(void *)(v2 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v2 + 112), **(uint64_t ***)v2, -1, 32);
LABEL_164:
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x1D25D9CD0](v74, 8);
  if (v77) {
    operator delete(v77);
  }
  MEMORY[0x1D25D9CD0](v76, 8);
  if (v79) {
    operator delete(v79);
  }
  MEMORY[0x1D25D9CD0](v78, 8);
  if (v81 != v80) {
    free(v81);
  }
  MEMORY[0x1D25D9CD0](v85[0], 8);
  return v2;
}

uint64_t llvm::CodeExtractor::verifyAssumptionCache(int32x2_t **this, const llvm::Function *a2, const llvm::Function *a3, llvm::AssumptionCache *a4)
{
  if (!*((unsigned char *)a3 + 184)) {
    llvm::AssumptionCache::scanFunction(a3);
  }
  uint64_t v6 = *((unsigned int *)a3 + 6);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = *((void *)a3 + 2);
  uint64_t v8 = v7 + 32 * v6;
  while (1)
  {
    uint64_t v54 = 4;
    uint64_t v55 = 0;
    BOOL v9 = *(int32x2_t *****)(v7 + 16);
    unint64_t v56 = v9;
    if (v9 && v9 != (int32x2_t ****)-8192 && v9 != (int32x2_t ****)-4096)
    {
      unint64_t v10 = *(void *)v7 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v55 = *(unint64_t **)v10;
      *(void *)unint64_t v10 = &v54;
      uint64_t v54 = v10 | 4;
      if (v55) {
        *uint64_t v55 = *v55 & 7 | (unint64_t)&v55;
      }
      BOOL v9 = v56;
    }
    int v57 = *(_DWORD *)(v7 + 24);
    if (!v9 || *((unsigned char *)v9 + 16) != 84)
    {
      LODWORD(v11) = 3;
      goto LABEL_16;
    }
    if (v9[5][7] != this)
    {
      LODWORD(v11) = 1;
      goto LABEL_16;
    }
    int v24 = v9[-4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF)];
    if (!*((unsigned char *)a3 + 184)) {
      llvm::AssumptionCache::scanFunction(a3);
    }
    uint64_t v25 = *((void *)a3 + 20);
    unsigned int v26 = *((_DWORD *)a3 + 44);
    if (!v26) {
      goto LABEL_39;
    }
    unsigned int v28 = (v26 - 1) & ((v24 >> 4) ^ (v24 >> 9));
    uint64_t v27 = v25 + 88 * v28;
    unsigned int v29 = *(int32x2_t ****)(v27 + 24);
    if (v29 != v24)
    {
      int v30 = 1;
      while (v29 != (int32x2_t ***)-4096)
      {
        unsigned int v31 = v28 + v30++;
        unsigned int v28 = v31 & (v26 - 1);
        uint64_t v27 = v25 + 88 * v28;
        unsigned int v29 = *(int32x2_t ****)(v27 + 24);
        if (v29 == v24) {
          goto LABEL_40;
        }
      }
LABEL_39:
      uint64_t v27 = v25 + 88 * v26;
    }
LABEL_40:
    if (v27 == v25 + 88 * v26)
    {
      LODWORD(v11) = 0;
    }
    else
    {
      uint64_t v11 = *(unsigned int *)(v27 + 48);
      if (v11)
      {
        uint64_t v32 = *(void *)(v27 + 40);
        uint64_t v33 = v32 + 32 * v11;
        do
        {
          uint64_t v34 = 0;
          uint64_t v50 = 4;
          uint64_t v51 = 0;
          int v35 = *(int32x2_t *****)(v32 + 16);
          uint64_t v52 = v35;
          if (v35 && v35 != (int32x2_t ****)-8192 && v35 != (int32x2_t ****)-4096)
          {
            unint64_t v36 = *(void *)v32 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v51 = *(unint64_t **)v36;
            *(void *)unint64_t v36 = &v50;
            uint64_t v50 = v36 | 4;
            uint64_t v34 = v51;
            if (v51) {
              *uint64_t v51 = *v51 & 7 | (unint64_t)&v51;
            }
            int v35 = v52;
          }
          int v53 = *(_DWORD *)(v32 + 24);
          if (v35 && *((unsigned char *)v35 + 16) == 84) {
            LODWORD(v11) = v35[5][7] != this || v35[-4 * (*((_DWORD *)v35 + 5) & 0x7FFFFFF)][5][7] != (int32x2_t *)this;
          }
          else {
            LODWORD(v11) = 5;
          }
          if (v35 != (int32x2_t ****)-8192 && v35 != (int32x2_t ****)-4096 && v35 != 0)
          {
            unint64_t v38 = v50 & 0xFFFFFFFFFFFFFFF8;
            *(void *)(v50 & 0xFFFFFFFFFFFFFFF8) = v34;
            if (v51)
            {
              *uint64_t v51 = *v51 & 7 | v38;
            }
            else
            {
              long long v39 = v52;
              unint64_t v40 = ***v52;
              unint64_t v41 = (unint64_t)v40[303];
              if (v41 <= v38)
              {
                uint64_t v42 = v40[305].u32[0];
                if (v41 + 16 * v42 > v38)
                {
                  unsigned int v43 = v42 - 1;
                  LODWORD(v44) = v43 & ((v52 >> 4) ^ (v52 >> 9));
                  unint64_t v45 = (int32x2_t *****)(v41 + 16 * v44);
                  uint64_t v46 = *v45;
                  if (v52 == *v45)
                  {
LABEL_79:
                    *unint64_t v45 = (int32x2_t ****)-8192;
                    v40[304] = vadd_s32(v40[304], (int32x2_t)0x1FFFFFFFFLL);
                    long long v39 = v52;
                  }
                  else
                  {
                    int v47 = 1;
                    while (v46 != (int32x2_t ****)-4096)
                    {
                      int v48 = v44 + v47++;
                      uint64_t v44 = v48 & v43;
                      uint64_t v46 = *(int32x2_t *****)(v41 + 16 * v44);
                      if (v52 == v46)
                      {
                        unint64_t v45 = (int32x2_t *****)(v41 + 16 * v44);
                        goto LABEL_79;
                      }
                    }
                  }
                  *((unsigned char *)v39 + 17) &= ~1u;
                }
              }
            }
          }
          if (v11 != 5 && v11) {
            break;
          }
          LODWORD(v11) = 0;
          v32 += 32;
        }
        while (v32 != v33);
      }
    }
LABEL_16:
    if (v56 != (int32x2_t ****)-8192 && v56 != (int32x2_t ****)-4096 && v56 != 0)
    {
      unint64_t v13 = v54 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v54 & 0xFFFFFFFFFFFFFFF8) = v55;
      if (v55)
      {
        *uint64_t v55 = *v55 & 7 | v13;
      }
      else
      {
        uint64_t v14 = v56;
        uint64_t v15 = ***v56;
        unint64_t v16 = (unint64_t)v15[303];
        if (v16 <= v13)
        {
          uint64_t v17 = v15[305].u32[0];
          if (v16 + 16 * v17 > v13)
          {
            unsigned int v18 = v17 - 1;
            LODWORD(v19) = v18 & ((v56 >> 4) ^ (v56 >> 9));
            uint64_t v20 = (int32x2_t *****)(v16 + 16 * v19);
            uint64_t v21 = *v20;
            if (v56 == *v20)
            {
LABEL_34:
              void *v20 = (int32x2_t ****)-8192;
              v15[304] = vadd_s32(v15[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v14 = v56;
            }
            else
            {
              int v22 = 1;
              while (v21 != (int32x2_t ****)-4096)
              {
                int v23 = v19 + v22++;
                uint64_t v19 = v23 & v18;
                uint64_t v21 = *(int32x2_t *****)(v16 + 16 * v19);
                if (v56 == v21)
                {
                  uint64_t v20 = (int32x2_t *****)(v16 + 16 * v19);
                  goto LABEL_34;
                }
              }
            }
            *((unsigned char *)v14 + 17) &= ~1u;
          }
        }
      }
    }
    if (v11 != 3 && v11) {
      return 1;
    }
    v7 += 32;
    if (v7 == v8) {
      return 0;
    }
  }
}

void sub_1CD14EAB8(uint64_t a1, uint64_t a2, llvm::CastInst **a3, uint64_t a4, int a5)
{
  v34[2] = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    uint64_t v5 = a3;
    uint64_t v8 = &a3[a4];
    int v30 = (const llvm::Twine ***)(a1 + 16);
    if (a5) {
      BOOL v9 = (uint64_t **)(a1 + 16);
    }
    else {
      BOOL v9 = (uint64_t **)(a1 + 32);
    }
    do
    {
      uint64_t v33 = *v5;
      uint64_t v11 = sub_1CC27AF70(*(uint64_t **)a1, &v33);
      if (v11[1])
      {
        if (a2) {
          goto LABEL_7;
        }
      }
      else
      {
        PointerCast = v33;
        uint64_t v14 = *(llvm::Value ***)(a1 + 8);
        uint64_t v15 = *v14;
        if (*(llvm::Value **)v33 != *v14)
        {
          v31[0] = "lt.cast";
          __int16 v32 = 259;
          PointerCast = llvm::CastInst::CreatePointerCast(v33, v15, v31, **v30, v10);
        }
        v11[1] = PointerCast;
        if (a2)
        {
LABEL_7:
          uint64_t v12 = *(uint64_t ***)(a2 + 24);
          goto LABEL_12;
        }
      }
      uint64_t v12 = 0;
LABEL_12:
      uint64_t v16 = v11[1];
      v34[0] = **(void **)(a1 + 24);
      v34[1] = v16;
      __int16 v32 = 257;
      uint64_t v17 = (char *)operator new(0xB0uLL);
      unsigned int v18 = v17;
      uint64_t v19 = 0;
      uint64_t v20 = (llvm::Value *)(v17 + 96);
      *((_DWORD *)v17 + 29) = *((_DWORD *)v17 + 29) & 0x38000000 | 3;
      do
      {
        uint64_t v21 = &v17[v19];
        *(void *)uint64_t v21 = 0;
        *((void *)v21 + 1) = 0;
        *((void *)v21 + 2) = 0;
        *((void *)v21 + 3) = v20;
        v19 += 32;
      }
      while (v19 != 96);
      uint64_t v22 = *v12[2];
      *(_OWORD *)(v17 + 120) = 0u;
      int v23 = v17 + 120;
      *((void *)v17 + 12) = v22;
      *((void *)v17 + 13) = 0;
      *((_WORD *)v17 + 56) = 84;
      *((_WORD *)v17 + 57) = 0;
      *((_DWORD *)v17 + 29) = *((_DWORD *)v17 + 29) & 0xC0000000 | 3;
      *(_OWORD *)(v17 + 136) = 0u;
      *((_DWORD *)v17 + 38) = 0;
      *((void *)v17 + 20) = 0;
      llvm::CallInst::init((uint64_t ***)v17 + 12, v12, (uint64_t **)a2, v34, 2, 0, 0, v31);
      uint64_t v24 = **v9;
      uint64_t v25 = *(void *)(v24 + 40);
      *((void *)v18 + 17) = v25;
      *(_WORD *)(v25 + 18) &= ~0x8000u;
      if ((v18[119] & 0x10) != 0)
      {
        uint64_t v28 = *(void *)(v25 + 56);
        if (v28)
        {
          unsigned int v29 = *(llvm::ValueSymbolTable **)(v28 + 104);
          if (v29) {
            llvm::ValueSymbolTable::reinsertValue(v29, v20);
          }
        }
      }
      uint64_t v27 = *(void *)(v24 + 24);
      unsigned int v26 = (void *)(v24 + 24);
      *((void *)v18 + 15) = v27;
      *((void *)v18 + 16) = v26;
      *(void *)(v27 + 8) = v23;
      void *v26 = v23;
      ++v5;
    }
    while (v5 != v8);
  }
}

void sub_1CD14ECE4(uint64_t a1)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1 + 72;
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2 != a1 + 72)
  {
    while (1)
    {
      uint64_t v4 = v2 - 24;
      if (!v2) {
        uint64_t v4 = 0;
      }
      uint64_t v5 = *(void *)(v4 + 48);
      if (v5 != v4 + 40) {
        break;
      }
      uint64_t v2 = *(void *)(v2 + 8);
      if (v2 == v1) {
        return;
      }
    }
    while (1)
    {
      if (v5) {
        uint64_t v6 = (uint64_t ***)(v5 - 24);
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v11 = v13;
      uint64_t v12 = 0x400000000;
      llvm::findDbgUsers((uint64_t)&v11, v6);
      uint64_t v7 = (char *)v11;
      if (v12)
      {
        uint64_t v8 = 8 * v12;
        do
        {
          if (*(void *)(*(void *)(*(void *)v7 + 40) + 56) != a1) {
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
          v7 += 8;
          v8 -= 8;
        }
        while (v8);
        uint64_t v7 = (char *)v11;
      }
      if (v7 != (char *)v13) {
        free(v7);
      }
      uint64_t v5 = *(void *)(v5 + 8);
      uint64_t v9 = v2 - 24;
      if (!v2) {
        uint64_t v9 = 0;
      }
      if (v5 == v9 + 40) {
        break;
      }
LABEL_25:
      if (v2 == v1) {
        return;
      }
    }
    while (1)
    {
      uint64_t v2 = *(void *)(v2 + 8);
      if (v2 == v1) {
        break;
      }
      uint64_t v10 = v2 - 24;
      if (!v2) {
        uint64_t v10 = 0;
      }
      uint64_t v5 = *(void *)(v10 + 48);
      if (v5 != v10 + 40) {
        goto LABEL_25;
      }
    }
  }
}

unsigned __int8 *sub_1CD14EE74(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2;
  if (!a2 || *a2 != 5) {
    return v2;
  }
  unint64_t v13 = a2;
  llvm::MetadataTracking::track((uint64_t)&v13, a2, 2);
  llvm::DebugLoc::replaceInlinedAtSubprogram((uint64_t *)&v13, *(unsigned __int8 **)(a1 + 16), *(void **)a1, *(void *)(a1 + 8), &v14);
  uint64_t v2 = v14;
  if (v14)
  {
    int v4 = *v14;
    if ((v4 - 4) > 0x1E)
    {
      if ((v4 - 3) >= 0xFFFFFFFE) {
        uint64_t v7 = v14;
      }
      else {
        uint64_t v7 = 0;
      }
      if ((v4 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v8 = (unint64_t)(v7 + 8);
LABEL_17:
        uint64_t v15 = &v14;
        sub_1CC5FA668(v8 + 16, &v15);
        goto LABEL_7;
      }
      if (v4 == 3) {
        *((void *)v14 + 1) = 0;
      }
    }
    else if ((v14[1] & 0x7F) == 2 || *((_DWORD *)v14 + 3))
    {
      uint64_t v11 = *((void *)v14 + 2);
      if ((v11 & 4) != 0)
      {
        unint64_t v8 = v11 & 0xFFFFFFFFFFFFFFF8;
        if (v8) {
          goto LABEL_17;
        }
      }
    }
  }
LABEL_7:
  if (v13)
  {
    int v5 = *v13;
    if ((v5 - 4) > 0x1E)
    {
      if ((v5 - 3) >= 0xFFFFFFFE) {
        uint64_t v9 = v13;
      }
      else {
        uint64_t v9 = 0;
      }
      if ((v5 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v10 = (unint64_t)(v9 + 8);
LABEL_23:
        uint64_t v15 = &v13;
        sub_1CC5FA668(v10 + 16, &v15);
        return v2;
      }
      if (v5 == 3) {
        *((void *)v13 + 1) = 0;
      }
    }
    else if ((v13[1] & 0x7F) == 2 || *((_DWORD *)v13 + 3))
    {
      uint64_t v12 = *((void *)v13 + 2);
      if ((v12 & 4) != 0)
      {
        unint64_t v10 = v12 & 0xFFFFFFFFFFFFFFF8;
        if (v10) {
          goto LABEL_23;
        }
      }
    }
  }
  return v2;
}

uint64_t sub_1CD14EFDC()
{
  int v2 = 1;
  *(void *)&long long v1 = "Aggregate arguments to code-extracted functions";
  *((void *)&v1 + 1) = 47;
  sub_1CD4C1500((uint64_t)&unk_1EBCFB8C8, "aggregate-extracted-args", &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFB8C8, &dword_1CB82C000);
}

void llvm::applyExtTspLayout(uint64_t *a1@<X0>, void *a2@<X1>, unsigned int *a3@<X2>, char **a4@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t v8 = a1[1];
  memset(v383, 0, sizeof(v383));
  *(_OWORD *)unsigned int v384 = 0u;
  *(_OWORD *)v385 = 0u;
  long long v386 = 0u;
  *(_OWORD *)uint64_t v387 = 0u;
  memset(v388, 0, sizeof(v388));
  long long v389 = 0u;
  v390 = 0;
  uint64_t v10 = v8 - v9;
  unint64_t v11 = v10 >> 3;
  unint64_t v382 = v10 >> 3;
  if (v10)
  {
    if ((unint64_t)v10 >= 0x1249249249249249) {
      goto LABEL_511;
    }
    v393 = v385;
    uint64_t v12 = 112 * v11;
    *(void *)uint64_t v391 = operator new(112 * v11);
    *(void *)&v391[8] = *(void *)v391;
    *(void *)&v391[16] = *(void *)v391;
    v392 = (char *)(*(void *)v391 + v12);
    sub_1CD151044((uint64_t *)v384, v391);
    unint64_t v13 = *(void **)&v391[8];
    for (uint64_t i = *(void **)&v391[16]; i != v13; sub_1CD151100(i))
      i -= 14;
    if (*(void *)v391) {
      operator delete(*(void **)v391);
    }
    unint64_t v11 = v382;
  }
  __p = a3;
  uint64_t v366 = a4;
  if (v11)
  {
    unint64_t v15 = 0;
    uint64_t v16 = (unint64_t *)v384[1];
    do
    {
      if (*(void *)(*a1 + 8 * v15) <= 1uLL) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = *(void *)(*a1 + 8 * v15);
      }
      if (v15 | *(void *)(*a2 + 8 * v15)) {
        uint64_t v18 = *(void *)(*a2 + 8 * v15);
      }
      else {
        uint64_t v18 = 1;
      }
      if (v16 >= v385[0])
      {
        uint64_t v19 = 0x6DB6DB6DB6DB6DB7 * (((char *)v16 - (char *)v384[0]) >> 4);
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) > 0x249249249249249) {
          goto LABEL_511;
        }
        if (0xDB6DB6DB6DB6DB6ELL * (((char *)v385[0] - (char *)v384[0]) >> 4) > v20) {
          unint64_t v20 = 0xDB6DB6DB6DB6DB6ELL * (((char *)v385[0] - (char *)v384[0]) >> 4);
        }
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((char *)v385[0] - (char *)v384[0]) >> 4)) >= 0x124924924924924) {
          unint64_t v21 = 0x249249249249249;
        }
        else {
          unint64_t v21 = v20;
        }
        v393 = v385;
        if (v21 > 0x249249249249249) {
LABEL_512:
        }
          sub_1CB833614();
        uint64_t v22 = 112 * v21;
        int v23 = (char *)operator new(112 * v21);
        uint64_t v24 = &v23[112 * v19];
        *(void *)uint64_t v391 = v23;
        *(void *)&v391[8] = v24;
        *(void *)uint64_t v24 = v15;
        *((void *)v24 + 1) = 0;
        *((void *)v24 + 2) = v17;
        *((void *)v24 + 3) = v18;
        *((_OWORD *)v24 + 2) = 0u;
        *((_OWORD *)v24 + 3) = 0u;
        *((_OWORD *)v24 + 4) = 0u;
        *((_OWORD *)v24 + 5) = 0u;
        *((_OWORD *)v24 + 6) = 0u;
        *(void *)&v391[16] = v24 + 112;
        v392 = &v23[v22];
        sub_1CD151044((uint64_t *)v384, v391);
        uint64_t v16 = (unint64_t *)v384[1];
        uint64_t v25 = *(void **)&v391[8];
        for (unsigned int j = *(void **)&v391[16]; j != v25; sub_1CD151100(j))
          j -= 14;
        if (*(void *)v391) {
          operator delete(*(void **)v391);
        }
        unint64_t v11 = v382;
      }
      else
      {
        unint64_t *v16 = v15;
        v16[1] = 0;
        void v16[2] = v17;
        v16[3] = v18;
        *((_OWORD *)v16 + 2) = 0u;
        *((_OWORD *)v16 + 3) = 0u;
        *((_OWORD *)v16 + 4) = 0u;
        *((_OWORD *)v16 + 5) = 0u;
        *((_OWORD *)v16 + 6) = 0u;
        v16 += 14;
      }
      v384[1] = v16;
      ++v15;
    }
    while (v15 < v11);
  }
  sub_1CD45F678(v391, v11);
  sub_1CD45F718((void **)v383);
  v383[0] = *(_OWORD *)v391;
  *(void *)&v383[1] = *(void *)&v391[16];
  memset(v391, 0, sizeof(v391));
  v394[0] = (void **)v391;
  sub_1CBF7EDF0(v394);
  sub_1CD45F678(v391, v382);
  sub_1CD45F718((void **)&v383[1] + 1);
  *(_OWORD *)((char *)&v383[1] + 8) = *(_OWORD *)v391;
  *((void *)&v383[2] + 1) = *(void *)&v391[16];
  memset(v391, 0, sizeof(v391));
  v394[0] = (void **)v391;
  sub_1CBF7EDF0(v394);
  unint64_t v27 = __p[2];
  uint64_t v28 = v385[1];
  unsigned int v29 = v366;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v386 + 1) - (unint64_t)v385[1]) >> 3) < v27)
  {
    int v30 = (unsigned char *)v386;
    uint64_t v31 = 3 * v27;
    __int16 v32 = (char *)operator new(24 * v27);
    uint64_t v33 = &v32[24 * ((v30 - v28) / 24)];
    uint64_t v34 = v33;
    if (v30 != v28)
    {
      int v35 = &v32[24 * ((v30 - v28) / 24)];
      do
      {
        long long v36 = *(_OWORD *)(v30 - 24);
        uint64_t v34 = v35 - 24;
        *((void *)v35 - 1) = *((void *)v30 - 1);
        *(_OWORD *)(v35 - 24) = v36;
        v30 -= 24;
        v35 -= 24;
      }
      while (v30 != v28);
    }
    v385[1] = v34;
    *(void *)&long long v386 = v33;
    *((void *)&v386 + 1) = &v32[8 * v31];
    if (v28) {
      operator delete(v28);
    }
  }
  unsigned int v37 = sub_1CD87AE94((uint64_t)__p);
  __pa = (uint64_t *)(*(void *)__p + 24 * __p[4]);
  if (__pa != v37)
  {
    long long v39 = v37;
    unint64_t v40 = v38;
    do
    {
      uint64_t v41 = *v39;
      uint64_t v42 = v39[1];
      if (*v39 == v42) {
        goto LABEL_133;
      }
      uint64_t v43 = v39[2];
      uint64_t v44 = *(void *)&v383[0] + 24 * v41;
      int v47 = *(char **)(v44 + 8);
      uint64_t v46 = (void *)(v44 + 8);
      unint64_t v45 = v47;
      unint64_t v48 = v46[1];
      uint64_t v379 = *v39;
      uint64_t v370 = v43;
      if ((unint64_t)v47 >= v48)
      {
        uint64_t v50 = (void **)(*(void *)&v383[0] + 24 * v41);
        uint64_t v51 = (char *)*v50;
        uint64_t v52 = (v45 - (unsigned char *)*v50) >> 3;
        unint64_t v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 61) {
          goto LABEL_511;
        }
        uint64_t v54 = v48 - (void)v51;
        if (v54 >> 2 > v53) {
          unint64_t v53 = v54 >> 2;
        }
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v55 = v53;
        }
        if (v55)
        {
          if (v55 >> 61) {
            goto LABEL_512;
          }
          unint64_t v56 = (char *)operator new(8 * v55);
          uint64_t v41 = v379;
        }
        else
        {
          unint64_t v56 = 0;
        }
        int v57 = &v56[8 * v52];
        *(void *)int v57 = v42;
        unsigned int v49 = v57 + 8;
        while (v45 != v51)
        {
          uint64_t v58 = *((void *)v45 - 1);
          v45 -= 8;
          *((void *)v57 - 1) = v58;
          v57 -= 8;
        }
        llvm::Value *v50 = v57;
        *uint64_t v46 = v49;
        v46[1] = &v56[8 * v55];
        if (v51)
        {
          operator delete(v51);
          uint64_t v41 = v379;
        }
        uint64_t v43 = v370;
      }
      else
      {
        *(void *)unint64_t v45 = v42;
        unsigned int v49 = v45 + 8;
      }
      *uint64_t v46 = v49;
      uint64_t v59 = *((void *)&v383[1] + 1) + 24 * v42;
      uint64_t v62 = *(char **)(v59 + 8);
      unsigned int v61 = (void *)(v59 + 8);
      uint64_t v60 = v62;
      unint64_t v63 = v61[1];
      if ((unint64_t)v62 >= v63)
      {
        unsigned int v65 = (void **)(*((void *)&v383[1] + 1) + 24 * v42);
        BOOL v66 = (char *)*v65;
        uint64_t v67 = (v60 - (unsigned char *)*v65) >> 3;
        unint64_t v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 61) {
          goto LABEL_511;
        }
        uint64_t v69 = v63 - (void)v66;
        if (v69 >> 2 > v68) {
          unint64_t v68 = v69 >> 2;
        }
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v70 = v68;
        }
        if (v70)
        {
          if (v70 >> 61) {
            goto LABEL_512;
          }
          int v71 = (char *)operator new(8 * v70);
          uint64_t v41 = v379;
        }
        else
        {
          int v71 = 0;
        }
        uint64_t v72 = &v71[8 * v67];
        *(void *)uint64_t v72 = v41;
        unint64_t v64 = v72 + 8;
        while (v60 != v66)
        {
          uint64_t v73 = *((void *)v60 - 1);
          v60 -= 8;
          *((void *)v72 - 1) = v73;
          v72 -= 8;
        }
        *unsigned int v65 = v72;
        *unsigned int v61 = v64;
        v61[1] = &v71[8 * v70];
        if (v66)
        {
          operator delete(v66);
          uint64_t v41 = v379;
        }
        uint64_t v43 = v370;
      }
      else
      {
        *(void *)uint64_t v60 = v41;
        unint64_t v64 = v60 + 8;
      }
      *unsigned int v61 = v64;
      unsigned int v29 = v366;
      if (!v43) {
        goto LABEL_133;
      }
      uint64_t v74 = (char *)v384[0];
      uint64_t v75 = (char *)v384[0] + 112 * v41;
      uint64_t v76 = (char *)v384[0] + 112 * v42;
      unint64_t v77 = (void *)v386;
      uint64_t v368 = (char *)v384[0];
      if ((unint64_t)v386 >= *((void *)&v386 + 1))
      {
        uint64_t v79 = v385[1];
        unint64_t v80 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v386 - (unint64_t)v385[1]) >> 3);
        unint64_t v81 = v80 + 1;
        if (v80 + 1 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_511;
        }
        if (0x5555555555555556 * ((uint64_t)(*((void *)&v386 + 1) - (unint64_t)v385[1]) >> 3) > v81) {
          unint64_t v81 = 0x5555555555555556 * ((uint64_t)(*((void *)&v386 + 1) - (unint64_t)v385[1]) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v386 + 1) - (unint64_t)v385[1]) >> 3) >= 0x555555555555555) {
          unint64_t v82 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v82 = v81;
        }
        if (v82 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_512;
        }
        uint64_t v83 = v43;
        uint64_t v84 = 3 * v82;
        int v85 = (char *)operator new(24 * v82);
        int v86 = &v85[24 * v80];
        *(void *)int v86 = v75;
        *((void *)v86 + 1) = v76;
        *((void *)v86 + 2) = v83;
        if (v77 == v79)
        {
          uint64_t v89 = &v85[24 * v80];
        }
        else
        {
          uint64_t v87 = &v85[24 * v80];
          do
          {
            long long v88 = *(_OWORD *)(v77 - 3);
            uint64_t v89 = v87 - 24;
            *((void *)v87 - 1) = *(v77 - 1);
            *(_OWORD *)(v87 - 24) = v88;
            v77 -= 3;
            v87 -= 24;
          }
          while (v77 != v79);
        }
        uint64_t v90 = &v85[8 * v84];
        uint64_t v78 = v86 + 24;
        v385[1] = v89;
        *(void *)&long long v386 = v86 + 24;
        *((void *)&v386 + 1) = v90;
        if (v79) {
          operator delete(v79);
        }
        uint64_t v41 = v379;
        uint64_t v74 = v368;
      }
      else
      {
        *(void *)long long v386 = v75;
        v77[1] = v76;
        uint64_t v78 = v77 + 3;
        v77[2] = v43;
      }
      *(void *)&long long v386 = v78;
      __int16 v91 = &v74[112 * v42];
      unint64_t v94 = *((void *)v91 + 13);
      size_t v93 = v91 + 104;
      unint64_t v92 = v94;
      unint64_t v95 = v78 - 3;
      uint64_t v97 = v93 - 1;
      uint64_t v96 = (char *)*(v93 - 1);
      if ((unint64_t)v96 >= v94)
      {
        uint64_t v99 = (char **)(v93 - 2);
        uint64_t v100 = (char *)*(v93 - 2);
        uint64_t v101 = (v96 - v100) >> 3;
        unint64_t v102 = v101 + 1;
        if ((unint64_t)(v101 + 1) >> 61) {
          goto LABEL_511;
        }
        uint64_t v103 = v92 - (void)v100;
        if (v103 >> 2 > v102) {
          unint64_t v102 = v103 >> 2;
        }
        if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
        }
        unint64_t v371 = v102;
        if (v102)
        {
          if (v102 >> 61) {
            goto LABEL_512;
          }
          uint64_t v104 = (char *)operator new(8 * v102);
          uint64_t v41 = v379;
        }
        else
        {
          uint64_t v104 = 0;
        }
        uint64_t v105 = &v104[8 * v101];
        *(void *)uint64_t v105 = v95;
        unint64_t v98 = v105 + 8;
        if (v96 != v100)
        {
          do
          {
            uint64_t v106 = *((void *)v96 - 1);
            v96 -= 8;
            *((void *)v105 - 1) = v106;
            v105 -= 8;
          }
          while (v96 != v100);
          uint64_t v96 = *v99;
        }
        *uint64_t v99 = v105;
        *uint64_t v97 = v98;
        void *v93 = &v104[8 * v371];
        if (v96)
        {
          operator delete(v96);
          uint64_t v41 = v379;
        }
        uint64_t v74 = v368;
      }
      else
      {
        *(void *)uint64_t v96 = v95;
        unint64_t v98 = v96 + 8;
      }
      *uint64_t v97 = v98;
      unsigned int v107 = &v74[112 * v41];
      unint64_t v110 = *((void *)v107 + 10);
      uint64_t v109 = v107 + 80;
      unint64_t v108 = v110;
      uint64_t v111 = v386 - 24;
      uint64_t v113 = v109 - 1;
      uint64_t v112 = (char *)*(v109 - 1);
      if ((unint64_t)v112 >= v110)
      {
        unint64_t v115 = (char **)(v109 - 2);
        int v116 = (char *)*(v109 - 2);
        uint64_t v117 = (v112 - v116) >> 3;
        unint64_t v118 = v117 + 1;
        if ((unint64_t)(v117 + 1) >> 61) {
          goto LABEL_511;
        }
        uint64_t v119 = v108 - (void)v116;
        if (v119 >> 2 > v118) {
          unint64_t v118 = v119 >> 2;
        }
        if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v120 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v120 = v118;
        }
        if (v120)
        {
          if (v120 >> 61) {
            goto LABEL_512;
          }
          int v121 = (char *)operator new(8 * v120);
        }
        else
        {
          int v121 = 0;
        }
        int v122 = &v121[8 * v117];
        *(void *)int v122 = v111;
        uint64_t v114 = v122 + 8;
        if (v112 == v116)
        {
          unsigned int v29 = v366;
        }
        else
        {
          unsigned int v29 = v366;
          do
          {
            uint64_t v123 = *((void *)v112 - 1);
            v112 -= 8;
            *((void *)v122 - 1) = v123;
            v122 -= 8;
          }
          while (v112 != v116);
          uint64_t v112 = *v115;
        }
        *unint64_t v115 = v122;
        void *v113 = v114;
        *uint64_t v109 = &v121[8 * v120];
        if (v112) {
          operator delete(v112);
        }
      }
      else
      {
        *(void *)uint64_t v112 = v111;
        uint64_t v114 = v112 + 8;
        unsigned int v29 = v366;
      }
      void *v113 = v114;
LABEL_133:
      while (1)
      {
        v39 += 3;
        if (v39 == v40) {
          break;
        }
        uint64_t v124 = v39[1];
        if ((*v39 != -1 || v124 != -1) && (*v39 != -2 || v124 != -2)) {
          goto LABEL_144;
        }
      }
      long long v39 = v40;
LABEL_144:
      ;
    }
    while (v39 != __pa);
  }
  unint64_t v127 = v382;
  if (v382 > ((char *)v388[0] - (char *)v387[0]) >> 6)
  {
    if (v382 >> 58) {
      goto LABEL_511;
    }
    int64_t v128 = (char *)v387[1] - (char *)v387[0];
    v393 = v388;
    *(void *)uint64_t v391 = operator new(v382 << 6);
    *(void *)&v391[8] = *(void *)v391 + v128;
    *(void *)&v391[16] = *(void *)v391 + v128;
    v392 = (char *)(*(void *)v391 + (v382 << 6));
    sub_1CD151158((uint64_t *)v387, v391);
    uint64_t v130 = *(void **)&v391[8];
    for (uint64_t k = *(void **)&v391[16]; k != v130; sub_1CD15120C(k))
      k -= 8;
    if (*(void *)v391) {
      operator delete(*(void **)v391);
    }
    unint64_t v127 = v382;
  }
  uint64_t v131 = (unsigned char *)v389;
  if (v127 > (uint64_t)&v390[-v389] >> 3)
  {
    if (v127 >> 61) {
      goto LABEL_511;
    }
    uint64_t v132 = (unsigned char *)*((void *)&v389 + 1);
    uint64_t v133 = (char *)operator new(8 * v127);
    uint64_t v134 = &v133[(v132 - v131) & 0xFFFFFFFFFFFFFFF8];
    uint64_t v135 = v134;
    if (v132 != v131)
    {
      uint64_t v135 = &v133[(v132 - v131) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        uint64_t v136 = *((void *)v132 - 1);
        v132 -= 8;
        *((void *)v135 - 1) = v136;
        v135 -= 8;
      }
      while (v132 != v131);
    }
    *(void *)&long long v389 = v135;
    *((void *)&v389 + 1) = v134;
    v390 = &v133[8 * v127];
    if (v131) {
      operator delete(v131);
    }
  }
  uint64_t v137 = v384[0];
  for (uint64_t m = v384[1]; v137 != m; v137 += 14)
  {
    unsigned int v139 = (char *)v387[1];
    if (v387[1] >= v388[0])
    {
      int64_t v142 = ((char *)v387[1] - (char *)v387[0]) >> 6;
      if ((unint64_t)(v142 + 1) >> 58) {
        goto LABEL_511;
      }
      unint64_t v143 = ((char *)v388[0] - (char *)v387[0]) >> 5;
      if (v143 <= v142 + 1) {
        unint64_t v143 = v142 + 1;
      }
      if ((void *)((char *)v388[0] - (char *)v387[0]) >= (void *)0x7FFFFFFFFFFFFFC0) {
        unint64_t v144 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v144 = v143;
      }
      v393 = v388;
      if (v144)
      {
        if (v144 >> 58) {
          goto LABEL_512;
        }
        unsigned int v145 = (char *)operator new(v144 << 6);
      }
      else
      {
        unsigned int v145 = 0;
      }
      uint64_t v146 = &v145[64 * v142];
      *(void *)uint64_t v391 = v145;
      *(void *)&v391[8] = v146;
      v392 = &v145[64 * v144];
      *(void *)uint64_t v146 = *v137;
      *(_OWORD *)(v146 + 24) = 0u;
      *(_OWORD *)(v146 + 8) = 0u;
      unint64_t v147 = operator new(8uLL);
      *((void *)v146 + 2) = v147;
      *unint64_t v147 = v137;
      *(int64x2_t *)(v146 + 24) = vdupq_n_s64((unint64_t)(v147 + 1));
      *((void *)v146 + 6) = 0;
      *((void *)v146 + 7) = 0;
      *((void *)v146 + 5) = 0;
      *(void *)&v391[16] = v146 + 64;
      sub_1CD151158((uint64_t *)v387, v391);
      uint64_t v141 = (char *)v387[1];
      uint64_t v149 = *(void **)&v391[8];
      for (uint64_t n = *(void **)&v391[16]; n != v149; sub_1CD15120C(n))
        n -= 8;
      if (*(void *)v391) {
        operator delete(*(void **)v391);
      }
    }
    else
    {
      *(void *)v387[1] = *v137;
      *(_OWORD *)(v139 + 8) = 0u;
      *(_OWORD *)(v139 + 24) = 0u;
      int v140 = operator new(8uLL);
      *((void *)v139 + 2) = v140;
      *((void *)v139 + 4) = v140 + 1;
      *int v140 = v137;
      *((void *)v139 + 3) = v140 + 1;
      uint64_t v141 = v139 + 64;
      *((void *)v139 + 6) = 0;
      *((void *)v139 + 7) = 0;
      *((void *)v139 + 5) = 0;
    }
    v387[1] = v141;
    uint64_t v150 = v141 - 64;
    v137[4] = v141 - 64;
    if (v137[3])
    {
      uint64_t v151 = (char *)*((void *)&v389 + 1);
      if (*((void *)&v389 + 1) >= (unint64_t)v390)
      {
        unint64_t v153 = (char *)v389;
        uint64_t v154 = (uint64_t)(*((void *)&v389 + 1) - v389) >> 3;
        unint64_t v155 = v154 + 1;
        if ((unint64_t)(v154 + 1) >> 61) {
          goto LABEL_511;
        }
        uint64_t v156 = (uint64_t)&v390[-v389];
        if ((uint64_t)&v390[-v389] >> 2 > v155) {
          unint64_t v155 = v156 >> 2;
        }
        if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v157 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v157 = v155;
        }
        if (v157)
        {
          if (v157 >> 61) {
            goto LABEL_512;
          }
          uint64_t v158 = (char *)operator new(8 * v157);
        }
        else
        {
          uint64_t v158 = 0;
        }
        uint64_t v159 = &v158[8 * v154];
        *(void *)uint64_t v159 = v150;
        uint64_t v152 = v159 + 8;
        if (v151 != v153)
        {
          do
          {
            uint64_t v160 = *((void *)v151 - 1);
            v151 -= 8;
            *((void *)v159 - 1) = v160;
            v159 -= 8;
          }
          while (v151 != v153);
          uint64_t v151 = (char *)v389;
        }
        *(void *)&long long v389 = v159;
        *((void *)&v389 + 1) = v152;
        v390 = &v158[8 * v157];
        unsigned int v29 = v366;
        if (v151) {
          operator delete(v151);
        }
      }
      else
      {
        **((void **)&v389 + 1) = v150;
        uint64_t v152 = v151 + 8;
      }
      *((void *)&v389 + 1) = v152;
    }
  }
  unint64_t v161 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v386 - (unint64_t)v385[1]) >> 3);
  int v162 = (char *)v388[3];
  unint64_t v163 = v388[1];
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v388[3] - (char *)v388[1]) >> 5) < v161)
  {
    if (v161 <= 0x2AAAAAAAAAAAAAALL)
    {
      uint64_t v164 = v388[2];
      v393 = &v388[3];
      uint64_t v165 = (uint64_t)(v386 - (unint64_t)v385[1]) >> 3;
      unint64_t v166 = (char *)operator new(32 * v165);
      uint64_t v167 = &v166[v164 - v163];
      *(void *)uint64_t v391 = v166;
      *(void *)&v391[8] = v167;
      uint64_t v168 = &v166[32 * v165];
      *(void *)&v391[16] = v167;
      v392 = v168;
      if (v164 == v163)
      {
        int64x2_t v173 = vdupq_n_s64((unint64_t)v163);
        uint64_t v169 = &v166[v164 - v163];
      }
      else
      {
        uint64_t v169 = &v166[v164 - v163];
        do
        {
          *((_OWORD *)v169 - 6) = *((_OWORD *)v164 - 6);
          *((void *)v169 - 9) = 0;
          *((void *)v169 - 8) = 0;
          *((void *)v169 - 10) = 0;
          *((_OWORD *)v169 - 5) = *((_OWORD *)v164 - 5);
          *((void *)v169 - 8) = *((void *)v164 - 8);
          *((void *)v164 - 10) = 0;
          *((void *)v164 - 9) = 0;
          *((void *)v164 - 8) = 0;
          long long v170 = *(_OWORD *)(v164 - 56);
          long long v171 = *(_OWORD *)(v164 - 40);
          long long v172 = *(_OWORD *)(v164 - 24);
          *((_WORD *)v169 - 4) = *((_WORD *)v164 - 4);
          *(_OWORD *)(v169 - 24) = v172;
          *(_OWORD *)(v169 - 40) = v171;
          *(_OWORD *)(v169 - 56) = v170;
          v169 -= 96;
          v164 -= 96;
        }
        while (v164 != v163);
        int64x2_t v173 = *(int64x2_t *)&v388[1];
        int v162 = (char *)v388[3];
        uint64_t v167 = *(char **)&v391[16];
        uint64_t v168 = v392;
      }
      v388[1] = v169;
      v388[2] = v167;
      *(int64x2_t *)&v391[8] = v173;
      v388[3] = v168;
      v392 = v162;
      *(void *)uint64_t v391 = v173.i64[0];
      sub_1CD151264((uint64_t)v391);
      goto LABEL_206;
    }
LABEL_511:
    abort();
  }
LABEL_206:
  uint64_t v174 = (uint64_t *)v384[0];
  __pb = (uint64_t *)v384[1];
  if (v384[0] == v384[1])
  {
    llvm::ValueSymbolTable *v29 = 0;
    v29[1] = 0;
    v29[2] = 0;
  }
  else
  {
    do
    {
      unsigned int v176 = (void **)v174[8];
      unsigned int v175 = (void **)v174[9];
      while (v176 != v175)
      {
        uint64_t v177 = (uint64_t)*v176;
        uint64_t v178 = (*v176)[1];
        uint64_t v179 = v174[4];
        uint64_t v180 = *(void **)(v179 + 40);
        unsigned int v181 = *(void **)(v179 + 48);
        if (v180 == v181) {
          goto LABEL_216;
        }
        while (*v180 != *(void *)(v178 + 32))
        {
          v180 += 2;
          if (v180 == v181) {
            goto LABEL_216;
          }
        }
        uint64_t v182 = (void *)v180[1];
        if (!v182)
        {
LABEL_216:
          uint64_t v186 = (char *)v388[2];
          if (v388[2] >= v388[3])
          {
            unint64_t v188 = 0xAAAAAAAAAAAAAAABLL * (((char *)v388[2] - (char *)v388[1]) >> 5);
            unint64_t v189 = v188 + 1;
            if (v188 + 1 > 0x2AAAAAAAAAAAAAALL) {
              goto LABEL_511;
            }
            if (0x5555555555555556 * (((char *)v388[3] - (char *)v388[1]) >> 5) > v189) {
              unint64_t v189 = 0x5555555555555556 * (((char *)v388[3] - (char *)v388[1]) >> 5);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v388[3] - (char *)v388[1]) >> 5) >= 0x155555555555555) {
              unint64_t v190 = 0x2AAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v190 = v189;
            }
            v392 = 0;
            v393 = &v388[3];
            if (v190)
            {
              if (v190 > 0x2AAAAAAAAAAAAAALL) {
                goto LABEL_512;
              }
              uint64_t v191 = (char *)operator new(96 * v190);
            }
            else
            {
              uint64_t v191 = 0;
            }
            *(void *)uint64_t v391 = v191;
            *(void *)&v391[8] = &v191[96 * v188];
            *(void *)&v391[16] = *(void *)&v391[8];
            v392 = &v191[96 * v190];
            sub_1CD1512C8(*(uint64_t *)&v391[8], *v176);
            unsigned int v192 = *(char **)&v391[8];
            uint64_t v187 = (void *)(*(void *)&v391[16] + 96);
            *(void *)&v391[16] += 96;
            int v194 = (char *)v388[1];
            uint64_t v193 = (char *)v388[2];
            if (v388[2] == v388[1])
            {
              int64x2_t v198 = vdupq_n_s64((unint64_t)v388[2]);
            }
            else
            {
              do
              {
                *((_OWORD *)v192 - 6) = *((_OWORD *)v193 - 6);
                *((void *)v192 - 9) = 0;
                *((void *)v192 - 8) = 0;
                *((void *)v192 - 10) = 0;
                *((_OWORD *)v192 - 5) = *((_OWORD *)v193 - 5);
                *((void *)v192 - 8) = *((void *)v193 - 8);
                *((void *)v193 - 10) = 0;
                *((void *)v193 - 9) = 0;
                *((void *)v193 - 8) = 0;
                long long v195 = *(_OWORD *)(v193 - 56);
                long long v196 = *(_OWORD *)(v193 - 40);
                long long v197 = *(_OWORD *)(v193 - 24);
                *((_WORD *)v192 - 4) = *((_WORD *)v193 - 4);
                *(_OWORD *)(v192 - 24) = v197;
                *(_OWORD *)(v192 - 40) = v196;
                *(_OWORD *)(v192 - 56) = v195;
                v192 -= 96;
                v193 -= 96;
              }
              while (v193 != v194);
              int64x2_t v198 = *(int64x2_t *)&v388[1];
              uint64_t v187 = *(void **)&v391[16];
            }
            v388[1] = v192;
            v388[2] = v187;
            *(int64x2_t *)&v391[8] = v198;
            unsigned int v199 = (char *)v388[3];
            v388[3] = v392;
            v392 = v199;
            *(void *)uint64_t v391 = v198.i64[0];
            sub_1CD151264((uint64_t)v391);
          }
          else
          {
            sub_1CD1512C8((uint64_t)v388[2], *v176);
            uint64_t v187 = v186 + 96;
          }
          v388[2] = v187;
          sub_1CD150F40((void *)v174[4], *(void *)(v178 + 32), (uint64_t)v187 - 96);
          sub_1CD150F40(*(void **)(v178 + 32), v174[4], (uint64_t)v388[2] - 96);
        }
        else
        {
          unsigned int v184 = (void *)v182[3];
          unint64_t v183 = v182[4];
          if ((unint64_t)v184 >= v183)
          {
            uint64_t v200 = v182[2];
            uint64_t v201 = ((uint64_t)v184 - v200) >> 3;
            if ((unint64_t)(v201 + 1) >> 61) {
              goto LABEL_511;
            }
            uint64_t v202 = v183 - v200;
            uint64_t v203 = v202 >> 2;
            if (v202 >> 2 <= (unint64_t)(v201 + 1)) {
              uint64_t v203 = v201 + 1;
            }
            if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v204 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v204 = v203;
            }
            if (v204)
            {
              if (v204 >> 61) {
                goto LABEL_512;
              }
              unsigned int v205 = (char *)operator new(8 * v204);
            }
            else
            {
              unsigned int v205 = 0;
            }
            unsigned int v206 = &v205[8 * v201];
            *(void *)unsigned int v206 = v177;
            uint64_t v185 = v206 + 8;
            uint64_t v208 = (char *)v182[2];
            unint64_t v207 = (char *)v182[3];
            if (v207 != v208)
            {
              do
              {
                uint64_t v209 = *((void *)v207 - 1);
                v207 -= 8;
                *((void *)v206 - 1) = v209;
                v206 -= 8;
              }
              while (v207 != v208);
              unint64_t v207 = (char *)v182[2];
            }
            v182[2] = v206;
            v182[3] = v185;
            v182[4] = &v205[8 * v204];
            if (v207) {
              operator delete(v207);
            }
          }
          else
          {
            *unsigned int v184 = v177;
            uint64_t v185 = v184 + 1;
          }
          v182[3] = v185;
        }
        ++v176;
      }
      v174 += 14;
    }
    while (v174 != __pb);
    uint64_t v210 = (uint64_t *)v384[0];
    uint64_t v211 = (uint64_t *)v384[1];
    unsigned int v29 = v366;
    v366[1] = 0;
    v366[2] = 0;
    *uint64_t v366 = 0;
    if (v210 != v211)
    {
      uint64_t v212 = *(void *)&v383[0];
      uint64_t v213 = *((void *)&v383[1] + 1);
      int v214 = v210;
      do
      {
        int v215 = *(uint64_t **)(v212 + 24 * *v214);
        if (*(void *)(v212 + 24 * *v214 + 8) - (void)v215 == 8)
        {
          uint64_t v216 = *v215;
          if (v216 && *(void *)(v213 + 24 * v216 + 8) - *(void *)(v213 + 24 * v216) == 8)
          {
            unint64_t v218 = &v210[14 * v216];
            v214[6] = (uint64_t)v218;
            v218[7] = (uint64_t)v214;
          }
        }
        v214 += 14;
      }
      while (v214 != v211);
      uint64_t v219 = v210;
      do
      {
        uint64_t v220 = (uint64_t *)v219[6];
        if (v220)
        {
          uint64_t v221 = (void *)v219[7];
          if (v221)
          {
            if (v220 == v219) {
              goto LABEL_272;
            }
            do
            {
              uint64_t v220 = (uint64_t *)v220[6];
              if (v220) {
                BOOL v222 = v220 == v219;
              }
              else {
                BOOL v222 = 1;
              }
            }
            while (!v222);
            if (v220)
            {
LABEL_272:
              v210[14 * *v221 + 6] = 0;
              v219[7] = 0;
            }
          }
        }
        v219 += 14;
      }
      while (v219 != v211);
      do
      {
        uint64_t v223 = v210[6];
        if (v210[7]) {
          BOOL v224 = 1;
        }
        else {
          BOOL v224 = v223 == 0;
        }
        if (!v224)
        {
          do
          {
            sub_1CD151328((uint64_t)&v382, v210[4], *(void **)(v223 + 32), 0, 0);
            uint64_t v223 = *(void *)(v223 + 48);
          }
          while (v223);
        }
        v210 += 14;
      }
      while (v210 != v211);
    }
  }
  int v225 = *((void *)&v389 + 1);
  int v226 = (unint64_t **)v389;
  if (*((void *)&v389 + 1) - (void)v389 >= 9uLL)
  {
    int v227 = (unsigned int *)&unk_1EBCFB000;
    do
    {
      if (v226 == (unint64_t **)v225) {
        break;
      }
      uint64_t v228 = 0;
      v364 = 0;
      uint64_t v362 = 0;
      int v363 = 0;
      double v229 = -1.0;
      unint64_t v360 = v225;
      do
      {
        unsigned int v361 = v226;
        unint64_t v230 = *v226;
        unint64_t v231 = (unint64_t **)(*v226)[5];
        uint64_t v232 = (unint64_t **)(*v226)[6];
        if (v231 != v232)
        {
          uint64_t v365 = (unint64_t **)(*v226)[6];
          do
          {
            int v233 = *v231;
            if (v230 != *v231
              && ((uint64_t)(v233[3] - v233[2]) >> 3) + ((uint64_t)(v230[3] - v230[2]) >> 3) < (unint64_t)v227[738])
            {
              uint64_t v234 = v231[1];
              if ((unint64_t *)*v234 == v230) {
                uint64_t v235 = 88;
              }
              else {
                uint64_t v235 = 89;
              }
              if (*((unsigned char *)v234 + v235))
              {
                unint64_t v236 = v234 + 5;
                uint64_t v237 = 8;
                if ((unint64_t *)*v234 == v230) {
                  uint64_t v237 = 5;
                }
                else {
                  unint64_t v236 = v234 + 8;
                }
                double v238 = *(double *)&v234[v237];
                uint64_t v239 = v236[1];
                int v240 = *((_DWORD *)v236 + 4);
              }
              else
              {
                int v242 = (unsigned char *)v234[2];
                unsigned int v241 = (unsigned char *)v234[3];
                int64_t v243 = v241 - v242;
                if (v241 == v242)
                {
                  uint64_t v247 = 0;
                  uint64_t v248 = 0;
                }
                else
                {
                  if (v243 < 0) {
                    goto LABEL_511;
                  }
                  uint64_t v244 = v228;
                  uint64_t v245 = v231;
                  uint64_t v246 = v231[1];
                  uint64_t v247 = (char *)operator new(v241 - v242);
                  uint64_t v248 = &v247[8 * (v243 >> 3)];
                  memmove(v247, v242, v243);
                  uint64_t v234 = v246;
                  unint64_t v231 = v245;
                  uint64_t v228 = v244;
                }
                uint64_t v249 = (unint64_t **)v230[5];
                uint64_t v250 = (unint64_t **)v230[6];
                uint64_t v369 = v231;
                int v372 = v228;
                uint64_t v367 = (double *)v234;
                if (v249 == v250) {
                  goto LABEL_316;
                }
                while (*v249 != v230)
                {
                  v249 += 2;
                  if (v249 == v250) {
                    goto LABEL_316;
                  }
                }
                unsigned int v251 = (uint64_t)v249[1];
                if (!v251 || (uint64_t v252 = *(uint64_t **)(v251 + 16), v253 = *(void *)(v251 + 24) - (void)v252, v253 < 1))
                {
LABEL_316:
                  uint64_t v259 = v247;
                }
                else
                {
                  uint64_t v254 = v253 >> 3;
                  uint64_t v255 = v248 - v247;
                  uint64_t v256 = (v248 - v247) >> 3;
                  unint64_t v257 = (v253 >> 3) + v256;
                  if (v257 >> 61) {
                    goto LABEL_511;
                  }
                  if (v255 >> 2 > v257) {
                    unint64_t v257 = v255 >> 2;
                  }
                  if ((unint64_t)v255 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v257 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  if (v257)
                  {
                    if (v257 >> 61) {
                      goto LABEL_512;
                    }
                    uint64_t v258 = (char *)operator new(8 * v257);
                  }
                  else
                  {
                    uint64_t v258 = 0;
                  }
                  int v287 = &v247[v255 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v259 = &v258[8 * v256];
                  int v288 = &v259[8 * v254];
                  uint64_t v289 = 8 * v254;
                  unint64_t v290 = v259;
                  do
                  {
                    uint64_t v291 = *v252++;
                    *(void *)unint64_t v290 = v291;
                    v290 += 8;
                    v289 -= 8;
                  }
                  while (v289);
                  if ((unint64_t)v255 >= 8)
                  {
                    uint64_t v292 = 8 * v256;
                    do
                    {
                      *(void *)&v258[v292 - 8] = *(void *)&v247[v292 - 8];
                      v292 -= 8;
                    }
                    while (v292);
                    uint64_t v259 = v258;
                  }
                  size_t v293 = v248 - v287;
                  if (v293) {
                    memcpy(v288, v287, v293);
                  }
                  uint64_t v248 = &v288[v293];
                  if (v247) {
                    operator delete(v247);
                  }
                }
                sub_1CD151DB0((uint64_t)v391, (uint64_t)v230, (uint64_t *)v233[2], (uint64_t *)v233[3], (void **)v259, (void **)v248, 0, 0);
                BOOL v260 = *(double *)v391 > 0.00000001;
                BOOL v261 = *(double *)v391 > -0.99999999;
                if (v260 && v261) {
                  uint64_t v239 = *(void *)&v391[8];
                }
                else {
                  uint64_t v239 = 0;
                }
                if (v260 && v261) {
                  int v240 = *(_DWORD *)&v391[16];
                }
                else {
                  int v240 = 0;
                }
                if (v260 && v261) {
                  double v238 = *(double *)v391;
                }
                else {
                  double v238 = -1.0;
                }
                if (byte_1EBCFBD08)
                {
                  uint64_t v262 = *(void *)v233[2];
                  unsigned int v264 = *(uint64_t ***)(v262 + 88);
                  int v263 = *(uint64_t ***)(v262 + 96);
                  __pc = v263;
                  for (iuint64_t i = v248; v264 != v263; ++v264)
                  {
                    uint64_t v266 = **v264;
                    if (*(unint64_t **)(v266 + 32) == v230)
                    {
                      uint64_t v267 = *(void *)(v266 + 8);
                      uint64_t v268 = v267 + 1;
                      uint64_t v269 = operator new(8uLL);
                      *uint64_t v269 = 0x300000001;
                      if (v267 == -1 || (unint64_t v270 = v230[2], v268 == (uint64_t)(v230[3] - v270) >> 3))
                      {
                        uint64_t v248 = ii;
                      }
                      else
                      {
                        uint64_t v248 = ii;
                        if (!*(void *)(*(void *)(v270 + 8 * v267) + 48))
                        {
                          for (junsigned int j = 0; jj != 8; jj += 4)
                          {
                            sub_1CD151DB0((uint64_t)v391, (uint64_t)v230, (uint64_t *)v233[2], (uint64_t *)v233[3], (void **)v259, (void **)ii, v268, *(_DWORD *)((char *)v269 + jj));
                            if (*(double *)v391 > 0.00000001 && *(double *)v391 > v238 + 0.00000001)
                            {
                              uint64_t v239 = *(void *)&v391[8];
                              int v240 = *(_DWORD *)&v391[16];
                              double v238 = *(double *)v391;
                            }
                          }
                        }
                      }
                      operator delete(v269);
                      int v263 = __pc;
                    }
                  }
                  uint64_t v271 = *(void *)(v233[3] - 8);
                  BOOL v273 = *(uint64_t ***)(v271 + 64);
                  unsigned int v272 = *(uint64_t ***)(v271 + 72);
                  for (__pd = v272; v273 != v272; ++v273)
                  {
                    uint64_t v274 = **v273;
                    if (*(unint64_t **)(v274 + 32) == v230)
                    {
                      uint64_t v275 = *(void *)(v274 + 8);
                      uint64_t v276 = operator new(8uLL);
                      void *v276 = 0x200000001;
                      if (v275)
                      {
                        unint64_t v277 = v230[2];
                        if (v275 != (uint64_t)(v230[3] - v277) >> 3
                          && !*(void *)(*(void *)(v277 + 8 * v275 - 8) + 48))
                        {
                          for (kuint64_t k = 0; kk != 8; kk += 4)
                          {
                            sub_1CD151DB0((uint64_t)v391, (uint64_t)v230, (uint64_t *)v233[2], (uint64_t *)v233[3], (void **)v259, (void **)v248, v275, *(_DWORD *)((char *)v276 + kk));
                            if (*(double *)v391 > 0.00000001 && *(double *)v391 > v238 + 0.00000001)
                            {
                              uint64_t v239 = *(void *)&v391[8];
                              int v240 = *(_DWORD *)&v391[16];
                              double v238 = *(double *)v391;
                            }
                          }
                        }
                      }
                      operator delete(v276);
                      unsigned int v272 = __pd;
                    }
                  }
                }
                uint64_t v279 = v230[3] - v230[2];
                BOOL v280 = (unint64_t)v279 < 9 || v279 >> 3 > (unint64_t)dword_1EBCFBC48;
                if (!v280)
                {
                  unint64_t v281 = 1;
                  do
                  {
                    uint64_t v282 = operator new(0xCuLL);
                    *(void *)uint64_t v282 = 0x200000001;
                    v282[2] = 3;
                    unint64_t v283 = v230[2];
                    if (v281 != (uint64_t)(v230[3] - v283) >> 3 && !*(void *)(*(void *)(v283 + 8 * v281 - 8) + 48))
                    {
                      for (muint64_t m = 0; mm != 3; ++mm)
                      {
                        sub_1CD151DB0((uint64_t)v391, (uint64_t)v230, (uint64_t *)v233[2], (uint64_t *)v233[3], (void **)v259, (void **)v248, v281, v282[mm]);
                        if (*(double *)v391 > 0.00000001 && *(double *)v391 > v238 + 0.00000001)
                        {
                          uint64_t v239 = *(void *)&v391[8];
                          int v240 = *(_DWORD *)&v391[16];
                          double v238 = *(double *)v391;
                        }
                      }
                    }
                    operator delete(v282);
                    ++v281;
                  }
                  while (v281 < (uint64_t)(v230[3] - v230[2]) >> 3);
                }
                if (*(unint64_t **)v367 == v230)
                {
                  v367[5] = v238;
                  *((void *)v367 + 6) = v239;
                  *((_DWORD *)v367 + 14) = v240;
                  *((unsigned char *)v367 + 88) = 1;
                }
                else
                {
                  v367[8] = v238;
                  *((void *)v367 + 9) = v239;
                  *((_DWORD *)v367 + 20) = v240;
                  *((unsigned char *)v367 + 89) = 1;
                }
                int v227 = (_DWORD *)&unk_1EBCFB000;
                if (v259) {
                  operator delete(v259);
                }
                uint64_t v232 = v365;
                unsigned int v29 = v366;
                unint64_t v231 = v369;
                uint64_t v228 = v372;
              }
              if (v238 > 0.00000001)
              {
                if (v238 > v229 + 0.00000001
                  || vabdd_f64(v238, v229) < 0.00000001
                  && (v230 == v228
                    ? (unint64_t v285 = *v233, v286 = *v364, v228 = v230)
                    : (unint64_t *)(unint64_t v285 = *v230, v286 = *v228),
                      v285 < v286))
                {
                  int v363 = v240;
                  uint64_t v362 = v239;
                  double v229 = v238;
                  v364 = v233;
                  uint64_t v228 = v230;
                }
              }
            }
            v231 += 2;
          }
          while (v231 != v232);
        }
        int v226 = v361 + 1;
      }
      while (v361 + 1 != (unint64_t **)v360);
      if (v229 <= 0.00000001) {
        break;
      }
      sub_1CD151328((uint64_t)&v382, (uint64_t)v228, v364, v362, v363);
      int v225 = *((void *)&v389 + 1);
      int v226 = (unint64_t **)v389;
    }
    while (*((void *)&v389 + 1) - (void)v389 > 8uLL);
  }
  unint64_t v294 = v382;
  if (v382)
  {
    unint64_t v295 = 0;
    do
    {
      uint64_t v296 = *(void *)(*(void *)&v383[0] + 24 * v295 + 8) - *(void *)(*(void *)&v383[0] + 24 * v295);
      if (v296)
      {
        if ((unint64_t)(v296 >> 3) <= 1) {
          uint64_t v297 = 1;
        }
        else {
          uint64_t v297 = v296 >> 3;
        }
        uint64_t v298 = 8 * (v296 >> 3) - 8;
        do
        {
          uint64_t v299 = *(void *)(*(void *)(*(void *)&v383[0] + 24 * v295) + v298);
          uint64_t v300 = *((void *)v384[0] + 14 * v295 + 4);
          uint64_t v301 = *((void *)v384[0] + 14 * v299 + 4);
          if (v300 != v301)
          {
            uint64_t v302 = ***(void ***)(v301 + 16);
            if (v302)
            {
              if (v302 == v299 && **(void **)(*(void *)(v300 + 24) - 8) == v295) {
                sub_1CD151328((uint64_t)&v382, v300, (void *)v301, 0, 0);
              }
            }
          }
          v298 -= 8;
          --v297;
        }
        while (v297);
        unint64_t v294 = v382;
      }
      ++v295;
    }
    while (v295 < v294);
  }
  memset(v391, 0, 20);
  uint64_t v304 = (void **)v387[0];
  uint64_t v305 = (void **)v387[1];
  if (v387[0] != v387[1])
  {
    uint64_t v306 = 0;
    uint64_t v307 = 0;
    uint64_t v308 = 0;
    while (v304[2] == v304[3])
    {
      uint64_t v381 = v307;
LABEL_452:
      v304 += 8;
      if (v304 == v305) {
        goto LABEL_458;
      }
    }
    if (v307 >= v306)
    {
      uint64_t v309 = ((char *)v307 - (char *)v308) >> 3;
      unint64_t v310 = v309 + 1;
      if ((unint64_t)(v309 + 1) >> 61) {
        goto LABEL_511;
      }
      if (((char *)v306 - (char *)v308) >> 2 > v310) {
        unint64_t v310 = ((char *)v306 - (char *)v308) >> 2;
      }
      if ((unint64_t)((char *)v306 - (char *)v308) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v311 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v311 = v310;
      }
      if (v311)
      {
        if (v311 >> 61) {
          goto LABEL_512;
        }
        uint64_t v312 = (char *)operator new(8 * v311);
      }
      else
      {
        uint64_t v312 = 0;
      }
      unsigned int v313 = &v312[8 * v309];
      *(void *)unsigned int v313 = v304;
      uint64_t v381 = (double *)(v313 + 8);
      if (v307 != (double *)v308)
      {
        do
        {
          uint64_t v314 = *((void *)v307-- - 1);
          *((void *)v313 - 1) = v314;
          v313 -= 8;
        }
        while (v307 != (double *)v308);
        uint64_t v307 = (double *)v308;
      }
      uint64_t v308 = (uint64_t *)v313;
      uint64_t v306 = (double *)&v312[8 * v311];
      if (v307) {
        operator delete(v307);
      }
    }
    else
    {
      *(void *)uint64_t v307 = v304;
      uint64_t v381 = v307 + 1;
    }
    uint64_t v315 = (uint64_t *)v304[2];
    uint64_t v316 = (uint64_t *)v304[3];
    if (v315 == v316)
    {
      double v320 = NAN;
    }
    else
    {
      double v317 = 0.0;
      double v318 = 0.0;
      do
      {
        uint64_t v319 = *v315++;
        double v317 = v317 + (double)*(unint64_t *)(v319 + 16);
        double v318 = v318 + (double)*(unint64_t *)(v319 + 24);
      }
      while (v315 != v316);
      double v320 = v318 / v317;
    }
    v394[0] = v304;
    if (*(_DWORD *)&v391[16])
    {
      unsigned int v321 = (*(_DWORD *)&v391[16] - 1) & ((v304 >> 4) ^ (v304 >> 9));
      int v322 = (double *)(*(void *)v391 + 16 * v321);
      double v323 = *v322;
      if (v304 == *(void ***)v322)
      {
LABEL_451:
        v322[1] = v320;
        uint64_t v307 = v381;
        goto LABEL_452;
      }
      uint64_t v324 = 0;
      int v325 = 1;
      while (v323 != NAN)
      {
        if (v324) {
          BOOL v326 = 0;
        }
        else {
          BOOL v326 = *(void *)&v323 == -8192;
        }
        if (v326) {
          uint64_t v324 = v322;
        }
        unsigned int v327 = v321 + v325++;
        unsigned int v321 = v327 & (*(_DWORD *)&v391[16] - 1);
        int v322 = (double *)(*(void *)v391 + 16 * v321);
        double v323 = *v322;
        if (v304 == *(void ***)v322) {
          goto LABEL_451;
        }
      }
      if (v324) {
        int v328 = v324;
      }
      else {
        int v328 = v322;
      }
    }
    else
    {
      int v328 = 0;
    }
    int v322 = (double *)sub_1CD151EC8((uint64_t)v391, (uint64_t *)v394, v328);
    *(void *)int v322 = v304;
    v322[1] = 0.0;
    goto LABEL_451;
  }
  uint64_t v308 = 0;
  uint64_t v381 = 0;
LABEL_458:
  v394[0] = (void **)v391;
  unint64_t v329 = ((char *)v381 - (char *)v308) >> 3;
  if ((char *)v381 - (char *)v308 < 1025)
  {
LABEL_462:
    sub_1CD15208C(v308, v381, (uint64_t *)v394, v329, 0, 0);
  }
  else
  {
    int v330 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v331 = ((char *)v381 - (char *)v308) >> 3;
    while (1)
    {
      uint64_t v332 = (uint64_t *)operator new(8 * v331, v330);
      if (v332) {
        break;
      }
      BOOL v280 = v331 > 1;
      v331 >>= 1;
      if (!v280) {
        goto LABEL_462;
      }
    }
    v333 = v332;
    sub_1CD15208C(v308, v381, (uint64_t *)v394, v329, v332, v331);
    operator delete(v333);
  }
  sub_1CBF7ACFC((uint64_t)v29, v382);
  __pe = v308;
  if (v308 != (uint64_t *)v381)
  {
    v334 = v308;
    do
    {
      unsigned int v335 = *(uint64_t ***)(*v334 + 16);
      uint64_t v336 = *(uint64_t ***)(*v334 + 24);
      if (v335 != v336)
      {
        uint64_t v337 = v29[1];
        do
        {
          uint64_t v338 = **v335;
          unint64_t v339 = (unint64_t)v29[2];
          if ((unint64_t)v337 >= v339)
          {
            uint64_t v341 = *v29;
            uint64_t v342 = (v337 - *v29) >> 3;
            unint64_t v343 = v342 + 1;
            if ((unint64_t)(v342 + 1) >> 61) {
              goto LABEL_511;
            }
            uint64_t v344 = v339 - (void)v341;
            if (v344 >> 2 > v343) {
              unint64_t v343 = v344 >> 2;
            }
            if ((unint64_t)v344 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v345 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v345 = v343;
            }
            if (v345)
            {
              if (v345 >> 61) {
                goto LABEL_512;
              }
              v346 = (char *)operator new(8 * v345);
            }
            else
            {
              v346 = 0;
            }
            uint64_t v347 = &v346[8 * v342];
            *(void *)uint64_t v347 = v338;
            v340 = v347 + 8;
            while (v337 != v341)
            {
              uint64_t v348 = *((void *)v337 - 1);
              v337 -= 8;
              *((void *)v347 - 1) = v348;
              v347 -= 8;
            }
            v349 = &v346[8 * v345];
            unsigned int v29 = v366;
            *uint64_t v366 = v347;
            v366[1] = v340;
            v366[2] = v349;
            if (v341) {
              operator delete(v341);
            }
          }
          else
          {
            *(void *)uint64_t v337 = v338;
            v340 = v337 + 8;
          }
          v29[1] = v340;
          ++v335;
          uint64_t v337 = v340;
        }
        while (v335 != v336);
      }
      ++v334;
    }
    while (v334 != (uint64_t *)v381);
  }
  MEMORY[0x1D25D9CD0](*(void *)v391, 8);
  if (__pe) {
    operator delete(__pe);
  }
  if ((void)v389)
  {
    *((void *)&v389 + 1) = v389;
    operator delete((void *)v389);
  }
  uint64_t v350 = (char *)v388[1];
  if (v388[1])
  {
    v351 = (char *)v388[2];
    uint64_t v352 = v388[1];
    if (v388[2] != v388[1])
    {
      do
      {
        uint64_t v353 = (void *)*((void *)v351 - 10);
        if (v353)
        {
          *((void *)v351 - 9) = v353;
          operator delete(v353);
        }
        v351 -= 96;
      }
      while (v351 != v350);
      uint64_t v352 = v388[1];
    }
    v388[2] = v350;
    operator delete(v352);
  }
  uint64_t v354 = v387[0];
  if (v387[0])
  {
    uint64_t v355 = v387[1];
    uint64_t v356 = v387[0];
    if (v387[1] != v387[0])
    {
      do
      {
        v355 -= 8;
        sub_1CD15120C(v355);
      }
      while (v355 != v354);
      uint64_t v356 = v387[0];
    }
    v387[1] = v354;
    operator delete(v356);
  }
  if (v385[1])
  {
    *(void **)&long long v386 = v385[1];
    operator delete(v385[1]);
  }
  unint64_t v357 = v384[0];
  if (v384[0])
  {
    v358 = v384[1];
    v359 = v384[0];
    if (v384[1] != v384[0])
    {
      do
      {
        v358 -= 14;
        sub_1CD151100(v358);
      }
      while (v358 != v357);
      v359 = v384[0];
    }
    v384[1] = v357;
    operator delete(v359);
  }
  *(void *)uint64_t v391 = (char *)&v383[1] + 8;
  sub_1CBF7EDF0((void ***)v391);
  *(void *)uint64_t v391 = v383;
  sub_1CBF7EDF0((void ***)v391);
}

double llvm::calcExtTspScore(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v8 = v6 - *a2;
  if (v6 == *a2)
  {
    uint64_t v9 = 0;
  }
  else
  {
    if (v8 < 0) {
      abort();
    }
    uint64_t v9 = operator new(v6 - *a2);
    bzero(v9, v8 & 0xFFFFFFFFFFFFFFF8);
  }
  uint64_t v10 = *(uint64_t **)a1;
  uint64_t v11 = *(void *)(a1 + 8) - *(void *)a1;
  if ((unint64_t)v11 >= 9)
  {
    unint64_t v12 = v11 >> 3;
    uint64_t v13 = 2;
    if (v12 > 2) {
      uint64_t v13 = v12;
    }
    uint64_t v16 = *v10;
    uint64_t v14 = v10 + 1;
    uint64_t v15 = v16;
    uint64_t v17 = *((void *)v9 + v16);
    uint64_t v18 = v13 - 1;
    do
    {
      v17 += *(void *)(v7 + 8 * v15);
      uint64_t v19 = *v14++;
      uint64_t v15 = v19;
      *((void *)v9 + v19) = v17;
      --v18;
    }
    while (v18);
  }
  unint64_t v20 = sub_1CD87AE94(a4);
  uint64_t v22 = *(void *)a4 + 24 * *(unsigned int *)(a4 + 16);
  if ((void *)v22 == v20)
  {
    double v25 = 0.0;
    if (!v9) {
      return v25;
    }
    goto LABEL_26;
  }
  int v23 = v20;
  uint64_t v24 = v21;
  double v25 = 0.0;
  do
  {
    double v26 = sub_1CD150DC8(*((void *)v9 + *v23), *(void *)(v7 + 8 * *v23), *((void *)v9 + v23[1]), v23[2]);
    while (1)
    {
      v23 += 3;
      if (v23 == v24) {
        break;
      }
      uint64_t v27 = v23[1];
      if ((*v23 != -1 || v27 != -1) && (*v23 != -2 || v27 != -2)) {
        goto LABEL_24;
      }
    }
    int v23 = v24;
LABEL_24:
    double v25 = v25 + v26;
  }
  while (v23 != (void *)v22);
  if (v9) {
LABEL_26:
  }
    operator delete(v9);
  return v25;
}

double sub_1CD150DC8(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = a2 + a1 - a3;
  if (a2 + a1 == a3) {
    return (double)a4;
  }
  if (a2 + a1 >= a3)
  {
    double result = 0.0;
    if (v4 <= dword_1EBCFBAC8)
    {
      double v7 = 1.0 - (double)v4 / (double)dword_1EBCFBAC8;
      double v8 = *(double *)&xmmword_1EBCFBE90;
      return v7 * v8 * (double)a4;
    }
  }
  else
  {
    unint64_t v6 = a3 - (a2 + a1);
    double result = 0.0;
    if (v6 <= dword_1EBCFBA08)
    {
      double v7 = 1.0 - (double)v6 / (double)dword_1EBCFBA08;
      double v8 = *(double *)&xmmword_1EBCFBDC8;
      return v7 * v8 * (double)a4;
    }
  }
  return result;
}

double llvm::calcExtTspScore(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  uint64_t v7 = v5 - v6;
  if (v5 == v6) {
    return llvm::calcExtTspScore((uint64_t)&v16, a1, a3, a3);
  }
  if (v7 < 0) {
    abort();
  }
  unint64_t v8 = v7 >> 3;
  uint64_t v9 = (char *)operator new(v5 - v6);
  uint64_t v16 = v9;
  uint64_t v18 = &v9[8 * (v7 >> 3)];
  size_t v10 = v7 & 0xFFFFFFFFFFFFFFF8;
  bzero(v9, v10);
  uint64_t v12 = 0;
  uint64_t v17 = &v9[v10];
  if (v8 <= 1) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = v8;
  }
  do
  {
    *(void *)&v9[8 * v12] = v12;
    ++v12;
  }
  while (v13 != v12);
  double v14 = llvm::calcExtTspScore((uint64_t)&v16, a1, v11, a3);
  operator delete(v9);
  return v14;
}

void sub_1CD150F40(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (char *)a1[6];
  unint64_t v6 = a1[7];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (char *)a1[5];
    uint64_t v10 = (v7 - v9) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      abort();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 60) {
        sub_1CB833614();
      }
      double v14 = (char *)operator new(16 * v13);
    }
    else
    {
      double v14 = 0;
    }
    uint64_t v15 = &v14[16 * v10];
    *(void *)uint64_t v15 = a2;
    *((void *)v15 + 1) = a3;
    unint64_t v8 = v15 + 16;
    if (v7 != v9)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
        v15 -= 16;
        v7 -= 16;
      }
      while (v7 != v9);
      uint64_t v7 = (char *)a1[5];
    }
    a1[5] = v15;
    a1[6] = v8;
    a1[7] = &v14[16 * v13];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(void *)uint64_t v7 = a2;
    *((void *)v7 + 1) = a3;
    unint64_t v8 = v7 + 16;
  }
  a1[6] = v8;
}

uint64_t *sub_1CD151044(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 112;
      long long v6 = *(_OWORD *)(v3 - 112);
      long long v7 = *(_OWORD *)(v3 - 96);
      long long v8 = *(_OWORD *)(v3 - 64);
      *(_OWORD *)(v4 - 80) = *(_OWORD *)(v3 - 80);
      *(_OWORD *)(v4 - 64) = v8;
      *(_OWORD *)(v4 - 112) = v6;
      *(_OWORD *)(v4 - 96) = v7;
      *(void *)(v4 - 40) = 0;
      *(void *)(v4 - 32) = 0;
      *(void *)(v4 - 48) = 0;
      *(_OWORD *)(v4 - 48) = *(_OWORD *)(v3 - 48);
      *(void *)(v4 - 32) = *(void *)(v3 - 32);
      *(void *)(v3 - 48) = 0;
      *(void *)(v3 - 40) = 0;
      *(void *)(v3 - 32) = 0;
      *(void *)(v4 - 24) = 0;
      *(void *)(v4 - 16) = 0;
      *(void *)(v4 - 8) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      v3 -= 112;
      v4 -= 112;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v9 = *result;
  *double result = v5;
  a2[1] = v9;
  uint64_t v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

void sub_1CD151100(void *a1)
{
  uint64_t v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
}

uint64_t *sub_1CD151158(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(_OWORD *)(v6 - 64) = *(_OWORD *)(v2 + v5 - 64);
      *(void *)(v6 - 40) = 0;
      *(void *)(v6 - 32) = 0;
      *(void *)(v6 - 48) = 0;
      *(_OWORD *)(v6 - 48) = *(_OWORD *)(v2 + v5 - 48);
      *(void *)(v6 - 32) = *(void *)(v2 + v5 - 32);
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v6 - 24) = 0;
      *(void *)(v6 - 16) = 0;
      *(void *)(v6 - 8) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      v5 -= 64;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *double result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void sub_1CD15120C(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
}

uint64_t sub_1CD151264(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 96;
    uint64_t v4 = *(void **)(v2 - 80);
    if (v4)
    {
      *(void *)(v2 - 72) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 96;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_1CD1512C8(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a2[1] + 32);
  *(void *)a1 = *(void *)(*a2 + 32);
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = operator new(8uLL);
  *(void *)(a1 + 16) = v5;
  *uint64_t v5 = a2;
  double result = v5 + 1;
  *(void *)(a1 + 24) = result;
  *(void *)(a1 + 32) = result;
  *(void *)(a1 + 40) = 0xBFF0000000000000;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0xBFF0000000000000;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_WORD *)(a1 + 88) = 0;
  return result;
}

void sub_1CD151328(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  uint64_t v6 = *(char **)(a2 + 16);
  uint64_t v7 = *(char **)(a2 + 24);
  uint64_t v5 = (void *)(a2 + 16);
  uint64_t v8 = (char *)a3[2];
  uint64_t v9 = (char *)a3[3];
  switch(a5)
  {
    case 1:
      *(void *)&long long v109 = *(void *)(a2 + 16);
      *((void *)&v109 + 1) = &v6[8 * a4];
      *(void *)&long long v111 = *((void *)&v109 + 1);
      *((void *)&v111 + 1) = v7;
      uint64_t v12 = v7;
      unint64_t v13 = (char *)*((void *)&v109 + 1);
      double v14 = v9;
      uint64_t v15 = v8;
      uint64_t v7 = (char *)*((void *)&v109 + 1);
      *(void *)&long long v110 = v8;
      *((void *)&v110 + 1) = v9;
      break;
    case 2:
      *(void *)&long long v109 = a3[2];
      *((void *)&v109 + 1) = v9;
      uint64_t v12 = &v6[8 * a4];
      *(void *)&long long v110 = v12;
      *((void *)&v110 + 1) = v7;
      unint64_t v13 = v6;
      double v14 = v7;
      uint64_t v15 = v12;
      uint64_t v7 = v9;
      *(void *)&long long v111 = v6;
      *((void *)&v111 + 1) = v12;
      uint64_t v6 = v8;
      break;
    case 3:
      *(void *)&long long v109 = &v6[8 * a4];
      *((void *)&v109 + 1) = v7;
      *(void *)&long long v110 = v6;
      *((void *)&v110 + 1) = v109;
      uint64_t v12 = v9;
      unint64_t v13 = v8;
      double v14 = (char *)v109;
      uint64_t v15 = v6;
      uint64_t v6 = (char *)v109;
      *(void *)&long long v111 = v8;
      *((void *)&v111 + 1) = v9;
      break;
    default:
      uint64_t v12 = 0;
      unint64_t v13 = 0;
      *(void *)&long long v109 = *(void *)(a2 + 16);
      *((void *)&v109 + 1) = v7;
      *(void *)&long long v110 = v8;
      *((void *)&v110 + 1) = v9;
      double v14 = v9;
      uint64_t v15 = v8;
      long long v111 = 0uLL;
      break;
  }
  unint64_t v16 = ((v14 - v15) >> 3) + ((v12 - v13) >> 3) + ((v7 - v6) >> 3);
  uint64_t v106 = 0;
  *(void *)unsigned int v107 = 0;
  unint64_t v108 = 0;
  uint64_t v101 = a3 + 2;
  if (v16)
  {
    if (v16 >> 61) {
      goto LABEL_131;
    }
    uint64_t v17 = (char *)operator new(8 * v16);
    uint64_t v106 = v17;
    *(void *)unsigned int v107 = v17;
    unint64_t v108 = &v17[8 * v16];
  }
  else
  {
    uint64_t v17 = 0;
  }
  sub_1CD151B80((uint64_t)&v106, (uint64_t)v17, v6, v7);
  sub_1CD151B80((uint64_t)&v106, *(uint64_t *)v107, v15, v14);
  sub_1CD151B80((uint64_t)&v106, *(uint64_t *)v107, v13, v12);
  uint64_t v18 = v106;
  uint64_t v19 = *(void *)v107;
  size_t v20 = *(void *)v107 - (void)v106;
  unint64_t v21 = (uint64_t)(*(void *)v107 - (void)v106) >> 3;
  uint64_t v22 = *(void *)(a2 + 32);
  int v23 = *(char **)(a2 + 16);
  if (v21 > (v22 - (uint64_t)v23) >> 3)
  {
    if (v23)
    {
      *(void *)(a2 + 24) = v23;
      operator delete(v23);
      uint64_t v22 = 0;
      *uint64_t v5 = 0;
      v5[1] = 0;
      void v5[2] = 0;
    }
    if ((v20 & 0x8000000000000000) == 0)
    {
      uint64_t v24 = v22 >> 2;
      if (v22 >> 2 <= v21) {
        uint64_t v24 = v21;
      }
      unint64_t v25 = (unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v24;
      if (!(v25 >> 61))
      {
        int v23 = (char *)operator new(8 * v25);
        *(void *)(a2 + 16) = v23;
        *(void *)(a2 + 24) = v23;
        *(void *)(a2 + 32) = &v23[8 * v25];
LABEL_27:
        if ((char *)v19 != v18) {
          memmove(v23, v18, v20);
        }
        int v30 = &v23[8 * v21];
        goto LABEL_30;
      }
    }
LABEL_131:
    abort();
  }
  double v26 = *(unsigned char **)(a2 + 24);
  unint64_t v27 = (v26 - v23) >> 3;
  if (v27 >= v21) {
    goto LABEL_27;
  }
  uint64_t v28 = &v106[8 * v27];
  if (v26 != v23)
  {
    memmove(*(void **)(a2 + 16), v106, v26 - v23);
    int v23 = *(char **)(a2 + 24);
  }
  size_t v29 = v19 - (void)v28;
  if (v29) {
    memmove(v23, v28, v29);
  }
  int v30 = &v23[v29];
LABEL_30:
  *(void *)(a2 + 24) = v30;
  uint64_t v31 = *(char **)(a2 + 16);
  uint64_t v32 = v30 - v31;
  if (v30 != v31)
  {
    uint64_t v33 = 0;
    unint64_t v34 = v32 >> 3;
    if (v34 <= 1) {
      unint64_t v34 = 1;
    }
    do
    {
      *(void *)(*(void *)&v31[8 * v33] + 32) = a2;
      *(void *)(*(void *)&v31[8 * v33] + 8) = v33;
      ++v33;
    }
    while (v34 != v33);
  }
  if (v18) {
    operator delete(v18);
  }
  int v35 = (uint64_t *)a3[5];
  long long v36 = (uint64_t *)a3[6];
  if (v35 != v36)
  {
    uint64_t v105 = (uint64_t *)a3[6];
    do
    {
      unsigned int v37 = (void *)*v35;
      unint64_t v38 = (uint64_t *)v35[1];
      if ((void *)*v35 == a3) {
        uint64_t v39 = a2;
      }
      else {
        uint64_t v39 = *v35;
      }
      for (uint64_t i = *(void **)(a2 + 40); ; i += 2)
      {
        if (i == *(void **)(a2 + 48)) {
          goto LABEL_56;
        }
        if (*i == v39) {
          break;
        }
      }
      uint64_t v41 = (void *)i[1];
      if (v41)
      {
        uint64_t v42 = (char *)v38[2];
        uint64_t v43 = v38[3];
        if (v43 - (uint64_t)v42 >= 1)
        {
          uint64_t v44 = (v43 - (uint64_t)v42) >> 3;
          uint64_t v45 = v41[2];
          unint64_t v46 = v41[3];
          uint64_t v47 = v46 - v45;
          unint64_t v48 = (char *)(v45 + ((v46 - v45) & 0xFFFFFFFFFFFFFFF8));
          uint64_t v49 = v41[4];
          if (v44 <= (uint64_t)(v49 - v46) >> 3)
          {
            uint64_t v64 = (uint64_t)(v46 - (void)v48) >> 3;
            if (v64 >= v44)
            {
              unsigned int v65 = &v42[8 * v44];
              uint64_t v67 = (char *)v41[3];
              uint64_t v64 = v44;
            }
            else
            {
              unsigned int v65 = &v42[8 * v64];
              size_t v66 = v43 - (void)v65;
              if (v66)
              {
                uint64_t v99 = (char *)(v45 + ((v46 - v45) & 0xFFFFFFFFFFFFFFF8));
                size_t v104 = v66;
                memmove((void *)v41[3], &v42[8 * v64], v66);
                size_t v66 = v104;
                unsigned int v65 = &v42[8 * v64];
                unint64_t v48 = v99;
              }
              uint64_t v67 = (char *)(v46 + v66);
              void v41[3] = v67;
            }
            BOOL v68 = v64 < 1;
            long long v36 = v105;
            if (!v68)
            {
              uint64_t v69 = (uint64_t *)&v67[-8 * v44];
              unint64_t v70 = v67;
              while ((unint64_t)v69 < v46)
              {
                uint64_t v71 = *v69++;
                *(void *)unint64_t v70 = v71;
                v70 += 8;
              }
              uint64_t v72 = &v48[8 * v44];
              void v41[3] = v70;
              if (v67 != v72)
              {
                uint64_t v73 = v48;
                uint64_t v74 = v65;
                memmove(&v67[-8 * ((v67 - v72) >> 3)], v48, v67 - v72);
                unsigned int v65 = v74;
                unint64_t v48 = v73;
              }
              if (v65 != v42) {
                memmove(v48, v42, v65 - v42);
              }
            }
          }
          else
          {
            uint64_t v50 = v47 >> 3;
            unint64_t v51 = (v47 >> 3) + v44;
            if (v51 >> 61) {
              goto LABEL_131;
            }
            uint64_t v52 = v49 - v45;
            if (v52 >> 2 > v51) {
              unint64_t v51 = v52 >> 2;
            }
            BOOL v53 = (unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8;
            unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v53) {
              unint64_t v54 = v51;
            }
            unint64_t v103 = v54;
            if (v54)
            {
              if (v54 >> 61) {
                sub_1CB833614();
              }
              unint64_t v55 = v48;
              unint64_t v56 = (char *)operator new(8 * v54);
              unint64_t v48 = v55;
              long long v36 = v105;
            }
            else
            {
              unint64_t v56 = 0;
            }
            uint64_t v75 = &v56[8 * v50];
            uint64_t v76 = &v75[8 * v44];
            uint64_t v77 = 8 * v44;
            uint64_t v78 = v75;
            do
            {
              uint64_t v79 = *(void *)v42;
              v42 += 8;
              *(void *)uint64_t v78 = v79;
              v78 += 8;
              v77 -= 8;
            }
            while (v77);
            unint64_t v80 = (char *)v41[2];
            if (v48 != v80)
            {
              unint64_t v81 = v48;
              do
              {
                uint64_t v82 = *((void *)v81 - 1);
                v81 -= 8;
                *((void *)v75 - 1) = v82;
                v75 -= 8;
              }
              while (v81 != v80);
            }
            uint64_t v83 = (unsigned char *)v41[3];
            uint64_t v84 = v83 - v48;
            if (v83 != v48)
            {
              uint64_t v100 = v56;
              int v85 = v76;
              memmove(v76, v48, v83 - v48);
              uint64_t v76 = v85;
              unint64_t v56 = v100;
            }
            int v86 = &v56[8 * v103];
            uint64_t v87 = (void *)v41[2];
            v41[2] = v75;
            void v41[3] = &v76[v84];
            v41[4] = v86;
            if (v87) {
              operator delete(v87);
            }
          }
        }
        long long v88 = (void *)v38[2];
        v38[3] = (uint64_t)v88;
        if ((void *)v38[4] != v88)
        {
          v38[2] = 0;
          v38[3] = 0;
          void v38[4] = 0;
          if (v88) {
            operator delete(v88);
          }
        }
      }
      else
      {
LABEL_56:
        if ((void *)*v38 == a3) {
          *unint64_t v38 = a2;
        }
        if ((void *)v38[1] == a3) {
          v38[1] = a2;
        }
        sub_1CD150F40((void *)a2, v39, (uint64_t)v38);
        if (v37 != (void *)a2 && v37 != a3) {
          sub_1CD150F40(v37, a2, (uint64_t)v38);
        }
      }
      if (v37 != a3)
      {
        uint64_t v58 = (_OWORD *)v37[5];
        int v57 = (_OWORD *)v37[6];
        if (v58 != v57)
        {
          uint64_t v59 = 0;
          while (*(void **)&v58[v59] != a3)
          {
            if (&v58[++v59] == v57) {
              goto LABEL_75;
            }
          }
          uint64_t v60 = &v58[v59];
          if (v60 + 1 == v57)
          {
            unsigned int v61 = v60;
          }
          else
          {
            unsigned int v61 = v60;
            do
            {
              long long v62 = v61[1];
              ++v61;
              _OWORD *v60 = v62;
              unint64_t v63 = v60 + 2;
              uint64_t v60 = v61;
            }
            while (v63 != v57);
          }
          v37[6] = v61;
        }
      }
LABEL_75:
      v35 += 2;
    }
    while (v35 != v36);
  }
  uint64_t v89 = (void *)a3[2];
  a3[3] = v89;
  if ((void *)a3[4] != v89)
  {
    *uint64_t v101 = 0;
    v101[1] = 0;
    v101[2] = 0;
    if (v89) {
      operator delete(v89);
    }
  }
  uint64_t v90 = (void *)a3[5];
  a3[6] = v90;
  if ((void *)a3[7] != v90)
  {
    a3[5] = 0;
    a3[6] = 0;
    a3[7] = 0;
    if (v90) {
      operator delete(v90);
    }
  }
  __int16 v91 = *(void **)(a2 + 40);
  unint64_t v92 = *(void **)(a2 + 48);
  if (v91 != v92)
  {
    while (*v91 != a2)
    {
      v91 += 2;
      if (v91 == v92) {
        goto LABEL_115;
      }
    }
    uint64_t v93 = v91[1];
    if (v93)
    {
      long long v109 = *(_OWORD *)(a2 + 16);
      long long v110 = 0u;
      long long v111 = 0u;
      *(double *)(a2 + 8) = sub_1CD151A9C((uint64_t **)&v109, *(void ***)(v93 + 16), *(void ***)(v93 + 24));
    }
  }
LABEL_115:
  unint64_t v94 = *(void **)(a1 + 160);
  unint64_t v95 = *(void **)(a1 + 152);
  if (v95 != v94)
  {
    while ((void *)*v95 != a3)
    {
      if (++v95 == v94)
      {
        unint64_t v95 = *(void **)(a1 + 160);
        break;
      }
    }
  }
  if (v95 != v94)
  {
    uint64_t v96 = v95 + 1;
    if (v95 + 1 != v94)
    {
      do
      {
        if ((void *)*v96 != a3) {
          *v95++ = *v96;
        }
        ++v96;
      }
      while (v96 != v94);
      unint64_t v94 = *(void **)(a1 + 160);
    }
  }
  if (v95 != v94) {
    *(void *)(a1 + 160) = v95;
  }
  uint64_t v97 = *(void *)(a2 + 40);
  uint64_t v98 = *(void *)(a2 + 48);
  while (v97 != v98)
  {
    *(_WORD *)(*(void *)(v97 + 8) + 88) = 0;
    v97 += 16;
  }
}

double sub_1CD151A9C(uint64_t **a1, void **a2, void **a3)
{
  if (a2 == a3) {
    return 0.0;
  }
  uint64_t v4 = a2;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (v6 == *a1)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *v5++;
      *(void *)(v8 + 40) = v7;
      v7 += *(void *)(v8 + 16);
    }
    while (v5 != v6);
  }
  uint64_t v10 = a1[2];
  for (uint64_t i = a1[3]; v10 != i; v7 += *(void *)(v12 + 16))
  {
    uint64_t v12 = *v10++;
    *(void *)(v12 + 40) = v7;
  }
  unint64_t v13 = a1[4];
  for (unsigned int j = a1[5]; v13 != j; v7 += *(void *)(v15 + 16))
  {
    uint64_t v15 = *v13++;
    *(void *)(v15 + 40) = v7;
  }
  double v9 = 0.0;
  do
  {
    unint64_t v16 = *v4++;
    double v9 = v9 + sub_1CD150DC8(*(void *)(*v16 + 40), *(void *)(*v16 + 16), *(void *)(v16[1] + 40), v16[2]);
  }
  while (v4 != a3);
  return v9;
}

void sub_1CD151B80(uint64_t a1, uint64_t a2, char *__src, char *a4)
{
  if (a4 - __src >= 1)
  {
    uint64_t v4 = __src;
    uint64_t v6 = (a4 - __src) >> 3;
    uint64_t v7 = *(char **)a1;
    uint64_t v8 = *(uint64_t **)(a1 + 8);
    uint64_t v9 = a2 - *(void *)a1;
    uint64_t v10 = (char *)(*(void *)a1 + (v9 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v11 = *(void *)(a1 + 16);
    if (v6 <= (v11 - (uint64_t)v8) >> 3)
    {
      uint64_t v17 = ((char *)v8 - v10) >> 3;
      if (v17 >= v6)
      {
        uint64_t v18 = &__src[8 * v6];
        size_t v20 = *(char **)(a1 + 8);
        uint64_t v17 = (a4 - __src) >> 3;
      }
      else
      {
        uint64_t v18 = &__src[8 * v17];
        int64_t v19 = a4 - v18;
        if (a4 != v18) {
          memmove(*(void **)(a1 + 8), &__src[8 * v17], a4 - v18);
        }
        size_t v20 = (char *)v8 + v19;
        *(void *)(a1 + 8) = (char *)v8 + v19;
      }
      if (v17 >= 1)
      {
        unint64_t v21 = &v10[8 * v6];
        uint64_t v22 = (uint64_t *)&v20[-8 * v6];
        int v23 = v20;
        if (v22 < v8)
        {
          int v23 = v20;
          do
          {
            uint64_t v24 = *v22++;
            *(void *)int v23 = v24;
            v23 += 8;
          }
          while (v22 < v8);
        }
        *(void *)(a1 + 8) = v23;
        if (v20 != v21) {
          memmove(&v20[-8 * ((v20 - v21) >> 3)], v10, v20 - v21);
        }
        if (v18 != v4)
        {
          memmove(v10, v4, v18 - v4);
        }
      }
    }
    else
    {
      unint64_t v12 = v6 + (((char *)v8 - v7) >> 3);
      if (v12 >> 61) {
        abort();
      }
      uint64_t v13 = v11 - (void)v7;
      uint64_t v14 = v13 >> 2;
      if (v13 >> 2 <= v12) {
        uint64_t v14 = v12;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15)
      {
        if (v15 >> 61) {
          sub_1CB833614();
        }
        unint64_t v16 = (char *)operator new(8 * v15);
      }
      else
      {
        unint64_t v16 = 0;
      }
      unint64_t v25 = &v16[8 * (v9 >> 3)];
      double v26 = &v25[8 * v6];
      uint64_t v27 = 8 * v6;
      uint64_t v28 = v25;
      do
      {
        uint64_t v29 = *(void *)v4;
        v4 += 8;
        *(void *)uint64_t v28 = v29;
        v28 += 8;
        v27 -= 8;
      }
      while (v27);
      int v30 = *(char **)a1;
      if (v10 != *(char **)a1)
      {
        uint64_t v31 = v10;
        do
        {
          uint64_t v32 = *((void *)v31 - 1);
          v31 -= 8;
          *((void *)v25 - 1) = v32;
          v25 -= 8;
        }
        while (v31 != v30);
        uint64_t v8 = *(uint64_t **)(a1 + 8);
      }
      uint64_t v33 = &v16[8 * v15];
      if (v8 != (uint64_t *)v10) {
        memmove(v26, v10, (char *)v8 - v10);
      }
      unint64_t v34 = *(char **)a1;
      *(void *)a1 = v25;
      *(void *)(a1 + 8) = &v26[(char *)v8 - v10];
      *(void *)(a1 + 16) = v33;
      if (v34)
      {
        operator delete(v34);
      }
    }
  }
}

double sub_1CD151DB0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void **a5, void **a6, uint64_t a7, int a8)
{
  uint64_t v8 = *(uint64_t **)(a2 + 16);
  uint64_t v9 = *(uint64_t **)(a2 + 24);
  uint64_t v10 = &v8[a7];
  switch(a8)
  {
    case 1:
      unint64_t v15 = *(uint64_t **)(a2 + 16);
      unint64_t v16 = &v8[a7];
      uint64_t v17 = a3;
      uint64_t v18 = a4;
      int64_t v19 = v16;
      size_t v20 = v9;
      uint64_t v10 = v8;
      break;
    case 2:
      unint64_t v15 = a3;
      unint64_t v16 = a4;
      int64_t v19 = v8;
      size_t v20 = &v8[a7];
      uint64_t v17 = v20;
      uint64_t v18 = v9;
      uint64_t v10 = a3;
      break;
    case 3:
      unint64_t v15 = &v8[a7];
      unint64_t v16 = v9;
      uint64_t v17 = v8;
      uint64_t v18 = v15;
      int64_t v19 = a3;
      size_t v20 = a4;
      break;
    default:
      unint64_t v15 = *(uint64_t **)(a2 + 16);
      unint64_t v16 = v9;
      uint64_t v17 = a3;
      uint64_t v18 = a4;
      uint64_t v10 = v8;
      int64_t v19 = 0;
      size_t v20 = 0;
      break;
  }
  if (*(void *)*v8 && *(void *)*a3 || !*(void *)*v10)
  {
    double result = sub_1CD151A9C(&v15, a5, a6) - *(double *)(a2 + 8);
    *(double *)a1 = result;
    *(void *)(a1 + 8) = a7;
    *(_DWORD *)(a1 + 16) = a8;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0xBFF0000000000000;
  }
  return result;
}

void *sub_1CD151EC8(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v24 = a3;
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    int v7 = 2 * v6;
  }
  else
  {
    int v7 = *(_DWORD *)(a1 + 16);
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3) {
      goto LABEL_3;
    }
  }
  uint64_t v9 = *(void *)a1;
  unint64_t v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  unint64_t v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  int v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40) {
    unsigned int v13 = v12 + 1;
  }
  else {
    unsigned int v13 = 64;
  }
  *(_DWORD *)(a1 + 16) = v13;
  uint64_t v14 = operator new(16 * v13, (std::align_val_t)8uLL);
  *(void *)a1 = v14;
  if (v9)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v15 = *(unsigned int *)(a1 + 16);
    if (v15)
    {
      uint64_t v16 = 16 * v15;
      do
      {
        *uint64_t v14 = -4096;
        v14 += 2;
        v16 -= 16;
      }
      while (v16);
    }
    if (v6)
    {
      int v17 = 0;
      uint64_t v18 = (uint64_t *)(v9 + 8);
      uint64_t v19 = 16 * v6;
      do
      {
        uint64_t v20 = *(v18 - 1);
        if ((v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          unint64_t v25 = 0;
          sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), v20, &v25);
          unint64_t v21 = v25;
          *unint64_t v25 = v20;
          v21[1] = *v18;
          *(_DWORD *)(a1 + 8) = ++v17;
        }
        v18 += 2;
        v19 -= 16;
      }
      while (v19);
    }
    MEMORY[0x1D25D9CD0](v9, 8);
    uint64_t v14 = *(void **)a1;
    LODWORD(v22) = *(_DWORD *)(a1 + 16);
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v22 = *(unsigned int *)(a1 + 16);
    if (v22)
    {
      uint64_t v23 = 0;
      do
      {
        v14[v23] = -4096;
        v23 += 2;
      }
      while (2 * v22 != v23);
    }
  }
  sub_1CBB0BF40((uint64_t)v14, v22, *a2, &v24);
  int v5 = *(_DWORD *)(a1 + 8);
  a3 = v24;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t *sub_1CD15208C(uint64_t *result, double *a2, uint64_t *a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a4 < 2) {
    return result;
  }
  uint64_t v8 = (double *)result;
  if (a4 == 2)
  {
    uint64_t v9 = *((void *)a2 - 1);
    uint64_t v45 = *result;
    unint64_t v10 = (void *)v45;
    uint64_t v46 = v9;
    uint64_t v11 = ***(void ***)(v9 + 16);
    if ((v11 == 0) != (***(void ***)(v45 + 16) == 0))
    {
      if (v11) {
        return result;
      }
    }
    else
    {
      double v26 = *(double *)sub_1CD153070(*a3, &v46);
      double result = sub_1CD153070(*a3, &v45);
      if (v26 == *(double *)result)
      {
        if (*(void *)v9 >= *v10) {
          return result;
        }
      }
      else if (v26 <= *(double *)result)
      {
        return result;
      }
    }
    double v42 = *v8;
    *uint64_t v8 = *(a2 - 1);
    *(a2 - 1) = v42;
    return result;
  }
  if ((uint64_t)a4 > 128)
  {
    uint64_t v28 = a5;
    unint64_t v29 = a4 >> 1;
    int v30 = &result[a4 >> 1];
    unint64_t v31 = a4 >> 1;
    if ((uint64_t)a4 > a6)
    {
      sub_1CD15208C(result, v30, a3, v31, a5, a6);
      sub_1CD15208C(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v28, a6);
      return (uint64_t *)sub_1CD1528CC(v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), v28, a6);
    }
    sub_1CD1524D0(result, v30, a3, v31, a5);
    uint64_t v32 = &v28[v29];
    double result = sub_1CD1524D0((uint64_t *)&v8[a4 >> 1], (uint64_t *)a2, a3, a4 - (a4 >> 1), v32);
    uint64_t v33 = &v28[a4];
    unint64_t v34 = v32;
    while (1)
    {
      if (v34 == v33)
      {
        if (v28 != v32)
        {
          uint64_t v43 = 0;
          do
          {
            *(void *)&v8[v43] = v28[v43];
            ++v43;
          }
          while (&v28[v43] != v32);
        }
        return result;
      }
      uint64_t v35 = *v34;
      uint64_t v45 = *v28;
      long long v36 = (void *)v45;
      uint64_t v46 = v35;
      uint64_t v37 = ***(void ***)(v35 + 16);
      if ((v37 == 0) != (***(void ***)(v45 + 16) == 0))
      {
        if (!v37) {
          goto LABEL_47;
        }
      }
      else
      {
        double v40 = *(double *)sub_1CD153070(*a3, &v46);
        double result = sub_1CD153070(*a3, &v45);
        if (v40 == *(double *)result)
        {
          if (*(void *)v35 < *v36)
          {
LABEL_47:
            uint64_t v41 = *v34++;
            uint64_t v38 = v41;
            goto LABEL_48;
          }
        }
        else if (v40 > *(double *)result)
        {
          goto LABEL_47;
        }
      }
      uint64_t v39 = *v28++;
      uint64_t v38 = v39;
LABEL_48:
      *(void *)v8++ = v38;
      if (v28 == v32)
      {
        if (v34 != v33)
        {
          uint64_t v44 = 0;
          do
          {
            *(void *)&v8[v44] = v34[v44];
            ++v44;
          }
          while (&v34[v44] != v33);
        }
        return result;
      }
    }
  }
  if (result == (uint64_t *)a2) {
    return result;
  }
  unsigned int v13 = result + 1;
  if (result + 1 == (uint64_t *)a2) {
    return result;
  }
  uint64_t v14 = 0;
  uint64_t v15 = result;
  do
  {
    uint64_t v16 = v15;
    uint64_t v15 = v13;
    uint64_t v17 = *v13;
    uint64_t v45 = *v16;
    uint64_t v18 = (void *)v45;
    uint64_t v46 = v17;
    uint64_t v19 = ***(void ***)(v17 + 16);
    if ((v19 == 0) != (***(void ***)(v45 + 16) == 0))
    {
      if (v19) {
        goto LABEL_30;
      }
    }
    else
    {
      double v20 = *(double *)sub_1CD153070(*a3, &v46);
      double result = sub_1CD153070(*a3, &v45);
      if (v20 == *(double *)result)
      {
        if (*(void *)v17 >= *v18) {
          goto LABEL_30;
        }
      }
      else if (v20 <= *(double *)result)
      {
        goto LABEL_30;
      }
    }
    uint64_t v21 = *v15;
    uint64_t *v15 = *v16;
    if (v16 == (uint64_t *)v8)
    {
LABEL_28:
      uint64_t v16 = (uint64_t *)v8;
      goto LABEL_29;
    }
    uint64_t v22 = v14;
    while (1)
    {
      uint64_t v45 = *(void *)((char *)v8 + v22 - 8);
      uint64_t v23 = (void *)v45;
      uint64_t v46 = v21;
      uint64_t v24 = ***(void ***)(v21 + 16);
      if ((v24 == 0) != (***(void ***)(v45 + 16) == 0))
      {
        if (v24) {
          goto LABEL_29;
        }
        goto LABEL_27;
      }
      double v25 = *(double *)sub_1CD153070(*a3, &v46);
      double result = sub_1CD153070(*a3, &v45);
      if (v25 != *(double *)result)
      {
        if (v25 <= *(double *)result) {
          goto LABEL_29;
        }
        goto LABEL_27;
      }
      if (*(void *)v21 >= *v23) {
        break;
      }
LABEL_27:
      --v16;
      *(double *)((char *)v8 + v22) = *(double *)((char *)v8 + v22 - 8);
      v22 -= 8;
      if (!v22) {
        goto LABEL_28;
      }
    }
    uint64_t v16 = (uint64_t *)((char *)v8 + v22);
LABEL_29:
    uint64_t *v16 = v21;
LABEL_30:
    unsigned int v13 = v15 + 1;
    v14 += 8;
  }
  while (v15 + 1 != (uint64_t *)a2);
  return result;
}

uint64_t *sub_1CD1524D0(uint64_t *result, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t *a5)
{
  if (!a4) {
    return result;
  }
  int v5 = a5;
  int v7 = result;
  if (a4 == 1)
  {
    uint64_t v11 = result;
LABEL_39:
    *int v5 = *v11;
    return result;
  }
  uint64_t v9 = a2;
  if (a4 == 2)
  {
    uint64_t v11 = a2 - 1;
    uint64_t v10 = *(a2 - 1);
    double v44 = *(double *)result;
    double v12 = v44;
    uint64_t v45 = v10;
    uint64_t v13 = ***(void ***)(v10 + 16);
    if ((v13 == 0) != (***(void ***)(*(void *)&v44 + 16) == 0))
    {
      if (v13)
      {
LABEL_6:
        uint64_t v14 = v7;
LABEL_38:
        *v5++ = *v14;
        goto LABEL_39;
      }
    }
    else
    {
      double v31 = *(double *)sub_1CD153070(*a3, &v45);
      double result = sub_1CD153070(*a3, (uint64_t *)&v44);
      if (v31 == *(double *)result)
      {
        if (*(void *)v10 >= **(void **)&v12) {
          goto LABEL_6;
        }
      }
      else if (v31 <= *(double *)result)
      {
        goto LABEL_6;
      }
    }
    uint64_t v14 = v11;
    uint64_t v11 = v7;
    goto LABEL_38;
  }
  if ((uint64_t)a4 > 8)
  {
    uint64_t v32 = &result[a4 >> 1];
    sub_1CD15208C(result, v32, a3, a4 >> 1, a5, a4 >> 1);
    double result = (uint64_t *)sub_1CD15208C(&v7[a4 >> 1], v9, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
    uint64_t v33 = &v7[a4 >> 1];
    while (1)
    {
      if (v33 == v9)
      {
        if (v7 != v32)
        {
          uint64_t v41 = 0;
          do
          {
            v5[v41] = v7[v41];
            ++v41;
          }
          while (&v7[v41] != v32);
        }
        return result;
      }
      uint64_t v34 = *v33;
      double v44 = *(double *)v7;
      double v35 = v44;
      uint64_t v45 = v34;
      uint64_t v36 = ***(void ***)(v34 + 16);
      if ((v36 == 0) != (***(void ***)(*(void *)&v44 + 16) == 0))
      {
        if (!v36) {
          goto LABEL_48;
        }
      }
      else
      {
        double v39 = *(double *)sub_1CD153070(*a3, &v45);
        double result = sub_1CD153070(*a3, (uint64_t *)&v44);
        if (v39 == *(double *)result)
        {
          if (*(void *)v34 < **(void **)&v35)
          {
LABEL_48:
            double v40 = *(double *)v33++;
            double v37 = v40;
            goto LABEL_49;
          }
        }
        else if (v39 > *(double *)result)
        {
          goto LABEL_48;
        }
      }
      double v38 = *(double *)v7++;
      double v37 = v38;
LABEL_49:
      *(double *)v5++ = v37;
      if (v7 == v32)
      {
        if (v33 != v9)
        {
          uint64_t v42 = 0;
          do
          {
            v5[v42] = v33[v42];
            ++v42;
          }
          while (&v33[v42] != v9);
        }
        return result;
      }
    }
  }
  if (result == a2) {
    return result;
  }
  uint64_t v15 = result + 1;
  *a5 = *result;
  if (result + 1 == a2) {
    return result;
  }
  uint64_t v16 = 0;
  uint64_t v17 = (double *)a5;
  do
  {
    uint64_t v18 = v17;
    double v20 = *v17++;
    double v19 = v20;
    uint64_t v21 = *v15;
    double v44 = v20;
    uint64_t v45 = v21;
    uint64_t v22 = ***(void ***)(v21 + 16);
    if ((v22 == 0) != (***(void ***)(*(void *)&v20 + 16) == 0))
    {
      uint64_t v23 = v17;
      if (v22) {
        goto LABEL_32;
      }
    }
    else
    {
      double v24 = *(double *)sub_1CD153070(*a3, &v45);
      double result = sub_1CD153070(*a3, (uint64_t *)&v44);
      if (v24 == *(double *)result)
      {
        uint64_t v23 = v17;
        if (*(void *)v21 >= **(void **)&v19) {
          goto LABEL_32;
        }
      }
      else
      {
        uint64_t v23 = v17;
        if (v24 <= *(double *)result) {
          goto LABEL_32;
        }
      }
    }
    v18[1] = *v18;
    uint64_t v23 = (double *)v5;
    if (v18 == (double *)v5) {
      goto LABEL_32;
    }
    uint64_t v25 = v16;
    while (1)
    {
      uint64_t v26 = *v15;
      double v44 = *(double *)((char *)v5 + v25 - 8);
      double v27 = v44;
      uint64_t v45 = v26;
      uint64_t v28 = ***(void ***)(v26 + 16);
      if ((v28 == 0) != (***(void ***)(*(void *)&v44 + 16) == 0))
      {
        if (v28) {
          goto LABEL_30;
        }
        goto LABEL_28;
      }
      double v29 = *(double *)sub_1CD153070(*a3, &v45);
      double result = sub_1CD153070(*a3, (uint64_t *)&v44);
      if (v29 == *(double *)result) {
        break;
      }
      if (v29 <= *(double *)result)
      {
LABEL_30:
        uint64_t v23 = v18;
        goto LABEL_31;
      }
LABEL_28:
      --v18;
      *(uint64_t *)((char *)v5 + v25) = *(uint64_t *)((char *)v5 + v25 - 8);
      v25 -= 8;
      if (!v25)
      {
        uint64_t v23 = (double *)v5;
        goto LABEL_31;
      }
    }
    if (*(void *)v26 < **(void **)&v27) {
      goto LABEL_28;
    }
    uint64_t v23 = (double *)((char *)v5 + v25);
LABEL_31:
    uint64_t v9 = a2;
LABEL_32:
    uint64_t v30 = *v15++;
    *(void *)uint64_t v23 = v30;
    v16 += 8;
  }
  while (v15 != v9);
  return result;
}

double *sub_1CD1528CC(double *result, double *a2, double *a3, uint64_t *a4, int64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v94 = a6;
  if (!a6) {
    return result;
  }
  uint64_t v13 = result;
  do
  {
    if (a5 <= a8 || v94 <= a8)
    {
      if (a5 > v94)
      {
        if (a2 == a3) {
          return result;
        }
        uint64_t v66 = 0;
        do
        {
          a7[v66] = *(void *)&a2[v66];
          ++v66;
        }
        while (&a2[v66] != a3);
        if (!(v66 * 8)) {
          return result;
        }
        uint64_t v67 = &a7[v66];
        for (uint64_t i = a3 - 1; ; --i)
        {
          if (a2 == v13)
          {
            if (v67 != a7)
            {
              uint64_t v87 = 0;
              do
              {
                *(void *)&i[v87] = v67[v87 - 1];
                --v87;
              }
              while (&v67[v87] != a7);
            }
            return result;
          }
          unint64_t v70 = a2 - 1;
          uint64_t v71 = *(v67 - 1);
          uint64_t v98 = *((void *)a2 - 1);
          uint64_t v69 = (void *)v98;
          uint64_t v99 = v71;
          uint64_t v72 = ***(void ***)(v71 + 16);
          if ((v72 == 0) == (***(void ***)(v98 + 16) == 0)) {
            break;
          }
          double result = a2 - 1;
          if (v72) {
            goto LABEL_89;
          }
LABEL_90:
          *uint64_t i = *v70;
          a2 = result;
          if (v67 == a7) {
            return result;
          }
        }
        uint64_t v73 = a2;
        double v74 = *(double *)sub_1CD153070(*a4, &v99);
        double v75 = *(double *)sub_1CD153070(*a4, &v98);
        if (v74 == v75)
        {
          double result = v70;
          a2 = v73;
          if (*(void *)v71 < *v69) {
            goto LABEL_90;
          }
        }
        else
        {
          double result = v70;
          a2 = v73;
          if (v74 > v75) {
            goto LABEL_90;
          }
        }
LABEL_89:
        unint64_t v70 = (double *)(v67 - 1);
        double result = a2;
        --v67;
        goto LABEL_90;
      }
      if (v13 == a2) {
        return result;
      }
      uint64_t v76 = 0;
      do
      {
        a7[v76] = *(void *)&v13[v76];
        ++v76;
      }
      while (&v13[v76] != a2);
      if (!(v76 * 8)) {
        return result;
      }
      uint64_t v77 = a7;
      while (1)
      {
        if (a2 == a3)
        {
          return (double *)memmove(v13, v77, (char *)a7 - (char *)v77 + v76 * 8);
        }
        uint64_t v78 = *(void *)a2;
        uint64_t v98 = *v77;
        uint64_t v79 = (void *)v98;
        uint64_t v99 = v78;
        uint64_t v80 = ***(void ***)(v78 + 16);
        if ((v80 == 0) != (***(void ***)(v98 + 16) == 0))
        {
          if (!v80) {
            goto LABEL_108;
          }
        }
        else
        {
          uint64_t v83 = a2;
          double v84 = *(double *)sub_1CD153070(*a4, &v99);
          double result = (double *)sub_1CD153070(*a4, &v98);
          if (v84 == *result)
          {
            a2 = v83;
            if (*(void *)v78 < *v79)
            {
LABEL_108:
              uint64_t v85 = *(void *)a2++;
              uint64_t v81 = v85;
              goto LABEL_109;
            }
          }
          else
          {
            a2 = v83;
            if (v84 > *result) {
              goto LABEL_108;
            }
          }
        }
        uint64_t v82 = *v77++;
        uint64_t v81 = v82;
LABEL_109:
        *(void *)v13++ = v81;
        if (&a7[v76] == v77) {
          return result;
        }
      }
    }
    if (!a5) {
      return result;
    }
    uint64_t v14 = 0;
    uint64_t v15 = -a5;
    uint64_t v97 = a2;
    while (1)
    {
      uint64_t v16 = *(void *)a2;
      uint64_t v98 = *(void *)&v13[v14];
      uint64_t v17 = (void *)v98;
      uint64_t v99 = v16;
      uint64_t v18 = ***(void ***)(v16 + 16);
      if ((v18 == 0) != (***(void ***)(v98 + 16) == 0))
      {
        if (!v18) {
          goto LABEL_17;
        }
        goto LABEL_14;
      }
      double v19 = *(double *)sub_1CD153070(*a4, &v99);
      double result = (double *)sub_1CD153070(*a4, &v98);
      if (v19 == *result) {
        break;
      }
      a2 = v97;
      if (v19 > *result) {
        goto LABEL_17;
      }
LABEL_14:
      ++v14;
      if (__CFADD__(v15++, 1)) {
        return result;
      }
    }
    a2 = v97;
    if (*(void *)v16 >= *v17) {
      goto LABEL_14;
    }
LABEL_17:
    uint64_t v21 = -v15;
    uint64_t v22 = v94;
    unint64_t v95 = a4;
    uint64_t v90 = v13;
    __int16 v91 = a3;
    uint64_t v92 = a8;
    uint64_t v89 = &v13[v14];
    if (-v15 < v94)
    {
      if (v94 >= 0) {
        uint64_t v23 = v94;
      }
      else {
        uint64_t v23 = v94 + 1;
      }
      uint64_t v96 = v23 >> 1;
      double v24 = (uint64_t *)&a2[v23 >> 1];
      unint64_t v25 = ((char *)a2 - (char *)v13 - v14 * 8) >> 3;
      if (&v13[v14] != a2)
      {
        long long v88 = a7;
        uint64_t v26 = (uint64_t *)&v13[v14];
        unint64_t v27 = v23 >> 1;
        do
        {
          uint64_t v28 = &v26[v25 >> 1];
          uint64_t v29 = *v24;
          uint64_t v98 = *v28;
          uint64_t v30 = (void *)v98;
          uint64_t v99 = v29;
          BOOL v31 = ***(void ***)(v29 + 16) == 0;
          if (v31 == (***(void ***)(v98 + 16) == 0))
          {
            double v32 = *(double *)sub_1CD153070(*v95, &v99);
            uint64_t v33 = (double *)sub_1CD153070(*v95, &v98);
            if (v32 == *v33) {
              BOOL v31 = *(void *)v29 < *v30;
            }
            else {
              BOOL v31 = v32 > *v33;
            }
            unint64_t v27 = v96;
            a2 = v97;
          }
          if (v31)
          {
            v25 >>= 1;
          }
          else
          {
            uint64_t v26 = v28 + 1;
            v25 += ~(v25 >> 1);
          }
        }
        while (v25);
        unint64_t v25 = ((char *)v26 - (char *)v90 - v14 * 8) >> 3;
        goto LABEL_50;
      }
      uint64_t v26 = (uint64_t *)a2;
      unint64_t v27 = v23 >> 1;
      goto LABEL_52;
    }
    if (v15 == -1)
    {
      double v86 = v13[v14];
      v13[v14] = *a2;
      *a2 = v86;
      return result;
    }
    if (v15 > 0) {
      uint64_t v21 = 1 - v15;
    }
    double v24 = (uint64_t *)a3;
    unint64_t v25 = v21 >> 1;
    uint64_t v26 = (uint64_t *)&v13[(v21 >> 1) + v14];
    unint64_t v27 = ((char *)v24 - (char *)a2) >> 3;
    if (v24 != (uint64_t *)a2)
    {
      long long v88 = a7;
      uint64_t v93 = *v95;
      double v24 = (uint64_t *)a2;
      do
      {
        uint64_t v34 = &v24[v27 >> 1];
        uint64_t v35 = *v34;
        uint64_t v98 = *v26;
        uint64_t v36 = (void *)v98;
        uint64_t v99 = v35;
        BOOL v37 = ***(void ***)(v35 + 16) == 0;
        if (v37 == (***(void ***)(v98 + 16) == 0))
        {
          double v38 = *(double *)sub_1CD153070(v93, &v99);
          double v39 = (double *)sub_1CD153070(v93, &v98);
          if (v38 == *v39) {
            BOOL v37 = *(void *)v35 < *v36;
          }
          else {
            BOOL v37 = v38 > *v39;
          }
          a2 = v97;
        }
        if (v37) {
          v27 += ~(v27 >> 1);
        }
        else {
          v27 >>= 1;
        }
        if (v37) {
          double v24 = v34 + 1;
        }
      }
      while (v27);
      unint64_t v27 = ((char *)v24 - (char *)a2) >> 3;
LABEL_50:
      a7 = v88;
      uint64_t v22 = v94;
    }
LABEL_52:
    double v40 = v24;
    if (v26 != (uint64_t *)a2)
    {
      double v40 = v26;
      if (a2 != (double *)v24)
      {
        uint64_t v41 = v26 + 1;
        if (v26 + 1 == (uint64_t *)a2)
        {
          uint64_t v47 = *v26;
          int64_t v48 = (char *)v24 - (char *)a2;
          memmove(v26, a2, (char *)v24 - (char *)a2);
          *(uint64_t *)((char *)v26 + v48) = v47;
          double v40 = (uint64_t *)((char *)v26 + v48);
        }
        else
        {
          uint64_t v42 = (uint64_t *)(a2 + 1);
          if (a2 + 1 == (double *)v24)
          {
            uint64_t v49 = *(v24 - 1);
            if (v24 - 1 != v26) {
              memmove(v26 + 1, v26, (char *)(v24 - 1) - (char *)v26);
            }
            uint64_t *v26 = v49;
            double v40 = v26 + 1;
          }
          else
          {
            uint64_t v43 = ((char *)a2 - (char *)v26) >> 3;
            uint64_t v44 = (char *)v24 - (char *)a2;
            if (v43 == ((char *)v24 - (char *)a2) >> 3)
            {
              do
              {
                uint64_t v45 = *(v41 - 1);
                *(v41 - 1) = *(v42 - 1);
                *(v42 - 1) = v45;
                if (v41 == (uint64_t *)a2) {
                  break;
                }
                ++v41;
              }
              while (v42++ != v24);
              double v40 = (uint64_t *)a2;
            }
            else
            {
              uint64_t v50 = v44 >> 3;
              uint64_t v51 = v44 >> 3;
              uint64_t v52 = ((char *)a2 - (char *)v26) >> 3;
              do
              {
                uint64_t v53 = v52;
                uint64_t v52 = v51;
                uint64_t v51 = v53 % v51;
              }
              while (v51);
              if (v52)
              {
                unint64_t v54 = &v26[v52];
                do
                {
                  uint64_t v56 = *--v54;
                  uint64_t v55 = v56;
                  int v57 = &v54[v43];
                  uint64_t v58 = v54;
                  do
                  {
                    uint64_t v59 = v57;
                    *uint64_t v58 = *v57;
                    uint64_t v60 = &v57[v43];
                    BOOL v61 = __OFSUB__(v43, v24 - v57);
                    uint64_t v63 = v43 - (v24 - v57);
                    char v62 = (v63 < 0) ^ v61;
                    int v57 = &v26[v63];
                    if (v62) {
                      int v57 = v60;
                    }
                    uint64_t v58 = v59;
                  }
                  while (v57 != v54);
                  uint64_t *v59 = v55;
                }
                while (v54 != v26);
              }
              double v40 = &v26[v50];
            }
          }
        }
      }
    }
    a5 = -(uint64_t)(v25 + v15);
    if ((uint64_t)(v25 + v27) >= (uint64_t)(v22 - (v25 + v27) - v15))
    {
      double result = (double *)sub_1CD1528CC(v40, v24, v91, v95, -(uint64_t)(v25 + v15), v22 - v27, a7, v92);
      double v24 = v26;
      a4 = v95;
      unint64_t v65 = v27;
      a5 = v25;
      a3 = (double *)v40;
      uint64_t v13 = v89;
    }
    else
    {
      uint64_t v64 = v26;
      a4 = v95;
      double result = (double *)sub_1CD1528CC(&v90[v14], v64, v40, v95, v25, v27, a7, v92);
      unint64_t v65 = v22 - v27;
      uint64_t v13 = (double *)v40;
      a3 = v91;
    }
    uint64_t v94 = v65;
    a2 = (double *)v24;
    a8 = v92;
  }
  while (v65);
  return result;
}

void *sub_1CD153070(uint64_t a1, uint64_t *a2)
{
  int v7 = 0;
  char v4 = sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  int v5 = v7;
  if ((v4 & 1) == 0)
  {
    int v5 = sub_1CD151EC8(a1, a2, v7);
    *int v5 = *a2;
    v5[1] = 0;
  }
  return v5 + 1;
}

uint64_t sub_1CD1530D8()
{
  LODWORD(v2) = 1;
  LOBYTE(v3) = 0;
  int v5 = (char *)&v3;
  v4.n128_u64[0] = (unint64_t)"Enable machine block placement based on the ext-tsp model, optimizing I-cache utilization.";
  v4.n128_u64[1] = 90;
  sub_1CC025F34((llvm::cl::Option *)&EnableExtTspBlockPlacement, "enable-ext-tsp-block-placement", &v2, &v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &EnableExtTspBlockPlacement, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Whether to apply ext-tsp placement for instances w/o profile";
  v4.n128_u64[1] = 60;
  char v1 = 1;
  int v5 = &v1;
  LODWORD(v2) = 1;
  int v3 = 1;
  sub_1CD87AEEC(&v4, &v5, &v2, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &ApplyExtTspWithoutProfile, &dword_1CB82C000);
  int v3 = 1;
  uint64_t v2 = 0x3FB999999999999ALL;
  v4.n128_u64[0] = (unint64_t)"The weight of forward jumps for ExtTSP value";
  v4.n128_u64[1] = 44;
  int v5 = (char *)&v2;
  sub_1CD87B084(&v3, (uint64_t **)&v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1CBF801A0, &qword_1EBCFBD48, &dword_1CB82C000);
  int v3 = 1;
  uint64_t v2 = 0x3FB999999999999ALL;
  v4.n128_u64[0] = (unint64_t)"The weight of backward jumps for ExtTSP value";
  v4.n128_u64[1] = 45;
  int v5 = (char *)&v2;
  sub_1CD87B200(&v3, (uint64_t **)&v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1CBF801A0, &qword_1EBCFBE10, &dword_1CB82C000);
  LODWORD(v2) = 1;
  int v3 = 1024;
  v4.n128_u64[1] = 60;
  int v5 = (char *)&v3;
  v4.n128_u64[0] = (unint64_t)"The maximum distance (in bytes) of a forward jump for ExtTSP";
  sub_1CD87B37C(&v2, (int **)&v5, (long long *)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCFB988, &dword_1CB82C000);
  LODWORD(v2) = 1;
  int v3 = 640;
  v4.n128_u64[0] = (unint64_t)"The maximum distance (in bytes) of a backward jump for ExtTSP";
  v4.n128_u64[1] = 61;
  int v5 = (char *)&v3;
  sub_1CD45A86C((uint64_t)&unk_1EBCFBA48, "ext-tsp-backward-distance", &v2, (int **)&v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCFBA48, &dword_1CB82C000);
  LODWORD(v2) = 1;
  int v3 = 4096;
  v4.n128_u64[0] = (unint64_t)"The maximum size of a chain to create.";
  v4.n128_u64[1] = 38;
  int v5 = (char *)&v3;
  sub_1CD45A86C((uint64_t)&unk_1EBCFBB08, "ext-tsp-max-chain-size", &v2, (int **)&v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCFBB08, &dword_1CB82C000);
  LODWORD(v2) = 1;
  int v3 = 128;
  v4.n128_u64[0] = (unint64_t)"The maximum size of a chain to apply splitting";
  v4.n128_u64[1] = 46;
  int v5 = (char *)&v3;
  sub_1CD45A86C((uint64_t)&unk_1EBCFBBC8, "ext-tsp-chain-split-threshold", &v2, (int **)&v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCFBBC8, &dword_1CB82C000);
  LODWORD(v2) = 1;
  LOBYTE(v3) = 1;
  v4.n128_u64[1] = 46;
  int v5 = (char *)&v3;
  v4.n128_u64[0] = (unint64_t)"The maximum size of a chain to apply splitting";
  sub_1CD87B4A4(&v2, &v5, &v4);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCFBC88, &dword_1CB82C000);
}

uint64_t llvm::isControlFlowEquivalent(llvm **this, const llvm::BasicBlock **a2, const llvm::Instruction *a3, const llvm::DominatorTree *a4, const llvm::PostDominatorTree *a5)
{
  return llvm::isControlFlowEquivalent(this[5], a2[5], a3, a4, a5);
}

void sub_1CD1533F4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a2 == a1)
  {
    *(void *)a4 = a4 + 16;
    *(void *)(a4 + 8) = 0x600000000;
    char v19 = 1;
    goto LABEL_25;
  }
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(unsigned int *)(a3 + 40);
  if (v7)
  {
    LODWORD(v8) = ((a1 >> 4) ^ (a1 >> 9)) & (v7 - 1);
    uint64_t v9 = (uint64_t *)(v6 + 16 * v8);
    uint64_t v10 = *v9;
    if (a1 == *v9) {
      goto LABEL_9;
    }
    int v11 = 1;
    while (v10 != -4096)
    {
      int v12 = v8 + v11++;
      uint64_t v8 = v12 & (v7 - 1);
      uint64_t v10 = *(void *)(v6 + 16 * v8);
      if (a1 == v10)
      {
        uint64_t v9 = (uint64_t *)(v6 + 16 * v8);
        goto LABEL_9;
      }
    }
  }
  uint64_t v9 = (uint64_t *)(v6 + 16 * v7);
LABEL_9:
  uint64_t v13 = **(void **)(v9[1] + 8);
  uint64_t v14 = *(void *)(v13 + 40);
  if (v14 != v13 + 40)
  {
    uint64_t v15 = v14 ? v14 - 24 : 0;
    unsigned int v16 = *(unsigned __int8 *)(v15 + 16) - 40;
    uint64_t v17 = v16 >= 0xFFFFFFF5 ? v15 : 0;
    if (v14)
    {
      if (*(unsigned char *)(v17 + 16) == 30 && v16 > 0xFFFFFFF4) {
        llvm::DominatorTreeBase<llvm::BasicBlock,true>::dominates();
      }
    }
  }
  char v19 = 0;
  *(unsigned char *)a4 = 0;
LABEL_25:
  *(unsigned char *)(a4 + 64) = v19;
}

uint64_t llvm::isSafeToMoveBefore(llvm *this, llvm::Instruction *a2, llvm::Instruction *a3, llvm::DominatorTree *a4, const llvm::PostDominatorTree *a5, llvm::DependenceInfo *a6)
{
  uint64_t v6 = 0;
  if (this != a2 && a4 && a5)
  {
    uint64_t v9 = (llvm *)*((void *)this + 5);
    uint64_t v10 = (llvm *)*((void *)this + 4);
    if (v10 != (llvm *)((char *)v9 + 40) && v10 != 0 && (llvm *)((char *)v10 - 24) == a2)
    {
      return 1;
    }
    else
    {
      uint64_t v6 = 0;
      int v13 = *((unsigned __int8 *)this + 16);
      if (v13 != 83 && *((unsigned char *)a2 + 16) != 83 && (v13 - 29) >= 0xB)
      {
        int v14 = (int)a6;
        if (!llvm::isControlFlowEquivalent(v9, *((const llvm::BasicBlock **)a2 + 5), a3, a4, a5)) {
          return 0;
        }
        uint64_t v16 = *((void *)this + 5);
        uint64_t v17 = *((void *)a2 + 5);
        if (v16 == v17)
        {
          if ((llvm::DominatorTree::dominates(a3, this, a2) & 1) == 0) {
            goto LABEL_30;
          }
        }
        else if (!llvm::nonStrictlyPostDominate(v17, v16, (uint64_t)a3))
        {
          goto LABEL_30;
        }
        for (uint64_t i = (const llvm::Use *)*((void *)this + 1); i; uint64_t i = (const llvm::Use *)*((void *)i + 1))
        {
          uint64_t v20 = (llvm::Instruction *)*((void *)i + 3);
          if (*((unsigned __int8 *)v20 + 16) <= 0x1Bu) {
            uint64_t v20 = 0;
          }
          BOOL v21 = !v20 || v20 == a2;
          if (!v21 && !llvm::DominatorTree::dominates(a3, a2, i)) {
            return 0;
          }
        }
LABEL_30:
        uint64_t v22 = *((void *)a2 + 5);
        uint64_t v23 = *((void *)this + 5);
        if (v22 == v23)
        {
          if ((llvm::DominatorTree::dominates(a3, a2, this) & 1) == 0) {
            goto LABEL_50;
          }
        }
        else if (!llvm::nonStrictlyPostDominate(v23, v22, (uint64_t)a3))
        {
          goto LABEL_50;
        }
        int v24 = *((_DWORD *)this + 5);
        if ((v24 & 0x40000000) != 0)
        {
          uint64_t v26 = (const llvm::Value **)*((void *)this - 1);
          uint64_t v25 = v24 & 0x7FFFFFF;
        }
        else
        {
          uint64_t v25 = v24 & 0x7FFFFFF;
          uint64_t v26 = (const llvm::Value **)((char *)this - 32 * v25);
        }
        if (!v25) {
LABEL_50:
        }
          llvm::DominatorTreeBase<llvm::BasicBlock,false>::updateDFSNumbers();
        uint64_t v27 = 32 * v25;
        while (1)
        {
          uint64_t v28 = *v26;
          BOOL v29 = *v26 && *((unsigned __int8 *)*v26 + 16) >= 0x1Cu;
          if (v29
            && (v28 == a2
             || (!v14
              || *((void *)this + 5) != *((void *)v28 + 5)
              || (llvm::DominatorTree::dominates(a3, *v26, this) & 1) == 0)
             && !llvm::DominatorTree::dominates(a3, v28, a2)))
          {
            return 0;
          }
          v26 += 4;
          v27 -= 32;
          if (!v27) {
            goto LABEL_50;
          }
        }
      }
    }
  }
  return v6;
}

uint64_t llvm::isReachedBefore(llvm *this, const llvm::Instruction *a2, const llvm::Instruction *a3, const llvm::DominatorTree *a4, const llvm::PostDominatorTree *a5)
{
  uint64_t v7 = *((void *)this + 5);
  uint64_t v8 = *((void *)a2 + 5);
  if (v7 == v8) {
    return llvm::DominatorTree::dominates(a3, this, a2);
  }
  else {
    return llvm::nonStrictlyPostDominate(v8, v7, (uint64_t)a3);
  }
}

uint64_t llvm::nonStrictlyPostDominate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v33[8] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 80);
  if (v3) {
    uint64_t v4 = v3 - 24;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4 == a1 || v4 == a2) {
    goto LABEL_34;
  }
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(unsigned int *)(a3 + 40);
  if (v7)
  {
    LODWORD(v8) = (v7 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    uint64_t v9 = (uint64_t *)(v6 + 16 * v8);
    uint64_t v10 = *v9;
    if (*v9 == a1) {
      goto LABEL_15;
    }
    int v11 = 1;
    while (v10 != -4096)
    {
      int v12 = v8 + v11++;
      uint64_t v8 = v12 & (v7 - 1);
      uint64_t v10 = *(void *)(v6 + 16 * v8);
      if (v10 == a1)
      {
        uint64_t v9 = (uint64_t *)(v6 + 16 * v8);
        goto LABEL_15;
      }
    }
  }
  uint64_t v9 = (uint64_t *)(v6 + 16 * v7);
LABEL_15:
  int v13 = (uint64_t *)(v6 + 16 * v7);
  if (v9 == v13)
  {
    int v14 = 0;
    if (!v7) {
      goto LABEL_38;
    }
  }
  else
  {
    int v14 = (uint64_t *)v9[1];
    if (!v7) {
      goto LABEL_38;
    }
  }
  unsigned int v15 = v7 - 1;
  LODWORD(v7) = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v16 = (uint64_t *)(v6 + 16 * v7);
  uint64_t v17 = *v16;
  if (*v16 != a2)
  {
    int v18 = 1;
    while (v17 != -4096)
    {
      int v19 = v7 + v18++;
      uint64_t v7 = v19 & v15;
      uint64_t v17 = *(void *)(v6 + 16 * v7);
      if (v17 == a2)
      {
        uint64_t v16 = (uint64_t *)(v6 + 16 * v7);
        goto LABEL_22;
      }
    }
    goto LABEL_38;
  }
LABEL_22:
  if (v16 == v13)
  {
LABEL_38:
    uint64_t v20 = 0;
    goto LABEL_24;
  }
  uint64_t v20 = (uint64_t *)v16[1];
LABEL_24:
  if (v14 == v20)
  {
    uint64_t v20 = v14;
  }
  else
  {
    do
    {
      unsigned int v21 = *((_DWORD *)v14 + 4);
      unsigned int v22 = *((_DWORD *)v20 + 4);
      BOOL v23 = v21 >= v22;
      if (v21 >= v22) {
        int v24 = v14;
      }
      else {
        int v24 = v20;
      }
      if (!v23) {
        uint64_t v20 = v14;
      }
      int v14 = (uint64_t *)v24[1];
    }
    while (v14 != v20);
  }
  uint64_t v4 = *v20;
LABEL_34:
  if (v4)
  {
    v30[8] = v33;
    int v32 = 8;
    uint64_t v26 = v30;
    uint64_t v27 = v30;
    uint64_t v28 = 0x100000008;
    int v29 = 0;
    v33[0] = a1;
    int v31 = 0;
    v30[0] = a1;
    llvm::DominatorTreeBase<llvm::BasicBlock,true>::dominates();
  }
  return 0;
}

uint64_t sub_1CD154C18(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = *a1 & 0xFFFFFFFFFFFFFFF8;
  if (((*a1 >> 2) & 1) == (((unint64_t)*a2 >> 2) & 1))
  {
    unint64_t v12 = v2 & 0xFFFFFFFFFFFFFFF8;
    goto LABEL_18;
  }
  unsigned int v4 = *(unsigned __int8 *)(v3 + 16);
  if (v4 < 0x1C || v4 - 83 < 0xFFFFFFFE) {
    return 0;
  }
  unint64_t v6 = v2 & 0xFFFFFFFFFFFFFFF8;
  unsigned int v7 = *(unsigned __int8 *)(v6 + 16);
  if (v7 < 0x1C || v7 - 83 < 0xFFFFFFFE) {
    return 0;
  }
  int v9 = *(_WORD *)(v3 + 18) & 0x3F;
  if (dword_1CFB32928[*(_WORD *)(v6 + 18) & 0x3F] != v9
    || *(void *)(v3 - 64) != *(void *)(v6 - 64)
    || *(void *)(v3 - 32) != *(void *)(v6 - 32))
  {
    int v10 = 40;
    int v11 = 33;
    switch(*(_WORD *)(v6 + 18) & 0x3F)
    {
      case 1:
        int v11 = 14;
        goto LABEL_16;
      case 2:
        int v10 = 11;
        goto LABEL_39;
      case 3:
        int v10 = 10;
        goto LABEL_39;
      case 4:
        int v10 = 13;
        goto LABEL_39;
      case 5:
        int v10 = 12;
        goto LABEL_39;
      case 6:
        int v11 = 9;
        goto LABEL_16;
      case 7:
        int v11 = 8;
        goto LABEL_16;
      case 8:
        int v11 = 7;
        goto LABEL_16;
      case 9:
        int v11 = 6;
        goto LABEL_16;
      case 0xA:
        int v10 = 3;
        goto LABEL_39;
      case 0xB:
        int v10 = 2;
        goto LABEL_39;
      case 0xC:
        int v10 = 5;
        goto LABEL_39;
      case 0xD:
        int v10 = 4;
        goto LABEL_39;
      case 0xE:
        int v11 = 1;
        goto LABEL_16;
      case 0xF:
        int v11 = 0;
        goto LABEL_16;
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
        __break(1u);
        goto LABEL_48;
      case 0x20:
        goto LABEL_16;
      case 0x21:
        int v11 = 32;
        goto LABEL_16;
      case 0x22:
        int v10 = 35;
        goto LABEL_39;
      case 0x23:
        int v10 = 34;
        goto LABEL_39;
      case 0x24:
        int v10 = 37;
        goto LABEL_39;
      case 0x25:
        int v10 = 36;
        goto LABEL_39;
      case 0x26:
        int v10 = 39;
        goto LABEL_39;
      case 0x27:
        int v10 = 38;
        goto LABEL_39;
      case 0x28:
        int v10 = 41;
        goto LABEL_39;
      case 0x29:
        goto LABEL_39;
      default:
LABEL_48:
        int v11 = 15;
LABEL_16:
        int v10 = v11;
LABEL_39:
        if (v10 != v9 || *(void *)(v3 - 64) != *(void *)(v6 - 32)) {
          return 0;
        }
        unint64_t v3 = *(void *)(v3 - 32);
        unint64_t v12 = *(void *)(v6 - 64);
        break;
    }
LABEL_18:
    if (v3 != v12) {
      return 0;
    }
  }
  return 1;
}

void llvm::ComputationExtractor::evaluate(unint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v4[1] = *MEMORY[0x1E4F143B8];
  v4[0] = a1;
  llvm::ComputationExtractor::evaluate(v4, 1, a2, a3, a4);
}

void llvm::ComputationExtractor::evaluate(unint64_t *a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v8 = a1;
  int v9 = a5;
  v139[9] = *MEMORY[0x1E4F143B8];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  sub_1CBFCBA2C(a5, a1, (uint64_t)&a1[a2], (8 * a2) >> 3);
  int v10 = 0;
  unint64_t v11 = 0;
  uint64_t v96 = v9;
  uint64_t v92 = v9 + 5;
  v9[3] = v9 + 5;
  v9 += 3;
  uint64_t v93 = v9 + 12;
  v9[10] = v9 + 12;
  unint64_t v12 = (void **)(v9 + 10);
  v9[1] = 0x800000000;
  v9[11] = 0x800000000;
  *((_OWORD *)v9 + 10) = 0u;
  *((_OWORD *)v9 + 11) = 0u;
  *((_OWORD *)v9 + 12) = 0u;
  *((_OWORD *)v9 + 13) = 0u;
  unint64_t v95 = (void **)v9;
  v9[28] = 0;
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  uint64_t v114 = 0;
  if (8 * a4)
  {
    if (8 * a4 < 0) {
      goto LABEL_214;
    }
    int v13 = (unint64_t *)operator new(8 * a4);
    unint64_t v11 = (unint64_t)v13;
    int v10 = &v13[(8 * a4) >> 3];
    uint64_t v112 = v13;
    uint64_t v114 = v10;
    if (a4) {
      memmove(v13, a3, 8 * a4);
    }
    uint64_t v113 = v10;
  }
  uint64_t v94 = (void *)v11;
  unint64_t v14 = 126 - 2 * __clz((uint64_t)((uint64_t)v10 - v11) >> 3);
  if (v10 == (unint64_t *)v11) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = v14;
  }
  sub_1CD15906C(v11, v10, v15, 1);
  v108[0] = 0;
  v108[1] = 0;
  int v109 = 0;
  uint64_t v111 = 0;
  long long v110 = 0uLL;
  v104[0] = 0;
  v104[1] = 0;
  int v105 = 0;
  __p[1] = 0;
  uint64_t v107 = 0;
  __p[0] = 0;
  uint64_t v99 = v103;
  uint64_t v100 = v103;
  uint64_t v101 = 4;
  int v102 = 0;
  v97[0] = 0;
  v97[1] = 0;
  int v98 = 0;
  uint64_t v124 = 1;
  int64x2_t v125 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  int64x2_t v126 = v125;
  int64x2_t v127 = v125;
  int64x2_t v128 = v125;
  int v129 = v131;
  uint64_t v130 = 0x800000000;
  uint64_t v132 = 1;
  int64x2_t v133 = v125;
  int64x2_t v134 = v125;
  int64x2_t v135 = v125;
  int64x2_t v136 = v125;
  uint64_t v137 = v139;
  uint64_t v138 = 0x800000000;
  v139[8] = 0;
  if (a2)
  {
    uint64_t v16 = 8 * a2;
    do
    {
      if (*v8) {
        BOOL v17 = *(unsigned __int8 *)(*v8 + 16) >= 0x1Cu;
      }
      else {
        BOOL v17 = 0;
      }
      if (v17)
      {
        sub_1CD155C08((uint64_t)&v115, *v8, &v112, (uint64_t)&v99, (uint64_t)v97, v108, v104);
        sub_1CD155B60((BOOL)&v124, (uint64_t)&v115);
        if (v122 != v123) {
          free(v122);
        }
        if ((v120 & 1) == 0) {
          MEMORY[0x1D25D9CD0](v121, 8);
        }
        if (v118 != v119) {
          free(v118);
        }
        if ((v115 & 1) == 0) {
          MEMORY[0x1D25D9CD0](v116, 8);
        }
      }
      ++v8;
      v16 -= 8;
    }
    while (v16);
    if (HIDWORD(v101) != v102)
    {
      int v18 = v100;
      if (v100 == v99) {
        uint64_t v19 = HIDWORD(v101);
      }
      else {
        uint64_t v19 = v101;
      }
      if (v19)
      {
        uint64_t v20 = 8 * v19;
        unsigned int v21 = &v100[8 * v19];
        while (*(void *)v18 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v18 += 8;
          v20 -= 8;
          if (!v20)
          {
            int v18 = v21;
            break;
          }
        }
      }
      uint64_t v22 = *(void *)(*(void *)v18 + 56);
      BOOL v23 = (void *)(v22 + 72);
      int v24 = *(void **)(v22 + 80);
      if (v24 != (void *)(v22 + 72))
      {
        unint64_t v32 = (unint64_t)v123;
        uint64_t v34 = (uint64_t *)v119;
        do
        {
          if (v24) {
            uint64_t v59 = v24 - 3;
          }
          else {
            uint64_t v59 = 0;
          }
          uint64_t v60 = v59[5];
          if ((void *)v60 != v59 + 5)
          {
            unint64_t v61 = v60 - 24;
            if (v60) {
              uint64_t v62 = v60 - 24;
            }
            else {
              uint64_t v62 = 0;
            }
            if (*(unsigned char *)(v62 + 16) == 30)
            {
              if ((*(_DWORD *)(v62 + 20) & 0x7FFFFFF) == 3) {
                int v87 = 2;
              }
              else {
                int v87 = 1;
              }
LABEL_128:
              uint64_t v63 = 0;
              unsigned int v64 = 0;
              uint64_t v65 = v60 - 56;
              int v66 = v101 - 1;
              do
              {
                if (*(unsigned char *)(v60 - 8) == 30)
                {
                  uint64_t v80 = (uint64_t *)(v65 - 32 * v63);
                }
                else
                {
                  uint64_t v80 = (uint64_t *)(v60 - 56);
                  switch(*(unsigned char *)(v60 - 8))
                  {
                    case ' ':
                    case '&':
                      int v84 = *(_DWORD *)(v60 - 4);
                      if ((v84 & 0x40000000) != 0) {
                        unint64_t v85 = *(void *)(v60 - 32);
                      }
                      else {
                        unint64_t v85 = v61 - 32 * (v84 & 0x7FFFFFF);
                      }
                      unint64_t v83 = v85 + 32 * v63;
                      goto LABEL_172;
                    case '!':
                      uint64_t v86 = -64;
                      if (!v63) {
                        uint64_t v86 = -96;
                      }
                      uint64_t v80 = (uint64_t *)(v61 + v86);
                      break;
                    case '""':
                    case '#':
                      goto LABEL_215;
                    case '$':
                      if ((*(_WORD *)(v60 - 6) & 1) == 0)
                      {
                        uint64_t v67 = 0;
                        goto LABEL_133;
                      }
                      uint64_t v80 = (uint64_t *)(v60 + 8 - 32 * (*(_DWORD *)(v60 - 4) & 0x7FFFFFF));
                      break;
                    case '%':
                      break;
                    case '\'':
                      if (v63) {
                        uint64_t v80 = (uint64_t *)(v65 - 32 * *(unsigned int *)(v60 + 56) + 32 * v63 - 32);
                      }
                      else {
                        uint64_t v80 = (uint64_t *)(v60 - 88 - 32 * *(unsigned int *)(v60 + 56));
                      }
                      break;
                    default:
                      int v81 = *(_DWORD *)(v60 - 4);
                      if ((v81 & 0x40000000) != 0) {
                        unint64_t v82 = *(void *)(v60 - 32);
                      }
                      else {
                        unint64_t v82 = v61 - 32 * (v81 & 0x7FFFFFF);
                      }
                      unint64_t v83 = v82 + 32 * (2 * v63);
LABEL_172:
                      uint64_t v80 = (uint64_t *)(v83 + 32);
                      break;
                  }
                }
                uint64_t v67 = *v80;
LABEL_133:
                if (v100 == v99)
                {
                  if (HIDWORD(v101))
                  {
                    uint64_t v68 = 0;
                    while (*(void *)&v100[v68] != v67)
                    {
                      v68 += 8;
                      if (8 * HIDWORD(v101) == v68)
                      {
                        int v69 = HIDWORD(v101);
                        goto LABEL_153;
                      }
                    }
                    uint64_t v78 = &v100[v68];
                    int v69 = HIDWORD(v101);
                    uint64_t v79 = v100;
                  }
                  else
                  {
                    int v69 = 0;
LABEL_153:
                    uint64_t v79 = v100;
                    uint64_t v78 = &v100[8 * HIDWORD(v101)];
                  }
                }
                else
                {
                  unsigned int v70 = v66 & ((v67 >> 4) ^ (v67 >> 9));
                  uint64_t v71 = &v100[8 * v70];
                  uint64_t v72 = *(void *)v71;
                  if (*(void *)v71 == -1)
                  {
                    uint64_t v73 = 0;
LABEL_155:
                    if (v73) {
                      uint64_t v71 = v73;
                    }
                    uint64_t v77 = *(void *)v71;
                  }
                  else
                  {
                    uint64_t v73 = 0;
                    int v74 = 1;
                    while (v72 != v67)
                    {
                      if (v73) {
                        BOOL v75 = 0;
                      }
                      else {
                        BOOL v75 = v72 == -2;
                      }
                      if (v75) {
                        uint64_t v73 = v71;
                      }
                      unsigned int v76 = v70 + v74++;
                      unsigned int v70 = v76 & v66;
                      uint64_t v71 = &v100[8 * (v76 & v66)];
                      uint64_t v72 = *(void *)v71;
                      if (*(void *)v71 == -1) {
                        goto LABEL_155;
                      }
                    }
                    uint64_t v77 = v67;
                  }
                  if (v77 == v67) {
                    uint64_t v78 = v71;
                  }
                  else {
                    uint64_t v78 = &v100[8 * v101];
                  }
                  int v69 = HIDWORD(v101);
                  uint64_t v79 = v99;
                }
                if (v100 != v79) {
                  int v69 = v101;
                }
                if (v78 != &v100[8 * v69]) {
                  ++v64;
                }
                ++v63;
              }
              while (v63 != v87);
              if (v64 >= 2)
              {
                sub_1CD155C08((uint64_t)&v115, v61, &v112, (uint64_t)&v99, (uint64_t)v97, v108, v104);
                sub_1CD155B60((BOOL)&v124, (uint64_t)&v115);
                if (v122 != v123) {
                  free(v122);
                }
                if ((v120 & 1) == 0) {
                  MEMORY[0x1D25D9CD0](v121, 8);
                }
                if (v118 != v119) {
                  free(v118);
                }
                if ((v115 & 1) == 0) {
                  MEMORY[0x1D25D9CD0](v116, 8);
                }
              }
              goto LABEL_196;
            }
            int v87 = 2;
            switch(*(unsigned char *)(v62 + 16))
            {
              case 0x1E:
LABEL_215:
                __break(1u);
                goto LABEL_216;
              case 0x1F:
                int v87 = (*(_DWORD *)(v62 + 20) >> 1) & 0x3FFFFFF;
                break;
              case 0x20:
              case 0x26:
                int v87 = (*(_DWORD *)(v62 + 20) & 0x7FFFFFF) - 1;
                break;
              case 0x21:
                goto LABEL_128;
              case 0x24:
                int v87 = *(_WORD *)(v62 + 18) & 1;
                break;
              case 0x25:
                int v87 = 1;
                goto LABEL_128;
              case 0x27:
                int v87 = *(_DWORD *)(v62 + 80) + 1;
                break;
              default:
                goto LABEL_196;
            }
            if (v87) {
              goto LABEL_128;
            }
          }
LABEL_196:
          int v24 = (void *)v24[1];
        }
        while (v24 != v23);
      }
    }
  }
  sub_1CD47558C(v108);
  long long v25 = v110;
  uint64_t v26 = v111;
  long long v110 = 0uLL;
  uint64_t v111 = 0;
  uint64_t v27 = v96;
  uint64_t v28 = (void *)v96[29];
  if (v28)
  {
    v96[30] = v28;
    long long v90 = v25;
    operator delete(v28);
    long long v25 = v90;
  }
  *(_OWORD *)(v96 + 29) = v25;
  v96[31] = v26;
  sub_1CD47558C(v104);
  long long v29 = *(_OWORD *)__p;
  uint64_t v30 = v107;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v107 = 0;
  int v31 = (void *)v96[23];
  if (v31)
  {
    v96[24] = v31;
    long long v91 = v29;
    operator delete(v31);
    long long v29 = v91;
  }
  *(_OWORD *)(v96 + 23) = v29;
  v96[25] = v30;
  sub_1CD158F50(&v124);
  int v24 = v117;
  unint64_t v115 = v117;
  uint64_t v116 = 0x800000000;
  unint64_t v32 = v130;
  uint64_t v33 = v117;
  if (v130)
  {
    uint64_t v33 = v129;
    if (v129 == v131)
    {
      if (v130 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v117, v131, 8 * v130);
      uint64_t v33 = v115;
      LODWORD(v116) = v32;
    }
    else
    {
      unint64_t v115 = v129;
      uint64_t v116 = v130;
      int v129 = v131;
      HIDWORD(v130) = 0;
    }
    LODWORD(v130) = 0;
  }
  uint64_t v34 = &v132;
  if (v95 != &v115)
  {
    if (v33 == v117)
    {
      uint64_t v35 = *((unsigned int *)v96 + 8);
      if (v35 >= v32)
      {
LABEL_216:
        if (v32) {
          memmove(*v95, v24, 8 * v32);
        }
        uint64_t v27 = v96;
      }
      else
      {
        if (*((_DWORD *)v96 + 9) < v32)
        {
          *((_DWORD *)v96 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v35) {
          memmove(*v95, v117, 8 * v35);
        }
        else {
          uint64_t v35 = 0;
        }
        if (v35 != v116) {
          memcpy((char *)*v95 + 8 * v35, (char *)v115 + 8 * v35, 8 * v116 - 8 * v35);
        }
      }
      *((_DWORD *)v27 + 8) = v32;
    }
    else
    {
      if (*v95 != v92)
      {
        free(*v95);
        uint64_t v33 = v115;
        LODWORD(v32) = v116;
      }
      v96[3] = v33;
      int v88 = HIDWORD(v116);
      *((_DWORD *)v96 + 8) = v32;
      *((_DWORD *)v96 + 9) = v88;
      unint64_t v115 = v117;
      HIDWORD(v116) = 0;
    }
    LODWORD(v116) = 0;
    uint64_t v33 = v115;
  }
  if (v33 != (unsigned char *)v24) {
    free(v33);
  }
  sub_1CD158F50(v34);
  unint64_t v115 = v117;
  uint64_t v116 = 0x800000000;
  uint64_t v36 = v138;
  BOOL v37 = v117;
  if (v138)
  {
    BOOL v37 = v137;
    if (v137 == v139)
    {
      if (v138 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v117, v139, 8 * v138);
      BOOL v37 = v115;
      LODWORD(v116) = v36;
    }
    else
    {
      unint64_t v115 = v137;
      uint64_t v116 = v138;
      uint64_t v137 = v139;
      HIDWORD(v138) = 0;
    }
    LODWORD(v138) = 0;
  }
  if (v12 != &v115)
  {
    if (v37 == v117)
    {
      uint64_t v38 = *((unsigned int *)v27 + 28);
      if (v38 >= v36)
      {
        if (v36) {
          memmove(*v12, v117, 8 * v36);
        }
        uint64_t v27 = v96;
        *((_DWORD *)v96 + 28) = v36;
      }
      else
      {
        if (*((_DWORD *)v27 + 29) < v36)
        {
          *((_DWORD *)v27 + 28) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v38) {
          memmove(*v12, v117, 8 * v38);
        }
        else {
          uint64_t v38 = 0;
        }
        if (v38 != v116) {
          memcpy((char *)*v12 + 8 * v38, (char *)v115 + 8 * v38, 8 * v116 - 8 * v38);
        }
        *((_DWORD *)v27 + 28) = v36;
      }
    }
    else
    {
      if (*v12 != v93)
      {
        free(*v12);
        BOOL v37 = v115;
        LODWORD(v36) = v116;
      }
      v27[13] = v37;
      int v89 = HIDWORD(v116);
      *((_DWORD *)v27 + 28) = v36;
      *((_DWORD *)v27 + 29) = v89;
      unint64_t v115 = v117;
      HIDWORD(v116) = 0;
    }
    LODWORD(v116) = 0;
    BOOL v37 = v115;
  }
  if (v37 != v117) {
    free(v37);
  }
  if (v100 == v99) {
    double v39 = (uint64_t *)((char *)&v101 + 4);
  }
  else {
    double v39 = &v101;
  }
  uint64_t v40 = *(unsigned int *)v39;
  if (v40)
  {
    uint64_t v48 = 8 * v40;
    uint64_t v41 = (unint64_t *)v100;
    while (*v41 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v41;
      v48 -= 8;
      if (!v48) {
        goto LABEL_87;
      }
    }
  }
  else
  {
    uint64_t v41 = (unint64_t *)v100;
  }
  uint64_t v42 = (unint64_t *)&v100[8 * v40];
  if (v41 == v42)
  {
LABEL_87:
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    goto LABEL_95;
  }
  unint64_t v43 = 0;
  uint64_t v44 = v41;
LABEL_80:
  unint64_t v45 = v43 + 1;
  uint64_t v46 = v44 + 1;
  while (v46 != v42)
  {
    unint64_t v47 = *v46++;
    if (v47 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v44 = v46 - 1;
      ++v43;
      goto LABEL_80;
    }
  }
  if (v43 >= 0x1FFFFFFFFFFFFFFFLL) {
LABEL_214:
  }
    abort();
  uint64_t v49 = (unint64_t *)operator new(8 * v45);
  uint64_t v51 = &v49[v45];
  unint64_t v52 = *v41;
  uint64_t v53 = v49;
LABEL_90:
  *uint64_t v53 = v52;
  unint64_t v54 = v41 + 1;
  while (v54 != v42)
  {
    unint64_t v55 = *v54++;
    unint64_t v52 = v55;
    if (v55 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      ++v53;
      uint64_t v41 = v54 - 1;
      goto LABEL_90;
    }
  }
  uint64_t v50 = v53 + 1;
LABEL_95:
  uint64_t v56 = (void *)v27[26];
  if (v56)
  {
    v27[27] = v56;
    operator delete(v56);
  }
  unint64_t v57 = 126 - 2 * __clz(v50 - v49);
  v27[26] = v49;
  v27[27] = v50;
  v27[28] = v51;
  if (v50 == v49) {
    uint64_t v58 = 0;
  }
  else {
    uint64_t v58 = v57;
  }
  sub_1CD159860((unint64_t)v49, v50, v58, 1);
  if (v137 != v139) {
    free(v137);
  }
  if ((v132 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v133.i64[0], 8);
  }
  if (v129 != v131) {
    free(v129);
  }
  if ((v124 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v125.i64[0], 8);
  }
  MEMORY[0x1D25D9CD0](v97[0], 8);
  if (v100 != v99) {
    free(v100);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  MEMORY[0x1D25D9CD0](v104[0], 8);
  sub_1CD456CB4(v108);
  if (v94) {
    operator delete(v94);
  }
}

BOOL sub_1CD155B60(BOOL result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(a2 + 80);
  if (v4)
  {
    int v5 = *(uint64_t **)(a2 + 72);
    uint64_t v6 = 8 * v4;
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v12 = v7;
      double result = sub_1CC911830(v3, &v12);
      v6 -= 8;
    }
    while (v6);
  }
  uint64_t v8 = *(unsigned int *)(a2 + 232);
  if (v8)
  {
    int v9 = *(uint64_t **)(a2 + 224);
    uint64_t v10 = 8 * v8;
    do
    {
      uint64_t v11 = *v9++;
      uint64_t v12 = v11;
      double result = sub_1CC911830(v3 + 152, &v12);
      v10 -= 8;
    }
    while (v10);
  }
  *(void *)(v3 + 304) += *(void *)(a2 + 304);
  return result;
}

void sub_1CD155C08(uint64_t a1, unint64_t a2, unint64_t **a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  v135[4] = *MEMORY[0x1E4F143B8];
  unint64_t v100 = a2;
  uint64_t v14 = *(void *)(a2 + 40);
  uint64_t v15 = *(void *)(a4 + 8);
  uint64_t v16 = *(unsigned int *)(a4 + 20);
  if (v15 != *(void *)a4)
  {
    unsigned int v20 = *(_DWORD *)(a4 + 16);
    goto LABEL_12;
  }
  if (!v16)
  {
LABEL_9:
    unsigned int v20 = *(_DWORD *)(a4 + 16);
    if (v16 < v20)
    {
      *(_DWORD *)(a4 + 20) = v16 + 1;
      *(void *)(v15 + 8 * v16) = v14;
      goto LABEL_33;
    }
LABEL_12:
    if (3 * v20 <= 4 * ((int)v16 - *(_DWORD *)(a4 + 24)))
    {
      if (v20 >= 0x40) {
        v20 *= 2;
      }
      else {
        unsigned int v20 = 128;
      }
    }
    else if (v20 - v16 >= v20 >> 3)
    {
      goto LABEL_14;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v20);
    unsigned int v20 = *(_DWORD *)(a4 + 16);
    uint64_t v15 = *(void *)(a4 + 8);
LABEL_14:
    unsigned int v21 = v20 - 1;
    unsigned int v22 = (v20 - 1) & ((v14 >> 4) ^ (v14 >> 9));
    BOOL v23 = (void *)(v15 + 8 * v22);
    uint64_t v24 = *v23;
    if (*v23 == -1)
    {
      long long v25 = 0;
LABEL_26:
      if (v25) {
        long long v29 = v25;
      }
      else {
        long long v29 = v23;
      }
      if (*v29 != v14)
      {
        if (*v29 == -2) {
          --*(_DWORD *)(a4 + 24);
        }
        else {
          ++*(_DWORD *)(a4 + 20);
        }
        void *v29 = v14;
      }
    }
    else
    {
      long long v25 = 0;
      int v26 = 1;
      while (v24 != v14)
      {
        if (v25) {
          BOOL v27 = 0;
        }
        else {
          BOOL v27 = v24 == -2;
        }
        if (v27) {
          long long v25 = v23;
        }
        unsigned int v28 = v22 + v26++;
        unsigned int v22 = v28 & v21;
        BOOL v23 = (void *)(v15 + 8 * (v28 & v21));
        uint64_t v24 = *v23;
        if (*v23 == -1) {
          goto LABEL_26;
        }
      }
    }
    goto LABEL_33;
  }
  BOOL v17 = 0;
  uint64_t v18 = 8 * v16;
  uint64_t v19 = *(void **)(a4 + 8);
  while (*v19 != v14)
  {
    if (*v19 == -2) {
      BOOL v17 = v19;
    }
    ++v19;
    v18 -= 8;
    if (!v18)
    {
      if (!v17) {
        goto LABEL_9;
      }
      *BOOL v17 = v14;
      --*(_DWORD *)(a4 + 24);
      break;
    }
  }
LABEL_33:
  uint64_t v97 = a7;
  int v98 = a3;
  if (a2 && *(unsigned char *)(a2 + 16) == 83)
  {
    int v30 = *(_DWORD *)(a2 + 20);
    if ((v30 & 0x40000000) != 0)
    {
      unint64_t v32 = *(void *)(a2 - 8);
      uint64_t v31 = v30 & 0x7FFFFFF;
      if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 0) {
        goto LABEL_79;
      }
    }
    else
    {
      uint64_t v31 = v30 & 0x7FFFFFF;
      unint64_t v32 = a2 - 32 * v31;
      if ((v30 & 0x7FFFFFF) == 0) {
        goto LABEL_79;
      }
    }
    uint64_t v34 = *(void **)a4;
    uint64_t v33 = *(void **)(a4 + 8);
    unsigned int v35 = *(_DWORD *)(a4 + 16);
    unsigned int v36 = *(_DWORD *)(a4 + 20);
    BOOL v37 = (uint64_t *)(v32 + 32 * *(unsigned int *)(a2 + 60));
    uint64_t v38 = &v37[v31];
    while (1)
    {
      uint64_t v39 = *v37;
      if (v33 != v34) {
        break;
      }
      if (v36)
      {
        uint64_t v40 = 0;
        uint64_t v41 = 8 * v36;
        uint64_t v42 = v34;
        while (*v42 != v39)
        {
          if (*v42 == -2) {
            uint64_t v40 = v42;
          }
          ++v42;
          v41 -= 8;
          if (!v41)
          {
            if (!v40) {
              goto LABEL_48;
            }
            *uint64_t v40 = v39;
            --*(_DWORD *)(a4 + 24);
            goto LABEL_71;
          }
        }
        goto LABEL_71;
      }
LABEL_48:
      if (v35 <= v36) {
        break;
      }
      *(_DWORD *)(a4 + 20) = v36 + 1;
      v34[v36] = v39;
LABEL_71:
      uint64_t v34 = *(void **)a4;
      uint64_t v33 = *(void **)(a4 + 8);
      unsigned int v35 = *(_DWORD *)(a4 + 16);
      unsigned int v36 = *(_DWORD *)(a4 + 20);
      if (++v37 == v38) {
        goto LABEL_79;
      }
    }
    if (3 * v35 <= 4 * (v36 - *(_DWORD *)(a4 + 24)))
    {
      if (v35 >= 0x40) {
        v35 *= 2;
      }
      else {
        unsigned int v35 = 128;
      }
    }
    else if (v35 - v36 >= v35 >> 3)
    {
      goto LABEL_52;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v35);
    unsigned int v35 = *(_DWORD *)(a4 + 16);
    uint64_t v33 = *(void **)(a4 + 8);
LABEL_52:
    unsigned int v43 = v35 - 1;
    unsigned int v44 = (v35 - 1) & ((v39 >> 4) ^ (v39 >> 9));
    unint64_t v45 = &v33[v44];
    uint64_t v46 = *v45;
    if (*v45 == -1)
    {
      unint64_t v47 = 0;
LABEL_64:
      if (v47) {
        uint64_t v51 = v47;
      }
      else {
        uint64_t v51 = v45;
      }
      if (*v51 != v39)
      {
        if (*v51 == -2) {
          --*(_DWORD *)(a4 + 24);
        }
        else {
          ++*(_DWORD *)(a4 + 20);
        }
        *uint64_t v51 = v39;
      }
    }
    else
    {
      unint64_t v47 = 0;
      int v48 = 1;
      while (v46 != v39)
      {
        if (v47) {
          BOOL v49 = 0;
        }
        else {
          BOOL v49 = v46 == -2;
        }
        if (v49) {
          unint64_t v47 = v45;
        }
        unsigned int v50 = v44 + v48++;
        unsigned int v44 = v50 & v43;
        unint64_t v45 = &v33[v50 & v43];
        uint64_t v46 = *v45;
        if (*v45 == -1) {
          goto LABEL_64;
        }
      }
    }
    goto LABEL_71;
  }
LABEL_79:
  unint64_t v52 = *a3;
  uint64_t v53 = a3[1];
  if (v53 != *a3)
  {
    unint64_t v54 = v53 - *a3;
    do
    {
      unint64_t v55 = v54 >> 1;
      uint64_t v56 = &v52[v54 >> 1];
      unint64_t v58 = *v56;
      unint64_t v57 = v56 + 1;
      v54 += ~(v54 >> 1);
      if (v58 < v100) {
        unint64_t v52 = v57;
      }
      else {
        unint64_t v54 = v55;
      }
    }
    while (v54);
  }
  if (v52 == v53 || v100 < *v52)
  {
    uint64_t v102 = 1;
    int64x2_t v103 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    int64x2_t v104 = v103;
    int64x2_t v105 = v103;
    int64x2_t v106 = v103;
    uint64_t v107 = v109;
    uint64_t v108 = 0x800000000;
    uint64_t v110 = 1;
    int64x2_t v111 = v103;
    int64x2_t v112 = v103;
    int64x2_t v113 = v103;
    int64x2_t v114 = v103;
    unint64_t v115 = v117;
    uint64_t v116 = 0x800000000;
    unint64_t v118 = 0;
    *(_DWORD *)sub_1CC90FA3C(a5, (uint64_t *)&v100) = 1;
    uint64_t v59 = v100;
    int v60 = *(_DWORD *)(v100 + 20);
    if ((v60 & 0x40000000) != 0)
    {
      uint64_t v62 = *(uint64_t ***)(v100 - 8);
      uint64_t v61 = v60 & 0x7FFFFFF;
      if (!v61) {
        goto LABEL_122;
      }
    }
    else
    {
      uint64_t v61 = v60 & 0x7FFFFFF;
      uint64_t v62 = (uint64_t **)(v100 - 32 * v61);
      if (!v61)
      {
LABEL_122:
        if (sub_1CD158E10(*(void *)a5, *(_DWORD *)(a5 + 16), v59) == 3)
        {
          sub_1CD158D94(a1, v59);
LABEL_143:
          if (v115 != v117) {
            free(v115);
          }
          if ((v110 & 1) == 0) {
            MEMORY[0x1D25D9CD0](v111.i64[0], 8);
          }
          if (v107 != v109) {
            free(v107);
          }
          if ((v102 & 1) == 0) {
            MEMORY[0x1D25D9CD0](v103.i64[0], 8);
          }
          return;
        }
        sub_1CC27C13C(a6, &v100);
        int v81 = (uint64_t *)v100;
        uint64_t v82 = *(void *)(*(void *)(*(void *)(v100 + 40) + 56) + 40) + 272;
        LOWORD(v120) = 0;
        __int16 v121 = 0;
        int v122 = v124;
        long long v123 = xmmword_1CD96EEC0;
        v124[1] = &v126;
        int64x2_t v125 = (void *)0x1000000000;
        uint64_t v129 = 0;
        uint64_t v130 = 0;
        uint64_t v131 = 0;
        uint64_t v132 = v134;
        uint64_t v133 = 0x800000000;
        v134[16] = 0;
        v134[17] = v135;
        v134[18] = 0x800000000;
        sub_1CB94E404((uint64_t)&v119, v82);
        unint64_t v83 = (llvm::Type *)*v81;
        unsigned int v84 = *(unsigned __int8 *)(*v81 + 8);
        if (v84 <= 0x11)
        {
          if (((1 << v84) & 0xAC7F) != 0)
          {
LABEL_126:
            unint64_t v85 = (unint64_t)(sub_1CB83544C((uint64_t)&v119, (uint64_t)v83) + 7) >> 3;
            BOOL v87 = v86 == 1;
            char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)&v119, v83, 1);
            unint64_t v90 = ((1 << Alignment) + v85 - 1) & -(1 << Alignment);
            if (v87) {
            if (v90 < v118)
            }
            {
              sub_1CD158F50(&v110);
              LODWORD(v116) = 0;
              uint64_t v101 = (uint64_t)v81;
              sub_1CC911830((uint64_t)&v110, &v101);
              unint64_t v118 = v90;
            }
            goto LABEL_130;
          }
          if (((1 << v84) & 0x30000) != 0) {
            goto LABEL_173;
          }
        }
        if ((v84 & 0xFE) == 0x12 || v84 == 21)
        {
LABEL_173:
          if (llvm::Type::isSizedDerivedType(*v81, 0)) {
            goto LABEL_126;
          }
        }
LABEL_130:
        llvm::DataLayout::~DataLayout((llvm::DataLayout *)&v119);
        *(void *)a1 = 1;
        int64x2_t v91 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        *(int64x2_t *)(a1 + 8) = v91;
        *(int64x2_t *)(a1 + 24) = v91;
        *(int64x2_t *)(a1 + 40) = v91;
        int64x2_t v99 = v91;
        *(int64x2_t *)(a1 + 56) = v91;
        sub_1CCDA9018((unsigned int *)a1, (unsigned int *)&v102);
        *(void *)(a1 + 72) = a1 + 88;
        *(void *)(a1 + 80) = 0x800000000;
        int v92 = v108;
        if (v108 && &v102 != (uint64_t *)a1)
        {
          if (v107 == v109)
          {
            if (v108 >= 9) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy((void *)(a1 + 88), v109, 8 * v108);
            *(_DWORD *)(a1 + 80) = v92;
          }
          else
          {
            *(void *)(a1 + 72) = v107;
            int v94 = HIDWORD(v108);
            *(_DWORD *)(a1 + 80) = v92;
            *(_DWORD *)(a1 + 84) = v94;
            uint64_t v107 = v109;
            HIDWORD(v108) = 0;
          }
          LODWORD(v108) = 0;
        }
        *(void *)(a1 + 152) = 1;
        *(int64x2_t *)(a1 + 160) = v99;
        *(int64x2_t *)(a1 + 176) = v99;
        *(int64x2_t *)(a1 + 192) = v99;
        *(int64x2_t *)(a1 + 208) = v99;
        sub_1CCDA9018((unsigned int *)(a1 + 152), (unsigned int *)&v110);
        *(void *)(a1 + 224) = a1 + 240;
        *(void *)(a1 + 232) = 0x800000000;
        int v93 = v116;
        if (v116 && &v102 != (uint64_t *)a1)
        {
          if (v115 == v117)
          {
            if (v116 >= 9) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy((void *)(a1 + 240), v117, 8 * v116);
            *(_DWORD *)(a1 + 232) = v93;
          }
          else
          {
            *(void *)(a1 + 224) = v115;
            int v95 = HIDWORD(v116);
            *(_DWORD *)(a1 + 232) = v93;
            *(_DWORD *)(a1 + 236) = v95;
            unint64_t v115 = v117;
            HIDWORD(v116) = 0;
          }
          LODWORD(v116) = 0;
        }
        *(void *)(a1 + 304) = v118;
        goto LABEL_143;
      }
    }
    uint64_t v96 = a1;
    uint64_t v63 = 32 * v61;
    unsigned int v64 = v97;
    uint64_t v65 = v98;
    while (1)
    {
      int v66 = *v62;
      unsigned int v67 = *((unsigned __int8 *)*v62 + 16);
      if (v67 <= 0x1B) {
        uint64_t v68 = 0;
      }
      else {
        uint64_t v68 = (uint64_t)*v62;
      }
      uint64_t v101 = v68;
      if (v68)
      {
        int v69 = sub_1CD158E10(*(void *)a5, *(_DWORD *)(a5 + 16), v68);
        if (v69 == 1)
        {
          unsigned int v70 = (_DWORD *)sub_1CC90FA3C(a5, &v101);
          int v71 = 3;
LABEL_113:
          _DWORD *v70 = v71;
          goto LABEL_114;
        }
        if (!v69)
        {
          sub_1CD155C08(&v119, v68, v65, a4, a5, a6, v64);
          sub_1CD155B60((BOOL)&v102, (uint64_t)&v119);
          if (v131 != &v133) {
            free(v131);
          }
          if ((v127[64] & 1) == 0) {
            MEMORY[0x1D25D9CD0](v128, 8);
          }
          if (v125 != v127) {
            free(v125);
          }
          if ((v119 & 1) == 0) {
            MEMORY[0x1D25D9CD0](v120, 8);
          }
          unsigned int v70 = (_DWORD *)sub_1CC90FA3C(a5, &v101);
          int v71 = 2;
          goto LABEL_113;
        }
      }
      else
      {
        if (v67 == 22)
        {
          BOOL v72 = *(unsigned __int8 *)(v100 + 16) - 29 >= 0xB;
LABEL_109:
          if (v72) {
            sub_1CD158E74((uint64_t)&v102, (uint64_t)v66);
          }
          goto LABEL_114;
        }
        if (v67 > 3)
        {
          BOOL v72 = v67 >= 0x15;
          if (v67 == 21)
          {
            uint64_t v73 = a6;
            uint64_t v119 = v66;
            sub_1CC911830((uint64_t)&v102, (uint64_t *)&v119);
            uint64_t v119 = v66;
            sub_1CC911830((uint64_t)&v110, (uint64_t *)&v119);
            int v74 = (llvm::DataLayout *)(*(void *)(v66[3] + 40) + 272);
            BOOL v75 = (llvm::Type *)*v66;
            uint64_t v76 = sub_1CB83544C((uint64_t)v74, *v66);
            BOOL v78 = v77 == 1;
            char v80 = llvm::DataLayout::getAlignment(v74, v75, 1);
            if (v78) {
            v118 += ((1 << v80) + ((unint64_t)(v76 + 7) >> 3) - 1) & -(1 << v80);
            }
            a6 = v73;
            unsigned int v64 = v97;
            uint64_t v65 = v98;
            goto LABEL_114;
          }
          goto LABEL_109;
        }
        uint64_t v119 = v66;
        sub_1CBF5F714(v64, &v119);
      }
LABEL_114:
      v62 += 4;
      v63 -= 32;
      if (!v63)
      {
        uint64_t v59 = v100;
        a1 = v96;
        goto LABEL_122;
      }
    }
  }

  sub_1CD158D94(a1, v100);
}

void llvm::ComputationExtractor::getArgAndValueDeps(llvm::ComputationExtractor *this@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *((unsigned int *)this + 8);
  if (v3)
  {
    uint64_t v4 = 0;
    int v5 = (uint64_t *)*((void *)this + 3);
    uint64_t v6 = &v5[v3];
    do
    {
      uint64_t v7 = *v5;
      unint64_t v8 = (unint64_t)a2[2];
      if ((unint64_t)v4 >= v8)
      {
        uint64_t v10 = *a2;
        uint64_t v11 = (v4 - *a2) >> 3;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61) {
          abort();
        }
        uint64_t v13 = v8 - (void)v10;
        if (v13 >> 2 > v12) {
          unint64_t v12 = v13 >> 2;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          if (v14 >> 61) {
            sub_1CB833614();
          }
          uint64_t v15 = (char *)operator new(8 * v14);
        }
        else
        {
          uint64_t v15 = 0;
        }
        uint64_t v16 = &v15[8 * v11];
        *(void *)uint64_t v16 = v7;
        int v9 = v16 + 8;
        if (v4 != v10)
        {
          do
          {
            uint64_t v17 = *((void *)v4 - 1);
            v4 -= 8;
            *((void *)v16 - 1) = v17;
            v16 -= 8;
          }
          while (v4 != v10);
          uint64_t v4 = *a2;
        }
        *a2 = v16;
        a2[1] = v9;
        a2[2] = &v15[8 * v14];
        if (v4) {
          operator delete(v4);
        }
      }
      else
      {
        *(void *)uint64_t v4 = v7;
        int v9 = v4 + 8;
      }
      a2[1] = v9;
      ++v5;
      uint64_t v4 = v9;
    }
    while (v5 != v6);
  }
}

void llvm::ComputationExtractor::getGlobalDeps(llvm::ComputationExtractor *this@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (uint64_t *)*((void *)this + 23);
  uint64_t v3 = (uint64_t *)*((void *)this + 24);
  if (v2 != v3)
  {
    int v5 = 0;
    do
    {
      uint64_t v6 = *v2;
      unint64_t v7 = (unint64_t)a2[2];
      if ((unint64_t)v5 >= v7)
      {
        int v9 = *a2;
        uint64_t v10 = (v5 - *a2) >> 3;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61) {
          abort();
        }
        uint64_t v12 = v7 - (void)v9;
        if (v12 >> 2 > v11) {
          unint64_t v11 = v12 >> 2;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          if (v13 >> 61) {
            sub_1CB833614();
          }
          unint64_t v14 = (char *)operator new(8 * v13);
        }
        else
        {
          unint64_t v14 = 0;
        }
        uint64_t v15 = &v14[8 * v10];
        *(void *)uint64_t v15 = v6;
        unint64_t v8 = v15 + 8;
        if (v5 != v9)
        {
          do
          {
            uint64_t v16 = *((void *)v5 - 1);
            v5 -= 8;
            *((void *)v15 - 1) = v16;
            v15 -= 8;
          }
          while (v5 != v9);
          int v5 = *a2;
        }
        *a2 = v15;
        a2[1] = v8;
        a2[2] = &v14[8 * v13];
        if (v5) {
          operator delete(v5);
        }
      }
      else
      {
        *(void *)int v5 = v6;
        unint64_t v8 = v5 + 8;
      }
      a2[1] = v8;
      ++v2;
      int v5 = v8;
    }
    while (v2 != v3);
  }
}

void llvm::ComputationExtractor::getNarrowestDeps(llvm::ComputationExtractor *this@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *((unsigned int *)this + 28);
  if (v3)
  {
    uint64_t v4 = 0;
    int v5 = (uint64_t *)*((void *)this + 13);
    uint64_t v6 = &v5[v3];
    do
    {
      uint64_t v7 = *v5;
      unint64_t v8 = (unint64_t)a2[2];
      if ((unint64_t)v4 >= v8)
      {
        uint64_t v10 = *a2;
        uint64_t v11 = (v4 - *a2) >> 3;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61) {
          abort();
        }
        uint64_t v13 = v8 - (void)v10;
        if (v13 >> 2 > v12) {
          unint64_t v12 = v13 >> 2;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          if (v14 >> 61) {
            sub_1CB833614();
          }
          uint64_t v15 = (char *)operator new(8 * v14);
        }
        else
        {
          uint64_t v15 = 0;
        }
        uint64_t v16 = &v15[8 * v11];
        *(void *)uint64_t v16 = v7;
        int v9 = v16 + 8;
        if (v4 != v10)
        {
          do
          {
            uint64_t v17 = *((void *)v4 - 1);
            v4 -= 8;
            *((void *)v16 - 1) = v17;
            v16 -= 8;
          }
          while (v4 != v10);
          uint64_t v4 = *a2;
        }
        *a2 = v16;
        a2[1] = v9;
        a2[2] = &v15[8 * v14];
        if (v4) {
          operator delete(v4);
        }
      }
      else
      {
        *(void *)uint64_t v4 = v7;
        int v9 = v4 + 8;
      }
      a2[1] = v9;
      ++v5;
      uint64_t v4 = v9;
    }
    while (v5 != v6);
  }
}

void llvm::ComputationExtractor::extractFunction(uint64_t a1, uint64_t **a2, void **a3, uint64_t a4, const char *a5, uint64_t a6)
{
  v284[16] = *MEMORY[0x1E4F143B8];
  uint64_t v247 = *a2;
  uint64_t v282 = (unsigned int *)v284;
  uint64_t v283 = 0x1000000000;
  uint64_t v11 = *(uint64_t *****)a1;
  unint64_t v12 = *(uint64_t *****)(a1 + 8);
  if ((unint64_t)v12 - *(void *)a1 < 9)
  {
    uint64_t v15 = **v11;
  }
  else
  {
    if (v11 == v12)
    {
      unsigned int v13 = 0;
      unint64_t v14 = (unsigned int *)v284;
    }
    else
    {
      unsigned int v13 = 0;
      do
      {
        if (v13 >= HIDWORD(v283)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)&v282[2 * v13] = **v11;
        unsigned int v13 = v283 + 1;
        LODWORD(v283) = v283 + 1;
        ++v11;
      }
      while (v11 != v12);
      unint64_t v14 = v282;
    }
    uint64_t v15 = (uint64_t **)llvm::StructType::get(v247, (uint64_t)v14, v13, 0);
  }
  unsigned int v16 = 0;
  LODWORD(v283) = 0;
  int v245 = a4;
  if (a4)
  {
    unsigned int v16 = 0;
    uint64_t v88 = 8 * a4;
    int v89 = a3;
    do
    {
      if (v16 >= HIDWORD(v283)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)&v282[2 * v16] = **v89;
      unsigned int v16 = v283 + 1;
      LODWORD(v283) = v283 + 1;
      ++v89;
      v88 -= 8;
    }
    while (v88);
  }
  uint64_t v17 = (llvm::PointerType *)llvm::FunctionType::get(v15, (uint64_t)v282, v16, 0);
  uint64_t v18 = "extracted_function";
  if (a6) {
    uint64_t v18 = a5;
  }
  uint64_t v19 = 18;
  v265[8] = 261;
  if (a6) {
    uint64_t v19 = a6;
  }
  int v263 = v18;
  uint64_t v264 = v19;
  unsigned int v20 = operator new(0x80uLL);
  v20[7] = v20[7] & 0x38000000 | 0x40000000;
  uint64_t v250 = v20;
  *(void *)unsigned int v20 = 0;
  uint64_t v248 = (llvm::Function *)(v20 + 2);
  llvm::Function::Function((unint64_t *)v20 + 1, v17, 7, (llvm::Type *)0xFFFFFFFFLL, &v263, (unint64_t)a2);
  uint64_t v266 = &v268;
  uint64_t v267 = 0x200000000;
  uint64_t v271 = v247;
  unsigned int v272 = &v280;
  BOOL v273 = &v281;
  uint64_t v274 = 0;
  int v275 = 0;
  __int16 v276 = 512;
  char v277 = 7;
  uint64_t v269 = 0;
  unint64_t v270 = 0;
  uint64_t v278 = 0;
  uint64_t v279 = 0;
  BOOL v280 = &unk_1F2616E88;
  unint64_t v281 = &unk_1F2617008;
  sub_1CC7AF3E0(v255, (*(void *)(a1 + 240) - *(void *)(a1 + 232)) >> 3);
  LOBYTE(v256) = 0;
  char v257 = 0;
  int v263 = (const char *)v265;
  uint64_t v264 = 0x1000000000;
  if (*(void *)(a1 + 240) - *(void *)(a1 + 232) > 0x80uLL) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v254 = 0;
  uint64_t v21 = *(void *)(a1 + 208);
  if (v21 != *(void *)(a1 + 216))
  {
    uint64_t v254 = *(void *)(*(void *)v21 + 56);
    for (uint64_t i = *(void *)(v254 + 80); i != v254 + 72; uint64_t i = *(void *)(i + 8))
    {
      if (i) {
        BOOL v224 = (uint64_t ***)(i - 24);
      }
      else {
        BOOL v224 = 0;
      }
      int v225 = *(void **)(a1 + 208);
      int v226 = *(void **)(a1 + 216);
      if (v226 != v225)
      {
        unint64_t v227 = v226 - v225;
        do
        {
          unint64_t v228 = v227 >> 1;
          double v229 = &v225[v227 >> 1];
          unint64_t v231 = *v229;
          unint64_t v230 = v229 + 1;
          v227 += ~(v227 >> 1);
          if (v231 < (unint64_t)v224) {
            int v225 = v230;
          }
          else {
            unint64_t v227 = v228;
          }
        }
        while (v227);
      }
      if (v225 != v226 && (unint64_t)v224 >= *v225)
      {
        if ((*((unsigned char *)v224 + 23) & 0x10) != 0)
        {
          uint64_t v232 = ***v224;
          uint64_t v233 = *(void *)(v232 + 152);
          uint64_t v234 = *(unsigned int *)(v232 + 168);
          if (v234)
          {
            LODWORD(v235) = (v234 - 1) & ((v224 >> 4) ^ (v224 >> 9));
            unint64_t v236 = (uint64_t ****)(v233 + 16 * v235);
            uint64_t v237 = *v236;
            if (*v236 != v224)
            {
              int v238 = 1;
              do
              {
                if (v237 == (uint64_t ***)-4096) {
                  goto LABEL_368;
                }
                int v239 = v235 + v238++;
                uint64_t v235 = v239 & (v234 - 1);
                uint64_t v237 = *(uint64_t ****)(v233 + 16 * v235);
              }
              while (v237 != v224);
              unint64_t v236 = (uint64_t ****)(v233 + 16 * v235);
            }
          }
          else
          {
LABEL_368:
            unint64_t v236 = (uint64_t ****)(v233 + 16 * v234);
          }
          int v240 = v236[1];
          uint64_t v243 = (uint64_t)*v240;
          int v242 = (char *)(v240 + 2);
          uint64_t v241 = v243;
        }
        else
        {
          uint64_t v241 = 0;
          int v242 = &byte_1CFBCE98E;
        }
        LOWORD(v262) = 261;
        uint64_t v258 = (char **)v242;
        uint64_t v259 = v241;
        operator new();
      }
    }
  }
  if (v245)
  {
    uint64_t v90 = 0;
    do
    {
      if (*((_WORD *)v250 + 13)) {
        llvm::Function::BuildLazyArguments(v248);
      }
      uint64_t v91 = *((void *)v250 + 12);
      int v92 = (int32x2_t ****)a3[v90];
      uint64_t v259 = 2;
      BOOL v260 = 0;
      BOOL v261 = v92;
      if (v92 != (int32x2_t ****)-8192 && v92 != (int32x2_t ****)-4096 && v92 != 0) {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v259);
      }
      uint64_t v258 = (char **)&unk_1F2615EC8;
      uint64_t v262 = v255;
      int v94 = sub_1CC4CFF80((uint64_t)v255, &v258);
      if (v261 != (int32x2_t ****)-8192 && v261 != (int32x2_t ****)-4096 && v261)
      {
        unint64_t v95 = v259 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v259 & 0xFFFFFFFFFFFFFFF8) = v260;
        if (v260)
        {
          *BOOL v260 = *v260 & 7 | v95;
        }
        else
        {
          uint64_t v96 = v261;
          uint64_t v97 = ***v261;
          unint64_t v98 = (unint64_t)v97[303];
          if (v98 <= v95)
          {
            uint64_t v99 = v97[305].u32[0];
            if (v98 + 16 * v99 > v95)
            {
              unsigned int v100 = v99 - 1;
              LODWORD(v101) = v100 & ((v261 >> 4) ^ (v261 >> 9));
              uint64_t v102 = (int32x2_t *****)(v98 + 16 * v101);
              int64x2_t v103 = *v102;
              if (v261 == *v102)
              {
LABEL_157:
                *uint64_t v102 = (int32x2_t ****)-8192;
                v97[304] = vadd_s32(v97[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v96 = v261;
              }
              else
              {
                int v104 = 1;
                while (v103 != (int32x2_t ****)-4096)
                {
                  int v105 = v101 + v104++;
                  uint64_t v101 = v105 & v100;
                  int64x2_t v103 = *(int32x2_t *****)(v98 + 16 * v101);
                  if (v261 == v103)
                  {
                    uint64_t v102 = (int32x2_t *****)(v98 + 16 * v101);
                    goto LABEL_157;
                  }
                }
              }
              *((unsigned char *)v96 + 17) &= ~1u;
            }
          }
        }
      }
      uint64_t v106 = v91 + 40 * v90;
      uint64_t v107 = v94[7];
      if (v107 != v106)
      {
        if (v107 && v107 != -8192 && v107 != -4096)
        {
          unint64_t v108 = v94[5] & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v108 = v94[6];
          int v109 = (unint64_t *)v94[6];
          if (v109)
          {
            *int v109 = *v109 & 7 | v108;
          }
          else
          {
            uint64_t v110 = v94[7];
            int64x2_t v111 = ***(int32x2_t ****)v110;
            unint64_t v112 = (unint64_t)v111[303];
            if (v112 <= v108)
            {
              uint64_t v113 = v111[305].u32[0];
              if (v112 + 16 * v113 > v108)
              {
                unsigned int v114 = v113 - 1;
                LODWORD(v115) = v114 & ((v110 >> 4) ^ (v110 >> 9));
                uint64_t v116 = (uint64_t *)(v112 + 16 * v115);
                uint64_t v117 = *v116;
                if (v110 == *v116)
                {
LABEL_178:
                  *uint64_t v116 = -8192;
                  v111[304] = vadd_s32(v111[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v110 = v94[7];
                }
                else
                {
                  int v118 = 1;
                  while (v117 != -4096)
                  {
                    int v119 = v115 + v118++;
                    uint64_t v115 = v119 & v114;
                    uint64_t v117 = *(void *)(v112 + 16 * v115);
                    if (v110 == v117)
                    {
                      uint64_t v116 = (uint64_t *)(v112 + 16 * v115);
                      goto LABEL_178;
                    }
                  }
                }
                *(unsigned char *)(v110 + 17) &= ~1u;
              }
            }
          }
        }
        v94[7] = v106;
        if (v106 != -8192 && v106 != -4096 && v106) {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v94 + 5));
        }
      }
      ++v90;
    }
    while (v90 != v245);
  }
  BOOL v23 = *(uint64_t *****)a1;
  uint64_t v24 = *(uint64_t *****)(a1 + 8);
  if (*(uint64_t *****)a1 != v24)
  {
    do
    {
      uint64_t v120 = *v23;
      if (*((unsigned __int8 *)*v23 + 16) <= 0x14u)
      {
        uint64_t v259 = 2;
        BOOL v260 = 0;
        BOOL v261 = (int32x2_t ****)v120;
        if (v120 != (uint64_t ***)-8192 && v120 != (uint64_t ***)-4096 && v120 != 0) {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v259);
        }
        uint64_t v258 = (char **)&unk_1F2615EC8;
        uint64_t v262 = v255;
        int v122 = sub_1CC4CFF80((uint64_t)v255, &v258);
        if (v261 != (int32x2_t ****)-8192 && v261 != (int32x2_t ****)-4096 && v261)
        {
          unint64_t v123 = v259 & 0xFFFFFFFFFFFFFFF8;
          *(void *)(v259 & 0xFFFFFFFFFFFFFFF8) = v260;
          if (v260)
          {
            *BOOL v260 = *v260 & 7 | v123;
          }
          else
          {
            uint64_t v124 = v261;
            int64x2_t v125 = ***v261;
            unint64_t v126 = (unint64_t)v125[303];
            if (v126 <= v123)
            {
              uint64_t v127 = v125[305].u32[0];
              if (v126 + 16 * v127 > v123)
              {
                unsigned int v128 = v127 - 1;
                LODWORD(v129) = v128 & ((v261 >> 4) ^ (v261 >> 9));
                uint64_t v130 = (int32x2_t *****)(v126 + 16 * v129);
                uint64_t v131 = *v130;
                if (v261 == *v130)
                {
LABEL_199:
                  void *v130 = (int32x2_t ****)-8192;
                  v125[304] = vadd_s32(v125[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v124 = v261;
                }
                else
                {
                  int v132 = 1;
                  while (v131 != (int32x2_t ****)-4096)
                  {
                    int v133 = v129 + v132++;
                    uint64_t v129 = v133 & v128;
                    uint64_t v131 = *(int32x2_t *****)(v126 + 16 * v129);
                    if (v261 == v131)
                    {
                      uint64_t v130 = (int32x2_t *****)(v126 + 16 * v129);
                      goto LABEL_199;
                    }
                  }
                }
                *((unsigned char *)v124 + 17) &= ~1u;
              }
            }
          }
        }
        int64x2_t v134 = (uint64_t ***)v122[7];
        if (v134 != v120)
        {
          if (v134 && v134 != (uint64_t ***)-8192 && v134 != (uint64_t ***)-4096)
          {
            unint64_t v135 = v122[5] & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v135 = v122[6];
            int64x2_t v136 = (unint64_t *)v122[6];
            if (v136)
            {
              unint64_t *v136 = *v136 & 7 | v135;
            }
            else
            {
              uint64_t v137 = v122[7];
              uint64_t v138 = ***(int32x2_t ****)v137;
              unint64_t v139 = (unint64_t)v138[303];
              if (v139 <= v135)
              {
                uint64_t v140 = v138[305].u32[0];
                if (v139 + 16 * v140 > v135)
                {
                  unsigned int v141 = v140 - 1;
                  LODWORD(v142) = v141 & ((v137 >> 4) ^ (v137 >> 9));
                  unint64_t v143 = (uint64_t *)(v139 + 16 * v142);
                  uint64_t v144 = *v143;
                  if (v137 == *v143)
                  {
LABEL_220:
                    *unint64_t v143 = -8192;
                    v138[304] = vadd_s32(v138[304], (int32x2_t)0x1FFFFFFFFLL);
                    uint64_t v137 = v122[7];
                  }
                  else
                  {
                    int v145 = 1;
                    while (v144 != -4096)
                    {
                      int v146 = v142 + v145++;
                      uint64_t v142 = v146 & v141;
                      uint64_t v144 = *(void *)(v139 + 16 * v142);
                      if (v137 == v144)
                      {
                        unint64_t v143 = (uint64_t *)(v139 + 16 * v142);
                        goto LABEL_220;
                      }
                    }
                  }
                  *(unsigned char *)(v137 + 17) &= ~1u;
                }
              }
            }
          }
          v122[7] = v120;
          if (v120 != (uint64_t ***)-8192 && v120 != (uint64_t ***)-4096 && v120) {
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v122 + 5));
          }
        }
      }
      ++v23;
    }
    while (v23 != v24);
  }
  long long v25 = *(llvm::Instruction ***)(a1 + 232);
  if (v25 != *(llvm::Instruction ***)(a1 + 240))
  {
    unint64_t v147 = *(llvm::Instruction ***)(a1 + 240);
    do
    {
      uint64_t v148 = *v25;
      uint64_t v149 = (int32x2_t ****)*((void *)*v25 + 5);
      uint64_t v259 = 2;
      BOOL v260 = 0;
      BOOL v261 = v149;
      if (v149 != (int32x2_t ****)-8192 && v149 != (int32x2_t ****)-4096 && v149 != 0) {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v259);
      }
      uint64_t v258 = (char **)&unk_1F2615EC8;
      uint64_t v262 = v255;
      uint64_t v151 = sub_1CC4CFF80((uint64_t)v255, &v258);
      if (v261 != (int32x2_t ****)-8192 && v261 != (int32x2_t ****)-4096 && v261 != 0)
      {
        unint64_t v153 = v259 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v259 & 0xFFFFFFFFFFFFFFF8) = v260;
        if (v260)
        {
          *BOOL v260 = *v260 & 7 | v153;
        }
        else
        {
          uint64_t v154 = v261;
          unint64_t v155 = ***v261;
          unint64_t v156 = (unint64_t)v155[303];
          if (v156 <= v153)
          {
            uint64_t v157 = v155[305].u32[0];
            if (v156 + 16 * v157 > v153)
            {
              unsigned int v158 = v157 - 1;
              LODWORD(v159) = v158 & ((v261 >> 4) ^ (v261 >> 9));
              uint64_t v160 = (int32x2_t *****)(v156 + 16 * v159);
              unint64_t v161 = *v160;
              if (v261 == *v160)
              {
LABEL_243:
                *uint64_t v160 = (int32x2_t ****)-8192;
                v155[304] = vadd_s32(v155[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v154 = v261;
              }
              else
              {
                int v162 = 1;
                while (v161 != (int32x2_t ****)-4096)
                {
                  int v163 = v159 + v162++;
                  uint64_t v159 = v163 & v158;
                  unint64_t v161 = *(int32x2_t *****)(v156 + 16 * v159);
                  if (v261 == v161)
                  {
                    uint64_t v160 = (int32x2_t *****)(v156 + 16 * v159);
                    goto LABEL_243;
                  }
                }
              }
              *((unsigned char *)v154 + 17) &= ~1u;
            }
          }
        }
      }
      uint64_t v164 = v151[7];
      uint64_t v167 = *(void **)(v164 + 40);
      uint64_t v165 = (void *)(v164 + 40);
      unint64_t v166 = v167;
      if (v167 == v165
        || (v166 ? (uint64_t v168 = v166 - 3) : (uint64_t v168 = 0), *((unsigned __int8 *)v168 + 16) - 29 > 0xA))
      {
        uint64_t v269 = v151[7];
        unint64_t v270 = v165;
      }
      else
      {
        uint64_t v269 = v168[5];
        unint64_t v270 = v168 + 3;
        uint64_t v169 = (char *)v168[6];
        unsigned int v251 = v169;
        if (v169)
        {
          llvm::MetadataTracking::track((uint64_t)&v251, (unsigned __int8 *)v169, 2);
          long long v170 = v251;
        }
        else
        {
          long long v170 = 0;
        }
        sub_1CB8461A4((uint64_t)&v266, 0, (uint64_t)v170);
        if (!v251) {
          goto LABEL_261;
        }
        int v171 = *v251;
        if ((v171 - 4) > 0x1E)
        {
          if ((v171 - 3) >= 0xFFFFFFFE) {
            uint64_t v223 = v251;
          }
          else {
            uint64_t v223 = 0;
          }
          if ((v171 - 3) < 0xFFFFFFFE)
          {
            if (v171 == 3) {
              *((void *)v251 + 1) = 0;
            }
            goto LABEL_261;
          }
          unint64_t v173 = (unint64_t)(v223 + 8);
        }
        else
        {
          if ((v251[1] & 0x7F) != 2 && !*((_DWORD *)v251 + 3)) {
            goto LABEL_261;
          }
          uint64_t v172 = *((void *)v251 + 2);
          if ((v172 & 4) == 0) {
            goto LABEL_261;
          }
          unint64_t v173 = v172 & 0xFFFFFFFFFFFFFFF8;
          if (!v173) {
            goto LABEL_261;
          }
        }
        uint64_t v258 = &v251;
        sub_1CC5FA668(v173 + 16, &v258);
      }
LABEL_261:
      if (*((unsigned char *)v148 + 16) == 83)
      {
        for (unsigned int j = *(void **)(v269 + 48); ; unsigned int j = (void *)j[1])
        {
          if (j == (void *)(v269 + 40)) {
            goto LABEL_271;
          }
          unsigned int v175 = j - 3;
          if (!j) {
            unsigned int v175 = 0;
          }
          if (*((unsigned char *)v175 + 16) != 83) {
            break;
          }
        }
        uint64_t v269 = j[2];
        unint64_t v270 = j;
        unsigned int v176 = (char *)j[3];
        unsigned int v251 = v176;
        if (v176)
        {
          llvm::MetadataTracking::track((uint64_t)&v251, (unsigned __int8 *)v176, 2);
          uint64_t v177 = v251;
        }
        else
        {
          uint64_t v177 = 0;
        }
        sub_1CB8461A4((uint64_t)&v266, 0, (uint64_t)v177);
        if (v251)
        {
          int v219 = *v251;
          if ((v219 - 4) > 0x1E)
          {
            if ((v219 - 3) >= 0xFFFFFFFE) {
              BOOL v222 = v251;
            }
            else {
              BOOL v222 = 0;
            }
            if ((v219 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v221 = (unint64_t)(v222 + 8);
LABEL_338:
              uint64_t v258 = &v251;
              sub_1CC5FA668(v221 + 16, &v258);
              goto LABEL_271;
            }
            if (v219 == 3) {
              *((void *)v251 + 1) = 0;
            }
          }
          else if ((v251[1] & 0x7F) == 2 || *((_DWORD *)v251 + 3))
          {
            uint64_t v220 = *((void *)v251 + 2);
            if ((v220 & 4) != 0)
            {
              unint64_t v221 = v220 & 0xFFFFFFFFFFFFFFF8;
              if (v221) {
                goto LABEL_338;
              }
            }
          }
        }
      }
LABEL_271:
      uint64_t v178 = (llvm::Instruction *)llvm::Instruction::clone(v148);
      if ((*((unsigned char *)v148 + 23) & 0x10) == 0)
      {
        uint64_t v188 = 0;
        unint64_t v189 = &byte_1CFBCE98E;
        goto LABEL_280;
      }
      uint64_t v179 = ***(void ***)v148;
      uint64_t v180 = *(void *)(v179 + 152);
      uint64_t v181 = *(unsigned int *)(v179 + 168);
      if (!v181) {
        goto LABEL_278;
      }
      LODWORD(v182) = (v181 - 1) & ((v148 >> 4) ^ (v148 >> 9));
      unint64_t v183 = (llvm::Instruction **)(v180 + 16 * v182);
      unsigned int v184 = *v183;
      if (*v183 != v148)
      {
        int v185 = 1;
        while (v184 != (llvm::Instruction *)-4096)
        {
          int v186 = v182 + v185++;
          uint64_t v182 = v186 & (v181 - 1);
          unsigned int v184 = *(llvm::Instruction **)(v180 + 16 * v182);
          if (v184 == v148)
          {
            unint64_t v183 = (llvm::Instruction **)(v180 + 16 * v182);
            goto LABEL_279;
          }
        }
LABEL_278:
        unint64_t v183 = (llvm::Instruction **)(v180 + 16 * v181);
      }
LABEL_279:
      uint64_t v187 = v183[1];
      uint64_t v190 = *(void *)v187;
      unint64_t v189 = (char *)v187 + 16;
      uint64_t v188 = v190;
LABEL_280:
      LOWORD(v262) = 261;
      uint64_t v258 = (char **)v189;
      uint64_t v259 = v188;
      (*((void (**)(void **, llvm::Instruction *, char ***, uint64_t, void *))*v273 + 2))(v273, v178, &v258, v269, v270);
      if (v267)
      {
        uint64_t v205 = (uint64_t)v266;
        unsigned int v206 = &v266[2 * v267];
        do
        {
          llvm::Instruction::setMetadata(v178, *(_DWORD *)v205, *(llvm::MDNode **)(v205 + 8));
          v205 += 16;
        }
        while ((uint64_t *)v205 != v206);
      }
      if (v264 >= (unint64_t)HIDWORD(v264)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)&v263[8 * v264] = v178;
      LODWORD(v264) = v264 + 1;
      uint64_t v191 = *(void *)&v263[8 * v264 - 8];
      uint64_t v259 = 2;
      BOOL v260 = 0;
      BOOL v261 = (int32x2_t ****)v148;
      if (v148 != (llvm::Instruction *)-8192 && v148 != (llvm::Instruction *)-4096 && v148) {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v259);
      }
      uint64_t v258 = (char **)&unk_1F2615EC8;
      uint64_t v262 = v255;
      unsigned int v192 = sub_1CC4CFF80((uint64_t)v255, &v258);
      if (v261 != (int32x2_t ****)-8192 && v261 != (int32x2_t ****)-4096 && v261)
      {
        unint64_t v193 = v259 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v259 & 0xFFFFFFFFFFFFFFF8) = v260;
        if (v260)
        {
          *BOOL v260 = *v260 & 7 | v193;
        }
        else
        {
          int v194 = v261;
          long long v195 = ***v261;
          unint64_t v196 = (unint64_t)v195[303];
          if (v196 <= v193)
          {
            uint64_t v197 = v195[305].u32[0];
            if (v196 + 16 * v197 > v193)
            {
              unsigned int v198 = v197 - 1;
              LODWORD(v199) = v198 & ((v261 >> 4) ^ (v261 >> 9));
              uint64_t v200 = (int32x2_t *****)(v196 + 16 * v199);
              uint64_t v201 = *v200;
              if (v261 == *v200)
              {
LABEL_297:
                *uint64_t v200 = (int32x2_t ****)-8192;
                v195[304] = vadd_s32(v195[304], (int32x2_t)0x1FFFFFFFFLL);
                int v194 = v261;
              }
              else
              {
                int v202 = 1;
                while (v201 != (int32x2_t ****)-4096)
                {
                  int v203 = v199 + v202++;
                  uint64_t v199 = v203 & v198;
                  uint64_t v201 = *(int32x2_t *****)(v196 + 16 * v199);
                  if (v261 == v201)
                  {
                    uint64_t v200 = (int32x2_t *****)(v196 + 16 * v199);
                    goto LABEL_297;
                  }
                }
              }
              *((unsigned char *)v194 + 17) &= ~1u;
            }
          }
        }
      }
      uint64_t v204 = v192[7];
      if (v204 != v191)
      {
        if (v204 && v204 != -8192 && v204 != -4096)
        {
          unint64_t v207 = v192[5] & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v207 = v192[6];
          uint64_t v208 = (unint64_t *)v192[6];
          if (v208)
          {
            *uint64_t v208 = *v208 & 7 | v207;
          }
          else
          {
            uint64_t v209 = v192[7];
            uint64_t v210 = ***(int32x2_t ****)v209;
            unint64_t v211 = (unint64_t)v210[303];
            if (v211 <= v207)
            {
              uint64_t v212 = v210[305].u32[0];
              if (v211 + 16 * v212 > v207)
              {
                unsigned int v213 = v212 - 1;
                LODWORD(v214) = v213 & ((v209 >> 4) ^ (v209 >> 9));
                int v215 = (uint64_t *)(v211 + 16 * v214);
                uint64_t v216 = *v215;
                if (v209 == *v215)
                {
LABEL_321:
                  *int v215 = -8192;
                  v210[304] = vadd_s32(v210[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v209 = v192[7];
                }
                else
                {
                  int v217 = 1;
                  while (v216 != -4096)
                  {
                    int v218 = v214 + v217++;
                    uint64_t v214 = v218 & v213;
                    uint64_t v216 = *(void *)(v211 + 16 * v214);
                    if (v209 == v216)
                    {
                      int v215 = (uint64_t *)(v211 + 16 * v214);
                      goto LABEL_321;
                    }
                  }
                }
                *(unsigned char *)(v209 + 17) &= ~1u;
              }
            }
          }
        }
        v192[7] = v191;
        if (v191 != -8192 && v191 != -4096 && v191) {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v192 + 5));
        }
      }
      ++v25;
    }
    while (v25 != v147);
  }
  if (!v254) {
    goto LABEL_376;
  }
  unsigned int v251 = 0;
  uint64_t v252 = 0;
  uint64_t v253 = 0;
  sub_1CC86D39C(&v251, (uint64_t)&v254);
  int v26 = v251;
  BOOL v27 = v252;
  if (v252 == v251)
  {
LABEL_374:
    if (v27)
    {
      uint64_t v252 = v27;
      operator delete(v27);
    }
LABEL_376:
    operator new();
  }
  uint64_t v28 = 0;
  uint64_t v246 = v251;
  while (1)
  {
    int v30 = (int32x2_t ****)*((void *)v27 - 1);
    v27 -= 8;
    long long v29 = v30;
    uint64_t v259 = 2;
    BOOL v260 = 0;
    BOOL v261 = v30;
    if (v30 != (int32x2_t ****)-8192 && v29 != (int32x2_t ****)-4096 && v29 != 0) {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v259);
    }
    uint64_t v258 = (char **)&unk_1F2615EC8;
    uint64_t v262 = v255;
    unint64_t v32 = sub_1CC4CFF80((uint64_t)v255, &v258);
    if (v261 != (int32x2_t ****)-8192 && v261 != (int32x2_t ****)-4096 && v261 != 0)
    {
      unint64_t v34 = v259 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v259 & 0xFFFFFFFFFFFFFFF8) = v260;
      if (v260)
      {
        *BOOL v260 = *v260 & 7 | v34;
      }
      else
      {
        unsigned int v35 = v261;
        unsigned int v36 = ***v261;
        unint64_t v37 = (unint64_t)v36[303];
        if (v37 <= v34)
        {
          uint64_t v38 = v36[305].u32[0];
          if (v37 + 16 * v38 > v34)
          {
            unsigned int v39 = v38 - 1;
            LODWORD(v40) = v39 & ((v261 >> 4) ^ (v261 >> 9));
            uint64_t v41 = (int32x2_t *****)(v37 + 16 * v40);
            uint64_t v42 = *v41;
            if (v261 == *v41)
            {
LABEL_45:
              *uint64_t v41 = (int32x2_t ****)-8192;
              v36[304] = vadd_s32(v36[304], (int32x2_t)0x1FFFFFFFFLL);
              unsigned int v35 = v261;
            }
            else
            {
              int v43 = 1;
              while (v42 != (int32x2_t ****)-4096)
              {
                int v44 = v40 + v43++;
                uint64_t v40 = v44 & v39;
                uint64_t v42 = *(int32x2_t *****)(v37 + 16 * v40);
                if (v261 == v42)
                {
                  uint64_t v41 = (int32x2_t *****)(v37 + 16 * v40);
                  goto LABEL_45;
                }
              }
            }
            *((unsigned char *)v35 + 17) &= ~1u;
          }
        }
      }
    }
    uint64_t v45 = v32[7];
    if (!v45) {
      goto LABEL_126;
    }
    if (v28)
    {
      uint64_t v269 = v28;
      unint64_t v270 = (void *)(v28 + 40);
      uint64_t v46 = (char *)operator new(0x60uLL);
      *((_DWORD *)v46 + 13) = *((_DWORD *)v46 + 13) & 0x38000000 | 1;
      *(void *)uint64_t v46 = 0;
      *((void *)v46 + 2) = 0;
      *((void *)v46 + 1) = 0;
      *((void *)v46 + 4) = ***(void ***)v45 + 1576;
      *((void *)v46 + 3) = v46 + 32;
      *((void *)v46 + 5) = 0;
      v46[48] = 30;
      v46[49] = 0;
      *((_WORD *)v46 + 25) = 0;
      *((_DWORD *)v46 + 13) = 1;
      *(_OWORD *)(v46 + 56) = 0u;
      *(_OWORD *)(v46 + 72) = 0u;
      *((_DWORD *)v46 + 22) = 0;
      *(void *)uint64_t v46 = v45;
      unint64_t v47 = (void *)(v45 + 8);
      uint64_t v48 = *(void *)(v45 + 8);
      *((void *)v46 + 1) = v48;
      if (v48) {
        *(void *)(v48 + 16) = v46 + 8;
      }
      *((void *)v46 + 2) = v47;
      *unint64_t v47 = v46;
      LOWORD(v262) = 257;
      unint64_t v32 = sub_1CB844E0C((uint64_t *)&v266, (llvm::Instruction *)(v46 + 32), (uint64_t)&v258);
    }
    uint64_t v49 = *(void *)(v45 + 40);
    if (v49 == v45 + 40)
    {
      uint64_t v50 = 0;
    }
    else
    {
      if (v49) {
        uint64_t v50 = v49 - 24;
      }
      else {
        uint64_t v50 = 0;
      }
      if (*(unsigned __int8 *)(v50 + 16) - 29 >= 0xB) {
        uint64_t v50 = 0;
      }
    }
    uint64_t v28 = 0;
    if (v50) {
      goto LABEL_126;
    }
    uint64_t v51 = (unsigned int *)v29[5];
    if (v51 != (unsigned int *)(v29 + 5)) {
      break;
    }
LABEL_125:
    uint64_t v28 = v45;
LABEL_126:
    if (v27 == v26)
    {
      BOOL v27 = v251;
      goto LABEL_374;
    }
  }
  if (v51) {
    unint64_t v52 = v51 - 6;
  }
  else {
    unint64_t v52 = 0;
  }
  int v53 = *((unsigned __int8 *)v52 + 16);
  int v54 = v53 - 29;
  if (v53 == 30)
  {
    if ((v52[5] & 0x7FFFFFF) == 3) {
      unsigned int v87 = 2;
    }
    else {
      unsigned int v87 = 1;
    }
LABEL_71:
    uint64_t v55 = 0;
    uint64_t v244 = v51 - 6;
    uint64_t v56 = v51 - 14;
    uint64_t v57 = v87;
    while (1)
    {
      int v58 = *((unsigned __int8 *)v51 - 8);
      if (v58 == 30)
      {
        int v74 = &v56[-8 * v55];
      }
      else
      {
        uint64_t v73 = (v58 - 31);
        int v74 = v51 - 14;
        switch(v73)
        {
          case 1:
          case 7:
            int v78 = *(v51 - 1);
            if ((v78 & 0x40000000) != 0) {
              uint64_t v79 = (unsigned int *)*((void *)v51 - 4);
            }
            else {
              uint64_t v79 = &v244[-8 * (v78 & 0x7FFFFFF)];
            }
            int v77 = &v79[8 * v55];
            goto LABEL_103;
          case 2:
            uint64_t v80 = 0x3FFFFFFFFFFFFFF0;
            if (!v55) {
              uint64_t v80 = 0x3FFFFFFFFFFFFFE8;
            }
            int v74 = &v244[v80];
            break;
          case 3:
          case 4:
            goto LABEL_380;
          case 5:
            if ((*((_WORD *)v51 - 3) & 1) == 0)
            {
              uint64_t v59 = 0;
              goto LABEL_76;
            }
            uint64_t v81 = *(v51 - 1) & 0x7FFFFFF;
            uint64_t v82 = v51 + 2;
            goto LABEL_118;
          case 6:
            break;
          case 8:
            if (v55)
            {
              int v74 = &v56[8 * v55 - 8 + -8 * v51[14]];
            }
            else
            {
              uint64_t v81 = v51[14];
              uint64_t v82 = v51 - 22;
LABEL_118:
              int v74 = &v82[-8 * v81];
            }
            break;
          default:
            int v75 = *(v51 - 1);
            if ((v75 & 0x40000000) != 0) {
              uint64_t v76 = (unsigned int *)*((void *)v51 - 4);
            }
            else {
              uint64_t v76 = &v244[-8 * (v75 & 0x7FFFFFF)];
            }
            int v77 = &v76[8 * (2 * v55)];
LABEL_103:
            int v74 = v77 + 8;
            break;
        }
      }
      uint64_t v59 = *(int32x2_t *****)v74;
LABEL_76:
      uint64_t v259 = 2;
      BOOL v260 = 0;
      BOOL v261 = v59;
      if (v59 != (int32x2_t ****)-8192 && v59 != (int32x2_t ****)-4096 && v59 != 0) {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v259);
      }
      uint64_t v258 = (char **)&unk_1F2615EC8;
      uint64_t v262 = v255;
      unint64_t v32 = sub_1CC4CFF80((uint64_t)v255, &v258);
      if (v261 != (int32x2_t ****)-8192 && v261 != (int32x2_t ****)-4096 && v261)
      {
        unint64_t v61 = v259 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v259 & 0xFFFFFFFFFFFFFFF8) = v260;
        if (v260)
        {
          *BOOL v260 = *v260 & 7 | v61;
        }
        else
        {
          uint64_t v62 = v261;
          uint64_t v63 = ***v261;
          unint64_t v64 = (unint64_t)v63[303];
          if (v64 <= v61)
          {
            uint64_t v65 = v63[305].u32[0];
            if (v64 + 16 * v65 > v61)
            {
              unsigned int v66 = v65 - 1;
              LODWORD(v67) = v66 & ((v261 >> 4) ^ (v261 >> 9));
              uint64_t v68 = (int32x2_t *****)(v64 + 16 * v67);
              int v69 = *v68;
              if (v261 == *v68)
              {
LABEL_93:
                char *v68 = (int32x2_t ****)-8192;
                v63[304] = vadd_s32(v63[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v62 = v261;
              }
              else
              {
                int v70 = 1;
                while (v69 != (int32x2_t ****)-4096)
                {
                  int v71 = v67 + v70++;
                  uint64_t v67 = v71 & v66;
                  int v69 = *(int32x2_t *****)(v64 + 16 * v67);
                  if (v261 == v69)
                  {
                    uint64_t v68 = (int32x2_t *****)(v64 + 16 * v67);
                    goto LABEL_93;
                  }
                }
              }
              *((unsigned char *)v62 + 17) &= ~1u;
            }
          }
        }
      }
      uint64_t v72 = v32[7];
      if (v72) {
        break;
      }
      if (++v55 == v57)
      {
        uint64_t v28 = v45;
        int v26 = v246;
        goto LABEL_126;
      }
    }
    uint64_t v269 = v45;
    unint64_t v270 = (void *)(v45 + 40);
    unint64_t v83 = (char *)operator new(0x60uLL);
    *((_DWORD *)v83 + 13) = *((_DWORD *)v83 + 13) & 0x38000000 | 1;
    *(void *)unint64_t v83 = 0;
    *((void *)v83 + 2) = 0;
    *((void *)v83 + 1) = 0;
    *((void *)v83 + 4) = ***(void ***)v72 + 1576;
    *((void *)v83 + 3) = v83 + 32;
    *((void *)v83 + 5) = 0;
    v83[48] = 30;
    v83[49] = 0;
    *((_WORD *)v83 + 25) = 0;
    *((_DWORD *)v83 + 13) = 1;
    *(_OWORD *)(v83 + 56) = 0u;
    *(_OWORD *)(v83 + 72) = 0u;
    *((_DWORD *)v83 + 22) = 0;
    *(void *)unint64_t v83 = v72;
    uint64_t v86 = *(void *)(v72 + 8);
    unint64_t v85 = (void *)(v72 + 8);
    uint64_t v84 = v86;
    *((void *)v83 + 1) = v86;
    if (v86) {
      *(void *)(v84 + 16) = v83 + 8;
    }
    *((void *)v83 + 2) = v85;
    *unint64_t v85 = v83;
    LOWORD(v262) = 257;
    sub_1CB844E0C((uint64_t *)&v266, (llvm::Instruction *)(v83 + 32), (uint64_t)&v258);
    uint64_t v28 = 0;
    int v26 = v246;
    goto LABEL_126;
  }
  unsigned int v87 = 2;
  uint64_t v28 = v45;
  switch(v54)
  {
    case 0:
    case 5:
    case 6:
      goto LABEL_126;
    case 1:
LABEL_380:
      __break(1u);
      free(v32);
      if (v282 != v51) {
        free(v282);
      }
      return;
    case 2:
      unsigned int v87 = (v52[5] >> 1) & 0x3FFFFFF;
      goto LABEL_124;
    case 3:
    case 9:
      unsigned int v87 = (v52[5] & 0x7FFFFFF) - 1;
      goto LABEL_124;
    case 4:
      goto LABEL_71;
    case 7:
      unsigned int v87 = *((_WORD *)v52 + 9) & 1;
      goto LABEL_124;
    case 8:
      unsigned int v87 = 1;
      goto LABEL_71;
    case 10:
      unsigned int v87 = v52[20] + 1;
LABEL_124:
      if (!v87) {
        goto LABEL_125;
      }
      goto LABEL_71;
    default:
      goto LABEL_125;
  }
}

uint64_t *llvm::ComputationExtractor::replaceExtractedInstsWithCall(char **a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v8 = 0;
  v38[1] = *MEMORY[0x1E4F143B8];
  int v9 = *a1;
  do
  {
    uint64_t v11 = *(uint64_t ***)v9;
    v9 += 8;
    uint64_t v10 = v11;
    if (*((unsigned __int8 *)v11 + 16) <= 0x1Bu) {
      uint64_t v10 = 0;
    }
    if (v10) {
      unint64_t v8 = v10;
    }
  }
  while (v9 != a1[1]);
  uint64_t v12 = 0;
  uint64_t v13 = **v8;
  v30[1] = (void *)0x200000000;
  v31[6] = v13;
  v31[7] = &v37;
  v31[8] = v38;
  v31[9] = 0;
  int v32 = 0;
  __int16 v33 = 512;
  char v34 = 7;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  unint64_t v37 = &unk_1F2616E88;
  v38[0] = &unk_1F2617008;
  v31[4] = v8[5];
  v31[5] = v8 + 3;
  unint64_t v14 = (unsigned __int8 *)v8[6];
  long long v29 = v14;
  v30[0] = v31;
  if (v14)
  {
    llvm::MetadataTracking::track((uint64_t)&v29, v14, 2);
    uint64_t v12 = (uint64_t)v29;
  }
  sub_1CB8461A4((uint64_t)v30, 0, v12);
  if (v29)
  {
    int v23 = *v29;
    if ((v23 - 4) > 0x1E)
    {
      if ((v23 - 3) >= 0xFFFFFFFE) {
        int v26 = v29;
      }
      else {
        int v26 = 0;
      }
      if ((v23 - 3) < 0xFFFFFFFE)
      {
        if (v23 == 3) {
          *((void *)v29 + 1) = 0;
        }
        goto LABEL_10;
      }
      unint64_t v25 = (unint64_t)(v26 + 8);
    }
    else
    {
      if ((v29[1] & 0x7F) != 2 && !*((_DWORD *)v29 + 3)) {
        goto LABEL_10;
      }
      uint64_t v24 = *((void *)v29 + 2);
      if ((v24 & 4) == 0) {
        goto LABEL_10;
      }
      unint64_t v25 = v24 & 0xFFFFFFFFFFFFFFF8;
      if (!v25) {
        goto LABEL_10;
      }
    }
    v27[0] = &v29;
    sub_1CC5FA668(v25 + 16, v27);
  }
LABEL_10:
  if (a2) {
    uint64_t v15 = *(uint64_t ***)(a2 + 24);
  }
  else {
    uint64_t v15 = 0;
  }
  __int16 v28 = 257;
  unsigned int v16 = (uint64_t *)sub_1CB845BAC((uint64_t *)v30, v15, (uint64_t **)a2, a3, a4, (uint64_t)v27, 0);
  unint64_t v17 = a1[1] - *a1;
  if ((v17 & 0x7FFFFFFF8) != 0)
  {
    uint64_t v18 = 0;
    uint64_t v19 = (v17 >> 3);
    do
    {
      unsigned int v20 = *a1;
      uint64_t v21 = (llvm::Instruction *)v16;
      if ((unint64_t)(a1[1] - *a1) >= 9)
      {
        LODWORD(v29) = v18;
        __int16 v28 = 257;
        uint64_t v21 = sub_1CC2415A4((uint64_t)v30, v16, (unsigned int *)&v29, 1, (uint64_t)v27);
        unsigned int v20 = *a1;
      }
      llvm::Value::doRAUW(*(llvm::ValueAsMetadata **)&v20[8 * v18++], v21, (llvm::Value *)1);
    }
    while (v19 != v18);
  }
  if (v30[0] != v31) {
    free(v30[0]);
  }
  return v16;
}

uint64_t llvm::ComputationExtractor::eraseDeadInstructions(uint64_t this)
{
  for (uint64_t i = *(void *)(this + 240); i != *(void *)(this + 232); i -= 8)
  {
    uint64_t v3 = *(void *)(i - 8);
    uint64_t v2 = v3;
    if (!*(void *)(v3 + 8) && *(unsigned __int8 *)(v2 + 16) - 29 >= 0xB) {
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
  }
  return this;
}

void *sub_1CD158D10(void *a1, unsigned int a2)
{
  if (a2 <= 8)
  {
    *a1 = 1;
LABEL_3:
    double result = a1 + 1;
    uint64_t v4 = a1 + 9;
    goto LABEL_4;
  }
  *(_DWORD *)a1 &= ~1u;
  uint64_t v5 = a2;
  double result = operator new(8 * a2, (std::align_val_t)8uLL);
  a1[1] = result;
  a1[2] = v5;
  int v6 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if (v6) {
    goto LABEL_3;
  }
  uint64_t v4 = &result[v5];
  do
LABEL_4:
    *result++ = -4096;
  while (result != v4);
  return result;
}

uint64_t sub_1CD158D94(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 1;
  int64x2_t v3 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 8) = v3;
  *(int64x2_t *)(a1 + 24) = v3;
  *(int64x2_t *)(a1 + 40) = v3;
  *(int64x2_t *)(a1 + 56) = v3;
  *(void *)(a1 + 72) = a1 + 88;
  *(void *)(a1 + 80) = 0x800000000;
  *(void *)(a1 + 152) = 1;
  *(int64x2_t *)(a1 + 160) = v3;
  *(int64x2_t *)(a1 + 176) = v3;
  *(int64x2_t *)(a1 + 192) = v3;
  *(int64x2_t *)(a1 + 208) = v3;
  *(void *)(a1 + 224) = a1 + 240;
  *(void *)(a1 + 232) = 0x800000000;
  *(void *)(a1 + 304) = 0;
  sub_1CD158E74(a1, a2);
  return a1;
}

uint64_t sub_1CD158E10(uint64_t a1, int a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v3 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v4 = *(void *)(a1 + 16 * v3);
    if (v4 == a3) {
      return *(unsigned int *)(a1 + 16 * v3 + 8);
    }
    int v6 = 1;
    while (v4 != -4096)
    {
      int v7 = v3 + v6++;
      uint64_t v3 = v7 & (a2 - 1);
      uint64_t v4 = *(void *)(a1 + 16 * v3);
      if (v4 == a3) {
        return *(unsigned int *)(a1 + 16 * v3 + 8);
      }
    }
  }
  return 0;
}

uint64_t sub_1CD158E74(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = a2;
  sub_1CC911830(a1, &v12);
  uint64_t v12 = a2;
  sub_1CC911830(a1 + 152, &v12);
  uint64_t v4 = (llvm::DataLayout *)(*(void *)(*(void *)(*(void *)(a2 + 40) + 56) + 40) + 272);
  uint64_t v5 = *(llvm::Type **)a2;
  unint64_t v6 = (unint64_t)(sub_1CB83544C((uint64_t)v4, (uint64_t)v5) + 7) >> 3;
  BOOL v8 = v7 == 1;
  uint64_t result = llvm::DataLayout::getAlignment(v4, v5, 1);
  if (v8)
  {
    uint64_t v11 = result;
    uint64_t result = v11;
  }
  *(void *)(a1 + 304) += ((1 << result) + v6 - 1) & -(1 << result);
  return result;
}

void *sub_1CD158F50(void *result)
{
  char v1 = result;
  unsigned int v2 = *(_DWORD *)result;
  if (*(_DWORD *)result <= 1u && !*((_DWORD *)result + 1)) {
    return result;
  }
  if (v2)
  {
    uint64_t v5 = result + 1;
    unint64_t v6 = result + 9;
    goto LABEL_11;
  }
  uint64_t v3 = *((unsigned int *)result + 4);
  if (((2 * v2) & 0xFFFFFFFC) >= v3 || v3 < 0x41)
  {
    if (!v3)
    {
LABEL_13:
      *(_DWORD *)uint64_t result = v3;
      *((_DWORD *)result + 1) = 0;
      return result;
    }
    uint64_t v5 = (void *)result[1];
    unint64_t v6 = &v5[v3];
    do
LABEL_11:
      *v5++ = -4096;
    while (v5 != v6);
    LODWORD(v3) = *(_DWORD *)result & 1;
    goto LABEL_13;
  }
  if (v2 >= 2)
  {
    char v7 = __clz((v2 >> 1) - 1);
    if ((v7 & 0x3E) == 0x1C) {
      unsigned int v4 = 64;
    }
    else {
      unsigned int v4 = 1 << (33 - v7);
    }
    if (v4 == v3)
    {
      *uint64_t result = 0;
      uint64_t v8 = 8 * v3;
      int v9 = (void *)result[1];
      do
      {
        *v9++ = -4096;
        v8 -= 8;
      }
      while (v8);
      return result;
    }
  }
  else
  {
    unsigned int v4 = 0;
  }
  MEMORY[0x1D25D9CD0](result[1], 8);

  return sub_1CD158D10(v1, v4);
}

unint64_t sub_1CD15906C(unint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  int v9 = (unint64_t *)result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                unint64_t v39 = *(a2 - 1);
                unint64_t v40 = *v10;
                if (v39 < *v10)
                {
                  *uint64_t v10 = v39;
                  *(a2 - 1) = v40;
                }
                break;
              case 3:
                uint64_t result = (unint64_t)sub_1CBB0A088(v10, v10 + 1, a2 - 1);
                break;
              case 4:
                uint64_t result = (unint64_t)sub_1CBB0A328(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5:
                uint64_t result = (unint64_t)sub_1CBB0A3A8(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            uint64_t v41 = v10 + 1;
            BOOL v43 = v10 == a2 || v41 == a2;
            if (a4)
            {
              if (!v43)
              {
                uint64_t v44 = 8;
                uint64_t v45 = v10;
                do
                {
                  unint64_t v47 = *v45;
                  unint64_t v46 = v45[1];
                  uint64_t v45 = v41;
                  if (v46 < v47)
                  {
                    uint64_t v48 = v44;
                    do
                    {
                      *(unint64_t *)((char *)v10 + v48) = v47;
                      uint64_t v49 = v48 - 8;
                      if (v48 == 8)
                      {
                        uint64_t v50 = v10;
                        goto LABEL_82;
                      }
                      unint64_t v47 = *(unint64_t *)((char *)v10 + v48 - 16);
                      v48 -= 8;
                    }
                    while (v46 < v47);
                    uint64_t v50 = (unint64_t *)((char *)v10 + v49);
LABEL_82:
                    unint64_t *v50 = v46;
                  }
                  uint64_t v41 = v45 + 1;
                  v44 += 8;
                }
                while (v45 + 1 != a2);
              }
            }
            else if (!v43)
            {
              do
              {
                unint64_t v74 = *v9;
                unint64_t v73 = v9[1];
                int v9 = v41;
                if (v73 < v74)
                {
                  do
                  {
                    *uint64_t v41 = v74;
                    unint64_t v74 = *(v41 - 2);
                    --v41;
                  }
                  while (v73 < v74);
                  *uint64_t v41 = v73;
                }
                uint64_t v41 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v51 = (unint64_t)(v12 - 2) >> 1;
              int64_t v52 = v51;
              do
              {
                int64_t v53 = v52;
                if (v51 >= v52)
                {
                  uint64_t v54 = (2 * v52) | 1;
                  uint64_t v55 = &v10[v54];
                  if (2 * v53 + 2 < v12)
                  {
                    unint64_t v57 = v55[1];
                    BOOL v56 = *v55 >= v57;
                    if (*v55 < v57) {
                      ++v55;
                    }
                    else {
                      unint64_t v57 = *v55;
                    }
                    if (!v56) {
                      uint64_t v54 = 2 * v53 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v57 = *v55;
                  }
                  int v58 = &v10[v53];
                  unint64_t v59 = *v58;
                  if (v57 >= *v58)
                  {
                    do
                    {
                      *int v58 = v57;
                      int v58 = v55;
                      if (v51 < v54) {
                        break;
                      }
                      uint64_t v60 = (2 * v54) | 1;
                      uint64_t v55 = &v10[v60];
                      uint64_t v54 = 2 * v54 + 2;
                      if (v54 < v12)
                      {
                        unint64_t v57 = *v55;
                        uint64_t result = v55[1];
                        if (*v55 >= result)
                        {
                          uint64_t v54 = v60;
                        }
                        else
                        {
                          unint64_t v57 = v55[1];
                          ++v55;
                        }
                      }
                      else
                      {
                        unint64_t v57 = *v55;
                        uint64_t v54 = v60;
                      }
                    }
                    while (v57 >= v59);
                    *int v58 = v59;
                  }
                }
                int64_t v52 = v53 - 1;
              }
              while (v53);
              do
              {
                uint64_t v61 = 0;
                unint64_t v62 = *v10;
                uint64_t v63 = v10;
                do
                {
                  unint64_t v64 = &v63[v61 + 1];
                  uint64_t v65 = (2 * v61) | 1;
                  uint64_t v61 = 2 * v61 + 2;
                  if (v61 < v12)
                  {
                    unint64_t v66 = *v64;
                    if (*v64 >= v64[1])
                    {
                      uint64_t v61 = v65;
                    }
                    else
                    {
                      unint64_t v66 = v64[1];
                      ++v64;
                    }
                  }
                  else
                  {
                    unint64_t v66 = *v64;
                    uint64_t v61 = v65;
                  }
                  *uint64_t v63 = v66;
                  uint64_t v63 = v64;
                }
                while (v61 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if (v64 == --a2)
                {
                  *unint64_t v64 = v62;
                }
                else
                {
                  *unint64_t v64 = *a2;
                  *a2 = v62;
                  uint64_t v67 = (char *)v64 - (char *)v10 + 8;
                  if (v67 >= 9)
                  {
                    unint64_t v68 = (((unint64_t)v67 >> 3) - 2) >> 1;
                    int v69 = &v10[v68];
                    unint64_t v70 = *v69;
                    unint64_t v71 = *v64;
                    if (*v69 < *v64)
                    {
                      do
                      {
                        *unint64_t v64 = v70;
                        unint64_t v64 = v69;
                        if (!v68) {
                          break;
                        }
                        unint64_t v68 = (v68 - 1) >> 1;
                        int v69 = &v10[v68];
                        unint64_t v70 = *v69;
                      }
                      while (*v69 < v71);
                      *unint64_t v64 = v71;
                    }
                  }
                }
              }
              while (v12-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          unint64_t v14 = &v10[(unint64_t)v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            sub_1CBB0A088(v9, &v9[(unint64_t)v12 >> 1], a2 - 1);
            sub_1CBB0A088(v9 + 1, v14 - 1, a2 - 2);
            sub_1CBB0A088(v9 + 2, &v9[v13 + 1], a2 - 3);
            uint64_t result = (unint64_t)sub_1CBB0A088(v14 - 1, v14, &v9[v13 + 1]);
            unint64_t v15 = *v9;
            *int v9 = *v14;
            *unint64_t v14 = v15;
          }
          else
          {
            uint64_t result = (unint64_t)sub_1CBB0A088(&v9[(unint64_t)v12 >> 1], v9, a2 - 1);
          }
          --a3;
          unint64_t v16 = *v9;
          if ((a4 & 1) != 0 || *(v9 - 1) < v16) {
            break;
          }
          if (v16 >= *(a2 - 1))
          {
            uint64_t v31 = v9 + 1;
            do
            {
              uint64_t v10 = v31;
              if (v31 >= a2) {
                break;
              }
              ++v31;
            }
            while (v16 >= *v10);
          }
          else
          {
            uint64_t v10 = v9;
            do
            {
              unint64_t v30 = v10[1];
              ++v10;
            }
            while (v16 >= v30);
          }
          int v32 = a2;
          if (v10 < a2)
          {
            int v32 = a2;
            do
              unint64_t v33 = *--v32;
            while (v16 < v33);
          }
          if (v10 < v32)
          {
            unint64_t v34 = *v10;
            unint64_t v35 = *v32;
            do
            {
              *uint64_t v10 = v35;
              *int v32 = v34;
              do
              {
                unint64_t v36 = v10[1];
                ++v10;
                unint64_t v34 = v36;
              }
              while (v16 >= v36);
              do
              {
                unint64_t v37 = *--v32;
                unint64_t v35 = v37;
              }
              while (v16 < v37);
            }
            while (v10 < v32);
          }
          uint64_t v38 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *int v9 = *v38;
          }
          a4 = 0;
          *uint64_t v38 = v16;
        }
        uint64_t v17 = 0;
        do
          unint64_t v18 = v9[++v17];
        while (v18 < v16);
        uint64_t v19 = &v9[v17];
        unsigned int v20 = a2;
        if (v17 == 1)
        {
          unsigned int v20 = a2;
          do
          {
            if (v19 >= v20) {
              break;
            }
            unint64_t v22 = *--v20;
          }
          while (v22 >= v16);
        }
        else
        {
          do
            unint64_t v21 = *--v20;
          while (v21 >= v16);
        }
        if (v19 >= v20)
        {
          __int16 v28 = v19 - 1;
        }
        else
        {
          unint64_t v23 = *v20;
          uint64_t v24 = &v9[v17];
          unint64_t v25 = v20;
          do
          {
            *uint64_t v24 = v23;
            *unint64_t v25 = v18;
            do
            {
              unint64_t v26 = v24[1];
              ++v24;
              unint64_t v18 = v26;
            }
            while (v26 < v16);
            do
            {
              unint64_t v27 = *--v25;
              unint64_t v23 = v27;
            }
            while (v27 >= v16);
          }
          while (v24 < v25);
          __int16 v28 = v24 - 1;
        }
        if (v28 != v9) {
          *int v9 = *v28;
        }
        *__int16 v28 = v16;
        if (v19 >= v20) {
          break;
        }
LABEL_33:
        uint64_t result = sub_1CD15906C(v9, v28, a3, a4 & 1);
        a4 = 0;
        uint64_t v10 = v28 + 1;
      }
      BOOL v29 = sub_1CD1596E0(v9, v28);
      uint64_t v10 = v28 + 1;
      uint64_t result = sub_1CD1596E0(v28 + 1, a2);
      if (result) {
        break;
      }
      if (!v29) {
        goto LABEL_33;
      }
    }
    a2 = v28;
    if (!v29) {
      continue;
    }
    return result;
  }
}

BOOL sub_1CD1596E0(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 1);
      unint64_t v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1CBB0A088(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1CBB0A328(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1CBB0A3A8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v8 = a1 + 2;
      sub_1CBB0A088(a1, a1 + 1, a1 + 2);
      int v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    unint64_t v13 = *v8;
    if (*v9 < *v8)
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 8;
        if (v14 == 8) {
          break;
        }
        unint64_t v13 = *(unint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 >= v13)
        {
          unint64_t v16 = (unint64_t *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      unint64_t *v16 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    uint64_t v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

unint64_t sub_1CD159860(unint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  int v9 = (unint64_t *)result;
  while (2)
  {
    int v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                unint64_t v39 = *(a2 - 1);
                unint64_t v40 = *v10;
                if (v39 < *v10)
                {
                  *int v10 = v39;
                  *(a2 - 1) = v40;
                }
                break;
              case 3:
                BOOL result = (unint64_t)sub_1CBB0A088(v10, v10 + 1, a2 - 1);
                break;
              case 4:
                BOOL result = (unint64_t)sub_1CBB0A328(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5:
                BOOL result = (unint64_t)sub_1CBB0A3A8(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            uint64_t v41 = v10 + 1;
            BOOL v43 = v10 == a2 || v41 == a2;
            if (a4)
            {
              if (!v43)
              {
                uint64_t v44 = 8;
                uint64_t v45 = v10;
                do
                {
                  unint64_t v47 = *v45;
                  unint64_t v46 = v45[1];
                  uint64_t v45 = v41;
                  if (v46 < v47)
                  {
                    uint64_t v48 = v44;
                    do
                    {
                      *(unint64_t *)((char *)v10 + v48) = v47;
                      uint64_t v49 = v48 - 8;
                      if (v48 == 8)
                      {
                        uint64_t v50 = v10;
                        goto LABEL_82;
                      }
                      unint64_t v47 = *(unint64_t *)((char *)v10 + v48 - 16);
                      v48 -= 8;
                    }
                    while (v46 < v47);
                    uint64_t v50 = (unint64_t *)((char *)v10 + v49);
LABEL_82:
                    unint64_t *v50 = v46;
                  }
                  uint64_t v41 = v45 + 1;
                  v44 += 8;
                }
                while (v45 + 1 != a2);
              }
            }
            else if (!v43)
            {
              do
              {
                unint64_t v74 = *v9;
                unint64_t v73 = v9[1];
                int v9 = v41;
                if (v73 < v74)
                {
                  do
                  {
                    *uint64_t v41 = v74;
                    unint64_t v74 = *(v41 - 2);
                    --v41;
                  }
                  while (v73 < v74);
                  *uint64_t v41 = v73;
                }
                uint64_t v41 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v51 = (unint64_t)(v12 - 2) >> 1;
              int64_t v52 = v51;
              do
              {
                int64_t v53 = v52;
                if (v51 >= v52)
                {
                  uint64_t v54 = (2 * v52) | 1;
                  uint64_t v55 = &v10[v54];
                  if (2 * v53 + 2 < v12)
                  {
                    unint64_t v57 = v55[1];
                    BOOL v56 = *v55 >= v57;
                    if (*v55 < v57) {
                      ++v55;
                    }
                    else {
                      unint64_t v57 = *v55;
                    }
                    if (!v56) {
                      uint64_t v54 = 2 * v53 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v57 = *v55;
                  }
                  int v58 = &v10[v53];
                  unint64_t v59 = *v58;
                  if (v57 >= *v58)
                  {
                    do
                    {
                      *int v58 = v57;
                      int v58 = v55;
                      if (v51 < v54) {
                        break;
                      }
                      uint64_t v60 = (2 * v54) | 1;
                      uint64_t v55 = &v10[v60];
                      uint64_t v54 = 2 * v54 + 2;
                      if (v54 < v12)
                      {
                        unint64_t v57 = *v55;
                        BOOL result = v55[1];
                        if (*v55 >= result)
                        {
                          uint64_t v54 = v60;
                        }
                        else
                        {
                          unint64_t v57 = v55[1];
                          ++v55;
                        }
                      }
                      else
                      {
                        unint64_t v57 = *v55;
                        uint64_t v54 = v60;
                      }
                    }
                    while (v57 >= v59);
                    *int v58 = v59;
                  }
                }
                int64_t v52 = v53 - 1;
              }
              while (v53);
              do
              {
                uint64_t v61 = 0;
                unint64_t v62 = *v10;
                uint64_t v63 = v10;
                do
                {
                  unint64_t v64 = &v63[v61 + 1];
                  uint64_t v65 = (2 * v61) | 1;
                  uint64_t v61 = 2 * v61 + 2;
                  if (v61 < v12)
                  {
                    unint64_t v66 = *v64;
                    if (*v64 >= v64[1])
                    {
                      uint64_t v61 = v65;
                    }
                    else
                    {
                      unint64_t v66 = v64[1];
                      ++v64;
                    }
                  }
                  else
                  {
                    unint64_t v66 = *v64;
                    uint64_t v61 = v65;
                  }
                  *uint64_t v63 = v66;
                  uint64_t v63 = v64;
                }
                while (v61 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if (v64 == --a2)
                {
                  *unint64_t v64 = v62;
                }
                else
                {
                  *unint64_t v64 = *a2;
                  *a2 = v62;
                  uint64_t v67 = (char *)v64 - (char *)v10 + 8;
                  if (v67 >= 9)
                  {
                    unint64_t v68 = (((unint64_t)v67 >> 3) - 2) >> 1;
                    int v69 = &v10[v68];
                    unint64_t v70 = *v69;
                    unint64_t v71 = *v64;
                    if (*v69 < *v64)
                    {
                      do
                      {
                        *unint64_t v64 = v70;
                        unint64_t v64 = v69;
                        if (!v68) {
                          break;
                        }
                        unint64_t v68 = (v68 - 1) >> 1;
                        int v69 = &v10[v68];
                        unint64_t v70 = *v69;
                      }
                      while (*v69 < v71);
                      *unint64_t v64 = v71;
                    }
                  }
                }
              }
              while (v12-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = &v10[(unint64_t)v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            sub_1CBB0A088(v9, &v9[(unint64_t)v12 >> 1], a2 - 1);
            sub_1CBB0A088(v9 + 1, v14 - 1, a2 - 2);
            sub_1CBB0A088(v9 + 2, &v9[v13 + 1], a2 - 3);
            BOOL result = (unint64_t)sub_1CBB0A088(v14 - 1, v14, &v9[v13 + 1]);
            unint64_t v15 = *v9;
            *int v9 = *v14;
            *uint64_t v14 = v15;
          }
          else
          {
            BOOL result = (unint64_t)sub_1CBB0A088(&v9[(unint64_t)v12 >> 1], v9, a2 - 1);
          }
          --a3;
          unint64_t v16 = *v9;
          if ((a4 & 1) != 0 || *(v9 - 1) < v16) {
            break;
          }
          if (v16 >= *(a2 - 1))
          {
            uint64_t v31 = v9 + 1;
            do
            {
              int v10 = v31;
              if (v31 >= a2) {
                break;
              }
              ++v31;
            }
            while (v16 >= *v10);
          }
          else
          {
            int v10 = v9;
            do
            {
              unint64_t v30 = v10[1];
              ++v10;
            }
            while (v16 >= v30);
          }
          int v32 = a2;
          if (v10 < a2)
          {
            int v32 = a2;
            do
              unint64_t v33 = *--v32;
            while (v16 < v33);
          }
          if (v10 < v32)
          {
            unint64_t v34 = *v10;
            unint64_t v35 = *v32;
            do
            {
              *int v10 = v35;
              *int v32 = v34;
              do
              {
                unint64_t v36 = v10[1];
                ++v10;
                unint64_t v34 = v36;
              }
              while (v16 >= v36);
              do
              {
                unint64_t v37 = *--v32;
                unint64_t v35 = v37;
              }
              while (v16 < v37);
            }
            while (v10 < v32);
          }
          uint64_t v38 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *int v9 = *v38;
          }
          a4 = 0;
          *uint64_t v38 = v16;
        }
        uint64_t v17 = 0;
        do
          unint64_t v18 = v9[++v17];
        while (v18 < v16);
        uint64_t v19 = &v9[v17];
        unsigned int v20 = a2;
        if (v17 == 1)
        {
          unsigned int v20 = a2;
          do
          {
            if (v19 >= v20) {
              break;
            }
            unint64_t v22 = *--v20;
          }
          while (v22 >= v16);
        }
        else
        {
          do
            unint64_t v21 = *--v20;
          while (v21 >= v16);
        }
        if (v19 >= v20)
        {
          __int16 v28 = v19 - 1;
        }
        else
        {
          unint64_t v23 = *v20;
          uint64_t v24 = &v9[v17];
          unint64_t v25 = v20;
          do
          {
            *uint64_t v24 = v23;
            *unint64_t v25 = v18;
            do
            {
              unint64_t v26 = v24[1];
              ++v24;
              unint64_t v18 = v26;
            }
            while (v26 < v16);
            do
            {
              unint64_t v27 = *--v25;
              unint64_t v23 = v27;
            }
            while (v27 >= v16);
          }
          while (v24 < v25);
          __int16 v28 = v24 - 1;
        }
        if (v28 != v9) {
          *int v9 = *v28;
        }
        *__int16 v28 = v16;
        if (v19 >= v20) {
          break;
        }
LABEL_33:
        BOOL result = sub_1CD159860(v9, v28, a3, a4 & 1);
        a4 = 0;
        int v10 = v28 + 1;
      }
      BOOL v29 = sub_1CD159ED4(v9, v28);
      int v10 = v28 + 1;
      BOOL result = sub_1CD159ED4(v28 + 1, a2);
      if (result) {
        break;
      }
      if (!v29) {
        goto LABEL_33;
      }
    }
    a2 = v28;
    if (!v29) {
      continue;
    }
    return result;
  }
}

BOOL sub_1CD159ED4(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 1);
      unint64_t v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1CBB0A088(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1CBB0A328(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1CBB0A3A8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v8 = a1 + 2;
      sub_1CBB0A088(a1, a1 + 1, a1 + 2);
      int v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    unint64_t v13 = *v8;
    if (*v9 < *v8)
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 8;
        if (v14 == 8) {
          break;
        }
        unint64_t v13 = *(unint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 >= v13)
        {
          unint64_t v16 = (unint64_t *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      unint64_t *v16 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    uint64_t v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t llvm::optimizeGlobalCtorsList(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  v90[10] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(a1 + 112);
  unsigned int v4 = *((_DWORD *)v3 + 8);
  if (v4 <= 1) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = v4;
  }
  if (v4 <= 0x10) {
    size_t v6 = v5;
  }
  else {
    size_t v6 = 17;
  }
  uint64_t v7 = *((unsigned int *)v3 + 2);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = 0;
  int v9 = 0;
  do
    int v9 = 33 * v9 + aLlvmGlobalCtor[v8++];
  while (v6 != v8);
  uint64_t v10 = *v3;
  uint64_t v11 = *v3 + 8 * v7 + 8;
  int v12 = 1;
  int v13 = v9;
  while (1)
  {
    uint64_t v14 = v13 & (v7 - 1);
    uint64_t v15 = *(void **)(v10 + 8 * v14);
    if (v15 != (void *)-8)
    {
      if (!v15) {
        return 0;
      }
      if (*(_DWORD *)(v11 + 4 * v14) == v9
        && v6 == *v15
        && !memcmp("llvm.global_ctors", (char *)v15 + *((unsigned int *)v3 + 5), v6))
      {
        break;
      }
    }
    int v13 = v12 + v14;
    ++v12;
  }
  if (v14 == -1) {
    return 0;
  }
  if ((int)v14 == v7) {
    return 0;
  }
  uint64_t v16 = *(void *)(*(void *)(v10 + 8 * (int)v14) + 8);
  if (!v16 || *(unsigned char *)(v16 + 16) != 3) {
    return 0;
  }
  unsigned int v19 = *(_DWORD *)(v16 + 32) & 0xF;
  if (v19 <= 8 && ((1 << v19) & 0x182) != 0) {
    return 0;
  }
  if ((*(_DWORD *)(v16 + 20) & 0x7FFFFFF) == 0) {
    return 0;
  }
  unsigned int v21 = v19 - 2;
  if (v21 < 9 && ((0x18Fu >> v21) & 1) != 0) {
    return 0;
  }
  if ((*(unsigned char *)(v16 + 80) & 2) != 0) {
    return 0;
  }
  uint64_t v22 = *(void *)(v16 - 32);
  if (!v22 || *(unsigned char *)(v22 + 16) != 8) {
    return 0;
  }
  int v24 = *(_DWORD *)(v22 + 20);
  if ((v24 & 0x40000000) != 0)
  {
    uint64_t v26 = *(void *)(v22 - 8);
    unint64_t v25 = v24 & 0x7FFFFFF;
  }
  else
  {
    unint64_t v25 = v24 & 0x7FFFFFF;
    uint64_t v26 = v22 - 32 * v25;
  }
  if (v25)
  {
    uint64_t v27 = 32 * v25;
    do
    {
      if (*(unsigned char *)(*(void *)v26 + 16) != 13)
      {
        __int16 v28 = (void *)(*(void *)v26 - 32 * (*(_DWORD *)(*(void *)v26 + 20) & 0x7FFFFFF));
        if (*(unsigned char *)(v28[4] + 16) != 19)
        {
          if (*(unsigned char *)(v28[4] + 16)) {
            return 0;
          }
          uint64_t v29 = *v28;
          unint64_t v30 = (void *)(*v28 + 24);
          if (*(_DWORD *)(v29 + 32) >= 0x41u) {
            unint64_t v30 = (void *)*v30;
          }
          if (*v30 < 0xFFFFuLL) {
            return 0;
          }
        }
      }
      v26 += 32;
      v27 -= 32;
    }
    while (v27);
  }
  __p = 0;
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  sub_1CBF7ACFC((uint64_t)&__p, v25);
  int v31 = *(_DWORD *)(v22 + 20);
  if ((v31 & 0x40000000) != 0)
  {
    unint64_t v33 = *(uint64_t **)(v22 - 8);
    uint64_t v32 = v31 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v32 = v31 & 0x7FFFFFF;
    unint64_t v33 = (uint64_t *)(v22 - 32 * v32);
  }
  if (v32)
  {
    unint64_t v34 = &v33[4 * v32];
    do
    {
      uint64_t v35 = *v33;
      if (*(unsigned char *)(*(void *)(*v33 - 32 * (*(_DWORD *)(*v33 + 20) & 0x7FFFFFF) + 32) + 16)) {
        uint64_t v36 = 0;
      }
      else {
        uint64_t v36 = *(void *)(*v33 - 32 * (*(_DWORD *)(*v33 + 20) & 0x7FFFFFF) + 32);
      }
      unint64_t v37 = v80;
      if (v80 >= v81)
      {
        unint64_t v39 = (char *)__p;
        uint64_t v40 = (v80 - (unsigned char *)__p) >> 3;
        unint64_t v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 61) {
          abort();
        }
        uint64_t v42 = v81 - (unsigned char *)__p;
        if ((v81 - (unsigned char *)__p) >> 2 > v41) {
          unint64_t v41 = v42 >> 2;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v41;
        }
        if (v43)
        {
          if (v43 >> 61) {
            sub_1CB833614();
          }
          uint64_t v44 = (char *)operator new(8 * v43);
        }
        else
        {
          uint64_t v44 = 0;
        }
        uint64_t v45 = &v44[8 * v40];
        *(void *)uint64_t v45 = v36;
        uint64_t v38 = v45 + 8;
        if (v37 != v39)
        {
          do
          {
            uint64_t v46 = *((void *)v37 - 1);
            v37 -= 8;
            *((void *)v45 - 1) = v46;
            v45 -= 8;
          }
          while (v37 != v39);
          unint64_t v37 = (char *)__p;
        }
        __p = v45;
        uint64_t v80 = v38;
        uint64_t v81 = &v44[8 * v43];
        if (v37) {
          operator delete(v37);
        }
      }
      else
      {
        *(void *)uint64_t v80 = v36;
        uint64_t v38 = v37 + 8;
      }
      uint64_t v80 = v38;
      uint64_t v47 = *(void *)(v35 - 32 * (*(_DWORD *)(v35 + 20) & 0x7FFFFFF));
      uint64_t v48 = (void *)(v47 + 24);
      if (*(_DWORD *)(v47 + 32) >= 0x41u) {
        uint64_t v48 = (void *)*v48;
      }
      if (*v48 != 0xFFFFLL) {
        *((void *)v38 - 1) = 0;
      }
      v33 += 4;
    }
    while (v33 != v34);
  }
  uint64_t v49 = (char *)__p;
  uint64_t v50 = v80;
  if (__p == v80)
  {
    uint64_t v17 = 0;
  }
  else
  {
    unint64_t v51 = (unint64_t)(v80 - (unsigned char *)__p) >> 3;
    uint64_t v52 = (v51 + 63) >> 6;
    uint64_t v84 = v87;
    int v86 = 6;
    if (v52 >= 7)
    {
      unsigned int v85 = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if ((v51 + 63) >> 6)
    {
      int64_t v53 = (char *)__p;
      bzero(v87, 8 * v52);
      uint64_t v49 = v53;
    }
    uint64_t v17 = 0;
    unsigned int v85 = (v51 + 63) >> 6;
    v87[12] = v51;
    if (v51 && v50 != v49)
    {
      uint64_t v54 = 0;
      char v55 = 0;
      unsigned int v56 = 1;
      do
      {
        uint64_t v57 = *(void *)&v49[8 * v54];
        if (v57)
        {
          if (*(void *)(v57 + 72) != v57 + 72)
          {
            int v58 = a2(a3);
            uint64_t v49 = (char *)__p;
            if (v58)
            {
              *((void *)__p + v54) = 0;
              char v55 = 1;
              *((void *)v84 + ((v56 - 1) >> 6)) |= 1 << (v56 - 1);
              LODWORD(v51) = v51 - 1;
              uint64_t v49 = (char *)__p;
            }
          }
        }
        uint64_t v54 = v56++;
      }
      while (v54 != (v80 - v49) >> 3 && v51 != 0);
      if (v55)
      {
        uint64_t v60 = *(_DWORD **)(v16 - 32);
        uint64_t v88 = v90;
        uint64_t v89 = 0xA00000000;
        int v61 = v60[5];
        uint64_t v62 = v61 & 0x7FFFFFF;
        if ((v61 & 0x7FFFFFF) != 0)
        {
          unsigned int v63 = 0;
          uint64_t v64 = 0;
          uint64_t v65 = v60;
          do
          {
            if (((*((void *)v84 + (v64 >> 6)) >> v64) & 1) == 0)
            {
              if (v63 >= HIDWORD(v89)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v88 + v63) = *(void *)&v65[-8 * (v60[5] & 0x7FFFFFF)];
              unsigned int v63 = v89 + 1;
              LODWORD(v89) = v89 + 1;
            }
            ++v64;
            v65 += 8;
          }
          while (v62 != v64);
        }
        else
        {
          unsigned int v63 = 0;
        }
        unint64_t v66 = llvm::ArrayType::get(*(llvm::ArrayType **)(*(void *)v60 + 24), (llvm::Type *)v63);
        uint64_t v67 = llvm::ConstantArray::get(v66, (llvm::Type *)v88, v89);
        if (*(void *)v67 != *(void *)v60)
        {
          unint64_t v68 = operator new(0x78uLL);
          int v69 = (llvm::Value *)(v68 + 8);
          v68[13] = v68[13] & 0x38000000 | 1;
          *(void *)unint64_t v68 = 0;
          *((void *)v68 + 1) = 0;
          *((void *)v68 + 2) = 0;
          *((void *)v68 + 3) = v68 + 8;
          unint64_t v70 = *(llvm::PointerType **)v67;
          char v71 = *(unsigned char *)(v16 + 80) & 1;
          unsigned int v72 = *(_DWORD *)(v16 + 32);
          __int16 v83 = 257;
          llvm::GlobalVariable::GlobalVariable((unint64_t *)v68 + 4, v70, v71, v72 & 0xF, (unint64_t)v67, &v82, (v72 >> 10) & 7, 0, 0);
          uint64_t v73 = *(void *)(v16 + 40);
          *((void *)v68 + 9) = v73;
          if ((*((unsigned char *)v68 + 55) & 0x10) != 0)
          {
            unint64_t v74 = *(llvm::ValueSymbolTable **)(v73 + 112);
            if (v74) {
              llvm::ValueSymbolTable::reinsertValue(v74, v69);
            }
          }
          uint64_t v75 = *(void *)(v16 + 56);
          *((void *)v68 + 11) = v75;
          *((void *)v68 + 12) = v16 + 56;
          uint64_t v76 = (char *)(v68 + 22);
          *(void *)(v75 + 8) = v76;
          *(void *)(v16 + 56) = v76;
          llvm::Value::takeName((int32x2_t ****)v69, (llvm::Value *)v16);
          if (*(void *)(v16 + 8))
          {
            if (*(void *)v69 != *(void *)v16) {
              int v69 = sub_1CC56C0C0((llvm *)0x31, v69, *(llvm::Constant **)v16, 0);
            }
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v16, v69, (llvm::Value *)1);
          }
          llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v16);
        }
        llvm::GlobalVariable::setInitializer(v16, v67);
        if (v88 != v90) {
          free(v88);
        }
        uint64_t v17 = 1;
      }
      else
      {
        uint64_t v17 = 0;
      }
    }
    if (v84 != v87) {
      free(v84);
    }
    uint64_t v49 = (char *)__p;
  }
  if (v49)
  {
    uint64_t v80 = v49;
    operator delete(v49);
  }
  return v17;
}

void *sub_1CD15A734(void *a1)
{
  *a1 = &unk_1F2647D48;
  unsigned int v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F2647DB0;
  unsigned int v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }

  return sub_1CB87DD48(a1);
}

uint64_t sub_1CD15A81C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(unsigned char *)(a1 + 16) == 3 && (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) == 0) {
      return 1;
    }
  }
  else if (*(void *)(a1 + 72) == a1 + 72 && (*(unsigned char *)(a1 + 34) & 0x80) == 0)
  {
    return 1;
  }
  if (((1 << (*(_DWORD *)(a1 + 32) & 0xF)) & 0x7D5) != 0) {
    return llvm::GlobalValue::isInterposable((llvm::GlobalValue *)a1);
  }
  return 1;
}

uint64_t sub_1CD15A87C(llvm::BasicBlock *a1)
{
  uint64_t result = llvm::BasicBlock::getTerminatingMustTailCall(a1);
  if (!result)
  {
    uint64_t result = llvm::BasicBlock::getTerminatingDeoptimizeCall(a1);
    if (!result)
    {
      uint64_t v3 = (void *)*((void *)a1 + 5);
      if (v3 == (void *)((char *)a1 + 40))
      {
        return 0;
      }
      else
      {
        if (v3) {
          unsigned int v4 = v3 - 3;
        }
        else {
          unsigned int v4 = 0;
        }
        if (*((unsigned __int8 *)v4 + 16) - 29 >= 0xB) {
          return 0;
        }
        else {
          return (uint64_t)v4;
        }
      }
    }
  }
  return result;
}

void sub_1CD15A8E0(unsigned int **a1, unsigned __int8 **a2, uint64_t a3)
{
  v41[2] = *MEMORY[0x1E4F143B8];
  unint64_t v5 = **a1;
  **a1 = v5 + 1;
  if (v5)
  {
    size_t v6 = (char *)v41 + 5;
    do
    {
      *--size_t v6 = (v5 % 0xA) | 0x30;
      BOOL v7 = v5 > 9;
      v5 /= 0xAuLL;
    }
    while (v7);
  }
  else
  {
    size_t v6 = (char *)v41 + 4;
    BYTE4(v41[0]) = 48;
  }
  sub_1CC028D80(v36, v6, (char *)v41 + 5, (char *)v41 + 5 - v6);
  int v9 = *a2;
  uint64_t v10 = (llvm::ValueAsMetadata *)a2;
  if ((*a2)[8] == 7)
  {
    uint64_t v11 = *(void *)a1[1];
    int v12 = *(llvm::ConstantInt **)v11;
    unsigned int v13 = *(_DWORD *)(v11 + 8);
    LODWORD(__p[1]) = v13 >> 8;
    if (v13 >> 8 >= 0x41) {
      operator new[]();
    }
    __p[0] = 0;
    uint64_t v10 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v12, (llvm::LLVMContext *)__p, v8);
    if (LODWORD(__p[1]) >= 0x41 && __p[0]) {
      MEMORY[0x1D25D9CB0](__p[0], 0x1000C8000313F17);
    }
    int v9 = *(unsigned __int8 **)v10;
  }
  uint64_t v14 = (uint64_t)a2[6];
  uint64_t v15 = a1[2];
  uint64_t v16 = (void **)v36[0];
  if (v37 >= 0) {
    uint64_t v16 = v36;
  }
  unint64_t v33 = (unsigned __int8 *)v16;
  unint64_t v34 = *(unsigned char **)a1[3];
  if (v37 >= 0) {
    size_t v17 = v37 & 0x7F;
  }
  else {
    size_t v17 = (size_t)v36[1];
  }
  unint64_t v18 = (uint64_t *)a1[5];
  uint64_t v19 = *(void *)a1[4];
  int v20 = *(_DWORD *)(v14 + 4);
  unint64_t v21 = sub_1CD15FBC0(*v18, v9);
  unint64_t v39 = v21;
  uint64_t v22 = sub_1CD5E3BA8(v18[1], (uint64_t *)&v39);
  BasicType = (llvm::MDNode *)v22[1];
  if (!BasicType)
  {
    if (v21)
    {
      int v24 = (char *)v41 + 5;
      do
      {
        *--int v24 = (v21 % 0xA) | 0x30;
        BOOL v7 = v21 > 9;
        v21 /= 0xAuLL;
      }
      while (v7);
    }
    else
    {
      int v24 = (char *)v41 + 4;
      BYTE4(v41[0]) = 48;
    }
    sub_1CC028D80(&v38, v24, (char *)v41 + 5, (char *)v41 + 5 - v24);
    unint64_t v25 = std::string::insert(&v38, 0, "ty");
    std::string::size_type v26 = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v41[0] = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (v41[0] >= 0) {
      uint64_t v27 = (unsigned __int8 *)__p;
    }
    else {
      uint64_t v27 = (unsigned __int8 *)__p[0];
    }
    if (v41[0] >= 0) {
      __int16 v28 = (void *)(HIBYTE(v41[0]) & 0x7F);
    }
    else {
      __int16 v28 = __p[1];
    }
    BasicType = llvm::DIBuilder::createBasicType(v18[2], v27, v28, v39, 7, 0);
    v22[1] = BasicType;
    if (SHIBYTE(v41[0]) < 0)
    {
      operator delete(__p[0]);
      BasicType = (llvm::MDNode *)v22[1];
    }
  }
  uint64_t v29 = sub_1CC582A74(*((uint64_t **)v15 + 1), (uint64_t)(v15 + 100), v34, v33, v17, 0, v19, v20, (uint64_t)BasicType, 1, 0, 0, 0);
  uint64_t v30 = (uint64_t)a1[2];
  Impl = llvm::DIExpression::getImpl(*(void **)(v30 + 8), 0, 0, 0, 1);
  uint64_t v32 = 0;
  if (a3) {
    uint64_t v32 = *(void *)(a3 + 40);
  }
  llvm::DIBuilder::insertDbgValueIntrinsic(v30, v10, (uint64_t)v29, (uint64_t)Impl, v14, v32, a3);
  if (v37 < 0) {
    operator delete(v36[0]);
  }
}

void *sub_1CD15AC74(uint64_t **a1, int a2, const llvm::APInt *a3)
{
  uint64_t v3 = (uint64_t)a1[1];
  uint64_t v4 = **a1;
  uint64_t v5 = *a1[2];
  size_t v6 = *(llvm::ConstantInt **)v5;
  unint64_t v7 = *(unsigned int *)(v5 + 8);
  unsigned int v18 = v7 >> 8;
  if (v7 >> 8 > 0x40) {
    operator new[]();
  }
  if (v7 <= 0xFF) {
    LODWORD(v8) = 0;
  }
  else {
    unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v7) + 63);
  }
  size_t v17 = (unsigned __int8 *)(v8 & a2);
  uint64_t v10 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v6, (llvm::LLVMContext *)&v17, a3);
  if (v18 >= 0x41 && v17) {
    MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
  }
  uint64_t v16 = llvm::ValueAsMetadata::get(v10, v9);
  Impl = (unsigned __int8 *)llvm::MDTuple::getImpl(v3, &v16, 1, 0, 1);
  size_t v17 = Impl;
  uint64_t v12 = *(void *)(v4 + 48);
  uint64_t v13 = *(unsigned int *)(v12 + 8);
  if (v13 >= *(_DWORD *)(v12 + 12)) {
    return (void *)sub_1CC608328(*(void *)(v4 + 48), &v17);
  }
  uint64_t v14 = Impl;
  uint64_t result = (void *)(*(void *)v12 + 8 * v13);
  *uint64_t result = v14;
  if (v14)
  {
    uint64_t result = (void *)llvm::MetadataTracking::track((uint64_t)result, v14, 2);
    LODWORD(v13) = *(_DWORD *)(v12 + 8);
  }
  *(_DWORD *)(v12 + 8) = v13 + 1;
  return result;
}

uint64_t llvm::stripDebugifyMetadata(llvm *this, llvm::Module *a2)
{
  unsigned int v2 = this;
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v40 = "llvm.debugify";
  __int16 v43 = 259;
  uint64_t NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const char **)&v40);
  if (NamedMetadata) {
    llvm::Module::eraseNamedMetadata(v2, NamedMetadata);
  }
  char v5 = llvm::StripDebugInfo(v2, v3);
  if (NamedMetadata) {
    char v6 = 1;
  }
  else {
    char v6 = v5;
  }
  unint64_t v7 = (uint64_t *)*((void *)v2 + 14);
  unsigned int v8 = *((_DWORD *)v7 + 8);
  if (v8 <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = v8;
  }
  if (v8 <= 0xD) {
    size_t v10 = v9;
  }
  else {
    size_t v10 = 14;
  }
  uint64_t v11 = *((unsigned int *)v7 + 2);
  if (v11)
  {
    char v37 = v2;
    char v38 = v6;
    uint64_t v12 = 0;
    int v13 = 0;
    do
      int v13 = 33 * v13 + aLlvmDbgValue_1[v12++];
    while (v10 != v12);
    uint64_t v14 = *v7;
    uint64_t v15 = *v7 + 8 * v11 + 8;
    int v16 = 1;
    int v17 = v13;
    while (1)
    {
      uint64_t v18 = v17 & (v11 - 1);
      uint64_t v19 = *(void **)(v14 + 8 * v18);
      if (v19 != (void *)-8)
      {
        if (!v19) {
          goto LABEL_27;
        }
        if (*(_DWORD *)(v15 + 4 * v18) == v13
          && v10 == *v19
          && !memcmp("llvm.dbg.value", (char *)v19 + *((unsigned int *)v7 + 5), v10))
        {
          break;
        }
      }
      int v17 = v16 + v18;
      ++v16;
    }
    if (v18 == -1)
    {
LABEL_27:
      char v6 = v38;
    }
    else
    {
      char v6 = v38;
      if ((int)v18 != v11)
      {
        int v20 = *(llvm::Function **)(*(void *)(v14 + 8 * (int)v18) + 8);
        if (v20)
        {
          unsigned int v2 = v37;
          if (!*((unsigned char *)v20 + 16))
          {
            llvm::Function::eraseFromParent(v20);
            char v6 = 1;
          }
          goto LABEL_29;
        }
      }
    }
    unsigned int v2 = v37;
  }
LABEL_29:
  uint64_t v40 = "llvm.module.flags";
  __int16 v43 = 259;
  uint64_t v21 = llvm::Module::getNamedMetadata(v2, (const char **)&v40);
  if (v21)
  {
    uint64_t v23 = v21;
    int v24 = *(_DWORD *)(*(void *)(v21 + 48) + 8);
    uint64_t v40 = v42;
    uint64_t v41 = 0x400000000;
    sub_1CD87CB0C((uint64_t)&v40, v23, 0, v23, v24);
    llvm::NamedMDNode::clearOperands(v23);
    if (v41)
    {
      unint64_t v25 = (unsigned __int8 **)v40;
      uint64_t v26 = 8 * v41;
      do
      {
        uint64_t v27 = *v25;
        uint64_t v28 = *(void *)(*(void *)&(*v25)[-8 * *((unsigned int *)*v25 + 2) + 8] + 8);
        if (*(void *)v28 == 18
          && ((uint64_t v29 = *(void *)(v28 + 24),
               uint64_t v30 = *(void *)(v28 + 32),
               int v31 = *(unsigned __int16 *)(v28 + 40),
               v29 == 0x6E49206775626544)
            ? (BOOL v32 = v30 == 0x6973726556206F66)
            : (BOOL v32 = 0),
              v32 ? (BOOL v33 = v31 == 28271) : (BOOL v33 = 0),
              v33))
        {
          char v6 = 1;
        }
        else
        {
          unint64_t v39 = *v25;
          uint64_t v34 = *(void *)(v23 + 48);
          uint64_t v35 = *(unsigned int *)(v34 + 8);
          if (v35 >= *(_DWORD *)(v34 + 12))
          {
            sub_1CC608328(*(void *)(v23 + 48), &v39);
          }
          else
          {
            uint64_t v36 = (unsigned __int8 **)(*(void *)v34 + 8 * v35);
            *uint64_t v36 = v27;
            llvm::MetadataTracking::track((uint64_t)v36, v27, 2);
            ++*(_DWORD *)(v34 + 8);
          }
        }
        ++v25;
        v26 -= 8;
      }
      while (v26);
    }
    if (!*(_DWORD *)(*(void *)(v23 + 48) + 8)) {
      llvm::Module::eraseNamedMetadata(*(llvm::Module **)(v23 + 40), (llvm::NamedMDNode *)v23);
    }
    if (v40 != v42) {
      free(v40);
    }
  }
  return v6 & 1;
}

BOOL llvm::collectDebugInfoMetadata(llvm::Module *a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, size_t a6)
{
  uint64_t v79 = "llvm.dbg.cu";
  __int16 v83 = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(a1, &v79);
  uint64_t v12 = NamedMetadata;
  if (NamedMetadata)
  {
    if (a2 != a3)
    {
      uint64_t v13 = (uint64_t)(*(void *)(a4 + 32) - *(void *)(a4 + 24)) >> 4;
      uint64_t v78 = a4 + 96;
      uint64_t v76 = a4 + 144;
      uint64_t v77 = a4 + 48;
      uint64_t v14 = &qword_1EBCFC000;
      uint64_t v72 = NamedMetadata;
      uint64_t v73 = a3;
      uint64_t v74 = a4;
      do
      {
        if (a2) {
          uint64_t v15 = a2 - 56;
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v16 = *(unsigned int *)(a4 + 16);
        unsigned int v17 = v15 >> 4;
        if (v16)
        {
          uint64_t v18 = *(void *)a4;
          LODWORD(v19) = (v17 ^ (v15 >> 9)) & (v16 - 1);
          int v20 = (uint64_t *)(*(void *)a4 + 16 * v19);
          uint64_t v21 = *v20;
          if (v15 == *v20)
          {
LABEL_13:
            if (v20 != (uint64_t *)(v18 + 16 * v16)) {
              goto LABEL_88;
            }
          }
          else
          {
            int v22 = 1;
            while (v21 != -4096)
            {
              int v23 = v19 + v22++;
              uint64_t v19 = v23 & (v16 - 1);
              uint64_t v21 = *(void *)(v18 + 16 * v19);
              if (v15 == v21)
              {
                int v20 = (uint64_t *)(v18 + 16 * v19);
                goto LABEL_13;
              }
            }
          }
        }
        if ((sub_1CD15A81C(v15) & 1) == 0)
        {
          unint64_t v24 = v13 + 1;
          if (v24 >= v14[44]) {
            return v12 != 0;
          }
          if ((*(unsigned char *)(v15 + 23) & 0x20) == 0) {
            goto LABEL_32;
          }
          uint64_t v25 = ***(void ***)v15;
          uint64_t v79 = (const char *)v15;
          int v26 = *(_DWORD *)(v25 + 2496);
          if (!v26)
          {
            uint64_t v65 = 0;
            goto LABEL_94;
          }
          uint64_t v27 = *(void *)(v25 + 2480);
          int v28 = v26 - 1;
          unsigned int v29 = v28 & (v17 ^ (v15 >> 9));
          uint64_t v30 = (void *)(v27 + 40 * v29);
          uint64_t v31 = *v30;
          if (*v30 != v15)
          {
            BOOL v32 = 0;
            int v33 = 1;
            while (v31 != -4096)
            {
              if (v32) {
                BOOL v34 = 0;
              }
              else {
                BOOL v34 = v31 == -8192;
              }
              if (v34) {
                BOOL v32 = v30;
              }
              unsigned int v35 = v29 + v33++;
              unsigned int v29 = v35 & v28;
              uint64_t v30 = (void *)(v27 + 40 * v29);
              uint64_t v31 = *v30;
              if (*v30 == v15) {
                goto LABEL_27;
              }
            }
            if (v32) {
              uint64_t v65 = v32;
            }
            else {
              uint64_t v65 = v30;
            }
LABEL_94:
            uint64_t v30 = sub_1CC609054(v25 + 2480, (uint64_t)&v79, (uint64_t *)&v79, v65);
            unint64_t v66 = v79;
            uint64_t v30[4] = 0;
            void v30[3] = 0;
            void *v30 = v66;
            v30[1] = v30 + 3;
            void v30[2] = 0x100000000;
          }
LABEL_27:
          uint64_t v36 = *((unsigned int *)v30 + 4);
          if (v36)
          {
            char v37 = (void *)(v30[1] + 8);
            uint64_t v38 = 16 * v36;
            while (*((_DWORD *)v37 - 2))
            {
              uint64_t v39 = 0;
              v37 += 2;
              v38 -= 16;
              if (!v38) {
                goto LABEL_33;
              }
            }
            uint64_t v39 = *v37;
          }
          else
          {
LABEL_32:
            uint64_t v39 = 0;
          }
LABEL_33:
          uint64_t v75 = v24;
          uint64_t v79 = (const char *)v15;
          uint64_t v80 = v39;
          sub_1CD87CBB8(a4, (uint64_t *)&v79, &v80);
          if (v39)
          {
            uint64_t v40 = *(void *)(v39 - 8 * *(unsigned int *)(v39 + 8) + 56);
            if (v40) {
              uint64_t v41 = (const char **)(v40 - 8 * *(unsigned int *)(v40 + 8));
            }
            else {
              uint64_t v41 = 0;
            }
            while (v41 != (const char **)v40)
            {
              uint64_t v42 = *v41;
              if (**v41 != 25) {
                uint64_t v42 = 0;
              }
              uint64_t v79 = v42;
              if (v42) {
                *(_DWORD *)sub_1CD7805E4(v76, (uint64_t *)&v79) = 0;
              }
              ++v41;
            }
          }
          uint64_t v43 = v15 + 72;
          uint64_t v44 = *(void *)(v15 + 80);
          if (v44 != v15 + 72)
          {
            do
            {
              uint64_t v45 = v44 - 24;
              if (!v44) {
                uint64_t v45 = 0;
              }
              uint64_t v46 = v45 + 40;
              for (uint64_t i = *(void *)(v45 + 48); i != v46; uint64_t i = *(void *)(i + 8))
              {
                if (i) {
                  uint64_t v48 = i - 24;
                }
                else {
                  uint64_t v48 = 0;
                }
                if (*(unsigned char *)(v48 + 16) != 83)
                {
                  if (dword_1EBCFC228 >= 1
                    && ((int v49 = sub_1CC5817B4(v48)) == 0 ? (v50 = 0) : (v50 = (llvm::DbgVariableIntrinsic *)v48),
                        i && v49))
                  {
                    if (v39)
                    {
                      uint64_t v51 = *(void *)(v48 + 48);
                      if ((*(_DWORD *)(v51 + 8) != 2 || !*(void *)(v51 - 8)) && !sub_1CD773FC0(v50))
                      {
                        uint64_t v79 = 0;
                        uint64_t v79 = *(const char **)(((void *)v50 - 4 * (*((_DWORD *)v50 + 5) & 0x7FFFFFF))[4] + 24);
                        uint64_t v52 = (_DWORD *)sub_1CD7805E4(v76, (uint64_t *)&v79);
                        ++*v52;
                      }
                    }
                  }
                  else if (!sub_1CBF63B28(v48))
                  {
                    uint64_t v79 = (const char *)v48;
                    uint64_t v80 = 4;
                    uint64_t v81 = 0;
                    uint64_t v82 = (int32x2_t ****)v48;
                    if (v48 != -8192 && v48 != -4096 && v48) {
                      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v80);
                    }
                    sub_1CD87CCF8(v78, (uint64_t *)&v79, &v80);
                    if (v82 != (int32x2_t ****)-8192 && v82 != (int32x2_t ****)-4096 && v82)
                    {
                      unint64_t v53 = v80 & 0xFFFFFFFFFFFFFFF8;
                      *(void *)(v80 & 0xFFFFFFFFFFFFFFF8) = v81;
                      if (v81)
                      {
                        *uint64_t v81 = *v81 & 7 | v53;
                      }
                      else
                      {
                        uint64_t v54 = v82;
                        char v55 = ***v82;
                        unint64_t v56 = (unint64_t)v55[303];
                        if (v56 <= v53)
                        {
                          uint64_t v57 = v55[305].u32[0];
                          if (v56 + 16 * v57 > v53)
                          {
                            unsigned int v58 = v57 - 1;
                            LODWORD(v59) = v58 & ((v82 >> 4) ^ (v82 >> 9));
                            uint64_t v60 = (int32x2_t *****)(v56 + 16 * v59);
                            int v61 = *v60;
                            if (v82 == *v60)
                            {
LABEL_81:
                              _DWORD *v60 = (int32x2_t ****)-8192;
                              v55[304] = vadd_s32(v55[304], (int32x2_t)0x1FFFFFFFFLL);
                              uint64_t v54 = v82;
                            }
                            else
                            {
                              int v62 = 1;
                              while (v61 != (int32x2_t ****)-4096)
                              {
                                int v63 = v59 + v62++;
                                uint64_t v59 = v63 & v58;
                                int v61 = *(int32x2_t *****)(v56 + 16 * v59);
                                if (v82 == v61)
                                {
                                  uint64_t v60 = (int32x2_t *****)(v56 + 16 * v59);
                                  goto LABEL_81;
                                }
                              }
                            }
                            *((unsigned char *)v54 + 17) &= ~1u;
                          }
                        }
                      }
                    }
                    BOOL v64 = *(void *)(v48 + 48) != 0;
                    uint64_t v79 = (const char *)v48;
                    LOBYTE(v80) = v64;
                    sub_1CD87CE44(v77, (uint64_t *)&v79, (char *)&v80);
                  }
                }
              }
              uint64_t v44 = *(void *)(v44 + 8);
            }
            while (v44 != v43);
            uint64_t v12 = v72;
          }
          a3 = v73;
          a4 = v74;
          uint64_t v13 = v75;
          uint64_t v14 = &qword_1EBCFC000;
        }
LABEL_88:
        a2 = *(void *)(a2 + 8);
      }
      while (a2 != a3);
    }
  }
  else
  {
    if (byte_1EBCFC0A0) {
      uint64_t v67 = (llvm::raw_ostream *)llvm::nulls(0);
    }
    else {
      uint64_t v67 = (llvm::raw_ostream *)llvm::errs(0);
    }
    unint64_t v68 = v67;
    uint64_t v70 = *((void *)v67 + 3);
    int v69 = (void *)*((void *)v67 + 4);
    if (a6 <= v70 - (uint64_t)v69)
    {
      if (a6)
      {
        memcpy(v69, a5, a6);
        int v69 = (void *)(*((void *)v68 + 4) + a6);
        *((void *)v68 + 4) = v69;
      }
    }
    else
    {
      llvm::raw_ostream::write(v68, (const char *)a5, a6);
      int v69 = (void *)*((void *)v68 + 4);
    }
    if (*((void *)v68 + 3) - (void)v69 > 0x24uLL)
    {
      qmemcpy(v69, ": Skipping module without debug info\n", 37);
      *((void *)v68 + 4) += 37;
    }
    else
    {
      llvm::raw_ostream::write(v68, ": Skipping module without debug info\n", 0x25uLL);
    }
  }
  return v12 != 0;
}

uint64_t llvm::checkDebugInfoMetadata(llvm::Module *a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, size_t a6, void *a7, size_t a8, unsigned char *a9, size_t a10)
{
  uint64_t v354 = *MEMORY[0x1E4F143B8];
  uint64_t v337 = (void **)"llvm.dbg.cu";
  LOWORD(v340) = 259;
  if (llvm::Module::getNamedMetadata(a1, (const char **)&v337))
  {
    __leuint64_t n = a8;
    __int16 v276 = a1;
    uint64_t v268 = a5;
    size_t v269 = a6;
    __src = a7;
    v318[1] = 0;
    v318[0] = 0;
    int v319 = 0;
    long long v320 = 0u;
    memset(v321, 0, 28);
    long long v322 = 0u;
    memset(v323, 0, 28);
    long long v324 = 0u;
    memset(v325, 0, 28);
    uint64_t v328 = 0;
    BOOL v326 = 0;
    unsigned int v327 = 0;
    uint64_t v280 = a4;
    if (a2 == a3)
    {
LABEL_13:
      uint64_t v337 = (void **)"llvm.dbg.cu";
      LOWORD(v340) = 259;
      uint64_t v24 = ***(void ***)(llvm::Module::getNamedMetadata(v276, (const char **)&v337) + 48);
      if (*(unsigned char *)v24 == 15 || (uint64_t v24 = *(void *)(v24 - 8 * *(unsigned int *)(v24 + 8))) != 0)
      {
        uint64_t v25 = *(void *)(v24 - 8 * *(unsigned int *)(v24 + 8));
        if (!v25)
        {
          size_t v28 = 0;
          char v277 = 0;
          goto LABEL_18;
        }
        int v26 = *(void **)(v25 + 8);
        size_t v29 = *v26;
        uint64_t v27 = (const char *)(v26 + 3);
        size_t v28 = v29;
      }
      else
      {
        size_t v28 = 0;
        uint64_t v27 = "";
      }
      char v277 = (llvm::Module *)v27;
LABEL_18:
      size_t v30 = __len;
      v313[0] = 0;
      v313[1] = 0;
      int v314 = 0;
      sub_1CBFCBCC4((uint64_t)v313, a4);
      uint64_t v315 = 0;
      uint64_t v316 = 0;
      uint64_t v317 = 0;
      sub_1CC0C57E8(&v315, *(unsigned char **)(a4 + 24), *(unsigned char **)(a4 + 32), (uint64_t)(*(void *)(a4 + 32) - *(void *)(a4 + 24)) >> 4);
      v308[0] = 0;
      v308[1] = 0;
      int v309 = 0;
      sub_1CBFCBCC4((uint64_t)v308, (uint64_t)v318);
      unint64_t v310 = 0;
      unint64_t v311 = 0;
      uint64_t v312 = 0;
      sub_1CC0C57E8(&v310, (unsigned char *)v320, *((unsigned char **)&v320 + 1), (uint64_t)(*((void *)&v320 + 1) - v320) >> 4);
      v303[0] = 0;
      v303[1] = 0;
      int v304 = 0;
      sub_1CBFCBCC4((uint64_t)v303, a4 + 48);
      uint64_t v305 = 0;
      uint64_t v306 = 0;
      uint64_t v307 = 0;
      sub_1CC0C57E8(&v305, *(unsigned char **)(a4 + 72), *(unsigned char **)(a4 + 80), (uint64_t)(*(void *)(a4 + 80) - *(void *)(a4 + 72)) >> 4);
      v298[0] = 0;
      v298[1] = 0;
      int v299 = 0;
      sub_1CBFCBCC4((uint64_t)v298, (uint64_t)&v321[1]);
      uint64_t v300 = 0;
      uint64_t v301 = 0;
      uint64_t v302 = 0;
      sub_1CC0C57E8(&v300, (unsigned char *)v322, *((unsigned char **)&v322 + 1), (uint64_t)(*((void *)&v322 + 1) - v322) >> 4);
      v293[0] = 0;
      v293[1] = 0;
      int v294 = 0;
      sub_1CBFCBCC4((uint64_t)v293, a4 + 96);
      unint64_t v295 = 0;
      uint64_t v296 = 0;
      uint64_t v297 = 0;
      uint64_t v31 = *(void *)(a4 + 120);
      uint64_t v32 = *(void *)(a4 + 128);
      int64_t v33 = v32 - v31;
      if (v32 != v31)
      {
        if (v33 < 0) {
LABEL_484:
        }
          abort();
        uint64_t v34 = v33 >> 5;
        unsigned int v35 = (char *)operator new(v33);
        uint64_t v36 = 0;
        unint64_t v295 = v35;
        uint64_t v296 = v35;
        uint64_t v297 = &v35[32 * v34];
        do
        {
          sub_1CD15FC6C(&v35[v36], (void *)(v31 + v36));
          v36 += 32;
        }
        while (v31 + v36 != v32);
        uint64_t v296 = &v35[v36];
        size_t v30 = __len;
      }
      size_t v37 = a10;
      v288[0] = 0;
      v288[1] = 0;
      int v289 = 0;
      sub_1CBFCBCC4((uint64_t)v288, v280 + 144);
      uint64_t v290 = 0;
      uint64_t v291 = 0;
      uint64_t v292 = 0;
      sub_1CC0C57E8(&v290, *(unsigned char **)(v280 + 168), *(unsigned char **)(v280 + 176), (uint64_t)(*(void *)(v280 + 176) - *(void *)(v280 + 168)) >> 4);
      v283[0] = 0;
      v283[1] = 0;
      int v284 = 0;
      sub_1CBFCBCC4((uint64_t)v283, (uint64_t)&v325[1]);
      uint64_t v285 = 0;
      uint64_t v286 = 0;
      uint64_t v287 = 0;
      unint64_t v38 = (unint64_t)sub_1CC0C57E8(&v285, v326, v327, (v327 - v326) >> 4);
      long long v281 = 0uLL;
      unint64_t v282 = 0;
      uint64_t v40 = v310;
      uint64_t v39 = v311;
      if (v310 == v311)
      {
        char v279 = 1;
        uint64_t v41 = v277;
LABEL_25:
        uint64_t v42 = v300;
        uint64_t v43 = v301;
        if (v300 == v301)
        {
          char v270 = 1;
LABEL_27:
          uint64_t v45 = v290;
          uint64_t v44 = v291;
          if (v290 == v291)
          {
            LOBYTE(v46) = 1;
            size_t v47 = a10;
          }
          else
          {
            LOBYTE(v46) = 1;
            size_t v47 = a10;
            do
            {
              unint64_t v38 = sub_1CD87C6C0((uint64_t)v283, *(void *)v45);
              if (v286 != v38 && *(_DWORD *)(v45 + 8) > *(_DWORD *)(v38 + 8))
              {
                if (v47)
                {
                  sub_1CBF2C538(&v337, "metadata", 8uLL);
                  sub_1CD452690((llvm::json::Value *)&v339, "dbg-var-intrinsic", 0x11uLL);
                  sub_1CBF2C538(v341, "name", 4uLL);
                  uint64_t v217 = *(void *)(*(void *)v45 - 8 * *(unsigned int *)(*(void *)v45 + 8) + 8);
                  if (v217)
                  {
                    uint64_t v223 = *(void **)(v217 + 8);
                    unint64_t v224 = *v223;
                    int v219 = (unsigned __int8 *)(v223 + 3);
                    unint64_t v218 = v224;
                  }
                  else
                  {
                    unint64_t v218 = 0;
                    int v219 = 0;
                  }
                  sub_1CD452690((llvm::json::Value *)v342, v219, v218);
                  sub_1CBF2C538(v343, "fn-name", 7uLL);
                  for (uint64_t i = *(void *)(*(void *)v45 - 8 * *(unsigned int *)(*(void *)v45 + 8));
                        (*(unsigned char *)i & 0xFE) == 0x12;
                  uint64_t v226 = *(void *)(i - 8 * *(unsigned int *)(i + 8) + 16);
                  if (v226)
                  {
                    uint64_t v235 = *(void **)(v226 + 8);
                    unint64_t v236 = *v235;
                    unint64_t v228 = (unsigned __int8 *)(v235 + 3);
                    unint64_t v227 = v236;
                  }
                  else
                  {
                    unint64_t v227 = 0;
                    unint64_t v228 = 0;
                  }
                  sub_1CD452690((llvm::json::Value *)v344, v228, v227);
                  sub_1CBF2C538(v345, "action", 6uLL);
                  sub_1CD452690((llvm::json::Value *)v346, "drop", 4uLL);
                  sub_1CD451B70((uint64_t)&v349, (uint64_t)&v337, 4);
                  LOWORD(v352.__r_.__value_.__l.__data_) = 7;
                  *(_OWORD *)&v352.__r_.__value_.__r.__words[1] = __PAIR128__(v350, v349);
                  unint64_t v349 = 0;
                  *(void *)&long long v350 = 0;
                  int v353 = DWORD2(v350);
                  DWORD2(v350) = 0;
                  uint64_t v237 = *((void *)&v281 + 1);
                  if (*((void *)&v281 + 1) >= v282)
                  {
                    uint64_t v238 = sub_1CBF2C6D0((unsigned __int16 **)&v281, (unsigned __int16 *)&v352);
                  }
                  else
                  {
                    llvm::json::Value::moveFrom(*((uint64_t *)&v281 + 1), (unsigned __int16 *)&v352);
                    uint64_t v238 = v237 + 32;
                  }
                  *((void *)&v281 + 1) = v238;
                  llvm::json::Value::destroy((llvm::json::Value *)&v352);
                  sub_1CD452448((unsigned int *)&v349);
                  MEMORY[0x1D25D9CD0](v349, 8);
                  uint64_t v46 = 224;
                  do
                  {
                    llvm::json::Value::destroy((llvm::json::Value *)((char *)&v334 + v46));
                    unint64_t v38 = (unint64_t)sub_1CB833F88((uint64_t *)((char *)&__p[-1] + v46), 0);
                    v46 -= 56;
                  }
                  while (v46);
                }
                else
                {
                  if (byte_1EBCFC0A0) {
                    uint64_t v216 = (llvm::raw_ostream *)llvm::nulls((llvm *)v38);
                  }
                  else {
                    uint64_t v216 = (llvm::raw_ostream *)llvm::errs((llvm *)v38);
                  }
                  uint64_t v220 = v216;
                  uint64_t v221 = *((void *)v216 + 4);
                  if ((unint64_t)(*((void *)v216 + 3) - v221) > 8)
                  {
                    *(unsigned char *)(v221 + 8) = 32;
                    *(void *)uint64_t v221 = *(void *)"WARNING: ";
                    BOOL v222 = (void *)(*((void *)v216 + 4) + 9);
                    *((void *)v220 + 4) = v222;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v216, "WARNING: ", 9uLL);
                    BOOL v222 = (void *)*((void *)v220 + 4);
                  }
                  if (v30 <= *((void *)v220 + 3) - (void)v222)
                  {
                    if (v30)
                    {
                      memcpy(v222, __src, v30);
                      BOOL v222 = (void *)(*((void *)v220 + 4) + v30);
                      *((void *)v220 + 4) = v222;
                    }
                  }
                  else
                  {
                    llvm::raw_ostream::write(v220, (const char *)__src, v30);
                    BOOL v222 = (void *)*((void *)v220 + 4);
                  }
                  if (*((void *)v220 + 3) - (void)v222 > 0x24uLL)
                  {
                    qmemcpy(v222, " drops dbg.value()/dbg.declare() for ", 37);
                    double v229 = (_WORD *)(*((void *)v220 + 4) + 37);
                    *((void *)v220 + 4) = v229;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v220, " drops dbg.value()/dbg.declare() for ", 0x25uLL);
                    double v229 = (_WORD *)*((void *)v220 + 4);
                  }
                  uint64_t v230 = *(void *)(*(void *)v45 - 8 * *(unsigned int *)(*(void *)v45 + 8) + 8);
                  if (v230)
                  {
                    unint64_t v231 = *(size_t **)(v230 + 8);
                    size_t v234 = *v231;
                    uint64_t v232 = v231 + 3;
                    size_t v233 = v234;
                    if (v234 <= *((void *)v220 + 3) - (void)v229)
                    {
                      if (v233)
                      {
                        memcpy(v229, v232, v233);
                        double v229 = (_WORD *)(*((void *)v220 + 4) + v233);
                        *((void *)v220 + 4) = v229;
                      }
                    }
                    else
                    {
                      llvm::raw_ostream::write(v220, (const char *)v232, v233);
                      double v229 = (_WORD *)*((void *)v220 + 4);
                    }
                    size_t v47 = a10;
                  }
                  if (*((void *)v220 + 3) - (void)v229 > 5uLL)
                  {
                    v229[2] = 8301;
                    *(_DWORD *)double v229 = 1869768224;
                    uint64_t v239 = *((void *)v220 + 4) + 6;
                    *((void *)v220 + 4) = v239;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v220, " from ", 6uLL);
                    uint64_t v239 = *((void *)v220 + 4);
                  }
                  if ((unint64_t)(*((void *)v220 + 3) - v239) > 8)
                  {
                    *(unsigned char *)(v239 + 8) = 32;
                    *(void *)uint64_t v239 = *(void *)"function ";
                    *((void *)v220 + 4) += 9;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v220, "function ", 9uLL);
                  }
                  for (uint64_t j = *(void *)(*(void *)v45 - 8 * *(unsigned int *)(*(void *)v45 + 8));
                        (*(unsigned char *)j & 0xFE) == 0x12;
                  uint64_t v241 = *(void *)(j - 8 * *(unsigned int *)(j + 8) + 16);
                  int v242 = (_DWORD *)*((void *)v220 + 4);
                  if (v241)
                  {
                    uint64_t v243 = *(size_t **)(v241 + 8);
                    size_t v246 = *v243;
                    uint64_t v244 = v243 + 3;
                    size_t v245 = v246;
                    if (v246 <= *((void *)v220 + 3) - (void)v242)
                    {
                      if (v245)
                      {
                        memcpy(v242, v244, v245);
                        int v242 = (_DWORD *)(*((void *)v220 + 4) + v245);
                        *((void *)v220 + 4) = v242;
                      }
                    }
                    else
                    {
                      llvm::raw_ostream::write(v220, (const char *)v244, v245);
                      int v242 = (_DWORD *)*((void *)v220 + 4);
                    }
                    size_t v47 = a10;
                  }
                  if (*((void *)v220 + 3) - (void)v242 > 6uLL)
                  {
                    *(_DWORD *)((char *)v242 + 3) = 543517801;
                    _DWORD *v242 = 1768302624;
                    unint64_t v38 = *((void *)v220 + 4) + 7;
                    *((void *)v220 + 4) = v38;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v220, " (file ", 7uLL);
                    unint64_t v38 = *((void *)v220 + 4);
                  }
                  if (v28 <= *((void *)v220 + 3) - v38)
                  {
                    if (v28)
                    {
                      memcpy((void *)v38, v277, v28);
                      unint64_t v38 = *((void *)v220 + 4) + v28;
                      *((void *)v220 + 4) = v38;
                    }
                  }
                  else
                  {
                    llvm::raw_ostream::write(v220, (const char *)v277, v28);
                    unint64_t v38 = *((void *)v220 + 4);
                  }
                  if (*((void *)v220 + 3) - v38 > 1)
                  {
                    LOBYTE(v46) = 0;
                    *(_WORD *)unint64_t v38 = 2601;
                    *((void *)v220 + 4) += 2;
                  }
                  else
                  {
                    unint64_t v38 = (unint64_t)llvm::raw_ostream::write(v220, ")\n", 2uLL);
                    LOBYTE(v46) = 0;
                  }
                }
              }
              v45 += 16;
            }
            while (v45 != v44);
          }
          char v22 = v279 & v270 & v46;
          if (v30) {
            uint64_t v48 = __src;
          }
          else {
            uint64_t v48 = v268;
          }
          if (v30) {
            size_t v49 = v30;
          }
          else {
            size_t v49 = v269;
          }
          uint64_t v50 = v280;
          if (v47 && (void)v281 != *((void *)&v281 + 1))
          {
            __dst.__val_ = 0;
            __dst.__cat_ = std::system_category();
            uint64_t v51 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v337, a9, v47, (uint64_t)&__dst, 7);
            if (__dst.__val_)
            {
              uint64_t v247 = (llvm::raw_ostream *)llvm::errs(v51);
              uint64_t v248 = v247;
              uint64_t v249 = (void *)*((void *)v247 + 4);
              if (*((void *)v247 + 3) - (void)v249 > 0x14uLL)
              {
                qmemcpy(v249, "Could not open file: ", 21);
                *((void *)v247 + 4) += 21;
              }
              else
              {
                llvm::raw_ostream::write(v247, "Could not open file: ", 0x15uLL);
              }
              std::error_code::message(&v352, &__dst);
              if ((v352.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v250 = &v352;
              }
              else {
                uint64_t v250 = (std::string *)v352.__r_.__value_.__r.__words[0];
              }
              if ((v352.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                size_t size = *((unsigned char *)&v352.__r_.__value_.__s + 23) & 0x7F;
              }
              else {
                size_t size = v352.__r_.__value_.__l.__size_;
              }
              llvm::raw_ostream::write(v248, (const char *)v250, size);
              uint64_t v252 = (_WORD *)*((void *)v248 + 4);
              if (*((void *)v248 + 3) - (void)v252 > 1uLL)
              {
                *uint64_t v252 = 8236;
                uint64_t v253 = (void *)(*((void *)v248 + 4) + 2);
                *((void *)v248 + 4) = v253;
              }
              else
              {
                llvm::raw_ostream::write(v248, ", ", 2uLL);
                uint64_t v253 = (void *)*((void *)v248 + 4);
              }
              uint64_t v50 = v280;
              if (v47 <= *((void *)v248 + 3) - (void)v253)
              {
                memcpy(v253, a9, v47);
                uint64_t v254 = (unsigned char *)(*((void *)v248 + 4) + v47);
                *((void *)v248 + 4) = v254;
              }
              else
              {
                llvm::raw_ostream::write(v248, a9, v47);
                uint64_t v254 = (unsigned char *)*((void *)v248 + 4);
              }
              if ((unint64_t)v254 >= *((void *)v248 + 3))
              {
                llvm::raw_ostream::write(v248, 10);
              }
              else
              {
                *((void *)v248 + 4) = v254 + 1;
                *uint64_t v254 = 10;
              }
              if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v352.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              uint64_t v52 = v340;
              if ((unint64_t)(v339 - (void)v340) > 8)
              {
                *((unsigned char *)v340 + 8) = 34;
                *uint64_t v52 = *(void *)"{\"file\":\"";
                unint64_t v53 = (char *)v340 + 9;
                v340 = (char *)v340 + 9;
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v337, "{\"file\":\"", 9uLL);
                unint64_t v53 = (char *)v340;
              }
              if (v28 <= v339 - (uint64_t)v53)
              {
                if (v28)
                {
                  memcpy(v53, v277, v28);
                  unint64_t v53 = (char *)v340 + v28;
                  v340 = (char *)v340 + v28;
                }
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v337, (const char *)v277, v28);
                unint64_t v53 = (char *)v340;
              }
              if ((unint64_t)(v339 - (void)v53) > 2)
              {
                uint64_t v53[2] = 32;
                *(_WORD *)unint64_t v53 = 11298;
                uint64_t v255 = (char *)v340 + 3;
                v340 = (char *)v340 + 3;
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v337, "\", ", 3uLL);
                uint64_t v255 = v340;
              }
              if (v30) {
                uint64_t v256 = (const char *)__src;
              }
              else {
                uint64_t v256 = "no-name";
              }
              if (v30) {
                size_t v257 = v30;
              }
              else {
                size_t v257 = 7;
              }
              if ((unint64_t)(v339 - (void)v255) > 7)
              {
                *uint64_t v255 = 0x223A227373617022;
                uint64_t v258 = (char *)v340 + 8;
                v340 = (char *)v340 + 8;
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v337, "\"pass\":\"", 8uLL);
                uint64_t v258 = (char *)v340;
              }
              if (v257 <= v339 - (uint64_t)v258)
              {
                memcpy(v258, v256, v257);
                uint64_t v259 = (char *)v340 + v257;
                v340 = (char *)v340 + v257;
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v337, v256, v257);
                uint64_t v259 = (char *)v340;
              }
              if ((unint64_t)(v339 - (void)v259) > 2)
              {
                v259[2] = 32;
                *(_WORD *)uint64_t v259 = 11298;
                v340 = (char *)v340 + 3;
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v337, "\", ", 3uLL);
              }
              LOWORD(v349) = 8;
              long long v350 = v281;
              unint64_t v351 = v282;
              long long v281 = 0uLL;
              unint64_t v282 = 0;
              llvm::json::Value::Value((uint64_t)&v352, (unsigned __int16 *)&v349, 1uLL);
              llvm::json::Value::destroy((llvm::json::Value *)&v349);
              if ((unint64_t)(v339 - (void)v340) > 7)
              {
                *(void *)v340 = 0x203A227367756222;
                v340 = (char *)v340 + 8;
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v337, "\"bugs\": ", 8uLL);
              }
              sub_1CD82C0D8((uint64_t)&v337, (unsigned __int16 *)&v352);
              if ((unint64_t)(v339 - (void)v340) > 1)
              {
                *(_WORD *)v340 = 2685;
                v340 = (char *)v340 + 2;
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v337, "}\n", 2uLL);
              }
              llvm::json::Value::destroy((llvm::json::Value *)&v352);
            }
            llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v337);
          }
          if (v22)
          {
            if (byte_1EBCFC0A0) {
              BOOL v260 = (llvm::raw_ostream *)llvm::nulls((llvm *)v38);
            }
            else {
              BOOL v260 = (llvm::raw_ostream *)llvm::errs((llvm *)v38);
            }
            uint64_t v262 = v260;
            uint64_t v264 = *((void *)v260 + 3);
            int v263 = (int *)*((void *)v260 + 4);
            if (v49 <= v264 - (uint64_t)v263)
            {
              if (v49)
              {
                memcpy(v263, v48, v49);
                int v263 = (int *)(*((void *)v262 + 4) + v49);
                *((void *)v262 + 4) = v263;
              }
            }
            else
            {
              llvm::raw_ostream::write(v262, (const char *)v48, v49);
              int v263 = (int *)*((void *)v262 + 4);
            }
            if (*((void *)v262 + 3) - (void)v263 <= 6uLL)
            {
              uint64_t v266 = ": PASS\n";
LABEL_471:
              llvm::raw_ostream::write(v262, v266, 7uLL);
LABEL_472:
              sub_1CD87C0B0(v50, (uint64_t)v318);
              uint64_t v337 = (void **)&v281;
              sub_1CBF2C7E0(&v337);
              sub_1CD456CB4(v283);
              sub_1CD456CB4(v288);
              sub_1CD87C8F0((uint64_t)v293);
              sub_1CD456CB4(v298);
              sub_1CD456CB4(v303);
              sub_1CD456CB4(v308);
              sub_1CD456CB4(v313);
              sub_1CD456CB4(&v325[1]);
              sub_1CD87C8F0((uint64_t)&v323[8]);
              sub_1CD456CB4(&v321[1]);
              sub_1CD456CB4(v318);
              return v22 & 1;
            }
            *(int *)((char *)v263 + 3) = 173232961;
            int v267 = 1095770170;
          }
          else
          {
            if (byte_1EBCFC0A0) {
              BOOL v261 = (llvm::raw_ostream *)llvm::nulls((llvm *)v38);
            }
            else {
              BOOL v261 = (llvm::raw_ostream *)llvm::errs((llvm *)v38);
            }
            uint64_t v262 = v261;
            uint64_t v265 = *((void *)v261 + 3);
            int v263 = (int *)*((void *)v261 + 4);
            if (v49 <= v265 - (uint64_t)v263)
            {
              if (v49)
              {
                memcpy(v263, v48, v49);
                int v263 = (int *)(*((void *)v262 + 4) + v49);
                *((void *)v262 + 4) = v263;
              }
            }
            else
            {
              llvm::raw_ostream::write(v262, (const char *)v48, v49);
              int v263 = (int *)*((void *)v262 + 4);
            }
            if (*((void *)v262 + 3) - (void)v263 <= 6uLL)
            {
              uint64_t v266 = ": FAIL\n";
              goto LABEL_471;
            }
            *(int *)((char *)v263 + 3) = 172771649;
            int v267 = 1095114810;
          }
          int *v263 = v267;
          *((void *)v262 + 4) += 7;
          goto LABEL_472;
        }
        char v270 = 1;
        while (1)
        {
          if (*(unsigned char *)(v42 + 8)) {
            goto LABEL_213;
          }
          uint64_t v152 = *(void *)v42;
          unint64_t v38 = sub_1CD87C5D0((uint64_t)v293, *(void *)v42);
          if (v296 != (char *)v38 && !*(void *)(v38 + 24)) {
            goto LABEL_213;
          }
          unint64_t v153 = *(uint64_t ****)(v152 + 40);
          uint64_t v154 = (uint64_t ***)v153[7];
          if ((*((unsigned char *)v154 + 23) & 0x10) != 0) {
            break;
          }
          size_t __lena = 0;
          uint64_t v164 = &byte_1CFBCE98E;
LABEL_226:
          if ((*((unsigned char *)v153 + 23) & 0x10) == 0)
          {
            unint64_t v166 = "no-name";
            uint64_t v167 = 7;
            goto LABEL_236;
          }
          uint64_t v168 = ***v153;
          uint64_t v169 = *(void *)(v168 + 152);
          uint64_t v170 = *(unsigned int *)(v168 + 168);
          if (!v170) {
            goto LABEL_234;
          }
          LODWORD(v171) = (v170 - 1) & ((v153 >> 4) ^ (v153 >> 9));
          uint64_t v172 = (uint64_t ****)(v169 + 16 * v171);
          unint64_t v173 = *v172;
          if (*v172 != v153)
          {
            int v174 = 1;
            while (v173 != (uint64_t ***)-4096)
            {
              int v175 = v171 + v174++;
              uint64_t v171 = v175 & (v170 - 1);
              unint64_t v173 = *(uint64_t ****)(v169 + 16 * v171);
              if (v173 == v153)
              {
                uint64_t v172 = (uint64_t ****)(v169 + 16 * v171);
                goto LABEL_235;
              }
            }
LABEL_234:
            uint64_t v172 = (uint64_t ****)(v169 + 16 * v170);
          }
LABEL_235:
          unsigned int v176 = v172[1];
          uint64_t v177 = (uint64_t)*v176;
          unint64_t v166 = (const char *)(v176 + 2);
          uint64_t v167 = v177;
LABEL_236:
          __uint64_t n = v167;
          OpcodeName = (char *)llvm::Instruction::getOpcodeName((llvm::Instruction *)(*(unsigned __int8 *)(v152 + 16)
                                                                                    - 28));
          unint64_t v38 = sub_1CD87C648((uint64_t)v303, v152);
          if (v306 == v38)
          {
            if (!a10)
            {
              if (byte_1EBCFC0A0) {
                uint64_t v180 = (llvm::raw_ostream *)llvm::nulls((llvm *)v38);
              }
              else {
                uint64_t v180 = (llvm::raw_ostream *)llvm::errs((llvm *)v38);
              }
              int v185 = v180;
              uint64_t v186 = *((void *)v180 + 4);
              if ((unint64_t)(*((void *)v180 + 3) - v186) > 8)
              {
                *(unsigned char *)(v186 + 8) = 32;
                *(void *)uint64_t v186 = *(void *)"WARNING: ";
                uint64_t v187 = (void *)(*((void *)v180 + 4) + 9);
                *((void *)v185 + 4) = v187;
              }
              else
              {
                llvm::raw_ostream::write(v180, "WARNING: ", 9uLL);
                uint64_t v187 = (void *)*((void *)v185 + 4);
              }
              if (v30 <= *((void *)v185 + 3) - (void)v187)
              {
                if (v30)
                {
                  memcpy(v187, __src, v30);
                  uint64_t v187 = (void *)(*((void *)v185 + 4) + v30);
                  *((void *)v185 + 4) = v187;
                }
              }
              else
              {
                llvm::raw_ostream::write(v185, (const char *)__src, v30);
                uint64_t v187 = (void *)*((void *)v185 + 4);
              }
              if (*((void *)v185 + 3) - (void)v187 <= 0x20uLL)
              {
                uint64_t v188 = v185;
                unint64_t v189 = " did not generate DILocation for ";
                size_t v190 = 33;
                goto LABEL_292;
              }
              qmemcpy(v187, " did not generate DILocation for ", 33);
              uint64_t v215 = *((void *)v185 + 4) + 33;
              goto LABEL_344;
            }
            sub_1CBF2C538(&v337, "metadata", 8uLL);
            sub_1CD452690((llvm::json::Value *)&v339, "DILocation", 0xAuLL);
            sub_1CBF2C538(v341, "fn-name", 7uLL);
            size_t v181 = __lena;
            if (__lena > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_484;
            }
            if (__lena >= 0x17)
            {
              uint64_t v191 = (__lena & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((__lena | 7) != 0x17) {
                uint64_t v191 = __lena | 7;
              }
              uint64_t v271 = v191 + 1;
              p_dst = (std::error_code *)operator new(v191 + 1);
              unint64_t v336 = v271 | 0x8000000000000000;
              size_t v181 = __lena;
              *(void *)&__dst.__val_ = p_dst;
              __dst.__cat_ = (const std::error_category *)__lena;
            }
            else
            {
              HIBYTE(v336) = __lena;
              p_dst = &__dst;
              if (!__lena)
              {
LABEL_266:
                *((unsigned char *)&p_dst->__val_ + v181) = 0;
                sub_1CD452764((uint64_t)v342, (unint64_t)&__dst);
                sub_1CBF2C538(v343, "bb-name", 7uLL);
                size_t v192 = __n;
                if (__n > 0x7FFFFFFFFFFFFFF7) {
                  goto LABEL_484;
                }
                if (__n >= 0x17)
                {
                  uint64_t v194 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((__n | 7) != 0x17) {
                    uint64_t v194 = __n | 7;
                  }
                  uint64_t v195 = v194 + 1;
                  unint64_t v193 = operator new(v194 + 1);
                  unint64_t v334 = v195 | 0x8000000000000000;
                  __p[0] = v193;
                  __p[1] = (void *)__n;
                }
                else
                {
                  HIBYTE(v334) = __n;
                  unint64_t v193 = __p;
                  if (!__n) {
                    goto LABEL_274;
                  }
                }
                memmove(v193, v166, __n);
                size_t v192 = __n;
LABEL_274:
                *((unsigned char *)v193 + v192) = 0;
                sub_1CD452764((uint64_t)v344, (unint64_t)__p);
                sub_1CBF2C538(v345, "instr", 5uLL);
                size_t v196 = strlen(OpcodeName);
                sub_1CD452690((llvm::json::Value *)v346, (unsigned __int8 *)OpcodeName, v196);
                sub_1CBF2C538(v347, "action", 6uLL);
                sub_1CD452690((llvm::json::Value *)v348, "not-generate", 0xCuLL);
                sub_1CD451B70((uint64_t)&v349, (uint64_t)&v337, 5);
                LOWORD(v352.__r_.__value_.__l.__data_) = 7;
                *(_OWORD *)&v352.__r_.__value_.__r.__words[1] = __PAIR128__(v350, v349);
                unint64_t v349 = 0;
                *(void *)&long long v350 = 0;
                int v353 = DWORD2(v350);
                DWORD2(v350) = 0;
                uint64_t v197 = *((void *)&v281 + 1);
                if (*((void *)&v281 + 1) >= v282)
                {
                  uint64_t v198 = sub_1CBF2C6D0((unsigned __int16 **)&v281, (unsigned __int16 *)&v352);
                }
                else
                {
                  llvm::json::Value::moveFrom(*((uint64_t *)&v281 + 1), (unsigned __int16 *)&v352);
                  uint64_t v198 = v197 + 32;
                }
                *((void *)&v281 + 1) = v198;
                llvm::json::Value::destroy((llvm::json::Value *)&v352);
                sub_1CD452448((unsigned int *)&v349);
                MEMORY[0x1D25D9CD0](v349, 8);
                uint64_t v199 = 35;
                do
                {
                  llvm::json::Value::destroy((llvm::json::Value *)((char *)&v334 + v199 * 8));
                  unint64_t v38 = (unint64_t)sub_1CB833F88((uint64_t *)&__p[v199 - 1], 0);
                  v199 -= 7;
                }
                while (v199 * 8);
                if (SHIBYTE(v334) < 0) {
                  operator delete(__p[0]);
                }
                if ((SHIBYTE(v336) & 0x80000000) == 0) {
                  goto LABEL_335;
                }
                uint64_t v200 = *(void **)&__dst.__val_;
LABEL_334:
                operator delete(v200);
                goto LABEL_335;
              }
            }
            memmove(p_dst, v164, v181);
            size_t v181 = __lena;
            goto LABEL_266;
          }
          if (*(unsigned char *)(v38 + 8))
          {
            if (!a10)
            {
              if (byte_1EBCFC0A0) {
                uint64_t v179 = (llvm::raw_ostream *)llvm::nulls((llvm *)v38);
              }
              else {
                uint64_t v179 = (llvm::raw_ostream *)llvm::errs((llvm *)v38);
              }
              int v185 = v179;
              uint64_t v201 = *((void *)v179 + 4);
              if ((unint64_t)(*((void *)v179 + 3) - v201) > 8)
              {
                *(unsigned char *)(v201 + 8) = 32;
                *(void *)uint64_t v201 = *(void *)"WARNING: ";
                int v202 = (void *)(*((void *)v179 + 4) + 9);
                *((void *)v185 + 4) = v202;
              }
              else
              {
                llvm::raw_ostream::write(v179, "WARNING: ", 9uLL);
                int v202 = (void *)*((void *)v185 + 4);
              }
              if (v30 <= *((void *)v185 + 3) - (void)v202)
              {
                if (v30)
                {
                  memcpy(v202, __src, v30);
                  int v202 = (void *)(*((void *)v185 + 4) + v30);
                  *((void *)v185 + 4) = v202;
                }
              }
              else
              {
                llvm::raw_ostream::write(v185, (const char *)__src, v30);
                int v202 = (void *)*((void *)v185 + 4);
              }
              if (*((void *)v185 + 3) - (void)v202 <= 0x16uLL)
              {
                uint64_t v188 = v185;
                unint64_t v189 = " dropped DILocation of ";
                size_t v190 = 23;
LABEL_292:
                llvm::raw_ostream::write(v188, v189, v190);
LABEL_293:
                llvm::Value::print((llvm::Value *)v152, v185, 0);
                uint64_t v203 = *((void *)v185 + 4);
                if ((unint64_t)(*((void *)v185 + 3) - v203) > 5)
                {
                  *(_WORD *)(v203 + 4) = 8250;
                  *(_DWORD *)uint64_t v203 = 1111631904;
                  uint64_t v204 = (_WORD *)(*((void *)v185 + 4) + 6);
                  *((void *)v185 + 4) = v204;
                }
                else
                {
                  llvm::raw_ostream::write(v185, " (BB: ", 6uLL);
                  uint64_t v204 = (_WORD *)*((void *)v185 + 4);
                }
                if (__n <= *((void *)v185 + 3) - (void)v204)
                {
                  if (__n)
                  {
                    memcpy(v204, v166, __n);
                    uint64_t v204 = (_WORD *)(*((void *)v185 + 4) + __n);
                    *((void *)v185 + 4) = v204;
                  }
                }
                else
                {
                  llvm::raw_ostream::write(v185, v166, __n);
                  uint64_t v204 = (_WORD *)*((void *)v185 + 4);
                }
                if (*((void *)v185 + 3) - (void)v204 > 5uLL)
                {
                  v204[2] = 8250;
                  *(_DWORD *)uint64_t v204 = 1850089516;
                  uint64_t v205 = (void *)(*((void *)v185 + 4) + 6);
                  *((void *)v185 + 4) = v205;
                }
                else
                {
                  llvm::raw_ostream::write(v185, ", Fn: ", 6uLL);
                  uint64_t v205 = (void *)*((void *)v185 + 4);
                }
                if (__lena <= *((void *)v185 + 3) - (void)v205)
                {
                  if (__lena)
                  {
                    memcpy(v205, v164, __lena);
                    uint64_t v205 = (void *)(*((void *)v185 + 4) + __lena);
                    *((void *)v185 + 4) = v205;
                  }
                }
                else
                {
                  llvm::raw_ostream::write(v185, v164, __lena);
                  uint64_t v205 = (void *)*((void *)v185 + 4);
                }
                if (*((void *)v185 + 3) - (void)v205 > 7uLL)
                {
                  void *v205 = 0x203A656C6946202CLL;
                  unint64_t v38 = *((void *)v185 + 4) + 8;
                  *((void *)v185 + 4) = v38;
                }
                else
                {
                  llvm::raw_ostream::write(v185, ", File: ", 8uLL);
                  unint64_t v38 = *((void *)v185 + 4);
                }
                if (v28 <= *((void *)v185 + 3) - v38)
                {
                  if (v28)
                  {
                    memcpy((void *)v38, v41, v28);
                    unint64_t v38 = *((void *)v185 + 4) + v28;
                    *((void *)v185 + 4) = v38;
                  }
                }
                else
                {
                  llvm::raw_ostream::write(v185, (const char *)v41, v28);
                  unint64_t v38 = *((void *)v185 + 4);
                }
                if (*((void *)v185 + 3) - v38 > 1)
                {
                  char v270 = 0;
                  *(_WORD *)unint64_t v38 = 2601;
                  *((void *)v185 + 4) += 2;
                  goto LABEL_213;
                }
                unint64_t v38 = (unint64_t)llvm::raw_ostream::write(v185, ")\n", 2uLL);
LABEL_335:
                char v270 = 0;
                goto LABEL_213;
              }
              qmemcpy(v202, " dropped DILocation of ", 23);
              uint64_t v215 = *((void *)v185 + 4) + 23;
LABEL_344:
              *((void *)v185 + 4) = v215;
              goto LABEL_293;
            }
            sub_1CBF2C538(&v337, "metadata", 8uLL);
            sub_1CD452690((llvm::json::Value *)&v339, "DILocation", 0xAuLL);
            sub_1CBF2C538(v341, "fn-name", 7uLL);
            size_t v183 = __lena;
            if (__lena > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_484;
            }
            if (__lena >= 0x17)
            {
              uint64_t v206 = (__lena & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((__lena | 7) != 0x17) {
                uint64_t v206 = __lena | 7;
              }
              uint64_t v272 = v206 + 1;
              unsigned int v184 = operator new(v206 + 1);
              unint64_t v332 = v272 | 0x8000000000000000;
              size_t v183 = __lena;
              v331[0] = v184;
              v331[1] = (void *)__lena;
            }
            else
            {
              HIBYTE(v332) = __lena;
              unsigned int v184 = v331;
              if (!__lena)
              {
LABEL_317:
                *((unsigned char *)v184 + v183) = 0;
                sub_1CD452764((uint64_t)v342, (unint64_t)v331);
                sub_1CBF2C538(v343, "bb-name", 7uLL);
                size_t v207 = __n;
                if (__n > 0x7FFFFFFFFFFFFFF7) {
                  goto LABEL_484;
                }
                if (__n >= 0x17)
                {
                  uint64_t v209 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((__n | 7) != 0x17) {
                    uint64_t v209 = __n | 7;
                  }
                  uint64_t v210 = v209 + 1;
                  uint64_t v208 = operator new(v209 + 1);
                  unint64_t v330 = v210 | 0x8000000000000000;
                  v329[0] = v208;
                  v329[1] = (void *)__n;
                }
                else
                {
                  HIBYTE(v330) = __n;
                  uint64_t v208 = v329;
                  if (!__n)
                  {
LABEL_325:
                    *((unsigned char *)v208 + v207) = 0;
                    sub_1CD452764((uint64_t)v344, (unint64_t)v329);
                    sub_1CBF2C538(v345, "instr", 5uLL);
                    size_t v211 = strlen(OpcodeName);
                    sub_1CD452690((llvm::json::Value *)v346, (unsigned __int8 *)OpcodeName, v211);
                    sub_1CBF2C538(v347, "action", 6uLL);
                    sub_1CD452690((llvm::json::Value *)v348, "drop", 4uLL);
                    sub_1CD451B70((uint64_t)&v349, (uint64_t)&v337, 5);
                    LOWORD(v352.__r_.__value_.__l.__data_) = 7;
                    *(_OWORD *)&v352.__r_.__value_.__r.__words[1] = __PAIR128__(v350, v349);
                    unint64_t v349 = 0;
                    *(void *)&long long v350 = 0;
                    int v353 = DWORD2(v350);
                    DWORD2(v350) = 0;
                    uint64_t v212 = *((void *)&v281 + 1);
                    if (*((void *)&v281 + 1) >= v282)
                    {
                      uint64_t v213 = sub_1CBF2C6D0((unsigned __int16 **)&v281, (unsigned __int16 *)&v352);
                    }
                    else
                    {
                      llvm::json::Value::moveFrom(*((uint64_t *)&v281 + 1), (unsigned __int16 *)&v352);
                      uint64_t v213 = v212 + 32;
                    }
                    *((void *)&v281 + 1) = v213;
                    llvm::json::Value::destroy((llvm::json::Value *)&v352);
                    sub_1CD452448((unsigned int *)&v349);
                    MEMORY[0x1D25D9CD0](v349, 8);
                    uint64_t v214 = 35;
                    do
                    {
                      llvm::json::Value::destroy((llvm::json::Value *)((char *)&v334 + v214 * 8));
                      unint64_t v38 = (unint64_t)sub_1CB833F88((uint64_t *)&__p[v214 - 1], 0);
                      v214 -= 7;
                    }
                    while (v214 * 8);
                    if (SHIBYTE(v330) < 0) {
                      operator delete(v329[0]);
                    }
                    if ((SHIBYTE(v332) & 0x80000000) == 0) {
                      goto LABEL_335;
                    }
                    uint64_t v200 = v331[0];
                    goto LABEL_334;
                  }
                }
                memmove(v208, v166, __n);
                size_t v207 = __n;
                goto LABEL_325;
              }
            }
            memmove(v184, v164, v183);
            size_t v183 = __lena;
            goto LABEL_317;
          }
LABEL_213:
          v42 += 16;
          if (v42 == v43) {
            goto LABEL_27;
          }
        }
        uint64_t v155 = ***v154;
        uint64_t v156 = *(void *)(v155 + 152);
        uint64_t v157 = *(unsigned int *)(v155 + 168);
        if (v157)
        {
          LODWORD(v158) = (v157 - 1) & ((v154 >> 4) ^ (v154 >> 9));
          uint64_t v159 = (uint64_t ****)(v156 + 16 * v158);
          uint64_t v160 = *v159;
          if (*v159 == v154)
          {
LABEL_225:
            int v163 = v159[1];
            size_t v165 = (size_t)*v163;
            uint64_t v164 = (char *)(v163 + 2);
            size_t __lena = v165;
            goto LABEL_226;
          }
          int v161 = 1;
          while (v160 != (uint64_t ***)-4096)
          {
            int v162 = v158 + v161++;
            uint64_t v158 = v162 & (v157 - 1);
            uint64_t v160 = *(uint64_t ****)(v156 + 16 * v158);
            if (v160 == v154)
            {
              uint64_t v159 = (uint64_t ****)(v156 + 16 * v158);
              goto LABEL_225;
            }
          }
        }
        uint64_t v159 = (uint64_t ****)(v156 + 16 * v157);
        goto LABEL_225;
      }
      char v279 = 1;
      uint64_t v41 = v277;
      while (1)
      {
        if (!v40[1])
        {
          unint64_t v38 = sub_1CD87C558((uint64_t)v313, *v40);
          if (v316 == v38)
          {
            if (!v37)
            {
              if (byte_1EBCFC0A0) {
                unint64_t v95 = (llvm::raw_ostream *)llvm::nulls((llvm *)v38);
              }
              else {
                unint64_t v95 = (llvm::raw_ostream *)llvm::errs((llvm *)v38);
              }
              uint64_t v96 = v95;
              unint64_t v108 = (_DWORD *)*((void *)v95 + 4);
              if (*((void *)v95 + 3) - (void)v108 > 6uLL)
              {
                *(_DWORD *)((char *)v108 + 3) = 540693071;
                _DWORD *v108 = 1330795077;
                int v109 = (void *)(*((void *)v95 + 4) + 7);
                *((void *)v96 + 4) = v109;
              }
              else
              {
                llvm::raw_ostream::write(v95, "ERROR: ", 7uLL);
                int v109 = (void *)*((void *)v96 + 4);
              }
              if (v30 <= *((void *)v96 + 3) - (void)v109)
              {
                if (v30)
                {
                  memcpy(v109, __src, v30);
                  int v109 = (void *)(*((void *)v96 + 4) + v30);
                  *((void *)v96 + 4) = v109;
                }
              }
              else
              {
                llvm::raw_ostream::write(v96, (const char *)__src, v30);
                int v109 = (void *)*((void *)v96 + 4);
              }
              if (*((void *)v96 + 3) - (void)v109 > 0x22uLL)
              {
                qmemcpy(v109, " did not generate DISubprogram for ", 35);
                *((void *)v96 + 4) += 35;
              }
              else
              {
                llvm::raw_ostream::write(v96, " did not generate DISubprogram for ", 0x23uLL);
              }
              uint64_t v110 = (uint64_t ***)*v40;
              if ((*(unsigned char *)(*v40 + 23) & 0x10) != 0)
              {
                uint64_t v111 = ***v110;
                uint64_t v101 = *(void *)(v111 + 152);
                uint64_t v102 = *(unsigned int *)(v111 + 168);
                if (!v102) {
                  goto LABEL_158;
                }
                LODWORD(v103) = (v102 - 1) & ((v110 >> 4) ^ (v110 >> 9));
                int v104 = (uint64_t ****)(v101 + 16 * v103);
                unint64_t v112 = *v104;
                if (*v104 != v110)
                {
                  int v113 = 1;
                  while (v112 != (uint64_t ***)-4096)
                  {
                    int v114 = v103 + v113++;
                    uint64_t v103 = v114 & (v102 - 1);
                    unint64_t v112 = *(uint64_t ****)(v101 + 16 * v103);
                    if (v112 == v110)
                    {
LABEL_157:
                      int v104 = (uint64_t ****)(v101 + 16 * v103);
                      goto LABEL_159;
                    }
                  }
LABEL_158:
                  int v104 = (uint64_t ****)(v101 + 16 * v102);
                }
LABEL_159:
                uint64_t v115 = (size_t *)v104[1];
                size_t v118 = *v115;
                uint64_t v116 = v115 + 2;
                size_t v117 = v118;
                int v119 = (_WORD *)*((void *)v96 + 4);
                if (v118 <= *((void *)v96 + 3) - (void)v119)
                {
                  if (v117)
                  {
                    memcpy(v119, v116, v117);
                    int v119 = (_WORD *)(*((void *)v96 + 4) + v117);
                    *((void *)v96 + 4) = v119;
                  }
                }
                else
                {
                  llvm::raw_ostream::write(v96, (const char *)v116, v117);
                  int v119 = (_WORD *)*((void *)v96 + 4);
                }
                size_t v37 = a10;
LABEL_164:
                if (*((void *)v96 + 3) - (void)v119 > 5uLL)
                {
                  v119[2] = 8301;
                  *(_DWORD *)int v119 = 1869768224;
                  unint64_t v38 = *((void *)v96 + 4) + 6;
                  *((void *)v96 + 4) = v38;
                }
                else
                {
                  llvm::raw_ostream::write(v96, " from ", 6uLL);
                  unint64_t v38 = *((void *)v96 + 4);
                }
                if (v28 <= *((void *)v96 + 3) - v38)
                {
                  if (v28)
                  {
                    memcpy((void *)v38, v41, v28);
                    unint64_t v38 = *((void *)v96 + 4) + v28;
                    *((void *)v96 + 4) = v38;
                  }
                }
                else
                {
                  llvm::raw_ostream::write(v96, (const char *)v41, v28);
                  unint64_t v38 = *((void *)v96 + 4);
                }
                if (v38 >= *((void *)v96 + 3))
                {
                  unint64_t v38 = (unint64_t)llvm::raw_ostream::write(v96, 10);
                  char v279 = 0;
                }
                else
                {
                  char v279 = 0;
                  *((void *)v96 + 4) = v38 + 1;
                  *(unsigned char *)unint64_t v38 = 10;
                }
                goto LABEL_116;
              }
LABEL_187:
              int v119 = (_WORD *)*((void *)v96 + 4);
              goto LABEL_164;
            }
            sub_1CBF2C538(&v337, "metadata", 8uLL);
            sub_1CD452690((llvm::json::Value *)&v339, "DISubprogram", 0xCuLL);
            sub_1CBF2C538(v341, "name", 4uLL);
            uint64_t v129 = (uint64_t ***)*v40;
            if ((*(unsigned char *)(*v40 + 23) & 0x10) != 0)
            {
              uint64_t v130 = ***v129;
              uint64_t v131 = *(void *)(v130 + 152);
              uint64_t v132 = *(unsigned int *)(v130 + 168);
              if (!v132) {
                goto LABEL_201;
              }
              LODWORD(v133) = (v132 - 1) & ((v129 >> 4) ^ (v129 >> 9));
              int64x2_t v134 = (uint64_t ****)(v131 + 16 * v133);
              unint64_t v135 = *v134;
              if (*v134 != v129)
              {
                int v136 = 1;
                while (v135 != (uint64_t ***)-4096)
                {
                  int v137 = v133 + v136++;
                  uint64_t v133 = v137 & (v132 - 1);
                  unint64_t v135 = *(uint64_t ****)(v131 + 16 * v133);
                  if (v135 == v129)
                  {
                    int64x2_t v134 = (uint64_t ****)(v131 + 16 * v133);
                    goto LABEL_202;
                  }
                }
LABEL_201:
                int64x2_t v134 = (uint64_t ****)(v131 + 16 * v132);
              }
LABEL_202:
              int v145 = v134[1];
              unint64_t v148 = (unint64_t)*v145;
              int v146 = (unsigned __int8 *)(v145 + 2);
              unint64_t v147 = v148;
            }
            else
            {
              unint64_t v147 = 0;
              int v146 = (unsigned __int8 *)&byte_1CFBCE98E;
            }
            sub_1CD452690((llvm::json::Value *)v342, v146, v147);
            sub_1CBF2C538(v343, "action", 6uLL);
            sub_1CD452690((llvm::json::Value *)v344, "not-generate", 0xCuLL);
            sub_1CD451B70((uint64_t)&v349, (uint64_t)&v337, 3);
            LOWORD(v352.__r_.__value_.__l.__data_) = 7;
            *(_OWORD *)&v352.__r_.__value_.__r.__words[1] = __PAIR128__(v350, v349);
            unint64_t v349 = 0;
            *(void *)&long long v350 = 0;
            int v353 = DWORD2(v350);
            DWORD2(v350) = 0;
            uint64_t v149 = *((void *)&v281 + 1);
            if (*((void *)&v281 + 1) >= v282)
            {
              uint64_t v150 = sub_1CBF2C6D0((unsigned __int16 **)&v281, (unsigned __int16 *)&v352);
            }
            else
            {
              llvm::json::Value::moveFrom(*((uint64_t *)&v281 + 1), (unsigned __int16 *)&v352);
              uint64_t v150 = v149 + 32;
            }
            *((void *)&v281 + 1) = v150;
            llvm::json::Value::destroy((llvm::json::Value *)&v352);
            sub_1CD452448((unsigned int *)&v349);
            MEMORY[0x1D25D9CD0](v349, 8);
            uint64_t v151 = 21;
            do
            {
              llvm::json::Value::destroy((llvm::json::Value *)((char *)&v334 + v151 * 8));
              unint64_t v38 = (unint64_t)sub_1CB833F88((uint64_t *)&__p[v151 - 1], 0);
              v151 -= 7;
            }
            while (v151 * 8);
            goto LABEL_208;
          }
          if (*(void *)(v38 + 8))
          {
            if (!v37)
            {
              if (byte_1EBCFC0A0) {
                int v94 = (llvm::raw_ostream *)llvm::nulls((llvm *)v38);
              }
              else {
                int v94 = (llvm::raw_ostream *)llvm::errs((llvm *)v38);
              }
              uint64_t v96 = v94;
              uint64_t v97 = (_DWORD *)*((void *)v94 + 4);
              if (*((void *)v94 + 3) - (void)v97 > 6uLL)
              {
                *(_DWORD *)((char *)v97 + 3) = 540693071;
                *uint64_t v97 = 1330795077;
                unint64_t v98 = (void *)(*((void *)v94 + 4) + 7);
                *((void *)v96 + 4) = v98;
              }
              else
              {
                llvm::raw_ostream::write(v94, "ERROR: ", 7uLL);
                unint64_t v98 = (void *)*((void *)v96 + 4);
              }
              if (v30 <= *((void *)v96 + 3) - (void)v98)
              {
                if (v30)
                {
                  memcpy(v98, __src, v30);
                  unint64_t v98 = (void *)(*((void *)v96 + 4) + v30);
                  *((void *)v96 + 4) = v98;
                }
              }
              else
              {
                llvm::raw_ostream::write(v96, (const char *)__src, v30);
                unint64_t v98 = (void *)*((void *)v96 + 4);
              }
              if (*((void *)v96 + 3) - (void)v98 > 0x18uLL)
              {
                qmemcpy(v98, " dropped DISubprogram of ", 25);
                *((void *)v96 + 4) += 25;
              }
              else
              {
                llvm::raw_ostream::write(v96, " dropped DISubprogram of ", 0x19uLL);
              }
              uint64_t v99 = (uint64_t ***)*v40;
              if ((*(unsigned char *)(*v40 + 23) & 0x10) != 0)
              {
                uint64_t v100 = ***v99;
                uint64_t v101 = *(void *)(v100 + 152);
                uint64_t v102 = *(unsigned int *)(v100 + 168);
                if (!v102) {
                  goto LABEL_158;
                }
                LODWORD(v103) = (v102 - 1) & ((v99 >> 4) ^ (v99 >> 9));
                int v104 = (uint64_t ****)(v101 + 16 * v103);
                int v105 = *v104;
                if (*v104 != v99)
                {
                  int v106 = 1;
                  while (v105 != (uint64_t ***)-4096)
                  {
                    int v107 = v103 + v106++;
                    uint64_t v103 = v107 & (v102 - 1);
                    int v105 = *(uint64_t ****)(v101 + 16 * v103);
                    if (v105 == v99) {
                      goto LABEL_157;
                    }
                  }
                  goto LABEL_158;
                }
                goto LABEL_159;
              }
              goto LABEL_187;
            }
            sub_1CBF2C538(&v337, "metadata", 8uLL);
            sub_1CD452690((llvm::json::Value *)&v339, "DISubprogram", 0xCuLL);
            sub_1CBF2C538(v341, "name", 4uLL);
            uint64_t v120 = (uint64_t ***)*v40;
            if ((*(unsigned char *)(*v40 + 23) & 0x10) != 0)
            {
              uint64_t v121 = ***v120;
              uint64_t v122 = *(void *)(v121 + 152);
              uint64_t v123 = *(unsigned int *)(v121 + 168);
              if (!v123) {
                goto LABEL_193;
              }
              LODWORD(v124) = (v123 - 1) & ((v120 >> 4) ^ (v120 >> 9));
              int64x2_t v125 = (uint64_t ****)(v122 + 16 * v124);
              unint64_t v126 = *v125;
              if (*v125 != v120)
              {
                int v127 = 1;
                while (v126 != (uint64_t ***)-4096)
                {
                  int v128 = v124 + v127++;
                  uint64_t v124 = v128 & (v123 - 1);
                  unint64_t v126 = *(uint64_t ****)(v122 + 16 * v124);
                  if (v126 == v120)
                  {
                    int64x2_t v125 = (uint64_t ****)(v122 + 16 * v124);
                    goto LABEL_194;
                  }
                }
LABEL_193:
                int64x2_t v125 = (uint64_t ****)(v122 + 16 * v123);
              }
LABEL_194:
              uint64_t v138 = v125[1];
              unint64_t v141 = (unint64_t)*v138;
              unint64_t v139 = (unsigned __int8 *)(v138 + 2);
              unint64_t v140 = v141;
            }
            else
            {
              unint64_t v140 = 0;
              unint64_t v139 = (unsigned __int8 *)&byte_1CFBCE98E;
            }
            sub_1CD452690((llvm::json::Value *)v342, v139, v140);
            sub_1CBF2C538(v343, "action", 6uLL);
            sub_1CD452690((llvm::json::Value *)v344, "drop", 4uLL);
            sub_1CD451B70((uint64_t)&v349, (uint64_t)&v337, 3);
            LOWORD(v352.__r_.__value_.__l.__data_) = 7;
            *(_OWORD *)&v352.__r_.__value_.__r.__words[1] = __PAIR128__(v350, v349);
            unint64_t v349 = 0;
            *(void *)&long long v350 = 0;
            int v353 = DWORD2(v350);
            DWORD2(v350) = 0;
            uint64_t v142 = *((void *)&v281 + 1);
            if (*((void *)&v281 + 1) >= v282)
            {
              uint64_t v143 = sub_1CBF2C6D0((unsigned __int16 **)&v281, (unsigned __int16 *)&v352);
            }
            else
            {
              llvm::json::Value::moveFrom(*((uint64_t *)&v281 + 1), (unsigned __int16 *)&v352);
              uint64_t v143 = v142 + 32;
            }
            *((void *)&v281 + 1) = v143;
            llvm::json::Value::destroy((llvm::json::Value *)&v352);
            sub_1CD452448((unsigned int *)&v349);
            MEMORY[0x1D25D9CD0](v349, 8);
            uint64_t v144 = 21;
            do
            {
              llvm::json::Value::destroy((llvm::json::Value *)((char *)&v334 + v144 * 8));
              unint64_t v38 = (unint64_t)sub_1CB833F88((uint64_t *)&__p[v144 - 1], 0);
              v144 -= 7;
            }
            while (v144 * 8);
LABEL_208:
            char v279 = 0;
            uint64_t v41 = v277;
          }
        }
LABEL_116:
        v40 += 2;
        if (v40 == v39) {
          goto LABEL_25;
        }
      }
    }
    while (1)
    {
      uint64_t v54 = a2 ? a2 - 56 : 0;
      if ((sub_1CD15A81C(v54) & 1) == 0)
      {
        uint64_t v55 = *(unsigned int *)(a4 + 16);
        if (v55)
        {
          uint64_t v56 = *(void *)a4;
          unsigned int v57 = (v54 >> 4) ^ (v54 >> 9);
          LODWORD(v58) = (v55 - 1) & v57;
          uint64_t v59 = (uint64_t *)(*(void *)a4 + 16 * v58);
          uint64_t v60 = *v59;
          if (v54 != *v59)
          {
            int v61 = 1;
            while (v60 != -4096)
            {
              int v62 = v58 + v61++;
              uint64_t v58 = v62 & (v55 - 1);
              uint64_t v60 = *(void *)(v56 + 16 * v58);
              if (v54 == v60)
              {
                uint64_t v59 = (uint64_t *)(v56 + 16 * v58);
                goto LABEL_52;
              }
            }
            goto LABEL_53;
          }
LABEL_52:
          if (v59 != (uint64_t *)(v56 + 16 * v55)) {
            break;
          }
        }
      }
LABEL_53:
      a2 = *(void *)(a2 + 8);
      if (a2 == a3) {
        goto LABEL_13;
      }
    }
    if ((*(unsigned char *)(v54 + 23) & 0x20) == 0) {
      goto LABEL_71;
    }
    uint64_t v63 = ***(void ***)v54;
    uint64_t v337 = (void **)v54;
    int v64 = *(_DWORD *)(v63 + 2496);
    if (v64)
    {
      uint64_t v65 = *(void *)(v63 + 2480);
      int v66 = v64 - 1;
      unsigned int v67 = v66 & v57;
      unint64_t v68 = (void *)(v65 + 40 * v67);
      uint64_t v69 = *v68;
      if (*v68 == v54) {
        goto LABEL_66;
      }
      uint64_t v70 = 0;
      int v71 = 1;
      while (v69 != -4096)
      {
        if (v70) {
          BOOL v72 = 0;
        }
        else {
          BOOL v72 = v69 == -8192;
        }
        if (v72) {
          uint64_t v70 = v68;
        }
        unsigned int v73 = v67 + v71++;
        unsigned int v67 = v73 & v66;
        unint64_t v68 = (void *)(v65 + 40 * v67);
        uint64_t v69 = *v68;
        if (*v68 == v54) {
          goto LABEL_66;
        }
      }
      if (v70) {
        int v92 = v70;
      }
      else {
        int v92 = v68;
      }
    }
    else
    {
      int v92 = 0;
    }
    unint64_t v68 = sub_1CC609054(v63 + 2480, (uint64_t)&v337, (uint64_t *)&v337, v92);
    int v93 = v337;
    v68[4] = 0;
    v68[3] = 0;
    void *v68 = v93;
    v68[1] = v68 + 3;
    v68[2] = 0x100000000;
LABEL_66:
    uint64_t v74 = *((unsigned int *)v68 + 4);
    if (v74)
    {
      uint64_t v75 = (void *)(v68[1] + 8);
      uint64_t v76 = 16 * v74;
      while (*((_DWORD *)v75 - 2))
      {
        uint64_t v77 = 0;
        v75 += 2;
        v76 -= 16;
        if (!v76) {
          goto LABEL_72;
        }
      }
      uint64_t v77 = *v75;
      goto LABEL_72;
    }
LABEL_71:
    uint64_t v77 = 0;
LABEL_72:
    uint64_t v337 = (void **)v54;
    v338[0] = v77;
    sub_1CD87CBB8((uint64_t)v318, (uint64_t *)&v337, v338);
    if (v77)
    {
      uint64_t v78 = *(void *)(v77 - 8 * *(unsigned int *)(v77 + 8) + 56);
      if (v78) {
        uint64_t v79 = (void ***)(v78 - 8 * *(unsigned int *)(v78 + 8));
      }
      else {
        uint64_t v79 = 0;
      }
      while (v79 != (void ***)v78)
      {
        uint64_t v80 = *v79;
        if (*(unsigned char *)*v79 != 25) {
          uint64_t v80 = 0;
        }
        uint64_t v337 = v80;
        if (v80) {
          *(_DWORD *)sub_1CD7805E4((uint64_t)&v325[1], (uint64_t *)&v337) = 0;
        }
        ++v79;
      }
    }
    uint64_t v81 = v54 + 72;
    uint64_t v82 = *(void *)(v54 + 80);
    if (v82 != v54 + 72)
    {
      do
      {
        uint64_t v83 = v82 - 24;
        if (!v82) {
          uint64_t v83 = 0;
        }
        uint64_t v84 = v83 + 40;
        for (uint64_t k = *(void *)(v83 + 48); k != v84; uint64_t k = *(void *)(k + 8))
        {
          if (k) {
            uint64_t v86 = k - 24;
          }
          else {
            uint64_t v86 = 0;
          }
          if (*(unsigned char *)(v86 + 16) != 83)
          {
            if (dword_1EBCFC228 >= 1
              && ((int v87 = sub_1CC5817B4(v86)) == 0 ? (v88 = 0) : (v88 = (llvm::DbgVariableIntrinsic *)v86), k && v87))
            {
              if (v77)
              {
                uint64_t v89 = *(void *)(v86 + 48);
                if ((*(_DWORD *)(v89 + 8) != 2 || !*(void *)(v89 - 8)) && !sub_1CD773FC0(v88))
                {
                  uint64_t v337 = 0;
                  uint64_t v337 = *(void ***)(((void *)v88 - 4 * (*((_DWORD *)v88 + 5) & 0x7FFFFFF))[4] + 24);
                  uint64_t v90 = (_DWORD *)sub_1CD7805E4((uint64_t)&v325[1], (uint64_t *)&v337);
                  ++*v90;
                }
              }
            }
            else if (!sub_1CBF63B28(v86))
            {
              BOOL v91 = *(void *)(v86 + 48) != 0;
              uint64_t v337 = (void **)v86;
              LOBYTE(v338[0]) = v91;
              sub_1CD87CE44((uint64_t)&v321[1], (uint64_t *)&v337, (char *)v338);
            }
          }
        }
        uint64_t v82 = *(void *)(v82 + 8);
        a4 = v280;
      }
      while (v82 != v81);
    }
    goto LABEL_53;
  }
  if (byte_1EBCFC0A0) {
    uint64_t v18 = (llvm::raw_ostream *)llvm::nulls(0);
  }
  else {
    uint64_t v18 = (llvm::raw_ostream *)llvm::errs(0);
  }
  uint64_t v19 = v18;
  uint64_t v21 = *((void *)v18 + 3);
  int v20 = (void *)*((void *)v18 + 4);
  if (a6 <= v21 - (uint64_t)v20)
  {
    if (a6)
    {
      memcpy(v20, a5, a6);
      int v20 = (void *)(*((void *)v19 + 4) + a6);
      *((void *)v19 + 4) = v20;
    }
  }
  else
  {
    llvm::raw_ostream::write(v19, (const char *)a5, a6);
    int v20 = (void *)*((void *)v19 + 4);
  }
  if (*((void *)v19 + 3) - (void)v20 > 0x24uLL)
  {
    char v22 = 0;
    qmemcpy(v20, ": Skipping module without debug info\n", 37);
    *((void *)v19 + 4) += 37;
  }
  else
  {
    llvm::raw_ostream::write(v19, ": Skipping module without debug info\n", 0x25uLL);
    char v22 = 0;
  }
  return v22 & 1;
}

void llvm::exportDebugifyStats(unsigned char *a1, unint64_t a2, uint64_t a3)
{
  v40.__val_ = 0;
  v40.__cat_ = std::system_category();
  char v6 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v37, a1, a2, (uint64_t)&v40);
  if (v40.__val_)
  {
    uint64_t v9 = (llvm::raw_ostream *)llvm::errs(v6);
    size_t v10 = v9;
    uint64_t v11 = (void *)*((void *)v9 + 4);
    if (*((void *)v9 + 3) - (void)v11 > 0x14uLL)
    {
      qmemcpy(v11, "Could not open file: ", 21);
      *((void *)v9 + 4) += 21;
    }
    else
    {
      llvm::raw_ostream::write(v9, "Could not open file: ", 0x15uLL);
    }
    std::error_code::message(&v36, &v40);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v12 = &v36;
    }
    else {
      uint64_t v12 = (std::string *)v36.__r_.__value_.__r.__words[0];
    }
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = *((unsigned char *)&v36.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      size_t size = v36.__r_.__value_.__l.__size_;
    }
    llvm::raw_ostream::write(v10, (const char *)v12, size);
    uint64_t v14 = (_WORD *)*((void *)v10 + 4);
    if (*((void *)v10 + 3) - (void)v14 > 1uLL)
    {
      *uint64_t v14 = 8236;
      uint64_t v15 = (unsigned char *)(*((void *)v10 + 4) + 2);
      *((void *)v10 + 4) = v15;
    }
    else
    {
      llvm::raw_ostream::write(v10, ", ", 2uLL);
      uint64_t v15 = (unsigned char *)*((void *)v10 + 4);
    }
    if (a2 <= *((void *)v10 + 3) - (void)v15)
    {
      if (a2)
      {
        memcpy(v15, a1, a2);
        uint64_t v15 = (unsigned char *)(*((void *)v10 + 4) + a2);
        *((void *)v10 + 4) = v15;
      }
    }
    else
    {
      llvm::raw_ostream::write(v10, a1, a2);
      uint64_t v15 = (unsigned char *)*((void *)v10 + 4);
    }
    if ((unint64_t)v15 >= *((void *)v10 + 3))
    {
      llvm::raw_ostream::write(v10, 10);
    }
    else
    {
      *((void *)v10 + 4) = v15 + 1;
      unsigned char *v15 = 10;
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    unint64_t v7 = v39;
    if (v38 - (unint64_t)v39 > 8)
    {
      v39[8] = 101;
      *unint64_t v7 = *(void *)"Pass Name";
      unsigned int v8 = v39 + 9;
      v39 += 9;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v37, "Pass Name", 9uLL);
      unsigned int v8 = v39;
    }
    if ((unint64_t)v8 >= v38)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v37, 44);
    }
    else
    {
      uint64_t v39 = v8 + 1;
      *unsigned int v8 = 44;
    }
    uint64_t v16 = v39;
    if (v38 - (unint64_t)v39 > 0x18)
    {
      *(_OWORD *)uint64_t v39 = *(_OWORD *)"# of missing debug values";
      *(_OWORD *)(v16 + 9) = *(_OWORD *)"ing debug values";
      unsigned int v17 = v39 + 25;
      v39 += 25;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v37, "# of missing debug values", 0x19uLL);
      unsigned int v17 = v39;
    }
    if ((unint64_t)v17 >= v38)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v37, 44);
    }
    else
    {
      uint64_t v39 = v17 + 1;
      *unsigned int v17 = 44;
    }
    uint64_t v18 = v39;
    if (v38 - (unint64_t)v39 > 0x15)
    {
      *(_OWORD *)uint64_t v39 = *(_OWORD *)"# of missing locations";
      *(void *)(v18 + 14) = *(void *)"ocations";
      uint64_t v19 = v39 + 22;
      v39 += 22;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v37, "# of missing locations", 0x16uLL);
      uint64_t v19 = v39;
    }
    if ((unint64_t)v19 >= v38)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v37, 44);
    }
    else
    {
      uint64_t v39 = v19 + 1;
      *uint64_t v19 = 44;
    }
    int v20 = v39;
    if (v38 - (unint64_t)v39 > 0x1B)
    {
      *(_OWORD *)uint64_t v39 = *(_OWORD *)"Missing/Expected value ratio";
      *(_OWORD *)(v20 + 12) = *(_OWORD *)"cted value ratio";
      uint64_t v21 = v39 + 28;
      v39 += 28;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v37, "Missing/Expected value ratio", 0x1CuLL);
      uint64_t v21 = v39;
    }
    if ((unint64_t)v21 >= v38)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v37, 44);
    }
    else
    {
      uint64_t v39 = v21 + 1;
      char *v21 = 44;
    }
    char v22 = v39;
    if (v38 - (unint64_t)v39 > 0x1E)
    {
      *(_OWORD *)uint64_t v39 = *(_OWORD *)"Missing/Expected location ratio";
      *(_OWORD *)(v22 + 15) = *(_OWORD *)"d location ratio";
      int v23 = v39 + 31;
      v39 += 31;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v37, "Missing/Expected location ratio", 0x1FuLL);
      int v23 = v39;
    }
    if ((unint64_t)v23 >= v38)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v37, 10);
    }
    else
    {
      uint64_t v39 = v23 + 1;
      char *v23 = 10;
    }
    uint64_t v24 = *(void *)(a3 + 24);
    for (uint64_t i = *(void *)(a3 + 32); v24 != i; v24 += 32)
    {
      int v26 = *(const void **)v24;
      unint64_t v27 = *(void *)(v24 + 8);
      unint64_t v28 = *(unsigned int *)(v24 + 16);
      unint64_t v29 = *(unsigned int *)(v24 + 24);
      unsigned int v30 = *(_DWORD *)(v24 + 28);
      uint64_t v31 = v39;
      if (v27 <= v38 - (unint64_t)v39)
      {
        if (v27)
        {
          memcpy(v39, v26, *(void *)(v24 + 8));
          uint64_t v31 = &v39[v27];
          v39 += v27;
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v37, (const char *)v26, *(void *)(v24 + 8));
        uint64_t v31 = v39;
      }
      if ((unint64_t)v31 >= v38)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v37, 44);
      }
      else
      {
        uint64_t v39 = v31 + 1;
        *uint64_t v31 = 44;
      }
      sub_1CD098D14((llvm::raw_ostream *)v37, v28, 0, 0, 0);
      uint64_t v32 = v39;
      if ((unint64_t)v39 >= v38)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v37, 44);
      }
      else
      {
        ++v39;
        *uint64_t v32 = 44;
      }
      sub_1CD098D14((llvm::raw_ostream *)v37, v29, 0, 0, 0);
      int64_t v33 = v39;
      if ((unint64_t)v39 >= v38)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v37, 44);
      }
      else
      {
        ++v39;
        *int64_t v33 = 44;
      }
      llvm::write_double((llvm::raw_ostream *)v37, 0, 0, 0, (float)((float)v28 / (float)v30));
      uint64_t v34 = v39;
      if ((unint64_t)v39 >= v38)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v37, 44);
      }
      else
      {
        ++v39;
        *uint64_t v34 = 44;
      }
      llvm::write_double((llvm::raw_ostream *)v37, 0, 0, 0, (float)((float)v29 / (float)v30));
      unsigned int v35 = v39;
      if ((unint64_t)v39 >= v38)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v37, 10);
      }
      else
      {
        ++v39;
        *unsigned int v35 = 10;
      }
    }
  }
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v37);
}

uint64_t sub_1CD15E2D8(llvm::Module *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, size_t a7, int a8, uint64_t a9)
{
  uint64_t v214 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v204 = a4;
  *((void *)&v204 + 1) = a5;
  uint64_t v210 = "llvm.debugify";
  v212[8] = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(a1, (const char **)&v210);
  if (!NamedMetadata)
  {
    if (byte_1EBCFC0A0) {
      int v107 = (llvm::raw_ostream *)llvm::nulls(0);
    }
    else {
      int v107 = (llvm::raw_ostream *)llvm::errs(0);
    }
    uint64_t v151 = v107;
    uint64_t v153 = *((void *)v107 + 3);
    uint64_t v152 = (void *)*((void *)v107 + 4);
    if (a7 <= v153 - (uint64_t)v152)
    {
      if (a7)
      {
        memcpy(v152, a6, a7);
        uint64_t v152 = (void *)(*((void *)v151 + 4) + a7);
        *((void *)v151 + 4) = v152;
      }
    }
    else
    {
      llvm::raw_ostream::write(v151, (const char *)a6, a7);
      uint64_t v152 = (void *)*((void *)v151 + 4);
    }
    if (*((void *)v151 + 3) - (void)v152 > 0x2BuLL)
    {
      uint64_t v150 = 0;
      qmemcpy(v152, ": Skipping module without debugify metadata\n", 44);
      *((void *)v151 + 4) += 44;
    }
    else
    {
      llvm::raw_ostream::write(v151, ": Skipping module without debugify metadata\n", 0x2CuLL);
      return 0;
    }
    return v150;
  }
  uint64_t v16 = **(void ***)(NamedMetadata + 48);
  uint64_t v17 = *(void *)(*(void *)(*v16 - 8 * *(unsigned int *)(*v16 + 8)) + 128);
  uint64_t v18 = (void *)(v17 + 24);
  if (*(_DWORD *)(v17 + 32) >= 0x41u) {
    uint64_t v18 = (void *)*v18;
  }
  int v19 = *(_DWORD *)v18;
  uint64_t v20 = *(void *)(*(void *)(v16[1] - 8 * *(unsigned int *)(v16[1] + 8)) + 128);
  uint64_t v21 = (void *)(v20 + 24);
  int v198 = a8;
  if (*(_DWORD *)(v20 + 32) >= 0x41u) {
    uint64_t v21 = (void *)*v21;
  }
  char v22 = 0;
  int v200 = *(_DWORD *)v21;
  if (a9 && a5)
  {
    int v191 = v19;
    uint64_t v192 = sub_1CD87C938(a9, &v204);
    int v19 = v191;
    char v22 = (_DWORD *)v192;
  }
  size_t v197 = a7;
  int v195 = v19;
  sub_1CB9F9A80((uint64_t)&v210, v19, 1);
  unint64_t FragmentSizeInBits = sub_1CB9F9A80((uint64_t)&v206, v200, 1);
  uint64_t v199 = a1;
  size_t v196 = v22;
  if (a2 == a3)
  {
    char v202 = 0;
    goto LABEL_187;
  }
  char v202 = 0;
  do
  {
    if (a2) {
      uint64_t v24 = a2 - 56;
    }
    else {
      uint64_t v24 = 0;
    }
    unint64_t FragmentSizeInBits = sub_1CD15A81C(v24);
    if (FragmentSizeInBits) {
      goto LABEL_182;
    }
    uint64_t v25 = v24 + 72;
    uint64_t i = *(void *)(v24 + 80);
    if (i == v24 + 72) {
      goto LABEL_182;
    }
    uint64_t v27 = i - 24;
    if (!i) {
      uint64_t v27 = 0;
    }
    uint64_t v28 = *(void *)(v27 + 48);
    if (v28 == v27 + 40)
    {
      uint64_t v29 = *(void *)(v24 + 80);
      do
      {
        uint64_t v29 = *(void *)(v29 + 8);
        if (v29 == v25) {
          goto LABEL_95;
        }
        uint64_t v30 = v29 - 24;
        if (!v29) {
          uint64_t v30 = 0;
        }
        uint64_t v28 = *(void *)(v30 + 48);
      }
      while (v28 == v30 + 40);
    }
    else
    {
      uint64_t v29 = *(void *)(v24 + 80);
    }
    unsigned int v31 = (v24 >> 4) ^ (v24 >> 9);
    while (1)
    {
      if (v28) {
        uint64_t v32 = v28 - 24;
      }
      else {
        uint64_t v32 = 0;
      }
      unint64_t FragmentSizeInBits = sub_1CC27FAEC(v32);
      if (FragmentSizeInBits) {
        goto LABEL_42;
      }
      int64_t v33 = *(unsigned __int8 **)(v32 + 48);
      uint64_t v203 = v33;
      if (!v33 || (FragmentSizeInBits = llvm::MetadataTracking::track((uint64_t)&v203, v33, 2), (uint64_t v34 = v203) == 0))
      {
        if (*(unsigned char *)(v32 + 16) == 83) {
          goto LABEL_42;
        }
        if (byte_1EBCFC0A0) {
          uint64_t v42 = (llvm::raw_ostream *)llvm::nulls((llvm *)FragmentSizeInBits);
        }
        else {
          uint64_t v42 = (llvm::raw_ostream *)llvm::errs((llvm *)FragmentSizeInBits);
        }
        uint64_t v43 = (void *)*((void *)v42 + 4);
        if (*((void *)v42 + 3) - (void)v43 > 0x34uLL)
        {
          qmemcpy(v43, "WARNING: Instruction with empty DebugLoc in function ", 53);
          *((void *)v42 + 4) += 53;
        }
        else
        {
          uint64_t v42 = llvm::raw_ostream::write(v42, "WARNING: Instruction with empty DebugLoc in function ", 0x35uLL);
        }
        if (byte_1EBCFC0A0) {
          uint64_t v44 = llvm::nulls(v42);
        }
        else {
          uint64_t v44 = llvm::errs(v42);
        }
        uint64_t v45 = v44;
        if ((*(unsigned char *)(v24 + 23) & 0x10) != 0)
        {
          uint64_t v46 = ***(void ***)v24;
          uint64_t v47 = *(void *)(v46 + 152);
          uint64_t v48 = *(unsigned int *)(v46 + 168);
          if (!v48) {
            goto LABEL_74;
          }
          LODWORD(v49) = (v48 - 1) & v31;
          uint64_t v50 = (uint64_t *)(v47 + 16 * v49);
          uint64_t v51 = *v50;
          if (*v50 != v24)
          {
            int v52 = 1;
            while (v51 != -4096)
            {
              int v53 = v49 + v52++;
              uint64_t v49 = v53 & (v48 - 1);
              uint64_t v51 = *(void *)(v47 + 16 * v49);
              if (v51 == v24)
              {
                uint64_t v50 = (uint64_t *)(v47 + 16 * v49);
                goto LABEL_75;
              }
            }
LABEL_74:
            uint64_t v50 = (uint64_t *)(v47 + 16 * v48);
          }
LABEL_75:
          unsigned int v194 = v31;
          uint64_t v54 = (size_t *)v50[1];
          size_t v57 = *v54;
          uint64_t v55 = v54 + 2;
          size_t v56 = v57;
          uint64_t v58 = v44 + 3;
          uint64_t v60 = (llvm::raw_ostream **)(v44 + 4);
          uint64_t v59 = (llvm::raw_ostream *)v44[4];
          if (v57 <= v45[3] - (void)v59)
          {
            if (v56)
            {
              unint64_t v193 = v45;
              memcpy(v59, v55, v56);
              uint64_t v45 = v193;
              uint64_t v59 = (llvm::raw_ostream *)((char *)*v60 + v56);
              _DWORD *v60 = v59;
            }
          }
          else
          {
            size_t v61 = v56;
            int v62 = v45;
            llvm::raw_ostream::write((llvm::raw_ostream *)v45, (const char *)v55, v61);
            uint64_t v45 = v62;
            uint64_t v59 = (llvm::raw_ostream *)v62[4];
          }
          unsigned int v31 = v194;
        }
        else
        {
          uint64_t v60 = (llvm::raw_ostream **)(v44 + 4);
          uint64_t v59 = (llvm::raw_ostream *)v44[4];
          uint64_t v58 = v45 + 3;
        }
        if (*v58 - (void)v59 > 2uLL)
        {
          *((unsigned char *)v59 + 2) = 45;
          *(_WORD *)uint64_t v59 = 11552;
          _DWORD *v60 = (llvm::raw_ostream *)((char *)*v60 + 3);
        }
        else
        {
          uint64_t v59 = llvm::raw_ostream::write((llvm::raw_ostream *)v45, " --", 3uLL);
        }
        if (byte_1EBCFC0A0) {
          uint64_t v63 = (llvm::raw_ostream *)llvm::nulls(v59);
        }
        else {
          uint64_t v63 = (llvm::raw_ostream *)llvm::errs(v59);
        }
        llvm::Value::print((llvm::Value *)v32, v63, 0);
        if (byte_1EBCFC0A0) {
          unint64_t FragmentSizeInBits = (unint64_t)llvm::nulls(v64);
        }
        else {
          unint64_t FragmentSizeInBits = (unint64_t)llvm::errs(v64);
        }
        uint64_t v65 = *(unsigned char **)(FragmentSizeInBits + 32);
        if (*(unsigned char **)(FragmentSizeInBits + 24) == v65)
        {
          unint64_t FragmentSizeInBits = (unint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)FragmentSizeInBits, "\n", 1uLL);
        }
        else
        {
          *uint64_t v65 = 10;
          ++*(void *)(FragmentSizeInBits + 32);
        }
        goto LABEL_34;
      }
      int v35 = *((_DWORD *)v203 + 1);
      if (!v35) {
        goto LABEL_35;
      }
      *(void *)&v210[8 * ((v35 - 1) >> 6)] &= ~(1 << (v35 - 1));
LABEL_34:
      uint64_t v34 = v203;
      if (!v203) {
        goto LABEL_42;
      }
LABEL_35:
      int v36 = *v34;
      if ((v36 - 4) > 0x1E)
      {
        if ((v36 - 3) >= 0xFFFFFFFE) {
          uint64_t v41 = v34;
        }
        else {
          uint64_t v41 = 0;
        }
        if ((v36 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v38 = (unint64_t)(v41 + 8);
LABEL_56:
          uint64_t v205 = &v203;
          unint64_t FragmentSizeInBits = sub_1CC5FA668(v38 + 16, &v205);
          goto LABEL_42;
        }
        if (v36 == 3) {
          *((void *)v34 + 1) = 0;
        }
      }
      else if ((v34[1] & 0x7F) == 2 || *((_DWORD *)v34 + 3))
      {
        uint64_t v37 = *((void *)v34 + 2);
        if ((v37 & 4) != 0)
        {
          unint64_t v38 = v37 & 0xFFFFFFFFFFFFFFF8;
          if (v38) {
            goto LABEL_56;
          }
        }
      }
LABEL_42:
      uint64_t v28 = *(void *)(v28 + 8);
      uint64_t v39 = v29 - 24;
      if (!v29) {
        uint64_t v39 = 0;
      }
      if (v28 == v39 + 40) {
        break;
      }
LABEL_49:
      if (v29 == v25) {
        goto LABEL_94;
      }
    }
    while (1)
    {
      uint64_t v29 = *(void *)(v29 + 8);
      if (v29 == v25) {
        break;
      }
      uint64_t v40 = v29 - 24;
      if (!v29) {
        uint64_t v40 = 0;
      }
      uint64_t v28 = *(void *)(v40 + 48);
      if (v28 != v40 + 40) {
        goto LABEL_49;
      }
    }
LABEL_94:
    for (uint64_t i = *(void *)(v24 + 80); ; uint64_t i = *(void *)(i + 8))
    {
LABEL_95:
      if (i == v25) {
        goto LABEL_182;
      }
      uint64_t v66 = i - 24;
      if (!i) {
        uint64_t v66 = 0;
      }
      uint64_t v67 = *(void *)(v66 + 48);
      if (v67 != v66 + 40) {
        break;
      }
    }
    while (2)
    {
      if (v67) {
        uint64_t v87 = v67 - 24;
      }
      else {
        uint64_t v87 = 0;
      }
      unint64_t FragmentSizeInBits = sub_1CC27FAEC(v87);
      if (FragmentSizeInBits) {
        uint64_t v88 = (llvm::DbgVariableIntrinsic *)v87;
      }
      else {
        uint64_t v88 = 0;
      }
      if (!v67 || !FragmentSizeInBits) {
        goto LABEL_174;
      }
      uint64_t v89 = (void *)((char *)v88 - 32 * (*((_DWORD *)v88 + 5) & 0x7FFFFFF));
      uint64_t v90 = *(void *)(*(void *)(v89[4] + 24) - 8 * *(unsigned int *)(*(void *)(v89[4] + 24) + 8) + 8);
      if (!v90 || (BOOL v91 = *(void **)(v90 + 8), (v92 = *v91) == 0))
      {
        BOOL v99 = 1;
        int v100 = -1;
        goto LABEL_163;
      }
      unint64_t v93 = 0;
      int v94 = (unsigned __int8 *)(v91 + 3);
      while (2)
      {
        int v95 = *v94;
        if ((v95 - 48) < 0xA)
        {
          int v96 = -48;
LABEL_148:
          unsigned int v97 = v96 + v95;
          if (v97 > 9) {
            goto LABEL_158;
          }
          unint64_t v98 = 10 * v93 + v97;
          if (v93 > v98 / 0xA)
          {
            BOOL v99 = 1;
            goto LABEL_160;
          }
          ++v94;
          unint64_t v93 = v98;
          if (!--v92) {
            goto LABEL_159;
          }
          continue;
        }
        break;
      }
      if ((v95 - 97) < 0x1A)
      {
        int v96 = -87;
        goto LABEL_148;
      }
      if ((v95 - 65) <= 0x19)
      {
        int v96 = -55;
        goto LABEL_148;
      }
LABEL_158:
      unint64_t v98 = v93;
LABEL_159:
      BOOL v99 = v92 != 0;
LABEL_160:
      if (HIDWORD(v98)) {
        int v100 = -2;
      }
      else {
        int v100 = v98 - 1;
      }
LABEL_163:
      if (((*(void *)(*(void *)(v89[8] + 24) + 32) - *(void *)(*(void *)(v89[8] + 24) + 24)) & 0x7FFFFFFF8) != 0) {
        goto LABEL_169;
      }
      uint64_t v101 = *(unsigned __int8 **)(*v89 + 24);
      int v102 = *v101;
      if ((v102 - 4) < 0x1C || (v102 - 33) < 2) {
        goto LABEL_169;
      }
      if (v102 == 32) {
        uint64_t v101 = (unsigned __int8 *)**((void **)v101 + 3);
      }
      uint64_t v103 = (unsigned __int8 **)*((void *)v101 + 16);
      if (!v103) {
        goto LABEL_169;
      }
      unint64_t v68 = *v103;
      unint64_t v69 = sub_1CD15FBC0((uint64_t)v199, *v103);
      unint64_t FragmentSizeInBits = llvm::DbgVariableIntrinsic::getFragmentSizeInBits(v88);
      if (!v69 || v70 == 0) {
        goto LABEL_169;
      }
      if (v68[8] != 13)
      {
        if (v69 != FragmentSizeInBits) {
          goto LABEL_114;
        }
LABEL_169:
        char v86 = 0;
        if (v99) {
          unsigned int v104 = -2;
        }
        else {
          unsigned int v104 = v100;
        }
        *((void *)v206 + (v104 >> 6)) &= ~(1 << v104);
        goto LABEL_173;
      }
      uint64_t v72 = *(void *)(((void *)v88 - 4 * (*((_DWORD *)v88 + 5) & 0x7FFFFFF))[4] + 24);
      uint64_t v73 = *(void *)(v72 - 8 * *(unsigned int *)(v72 + 8) + 24);
      if (*(unsigned char *)v73 == 11 && (int v74 = *(_DWORD *)(v73 + 52) - 5, v74 <= 3)) {
        uint64_t v75 = qword_1CFB329D0[v74] | 0x100000000;
      }
      else {
        uint64_t v75 = 0;
      }
      if ((v75 & 0xFF00000000) == 0 || v75 || v69 >= FragmentSizeInBits) {
        goto LABEL_169;
      }
LABEL_114:
      unint64_t v76 = FragmentSizeInBits;
      if (byte_1EBCFC0A0) {
        uint64_t v77 = (llvm::raw_ostream *)llvm::nulls((llvm *)FragmentSizeInBits);
      }
      else {
        uint64_t v77 = (llvm::raw_ostream *)llvm::errs((llvm *)FragmentSizeInBits);
      }
      uint64_t v78 = v77;
      uint64_t v79 = (void *)*((void *)v77 + 4);
      if (*((void *)v77 + 3) - (void)v79 > 0x21uLL)
      {
        qmemcpy(v79, "ERROR: dbg.value operand has size ", 34);
        *((void *)v77 + 4) += 34;
      }
      else
      {
        llvm::raw_ostream::write(v77, "ERROR: dbg.value operand has size ", 0x22uLL);
      }
      sub_1CD098D14(v78, v69, 0, 0, 0);
      uint64_t v80 = (void *)*((void *)v78 + 4);
      if (*((void *)v78 + 3) - (void)v80 > 0x1BuLL)
      {
        qmemcpy(v80, ", but its variable has size ", 28);
        *((void *)v78 + 4) += 28;
      }
      else
      {
        llvm::raw_ostream::write(v78, ", but its variable has size ", 0x1CuLL);
      }
      uint64_t v81 = sub_1CD098D14(v78, v76, 0, 0, 0);
      uint64_t v82 = (_WORD *)*((void *)v78 + 4);
      if (*((void *)v78 + 3) - (void)v82 > 1uLL)
      {
        *uint64_t v82 = 8250;
        *((void *)v78 + 4) += 2;
      }
      else
      {
        uint64_t v81 = llvm::raw_ostream::write(v78, ": ", 2uLL);
      }
      if (byte_1EBCFC0A0) {
        uint64_t v83 = (llvm::raw_ostream *)llvm::nulls(v81);
      }
      else {
        uint64_t v83 = (llvm::raw_ostream *)llvm::errs(v81);
      }
      llvm::Value::print(v88, v83, 0);
      if (byte_1EBCFC0A0) {
        unint64_t FragmentSizeInBits = (unint64_t)llvm::nulls(v84);
      }
      else {
        unint64_t FragmentSizeInBits = (unint64_t)llvm::errs(v84);
      }
      unsigned int v85 = *(unsigned char **)(FragmentSizeInBits + 32);
      if (*(unsigned char **)(FragmentSizeInBits + 24) == v85)
      {
        char v86 = 1;
        unint64_t FragmentSizeInBits = (unint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)FragmentSizeInBits, "\n", 1uLL);
      }
      else
      {
        *unsigned int v85 = 10;
        ++*(void *)(FragmentSizeInBits + 32);
        char v86 = 1;
      }
LABEL_173:
      v202 |= v86;
LABEL_174:
      uint64_t v67 = *(void *)(v67 + 8);
      uint64_t v105 = i - 24;
      if (!i) {
        uint64_t v105 = 0;
      }
      if (v67 != v105 + 40)
      {
LABEL_181:
        if (i == v25) {
          goto LABEL_182;
        }
        continue;
      }
      break;
    }
    while (1)
    {
      uint64_t i = *(void *)(i + 8);
      if (i == v25) {
        break;
      }
      uint64_t v106 = i - 24;
      if (!i) {
        uint64_t v106 = 0;
      }
      uint64_t v67 = *(void *)(v106 + 48);
      if (v67 != v106 + 40) {
        goto LABEL_181;
      }
    }
LABEL_182:
    a2 = *(void *)(a2 + 8);
  }
  while (a2 != a3);
LABEL_187:
  if (v213)
  {
    uint64_t v108 = 0;
    int v109 = v210;
    uint64_t v110 = (v213 - 1) & 0xFFFFFFC0;
    while (1)
    {
      uint64_t v112 = *(void *)v109;
      v109 += 8;
      uint64_t v111 = v112;
      unint64_t v113 = v110 + v108 ? -1 : 0xFFFFFFFFFFFFFFFFLL >> -(char)v213;
      unint64_t v114 = v113 & v111;
      if (v114) {
        break;
      }
      v108 -= 64;
      if (v110 + v108 == -64) {
        goto LABEL_196;
      }
    }
    int v115 = __clz(__rbit64(v114));
    if (v115 + 1 != v108)
    {
      int v155 = v115 - v108;
      do
      {
        if (byte_1EBCFC0A0) {
          uint64_t v156 = (llvm::raw_ostream *)llvm::nulls((llvm *)FragmentSizeInBits);
        }
        else {
          uint64_t v156 = (llvm::raw_ostream *)llvm::errs((llvm *)FragmentSizeInBits);
        }
        uint64_t v157 = v156;
        uint64_t v158 = (void *)*((void *)v156 + 4);
        if (*((void *)v156 + 3) - (void)v158 > 0x15uLL)
        {
          qmemcpy(v158, "WARNING: Missing line ", 22);
          *((void *)v156 + 4) += 22;
        }
        else
        {
          llvm::raw_ostream::write(v156, "WARNING: Missing line ", 0x16uLL);
        }
        unsigned int v159 = v155 + 1;
        unint64_t FragmentSizeInBits = (unint64_t)sub_1CD098D14(v157, (v155 + 1), 0, 0, 0);
        uint64_t v160 = (unsigned char *)*((void *)v157 + 4);
        if (*((unsigned char **)v157 + 3) == v160)
        {
          unint64_t FragmentSizeInBits = (unint64_t)llvm::raw_ostream::write(v157, "\n", 1uLL);
        }
        else
        {
          *uint64_t v160 = 10;
          ++*((void *)v157 + 4);
        }
        if (v159 == v213) {
          break;
        }
        unsigned int v161 = v159 >> 6;
        unsigned int v162 = v213 - 1;
        if (v159 >> 6 > (v213 - 1) >> 6) {
          break;
        }
        uint64_t v163 = 0;
        uint64_t v164 = v162 >> 6;
        unint64_t v165 = (v159 & 0x3F) != 0 ? ~(0xFFFFFFFFFFFFFFFFLL >> -(v159 & 0x3F)) : -1;
        unint64_t v166 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v162;
        int v167 = v161 << 6;
        uint64_t v168 = v164 - v161;
        uint64_t v169 = &v210[8 * v161];
        while (1)
        {
          uint64_t v170 = v163 ? -1 : v165;
          unint64_t v171 = v168 == v163 ? v166 : -1;
          unint64_t v172 = v170 & v171 & *(void *)&v169[8 * v163];
          if (v172) {
            break;
          }
          v167 += 64;
          if (v168 + 1 == ++v163) {
            goto LABEL_196;
          }
        }
        int v155 = __clz(__rbit64(v172)) + v167;
      }
      while (v155 != -1);
    }
  }
LABEL_196:
  if (v209)
  {
    uint64_t v116 = 0;
    size_t v117 = (uint64_t *)v206;
    uint64_t v118 = (v209 - 1) & 0xFFFFFFC0;
    while (1)
    {
      uint64_t v120 = *v117++;
      uint64_t v119 = v120;
      unint64_t v121 = v118 + v116 ? -1 : 0xFFFFFFFFFFFFFFFFLL >> -(char)v209;
      unint64_t v122 = v121 & v119;
      if (v122) {
        break;
      }
      v116 -= 64;
      if (v118 + v116 == -64) {
        goto LABEL_205;
      }
    }
    int v123 = __clz(__rbit64(v122));
    if (v123 + 1 != v116)
    {
      int v173 = v123 - v116;
      do
      {
        if (byte_1EBCFC0A0) {
          int v174 = (llvm::raw_ostream *)llvm::nulls((llvm *)FragmentSizeInBits);
        }
        else {
          int v174 = (llvm::raw_ostream *)llvm::errs((llvm *)FragmentSizeInBits);
        }
        int v175 = v174;
        unsigned int v176 = (void *)*((void *)v174 + 4);
        if (*((void *)v174 + 3) - (void)v176 > 0x19uLL)
        {
          qmemcpy(v176, "WARNING: Missing variable ", 26);
          *((void *)v174 + 4) += 26;
        }
        else
        {
          llvm::raw_ostream::write(v174, "WARNING: Missing variable ", 0x1AuLL);
        }
        unsigned int v177 = v173 + 1;
        unint64_t FragmentSizeInBits = (unint64_t)sub_1CD098D14(v175, (v173 + 1), 0, 0, 0);
        uint64_t v178 = (unsigned char *)*((void *)v175 + 4);
        if (*((unsigned char **)v175 + 3) == v178)
        {
          unint64_t FragmentSizeInBits = (unint64_t)llvm::raw_ostream::write(v175, "\n", 1uLL);
        }
        else
        {
          *uint64_t v178 = 10;
          ++*((void *)v175 + 4);
        }
        if (v177 == v209) {
          break;
        }
        unsigned int v179 = v177 >> 6;
        unsigned int v180 = v209 - 1;
        if (v177 >> 6 > (v209 - 1) >> 6) {
          break;
        }
        uint64_t v181 = 0;
        uint64_t v182 = v180 >> 6;
        unint64_t v183 = (v177 & 0x3F) != 0 ? ~(0xFFFFFFFFFFFFFFFFLL >> -(v177 & 0x3F)) : -1;
        unint64_t v184 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v180;
        int v185 = v179 << 6;
        uint64_t v186 = v182 - v179;
        uint64_t v187 = (char *)v206 + 8 * v179;
        while (1)
        {
          uint64_t v188 = v181 ? -1 : v183;
          unint64_t v189 = v186 == v181 ? v184 : -1;
          unint64_t v190 = v188 & v189 & *(void *)&v187[8 * v181];
          if (v190) {
            break;
          }
          v185 += 64;
          if (v186 + 1 == ++v181) {
            goto LABEL_205;
          }
        }
        int v173 = __clz(__rbit64(v190)) + v185;
      }
      while (v173 != -1);
    }
  }
LABEL_205:
  if (v196)
  {
    v196[3] += v195;
    if (v211)
    {
      int v124 = 0;
      int64x2_t v125 = v210;
      uint64_t v126 = 8 * v211;
      do
      {
        int8x8_t v127 = *(int8x8_t *)v125;
        v125 += 8;
        uint8x8_t v128 = (uint8x8_t)vcnt_s8(v127);
        v128.i16[0] = vaddlv_u8(v128);
        v124 += v128.i32[0];
        v126 -= 8;
      }
      while (v126);
    }
    else
    {
      int v124 = 0;
    }
    int v129 = v196[2] + v124;
    v196[1] += v200;
    v196[2] = v129;
    if (v207)
    {
      int v130 = 0;
      uint64_t v131 = (int8x8_t *)v206;
      uint64_t v132 = 8 * v207;
      do
      {
        int8x8_t v133 = *v131++;
        uint8x8_t v134 = (uint8x8_t)vcnt_s8(v133);
        v134.i16[0] = vaddlv_u8(v134);
        v130 += v134.i32[0];
        v132 -= 8;
      }
      while (v132);
    }
    else
    {
      int v130 = 0;
    }
    *v196 += v130;
  }
  if (byte_1EBCFC0A0) {
    unint64_t v135 = (llvm::raw_ostream *)llvm::nulls((llvm *)FragmentSizeInBits);
  }
  else {
    unint64_t v135 = (llvm::raw_ostream *)llvm::errs((llvm *)FragmentSizeInBits);
  }
  int v136 = v135;
  uint64_t v138 = *((void *)v135 + 3);
  int v137 = (void *)*((void *)v135 + 4);
  if (v197 <= v138 - (uint64_t)v137)
  {
    if (v197)
    {
      int v137 = memcpy(v137, a6, v197);
      *((void *)v136 + 4) += v197;
    }
  }
  else
  {
    int v137 = llvm::raw_ostream::write(v136, (const char *)a6, v197);
  }
  size_t v139 = *((void *)&v204 + 1);
  if (*((void *)&v204 + 1))
  {
    if (byte_1EBCFC0A0) {
      unint64_t v140 = (llvm::raw_ostream *)llvm::nulls((llvm *)v137);
    }
    else {
      unint64_t v140 = (llvm::raw_ostream *)llvm::errs((llvm *)v137);
    }
    unint64_t v141 = v140;
    uint64_t v142 = (_WORD *)*((void *)v140 + 4);
    if (*((void *)v140 + 3) - (void)v142 > 1uLL)
    {
      *uint64_t v142 = 23328;
      uint64_t v143 = (void *)(*((void *)v140 + 4) + 2);
      *((void *)v141 + 4) = v143;
    }
    else
    {
      llvm::raw_ostream::write(v140, " [", 2uLL);
      uint64_t v143 = (void *)*((void *)v141 + 4);
    }
    if (v139 <= *((void *)v141 + 3) - (void)v143)
    {
      int v137 = memcpy(v143, (const void *)v204, v139);
      uint64_t v144 = (unsigned char *)(*((void *)v141 + 4) + v139);
      *((void *)v141 + 4) = v144;
    }
    else
    {
      int v137 = llvm::raw_ostream::write(v141, (const char *)v204, v139);
      uint64_t v144 = (unsigned char *)*((void *)v141 + 4);
    }
    if (*((unsigned char **)v141 + 3) == v144)
    {
      int v137 = llvm::raw_ostream::write(v141, "]", 1uLL);
    }
    else
    {
      *uint64_t v144 = 93;
      ++*((void *)v141 + 4);
    }
  }
  if (byte_1EBCFC0A0) {
    int v145 = (llvm::raw_ostream *)llvm::nulls((llvm *)v137);
  }
  else {
    int v145 = (llvm::raw_ostream *)llvm::errs((llvm *)v137);
  }
  int v146 = (_WORD *)*((void *)v145 + 4);
  if (*((void *)v145 + 3) - (void)v146 > 1uLL)
  {
    *int v146 = 8250;
    unint64_t v147 = (_DWORD *)(*((void *)v145 + 4) + 2);
    *((void *)v145 + 4) = v147;
  }
  else
  {
    int v145 = llvm::raw_ostream::write(v145, ": ", 2uLL);
    unint64_t v147 = (_DWORD *)*((void *)v145 + 4);
  }
  if (v202) {
    unint64_t v148 = "FAIL";
  }
  else {
    unint64_t v148 = "PASS";
  }
  if (*((void *)v145 + 3) - (void)v147 > 3uLL)
  {
    *unint64_t v147 = *(_DWORD *)v148;
    uint64_t v149 = (unsigned char *)(*((void *)v145 + 4) + 4);
    *((void *)v145 + 4) = v149;
  }
  else
  {
    int v145 = llvm::raw_ostream::write(v145, v148, 4uLL);
    uint64_t v149 = (unsigned char *)*((void *)v145 + 4);
  }
  if ((unint64_t)v149 >= *((void *)v145 + 3))
  {
    llvm::raw_ostream::write(v145, 10);
    if (v198) {
      goto LABEL_249;
    }
LABEL_247:
    uint64_t v150 = 0;
  }
  else
  {
    *((void *)v145 + 4) = v149 + 1;
    *uint64_t v149 = 10;
    if (!v198) {
      goto LABEL_247;
    }
LABEL_249:
    uint64_t v150 = llvm::stripDebugifyMetadata(v199, (llvm::Module *)v148);
  }
  if (v206 != &v208) {
    free(v206);
  }
  if (v210 != (char *)v212) {
    free(v210);
  }
  return v150;
}

void llvm::DebugifyEachInstrumentation::registerCallbacks(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 296);
  uint64_t v5 = *(unsigned int *)(a2 + 300);
  if (v4 >= v5)
  {
    if (v5 == -1) {
      goto LABEL_48;
    }
    if (((2 * v5) | 1uLL) >= 0xFFFFFFFF) {
      uint64_t v9 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v9 = (2 * v5) | 1;
    }
    size_t v10 = malloc_type_malloc(32 * v9, 0x4065EBACuLL);
    if (!v10) {
LABEL_49:
    }
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    uint64_t v11 = v10;
    uint64_t v12 = *(unsigned int *)(a2 + 296);
    v10[4 * v12 + 3] = (char *)off_1EC7DFBC0 + 2;
    uint64_t v13 = *(void **)(a2 + 288);
    if (v12)
    {
      uint64_t v14 = 32 * v12;
      uint64_t v15 = v10;
      do
      {
        v15[3] = 0;
        uint64_t v16 = v13[3];
        v15[3] = v16;
        if (v13[3] >= 8uLL)
        {
          if ((v16 & 2) != 0 && (v16 & 4) != 0)
          {
            (*(void (**)(void *, void *))((v16 & 0xFFFFFFFFFFFFFFF8) + 8))(v15, v13);
          }
          else
          {
            long long v17 = *(_OWORD *)v13;
            v15[2] = v13[2];
            *(_OWORD *)uint64_t v15 = v17;
          }
          v13[3] = 0;
        }
        v13 += 4;
        v15 += 4;
        v14 -= 32;
      }
      while (v14);
      uint64_t v13 = *(void **)(a2 + 288);
      uint64_t v18 = *(unsigned int *)(a2 + 296);
      if (v18)
      {
        uint64_t v19 = 32 * v18;
        uint64_t v20 = (char *)(v13 - 4);
        do
        {
          sub_1CD500E14(&v20[v19]);
          v19 -= 32;
        }
        while (v19);
        uint64_t v13 = *(void **)(a2 + 288);
      }
    }
    if (v13 != (void *)(a2 + 304)) {
      free(v13);
    }
    *(void *)(a2 + 288) = v11;
    *(_DWORD *)(a2 + 300) = v9;
    LODWORD(v4) = *(_DWORD *)(a2 + 296);
  }
  else
  {
    *(void *)(*(void *)(a2 + 288) + 32 * v4 + 24) = (char *)off_1EC7DFBC0 + 2;
  }
  *(_DWORD *)(a2 + 296) = v4 + 1;
  uint64_t v6 = *(unsigned int *)(a2 + 440);
  uint64_t v7 = *(unsigned int *)(a2 + 444);
  if (v6 < v7)
  {
    unsigned int v8 = (void *)(*(void *)(a2 + 432) + 32 * v6);
    *unsigned int v8 = a1;
    v8[3] = (char *)&off_1EC7DFBC8 + 2;
    goto LABEL_5;
  }
  if (v7 == -1) {
LABEL_48:
  }
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  if (((2 * v7) | 1uLL) >= 0xFFFFFFFF) {
    uint64_t v21 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v21 = (2 * v7) | 1;
  }
  char v22 = (char *)malloc_type_malloc(32 * v21, 0x4065EBACuLL);
  if (!v22) {
    goto LABEL_49;
  }
  int v23 = v22;
  uint64_t v24 = *(unsigned int *)(a2 + 440);
  uint64_t v25 = &v22[32 * v24];
  *(void *)uint64_t v25 = a1;
  *((void *)v25 + 3) = (char *)&off_1EC7DFBC8 + 2;
  int v26 = *(void **)(a2 + 432);
  if (v24)
  {
    uint64_t v27 = 32 * v24;
    uint64_t v28 = v22;
    do
    {
      *((void *)v28 + 3) = 0;
      uint64_t v29 = v26[3];
      *((void *)v28 + 3) = v29;
      if (v26[3] >= 8uLL)
      {
        if ((v29 & 2) != 0 && (v29 & 4) != 0)
        {
          (*(void (**)(char *, void *))((v29 & 0xFFFFFFFFFFFFFFF8) + 8))(v28, v26);
        }
        else
        {
          long long v30 = *(_OWORD *)v26;
          *((void *)v28 + 2) = v26[2];
          *(_OWORD *)uint64_t v28 = v30;
        }
        v26[3] = 0;
      }
      v26 += 4;
      v28 += 32;
      v27 -= 32;
    }
    while (v27);
    int v26 = *(void **)(a2 + 432);
    uint64_t v31 = *(unsigned int *)(a2 + 440);
    if (v31)
    {
      uint64_t v32 = 32 * v31;
      int64_t v33 = (char *)(v26 - 4);
      do
      {
        sub_1CD500E14(&v33[v32]);
        v32 -= 32;
      }
      while (v32);
      int v26 = *(void **)(a2 + 432);
    }
  }
  if (v26 != (void *)(a2 + 448)) {
    free(v26);
  }
  *(void *)(a2 + 432) = v23;
  *(_DWORD *)(a2 + 444) = v21;
  LODWORD(v6) = *(_DWORD *)(a2 + 440);
LABEL_5:
  *(_DWORD *)(a2 + 440) = v6 + 1;
}

uint64_t sub_1CD15F6AC(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1CD15F6E0(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1CD15F714(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1CD15F748(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  return a1;
}

void *sub_1CD15F77C(void *a1)
{
  *a1 = &unk_1F2647DB0;
  unsigned int v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CD15F7D0(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7 = a1;
  int v18 = 0;
  uint64_t v8 = *(void *)(*(void *)(a1 + 160) + 24);
  if (v8) {
    a4 = a6;
  }
  if (v8) {
    a3 = a5;
  }
  uint64_t v11 = *(unsigned int *)(a1 + 176);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 168);
    while (1)
    {
      if (*(void *)(v12 + 8) == a4)
      {
        if (!a4) {
          break;
        }
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!a1) {
          break;
        }
      }
      v12 += 48;
      if (!--v11) {
        goto LABEL_13;
      }
    }
    int v15 = *(_DWORD *)(v12 + 40);
    int v18 = v15;
  }
  else
  {
LABEL_13:
    __int16 v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    __int16 v22 = 770;
    uint64_t v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if (llvm::cl::Option::error((void *)v7, (llvm::Twine *)v21, 0, 0, v13)) {
      return 1;
    }
    int v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  uint64_t v16 = *(void *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1CB920400();
    return sub_1CD15F90C(v17);
  }
}

uint64_t sub_1CD15F90C(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

void sub_1CD15F924(void *a1)
{
  *a1 = &unk_1F2647D48;
  unsigned int v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F2647DB0;
  uint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }
  sub_1CB87DD48(a1);

  JUMPOUT(0x1D25D9CE0);
}

unint64_t sub_1CD15FA20(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t sub_1CD15FA2C(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *sub_1CD15FA3C(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    int v3 = *((_DWORD *)result + 32);
LABEL_5:
    uint64_t v4 = &unk_1F2647E00;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 148))
  {
    int v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3) {
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t sub_1CD15FAC0(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void *sub_1CD15FAD4(uint64_t a1, uint64_t a2)
{
  return sub_1CD42FB24((void *)(a1 + 152), a2);
}

void sub_1CD15FADC(void *a1)
{
  *a1 = &unk_1F2647DB0;
  unsigned int v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD15FB50(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CD15FB58(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1CD15FB6C(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1CD15FB80(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1CD15FB94(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

uint64_t sub_1CD15FBC0(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v4 = a2[8];
  if (v4 > 0x11)
  {
LABEL_9:
    if ((v4 & 0xFE) != 0x12 && v4 != 21) {
      return 0;
    }
LABEL_7:
    int isSizedDerivedType = llvm::Type::isSizedDerivedType((uint64_t)a2, 0);
    uint64_t result = 0;
    if (!isSizedDerivedType) {
      return result;
    }
    goto LABEL_3;
  }
  if (((1 << v4) & 0xAC7F) == 0)
  {
    if (((1 << v4) & 0x30000) != 0) {
      goto LABEL_7;
    }
    goto LABEL_9;
  }
LABEL_3:
  int v6 = sub_1CC5CA218((llvm::DataLayout *)(a1 + 272), (llvm::Type *)a2);
  if (v5 == 1) {
  return v6;
  }
}

void *sub_1CD15FC6C(void *result, void *a2)
{
  *uint64_t result = *a2;
  result[1] = 4;
  unsigned int v2 = result + 1;
  result[2] = 0;
  unint64_t v3 = (unint64_t)(result + 2);
  uint64_t v4 = a2[3];
  result[3] = v4;
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
  {
    unint64_t v6 = a2[1] & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v3 = *(void *)v6;
    *(void *)unint64_t v6 = v2;
    *unsigned int v2 = v6 | 4;
    if (*(void *)v3) {
      **(void **)unint64_t v3 = **(void **)v3 & 7 | v3;
    }
  }
  return result;
}

char *sub_1CD15FCE0(uint64_t a1, char *a2, char *a3, unint64_t a4)
{
  unint64_t v6 = a2;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t result = *(char **)a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    uint64_t v16 = *(char **)(a1 + 8);
    int v15 = (void *)(a1 + 8);
    uint64_t v12 = v16;
    unint64_t v17 = (v16 - result) >> 4;
    if (v17 >= a4)
    {
      uint64_t v24 = result;
      if (a2 != a3)
      {
        uint64_t v25 = result;
        do
        {
          long long v26 = *(_OWORD *)v6;
          v6 += 16;
          *(_OWORD *)uint64_t v25 = v26;
          v25 += 16;
          v24 += 16;
        }
        while (v6 != a3);
      }
      int64_t v14 = v24 - result;
      uint64_t v12 = result;
    }
    else
    {
      int v18 = &a2[16 * v17];
      if (v12 != result)
      {
        uint64_t v19 = 16 * v17;
        do
        {
          long long v20 = *(_OWORD *)v6;
          v6 += 16;
          *(_OWORD *)uint64_t result = v20;
          result += 16;
          v19 -= 16;
        }
        while (v19);
      }
      uint64_t v21 = v12;
      if (v18 != a3)
      {
        __int16 v22 = v12;
        do
        {
          long long v23 = *(_OWORD *)v18;
          v18 += 16;
          *(_OWORD *)__int16 v22 = v23;
          v22 += 16;
          v21 += 16;
        }
        while (v18 != a3);
      }
      int64_t v14 = v21 - v12;
    }
  }
  else
  {
    if (result)
    {
      *(void *)(a1 + 8) = result;
      operator delete(result);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 >> 60) {
      goto LABEL_27;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    unint64_t v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 60) {
LABEL_27:
    }
      abort();
    uint64_t result = (char *)operator new(16 * v11);
    uint64_t v12 = result;
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[16 * v11];
    uint64_t v13 = result;
    if (v6 != a3)
    {
      uint64_t result = (char *)memcpy(result, v6, (a3 - v6) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v13 = &v12[(a3 - v6) & 0xFFFFFFFFFFFFFFF0];
    }
    int64_t v14 = v13 - v12;
    int v15 = (void *)(a1 + 8);
  }
  void *v15 = &v12[v14];
  return result;
}

char *sub_1CD15FE60(char **a1, char *a2, char *a3, unint64_t a4)
{
  unint64_t v6 = a2;
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    uint64_t v16 = a1[1];
    int v15 = a1 + 1;
    uint64_t v12 = v16;
    unint64_t v17 = (v16 - result) >> 4;
    if (v17 >= a4)
    {
      __int16 v22 = result;
      if (a2 != a3)
      {
        long long v23 = result;
        do
        {
          *(void *)long long v23 = *(void *)v6;
          v23[8] = v6[8];
          v22 += 16;
          v6 += 16;
          v23 += 16;
        }
        while (v6 != a3);
      }
      uint64_t v14 = v22 - result;
      uint64_t v12 = result;
    }
    else
    {
      int v18 = &a2[16 * v17];
      if (v12 != result)
      {
        do
        {
          *(void *)uint64_t result = *(void *)v6;
          result[8] = v6[8];
          v6 += 16;
          result += 16;
        }
        while (v6 != v18);
      }
      uint64_t v19 = v12;
      if (v18 != a3)
      {
        long long v20 = v12;
        do
        {
          long long v21 = *(_OWORD *)v18;
          v18 += 16;
          *(_OWORD *)long long v20 = v21;
          v20 += 16;
          v19 += 16;
        }
        while (v18 != a3);
      }
      uint64_t v14 = v19 - v12;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      goto LABEL_26;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    unint64_t v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 60) {
LABEL_26:
    }
      abort();
    uint64_t result = (char *)operator new(16 * v11);
    uint64_t v12 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[16 * v11];
    uint64_t v13 = result;
    if (v6 != a3)
    {
      uint64_t result = (char *)memcpy(result, v6, (a3 - v6) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v13 = &v12[(a3 - v6) & 0xFFFFFFFFFFFFFFF0];
    }
    uint64_t v14 = v13 - v12;
    int v15 = a1 + 1;
  }
  void *v15 = &v12[v14];
  return result;
}

void *sub_1CD15FFFC(void *result, void *a2, void *a3, unint64_t a4)
{
  unint64_t v6 = a2;
  uint64_t v7 = result;
  uint64_t v8 = (char *)*result;
  if (a4 > (uint64_t)(result[2] - *result) >> 5)
  {
    sub_1CD87C870((void **)result);
    if (a4 >> 59) {
      goto LABEL_97;
    }
    uint64_t v64 = v7[2] - *v7;
    uint64_t v65 = v64 >> 4;
    if (v64 >> 4 <= a4) {
      uint64_t v65 = a4;
    }
    unint64_t v66 = (unint64_t)v64 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v65;
    if (v66 >> 59) {
LABEL_97:
    }
      abort();
    uint64_t result = operator new(32 * v66);
    *uint64_t v7 = result;
    v7[1] = result;
    v7[2] = &result[4 * v66];
    while (v6 != a3)
    {
      uint64_t v67 = sub_1CD15FC6C(result, v6);
      v6 += 4;
      uint64_t result = v67 + 4;
    }
    v7[1] = result;
  }
  else
  {
    uint64_t v9 = (char *)result[1];
    unint64_t v10 = (v9 - v8) >> 5;
    if (v10 >= a4)
    {
      if (a2 != a3)
      {
        do
        {
          *(void *)uint64_t v8 = *v6;
          uint64_t v30 = *((void *)v8 + 3);
          uint64_t v31 = v6[3];
          if (v30 != v31)
          {
            BOOL v32 = v30 == -4096 || v30 == 0;
            if (!v32 && v30 != -8192)
            {
              unint64_t v36 = *((void *)v8 + 1) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v36 = *((void *)v8 + 2);
              uint64_t v37 = (unint64_t *)*((void *)v8 + 2);
              if (v37)
              {
                *uint64_t v37 = *v37 & 7 | v36;
              }
              else
              {
                uint64_t v38 = *((void *)v8 + 3);
                uint64_t v39 = ***(int32x2_t ****)v38;
                unint64_t v40 = (unint64_t)v39[303];
                if (v40 <= v36)
                {
                  uint64_t v41 = v39[305].u32[0];
                  if (v40 + 16 * v41 > v36)
                  {
                    unsigned int v42 = v41 - 1;
                    LODWORD(v43) = v42 & ((v38 >> 4) ^ (v38 >> 9));
                    uint64_t v44 = (uint64_t *)(v40 + 16 * v43);
                    uint64_t v45 = *v44;
                    if (v38 == *v44)
                    {
LABEL_57:
                      *uint64_t v44 = -8192;
                      v39[304] = vadd_s32(v39[304], (int32x2_t)0x1FFFFFFFFLL);
                      uint64_t v38 = *((void *)v8 + 3);
                    }
                    else
                    {
                      int v46 = 1;
                      while (v45 != -4096)
                      {
                        int v47 = v43 + v46++;
                        uint64_t v43 = v47 & v42;
                        uint64_t v45 = *(void *)(v40 + 16 * v43);
                        if (v38 == v45)
                        {
                          uint64_t v44 = (uint64_t *)(v40 + 16 * v43);
                          goto LABEL_57;
                        }
                      }
                    }
                    *(unsigned char *)(v38 + 17) &= ~1u;
                  }
                }
              }
              uint64_t v31 = v6[3];
            }
            *((void *)v8 + 3) = v31;
            if (v31 != -4096 && v31 != -8192 && v31 != 0)
            {
              uint64_t v34 = v6[1];
              *((void *)v8 + 2) = *(void *)(v34 & 0xFFFFFFFFFFFFFFF8);
              *(void *)(v34 & 0xFFFFFFFFFFFFFFF8) = v8 + 8;
              *((void *)v8 + 1) = v34 & 0xFFFFFFFFFFFFFFF8 | *((void *)v8 + 1) & 7;
              int v35 = (unint64_t *)*((void *)v8 + 2);
              if (v35) {
                *int v35 = *v35 & 7 | (unint64_t)(v8 + 16);
              }
            }
          }
          v6 += 4;
          v8 += 32;
        }
        while (v6 != a3);
        uint64_t v9 = (char *)result[1];
      }
      for (; v9 != v8; v9 -= 32)
      {
        uint64_t v50 = *((void *)v9 - 1);
        if (v50 != -8192 && v50 != -4096 && v50 != 0)
        {
          unint64_t v52 = *((void *)v9 - 3) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v52 = *((void *)v9 - 2);
          int v53 = (unint64_t *)*((void *)v9 - 2);
          if (v53)
          {
            *int v53 = *v53 & 7 | v52;
          }
          else
          {
            uint64_t v54 = *((void *)v9 - 1);
            uint64_t v55 = ***(int32x2_t ****)v54;
            unint64_t v56 = (unint64_t)v55[303];
            if (v56 <= v52)
            {
              uint64_t v57 = v55[305].u32[0];
              if (v56 + 16 * v57 > v52)
              {
                unsigned int v58 = v57 - 1;
                LODWORD(v59) = v58 & ((v54 >> 4) ^ (v54 >> 9));
                uint64_t v60 = (uint64_t *)(v56 + 16 * v59);
                uint64_t v61 = *v60;
                if (v54 == *v60)
                {
LABEL_82:
                  uint64_t *v60 = -8192;
                  v55[304] = vadd_s32(v55[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v54 = *((void *)v9 - 1);
                }
                else
                {
                  int v62 = 1;
                  while (v61 != -4096)
                  {
                    int v63 = v59 + v62++;
                    uint64_t v59 = v63 & v58;
                    uint64_t v61 = *(void *)(v56 + 16 * v59);
                    if (v54 == v61)
                    {
                      uint64_t v60 = (uint64_t *)(v56 + 16 * v59);
                      goto LABEL_82;
                    }
                  }
                }
                *(unsigned char *)(v54 + 17) &= ~1u;
              }
            }
          }
        }
      }
      result[1] = v8;
    }
    else
    {
      unint64_t v11 = &a2[4 * v10];
      if (v9 != v8)
      {
        do
        {
          *(void *)uint64_t v8 = *v6;
          uint64_t v12 = *((void *)v8 + 3);
          uint64_t v13 = v6[3];
          if (v12 != v13)
          {
            BOOL v14 = v12 == -4096 || v12 == 0;
            if (!v14 && v12 != -8192)
            {
              unint64_t v18 = *((void *)v8 + 1) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v18 = *((void *)v8 + 2);
              uint64_t v19 = (unint64_t *)*((void *)v8 + 2);
              if (v19)
              {
                *uint64_t v19 = *v19 & 7 | v18;
              }
              else
              {
                uint64_t v20 = *((void *)v8 + 3);
                long long v21 = ***(int32x2_t ****)v20;
                unint64_t v22 = (unint64_t)v21[303];
                if (v22 <= v18)
                {
                  uint64_t v23 = v21[305].u32[0];
                  if (v22 + 16 * v23 > v18)
                  {
                    unsigned int v24 = v23 - 1;
                    LODWORD(v25) = v24 & ((v20 >> 4) ^ (v20 >> 9));
                    long long v26 = (uint64_t *)(v22 + 16 * v25);
                    uint64_t v27 = *v26;
                    if (v20 == *v26)
                    {
LABEL_28:
                      uint64_t *v26 = -8192;
                      v21[304] = vadd_s32(v21[304], (int32x2_t)0x1FFFFFFFFLL);
                      uint64_t v20 = *((void *)v8 + 3);
                    }
                    else
                    {
                      int v28 = 1;
                      while (v27 != -4096)
                      {
                        int v29 = v25 + v28++;
                        uint64_t v25 = v29 & v24;
                        uint64_t v27 = *(void *)(v22 + 16 * v25);
                        if (v20 == v27)
                        {
                          long long v26 = (uint64_t *)(v22 + 16 * v25);
                          goto LABEL_28;
                        }
                      }
                    }
                    *(unsigned char *)(v20 + 17) &= ~1u;
                  }
                }
              }
              uint64_t v13 = v6[3];
            }
            *((void *)v8 + 3) = v13;
            if (v13 != -4096 && v13 != -8192 && v13 != 0)
            {
              uint64_t v16 = v6[1];
              *((void *)v8 + 2) = *(void *)(v16 & 0xFFFFFFFFFFFFFFF8);
              *(void *)(v16 & 0xFFFFFFFFFFFFFFF8) = v8 + 8;
              *((void *)v8 + 1) = v16 & 0xFFFFFFFFFFFFFFF8 | *((void *)v8 + 1) & 7;
              unint64_t v17 = (unint64_t *)*((void *)v8 + 2);
              if (v17) {
                *unint64_t v17 = *v17 & 7 | (unint64_t)(v8 + 16);
              }
            }
          }
          v6 += 4;
          v8 += 32;
        }
        while (v6 != v11);
        uint64_t v8 = (char *)result[1];
      }
      uint64_t v48 = v8;
      if (v11 != a3)
      {
        uint64_t v48 = v8;
        uint64_t result = v8;
        do
        {
          uint64_t v49 = sub_1CD15FC6C(result, v11);
          v11 += 4;
          uint64_t result = v49 + 4;
          v48 += 32;
        }
        while (v11 != a3);
      }
      v7[1] = v48;
    }
  }
  return result;
}

char *sub_1CD160514(uint64_t a1, char *a2, char *a3, unint64_t a4)
{
  unint64_t v6 = a2;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t result = *(char **)a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    uint64_t v16 = *(char **)(a1 + 8);
    int v15 = (void *)(a1 + 8);
    uint64_t v12 = v16;
    unint64_t v17 = (v16 - result) >> 4;
    if (v17 >= a4)
    {
      unint64_t v22 = result;
      if (a2 != a3)
      {
        uint64_t v23 = result;
        do
        {
          *(void *)uint64_t v23 = *(void *)v6;
          *((_DWORD *)v23 + 2) = *((_DWORD *)v6 + 2);
          v22 += 16;
          v6 += 16;
          v23 += 16;
        }
        while (v6 != a3);
      }
      int64_t v14 = v22 - result;
      uint64_t v12 = result;
    }
    else
    {
      unint64_t v18 = &a2[16 * v17];
      if (v12 != result)
      {
        do
        {
          *(void *)uint64_t result = *(void *)v6;
          *((_DWORD *)result + 2) = *((_DWORD *)v6 + 2);
          v6 += 16;
          result += 16;
        }
        while (v6 != v18);
      }
      uint64_t v19 = v12;
      if (v18 != a3)
      {
        uint64_t v20 = v12;
        do
        {
          long long v21 = *(_OWORD *)v18;
          v18 += 16;
          *(_OWORD *)uint64_t v20 = v21;
          v20 += 16;
          v19 += 16;
        }
        while (v18 != a3);
      }
      int64_t v14 = v19 - v12;
    }
  }
  else
  {
    if (result)
    {
      *(void *)(a1 + 8) = result;
      operator delete(result);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 >> 60) {
      goto LABEL_26;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    unint64_t v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 60) {
LABEL_26:
    }
      abort();
    uint64_t result = (char *)operator new(16 * v11);
    uint64_t v12 = result;
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[16 * v11];
    uint64_t v13 = result;
    if (v6 != a3)
    {
      uint64_t result = (char *)memcpy(result, v6, (a3 - v6) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v13 = &v12[(a3 - v6) & 0xFFFFFFFFFFFFFFF0];
    }
    int64_t v14 = v13 - v12;
    int v15 = (void *)(a1 + 8);
  }
  void *v15 = &v12[v14];
  return result;
}

void sub_1CD1606B0(void ***a1)
{
  int v1 = *a1;
  unsigned int v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v3 = (char *)v1[1];
    uint64_t v4 = **a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *((void *)v3 - 1);
        if (v5 != -8192 && v5 != -4096 && v5 != 0)
        {
          unint64_t v7 = *((void *)v3 - 3) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v7 = *((void *)v3 - 2);
          uint64_t v8 = (unint64_t *)*((void *)v3 - 2);
          if (v8)
          {
            *uint64_t v8 = *v8 & 7 | v7;
          }
          else
          {
            uint64_t v9 = *((void *)v3 - 1);
            uint64_t v10 = ***(int32x2_t ****)v9;
            unint64_t v11 = (unint64_t)v10[303];
            if (v11 <= v7)
            {
              uint64_t v12 = v10[305].u32[0];
              if (v11 + 16 * v12 > v7)
              {
                unsigned int v13 = v12 - 1;
                LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
                int v15 = (uint64_t *)(v11 + 16 * v14);
                uint64_t v16 = *v15;
                if (v9 == *v15)
                {
LABEL_19:
                  uint64_t *v15 = -8192;
                  v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v9 = *((void *)v3 - 1);
                }
                else
                {
                  int v17 = 1;
                  while (v16 != -4096)
                  {
                    int v18 = v14 + v17++;
                    uint64_t v14 = v18 & v13;
                    uint64_t v16 = *(void *)(v11 + 16 * v14);
                    if (v9 == v16)
                    {
                      int v15 = (uint64_t *)(v11 + 16 * v14);
                      goto LABEL_19;
                    }
                  }
                }
                *(unsigned char *)(v9 + 17) &= ~1u;
              }
            }
          }
        }
        v3 -= 32;
      }
      while (v3 != v2);
      uint64_t v4 = **a1;
    }
    v1[1] = v2;
    operator delete(v4);
  }
}

void sub_1CD1607E0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD160818(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

BOOL sub_1CD160824(uint64_t a1, llvm::Module *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t)a2 + 24;
  uint64_t v3 = *((void *)a2 + 4);
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    uint64_t v9 = 0;
    return llvm::applyDebugifyMetadata((uint64_t)a2, v3, v2, "ModuleDebugify: ", 0x10uLL, (uint64_t)v8);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v6 = *((void *)a2 + 4);
    return llvm::collectDebugInfoMetadata(a2, v6, v2, v4, "ModuleDebugify (original debuginfo)", 0x23uLL);
  }
}

void sub_1CD1608F0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD160928(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

BOOL sub_1CD160934(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 56);
  uint64_t v4 = *(llvm::Module **)(a2 + 40);
  if (v3 == 1)
  {
    uint64_t v8 = *(void *)(a2 + 64);
    uint64_t v10 = 0;
    return llvm::applyDebugifyMetadata((uint64_t)v4, a2 + 56, v8, "FunctionDebugify: ", 0x12uLL, (uint64_t)v9);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v6 = *((void *)v4 + 4);
    return llvm::collectDebugInfoMetadata(v4, v6, (uint64_t)v4 + 24, v5, "FunctionDebugify (original debuginfo)", 0x25uLL);
  }
}

void sub_1CD160A04(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD160A3C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

uint64_t sub_1CD160A48(uint64_t a1, llvm::Module *a2)
{
  uint64_t v3 = (uint64_t)a2 + 24;
  uint64_t v4 = *((void *)a2 + 4);
  if (*(_DWORD *)(a1 + 80) == 1) {
    return sub_1CD15E2D8(a2, v4, v3, *(void *)(a1 + 32), *(void *)(a1 + 40), "CheckModuleDebugify", 0x13uLL, *(unsigned __int8 *)(a1 + 84), *(void *)(a1 + 64));
  }
  else {
    return llvm::checkDebugInfoMetadata(a2, v4, v3, *(void *)(a1 + 72), "CheckModuleDebugify (original debuginfo)", 0x28uLL, *(void **)(a1 + 32), *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(void *)(a1 + 56));
  }
}

void sub_1CD160ACC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD160B04(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

uint64_t sub_1CD160B10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(llvm::Module **)(a2 + 40);
  uint64_t v5 = a2 + 56;
  uint64_t v6 = *(void *)(a2 + 64);
  if (*(_DWORD *)(a1 + 80) == 1) {
    return sub_1CD15E2D8(v4, v5, v6, *(void *)(a1 + 32), *(void *)(a1 + 40), "CheckFunctionDebugify", 0x15uLL, *(unsigned __int8 *)(a1 + 84), *(void *)(a1 + 64));
  }
  else {
    return llvm::checkDebugInfoMetadata(v4, v5, v6, *(void *)(a1 + 72), "CheckFunctionDebugify (original debuginfo)", 0x2AuLL, *(void **)(a1 + 32), *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(void *)(a1 + 56));
  }
}

void sub_1CD160B94()
{
}

void *sub_1CD160BA8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F26480C0;
  return result;
}

void sub_1CD160BE0(uint64_t a1, void *a2)
{
  *a2 = &unk_1F26480C0;
}

uint64_t sub_1CD160C0C(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void **)(result + 8);
  *uint64_t v3 = a2;
  v3[1] = 4;
  uint64_t v4 = v3 + 1;
  v3[2] = 0;
  unint64_t v5 = (unint64_t)(v3 + 2);
  uint64_t v6 = a3[2];
  v3[3] = v6;
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
  {
    unint64_t v8 = *a3 & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v5 = *(void *)v8;
    *(void *)unint64_t v8 = v4;
    *uint64_t v4 = v8 | 4;
    if (*(void *)v5) {
      **(void **)unint64_t v5 = **(void **)v5 & 7 | v5;
    }
  }
  *(void *)(result + 8) = v3 + 4;
  return result;
}

void *sub_1CD160C84(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v4 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v5 = (uint64_t)(v3 - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    abort();
  }
  uint64_t v8 = a1[2] - v4;
  if (v8 >> 4 > v6) {
    unint64_t v6 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  BOOL v32 = a1 + 2;
  if (v9 >> 59) {
    sub_1CB833614();
  }
  uint64_t v12 = (char *)operator new(32 * v9);
  unsigned int v13 = &v12[32 * v5];
  *(void *)unsigned int v13 = *a2;
  *((void *)v13 + 1) = 4;
  uint64_t v14 = (unint64_t *)(v13 + 8);
  uint64_t v15 = a3[2];
  *((void *)v13 + 2) = 0;
  *((void *)v13 + 3) = v15;
  if (v15 != -8192 && v15 != -4096 && v15)
  {
    unint64_t v16 = *a3 & 0xFFFFFFFFFFFFFFF8;
    *((void *)v13 + 2) = *(void *)v16;
    *(void *)unint64_t v16 = v14;
    *uint64_t v14 = v16 | 4;
    int v17 = (unint64_t *)*((void *)v13 + 2);
    if (v17) {
      *int v17 = *v17 & 7 | (unint64_t)(v13 + 16);
    }
    unint64_t v4 = *a1;
    unint64_t v3 = a1[1];
  }
  if (v3 == v4)
  {
    int64x2_t v18 = vdupq_n_s64(v4);
    uint64_t v19 = &v12[32 * v5];
  }
  else
  {
    uint64_t v20 = 0;
    do
    {
      long long v21 = &v13[v20];
      *((void *)v21 - 4) = *(void *)(v3 + v20 - 32);
      *(void *)&v13[v20 - 24] = 4;
      *((void *)v21 - 2) = 0;
      uint64_t v22 = *(void *)(v3 + v20 - 8);
      *((void *)v21 - 1) = v22;
      if (v22 != -8192 && v22 != -4096 && v22 != 0)
      {
        unint64_t v24 = *(void *)(v3 + v20 - 24) & 0xFFFFFFFFFFFFFFF8;
        *((void *)v21 - 2) = *(void *)v24;
        *(void *)unint64_t v24 = &v13[v20 - 24];
        *((void *)v21 - 3) = v24 | 4;
        uint64_t v25 = (unint64_t *)*((void *)v21 - 2);
        if (v25) {
          *uint64_t v25 = *v25 & 7 | (unint64_t)&v12[32 * v5 - 16 + v20];
        }
      }
      v20 -= 32;
    }
    while (v3 + v20 != v4);
    int64x2_t v18 = *(int64x2_t *)a1;
    uint64_t v19 = &v13[v20];
  }
  long long v26 = v13 + 32;
  *a1 = (unint64_t)v19;
  a1[1] = (unint64_t)(v13 + 32);
  int64x2_t v30 = v18;
  unint64_t v27 = a1[2];
  a1[2] = (unint64_t)&v12[32 * v9];
  unint64_t v31 = v27;
  uint64_t v29 = v18.i64[0];
  sub_1CD87CDD0((uint64_t)&v29);
  return v26;
}

char *sub_1CD160E74(char **a1, void *a2, char *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  uint64_t v5 = (v4 - *a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    abort();
  }
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v6) {
    unint64_t v6 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9 >> 60) {
    sub_1CB833614();
  }
  uint64_t v12 = (char *)operator new(16 * v9);
  unsigned int v13 = &v12[16 * v5];
  *(void *)unsigned int v13 = *a2;
  v13[8] = *a3;
  uint64_t v14 = v13 + 16;
  if (v4 == v3)
  {
    uint64_t v15 = &v12[16 * v5];
  }
  else
  {
    do
    {
      uint64_t v15 = v13 - 16;
      *((_OWORD *)v13 - 1) = *((_OWORD *)v4 - 1);
      v4 -= 16;
      v13 -= 16;
    }
    while (v4 != v3);
  }
  *a1 = v15;
  a1[1] = v14;
  a1[2] = &v12[16 * v9];
  if (v3) {
    operator delete(v3);
  }
  return v14;
}

uint64_t sub_1CD160F6C(uint64_t a1, char *a2, size_t a3, void **a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *a4;
  *a4 = 0;
  uint64_t result = sub_1CD16113C(a2, a3);
  if (result)
  {
    if (!v4) {
      return result;
    }
    goto LABEL_7;
  }
  if (!v4) {
    return result;
  }
  unint64_t v6 = (void *)(*(uint64_t (**)(void *))(*v4 + 24))(v4);
  unint64_t v7 = (void *)(*(uint64_t (**)(void *))(*v4 + 24))(v4);
  if (v6 == &llvm::Any::TypeId<llvm::Function const*>::Id)
  {
    uint64_t v9 = v4[1];
    uint64_t v10 = *(void *)(v9 + 40);
    uint64_t v11 = v9 + 56;
    uint64_t v12 = *(void *)(v9 + 64);
    uint64_t v16 = 0;
    unsigned int v13 = "FunctionDebugify: ";
    size_t v14 = 18;
LABEL_13:
    llvm::applyDebugifyMetadata(v10, v11, v12, v13, v14, (uint64_t)v15);
    goto LABEL_7;
  }
  if (v7 == &llvm::Any::TypeId<llvm::Module const*>::Id)
  {
    (*(void (**)(void *))(*v4 + 24))(v4);
    uint64_t v10 = v4[1];
    uint64_t v12 = v10 + 24;
    uint64_t v11 = *(void *)(v10 + 32);
    uint64_t v16 = 0;
    unsigned int v13 = "ModuleDebugify: ";
    size_t v14 = 16;
    goto LABEL_13;
  }
LABEL_7:
  uint64_t v8 = *(uint64_t (**)(void *))(*v4 + 8);

  return v8(v4);
}

uint64_t sub_1CD16113C(char *a1, size_t a2)
{
  unint64_t v4 = operator new(0x80uLL);
  v7[1] = (uint64_t)(v4 + 8);
  v7[2] = (uint64_t)(v4 + 8);
  v4[4] = xmmword_1E685A290;
  v4[5] = *(_OWORD *)&off_1E685A2A0;
  v4[6] = xmmword_1E685A2B0;
  v4[7] = *(_OWORD *)&off_1E685A2C0;
  *unint64_t v4 = xmmword_1E685A250;
  v4[1] = *(_OWORD *)&off_1E685A260;
  unint64_t v4[2] = xmmword_1E685A270;
  v4[3] = *(_OWORD *)&off_1E685A280;
  v7[0] = (uint64_t)v4;
  uint64_t isSpecialPass = llvm::isSpecialPass(a1, a2, v7);
  operator delete(v4);
  return isSpecialPass;
}

uint64_t sub_1CD1611D0(uint64_t *a1, char *a2, size_t a3, llvm::Module ***a4)
{
  unint64_t v6 = *a4;
  *a4 = 0;
  uint64_t v7 = *a1;
  uint64_t result = sub_1CD16113C(a2, a3);
  if (result)
  {
    if (!v6) {
      return result;
    }
  }
  else
  {
    if (!v6) {
      return result;
    }
    uint64_t v9 = (void *)(*((uint64_t (**)(llvm::Module **))*v6 + 3))(v6);
    uint64_t v10 = (void *)(*((uint64_t (**)(llvm::Module **))*v6 + 3))(v6);
    if (v9 == &llvm::Any::TypeId<llvm::Function const*>::Id)
    {
      sub_1CD15E2D8(*((llvm::Module **)v6[1] + 5), (uint64_t)v6[1] + 56, *((void *)v6[1] + 8), (uint64_t)a2, a3, "CheckFunctionDebugify", 0x15uLL, 1, v7);
    }
    else if (v10 == &llvm::Any::TypeId<llvm::Module const*>::Id)
    {
      (*((void (**)(llvm::Module **))*v6 + 3))(v6);
      sub_1CD15E2D8(v6[1], *((void *)v6[1] + 4), (uint64_t)v6[1] + 24, (uint64_t)a2, a3, "CheckModuleDebugify", 0x13uLL, 1, v7);
    }
  }
  uint64_t v11 = (uint64_t (*)(llvm::Module **))*((void *)*v6 + 1);

  return v11(v6);
}

void sub_1CD161388()
{
}

void sub_1CD1613FC()
{
}

void sub_1CD161478()
{
}

void sub_1CD1614EC()
{
}

uint64_t sub_1CD161568()
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v44 = "Suppress verbose debugify output";
  *((void *)&v44 + 1) = 32;
  sub_1CD3F4B2C((llvm::cl::Option *)&unk_1EBCFC020, "debugify-quiet", &v44);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFC020, &dword_1CB82C000);
  *(void *)&long long v44 = "Set max number of processed functions per pass.";
  *((void *)&v44 + 1) = 47;
  int v38 = -1;
  v39[0] = (unsigned int *)&v38;
  sub_1CD87C9FC(&v44, v39);
  __cxa_atexit((void (*)(void *))sub_1CC816390, &qword_1EBCFC0E0, &dword_1CB82C000);
  *(void *)&long long v44 = v45;
  v45[0] = "locations";
  v45[1] = 9;
  int v46 = 0;
  int v47 = "Locations only";
  uint64_t v48 = 14;
  uint64_t v49 = "location+variables";
  uint64_t v50 = 18;
  int v51 = 1;
  unint64_t v52 = "Locations and Variables";
  uint64_t v53 = 23;
  *((void *)&v44 + 1) = 0x400000002;
  uint64_t v0 = sub_1CB883A14((uint64_t)qword_1EBCFC1A8, 0, 0);
  dword_1EBCFC228 = 0;
  qword_1EBCFC238 = 0;
  qword_1EBCFC230 = (uint64_t)&unk_1F2647E00;
  qword_1EBCFC1A8[0] = (uint64_t)&unk_1F2647D48;
  qword_1EBCFC248 = v0;
  qword_1EBCFC240 = (uint64_t)&unk_1F2647DB0;
  qword_1EBCFC250 = (uint64_t)&unk_1EBCFC260;
  qword_1EBCFC258 = 0x800000000;
  qword_1EBCFC3E0 = (uint64_t)&unk_1F26480C0;
  qword_1EBCFC3F8 = (uint64_t)&qword_1EBCFC3E0;
  llvm::cl::Option::setArgStr(v0, "debugify-level", 0xEuLL);
  qword_1EBCFC1C8 = (uint64_t)"Kind of debug info to add";
  unk_1EBCFC1D0 = 25;
  if (DWORD2(v44))
  {
    uint64_t v1 = v44;
    uint64_t v2 = v44 + 40 * DWORD2(v44);
    do
    {
      unint64_t v3 = *(unsigned int **)v1;
      unint64_t v4 = *(unsigned int **)(v1 + 8);
      long long v5 = *(_OWORD *)(v1 + 24);
      int v6 = *(_DWORD *)(v1 + 16);
      v39[0] = *(unsigned int **)v1;
      v39[1] = v4;
      long long v40 = v5;
      uint64_t v41 = &unk_1F2647E00;
      char v43 = 1;
      int v42 = v6;
      unsigned int v7 = qword_1EBCFC258;
      uint64_t v8 = qword_1EBCFC250;
      if (qword_1EBCFC258 >= HIDWORD(qword_1EBCFC258))
      {
        unint64_t v14 = qword_1EBCFC258 + 1;
        BOOL v16 = qword_1EBCFC250 <= (unint64_t)v39
           && qword_1EBCFC250 + 48 * (unint64_t)qword_1EBCFC258 > (unint64_t)v39;
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v39 - qword_1EBCFC250) >> 4);
        BOOL v37 = v16;
        if (!v16) {
          unint64_t v17 = -1;
        }
        unint64_t v36 = v17;
        if (qword_1EBCFC258 == -1) {
          sub_1CD0A88F0(v14);
        }
        if (HIDWORD(qword_1EBCFC258) == -1) {
          sub_1CD0A89A8(0xFFFFFFFFuLL);
        }
        unint64_t v18 = (2 * HIDWORD(qword_1EBCFC258)) | 1;
        if (v18 <= v14) {
          unint64_t v18 = qword_1EBCFC258 + 1;
        }
        if (v18 >= 0xFFFFFFFF) {
          unint64_t v18 = 0xFFFFFFFFLL;
        }
        int v35 = v18;
        uint64_t v19 = malloc_type_malloc(48 * v18, 0x4065EBACuLL);
        if (!v19) {
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        }
        uint64_t v8 = (uint64_t)v19;
        uint64_t v20 = (_OWORD *)qword_1EBCFC250;
        if (qword_1EBCFC258)
        {
          uint64_t v21 = qword_1EBCFC250 + 48 * qword_1EBCFC258;
          uint64_t v22 = v8 + 32;
          uint64_t v23 = v8;
          do
          {
            long long v24 = v20[1];
            *(_OWORD *)uint64_t v23 = *v20;
            *(_OWORD *)(v23 + 16) = v24;
            *(void *)(v23 + 32) = &unk_1F2647E20;
            int v25 = *((_DWORD *)v20 + 10);
            *(unsigned char *)(v23 + 44) = *((unsigned char *)v20 + 44);
            *(_DWORD *)(v23 + 40) = v25;
            *(void *)(v23 + 32) = &unk_1F2647E00;
            v22 += 48;
            v20 += 3;
            v23 += 48;
          }
          while (v20 != (_OWORD *)v21);
          uint64_t v20 = (_OWORD *)qword_1EBCFC250;
        }
        if (v20 != (_OWORD *)&unk_1EBCFC260) {
          free(v20);
        }
        qword_1EBCFC250 = v8;
        HIDWORD(qword_1EBCFC258) = v35;
        uint64_t v9 = v39;
        if (v37)
        {
          uint64_t v9 = (unsigned int **)(v8 + 48 * v36);
          uint64_t v10 = (int *)(v9 + 5);
        }
        else
        {
          uint64_t v10 = &v42;
        }
        unsigned int v7 = qword_1EBCFC258;
      }
      else
      {
        uint64_t v9 = v39;
        uint64_t v10 = &v42;
      }
      uint64_t v11 = v8 + 48 * v7;
      long long v12 = *((_OWORD *)v9 + 1);
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v9;
      *(_OWORD *)(v11 + 16) = v12;
      *(void *)(v11 + 32) = &unk_1F2647E20;
      int v13 = *v10;
      *(unsigned char *)(v11 + 44) = *((unsigned char *)v10 + 4);
      *(_DWORD *)(v11 + 40) = v13;
      *(void *)(v11 + 32) = &unk_1F2647E00;
      LODWORD(qword_1EBCFC258) = qword_1EBCFC258 + 1;
      llvm::cl::AddLiteralOption(qword_1EBCFC248, (unsigned __int8 *)v3, (size_t)v4);
      v1 += 40;
    }
    while (v1 != v2);
  }
  dword_1EBCFC228 = 1;
  BYTE4(qword_1EBCFC238) = 1;
  LODWORD(qword_1EBCFC238) = 1;
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EBCFC1A8);
  if ((void *)v44 != v45) {
    free((void *)v44);
  }
  long long v26 = (llvm::PassRegistry *)__cxa_atexit((void (*)(void *))sub_1CD15A734, qword_1EBCFC1A8, &dword_1CB82C000);
  qword_1EBCFBEE0 = (uint64_t)"Attach debug info to everything";
  qword_1EBCFBEE8 = 31;
  unk_1EBCFBEF0 = "debugify";
  qword_1EBCFBEF8 = 8;
  unk_1EBCFBF00 = &unk_1EA61F349;
  word_1EBCFBF08 = 0;
  byte_1EBCFBF0A = 0;
  qword_1EBCFBF18 = 0;
  unk_1EBCFBF20 = 0;
  qword_1EBCFBF10 = 0;
  qword_1EBCFBF28 = (uint64_t)sub_1CD161388;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v26);
  llvm::PassRegistry::registerPass(PassRegistry, &qword_1EBCFBEE0, 0);
  int v28 = (llvm::PassRegistry *)__cxa_atexit((void (*)(void *))sub_1CD15F6AC, &qword_1EBCFBEE0, &dword_1CB82C000);
  qword_1EBCFBF30 = (uint64_t)"Check debug info from -debugify";
  qword_1EBCFBF38 = 31;
  unk_1EBCFBF40 = "check-debugify";
  qword_1EBCFBF48 = 14;
  unk_1EBCFBF50 = &unk_1EBCFBED9;
  word_1EBCFBF58 = 0;
  byte_1EBCFBF5A = 0;
  qword_1EBCFBF68 = 0;
  unk_1EBCFBF70 = 0;
  qword_1EBCFBF60 = 0;
  qword_1EBCFBF78 = (uint64_t)sub_1CD1613FC;
  atomic_ullong v29 = llvm::PassRegistry::getPassRegistry(v28);
  llvm::PassRegistry::registerPass(v29, &qword_1EBCFBF30, 0);
  int64x2_t v30 = (llvm::PassRegistry *)__cxa_atexit((void (*)(void *))sub_1CD15F6E0, &qword_1EBCFBF30, &dword_1CB82C000);
  qword_1EBCFBF80 = (uint64_t)"Attach debug info to a function";
  qword_1EBCFBF88 = 31;
  unk_1EBCFBF90 = "debugify-function";
  qword_1EBCFBF98 = 17;
  unk_1EBCFBFA0 = &unk_1EBCFBED8;
  word_1EBCFBFA8 = 0;
  byte_1EBCFBFAA = 0;
  qword_1EBCFBFB8 = 0;
  unk_1EBCFBFC0 = 0;
  qword_1EBCFBFB0 = 0;
  qword_1EBCFBFC8 = (uint64_t)sub_1CD161478;
  atomic_ullong v31 = llvm::PassRegistry::getPassRegistry(v30);
  llvm::PassRegistry::registerPass(v31, &qword_1EBCFBF80, 0);
  BOOL v32 = (llvm::PassRegistry *)__cxa_atexit((void (*)(void *))sub_1CD15F714, &qword_1EBCFBF80, &dword_1CB82C000);
  qword_1EBCFBFD0 = (uint64_t)"Check debug info from -debugify-function";
  unk_1EBCFBFD8 = 40;
  qword_1EBCFBFE0 = (uint64_t)"check-debugify-function";
  unk_1EBCFBFE8 = 23;
  qword_1EBCFBFF0 = (uint64_t)&unk_1EBCFBEDA;
  word_1EBCFBFF8 = 0;
  byte_1EBCFBFFA = 0;
  qword_1EBCFC008 = 0;
  unk_1EBCFC010 = 0;
  qword_1EBCFC000 = 0;
  qword_1EBCFC018 = (uint64_t)sub_1CD1614EC;
  atomic_ullong v33 = llvm::PassRegistry::getPassRegistry(v32);
  llvm::PassRegistry::registerPass(v33, &qword_1EBCFBFD0, 0);
  return __cxa_atexit((void (*)(void *))sub_1CD15F748, &qword_1EBCFBFD0, &dword_1CB82C000);
}

llvm::Value *llvm::DemoteRegToStack(llvm *this, llvm::Instruction *a2, llvm::Instruction *a3, llvm::Instruction *a4)
{
  if (!*((void *)this + 1)) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  __int16 v6 = (__int16)a2;
  uint64_t v7 = *(void *)(*((void *)this + 5) + 56);
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v9 = operator new(0x68uLL);
  uint64_t v10 = (llvm::Value *)(v9 + 8);
  v9[13] = v9[13] & 0x38000000 | 1;
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *((void *)v9 + 3) = v9 + 8;
  uint64_t v11 = *(llvm::Type **)this;
  long long v12 = (llvm::Type *)*(unsigned int *)(v8 + 276);
  unsigned int v13 = this >> 4;
  if (a3)
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0)
    {
      uint64_t v32 = 0;
      atomic_ullong v31 = &byte_1CFBCE98E;
      goto LABEL_20;
    }
    uint64_t v14 = **(void **)v11;
    uint64_t v15 = *(void *)(v14 + 152);
    uint64_t v16 = *(unsigned int *)(v14 + 168);
    if (v16)
    {
      LODWORD(v17) = (v16 - 1) & (v13 ^ (this >> 9));
      uint64_t v18 = v15 + 16 * v17;
      uint64_t v19 = *(llvm **)v18;
      if (*(llvm **)v18 == this)
      {
LABEL_19:
        int64x2_t v30 = *(void **)(v18 + 8);
        uint64_t v33 = *v30;
        atomic_ullong v31 = (char *)(v30 + 2);
        uint64_t v32 = v33;
LABEL_20:
        LOWORD(v123) = 773;
        *(void *)&long long v121 = v31;
        *((void *)&v121 + 1) = v32;
        *(void *)&long long v122 = ".reg2mem";
        uint64_t v34 = (llvm::AllocaInst *)(v9 + 8);
        int v35 = a3;
        goto LABEL_30;
      }
      int v20 = 1;
      while (v19 != (llvm *)-4096)
      {
        int v21 = v17 + v20++;
        uint64_t v17 = v21 & (v16 - 1);
        uint64_t v19 = *(llvm **)(v15 + 16 * v17);
        if (v19 == this)
        {
          uint64_t v18 = v15 + 16 * v17;
          goto LABEL_19;
        }
      }
    }
    uint64_t v18 = v15 + 16 * v16;
    goto LABEL_19;
  }
  if ((*((unsigned char *)this + 23) & 0x10) == 0)
  {
    uint64_t v38 = 0;
    BOOL v37 = &byte_1CFBCE98E;
    goto LABEL_23;
  }
  uint64_t v22 = **(void **)v11;
  uint64_t v23 = *(void *)(v22 + 152);
  uint64_t v24 = *(unsigned int *)(v22 + 168);
  if (!v24) {
    goto LABEL_21;
  }
  LODWORD(v25) = (v24 - 1) & (v13 ^ (this >> 9));
  uint64_t v26 = v23 + 16 * v25;
  unint64_t v27 = *(llvm **)v26;
  if (*(llvm **)v26 != this)
  {
    int v28 = 1;
    while (v27 != (llvm *)-4096)
    {
      int v29 = v25 + v28++;
      uint64_t v25 = v29 & (v24 - 1);
      unint64_t v27 = *(llvm **)(v23 + 16 * v25);
      if (v27 == this)
      {
        uint64_t v26 = v23 + 16 * v25;
        goto LABEL_22;
      }
    }
LABEL_21:
    uint64_t v26 = v23 + 16 * v24;
  }
LABEL_22:
  unint64_t v36 = *(void **)(v26 + 8);
  uint64_t v39 = *v36;
  BOOL v37 = (char *)(v36 + 2);
  uint64_t v38 = v39;
LABEL_23:
  LOWORD(v123) = 773;
  *(void *)&long long v121 = v37;
  *((void *)&v121 + 1) = v38;
  *(void *)&long long v122 = ".reg2mem";
  uint64_t v40 = *(void *)(v7 + 80);
  if (v40) {
    uint64_t v41 = v40 - 24;
  }
  else {
    uint64_t v41 = 0;
  }
  uint64_t v42 = *(void *)(v41 + 48);
  if (v42) {
    int v35 = (llvm::Instruction *)(v42 - 24);
  }
  else {
    int v35 = 0;
  }
  uint64_t v34 = (llvm::AllocaInst *)(v9 + 8);
LABEL_30:
  llvm::AllocaInst::AllocaInst(v34, v11, v12, 0, (const char **)&v121, v35);
  if (*((unsigned char *)this + 16) == 33)
  {
    char v43 = (llvm::BasicBlock *)*((void *)this - 12);
    if (!llvm::BasicBlock::getSinglePredecessor(v43))
    {
      unsigned int SuccessorNumber = llvm::GetSuccessorNumber(*((void *)this + 5), (uint64_t)v43);
      int v123 = 0;
      long long v121 = 0u;
      long long v122 = 0u;
      char v124 = 1;
      __int16 v120 = 257;
      llvm::SplitCriticalEdge(this, SuccessorNumber, (uint64_t)&v121, (llvm::Twine *)v118);
    }
  }
  uint64_t v45 = *((void *)this + 1);
  if (v45)
  {
    unsigned int v46 = v13 ^ (this >> 9);
    while (1)
    {
      uint64_t v47 = *(void *)(v45 + 24);
      if (!v47 || *(unsigned char *)(v47 + 16) != 83) {
        break;
      }
      v118[0] = 0;
      v118[1] = 0;
      int v119 = 0;
      int v48 = *(_DWORD *)(v47 + 20);
      uint64_t v49 = v48 & 0x7FFFFFF;
      if ((v48 & 0x7FFFFFF) != 0)
      {
        uint64_t v50 = 0;
        while (1)
        {
          int v51 = *(_DWORD *)(v47 + 20);
          uint64_t v52 = (v51 & 0x40000000) != 0 ? *(void *)(v47 - 8) : v47 - 32 * (v51 & 0x7FFFFFF);
          if (*(llvm **)(v52 + 32 * v50) == this) {
            break;
          }
LABEL_43:
          if (++v50 == v49)
          {
            uint64_t v97 = v118[0];
            goto LABEL_86;
          }
        }
        *(void *)&long long v121 = *(void *)(v52 + 32 * *(unsigned int *)(v47 + 60) + 8 * v50);
        uint64_t v53 = sub_1CD87D1C8((uint64_t)v118, (uint64_t *)&v121);
        uint64_t v54 = (llvm::LoadInst *)v53[1];
        if (!v54)
        {
          uint64_t v55 = v53;
          unint64_t v56 = operator new(0x60uLL);
          uint64_t v57 = (llvm::LoadInst *)(v56 + 8);
          v56[13] = v56[13] & 0x38000000 | 1;
          *(void *)unint64_t v56 = 0;
          *((void *)v56 + 1) = 0;
          *((void *)v56 + 2) = 0;
          *((void *)v56 + 3) = v56 + 8;
          unsigned int v58 = *(llvm::Type **)this;
          if ((*((unsigned char *)this + 23) & 0x10) != 0)
          {
            uint64_t v59 = **(void **)v58;
            uint64_t v60 = *(void *)(v59 + 152);
            uint64_t v61 = *(unsigned int *)(v59 + 168);
            if (!v61) {
              goto LABEL_53;
            }
            LODWORD(v62) = (v61 - 1) & v46;
            uint64_t v63 = v60 + 16 * v62;
            uint64_t v64 = *(llvm **)v63;
            if (*(llvm **)v63 != this)
            {
              int v65 = 1;
              while (v64 != (llvm *)-4096)
              {
                int v66 = v62 + v65++;
                uint64_t v62 = v66 & (v61 - 1);
                uint64_t v64 = *(llvm **)(v60 + 16 * v62);
                if (v64 == this)
                {
                  uint64_t v63 = v60 + 16 * v62;
                  goto LABEL_54;
                }
              }
LABEL_53:
              uint64_t v63 = v60 + 16 * v61;
            }
LABEL_54:
            uint64_t v67 = *(void **)(v63 + 8);
            uint64_t v70 = *v67;
            unint64_t v69 = (char *)(v67 + 2);
            uint64_t v68 = v70;
          }
          else
          {
            uint64_t v68 = 0;
            unint64_t v69 = &byte_1CFBCE98E;
          }
          LOWORD(v123) = 773;
          *(void *)&long long v121 = v69;
          *((void *)&v121 + 1) = v68;
          *(void *)&long long v122 = ".reload";
          int v71 = *(_DWORD *)(v47 + 20);
          if ((v71 & 0x40000000) != 0) {
            uint64_t v72 = *(void *)(v47 - 8);
          }
          else {
            uint64_t v72 = v47 - 32 * (v71 & 0x7FFFFFF);
          }
          uint64_t v73 = *(void *)(v72 + 32 * *(unsigned int *)(v47 + 60) + 8 * v50);
          uint64_t v74 = *(void *)(v73 + 40);
          if (v74 == v73 + 40)
          {
            unint64_t v76 = 0;
          }
          else
          {
            if (v74) {
              uint64_t v75 = (unsigned __int8 *)(v74 - 24);
            }
            else {
              uint64_t v75 = 0;
            }
            if (v75[16] - 29 >= 0xB) {
              unint64_t v76 = 0;
            }
            else {
              unint64_t v76 = (llvm::Instruction *)v75;
            }
          }
          Inst = llvm::LoadInst::LoadInst(v57, v58, v10, (const char **)&v121, v6, v76);
          v55[1] = (uint64_t)Inst;
          uint64_t v54 = Inst;
        }
        int v78 = *(_DWORD *)(v47 + 20);
        if ((v78 & 0x40000000) != 0) {
          uint64_t v79 = *(void *)(v47 - 8);
        }
        else {
          uint64_t v79 = v47 - 32 * (v78 & 0x7FFFFFF);
        }
        uint64_t v80 = v79 + 32 * v50;
        if (*(void *)v80)
        {
          **(void **)(v80 + 16) = *(void *)(v80 + 8);
          uint64_t v85 = *(void *)(v80 + 8);
          if (v85) {
            *(void *)(v85 + 16) = *(void *)(v80 + 16);
          }
        }
        *(void *)uint64_t v80 = v54;
        if (v54)
        {
          uint64_t v83 = *((void *)v54 + 1);
          uint64_t v81 = (void *)((char *)v54 + 8);
          uint64_t v82 = v83;
          uint64_t v84 = v79 + 32 * v50;
          *(void *)(v84 + 8) = v83;
          if (v83) {
            *(void *)(v82 + 16) = v84 + 8;
          }
          *(void *)(v84 + 16) = v81;
          *uint64_t v81 = v80;
        }
        goto LABEL_43;
      }
      uint64_t v97 = 0;
LABEL_86:
      MEMORY[0x1D25D9CD0](v97, 8);
LABEL_90:
      uint64_t v45 = *((void *)this + 1);
      if (!v45) {
        goto LABEL_93;
      }
    }
    char v86 = operator new(0x60uLL);
    uint64_t v87 = (llvm::Value *)(v86 + 8);
    v86[13] = v86[13] & 0x38000000 | 1;
    *(void *)char v86 = 0;
    *((void *)v86 + 1) = 0;
    *((void *)v86 + 2) = 0;
    *((void *)v86 + 3) = v86 + 8;
    uint64_t v88 = *(llvm::Type **)this;
    if ((*((unsigned char *)this + 23) & 0x10) == 0)
    {
      uint64_t v99 = 0;
      int v100 = &byte_1CFBCE98E;
      goto LABEL_89;
    }
    uint64_t v89 = **(void **)v88;
    uint64_t v90 = *(void *)(v89 + 152);
    uint64_t v91 = *(unsigned int *)(v89 + 168);
    if (v91)
    {
      LODWORD(v92) = (v91 - 1) & v46;
      uint64_t v93 = v90 + 16 * v92;
      int v94 = *(llvm **)v93;
      if (*(llvm **)v93 == this)
      {
LABEL_88:
        unint64_t v98 = *(void **)(v93 + 8);
        uint64_t v101 = *v98;
        int v100 = (char *)(v98 + 2);
        uint64_t v99 = v101;
LABEL_89:
        LOWORD(v123) = 773;
        *(void *)&long long v121 = v100;
        *((void *)&v121 + 1) = v99;
        *(void *)&long long v122 = ".reload";
        llvm::LoadInst::LoadInst((llvm::LoadInst *)(v86 + 8), v88, v10, (const char **)&v121, v6, (llvm::Instruction *)v47);
        llvm::User::replaceUsesOfWith((llvm::User *)v47, this, v87);
        goto LABEL_90;
      }
      int v95 = 1;
      while (v94 != (llvm *)-4096)
      {
        int v96 = v92 + v95++;
        uint64_t v92 = v96 & (v91 - 1);
        int v94 = *(llvm **)(v90 + 16 * v92);
        if (v94 == this)
        {
          uint64_t v93 = v90 + 16 * v92;
          goto LABEL_88;
        }
      }
    }
    uint64_t v93 = v90 + 16 * v91;
    goto LABEL_88;
  }
LABEL_93:
  if (*((unsigned __int8 *)this + 16) - 29 >= 0xB)
  {
    for (uint64_t i = (uint64_t *)((char *)this + 32); ; uint64_t i = (uint64_t *)(v103 + 8))
    {
      uint64_t v103 = *i;
      uint64_t v107 = *i - 24;
      if (!v103) {
        uint64_t v107 = 0;
      }
      unsigned int v108 = *(unsigned __int8 *)(v107 + 16) - 38;
      BOOL v109 = v108 > 0x38;
      uint64_t v110 = (1 << v108) & 0x100260000000001;
      if (v109 || v110 == 0) {
        break;
      }
    }
  }
  else
  {
    uint64_t v102 = *((void *)this - 12);
    uint64_t v103 = v102 + 40;
    for (uint64_t j = *(void *)(v102 + 48); j != v103; uint64_t j = *(void *)(j + 8))
    {
      uint64_t v105 = j - 24;
      if (!j) {
        uint64_t v105 = 0;
      }
      if (*(unsigned char *)(v105 + 16) != 83)
      {
        unsigned int v112 = *(unsigned __int8 *)(j - 8) - 38;
        BOOL v109 = v112 > 0x38;
        uint64_t v113 = (1 << v112) & 0x100060000000001;
        if (v109 || v113 == 0) {
          uint64_t v103 = j;
        }
        else {
          uint64_t v103 = *(void *)(j + 8);
        }
        break;
      }
    }
  }
  int v115 = operator new(0x80uLL);
  v115[21] = v115[21] & 0x38000000 | 2;
  *(void *)int v115 = 0;
  *((void *)v115 + 1) = 0;
  *((void *)v115 + 2) = 0;
  *((void *)v115 + 3) = v115 + 16;
  *((void *)v115 + 4) = 0;
  *((void *)v115 + 5) = 0;
  *((void *)v115 + 6) = 0;
  *((void *)v115 + 7) = v115 + 16;
  if (v103) {
    uint64_t v116 = (llvm::Instruction *)(v103 - 24);
  }
  else {
    uint64_t v116 = 0;
  }
  llvm::StoreInst::StoreInst((llvm::StoreInst *)(v115 + 16), (llvm::Type **)this, v10, 0, v116);
  return v10;
}

uint64_t llvm::DivergenceTracker::DivergenceTracker(uint64_t a1, llvm::Function *a2, uint64_t a3, uint64_t a4, const llvm::DataLayout *a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x4000000000;
  *(void *)(a1 + 528) = a1 + 560;
  *(void *)(a1 + 536) = a1 + 560;
  *(void *)(a1 + 544) = 32;
  *(_DWORD *)(a1 + 552) = 0;
  *(void *)(a1 + 816) = a1 + 848;
  *(void *)(a1 + 824) = a1 + 848;
  *(void *)(a1 + 832) = 16;
  *(_DWORD *)(a1 + 840) = 0;
  *(void *)(a1 + 976) = a1 + 1008;
  *(void *)(a1 + 984) = a1 + 1008;
  *(void *)(a1 + 992) = 16;
  *(_DWORD *)(a1 + 1000) = 0;
  *(void *)(a1 + 1136) = a1 + 1152;
  *(void *)(a1 + 1144) = 0x1000000000;
  *(void *)(a1 + 1280) = a2;
  *(void *)(a1 + 1288) = a3;
  *(void *)(a1 + 1296) = a4;
  uint64_t v14 = a1 + 1304;
  uint64_t v15 = *(void *)(a7 + 24);
  if (!v15)
  {
    *(unsigned char *)(a1 + 1336) = a8;
    *(void *)(a1 + 1344) = a9;
LABEL_7:
    *(void *)(a1 + 1328) = v14;
    *(void *)(a1 + 1304) = &unk_1F261E150;
    *(void *)(a1 + 1312) = sub_1CD1624E4;
    goto LABEL_8;
  }
  if (v15 == a7)
  {
    *(void *)(a1 + 1328) = v14;
    (*(void (**)(void, uint64_t))(**(void **)(a7 + 24) + 24))(*(void *)(a7 + 24), v14);
    uint64_t v16 = *(void *)(a1 + 1328);
  }
  else
  {
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
    *(void *)(a1 + 1328) = v16;
  }
  *(unsigned char *)(a1 + 1336) = a8;
  *(void *)(a1 + 1344) = a9;
  if (!v16) {
    goto LABEL_7;
  }
LABEL_8:
  llvm::DivergenceTracker::analyze(a1, a2, a5, a6);
  return a1;
}

{
  return llvm::DivergenceTracker::DivergenceTracker(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1CD1624E4(llvm::Instruction *this, uint64_t a2, int *a3)
{
  int v4 = *((unsigned __int8 *)this + 16);
  if (this && v4 >= 0x1C)
  {
    uint64_t v5 = *((void *)this + 5);
    uint64_t v6 = *(void *)(*(void *)(v5 + 56) + 80);
    if (v6) {
      uint64_t v7 = v6 - 24;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t result = 1;
    if (v4 <= 82)
    {
      if (v4 == 59) {
        return result;
      }
      if (v4 == 60)
      {
        uint64_t v9 = **((void **)this - 4);
        unsigned int v10 = *(_DWORD *)(v9 + 8);
        if ((v10 & 0xFE) == 0x12) {
          unsigned int v10 = *(_DWORD *)(**(void **)(v9 + 16) + 8);
        }
        unsigned int v11 = v10 >> 8;
        if (v11 == 64) {
          return 0;
        }
        if (v7 != v5) {
          return sub_1CD10AB34((uint64_t)this, a2, a3, 0) ^ 1;
        }
        BOOL v13 = v11 == 2;
        return !v13;
      }
LABEL_27:
      if (llvm::Instruction::mayHaveSideEffects(this)) {
        return 1;
      }
      uint64_t result = 0;
      uint64_t v15 = *((unsigned __int8 *)this + 16) - 33;
      if (v15 > 0x37) {
        return result;
      }
      if (((1 << (*((unsigned char *)this + 16) - 33)) & 0x8000000000041) != 0)
      {
        uint64_t v16 = *((void *)this + 8);
        if (!v16 || (*(unsigned char *)(v16 + 20) & 4) == 0 && (*(unsigned char *)(v16 + 17) & 0x10) == 0)
        {
          __int32 v23 = 7;
          if (sub_1CC5CB59C((uint64_t)this, &v23, 1uLL))
          {
            uint64_t v20 = *((void *)this - 4);
            if (!v20
              || *(unsigned char *)(v20 + 16)
              || *(void *)(v20 + 24) != *((void *)this + 9)
              || *(_DWORD *)(v20 + 36) != 7)
            {
              return 1;
            }
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 66) & 1) == 0
            && (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44) & 1) == 0)
          {
            return 1;
          }
        }
      }
      else
      {
        if (((1 << (*((unsigned char *)this + 16) - 33)) & 0x808001C8000010) != 0) {
          return 1;
        }
        if (v15 != 28) {
          return result;
        }
        if ((*((_WORD *)this + 9) & 0x301) != 0) {
          return 1;
        }
      }
      return 0;
    }
    if (v4 == 83) {
      return result;
    }
    if (v4 != 84) {
      goto LABEL_27;
    }
    uint64_t v14 = *((void *)this - 4);
    if (!v14
      || *(unsigned char *)(v14 + 16)
      || *(void *)(v14 + 24) != *((void *)this + 9)
      || (*(unsigned char *)(v14 + 33) & 0x20) == 0)
    {
      goto LABEL_27;
    }
    if (v7 != v5)
    {
      uint64_t v17 = *((void *)this + 8);
      if (!v17 || (*(unsigned char *)(v17 + 20) & 4) == 0 && (*(unsigned char *)(v17 + 17) & 0x10) == 0)
      {
        __int32 v22 = 7;
        if (sub_1CC5CB59C((uint64_t)this, &v22, 1uLL))
        {
          uint64_t v21 = *((void *)this - 4);
          if (!v21
            || *(unsigned char *)(v21 + 16)
            || *(void *)(v21 + 24) != *((void *)this + 9)
            || *(_DWORD *)(v21 + 36) != 7)
          {
            return 1;
          }
        }
        if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 66) & 1) == 0
          && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44))
        {
          return 1;
        }
      }
      uint64_t v18 = *((void *)this + 8);
      if (v18)
      {
        if ((*(unsigned char *)(v18 + 12) & 0x40) != 0) {
          return 1;
        }
      }
      if (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 6)) {
        return 1;
      }
      uint64_t v14 = *((void *)this - 4);
    }
    int v19 = *(_DWORD *)(v14 + 36);
    return sub_1CD0FF67C(v19);
  }
  else
  {
    uint64_t result = 1;
    if (this && v4 <= 3)
    {
      int v12 = *(_DWORD *)(*(void *)this + 8) >> 8;
      BOOL v13 = v12 == 64 || v12 == 2;
      return !v13;
    }
  }
  return result;
}

void llvm::DivergenceTracker::analyze(uint64_t a1, llvm::Function *this, const llvm::DataLayout *a3, uint64_t a4)
{
  uint64_t v8 = *(uint64_t **)(a1 + 1296);
  uint64_t v9 = *((unsigned int *)v8 + 2);
  if (!v9)
  {
LABEL_18:
    if (!*(unsigned char *)(a1 + 1336)) {
      llvm::DivergenceTracker::collectMarkedUniform((llvm::DivergenceTracker *)a1, this, a3);
    }
    llvm::DivergenceTracker::collectDivergenceSources(a1, this, (uint64_t)a3, a4);
    uint64_t v18 = *(unsigned int *)(a1 + 8);
    if (!v18)
    {
LABEL_62:
      llvm::DivergenceTracker::propagateDivergence((unsigned int *)a1, a1);
      return;
    }
    int v19 = *(uint64_t **)a1;
    uint64_t v20 = *(void *)a1 + 8 * v18;
    while (1)
    {
      uint64_t v21 = *(void *)(a1 + 536);
      uint64_t v22 = *v19;
      uint64_t v23 = *(unsigned int *)(a1 + 548);
      if (v21 != *(void *)(a1 + 528)) {
        break;
      }
      if (!v23) {
        goto LABEL_30;
      }
      uint64_t v24 = 0;
      uint64_t v25 = 8 * v23;
      uint64_t v26 = *(void **)(a1 + 536);
      do
      {
        if (*v26 == v22) {
          goto LABEL_32;
        }
        if (*v26 == -2) {
          uint64_t v24 = v26;
        }
        ++v26;
        v25 -= 8;
      }
      while (v25);
      if (v24)
      {
        *uint64_t v24 = v22;
        --*(_DWORD *)(a1 + 552);
      }
      else
      {
LABEL_30:
        unsigned int v27 = *(_DWORD *)(a1 + 544);
        if (v23 >= v27) {
          goto LABEL_35;
        }
        *(_DWORD *)(a1 + 548) = v23 + 1;
        *(void *)(v21 + 8 * v23) = v22;
      }
LABEL_32:
      if (++v19 == (uint64_t *)v20) {
        goto LABEL_62;
      }
    }
    unsigned int v27 = *(_DWORD *)(a1 + 544);
LABEL_35:
    if (3 * v27 <= 4 * ((int)v23 - *(_DWORD *)(a1 + 552)))
    {
      if (v27 >= 0x40) {
        v27 *= 2;
      }
      else {
        unsigned int v27 = 128;
      }
    }
    else if (v27 - v23 >= v27 >> 3)
    {
      goto LABEL_37;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 528), v27);
    unsigned int v27 = *(_DWORD *)(a1 + 544);
    uint64_t v21 = *(void *)(a1 + 536);
LABEL_37:
    unsigned int v28 = v27 - 1;
    unsigned int v29 = (v27 - 1) & ((v22 >> 4) ^ (v22 >> 9));
    int64x2_t v30 = (void *)(v21 + 8 * v29);
    uint64_t v31 = *v30;
    if (*v30 == -1)
    {
      uint64_t v32 = 0;
LABEL_49:
      if (v32) {
        unint64_t v36 = v32;
      }
      else {
        unint64_t v36 = v30;
      }
      if (*v36 != v22)
      {
        if (*v36 == -2) {
          --*(_DWORD *)(a1 + 552);
        }
        else {
          ++*(_DWORD *)(a1 + 548);
        }
        *unint64_t v36 = v22;
      }
    }
    else
    {
      uint64_t v32 = 0;
      int v33 = 1;
      while (v31 != v22)
      {
        if (v32) {
          BOOL v34 = 0;
        }
        else {
          BOOL v34 = v31 == -2;
        }
        if (v34) {
          uint64_t v32 = v30;
        }
        unsigned int v35 = v29 + v33++;
        unsigned int v29 = v35 & v28;
        int64x2_t v30 = (void *)(v21 + 8 * (v35 & v28));
        uint64_t v31 = *v30;
        if (*v30 == -1) {
          goto LABEL_49;
        }
      }
    }
    goto LABEL_32;
  }
  int v10 = 0;
  uint64_t v11 = *v8;
  uint64_t v12 = 8 * v9;
  while (1)
  {
    uint64_t v13 = *(void *)(*(void *)v11 + 40);
    if (v13) {
      uint64_t v14 = v13 - 24;
    }
    else {
      uint64_t v14 = 0;
    }
    if (*(unsigned __int8 *)(v14 + 16) - 29 >= 0xB) {
      uint64_t v14 = 0;
    }
    int v15 = *(unsigned __int8 *)(v14 + 16);
    int v16 = v10 != 0;
    if (v15 == 35) {
      int v16 = 3;
    }
    if (v16 && v16 != 3) {
      break;
    }
    if (v15 != 35) {
      int v10 = 1;
    }
    v11 += 8;
    v12 -= 8;
    if (!v12) {
      goto LABEL_18;
    }
  }
  BOOL v37 = (char *)this + 72;
  for (uint64_t i = *((void *)this + 10); ; uint64_t i = *(void *)(i + 8))
  {
    if ((char *)i == v37) {
      return;
    }
    uint64_t v39 = i - 24;
    if (!i) {
      uint64_t v39 = 0;
    }
    uint64_t v40 = *(void *)(v39 + 48);
    if (v40 != v39 + 40) {
      break;
    }
  }
  uint64_t v41 = *(void **)(a1 + 536);
  uint64_t v42 = *(void **)(a1 + 528);
  while (1)
  {
    if (v40) {
      uint64_t v43 = v40 - 24;
    }
    else {
      uint64_t v43 = 0;
    }
    uint64_t v44 = *(unsigned int *)(a1 + 548);
    if (v41 != v42)
    {
      unsigned int v48 = *(_DWORD *)(a1 + 544);
      goto LABEL_89;
    }
    if (!v44)
    {
LABEL_81:
      unsigned int v48 = *(_DWORD *)(a1 + 544);
      if (v44 < v48)
      {
        *(_DWORD *)(a1 + 548) = v44 + 1;
        v42[v44] = v43;
        goto LABEL_83;
      }
LABEL_89:
      if (3 * v48 <= 4 * ((int)v44 - *(_DWORD *)(a1 + 552)))
      {
        if (v48 >= 0x40) {
          v48 *= 2;
        }
        else {
          unsigned int v48 = 128;
        }
      }
      else if (v48 - v44 >= v48 >> 3)
      {
        goto LABEL_91;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 528), v48);
      unsigned int v48 = *(_DWORD *)(a1 + 544);
      uint64_t v41 = *(void **)(a1 + 536);
LABEL_91:
      unsigned int v50 = v48 - 1;
      unsigned int v51 = (v48 - 1) & ((v43 >> 4) ^ (v43 >> 9));
      uint64_t v52 = &v41[v51];
      uint64_t v53 = *v52;
      if (*v52 == -1)
      {
        uint64_t v54 = 0;
LABEL_103:
        if (v54) {
          unsigned int v58 = v54;
        }
        else {
          unsigned int v58 = v52;
        }
        if (*v58 != v43)
        {
          if (*v58 == -2) {
            --*(_DWORD *)(a1 + 552);
          }
          else {
            ++*(_DWORD *)(a1 + 548);
          }
          *unsigned int v58 = v43;
        }
      }
      else
      {
        uint64_t v54 = 0;
        int v55 = 1;
        while (v53 != v43)
        {
          if (v54) {
            BOOL v56 = 0;
          }
          else {
            BOOL v56 = v53 == -2;
          }
          if (v56) {
            uint64_t v54 = v52;
          }
          unsigned int v57 = v51 + v55++;
          unsigned int v51 = v57 & v50;
          uint64_t v52 = &v41[v57 & v50];
          uint64_t v53 = *v52;
          if (*v52 == -1) {
            goto LABEL_103;
          }
        }
      }
      goto LABEL_83;
    }
    uint64_t v45 = 0;
    uint64_t v46 = 8 * v44;
    uint64_t v47 = v42;
    while (*v47 != v43)
    {
      if (*v47 == -2) {
        uint64_t v45 = v47;
      }
      ++v47;
      v46 -= 8;
      if (!v46)
      {
        if (!v45) {
          goto LABEL_81;
        }
        *uint64_t v45 = v43;
        --*(_DWORD *)(a1 + 552);
        break;
      }
    }
LABEL_83:
    uint64_t v41 = *(void **)(a1 + 536);
    uint64_t v42 = *(void **)(a1 + 528);
    uint64_t v40 = *(void *)(v40 + 8);
    uint64_t v49 = i - 24;
    if (!i) {
      uint64_t v49 = 0;
    }
    if (v40 == v49 + 40) {
      break;
    }
LABEL_86:
    if ((char *)i == v37) {
      return;
    }
  }
  while (1)
  {
    uint64_t i = *(void *)(i + 8);
    if ((char *)i == v37) {
      break;
    }
    uint64_t v59 = i - 24;
    if (!i) {
      uint64_t v59 = 0;
    }
    uint64_t v40 = *(void *)(v59 + 48);
    if (v40 != v59 + 40) {
      goto LABEL_86;
    }
  }
}

void llvm::DivergenceTracker::collectDivergenceSources(uint64_t a1, llvm::Function *this, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = this;
  uint64_t v8 = (char *)this + 72;
  for (uint64_t i = (char *)*((void *)this + 10); i != v8; uint64_t i = (char *)*((void *)i + 1))
  {
    int v10 = (unsigned int *)(i - 24);
    if (!i) {
      int v10 = 0;
    }
    uint64_t v11 = *((void *)v10 + 6);
    if ((unsigned int *)v11 != v10 + 10)
    {
      while (1)
      {
        uint64_t v12 = v11 ? v11 - 24 : 0;
        uint64_t v50 = *(void *)(a1 + 1344);
        unsigned int v51 = (char *)v12;
        uint64_t v13 = *(void *)(a1 + 1328);
        if (!v13) {
          goto LABEL_92;
        }
        if ((*(unsigned int (**)(uint64_t, char **, uint64_t, uint64_t, uint64_t *))(*(void *)v13 + 48))(v13, &v51, a3, a4, &v50))
        {
          uint64_t v15 = *(void *)(a1 + 824);
          uint64_t v16 = *(void *)(a1 + 816);
          if (v15 == v16)
          {
            uint64_t v17 = *(unsigned int *)(a1 + 836);
            uint64_t v18 = (void *)(v15 + 8 * v17);
            if (v17)
            {
              uint64_t v19 = 0;
              uint64_t v20 = 8 * v17;
              while (*(void *)(v15 + v19) != v12)
              {
                v19 += 8;
                if (v20 == v19) {
                  goto LABEL_21;
                }
              }
              uint64_t v18 = (void *)(v15 + v19);
            }
LABEL_21:
            uint64_t v16 = *(void *)(a1 + 824);
          }
          else
          {
            uint64_t v24 = *(unsigned int *)(a1 + 832);
            int v25 = v24 - 1;
            unsigned int v26 = (v24 - 1) & ((v12 >> 4) ^ (v12 >> 9));
            uint64_t v18 = (void *)(v15 + 8 * v26);
            uint64_t v27 = *v18;
            if (*v18 == -1)
            {
              unsigned int v28 = 0;
LABEL_46:
              if (v28) {
                uint64_t v18 = v28;
              }
              if (*v18 != v12) {
                uint64_t v18 = (void *)(v15 + 8 * v24);
              }
            }
            else
            {
              unsigned int v28 = 0;
              int v29 = 1;
              while (v27 != v12)
              {
                if (v28) {
                  BOOL v30 = 0;
                }
                else {
                  BOOL v30 = v27 == -2;
                }
                if (v30) {
                  unsigned int v28 = v18;
                }
                unsigned int v31 = v26 + v29++;
                unsigned int v26 = v31 & v25;
                uint64_t v18 = (void *)(v15 + 8 * (v31 & v25));
                uint64_t v27 = *v18;
                if (*v18 == -1) {
                  goto LABEL_46;
                }
              }
            }
          }
          if (v15 == v16) {
            uint64_t v21 = (unsigned int *)(a1 + 836);
          }
          else {
            uint64_t v21 = (unsigned int *)(a1 + 832);
          }
          if (v18 == (void *)(v15 + 8 * *v21))
          {
            unint64_t v22 = *(unsigned int *)(a1 + 8);
            if (v22 >= *(unsigned int *)(a1 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)a1 + 8 * v22) = v12;
            ++*(_DWORD *)(a1 + 8);
          }
        }
        uint64_t v11 = *(void *)(v11 + 8);
        uint64_t v14 = (unsigned int *)(i - 24);
        if (!i) {
          uint64_t v14 = 0;
        }
        if ((unsigned int *)v11 == v14 + 10)
        {
          do
          {
            uint64_t i = (char *)*((void *)i + 1);
            if (i == v8) {
              goto LABEL_50;
            }
            uint64_t v23 = (unsigned int *)(i - 24);
            if (!i) {
              uint64_t v23 = 0;
            }
            uint64_t v11 = *((void *)v23 + 6);
          }
          while ((unsigned int *)v11 == v23 + 10);
        }
        if (i == v8) {
          goto LABEL_50;
        }
      }
    }
LABEL_93:
    ;
  }
LABEL_50:
  if ((*((_WORD *)v6 + 9) & 1) == 0)
  {
    uint64_t v8 = (char *)*((void *)v6 + 11);
LABEL_52:
    uint64_t v32 = v8;
    goto LABEL_53;
  }
  llvm::Function::BuildLazyArguments(v6);
  uint64_t v8 = (char *)*((void *)v6 + 11);
  if ((*((_WORD *)v6 + 9) & 1) == 0) {
    goto LABEL_52;
  }
  llvm::Function::BuildLazyArguments(v6);
  uint64_t v32 = (char *)*((void *)v6 + 11);
LABEL_53:
  uint64_t v6 = (llvm::Function *)&v32[40 * *((void *)v6 + 12)];
  if (v8 != (char *)v6)
  {
    uint64_t i = (char *)(a1 + 836);
    while (1)
    {
      uint64_t v50 = *(void *)(a1 + 1344);
      unsigned int v51 = v8;
      uint64_t v33 = *(void *)(a1 + 1328);
      if (!v33) {
        break;
      }
      if ((*(unsigned int (**)(uint64_t, char **, uint64_t, uint64_t, uint64_t *))(*(void *)v33 + 48))(v33, &v51, a3, a4, &v50))
      {
        uint64_t v34 = *(void *)(a1 + 824);
        uint64_t v35 = *(void *)(a1 + 816);
        if (v34 == v35)
        {
          uint64_t v36 = *(unsigned int *)i;
          BOOL v37 = (char **)(v34 + 8 * v36);
          if (v36)
          {
            uint64_t v38 = 0;
            uint64_t v39 = 8 * v36;
            while (*(char **)(v34 + v38) != v8)
            {
              v38 += 8;
              if (v39 == v38) {
                goto LABEL_63;
              }
            }
            BOOL v37 = (char **)(v34 + v38);
          }
LABEL_63:
          uint64_t v35 = *(void *)(a1 + 824);
        }
        else
        {
          uint64_t v42 = *(unsigned int *)(a1 + 832);
          int v43 = v42 - 1;
          unsigned int v44 = (v42 - 1) & ((v8 >> 4) ^ (v8 >> 9));
          BOOL v37 = (char **)(v34 + 8 * v44);
          uint64_t v45 = *v37;
          if (*v37 == (char *)-1)
          {
            uint64_t v46 = 0;
LABEL_82:
            if (v46) {
              BOOL v37 = v46;
            }
            if (*v37 != v8) {
              BOOL v37 = (char **)(v34 + 8 * v42);
            }
          }
          else
          {
            uint64_t v46 = 0;
            int v47 = 1;
            while (v45 != v8)
            {
              if (v46) {
                BOOL v48 = 0;
              }
              else {
                BOOL v48 = v45 == (char *)-2;
              }
              if (v48) {
                uint64_t v46 = v37;
              }
              unsigned int v49 = v44 + v47++;
              unsigned int v44 = v49 & v43;
              BOOL v37 = (char **)(v34 + 8 * (v49 & v43));
              uint64_t v45 = *v37;
              if (*v37 == (char *)-1) {
                goto LABEL_82;
              }
            }
          }
        }
        if (v34 == v35) {
          uint64_t v40 = (unsigned int *)(a1 + 836);
        }
        else {
          uint64_t v40 = (unsigned int *)(a1 + 832);
        }
        if (v37 == (char **)(v34 + 8 * *v40))
        {
          unint64_t v41 = *(unsigned int *)(a1 + 8);
          if (v41 >= *(unsigned int *)(a1 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a1 + 8 * v41) = v8;
          ++*(_DWORD *)(a1 + 8);
        }
      }
      v8 += 40;
      if (v8 == (char *)v6) {
        return;
      }
    }
LABEL_92:
    sub_1CB920400();
    goto LABEL_93;
  }
}

void llvm::DivergenceTracker::collectMarkedUniform(llvm::DivergenceTracker *this, llvm::Function *a2, const llvm::DataLayout *a3)
{
  uint64_t v3 = *((void *)a2 + 5);
  uint64_t v4 = v3 + 24;
  uint64_t v5 = *(void *)(v3 + 32);
  if (v5 != v3 + 24)
  {
    uint64_t v7 = (llvm::DivergenceTracker *)((char *)this + 816);
    while (1)
    {
      uint64_t v8 = v5 - 56;
      if (!v5) {
        break;
      }
      if (*(unsigned char *)(v5 - 40) != 3) {
        goto LABEL_56;
      }
      if ((*(_DWORD *)(v5 - 36) & 0x7FFFFFF) != 0) {
        goto LABEL_59;
      }
      int v9 = *(_DWORD *)(v5 - 24);
LABEL_8:
      if ((v9 & 0x2000) != 0 && *(_DWORD *)(v8 + 36) == 1275)
      {
        for (uint64_t i = *(void *)(v8 + 8); i; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v11 = *(void *)(i + 24);
          if (*(unsigned char *)(v11 + 16) == 84)
          {
            uint64_t v12 = *(void *)(v11 - 32);
            if (v12)
            {
              if (!*(unsigned char *)(v12 + 16)
                && *(void *)(v12 + 24) == *(void *)(v11 + 72)
                && (*(unsigned char *)(v12 + 33) & 0x20) != 0)
              {
                uint64_t v13 = *(void *)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF));
                uint64_t v14 = *((void *)this + 103);
                uint64_t v15 = *((unsigned int *)this + 209);
                if (v14 != *((void *)this + 102))
                {
                  unsigned int v19 = *((_DWORD *)this + 208);
LABEL_27:
                  if (3 * v19 <= 4 * ((int)v15 - *((_DWORD *)this + 210)))
                  {
                    if (v19 >= 0x40) {
                      v19 *= 2;
                    }
                    else {
                      unsigned int v19 = 128;
                    }
                  }
                  else if (v19 - v15 >= v19 >> 3)
                  {
                    goto LABEL_29;
                  }
                  llvm::SmallPtrSetImplBase::Grow(v7, v19);
                  unsigned int v19 = *((_DWORD *)this + 208);
                  uint64_t v14 = *((void *)this + 103);
LABEL_29:
                  unsigned int v20 = v19 - 1;
                  unsigned int v21 = (v19 - 1) & ((v13 >> 4) ^ (v13 >> 9));
                  unint64_t v22 = (void *)(v14 + 8 * v21);
                  uint64_t v23 = *v22;
                  if (*v22 == -1)
                  {
                    uint64_t v24 = 0;
LABEL_41:
                    if (v24) {
                      unsigned int v28 = v24;
                    }
                    else {
                      unsigned int v28 = v22;
                    }
                    if (*v28 != v13)
                    {
                      if (*v28 == -2) {
                        --*((_DWORD *)this + 210);
                      }
                      else {
                        ++*((_DWORD *)this + 209);
                      }
                      *unsigned int v28 = v13;
                    }
                  }
                  else
                  {
                    uint64_t v24 = 0;
                    int v25 = 1;
                    while (v23 != v13)
                    {
                      if (v24) {
                        BOOL v26 = 0;
                      }
                      else {
                        BOOL v26 = v23 == -2;
                      }
                      if (v26) {
                        uint64_t v24 = v22;
                      }
                      unsigned int v27 = v21 + v25++;
                      unsigned int v21 = v27 & v20;
                      unint64_t v22 = (void *)(v14 + 8 * (v27 & v20));
                      uint64_t v23 = *v22;
                      if (*v22 == -1) {
                        goto LABEL_41;
                      }
                    }
                  }
                  continue;
                }
                if (v15)
                {
                  uint64_t v16 = 0;
                  uint64_t v17 = 8 * v15;
                  uint64_t v18 = (void *)*((void *)this + 103);
                  while (*v18 != v13)
                  {
                    if (*v18 == -2) {
                      uint64_t v16 = v18;
                    }
                    ++v18;
                    v17 -= 8;
                    if (!v17)
                    {
                      if (!v16) {
                        goto LABEL_24;
                      }
                      void *v16 = v13;
                      --*((_DWORD *)this + 210);
                      goto LABEL_48;
                    }
                  }
                  continue;
                }
LABEL_24:
                unsigned int v19 = *((_DWORD *)this + 208);
                if (v15 >= v19) {
                  goto LABEL_27;
                }
                *((_DWORD *)this + 209) = v15 + 1;
                *(void *)(v14 + 8 * v15) = v13;
              }
            }
          }
LABEL_48:
          ;
        }
      }
LABEL_59:
      uint64_t v5 = *(void *)(v5 + 8);
      if (v5 == v4) {
        return;
      }
    }
    uint64_t v8 = 0;
LABEL_56:
    if (*(unsigned char *)(v8 + 16)) {
      goto LABEL_59;
    }
    if (*(void *)(v8 + 72) != v8 + 72) {
      goto LABEL_59;
    }
    int v9 = *(_DWORD *)(v8 + 32);
    if ((v9 & 0x800000) != 0) {
      goto LABEL_59;
    }
    goto LABEL_8;
  }
}

void llvm::DivergenceTracker::computeInfluenceRegion(llvm::DivergenceTracker *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  uint64_t v5 = (char *)this + 976;
  uint64_t v6 = (char *)this + 1136;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    sub_1CD16338C((uint64_t)a2, (uint64_t)i, (uint64_t)v5, (uint64_t)v6);
    unsigned int v9 = *((_DWORD *)this + 286);
    if (!v9) {
      break;
    }
    a2 = *(llvm::BasicBlock **)(*((void *)this + 142) + 8 * v9 - 8);
    *((_DWORD *)this + 286) = v9 - 1;
  }
}

void sub_1CD16338C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4 != a1 + 40)
  {
    if (v4) {
      uint64_t v5 = v4 - 24;
    }
    else {
      uint64_t v5 = 0;
    }
    if (*(unsigned char *)(v5 + 16) != 30)
    {
      int v28 = 2;
      switch(*(unsigned char *)(v5 + 16))
      {
        case 0x1E:
          __break(1u);
          goto LABEL_61;
        case 0x1F:
          int v28 = (*(_DWORD *)(v5 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_58;
        case 0x20:
        case 0x26:
          int v28 = (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_58;
        case 0x21:
          goto LABEL_10;
        case 0x24:
          int v28 = *(_WORD *)(v5 + 18) & 1;
          goto LABEL_58;
        case 0x25:
LABEL_61:
          int v28 = 1;
          goto LABEL_10;
        case 0x27:
          int v28 = *(_DWORD *)(v5 + 80) + 1;
LABEL_58:
          if (!v28) {
            return;
          }
          goto LABEL_10;
        default:
          return;
      }
    }
    if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 3) {
      int v28 = 2;
    }
    else {
      int v28 = 1;
    }
LABEL_10:
    unsigned int v9 = 0;
    while (1)
    {
      uint64_t Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v5, v9);
      if (Successor != a2) {
        break;
      }
LABEL_46:
      if (v28 == ++v9) {
        return;
      }
    }
    uint64_t v11 = Successor;
    uint64_t v12 = *(void *)(a3 + 8);
    uint64_t v13 = *(unsigned int *)(a3 + 20);
    if (v12 == *(void *)a3)
    {
      if (v13)
      {
        uint64_t v14 = 0;
        uint64_t v15 = 8 * v13;
        uint64_t v16 = *(uint64_t **)(a3 + 8);
        while (*v16 != Successor)
        {
          if (*v16 == -2) {
            uint64_t v14 = v16;
          }
          ++v16;
          v15 -= 8;
          if (!v15)
          {
            if (!v14) {
              goto LABEL_20;
            }
            *uint64_t v14 = Successor;
            --*(_DWORD *)(a3 + 24);
            goto LABEL_44;
          }
        }
        goto LABEL_46;
      }
LABEL_20:
      unsigned int v17 = *(_DWORD *)(a3 + 16);
      if (v13 < v17)
      {
        *(_DWORD *)(a3 + 20) = v13 + 1;
        *(void *)(v12 + 8 * v13) = Successor;
LABEL_44:
        unint64_t v27 = *(unsigned int *)(a4 + 8);
        if (v27 >= *(unsigned int *)(a4 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a4 + 8 * v27) = v11;
        ++*(_DWORD *)(a4 + 8);
        goto LABEL_46;
      }
    }
    else
    {
      unsigned int v17 = *(_DWORD *)(a3 + 16);
    }
    if (3 * v17 <= 4 * ((int)v13 - *(_DWORD *)(a3 + 24)))
    {
      if (v17 >= 0x40) {
        v17 *= 2;
      }
      else {
        unsigned int v17 = 128;
      }
    }
    else if (v17 - v13 >= v17 >> 3)
    {
LABEL_25:
      unsigned int v18 = v17 - 1;
      unsigned int v19 = (v17 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      unsigned int v20 = (uint64_t *)(v12 + 8 * v19);
      uint64_t v21 = *v20;
      if (*v20 != -1)
      {
        unint64_t v22 = 0;
        int v23 = 1;
        while (v21 != v11)
        {
          if (v22) {
            BOOL v24 = 0;
          }
          else {
            BOOL v24 = v21 == -2;
          }
          if (v24) {
            unint64_t v22 = v20;
          }
          unsigned int v25 = v19 + v23++;
          unsigned int v19 = v25 & v18;
          unsigned int v20 = (uint64_t *)(v12 + 8 * (v25 & v18));
          uint64_t v21 = *v20;
          if (*v20 == -1) {
            goto LABEL_37;
          }
        }
        goto LABEL_46;
      }
      unint64_t v22 = 0;
LABEL_37:
      if (v22) {
        BOOL v26 = v22;
      }
      else {
        BOOL v26 = v20;
      }
      if (*v26 == v11) {
        goto LABEL_46;
      }
      if (*v26 == -2) {
        --*(_DWORD *)(a3 + 24);
      }
      else {
        ++*(_DWORD *)(a3 + 20);
      }
      uint64_t *v26 = v11;
      goto LABEL_44;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a3, v17);
    unsigned int v17 = *(_DWORD *)(a3 + 16);
    uint64_t v12 = *(void *)(a3 + 8);
    goto LABEL_25;
  }
}

uint64_t llvm::DivergenceTracker::findUsersOutsideInfluenceRegion(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    uint64_t v5 = result;
    uint64_t v6 = (unsigned int *)(result + 996);
    uint64_t v7 = (unsigned int *)(result + 992);
    do
    {
      uint64_t v8 = *(void *)(*(void *)(v3 + 24) + 40);
      uint64_t v9 = *(void *)(v5 + 984);
      uint64_t v10 = *(void *)(v5 + 976);
      if (v9 == v10)
      {
        uint64_t v11 = *v6;
        uint64_t v12 = (void *)(v9 + 8 * v11);
        if (v11)
        {
          uint64_t v13 = 0;
          uint64_t v14 = 8 * v11;
          while (*(void *)(v9 + v13) != v8)
          {
            v13 += 8;
            if (v14 == v13) {
              goto LABEL_8;
            }
          }
          uint64_t v12 = (void *)(v9 + v13);
        }
LABEL_8:
        uint64_t v10 = *(void *)(v5 + 984);
      }
      else
      {
        uint64_t v16 = *v7;
        unsigned int v17 = v16 - 1;
        unsigned int v18 = (v16 - 1) & ((v8 >> 4) ^ (v8 >> 9));
        uint64_t v12 = (void *)(v9 + 8 * v18);
        uint64_t v19 = *v12;
        if (*v12 == -1)
        {
          unsigned int v20 = 0;
LABEL_28:
          if (v20) {
            uint64_t v12 = v20;
          }
          if (*v12 != v8) {
            uint64_t v12 = (void *)(v9 + 8 * v16);
          }
        }
        else
        {
          unsigned int v20 = 0;
          uint64_t result = 1;
          while (v19 != v8)
          {
            if (v20) {
              BOOL v21 = 0;
            }
            else {
              BOOL v21 = v19 == -2;
            }
            if (v21) {
              unsigned int v20 = v12;
            }
            int v22 = v18 + result;
            uint64_t result = (result + 1);
            unsigned int v18 = v22 & v17;
            uint64_t v12 = (void *)(v9 + 8 * (v22 & v17));
            uint64_t v19 = *v12;
            if (*v12 == -1) {
              goto LABEL_28;
            }
          }
        }
      }
      if (v9 == v10) {
        uint64_t v15 = v6;
      }
      else {
        uint64_t v15 = v7;
      }
      if (v12 == (void *)(v9 + 8 * *v15))
      {
        uint64_t v26 = *(void *)(v3 + 24);
        uint64_t v23 = *(void *)(a3 + 24);
        if (!v23)
        {
          sub_1CB920400();
          return (uint64_t)llvm::DivergenceTracker::propagateDivergence(v24, v25);
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v23 + 48))(v23, &v26);
      }
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3);
  }
  return result;
}

unsigned int *llvm::DivergenceTracker::propagateDivergence(unsigned int *result, uint64_t a2)
{
  uint64_t v229 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(a2 + 8);
  if (v2)
  {
    uint64_t v4 = result;
    result += 209;
    uint64_t v5 = v4 + 208;
    BOOL v222 = (llvm::SmallPtrSetImplBase *)(v4 + 132);
    uint64_t v6 = v4 + 249;
    uint64_t v7 = v4 + 248;
    uint64_t v223 = result;
    do
    {
      uint64_t v8 = *(void *)(*(void *)a2 + 8 * v2 - 8);
      *(_DWORD *)(a2 + 8) = v2 - 1;
      unsigned int v9 = *(unsigned __int8 *)(v8 + 16);
      if (v8) {
        BOOL v10 = v9 >= 0x1C;
      }
      else {
        BOOL v10 = 0;
      }
      if (!v10 || v9 - 29 > 0xA)
      {
        uint64_t v12 = *(void *)(v8 + 8);
        if (!v12) {
          goto LABEL_438;
        }
        while (2)
        {
          uint64_t v13 = *(void *)(v12 + 24);
          unsigned int v14 = *(unsigned __int8 *)(v13 + 16);
          if (v13) {
            BOOL v15 = v14 >= 0x1C;
          }
          else {
            BOOL v15 = 0;
          }
          if (!v15)
          {
            if (v13) {
              BOOL v16 = v14 == 5;
            }
            else {
              BOOL v16 = 0;
            }
            if (!v16) {
              goto LABEL_126;
            }
            uint64_t v17 = *((void *)v4 + 103);
            uint64_t v18 = *((void *)v4 + 102);
            if (v17 == v18)
            {
              uint64_t v19 = *result;
              unsigned int v20 = (void *)(v17 + 8 * v19);
              if (v19)
              {
                uint64_t v21 = 0;
                uint64_t v22 = 8 * v19;
                while (*(void *)(v17 + v21) != v13)
                {
                  v21 += 8;
                  if (v22 == v21) {
                    goto LABEL_57;
                  }
                }
                unsigned int v20 = (void *)(v17 + v21);
              }
LABEL_57:
              uint64_t v18 = *((void *)v4 + 103);
            }
            else
            {
              uint64_t v29 = *v5;
              int v30 = v29 - 1;
              unsigned int v31 = (v29 - 1) & ((v13 >> 4) ^ (v13 >> 9));
              unsigned int v20 = (void *)(v17 + 8 * v31);
              uint64_t v32 = *v20;
              if (*v20 == -1)
              {
                uint64_t v33 = 0;
LABEL_129:
                if (v33) {
                  unsigned int v20 = v33;
                }
                if (*v20 != v13) {
                  unsigned int v20 = (void *)(v17 + 8 * v29);
                }
              }
              else
              {
                uint64_t v33 = 0;
                int v34 = 1;
                while (v32 != v13)
                {
                  if (v33) {
                    BOOL v35 = 0;
                  }
                  else {
                    BOOL v35 = v32 == -2;
                  }
                  if (v35) {
                    uint64_t v33 = v20;
                  }
                  unsigned int v36 = v31 + v34++;
                  unsigned int v31 = v36 & v30;
                  unsigned int v20 = (void *)(v17 + 8 * (v36 & v30));
                  uint64_t v32 = *v20;
                  if (*v20 == -1) {
                    goto LABEL_129;
                  }
                }
              }
            }
            uint64_t v45 = v17 == v18 ? result : v4 + 208;
            if (v20 != (void *)(v17 + 8 * *v45)) {
              goto LABEL_126;
            }
            uint64_t v46 = *((void *)v4 + 67);
            uint64_t v47 = v4[137];
            if (v46 != *((void *)v4 + 66))
            {
              unsigned int v51 = v4[136];
              goto LABEL_73;
            }
            if (v47)
            {
              BOOL v48 = 0;
              uint64_t v49 = 8 * v47;
              uint64_t v50 = (void *)*((void *)v4 + 67);
              while (*v50 != v13)
              {
                if (*v50 == -2) {
                  BOOL v48 = v50;
                }
                ++v50;
                v49 -= 8;
                if (!v49)
                {
                  if (v48) {
                    goto LABEL_138;
                  }
                  goto LABEL_70;
                }
              }
              goto LABEL_126;
            }
LABEL_70:
            unsigned int v51 = v4[136];
            if (v47 >= v51)
            {
LABEL_73:
              if (3 * v51 <= 4 * (v47 - v4[138]))
              {
                if (v51 >= 0x40) {
                  v51 *= 2;
                }
                else {
                  unsigned int v51 = 128;
                }
              }
              else if (v51 - v47 >= v51 >> 3)
              {
LABEL_75:
                unsigned int v52 = v51 - 1;
                unsigned int v53 = (v51 - 1) & ((v13 >> 4) ^ (v13 >> 9));
                uint64_t v54 = (void *)(v46 + 8 * v53);
                uint64_t v55 = *v54;
                if (*v54 != -1)
                {
                  BOOL v56 = 0;
                  int v57 = 1;
                  while (v55 != v13)
                  {
                    if (v56) {
                      BOOL v58 = 0;
                    }
                    else {
                      BOOL v58 = v55 == -2;
                    }
                    if (v58) {
                      BOOL v56 = v54;
                    }
                    unsigned int v59 = v53 + v57++;
                    unsigned int v53 = v59 & v52;
                    uint64_t v54 = (void *)(v46 + 8 * (v59 & v52));
                    uint64_t v55 = *v54;
                    if (*v54 == -1) {
                      goto LABEL_117;
                    }
                  }
                  goto LABEL_126;
                }
LABEL_116:
                BOOL v56 = 0;
LABEL_117:
                if (v56) {
                  uint64_t v70 = v56;
                }
                else {
                  uint64_t v70 = v54;
                }
                if (*v70 != v13)
                {
                  if (*v70 == -2) {
                    --v4[138];
                  }
                  else {
                    ++v4[137];
                  }
                  void *v70 = v13;
                  goto LABEL_124;
                }
LABEL_126:
                uint64_t v12 = *(void *)(v12 + 8);
                if (!v12) {
                  goto LABEL_438;
                }
                continue;
              }
              llvm::SmallPtrSetImplBase::Grow(v222, v51);
              uint64_t result = v223;
              unsigned int v51 = v4[136];
              uint64_t v46 = *((void *)v4 + 67);
              goto LABEL_75;
            }
LABEL_101:
            v4[137] = v47 + 1;
            *(void *)(v46 + 8 * v47) = v13;
LABEL_124:
            unint64_t v71 = *(unsigned int *)(a2 + 8);
            if (v71 >= *(unsigned int *)(a2 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)a2 + 8 * v71) = v13;
            ++*(_DWORD *)(a2 + 8);
            goto LABEL_126;
          }
          break;
        }
        if (*(void *)(*(void *)(v13 + 40) + 56) != *((void *)v4 + 160)) {
          goto LABEL_126;
        }
        uint64_t v23 = *((void *)v4 + 103);
        uint64_t v24 = *((void *)v4 + 102);
        if (v23 == v24)
        {
          uint64_t v25 = *result;
          uint64_t v26 = (void *)(v23 + 8 * v25);
          if (v25)
          {
            uint64_t v27 = 0;
            uint64_t v28 = 8 * v25;
            while (*(void *)(v23 + v27) != v13)
            {
              v27 += 8;
              if (v28 == v27) {
                goto LABEL_87;
              }
            }
            uint64_t v26 = (void *)(v23 + v27);
          }
LABEL_87:
          uint64_t v24 = *((void *)v4 + 103);
        }
        else
        {
          uint64_t v37 = *v5;
          int v38 = v37 - 1;
          unsigned int v39 = (v37 - 1) & ((v13 >> 4) ^ (v13 >> 9));
          uint64_t v26 = (void *)(v23 + 8 * v39);
          uint64_t v40 = *v26;
          if (*v26 == -1)
          {
            unint64_t v41 = 0;
LABEL_134:
            if (v41) {
              uint64_t v26 = v41;
            }
            if (*v26 != v13) {
              uint64_t v26 = (void *)(v23 + 8 * v37);
            }
          }
          else
          {
            unint64_t v41 = 0;
            int v42 = 1;
            while (v40 != v13)
            {
              if (v41) {
                BOOL v43 = 0;
              }
              else {
                BOOL v43 = v40 == -2;
              }
              if (v43) {
                unint64_t v41 = v26;
              }
              unsigned int v44 = v39 + v42++;
              unsigned int v39 = v44 & v38;
              uint64_t v26 = (void *)(v23 + 8 * (v44 & v38));
              uint64_t v40 = *v26;
              if (*v26 == -1) {
                goto LABEL_134;
              }
            }
          }
        }
        uint64_t v60 = v23 == v24 ? result : v4 + 208;
        if (v26 != (void *)(v23 + 8 * *v60)) {
          goto LABEL_126;
        }
        uint64_t v46 = *((void *)v4 + 67);
        uint64_t v47 = v4[137];
        if (v46 == *((void *)v4 + 66))
        {
          if (v47)
          {
            BOOL v48 = 0;
            uint64_t v61 = 8 * v47;
            uint64_t v62 = (void *)*((void *)v4 + 67);
            while (*v62 != v13)
            {
              if (*v62 == -2) {
                BOOL v48 = v62;
              }
              ++v62;
              v61 -= 8;
              if (!v61)
              {
                if (!v48) {
                  goto LABEL_100;
                }
LABEL_138:
                void *v48 = v13;
                --v4[138];
                goto LABEL_124;
              }
            }
            goto LABEL_126;
          }
LABEL_100:
          unsigned int v63 = v4[136];
          if (v47 < v63) {
            goto LABEL_101;
          }
        }
        else
        {
          unsigned int v63 = v4[136];
        }
        if (3 * v63 <= 4 * (v47 - v4[138]))
        {
          if (v63 >= 0x40) {
            v63 *= 2;
          }
          else {
            unsigned int v63 = 128;
          }
        }
        else if (v63 - v47 >= v63 >> 3)
        {
LABEL_105:
          unsigned int v64 = v63 - 1;
          unsigned int v65 = (v63 - 1) & ((v13 >> 4) ^ (v13 >> 9));
          uint64_t v54 = (void *)(v46 + 8 * v65);
          uint64_t v66 = *v54;
          if (*v54 == -1) {
            goto LABEL_116;
          }
          BOOL v56 = 0;
          int v67 = 1;
          while (v66 != v13)
          {
            if (v56) {
              BOOL v68 = 0;
            }
            else {
              BOOL v68 = v66 == -2;
            }
            if (v68) {
              BOOL v56 = v54;
            }
            unsigned int v69 = v65 + v67++;
            unsigned int v65 = v69 & v64;
            uint64_t v54 = (void *)(v46 + 8 * (v69 & v64));
            uint64_t v66 = *v54;
            if (*v54 == -1) {
              goto LABEL_117;
            }
          }
          goto LABEL_126;
        }
        llvm::SmallPtrSetImplBase::Grow(v222, v63);
        uint64_t result = v223;
        unsigned int v63 = v4[136];
        uint64_t v46 = *((void *)v4 + 67);
        goto LABEL_105;
      }
      if (v9 != 30)
      {
        switch(*(unsigned char *)(v8 + 16))
        {
          case 0x1E:
            goto LABEL_450;
          case 0x1F:
            unsigned int v174 = (*(_DWORD *)(v8 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_338;
          case 0x20:
          case 0x26:
            unsigned int v174 = (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_338;
          case 0x21:
            goto LABEL_151;
          case 0x27:
            unsigned int v174 = *(_DWORD *)(v8 + 80) + 1;
LABEL_338:
            if (v174 < 2) {
              goto LABEL_438;
            }
            goto LABEL_151;
          default:
            goto LABEL_438;
        }
      }
      if ((*(_DWORD *)(v8 + 20) & 0x7FFFFFF) != 3) {
        goto LABEL_438;
      }
LABEL_151:
      uint64_t v72 = *(void *)(v8 + 40);
      uint64_t v73 = *((void *)v4 + 162);
      uint64_t v74 = *(void *)(v73 + 48);
      uint64_t v75 = *(unsigned int *)(v73 + 64);
      if (v75)
      {
        LODWORD(v76) = ((v72 >> 4) ^ (v72 >> 9)) & (v75 - 1);
        uint64_t v77 = (uint64_t *)(v74 + 16 * v76);
        uint64_t v78 = *v77;
        if (v72 == *v77) {
          goto LABEL_158;
        }
        int v79 = 1;
        while (v78 != -4096)
        {
          int v80 = v76 + v79++;
          uint64_t v76 = v80 & (v75 - 1);
          uint64_t v78 = *(void *)(v74 + 16 * v76);
          if (v72 == v78)
          {
            uint64_t v77 = (uint64_t *)(v74 + 16 * v76);
            goto LABEL_158;
          }
        }
      }
      uint64_t v77 = (uint64_t *)(v74 + 16 * v75);
LABEL_158:
      uint64_t v81 = **(void **)(v77[1] + 8);
      if (v81)
      {
        uint64_t v224 = **(void **)(v77[1] + 8);
        uint64_t v225 = v72;
        uint64_t v82 = v81 + 40;
        for (uint64_t i = *(void *)(v81 + 48); i != v82; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v84 = i ? i - 24 : 0;
          if (*(unsigned char *)(v84 + 16) != 83) {
            break;
          }
          uint64_t v85 = *((void *)v4 + 103);
          uint64_t v86 = *((void *)v4 + 102);
          if (v85 == v86)
          {
            uint64_t v87 = *result;
            uint64_t v88 = (void *)(v85 + 8 * v87);
            if (v87)
            {
              uint64_t v89 = 0;
              uint64_t v90 = 8 * v87;
              while (*(void *)(v85 + v89) != v84)
              {
                v89 += 8;
                if (v90 == v89) {
                  goto LABEL_183;
                }
              }
              uint64_t v88 = (void *)(v85 + v89);
            }
LABEL_183:
            uint64_t v86 = *((void *)v4 + 103);
          }
          else
          {
            uint64_t v91 = *v5;
            int v92 = v91 - 1;
            unsigned int v93 = (v91 - 1) & ((v84 >> 4) ^ (v84 >> 9));
            uint64_t v88 = (void *)(v85 + 8 * v93);
            uint64_t v94 = *v88;
            if (*v88 == -1)
            {
              int v95 = 0;
LABEL_213:
              if (v95) {
                uint64_t v88 = v95;
              }
              if (*v88 != v84) {
                uint64_t v88 = (void *)(v85 + 8 * v91);
              }
            }
            else
            {
              int v95 = 0;
              int v96 = 1;
              while (v94 != v84)
              {
                if (v95) {
                  BOOL v97 = 0;
                }
                else {
                  BOOL v97 = v94 == -2;
                }
                if (v97) {
                  int v95 = v88;
                }
                unsigned int v98 = v93 + v96++;
                unsigned int v93 = v98 & v92;
                uint64_t v88 = (void *)(v85 + 8 * (v98 & v92));
                uint64_t v94 = *v88;
                if (*v88 == -1) {
                  goto LABEL_213;
                }
              }
            }
          }
          if (v85 == v86) {
            uint64_t v99 = result;
          }
          else {
            uint64_t v99 = v4 + 208;
          }
          if (v88 != (void *)(v85 + 8 * *v99)) {
            continue;
          }
          uint64_t v100 = *((void *)v4 + 67);
          uint64_t v101 = v4[137];
          if (v100 == *((void *)v4 + 66))
          {
            if (v101)
            {
              uint64_t v102 = 0;
              uint64_t v103 = 8 * v101;
              unsigned int v104 = (uint64_t *)*((void *)v4 + 67);
              while (*v104 != v84)
              {
                if (*v104 == -2) {
                  uint64_t v102 = v104;
                }
                ++v104;
                v103 -= 8;
                if (!v103)
                {
                  if (!v102) {
                    goto LABEL_196;
                  }
                  *uint64_t v102 = v84;
                  --v4[138];
                  goto LABEL_225;
                }
              }
              continue;
            }
LABEL_196:
            unsigned int v105 = v4[136];
            if (v101 < v105)
            {
              v4[137] = v101 + 1;
              *(void *)(v100 + 8 * v101) = v84;
LABEL_225:
              unint64_t v115 = *(unsigned int *)(a2 + 8);
              if (v115 >= *(unsigned int *)(a2 + 12)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)a2 + 8 * v115) = v84;
              ++*(_DWORD *)(a2 + 8);
              continue;
            }
          }
          else
          {
            unsigned int v105 = v4[136];
          }
          if (3 * v105 <= 4 * (v101 - v4[138]))
          {
            if (v105 >= 0x40) {
              v105 *= 2;
            }
            else {
              unsigned int v105 = 128;
            }
          }
          else if (v105 - v101 >= v105 >> 3)
          {
            goto LABEL_201;
          }
          llvm::SmallPtrSetImplBase::Grow(v222, v105);
          uint64_t result = v223;
          unsigned int v105 = v4[136];
          uint64_t v100 = *((void *)v4 + 67);
LABEL_201:
          unsigned int v106 = v105 - 1;
          unsigned int v107 = (v105 - 1) & ((v84 >> 4) ^ (v84 >> 9));
          unsigned int v108 = (uint64_t *)(v100 + 8 * v107);
          uint64_t v109 = *v108;
          if (*v108 == -1)
          {
            uint64_t v110 = 0;
LABEL_218:
            if (v110) {
              unint64_t v114 = v110;
            }
            else {
              unint64_t v114 = v108;
            }
            if (*v114 != v84)
            {
              if (*v114 == -2) {
                --v4[138];
              }
              else {
                ++v4[137];
              }
              uint64_t *v114 = v84;
              goto LABEL_225;
            }
          }
          else
          {
            uint64_t v110 = 0;
            int v111 = 1;
            while (v109 != v84)
            {
              if (v110) {
                BOOL v112 = 0;
              }
              else {
                BOOL v112 = v109 == -2;
              }
              if (v112) {
                uint64_t v110 = v108;
              }
              unsigned int v113 = v107 + v111++;
              unsigned int v107 = v113 & v106;
              unsigned int v108 = (uint64_t *)(v100 + 8 * (v113 & v106));
              uint64_t v109 = *v108;
              if (*v108 == -1) {
                goto LABEL_218;
              }
            }
          }
        }
        uint64_t v116 = v225;
        uint64_t v117 = v224;
        for (uint64_t j = (uint64_t)(v4 + 244); ; uint64_t j = (uint64_t)(v4 + 244))
        {
          sub_1CD16338C(v116, v117, j, (uint64_t)(v4 + 284));
          unsigned int v119 = v4[286];
          if (!v119) {
            break;
          }
          uint64_t v116 = *(void *)(*((void *)v4 + 142) + 8 * v119 - 8);
          v4[286] = v119 - 1;
          uint64_t v117 = v224;
        }
        uint64_t v120 = v225;
        while (2)
        {
          uint64_t v121 = *((void *)v4 + 123);
          uint64_t v122 = *((void *)v4 + 122);
          if (v121 == v122)
          {
            uint64_t v123 = *(unsigned int *)v6;
            char v124 = (void *)(v121 + 8 * v123);
            if (v123)
            {
              uint64_t v125 = 0;
              uint64_t v126 = 8 * v123;
              while (*(void *)(v121 + v125) != v120)
              {
                v125 += 8;
                if (v126 == v125) {
                  goto LABEL_257;
                }
              }
              char v124 = (void *)(v121 + v125);
            }
LABEL_257:
            uint64_t v122 = *((void *)v4 + 123);
          }
          else
          {
            uint64_t v127 = *v7;
            int v128 = v127 - 1;
            unsigned int v129 = (v127 - 1) & ((v120 >> 4) ^ (v120 >> 9));
            char v124 = (void *)(v121 + 8 * v129);
            uint64_t v130 = *v124;
            if (*v124 == -1)
            {
              uint64_t v131 = 0;
LABEL_325:
              if (v131) {
                char v124 = v131;
              }
              if (*v124 != v120) {
                char v124 = (void *)(v121 + 8 * v127);
              }
            }
            else
            {
              uint64_t v131 = 0;
              int v132 = 1;
              while (v130 != v120)
              {
                if (v131) {
                  BOOL v133 = 0;
                }
                else {
                  BOOL v133 = v130 == -2;
                }
                if (v133) {
                  uint64_t v131 = v124;
                }
                unsigned int v134 = v129 + v132++;
                unsigned int v129 = v134 & v128;
                char v124 = (void *)(v121 + 8 * (v134 & v128));
                uint64_t v130 = *v124;
                if (*v124 == -1) {
                  goto LABEL_325;
                }
              }
            }
          }
          if (v121 == v122) {
            unint64_t v135 = v4 + 249;
          }
          else {
            unint64_t v135 = v4 + 248;
          }
          if (v124 == (void *)(v121 + 8 * *v135))
          {
            uint64_t v162 = *((void *)v4 + 161);
            uint64_t v161 = *(void *)(v162 + 24);
            LODWORD(v162) = *(_DWORD *)(v162 + 40);
            break;
          }
          uint64_t v136 = *(void *)(v120 + 48);
          while (2)
          {
            if (v136 != v120 + 40)
            {
              if (v136) {
                uint64_t v137 = v136 - 24;
              }
              else {
                uint64_t v137 = 0;
              }
              if (llvm::Instruction::mayHaveSideEffects((llvm::Instruction *)v137)) {
                goto LABEL_268;
              }
              int v156 = *(_DWORD *)(v137 + 20);
              if ((v156 & 0x40000000) != 0)
              {
                uint64_t v158 = *(void *)(v137 - 8);
                uint64_t v157 = v156 & 0x7FFFFFF;
                if (v157) {
                  goto LABEL_308;
                }
              }
              else
              {
                uint64_t v157 = v156 & 0x7FFFFFF;
                uint64_t v158 = v137 - 32 * v157;
                if (!v157) {
                  goto LABEL_314;
                }
LABEL_308:
                uint64_t v159 = 32 * v157;
                while (*(unsigned __int8 *)(*(void *)v158 + 16) < 0x15u)
                {
                  v158 += 32;
                  v159 -= 32;
                  if (!v159) {
                    goto LABEL_314;
                  }
                }
LABEL_268:
                uint64_t v138 = (void (**)(void *))&unk_1F2648108;
                v227[0] = &unk_1F2648108;
                v227[1] = v4;
                v227[2] = a2;
                unint64_t v228 = v227;
                uint64_t v139 = *(void *)(v137 + 8);
                if (v139)
                {
                  do
                  {
                    uint64_t v140 = *(void *)(*(void *)(v139 + 24) + 40);
                    uint64_t v141 = *((void *)v4 + 123);
                    uint64_t v142 = *((void *)v4 + 122);
                    if (v141 == v142)
                    {
                      uint64_t v143 = *(unsigned int *)v6;
                      uint64_t v144 = (void *)(v141 + 8 * v143);
                      if (v143)
                      {
                        uint64_t v145 = 0;
                        uint64_t v146 = 8 * v143;
                        while (*(void *)(v141 + v145) != v140)
                        {
                          v145 += 8;
                          if (v146 == v145) {
                            goto LABEL_287;
                          }
                        }
                        uint64_t v144 = (void *)(v141 + v145);
                      }
LABEL_287:
                      uint64_t v142 = *((void *)v4 + 123);
                    }
                    else
                    {
                      uint64_t v147 = *v7;
                      int v148 = v147 - 1;
                      unsigned int v149 = (v147 - 1) & ((v140 >> 4) ^ (v140 >> 9));
                      uint64_t v144 = (void *)(v141 + 8 * v149);
                      uint64_t v150 = *v144;
                      if (*v144 == -1)
                      {
                        uint64_t v151 = 0;
LABEL_295:
                        if (v151) {
                          uint64_t v144 = v151;
                        }
                        if (*v144 != v140) {
                          uint64_t v144 = (void *)(v141 + 8 * v147);
                        }
                      }
                      else
                      {
                        uint64_t v151 = 0;
                        int v152 = 1;
                        while (v150 != v140)
                        {
                          if (v151) {
                            BOOL v153 = 0;
                          }
                          else {
                            BOOL v153 = v150 == -2;
                          }
                          if (v153) {
                            uint64_t v151 = v144;
                          }
                          unsigned int v154 = v149 + v152++;
                          unsigned int v149 = v154 & v148;
                          uint64_t v144 = (void *)(v141 + 8 * (v154 & v148));
                          uint64_t v150 = *v144;
                          if (*v144 == -1) {
                            goto LABEL_295;
                          }
                        }
                      }
                    }
                    if (v141 == v142) {
                      int v155 = v4 + 249;
                    }
                    else {
                      int v155 = v4 + 248;
                    }
                    if (v144 == (void *)(v141 + 8 * *v155))
                    {
                      uint64_t v226 = *(void *)(v139 + 24);
                      if (!v228)
                      {
                        sub_1CB920400();
LABEL_450:
                        __break(1u);
                        JUMPOUT(0x1CD16491CLL);
                      }
                      (*(void (**)(void *, uint64_t *))(*v228 + 48))(v228, &v226);
                    }
                    uint64_t v139 = *(void *)(v139 + 8);
                  }
                  while (v139);
                  if (v228 != v227)
                  {
                    if (v228) {
                      (*(void (**)(void))(*v228 + 40))();
                    }
                    goto LABEL_314;
                  }
                  uint64_t v138 = (void (**)(void *))v227[0];
                }
                v138[4](v227);
              }
LABEL_314:
              uint64_t v136 = *(void *)(v136 + 8);
              continue;
            }
            break;
          }
          uint64_t v160 = *((void *)v4 + 161);
          uint64_t v161 = *(void *)(v160 + 24);
          uint64_t v162 = *(unsigned int *)(v160 + 40);
          if (!v162) {
            goto LABEL_321;
          }
          LODWORD(v163) = (v162 - 1) & ((v120 >> 4) ^ (v120 >> 9));
          uint64_t v164 = (uint64_t *)(v161 + 16 * v163);
          uint64_t v165 = *v164;
          if (v120 != *v164)
          {
            int v166 = 1;
            while (v165 != -4096)
            {
              int v167 = v163 + v166++;
              uint64_t v163 = v167 & (v162 - 1);
              uint64_t v165 = *(void *)(v161 + 16 * v163);
              if (v120 == v165)
              {
                uint64_t v164 = (uint64_t *)(v161 + 16 * v163);
                goto LABEL_322;
              }
            }
LABEL_321:
            uint64_t v164 = (uint64_t *)(v161 + 16 * v162);
          }
LABEL_322:
          uint64_t v168 = *(uint64_t **)(v164[1] + 8);
          if (v168)
          {
            uint64_t v120 = *v168;
            continue;
          }
          break;
        }
        if (v162)
        {
          LODWORD(v169) = (v162 - 1) & ((v224 >> 4) ^ (v224 >> 9));
          uint64_t v170 = (uint64_t *)(v161 + 16 * v169);
          uint64_t v171 = *v170;
          if (v224 != *v170)
          {
            int v172 = 1;
            while (v171 != -4096)
            {
              int v173 = v169 + v172++;
              uint64_t v169 = v173 & (v162 - 1);
              uint64_t v171 = *(void *)(v161 + 16 * v169);
              if (v224 == v171)
              {
                uint64_t v170 = (uint64_t *)(v161 + 16 * v169);
                goto LABEL_341;
              }
            }
            goto LABEL_340;
          }
        }
        else
        {
LABEL_340:
          uint64_t v170 = (uint64_t *)(v161 + 16 * v162);
        }
LABEL_341:
        int v175 = (char *)*((void *)v4 + 123);
        unsigned int v176 = (char *)*((void *)v4 + 122);
        if (**(void **)(v170[1] + 8) != v225)
        {
          if (v175 == v176) {
            unsigned int v177 = v4 + 249;
          }
          else {
            unsigned int v177 = v4 + 248;
          }
          uint64_t v178 = *v177;
          unsigned int v179 = (unint64_t *)*((void *)v4 + 123);
          if (v178)
          {
            uint64_t v180 = 0;
            while (*(void *)&v175[v180] >= 0xFFFFFFFFFFFFFFFELL)
            {
              v180 += 8;
              if (8 * v178 == v180) {
                goto LABEL_435;
              }
            }
            unsigned int v179 = (unint64_t *)&v175[v180];
          }
          uint64_t v181 = (unint64_t *)&v175[8 * v178];
          if (v179 != v181)
          {
            unint64_t v182 = *v179;
            unint64_t v183 = v223;
LABEL_353:
            if (*(void *)(v182 + 40) != v182 + 40)
            {
              for (uint64_t k = *(void *)(v182 + 48); ; uint64_t k = *(void *)(v185 + 32))
              {
                uint64_t v185 = k - 24;
                if (k) {
                  uint64_t v186 = k - 24;
                }
                else {
                  uint64_t v186 = 0;
                }
                if (!k || *(unsigned char *)(v186 + 16) != 83) {
                  break;
                }
                uint64_t v187 = *((void *)v4 + 103);
                uint64_t v188 = *((void *)v4 + 102);
                if (v187 == v188)
                {
                  uint64_t v189 = *v183;
                  unint64_t v190 = (void *)(v187 + 8 * v189);
                  if (v189)
                  {
                    uint64_t v191 = 0;
                    uint64_t v192 = 8 * v189;
                    while (*(void *)(v187 + v191) != v185)
                    {
                      v191 += 8;
                      if (v192 == v191) {
                        goto LABEL_378;
                      }
                    }
                    unint64_t v190 = (void *)(v187 + v191);
                  }
LABEL_378:
                  uint64_t v188 = *((void *)v4 + 103);
                }
                else
                {
                  uint64_t v193 = *v5;
                  int v194 = v193 - 1;
                  unsigned int v195 = (v193 - 1) & ((v185 >> 4) ^ (v185 >> 9));
                  unint64_t v190 = (void *)(v187 + 8 * v195);
                  uint64_t v196 = *v190;
                  if (*v190 == -1)
                  {
                    size_t v197 = 0;
LABEL_408:
                    if (v197) {
                      unint64_t v190 = v197;
                    }
                    if (*v190 != v185) {
                      unint64_t v190 = (void *)(v187 + 8 * v193);
                    }
                  }
                  else
                  {
                    size_t v197 = 0;
                    int v198 = 1;
                    while (v196 != v185)
                    {
                      if (v197) {
                        BOOL v199 = 0;
                      }
                      else {
                        BOOL v199 = v196 == -2;
                      }
                      if (v199) {
                        size_t v197 = v190;
                      }
                      unsigned int v200 = v195 + v198++;
                      unsigned int v195 = v200 & v194;
                      unint64_t v190 = (void *)(v187 + 8 * (v200 & v194));
                      uint64_t v196 = *v190;
                      if (*v190 == -1) {
                        goto LABEL_408;
                      }
                    }
                  }
                }
                if (v187 == v188) {
                  uint64_t v201 = v183;
                }
                else {
                  uint64_t v201 = v4 + 208;
                }
                if (v190 != (void *)(v187 + 8 * *v201)) {
                  continue;
                }
                uint64_t v202 = *((void *)v4 + 67);
                uint64_t v203 = v4[137];
                if (v202 == *((void *)v4 + 66))
                {
                  if (v203)
                  {
                    long long v204 = 0;
                    uint64_t v205 = 8 * v203;
                    uint64_t v206 = (void *)*((void *)v4 + 67);
                    while (*v206 != v185)
                    {
                      if (*v206 == -2) {
                        long long v204 = v206;
                      }
                      ++v206;
                      v205 -= 8;
                      if (!v205)
                      {
                        if (!v204) {
                          goto LABEL_391;
                        }
                        *long long v204 = v185;
                        --v4[138];
                        goto LABEL_420;
                      }
                    }
                    continue;
                  }
LABEL_391:
                  unsigned int v207 = v4[136];
                  if (v203 < v207)
                  {
                    v4[137] = v203 + 1;
                    *(void *)(v202 + 8 * v203) = v185;
LABEL_420:
                    unint64_t v217 = *(unsigned int *)(a2 + 8);
                    if (v217 >= *(unsigned int *)(a2 + 12)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *(void *)(*(void *)a2 + 8 * v217) = v185;
                    ++*(_DWORD *)(a2 + 8);
                    continue;
                  }
                }
                else
                {
                  unsigned int v207 = v4[136];
                }
                if (3 * v207 <= 4 * (v203 - v4[138]))
                {
                  if (v207 >= 0x40) {
                    v207 *= 2;
                  }
                  else {
                    unsigned int v207 = 128;
                  }
                }
                else if (v207 - v203 >= v207 >> 3)
                {
                  goto LABEL_396;
                }
                llvm::SmallPtrSetImplBase::Grow(v222, v207);
                unint64_t v183 = v223;
                unsigned int v207 = v4[136];
                uint64_t v202 = *((void *)v4 + 67);
LABEL_396:
                unsigned int v208 = v207 - 1;
                unsigned int v209 = (v207 - 1) & ((v185 >> 4) ^ (v185 >> 9));
                uint64_t v210 = (void *)(v202 + 8 * v209);
                uint64_t v211 = *v210;
                if (*v210 == -1)
                {
                  uint64_t v212 = 0;
LABEL_413:
                  if (v212) {
                    uint64_t v216 = v212;
                  }
                  else {
                    uint64_t v216 = v210;
                  }
                  if (*v216 != v185)
                  {
                    if (*v216 == -2) {
                      --v4[138];
                    }
                    else {
                      ++v4[137];
                    }
                    *uint64_t v216 = v185;
                    goto LABEL_420;
                  }
                }
                else
                {
                  uint64_t v212 = 0;
                  int v213 = 1;
                  while (v211 != v185)
                  {
                    if (v212) {
                      BOOL v214 = 0;
                    }
                    else {
                      BOOL v214 = v211 == -2;
                    }
                    if (v214) {
                      uint64_t v212 = v210;
                    }
                    unsigned int v215 = v209 + v213++;
                    unsigned int v209 = v215 & v208;
                    uint64_t v210 = (void *)(v202 + 8 * (v215 & v208));
                    uint64_t v211 = *v210;
                    if (*v210 == -1) {
                      goto LABEL_413;
                    }
                  }
                }
              }
            }
            unint64_t v218 = v179 + 1;
            while (v218 != v181)
            {
              unint64_t v219 = *v218++;
              unint64_t v182 = v219;
              if (v219 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                unsigned int v179 = v218 - 1;
                goto LABEL_353;
              }
            }
            int v175 = (char *)*((void *)v4 + 123);
            unsigned int v176 = (char *)*((void *)v4 + 122);
          }
        }
LABEL_435:
        if (v175 != v176)
        {
          uint64_t v220 = v4[248];
          if (v220 >= 0x21 && 4 * (v4[249] - v4[250]) < v220)
          {
            llvm::SmallPtrSetImplBase::shrink_and_clear((void **)v4 + 122);
            goto LABEL_437;
          }
          memset(v175, 255, 8 * v220);
        }
        *uint64_t v6 = 0;
LABEL_437:
        uint64_t result = v223;
      }
LABEL_438:
      unsigned int v2 = *(_DWORD *)(a2 + 8);
    }
    while (v2);
  }
  return result;
}

void llvm::DivergenceTracker::print(llvm::DivergenceTracker *this, llvm::raw_ostream *a2)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 160);
  if ((*(_WORD *)(v4 + 18) & 1) == 0)
  {
    uint64_t v5 = *(llvm::Value **)(v4 + 88);
LABEL_3:
    uint64_t v6 = v5;
    goto LABEL_4;
  }
  llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 160));
  uint64_t v5 = *(llvm::Value **)(v4 + 88);
  if ((*(_WORD *)(v4 + 18) & 1) == 0) {
    goto LABEL_3;
  }
  llvm::Function::BuildLazyArguments((llvm::Function *)v4);
  uint64_t v6 = *(llvm::Value **)(v4 + 88);
LABEL_4:
  for (i = (llvm::Value *)((char *)v6 + 40 * *(void *)(v4 + 96)); v5 != i; uint64_t v5 = (llvm::Value *)((char *)v5 + 40))
  {
    uint64_t v8 = *((void *)this + 67);
    uint64_t v9 = *((void *)this + 66);
    if (v8 == v9)
    {
      uint64_t v10 = *((unsigned int *)this + 137);
      uint64_t v11 = (llvm::Value **)(v8 + 8 * v10);
      if (v10)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 8 * v10;
        while (*(llvm::Value **)(v8 + v12) != v5)
        {
          v12 += 8;
          if (v13 == v12) {
            goto LABEL_23;
          }
        }
        uint64_t v11 = (llvm::Value **)(v8 + v12);
      }
LABEL_23:
      uint64_t v9 = *((void *)this + 67);
    }
    else
    {
      uint64_t v14 = *((unsigned int *)this + 136);
      int v15 = v14 - 1;
      unsigned int v16 = (v14 - 1) & ((v5 >> 4) ^ (v5 >> 9));
      uint64_t v11 = (llvm::Value **)(v8 + 8 * v16);
      uint64_t v17 = *v11;
      if (*v11 == (llvm::Value *)-1)
      {
        uint64_t v18 = 0;
LABEL_37:
        if (v18) {
          uint64_t v11 = v18;
        }
        if (*v11 != v5) {
          uint64_t v11 = (llvm::Value **)(v8 + 8 * v14);
        }
      }
      else
      {
        uint64_t v18 = 0;
        int v19 = 1;
        while (v17 != v5)
        {
          if (v18) {
            BOOL v20 = 0;
          }
          else {
            BOOL v20 = v17 == (llvm::Value *)-2;
          }
          if (v20) {
            uint64_t v18 = v11;
          }
          unsigned int v21 = v16 + v19++;
          unsigned int v16 = v21 & v15;
          uint64_t v11 = (llvm::Value **)(v8 + 8 * (v21 & v15));
          uint64_t v17 = *v11;
          if (*v11 == (llvm::Value *)-1) {
            goto LABEL_37;
          }
        }
      }
    }
    if (v8 == v9) {
      uint64_t v22 = (char *)this + 548;
    }
    else {
      uint64_t v22 = (char *)this + 544;
    }
    if (v11 == (llvm::Value **)(v8 + 8 * *(unsigned int *)v22)) {
      uint64_t v23 = "           ";
    }
    else {
      uint64_t v23 = "DIVERGENT: ";
    }
    uint64_t v24 = *((void *)a2 + 4);
    if ((unint64_t)(*((void *)a2 + 3) - v24) > 0xA)
    {
      *(void *)uint64_t v24 = *(void *)v23;
      *(_DWORD *)(v24 + 7) = *(_DWORD *)(v23 + 7);
      *((void *)a2 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(a2, v23, 0xBuLL);
    }
    llvm::Value::print(v5, a2, 0);
    uint64_t v25 = (unsigned char *)*((void *)a2 + 4);
    if (*((unsigned char **)a2 + 3) == v25)
    {
      llvm::raw_ostream::write(a2, "\n", 1uLL);
    }
    else
    {
      *uint64_t v25 = 10;
      ++*((void *)a2 + 4);
    }
  }
  uint64_t v26 = *((void *)this + 160);
  uint64_t v27 = *(void *)(v26 + 80);
  uint64_t v69 = v26 + 72;
  if (v27 != v26 + 72)
  {
    uint64_t v28 = &v74;
    uint64_t v29 = &v71;
    int v30 = &v80;
    while (1)
    {
      if (v27) {
        unsigned int v31 = (llvm::BasicBlock *)(v27 - 24);
      }
      else {
        unsigned int v31 = 0;
      }
      uint64_t v32 = *((void *)a2 + 4);
      if ((unint64_t)(*((void *)a2 + 3) - v32) > 0xB)
      {
        *(_DWORD *)(v32 + 8) = 538976288;
        *(void *)uint64_t v32 = *(void *)"\n           ";
        *((void *)a2 + 4) += 12;
      }
      else
      {
        llvm::raw_ostream::write(a2, "\n           ", 0xCuLL);
      }
      if ((*((unsigned char *)v31 + 23) & 0x10) == 0)
      {
        BOOL v48 = (_WORD *)*((void *)a2 + 4);
        goto LABEL_63;
      }
      uint64_t v33 = ***(void ***)v31;
      uint64_t v34 = *(void *)(v33 + 152);
      uint64_t v35 = *(unsigned int *)(v33 + 168);
      if (!v35) {
        goto LABEL_57;
      }
      LODWORD(v36) = (v35 - 1) & ((v31 >> 4) ^ (v31 >> 9));
      uint64_t v37 = (llvm::BasicBlock **)(v34 + 16 * v36);
      int v38 = *v37;
      if (*v37 != v31) {
        break;
      }
LABEL_58:
      unint64_t v41 = v30;
      int v42 = v29;
      BOOL v43 = v28;
      unsigned int v44 = (size_t *)v37[1];
      size_t v47 = *v44;
      uint64_t v45 = v44 + 2;
      size_t v46 = v47;
      BOOL v48 = (_WORD *)*((void *)a2 + 4);
      if (v47 <= *((void *)a2 + 3) - (void)v48)
      {
        if (v46)
        {
          memcpy(v48, v45, v46);
          BOOL v48 = (_WORD *)(*((void *)a2 + 4) + v46);
          *((void *)a2 + 4) = v48;
        }
      }
      else
      {
        llvm::raw_ostream::write(a2, (const char *)v45, v46);
        BOOL v48 = (_WORD *)*((void *)a2 + 4);
      }
      uint64_t v28 = v43;
      uint64_t v29 = v42;
      int v30 = v41;
LABEL_63:
      if (*((void *)a2 + 3) - (void)v48 > 1uLL)
      {
        _WORD *v48 = 2618;
        *((void *)a2 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(a2, ":\n", 2uLL);
      }
      llvm::BasicBlock::instructionsWithoutDebug(v31, 1, &v76);
      long long v73 = v76;
      if (v78)
      {
        if (v78 == v77)
        {
          uint64_t v75 = (uint64_t)v28;
          (*(void (**)(void *, uint64_t *))(v77[0] + 24))(v77, v28);
        }
        else
        {
          uint64_t v75 = (*(uint64_t (**)(void))(*v78 + 16))();
        }
      }
      else
      {
        uint64_t v75 = 0;
      }
      uint64_t v70 = v79;
      if (v81)
      {
        if (v81 == v30)
        {
          uint64_t v72 = (uint64_t)v29;
          (*(void (**)(uint64_t *, uint64_t *))(v80 + 24))(v30, v29);
        }
        else
        {
          uint64_t v72 = (*(uint64_t (**)(void))(*v81 + 16))();
        }
      }
      else
      {
        uint64_t v72 = 0;
      }
      while ((void)v73 != v70)
      {
        if ((void)v73) {
          uint64_t v49 = (llvm::Value *)(v73 - 24);
        }
        else {
          uint64_t v49 = 0;
        }
        uint64_t v50 = *((void *)this + 67);
        uint64_t v51 = *((void *)this + 66);
        if (v50 == v51)
        {
          uint64_t v52 = *((unsigned int *)this + 137);
          unsigned int v53 = (llvm::Value **)(v50 + 8 * v52);
          if (v52)
          {
            uint64_t v54 = 0;
            uint64_t v55 = 8 * v52;
            while (*(llvm::Value **)(v50 + v54) != v49)
            {
              v54 += 8;
              if (v55 == v54) {
                goto LABEL_97;
              }
            }
            unsigned int v53 = (llvm::Value **)(v50 + v54);
          }
LABEL_97:
          uint64_t v51 = *((void *)this + 67);
        }
        else
        {
          uint64_t v56 = *((unsigned int *)this + 136);
          int v57 = v56 - 1;
          unsigned int v58 = (v56 - 1) & ((v49 >> 4) ^ (v49 >> 9));
          unsigned int v53 = (llvm::Value **)(v50 + 8 * v58);
          unsigned int v59 = *v53;
          if (*v53 == (llvm::Value *)-1)
          {
            uint64_t v60 = 0;
LABEL_110:
            if (v60) {
              unsigned int v53 = v60;
            }
            if (*v53 != v49) {
              unsigned int v53 = (llvm::Value **)(v50 + 8 * v56);
            }
          }
          else
          {
            uint64_t v60 = 0;
            int v61 = 1;
            while (v59 != v49)
            {
              if (v60) {
                BOOL v62 = 0;
              }
              else {
                BOOL v62 = v59 == (llvm::Value *)-2;
              }
              if (v62) {
                uint64_t v60 = v53;
              }
              unsigned int v63 = v58 + v61++;
              unsigned int v58 = v63 & v57;
              unsigned int v53 = (llvm::Value **)(v50 + 8 * (v63 & v57));
              unsigned int v59 = *v53;
              if (*v53 == (llvm::Value *)-1) {
                goto LABEL_110;
              }
            }
          }
        }
        if (v50 == v51) {
          unsigned int v64 = (char *)this + 548;
        }
        else {
          unsigned int v64 = (char *)this + 544;
        }
        if (v53 == (llvm::Value **)(v50 + 8 * *(unsigned int *)v64)) {
          unsigned int v65 = "               ";
        }
        else {
          unsigned int v65 = "DIVERGENT:     ";
        }
        uint64_t v66 = (void *)*((void *)a2 + 4);
        if (*((void *)a2 + 3) - (void)v66 > 0xEuLL)
        {
          *uint64_t v66 = *(void *)v65;
          *(void *)((char *)v66 + 7) = *(void *)(v65 + 7);
          *((void *)a2 + 4) += 15;
        }
        else
        {
          llvm::raw_ostream::write(a2, v65, 0xFuLL);
        }
        llvm::Value::print(v49, a2, 0);
        int v67 = (unsigned char *)*((void *)a2 + 4);
        if (*((unsigned char **)a2 + 3) == v67)
        {
          llvm::raw_ostream::write(a2, "\n", 1uLL);
        }
        else
        {
          unsigned char *v67 = 10;
          ++*((void *)a2 + 4);
        }
        *(void *)&long long v73 = *(void *)(v73 + 8);
        sub_1CD48427C((uint64_t)&v73);
      }
      if ((uint64_t *)v72 == v29)
      {
        (*(void (**)(uint64_t *))(v71 + 32))(v29);
      }
      else if (v72)
      {
        (*(void (**)(void))(*(void *)v72 + 40))();
      }
      if ((uint64_t *)v75 == v28)
      {
        (*(void (**)(uint64_t *))(v74 + 32))(v28);
      }
      else if (v75)
      {
        (*(void (**)(void))(*(void *)v75 + 40))();
      }
      sub_1CD484020(&v76);
      uint64_t v27 = *(void *)(v27 + 8);
      if (v27 == v69) {
        goto LABEL_129;
      }
    }
    int v39 = 1;
    while (v38 != (llvm::BasicBlock *)-4096)
    {
      int v40 = v36 + v39++;
      uint64_t v36 = v40 & (v35 - 1);
      int v38 = *(llvm::BasicBlock **)(v34 + 16 * v36);
      if (v38 == v31)
      {
        uint64_t v37 = (llvm::BasicBlock **)(v34 + 16 * v36);
        goto LABEL_58;
      }
    }
LABEL_57:
    uint64_t v37 = (llvm::BasicBlock **)(v34 + 16 * v35);
    goto LABEL_58;
  }
LABEL_129:
  BOOL v68 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v68)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
  }
  else
  {
    unsigned char *v68 = 10;
    ++*((void *)a2 + 4);
  }
}

void sub_1CD165124()
{
}

__n128 sub_1CD165138(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x18uLL);
  *(void *)unsigned int v2 = &unk_1F2648108;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CD165184(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2648108;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CD1651B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v4 + 824);
  uint64_t v6 = *(void *)(v4 + 816);
  if (v5 == v6)
  {
    uint64_t v7 = *(unsigned int *)(v4 + 836);
    uint64_t v8 = (void *)(v5 + 8 * v7);
    if (v7)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 8 * v7;
      while (*(void *)(v5 + v9) != v3)
      {
        v9 += 8;
        if (v10 == v9) {
          goto LABEL_19;
        }
      }
      uint64_t v8 = (void *)(v5 + v9);
    }
LABEL_19:
    uint64_t v6 = *(void *)(v4 + 824);
  }
  else
  {
    uint64_t v11 = *(unsigned int *)(v4 + 832);
    int v12 = v11 - 1;
    unsigned int v13 = (v11 - 1) & ((v3 >> 4) ^ (v3 >> 9));
    uint64_t v8 = (void *)(v5 + 8 * v13);
    uint64_t v14 = *v8;
    if (*v8 == -1)
    {
      int v15 = 0;
LABEL_48:
      if (v15) {
        uint64_t v8 = v15;
      }
      if (*v8 != v3) {
        uint64_t v8 = (void *)(v5 + 8 * v11);
      }
    }
    else
    {
      int v15 = 0;
      int v16 = 1;
      while (v14 != v3)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v14 == -2;
        }
        if (v17) {
          int v15 = v8;
        }
        unsigned int v18 = v13 + v16++;
        unsigned int v13 = v18 & v12;
        uint64_t v8 = (void *)(v5 + 8 * (v18 & v12));
        uint64_t v14 = *v8;
        if (*v8 == -1) {
          goto LABEL_48;
        }
      }
    }
  }
  BOOL v17 = v5 == v6;
  uint64_t v19 = 832;
  if (v17) {
    uint64_t v19 = 836;
  }
  if (v8 != (void *)(v5 + 8 * *(unsigned int *)(v4 + v19))) {
    return;
  }
  uint64_t v20 = *(void *)(v4 + 536);
  uint64_t v21 = *(unsigned int *)(v4 + 548);
  if (v20 == *(void *)(v4 + 528))
  {
    if (v21)
    {
      uint64_t v22 = 0;
      uint64_t v23 = 8 * v21;
      uint64_t v24 = *(void **)(v4 + 536);
      while (*v24 != v3)
      {
        if (*v24 == -2) {
          uint64_t v22 = v24;
        }
        ++v24;
        v23 -= 8;
        if (!v23)
        {
          if (!v22) {
            goto LABEL_31;
          }
          *uint64_t v22 = v3;
          --*(_DWORD *)(v4 + 552);
          goto LABEL_60;
        }
      }
      return;
    }
LABEL_31:
    unsigned int v25 = *(_DWORD *)(v4 + 544);
    if (v21 < v25)
    {
      *(_DWORD *)(v4 + 548) = v21 + 1;
      *(void *)(v20 + 8 * v21) = v3;
LABEL_60:
      uint64_t v35 = *(void *)(a1 + 16);
      unsigned int v36 = *(_DWORD *)(v35 + 8);
      if (v36 >= *(_DWORD *)(v35 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)v35 + 8 * v36) = v3;
      ++*(_DWORD *)(v35 + 8);
      return;
    }
  }
  else
  {
    unsigned int v25 = *(_DWORD *)(v4 + 544);
  }
  if (3 * v25 <= 4 * ((int)v21 - *(_DWORD *)(v4 + 552)))
  {
    if (v25 >= 0x40) {
      v25 *= 2;
    }
    else {
      unsigned int v25 = 128;
    }
  }
  else if (v25 - v21 >= v25 >> 3)
  {
    goto LABEL_36;
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v4 + 528), v25);
  unsigned int v25 = *(_DWORD *)(v4 + 544);
  uint64_t v20 = *(void *)(v4 + 536);
LABEL_36:
  unsigned int v26 = v25 - 1;
  unsigned int v27 = (v25 - 1) & ((v3 >> 4) ^ (v3 >> 9));
  uint64_t v28 = (void *)(v20 + 8 * v27);
  uint64_t v29 = *v28;
  if (*v28 != -1)
  {
    int v30 = 0;
    int v31 = 1;
    while (v29 != v3)
    {
      if (v30) {
        BOOL v32 = 0;
      }
      else {
        BOOL v32 = v29 == -2;
      }
      if (v32) {
        int v30 = v28;
      }
      unsigned int v33 = v27 + v31++;
      unsigned int v27 = v33 & v26;
      uint64_t v28 = (void *)(v20 + 8 * (v33 & v26));
      uint64_t v29 = *v28;
      if (*v28 == -1) {
        goto LABEL_53;
      }
    }
    return;
  }
  int v30 = 0;
LABEL_53:
  if (v30) {
    uint64_t v34 = v30;
  }
  else {
    uint64_t v34 = v28;
  }
  if (*v34 != v3)
  {
    if (*v34 == -2) {
      --*(_DWORD *)(v4 + 552);
    }
    else {
      ++*(_DWORD *)(v4 + 548);
    }
    *uint64_t v34 = v3;
    goto LABEL_60;
  }
}

void sub_1CD165470(uint64_t a1)
{
}

void sub_1CD165510(uint64_t a1)
{
}

uint64_t sub_1CD1655B0(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCFC400;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2648150;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFC408, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CD165470;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCFC408, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CD165660(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCFC401;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F26481F0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFC410, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CD165510;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCFC410, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

BOOL sub_1CD165710(unsigned __int8 **a1, int a2)
{
  if (a2) {
    uint64_t v4 = 33;
  }
  else {
    uint64_t v4 = 25;
  }
  uint64_t v5 = 24;
  if (a2) {
    uint64_t v5 = 32;
  }
  __uint64_t n = v4;
  size_t v131 = v5;
  if (a2) {
    uint64_t v6 = "instrument-function-entry-inlined";
  }
  else {
    uint64_t v6 = "instrument-function-entry";
  }
  uint64_t v7 = a1[14];
  BOOL v133 = (uint64_t *)(a1 + 14);
  if (!v7) {
    goto LABEL_25;
  }
  if (!*((_DWORD *)v7 + 2)) {
    goto LABEL_25;
  }
  uint64_t v8 = (void *)*((void *)v7 + 5);
  if (!v8) {
    goto LABEL_25;
  }
  int v9 = *((_DWORD *)v8 + 10);
  if (!v9) {
    goto LABEL_25;
  }
  uint64_t v10 = v8[3];
  int v11 = sub_1CD0B03C8(v6, (uint64_t)&v6[v4]);
  unsigned int v12 = v9 - 1;
  for (int i = 1; ; ++i)
  {
    int v14 = v11 & v12;
    uint64_t v15 = v10 + 24 * (v11 & v12);
    int v16 = *(const void **)v15;
    if (*(void *)v15 == -1)
    {
      if (v6 == (char *)-1) {
        goto LABEL_23;
      }
      goto LABEL_16;
    }
    if (v16 != (const void *)-2) {
      break;
    }
    if (v6 == (char *)-2) {
      goto LABEL_23;
    }
LABEL_16:
    if (v16 == (const void *)-1) {
      goto LABEL_25;
    }
    int v11 = i + v14;
  }
  if (__n != *(void *)(v15 + 8) || memcmp(v6, *(const void **)v15, __n)) {
    goto LABEL_16;
  }
LABEL_23:
  uint64_t v17 = *(void *)(v15 + 16);
  if (v17)
  {
    uint64_t v18 = *(unsigned int *)(v17 + 16);
    uint64_t v19 = v17 + *(unsigned int *)(v17 + 12) + 25;
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v19 = 0;
  uint64_t v18 = 0;
LABEL_26:
  uint64_t v20 = "instrument-function-exit";
  if (a2) {
    uint64_t v20 = "instrument-function-exit-inlined";
  }
  int v132 = (char *)v20;
  uint64_t v21 = *v133;
  if (!*v133 || !*(_DWORD *)(v21 + 8) || (uint64_t v22 = *(void *)(v21 + 40)) == 0 || (v23 = *(_DWORD *)(v22 + 40)) == 0)
  {
    uint64_t v35 = 0;
    uint64_t v34 = 0;
    goto LABEL_47;
  }
  uint64_t v24 = v6;
  uint64_t v25 = v19;
  uint64_t v26 = *(void *)(v22 + 24);
  int v27 = sub_1CD0B03C8(v132, (uint64_t)&v132[v131]);
  unsigned int v28 = v23 - 1;
  int v29 = 1;
  while (2)
  {
    int v30 = v27 & v28;
    uint64_t v31 = v26 + 24 * (v27 & v28);
    BOOL v32 = *(const void **)v31;
    if (*(void *)v31 == -1)
    {
      if (v132 == (char *)-1) {
        break;
      }
      goto LABEL_35;
    }
    if (v32 == (const void *)-2)
    {
      if (v132 == (char *)-2) {
        break;
      }
      goto LABEL_35;
    }
    if (v131 != *(void *)(v31 + 8) || memcmp(v132, *(const void **)v31, v131))
    {
LABEL_35:
      if (v32 == (const void *)-1)
      {
        uint64_t v35 = 0;
        uint64_t v34 = 0;
        uint64_t v19 = v25;
        goto LABEL_45;
      }
      int v27 = v29 + v30;
      ++v29;
      continue;
    }
    break;
  }
  uint64_t v33 = *(void *)(v31 + 16);
  uint64_t v19 = v25;
  if (v33)
  {
    uint64_t v34 = *(unsigned int *)(v33 + 16);
    uint64_t v35 = v33 + *(unsigned int *)(v33 + 12) + 25;
  }
  else
  {
    uint64_t v35 = 0;
    uint64_t v34 = 0;
  }
LABEL_45:
  uint64_t v6 = v24;
LABEL_47:
  BOOL v36 = v18 != 0;
  if (v18)
  {
    uint64_t v138 = 0;
    if ((*((unsigned char *)a1 + 23) & 0x20) != 0)
    {
      uint64_t v37 = **(void **)*a1;
      uint64_t v139 = a1;
      int v38 = *(_DWORD *)(v37 + 2496);
      if (!v38)
      {
        uint64_t v122 = 0;
        goto LABEL_251;
      }
      uint64_t v39 = *(void *)(v37 + 2480);
      int v40 = v38 - 1;
      unsigned int v41 = v40 & ((a1 >> 4) ^ (a1 >> 9));
      int v42 = (void *)(v39 + 40 * v41);
      BOOL v43 = (void ***)*v42;
      if ((unsigned __int8 **)*v42 != a1)
      {
        unsigned int v44 = 0;
        int v45 = 1;
        while (v43 != (void ***)-4096)
        {
          if (v44) {
            BOOL v46 = 0;
          }
          else {
            BOOL v46 = v43 == (void ***)-8192;
          }
          if (v46) {
            unsigned int v44 = v42;
          }
          unsigned int v47 = v41 + v45++;
          unsigned int v41 = v47 & v40;
          int v42 = (void *)(v39 + 40 * v41);
          BOOL v43 = (void ***)*v42;
          if ((unsigned __int8 **)*v42 == a1) {
            goto LABEL_59;
          }
        }
        if (v44) {
          uint64_t v122 = v44;
        }
        else {
          uint64_t v122 = v42;
        }
LABEL_251:
        int v42 = sub_1CC609054(v37 + 2480, (uint64_t)&v139, (uint64_t *)&v139, v122);
        uint64_t v123 = (uint64_t)v139;
        v42[3] = 0;
        v42[4] = 0;
        *int v42 = v123;
        v42[1] = v42 + 3;
        v42[2] = 0x100000000;
      }
LABEL_59:
      uint64_t v48 = *((unsigned int *)v42 + 4);
      if (v48)
      {
        uint64_t v49 = (uint64_t *)(v42[1] + 8);
        uint64_t v50 = 16 * v48;
        while (*((_DWORD *)v49 - 2))
        {
          v49 += 2;
          v50 -= 16;
          if (!v50) {
            goto LABEL_72;
          }
        }
        uint64_t v51 = *v49;
        if (*v49)
        {
          uint64_t v52 = *(void *)(v51 + 16);
          unsigned int v53 = (void *)(v52 & 0xFFFFFFFFFFFFFFF8);
          if ((v52 & 4) != 0) {
            unsigned int v53 = (void *)*v53;
          }
          Impl = (unsigned __int8 *)llvm::DILocation::getImpl(v53, *(_DWORD *)(v51 + 28), 0, v51, 0, 0, 0, 1);
          uint64_t v137 = Impl;
          if (Impl) {
            llvm::MetadataTracking::track((uint64_t)&v137, Impl, 2);
          }
          if (v138)
          {
            int v124 = *v138;
            if ((v124 - 4) > 0x1E)
            {
              if ((v124 - 3) >= 0xFFFFFFFE) {
                uint64_t v127 = v138;
              }
              else {
                uint64_t v127 = 0;
              }
              if ((v124 - 3) < 0xFFFFFFFE)
              {
                if (v124 == 3) {
                  *((void *)v138 + 1) = 0;
                }
                goto LABEL_70;
              }
              unint64_t v126 = (unint64_t)(v127 + 8);
            }
            else
            {
              if ((v138[1] & 0x7F) != 2 && !*((_DWORD *)v138 + 3)) {
                goto LABEL_70;
              }
              uint64_t v125 = *((void *)v138 + 2);
              if ((v125 & 4) == 0) {
                goto LABEL_70;
              }
              unint64_t v126 = v125 & 0xFFFFFFFFFFFFFFF8;
              if (!v126) {
                goto LABEL_70;
              }
            }
            uint64_t v139 = &v138;
            sub_1CC5FA668(v126 + 16, &v139);
          }
LABEL_70:
          uint64_t v138 = v137;
          if (v137) {
            llvm::MetadataTracking::retrack((uint64_t)&v137, v137, (uint64_t)&v138);
          }
        }
      }
    }
LABEL_72:
    uint64_t v55 = a1[10];
    uint64_t v56 = v55 - 24;
    if (!v55) {
      uint64_t v56 = 0;
    }
    int v57 = (void **)(v56 + 40);
    for (uint64_t j = (void *)*((void *)v56 + 6); j != v57; uint64_t j = (void *)j[1])
    {
      unsigned int v59 = j - 3;
      if (!j) {
        unsigned int v59 = 0;
      }
      if (*((unsigned char *)v59 + 16) != 83)
      {
        unsigned int v60 = *((unsigned __int8 *)j - 8) - 38;
        BOOL v61 = v60 > 0x38;
        uint64_t v62 = (1 << v60) & 0x100060000000001;
        if (v61 || v62 == 0) {
          int v57 = (void **)j;
        }
        else {
          int v57 = (void **)j[1];
        }
        break;
      }
    }
    if (v57) {
      unsigned int v64 = (uint64_t *)(v57 - 3);
    }
    else {
      unsigned int v64 = 0;
    }
    uint64_t v136 = v138;
    if (v138) {
      llvm::MetadataTracking::track((uint64_t)&v136, v138, 2);
    }
    sub_1CD1663EC((llvm::detail::IEEEFloat *)a1, v19, v18, v64, &v136);
    if (v136)
    {
      int v65 = *v136;
      if ((v65 - 4) > 0x1E)
      {
        if ((v65 - 3) >= 0xFFFFFFFE) {
          uint64_t v118 = v136;
        }
        else {
          uint64_t v118 = 0;
        }
        if ((v65 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v119 = (unint64_t)(v118 + 8);
          goto LABEL_237;
        }
        if (v65 == 3) {
          *((void *)v136 + 1) = 0;
        }
      }
      else if ((v136[1] & 0x7F) == 2 || *((_DWORD *)v136 + 3))
      {
        uint64_t v128 = *((void *)v136 + 2);
        if ((v128 & 4) != 0)
        {
          unint64_t v119 = v128 & 0xFFFFFFFFFFFFFFF8;
          if (v119)
          {
LABEL_237:
            uint64_t v139 = &v136;
            sub_1CC5FA668(v119 + 16, &v139);
          }
        }
      }
    }
    a1[14] = (unsigned __int8 *)llvm::AttributeList::removeAttributeAtIndex(v133, *(uint64_t **)*a1, -1, v6, __n);
    if (v138)
    {
      int v66 = *v138;
      if ((v66 - 4) > 0x1E)
      {
        if ((v66 - 3) >= 0xFFFFFFFE) {
          uint64_t v120 = v138;
        }
        else {
          uint64_t v120 = 0;
        }
        if ((v66 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v121 = (unint64_t)(v120 + 8);
          goto LABEL_243;
        }
        if (v66 == 3) {
          *((void *)v138 + 1) = 0;
        }
      }
      else if ((v138[1] & 0x7F) == 2 || *((_DWORD *)v138 + 3))
      {
        uint64_t v129 = *((void *)v138 + 2);
        if ((v129 & 4) != 0)
        {
          unint64_t v121 = v129 & 0xFFFFFFFFFFFFFFF8;
          if (v121)
          {
LABEL_243:
            uint64_t v139 = &v138;
            sub_1CC5FA668(v121 + 16, &v139);
          }
        }
      }
    }
  }
  if (v34)
  {
    int v67 = (unsigned __int8 **)a1[10];
    if (v67 != a1 + 9)
    {
      unsigned int v68 = (a1 >> 4) ^ (a1 >> 9);
      while (1)
      {
        if (v67) {
          uint64_t v69 = (llvm::BasicBlock *)(v67 - 3);
        }
        else {
          uint64_t v69 = 0;
        }
        uint64_t v70 = (void *)*((void *)v69 + 5);
        if (v70 == (void *)((char *)v69 + 40))
        {
          uint64_t v72 = 0;
        }
        else
        {
          if (v70) {
            uint64_t v71 = v70 - 3;
          }
          else {
            uint64_t v71 = 0;
          }
          if (*((unsigned __int8 *)v71 + 16) - 29 >= 0xB) {
            uint64_t v72 = 0;
          }
          else {
            uint64_t v72 = v71;
          }
        }
        if (*((unsigned char *)v72 + 16) != 29) {
          goto LABEL_161;
        }
        uint64_t v73 = llvm::BasicBlock::getTerminatingMustTailCall(v69);
        if (v73) {
          uint64_t v74 = (uint64_t *)v73;
        }
        else {
          uint64_t v74 = v72;
        }
        uint64_t v75 = (unsigned __int8 *)v74[6];
        uint64_t v137 = v75;
        uint64_t v138 = 0;
        if (v75)
        {
          llvm::MetadataTracking::track((uint64_t)&v137, v75, 2);
          long long v76 = v137;
          if (v137)
          {
            if (!v138) {
              goto LABEL_120;
            }
            int v106 = *v138;
            if ((v106 - 4) > 0x1E)
            {
              if ((v106 - 3) >= 0xFFFFFFFE) {
                uint64_t v109 = v138;
              }
              else {
                uint64_t v109 = 0;
              }
              if ((v106 - 3) <= 0xFFFFFFFD)
              {
                if (v106 == 3) {
                  *((void *)v138 + 1) = 0;
                }
                goto LABEL_120;
              }
              unint64_t v108 = (unint64_t)(v109 + 8);
LABEL_202:
              uint64_t v139 = &v138;
              sub_1CC5FA668(v108 + 16, &v139);
              long long v76 = v137;
              uint64_t v138 = v137;
              if (!v137)
              {
                unsigned int v134 = 0;
                goto LABEL_152;
              }
            }
            else
            {
              if ((v138[1] & 0x7F) == 2 || *((_DWORD *)v138 + 3))
              {
                uint64_t v107 = *((void *)v138 + 2);
                if ((v107 & 4) != 0)
                {
                  unint64_t v108 = v107 & 0xFFFFFFFFFFFFFFF8;
                  if (v108) {
                    goto LABEL_202;
                  }
                }
              }
LABEL_120:
              uint64_t v138 = v76;
            }
            llvm::MetadataTracking::track((uint64_t)&v138, v76, 2);
            goto LABEL_146;
          }
        }
        if ((*((unsigned char *)a1 + 23) & 0x20) == 0) {
          goto LABEL_146;
        }
        uint64_t v77 = **(void **)*a1;
        uint64_t v139 = a1;
        int v78 = *(_DWORD *)(v77 + 2496);
        if (!v78) {
          break;
        }
        uint64_t v79 = *(void *)(v77 + 2480);
        int v80 = v78 - 1;
        unsigned int v81 = v80 & v68;
        uint64_t v82 = (void *)(v79 + 40 * (v80 & v68));
        uint64_t v83 = (void ***)*v82;
        if ((unsigned __int8 **)*v82 != a1)
        {
          uint64_t v84 = 0;
          int v85 = 1;
          while (v83 != (void ***)-4096)
          {
            if (v84) {
              BOOL v86 = 0;
            }
            else {
              BOOL v86 = v83 == (void ***)-8192;
            }
            if (v86) {
              uint64_t v84 = v82;
            }
            unsigned int v87 = v81 + v85++;
            unsigned int v81 = v87 & v80;
            uint64_t v82 = (void *)(v79 + 40 * v81);
            uint64_t v83 = (void ***)*v82;
            if ((unsigned __int8 **)*v82 == a1) {
              goto LABEL_133;
            }
          }
          if (v84) {
            unsigned int v104 = v84;
          }
          else {
            unsigned int v104 = v82;
          }
          goto LABEL_190;
        }
LABEL_133:
        uint64_t v88 = *((unsigned int *)v82 + 4);
        if (v88)
        {
          uint64_t v89 = (uint64_t *)(v82[1] + 8);
          uint64_t v90 = 16 * v88;
          while (*((_DWORD *)v89 - 2))
          {
            v89 += 2;
            v90 -= 16;
            if (!v90) {
              goto LABEL_146;
            }
          }
          uint64_t v91 = *v89;
          if (*v89)
          {
            uint64_t v92 = *(void *)(v91 + 16);
            unsigned int v93 = (void *)(v92 & 0xFFFFFFFFFFFFFFF8);
            if ((v92 & 4) != 0) {
              unsigned int v93 = (void *)*v93;
            }
            uint64_t v94 = (unsigned __int8 *)llvm::DILocation::getImpl(v93, 0, 0, v91, 0, 0, 0, 1);
            unint64_t v135 = v94;
            if (v94) {
              llvm::MetadataTracking::track((uint64_t)&v135, v94, 2);
            }
            if (!v138) {
              goto LABEL_144;
            }
            int v110 = *v138;
            if ((v110 - 4) > 0x1E)
            {
              if ((v110 - 3) >= 0xFFFFFFFE) {
                unsigned int v113 = v138;
              }
              else {
                unsigned int v113 = 0;
              }
              if ((v110 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v112 = (unint64_t)(v113 + 8);
                goto LABEL_217;
              }
              if (v110 == 3) {
                *((void *)v138 + 1) = 0;
              }
            }
            else if ((v138[1] & 0x7F) == 2 || *((_DWORD *)v138 + 3))
            {
              uint64_t v111 = *((void *)v138 + 2);
              if ((v111 & 4) != 0)
              {
                unint64_t v112 = v111 & 0xFFFFFFFFFFFFFFF8;
                if (v112)
                {
LABEL_217:
                  uint64_t v139 = &v138;
                  sub_1CC5FA668(v112 + 16, &v139);
                }
              }
            }
LABEL_144:
            uint64_t v138 = v135;
            if (v135) {
              llvm::MetadataTracking::retrack((uint64_t)&v135, v135, (uint64_t)&v138);
            }
          }
        }
LABEL_146:
        if (!v137) {
          goto LABEL_150;
        }
        int v95 = *v137;
        if ((v95 - 4) > 0x1E)
        {
          if ((v95 - 3) >= 0xFFFFFFFE) {
            uint64_t v102 = v137;
          }
          else {
            uint64_t v102 = 0;
          }
          if ((v95 - 3) < 0xFFFFFFFE)
          {
            if (v95 == 3) {
              *((void *)v137 + 1) = 0;
            }
            goto LABEL_150;
          }
          unint64_t v103 = (unint64_t)(v102 + 8);
LABEL_180:
          uint64_t v139 = &v137;
          sub_1CC5FA668(v103 + 16, &v139);
          goto LABEL_150;
        }
        if ((v137[1] & 0x7F) == 2 || *((_DWORD *)v137 + 3))
        {
          uint64_t v116 = *((void *)v137 + 2);
          if ((v116 & 4) != 0)
          {
            unint64_t v103 = v116 & 0xFFFFFFFFFFFFFFF8;
            if (v103) {
              goto LABEL_180;
            }
          }
        }
LABEL_150:
        unsigned int v134 = v138;
        if (v138) {
          llvm::MetadataTracking::track((uint64_t)&v134, v138, 2);
        }
LABEL_152:
        sub_1CD1663EC((llvm::detail::IEEEFloat *)a1, v35, v34, v74, &v134);
        if (!v134) {
          goto LABEL_156;
        }
        int v96 = *v134;
        if ((v96 - 4) > 0x1E)
        {
          if ((v96 - 3) >= 0xFFFFFFFE) {
            unsigned int v98 = v134;
          }
          else {
            unsigned int v98 = 0;
          }
          if ((v96 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v99 = (unint64_t)(v98 + 8);
LABEL_168:
            uint64_t v139 = &v134;
            sub_1CC5FA668(v99 + 16, &v139);
            goto LABEL_156;
          }
          if (v96 == 3) {
            *((void *)v134 + 1) = 0;
          }
        }
        else if ((v134[1] & 0x7F) == 2 || *((_DWORD *)v134 + 3))
        {
          uint64_t v114 = *((void *)v134 + 2);
          if ((v114 & 4) != 0)
          {
            unint64_t v99 = v114 & 0xFFFFFFFFFFFFFFF8;
            if (v99) {
              goto LABEL_168;
            }
          }
        }
LABEL_156:
        if (v138)
        {
          int v97 = *v138;
          if ((v97 - 4) > 0x1E)
          {
            if ((v97 - 3) >= 0xFFFFFFFE) {
              uint64_t v100 = v138;
            }
            else {
              uint64_t v100 = 0;
            }
            if ((v97 - 3) < 0xFFFFFFFE)
            {
              if (v97 == 3) {
                *((void *)v138 + 1) = 0;
              }
              goto LABEL_160;
            }
            unint64_t v101 = (unint64_t)(v100 + 8);
          }
          else
          {
            if ((v138[1] & 0x7F) != 2 && !*((_DWORD *)v138 + 3)) {
              goto LABEL_160;
            }
            uint64_t v115 = *((void *)v138 + 2);
            if ((v115 & 4) == 0) {
              goto LABEL_160;
            }
            unint64_t v101 = v115 & 0xFFFFFFFFFFFFFFF8;
            if (!v101) {
              goto LABEL_160;
            }
          }
          uint64_t v139 = &v138;
          sub_1CC5FA668(v101 + 16, &v139);
        }
LABEL_160:
        BOOL v36 = 1;
LABEL_161:
        int v67 = (unsigned __int8 **)v67[1];
        if (v67 == a1 + 9) {
          goto LABEL_230;
        }
      }
      unsigned int v104 = 0;
LABEL_190:
      uint64_t v82 = sub_1CC609054(v77 + 2480, (uint64_t)&v139, (uint64_t *)&v139, v104);
      uint64_t v105 = (uint64_t)v139;
      v82[4] = 0;
      v82[3] = 0;
      *uint64_t v82 = v105;
      v82[1] = v82 + 3;
      v82[2] = 0x100000000;
      goto LABEL_133;
    }
LABEL_230:
    a1[14] = (unsigned __int8 *)llvm::AttributeList::removeAttributeAtIndex(v133, *(uint64_t **)*a1, -1, v132, v131);
  }
  return v36;
}

void sub_1CD166234()
{
}

void sub_1CD166270()
{
}

void sub_1CD1662B0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD1662E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 112;
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);

  sub_1CB843600(a2, v3, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

BOOL sub_1CD166340(uint64_t a1, unsigned __int8 **a2)
{
  return sub_1CD165710(a2, 0);
}

void sub_1CD166350(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD166388(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 112;
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);

  sub_1CB843600(a2, v3, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

BOOL sub_1CD1663E0(uint64_t a1, unsigned __int8 **a2)
{
  return sub_1CD165710(a2, 1);
}

void sub_1CD1663EC(llvm::detail::IEEEFloat *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned __int8 **a5)
{
  v103[5] = *MEMORY[0x1E4F143B8];
  int v9 = (uint64_t **)a4[5];
  uint64_t v10 = (uint64_t **)v9[7][5];
  uint64_t v11 = **v9;
  if (a3 > 22)
  {
    if (a3 == 23)
    {
      uint64_t v15 = *(void *)(a2 + 15);
      BOOL v16 = *(void *)a2 == 0x72705F6779635F5FLL && *(void *)(a2 + 8) == 0x75665F656C69666FLL;
      uint64_t v17 = 0x746978655F636E75;
    }
    else
    {
      if (a3 != 24)
      {
        if (a3 == 29)
        {
          BOOL v72 = *(void *)a2 == 0x72705F6779635F5FLL && *(void *)(a2 + 8) == 0x75665F656C69666FLL;
          BOOL v73 = v72 && *(void *)(a2 + 16) == 0x7265746E655F636ELL;
          if (v73 && *(void *)(a2 + 21) == 0x657261625F726574) {
            goto LABEL_99;
          }
        }
LABEL_36:
        v101[0] = (uint64_t)"Unknown instrumentation function: '";
        __int16 v102 = 259;
        __int16 v94 = 261;
        v93[0] = a2;
        v93[1] = a3;
        sub_1CD3E3950(v101, v93, (uint64_t)v103);
        uint64_t v91 = "'";
        __int16 v92 = 259;
        sub_1CD3E3950(v103, (uint64_t *)&v91, (uint64_t)&v98);
        llvm::report_fatal_error((llvm *)&v98, (const llvm::Twine *)1);
      }
      if (*(void *)a2 == 0x6D72612E6D766C6CLL
        && *(void *)(a2 + 8) == 0x6261652E756E672ELL
        && *(void *)(a2 + 16) == 0x746E756F636D2E69)
      {
        goto LABEL_99;
      }
      uint64_t v15 = *(void *)(a2 + 16);
      BOOL v16 = *(void *)a2 == 0x72705F6779635F5FLL && *(void *)(a2 + 8) == 0x75665F656C69666FLL;
      uint64_t v17 = 0x7265746E655F636ELL;
    }
    if (!v16 || v15 != v17) {
      goto LABEL_36;
    }
    v103[0] = llvm::PointerType::get((llvm::PointerType *)(*(void *)v11 + 1912), 0);
    v103[1] = llvm::PointerType::get((llvm::PointerType *)(*(void *)v11 + 1912), 0);
    uint64_t v19 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*(void *)v11 + 1576), (uint64_t)v103, 2, 0);
    uint64_t inserted = llvm::Module::getOrInsertFunction((uint64_t)v10, (unsigned __int8 *)a2, (const char *)a3, v19, 0);
    uint64_t v89 = v21;
    llvm::Intrinsic::getType(*v10, 257, 0, 0);
    Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v10, 257, 0, 0);
    llvm::Module::getOrInsertFunction((uint64_t)v10, "llvm.returnaddress", (const char *)0x12, Type, 0);
    uint64_t v25 = (uint64_t **)v23;
    if (v23) {
      uint64_t v26 = *(uint64_t ***)(v23 + 24);
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t v90 = (uint64_t **)inserted;
    uint64_t v31 = *(llvm::ConstantInt **)(*(void *)v11 + 1960);
    unsigned int v32 = *(_DWORD *)(*(void *)v11 + 1968);
    unsigned int v99 = v32 >> 8;
    if (v32 >> 8 >= 0x41) {
      operator new[]();
    }
    unsigned int v98 = 0;
    uint64_t v33 = llvm::ConstantInt::get(v31, (llvm::LLVMContext *)&v98, v24);
    if (v99 >= 0x41 && v98) {
      MEMORY[0x1D25D9CB0](v98, 0x1000C8000313F17);
    }
    v101[0] = (uint64_t)v33;
    __int16 v100 = 257;
    uint64_t v34 = (char *)operator new(0x90uLL);
    uint64_t v35 = (llvm::Value *)(v34 + 64);
    *((_DWORD *)v34 + 21) = *((_DWORD *)v34 + 21) & 0x38000000 | 2;
    *(void *)uint64_t v34 = 0;
    *((void *)v34 + 1) = 0;
    *((void *)v34 + 2) = 0;
    *((void *)v34 + 3) = v34 + 64;
    *((void *)v34 + 4) = 0;
    *((void *)v34 + 5) = 0;
    *((void *)v34 + 6) = 0;
    *((void *)v34 + 7) = v34 + 64;
    *((void *)v34 + 8) = *v26[2];
    *((void *)v34 + 9) = 0;
    v34[80] = 84;
    v34[81] = 0;
    *((_WORD *)v34 + 41) = 0;
    *((_DWORD *)v34 + 21) = 2;
    *(_OWORD *)(v34 + 88) = 0u;
    BOOL v36 = v34 + 88;
    *(_OWORD *)(v34 + 104) = 0u;
    *((_DWORD *)v34 + 30) = 0;
    uint64_t v37 = a4[5];
    int v38 = a4 + 3;
    *((void *)v34 + 13) = v37;
    *(_WORD *)(v37 + 18) &= ~0x8000u;
    if ((v34[87] & 0x10) != 0)
    {
      uint64_t v68 = *(void *)(v37 + 56);
      if (v68)
      {
        uint64_t v69 = *(llvm::ValueSymbolTable **)(v68 + 104);
        if (v69) {
          llvm::ValueSymbolTable::reinsertValue(v69, v35);
        }
      }
    }
    uint64_t v39 = *v38;
    *((void *)v34 + 11) = *v38;
    *((void *)v34 + 12) = v38;
    *(void *)(v39 + 8) = v36;
    *int v38 = (uint64_t)v36;
    *((void *)v34 + 16) = 0;
    llvm::CallInst::init((uint64_t ***)v35, v26, v25, v101, 1, 0, 0, (const char **)&v98);
    int v40 = *a5;
    int v96 = v40;
    if (v40) {
      llvm::MetadataTracking::track((uint64_t)&v96, v40, 2);
    }
    BOOL v43 = (unsigned __int8 *)*((void *)v34 + 14);
    int v42 = v34 + 112;
    unsigned int v41 = v43;
    if (!v43)
    {
LABEL_57:
      unsigned int v44 = v96;
      *(void *)int v42 = v96;
      if (v44)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v96, v44, (uint64_t)v42);
        int v96 = 0;
      }
      int v45 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(*(void *)v11 + 1912), 0);
      if (*(llvm::Constant **)a1 != v45) {
        a1 = sub_1CC56C0C0((llvm *)0x31, a1, v45, 0);
      }
      v101[0] = (uint64_t)a1;
      v101[1] = (uint64_t)v35;
      __int16 v100 = 257;
      BOOL v46 = (char *)operator new(0xB0uLL);
      unsigned int v47 = v46;
      uint64_t v48 = 0;
      uint64_t v49 = (llvm::Value *)(v46 + 96);
      *((_DWORD *)v46 + 29) = *((_DWORD *)v46 + 29) & 0x38000000 | 3;
      do
      {
        uint64_t v50 = &v46[v48];
        *(void *)uint64_t v50 = 0;
        *((void *)v50 + 1) = 0;
        *((void *)v50 + 2) = 0;
        *((void *)v50 + 3) = v49;
        v48 += 32;
      }
      while (v48 != 96);
      uint64_t v51 = *v90[2];
      *(_OWORD *)(v46 + 120) = 0u;
      uint64_t v52 = v46 + 120;
      *((void *)v46 + 12) = v51;
      *((void *)v46 + 13) = 0;
      v46[112] = 84;
      v46[113] = 0;
      *((_WORD *)v46 + 57) = 0;
      *((_DWORD *)v46 + 29) = *((_DWORD *)v46 + 29) & 0xC0000000 | 3;
      *(_OWORD *)(v46 + 136) = 0u;
      *((_DWORD *)v46 + 38) = 0;
      uint64_t v53 = a4[5];
      *((void *)v46 + 17) = v53;
      *(_WORD *)(v53 + 18) &= ~0x8000u;
      if ((v46[119] & 0x10) != 0)
      {
        uint64_t v70 = *(void *)(v53 + 56);
        if (v70)
        {
          uint64_t v71 = *(llvm::ValueSymbolTable **)(v70 + 104);
          if (v71) {
            llvm::ValueSymbolTable::reinsertValue(v71, v49);
          }
        }
      }
      uint64_t v54 = *v38;
      v47[15] = *v38;
      v47[16] = v38;
      *(void *)(v54 + 8) = v52;
      *int v38 = (uint64_t)v52;
      v47[20] = 0;
      llvm::CallInst::init((uint64_t ***)v49, v90, v89, v101, 2, 0, 0, (const char **)&v98);
      uint64_t v55 = *a5;
      int v95 = v55;
      if (v55) {
        llvm::MetadataTracking::track((uint64_t)&v95, v55, 2);
      }
      unsigned int v58 = (unsigned __int8 *)v47[18];
      int v57 = (char *)(v47 + 18);
      uint64_t v56 = v58;
      if (!v58) {
        goto LABEL_67;
      }
      int v65 = *v56;
      if ((v65 - 4) > 0x1E)
      {
        if ((v65 - 3) >= 0xFFFFFFFE) {
          uint64_t v88 = v56;
        }
        else {
          uint64_t v88 = 0;
        }
        if ((v65 - 3) < 0xFFFFFFFE)
        {
          if (v65 == 3) {
            *((void *)v56 + 1) = 0;
          }
          goto LABEL_67;
        }
        unint64_t v67 = (unint64_t)(v88 + 8);
      }
      else
      {
        if ((v56[1] & 0x7F) != 2 && !*((_DWORD *)v56 + 3)) {
          goto LABEL_67;
        }
        uint64_t v66 = *((void *)v56 + 2);
        if ((v66 & 4) == 0) {
          goto LABEL_67;
        }
        unint64_t v67 = v66 & 0xFFFFFFFFFFFFFFF8;
        if (!v67) {
          goto LABEL_67;
        }
      }
      unsigned int v98 = v57;
      sub_1CC5FA668(v67 + 16, &v98);
LABEL_67:
      unsigned int v59 = v95;
      *(void *)int v57 = v95;
      if (!v59) {
        return;
      }
      unsigned int v60 = &v95;
      uint64_t v61 = (uint64_t)v57;
      goto LABEL_104;
    }
    int v62 = *v41;
    if ((v62 - 4) > 0x1E)
    {
      if ((v62 - 3) >= 0xFFFFFFFE) {
        unsigned int v87 = v41;
      }
      else {
        unsigned int v87 = 0;
      }
      if ((v62 - 3) < 0xFFFFFFFE)
      {
        if (v62 == 3) {
          *((void *)v41 + 1) = 0;
        }
        goto LABEL_57;
      }
      unint64_t v64 = (unint64_t)(v87 + 8);
    }
    else
    {
      if ((v41[1] & 0x7F) != 2 && !*((_DWORD *)v41 + 3)) {
        goto LABEL_57;
      }
      uint64_t v63 = *((void *)v41 + 2);
      if ((v63 & 4) == 0) {
        goto LABEL_57;
      }
      unint64_t v64 = v63 & 0xFFFFFFFFFFFFFFF8;
      if (!v64) {
        goto LABEL_57;
      }
    }
    unsigned int v98 = v42;
    sub_1CC5FA668(v64 + 16, &v98);
    goto LABEL_57;
  }
  if (a3 == 6)
  {
    if (*(_DWORD *)a2 == 1970234221 && *(_WORD *)(a2 + 4) == 29806) {
      goto LABEL_99;
    }
    goto LABEL_36;
  }
  if (a3 == 7)
  {
    if (*(_DWORD *)a2 == 1868786990 && *(_DWORD *)(a2 + 3) == 1953396079) {
      goto LABEL_99;
    }
    if (*(_DWORD *)a2 == 1868786945 && *(_DWORD *)(a2 + 3) == 1953396079) {
      goto LABEL_99;
    }
    if (*(_DWORD *)a2 == 1868787039 && *(_DWORD *)(a2 + 3) == 1953396079) {
      goto LABEL_99;
    }
    goto LABEL_36;
  }
  if (a3 != 8 || *(void *)a2 != 0x746E756F636D5F01 && *(void *)a2 != 0x746E756F636D5F5FLL) {
    goto LABEL_36;
  }
LABEL_99:
  uint64_t v75 = (llvm::Type ***)sub_1CD577C30((uint64_t)v10, (unsigned __int8 *)a2, (const char *)a3, 0, (uint64_t **)(*(void *)v11 + 1576));
  uint64_t v77 = v76;
  __int16 v100 = 257;
  int v78 = (char *)operator new(0x70uLL);
  *((_DWORD *)v78 + 13) = *((_DWORD *)v78 + 13) & 0x38000000 | 1;
  *(void *)int v78 = 0;
  *((void *)v78 + 1) = 0;
  *((void *)v78 + 2) = 0;
  *((void *)v78 + 3) = v78 + 32;
  llvm::CallInst::CallInst((llvm::CallInst *)(v78 + 32), v75, v77, (const char **)&v98, (llvm::Instruction *)a4);
  uint64_t v79 = *a5;
  int v97 = v79;
  if (v79) {
    llvm::MetadataTracking::track((uint64_t)&v97, v79, 2);
  }
  uint64_t v82 = (unsigned __int8 *)*((void *)v78 + 10);
  unsigned int v81 = v78 + 80;
  int v80 = v82;
  if (!v82) {
    goto LABEL_102;
  }
  int v83 = *v80;
  if ((v83 - 4) > 0x1E)
  {
    if ((v83 - 3) >= 0xFFFFFFFE) {
      BOOL v86 = v80;
    }
    else {
      BOOL v86 = 0;
    }
    if ((v83 - 3) < 0xFFFFFFFE)
    {
      if (v83 == 3) {
        *((void *)v80 + 1) = 0;
      }
      goto LABEL_102;
    }
    unint64_t v85 = (unint64_t)(v86 + 8);
  }
  else
  {
    if ((v80[1] & 0x7F) != 2 && !*((_DWORD *)v80 + 3)) {
      goto LABEL_102;
    }
    uint64_t v84 = *((void *)v80 + 2);
    if ((v84 & 4) == 0) {
      goto LABEL_102;
    }
    unint64_t v85 = v84 & 0xFFFFFFFFFFFFFFF8;
    if (!v85) {
      goto LABEL_102;
    }
  }
  unsigned int v98 = v81;
  sub_1CC5FA668(v85 + 16, &v98);
LABEL_102:
  unsigned int v59 = v97;
  *(void *)unsigned int v81 = v97;
  if (!v59) {
    return;
  }
  unsigned int v60 = &v97;
  uint64_t v61 = (uint64_t)v81;
LABEL_104:
  llvm::MetadataTracking::retrack((uint64_t)v60, v59, v61);
}

char *llvm::EscapeEnumerator::Next(llvm::EscapeEnumerator *this)
{
  v39[16] = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 168)) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v3 = *((void *)this + 3);
  do
  {
    if (v4 == v3)
    {
      *((unsigned char *)this + 168) = 1;
      if (*((unsigned char *)this + 169))
      {
        uint64_t v17 = *(void *)this;
        uint64_t v18 = *(void *)(*(void *)this + 112);
        if (!v18 || (*(unsigned char *)(v18 + 16) & 0x20) == 0)
        {
          p_p = v39;
          uint64_t v38 = 0x1000000000;
          uint64_t v19 = v17 + 72;
          uint64_t v20 = *(void *)(v17 + 80);
          if (v20 != v17 + 72)
          {
            do
            {
              uint64_t v21 = v20 - 24;
              if (!v20) {
                uint64_t v21 = 0;
              }
              uint64_t v22 = v21 + 40;
              for (uint64_t i = *(void *)(v21 + 48); i != v22; uint64_t i = *(void *)(i + 8))
              {
                uint64_t v24 = i - 24;
                if (!i) {
                  uint64_t v24 = 0;
                }
                int v25 = *(unsigned __int8 *)(v24 + 16);
                if (v25 == 84) {
                  uint64_t v26 = v24;
                }
                else {
                  uint64_t v26 = 0;
                }
                if (i)
                {
                  if (v25 == 84)
                  {
                    uint64_t v27 = *(void *)(v26 + 64);
                    if ((!v27 || (*(unsigned char *)(v27 + 16) & 0x20) == 0)
                      && (llvm::CallBase::hasFnAttrOnCalledFunction(v26, 37) & 1) == 0
                      && (*(_WORD *)(v26 + 18) & 3) != 2)
                    {
                      if (v38 >= (unint64_t)HIDWORD(v38)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)p_p + v38) = v26;
                      LODWORD(v38) = v38 + 1;
                    }
                  }
                }
              }
              uint64_t v20 = *(void *)(v20 + 8);
            }
            while (v20 != v19);
            if (v38)
            {
              unsigned int v32 = (unsigned char *)*((void *)this + 1);
              char v33 = 1;
              char v36 = 1;
              if (*v32)
              {
                __p = v32;
                char v33 = 3;
              }
              char v35 = v33;
              operator new();
            }
          }
          uint64_t v1 = 0;
          if (p_p != v39) {
            free(p_p);
          }
          return v1;
        }
      }
      return 0;
    }
    uint64_t v5 = *(void *)(v4 + 8);
    *((void *)this + 2) = v5;
    if (v4) {
      uint64_t v6 = (llvm::BasicBlock *)(v4 - 24);
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = (void *)*((void *)v6 + 5);
    if (v7 == (void *)((char *)v6 + 40))
    {
      uint64_t v9 = 0;
    }
    else
    {
      if (v7) {
        uint64_t v8 = v7 - 3;
      }
      else {
        uint64_t v8 = 0;
      }
      if (*((unsigned __int8 *)v8 + 16) - 29 >= 0xB) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = (uint64_t)v8;
      }
    }
    int v10 = *(unsigned __int8 *)(v9 + 16);
    BOOL v11 = v10 == 34 || v10 == 29;
    uint64_t v4 = v5;
  }
  while (!v11);
  uint64_t v12 = llvm::BasicBlock::getTerminatingMustTailCall(v6);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = v9;
  }
  uint64_t v1 = (char *)this + 32;
  *((void *)this + 10) = *(void *)(v13 + 40);
  *((void *)this + 11) = v13 + 24;
  int v14 = *(void **)(v13 + 48);
  __p = v14;
  if (v14)
  {
    llvm::MetadataTracking::track((uint64_t)&__p, (unsigned __int8 *)v14, 2);
    uint64_t v15 = __p;
  }
  else
  {
    uint64_t v15 = 0;
  }
  sub_1CB8461A4((uint64_t)this + 32, 0, (uint64_t)v15);
  if (!__p) {
    return v1;
  }
  int v28 = *(unsigned __int8 *)__p;
  if ((v28 - 4) <= 0x1E)
  {
    if ((*((unsigned char *)__p + 1) & 0x7F) != 2 && !*((_DWORD *)__p + 3)) {
      return v1;
    }
    uint64_t v29 = *((void *)__p + 2);
    if ((v29 & 4) == 0) {
      return v1;
    }
    unint64_t v30 = v29 & 0xFFFFFFFFFFFFFFF8;
    if (!v30) {
      return v1;
    }
LABEL_67:
    p_p = &__p;
    sub_1CC5FA668(v30 + 16, &p_p);
    return v1;
  }
  if ((v28 - 3) >= 0xFFFFFFFE) {
    uint64_t v31 = __p;
  }
  else {
    uint64_t v31 = 0;
  }
  if ((v28 - 3) >= 0xFFFFFFFE)
  {
    unint64_t v30 = (unint64_t)v31 + 8;
    goto LABEL_67;
  }
  if (v28 == 3) {
    *((void *)__p + 1) = 0;
  }
  return v1;
}

uint64_t llvm::Evaluator::MutableValue::makeMutable(llvm::Evaluator::MutableValue *this)
{
  unint64_t v1 = *(void *)this & 0xFFFFFFFFFFFFFFF8;
  uint64_t v2 = *(void *)v1;
  int v3 = *(unsigned __int8 *)(*(void *)v1 + 8);
  if (*(void *)v1) {
    BOOL v4 = v3 == 18;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4 || (v2 ? (BOOL v5 = v3 == 17) : (BOOL v5 = 0), v5 || (v2 ? (v6 = v3 == 16) : (v6 = 0), v6))) {
    operator new();
  }
  return 0;
}

BOOL sub_1CD1673F4(llvm::Constant **a1, uint64_t a2)
{
  BOOL v4 = a1[1];
  BOOL v5 = *(llvm::Type **)*a1;
  unint64_t v6 = (unint64_t)(sub_1CB83544C((uint64_t)v4, (uint64_t)v5) + 7) >> 3;
  BOOL v8 = v7 == 1;
  char Alignment = llvm::DataLayout::getAlignment(v4, v5, 1);
  uint64_t v10 = ((1 << Alignment) + v6 - 1) & -(1 << Alignment);
  BOOL v11 = a1[1];
  uint64_t v12 = sub_1CB83544C((uint64_t)v11, a2);
  BOOL v14 = v13 == 1;
  unint64_t v15 = (unint64_t)(v12 + 7) >> 3;
  char v16 = llvm::DataLayout::getAlignment(v11, (llvm::Type *)a2, 1);
  BOOL result = 0;
  if (v10 == (((1 << v16) + v15 - 1) & -(1 << v16)) && ((v8 ^ v14 ^ 1) & 1) != 0)
  {
    uint64_t v18 = *(void *)*a1;
    return *(unsigned char *)(v18 + 8) == 18
        && *(unsigned char *)(a2 + 8) == 18
        && *(_DWORD *)(v18 + 32) == 4
        && *(_DWORD *)(a2 + 32) == 3
        && **(void **)(v18 + 16) == **(void **)(a2 + 16)
        && *((unsigned __int8 *)llvm::Constant::getAggregateElement(*a1, (llvm::Type *)3) + 16) - 11 < 2;
  }
  return result;
}

llvm::Value *llvm::Evaluator::MutableAggregate::toConstant(llvm::Evaluator::MutableAggregate *this)
{
  v15[32] = *(llvm::FixedVectorType ***)MEMORY[0x1E4F143B8];
  int v14 = 0;
  uint64_t v2 = *((unsigned int *)this + 4);
  if (v2)
  {
    LODWORD(v3) = 0;
    BOOL v4 = (void *)*((void *)this + 1);
    uint64_t v5 = 8 * v2;
    do
    {
      unint64_t v6 = (llvm::FixedVectorType **)(*v4 & 0xFFFFFFFFFFFFFFF8);
      if ((*v4 & 4) != 0 || !v6)
      {
        unint64_t v6 = (llvm::FixedVectorType **)llvm::Evaluator::MutableAggregate::toConstant((llvm::Evaluator::MutableAggregate *)(*v4 & 0xFFFFFFFFFFFFFFF8));
        LODWORD(v3) = v14;
      }
      if (v3 >= 0x20) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v15[v3] = v6;
      uint64_t v3 = ++v14;
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v3 = 0;
  }
  int v7 = *(llvm::PoisonValue **)this;
  int v8 = *(unsigned __int8 *)(*(void *)this + 8);
  if (*(void *)this) {
    BOOL v9 = v8 == 16;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    return (llvm::Value *)llvm::ConstantStruct::get(v7, (llvm::Type *)v15, v3);
  }
  if (v7 && v8 == 17) {
    return llvm::ConstantArray::get(v7, (llvm::Type *)v15, v3);
  }
  Impl = llvm::ConstantVector::getImpl(v15, (llvm::Type *)v3);
  if (Impl) {
    return Impl;
  }
  llvm::FixedVectorType::get(*v15[0], (llvm::Type *)v3);
  return (llvm::Value *)sub_1CC56A4DC(**v13 + 1288, (uint64_t)v13, v15, v3);
}

llvm::UndefValue *llvm::Evaluator::ComputeLoadResult(llvm::Evaluator *this, llvm::Constant *a2, llvm::Type *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = *((void *)this + 73);
  unsigned int v11 = *(_DWORD *)(*(void *)a2 + 8);
  if ((v11 & 0xFE) == 0x12) {
    unsigned int v11 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
  }
  if (v11 < 0x100) {
    goto LABEL_12;
  }
  unsigned int v12 = v11 >> 8;
  uint64_t v13 = *(unsigned int *)(v10 + 240);
  uint64_t v14 = *(void *)(v10 + 232);
  if (v13)
  {
    uint64_t v14 = *(void *)(v10 + 232);
    unint64_t v15 = *(unsigned int *)(v10 + 240);
    do
    {
      unint64_t v16 = v15 >> 1;
      uint64_t v17 = v14 + 16 * (v15 >> 1);
      unsigned int v18 = *(_DWORD *)(v17 + 8);
      uint64_t v19 = v17 + 16;
      v15 += ~(v15 >> 1);
      if (v18 < v12) {
        uint64_t v14 = v19;
      }
      else {
        unint64_t v15 = v16;
      }
    }
    while (v15);
  }
  if (v14 == *(void *)(v10 + 232) + 16 * v13 || *(_DWORD *)(v14 + 8) != v12) {
LABEL_12:
  }
    uint64_t v14 = *(void *)(v10 + 232);
  unsigned int v49 = *(_DWORD *)(v14 + 12);
  if (v49 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src);
  }
  __src = 0;
  uint64_t v20 = llvm::Value::stripAndAccumulateConstantOffsets(a2, (llvm::DataLayout *)v10, (llvm::APInt *)&__src, 1, 0, 0, a7);
  uint64_t v21 = v20;
  uint64_t v22 = *((void *)this + 73);
  unsigned int v23 = *(_DWORD *)(*(void *)v20 + 8);
  if ((v23 & 0xFE) == 0x12) {
    unsigned int v23 = *(_DWORD *)(**(void **)(*(void *)v20 + 16) + 8);
  }
  uint64_t v24 = *(void *)(v22 + 232);
  if (v23 < 0x100) {
    goto LABEL_25;
  }
  unsigned int v25 = v23 >> 8;
  unint64_t v26 = *(unsigned int *)(v22 + 240);
  uint64_t v27 = *(void *)(v22 + 232);
  if (v26)
  {
    uint64_t v27 = v24;
    unint64_t v28 = v26;
    do
    {
      unint64_t v29 = v28 >> 1;
      uint64_t v30 = v27 + 16 * (v28 >> 1);
      unsigned int v31 = *(_DWORD *)(v30 + 8);
      uint64_t v32 = v30 + 16;
      v28 += ~(v28 >> 1);
      if (v31 < v25) {
        uint64_t v27 = v32;
      }
      else {
        unint64_t v28 = v29;
      }
    }
    while (v28);
  }
  if (v27 == v24 + 16 * v26 || *(_DWORD *)(v27 + 8) != v25) {
LABEL_25:
  }
    uint64_t v27 = v24;
  llvm::APInt::sextOrTrunc((uint64_t)&__src, *(_DWORD *)(v27 + 12), (uint64_t)&v46);
  if (v49 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  __src = v46;
  unsigned int v33 = v47;
  unsigned int v49 = v47;
  if (*((unsigned char *)v21 + 16) != 3)
  {
    char v36 = 0;
    goto LABEL_34;
  }
  uint64_t v34 = *((unsigned int *)this + 28);
  if (v34)
  {
    uint64_t v38 = *((void *)this + 12);
    LODWORD(v39) = (v34 - 1) & ((v21 >> 4) ^ (v21 >> 9));
    int v40 = (llvm::GlobalValue **)(v38 + 16 * v39);
    unsigned int v41 = *v40;
    if (*v40 == v21)
    {
LABEL_43:
      if (v40 != (llvm::GlobalValue **)(v38 + 16 * v34))
      {
        unsigned int v45 = v47;
        if (v47 > 0x40) {
          operator new[]();
        }
        unsigned int v44 = v46;
        char v36 = llvm::Evaluator::MutableValue::read(v40 + 1, a3, (llvm::Type *)&v44, *((const llvm::APInt **)this + 73));
        if (v45 >= 0x41 && v44) {
          MEMORY[0x1D25D9CB0](v44, 0x1000C8000313F17);
        }
        goto LABEL_33;
      }
    }
    else
    {
      int v42 = 1;
      while (v41 != (llvm::GlobalValue *)-4096)
      {
        int v43 = v39 + v42++;
        uint64_t v39 = v43 & (v34 - 1);
        unsigned int v41 = *(llvm::GlobalValue **)(v38 + 16 * v39);
        if (v41 == v21)
        {
          int v40 = (llvm::GlobalValue **)(v38 + 16 * v39);
          goto LABEL_43;
        }
      }
    }
  }
  if ((*((_DWORD *)v21 + 5) & 0x7FFFFFF) == 0
    || (llvm::GlobalValue::isInterposable(v21) & 1) != 0
    || (*((unsigned char *)v21 + 80) & 2) != 0)
  {
    char v36 = 0;
  }
  else
  {
    char v36 = llvm::ConstantFoldLoadFromConst(*((llvm::Type ***)v21 - 4), a3, (llvm::Type *)&__src, *((const llvm::APInt **)this + 73), v35);
  }
LABEL_33:
  unsigned int v33 = v49;
LABEL_34:
  if (v33 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  return v36;
}

uint64_t sub_1CD167A7C(void *a1, uint64_t a2)
{
  if (!a2 || *(unsigned __int8 *)(a2 + 16) >= 0x15u)
  {
    unint64_t v3 = a1[5] + a1[4] - 1;
    BOOL v4 = (uint64_t *)(*(void *)(a1[1] + 8 * (v3 / 0xAA)) + 24 * (v3 % 0xAA));
    uint64_t v6 = 0;
    uint64_t v7 = a2;
    int v5 = sub_1CC01F5A8(v4, &v7, &v6);
    a2 = 0;
    if (v5) {
      return *(void *)(v6 + 8);
    }
  }
  return a2;
}

llvm::ConstantExpr *llvm::Evaluator::castCallResultIfNeeded(llvm::Type **this, llvm::Constant ***a2, llvm::Constant **a3, const llvm::DataLayout *a4)
{
  if (!a3 || *a3 == (llvm::Constant *)a2) {
    return (llvm::ConstantExpr *)a3;
  }
  else {
    return llvm::ConstantFoldLoadThroughBitcast(a3, a2, this[73], a4);
  }
}

uint64_t llvm::Evaluator::EvaluateBlock(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  uint64_t v233 = *MEMORY[0x1E4F143B8];
  uint64_t v220 = (const llvm::Value *)(a1 + 488);
  uint64_t v218 = a1 + 96;
  uint64_t v217 = a1 + 120;
  unsigned int v215 = (llvm::SmallPtrSetImplBase *)(a1 + 392);
  while (1)
  {
    uint64_t v6 = (llvm::Constant **)(a2 - 24);
    if (a2) {
      uint64_t v7 = a2 - 24;
    }
    else {
      uint64_t v7 = 0;
    }
    int v8 = *(unsigned __int8 *)(v7 + 16);
    if (v8 == 61) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = 0;
    }
    if (a2 && v8 == 61)
    {
      int v10 = *(unsigned __int8 *)(v9 + 16);
      if (v10 == 60 || v10 == 61)
      {
        __int16 v11 = *(_WORD *)(v9 + 18);
        if (v11 & 0x380) != 0 || (v11) {
          return 0;
        }
      }
      else if (v10 - 63) < 3 || (*(_WORD *)(v9 + 18))
      {
        return 0;
      }
      uint64_t v12 = sub_1CD167A7C((void *)a1, *(void *)(v9 - 32));
      uint64_t v13 = *(llvm::DataLayout **)(a1 + 584);
      uint64_t v14 = *(void *)(a1 + 592);
      uint64_t v15 = 8;
      uint64_t v225 = (void *)1;
      do
      {
        *(void **)((char *)&v225 + v15) = (void *)-4096;
        v15 += 16;
      }
      while (v15 != 72);
      uint64_t v17 = sub_1CBFB8694(v12, v13, v14, (uint64_t)&v225);
      if ((v225 & 1) == 0) {
        MEMORY[0x1D25D9CD0](v226, 8);
      }
      uint64_t v18 = *(void *)(a1 + 584);
      unsigned int v19 = *(_DWORD *)(*(void *)v17 + 8);
      if ((v19 & 0xFE) == 0x12) {
        unsigned int v19 = *(_DWORD *)(**(void **)(*(void *)v17 + 16) + 8);
      }
      if (v19 < 0x100) {
        goto LABEL_28;
      }
      unsigned int v20 = v19 >> 8;
      uint64_t v21 = *(unsigned int *)(v18 + 240);
      uint64_t v22 = *(void *)(v18 + 232);
      if (v21)
      {
        uint64_t v22 = *(void *)(v18 + 232);
        unint64_t v23 = *(unsigned int *)(v18 + 240);
        do
        {
          unint64_t v24 = v23 >> 1;
          uint64_t v25 = v22 + 16 * (v23 >> 1);
          unsigned int v26 = *(_DWORD *)(v25 + 8);
          uint64_t v27 = v25 + 16;
          v23 += ~(v23 >> 1);
          if (v26 < v20) {
            uint64_t v22 = v27;
          }
          else {
            unint64_t v23 = v24;
          }
        }
        while (v23);
      }
      if (v22 == *(void *)(v18 + 232) + 16 * v21 || *(_DWORD *)(v22 + 8) != v20) {
LABEL_28:
      }
        uint64_t v22 = *(void *)(v18 + 232);
      LODWORD(v232) = *(_DWORD *)(v22 + 12);
      if (v232 > 0x40) {
        operator new[]();
      }
      unint64_t v231 = 0;
      unint64_t v28 = llvm::Value::stripAndAccumulateConstantOffsets(v17, (llvm::DataLayout *)v18, (llvm::APInt *)&v231, 1, 0, 0, v16);
      unint64_t v29 = v28;
      uint64_t v30 = *(void *)(a1 + 584);
      unsigned int v31 = *(_DWORD *)(*(void *)v28 + 8);
      if ((v31 & 0xFE) == 0x12) {
        unsigned int v31 = *(_DWORD *)(**(void **)(*(void *)v28 + 16) + 8);
      }
      uint64_t v32 = *(void *)(v30 + 232);
      if (v31 < 0x100) {
        goto LABEL_41;
      }
      unsigned int v33 = v31 >> 8;
      unint64_t v34 = *(unsigned int *)(v30 + 240);
      uint64_t v35 = *(void *)(v30 + 232);
      if (v34)
      {
        uint64_t v35 = v32;
        unint64_t v36 = v34;
        do
        {
          unint64_t v37 = v36 >> 1;
          uint64_t v38 = v35 + 16 * (v36 >> 1);
          unsigned int v39 = *(_DWORD *)(v38 + 8);
          uint64_t v40 = v38 + 16;
          v36 += ~(v36 >> 1);
          if (v39 < v33) {
            uint64_t v35 = v40;
          }
          else {
            unint64_t v36 = v37;
          }
        }
        while (v36);
      }
      if (v35 == v32 + 16 * v34 || *(_DWORD *)(v35 + 8) != v33) {
LABEL_41:
      }
        uint64_t v35 = v32;
      llvm::APInt::sextOrTrunc((uint64_t)&v231, *(_DWORD *)(v35 + 12), (uint64_t)&v225);
      if (v232 >= 0x41 && v231) {
        MEMORY[0x1D25D9CB0](v231, 0x1000C8000313F17);
      }
      unint64_t v231 = v225;
      LODWORD(v232) = v226;
      if (*((unsigned char *)v29 + 16) == 3) {
        uint64_t v41 = (uint64_t)v29;
      }
      else {
        uint64_t v41 = 0;
      }
      uint64_t v224 = v41;
      if (!v41) {
        goto LABEL_80;
      }
      int v42 = *(_DWORD *)(v41 + 32);
      if ((v42 & 0xF) == 1) {
        goto LABEL_80;
      }
      if (*(unsigned char *)(v41 + 16))
      {
        if (*(unsigned char *)(v41 + 16) == 3 && (*(_DWORD *)(v41 + 20) & 0x7FFFFFF) == 0) {
          goto LABEL_80;
        }
      }
      else if ((v42 & 0x800000) == 0 && *(void *)(v41 + 72) == v41 + 72)
      {
        goto LABEL_80;
      }
      unsigned int v61 = (v42 & 0xF) - 2;
      if ((v61 >= 9 || ((0x18Fu >> v61) & 1) == 0) && (*(unsigned char *)(v41 + 80) & 2) == 0)
      {
        int v62 = (uint64_t ***)sub_1CD167A7C((void *)a1, *(void *)(v9 - 64));
        llvm::GlobalPtrAuthInfo::analyze(v62, v63);
        if (v64 || sub_1CD168E74((uint64_t)v62, v220, *(void *)(a1 + 584)))
        {
          uint64_t v223 = *(void *)(v41 - 32);
          sub_1CD87DCD4((uint64_t)&v225, v218, &v224, &v223);
          unsigned int v222 = v232;
          if (v232 > 0x40) {
            operator new[]();
          }
          uint64_t v221 = v231;
          int v93 = llvm::Evaluator::MutableValue::write((llvm::Evaluator::MutableValue *)((char *)v225 + 8), (llvm::Constant *)v62, &v221, *(llvm::Constant **)(a1 + 584));
          int v94 = v93;
          if (v222 >= 0x41 && v221) {
            MEMORY[0x1D25D9CB0](v221, 0x1000C8000313F17);
          }
          int v65 = v94 ^ 1;
LABEL_81:
          if (v232 >= 0x41 && v231) {
            MEMORY[0x1D25D9CB0](v231, 0x1000C8000313F17);
          }
          if (v65) {
            return 0;
          }
          goto LABEL_85;
        }
      }
LABEL_80:
      int v65 = 1;
      goto LABEL_81;
    }
    if (a2 && (v8 - 59) >= 0xFFFFFFEE)
    {
      int v43 = (llvm *)(v8 - 28);
      unsigned int v44 = (llvm::Constant *)sub_1CD167A7C((void *)a1, *(void *)(v7 - 64));
      unsigned int v45 = (llvm::Constant *)sub_1CD167A7C((void *)a1, *(void *)(v7 - 32));
      ElementPtr = (llvm::Constant **)llvm::ConstantFoldBinaryInstruction(v43, v44, v45, v46);
      if (ElementPtr) {
        goto LABEL_101;
      }
      uint64_t v48 = *(void ***)v44;
      if (!*(void *)v44)
      {
LABEL_85:
        ElementPtr = 0;
        goto LABEL_101;
      }
      unint64_t v231 = v44;
      uint64_t v232 = v45;
      uint64_t v49 = **v48 + 1512;
      LODWORD(v225) = v43;
      uint64_t v226 = (uint64_t)&v231;
      uint64_t v227 = 2;
      long long v228 = 0u;
      long long v229 = 0u;
      uint64_t v230 = 0;
      uint64_t FCmp = sub_1CC56C20C(v49, (uint64_t)v48, (unsigned __int8 *)&v225);
LABEL_100:
      ElementPtr = (llvm::Constant **)FCmp;
      goto LABEL_101;
    }
    if (a2 && (v8 - 83) >= 0xFFFFFFFE)
    {
      uint64_t v51 = (llvm::ConstantExpr *)(*(_WORD *)(v7 + 18) & 0x3F);
      uint64_t v52 = (uint64_t ***)sub_1CD167A7C((void *)a1, *(void *)(v7 - 64));
      uint64_t v53 = (llvm::Constant *)sub_1CD167A7C((void *)a1, *(void *)(v7 - 32));
      if (v51 <= 0xF) {
        uint64_t FCmp = llvm::ConstantExpr::getFCmp(v51, v52, v53, 0);
      }
      else {
        uint64_t FCmp = (uint64_t)llvm::ConstantExpr::getICmp(v51, (llvm::Type *)v52, v53, 0, v54);
      }
      goto LABEL_100;
    }
    if (a2 && (v8 - 79) >= 0xFFFFFFF3)
    {
      uint64_t v55 = (llvm::ConstantExpr *)(v8 - 28);
      uint64_t v56 = (llvm::ConstantExpr *)sub_1CD167A7C((void *)a1, *(void *)(v7 - 32));
      uint64_t FCmp = (uint64_t)llvm::ConstantExpr::getCast(v55, v56, *(llvm::Constant ****)v7, 0);
      goto LABEL_100;
    }
    if (a2 && v8 == 85)
    {
      int v57 = (llvm::ConstantExpr *)sub_1CD167A7C((void *)a1, *(void *)(v7 - 96));
      unsigned int v58 = (llvm::PoisonValue **)sub_1CD167A7C((void *)a1, *(void *)(v7 - 64));
      unsigned int v59 = (llvm::Constant *)sub_1CD167A7C((void *)a1, *(void *)(v7 - 32));
      uint64_t FCmp = (uint64_t)llvm::ConstantExpr::getSelect(v57, v58, v59, 0, v60);
      goto LABEL_100;
    }
    if (a2 && v8 == 92)
    {
      uint64_t v66 = (llvm::Constant *)sub_1CD167A7C((void *)a1, *(void *)(v7 - 32));
      uint64_t FCmp = (uint64_t)llvm::ConstantExpr::getExtractValue(v66, *(unsigned int **)(v7 + 64), *(unsigned int *)(v7 + 72), 0);
      goto LABEL_100;
    }
    if (a2 && v8 == 93)
    {
      unint64_t v67 = (llvm::Constant *)sub_1CD167A7C((void *)a1, *(void *)(v7 - 64));
      uint64_t v68 = (uint64_t *)sub_1CD167A7C((void *)a1, *(void *)(v7 - 32));
      uint64_t FCmp = (uint64_t)llvm::ConstantExpr::getInsertValue(v67, v68, *(_DWORD **)(v7 + 64), *(unsigned int *)(v7 + 72), 0);
      goto LABEL_100;
    }
    if (v8 == 62) {
      uint64_t v69 = v7;
    }
    else {
      uint64_t v69 = 0;
    }
    if (a2 && v8 == 62)
    {
      uint64_t v70 = sub_1CD167A7C((void *)a1, *(void *)(v69 - 32 * (*(_DWORD *)(v69 + 20) & 0x7FFFFFF)));
      uint64_t v71 = (uint64_t *)v70;
      uint64_t v225 = &v227;
      uint64_t v226 = 0x800000000;
      int v72 = *(_DWORD *)(v69 + 20);
      if ((v72 & 0x40000000) != 0)
      {
        uint64_t v74 = *(void *)(v69 - 8);
        uint64_t v73 = v72 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v73 = v72 & 0x7FFFFFF;
        uint64_t v74 = v69 - 32 * v73;
      }
      if (v73 == 1)
      {
        unsigned int v108 = 0;
        uint64_t v109 = &v227;
      }
      else
      {
        BOOL v214 = (uint64_t *)v70;
        int v110 = (uint64_t *)(v74 + 32);
        uint64_t v111 = 32 * v73 - 32;
        do
        {
          uint64_t v112 = sub_1CD167A7C((void *)a1, *v110);
          if (v226 >= (unint64_t)HIDWORD(v226)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v225 + v226) = v112;
          unsigned int v108 = v226 + 1;
          LODWORD(v226) = v226 + 1;
          v110 += 4;
          v111 -= 32;
        }
        while (v111);
        uint64_t v109 = (uint64_t *)v225;
        uint64_t v71 = v214;
      }
      ElementPtr = (llvm::Constant **)llvm::ConstantExpr::getGetElementPtr(*(void *)(v69 + 64), v71, (uint64_t)v109, v108, (*(unsigned char *)(v69 + 17) & 2) != 0, 0, 0);
      if (v225 != &v227) {
        free(v225);
      }
      goto LABEL_101;
    }
    if (v8 == 60) {
      uint64_t v80 = v7;
    }
    else {
      uint64_t v80 = 0;
    }
    if (a2 && v8 == 60)
    {
      int v81 = *(unsigned __int8 *)(v80 + 16);
      if (v81 == 60 || v81 == 61)
      {
        __int16 v82 = *(_WORD *)(v80 + 18);
        if (v82 & 0x380) != 0 || (v82) {
          return 0;
        }
      }
      else if (v81 - 63) < 3 || (*(_WORD *)(v80 + 18))
      {
        return 0;
      }
      uint64_t v83 = sub_1CD167A7C((void *)a1, *(void *)(v80 - 32));
      uint64_t v84 = *(llvm::DataLayout **)(a1 + 584);
      uint64_t v85 = *(void *)(a1 + 592);
      uint64_t v86 = 8;
      uint64_t v225 = (void *)1;
      do
      {
        *(void **)((char *)&v225 + v86) = (void *)-4096;
        v86 += 16;
      }
      while (v86 != 72);
      uint64_t v91 = sub_1CBFB8694(v83, v84, v85, (uint64_t)&v225);
      if ((v225 & 1) == 0) {
        MEMORY[0x1D25D9CD0](v226, 8);
      }
      uint64_t result = (uint64_t)llvm::Evaluator::ComputeLoadResult((llvm::Evaluator *)a1, v91, *(llvm::Type **)v80, v87, v88, v89, v90);
      ElementPtr = (llvm::Constant **)result;
      if (!result) {
        return result;
      }
      goto LABEL_101;
    }
    if (v8 == 59) {
      uint64_t v95 = v7;
    }
    else {
      uint64_t v95 = 0;
    }
    if (a2 && v8 == 59)
    {
      if (llvm::AllocaInst::isArrayAllocation((llvm::AllocaInst *)v95)) {
        return 0;
      }
      int v97 = *(llvm::UndefValue **)(v95 + 64);
      unsigned int v98 = llvm::UndefValue::get(v97, v96);
      unsigned int v99 = *(uint64_t ***)v95;
      unint64_t v212 = (unint64_t)v98;
      int v213 = v97;
      if ((*(unsigned char *)(v95 + 23) & 0x10) != 0)
      {
        uint64_t v100 = **v99;
        uint64_t v101 = *(void *)(v100 + 152);
        uint64_t v102 = *(unsigned int *)(v100 + 168);
        if (!v102) {
          goto LABEL_172;
        }
        LODWORD(v103) = (v102 - 1) & ((v95 >> 4) ^ (v95 >> 9));
        unsigned int v104 = (uint64_t *)(v101 + 16 * v103);
        uint64_t v105 = *v104;
        if (*v104 != v95)
        {
          int v106 = 1;
          while (v105 != -4096)
          {
            int v107 = v103 + v106++;
            uint64_t v103 = v107 & (v102 - 1);
            uint64_t v105 = *(void *)(v101 + 16 * v103);
            if (v105 == v95)
            {
              unsigned int v104 = (uint64_t *)(v101 + 16 * v103);
              goto LABEL_173;
            }
          }
LABEL_172:
          unsigned int v104 = (uint64_t *)(v101 + 16 * v102);
        }
LABEL_173:
        uint64_t v117 = (void *)v104[1];
        uint64_t v120 = *v117;
        unint64_t v119 = (char *)(v117 + 2);
        uint64_t v118 = v120;
      }
      else
      {
        uint64_t v118 = 0;
        unint64_t v119 = &byte_1CFBCE98E;
      }
      unsigned int v121 = *((_DWORD *)v99 + 2);
      if ((v121 & 0xFE) == 0x12) {
        unsigned int v121 = *(_DWORD *)(*v99[2] + 8);
      }
      uint64_t v122 = operator new(0x78uLL);
      v122[13] = v122[13] & 0x38000000 | 1;
      uint64_t v123 = v122 + 8;
      *(void *)uint64_t v122 = 0;
      *((void *)v122 + 1) = 0;
      *((void *)v122 + 2) = 0;
      *((void *)v122 + 3) = v122 + 8;
      WORD4(v228) = 261;
      uint64_t v225 = v119;
      uint64_t v226 = v118;
      llvm::GlobalVariable::GlobalVariable((unint64_t *)v122 + 4, v213, 0, 7, v212, (const char **)&v225, 0, (llvm::Type *)(v121 >> 8), 0);
      unint64_t v231 = v123;
      sub_1CD87DD74(v217, (uint64_t *)&v231);
      sub_1CC92C184((uint64_t *)&v231, 0);
      ElementPtr = *(llvm::Constant ***)(*(void *)(a1 + 120) + 8 * *(unsigned int *)(a1 + 128) - 8);
LABEL_101:
      if (*(void *)(v7 + 8))
      {
        uint64_t v75 = *(llvm::DataLayout **)(a1 + 584);
        uint64_t v76 = *(void *)(a1 + 592);
        uint64_t v77 = 8;
        uint64_t v225 = (void *)1;
        do
        {
          *(void **)((char *)&v225 + v77) = (void *)-4096;
          v77 += 16;
        }
        while (v77 != 72);
        int v78 = sub_1CBFB8694((uint64_t)ElementPtr, v75, v76, (uint64_t)&v225);
        if ((v225 & 1) == 0) {
          MEMORY[0x1D25D9CD0](v226, 8);
        }
        uint64_t v225 = (void *)v7;
        unint64_t v79 = *(void *)(a1 + 40) + *(void *)(a1 + 32) - 1;
        sub_1CC01F644((uint64_t *)(*(void *)(*(void *)(a1 + 8) + 8 * (v79 / 0xAA)) + 24 * (v79 % 0xAA)), &v225)[1] = v78;
        if (!a2) {
          goto LABEL_104;
        }
      }
      else if (!a2)
      {
        goto LABEL_104;
      }
      if (*(unsigned char *)(v7 + 16) == 33)
      {
        uint64_t v192 = (uint64_t *)(v7 - 96);
        goto LABEL_322;
      }
      goto LABEL_104;
    }
    if (v8 != 84 && v8 != 33) {
      break;
    }
    if (sub_1CBF63B28(v7)) {
      goto LABEL_104;
    }
    uint64_t v113 = *(void *)(v7 - 32);
    if (*(unsigned char *)(v113 + 16) == 24) {
      return 0;
    }
    if (*(unsigned char *)(v113 + 16)
      || *(unsigned char *)(v7 + 16) != 84
      || *(void *)(v113 + 24) != *(void *)(v7 + 72)
      || (*(unsigned char *)(v113 + 33) & 0x20) == 0)
    {
      goto LABEL_232;
    }
    if (*(_DWORD *)(*(void *)(a2 - 56) + 36) == 199)
    {
      uint64_t v114 = &v6[-4 * (*(_DWORD *)(a2 - 4) & 0x7FFFFFF)];
      uint64_t v115 = v114[12];
      uint64_t v116 = *((unsigned int *)v115 + 8);
      if (v116 > 0x40)
      {
        int v124 = 0;
        int64_t v125 = (unint64_t)(v116 + 63) >> 6;
        do
        {
          BOOL v126 = v125-- < 1;
          if (v126) {
            break;
          }
          unint64_t v127 = *(void *)(*((void *)v115 + 3) + 8 * v125);
          v124 += __clz(v127);
        }
        while (!v127);
        int v128 = v116 | 0xFFFFFFC0;
        if ((v116 & 0x3F) == 0) {
          int v128 = 0;
        }
        if (v124 + v128 != v116) {
          return 0;
        }
      }
      else if (*((void *)v115 + 3))
      {
        return 0;
      }
      uint64_t v129 = llvm::Value::stripPointerCasts(*v114);
      uint64_t v130 = sub_1CD167A7C((void *)a1, (uint64_t)v129);
      uint64_t v131 = sub_1CD167A7C((void *)a1, (uint64_t)v6[-4 * (*(_DWORD *)(a2 - 4) & 0x7FFFFFF) + 4]);
      int v132 = (llvm::Constant *)sub_1CD167A7C((void *)a1, v130);
      uint64_t v137 = llvm::Evaluator::ComputeLoadResult((llvm::Evaluator *)a1, v132, *(llvm::Type **)v6[-4 * (*(_DWORD *)(a2 - 4) & 0x7FFFFFF) + 4], v133, v134, v135, v136);
      int v138 = *(unsigned __int8 *)(v131 + 16);
      if (v131) {
        BOOL v139 = v138 == 16;
      }
      else {
        BOOL v139 = 0;
      }
      if (v139)
      {
        uint64_t v140 = *(unsigned int *)(v131 + 32);
        if (v140 > 0x40)
        {
          int v184 = 0;
          int64_t v185 = (unint64_t)(v140 + 63) >> 6;
          do
          {
            BOOL v126 = v185-- < 1;
            if (v126) {
              break;
            }
            unint64_t v186 = *(void *)(*(void *)(v131 + 24) + 8 * v185);
            v184 += __clz(v186);
          }
          while (!v186);
          int v187 = v140 | 0xFFFFFFC0;
          if ((v140 & 0x3F) == 0) {
            int v187 = 0;
          }
          BOOL v141 = v184 + v187 == v140;
        }
        else
        {
          BOOL v141 = *(void *)(v131 + 24) == 0;
        }
        int v142 = v141;
      }
      else
      {
        if (v131) {
          BOOL v146 = v138 == 17;
        }
        else {
          BOOL v146 = 0;
        }
        if (v146)
        {
          int v142 = sub_1CB844168(v131, 0.0);
        }
        else
        {
          unsigned __int8 v147 = v138 - 13;
          if (v147 > 7u || ((0xE1u >> v147) & 1) == 0) {
            goto LABEL_212;
          }
          int v142 = 1;
        }
      }
      if (v142) {
        BOOL v143 = v137 == 0;
      }
      else {
        BOOL v143 = 1;
      }
      if (!v143)
      {
        int v144 = *((unsigned __int8 *)v137 + 16);
        if (v144 == 16)
        {
          uint64_t v145 = *((unsigned int *)v137 + 8);
          if (v145 >= 0x41)
          {
            int v188 = 0;
            int64_t v189 = (unint64_t)(v145 + 63) >> 6;
            do
            {
              BOOL v126 = v189-- < 1;
              if (v126) {
                break;
              }
              unint64_t v190 = *(void *)(*((void *)v137 + 3) + 8 * v189);
              v188 += __clz(v190);
            }
            while (!v190);
            int v191 = v145 | 0xFFFFFFC0;
            if ((v145 & 0x3F) == 0) {
              int v191 = 0;
            }
            if (v188 + v191 == v145) {
              goto LABEL_104;
            }
          }
          else if (!*((void *)v137 + 3))
          {
            goto LABEL_104;
          }
        }
        else if (v144 == 17)
        {
          if (sub_1CB844168((uint64_t)v137, 0.0)) {
            goto LABEL_104;
          }
        }
        else if ((v144 - 18) < 3 || v144 == 13)
        {
          goto LABEL_104;
        }
      }
    }
LABEL_212:
    if (llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)(a2 - 24))) {
      goto LABEL_104;
    }
    int v148 = *(_DWORD *)(*(void *)(a2 - 56) + 36);
    if (v148 > 243)
    {
      if (v148 == 244 || v148 == 272) {
        goto LABEL_104;
      }
LABEL_228:
      uint64_t v159 = llvm::Value::stripPointerCastsForAliasAnalysis((llvm::Value *)v7);
      if (v159 == (llvm::Value *)v7) {
        return 0;
      }
      uint64_t result = sub_1CD167A7C((void *)a1, (uint64_t)v159);
      if (!result) {
        return result;
      }
      ElementPtr = (llvm::Constant **)result;
      *a4 = 1;
      if (*(llvm::Constant **)result == *v6) {
        goto LABEL_101;
      }
      ElementPtr = (llvm::Constant **)sub_1CC56C0C0((llvm *)0x31, (llvm::detail::IEEEFloat *)result, *v6, 0);
      if (ElementPtr) {
        goto LABEL_101;
      }
LABEL_232:
      uint64_t v225 = &v227;
      uint64_t v226 = 0x800000000;
      CalleeWithFormalArgs = (llvm::GlobalValue *)llvm::Evaluator::getCalleeWithFormalArgs((void *)a1, v7, (uint64_t)&v225);
      uint64_t v161 = CalleeWithFormalArgs;
      if (!CalleeWithFormalArgs) {
        goto LABEL_247;
      }
      if (llvm::GlobalValue::isInterposable(CalleeWithFormalArgs)) {
        goto LABEL_246;
      }
      if (*((unsigned char *)v161 + 16))
      {
        if (*((unsigned char *)v161 + 16) == 3 && (*((_DWORD *)v161 + 5) & 0x7FFFFFF) == 0) {
          goto LABEL_240;
        }
LABEL_244:
        if (*(_DWORD *)(*((void *)v161 + 3) + 8) > 0xFFu
          || (unint64_t v231 = 0, sub_1CC92BDBC((void *)a1), (llvm::Evaluator::EvaluateFunction(a1, v161) & 1) == 0))
        {
LABEL_246:
          LOBYTE(v161) = 0;
LABEL_247:
          ElementPtr = 0;
LABEL_248:
          if (v225 != &v227) {
            free(v225);
          }
          if ((v161 & 1) == 0) {
            return 0;
          }
          goto LABEL_101;
        }
        sub_1CD87DDFC((void *)a1);
        ElementPtr = (llvm::Constant **)v231;
        if (!v231)
        {
LABEL_243:
          LOBYTE(v161) = 1;
          goto LABEL_248;
        }
LABEL_241:
        if (*ElementPtr == *(llvm::Constant **)v7) {
          goto LABEL_243;
        }
        ElementPtr = (llvm::Constant **)llvm::ConstantFoldLoadThroughBitcast(ElementPtr, *(llvm::Constant ****)v7, *(llvm::Type **)(a1 + 584), v162);
        if (ElementPtr) {
          goto LABEL_243;
        }
      }
      else
      {
        if (*((llvm::GlobalValue **)v161 + 9) != (llvm::GlobalValue *)((char *)v161 + 72)
          || (*((unsigned char *)v161 + 34) & 0x80) != 0)
        {
          goto LABEL_244;
        }
LABEL_240:
        ElementPtr = (llvm::Constant **)llvm::ConstantFoldCall(v7, (uint64_t ***)v161, (uint64_t)v225, v226, *(uint64_t **)(a1 + 592));
        if (ElementPtr) {
          goto LABEL_241;
        }
      }
      LOBYTE(v161) = 0;
      goto LABEL_248;
    }
    if (v148 == 7) {
      goto LABEL_104;
    }
    if (v148 != 164) {
      goto LABEL_228;
    }
    if (*(void *)(a2 - 16)) {
      return 0;
    }
    unsigned int v149 = &v6[-4 * (*(_DWORD *)(a2 - 4) & 0x7FFFFFF)];
    uint64_t v150 = *v149;
    uint64_t v151 = (llvm::Value *)sub_1CD167A7C((void *)a1, (uint64_t)v149[4]);
    int v152 = llvm::Value::stripPointerCasts(v151);
    if (v152) {
      BOOL v153 = *((unsigned char *)v152 + 16) == 3;
    }
    else {
      BOOL v153 = 0;
    }
    if (v153)
    {
      uint64_t v154 = *((unsigned int *)v150 + 8);
      if (v154)
      {
        int v155 = v152;
        uint64_t v156 = *((void *)v152 + 3);
        uint64_t v157 = (unint64_t *)((char *)v150 + 24);
        if (v154 > 0x40)
        {
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::Constant *)((char *)v150 + 24)) == v154) {
            goto LABEL_104;
          }
          int v163 = 0;
          int64_t v164 = (unint64_t)(v154 + 63) >> 6;
          do
          {
            BOOL v126 = v164-- < 1;
            if (v126) {
              break;
            }
            unint64_t v165 = *(void *)(*v157 + 8 * v164);
            v163 += __clz(v165);
          }
          while (!v165);
          int v166 = v154 | 0xFFFFFFC0;
          if ((v154 & 0x3F) == 0) {
            int v166 = 0;
          }
          unint64_t v158 = (v154 - v163 - v166) <= 0x40 ? *(void *)*v157 : -1;
        }
        else
        {
          unint64_t v158 = *v157;
          if (*v157 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v154) {
            goto LABEL_104;
          }
        }
        uint64_t v168 = sub_1CB83544C(*(void *)(a1 + 584), v156);
        if (v167 == 1) {
        if (v158 >= (unint64_t)(v168 + 7) >> 3)
        }
        {
          uint64_t v169 = *(void *)(a1 + 400);
          uint64_t v170 = *(unsigned int *)(a1 + 412);
          if (v169 == *(void *)(a1 + 392))
          {
            if (v170)
            {
              uint64_t v171 = 0;
              uint64_t v172 = 8 * v170;
              int v173 = *(llvm::Value ***)(a1 + 400);
              while (*v173 != v155)
              {
                if (*v173 == (llvm::Value *)-2) {
                  uint64_t v171 = v173;
                }
                ++v173;
                v172 -= 8;
                if (!v172)
                {
                  if (!v171) {
                    goto LABEL_276;
                  }
                  *uint64_t v171 = v155;
                  --*(_DWORD *)(a1 + 416);
                  goto LABEL_104;
                }
              }
              goto LABEL_104;
            }
LABEL_276:
            unsigned int v174 = *(_DWORD *)(a1 + 408);
            if (v170 < v174)
            {
              *(_DWORD *)(a1 + 412) = v170 + 1;
              *(void *)(v169 + 8 * v170) = v155;
              goto LABEL_104;
            }
          }
          else
          {
            unsigned int v174 = *(_DWORD *)(a1 + 408);
          }
          if (3 * v174 <= 4 * ((int)v170 - *(_DWORD *)(a1 + 416)))
          {
            if (v174 >= 0x40) {
              v174 *= 2;
            }
            else {
              unsigned int v174 = 128;
            }
          }
          else if (v174 - v170 >= v174 >> 3)
          {
            goto LABEL_281;
          }
          llvm::SmallPtrSetImplBase::Grow(v215, v174);
          unsigned int v174 = *(_DWORD *)(a1 + 408);
          uint64_t v169 = *(void *)(a1 + 400);
LABEL_281:
          unsigned int v175 = v174 - 1;
          unsigned int v176 = (v174 - 1) & ((v155 >> 4) ^ (v155 >> 9));
          unsigned int v177 = (llvm::Value **)(v169 + 8 * v176);
          uint64_t v178 = *v177;
          if (*v177 == (llvm::Value *)-1)
          {
            unsigned int v179 = 0;
LABEL_295:
            if (v179) {
              unint64_t v183 = v179;
            }
            else {
              unint64_t v183 = v177;
            }
            if (*v183 != v155)
            {
              if (*v183 == (llvm::Value *)-2) {
                --*(_DWORD *)(a1 + 416);
              }
              else {
                ++*(_DWORD *)(a1 + 412);
              }
              *unint64_t v183 = v155;
            }
          }
          else
          {
            unsigned int v179 = 0;
            int v180 = 1;
            while (v178 != v155)
            {
              if (v179) {
                BOOL v181 = 0;
              }
              else {
                BOOL v181 = v178 == (llvm::Value *)-2;
              }
              if (v181) {
                unsigned int v179 = v177;
              }
              unsigned int v182 = v176 + v180++;
              unsigned int v176 = v182 & v175;
              unsigned int v177 = (llvm::Value **)(v169 + 8 * (v182 & v175));
              uint64_t v178 = *v177;
              if (*v177 == (llvm::Value *)-1) {
                goto LABEL_295;
              }
            }
          }
        }
      }
    }
LABEL_104:
    a2 = *(void *)(a2 + 8);
  }
  if ((v8 - 29) > 0xA) {
    return 0;
  }
  if (v8 == 30) {
    uint64_t v195 = v7;
  }
  else {
    uint64_t v195 = 0;
  }
  if (!a2 || v8 != 30)
  {
    if (v8 == 31) {
      uint64_t v196 = v7;
    }
    else {
      uint64_t v196 = 0;
    }
    if (a2 && v8 == 31)
    {
      int v197 = *(_DWORD *)(v196 + 20);
      if ((v197 & 0x40000000) != 0) {
        int v198 = *(uint64_t **)(v196 - 8);
      }
      else {
        int v198 = (uint64_t *)(v196 - 32 * (v197 & 0x7FFFFFF));
      }
      uint64_t v206 = sub_1CD167A7C((void *)a1, *v198);
      uint64_t result = 0;
      if (v206 && *(unsigned char *)(v206 + 16) == 16)
      {
        sub_1CC025540(v196, v206);
        int v208 = *(_DWORD *)(v196 + 20);
        if ((v208 & 0x40000000) != 0) {
          uint64_t v209 = *(void *)(v196 - 8);
        }
        else {
          uint64_t v209 = v196 - 32 * (v208 & 0x7FFFFFF);
        }
        if (v207 == 4294967294) {
          uint64_t v211 = 1;
        }
        else {
          uint64_t v211 = (2 * v207 + 3);
        }
        uint64_t v192 = (uint64_t *)(v209 + 32 * v211);
        goto LABEL_322;
      }
      return result;
    }
    if (v8 == 32) {
      uint64_t v199 = v7;
    }
    else {
      uint64_t v199 = 0;
    }
    if (a2 && v8 == 32)
    {
      int v200 = *(_DWORD *)(v199 + 20);
      if ((v200 & 0x40000000) != 0) {
        uint64_t v201 = *(uint64_t **)(v199 - 8);
      }
      else {
        uint64_t v201 = (uint64_t *)(v199 - 32 * (v200 & 0x7FFFFFF));
      }
      uint64_t v210 = (llvm::Value *)sub_1CD167A7C((void *)a1, *v201);
      uint64_t v205 = llvm::Value::stripPointerCasts(v210);
      uint64_t result = 0;
      if (v205 && *((unsigned char *)v205 + 16) == 4) {
        goto LABEL_366;
      }
      return result;
    }
    if (v8 == 29)
    {
      uint64_t v194 = 0;
      uint64_t v193 = a3;
      goto LABEL_323;
    }
    return 0;
  }
  if ((*(_DWORD *)(v195 + 20) & 0x7FFFFFF) == 1)
  {
    uint64_t v192 = (uint64_t *)(v195 - 32);
    goto LABEL_322;
  }
  uint64_t v202 = sub_1CD167A7C((void *)a1, *(void *)(v195 - 96));
  uint64_t result = 0;
  if (v202 && *(unsigned char *)(v202 + 16) == 16)
  {
    uint64_t v203 = (void *)(v202 + 24);
    if (*(_DWORD *)(v202 + 32) >= 0x41u) {
      uint64_t v203 = (void *)*v203;
    }
    if (*v203) {
      uint64_t v204 = 0;
    }
    else {
      uint64_t v204 = -1;
    }
    uint64_t v205 = (llvm::Value *)(v195 + 32 * v204);
LABEL_366:
    uint64_t v192 = (uint64_t *)((char *)v205 - 32);
LABEL_322:
    uint64_t v193 = a3;
    uint64_t v194 = *v192;
LABEL_323:
    *uint64_t v193 = v194;
    return 1;
  }
  return result;
}

uint64_t sub_1CD168E74(uint64_t a1, const llvm::Value *a2, uint64_t a3)
{
  BOOL v4 = a2;
  while (1)
  {
    uint64_t v6 = *((void *)v4 + 1);
    uint64_t v7 = *((unsigned int *)v4 + 5);
    if (v6 == *(void *)v4)
    {
      if (v7)
      {
        int v8 = 0;
        uint64_t v9 = 8 * v7;
        int v10 = (void *)*((void *)v4 + 1);
        while (*v10 != a1)
        {
          if (*v10 == -2) {
            int v8 = v10;
          }
          ++v10;
          v9 -= 8;
          if (!v9)
          {
            if (!v8) {
              goto LABEL_10;
            }
            *int v8 = a1;
            --*((_DWORD *)v4 + 6);
            goto LABEL_34;
          }
        }
        return 1;
      }
LABEL_10:
      a2 = (const llvm::Value *)*((unsigned int *)v4 + 4);
      if (v7 < a2)
      {
        *((_DWORD *)v4 + 5) = v7 + 1;
        *(void *)(v6 + 8 * v7) = a1;
        goto LABEL_34;
      }
    }
    else
    {
      a2 = (const llvm::Value *)*((unsigned int *)v4 + 4);
    }
    if (3 * (int)a2 <= (4 * (v7 - *((_DWORD *)v4 + 6))))
    {
      if (a2 >= 0x40) {
        LODWORD(a2) = 2 * a2;
      }
      else {
        LODWORD(a2) = 128;
      }
LABEL_66:
      llvm::SmallPtrSetImplBase::Grow(v4, a2);
      a2 = (const llvm::Value *)*((unsigned int *)v4 + 4);
      uint64_t v6 = *((void *)v4 + 1);
      goto LABEL_15;
    }
    if ((int)a2 - (int)v7 < a2 >> 3) {
      goto LABEL_66;
    }
LABEL_15:
    int v11 = a2 - 1;
    unsigned int v12 = (a2 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    uint64_t v13 = (void *)(v6 + 8 * v12);
    uint64_t v14 = *v13;
    if (*v13 != -1)
    {
      uint64_t v15 = 0;
      int v16 = 1;
      while (v14 != a1)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v14 == -2;
        }
        if (v17) {
          uint64_t v15 = v13;
        }
        unsigned int v18 = v12 + v16++;
        unsigned int v12 = v18 & v11;
        uint64_t v13 = (void *)(v6 + 8 * (v18 & v11));
        uint64_t v14 = *v13;
        if (*v13 == -1) {
          goto LABEL_27;
        }
      }
      return 1;
    }
    uint64_t v15 = 0;
LABEL_27:
    if (v15) {
      unsigned int v19 = v15;
    }
    else {
      unsigned int v19 = v13;
    }
    if (*v19 == a1) {
      return 1;
    }
    if (*v19 == -2) {
      --*((_DWORD *)v4 + 6);
    }
    else {
      ++*((_DWORD *)v4 + 5);
    }
    *unsigned int v19 = a1;
LABEL_34:
    unsigned int v20 = *(unsigned __int8 *)(a1 + 16);
    if (a1 && v20 <= 3)
    {
      uint64_t result = 0;
      int v32 = *(_DWORD *)(a1 + 32);
      if ((v32 & 0x300) != 0x100 && (v32 & 0x1C00) == 0)
      {
        llvm::GlobalPtrAuthInfo::analyze((uint64_t ***)a1, a2);
        return v33 == 0;
      }
      return result;
    }
    uint64_t result = 1;
    if (v20 == 4) {
      return result;
    }
    int v22 = *(_DWORD *)(a1 + 20);
    uint64_t v23 = v22 & 0x7FFFFFF;
    if ((v22 & 0x7FFFFFF) == 0) {
      return result;
    }
    if (v20 - 8 <= 2)
    {
      if ((v22 & 0x40000000) != 0)
      {
        unint64_t v34 = *(uint64_t **)(a1 - 8);
      }
      else
      {
        uint64_t v23 = v23;
        unint64_t v34 = (uint64_t *)(a1 - 32 * v23);
      }
      uint64_t v35 = 32 * v23 - 32;
      do
      {
        uint64_t v36 = *v34;
        v34 += 4;
        uint64_t result = sub_1CD168E74(v36, v4, a3);
        if (result) {
          BOOL v37 = v35 == 0;
        }
        else {
          BOOL v37 = 1;
        }
        v35 -= 32;
      }
      while (!v37);
      return result;
    }
    uint64_t result = 0;
    unsigned int v24 = *(unsigned __int16 *)(a1 + 18);
    if (v24 <= 0x2E) {
      break;
    }
    if (v24 - 47 >= 2)
    {
      if (v24 != 49) {
        return result;
      }
      uint64_t v23 = v23;
    }
    else
    {
      uint64_t v25 = sub_1CB83544C(a3, *(void *)a1);
      int v27 = v26;
      if (v25 != sub_1CB83544C(a3, **(void **)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF))) || v27 != a2) {
        return 0;
      }
      uint64_t v23 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
    }
    uint64_t v30 = (uint64_t *)(a1 - 32 * v23);
LABEL_60:
    a1 = *v30;
  }
  if (v24 == 13)
  {
    uint64_t v30 = (uint64_t *)(a1 - 32 * v23);
    if (*(unsigned char *)(v30[4] + 16) != 16) {
      return 0;
    }
    goto LABEL_60;
  }
  if (v24 != 34) {
    return result;
  }
  if (v23 == 1)
  {
    uint64_t v29 = -1;
LABEL_59:
    uint64_t v30 = (uint64_t *)(a1 + 32 * v29);
    goto LABEL_60;
  }
  uint64_t v29 = -(uint64_t)v23;
  unsigned int v31 = 1;
  while (*(unsigned char *)(*(void *)(a1 - 32 * v23 + 32 * v31) + 16) == 16)
  {
    if (v23 == ++v31) {
      goto LABEL_59;
    }
  }
  return 0;
}

uint64_t llvm::Evaluator::EvaluateFunction(uint64_t a1, llvm::Function *this, uint64_t *a3, void *a4)
{
  uint64_t v7 = *(llvm::Function ***)(a1 + 48);
  uint64_t v8 = *(unsigned int *)(a1 + 56);
  uint64_t v9 = v7;
  if (v8)
  {
    uint64_t v10 = 8 * v8;
    uint64_t v9 = *(llvm::Function ***)(a1 + 48);
    while (*v9 != this)
    {
      ++v9;
      v10 -= 8;
      if (!v10)
      {
        uint64_t v9 = &v7[v8];
        break;
      }
    }
  }
  if (v8 != v9 - v7) {
    return 0;
  }
  if (v8 >= *(_DWORD *)(a1 + 60)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v7[v8] = this;
  ++*(_DWORD *)(a1 + 56);
  if ((*((_WORD *)this + 9) & 1) == 0)
  {
    int v11 = (unsigned char *)*((void *)this + 11);
LABEL_12:
    uint64_t v13 = v11;
    goto LABEL_14;
  }
  llvm::Function::BuildLazyArguments(this);
  int v11 = (unsigned char *)*((void *)this + 11);
  if ((*((_WORD *)this + 9) & 1) == 0) {
    goto LABEL_12;
  }
  llvm::Function::BuildLazyArguments(this);
  uint64_t v13 = (unsigned char *)*((void *)this + 11);
LABEL_14:
  uint64_t v14 = &v13[40 * *((void *)this + 12)];
  if (v11 != v14)
  {
    unsigned int v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(*a4 + 8 * v15);
      uint64_t v51 = v11;
      unint64_t v17 = *(void *)(a1 + 40) + *(void *)(a1 + 32) - 1;
      sub_1CC01F644((uint64_t *)(*(void *)(*(void *)(a1 + 8) + 8 * (v17 / 0xAA)) + 24 * (v17 % 0xAA)), &v51)[1] = v16;
      v11 += 40;
      ++v15;
    }
    while (v11 != v14);
  }
  uint64_t v51 = v55;
  uint64_t v52 = v55;
  uint64_t v53 = 32;
  int v54 = 0;
  uint64_t v18 = *((void *)this + 10);
  uint64_t v19 = v18 - 24;
  if (v18) {
    uint64_t v20 = v18 - 24;
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *(void *)(v20 + 48);
  uint64_t v50 = 0;
  char v49 = 0;
  uint64_t v12 = 0;
  if (!llvm::Evaluator::EvaluateBlock(a1, v21, &v50, &v49)) {
    goto LABEL_83;
  }
  while (1)
  {
    uint64_t v22 = v19;
    uint64_t v19 = v50;
    if (!v50)
    {
      uint64_t v43 = *(void *)(v22 + 40);
      if (v43 == v22 + 40)
      {
        uint64_t v44 = 0;
      }
      else
      {
        if (v43) {
          uint64_t v44 = v43 - 24;
        }
        else {
          uint64_t v44 = 0;
        }
        if (*(unsigned __int8 *)(v44 + 16) - 29 >= 0xB) {
          uint64_t v44 = 0;
        }
      }
      uint64_t v45 = *(_DWORD *)(v44 + 20) & 0x7FFFFFF;
      if (v45)
      {
        uint64_t v46 = *(void *)(v44 - 32 * v45);
        if (v49 && *(unsigned char *)(*(void *)v46 + 8) != 7) {
          goto LABEL_82;
        }
        *a3 = sub_1CD167A7C((void *)a1, v46);
      }
      --*(_DWORD *)(a1 + 56);
      uint64_t v12 = 1;
      goto LABEL_83;
    }
    uint64_t v23 = v52;
    uint64_t v24 = HIDWORD(v53);
    if (v52 != v51)
    {
      unsigned int v28 = v53;
      goto LABEL_33;
    }
    if (HIDWORD(v53)) {
      break;
    }
LABEL_30:
    unsigned int v28 = v53;
    if (HIDWORD(v53) < v53)
    {
      ++HIDWORD(v53);
      *(void *)&v52[8 * v24] = v50;
      goto LABEL_54;
    }
LABEL_33:
    if (3 * v28 <= 4 * (HIDWORD(v53) - v54))
    {
      if (v28 >= 0x40) {
        v28 *= 2;
      }
      else {
        unsigned int v28 = 128;
      }
LABEL_68:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v51, v28);
      unsigned int v28 = v53;
      uint64_t v23 = v52;
      goto LABEL_35;
    }
    if (v28 - HIDWORD(v53) < v28 >> 3) {
      goto LABEL_68;
    }
LABEL_35:
    unsigned int v29 = v28 - 1;
    unsigned int v30 = (v28 - 1) & ((v19 >> 4) ^ (v19 >> 9));
    unsigned int v31 = &v23[8 * v30];
    uint64_t v32 = *(void *)v31;
    if (*(void *)v31 != -1)
    {
      char v33 = 0;
      int v34 = 1;
      while (v32 != v19)
      {
        if (v33) {
          BOOL v35 = 0;
        }
        else {
          BOOL v35 = v32 == -2;
        }
        if (v35) {
          char v33 = (uint64_t *)v31;
        }
        unsigned int v36 = v30 + v34++;
        unsigned int v30 = v36 & v29;
        unsigned int v31 = &v23[8 * (v36 & v29)];
        uint64_t v32 = *(void *)v31;
        if (*(void *)v31 == -1) {
          goto LABEL_47;
        }
      }
      goto LABEL_82;
    }
    char v33 = 0;
LABEL_47:
    if (v33) {
      BOOL v37 = v33;
    }
    else {
      BOOL v37 = (uint64_t *)v31;
    }
    if (*v37 == v19) {
      goto LABEL_82;
    }
    if (*v37 == -2) {
      --v54;
    }
    else {
      ++HIDWORD(v53);
    }
    *BOOL v37 = v19;
LABEL_54:
    for (uint64_t i = *(void *)(v19 + 48); ; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v39 = i ? i - 24 : 0;
      if (!i || *(unsigned char *)(v39 + 16) != 83) {
        break;
      }
      uint64_t v40 = sub_1CBF73380(i - 24, v22);
      uint64_t v41 = sub_1CD167A7C((void *)a1, v40);
      uint64_t v56 = i - 24;
      unint64_t v42 = *(void *)(a1 + 40) + *(void *)(a1 + 32) - 1;
      sub_1CC01F644((uint64_t *)(*(void *)(*(void *)(a1 + 8) + 8 * (v42 / 0xAA)) + 24 * (v42 % 0xAA)), &v56)[1] = v41;
    }
    uint64_t v50 = 0;
    char v49 = 0;
    if ((llvm::Evaluator::EvaluateBlock(a1, i, &v50, &v49) & 1) == 0) {
      goto LABEL_82;
    }
  }
  uint64_t v25 = 0;
  uint64_t v26 = 8 * HIDWORD(v53);
  int v27 = (uint64_t *)v52;
  while (*v27 != v50)
  {
    if (*v27 == -2) {
      uint64_t v25 = v27;
    }
    ++v27;
    v26 -= 8;
    if (!v26)
    {
      if (!v25) {
        goto LABEL_30;
      }
      *uint64_t v25 = v50;
      --v54;
      goto LABEL_54;
    }
  }
LABEL_82:
  uint64_t v12 = 0;
LABEL_83:
  if (v52 != v51) {
    free(v52);
  }
  return v12;
}

void sub_1CD169634(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  if (v1 == v2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = 170 * ((v1 - v2) >> 3) - 1;
  }
  if ((unint64_t)(v3 - (a1[5] + a1[4])) >= 0x154)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
}

uint64_t sub_1CD16969C(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCFC418;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2648290;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFC420, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CD1697BC;
    v5[1] = &PassRegistry;
    BOOL v4 = v5;
    std::__call_once(&qword_1EBCFC420, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void llvm::initializeFixIrreduciblePass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFC420, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CD1697BC;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCFC420, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD1697BC(llvm *a1, llvm::PassRegistry *a2)
{
}

uint64_t sub_1CD16986C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v50[8] = *MEMORY[0x1E4F143B8];
  uint64_t v48 = v50;
  uint64_t v49 = 0x800000000;
  uint64_t v31 = a1;
  sub_1CD47573C((uint64_t)&v31, (uint64_t)v45);
  BOOL v4 = v46;
  for (uint64_t i = v47; v46 != v47; uint64_t i = v47)
  {
    if ((unint64_t)(i - v4) >= 0x10)
    {
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      int v41 = 0;
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      uint64_t v42 = 0;
      if (v4 == i)
      {
        uint64_t v6 = 0;
        uint64_t v7 = 0;
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        int v35 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        uint64_t v36 = 0;
      }
      else
      {
        do
        {
          uint64_t v8 = *(void *)v4;
          v4 += 8;
          uint64_t v33 = v8;
          sub_1CBB239A4((uint64_t)&v39, &v33);
        }
        while (v4 != i);
        uint64_t v6 = 0;
        uint64_t v7 = 0;
        uint64_t v9 = v43;
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        int v35 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        uint64_t v36 = 0;
        if (v43 != v42)
        {
          do
          {
            uint64_t v32 = 0;
            uint64_t v10 = *(void *)(v9 - 8);
            v9 -= 8;
            uint64_t v32 = v10;
            for (uint64_t j = *(void *)(v10 + 8); j; uint64_t j = *(void *)(j + 8))
            {
              uint64_t v12 = *(void *)(j + 24);
              unsigned int v13 = *(unsigned __int8 *)(v12 + 16);
              if (v12) {
                BOOL v14 = v13 >= 0x1C;
              }
              else {
                BOOL v14 = 0;
              }
              if (v14 && v13 - 29 <= 0xA) {
                llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
              }
            }
          }
          while (v9 != v42);
          uint64_t v6 = v36;
          uint64_t v7 = v37;
        }
      }
      if (v7 - v6 != 8) {
        sub_1CD169F8C(a2, a3, 0, (uint64_t)&v39, (uint64_t)&v33);
      }
      sub_1CC189978(&v33);
      sub_1CC189978(&v39);
    }
    sub_1CD47588C(v45);
    BOOL v4 = v46;
  }
  sub_1CD4750A4(v45);
  sub_1CD4C2668((uint64_t)&v48, (uint64_t)&v48[v49], *(char **)(a2 + 24), *(char **)(a2 + 32));
  for (unsigned int k = v49; v49; unsigned int k = v49)
  {
    uint64_t v17 = v48[k - 1];
    LODWORD(v49) = k - 1;
    sub_1CD87E36C((uint64_t)v45, v17);
    uint64_t v18 = v46;
    for (uint64_t m = v47; v46 != v47; uint64_t m = v47)
    {
      if ((unint64_t)(m - v18) >= 0x20)
      {
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        int v41 = 0;
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        uint64_t v42 = 0;
        if (v18 == m)
        {
          uint64_t v20 = 0;
          uint64_t v21 = 0;
          uint64_t v33 = 0;
          uint64_t v34 = 0;
          int v35 = 0;
          uint64_t v37 = 0;
          uint64_t v38 = 0;
          uint64_t v36 = 0;
        }
        else
        {
          do
          {
            uint64_t v33 = *((void *)v18 + 1);
            sub_1CBB239A4((uint64_t)&v39, &v33);
            v18 += 16;
          }
          while (v18 != m);
          uint64_t v20 = 0;
          uint64_t v21 = 0;
          uint64_t v22 = v43;
          uint64_t v33 = 0;
          uint64_t v34 = 0;
          int v35 = 0;
          uint64_t v37 = 0;
          uint64_t v38 = 0;
          uint64_t v36 = 0;
          if (v43 != v42)
          {
            do
            {
              uint64_t v32 = 0;
              uint64_t v23 = *(void *)(v22 - 8);
              v22 -= 8;
              uint64_t v32 = v23;
              for (uint64_t n = *(void *)(v23 + 8); n; uint64_t n = *(void *)(n + 8))
              {
                uint64_t v25 = *(void *)(n + 24);
                unsigned int v26 = *(unsigned __int8 *)(v25 + 16);
                if (v25) {
                  BOOL v27 = v26 >= 0x1C;
                }
                else {
                  BOOL v27 = 0;
                }
                if (v27 && v26 - 29 <= 0xA) {
                  llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
                }
              }
            }
            while (v22 != v42);
            uint64_t v20 = v36;
            uint64_t v21 = v37;
          }
        }
        if (v21 - v20 != 8) {
          sub_1CD169F8C(a2, a3, v17, (uint64_t)&v39, (uint64_t)&v33);
        }
        sub_1CC189978(&v33);
        sub_1CC189978(&v39);
      }
      sub_1CD87E4A4(v45);
      uint64_t v18 = v46;
    }
    sub_1CD4750A4(v45);
    sub_1CBAACC38((uint64_t)&v48, *(char **)(v17 + 8), *(char **)(v17 + 16));
  }
  if (v48 != v50) {
    free(v48);
  }
  return 0;
}

void sub_1CD169D4C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD169D84(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&unk_1EA61F34D);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&unk_1EA61F34D);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);

  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
}

uint64_t sub_1CD169E38(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::LoopInfoWrapperPass::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::LoopInfoWrapperPass::ID);
  uint64_t v9 = *(uint64_t **)(a1 + 8);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (v10 == v11)
  {
LABEL_9:
    uint64_t v12 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v10 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v10 += 16;
      if (v10 == v11) {
        goto LABEL_9;
      }
    }
    uint64_t v12 = *(void *)(v10 + 8);
  }
  uint64_t v13 = v8 + 32;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v12 + 96))(v12, &llvm::DominatorTreeWrapperPass::ID)
      + 32;

  return sub_1CD16986C(a2, v13, v14);
}

void sub_1CD169F50()
{
}

void sub_1CD169F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v32[18] = *MEMORY[0x1E4F143B8];
  v16[0] = 0;
  v16[1] = 0;
  int v17 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  uint64_t v6 = *(void *)(a5 + 24);
  uint64_t v7 = *(void *)(a5 + 32);
  while (1)
  {
    if (v6 == v7)
    {
      unsigned int v30 = v32;
      uint64_t v31 = 0x800000000;
      v21[0] = v22;
      v21[1] = 0x1000000000;
      v22[32] = 0;
      v22[33] = 0;
      v22[34] = a2;
      v22[35] = 0;
      char v23 = 0;
      uint64_t v24 = v28;
      uint64_t v25 = v28;
      uint64_t v26 = 8;
      int v27 = 0;
      memset(&v28[64], 0, 24);
      __int16 v29 = 0;
      llvm::CreateControlFlowHub();
    }
    uint64_t v8 = *(void *)(*(void *)v6 + 8);
    if (v8)
    {
      while (1)
      {
        uint64_t v9 = *(void *)(v8 + 24);
        unsigned int v10 = *(unsigned __int8 *)(v9 + 16);
        BOOL v11 = v9 && v10 >= 0x1C;
        if (v11 && v10 - 29 <= 0xA) {
          break;
        }
        uint64_t v8 = *(void *)(v8 + 8);
        if (!v8) {
          goto LABEL_13;
        }
      }
LABEL_14:
      v21[0] = *(void *)(v9 + 40);
      sub_1CBB239A4((uint64_t)v16, v21);
      while (1)
      {
        uint64_t v8 = *(void *)(v8 + 8);
        if (!v8) {
          break;
        }
        uint64_t v9 = *(void *)(v8 + 24);
        unsigned int v13 = *(unsigned __int8 *)(v9 + 16);
        if (v9) {
          BOOL v14 = v13 >= 0x1C;
        }
        else {
          BOOL v14 = 0;
        }
        if (v14 && v13 - 29 < 0xB) {
          goto LABEL_14;
        }
      }
    }
LABEL_13:
    v6 += 8;
  }
}

_OWORD *sub_1CD16A834(void **a1, _OWORD *a2)
{
  uint64_t v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - (unsigned char *)*a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333) {
    abort();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - v3) >> 4) > v5) {
    unint64_t v5 = 0x999999999999999ALL * (((unsigned char *)a1[2] - v3) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - v3) >> 4) >= 0x199999999999999) {
    unint64_t v8 = 0x333333333333333;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x333333333333333) {
      sub_1CB833614();
    }
    uint64_t v9 = (char *)operator new(80 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  unsigned int v10 = &v9[80 * v4];
  long long v11 = a2[3];
  *((_OWORD *)v10 + 2) = a2[2];
  *((_OWORD *)v10 + 3) = v11;
  *((_OWORD *)v10 + 4) = a2[4];
  long long v12 = a2[1];
  *(_OWORD *)unsigned int v10 = *a2;
  *((_OWORD *)v10 + 1) = v12;
  unsigned int v13 = v10 + 80;
  if (v2 != v3)
  {
    do
    {
      *((_OWORD *)v10 - 5) = *((_OWORD *)v2 - 5);
      long long v14 = *((_OWORD *)v2 - 4);
      long long v15 = *((_OWORD *)v2 - 3);
      long long v16 = *((_OWORD *)v2 - 1);
      *((_OWORD *)v10 - 2) = *((_OWORD *)v2 - 2);
      *((_OWORD *)v10 - 1) = v16;
      *((_OWORD *)v10 - 4) = v14;
      *((_OWORD *)v10 - 3) = v15;
      v10 -= 80;
      v2 -= 80;
    }
    while (v2 != v3);
    uint64_t v2 = (char *)*a1;
  }
  *a1 = v10;
  a1[1] = v13;
  a1[2] = &v9[80 * v8];
  if (v2) {
    operator delete(v2);
  }
  return v13;
}

uint64_t llvm::FlattenCFG(llvm *this, llvm::BasicBlock *a2, llvm::AAResults *a3, llvm::BasicBlock **a4)
{
  v160[1] = *MEMORY[0x1E4F143B8];
  uint64_t v134 = a2;
  uint64_t v5 = **(void **)this;
  BOOL v146 = (unsigned __int8 **)v148;
  uint64_t v147 = 0x200000000;
  uint64_t v150 = v5;
  uint64_t v151 = &v159;
  int v152 = v160;
  uint64_t v153 = 0;
  int v154 = 0;
  __int16 v155 = 512;
  char v156 = 7;
  uint64_t v157 = 0;
  uint64_t v158 = 0;
  uint64_t v159 = &unk_1F2616E88;
  v160[0] = &unk_1F2617008;
  *(void *)&long long v149 = this;
  *((void *)&v149 + 1) = (char *)this + 40;
  uint64_t v6 = *((void *)this + 6);
  if (v6 && *(unsigned char *)(v6 - 8) == 83) {
    goto LABEL_223;
  }
  for (uint64_t i = *((void *)this + 1); i; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v8 = *(void *)(i + 24);
    unsigned int v9 = *(unsigned __int8 *)(v8 + 16);
    if (v8) {
      BOOL v10 = v9 >= 0x1C;
    }
    else {
      BOOL v10 = 0;
    }
    if (v10 && v9 - 29 < 0xB) {
      break;
    }
  }
  int v138 = (char *)v142;
  BOOL v139 = (char *)v142;
  uint64_t v140 = 16;
  int v141 = 0;
  sub_1CC0BCF20((llvm::SmallPtrSetImplBase *)&v138, i, 0);
  long long v12 = v138;
  unsigned int v13 = v139;
  unsigned int v15 = v140;
  unsigned int v14 = HIDWORD(v140);
  if (v139 == v138) {
    uint64_t v16 = HIDWORD(v140);
  }
  else {
    uint64_t v16 = v140;
  }
  int v17 = (unint64_t *)v139;
  if (v16)
  {
    uint64_t v18 = 8 * v16;
    int v17 = (unint64_t *)v139;
    while (*v17 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v17;
      v18 -= 8;
      if (!v18) {
        goto LABEL_218;
      }
    }
  }
  uint64_t v19 = &v139[8 * v16];
  if (v17 == (unint64_t *)v19) {
    goto LABEL_218;
  }
  unint64_t v20 = *v17;
  uint64_t v21 = *(void *)(*v17 + 40);
  if (v21 == *v17 + 40) {
    goto LABEL_218;
  }
  unint64_t v131 = 0;
  int v132 = 0;
  uint64_t v133 = 0;
  unsigned int v129 = HIDWORD(v140);
  int v130 = -1;
LABEL_24:
  char v22 = 0;
  if (v21) {
    uint64_t v23 = v21 - 24;
  }
  else {
    uint64_t v23 = 0;
  }
  unsigned int v24 = *(unsigned __int8 *)(v23 + 16) - 40;
  if (v24 >= 0xFFFFFFF5) {
    uint64_t v25 = v23;
  }
  else {
    uint64_t v25 = 0;
  }
  if (!v21) {
    goto LABEL_219;
  }
  if (*(unsigned char *)(v25 + 16) != 30 || v24 < 0xFFFFFFF5) {
    goto LABEL_219;
  }
  uint64_t SinglePredecessor = llvm::BasicBlock::getSinglePredecessor((llvm::BasicBlock *)v20);
  if ((*(_DWORD *)(v25 + 20) & 0x7FFFFFF) == 1)
  {
    char v22 = 0;
    if (v131 || !SinglePredecessor) {
      goto LABEL_219;
    }
    if (v13 == v12)
    {
      unsigned int v28 = &v12[8 * v14];
      if (v14)
      {
        uint64_t v29 = 8 * v14;
        unsigned int v30 = v12;
        while (*(void *)v30 != SinglePredecessor)
        {
          v30 += 8;
          v29 -= 8;
          if (!v29)
          {
            unsigned int v31 = v14;
            unsigned int v32 = v14;
            goto LABEL_86;
          }
        }
        unsigned int v31 = v14;
        unsigned int v32 = v14;
        unsigned int v28 = v30;
      }
      else
      {
        unsigned int v31 = 0;
        unsigned int v32 = 0;
      }
    }
    else
    {
      unsigned int v37 = v15 - 1;
      unsigned int v38 = (v15 - 1) & ((SinglePredecessor >> 4) ^ (SinglePredecessor >> 9));
      unsigned int v28 = &v13[8 * v38];
      uint64_t v39 = *(void *)v28;
      if (*(void *)v28 == -1)
      {
        uint64_t v40 = 0;
        unsigned int v32 = v129;
LABEL_81:
        if (v40) {
          unsigned int v28 = v40;
        }
        if (*(void *)v28 != SinglePredecessor) {
          unsigned int v28 = &v13[8 * v15];
        }
      }
      else
      {
        uint64_t v40 = 0;
        int v41 = 1;
        unsigned int v32 = v129;
        while (v39 != SinglePredecessor)
        {
          if (v40) {
            BOOL v42 = 0;
          }
          else {
            BOOL v42 = v39 == -2;
          }
          if (v42) {
            uint64_t v40 = v28;
          }
          unsigned int v43 = v38 + v41++;
          unsigned int v38 = v43 & v37;
          unsigned int v28 = &v13[8 * (v43 & v37)];
          uint64_t v39 = *(void *)v28;
          if (*(void *)v28 == -1) {
            goto LABEL_81;
          }
        }
      }
      unsigned int v31 = v15;
    }
LABEL_86:
    if (v28 == &v13[8 * v31]) {
      goto LABEL_218;
    }
    unint64_t v131 = v20;
    if ((*(_WORD *)(v20 + 18) & 0x7FFF) != 0) {
      goto LABEL_218;
    }
  }
  else
  {
    uint64_t v33 = *(void *)(v25 - 96);
    if (!v33) {
      goto LABEL_218;
    }
    uint64_t v34 = *(void *)(v33 + 8);
    if (!v34 || *(void *)(v34 + 8)) {
      goto LABEL_218;
    }
    if (!SinglePredecessor) {
      goto LABEL_104;
    }
    if (v13 == v12)
    {
      unsigned int v15 = v129;
      int v35 = &v12[8 * v129];
      if (v129)
      {
        uint64_t v36 = 8 * v129;
        while (*(void *)v12 != SinglePredecessor)
        {
          v12 += 8;
          v36 -= 8;
          if (!v36) {
            goto LABEL_94;
          }
        }
        int v35 = v12;
      }
    }
    else
    {
      unsigned int v44 = v15 - 1;
      unsigned int v45 = (v15 - 1) & ((SinglePredecessor >> 4) ^ (SinglePredecessor >> 9));
      int v35 = &v13[8 * v45];
      uint64_t v46 = *(void *)v35;
      if (*(void *)v35 == -1)
      {
        unsigned int v47 = 0;
LABEL_90:
        if (v47) {
          int v35 = v47;
        }
        if (*(void *)v35 != SinglePredecessor) {
          int v35 = &v13[8 * v15];
        }
      }
      else
      {
        unsigned int v47 = 0;
        int v48 = 1;
        while (v46 != SinglePredecessor)
        {
          if (v47) {
            BOOL v49 = 0;
          }
          else {
            BOOL v49 = v46 == -2;
          }
          if (v49) {
            unsigned int v47 = v35;
          }
          unsigned int v50 = v45 + v48++;
          unsigned int v45 = v50 & v44;
          int v35 = &v13[8 * (v50 & v44)];
          uint64_t v46 = *(void *)v35;
          if (*(void *)v35 == -1) {
            goto LABEL_90;
          }
        }
      }
    }
LABEL_94:
    if (v35 == &v13[8 * v15])
    {
LABEL_104:
      uint64_t v53 = (llvm::BasicBlock *)v20;
      if (v132) {
        goto LABEL_218;
      }
    }
    else
    {
      if ((*(_WORD *)(v20 + 18) & 0x7FFF) != 0) {
        goto LABEL_218;
      }
      uint64_t v51 = *(void *)(v20 + 48);
      while (v51 != v25 + 24)
      {
        if (v51) {
          uint64_t v52 = v51 - 24;
        }
        else {
          uint64_t v52 = 0;
        }
        if (*(unsigned char *)(v52 + 16) == 83) {
          goto LABEL_218;
        }
        uint64_t v51 = *(void *)(v51 + 8);
        char v22 = 0;
        if ((llvm::isSafeToSpeculativelyExecute(v52, 0, 0, 0) & 1) == 0) {
          goto LABEL_219;
        }
      }
      uint64_t v53 = v132;
    }
    int v54 = *(llvm **)(v25 - 32);
    int v55 = v54 != this;
    if (v54 == this) {
      int v54 = *(llvm **)(v25 - 64);
    }
    int v56 = v130;
    if (v130 == -1)
    {
      int v56 = v55;
    }
    else if (v130 != v55)
    {
      goto LABEL_218;
    }
    long long v12 = v138;
    unsigned int v13 = v139;
    if (v139 == v138)
    {
      unsigned int v14 = HIDWORD(v140);
      int v57 = &v139[8 * HIDWORD(v140)];
      if (HIDWORD(v140))
      {
        uint64_t v58 = 0;
        while (*(llvm **)&v139[v58] != v54)
        {
          v58 += 8;
          if (8 * HIDWORD(v140) == v58) {
            goto LABEL_131;
          }
        }
        int v57 = &v139[v58];
      }
LABEL_131:
      uint64_t v66 = v139;
    }
    else
    {
      int v59 = v140 - 1;
      unsigned int v60 = (v140 - 1) & ((v54 >> 4) ^ (v54 >> 9));
      int v57 = &v139[8 * v60];
      unsigned int v61 = *(llvm **)v57;
      if (*(void *)v57 == -1)
      {
        int v62 = 0;
LABEL_133:
        if (v62) {
          int v57 = v62;
        }
        unsigned int v14 = HIDWORD(v140);
        if (*(llvm **)v57 != v54) {
          int v57 = &v139[8 * v140];
        }
      }
      else
      {
        int v62 = 0;
        int v63 = 1;
        while (v61 != v54)
        {
          if (v62) {
            BOOL v64 = 0;
          }
          else {
            BOOL v64 = v61 == (llvm *)-2;
          }
          if (v64) {
            int v62 = v57;
          }
          unsigned int v65 = v60 + v63++;
          unsigned int v60 = v65 & v59;
          int v57 = &v139[8 * (v65 & v59)];
          unsigned int v61 = *(llvm **)v57;
          if (*(void *)v57 == -1) {
            goto LABEL_133;
          }
        }
        unsigned int v14 = HIDWORD(v140);
      }
      uint64_t v66 = v138;
    }
    unsigned int v15 = v140;
    if (v139 == v66) {
      int v67 = v14;
    }
    else {
      int v67 = v140;
    }
    int v130 = v56;
    if (v57 == &v139[8 * v67])
    {
      unsigned int v32 = v14;
      int v132 = v53;
      uint64_t v133 = (llvm::BasicBlock *)v20;
    }
    else
    {
      uint64_t v68 = (llvm *)*((void *)v54 + 5);
      if (v68 != (llvm *)((char *)v54 + 40))
      {
        uint64_t v69 = (char *)v68 - 24;
        if (!v68) {
          uint64_t v69 = 0;
        }
        unsigned int v70 = v69[16] - 40;
        if (v70 < 0xFFFFFFF5) {
          uint64_t v69 = 0;
        }
        if (v68)
        {
          if (v69[16] == 30 && v70 >= 0xFFFFFFF5)
          {
            BOOL v42 = (*((_DWORD *)v69 + 5) & 0x7FFFFFF) == 1;
            int v72 = v133;
            if (v42) {
              int v72 = (llvm::BasicBlock *)v20;
            }
            uint64_t v133 = v72;
          }
        }
      }
      unsigned int v32 = v14;
      int v132 = v53;
    }
  }
  uint64_t v73 = v17 + 1;
  while (v73 != (unint64_t *)v19)
  {
    unint64_t v74 = *v73++;
    unint64_t v20 = v74;
    if (v74 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      unsigned int v129 = v32;
      char v22 = 0;
      uint64_t v21 = *(void *)(v20 + 40);
      int v17 = v73 - 1;
      if (v21 == v20 + 40) {
        goto LABEL_219;
      }
      goto LABEL_24;
    }
  }
  char v22 = 0;
  if (!v132 || !v133 || v132 == v133) {
    goto LABEL_219;
  }
  uint64_t v75 = (llvm::BasicBlock *)*((void *)v133 + 5);
  if (v75 == (llvm::BasicBlock *)((char *)v133 + 40))
  {
    uint64_t v77 = 0;
  }
  else
  {
    if (v75) {
      uint64_t v76 = (unsigned __int8 *)v75 - 24;
    }
    else {
      uint64_t v76 = 0;
    }
    if (v76[16] - 29 >= 0xB) {
      uint64_t v77 = 0;
    }
    else {
      uint64_t v77 = (llvm::Instruction *)v76;
    }
  }
  uint64_t Successor = llvm::Instruction::getSuccessor(v77, 0);
  uint64_t v79 = llvm::Instruction::getSuccessor(v77, 1u);
  uint64_t v80 = v79;
  uint64_t v81 = *(void *)(Successor + 40);
  if (v81 == Successor + 40)
  {
    uint64_t v82 = 0;
  }
  else
  {
    uint64_t v82 = v81 - 24;
    if (!v81) {
      uint64_t v82 = 0;
    }
    if (*(unsigned __int8 *)(v82 + 16) - 29 >= 0xB) {
      uint64_t v82 = 0;
    }
  }
  if (*(unsigned char *)(v82 + 16) == 30) {
    uint64_t v83 = v82;
  }
  else {
    uint64_t v83 = 0;
  }
  uint64_t v85 = (void *)(v79 + 40);
  uint64_t v84 = *(void *)(v79 + 40);
  if (v84 == v79 + 40)
  {
    uint64_t v86 = 0;
  }
  else
  {
    if (v84) {
      uint64_t v86 = v84 - 24;
    }
    else {
      uint64_t v86 = 0;
    }
    if (*(unsigned __int8 *)(v86 + 16) - 29 >= 0xB) {
      uint64_t v86 = 0;
    }
  }
  if (*(unsigned char *)(v86 + 16) == 30) {
    uint64_t v87 = v86;
  }
  else {
    uint64_t v87 = 0;
  }
  if (v83 && (*(_DWORD *)(v83 + 20) & 0x7FFFFFF) == 1)
  {
    if (v81 == Successor + 40)
    {
      uint64_t v89 = 0;
    }
    else
    {
      uint64_t v88 = v81 ? v81 - 24 : 0;
      uint64_t v89 = *(unsigned __int8 *)(v88 + 16) - 29 >= 0xB ? 0 : (llvm::Instruction *)v88;
    }
    if (llvm::Instruction::getSuccessor(v89, 0) == v80)
    {
      if ((*(_DWORD *)(v83 + 20) & 0x7FFFFFF) == 1)
      {
        uint64_t v93 = *(void *)(v80 + 48);
        if (!v93 || *(unsigned char *)(v93 - 8) != 83)
        {
          uint64_t v135 = (llvm::BasicBlock *)&v146;
          long long v136 = v149;
          if (v147)
          {
            BOOL v126 = v146 + 1;
            uint64_t v127 = 16 * v147;
            while (*((_DWORD *)v126 - 2))
            {
              v126 += 2;
              v127 -= 16;
              if (!v127) {
                goto LABEL_299;
              }
            }
            int v128 = *v126;
            uint64_t v137 = v128;
            if (v128) {
              llvm::MetadataTracking::track((uint64_t)&v137, v128, 2);
            }
          }
          else
          {
LABEL_299:
            uint64_t v137 = 0;
          }
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
      }
      goto LABEL_218;
    }
  }
  if (!v87 || (*(_DWORD *)(v87 + 20) & 0x7FFFFFF) != 1)
  {
LABEL_218:
    char v22 = 0;
    goto LABEL_219;
  }
  uint64_t v90 = (void *)*v85;
  if ((void *)*v85 == v85)
  {
    __int16 v92 = 0;
  }
  else
  {
    if (v90) {
      uint64_t v91 = (unsigned __int8 *)(v90 - 3);
    }
    else {
      uint64_t v91 = 0;
    }
    if (v91[16] - 29 >= 0xB) {
      __int16 v92 = 0;
    }
    else {
      __int16 v92 = (llvm::Instruction *)v91;
    }
  }
  char v22 = 0;
  if (llvm::Instruction::getSuccessor(v92, 0) == Successor)
  {
    char v22 = 0;
    while (1)
    {
      uint64_t v110 = *((void *)v133 + 5);
      if (v110) {
        uint64_t v111 = (unsigned __int8 *)(v110 - 24);
      }
      else {
        uint64_t v111 = 0;
      }
      if (v111[16] - 29 >= 0xB) {
        uint64_t v112 = 0;
      }
      else {
        uint64_t v112 = (llvm::Instruction *)v111;
      }
      uint64_t v113 = *((void *)v112 - 12);
      unsigned int v114 = *(unsigned __int8 *)(v113 + 16);
      if (v113) {
        BOOL v115 = v114 >= 0x1C;
      }
      else {
        BOOL v115 = 0;
      }
      if (!v115 || v114 - 83 < 0xFFFFFFFE) {
        goto LABEL_277;
      }
      __int16 v117 = *(_WORD *)(v113 + 18);
      if ((v117 & 0x3F) == 0x21) {
        break;
      }
      if ((v117 & 0x3F) == 6)
      {
        __int16 v118 = 9;
LABEL_276:
        *(_WORD *)(v113 + 18) = v118 | v117 & 0xFFC0;
        llvm::BranchInst::swapSuccessors(v112);
        char v22 = 1;
      }
LABEL_277:
      uint64_t v133 = (llvm::BasicBlock *)llvm::BasicBlock::getSinglePredecessor(v133);
      if (v133 == v132) {
        goto LABEL_219;
      }
    }
    __int16 v118 = 32;
    goto LABEL_276;
  }
LABEL_219:
  if (v139 != v138) {
    free(v139);
  }
  if (v22)
  {
    uint64_t v94 = 1;
    goto LABEL_228;
  }
LABEL_223:
  uint64_t v135 = 0;
  uint64_t v145 = 0;
  IfConditiouint64_t n = llvm::GetIfCondition(this, (llvm::BasicBlock *)&v135, &v145, a4);
  if (!IfCondition) {
    goto LABEL_227;
  }
  uint64_t v94 = 0;
  uint64_t v97 = *(IfCondition - 12);
  if (v97 && *(unsigned __int8 *)(v97 + 16) >= 0x1Cu)
  {
    uint64_t v98 = *(void *)(v97 + 40);
    if ((*(_WORD *)(v98 + 18) & 0x7FFF) != 0) {
      goto LABEL_227;
    }
    BOOL v143 = 0;
    int v144 = 0;
    uint64_t v100 = llvm::GetIfCondition((llvm *)v98, (llvm::BasicBlock *)&v144, &v143, v96);
    if (!v100) {
      goto LABEL_227;
    }
    uint64_t v101 = *(v100 - 12);
    if (!v101 || *(unsigned __int8 *)(v101 + 16) < 0x1Cu) {
      goto LABEL_227;
    }
    uint64_t v103 = *(llvm::BasicBlock **)(v101 + 40);
    if (v143 == v103)
    {
      int v106 = v145;
      uint64_t v107 = (uint64_t)v135;
      if (v145 != (llvm::BasicBlock *)v98)
      {
        if (v135 != (llvm::BasicBlock *)v98) {
          goto LABEL_227;
        }
        uint64_t v135 = v145;
        uint64_t v145 = (llvm::BasicBlock *)v98;
        uint64_t v107 = (uint64_t)v106;
      }
      if (sub_1CD16BDDC((uint64_t *)&v134, (uint64_t)v144, v107, v98))
      {
LABEL_248:
        uint64_t v108 = *(void *)(v98 + 40);
        if (v108 == v98 + 40)
        {
          uint64_t v109 = 0;
        }
        else
        {
          if (v108) {
            uint64_t v109 = v108 - 24;
          }
          else {
            uint64_t v109 = 0;
          }
          if (*(unsigned __int8 *)(v109 + 16) - 29 >= 0xB) {
            uint64_t v109 = 0;
          }
        }
        uint64_t v119 = *(void *)(v98 + 48);
        BOOL v120 = v119 == 0;
        if (v119) {
          uint64_t v121 = v119 - 24;
        }
        else {
          uint64_t v121 = 0;
        }
        uint64_t v122 = v121 + 24;
        if (v120) {
          uint64_t v123 = 0;
        }
        else {
          uint64_t v123 = v122;
        }
        if (v109) {
          uint64_t v124 = v109 + 24;
        }
        else {
          uint64_t v124 = 0;
        }
        while (1)
        {
          if (v123 == v124) {
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
          int64_t v125 = v123 ? (llvm::Instruction *)(v123 - 24) : 0;
          if (*((unsigned char *)v125 + 16) == 83
            || (llvm::Instruction::mayHaveSideEffects(v125) & 1) != 0
            || !llvm::isSafeToSpeculativelyExecute((uint64_t)v125, 0, 0, 0))
          {
            break;
          }
          uint64_t v123 = *(void *)(v123 + 8);
        }
      }
    }
    else if (v144 == v103)
    {
      unsigned int v104 = v135;
      uint64_t v105 = v145;
      if (v135 != (llvm::BasicBlock *)v98)
      {
        if (v145 != (llvm::BasicBlock *)v98) {
          goto LABEL_227;
        }
        uint64_t v135 = (llvm::BasicBlock *)v98;
        uint64_t v145 = v104;
        uint64_t v105 = v104;
      }
      if (sub_1CD16BDDC((uint64_t *)&v134, (uint64_t)v143, (uint64_t)v105, v98)) {
        goto LABEL_248;
      }
    }
LABEL_227:
    uint64_t v94 = 0;
  }
LABEL_228:
  if (v146 != (unsigned __int8 **)v148) {
    free(v146);
  }
  return v94;
}

uint64_t sub_1CD16BDDC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + 40);
  if (v5 == a4 + 40)
  {
    uint64_t v6 = 0;
  }
  else
  {
    if (v5) {
      uint64_t v6 = v5 - 24;
    }
    else {
      uint64_t v6 = 0;
    }
    if (*(unsigned __int8 *)(v6 + 16) - 29 >= 0xB) {
      uint64_t v6 = 0;
    }
  }
  uint64_t v7 = *(void *)(a4 + 48);
  uint64_t v8 = v7 - 24;
  if (!v7) {
    uint64_t v8 = 0;
  }
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v9 = a2 + 40;
  uint64_t v10 = v11;
  if (v11 == v9)
  {
    uint64_t v12 = 0;
  }
  else
  {
    if (v10) {
      uint64_t v12 = v10 - 24;
    }
    else {
      uint64_t v12 = 0;
    }
    if (*(unsigned __int8 *)(v12 + 16) - 29 >= 0xB) {
      uint64_t v12 = 0;
    }
  }
  uint64_t v13 = *(void *)(v9 + 8);
  uint64_t v14 = v12 + 24;
  uint64_t v15 = *(void *)(a3 + 40);
  uint64_t v16 = *(void *)(a3 + 48);
  if (v15 == a3 + 40)
  {
    uint64_t v18 = 0;
  }
  else
  {
    if (v15) {
      uint64_t v17 = v15 - 24;
    }
    else {
      uint64_t v17 = 0;
    }
    if (*(unsigned __int8 *)(v17 + 16) - 29 >= 0xB) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = v17;
    }
  }
  if (v13 != v14)
  {
    uint64_t v19 = v8 + 24;
    if (v7) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v6) {
      uint64_t v21 = v6 + 24;
    }
    else {
      uint64_t v21 = 0;
    }
    while (1)
    {
      if (v13) {
        uint64_t v22 = v13 - 24;
      }
      else {
        uint64_t v22 = 0;
      }
      if (v16) {
        uint64_t v23 = (unsigned __int8 *)(v16 - 24);
      }
      else {
        uint64_t v23 = 0;
      }
      uint64_t result = llvm::Instruction::isIdenticalToWhenDefined((llvm::Instruction *)v22, (const llvm::Instruction *)v23);
      if (!result) {
        return result;
      }
      if ((v23[17] ^ *(unsigned __int8 *)(v22 + 17)) > 1) {
        return 0;
      }
      int HaveSideEffects = llvm::Instruction::mayHaveSideEffects((llvm::Instruction *)v22);
      int v26 = *(unsigned __int8 *)(v22 + 16);
      if (HaveSideEffects) {
        break;
      }
      uint64_t v28 = (v26 - 33);
      if (v28 <= 0x37)
      {
        if (((1 << (v26 - 33)) & 0x808001C8000010) != 0) {
          return 0;
        }
        if (((1 << (v26 - 33)) & 0x8000000000041) != 0)
        {
          uint64_t v29 = *(void *)(v22 + 64);
          if (!v29 || (*(unsigned char *)(v29 + 20) & 4) == 0 && (*(unsigned char *)(v29 + 17) & 0x10) == 0)
          {
            LODWORD(v63[0]) = 7;
            if (sub_1CC5CB59C(v22, (__int32 *)v63, 1uLL))
            {
              uint64_t v33 = *(void *)(v22 - 32);
              if (!v33
                || *(unsigned char *)(v33 + 16)
                || *(void *)(v33 + 24) != *(void *)(v22 + 72)
                || *(_DWORD *)(v33 + 36) != 7)
              {
                return 0;
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v22, 66) & 1) == 0)
            {
              uint64_t result = llvm::CallBase::hasFnAttrOnCalledFunction(v22, 44);
              if (!result) {
                return result;
              }
            }
          }
          goto LABEL_47;
        }
        if (v28 == 28) {
          goto LABEL_46;
        }
      }
LABEL_48:
      uint64_t v59 = v20;
      uint64_t v27 = (v26 - 33);
      if (v27 <= 0x37)
      {
        if (((1 << v27) & 0x8000000000041) != 0)
        {
          uint64_t v30 = *(void *)(v22 + 64);
          if (v30 && (*(unsigned char *)(v30 + 17) & 0x30) != 0) {
            goto LABEL_52;
          }
          int v31 = *(_DWORD *)(v22 + 20);
          if (v31 < 0)
          {
            uint64_t v34 = v22 - 32 * (v31 & 0x7FFFFFF);
            uint64_t v37 = *(void *)(v34 - 8);
            uint64_t v35 = v34 - 8;
            uint64_t v36 = v37;
            if (v37)
            {
              uint64_t v38 = -v36;
              while (1)
              {
                unsigned int v39 = *(_DWORD *)(*(void *)(v35 + v38) + 8);
                BOOL v40 = v39 > 7;
                int v41 = (1 << v39) & 0x83;
                if (v40 || v41 == 0) {
                  break;
                }
                v38 += 16;
                if (!v38) {
                  goto LABEL_69;
                }
              }
LABEL_85:
              int v32 = 1;
LABEL_86:
              if (!v32 || v20 == v21) {
                goto LABEL_52;
              }
              while (2)
              {
                if (v20) {
                  uint64_t v43 = v20 - 24;
                }
                else {
                  uint64_t v43 = 0;
                }
                int v44 = *(unsigned __int8 *)(v43 + 16);
                uint64_t v45 = (v44 - 33);
                if (v45 <= 0x37)
                {
                  if (((1 << (v44 - 33)) & 0x8000000000041) != 0)
                  {
                    uint64_t v47 = *(void *)(v43 + 64);
                    if (!v47 || (*(unsigned char *)(v47 + 20) & 4) == 0 && (*(unsigned char *)(v47 + 17) & 0x10) == 0)
                    {
                      LODWORD(v63[0]) = 7;
                      if (sub_1CC5CB59C(v43, (__int32 *)v63, 1uLL))
                      {
                        uint64_t v50 = *(void *)(v43 - 32);
                        if (!v50
                          || *(unsigned char *)(v50 + 16)
                          || *(void *)(v50 + 24) != *(void *)(v43 + 72)
                          || *(_DWORD *)(v50 + 36) != 7)
                        {
                          goto LABEL_116;
                        }
                      }
                      if ((llvm::CallBase::hasFnAttrOnCalledFunction(v43, 66) & 1) == 0
                        && !llvm::CallBase::hasFnAttrOnCalledFunction(v43, 44))
                      {
                        goto LABEL_116;
                      }
                    }
                  }
                  else
                  {
                    if (((1 << (v44 - 33)) & 0x808001C8000010) != 0) {
                      goto LABEL_116;
                    }
                    if (v45 != 28) {
                      goto LABEL_95;
                    }
                    if ((*(_WORD *)(v43 + 18) & 0x301) != 0) {
                      goto LABEL_116;
                    }
                  }
                  int v44 = *(unsigned __int8 *)(v43 + 16);
                }
LABEL_95:
                uint64_t v46 = (v44 - 33);
                if (v46 <= 0x37)
                {
                  if (((1 << v46) & 0x8000000000041) != 0)
                  {
                    uint64_t v48 = *(void *)(v43 + 64);
                    if (!v48 || (*(unsigned char *)(v48 + 17) & 0x30) == 0)
                    {
                      int v49 = *(_DWORD *)(v43 + 20);
                      if (v49 < 0)
                      {
                        uint64_t v51 = v43 - 32 * (v49 & 0x7FFFFFF);
                        uint64_t v54 = *(void *)(v51 - 8);
                        uint64_t v52 = v51 - 8;
                        uint64_t v53 = v54;
                        if (v54)
                        {
                          uint64_t v55 = -v53;
                          do
                          {
                            unsigned int v56 = *(_DWORD *)(*(void *)(v52 + v55) + 8);
                            BOOL v40 = v56 > 7;
                            int v57 = (1 << v56) & 0x83;
                            if (v40 || v57 == 0) {
                              goto LABEL_116;
                            }
                            v55 += 16;
                          }
                          while (v55);
                        }
                      }
                      if ((llvm::CallBase::hasFnAttrOnCalledFunction(v43, 45) & 1) == 0
                        && (llvm::CallBase::hasFnAttrOnCalledFunction(v43, 44) & 1) == 0)
                      {
LABEL_116:
                        uint64_t result = *a1;
                        if (!*a1) {
                          return result;
                        }
                        v63[0] = v22;
                        v63[1] = -1;
                        long long v64 = 0u;
                        long long v65 = 0u;
                        v60[0] = v43;
                        v60[1] = -1;
                        long long v61 = 0u;
                        long long v62 = 0u;
                        if (llvm::AAResults::alias(result, (uint64_t)v63, (uint64_t)v60)) {
                          return 0;
                        }
                      }
                    }
                  }
                  else if (v46 == 27)
                  {
                    if ((*(_WORD *)(v43 + 18) & 0x301) != 0) {
                      goto LABEL_116;
                    }
                  }
                  else if (((1 << v46) & 0x808001D0000010) != 0)
                  {
                    goto LABEL_116;
                  }
                }
                uint64_t v20 = *(void *)(v20 + 8);
                if (v20 == v21) {
                  goto LABEL_52;
                }
                continue;
              }
            }
          }
LABEL_69:
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v22, 45) & 1) == 0)
          {
            int v32 = llvm::CallBase::hasFnAttrOnCalledFunction(v22, 44) ^ 1;
            goto LABEL_86;
          }
        }
        else
        {
          if (v27 == 27)
          {
            int v32 = (*(_WORD *)(v22 + 18) & 0x301) != 0;
            goto LABEL_86;
          }
          if (((1 << v27) & 0x808001D0000010) != 0) {
            goto LABEL_85;
          }
        }
      }
LABEL_52:
      uint64_t v13 = *(void *)(v13 + 8);
      uint64_t v16 = *(void *)(v16 + 8);
      uint64_t v20 = v59;
      if (v13 == v14) {
        return v16 == v18 + 24;
      }
    }
    uint64_t result = 0;
    if (!v13 || v26 != 61) {
      return result;
    }
    if (*(_WORD *)(v22 + 18)) {
      return 0;
    }
LABEL_46:
    if ((*(_WORD *)(v22 + 18) & 0x301) != 0) {
      return 0;
    }
LABEL_47:
    int v26 = *(unsigned __int8 *)(v22 + 16);
    goto LABEL_48;
  }
  return v16 == v18 + 24;
}

uint64_t llvm::FunctionComparator::cmpNumbers(llvm::FunctionComparator *this, unint64_t a2, unint64_t a3)
{
  if (a2 < a3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return a2 > a3;
  }
}

uint64_t llvm::FunctionComparator::cmpAligns(uint64_t a1, char a2, char a3)
{
  if (1 << a2 < (unint64_t)(1 << a3)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 1 << a2 > (unint64_t)(1 << a3);
  }
}

uint64_t llvm::FunctionComparator::cmpOrderings(uint64_t a1, int a2, int a3)
{
  if (a2 < a3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return a2 > a3;
  }
}

uint64_t llvm::FunctionComparator::cmpTypes(llvm::FunctionComparator *this, llvm::Type *a2, llvm::Type *a3)
{
  while (2)
  {
    unsigned int v6 = *((_DWORD *)a2 + 2);
    if (v6 == 15) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = 0;
    }
    if (*((unsigned char *)a3 + 8) == 15) {
      uint64_t v8 = a3;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void *)(*(void *)this + 40);
    if (v7 && *((_DWORD *)v7 + 2) <= 0xFFu)
    {
      if ((v6 & 0xFE) == 0x12) {
        unsigned int v6 = *(_DWORD *)(**((void **)a2 + 2) + 8);
      }
      if (v6 < 0x100) {
        goto LABEL_20;
      }
      unsigned int v10 = v6 >> 8;
      uint64_t v11 = *(unsigned int *)(v9 + 512);
      uint64_t v12 = *(void *)(v9 + 504);
      if (v11)
      {
        uint64_t v12 = *(void *)(v9 + 504);
        unint64_t v13 = *(unsigned int *)(v9 + 512);
        do
        {
          unint64_t v14 = v13 >> 1;
          uint64_t v15 = v12 + 16 * (v13 >> 1);
          unsigned int v16 = *(_DWORD *)(v15 + 8);
          uint64_t v17 = v15 + 16;
          v13 += ~(v13 >> 1);
          if (v16 < v10) {
            uint64_t v12 = v17;
          }
          else {
            unint64_t v13 = v14;
          }
        }
        while (v13);
      }
      if (v12 == *(void *)(v9 + 504) + 16 * v11 || *(_DWORD *)(v12 + 8) != v10) {
LABEL_20:
      }
        uint64_t v12 = *(void *)(v9 + 504);
      uint64_t v18 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)a2, (llvm::LLVMContext *)*(unsigned int *)(v12 + 4));
      if ((*((_DWORD *)a2 + 2) & 0xFE) == 0x12) {
        llvm::VectorType::get(v18, (llvm::Type *)(*((unsigned int *)a2 + 8) | ((unint64_t)(*((_DWORD *)a2 + 2) == 19) << 32)));
      }
      a2 = v18;
    }
    if (v8 && *((_DWORD *)v8 + 2) <= 0xFFu)
    {
      unsigned int v19 = *((_DWORD *)a3 + 2);
      if ((v19 & 0xFE) == 0x12) {
        unsigned int v19 = *(_DWORD *)(**((void **)a3 + 2) + 8);
      }
      if (v19 < 0x100) {
        goto LABEL_37;
      }
      unsigned int v20 = v19 >> 8;
      uint64_t v21 = *(unsigned int *)(v9 + 512);
      uint64_t v22 = *(void *)(v9 + 504);
      if (v21)
      {
        uint64_t v22 = *(void *)(v9 + 504);
        unint64_t v23 = *(unsigned int *)(v9 + 512);
        do
        {
          unint64_t v24 = v23 >> 1;
          uint64_t v25 = v22 + 16 * (v23 >> 1);
          unsigned int v26 = *(_DWORD *)(v25 + 8);
          uint64_t v27 = v25 + 16;
          v23 += ~(v23 >> 1);
          if (v26 < v20) {
            uint64_t v22 = v27;
          }
          else {
            unint64_t v23 = v24;
          }
        }
        while (v23);
      }
      if (v22 == *(void *)(v9 + 504) + 16 * v21 || *(_DWORD *)(v22 + 8) != v20) {
LABEL_37:
      }
        uint64_t v22 = *(void *)(v9 + 504);
      uint64_t v28 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)a3, (llvm::LLVMContext *)*(unsigned int *)(v22 + 4));
      if ((*((_DWORD *)a3 + 2) & 0xFE) == 0x12) {
        llvm::VectorType::get(v28, (llvm::Type *)(*((unsigned int *)a3 + 8) | ((unint64_t)(*((_DWORD *)a3 + 2) == 19) << 32)));
      }
      a3 = v28;
    }
    if (a2 == a3) {
      return 0;
    }
    unsigned int v29 = *((_DWORD *)a2 + 2);
    unsigned int v30 = *((_DWORD *)a3 + 2);
    if (v29 < v30) {
      uint64_t result = 0xFFFFFFFFLL;
    }
    else {
      uint64_t result = v29 > v30;
    }
    if (result) {
      return result;
    }
    int v32 = *((_DWORD *)a3 + 2);
    switch(*((_DWORD *)a2 + 2))
    {
      case 0xAu:
      case 0xBu:
        __break(1u);
        JUMPOUT(0x1CD16C7D0);
      case 0xDu:
        unsigned int v41 = v29 >> 8;
        BOOL v35 = v41 >= v30 >> 8;
        BOOL v36 = v41 > v30 >> 8;
        goto LABEL_81;
      case 0xEu:
        int v42 = *((_DWORD *)a2 + 3);
        int v43 = *((_DWORD *)a3 + 3);
        if (v42 != v43)
        {
          BOOL v35 = v42 - 1 >= (v43 - 1);
          BOOL v36 = v42 - 1 > (v43 - 1);
          goto LABEL_81;
        }
        if (v29 > 0xFF == v30 > 0xFF)
        {
          uint64_t result = llvm::FunctionComparator::cmpTypes(this, **((llvm::Type ***)a2 + 2), **((llvm::Type ***)a3 + 2));
          if (result) {
            return result;
          }
          uint64_t v55 = 0;
          uint64_t v56 = (*((_DWORD *)a2 + 3) - 1);
          do
          {
            if (v56 == v55) {
              return 0;
            }
            ++v55;
            uint64_t result = llvm::FunctionComparator::cmpTypes(this, *(llvm::Type **)(*((void *)a2 + 2) + 8 * v55), *(llvm::Type **)(*((void *)a3 + 2) + 8 * v55));
          }
          while (!result);
        }
        else
        {
          BOOL v45 = v29 > 0xFF && v30 < 0x100;
          if (v29 < 0x100 && v30 > 0xFF) {
            return 0xFFFFFFFFLL;
          }
          else {
            return v45;
          }
        }
        return result;
      case 0xFu:
        unsigned int v47 = *((_DWORD *)v7 + 2) >> 8;
        unsigned int v48 = *((_DWORD *)v8 + 2);
        BOOL v35 = v47 >= v48 >> 8;
        BOOL v36 = v47 > v48 >> 8;
        goto LABEL_81;
      case 0x10u:
        uint64_t v49 = *((unsigned int *)a2 + 3);
        unsigned int v50 = *((_DWORD *)a3 + 3);
        if (v49 != v50)
        {
          BOOL v35 = v49 >= v50;
          BOOL v36 = v49 > v50;
          goto LABEL_81;
        }
        unsigned int v51 = v29 & 0x200;
        unsigned int v52 = *((_DWORD *)a3 + 2) & 0x200;
        if (((v51 ^ v52) & 0x200) != 0)
        {
          unsigned int v53 = v51 >> 9;
          BOOL v35 = v53 >= v52 >> 9;
          BOOL v36 = v53 > v52 >> 9;
          goto LABEL_81;
        }
        if (!v49) {
          return 0;
        }
        uint64_t v57 = 0;
        uint64_t v58 = 8 * v49;
        do
        {
          uint64_t result = llvm::FunctionComparator::cmpTypes(this, *(llvm::Type **)(*((void *)a2 + 2) + v57), *(llvm::Type **)(*((void *)a3 + 2) + v57));
          if (result) {
            break;
          }
          v57 += 8;
        }
        while (v58 != v57);
        return result;
      case 0x11u:
        unint64_t v37 = *((void *)a2 + 4);
        unint64_t v38 = *((void *)a3 + 4);
        BOOL v35 = v37 >= v38;
        BOOL v36 = v37 > v38;
        if (v37 == v38) {
          goto LABEL_51;
        }
        goto LABEL_81;
      case 0x12u:
      case 0x13u:
        if ((v29 == 19) == (v32 == 19))
        {
          unsigned int v33 = *((_DWORD *)a3 + 8);
          unsigned int v34 = *((_DWORD *)a2 + 8);
          BOOL v35 = v34 >= v33;
          BOOL v36 = v34 > v33;
          if (v34 != v33)
          {
LABEL_81:
            unsigned int v54 = v36;
            if (v35) {
              return v54;
            }
            else {
              return 0xFFFFFFFFLL;
            }
          }
LABEL_51:
          a3 = (llvm::Type *)*((void *)a3 + 3);
          a2 = (llvm::Type *)*((void *)a2 + 3);
          continue;
        }
        BOOL v39 = v29 == 19;
        if (v32 == 19) {
          BOOL v39 = 0;
        }
        if (v29 != 19 && v32 == 19) {
          return 0xFFFFFFFFLL;
        }
        else {
          return v39;
        }
      default:
        return result;
    }
  }
}

uint64_t llvm::FunctionComparator::cmpGlobalValues(llvm::FunctionComparator *this, llvm::GlobalValue *a2, llvm::GlobalValue *a3)
{
  unint64_t v5 = sub_1CD87F60C(*((void *)this + 8), (uint64_t)a2);
  unint64_t v6 = sub_1CD87F60C(*((void *)this + 8), (uint64_t)a3);
  if (v5 < v6) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v5 > v6;
  }
}

uint64_t llvm::FunctionComparator::cmpInlineAsm(llvm::FunctionComparator *this, llvm::Type **a2, llvm::Type **a3)
{
  if (a2 == a3) {
    return 0;
  }
  uint64_t result = llvm::FunctionComparator::cmpTypes(this, a2[9], a3[9]);
  if (!result)
  {
    char v6 = *((unsigned char *)a2 + 47);
    uint64_t v7 = v6 >= 0 ? (const llvm::InlineAsm *)(a2 + 3) : a2[3];
    size_t v8 = v6 >= 0 ? v6 & 0x7F : (size_t)a2[4];
    char v9 = *((unsigned char *)a3 + 47);
    unsigned int v10 = v9 >= 0 ? (const llvm::InlineAsm *)(a3 + 3) : a3[3];
    size_t v11 = v9 >= 0 ? v9 & 0x7F : (size_t)a3[4];
    uint64_t result = llvm::FunctionComparator::cmpMem(result, v7, v8, v10, v11);
    if (!result)
    {
      char v12 = *((unsigned char *)a2 + 71);
      unint64_t v13 = v12 >= 0 ? (const llvm::InlineAsm *)(a2 + 6) : a2[6];
      size_t v14 = v12 >= 0 ? v12 & 0x7F : (size_t)a2[7];
      char v15 = *((unsigned char *)a3 + 71);
      unsigned int v16 = v15 >= 0 ? (const llvm::InlineAsm *)(a3 + 6) : a3[6];
      size_t v17 = v15 >= 0 ? v15 & 0x7F : (size_t)a3[7];
      uint64_t result = llvm::FunctionComparator::cmpMem(result, v13, v14, v16, v17);
      if (!result)
      {
        unsigned int v18 = *((unsigned __int8 *)a2 + 80);
        unsigned int v19 = *((unsigned __int8 *)a3 + 80);
        BOOL v20 = v18 >= v19;
        BOOL v21 = v18 == v19;
        BOOL v22 = v18 > v19;
        uint64_t result = v20 ? v22 : 0xFFFFFFFFLL;
        if (v21)
        {
          unsigned int v23 = *((unsigned __int8 *)a2 + 81);
          unsigned int v24 = *((unsigned __int8 *)a3 + 81);
          BOOL v20 = v23 >= v24;
          BOOL v25 = v23 == v24;
          BOOL v26 = v23 > v24;
          uint64_t result = v20 ? v26 : 0xFFFFFFFFLL;
          if (v25)
          {
            unsigned int v27 = *((_DWORD *)a2 + 21);
            unsigned int v28 = *((_DWORD *)a3 + 21);
            BOOL v20 = v27 >= v28;
            BOOL v29 = v27 == v28;
            unsigned int v30 = v27 > v28;
            if (!v20) {
              unsigned int v30 = -1;
            }
            if (v29) {
              return 0;
            }
            else {
              return v30;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t llvm::FunctionComparator::compareSignature(llvm::LLVMContext ****this)
{
  uint64_t result = llvm::FunctionComparator::cmpAttrs((llvm::FunctionComparator *)this, (uint64_t)(*this)[14], (uint64_t)this[1][14]);
  if (result) {
    return result;
  }
  uint64_t v3 = *this;
  uint64_t v4 = (uint64_t)this[1];
  unsigned int v5 = *((unsigned __int16 *)*this + 9);
  unsigned int v6 = (v5 >> 14) & 1;
  unsigned int v7 = (*(unsigned __int16 *)(v4 + 18) >> 14) & 1;
  BOOL v8 = v6 >= v7;
  BOOL v9 = v6 == v7;
  BOOL v10 = v6 > v7;
  uint64_t result = v8 ? v10 : 0xFFFFFFFFLL;
  if (!v9) {
    return result;
  }
  if ((v5 & 0x4000) != 0)
  {
    GC = llvm::LLVMContext::getGC(**v3, (const llvm::Function *)v3);
    char v35 = *((unsigned char *)GC + 23);
    BOOL v36 = v35 < 0;
    if (v35 >= 0) {
      unint64_t v37 = GC;
    }
    else {
      unint64_t v37 = (const void *)*GC;
    }
    size_t v38 = v35 & 0x7F;
    if (v36) {
      size_t v39 = GC[1];
    }
    else {
      size_t v39 = v38;
    }
    BOOL v40 = llvm::LLVMContext::getGC(**this[1], (const llvm::Function *)this[1]);
    char v41 = *((unsigned char *)v40 + 23);
    BOOL v42 = v41 < 0;
    if (v41 >= 0) {
      int v43 = v40;
    }
    else {
      int v43 = (const void *)*v40;
    }
    size_t v44 = v41 & 0x7F;
    if (v42) {
      size_t v45 = v40[1];
    }
    else {
      size_t v45 = v44;
    }
    uint64_t result = llvm::FunctionComparator::cmpMem((uint64_t)v40, v37, v39, v43, v45);
    if (result) {
      return result;
    }
    uint64_t v3 = *this;
    uint64_t v4 = (uint64_t)this[1];
  }
  unsigned int v11 = *((_DWORD *)v3 + 8);
  unsigned int v12 = (v11 >> 22) & 1;
  unsigned int v13 = *(_DWORD *)(v4 + 32);
  unsigned int v14 = (v13 >> 22) & 1;
  BOOL v8 = v12 >= v14;
  BOOL v15 = v12 == v14;
  BOOL v16 = v12 > v14;
  if (v8) {
    uint64_t result = v16;
  }
  else {
    uint64_t result = 0xFFFFFFFFLL;
  }
  if (!v15) {
    return result;
  }
  if ((v11 & 0x400000) != 0)
  {
    uint64_t v46 = *(void *)**v3;
    uint64_t v75 = (void ***)v3;
    int v47 = *(_DWORD *)(v46 + 2520);
    if (v47)
    {
      uint64_t v48 = *(void *)(v46 + 2504);
      int v49 = v47 - 1;
      unsigned int v50 = v49 & ((v3 >> 4) ^ (v3 >> 9));
      unsigned int v51 = (llvm::LLVMContext ****)(v48 + 24 * v50);
      unsigned int v52 = *v51;
      if (*v51 == v3) {
        goto LABEL_52;
      }
      int v63 = 0;
      int v64 = 1;
      while (v52 != (llvm::LLVMContext ***)-4096)
      {
        if (v63) {
          BOOL v65 = 0;
        }
        else {
          BOOL v65 = v52 == (llvm::LLVMContext ***)-8192;
        }
        if (v65) {
          int v63 = v51;
        }
        unsigned int v66 = v50 + v64++;
        unsigned int v50 = v66 & v49;
        unsigned int v51 = (llvm::LLVMContext ****)(v48 + 24 * v50);
        unsigned int v52 = *v51;
        if (*v51 == v3) {
          goto LABEL_52;
        }
      }
      if (v63) {
        uint64_t v71 = v63;
      }
      else {
        uint64_t v71 = v51;
      }
    }
    else
    {
      uint64_t v71 = 0;
    }
    unsigned int v51 = (llvm::LLVMContext ****)sub_1CC5BF31C(v46 + 2504, (uint64_t)&v75, (uint64_t *)&v75, v71);
    uint64_t v72 = (uint64_t)v75;
    v51[1] = 0;
    v51[2] = 0;
    *unsigned int v51 = (llvm::LLVMContext ***)v72;
    uint64_t v4 = (uint64_t)this[1];
    unsigned int v13 = *(_DWORD *)(v4 + 32);
LABEL_52:
    unsigned int v53 = v51[1];
    size_t v54 = (size_t)v51[2];
    if ((v13 & 0x400000) == 0)
    {
      uint64_t v55 = 0;
      size_t v56 = 0;
LABEL_58:
      uint64_t result = llvm::FunctionComparator::cmpMem((uint64_t)v51, v53, v54, v55, v56);
      if (result) {
        return result;
      }
      uint64_t v3 = *this;
      uint64_t v4 = (uint64_t)this[1];
      goto LABEL_14;
    }
    uint64_t v57 = ***(void ***)v4;
    uint64_t v75 = (void ***)v4;
    int v58 = *(_DWORD *)(v57 + 2520);
    if (v58)
    {
      uint64_t v59 = *(void *)(v57 + 2504);
      int v60 = v58 - 1;
      unsigned int v61 = v60 & ((v4 >> 4) ^ (v4 >> 9));
      unsigned int v51 = (llvm::LLVMContext ****)(v59 + 24 * v61);
      long long v62 = *v51;
      if (*v51 == (llvm::LLVMContext ***)v4)
      {
LABEL_57:
        uint64_t v55 = v51[1];
        size_t v56 = (size_t)v51[2];
        goto LABEL_58;
      }
      int v67 = 0;
      int v68 = 1;
      while (v62 != (llvm::LLVMContext ***)-4096)
      {
        if (v67) {
          BOOL v69 = 0;
        }
        else {
          BOOL v69 = v62 == (llvm::LLVMContext ***)-8192;
        }
        if (v69) {
          int v67 = v51;
        }
        unsigned int v70 = v61 + v68++;
        unsigned int v61 = v70 & v60;
        unsigned int v51 = (llvm::LLVMContext ****)(v59 + 24 * v61);
        long long v62 = *v51;
        if (*v51 == (llvm::LLVMContext ***)v4) {
          goto LABEL_57;
        }
      }
      if (v67) {
        uint64_t v73 = v67;
      }
      else {
        uint64_t v73 = v51;
      }
    }
    else
    {
      uint64_t v73 = 0;
    }
    unsigned int v51 = (llvm::LLVMContext ****)sub_1CC5BF31C(v57 + 2504, (uint64_t)&v75, (uint64_t *)&v75, v73);
    uint64_t v74 = (uint64_t)v75;
    v51[1] = 0;
    v51[2] = 0;
    *unsigned int v51 = (llvm::LLVMContext ***)v74;
    goto LABEL_57;
  }
LABEL_14:
  unsigned int v17 = *((_DWORD *)v3[3] + 2);
  BOOL v18 = v17 < 0x100;
  BOOL v19 = v17 > 0xFF;
  BOOL v20 = *(llvm::Type **)(v4 + 24);
  unsigned int v21 = *((_DWORD *)v20 + 2);
  BOOL v22 = v21 > 0xFF;
  BOOL v23 = v21 < 0x100 && v19;
  if (v22 && v18) {
    uint64_t result = 0xFFFFFFFFLL;
  }
  else {
    uint64_t result = v23;
  }
  if (((v19 ^ v22) & 1) == 0)
  {
    unsigned int v24 = (*((unsigned __int16 *)v3 + 9) >> 4) & 0x3FF;
    unsigned int v25 = (*(unsigned __int16 *)(v4 + 18) >> 4) & 0x3FF;
    BOOL v8 = v24 >= v25;
    BOOL v26 = v24 == v25;
    BOOL v27 = v24 > v25;
    uint64_t result = v8 ? v27 : 0xFFFFFFFFLL;
    if (v26)
    {
      uint64_t result = llvm::FunctionComparator::cmpTypes((llvm::FunctionComparator *)this, (llvm::Type *)v3[3], v20);
      if (!result)
      {
        unsigned int v28 = *this;
        if (*((_WORD *)*this + 9)) {
          llvm::Function::BuildLazyArguments((llvm::Function *)*this);
        }
        BOOL v29 = (const llvm::Value *)v28[11];
        unsigned int v30 = this[1];
        if (*((_WORD *)v30 + 9)) {
          llvm::Function::BuildLazyArguments((llvm::Function *)this[1]);
        }
        int v31 = v30[11];
        int v32 = *this;
        if (*((_WORD *)*this + 9)) {
          llvm::Function::BuildLazyArguments((llvm::Function *)*this);
        }
        uint64_t v33 = (uint64_t)&v32[11][5 * (void)v32[12]];
        if (v29 == (const llvm::Value *)v33)
        {
          return 0;
        }
        else
        {
          do
          {
            llvm::FunctionComparator::cmpValues((llvm::FunctionComparator *)this, v29, v31);
            uint64_t result = 0;
            BOOL v29 = (const llvm::Value *)((char *)v29 + 40);
            v31 += 5;
          }
          while (v29 != (const llvm::Value *)v33);
        }
      }
    }
  }
  return result;
}

uint64_t *llvm::FunctionImportGlobalProcessing::doImportAsDefinition(llvm::FunctionImportGlobalProcessing *this, const llvm::GlobalValue *a2)
{
  uint64_t result = (uint64_t *)*((void *)this + 2);
  if (result)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a2;
    return (uint64_t *)sub_1CC906108(result, &v4, &v3);
  }
  return result;
}

void llvm::FunctionImportGlobalProcessing::processGlobalsForThinLTO(llvm::FunctionImportGlobalProcessing *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)this + 8;
  uint64_t v4 = *(void *)(*(void *)this + 16);
  if (v4 != v3)
  {
    do
    {
      if (v4) {
        unsigned int v5 = (llvm::GlobalValue *)(v4 - 56);
      }
      else {
        unsigned int v5 = 0;
      }
      llvm::FunctionImportGlobalProcessing::processGlobalForThinLTO(this, v5);
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != v3);
    uint64_t v2 = *(void *)this;
  }
  uint64_t v6 = v2 + 24;
  uint64_t v7 = *(void *)(v2 + 32);
  if (v7 != v2 + 24)
  {
    do
    {
      if (v7) {
        BOOL v8 = (llvm::GlobalValue *)(v7 - 56);
      }
      else {
        BOOL v8 = 0;
      }
      llvm::FunctionImportGlobalProcessing::processGlobalForThinLTO(this, v8);
      uint64_t v7 = *(void *)(v7 + 8);
    }
    while (v7 != v6);
    uint64_t v2 = *(void *)this;
  }
  uint64_t v9 = v2 + 40;
  for (uint64_t i = *(void *)(v2 + 48); i != v9; uint64_t i = *(void *)(i + 8))
  {
    if (i) {
      unsigned int v11 = (llvm::GlobalValue *)(i - 48);
    }
    else {
      unsigned int v11 = 0;
    }
    llvm::FunctionImportGlobalProcessing::processGlobalForThinLTO(this, v11);
  }
  if (*((_DWORD *)this + 26))
  {
    uint64_t v12 = *(void *)this + 24;
    uint64_t v13 = *(void *)(*(void *)this + 32);
    uint64_t v14 = *(void *)this + 8;
    uint64_t v15 = *(void *)(*(void *)this + 16);
    uint64_t v21 = v13;
    uint64_t v22 = v15;
    uint64_t v23 = v12;
    uint64_t v24 = v14;
    while (1)
    {
      if (v13 == v12 && v15 == v14)
      {
        BOOL v16 = v23 == v12 && v24 == v14;
        if (v16) {
          break;
        }
      }
      uint64_t v17 = 0;
      do
      {
        uint64_t v18 = (*(uint64_t (**)(uint64_t *))((char *)&off_1F2648340 + v17))(&v21);
        v17 += 16;
      }
      while (!v18);
      BOOL v19 = (llvm::GlobalObject *)v18;
      if (*(void *)(v18 + 48))
      {
        uint64_t v25 = *(void *)(v18 + 48);
        uint64_t v26 = 0;
        if (sub_1CD3C8538((uint64_t *)this + 12, &v25, &v26))
        {
          if (v26 != *((void *)this + 12) + 16 * *((unsigned int *)this + 28)) {
            llvm::GlobalObject::setComdat(v19, *(llvm::Comdat **)(v26 + 8));
          }
        }
      }
      uint64_t v20 = 0;
      do
      {
        if ((*(uint64_t (**)(uint64_t *))((char *)&off_1F2648320 + v20))(&v21)) {
          break;
        }
        BOOL v16 = v20 == 16;
        v20 += 16;
      }
      while (!v16);
      uint64_t v13 = v21;
      uint64_t v15 = v22;
    }
  }
}

uint64_t llvm::FunctionImportGlobalProcessing::run(llvm::FunctionImportGlobalProcessing *this)
{
  return 0;
}

uint64_t llvm::isSafeToDestroyConstant(llvm *this, const llvm::Constant *a2)
{
  unsigned int v33[8] = *MEMORY[0x1E4F143B8];
  unsigned int v30 = v33;
  unsigned int v32 = 8;
  uint64_t v25 = v29;
  uint64_t v26 = v29;
  uint64_t v27 = 8;
  int v28 = 0;
  v33[0] = this;
  unsigned int v2 = 1;
  while (1)
  {
    uint64_t v3 = *((void *)v30 + v2 - 1);
    unsigned int v31 = v2 - 1;
    uint64_t v4 = v26;
    uint64_t v5 = HIDWORD(v27);
    if (v26 == v25)
    {
      if (HIDWORD(v27))
      {
        uint64_t v6 = 0;
        uint64_t v7 = 8 * HIDWORD(v27);
        BOOL v8 = v26;
        while (*(void *)v8 != v3)
        {
          if (*(void *)v8 == -2) {
            uint64_t v6 = v8;
          }
          v8 += 8;
          v7 -= 8;
          if (!v7)
          {
            if (!v6) {
              goto LABEL_10;
            }
            *(void *)uint64_t v6 = v3;
            --v28;
            goto LABEL_34;
          }
        }
        goto LABEL_45;
      }
LABEL_10:
      unsigned int v9 = v27;
      if (HIDWORD(v27) < v27)
      {
        ++HIDWORD(v27);
        *(void *)&v26[8 * v5] = v3;
        goto LABEL_34;
      }
    }
    else
    {
      unsigned int v9 = v27;
    }
    if (3 * v9 <= 4 * (HIDWORD(v27) - v28))
    {
      if (v9 >= 0x40) {
        v9 *= 2;
      }
      else {
        unsigned int v9 = 128;
      }
    }
    else if (v9 - HIDWORD(v27) >= v9 >> 3)
    {
      goto LABEL_15;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v25, v9);
    unsigned int v9 = v27;
    uint64_t v4 = v26;
LABEL_15:
    unsigned int v10 = v9 - 1;
    unsigned int v11 = (v9 - 1) & ((v3 >> 4) ^ (v3 >> 9));
    uint64_t v12 = &v4[8 * v11];
    uint64_t v13 = *(void *)v12;
    if (*(void *)v12 == -1) {
      break;
    }
    uint64_t v14 = 0;
    int v15 = 1;
    while (v13 != v3)
    {
      if (v14) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v13 == -2;
      }
      if (v16) {
        uint64_t v14 = v12;
      }
      unsigned int v17 = v11 + v15++;
      unsigned int v11 = v17 & v10;
      uint64_t v12 = &v4[8 * (v17 & v10)];
      uint64_t v13 = *(void *)v12;
      if (*(void *)v12 == -1) {
        goto LABEL_27;
      }
    }
LABEL_45:
    unsigned int v2 = v31;
LABEL_46:
    if (!v2)
    {
      uint64_t v19 = 1;
      goto LABEL_55;
    }
  }
  uint64_t v14 = 0;
LABEL_27:
  if (v14) {
    uint64_t v18 = v14;
  }
  else {
    uint64_t v18 = v12;
  }
  if (*(void *)v18 == v3) {
    goto LABEL_45;
  }
  if (*(void *)v18 == -2) {
    --v28;
  }
  else {
    ++HIDWORD(v27);
  }
  *(void *)uint64_t v18 = v3;
LABEL_34:
  uint64_t v19 = 0;
  unsigned int v20 = *(unsigned __int8 *)(v3 + 16);
  if (v20 < 4 || v20 - 11 < 0xA) {
    goto LABEL_55;
  }
  uint64_t v21 = *(void *)(v3 + 8);
  if (!v21) {
    goto LABEL_45;
  }
  while (1)
  {
    uint64_t v22 = *(void *)(v21 + 24);
    if (!v22 || *(unsigned __int8 *)(v22 + 16) > 0x14u) {
      break;
    }
    if (v31 >= (unint64_t)v32) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v30 + v31) = v22;
    unsigned int v2 = ++v31;
    uint64_t v21 = *(void *)(v21 + 8);
    if (!v21) {
      goto LABEL_46;
    }
  }
  uint64_t v19 = 0;
LABEL_55:
  if (v26 != v25) {
    free(v26);
  }
  if (v30 != v33) {
    free(v30);
  }
  return v19;
}

uint64_t llvm::GlobalStatus::GlobalStatus(uint64_t this)
{
  *(_WORD *)this = 0;
  *(_DWORD *)(this + 28) = 0;
  *(void *)(this + 12) = 0;
  *(void *)(this + 4) = 0;
  *(void *)(this + 17) = 0;
  return this;
}

{
  *(_WORD *)this = 0;
  *(_DWORD *)(this + 28) = 0;
  *(void *)(this + 12) = 0;
  *(void *)(this + 4) = 0;
  *(void *)(this + 17) = 0;
  return this;
}

uint64_t llvm::GlobalStatus::analyzeGlobal(llvm::GlobalStatus *this, const llvm::Value *a2, llvm::GlobalStatus *a3)
{
  uint64_t v5 = v9;
  uint64_t v6 = v9;
  uint64_t v7 = 16;
  int v8 = 0;
  uint64_t result = sub_1CD16D330((uint64_t)this, a2, (uint64_t)&v5);
  if (v6 != v5)
  {
    unsigned int v4 = result;
    free(v6);
    return v4;
  }
  return result;
}

uint64_t sub_1CD16D330(uint64_t a1, const llvm::Constant *a2, uint64_t a3)
{
  unsigned int v4 = a2;
  if (a1 && *(unsigned char *)(a1 + 16) == 3 && (*(unsigned char *)(a1 + 80) & 2) != 0) {
    *((_DWORD *)a2 + 1) = 2;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    return 0;
  }
  while (1)
  {
    uint64_t v7 = *(void *)(v6 + 24);
    unsigned int v8 = *(unsigned __int8 *)(v7 + 16);
    if (v7) {
      BOOL v9 = v8 > 0x14;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      if (v8 != 5 || *(unsigned char *)(*(void *)v7 + 8) != 15)
      {
        if ((llvm::isSafeToDestroyConstant(*(llvm **)(v6 + 24), a2) & 1) == 0) {
          return 1;
        }
        goto LABEL_113;
      }
      goto LABEL_112;
    }
    if (v7) {
      BOOL v10 = v8 >= 0x1C;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10) {
      return 1;
    }
    if (!*((unsigned char *)v4 + 24))
    {
      uint64_t v17 = *(void *)(*(void *)(v7 + 40) + 56);
      uint64_t v18 = *((void *)v4 + 2);
      if (v18)
      {
        if (v18 != v17) {
          *((unsigned char *)v4 + 24) = 1;
        }
      }
      else
      {
        *((void *)v4 + 2) = v17;
      }
    }
    char v11 = v8 - 61;
    if (v8 - 61 <= 0x18)
    {
      if (((1 << v11) & 0x30002) != 0) {
        goto LABEL_112;
      }
      if (((1 << v11) & 0x1400000) != 0)
      {
        uint64_t v12 = *(void *)(a3 + 8);
        uint64_t v13 = *(unsigned int *)(a3 + 20);
        if (v12 == *(void *)a3)
        {
          if (v13)
          {
            uint64_t v14 = 0;
            uint64_t v15 = 8 * v13;
            BOOL v16 = *(uint64_t **)(a3 + 8);
            while (*v16 != v7)
            {
              if (*v16 == -2) {
                uint64_t v14 = v16;
              }
              ++v16;
              v15 -= 8;
              if (!v15)
              {
                if (!v14) {
                  goto LABEL_28;
                }
                *uint64_t v14 = v7;
                --*(_DWORD *)(a3 + 24);
                goto LABEL_112;
              }
            }
            goto LABEL_113;
          }
LABEL_28:
          a2 = (const llvm::Constant *)*(unsigned int *)(a3 + 16);
          if (v13 < a2)
          {
            *(_DWORD *)(a3 + 20) = v13 + 1;
            *(void *)(v12 + 8 * v13) = v7;
LABEL_112:
            if (sub_1CD16D330(v7, v4, a3)) {
              return 1;
            }
            goto LABEL_113;
          }
        }
        else
        {
          a2 = (const llvm::Constant *)*(unsigned int *)(a3 + 16);
        }
        if (3 * (int)a2 <= (4 * (v13 - *(_DWORD *)(a3 + 24))))
        {
          if (a2 >= 0x40) {
            LODWORD(a2) = 2 * a2;
          }
          else {
            LODWORD(a2) = 128;
          }
        }
        else if ((int)a2 - (int)v13 >= a2 >> 3)
        {
LABEL_64:
          int v31 = a2 - 1;
          unsigned int v32 = (a2 - 1) & ((v7 >> 4) ^ (v7 >> 9));
          uint64_t v33 = (uint64_t *)(v12 + 8 * v32);
          uint64_t v34 = *v33;
          if (*v33 != -1)
          {
            char v35 = 0;
            int v36 = 1;
            while (v34 != v7)
            {
              if (v35) {
                BOOL v37 = 0;
              }
              else {
                BOOL v37 = v34 == -2;
              }
              if (v37) {
                char v35 = v33;
              }
              unsigned int v38 = v32 + v36++;
              unsigned int v32 = v38 & v31;
              uint64_t v33 = (uint64_t *)(v12 + 8 * (v38 & v31));
              uint64_t v34 = *v33;
              if (*v33 == -1) {
                goto LABEL_105;
              }
            }
            goto LABEL_113;
          }
          char v35 = 0;
LABEL_105:
          if (v35) {
            int v49 = v35;
          }
          else {
            int v49 = v33;
          }
          if (*v49 == v7) {
            goto LABEL_113;
          }
          if (*v49 == -2) {
            --*(_DWORD *)(a3 + 24);
          }
          else {
            ++*(_DWORD *)(a3 + 20);
          }
          uint64_t *v49 = v7;
          goto LABEL_112;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a3, a2);
        a2 = (const llvm::Constant *)*(unsigned int *)(a3 + 16);
        uint64_t v12 = *(void *)(a3 + 8);
        goto LABEL_64;
      }
      if (v8 == 61)
      {
        if (*(void *)(v7 - 64) == a1) {
          return 1;
        }
        unsigned int v19 = *(unsigned __int16 *)(v7 + 18);
        if (v19) {
          return 1;
        }
        unsigned int v20 = *((_DWORD *)v4 + 7);
        unsigned int v21 = (v19 >> 7) & 7;
        if (v21 == 5 && v20 == 4)
        {
          int v22 = 6;
        }
        else
        {
          if (v20 <= v21) {
            unsigned int v43 = v21;
          }
          else {
            unsigned int v43 = *((_DWORD *)v4 + 7);
          }
          if (v20 == 5 && v21 == 4) {
            int v22 = 6;
          }
          else {
            int v22 = v43;
          }
        }
        *((_DWORD *)v4 + 7) = v22;
        if (*((_DWORD *)v4 + 1) == 3) {
          goto LABEL_113;
        }
        size_t v45 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v7 - 32));
        if (!v45 || (uint64_t v46 = v45, *((unsigned char *)v45 + 16) != 3))
        {
          *((_DWORD *)v4 + 1) = 3;
          goto LABEL_113;
        }
        uint64_t v47 = *(void *)(v7 - 64);
        if (v47 && *(unsigned __int8 *)(v47 + 16) <= 0x14u)
        {
          if (llvm::Constant::isThreadDependent(*(llvm::Constant **)(v7 - 64))) {
            return 1;
          }
          if (!*((unsigned char *)v46 + 16))
          {
            if (*((llvm::Value **)v46 + 9) != (llvm::Value *)((char *)v46 + 72) || (*((unsigned char *)v46 + 34) & 0x80) != 0)
            {
LABEL_99:
              if (v47 == *((void *)v46 - 4)) {
                goto LABEL_134;
              }
            }
LABEL_100:
            if (*(unsigned char *)(v47 + 16) == 60 && *(llvm::Value **)(v47 - 32) == v46)
            {
LABEL_134:
              if (*((int *)v4 + 1) <= 0) {
                *((_DWORD *)v4 + 1) = 1;
              }
              goto LABEL_113;
            }
            int v48 = *((_DWORD *)v4 + 1);
            if (v48 > 1)
            {
              if (v48 == 2)
              {
                uint64_t v57 = *((void *)v4 + 1);
                if (v57) {
                  uint64_t v57 = *(void *)(v57 - 64);
                }
                if (v57 == v47) {
                  goto LABEL_113;
                }
              }
              goto LABEL_147;
            }
            *((_DWORD *)v4 + 1) = 2;
            *((void *)v4 + 1) = v7;
            goto LABEL_113;
          }
          if (*((unsigned char *)v46 + 16) != 3) {
            goto LABEL_99;
          }
        }
        if ((*((_DWORD *)v46 + 5) & 0x7FFFFFF) != 0) {
          goto LABEL_99;
        }
        goto LABEL_100;
      }
    }
    if (v8 == 60)
    {
      uint64_t result = 1;
      *((unsigned char *)v4 + 1) = 1;
      unsigned int v24 = *(unsigned __int16 *)(v7 + 18);
      if (v24) {
        return result;
      }
      unsigned int v25 = *((_DWORD *)v4 + 7);
      unsigned int v26 = (v24 >> 7) & 7;
      if (v26 == 5 && v25 == 4)
      {
        int v30 = 6;
      }
      else
      {
        if (v25 <= v26) {
          unsigned int v28 = v26;
        }
        else {
          unsigned int v28 = *((_DWORD *)v4 + 7);
        }
        if (v25 == 5 && v26 == 4) {
          int v30 = 6;
        }
        else {
          int v30 = v28;
        }
      }
      *((_DWORD *)v4 + 7) = v30;
      goto LABEL_113;
    }
    if (v8 - 81 <= 1)
    {
      *(unsigned char *)unsigned int v4 = 1;
      goto LABEL_113;
    }
    if (!sub_1CC92A430(v7)) {
      break;
    }
    uint64_t v39 = *(_DWORD *)(v7 + 20) & 0x7FFFFFF;
    BOOL v40 = (void *)(v7 - 32 * v39);
    uint64_t v41 = v40[12];
    uint64_t v42 = *(unsigned int *)(v41 + 32);
    if (v42 > 0x40)
    {
      int v52 = 0;
      int64_t v53 = (unint64_t)(v42 + 63) >> 6;
      do
      {
        BOOL v9 = v53-- < 1;
        if (v9) {
          break;
        }
        unint64_t v54 = *(void *)(*(void *)(v41 + 24) + 8 * v53);
        v52 += __clz(v54);
      }
      while (!v54);
      int v55 = v42 | 0xFFFFFFC0;
      if ((v42 & 0x3F) == 0) {
        int v55 = 0;
      }
      if (v52 + v55 != v42) {
        return 1;
      }
    }
    else if (*(void *)(v41 + 24))
    {
      return 1;
    }
    if (*v40 == a1)
    {
      *((_DWORD *)v4 + 1) = 3;
      uint64_t v39 = *(_DWORD *)(v7 + 20) & 0x7FFFFFF;
    }
    if (*(void *)(v7 - 32 * v39 + 32) == a1) {
      goto LABEL_133;
    }
LABEL_113:
    uint64_t v6 = *(void *)(v6 + 8);
    if (!v6) {
      return 0;
    }
  }
  if (!sub_1CC5818F8(v7))
  {
    uint64_t result = 1;
    unsigned int v56 = *(unsigned __int8 *)(v7 + 16) - 33;
    if (v56 > 0x33 || ((1 << v56) & 0x8000000000041) == 0 || v7 - 32 != v6) {
      return result;
    }
LABEL_133:
    *((unsigned char *)v4 + 1) = 1;
    goto LABEL_113;
  }
  uint64_t v50 = *(void *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) + 96);
  uint64_t v51 = *(unsigned int *)(v50 + 32);
  if (v51 <= 0x40)
  {
    if (*(void *)(v50 + 24)) {
      return 1;
    }
    goto LABEL_147;
  }
  int v58 = 0;
  int64_t v59 = (unint64_t)(v51 + 63) >> 6;
  do
  {
    BOOL v9 = v59-- < 1;
    if (v9) {
      break;
    }
    unint64_t v60 = *(void *)(*(void *)(v50 + 24) + 8 * v59);
    v58 += __clz(v60);
  }
  while (!v60);
  int v61 = v51 | 0xFFFFFFC0;
  if ((v51 & 0x3F) == 0) {
    int v61 = 0;
  }
  if (v58 + v61 == v51)
  {
LABEL_147:
    *((_DWORD *)v4 + 1) = 3;
    goto LABEL_113;
  }
  return 1;
}

uint64_t sub_1CD16D8F8()
{
  int v4 = 1;
  int v2 = 0x100000;
  uint64_t v3 = &v2;
  *(void *)&long long v1 = "The probability of a guard failing is assumed to be the reciprocal of this value (default = 1 << 20)";
  *((void *)&v1 + 1) = 100;
  sub_1CD45A86C((uint64_t)&unk_1EBCFC428, "guards-predicate-pass-branch-weight", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCFC428, &dword_1CB82C000);
}

uint64_t llvm::updateProfileCallee(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result = (uint64_t)llvm::Function::getEntryCount((uint64_t ***)a1, 0, (uint64_t)&v27);
  if (v28)
  {
    unint64_t v7 = v27;
    if (v27 < -a2 && a2 < 0) {
      unint64_t v9 = 0;
    }
    else {
      unint64_t v9 = v27 + a2;
    }
    if (a3 && *((_DWORD *)a3 + 2))
    {
      uint64_t v10 = *((unsigned int *)a3 + 4);
      if (v10)
      {
        uint64_t v11 = v10 << 6;
        uint64_t v12 = *a3;
        while ((*(void *)(v12 + 24) | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v12 += 64;
          v11 -= 64;
          if (!v11) {
            goto LABEL_25;
          }
        }
      }
      else
      {
        uint64_t v12 = *a3;
      }
      uint64_t v13 = *a3 + (v10 << 6);
      if (v12 != v13)
      {
        uint64_t v14 = *(void *)(v12 + 24);
LABEL_18:
        if (*(unsigned char *)(v14 + 16) == 84)
        {
          uint64_t result = *(void *)(v12 + 56);
          if (result)
          {
            if (*(unsigned char *)(result + 16) == 84) {
              uint64_t result = llvm::CallInst::updateProfWeight(result, v7 - v9, v7);
            }
          }
        }
        while (1)
        {
          v12 += 64;
          if (v12 == v13) {
            break;
          }
          uint64_t v14 = *(void *)(v12 + 24);
          if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            if (v12 != v13) {
              goto LABEL_18;
            }
            break;
          }
        }
      }
    }
LABEL_25:
    if (a2)
    {
      uint64_t result = llvm::Function::setEntryCount((llvm::Function *)a1, v9, 0, 0);
      uint64_t v15 = a1 + 72;
      for (uint64_t i = *(void *)(a1 + 80); ; uint64_t i = *(void *)(i + 8))
      {
        if (i == v15) {
          return result;
        }
        uint64_t v17 = i - 24;
        if (!i) {
          uint64_t v17 = 0;
        }
        if (a3) {
          break;
        }
LABEL_40:
        uint64_t v25 = v17 + 40;
        for (uint64_t j = *(void *)(v17 + 48); j != v25; uint64_t j = *(void *)(j + 8))
        {
          if (j) {
            uint64_t result = j - 24;
          }
          else {
            uint64_t result = 0;
          }
          if (j)
          {
            if (*(unsigned char *)(result + 16) == 84) {
              uint64_t result = llvm::CallInst::updateProfWeight(result, v9, v7);
            }
          }
        }
LABEL_49:
        ;
      }
      uint64_t v18 = *a3;
      uint64_t v19 = *((unsigned int *)a3 + 4);
      if (v19)
      {
        uint64_t v20 = (v19 - 1) & ((v17 >> 4) ^ (v17 >> 9));
        uint64_t v21 = v18 + (v20 << 6);
        uint64_t v22 = *(void *)(v21 + 24);
        if (v17 == v22) {
          goto LABEL_39;
        }
        int v23 = 1;
        while (v22 != -4096)
        {
          int v24 = v20 + v23++;
          uint64_t v20 = v24 & (v19 - 1);
          uint64_t v21 = v18 + (v20 << 6);
          uint64_t v22 = *(void *)(v21 + 24);
          if (v17 == v22) {
            goto LABEL_39;
          }
        }
      }
      uint64_t v21 = v18 + (v19 << 6);
LABEL_39:
      if (v21 == v18 + (v19 << 6)) {
        goto LABEL_49;
      }
      goto LABEL_40;
    }
  }
  return result;
}

const char *llvm::InlineFunction(void **a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5)
{
  v1892[4] = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)a1 + 16) == 39) {
    return "We don't inline callbr yet.";
  }
  uint64_t v9 = (uint64_t)a1;
  uint64_t v11 = (unsigned int *)(a2 + 12);
  uint64_t v10 = a2[12];
  *((_DWORD *)a2 + 14) = 0;
  unsigned int v12 = *((_DWORD *)a2 + 26);
  if (v12)
  {
    uint64_t v219 = v10 + 24 * v12;
    do
    {
      uint64_t v220 = *(void *)(v219 - 8);
      if (v220 != -8192 && v220 != -4096 && v220 != 0)
      {
        unint64_t v222 = *(void *)(v219 - 24) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v222 = *(void *)(v219 - 16);
        uint64_t v223 = *(unint64_t **)(v219 - 16);
        if (v223)
        {
          *uint64_t v223 = *v223 & 7 | v222;
        }
        else
        {
          uint64_t v224 = *(void *)(v219 - 8);
          uint64_t v225 = ***(int32x2_t ****)v224;
          unint64_t v226 = (unint64_t)v225[303];
          if (v226 <= v222)
          {
            uint64_t v227 = v225[305].u32[0];
            if (v226 + 16 * v227 > v222)
            {
              unsigned int v228 = v227 - 1;
              LODWORD(v229) = v228 & ((v224 >> 4) ^ (v224 >> 9));
              uint64_t v230 = (uint64_t *)(v226 + 16 * v229);
              uint64_t v231 = *v230;
              if (v224 == *v230)
              {
LABEL_345:
                uint64_t *v230 = -8192;
                v225[304] = vadd_s32(v225[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v224 = *(void *)(v219 - 8);
              }
              else
              {
                int v232 = 1;
                while (v231 != -4096)
                {
                  int v233 = v229 + v232++;
                  uint64_t v229 = v233 & v228;
                  uint64_t v231 = *(void *)(v226 + 16 * v229);
                  if (v224 == v231)
                  {
                    uint64_t v230 = (uint64_t *)(v226 + 16 * v229);
                    goto LABEL_345;
                  }
                }
              }
              *(unsigned char *)(v224 + 17) &= ~1u;
            }
          }
        }
      }
      v219 -= 24;
    }
    while (v219 != v10);
  }
  *((_DWORD *)a2 + 26) = 0;
  *((_DWORD *)a2 + 78) = 0;
  uint64_t v14 = (llvm::LLVMContext ****)(a1 - 4);
  uint64_t v13 = (uint64_t)*(a1 - 4);
  if (!v13) {
    return "external or indirect";
  }
  if (*(unsigned char *)(v13 + 16)) {
    return "external or indirect";
  }
  if (*(void **)(v13 + 24) != a1[9]) {
    return "external or indirect";
  }
  uint64_t v16 = v13 + 72;
  if (*(void *)(v13 + 72) == v13 + 72 && (*(unsigned char *)(v13 + 34) & 0x80) == 0) {
    return "external or indirect";
  }
  int v17 = *((_DWORD *)a1 + 5);
  v1746 = (llvm::Function *)*(a1 - 4);
  v1771 = (llvm::LLVMContext ****)(a1 - 4);
  if ((v17 & 0x80000000) == 0
    || (v1641 = &a1[-4 * (v17 & 0x7FFFFFF)],
        unint64_t v1644 = (unint64_t)*(v1641 - 1),
        v1642 = v1641 - 1,
        unint64_t v1643 = v1644,
        (v1644 & 0xFFFFFFFF0) == 0))
  {
LABEL_12:
    uint64_t v18 = *(void *)(v9 + 64);
    if (v18 && (*(unsigned char *)(v18 + 16) & 0x20) != 0) {
      hasFnAttrOnCalledFunctiouint64_t n = 1;
    }
    else {
      hasFnAttrOnCalledFunctiouint64_t n = llvm::CallBase::hasFnAttrOnCalledFunction(v9, 37);
    }
    v1737 = *(llvm::Value **)(v9 + 40);
    uint64_t v19 = *((void *)v1737 + 7);
    uint64_t v20 = *(void *)(v13 + 112);
    if (v20)
    {
      if ((*(unsigned char *)(v20 + 19) & 0x20) != 0)
      {
        uint64_t v21 = *(void *)(v19 + 112);
        if (!v21 || (*(unsigned char *)(v21 + 19) & 0x20) == 0) {
          return "incompatible strictfp attributes";
        }
      }
    }
    uint64_t v1741 = a5;
    char v1736 = a4;
    if ((*(_WORD *)(v13 + 18) & 0x4000) == 0) {
      goto LABEL_21;
    }
    __int16 v23 = *(_WORD *)(v19 + 18);
    GC = (const void **)llvm::LLVMContext::getGC(**(llvm::LLVMContext ***)v1746, v1746);
    uint64_t v25 = GC;
    if ((v23 & 0x4000) == 0)
    {
      if (*((char *)GC + 23) < 0)
      {
        sub_1CB8BDF7C((uint64_t)&v1807, *GC, (unint64_t)GC[1]);
      }
      else
      {
        long long v1604 = *(_OWORD *)GC;
        v1808 = GC[2];
        long long v1807 = v1604;
      }
      llvm::Function::setGC(v19, (uint64_t)&v1807);
      if (SHIBYTE(v1808) < 0) {
        operator delete((void *)v1807);
      }
      goto LABEL_21;
    }
    unsigned int v26 = llvm::LLVMContext::getGC(**(llvm::LLVMContext ***)v19, (const llvm::Function *)v19);
    signed __int8 v27 = *((unsigned char *)v25 + 23);
    uint64_t v28 = v27 & 0x7F;
    if (v27 >= 0) {
      BOOL v29 = (const void *)(v27 & 0x7F);
    }
    else {
      BOOL v29 = v25[1];
    }
    char v30 = *((unsigned char *)v26 + 23);
    int v31 = v30;
    unsigned int v32 = (const void *)(v30 & 0x7F);
    if (v31 < 0) {
      unsigned int v32 = (const void *)v26[1];
    }
    if (v29 == v32)
    {
      if (v31 >= 0) {
        uint64_t v33 = (unsigned __int8 *)v26;
      }
      else {
        uint64_t v33 = (unsigned __int8 *)*v26;
      }
      if ((*((unsigned char *)v25 + 23) & 0x80) == 0)
      {
        if ((v27 & 0x7F) != 0)
        {
          uint64_t v5 = "incompatible GC";
          while (*(unsigned __int8 *)v25 == *v33)
          {
            uint64_t v25 = (const void **)((char *)v25 + 1);
            ++v33;
            if (!--v28) {
              goto LABEL_21;
            }
          }
          return v5;
        }
LABEL_21:
        if ((*((_WORD *)v1746 + 9) & 8) != 0)
        {
          int v34 = *((_DWORD *)v1746 + 5);
          if ((v34 & 0x40000000) != 0) {
            char v35 = (llvm::Value **)*((void *)v1746 - 1);
          }
          else {
            char v35 = (llvm::Value **)((char *)v1746 - 32 * (v34 & 0x7FFFFFF));
          }
          int v36 = llvm::Value::stripPointerCasts(*v35);
          uint64_t v22 = (uint64_t)v36;
          if ((*(_WORD *)(v19 + 18) & 8) != 0) {
            goto LABEL_125;
          }
          if (v36)
          {
LABEL_2697:
            sub_1CD5C0280((void *)v19, v22);
            *(_WORD *)(v19 + 18) |= 8u;
          }
        }
        else if ((*(_WORD *)(v19 + 18) & 8) != 0)
        {
          uint64_t v22 = 0;
LABEL_125:
          int v86 = *(_DWORD *)(v19 + 20);
          if ((v86 & 0x40000000) != 0) {
            uint64_t v87 = *(llvm::Value ***)(v19 - 8);
          }
          else {
            uint64_t v87 = (llvm::Value **)(v19 - 32 * (v86 & 0x7FFFFFF));
          }
          uint64_t v97 = llvm::Value::stripPointerCasts(*v87);
          if (!v22)
          {
            uint64_t v1806 = 0;
            if (!v97)
            {
              BOOL v1738 = 0;
              goto LABEL_46;
            }
            goto LABEL_351;
          }
          if (v97)
          {
            if ((llvm::Value *)v22 != v97) {
              return "incompatible personality";
            }
            uint64_t v1806 = 0;
LABEL_351:
            uint64_t v234 = a3;
            unsigned int v235 = llvm::classifyEHPersonality(v97, v98);
            unsigned int v236 = v235 - 7;
            if (v235 - 7 < 4 || v235 == 12)
            {
              unsigned int v238 = v235;
              sub_1CC233A58((char *)v9, 1, (uint64_t *)v1877);
              if (v1878.i8[0])
              {
                uint64_t v278 = *(void *)v1877[0];
                uint64_t v1806 = *(void *)v1877[0];
              }
              else
              {
                uint64_t v278 = v1806;
              }
              if (v278)
              {
                if (v238 == 9)
                {
                  if (*(unsigned char *)(v278 + 16) == 79)
                  {
                    uint64_t v262 = *((void *)v1746 + 10);
                    if (v262 != v16)
                    {
                      uint64_t v5 = "catch in cleanup funclet";
                      do
                      {
                        uint64_t v263 = v262 - 24;
                        if (!v262) {
                          uint64_t v263 = 0;
                        }
                        for (uint64_t i = *(void *)(v263 + 48); ; uint64_t i = *(void *)(i + 8))
                        {
                          uint64_t v265 = i - 24;
                          if (!i) {
                            uint64_t v265 = 0;
                          }
                          if (*(unsigned char *)(v265 + 16) != 83) {
                            break;
                          }
                        }
                        if (*(unsigned char *)(i - 8) == 38) {
                          return v5;
                        }
                        uint64_t v262 = *(void *)(v262 + 8);
                      }
                      while (v262 != v16);
                    }
                  }
                }
                else if (v236 <= 1)
                {
                  for (uint64_t j = *((void *)v1746 + 10); j != v16; uint64_t j = *(void *)(j + 8))
                  {
                    uint64_t v267 = j - 24;
                    if (!j) {
                      uint64_t v267 = 0;
                    }
                    for (uint64_t k = *(void *)(v267 + 48); ; uint64_t k = *(void *)(k + 8))
                    {
                      uint64_t v269 = k - 24;
                      if (!k) {
                        uint64_t v269 = 0;
                      }
                      if (*(unsigned char *)(v269 + 16) != 83) {
                        break;
                      }
                    }
                    unsigned int v270 = *(unsigned __int8 *)(k - 8) - 38;
                    BOOL v182 = v270 > 0x38;
                    uint64_t v271 = (1 << v270) & 0x100060000000001;
                    if (!v182 && v271 != 0) {
                      return "SEH in cleanup funclet";
                    }
                  }
                }
              }
            }
            else
            {
              uint64_t v278 = v1806;
            }
            BOOL v1738 = 0;
            a3 = v234;
            if (v278 && *(unsigned char *)(v9 + 16) == 84)
            {
              memset(v1877, 0, 20);
              char v279 = sub_1CD179E7C(v278, (uint64_t)v1877);
              if (v279) {
                BOOL v1738 = *((unsigned __int8 *)v279 + 16) != 20;
              }
              else {
                BOOL v1738 = 0;
              }
              MEMORY[0x1D25D9CD0](v1877[0], 8);
            }
LABEL_46:
            size_t v1779 = *(void *)(v19 + 72);
            uint64_t v1795 = v19 + 72;
            v1842 = &v1844;
            uint64_t v1843 = 0x800000000;
            __int16 v1803 = 0;
            long long v1804 = 0u;
            memset(v1805, 0, 28);
            unsigned int v1839 = 128;
            BOOL v37 = operator new(0x2000uLL, (std::align_val_t)8uLL);
            v1837 = v37;
            *(void *)v1838 = 0;
            v1877[1] = (void *)2;
            v1877[2] = 0;
            int64x2_t v1878 = (int64x2_t)0xFFFFFFFFFFFFF000;
            v1877[0] = &unk_1F2615EC8;
            v1777 = (llvm::AttributeFuncs *)v19;
            if (!v1839) {
              goto LABEL_61;
            }
            uint64_t v38 = 0;
            unint64_t v39 = (unint64_t)v1839 << 6;
            BOOL v40 = v37 + 2;
            do
            {
              unint64_t v41 = (unint64_t)v1877[1];
              uint64_t v42 = v1878.i64[0];
              *(v40 - 1) = (uint64_t)v1877[1] & 6;
              *BOOL v40 = 0;
              v40[1] = v42;
              if (v42 != -4096 && v42 != -8192 && v42 != 0)
              {
                *BOOL v40 = *(void *)(v41 & 0xFFFFFFFFFFFFFFF8);
                *(void *)(v41 & 0xFFFFFFFFFFFFFFF8) = v40 - 1;
                *(v40 - 1) = v41 & 0xFFFFFFFFFFFFFFFELL;
                if (*v40) {
                  *(void *)*BOOL v40 = *(void *)*v40 & 7 | (unint64_t)(v37 + 2);
                }
                uint64_t v38 = v1878.i64[1];
                uint64_t v9 = (uint64_t)a1;
                uint64_t v14 = v1771;
              }
              *(v40 - 2) = &unk_1F2615EC8;
              v40[2] = v38;
              v40 += 8;
              v37 += 8;
              v39 -= 64;
            }
            while (v39);
            if (v1878.i64[0] == -8192 || v1878.i64[0] == -4096 || !v1878.i64[0])
            {
LABEL_61:
              LOBYTE(v1840) = 0;
              char v1841 = 0;
              v1813 = &v1815;
              uint64_t v1814 = 0x400000000;
              size_t v44 = *v14;
              if (!*v14 || *((unsigned char *)v44 + 16) || v44[3] != *(llvm::LLVMContext ***)(v9 + 72)) {
                size_t v44 = 0;
              }
              uint64_t v1731 = a3;
              size_t v45 = v44 + 9;
              uint64_t v1833 = 0;
              __src = 0;
              int v1834 = 0;
              long long v1835 = 0u;
              memset(v1836, 0, 28);
              uint64_t v46 = v44[10];
              if (v46 != (llvm::LLVMContext **)(v44 + 9))
              {
                while (1)
                {
                  uint64_t v47 = v46 - 3;
                  if (!v46) {
                    uint64_t v47 = 0;
                  }
                  int v48 = v47 + 5;
                  for (uint64_t m = v47[6]; m != (llvm::LLVMContext *)v48; uint64_t m = (llvm::LLVMContext *)*((void *)m + 1))
                  {
                    if (m) {
                      uint64_t v50 = (uint64_t ***)((char *)m - 24);
                    }
                    else {
                      uint64_t v50 = 0;
                    }
                    *(void *)v1869 = 0;
                    if ((*((unsigned char *)v50 + 23) & 0x20) == 0) {
                      goto LABEL_91;
                    }
                    uint64_t v51 = ***v50;
                    v1877[0] = v50;
                    int v52 = *(_DWORD *)(v51 + 2496);
                    if (v52)
                    {
                      uint64_t v53 = *(void *)(v51 + 2480);
                      int v54 = v52 - 1;
                      unsigned int v55 = v54 & ((v50 >> 4) ^ (v50 >> 9));
                      unsigned int v56 = (uint64_t ****)(v53 + 40 * v55);
                      uint64_t v57 = *v56;
                      if (*v56 == v50) {
                        goto LABEL_84;
                      }
                      int v58 = 0;
                      int v59 = 1;
                      while (v57 != (uint64_t ***)-4096)
                      {
                        if (v58) {
                          BOOL v60 = 0;
                        }
                        else {
                          BOOL v60 = v57 == (uint64_t ***)-8192;
                        }
                        if (v60) {
                          int v58 = v56;
                        }
                        unsigned int v61 = v55 + v59++;
                        unsigned int v55 = v61 & v54;
                        unsigned int v56 = (uint64_t ****)(v53 + 40 * v55);
                        uint64_t v57 = *v56;
                        if (*v56 == v50) {
                          goto LABEL_84;
                        }
                      }
                      if (v58) {
                        uint64_t v80 = v58;
                      }
                      else {
                        uint64_t v80 = v56;
                      }
                    }
                    else
                    {
                      uint64_t v80 = 0;
                    }
                    unsigned int v56 = (uint64_t ****)sub_1CC609054(v51 + 2480, (uint64_t)v1877, (uint64_t *)v1877, v80);
                    uint64_t v81 = (uint64_t ***)v1877[0];
                    v56[4] = 0;
                    v56[3] = 0;
                    llvm::ConstantExpr *v56 = v81;
                    v56[1] = (uint64_t ***)(v56 + 3);
                    v56[2] = (uint64_t ***)0x100000000;
LABEL_84:
                    uint64_t v62 = *((unsigned int *)v56 + 4);
                    if (v62)
                    {
                      int v63 = v56[1] + 1;
                      uint64_t v64 = 16 * v62;
                      while (*((_DWORD *)v63 - 2) != 7)
                      {
                        v63 += 2;
                        v64 -= 16;
                        if (!v64) {
                          goto LABEL_91;
                        }
                      }
                      *(void *)v1869 = *v63;
                      if (*(void *)v1869) {
                        sub_1CD17A740((uint64_t)&__src, v1869);
                      }
                    }
LABEL_91:
                    *(void *)v1869 = 0;
                    if ((*((unsigned char *)v50 + 23) & 0x20) == 0) {
                      goto LABEL_109;
                    }
                    uint64_t v65 = ***v50;
                    v1877[0] = v50;
                    int v66 = *(_DWORD *)(v65 + 2496);
                    if (v66)
                    {
                      uint64_t v67 = *(void *)(v65 + 2480);
                      int v68 = v66 - 1;
                      unsigned int v69 = v68 & ((v50 >> 4) ^ (v50 >> 9));
                      unsigned int v70 = (uint64_t ****)(v67 + 40 * v69);
                      uint64_t v71 = *v70;
                      if (*v70 == v50) {
                        goto LABEL_102;
                      }
                      uint64_t v72 = 0;
                      int v73 = 1;
                      while (v71 != (uint64_t ***)-4096)
                      {
                        if (v72) {
                          BOOL v74 = 0;
                        }
                        else {
                          BOOL v74 = v71 == (uint64_t ***)-8192;
                        }
                        if (v74) {
                          uint64_t v72 = v70;
                        }
                        unsigned int v75 = v69 + v73++;
                        unsigned int v69 = v75 & v68;
                        unsigned int v70 = (uint64_t ****)(v67 + 40 * v69);
                        uint64_t v71 = *v70;
                        if (*v70 == v50) {
                          goto LABEL_102;
                        }
                      }
                      if (v72) {
                        uint64_t v82 = v72;
                      }
                      else {
                        uint64_t v82 = v70;
                      }
                    }
                    else
                    {
                      uint64_t v82 = 0;
                    }
                    unsigned int v70 = (uint64_t ****)sub_1CC609054(v65 + 2480, (uint64_t)v1877, (uint64_t *)v1877, v82);
                    uint64_t v83 = (uint64_t ***)v1877[0];
                    v70[4] = 0;
                    v70[3] = 0;
                    void *v70 = v83;
                    v70[1] = (uint64_t ***)(v70 + 3);
                    v70[2] = (uint64_t ***)0x100000000;
LABEL_102:
                    uint64_t v76 = *((unsigned int *)v70 + 4);
                    if (v76)
                    {
                      uint64_t v77 = v70[1] + 1;
                      uint64_t v78 = 16 * v76;
                      while (*((_DWORD *)v77 - 2) != 8)
                      {
                        v77 += 2;
                        v78 -= 16;
                        if (!v78) {
                          goto LABEL_109;
                        }
                      }
                      *(void *)v1869 = *v77;
                      if (*(void *)v1869) {
                        sub_1CD17A740((uint64_t)&__src, v1869);
                      }
                    }
LABEL_109:
                    BOOL v79 = sub_1CC9E8BD8((uint64_t)v50);
                    if (m && v79)
                    {
                      v1877[0] = v50[-4 * (*((_DWORD *)v50 + 5) & 0x7FFFFFF)][3];
                      sub_1CD17A740((uint64_t)&__src, v1877);
                    }
                  }
                  uint64_t v46 = (llvm::LLVMContext **)v46[1];
                  if (v46 == (llvm::LLVMContext **)v45)
                  {
                    uint64_t v85 = (char *)*((void *)&v1835 + 1);
                    uint64_t v84 = (char *)v1835;
                    uint64_t v9 = (uint64_t)a1;
                    goto LABEL_128;
                  }
                }
              }
              uint64_t v85 = 0;
              uint64_t v84 = 0;
LABEL_128:
              v1877[0] = &v1877[2];
              v1877[1] = (void *)0x1000000000;
              unint64_t v88 = v85 - v84;
              if ((unint64_t)(v85 - v84) >= 0x81) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v84 != v85)
              {
                v1612 = v1877[0];
                do
                {
                  uint64_t v1613 = *(void *)v84;
                  v84 += 8;
                  *v1612++ = v1613;
                }
                while (v84 != v85);
              }
              unsigned int v89 = v88 >> 3;
              LODWORD(v1877[1]) = v89;
              while (v89)
              {
                uint64_t v90 = *((void *)v1877[0] + --v89);
                LODWORD(v1877[1]) = v89;
                uint64_t v91 = *(unsigned int *)(v90 + 8);
                if (v91)
                {
                  uint64_t v92 = -8 * v91;
                  do
                  {
                    uint64_t v93 = *(unsigned __int8 **)(v90 + v92);
                    *(void *)v1869 = 0;
                    if (*v93 - 4 <= 0x1E)
                    {
                      *(void *)v1869 = v93;
                      if (sub_1CD17A740((uint64_t)&__src, v1869))
                      {
                        if (LODWORD(v1877[1]) >= (unint64_t)HIDWORD(v1877[1])) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((void *)v1877[0] + LODWORD(v1877[1])) = *(void *)v1869;
                        ++LODWORD(v1877[1]);
                      }
                    }
                    v92 += 8;
                  }
                  while (v92);
                  unsigned int v89 = v1877[1];
                }
              }
              if (v1877[0] != &v1877[2]) {
                free(v1877[0]);
              }
              int v94 = *(_DWORD *)(v9 + 20);
              v1754 = v11;
              if (*((_WORD *)v1746 + 9))
              {
                llvm::Function::BuildLazyArguments(v1746);
                uint64_t v95 = *((void *)v1746 + 11);
                if (*((_WORD *)v1746 + 9))
                {
                  llvm::Function::BuildLazyArguments(v1746);
                  uint64_t v96 = *((void *)v1746 + 11);
LABEL_153:
                  uint64_t v99 = v96 + 40 * *((void *)v1746 + 12);
                  if (v95 != v99)
                  {
                    int v100 = 0;
                    uint64_t v101 = (uint64_t *)(v9 - 32 * (v94 & 0x7FFFFFF));
                    while (1)
                    {
                      uint64_t v102 = *v101;
                      if (llvm::CallBase::paramHasAttr(v9, v100, 69)) {
                        break;
                      }
                      uint64_t v103 = (void *)v102;
LABEL_157:
                      v1877[1] = (void *)2;
                      v1877[2] = 0;
                      v1878.i64[0] = v95;
                      if (v95 != -8192 && v95 != -4096 && v95) {
                        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v1877[1]);
                      }
                      v1877[0] = &unk_1F2615EC8;
                      v1878.i64[1] = (uint64_t)&v1837;
                      unsigned int v104 = sub_1CC4CFF80((uint64_t)&v1837, v1877);
                      if (v1878.i64[0] != -8192 && v1878.i64[0] != -4096 && v1878.i64[0])
                      {
                        unint64_t v105 = (unint64_t)v1877[1] & 0xFFFFFFFFFFFFFFF8;
                        *(void **)((unint64_t)v1877[1] & 0xFFFFFFFFFFFFFFF8) = v1877[2];
                        if (v1877[2])
                        {
                          *(void *)v1877[2] = *(void *)v1877[2] & 7 | v105;
                        }
                        else
                        {
                          uint64_t v106 = v1878.i64[0];
                          uint64_t v107 = ***(int32x2_t ****)v1878.i64[0];
                          unint64_t v108 = (unint64_t)v107[303];
                          if (v108 <= v105)
                          {
                            uint64_t v109 = v107[305].u32[0];
                            if (v108 + 16 * v109 > v105)
                            {
                              unsigned int v110 = v109 - 1;
                              LODWORD(v111) = v110 & (((unsigned __int32)v1878.i32[0] >> 4) ^ ((unsigned __int32)v1878.i32[0] >> 9));
                              uint64_t v112 = (uint64_t *)(v108 + 16 * v111);
                              uint64_t v113 = *v112;
                              if (v1878.i64[0] != *v112)
                              {
                                int v114 = 1;
                                do
                                {
                                  if (v113 == -4096) {
                                    goto LABEL_173;
                                  }
                                  int v115 = v111 + v114++;
                                  uint64_t v111 = v115 & v110;
                                  uint64_t v113 = *(void *)(v108 + 16 * v111);
                                }
                                while (v1878.i64[0] != v113);
                                uint64_t v112 = (uint64_t *)(v108 + 16 * v111);
                              }
                              *uint64_t v112 = -8192;
                              v107[304] = vadd_s32(v107[304], (int32x2_t)0x1FFFFFFFFLL);
                              uint64_t v106 = v1878.i64[0];
LABEL_173:
                              *(unsigned char *)(v106 + 17) &= ~1u;
                            }
                          }
                        }
                      }
                      uint64_t v116 = (void *)v104[7];
                      if (v116 != v103)
                      {
                        if (v116 && v116 != (void *)-8192 && v116 != (void *)-4096)
                        {
                          unint64_t v124 = v104[5] & 0xFFFFFFFFFFFFFFF8;
                          *(void *)unint64_t v124 = v104[6];
                          int64_t v125 = (unint64_t *)v104[6];
                          if (v125)
                          {
                            *int64_t v125 = *v125 & 7 | v124;
                          }
                          else
                          {
                            uint64_t v126 = v104[7];
                            uint64_t v127 = ***(int32x2_t ****)v126;
                            unint64_t v128 = (unint64_t)v127[303];
                            if (v128 <= v124)
                            {
                              uint64_t v129 = v127[305].u32[0];
                              if (v128 + 16 * v129 > v124)
                              {
                                unsigned int v130 = v129 - 1;
                                LODWORD(v131) = v130 & ((v126 >> 4) ^ (v126 >> 9));
                                int v132 = (uint64_t *)(v128 + 16 * v131);
                                uint64_t v133 = *v132;
                                if (v126 != *v132)
                                {
                                  int v134 = 1;
                                  do
                                  {
                                    if (v133 == -4096) {
                                      goto LABEL_200;
                                    }
                                    int v135 = v131 + v134++;
                                    uint64_t v131 = v135 & v130;
                                    uint64_t v133 = *(void *)(v128 + 16 * v131);
                                  }
                                  while (v126 != v133);
                                  int v132 = (uint64_t *)(v128 + 16 * v131);
                                }
                                uint64_t *v132 = -8192;
                                v127[304] = vadd_s32(v127[304], (int32x2_t)0x1FFFFFFFFLL);
                                uint64_t v126 = v104[7];
LABEL_200:
                                *(unsigned char *)(v126 + 17) &= ~1u;
                              }
                            }
                          }
                        }
                        v104[7] = v103;
                        if (v103 != (void *)-8192 && v103 != (void *)-4096 && v103) {
                          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v104 + 5));
                        }
                      }
                      v95 += 40;
                      v101 += 4;
                      ++v100;
                      if (v95 == v99) {
                        goto LABEL_248;
                      }
                    }
                    __int16 v117 = (llvm::Type *)sub_1CD49471C(v9, v100);
                    uint64_t v118 = v9;
                    uint64_t v119 = *((void *)v1746 + 14);
                    v1787 = v117;
                    if (v119)
                    {
                      if ((v100 + 2) < *(_DWORD *)(v119 + 8)
                        && (BOOL v120 = *(llvm::AttributeSetNode **)(v119 + 8 * (v100 + 2) + 40)) != 0)
                      {
                        uint64_t v121 = v117;
                        __int16 Alignment = llvm::AttributeSetNode::getAlignment(v120);
                        __int16 v117 = v121;
                        if ((Alignment & 0xFF00) != 0) {
                          unsigned int v123 = 1 << Alignment;
                        }
                        else {
                          unsigned int v123 = 0;
                        }
                      }
                      else
                      {
                        unsigned int v123 = 0;
                      }
                      uint64_t v136 = *((void *)a1[5] + 7);
                      uint64_t v137 = (unsigned __int8 *)(*(void *)(v136 + 40) + 272);
                      if ((*(unsigned char *)(v119 + 17) & 0x30) != 0)
                      {
                        if (v123 < 2
                          || ((uint64_t v1759 = *((void *)a1[5] + 7),
                               __uint64_t n = *(void *)(v136 + 40),
                               (int v138 = (uint64_t (*)(void))a2[1]) == 0)
                            ? (BOOL v139 = 0)
                            : (BOOL v139 = (const llvm::DataLayout *)v138(a2[2])),
                              unint64_t v164 = __clz(v123),
                              unint64_t v140 = v164 ^ 0x13F,
                              1 << llvm::getOrEnforceKnownAlignment(v102, (unsigned __int16)v164 ^ 0x13Fu, v137, (const llvm::DataLayout *)a1, v139, 0) >= (unint64_t)v123))
                        {
                          uint64_t v103 = (void *)v102;
                          uint64_t v9 = (uint64_t)a1;
LABEL_239:
                          unint64_t v165 = (void *)*v101;
                          if (v103 != (void *)*v101)
                          {
                            v1877[0] = v103;
                            v1877[1] = v165;
                            v1877[2] = (void *)sub_1CD49471C(v9, v100);
                            if (v1814 >= HIDWORD(v1814))
                            {
                              if (v1813 > v1877 || (char *)v1813 + 24 * v1814 <= (char *)v1877) {
                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                              }
                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                            }
                            int v166 = (void **)((char *)v1813 + 24 * v1814);
                            long long v167 = *(_OWORD *)v1877;
                            v166[2] = v1877[2];
                            *(_OWORD *)int v166 = v167;
                            LODWORD(v1814) = v1814 + 1;
                          }
                          goto LABEL_157;
                        }
                        unsigned int v123 = 1;
                        __int16 v117 = v1787;
LABEL_210:
                        unsigned int v141 = __clz(1 << llvm::DataLayout::getAlignment((llvm::DataLayout *)v137, v117, 0)) ^ 0x3F;
                        if (!v123) {
                          unint64_t v140 = 0;
                        }
                        if ((v140 & 0x3F) <= v141) {
                          unsigned __int8 v142 = v141;
                        }
                        else {
                          unsigned __int8 v142 = v140;
                        }
                        BOOL v143 = operator new(0x68uLL);
                        uint64_t v103 = v143 + 8;
                        v143[13] = v143[13] & 0x38000000 | 1;
                        *(void *)BOOL v143 = 0;
                        *((void *)v143 + 1) = 0;
                        *((void *)v143 + 2) = 0;
                        *((void *)v143 + 3) = v143 + 8;
                        if (v140 >= 0x100) {
                          unsigned __int8 v144 = v142;
                        }
                        else {
                          unsigned __int8 v144 = v141;
                        }
                        if ((*(unsigned char *)(v102 + 23) & 0x10) != 0)
                        {
                          uint64_t v145 = ***(void ***)v102;
                          uint64_t v146 = *(void *)(v145 + 152);
                          uint64_t v147 = *(unsigned int *)(v145 + 168);
                          uint64_t v9 = (uint64_t)a1;
                          int v148 = v1787;
                          if (v147)
                          {
                            LODWORD(v149) = (v147 - 1) & ((v102 >> 4) ^ (v102 >> 9));
                            uint64_t v150 = (uint64_t *)(v146 + 16 * v149);
                            uint64_t v151 = *v150;
                            if (*v150 != v102)
                            {
                              int v152 = 1;
                              do
                              {
                                if (v151 == -4096) {
                                  goto LABEL_225;
                                }
                                int v153 = v149 + v152++;
                                uint64_t v149 = v153 & (v147 - 1);
                                uint64_t v151 = *(void *)(v146 + 16 * v149);
                              }
                              while (v151 != v102);
                              uint64_t v150 = (uint64_t *)(v146 + 16 * v149);
                            }
                          }
                          else
                          {
LABEL_225:
                            uint64_t v150 = (uint64_t *)(v146 + 16 * v147);
                          }
                          int v154 = (void *)v150[1];
                          uint64_t v157 = (void *)*v154;
                          char v156 = (char *)(v154 + 2);
                          __int16 v155 = v157;
                        }
                        else
                        {
                          __int16 v155 = 0;
                          char v156 = &byte_1CFBCE98E;
                          uint64_t v9 = (uint64_t)a1;
                          int v148 = v1787;
                        }
                        uint64_t v158 = (llvm::Type *)*(unsigned int *)(__n + 276);
                        v1878.i16[4] = 261;
                        v1877[0] = v156;
                        v1877[1] = v155;
                        uint64_t v159 = *(void *)(v1759 + 80);
                        if (v159) {
                          uint64_t v160 = v159 - 24;
                        }
                        else {
                          uint64_t v160 = 0;
                        }
                        uint64_t v161 = *(void *)(v160 + 48);
                        if (v161) {
                          uint64_t v162 = v161 - 24;
                        }
                        else {
                          uint64_t v162 = 0;
                        }
                        llvm::AllocaInst::AllocaInst((unint64_t *)v143 + 4, v148, v158, 0, v144, (const char **)v1877, v162);
                        unint64_t v163 = *((unsigned int *)a2 + 14);
                        if (v163 >= *((unsigned int *)a2 + 15)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *(void *)(a2[6] + 8 * v163) = v103;
                        ++*((_DWORD *)a2 + 14);
                        goto LABEL_239;
                      }
                      __uint64_t n = *(void *)(v136 + 40);
                    }
                    else
                    {
                      unsigned int v123 = 0;
                      uint64_t v136 = *(void *)(*(void *)(v118 + 40) + 56);
                      __uint64_t n = *(void *)(v136 + 40);
                      uint64_t v137 = (unsigned __int8 *)(__n + 272);
                    }
                    uint64_t v1759 = v136;
                    unint64_t v140 = __clz(v123) ^ 0x13F;
                    goto LABEL_210;
                  }
LABEL_248:
                  uint64_t v168 = a2;
                  if (!byte_1EBCFC6E8) {
                    goto LABEL_298;
                  }
                  uint64_t v169 = (uint64_t (*)(void, void))a2[1];
                  if (!v169) {
                    goto LABEL_298;
                  }
                  uint64_t v170 = (const llvm::DataLayout *)v169(a2[2], *(void *)(*(void *)(v9 + 40) + 56));
                  uint64_t v171 = *(void *)(*(void *)(*(void *)(v9 + 40) + 56) + 40);
                  *(void *)v1869 = &v1869[16];
                  *(void *)&v1869[8] = 0x100000000;
                  int v1876 = 0;
                  v1871 = 0;
                  v1870 = 0;
                  LODWORD(v1872) = 0;
                  v1874 = 0;
                  uint64_t v1873 = 0;
                  char v1875 = 0;
                  uint64_t v172 = *(void *)(v9 - 32);
                  if (!v172 || *(unsigned char *)(v172 + 16) || *(void *)(v172 + 24) != *(void *)(v9 + 72)) {
                    uint64_t v172 = 0;
                  }
                  if (*(_WORD *)(v172 + 18))
                  {
                    llvm::Function::BuildLazyArguments((llvm::Function *)v172);
                    uint64_t v173 = *(void *)(v172 + 88);
                    if (*(_WORD *)(v172 + 18))
                    {
                      llvm::Function::BuildLazyArguments((llvm::Function *)v172);
                      uint64_t v174 = *(void *)(v172 + 88);
                      goto LABEL_257;
                    }
                  }
                  else
                  {
                    uint64_t v173 = *(void *)(v172 + 88);
                  }
                  uint64_t v174 = v173;
LABEL_257:
                  uint64_t v175 = v174 + 40 * *(void *)(v172 + 96);
                  if (v173 != v175)
                  {
                    char v176 = 0;
                    unsigned int v177 = (unsigned __int8 *)(v171 + 272);
                    do
                    {
                      if (*(unsigned char *)(*(void *)v173 + 8) != 15) {
                        goto LABEL_268;
                      }
                      uint64_t v178 = *(void *)(*(void *)(v173 + 24) + 112);
                      if (!v178) {
                        goto LABEL_268;
                      }
                      unsigned int v179 = *(_DWORD *)(v173 + 32) + 2;
                      if (v179 >= *(_DWORD *)(v178 + 8)) {
                        goto LABEL_268;
                      }
                      int v180 = *(llvm::AttributeSetNode **)(v178 + 8 * v179 + 40);
                      if (!v180) {
                        goto LABEL_268;
                      }
                      unsigned __int16 v181 = llvm::AttributeSetNode::getAlignment(v180);
                      BOOL v182 = v181 < 0x100u || v181 > 0x1Fu;
                      if (v182) {
                        goto LABEL_268;
                      }
                      char v183 = v181;
                      char hasPassPointeeByValueCopyAttr = llvm::Argument::hasPassPointeeByValueCopyAttr((llvm::Argument *)v173);
                      if ((hasPassPointeeByValueCopyAttr & 1) != 0 || !*(void *)(v173 + 8)) {
                        goto LABEL_268;
                      }
                      if ((v176 & 1) == 0)
                      {
                        v1874 = (uint64_t **)*((void *)a1[5] + 7);
                        sub_1CC5A43B0((uint64_t)v1869, 0);
                      }
                      uint64_t v185 = 1 << v183;
                      unint64_t v186 = (llvm::Value *)*(&a1[4 * *(unsigned int *)(v173 + 32)]
                                            - 4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF));
                      char v176 = 1;
                      if (1 << llvm::getOrEnforceKnownAlignment((uint64_t)v186, 0, v177, (const llvm::DataLayout *)a1, v170, (const llvm::DataLayout *)v1869) >= (unint64_t)v185)goto LABEL_268; {
                      int v187 = 0;
                      }
                      uint64_t v188 = *(void *)*a1;
                      v1877[0] = &v1877[2];
                      v1877[1] = (void *)0x200000000;
                      uint64_t v1882 = v188;
                      v1883 = &v1891;
                      v1884 = v1892;
                      uint64_t v1885 = 0;
                      int v1886 = 0;
                      __int16 v1887 = 512;
                      char v1888 = 7;
                      uint64_t v1889 = 0;
                      uint64_t v1890 = 0;
                      v1891 = &unk_1F2616E88;
                      v1892[0] = &unk_1F2617008;
                      int64_t v189 = a1[6];
                      uint64_t v1880 = (uint64_t)a1[5];
                      v1881 = (void **)(a1 + 3);
                      Impl = v189;
                      if (v189)
                      {
                        llvm::MetadataTracking::track((uint64_t)&Impl, (unsigned __int8 *)v189, 2);
                        int v187 = Impl;
                      }
                      sub_1CB8461A4((uint64_t)v1877, 0, (uint64_t)v187);
                      if (Impl)
                      {
                        int v191 = *(unsigned __int8 *)Impl;
                        if ((v191 - 4) > 0x1E)
                        {
                          if ((v191 - 3) >= 0xFFFFFFFE) {
                            uint64_t v194 = Impl;
                          }
                          else {
                            uint64_t v194 = 0;
                          }
                          if ((v191 - 3) < 0xFFFFFFFE)
                          {
                            if (v191 == 3) {
                              *((void *)Impl + 1) = 0;
                            }
                            goto LABEL_278;
                          }
                          unint64_t v193 = (unint64_t)v194 + 8;
                        }
                        else
                        {
                          if ((*((unsigned char *)Impl + 1) & 0x7F) != 2 && !*((_DWORD *)Impl + 3)) {
                            goto LABEL_278;
                          }
                          uint64_t v192 = *((void *)Impl + 2);
                          if ((v192 & 4) == 0) {
                            goto LABEL_278;
                          }
                          unint64_t v193 = v192 & 0xFFFFFFFFFFFFFFF8;
                          if (!v193) {
                            goto LABEL_278;
                          }
                        }
                        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&Impl;
                        sub_1CC5FA668(v193 + 16, &__dst);
                      }
LABEL_278:
                      AlignmentAssumptiouint64_t n = llvm::IRBuilderBase::CreateAlignmentAssumption((llvm::LLVMContext **)v1877, (const llvm::DataLayout *)v177, v186, v185, 0);
                      if (v1877[0] != &v1877[2]) {
                        free(v1877[0]);
                      }
                      llvm::AssumptionCache::registerAssumption((char **)v170, AlignmentAssumption);
                      char v176 = 1;
LABEL_268:
                      v173 += 40;
                    }
                    while (v173 != v175);
                  }
                  sub_1CBF8FF88((uint64_t *)&v1870);
                  if (*(unsigned char **)v1869 != &v1869[16]) {
                    free(*(void **)v1869);
                  }
                  uint64_t v9 = (uint64_t)a1;
                  uint64_t v168 = a2;
LABEL_298:
                  uint64_t v195 = (uint64_t (*)(void, void))v168[1];
                  if (v195)
                  {
                    uint64_t v196 = v19;
                    int v197 = (char **)v195(v168[2], v19);
                  }
                  else
                  {
                    int v197 = 0;
                    uint64_t v196 = v19;
                  }
                  uint64_t v198 = *(void *)(v196 + 40);
                  if (*(char *)(v198 + 239) < 0)
                  {
                    sub_1CB8BDF7C((uint64_t)__p, *(const void **)(v198 + 216), *(void *)(v198 + 224));
                  }
                  else
                  {
                    *(_OWORD *)__p = *(_OWORD *)(v198 + 216);
                    uint64_t v1802 = *(void *)(v198 + 232);
                  }
                  BOOL ArchAllowsMergeAttributes = llvm::GPUBaseInfo::getArchAllowsMergeAttributes((uint64_t)__p);
                  if (SHIBYTE(v1802) < 0) {
                    operator delete(__p[0]);
                  }
                  if (ArchAllowsMergeAttributes) {
                    llvm::AttributeFuncs::mergeAttributesForOutlining((llvm::AttributeFuncs *)v19, v1746, v199);
                  }
                  llvm::salvageKnowledge((llvm *)v9, v197, 0, v200, v201, v202, v203);
                  uint64_t v205 = (uint64_t)v1746;
                  uint64_t v206 = *((void *)v1746 + 10);
                  if (v206) {
                    uint64_t v207 = v206 - 24;
                  }
                  else {
                    uint64_t v207 = 0;
                  }
                  uint64_t v208 = *(void *)(v207 + 48);
                  if (v208) {
                    uint64_t v209 = v208 - 24;
                  }
                  else {
                    uint64_t v209 = 0;
                  }
                  llvm::CloneAndPruneIntoFromInst((void *)v19, (uint64_t)v1746, v209, (uint64_t)&v1837, 0, (uint64_t)&v1842, (uint64_t)".i", (uint64_t)&v1803);
                  uint64_t v1740 = *(void *)(v1779 + 8);
                  sub_1CC233A58((char *)v9, 6, (uint64_t *)v1877);
                  if (v1878.i8[0])
                  {
                    int FunctionClass = llvm::objcarc::GetFunctionClass(*(llvm::objcarc **)v1877[0], v210);
                    if (FunctionClass != 24)
                    {
                      if (v1843)
                      {
                        v1650 = (char *)v1842;
                        v1735 = (char *)v1842 + 8 * v1843;
                        v1753 = *(uint64_t ***)(*((void *)a1[5] + 7) + 40);
                        while (1)
                        {
                          uint64_t v1651 = *(void *)v1650;
                          v1652 = (unsigned __int8 *)sub_1CD4B3548(*(llvm::Value **)(*(void *)v1650
                                                                                   - 32
                                                                                   * (*(_DWORD *)(*(void *)v1650 + 20) & 0x7FFFFFF)));
                          uint64_t v1653 = **(void **)v1651;
                          v1877[0] = &v1877[2];
                          v1877[1] = (void *)0x200000000;
                          uint64_t v1882 = v1653;
                          v1883 = &v1891;
                          v1884 = v1892;
                          uint64_t v1885 = 0;
                          int v1886 = 0;
                          __int16 v1887 = 512;
                          char v1888 = 7;
                          uint64_t v1880 = 0;
                          v1881 = 0;
                          uint64_t v1889 = 0;
                          uint64_t v1890 = 0;
                          v1891 = &unk_1F2616E88;
                          v1892[0] = &unk_1F2617008;
                          for (uint64_t n = *(void **)(v1651 + 24); ; uint64_t n = (void *)*n)
                          {
                            if (n == (void *)(*(void *)(v1651 + 40) + 40)) {
                              goto LABEL_2870;
                            }
                            int v1655 = *((unsigned __int8 *)n - 8);
                            if ((v1655 - 66) >= 0xD) {
                              break;
                            }
                          }
                          if (v1655 == 84)
                          {
                            uint64_t v1656 = *(n - 7);
                            if (v1656
                              && !*(unsigned char *)(v1656 + 16)
                              && *(void *)(v1656 + 24) == n[6]
                              && (*(unsigned char *)(v1656 + 33) & 0x20) != 0)
                            {
                              if (*(_DWORD *)(v1656 + 36) == 211
                                && !*(n - 2)
                                && sub_1CD4B3548((llvm::Value *)n[-4 * (*((_DWORD *)n - 1) & 0x7FFFFFF) - 3]) == (llvm::Value *)v1652)
                              {
                                if (FunctionClass == 1) {
                                  goto LABEL_2843;
                                }
                                uint64_t v1880 = n[2];
                                v1881 = (void **)n;
                                v1657 = (void *)n[3];
                                Impl = v1657;
                                if (v1657)
                                {
                                  llvm::MetadataTracking::track((uint64_t)&Impl, (unsigned __int8 *)v1657, 2);
                                  v1658 = Impl;
                                }
                                else
                                {
                                  v1658 = 0;
                                }
                                sub_1CB8461A4((uint64_t)v1877, 0, (uint64_t)v1658);
                                if (!Impl) {
                                  goto LABEL_2831;
                                }
                                int v1666 = *(unsigned __int8 *)Impl;
                                if ((v1666 - 4) <= 0x1E)
                                {
                                  if ((*((unsigned char *)Impl + 1) & 0x7F) != 2 && !*((_DWORD *)Impl + 3)) {
                                    goto LABEL_2831;
                                  }
                                  uint64_t v1667 = *((void *)Impl + 2);
                                  if ((v1667 & 4) == 0) {
                                    goto LABEL_2831;
                                  }
                                  unint64_t v1668 = v1667 & 0xFFFFFFFFFFFFFFF8;
                                  if (!v1668) {
                                    goto LABEL_2831;
                                  }
LABEL_2860:
                                  *(void *)v1869 = &Impl;
                                  sub_1CC5FA668(v1668 + 16, v1869);
                                  goto LABEL_2831;
                                }
                                if ((v1666 - 3) >= 0xFFFFFFFE) {
                                  v1670 = Impl;
                                }
                                else {
                                  v1670 = 0;
                                }
                                if ((v1666 - 3) >= 0xFFFFFFFE)
                                {
                                  unint64_t v1668 = (unint64_t)v1670 + 8;
                                  goto LABEL_2860;
                                }
                                if (v1666 == 3) {
                                  *((void *)Impl + 1) = 0;
                                }
LABEL_2831:
                                llvm::Intrinsic::getType(*v1753, 221, 0, 0);
                                Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v1753, 221, 0, 0);
                                llvm::Module::getOrInsertFunction((uint64_t)v1753, "llvm.objc.release", (const char *)0x11, Type, 0);
                                v1661 = v1660;
                                v1854 = 0;
                                if (*((_WORD *)v1660 + 9)) {
                                  llvm::Function::BuildLazyArguments(v1660);
                                }
                                uint64_t v1662 = **((void **)v1661 + 11);
                                __int16 v1868 = 257;
                                v1663 = (llvm::Instruction *)v1652;
                                if (*(void *)v1652 != v1662)
                                {
                                  if (v1652[16] > 0x14u)
                                  {
                                    LOWORD(v1871) = 257;
                                    v1663 = llvm::CastInst::Create(49, (uint64_t)v1652, v1662, (const char **)v1869, 0);
                                    (*(void (**)(void *, llvm::Instruction *, void **, uint64_t, void **))(*v1884 + 16))(v1884, v1663, &Impl, v1880, v1881);
                                    if (LODWORD(v1877[1]))
                                    {
                                      v1669 = v1877[0];
                                      __sza = (char *)v1877[0] + 16 * LODWORD(v1877[1]);
                                      do
                                      {
                                        *(void *)v1723 = v1669;
                                        llvm::Instruction::setMetadata(v1663, *(_DWORD *)v1669, *((llvm::MDNode **)v1669 + 1));
                                        v1669 = (void *)(*(void *)v1723 + 16);
                                      }
                                      while ((char *)(*(void *)v1723 + 16) != __sza);
                                    }
LABEL_2836:
                                    v1854 = v1663;
                                    if (!v1661)
                                    {
                                      v1664 = 0;
                                      goto LABEL_2842;
                                    }
LABEL_2841:
                                    v1664 = (uint64_t **)*((void *)v1661 + 3);
LABEL_2842:
                                    LOWORD(v1871) = 257;
                                    sub_1CB845BAC((uint64_t *)v1877, v1664, (uint64_t **)v1661, (uint64_t *)&v1854, 1, (uint64_t)v1869, 0);
LABEL_2843:
                                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                                  }
                                  uint64_t v1665 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v1883
                                           + 28))(v1883, 49, v1652, v1662);
                                  v1663 = (llvm::Instruction *)v1665;
                                  if (v1665)
                                  {
                                    if (*(unsigned __int8 *)(v1665 + 16) >= 0x1Cu)
                                    {
                                      (*(void (**)(void *, uint64_t, void **, uint64_t, void **))(*v1884 + 16))(v1884, v1665, &Impl, v1880, v1881);
                                      if (LODWORD(v1877[1]))
                                      {
                                        v1671 = v1877[0];
                                        v1724 = (char *)v1877[0] + 16 * LODWORD(v1877[1]);
                                        do
                                        {
                                          size_t __szb = (size_t)v1671;
                                          llvm::Instruction::setMetadata(v1663, *(_DWORD *)v1671, *((llvm::MDNode **)v1671 + 1));
                                          v1671 = (void *)(__szb + 16);
                                        }
                                        while ((char *)(__szb + 16) != v1724);
                                        goto LABEL_2836;
                                      }
                                    }
                                  }
                                }
                                v1854 = v1663;
                                goto LABEL_2841;
                              }
                            }
                            else if (sub_1CD4B3548((llvm::Value *)(n - 3)) == (llvm::Value *)v1652)
                            {
                              if (*(unsigned char *)(**(void **)(n[6] + 16) + 8) == 7
                                || (sub_1CC233A58((char *)n - 24, 6, (uint64_t *)v1869), !(_BYTE)v1870))
                              {
                                sub_1CC233A58((char *)a1, 6, (uint64_t *)v1869);
                                if ((_BYTE)v1870) {
                                  uint64_t v1686 = **(void **)v1869;
                                }
                                else {
                                  uint64_t v1686 = 0;
                                }
                                strcpy(v1869, "clang.arc.attachedcall");
                                v1869[23] = 22;
                                v1687 = operator new(8uLL);
                                v1870 = v1687;
                                void *v1687 = v1686;
                                v1872 = v1687 + 1;
                                v1871 = v1687 + 1;
                                sub_1CD5C4920((uint64_t)&__dst, (long long *)v1869);
                                v1688 = llvm::CallBase::addOperandBundle((char *)n - 24, 6, (unint64_t)&__dst, (llvm::Instruction *)(n - 3));
                                if (v1860)
                                {
                                  v1861[0] = v1860;
                                  operator delete(v1860);
                                }
                                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                                  operator delete(__dst.__r_.__value_.__l.__data_);
                                }
                                llvm::Instruction::copyMetadata((uint64_t)v1688, (uint64_t)(n - 3), 0, 0);
                                llvm::Value::doRAUW((llvm::ValueAsMetadata *)(n - 3), (llvm::Value *)v1688, (llvm::Value *)1);
                                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                              }
                            }
                          }
LABEL_2870:
                          if (FunctionClass == 1) {
                            break;
                          }
LABEL_2888:
                          if (v1877[0] != &v1877[2]) {
                            free(v1877[0]);
                          }
                          v1650 += 8;
                          if (v1650 == v1735) {
                            goto LABEL_2922;
                          }
                        }
                        uint64_t v1880 = *(void *)(v1651 + 40);
                        v1881 = (void **)(v1651 + 24);
                        v1672 = *(void **)(v1651 + 48);
                        Impl = v1672;
                        if (v1672)
                        {
                          llvm::MetadataTracking::track((uint64_t)&Impl, (unsigned __int8 *)v1672, 2);
                          v1673 = Impl;
                        }
                        else
                        {
                          v1673 = 0;
                        }
                        sub_1CB8461A4((uint64_t)v1877, 0, (uint64_t)v1673);
                        if (!Impl)
                        {
LABEL_2874:
                          llvm::Intrinsic::getType(*v1753, 222, 0, 0);
                          v1674 = (llvm::PointerType *)llvm::Intrinsic::getType(*v1753, 222, 0, 0);
                          llvm::Module::getOrInsertFunction((uint64_t)v1753, "llvm.objc.retain", (const char *)0x10, v1674, 0);
                          v1676 = v1675;
                          v1854 = 0;
                          if (*((_WORD *)v1675 + 9)) {
                            llvm::Function::BuildLazyArguments(v1675);
                          }
                          uint64_t v1677 = **((void **)v1676 + 11);
                          __int16 v1868 = 257;
                          if (*(void *)v1652 != v1677)
                          {
                            if (v1652[16] > 0x14u)
                            {
                              LOWORD(v1871) = 257;
                              v1652 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v1652, v1677, (const char **)v1869, 0);
                              (*(void (**)(void *, unsigned __int8 *, void **, uint64_t, void **))(*v1884 + 16))(v1884, v1652, &Impl, v1880, v1881);
                              if (LODWORD(v1877[1]))
                              {
                                v1683 = (llvm::MDNode **)v1877[0];
                                v1684 = (llvm::MDNode **)((char *)v1877[0] + 16 * LODWORD(v1877[1]));
                                do
                                {
                                  llvm::Instruction::setMetadata((llvm::Instruction *)v1652, *(_DWORD *)v1683, v1683[1]);
                                  v1683 += 2;
                                }
                                while (v1683 != v1684);
                              }
LABEL_2879:
                              v1854 = v1652;
                              if (!v1676)
                              {
                                v1678 = 0;
LABEL_2887:
                                LOWORD(v1871) = 257;
                                sub_1CB845BAC((uint64_t *)v1877, v1678, (uint64_t **)v1676, (uint64_t *)&v1854, 1, (uint64_t)v1869, 0);
                                goto LABEL_2888;
                              }
LABEL_2886:
                              v1678 = (uint64_t **)*((void *)v1676 + 3);
                              goto LABEL_2887;
                            }
                            v1652 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v1883
                                                        + 28))(v1883, 49, v1652, v1677);
                            if (v1652) {
                              BOOL v1679 = v1652[16] >= 0x1Cu;
                            }
                            else {
                              BOOL v1679 = 0;
                            }
                            if (v1679)
                            {
                              (*(void (**)(void *, unsigned __int8 *, void **, uint64_t, void **))(*v1884 + 16))(v1884, v1652, &Impl, v1880, v1881);
                              if (LODWORD(v1877[1]))
                              {
                                v1689 = (llvm::MDNode **)v1877[0];
                                v1690 = (llvm::MDNode **)((char *)v1877[0] + 16 * LODWORD(v1877[1]));
                                do
                                {
                                  llvm::Instruction::setMetadata((llvm::Instruction *)v1652, *(_DWORD *)v1689, v1689[1]);
                                  v1689 += 2;
                                }
                                while (v1689 != v1690);
                                goto LABEL_2879;
                              }
                            }
                          }
                          v1854 = v1652;
                          goto LABEL_2886;
                        }
                        int v1680 = *(unsigned __int8 *)Impl;
                        if ((v1680 - 4) > 0x1E)
                        {
                          if ((v1680 - 3) >= 0xFFFFFFFE) {
                            v1685 = Impl;
                          }
                          else {
                            v1685 = 0;
                          }
                          if ((v1680 - 3) < 0xFFFFFFFE)
                          {
                            if (v1680 == 3) {
                              *((void *)Impl + 1) = 0;
                            }
                            goto LABEL_2874;
                          }
                          unint64_t v1682 = (unint64_t)v1685 + 8;
                        }
                        else
                        {
                          if ((*((unsigned char *)Impl + 1) & 0x7F) != 2 && !*((_DWORD *)Impl + 3)) {
                            goto LABEL_2874;
                          }
                          uint64_t v1681 = *((void *)Impl + 2);
                          if ((v1681 & 4) == 0) {
                            goto LABEL_2874;
                          }
                          unint64_t v1682 = v1681 & 0xFFFFFFFFFFFFFFF8;
                          if (!v1682) {
                            goto LABEL_2874;
                          }
                        }
                        *(void *)v1869 = &Impl;
                        sub_1CC5FA668(v1682 + 16, v1869);
                        goto LABEL_2874;
                      }
LABEL_2922:
                      uint64_t v9 = (uint64_t)a1;
                      uint64_t v168 = a2;
                      uint64_t v205 = (uint64_t)v1746;
                    }
                  }
                  if (*((unsigned char *)v168 + 384))
                  {
                    uint64_t v211 = (uint64_t *)v168[4];
                    if (v211)
                    {
                      unint64_t v212 = (uint64_t *)v168[5];
                      if (v212)
                      {
                        uint64_t v213 = *(void *)(v205 + 80);
                        if (v213) {
                          uint64_t v214 = v213 - 24;
                        }
                        else {
                          uint64_t v214 = 0;
                        }
                        v1877[0] = &v1878.u64[1];
                        v1877[1] = &v1878.u64[1];
                        v1877[2] = (void *)16;
                        v1878.i32[0] = 0;
                        unsigned int v215 = (char *)v1837;
                        unsigned int v216 = v1839;
                        if (v1838[0])
                        {
                          uint64_t v217 = (char *)v1837;
                          if (v1839)
                          {
                            uint64_t v218 = 0;
                            while (1)
                            {
                              uint64_t v217 = (char *)v1837 + v218;
                              if ((*(void *)((char *)v1837 + v218 + 24) | 0x1000) != 0xFFFFFFFFFFFFF000) {
                                break;
                              }
                              v218 += 64;
                              if ((unint64_t)v1839 << 6 == v218) {
                                goto LABEL_448;
                              }
                            }
                          }
                          uint64_t v239 = (char *)v1837 + 64 * (unint64_t)v1839;
                          if (v217 == v239) {
                            goto LABEL_448;
                          }
                          uint64_t v240 = *((void *)v217 + 3);
                          while (1)
                          {
                            if (*(unsigned char *)(v240 + 16) == 22)
                            {
                              uint64_t v241 = *((void *)v217 + 7);
                              if (v241) {
                                break;
                              }
                            }
                            do
                            {
LABEL_403:
                              v217 += 64;
                              if (v217 == v239) {
                                goto LABEL_447;
                              }
                              uint64_t v240 = *((void *)v217 + 3);
                            }
                            while ((v240 | 0x1000) == 0xFFFFFFFFFFFFF000);
                            if (v217 == v239)
                            {
LABEL_447:
                              unsigned int v215 = (char *)v1837;
                              unsigned int v216 = v1839;
                              goto LABEL_448;
                            }
                          }
                          unint64_t v242 = *v212;
                          if (*v212)
                          {
                            unsigned int v243 = sub_1CBF7A45C(*v212, v240);
                            if (v243 == -1) {
                              unint64_t v242 = 0;
                            }
                            else {
                              unint64_t v242 = *(void *)(*(void *)(v242 + 8) + 24 * v243 + 16);
                            }
                          }
                          uint64_t v244 = (char *)v1877[1];
                          uint64_t v245 = HIDWORD(v1877[2]);
                          if (v1877[1] == v1877[0])
                          {
                            if (HIDWORD(v1877[2]))
                            {
                              size_t v246 = 0;
                              uint64_t v247 = 8 * HIDWORD(v1877[2]);
                              uint64_t v248 = (uint64_t *)v1877[1];
                              do
                              {
                                if (*v248 == v241) {
                                  goto LABEL_397;
                                }
                                if (*v248 == -2) {
                                  size_t v246 = v248;
                                }
                                ++v248;
                                v247 -= 8;
                              }
                              while (v247);
                              if (v246)
                              {
                                *size_t v246 = v241;
                                --v1878.i32[0];
                                goto LABEL_402;
                              }
                            }
                            unsigned int v249 = v1877[2];
                            if (HIDWORD(v1877[2]) < LODWORD(v1877[2]))
                            {
                              ++HIDWORD(v1877[2]);
                              *((void *)v1877[1] + v245) = v241;
LABEL_402:
                              sub_1CBF7889C(*v211, v241, v242);
                              goto LABEL_403;
                            }
                          }
                          else
                          {
                            unsigned int v249 = v1877[2];
                          }
                          if (3 * v249 <= 4 * (HIDWORD(v1877[2]) - v1878.i32[0]))
                          {
                            if (v249 >= 0x40) {
                              v249 *= 2;
                            }
                            else {
                              unsigned int v249 = 128;
                            }
                          }
                          else if (v249 - HIDWORD(v1877[2]) >= v249 >> 3)
                          {
                            goto LABEL_378;
                          }
                          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v1877, v249);
                          unsigned int v249 = v1877[2];
                          uint64_t v244 = (char *)v1877[1];
LABEL_378:
                          unsigned int v250 = v249 - 1;
                          unsigned int v251 = (v249 - 1) & ((v241 >> 4) ^ (v241 >> 9));
                          uint64_t v252 = &v244[8 * v251];
                          uint64_t v253 = *(void *)v252;
                          if (*(void *)v252 == -1)
                          {
                            uint64_t v254 = 0;
LABEL_390:
                            if (v254) {
                              uint64_t v258 = v254;
                            }
                            else {
                              uint64_t v258 = (uint64_t *)v252;
                            }
                            if (*v258 != v241)
                            {
                              if (*v258 == -2) {
                                --v1878.i32[0];
                              }
                              else {
                                ++HIDWORD(v1877[2]);
                              }
                              uint64_t *v258 = v241;
                              goto LABEL_402;
                            }
                          }
                          else
                          {
                            uint64_t v254 = 0;
                            int v255 = 1;
                            while (v253 != v241)
                            {
                              if (v254) {
                                BOOL v256 = 0;
                              }
                              else {
                                BOOL v256 = v253 == -2;
                              }
                              if (v256) {
                                uint64_t v254 = (uint64_t *)v252;
                              }
                              unsigned int v257 = v251 + v255++;
                              unsigned int v251 = v257 & v250;
                              uint64_t v252 = &v244[8 * (v257 & v250)];
                              uint64_t v253 = *(void *)v252;
                              if (*(void *)v252 == -1) {
                                goto LABEL_390;
                              }
                            }
                          }
LABEL_397:
                          uint64_t v259 = *v211;
                          if (!*v211 || (unsigned int v260 = sub_1CBF7A45C(*v211, v241), v260 == -1)) {
                            unint64_t v261 = 0;
                          }
                          else {
                            unint64_t v261 = *(void *)(*(void *)(v259 + 8) + 24 * v260 + 16);
                          }
                          if (v261 > v242) {
                            unint64_t v242 = v261;
                          }
                          goto LABEL_402;
                        }
LABEL_448:
                        if (v216)
                        {
                          uint64_t v273 = (v216 - 1) & ((v214 >> 4) ^ (v214 >> 9));
                          uint64_t v274 = &v215[64 * v273];
                          uint64_t v275 = *((void *)v274 + 3);
                          if (v275 == v214) {
                            goto LABEL_466;
                          }
                          int v276 = 1;
                          while (v275 != -4096)
                          {
                            int v277 = v273 + v276++;
                            uint64_t v273 = v277 & (v216 - 1);
                            uint64_t v274 = &v215[64 * v273];
                            uint64_t v275 = *((void *)v274 + 3);
                            if (v275 == v214) {
                              goto LABEL_466;
                            }
                          }
                        }
                        uint64_t v274 = &v215[64 * (unint64_t)v216];
LABEL_466:
                        *(void *)v1869 = 6;
                        if (v274 == &v215[64 * (unint64_t)v216])
                        {
                          uint64_t v280 = 0;
                          uint64_t v281 = 0;
                          *(void *)&v1869[8] = 0;
                          *(void *)&v1869[16] = 0;
                        }
                        else
                        {
                          uint64_t v280 = 0;
                          uint64_t v281 = *((void *)v274 + 7);
                          *(void *)&v1869[8] = 0;
                          *(void *)&v1869[16] = v281;
                          if (v281 != -8192 && v281 != -4096 && v281 != 0)
                          {
                            unint64_t v283 = *((void *)v274 + 5) & 0xFFFFFFFFFFFFFFF8;
                            *(void *)&v1869[8] = *(void *)v283;
                            *(void *)unint64_t v283 = v1869;
                            *(void *)v1869 = v283 | 6;
                            uint64_t v280 = *(void *)&v1869[8];
                            if (*(void *)&v1869[8]) {
                              **(void **)&v1869[8] = **(void **)&v1869[8] & 7 | (unint64_t)&v1869[8];
                            }
                            uint64_t v281 = *(void *)&v1869[16];
                          }
                        }
                        if (v281 != -8192 && v281 != -4096 && v281 != 0)
                        {
                          unint64_t v1520 = *(void *)v1869 & 0xFFFFFFFFFFFFFFF8;
                          *(void *)(*(void *)v1869 & 0xFFFFFFFFFFFFFFF8) = v280;
                          if (*(void *)&v1869[8])
                          {
                            **(void **)&v1869[8] = **(void **)&v1869[8] & 7 | v1520;
                          }
                          else
                          {
                            uint64_t v1521 = *(void *)&v1869[16];
                            v1522 = ****(int32x2_t *****)&v1869[16];
                            unint64_t v1523 = (unint64_t)v1522[303];
                            if (v1523 <= v1520)
                            {
                              uint64_t v1524 = v1522[305].u32[0];
                              if (v1523 + 16 * v1524 > v1520)
                              {
                                unsigned int v1525 = v1524 - 1;
                                LODWORD(v1526) = v1525 & ((*(_DWORD *)&v1869[16] >> 4) ^ (*(_DWORD *)&v1869[16] >> 9));
                                v1527 = (uint64_t *)(v1523 + 16 * v1526);
                                uint64_t v1528 = *v1527;
                                if (*(void *)&v1869[16] != *v1527)
                                {
                                  int v1529 = 1;
                                  do
                                  {
                                    if (v1528 == -4096) {
                                      goto LABEL_2607;
                                    }
                                    int v1530 = v1526 + v1529++;
                                    uint64_t v1526 = v1530 & v1525;
                                    uint64_t v1528 = *(void *)(v1523 + 16 * v1526);
                                  }
                                  while (*(void *)&v1869[16] != v1528);
                                  v1527 = (uint64_t *)(v1523 + 16 * v1526);
                                }
                                uint64_t *v1527 = -8192;
                                v1522[304] = vadd_s32(v1522[304], (int32x2_t)0x1FFFFFFFFLL);
                                uint64_t v1521 = *(void *)&v1869[16];
LABEL_2607:
                                *(unsigned char *)(v1521 + 17) &= ~1u;
                              }
                            }
                          }
                        }
                        if (*v211) {
                          sub_1CBF7A45C(*v211, (uint64_t)v1737);
                        }
                        llvm::BlockFrequencyInfo::setBlockFreqAndScale();
                      }
                    }
                    llvm::Function::getEntryCount((uint64_t ***)v205, 0, (uint64_t)v1877);
                    if (LOBYTE(v1877[2]))
                    {
                      if (LODWORD(v1877[1]) != 1)
                      {
                        uint64_t v285 = v1877[0];
                        if (v1877[0])
                        {
                          uint64_t v286 = (llvm::ProfileSummaryInfo *)v168[3];
                          if (v286)
                          {
                            unint64_t ProfileCount = llvm::ProfileSummaryInfo::getProfileCount(v286, (const llvm::BasicBlock **)v9, (llvm::BlockFrequencyInfoImplBase **)v168[4], 0);
                            if (v1637) {
                              unint64_t v287 = ProfileCount;
                            }
                            else {
                              unint64_t v287 = 0;
                            }
                          }
                          else
                          {
                            unint64_t v287 = 0;
                          }
                          if ((unint64_t)v285 < v287) {
                            unint64_t v287 = (unint64_t)v285;
                          }
                          llvm::updateProfileCallee(v205, -(uint64_t)v287, (uint64_t *)&v1837);
                        }
                      }
                    }
                  }
                  if (v1814)
                  {
                    if (v1740) {
                      uint64_t v288 = v1740 - 24;
                    }
                    else {
                      uint64_t v288 = 0;
                    }
                    uint64_t v289 = 24 * v1814;
                    uint64_t v290 = (char *)v1813 + 8;
                    do
                    {
                      uint64_t v292 = (llvm::Value *)*((void *)v290 - 1);
                      uint64_t v291 = *(llvm::Value **)v290;
                      uint64_t v293 = *((void *)v290 + 1);
                      uint64_t v294 = *((void *)v1777 + 5);
                      sub_1CBF537B4((uint64_t)v1877, (uint64_t **)v288, *(void *)(v288 + 48), 0, 0, 0);
                      uint64_t v297 = sub_1CB83544C(v294 + 272, v293);
                      if (v295 == 1) {
                      unint64_t v298 = (unint64_t)(v297 + 7) >> 3;
                      }
                      int v299 = *(llvm::ConstantInt **)(*(void *)v1882 + 1984);
                      unsigned int v300 = *(_DWORD *)(*(void *)v1882 + 1992);
                      *(_DWORD *)&v1869[8] = v300 >> 8;
                      if (v300 >> 8 > 0x40) {
                        operator new[]();
                      }
                      if (v300 <= 0xFF) {
                        unint64_t v301 = 0;
                      }
                      else {
                        unint64_t v301 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v300) + 63);
                      }
                      *(void *)v1869 = v301 & v298;
                      uint64_t v302 = llvm::ConstantInt::get(v299, (llvm::LLVMContext *)v1869, v296);
                      uint64_t v168 = a2;
                      if (*(_DWORD *)&v1869[8] >= 0x41u && *(void *)v1869) {
                        MEMORY[0x1D25D9CB0](*(void *)v1869, 0x1000C8000313F17);
                      }
                      llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)v1877, 194, v292, 256, v291, 256, v302, 0, 0, 0, 0, 0);
                      if (v1877[0] != &v1877[2]) {
                        free(v1877[0]);
                      }
                      v290 += 24;
                      v289 -= 24;
                    }
                    while (v289);
                  }
                  uint64_t v303 = a1;
                  sub_1CC233A58((char *)a1, 0, (uint64_t *)&v1798);
                  uint64_t v306 = (uint64_t ***)v1771;
                  if (v1800)
                  {
                    v1877[0] = &v1877[2];
                    v1877[1] = (void *)0x200000000;
                    uint64_t v307 = (void *)v1804;
                    if ((void)v1804 != *((void *)&v1804 + 1))
                    {
                      do
                      {
                        uint64_t v308 = v307[2];
                        if (v308)
                        {
                          unsigned int v309 = *(unsigned __int8 *)(v308 + 16);
                          if (v309 >= 0x1C)
                          {
                            unsigned int v310 = v309 - 33;
                            BOOL v182 = v310 > 0x33;
                            uint64_t v311 = (1 << v310) & 0x8000000000041;
                            if (!v182 && v311 != 0)
                            {
                              LODWORD(v1877[1]) = 0;
                              int v313 = *(_DWORD *)(v308 + 20);
                              if (v313 < 0) {
                                unint64_t v314 = *(void *)(v308 - 32 * (v313 & 0x7FFFFFF) - 8);
                              }
                              else {
                                unint64_t v314 = 0;
                              }
                              if (HIDWORD(v1877[1]) < (v314 >> 4)) {
                                sub_1CD506F54();
                              }
                              if (v313 < 0)
                              {
                                unint64_t v329 = *(void *)(v308 - 32 * (v313 & 0x7FFFFFF) - 8);
                                if ((v329 & 0xFFFFFFFF0) != 0)
                                {
                                  uint64_t v330 = (v329 >> 4);
                                  uint64_t v331 = v308;
                                  do
                                  {
                                    uint64_t v332 = *(_DWORD *)(v308 + 20) & 0x7FFFFFF;
                                    uint64_t v333 = v308 - 32 * v332;
                                    unint64_t v334 = (unsigned int *)(v331 - (*(void *)(v333 - 8) + 32 * v332));
                                    uint64_t v335 = *v334;
                                    uint64_t v336 = v333 + 32 * v335;
                                    uint64_t v337 = v334[1] - v335;
                                    uint64_t v338 = *((void *)v334 - 1);
                                    *(void *)v1869 = v336;
                                    *(void *)&v1869[8] = v337;
                                    *(void *)&v1869[16] = v338;
                                    if (*(_DWORD *)(v338 + 8))
                                    {
                                      sub_1CD5C74F0((uint64_t)v1877, (uint64_t)v1869);
                                    }
                                    else
                                    {
                                      memset(&__dst, 0, sizeof(__dst));
                                      sub_1CD4F8818((uint64_t)&__dst, v1799 + v337);
                                      sub_1CC233E3C(&__dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_, v1798, &v1798[4 * v1799], v1799);
                                      sub_1CC233E3C(&__dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_, *(uint64_t **)v1869, (uint64_t *)(*(void *)v1869 + 32 * *(void *)&v1869[8]), *(uint64_t *)&v1869[8]);
                                      sub_1CD881B90((uint64_t)v1877, (__n128 *)&__dst);
                                      if (__dst.__r_.__value_.__r.__words[0])
                                      {
                                        __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
                                        operator delete(__dst.__r_.__value_.__l.__data_);
                                      }
                                    }
                                    v331 += 16;
                                    --v330;
                                  }
                                  while (v330);
                                }
                              }
                              uint64_t v315 = llvm::CallBase::Create(v308, (uint64_t)v1877[0], LODWORD(v1877[1]), (llvm::Instruction *)v308);
                              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v308, (llvm::Value *)v315, (llvm::Value *)1);
                              uint64_t v316 = v307[2];
                              if (v316)
                              {
                                if ((v316 | 0x1000) != 0xFFFFFFFFFFFFF000)
                                {
                                  unint64_t v317 = *v307 & 0xFFFFFFFFFFFFFFF8;
                                  *(void *)unint64_t v317 = v307[1];
                                  double v318 = (unint64_t *)v307[1];
                                  if (v318)
                                  {
                                    *double v318 = *v318 & 7 | v317;
                                  }
                                  else
                                  {
                                    uint64_t v319 = v307[2];
                                    long long v320 = ***(int32x2_t ****)v319;
                                    unint64_t v321 = (unint64_t)v320[303];
                                    if (v321 <= v317)
                                    {
                                      uint64_t v322 = v320[305].u32[0];
                                      if (v321 + 16 * v322 > v317)
                                      {
                                        unsigned int v323 = v322 - 1;
                                        LODWORD(v324) = v323 & ((v319 >> 4) ^ (v319 >> 9));
                                        int v325 = (uint64_t *)(v321 + 16 * v324);
                                        uint64_t v326 = *v325;
                                        if (v319 != *v325)
                                        {
                                          int v327 = 1;
                                          do
                                          {
                                            if (v326 == -4096) {
                                              goto LABEL_541;
                                            }
                                            int v328 = v324 + v327++;
                                            uint64_t v324 = v328 & v323;
                                            uint64_t v326 = *(void *)(v321 + 16 * v324);
                                          }
                                          while (v319 != v326);
                                          int v325 = (uint64_t *)(v321 + 16 * v324);
                                        }
                                        *int v325 = -8192;
                                        v320[304] = vadd_s32(v320[304], (int32x2_t)0x1FFFFFFFFLL);
                                        uint64_t v319 = v307[2];
LABEL_541:
                                        *(unsigned char *)(v319 + 17) &= ~1u;
                                      }
                                    }
                                  }
                                }
                                v307[2] = 0;
                              }
                              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                            }
                          }
                        }
                        v307 += 3;
                      }
                      while (v307 != *((void **)&v1804 + 1));
                      uint64_t v303 = a1;
                      if (v1877[0] != &v1877[2]) {
                        free(v1877[0]);
                      }
                    }
                  }
                  uint64_t v339 = *v168;
                  v340 = v1777;
                  if (*v168)
                  {
                    unint64_t v341 = (unint64_t)*(v303 - 4);
                    if (!v341 || *(unsigned char *)(v341 + 16) || *(void **)(v341 + 24) != v303[9]) {
                      unint64_t v341 = 0;
                    }
                    uint64_t v344 = *(void **)(v339 + 16);
                    unint64_t v343 = (void *)(v339 + 16);
                    uint64_t v342 = v344;
                    if (!v344) {
                      goto LABEL_570;
                    }
                    unint64_t v345 = v342;
                    v346 = v343;
                    do
                    {
                      unint64_t v347 = v345[4];
                      BOOL v348 = v347 >= v341;
                      if (v347 >= v341) {
                        unint64_t v349 = v345;
                      }
                      else {
                        unint64_t v349 = v345 + 1;
                      }
                      if (v348) {
                        v346 = v345;
                      }
                      unint64_t v345 = (void *)*v349;
                    }
                    while (*v349);
                    if (v346 == v343 || v346[4] > v341) {
LABEL_570:
                    }
                      v346 = v343;
                    uint64_t v350 = v346[5];
                    if (!v342) {
                      goto LABEL_582;
                    }
                    unint64_t v351 = *((void *)v303[5] + 7);
                    std::string v352 = v343;
                    do
                    {
                      unint64_t v353 = v342[4];
                      BOOL v354 = v353 >= v351;
                      if (v353 >= v351) {
                        uint64_t v355 = v342;
                      }
                      else {
                        uint64_t v355 = v342 + 1;
                      }
                      if (v354) {
                        std::string v352 = v342;
                      }
                      uint64_t v342 = (void *)*v355;
                    }
                    while (*v355);
                    if (v352 == v343 || v352[4] > v351) {
LABEL_582:
                    }
                      std::string v352 = v343;
                    uint64_t v356 = v352[5];
                    v358 = *(char **)(v350 + 16);
                    unint64_t v357 = *(char **)(v350 + 24);
                    memset(v1877, 0, sizeof(v1877));
                    if (v350 == v356)
                    {
                      if (v357 == v358)
                      {
                        sub_1CBFA986C((uint64_t)v1877, 0);
                        unint64_t v357 = (char *)v1877[1];
                      }
                      else
                      {
                        unint64_t v1627 = 0xCCCCCCCCCCCCCCCDLL * ((v357 - v358) >> 3);
                        sub_1CD881BF0((uint64_t *)v1877);
                        if (v1627 > 0x666666666666666) {
                          goto LABEL_2796;
                        }
                        unint64_t v1628 = 0x999999999999999ALL * (((char *)v1877[2] - (char *)v1877[0]) >> 3);
                        if (v1628 <= v1627) {
                          unint64_t v1628 = 0xCCCCCCCCCCCCCCCDLL * ((v357 - v358) >> 3);
                        }
                        unint64_t v1629 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v1877[2] - (char *)v1877[0]) >> 3) >= 0x333333333333333
                              ? 0x666666666666666
                              : v1628;
                        if (v1629 > 0x666666666666666) {
LABEL_2796:
                        }
                          abort();
                        uint64_t v1630 = 5 * v1629;
                        v1631 = (char *)operator new(40 * v1629);
                        uint64_t v1632 = 0;
                        v1877[0] = v1631;
                        v1877[1] = v1631;
                        v1877[2] = &v1631[8 * v1630];
                        do
                        {
                          v1633 = &v1631[v1632];
                          char *v1633 = 0;
                          v1633[24] = 0;
                          if (v358[v1632 + 24]) {
                            sub_1CBFA9590((llvm::ValueHandleBase *)&v1631[v1632], &v358[v1632]);
                          }
                          *((void *)v1633 + 4) = *(void *)&v358[v1632 + 32];
                          v1632 += 40;
                        }
                        while (&v358[v1632] != v357);
                        unint64_t v357 = &v1631[v1632];
                        v1877[1] = &v1631[v1632];
                      }
                      v358 = (char *)v1877[0];
                    }
                    for (; v358 != v357; v358 += 40)
                    {
                      if (v358[24] && v1839)
                      {
                        uint64_t v359 = *((void *)v358 + 2);
                        uint64_t v360 = ((v359 >> 4) ^ (v359 >> 9)) & (v1839 - 1);
                        unsigned int v361 = (char *)v1837 + 64 * v360;
                        uint64_t v362 = v361[3];
                        if (v359 == v362)
                        {
LABEL_594:
                          if (v361 != (void *)((char *)v1837 + 64 * (unint64_t)v1839))
                          {
                            uint64_t v365 = v361[7];
                            if (v365)
                            {
                              unsigned int v366 = *(unsigned __int8 *)(v365 + 16);
                              if (v366 >= 0x1C)
                              {
                                unsigned int v367 = v366 - 33;
                                BOOL v182 = v367 > 0x33;
                                uint64_t v368 = (1 << v367) & 0x8000000000041;
                                if (!v182 && v368 != 0)
                                {
                                  uint64_t v370 = *(void *)(v365 - 32);
                                  if (!v370
                                    || *(unsigned char *)(v370 + 16)
                                    || *(void *)(v370 + 24) != *(void *)(v365 + 72)
                                    || (*(unsigned char *)(v370 + 33) & 0x20) == 0)
                                  {
                                    *(void *)v1869 = 6;
                                    *(void *)&v1869[8] = 0;
                                    *(void *)&v1869[16] = v365;
                                    if (v365 != -8192 && v365 != -4096) {
                                      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v1869);
                                    }
                                    uint64_t v371 = *((unsigned int *)a2 + 26);
                                    unint64_t v372 = a2[12];
                                    if (v371 >= *((_DWORD *)a2 + 27))
                                    {
                                      unint64_t v397 = v371 + 1;
                                      BOOL v398 = v372 + 24 * v371 > (unint64_t)v1869;
                                      if (v372 <= (unint64_t)v1869 && v398)
                                      {
                                        v1788 = (llvm::PointerType *)&v1869[-v372];
                                        sub_1CC261F80(v1754, v397);
                                        unint64_t v372 = *(void *)v1754;
                                        uint64_t v373 = (void *)((char *)v1788 + *(void *)v1754);
                                      }
                                      else
                                      {
                                        sub_1CC261F80(v1754, v397);
                                        unint64_t v372 = *(void *)v1754;
                                        uint64_t v373 = v1869;
                                      }
                                    }
                                    else
                                    {
                                      uint64_t v373 = v1869;
                                    }
                                    unsigned int v374 = *((_DWORD *)a2 + 26);
                                    unint64_t v375 = (unint64_t *)(v372 + 24 * v374);
                                    *unint64_t v375 = 6;
                                    v375[1] = 0;
                                    unint64_t v376 = v373[2];
                                    v375[2] = v376;
                                    if (v376 != -8192 && v376 != -4096)
                                    {
                                      if (v376)
                                      {
                                        unint64_t v377 = *v373 & 0xFFFFFFFFFFFFFFF8;
                                        v375[1] = *(void *)v377;
                                        *(void *)unint64_t v377 = v375;
                                        *unint64_t v375 = v377 | 6;
                                        v378 = (unint64_t *)v375[1];
                                        if (v378) {
                                          unint64_t *v378 = *v378 & 7 | (unint64_t)(v375 + 1);
                                        }
                                      }
                                    }
                                    *((_DWORD *)a2 + 26) = v374 + 1;
                                    if (*(void *)&v1869[16] != -8192
                                      && *(void *)&v1869[16] != -4096
                                      && *(void *)&v1869[16])
                                    {
                                      unint64_t v379 = *(void *)v1869 & 0xFFFFFFFFFFFFFFF8;
                                      *(void *)(*(void *)v1869 & 0xFFFFFFFFFFFFFFF8) = *(void *)&v1869[8];
                                      if (*(void *)&v1869[8])
                                      {
                                        **(void **)&v1869[8] = **(void **)&v1869[8] & 7 | v379;
                                      }
                                      else
                                      {
                                        uint64_t v380 = *(void *)&v1869[16];
                                        uint64_t v381 = ****(int32x2_t *****)&v1869[16];
                                        unint64_t v382 = (unint64_t)v381[303];
                                        if (v382 <= v379)
                                        {
                                          uint64_t v383 = v381[305].u32[0];
                                          if (v382 + 16 * v383 > v379)
                                          {
                                            unsigned int v384 = v383 - 1;
                                            LODWORD(v385) = v384 & ((*(_DWORD *)&v1869[16] >> 4) ^ (*(_DWORD *)&v1869[16] >> 9));
                                            long long v386 = (uint64_t *)(v382 + 16 * v385);
                                            uint64_t v387 = *v386;
                                            if (*(void *)&v1869[16] != *v386)
                                            {
                                              int v388 = 1;
                                              do
                                              {
                                                if (v387 == -4096) {
                                                  goto LABEL_627;
                                                }
                                                int v389 = v385 + v388++;
                                                uint64_t v385 = v389 & v384;
                                                uint64_t v387 = *(void *)(v382 + 16 * v385);
                                              }
                                              while (*(void *)&v1869[16] != v387);
                                              long long v386 = (uint64_t *)(v382 + 16 * v385);
                                            }
                                            *long long v386 = -8192;
                                            v381[304] = vadd_s32(v381[304], (int32x2_t)0x1FFFFFFFFLL);
                                            uint64_t v380 = *(void *)&v1869[16];
LABEL_627:
                                            *(unsigned char *)(v380 + 17) &= ~1u;
                                          }
                                        }
                                      }
                                    }
                                    uint64_t v390 = *((void *)v358 + 4);
                                    if (!*(void *)(v390 + 8))
                                    {
                                      unint64_t v391 = *(void *)(v365 - 32);
                                      if (v391)
                                      {
                                        if (!*(unsigned char *)(v391 + 16) && *(void *)(v391 + 24) == *(void *)(v365 + 72))
                                        {
                                          v392 = (void *)*v343;
                                          if (!*v343) {
                                            goto LABEL_647;
                                          }
                                          v393 = v343;
                                          do
                                          {
                                            unint64_t v394 = v392[4];
                                            BOOL v395 = v394 >= v391;
                                            if (v394 >= v391) {
                                              unint64_t v396 = v392;
                                            }
                                            else {
                                              unint64_t v396 = v392 + 1;
                                            }
                                            if (v395) {
                                              v393 = v392;
                                            }
                                            v392 = (void *)*v396;
                                          }
                                          while (*v396);
                                          if (v393 == v343 || v393[4] > v391) {
LABEL_647:
                                          }
                                            v393 = v343;
                                          uint64_t v390 = v393[5];
                                        }
                                      }
                                    }
                                    sub_1CBFA7A30(v356, (int32x2_t ****)v365, v390);
                                  }
                                }
                              }
                            }
                          }
                        }
                        else
                        {
                          int v363 = 1;
                          while (v362 != -4096)
                          {
                            int v364 = v360 + v363++;
                            uint64_t v360 = v364 & (v1839 - 1);
                            unsigned int v361 = (char *)v1837 + 64 * v360;
                            uint64_t v362 = v361[3];
                            if (v359 == v362) {
                              goto LABEL_594;
                            }
                          }
                        }
                      }
                    }
                    v399 = (llvm::CallGraphNode *)v356;
                    uint64_t v303 = a1;
                    llvm::CallGraphNode::removeCallEdgeFor(v399, (uint64_t ****)a1);
                    uint64_t v400 = (char *)v1877[0];
                    uint64_t v306 = (uint64_t ***)v1771;
                    v340 = v1777;
                    if (v1877[0])
                    {
                      int64x2_t v401 = (char *)v1877[1];
                      int64x2_t v402 = v1877[0];
                      if (v1877[1] != v1877[0])
                      {
                        do
                        {
                          if (*(v401 - 16))
                          {
                            uint64_t v403 = *((void *)v401 - 3);
                            if (v403 != -8192 && v403 != -4096 && v403 != 0)
                            {
                              unint64_t v405 = *((void *)v401 - 5) & 0xFFFFFFFFFFFFFFF8;
                              *(void *)unint64_t v405 = *((void *)v401 - 4);
                              uint64_t v406 = (unint64_t *)*((void *)v401 - 4);
                              if (v406)
                              {
                                *uint64_t v406 = *v406 & 7 | v405;
                              }
                              else
                              {
                                uint64_t v407 = *((void *)v401 - 3);
                                uint64_t v408 = ***(int32x2_t ****)v407;
                                unint64_t v409 = (unint64_t)v408[303];
                                if (v409 <= v405)
                                {
                                  uint64_t v410 = v408[305].u32[0];
                                  if (v409 + 16 * v410 > v405)
                                  {
                                    unsigned int v411 = v410 - 1;
                                    LODWORD(v412) = v411 & ((v407 >> 4) ^ (v407 >> 9));
                                    unint64_t v413 = (uint64_t *)(v409 + 16 * v412);
                                    uint64_t v414 = *v413;
                                    if (v407 != *v413)
                                    {
                                      int v415 = 1;
                                      do
                                      {
                                        if (v414 == -4096) {
                                          goto LABEL_674;
                                        }
                                        int v416 = v412 + v415++;
                                        uint64_t v412 = v416 & v411;
                                        uint64_t v414 = *(void *)(v409 + 16 * v412);
                                      }
                                      while (v407 != v414);
                                      unint64_t v413 = (uint64_t *)(v409 + 16 * v412);
                                    }
                                    *unint64_t v413 = -8192;
                                    v408[304] = vadd_s32(v408[304], (int32x2_t)0x1FFFFFFFFLL);
                                    uint64_t v407 = *((void *)v401 - 3);
LABEL_674:
                                    *(unsigned char *)(v407 + 17) &= ~1u;
                                  }
                                }
                              }
                            }
                            *(v401 - 16) = 0;
                          }
                          v401 -= 40;
                        }
                        while (v401 != v400);
                        int64x2_t v402 = v1877[0];
                      }
                      v1877[1] = v400;
                      operator delete(v402);
                    }
                  }
                  unsigned int v1729 = v1746 >> 4;
                  if ((*((unsigned char *)v1746 + 23) & 0x20) == 0) {
                    goto LABEL_693;
                  }
                  uint64_t v417 = ***(void ***)v1746;
                  v1877[0] = v1746;
                  int v418 = *(_DWORD *)(v417 + 2496);
                  if (v418)
                  {
                    uint64_t v419 = *(void *)(v417 + 2480);
                    int v420 = v418 - 1;
                    unsigned int v421 = v420 & ((v1746 >> 4) ^ (v1746 >> 9));
                    v422 = (llvm::Function **)(v419 + 40 * v421);
                    int v423 = *v422;
                    if (*v422 == v1746) {
                      goto LABEL_688;
                    }
                    v424 = 0;
                    int v425 = 1;
                    while (v423 != (llvm::Function *)-4096)
                    {
                      if (v424) {
                        BOOL v426 = 0;
                      }
                      else {
                        BOOL v426 = v423 == (llvm::Function *)-8192;
                      }
                      if (v426) {
                        v424 = v422;
                      }
                      unsigned int v427 = v421 + v425++;
                      unsigned int v421 = v427 & v420;
                      v422 = (llvm::Function **)(v419 + 40 * v421);
                      int v423 = *v422;
                      if (*v422 == v1746) {
                        goto LABEL_688;
                      }
                    }
                    if (v424) {
                      v1595 = v424;
                    }
                    else {
                      v1595 = v422;
                    }
                  }
                  else
                  {
                    v1595 = 0;
                  }
                  v422 = (llvm::Function **)sub_1CC609054(v417 + 2480, (uint64_t)v1877, (uint64_t *)v1877, v1595);
                  v1596 = (llvm::Function *)v1877[0];
                  v422[3] = 0;
                  v422[4] = 0;
                  _DWORD *v422 = v1596;
                  v422[1] = (llvm::Function *)(v422 + 3);
                  v422[2] = (llvm::Function *)0x100000000;
LABEL_688:
                  uint64_t v428 = *((unsigned int *)v422 + 4);
                  if (v428)
                  {
                    size_t v429 = (void *)((char *)v422[1] + 8);
                    uint64_t v430 = 16 * v428;
                    uint64_t v431 = 0;
                    while (*((_DWORD *)v429 - 2))
                    {
                      v429 += 2;
                      v430 -= 16;
                      if (!v430) {
                        goto LABEL_694;
                      }
                    }
                    uint64_t v431 = *v429;
                    goto LABEL_694;
                  }
LABEL_693:
                  uint64_t v431 = 0;
LABEL_694:
                  v432 = v303[6];
                  if (!v432) {
                    goto LABEL_871;
                  }
                  v433 = **(void ***)v340;
                  Impl = v303[6];
                  unsigned int v434 = *((unsigned __int16 *)v432 + 1);
                  unsigned int v435 = v432[1];
                  uint64_t v436 = v432[2];
                  v437 = (uint64_t *)&v432[-2 * v436];
                  if (v436 == 2) {
                    uint64_t v438 = v437[1];
                  }
                  else {
                    uint64_t v438 = 0;
                  }
                  Impl = (void *)llvm::DILocation::getImpl(v433, v435, v434, *v437, v438, 0, 1, 1);
                  memset(v1877, 0, 20);
                  uint64_t v439 = *((void *)v340 + 14);
                  if (v439)
                  {
                    if (*(_DWORD *)(v439 + 8))
                    {
                      uint64_t v440 = *(void *)(v439 + 40);
                      if (v440)
                      {
                        int v441 = *(_DWORD *)(v440 + 40);
                        if (v441)
                        {
                          uint64_t v442 = *(void *)(v440 + 24);
                          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
                            && __cxa_guard_acquire(&qword_1EBCBE588))
                          {
                            unint64_t v1639 = llvm::hashing::detail::fixed_seed_override;
                            if (!llvm::hashing::detail::fixed_seed_override) {
                              unint64_t v1639 = 0xFF51AFD7ED558CCDLL;
                            }
                            qword_1EBCBE580 = v1639;
                            __cxa_guard_release(&qword_1EBCBE588);
                          }
                          uint64_t v443 = __ROR8__(qword_1EBCBE580 ^ 0x36F778AF3203422BLL, 30);
                          unint64_t v444 = 0x9DDFEA08EB382D69
                               * ((qword_1EBCBE580 + 0x4FAD788D19365BF3) ^ ((0x9DDFEA08EB382D69
                                                                             * ((v443 + 0x7A30D13C836179FFLL) ^ (qword_1EBCBE580 + 0x4FAD788D19365BF3))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v443 + 0x7A30D13C836179FFLL) ^ (qword_1EBCBE580 + 0x4FAD788D19365BF3))));
                          unsigned int v445 = -348639895 * ((v444 >> 47) ^ v444);
                          for (iuint64_t i = 1; ; ++ii)
                          {
                            unsigned int v447 = v445 & (v441 - 1);
                            uint64_t v448 = v442 + 24 * v447;
                            v449 = *(void **)v448;
                            if (*(void *)v448 == -1)
                            {
                              if ("no-inline-line-tables" == (char *)-1) {
                                goto LABEL_720;
                              }
                            }
                            else if (v449 == (void *)-2)
                            {
                              if ("no-inline-line-tables" == (char *)-2) {
                                goto LABEL_720;
                              }
                            }
                            else if (*(void *)(v448 + 8) == 21)
                            {
                              BOOL v450 = *v449 == 0x6E696C6E692D6F6ELL && v449[1] == 0x742D656E696C2D65;
                              if (v450 && *(void *)((char *)v449 + 13) == 0x73656C6261742D65)
                              {
LABEL_720:
                                int v452 = 1;
                                goto LABEL_722;
                              }
                            }
                            if (v449 == (void *)-1) {
                              break;
                            }
                            unsigned int v445 = ii + v447;
                          }
                        }
                      }
                    }
                  }
                  int v452 = 0;
LABEL_722:
                  if (v1740 == v1795) {
                    goto LABEL_870;
                  }
                  if (v431) {
                    int v453 = v452;
                  }
                  else {
                    int v453 = 1;
                  }
                  int v1789 = v453;
                  uint64_t v454 = v1740;
                  do
                  {
                    size_t v455 = v454 - 24;
                    if (!v454) {
                      size_t v455 = 0;
                    }
                    size_t v456 = v455 + 40;
                    size_t v1780 = v455;
                    for (juint64_t j = *(void *)(v455 + 48); jj != v456; juint64_t j = *(void *)(jj + 8))
                    {
                      *(void *)v1869 = v433;
                      *(void *)&v1869[8] = &Impl;
                      *(void *)&v1869[16] = v1877;
                      if (jj) {
                        uint64_t v458 = (void **)(jj - 24);
                      }
                      else {
                        uint64_t v458 = 0;
                      }
                      llvm::updateLoopMetadataDebugLocations((llvm::Instruction *)v458, (uint64_t (*)(uint64_t))sub_1CD17A9E8, (uint64_t)v1869);
                      if ((v452 & 1) == 0)
                      {
                        v460 = v458 + 6;
                        v459 = (void **)v458[6];
                        v1854 = v459;
                        if (v459)
                        {
                          llvm::MetadataTracking::track((uint64_t)&v1854, (unsigned __int8 *)v459, 2);
                          if (v1854)
                          {
                            v1845 = v1854;
                            llvm::MetadataTracking::track((uint64_t)&v1845, (unsigned __int8 *)v1854, 2);
                            sub_1CD17A8D4((unsigned __int8 **)&v1851, (uint64_t)&v1845, (unsigned __int8 *)Impl, *(void **)*v458, (uint64_t)v1877);
                            if (v1845)
                            {
                              int v461 = *(unsigned __int8 *)v1845;
                              if ((v461 - 4) > 0x1E)
                              {
                                if ((v461 - 3) >= 0xFFFFFFFE) {
                                  v478 = v1845;
                                }
                                else {
                                  v478 = 0;
                                }
                                if ((v461 - 3) >= 0xFFFFFFFE)
                                {
                                  unint64_t v479 = (unint64_t)v478 + 8;
                                  goto LABEL_784;
                                }
                                if (v461 == 3) {
                                  *((void *)v1845 + 1) = 0;
                                }
                              }
                              else if ((*((unsigned char *)v1845 + 1) & 0x7F) == 2 || *((_DWORD *)v1845 + 3))
                              {
                                uint64_t v489 = *((void *)v1845 + 2);
                                if ((v489 & 4) != 0)
                                {
                                  unint64_t v479 = v489 & 0xFFFFFFFFFFFFFFF8;
                                  if (v479)
                                  {
LABEL_784:
                                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1845;
                                    sub_1CC5FA668(v479 + 16, &__dst);
                                  }
                                }
                              }
                            }
                            v1862 = v1851;
                            if (v1851) {
                              llvm::MetadataTracking::track((uint64_t)&v1862, (unsigned __int8 *)v1851, 2);
                            }
                            if (&v1862 == v460)
                            {
                              if (!v1862) {
                                goto LABEL_747;
                              }
                              int v492 = *(unsigned __int8 *)v1862;
                              if ((v492 - 4) > 0x1E)
                              {
                                if ((v492 - 3) >= 0xFFFFFFFE) {
                                  v496 = v1862;
                                }
                                else {
                                  v496 = 0;
                                }
                                if ((v492 - 3) < 0xFFFFFFFE)
                                {
                                  if (v492 == 3) {
                                    *((void *)v1862 + 1) = 0;
                                  }
                                  goto LABEL_747;
                                }
                                unint64_t v494 = (unint64_t)v496 + 8;
                              }
                              else
                              {
                                if ((*((unsigned char *)v1862 + 1) & 0x7F) != 2 && !*((_DWORD *)v1862 + 3)) {
                                  goto LABEL_747;
                                }
                                uint64_t v493 = *((void *)v1862 + 2);
                                if ((v493 & 4) == 0) {
                                  goto LABEL_747;
                                }
                                unint64_t v494 = v493 & 0xFFFFFFFFFFFFFFF8;
                                if (!v494) {
                                  goto LABEL_747;
                                }
                              }
                              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1862;
                              sub_1CC5FA668(v494 + 16, &__dst);
                              goto LABEL_747;
                            }
                            v462 = (unsigned __int8 *)*v460;
                            if (!*v460) {
                              goto LABEL_745;
                            }
                            int v484 = *v462;
                            if ((v484 - 4) <= 0x1E)
                            {
                              if ((v462[1] & 0x7F) != 2 && !*((_DWORD *)v462 + 3)) {
                                goto LABEL_745;
                              }
                              uint64_t v485 = *((void *)v462 + 2);
                              if ((v485 & 4) == 0) {
                                goto LABEL_745;
                              }
                              unint64_t v486 = v485 & 0xFFFFFFFFFFFFFFF8;
                              if (!v486) {
                                goto LABEL_745;
                              }
                              goto LABEL_821;
                            }
                            if ((v484 - 3) >= 0xFFFFFFFE) {
                              v488 = *v460;
                            }
                            else {
                              v488 = 0;
                            }
                            if ((v484 - 3) >= 0xFFFFFFFE)
                            {
                              unint64_t v486 = (unint64_t)v488 + 8;
LABEL_821:
                              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)(v458 + 6);
                              sub_1CC5FA668(v486 + 16, &__dst);
                              goto LABEL_745;
                            }
                            if (v484 == 3) {
                              *((void *)v462 + 1) = 0;
                            }
LABEL_745:
                            v463 = (unsigned __int8 *)v1862;
                            void *v460 = v1862;
                            if (v463)
                            {
                              llvm::MetadataTracking::retrack((uint64_t)&v1862, v463, (uint64_t)(v458 + 6));
                              v1862 = 0;
                            }
LABEL_747:
                            if (v1851)
                            {
                              int v464 = *(unsigned __int8 *)v1851;
                              if ((v464 - 4) > 0x1E)
                              {
                                if ((v464 - 3) >= 0xFFFFFFFE) {
                                  v480 = v1851;
                                }
                                else {
                                  v480 = 0;
                                }
                                if ((v464 - 3) >= 0xFFFFFFFE)
                                {
                                  unint64_t v481 = (unint64_t)v480 + 8;
                                  goto LABEL_790;
                                }
                                if (v464 == 3) {
                                  *((void *)v1851 + 1) = 0;
                                }
                              }
                              else if ((*((unsigned char *)v1851 + 1) & 0x7F) == 2 || *((_DWORD *)v1851 + 3))
                              {
                                uint64_t v490 = *((void *)v1851 + 2);
                                if ((v490 & 4) != 0)
                                {
                                  unint64_t v481 = v490 & 0xFFFFFFFFFFFFFFF8;
                                  if (v481)
                                  {
LABEL_790:
                                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1851;
                                    sub_1CC5FA668(v481 + 16, &__dst);
                                  }
                                }
                              }
                            }
                            v465 = v1854;
                            if (!v1854) {
                              continue;
                            }
                            int v466 = *(unsigned __int8 *)v1854;
                            if ((v466 - 4) > 0x1E)
                            {
                              if ((v466 - 3) >= 0xFFFFFFFE) {
                                v482 = v1854;
                              }
                              else {
                                v482 = 0;
                              }
                              if ((v466 - 3) >= 0xFFFFFFFE)
                              {
                                unint64_t v468 = (unint64_t)v482 + 8;
LABEL_796:
                                v483 = &v1854;
                                goto LABEL_797;
                              }
LABEL_850:
                              if (v466 == 3) {
                                v465[1] = 0;
                              }
                              continue;
                            }
                            if ((*((unsigned char *)v1854 + 1) & 0x7F) == 2 || *((_DWORD *)v1854 + 3))
                            {
                              uint64_t v467 = *((void *)v1854 + 2);
                              if ((v467 & 4) != 0)
                              {
                                unint64_t v468 = v467 & 0xFFFFFFFFFFFFFFF8;
                                if (v468) {
                                  goto LABEL_796;
                                }
                              }
                            }
                            continue;
                          }
                        }
                        if (!v1789) {
                          continue;
                        }
                      }
                      int v469 = *((unsigned __int8 *)v458 + 16);
                      if (v469 == 59) {
                        v470 = v458;
                      }
                      else {
                        v470 = 0;
                      }
                      if (jj
                        && v469 == 59
                        && *((unsigned __int8 *)*(v470 - 4) + 16) <= 0x14u
                        && (*((_WORD *)v470 + 9) & 0x40) == 0)
                      {
                        continue;
                      }
                      v471 = (unsigned __int8 *)a1[6];
                      v1811[0] = (uint64_t)v471;
                      if (v471) {
                        llvm::MetadataTracking::track((uint64_t)v1811, v471, 2);
                      }
                      v472 = (unsigned __int8 **)(v458 + 6);
                      if (v1811 != (uint64_t *)(v458 + 6))
                      {
                        v473 = *v472;
                        if (!*v472) {
                          goto LABEL_770;
                        }
                        int v475 = *v473;
                        if ((v475 - 4) > 0x1E)
                        {
                          if ((v475 - 3) >= 0xFFFFFFFE) {
                            v487 = *v472;
                          }
                          else {
                            v487 = 0;
                          }
                          if ((v475 - 3) < 0xFFFFFFFE)
                          {
                            if (v475 == 3) {
                              *((void *)v473 + 1) = 0;
                            }
                            goto LABEL_770;
                          }
                          unint64_t v477 = (unint64_t)(v487 + 8);
LABEL_813:
                          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)(v458 + 6);
                          sub_1CC5FA668(v477 + 16, &__dst);
                        }
                        else if ((v473[1] & 0x7F) == 2 || *((_DWORD *)v473 + 3))
                        {
                          uint64_t v476 = *((void *)v473 + 2);
                          if ((v476 & 4) != 0)
                          {
                            unint64_t v477 = v476 & 0xFFFFFFFFFFFFFFF8;
                            if (v477) {
                              goto LABEL_813;
                            }
                          }
                        }
LABEL_770:
                        v474 = (unsigned __int8 *)v1811[0];
                        *v472 = (unsigned __int8 *)v1811[0];
                        if (v474)
                        {
                          llvm::MetadataTracking::retrack((uint64_t)v1811, v474, (uint64_t)(v458 + 6));
                          v1811[0] = 0;
                        }
                        continue;
                      }
                      v465 = (void *)v1811[0];
                      if (!v1811[0]) {
                        continue;
                      }
                      int v466 = *(unsigned __int8 *)v1811[0];
                      if ((v466 - 4) > 0x1E)
                      {
                        if ((v466 - 3) >= 0xFFFFFFFE) {
                          uint64_t v495 = v1811[0];
                        }
                        else {
                          uint64_t v495 = 0;
                        }
                        if ((v466 - 3) >= 0xFFFFFFFE)
                        {
                          unint64_t v468 = v495 + 8;
LABEL_849:
                          v483 = (void **)v1811;
LABEL_797:
                          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v483;
                          sub_1CC5FA668(v468 + 16, &__dst);
                          continue;
                        }
                        goto LABEL_850;
                      }
                      if ((*(unsigned char *)(v1811[0] + 1) & 0x7F) == 2 || *(_DWORD *)(v1811[0] + 12))
                      {
                        uint64_t v491 = *(void *)(v1811[0] + 16);
                        if ((v491 & 4) != 0)
                        {
                          unint64_t v468 = v491 & 0xFFFFFFFFFFFFFFF8;
                          if (v468) {
                            goto LABEL_849;
                          }
                        }
                      }
                    }
                    if (v452)
                    {
                      for (kuint64_t k = *(void *)(v1780 + 48); kk != v456; kuint64_t k = *(void *)(kk + 8))
                      {
                        if (kk) {
                          uint64_t v498 = kk - 24;
                        }
                        else {
                          uint64_t v498 = 0;
                        }
                        if (sub_1CBF63B28(v498)) {
                          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                        }
                      }
                    }
                    uint64_t v454 = *(void *)(v454 + 8);
                  }
                  while (v454 != v1795);
LABEL_870:
                  MEMORY[0x1D25D9CD0](v1877[0], 8);
                  uint64_t v306 = (uint64_t ***)v1771;
LABEL_871:
                  v1877[0] = &v1877[2];
                  v1877[1] = (void *)0x1000000000;
                  v500 = (void *)*((void *)&v1835 + 1);
                  v499 = (void *)v1835;
                  if ((void)v1835 != *((void *)&v1835 + 1))
                  {
                    do
                    {
                      *(void *)v1869 = *v499;
                      uint64_t v501 = *(void *)(*(void *)v1869 + 16);
                      v502 = (void *)(v501 & 0xFFFFFFFFFFFFFFF8);
                      if ((v501 & 4) != 0) {
                        v502 = (void *)*v502;
                      }
                      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)llvm::MDTuple::getImpl((uint64_t)v502, 0, 0, 2, 1);
                      if (LODWORD(v1877[1]) >= HIDWORD(v1877[1]))
                      {
                        if (v1877[0] > &__dst || (char *)v1877[0] + 8 * LODWORD(v1877[1]) <= (char *)&__dst) {
                          sub_1CD17AB54();
                        }
                        sub_1CD17AB54();
                      }
                      int v504 = (int)v1877[1];
                      std::string::size_type v505 = __dst.__r_.__value_.__r.__words[0];
                      __dst.__r_.__value_.__r.__words[0] = 0;
                      *((void *)v1877[0] + LODWORD(v1877[1])) = v505;
                      LODWORD(v1877[1]) = v504 + 1;
                      v506 = (llvm::MDNode *)__dst.__r_.__value_.__r.__words[0];
                      __dst.__r_.__value_.__r.__words[0] = 0;
                      if (v506) {
                        llvm::MDNode::deleteTemporary(v506, v503);
                      }
                      v507 = sub_1CD17AC14((uint64_t)&v1836[1], (uint64_t *)v1869);
                      sub_1CC19E068((unsigned __int8 **)v507 + 1, *((unsigned __int8 **)v1877[0] + LODWORD(v1877[1]) - 1));
                      ++v499;
                    }
                    while (v499 != v500);
                    v509 = (std::string::size_type *)*((void *)&v1835 + 1);
                    v508 = (std::string::size_type *)v1835;
                    *(void *)v1869 = &v1869[16];
                    *(void *)&v1869[8] = 0x400000000;
                    if ((void)v1835 != *((void *)&v1835 + 1))
                    {
                      do
                      {
                        std::string::size_type v510 = *v508;
                        __dst.__r_.__value_.__r.__words[0] = v510;
                        uint64_t v511 = *(unsigned int *)(v510 + 8);
                        if (v511)
                        {
                          unsigned int v512 = 0;
                          uint64_t v513 = -8 * v511;
                          do
                          {
                            v514 = *(unsigned __int8 **)(v510 + v513);
                            if (*v514 - 4 <= 0x1E)
                            {
                              Impl = *(void **)(v510 + v513);
                              v514 = (unsigned __int8 *)sub_1CD17AC14((uint64_t)&v1836[1], (uint64_t *)&Impl)[1];
                              unsigned int v512 = *(_DWORD *)&v1869[8];
                            }
                            if (v512 >= *(_DWORD *)&v1869[12]) {
                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                            }
                            *(void *)(*(void *)v1869 + 8 * v512) = v514;
                            unsigned int v512 = ++*(_DWORD *)&v1869[8];
                            v513 += 8;
                          }
                          while (v513);
                        }
                        else
                        {
                          unsigned int v512 = 0;
                        }
                        uint64_t v515 = *(void *)(v510 + 16);
                        v516 = (void *)(v515 & 0xFFFFFFFFFFFFFFF8);
                        if ((v515 & 4) != 0) {
                          v516 = (void *)*v516;
                        }
                        v517 = llvm::MDTuple::getImpl((uint64_t)v516, *(void **)v1869, v512, 0, 1);
                        uint64_t v518 = *(void *)(sub_1CD17AC14((uint64_t)&v1836[1], (uint64_t *)&__dst)[1] + 16);
                        if ((v518 & 4) != 0) {
                          llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v518 & 0xFFFFFFFFFFFFFFF8), v517);
                        }
                        *(_DWORD *)&v1869[8] = 0;
                        ++v508;
                      }
                      while (v508 != v509);
                      if (*(unsigned char **)v1869 != &v1869[16]) {
                        free(*(void **)v1869);
                      }
                    }
                  }
                  v519 = (void **)v1877[0];
                  if (LODWORD(v1877[1]))
                  {
                    uint64_t v1531 = 8 * LODWORD(v1877[1]);
                    v1532 = (char *)v1877[0] - 8;
                    do
                    {
                      v1533 = *(llvm::MDNode **)&v1532[v1531];
                      *(void *)&v1532[v1531] = 0;
                      if (v1533) {
                        llvm::MDNode::deleteTemporary(v1533, v304);
                      }
                      v1531 -= 8;
                    }
                    while (v1531);
                    v519 = (void **)v1877[0];
                  }
                  if (v519 != &v1877[2]) {
                    free(v519);
                  }
                  if (LODWORD(v1836[2]) && v1740 != v1795)
                  {
                    uint64_t v520 = v1740;
                    do
                    {
                      uint64_t v521 = v520 - 24;
                      if (!v520) {
                        uint64_t v521 = 0;
                      }
                      uint64_t v522 = v521 + 40;
                      for (muint64_t m = *(void *)(v521 + 48); mm != v522; muint64_t m = *(void *)(mm + 8))
                      {
                        if (mm) {
                          v524 = (unsigned char *)(mm - 24);
                        }
                        else {
                          v524 = 0;
                        }
                        if ((v524[23] & 0x20) == 0) {
                          goto LABEL_928;
                        }
                        uint64_t v525 = ***(void ***)v524;
                        v1877[0] = v524;
                        int v526 = *(_DWORD *)(v525 + 2496);
                        if (!v526)
                        {
                          v575 = 0;
LABEL_983:
                          v530 = sub_1CC609054(v525 + 2480, (uint64_t)v1877, (uint64_t *)v1877, v575);
                          v576 = v1877[0];
                          v530[4] = 0;
                          v530[3] = 0;
                          void *v530 = v576;
                          v530[1] = v530 + 3;
                          v530[2] = 0x100000000;
                          goto LABEL_924;
                        }
                        uint64_t v527 = *(void *)(v525 + 2480);
                        int v528 = v526 - 1;
                        unsigned int v529 = v528 & ((v524 >> 4) ^ (v524 >> 9));
                        v530 = (void *)(v527 + 40 * v529);
                        v531 = (unsigned char *)*v530;
                        if ((unsigned char *)*v530 != v524)
                        {
                          v532 = 0;
                          int v533 = 1;
                          while (v531 != (unsigned char *)-4096)
                          {
                            if (v532) {
                              BOOL v534 = 0;
                            }
                            else {
                              BOOL v534 = v531 == (unsigned char *)-8192;
                            }
                            if (v534) {
                              v532 = v530;
                            }
                            unsigned int v535 = v529 + v533++;
                            unsigned int v529 = v535 & v528;
                            v530 = (void *)(v527 + 40 * v529);
                            v531 = (unsigned char *)*v530;
                            if ((unsigned char *)*v530 == v524) {
                              goto LABEL_924;
                            }
                          }
                          if (v532) {
                            v575 = v532;
                          }
                          else {
                            v575 = v530;
                          }
                          goto LABEL_983;
                        }
LABEL_924:
                        uint64_t v536 = *((unsigned int *)v530 + 4);
                        if (v536)
                        {
                          v537 = (uint64_t *)(v530[1] + 8);
                          uint64_t v538 = 16 * v536;
                          while (*((_DWORD *)v537 - 2) != 7)
                          {
                            v537 += 2;
                            v538 -= 16;
                            if (!v538) {
                              goto LABEL_928;
                            }
                          }
                          if (*v537)
                          {
                            sub_1CD17AE90((unsigned __int8 **)v1869, v1836[1], v1836[3], *v537);
                            v569 = *(llvm::MDNode **)v1869;
                            if (*(void *)v1869)
                            {
                              int v570 = **(unsigned char **)v1869;
                              if ((v570 - 4) > 0x1E)
                              {
                                if ((v570 - 3) >= 0xFFFFFFFE) {
                                  uint64_t v579 = *(void *)v1869;
                                }
                                else {
                                  uint64_t v579 = 0;
                                }
                                if ((v570 - 3) >= 0xFFFFFFFE)
                                {
                                  unint64_t v580 = v579 + 8;
                                  goto LABEL_993;
                                }
                                if (v570 == 3) {
                                  *(void *)(*(void *)v1869 + 8) = 0;
                                }
                              }
                              else if ((*(unsigned char *)(*(void *)v1869 + 1) & 0x7F) == 2 {
                                     || *(_DWORD *)(*(void *)v1869 + 12))
                              }
                              {
                                uint64_t v584 = *(void *)(*(void *)v1869 + 16);
                                if ((v584 & 4) != 0)
                                {
                                  unint64_t v580 = v584 & 0xFFFFFFFFFFFFFFF8;
                                  if (v580)
                                  {
LABEL_993:
                                    v1877[0] = v1869;
                                    sub_1CC5FA668(v580 + 16, v1877);
                                  }
                                }
                              }
                              llvm::Value::setMetadata((uint64_t ***)v524, 7, v569);
                            }
                          }
                        }
LABEL_928:
                        if ((v524[23] & 0x20) == 0) {
                          goto LABEL_943;
                        }
                        uint64_t v539 = ***(void ***)v524;
                        v1877[0] = v524;
                        int v540 = *(_DWORD *)(v539 + 2496);
                        if (!v540)
                        {
                          v577 = 0;
LABEL_987:
                          v544 = sub_1CC609054(v539 + 2480, (uint64_t)v1877, (uint64_t *)v1877, v577);
                          v578 = v1877[0];
                          v544[4] = 0;
                          v544[3] = 0;
                          void *v544 = v578;
                          v544[1] = v544 + 3;
                          v544[2] = 0x100000000;
                          goto LABEL_939;
                        }
                        uint64_t v541 = *(void *)(v539 + 2480);
                        int v542 = v540 - 1;
                        unsigned int v543 = v542 & ((v524 >> 4) ^ (v524 >> 9));
                        v544 = (void *)(v541 + 40 * v543);
                        v545 = (unsigned char *)*v544;
                        if ((unsigned char *)*v544 != v524)
                        {
                          v546 = 0;
                          int v547 = 1;
                          while (v545 != (unsigned char *)-4096)
                          {
                            if (v546) {
                              BOOL v548 = 0;
                            }
                            else {
                              BOOL v548 = v545 == (unsigned char *)-8192;
                            }
                            if (v548) {
                              v546 = v544;
                            }
                            unsigned int v549 = v543 + v547++;
                            unsigned int v543 = v549 & v542;
                            v544 = (void *)(v541 + 40 * v543);
                            v545 = (unsigned char *)*v544;
                            if ((unsigned char *)*v544 == v524) {
                              goto LABEL_939;
                            }
                          }
                          if (v546) {
                            v577 = v546;
                          }
                          else {
                            v577 = v544;
                          }
                          goto LABEL_987;
                        }
LABEL_939:
                        uint64_t v550 = *((unsigned int *)v544 + 4);
                        if (v550)
                        {
                          v551 = (uint64_t *)(v544[1] + 8);
                          uint64_t v552 = 16 * v550;
                          while (*((_DWORD *)v551 - 2) != 8)
                          {
                            v551 += 2;
                            v552 -= 16;
                            if (!v552) {
                              goto LABEL_943;
                            }
                          }
                          if (*v551)
                          {
                            sub_1CD17AE90((unsigned __int8 **)v1869, v1836[1], v1836[3], *v551);
                            v571 = *(llvm::MDNode **)v1869;
                            if (*(void *)v1869)
                            {
                              int v572 = **(unsigned char **)v1869;
                              if ((v572 - 4) > 0x1E)
                              {
                                if ((v572 - 3) >= 0xFFFFFFFE) {
                                  uint64_t v581 = *(void *)v1869;
                                }
                                else {
                                  uint64_t v581 = 0;
                                }
                                if ((v572 - 3) >= 0xFFFFFFFE)
                                {
                                  unint64_t v582 = v581 + 8;
                                  goto LABEL_999;
                                }
                                if (v572 == 3) {
                                  *(void *)(*(void *)v1869 + 8) = 0;
                                }
                              }
                              else if ((*(unsigned char *)(*(void *)v1869 + 1) & 0x7F) == 2 {
                                     || *(_DWORD *)(*(void *)v1869 + 12))
                              }
                              {
                                uint64_t v585 = *(void *)(*(void *)v1869 + 16);
                                if ((v585 & 4) != 0)
                                {
                                  unint64_t v582 = v585 & 0xFFFFFFFFFFFFFFF8;
                                  if (v582)
                                  {
LABEL_999:
                                    v1877[0] = v1869;
                                    sub_1CC5FA668(v582 + 16, v1877);
                                  }
                                }
                              }
                              llvm::Value::setMetadata((uint64_t ***)v524, 8, v571);
                            }
                          }
                        }
LABEL_943:
                        BOOL v553 = sub_1CC9E8BD8((uint64_t)v524);
                        if (v553) {
                          v554 = v524;
                        }
                        else {
                          v554 = 0;
                        }
                        if (!mm) {
                          continue;
                        }
                        if (!v553) {
                          continue;
                        }
                        sub_1CD17AE90((unsigned __int8 **)v1869, v1836[1], v1836[3], *(void *)(*(void *)&v554[-32 * (*((_DWORD *)v554 + 5) & 0x7FFFFFF)] + 24));
                        v555 = *(unsigned __int8 **)v1869;
                        if (!*(void *)v1869) {
                          continue;
                        }
                        int v556 = **(unsigned char **)v1869;
                        if ((v556 - 4) > 0x1E)
                        {
                          if ((v556 - 3) >= 0xFFFFFFFE) {
                            uint64_t v573 = *(void *)v1869;
                          }
                          else {
                            uint64_t v573 = 0;
                          }
                          if ((v556 - 3) < 0xFFFFFFFE)
                          {
                            if (v556 == 3) {
                              *(void *)(*(void *)v1869 + 8) = 0;
                            }
                            goto LABEL_952;
                          }
                          unint64_t v574 = v573 + 8;
                        }
                        else
                        {
                          if ((*(unsigned char *)(*(void *)v1869 + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)v1869 + 12)) {
                            goto LABEL_952;
                          }
                          uint64_t v583 = *(void *)(*(void *)v1869 + 16);
                          if ((v583 & 4) == 0) {
                            goto LABEL_952;
                          }
                          unint64_t v574 = v583 & 0xFFFFFFFFFFFFFFF8;
                          if (!v574) {
                            goto LABEL_952;
                          }
                        }
                        v1877[0] = v1869;
                        sub_1CC5FA668(v574 + 16, v1877);
LABEL_952:
                        uint64_t v557 = llvm::MetadataAsValue::get(**(void **)v554, v555);
                        uint64_t v558 = *((_DWORD *)v554 + 5) & 0x7FFFFFF;
                        uint64_t v559 = -v558;
                        v560 = (uint64_t *)&v554[-32 * v558];
                        if (*v560)
                        {
                          v561 = &v554[32 * v559];
                          v563 = (void *)*((void *)v561 + 2);
                          v562 = v561 + 16;
                          void *v563 = *(v562 - 1);
                          uint64_t v564 = *(v562 - 1);
                          if (v564) {
                            *(void *)(v564 + 16) = *v562;
                          }
                        }
                        uint64_t *v560 = v557;
                        if (v557)
                        {
                          uint64_t v567 = *(void *)(v557 + 8);
                          v565 = (uint64_t **)(v557 + 8);
                          uint64_t v566 = v567;
                          v568 = &v554[32 * v559];
                          *((void *)v568 + 1) = v567;
                          if (v567) {
                            *(void *)(v566 + 16) = v568 + 8;
                          }
                          *((void *)v568 + 2) = v565;
                          *v565 = v560;
                        }
                      }
                      uint64_t v520 = *(void *)(v520 + 8);
                    }
                    while (v520 != v1795);
                  }
                  v586 = (void ***)a1;
                  if (byte_1EBCFC568)
                  {
                    v587 = *v306;
                    if (!v587 || *((unsigned char *)v587 + 16) || v587[3] != a1[9]) {
                      v587 = 0;
                    }
                    Impl = v1867;
                    uint64_t v1866 = 0x400000000;
                    uint64_t v588 = sub_1CB923B44((llvm::Function *)v587);
                    if (v588 != v589)
                    {
                      uint64_t v590 = v588;
                      uint64_t v591 = v589;
                      uint64_t v592 = v588;
                      do
                      {
                        if (llvm::CallBase::paramHasAttr((uint64_t)a1, *(_DWORD *)(v592 + 32), 19)
                          && *(void *)(v592 + 8))
                        {
                          if (v1866 >= (unint64_t)HIDWORD(v1866)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *((void *)Impl + v1866) = v590;
                          LODWORD(v1866) = v1866 + 1;
                        }
                        v592 += 40;
                        v590 += 40;
                      }
                      while (v592 != v591);
                    }
                    if (v1866)
                    {
                      *(void *)v1869 = &v1869[16];
                      *(void *)&v1869[8] = 0x100000000;
                      int v1876 = 0;
                      v1871 = 0;
                      v1870 = 0;
                      LODWORD(v1872) = 0;
                      char v1875 = 0;
                      uint64_t v1873 = 0;
                      v1874 = v587;
                      sub_1CC5A43B0((uint64_t)v1869, 0);
                      v1811[0] = 0;
                      v1811[1] = 0;
                      int v1812 = 0;
                      v593 = (uint64_t *)**v587;
                      v1810 = v593;
                      unsigned int v594 = v587 >> 4;
                      if ((*((unsigned char *)v587 + 23) & 0x10) != 0)
                      {
                        uint64_t v595 = *v593;
                        uint64_t v596 = *(void *)(*v593 + 152);
                        uint64_t v597 = *(unsigned int *)(v595 + 168);
                        if (v597)
                        {
                          LODWORD(v598) = (v597 - 1) & (v594 ^ (v587 >> 9));
                          v599 = (uint64_t ***)(v596 + 16 * v598);
                          v600 = *v599;
                          if (*v599 != v587)
                          {
                            int v601 = 1;
                            do
                            {
                              if (v600 == (uint64_t **)-4096) {
                                goto LABEL_1039;
                              }
                              int v602 = v598 + v601++;
                              uint64_t v598 = v602 & (v597 - 1);
                              v600 = *(uint64_t ***)(v596 + 16 * v598);
                            }
                            while (v600 != v587);
                            v599 = (uint64_t ***)(v596 + 16 * v598);
                          }
                        }
                        else
                        {
LABEL_1039:
                          v599 = (uint64_t ***)(v596 + 16 * v597);
                        }
                        v603 = v599[1];
                        size_t v606 = (size_t)*v603;
                        v604 = (unsigned __int8 *)(v603 + 2);
                        size_t v605 = v606;
                      }
                      else
                      {
                        size_t v605 = 0;
                        v604 = (unsigned __int8 *)&byte_1CFBCE98E;
                      }
                      v607 = llvm::MDBuilder::createAnonymousAARoot(&v1810, v604, v605, 0);
                      uint64_t v609 = v1866;
                      v1781 = v587;
                      if (v1866)
                      {
                        uint64_t v610 = (uint64_t)v607;
                        unint64_t v611 = 0;
                        v612 = v1858;
                        uint64_t v613 = v594 ^ (v587 >> 9);
                        v614 = &v1877[2];
                        while (1)
                        {
                          v1790 = (llvm::PointerType *)*((void *)Impl + v611);
                          if ((*((unsigned char *)v587 + 23) & 0x10) != 0) {
                            break;
                          }
                          std::string::size_type v624 = 0;
                          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
                          p_dst = &__dst;
LABEL_1060:
                          p_dst->__r_.__value_.__s.__data_[v624] = 0;
                          if ((*((unsigned char *)v1790 + 23) & 0x10) != 0)
                          {
                            std::string::append(&__dst, ": %");
                            v587 = v1781;
                            if ((*((unsigned char *)v1790 + 23) & 0x10) != 0)
                            {
                              uint64_t v639 = ***(void ***)v1790;
                              uint64_t v640 = *(void *)(v639 + 152);
                              uint64_t v641 = *(unsigned int *)(v639 + 168);
                              if (v641)
                              {
                                LODWORD(v642) = (v641 - 1) & ((v1790 >> 4) ^ (v1790 >> 9));
                                v643 = (llvm::PointerType **)(v640 + 16 * v642);
                                v644 = *v643;
                                if (*v643 != v1790)
                                {
                                  int v645 = 1;
                                  do
                                  {
                                    if (v644 == (llvm::PointerType *)-4096) {
                                      goto LABEL_1080;
                                    }
                                    int v646 = v642 + v645++;
                                    uint64_t v642 = v646 & (v641 - 1);
                                    v644 = *(llvm::PointerType **)(v640 + 16 * v642);
                                  }
                                  while (v644 != v1790);
                                  v643 = (llvm::PointerType **)(v640 + 16 * v642);
                                }
                              }
                              else
                              {
LABEL_1080:
                                v643 = (llvm::PointerType **)(v640 + 16 * v641);
                              }
                              v649 = v643[1];
                              std::string::size_type v652 = *(void *)v649;
                              v650 = (char *)v649 + 16;
                              std::string::size_type v651 = v652;
                            }
                            else
                            {
                              std::string::size_type v651 = 0;
                              v650 = &byte_1CFBCE98E;
                            }
                            std::string::append(&__dst, v650, v651);
                          }
                          else
                          {
                            std::string::append(&__dst, ": argument ");
                            v637 = v612;
                            unint64_t v638 = v611;
                            v587 = v1781;
                            if (v611)
                            {
                              do
                              {
                                *--v637 = (v638 % 0xA) | 0x30;
                                BOOL v182 = v638 > 9;
                                v638 /= 0xAuLL;
                              }
                              while (v182);
                            }
                            else
                            {
                              char v1857 = 48;
                              v637 = &v1857;
                            }
                            sub_1CC028D80(v1877, v637, v612, v612 - v637);
                            if (SHIBYTE(v1877[2]) >= 0) {
                              v647 = v1877;
                            }
                            else {
                              v647 = (void **)v1877[0];
                            }
                            if (SHIBYTE(v1877[2]) >= 0) {
                              std::string::size_type v648 = HIBYTE(v1877[2]) & 0x7F;
                            }
                            else {
                              std::string::size_type v648 = (std::string::size_type)v1877[1];
                            }
                            std::string::append(&__dst, (const std::string::value_type *)v647, v648);
                            if (SHIBYTE(v1877[2]) < 0) {
                              operator delete(v1877[0]);
                            }
                          }
                          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            v653 = &__dst;
                          }
                          else {
                            v653 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                          }
                          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            size_t size = *((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x7F;
                          }
                          else {
                            size_t size = __dst.__r_.__value_.__l.__size_;
                          }
                          v655 = llvm::MDBuilder::createAnonymousAARoot(&v1810, (unsigned __int8 *)v653, size, v610);
                          v1877[0] = v1790;
                          v1877[1] = v655;
                          v1854 = 0;
                          if ((sub_1CC1DE178(v1811[0], v1812, (uint64_t)v1790, &v1854) & 1) == 0)
                          {
                            v656 = sub_1CD17AF14((uint64_t)v1811, (uint64_t *)v1877, v1854);
                            void *v656 = v1790;
                            v656[1] = v655;
                          }
                          if (!byte_1EBCFC628) {
                            goto LABEL_1097;
                          }
                          uint64_t v657 = **v587;
                          v1877[0] = v655;
                          v658 = (unsigned __int8 *)llvm::MDTuple::getImpl(v657, v1877, 1, 0, 1);
                          v659 = 0;
                          uint64_t v660 = (uint64_t)**v586;
                          v1877[0] = v614;
                          v1877[1] = (void *)0x200000000;
                          uint64_t v1882 = v660;
                          v1883 = &v1891;
                          v1884 = v1892;
                          uint64_t v1885 = 0;
                          int v1886 = 0;
                          __int16 v1887 = 512;
                          char v1888 = 7;
                          uint64_t v1889 = 0;
                          uint64_t v1890 = 0;
                          v1891 = &unk_1F2616E88;
                          v1892[0] = &unk_1F2617008;
                          v661 = v586[6];
                          uint64_t v1880 = (uint64_t)v586[5];
                          v1881 = (void **)(a1 + 3);
                          v1851 = v661;
                          if (v661)
                          {
                            llvm::MetadataTracking::track((uint64_t)&v1851, (unsigned __int8 *)v661, 2);
                            v659 = v1851;
                          }
                          sub_1CB8461A4((uint64_t)v1877, 0, (uint64_t)v659);
                          if (v1851)
                          {
                            int v663 = *(unsigned __int8 *)v1851;
                            if ((v663 - 4) > 0x1E)
                            {
                              if ((v663 - 3) >= 0xFFFFFFFE) {
                                v666 = v1851;
                              }
                              else {
                                v666 = 0;
                              }
                              if ((v663 - 3) < 0xFFFFFFFE)
                              {
                                if (v663 == 3) {
                                  *((void *)v1851 + 1) = 0;
                                }
                                goto LABEL_1095;
                              }
                              unint64_t v665 = (unint64_t)v666 + 8;
LABEL_1114:
                              v1854 = &v1851;
                              sub_1CC5FA668(v665 + 16, &v1854);
                              goto LABEL_1095;
                            }
                            if ((*((unsigned char *)v1851 + 1) & 0x7F) == 2 || *((_DWORD *)v1851 + 3))
                            {
                              uint64_t v664 = *((void *)v1851 + 2);
                              if ((v664 & 4) != 0)
                              {
                                unint64_t v665 = v664 & 0xFFFFFFFFFFFFFFF8;
                                if (v665) {
                                  goto LABEL_1114;
                                }
                              }
                            }
                          }
LABEL_1095:
                          v662 = (llvm::Value *)llvm::MetadataAsValue::get(v1882, v658);
                          llvm::IRBuilderBase::CreateNoAliasScopeDeclaration((llvm::IRBuilderBase *)v1877, v662);
                          if (v1877[0] != v614) {
                            free(v1877[0]);
                          }
LABEL_1097:
                          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(__dst.__r_.__value_.__l.__data_);
                          }
                          if (++v611 == v609) {
                            goto LABEL_1117;
                          }
                        }
                        uint64_t v615 = *(void *)**v587;
                        uint64_t v616 = *(void *)(v615 + 152);
                        uint64_t v617 = *(unsigned int *)(v615 + 168);
                        if (v617)
                        {
                          LODWORD(v618) = (v617 - 1) & v613;
                          v619 = (uint64_t ***)(v616 + 16 * v618);
                          v620 = *v619;
                          if (*v619 != v587)
                          {
                            int v621 = 1;
                            do
                            {
                              if (v620 == (uint64_t **)-4096) {
                                goto LABEL_1050;
                              }
                              int v622 = v618 + v621++;
                              uint64_t v618 = v622 & (v617 - 1);
                              v620 = *(uint64_t ***)(v616 + 16 * v618);
                            }
                            while (v620 != v587);
                            v619 = (uint64_t ***)(v616 + 16 * v618);
                          }
                        }
                        else
                        {
LABEL_1050:
                          v619 = (uint64_t ***)(v616 + 16 * v617);
                        }
                        v623 = (unint64_t *)v619[1];
                        unint64_t v626 = *v623;
                        v625 = v623 + 2;
                        std::string::size_type v624 = v626;
                        if (v626 >= 0x7FFFFFFFFFFFFFF8) {
                          goto LABEL_2796;
                        }
                        if (v624 >= 0x17)
                        {
                          uint64_t v628 = (v624 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v624 | 7) != 0x17) {
                            uint64_t v628 = v624 | 7;
                          }
                          unint64_t v629 = v611;
                          uint64_t v630 = v613;
                          v631 = v614;
                          v632 = v612;
                          uint64_t v633 = v609;
                          uint64_t v634 = v610;
                          uint64_t v635 = v628 + 1;
                          p_dst = (std::string *)operator new(v628 + 1);
                          unint64_t v636 = v635 | 0x8000000000000000;
                          uint64_t v610 = v634;
                          uint64_t v609 = v633;
                          v612 = v632;
                          v614 = v631;
                          uint64_t v613 = v630;
                          unint64_t v611 = v629;
                          __dst.__r_.__value_.__r.__words[2] = v636;
                          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
                          __dst.__r_.__value_.__l.__size_ = v624;
                        }
                        else
                        {
                          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v624;
                          p_dst = &__dst;
                          if (!v624) {
                            goto LABEL_1059;
                          }
                        }
                        memmove(p_dst, v625, v624);
LABEL_1059:
                        v586 = (void ***)a1;
                        goto LABEL_1060;
                      }
LABEL_1117:
                      v667 = (char *)v1837 + 64 * (unint64_t)v1839;
                      if (v1838[0])
                      {
                        if (v1839)
                        {
                          unint64_t v668 = (unint64_t)v1839 << 6;
                          v669 = (char *)v1837;
                          while ((*((void *)v669 + 3) | 0x1000) == 0xFFFFFFFFFFFFF000)
                          {
                            v669 += 64;
                            v668 -= 64;
                            if (!v668) {
                              goto LABEL_1122;
                            }
                          }
                        }
                        else
                        {
                          v669 = (char *)v1837;
                        }
                      }
                      else
                      {
LABEL_1122:
                        v669 = (char *)v1837 + 64 * (unint64_t)v1839;
                      }
                      v670 = (char *)v1837 + 64 * (unint64_t)v1839;
                      if (v669 != v670)
                      {
                        int64x2_t v1716 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
                        v1720 = (char *)v1837 + 64 * (unint64_t)v1839;
                        do
                        {
                          uint64_t v671 = *((void *)v669 + 3);
                          int v672 = *(unsigned __int8 *)(v671 + 16);
                          if (v671) {
                            BOOL v673 = v672 >= 0x1C;
                          }
                          else {
                            BOOL v673 = 0;
                          }
                          if (!v673) {
                            goto LABEL_1359;
                          }
                          v674 = (unsigned char *)*((void *)v669 + 7);
                          if (!v674 || v674[16] < 0x1Cu) {
                            goto LABEL_1359;
                          }
                          if (LODWORD(v1805[3]))
                          {
                            uint64_t v675 = (LODWORD(v1805[3]) - 1) & ((v671 >> 4) ^ (v671 >> 9));
                            uint64_t v676 = *(void *)(v1805[1] + 16 * v675);
                            if (v671 == v676)
                            {
LABEL_1134:
                              v677 = *(unsigned char **)(v1805[1] + 16 * v675 + 8);
                            }
                            else
                            {
                              int v800 = 1;
                              while (v676 != -4096)
                              {
                                int v801 = v675 + v800++;
                                uint64_t v675 = v801 & (LODWORD(v1805[3]) - 1);
                                uint64_t v676 = *(void *)(v1805[1] + 16 * v675);
                                v670 = v1720;
                                if (v671 == v676) {
                                  goto LABEL_1134;
                                }
                              }
                              v677 = 0;
                              v670 = v1720;
                            }
                          }
                          else
                          {
                            v677 = 0;
                          }
                          if (v677 != v674) {
                            goto LABEL_1359;
                          }
                          v1862 = v1864;
                          uint64_t v1863 = 0x200000000;
                          if (v672 > 59)
                          {
                            switch(v672)
                            {
                              case '<':
                              case '=':
                                goto LABEL_1145;
                              case '>':
                              case '?':
                                goto LABEL_1356;
                              case '@':
                                BOOL v1747 = 0;
                                int v1733 = 0;
                                uint64_t v678 = *(void *)(v671 - 96);
                                goto LABEL_1154;
                              case 'A':
                                BOOL v1747 = 0;
                                int v1733 = 0;
                                uint64_t v678 = *(void *)(v671 - 64);
                                goto LABEL_1154;
                              default:
                                if (v672 == 84) {
                                  goto LABEL_1146;
                                }
                                if (v672 != 88) {
                                  goto LABEL_1356;
                                }
LABEL_1145:
                                BOOL v1747 = 0;
                                int v1733 = 0;
                                uint64_t v678 = *(void *)(v671 - 32);
LABEL_1154:
                                v1864[0] = v678;
                                LODWORD(v1863) = 1;
                                uint64_t v682 = 1;
                                break;
                            }
                            goto LABEL_1155;
                          }
                          if (v672 == 33 || v672 == 39)
                          {
LABEL_1146:
                            uint64_t v679 = *(void *)(v671 + 64);
                            if (!v679 || (*(unsigned char *)(v679 + 17) & 0x10) == 0)
                            {
                              if ((LODWORD(v1877[0]) = 7, sub_1CC5CB59C(v671, (__int32 *)v1877, 1uLL))
                                && ((uint64_t v802 = *(void *)(v671 - 32)) == 0
                                 || *(unsigned char *)(v802 + 16)
                                 || *(void *)(v802 + 24) != *(void *)(v671 + 72)
                                 || *(_DWORD *)(v802 + 36) != 7)
                                || (llvm::CallBase::hasFnAttrOnCalledFunction(v671, 44) & 1) == 0)
                              {
                                if (!v1731)
                                {
                                  BOOL v681 = 0;
LABEL_1367:
                                  int v788 = *(unsigned __int8 *)(v671 + 16);
                                  if (v788 == 84)
                                  {
                                    uint64_t v789 = 0;
                                  }
                                  else if (v788 == 39)
                                  {
                                    uint64_t v789 = (*(_DWORD *)(v671 + 80) + 1);
                                  }
                                  else
                                  {
                                    uint64_t v789 = 2;
                                  }
                                  int v790 = *(_DWORD *)(v671 + 20);
                                  uint64_t v791 = v790 & 0x7FFFFFF;
                                  v792 = (void *)(v671 - 32 * v791);
                                  if (v790 < 0)
                                  {
                                    uint64_t v803 = *(v792 - 1);
                                    if ((v803 & 0xFFFFFFFF0) != 0) {
                                      uint64_t v793 = (*((_DWORD *)v792 - 3) - *(_DWORD *)((char *)v792 - v803));
                                    }
                                    else {
                                      uint64_t v793 = 0;
                                    }
                                  }
                                  else
                                  {
                                    uint64_t v793 = 0;
                                  }
                                  if (v792 != (void *)(v671 - 32 * v789 - 32 * v793 - 32))
                                  {
                                    uint64_t v794 = 32 * v791 - 32 * v789 - 32 * v793 - 32;
                                    do
                                    {
                                      uint64_t v795 = *v792;
                                      if (!v681 || *(unsigned char *)(*(void *)v795 + 8) == 15)
                                      {
                                        if (v1863 >= (unint64_t)HIDWORD(v1863)) {
                                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                                        }
                                        *((void *)v1862 + v1863) = v795;
                                        LODWORD(v1863) = v1863 + 1;
                                      }
                                      v792 += 4;
                                      v794 -= 32;
                                    }
                                    while (v794);
                                  }
                                  BOOL v1747 = v681;
                                  uint64_t v682 = v1863;
                                  int v1733 = 1;
LABEL_1155:
                                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v1861;
                                  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v1861;
                                  __dst.__r_.__value_.__r.__words[2] = 4;
                                  LODWORD(v1860) = 0;
                                  v1854 = v1856;
                                  uint64_t v1855 = 0x400000000;
                                  v1851 = v1853;
                                  uint64_t v1852 = 0x400000000;
                                  v1877[0] = (void *)1;
                                  *(int64x2_t *)&v1877[1] = v1716;
                                  int64x2_t v1878 = v1716;
                                  v1879 = &v1881;
                                  uint64_t v1880 = 0x400000000;
                                  if (v682)
                                  {
                                    v683 = (uint64_t *)v1862;
                                    v684 = (uint64_t *)((char *)v1862 + 8 * v682);
                                    while (1)
                                    {
                                      uint64_t v685 = *v683;
                                      v1845 = &v1847;
                                      uint64_t v1846 = 0x400000000;
                                      llvm::getUnderlyingObjects(v685, (uint64_t)&v1845, 0, (llvm::Value *)6);
                                      v686 = (char *)v1845;
                                      if (!v1846) {
                                        goto LABEL_1199;
                                      }
                                      v687 = (char *)v1845 + 8 * v1846;
                                      std::string::size_type v688 = __dst.__r_.__value_.__l.__size_;
                                      do
                                      {
                                        uint64_t v689 = *(void *)v686;
                                        uint64_t v690 = HIDWORD(__dst.__r_.__value_.__r.__words[2]);
                                        if (v688 == __dst.__r_.__value_.__r.__words[0])
                                        {
                                          if (HIDWORD(__dst.__r_.__value_.__r.__words[2]))
                                          {
                                            v691 = 0;
                                            uint64_t v692 = 8 * HIDWORD(__dst.__r_.__value_.__r.__words[2]);
                                            v693 = (void *)v688;
                                            do
                                            {
                                              if (*v693 == v689) {
                                                goto LABEL_1191;
                                              }
                                              if (*v693 == -2) {
                                                v691 = v693;
                                              }
                                              ++v693;
                                              v692 -= 8;
                                            }
                                            while (v692);
                                            if (v691)
                                            {
                                              void *v691 = v689;
                                              LODWORD(v1860) = v1860 - 1;
                                              goto LABEL_1191;
                                            }
                                          }
                                          v608 = (const llvm::Value *)LODWORD(__dst.__r_.__value_.__r.__words[2]);
                                          if (HIDWORD(__dst.__r_.__value_.__r.__words[2]) < LODWORD(__dst.__r_.__value_.__r.__words[2]))
                                          {
                                            ++HIDWORD(__dst.__r_.__value_.__r.__words[2]);
                                            *(void *)(v688 + 8 * v690) = v689;
                                            goto LABEL_1191;
                                          }
                                        }
                                        else
                                        {
                                          v608 = (const llvm::Value *)LODWORD(__dst.__r_.__value_.__r.__words[2]);
                                        }
                                        if (3 * (int)v608 <= (4
                                                                           * (HIDWORD(__dst.__r_.__value_.__r.__words[2])
                                                                            - v1860)))
                                        {
                                          if (v608 >= 0x40) {
                                            LODWORD(v608) = 2 * v608;
                                          }
                                          else {
                                            LODWORD(v608) = 128;
                                          }
                                        }
                                        else if ((int)v608 - HIDWORD(__dst.__r_.__value_.__r.__words[2]) >= v608 >> 3)
                                        {
                                          goto LABEL_1172;
                                        }
                                        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&__dst, v608);
                                        v608 = (const llvm::Value *)LODWORD(__dst.__r_.__value_.__r.__words[2]);
                                        std::string::size_type v688 = __dst.__r_.__value_.__l.__size_;
LABEL_1172:
                                        int v694 = v608 - 1;
                                        unsigned int v695 = (v608 - 1) & ((v689 >> 4) ^ (v689 >> 9));
                                        v696 = (void *)(v688 + 8 * v695);
                                        uint64_t v697 = *v696;
                                        if (*v696 == -1)
                                        {
                                          v698 = 0;
LABEL_1184:
                                          if (v698) {
                                            v702 = v698;
                                          }
                                          else {
                                            v702 = v696;
                                          }
                                          if (*v702 != v689)
                                          {
                                            if (*v702 == -2) {
                                              LODWORD(v1860) = v1860 - 1;
                                            }
                                            else {
                                              ++HIDWORD(__dst.__r_.__value_.__r.__words[2]);
                                            }
                                            void *v702 = v689;
                                          }
                                        }
                                        else
                                        {
                                          v698 = 0;
                                          int v699 = 1;
                                          while (v697 != v689)
                                          {
                                            if (v698) {
                                              BOOL v700 = 0;
                                            }
                                            else {
                                              BOOL v700 = v697 == -2;
                                            }
                                            if (v700) {
                                              v698 = v696;
                                            }
                                            unsigned int v701 = v695 + v699++;
                                            unsigned int v695 = v701 & v694;
                                            v696 = (void *)(v688 + 8 * (v701 & v694));
                                            uint64_t v697 = *v696;
                                            if (*v696 == -1) {
                                              goto LABEL_1184;
                                            }
                                          }
                                        }
LABEL_1191:
                                        std::string::size_type v688 = __dst.__r_.__value_.__l.__size_;
                                        v686 += 8;
                                      }
                                      while (v686 != v687);
                                      v686 = (char *)v1845;
LABEL_1199:
                                      if (v686 != (char *)&v1847) {
                                        free(v686);
                                      }
                                      if (++v683 == v684)
                                      {
                                        v703 = (unint64_t *)__dst.__r_.__value_.__l.__size_;
                                        v704 = (unint64_t *)__dst.__r_.__value_.__r.__words[0];
                                        LODWORD(v705) = HIDWORD(__dst.__r_.__value_.__r.__words[2]);
                                        unsigned int v706 = __dst.__r_.__value_.__r.__words[2];
                                        goto LABEL_1204;
                                      }
                                    }
                                  }
                                  LODWORD(v705) = 0;
                                  unsigned int v706 = 4;
                                  v704 = v1861;
                                  v703 = v1861;
LABEL_1204:
                                  if (v703 == v704) {
                                    uint64_t v705 = v705;
                                  }
                                  else {
                                    uint64_t v705 = v706;
                                  }
                                  v707 = v703;
                                  if (v705)
                                  {
                                    uint64_t v708 = 8 * v705;
                                    v707 = v703;
                                    do
                                    {
                                      if (*v707 < 0xFFFFFFFFFFFFFFFELL) {
                                        goto LABEL_1212;
                                      }
                                      ++v707;
                                      v708 -= 8;
                                    }
                                    while (v708);
                                    LOBYTE(v709) = 0;
                                    LOBYTE(v710) = 0;
                                  }
                                  else
                                  {
LABEL_1212:
                                    v711 = &v703[v705];
                                    if (v707 != v711)
                                    {
                                      int v710 = 0;
                                      int v709 = 0;
                                      unint64_t v712 = *v707;
                                      while (1)
                                      {
                                        unsigned int v713 = *(unsigned __int8 *)(v712 + 16);
                                        BOOL v714 = v713 > 0x13 || ((1 << v713) & 0xB8000) == 0;
                                        if (v714 && v713 - 11 >= 2)
                                        {
                                          if (v713 == 21)
                                          {
                                            v710 |= llvm::CallBase::paramHasAttr((uint64_t)a1, *(_DWORD *)(v712 + 32), 19) ^ 1;
                                            unsigned int v713 = *(unsigned __int8 *)(v712 + 16);
                                          }
                                          else
                                          {
                                            int v710 = 1;
                                          }
                                          if (v713 != 21) {
                                            v709 |= llvm::isIdentifiedFunctionLocal((llvm *)v712, v608) ^ 1;
                                          }
                                        }
                                        v715 = v707 + 1;
                                        do
                                        {
                                          if (v715 == v711) {
                                            goto LABEL_1229;
                                          }
                                          unint64_t v716 = *v715++;
                                          unint64_t v712 = v716;
                                        }
                                        while (v716 > 0xFFFFFFFFFFFFFFFDLL);
                                        v707 = v715 - 1;
                                      }
                                    }
                                    LOBYTE(v709) = 0;
                                    LOBYTE(v710) = 0;
                                  }
LABEL_1229:
                                  if (v1866)
                                  {
                                    char v717 = v1733 & !v1747 | v709;
                                    v718 = (llvm **)Impl;
                                    v719 = (llvm **)((char *)Impl + 8 * v1866);
                                    do
                                    {
                                      v720 = *v718;
                                      v1809 = *v718;
                                      std::string::size_type v721 = __dst.__r_.__value_.__r.__words[0];
                                      if (__dst.__r_.__value_.__l.__size_ == __dst.__r_.__value_.__r.__words[0])
                                      {
                                        unsigned int v722 = HIDWORD(__dst.__r_.__value_.__r.__words[2]);
                                        v723 = (llvm **)(__dst.__r_.__value_.__l.__size_
                                                       + 8 * HIDWORD(__dst.__r_.__value_.__r.__words[2]));
                                        if (HIDWORD(__dst.__r_.__value_.__r.__words[2]))
                                        {
                                          uint64_t v724 = 0;
                                          while (*(llvm **)(__dst.__r_.__value_.__l.__size_ + v724) != v720)
                                          {
                                            v724 += 8;
                                            if (8 * HIDWORD(__dst.__r_.__value_.__r.__words[2]) == v724) {
                                              goto LABEL_1250;
                                            }
                                          }
                                          v723 = (llvm **)(__dst.__r_.__value_.__l.__size_ + v724);
                                        }
LABEL_1250:
                                        std::string::size_type v721 = __dst.__r_.__value_.__l.__size_;
                                      }
                                      else
                                      {
                                        int v725 = LODWORD(__dst.__r_.__value_.__r.__words[2]) - 1;
                                        unsigned int v726 = (LODWORD(__dst.__r_.__value_.__r.__words[2]) - 1) & ((v720 >> 4) ^ (v720 >> 9));
                                        v723 = (llvm **)(__dst.__r_.__value_.__l.__size_ + 8 * v726);
                                        v727 = *v723;
                                        if (*v723 == (llvm *)-1)
                                        {
                                          v728 = 0;
LABEL_1262:
                                          if (v728) {
                                            v723 = v728;
                                          }
                                          unsigned int v722 = HIDWORD(__dst.__r_.__value_.__r.__words[2]);
                                          if (*v723 != v720) {
                                            v723 = (llvm **)(__dst.__r_.__value_.__l.__size_
                                          }
                                                           + 8 * LODWORD(__dst.__r_.__value_.__r.__words[2]));
                                        }
                                        else
                                        {
                                          v728 = 0;
                                          int v729 = 1;
                                          while (v727 != v720)
                                          {
                                            if (v728) {
                                              BOOL v730 = 0;
                                            }
                                            else {
                                              BOOL v730 = v727 == (llvm *)-2;
                                            }
                                            if (v730) {
                                              v728 = v723;
                                            }
                                            unsigned int v731 = v726 + v729++;
                                            unsigned int v726 = v731 & v725;
                                            v723 = (llvm **)(__dst.__r_.__value_.__l.__size_ + 8 * (v731 & v725));
                                            v727 = *v723;
                                            if (*v723 == (llvm *)-1) {
                                              goto LABEL_1262;
                                            }
                                          }
                                          unsigned int v722 = HIDWORD(__dst.__r_.__value_.__r.__words[2]);
                                        }
                                      }
                                      if (__dst.__r_.__value_.__l.__size_ == v721) {
                                        unsigned int v732 = v722;
                                      }
                                      else {
                                        unsigned int v732 = __dst.__r_.__value_.__r.__words[2];
                                      }
                                      if (v723 == (llvm **)(__dst.__r_.__value_.__l.__size_ + 8 * v732))
                                      {
                                        if ((v717 & 1) == 0
                                          || (v1845 = &unk_1F2601EF8,
                                              uint64_t v1846 = v671,
                                              v1847 = v1869,
                                              __int16 v1848 = 0,
                                              char v1849 = 0,
                                              uint64_t v1850 = 0,
                                              llvm::PointerMayBeCaptured(v720, (const llvm::Value *)&v1845, 0),
                                              !v1849))
                                        {
                                          uint64_t v733 = sub_1CD17B098((uint64_t)v1811, (uint64_t *)&v1809)[1];
                                          if (v1852 >= (unint64_t)HIDWORD(v1852)) {
                                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                                          }
                                          *((void *)v1851 + v1852) = v733;
                                          LODWORD(v1852) = v1852 + 1;
                                        }
                                      }
                                      ++v718;
                                    }
                                    while (v718 != v719);
                                  }
                                  if (v1852)
                                  {
                                    if ((v674[23] & 0x20) == 0) {
                                      goto LABEL_1285;
                                    }
                                    uint64_t v734 = ***(void ***)v674;
                                    v1845 = v674;
                                    int v735 = *(_DWORD *)(v734 + 2496);
                                    if (!v735)
                                    {
                                      v796 = 0;
                                      goto LABEL_1386;
                                    }
                                    uint64_t v736 = *(void *)(v734 + 2480);
                                    int v737 = v735 - 1;
                                    unsigned int v738 = v737 & ((v674 >> 4) ^ (v674 >> 9));
                                    v739 = (void *)(v736 + 40 * v738);
                                    v740 = (unsigned char *)*v739;
                                    if ((unsigned char *)*v739 != v674)
                                    {
                                      v741 = 0;
                                      int v742 = 1;
                                      while (v740 != (unsigned char *)-4096)
                                      {
                                        if (v741) {
                                          BOOL v743 = 0;
                                        }
                                        else {
                                          BOOL v743 = v740 == (unsigned char *)-8192;
                                        }
                                        if (v743) {
                                          v741 = v739;
                                        }
                                        unsigned int v744 = v738 + v742++;
                                        unsigned int v738 = v744 & v737;
                                        v739 = (void *)(v736 + 40 * v738);
                                        v740 = (unsigned char *)*v739;
                                        if ((unsigned char *)*v739 == v674) {
                                          goto LABEL_1280;
                                        }
                                      }
                                      if (v741) {
                                        v796 = v741;
                                      }
                                      else {
                                        v796 = v739;
                                      }
LABEL_1386:
                                      v739 = sub_1CC609054(v734 + 2480, (uint64_t)&v1845, (uint64_t *)&v1845, v796);
                                      v797 = v1845;
                                      v739[4] = 0;
                                      v739[3] = 0;
                                      void *v739 = v797;
                                      v739[1] = v739 + 3;
                                      v739[2] = 0x100000000;
                                    }
LABEL_1280:
                                    uint64_t v745 = *((unsigned int *)v739 + 4);
                                    if (v745)
                                    {
                                      v746 = (llvm::MDNode **)(v739[1] + 8);
                                      uint64_t v747 = 16 * v745;
                                      while (*((_DWORD *)v746 - 2) != 8)
                                      {
                                        v748 = 0;
                                        v746 += 2;
                                        v747 -= 16;
                                        if (!v747) {
                                          goto LABEL_1286;
                                        }
                                      }
                                      v748 = *v746;
                                    }
                                    else
                                    {
LABEL_1285:
                                      v748 = 0;
                                    }
LABEL_1286:
                                    v749 = llvm::MDTuple::getImpl(**v1781, v1851, v1852, 0, 1);
                                    v751 = llvm::MDNode::concatenate(v748, v749, v750);
                                    llvm::Instruction::setMetadata((llvm::Instruction *)v674, 8, v751);
                                  }
                                  char v752 = v1747;
                                  if (!v1733) {
                                    char v752 = v710 ^ 1;
                                  }
                                  if ((v752 & 1) != 0 && ((v710 ^ 1) & 1) != 0 && v1866)
                                  {
                                    v753 = (void **)Impl;
                                    v754 = (void **)((char *)Impl + 8 * v1866);
                                    do
                                    {
                                      v755 = *v753;
                                      v1845 = *v753;
                                      std::string::size_type v756 = __dst.__r_.__value_.__r.__words[0];
                                      if (__dst.__r_.__value_.__l.__size_ == __dst.__r_.__value_.__r.__words[0])
                                      {
                                        unsigned int v757 = HIDWORD(__dst.__r_.__value_.__r.__words[2]);
                                        v758 = (void **)(__dst.__r_.__value_.__l.__size_
                                                       + 8 * HIDWORD(__dst.__r_.__value_.__r.__words[2]));
                                        if (HIDWORD(__dst.__r_.__value_.__r.__words[2]))
                                        {
                                          uint64_t v759 = 0;
                                          while (*(void **)(__dst.__r_.__value_.__l.__size_ + v759) != v755)
                                          {
                                            v759 += 8;
                                            if (8 * HIDWORD(__dst.__r_.__value_.__r.__words[2]) == v759) {
                                              goto LABEL_1312;
                                            }
                                          }
                                          v758 = (void **)(__dst.__r_.__value_.__l.__size_ + v759);
                                        }
LABEL_1312:
                                        std::string::size_type v756 = __dst.__r_.__value_.__l.__size_;
                                      }
                                      else
                                      {
                                        int v760 = LODWORD(__dst.__r_.__value_.__r.__words[2]) - 1;
                                        unsigned int v761 = (LODWORD(__dst.__r_.__value_.__r.__words[2]) - 1) & ((v755 >> 4) ^ (v755 >> 9));
                                        v758 = (void **)(__dst.__r_.__value_.__l.__size_ + 8 * v761);
                                        v762 = *v758;
                                        if (*v758 == (void *)-1)
                                        {
                                          v763 = 0;
LABEL_1321:
                                          if (v763) {
                                            v758 = v763;
                                          }
                                          unsigned int v757 = HIDWORD(__dst.__r_.__value_.__r.__words[2]);
                                          if (*v758 != v755) {
                                            v758 = (void **)(__dst.__r_.__value_.__l.__size_
                                          }
                                                           + 8 * LODWORD(__dst.__r_.__value_.__r.__words[2]));
                                        }
                                        else
                                        {
                                          v763 = 0;
                                          int v764 = 1;
                                          while (v762 != v755)
                                          {
                                            if (v763) {
                                              BOOL v765 = 0;
                                            }
                                            else {
                                              BOOL v765 = v762 == (void *)-2;
                                            }
                                            if (v765) {
                                              v763 = v758;
                                            }
                                            unsigned int v766 = v761 + v764++;
                                            unsigned int v761 = v766 & v760;
                                            v758 = (void **)(__dst.__r_.__value_.__l.__size_ + 8 * (v766 & v760));
                                            v762 = *v758;
                                            if (*v758 == (void *)-1) {
                                              goto LABEL_1321;
                                            }
                                          }
                                          unsigned int v757 = HIDWORD(__dst.__r_.__value_.__r.__words[2]);
                                        }
                                      }
                                      unsigned int v767 = __dst.__r_.__value_.__r.__words[2];
                                      if (__dst.__r_.__value_.__l.__size_ == v756) {
                                        unsigned int v767 = v757;
                                      }
                                      if (v758 != (void **)(__dst.__r_.__value_.__l.__size_ + 8 * v767))
                                      {
                                        uint64_t v768 = sub_1CD17B098((uint64_t)v1811, (uint64_t *)&v1845)[1];
                                        if (v1855 >= (unint64_t)HIDWORD(v1855)) {
                                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                                        }
                                        *((void *)v1854 + v1855) = v768;
                                        LODWORD(v1855) = v1855 + 1;
                                      }
                                      ++v753;
                                    }
                                    while (v753 != v754);
                                  }
                                  if (v1855)
                                  {
                                    if ((v674[23] & 0x20) == 0) {
                                      goto LABEL_1344;
                                    }
                                    uint64_t v769 = ***(void ***)v674;
                                    v1845 = v674;
                                    int v770 = *(_DWORD *)(v769 + 2496);
                                    if (!v770)
                                    {
                                      v798 = 0;
                                      goto LABEL_1390;
                                    }
                                    uint64_t v771 = *(void *)(v769 + 2480);
                                    int v772 = v770 - 1;
                                    unsigned int v773 = v772 & ((v674 >> 4) ^ (v674 >> 9));
                                    v774 = (void *)(v771 + 40 * v773);
                                    v775 = (unsigned char *)*v774;
                                    if ((unsigned char *)*v774 != v674)
                                    {
                                      v776 = 0;
                                      int v777 = 1;
                                      while (v775 != (unsigned char *)-4096)
                                      {
                                        if (v776) {
                                          BOOL v778 = 0;
                                        }
                                        else {
                                          BOOL v778 = v775 == (unsigned char *)-8192;
                                        }
                                        if (v778) {
                                          v776 = v774;
                                        }
                                        unsigned int v779 = v773 + v777++;
                                        unsigned int v773 = v779 & v772;
                                        v774 = (void *)(v771 + 40 * v773);
                                        v775 = (unsigned char *)*v774;
                                        if ((unsigned char *)*v774 == v674) {
                                          goto LABEL_1339;
                                        }
                                      }
                                      if (v776) {
                                        v798 = v776;
                                      }
                                      else {
                                        v798 = v774;
                                      }
LABEL_1390:
                                      v774 = sub_1CC609054(v769 + 2480, (uint64_t)&v1845, (uint64_t *)&v1845, v798);
                                      v799 = v1845;
                                      v774[4] = 0;
                                      v774[3] = 0;
                                      void *v774 = v799;
                                      v774[1] = v774 + 3;
                                      v774[2] = 0x100000000;
                                    }
LABEL_1339:
                                    uint64_t v780 = *((unsigned int *)v774 + 4);
                                    if (v780)
                                    {
                                      v781 = (llvm::MDNode **)(v774[1] + 8);
                                      uint64_t v782 = 16 * v780;
                                      while (*((_DWORD *)v781 - 2) != 7)
                                      {
                                        v783 = 0;
                                        v781 += 2;
                                        v782 -= 16;
                                        if (!v782) {
                                          goto LABEL_1345;
                                        }
                                      }
                                      v783 = *v781;
                                    }
                                    else
                                    {
LABEL_1344:
                                      v783 = 0;
                                    }
LABEL_1345:
                                    v784 = llvm::MDTuple::getImpl(**v1781, v1854, v1855, 0, 1);
                                    v786 = llvm::MDNode::concatenate(v783, v784, v785);
                                    llvm::Instruction::setMetadata((llvm::Instruction *)v674, 7, v786);
                                  }
                                  if (v1879 != &v1881) {
                                    free(v1879);
                                  }
                                  if (((uint64_t)v1877[0] & 1) == 0) {
                                    MEMORY[0x1D25D9CD0](v1877[1], 8);
                                  }
                                  if (v1851 != v1853) {
                                    free(v1851);
                                  }
                                  if (v1854 != v1856) {
                                    free(v1854);
                                  }
                                  if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0]) {
                                    free((void *)__dst.__r_.__value_.__l.__size_);
                                  }
                                  goto LABEL_1356;
                                }
                                char ModRefBehavior = llvm::AAResults::getModRefBehavior(v1731, v671);
                                BOOL v681 = (ModRefBehavior & 0x38) == 8;
                                if ((ModRefBehavior & 0x28) != 0) {
                                  goto LABEL_1367;
                                }
                              }
                            }
                          }
LABEL_1356:
                          if (v1862 != v1864) {
                            free(v1862);
                          }
                          v670 = v1720;
LABEL_1359:
                          v787 = v669 + 64;
                          v669 = v667;
                          if (v787 != v667)
                          {
                            v669 = v787;
                            do
                            {
                              if ((*((void *)v669 + 3) | 0x1000) != 0xFFFFFFFFFFFFF000) {
                                goto LABEL_1364;
                              }
                              v669 += 64;
                            }
                            while (v669 != v667);
                            v669 = v667;
                          }
LABEL_1364:
                          ;
                        }
                        while (v669 != v670);
                      }
                      MEMORY[0x1D25D9CD0](v1811[0], 8);
                      sub_1CBF8FF88((uint64_t *)&v1870);
                      if (*(unsigned char **)v1869 != &v1869[16]) {
                        free(*(void **)v1869);
                      }
                      v586 = (void ***)a1;
                    }
                    if (Impl != v1867) {
                      free(Impl);
                    }
                  }
                  if (byte_1EBCFC7A8)
                  {
                    v804 = v586[8];
                    if (v804 && *((_DWORD *)v804 + 2) > 1u)
                    {
                      v1336 = (char *)v804[6];
                      v1877[0] = **v586;
                      v1877[1] = &v1878;
                      v1877[2] = (void *)0x800000000;
                      if (v1336)
                      {
                        v805 = v1336 + 48;
                        v806 = &v1336[8 * *((unsigned int *)v1336 + 2) + 48];
                      }
                      else
                      {
                        v805 = 0;
                        v806 = 0;
                      }
                    }
                    else
                    {
                      v805 = 0;
                      v806 = 0;
                      v1877[0] = **v586;
                      v1877[1] = &v1878;
                      v1877[2] = (void *)0x800000000;
                    }
                    sub_1CC512940((uint64_t)&v1877[1], (uint64_t)&v1878, v805, v806);
                    if (LODWORD(v1877[2]))
                    {
                      *(void *)v1869 = **v586;
                      *(void *)&v1869[8] = &v1870;
                      *(void *)&v1869[16] = 0x800000000;
                      uint64_t Attribute = llvm::AttrBuilder::getAttribute((uint64_t)v1877, 76);
                      if (Attribute)
                      {
                        uint64_t v1634 = *(void *)(Attribute + 16);
                        if (v1634) {
                          llvm::AttrBuilder::addDereferenceableAttr((llvm::AttrBuilder *)v1869, v1634);
                        }
                      }
                      uint64_t v808 = llvm::AttrBuilder::getAttribute((uint64_t)v1877, 77);
                      if (v808)
                      {
                        uint64_t v1635 = *(void *)(v808 + 16);
                        if (v1635) {
                          llvm::AttrBuilder::addDereferenceableOrNullAttr((uint64_t **)v1869, v1635);
                        }
                      }
                      if (llvm::AttrBuilder::getAttribute((uint64_t)v1877, 19))
                      {
                        unint64_t v809 = llvm::Attribute::get(*(uint64_t **)v1869, 0x13u, 0);
                        sub_1CC50F4B4((unsigned int *)&v1869[8], 19, v809);
                      }
                      if (llvm::AttrBuilder::getAttribute((uint64_t)v1877, 39))
                      {
                        unint64_t v810 = llvm::Attribute::get(*(uint64_t **)v1869, 0x27u, 0);
                        sub_1CC50F4B4((unsigned int *)&v1869[8], 39, v810);
                      }
                    }
                    else
                    {
                      *(void **)v1869 = v1877[0];
                      *(void *)&v1869[8] = &v1870;
                      *(void *)&v1869[16] = 0x800000000;
                    }
                    if (v1877[1] != &v1878) {
                      free(v1877[1]);
                    }
                    if (*(_DWORD *)&v1869[16])
                    {
                      uint64_t v811 = (uint64_t)(*v1771 + 9);
                      v812 = (*v1771)[10];
                      if (v812 != (llvm::LLVMContext **)v811)
                      {
                        v813 = ***v1771;
                        while (1)
                        {
                          v814 = v812 - 3;
                          if (!v812) {
                            v814 = 0;
                          }
                          v815 = (llvm::LLVMContext **)v814[5];
                          if (v815 != v814 + 5)
                          {
                            v816 = v815 - 3;
                            if (!v815) {
                              v816 = 0;
                            }
                            unsigned int v817 = *((unsigned __int8 *)v816 + 16) - 40;
                            if (v817 < 0xFFFFFFF5) {
                              v816 = 0;
                            }
                            if (v815)
                            {
                              if (*((unsigned char *)v816 + 16) == 29 && v817 >= 0xFFFFFFF5)
                              {
                                v819 = v816[-4 * (*((_DWORD *)v816 + 5) & 0x7FFFFFF)];
                                unsigned int v820 = *((unsigned __int8 *)v819 + 16);
                                if (v820 >= 0x1C)
                                {
                                  unsigned int v821 = v820 - 33;
                                  BOOL v182 = v821 > 0x33;
                                  uint64_t v822 = (1 << v821) & 0x8000000000041;
                                  if (!v182 && v822 != 0) {
                                    break;
                                  }
                                }
                              }
                            }
                          }
LABEL_1493:
                          v812 = (llvm::LLVMContext **)v812[1];
                          if (v812 == (llvm::LLVMContext **)v811) {
                            goto LABEL_1494;
                          }
                        }
                        if (v1839)
                        {
                          uint64_t v824 = (v1839 - 1) & ((v819 >> 4) ^ (v819 >> 9));
                          v825 = (char *)v1837 + 64 * v824;
                          v826 = (llvm::LLVMContext *)v825[3];
                          if (v819 == v826)
                          {
LABEL_1457:
                            v1877[0] = (void *)6;
                            if (v825 == (void *)((char *)v1837 + 64 * (unint64_t)v1839))
                            {
                              v829 = 0;
                              v830 = 0;
                              v837 = 0;
                              v1877[1] = 0;
                              v1877[2] = 0;
                            }
                            else
                            {
                              v829 = 0;
                              v830 = (unsigned __int8 *)v825[7];
                              v1877[1] = 0;
                              v1877[2] = v830;
                              if (v830 != (unsigned __int8 *)-8192
                                && v830 != (unsigned __int8 *)-4096
                                && v830 != 0)
                              {
                                unint64_t v832 = v825[5] & 0xFFFFFFFFFFFFFFF8;
                                v1877[1] = *(void **)v832;
                                *(void *)unint64_t v832 = v1877;
                                v1877[0] = (void *)(v832 | 6);
                                v829 = v1877[1];
                                if (v1877[1]) {
                                  *(void *)v1877[1] = *(void *)v1877[1] & 7 | (unint64_t)&v1877[1];
                                }
                                v830 = (unsigned __int8 *)v1877[2];
                              }
                              if (!v830
                                || (unsigned int v833 = v830[16], v833 < 0x1C)
                                || ((unsigned int v834 = v833 - 33,
                                     BOOL v182 = v834 > 0x33,
                                     uint64_t v835 = (1 << v834) & 0x8000000000041,
                                     !v182)
                                  ? (BOOL v836 = v835 == 0)
                                  : (BOOL v836 = 1),
                                    v836))
                              {
                                v837 = 0;
                              }
                              else
                              {
                                v837 = v830;
                              }
                            }
                            if (v830 != (unsigned __int8 *)-8192 && v830 != (unsigned __int8 *)-4096 && v830)
                            {
                              unint64_t v838 = (unint64_t)v1877[0] & 0xFFFFFFFFFFFFFFF8;
                              *(void *)((unint64_t)v1877[0] & 0xFFFFFFFFFFFFFFF8) = v829;
                              if (v1877[1])
                              {
                                *(void *)v1877[1] = *(void *)v1877[1] & 7 | v838;
                              }
                              else
                              {
                                v839 = v1877[2];
                                v840 = ***(int32x2_t ****)v1877[2];
                                unint64_t v841 = (unint64_t)v840[303];
                                if (v841 <= v838)
                                {
                                  uint64_t v842 = v840[305].u32[0];
                                  if (v841 + 16 * v842 > v838)
                                  {
                                    unsigned int v843 = v842 - 1;
                                    LODWORD(v844) = v843 & ((LODWORD(v1877[2]) >> 4) ^ (LODWORD(v1877[2]) >> 9));
                                    v845 = (void **)(v841 + 16 * v844);
                                    v846 = *v845;
                                    if (v1877[2] != *v845)
                                    {
                                      int v847 = 1;
                                      do
                                      {
                                        if (v846 == (void *)-4096) {
                                          goto LABEL_1487;
                                        }
                                        int v848 = v844 + v847++;
                                        uint64_t v844 = v848 & v843;
                                        v846 = *(void **)(v841 + 16 * v844);
                                      }
                                      while (v1877[2] != v846);
                                      v845 = (void **)(v841 + 16 * v844);
                                    }
                                    *v845 = (void *)-8192;
                                    v840[304] = vadd_s32(v840[304], (int32x2_t)0x1FFFFFFFFLL);
                                    v839 = v1877[2];
LABEL_1487:
                                    v839[17] &= ~1u;
                                  }
                                }
                              }
                            }
                            if (v837
                              && v816[5] == *((llvm::LLVMContext **)v819 + 5)
                              && llvm::isGuaranteedToTransferExecutionToSuccessor((uint64_t)v819 + 24, (uint64_t)(v816 + 3), dword_1EBCFC868 + 1))
                            {
                              v1877[0] = *((void **)v837 + 8);
                              *((void *)v837 + 8) = llvm::AttributeList::addAttributesAtIndex((llvm::AttributeList *)v1877, v813, 0, (const llvm::AttrBuilder *)v1869);
                            }
                            goto LABEL_1493;
                          }
                          int v827 = 1;
                          while (v826 != (llvm::LLVMContext *)-4096)
                          {
                            int v828 = v824 + v827++;
                            uint64_t v824 = v828 & (v1839 - 1);
                            v825 = (char *)v1837 + 64 * v824;
                            v826 = (llvm::LLVMContext *)v825[3];
                            if (v819 == v826) {
                              goto LABEL_1457;
                            }
                          }
                        }
                        v825 = (char *)v1837 + 64 * (unint64_t)v1839;
                        goto LABEL_1457;
                      }
                    }
LABEL_1494:
                    if (*(void ***)&v1869[8] != &v1870) {
                      free(*(void **)&v1869[8]);
                    }
                    v586 = (void ***)a1;
                  }
                  int v849 = *((_DWORD *)v586 + 5);
                  if (v586[6])
                  {
                    if ((v849 & 0x20000000) == 0) {
                      goto LABEL_1517;
                    }
                  }
                  else if ((v849 & 0x20000000) == 0)
                  {
                    v850 = 0;
                    v851 = 0;
                    goto LABEL_1523;
                  }
                  uint64_t v852 = *(void *)**v586;
                  v1877[0] = v586;
                  int v853 = *(_DWORD *)(v852 + 2496);
                  if (v853)
                  {
                    uint64_t v854 = *(void *)(v852 + 2480);
                    int v855 = v853 - 1;
                    unsigned int v856 = v855 & ((v586 >> 4) ^ (v586 >> 9));
                    v857 = (void ****)(v854 + 40 * v856);
                    v858 = *v857;
                    if (*v857 == v586) {
                      goto LABEL_1512;
                    }
                    v859 = 0;
                    int v860 = 1;
                    while (v858 != (void ***)-4096)
                    {
                      if (v859) {
                        BOOL v861 = 0;
                      }
                      else {
                        BOOL v861 = v858 == (void ***)-8192;
                      }
                      if (v861) {
                        v859 = v857;
                      }
                      unsigned int v862 = v856 + v860++;
                      unsigned int v856 = v862 & v855;
                      v857 = (void ****)(v854 + 40 * v856);
                      v858 = *v857;
                      if (*v857 == v586) {
                        goto LABEL_1512;
                      }
                    }
                    if (v859) {
                      v1605 = v859;
                    }
                    else {
                      v1605 = v857;
                    }
                  }
                  else
                  {
                    v1605 = 0;
                  }
                  v857 = (void ****)sub_1CC609054(v852 + 2480, (uint64_t)v1877, (uint64_t *)v1877, v1605);
                  v1606 = (void ***)v1877[0];
                  v857[3] = 0;
                  v857[4] = 0;
                  *v857 = v1606;
                  v857[1] = (void ***)(v857 + 3);
                  v857[2] = (void ***)0x100000000;
LABEL_1512:
                  uint64_t v863 = *((unsigned int *)v857 + 4);
                  if (v863)
                  {
                    v864 = (llvm::MDNode **)(v857[1] + 1);
                    uint64_t v865 = 16 * v863;
                    while (*((_DWORD *)v864 - 2) != 10)
                    {
                      v851 = 0;
                      v864 += 2;
                      v865 -= 16;
                      if (!v865) {
                        goto LABEL_1518;
                      }
                    }
                    v851 = *v864;
                    goto LABEL_1518;
                  }
LABEL_1517:
                  v851 = 0;
LABEL_1518:
                  int v866 = *((_DWORD *)v586 + 5);
                  if (v586[6])
                  {
                    if ((v866 & 0x20000000) == 0) {
                      goto LABEL_1539;
                    }
LABEL_1524:
                    uint64_t v868 = *(void *)**v586;
                    v1877[0] = v586;
                    int v869 = *(_DWORD *)(v868 + 2496);
                    if (v869)
                    {
                      uint64_t v870 = *(void *)(v868 + 2480);
                      int v871 = v869 - 1;
                      unsigned int v872 = v871 & ((v586 >> 4) ^ (v586 >> 9));
                      v873 = (void ****)(v870 + 40 * v872);
                      v874 = *v873;
                      if (*v873 == v586) {
                        goto LABEL_1534;
                      }
                      v875 = 0;
                      int v876 = 1;
                      while (v874 != (void ***)-4096)
                      {
                        if (v875) {
                          BOOL v877 = 0;
                        }
                        else {
                          BOOL v877 = v874 == (void ***)-8192;
                        }
                        if (v877) {
                          v875 = v873;
                        }
                        unsigned int v878 = v872 + v876++;
                        unsigned int v872 = v878 & v871;
                        v873 = (void ****)(v870 + 40 * v872);
                        v874 = *v873;
                        if (*v873 == v586) {
                          goto LABEL_1534;
                        }
                      }
                      if (v875) {
                        v1614 = v875;
                      }
                      else {
                        v1614 = v873;
                      }
                    }
                    else
                    {
                      v1614 = 0;
                    }
                    v873 = (void ****)sub_1CC609054(v868 + 2480, (uint64_t)v1877, (uint64_t *)v1877, v1614);
                    v1615 = (void ***)v1877[0];
                    v873[3] = 0;
                    v873[4] = 0;
                    *v873 = v1615;
                    v873[1] = (void ***)(v873 + 3);
                    v873[2] = (void ***)0x100000000;
LABEL_1534:
                    uint64_t v879 = *((unsigned int *)v873 + 4);
                    if (v879)
                    {
                      v880 = v873[1] + 1;
                      uint64_t v881 = 16 * v879;
                      while (*((_DWORD *)v880 - 2) != 25)
                      {
                        v867 = 0;
                        v880 += 2;
                        v881 -= 16;
                        if (!v881) {
                          goto LABEL_1540;
                        }
                      }
                      v867 = (llvm::MDNode *)*v880;
LABEL_1540:
                      int v882 = *((_DWORD *)v586 + 5);
                      if (v586[6])
                      {
                        if ((v882 & 0x20000000) == 0) {
                          goto LABEL_1560;
                        }
                      }
                      else if ((v882 & 0x20000000) == 0)
                      {
                        v850 = 0;
                        goto LABEL_1576;
                      }
                      uint64_t v883 = *(void *)**v586;
                      v1877[0] = v586;
                      int v884 = *(_DWORD *)(v883 + 2496);
                      if (v884)
                      {
                        uint64_t v885 = *(void *)(v883 + 2480);
                        int v886 = v884 - 1;
                        unsigned int v887 = v886 & ((v586 >> 4) ^ (v586 >> 9));
                        v888 = (void ****)(v885 + 40 * v887);
                        v889 = *v888;
                        if (*v888 == v586) {
                          goto LABEL_1555;
                        }
                        v890 = 0;
                        int v891 = 1;
                        while (v889 != (void ***)-4096)
                        {
                          if (v890) {
                            BOOL v892 = 0;
                          }
                          else {
                            BOOL v892 = v889 == (void ***)-8192;
                          }
                          if (v892) {
                            v890 = v888;
                          }
                          unsigned int v893 = v887 + v891++;
                          unsigned int v887 = v893 & v886;
                          v888 = (void ****)(v885 + 40 * v887);
                          v889 = *v888;
                          if (*v888 == v586) {
                            goto LABEL_1555;
                          }
                        }
                        if (v890) {
                          v1619 = v890;
                        }
                        else {
                          v1619 = v888;
                        }
                      }
                      else
                      {
                        v1619 = 0;
                      }
                      v888 = (void ****)sub_1CC609054(v883 + 2480, (uint64_t)v1877, (uint64_t *)v1877, v1619);
                      v1620 = (void ***)v1877[0];
                      v888[3] = 0;
                      v888[4] = 0;
                      *v888 = v1620;
                      v888[1] = (void ***)(v888 + 3);
                      v888[2] = (void ***)0x100000000;
LABEL_1555:
                      uint64_t v894 = *((unsigned int *)v888 + 4);
                      if (v894)
                      {
                        v895 = (llvm::MDNode **)(v888[1] + 1);
                        uint64_t v896 = 16 * v894;
                        while (*((_DWORD *)v895 - 2) != 7)
                        {
                          v850 = 0;
                          v895 += 2;
                          v896 -= 16;
                          if (!v896) {
                            goto LABEL_1561;
                          }
                        }
                        v850 = *v895;
LABEL_1561:
                        if ((*((unsigned char *)v586 + 23) & 0x20) == 0) {
                          goto LABEL_1576;
                        }
                        uint64_t v897 = *(void *)**v586;
                        v1877[0] = v586;
                        int v898 = *(_DWORD *)(v897 + 2496);
                        if (v898)
                        {
                          uint64_t v899 = *(void *)(v897 + 2480);
                          int v900 = v898 - 1;
                          unsigned int v901 = v900 & ((v586 >> 4) ^ (v586 >> 9));
                          v902 = (void ****)(v899 + 40 * v901);
                          v903 = *v902;
                          if (*v902 == v586) {
                            goto LABEL_1572;
                          }
                          v904 = 0;
                          int v905 = 1;
                          while (v903 != (void ***)-4096)
                          {
                            if (v904) {
                              BOOL v906 = 0;
                            }
                            else {
                              BOOL v906 = v903 == (void ***)-8192;
                            }
                            if (v906) {
                              v904 = v902;
                            }
                            unsigned int v907 = v901 + v905++;
                            unsigned int v901 = v907 & v900;
                            v902 = (void ****)(v899 + 40 * v901);
                            v903 = *v902;
                            if (*v902 == v586) {
                              goto LABEL_1572;
                            }
                          }
                          if (v904) {
                            v1625 = v904;
                          }
                          else {
                            v1625 = v902;
                          }
                        }
                        else
                        {
                          v1625 = 0;
                        }
                        v902 = (void ****)sub_1CC609054(v897 + 2480, (uint64_t)v1877, (uint64_t *)v1877, v1625);
                        v1626 = (void ***)v1877[0];
                        v902[3] = 0;
                        v902[4] = 0;
                        *v902 = v1626;
                        v902[1] = (void ***)(v902 + 3);
                        v902[2] = (void ***)0x100000000;
LABEL_1572:
                        uint64_t v908 = *((unsigned int *)v902 + 4);
                        if (v908)
                        {
                          v909 = (llvm::MDNode **)(v902[1] + 1);
                          uint64_t v910 = 16 * v908;
                          while (*((_DWORD *)v909 - 2) != 8)
                          {
                            v909 += 2;
                            v910 -= 16;
                            if (!v910) {
                              goto LABEL_1576;
                            }
                          }
                          v911 = *v909;
LABEL_1577:
                          if ((unint64_t)v851 | (unint64_t)v867 | (unint64_t)v850 | (unint64_t)v911
                            && v1740 != v1795)
                          {
                            v912 = v867;
                            uint64_t v913 = v1740;
                            do
                            {
                              uint64_t v914 = v913 - 24;
                              if (!v913) {
                                uint64_t v914 = 0;
                              }
                              uint64_t v915 = v914 + 40;
                              for (nuint64_t n = *(void *)(v914 + 48); nn != v915; nuint64_t n = *(void *)(nn + 8))
                              {
                                if (nn) {
                                  v917 = (uint64_t ***)(nn - 24);
                                }
                                else {
                                  v917 = 0;
                                }
                                int v918 = *((unsigned __int8 *)v917 + 16);
                                uint64_t v919 = (v918 - 33);
                                if (v919 <= 0x37)
                                {
                                  if (((1 << (v918 - 33)) & 0x8000000000041) != 0)
                                  {
                                    v921 = v917[8];
                                    if (!v921
                                      || (*((unsigned char *)v921 + 20) & 4) == 0 && (*((unsigned char *)v921 + 17) & 0x10) == 0)
                                    {
                                      LODWORD(v1877[0]) = 7;
                                      if (sub_1CC5CB59C((uint64_t)v917, (__int32 *)v1877, 1uLL))
                                      {
                                        uint64_t v995 = (uint64_t)*(v917 - 4);
                                        if (!v995
                                          || *(unsigned char *)(v995 + 16)
                                          || *(uint64_t ***)(v995 + 24) != v917[9]
                                          || *(_DWORD *)(v995 + 36) != 7)
                                        {
                                          goto LABEL_1612;
                                        }
                                      }
                                      if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v917, 66) & 1) == 0
                                        && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v917, 44))
                                      {
                                        goto LABEL_1612;
                                      }
                                    }
                                    goto LABEL_1602;
                                  }
                                  if (((1 << (v918 - 33)) & 0x808001C8000010) != 0) {
                                    goto LABEL_1612;
                                  }
                                  if (v919 == 28)
                                  {
                                    if ((*((_WORD *)v917 + 9) & 0x301) != 0) {
                                      goto LABEL_1612;
                                    }
LABEL_1602:
                                    int v918 = *((unsigned __int8 *)v917 + 16);
                                  }
                                }
                                uint64_t v920 = (v918 - 33);
                                if (v920 > 0x37) {
                                  continue;
                                }
                                if (((1 << v920) & 0x8000000000041) != 0)
                                {
                                  v922 = v917[8];
                                  if (!v922 || (*((unsigned char *)v922 + 17) & 0x30) == 0)
                                  {
                                    int v923 = *((_DWORD *)v917 + 5);
                                    if (v923 < 0)
                                    {
                                      v996 = &v917[-4 * (v923 & 0x7FFFFFF)];
                                      uint64_t v999 = (uint64_t)*(v996 - 1);
                                      v997 = v996 - 1;
                                      uint64_t v998 = v999;
                                      if (v999)
                                      {
                                        uint64_t v1000 = -v998;
                                        do
                                        {
                                          unsigned int v1001 = (*(_DWORD **)((char *)v997 + v1000))[2];
                                          BOOL v182 = v1001 > 7;
                                          int v1002 = (1 << v1001) & 0x83;
                                          if (v182 || v1002 == 0) {
                                            goto LABEL_1612;
                                          }
                                          v1000 += 16;
                                        }
                                        while (v1000);
                                      }
                                    }
                                    if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v917, 45) & 1) == 0
                                      && (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v917, 44) & 1) == 0)
                                    {
                                      goto LABEL_1612;
                                    }
                                  }
                                }
                                else
                                {
                                  if (v920 != 27)
                                  {
                                    if (((1 << v920) & 0x808001D0000010) == 0) {
                                      continue;
                                    }
LABEL_1612:
                                    if (v851)
                                    {
                                      if ((*((unsigned char *)v917 + 23) & 0x20) == 0) {
                                        goto LABEL_1629;
                                      }
                                      uint64_t v924 = ***v917;
                                      v1877[0] = v917;
                                      int v925 = *(_DWORD *)(v924 + 2496);
                                      if (!v925)
                                      {
                                        v987 = 0;
                                        goto LABEL_1696;
                                      }
                                      uint64_t v926 = *(void *)(v924 + 2480);
                                      int v927 = v925 - 1;
                                      unsigned int v928 = v927 & ((v917 >> 4) ^ (v917 >> 9));
                                      v929 = (void *)(v926 + 40 * v928);
                                      v930 = (void ***)*v929;
                                      if ((uint64_t ***)*v929 != v917)
                                      {
                                        v931 = 0;
                                        int v932 = 1;
                                        while (v930 != (void ***)-4096)
                                        {
                                          if (v931) {
                                            BOOL v933 = 0;
                                          }
                                          else {
                                            BOOL v933 = v930 == (void ***)-8192;
                                          }
                                          if (v933) {
                                            v931 = v929;
                                          }
                                          unsigned int v934 = v928 + v932++;
                                          unsigned int v928 = v934 & v927;
                                          v929 = (void *)(v926 + 40 * v928);
                                          v930 = (void ***)*v929;
                                          if ((uint64_t ***)*v929 == v917) {
                                            goto LABEL_1624;
                                          }
                                        }
                                        if (v931) {
                                          v987 = v931;
                                        }
                                        else {
                                          v987 = v929;
                                        }
LABEL_1696:
                                        v929 = sub_1CC609054(v924 + 2480, (uint64_t)v1877, (uint64_t *)v1877, v987);
                                        v988 = v1877[0];
                                        v929[4] = 0;
                                        v929[3] = 0;
                                        void *v929 = v988;
                                        v929[1] = v929 + 3;
                                        v929[2] = 0x100000000;
                                      }
LABEL_1624:
                                      uint64_t v935 = *((unsigned int *)v929 + 4);
                                      if (v935)
                                      {
                                        v936 = (llvm::MDNode **)(v929[1] + 8);
                                        uint64_t v937 = 16 * v935;
                                        while (*((_DWORD *)v936 - 2) != 10)
                                        {
                                          v938 = 0;
                                          v936 += 2;
                                          v937 -= 16;
                                          if (!v937) {
                                            goto LABEL_1630;
                                          }
                                        }
                                        v938 = *v936;
                                      }
                                      else
                                      {
LABEL_1629:
                                        v938 = 0;
                                      }
LABEL_1630:
                                      v851 = llvm::MDNode::concatenate(v938, v851, v305);
                                      llvm::Instruction::setMetadata((llvm::Instruction *)v917, 10, v851);
                                    }
                                    if (!v912)
                                    {
                                      if (v850) {
                                        goto LABEL_1633;
                                      }
LABEL_1651:
                                      if (!v911) {
                                        continue;
                                      }
                                      if ((*((unsigned char *)v917 + 23) & 0x20) == 0) {
                                        goto LABEL_1668;
                                      }
                                      uint64_t v955 = ***v917;
                                      v1877[0] = v917;
                                      int v956 = *(_DWORD *)(v955 + 2496);
                                      if (!v956)
                                      {
                                        v991 = 0;
                                        goto LABEL_1704;
                                      }
                                      uint64_t v957 = *(void *)(v955 + 2480);
                                      int v958 = v956 - 1;
                                      unsigned int v959 = v958 & ((v917 >> 4) ^ (v917 >> 9));
                                      v960 = (void *)(v957 + 40 * v959);
                                      v961 = (void ***)*v960;
                                      if ((uint64_t ***)*v960 != v917)
                                      {
                                        v962 = 0;
                                        int v963 = 1;
                                        while (v961 != (void ***)-4096)
                                        {
                                          if (v962) {
                                            BOOL v964 = 0;
                                          }
                                          else {
                                            BOOL v964 = v961 == (void ***)-8192;
                                          }
                                          if (v964) {
                                            v962 = v960;
                                          }
                                          unsigned int v965 = v959 + v963++;
                                          unsigned int v959 = v965 & v958;
                                          v960 = (void *)(v957 + 40 * v959);
                                          v961 = (void ***)*v960;
                                          if ((uint64_t ***)*v960 == v917) {
                                            goto LABEL_1663;
                                          }
                                        }
                                        if (v962) {
                                          v991 = v962;
                                        }
                                        else {
                                          v991 = v960;
                                        }
LABEL_1704:
                                        v960 = sub_1CC609054(v955 + 2480, (uint64_t)v1877, (uint64_t *)v1877, v991);
                                        v992 = v1877[0];
                                        v960[4] = 0;
                                        v960[3] = 0;
                                        void *v960 = v992;
                                        v960[1] = v960 + 3;
                                        v960[2] = 0x100000000;
                                      }
LABEL_1663:
                                      uint64_t v966 = *((unsigned int *)v960 + 4);
                                      if (v966)
                                      {
                                        v967 = (llvm::MDNode **)(v960[1] + 8);
                                        uint64_t v968 = 16 * v966;
                                        while (*((_DWORD *)v967 - 2) != 8)
                                        {
                                          v969 = 0;
                                          v967 += 2;
                                          v968 -= 16;
                                          if (!v968) {
                                            goto LABEL_1669;
                                          }
                                        }
                                        v969 = *v967;
                                      }
                                      else
                                      {
LABEL_1668:
                                        v969 = 0;
                                      }
LABEL_1669:
                                      v970 = llvm::MDNode::concatenate(v969, v911, v305);
                                      llvm::Instruction::setMetadata((llvm::Instruction *)v917, 8, v970);
                                      continue;
                                    }
                                    if ((*((unsigned char *)v917 + 23) & 0x20) == 0) {
                                      goto LABEL_1690;
                                    }
                                    uint64_t v971 = ***v917;
                                    v1877[0] = v917;
                                    int v972 = *(_DWORD *)(v971 + 2496);
                                    if (!v972)
                                    {
                                      v993 = 0;
                                      goto LABEL_1709;
                                    }
                                    uint64_t v973 = *(void *)(v971 + 2480);
                                    int v974 = v972 - 1;
                                    unsigned int v975 = v974 & ((v917 >> 4) ^ (v917 >> 9));
                                    v976 = (void *)(v973 + 40 * v975);
                                    v977 = (void ***)*v976;
                                    if ((uint64_t ***)*v976 != v917)
                                    {
                                      v978 = 0;
                                      int v979 = 1;
                                      while (v977 != (void ***)-4096)
                                      {
                                        if (v978) {
                                          BOOL v980 = 0;
                                        }
                                        else {
                                          BOOL v980 = v977 == (void ***)-8192;
                                        }
                                        if (v980) {
                                          v978 = v976;
                                        }
                                        unsigned int v981 = v975 + v979++;
                                        unsigned int v975 = v981 & v974;
                                        v976 = (void *)(v973 + 40 * v975);
                                        v977 = (void ***)*v976;
                                        if ((uint64_t ***)*v976 == v917) {
                                          goto LABEL_1685;
                                        }
                                      }
                                      if (v978) {
                                        v993 = v978;
                                      }
                                      else {
                                        v993 = v976;
                                      }
LABEL_1709:
                                      v976 = sub_1CC609054(v971 + 2480, (uint64_t)v1877, (uint64_t *)v1877, v993);
                                      v994 = v1877[0];
                                      v976[4] = 0;
                                      v976[3] = 0;
                                      void *v976 = v994;
                                      v976[1] = v976 + 3;
                                      v976[2] = 0x100000000;
                                    }
LABEL_1685:
                                    uint64_t v982 = *((unsigned int *)v976 + 4);
                                    if (v982)
                                    {
                                      v983 = (llvm **)(v976[1] + 8);
                                      uint64_t v984 = 16 * v982;
                                      while (*((_DWORD *)v983 - 2) != 25)
                                      {
                                        v985 = 0;
                                        v983 += 2;
                                        v984 -= 16;
                                        if (!v984) {
                                          goto LABEL_1691;
                                        }
                                      }
                                      v985 = *v983;
                                    }
                                    else
                                    {
LABEL_1690:
                                      v985 = 0;
                                    }
LABEL_1691:
                                    v986 = llvm::uniteAccessGroups(v985, v912, v305);
                                    llvm::Instruction::setMetadata((llvm::Instruction *)v917, 25, v986);
                                    if (!v850) {
                                      goto LABEL_1651;
                                    }
                                    if ((*((unsigned char *)v917 + 23) & 0x20) == 0) {
                                      goto LABEL_1649;
                                    }
LABEL_1633:
                                    uint64_t v939 = ***v917;
                                    v1877[0] = v917;
                                    int v940 = *(_DWORD *)(v939 + 2496);
                                    if (!v940)
                                    {
                                      v989 = 0;
                                      goto LABEL_1700;
                                    }
                                    uint64_t v941 = *(void *)(v939 + 2480);
                                    int v942 = v940 - 1;
                                    unsigned int v943 = v942 & ((v917 >> 4) ^ (v917 >> 9));
                                    v944 = (void *)(v941 + 40 * v943);
                                    v945 = (void ***)*v944;
                                    if ((uint64_t ***)*v944 != v917)
                                    {
                                      v946 = 0;
                                      int v947 = 1;
                                      while (v945 != (void ***)-4096)
                                      {
                                        if (v946) {
                                          BOOL v948 = 0;
                                        }
                                        else {
                                          BOOL v948 = v945 == (void ***)-8192;
                                        }
                                        if (v948) {
                                          v946 = v944;
                                        }
                                        unsigned int v949 = v943 + v947++;
                                        unsigned int v943 = v949 & v942;
                                        v944 = (void *)(v941 + 40 * v943);
                                        v945 = (void ***)*v944;
                                        if ((uint64_t ***)*v944 == v917) {
                                          goto LABEL_1644;
                                        }
                                      }
                                      if (v946) {
                                        v989 = v946;
                                      }
                                      else {
                                        v989 = v944;
                                      }
LABEL_1700:
                                      v944 = sub_1CC609054(v939 + 2480, (uint64_t)v1877, (uint64_t *)v1877, v989);
                                      v990 = v1877[0];
                                      v944[4] = 0;
                                      v944[3] = 0;
                                      void *v944 = v990;
                                      v944[1] = v944 + 3;
                                      v944[2] = 0x100000000;
                                    }
LABEL_1644:
                                    uint64_t v950 = *((unsigned int *)v944 + 4);
                                    if (v950)
                                    {
                                      v951 = (llvm::MDNode **)(v944[1] + 8);
                                      uint64_t v952 = 16 * v950;
                                      while (*((_DWORD *)v951 - 2) != 7)
                                      {
                                        v953 = 0;
                                        v951 += 2;
                                        v952 -= 16;
                                        if (!v952) {
                                          goto LABEL_1650;
                                        }
                                      }
                                      v953 = *v951;
                                    }
                                    else
                                    {
LABEL_1649:
                                      v953 = 0;
                                    }
LABEL_1650:
                                    v954 = llvm::MDNode::concatenate(v953, v850, v305);
                                    llvm::Instruction::setMetadata((llvm::Instruction *)v917, 7, v954);
                                    goto LABEL_1651;
                                  }
                                  if ((*((_WORD *)v917 + 9) & 0x301) != 0) {
                                    goto LABEL_1612;
                                  }
                                }
                              }
                              uint64_t v913 = *(void *)(v913 + 8);
                            }
                            while (v913 != v1795);
                          }
                          v1004 = a2;
                          v1005 = v1777;
                          if (a2[1])
                          {
                            uint64_t v1006 = v1740 - 24;
                            if (!v1740) {
                              uint64_t v1006 = 0;
                            }
                            for (uint64_t i1 = v1006 + 24; i1 != v1795; uint64_t i1 = *(void *)(i1 + 8))
                            {
                              uint64_t v1008 = i1 - 24;
                              if (!i1) {
                                uint64_t v1008 = 0;
                              }
                              uint64_t v1009 = v1008 + 40;
                              for (uint64_t i2 = *(void *)(v1008 + 48); i2 != v1009; uint64_t i2 = *(void *)(i2 + 8))
                              {
                                if (i2) {
                                  uint64_t v1011 = i2 - 24;
                                }
                                else {
                                  uint64_t v1011 = 0;
                                }
                                BOOL v1012 = sub_1CBF698E4(v1011);
                                if (i2 && v1012)
                                {
                                  v1013 = (char **)((uint64_t (*)(uint64_t, llvm::AttributeFuncs *))a2[1])(a2[2], v1777);
                                  llvm::AssumptionCache::registerAssumption(v1013, v1011);
                                }
                              }
                            }
                          }
                          uint64_t v1014 = v1836[1];
                          if (LODWORD(v1836[3]))
                          {
                            uint64_t v1015 = 16 * LODWORD(v1836[3]);
                            v1016 = (unsigned __int8 **)(v1836[1] + 8);
                            v1017 = a1;
                            while (1)
                            {
                              if (((unint64_t)*(v1016 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
                              {
                                v1018 = *v1016;
                                if (*v1016)
                                {
                                  int v1019 = *v1018;
                                  if ((v1019 - 4) > 0x1E)
                                  {
                                    if ((v1019 - 3) >= 0xFFFFFFFE) {
                                      v1022 = *v1016;
                                    }
                                    else {
                                      v1022 = 0;
                                    }
                                    if ((v1019 - 3) < 0xFFFFFFFE)
                                    {
                                      if (v1019 == 3) {
                                        *((void *)v1018 + 1) = 0;
                                      }
                                      goto LABEL_1747;
                                    }
                                    unint64_t v1021 = (unint64_t)(v1022 + 8);
                                  }
                                  else
                                  {
                                    if ((v1018[1] & 0x7F) != 2 && !*((_DWORD *)v1018 + 3)) {
                                      goto LABEL_1747;
                                    }
                                    uint64_t v1020 = *((void *)v1018 + 2);
                                    if ((v1020 & 4) == 0) {
                                      goto LABEL_1747;
                                    }
                                    unint64_t v1021 = v1020 & 0xFFFFFFFFFFFFFFF8;
                                    if (!v1021) {
                                      goto LABEL_1747;
                                    }
                                  }
                                  v1877[0] = v1016;
                                  sub_1CC5FA668(v1021 + 16, v1877);
                                }
                              }
LABEL_1747:
                              v1016 += 2;
                              v1015 -= 16;
                              if (!v1015)
                              {
                                uint64_t v1014 = v1836[1];
                                goto LABEL_1765;
                              }
                            }
                          }
                          v1017 = a1;
LABEL_1765:
                          MEMORY[0x1D25D9CD0](v1014, 8);
                          if ((void)v1835)
                          {
                            *((void *)&v1835 + 1) = v1835;
                            operator delete((void *)v1835);
                          }
                          MEMORY[0x1D25D9CD0](__src, 8);
                          if (v1813 != &v1815) {
                            free(v1813);
                          }
                          if (v1841)
                          {
                            sub_1CC009394((uint64_t)&v1840);
                            MEMORY[0x1D25D9CD0](v1840, 8);
                            char v1841 = 0;
                          }
                          sub_1CC4D021C(&v1837);
                          MEMORY[0x1D25D9CD0](v1837, 8);
                          uint64_t v1025 = *((void *)v1777 + 10);
                          if (v1025) {
                            uint64_t v1026 = v1025 - 24;
                          }
                          else {
                            uint64_t v1026 = 0;
                          }
                          uint64_t v1027 = v1740 - 24;
                          if (!v1740) {
                            uint64_t v1027 = 0;
                          }
                          v1028 = (uint64_t *)(v1027 + 40);
                          uint64_t v1739 = v1027;
                          v1029 = *(uint64_t **)(v1027 + 48);
                          v1734 = (uint64_t *)(v1027 + 40);
                          if (v1029 != (uint64_t *)(v1027 + 40))
                          {
                            v1030 = *(uint64_t **)(v1026 + 48);
                            do
                            {
                              v1031 = v1029;
                              v1029 = (uint64_t *)v1029[1];
                              v1032 = v1031 - 3;
                              if (!v1031) {
                                v1032 = 0;
                              }
                              int v1033 = *((unsigned __int8 *)v1032 + 16);
                              if (v1033 == 59) {
                                v1034 = v1032;
                              }
                              else {
                                v1034 = 0;
                              }
                              if (v1031 && v1033 == 59)
                              {
                                if (!v1034[1]) {
                                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                                }
                                if (*(unsigned __int8 *)(*(v1034 - 4) + 16) <= 0x14u
                                  && (*((_WORD *)v1034 + 9) & 0x40) == 0)
                                {
                                  unint64_t v1035 = *((unsigned int *)v1004 + 14);
                                  if (v1035 >= *((unsigned int *)v1004 + 15)) {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                                  }
                                  *(void *)(v1004[6] + 8 * v1035) = v1034;
                                  unsigned int v1036 = *((_DWORD *)v1004 + 14) + 1;
                                  *((_DWORD *)v1004 + 14) = v1036;
                                  while (1)
                                  {
                                    uint64_t v1037 = v1029 ? (uint64_t)(v1029 - 3) : 0;
                                    if (*(unsigned char *)(v1037 + 16) != 59
                                      || !*(v1029 - 2)
                                      || *(unsigned __int8 *)(*(v1029 - 7) + 16) > 0x14u
                                      || (*((_WORD *)v1029 - 3) & 0x40) != 0)
                                    {
                                      break;
                                    }
                                    if (v1036 >= *((_DWORD *)v1004 + 15)) {
                                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                                    }
                                    *(void *)(v1004[6] + 8 * v1036) = v1029 - 3;
                                    unsigned int v1036 = *((_DWORD *)v1004 + 14) + 1;
                                    *((_DWORD *)v1004 + 14) = v1036;
                                    v1029 = (uint64_t *)v1029[1];
                                  }
                                  v1038 = v1034 + 3;
                                  if (v1034 + 3 != v1029 && v1030 != v1029)
                                  {
                                    uint64_t v1039 = *((void *)v1777 + 10);
                                    if (v1039) {
                                      uint64_t v1040 = v1039 - 24;
                                    }
                                    else {
                                      uint64_t v1040 = 0;
                                    }
                                    *(_WORD *)(v1040 + 18) &= ~0x8000u;
                                    if (v1040 != v1739)
                                    {
                                      uint64_t v1041 = *(void *)(v1040 + 56);
                                      if (v1041) {
                                        v1042 = *(llvm::ValueSymbolTable **)(v1041 + 104);
                                      }
                                      else {
                                        v1042 = 0;
                                      }
                                      uint64_t v1043 = *(void *)(v1739 + 56);
                                      if (v1043) {
                                        v1044 = *(llvm::ValueSymbolTable **)(v1043 + 104);
                                      }
                                      else {
                                        v1044 = 0;
                                      }
                                      v1045 = v1038;
                                      if (v1042 == v1044)
                                      {
                                        do
                                        {
                                          v1046 = v1045 - 3;
                                          if (!v1045) {
                                            v1046 = 0;
                                          }
                                          v1046[5] = v1040;
                                          v1045 = (uint64_t *)v1045[1];
                                        }
                                        while (v1045 != v1029);
                                      }
                                      else
                                      {
                                        v1732 = v1038;
                                        do
                                        {
                                          v1050 = (llvm::Value *)(v1732 - 3);
                                          if (!v1732) {
                                            v1050 = 0;
                                          }
                                          v1730 = v1050;
                                          int v1725 = *((_DWORD *)v1050 + 5) & 0x10000000;
                                          if (v1044)
                                          {
                                            if (v1725)
                                            {
                                              ValueName = (size_t *)llvm::Value::getValueName(v1050);
                                              uint64_t v1052 = *((unsigned int *)v1044 + 2);
                                              if (v1052)
                                              {
                                                *(void *)v1721 = *((unsigned int *)v1044 + 5);
                                                __s1 = (char *)ValueName + *(void *)v1721;
                                                size_t __na = *ValueName;
                                                int v1053 = 0;
                                                if (*ValueName)
                                                {
                                                  size_t v1054 = *ValueName;
                                                  v1055 = (unsigned __int8 *)ValueName + *(void *)v1721;
                                                  do
                                                  {
                                                    int v1056 = *v1055++;
                                                    int v1053 = 33 * v1053 + v1056;
                                                    --v1054;
                                                  }
                                                  while (v1054);
                                                }
                                                unsigned int v1755 = v1052 - 1;
                                                uint64_t v1760 = *(void *)v1044;
                                                size_t v1748 = *(void *)v1044 + 8 * v1052 + 8;
                                                int v1782 = 1;
                                                int v1057 = v1053;
                                                while (1)
                                                {
                                                  v1791 = (llvm::PointerType *)(v1057 & v1755);
                                                  v1058 = *(void **)(v1760 + 8 * v1791);
                                                  if (v1058 != (void *)-8)
                                                  {
                                                    if (!v1058) {
                                                      goto LABEL_1840;
                                                    }
                                                    if (*(_DWORD *)(v1748 + 4 * (void)v1791) == v1053
                                                      && __na == *v1058
                                                      && (!__na || !memcmp(__s1, (char *)v1058 + *(void *)v1721, __na)))
                                                    {
                                                      break;
                                                    }
                                                  }
                                                  int v1057 = v1782 + v1791;
                                                  ++v1782;
                                                }
                                                *(void *)(v1760 + 8 * (int)v1791) = -8;
                                                *(int32x2_t *)((char *)v1044 + 12) = vadd_s32(*(int32x2_t *)((char *)v1044 + 12), (int32x2_t)0x1FFFFFFFFLL);
                                              }
                                            }
                                          }
LABEL_1840:
                                          *((void *)v1730 + 5) = v1040;
                                          if (v1042 && v1725) {
                                            llvm::ValueSymbolTable::reinsertValue(v1042, v1730);
                                          }
                                          v1732 = (uint64_t *)v1732[1];
                                          v1017 = a1;
                                        }
                                        while (v1732 != v1029);
                                      }
                                    }
                                    uint64_t v1047 = *v1029;
                                    uint64_t v1048 = *v1038;
                                    *(void *)(v1048 + 8) = v1029;
                                    uint64_t *v1029 = v1048;
                                    uint64_t v1049 = *v1030;
                                    *(void *)(v1047 + 8) = v1030;
                                    uint64_t *v1038 = v1049;
                                    *(void *)(v1049 + 8) = v1038;
                                    uint64_t *v1030 = v1047;
                                  }
                                  v1004 = a2;
                                  v1005 = v1777;
                                  v1028 = v1734;
                                }
                              }
                            }
                            while (v1029 != v1028);
                          }
                          __src = &v1834;
                          uint64_t v1833 = 0x400000000;
                          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst.__r_.__value_.__r.__words[2];
                          __dst.__r_.__value_.__l.__size_ = 0x400000000;
                          int v1059 = *(_DWORD *)(*((void *)v1746 + 3) + 12);
                          unint64_t v1060 = (v1059 - 1);
                          v1061 = v1017 - 1;
                          v1062 = &v1017[4 * v1060];
                          unsigned int v1063 = v1059 + 1;
                          v1064 = v1771;
                          while (1)
                          {
                            int v1065 = *((unsigned __int8 *)v1017 + 16);
                            if (v1065 == 84)
                            {
                              uint64_t v1066 = 0;
                            }
                            else
                            {
                              if (v1065 == 39)
                              {
                                v1017 = a1;
                                uint64_t v1066 = (*((_DWORD *)a1 + 20) + 1);
                              }
                              else
                              {
                                uint64_t v1066 = 2;
                                v1017 = a1;
                              }
                              v1004 = a2;
                              v1064 = v1771;
                              v1005 = v1777;
                            }
                            int v1067 = *((_DWORD *)v1017 + 5);
                            if (v1067 < 0
                              && (uint64_t v1072 = v1067 & 0x7FFFFFF, ((unint64_t)v1061[-4 * v1072] & 0xFFFFFFFF0) != 0))
                            {
                              uint64_t v1069 = -v1072;
                              int v1068 = *((_DWORD *)&v1017[-4 * v1072 - 1] - 1)
                                    - *(_DWORD *)((char *)&v1017[-4 * v1072] - (unsigned char *)v1017[-4 * v1072 - 1]);
                            }
                            else
                            {
                              int v1068 = 0;
                              uint64_t v1069 = -(uint64_t)(v1067 & 0x7FFFFFF);
                            }
                            if (v1060 >= ((unint64_t)((char *)&(&v1064[4 * -v1068])[-4 * v1066]
                                                                          - (char *)&v1017[4 * v1069]) >> 5))
                              break;
                            if (v1833 >= (unint64_t)HIDWORD(v1833)) {
                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                            }
                            *((void *)__src + v1833) = v1062[4 * v1069];
                            LODWORD(v1833) = v1833 + 1;
                            v1070 = v1017[8];
                            if (v1070 && v1063 < *((_DWORD *)v1070 + 2)) {
                              uint64_t v1071 = v1070[v1063 + 5];
                            }
                            else {
                              uint64_t v1071 = 0;
                            }
                            if (LODWORD(__dst.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(__dst.__r_.__value_.__r.__words[1])) {
                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                            }
                            *(void *)(__dst.__r_.__value_.__r.__words[0]
                                      + 8 * LODWORD(__dst.__r_.__value_.__r.__words[1])) = v1071;
                            ++LODWORD(__dst.__r_.__value_.__r.__words[1]);
                            ++v1060;
                            v1062 += 4;
                            ++v1063;
                          }
                          if ((_BYTE)v1803)
                          {
                            if (v1065 == 84)
                            {
                              if ((*((_WORD *)v1017 + 9) & 3) == 3) {
                                unsigned int v1073 = 0;
                              }
                              else {
                                unsigned int v1073 = *((_WORD *)v1017 + 9) & 3;
                              }
                            }
                            else
                            {
                              unsigned int v1073 = 0;
                            }
                            if (v1740 == v1795)
                            {
                              char v1075 = 0;
                              char v1074 = 0;
                            }
                            else
                            {
                              char v1074 = 0;
                              char v1075 = 0;
                              uint64_t v1076 = v1740;
                              do
                              {
                                uint64_t v1077 = v1076 - 24;
                                if (!v1076) {
                                  uint64_t v1077 = 0;
                                }
                                uint64_t v1078 = v1077 + 40;
                                uint64_t v1079 = *(void *)(v1077 + 48);
                                while (v1079 != v1078)
                                {
                                  uint64_t v1080 = v1079;
                                  uint64_t v1079 = *(void *)(v1079 + 8);
                                  uint64_t v1081 = v1080 - 24;
                                  if (v1080) {
                                    uint64_t v1082 = v1080 - 24;
                                  }
                                  else {
                                    uint64_t v1082 = 0;
                                  }
                                  int v1083 = *(unsigned __int8 *)(v1082 + 16);
                                  if (v1083 == 84) {
                                    uint64_t v1084 = v1082;
                                  }
                                  else {
                                    uint64_t v1084 = 0;
                                  }
                                  if (v1080 && v1083 == 84)
                                  {
                                    if (v1833)
                                    {
                                      if (v1741)
                                      {
                                        uint64_t v1085 = *(void *)(v1084 - 32);
                                        if (!v1085
                                          || *(unsigned char *)(v1085 + 16)
                                          || *(void *)(v1085 + 24) != *(void *)(v1084 + 72))
                                        {
                                          uint64_t v1085 = 0;
                                        }
                                        if (v1085 == v1741) {
                                          goto LABEL_1895;
                                        }
                                      }
                                      if ((*(_WORD *)(v1084 + 18) & 3) == 2)
                                      {
LABEL_1895:
                                        uint64_t v1086 = *(void *)(v1084 + 64);
                                        v1877[0] = &v1877[2];
                                        v1877[1] = (void *)0x800000000;
                                        uint64_t v1087 = LODWORD(__dst.__r_.__value_.__r.__words[1]);
                                        if (v1086) {
                                          BOOL v1088 = 0;
                                        }
                                        else {
                                          BOOL v1088 = LODWORD(__dst.__r_.__value_.__r.__words[1]) == 0;
                                        }
                                        if (v1088)
                                        {
                                          uint64_t v1087 = 0;
                                        }
                                        else if (*(_DWORD *)(*(void *)(v1084 + 72) + 12) != 1)
                                        {
                                          unsigned int v1089 = 0;
                                          unint64_t v1090 = 0;
                                          do
                                          {
                                            if (v1086 && (v1090 + 2) < *(_DWORD *)(v1086 + 8)) {
                                              uint64_t v1091 = *(void *)(v1086 + 40 + 8 * (v1090 + 2));
                                            }
                                            else {
                                              uint64_t v1091 = 0;
                                            }
                                            if (v1089 >= HIDWORD(v1877[1])) {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                            }
                                            *((void *)v1877[0] + v1089) = v1091;
                                            unsigned int v1089 = ++LODWORD(v1877[1]);
                                            ++v1090;
                                          }
                                          while (v1090 < (*(_DWORD *)(*(void *)(v1084 + 72) + 12) - 1));
                                          uint64_t v1087 = LODWORD(__dst.__r_.__value_.__r.__words[1]);
                                        }
                                        sub_1CD47792C((unsigned int *)v1877, __dst.__r_.__value_.__l.__data_, (unsigned char *)(__dst.__r_.__value_.__r.__words[0] + 8 * v1087));
                                        if (v1086 && (int v1098 = *(_DWORD *)(v1086 + 8)) != 0)
                                        {
                                          uint64_t v1099 = *(void *)(v1086 + 40);
                                          if (v1098 != 1)
                                          {
                                            uint64_t v1100 = *(void *)(v1086 + 48);
                                            goto LABEL_1929;
                                          }
                                        }
                                        else
                                        {
                                          uint64_t v1099 = 0;
                                        }
                                        uint64_t v1100 = 0;
LABEL_1929:
                                        uint64_t v1761 = llvm::AttributeList::get(**(uint64_t ***)v1084, v1099, v1100, (void *)v1877[0], LODWORD(v1877[1]));
                                        int v1101 = *(_DWORD *)(v1084 + 20);
                                        int v1102 = *(unsigned __int8 *)(v1084 + 16);
                                        if (v1102 == 84)
                                        {
                                          uint64_t v1103 = 0;
                                        }
                                        else if (v1102 == 39)
                                        {
                                          uint64_t v1103 = (*(_DWORD *)(v1084 + 80) + 1);
                                        }
                                        else
                                        {
                                          uint64_t v1103 = 2;
                                        }
                                        uint64_t v1104 = v1101 & 0x7FFFFFF;
                                        v1105 = (void *)(v1084 - 32 * v1104);
                                        if (v1101 < 0 && (uint64_t v1131 = *(v1105 - 1), (v1131 & 0xFFFFFFFF0) != 0)) {
                                          uint64_t v1106 = (*((_DWORD *)v1105 - 3)
                                        }
                                                               - *(_DWORD *)((char *)v1105 - v1131));
                                        else {
                                          uint64_t v1106 = 0;
                                        }
                                        uint64_t v1107 = v1084 - 32 * v1103 - 32 * v1106 - 32;
                                        v1813 = &v1815;
                                        uint64_t v1814 = 0x600000000;
                                        unint64_t v1108 = v1107 - (void)v1105;
                                        if ((unint64_t)(v1107 - (void)v1105) >= 0xC1) {
                                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                                        }
                                        if (v1105 != (void *)v1107)
                                        {
                                          v1109 = v1813;
                                          uint64_t v1110 = 32 * v1104 - 32 * v1103 - 32 * v1106 - 32;
                                          do
                                          {
                                            uint64_t v1111 = *v1105;
                                            v1105 += 4;
                                            *v1109++ = v1111;
                                            v1110 -= 32;
                                          }
                                          while (v1110);
                                        }
                                        LODWORD(v1814) = v1108 >> 5;
                                        sub_1CB935BDC((unsigned int *)&v1813, __src, (unsigned char *)__src + 8 * v1833);
                                        v1112 = *(uint64_t ***)(v1084 + 72);
                                        v1749 = (uint64_t *)v1813;
                                        v1756 = *(uint64_t ***)(v1084 - 32);
                                        uint64_t v1113 = v1814;
                                        uint64_t v1114 = (v1814 + 1);
                                        BOOL v1115 = v1814 == -1;
                                        LOWORD(v1871) = 257;
                                        v1116 = operator new(32 * v1114 + 80);
                                        v1117 = &v1116[4 * v1114];
                                        int v1118 = *((_DWORD *)v1117 + 5) & 0x38000000 | v1114 & 0x7FFFFFF;
                                        *((_DWORD *)v1117 + 5) = v1118;
                                        if (!v1115)
                                        {
                                          do
                                          {
                                            void *v1116 = 0;
                                            v1116[1] = 0;
                                            v1116[2] = 0;
                                            v1116[3] = v1117;
                                            v1116 += 4;
                                          }
                                          while (v1116 != v1117);
                                          int v1118 = *((_DWORD *)v1117 + 5);
                                        }
                                        void *v1117 = *v1112[2];
                                        v1117[1] = 0;
                                        *((unsigned char *)v1117 + 16) = 84;
                                        *((unsigned char *)v1117 + 17) = 0;
                                        *((_WORD *)v1117 + 9) = 0;
                                        *((_DWORD *)v1117 + 5) = v1118 & 0xC0000000 | v1114 & 0x7FFFFFF;
                                        *(_OWORD *)(v1117 + 3) = 0u;
                                        v1119 = v1117 + 3;
                                        *(_OWORD *)(v1117 + 5) = 0u;
                                        *((_DWORD *)v1117 + 14) = 0;
                                        uint64_t v1120 = *(void *)(v1084 + 40);
                                        v1117[5] = v1120;
                                        *(_WORD *)(v1120 + 18) &= ~0x8000u;
                                        if ((*((unsigned char *)v1117 + 23) & 0x10) != 0)
                                        {
                                          uint64_t v1128 = *(void *)(v1120 + 56);
                                          if (v1128)
                                          {
                                            v1129 = *(llvm::ValueSymbolTable **)(v1128 + 104);
                                            if (v1129) {
                                              llvm::ValueSymbolTable::reinsertValue(v1129, (llvm::Value *)v1117);
                                            }
                                          }
                                        }
                                        uint64_t v1121 = *(void *)(v1084 + 24);
                                        v1117[3] = v1121;
                                        v1117[4] = v1084 + 24;
                                        *(void *)(v1121 + 8) = v1119;
                                        *(void *)(v1084 + 24) = v1119;
                                        v1117[8] = 0;
                                        llvm::CallInst::init((uint64_t ***)v1117, v1112, v1756, v1749, v1113, 0, 0, (const char **)v1869);
                                        v1122 = *(unsigned __int8 **)(v1084 + 48);
                                        v1797 = v1122;
                                        if (v1122) {
                                          llvm::MetadataTracking::track((uint64_t)&v1797, v1122, 2);
                                        }
                                        v1123 = (unsigned __int8 *)v1117[6];
                                        if (!v1123)
                                        {
LABEL_1944:
                                          v1124 = v1797;
                                          v1117[6] = v1797;
                                          if (v1124)
                                          {
                                            llvm::MetadataTracking::retrack((uint64_t)&v1797, v1124, (uint64_t)(v1117 + 6));
                                            v1797 = 0;
                                          }
                                          v1117[8] = v1761;
                                          *((_WORD *)v1117 + 9) = *((_WORD *)v1117 + 9) & 0xF003 | *(_WORD *)(v1084 + 18) & 0xFFC;
                                          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v1084, (llvm::Value *)v1117, (llvm::Value *)1);
                                          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                                        }
                                        int v1125 = *v1123;
                                        if ((v1125 - 4) > 0x1E)
                                        {
                                          if ((v1125 - 3) >= 0xFFFFFFFE) {
                                            uint64_t v1130 = v1117[6];
                                          }
                                          else {
                                            uint64_t v1130 = 0;
                                          }
                                          if ((v1125 - 3) < 0xFFFFFFFE)
                                          {
                                            if (v1125 == 3) {
                                              *((void *)v1123 + 1) = 0;
                                            }
                                            goto LABEL_1944;
                                          }
                                          unint64_t v1127 = v1130 + 8;
                                        }
                                        else
                                        {
                                          if ((v1123[1] & 0x7F) != 2 && !*((_DWORD *)v1123 + 3)) {
                                            goto LABEL_1944;
                                          }
                                          uint64_t v1126 = *((void *)v1123 + 2);
                                          if ((v1126 & 4) == 0) {
                                            goto LABEL_1944;
                                          }
                                          unint64_t v1127 = v1126 & 0xFFFFFFFFFFFFFFF8;
                                          if (!v1127) {
                                            goto LABEL_1944;
                                          }
                                        }
                                        *(void *)v1869 = v1117 + 6;
                                        sub_1CC5FA668(v1127 + 16, v1869);
                                        goto LABEL_1944;
                                      }
                                    }
                                    else
                                    {
                                      uint64_t v1081 = v1084;
                                    }
                                    uint64_t v1092 = *(void *)(v1081 - 32);
                                    if (v1092
                                      && !*(unsigned char *)(v1092 + 16)
                                      && *(void *)(v1092 + 24) == *(void *)(v1081 + 72))
                                    {
                                      char v1075 = v1075 & 1 | (*(_DWORD *)(v1092 + 36) == 119);
                                    }
                                    __int16 v1093 = *(_WORD *)(v1081 + 18);
                                    unsigned int v1094 = v1093 & 3;
                                    if (v1073 >= v1094) {
                                      int v1095 = v1093 & 3;
                                    }
                                    else {
                                      int v1095 = v1073;
                                    }
                                    __int16 v1096 = v1093 & 0xFFFC;
                                    if (v1094 == 3) {
                                      int v1097 = 3;
                                    }
                                    else {
                                      int v1097 = v1095;
                                    }
                                    *(_WORD *)(v1081 + 18) = v1097 | v1096;
                                    char v1074 = v1074 & 1 | (v1097 == 2);
                                    if (hasFnAttrOnCalledFunction) {
                                      *(void *)(v1081 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v1081 + 64), **(uint64_t ***)v1081, -1, 37);
                                    }
                                  }
                                }
                                uint64_t v1076 = *(void *)(v1076 + 8);
                              }
                              while (v1076 != v1795);
                            }
                            int v1783 = v1075 & 1;
                            int v1792 = v1074 & 1;
                            v1004 = a2;
                            v1005 = v1777;
                          }
                          else
                          {
                            int v1783 = 0;
                            int v1792 = 0;
                          }
                          if ((v1736 & 1) == 0)
                          {
                            uint64_t v1177 = *((void *)v1005 + 14);
                            if (v1177)
                            {
                              if (*(_DWORD *)(v1177 + 8))
                              {
                                uint64_t v1178 = *(void *)(v1177 + 40);
                                if (v1178)
                                {
                                  int v1179 = *(_DWORD *)(v1178 + 40);
                                  if (v1179)
                                  {
                                    uint64_t v1180 = *(void *)(v1178 + 24);
                                    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&qword_1EBCBE588))
                                    {
                                      unint64_t v1640 = llvm::hashing::detail::fixed_seed_override;
                                      if (!llvm::hashing::detail::fixed_seed_override) {
                                        unint64_t v1640 = 0xFF51AFD7ED558CCDLL;
                                      }
                                      qword_1EBCBE580 = v1640;
                                      __cxa_guard_release(&qword_1EBCBE588);
                                    }
                                    uint64_t v1181 = __ROR8__(qword_1EBCBE580 ^ 0x7A48DC6FE7EA5090, 30);
                                    unint64_t v1182 = 0x9DDFEA08EB382D69
                                          * ((qword_1EBCBE580 - 0x2D69957673248ED7) ^ ((0x9DDFEA08EB382D69
                                                                                        * ((v1181 - 0x574D426307C1BC2DLL) ^ (qword_1EBCBE580 - 0x2D69957673248ED7))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v1181 - 0x574D426307C1BC2DLL) ^ (qword_1EBCBE580 - 0x2D69957673248ED7))));
                                    unsigned int v1183 = -348639895 * ((v1182 >> 47) ^ v1182);
                                    for (int i3 = 1; ; ++i3)
                                    {
                                      unsigned int v1185 = v1183 & (v1179 - 1);
                                      v1186 = (uint64_t *)(v1180 + 24 * v1185);
                                      uint64_t v1187 = *v1186;
                                      if (*v1186 == -1)
                                      {
                                        if ("coroutine.presplit" == (char *)-1) {
                                          goto LABEL_1975;
                                        }
                                      }
                                      else if (v1187 == -2)
                                      {
                                        if ("coroutine.presplit" == (char *)-2) {
                                          goto LABEL_1975;
                                        }
                                      }
                                      else if (v1186[1] == 18)
                                      {
                                        v1023 = (llvm::LLVMContext *)*(unsigned __int16 *)(v1187 + 16);
                                        BOOL v1188 = *(void *)v1187 == 0x6E6974756F726F63
                                             && *(void *)(v1187 + 8) == 0x6C70736572702E65;
                                        if (v1188 && v1023 == 29801) {
                                          goto LABEL_1975;
                                        }
                                      }
                                      if (v1187 == -1) {
                                        goto LABEL_2075;
                                      }
                                      unsigned int v1183 = i3 + v1185;
                                    }
                                  }
                                }
                              }
                            }
                            goto LABEL_2075;
                          }
LABEL_1975:
                          if (!*((_DWORD *)v1004 + 14)) {
                            goto LABEL_2075;
                          }
                          uint64_t v1132 = 0;
                          uint64_t v1133 = *(void *)(v1739 + 48);
                          if (v1133) {
                            uint64_t v1134 = v1133 - 24;
                          }
                          else {
                            uint64_t v1134 = 0;
                          }
                          uint64_t v1135 = **(void **)v1134;
                          v1877[0] = &v1877[2];
                          v1877[1] = (void *)0x200000000;
                          uint64_t v1882 = v1135;
                          v1883 = &v1891;
                          v1884 = v1892;
                          uint64_t v1885 = 0;
                          int v1886 = 0;
                          __int16 v1887 = 512;
                          char v1888 = 7;
                          v1881 = 0;
                          uint64_t v1880 = 0;
                          uint64_t v1890 = 0;
                          uint64_t v1889 = 0;
                          v1891 = &unk_1F2616E88;
                          v1892[0] = &unk_1F2617008;
                          uint64_t v1880 = *(void *)(v1134 + 40);
                          v1881 = (void **)(v1134 + 24);
                          v1136 = *(unsigned __int8 **)(v1134 + 48);
                          *(void *)v1869 = v1136;
                          if (v1136)
                          {
                            llvm::MetadataTracking::track((uint64_t)v1869, v1136, 2);
                            uint64_t v1132 = *(void *)v1869;
                          }
                          sub_1CB8461A4((uint64_t)v1877, 0, v1132);
                          if (*(void *)v1869)
                          {
                            int v1616 = **(unsigned char **)v1869;
                            if ((v1616 - 4) > 0x1E)
                            {
                              if ((v1616 - 3) >= 0xFFFFFFFE) {
                                uint64_t v1638 = *(void *)v1869;
                              }
                              else {
                                uint64_t v1638 = 0;
                              }
                              if ((v1616 - 3) < 0xFFFFFFFE)
                              {
                                v1004 = a2;
                                if (v1616 == 3) {
                                  *(void *)(*(void *)v1869 + 8) = 0;
                                }
                                goto LABEL_1982;
                              }
                              unint64_t v1618 = v1638 + 8;
                            }
                            else
                            {
                              if ((*(unsigned char *)(*(void *)v1869 + 1) & 0x7F) != 2
                                && !*(_DWORD *)(*(void *)v1869 + 12))
                              {
                                goto LABEL_1982;
                              }
                              uint64_t v1617 = *(void *)(*(void *)v1869 + 16);
                              if ((v1617 & 4) == 0) {
                                goto LABEL_1982;
                              }
                              unint64_t v1618 = v1617 & 0xFFFFFFFFFFFFFFF8;
                              if (!v1618) {
                                goto LABEL_1982;
                              }
                            }
                            v1813 = v1869;
                            sub_1CC5FA668(v1618 + 16, &v1813);
                            v1004 = a2;
                          }
LABEL_1982:
                          size_t __nb = *((unsigned int *)v1004 + 14);
                          if (__nb)
                          {
                            uint64_t v1137 = 0;
                            while (1)
                            {
                              v1138 = *(llvm::Value **)(a2[6] + 8 * v1137);
                              if ((*((_WORD *)v1138 + 9) & 0x80) != 0) {
                                goto LABEL_2047;
                              }
                              v1139 = *(void ***)v1138;
                              unsigned int v1140 = *(_DWORD *)(*(void *)v1138 + 8);
                              if ((v1140 & 0xFE) == 0x12) {
                                unsigned int v1140 = *(_DWORD *)(*v1139[2] + 8);
                              }
                              unint64_t v1141 = llvm::PointerType::get((llvm::PointerType *)(**v1139 + 1912), (llvm::Type *)(v1140 >> 8));
                              if (v1139 == (void **)v1141)
                              {
                                if (sub_1CD17B104(*((void *)v1138 + 1))) {
                                  goto LABEL_2047;
                                }
                              }
                              else
                              {
                                v1142 = (void **)*((void *)v1138 + 1);
                                if (v1142)
                                {
                                  unint64_t v1143 = v1141;
                                  do
                                  {
                                    v1144 = v1142[3];
                                    if (*v1144 == v1143
                                      && llvm::Value::stripPointerCasts((llvm::Value *)v1142[3]) == v1138
                                      && (sub_1CD17B104(v1144[1]) & 1) != 0)
                                    {
                                      goto LABEL_2047;
                                    }
                                    v1142 = (void **)v1142[1];
                                  }
                                  while (v1142);
                                }
                              }
                              uint64_t v1145 = *((void *)v1138 - 4);
                              if (v1145 && *(unsigned char *)(v1145 + 16) == 16)
                              {
                                v1158 = (llvm::DataLayout *)(*((void *)v1777 + 5) + 272);
                                v1159 = (llvm::Type *)*((void *)v1138 + 8);
                                uint64_t v1762 = sub_1CB83544C((uint64_t)v1158, (uint64_t)v1159);
                                BOOL v1161 = v1160 == 1;
                                char v1162 = llvm::DataLayout::getAlignment(v1158, v1159, 1);
                                v1164 = (unint64_t *)(v1145 + 24);
                                uint64_t v1165 = *(unsigned int *)(v1145 + 32);
                                if (v1165 < 0x41) {
                                  goto LABEL_2036;
                                }
                                int v1166 = 0;
                                int64_t v1167 = (unint64_t)(v1165 + 63) >> 6;
                                do
                                {
                                  BOOL v182 = v1167-- < 1;
                                  if (v182) {
                                    break;
                                  }
                                  unint64_t v1168 = *(void *)(*v1164 + 8 * v1167);
                                  v1166 += __clz(v1168);
                                }
                                while (!v1168);
                                int v1169 = v1165 | 0xFFFFFFC0;
                                if ((v1165 & 0x3F) == 0) {
                                  int v1169 = 0;
                                }
                                if ((v1165 - v1166 - v1169) <= 0x40) {
                                  break;
                                }
                              }
                              v1147 = 0;
LABEL_2001:
                              llvm::IRBuilderBase::CreateLifetimeStart((llvm::IRBuilderBase *)v1877, v1138, v1147);
                              if (v1843)
                              {
                                v1148 = (uint64_t ***)v1842;
                                uint64_t v1149 = 8 * v1843;
                                while (1)
                                {
                                  v1150 = *v1148;
                                  if ((!v1792
                                     || !llvm::BasicBlock::getTerminatingMustTailCall((llvm::BasicBlock *)v1150[5]))
                                    && (!v1783
                                     || !llvm::BasicBlock::getTerminatingDeoptimizeCall((llvm::BasicBlock *)v1150[5])))
                                  {
                                    break;
                                  }
LABEL_2012:
                                  ++v1148;
                                  v1149 -= 8;
                                  if (!v1149) {
                                    goto LABEL_2047;
                                  }
                                }
                                v1151 = 0;
                                uint64_t v1152 = **v1150;
                                v1813 = &v1815;
                                uint64_t v1814 = 0x200000000;
                                uint64_t v1821 = v1152;
                                v1822 = &v1830;
                                v1823 = &v1831;
                                uint64_t v1824 = 0;
                                int v1825 = 0;
                                __int16 v1826 = 512;
                                char v1827 = 7;
                                v1819 = 0;
                                v1820 = 0;
                                uint64_t v1828 = 0;
                                uint64_t v1829 = 0;
                                v1830 = &unk_1F2616E88;
                                v1831 = &unk_1F2617008;
                                v1819 = v1150[5];
                                v1820 = v1150 + 3;
                                v1153 = v1150[6];
                                v1837 = v1153;
                                if (v1153)
                                {
                                  llvm::MetadataTracking::track((uint64_t)&v1837, (unsigned __int8 *)v1153, 2);
                                  v1151 = v1837;
                                }
                                sub_1CB8461A4((uint64_t)&v1813, 0, (uint64_t)v1151);
                                if (!v1837)
                                {
LABEL_2010:
                                  llvm::IRBuilderBase::CreateLifetimeEnd((llvm::IRBuilderBase *)&v1813, v1138, v1147);
                                  if (v1813 != &v1815) {
                                    free(v1813);
                                  }
                                  goto LABEL_2012;
                                }
                                int v1154 = *(unsigned __int8 *)v1837;
                                if ((v1154 - 4) > 0x1E)
                                {
                                  if ((v1154 - 3) >= 0xFFFFFFFE) {
                                    v1157 = v1837;
                                  }
                                  else {
                                    v1157 = 0;
                                  }
                                  if ((v1154 - 3) < 0xFFFFFFFE)
                                  {
                                    if (v1154 == 3) {
                                      *((void *)v1837 + 1) = 0;
                                    }
                                    goto LABEL_2010;
                                  }
                                  unint64_t v1156 = (unint64_t)v1157 + 8;
                                }
                                else
                                {
                                  if ((*((unsigned char *)v1837 + 1) & 0x7F) != 2 && !*((_DWORD *)v1837 + 3)) {
                                    goto LABEL_2010;
                                  }
                                  uint64_t v1155 = *((void *)v1837 + 2);
                                  if ((v1155 & 4) == 0) {
                                    goto LABEL_2010;
                                  }
                                  unint64_t v1156 = v1155 & 0xFFFFFFFFFFFFFFF8;
                                  if (!v1156) {
                                    goto LABEL_2010;
                                  }
                                }
                                *(void *)v1869 = &v1837;
                                sub_1CC5FA668(v1156 + 16, v1869);
                                goto LABEL_2010;
                              }
LABEL_2047:
                              if (++v1137 == __nb) {
                                goto LABEL_2073;
                              }
                            }
                            v1164 = (unint64_t *)*v1164;
LABEL_2036:
                            unint64_t v1170 = *v1164;
                            if (!v1170) {
                              goto LABEL_2047;
                            }
                            v1147 = 0;
                            if (!v1161 && v1170 != -1)
                            {
                              v1147 = 0;
                              unint64_t v1171 = ((1 << v1162) + ((unint64_t)(v1762 + 7) >> 3) - 1) & -(1 << v1162);
                              if (is_mul_ok(v1170, v1171))
                              {
                                unint64_t v1172 = v1170 * v1171;
                                uint64_t v1173 = ***(void ***)v1138;
                                v1174 = *(llvm::ConstantInt **)(v1173 + 1984);
                                unint64_t v1175 = *(unsigned int *)(v1173 + 1992);
                                LODWORD(v1814) = v1175 >> 8;
                                if (v1175 >> 8 > 0x40) {
                                  operator new[]();
                                }
                                if (v1175 <= 0xFF) {
                                  unint64_t v1176 = 0;
                                }
                                else {
                                  unint64_t v1176 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v1175) + 63);
                                }
                                v1813 = (void *)(v1176 & v1172);
                                v1147 = (llvm::ConstantInt *)llvm::ConstantInt::get(v1174, (llvm::LLVMContext *)&v1813, v1163);
                                if (v1814 >= 0x41 && v1813) {
                                  MEMORY[0x1D25D9CB0](v1813, 0x1000C8000313F17);
                                }
                              }
                            }
                            goto LABEL_2001;
                          }
LABEL_2073:
                          if (v1877[0] != &v1877[2]) {
                            free(v1877[0]);
                          }
LABEL_2075:
                          if (HIBYTE(v1803))
                          {
                            v1190 = (uint64_t **)*((void *)v1777 + 5);
                            llvm::Intrinsic::getType(*v1190, 288, 0, 0);
                            v1191 = (llvm::PointerType *)llvm::Intrinsic::getType(*v1190, 288, 0, 0);
                            llvm::Module::getOrInsertFunction((uint64_t)v1190, "llvm.stacksave", (const char *)0xE, v1191, 0);
                            uint64_t v1193 = v1192;
                            llvm::Intrinsic::getType(*v1190, 287, 0, 0);
                            v1194 = (llvm::PointerType *)llvm::Intrinsic::getType(*v1190, 287, 0, 0);
                            llvm::Module::getOrInsertFunction((uint64_t)v1190, "llvm.stackrestore", (const char *)0x11, v1194, 0);
                            uint64_t v1196 = v1195;
                            sub_1CBF537B4((uint64_t)v1877, (uint64_t **)v1739, *(void *)(v1739 + 48), 0, 0, 0);
                            if (v1193) {
                              v1197 = *(uint64_t ***)(v1193 + 24);
                            }
                            else {
                              v1197 = 0;
                            }
                            v1813 = "savedstack";
                            LOWORD(v1817) = 259;
                            uint64_t v1198 = sub_1CB845BAC((uint64_t *)v1877, v1197, (uint64_t **)v1193, 0, 0, (uint64_t)&v1813, 0);
                            if (v1877[0] != &v1877[2]) {
                              free(v1877[0]);
                            }
                            if (v1843)
                            {
                              v1199 = (uint64_t *)v1842;
                              uint64_t v1200 = 8 * v1843;
                              while (1)
                              {
                                uint64_t v1201 = *v1199;
                                if ((!v1792
                                   || !llvm::BasicBlock::getTerminatingMustTailCall(*(llvm::BasicBlock **)(v1201 + 40)))
                                  && (!v1783
                                   || !llvm::BasicBlock::getTerminatingDeoptimizeCall(*(llvm::BasicBlock **)(v1201 + 40))))
                                {
                                  break;
                                }
LABEL_2095:
                                ++v1199;
                                v1200 -= 8;
                                if (!v1200) {
                                  goto LABEL_2111;
                                }
                              }
                              uint64_t v1202 = 0;
                              uint64_t v1203 = **(void **)v1201;
                              v1877[0] = &v1877[2];
                              v1877[1] = (void *)0x200000000;
                              uint64_t v1882 = v1203;
                              v1883 = &v1891;
                              v1884 = v1892;
                              uint64_t v1885 = 0;
                              int v1886 = 0;
                              __int16 v1887 = 512;
                              char v1888 = 7;
                              uint64_t v1880 = 0;
                              v1881 = 0;
                              uint64_t v1889 = 0;
                              uint64_t v1890 = 0;
                              v1891 = &unk_1F2616E88;
                              v1892[0] = &unk_1F2617008;
                              uint64_t v1880 = *(void *)(v1201 + 40);
                              v1881 = (void **)(v1201 + 24);
                              v1204 = *(unsigned __int8 **)(v1201 + 48);
                              *(void *)v1869 = v1204;
                              if (v1204)
                              {
                                llvm::MetadataTracking::track((uint64_t)v1869, v1204, 2);
                                uint64_t v1202 = *(void *)v1869;
                              }
                              sub_1CB8461A4((uint64_t)v1877, 0, v1202);
                              if (!*(void *)v1869)
                              {
LABEL_2090:
                                if (v1196) {
                                  v1205 = *(uint64_t ***)(v1196 + 24);
                                }
                                else {
                                  v1205 = 0;
                                }
                                *(void *)v1869 = v1198;
                                LOWORD(v1817) = 257;
                                sub_1CB845BAC((uint64_t *)v1877, v1205, (uint64_t **)v1196, (uint64_t *)v1869, 1, (uint64_t)&v1813, 0);
                                if (v1877[0] != &v1877[2]) {
                                  free(v1877[0]);
                                }
                                goto LABEL_2095;
                              }
                              int v1206 = **(unsigned char **)v1869;
                              if ((v1206 - 4) > 0x1E)
                              {
                                if ((v1206 - 3) >= 0xFFFFFFFE) {
                                  uint64_t v1209 = *(void *)v1869;
                                }
                                else {
                                  uint64_t v1209 = 0;
                                }
                                if ((v1206 - 3) < 0xFFFFFFFE)
                                {
                                  if (v1206 == 3) {
                                    *(void *)(*(void *)v1869 + 8) = 0;
                                  }
                                  goto LABEL_2090;
                                }
                                unint64_t v1208 = v1209 + 8;
                              }
                              else
                              {
                                if ((*(unsigned char *)(*(void *)v1869 + 1) & 0x7F) != 2
                                  && !*(_DWORD *)(*(void *)v1869 + 12))
                                {
                                  goto LABEL_2090;
                                }
                                uint64_t v1207 = *(void *)(*(void *)v1869 + 16);
                                if ((v1207 & 4) == 0) {
                                  goto LABEL_2090;
                                }
                                unint64_t v1208 = v1207 & 0xFFFFFFFFFFFFFFF8;
                                if (!v1208) {
                                  goto LABEL_2090;
                                }
                              }
                              v1813 = v1869;
                              sub_1CC5FA668(v1208 + 16, &v1813);
                              goto LABEL_2090;
                            }
                          }
LABEL_2111:
                          v1210 = a1;
                          if (*((unsigned char *)a1 + 16) == 33)
                          {
                            v1757 = (llvm::BasicBlock *)*(a1 - 8);
                            uint64_t v1211 = *((void *)v1757 + 6);
                            v1212 = (llvm::ValueAsMetadata *)(v1211 - 24);
                            if (v1211) {
                              uint64_t v1213 = v1211 - 24;
                            }
                            else {
                              uint64_t v1213 = 0;
                            }
                            int v1214 = *(unsigned __int8 *)(v1213 + 16);
                            uint64_t v1215 = *((void *)v1757 + 6);
                            if (v1214 == 83)
                            {
                              uint64_t v1215 = *((void *)v1757 + 6);
                              do
                              {
                                uint64_t v1215 = *(void *)(v1215 + 8);
                                uint64_t v1216 = v1215 - 24;
                                if (!v1215) {
                                  uint64_t v1216 = 0;
                                }
                              }
                              while (*(unsigned char *)(v1216 + 16) == 83);
                            }
                            __s1a = *(llvm::ConstantTokenNone ****)(v1739 + 56);
                            if (*(unsigned char *)(v1215 - 8) == 94)
                            {
                              uint64_t v1816 = 0;
                              v1815 = 0;
                              v1813 = v1757;
                              uint64_t v1814 = 0;
                              v1817 = &v1819;
                              uint64_t v1818 = 0x800000000;
                              if (*(unsigned char *)(v1213 + 16) == 83)
                              {
                                uint64_t v1217 = (uint64_t)a1[5];
                                do
                                {
                                  uint64_t v1218 = sub_1CBF73380((uint64_t)v1212, v1217);
                                  if (v1818 >= (unint64_t)HIDWORD(v1818)) {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                                  }
                                  *((void *)v1817 + v1818) = v1218;
                                  LODWORD(v1818) = v1818 + 1;
                                  uint64_t v1211 = *(void *)(v1211 + 8);
                                  v1212 = (llvm::ValueAsMetadata *)(v1211 - 24);
                                  if (v1211) {
                                    uint64_t v1219 = v1211 - 24;
                                  }
                                  else {
                                    uint64_t v1219 = 0;
                                  }
                                }
                                while (*(unsigned char *)(v1219 + 16) == 83);
                              }
                              v1726 = (void **)&v1819;
                              v1815 = v1212;
                              v1224 = &v1878.i8[8];
                              v1877[0] = &v1878.u64[1];
                              v1877[1] = &v1878.u64[1];
                              v1877[2] = (void *)16;
                              v1878.i32[0] = 0;
                              uint64_t v1225 = v1739 + 24;
                              size_t __nc = (size_t)(__s1a + 9);
                              if ((llvm::ConstantTokenNone ***)(v1739 + 24) != __s1a + 9)
                              {
                                unsigned int v1226 = 0;
                                unsigned int v1227 = 16;
                                v1228 = &v1878.i8[8];
                                uint64_t v1229 = v1739 + 24;
                                while (1)
                                {
                                  if (v1225) {
                                    uint64_t v1230 = v1225 - 24;
                                  }
                                  else {
                                    uint64_t v1230 = 0;
                                  }
                                  uint64_t v1231 = *(void *)(v1230 + 40);
                                  if (v1231 == v1230 + 40) {
                                    goto LABEL_2199;
                                  }
                                  uint64_t v1232 = v1231 - 24;
                                  if (!v1231) {
                                    uint64_t v1232 = 0;
                                  }
                                  unsigned int v1233 = *(unsigned __int8 *)(v1232 + 16) - 40;
                                  if (v1233 < 0xFFFFFFF5) {
                                    uint64_t v1232 = 0;
                                  }
                                  if (!v1231) {
                                    goto LABEL_2199;
                                  }
                                  if (*(unsigned char *)(v1232 + 16) != 33 || v1233 < 0xFFFFFFF5) {
                                    goto LABEL_2199;
                                  }
                                  uint64_t v1235 = *(void *)(v1232 - 64);
                                  uint64_t v1236 = v1235 + 40;
                                  for (uint64_t i4 = *(void *)(v1235 + 48); i4 != v1236; uint64_t i4 = *(void *)(i4 + 8))
                                  {
                                    uint64_t v1238 = i4 - 24;
                                    if (i4) {
                                      uint64_t v1239 = i4 - 24;
                                    }
                                    else {
                                      uint64_t v1239 = 0;
                                    }
                                    if (*(unsigned char *)(v1239 + 16) != 83) {
                                      goto LABEL_2167;
                                    }
                                  }
                                  uint64_t v1238 = 0;
LABEL_2167:
                                  if (v1228 != v1224) {
                                    break;
                                  }
                                  if (!v1226) {
                                    goto LABEL_2175;
                                  }
                                  v1240 = 0;
                                  uint64_t v1241 = 8 * v1226;
                                  v1242 = v1224;
                                  do
                                  {
                                    if (*(void *)v1242 == v1238) {
                                      goto LABEL_2198;
                                    }
                                    if (*(void *)v1242 == -2) {
                                      v1240 = v1242;
                                    }
                                    v1242 += 8;
                                    v1241 -= 8;
                                  }
                                  while (v1241);
                                  if (v1240)
                                  {
                                    *(void *)v1240 = v1238;
                                    --v1878.i32[0];
                                  }
                                  else
                                  {
LABEL_2175:
                                    if (v1227 <= v1226) {
                                      break;
                                    }
                                    HIDWORD(v1877[2]) = v1226 + 1;
                                    *(void *)&v1224[8 * v1226] = v1238;
                                  }
LABEL_2198:
                                  v1228 = (__int8 *)v1877[1];
                                  v1224 = (__int8 *)v1877[0];
                                  unsigned int v1226 = HIDWORD(v1877[2]);
                                  unsigned int v1227 = v1877[2];
LABEL_2199:
                                  uint64_t v1225 = *(void *)(v1225 + 8);
                                  if (v1225 == __nc)
                                  {
                                    v1212 = v1815;
                                    goto LABEL_2329;
                                  }
                                }
                                if (3 * v1227 <= 4 * (v1226 - v1878.i32[0]))
                                {
                                  if (v1227 >= 0x40) {
                                    v1227 *= 2;
                                  }
                                  else {
                                    unsigned int v1227 = 128;
                                  }
                                }
                                else if (v1227 - v1226 >= v1227 >> 3)
                                {
                                  goto LABEL_2179;
                                }
                                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v1877, v1227);
                                unsigned int v1227 = v1877[2];
                                v1228 = (__int8 *)v1877[1];
LABEL_2179:
                                unsigned int v1243 = v1227 - 1;
                                unsigned int v1244 = (v1227 - 1) & ((v1238 >> 4) ^ (v1238 >> 9));
                                v1245 = &v1228[8 * v1244];
                                uint64_t v1246 = *(void *)v1245;
                                if (*(void *)v1245 == -1)
                                {
                                  v1247 = 0;
LABEL_2191:
                                  if (v1247) {
                                    v1251 = v1247;
                                  }
                                  else {
                                    v1251 = v1245;
                                  }
                                  if (*(void *)v1251 != v1238)
                                  {
                                    if (*(void *)v1251 == -2) {
                                      --v1878.i32[0];
                                    }
                                    else {
                                      ++HIDWORD(v1877[2]);
                                    }
                                    *(void *)v1251 = v1238;
                                  }
                                }
                                else
                                {
                                  v1247 = 0;
                                  int v1248 = 1;
                                  while (v1246 != v1238)
                                  {
                                    if (v1247) {
                                      BOOL v1249 = 0;
                                    }
                                    else {
                                      BOOL v1249 = v1246 == -2;
                                    }
                                    if (v1249) {
                                      v1247 = v1245;
                                    }
                                    unsigned int v1250 = v1244 + v1248++;
                                    unsigned int v1244 = v1250 & v1243;
                                    v1245 = &v1228[8 * (v1250 & v1243)];
                                    uint64_t v1246 = *(void *)v1245;
                                    if (*(void *)v1245 == -1) {
                                      goto LABEL_2191;
                                    }
                                  }
                                }
                                goto LABEL_2198;
                              }
                              uint64_t v1229 = v1739 + 24;
                              unsigned int v1226 = 0;
                              unsigned int v1227 = 16;
                              v1228 = &v1878.i8[8];
LABEL_2329:
                              if (v1228 == v1224) {
                                uint64_t v1337 = v1226;
                              }
                              else {
                                uint64_t v1337 = v1227;
                              }
                              v1338 = v1228;
                              if (v1337)
                              {
                                uint64_t v1339 = 8 * v1337;
                                v1338 = v1228;
                                while (*(void *)v1338 >= 0xFFFFFFFFFFFFFFFELL)
                                {
                                  v1338 += 8;
                                  v1339 -= 8;
                                  if (!v1339) {
                                    goto LABEL_2351;
                                  }
                                }
                              }
                              v1340 = &v1228[8 * v1337];
                              if (v1338 != v1340)
                              {
                                v1341 = *(llvm::LandingPadInst **)v1338;
                                while (1)
                                {
                                  int v1342 = *((_DWORD *)v1212 + 5);
                                  uint64_t v1343 = v1342 & 0x7FFFFFF;
                                  llvm::LandingPadInst::growOperands(v1341, v1342 & 0x7FFFFFF);
                                  if (v1343)
                                  {
                                    uint64_t v1344 = 0;
                                    uint64_t v1345 = 32 * v1343;
                                    do
                                    {
                                      int v1346 = *((_DWORD *)v1212 + 5);
                                      if ((v1346 & 0x40000000) != 0) {
                                        v1347 = (char *)*((void *)v1212 - 1);
                                      }
                                      else {
                                        v1347 = (char *)v1212 - 32 * (v1346 & 0x7FFFFFF);
                                      }
                                      llvm::LandingPadInst::addClause(v1341, *(llvm::Constant **)&v1347[v1344]);
                                      v1344 += 32;
                                    }
                                    while (v1345 != v1344);
                                  }
                                  if (*((_WORD *)v1212 + 9)) {
                                    *((_WORD *)v1341 + 9) |= 1u;
                                  }
                                  v1348 = (unint64_t *)(v1338 + 8);
                                  do
                                  {
                                    if (v1348 == (unint64_t *)v1340) {
                                      goto LABEL_2351;
                                    }
                                    unint64_t v1349 = *v1348++;
                                    v1341 = (llvm::LandingPadInst *)v1349;
                                  }
                                  while (v1349 > 0xFFFFFFFFFFFFFFFDLL);
                                  v1338 = (char *)(v1348 - 1);
                                }
                              }
LABEL_2351:
                              if (v1229 != __nc)
                              {
                                uint64_t v1350 = v1229;
                                do
                                {
                                  if ((_BYTE)v1803)
                                  {
                                    uint64_t v1351 = v1350 ? v1350 - 24 : 0;
                                    uint64_t v1352 = sub_1CD17B180(v1351, (llvm::CallInst *)v1813, 0);
                                    if (v1352)
                                    {
                                      size_t v1353 = v1818;
                                      if (v1818)
                                      {
                                        uint64_t v1354 = v1352;
                                        uint64_t v1355 = 0;
                                        v1356 = (uint64_t *)((char *)v1813 + 48);
                                        uint64_t v1764 = v1350;
                                        size_t v1751 = v1818;
                                        do
                                        {
                                          uint64_t v1357 = *v1356;
                                          uint64_t v1358 = *v1356 - 24;
                                          if (v1357) {
                                            uint64_t v1359 = v1358;
                                          }
                                          else {
                                            uint64_t v1359 = 0;
                                          }
                                          uint64_t v1360 = *((void *)v1817 + v1355);
                                          int v1361 = *(_DWORD *)(v1359 + 20);
                                          uint64_t v1362 = v1361 & 0x7FFFFFF;
                                          if ((v1361 & 0x7FFFFFF) == *(_DWORD *)(v1359 + 60))
                                          {
                                            unsigned int v1375 = v1362 + (v1362 >> 1);
                                            if (v1375 <= 2) {
                                              uint64_t v1376 = 2;
                                            }
                                            else {
                                              uint64_t v1376 = v1375;
                                            }
                                            *(_DWORD *)(v1359 + 60) = v1376;
                                            if ((v1361 & 0x40000000) != 0) {
                                              v1377 = *(uint64_t **)(v1359 - 8);
                                            }
                                            else {
                                              v1377 = (uint64_t *)(v1359 - 32 * v1362);
                                            }
                                            v1773 = v1377;
                                            v1378 = operator new(40 * v1376);
                                            *(void *)(v1359 - 8) = v1378;
                                            v1379 = v1378;
                                            do
                                            {
                                              void *v1379 = 0;
                                              v1379[1] = 0;
                                              v1379[2] = 0;
                                              v1379[3] = v1359;
                                              v1379 += 4;
                                            }
                                            while (v1379 != &v1378[4 * v1376]);
                                            int v1380 = *(_DWORD *)(v1359 + 20);
                                            if ((v1380 & 0x40000000) != 0) {
                                              uint64_t v1381 = (uint64_t)v1378;
                                            }
                                            else {
                                              uint64_t v1381 = v1359 - 32 * (v1380 & 0x7FFFFFF);
                                            }
                                            sub_1CC5E4108((uint64_t)v1869, v1773, &v1773[4 * v1362], v1381);
                                            if (v1362)
                                            {
                                              memmove((void *)(v1381 + 32 * v1376), &v1773[4 * v1362], 8 * v1362);
                                              uint64_t v1382 = 4 * v1362;
                                              do
                                              {
                                                v1383 = &v1773[v1382];
                                                if (v1773[v1382 - 4])
                                                {
                                                  *(void *)*(v1383 - 2) = *(v1383 - 3);
                                                  uint64_t v1384 = *(v1383 - 3);
                                                  if (v1384) {
                                                    *(void *)(v1384 + 16) = *(v1383 - 2);
                                                  }
                                                }
                                                v1382 -= 4;
                                              }
                                              while (v1382 * 8);
                                            }
                                            operator delete(v1773);
                                            int v1361 = *(_DWORD *)(v1359 + 20);
                                            v1210 = a1;
                                            uint64_t v1350 = v1764;
                                            size_t v1353 = v1751;
                                          }
                                          uint64_t v1363 = (v1361 + 1) & 0x7FFFFFF;
                                          *(_DWORD *)(v1359 + 20) = v1361 & 0xF8000000 | (v1361 + 1) & 0x7FFFFFF;
                                          if ((v1361 & 0x40000000) != 0) {
                                            uint64_t v1364 = *(void *)(v1359 - 8);
                                          }
                                          else {
                                            uint64_t v1364 = v1359 - 32 * v1363;
                                          }
                                          uint64_t v1365 = (v1363 - 1);
                                          uint64_t v1366 = v1364 + 32 * v1365;
                                          if (*(void *)v1366)
                                          {
                                            **(void **)(v1366 + 16) = *(void *)(v1366 + 8);
                                            uint64_t v1374 = *(void *)(v1366 + 8);
                                            if (v1374) {
                                              *(void *)(v1374 + 16) = *(void *)(v1366 + 16);
                                            }
                                          }
                                          *(void *)uint64_t v1366 = v1360;
                                          if (v1360)
                                          {
                                            uint64_t v1369 = *(void *)(v1360 + 8);
                                            v1368 = (uint64_t *)(v1360 + 8);
                                            uint64_t v1367 = v1369;
                                            uint64_t v1370 = v1364 + 32 * v1365;
                                            *(void *)(v1370 + 8) = v1369;
                                            if (v1369) {
                                              *(void *)(v1367 + 16) = v1370 + 8;
                                            }
                                            *(void *)(v1370 + 16) = v1368;
                                            uint64_t *v1368 = v1366;
                                          }
                                          int v1371 = *(_DWORD *)(v1359 + 20);
                                          uint64_t v1372 = v1371 & 0x7FFFFFF;
                                          if ((v1371 & 0x40000000) != 0) {
                                            uint64_t v1373 = *(void *)(v1359 - 8);
                                          }
                                          else {
                                            uint64_t v1373 = v1359 - 32 * v1372;
                                          }
                                          *(void *)(v1373
                                                    + 32 * *(unsigned int *)(v1359 + 60)
                                                    + 8 * (v1372 - 1)) = v1354;
                                          ++v1355;
                                          v1356 = (uint64_t *)(v1357 + 8);
                                        }
                                        while (v1355 != v1353);
                                      }
                                    }
                                  }
                                  if (v1350) {
                                    uint64_t v1385 = v1350 - 24;
                                  }
                                  else {
                                    uint64_t v1385 = 0;
                                  }
                                  uint64_t v1386 = *(void *)(v1385 + 40);
                                  if (v1386 != v1385 + 40)
                                  {
                                    uint64_t v1387 = v1386 ? v1386 - 24 : 0;
                                    unsigned int v1388 = *(unsigned __int8 *)(v1387 + 16) - 40;
                                    uint64_t v1389 = v1388 >= 0xFFFFFFF5 ? v1387 : 0;
                                    if (v1386)
                                    {
                                      if (*(unsigned char *)(v1389 + 16) == 34 && v1388 >= 0xFFFFFFF5)
                                      {
                                        v1391 = (llvm::BasicBlock *)v1814;
                                        uint64_t v1745 = v1389;
                                        if (v1814)
                                        {
                                          v1405 = *(llvm::BasicBlock **)(v1389 + 40);
                                          v1406 = operator new(0x60uLL);
                                          v1406[13] = v1406[13] & 0x38000000 | 1;
                                          *(void *)v1406 = 0;
                                          *((void *)v1406 + 1) = 0;
                                          *((void *)v1406 + 2) = 0;
                                          *((void *)v1406 + 3) = v1406 + 8;
                                          llvm::BranchInst::BranchInst((llvm::BranchInst *)(v1406 + 8), v1391, v1405);
                                          uint64_t v1407 = v1818;
                                          size_t v1752 = (size_t)v1405;
                                          if (v1818)
                                          {
                                            uint64_t v1408 = 0;
                                            v1409 = (uint64_t *)((char *)v1391 + 48);
                                            do
                                            {
                                              uint64_t v1410 = *v1409;
                                              uint64_t v1411 = *v1409 - 24;
                                              if (v1410) {
                                                uint64_t v1412 = v1411;
                                              }
                                              else {
                                                uint64_t v1412 = 0;
                                              }
                                              uint64_t v1413 = *((void *)v1817 + v1408);
                                              int v1414 = *(_DWORD *)(v1412 + 20);
                                              uint64_t v1415 = v1414 & 0x7FFFFFF;
                                              if ((v1414 & 0x7FFFFFF) == *(_DWORD *)(v1412 + 60))
                                              {
                                                unsigned int v1428 = v1415 + (v1415 >> 1);
                                                if (v1428 <= 2) {
                                                  uint64_t v1429 = 2;
                                                }
                                                else {
                                                  uint64_t v1429 = v1428;
                                                }
                                                *(_DWORD *)(v1412 + 60) = v1429;
                                                if ((v1414 & 0x40000000) != 0) {
                                                  v1430 = *(uint64_t **)(v1412 - 8);
                                                }
                                                else {
                                                  v1430 = (uint64_t *)(v1412 - 32 * v1415);
                                                }
                                                v1774 = v1430;
                                                v1431 = operator new(40 * v1429);
                                                *(void *)(v1412 - 8) = v1431;
                                                v1432 = v1431;
                                                do
                                                {
                                                  void *v1432 = 0;
                                                  v1432[1] = 0;
                                                  v1432[2] = 0;
                                                  v1432[3] = v1412;
                                                  v1432 += 4;
                                                }
                                                while (v1432 != &v1431[4 * v1429]);
                                                int v1433 = *(_DWORD *)(v1412 + 20);
                                                if ((v1433 & 0x40000000) != 0) {
                                                  uint64_t v1434 = (uint64_t)v1431;
                                                }
                                                else {
                                                  uint64_t v1434 = v1412 - 32 * (v1433 & 0x7FFFFFF);
                                                }
                                                sub_1CC5E4108((uint64_t)v1869, v1774, &v1774[4 * v1415], v1434);
                                                if (v1415)
                                                {
                                                  memmove((void *)(v1434 + 32 * v1429), &v1774[4 * v1415], 8 * v1415);
                                                  uint64_t v1435 = 4 * v1415;
                                                  do
                                                  {
                                                    v1436 = &v1774[v1435];
                                                    if (v1774[v1435 - 4])
                                                    {
                                                      *(void *)*(v1436 - 2) = *(v1436 - 3);
                                                      uint64_t v1437 = *(v1436 - 3);
                                                      if (v1437) {
                                                        *(void *)(v1437 + 16) = *(v1436 - 2);
                                                      }
                                                    }
                                                    v1435 -= 4;
                                                  }
                                                  while (v1435 * 8);
                                                }
                                                operator delete(v1774);
                                                int v1414 = *(_DWORD *)(v1412 + 20);
                                                v1405 = (llvm::BasicBlock *)v1752;
                                              }
                                              uint64_t v1416 = (v1414 + 1) & 0x7FFFFFF;
                                              *(_DWORD *)(v1412 + 20) = v1414 & 0xF8000000 | (v1414 + 1) & 0x7FFFFFF;
                                              if ((v1414 & 0x40000000) != 0) {
                                                uint64_t v1417 = *(void *)(v1412 - 8);
                                              }
                                              else {
                                                uint64_t v1417 = v1412 - 32 * v1416;
                                              }
                                              uint64_t v1418 = (v1416 - 1);
                                              uint64_t v1419 = v1417 + 32 * v1418;
                                              if (*(void *)v1419)
                                              {
                                                **(void **)(v1419 + 16) = *(void *)(v1419 + 8);
                                                uint64_t v1427 = *(void *)(v1419 + 8);
                                                if (v1427) {
                                                  *(void *)(v1427 + 16) = *(void *)(v1419 + 16);
                                                }
                                              }
                                              *(void *)uint64_t v1419 = v1413;
                                              if (v1413)
                                              {
                                                uint64_t v1422 = *(void *)(v1413 + 8);
                                                v1421 = (uint64_t *)(v1413 + 8);
                                                uint64_t v1420 = v1422;
                                                uint64_t v1423 = v1417 + 32 * v1418;
                                                *(void *)(v1423 + 8) = v1422;
                                                if (v1422) {
                                                  *(void *)(v1420 + 16) = v1423 + 8;
                                                }
                                                *(void *)(v1423 + 16) = v1421;
                                                uint64_t *v1421 = v1419;
                                              }
                                              int v1424 = *(_DWORD *)(v1412 + 20);
                                              uint64_t v1425 = v1424 & 0x7FFFFFF;
                                              if ((v1424 & 0x40000000) != 0) {
                                                uint64_t v1426 = *(void *)(v1412 - 8);
                                              }
                                              else {
                                                uint64_t v1426 = v1412 - 32 * v1425;
                                              }
                                              *(void *)(v1426
                                                        + 32 * *(unsigned int *)(v1412 + 60)
                                                        + 8 * (v1425 - 1)) = v1405;
                                              ++v1408;
                                              v1409 = (uint64_t *)(v1410 + 8);
                                            }
                                            while (v1408 != v1407);
                                          }
                                          uint64_t v1438 = v1816;
                                          uint64_t v1439 = *(void *)(v1745 - 32);
                                          int v1440 = *(_DWORD *)(v1816 + 20);
                                          uint64_t v1441 = v1440 & 0x7FFFFFF;
                                          if ((v1440 & 0x7FFFFFF) == *(_DWORD *)(v1816 + 60))
                                          {
                                            unsigned int v1454 = v1441 + (v1441 >> 1);
                                            if (v1454 <= 2) {
                                              uint64_t v1455 = 2;
                                            }
                                            else {
                                              uint64_t v1455 = v1454;
                                            }
                                            *(_DWORD *)(v1816 + 60) = v1455;
                                            if ((v1440 & 0x40000000) != 0) {
                                              v1456 = *(uint64_t **)(v1438 - 8);
                                            }
                                            else {
                                              v1456 = (uint64_t *)(v1438 - 32 * v1441);
                                            }
                                            v1457 = operator new(40 * v1455);
                                            *(void *)(v1438 - 8) = v1457;
                                            v1458 = v1457;
                                            do
                                            {
                                              void *v1458 = 0;
                                              v1458[1] = 0;
                                              v1458[2] = 0;
                                              v1458[3] = v1438;
                                              v1458 += 4;
                                            }
                                            while (v1458 != &v1457[4 * v1455]);
                                            int v1459 = *(_DWORD *)(v1438 + 20);
                                            if ((v1459 & 0x40000000) != 0) {
                                              uint64_t v1460 = (uint64_t)v1457;
                                            }
                                            else {
                                              uint64_t v1460 = v1438 - 32 * (v1459 & 0x7FFFFFF);
                                            }
                                            sub_1CC5E4108((uint64_t)v1869, v1456, &v1456[4 * v1441], v1460);
                                            if (v1441)
                                            {
                                              memmove((void *)(v1460 + 32 * v1455), &v1456[4 * v1441], 8 * v1441);
                                              uint64_t v1461 = 4 * v1441;
                                              do
                                              {
                                                v1462 = &v1456[v1461];
                                                if (v1456[v1461 - 4])
                                                {
                                                  *(void *)*(v1462 - 2) = *(v1462 - 3);
                                                  uint64_t v1463 = *(v1462 - 3);
                                                  if (v1463) {
                                                    *(void *)(v1463 + 16) = *(v1462 - 2);
                                                  }
                                                }
                                                v1461 -= 4;
                                              }
                                              while (v1461 * 8);
                                            }
                                            operator delete(v1456);
                                            int v1440 = *(_DWORD *)(v1438 + 20);
                                            v1405 = (llvm::BasicBlock *)v1752;
                                          }
                                          uint64_t v1442 = (v1440 + 1) & 0x7FFFFFF;
                                          *(_DWORD *)(v1438 + 20) = v1440 & 0xF8000000 | (v1440 + 1) & 0x7FFFFFF;
                                          if ((v1440 & 0x40000000) != 0) {
                                            uint64_t v1443 = *(void *)(v1438 - 8);
                                          }
                                          else {
                                            uint64_t v1443 = v1438 - 32 * v1442;
                                          }
                                          uint64_t v1444 = (v1442 - 1);
                                          uint64_t v1445 = v1443 + 32 * v1444;
                                          if (*(void *)v1445)
                                          {
                                            **(void **)(v1445 + 16) = *(void *)(v1445 + 8);
                                            uint64_t v1453 = *(void *)(v1445 + 8);
                                            if (v1453) {
                                              *(void *)(v1453 + 16) = *(void *)(v1445 + 16);
                                            }
                                          }
                                          *(void *)uint64_t v1445 = v1439;
                                          if (v1439)
                                          {
                                            uint64_t v1448 = *(void *)(v1439 + 8);
                                            v1447 = (void *)(v1439 + 8);
                                            uint64_t v1446 = v1448;
                                            uint64_t v1449 = v1443 + 32 * v1444;
                                            *(void *)(v1449 + 8) = v1448;
                                            if (v1448) {
                                              *(void *)(v1446 + 16) = v1449 + 8;
                                            }
                                            *(void *)(v1449 + 16) = v1447;
                                            void *v1447 = v1445;
                                          }
                                          int v1450 = *(_DWORD *)(v1438 + 20);
                                          uint64_t v1451 = v1450 & 0x7FFFFFF;
                                          if ((v1450 & 0x40000000) != 0) {
                                            uint64_t v1452 = *(void *)(v1438 - 8);
                                          }
                                          else {
                                            uint64_t v1452 = v1438 - 32 * v1451;
                                          }
                                          *(void *)(v1452
                                                    + 32 * *(unsigned int *)(v1438 + 60)
                                                    + 8 * (v1451 - 1)) = v1405;
                                          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                                        }
                                        if ((*((unsigned char *)v1813 + 23) & 0x10) != 0)
                                        {
                                          uint64_t v1392 = ***(void ***)v1813;
                                          uint64_t v1393 = *(void *)(v1392 + 152);
                                          uint64_t v1394 = *(unsigned int *)(v1392 + 168);
                                          if (v1394)
                                          {
                                            LODWORD(v1395) = (v1394 - 1) & ((v1813 >> 4) ^ (v1813 >> 9));
                                            uint64_t v1396 = v1393 + 16 * v1395;
                                            v1397 = *(void **)v1396;
                                            if (*(void **)v1396 != v1813)
                                            {
                                              int v1398 = 1;
                                              do
                                              {
                                                if (v1397 == (void *)-4096) {
                                                  goto LABEL_2421;
                                                }
                                                int v1399 = v1395 + v1398++;
                                                uint64_t v1395 = v1399 & (v1394 - 1);
                                                v1397 = *(void **)(v1393 + 16 * v1395);
                                              }
                                              while (v1397 != v1813);
                                              uint64_t v1396 = v1393 + 16 * v1395;
                                            }
                                          }
                                          else
                                          {
LABEL_2421:
                                            uint64_t v1396 = v1393 + 16 * v1394;
                                          }
                                          v1400 = *(void **)(v1396 + 8);
                                          uint64_t v1403 = *v1400;
                                          v1402 = (char *)(v1400 + 2);
                                          uint64_t v1401 = v1403;
                                        }
                                        else
                                        {
                                          uint64_t v1401 = 0;
                                          v1402 = &byte_1CFBCE98E;
                                        }
                                        uint64_t v1404 = *((void *)v1815 + 4);
                                        LOWORD(v1871) = 773;
                                        *(void *)v1869 = v1402;
                                        *(void *)&v1869[8] = v1401;
                                        *(void *)&v1869[16] = ".body";
                                        llvm::BasicBlock::splitBasicBlock((uint64_t)v1813, v1404, (uint64_t)v1869, 0);
                                      }
                                    }
                                  }
                                  uint64_t v1350 = *(void *)(v1350 + 8);
                                }
                                while (v1350 != __nc);
                              }
                              llvm::BasicBlock::removePredecessor(v1757, (llvm::BasicBlock *)v1210[5], 0);
                              if (v1877[1] != v1877[0]) {
                                free(v1877[1]);
                              }
                              v1335 = (void **)v1817;
                            }
                            else
                            {
                              v1726 = &v1877[2];
                              v1877[0] = &v1877[2];
                              v1877[1] = (void *)0x800000000;
                              v1750 = (llvm::BasicBlock *)a1[5];
                              if (v1214 == 83
                                && *((llvm::BasicBlock **)v1757 + 5) != (llvm::BasicBlock *)((char *)v1757 + 40)
                                && v1211 != 0)
                              {
                                do
                                {
                                  uint64_t v1221 = sub_1CBF73380(v1213, (uint64_t)v1750);
                                  if (LODWORD(v1877[1]) >= (unint64_t)HIDWORD(v1877[1])) {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                                  }
                                  *((void *)v1877[0] + LODWORD(v1877[1])) = v1221;
                                  ++LODWORD(v1877[1]);
                                  uint64_t v1222 = *(void *)(v1213 + 32);
                                  uint64_t v1213 = v1222 - 24;
                                  if (v1222) {
                                    uint64_t v1223 = v1222 - 24;
                                  }
                                  else {
                                    uint64_t v1223 = 0;
                                  }
                                }
                                while (v1222 && *(unsigned char *)(v1223 + 16) == 83);
                              }
                              memset(v1869, 0, 20);
                              size_t __nd = (size_t)(__s1a + 9);
                              if ((llvm::ConstantTokenNone ***)(v1739 + 24) != __s1a + 9)
                              {
                                if (v1757) {
                                  uint64_t v1252 = 2;
                                }
                                else {
                                  uint64_t v1252 = 1;
                                }
                                *(void *)v1722 = v1252;
                                uint64_t __sz = 32 * v1252 + 64;
                                uint64_t v1253 = v1739 + 24;
                                do
                                {
                                  if (v1253) {
                                    uint64_t v1254 = v1253 - 24;
                                  }
                                  else {
                                    uint64_t v1254 = 0;
                                  }
                                  uint64_t v1255 = *(void *)(v1254 + 40);
                                  if (v1255 != v1254 + 40)
                                  {
                                    uint64_t v1256 = v1255 ? v1255 - 24 : 0;
                                    unsigned int v1257 = *(unsigned __int8 *)(v1256 + 16) - 40;
                                    uint64_t v1258 = v1257 >= 0xFFFFFFF5 ? v1256 : 0;
                                    if (v1255)
                                    {
                                      BOOL v1259 = *(unsigned char *)(v1258 + 16) == 36 && v1257 >= 0xFFFFFFF5;
                                      if (v1259 && (*(_WORD *)(v1258 + 18) & 1) == 0)
                                      {
                                        v1263 = *(llvm::Value **)(v1258 - 32 * (*(_DWORD *)(v1258 + 20) & 0x7FFFFFF));
                                        v1264 = (llvm::CleanupReturnInst *)operator new(__sz);
                                        v1265 = (llvm::CleanupReturnInst *)((char *)v1264 + 32 * *(void *)v1722);
                                        *((_DWORD *)v1265 + 5) = *((_DWORD *)v1265 + 5) & 0x38000000 | v1722[0];
                                        do
                                        {
                                          *(void *)v1264 = 0;
                                          *((void *)v1264 + 1) = 0;
                                          *((void *)v1264 + 2) = 0;
                                          *((void *)v1264 + 3) = v1265;
                                          v1264 = (llvm::CleanupReturnInst *)((char *)v1264 + 32);
                                        }
                                        while (v1264 != v1265);
                                        llvm::CleanupReturnInst::CleanupReturnInst(v1265, v1263, v1757, v1722[0], (llvm::Instruction *)v1258);
                                        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                                      }
                                    }
                                  }
                                  for (uint64_t i5 = *(void *)(v1254 + 48); i5 != v1254 + 40; uint64_t i5 = *(void *)(i5 + 8))
                                  {
                                    v1261 = (uint64_t ***)(i5 - 24);
                                    if (i5) {
                                      uint64_t v1262 = i5 - 24;
                                    }
                                    else {
                                      uint64_t v1262 = 0;
                                    }
                                    if (*(unsigned char *)(v1262 + 16) != 83) {
                                      goto LABEL_2240;
                                    }
                                  }
                                  v1261 = 0;
LABEL_2240:
                                  if (*((unsigned char *)v1261 + 16) == 38 && (*((_WORD *)v1261 + 9) & 1) == 0)
                                  {
                                    int v1266 = *((_DWORD *)v1261 + 5);
                                    if ((v1266 & 0x40000000) != 0) {
                                      v1267 = (uint64_t *)*(v1261 - 1);
                                    }
                                    else {
                                      v1267 = (uint64_t *)&v1261[-4 * (v1266 & 0x7FFFFFF)];
                                    }
                                    uint64_t v1743 = v1253;
                                    uint64_t v1268 = *v1267;
                                    unsigned int v1269 = *(unsigned __int8 *)(*v1267 + 16);
                                    if (v1268) {
                                      BOOL v1270 = v1269 >= 0x1C;
                                    }
                                    else {
                                      BOOL v1270 = 0;
                                    }
                                    if (!v1270)
                                    {
                                      v1272 = llvm::ConstantTokenNone::get(**__s1a, v1023);
LABEL_2254:
                                      int v1273 = *((_DWORD *)v1261 + 5);
                                      if ((v1273 & 0x40000000) != 0)
                                      {
                                        v1275 = (llvm::Type ***)*(v1261 - 1);
                                        int v1274 = v1273 & 0x7FFFFFF;
                                      }
                                      else
                                      {
                                        int v1274 = v1273 & 0x7FFFFFF;
                                        v1275 = (llvm::Type ***)&v1261[-4 * (v1273 & 0x7FFFFFF)];
                                      }
                                      v1276 = *v1275;
                                      if (*((_WORD *)v1261 + 9)) {
                                        int v1277 = -2;
                                      }
                                      else {
                                        int v1277 = -1;
                                      }
                                      if ((v1273 & 0x10000000) != 0)
                                      {
                                        uint64_t v1278 = ***v1261;
                                        uint64_t v1279 = *(void *)(v1278 + 152);
                                        uint64_t v1280 = *(unsigned int *)(v1278 + 168);
                                        if (v1280)
                                        {
                                          LODWORD(v1281) = (v1280 - 1) & ((v1261 >> 4) ^ (v1261 >> 9));
                                          v1282 = (uint64_t ****)(v1279 + 16 * v1281);
                                          v1283 = *v1282;
                                          if (*v1282 != v1261)
                                          {
                                            int v1284 = 1;
                                            do
                                            {
                                              if (v1283 == (uint64_t ***)-4096) {
                                                goto LABEL_2267;
                                              }
                                              int v1285 = v1281 + v1284++;
                                              uint64_t v1281 = v1285 & (v1280 - 1);
                                              v1283 = *(uint64_t ****)(v1279 + 16 * v1281);
                                            }
                                            while (v1283 != v1261);
                                            v1282 = (uint64_t ****)(v1279 + 16 * v1281);
                                          }
                                        }
                                        else
                                        {
LABEL_2267:
                                          v1282 = (uint64_t ****)(v1279 + 16 * v1280);
                                        }
                                        v1286 = v1282[1];
                                        uint64_t v1289 = (uint64_t)*v1286;
                                        v1288 = (char *)(v1286 + 2);
                                        uint64_t v1287 = v1289;
                                      }
                                      else
                                      {
                                        uint64_t v1287 = 0;
                                        v1288 = &byte_1CFBCE98E;
                                      }
                                      int v1290 = v1277 + v1274;
                                      LOWORD(v1817) = 261;
                                      v1813 = v1288;
                                      uint64_t v1814 = v1287;
                                      v1291 = operator new(0x48uLL);
                                      v1292 = (llvm::CatchSwitchInst *)(v1291 + 2);
                                      v1291[7] = v1291[7] & 0x38000000 | 0x40000000;
                                      *(void *)v1291 = 0;
                                      llvm::CatchSwitchInst::CatchSwitchInst((llvm::CatchSwitchInst *)(v1291 + 2), v1276, v1757, v1290, (const char **)&v1813, (llvm::Instruction *)v1261);
                                      int v1293 = *((_DWORD *)v1261 + 5);
                                      if ((v1293 & 0x40000000) != 0)
                                      {
                                        v1295 = (uint64_t ***)*(v1261 - 1);
                                        uint64_t v1294 = v1293 & 0x7FFFFFF;
                                      }
                                      else
                                      {
                                        uint64_t v1294 = v1293 & 0x7FFFFFF;
                                        v1295 = &v1261[-4 * v1294];
                                      }
                                      uint64_t v1296 = 1;
                                      if (*((_WORD *)v1261 + 9)) {
                                        uint64_t v1296 = 2;
                                      }
                                      if (v1296 != v1294)
                                      {
                                        v1297 = (llvm::BasicBlock **)&v1295[4 * v1296];
                                        uint64_t v1298 = 32 * v1294 - 32 * v1296;
                                        do
                                        {
                                          v1299 = *v1297;
                                          v1297 += 4;
                                          llvm::CatchSwitchInst::addHandler(v1292, v1299);
                                          v1298 -= 32;
                                        }
                                        while (v1298);
                                      }
                                      v1813 = v1292;
                                      sub_1CC01F644((uint64_t *)v1869, &v1813)[1] = v1272;
                                      llvm::Value::takeName((int32x2_t ****)v1292, (llvm::Value *)v1261);
                                      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v1261, v1292, (llvm::Value *)1);
                                      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                                    }
                                    v1271 = sub_1CD179E7C(v1268, (uint64_t)v1869);
                                    v1272 = v1271;
                                    if (!v1271) {
                                      goto LABEL_2254;
                                    }
                                    uint64_t v1253 = v1743;
                                    if (*((unsigned char *)v1271 + 16) == 20) {
                                      goto LABEL_2254;
                                    }
                                  }
                                  uint64_t v1253 = *(void *)(v1253 + 8);
                                }
                                while (v1253 != __nd);
                                uint64_t v1300 = v1739 + 24;
                                if ((_BYTE)v1803)
                                {
                                  do
                                  {
                                    if (v1300) {
                                      uint64_t v1301 = v1300 - 24;
                                    }
                                    else {
                                      uint64_t v1301 = 0;
                                    }
                                    uint64_t v1302 = sub_1CD17B180(v1301, v1757, (uint64_t)v1869);
                                    if (v1302 && LODWORD(v1877[1]))
                                    {
                                      uint64_t v1303 = v1302;
                                      v1304 = (char *)v1877[0];
                                      v1305 = (char *)v1877[0] + 8 * LODWORD(v1877[1]);
                                      v1306 = (uint64_t *)((char *)v1757 + 48);
                                      uint64_t v1763 = v1300;
                                      v1744 = v1305;
                                      do
                                      {
                                        uint64_t v1307 = *v1306;
                                        uint64_t v1308 = *(void *)v1304;
                                        uint64_t v1309 = *v1306 - 24;
                                        if (v1307) {
                                          uint64_t v1310 = v1309;
                                        }
                                        else {
                                          uint64_t v1310 = 0;
                                        }
                                        int v1311 = *(_DWORD *)(v1310 + 20);
                                        uint64_t v1312 = v1311 & 0x7FFFFFF;
                                        if ((v1311 & 0x7FFFFFF) == *(_DWORD *)(v1310 + 60))
                                        {
                                          unsigned int v1325 = v1312 + (v1312 >> 1);
                                          if (v1325 <= 2) {
                                            uint64_t v1326 = 2;
                                          }
                                          else {
                                            uint64_t v1326 = v1325;
                                          }
                                          *(_DWORD *)(v1310 + 60) = v1326;
                                          if ((v1311 & 0x40000000) != 0) {
                                            v1327 = *(uint64_t **)(v1310 - 8);
                                          }
                                          else {
                                            v1327 = (uint64_t *)(v1310 - 32 * v1312);
                                          }
                                          v1772 = v1327;
                                          v1328 = operator new(40 * v1326);
                                          *(void *)(v1310 - 8) = v1328;
                                          v1329 = v1328;
                                          do
                                          {
                                            void *v1329 = 0;
                                            v1329[1] = 0;
                                            v1329[2] = 0;
                                            v1329[3] = v1310;
                                            v1329 += 4;
                                          }
                                          while (v1329 != &v1328[4 * v1326]);
                                          int v1330 = *(_DWORD *)(v1310 + 20);
                                          if ((v1330 & 0x40000000) != 0) {
                                            uint64_t v1331 = (uint64_t)v1328;
                                          }
                                          else {
                                            uint64_t v1331 = v1310 - 32 * (v1330 & 0x7FFFFFF);
                                          }
                                          sub_1CC5E4108((uint64_t)&v1813, v1772, &v1772[4 * v1312], v1331);
                                          if (v1312)
                                          {
                                            memmove((void *)(v1331 + 32 * v1326), &v1772[4 * v1312], 8 * v1312);
                                            uint64_t v1332 = 4 * v1312;
                                            do
                                            {
                                              v1333 = &v1772[v1332];
                                              if (v1772[v1332 - 4])
                                              {
                                                *(void *)*(v1333 - 2) = *(v1333 - 3);
                                                uint64_t v1334 = *(v1333 - 3);
                                                if (v1334) {
                                                  *(void *)(v1334 + 16) = *(v1333 - 2);
                                                }
                                              }
                                              v1332 -= 4;
                                            }
                                            while (v1332 * 8);
                                          }
                                          operator delete(v1772);
                                          int v1311 = *(_DWORD *)(v1310 + 20);
                                          uint64_t v1300 = v1763;
                                          v1305 = v1744;
                                        }
                                        uint64_t v1313 = (v1311 + 1) & 0x7FFFFFF;
                                        *(_DWORD *)(v1310 + 20) = v1311 & 0xF8000000 | (v1311 + 1) & 0x7FFFFFF;
                                        if ((v1311 & 0x40000000) != 0) {
                                          uint64_t v1314 = *(void *)(v1310 - 8);
                                        }
                                        else {
                                          uint64_t v1314 = v1310 - 32 * v1313;
                                        }
                                        uint64_t v1315 = (v1313 - 1);
                                        uint64_t v1316 = v1314 + 32 * v1315;
                                        if (*(void *)v1316)
                                        {
                                          **(void **)(v1316 + 16) = *(void *)(v1316 + 8);
                                          uint64_t v1324 = *(void *)(v1316 + 8);
                                          if (v1324) {
                                            *(void *)(v1324 + 16) = *(void *)(v1316 + 16);
                                          }
                                        }
                                        *(void *)uint64_t v1316 = v1308;
                                        if (v1308)
                                        {
                                          uint64_t v1319 = *(void *)(v1308 + 8);
                                          v1318 = (uint64_t *)(v1308 + 8);
                                          uint64_t v1317 = v1319;
                                          uint64_t v1320 = v1314 + 32 * v1315;
                                          *(void *)(v1320 + 8) = v1319;
                                          if (v1319) {
                                            *(void *)(v1317 + 16) = v1320 + 8;
                                          }
                                          *(void *)(v1320 + 16) = v1318;
                                          uint64_t *v1318 = v1316;
                                        }
                                        int v1321 = *(_DWORD *)(v1310 + 20);
                                        uint64_t v1322 = v1321 & 0x7FFFFFF;
                                        if ((v1321 & 0x40000000) != 0) {
                                          uint64_t v1323 = *(void *)(v1310 - 8);
                                        }
                                        else {
                                          uint64_t v1323 = v1310 - 32 * v1322;
                                        }
                                        *(void *)(v1323
                                                  + 32 * *(unsigned int *)(v1310 + 60)
                                                  + 8 * (v1322 - 1)) = v1303;
                                        v1306 = (uint64_t *)(v1307 + 8);
                                        v1304 += 8;
                                      }
                                      while (v1304 != v1305);
                                    }
                                    uint64_t v1300 = *(void *)(v1300 + 8);
                                  }
                                  while (v1300 != __nd);
                                }
                              }
                              llvm::BasicBlock::removePredecessor(v1757, v1750, 0);
                              MEMORY[0x1D25D9CD0](*(void *)v1869, 8);
                              v1335 = (void **)v1877[0];
                            }
                            if (v1335 != v1726) {
                              free(v1335);
                            }
                          }
                          if (v1806)
                          {
                            for (uint64_t i6 = v1739 + 24; i6 != v1795; uint64_t i6 = *(void *)(i6 + 8))
                            {
                              v1877[0] = &v1877[2];
                              v1877[1] = (void *)0x100000000;
                              if (i6) {
                                uint64_t v1465 = i6 - 24;
                              }
                              else {
                                uint64_t v1465 = 0;
                              }
                              v1466 = (char *)(v1465 + 40);
                              v1467 = *(char **)(v1465 + 48);
                              if (v1467 != (char *)(v1465 + 40))
                              {
                                do
                                {
                                  v1468 = (char *)*((void *)v1467 + 1);
                                  v1469 = v1467 - 24;
                                  if (v1467) {
                                    v1470 = v1467 - 24;
                                  }
                                  else {
                                    v1470 = 0;
                                  }
                                  unsigned int v1471 = v1470[16] - 33;
                                  BOOL v182 = v1471 > 0x33;
                                  uint64_t v1472 = (1 << v1471) & 0x8000000000041;
                                  if (!v182 && v1472 != 0)
                                  {
                                    v1474 = llvm::Value::stripPointerCasts(*((llvm::Value **)v1467 - 7));
                                    BOOL v1475 = v1474 && *((unsigned char *)v1474 + 16) == 0;
                                    if (!v1475
                                      || (*((unsigned char *)v1474 + 33) & 0x20) == 0
                                      || ((uint64_t v1476 = *((void *)v1467 + 5)) == 0 || (*(unsigned char *)(v1476 + 16) & 0x20) == 0)
                                      && (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)(v1467 - 24), 37) & 1) == 0)
                                    {
                                      sub_1CC233A58(v1467 - 24, 1, (uint64_t *)&v1813);
                                      if (!(_BYTE)v1816)
                                      {
                                        int v1477 = *((_DWORD *)v1467 - 1);
                                        if (v1477 < 0)
                                        {
                                          unint64_t v1479 = *(void *)&v1469[-32 * (v1477 & 0x7FFFFFF) - 8];
                                          if ((v1479 & 0xFFFFFFFF0) != 0)
                                          {
                                            unint64_t v1775 = (v1479 >> 4);
                                            v1480 = v1467;
                                            do
                                            {
                                              uint64_t v1481 = *((_DWORD *)v1467 - 1) & 0x7FFFFFF;
                                              v1482 = &v1469[-32 * v1481];
                                              v1483 = &v1480[-*((void *)v1482 - 1) + -32 * v1481];
                                              uint64_t v1484 = *((unsigned int *)v1483 - 6);
                                              uint64_t v1485 = *((unsigned int *)v1483 - 5);
                                              v1486 = (llvm::ValueAsMetadata *)*((void *)v1483 - 4);
                                              v1813 = &v1482[32 * v1484];
                                              uint64_t v1814 = v1485 - v1484;
                                              v1815 = v1486;
                                              sub_1CD5C74F0((uint64_t)v1877, (uint64_t)&v1813);
                                              v1480 += 16;
                                              --v1775;
                                            }
                                            while (v1775);
                                          }
                                        }
                                        sub_1CD697EF8((uint64_t *)v1877, "funclet", &v1806);
                                        v1478 = llvm::CallBase::Create((uint64_t)(v1467 - 24), (uint64_t)v1877[0], LODWORD(v1877[1]), (llvm::Instruction *)(v1467 - 24));
                                        llvm::Value::takeName((int32x2_t ****)v1478, (llvm::Value *)(v1467 - 24));
                                        llvm::Value::doRAUW((llvm::ValueAsMetadata *)(v1467 - 24), (llvm::Value *)v1478, (llvm::Value *)1);
                                        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                                      }
                                    }
                                  }
                                  v1467 = v1468;
                                }
                                while (v1468 != v1466);
                              }
                              v1487 = *(void **)v1466;
                              if (*(char **)v1466 != v1466)
                              {
                                uint64_t v1488 = v1487 ? (uint64_t)(v1487 - 3) : 0;
                                unsigned int v1489 = *(unsigned __int8 *)(v1488 + 16) - 40;
                                uint64_t v1490 = v1489 >= 0xFFFFFFF5 ? v1488 : 0;
                                if (v1487)
                                {
                                  if (*(unsigned char *)(v1490 + 16) == 36 && v1489 >= 0xFFFFFFF5)
                                  {
                                    BOOL v1492 = v1738;
                                    if (*(_WORD *)(v1490 + 18)) {
                                      BOOL v1492 = 0;
                                    }
                                    if (v1492) {
                                      llvm::changeToUnreachable((llvm *)v1490, 0, 0, 0, v1024);
                                    }
                                  }
                                }
                              }
                              for (uint64_t i7 = *(void *)(v1465 + 48); ; uint64_t i7 = *(void *)(i7 + 8))
                              {
                                uint64_t v1494 = i7 - 24;
                                uint64_t v1495 = i7 ? i7 - 24 : 0;
                                if (*(unsigned char *)(v1495 + 16) != 83) {
                                  break;
                                }
                              }
                              int v1496 = *(unsigned __int8 *)(i7 - 8);
                              if ((v1496 - 79) < 2 || v1496 == 94)
                              {
                                v1499 = (uint64_t *)(i7 - 56);
                                if (*(unsigned char *)(*(void *)(i7 - 56) + 16) == 20)
                                {
                                  uint64_t v1500 = v1806;
                                  v1501 = (void *)(i7 - 48);
                                  **(void **)(i7 - 40) = *(void *)(i7 - 48);
                                  uint64_t v1502 = *(void *)(i7 - 48);
                                  if (v1502) {
                                    *(void *)(v1502 + 16) = *(void *)(i7 - 40);
                                  }
                                  uint64_t *v1499 = v1500;
                                  if (v1500)
                                  {
                                    uint64_t v1505 = *(void *)(v1500 + 8);
                                    v1503 = (uint64_t **)(v1500 + 8);
                                    uint64_t v1504 = v1505;
                                    void *v1501 = v1505;
                                    if (v1505) {
                                      *(void *)(v1504 + 16) = v1501;
                                    }
                                    *(void *)(i7 - 40) = v1503;
                                    *v1503 = v1499;
                                  }
                                }
                              }
                              else if (v1496 == 38)
                              {
                                int v1497 = *(_DWORD *)(i7 - 4);
                                uint64_t v1498 = (v1497 & 0x40000000) != 0
                                      ? *(void *)(i7 - 32)
                                      : v1494 - 32 * (v1497 & 0x7FFFFFF);
                                if (*(unsigned char *)(*(void *)v1498 + 16) == 20) {
                                  sub_1CD5AB76C(v1494, 0, v1806);
                                }
                              }
                              v1506 = (void **)v1877[0];
                              if (LODWORD(v1877[1]))
                              {
                                uint64_t v1507 = 48 * LODWORD(v1877[1]);
                                v1508 = (char *)v1877[0] - 48;
                                do
                                {
                                  sub_1CD4AF9B4((uint64_t)&v1508[v1507]);
                                  v1507 -= 48;
                                }
                                while (v1507);
                                v1506 = (void **)v1877[0];
                              }
                              if (v1506 != &v1877[2]) {
                                free(v1506);
                              }
                            }
                          }
                          v1509 = a1;
                          v1510 = a2;
                          if (v1783)
                          {
                            v1511 = *(void ***)(*((void *)v1777 + 3) + 16);
                            if (*v1511 == *a1)
                            {
                              v1512 = v1842;
                              if (v1843)
                              {
                                v1513 = (char *)v1842 + 8 * v1843;
                                uint64_t v1514 = 8 * v1843 - 8;
                                v1515 = (char *)v1842;
                                v1516 = (char *)v1842;
                                while (1)
                                {
                                  uint64_t v1517 = *(void *)v1516;
                                  v1516 += 8;
                                  if (llvm::BasicBlock::getTerminatingDeoptimizeCall(*(llvm::BasicBlock **)(v1517 + 40))) {
                                    break;
                                  }
                                  v1514 -= 8;
                                  v1515 = v1516;
                                  if (v1516 == v1513) {
                                    goto LABEL_2614;
                                  }
                                }
                                if (v1516 == v1513)
                                {
                                  v1513 = v1515;
                                }
                                else
                                {
                                  uint64_t v1518 = 8;
                                  v1513 = v1515;
                                  do
                                  {
                                    uint64_t v1519 = *(void *)&v1515[v1518];
                                    if (!llvm::BasicBlock::getTerminatingDeoptimizeCall(*(llvm::BasicBlock **)(v1519 + 40)))
                                    {
                                      *(void *)v1513 = v1519;
                                      v1513 += 8;
                                    }
                                    v1518 += 8;
                                    v1514 -= 8;
                                  }
                                  while (v1514);
                                  v1512 = v1842;
                                }
                              }
                              else
                              {
                                v1513 = (char *)v1842;
                              }
LABEL_2614:
                              LODWORD(v1843) = (unint64_t)(v1513 - v1512) >> 3;
                            }
                            else
                            {
                              v1813 = &v1815;
                              uint64_t v1814 = 0x800000000;
                              v1597 = (uint64_t **)*((void *)v1777 + 5);
                              v1877[0] = *v1511;
                              Declaratiouint64_t n = llvm::Intrinsic::getDeclaration(v1597, 119, (uint64_t)v1877, 1);
                              if (v1843)
                              {
                                uint64_t v1621 = Declaration;
                                v1622 = (llvm::BasicBlock *)v1842;
                                v1758 = (llvm::BasicBlock *)((char *)v1842 + 8 * v1843);
                                do
                                {
                                  uint64_t v1623 = *(void *)v1622;
                                  uint64_t v1624 = llvm::BasicBlock::getTerminatingDeoptimizeCall(*(llvm::BasicBlock **)(*(void *)v1622 + 40));
                                  if (v1624)
                                  {
                                    *(_WORD *)(v1621 + 18) = *(_WORD *)(v1621 + 18) & 0xC00F | (16
                                                                                              * ((*(_WORD *)(*(void *)(v1624 - 32) + 18) >> 4) & 0x3FF));
                                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                                  }
                                  if (v1814 >= (unint64_t)HIDWORD(v1814)) {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                                  }
                                  v1509 = a1;
                                  *((void *)v1813 + v1814) = v1623;
                                  LODWORD(v1814) = v1814 + 1;
                                  v1622 = (llvm::BasicBlock *)((char *)v1622 + 8);
                                }
                                while (v1622 != v1758);
                              }
                              sub_1CD499474(&v1842, &v1813);
                              if (v1813 != &v1815) {
                                free(v1813);
                              }
                            }
                          }
                          if (v1792)
                          {
                            if (v1509[1]) {
                              BOOL v1593 = *v1509 == **(void ***)(*((void *)v1777 + 3) + 16);
                            }
                            else {
                              BOOL v1593 = 1;
                            }
                            int v1594 = !v1593;
                            v1813 = &v1815;
                            uint64_t v1814 = 0x800000000;
                            if (v1843)
                            {
                              v1599 = (char *)v1842;
                              v1600 = (char *)v1842 + 8 * v1843;
                              do
                              {
                                uint64_t v1601 = *(void *)v1599;
                                if (llvm::BasicBlock::getTerminatingMustTailCall(*(llvm::BasicBlock **)(*(void *)v1599 + 40)))
                                {
                                  if (v1594)
                                  {
                                    uint64_t v1602 = *(_DWORD *)(v1601 + 20) & 0x7FFFFFF;
                                    if (v1602)
                                    {
                                      uint64_t v1603 = *(void *)(v1601 - 32 * v1602);
                                      if (v1603)
                                      {
                                        if (*(unsigned char *)(v1603 + 16) == 77) {
                                          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                                        }
                                      }
                                    }
                                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                                  }
                                }
                                else
                                {
                                  if (v1814 >= (unint64_t)HIDWORD(v1814)) {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                                  }
                                  *((void *)v1813 + v1814) = v1601;
                                  LODWORD(v1814) = v1814 + 1;
                                }
                                v1599 += 8;
                              }
                              while (v1599 != v1600);
                            }
                            sub_1CD499474(&v1842, &v1813);
                            if (v1813 != &v1815) {
                              free(v1813);
                            }
                            v1510 = a2;
                          }
                          if ((_BYTE)v1803)
                          {
                            if (!*v1510)
                            {
                              for (uint64_t i8 = v1739 + 24; i8 != v1795; uint64_t i8 = *(void *)(i8 + 8))
                              {
                                uint64_t v1535 = i8 - 24;
                                if (!i8) {
                                  uint64_t v1535 = 0;
                                }
                                uint64_t v1536 = v1535 + 40;
                                for (uint64_t i9 = *(void *)(v1535 + 48); i9 != v1536; uint64_t i9 = *(void *)(i9 + 8))
                                {
                                  if (i9) {
                                    uint64_t v1538 = i9 - 24;
                                  }
                                  else {
                                    uint64_t v1538 = 0;
                                  }
                                  unsigned int v1539 = *(unsigned __int8 *)(v1538 + 16) - 33;
                                  BOOL v182 = v1539 > 0x33;
                                  uint64_t v1540 = (1 << v1539) & 0x8000000000041;
                                  if (!v182 && v1540 != 0)
                                  {
                                    uint64_t v1542 = *(void *)(i9 - 56);
                                    if (!v1542
                                      || *(unsigned char *)(v1542 + 16)
                                      || *(void *)(v1542 + 24) != *(void *)(i9 + 48)
                                      || (*(unsigned char *)(v1542 + 33) & 0x20) == 0)
                                    {
                                      unint64_t v1543 = *((unsigned int *)v1510 + 78);
                                      if (v1543 >= *((unsigned int *)v1510 + 79)) {
                                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                                      }
                                      *(void *)(v1510[38] + 8 * v1543) = i9 - 24;
                                      ++*((_DWORD *)v1510 + 78);
                                    }
                                  }
                                }
                              }
                            }
                          }
                          uint64_t v1544 = v1740;
                          if (v1843 != 1 || v1740 == v1795) {
                            goto LABEL_2646;
                          }
                          uint64_t v1546 = 1;
                          do
                          {
                            uint64_t v1544 = *(void *)(v1544 + 8);
                            --v1546;
                          }
                          while (v1544 != v1795);
                          if (v1546)
                          {
LABEL_2646:
                            if (*((unsigned char *)a1 + 16) == 33)
                            {
                              uint64_t v1547 = (uint64_t)*(a1 - 12);
                              v1548 = (char *)operator new(0x60uLL);
                              *((_DWORD *)v1548 + 13) = *((_DWORD *)v1548 + 13) & 0x38000000 | 1;
                              *((void *)v1548 + 1) = 0;
                              *((void *)v1548 + 2) = 0;
                              *(void *)v1548 = 0;
                              *((void *)v1548 + 4) = ***(void ***)v1547 + 1576;
                              *((void *)v1548 + 3) = v1548 + 32;
                              *((void *)v1548 + 5) = 0;
                              v1548[48] = 30;
                              v1548[49] = 0;
                              *((_WORD *)v1548 + 25) = 0;
                              *((_DWORD *)v1548 + 13) = 1;
                              *(_OWORD *)(v1548 + 56) = 0u;
                              uint64_t v1549 = (uint64_t)(v1548 + 56);
                              *(_OWORD *)(v1548 + 72) = 0u;
                              *((_DWORD *)v1548 + 22) = 0;
                              v1550 = a1[5];
                              v1551 = (uint64_t *)(a1 + 3);
                              *((void *)v1548 + 9) = v1550;
                              *((_WORD *)v1550 + 9) &= ~0x8000u;
                              if ((v1548[55] & 0x10) != 0
                                && (uint64_t v1607 = v1550[7]) != 0
                                && (v1608 = *(llvm::ValueSymbolTable **)(v1607 + 104)) != 0)
                              {
                                llvm::ValueSymbolTable::reinsertValue(v1608, (llvm::Value *)(v1548 + 32));
                                uint64_t v1609 = *(void *)v1548;
                                uint64_t v1610 = *v1551;
                                *((void *)v1548 + 7) = *v1551;
                                *((void *)v1548 + 8) = v1551;
                                *(void *)(v1610 + 8) = v1549;
                                uint64_t *v1551 = v1549;
                                if (v1609)
                                {
                                  **((void **)v1548 + 2) = *((void *)v1548 + 1);
                                  uint64_t v1611 = *((void *)v1548 + 1);
                                  if (v1611) {
                                    *(void *)(v1611 + 16) = *((void *)v1548 + 2);
                                  }
                                }
                              }
                              else
                              {
                                uint64_t v1552 = *v1551;
                                *((void *)v1548 + 7) = *v1551;
                                *((void *)v1548 + 8) = v1551;
                                *(void *)(v1552 + 8) = v1549;
                                uint64_t *v1551 = v1549;
                              }
                              *(void *)v1548 = v1547;
                              uint64_t v1555 = *(void *)(v1547 + 8);
                              v1554 = (void *)(v1547 + 8);
                              uint64_t v1553 = v1555;
                              *((void *)v1548 + 1) = v1555;
                              if (v1555) {
                                *(void *)(v1553 + 16) = v1548 + 8;
                              }
                              *((void *)v1548 + 2) = v1554;
                              void *v1554 = v1548;
                              if ((*((unsigned char *)v1746 + 23) & 0x10) != 0)
                              {
                                uint64_t v1556 = ***(void ***)v1746;
                                uint64_t v1557 = *(void *)(v1556 + 152);
                                uint64_t v1558 = *(unsigned int *)(v1556 + 168);
                                if (v1558)
                                {
                                  LODWORD(v1559) = (v1558 - 1) & (v1729 ^ (v1746 >> 9));
                                  v1560 = (llvm::Function **)(v1557 + 16 * v1559);
                                  v1561 = *v1560;
                                  if (*v1560 != v1746)
                                  {
                                    int v1562 = 1;
                                    do
                                    {
                                      if (v1561 == (llvm::Function *)-4096) {
                                        goto LABEL_2681;
                                      }
                                      int v1563 = v1559 + v1562++;
                                      uint64_t v1559 = v1563 & (v1558 - 1);
                                      v1561 = *(llvm::Function **)(v1557 + 16 * v1559);
                                    }
                                    while (v1561 != v1746);
                                    v1560 = (llvm::Function **)(v1557 + 16 * v1559);
                                  }
                                }
                                else
                                {
LABEL_2681:
                                  v1560 = (llvm::Function **)(v1557 + 16 * v1558);
                                }
                                v1585 = v1560[1];
                                v1588 = *(void **)v1585;
                                v1586 = (char *)v1585 + 16;
                                v1587 = v1588;
                              }
                              else
                              {
                                v1587 = 0;
                                v1586 = &byte_1CFBCE98E;
                              }
                              v1878.i16[4] = 773;
                              v1877[0] = v1586;
                              v1877[1] = v1587;
                              v1877[2] = ".exit";
                              llvm::BasicBlock::splitBasicBlock((uint64_t)v1737, v1549, (uint64_t)v1877, 0);
                            }
                            if ((*((unsigned char *)v1746 + 23) & 0x10) != 0)
                            {
                              uint64_t v1564 = ***(void ***)v1746;
                              uint64_t v1565 = *(void *)(v1564 + 152);
                              uint64_t v1566 = *(unsigned int *)(v1564 + 168);
                              if (v1566)
                              {
                                LODWORD(v1567) = (v1566 - 1) & (v1729 ^ (v1746 >> 9));
                                v1568 = (llvm::Function **)(v1565 + 16 * v1567);
                                v1569 = *v1568;
                                if (*v1568 != v1746)
                                {
                                  int v1570 = 1;
                                  do
                                  {
                                    if (v1569 == (llvm::Function *)-4096) {
                                      goto LABEL_2684;
                                    }
                                    int v1571 = v1567 + v1570++;
                                    uint64_t v1567 = v1571 & (v1566 - 1);
                                    v1569 = *(llvm::Function **)(v1565 + 16 * v1567);
                                  }
                                  while (v1569 != v1746);
                                  v1568 = (llvm::Function **)(v1565 + 16 * v1567);
                                }
                              }
                              else
                              {
LABEL_2684:
                                v1568 = (llvm::Function **)(v1565 + 16 * v1566);
                              }
                              v1589 = v1568[1];
                              v1592 = *(void **)v1589;
                              v1590 = (char *)v1589 + 16;
                              v1591 = v1592;
                            }
                            else
                            {
                              v1591 = 0;
                              v1590 = &byte_1CFBCE98E;
                            }
                            v1878.i16[4] = 773;
                            v1877[0] = v1590;
                            v1877[1] = v1591;
                            v1877[2] = ".exit";
                            llvm::BasicBlock::splitBasicBlock((uint64_t)v1737, (uint64_t)(a1 + 3), (uint64_t)v1877, 0);
                          }
                          v1572 = (uint64_t *)(a1 + 3);
                          v1573 = *(uint64_t **)(v1739 + 48);
                          v1574 = v1734;
                          if (v1573 != v1734 && v1572 != v1734)
                          {
                            *((_WORD *)v1737 + 9) &= ~0x8000u;
                            if (v1737 != (llvm::Value *)v1739)
                            {
                              uint64_t v1576 = *((void *)v1737 + 7);
                              if (v1576) {
                                v1577 = *(llvm::ValueSymbolTable **)(v1576 + 104);
                              }
                              else {
                                v1577 = 0;
                              }
                              uint64_t v1578 = *(void *)(v1739 + 56);
                              if (v1578) {
                                v1579 = *(llvm::ValueSymbolTable **)(v1578 + 104);
                              }
                              else {
                                v1579 = 0;
                              }
                              if (v1577 == v1579)
                              {
                                v1580 = v1573;
                                do
                                {
                                  v1581 = v1580 - 3;
                                  if (!v1580) {
                                    v1581 = 0;
                                  }
                                  v1581[5] = (uint64_t)v1737;
                                  v1580 = (uint64_t *)v1580[1];
                                }
                                while (v1580 != v1734);
                              }
                              else
                              {
                                v1786 = v1573;
                                do
                                {
                                  v1702 = (llvm::Value *)(v1786 - 3);
                                  if (!v1786) {
                                    v1702 = 0;
                                  }
                                  v1784 = v1702;
                                  int v1776 = *((_DWORD *)v1702 + 5) & 0x10000000;
                                  if (v1579)
                                  {
                                    if (v1776)
                                    {
                                      v1703 = (size_t *)llvm::Value::getValueName(v1702);
                                      uint64_t v1704 = *((unsigned int *)v1579 + 2);
                                      if (v1704)
                                      {
                                        size_t __ne = *((unsigned int *)v1579 + 5);
                                        v1778 = (llvm::AttributeFuncs *)((char *)v1703 + __ne);
                                        size_t v1705 = *v1703;
                                        if (*v1703)
                                        {
                                          int v1706 = 0;
                                          size_t v1707 = *v1703;
                                          v1708 = (unsigned __int8 *)v1703 + __ne;
                                          do
                                          {
                                            int v1709 = *v1708++;
                                            int v1706 = 33 * v1706 + v1709;
                                            --v1707;
                                          }
                                          while (v1707);
                                        }
                                        else
                                        {
                                          int v1706 = 0;
                                        }
                                        unsigned int v1710 = v1704 - 1;
                                        uint64_t v1711 = *(void *)v1579;
                                        v1794 = (llvm::PointerType *)(*(void *)v1579 + 8 * v1704 + 8);
                                        int v1712 = 1;
                                        int v1713 = v1706;
                                        while (1)
                                        {
                                          uint64_t v1714 = v1713 & v1710;
                                          v1715 = *(void **)(v1711 + 8 * v1714);
                                          if (v1715 != (void *)-8)
                                          {
                                            if (!v1715) {
                                              goto LABEL_2957;
                                            }
                                            if (*((_DWORD *)v1794 + v1714) == v1706
                                              && v1705 == *v1715
                                              && (!v1705 || !memcmp(v1778, (char *)v1715 + __ne, v1705)))
                                            {
                                              break;
                                            }
                                          }
                                          int v1713 = v1712 + v1714;
                                          ++v1712;
                                        }
                                        *(void *)(v1711 + 8 * (int)v1714) = -8;
                                        *(int32x2_t *)((char *)v1579 + 12) = vadd_s32(*(int32x2_t *)((char *)v1579 + 12), (int32x2_t)0x1FFFFFFFFLL);
                                      }
                                    }
                                  }
LABEL_2957:
                                  *((void *)v1784 + 5) = v1737;
                                  if (v1577 && v1776) {
                                    llvm::ValueSymbolTable::reinsertValue(v1577, v1784);
                                  }
                                  v1574 = v1734;
                                  v1786 = (uint64_t *)v1786[1];
                                }
                                while (v1786 != v1734);
                              }
                            }
                            uint64_t v1582 = *v1574;
                            uint64_t v1583 = *v1573;
                            *(void *)(v1583 + 8) = v1574;
                            uint64_t *v1574 = v1583;
                            uint64_t v1584 = *v1572;
                            *(void *)(v1582 + 8) = v1572;
                            uint64_t *v1573 = v1584;
                            *(void *)(v1584 + 8) = v1573;
                            uint64_t *v1572 = v1582;
                          }
                          llvm::SymbolTableListTraits<llvm::BasicBlock>::removeNodeFromList();
                        }
LABEL_1576:
                        v911 = 0;
                        goto LABEL_1577;
                      }
LABEL_1560:
                      v850 = 0;
                      goto LABEL_1561;
                    }
LABEL_1539:
                    v867 = 0;
                    goto LABEL_1540;
                  }
                  if ((v866 & 0x20000000) != 0) {
                    goto LABEL_1524;
                  }
                  v850 = 0;
LABEL_1523:
                  v867 = 0;
                  goto LABEL_1576;
                }
              }
              else
              {
                uint64_t v95 = *((void *)v1746 + 11);
              }
              uint64_t v96 = v95;
              goto LABEL_153;
            }
            unint64_t v1691 = (unint64_t)v1877[1] & 0xFFFFFFFFFFFFFFF8;
            *(void **)((unint64_t)v1877[1] & 0xFFFFFFFFFFFFFFF8) = v1877[2];
            if (v1877[2])
            {
              *(void *)v1877[2] = *(void *)v1877[2] & 7 | v1691;
            }
            else
            {
              uint64_t v1692 = v1878.i64[0];
              v1693 = ***(int32x2_t ****)v1878.i64[0];
              unint64_t v1694 = (unint64_t)v1693[303];
              uint64_t v9 = (uint64_t)a1;
              uint64_t v14 = v1771;
              if (v1694 > v1691) {
                goto LABEL_61;
              }
              uint64_t v1695 = v1693[305].u32[0];
              if (v1694 + 16 * v1695 <= v1691) {
                goto LABEL_61;
              }
              unsigned int v1696 = v1695 - 1;
              LODWORD(v1697) = v1696 & (((unsigned __int32)v1878.i32[0] >> 4) ^ ((unsigned __int32)v1878.i32[0] >> 9));
              v1698 = (uint64_t *)(v1694 + 16 * v1697);
              uint64_t v1699 = *v1698;
              if (v1878.i64[0] != *v1698)
              {
                int v1700 = 1;
                do
                {
                  if (v1699 == -4096) {
                    goto LABEL_2934;
                  }
                  int v1701 = v1697 + v1700++;
                  uint64_t v1697 = v1701 & v1696;
                  uint64_t v1699 = *(void *)(v1694 + 16 * v1697);
                }
                while (v1878.i64[0] != v1699);
                v1698 = (uint64_t *)(v1694 + 16 * v1697);
              }
              uint64_t *v1698 = -8192;
              v1693[304] = vadd_s32(v1693[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v1692 = v1878.i64[0];
LABEL_2934:
              *(unsigned char *)(v1692 + 17) &= ~1u;
            }
            uint64_t v9 = (uint64_t)a1;
            uint64_t v14 = v1771;
            goto LABEL_61;
          }
          goto LABEL_2697;
        }
        BOOL v1738 = 0;
        uint64_t v1806 = 0;
        goto LABEL_46;
      }
      if (!memcmp(*v25, v33, (size_t)v25[1])) {
        goto LABEL_21;
      }
    }
    return "incompatible GC";
  }
  uint64_t v1645 = (uint64_t)v1642 - v1643;
  uint64_t v1646 = (v1643 >> 4);
  uint64_t v9 = (uint64_t)a1;
  uint64_t v14 = (llvm::LLVMContext ****)(a1 - 4);
  while (1)
  {
    unsigned int v1647 = *(_DWORD *)(*(void *)v1645 + 8);
    BOOL v182 = v1647 > 6;
    int v1648 = (1 << v1647) & 0x43;
    if (v182 || v1648 == 0) {
      return "unsupported operand bundle";
    }
    v1645 += 16;
    if (!--v1646) {
      goto LABEL_12;
    }
  }
}

void *sub_1CD179E7C(uint64_t a1, uint64_t a2)
{
  v39[8] = *MEMORY[0x1E4F143B8];
  uint64_t v34 = a1;
  if (a1 && *(unsigned char *)(a1 + 16) == 80)
  {
    a1 = *(void *)(a1 - 32);
    uint64_t v34 = a1;
  }
  uint64_t v36 = a1;
  BOOL v37 = 0;
  if (sub_1CC89AE34((uint64_t *)a2, &v36, &v37)
    && v37 != (void *)(*(void *)a2 + 16 * *(unsigned int *)(a2 + 16)))
  {
    return (void *)*((void *)v37 + 1);
  }
  uint64_t v3 = sub_1CD17A280(v34, a2);
  if (v3) {
    return v3;
  }
  sub_1CC01F644((uint64_t *)a2, &v34)[1] = 0;
  uint64_t v4 = v34;
  uint64_t v33 = v34;
  if (v34 && ((unsigned int v5 = *(unsigned __int8 *)(v34 + 16), v5 >= 0x1C) ? (v6 = v5 - 81 >= 0xFFFFFFFE) : (v6 = 0), v6))
  {
    unint64_t v7 = (uint64_t *)(v34 - 32);
  }
  else
  {
    int v8 = *(_DWORD *)(v34 + 20);
    if ((v8 & 0x40000000) != 0) {
      unint64_t v7 = *(uint64_t **)(v34 - 8);
    }
    else {
      unint64_t v7 = (uint64_t *)(v34 - 32 * (v8 & 0x7FFFFFF));
    }
  }
  uint64_t v9 = *v7;
  uint64_t v11 = (unsigned __int8 *)(*v7 + 16);
  unsigned int v10 = *v11;
  if (v9) {
    BOOL v12 = v10 >= 0x1C;
  }
  else {
    BOOL v12 = 0;
  }
  if (!v12)
  {
    uint64_t v3 = 0;
    goto LABEL_39;
  }
  while (1)
  {
    if (v10 == 80) {
      goto LABEL_30;
    }
    uint64_t v36 = v9;
    BOOL v37 = 0;
    if (!sub_1CC89AE34((uint64_t *)a2, &v36, &v37)
      || v37 == (void *)(*(void *)a2 + 16 * *(unsigned int *)(a2 + 16)))
    {
      uint64_t v3 = sub_1CD17A280(v9, a2);
    }
    else
    {
      uint64_t v3 = (void *)*((void *)v37 + 1);
    }
    if (v3) {
      break;
    }
    uint64_t v33 = v9;
    sub_1CC01F644((uint64_t *)a2, &v33)[1] = 0;
    unsigned int v10 = *v11;
LABEL_30:
    if (v10 < 0x1C || v10 - 81 < 0xFFFFFFFE)
    {
      int v14 = *(_DWORD *)(v9 + 20);
      if ((v14 & 0x40000000) != 0) {
        uint64_t v13 = *(uint64_t **)(v9 - 8);
      }
      else {
        uint64_t v13 = (uint64_t *)(v9 - 32 * (v14 & 0x7FFFFFF));
      }
    }
    else
    {
      uint64_t v13 = (uint64_t *)(v9 - 32);
    }
    uint64_t v3 = 0;
    uint64_t v9 = *v13;
    if (*v13)
    {
      uint64_t v11 = (unsigned __int8 *)(v9 + 16);
      unsigned int v10 = *(unsigned __int8 *)(v9 + 16);
      if (v10 > 0x1B) {
        continue;
      }
    }
    break;
  }
  uint64_t v4 = v33;
LABEL_39:
  BOOL v37 = v39;
  uint64_t v38 = 0x800000000;
  sub_1CB91FBE0((uint64_t)&v37, 1uLL, v4);
  for (unsigned int i = v38; v38; unsigned int i = v38)
  {
    uint64_t v32 = 0;
    uint64_t v16 = *((void *)v37 + i - 1);
    LODWORD(v38) = i - 1;
    uint64_t v32 = v16;
    uint64_t v35 = v16;
    uint64_t v36 = 0;
    if (!sub_1CC89AE34((uint64_t *)a2, &v35, &v36)
      || v36 == *(void *)a2 + 16 * *(unsigned int *)(a2 + 16)
      || !*(void *)(v36 + 8))
    {
      sub_1CC01F644((uint64_t *)a2, &v32)[1] = v3;
      if (v32 && *(unsigned char *)(v32 + 16) == 38)
      {
        int v17 = *(_DWORD *)(v32 + 20);
        if ((v17 & 0x40000000) != 0)
        {
          uint64_t v19 = *(void *)(v32 - 8);
          uint64_t v18 = v17 & 0x7FFFFFF;
        }
        else
        {
          uint64_t v18 = v17 & 0x7FFFFFF;
          uint64_t v19 = v32 - 32 * v18;
        }
        if (*(_WORD *)(v32 + 18)) {
          uint64_t v23 = 2;
        }
        else {
          uint64_t v23 = 1;
        }
        if (v23 != v18)
        {
          uint64_t v24 = v19 + 32 * v18;
          uint64_t v25 = v19 + 32 * v23;
          do
          {
            for (uint64_t j = *(void *)(*(void *)v25 + 48); ; uint64_t j = *(void *)(j + 8))
            {
              uint64_t v27 = j - 24;
              if (!j) {
                uint64_t v27 = 0;
              }
              if (*(unsigned char *)(v27 + 16) != 83) {
                break;
              }
            }
            for (uint64_t k = *(void *)(j - 16); k; uint64_t k = *(void *)(k + 8))
            {
              uint64_t v29 = *(void *)(k + 24);
              int v30 = *(unsigned __int8 *)(v29 + 16);
              if (v30 == 79 || v30 == 38)
              {
                if (v38 >= (unint64_t)HIDWORD(v38)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v37 + v38) = v29;
                LODWORD(v38) = v38 + 1;
              }
            }
            v25 += 32;
          }
          while (v25 != v24);
        }
      }
      else
      {
        for (uint64_t m = *(void *)(v32 + 8); m; uint64_t m = *(void *)(m + 8))
        {
          uint64_t v21 = *(void *)(m + 24);
          int v22 = *(unsigned __int8 *)(v21 + 16);
          if (v22 == 79 || v22 == 38)
          {
            if (v38 >= (unint64_t)HIDWORD(v38)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v37 + v38) = v21;
            LODWORD(v38) = v38 + 1;
          }
        }
      }
    }
  }
  if (v37 != v39) {
    free(v37);
  }
  return v3;
}

void *sub_1CD17A280(uint64_t a1, uint64_t a2)
{
  unsigned char v52[8] = *MEMORY[0x1E4F143B8];
  uint64_t v50 = v52;
  uint64_t v51 = 0x800000000;
  sub_1CB91FBE0((uint64_t)&v50, 1uLL, a1);
  do
  {
    while (1)
    {
LABEL_2:
      if (!v51)
      {
        uint64_t v15 = 0;
        goto LABEL_112;
      }
      uint64_t v5 = *((void *)v50 + v51 - 1);
      LODWORD(v51) = v51 - 1;
      if (!v5 || *(unsigned char *)(v5 + 16) != 38) {
        break;
      }
      int v6 = *(_DWORD *)(v5 + 20);
      if (*(_WORD *)(v5 + 18))
      {
        if ((v6 & 0x40000000) != 0) {
          uint64_t v21 = *(void *)(v5 - 8);
        }
        else {
          uint64_t v21 = v5 - 32 * (v6 & 0x7FFFFFF);
        }
        uint64_t v29 = *(void *)(v21 + 32);
        uint64_t v30 = v29 + 40;
        for (uint64_t i = *(void *)(v29 + 48); i != v30; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v15 = (void *)(i - 24);
          if (i) {
            uint64_t v32 = i - 24;
          }
          else {
            uint64_t v32 = 0;
          }
          if (*(unsigned char *)(v32 + 16) != 83) {
            goto LABEL_81;
          }
        }
      }
      else
      {
        if ((v6 & 0x40000000) != 0)
        {
          uint64_t v8 = *(void *)(v5 - 8);
          uint64_t v7 = v6 & 0x7FFFFFF;
        }
        else
        {
          uint64_t v7 = v6 & 0x7FFFFFF;
          uint64_t v8 = v5 - 32 * v7;
        }
        if (v7 != 1)
        {
          uint64_t v22 = v8 + 32 * v7;
          uint64_t v23 = v8 + 32;
          do
          {
            for (uint64_t j = *(void *)(*(void *)v23 + 48); ; uint64_t j = *(void *)(j + 8))
            {
              uint64_t v25 = j - 24;
              if (!j) {
                uint64_t v25 = 0;
              }
              if (*(unsigned char *)(v25 + 16) != 83) {
                break;
              }
            }
            for (uint64_t k = *(void *)(j - 16); k; uint64_t k = *(void *)(k + 8))
            {
              uint64_t v27 = *(void *)(k + 24);
              int v28 = *(unsigned __int8 *)(v27 + 16);
              if (v28 == 79 || v28 == 38)
              {
                uint64_t v48 = *(void *)(k + 24);
                uint64_t v49 = 0;
                if (!sub_1CC89AE34((uint64_t *)a2, &v48, &v49)
                  || v49 == *(void *)a2 + 16 * *(unsigned int *)(a2 + 16))
                {
                  if (v51 >= (unint64_t)HIDWORD(v51)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v50 + v51) = v27;
                  LODWORD(v51) = v51 + 1;
                }
                else
                {
                  uint64_t v15 = *(void **)(v49 + 8);
                  if (v15 && *((unsigned char *)v15 + 16) == 20) {
                    goto LABEL_81;
                  }
                }
              }
            }
            v23 += 32;
          }
          while (v23 != v22);
        }
      }
    }
    uint64_t v9 = *(void *)(v5 + 8);
  }
  while (!v9);
  while (1)
  {
    uint64_t v10 = *(void *)(v9 + 24);
    int v11 = *(unsigned __int8 *)(v10 + 16);
    if (v10)
    {
      if (v11 == 36) {
        break;
      }
    }
    if (v10 && v11 == 33)
    {
      uint64_t v12 = *(void *)(v10 - 64);
      uint64_t v13 = v12 + 40;
      for (uint64_t m = *(void *)(v12 + 48); m != v13; uint64_t m = *(void *)(m + 8))
      {
        uint64_t v15 = (void *)(m - 24);
        if (m) {
          uint64_t v16 = m - 24;
        }
        else {
          uint64_t v16 = 0;
        }
        if (*(unsigned char *)(v16 + 16) != 83) {
          goto LABEL_25;
        }
      }
      uint64_t v15 = 0;
LABEL_25:
      unsigned int v17 = *((unsigned __int8 *)v15 + 16);
      if (v17 < 0x1C) {
        goto LABEL_82;
      }
      unsigned int v18 = v17 - 81;
      if (v18 >= 0xFFFFFFFE)
      {
        uint64_t v20 = v15 - 4;
      }
      else
      {
        int v19 = *((_DWORD *)v15 + 5);
        if ((v19 & 0x40000000) != 0) {
          uint64_t v20 = (void *)*(v15 - 1);
        }
        else {
          uint64_t v20 = &v15[-4 * (v19 & 0x7FFFFFF)];
        }
      }
      if (*v20 != v5) {
        goto LABEL_84;
      }
      goto LABEL_34;
    }
    if (v11 == 79 || v11 == 38)
    {
      uint64_t v48 = *(void *)(v9 + 24);
      uint64_t v49 = 0;
      if (!sub_1CC89AE34((uint64_t *)a2, &v48, &v49)
        || v49 == *(void *)a2 + 16 * *(unsigned int *)(a2 + 16))
      {
        if (v51 >= (unint64_t)HIDWORD(v51)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v50 + v51) = v10;
        LODWORD(v51) = v51 + 1;
        goto LABEL_34;
      }
      uint64_t v15 = *(void **)(v49 + 8);
      if (v15) {
        goto LABEL_25;
      }
    }
LABEL_34:
    uint64_t v9 = *(void *)(v9 + 8);
    if (!v9) {
      goto LABEL_2;
    }
  }
  if (*(_WORD *)(v10 + 18))
  {
    uint64_t v33 = *(void *)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) + 32);
    if (v33)
    {
      uint64_t v34 = v33 + 40;
      for (uint64_t n = *(void *)(v33 + 48); n != v34; uint64_t n = *(void *)(n + 8))
      {
        uint64_t v15 = (void *)(n - 24);
        if (n) {
          uint64_t v36 = n - 24;
        }
        else {
          uint64_t v36 = 0;
        }
        if (*(unsigned char *)(v36 + 16) != 83) {
          goto LABEL_81;
        }
      }
      goto LABEL_2;
    }
  }
  uint64_t v15 = llvm::ConstantTokenNone::get(**(llvm::ConstantTokenNone ***)v5, v4);
  if (!v15) {
    goto LABEL_2;
  }
LABEL_81:
  unsigned int v37 = *((unsigned __int8 *)v15 + 16);
  if (v37 < 0x1C)
  {
LABEL_82:
    uint64_t v38 = 0;
    goto LABEL_90;
  }
  unsigned int v18 = v37 - 81;
LABEL_84:
  if (v18 >= 0xFFFFFFFE)
  {
    BOOL v40 = v15 - 4;
  }
  else
  {
    int v39 = *((_DWORD *)v15 + 5);
    if ((v39 & 0x40000000) != 0) {
      BOOL v40 = (uint64_t *)*(v15 - 1);
    }
    else {
      BOOL v40 = &v15[-4 * (v39 & 0x7FFFFFF)];
    }
  }
  uint64_t v38 = *v40;
LABEL_90:
  uint64_t v49 = v5;
  if (!v5 || v5 == v38) {
    goto LABEL_2;
  }
  char v41 = 0;
  unsigned int v42 = *(unsigned __int8 *)(v5 + 16);
  do
  {
    if (v42 != 80)
    {
      sub_1CC01F644((uint64_t *)a2, &v49)[1] = v15;
      uint64_t v5 = v49;
      v41 |= v49 == a1;
      unsigned int v42 = *(unsigned __int8 *)(v49 + 16);
    }
    if (v42 < 0x1C || v42 - 81 < 0xFFFFFFFE)
    {
      int v44 = *(_DWORD *)(v5 + 20);
      if ((v44 & 0x40000000) != 0) {
        unsigned int v43 = *(uint64_t **)(v5 - 8);
      }
      else {
        unsigned int v43 = (uint64_t *)(v5 - 32 * (v44 & 0x7FFFFFF));
      }
    }
    else
    {
      unsigned int v43 = (uint64_t *)(v5 - 32);
    }
    uint64_t v5 = *v43;
    unsigned int v42 = *(unsigned __int8 *)(*v43 + 16);
    if (v42 <= 0x1B) {
      uint64_t v45 = 0;
    }
    else {
      uint64_t v45 = v5;
    }
    uint64_t v49 = v45;
    if (v45) {
      BOOL v46 = v45 == v38;
    }
    else {
      BOOL v46 = 1;
    }
  }
  while (!v46);
  if ((v41 & 1) == 0) {
    goto LABEL_2;
  }
LABEL_112:
  if (v50 != v52) {
    free(v50);
  }
  return v15;
}

uint64_t sub_1CD17A740(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    int v5 = v4 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & v5;
    uint64_t v7 = (void *)(*(void *)a1 + 8 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7) {
      return 0;
    }
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      uint64_t v7 = (void *)(*(void *)a1 + 8 * v6);
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        return 0;
      }
    }
    if (v9) {
      int v14 = v9;
    }
    else {
      int v14 = v7;
    }
  }
  else
  {
    int v14 = 0;
  }
  *sub_1CC3D79E0(a1, (uint64_t)a2, a2, v14) = *a2;
  uint64_t v16 = *(void **)(a1 + 32);
  unint64_t v15 = *(void *)(a1 + 40);
  if ((unint64_t)v16 >= v15)
  {
    unsigned int v18 = *(void **)(a1 + 24);
    uint64_t v19 = v16 - v18;
    unint64_t v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61) {
      abort();
    }
    uint64_t v21 = v15 - (void)v18;
    if (v21 >> 2 > v20) {
      unint64_t v20 = v21 >> 2;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      if (v22 >> 61) {
        sub_1CB833614();
      }
      uint64_t v23 = (char *)operator new(8 * v22);
    }
    else
    {
      uint64_t v23 = 0;
    }
    uint64_t v24 = &v23[8 * v19];
    *(void *)uint64_t v24 = *a2;
    unsigned int v17 = v24 + 8;
    if (v16 != v18)
    {
      do
      {
        uint64_t v25 = *--v16;
        *((void *)v24 - 1) = v25;
        v24 -= 8;
      }
      while (v16 != v18);
      uint64_t v16 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 24) = v24;
    *(void *)(a1 + 32) = v17;
    *(void *)(a1 + 40) = &v23[8 * v22];
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    void *v16 = *a2;
    unsigned int v17 = v16 + 1;
  }
  *(void *)(a1 + 32) = v17;
  return 1;
}

unsigned __int8 *sub_1CD17A8D4(unsigned __int8 **a1, uint64_t a2, unsigned __int8 *a3, void *a4, uint64_t a5)
{
  llvm::DebugLoc::appendInlinedAt(a2, a3, a4, a5, &v13);
  uint64_t result = (unsigned __int8 *)llvm::DILocation::getImpl(a4, *(_DWORD *)(*(void *)a2 + 4), *(unsigned __int16 *)(*(void *)a2 + 2), *(void *)(*(void *)a2 - 8 * *(unsigned int *)(*(void *)a2 + 8)), (uint64_t)v13, 0, 0, 1);
  *a1 = result;
  if (result) {
    uint64_t result = (unsigned __int8 *)llvm::MetadataTracking::track((uint64_t)a1, result, 2);
  }
  if (v13)
  {
    int v9 = *v13;
    if ((v9 - 4) > 0x1E)
    {
      if ((v9 - 3) >= 0xFFFFFFFE) {
        int v10 = v13;
      }
      else {
        int v10 = 0;
      }
      if ((v9 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v11 = (unint64_t)(v10 + 8);
LABEL_13:
        int v14 = &v13;
        return (unsigned __int8 *)sub_1CC5FA668(v11 + 16, &v14);
      }
      if (v9 == 3) {
        *((void *)v13 + 1) = 0;
      }
    }
    else if ((v13[1] & 0x7F) == 2 || *((_DWORD *)v13 + 3))
    {
      uint64_t v12 = *((void *)v13 + 2);
      if ((v12 & 4) != 0)
      {
        unint64_t v11 = v12 & 0xFFFFFFFFFFFFFFF8;
        if (v11) {
          goto LABEL_13;
        }
      }
    }
  }
  return result;
}

unsigned __int8 *sub_1CD17A9E8(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = a2;
  if (!a2 || *a2 != 5) {
    return v2;
  }
  uint64_t v13 = a2;
  llvm::MetadataTracking::track((uint64_t)&v13, a2, 2);
  sub_1CD17A8D4(&v14, (uint64_t)&v13, **(unsigned __int8 ***)(a1 + 8), *(void **)a1, *(void *)(a1 + 16));
  int v2 = v14;
  if (v14)
  {
    int v4 = *v14;
    if ((v4 - 4) > 0x1E)
    {
      if ((v4 - 3) >= 0xFFFFFFFE) {
        uint64_t v7 = v14;
      }
      else {
        uint64_t v7 = 0;
      }
      if ((v4 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v8 = (unint64_t)(v7 + 8);
LABEL_17:
        unint64_t v15 = &v14;
        sub_1CC5FA668(v8 + 16, &v15);
        goto LABEL_7;
      }
      if (v4 == 3) {
        *((void *)v14 + 1) = 0;
      }
    }
    else if ((v14[1] & 0x7F) == 2 || *((_DWORD *)v14 + 3))
    {
      uint64_t v11 = *((void *)v14 + 2);
      if ((v11 & 4) != 0)
      {
        unint64_t v8 = v11 & 0xFFFFFFFFFFFFFFF8;
        if (v8) {
          goto LABEL_17;
        }
      }
    }
  }
LABEL_7:
  if (v13)
  {
    int v5 = *v13;
    if ((v5 - 4) > 0x1E)
    {
      if ((v5 - 3) >= 0xFFFFFFFE) {
        int v9 = v13;
      }
      else {
        int v9 = 0;
      }
      if ((v5 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v10 = (unint64_t)(v9 + 8);
LABEL_23:
        unint64_t v15 = &v13;
        sub_1CC5FA668(v10 + 16, &v15);
        return v2;
      }
      if (v5 == 3) {
        *((void *)v13 + 1) = 0;
      }
    }
    else if ((v13[1] & 0x7F) == 2 || *((_DWORD *)v13 + 3))
    {
      uint64_t v12 = *((void *)v13 + 2);
      if ((v12 & 4) != 0)
      {
        unint64_t v10 = v12 & 0xFFFFFFFFFFFFFFF8;
        if (v10) {
          goto LABEL_23;
        }
      }
    }
  }
  return v2;
}

void sub_1CD17AB54()
{
}

uint64_t *sub_1CD17AC14(uint64_t a1, uint64_t *a2)
{
  unint64_t v8 = 0;
  char v4 = sub_1CC152E2C(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    sub_1CD17ACF8(a1, v7);
    unint64_t v8 = 0;
    sub_1CC152E2C(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    uint64_t result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *uint64_t result = *a2;
  result[1] = 0;
  return result;
}

void *sub_1CD17ACF8(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  char v4 = *(unsigned __int8 ***)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD17ADC4(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD17ADC4(uint64_t result, unsigned __int8 **a2, unsigned __int8 **a3)
{
  uint64_t v4 = result;
  *(void *)(result + 8) = 0;
  uint64_t v5 = *(unsigned int *)(result + 16);
  if (v5)
  {
    unint64_t v6 = *(void **)result;
    uint64_t v7 = 16 * v5;
    do
    {
      *unint64_t v6 = -4096;
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  if (a2 != a3)
  {
    unsigned int v8 = a2 + 1;
    do
    {
      uint64_t v9 = (uint64_t)*(v8 - 1);
      if ((v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v13 = 0;
        uint64_t result = sub_1CC152E2C(*(void *)v4, *(_DWORD *)(v4 + 16), v9, &v13);
        uint64_t v10 = v13;
        *uint64_t v13 = *(v8 - 1);
        v10[1] = *v8;
        uint64_t v11 = (uint64_t)(v10 + 1);
        if (*v8)
        {
          uint64_t result = llvm::MetadataTracking::retrack((uint64_t)v8, *v8, v11);
          *unsigned int v8 = 0;
        }
        ++*(_DWORD *)(v4 + 8);
      }
      uint64_t v12 = v8 + 1;
      v8 += 2;
    }
    while (v12 != a3);
  }
  return result;
}

uint64_t sub_1CD17AE90(unsigned __int8 **a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7 = 0;
  uint64_t result = sub_1CC152E2C(a2, a3, a4, &v7);
  if (result)
  {
    unint64_t v6 = *(unsigned __int8 **)(v7 + 8);
    *a1 = v6;
    if (v6)
    {
      return llvm::MetadataTracking::track((uint64_t)a1, v6, 2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return result;
}

void *sub_1CD17AF14(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
LABEL_3:
    sub_1CD17AFCC(a1, v6);
    unsigned int v8 = 0;
    sub_1CC1DE178(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    a3 = v8;
    goto LABEL_4;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3) {
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CD17AFCC(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD881C2C(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void *sub_1CD17B098(uint64_t a1, uint64_t *a2)
{
  int v7 = 0;
  char v4 = sub_1CC1DE178(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  unint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = sub_1CD17AF14(a1, a2, v7);
    *unint64_t v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_1CD17B104(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    while (1)
    {
      uint64_t v2 = *(void *)(v1 + 24);
      if (*(unsigned char *)(v2 + 16) == 84)
      {
        uint64_t v3 = *(void *)(v2 - 32);
        if (v3)
        {
          if (!*(unsigned char *)(v3 + 16)
            && *(void *)(v3 + 24) == *(void *)(v2 + 72)
            && (*(unsigned char *)(v3 + 33) & 0x20) != 0
            && llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)v2))
          {
            break;
          }
        }
      }
      uint64_t v1 = *(void *)(v1 + 8);
      if (!v1) {
        return 0;
      }
    }
    return 1;
  }
  return result;
}

uint64_t sub_1CD17B180(uint64_t a1, llvm::CallInst *a2, uint64_t a3)
{
  uint64_t v3 = a1 + 40;
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4 != a1 + 40)
  {
    do
    {
      uint64_t v7 = v4;
      uint64_t v4 = *(void *)(v4 + 8);
      uint64_t v8 = v7 - 24;
      if (!v7) {
        uint64_t v8 = 0;
      }
      int v9 = *(unsigned __int8 *)(v8 + 16);
      if (v9 == 84) {
        uint64_t v10 = v8;
      }
      else {
        uint64_t v10 = 0;
      }
      if (!v7) {
        continue;
      }
      if (v9 != 84) {
        continue;
      }
      uint64_t v11 = *(void *)(v10 + 64);
      if (v11)
      {
        if ((*(unsigned char *)(v11 + 16) & 0x20) != 0) {
          continue;
        }
      }
      if (llvm::CallBase::hasFnAttrOnCalledFunction(v10, 37)) {
        continue;
      }
      uint64_t v12 = *(void *)(v10 - 32);
      if (*(unsigned char *)(v12 + 16))
      {
        if (*(unsigned char *)(v12 + 16) != 24 || *(unsigned char *)(v12 + 88)) {
          goto LABEL_17;
        }
      }
      else if (*(void *)(v12 + 24) != *(void *)(v10 + 72) {
             || (int v15 = *(_DWORD *)(v12 + 36), v15 != 119) && v15 != 125)
      }
      {
LABEL_17:
        sub_1CC233A58((char *)v10, 1, (uint64_t *)&v17);
        if (!v18 || (int v14 = sub_1CD179E7C(*v17, a3)) == 0 || *((unsigned char *)v14 + 16) == 20) {
          llvm::changeToInvokeAndSplitBasicBlock((llvm *)v10, a2, 0, v13);
        }
      }
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t sub_1CD17B2C0()
{
  LOBYTE(v2) = 1;
  uint64_t v3 = (char *)&v2;
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Convert noalias attributes to metadata during inlining.";
  v4.n128_u64[1] = 55;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCFC4E8, "enable-noalias-to-md-conversion", &v3, &v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFC4E8, &dword_1CB82C000);
  int v5 = 1;
  int v2 = 1;
  char v1 = 1;
  uint64_t v3 = &v1;
  v4.n128_u64[0] = (unint64_t)"Use the llvm.experimental.noalias.scope.decl intrinsic during inlining.";
  v4.n128_u64[1] = 71;
  sub_1CD881CDC(&v5, &v2, &v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCFC5A8, &dword_1CB82C000);
  LOBYTE(v2) = 0;
  int v5 = 1;
  uint64_t v3 = (char *)&v2;
  v4.n128_u64[0] = (unint64_t)"Convert align attributes to assumptions during inlining.";
  v4.n128_u64[1] = 56;
  sub_1CD881E74(&v3, &v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCFC668, &dword_1CB82C000);
  LOBYTE(v2) = 1;
  int v5 = 1;
  uint64_t v3 = (char *)&v2;
  v4.n128_u64[0] = (unint64_t)"Update return attributes on calls within inlined body";
  v4.n128_u64[1] = 53;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCFC728, "update-return-attrs", &v3, &v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFC728, &dword_1CB82C000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"the maximum number of instructions analyzed for may throw during attribute inferenc"
                                     "e in inlined body";
  v4.n128_u64[1] = 100;
  int v2 = 4;
  uint64_t v3 = (char *)&v2;
  sub_1CD881FEC(&v5, (long long *)&v4, (int **)&v3);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCFC7E8, &dword_1CB82C000);
}

uint64_t sub_1CD17B484(uint64_t result, uint64_t a2)
{
  v134[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a2 + 72;
  uint64_t v3 = *(void *)(a2 + 80);
  if (v3 == a2 + 72) {
    return result;
  }
  __n128 v4 = (uint64_t *)result;
  while (1)
  {
    uint64_t v5 = v3 - 24;
    if (!v3) {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(void *)(v5 + 48);
    if (v6 != v5 + 40) {
      break;
    }
    uint64_t v3 = *(void *)(v3 + 8);
    if (v3 == v2) {
      return result;
    }
  }
  uint64_t v7 = v122;
  uint64_t v8 = v134;
  while (1)
  {
    uint64_t v9 = v6 - 24;
    if (!v6) {
      uint64_t v9 = 0;
    }
    int v10 = *(unsigned __int8 *)(v9 + 16);
    if (v10 == 84) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = 0;
    }
    if (v6 && v10 == 84)
    {
      uint64_t v12 = *(void *)(v11 + 64);
      if (!v12 || (*(unsigned char *)(v12 + 14) & 0x10) == 0)
      {
        uint64_t result = llvm::CallBase::hasFnAttrOnCalledFunction(v11, 20);
        if (!result) {
          goto LABEL_22;
        }
        uint64_t v12 = *(void *)(v11 + 64);
        if (!v12) {
          goto LABEL_21;
        }
      }
      if ((*(unsigned char *)(v12 + 12) & 0x10) == 0)
      {
LABEL_21:
        uint64_t result = llvm::CallBase::hasFnAttrOnCalledFunction(v11, 4);
        if (!result) {
          goto LABEL_35;
        }
      }
LABEL_22:
      uint64_t v13 = *(uint64_t ****)(v11 - 32);
      if (!v13) {
        goto LABEL_35;
      }
      if (*((unsigned char *)v13 + 16)) {
        goto LABEL_35;
      }
      uint64_t v116 = (uint64_t *)(v11 - 32);
      if (v13[3] != *(uint64_t ***)(v11 + 72)) {
        goto LABEL_35;
      }
      if ((*((unsigned char *)v13 + 23) & 0x10) != 0)
      {
        uint64_t v14 = ***v13;
        uint64_t v15 = *(void *)(v14 + 152);
        uint64_t v16 = *(unsigned int *)(v14 + 168);
        if (v16)
        {
          LODWORD(v17) = (v16 - 1) & ((v13 >> 4) ^ (v13 >> 9));
          char v18 = (uint64_t ****)(v15 + 16 * v17);
          uint64_t v19 = *v18;
          if (*v18 != v13)
          {
            int v20 = 1;
            do
            {
              if (v19 == (uint64_t ***)-4096) {
                goto LABEL_32;
              }
              int v21 = v17 + v20++;
              uint64_t v17 = v21 & (v16 - 1);
              uint64_t v19 = *(uint64_t ****)(v15 + 16 * v17);
            }
            while (v19 != v13);
            char v18 = (uint64_t ****)(v15 + 16 * v17);
          }
        }
        else
        {
LABEL_32:
          char v18 = (uint64_t ****)(v15 + 16 * v16);
        }
        unint64_t v22 = v18[1];
        size_t v25 = (size_t)*v22;
        uint64_t v23 = (char *)(v22 + 2);
        size_t v24 = v25;
      }
      else
      {
        size_t v24 = 0;
        uint64_t v23 = &byte_1CFBCE98E;
      }
      size_t v108 = v24;
      uint64_t v109 = v23;
      uint64_t result = llvm::TargetLibraryInfoImpl::isFunctionVectorizable(*v4, v23, v24);
      if (!result) {
        goto LABEL_35;
      }
      unint64_t v105 = v8;
      uint64_t v127 = &v129;
      uint64_t v128 = 0x800000000;
      llvm::VFABI::getVectorVariantNames(v11, (uint64_t)&v127);
      uint64_t v102 = *(void *)(*(void *)(*(void *)(v11 + 40) + 56) + 40);
      int v28 = v127;
      uint64_t v29 = &v127[3 * v128];
      v120[0] = 0;
      v120[1] = 0;
      int v121 = 0;
      v7[1] = 0;
      v7[2] = 0;
      *uint64_t v7 = 0;
      sub_1CD8824B8((uint64_t)v120, v28, v29);
      uint64_t v118 = 0;
      uint64_t v119 = 0;
      llvm::TargetLibraryInfoImpl::getWidestVF(*v4, v109, v108, &v119, &v118);
      unsigned int v30 = 2;
      __int16 v117 = (llvm::Type *)2;
      uint64_t v103 = v7;
      unsigned int v104 = v4;
      while (1)
      {
        if (v30 > v119)
        {
LABEL_180:
          llvm::VFABI::setVectorVariantNames(v11, (uint64_t)v127, v128);
          if (v122[0])
          {
            v122[1] = v122[0];
            operator delete(v122[0]);
          }
          MEMORY[0x1D25D9CD0](v120[0], 8);
          uint64_t result = (uint64_t)sub_1CC076978((void **)&v127);
          uint64_t v8 = v105;
          break;
        }
        VectorizedFunctiouint64_t n = llvm::TargetLibraryInfoImpl::getVectorizedFunction(*v4, v109, v108, (int *)&v117);
        if (v32 >= 0x7FFFFFFFFFFFFFF8) {
          abort();
        }
        uint64_t v33 = VectorizedFunction;
        size_t v34 = v32;
        if (v32 >= 0x17)
        {
          uint64_t v36 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v32 | 7) != 0x17) {
            uint64_t v36 = v32 | 7;
          }
          unsigned int v37 = v7;
          uint64_t v38 = v36 + 1;
          p_dst = (void **)operator new(v36 + 1);
          unint64_t v39 = v38 | 0x8000000000000000;
          uint64_t v7 = v37;
          size_t v125 = v34;
          int64_t v126 = v39;
          std::string __dst = p_dst;
        }
        else
        {
          HIBYTE(v126) = v32;
          p_dst = (void **)&__dst;
          if (!v32) {
            goto LABEL_54;
          }
        }
        memmove(p_dst, v33, v34);
LABEL_54:
        *((unsigned char *)p_dst + v34) = 0;
        char v40 = HIBYTE(v126);
        if (v126 >= 0) {
          size_t v41 = HIBYTE(v126) & 0x7F;
        }
        else {
          size_t v41 = v125;
        }
        if (v41)
        {
          if (v126 >= 0) {
            unsigned int v42 = (void **)&__dst;
          }
          else {
            unsigned int v42 = __dst;
          }
          int v43 = *(unsigned __int8 *)(v11 + 16);
          if (v43 == 84)
          {
            uint64_t v44 = 0;
          }
          else if (v43 == 39)
          {
            uint64_t v44 = (*(_DWORD *)(v11 + 80) + 1);
          }
          else
          {
            uint64_t v44 = 2;
          }
          int v45 = *(_DWORD *)(v11 + 20);
          if (v45 < 0 && (uint64_t v100 = v45 & 0x7FFFFFF, (*(void *)(v11 - 8 - 32 * v100) & 0xFFFFFFFF0) != 0))
          {
            uint64_t v47 = -v100;
            int v46 = *(_DWORD *)(v11 - 32 * v100 - 12) - *(_DWORD *)(v11 - 32 * v100 - *(void *)(v11 - 32 * v100 - 8));
          }
          else
          {
            int v46 = 0;
            uint64_t v47 = -(uint64_t)(v45 & 0x7FFFFFF);
          }
          llvm::VFABI::mangleTLIVectorName(v42, v41, v109, v108, (-32 - 32 * v44 + 32 * (unint64_t)-v46 - 32 * v47) >> 5, (unint64_t)v117, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
          }
          else {
            size_t size = __p.__r_.__value_.__l.__size_;
          }
          int v50 = v121;
          if (v121)
          {
            uint64_t v51 = v120[0];
            int v52 = sub_1CD0B03C8(p_p, (uint64_t)p_p + size);
            unsigned int v53 = v50 - 1;
            for (int i = 1; ; int i = v113 + 1)
            {
              int v113 = i;
              int v55 = v52 & v53;
              uint64_t v56 = v51 + 16 * (v52 & v53);
              uint64_t v57 = *(const void **)v56;
              if (*(void *)v56 == -1)
              {
                if (p_p == (std::string *)-1) {
                  goto LABEL_85;
                }
              }
              else if (v57 == (const void *)-2)
              {
                if (p_p == (std::string *)-2) {
                  goto LABEL_85;
                }
              }
              else if (size == *(void *)(v56 + 8) && (!size || !memcmp(p_p, v57, size)))
              {
                goto LABEL_85;
              }
              if (v57 == (const void *)-1) {
                break;
              }
              int v52 = v113 + v55;
            }
          }
          sub_1CD504070((uint64_t)&v127, (unint64_t)&__p);
LABEL_85:
          int v58 = __dst;
          unint64_t v59 = v125;
          if (v126 >= 0)
          {
            int v58 = (void **)&__dst;
            unint64_t v59 = HIBYTE(v126) & 0x7F;
          }
          unsigned int v110 = v58;
          uint64_t v111 = *(uint64_t **)(v102 + 112);
          unint64_t v60 = *((unsigned int *)v111 + 8);
          size_t v61 = v59;
          if ((v60 & 0x80000000) == 0)
          {
            if (v60 <= 1) {
              unint64_t v62 = 1;
            }
            else {
              unint64_t v62 = v60;
            }
            if (v59 < v62) {
              unint64_t v62 = v59;
            }
            if (v59 > v60) {
              size_t v61 = v62;
            }
            else {
              size_t v61 = v59;
            }
          }
          uint64_t v106 = (llvm::ConstantExpr *)v59;
          uint64_t v107 = *((unsigned int *)v111 + 2);
          if (!v107) {
            goto LABEL_111;
          }
          int v63 = 0;
          if (v61)
          {
            size_t v64 = v61;
            uint64_t v65 = v110;
            do
            {
              int v66 = *(unsigned __int8 *)v65;
              uint64_t v65 = (void **)((char *)v65 + 1);
              int v63 = 33 * v63 + v66;
              --v64;
            }
            while (v64);
          }
          uint64_t v67 = *v111;
          uint64_t v114 = *v111 + 8 * v107 + 8;
          int v68 = 1;
          int v69 = v63;
          while (1)
          {
            uint64_t v70 = v69 & (v107 - 1);
            uint64_t v71 = *(void **)(v67 + 8 * v70);
            if (v71 != (void *)-8)
            {
              if (!v71) {
                goto LABEL_111;
              }
              if (*(_DWORD *)(v114 + 4 * v70) == v63
                && v61 == *v71
                && (!v61 || !memcmp(v110, (char *)v71 + *((unsigned int *)v111 + 5), v61)))
              {
                break;
              }
            }
            int v69 = v68 + v70;
            ++v68;
          }
          if (v70 == -1
            || (int)v70 == v107
            || (uint64_t v72 = *(void *)(*(void *)(v67 + 8 * (int)v70) + 8)) == 0
            || *(unsigned char *)(v72 + 16))
          {
LABEL_111:
            int v73 = *(void **)(*(void *)(*(void *)(v11 + 40) + 56) + 40);
            BOOL v74 = *(uint64_t ***)v11;
            unsigned int v75 = v117;
            int v76 = *(unsigned __int8 *)(*(void *)v11 + 8);
            if (v76 == 7 || v76 == 9)
            {
              uint64_t v78 = v105;
            }
            else
            {
              BOOL v99 = ((unint64_t)v117 & 0xFFFFFFFF00000000) != 0x100000000 && v117 == 1;
              uint64_t v78 = v105;
              if (!v99)
              {
                if (((unint64_t)v117 & 0xFFFFFFFF00000000) == 0x100000000) {
                  llvm::ScalableVectorType::get(v74, v117);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v74, v117);
                }
              }
            }
            int v132 = v78;
            uint64_t v133 = 0x400000000;
            int v79 = *(_DWORD *)(v11 + 20);
            int v80 = *(unsigned __int8 *)(v11 + 16);
            if (v80 == 84)
            {
              uint64_t v81 = 0;
            }
            else
            {
              if (v80 == 39) {
                uint64_t v81 = (*(_DWORD *)(v11 + 80) + 1);
              }
              else {
                uint64_t v81 = 2;
              }
              uint64_t v78 = v105;
            }
            uint64_t v82 = v79 & 0x7FFFFFF;
            uint64_t v83 = (uint64_t ****)(v11 - 32 * v82);
            if (v79 < 0)
            {
              uint64_t v101 = (uint64_t)*(v83 - 1);
              if ((v101 & 0xFFFFFFFF0) != 0) {
                uint64_t v84 = (*((_DWORD *)v83 - 3) - *(_DWORD *)((char *)v83 - v101));
              }
              else {
                uint64_t v84 = 0;
              }
              uint64_t v78 = v105;
            }
            else
            {
              uint64_t v84 = 0;
            }
            if (v83 == (uint64_t ****)&v116[-4 * v81 + -4 * v84])
            {
              unsigned int v85 = 0;
              uint64_t v86 = (uint64_t)v78;
            }
            else
            {
              uint64_t v112 = v74;
              int v115 = v73;
              BOOL v88 = ((unint64_t)v75 & 0xFFFFFFFF00000000) != 0x100000000 && v75 == 1;
              uint64_t v89 = 32 * v82 - 32 * v81 - 32 * v84 - 32;
              do
              {
                uint64_t v90 = **v83;
                int v91 = *((unsigned __int8 *)v90 + 8);
                BOOL v92 = v91 == 7 || v91 == 9;
                if (!v92 && !v88)
                {
                  uint64_t v93 = **v83;
                  if (((unint64_t)v75 & 0xFFFFFFFF00000000) == 0x100000000) {
                    llvm::ScalableVectorType::get(v93, v75);
                  }
                  else {
                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v93, v75);
                  }
                  uint64_t v90 = v94;
                }
                if (v133 >= (unint64_t)HIDWORD(v133)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                v132[v133] = v90;
                unsigned int v85 = v133 + 1;
                LODWORD(v133) = v133 + 1;
                v83 += 4;
                v89 -= 32;
              }
              while (v89);
              uint64_t v86 = (uint64_t)v132;
              uint64_t v78 = v105;
              BOOL v74 = v112;
              int v73 = v115;
            }
            uint64_t v95 = (llvm::PointerType *)llvm::FunctionType::get(v74, v86, v85, 0);
            __int16 v131 = 261;
            v130[0] = (llvm::ConstantExpr *)v110;
            v130[1] = v106;
            uint64_t v96 = (unint64_t *)operator new(0x80uLL);
            uint64_t v97 = (llvm::Function *)(v96 + 1);
            *((_DWORD *)v96 + 7) = *((_DWORD *)v96 + 7) & 0x38000000 | 0x40000000;
            *uint64_t v96 = 0;
            llvm::Function::Function(v96 + 1, v95, 0, (llvm::Type *)0xFFFFFFFFLL, (const char **)v130, (unint64_t)v73);
            uint64_t v98 = *v116;
            if (!*v116 || *(unsigned char *)(v98 + 16) || *(void *)(v98 + 24) != *(void *)(v11 + 72)) {
              uint64_t v98 = 0;
            }
            llvm::Function::copyAttributesFrom(v97, (const llvm::Function *)v98);
            v130[0] = v97;
            sub_1CD1CF0D0(v73, "llvm.compiler.used", (const char *)0x12, v130, 1);
            if (v132 != v78) {
              free(v132);
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          char v40 = HIBYTE(v126);
          uint64_t v7 = v103;
          __n128 v4 = v104;
        }
        if (v40 < 0) {
          operator delete(__dst);
        }
        unsigned int v30 = 2 * v117;
        LODWORD(v117) = 2 * v117;
        if (HIDWORD(v117) == 1 && HIDWORD(v119) != 1) {
          goto LABEL_180;
        }
      }
    }
LABEL_35:
    uint64_t v6 = *(void *)(v6 + 8);
    uint64_t v26 = v3 - 24;
    if (!v3) {
      uint64_t v26 = 0;
    }
    if (v6 == v26 + 40) {
      break;
    }
LABEL_42:
    if (v3 == v2) {
      return result;
    }
  }
  while (1)
  {
    uint64_t v3 = *(void *)(v3 + 8);
    if (v3 == v2) {
      return result;
    }
    uint64_t v27 = v3 - 24;
    if (!v3) {
      uint64_t v27 = 0;
    }
    uint64_t v6 = *(void *)(v27 + 48);
    if (v6 != v27 + 40) {
      goto LABEL_42;
    }
  }
}

void sub_1CD17BDD8(uint64_t a1)
{
}

void llvm::initializeInstNamerPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFC8B8, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CD17BEE4;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCFC8B8, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD17BEE4()
{
}

uint64_t sub_1CD17BF80(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCFC8B0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2648410;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFC8B8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CD17BEE4;
    v5[1] = &PassRegistry;
    __n128 v4 = v5;
    std::__call_once(&qword_1EBCFC8B8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CD17C030(llvm::Function *this)
{
  if ((*((_WORD *)this + 9) & 1) == 0)
  {
    uint64_t v2 = (uint64_t ***)*((void *)this + 11);
LABEL_3:
    uint64_t v3 = v2;
    goto LABEL_4;
  }
  llvm::Function::BuildLazyArguments(this);
  uint64_t v2 = (uint64_t ***)*((void *)this + 11);
  if ((*((_WORD *)this + 9) & 1) == 0) {
    goto LABEL_3;
  }
  llvm::Function::BuildLazyArguments(this);
  uint64_t v3 = (uint64_t ***)*((void *)this + 11);
LABEL_4:
  __n128 v4 = &v3[5 * *((void *)this + 12)];
  if (v2 != v4)
  {
    while (1)
    {
      if ((*((unsigned char *)v2 + 23) & 0x10) != 0) {
        goto LABEL_7;
      }
      v53[0] = "arg";
      __int16 v54 = 259;
      llvm::Value::setNameImpl((llvm::Value *)v2, v53);
      if (*((unsigned char *)v2 + 16)) {
        goto LABEL_7;
      }
      if ((*((unsigned char *)v2 + 23) & 0x10) == 0)
      {
LABEL_24:
        int v18 = 0;
        *((_DWORD *)v2 + 8) &= ~0x2000u;
        goto LABEL_25;
      }
      uint64_t v5 = ***v2;
      uint64_t v6 = *(void *)(v5 + 152);
      uint64_t v7 = *(unsigned int *)(v5 + 168);
      if (!v7) {
        goto LABEL_16;
      }
      LODWORD(v8) = (v7 - 1) & ((v2 >> 4) ^ (v2 >> 9));
      uint64_t v9 = (uint64_t ****)(v6 + 16 * v8);
      int v10 = *v9;
      if (*v9 != v2) {
        break;
      }
LABEL_17:
      uint64_t v13 = v9[1];
      unint64_t v16 = (unint64_t)*v13;
      uint64_t v14 = v13 + 2;
      unint64_t v15 = v16;
      if (v16 < 5) {
        goto LABEL_24;
      }
      if (*(_DWORD *)v14 != *(_DWORD *)"llvm." || v14[4] != aLlvm_1[4]) {
        goto LABEL_24;
      }
      *((_DWORD *)v2 + 8) |= 0x2000u;
      int v18 = llvm::Function::lookupIntrinsicID(v14, v15);
LABEL_25:
      *((_DWORD *)v2 + 9) = v18;
LABEL_7:
      v2 += 5;
      if (v2 == v4) {
        goto LABEL_26;
      }
    }
    int v11 = 1;
    while (v10 != (uint64_t ***)-4096)
    {
      int v12 = v8 + v11++;
      uint64_t v8 = v12 & (v7 - 1);
      int v10 = *(uint64_t ****)(v6 + 16 * v8);
      if (v10 == v2)
      {
        uint64_t v9 = (uint64_t ****)(v6 + 16 * v8);
        goto LABEL_17;
      }
    }
LABEL_16:
    uint64_t v9 = (uint64_t ****)(v6 + 16 * v7);
    goto LABEL_17;
  }
LABEL_26:
  uint64_t v19 = (char *)this + 72;
  int v20 = (char *)*((void *)this + 10);
  if (v20 != (char *)this + 72)
  {
LABEL_27:
    if (v20) {
      int v21 = (llvm::Value *)(v20 - 24);
    }
    else {
      int v21 = 0;
    }
    if ((*((unsigned char *)v21 + 23) & 0x10) == 0)
    {
      v53[0] = "bb";
      __int16 v54 = 259;
      llvm::Value::setNameImpl(v21, v53);
      if (v20)
      {
        if (!*((unsigned char *)v21 + 16))
        {
          if ((*((unsigned char *)v21 + 23) & 0x10) == 0) {
            goto LABEL_77;
          }
          uint64_t v39 = ***(void ***)v21;
          uint64_t v40 = *(void *)(v39 + 152);
          uint64_t v41 = *(unsigned int *)(v39 + 168);
          if (v41)
          {
            LODWORD(v42) = (v41 - 1) & ((v21 >> 4) ^ (v21 >> 9));
            int v43 = (llvm::Value **)(v40 + 16 * v42);
            uint64_t v44 = *v43;
            if (*v43 != v21)
            {
              int v45 = 1;
              do
              {
                if (v44 == (llvm::Value *)-4096) {
                  goto LABEL_69;
                }
                int v46 = v42 + v45++;
                uint64_t v42 = v46 & (v41 - 1);
                uint64_t v44 = *(llvm::Value **)(v40 + 16 * v42);
              }
              while (v44 != v21);
              int v43 = (llvm::Value **)(v40 + 16 * v42);
            }
          }
          else
          {
LABEL_69:
            int v43 = (llvm::Value **)(v40 + 16 * v41);
          }
          uint64_t v47 = v43[1];
          unint64_t v50 = *(void *)v47;
          uint64_t v48 = (char *)v47 + 16;
          unint64_t v49 = v50;
          if (v50 >= 5 && (*(_DWORD *)v48 == *(_DWORD *)"llvm." ? (BOOL v51 = v48[4] == aLlvm_1[4]) : (BOOL v51 = 0), v51))
          {
            *((_DWORD *)v21 + 8) |= 0x2000u;
            int v52 = llvm::Function::lookupIntrinsicID(v48, v49);
          }
          else
          {
LABEL_77:
            int v52 = 0;
            *((_DWORD *)v21 + 8) &= ~0x2000u;
          }
          *((_DWORD *)v21 + 9) = v52;
        }
      }
    }
    unint64_t v22 = (void ***)((char *)v21 + 40);
    for (int i = (void **)*((void *)v21 + 6); ; int i = (void **)i[1])
    {
      if (i == v22)
      {
        int v20 = (char *)*((void *)v20 + 1);
        if (v20 == v19) {
          return;
        }
        goto LABEL_27;
      }
      size_t v24 = i ? (llvm::Value *)(i - 3) : 0;
      if ((*((unsigned char *)v24 + 23) & 0x10) == 0 && *(unsigned char *)(*(void *)v24 + 8) != 7)
      {
        v53[0] = "i";
        __int16 v54 = 259;
        llvm::Value::setNameImpl(v24, v53);
        if (i)
        {
          if (!*((unsigned char *)v24 + 16)) {
            break;
          }
        }
      }
LABEL_42:
      ;
    }
    if ((*((unsigned char *)v24 + 23) & 0x10) == 0) {
      goto LABEL_58;
    }
    uint64_t v25 = ***(void ***)v24;
    uint64_t v26 = *(void *)(v25 + 152);
    uint64_t v27 = *(unsigned int *)(v25 + 168);
    if (v27)
    {
      LODWORD(v28) = (v27 - 1) & ((v24 >> 4) ^ (v24 >> 9));
      uint64_t v29 = (llvm::Value **)(v26 + 16 * v28);
      unsigned int v30 = *v29;
      if (*v29 == v24)
      {
LABEL_51:
        uint64_t v33 = v29[1];
        unint64_t v36 = *(void *)v33;
        size_t v34 = (char *)v33 + 16;
        unint64_t v35 = v36;
        if (v36 >= 5 && *(_DWORD *)v34 == *(_DWORD *)"llvm." && v34[4] == aLlvm_1[4])
        {
          *((_DWORD *)v24 + 8) |= 0x2000u;
          int v38 = llvm::Function::lookupIntrinsicID(v34, v35);
LABEL_59:
          *((_DWORD *)v24 + 9) = v38;
          goto LABEL_42;
        }
LABEL_58:
        int v38 = 0;
        *((_DWORD *)v24 + 8) &= ~0x2000u;
        goto LABEL_59;
      }
      int v31 = 1;
      while (v30 != (llvm::Value *)-4096)
      {
        int v32 = v28 + v31++;
        uint64_t v28 = v32 & (v27 - 1);
        unsigned int v30 = *(llvm::Value **)(v26 + 16 * v28);
        if (v30 == v24)
        {
          uint64_t v29 = (llvm::Value **)(v26 + 16 * v28);
          goto LABEL_51;
        }
      }
    }
    uint64_t v29 = (llvm::Value **)(v26 + 16 * v27);
    goto LABEL_51;
  }
}

void sub_1CD17C438()
{
}

void sub_1CD17C478(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD17C4B0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

uint64_t sub_1CD17C4BC(int a1, llvm::Function *this)
{
  return 1;
}

void llvm::expandRemainder(llvm *this, llvm::BinaryOperator *a2)
{
  uint64_t v3 = 0;
  v78[1] = *MEMORY[0x1E4F143B8];
  __n128 v4 = **(uint64_t ***)this;
  v64[1] = (void *)0x200000000;
  int v68 = v4;
  int v69 = &v77;
  uint64_t v70 = v78;
  uint64_t v71 = 0;
  int v72 = 0;
  __int16 v73 = 512;
  char v74 = 7;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  uint64_t v77 = &unk_1F2616E88;
  v78[0] = &unk_1F2617008;
  uint64_t v5 = (unsigned __int8 *)*((void *)this + 6);
  uint64_t v66 = *((void *)this + 5);
  uint64_t v67 = (char *)this + 24;
  int v63 = v5;
  v64[0] = &v65;
  if (v5)
  {
    llvm::MetadataTracking::track((uint64_t)&v63, v5, 2);
    uint64_t v3 = (uint64_t)v63;
  }
  sub_1CB8461A4((uint64_t)v64, 0, v3);
  if (!v63)
  {
LABEL_4:
    if (*((unsigned char *)this + 16) == 51)
    {
      uint64_t v7 = *((void *)this - 8);
      uint64_t v8 = *((void *)this - 4);
      uint64_t v9 = *v68;
      if ((*(_DWORD *)(*(void *)v7 + 8) & 0xFFFFFF00) == 0x4000)
      {
        int v10 = *(llvm::ConstantInt **)(v9 + 1984);
        unsigned int v11 = *(_DWORD *)(v9 + 1992);
        unsigned int v61 = v11 >> 8;
        if (v11 >> 8 > 0x40) {
          operator new[]();
        }
        unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v11) + 63);
        if (v11 <= 0xFF) {
          LOBYTE(v12) = 0;
        }
        uint64_t v13 = (unsigned __int8 **)(v12 & 0x3F);
      }
      else
      {
        int v10 = *(llvm::ConstantInt **)(v9 + 1960);
        unsigned int v14 = *(_DWORD *)(v9 + 1968);
        unsigned int v61 = v14 >> 8;
        if (v14 >> 8 > 0x40) {
          operator new[]();
        }
        unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v14) + 63);
        if (v14 <= 0xFF) {
          LOBYTE(v15) = 0;
        }
        uint64_t v13 = (unsigned __int8 **)(v15 & 0x1F);
      }
      unint64_t v60 = v13;
      unint64_t v16 = llvm::ConstantInt::get(v10, (llvm::LLVMContext *)&v60, v6);
      if (v61 >= 0x41 && v60) {
        MEMORY[0x1D25D9CB0](v60, 0x1000C8000313F17);
      }
      __int16 v62 = 257;
      uint64_t v17 = sub_1CC5357E8((uint64_t)v64, v7, (uint64_t)v16, (uint64_t)&v60, 0);
      __int16 v62 = 257;
      int v18 = sub_1CC5357E8((uint64_t)v64, v8, (uint64_t)v16, (uint64_t)&v60, 0);
      __int16 v62 = 257;
      uint64_t v19 = sub_1CC2428C0((uint64_t)v64, v7, (uint64_t)v17, (uint64_t)&v60);
      __int16 v62 = 257;
      int v20 = sub_1CC2428C0((uint64_t)v64, v8, (uint64_t)v18, (uint64_t)&v60);
      __int16 v62 = 257;
      int v21 = sub_1CB84494C((uint64_t)v64, (uint64_t)v19, (uint64_t)v17, (uint64_t)&v60, 0, 0);
      __int16 v62 = 257;
      unint64_t v22 = sub_1CB84494C((uint64_t)v64, (uint64_t)v20, (uint64_t)v18, (uint64_t)&v60, 0, 0);
      __int16 v62 = 257;
      uint64_t v23 = sub_1CC57DDE0((uint64_t)v64, (uint64_t)v21, (uint64_t)v22, (uint64_t)&v60);
      __int16 v62 = 257;
      size_t v24 = sub_1CC2428C0((uint64_t)v64, (uint64_t)v23, (uint64_t)v17, (uint64_t)&v60);
      __int16 v62 = 257;
      uint64_t v25 = sub_1CB84494C((uint64_t)v64, (uint64_t)v24, (uint64_t)v17, (uint64_t)&v60, 0, 0);
      if (!v23
        || *((unsigned __int8 *)v23 + 16) < 0x1Cu
        || ((uint64_t v66 = *((void *)v23 + 5),
             uint64_t v67 = (char *)v23 + 24,
             uint64_t v26 = (unsigned __int8 *)*((void *)v23 + 6),
             (int v63 = v26) != 0)
          ? (llvm::MetadataTracking::track((uint64_t)&v63, v26, 2), uint64_t v27 = (uint64_t)v63)
          : (uint64_t v27 = 0),
            sub_1CB8461A4((uint64_t)v64, 0, v27),
            !v63))
      {
LABEL_20:
        llvm::Value::doRAUW(this, v25, (llvm::Value *)1);
        int v28 = *((_DWORD *)this + 5);
        if ((v28 & 0x40000000) != 0)
        {
          unsigned int v30 = (char *)*((void *)this - 1);
          uint64_t v29 = v28 & 0x7FFFFFF;
          if (!v29) {
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v29 = v28 & 0x7FFFFFF;
          unsigned int v30 = (char *)this - 32 * v29;
          if (!v29) {
            goto LABEL_27;
          }
        }
        uint64_t v31 = 32 * v29;
        int v32 = (void **)(v30 + 16);
        do
        {
          if (*(v32 - 2))
          {
            **int v32 = *(v32 - 1);
            uint64_t v33 = (uint64_t)*(v32 - 1);
            if (v33) {
              *(void *)(v33 + 16) = *v32;
            }
          }
          *(v32 - 2) = 0;
          v32 += 4;
          v31 -= 32;
        }
        while (v31);
LABEL_27:
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
      int v55 = *v63;
      if ((v55 - 4) > 0x1E)
      {
        if ((v55 - 3) >= 0xFFFFFFFE) {
          unint64_t v59 = v63;
        }
        else {
          unint64_t v59 = 0;
        }
        if ((v55 - 3) < 0xFFFFFFFE)
        {
          if (v55 == 3) {
            *((void *)v63 + 1) = 0;
          }
          goto LABEL_20;
        }
        unint64_t v57 = (unint64_t)(v59 + 8);
      }
      else
      {
        if ((v63[1] & 0x7F) != 2 && !*((_DWORD *)v63 + 3)) {
          goto LABEL_20;
        }
        uint64_t v56 = *((void *)v63 + 2);
        if ((v56 & 4) == 0) {
          goto LABEL_20;
        }
        unint64_t v57 = v56 & 0xFFFFFFFFFFFFFFF8;
        if (!v57) {
          goto LABEL_20;
        }
      }
      unint64_t v60 = &v63;
      sub_1CC5FA668(v57 + 16, &v60);
      goto LABEL_20;
    }
    uint64_t v34 = *((void *)this - 8);
    uint64_t v35 = *((void *)this - 4);
    __int16 v62 = 257;
    unint64_t v36 = sub_1CC57DA50((uint64_t)v64, v34, v35, (uint64_t)&v60, 0);
    __int16 v62 = 257;
    unsigned int v37 = sub_1CC09A1EC((uint64_t)v64, v35, (uint64_t)v36, (uint64_t)&v60, 0, 0);
    __int16 v62 = 257;
    int v38 = sub_1CB84494C((uint64_t)v64, v34, (uint64_t)v37, (uint64_t)&v60, 0, 0);
    if (v36) {
      BOOL v39 = *((unsigned __int8 *)v36 + 16) >= 0x1Cu;
    }
    else {
      BOOL v39 = 0;
    }
    if (!v39
      || ((uint64_t v66 = *((void *)v36 + 5),
           uint64_t v67 = (char *)v36 + 24,
           uint64_t v40 = (unsigned __int8 *)*((void *)v36 + 6),
           (int v63 = v40) != 0)
        ? (llvm::MetadataTracking::track((uint64_t)&v63, v40, 2), uint64_t v41 = (uint64_t)v63)
        : (uint64_t v41 = 0),
          sub_1CB8461A4((uint64_t)v64, 0, v41),
          !v63))
    {
LABEL_36:
      llvm::Value::doRAUW(this, v38, (llvm::Value *)1);
      int v42 = *((_DWORD *)this + 5);
      if ((v42 & 0x40000000) != 0)
      {
        uint64_t v44 = (char *)*((void *)this - 1);
        uint64_t v43 = v42 & 0x7FFFFFF;
        if (!v43) {
          goto LABEL_43;
        }
      }
      else
      {
        uint64_t v43 = v42 & 0x7FFFFFF;
        uint64_t v44 = (char *)this - 32 * v43;
        if (!v43) {
          goto LABEL_43;
        }
      }
      uint64_t v45 = 32 * v43;
      int v46 = (void **)(v44 + 16);
      do
      {
        if (*(v46 - 2))
        {
          **int v46 = *(v46 - 1);
          uint64_t v47 = (uint64_t)*(v46 - 1);
          if (v47) {
            *(void *)(v47 + 16) = *v46;
          }
        }
        *(v46 - 2) = 0;
        v46 += 4;
        v45 -= 32;
      }
      while (v45);
LABEL_43:
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
    int v51 = *v63;
    if ((v51 - 4) > 0x1E)
    {
      if ((v51 - 3) >= 0xFFFFFFFE) {
        int v58 = v63;
      }
      else {
        int v58 = 0;
      }
      if ((v51 - 3) < 0xFFFFFFFE)
      {
        if (v51 == 3) {
          *((void *)v63 + 1) = 0;
        }
        goto LABEL_36;
      }
      unint64_t v53 = (unint64_t)(v58 + 8);
    }
    else
    {
      if ((v63[1] & 0x7F) != 2 && !*((_DWORD *)v63 + 3)) {
        goto LABEL_36;
      }
      uint64_t v52 = *((void *)v63 + 2);
      if ((v52 & 4) == 0) {
        goto LABEL_36;
      }
      unint64_t v53 = v52 & 0xFFFFFFFFFFFFFFF8;
      if (!v53) {
        goto LABEL_36;
      }
    }
    unint64_t v60 = &v63;
    sub_1CC5FA668(v53 + 16, &v60);
    goto LABEL_36;
  }
  int v48 = *v63;
  if ((v48 - 4) > 0x1E)
  {
    if ((v48 - 3) >= 0xFFFFFFFE) {
      __int16 v54 = v63;
    }
    else {
      __int16 v54 = 0;
    }
    if ((v48 - 3) < 0xFFFFFFFE)
    {
      if (v48 == 3) {
        *((void *)v63 + 1) = 0;
      }
      goto LABEL_4;
    }
    unint64_t v50 = (unint64_t)(v54 + 8);
  }
  else
  {
    if ((v63[1] & 0x7F) != 2 && !*((_DWORD *)v63 + 3)) {
      goto LABEL_4;
    }
    uint64_t v49 = *((void *)v63 + 2);
    if ((v49 & 4) == 0) {
      goto LABEL_4;
    }
    unint64_t v50 = v49 & 0xFFFFFFFFFFFFFFF8;
    if (!v50) {
      goto LABEL_4;
    }
  }
  unint64_t v60 = &v63;
  sub_1CC5FA668(v50 + 16, &v60);
  goto LABEL_4;
}

void llvm::expandDivision(llvm *this, llvm::BinaryOperator *a2)
{
  uint64_t v3 = 0;
  v119[2] = *MEMORY[0x1E4F143B8];
  __n128 v4 = **(uint64_t ***)this;
  v104[0] = &v105;
  v104[1] = (void *)0x200000000;
  size_t v108 = v4;
  uint64_t v109 = &v117;
  unsigned int v110 = &v118;
  uint64_t v111 = 0;
  int v112 = 0;
  __int16 v113 = 512;
  char v114 = 7;
  uint64_t v115 = 0;
  uint64_t v116 = 0;
  __int16 v117 = &unk_1F2616E88;
  uint64_t v118 = &unk_1F2617008;
  uint64_t v5 = (unsigned __int8 *)*((void *)this + 6);
  uint64_t v106 = (llvm::Value *)*((void *)this + 5);
  uint64_t v107 = (uint64_t)this + 24;
  v119[0] = v5;
  if (v5)
  {
    llvm::MetadataTracking::track((uint64_t)v119, v5, 2);
    uint64_t v3 = v119[0];
  }
  sub_1CB8461A4((uint64_t)v104, 0, v3);
  if (!v119[0])
  {
LABEL_4:
    if (*((unsigned char *)this + 16) != 48)
    {
      BOOL v99 = (llvm::ConstantInt *)**((void **)this - 8);
      uint64_t v35 = *v108;
      if ((*((_DWORD *)v99 + 2) & 0xFFFFFF00) == 0x4000)
      {
        unint64_t v36 = *(llvm::ConstantInt **)(v35 + 1984);
        unsigned int v37 = *(_DWORD *)(v35 + 1992);
        LODWORD(v101) = v37 >> 8;
        if (v37 >> 8 >= 0x41) {
          operator new[]();
        }
        uint64_t v100 = 0;
        llvm::ConstantInt::get(v36, (llvm::LLVMContext *)&v100, v6);
        if (v101 >= 0x41 && v100) {
          MEMORY[0x1D25D9CB0](v100, 0x1000C8000313F17);
        }
        BOOL v39 = *(llvm::ConstantInt **)(*v108 + 1984);
        unsigned int v40 = *(_DWORD *)(*v108 + 1992);
        LODWORD(v101) = v40 >> 8;
        if (v40 >> 8 > 0x40) {
          operator new[]();
        }
        if (v40 <= 0xFF) {
          LOBYTE(v41) = 0;
        }
        else {
          unint64_t v41 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v40) + 63);
        }
        uint64_t v100 = (const char *)(v41 & 1);
        llvm::ConstantInt::get(v39, (llvm::LLVMContext *)&v100, v38);
        if (v101 >= 0x41 && v100) {
          MEMORY[0x1D25D9CB0](v100, 0x1000C8000313F17);
        }
        llvm::ConstantInt::getSigned(v99, 0xFFFFFFFFFFFFFFFFLL, v42);
        uint64_t v44 = *(llvm::ConstantInt **)(*v108 + 1984);
        unsigned int v45 = *(_DWORD *)(*v108 + 1992);
        LODWORD(v101) = v45 >> 8;
        if (v45 >> 8 > 0x40) {
          operator new[]();
        }
        if (v45 <= 0xFF) {
          LOBYTE(v46) = 0;
        }
        else {
          unint64_t v46 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v45) + 63);
        }
        uint64_t v47 = (const char *)(v46 & 0x3F);
      }
      else
      {
        int v48 = *(llvm::ConstantInt **)(v35 + 1960);
        unsigned int v49 = *(_DWORD *)(v35 + 1968);
        LODWORD(v101) = v49 >> 8;
        if (v49 >> 8 >= 0x41) {
          operator new[]();
        }
        uint64_t v100 = 0;
        llvm::ConstantInt::get(v48, (llvm::LLVMContext *)&v100, v6);
        if (v101 >= 0x41 && v100) {
          MEMORY[0x1D25D9CB0](v100, 0x1000C8000313F17);
        }
        int v51 = *(llvm::ConstantInt **)(*v108 + 1960);
        unsigned int v52 = *(_DWORD *)(*v108 + 1968);
        LODWORD(v101) = v52 >> 8;
        if (v52 >> 8 > 0x40) {
          operator new[]();
        }
        if (v52 <= 0xFF) {
          LOBYTE(v53) = 0;
        }
        else {
          unint64_t v53 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v52) + 63);
        }
        uint64_t v100 = (const char *)(v53 & 1);
        llvm::ConstantInt::get(v51, (llvm::LLVMContext *)&v100, v50);
        if (v101 >= 0x41 && v100) {
          MEMORY[0x1D25D9CB0](v100, 0x1000C8000313F17);
        }
        llvm::ConstantInt::getSigned(v99, 0xFFFFFFFFFFFFFFFFLL, v54);
        uint64_t v44 = *(llvm::ConstantInt **)(*v108 + 1960);
        unsigned int v55 = *(_DWORD *)(*v108 + 1968);
        LODWORD(v101) = v55 >> 8;
        if (v55 >> 8 > 0x40) {
          operator new[]();
        }
        if (v55 <= 0xFF) {
          LOBYTE(v56) = 0;
        }
        else {
          unint64_t v56 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v55) + 63);
        }
        uint64_t v47 = (const char *)(v56 & 0x1F);
      }
      uint64_t v100 = v47;
      llvm::ConstantInt::get(v44, (llvm::LLVMContext *)&v100, v43);
      if (v101 >= 0x41 && v100) {
        MEMORY[0x1D25D9CB0](v100, 0x1000C8000313F17);
      }
      uint64_t v58 = *v108;
      if (!*(void *)(*v108 + 1560))
      {
        int v80 = *(llvm::ConstantInt **)(v58 + 1888);
        unsigned int v81 = *(_DWORD *)(v58 + 1896);
        LODWORD(v101) = v81 >> 8;
        if (v81 >> 8 > 0x40) {
          operator new[]();
        }
        if (v81 <= 0xFF) {
          LOBYTE(v82) = 0;
        }
        else {
          unint64_t v82 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v81) + 63);
        }
        uint64_t v100 = (const char *)(v82 & 1);
        uint64_t v83 = llvm::ConstantInt::get(v80, (llvm::LLVMContext *)&v100, v57);
        if (v101 >= 0x41 && v100) {
          MEMORY[0x1D25D9CB0](v100, 0x1000C8000313F17);
        }
        *(void *)(v58 + 1560) = v83;
      }
      unint64_t v59 = *(uint64_t ***)(*((void *)v106 + 7) + 40);
      uint64_t v100 = (const char *)v99;
      llvm::Intrinsic::getDeclaration(v59, 52, (uint64_t)&v100, 1);
      unint64_t v60 = v106;
      if ((*((unsigned char *)v106 + 23) & 0x10) != 0)
      {
        uint64_t v61 = ***(void ***)v106;
        uint64_t v62 = *(void *)(v61 + 152);
        uint64_t v63 = *(unsigned int *)(v61 + 168);
        if (v63)
        {
          LODWORD(v64) = (v63 - 1) & ((v106 >> 4) ^ (v106 >> 9));
          uint64_t v65 = v62 + 16 * v64;
          uint64_t v66 = *(llvm::Value **)v65;
          if (*(llvm::Value **)v65 != v106)
          {
            int v67 = 1;
            do
            {
              if (v66 == (llvm::Value *)-4096) {
                goto LABEL_64;
              }
              int v68 = v64 + v67++;
              uint64_t v64 = v68 & (v63 - 1);
              uint64_t v66 = *(llvm::Value **)(v62 + 16 * v64);
            }
            while (v66 != v106);
            uint64_t v65 = v62 + 16 * v64;
          }
        }
        else
        {
LABEL_64:
          uint64_t v65 = v62 + 16 * v63;
        }
        int v69 = *(void **)(v65 + 8);
        uint64_t v72 = *v69;
        uint64_t v70 = (const char *)(v69 + 2);
        uint64_t v71 = v72;
      }
      else
      {
        uint64_t v71 = 0;
        uint64_t v70 = &byte_1CFBCE98E;
      }
      __int16 v103 = 773;
      uint64_t v100 = v70;
      uint64_t v101 = v71;
      uint64_t v102 = "_udiv-special-cases";
      llvm::Value::setNameImpl(v106, &v100);
      if (v60 && !*((unsigned char *)v60 + 16))
      {
        if ((*((unsigned char *)v60 + 23) & 0x10) == 0) {
          goto LABEL_121;
        }
        uint64_t v84 = ***(void ***)v60;
        uint64_t v85 = *(void *)(v84 + 152);
        uint64_t v86 = *(unsigned int *)(v84 + 168);
        if (v86)
        {
          LODWORD(v87) = (v86 - 1) & ((v60 >> 4) ^ (v60 >> 9));
          BOOL v88 = (llvm::Value **)(v85 + 16 * v87);
          uint64_t v89 = *v88;
          if (*v88 != v60)
          {
            int v90 = 1;
            do
            {
              if (v89 == (llvm::Value *)-4096) {
                goto LABEL_113;
              }
              int v91 = v87 + v90++;
              uint64_t v87 = v91 & (v86 - 1);
              uint64_t v89 = *(llvm::Value **)(v85 + 16 * v87);
            }
            while (v89 != v60);
            BOOL v88 = (llvm::Value **)(v85 + 16 * v87);
          }
        }
        else
        {
LABEL_113:
          BOOL v88 = (llvm::Value **)(v85 + 16 * v86);
        }
        uint64_t v93 = v88[1];
        unint64_t v96 = *(void *)v93;
        int v94 = (char *)v93 + 16;
        unint64_t v95 = v96;
        if (v96 >= 5 && (*(_DWORD *)v94 == *(_DWORD *)"llvm." ? (BOOL v97 = v94[4] == aLlvm_1[4]) : (BOOL v97 = 0), v97))
        {
          *((_DWORD *)v60 + 8) |= 0x2000u;
          int v98 = llvm::Function::lookupIntrinsicID(v94, v95);
        }
        else
        {
LABEL_121:
          int v98 = 0;
          *((_DWORD *)v60 + 8) &= ~0x2000u;
        }
        *((_DWORD *)v60 + 9) = v98;
      }
      uint64_t v100 = "udiv-end";
      __int16 v103 = 259;
      llvm::BasicBlock::splitBasicBlock((uint64_t)v60, v107, (uint64_t)&v100, 0);
    }
    uint64_t v7 = *((void *)this - 8);
    uint64_t v8 = *((void *)this - 4);
    uint64_t v9 = *v108;
    if ((*(_DWORD *)(*(void *)v7 + 8) & 0xFFFFFF00) == 0x4000)
    {
      int v10 = *(llvm::ConstantInt **)(v9 + 1984);
      unint64_t v11 = *(unsigned int *)(v9 + 1992);
      LODWORD(v101) = v11 >> 8;
      if (v11 >> 8 > 0x40) {
        operator new[]();
      }
      if (v11 <= 0xFF) {
        LOBYTE(v12) = 0;
      }
      else {
        unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v11) + 63);
      }
      uint64_t v13 = (const char *)(v12 & 0x3F);
    }
    else
    {
      int v10 = *(llvm::ConstantInt **)(v9 + 1960);
      unint64_t v14 = *(unsigned int *)(v9 + 1968);
      LODWORD(v101) = v14 >> 8;
      if (v14 >> 8 > 0x40) {
        operator new[]();
      }
      if (v14 <= 0xFF) {
        LOBYTE(v15) = 0;
      }
      else {
        unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v14) + 63);
      }
      uint64_t v13 = (const char *)(v15 & 0x1F);
    }
    uint64_t v100 = v13;
    unint64_t v16 = llvm::ConstantInt::get(v10, (llvm::LLVMContext *)&v100, v6);
    if (v101 >= 0x41 && v100) {
      MEMORY[0x1D25D9CB0](v100, 0x1000C8000313F17);
    }
    __int16 v103 = 257;
    uint64_t v17 = sub_1CC5357E8((uint64_t)v104, v7, (uint64_t)v16, (uint64_t)&v100, 0);
    __int16 v103 = 257;
    int v18 = sub_1CC5357E8((uint64_t)v104, v8, (uint64_t)v16, (uint64_t)&v100, 0);
    __int16 v103 = 257;
    uint64_t v19 = sub_1CC2428C0((uint64_t)v104, (uint64_t)v17, v7, (uint64_t)&v100);
    __int16 v103 = 257;
    int v20 = sub_1CB84494C((uint64_t)v104, (uint64_t)v19, (uint64_t)v17, (uint64_t)&v100, 0, 0);
    __int16 v103 = 257;
    int v21 = sub_1CC2428C0((uint64_t)v104, (uint64_t)v18, v8, (uint64_t)&v100);
    __int16 v103 = 257;
    unint64_t v22 = sub_1CB84494C((uint64_t)v104, (uint64_t)v21, (uint64_t)v18, (uint64_t)&v100, 0, 0);
    __int16 v103 = 257;
    uint64_t v23 = sub_1CC2428C0((uint64_t)v104, (uint64_t)v18, (uint64_t)v17, (uint64_t)&v100);
    __int16 v103 = 257;
    size_t v24 = sub_1CC57DA50((uint64_t)v104, (uint64_t)v20, (uint64_t)v22, (uint64_t)&v100, 0);
    __int16 v103 = 257;
    uint64_t v25 = sub_1CC2428C0((uint64_t)v104, (uint64_t)v24, (uint64_t)v23, (uint64_t)&v100);
    __int16 v103 = 257;
    uint64_t v26 = sub_1CB84494C((uint64_t)v104, (uint64_t)v25, (uint64_t)v23, (uint64_t)&v100, 0, 0);
    if (!v24
      || *((unsigned __int8 *)v24 + 16) < 0x1Cu
      || ((uint64_t v106 = (llvm::Value *)*((void *)v24 + 5),
           uint64_t v107 = (uint64_t)v24 + 24,
           uint64_t v27 = (unsigned __int8 *)*((void *)v24 + 6),
           (v119[0] = v27) != 0)
        ? (llvm::MetadataTracking::track((uint64_t)v119, v27, 2), uint64_t v28 = v119[0])
        : (uint64_t v28 = 0),
          sub_1CB8461A4((uint64_t)v104, 0, v28),
          !v119[0]))
    {
LABEL_22:
      llvm::Value::doRAUW(this, v26, (llvm::Value *)1);
      int v29 = *((_DWORD *)this + 5);
      if ((v29 & 0x40000000) != 0)
      {
        uint64_t v31 = (char *)*((void *)this - 1);
        uint64_t v30 = v29 & 0x7FFFFFF;
        if (!v30) {
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v30 = v29 & 0x7FFFFFF;
        uint64_t v31 = (char *)this - 32 * v30;
        if (!v30) {
          goto LABEL_29;
        }
      }
      uint64_t v32 = 32 * v30;
      uint64_t v33 = (void **)(v31 + 16);
      do
      {
        if (*(v33 - 2))
        {
          **uint64_t v33 = *(v33 - 1);
          uint64_t v34 = (uint64_t)*(v33 - 1);
          if (v34) {
            *(void *)(v34 + 16) = *v33;
          }
        }
        *(v33 - 2) = 0;
        v33 += 4;
        v32 -= 32;
      }
      while (v32);
LABEL_29:
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
    int v77 = *(unsigned __int8 *)v119[0];
    if ((v77 - 4) > 0x1E)
    {
      if ((v77 - 3) >= 0xFFFFFFFE) {
        uint64_t v92 = v119[0];
      }
      else {
        uint64_t v92 = 0;
      }
      if ((v77 - 3) < 0xFFFFFFFE)
      {
        if (v77 == 3) {
          *(void *)(v119[0] + 8) = 0;
        }
        goto LABEL_22;
      }
      unint64_t v79 = v92 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v119[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v119[0] + 12)) {
        goto LABEL_22;
      }
      uint64_t v78 = *(void *)(v119[0] + 16);
      if ((v78 & 4) == 0) {
        goto LABEL_22;
      }
      unint64_t v79 = v78 & 0xFFFFFFFFFFFFFFF8;
      if (!v79) {
        goto LABEL_22;
      }
    }
    uint64_t v100 = (const char *)v119;
    sub_1CC5FA668(v79 + 16, &v100);
    goto LABEL_22;
  }
  int v73 = *(unsigned __int8 *)v119[0];
  if ((v73 - 4) > 0x1E)
  {
    if ((v73 - 3) >= 0xFFFFFFFE) {
      uint64_t v76 = v119[0];
    }
    else {
      uint64_t v76 = 0;
    }
    if ((v73 - 3) < 0xFFFFFFFE)
    {
      if (v73 == 3) {
        *(void *)(v119[0] + 8) = 0;
      }
      goto LABEL_4;
    }
    unint64_t v75 = v76 + 8;
  }
  else
  {
    if ((*(unsigned char *)(v119[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v119[0] + 12)) {
      goto LABEL_4;
    }
    uint64_t v74 = *(void *)(v119[0] + 16);
    if ((v74 & 4) == 0) {
      goto LABEL_4;
    }
    unint64_t v75 = v74 & 0xFFFFFFFFFFFFFFF8;
    if (!v75) {
      goto LABEL_4;
    }
  }
  uint64_t v100 = (const char *)v119;
  sub_1CC5FA668(v75 + 16, &v100);
  goto LABEL_4;
}

uint64_t llvm::formLCSSAForInstructions(uint64_t a1, uint64_t a2, uint64_t *a3, llvm::ScalarEvolution *a4, uint64_t a5, unsigned int *a6)
{
  uint64_t v6 = a5;
  v374[16] = *MEMORY[0x1E4F143B8];
  unint64_t v372 = v374;
  uint64_t v373 = 0x1000000000;
  v367[0] = 1;
  uint64_t v11 = 1;
  int64x2_t v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v367[v11] = v12;
    v11 += 2;
  }
  while (v11 != 17);
  __src = v371;
  uint64_t v370 = 0x1000000000;
  v354[1] = 0;
  v354[0] = 0;
  int v355 = 0;
  uint64_t v357 = 0;
  uint64_t v356 = 0;
  int v358 = 0;
  uint64_t v360 = 0;
  uint64_t v359 = 0;
  unsigned int v361 = v363;
  uint64_t v362 = 0x400000000;
  int v364 = v366;
  uint64_t v365 = 0;
  v366[0] = 0;
  v366[1] = 1;
  uint64_t v333 = a5;
  long long v334 = *(_OWORD *)(a5 + 48);
  uint64_t v13 = *(unsigned int *)(a5 + 8);
  if (v13)
  {
    unsigned int v300 = (unsigned __int8 **)(*(void *)a5 + 8);
    uint64_t v301 = 16 * v13;
    while (*((_DWORD *)v300 - 2))
    {
      v300 += 2;
      v301 -= 16;
      if (!v301) {
        goto LABEL_4;
      }
    }
    uint64_t v302 = *v300;
    uint64_t v335 = v302;
    if (v302) {
      llvm::MetadataTracking::track((uint64_t)&v335, v302, 2);
    }
  }
  else
  {
LABEL_4:
    uint64_t v335 = 0;
  }
  uint64_t v351 = 1;
  unint64_t v14 = &v352;
  for (uint64_t i = 8; i != 136; i += 32)
    *(uint64_t *)((char *)&v351 + i) = -4096;
  unsigned int v16 = *(_DWORD *)(a1 + 8);
  char v17 = 0;
  if (v16)
  {
    unint64_t v317 = a3;
    uint64_t v318 = v6;
    unint64_t v314 = a4;
    uint64_t v315 = a1;
    uint64_t v316 = a2;
    do
    {
      LODWORD(v373) = 0;
      int v18 = *(llvm::Value **)(*(void *)a1 + 8 * v16 - 8);
      *(_DWORD *)(a1 + 8) = v16 - 1;
      int v325 = v18;
      uint64_t v19 = (unsigned __int8 *)*((void *)v18 + 5);
      int v20 = *((_DWORD *)a3 + 4);
      if (v20)
      {
        uint64_t v21 = *a3;
        unsigned int v22 = v20 - 1;
        uint64_t v23 = (v20 - 1) & ((v19 >> 4) ^ (v19 >> 9));
        size_t v24 = *(unsigned __int8 **)(*a3 + 16 * v23);
        if (v19 == v24)
        {
LABEL_14:
          uint64_t v27 = *(void *)(v21 + 16 * v23 + 8);
          goto LABEL_16;
        }
        int v25 = 1;
        while (v24 != (unsigned __int8 *)-4096)
        {
          int v26 = v23 + v25++;
          uint64_t v23 = v26 & v22;
          size_t v24 = *(unsigned __int8 **)(v21 + 16 * v23);
          if (v19 == v24) {
            goto LABEL_14;
          }
        }
      }
      uint64_t v27 = 0;
LABEL_16:
      uint64_t v332 = v27;
      uint64_t v322 = v19;
      if (v351)
      {
        int v28 = 4;
        int v29 = &v352;
      }
      else
      {
        int v28 = v353;
        if (!v353) {
          goto LABEL_454;
        }
        int v29 = v352;
      }
      unsigned int v30 = (v27 >> 4) ^ (v27 >> 9);
      int v31 = v28 - 1;
      unsigned int v32 = v31 & v30;
      uint64_t v33 = v29[4 * (v31 & v30)];
      if (v27 != v33)
      {
        int v80 = 1;
        while (v33 != -4096)
        {
          unsigned int v81 = v32 + v80++;
          unsigned int v32 = v81 & v31;
          uint64_t v33 = v29[4 * v32];
          if (v27 == v33) {
            goto LABEL_19;
          }
        }
        if (v351)
        {
          int v271 = 4;
          uint64_t v272 = &v352;
          goto LABEL_428;
        }
        int v271 = v353;
        if (v353)
        {
          uint64_t v272 = v352;
LABEL_428:
          int v273 = v271 - 1;
          uint64_t v274 = v273 & v30;
          uint64_t v275 = &v272[4 * v274];
          uint64_t v276 = *v275;
          if (v27 == *v275) {
LABEL_429:
          }
            llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlocks();
          char v279 = 0;
          int v280 = 1;
          while (v276 != -4096)
          {
            if (v279) {
              BOOL v281 = 0;
            }
            else {
              BOOL v281 = v276 == -8192;
            }
            if (v281) {
              char v279 = v275;
            }
            int v282 = v274 + v280++;
            uint64_t v274 = v282 & v273;
            uint64_t v275 = &v272[4 * v274];
            uint64_t v276 = *v275;
            if (v27 == *v275) {
              goto LABEL_429;
            }
          }
          if (v279) {
            unint64_t v283 = v279;
          }
          else {
            unint64_t v283 = v275;
          }
        }
        else
        {
LABEL_454:
          unint64_t v283 = 0;
        }
        int v284 = sub_1CD1822A0((uint64_t)&v351, &v332, v283);
        *int v284 = v27;
        v284[1] = v284 + 3;
        v284[2] = 0x100000000;
        goto LABEL_429;
      }
LABEL_19:
      if (v351)
      {
        int v34 = 4;
        uint64_t v35 = v332;
        unint64_t v36 = &v352;
      }
      else
      {
        int v34 = v353;
        uint64_t v35 = v332;
        if (!v353)
        {
          int v277 = 0;
          goto LABEL_433;
        }
        unint64_t v36 = v352;
      }
      int v37 = v34 - 1;
      uint64_t v38 = ((v35 >> 4) ^ (v35 >> 9)) & v37;
      uint64_t v324 = &v36[4 * v38];
      uint64_t v39 = *v324;
      if (v35 == *v324) {
        goto LABEL_22;
      }
      unint64_t v82 = 0;
      int v83 = 1;
      while (v39 != -4096)
      {
        if (v82) {
          BOOL v84 = 0;
        }
        else {
          BOOL v84 = v39 == -8192;
        }
        if (v84) {
          unint64_t v82 = v324;
        }
        int v85 = v38 + v83++;
        uint64_t v38 = v85 & v37;
        uint64_t v324 = &v36[4 * v38];
        uint64_t v39 = *v324;
        if (v35 == *v324) {
          goto LABEL_22;
        }
      }
      if (v82) {
        int v277 = v82;
      }
      else {
        int v277 = v324;
      }
LABEL_433:
      uint64_t v278 = sub_1CD1822A0((uint64_t)&v351, &v332, v277);
      *uint64_t v278 = v35;
      v278[1] = v278 + 3;
      uint64_t v324 = v278;
      v278[2] = 0x100000000;
      unint64_t v14 = &v352;
      uint64_t v19 = v322;
LABEL_22:
      if (!*((_DWORD *)v324 + 4))
      {
        a1 = v315;
        goto LABEL_424;
      }
      for (uint64_t j = *((void *)v325 + 1); j; uint64_t j = *(void *)(j + 8))
      {
        uint64_t v41 = *(void *)(j + 24);
        int v42 = (uint64_t *)(v41 + 40);
        if (v41 && *(unsigned char *)(v41 + 16) == 83)
        {
          int v43 = *(_DWORD *)(v41 + 20);
          if ((v43 & 0x40000000) != 0) {
            uint64_t v44 = *(void *)(v41 - 8);
          }
          else {
            uint64_t v44 = v41 - 32 * (v43 & 0x7FFFFFF);
          }
          int v42 = (uint64_t *)(v44
                          + 32 * *(unsigned int *)(v41 + 60)
                          + 8 * ((unint64_t)(j - v44) >> 5));
        }
        unsigned int v45 = (unsigned __int8 *)*v42;
        if (v19 != (unsigned __int8 *)*v42)
        {
          uint64_t v47 = *(void *)(v35 + 56);
          uint64_t v46 = *(void *)(v35 + 64);
          if (v46 == v47)
          {
            uint64_t v48 = *(unsigned int *)(v35 + 76);
            unsigned int v49 = (unsigned __int8 **)(v46 + 8 * v48);
            if (v48)
            {
              uint64_t v50 = 0;
              uint64_t v51 = 8 * v48;
              while (*(unsigned __int8 **)(v46 + v50) != v45)
              {
                v50 += 8;
                if (v51 == v50) {
                  goto LABEL_49;
                }
              }
              unsigned int v49 = (unsigned __int8 **)(v46 + v50);
            }
LABEL_49:
            uint64_t v47 = *(void *)(v35 + 64);
          }
          else
          {
            uint64_t v52 = *(unsigned int *)(v35 + 72);
            int v53 = v52 - 1;
            unsigned int v54 = (v52 - 1) & ((v45 >> 4) ^ (v45 >> 9));
            unsigned int v49 = (unsigned __int8 **)(v46 + 8 * v54);
            unsigned int v55 = *v49;
            if (*v49 == (unsigned __int8 *)-1)
            {
              unint64_t v56 = 0;
LABEL_59:
              if (v56) {
                unsigned int v49 = v56;
              }
              if (*v49 != v45) {
                unsigned int v49 = (unsigned __int8 **)(v46 + 8 * v52);
              }
            }
            else
            {
              unint64_t v56 = 0;
              int v57 = 1;
              while (v55 != v45)
              {
                if (v56) {
                  BOOL v58 = 0;
                }
                else {
                  BOOL v58 = v55 == (unsigned __int8 *)-2;
                }
                if (v58) {
                  unint64_t v56 = v49;
                }
                unsigned int v59 = v54 + v57++;
                unsigned int v54 = v59 & v53;
                unsigned int v49 = (unsigned __int8 **)(v46 + 8 * (v59 & v53));
                unsigned int v55 = *v49;
                if (*v49 == (unsigned __int8 *)-1) {
                  goto LABEL_59;
                }
              }
            }
          }
          if (v46 == v47) {
            unint64_t v60 = (unsigned int *)(v35 + 76);
          }
          else {
            unint64_t v60 = (unsigned int *)(v35 + 72);
          }
          if (v49 == (unsigned __int8 **)(v46 + 8 * *v60))
          {
            if (v373 >= (unint64_t)HIDWORD(v373)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v372 + v373) = j;
            LODWORD(v373) = v373 + 1;
          }
        }
      }
      a1 = v315;
      if (!v373) {
        goto LABEL_424;
      }
      if (v325)
      {
        uint64_t v61 = v19;
        if (*((unsigned char *)v325 + 16) == 33) {
          uint64_t v61 = (unsigned __int8 *)*((void *)v325 - 12);
        }
      }
      else
      {
        uint64_t v61 = v19;
      }
      uint64_t v62 = *(unsigned int *)(a2 + 40);
      if (v62)
      {
        uint64_t v63 = *(void *)(a2 + 24);
        LODWORD(v64) = ((v61 >> 4) ^ (v61 >> 9)) & (v62 - 1);
        uint64_t v65 = (unsigned __int8 **)(v63 + 16 * v64);
        uint64_t v66 = *v65;
        if (v61 == *v65)
        {
LABEL_76:
          if (v65 != (unsigned __int8 **)(v63 + 16 * v62))
          {
            int v69 = v65[1];
            goto LABEL_79;
          }
        }
        else
        {
          int v67 = 1;
          while (v66 != (unsigned __int8 *)-4096)
          {
            int v68 = v64 + v67++;
            uint64_t v64 = v68 & (v62 - 1);
            uint64_t v66 = *(unsigned __int8 **)(v63 + 16 * v64);
            if (v61 == v66)
            {
              uint64_t v65 = (unsigned __int8 **)(v63 + 16 * v64);
              goto LABEL_76;
            }
          }
        }
      }
      int v69 = 0;
LABEL_79:
      BOOL v348 = v350;
      uint64_t v349 = 0x1000000000;
      unint64_t v345 = v347;
      uint64_t v346 = 0x800000000;
      uint64_t v342 = v344;
      uint64_t v343 = 0x400000000;
      memset(v329, 0, sizeof(v329));
      uint64_t v330 = 0;
      uint64_t v331 = &v342;
      uint64_t v70 = *(uint64_t ***)v325;
      unsigned int v71 = v325 >> 4;
      if ((*((unsigned char *)v325 + 23) & 0x10) == 0)
      {
        size_t v88 = 0;
        uint64_t v87 = &byte_1CFBCE98E;
        goto LABEL_101;
      }
      uint64_t v72 = **v70;
      uint64_t v73 = *(void *)(v72 + 152);
      uint64_t v74 = *(unsigned int *)(v72 + 168);
      if (!v74) {
        goto LABEL_99;
      }
      LODWORD(v75) = (v74 - 1) & (v71 ^ (v325 >> 9));
      uint64_t v76 = (llvm::Value **)(v73 + 16 * v75);
      int v77 = *v76;
      if (*v76 != v325)
      {
        int v78 = 1;
        while (v77 != (llvm::Value *)-4096)
        {
          int v79 = v75 + v78++;
          uint64_t v75 = v79 & (v74 - 1);
          int v77 = *(llvm::Value **)(v73 + 16 * v75);
          if (v77 == v325)
          {
            uint64_t v76 = (llvm::Value **)(v73 + 16 * v75);
            goto LABEL_100;
          }
        }
LABEL_99:
        uint64_t v76 = (llvm::Value **)(v73 + 16 * v74);
      }
LABEL_100:
      uint64_t v86 = v76[1];
      size_t v89 = *(void *)v86;
      uint64_t v87 = (char *)v86 + 16;
      size_t v88 = v89;
LABEL_101:
      llvm::SSAUpdater::Initialize((uint64_t)v329, (uint64_t)v70, v87, v88);
      if (v314) {
        llvm::ScalarEvolution::forgetValue(v314, v325);
      }
      uint64_t v90 = *((unsigned int *)v324 + 4);
      if (v90)
      {
        int v91 = (llvm::BasicBlock **)v324[1];
        uint64_t v92 = &v91[v90];
        unsigned int v319 = v71 ^ (v325 >> 9);
        long long v320 = v92;
        unint64_t v321 = v69;
        do
        {
          uint64_t v93 = *v91;
          uint64_t v94 = *(unsigned int *)(a2 + 40);
          unsigned int v326 = *v91 >> 4;
          int v327 = *v91;
          if (v94)
          {
            uint64_t v95 = *(void *)(a2 + 24);
            LODWORD(v96) = ((*v91 >> 4) ^ (v93 >> 9)) & (v94 - 1);
            BOOL v97 = (llvm::BasicBlock **)(v95 + 16 * v96);
            int v98 = *v97;
            if (v93 == *v97)
            {
LABEL_111:
              if (v97 != (llvm::BasicBlock **)(v95 + 16 * v94))
              {
                uint64_t v101 = v97[1];
                if (v101 != (llvm::BasicBlock *)v69 && v101 != 0)
                {
                  if (!v69) {
                    goto LABEL_129;
                  }
                  if (*((unsigned __int8 **)v101 + 1) != v69)
                  {
                    if (*((llvm::BasicBlock **)v69 + 1) == v101) {
                      goto LABEL_129;
                    }
                    unsigned int v103 = *((_DWORD *)v69 + 4);
                    if (v103 >= *((_DWORD *)v101 + 4)) {
                      goto LABEL_129;
                    }
                    if (*(unsigned char *)(a2 + 64))
                    {
                      if (*((_DWORD *)v101 + 18) < *((_DWORD *)v69 + 18)
                        || *((_DWORD *)v101 + 19) > *((_DWORD *)v69 + 19))
                      {
                        goto LABEL_129;
                      }
                    }
                    else
                    {
                      unsigned int v104 = *(_DWORD *)(a2 + 68) + 1;
                      *(_DWORD *)(a2 + 68) = v104;
                      if (v104 > 0x20) {
                        llvm::DominatorTreeBase<llvm::BasicBlock,false>::updateDFSNumbers();
                      }
                      do
                      {
                        uint64_t v105 = v101;
                        uint64_t v101 = (llvm::BasicBlock *)*((void *)v101 + 1);
                      }
                      while (v101 && *((_DWORD *)v101 + 4) >= v103);
                      if (v105 != (llvm::BasicBlock *)v69) {
                        goto LABEL_129;
                      }
                    }
                  }
                }
              }
            }
            else
            {
              int v99 = 1;
              while (v98 != (llvm::BasicBlock *)-4096)
              {
                int v100 = v96 + v99++;
                uint64_t v96 = v100 & (v94 - 1);
                int v98 = *(llvm::BasicBlock **)(v95 + 16 * v96);
                if (v93 == v98)
                {
                  BOOL v97 = (llvm::BasicBlock **)(v95 + 16 * v96);
                  goto LABEL_111;
                }
              }
            }
          }
          if (!llvm::SSAUpdater::HasValueForBlock((uint64_t **)v329, v327))
          {
            uint64_t v106 = 0;
            uint64_t v107 = *((void *)v327 + 6);
            if (v107) {
              uint64_t v108 = v107 - 24;
            }
            else {
              uint64_t v108 = 0;
            }
            *(void *)(v6 + 48) = *(void *)(v108 + 40);
            *(void *)(v6 + 56) = v108 + 24;
            uint64_t v109 = *(unsigned __int8 **)(v108 + 48);
            uint64_t v337 = v109;
            if (v109)
            {
              llvm::MetadataTracking::track((uint64_t)&v337, v109, 2);
              uint64_t v106 = (uint64_t)v337;
            }
            sub_1CB8461A4(v6, 0, v106);
            unsigned int v110 = v325;
            uint64_t v111 = (uint64_t)v327;
            if (v337)
            {
              int v198 = *v337;
              if ((v198 - 4) > 0x1E)
              {
                if ((v198 - 3) >= 0xFFFFFFFE) {
                  uint64_t v202 = v337;
                }
                else {
                  uint64_t v202 = 0;
                }
                if ((v198 - 3) < 0xFFFFFFFE)
                {
                  if (v198 == 3) {
                    *((void *)v337 + 1) = 0;
                  }
                  goto LABEL_137;
                }
                unint64_t v200 = (unint64_t)(v202 + 8);
              }
              else
              {
                if ((v337[1] & 0x7F) != 2 && !*((_DWORD *)v337 + 3)) {
                  goto LABEL_137;
                }
                uint64_t v199 = *((void *)v337 + 2);
                if ((v199 & 4) == 0) {
                  goto LABEL_137;
                }
                unint64_t v200 = v199 & 0xFFFFFFFFFFFFFFF8;
                if (!v200) {
                  goto LABEL_137;
                }
              }
              uint64_t v338 = &v337;
              sub_1CC5FA668(v200 + 16, &v338);
              uint64_t v111 = (uint64_t)v327;
            }
LABEL_137:
            uint64_t v112 = *(void *)v325;
            int v113 = sub_1CC0A181C((uint64_t)v354, v111);
            if ((*((unsigned char *)v325 + 23) & 0x10) != 0)
            {
              uint64_t v114 = ***(void ***)v325;
              uint64_t v115 = *(void *)(v114 + 152);
              uint64_t v116 = *(unsigned int *)(v114 + 168);
              if (!v116) {
                goto LABEL_144;
              }
              LODWORD(v117) = (v116 - 1) & v319;
              uint64_t v118 = (llvm::Value **)(v115 + 16 * v117);
              uint64_t v119 = *v118;
              if (*v118 != v325)
              {
                int v120 = 1;
                while (v119 != (llvm::Value *)-4096)
                {
                  int v121 = v117 + v120++;
                  uint64_t v117 = v121 & (v116 - 1);
                  uint64_t v119 = *(llvm::Value **)(v115 + 16 * v117);
                  if (v119 == v325)
                  {
                    uint64_t v118 = (llvm::Value **)(v115 + 16 * v117);
                    goto LABEL_145;
                  }
                }
LABEL_144:
                uint64_t v118 = (llvm::Value **)(v115 + 16 * v116);
              }
LABEL_145:
              uint64_t v122 = v118[1];
              uint64_t v125 = *(void *)v122;
              unint64_t v124 = (char *)v122 + 16;
              uint64_t v123 = v125;
            }
            else
            {
              uint64_t v123 = 0;
              unint64_t v124 = &byte_1CFBCE98E;
            }
            __int16 v341 = 773;
            uint64_t v338 = v124;
            uint64_t v339 = v123;
            v340[0] = ".lcssa";
            int64_t v126 = sub_1CB93113C(v6, v112, v113, (uint64_t)&v338);
            uint64_t v127 = (unsigned __int8 *)*((void *)v325 + 6);
            int v328 = v127;
            if (v127) {
              llvm::MetadataTracking::track((uint64_t)&v328, v127, 2);
            }
            uint64_t v128 = (unsigned __int8 **)((char *)v126 + 48);
            unsigned int v323 = v91;
            if (&v328 == (unsigned __int8 **)((char *)v126 + 48))
            {
              if (!v328) {
                goto LABEL_152;
              }
              int v203 = *v328;
              if ((v203 - 4) > 0x1E)
              {
                if ((v203 - 3) >= 0xFFFFFFFE) {
                  uint64_t v206 = v328;
                }
                else {
                  uint64_t v206 = 0;
                }
                if ((v203 - 3) < 0xFFFFFFFE)
                {
                  unsigned int v110 = v325;
                  if (v203 == 3) {
                    *((void *)v328 + 1) = 0;
                  }
                  goto LABEL_152;
                }
                unint64_t v205 = (unint64_t)(v206 + 8);
              }
              else
              {
                unsigned int v110 = v325;
                if ((v328[1] & 0x7F) != 2 && !*((_DWORD *)v328 + 3)) {
                  goto LABEL_152;
                }
                uint64_t v204 = *((void *)v328 + 2);
                if ((v204 & 4) == 0) {
                  goto LABEL_152;
                }
                unint64_t v205 = v204 & 0xFFFFFFFFFFFFFFF8;
                if (!v205) {
                  goto LABEL_152;
                }
              }
              uint64_t v338 = &v328;
              sub_1CC5FA668(v205 + 16, &v338);
              unsigned int v110 = v325;
              goto LABEL_152;
            }
            uint64_t v129 = *v128;
            if (!*v128) {
              goto LABEL_150;
            }
            int v195 = *v129;
            if ((v195 - 4) <= 0x1E)
            {
              if ((v129[1] & 0x7F) != 2 && !*((_DWORD *)v129 + 3)) {
                goto LABEL_150;
              }
              uint64_t v196 = *((void *)v129 + 2);
              if ((v196 & 4) == 0) {
                goto LABEL_150;
              }
              unint64_t v197 = v196 & 0xFFFFFFFFFFFFFFF8;
              if (!v197) {
                goto LABEL_150;
              }
              goto LABEL_266;
            }
            if ((v195 - 3) >= 0xFFFFFFFE) {
              uint64_t v201 = *v128;
            }
            else {
              uint64_t v201 = 0;
            }
            if ((v195 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v197 = (unint64_t)(v201 + 8);
LABEL_266:
              uint64_t v338 = (char *)v126 + 48;
              sub_1CC5FA668(v197 + 16, &v338);
              goto LABEL_150;
            }
            if (v195 == 3) {
              *((void *)v129 + 1) = 0;
            }
LABEL_150:
            unsigned int v130 = v328;
            unsigned __int8 *v128 = v328;
            if (v130)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v328, v130, (uint64_t)v126 + 48);
              int v328 = 0;
            }
LABEL_152:
            __int16 v131 = (uint64_t *)sub_1CC0A1594((uint64_t)v354, (uint64_t)v327);
            int v132 = sub_1CC0A181C((uint64_t)v354, (uint64_t)v327);
            uint64_t v133 = (char **)((char *)v325 + 8);
            if (v132)
            {
              int v134 = &v131[v132];
              do
              {
                uint64_t v135 = *v131;
                int v136 = *((_DWORD *)v126 + 5);
                uint64_t v137 = v136 & 0x7FFFFFF;
                if ((v136 & 0x7FFFFFF) == *((_DWORD *)v126 + 15))
                {
                  unsigned int v165 = v137 + (v137 >> 1);
                  if (v165 <= 2) {
                    uint64_t v166 = 2;
                  }
                  else {
                    uint64_t v166 = v165;
                  }
                  *((_DWORD *)v126 + 15) = v166;
                  if ((v136 & 0x40000000) != 0) {
                    long long v167 = (uint64_t *)*((void *)v126 - 1);
                  }
                  else {
                    long long v167 = (uint64_t *)((char *)v126 - 32 * v137);
                  }
                  uint64_t v168 = operator new(40 * v166);
                  *((void *)v126 - 1) = v168;
                  uint64_t v169 = v168;
                  do
                  {
                    *uint64_t v169 = 0;
                    v169[1] = 0;
                    v169[2] = 0;
                    v169[3] = v126;
                    v169 += 4;
                  }
                  while (v169 != &v168[4 * v166]);
                  int v170 = *((_DWORD *)v126 + 5);
                  if ((v170 & 0x40000000) != 0) {
                    uint64_t v171 = (uint64_t)v168;
                  }
                  else {
                    uint64_t v171 = (uint64_t)v126 - 32 * (v170 & 0x7FFFFFF);
                  }
                  sub_1CC5E4108((uint64_t)&v338, v167, &v167[4 * v137], v171);
                  if (v137)
                  {
                    memmove((void *)(v171 + 32 * v166), &v167[4 * v137], 8 * v137);
                    uint64_t v172 = 4 * v137;
                    do
                    {
                      uint64_t v173 = &v167[v172];
                      if (v167[v172 - 4])
                      {
                        *(void *)*(v173 - 2) = *(v173 - 3);
                        uint64_t v174 = *(v173 - 3);
                        if (v174) {
                          *(void *)(v174 + 16) = *(v173 - 2);
                        }
                      }
                      v172 -= 4;
                    }
                    while (v172 * 8);
                  }
                  operator delete(v167);
                  int v136 = *((_DWORD *)v126 + 5);
                  uint64_t v133 = (char **)((char *)v325 + 8);
                  unsigned int v110 = v325;
                }
                uint64_t v138 = (v136 + 1) & 0x7FFFFFF;
                *((_DWORD *)v126 + 5) = v136 & 0xF8000000 | (v136 + 1) & 0x7FFFFFF;
                if ((v136 & 0x40000000) != 0) {
                  BOOL v139 = (char *)*((void *)v126 - 1);
                }
                else {
                  BOOL v139 = (char *)v126 - 32 * v138;
                }
                uint64_t v140 = (v138 - 1);
                unsigned int v141 = &v139[32 * v140];
                if (*(void *)v141)
                {
                  **((void **)v141 + 2) = *((void *)v141 + 1);
                  uint64_t v164 = *((void *)v141 + 1);
                  if (v164) {
                    *(void *)(v164 + 16) = *((void *)v141 + 2);
                  }
                }
                *(void *)unsigned int v141 = v110;
                uint64_t v142 = *((void *)v110 + 1);
                *((void *)v141 + 1) = v142;
                if (v142) {
                  *(void *)(v142 + 16) = v141 + 8;
                }
                *(void *)&v139[32 * v140 + 16] = v133;
                llvm::BasicBlock *v133 = v141;
                int v143 = *((_DWORD *)v126 + 5);
                uint64_t v144 = v143 & 0x7FFFFFF;
                if ((v143 & 0x40000000) != 0) {
                  uint64_t v145 = (char *)*((void *)v126 - 1);
                }
                else {
                  uint64_t v145 = (char *)v126 - 32 * v144;
                }
                *(void *)&v145[32 * *((unsigned int *)v126 + 15) + 8 * (v144 - 1)] = v135;
                uint64_t v147 = *(void *)(v332 + 56);
                uint64_t v146 = *(void *)(v332 + 64);
                if (v146 == v147)
                {
                  uint64_t v148 = *(unsigned int *)(v332 + 76);
                  uint64_t v149 = (void *)(v146 + 8 * v148);
                  if (v148)
                  {
                    uint64_t v150 = 0;
                    uint64_t v151 = 8 * v148;
                    while (*(void *)(v146 + v150) != v135)
                    {
                      v150 += 8;
                      if (v151 == v150) {
                        goto LABEL_180;
                      }
                    }
                    uint64_t v149 = (void *)(v146 + v150);
                  }
LABEL_180:
                  uint64_t v147 = *(void *)(v332 + 64);
                }
                else
                {
                  uint64_t v152 = *(unsigned int *)(v332 + 72);
                  int v153 = v152 - 1;
                  unsigned int v154 = (v152 - 1) & ((v135 >> 4) ^ (v135 >> 9));
                  uint64_t v149 = (void *)(v146 + 8 * v154);
                  uint64_t v155 = *v149;
                  if (*v149 == -1)
                  {
                    char v156 = 0;
LABEL_195:
                    if (v156) {
                      uint64_t v149 = v156;
                    }
                    if (*v149 != v135) {
                      uint64_t v149 = (void *)(v146 + 8 * v152);
                    }
                  }
                  else
                  {
                    char v156 = 0;
                    int v157 = 1;
                    while (v155 != v135)
                    {
                      if (v156) {
                        BOOL v158 = 0;
                      }
                      else {
                        BOOL v158 = v155 == -2;
                      }
                      if (v158) {
                        char v156 = v149;
                      }
                      unsigned int v159 = v154 + v157++;
                      unsigned int v154 = v159 & v153;
                      uint64_t v149 = (void *)(v146 + 8 * (v159 & v153));
                      uint64_t v155 = *v149;
                      if (*v149 == -1) {
                        goto LABEL_195;
                      }
                    }
                  }
                }
                if (v146 == v147) {
                  uint64_t v160 = 76;
                }
                else {
                  uint64_t v160 = 72;
                }
                if (v149 == (void *)(v146 + 8 * *(unsigned int *)(v332 + v160)))
                {
                  int v161 = *((_DWORD *)v126 + 5);
                  uint64_t v162 = v161 & 0x7FFFFFF;
                  if ((v161 & 0x40000000) != 0) {
                    unint64_t v163 = (char *)*((void *)v126 - 1);
                  }
                  else {
                    unint64_t v163 = (char *)v126 - 32 * v162;
                  }
                  if (v373 >= (unint64_t)HIDWORD(v373)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v372 + v373) = &v163[32 * (v162 - 1)];
                  LODWORD(v373) = v373 + 1;
                }
                ++v131;
              }
              while (v131 != v134);
            }
            if (v349 >= (unint64_t)HIDWORD(v349)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            a3 = v317;
            uint64_t v6 = v318;
            a2 = v316;
            uint64_t v92 = v320;
            int v69 = v321;
            int v91 = v323;
            *((void *)v348 + v349) = v126;
            LODWORD(v349) = v349 + 1;
            unsigned int v176 = v326;
            uint64_t v175 = v327;
            uint64_t v338 = v327;
            int v177 = *(_DWORD *)(*(void *)&v329[0] + 16);
            if (v177)
            {
              int v178 = v177 - 1;
              unsigned int v179 = (v177 - 1) & (v326 ^ (v327 >> 9));
              int v180 = (uint64_t *)(**(void **)&v329[0] + 16 * v179);
              uint64_t v181 = *v180;
              if ((llvm::BasicBlock *)*v180 != v327)
              {
                BOOL v182 = 0;
                int v183 = 1;
                while (v181 != -4096)
                {
                  if (v182) {
                    BOOL v184 = 0;
                  }
                  else {
                    BOOL v184 = v181 == -8192;
                  }
                  if (v184) {
                    BOOL v182 = v180;
                  }
                  unsigned int v185 = v179 + v183++;
                  unsigned int v179 = v185 & v178;
                  int v180 = (uint64_t *)(**(void **)&v329[0] + 16 * (v185 & v178));
                  uint64_t v181 = *v180;
                  if ((llvm::BasicBlock *)*v180 == v327) {
                    goto LABEL_236;
                  }
                }
                if (v182) {
                  unint64_t v186 = v182;
                }
                else {
                  unint64_t v186 = v180;
                }
LABEL_235:
                int v180 = sub_1CC0A3E2C(*(uint64_t *)&v329[0], (uint64_t)&v338, (uint64_t *)&v338, v186);
                *int v180 = (uint64_t)v338;
                v180[1] = 0;
                unsigned int v176 = v326;
                uint64_t v175 = v327;
              }
LABEL_236:
              v180[1] = (uint64_t)v126;
              int v187 = *((_DWORD *)v317 + 4);
              if (v187)
              {
                uint64_t v188 = *v317;
                unsigned int v189 = v187 - 1;
                uint64_t v190 = (v187 - 1) & (v176 ^ (v175 >> 9));
                int v191 = *(llvm::BasicBlock **)(*v317 + 16 * v190);
                if (v175 == v191)
                {
LABEL_241:
                  uint64_t v194 = *(void **)(v188 + 16 * v190 + 8);
                  if (v194)
                  {
                    while (v194 != (void *)v332)
                    {
                      if (!v194)
                      {
                        if (v346 >= (unint64_t)HIDWORD(v346)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((void *)v345 + v346) = v126;
                        LODWORD(v346) = v346 + 1;
                        goto LABEL_129;
                      }
                      uint64_t v194 = (void *)*v194;
                    }
                  }
                }
                else
                {
                  int v192 = 1;
                  while (v191 != (llvm::BasicBlock *)-4096)
                  {
                    int v193 = v190 + v192++;
                    uint64_t v190 = v193 & v189;
                    int v191 = *(llvm::BasicBlock **)(v188 + 16 * v190);
                    if (v175 == v191) {
                      goto LABEL_241;
                    }
                  }
                }
              }
              goto LABEL_129;
            }
            unint64_t v186 = 0;
            goto LABEL_235;
          }
LABEL_129:
          ++v91;
        }
        while (v91 != v92);
      }
      a1 = v315;
      if (v373)
      {
        uint64_t v207 = (char *)v372;
        uint64_t v208 = (char *)v372 + 8 * v373;
        while (1)
        {
          uint64_t v209 = *(void *)v207;
          uint64_t v210 = *(void *)(*(void *)v207 + 24);
          uint64_t v211 = v210 + 40;
          if (v210 && *(unsigned char *)(v210 + 16) == 83)
          {
            int v212 = *(_DWORD *)(v210 + 20);
            if ((v212 & 0x40000000) != 0) {
              uint64_t v213 = *(void *)(v210 - 8);
            }
            else {
              uint64_t v213 = v210 - 32 * (v212 & 0x7FFFFFF);
            }
            uint64_t v211 = v213
                 + 32 * *(unsigned int *)(v210 + 60)
                 + 8 * ((unint64_t)(v209 - v213) >> 5);
          }
          uint64_t v214 = *(void *)v211;
          uint64_t v215 = *(void *)(*(void *)v211 + 48);
          uint64_t v216 = v215 - 24;
          if (!v215) {
            uint64_t v216 = 0;
          }
          if (*(unsigned char *)(v216 + 16) == 83)
          {
            uint64_t v217 = v324[1];
            uint64_t v218 = *((unsigned int *)v324 + 4);
            if (v218)
            {
              uint64_t v219 = 8 * v218;
              uint64_t v220 = (void *)v324[1];
              while (*v220 != v214)
              {
                ++v220;
                v219 -= 8;
                if (!v219)
                {
                  uint64_t v220 = (void *)(v217 + 8 * v218);
                  break;
                }
              }
            }
            else
            {
              uint64_t v220 = (void *)v324[1];
            }
            if (v218 != ((uint64_t)v220 - v217) >> 3) {
              break;
            }
          }
          if (v349 == 1)
          {
            uint64_t v221 = *(llvm::Value **)v348;
            if (*(void *)v209)
            {
              **(void **)(v209 + 16) = *(void *)(v209 + 8);
              uint64_t v222 = *(void *)(v209 + 8);
              if (v222) {
                *(void *)(v222 + 16) = *(void *)(v209 + 16);
              }
            }
            *(void *)uint64_t v209 = v221;
            if (!v221) {
              goto LABEL_328;
            }
            uint64_t v225 = *((void *)v221 + 1);
            uint64_t v223 = (void *)((char *)v221 + 8);
            uint64_t v224 = v225;
            goto LABEL_325;
          }
          llvm::SSAUpdater::RewriteUse((llvm::SSAUpdater *)v329, (llvm::Use *)v209);
LABEL_328:
          v207 += 8;
          if (v207 == v208) {
            goto LABEL_329;
          }
        }
        if (*(void *)v209)
        {
          **(void **)(v209 + 16) = *(void *)(v209 + 8);
          uint64_t v226 = *(void *)(v209 + 8);
          if (v226) {
            *(void *)(v226 + 16) = *(void *)(v209 + 16);
          }
        }
        *(void *)uint64_t v209 = v216;
        if (!v215) {
          goto LABEL_328;
        }
        uint64_t v227 = *(void *)(v215 - 16);
        uint64_t v223 = (void *)(v215 - 16);
        uint64_t v224 = v227;
LABEL_325:
        *(void *)(v209 + 8) = v224;
        if (v224) {
          *(void *)(v224 + 16) = v209 + 8;
        }
        *(void *)(v209 + 16) = v223;
        *uint64_t v223 = v209;
        goto LABEL_328;
      }
LABEL_329:
      uint64_t v338 = v340;
      uint64_t v339 = 0x400000000;
      llvm::findDbgValues((uint64_t)&v338, (uint64_t ***)v325);
      unsigned int v228 = v322;
      if (v339)
      {
        uint64_t v229 = (uint64_t ***)v338;
        uint64_t v230 = (uint64_t ***)((char *)v338 + 8 * v339);
        do
        {
          uint64_t v231 = *v229;
          int v232 = (unsigned __int8 *)(*v229)[5];
          if (v228 == v232) {
            goto LABEL_362;
          }
          uint64_t v234 = *(void *)(v332 + 56);
          uint64_t v233 = *(void *)(v332 + 64);
          if (v233 == v234)
          {
            uint64_t v235 = *(unsigned int *)(v332 + 76);
            unsigned int v236 = (unsigned __int8 **)(v233 + 8 * v235);
            if (v235)
            {
              uint64_t v237 = 0;
              uint64_t v238 = 8 * v235;
              while (*(unsigned __int8 **)(v233 + v237) != v232)
              {
                v237 += 8;
                if (v238 == v237) {
                  goto LABEL_350;
                }
              }
              unsigned int v236 = (unsigned __int8 **)(v233 + v237);
            }
LABEL_350:
            uint64_t v234 = *(void *)(v332 + 64);
          }
          else
          {
            uint64_t v239 = *(unsigned int *)(v332 + 72);
            int v240 = v239 - 1;
            unsigned int v241 = (v239 - 1) & ((v232 >> 4) ^ (v232 >> 9));
            unsigned int v236 = (unsigned __int8 **)(v233 + 8 * v241);
            unint64_t v242 = *v236;
            if (*v236 == (unsigned __int8 *)-1)
            {
              unsigned int v243 = 0;
LABEL_365:
              if (v243) {
                unsigned int v236 = v243;
              }
              if (*v236 != v232) {
                unsigned int v236 = (unsigned __int8 **)(v233 + 8 * v239);
              }
            }
            else
            {
              unsigned int v243 = 0;
              int v244 = 1;
              while (v242 != v232)
              {
                if (v243) {
                  BOOL v245 = 0;
                }
                else {
                  BOOL v245 = v242 == (unsigned __int8 *)-2;
                }
                if (v245) {
                  unsigned int v243 = v236;
                }
                unsigned int v246 = v241 + v244++;
                unsigned int v241 = v246 & v240;
                unsigned int v236 = (unsigned __int8 **)(v233 + 8 * (v246 & v240));
                unint64_t v242 = *v236;
                if (*v236 == (unsigned __int8 *)-1) {
                  goto LABEL_365;
                }
              }
            }
          }
          uint64_t v247 = v233 == v234 ? 76 : 72;
          if (v236 != (unsigned __int8 **)(v233 + 8 * *(unsigned int *)(v332 + v247))) {
            goto LABEL_362;
          }
          if (v349 == 1)
          {
            uint64_t v248 = *(llvm::Value **)v348;
            if (!*(void *)v348) {
              goto LABEL_362;
            }
          }
          else
          {
            uint64_t v336 = 0;
            uint64_t v337 = v232;
            int v249 = sub_1CC89AE34(*(uint64_t **)&v329[0], &v337, &v336);
            uint64_t v248 = 0;
            if (v249) {
              uint64_t v248 = *(llvm::Value **)(v336 + 8);
            }
            unsigned int v228 = v322;
            if (!v248) {
              goto LABEL_362;
            }
          }
          llvm::DbgVariableIntrinsic::replaceVariableLocationOp(v231, v325, v248);
          unsigned int v228 = v322;
LABEL_362:
          ++v229;
        }
        while (v229 != v230);
      }
      if (v343)
      {
        unsigned int v250 = (char *)v342;
        unsigned int v251 = (char *)v342 + 8 * v343;
        uint64_t v252 = v332;
        do
        {
          int v253 = *((_DWORD *)a3 + 4);
          if (v253)
          {
            uint64_t v254 = *(void *)(*(void *)v250 + 40);
            uint64_t v255 = *a3;
            unsigned int v256 = v253 - 1;
            uint64_t v257 = ((v254 >> 4) ^ (v254 >> 9)) & (v253 - 1);
            uint64_t v258 = *(void *)(*a3 + 16 * v257);
            if (v254 == v258)
            {
LABEL_376:
              unint64_t v261 = *(void **)(v255 + 16 * v257 + 8);
              if (v261) {
                BOOL v262 = v261 == (void *)v252;
              }
              else {
                BOOL v262 = 1;
              }
              if (!v262)
              {
                while (v261)
                {
                  unint64_t v261 = (void *)*v261;
                  if (v261 == (void *)v252) {
                    goto LABEL_381;
                  }
                }
                if (v346 >= (unint64_t)HIDWORD(v346)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v345 + v346) = *(void *)v250;
                LODWORD(v346) = v346 + 1;
              }
            }
            else
            {
              int v259 = 1;
              while (v258 != -4096)
              {
                int v260 = v257 + v259++;
                uint64_t v257 = v260 & v256;
                uint64_t v258 = *(void *)(v255 + 16 * v257);
                if (v254 == v258) {
                  goto LABEL_376;
                }
              }
            }
          }
LABEL_381:
          v250 += 8;
        }
        while (v250 != v251);
      }
      if (v346)
      {
        uint64_t v263 = (char *)v345;
        uint64_t v264 = 8 * v346;
        do
        {
          if (*(void *)(*(void *)v263 + 8))
          {
            unint64_t v265 = *(unsigned int *)(v315 + 8);
            if (v265 >= *(unsigned int *)(v315 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)v315 + 8 * v265) = *(void *)v263;
            ++*(_DWORD *)(v315 + 8);
          }
          v263 += 8;
          v264 -= 8;
        }
        while (v264);
      }
      if (v349)
      {
        uint64_t v266 = (uint64_t *)v348;
        uint64_t v267 = 8 * v349;
        while (1)
        {
          uint64_t v268 = *v266;
          if (!*(void *)(*v266 + 8))
          {
            uint64_t v337 = 0;
            if ((sub_1CD18288C((uint64_t)v367, v268, &v337) & 1) == 0) {
              break;
            }
          }
LABEL_410:
          ++v266;
          v267 -= 8;
          if (!v267) {
            goto LABEL_415;
          }
        }
        int v269 = LODWORD(v367[0]) >> 1;
        if (v367[0]) {
          unsigned int v270 = 16;
        }
        else {
          unsigned int v270 = v368;
        }
        if (4 * v269 + 4 >= 3 * v270)
        {
          v270 *= 2;
        }
        else if (v270 + ~v269 - HIDWORD(v367[0]) > v270 >> 3)
        {
LABEL_406:
          LODWORD(v367[0]) += 2;
          if (*(void *)v337 != -4096) {
            --HIDWORD(v367[0]);
          }
          *(void *)uint64_t v337 = v268;
          if (v370 >= (unint64_t)HIDWORD(v370)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)__src + v370) = v268;
          LODWORD(v370) = v370 + 1;
          goto LABEL_410;
        }
        sub_1CD182930((uint64_t)v367, v270);
        uint64_t v337 = 0;
        sub_1CD18288C((uint64_t)v367, v268, &v337);
        goto LABEL_406;
      }
LABEL_415:
      if (v338 != v340) {
        free(v338);
      }
      llvm::SSAUpdater::~SSAUpdater((void **)v329);
      if (v342 != v344) {
        free(v342);
      }
      if (v345 != v347) {
        free(v345);
      }
      if (v348 != v350) {
        free(v348);
      }
      char v17 = 1;
      unint64_t v14 = &v352;
LABEL_424:
      unsigned int v16 = *(_DWORD *)(a1 + 8);
    }
    while (v16);
  }
  uint64_t v285 = (char *)__src;
  if (a6)
  {
    sub_1CD47792C(a6, __src, (unsigned char *)__src + 8 * v370);
    unint64_t v14 = &v352;
  }
  else if (v370)
  {
    uint64_t v286 = 8 * v370;
    do
    {
      if (!*(void *)(*(void *)v285 + 8)) {
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
      v285 += 8;
      v286 -= 8;
    }
    while (v286);
  }
  char v287 = v351;
  if (v351)
  {
    uint64_t v288 = 4;
  }
  else
  {
    uint64_t v288 = v353;
    if (!v353) {
      goto LABEL_471;
    }
    unint64_t v14 = v352;
  }
  uint64_t v289 = v14 + 3;
  uint64_t v290 = 32 * v288;
  do
  {
    uint64_t v291 = *(v289 - 3);
    if (v291 != -4096 && v291 != -8192)
    {
      uint64_t v292 = (void *)*(v289 - 2);
      if (v289 != v292) {
        free(v292);
      }
    }
    v289 += 4;
    v290 -= 32;
  }
  while (v290);
  char v287 = v351;
LABEL_471:
  if ((v287 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v352, 8);
  }
  uint64_t v293 = v333;
  if ((void)v334)
  {
    sub_1CBF5385C(v333, v334, *((uint64_t *)&v334 + 1));
    uint64_t v293 = v333;
  }
  else
  {
    *(void *)(v333 + 48) = 0;
    *(void *)(v293 + 56) = 0;
  }
  uint64_t v351 = (uint64_t)v335;
  if (v335)
  {
    llvm::MetadataTracking::track((uint64_t)&v351, v335, 2);
    uint64_t v294 = v351;
  }
  else
  {
    uint64_t v294 = 0;
  }
  sub_1CB8461A4(v293, 0, v294);
  if (v351)
  {
    int v303 = *(unsigned __int8 *)v351;
    if ((v303 - 4) > 0x1E)
    {
      if ((v303 - 3) >= 0xFFFFFFFE) {
        uint64_t v309 = v351;
      }
      else {
        uint64_t v309 = 0;
      }
      if ((v303 - 3) < 0xFFFFFFFE)
      {
        if (v303 == 3) {
          *(void *)(v351 + 8) = 0;
        }
        goto LABEL_479;
      }
      unint64_t v305 = v309 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v351 + 1) & 0x7F) != 2 && !*(_DWORD *)(v351 + 12)) {
        goto LABEL_479;
      }
      uint64_t v304 = *(void *)(v351 + 16);
      if ((v304 & 4) == 0) {
        goto LABEL_479;
      }
      unint64_t v305 = v304 & 0xFFFFFFFFFFFFFFF8;
      if (!v305) {
        goto LABEL_479;
      }
    }
    BOOL v348 = &v351;
    sub_1CC5FA668(v305 + 16, &v348);
  }
LABEL_479:
  if (!v335) {
    goto LABEL_480;
  }
  int v306 = *v335;
  if ((v306 - 4) > 0x1E)
  {
    if ((v306 - 3) >= 0xFFFFFFFE) {
      unsigned int v310 = v335;
    }
    else {
      unsigned int v310 = 0;
    }
    if ((v306 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v308 = (unint64_t)(v310 + 8);
LABEL_528:
      BOOL v348 = &v335;
      sub_1CC5FA668(v308 + 16, &v348);
      goto LABEL_480;
    }
    if (v306 == 3) {
      *((void *)v335 + 1) = 0;
    }
  }
  else if ((v335[1] & 0x7F) == 2 || *((_DWORD *)v335 + 3))
  {
    uint64_t v307 = *((void *)v335 + 2);
    if ((v307 & 4) != 0)
    {
      unint64_t v308 = v307 & 0xFFFFFFFFFFFFFFF8;
      if (v308) {
        goto LABEL_528;
      }
    }
  }
LABEL_480:
  if (v362)
  {
    unint64_t v295 = (uint64_t *)v361;
    uint64_t v296 = 8 * v362;
    do
    {
      uint64_t v297 = *v295++;
      MEMORY[0x1D25D9CD0](v297, 8);
      v296 -= 8;
    }
    while (v296);
  }
  unint64_t v298 = (uint64_t *)v364;
  if (v365)
  {
    uint64_t v311 = 16 * v365;
    do
    {
      uint64_t v312 = *v298;
      v298 += 2;
      MEMORY[0x1D25D9CD0](v312, 8);
      v311 -= 16;
    }
    while (v311);
    unint64_t v298 = (uint64_t *)v364;
  }
  if (v298 != v366) {
    free(v298);
  }
  if (v361 != v363) {
    free(v361);
  }
  MEMORY[0x1D25D9CD0](v356, 8);
  MEMORY[0x1D25D9CD0](v354[0], 8);
  if (__src != v371) {
    free(__src);
  }
  if ((v367[0] & 1) == 0) {
    MEMORY[0x1D25D9CD0](v367[1], 8);
  }
  if (v372 != v374) {
    free(v372);
  }
  return v17 & 1;
}

void llvm::formLCSSA(llvm *this, llvm::Loop *a2, const llvm::DominatorTree *a3, const llvm::LoopInfo *a4, llvm::ScalarEvolution *a5)
{
  v7[8] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = v7;
  uint64_t v6 = 0x800000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlocks();
}

void llvm::formLCSSARecursively(llvm *this, llvm::Loop *a2, const llvm::DominatorTree *a3, const llvm::LoopInfo *a4, llvm::ScalarEvolution *a5)
{
  uint64_t v9 = (llvm **)*((void *)this + 1);
  int v10 = (llvm **)*((void *)this + 2);
  if (v9 != v10)
  {
    int v11 = 0;
    do
    {
      int64x2_t v12 = *v9++;
      v11 |= llvm::formLCSSARecursively(v12, a2, a3, a4, a5);
    }
    while (v9 != v10);
  }
  llvm::formLCSSA(this, a2, a3, a4, a5);
}

void sub_1CD181B84(llvm *a1)
{
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeLCSSAVerificationPassPass(a1, v2);
  operator new();
}

uint64_t sub_1CD181C34(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EA61F34B;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F26484B0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFC8C0, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CD181B84;
    v5[1] = &PassRegistry;
    __n128 v4 = v5;
    std::__call_once(&qword_1EBCFC8C0, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void llvm::LCSSAPass::run()
{
}

void sub_1CD181E7C()
{
}

void sub_1CD181EBC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD181EF4(llvm::PassRegistry *a1, uint64_t a2)
{
  uint64_t v3 = a2 + 112;
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
  sub_1CB843600(a2, v3, (uint64_t)&unk_1EA61F34C);
  sub_1CB843600(a2, v3, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1CB843600(a2, v3, (uint64_t)&llvm::BasicAAWrapperPass::ID);
  sub_1CB843600(a2, v3, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  sub_1CB843600(a2, v3, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1CB843600(a2, v3, (uint64_t)&llvm::SCEVAAWrapperPass::ID);
  sub_1CB843600(a2, v3, (uint64_t)&llvm::BranchProbabilityInfoWrapperPass::ID);
  sub_1CB843600(a2, v3, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::LCSSAVerificationPass::ID);

  sub_1CB843600(a2, v3, (uint64_t)llvm::LCSSAVerificationPass::ID);
}

uint64_t sub_1CD182054(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (v3 == v4)
  {
LABEL_4:
    uint64_t v5 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v3 != &llvm::LoopInfoWrapperPass::ID)
    {
      v3 += 16;
      if (v3 == v4) {
        goto LABEL_4;
      }
    }
    uint64_t v5 = *(void *)(v3 + 8);
  }
  *(void *)(a1 + 40) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 96))(v5, &llvm::LoopInfoWrapperPass::ID)+ 32;
  uint64_t v6 = *(uint64_t **)(a1 + 8);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (v7 == v8)
  {
LABEL_9:
    uint64_t v9 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v7 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v7 += 16;
      if (v7 == v8) {
        goto LABEL_9;
      }
    }
    uint64_t v9 = *(void *)(v7 + 8);
  }
  *(void *)(a1 + 32) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v9 + 96))(v9, &llvm::DominatorTreeWrapperPass::ID)+ 32;
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24), llvm::ScalarEvolutionWrapperPass::ID, 1);
  if (AnalysisPass
    && (uint64_t v12 = (*(uint64_t (**)(uint64_t, char *))(*(void *)AnalysisPass + 96))(AnalysisPass, llvm::ScalarEvolutionWrapperPass::ID)) != 0)
  {
    uint64_t v13 = *(const llvm::LoopInfo **)(v12 + 32);
  }
  else
  {
    uint64_t v13 = 0;
  }
  *(void *)(a1 + 48) = v13;
  unint64_t v14 = *(const llvm::DominatorTree **)(a1 + 40);
  unint64_t v15 = (llvm **)*((void *)v14 + 3);
  if (v15 != *((llvm ***)v14 + 4)) {
    llvm::formLCSSARecursively(*v15, *(llvm::Loop **)(a1 + 32), v14, v13, v11);
  }
  return 0;
}

uint64_t sub_1CD182204(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = result + 8;
  if (*(unsigned char *)result)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      goto LABEL_4;
    }
    uint64_t v3 = *(void *)(result + 8);
  }
  int v5 = v4 - 1;
  uint64_t v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 32 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      int v12 = v6 + v10++;
      uint64_t v6 = v12 & v5;
      uint64_t v7 = (void *)(v3 + 32 * v6);
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_4;
      }
    }
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_4:
  *a3 = v7;
  return result;
}

void *sub_1CD1822A0(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)a1;
  int v6 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1CD182418(a1, 2 * v7);
    uint64_t v10 = a1 + 8;
    int v5 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v11 = 4;
    }
    else
    {
      int v11 = *(_DWORD *)(a1 + 16);
      if (!v11)
      {
        int v8 = 0;
        a3 = 0;
        goto LABEL_7;
      }
      uint64_t v10 = *(void *)(a1 + 8);
    }
    int v8 = *(_DWORD *)a1 & 1;
    int v12 = v11 - 1;
    uint64_t v13 = ((*a2 >> 4) ^ (*a2 >> 9)) & v12;
    a3 = (void *)(v10 + 32 * v13);
    uint64_t v14 = *a3;
    if (*a2 != *a3)
    {
      unint64_t v15 = 0;
      int v16 = 1;
      while (v14 != -4096)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v14 == -8192;
        }
        if (v17) {
          unint64_t v15 = a3;
        }
        int v18 = v13 + v16++;
        uint64_t v13 = v18 & v12;
        a3 = (void *)(v10 + 32 * v13);
        uint64_t v14 = *a3;
        if (*a2 == *a3) {
          goto LABEL_7;
        }
      }
      if (v15) {
        a3 = v15;
      }
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 4) <= v7 >> 3)
    {
      sub_1CD182418(a1, v7);
      uint64_t v19 = 0;
      sub_1CD182204(a1, *a2, &v19);
      a3 = v19;
      int v5 = *(_DWORD *)a1;
    }
    int v8 = v5 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v5 & 0xFFFFFFFE | v8) + 2;
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  return a3;
}

void sub_1CD182418(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2;
  v18[16] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    int v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40) {
      unsigned int v2 = v6 + 1;
    }
    else {
      unsigned int v2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    int v16 = *(uint64_t **)(a1 + 8);
    uint64_t v17 = *(unsigned int *)(a1 + 16);
    if (v2 > 4)
    {
      *(void *)(a1 + 8) = operator new(32 * v2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD182688((int *)a1, v16, &v16[4 * v17]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v7 = 0;
  int v8 = v18;
  do
  {
    uint64_t v9 = a1 + v7;
    uint64_t v10 = *(void *)(a1 + v7 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v8[1] = (uint64_t)(v8 + 3);
      *int v8 = v10;
      v8[2] = 0x100000000;
      unsigned int v11 = *(_DWORD *)(v9 + 24);
      int v12 = *(void **)(v9 + 16);
      if (v11) {
        BOOL v13 = a1 + v7 + 8 == (void)v8;
      }
      else {
        BOOL v13 = 1;
      }
      if (!v13)
      {
        uint64_t v14 = a1 + v7;
        uint64_t v15 = a1 + v7 + 32;
        if ((void *)v15 == v12)
        {
          if (v11 >= 2) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v8 + 3, v12, 8 * *(unsigned int *)(v9 + 24));
          *((_DWORD *)v8 + 4) = v11;
          int v12 = *(void **)(v9 + 16);
        }
        else
        {
          v8[1] = (uint64_t)v12;
          *((_DWORD *)v8 + 4) = v11;
          *((_DWORD *)v8 + 5) = *(_DWORD *)(v14 + 28);
          *(void *)(v9 + 16) = v15;
          *(_DWORD *)(v14 + 28) = 0;
          int v12 = (void *)(a1 + v7 + 32);
        }
        *(_DWORD *)(v9 + 24) = 0;
      }
      v8 += 4;
      if ((void *)(a1 + v7 + 32) != v12) {
        free(v12);
      }
    }
    v7 += 32;
  }
  while (v7 != 128);
  if (v2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    *(void *)(a1 + 8) = operator new(32 * v2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v2;
  }
  sub_1CD182688((int *)a1, v18, v8);
}

void sub_1CD182688(int *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = a2;
  int v6 = *a1;
  *(void *)a1 = *a1 & 1;
  uint64_t v7 = a1 + 2;
  if (v6)
  {
    uint64_t v10 = a1 + 34;
    uint64_t v9 = a1 + 2;
  }
  else
  {
    uint64_t v8 = a1[4];
    if (!v8) {
      goto LABEL_5;
    }
    uint64_t v9 = (void *)*((void *)a1 + 1);
    uint64_t v10 = &v9[4 * v8];
  }
  do
  {
    *uint64_t v9 = -4096;
    v9 += 4;
  }
  while (v9 != v10);
LABEL_5:
  if (a2 != a3)
  {
    do
    {
      uint64_t v11 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (*(unsigned char *)a1)
        {
          int v12 = 4;
          BOOL v13 = v7;
        }
        else
        {
          BOOL v13 = (int *)*((void *)a1 + 1);
          int v12 = a1[4];
        }
        int v14 = v12 - 1;
        uint64_t v15 = v14 & ((v11 >> 4) ^ (v11 >> 9));
        int v16 = (uint64_t *)&v13[8 * v15];
        uint64_t v17 = *v16;
        if (v11 != *v16)
        {
          unsigned int v22 = 0;
          int v23 = 1;
          while (v17 != -4096)
          {
            if (v22) {
              BOOL v25 = 0;
            }
            else {
              BOOL v25 = v17 == -8192;
            }
            if (v25) {
              unsigned int v22 = v16;
            }
            int v26 = v15 + v23++;
            uint64_t v15 = v26 & v14;
            int v16 = (uint64_t *)&v13[8 * v15];
            uint64_t v17 = *v16;
            if (v11 == *v16) {
              goto LABEL_10;
            }
          }
          if (v22) {
            int v16 = v22;
          }
        }
LABEL_10:
        uint64_t *v16 = v11;
        v16[1] = (uint64_t)(v16 + 3);
        void v16[2] = 0x100000000;
        unsigned int v18 = *((_DWORD *)v4 + 4);
        if (v16 != v4 && v18 != 0)
        {
          int v20 = (uint64_t *)v4[1];
          if (v20 == v4 + 3)
          {
            if (v18 >= 2) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v16 + 3, v20, 8 * *((unsigned int *)v4 + 4));
            *((_DWORD *)v16 + 4) = v18;
          }
          else
          {
            v16[1] = (uint64_t)v20;
            int v24 = *((_DWORD *)v4 + 5);
            *((_DWORD *)v16 + 4) = v18;
            *((_DWORD *)v16 + 5) = v24;
            v4[1] = (uint64_t)(v4 + 3);
            *((_DWORD *)v4 + 5) = 0;
          }
          *((_DWORD *)v4 + 4) = 0;
        }
        *a1 += 2;
        uint64_t v21 = (uint64_t *)v4[1];
        if (v21 != v4 + 3) {
          free(v21);
        }
      }
      v4 += 4;
    }
    while (v4 != a3);
  }
}

uint64_t sub_1CD18288C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_15;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
LABEL_12:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      uint64_t v7 = (void *)(v3 + 8 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_12;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_15:
  *a3 = v7;
  return result;
}

uint64_t sub_1CD182930(uint64_t a1, unsigned int a2)
{
  v14[16] = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x11)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    BOOL v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 0x10)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CD182AAC(a1, v11, &v11[v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  unsigned int v6 = v14;
  for (uint64_t i = 8; i != 136; i += 8)
  {
    uint64_t v8 = *(void *)(a1 + i);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v6++ = v8;
    }
  }
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CD182AAC(a1, v14, v6);
}

uint64_t sub_1CD182AAC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 136);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      BOOL v11 = 0;
      uint64_t result = sub_1CD18288C((uint64_t)v5, v10, &v11);
      *BOOL v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1CD182B68()
{
  unint64_t v3 = &unk_1EBCFC8C8;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Verify loop lcssa form (time consuming)";
  v1.n128_u64[1] = 39;
  sub_1CD882F1C(&v3, &v2, &v1);

  return __cxa_atexit((void (*)(void *))sub_1CC086C1C, &qword_1EBCFC8D0, &dword_1CB82C000);
}

void llvm::initializeLibCallsShrinkWrapLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  int v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFC998, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CD182C5C;
    v4[1] = &v2;
    unint64_t v3 = v4;
    std::__call_once(&qword_1EBCFC998, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD182C5C(uint64_t a1)
{
}

uint64_t sub_1CD182CFC(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCFC990;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2648550;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCFC998, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CD182C5C;
    v5[1] = &PassRegistry;
    unint64_t v4 = v5;
    std::__call_once(&qword_1EBCFC998, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CD182DAC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v102[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 112);
  if (!v3 || (*(unsigned char *)(v3 + 17) & 4) == 0)
  {
    int v77 = a2;
    uint64_t v78 = a3;
    int v79 = v81;
    uint64_t v80 = 0x1000000000;
    uint64_t v4 = a1 + 72;
    uint64_t v5 = *(void *)(a1 + 80);
    if (v5 != a1 + 72)
    {
      do
      {
        uint64_t v6 = v5 - 24;
        BOOL v39 = v5 == 0;
        uint64_t v5 = *(void *)(v5 + 8);
        if (v39) {
          uint64_t v6 = 0;
        }
        uint64_t v7 = v6 + 40;
        uint64_t v8 = *(void *)(v6 + 48);
        while (v8 != v7)
        {
          uint64_t v9 = v8 - 24;
          BOOL v39 = v8 == 0;
          uint64_t v8 = *(void *)(v8 + 8);
          if (v39) {
            uint64_t v10 = 0;
          }
          else {
            uint64_t v10 = v9;
          }
          if (*(unsigned char *)(v10 + 16) == 84)
          {
            uint64_t v11 = *(void *)(v10 + 64);
            if (v11)
            {
              if ((*(unsigned char *)(v11 + 14) & 0x10) != 0) {
                goto LABEL_16;
              }
            }
            if (!llvm::CallBase::hasFnAttrOnCalledFunction(v10, 20)) {
              goto LABEL_18;
            }
            uint64_t v11 = *(void *)(v10 + 64);
            if (v11)
            {
LABEL_16:
              if ((*(unsigned char *)(v11 + 12) & 0x10) != 0) {
                goto LABEL_18;
              }
            }
            if (llvm::CallBase::hasFnAttrOnCalledFunction(v10, 4))
            {
LABEL_18:
              if (!*(void *)(v10 + 8))
              {
                LODWORD(v88[0]) = 0;
                uint64_t v12 = *(void *)(v10 - 32);
                if (v12)
                {
                  if (!*(unsigned char *)(v12 + 16)
                    && *(void *)(v12 + 24) == *(void *)(v10 + 72)
                    && llvm::TargetLibraryInfoImpl::getLibFunc(*v77, (uint64_t ***)v12, v88)
                    && ((*(void *)(v77[1] + (((unint64_t)LODWORD(v88[0]) >> 3) & 0x1FFFFFF8)) >> SLOBYTE(v88[0])) & 1) == 0
                    && ((*(unsigned __int8 *)(*v77 + ((unint64_t)LODWORD(v88[0]) >> 2)) >> (2
                                                                                                 * ((uint64_t)v88[0] & 3))) & 3) != 0)
                  {
                    int v13 = *(unsigned __int8 *)(v10 + 16);
                    if (v13 == 84)
                    {
                      uint64_t v14 = 0;
                    }
                    else if (v13 == 39)
                    {
                      uint64_t v14 = (*(_DWORD *)(v10 + 80) + 1);
                    }
                    else
                    {
                      uint64_t v14 = 2;
                    }
                    uint64_t v15 = 0;
                    int v16 = *(_DWORD *)(v10 + 20);
                    uint64_t v17 = -(uint64_t)(v16 & 0x7FFFFFF);
                    if (v16 < 0)
                    {
                      uint64_t v20 = v10 - 32 * (v16 & 0x7FFFFFF);
                      uint64_t v21 = *(void *)(v20 - 8);
                      if ((v21 & 0xFFFFFFFF0) != 0) {
                        uint64_t v15 = (*(_DWORD *)(v20 - 12) - *(_DWORD *)(v20 - v21));
                      }
                      else {
                        uint64_t v15 = 0;
                      }
                    }
                    uint64_t v18 = v10 - 32 * v14 - 32 * v15 - 32;
                    uint64_t v19 = v10 + 32 * v17;
                    if (v18 != v19 && *(unsigned __int8 *)(**(void **)v19 + 8) - 2 <= 2)
                    {
                      if (v80 >= (unint64_t)HIDWORD(v80)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v79 + v80) = v10;
                      LODWORD(v80) = v80 + 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
      while (v5 != v4);
      unsigned int v22 = (uint64_t ***)v79;
      if (v80)
      {
        int v23 = (uint64_t ***)((char *)v79 + 8 * v80);
        while (1)
        {
          int v24 = *v22;
          int v70 = 0;
          llvm::TargetLibraryInfoImpl::getLibFunc(*v77, (uint64_t ***)*(v24 - 4), &v70);
          uint64_t v25 = (v70 - 300);
          if (v25 > 0x2F) {
            goto LABEL_44;
          }
          if (v25 != 47)
          {
            if (((1 << (v70 - 44)) & 0x7F8F) != 0)
            {
              float v26 = 0.0;
LABEL_51:
              int v29 = v24;
              uint64_t v30 = 5;
              goto LABEL_103;
            }
            if (((1 << (v70 - 44)) & 0x70) != 0)
            {
              float v26 = -1.0;
              goto LABEL_51;
            }
LABEL_44:
            float v26 = 709.0;
            switch(v70)
            {
              case 142:
              case 143:
              case 147:
              case 149:
              case 150:
              case 154:
                float v27 = -1.0;
                float v28 = 1.0;
                uint64_t v47 = v24;
                uint64_t v48 = 4;
                uint64_t v49 = 2;
                goto LABEL_113;
              case 144:
              case 145:
              case 146:
                float v26 = 1.0;
                goto LABEL_88;
              case 148:
              case 151:
              case 152:
              case 153:
              case 155:
              case 156:
              case 157:
              case 158:
              case 159:
              case 163:
              case 164:
              case 165:
              case 166:
              case 167:
              case 168:
              case 169:
              case 170:
              case 171:
              case 172:
              case 173:
              case 174:
              case 175:
              case 176:
              case 177:
              case 178:
              case 179:
              case 180:
              case 181:
              case 182:
              case 183:
              case 184:
              case 185:
              case 186:
              case 187:
              case 194:
              case 195:
              case 196:
              case 197:
              case 198:
              case 199:
              case 200:
              case 201:
              case 202:
                goto LABEL_131;
              case 160:
              case 161:
              case 162:
                float v27 = -1.0;
                float v28 = 1.0;
                uint64_t v47 = v24;
                uint64_t v48 = 5;
                uint64_t v49 = 3;
                goto LABEL_113;
              case 188:
              case 189:
              case 193:
                goto LABEL_83;
              case 190:
              case 191:
              case 192:
              case 203:
              case 204:
              case 205:
              case 206:
              case 207:
              case 208:
              case 209:
              case 210:
              case 211:
                goto LABEL_45;
              case 212:
                goto LABEL_102;
              case 213:
                float v26 = 88.0;
                goto LABEL_102;
              case 214:
                float v26 = 11356.0;
LABEL_102:
                int v29 = v24;
                uint64_t v30 = 2;
                goto LABEL_103;
              default:
                if ((v70 - 384) > 0xB) {
                  goto LABEL_131;
                }
                int v31 = 1 << (v70 + 0x80);
                if ((v31 & 0x1C) != 0)
                {
LABEL_45:
                  if (v70 <= 385)
                  {
                    float v27 = 710.0;
                    float v28 = -710.0;
                    switch(v70)
                    {
                      case 191:
                        goto LABEL_92;
                      case 192:
                        goto LABEL_91;
                      case 193:
                      case 194:
                      case 195:
                      case 196:
                      case 197:
                      case 198:
                      case 199:
                      case 200:
                      case 201:
                      case 202:
                        __break(1u);
                        JUMPOUT(0x1CD183C40);
                      case 203:
                        float v27 = 709.0;
                        float v28 = -745.0;
                        goto LABEL_112;
                      case 204:
                        float v27 = 308.0;
                        float v28 = -323.0;
                        goto LABEL_112;
                      case 205:
                        float v28 = -45.0;
                        int v52 = 1108869120;
                        goto LABEL_111;
                      case 206:
                        float v27 = 4932.0;
                        float v28 = -4950.0;
                        goto LABEL_112;
                      case 207:
                        float v27 = 1023.0;
                        float v28 = -1074.0;
                        goto LABEL_112;
                      case 208:
                        float v28 = -149.0;
                        int v52 = 1123942400;
                        goto LABEL_111;
                      case 209:
                        float v27 = 11383.0;
                        float v28 = -16445.0;
                        goto LABEL_112;
                      case 210:
                        float v28 = -103.0;
                        int v52 = 1118830592;
                        goto LABEL_111;
                      case 211:
                        float v27 = 11356.0;
                        float v28 = -11399.0;
                        goto LABEL_112;
                      default:
                        goto LABEL_112;
                    }
                  }
                  float v27 = 710.0;
                  float v28 = -710.0;
                  if (v70 != 386)
                  {
                    if (v70 == 388)
                    {
LABEL_91:
                      float v27 = 11357.0;
                      float v28 = -11357.0;
                    }
                    else
                    {
LABEL_92:
                      float v28 = -89.0;
                      int v52 = 1118961664;
LABEL_111:
                      float v27 = *(float *)&v52;
                    }
                  }
LABEL_112:
                  uint64_t v47 = v24;
                  uint64_t v48 = 2;
                  uint64_t v49 = 4;
LABEL_113:
                  unint64_t v56 = sub_1CD18422C(v47, v48, v49, v27, v28);
                  goto LABEL_114;
                }
                if ((v31 & 0x23) != 0)
                {
LABEL_83:
                  float v27 = INFINITY;
                  float v28 = -INFINITY;
                  uint64_t v47 = v24;
                  uint64_t v48 = 1;
                  uint64_t v49 = 1;
                  goto LABEL_113;
                }
                if ((v31 & 0xE00) != 0)
                {
                  float v26 = 0.0;
LABEL_88:
                  int v29 = v24;
                  uint64_t v30 = 4;
LABEL_103:
                  unint64_t v56 = sub_1CD184454(v29, v30, v26);
LABEL_114:
                  int v42 = v56;
LABEL_115:
                  unint64_t v82 = (uint64_t *)**v24;
                  v88[0] = (void *)0x7D000000001;
                  llvm::MDBuilder::createBranchWeights(&v82, (uint64_t)v88, 2);
                  sub_1CD1290BC((uint64_t)v42, (uint64_t)v24);
                }
                return result;
            }
            goto LABEL_131;
          }
          uint64_t v32 = 0;
          uint64_t v33 = (uint64_t *)&v24[-4 * (*((_DWORD *)v24 + 5) & 0x7FFFFFF)];
          uint64_t v34 = *v33;
          uint64_t v35 = (llvm::Constant **)v33[4];
          uint64_t v36 = **v24;
          v88[0] = v89;
          v88[1] = (void *)0x200000000;
          uint64_t v92 = v36;
          uint64_t v93 = &v101;
          uint64_t v94 = v102;
          uint64_t v95 = 0;
          int v96 = 0;
          __int16 v97 = 512;
          char v98 = 7;
          uint64_t v90 = 0;
          int v91 = 0;
          uint64_t v99 = 0;
          uint64_t v100 = 0;
          uint64_t v101 = &unk_1F2616E88;
          v102[0] = &unk_1F2617008;
          uint64_t v90 = v24[5];
          int v91 = v24 + 3;
          int v37 = (unsigned __int8 *)v24[6];
          unsigned int v71 = v37;
          if (v37)
          {
            llvm::MetadataTracking::track((uint64_t)&v71, v37, 2);
            uint64_t v32 = (uint64_t)v71;
          }
          sub_1CB8461A4((uint64_t)v88, 0, v32);
          if (v71)
          {
            int v65 = *v71;
            if ((v65 - 4) > 0x1E)
            {
              if ((v65 - 3) >= 0xFFFFFFFE) {
                int v68 = v71;
              }
              else {
                int v68 = 0;
              }
              if ((v65 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v67 = (unint64_t)(v68 + 8);
LABEL_144:
                unint64_t v82 = (uint64_t *)&v71;
                sub_1CC5FA668(v67 + 16, &v82);
                goto LABEL_60;
              }
              if (v65 == 3) {
                *((void *)v71 + 1) = 0;
              }
            }
            else if ((v71[1] & 0x7F) == 2 || *((_DWORD *)v71 + 3))
            {
              uint64_t v66 = *((void *)v71 + 2);
              if ((v66 & 4) != 0)
              {
                unint64_t v67 = v66 & 0xFFFFFFFFFFFFFFF8;
                if (v67) {
                  goto LABEL_144;
                }
              }
            }
          }
LABEL_60:
          unsigned int v38 = *(unsigned __int8 *)(v34 + 16);
          BOOL v39 = v38 != 17 || v34 == 0;
          if (v39)
          {
            if (v38 < 0x1C || v34 == 0 || v38 - 73 < 0xFFFFFFFE)
            {
              int v42 = 0;
              goto LABEL_129;
            }
            int v50 = *(_DWORD *)(v34 + 20);
            if ((v50 & 0x40000000) != 0) {
              uint64_t v51 = *(llvm::Type ****)(v34 - 8);
            }
            else {
              uint64_t v51 = (llvm::Type ***)(v34 - 32 * (v50 & 0x7FFFFFF));
            }
            int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(**v51);
            if (v53 == 1) {
            switch(PrimitiveSizeInBits)
            }
            {
              case 8:
                uint64_t v55 = 1124073472;
                break;
              case 32:
                uint64_t v55 = 1107296256;
                break;
              case 16:
                uint64_t v55 = 1115684864;
                break;
              default:
                int v42 = 0;
                goto LABEL_129;
            }
            int v57 = (llvm::ConstantFP *)**v24;
            int v76 = 32;
            uint64_t v75 = v55;
            llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v71, (const llvm::APInt **)&v75);
            int v83 = v71;
            uint64_t v84 = v72;
            int v85 = v73;
            char v86 = v86 & 0xF0 | v74 & 0xF;
            unsigned int v59 = llvm::ConstantFP::get(v57, (llvm::LLVMContext *)&v82, v58);
            if (v83 == (unsigned __int8 *)&unk_1CFB2E344)
            {
              sub_1CB845718(&v84);
            }
            else if ((*((_DWORD *)v83 + 2) - 64) <= 0xFFFFFF7F && v84)
            {
              MEMORY[0x1D25D9CB0](v84, 0x1000C8000313F17);
            }
            unint64_t v60 = (llvm::ConstantFP *)**v24;
            int v76 = 32;
            uint64_t v75 = 0;
            llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v71, (const llvm::APInt **)&v75);
            int v83 = v71;
            uint64_t v84 = v72;
            int v85 = v73;
            char v86 = v86 & 0xF0 | v74 & 0xF;
            uint64_t v62 = llvm::ConstantFP::get(v60, (llvm::LLVMContext *)&v82, v61);
            if (v83 == (unsigned __int8 *)&unk_1CFB2E344)
            {
              sub_1CB845718(&v84);
            }
            else if ((*((_DWORD *)v83 + 2) - 64) <= 0xFFFFFF7F && v84)
            {
              MEMORY[0x1D25D9CB0](v84, 0x1000C8000313F17);
            }
            if (*((unsigned char *)*v35 + 8) != 2) {
              unsigned int v59 = sub_1CC56C0C0((llvm *)0x2E, v59, *v35, 0);
            }
            if (*(unsigned char *)(*(void *)v34 + 8) != 2) {
              uint64_t v62 = sub_1CC56C0C0((llvm *)0x2E, v62, *v35, 0);
            }
            __int16 v87 = 257;
            FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)v88, 2, (uint64_t)v35, (uint64_t)v59, (uint64_t)&v82, 0, 0);
            __int16 v87 = 257;
            uint64_t v64 = llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)v88, 5, v34, (uint64_t)v62, (uint64_t)&v82, 0, 0);
            __int16 v87 = 257;
            int v42 = sub_1CB844AF4((uint64_t)v88, v64, (uint64_t)FCmpHelper, (uint64_t)&v82);
          }
          else
          {
            double v43 = llvm::APFloat::convertToDouble((llvm::APFloat *)(v34 + 24));
            int v42 = 0;
            if (v43 >= 1.0 && v43 <= 255.0)
            {
              uint64_t v44 = (llvm::ConstantFP *)**v24;
              int v76 = 32;
              uint64_t v75 = 1123942400;
              llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v71, (const llvm::APInt **)&v75);
              int v83 = v71;
              uint64_t v84 = v72;
              int v85 = v73;
              char v86 = v86 & 0xF0 | v74 & 0xF;
              uint64_t v46 = llvm::ConstantFP::get(v44, (llvm::LLVMContext *)&v82, v45);
              if (v83 == (unsigned __int8 *)&unk_1CFB2E344)
              {
                sub_1CB845718(&v84);
              }
              else if ((*((_DWORD *)v83 + 2) - 64) <= 0xFFFFFF7F && v84)
              {
                MEMORY[0x1D25D9CB0](v84, 0x1000C8000313F17);
              }
              if (*((unsigned char *)*v35 + 8) != 2) {
                uint64_t v46 = sub_1CC56C0C0((llvm *)0x2E, v46, *v35, 0);
              }
              __int16 v87 = 257;
              int v42 = llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)v88, 2, (uint64_t)v35, (uint64_t)v46, (uint64_t)&v82, 0, 0);
            }
          }
LABEL_129:
          if (v88[0] == v89)
          {
            if (v42) {
              goto LABEL_115;
            }
          }
          else
          {
            free(v88[0]);
            if (v42) {
              goto LABEL_115;
            }
          }
LABEL_131:
          if (++v22 == v23)
          {
            unsigned int v22 = (uint64_t ***)v79;
            break;
          }
        }
      }
      if (v22 != (uint64_t ***)v81) {
        free(v22);
      }
    }
  }
  return 0;
}

void sub_1CD183DBC()
{
}

void sub_1CD183DFC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD183E34(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 112;
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, v3, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
}

void sub_1CD183EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(char **)v4 != llvm::TargetLibraryInfoWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v6 + 96))(v6, llvm::TargetLibraryInfoWrapperPass::ID);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v8 = v7 + 32;
  if (!*(unsigned char *)(v7 + 232))
  {
    uint64_t v9 = *(void *)(a2 + 40) + 216;
    __int16 v21 = 260;
    v20[0] = v9;
    llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v20);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    int v33 = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    *(void *)&long long v10 = -1;
    *((void *)&v10 + 1) = -1;
    *(_OWORD *)__src = v10;
    long long v25 = v10;
    long long v26 = v10;
    long long v27 = v10;
    long long v28 = v10;
    long long v29 = v10;
    *(_OWORD *)uint64_t v30 = v10;
    *(void *)&v30[13] = -1;
    sub_1CC153974((uint64_t)__src, (int *)__p);
    sub_1CD4D04B8(v8, (uint64_t)__src);
    sub_1CD4CFA4C((uint64_t *)__src);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_1CC1569E8(__src, v8);
}

llvm::Instruction *sub_1CD18422C(uint64_t **a1, uint64_t a2, uint64_t a3, float a4, float a5)
{
  uint64_t v10 = 0;
  v33[1] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = **a1;
  v25[0] = v26;
  v25[1] = (void *)0x200000000;
  v26[6] = v11;
  v26[7] = &v32;
  v26[8] = v33;
  v26[9] = 0;
  int v27 = 0;
  __int16 v28 = 512;
  char v29 = 7;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = &unk_1F2616E88;
  v33[0] = &unk_1F2617008;
  uint64_t v12 = (unsigned __int8 *)a1[6];
  v26[4] = a1[5];
  v26[5] = a1 + 3;
  int v24 = v12;
  if (v12)
  {
    llvm::MetadataTracking::track((uint64_t)&v24, v12, 2);
    uint64_t v10 = (uint64_t)v24;
  }
  sub_1CB8461A4((uint64_t)v25, 0, v10);
  if (v24)
  {
    int v18 = *v24;
    if ((v18 - 4) > 0x1E)
    {
      if ((v18 - 3) >= 0xFFFFFFFE) {
        __int16 v21 = v24;
      }
      else {
        __int16 v21 = 0;
      }
      if ((v18 - 3) < 0xFFFFFFFE)
      {
        if (v18 == 3) {
          *((void *)v24 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v20 = (unint64_t)(v21 + 8);
    }
    else
    {
      if ((v24[1] & 0x7F) != 2 && !*((_DWORD *)v24 + 3)) {
        goto LABEL_4;
      }
      uint64_t v19 = *((void *)v24 + 2);
      if ((v19 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v20 = v19 & 0xFFFFFFFFFFFFFFF8;
      if (!v20) {
        goto LABEL_4;
      }
    }
    v22[0] = &v24;
    sub_1CC5FA668(v20 + 16, v22);
  }
LABEL_4:
  int v13 = (llvm::Constant **)a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
  uint64_t v14 = sub_1CD184634((uint64_t)v25, v13, a3, a5);
  uint64_t v15 = sub_1CD184634((uint64_t)v25, v13, a2, a4);
  __int16 v23 = 257;
  int v16 = sub_1CB844AF4((uint64_t)v25, v15, (uint64_t)v14, (uint64_t)v22);
  if (v25[0] != v26) {
    free(v25[0]);
  }
  return v16;
}

llvm::Instruction *sub_1CD184454(uint64_t **a1, uint64_t a2, float a3)
{
  uint64_t v6 = 0;
  v25[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = **a1;
  v17[0] = v18;
  v17[1] = (void *)0x200000000;
  v18[6] = v7;
  v18[7] = &v24;
  v18[8] = v25;
  v18[9] = 0;
  int v19 = 0;
  __int16 v20 = 512;
  char v21 = 7;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  int v24 = &unk_1F2616E88;
  v25[0] = &unk_1F2617008;
  uint64_t v8 = (unsigned __int8 *)a1[6];
  void v18[4] = a1[5];
  v18[5] = a1 + 3;
  uint64_t v15 = v8;
  if (v8)
  {
    llvm::MetadataTracking::track((uint64_t)&v15, v8, 2);
    uint64_t v6 = (uint64_t)v15;
  }
  sub_1CB8461A4((uint64_t)v17, 0, v6);
  if (v15)
  {
    int v11 = *v15;
    if ((v11 - 4) > 0x1E)
    {
      if ((v11 - 3) >= 0xFFFFFFFE) {
        uint64_t v14 = v15;
      }
      else {
        uint64_t v14 = 0;
      }
      if ((v11 - 3) < 0xFFFFFFFE)
      {
        if (v11 == 3) {
          *((void *)v15 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v13 = (unint64_t)(v14 + 8);
    }
    else
    {
      if ((v15[1] & 0x7F) != 2 && !*((_DWORD *)v15 + 3)) {
        goto LABEL_4;
      }
      uint64_t v12 = *((void *)v15 + 2);
      if ((v12 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFF8;
      if (!v13) {
        goto LABEL_4;
      }
    }
    int v16 = &v15;
    sub_1CC5FA668(v13 + 16, &v16);
  }
LABEL_4:
  uint64_t v9 = sub_1CD184634((uint64_t)v17, (llvm::Constant **)a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)], a2, a3);
  if (v17[0] != v18) {
    free(v17[0]);
  }
  return v9;
}

llvm::Instruction *sub_1CD184634(uint64_t a1, llvm::Constant **a2, uint64_t a3, float a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(llvm::ConstantFP **)(a1 + 64);
  LODWORD(v16) = 32;
  uint64_t v15 = (const llvm::APInt *)LODWORD(a4);
  llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)v12, &v15);
  uint64_t v16 = v12[0];
  uint64_t v17 = v12[1];
  int v18 = v13;
  char v19 = v14 & 0xF;
  uint64_t v9 = llvm::ConstantFP::get(v7, (llvm::LLVMContext *)&v15, v8);
  if ((_UNKNOWN *)v16 == &unk_1CFB2E344)
  {
    int v11 = v9;
    sub_1CB845718(&v17);
LABEL_9:
    uint64_t v9 = v11;
    goto LABEL_3;
  }
  if ((*(_DWORD *)(v16 + 8) - 64) <= 0xFFFFFF7F && v17)
  {
    int v11 = v9;
    MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
    goto LABEL_9;
  }
LABEL_3:
  if (*((unsigned char *)*a2 + 8) != 2) {
    uint64_t v9 = sub_1CC56C0C0((llvm *)0x2E, v9, *a2, 0);
  }
  __int16 v20 = 257;
  return llvm::IRBuilderBase::CreateFCmpHelper(a1, a3, (uint64_t)a2, (uint64_t)v9, (uint64_t)&v15, 0, 0);
}

uint64_t llvm::ConstantFoldTerminator(llvm::BasicBlock *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v211[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (void *)*((void *)a1 + 5);
  if (v5 == (void *)((char *)a1 + 40))
  {
    uint64_t v7 = 0;
  }
  else
  {
    if (v5) {
      uint64_t v6 = (uint64_t ***)(v5 - 3);
    }
    else {
      uint64_t v6 = 0;
    }
    if (*((unsigned __int8 *)v6 + 16) - 29 >= 0xB) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v6;
    }
  }
  uint64_t v8 = 0;
  uint64_t v9 = **v7;
  uint64_t v10 = v204;
  v203[0] = v204;
  v203[1] = (void *)0x200000000;
  v204[6] = v9;
  v204[7] = &v210;
  v204[8] = v211;
  v204[9] = 0;
  int v205 = 0;
  __int16 v206 = 512;
  char v207 = 7;
  uint64_t v208 = 0;
  uint64_t v209 = 0;
  uint64_t v210 = &unk_1F2616E88;
  v211[0] = &unk_1F2617008;
  v204[4] = v7[5];
  v204[5] = v7 + 3;
  int v11 = v7[6];
  std::string __p = v11;
  if (v11)
  {
    llvm::MetadataTracking::track((uint64_t)&__p, (unsigned __int8 *)v11, 2);
    uint64_t v8 = __p;
  }
  sub_1CB8461A4((uint64_t)v203, 0, (uint64_t)v8);
  if (__p)
  {
    int v104 = *(unsigned __int8 *)__p;
    if ((v104 - 4) > 0x1E)
    {
      if ((v104 - 3) >= 0xFFFFFFFE) {
        uint64_t v164 = __p;
      }
      else {
        uint64_t v164 = 0;
      }
      if ((v104 - 3) < 0xFFFFFFFE)
      {
        if (v104 == 3) {
          *((void *)__p + 1) = 0;
        }
        goto LABEL_12;
      }
      unint64_t v106 = (unint64_t)v164 + 8;
    }
    else
    {
      if ((*((unsigned char *)__p + 1) & 0x7F) != 2 && !*((_DWORD *)__p + 3)) {
        goto LABEL_12;
      }
      uint64_t v105 = *((void *)__p + 2);
      if ((v105 & 4) == 0) {
        goto LABEL_12;
      }
      unint64_t v106 = v105 & 0xFFFFFFFFFFFFFFF8;
      if (!v106) {
        goto LABEL_12;
      }
    }
    p_p = &__p;
    sub_1CC5FA668(v106 + 16, &p_p);
  }
LABEL_12:
  int v12 = *((unsigned __int8 *)v7 + 16);
  if (v12 == 32)
  {
    int v16 = *((_DWORD *)v7 + 5);
    if ((v16 & 0x40000000) != 0) {
      uint64_t v17 = (llvm::Value **)*(v7 - 1);
    }
    else {
      uint64_t v17 = (llvm::Value **)&v7[-4 * (v16 & 0x7FFFFFF)];
    }
    int v24 = llvm::Value::stripPointerCasts(*v17);
    char v13 = 0;
    if (!v24 || *((unsigned char *)v24 + 16) != 4) {
      goto LABEL_291;
    }
    long long v25 = (llvm::Type *)*((void *)v24 - 4);
    p_p = v202;
    uint64_t v199 = (uint64_t)v202;
    uint64_t v200 = 8;
    int v201 = 0;
    long long v26 = (char *)operator new(0x60uLL);
    *((_DWORD *)v26 + 13) = *((_DWORD *)v26 + 13) & 0x38000000 | 1;
    *(void *)long long v26 = 0;
    *((void *)v26 + 2) = 0;
    *((void *)v26 + 1) = 0;
    *((void *)v26 + 4) = ***(void ***)v25 + 1576;
    *((void *)v26 + 3) = v26 + 32;
    *((void *)v26 + 5) = 0;
    v26[48] = 30;
    v26[49] = 0;
    *((_WORD *)v26 + 25) = 0;
    *((_DWORD *)v26 + 13) = 1;
    *(_OWORD *)(v26 + 56) = 0u;
    *(_OWORD *)(v26 + 72) = 0u;
    *((_DWORD *)v26 + 22) = 0;
    *(void *)long long v26 = v25;
    int v27 = (void *)((char *)v25 + 8);
    uint64_t v28 = *((void *)v25 + 1);
    *((void *)v26 + 1) = v28;
    if (v28) {
      *(void *)(v28 + 16) = v26 + 8;
    }
    *((void *)v26 + 2) = v27;
    *int v27 = v26;
    __int16 v197 = 257;
    sub_1CB844E0C((uint64_t *)v203, (llvm::Instruction *)(v26 + 32), (uint64_t)&__p);
    int v29 = *((_DWORD *)v7 + 5);
    uint64_t v30 = (v29 & 0x7FFFFFFu) - 1;
    if ((v29 & 0x7FFFFFF) == 1) {
LABEL_162:
    }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    uint64_t v31 = 0;
    uint64_t v32 = v25;
    while (1)
    {
      int v33 = *((_DWORD *)v7 + 5);
      if ((v33 & 0x40000000) != 0) {
        long long v34 = (uint64_t ***)*(v7 - 1);
      }
      else {
        long long v34 = &v7[-4 * (v33 & 0x7FFFFFF)];
      }
      ++v31;
      long long v35 = (llvm::Type *)v34[4 * v31];
      if (a4 && v35 != v25)
      {
        uint64_t v36 = v199;
        uint64_t v37 = HIDWORD(v200);
        if ((void *)v199 != p_p)
        {
          unsigned int v41 = v200;
LABEL_52:
          if (3 * v41 <= 4 * (HIDWORD(v200) - v201))
          {
            if (v41 >= 0x40) {
              v41 *= 2;
            }
            else {
              unsigned int v41 = 128;
            }
          }
          else if (v41 - HIDWORD(v200) >= v41 >> 3)
          {
            goto LABEL_54;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&p_p, v41);
          unsigned int v41 = v200;
          uint64_t v36 = v199;
LABEL_54:
          unsigned int v42 = v41 - 1;
          unsigned int v43 = (v41 - 1) & ((v35 >> 4) ^ (v35 >> 9));
          uint64_t v44 = (llvm::Type **)(v36 + 8 * v43);
          unsigned int v45 = *v44;
          if (*v44 == (llvm::Type *)-1)
          {
            uint64_t v46 = 0;
LABEL_66:
            if (v46) {
              int v50 = v46;
            }
            else {
              int v50 = v44;
            }
            if (*v50 != v35)
            {
              if (*v50 == (llvm::Type *)-2) {
                --v201;
              }
              else {
                ++HIDWORD(v200);
              }
              const llvm::APInt *v50 = v35;
            }
          }
          else
          {
            uint64_t v46 = 0;
            int v47 = 1;
            while (v45 != v35)
            {
              if (v46) {
                BOOL v48 = 0;
              }
              else {
                BOOL v48 = v45 == (llvm::Type *)-2;
              }
              if (v48) {
                uint64_t v46 = v44;
              }
              unsigned int v49 = v43 + v47++;
              unsigned int v43 = v49 & v42;
              uint64_t v44 = (llvm::Type **)(v36 + 8 * (v49 & v42));
              unsigned int v45 = *v44;
              if (*v44 == (llvm::Type *)-1) {
                goto LABEL_66;
              }
            }
          }
          goto LABEL_73;
        }
        if (!HIDWORD(v200)) {
          goto LABEL_49;
        }
        unsigned int v38 = 0;
        uint64_t v39 = 8 * HIDWORD(v200);
        unsigned int v40 = (llvm::Type **)v199;
        do
        {
          if (*v40 == v35) {
            goto LABEL_73;
          }
          if (*v40 == (llvm::Type *)-2) {
            unsigned int v38 = v40;
          }
          ++v40;
          v39 -= 8;
        }
        while (v39);
        if (v38)
        {
          *unsigned int v38 = v35;
          --v201;
        }
        else
        {
LABEL_49:
          unsigned int v41 = v200;
          if (HIDWORD(v200) >= v200) {
            goto LABEL_52;
          }
          ++HIDWORD(v200);
          *(void *)(v199 + 8 * v37) = v35;
        }
      }
LABEL_73:
      int v51 = *((_DWORD *)v7 + 5);
      if ((v51 & 0x40000000) != 0) {
        int v52 = (uint64_t ***)*(v7 - 1);
      }
      else {
        int v52 = &v7[-4 * (v51 & 0x7FFFFFF)];
      }
      if (v52[4 * v31] == (uint64_t **)v32) {
        uint64_t v32 = 0;
      }
      else {
        llvm::BasicBlock::removePredecessor(v35, a1, 0);
      }
      if (v31 == v30) {
        goto LABEL_162;
      }
    }
  }
  if (v12 == 31)
  {
    int v14 = *((_DWORD *)v7 + 5);
    if ((v14 & 0x40000000) != 0) {
      uint64_t v15 = (uint64_t ***)*(v7 - 1);
    }
    else {
      uint64_t v15 = &v7[-4 * (v14 & 0x7FFFFFF)];
    }
    if (*((unsigned char *)*v15 + 16) == 16) {
      int v18 = *v15;
    }
    else {
      int v18 = 0;
    }
    char v19 = (llvm::BasicBlock *)v15[4];
    FirstNonPHIOrDbg = llvm::BasicBlock::getFirstNonPHIOrDbg(v19, 1);
    unsigned int v21 = *((_DWORD *)v7 + 5);
    uint64_t v22 = v19;
    if (FirstNonPHIOrDbg[16] == 35)
    {
      uint64_t v22 = v19;
      if ((v21 & 0x7FFFFFE) != 2)
      {
        if ((v21 & 0x40000000) != 0) {
          uint64_t v23 = (uint64_t ***)*(v7 - 1);
        }
        else {
          uint64_t v23 = &v7[-4 * (v21 & 0x7FFFFFF)];
        }
        uint64_t v22 = (llvm::BasicBlock *)v23[12];
      }
    }
    char v13 = 0;
    uint64_t v62 = ((v21 >> 1) & 0x3FFFFFF) - 1;
    if (((v21 >> 1) & 0x3FFFFFF) == 1) {
      goto LABEL_176;
    }
    uint64_t v63 = 0;
    uint64_t v64 = (uint64_t)v7;
    unsigned int v193 = (v7 >> 4) ^ (v7 >> 9);
    while (2)
    {
      int v65 = *(_DWORD *)(v64 + 20);
      int v66 = 2 * v63;
      while (1)
      {
        if ((v65 & 0x40000000) != 0)
        {
          uint64_t v68 = *(void *)(v64 - 8);
          int v67 = v66;
          if (*(uint64_t ***)(v68 + 32 * ((v66 + 2) & 0xFFFFFFFE)) == v18) {
            goto LABEL_173;
          }
        }
        else
        {
          if (*(uint64_t ***)(v64 - 32 * (v65 & 0x7FFFFFF) + 32 * ((v66 + 2) & 0xFFFFFFFE)) == v18)
          {
            uint64_t v68 = v64 - 32 * (v65 & 0x7FFFFFF);
LABEL_173:
            uint64_t v111 = (v66 + 3);
            if (v63 == -2) {
              uint64_t v111 = 1;
            }
            uint64_t v22 = *(llvm::BasicBlock **)(v68 + 32 * v111);
            goto LABEL_176;
          }
          int v67 = 2 * v63;
          uint64_t v68 = v64 - 32 * (v65 & 0x7FFFFFF);
        }
        uint64_t v69 = (v67 + 3);
        if (v63 == -2) {
          uint64_t v69 = 1;
        }
        uint64_t v70 = 32 * v69;
        if (*(llvm::BasicBlock **)(v68 + v70) == v19) {
          break;
        }
        uint64_t v71 = v64 - 32 * (v65 & 0x7FFFFFF);
        if ((v65 & 0x40000000) != 0) {
          uint64_t v71 = *(void *)(v64 - 8);
        }
        if (*(llvm::BasicBlock **)(v71 + v70) != v22) {
          uint64_t v22 = 0;
        }
        ++v63;
        v66 += 2;
        if (v62 == v63) {
          goto LABEL_176;
        }
      }
      if (!v7[6] && (v21 & 0x20000000) == 0)
      {
LABEL_144:
        llvm::BasicBlock::removePredecessor(v19, (llvm::BasicBlock *)v7[5], 0);
        uint64_t v64 = llvm::SwitchInst::removeCase((uint64_t)v7, v64, v63);
        uint64_t v63 = v92;
        unsigned int v21 = *((_DWORD *)v7 + 5);
        uint64_t v62 = ((v21 >> 1) & 0x3FFFFFF) - 1;
        char v13 = 1;
        if (v92 != v62) {
          continue;
        }
LABEL_176:
        if (v18 && !v22)
        {
          if ((v21 & 0x40000000) != 0) {
            uint64_t v112 = (uint64_t ***)*(v7 - 1);
          }
          else {
            uint64_t v112 = &v7[-4 * (v21 & 0x7FFFFFF)];
          }
          uint64_t v22 = (llvm::BasicBlock *)v112[4];
        }
        if (v22)
        {
          int v113 = (char *)operator new(0x60uLL);
          *((_DWORD *)v113 + 13) = *((_DWORD *)v113 + 13) & 0x38000000 | 1;
          *(void *)int v113 = 0;
          *((void *)v113 + 2) = 0;
          *((void *)v113 + 1) = 0;
          *((void *)v113 + 4) = ***(void ***)v22 + 1576;
          *((void *)v113 + 3) = v113 + 32;
          *((void *)v113 + 5) = 0;
          v113[48] = 30;
          v113[49] = 0;
          *((_WORD *)v113 + 25) = 0;
          *((_DWORD *)v113 + 13) = 1;
          *(_OWORD *)(v113 + 56) = 0u;
          *(_OWORD *)(v113 + 72) = 0u;
          *((_DWORD *)v113 + 22) = 0;
          *(void *)int v113 = v22;
          uint64_t v114 = (void *)((char *)v22 + 8);
          uint64_t v115 = *((void *)v22 + 1);
          *((void *)v113 + 1) = v115;
          if (v115) {
            *(void *)(v115 + 16) = v113 + 8;
          }
          *((void *)v113 + 2) = v114;
          void *v114 = v113;
          v202[0] = 257;
          sub_1CB844E0C((uint64_t *)v203, (llvm::Instruction *)(v113 + 32), (uint64_t)&p_p);
          uint64_t v116 = (llvm::BasicBlock *)v7[5];
          p_p = v202;
          uint64_t v199 = (uint64_t)v202;
          uint64_t v200 = 8;
          int v201 = 0;
          if (*((unsigned char *)v7 + 16) != 30)
          {
            int v117 = 2;
            switch(*((unsigned char *)v7 + 16))
            {
              case 0x1E:
                __break(1u);
                goto LABEL_323;
              case 0x1F:
                int v117 = (*((_DWORD *)v7 + 5) >> 1) & 0x3FFFFFF;
                goto LABEL_295;
              case 0x20:
              case 0x26:
LABEL_323:
                int v117 = (*((_DWORD *)v7 + 5) & 0x7FFFFFF) - 1;
                goto LABEL_295;
              case 0x21:
                goto LABEL_189;
              case 0x24:
                int v117 = *((_WORD *)v7 + 9) & 1;
                goto LABEL_295;
              case 0x25:
                int v117 = 1;
                goto LABEL_189;
              case 0x27:
                int v117 = *((_DWORD *)v7 + 20) + 1;
LABEL_295:
                if (!v117) {
                  goto LABEL_267;
                }
                goto LABEL_189;
              default:
                goto LABEL_267;
            }
          }
          if ((*((_DWORD *)v7 + 5) & 0x7FFFFFF) == 3) {
            int v117 = 2;
          }
          else {
            int v117 = 1;
          }
LABEL_189:
          unsigned int v118 = 0;
          uint64_t v119 = v22;
          while (1)
          {
            uint64_t Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v7, v118);
            int v121 = (llvm::Type *)Successor;
            if (!a4 || (llvm::BasicBlock *)Successor == v22) {
              goto LABEL_224;
            }
            uint64_t v122 = v199;
            uint64_t v123 = HIDWORD(v200);
            if ((void *)v199 == p_p)
            {
              if (HIDWORD(v200))
              {
                unint64_t v124 = 0;
                uint64_t v125 = 8 * HIDWORD(v200);
                int64_t v126 = (uint64_t *)v199;
                do
                {
                  if (*v126 == Successor) {
                    goto LABEL_224;
                  }
                  if (*v126 == -2) {
                    unint64_t v124 = v126;
                  }
                  ++v126;
                  v125 -= 8;
                }
                while (v125);
                if (v124)
                {
                  *unint64_t v124 = Successor;
                  --v201;
                  goto LABEL_224;
                }
              }
              unsigned int v127 = v200;
              if (HIDWORD(v200) < v200)
              {
                ++HIDWORD(v200);
                *(void *)(v199 + 8 * v123) = Successor;
                goto LABEL_224;
              }
            }
            else
            {
              unsigned int v127 = v200;
            }
            if (3 * v127 <= 4 * (HIDWORD(v200) - v201))
            {
              if (v127 >= 0x40) {
                v127 *= 2;
              }
              else {
                unsigned int v127 = 128;
              }
            }
            else if (v127 - HIDWORD(v200) >= v127 >> 3)
            {
              goto LABEL_205;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&p_p, v127);
            unsigned int v127 = v200;
            uint64_t v122 = v199;
LABEL_205:
            unsigned int v128 = v127 - 1;
            unsigned int v129 = (v127 - 1) & ((v121 >> 4) ^ (v121 >> 9));
            unsigned int v130 = (llvm::Type **)(v122 + 8 * v129);
            __int16 v131 = *v130;
            if (*v130 == (llvm::Type *)-1)
            {
              int v132 = 0;
LABEL_217:
              if (v132) {
                int v136 = v132;
              }
              else {
                int v136 = v130;
              }
              if (*v136 != v121)
              {
                if (*v136 == (llvm::Type *)-2) {
                  --v201;
                }
                else {
                  ++HIDWORD(v200);
                }
                unsigned __int8 *v136 = v121;
              }
            }
            else
            {
              int v132 = 0;
              int v133 = 1;
              while (v131 != v121)
              {
                if (v132) {
                  BOOL v134 = 0;
                }
                else {
                  BOOL v134 = v131 == (llvm::Type *)-2;
                }
                if (v134) {
                  int v132 = v130;
                }
                unsigned int v135 = v129 + v133++;
                unsigned int v129 = v135 & v128;
                unsigned int v130 = (llvm::Type **)(v122 + 8 * (v135 & v128));
                __int16 v131 = *v130;
                if (*v130 == (llvm::Type *)-1) {
                  goto LABEL_217;
                }
              }
            }
LABEL_224:
            if (v121 == v119) {
              uint64_t v119 = 0;
            }
            else {
              llvm::BasicBlock::removePredecessor(v121, v116, 0);
            }
            if (v117 == ++v118) {
LABEL_267:
            }
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
        }
        if ((v21 & 0x7FFFFFE) != 4) {
          goto LABEL_291;
        }
        if ((v21 & 0x40000000) != 0) {
          uint64_t v137 = (uint64_t ***)*(v7 - 1);
        }
        else {
          uint64_t v137 = &v7[-4 * (v21 & 0x7FFFFFF)];
        }
        uint64_t v138 = *v137;
        uint64_t v139 = (uint64_t)v137[8];
        p_p = "cond";
        v202[0] = 259;
        uint64_t v140 = sub_1CB845F20((uint64_t)v203, 32, v138, v139, (uint64_t)&p_p);
        int v141 = *((_DWORD *)v7 + 5);
        if ((v141 & 0x40000000) != 0) {
          uint64_t v142 = (uint64_t ***)*(v7 - 1);
        }
        else {
          uint64_t v142 = &v7[-4 * (v141 & 0x7FFFFFF)];
        }
        int v143 = (llvm::BasicBlock *)v142[12];
        uint64_t v144 = (llvm::BasicBlock *)v142[4];
        uint64_t v145 = operator new(0xA0uLL);
        uint64_t v146 = 0;
        uint64_t v147 = (llvm::Instruction *)(v145 + 24);
        v145[29] = v145[29] & 0x38000000 | 3;
        do
        {
          uint64_t v148 = &v145[v146];
          *uint64_t v148 = 0;
          v148[1] = 0;
          v148[2] = 0;
          v148[3] = v147;
          v146 += 8;
        }
        while (v146 != 24);
        llvm::BranchInst::BranchInst((llvm::BranchInst *)(v145 + 24), v143, v144, v140, 0);
        v202[0] = 257;
        uint64_t v149 = (uint64_t ***)sub_1CB844E0C((uint64_t *)v203, v147, (uint64_t)&p_p);
        if ((*((unsigned char *)v7 + 23) & 0x20) == 0)
        {
LABEL_272:
          if ((*((unsigned char *)v7 + 23) & 0x20) == 0) {
            goto LABEL_290;
          }
          uint64_t v166 = ***v7;
          p_p = v7;
          int v167 = *(_DWORD *)(v166 + 2496);
          if (v167)
          {
            uint64_t v168 = *(void *)(v166 + 2480);
            int v169 = v167 - 1;
            unsigned int v170 = v169 & ((v7 >> 4) ^ (v7 >> 9));
            uint64_t v171 = (uint64_t ****)(v168 + 40 * v170);
            uint64_t v172 = *v171;
            if (*v171 == v7) {
              goto LABEL_283;
            }
            uint64_t v173 = 0;
            int v174 = 1;
            while (v172 != (uint64_t ***)-4096)
            {
              if (v173) {
                BOOL v175 = 0;
              }
              else {
                BOOL v175 = v172 == (uint64_t ***)-8192;
              }
              if (v175) {
                uint64_t v173 = v171;
              }
              unsigned int v176 = v170 + v174++;
              unsigned int v170 = v176 & v169;
              uint64_t v171 = (uint64_t ****)(v168 + 40 * v170);
              uint64_t v172 = *v171;
              if (*v171 == v7) {
                goto LABEL_283;
              }
            }
            if (v173) {
              int v183 = v173;
            }
            else {
              int v183 = v171;
            }
          }
          else
          {
            int v183 = 0;
          }
          uint64_t v171 = (uint64_t ****)sub_1CC609054(v166 + 2480, (uint64_t)&p_p, (uint64_t *)&p_p, v183);
          BOOL v184 = (uint64_t ***)p_p;
          v171[3] = 0;
          v171[4] = 0;
          *uint64_t v171 = v184;
          v171[1] = (uint64_t ***)(v171 + 3);
          v171[2] = (uint64_t ***)0x100000000;
LABEL_283:
          uint64_t v177 = *((unsigned int *)v171 + 4);
          if (v177)
          {
            int v178 = (llvm::MDNode **)(v171[1] + 1);
            uint64_t v179 = 16 * v177;
            while (*((_DWORD *)v178 - 2) != 14)
            {
              v178 += 2;
              v179 -= 16;
              if (!v179) {
                goto LABEL_290;
              }
            }
            if (*v178) {
              llvm::Value::setMetadata(v149, 14, *v178);
            }
          }
LABEL_290:
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        uint64_t v150 = ***v7;
        p_p = v7;
        int v151 = *(_DWORD *)(v150 + 2496);
        if (v151)
        {
          uint64_t v152 = *(void *)(v150 + 2480);
          int v153 = v151 - 1;
          unsigned int v154 = v153 & ((v7 >> 4) ^ (v7 >> 9));
          uint64_t v155 = (uint64_t ****)(v152 + 40 * v154);
          char v156 = *v155;
          if (*v155 == v7) {
            goto LABEL_255;
          }
          int v157 = 0;
          int v158 = 1;
          while (v156 != (uint64_t ***)-4096)
          {
            if (v157) {
              BOOL v159 = 0;
            }
            else {
              BOOL v159 = v156 == (uint64_t ***)-8192;
            }
            if (v159) {
              int v157 = v155;
            }
            unsigned int v160 = v154 + v158++;
            unsigned int v154 = v160 & v153;
            uint64_t v155 = (uint64_t ****)(v152 + 40 * v154);
            char v156 = *v155;
            if (*v155 == v7) {
              goto LABEL_255;
            }
          }
          if (v157) {
            uint64_t v181 = v157;
          }
          else {
            uint64_t v181 = v155;
          }
        }
        else
        {
          uint64_t v181 = 0;
        }
        uint64_t v155 = (uint64_t ****)sub_1CC609054(v150 + 2480, (uint64_t)&p_p, (uint64_t *)&p_p, v181);
        BOOL v182 = (uint64_t ***)p_p;
        v155[3] = 0;
        v155[4] = 0;
        *uint64_t v155 = v182;
        v155[1] = (uint64_t ***)(v155 + 3);
        v155[2] = (uint64_t ***)0x100000000;
LABEL_255:
        uint64_t v161 = *((unsigned int *)v155 + 4);
        if (v161)
        {
          uint64_t v162 = v155[1] + 1;
          uint64_t v163 = 16 * v161;
          while (*((_DWORD *)v162 - 2) != 2)
          {
            v162 += 2;
            v163 -= 16;
            if (!v163) {
              goto LABEL_272;
            }
          }
          uint64_t v165 = *v162;
          if (*v162 && *(_DWORD *)(v165 + 8) == 3)
          {
            uint64_t v185 = *(void *)(v165 - 8);
            if (*(unsigned char *)v185 == 1)
            {
              uint64_t v186 = *(void *)(v185 + 128);
              if (*(unsigned char *)(v186 + 16) != 16) {
                uint64_t v186 = 0;
              }
            }
            else
            {
              uint64_t v186 = 0;
            }
            uint64_t v187 = *(void *)(v165 - 16);
            if (*(unsigned char *)v187 == 1)
            {
              uint64_t v188 = *(void *)(v187 + 128);
              if (*(unsigned char *)(v188 + 16) != 16) {
                uint64_t v188 = 0;
              }
            }
            else
            {
              uint64_t v188 = 0;
            }
            std::string __p = **(void ***)a1;
            unsigned int v189 = (void *)(v186 + 24);
            if (*(_DWORD *)(v186 + 32) >= 0x41u) {
              unsigned int v189 = (void *)*v189;
            }
            unsigned int v190 = *(_DWORD *)v189;
            int v191 = (void *)(v188 + 24);
            if (*(_DWORD *)(v188 + 32) >= 0x41u) {
              int v191 = (void *)*v191;
            }
            p_p = (void *)__PAIR64__(*v191, v190);
            BranchWeights = llvm::MDBuilder::createBranchWeights((uint64_t **)&__p, (uint64_t)&p_p, 2);
            llvm::Instruction::setMetadata((llvm::Instruction *)v149, 2, BranchWeights);
          }
        }
        goto LABEL_272;
      }
      break;
    }
    if ((v21 & 0x20000000) == 0) {
      goto LABEL_138;
    }
    uint64_t v72 = ***v7;
    p_p = v7;
    int v73 = *(_DWORD *)(v72 + 2496);
    if (v73)
    {
      uint64_t v74 = *(void *)(v72 + 2480);
      int v75 = v73 - 1;
      unsigned int v76 = v75 & v193;
      int v77 = (uint64_t ****)(v74 + 40 * (v75 & v193));
      uint64_t v78 = *v77;
      if (*v77 == v7) {
        goto LABEL_133;
      }
      int v79 = 0;
      int v80 = 1;
      while (v78 != (uint64_t ***)-4096)
      {
        if (v79) {
          BOOL v81 = 0;
        }
        else {
          BOOL v81 = v78 == (uint64_t ***)-8192;
        }
        if (v81) {
          int v79 = v77;
        }
        unsigned int v82 = v76 + v80++;
        unsigned int v76 = v82 & v75;
        int v77 = (uint64_t ****)(v74 + 40 * v76);
        uint64_t v78 = *v77;
        if (*v77 == v7) {
          goto LABEL_133;
        }
      }
      if (v79) {
        uint64_t v93 = v79;
      }
      else {
        uint64_t v93 = v77;
      }
    }
    else
    {
      uint64_t v93 = 0;
    }
    int v77 = (uint64_t ****)sub_1CC609054(v72 + 2480, (uint64_t)&p_p, (uint64_t *)&p_p, v93);
    uint64_t v94 = (uint64_t ***)p_p;
    v77[4] = 0;
    void v77[3] = 0;
    *int v77 = v94;
    v77[1] = (uint64_t ***)(v77 + 3);
    v77[2] = (uint64_t ***)0x100000000;
LABEL_133:
    uint64_t v83 = *((unsigned int *)v77 + 4);
    if (v83)
    {
      uint64_t v84 = v77[1] + 1;
      uint64_t v85 = 16 * v83;
      while (*((_DWORD *)v84 - 2) != 2)
      {
        uint64_t v86 = 0;
        v84 += 2;
        v85 -= 16;
        if (!v85) {
          goto LABEL_139;
        }
      }
      uint64_t v86 = *v84;
      goto LABEL_139;
    }
LABEL_138:
    uint64_t v86 = 0;
LABEL_139:
    int v87 = (*((_DWORD *)v7 + 5) >> 1) & 0x3FFFFFF;
    if ((v87 - 3) <= 0xFFFFFFFD && v86 != 0)
    {
      unsigned int v91 = *(_DWORD *)(v86 + 8);
      uint64_t v90 = (unsigned int *)(v86 + 8);
      uint64_t v89 = v91;
      if (v91 == v87 + 1)
      {
        uint64_t v95 = &v200;
        p_p = &v200;
        uint64_t v199 = 0x800000000;
        if (v89 >= 2)
        {
          uint64_t v194 = v10;
          unsigned int v96 = 0;
          uint64_t v97 = v89 - 1;
          char v98 = v90;
          do
          {
            uint64_t v99 = *(void *)(*(void *)&v98[-2 * *v90] + 128);
            uint64_t v100 = (void *)(v99 + 24);
            if (*(_DWORD *)(v99 + 32) >= 0x41u) {
              uint64_t v100 = (void *)*v100;
            }
            if (v96 >= HIDWORD(v199)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)p_p + v96) = *(_DWORD *)v100;
            unsigned int v96 = v199 + 1;
            LODWORD(v199) = v199 + 1;
            v98 += 2;
            --v97;
          }
          while (v97);
          uint64_t v95 = (uint64_t *)p_p;
          uint64_t v10 = v194;
        }
        *(_DWORD *)v95 += *((_DWORD *)v95 + (v63 + 1));
        uint64_t v101 = (char *)v95 + 4 * v199;
        int v102 = *((_DWORD *)v95 + (v63 + 1));
        *((_DWORD *)v95 + (v63 + 1)) = *((_DWORD *)v101 - 1);
        *((_DWORD *)v101 - 1) = v102;
        LODWORD(v199) = v199 - 1;
        std::string __p = **(void ***)a1;
        unsigned int v103 = llvm::MDBuilder::createBranchWeights((uint64_t **)&__p, (uint64_t)v95, v199);
        llvm::Instruction::setMetadata((llvm::Instruction *)v7, 2, v103);
        if (p_p != &v200) {
          free(p_p);
        }
      }
    }
    goto LABEL_144;
  }
  if (v12 == 30 && (*((_DWORD *)v7 + 5) & 0x7FFFFFF) != 1)
  {
    uint64_t v53 = (uint64_t)*(v7 - 4);
    if (*(v7 - 8) == (uint64_t **)v53)
    {
      llvm::BasicBlock::removePredecessor((llvm::Type *)*(v7 - 4), (llvm::BasicBlock *)v7[5], 0);
      uint64_t v107 = (char *)operator new(0x60uLL);
      *((_DWORD *)v107 + 13) = *((_DWORD *)v107 + 13) & 0x38000000 | 1;
      *(void *)uint64_t v107 = 0;
      *((void *)v107 + 2) = 0;
      *((void *)v107 + 1) = 0;
      *((void *)v107 + 4) = ***(void ***)v53 + 1576;
      *((void *)v107 + 3) = v107 + 32;
      *((void *)v107 + 5) = 0;
      v107[48] = 30;
      v107[49] = 0;
      *((_WORD *)v107 + 25) = 0;
      *((_DWORD *)v107 + 13) = 1;
      *(_OWORD *)(v107 + 56) = 0u;
      *(_OWORD *)(v107 + 72) = 0u;
      *((_DWORD *)v107 + 22) = 0;
      uint64_t v108 = (void *)(v53 + 8);
      uint64_t v109 = *(void *)(v53 + 8);
      *(void *)uint64_t v107 = v53;
      *((void *)v107 + 1) = v109;
      if (v109) {
        *(void *)(v109 + 16) = v107 + 8;
      }
      *((void *)v107 + 2) = v108;
      void *v108 = v107;
      v202[0] = 257;
      unsigned int v110 = sub_1CB844E0C((uint64_t *)v203, (llvm::Instruction *)(v107 + 32), (uint64_t)&p_p);
      p_p = (void *)18;
      LODWORD(v199) = 30;
      llvm::Instruction::copyMetadata((uint64_t)v110, (uint64_t)v7, (int *)&p_p, 3);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
    char v13 = 0;
    uint64_t v54 = (uint64_t)*(v7 - 12);
    if (v54 && *(unsigned char *)(v54 + 16) == 16)
    {
      uint64_t v55 = (void *)(v54 + 24);
      if (*(_DWORD *)(v54 + 32) >= 0x41u) {
        uint64_t v55 = (void *)*v55;
      }
      if (*v55) {
        unint64_t v56 = (llvm::Type *)*(v7 - 8);
      }
      else {
        unint64_t v56 = (llvm::Type *)*(v7 - 4);
      }
      if (*v55) {
        uint64_t v57 = (uint64_t)*(v7 - 4);
      }
      else {
        uint64_t v57 = (uint64_t)*(v7 - 8);
      }
      llvm::BasicBlock::removePredecessor(v56, a1, 0);
      BOOL v58 = (char *)operator new(0x60uLL);
      *((_DWORD *)v58 + 13) = *((_DWORD *)v58 + 13) & 0x38000000 | 1;
      *((void *)v58 + 2) = 0;
      *(void *)BOOL v58 = 0;
      *((void *)v58 + 1) = 0;
      *((void *)v58 + 4) = ***(void ***)v57 + 1576;
      *((void *)v58 + 3) = v58 + 32;
      *((void *)v58 + 5) = 0;
      v58[48] = 30;
      v58[49] = 0;
      *((_WORD *)v58 + 25) = 0;
      *((_DWORD *)v58 + 13) = 1;
      *(_OWORD *)(v58 + 56) = 0u;
      *(_OWORD *)(v58 + 72) = 0u;
      *((_DWORD *)v58 + 22) = 0;
      unsigned int v59 = (void *)(v57 + 8);
      uint64_t v60 = *(void *)(v57 + 8);
      *(void *)BOOL v58 = v57;
      *((void *)v58 + 1) = v60;
      if (v60) {
        *(void *)(v60 + 16) = v58 + 8;
      }
      *((void *)v58 + 2) = v59;
      void *v59 = v58;
      v202[0] = 257;
      uint64_t v61 = sub_1CB844E0C((uint64_t *)v203, (llvm::Instruction *)(v58 + 32), (uint64_t)&p_p);
      p_p = (void *)18;
      LODWORD(v199) = 30;
      llvm::Instruction::copyMetadata((uint64_t)v61, (uint64_t)v7, (int *)&p_p, 3);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
  }
  else
  {
    char v13 = 0;
  }
LABEL_291:
  if (v203[0] != v10) {
    free(v203[0]);
  }
  return v13 & 1;
}

uint64_t llvm::RecursivelyDeleteTriviallyDeadInstructions(uint64_t a1, uint64_t *a2, int32x2_t **a3, uint64_t a4)
{
  uint64_t result = 0;
  v37[48] = *MEMORY[0x1E4F143B8];
  if (a1 && *(unsigned __int8 *)(a1 + 16) >= 0x1Cu)
  {
    if (*(void *)(a1 + 8))
    {
      return 0;
    }
    else
    {
      uint64_t result = llvm::wouldInstructionBeTriviallyDead(a1, a2);
      if (result)
      {
        uint64_t v9 = (char *)v37;
        long long v35 = (char *)v37;
        uint64_t v36 = 0x1000000000;
        uint64_t v30 = 6;
        uint64_t v31 = 0;
        uint64_t v32 = (int32x2_t ****)a1;
        uint64_t v10 = &v30;
        if (a1 != -8192 && a1 != -4096)
        {
          uint64_t v10 = &v30;
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v30);
          uint64_t v9 = v35;
          if (v36 >= HIDWORD(v36))
          {
            unint64_t v11 = v36 + 1;
            if (v35 <= (char *)&v30 && &v35[24 * v36] > (char *)&v30)
            {
              uint64_t v29 = (char *)&v30 - v35;
              sub_1CC261F80((unsigned int *)&v35, v11);
              uint64_t v9 = v35;
              uint64_t v10 = (uint64_t *)&v35[v29];
            }
            else
            {
              sub_1CC261F80((unsigned int *)&v35, v11);
              uint64_t v10 = &v30;
              uint64_t v9 = v35;
            }
          }
        }
        int v12 = v36;
        char v13 = (unint64_t *)&v9[24 * v36];
        *char v13 = 6;
        v13[1] = 0;
        unint64_t v14 = (unint64_t)(v13 + 1);
        uint64_t v15 = v10[2];
        v13[2] = v15;
        if (v15 != -8192 && v15 != -4096)
        {
          if (v15)
          {
            unint64_t v16 = *v10 & 0xFFFFFFFFFFFFFFF8;
            v13[1] = *(void *)v16;
            *(void *)unint64_t v16 = v13;
            *char v13 = v16 | 6;
            uint64_t v17 = (uint64_t *)v13[1];
            if (v17) {
              *uint64_t v17 = *v17 & 7 | v14;
            }
          }
        }
        LODWORD(v36) = v12 + 1;
        if (v32 != (int32x2_t ****)-8192 && v32 != (int32x2_t ****)-4096 && v32)
        {
          unint64_t v18 = v30 & 0xFFFFFFFFFFFFFFF8;
          *(void *)(v30 & 0xFFFFFFFFFFFFFFF8) = v31;
          if (v31)
          {
            *uint64_t v31 = *v31 & 7 | v18;
          }
          else
          {
            char v19 = v32;
            __int16 v20 = ***v32;
            unint64_t v21 = (unint64_t)v20[303];
            if (v21 <= v18)
            {
              uint64_t v22 = v20[305].u32[0];
              if (v21 + 16 * v22 > v18)
              {
                unsigned int v23 = v22 - 1;
                LODWORD(v24) = v23 & ((v32 >> 4) ^ (v32 >> 9));
                long long v25 = (int32x2_t *****)(v21 + 16 * v24);
                long long v26 = *v25;
                if (v32 == *v25)
                {
LABEL_28:
                  *long long v25 = (int32x2_t ****)-8192;
                  v20[304] = vadd_s32(v20[304], (int32x2_t)0x1FFFFFFFFLL);
                  char v19 = v32;
                }
                else
                {
                  int v27 = 1;
                  while (v26 != (int32x2_t ****)-4096)
                  {
                    int v28 = v24 + v27++;
                    uint64_t v24 = v28 & v23;
                    long long v26 = *(int32x2_t *****)(v21 + 16 * v24);
                    if (v32 == v26)
                    {
                      long long v25 = (int32x2_t *****)(v21 + 16 * v24);
                      goto LABEL_28;
                    }
                  }
                }
                *((unsigned char *)v19 + 17) &= ~1u;
              }
            }
          }
        }
        sub_1CD191FE4((uint64_t)v33, a4);
        llvm::RecursivelyDeleteTriviallyDeadInstructions((unsigned int *)&v35, a2, a3, (uint64_t)v33);
        if (v34 == v33)
        {
          (*(void (**)(void *))(v33[0] + 32))(v33);
        }
        else if (v34)
        {
          (*(void (**)(void))(*v34 + 40))();
        }
        sub_1CC2621C4(&v35);
        return 1;
      }
    }
  }
  return result;
}

uint64_t llvm::isInstructionTriviallyDead(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 8)) {
    return 0;
  }
  else {
    return llvm::wouldInstructionBeTriviallyDead(a1, a2);
  }
}

uint64_t llvm::wouldInstructionBeTriviallyDead(uint64_t a1, uint64_t *a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  if ((v2 - 29) < 0xB) {
    return 0;
  }
  unsigned int v6 = v2 - 38;
  if (v6 < 0x39 && ((0x100060000000001uLL >> v6) & 1) != 0) {
    return 0;
  }
  if (!sub_1CC1F4FA8(a1))
  {
    if (sub_1CC27FAEC(a1))
    {
      uint64_t v7 = *(unsigned __int8 **)(*(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)) + 24);
      uint64_t v10 = *v7;
      if (v10 > 0x22)
      {
LABEL_11:
        uint64_t v9 = *((void *)v7 + 16);
        return v9 == 0;
      }
      if (v10 != 32)
      {
        if (((1 << v10) & 0x6FFFFFFF0) == 0) {
          goto LABEL_11;
        }
        return 1;
      }
      return 0;
    }
    if (sub_1CC58180C(a1))
    {
      uint64_t v9 = *(void *)(*(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)) + 24);
      return v9 == 0;
    }
    uint64_t result = llvm::Instruction::willReturn((llvm::Instruction *)a1);
    if (!result) {
      return result;
    }
    if (!llvm::Instruction::mayHaveSideEffects((llvm::Instruction *)a1)) {
      return 1;
    }
    if (*(unsigned char *)(a1 + 16) != 84
      || (uint64_t v11 = *(void *)(a1 - 32)) == 0
      || *(unsigned char *)(v11 + 16)
      || *(void *)(v11 + 24) != *(void *)(a1 + 72)
      || (*(unsigned char *)(v11 + 33) & 0x20) == 0)
    {
LABEL_27:
      if (byte_1EBD04470) {
        int v12 = 59;
      }
      else {
        int v12 = 63;
      }
      sub_1CC095244(a1, v12, a2, v39);
      if (v40)
      {
        int v13 = byte_1EBD04470 ? 43 : 47;
        sub_1CC095244(a1, v13, a2, v39);
        if (v40) {
          return 1;
        }
      }
      char v41 = 0;
      unint64_t v14 = (uint64_t ***)sub_1CC0960E8(a1, &v41);
      if (v14)
      {
        if (!v41)
        {
          v39[0] = 0;
          if (a2)
          {
            long long v25 = (llvm::Function *)v14;
            if (llvm::TargetLibraryInfoImpl::getLibFunc(*a2, v14, v39)
              && ((*(void *)(a2[1] + (((unint64_t)v39[0] >> 3) & 0x1FFFFFF8)) >> SLOBYTE(v39[0])) & 1) == 0
              && ((*(unsigned __int8 *)(*a2 + ((unint64_t)v39[0] >> 2)) >> (2 * (v39[0] & 3))) & 3) != 0
              && llvm::isLibFreeFunction(v25, v39[0])
              && *(unsigned char *)(a1 + 16) == 84)
            {
              uint64_t v26 = *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
              if (v26)
              {
                unsigned int v27 = *(unsigned __int8 *)(v26 + 16);
                if (v27 <= 0x14)
                {
                  if (v27 == 16)
                  {
                    uint64_t v28 = *(unsigned int *)(v26 + 32);
                    if (v28 >= 0x41)
                    {
                      int v35 = 0;
                      int64_t v36 = (unint64_t)(v28 + 63) >> 6;
                      do
                      {
                        BOOL v31 = v36-- < 1;
                        if (v31) {
                          break;
                        }
                        unint64_t v37 = *(void *)(*(void *)(v26 + 24) + 8 * v36);
                        v35 += __clz(v37);
                      }
                      while (!v37);
                      int v38 = v28 | 0xFFFFFFC0;
                      if ((v28 & 0x3F) == 0) {
                        int v38 = 0;
                      }
                      if (v35 + v38 == v28) {
                        return 1;
                      }
                    }
                    else if (!*(void *)(v26 + 24))
                    {
                      return 1;
                    }
                    unsigned int v27 = 16;
                  }
                  else if (v27 == 17)
                  {
                    if (sub_1CB844168(v26, 0.0)) {
                      return 1;
                    }
                    unsigned int v27 = *(unsigned __int8 *)(v26 + 16);
                  }
                  else
                  {
                    uint64_t result = 1;
                    if (v27 - 18 < 3 || v27 == 13) {
                      return result;
                    }
                  }
                  return v27 - 11 < 2;
                }
              }
            }
          }
        }
      }
      unsigned int v15 = *(unsigned __int8 *)(a1 + 16) - 33;
      return v15 <= 0x33
          && ((1 << v15) & 0x8000000000041) != 0
          && (llvm::isMathLibCallNoop(a1, (unint64_t)a2) & 1) != 0;
    }
    int v16 = *(_DWORD *)(v11 + 36);
    uint64_t result = 1;
    if (v16 == 166 || v16 == 288) {
      return result;
    }
    if (llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)a1))
    {
      uint64_t v17 = *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32);
      unsigned int v18 = *(unsigned __int8 *)(v17 + 16);
      if (v18 - 11 < 2) {
        return 1;
      }
      uint64_t result = 0;
      if (v18 > 0x3B || ((1 << v18) & 0x80000000020000FLL) == 0) {
        return result;
      }
      uint64_t v19 = *(void *)(v17 + 8);
      if (!v19) {
        return 1;
      }
      while (1)
      {
        uint64_t v20 = *(void *)(v19 + 24);
        if (*(unsigned char *)(v20 + 16) != 84) {
          break;
        }
        uint64_t v21 = *(void *)(v20 - 32);
        if (!v21
          || *(unsigned char *)(v21 + 16)
          || *(void *)(v21 + 24) != *(void *)(v20 + 72)
          || (*(unsigned char *)(v21 + 33) & 0x20) == 0
          || !llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)v20))
        {
          break;
        }
        uint64_t v19 = *(void *)(v19 + 8);
        uint64_t result = 1;
        if (!v19) {
          return result;
        }
      }
      return 0;
    }
    if (v16 == 7)
    {
      if (llvm::isAssumeWithEmptyBundle(a1)) {
        goto LABEL_60;
      }
      int v16 = *(_DWORD *)(*(void *)(a1 - 32) + 36);
    }
    if (v16 != 125)
    {
      if (sub_1CBFC7338(a1)) {
        return llvm::ConstrainedFPIntrinsic::getExceptionBehavior((llvm::ConstrainedFPIntrinsic *)a1) != 2;
      }
      goto LABEL_27;
    }
LABEL_60:
    uint64_t result = 0;
    uint64_t v22 = *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
    if (v22 && *(unsigned char *)(v22 + 16) == 16)
    {
      uint64_t v23 = *(unsigned int *)(v22 + 32);
      if (v23 > 0x40)
      {
        int v29 = 0;
        int64_t v30 = (unint64_t)(v23 + 63) >> 6;
        do
        {
          BOOL v31 = v30-- < 1;
          if (v31) {
            break;
          }
          unint64_t v32 = *(void *)(*(void *)(v22 + 24) + 8 * v30);
          v29 += __clz(v32);
        }
        while (!v32);
        int v33 = v23 | 0xFFFFFFC0;
        if ((v23 & 0x3F) == 0) {
          int v33 = 0;
        }
        BOOL v24 = v29 + v33 == v23;
      }
      else
      {
        BOOL v24 = *(void *)(v22 + 24) == 0;
      }
      int v34 = v24;
      return v34 ^ 1u;
    }
    return result;
  }
  uint64_t v7 = *(unsigned __int8 **)(*(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)) + 24);
  int v8 = *v7;
  uint64_t result = 1;
  if ((v8 - 4) >= 0x1C && (v8 - 33) >= 2)
  {
    if (v8 == 32) {
      uint64_t v7 = (unsigned __int8 *)**((void **)v7 + 3);
    }
    goto LABEL_11;
  }
  return result;
}

uint64_t llvm::wouldInstructionBeTriviallyDeadOnUnusedPaths(llvm::Instruction *this, uint64_t *a2)
{
  if (*((unsigned char *)this + 16) == 84)
  {
    uint64_t v4 = *((void *)this - 4);
    if (v4)
    {
      if (!*(unsigned char *)(v4 + 16) && *(void *)(v4 + 24) == *((void *)this + 9) && (*(unsigned char *)(v4 + 33) & 0x20) != 0)
      {
        int v6 = *(_DWORD *)(v4 + 36);
        if (v6 == 166 || v6 == 288 || llvm::Instruction::isLifetimeStartOrEnd(this)) {
          return 0;
        }
      }
    }
  }

  return llvm::wouldInstructionBeTriviallyDead((uint64_t)this, a2);
}

unsigned int *llvm::RecursivelyDeleteTriviallyDeadInstructions(unsigned int *result, uint64_t *a2, int32x2_t **a3, uint64_t a4)
{
  v81[1] = *MEMORY[0x1E4F143B8];
  unsigned int v4 = result[2];
  if (v4)
  {
    uint64_t v7 = result;
    while (1)
    {
      uint64_t v8 = *(void *)result;
      uint64_t v9 = *(void *)result + 24 * v4;
      int v79 = (void *)6;
      uint64_t v80 = 0;
      uint64_t v10 = *(void *)(v9 - 8);
      v81[0] = v10;
      if (v10 && v10 != -8192 && v10 != -4096)
      {
        unint64_t v11 = *(void *)(v9 - 24) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v80 = *(void *)v11;
        *(void *)unint64_t v11 = &v79;
        int v79 = (void *)(v11 | 6);
        if (v80) {
          *(void *)uint64_t v80 = *(void *)v80 & 7 | (unint64_t)&v80;
        }
        uint64_t v8 = *(void *)result;
      }
      unsigned int v12 = v4 - 1;
      result[2] = v12;
      int v13 = (void *)(v8 + 24 * v12);
      uint64_t v14 = v13[2];
      if (v14 && v14 != -8192 && v14 != -4096)
      {
        unint64_t v15 = *v13 & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v15 = v13[1];
        int v16 = (unint64_t *)v13[1];
        if (v16)
        {
          unint64_t *v16 = *v16 & 7 | v15;
        }
        else
        {
          uint64_t v17 = v13[2];
          unsigned int v18 = ***(int32x2_t ****)v17;
          unint64_t v19 = (unint64_t)v18[303];
          if (v19 <= v15)
          {
            uint64_t v20 = v18[305].u32[0];
            if (v19 + 16 * v20 > v15)
            {
              unsigned int v21 = v20 - 1;
              LODWORD(v22) = v21 & ((v17 >> 4) ^ (v17 >> 9));
              uint64_t v23 = (uint64_t *)(v19 + 16 * v22);
              uint64_t v24 = *v23;
              if (v17 == *v23)
              {
LABEL_20:
                uint64_t *v23 = -8192;
                v18[304] = vadd_s32(v18[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v17 = v13[2];
              }
              else
              {
                int v25 = 1;
                while (v24 != -4096)
                {
                  int v26 = v22 + v25++;
                  uint64_t v22 = v26 & v21;
                  uint64_t v24 = *(void *)(v19 + 16 * v22);
                  if (v17 == v24)
                  {
                    uint64_t v23 = (uint64_t *)(v19 + 16 * v22);
                    goto LABEL_20;
                  }
                }
              }
              *(unsigned char *)(v17 + 17) &= ~1u;
            }
          }
        }
      }
      uint64_t v27 = v81[0];
      if (v81[0] != -8192 && v81[0] != -4096 && v81[0] != 0)
      {
        unint64_t v67 = (unint64_t)v79 & 0xFFFFFFFFFFFFFFF8;
        *(void *)((unint64_t)v79 & 0xFFFFFFFFFFFFFFF8) = v80;
        if (v80)
        {
          *(void *)uint64_t v80 = *(void *)v80 & 7 | v67;
        }
        else
        {
          uint64_t v68 = v81[0];
          uint64_t v69 = ***(int32x2_t ****)v81[0];
          unint64_t v70 = (unint64_t)v69[303];
          if (v70 <= v67)
          {
            uint64_t v71 = v69[305].u32[0];
            if (v70 + 16 * v71 > v67)
            {
              unsigned int v72 = v71 - 1;
              LODWORD(v73) = v72 & ((LODWORD(v81[0]) >> 4) ^ (LODWORD(v81[0]) >> 9));
              uint64_t v74 = (uint64_t *)(v70 + 16 * v73);
              uint64_t v75 = *v74;
              if (v81[0] == *v74)
              {
LABEL_98:
                *uint64_t v74 = -8192;
                v69[304] = vadd_s32(v69[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v68 = v81[0];
              }
              else
              {
                int v76 = 1;
                while (v75 != -4096)
                {
                  int v77 = v73 + v76++;
                  uint64_t v73 = v77 & v72;
                  uint64_t v75 = *(void *)(v70 + 16 * v73);
                  if (v81[0] == v75)
                  {
                    uint64_t v74 = (uint64_t *)(v70 + 16 * v73);
                    goto LABEL_98;
                  }
                }
              }
              *(unsigned char *)(v68 + 17) &= ~1u;
            }
          }
        }
      }
      if (v27) {
        break;
      }
      unsigned int v4 = result[2];
      if (!v4) {
        return result;
      }
    }
    int v79 = v81;
    uint64_t v80 = 0x100000000;
    llvm::findDbgUsers((uint64_t)&v79, (uint64_t ***)v27);
    llvm::salvageDebugInfoForDbgValues((llvm::CastInst *)v27, (uint64_t *)v79, v80);
    if (v79 != v81) {
      free(v79);
    }
    uint64_t v29 = *(void *)(a4 + 24);
    if (v29)
    {
      int v79 = (void *)v27;
      (*(void (**)(uint64_t, void **))(*(void *)v29 + 48))(v29, &v79);
    }
    int v30 = *(_DWORD *)(v27 + 20);
    if ((v30 & 0x40000000) != 0)
    {
      uint64_t v32 = *(void *)(v27 - 8);
      uint64_t v31 = v30 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v31 = v30 & 0x7FFFFFF;
      uint64_t v32 = v27 - 32 * v31;
    }
    uint64_t v33 = v32 + 32 * v31;
    if (!v31)
    {
LABEL_79:
      if (a3)
      {
        __int32 v59 = (*a3)[5].i32[0];
        if (v59)
        {
          int32x2_t v60 = (*a3)[3];
          __int32 v61 = v59 - 1;
          uint64_t v62 = (v59 - 1) & ((v27 >> 4) ^ (v27 >> 9));
          uint64_t v63 = *(void *)(*(void *)&v60 + 16 * v62);
          if (v63 == v27)
          {
LABEL_85:
            int v66 = *(llvm::MemoryAccess **)(*(void *)&v60 + 16 * v62 + 8);
            if (v66) {
              llvm::MemorySSAUpdater::removeMemoryAccess(a3, v66, 0);
            }
          }
          else
          {
            int v64 = 1;
            while (v63 != -4096)
            {
              int v65 = v62 + v64++;
              uint64_t v62 = v65 & v61;
              uint64_t v63 = *(void *)(*(void *)&v60 + 16 * v62);
              if (v63 == v27) {
                goto LABEL_85;
              }
            }
          }
        }
      }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
    while (1)
    {
      uint64_t v34 = *(void *)v32;
      if (*(void *)v32)
      {
        **(void **)(v32 + 16) = *(void *)(v32 + 8);
        uint64_t v35 = *(void *)(v32 + 8);
        if (v35) {
          *(void *)(v35 + 16) = *(void *)(v32 + 16);
        }
      }
      *(void *)uint64_t v32 = 0;
      if (!*(void *)(v34 + 8))
      {
        BOOL v36 = v34 && *(unsigned __int8 *)(v34 + 16) >= 0x1Cu;
        if (v36 && llvm::wouldInstructionBeTriviallyDead(v34, a2)) {
          break;
        }
      }
LABEL_73:
      v32 += 32;
      if (v32 == v33) {
        goto LABEL_79;
      }
    }
    int v79 = (void *)6;
    uint64_t v80 = 0;
    v81[0] = v34;
    if (v34 != -8192 && v34 != -4096 && v34) {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v79);
    }
    uint64_t v37 = v7[2];
    unint64_t v38 = *(void *)v7;
    if (v37 >= v7[3])
    {
      unint64_t v56 = v37 + 1;
      BOOL v57 = v38 + 24 * v37 > (unint64_t)&v79;
      if (v38 <= (unint64_t)&v79 && v57)
      {
        BOOL v58 = (char *)&v79 - v38;
        sub_1CC261F80(v7, v56);
        unint64_t v38 = *(void *)v7;
        uint64_t v39 = (void **)&v58[*(void *)v7];
        goto LABEL_54;
      }
      sub_1CC261F80(v7, v56);
      unint64_t v38 = *(void *)v7;
    }
    uint64_t v39 = &v79;
LABEL_54:
    unsigned int v40 = v7[2];
    char v41 = (unint64_t *)(v38 + 24 * v40);
    *char v41 = 6;
    v41[1] = 0;
    unsigned int v42 = v39[2];
    v41[2] = (unint64_t)v42;
    if (v42 != (void *)-8192 && v42 != (void *)-4096)
    {
      if (v42)
      {
        unint64_t v43 = (unint64_t)*v39 & 0xFFFFFFFFFFFFFFF8;
        v41[1] = *(void *)v43;
        *(void *)unint64_t v43 = v41;
        *char v41 = v43 | 6;
        uint64_t v44 = (unint64_t *)v41[1];
        if (v44) {
          *uint64_t v44 = *v44 & 7 | (unint64_t)(v41 + 1);
        }
      }
    }
    v7[2] = v40 + 1;
    if (v81[0] != -8192 && v81[0] != -4096 && v81[0])
    {
      unint64_t v45 = (unint64_t)v79 & 0xFFFFFFFFFFFFFFF8;
      *(void *)((unint64_t)v79 & 0xFFFFFFFFFFFFFFF8) = v80;
      if (v80)
      {
        *(void *)uint64_t v80 = *(void *)v80 & 7 | v45;
      }
      else
      {
        uint64_t v46 = v81[0];
        int v47 = ***(int32x2_t ****)v81[0];
        unint64_t v48 = (unint64_t)v47[303];
        if (v48 <= v45)
        {
          uint64_t v49 = v47[305].u32[0];
          if (v48 + 16 * v49 > v45)
          {
            unsigned int v50 = v49 - 1;
            LODWORD(v51) = v50 & ((LODWORD(v81[0]) >> 4) ^ (LODWORD(v81[0]) >> 9));
            int v52 = (uint64_t *)(v48 + 16 * v51);
            uint64_t v53 = *v52;
            if (v81[0] != *v52)
            {
              int v54 = 1;
              do
              {
                if (v53 == -4096) {
                  goto LABEL_71;
                }
                int v55 = v51 + v54++;
                uint64_t v51 = v55 & v50;
                uint64_t v53 = *(void *)(v48 + 16 * v51);
              }
              while (v81[0] != v53);
              int v52 = (uint64_t *)(v48 + 16 * v51);
            }
            *int v52 = -8192;
            v47[304] = vadd_s32(v47[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v46 = v81[0];
LABEL_71:
            *(unsigned char *)(v46 + 17) &= ~1u;
          }
        }
      }
    }
    goto LABEL_73;
  }
  return result;
}

BOOL llvm::RecursivelyDeleteTriviallyDeadInstructionsPermissive(unsigned int *a1, uint64_t *a2, int32x2_t **a3, uint64_t a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a1[2];
  if (v8)
  {
    uint64_t v9 = 0;
    int v10 = 0;
    while (1)
    {
      uint64_t v11 = *(void *)a1;
      uint64_t v12 = *(void *)(*(void *)a1 + 24 * v9 + 16);
      if (v12) {
        BOOL v13 = *(unsigned __int8 *)(v12 + 16) >= 0x1Cu;
      }
      else {
        BOOL v13 = 0;
      }
      if (!v13 || *(void *)(v12 + 8)) {
        goto LABEL_11;
      }
      if ((llvm::wouldInstructionBeTriviallyDead(v12, 0) & 1) == 0) {
        break;
      }
LABEL_15:
      if (++v9 == v8) {
        goto LABEL_29;
      }
    }
    uint64_t v11 = *(void *)a1;
LABEL_11:
    uint64_t v14 = (void *)(v11 + 24 * v9);
    uint64_t v15 = v14[2];
    if (v15)
    {
      if ((v15 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        unint64_t v16 = *v14 & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v16 = v14[1];
        uint64_t v17 = (unint64_t *)v14[1];
        if (v17)
        {
          *uint64_t v17 = *v17 & 7 | v16;
        }
        else
        {
          uint64_t v18 = v14[2];
          unint64_t v19 = ***(int32x2_t ****)v18;
          unint64_t v20 = (unint64_t)v19[303];
          if (v20 <= v16)
          {
            uint64_t v21 = v19[305].u32[0];
            if (v20 + 16 * v21 > v16)
            {
              unsigned int v22 = v21 - 1;
              LODWORD(v23) = v22 & ((v18 >> 4) ^ (v18 >> 9));
              uint64_t v24 = (uint64_t *)(v20 + 16 * v23);
              uint64_t v25 = *v24;
              if (v18 == *v24)
              {
LABEL_25:
                *uint64_t v24 = -8192;
                v19[304] = vadd_s32(v19[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v18 = v14[2];
              }
              else
              {
                int v26 = 1;
                while (v25 != -4096)
                {
                  int v27 = v23 + v26++;
                  uint64_t v23 = v27 & v22;
                  uint64_t v25 = *(void *)(v20 + 16 * v23);
                  if (v18 == v25)
                  {
                    uint64_t v24 = (uint64_t *)(v20 + 16 * v23);
                    goto LABEL_25;
                  }
                }
              }
              *(unsigned char *)(v18 + 17) &= ~1u;
            }
          }
        }
      }
      v14[2] = 0;
    }
    ++v10;
    goto LABEL_15;
  }
  int v10 = 0;
LABEL_29:
  if (v10 != v8)
  {
    sub_1CD191FE4((uint64_t)v29, a4);
    llvm::RecursivelyDeleteTriviallyDeadInstructions(a1, a2, a3, (uint64_t)v29);
    if (v30 == v29)
    {
      (*(void (**)(void *))(v29[0] + 32))(v29);
    }
    else if (v30)
    {
      (*(void (**)(void))(*v30 + 40))();
    }
  }
  return v10 != v8;
}

void llvm::salvageDebugInfo(uint64_t ***this, llvm::Instruction *a2)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = v5;
  uint64_t v4 = 0x100000000;
  llvm::findDbgUsers((uint64_t)&v3, this);
  llvm::salvageDebugInfoForDbgValues((llvm::CastInst *)this, (uint64_t *)v3, v4);
  if (v3 != v5) {
    free(v3);
  }
}

BOOL llvm::replaceDbgUsesWithUndef(uint64_t ***this, llvm::Instruction *a2)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = v13;
  uint64_t v12 = 0x100000000;
  llvm::findDbgUsers((uint64_t)&v11, this);
  uint64_t v4 = v11;
  if (v12)
  {
    uint64_t v7 = (uint64_t ***)v11;
    uint64_t v8 = 8 * v12;
    do
    {
      uint64_t v9 = *v7++;
      int v10 = llvm::UndefValue::get((llvm::UndefValue *)*this, v3);
      llvm::DbgVariableIntrinsic::replaceVariableLocationOp(v9, (llvm::Value *)this, v10);
      v8 -= 8;
    }
    while (v8);
    int v5 = v12;
    uint64_t v4 = v11;
  }
  else
  {
    int v5 = 0;
  }
  if (v4 != v13) {
    free(v4);
  }
  return v5 != 0;
}

uint64_t llvm::RecursivelyDeleteDeadPHINode(llvm::Instruction *this, uint64_t *a2, int32x2_t **a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  int v26 = v30;
  int v27 = v30;
  uint64_t v28 = 4;
  int v29 = 0;
  while (1)
  {
    uint64_t v6 = *((void *)this + 1);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 24);
      while (1)
      {
        uint64_t v6 = *(void *)(v6 + 8);
        if (!v6) {
          break;
        }
        if (*(void *)(v6 + 24) != v7) {
          goto LABEL_34;
        }
      }
    }
    if (llvm::Instruction::mayHaveSideEffects(this))
    {
LABEL_34:
      uint64_t v22 = 0;
      goto LABEL_35;
    }
    if (!*((void *)this + 1)) {
      break;
    }
    uint64_t v9 = v27;
    uint64_t v10 = HIDWORD(v28);
    if (v27 == v26)
    {
      if (HIDWORD(v28))
      {
        uint64_t v11 = 0;
        uint64_t v12 = 8 * HIDWORD(v28);
        BOOL v13 = v27;
        while (*(llvm::Instruction **)v13 != this)
        {
          if (*(void *)v13 == -2) {
            uint64_t v11 = v13;
          }
          v13 += 8;
          v12 -= 8;
          if (!v12)
          {
            if (!v11) {
              goto LABEL_17;
            }
            *(void *)uint64_t v11 = this;
            --v29;
            goto LABEL_19;
          }
        }
        goto LABEL_46;
      }
LABEL_17:
      uint64_t v8 = (llvm::Type *)v28;
      if (HIDWORD(v28) < v28)
      {
        ++HIDWORD(v28);
        *(void *)&v27[8 * v10] = this;
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v8 = (llvm::Type *)v28;
    }
    if (3 * (int)v8 <= (4 * (HIDWORD(v28) - v29)))
    {
      if (v8 >= 0x40) {
        LODWORD(v8) = 2 * v8;
      }
      else {
        LODWORD(v8) = 128;
      }
LABEL_58:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v26, v8);
      uint64_t v8 = (llvm::Type *)v28;
      uint64_t v9 = v27;
      goto LABEL_32;
    }
    if ((int)v8 - HIDWORD(v28) < v8 >> 3) {
      goto LABEL_58;
    }
LABEL_32:
    int v21 = v8 - 1;
    unsigned int v18 = (v8 - 1) & ((this >> 4) ^ (this >> 9));
    unint64_t v19 = (llvm::Instruction **)&v9[8 * v18];
    unint64_t v20 = *v19;
    if (*v19 != (llvm::Instruction *)-1)
    {
      uint64_t v15 = 0;
      int v17 = 1;
      while (v20 != this)
      {
        if (v15) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v20 == (llvm::Instruction *)-2;
        }
        if (v14) {
          uint64_t v15 = v19;
        }
        unsigned int v16 = v18 + v17++;
        unsigned int v18 = v16 & v21;
        unint64_t v19 = (llvm::Instruction **)&v9[8 * (v16 & v21)];
        unint64_t v20 = *v19;
        if (*v19 == (llvm::Instruction *)-1) {
          goto LABEL_39;
        }
      }
LABEL_46:
      uint64_t v25 = llvm::UndefValue::get(*(llvm::UndefValue **)this, v8);
      llvm::Value::doRAUW(this, v25, (llvm::Value *)1);
      uint64_t v32 = 0;
      llvm::RecursivelyDeleteTriviallyDeadInstructions((uint64_t)this, a2, a3, (uint64_t)v31);
      if (v32 == v31)
      {
        (*(void (**)(void *))(v31[0] + 32))(v31);
      }
      else if (v32)
      {
        (*(void (**)(void))(*v32 + 40))();
      }
      uint64_t v22 = 1;
      goto LABEL_35;
    }
    uint64_t v15 = 0;
LABEL_39:
    if (v15) {
      uint64_t v24 = v15;
    }
    else {
      uint64_t v24 = v19;
    }
    if (*v24 == this) {
      goto LABEL_46;
    }
    if (*v24 == (llvm::Instruction *)-2) {
      --v29;
    }
    else {
      ++HIDWORD(v28);
    }
    *uint64_t v24 = this;
LABEL_19:
    this = *(llvm::Instruction **)(*((void *)this + 1) + 24);
  }
  uint64_t v34 = 0;
  uint64_t v22 = llvm::RecursivelyDeleteTriviallyDeadInstructions((uint64_t)this, a2, a3, (uint64_t)v33);
  if (v34 == v33)
  {
    (*(void (**)(void *))(v33[0] + 32))(v33);
  }
  else if (v34)
  {
    (*(void (**)(void *))(*v34 + 40))(v34);
  }
LABEL_35:
  if (v27 != v26) {
    free(v27);
  }
  return v22;
}

uint64_t llvm::SimplifyInstructionsInBlock(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, llvm::Type *a5, llvm::DSOLocalEquivalent **a6, uint64_t a7)
{
  v34[16] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1[7] + 40);
  uint64_t v29 = 1;
  uint64_t v9 = 8;
  int64x2_t v10 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)((char *)&v29 + v9) = v10;
    v9 += 16;
  }
  while (v9 != 136);
  uint64_t v32 = v34;
  uint64_t v33 = 0x1000000000;
  uint64_t v12 = a1[5];
  uint64_t v11 = a1[6];
  if (v11 == v12)
  {
    LOBYTE(v13) = 0;
    goto LABEL_20;
  }
  int v13 = 0;
  uint64_t v14 = v8 + 272;
  do
  {
    if (v11) {
      uint64_t v15 = (llvm *)(v11 - 24);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v11 = *(void *)(v11 + 8);
    if (v29)
    {
      int v16 = 16;
      int v17 = &v30;
    }
    else
    {
      int v16 = v31;
      if (!v31) {
        goto LABEL_17;
      }
      int v17 = v30;
    }
    int v18 = v16 - 1;
    unsigned int v19 = v18 & ((v15 >> 4) ^ (v15 >> 9));
    unint64_t v20 = (llvm *)v17[v19];
    if (v15 == v20) {
      continue;
    }
    int v21 = 1;
    while (v20 != (llvm *)-4096)
    {
      unsigned int v22 = v19 + v21++;
      unsigned int v19 = v22 & v18;
      unint64_t v20 = (llvm *)v17[v19];
      if (v15 == v20) {
        goto LABEL_18;
      }
    }
LABEL_17:
    v13 |= sub_1CD18790C(v15, (uint64_t)&v29, v14, a2, a5, a6, a7);
LABEL_18:
    ;
  }
  while (v11 != v12);
  while (v33)
  {
    uint64_t v24 = (char *)v32 + 8 * v33;
    uint64_t v25 = (llvm *)*((void *)v24 - 1);
    sub_1CBFD6090((uint64_t)&v29, (void *)v24 - 1);
    LODWORD(v33) = v33 - 1;
    v13 |= sub_1CD18790C(v25, (uint64_t)&v29, v14, a2, v26, v27, v28);
  }
LABEL_20:
  if (v32 != v34) {
    free(v32);
  }
  if ((v29 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v30, 8);
  }
  return v13 & 1;
}

uint64_t sub_1CD18790C(llvm *this, uint64_t a2, uint64_t a3, uint64_t *a4, llvm::Type *a5, llvm::DSOLocalEquivalent **a6, uint64_t a7)
{
  v64[8] = *MEMORY[0x1E4F143B8];
  if (!*((void *)this + 1) && llvm::wouldInstructionBeTriviallyDead((uint64_t)this, a4))
  {
    uint64_t v62 = v64;
    uint64_t v63 = 0x100000000;
    llvm::findDbgUsers((uint64_t)&v62, (uint64_t ***)this);
    llvm::salvageDebugInfoForDbgValues(this, (uint64_t *)v62, v63);
    if (v62 != v64) {
      free(v62);
    }
    int v11 = *((_DWORD *)this + 5);
    uint64_t v12 = v11 & 0x7FFFFFF;
    if ((v11 & 0x7FFFFFF) == 0) {
LABEL_88:
    }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    uint64_t v13 = 0;
    while (1)
    {
      int v14 = *((_DWORD *)this + 5);
      if ((v14 & 0x40000000) != 0) {
        uint64_t v15 = (char *)*((void *)this - 1);
      }
      else {
        uint64_t v15 = (char *)this - 32 * (v14 & 0x7FFFFFF);
      }
      int v16 = &v15[32 * v13];
      uint64_t v17 = *(void *)v16;
      if (*(void *)v16)
      {
        **((void **)v16 + 2) = *((void *)v16 + 1);
        uint64_t v18 = *((void *)v16 + 1);
        if (v18) {
          *(void *)(v18 + 16) = *((void *)v16 + 2);
        }
      }
      *(void *)int v16 = 0;
      if ((llvm *)v17 == this || *(void *)(v17 + 8) != 0) {
        goto LABEL_42;
      }
      unint64_t v20 = *(unsigned __int8 *)(v17 + 16) <= 0x1Bu ? 0 : (void *)v17;
      uint64_t v62 = v20;
      if (!v20 || v20[1] || !llvm::wouldInstructionBeTriviallyDead((uint64_t)v20, a4)) {
        goto LABEL_42;
      }
      if (*(unsigned char *)a2)
      {
        int v21 = 16;
        uint64_t v22 = a2 + 8;
      }
      else
      {
        int v21 = *(_DWORD *)(a2 + 16);
        if (!v21)
        {
          int v31 = 0;
LABEL_40:
          uint64_t v32 = sub_1CBFD5BBC(a2, (uint64_t)&v62, &v62, v31);
          *uint64_t v32 = v62;
          unint64_t v33 = *(unsigned int *)(a2 + 144);
          if (v33 >= *(unsigned int *)(a2 + 148)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(a2 + 136) + 8 * v33) = v62;
          ++*(_DWORD *)(a2 + 144);
          goto LABEL_42;
        }
        uint64_t v22 = *(void *)(a2 + 8);
      }
      int v23 = v21 - 1;
      unsigned int v24 = ((v62 >> 4) ^ (v62 >> 9)) & v23;
      uint64_t v25 = (void *)(v22 + 8 * v24);
      int v26 = (void *)*v25;
      if (v62 != (void *)*v25)
      {
        int v27 = 0;
        int v28 = 1;
        while (v26 != (void *)-4096)
        {
          if (v27) {
            BOOL v29 = 0;
          }
          else {
            BOOL v29 = v26 == (void *)-8192;
          }
          if (v29) {
            int v27 = v25;
          }
          unsigned int v30 = v24 + v28++;
          unsigned int v24 = v30 & v23;
          uint64_t v25 = (void *)(v22 + 8 * v24);
          int v26 = (void *)*v25;
          if (v62 == (void *)*v25) {
            goto LABEL_42;
          }
        }
        if (v27) {
          int v31 = v27;
        }
        else {
          int v31 = v25;
        }
        goto LABEL_40;
      }
LABEL_42:
      if (++v13 == v12) {
        goto LABEL_88;
      }
    }
  }
  uint64_t v58 = a3;
  long long v59 = 0u;
  long long v60 = 0u;
  __int16 v61 = 257;
  int v34 = *((_DWORD *)this + 5);
  if ((v34 & 0x40000000) != 0)
  {
    BOOL v36 = (uint64_t *)*((void *)this - 1);
    unint64_t v35 = v34 & 0x7FFFFFF;
  }
  else
  {
    unint64_t v35 = v34 & 0x7FFFFFF;
    BOOL v36 = (uint64_t *)((char *)this - 32 * v35);
  }
  uint64_t v62 = v64;
  uint64_t v63 = 0x800000000;
  if (v35 >= 9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v35)
  {
    uint64_t v37 = 32 * v35;
    unint64_t v38 = v64;
    do
    {
      uint64_t v39 = *v36;
      v36 += 4;
      *v38++ = v39;
      v37 -= 32;
    }
    while (v37);
    unsigned int v40 = v62;
  }
  else
  {
    unsigned int v40 = v64;
  }
  LODWORD(v63) = v35;
  char v41 = llvm::SimplifyInstructionWithOperands(this, (uint64_t)v40, v35, (uint64_t)&v58, a5, a6, a7);
  if (v62 == v64)
  {
    if (!v41) {
      return (v41 != 0) & a2;
    }
  }
  else
  {
    free(v62);
    if (!v41) {
      return (v41 != 0) & a2;
    }
  }
  uint64_t v42 = *((void *)this + 1);
  if (!v42) {
    goto LABEL_85;
  }
  do
  {
    unint64_t v43 = *(llvm **)(v42 + 24);
    if (v43 == this) {
      goto LABEL_77;
    }
    uint64_t v62 = *(void **)(v42 + 24);
    if (*(unsigned char *)a2)
    {
      int v44 = 16;
      uint64_t v45 = a2 + 8;
    }
    else
    {
      int v44 = *(_DWORD *)(a2 + 16);
      if (!v44)
      {
        int v54 = 0;
        goto LABEL_75;
      }
      uint64_t v45 = *(void *)(a2 + 8);
    }
    int v46 = v44 - 1;
    unsigned int v47 = v46 & ((v43 >> 4) ^ (v43 >> 9));
    unint64_t v48 = (llvm **)(v45 + 8 * v47);
    uint64_t v49 = *v48;
    if (v43 == *v48) {
      goto LABEL_77;
    }
    unsigned int v50 = 0;
    int v51 = 1;
    while (v49 != (llvm *)-4096)
    {
      if (v50) {
        BOOL v52 = 0;
      }
      else {
        BOOL v52 = v49 == (llvm *)-8192;
      }
      if (v52) {
        unsigned int v50 = v48;
      }
      unsigned int v53 = v47 + v51++;
      unsigned int v47 = v53 & v46;
      unint64_t v48 = (llvm **)(v45 + 8 * v47);
      uint64_t v49 = *v48;
      if (v43 == *v48) {
        goto LABEL_77;
      }
    }
    if (v50) {
      int v54 = v50;
    }
    else {
      int v54 = v48;
    }
LABEL_75:
    int v55 = sub_1CBFD5BBC(a2, (uint64_t)&v62, &v62, v54);
    *int v55 = v62;
    unint64_t v56 = *(unsigned int *)(a2 + 144);
    if (v56 >= *(unsigned int *)(a2 + 148)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a2 + 136) + 8 * v56) = v62;
    ++*(_DWORD *)(a2 + 144);
LABEL_77:
    uint64_t v42 = *(void *)(v42 + 8);
  }
  while (v42);
  if (*((void *)this + 1))
  {
    LOBYTE(a2) = 1;
    llvm::Value::doRAUW(this, v41, (llvm::Value *)1);
    if (!*((void *)this + 1)) {
      goto LABEL_86;
    }
    return (v41 != 0) & a2;
  }
LABEL_85:
  LOBYTE(a2) = 0;
LABEL_86:
  if (llvm::wouldInstructionBeTriviallyDead((uint64_t)this, a4)) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  return (v41 != 0) & a2;
}

void llvm::MergeBasicBlockIntoOnlyPred(unint64_t this, llvm::BasicBlock *a2, llvm::DomTreeUpdater *a3)
{
  v93[64] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(this + 48);
  uint64_t v6 = (llvm::UndefValue **)(v5 - 24);
  if (v5) {
    uint64_t v7 = v5 - 24;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v5 && *(unsigned char *)(v7 + 16) == 83)
  {
    int v8 = *(_DWORD *)(v5 - 4);
    if ((v8 & 0x40000000) != 0) {
      uint64_t v9 = *(llvm::UndefValue ***)(v5 - 32);
    }
    else {
      uint64_t v9 = &v6[-4 * (v8 & 0x7FFFFFF)];
    }
    int64x2_t v10 = *v9;
    if (*v9 == (llvm::UndefValue *)v6) {
      int64x2_t v10 = llvm::UndefValue::get(*v6, v10);
    }
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v6, v10, (llvm::Value *)1);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  uint64_t SinglePredecessor = llvm::BasicBlock::getSinglePredecessor((llvm::BasicBlock *)this);
  uint64_t v13 = SinglePredecessor;
  unsigned int v91 = v93;
  uint64_t v92 = 0x2000000000;
  if (!a2)
  {
LABEL_61:
    if ((*(_WORD *)(this + 18) & 0x7FFF) != 0)
    {
      int v77 = (llvm::Constant **)llvm::BlockAddress::get(*(llvm::BlockAddress **)(this + 56), (llvm::Function *)this, v12);
      uint64_t v78 = **(void **)*v77;
      int v79 = *(llvm::ConstantInt **)(v78 + 1960);
      unint64_t v80 = *(unsigned int *)(v78 + 1968);
      LODWORD(v87) = v80 >> 8;
      if (v80 >> 8 > 0x40) {
        operator new[]();
      }
      if (v80 <= 0xFF) {
        LOBYTE(v81) = 0;
      }
      else {
        unint64_t v81 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v80) + 63);
      }
      uint64_t v86 = (unsigned char *)(v81 & 1);
      unsigned int v82 = (llvm::detail::IEEEFloat *)llvm::ConstantInt::get(v79, (llvm::LLVMContext *)&v86, v76);
      if (v87 >= 0x41 && v86)
      {
        uint64_t v85 = v82;
        MEMORY[0x1D25D9CB0](v86, 0x1000C8000313F17);
        unsigned int v82 = v85;
      }
      uint64_t v83 = sub_1CC56C0C0((llvm *)0x30, v82, *v77, 0);
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v77, v83, (llvm::Value *)1);
      llvm::Constant::destroyConstant((int32x2_t ****)v77, v84);
    }
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v13, (llvm::Value *)this, (llvm::Value *)1);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  uint64_t v86 = v90;
  int v87 = v90;
  uint64_t v88 = 2;
  int v89 = 0;
  uint64_t v14 = *(void *)(SinglePredecessor + 8);
  if (!v14)
  {
LABEL_46:
    if (v87 != v86)
    {
      if (v88 >= 0x21 && 4 * (HIDWORD(v88) - v89) < v88)
      {
        llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v86);
LABEL_48:
        uint64_t v29 = *(void *)(v13 + 8);
        if (!v29)
        {
LABEL_58:
          if (v92 >= HIDWORD(v92)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v34 = (uint64_t *)((char *)v91 + 16 * v92);
          *int v34 = v13;
          v34[1] = this | 4;
          LODWORD(v92) = v92 + 1;
          if (v87 != v86) {
            free(v87);
          }
          goto LABEL_61;
        }
        while (1)
        {
          uint64_t v30 = *(void *)(v29 + 24);
          unsigned int v31 = *(unsigned __int8 *)(v30 + 16);
          BOOL v32 = v30 && v31 >= 0x1C;
          if (v32 && v31 - 29 < 0xB) {
            break;
          }
          uint64_t v29 = *(void *)(v29 + 8);
          if (!v29) {
            goto LABEL_58;
          }
        }
LABEL_63:
        uint64_t v35 = *(void *)(v30 + 40);
        BOOL v36 = v87;
        uint64_t v37 = HIDWORD(v88);
        if (v87 == v86)
        {
          if (HIDWORD(v88))
          {
            unint64_t v38 = 0;
            uint64_t v39 = 8 * HIDWORD(v88);
            unsigned int v40 = v87;
            do
            {
              if (*v40 == v35) {
                goto LABEL_97;
              }
              if (*v40 == -2) {
                unint64_t v38 = v40;
              }
              ++v40;
              v39 -= 8;
            }
            while (v39);
            if (v38)
            {
              *unint64_t v38 = v35;
              --v89;
              goto LABEL_95;
            }
          }
          unsigned int v41 = v88;
          if (HIDWORD(v88) < v88)
          {
            ++HIDWORD(v88);
            *(void *)&v87[8 * v37] = v35;
LABEL_95:
            if (v92 >= (unint64_t)HIDWORD(v92)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            int v51 = (char *)v91 + 16 * v92;
            *int v51 = v35;
            v51[1] = v13 | 4;
            LODWORD(v92) = v92 + 1;
            goto LABEL_97;
          }
        }
        else
        {
          unsigned int v41 = v88;
        }
        if (3 * v41 <= 4 * (HIDWORD(v88) - v89))
        {
          if (v41 >= 0x40) {
            v41 *= 2;
          }
          else {
            unsigned int v41 = 128;
          }
        }
        else if (v41 - HIDWORD(v88) >= v41 >> 3)
        {
LABEL_76:
          unsigned int v42 = v41 - 1;
          unsigned int v43 = (v41 - 1) & ((v35 >> 4) ^ (v35 >> 9));
          int v44 = &v36[8 * v43];
          uint64_t v45 = *(void *)v44;
          if (*(void *)v44 == -1)
          {
            int v46 = 0;
          }
          else
          {
            int v46 = 0;
            int v47 = 1;
            do
            {
              if (v45 == v35) {
                goto LABEL_97;
              }
              if (v46) {
                BOOL v48 = 0;
              }
              else {
                BOOL v48 = v45 == -2;
              }
              if (v48) {
                int v46 = v44;
              }
              unsigned int v49 = v43 + v47++;
              unsigned int v43 = v49 & v42;
              int v44 = &v36[8 * (v49 & v42)];
              uint64_t v45 = *(void *)v44;
            }
            while (*(void *)v44 != -1);
          }
          if (v46) {
            unsigned int v50 = v46;
          }
          else {
            unsigned int v50 = v44;
          }
          if (*(void *)v50 != v35)
          {
            if (*(void *)v50 == -2) {
              --v89;
            }
            else {
              ++HIDWORD(v88);
            }
            *(void *)unsigned int v50 = v35;
            goto LABEL_95;
          }
LABEL_97:
          while (1)
          {
            uint64_t v29 = *(void *)(v29 + 8);
            if (!v29) {
              goto LABEL_58;
            }
            uint64_t v30 = *(void *)(v29 + 24);
            unsigned int v52 = *(unsigned __int8 *)(v30 + 16);
            if (v30) {
              BOOL v53 = v52 >= 0x1C;
            }
            else {
              BOOL v53 = 0;
            }
            if (v53 && v52 - 29 < 0xB) {
              goto LABEL_63;
            }
          }
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v86, v41);
        unsigned int v41 = v88;
        BOOL v36 = v87;
        goto LABEL_76;
      }
      memset(v87, 255, 8 * v88);
    }
    HIDWORD(v88) = 0;
    int v89 = 0;
    goto LABEL_48;
  }
  uint64_t v15 = *(void *)(SinglePredecessor + 8);
  while (1)
  {
    uint64_t v16 = *(void *)(v15 + 24);
    unsigned int v17 = *(unsigned __int8 *)(v16 + 16);
    BOOL v18 = v16 && v17 >= 0x1C;
    if (v18 && v17 - 29 <= 0xA) {
      break;
    }
    uint64_t v15 = *(void *)(v15 + 8);
    if (!v15) {
      goto LABEL_37;
    }
  }
  int v20 = 0;
LABEL_25:
  ++v20;
  while (1)
  {
    uint64_t v15 = *(void *)(v15 + 8);
    if (!v15) {
      break;
    }
    uint64_t v21 = *(void *)(v15 + 24);
    unsigned int v22 = *(unsigned __int8 *)(v21 + 16);
    if (v21) {
      BOOL v23 = v22 >= 0x1C;
    }
    else {
      BOOL v23 = 0;
    }
    if (v23 && v22 - 29 < 0xB) {
      goto LABEL_25;
    }
  }
  if ((2 * v20) >= 0x20) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
LABEL_37:
  while (1)
  {
    uint64_t v25 = *(void *)(v14 + 24);
    unsigned int v26 = *(unsigned __int8 *)(v25 + 16);
    BOOL v27 = v25 && v26 >= 0x1C;
    if (v27 && v26 - 29 < 0xB) {
      break;
    }
    uint64_t v14 = *(void *)(v14 + 8);
    if (!v14) {
      goto LABEL_46;
    }
  }
LABEL_113:
  int v55 = *(void **)(v25 + 40);
  if (v55 == (void *)v13) {
    goto LABEL_148;
  }
  unint64_t v56 = v87;
  uint64_t v57 = HIDWORD(v88);
  if (v87 == v86)
  {
    if (HIDWORD(v88))
    {
      uint64_t v58 = 0;
      uint64_t v59 = 8 * HIDWORD(v88);
      long long v60 = v87;
      do
      {
        if ((void *)*v60 == v55) {
          goto LABEL_148;
        }
        if (*v60 == -2) {
          uint64_t v58 = v60;
        }
        ++v60;
        v59 -= 8;
      }
      while (v59);
      if (v58)
      {
        *uint64_t v58 = v55;
        --v89;
        goto LABEL_146;
      }
    }
    unsigned int v61 = v88;
    if (HIDWORD(v88) < v88)
    {
      ++HIDWORD(v88);
      *(void *)&v87[8 * v57] = v55;
LABEL_146:
      if (v92 >= (unint64_t)HIDWORD(v92)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v71 = (char *)v91 + 16 * v92;
      *uint64_t v71 = v55;
      v71[1] = this & 0xFFFFFFFFFFFFFFFBLL;
      LODWORD(v92) = v92 + 1;
      goto LABEL_148;
    }
  }
  else
  {
    unsigned int v61 = v88;
  }
  if (3 * v61 <= 4 * (HIDWORD(v88) - v89))
  {
    if (v61 >= 0x40) {
      v61 *= 2;
    }
    else {
      unsigned int v61 = 128;
    }
  }
  else if (v61 - HIDWORD(v88) >= v61 >> 3)
  {
LABEL_127:
    unsigned int v62 = v61 - 1;
    unsigned int v63 = (v61 - 1) & ((v55 >> 4) ^ (v55 >> 9));
    int v64 = &v56[8 * v63];
    int v65 = *(void **)v64;
    if (*(void *)v64 == -1)
    {
      int v66 = 0;
    }
    else
    {
      int v66 = 0;
      int v67 = 1;
      do
      {
        if (v65 == v55) {
          goto LABEL_148;
        }
        if (v66) {
          BOOL v68 = 0;
        }
        else {
          BOOL v68 = v65 == (void *)-2;
        }
        if (v68) {
          int v66 = v64;
        }
        unsigned int v69 = v63 + v67++;
        unsigned int v63 = v69 & v62;
        int v64 = &v56[8 * (v69 & v62)];
        int v65 = *(void **)v64;
      }
      while (*(void *)v64 != -1);
    }
    if (v66) {
      unint64_t v70 = v66;
    }
    else {
      unint64_t v70 = v64;
    }
    if (*(void **)v70 != v55)
    {
      if (*(void *)v70 == -2) {
        --v89;
      }
      else {
        ++HIDWORD(v88);
      }
      *(void *)unint64_t v70 = v55;
      goto LABEL_146;
    }
LABEL_148:
    while (1)
    {
      uint64_t v14 = *(void *)(v14 + 8);
      if (!v14) {
        goto LABEL_46;
      }
      uint64_t v25 = *(void *)(v14 + 24);
      unsigned int v72 = *(unsigned __int8 *)(v25 + 16);
      if (v25) {
        BOOL v73 = v72 >= 0x1C;
      }
      else {
        BOOL v73 = 0;
      }
      if (v73 && v72 - 29 < 0xB) {
        goto LABEL_113;
      }
    }
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v86, v61);
  unsigned int v61 = v88;
  unint64_t v56 = v87;
  goto LABEL_127;
}

uint64_t llvm::TryToSimplifyUncondBranchFromEmptyBlock(llvm *this, llvm::BasicBlock *a2, llvm::DomTreeUpdater *a3)
{
  v414[62] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 5);
  unint64_t v391 = (void *)((char *)this + 40);
  if (v3) {
    uint64_t v4 = v3 - 24;
  }
  else {
    uint64_t v4 = 0;
  }
  if (*(unsigned __int8 *)(v4 + 16) - 29 >= 0xB) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(llvm **)(v4 - 32);
  if (v5 == this) {
    return 0;
  }
  uint64_t v6 = (uint64_t)this;
  if (llvm::BasicBlock::getSinglePredecessor(*(llvm::BasicBlock **)(v4 - 32))) {
    goto LABEL_120;
  }
  for (uint64_t i = *(void *)(v6 + 8); i; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v8 = *(void *)(i + 24);
    unsigned int v9 = *(unsigned __int8 *)(v8 + 16);
    if (v8) {
      BOOL v10 = v9 >= 0x1C;
    }
    else {
      BOOL v10 = 0;
    }
    if (v10 && v9 - 29 < 0xB) {
      break;
    }
  }
  uint64_t v410 = v414;
  uint64_t v411 = (uint64_t)v414;
  uint64_t v412 = 16;
  int v413 = 0;
  sub_1CC0BCF20((llvm::SmallPtrSetImplBase *)&v410, i, 0);
  char v12 = 0;
  uint64_t v13 = *((void *)v5 + 6);
  uint64_t v14 = v13 - 24;
  if (v13) {
    uint64_t v15 = v13 - 24;
  }
  else {
    uint64_t v15 = 0;
  }
  if (*(unsigned char *)(v15 + 16) != 83) {
    goto LABEL_116;
  }
  while (1)
  {
    uint64_t v16 = sub_1CBF73380(v14, v6);
    if (v16)
    {
      uint64_t v17 = v16;
      if (*(unsigned char *)(v16 + 16) == 83 && *(void *)(v16 + 40) == v6) {
        break;
      }
    }
    uint64_t v18 = sub_1CBF73380(v14, v6);
    int v19 = *(_DWORD *)(v14 + 20);
    uint64_t v20 = v19 & 0x7FFFFFF;
    if ((v19 & 0x7FFFFFF) != 0)
    {
      uint64_t v21 = 0;
      int v22 = v412 - 1;
      do
      {
        uint64_t v23 = v14 - 32 * v20;
        if ((v19 & 0x40000000) != 0) {
          uint64_t v23 = *(void *)(v14 - 8);
        }
        uint64_t v24 = *(void *)(v23 + 32 * *(unsigned int *)(v14 + 60) + 8 * v21);
        if ((void *)v411 == v410)
        {
          if (HIDWORD(v412))
          {
            uint64_t v25 = 0;
            while (*(void *)(v411 + v25) != v24)
            {
              v25 += 8;
              if (8 * HIDWORD(v412) == v25)
              {
                unsigned int v26 = HIDWORD(v412);
                goto LABEL_49;
              }
            }
            uint64_t v35 = (char *)(v411 + v25);
            unsigned int v26 = HIDWORD(v412);
            BOOL v36 = (void *)v411;
          }
          else
          {
            unsigned int v26 = 0;
LABEL_49:
            BOOL v36 = (void *)v411;
            uint64_t v35 = (char *)(v411 + 8 * HIDWORD(v412));
          }
        }
        else
        {
          unsigned int v27 = v22 & ((v24 >> 4) ^ (v24 >> 9));
          int v28 = (char *)(v411 + 8 * v27);
          uint64_t v29 = *(void *)v28;
          if (*(void *)v28 == -1)
          {
            uint64_t v30 = 0;
LABEL_51:
            if (v30) {
              int v28 = v30;
            }
            uint64_t v34 = *(void *)v28;
          }
          else
          {
            uint64_t v30 = 0;
            int v31 = 1;
            while (v29 != v24)
            {
              if (v30) {
                BOOL v32 = 0;
              }
              else {
                BOOL v32 = v29 == -2;
              }
              if (v32) {
                uint64_t v30 = v28;
              }
              unsigned int v33 = v27 + v31++;
              unsigned int v27 = v33 & v22;
              int v28 = (char *)(v411 + 8 * (v33 & v22));
              uint64_t v29 = *(void *)v28;
              if (*(void *)v28 == -1) {
                goto LABEL_51;
              }
            }
            uint64_t v34 = v24;
          }
          uint64_t v35 = v34 == v24 ? v28 : (char *)(v411 + 8 * v412);
          unsigned int v26 = HIDWORD(v412);
          BOOL v36 = v410;
        }
        if ((void *)v411 != v36) {
          unsigned int v26 = v412;
        }
        if (v35 != (char *)(v411 + 8 * v26))
        {
          uint64_t v37 = v14 - 32 * v20;
          if ((v19 & 0x40000000) != 0) {
            uint64_t v37 = *(void *)(v14 - 8);
          }
          uint64_t v38 = *(void *)(v37 + 32 * v21);
          if (v18 != v38
            && *(unsigned __int8 *)(v18 + 16) - 11 >= 2
            && *(unsigned __int8 *)(v38 + 16) - 11 > 1)
          {
            goto LABEL_115;
          }
        }
      }
      while (++v21 != v20);
    }
LABEL_67:
    uint64_t v13 = *(void *)(v13 + 8);
    uint64_t v14 = v13 - 24;
    if (v13) {
      uint64_t v39 = v13 - 24;
    }
    else {
      uint64_t v39 = 0;
    }
    if (*(unsigned char *)(v39 + 16) != 83)
    {
      char v12 = 0;
      goto LABEL_116;
    }
  }
  int v40 = *(_DWORD *)(v14 + 20);
  uint64_t v41 = v40 & 0x7FFFFFF;
  if ((v40 & 0x7FFFFFF) == 0) {
    goto LABEL_67;
  }
  uint64_t v42 = 0;
  while (1)
  {
    uint64_t v43 = (v40 & 0x40000000) != 0 ? *(void *)(v14 - 8) : v14 - 32 * (v40 & 0x7FFFFFF);
    uint64_t v44 = *(void *)(v43 + 32 * *(unsigned int *)(v14 + 60) + 8 * v42);
    uint64_t v45 = v410;
    if ((void *)v411 == v410)
    {
      int v46 = HIDWORD(v412);
      int v47 = (char *)(v411 + 8 * HIDWORD(v412));
      if (HIDWORD(v412))
      {
        uint64_t v48 = 0;
        while (*(void *)(v411 + v48) != v44)
        {
          v48 += 8;
          if (8 * HIDWORD(v412) == v48) {
            goto LABEL_96;
          }
        }
        int v47 = (char *)(v411 + v48);
      }
LABEL_96:
      uint64_t v45 = (void *)v411;
    }
    else
    {
      int v49 = v412 - 1;
      unsigned int v50 = (v412 - 1) & ((v44 >> 4) ^ (v44 >> 9));
      int v47 = (char *)(v411 + 8 * v50);
      uint64_t v51 = *(void *)v47;
      if (*(void *)v47 == -1)
      {
        unsigned int v52 = 0;
LABEL_110:
        if (v52) {
          int v47 = v52;
        }
        int v46 = HIDWORD(v412);
        if (*(void *)v47 != v44) {
          int v47 = (char *)(v411 + 8 * v412);
        }
      }
      else
      {
        unsigned int v52 = 0;
        int v53 = 1;
        while (v51 != v44)
        {
          if (v52) {
            BOOL v54 = 0;
          }
          else {
            BOOL v54 = v51 == -2;
          }
          if (v54) {
            unsigned int v52 = v47;
          }
          unsigned int v55 = v50 + v53++;
          unsigned int v50 = v55 & v49;
          int v47 = (char *)(v411 + 8 * (v55 & v49));
          uint64_t v51 = *(void *)v47;
          if (*(void *)v47 == -1) {
            goto LABEL_110;
          }
        }
        int v46 = HIDWORD(v412);
      }
    }
    unsigned int v56 = (void *)v411 == v45 ? v46 : v412;
    if (v47 != (char *)(v411 + 8 * v56))
    {
      uint64_t v57 = sub_1CBF73380(v17, v44);
      int v40 = *(_DWORD *)(v14 + 20);
      uint64_t v58 = (v40 & 0x40000000) != 0 ? *(void *)(v14 - 8) : v14 - 32 * (v40 & 0x7FFFFFF);
      uint64_t v59 = *(void *)(v58 + 32 * v42);
      if (v57 != v59
        && *(unsigned __int8 *)(v57 + 16) - 11 >= 2
        && *(unsigned __int8 *)(v59 + 16) - 11 > 1)
      {
        break;
      }
    }
    if (++v42 == v41) {
      goto LABEL_67;
    }
  }
LABEL_115:
  char v12 = 1;
LABEL_116:
  if ((void *)v411 != v410) {
    free((void *)v411);
  }
  if (v12) {
    return 0;
  }
LABEL_120:
  if (llvm::BasicBlock::getSinglePredecessor(v5))
  {
LABEL_121:
    uint64_t v61 = *(void *)(v6 + 8);
    if (v61)
    {
      while (1)
      {
        uint64_t v62 = *(void *)(v61 + 24);
        unsigned int v63 = *(unsigned __int8 *)(v62 + 16);
        BOOL v64 = v62 && v63 >= 0x1C;
        if (v64 && v63 - 29 <= 0xA) {
          break;
        }
        uint64_t v61 = *(void *)(v61 + 8);
        if (!v61) {
          goto LABEL_131;
        }
      }
LABEL_578:
      uint64_t v316 = *(void *)(v62 + 40);
      uint64_t v317 = *(void *)(v316 + 40);
      if (v317 != v316 + 40)
      {
        uint64_t v318 = v317 - 24;
        if (!v317) {
          uint64_t v318 = 0;
        }
        unsigned int v319 = *(unsigned __int8 *)(v318 + 16) - 40;
        if (v319 < 0xFFFFFFF5) {
          uint64_t v318 = 0;
        }
        if (v317)
        {
          if (*(unsigned char *)(v318 + 16) == 39 && v319 >= 0xFFFFFFF5)
          {
            uint64_t v312 = *(unsigned int *)(v318 + 80);
            uint64_t v321 = v318 - 32 * v312;
            if (v5 != *(llvm **)(v321 - 64))
            {
              if (!v312) {
                goto LABEL_570;
              }
              uint64_t v311 = (llvm **)(v321 - 32);
              while (v5 != *v311)
              {
                v311 += 4;
                if (!--v312) {
                  goto LABEL_570;
                }
              }
            }
            return 0;
          }
        }
      }
LABEL_570:
      while (1)
      {
        uint64_t v61 = *(void *)(v61 + 8);
        if (!v61) {
          break;
        }
        uint64_t v62 = *(void *)(v61 + 24);
        unsigned int v313 = *(unsigned __int8 *)(v62 + 16);
        if (v62) {
          BOOL v314 = v313 >= 0x1C;
        }
        else {
          BOOL v314 = 0;
        }
        if (v314 && v313 - 29 < 0xB) {
          goto LABEL_578;
        }
      }
    }
LABEL_131:
    int v66 = (void *)*v391;
    uint64_t v392 = v6;
    v393 = v5;
    if ((void *)*v391 != v391)
    {
      int v67 = v66 ? (unsigned __int8 *)(v66 - 3) : 0;
      if (v67[16] - 29 <= 0xA && (v67[23] & 0x20) != 0)
      {
        uint64_t v68 = ***(void ***)v67;
        uint64_t v410 = v67;
        int v69 = *(_DWORD *)(v68 + 2496);
        if (!v69)
        {
          int v328 = 0;
          goto LABEL_612;
        }
        uint64_t v70 = *(void *)(v68 + 2480);
        int v71 = v69 - 1;
        unsigned int v72 = v71 & ((v67 >> 4) ^ (v67 >> 9));
        BOOL v73 = (unsigned __int8 **)(v70 + 40 * v72);
        uint64_t v74 = *v73;
        if (*v73 != v67)
        {
          uint64_t v75 = 0;
          int v76 = 1;
          while (v74 != (unsigned __int8 *)-4096)
          {
            if (v75) {
              BOOL v77 = 0;
            }
            else {
              BOOL v77 = v74 == (unsigned __int8 *)-8192;
            }
            if (v77) {
              uint64_t v75 = v73;
            }
            unsigned int v78 = v72 + v76++;
            unsigned int v72 = v78 & v71;
            BOOL v73 = (unsigned __int8 **)(v70 + 40 * v72);
            uint64_t v74 = *v73;
            if (*v73 == v67) {
              goto LABEL_147;
            }
          }
          if (v75) {
            int v328 = v75;
          }
          else {
            int v328 = v73;
          }
LABEL_612:
          BOOL v73 = (unsigned __int8 **)sub_1CC609054(v68 + 2480, (uint64_t)&v410, (uint64_t *)&v410, v328);
          unint64_t v329 = (unsigned __int8 *)v410;
          v73[3] = 0;
          v73[4] = 0;
          *BOOL v73 = v329;
          v73[1] = (unsigned __int8 *)(v73 + 3);
          v73[2] = (unsigned __int8 *)0x100000000;
        }
LABEL_147:
        uint64_t v79 = *((unsigned int *)v73 + 4);
        if (v79)
        {
          unint64_t v80 = v73[1] + 8;
          uint64_t v81 = 16 * v79;
          while (*((_DWORD *)v80 - 2) != 18)
          {
            v80 += 2;
            v81 -= 16;
            if (!v81) {
              goto LABEL_151;
            }
          }
          if (*v80)
          {
            uint64_t v323 = *(void *)(v6 + 8);
            if (v323)
            {
              while (1)
              {
                uint64_t v324 = *(void *)(v323 + 24);
                unsigned int v325 = *(unsigned __int8 *)(v324 + 16);
                BOOL v326 = v324 && v325 >= 0x1C;
                if (v326 && v325 - 29 <= 0xA) {
                  break;
                }
                uint64_t v323 = *(void *)(v323 + 8);
                if (!v323) {
                  goto LABEL_151;
                }
              }
LABEL_613:
              uint64_t v330 = *(void *)(v324 + 40);
              uint64_t v331 = *(void *)(v330 + 40);
              if (v331 != v330 + 40)
              {
                uint64_t v332 = v331 ? (unsigned __int8 *)(v331 - 24) : 0;
                if (v332[16] - 29 <= 0xA && (v332[23] & 0x20) != 0)
                {
                  uint64_t v333 = ***(void ***)v332;
                  uint64_t v410 = v332;
                  int v334 = *(_DWORD *)(v333 + 2496);
                  if (v334)
                  {
                    uint64_t v335 = *(void *)(v333 + 2480);
                    int v336 = v334 - 1;
                    unsigned int v337 = v336 & ((v332 >> 4) ^ (v332 >> 9));
                    uint64_t v338 = (unsigned __int8 **)(v335 + 40 * v337);
                    uint64_t v339 = *v338;
                    if (*v338 != v332)
                    {
                      v340 = 0;
                      int v341 = 1;
                      while (v339 != (unsigned __int8 *)-4096)
                      {
                        if (v340) {
                          BOOL v342 = 0;
                        }
                        else {
                          BOOL v342 = v339 == (unsigned __int8 *)-8192;
                        }
                        if (v342) {
                          v340 = v338;
                        }
                        unsigned int v343 = v337 + v341++;
                        unsigned int v337 = v343 & v336;
                        uint64_t v338 = (unsigned __int8 **)(v335 + 40 * v337);
                        uint64_t v339 = *v338;
                        if (*v338 == v332) {
                          goto LABEL_629;
                        }
                      }
                      if (v340) {
                        uint64_t v350 = v340;
                      }
                      else {
                        uint64_t v350 = v338;
                      }
LABEL_647:
                      uint64_t v338 = (unsigned __int8 **)sub_1CC609054(v333 + 2480, (uint64_t)&v410, (uint64_t *)&v410, v350);
                      uint64_t v351 = (unsigned __int8 *)v410;
                      v338[4] = 0;
                      v338[3] = 0;
                      *uint64_t v338 = v351;
                      v338[1] = (unsigned __int8 *)(v338 + 3);
                      uint64_t v338[2] = (unsigned __int8 *)0x100000000;
                      uint64_t v6 = v392;
                      uint64_t v5 = v393;
                    }
LABEL_629:
                    uint64_t v344 = *((unsigned int *)v338 + 4);
                    if (!v344) {
                      goto LABEL_635;
                    }
                    unint64_t v345 = v338[1] + 8;
                    uint64_t v346 = 16 * v344;
                    while (*((_DWORD *)v345 - 2) != 18)
                    {
                      v345 += 2;
                      v346 -= 16;
                      if (!v346) {
                        goto LABEL_635;
                      }
                    }
                    if (!*v345) {
                      goto LABEL_635;
                    }
                    return 0;
                  }
                  uint64_t v350 = 0;
                  goto LABEL_647;
                }
              }
LABEL_635:
              while (1)
              {
                uint64_t v323 = *(void *)(v323 + 8);
                if (!v323) {
                  break;
                }
                uint64_t v324 = *(void *)(v323 + 24);
                unsigned int v347 = *(unsigned __int8 *)(v324 + 16);
                if (v324) {
                  BOOL v348 = v347 >= 0x1C;
                }
                else {
                  BOOL v348 = 0;
                }
                if (v348 && v347 - 29 < 0xB) {
                  goto LABEL_613;
                }
              }
            }
          }
        }
      }
    }
LABEL_151:
    uint64_t v410 = &v412;
    uint64_t v411 = 0x2000000000;
    if (a2)
    {
      uint64_t v400 = v404;
      uint64_t v401 = (uint64_t)v404;
      uint64_t v402 = 8;
      int v403 = 0;
      for (uint64_t j = *((void *)v5 + 1); j; uint64_t j = *(void *)(j + 8))
      {
        uint64_t v83 = *(void *)(j + 24);
        unsigned int v84 = *(unsigned __int8 *)(v83 + 16);
        if (v83) {
          BOOL v85 = v84 >= 0x1C;
        }
        else {
          BOOL v85 = 0;
        }
        if (v85 && v84 - 29 < 0xB) {
          break;
        }
      }
      unint64_t v405 = v409;
      uint64_t v406 = (uint64_t)v409;
      uint64_t v407 = 8;
      int v408 = 0;
      sub_1CC0BCF20((llvm::SmallPtrSetImplBase *)&v405, j, 0);
      uint64_t v87 = *(void *)(v6 + 8);
      if (v87)
      {
        uint64_t v88 = *(void *)(v6 + 8);
        while (1)
        {
          uint64_t v89 = *(void *)(v88 + 24);
          unsigned int v90 = *(unsigned __int8 *)(v89 + 16);
          BOOL v91 = v89 && v90 >= 0x1C;
          if (v91 && v90 - 29 <= 0xA) {
            break;
          }
          uint64_t v88 = *(void *)(v88 + 8);
          if (!v88) {
            goto LABEL_173;
          }
        }
        int v254 = 0;
LABEL_426:
        ++v254;
        while (1)
        {
          uint64_t v88 = *(void *)(v88 + 8);
          if (!v88) {
            break;
          }
          uint64_t v255 = *(void *)(v88 + 24);
          unsigned int v256 = *(unsigned __int8 *)(v255 + 16);
          if (v255) {
            BOOL v257 = v256 >= 0x1C;
          }
          else {
            BOOL v257 = 0;
          }
          if (v257 && v256 - 29 < 0xB) {
            goto LABEL_426;
          }
        }
      }
      else
      {
LABEL_173:
        int v254 = 0;
      }
      if ((2 * v254) + (unint64_t)v411 >= HIDWORD(v411)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v87)
      {
        while (1)
        {
          uint64_t v93 = *(void *)(v87 + 24);
          unsigned int v94 = *(unsigned __int8 *)(v93 + 16);
          BOOL v95 = v93 && v94 >= 0x1C;
          if (v95 && v94 - 29 < 0xB) {
            break;
          }
          uint64_t v87 = *(void *)(v87 + 8);
          if (!v87) {
            goto LABEL_186;
          }
        }
LABEL_436:
        uint64_t v259 = *(void *)(v93 + 40);
        int v260 = v405;
        if ((void *)v406 == v405)
        {
          unsigned int v261 = HIDWORD(v407);
          BOOL v262 = (char *)(v406 + 8 * HIDWORD(v407));
          if (HIDWORD(v407))
          {
            uint64_t v263 = 0;
            while (*(void *)(v406 + v263) != v259)
            {
              v263 += 8;
              if (8 * HIDWORD(v407) == v263) {
                goto LABEL_455;
              }
            }
            BOOL v262 = (char *)(v406 + v263);
          }
LABEL_455:
          int v260 = (void *)v406;
        }
        else
        {
          int v264 = v407 - 1;
          unsigned int v265 = (v407 - 1) & ((v259 >> 4) ^ (v259 >> 9));
          BOOL v262 = (char *)(v406 + 8 * v265);
          uint64_t v266 = *(void *)v262;
          if (*(void *)v262 == -1)
          {
            uint64_t v267 = 0;
LABEL_485:
            if (v267) {
              BOOL v262 = v267;
            }
            unsigned int v261 = HIDWORD(v407);
            if (*(void *)v262 != v259) {
              BOOL v262 = (char *)(v406 + 8 * v407);
            }
          }
          else
          {
            uint64_t v267 = 0;
            int v268 = 1;
            while (v266 != v259)
            {
              if (v267) {
                BOOL v269 = 0;
              }
              else {
                BOOL v269 = v266 == -2;
              }
              if (v269) {
                uint64_t v267 = v262;
              }
              unsigned int v270 = v265 + v268++;
              unsigned int v265 = v270 & v264;
              BOOL v262 = (char *)(v406 + 8 * (v270 & v264));
              uint64_t v266 = *(void *)v262;
              if (*(void *)v262 == -1) {
                goto LABEL_485;
              }
            }
            unsigned int v261 = HIDWORD(v407);
          }
        }
        if ((void *)v406 == v260) {
          unsigned int v271 = v261;
        }
        else {
          unsigned int v271 = v407;
        }
        if (v262 != (char *)(v406 + 8 * v271)) {
          goto LABEL_500;
        }
        uint64_t v272 = v401;
        uint64_t v273 = HIDWORD(v402);
        if ((void *)v401 == v400)
        {
          if (HIDWORD(v402))
          {
            uint64_t v274 = 0;
            uint64_t v275 = 8 * HIDWORD(v402);
            uint64_t v276 = (void *)v401;
            do
            {
              if (*v276 == v259) {
                goto LABEL_500;
              }
              if (*v276 == -2) {
                uint64_t v274 = v276;
              }
              ++v276;
              v275 -= 8;
            }
            while (v275);
            if (v274)
            {
              *uint64_t v274 = v259;
              --v403;
              goto LABEL_498;
            }
          }
          unsigned int v277 = v402;
          if (HIDWORD(v402) < v402)
          {
            ++HIDWORD(v402);
            *(void *)(v401 + 8 * v273) = v259;
LABEL_498:
            if (v411 >= (unint64_t)HIDWORD(v411)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            char v287 = (char *)v410 + 16 * v411;
            *char v287 = v259;
            v287[1] = (unint64_t)v5 & 0xFFFFFFFFFFFFFFFBLL;
            LODWORD(v411) = v411 + 1;
            goto LABEL_500;
          }
        }
        else
        {
          unsigned int v277 = v402;
        }
        if (3 * v277 <= 4 * (HIDWORD(v402) - v403))
        {
          if (v277 >= 0x40) {
            v277 *= 2;
          }
          else {
            unsigned int v277 = 128;
          }
        }
        else if (v277 - HIDWORD(v402) >= v277 >> 3)
        {
          goto LABEL_473;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v400, v277);
        unsigned int v277 = v402;
        uint64_t v272 = v401;
LABEL_473:
        unsigned int v278 = v277 - 1;
        unsigned int v279 = (v277 - 1) & ((v259 >> 4) ^ (v259 >> 9));
        int v280 = (void *)(v272 + 8 * v279);
        uint64_t v281 = *v280;
        if (*v280 == -1)
        {
          int v282 = 0;
        }
        else
        {
          int v282 = 0;
          int v283 = 1;
          do
          {
            if (v281 == v259) {
              goto LABEL_500;
            }
            if (v282) {
              BOOL v284 = 0;
            }
            else {
              BOOL v284 = v281 == -2;
            }
            if (v284) {
              int v282 = v280;
            }
            unsigned int v285 = v279 + v283++;
            unsigned int v279 = v285 & v278;
            int v280 = (void *)(v272 + 8 * (v285 & v278));
            uint64_t v281 = *v280;
          }
          while (*v280 != -1);
        }
        if (v282) {
          uint64_t v286 = v282;
        }
        else {
          uint64_t v286 = v280;
        }
        if (*v286 != v259)
        {
          if (*v286 == -2) {
            --v403;
          }
          else {
            ++HIDWORD(v402);
          }
          *uint64_t v286 = v259;
          goto LABEL_498;
        }
LABEL_500:
        while (1)
        {
          uint64_t v87 = *(void *)(v87 + 8);
          if (!v87) {
            break;
          }
          uint64_t v93 = *(void *)(v87 + 24);
          unsigned int v288 = *(unsigned __int8 *)(v93 + 16);
          if (v93) {
            BOOL v289 = v288 >= 0x1C;
          }
          else {
            BOOL v289 = 0;
          }
          if (v289 && v288 - 29 < 0xB) {
            goto LABEL_436;
          }
        }
      }
LABEL_186:
      if ((void *)v401 == v400)
      {
LABEL_187:
        HIDWORD(v402) = 0;
        int v403 = 0;
      }
      else
      {
        if (v402 < 0x21 || 4 * (HIDWORD(v402) - v403) >= v402)
        {
          memset((void *)v401, 255, 8 * v402);
          goto LABEL_187;
        }
        llvm::SmallPtrSetImplBase::shrink_and_clear(&v400);
      }
      uint64_t v97 = *(void *)(v6 + 8);
      if (v97)
      {
        while (1)
        {
          uint64_t v98 = *(void *)(v97 + 24);
          unsigned int v99 = *(unsigned __int8 *)(v98 + 16);
          BOOL v100 = v98 && v99 >= 0x1C;
          if (v100 && v99 - 29 < 0xB) {
            break;
          }
          uint64_t v97 = *(void *)(v97 + 8);
          if (!v97) {
            goto LABEL_198;
          }
        }
LABEL_516:
        uint64_t v291 = *(void *)(v98 + 40);
        uint64_t v292 = v401;
        uint64_t v293 = HIDWORD(v402);
        if ((void *)v401 == v400)
        {
          if (HIDWORD(v402))
          {
            uint64_t v294 = 0;
            uint64_t v295 = 8 * HIDWORD(v402);
            uint64_t v296 = (void *)v401;
            do
            {
              if (*v296 == v291) {
                goto LABEL_550;
              }
              if (*v296 == -2) {
                uint64_t v294 = v296;
              }
              ++v296;
              v295 -= 8;
            }
            while (v295);
            if (v294)
            {
              *uint64_t v294 = v291;
              --v403;
              goto LABEL_548;
            }
          }
          unsigned int v297 = v402;
          if (HIDWORD(v402) < v402)
          {
            ++HIDWORD(v402);
            *(void *)(v401 + 8 * v293) = v291;
LABEL_548:
            if (v411 >= (unint64_t)HIDWORD(v411)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v307 = (char *)v410 + 16 * v411;
            *uint64_t v307 = v291;
            v307[1] = v6 | 4;
            LODWORD(v411) = v411 + 1;
            goto LABEL_550;
          }
        }
        else
        {
          unsigned int v297 = v402;
        }
        if (3 * v297 <= 4 * (HIDWORD(v402) - v403))
        {
          if (v297 >= 0x40) {
            v297 *= 2;
          }
          else {
            unsigned int v297 = 128;
          }
        }
        else if (v297 - HIDWORD(v402) >= v297 >> 3)
        {
          goto LABEL_529;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v400, v297);
        unsigned int v297 = v402;
        uint64_t v292 = v401;
LABEL_529:
        unsigned int v298 = v297 - 1;
        unsigned int v299 = (v297 - 1) & ((v291 >> 4) ^ (v291 >> 9));
        unsigned int v300 = (void *)(v292 + 8 * v299);
        uint64_t v301 = *v300;
        if (*v300 == -1)
        {
          uint64_t v302 = 0;
        }
        else
        {
          uint64_t v302 = 0;
          int v303 = 1;
          do
          {
            if (v301 == v291) {
              goto LABEL_550;
            }
            if (v302) {
              BOOL v304 = 0;
            }
            else {
              BOOL v304 = v301 == -2;
            }
            if (v304) {
              uint64_t v302 = v300;
            }
            unsigned int v305 = v299 + v303++;
            unsigned int v299 = v305 & v298;
            unsigned int v300 = (void *)(v292 + 8 * (v305 & v298));
            uint64_t v301 = *v300;
          }
          while (*v300 != -1);
        }
        if (v302) {
          int v306 = v302;
        }
        else {
          int v306 = v300;
        }
        if (*v306 != v291)
        {
          if (*v306 == -2) {
            --v403;
          }
          else {
            ++HIDWORD(v402);
          }
          *int v306 = v291;
          goto LABEL_548;
        }
LABEL_550:
        while (1)
        {
          uint64_t v97 = *(void *)(v97 + 8);
          if (!v97) {
            break;
          }
          uint64_t v98 = *(void *)(v97 + 24);
          unsigned int v308 = *(unsigned __int8 *)(v98 + 16);
          if (v98) {
            BOOL v309 = v308 >= 0x1C;
          }
          else {
            BOOL v309 = 0;
          }
          if (v309 && v308 - 29 < 0xB) {
            goto LABEL_516;
          }
        }
      }
LABEL_198:
      if (v411 >= HIDWORD(v411)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v102 = (uint64_t *)((char *)v410 + 16 * v411);
      *int v102 = v6;
      v102[1] = (unint64_t)v5 | 4;
      LODWORD(v411) = v411 + 1;
      if ((void *)v406 != v405) {
        free((void *)v406);
      }
      if ((void *)v401 != v400) {
        free((void *)v401);
      }
    }
    uint64_t v103 = *((void *)v5 + 6);
    if (v103) {
      uint64_t v104 = v103 - 24;
    }
    else {
      uint64_t v104 = 0;
    }
    if (*(unsigned char *)(v104 + 16) == 83)
    {
      for (uint64_t k = *(void *)(v6 + 8); k; uint64_t k = *(void *)(k + 8))
      {
        uint64_t v106 = *(void *)(k + 24);
        unsigned int v107 = *(unsigned __int8 *)(v106 + 16);
        if (v106) {
          BOOL v108 = v107 >= 0x1C;
        }
        else {
          BOOL v108 = 0;
        }
        if (v108 && v107 - 29 < 0xB) {
          break;
        }
      }
      uint64_t v400 = &v402;
      uint64_t v401 = 0x1000000000;
      sub_1CBF846A4((uint64_t)&v400, k, 0);
      uint64_t v110 = *((void *)v5 + 6);
      uint64_t v111 = v110 - 24;
      if (v110) {
        uint64_t v112 = v110 - 24;
      }
      else {
        uint64_t v112 = 0;
      }
      if (*(unsigned char *)(v112 + 16) == 83)
      {
        while (1)
        {
          int v113 = *(_DWORD *)(v111 + 20);
          uint64_t v114 = v113 & 0x7FFFFFF;
          uint64_t v394 = v110;
          if ((v113 & 0x7FFFFFF) != 0)
          {
            uint64_t v115 = 0;
            while (1)
            {
              uint64_t v116 = v111 - 32 * v114;
              if ((v113 & 0x40000000) != 0) {
                uint64_t v116 = *(void *)(v111 - 8);
              }
              if (*(void *)(v116 + 32 * *(unsigned int *)(v111 + 60) + 8 * v115) == v6) {
                break;
              }
              if (v114 == ++v115) {
                goto LABEL_227;
              }
            }
            uint64_t v117 = v115;
          }
          else
          {
LABEL_227:
            uint64_t v117 = 0xFFFFFFFFLL;
          }
          if ((v113 & 0x40000000) != 0)
          {
            uint64_t v118 = *(void *)(v111 - 8);
            uint64_t v119 = (uint64_t *)(v118 + 32 * v117);
            int v120 = (uint64_t *)(v118 + 32 * v114);
          }
          else
          {
            uint64_t v118 = v111 - 32 * v114;
            uint64_t v119 = (uint64_t *)(v118 + 32 * v117);
            int v120 = (uint64_t *)v111;
          }
          uint64_t v121 = *v119;
          sub_1CC5E4108((uint64_t)&v405, v119 + 4, v120, v118 + 32 * v117);
          int v122 = *(_DWORD *)(v111 + 20);
          if ((v122 & 0x40000000) != 0)
          {
            uint64_t v123 = *(void *)(v111 - 8);
            uint64_t v124 = *(unsigned int *)(v111 + 60);
            uint64_t v125 = v123 + 32 * v124;
            uint64_t v126 = v122 & 0x7FFFFFF;
          }
          else
          {
            uint64_t v126 = v122 & 0x7FFFFFF;
            uint64_t v123 = v111 - 32 * v126;
            uint64_t v124 = *(unsigned int *)(v111 + 60);
            uint64_t v125 = v123 + 32 * v124;
          }
          unsigned int v127 = (unsigned char *)(v125 + 8 * v126);
          unsigned int v128 = (unsigned char *)(v125 + 8 * v117 + 8);
          size_t v129 = v127 - v128;
          if (v127 != v128)
          {
            memmove((void *)(v123 + 32 * v124 + 8 * v117), v128, v129);
            int v122 = *(_DWORD *)(v111 + 20);
          }
          if ((v122 & 0x40000000) != 0)
          {
            uint64_t v130 = *(void *)(v111 - 8);
            uint64_t v131 = v122 & 0x7FFFFFF;
          }
          else
          {
            uint64_t v131 = v122 & 0x7FFFFFF;
            uint64_t v130 = v111 - 32 * v131;
          }
          uint64_t v132 = v130 + 32 * v131;
          if (*(void *)(v132 - 32))
          {
            **(void **)(v132 - 16) = *(void *)(v132 - 24);
            uint64_t v133 = *(void *)(v132 - 24);
            if (v133) {
              *(void *)(v133 + 16) = *(void *)(v132 - 16);
            }
          }
          *(void *)(v132 - 32) = 0;
          int v134 = *(_DWORD *)(v111 + 20);
          *(_DWORD *)(v111 + 20) = v134 & 0xF8000000 | (v134 - 1) & 0x7FFFFFF;
          v398[0] = 0;
          v398[1] = 0;
          int v399 = 0;
          uint64_t v135 = (v134 - 1) & 0x7FFFFFF;
          if (((v134 - 1) & 0x7FFFFFF) != 0)
          {
            uint64_t v136 = 0;
            while (1)
            {
              int v137 = *(_DWORD *)(v111 + 20);
              if ((v137 & 0x40000000) != 0) {
                uint64_t v138 = *(void *)(v111 - 8);
              }
              else {
                uint64_t v138 = v111 - 32 * (v137 & 0x7FFFFFF);
              }
              uint64_t v139 = *(unsigned __int8 **)(v138 + 32 * v136);
              if (v139[16] - 11 < 2) {
                goto LABEL_261;
              }
              uint64_t v140 = *(void **)(v138 + 32 * *(unsigned int *)(v111 + 60) + 8 * v136);
              unint64_t v405 = v140;
              uint64_t v406 = (uint64_t)v139;
              if (!v399) {
                break;
              }
              unsigned int v141 = (v399 - 1) & ((v140 >> 4) ^ (v140 >> 9));
              uint64_t v142 = (uint64_t *)(v398[0] + 16 * v141);
              int v143 = (void *)*v142;
              if (v140 != (void *)*v142)
              {
                uint64_t v144 = 0;
                int v145 = 1;
                while (v143 != (void *)-4096)
                {
                  if (v144) {
                    BOOL v146 = 0;
                  }
                  else {
                    BOOL v146 = v143 == (void *)-8192;
                  }
                  if (v146) {
                    uint64_t v144 = v142;
                  }
                  unsigned int v147 = v141 + v145++;
                  unsigned int v141 = v147 & (v399 - 1);
                  uint64_t v142 = (uint64_t *)(v398[0] + 16 * v141);
                  int v143 = (void *)*v142;
                  if (v140 == (void *)*v142) {
                    goto LABEL_261;
                  }
                }
                if (v144) {
                  uint64_t v148 = v144;
                }
                else {
                  uint64_t v148 = v142;
                }
                goto LABEL_260;
              }
LABEL_261:
              if (++v136 == v135) {
                goto LABEL_264;
              }
            }
            uint64_t v148 = 0;
LABEL_260:
            uint64_t v149 = sub_1CC0A3E2C((uint64_t)v398, (uint64_t)&v405, (uint64_t *)&v405, v148);
            *uint64_t v149 = (uint64_t)v405;
            v149[1] = v406;
            goto LABEL_261;
          }
LABEL_264:
          uint64_t v395 = v121;
          if (*(unsigned char *)(v121 + 16) == 83 && *(void *)(v121 + 40) == v6)
          {
            int v178 = *(_DWORD *)(v121 + 20);
            uint64_t v179 = v178 & 0x7FFFFFF;
            if ((v178 & 0x7FFFFFF) != 0)
            {
              uint64_t v180 = 0;
              do
              {
                int v181 = *(_DWORD *)(v121 + 20);
                if ((v181 & 0x40000000) != 0) {
                  uint64_t v182 = *(void *)(v121 - 8);
                }
                else {
                  uint64_t v182 = v121 - 32 * (v181 & 0x7FFFFFF);
                }
                uint64_t v183 = *(void *)(v182 + 32 * *(unsigned int *)(v121 + 60) + 8 * v180);
                uint64_t v184 = sub_1CD190E88(*(void *)(v182 + 32 * v180), v183, (uint64_t)v398);
                int v185 = *(_DWORD *)(v111 + 20);
                uint64_t v186 = v185 & 0x7FFFFFF;
                if ((v185 & 0x7FFFFFF) == *(_DWORD *)(v111 + 60))
                {
                  unsigned int v199 = v186 + (v186 >> 1);
                  if (v199 <= 2) {
                    uint64_t v200 = 2;
                  }
                  else {
                    uint64_t v200 = v199;
                  }
                  *(_DWORD *)(v111 + 60) = v200;
                  if ((v185 & 0x40000000) != 0) {
                    int v201 = *(uint64_t **)(v111 - 8);
                  }
                  else {
                    int v201 = (uint64_t *)(v111 - 32 * v186);
                  }
                  __pa = v201;
                  uint64_t v202 = operator new(40 * v200);
                  *(void *)(v111 - 8) = v202;
                  int v203 = v202;
                  do
                  {
                    void *v203 = 0;
                    v203[1] = 0;
                    v203[2] = 0;
                    v203[3] = v111;
                    v203 += 4;
                  }
                  while (v203 != &v202[4 * v200]);
                  int v204 = *(_DWORD *)(v111 + 20);
                  if ((v204 & 0x40000000) != 0) {
                    uint64_t v205 = (uint64_t)v202;
                  }
                  else {
                    uint64_t v205 = v111 - 32 * (v204 & 0x7FFFFFF);
                  }
                  sub_1CC5E4108((uint64_t)&v405, __pa, &__pa[4 * v186], v205);
                  if (v186)
                  {
                    memmove((void *)(v205 + 32 * v200), &__pa[4 * v186], 8 * v186);
                    uint64_t v206 = 4 * v186;
                    do
                    {
                      char v207 = &__pa[v206];
                      if (__pa[v206 - 4])
                      {
                        *(void *)*(v207 - 2) = *(v207 - 3);
                        uint64_t v208 = *(v207 - 3);
                        if (v208) {
                          *(void *)(v208 + 16) = *(v207 - 2);
                        }
                      }
                      v206 -= 4;
                    }
                    while (v206 * 8);
                  }
                  operator delete(__pa);
                  int v185 = *(_DWORD *)(v111 + 20);
                  uint64_t v121 = v395;
                }
                uint64_t v187 = (v185 + 1) & 0x7FFFFFF;
                *(_DWORD *)(v111 + 20) = v185 & 0xF8000000 | (v185 + 1) & 0x7FFFFFF;
                if ((v185 & 0x40000000) != 0) {
                  uint64_t v188 = *(void *)(v111 - 8);
                }
                else {
                  uint64_t v188 = v111 - 32 * v187;
                }
                uint64_t v189 = (v187 - 1);
                uint64_t v190 = v188 + 32 * v189;
                if (*(void *)v190)
                {
                  **(void **)(v190 + 16) = *(void *)(v190 + 8);
                  uint64_t v198 = *(void *)(v190 + 8);
                  if (v198) {
                    *(void *)(v198 + 16) = *(void *)(v190 + 16);
                  }
                }
                *(void *)uint64_t v190 = v184;
                if (v184)
                {
                  uint64_t v193 = *(void *)(v184 + 8);
                  int v192 = (void *)(v184 + 8);
                  uint64_t v191 = v193;
                  uint64_t v194 = v188 + 32 * v189;
                  *(void *)(v194 + 8) = v193;
                  if (v193) {
                    *(void *)(v191 + 16) = v194 + 8;
                  }
                  *(void *)(v194 + 16) = v192;
                  *int v192 = v190;
                }
                int v195 = *(_DWORD *)(v111 + 20);
                uint64_t v196 = v195 & 0x7FFFFFF;
                if ((v195 & 0x40000000) != 0) {
                  uint64_t v197 = *(void *)(v111 - 8);
                }
                else {
                  uint64_t v197 = v111 - 32 * v196;
                }
                *(void *)(v197 + 32 * *(unsigned int *)(v111 + 60) + 8 * (v196 - 1)) = v183;
                ++v180;
              }
              while (v180 != v179);
            }
          }
          else
          {
            uint64_t v150 = v401;
            if (v401)
            {
              uint64_t v151 = 0;
              do
              {
                uint64_t v152 = *((void *)v400 + v151);
                uint64_t v153 = sub_1CD190E88(v121, v152, (uint64_t)v398);
                int v154 = *(_DWORD *)(v111 + 20);
                uint64_t v155 = v154 & 0x7FFFFFF;
                if ((v154 & 0x7FFFFFF) == *(_DWORD *)(v111 + 60))
                {
                  unsigned int v168 = v155 + (v155 >> 1);
                  if (v168 <= 2) {
                    uint64_t v169 = 2;
                  }
                  else {
                    uint64_t v169 = v168;
                  }
                  *(_DWORD *)(v111 + 60) = v169;
                  if ((v154 & 0x40000000) != 0) {
                    unsigned int v170 = *(uint64_t **)(v111 - 8);
                  }
                  else {
                    unsigned int v170 = (uint64_t *)(v111 - 32 * v155);
                  }
                  std::string __p = v170;
                  uint64_t v171 = operator new(40 * v169);
                  *(void *)(v111 - 8) = v171;
                  uint64_t v172 = v171;
                  do
                  {
                    *uint64_t v172 = 0;
                    v172[1] = 0;
                    v172[2] = 0;
                    v172[3] = v111;
                    v172 += 4;
                  }
                  while (v172 != &v171[4 * v169]);
                  int v173 = *(_DWORD *)(v111 + 20);
                  if ((v173 & 0x40000000) != 0) {
                    uint64_t v174 = (uint64_t)v171;
                  }
                  else {
                    uint64_t v174 = v111 - 32 * (v173 & 0x7FFFFFF);
                  }
                  sub_1CC5E4108((uint64_t)&v405, __p, &__p[4 * v155], v174);
                  if (v155)
                  {
                    memmove((void *)(v174 + 32 * v169), &__p[4 * v155], 8 * v155);
                    uint64_t v175 = 4 * v155;
                    do
                    {
                      unsigned int v176 = &__p[v175];
                      if (__p[v175 - 4])
                      {
                        *(void *)*(v176 - 2) = *(v176 - 3);
                        uint64_t v177 = *(v176 - 3);
                        if (v177) {
                          *(void *)(v177 + 16) = *(v176 - 2);
                        }
                      }
                      v175 -= 4;
                    }
                    while (v175 * 8);
                  }
                  operator delete(__p);
                  int v154 = *(_DWORD *)(v111 + 20);
                  uint64_t v121 = v395;
                }
                uint64_t v156 = (v154 + 1) & 0x7FFFFFF;
                *(_DWORD *)(v111 + 20) = v154 & 0xF8000000 | (v154 + 1) & 0x7FFFFFF;
                if ((v154 & 0x40000000) != 0) {
                  uint64_t v157 = *(void *)(v111 - 8);
                }
                else {
                  uint64_t v157 = v111 - 32 * v156;
                }
                uint64_t v158 = (v156 - 1);
                uint64_t v159 = v157 + 32 * v158;
                if (*(void *)v159)
                {
                  **(void **)(v159 + 16) = *(void *)(v159 + 8);
                  uint64_t v167 = *(void *)(v159 + 8);
                  if (v167) {
                    *(void *)(v167 + 16) = *(void *)(v159 + 16);
                  }
                }
                *(void *)uint64_t v159 = v153;
                if (v153)
                {
                  uint64_t v162 = *(void *)(v153 + 8);
                  uint64_t v161 = (void *)(v153 + 8);
                  uint64_t v160 = v162;
                  uint64_t v163 = v157 + 32 * v158;
                  *(void *)(v163 + 8) = v162;
                  if (v162) {
                    *(void *)(v160 + 16) = v163 + 8;
                  }
                  *(void *)(v163 + 16) = v161;
                  void *v161 = v159;
                }
                int v164 = *(_DWORD *)(v111 + 20);
                uint64_t v165 = v164 & 0x7FFFFFF;
                if ((v164 & 0x40000000) != 0) {
                  uint64_t v166 = *(void *)(v111 - 8);
                }
                else {
                  uint64_t v166 = v111 - 32 * v165;
                }
                *(void *)(v166 + 32 * *(unsigned int *)(v111 + 60) + 8 * (v165 - 1)) = v152;
                ++v151;
              }
              while (v151 != v150);
            }
          }
          unint64_t v405 = &v407;
          uint64_t v406 = 0xC00000000;
          int v209 = *(_DWORD *)(v111 + 20);
          uint64_t v210 = v209 & 0x7FFFFFF;
          if ((v209 & 0x7FFFFFF) != 0) {
            break;
          }
LABEL_394:
          MEMORY[0x1D25D9CD0](v398[0], 8, v129);
          uint64_t v110 = *(void *)(v394 + 8);
          uint64_t v111 = v110 - 24;
          if (v110) {
            uint64_t v245 = v110 - 24;
          }
          else {
            uint64_t v245 = 0;
          }
          uint64_t v6 = v392;
          uint64_t v5 = v393;
          if (*(unsigned char *)(v245 + 16) != 83) {
            goto LABEL_402;
          }
        }
        unsigned int v211 = 0;
        uint64_t v212 = 0;
        while (1)
        {
          int v213 = *(_DWORD *)(v111 + 20);
          if ((v213 & 0x40000000) != 0)
          {
            uint64_t v214 = *(void *)(v111 - 8);
            if (*(unsigned __int8 *)(*(void *)(v214 + 32 * v212) + 16) - 11 > 1) {
              goto LABEL_359;
            }
          }
          else
          {
            uint64_t v214 = v111 - 32 * (v213 & 0x7FFFFFF);
            if (*(unsigned __int8 *)(*(void *)(v214 + 32 * v212) + 16) - 11 >= 2) {
              goto LABEL_359;
            }
          }
          if (v399)
          {
            uint64_t v215 = *(void *)(v214 + 32 * *(unsigned int *)(v111 + 60) + 8 * v212);
            uint64_t v216 = ((v215 >> 4) ^ (v215 >> 9)) & (v399 - 1);
            uint64_t v217 = *(void *)(v398[0] + 16 * v216);
            if (v215 == v217)
            {
LABEL_349:
              if (v216 != v399)
              {
                if ((v213 & 0x40000000) != 0) {
                  uint64_t v218 = *(void *)(v111 - 8);
                }
                else {
                  uint64_t v218 = v111 - 32 * (v213 & 0x7FFFFFF);
                }
                uint64_t v219 = *(void *)(v398[0] + 16 * v216 + 8);
                uint64_t v220 = v218 + 32 * v212;
                if (*(void *)v220)
                {
                  **(void **)(v220 + 16) = *(void *)(v220 + 8);
                  uint64_t v225 = *(void *)(v220 + 8);
                  if (v225) {
                    *(void *)(v225 + 16) = *(void *)(v220 + 16);
                  }
                }
                *(void *)uint64_t v220 = v219;
                if (v219)
                {
                  uint64_t v223 = *(void *)(v219 + 8);
                  uint64_t v221 = (void *)(v219 + 8);
                  uint64_t v222 = v223;
                  uint64_t v224 = v218 + 32 * v212;
                  *(void *)(v224 + 8) = v223;
                  if (v223) {
                    *(void *)(v222 + 16) = v224 + 8;
                  }
                  *(void *)(v224 + 16) = v221;
                  *uint64_t v221 = v220;
                }
                goto LABEL_359;
              }
            }
            else
            {
              int v226 = 1;
              while (v217 != -4096)
              {
                int v227 = v216 + v226++;
                uint64_t v216 = v227 & (v399 - 1);
                uint64_t v217 = *(void *)(v398[0] + 16 * v216);
                if (v215 == v217) {
                  goto LABEL_349;
                }
              }
            }
          }
          if (v211 >= HIDWORD(v406)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v405 + v211) = v212;
          unsigned int v211 = v406 + 1;
          LODWORD(v406) = v406 + 1;
LABEL_359:
          if (++v212 == v210)
          {
            unsigned int v228 = (uint64_t *)v405;
            if (v211)
            {
              uint64_t v229 = 0;
              int v230 = 0;
              int v231 = *(_DWORD *)(v111 + 20);
              uint64_t v232 = 4 * v211;
              do
              {
                uint64_t v233 = v111 - 32 * (v231 & 0x7FFFFFF);
                if ((v231 & 0x40000000) != 0) {
                  uint64_t v233 = *(void *)(v111 - 8);
                }
                if (*(unsigned char *)(*(void *)(v233 + 32 * *(unsigned int *)((char *)v405 + v229)) + 16) == 12) {
                  ++v230;
                }
                v229 += 4;
              }
              while (v232 != v229);
              if (v230) {
                BOOL v234 = v230 == (unint64_t)v211;
              }
              else {
                BOOL v234 = 1;
              }
              if (!v234)
              {
                do
                {
                  uint64_t v235 = *(unsigned int *)v228;
                  unsigned int v236 = llvm::UndefValue::get(*(llvm::UndefValue **)v111, (llvm::Type *)v128);
                  int v237 = *(_DWORD *)(v111 + 20);
                  if ((v237 & 0x40000000) != 0) {
                    uint64_t v238 = *(void *)(v111 - 8);
                  }
                  else {
                    uint64_t v238 = v111 - 32 * (v237 & 0x7FFFFFF);
                  }
                  uint64_t v239 = v238 + 32 * v235;
                  if (*(void *)v239)
                  {
                    **(void **)(v239 + 16) = *(void *)(v239 + 8);
                    uint64_t v244 = *(void *)(v239 + 8);
                    if (v244) {
                      *(void *)(v244 + 16) = *(void *)(v239 + 16);
                    }
                  }
                  *(void *)uint64_t v239 = v236;
                  if (v236)
                  {
                    uint64_t v242 = *((void *)v236 + 1);
                    int v240 = (void *)((char *)v236 + 8);
                    uint64_t v241 = v242;
                    uint64_t v243 = v238 + 32 * v235;
                    *(void *)(v243 + 8) = v242;
                    if (v242) {
                      *(void *)(v241 + 16) = v243 + 8;
                    }
                    *(void *)(v243 + 16) = v240;
                    *int v240 = v239;
                  }
                  unsigned int v228 = (uint64_t *)((char *)v228 + 4);
                  v232 -= 4;
                }
                while (v232);
                unsigned int v228 = (uint64_t *)v405;
              }
            }
            if (v228 != &v407) {
              free(v228);
            }
            goto LABEL_394;
          }
        }
      }
LABEL_402:
      if (v400 != &v402) {
        free(v400);
      }
    }
    if (llvm::BasicBlock::getSinglePredecessor(v5)) {
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
    uint64_t v246 = *(void *)(v6 + 48);
    if (v246) {
      uint64_t v247 = v246 - 24;
    }
    else {
      uint64_t v247 = 0;
    }
    if (v246 && *(unsigned char *)(v247 + 16) == 83) {
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
    int MDKindID = llvm::LLVMContext::getMDKindID(**(uint64_t ***)v6, "llvm.loop", 9uLL);
    unsigned int v353 = *(void **)(v6 + 40);
    if (v353 == v391) {
      goto LABEL_685;
    }
    BOOL v354 = v353 ? (unsigned __int8 *)(v353 - 3) : 0;
    if (v354[16] - 29 > 0xA) {
      goto LABEL_685;
    }
    int v355 = MDKindID;
    uint64_t v356 = (llvm::MDNode *)*((void *)v354 + 6);
    if (!v356 && (v354[23] & 0x20) == 0) {
      goto LABEL_685;
    }
    if (!MDKindID) {
      goto LABEL_674;
    }
    if ((v354[23] & 0x20) == 0)
    {
LABEL_685:
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v6, v393, (llvm::Value *)1);
      if ((*((unsigned char *)v393 + 23) & 0x10) == 0) {
        llvm::Value::takeName((int32x2_t ****)v393, (llvm::Value *)v6);
      }
      unint64_t v376 = (void *)*v391;
      if ((void *)*v391 != v391)
      {
        uint64_t v377 = v376 ? (uint64_t)(v376 - 3) : 0;
        if (v376 && *(unsigned __int8 *)(v377 + 16) - 40 >= 0xFFFFFFF5) {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
      }
      v378 = (char *)operator new(0x40uLL);
      *(void *)v378 = ***(void ***)v6 + 1576;
      *((void *)v378 + 1) = 0;
      v378[16] = 35;
      *(_OWORD *)(v378 + 44) = 0u;
      *(_OWORD *)(v378 + 33) = 0u;
      *(_OWORD *)(v378 + 17) = 0u;
      *(_WORD *)(v6 + 18) &= ~0x8000u;
      uint64_t v379 = *(void *)(v6 + 40);
      *((void *)v378 + 4) = v391;
      *((void *)v378 + 5) = v6;
      *((void *)v378 + 3) = v379;
      v378 += 24;
      *(void *)(v379 + 8) = v378;
      *(void *)(v6 + 40) = v378;
      uint64_t v380 = a2;
      if (a2)
      {
        llvm::DomTreeUpdater::applyUpdates((uint64_t)a2, (unint64_t *)v410, v411);
        uint64_t v380 = a2;
      }
      llvm::DeleteDeadBlock((llvm *)v6, v380, 0);
      if (v410 != &v412) {
        free(v410);
      }
      return 1;
    }
    uint64_t v357 = ***(void ***)v354;
    uint64_t v400 = v354;
    int v358 = *(_DWORD *)(v357 + 2496);
    if (v358)
    {
      uint64_t v359 = *(void *)(v357 + 2480);
      int v360 = v358 - 1;
      unsigned int v361 = v360 & ((v354 >> 4) ^ (v354 >> 9));
      uint64_t v362 = (unsigned __int8 **)(v359 + 40 * v361);
      int v363 = *v362;
      if (*v362 == v354) {
        goto LABEL_668;
      }
      int v364 = 0;
      int v365 = 1;
      while (v363 != (unsigned __int8 *)-4096)
      {
        if (v364) {
          BOOL v366 = 0;
        }
        else {
          BOOL v366 = v363 == (unsigned __int8 *)-8192;
        }
        if (v366) {
          int v364 = v362;
        }
        unsigned int v367 = v361 + v365++;
        unsigned int v361 = v367 & v360;
        uint64_t v362 = (unsigned __int8 **)(v359 + 40 * v361);
        int v363 = *v362;
        if (*v362 == v354) {
          goto LABEL_668;
        }
      }
      if (v364) {
        int v388 = v364;
      }
      else {
        int v388 = v362;
      }
    }
    else
    {
      int v388 = 0;
    }
    uint64_t v362 = (unsigned __int8 **)sub_1CC609054(v357 + 2480, (uint64_t)&v400, (uint64_t *)&v400, v388);
    int v389 = (unsigned __int8 *)v400;
    v362[3] = 0;
    v362[4] = 0;
    *uint64_t v362 = v389;
    v362[1] = (unsigned __int8 *)(v362 + 3);
    v362[2] = (unsigned __int8 *)0x100000000;
LABEL_668:
    uint64_t v368 = *((unsigned int *)v362 + 4);
    if (v368)
    {
      uint64_t v369 = (llvm::MDNode **)(v362[1] + 8);
      uint64_t v370 = 16 * v368;
      while (*((_DWORD *)v369 - 2) != v355)
      {
        v369 += 2;
        v370 -= 16;
        if (!v370) {
          goto LABEL_685;
        }
      }
      uint64_t v356 = *v369;
LABEL_674:
      if (v356)
      {
        uint64_t v371 = *(void *)(v6 + 8);
        if (v371)
        {
          while (1)
          {
            uint64_t v372 = *(void *)(v371 + 24);
            unsigned int v373 = *(unsigned __int8 *)(v372 + 16);
            BOOL v374 = v372 && v373 >= 0x1C;
            if (v374 && v373 - 29 <= 0xA) {
              break;
            }
            uint64_t v371 = *(void *)(v371 + 8);
            if (!v371) {
              goto LABEL_685;
            }
          }
LABEL_700:
          uint64_t v381 = *(void *)(v372 + 40);
          uint64_t v382 = *(void *)(v381 + 40);
          if (v382 == v381 + 40)
          {
            unsigned int v384 = 0;
          }
          else
          {
            if (v382) {
              uint64_t v383 = (unsigned __int8 *)(v382 - 24);
            }
            else {
              uint64_t v383 = 0;
            }
            if (v383[16] - 29 >= 0xB) {
              unsigned int v384 = 0;
            }
            else {
              unsigned int v384 = (llvm::Instruction *)v383;
            }
          }
          llvm::Instruction::setMetadata(v384, v355, v356);
          while (1)
          {
            uint64_t v371 = *(void *)(v371 + 8);
            if (!v371) {
              break;
            }
            uint64_t v372 = *(void *)(v371 + 24);
            unsigned int v385 = *(unsigned __int8 *)(v372 + 16);
            if (v372) {
              BOOL v386 = v385 >= 0x1C;
            }
            else {
              BOOL v386 = 0;
            }
            if (v386 && v385 - 29 < 0xB) {
              goto LABEL_700;
            }
          }
        }
      }
      goto LABEL_685;
    }
    goto LABEL_685;
  }
  for (uint64_t m = *(void *)(v6 + 48); ; uint64_t m = *(void *)(m + 8))
  {
    uint64_t v249 = m - 24;
    if (!m) {
      uint64_t v249 = 0;
    }
    if (*(unsigned char *)(v249 + 16) != 83) {
      goto LABEL_121;
    }
    uint64_t v250 = *(void *)(m - 16);
    if (v250) {
      break;
    }
LABEL_425:
    ;
  }
  while (1)
  {
    uint64_t result = 0;
    uint64_t v251 = *(void *)(v250 + 24);
    if (!v251 || *(unsigned char *)(v251 + 16) != 83) {
      return result;
    }
    int v252 = *(_DWORD *)(v251 + 20);
    if ((v252 & 0x40000000) != 0) {
      uint64_t v253 = *(void *)(v251 - 8);
    }
    else {
      uint64_t v253 = v251 - 32 * (v252 & 0x7FFFFFF);
    }
    if (*(void *)(v253
                   + 32 * *(unsigned int *)(v251 + 60)
                   + 8 * ((unint64_t)(v250 - v253) >> 5)) != v6)
      return 0;
    uint64_t v250 = *(void *)(v250 + 8);
    if (!v250) {
      goto LABEL_425;
    }
  }
}