uint64_t sub_100003F7C()
{
  uint64_t vars8;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_100003FF4()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100004068@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000570C(&qword_1001A5140);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000570C(&qword_1001A4FA8);
  __chkstk_darwin(v7 - 8, v8);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v10, 1, v2))
  {
    sub_1000059A4((uint64_t)v10);
    uint64_t v11 = type metadata accessor for Venue();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v10, v2);
    sub_1000059A4((uint64_t)v10);
    VenueSchedule.venue.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    uint64_t v13 = type metadata accessor for Venue();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 0, 1, v13);
  }
}

uint64_t sub_10000429C(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  sub_10000570C(&qword_1001A4FA8);
  v3[7] = swift_task_alloc();
  v3[8] = swift_task_alloc();
  v3[9] = swift_task_alloc();
  type metadata accessor for MainActor();
  v3[10] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[11] = v5;
  v3[12] = v4;
  return _swift_task_switch(sub_100004384, v5, v4);
}

uint64_t sub_100004384()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = sub_10000570C(&qword_1001A5140);
  v0[13] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v0[14] = v5;
  v0[15] = (v4 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v5(v1, 1, 1, v3);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_10000593C(v1, v2);
  swift_retain();
  static Published.subscript.setter();
  sub_1000059A4(v1);
  swift_getKeyPath();
  swift_getKeyPath();
  v0[2] = 0;
  swift_retain();
  static Published.subscript.setter();
  v6 = (void *)swift_task_alloc();
  v0[16] = v6;
  void *v6 = v0;
  v6[1] = sub_100004520;
  uint64_t v7 = v0[7];
  uint64_t v8 = v0[4];
  uint64_t v9 = v0[5];
  return static Venue.schedule(id:)(v7, v8, v9);
}

uint64_t sub_100004520()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 96);
  uint64_t v4 = *(void *)(v2 + 88);
  if (v0) {
    uint64_t v5 = sub_100004758;
  }
  else {
    uint64_t v5 = sub_10000465C;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_10000465C()
{
  uint64_t v1 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[14];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[7];
  swift_release();
  v1(v4, 0, 1, v2);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_10000593C(v4, v3);
  swift_retain();
  static Published.subscript.setter();
  sub_1000059A4(v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100004758()
{
  uint64_t v1 = v0[17];
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  v0[3] = v1;
  swift_retain();
  static Published.subscript.setter();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100004830()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC16EventViewService15VenueController__schedule;
  uint64_t v2 = sub_10000570C(&qword_1001A50E8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC16EventViewService15VenueController__error;
  uint64_t v4 = sub_10000570C(&qword_1001A50F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocClassInstance();
}

uint64_t sub_10000491C()
{
  return type metadata accessor for VenueController();
}

uint64_t type metadata accessor for VenueController()
{
  uint64_t result = qword_1001A4F90;
  if (!qword_1001A4F90) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100004970()
{
  sub_100004AA0(319, &qword_1001A4FA0, &qword_1001A4FA8);
  if (v0 <= 0x3F)
  {
    sub_100004AA0(319, &qword_1001A4FB0, (uint64_t *)&unk_1001A4FB8);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_100004A58(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

void sub_100004AA0(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    sub_100004A58(a3);
    unint64_t v4 = type metadata accessor for Published();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ASCAppState(uint64_t a1)
{
}

__n128 initializeWithTake for Tab.Style(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for EKEventEditViewAction(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for ConditionalFrameModifier.Size(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ConditionalFrameModifier.Size(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CLLocationCoordinate2D(uint64_t a1)
{
}

uint64_t sub_100004B98()
{
  v22[0] = sub_10000570C(&qword_1001A50F0);
  uint64_t v1 = *(void *)(v22[0] - 8);
  __chkstk_darwin(v22[0], v2);
  unint64_t v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000570C(&qword_1001A50E8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000570C(&qword_1001A4FA8);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  v17 = (char *)v22 - v16;
  uint64_t v18 = v0 + OBJC_IVAR____TtC16EventViewService15VenueController__schedule;
  uint64_t v19 = sub_10000570C(&qword_1001A5140);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v17, 1, 1, v19);
  sub_10000593C((uint64_t)v17, (uint64_t)v14);
  Published.init(initialValue:)();
  sub_1000059A4((uint64_t)v17);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v18, v9, v5);
  uint64_t v20 = v0 + OBJC_IVAR____TtC16EventViewService15VenueController__error;
  v22[1] = 0;
  sub_10000570C((uint64_t *)&unk_1001A4FB8);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, void))(v1 + 32))(v20, v4, v22[0]);
  return v0;
}

uint64_t sub_100004E20@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100004E70(uint64_t a1, uint64_t a2)
{
  return sub_1000055AC(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100004E9C(uint64_t a1, uint64_t a2)
{
  return sub_1000055AC(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100004EB8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100004EE8(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_100004F60(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_100004FE0@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_100005024(uint64_t a1)
{
  uint64_t v2 = sub_1000052E8(&qword_1001A51F0, type metadata accessor for DocumentAttributeKey);
  uint64_t v3 = sub_1000052E8(&qword_1001A51F8, type metadata accessor for DocumentAttributeKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000050E0(uint64_t a1)
{
  uint64_t v2 = sub_1000052E8(&qword_1001A5200, type metadata accessor for DocumentReadingOptionKey);
  uint64_t v3 = sub_1000052E8(&qword_1001A5208, type metadata accessor for DocumentReadingOptionKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000519C(uint64_t a1)
{
  uint64_t v2 = sub_1000052E8(&qword_1001A5078, type metadata accessor for ASCAppState);
  uint64_t v3 = sub_1000052E8(&qword_1001A5080, type metadata accessor for ASCAppState);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100005258()
{
  return sub_1000052E8(&qword_1001A5060, type metadata accessor for ASCAppState);
}

uint64_t sub_1000052A0()
{
  return sub_1000052E8(&qword_1001A5068, type metadata accessor for ASCAppState);
}

uint64_t sub_1000052E8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100005330(uint64_t a1)
{
  uint64_t v2 = sub_1000052E8(&qword_1001A5198, type metadata accessor for ActivityType);
  uint64_t v3 = sub_1000052E8(&qword_1001A51A0, type metadata accessor for ActivityType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000053EC(uint64_t a1)
{
  uint64_t v2 = sub_1000052E8(&qword_1001A5148, type metadata accessor for NSKeyValueChangeKey);
  uint64_t v3 = sub_1000052E8(&qword_1001A5150, type metadata accessor for NSKeyValueChangeKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000054A8@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1000054F0(uint64_t a1)
{
  uint64_t v2 = sub_1000052E8((unint64_t *)&unk_1001AD1E0, type metadata accessor for OpenExternalURLOptionsKey);
  uint64_t v3 = sub_1000052E8(&qword_1001A5158, type metadata accessor for OpenExternalURLOptionsKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000055AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1000055F0()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100005644()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000056B8()
{
  return sub_1000052E8(&qword_1001A5070, type metadata accessor for ASCAppState);
}

void *sub_100005700()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_10000570C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
}

void type metadata accessor for OpenExternalURLOptionsKey(uint64_t a1)
{
}

uint64_t sub_10000578C()
{
  return sub_1000052E8(&qword_1001A5110, type metadata accessor for OpenExternalURLOptionsKey);
}

uint64_t sub_1000057D4()
{
  return sub_1000052E8(&qword_1001A5118, type metadata accessor for OpenExternalURLOptionsKey);
}

uint64_t sub_10000581C()
{
  return sub_1000052E8(&qword_1001A5120, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_100005864()
{
  return sub_1000052E8(&qword_1001A5128, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_1000058AC()
{
  return sub_1000052E8(&qword_1001A5130, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_1000058F4()
{
  return sub_1000052E8(&qword_1001A5138, type metadata accessor for OpenExternalURLOptionsKey);
}

uint64_t sub_10000593C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A4FA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000059A4(uint64_t a1)
{
  uint64_t v2 = sub_10000570C(&qword_1001A4FA8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for PaddingModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 initializeWithTake for EmptyEventsList(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_100005A54(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100005A74(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

void type metadata accessor for Style(uint64_t a1)
{
}

void type metadata accessor for ActivityType(uint64_t a1)
{
}

uint64_t sub_100005ADC()
{
  return sub_1000052E8(&qword_1001A5180, type metadata accessor for ActivityType);
}

uint64_t sub_100005B24()
{
  return sub_1000052E8(&qword_1001A5188, type metadata accessor for ActivityType);
}

uint64_t sub_100005B6C()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_100005BF8()
{
  return sub_1000052E8(&qword_1001A5190, type metadata accessor for ActivityType);
}

void type metadata accessor for DocumentAttributeKey(uint64_t a1)
{
}

void type metadata accessor for DocumentReadingOptionKey(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void sub_100005C7C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_100005CC4()
{
  return sub_1000052E8(&qword_1001A51C0, type metadata accessor for DocumentReadingOptionKey);
}

uint64_t sub_100005D0C()
{
  return sub_1000052E8(&qword_1001A51C8, type metadata accessor for DocumentReadingOptionKey);
}

uint64_t sub_100005D54()
{
  return sub_1000052E8(&qword_1001A51D0, type metadata accessor for DocumentAttributeKey);
}

uint64_t sub_100005D9C()
{
  return sub_1000052E8(&qword_1001A51D8, type metadata accessor for DocumentAttributeKey);
}

uint64_t sub_100005DE4()
{
  return sub_1000052E8(&qword_1001A51E0, type metadata accessor for DocumentAttributeKey);
}

uint64_t sub_100005E2C()
{
  return sub_1000052E8(&qword_1001A51E8, type metadata accessor for DocumentReadingOptionKey);
}

uint64_t sub_100005E84()
{
  return sub_100005F5C(&qword_1001A5210, (void (*)(uint64_t))&type metadata accessor for Artwork);
}

uint64_t sub_100005ED8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100005F5C(&qword_1001A5258, (void (*)(uint64_t))&type metadata accessor for Artist);
  uint64_t result = sub_100005F5C(&qword_1001A5260, (void (*)(uint64_t))&type metadata accessor for Artist);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100005F5C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for Blur()
{
  return &type metadata for Blur;
}

void *sub_100005FB4()
{
  return &protocol witness table for Never;
}

id sub_100005FC0()
{
  id v1 = [self effectWithStyle:*v0];
  id v2 = [objc_allocWithZone((Class)UIVisualEffectView) initWithEffect:v1];

  return v2;
}

void sub_100006030(void *a1)
{
  id v3 = [self effectWithStyle:*v1];
  [a1 setEffect:v3];
}

uint64_t sub_1000060BC()
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)();
}

uint64_t sub_100006100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100006264();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100006164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100006264();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000061C8()
{
  return static View._viewListCount(inputs:)();
}

void sub_1000061E4()
{
}

unint64_t sub_100006210()
{
  unint64_t result = qword_1001A5268;
  if (!qword_1001A5268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5268);
  }
  return result;
}

unint64_t sub_100006264()
{
  unint64_t result = qword_1001A5270;
  if (!qword_1001A5270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5270);
  }
  return result;
}

uint64_t sub_1000062B8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10000632C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v33 = a6;
  uint64_t v32 = a5;
  uint64_t v11 = sub_10000570C(&qword_1001A5378);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (void *)(v6 + OBJC_IVAR____TtC16EventViewService12AppViewModel_shazamItemID);
  *uint64_t v16 = 0x3534333939343832;
  v16[1] = 0xE900000000000039;
  v17 = (void *)(v6 + OBJC_IVAR____TtC16EventViewService12AppViewModel_productVariantID);
  void *v17 = 0xD000000000000024;
  v17[1] = 0x800000010015D2C0;
  uint64_t v18 = v6 + OBJC_IVAR____TtC16EventViewService12AppViewModel_subheaderTitle;
  *(void *)uint64_t v18 = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v18 + 8) = v19;
  *(unsigned char *)(v18 + 16) = v20 & 1;
  *(void *)(v18 + 24) = v21;
  uint64_t v22 = v6 + OBJC_IVAR____TtC16EventViewService12AppViewModel_descriptionTitle;
  *(void *)uint64_t v22 = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v22 + 8) = v23;
  *(unsigned char *)(v22 + 16) = v24 & 1;
  *(void *)(v22 + 24) = v25;
  uint64_t v26 = v6 + OBJC_IVAR____TtC16EventViewService12AppViewModel__metricsQuery;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  sub_10000570C((uint64_t *)&unk_1001A8B80);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v26, v15, v11);
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v27 = v6 + OBJC_IVAR____TtC16EventViewService12AppViewModel_eventURL;
  uint64_t v28 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 32))(v27, a3, v28);
  v29 = (void *)(v6 + OBJC_IVAR____TtC16EventViewService12AppViewModel_queryAppID);
  uint64_t v30 = v32;
  void *v29 = a4;
  v29[1] = v30;
  *(unsigned char *)(v6 + OBJC_IVAR____TtC16EventViewService12AppViewModel_shouldShowDiscoveryDetail) = v33;
  return v6;
}

uint64_t sub_10000657C()
{
  v1[24] = v0;
  v1[25] = *v0;
  uint64_t v2 = type metadata accessor for URLComponents();
  v1[26] = v2;
  v1[27] = *(void *)(v2 - 8);
  v1[28] = swift_task_alloc();
  type metadata accessor for MainActor();
  v1[29] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[30] = v4;
  v1[31] = v3;
  return _swift_task_switch(sub_100006698, v4, v3);
}

uint64_t sub_100006698()
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v2 = [self bundleForClass:ObjCClassFromMetadata];
  id v3 = [v2 bundleIdentifier];

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1001ABE08 + dword_1001ABE08);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1000067C8;
  return v9(v0 + 16, v4, v6);
}

uint64_t sub_1000067C8()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 248);
  uint64_t v3 = *(void *)(v1 + 240);
  return _swift_task_switch(sub_1000068E8, v3, v2);
}

uint64_t sub_1000068E8()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  swift_release();
  sub_100007480((uint64_t)(v0 + 4), (uint64_t)(v0 + 10));
  sub_100007480((uint64_t)(v0 + 10), (uint64_t)(v0 + 20));
  if (v0[21] && v0[7])
  {
    sub_10000570C(&qword_1001A5388);
    type metadata accessor for URLQueryItem();
    uint64_t v2 = (_OWORD *)swift_allocObject();
    v2[1] = xmmword_100152B80;
    if (qword_1001A4EC8 != -1) {
      swift_once();
    }
    URLQueryItem.init(name:value:)();
    if (qword_1001A4ED0 != -1) {
      swift_once();
    }
    URLQueryItem.init(name:value:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyArrayStorage;
  }
  uint64_t v3 = *((void *)v2 + 2);
  swift_bridgeObjectRelease();
  if (v3)
  {
    URLComponents.init()();
    sub_100007480((uint64_t)(v0 + 10), (uint64_t)(v0 + 8));
    if (v0[9] && v0[7])
    {
      sub_10000570C(&qword_1001A5388);
      type metadata accessor for URLQueryItem();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_100152B80;
      if (qword_1001A4EC8 != -1) {
        swift_once();
      }
      URLQueryItem.init(name:value:)();
      uint64_t v1 = (uint64_t)(v0 + 2);
      if (qword_1001A4ED0 != -1) {
        swift_once();
      }
      URLQueryItem.init(name:value:)();
    }
    uint64_t v5 = v0[27];
    uint64_t v4 = v0[28];
    uint64_t v6 = v0[26];
    sub_100007480(v1, (uint64_t)(v0 + 12));
    sub_1000074E8((uint64_t)(v0 + 12));
    sub_1000074E8((uint64_t)(v0 + 10));
    sub_100007480((uint64_t)(v0 + 6), (uint64_t)(v0 + 14));
    sub_1000074E8((uint64_t)(v0 + 14));
    URLComponents.queryItems.setter();
    uint64_t v7 = URLComponents.percentEncodedQuery.getter();
    uint64_t v9 = v8;
    swift_getKeyPath();
    swift_getKeyPath();
    v0[22] = v7;
    v0[23] = v9;
    swift_retain();
    static Published.subscript.setter();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  }
  else
  {
    sub_100007480((uint64_t)(v0 + 2), (uint64_t)(v0 + 16));
    sub_1000074E8((uint64_t)(v0 + 16));
    sub_1000074E8((uint64_t)(v0 + 10));
    sub_100007480((uint64_t)(v0 + 6), (uint64_t)(v0 + 18));
    sub_1000074E8((uint64_t)(v0 + 18));
  }
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

void sub_100006D4C(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  sub_10000570C(&qword_1001A5390);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100152B90;
  uint64_t v11 = *(void *)(v4 + 16);
  uint64_t v10 = *(void *)(v4 + 24);
  *(void *)(v9 + 56) = &type metadata for AnalyticsString;
  *(void *)(v9 + 64) = &off_1001AAD38;
  *(unsigned char *)(v9 + 32) = 0;
  *(void *)(v9 + 40) = v11;
  *(void *)(v9 + 48) = v10;
  *(void *)(v9 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v9 + 104) = &off_1001AAD10;
  *(unsigned char *)(v9 + 72) = 0;
  *(void *)(v9 + 136) = &type metadata for AnalyticsModuleName;
  *(void *)(v9 + 144) = &off_1001AAD98;
  *(unsigned char *)(v9 + 112) = 6;
  *(void *)(v9 + 176) = &type metadata for AnalyticsModuleAction;
  *(void *)(v9 + 184) = &off_1001AAD70;
  *(void *)(v9 + 152) = a1;
  *(void *)(v9 + 160) = a2;
  *(unsigned char *)(v9 + 168) = a3;
  if (*(void *)(a4 + 72))
  {
    uint64_t v12 = *(void *)(a4 + 64);
    unint64_t v13 = *(void *)(a4 + 72);
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0xE000000000000000;
  }
  uint64_t v28 = &type metadata for AnalyticsString;
  v29 = (void *(*)())&off_1001AAD38;
  LOBYTE(aBlock) = 1;
  uint64_t v26 = v12;
  uint64_t v27 = (Class (*)(uint64_t))v13;
  swift_bridgeObjectRetain();
  sub_10000751C(a1, a2, a3);
  v31 = (char *)v9;
  unint64_t v15 = *(void *)(v9 + 16);
  unint64_t v14 = *(void *)(v9 + 24);
  swift_bridgeObjectRetain();
  if (v15 >= v14 >> 1) {
    v31 = sub_1001378BC((char *)(v14 > 1), v15 + 1, 1, (char *)v9);
  }
  uint64_t v16 = sub_100007534((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v16, v16);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v19 + 16))(v18);
  sub_100116BFC(v15, (uint64_t)v18, (uint64_t *)&v31, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_1001AAD38);
  sub_100007584((uint64_t)&aBlock);
  char v20 = v31;
  NSString v21 = String._bridgeToObjectiveC()();
  uint64_t v22 = (void *)swift_allocObject();
  void v22[2] = 0xD00000000000001ELL;
  v22[3] = 0x800000010015D360;
  v22[4] = v20;
  v29 = sub_100007614;
  uint64_t v30 = v22;
  aBlock = _NSConcreteStackBlock;
  uint64_t v26 = 1107296256;
  uint64_t v27 = sub_100116B70;
  uint64_t v28 = (ValueMetadata *)&unk_100195818;
  uint64_t v23 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v23);
  swift_bridgeObjectRelease();
}

uint64_t sub_10000704C()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC16EventViewService12AppViewModel_eventURL;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = v0 + OBJC_IVAR____TtC16EventViewService12AppViewModel__metricsQuery;
  uint64_t v4 = sub_10000570C(&qword_1001A5378);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t sub_10000717C()
{
  sub_10000704C();

  return swift_deallocClassInstance();
}

uint64_t sub_1000071D4()
{
  return type metadata accessor for AppViewModel();
}

uint64_t type metadata accessor for AppViewModel()
{
  uint64_t result = qword_1001A52A8;
  if (!qword_1001A52A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100007228()
{
  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    sub_100007320();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_100007320()
{
  if (!qword_1001A52B8)
  {
    sub_100004A58((uint64_t *)&unk_1001A8B80);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001A52B8);
    }
  }
}

double sub_10000737C@<D0>(_OWORD *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_1000073FC()
{
  return static Published.subscript.setter();
}

uint64_t sub_100007480(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C((uint64_t *)&unk_1001A8B80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000074E8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10000751C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100007534(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_100007584(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000075D4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void *sub_100007614()
{
  return sub_100121EA0(v0 + 16);
}

uint64_t sub_10000761C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000762C()
{
  return swift_release();
}

unint64_t sub_10000763C(uint64_t a1)
{
  unint64_t result = sub_100007664();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100007664()
{
  unint64_t result = qword_1001A5398;
  if (!qword_1001A5398)
  {
    type metadata accessor for Artwork();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5398);
  }
  return result;
}

unint64_t destroy for Tab(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *_s16EventViewService3TabVwCP_0(void *a1, void *a2)
{
  unint64_t v3 = a2[1];
  if (v3 >= 2)
  {
    *a1 = *a2;
    a1[1] = v3;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return a1;
}

void *assignWithCopy for Tab(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] >= 2uLL)
  {
    if (v4 >= 2)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1000077B4((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 < 2)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000077B4(uint64_t a1)
{
  return a1;
}

void *assignWithTake for Tab(void *a1, void *a2)
{
  if (a1[1] >= 2uLL)
  {
    unint64_t v4 = a2[1];
    if (v4 >= 2)
    {
      *a1 = *a2;
      a1[1] = v4;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1000077B4((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for Tab(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 2;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Tab(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = a2 - 2147483646;
    *(void *)(result + 8) = 0;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Tab()
{
  return &type metadata for Tab;
}

unint64_t sub_100007924()
{
  unint64_t result = qword_1001A53A0;
  if (!qword_1001A53A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A53A0);
  }
  return result;
}

uint64_t sub_100007978(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 7105633;
  if (a2) {
    uint64_t v2 = a1;
  }
  if (a2 == 1) {
    uint64_t v3 = 0x4C746E6572727563;
  }
  else {
    uint64_t v3 = v2;
  }
  sub_100008068(a1, a2);
  return v3;
}

Swift::Int sub_1000079E4()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    if (v1 != 1)
    {
      Hasher._combine(_:)(2uLL);
      String.hash(into:)();
      return Hasher._finalize()();
    }
    Swift::UInt v2 = 1;
  }
  else
  {
    Swift::UInt v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_100007A64()
{
  uint64_t v1 = *(void *)(v0 + 8);
  if (!v1)
  {
    Swift::UInt v2 = 0;
    goto LABEL_5;
  }
  if (v1 == 1)
  {
    Swift::UInt v2 = 1;
LABEL_5:
    Hasher._combine(_:)(v2);
    return;
  }
  Hasher._combine(_:)(2uLL);

  String.hash(into:)();
}

Swift::Int sub_100007AEC()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    if (v1 != 1)
    {
      Hasher._combine(_:)(2uLL);
      String.hash(into:)();
      return Hasher._finalize()();
    }
    Swift::UInt v2 = 1;
  }
  else
  {
    Swift::UInt v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100007B68()
{
  return sub_100007978(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t sub_100007B70(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = a2[1];
  if (!v3) {
    return !v4;
  }
  if (v3 == 1) {
    return v4 == 1;
  }
  if (v4 < 2) {
    return 0;
  }
  if (*a1 != *a2 || v3 != v4) {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return 1;
}

Swift::Int sub_100007BD0()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  if (v2)
  {
    if (v2 != 1)
    {
      Hasher._combine(_:)(2uLL);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      sub_100007D90(v1, v2);
      return Hasher._finalize()();
    }
    Swift::UInt v3 = 1;
  }
  else
  {
    Swift::UInt v3 = 0;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_100007C64()
{
  unint64_t v1 = v0[1];
  if (!v1)
  {
    Swift::UInt v2 = 0;
    goto LABEL_5;
  }
  if (v1 == 1)
  {
    Swift::UInt v2 = 1;
LABEL_5:
    Hasher._combine(_:)(v2);
    return;
  }
  uint64_t v3 = *v0;
  Hasher._combine(_:)(2uLL);
  swift_bridgeObjectRetain();
  String.hash(into:)();

  sub_100007D90(v3, v1);
}

Swift::Int sub_100007D00()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  if (v2)
  {
    if (v2 != 1)
    {
      Hasher._combine(_:)(2uLL);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      sub_100007D90(v1, v2);
      return Hasher._finalize()();
    }
    Swift::UInt v3 = 1;
  }
  else
  {
    Swift::UInt v3 = 0;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t sub_100007D90(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t destroy for Tab.Style(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s16EventViewService3TabV5StyleOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for Tab.Style(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Tab.Style(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Tab.Style(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Tab.Style(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_100007FC4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_100007FE0(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for Tab.Style()
{
  return &type metadata for Tab.Style;
}

unint64_t sub_100008014()
{
  unint64_t result = qword_1001A53A8;
  if (!qword_1001A53A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A53A8);
  }
  return result;
}

uint64_t sub_100008068(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for PromotionalAssetsContentView()
{
  swift_release();

  return swift_release();
}

void *_s16EventViewService28PromotionalAssetsContentViewVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for PromotionalAssetsContentView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  return a1;
}

__n128 initializeWithTake for RemoteViewConfiguration.QueryItem(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for PromotionalAssetsContentView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromotionalAssetsContentView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PromotionalAssetsContentView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PromotionalAssetsContentView()
{
  return &type metadata for PromotionalAssetsContentView;
}

uint64_t sub_100008258()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100008274@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v99 = a3;
  uint64_t v101 = a2;
  uint64_t v111 = a4;
  uint64_t v98 = type metadata accessor for _TaskModifier();
  __chkstk_darwin(v98, v5);
  v92 = (char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for TaskPriority();
  uint64_t v94 = *(void *)(v95 - 8);
  __chkstk_darwin(v95, v7);
  v97 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = sub_10000570C(&qword_1001A53B0);
  uint64_t v10 = __chkstk_darwin(v110, v9);
  v93 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  uint64_t v96 = (uint64_t)&v91 - v13;
  uint64_t v107 = sub_10000570C(&qword_1001A53B8);
  __chkstk_darwin(v107, v14);
  uint64_t v109 = (uint64_t)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = sub_10000570C(&qword_1001A53C0);
  __chkstk_darwin(v102, v16);
  uint64_t v106 = (uint64_t)&v91 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = sub_10000570C(&qword_1001A53C8);
  __chkstk_darwin(v108, v18);
  v104 = (char *)&v91 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = sub_10000570C(&qword_1001A53D0);
  uint64_t v21 = __chkstk_darwin(v103, v20);
  uint64_t v23 = (char *)&v91 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v24);
  uint64_t v100 = (uint64_t)&v91 - v25;
  uint64_t v26 = sub_10000570C(&qword_1001A53D8);
  __chkstk_darwin(v26 - 8, v27);
  v29 = (char *)&v91 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for ArtistPromotionalAssets();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v33 = __chkstk_darwin(v30, v32);
  uint64_t v35 = (char *)&v91 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33, v36);
  v105 = (char *)&v91 - v37;
  swift_getKeyPath();
  uint64_t v113 = a1;
  sub_10000A48C(&qword_1001A53E0, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v38 = a1;
  uint64_t v39 = a1 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess();
  uint64_t v40 = v39;
  uint64_t v41 = v30;
  sub_10000A428(v40, (uint64_t)v29, &qword_1001A53D8);
  uint64_t v42 = v31;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1)
  {
    v43 = v97;
    uint64_t v44 = v98;
    uint64_t v45 = v106;
    sub_10000ACE0((uint64_t)v29, &qword_1001A53D8);
    swift_getKeyPath();
    uint64_t v46 = v38;
    uint64_t v112 = v38;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if (*(void *)(v38 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__error)
      || (swift_getKeyPath(),
          uint64_t v112 = v38,
          ObservationRegistrar.access<A, B>(_:keyPath:)(),
          swift_release(),
          *(void *)(v38 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__emptyScheduleViewModel)))
    {
      uint64_t v47 = LocalizedStringKey.init(stringLiteral:)();
      v49 = v48;
      char v51 = v50;
      uint64_t v100 = v52;
      uint64_t v53 = LocalizedStringKey.init(stringLiteral:)();
      uint64_t v54 = v38;
      uint64_t v91 = v38;
      uint64_t v56 = v55;
      char v58 = v57;
      uint64_t v60 = v59;
      v61 = (void *)swift_allocObject();
      v61[2] = v54;
      uint64_t v62 = v99;
      v61[3] = v101;
      v61[4] = v62;
      *(void *)uint64_t v45 = v47;
      *(void *)(v45 + 8) = v49;
      v105 = v49;
      *(unsigned char *)(v45 + 16) = v51 & 1;
      *(void *)(v45 + 24) = v100;
      *(void *)(v45 + 32) = v53;
      *(void *)(v45 + 40) = v56;
      *(unsigned char *)(v45 + 48) = v58 & 1;
      *(void *)(v45 + 56) = v60;
      *(void *)(v45 + 64) = sub_100009CBC;
      *(void *)(v45 + 72) = v61;
      *(void *)(v45 + 80) = 0;
      *(void *)(v45 + 88) = 0;
      swift_storeEnumTagMultiPayload();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      sub_100009CC8((uint64_t)sub_100009CBC);
      sub_100009CC8(0);
      sub_10000570C(&qword_1001A5410);
      sub_10000A780(&qword_1001A5400, &qword_1001A53D0);
      sub_100009AA8();
      uint64_t v63 = (uint64_t)v104;
      _ConditionalContent<>.init(storage:)();
      sub_10000A428(v63, v109, &qword_1001A53C8);
      swift_storeEnumTagMultiPayload();
      sub_100009A08();
      sub_100009B78();
      _ConditionalContent<>.init(storage:)();
      sub_10000ACE0(v63, &qword_1001A53C8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100009CD8((uint64_t)sub_100009CBC);
      return sub_100009CD8(0);
    }
    else
    {
      uint64_t v106 = LocalizedStringKey.init(stringLiteral:)();
      uint64_t v78 = v77;
      char v80 = v79;
      uint64_t v82 = v81;
      v83 = (void *)swift_allocObject();
      v83[2] = v46;
      uint64_t v84 = v99;
      v83[3] = v101;
      v83[4] = v84;
      swift_retain();
      swift_retain();
      v85 = v43;
      static TaskPriority.userInitiated.getter();
      v86 = v92;
      uint64_t v87 = v94;
      uint64_t v88 = v95;
      (*(void (**)(char *, char *, uint64_t))(v94 + 16))(&v92[*(int *)(v44 + 20)], v43, v95);
      void *v86 = &unk_1001A53F0;
      v86[1] = v83;
      uint64_t v89 = (uint64_t)v93;
      sub_100009948((uint64_t)v86, (uint64_t)&v93[*(int *)(v110 + 36)]);
      *(void *)uint64_t v89 = v106;
      *(void *)(v89 + 8) = v78;
      *(unsigned char *)(v89 + 16) = v80 & 1;
      *(void *)(v89 + 24) = v82;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1000099AC((uint64_t)v86);
      (*(void (**)(char *, uint64_t))(v87 + 8))(v85, v88);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v90 = v96;
      sub_10000A3C4(v89, v96, &qword_1001A53B0);
      sub_10000A428(v90, v109, &qword_1001A53B0);
      swift_storeEnumTagMultiPayload();
      sub_100009A08();
      sub_100009B78();
      _ConditionalContent<>.init(storage:)();
      return sub_10000ACE0(v90, &qword_1001A53B0);
    }
  }
  else
  {
    v65 = v105;
    (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v105, v29, v30);
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v35, v65, v30);
    sub_10000570C(&qword_1001A5438);
    swift_allocObject();
    sub_100009DA0((uint64_t)v35);
    sub_10000A780(&qword_1001A5440, &qword_1001A5438);
    Bindable<A>.init(wrappedValue:)();
    v66 = (int *)v103;
    v67 = (uint64_t *)&v23[*(int *)(v103 + 36)];
    sub_10000570C(&qword_1001A5448);
    *(unsigned char *)(swift_allocObject() + 16) = 0;
    sub_10000A780(&qword_1001A5450, &qword_1001A5448);
    uint64_t *v67 = ObservedObject.init(wrappedValue:)();
    v67[1] = v68;
    v69 = (uint64_t *)&v23[v66[10]];
    type metadata accessor for RemoteViewConfiguration();
    sub_10000A48C((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t *v69 = EnvironmentObject.init()();
    v69[1] = v70;
    v71 = (uint64_t *)&v23[v66[11]];
    uint64_t *v71 = swift_getKeyPath();
    sub_10000570C(&qword_1001A5460);
    swift_storeEnumTagMultiPayload();
    v72 = (uint64_t *)&v23[v66[12]];
    uint64_t *v72 = swift_getKeyPath();
    sub_10000570C(&qword_1001A5468);
    swift_storeEnumTagMultiPayload();
    v73 = (uint64_t *)&v23[v66[13]];
    uint64_t *v73 = swift_getKeyPath();
    sub_10000570C(&qword_1001A5470);
    swift_storeEnumTagMultiPayload();
    v74 = (uint64_t *)&v23[v66[14]];
    uint64_t *v74 = swift_getKeyPath();
    swift_storeEnumTagMultiPayload();
    uint64_t v75 = v100;
    sub_10000A3C4((uint64_t)v23, v100, &qword_1001A53D0);
    sub_10000A428(v75, v106, &qword_1001A53D0);
    swift_storeEnumTagMultiPayload();
    sub_10000570C(&qword_1001A5410);
    sub_10000A780(&qword_1001A5400, &qword_1001A53D0);
    sub_100009AA8();
    uint64_t v76 = (uint64_t)v104;
    _ConditionalContent<>.init(storage:)();
    sub_10000A428(v76, v109, &qword_1001A53C8);
    swift_storeEnumTagMultiPayload();
    sub_100009A08();
    sub_100009B78();
    _ConditionalContent<>.init(storage:)();
    sub_10000ACE0(v76, &qword_1001A53C8);
    sub_10000ACE0(v75, &qword_1001A53D0);
    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v105, v41);
  }
}

uint64_t sub_100008EF4(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 32) == 1)
  {
    uint64_t v3 = *(void *)(result + 24);
    if (a2)
    {
      uint64_t v4 = *(void *)(result + 16);
      sub_10000ADA0();
      swift_retain();
      sub_100116C94(v4, v3, 9, a2);
      swift_release();
      return sub_10000ADA8();
    }
    else
    {
      type metadata accessor for RemoteViewConfiguration();
      sub_10000A48C((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
      swift_bridgeObjectRetain();
      __n128 result = EnvironmentObject.error()();
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100008FFC()
{
  v0[2] = type metadata accessor for MainActor();
  v0[3] = static MainActor.shared.getter();
  unint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_1000090A8;
  return sub_10004E390();
}

uint64_t sub_1000090A8()
{
  swift_task_dealloc();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000091E4, v1, v0);
}

uint64_t sub_1000091E4()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10000924C@<X0>(uint64_t a1@<X8>)
{
  return sub_100008274(*v1, v1[1], v1[2], a1);
}

uint64_t sub_100009258@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10000A48C(&qword_1001A53E0, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess();
  return sub_10000A428(v4, a2, &qword_1001A53D8);
}

uint64_t sub_10000932C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A53D8);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000A428(a1, (uint64_t)v7, &qword_1001A53D8);
  uint64_t v8 = *a2;
  swift_getKeyPath();
  uint64_t v11 = v8;
  uint64_t v12 = v7;
  uint64_t v13 = v8;
  sub_10000A48C(&qword_1001A53E0, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_10000ACE0((uint64_t)v7, &qword_1001A53D8);
}

uint64_t sub_10000946C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10000A48C(&qword_1001A53E0, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__error);
  return swift_errorRetain();
}

uint64_t sub_100009520()
{
  return swift_release();
}

uint64_t sub_10000960C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10000A48C(&qword_1001A53E0, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__emptyScheduleViewModel);
  return swift_retain();
}

uint64_t sub_1000096C4()
{
  return swift_release();
}

uint64_t sub_1000097AC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100009854;
  return sub_100008FFC();
}

uint64_t sub_100009854()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100009948(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _TaskModifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000099AC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for _TaskModifier();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100009A08()
{
  unint64_t result = qword_1001A53F8;
  if (!qword_1001A53F8)
  {
    sub_100004A58(&qword_1001A53C8);
    sub_10000A780(&qword_1001A5400, &qword_1001A53D0);
    sub_100009AA8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A53F8);
  }
  return result;
}

unint64_t sub_100009AA8()
{
  unint64_t result = qword_1001A5408;
  if (!qword_1001A5408)
  {
    sub_100004A58(&qword_1001A5410);
    sub_100009B24();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5408);
  }
  return result;
}

unint64_t sub_100009B24()
{
  unint64_t result = qword_1001A5418;
  if (!qword_1001A5418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5418);
  }
  return result;
}

unint64_t sub_100009B78()
{
  unint64_t result = qword_1001A5420;
  if (!qword_1001A5420)
  {
    sub_100004A58(&qword_1001A53B0);
    sub_100009C24();
    sub_10000A48C(&qword_1001A5430, (void (*)(uint64_t))&type metadata accessor for _TaskModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5420);
  }
  return result;
}

unint64_t sub_100009C24()
{
  unint64_t result = qword_1001A5428;
  if (!qword_1001A5428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5428);
  }
  return result;
}

uint64_t sub_100009C7C()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100009CBC()
{
  return sub_100008EF4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100009CC8(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_100009CD8(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_100009CE8()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t sub_100009D0C(uint64_t a1)
{
  uint64_t v2 = sub_10000570C(&qword_1001A5478);
  __chkstk_darwin(v2 - 8, v3);
  sub_10000A428(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_1001A5478);
  return EnvironmentValues.horizontalSizeClass.setter();
}

void *sub_100009DA0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000570C(&qword_1001A5480);
  uint64_t v41 = *(void *)(v4 - 8);
  uint64_t v42 = v4;
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000570C(&qword_1001A5488);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v40 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000570C(&qword_1001A5490);
  uint64_t v44 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)&v39 - v17;
  *((unsigned char *)v1 + *(void *)(*v1 + 112)) = 0;
  *(void *)((char *)v1 + *(void *)(*v1 + 120)) = 0;
  *((unsigned char *)v1 + *(void *)(*v1 + 128)) = 0;
  *(void *)((char *)v1 + *(void *)(*v1 + 136)) = 0;
  *(void *)((char *)v1 + *(void *)(*v1 + 144)) = 0;
  *(void *)((char *)v1 + *(void *)(*v1 + 152)) = 0;
  uint64_t v19 = (_OWORD *)((char *)v1 + *(void *)(*v1 + 160));
  *uint64_t v19 = 0u;
  v19[1] = 0u;
  uint64_t v20 = (char *)v1 + *(void *)(*v1 + 168);
  uint64_t v21 = type metadata accessor for UserInterfaceSizeClass();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
  *(void *)((char *)v2 + *(void *)(*v2 + 176)) = 0;
  *(void *)((char *)v2 + *(void *)(*v2 + 184)) = 0;
  uint64_t v22 = (char *)v2 + *(void *)(*v2 + 192);
  *(void *)uint64_t v22 = 0;
  v22[8] = 1;
  *(void *)((char *)v2 + *(void *)(*v2 + 200)) = 0;
  uint64_t v23 = (char *)v2 + *(void *)(*v2 + 208);
  uint64_t v24 = type metadata accessor for PromotionalAssets.Video();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  ObservationRegistrar.init()();
  uint64_t v25 = (char *)v2 + *(void *)(*v2 + 104);
  uint64_t v26 = type metadata accessor for ArtistPromotionalAssets();
  uint64_t v27 = *(void *)(v26 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v25, a1, v26);
  v43 = v18;
  uint64_t v28 = (uint64_t)v40;
  ArtistPromotionalAssets.eventWithPromotionalAssets.getter();
  uint64_t v45 = a1;
  ArtistPromotionalAssets.eventWithPromotionalAssets.getter();
  sub_10000A48C(&qword_1001A5498, (void (*)(uint64_t))&type metadata accessor for LiveMusic);
  Event<>.participants.getter();
  v29 = *(void (**)(char *, uint64_t))(v44 + 8);
  uint64_t v44 = v11;
  v29(v15, v11);
  uint64_t v30 = Participants<>.headliners.getter();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v7, v42);
  sub_10001203C(v30, v28);
  swift_bridgeObjectRelease();
  uint64_t v31 = type metadata accessor for Artist();
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v28, 1, v31) == 1)
  {
    sub_10000ACE0(v28, &qword_1001A5488);
    uint64_t v33 = 0;
    uint64_t v34 = 0;
  }
  else
  {
    uint64_t v33 = Artist.name.getter();
    uint64_t v34 = v35;
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v28, v31);
  }
  swift_beginAccess();
  uint64_t v36 = (uint64_t)v43;
  uint64_t v37 = sub_10000A4D4((uint64_t)v43, v33, v34, &qword_1001B7500);
  swift_endAccess();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v45, v26);
  v29((char *)v36, v44);
  v2[2] = v37;
  return v2;
}

uint64_t sub_10000A39C()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t sub_10000A3C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000570C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000A428(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000570C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000A48C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_10000A4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = sub_10000570C(&qword_1001A5490);
  v32[3] = v8;
  uint64_t v9 = sub_10000A780((unint64_t *)&qword_1001A54A0, &qword_1001A5490);
  v32[4] = v9;
  uint64_t v10 = sub_10000A7C4(v32);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v10, a1, v8);
  uint64_t v11 = (void *)*a4;
  if (!*a4) {
    goto LABEL_8;
  }
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v13 = v11[5];
  uint64_t v12 = v11[6];
  sub_10000AC9C(v11 + 2, v13);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 152);
  swift_retain();
  uint64_t v15 = v14(v13, v12);
  uint64_t v17 = v16;
  if (v15 == (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 152))(v8, v9) && v17 == v18)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_10;
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v20 & 1) == 0)
  {
    swift_release();
    a2 = v28;
    a3 = v29;
LABEL_8:
    sub_10000AD3C((uint64_t)v32, (uint64_t)v30);
    type metadata accessor for SetlistController();
    uint64_t v21 = swift_allocObject();
    uint64_t v22 = sub_100007534((uint64_t)v30, v31);
    __chkstk_darwin(v22, v22);
    uint64_t v24 = (char *)&v28 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v25 + 16))(v24);
    swift_bridgeObjectRetain();
    uint64_t v26 = sub_10000A828((uint64_t)v24, a2, a3, v21);
    sub_100007584((uint64_t)v30);
    swift_retain();
    swift_release();
    *a4 = v26;
    uint64_t v11 = (void *)v26;
  }
LABEL_10:
  sub_100007584((uint64_t)v32);
  return v11;
}

uint64_t sub_10000A780(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_10000A7C4(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_10000A828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000570C(&qword_1001A5490);
  uint64_t v35 = v8;
  uint64_t v9 = sub_10000A780((unint64_t *)&qword_1001A54A0, &qword_1001A5490);
  uint64_t v36 = v9;
  uint64_t v10 = sub_10000A7C4(v34);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v10, a1, v8);
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(void *)(a4 + 104) = 0;
  ObservationRegistrar.init()();
  sub_10000AD3C((uint64_t)v34, a4 + 16);
  *(void *)(a4 + 56) = a2;
  *(void *)(a4 + 64) = a3;
  sub_10000AC9C(v34, v35);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v28 - v15;
  Event<>.setlist.getter();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    long long v31 = 0u;
    long long v32 = 0u;
    uint64_t v33 = 0;
    goto LABEL_8;
  }
  *((void *)&v29 + 1) = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v30 = AssociatedConformanceWitness;
  uint64_t v19 = sub_10000A7C4((uint64_t *)&v28);
  (*(void (**)(uint64_t *, char *, uint64_t))(v17 + 32))(v19, v16, AssociatedTypeWitness);
  uint64_t v20 = *((void *)&v29 + 1);
  uint64_t v21 = v30;
  sub_10000AC9C(&v28, *((uint64_t *)&v29 + 1));
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v20, v21);
  swift_getAssociatedTypeWitness();
  sub_10000570C(&qword_1001A54C0);
  uint64_t v22 = _arrayForceCast<A, B>(_:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v22 + 16))
  {
    sub_10000AD3C(v22 + 32, (uint64_t)&v31);
  }
  else
  {
    uint64_t v33 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_100007584((uint64_t)&v28);
  if (!*((void *)&v32 + 1))
  {
LABEL_8:
    sub_10000ACE0((uint64_t)&v31, &qword_1001A54A8);
    sub_10000AD3C((uint64_t)v34, (uint64_t)&v31);
    uint64_t v24 = *((void *)&v32 + 1);
    uint64_t v25 = v33;
    sub_10000AC9C(&v31, *((uint64_t *)&v32 + 1));
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v9 + 240))(v24, v25))
    {
      swift_getAssociatedTypeWitness();
      sub_10000570C(&qword_1001A54B8);
      uint64_t v26 = _arrayForceCast<A, B>(_:)();
      swift_bridgeObjectRelease();
      if (*(void *)(v26 + 16))
      {
        sub_10000AD3C(v26 + 32, (uint64_t)&v28);
      }
      else
      {
        uint64_t v30 = 0;
        long long v28 = 0u;
        long long v29 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v29 + 1))
      {
        char v23 = 1;
LABEL_16:
        sub_10000ACE0((uint64_t)&v28, &qword_1001A54B0);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v30 = 0;
      long long v28 = 0u;
      long long v29 = 0u;
    }
    char v23 = 0;
    goto LABEL_16;
  }
  sub_10000ACE0((uint64_t)&v31, &qword_1001A54A8);
  sub_10000AD3C((uint64_t)v34, (uint64_t)&v31);
  char v23 = 1;
LABEL_17:
  sub_100007584((uint64_t)&v31);
  *(unsigned char *)(a4 + 113) = v23;
  *(unsigned char *)(a4 + 112) = v23;
  sub_100007584((uint64_t)v34);
  return a4;
}

void *sub_10000AC9C(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10000ACE0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000570C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000AD3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10000ADA0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10000ADA8()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10000ADB0()
{
  return sub_10004EB8C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10000ADCC()
{
  return sub_10004EA9C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10000ADE8()
{
  return sub_10004E97C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t sub_10000AE08()
{
  unint64_t result = qword_1001A54C8;
  if (!qword_1001A54C8)
  {
    sub_100004A58(&qword_1001A54D0);
    sub_100009A08();
    sub_100009B78();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A54C8);
  }
  return result;
}

__n128 initializeWithCopy for PaddingModifier(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for PaddingModifier(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PaddingModifier(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PaddingModifier()
{
  return &type metadata for PaddingModifier;
}

uint64_t sub_10000AEFC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10000AF18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000570C(&qword_1001A54D8);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v9 = static Edge.Set.top.getter();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() == v9) {
    uint64_t v10 = v2[1];
  }
  else {
    uint64_t v10 = 0;
  }
  unsigned __int8 v11 = static Edge.Set.leading.getter();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() == v11) {
    uint64_t v12 = v2[2];
  }
  else {
    uint64_t v12 = 0;
  }
  unsigned __int8 v13 = static Edge.Set.bottom.getter();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() == v13) {
    uint64_t v14 = v2[3];
  }
  else {
    uint64_t v14 = 0;
  }
  unsigned __int8 v15 = static Edge.Set.trailing.getter();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() == v15) {
    uint64_t v16 = v2[4];
  }
  else {
    uint64_t v16 = 0;
  }
  char v17 = static Edge.Set.all.getter();
  uint64_t v18 = sub_10000570C(&qword_1001A54E0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v8, a1, v18);
  uint64_t v19 = &v8[*(int *)(v5 + 36)];
  *uint64_t v19 = v17;
  *((void *)v19 + 1) = v10;
  *((void *)v19 + 2) = v12;
  *((void *)v19 + 3) = v14;
  *((void *)v19 + 4) = v16;
  v19[40] = 0;
  return sub_10000B0F8((uint64_t)v8, a2);
}

uint64_t sub_10000B0D8()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_10000B0F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A54D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10000B164()
{
  unint64_t result = qword_1001A54E8;
  if (!qword_1001A54E8)
  {
    sub_100004A58(&qword_1001A54D8);
    sub_10000B1E0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A54E8);
  }
  return result;
}

unint64_t sub_10000B1E0()
{
  unint64_t result = qword_1001A54F0;
  if (!qword_1001A54F0)
  {
    sub_100004A58(&qword_1001A54E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A54F0);
  }
  return result;
}

uint64_t sub_10000B240(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10000B394(&qword_1001A54F8, (void (*)(uint64_t))&type metadata accessor for Setlist.Song);
  uint64_t result = sub_10000B394(&qword_1001A5500, (void (*)(uint64_t))&type metadata accessor for Setlist.Song);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10000B2C4()
{
  return sub_10000B394(&qword_1001A5508, (void (*)(uint64_t))&type metadata accessor for Setlist.Song);
}

uint64_t sub_10000B310(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10000B394(&qword_1001A5548, (void (*)(uint64_t))&type metadata accessor for Setlist);
  uint64_t result = sub_10000B394(qword_1001A5550, (void (*)(uint64_t))&type metadata accessor for Setlist);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10000B394(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000B3E0()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    type metadata accessor for Optional();
    uint64_t v0 = type metadata accessor for Published();
    if (v2 <= 0x3F)
    {
      uint64_t inited = swift_initClassMetadata2();
      if (inited) {
        return inited;
      }
      else {
        return 0;
      }
    }
  }
  return v0;
}

uint64_t sub_10000B4EC()
{
  return swift_release();
}

uint64_t sub_10000B5A8()
{
  (*(void (**)(uint64_t, void))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 96), *(void *)(*(void *)v0 + 80));
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 104);
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  uint64_t v2 = type metadata accessor for Published();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_10000B6BC()
{
  sub_10000B5A8();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MusicController()
{
  return sub_10000B72C();
}

uint64_t sub_10000B72C()
{
  return swift_getGenericMetadata();
}

uint64_t sub_10000B764()
{
  return 16;
}

__n128 sub_10000B770(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t value<A>(iOS:iPadOS:)(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(void))
{
  id v5 = [self currentDevice];
  id v6 = [v5 userInterfaceIdiom];

  if (v6 == (id)1) {
    return a3();
  }
  else {
    return a1();
  }
}

uint64_t sub_10000B820@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v74 = a3;
  uint64_t v71 = a1;
  uint64_t v72 = *(void *)(a1 - 8);
  uint64_t v73 = *(void *)(v72 + 64);
  __chkstk_darwin(a1, a2);
  uint64_t v76 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NavigationPath();
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = type metadata accessor for Array();
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_100004A58(&qword_1001A5680);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v85 = (void *)v6;
  uint64_t v86 = AssociatedTypeWitness;
  uint64_t v87 = (void *)v9;
  uint64_t v88 = (void *)WitnessTable;
  uint64_t v89 = AssociatedConformanceWitness;
  type metadata accessor for ForEach();
  sub_100004A58(&qword_1001A5688);
  swift_getTupleTypeMetadata2();
  uint64_t v12 = type metadata accessor for TupleView();
  uint64_t v13 = swift_getWitnessTable();
  v85 = &type metadata for Never;
  uint64_t v86 = v12;
  uint64_t v87 = &protocol witness table for Never;
  uint64_t v88 = (void *)v13;
  uint64_t v14 = type metadata accessor for List();
  uint64_t v15 = type metadata accessor for PlainListStyle();
  uint64_t v16 = swift_getWitnessTable();
  v85 = (void *)v14;
  uint64_t v86 = v15;
  uint64_t v87 = (void *)v16;
  uint64_t v88 = &protocol witness table for PlainListStyle;
  swift_getOpaqueTypeMetadata2();
  sub_100004A58(&qword_1001A5690);
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v17 = type metadata accessor for VStack();
  uint64_t v18 = swift_getWitnessTable();
  v85 = (void *)v17;
  uint64_t v86 = v18;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  v85 = (void *)v17;
  uint64_t v86 = v18;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v85 = (void *)OpaqueTypeMetadata2;
  uint64_t v86 = OpaqueTypeConformance2;
  uint64_t v21 = swift_getOpaqueTypeMetadata2();
  uint64_t v22 = sub_100004A58(&qword_1001A5698);
  v85 = (void *)OpaqueTypeMetadata2;
  uint64_t v86 = OpaqueTypeConformance2;
  uint64_t v23 = swift_getOpaqueTypeConformance2();
  uint64_t v24 = sub_100004A58(&qword_1001A56A0);
  uint64_t v25 = sub_10000A780(&qword_1001A56A8, &qword_1001A56A0);
  v85 = (void *)v24;
  uint64_t v86 = v25;
  uint64_t v26 = swift_getOpaqueTypeConformance2();
  v85 = (void *)v21;
  uint64_t v86 = v22;
  uint64_t v87 = (void *)v23;
  uint64_t v88 = (void *)v26;
  swift_getOpaqueTypeMetadata2();
  v85 = (void *)v21;
  uint64_t v86 = v22;
  uint64_t v87 = (void *)v23;
  uint64_t v88 = (void *)v26;
  swift_getOpaqueTypeConformance2();
  uint64_t v27 = type metadata accessor for NavigationStack();
  uint64_t v65 = *(void *)(v27 - 8);
  __chkstk_darwin(v27, v28);
  uint64_t v60 = (char *)&v60 - v29;
  uint64_t v66 = type metadata accessor for ModifiedContent();
  uint64_t v69 = *(void *)(v66 - 8);
  __chkstk_darwin(v66, v66);
  uint64_t v75 = (char *)&v60 - v30;
  uint64_t v68 = type metadata accessor for ModifiedContent();
  uint64_t v70 = *(void *)(v68 - 8);
  uint64_t v32 = __chkstk_darwin(v68, v31);
  v64 = (char *)&v60 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32, v34);
  v67 = (char *)&v60 - v35;
  uint64_t v61 = v5;
  uint64_t v78 = v5;
  uint64_t v79 = v7;
  uint64_t v36 = v7;
  uint64_t v62 = v7;
  uint64_t v37 = v77;
  uint64_t v80 = v77;
  NavigationStack.init<>(root:)();
  uint64_t v38 = v72;
  uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 16);
  uint64_t v39 = v76;
  uint64_t v40 = v71;
  v63(v76, v37, v71);
  unint64_t v41 = (*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
  v73 += v41;
  uint64_t v42 = swift_allocObject();
  *(void *)(v42 + 16) = v5;
  *(void *)(v42 + 24) = v36;
  v43 = *(void (**)(unint64_t, char *, uint64_t))(v38 + 32);
  uint64_t v44 = v39;
  uint64_t v45 = v40;
  v43(v42 + v41, v44, v40);
  uint64_t v46 = v27;
  uint64_t v47 = swift_getWitnessTable();
  v48 = v60;
  View.onAppear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v48, v46);
  v49 = v76;
  v63(v76, v77, v45);
  uint64_t v50 = swift_allocObject();
  uint64_t v51 = v62;
  *(void *)(v50 + 16) = v61;
  *(void *)(v50 + 24) = v51;
  v43(v50 + v41, v49, v45);
  uint64_t v83 = v47;
  uint64_t v84 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v52 = v66;
  uint64_t v53 = swift_getWitnessTable();
  uint64_t v54 = v64;
  uint64_t v55 = v75;
  View.onDisappear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v69 + 8))(v55, v52);
  uint64_t v81 = v53;
  uint64_t v82 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v56 = v68;
  swift_getWitnessTable();
  char v57 = v67;
  sub_1001221F0(v54, v56);
  char v58 = *(void (**)(char *, uint64_t))(v70 + 8);
  v58(v54, v56);
  sub_1001221F0(v57, v56);
  return ((uint64_t (*)(char *, uint64_t))v58)(v57, v56);
}

uint64_t sub_10000C0F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v80 = a3;
  uint64_t v75 = a1;
  uint64_t v79 = a4;
  uint64_t v5 = type metadata accessor for NavigationBarItem.TitleDisplayMode();
  uint64_t v77 = *(void *)(v5 - 8);
  uint64_t v78 = v5;
  __chkstk_darwin(v5, v6);
  uint64_t v76 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Array();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = sub_100004A58(&qword_1001A5680);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v60 = a2;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v87 = (void *)v8;
  uint64_t v88 = AssociatedTypeWitness;
  uint64_t v89 = (void *)v10;
  uint64_t v90 = (void *)WitnessTable;
  uint64_t v91 = AssociatedConformanceWitness;
  type metadata accessor for ForEach();
  sub_100004A58(&qword_1001A5688);
  swift_getTupleTypeMetadata2();
  uint64_t v13 = type metadata accessor for TupleView();
  uint64_t v14 = swift_getWitnessTable();
  uint64_t v87 = &type metadata for Never;
  uint64_t v88 = v13;
  uint64_t v89 = &protocol witness table for Never;
  uint64_t v90 = (void *)v14;
  uint64_t v15 = type metadata accessor for List();
  uint64_t v16 = type metadata accessor for PlainListStyle();
  uint64_t v17 = swift_getWitnessTable();
  uint64_t v87 = (void *)v15;
  uint64_t v88 = v16;
  uint64_t v89 = (void *)v17;
  uint64_t v90 = &protocol witness table for PlainListStyle;
  swift_getOpaqueTypeMetadata2();
  sub_100004A58(&qword_1001A5690);
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v18 = type metadata accessor for VStack();
  uint64_t v74 = *(void *)(v18 - 8);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v59 - v20;
  uint64_t v22 = swift_getWitnessTable();
  uint64_t v87 = (void *)v18;
  uint64_t v88 = v22;
  uint64_t v23 = v22;
  uint64_t v71 = v22;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v73 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2, v25);
  uint64_t v70 = (char *)&v59 - v26;
  uint64_t v87 = (void *)v18;
  uint64_t v88 = v23;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v87 = (void *)OpaqueTypeMetadata2;
  uint64_t v88 = OpaqueTypeConformance2;
  uint64_t v28 = (void *)OpaqueTypeMetadata2;
  uint64_t v67 = OpaqueTypeMetadata2;
  uint64_t v29 = OpaqueTypeConformance2;
  uint64_t v68 = OpaqueTypeConformance2;
  uint64_t v30 = swift_getOpaqueTypeMetadata2();
  uint64_t v64 = v30;
  uint64_t v72 = *(void *)(v30 - 8);
  __chkstk_darwin(v30, v31);
  uint64_t v69 = (char *)&v59 - v32;
  uint64_t v33 = sub_100004A58(&qword_1001A5698);
  uint64_t v63 = v33;
  uint64_t v87 = v28;
  uint64_t v88 = v29;
  uint64_t v34 = swift_getOpaqueTypeConformance2();
  uint64_t v62 = v34;
  uint64_t v35 = sub_100004A58(&qword_1001A56A0);
  uint64_t v36 = sub_10000A780(&qword_1001A56A8, &qword_1001A56A0);
  uint64_t v87 = (void *)v35;
  uint64_t v88 = v36;
  uint64_t v61 = swift_getOpaqueTypeConformance2();
  uint64_t v87 = (void *)v30;
  uint64_t v88 = v33;
  uint64_t v89 = (void *)v34;
  uint64_t v90 = (void *)v61;
  uint64_t v65 = &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>;
  uint64_t v37 = swift_getOpaqueTypeMetadata2();
  uint64_t v66 = *(void *)(v37 - 8);
  uint64_t v39 = __chkstk_darwin(v37, v38);
  unint64_t v41 = (char *)&v59 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39, v42);
  uint64_t v44 = (char *)&v59 - v43;
  uint64_t v84 = a2;
  uint64_t v85 = v80;
  uint64_t v45 = v75;
  uint64_t v86 = v75;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  uint64_t v46 = v77;
  uint64_t v47 = v78;
  v48 = v76;
  (*(void (**)(char *, void, uint64_t))(v77 + 104))(v76, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v78);
  v49 = v70;
  View.navigationBarTitleDisplayMode(_:)();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v48, v47);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v21, v18);
  uint64_t v50 = v45;
  uint64_t v51 = v69;
  uint64_t v52 = v67;
  View.navigationTitle(_:)();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v49, v52);
  uint64_t v81 = v60;
  uint64_t v82 = v80;
  uint64_t v83 = v50;
  uint64_t v53 = (void *)v64;
  uint64_t v54 = v63;
  uint64_t v55 = (void *)v62;
  uint64_t v56 = (void *)v61;
  View.toolbar<A>(content:)();
  (*(void (**)(char *, void *))(v72 + 8))(v51, v53);
  uint64_t v87 = v53;
  uint64_t v88 = v54;
  uint64_t v89 = v55;
  uint64_t v90 = v56;
  swift_getOpaqueTypeConformance2();
  sub_1001221F0(v41, v37);
  char v57 = *(void (**)(char *, uint64_t))(v66 + 8);
  v57(v41, v37);
  sub_1001221F0(v44, v37);
  return ((uint64_t (*)(char *, uint64_t))v57)(v44, v37);
}

uint64_t sub_10000C958@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t OpaqueTypeConformance2 = a3;
  uint64_t v64 = a1;
  uint64_t v67 = a4;
  uint64_t v5 = type metadata accessor for PlainListStyle();
  uint64_t v59 = v5;
  uint64_t v66 = *(void (***)(char *, uint64_t))(v5 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v65 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (void *)type metadata accessor for Array();
  uint64_t v62 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = sub_100004A58(&qword_1001A5680);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v77 = v8;
  uint64_t v78 = AssociatedTypeWitness;
  uint64_t v79 = (void *)v10;
  uint64_t v80 = (void *)WitnessTable;
  uint64_t v81 = AssociatedConformanceWitness;
  type metadata accessor for ForEach();
  sub_100004A58(&qword_1001A5688);
  swift_getTupleTypeMetadata2();
  uint64_t v13 = type metadata accessor for TupleView();
  uint64_t v14 = swift_getWitnessTable();
  uint64_t v77 = &type metadata for Never;
  uint64_t v78 = v13;
  uint64_t v79 = &protocol witness table for Never;
  uint64_t v80 = (void *)v14;
  uint64_t v15 = (void *)type metadata accessor for List();
  uint64_t v16 = *(v15 - 1);
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)&v58 - v18;
  uint64_t v20 = swift_getWitnessTable();
  uint64_t v77 = v15;
  uint64_t v78 = v5;
  uint64_t v79 = (void *)v20;
  uint64_t v80 = &protocol witness table for PlainListStyle;
  uint64_t v60 = &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v69 = *(void *)(OpaqueTypeMetadata2 - 8);
  uint64_t v22 = __chkstk_darwin(OpaqueTypeMetadata2, v21);
  uint64_t v24 = (char *)&v58 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  uint64_t v61 = (char *)&v58 - v26;
  uint64_t v70 = v62;
  uint64_t v71 = OpaqueTypeConformance2;
  uint64_t v72 = v64;
  List<>.init(content:)();
  uint64_t v27 = v65;
  PlainListStyle.init()();
  uint64_t v28 = v59;
  View.listStyle<A>(_:)();
  v66[1](v27, v28);
  (*(void (**)(char *, void *))(v16 + 8))(v19, v15);
  uint64_t v77 = v15;
  uint64_t v78 = v28;
  uint64_t v79 = (void *)v20;
  uint64_t v80 = &protocol witness table for PlainListStyle;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v29 = OpaqueTypeMetadata2;
  sub_1001221F0(v24, OpaqueTypeMetadata2);
  uint64_t v30 = *(void (***)(char *, uint64_t))(v69 + 8);
  uint64_t v65 = (char *)(v69 + 8);
  uint64_t v66 = v30;
  uint64_t v31 = v24;
  ((void (*)(char *, uint64_t))v30)(v24, v29);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v32 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v34 = v33;
  LOBYTE(v5) = v35 & 1;
  static Font.Weight.regular.getter();
  uint64_t v36 = Text.fontWeight(_:)();
  uint64_t v38 = v37;
  LOBYTE(v16) = v39 & 1;
  sub_10000FCC4(v32, v34, v5);
  swift_bridgeObjectRelease();
  static Font.footnote.getter();
  uint64_t v40 = (void *)Text.font(_:)();
  uint64_t v42 = v41;
  LOBYTE(v27) = v43;
  uint64_t v45 = v44;
  swift_release();
  LOBYTE(v32) = v27 & 1;
  sub_10000FCC4(v36, v38, v16);
  swift_bridgeObjectRelease();
  LOBYTE(v19) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  uint64_t v54 = v61;
  uint64_t v55 = OpaqueTypeMetadata2;
  (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v31, v61, OpaqueTypeMetadata2);
  uint64_t v88 = 0;
  char v89 = 1;
  v90[0] = v31;
  v90[1] = &v88;
  uint64_t v77 = v40;
  uint64_t v78 = v42;
  LOBYTE(v79) = v32;
  uint64_t v80 = v45;
  uint64_t v81 = 0x3FE0000000000000;
  char v82 = (char)v19;
  uint64_t v83 = v47;
  uint64_t v84 = v49;
  uint64_t v85 = v51;
  uint64_t v86 = v53;
  char v87 = 0;
  v90[2] = &v77;
  sub_10000FCD4((uint64_t)v40, v42, v32);
  swift_bridgeObjectRetain();
  v76[0] = v55;
  v76[1] = &type metadata for Spacer;
  v76[2] = sub_10000570C(&qword_1001A5690);
  uint64_t v73 = OpaqueTypeConformance2;
  uint64_t v74 = &protocol witness table for Spacer;
  unint64_t v75 = sub_10000FCE4();
  sub_1001231A4((uint64_t)v90, 3uLL, (uint64_t)v76);
  sub_10000FCC4((uint64_t)v40, v42, v32);
  swift_bridgeObjectRelease();
  uint64_t v56 = v66;
  ((void (*)(char *, uint64_t))v66)(v54, v55);
  sub_10000FCC4((uint64_t)v77, v78, (char)v79);
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v56)(v31, v55);
}

uint64_t sub_10000D0C8@<X0>(long long *a1@<X0>, void (*a2)(char *, long long *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v104 = a4;
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v88 = *(void *)(v7 - 8);
  uint64_t v89 = v7;
  uint64_t v9 = __chkstk_darwin(v7, v8);
  uint64_t v98 = (char *)&v81 - v10;
  uint64_t v97 = *((void *)a2 - 1);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v90 = v13;
  uint64_t v91 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  uint64_t v100 = (char *)&v81 - v15;
  uint64_t v101 = sub_10000570C(&qword_1001A5688);
  uint64_t v17 = __chkstk_darwin(v101, v16);
  uint64_t v103 = (uint64_t)&v81 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  uint64_t v102 = (char *)&v81 - v20;
  uint64_t v106 = (void (*)(void, void, void))a3;
  uint64_t v105 = type metadata accessor for TicketView();
  uint64_t v21 = *(void *)(v105 - 8);
  uint64_t v99 = *(char **)(v21 + 64);
  __chkstk_darwin(v105, v22);
  uint64_t v107 = (char *)&v81 - v23;
  uint64_t v24 = type metadata accessor for Array();
  uint64_t v94 = *(void (**)(void, void, void))(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v95 = AssociatedTypeWitness;
  uint64_t v26 = sub_100004A58(&qword_1001A5680);
  uint64_t v109 = v26;
  uint64_t v96 = (uint64_t (*)(char *, uint64_t))v24;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v93 = WitnessTable;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v125 = v24;
  *((void *)&v125 + 1) = AssociatedTypeWitness;
  *(void *)&long long v126 = v26;
  *((void *)&v126 + 1) = WitnessTable;
  *(void *)&long long v127 = AssociatedConformanceWitness;
  uint64_t v111 = type metadata accessor for ForEach();
  uint64_t v108 = *(void *)(v111 - 8);
  uint64_t v30 = __chkstk_darwin(v111, v29);
  uint64_t v32 = (char *)&v81 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30, v33);
  uint64_t v110 = (char *)&v81 - v34;
  long long v35 = a1[7];
  long long v131 = a1[6];
  long long v132 = v35;
  uint64_t v133 = *((void *)a1 + 16);
  long long v36 = a1[3];
  long long v127 = a1[2];
  long long v128 = v36;
  long long v37 = a1[5];
  long long v129 = a1[4];
  long long v130 = v37;
  long long v38 = a1[1];
  long long v125 = *a1;
  long long v126 = v38;
  char v39 = v106;
  uint64_t v92 = type metadata accessor for TicketViewModel();
  *(void *)&long long v116 = sub_1001154DC();
  uint64_t v40 = *(void (**)(char *, long long *, uint64_t))(v21 + 16);
  uint64_t v41 = v107;
  uint64_t v42 = v105;
  uint64_t v83 = v21 + 16;
  uint64_t v81 = v40;
  v40(v107, a1, v105);
  uint64_t v43 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v44 = (v43 + 32) & ~v43;
  char v82 = &v99[v44];
  uint64_t v84 = v43 | 7;
  uint64_t v45 = swift_allocObject();
  *(void *)(v45 + 16) = a2;
  *(void *)(v45 + 24) = v39;
  uint64_t v46 = *(void (**)(uint64_t, char *, uint64_t))(v21 + 32);
  uint64_t v47 = v42;
  uint64_t v48 = a2;
  uint64_t v86 = v44;
  uint64_t v87 = v21 + 32;
  uint64_t v85 = v46;
  v46(v45 + v44, v41, v47);
  uint64_t v49 = sub_10000A780(&qword_1001A56D8, &qword_1001A5680);
  uint64_t v79 = v94;
  ForEach<>.init(_:content:)();
  v115[2] = v49;
  uint64_t v50 = v111;
  uint64_t v95 = swift_getWitnessTable();
  sub_1001221F0(v32, v50);
  uint64_t v52 = (char *)(v108 + 8);
  uint64_t v51 = *(uint64_t (**)(char *, uint64_t))(v108 + 8);
  uint64_t v99 = v32;
  uint64_t v96 = v51;
  v51(v32, v50);
  long long v53 = a1[6];
  long long v54 = a1[7];
  long long v55 = a1[4];
  long long v121 = a1[5];
  long long v122 = v53;
  long long v123 = v54;
  uint64_t v124 = *((void *)a1 + 16);
  long long v56 = a1[3];
  long long v118 = a1[2];
  long long v119 = v56;
  long long v120 = v55;
  long long v57 = a1[1];
  long long v116 = *a1;
  long long v117 = v57;
  uint64_t v58 = v98;
  sub_100115864();
  uint64_t v59 = v97;
  if ((*(unsigned int (**)(char *, uint64_t, void))(v97 + 48))(v58, 1, v48) == 1)
  {
    (*(void (**)(char *, uint64_t))(v88 + 8))(v58, v89);
    uint64_t v60 = (uint64_t)v102;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v109 - 8) + 56))(v102, 1, 1);
  }
  else
  {
    uint64_t v94 = *(void (**)(void, void, void))(v59 + 32);
    uint64_t v61 = v100;
    v94(v100, v58, v48);
    uint64_t v62 = v105;
    v81(v107, a1, v105);
    uint64_t v63 = v91;
    (*(void (**)(char *, char *, void))(v59 + 16))(v91, v61, v48);
    uint64_t v64 = *(unsigned __int8 *)(v59 + 80);
    uint64_t v98 = v52;
    unint64_t v65 = (unint64_t)&v82[v64] & ~v64;
    uint64_t v66 = swift_allocObject();
    uint64_t v68 = (void (*)(char *, long long *, uint64_t))v106;
    uint64_t v67 = v107;
    *(void *)(v66 + 16) = v48;
    *(void *)(v66 + 24) = v68;
    v85(v66 + v86, v67, v62);
    uint64_t v69 = ((uint64_t (*)(unint64_t, char *, void))v94)(v66 + v65, v63, v48);
    __chkstk_darwin(v69, v70);
    *(&v81 - 4) = v48;
    *(&v81 - 3) = v68;
    uint64_t v71 = v100;
    uint64_t v79 = (void (*)(void, void, void))a1;
    uint64_t v80 = v100;
    sub_100010164();
    uint64_t v60 = (uint64_t)v102;
    Button.init(action:label:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v109 - 8) + 56))(v60, 0, 1);
    (*(void (**)(char *, void (*)(char *, long long *, uint64_t)))(v59 + 8))(v71, v48);
  }
  uint64_t v72 = v99;
  uint64_t v74 = v110;
  uint64_t v73 = v111;
  (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v99, v110, v111);
  v115[0] = v72;
  uint64_t v75 = v103;
  sub_100010050(v60, v103);
  v115[1] = v75;
  v114[0] = v73;
  v114[1] = v101;
  uint64_t v112 = v95;
  unint64_t v113 = sub_1000100B8();
  sub_1001231A4((uint64_t)v115, 2uLL, (uint64_t)v114);
  sub_10000ACE0(v60, &qword_1001A5688);
  uint64_t v76 = v74;
  uint64_t v77 = v96;
  v96(v76, v73);
  sub_10000ACE0(v75, &qword_1001A5688);
  return v77(v72, v73);
}

uint64_t sub_10000D958@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t v24 = a5;
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(a1, a2);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TicketView();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v21 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v21 - v15, v23, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  unint64_t v17 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v18 = (v13 + *(unsigned __int8 *)(v8 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a3;
  *(void *)(v19 + 24) = a4;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v19 + v17, v16, v11);
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v19 + v18, v10, a3);
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v27 = v22;
  sub_100010164();
  return Button.init(action:label:)();
}

uint64_t sub_10000DBA4(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v27 - 8);
  __chkstk_darwin(v27, v8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OpenURLAction();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TicketView();
  sub_1000264EC((uint64_t)v15);
  (*(void (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  OpenURLAction.callAsFunction(_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v27);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  long long v16 = a1[7];
  long long v34 = a1[6];
  long long v35 = v16;
  uint64_t v36 = *((void *)a1 + 16);
  long long v17 = a1[3];
  long long v30 = a1[2];
  long long v31 = v17;
  long long v18 = a1[5];
  long long v32 = a1[4];
  long long v33 = v18;
  long long v19 = a1[1];
  long long v28 = *a1;
  long long v29 = v19;
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  uint64_t v22 = *((void *)a1 + 17);
  if (v22)
  {
    uint64_t v23 = v20;
    uint64_t v24 = v21;
    type metadata accessor for TicketViewModel();
    swift_retain();
    sub_1001155A8(v23, v24, v22);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10000E4F8();
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10000DE30@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  sub_10000570C(&qword_1001A56F0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100153180;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  uint64_t v9 = v8;
  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 64) = sub_1000101B8();
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v9;
  uint64_t result = String.init(format:_:)();
  *a3 = result;
  a3[1] = v11;
  return result;
}

uint64_t sub_10000DEF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ToolbarItemPlacement();
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v8 = sub_10000570C(&qword_1001A56A0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = &v14[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static ToolbarItemPlacement.navigationBarTrailing.getter();
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v17 = a1;
  sub_10000570C(&qword_1001A56B0);
  sub_10000A780(&qword_1001A56B8, &qword_1001A56B0);
  ToolbarItem<>.init(placement:content:)();
  sub_10000A780(&qword_1001A56A8, &qword_1001A56A0);
  static ToolbarContentBuilder.buildBlock<A>(_:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_10000E0CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v19[1] = a4;
  uint64_t v7 = type metadata accessor for DismissAction();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v11 = __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)v19 - v14;
  type metadata accessor for TicketView();
  sub_10002652C((uint64_t)v15);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v12, v15, v7);
  unint64_t v16 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v17 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v17 + v16, v12, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v15, v7);
  v19[4] = a2;
  v19[5] = a3;
  v19[6] = a1;
  return Button.init(action:label:)();
}

uint64_t sub_10000E2A4@<X0>(uint64_t a1@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_10000E338(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  if (*(void *)(a1 + 136))
  {
    uint64_t v5 = type metadata accessor for TicketViewModel();
    uint64_t v6 = swift_retain();
    a4(v6, v5);
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10000E4F8();
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10000E3F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v3;
  *(void *)(a2 + 128) = *(void *)(a1 + 128);
  long long v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v6;
  type metadata accessor for RemoteViewConfiguration();
  sub_10000E4F8();
  *(void *)(a2 + 136) = EnvironmentObject.init()();
  *(void *)(a2 + 144) = v7;
  uint64_t v8 = type metadata accessor for TicketView();
  uint64_t v9 = (uint64_t *)(a2 + *(int *)(v8 + 40));
  *uint64_t v9 = swift_getKeyPath();
  sub_10000570C(&qword_1001A5460);
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = (uint64_t *)(a2 + *(int *)(v8 + 44));
  uint64_t *v10 = swift_getKeyPath();
  sub_10000570C(&qword_1001A55D8);

  return swift_storeEnumTagMultiPayload();
}

unint64_t sub_10000E4F8()
{
  unint64_t result = qword_1001A5458;
  if (!qword_1001A5458)
  {
    type metadata accessor for RemoteViewConfiguration();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5458);
  }
  return result;
}

uint64_t type metadata accessor for TicketView()
{
  return sub_10000B72C();
}

uint64_t sub_10000E56C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_10000570C(&qword_1001A5700);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[2] = a1;
  v27[3] = a2;
  sub_100010B2C();
  swift_bridgeObjectRetain();
  uint64_t v10 = Text.init<A>(_:)();
  uint64_t v12 = v11;
  char v14 = v13 & 1;
  static Font.callout.getter();
  uint64_t v15 = Text.font(_:)();
  uint64_t v17 = v16;
  LOBYTE(a2) = v18;
  v27[0] = v19;
  swift_release();
  char v20 = a2 & 1;
  sub_10000FCC4(v10, v12, v14);
  swift_bridgeObjectRelease();
  Image.init(systemName:)();
  static SymbolRenderingMode.hierarchical.getter();
  uint64_t v21 = type metadata accessor for SymbolRenderingMode();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v9, 0, 1, v21);
  uint64_t v22 = Image.symbolRenderingMode(_:)();
  swift_release();
  sub_10000ACE0((uint64_t)v9, &qword_1001A5700);
  uint64_t v23 = static Color.blue.getter();
  uint64_t v24 = static Font.title3.getter();
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)a3 = v15;
  *(void *)(a3 + 8) = v17;
  *(unsigned char *)(a3 + 16) = v20;
  *(void *)(a3 + 24) = v27[0];
  *(void *)(a3 + 32) = 0;
  *(unsigned char *)(a3 + 40) = 1;
  *(void *)(a3 + 48) = v22;
  *(void *)(a3 + 56) = v23;
  *(void *)(a3 + 64) = KeyPath;
  *(void *)(a3 + 72) = v24;
  sub_10000FCD4(v15, v17, v20);
  swift_bridgeObjectRetain();
  sub_10000FCC4(v15, v17, v20);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10000E788@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v19 = static VerticalAlignment.center.getter();
  sub_10000E56C(v4, v3, (uint64_t)v20);
  uint64_t v5 = v20[0];
  uint64_t v6 = v20[1];
  char v7 = v21;
  uint64_t v8 = v22;
  uint64_t v9 = v23;
  char v10 = v24;
  uint64_t v12 = v26;
  uint64_t v11 = v27;
  long long v18 = v25;
  LOBYTE(v3) = static Edge.Set.vertical.getter();
  uint64_t result = EdgeInsets.init(_all:)();
  *(void *)a1 = v19;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(unsigned char *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 72) = v18;
  *(void *)(a1 + 88) = v12;
  *(void *)(a1 + 96) = v11;
  *(unsigned char *)(a1 + 104) = v3;
  *(void *)(a1 + 112) = v14;
  *(void *)(a1 + 120) = v15;
  *(void *)(a1 + 128) = v16;
  *(void *)(a1 + 136) = v17;
  *(unsigned char *)(a1 + 144) = 0;
  return result;
}

uint64_t sub_10000E868()
{
  return EnvironmentValues.openURL.getter();
}

uint64_t sub_10000E88C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OpenURLAction();
  __chkstk_darwin(v2, v3);
  (*(void (**)(char *, uint64_t))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.openURL.setter();
}

uint64_t sub_10000E958()
{
  return EnvironmentValues.openURL.getter();
}

uint64_t sub_10000E980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

void sub_10000E988()
{
  sub_10000FA40(319, (unint64_t *)&qword_1001A5670, (void (*)(uint64_t))&type metadata accessor for DismissAction);
  if (v0 <= 0x3F)
  {
    sub_10000FA40(319, (unint64_t *)&qword_1001A5678, (void (*)(uint64_t))&type metadata accessor for OpenURLAction);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_10000EA9C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *(void *)a1 = *a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v6;
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = a2[4];
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    uint64_t v8 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v8;
    *(void *)(a1 + 64) = a2[8];
    *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
    uint64_t v9 = a2[11];
    *(void *)(a1 + 80) = a2[10];
    *(void *)(a1 + 88) = v9;
    *(void *)(a1 + 96) = a2[12];
    *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
    uint64_t v10 = a2[15];
    *(void *)(a1 + 112) = a2[14];
    *(void *)(a1 + 120) = v10;
    uint64_t v11 = a2[16];
    uint64_t v12 = a2[18];
    *(void *)(a1 + 136) = a2[17];
    *(void *)(a1 + 144) = v12;
    uint64_t v13 = *(int *)(a3 + 40);
    char v21 = (uint64_t *)((char *)a2 + v13);
    uint64_t v22 = (void *)(a1 + v13);
    *(void *)(a1 + 128) = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10000570C(&qword_1001A5460);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v22, v21, v14);
    }
    else
    {
      *uint64_t v22 = *v21;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v16 = *(int *)(a3 + 44);
    uint64_t v17 = (void *)(a1 + v16);
    long long v18 = (uint64_t *)((char *)a2 + v16);
    sub_10000570C(&qword_1001A55D8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v19 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    }
    else
    {
      void *v17 = *v18;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10000ED2C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + *(int *)(a2 + 44);
  sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for OpenURLAction();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    return v8(v6, v7);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_10000EEA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v9 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v9;
  uint64_t v10 = *(void *)(a2 + 128);
  uint64_t v11 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v11;
  uint64_t v12 = *(int *)(a3 + 40);
  char v20 = (void *)(a1 + v12);
  uint64_t v19 = (void *)(a2 + v12);
  *(void *)(a1 + 128) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = type metadata accessor for DismissAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v20, v19, v13);
  }
  else
  {
    *char v20 = *v19;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v14 = *(int *)(a3 + 44);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = type metadata accessor for OpenURLAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
  }
  else
  {
    *uint64_t v15 = *v16;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_10000F0E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_retain();
  swift_release();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 40);
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (void *)(a2 + v6);
    sub_10000ACE0(a1 + v6, &qword_1001A5460);
    sub_10000570C(&qword_1001A5460);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      *uint64_t v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v10 = *(int *)(a3 + 44);
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (void *)(a2 + v10);
    sub_10000ACE0(a1 + v10, &qword_1001A55D8);
    sub_10000570C(&qword_1001A55D8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *uint64_t v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10000F3A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  long long v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  uint64_t v10 = *(int *)(a3 + 40);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (const void *)(a2 + v10);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  uint64_t v13 = sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = type metadata accessor for DismissAction();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 32))(v11, v12, v14);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  uint64_t v15 = *(int *)(a3 + 44);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  uint64_t v18 = sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = type metadata accessor for OpenURLAction();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v19 - 8) + 32))(v16, v17, v19);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10000F54C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v9;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_release();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  if (a1 != a2)
  {
    uint64_t v11 = *(int *)(a3 + 40);
    uint64_t v12 = (void *)(a1 + v11);
    uint64_t v13 = (const void *)(a2 + v11);
    sub_10000ACE0(a1 + v11, &qword_1001A5460);
    uint64_t v14 = sub_10000570C(&qword_1001A5460);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = type metadata accessor for DismissAction();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v12, v13, v15);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
    }
    uint64_t v16 = *(int *)(a3 + 44);
    uint64_t v17 = (void *)(a1 + v16);
    uint64_t v18 = (const void *)(a2 + v16);
    sub_10000ACE0(a1 + v16, &qword_1001A55D8);
    uint64_t v19 = sub_10000570C(&qword_1001A55D8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v20 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v20 - 8) + 32))(v17, v18, v20);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10000F7B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000F7C4);
}

uint64_t sub_10000F7C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000570C(&qword_1001A55E0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 40);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10000570C(qword_1001A55E8);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 44);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_10000F8F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000F90C);
}

uint64_t sub_10000F90C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_10000570C(&qword_1001A55E0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 40);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10000570C(qword_1001A55E8);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 44);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_10000FA40(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Environment.Content();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_10000FA94()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10000FAD8@<X0>(uint64_t a1@<X8>)
{
  return sub_10000C0F4(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10000FAE8()
{
  return sub_10000FB1C((void (*)(uint64_t, uint64_t))sub_1001158DC);
}

uint64_t sub_10000FB04()
{
  return sub_10000FB1C((void (*)(uint64_t, uint64_t))sub_100115938);
}

uint64_t sub_10000FB1C(void (*a1)(uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(type metadata accessor for TicketView() - 8);
  return sub_10000E338(v1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), v3, v4, a1);
}

uint64_t sub_10000FB9C@<X0>(uint64_t a1@<X8>)
{
  return sub_10000C958(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10000FBA8()
{
  return sub_10000DEF0(v0[4], v0[2], v0[3]);
}

uint64_t sub_10000FBB4@<X0>(uint64_t a1@<X8>)
{
  return sub_10000E0CC(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10000FBC0()
{
  uint64_t v1 = type metadata accessor for DismissAction();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

void sub_10000FC50()
{
}

uint64_t sub_10000FCAC@<X0>(uint64_t a1@<X8>)
{
  return sub_10000E2A4(a1);
}

uint64_t sub_10000FCB8@<X0>(uint64_t a1@<X8>)
{
  return sub_10000D0C8(*(long long **)(v1 + 32), *(void (**)(char *, long long *, uint64_t))(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_10000FCC4(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10000FCD4(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

unint64_t sub_10000FCE4()
{
  unint64_t result = qword_1001A56C0;
  if (!qword_1001A56C0)
  {
    sub_100004A58(&qword_1001A5690);
    sub_10000FD60();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A56C0);
  }
  return result;
}

unint64_t sub_10000FD60()
{
  unint64_t result = qword_1001A56C8;
  if (!qword_1001A56C8)
  {
    sub_100004A58(&qword_1001A56D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A56C8);
  }
  return result;
}

uint64_t sub_10000FDD8()
{
  uint64_t v1 = type metadata accessor for TicketView();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v3 = v2 + *(int *)(v1 + 40);
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = v2 + *(int *)(v1 + 44);
  sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for OpenURLAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_10000FFB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for TicketView() - 8);
  uint64_t v8 = v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_10000D958(a1, v8, v5, v6, a2);
}

uint64_t sub_100010050(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A5688);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000100B8()
{
  unint64_t result = qword_1001A56E0;
  if (!qword_1001A56E0)
  {
    sub_100004A58(&qword_1001A5688);
    sub_10000A780(&qword_1001A56D8, &qword_1001A5680);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A56E0);
  }
  return result;
}

uint64_t sub_100010158@<X0>(uint64_t *a1@<X8>)
{
  return sub_10000DE30(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

unint64_t sub_100010164()
{
  unint64_t result = qword_1001A56E8;
  if (!qword_1001A56E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A56E8);
  }
  return result;
}

unint64_t sub_1000101B8()
{
  unint64_t result = qword_1001A56F8;
  if (!qword_1001A56F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A56F8);
  }
  return result;
}

uint64_t sub_100010210()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for TicketView();
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v11 = *(void *)(*(void *)(v2 - 8) + 64);
  uint64_t v4 = *(void *)(v1 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  unint64_t v6 = v0 + v3 + *(int *)(v2 + 40);
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for DismissAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  unint64_t v8 = v0 + v3 + *(int *)(v2 + 44);
  sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for OpenURLAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + ((v3 + v11 + v5) & ~v5), v1);

  return swift_deallocObject();
}

uint64_t sub_100010480()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(type metadata accessor for TicketView() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_10000DBA4((long long *)(v0 + v4), v0+ ((v4 + *(void *)(v3 + 64) + *(unsigned __int8 *)(*(void *)(v1 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1, v2);
}

uint64_t sub_100010550@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(v1 + 24) + 32))(*(void *)(v1 + 16));
  *a1 = result;
  a1[1] = v4;
  return result;
}

void *initializeBufferWithCopyOfBuffer for TicketProviderRow(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for RemoteViewConfiguration.Service()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for TicketProviderRow(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for TicketProviderRow(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewModulesConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ViewModulesConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TicketProviderRow()
{
  return &type metadata for TicketProviderRow;
}

uint64_t sub_1000106D4()
{
  return swift_getWitnessTable();
}

uint64_t sub_100010B10()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100010B2C()
{
  unint64_t result = qword_1001ACC00;
  if (!qword_1001ACC00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001ACC00);
  }
  return result;
}

unint64_t sub_100010B8C()
{
  unint64_t result = qword_1001A5708;
  if (!qword_1001A5708)
  {
    sub_100004A58(&qword_1001A5710);
    sub_10000A780(&qword_1001A5718, &qword_1001A5720);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5708);
  }
  return result;
}

uint64_t sub_100010C34()
{
  return sub_10007A9F0();
}

uint64_t sub_100010C6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v132 = a1;
  uint64_t v110 = type metadata accessor for TaskPriority();
  uint64_t v109 = *(void *)(v110 - 8);
  __chkstk_darwin(v110, v2);
  uint64_t v108 = (char *)&v100 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = sub_10000570C(&qword_1001A5728);
  uint64_t v105 = *(void *)(v107 - 8);
  __chkstk_darwin(v107, v4);
  uint64_t v104 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = sub_10000570C(&qword_1001A5730);
  uint64_t v7 = __chkstk_darwin(v131, v6);
  uint64_t v103 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  uint64_t v106 = (uint64_t)&v100 - v10;
  uint64_t v112 = type metadata accessor for ErrorView();
  uint64_t v12 = __chkstk_darwin(v112, v11);
  unint64_t v113 = (uint64_t *)((char *)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12, v14);
  uint64_t v115 = (uint64_t)&v100 - v15;
  uint64_t v127 = sub_10000570C(&qword_1001A5738);
  uint64_t v17 = __chkstk_darwin(v127, v16);
  uint64_t v114 = (uint64_t)&v100 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  uint64_t v116 = (uint64_t)&v100 - v20;
  uint64_t v128 = sub_10000570C(&qword_1001A5740);
  __chkstk_darwin(v128, v21);
  uint64_t v130 = (uint64_t)&v100 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = sub_10000570C(&qword_1001A5748);
  __chkstk_darwin(v123, v23);
  uint64_t v125 = (uint64_t)&v100 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = sub_10000570C(&qword_1001A5750);
  __chkstk_darwin(v129, v25);
  long long v126 = (char *)&v100 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = sub_10000570C(&qword_1001A5758);
  uint64_t v28 = __chkstk_darwin(v124, v27);
  long long v117 = (char *)&v100 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28, v30);
  uint64_t v111 = (uint64_t)&v100 - v31;
  uint64_t v32 = sub_10000570C(&qword_1001A5760);
  __chkstk_darwin(v32 - 8, v33);
  long long v35 = (char *)&v100 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_10000570C(&qword_1001A5490);
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = *(void *)(v37 + 64);
  uint64_t v40 = __chkstk_darwin(v36, v39);
  __chkstk_darwin(v40, v41);
  uint64_t v43 = (char *)&v100 - v42;
  uint64_t v45 = *(void *)(v1 + 16);
  uint64_t v44 = *(void *)(v1 + 24);
  uint64_t v133 = (void *)v1;
  int v46 = *(unsigned __int8 *)(v1 + 32);
  uint64_t v47 = type metadata accessor for EventController();
  uint64_t v48 = sub_1000137A8(&qword_1001A5768, (void (*)(uint64_t))type metadata accessor for EventController);
  uint64_t v120 = v45;
  uint64_t v121 = v44;
  int v122 = v46;
  uint64_t v118 = v48;
  uint64_t v119 = v47;
  StateObject.wrappedValue.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v49 = v37;
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36) != 1)
  {
    uint64_t v51 = (uint64_t)v117;
    uint64_t v52 = (char *)&v100 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v101 = v49;
    uint64_t v100 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
    v100(v43, v35, v36);
    uint64_t v50 = v133;
    uint64_t v53 = *v133;
    uint64_t v54 = v133[1];
    uint64_t v55 = sub_10000A780((unint64_t *)&qword_1001A54A0, &qword_1001A5490);
    long long v56 = *(uint64_t (**)(uint64_t, uint64_t))(v55 + 152);
    uint64_t v102 = v43;
    if (v53 == v56(v36, v55) && v54 == v57)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v58 & 1) == 0)
      {
        (*(void (**)(char *, uint64_t))(v101 + 8))(v102, v36);
        goto LABEL_9;
      }
    }
    uint64_t v59 = v101;
    uint64_t v60 = v102;
    (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v52, v102, v36);
    unint64_t v61 = (*(unsigned __int8 *)(v59 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
    uint64_t v62 = swift_allocObject();
    v100((char *)(v62 + v61), v52, v36);
    *(void *)uint64_t v51 = sub_100012F24;
    *(void *)(v51 + 8) = v62;
    *(unsigned char *)(v51 + 16) = 0;
    *(void *)(v51 + 24) = sub_10012576C;
    *(void *)(v51 + 32) = 0;
    *(unsigned char *)(v51 + 40) = 0;
    sub_10000570C(&qword_1001A5448);
    *(unsigned char *)(swift_allocObject() + 16) = 0;
    sub_10000A780(&qword_1001A5450, &qword_1001A5448);
    *(void *)(v51 + 48) = ObservedObject.init(wrappedValue:)();
    *(void *)(v51 + 56) = v63;
    *(void *)(v51 + 64) = 0;
    type metadata accessor for RemoteViewConfiguration();
    sub_1000137A8((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    *(void *)(v51 + 72) = EnvironmentObject.init()();
    *(void *)(v51 + 80) = v64;
    uint64_t v65 = v124;
    uint64_t v66 = (uint64_t *)(v51 + *(int *)(v124 + 52));
    uint64_t *v66 = swift_getKeyPath();
    sub_10000570C(&qword_1001A5460);
    swift_storeEnumTagMultiPayload();
    uint64_t v67 = (uint64_t *)(v51 + *(int *)(v65 + 56));
    uint64_t *v67 = swift_getKeyPath();
    sub_10000570C(&qword_1001A5468);
    swift_storeEnumTagMultiPayload();
    uint64_t v68 = (uint64_t *)(v51 + *(int *)(v65 + 60));
    *uint64_t v68 = swift_getKeyPath();
    sub_10000570C(&qword_1001A5470);
    swift_storeEnumTagMultiPayload();
    uint64_t v69 = v111;
    sub_10000A3C4(v51, v111, &qword_1001A5758);
    sub_10000A428(v69, v125, &qword_1001A5758);
    swift_storeEnumTagMultiPayload();
    sub_10000A780(&qword_1001A5788, &qword_1001A5758);
    sub_100012B50();
    uint64_t v70 = (uint64_t)v126;
    _ConditionalContent<>.init(storage:)();
    sub_10000A428(v70, v130, &qword_1001A5750);
    swift_storeEnumTagMultiPayload();
    sub_100012AB0();
    sub_100012BFC();
    _ConditionalContent<>.init(storage:)();
    sub_10000ACE0(v70, &qword_1001A5750);
    sub_10000ACE0(v69, &qword_1001A5758);
    return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v60, v36);
  }
  sub_10000ACE0((uint64_t)v35, &qword_1001A5760);
  uint64_t v50 = v133;
LABEL_9:
  StateObject.wrappedValue.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v72 = v135;
  swift_errorRelease();
  if (v72)
  {
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v74 = (uint64_t)v113;
    *unint64_t v113 = KeyPath;
    sub_10000570C(&qword_1001A5460);
    swift_storeEnumTagMultiPayload();
    uint64_t v75 = (uint64_t *)(v74 + *(int *)(v112 + 20));
    type metadata accessor for RemoteViewConfiguration();
    sub_1000137A8((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    *uint64_t v75 = EnvironmentObject.init()();
    v75[1] = v76;
    uint64_t v77 = v115;
    sub_100012D14(v74, v115);
    long long v78 = *(_OWORD *)v50;
    long long v134 = *(_OWORD *)(v50 + 5);
    long long v135 = v78;
    uint64_t v79 = swift_allocObject();
    long long v80 = *((_OWORD *)v50 + 1);
    *(_OWORD *)(v79 + 16) = *(_OWORD *)v50;
    *(_OWORD *)(v79 + 32) = v80;
    *(_OWORD *)(v79 + 48) = *((_OWORD *)v50 + 2);
    *(void *)(v79 + 64) = v50[6];
    uint64_t v81 = v114;
    sub_100012DD0(v77, v114);
    char v82 = (uint64_t (**)())(v81 + *(int *)(v127 + 36));
    *char v82 = sub_100012DC8;
    v82[1] = (uint64_t (*)())v79;
    v82[2] = 0;
    v82[3] = 0;
    sub_100012A58((uint64_t)&v135);
    sub_1000126FC();
    sub_100012A84((uint64_t)&v134);
    sub_100012E34(v77);
    uint64_t v83 = &qword_1001A5738;
    uint64_t v84 = v116;
    sub_10000A3C4(v81, v116, &qword_1001A5738);
    sub_10000A428(v84, v125, &qword_1001A5738);
    swift_storeEnumTagMultiPayload();
    sub_10000A780(&qword_1001A5788, &qword_1001A5758);
    sub_100012B50();
    uint64_t v85 = (uint64_t)v126;
    _ConditionalContent<>.init(storage:)();
    sub_10000A428(v85, v130, &qword_1001A5750);
    swift_storeEnumTagMultiPayload();
    sub_100012AB0();
    sub_100012BFC();
    _ConditionalContent<>.init(storage:)();
    sub_10000ACE0(v85, &qword_1001A5750);
    uint64_t v86 = v84;
  }
  else
  {
    uint64_t v87 = v104;
    ProgressView<>.init<>()();
    long long v88 = *(_OWORD *)v50;
    long long v134 = *(_OWORD *)(v50 + 5);
    long long v135 = v88;
    uint64_t v89 = swift_allocObject();
    long long v90 = *((_OWORD *)v50 + 1);
    *(_OWORD *)(v89 + 16) = *(_OWORD *)v50;
    *(_OWORD *)(v89 + 32) = v90;
    *(_OWORD *)(v89 + 48) = *((_OWORD *)v50 + 2);
    *(void *)(v89 + 64) = v50[6];
    sub_1000126FC();
    sub_100012A58((uint64_t)&v135);
    sub_100012A84((uint64_t)&v134);
    uint64_t v91 = v108;
    static TaskPriority.userInitiated.getter();
    uint64_t v92 = (uint64_t)v103;
    uint64_t v93 = &v103[*(int *)(v131 + 36)];
    uint64_t v94 = type metadata accessor for _TaskModifier();
    uint64_t v95 = v109;
    uint64_t v96 = v110;
    (*(void (**)(char *, char *, uint64_t))(v109 + 16))(&v93[*(int *)(v94 + 20)], v91, v110);
    *(void *)uint64_t v93 = &unk_1001A5778;
    *((void *)v93 + 1) = v89;
    uint64_t v97 = v105;
    uint64_t v98 = v107;
    (*(void (**)(uint64_t, char *, uint64_t))(v105 + 16))(v92, v87, v107);
    (*(void (**)(char *, uint64_t))(v95 + 8))(v91, v96);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v87, v98);
    uint64_t v83 = &qword_1001A5730;
    uint64_t v99 = v106;
    sub_10000A3C4(v92, v106, &qword_1001A5730);
    sub_10000A428(v99, v130, &qword_1001A5730);
    swift_storeEnumTagMultiPayload();
    sub_100012AB0();
    sub_100012BFC();
    _ConditionalContent<>.init(storage:)();
    uint64_t v86 = v99;
  }
  return sub_10000ACE0(v86, v83);
}

_OWORD *sub_100011B24(uint64_t a1)
{
  uint64_t v2 = sub_10000570C(&qword_1001A5490);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v6 + 16))(v5, a1);
  sub_10000570C(&qword_1001A57B0);
  swift_allocObject();
  return sub_100012F88((uint64_t)v5);
}

uint64_t sub_100011C04(uint64_t *a1)
{
  type metadata accessor for EventController();
  sub_1000137A8(&qword_1001A5768, (void (*)(uint64_t))type metadata accessor for EventController);
  StateObject.wrappedValue.getter();
  uint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v4 = *a1;
    uint64_t v3 = a1[1];
    swift_retain();
    swift_bridgeObjectRetain();
    sub_100116C94(v4, v3, 1, v2);
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1000137A8((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100011D48(uint64_t a1)
{
  v1[2] = a1;
  type metadata accessor for MainActor();
  v1[3] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[4] = v3;
  v1[5] = v2;
  return _swift_task_switch(sub_100011DE0, v3, v2);
}

uint64_t sub_100011DE0()
{
  uint64_t v1 = (uint64_t *)v0[2];
  type metadata accessor for EventController();
  sub_1000137A8(&qword_1001A5768, (void (*)(uint64_t))type metadata accessor for EventController);
  v0[6] = StateObject.wrappedValue.getter();
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = (void *)swift_task_alloc();
  v0[7] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100011EF4;
  return sub_10007A228(v2, v3);
}

uint64_t sub_100011EF4()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = *(void *)(v1 + 32);
  return _swift_task_switch(sub_1000091E4, v3, v2);
}

uint64_t sub_10001203C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000137F0(a1);
  if (v6) {
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32))
  {
    uint64_t v7 = type metadata accessor for Artist();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = a2;
    uint64_t v11 = 1;
  }
  else
  {
    sub_100013890(result, v5, a1, a2);
    uint64_t v12 = type metadata accessor for Artist();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v9 = v12;
    uint64_t v10 = a2;
    uint64_t v11 = 0;
  }

  return v8(v10, v11, 1, v9);
}

uint64_t sub_100012120@<X0>(uint64_t a1@<X8>)
{
  return sub_1000121F0(&qword_1001A57D8, &qword_1001A57E0, (uint64_t (*)(void))&type metadata accessor for Artist, a1);
}

uint64_t sub_100012148(uint64_t a1)
{
  uint64_t result = sub_1000137F0(a1);
  if (v4) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32)) {
    return 0;
  }
  uint64_t v5 = sub_100013950(result, v3, 0, a1);
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_1000121C8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000121F0(&qword_1001A57F8, &qword_1001A5800, (uint64_t (*)(void))&type metadata accessor for Playlist, a1);
}

uint64_t sub_1000121F0@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  sub_10000570C(a1);
  sub_10000A780(a2, a1);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  if (v15[4] == v15[0])
  {
    uint64_t v8 = a3(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a4, 1, 1, v8);
  }
  else
  {
    uint64_t v10 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v12 = v11;
    uint64_t v13 = a3(0);
    uint64_t v14 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(a4, v12, v13);
    v10(v15, 0);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(a4, 0, 1, v13);
  }
}

uint64_t sub_100012388()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_1000123AC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ColorScheme();
  __chkstk_darwin(v2, v3);
  (*(void (**)(char *, uint64_t))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.colorScheme.setter();
}

uint64_t sub_100012474()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_1000124F0(uint64_t a1)
{
  uint64_t v2 = sub_10000570C(&qword_1001A5760);
  uint64_t v4 = __chkstk_darwin(v2 - 8, v3);
  char v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v11 - v8;
  sub_10000A428(a1, (uint64_t)&v11 - v8, &qword_1001A5760);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_10000A428((uint64_t)v9, (uint64_t)v6, &qword_1001A5760);
  swift_retain();
  static Published.subscript.setter();
  return sub_10000ACE0((uint64_t)v9, &qword_1001A5760);
}

uint64_t sub_100012600@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_100012680()
{
  return static Published.subscript.setter();
}

uint64_t sub_1000126FC()
{
  return swift_retain();
}

uint64_t destroy for EventContentView()
{
  swift_bridgeObjectRelease();
  sub_10001274C();

  return swift_release();
}

uint64_t sub_10001274C()
{
  return swift_release();
}

uint64_t initializeWithCopy for EventContentView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  sub_1000126FC();
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for EventContentView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  char v6 = *(unsigned char *)(a2 + 32);
  sub_1000126FC();
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  sub_10001274C();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

__n128 initializeWithTake for EventContentView(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for EventContentView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  char v5 = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = v5;
  sub_10001274C();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for EventContentView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EventContentView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EventContentView()
{
  return &type metadata for EventContentView;
}

uint64_t sub_100012994()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000129C4()
{
  unint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *unint64_t v2 = v1;
  v2[1] = sub_100009854;
  return sub_100011D48(v0 + 16);
}

uint64_t sub_100012A58(uint64_t a1)
{
  return a1;
}

uint64_t sub_100012A84(uint64_t a1)
{
  return a1;
}

unint64_t sub_100012AB0()
{
  unint64_t result = qword_1001A5780;
  if (!qword_1001A5780)
  {
    sub_100004A58(&qword_1001A5750);
    sub_10000A780(&qword_1001A5788, &qword_1001A5758);
    sub_100012B50();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5780);
  }
  return result;
}

unint64_t sub_100012B50()
{
  unint64_t result = qword_1001A5790;
  if (!qword_1001A5790)
  {
    sub_100004A58(&qword_1001A5738);
    sub_1000137A8(&qword_1001A5798, (void (*)(uint64_t))type metadata accessor for ErrorView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5790);
  }
  return result;
}

unint64_t sub_100012BFC()
{
  unint64_t result = qword_1001A57A0;
  if (!qword_1001A57A0)
  {
    sub_100004A58(&qword_1001A5730);
    sub_10000A780(&qword_1001A57A8, &qword_1001A5728);
    sub_1000137A8(&qword_1001A5430, (void (*)(uint64_t))&type metadata accessor for _TaskModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A57A0);
  }
  return result;
}

uint64_t sub_100012CCC()
{
  return EnvironmentValues.dismiss.getter();
}

uint64_t sub_100012CF0()
{
  return EnvironmentValues.dismiss.getter();
}

uint64_t sub_100012D14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ErrorView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100012D7C()
{
  swift_bridgeObjectRelease();
  sub_10001274C();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100012DC8()
{
  return sub_100011C04((uint64_t *)(v0 + 16));
}

uint64_t sub_100012DD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ErrorView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100012E34(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ErrorView();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100012E90()
{
  uint64_t v1 = sub_10000570C(&qword_1001A5490);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

_OWORD *sub_100012F24()
{
  uint64_t v1 = *(void *)(sub_10000570C(&qword_1001A5490) - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_100011B24(v2);
}

_OWORD *sub_100012F88(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v63 = a1;
  uint64_t v3 = sub_10000570C(&qword_1001A5480);
  uint64_t v67 = *(void *)(v3 - 8);
  uint64_t v68 = v3;
  __chkstk_darwin(v3, v4);
  uint64_t v66 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000570C(&qword_1001A5488);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v59 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000570C(&qword_1001A57B8);
  uint64_t v64 = *(void *)(v9 - 8);
  uint64_t v65 = v9;
  __chkstk_darwin(v9, v10);
  uint64_t v62 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000570C(&qword_1001A57C0);
  uint64_t v60 = *(void *)(v12 - 8);
  uint64_t v61 = v12;
  __chkstk_darwin(v12, v13);
  char v58 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000570C(&qword_1001A57C8);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000570C(&qword_1001A57D0);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  uint64_t v24 = (char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[2] = 0u;
  v2[3] = 0u;
  v2[1] = 0u;
  uint64_t v25 = (char *)v2 + qword_1001AC7A8;
  *(void *)&long long v69 = 0;
  Published.init(initialValue:)();
  uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  v57(v25, v24, v20);
  uint64_t v26 = (char *)v2 + qword_1001AC7B0;
  LOBYTE(v69) = 0;
  Published.init(initialValue:)();
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v27(v26, v19, v15);
  uint64_t v28 = (char *)v2 + qword_1001AC7B8;
  LOBYTE(v69) = 0;
  Published.init(initialValue:)();
  v27(v28, v19, v15);
  uint64_t v29 = (char *)v2 + qword_1001AC7C0;
  LOBYTE(v69) = 0;
  Published.init(initialValue:)();
  uint64_t v30 = v15;
  uint64_t v31 = (uint64_t)v59;
  v27(v29, v19, v30);
  uint64_t v32 = v63;
  uint64_t v33 = (char *)v2 + qword_1001AC7C8;
  *(void *)&long long v69 = 0;
  Published.init(initialValue:)();
  v57(v33, v24, v20);
  uint64_t v34 = (char *)v2 + qword_1001AC7D0;
  type metadata accessor for CGSize(0);
  long long v69 = 0uLL;
  long long v35 = v58;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v34, v35, v61);
  uint64_t v36 = (char *)v2 + qword_1001AC7D8;
  long long v69 = 0u;
  long long v70 = 0u;
  uint64_t v37 = v62;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v36, v37, v65);
  uint64_t v38 = (char *)v2 + *(void *)(*(void *)v2 + 176);
  uint64_t v39 = type metadata accessor for UserInterfaceSizeClass();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 1, 1, v39);
  uint64_t v40 = (char *)v2 + *(void *)(*(void *)v2 + 160);
  uint64_t v41 = sub_10000570C(&qword_1001A5490);
  uint64_t v42 = *(void *)(v41 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v40, v32, v41);
  sub_1000137A8(&qword_1001A5498, (void (*)(uint64_t))&type metadata accessor for LiveMusic);
  uint64_t v43 = v66;
  Event<>.participants.getter();
  uint64_t v44 = Participants<>.headliners.getter();
  (*(void (**)(char *, uint64_t))(v67 + 8))(v43, v68);
  sub_10001203C(v44, v31);
  swift_bridgeObjectRelease();
  uint64_t v45 = type metadata accessor for Artist();
  uint64_t v46 = *(void *)(v45 - 8);
  int v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v31, 1, v45);
  if (v47 == 1)
  {
    sub_10000ACE0(v31, &qword_1001A5488);
    uint64_t v51 = sub_10000A780((unint64_t *)&qword_1001A54A0, &qword_1001A5490);
    uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 152))(v41, v51);
    uint64_t v50 = v52;
  }
  else
  {
    uint64_t v48 = Artist.id.getter();
    uint64_t v50 = v49;
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v31, v45);
  }
  type metadata accessor for PromotionalAssetsController();
  uint64_t v53 = swift_allocObject();
  uint64_t v54 = v53 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
  uint64_t v55 = type metadata accessor for ArtistPromotionalAssets();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v54, 1, 1, v55);
  *(void *)(v53 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__error) = 0;
  *(void *)(v53 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__emptyScheduleViewModel) = 0;
  ObservationRegistrar.init()();
  *(void *)(v53 + 16) = v48;
  *(void *)(v53 + 24) = v50;
  *(unsigned char *)(v53 + 32) = v47 != 1;
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v32, v41);
  *(void *)((char *)v2 + *(void *)(*(void *)v2 + 168)) = v53;
  return v2;
}

uint64_t sub_100013778()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_1000137A8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000137F0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_100013890@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if (result < 0 || (uint64_t v4 = result, 1 << *(unsigned char *)(a3 + 32) <= result))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (((*(void *)(a3 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(a3 + 36) != a2)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v6 = *(void *)(a3 + 48);
  uint64_t v7 = type metadata accessor for Artist();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  uint64_t v10 = v6 + *(void *)(v8 + 72) * v4;

  return v9(a4, v10, v7);
}

uint64_t sub_100013950(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    return *(void *)(*(void *)(a4 + 48) + 16 * result);
  }
LABEL_8:
  __break(1u);
  return result;
}

unint64_t sub_1000139A8()
{
  unint64_t result = qword_1001A57E8;
  if (!qword_1001A57E8)
  {
    sub_100004A58(&qword_1001A57F0);
    sub_100012AB0();
    sub_100012BFC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A57E8);
  }
  return result;
}

uint64_t sub_100013A24(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = a2;
  uint64_t v31 = a1;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v33 = *(void *)(v2 - 8);
  uint64_t v34 = v2;
  __chkstk_darwin(v2, v3);
  char v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for DateInterval();
  uint64_t v6 = *(void *)(v30 - 8);
  __chkstk_darwin(v30, v7);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TimeZone();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000570C(&qword_1001A5808);
  uint64_t v17 = __chkstk_darwin(v15 - 8, v16);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v20);
  uint64_t v22 = (char *)&v30 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))((char *)&v30 - v21, 1, 1, v10);
  id v23 = [objc_allocWithZone((Class)NSDateFormatter) init];
  NSString v24 = String._bridgeToObjectiveC()();
  [v23 setDateFormat:v24];

  sub_100015328((uint64_t)v22, (uint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v19, 1, v10) == 1)
  {
    sub_100015390((uint64_t)v19);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v19, v10);
    Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
    [v23 setTimeZone:isa];

    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  sub_100015390((uint64_t)v22);
  sub_100013DE4(v31, v32, (uint64_t)v9);
  DateInterval.start.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v30);
  Class v26 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v33 + 8))(v5, v34);
  id v27 = [v23 stringFromDate:v26];

  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v28;
}

uint64_t sub_100013DE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v52 = a3;
  uint64_t v67 = type metadata accessor for Calendar();
  uint64_t v69 = *(void *)(v67 - 8);
  __chkstk_darwin(v67, v6);
  uint64_t v66 = (char *)v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TimeZone();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v70 = v8;
  uint64_t v71 = v9;
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)v50 - v15;
  uint64_t v17 = type metadata accessor for DateInterval();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  uint64_t v21 = (char *)v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for Date();
  uint64_t v68 = *(void *)(v64 - 8);
  uint64_t v23 = __chkstk_darwin(v64, v22);
  uint64_t v63 = (char *)v50 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v23, v25);
  uint64_t v28 = (char *)v50 - v27;
  __chkstk_darwin(v26, v29);
  uint64_t v62 = (char *)v50 - v30;
  uint64_t v54 = *(void (**)(uint64_t, uint64_t))(a2 + 8);
  uint64_t v55 = a2 + 8;
  v54(a1, a2);
  DateInterval.start.getter();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v56 = v18 + 8;
  uint64_t v57 = v17;
  uint64_t v53 = v31;
  v31(v21, v17);
  uint64_t v32 = *(void (**)(uint64_t, uint64_t))(a2 + 16);
  uint64_t v60 = a1;
  uint64_t v61 = v3;
  uint64_t v59 = a2;
  v32(a1, a2);
  uint64_t v65 = v16;
  uint64_t v33 = TimeZone.secondsFromGMT(for:)();
  uint64_t v34 = v66;
  static Calendar.current.getter();
  Calendar.timeZone.getter();
  long long v35 = *(void (**)(char *, uint64_t))(v69 + 8);
  v69 += 8;
  v35(v34, v67);
  uint64_t v36 = TimeZone.secondsFromGMT(for:)();
  uint64_t v37 = *(uint64_t (**)(char *, uint64_t))(v71 + 8);
  char v58 = v13;
  v71 += 8;
  uint64_t result = v37(v13, v70);
  if (__OFSUB__(v33, v36))
  {
    __break(1u);
  }
  else
  {
    Date.addingTimeInterval(_:)();
    v37(v65, v70);
    uint64_t v39 = *(void (**)(char *, uint64_t))(v68 + 8);
    v50[1] = v28;
    v68 += 8;
    v50[0] = v39;
    v39(v28, v64);
    uint64_t v40 = v60;
    uint64_t v51 = v35;
    uint64_t v41 = v37;
    uint64_t v42 = v59;
    v54(v60, v59);
    DateInterval.end.getter();
    v53(v21, v57);
    uint64_t v43 = v42;
    uint64_t v44 = v41;
    v32(v40, v43);
    uint64_t v45 = TimeZone.secondsFromGMT(for:)();
    uint64_t v46 = v66;
    static Calendar.current.getter();
    int v47 = v58;
    Calendar.timeZone.getter();
    v51(v46, v67);
    uint64_t v48 = TimeZone.secondsFromGMT(for:)();
    uint64_t result = v44(v47, v70);
    if (!__OFSUB__(v45, v48))
    {
      uint64_t v49 = v63;
      Date.addingTimeInterval(_:)();
      v44(v65, v70);
      ((void (*)(char *, uint64_t))v50[0])(v49, v64);
      return DateInterval.init(start:end:)();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100014324(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = a2;
  uint64_t v46 = a1;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v49 = *(void *)(v2 - 8);
  uint64_t v50 = v2;
  __chkstk_darwin(v2, v3);
  uint64_t v48 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DateInterval();
  uint64_t v52 = *(void *)(v5 - 8);
  uint64_t v53 = v5;
  __chkstk_darwin(v5, v6);
  uint64_t v51 = (uint64_t)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TimeZone();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v45 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000570C(&qword_1001A5808);
  uint64_t v14 = __chkstk_darwin(v12 - 8, v13);
  uint64_t v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v45 - v18;
  uint64_t v20 = type metadata accessor for Locale();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  uint64_t v24 = (char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = self;
  NSString v26 = String._bridgeToObjectiveC()();
  static Locale.current.getter();
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
  id v28 = [v25 dateFormatFromTemplate:v26 options:0 locale:isa];

  if (v28)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v30 = v29;
  }
  else
  {
    uint64_t v30 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v19, 1, 1, v8);
  id v31 = [objc_allocWithZone((Class)NSDateFormatter) init];
  if (v30)
  {
    NSString v32 = String._bridgeToObjectiveC()();
    [v31 setDateFormat:v32];
  }
  sub_100015328((uint64_t)v19, (uint64_t)v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v16, 1, v8) == 1)
  {
    sub_100015390((uint64_t)v16);
  }
  else
  {
    uint64_t v33 = v45;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v45, v16, v8);
    Class v34 = TimeZone._bridgeToObjectiveC()().super.isa;
    [v31 setTimeZone:v34];

    (*(void (**)(char *, uint64_t))(v9 + 8))(v33, v8);
  }
  uint64_t v36 = v49;
  uint64_t v35 = v50;
  uint64_t v37 = v48;
  uint64_t v39 = v46;
  uint64_t v38 = v47;
  swift_bridgeObjectRelease();
  sub_100015390((uint64_t)v19);
  uint64_t v40 = v51;
  sub_100013DE4(v39, v38, v51);
  DateInterval.start.getter();
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v40, v53);
  Class v41 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v35);
  id v42 = [v31 stringFromDate:v41];

  uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v43;
}

uint64_t sub_100014828(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = a2;
  uint64_t v31 = a1;
  uint64_t v33 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v33 - 8);
  __chkstk_darwin(v33, v3);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for DateInterval();
  uint64_t v6 = *(void *)(v30 - 8);
  __chkstk_darwin(v30, v7);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TimeZone();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000570C(&qword_1001A5808);
  uint64_t v17 = __chkstk_darwin(v15 - 8, v16);
  uint64_t v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v20);
  uint64_t v22 = (char *)&v29 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))((char *)&v29 - v21, 1, 1, v10);
  id v23 = [objc_allocWithZone((Class)NSDateFormatter) init];
  [v23 setDateStyle:2];
  sub_100015328((uint64_t)v22, (uint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v19, 1, v10) == 1)
  {
    sub_100015390((uint64_t)v19);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v19, v10);
    Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
    [v23 setTimeZone:isa];

    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  sub_100015390((uint64_t)v22);
  sub_100013DE4(v31, v32, (uint64_t)v9);
  DateInterval.start.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v30);
  Class v25 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v33);
  id v26 = [v23 stringFromDate:v25];

  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v27;
}

uint64_t sub_100014BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = a2;
  uint64_t v31 = a1;
  uint64_t v33 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v33 - 8);
  __chkstk_darwin(v33, v3);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for DateInterval();
  uint64_t v6 = *(void *)(v30 - 8);
  __chkstk_darwin(v30, v7);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TimeZone();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000570C(&qword_1001A5808);
  uint64_t v17 = __chkstk_darwin(v15 - 8, v16);
  uint64_t v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v20);
  uint64_t v22 = (char *)&v29 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))((char *)&v29 - v21, 1, 1, v10);
  id v23 = [objc_allocWithZone((Class)NSDateFormatter) init];
  [v23 setDateStyle:3];
  sub_100015328((uint64_t)v22, (uint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v19, 1, v10) == 1)
  {
    sub_100015390((uint64_t)v19);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v19, v10);
    Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
    [v23 setTimeZone:isa];

    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  sub_100015390((uint64_t)v22);
  sub_100013DE4(v31, v32, (uint64_t)v9);
  DateInterval.start.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v30);
  Class v25 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v33);
  id v26 = [v23 stringFromDate:v25];

  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v27;
}

uint64_t sub_100014F78(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = a2;
  uint64_t v31 = a1;
  uint64_t v33 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v33 - 8);
  __chkstk_darwin(v33, v3);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for DateInterval();
  uint64_t v6 = *(void *)(v30 - 8);
  __chkstk_darwin(v30, v7);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TimeZone();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000570C(&qword_1001A5808);
  uint64_t v17 = __chkstk_darwin(v15 - 8, v16);
  uint64_t v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v20);
  uint64_t v22 = (char *)&v29 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))((char *)&v29 - v21, 1, 1, v10);
  id v23 = [objc_allocWithZone((Class)NSDateFormatter) init];
  [v23 setTimeStyle:1];
  sub_100015328((uint64_t)v22, (uint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v19, 1, v10) == 1)
  {
    sub_100015390((uint64_t)v19);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v19, v10);
    Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
    [v23 setTimeZone:isa];

    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  sub_100015390((uint64_t)v22);
  sub_100013DE4(v31, v32, (uint64_t)v9);
  DateInterval.start.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v30);
  Class v25 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v33);
  id v26 = [v23 stringFromDate:v25];

  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v27;
}

uint64_t sub_100015328(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A5808);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100015390(uint64_t a1)
{
  uint64_t v2 = sub_10000570C(&qword_1001A5808);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000153F0()
{
  swift_getKeyPath();
  sub_10001756C(&qword_1001A5930, (void (*)(uint64_t))type metadata accessor for SetlistViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 176);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000154A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 176) = a2;
  *(void *)(a1 + 184) = a3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

unint64_t sub_1000154DC()
{
  int v1 = *(unsigned __int8 *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  sub_10000AC9C((void *)(v0 + 32), v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 48))(v2, v3);
  swift_getAssociatedTypeWitness();
  sub_10000570C(&qword_1001A5948);
  uint64_t v4 = _arrayForceCast<A, B>(_:)();
  swift_bridgeObjectRelease();
  unint64_t v5 = *(void *)(v4 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = 4;
  if (v5 < 4) {
    uint64_t v6 = v5;
  }
  if (v1) {
    return v5;
  }
  else {
    return v6;
  }
}

uint64_t sub_1000155A4@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_10001756C(&qword_1001A5930, (void (*)(uint64_t))type metadata accessor for SetlistViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC16EventViewService16SetlistViewModel__formattedStandardDescription;
  swift_beginAccess();
  return sub_10000A428(v3, a1, &qword_1001A5928);
}

uint64_t sub_100015678@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10001756C(&qword_1001A5930, (void (*)(uint64_t))type metadata accessor for SetlistViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC16EventViewService16SetlistViewModel__formattedStandardDescription;
  swift_beginAccess();
  return sub_10000A428(v4, a2, &qword_1001A5928);
}

uint64_t sub_10001574C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A5928);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000A428(a1, (uint64_t)v7, &qword_1001A5928);
  uint64_t v8 = *a2;
  swift_getKeyPath();
  uint64_t v11 = v8;
  uint64_t v12 = v7;
  uint64_t v13 = v8;
  sub_10001756C(&qword_1001A5930, (void (*)(uint64_t))type metadata accessor for SetlistViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_10000ACE0((uint64_t)v7, &qword_1001A5928);
}

uint64_t sub_10001588C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC16EventViewService16SetlistViewModel__formattedStandardDescription;
  swift_beginAccess();
  sub_100017504(a2, v3);
  return swift_endAccess();
}

uint64_t sub_1000158F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1[7];
  uint64_t v4 = v1[8];
  sub_10000AC9C(v1 + 4, v3);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 56);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v17[-1] - v10;
  v5(v3, v4);
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    uint64_t v13 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
  else
  {
    v17[3] = AssociatedTypeWitness;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v17[4] = AssociatedConformanceWitness;
    sub_10000A7C4(v17);
    (*(void (**)(void))(v12 + 32))();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(100, 100, AssociatedTypeWitness, AssociatedConformanceWitness);
    return sub_100007584((uint64_t)v17);
  }
}

void sub_100015B40(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void **)(v2 + 200);
  swift_getKeyPath();
  v39[0] = v6;
  sub_10001756C((unint64_t *)&qword_1001A5938, (void (*)(uint64_t))type metadata accessor for SetlistSongPlaybackController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  sub_10000A428((uint64_t)(v6 + 7), (uint64_t)v39, &qword_1001A5940);
  uint64_t v7 = v40;
  if (v40)
  {
    sub_10000AC9C(v39, v40);
    uint64_t v8 = dispatch thunk of MusicItem.id.getter();
    uint64_t v7 = v9;
    sub_100007584((uint64_t)v39);
  }
  else
  {
    sub_10000ACE0((uint64_t)v39, &qword_1001A5940);
    uint64_t v8 = 0;
  }
  sub_10000AC9C(a1, a1[3]);
  uint64_t v10 = dispatch thunk of MusicItem.id.getter();
  if (v7)
  {
    if (v8 == v10 && v7 == v11)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_20:
      uint64_t v22 = v6 + 2;
      uint64_t v23 = v6[5];
      uint64_t v24 = v6[6];
      sub_10000AC9C(v6 + 2, v23);
      switch((*(unsigned __int8 (**)(uint64_t, uint64_t))(v24 + 16))(v23, v24))
      {
        case 1u:
          if (qword_1001A4F38 != -1) {
            swift_once();
          }
          uint64_t v26 = type metadata accessor for Logger();
          sub_100017378(v26, (uint64_t)qword_1001B75B8);
          uint64_t v27 = Logger.logObject.getter();
          os_log_type_t v28 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v27, v28))
          {
            uint64_t v29 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v29 = 0;
            _os_log_impl((void *)&_mh_execute_header, v27, v28, "Selected song is loading/buffering.", v29, 2u);
            swift_slowDealloc();
          }

          return;
        case 2u:
          uint64_t v31 = v6[5];
          uint64_t v30 = v6[6];
          sub_10000AC9C(v22, v31);
          (*(void (**)(uint64_t, uint64_t))(v30 + 40))(v31, v30);
          if (qword_1001A4F38 != -1) {
            swift_once();
          }
          uint64_t v32 = type metadata accessor for Logger();
          sub_100017378(v32, (uint64_t)qword_1001B75B8);
          uint64_t v33 = Logger.logObject.getter();
          os_log_type_t v34 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v33, v34))
          {
            uint64_t v35 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v35 = 0;
            _os_log_impl((void *)&_mh_execute_header, v33, v34, "Pausing playback", v35, 2u);
            swift_slowDealloc();
          }

          uint64_t v19 = *(void *)(v3 + 16);
          uint64_t v20 = *(void *)(v3 + 24);
          uint64_t v21 = 17;
          goto LABEL_18;
        case 3u:
          uint64_t v37 = v6[5];
          uint64_t v36 = v6[6];
          sub_10000AC9C(v22, v37);
          (*(void (**)(uint64_t, uint64_t))(v36 + 32))(v37, v36);
          if (qword_1001A4F38 != -1) {
            swift_once();
          }
          uint64_t v38 = type metadata accessor for Logger();
          sub_100017378(v38, (uint64_t)qword_1001B75B8);
          uint64_t v15 = Logger.logObject.getter();
          os_log_type_t v16 = static os_log_type_t.debug.getter();
          if (!os_log_type_enabled(v15, v16)) {
            goto LABEL_17;
          }
          uint64_t v17 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v17 = 0;
          uint64_t v18 = "Resuming playback";
          goto LABEL_16;
        default:
          sub_1001033A0((uint64_t)a1);
          if (qword_1001A4F38 != -1) {
            swift_once();
          }
          uint64_t v25 = type metadata accessor for Logger();
          sub_100017378(v25, (uint64_t)qword_1001B75B8);
          uint64_t v15 = Logger.logObject.getter();
          os_log_type_t v16 = static os_log_type_t.debug.getter();
          if (!os_log_type_enabled(v15, v16)) {
            goto LABEL_17;
          }
          uint64_t v17 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v17 = 0;
          uint64_t v18 = "Player was previously idle/stopped. Restarting playback of same song.";
          goto LABEL_16;
      }
    }
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v13) {
      goto LABEL_20;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1001033A0((uint64_t)a1);
  if (qword_1001A4F38 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100017378(v14, (uint64_t)qword_1001B75B8);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    uint64_t v18 = "Playing new song.";
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v18, v17, 2u);
    swift_slowDealloc();
  }
LABEL_17:

  uint64_t v19 = *(void *)(v3 + 16);
  uint64_t v20 = *(void *)(v3 + 24);
  uint64_t v21 = 16;
LABEL_18:
  sub_100116F94(v19, v20, 8, 11, v21, 0, 3u, a2);
}

uint64_t sub_100016150(uint64_t a1)
{
  v2[20] = a1;
  v2[21] = v1;
  type metadata accessor for AttributeContainer();
  v2[22] = swift_task_alloc();
  sub_10000570C(&qword_1001A5928);
  v2[23] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for AttributedString();
  v2[24] = v3;
  v2[25] = *(void *)(v3 - 8);
  v2[26] = swift_task_alloc();
  type metadata accessor for MainActor();
  v2[27] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[28] = v5;
  v2[29] = v4;
  return _swift_task_switch(sub_1000162A0, v5, v4);
}

uint64_t sub_1000162A0()
{
  uint64_t v1 = (void *)v0[21];
  uint64_t v2 = v1[7];
  uint64_t v3 = v1[8];
  sub_10000AC9C(v1 + 4, v2);
  v0[30] = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 72))(v2, v3);
  v0[31] = v4;
  if (v4)
  {
    uint64_t v5 = self;
    NSString v6 = String._bridgeToObjectiveC()();
    v0[32] = v6;
    sub_100149534((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DocumentReadingOptionKey(0);
    sub_10001756C(&qword_1001A5200, type metadata accessor for DocumentReadingOptionKey);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v0[33] = isa;
    swift_bridgeObjectRelease();
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = sub_1000164F4;
    uint64_t v8 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_100016A30;
    v0[13] = &unk_100195E98;
    v0[14] = v8;
    [v5 loadFromHTMLWithString:v6 options:isa completionHandler:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_1000164F4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 272) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 224);
    uint64_t v4 = *(void *)(v1 + 232);
    uint64_t v5 = sub_100016864;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = *(void *)(v1 + 224);
    uint64_t v4 = *(void *)(v1 + 232);
    uint64_t v5 = sub_10001660C;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_10001660C()
{
  uint64_t v2 = (void *)v0[32];
  uint64_t v1 = (void *)v0[33];
  uint64_t v3 = v0[26];
  uint64_t v4 = v0[24];
  uint64_t v5 = v0[25];
  uint64_t v6 = v0[23];
  uint64_t v7 = v0[20];
  uint64_t v8 = v0[21];
  swift_release();
  uint64_t v9 = (void *)v0[15];
  swift_bridgeObjectRelease();

  id v14 = v9;
  AttributedString.init(_:)();
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)swift_task_alloc() = KeyPath;
  swift_getKeyPath();
  swift_task_dealloc();
  v0[18] = v7;
  sub_100017410();
  swift_retain();
  AttributedString.subscript.setter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v3, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v6, 0, 1, v4);
  swift_getKeyPath();
  uint64_t v11 = swift_task_alloc();
  *(void *)(v11 + 16) = v8;
  *(void *)(v11 + 24) = v6;
  v0[19] = v8;
  sub_10001756C(&qword_1001A5930, (void (*)(uint64_t))type metadata accessor for SetlistViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  sub_10000ACE0(v6, &qword_1001A5928);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100016864()
{
  uint64_t v1 = (void *)v0[33];
  uint64_t v2 = (void *)v0[32];
  uint64_t v3 = v0[25];
  uint64_t v9 = v0[24];
  uint64_t v4 = v0[23];
  uint64_t v5 = v0[21];
  swift_release();
  swift_willThrow();
  swift_errorRelease();

  AttributeContainer.init()();
  AttributedString.init(_:attributes:)();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v4, 0, 1, v9);
  swift_getKeyPath();
  uint64_t v6 = swift_task_alloc();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v4;
  v0[17] = v5;
  sub_10001756C(&qword_1001A5930, (void (*)(uint64_t))type metadata accessor for SetlistViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  sub_10000ACE0(v4, &qword_1001A5928);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100016A30(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (a4)
  {
    sub_10000570C(&qword_1001A5968);
    uint64_t v6 = swift_allocError();
    *uint64_t v7 = a4;
    id v8 = a4;
    return _swift_continuation_throwingResumeWithError(v4, v6);
  }
  else
  {
    if (a2)
    {
      type metadata accessor for DocumentAttributeKey(0);
      sub_10001756C(&qword_1001A51F0, type metadata accessor for DocumentAttributeKey);
      uint64_t v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = *(void **)(*(void *)(v4 + 64) + 40);
      *uint64_t v11 = a2;
      v11[1] = v10;
      id v12 = a2;
      a1 = v4;
    }
    else
    {
      __break(1u);
    }
    return _swift_continuation_throwingResume(a1);
  }
}

uint64_t sub_100016B54()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t sub_100016BB0()
{
  swift_bridgeObjectRelease();
  sub_100007584(v0 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000ACE0(v0 + OBJC_IVAR____TtC16EventViewService16SetlistViewModel__formattedStandardDescription, &qword_1001A5928);
  uint64_t v1 = v0 + OBJC_IVAR____TtC16EventViewService16SetlistViewModel___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_100016C88()
{
  sub_100016BB0();

  return swift_deallocClassInstance();
}

uint64_t sub_100016CE0()
{
  return type metadata accessor for SetlistViewModel();
}

uint64_t type metadata accessor for SetlistViewModel()
{
  uint64_t result = qword_1001A5848;
  if (!qword_1001A5848) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100016D34()
{
  sub_100016E50();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ObservationRegistrar();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_100016E50()
{
  if (!qword_1001A5858)
  {
    type metadata accessor for AttributedString();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001A5858);
    }
  }
}

uint64_t sub_100016EA8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10001756C((unint64_t *)&qword_1001A5938, (void (*)(uint64_t))type metadata accessor for SetlistSongPlaybackController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  return sub_10000A428(v3 + 56, a2, &qword_1001A5940);
}

uint64_t sub_100016F74(uint64_t a1)
{
  sub_10000A428(a1, (uint64_t)v2, &qword_1001A5940);
  swift_getKeyPath();
  sub_10001756C((unint64_t *)&qword_1001A5938, (void (*)(uint64_t))type metadata accessor for SetlistSongPlaybackController);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_10000ACE0((uint64_t)v2, &qword_1001A5940);
}

uint64_t sub_100017064(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = a6;
  uint64_t v28 = a7;
  char v13 = sub_10000A7C4((uint64_t *)&v26);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(v13, a3, a6);
  *(void *)(a5 + 80) = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(a5 + 88) = v14;
  *(unsigned char *)(a5 + 96) = v15 & 1;
  *(void *)(a5 + 104) = v16;
  *(void *)(a5 + 112) = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(a5 + 120) = v17;
  *(unsigned char *)(a5 + 128) = v18 & 1;
  *(void *)(a5 + 136) = v19;
  *(void *)(a5 + 144) = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(a5 + 152) = v20;
  *(unsigned char *)(a5 + 160) = v21 & 1;
  *(void *)(a5 + 168) = v22;
  *(void *)(a5 + 176) = 0;
  *(void *)(a5 + 184) = 0;
  *(void *)(a5 + 192) = 0x4008000000000000;
  if (qword_1001A4E98 != -1) {
    swift_once();
  }
  *(void *)(a5 + 200) = qword_1001B7548;
  uint64_t v23 = a5 + OBJC_IVAR____TtC16EventViewService16SetlistViewModel__formattedStandardDescription;
  uint64_t v24 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  swift_retain();
  ObservationRegistrar.init()();
  *(void *)(a5 + 16) = a1;
  *(void *)(a5 + 24) = a2;
  sub_100017350(&v26, a5 + 32);
  *(unsigned char *)(a5 + 72) = a4 & 1;
  return a5;
}

uint64_t sub_10001723C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)(a6 - 8);
  __chkstk_darwin(a1, a2);
  char v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a3, a6);
  return sub_100017064(a1, a2, (uint64_t)v15, a4, v16, a6, a7);
}

uint64_t sub_100017350(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100017378(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_1000173B0()
{
  return sub_1001034D4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000173D4()
{
  return sub_10001588C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1000173F0()
{
}

unint64_t sub_100017410()
{
  unint64_t result = qword_1001A5958;
  if (!qword_1001A5958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5958);
  }
  return result;
}

void sub_100017464()
{
}

uint64_t sub_10001748C()
{
  return 8;
}

uint64_t sub_100017498()
{
  return swift_release();
}

uint64_t sub_1000174A0(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_1000174B0()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void *sub_1000174F8(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100017504(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A5928);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001756C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000175B4()
{
  return sub_1000173D4();
}

uint64_t sub_1000175CC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *(void *)a1 = *a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    char v9 = *((unsigned char *)a2 + 16);
    sub_1000126FC();
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    uint64_t v10 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v10;
    uint64_t v11 = *(int *)(a3 + 24);
    id v12 = (void *)(a1 + v11);
    uint64_t v13 = (uint64_t *)((char *)a2 + v11);
    swift_retain();
    sub_10000570C(&qword_1001A55D8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    }
    else
    {
      *id v12 = *v13;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10001771C(uint64_t a1, uint64_t a2)
{
  sub_10001274C();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for OpenURLAction();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_1000177E4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_1000126FC();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  uint64_t v9 = a2[4];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = v9;
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)(a1 + v10);
  id v12 = (uint64_t *)((char *)a2 + v10);
  swift_retain();
  sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = type metadata accessor for OpenURLAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  }
  else
  {
    *uint64_t v11 = *v12;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1000178DC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_1000126FC();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  sub_10001274C();
  *(void *)(a1 + 24) = a2[3];
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = a2[4];
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    sub_10000ACE0(a1 + v9, &qword_1001A55D8);
    sub_10000570C(&qword_1001A55D8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      void *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100017A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for OpenURLAction();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100017AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  sub_10001274C();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (const void *)(a2 + v7);
    sub_10000ACE0(a1 + v7, &qword_1001A55D8);
    uint64_t v10 = sub_10000570C(&qword_1001A55D8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100017C14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100017C28);
}

uint64_t sub_100017C28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_10000570C(qword_1001A55E8);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 24);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_100017CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100017CFC);
}

uint64_t sub_100017CFC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 24) = a2;
  }
  else
  {
    uint64_t v7 = sub_10000570C(qword_1001A55E8);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for AppModule()
{
  uint64_t result = qword_1001A59C8;
  if (!qword_1001A59C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100017DF4()
{
  sub_100017E94();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_100017E94()
{
  if (!qword_1001A5678)
  {
    type metadata accessor for OpenURLAction();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001A5678);
    }
  }
}

uint64_t sub_100017EEC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100017F08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v84 = a1;
  uint64_t v3 = type metadata accessor for TaskPriority();
  uint64_t v82 = *(void *)(v3 - 8);
  uint64_t v83 = v3;
  __chkstk_darwin(v3, v4);
  uint64_t v81 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AppModule();
  uint64_t v80 = *(void *)(v6 - 8);
  uint64_t v79 = *(void *)(v80 + 64);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v78 = (uint64_t)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000570C(&qword_1001A5A08);
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v12 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_10000570C(&qword_1001A5A10) - 8;
  __chkstk_darwin(v70, v13);
  uint64_t v15 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_10000570C(&qword_1001A5A18) - 8;
  __chkstk_darwin(v71, v16);
  uint64_t v69 = (uint64_t)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = sub_10000570C(&qword_1001A5A20) - 8;
  __chkstk_darwin(v73, v18);
  uint64_t v72 = (uint64_t)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_10000570C(&qword_1001A5A28) - 8;
  __chkstk_darwin(v75, v20);
  uint64_t v74 = (uint64_t)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_10000570C(&qword_1001A5A30) - 8;
  __chkstk_darwin(v77, v22);
  uint64_t v76 = (char *)&v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = static HorizontalAlignment.leading.getter();
  type metadata accessor for AppViewModel();
  sub_10001A8FC(&qword_1001A5A38, (void (*)(uint64_t))type metadata accessor for AppViewModel);
  int v25 = *(unsigned __int8 *)(StateObject.wrappedValue.getter()
                           + OBJC_IVAR____TtC16EventViewService12AppViewModel_shouldShowDiscoveryDetail);
  swift_release();
  uint64_t v26 = 0x4028000000000000;
  if (v25) {
    uint64_t v26 = 0;
  }
  *(void *)uint64_t v12 = v24;
  *((void *)v12 + 1) = v26;
  v12[16] = 0;
  uint64_t v27 = sub_10000570C(&qword_1001A5A40);
  sub_1000185C4(v1, (uint64_t)&v12[*(int *)(v27 + 44)]);
  char v28 = static Edge.Set.top.getter();
  StateObject.wrappedValue.getter();
  swift_release();
  EdgeInsets.init(_all:)();
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  sub_10000A428((uint64_t)v12, (uint64_t)v15, &qword_1001A5A08);
  uint64_t v37 = &v15[*(int *)(v70 + 44)];
  *uint64_t v37 = v28;
  *((void *)v37 + 1) = v30;
  *((void *)v37 + 2) = v32;
  *((void *)v37 + 3) = v34;
  *((void *)v37 + 4) = v36;
  v37[40] = 0;
  sub_10000ACE0((uint64_t)v12, &qword_1001A5A08);
  char v38 = static Edge.Set.horizontal.getter();
  uint64_t v39 = v69;
  sub_10000A428((uint64_t)v15, v69, &qword_1001A5A10);
  uint64_t v40 = v39 + *(int *)(v71 + 44);
  *(unsigned char *)uint64_t v40 = v38;
  *(_OWORD *)(v40 + 8) = 0u;
  *(_OWORD *)(v40 + 24) = 0u;
  *(unsigned char *)(v40 + 40) = 1;
  sub_10000ACE0((uint64_t)v15, &qword_1001A5A10);
  char v41 = static Edge.Set.bottom.getter();
  StateObject.wrappedValue.getter();
  swift_release();
  EdgeInsets.init(_all:)();
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  uint64_t v50 = v72;
  sub_10000A428(v39, v72, &qword_1001A5A18);
  uint64_t v51 = v50 + *(int *)(v73 + 44);
  *(unsigned char *)uint64_t v51 = v41;
  *(void *)(v51 + 8) = v43;
  *(void *)(v51 + 16) = v45;
  *(void *)(v51 + 24) = v47;
  *(void *)(v51 + 32) = v49;
  *(unsigned char *)(v51 + 40) = 0;
  sub_10000ACE0(v39, &qword_1001A5A18);
  char v52 = *(unsigned char *)(StateObject.wrappedValue.getter()
                 + OBJC_IVAR____TtC16EventViewService12AppViewModel_shouldShowDiscoveryDetail);
  swift_release();
  uint64_t v53 = static Alignment.center.getter();
  uint64_t v55 = v54;
  uint64_t v56 = v74;
  sub_10000A428(v50, v74, &qword_1001A5A20);
  uint64_t v57 = v56 + *(int *)(v75 + 44);
  *(unsigned char *)uint64_t v57 = (v52 & 1) == 0;
  *(void *)(v57 + 8) = v53;
  *(void *)(v57 + 16) = v55;
  sub_10000ACE0(v50, &qword_1001A5A20);
  uint64_t v58 = v78;
  sub_10001A044(v2, v78);
  unint64_t v59 = (*(unsigned __int8 *)(v80 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80);
  uint64_t v60 = swift_allocObject();
  sub_10001A0AC(v58, v60 + v59);
  uint64_t v61 = v81;
  static TaskPriority.userInitiated.getter();
  uint64_t v62 = (uint64_t)v76;
  uint64_t v63 = &v76[*(int *)(v77 + 44)];
  uint64_t v64 = type metadata accessor for _TaskModifier();
  uint64_t v66 = v82;
  uint64_t v65 = v83;
  (*(void (**)(char *, char *, uint64_t))(v82 + 16))(&v63[*(int *)(v64 + 20)], v61, v83);
  *(void *)uint64_t v63 = &unk_1001A5A50;
  *((void *)v63 + 1) = v60;
  sub_10000A428(v56, v62, &qword_1001A5A28);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v61, v65);
  sub_10000ACE0(v56, &qword_1001A5A28);
  return sub_10000A3C4(v62, v84, &qword_1001A5A30);
}

uint64_t sub_1000185C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AppModule();
  uint64_t v159 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4 - 8, v5);
  v170 = (char *)&v152 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v169 = v7;
  __chkstk_darwin(v6, v8);
  uint64_t v168 = (uint64_t)&v152 - v9;
  uint64_t v156 = type metadata accessor for Divider();
  uint64_t v155 = *(void *)(v156 - 8);
  __chkstk_darwin(v156, v10);
  v154 = (char *)&v152 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v153 = sub_10000570C(&qword_1001A5A58);
  uint64_t v13 = __chkstk_darwin(v153, v12);
  v158 = (char *)&v152 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  uint64_t v157 = (uint64_t)&v152 - v16;
  uint64_t v17 = sub_10000570C(&qword_1001A5A60);
  uint64_t v19 = __chkstk_darwin(v17 - 8, v18);
  v178 = (uint64_t *)((char *)&v152 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v19, v21);
  uint64_t v188 = (uint64_t)&v152 - v22;
  uint64_t v166 = type metadata accessor for AccessibilityTraits();
  v164 = *(uint64_t (**)())(v166 - 8);
  __chkstk_darwin(v166, v23);
  v163 = (char *)&v152 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v161 = sub_10000570C(&qword_1001A5A68);
  uint64_t v26 = __chkstk_darwin(v161, v25);
  v162 = (char *)&v152 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26, v28);
  v171 = (char *)&v152 - v29;
  uint64_t v167 = sub_10000570C(&qword_1001A5A70);
  uint64_t v31 = __chkstk_darwin(v167, v30);
  uint64_t v175 = (uint64_t)&v152 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __chkstk_darwin(v31, v33);
  uint64_t v165 = (uint64_t)&v152 - v35;
  __chkstk_darwin(v34, v36);
  uint64_t v187 = (uint64_t)&v152 - v37;
  uint64_t v38 = type metadata accessor for AppViewModel();
  uint64_t v39 = sub_10001A8FC(&qword_1001A5A38, (void (*)(uint64_t))type metadata accessor for AppViewModel);
  int v40 = *(unsigned __int8 *)(StateObject.wrappedValue.getter()
                           + OBJC_IVAR____TtC16EventViewService12AppViewModel_shouldShowDiscoveryDetail);
  swift_release();
  uint64_t v160 = a2;
  uint64_t v177 = v38;
  uint64_t v176 = v39;
  if (v40 == 1)
  {
    StateObject.wrappedValue.getter();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v41 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v43 = v42;
    char v45 = v44 & 1;
    static Font.footnote.getter();
    static Font.Weight.semibold.getter();
    Font.weight(_:)();
    swift_release();
    uint64_t v46 = Text.font(_:)();
    uint64_t v48 = v47;
    char v50 = v49;
    swift_release();
    sub_10000FCC4(v41, v43, v45);
    swift_bridgeObjectRelease();
    if (qword_1001A4E40 != -1) {
      swift_once();
    }
    uint64_t v189 = qword_1001B74E0;
    swift_retain();
    uint64_t v186 = Text.foregroundStyle<A>(_:)();
    uint64_t v174 = v51;
    uint64_t v184 = v52 & 1;
    uint64_t v185 = v53;
    sub_10000FCC4(v46, v48, v50 & 1);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t KeyPath = swift_getKeyPath();
    unsigned __int8 v54 = static Edge.Set.bottom.getter();
    StateObject.wrappedValue.getter();
    swift_release();
    EdgeInsets.init(_all:)();
    uint64_t v183 = v55;
    uint64_t v181 = v56;
    uint64_t v180 = v57;
    uint64_t v179 = v58;
    uint64_t v172 = v54;
    uint64_t v59 = 1;
    uint64_t v60 = &v197;
  }
  else
  {
    uint64_t v59 = 0;
    uint64_t v174 = 0;
    uint64_t v184 = 0;
    uint64_t v185 = 0;
    uint64_t KeyPath = 0;
    uint64_t v182 = 0;
    uint64_t v172 = 0;
    uint64_t v183 = 0;
    uint64_t v181 = 0;
    uint64_t v180 = 0;
    uint64_t v186 = 0;
    uint64_t v60 = &v196;
  }
  *(v60 - 32) = v59;
  StateObject.wrappedValue.getter();
  LocalizedStringKey.init(stringLiteral:)();
  swift_release();
  uint64_t v61 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v63 = v62;
  char v65 = v64 & 1;
  static Font.title2.getter();
  static Font.Weight.bold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v66 = Text.font(_:)();
  uint64_t v68 = v67;
  char v70 = v69;
  uint64_t v72 = v71;
  swift_release();
  sub_10000FCC4(v61, v63, v65);
  swift_bridgeObjectRelease();
  uint64_t v73 = swift_getKeyPath();
  uint64_t v189 = v66;
  uint64_t v190 = v68;
  char v191 = v70 & 1;
  uint64_t v192 = v72;
  uint64_t v193 = v73;
  uint64_t v194 = 2;
  char v195 = 0;
  sub_10000570C(&qword_1001A5A78);
  sub_10001A2A4();
  uint64_t v74 = (uint64_t)v162;
  View.accessibilityHeading(_:)();
  sub_10000FCC4(v66, v68, v70 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v75 = v163;
  static AccessibilityTraits.isHeader.getter();
  uint64_t v76 = (uint64_t)v171;
  ModifiedContent<>.accessibility(addTraits:)();
  (*((void (**)(char *, uint64_t))v164 + 1))(v75, v166);
  sub_10000ACE0(v74, &qword_1001A5A68);
  LOBYTE(v63) = static Edge.Set.bottom.getter();
  StateObject.wrappedValue.getter();
  swift_release();
  EdgeInsets.init(_all:)();
  uint64_t v78 = v77;
  uint64_t v80 = v79;
  uint64_t v82 = v81;
  uint64_t v84 = v83;
  uint64_t v85 = v165;
  sub_10000A428(v76, v165, &qword_1001A5A68);
  uint64_t v86 = v85 + *(int *)(v167 + 36);
  *(unsigned char *)uint64_t v86 = v63;
  *(void *)(v86 + 8) = v78;
  *(void *)(v86 + 16) = v80;
  *(void *)(v86 + 24) = v82;
  *(void *)(v86 + 32) = v84;
  *(unsigned char *)(v86 + 40) = 0;
  sub_10000ACE0(v76, &qword_1001A5A68);
  sub_10000A3C4(v85, v187, &qword_1001A5A70);
  LODWORD(v75) = *(unsigned __int8 *)(StateObject.wrappedValue.getter()
                                    + OBJC_IVAR____TtC16EventViewService12AppViewModel_shouldShowDiscoveryDetail);
  swift_release();
  if (v75 == 1)
  {
    StateObject.wrappedValue.getter();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v87 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v89 = v88;
    char v91 = v90 & 1;
    static Font.subheadline.getter();
    static Font.Weight.regular.getter();
    Font.weight(_:)();
    swift_release();
    uint64_t v92 = Text.font(_:)();
    uint64_t v94 = v93;
    char v96 = v95;
    swift_release();
    sub_10000FCC4(v87, v89, v91);
    swift_bridgeObjectRelease();
    if (qword_1001A4E40 != -1) {
      swift_once();
    }
    uint64_t v189 = qword_1001B74E0;
    swift_retain();
    uint64_t v97 = Text.foregroundStyle<A>(_:)();
    uint64_t v99 = v98;
    v171 = v100;
    char v102 = v101 & 1;
    sub_10000FCC4(v92, v94, v96 & 1);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v166 = swift_getKeyPath();
    LODWORD(v167) = static Edge.Set.bottom.getter();
    int v103 = *(unsigned __int8 *)(StateObject.wrappedValue.getter()
                              + OBJC_IVAR____TtC16EventViewService12AppViewModel_shouldShowDiscoveryDetail);
    swift_release();
    if (v103) {
      double v104 = 1.0;
    }
    else {
      double v104 = 0.0;
    }
    uint64_t v105 = v154;
    Divider.init()();
    char v106 = static Edge.Set.bottom.getter();
    uint64_t v107 = v155;
    uint64_t v108 = (uint64_t)v158;
    uint64_t v109 = v156;
    (*(void (**)(char *, char *, uint64_t))(v155 + 16))(v158, v105, v156);
    uint64_t v110 = v108 + *(int *)(v153 + 36);
    *(unsigned char *)uint64_t v110 = v106;
    *(_OWORD *)(v110 + 8) = 0u;
    *(_OWORD *)(v110 + 24) = 0u;
    *(unsigned char *)(v110 + 40) = 1;
    (*(void (**)(char *, uint64_t))(v107 + 8))(v105, v109);
    uint64_t v111 = v157;
    sub_10000A3C4(v108, v157, &qword_1001A5A58);
    sub_10000A428(v111, v108, &qword_1001A5A58);
    uint64_t v112 = v178;
    uint64_t *v178 = v97;
    v112[1] = v99;
    *((unsigned char *)v112 + 16) = v102;
    uint64_t v113 = v166;
    v112[3] = (uint64_t)v171;
    v112[4] = v113;
    v112[5] = 4;
    *((unsigned char *)v112 + 48) = 0;
    *((unsigned char *)v112 + 56) = v167;
    *((_OWORD *)v112 + 4) = 0u;
    *((_OWORD *)v112 + 5) = 0u;
    *((unsigned char *)v112 + 96) = 1;
    *((double *)v112 + 13) = v104;
    uint64_t v114 = sub_10000570C(&qword_1001A5AA8);
    sub_10000A428(v108, (uint64_t)v112 + *(int *)(v114 + 48), &qword_1001A5A58);
    sub_10000FCD4(v97, v99, v102);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10000ACE0(v111, &qword_1001A5A58);
    sub_10000ACE0(v108, &qword_1001A5A58);
    sub_10000FCC4(v97, v99, v102);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v115 = sub_10000570C(&qword_1001A5A98);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v115 - 8) + 56))(v112, 0, 1, v115);
    sub_10000A3C4((uint64_t)v112, v188, &qword_1001A5A60);
  }
  else
  {
    uint64_t v116 = sub_10000570C(&qword_1001A5A98);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v116 - 8) + 56))(v188, 1, 1, v116);
  }
  uint64_t v117 = StateObject.wrappedValue.getter();
  uint64_t v119 = *(void *)(v117 + OBJC_IVAR____TtC16EventViewService12AppViewModel_queryAppID);
  uint64_t v118 = *(char **)(v117 + OBJC_IVAR____TtC16EventViewService12AppViewModel_queryAppID + 8);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v120 = v168;
  sub_10001A044(a1, v168);
  v171 = v118;
  if (v118)
  {
    uint64_t v167 = v119;
    sub_10001A344(v120);
  }
  else
  {
    uint64_t v121 = StateObject.wrappedValue.getter();
    sub_10001A344(v120);
    int v122 = *(char **)(v121 + OBJC_IVAR____TtC16EventViewService12AppViewModel_shazamItemID + 8);
    uint64_t v167 = *(void *)(v121 + OBJC_IVAR____TtC16EventViewService12AppViewModel_shazamItemID);
    v171 = v122;
    swift_bridgeObjectRetain();
    swift_release();
  }
  uint64_t v123 = StateObject.wrappedValue.getter();
  uint64_t v125 = *(void *)(v123 + OBJC_IVAR____TtC16EventViewService12AppViewModel_productVariantID);
  uint64_t v124 = *(void *)(v123 + OBJC_IVAR____TtC16EventViewService12AppViewModel_productVariantID + 8);
  uint64_t v166 = v125;
  uint64_t v168 = v124;
  swift_bridgeObjectRetain();
  swift_release();
  StateObject.wrappedValue.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v126 = v190;
  uint64_t v165 = v189;
  uint64_t v127 = StateObject.wrappedValue.getter();
  uint64_t v128 = *(void *)(v127 + OBJC_IVAR____TtC16EventViewService12AppViewModel_queryAppID + 8);
  if (!v128
    || *(void *)(v127 + OBJC_IVAR____TtC16EventViewService12AppViewModel_queryAppID) == *(void *)(v127 + OBJC_IVAR____TtC16EventViewService12AppViewModel_shazamItemID)
    && v128 == *(void *)(v127 + OBJC_IVAR____TtC16EventViewService12AppViewModel_shazamItemID + 8))
  {
    swift_release();
    uint64_t v129 = (uint64_t)v170;
  }
  else
  {
    char v151 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_release();
    uint64_t v129 = (uint64_t)v170;
    if ((v151 & 1) == 0)
    {
      v164 = 0;
      uint64_t v176 = 0;
      uint64_t v132 = v160;
      uint64_t v130 = v159;
      goto LABEL_22;
    }
  }
  sub_10001A044(a1, v129);
  uint64_t v130 = v159;
  unint64_t v131 = (*(unsigned __int8 *)(v159 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80);
  uint64_t v176 = swift_allocObject();
  sub_10001A0AC(v129, v176 + v131);
  v164 = sub_10001A5E4;
  uint64_t v132 = v160;
LABEL_22:
  sub_10001A044(a1, v129);
  unint64_t v133 = (*(unsigned __int8 *)(v130 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v130 + 80);
  uint64_t v177 = swift_allocObject();
  sub_10001A0AC(v129, v177 + v133);
  uint64_t v134 = v175;
  sub_10000A428(v187, v175, &qword_1001A5A70);
  long long v135 = v178;
  sub_10000A428(v188, (uint64_t)v178, &qword_1001A5A60);
  uint64_t v136 = v174;
  *(void *)uint64_t v132 = v186;
  *(void *)(v132 + 8) = v136;
  uint64_t v137 = v185;
  *(void *)(v132 + 16) = v184;
  *(void *)(v132 + 24) = v137;
  uint64_t v138 = v182;
  *(void *)(v132 + 32) = KeyPath;
  *(void *)(v132 + 40) = v138;
  uint64_t v139 = v172;
  *(void *)(v132 + 48) = 0;
  *(void *)(v132 + 56) = v139;
  uint64_t v140 = v181;
  *(void *)(v132 + 64) = v183;
  *(void *)(v132 + 72) = v140;
  uint64_t v181 = v140;
  uint64_t v141 = v179;
  *(void *)(v132 + 80) = v180;
  *(void *)(v132 + 88) = v141;
  uint64_t v179 = v141;
  *(unsigned char *)(v132 + 96) = 0;
  v142 = (int *)sub_10000570C(&qword_1001A5AA0);
  sub_10000A428(v134, v132 + v142[12], &qword_1001A5A70);
  sub_10000A428((uint64_t)v135, v132 + v142[16], &qword_1001A5A60);
  v143 = (uint64_t *)(v132 + v142[20]);
  v144 = v171;
  uint64_t *v143 = v167;
  v143[1] = (uint64_t)v144;
  uint64_t v145 = v168;
  v143[2] = v166;
  v143[3] = v145;
  v143[4] = v165;
  v143[5] = v126;
  uint64_t v146 = (uint64_t)v164;
  uint64_t v147 = v176;
  v143[6] = (uint64_t)v164;
  v143[7] = v147;
  uint64_t v148 = v177;
  v143[8] = (uint64_t)sub_10001A3AC;
  v143[9] = v148;
  uint64_t v149 = v174;
  sub_10001A41C(v186, v174, v184, v185);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100009CC8(v146);
  sub_100009CC8((uint64_t)sub_10001A3AC);
  sub_10000ACE0(v188, &qword_1001A5A60);
  sub_10000ACE0(v187, &qword_1001A5A70);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100009CD8(v146);
  sub_100009CD8((uint64_t)sub_10001A3AC);
  sub_10000ACE0((uint64_t)v178, &qword_1001A5A60);
  sub_10000ACE0(v175, &qword_1001A5A70);
  return sub_10001A46C(v186, v149, v184, v185);
}

uint64_t sub_100019A24()
{
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v2);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for OpenURLAction();
  uint64_t v5 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AppModule();
  sub_1000264EC((uint64_t)v8);
  type metadata accessor for AppViewModel();
  sub_10001A8FC(&qword_1001A5A38, (void (*)(uint64_t))type metadata accessor for AppViewModel);
  uint64_t v9 = StateObject.wrappedValue.getter();
  uint64_t v10 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v4, v9 + OBJC_IVAR____TtC16EventViewService12AppViewModel_eventURL, v13);
  swift_release();
  OpenURLAction.callAsFunction(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v10);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v14);
  StateObject.wrappedValue.getter();
  uint64_t v11 = *(void *)(v0 + 24);
  if (v11)
  {
    swift_retain();
    sub_100006D4C(8, 0, 3u, v11);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10001A8FC((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100019CF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v8 & 1) == 0) {
      return result;
    }
  }
  type metadata accessor for AppViewModel();
  sub_10001A8FC(&qword_1001A5A38, (void (*)(uint64_t))type metadata accessor for AppViewModel);
  StateObject.wrappedValue.getter();
  uint64_t v10 = *(void *)(a2 + 24);
  if (v10)
  {
    swift_retain();
    sub_100006D4C(6, 0, 3u, v10);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10001A8FC((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100019EA8(uint64_t a1)
{
  v1[2] = a1;
  type metadata accessor for MainActor();
  v1[3] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[4] = v3;
  v1[5] = v2;
  return _swift_task_switch(sub_100019F40, v3, v2);
}

uint64_t sub_100019F40()
{
  type metadata accessor for AppViewModel();
  sub_10001A8FC(&qword_1001A5A38, (void (*)(uint64_t))type metadata accessor for AppViewModel);
  *(void *)(v0 + 48) = StateObject.wrappedValue.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100011EF4;
  return sub_10000657C();
}

uint64_t sub_10001A044(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppModule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001A0AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppModule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001A110()
{
  uint64_t v2 = *(void *)(type metadata accessor for AppModule() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100009854;
  return sub_100019EA8(v3);
}

uint64_t sub_10001A1DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.lineLimit.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10001A210@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.lineLimit.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10001A244()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t sub_10001A274()
{
  return EnvironmentValues.lineLimit.setter();
}

unint64_t sub_10001A2A4()
{
  unint64_t result = qword_1001A5A80;
  if (!qword_1001A5A80)
  {
    sub_100004A58(&qword_1001A5A78);
    sub_10000A780(&qword_1001A5A88, &qword_1001A5A90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5A80);
  }
  return result;
}

uint64_t sub_10001A344(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AppModule();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001A3AC(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AppModule() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100019CF8(a1, v4);
}

uint64_t sub_10001A41C(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_10000FCD4(result, a2, a3 & 1);
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_10001A46C(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_10000FCC4(result, a2, a3 & 1);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10001A4C0()
{
  uint64_t v1 = (int *)(type metadata accessor for AppModule() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  sub_10001274C();
  swift_release();
  uint64_t v3 = v2 + v1[8];
  sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for OpenURLAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_10001A5E4()
{
  return sub_100019A24();
}

unint64_t sub_10001A644()
{
  unint64_t result = qword_1001A5AB0;
  if (!qword_1001A5AB0)
  {
    sub_100004A58(&qword_1001A5A30);
    sub_10001A6F0();
    sub_10001A8FC(&qword_1001A5430, (void (*)(uint64_t))&type metadata accessor for _TaskModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5AB0);
  }
  return result;
}

unint64_t sub_10001A6F0()
{
  unint64_t result = qword_1001A5AB8;
  if (!qword_1001A5AB8)
  {
    sub_100004A58(&qword_1001A5A28);
    sub_10001A7DC(&qword_1001A5AC0, &qword_1001A5A20, (void (*)(void))sub_10001A7B4);
    sub_10000A780(&qword_1001A5AE0, &qword_1001A5AE8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5AB8);
  }
  return result;
}

uint64_t sub_10001A7B4()
{
  return sub_10001A7DC(&qword_1001A5AC8, &qword_1001A5A18, (void (*)(void))sub_10001A85C);
}

uint64_t sub_10001A7DC(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10001A85C()
{
  unint64_t result = qword_1001A5AD0;
  if (!qword_1001A5AD0)
  {
    sub_100004A58(&qword_1001A5A10);
    sub_10000A780(&qword_1001A5AD8, &qword_1001A5A08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5AD0);
  }
  return result;
}

uint64_t sub_10001A8FC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001A944()
{
  return 1;
}

Swift::Int sub_10001A94C()
{
  return Hasher._finalize()();
}

void sub_10001A990()
{
}

Swift::Int sub_10001A9B8()
{
  return Hasher._finalize()();
}

uint64_t sub_10001AA08()
{
  *(void *)(v1 + 40) = v0;
  return _swift_task_switch(sub_10001AA28, 0, 0);
}

uint64_t sub_10001AA28()
{
  uint64_t v1 = swift_allocObject();
  *(void *)(v0 + 48) = v1;
  swift_unknownObjectWeakInit();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  uint64_t v3 = sub_10000570C(&qword_1001A5BC0);
  *uint64_t v2 = v0;
  v2[1] = sub_10001AB40;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD000000000000011, 0x800000010015D740, sub_10001B7EC, v1, v3);
}

uint64_t sub_10001AB40()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10001AC7C;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_10001AC5C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10001AC5C()
{
  return (*(uint64_t (**)(void, void, void))(v0 + 8))(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32));
}

uint64_t sub_10001AC7C()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10001ACE0(uint64_t a1)
{
  uint64_t v2 = sub_10000570C(&qword_1001A5BB0);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v7 = (char *)Strong;
    uint64_t v8 = sub_10000570C(&qword_1001A5B40);
    uint64_t v9 = *(void *)(v8 - 8);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v5, a1, v8);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
    uint64_t v10 = (uint64_t)&v7[OBJC_IVAR____TtC16EventViewService15LocationManager_checkedThrowingContinuation];
    swift_beginAccess();
    sub_10001B6EC((uint64_t)v5, v10);
    swift_endAccess();
    uint64_t v11 = *(void **)&v7[OBJC_IVAR____TtC16EventViewService15LocationManager_manager];
    [v11 setDelegate:v7];
    [v11 setDesiredAccuracy:kCLLocationAccuracyKilometer];
    [v11 startUpdatingLocation];
  }
}

uint64_t sub_10001AEA0()
{
  uint64_t v1 = sub_10000570C(&qword_1001A5BB0);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000570C(&qword_1001A5B40);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  [*(id *)(v0 + OBJC_IVAR____TtC16EventViewService15LocationManager_manager) stopUpdatingLocation];
  uint64_t v10 = v0 + OBJC_IVAR____TtC16EventViewService15LocationManager_checkedThrowingContinuation;
  swift_beginAccess();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v10, 1, v5))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v10, v5);
    sub_10001B7F4();
    v12[0] = swift_allocError();
    CheckedContinuation.resume(throwing:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  swift_beginAccess();
  sub_10001B6EC((uint64_t)v4, v10);
  return swift_endAccess();
}

id sub_10001B180()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super dealloc];
}

uint64_t sub_10001B204()
{
  return type metadata accessor for LocationManager();
}

uint64_t type metadata accessor for LocationManager()
{
  uint64_t result = qword_1001A5B28;
  if (!qword_1001A5B28) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10001B258()
{
  sub_10001B2F8();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10001B2F8()
{
  if (!qword_1001A5B38)
  {
    sub_100004A58(&qword_1001A5B40);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001A5B38);
    }
  }
}

unint64_t sub_10001B354(void *a1, unint64_t a2)
{
  uint64_t v5 = sub_10000570C(&qword_1001A5BB0);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000570C(&qword_1001A5B40);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  [a1 stopUpdatingLocation];
  uint64_t v14 = v2 + OBJC_IVAR____TtC16EventViewService15LocationManager_checkedThrowingContinuation;
  swift_beginAccess();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v14, 1, v9)) {
    goto LABEL_13;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v14, v9);
  if (!(a2 >> 62))
  {
    uint64_t v15 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v15) {
      goto LABEL_4;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
    uint64_t v22 = 0;
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  if (!v15) {
    goto LABEL_11;
  }
LABEL_4:
  unint64_t result = v15 - 1;
  if (__OFSUB__(v15, 1))
  {
    __break(1u);
    goto LABEL_15;
  }
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_15:
    id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_9;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v17 = *(id *)(a2 + 8 * result + 32);
LABEL_9:
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    [v18 coordinate];
    uint64_t v20 = v19;
    uint64_t v22 = v21;

LABEL_12:
    v23[0] = v20;
    v23[1] = v22;
    BOOL v24 = v15 == 0;
    CheckedContinuation.resume(returning:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
LABEL_13:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    swift_beginAccess();
    sub_10001B6EC((uint64_t)v8, v14);
    return swift_endAccess();
  }
  __break(1u);
  return result;
}

unint64_t sub_10001B6AC()
{
  unint64_t result = qword_1001A5BA8;
  if (!qword_1001A5BA8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001A5BA8);
  }
  return result;
}

uint64_t sub_10001B6EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A5BB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001B754(uint64_t a1)
{
  uint64_t v2 = sub_10000570C(&qword_1001A5BB0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001B7B4()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void sub_10001B7EC(uint64_t a1)
{
}

unint64_t sub_10001B7F4()
{
  unint64_t result = qword_1001A5BC8;
  if (!qword_1001A5BC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5BC8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for LocationManager.RequestError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for LocationManager.RequestError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10001B938);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10001B960()
{
  return 0;
}

ValueMetadata *type metadata accessor for LocationManager.RequestError()
{
  return &type metadata for LocationManager.RequestError;
}

unint64_t sub_10001B97C()
{
  unint64_t result = qword_1001A5BD0;
  if (!qword_1001A5BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5BD0);
  }
  return result;
}

void sub_10001B9D0()
{
  type metadata accessor for FilterViewModel.FilterState();
  type metadata accessor for Published();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Array();
    type metadata accessor for Published();
    if (v1 <= 0x3F)
    {
      sub_100020608();
      if (v2 <= 0x3F)
      {
        sub_100020660();
        if (v3 <= 0x3F)
        {
          swift_getAssociatedTypeWitness();
          type metadata accessor for Array();
          type metadata accessor for Published();
          if (v4 <= 0x3F)
          {
            swift_getAssociatedConformanceWitness();
            type metadata accessor for Set();
            type metadata accessor for Published();
            if (v5 <= 0x3F)
            {
              sub_1000206BC(319, &qword_1001A5CD8);
              if (v6 <= 0x3F)
              {
                sub_1000206BC(319, qword_1001A5CE0);
                if (v7 <= 0x3F)
                {
                  type metadata accessor for FilterViewModel.FilterConfiguration();
                  type metadata accessor for Binding();
                  if (v8 <= 0x3F) {
                    swift_initClassMetadata2();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_10001BD40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  *a8 = a1;
  a8[1] = a2;
  a8[2] = a3;
  uint64_t v13 = (int *)type metadata accessor for FilterViewModel.FilterConfiguration();
  uint64_t v14 = (char *)a8 + v13[11];
  uint64_t v15 = type metadata accessor for DateInterval();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v14, a4, v15);
  uint64_t result = sub_10002300C(a5, (uint64_t)a8 + v13[12]);
  *(void *)((char *)a8 + v13[13]) = a6;
  *(void *)((char *)a8 + v13[14]) = a7;
  return result;
}

BOOL sub_10001BE0C(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_10001BE1C(uint64_t a1, char a2)
{
}

Swift::Int sub_10001BE44(char a1)
{
  return Hasher._finalize()();
}

BOOL sub_10001BE8C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10001BE0C(*a1, *a2);
}

Swift::Int sub_10001BEA0()
{
  return sub_10001BE44(*v0);
}

void sub_10001BEB0(uint64_t a1)
{
  sub_10001BE1C(a1, *v1);
}

Swift::Int sub_10001BEC0()
{
  Hasher.init(_seed:)();
  sub_10001BE1C((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t sub_10001BF08()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80);
  uint64_t v2 = *(void *)(*(void *)v0 + 88);
  uint64_t v3 = type metadata accessor for FilterViewModel.FilterConfiguration();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  unint64_t v7 = (char *)&v25 - v6;
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v28 = *(void *)(v8 - 8);
  uint64_t v29 = v8;
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v25 - v10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v26 = *(void *)(v13 - 8);
  uint64_t v27 = v13;
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v25 - v15;
  sub_10001C344();
  uint64_t v17 = *((void *)v7 + 1);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v4 + 8);
  swift_bridgeObjectRetain();
  v18(v7, v3);
  uint64_t v30 = v17;
  type metadata accessor for Array();
  swift_getWitnessTable();
  Collection.first.getter();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v1 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v11, 1, v1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v29);
  }
  else
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 216))(v1, v2);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v1);
    uint64_t v30 = v20;
    type metadata accessor for Array();
    swift_getWitnessTable();
    Collection.first.getter();
    swift_bridgeObjectRelease();
    uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v16, 1, AssociatedTypeWitness) != 1)
    {
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
      (*(void (**)(char *, uint64_t))(v21 + 8))(v16, AssociatedTypeWitness);
      return v22;
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v16, v27);
  }
  return 0;
}

uint64_t sub_10001C344()
{
  uint64_t v1 = *(void *)v0;
  type metadata accessor for FilterViewModel.FilterConfiguration();
  uint64_t v2 = type metadata accessor for Binding();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v8 - v5;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))((char *)&v8 - v5, &v0[*(void *)(v1 + 200)], v2);
  Binding.wrappedValue.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t sub_10001C480()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10001C534()
{
  return sub_10001CA84();
}

uint64_t sub_10001C548()
{
  return sub_10001C610();
}

uint64_t sub_10001C55C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CompactDatePickerConfiguration();
  __chkstk_darwin(v2, v3);
  sub_100022860(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  Published.init(initialValue:)();
  return sub_1000228C4(a1);
}

uint64_t sub_10001C5FC()
{
  return sub_10001C610();
}

uint64_t sub_10001C610()
{
  return swift_release();
}

uint64_t sub_10001C6C4(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = type metadata accessor for CompactDatePickerConfiguration();
  __chkstk_darwin(v4 - 8, v5);
  unint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v3 + 80);
  uint64_t v8 = v12;
  uint64_t v9 = *(void *)(v3 + 88);
  uint64_t v13 = v9;
  swift_getKeyPath();
  v11[0] = v8;
  v11[1] = v9;
  swift_getKeyPath();
  sub_100022860(a1, (uint64_t)v7);
  swift_retain();
  static Published.subscript.setter();
  return sub_1000228C4(a1);
}

uint64_t sub_10001C7D8(uint64_t a1)
{
  uint64_t v2 = sub_10000570C(&qword_1001A5CD0);
  __chkstk_darwin(v2, v3);
  sub_1000227F8(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  Published.init(initialValue:)();
  return sub_10000ACE0(a1, &qword_1001A5CD0);
}

uint64_t sub_10001C88C()
{
  return swift_release();
}

uint64_t sub_10001C948(uint64_t a1)
{
  uint64_t v3 = a1;
  swift_getAssociatedTypeWitness();
  uint64_t v1 = type metadata accessor for Array();
  return sub_1000215E0((uint64_t)&v3, v1);
}

uint64_t sub_10001C9B4()
{
  return sub_10001CA84();
}

uint64_t sub_10001C9C8(uint64_t a1)
{
  uint64_t v3 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v1 = type metadata accessor for Set();
  return sub_1000215E0((uint64_t)&v3, v1);
}

uint64_t sub_10001CA70()
{
  return sub_10001CA84();
}

uint64_t sub_10001CA84()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10001CB38()
{
  return static Published.subscript.setter();
}

double sub_10001CBF0()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10001CCA8()
{
  return static Published.subscript.setter();
}

double sub_10001CD78()
{
  return sub_10001CDB4();
}

uint64_t sub_10001CD8C()
{
  return sub_10001CE7C();
}

double sub_10001CDA0()
{
  return sub_10001CDB4();
}

double sub_10001CDB4()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10001CE68()
{
  return sub_10001CE7C();
}

uint64_t sub_10001CE7C()
{
  return static Published.subscript.setter();
}

uint64_t sub_10001CF34()
{
  if (sub_10001D030())
  {
    sub_10000570C(&qword_1001A56F0);
    uint64_t v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = xmmword_100153180;
    sub_10001C534();
    uint64_t v2 = Array.count.getter();
    swift_bridgeObjectRelease();
    *(void *)(v1 + 56) = &type metadata for Int;
    *(void *)(v1 + 64) = &protocol witness table for Int;
    *(void *)(v1 + 32) = v2;
    return String.init(format:_:)();
  }
  else
  {
    if (sub_10001D0CC()) {
      uint64_t v3 = *(void *)(v0 + 32);
    }
    else {
      uint64_t v3 = *(void *)(v0 + 16);
    }
    swift_bridgeObjectRetain();
  }
  return v3;
}

BOOL sub_10001D030()
{
  sub_10001C534();
  type metadata accessor for Array();
  swift_getWitnessTable();
  char v0 = Collection.isEmpty.getter();
  swift_bridgeObjectRelease();
  return (v0 & 1) == 0;
}

uint64_t sub_10001D0CC()
{
  if (sub_10001DF44()
    && (sub_10001C534(),
        type metadata accessor for Array(),
        swift_getWitnessTable(),
        char v0 = Collection.isEmpty.getter(),
        swift_bridgeObjectRelease(),
        (v0 & 1) != 0))
  {
    char v1 = 1;
  }
  else if (sub_10001DF44() && sub_10001E0A0())
  {
    sub_10001C534();
    type metadata accessor for Array();
    swift_getWitnessTable();
    char v1 = Collection.isEmpty.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v1 = 0;
  }
  return v1 & 1;
}

BOOL sub_10001D214()
{
  return (sub_10001D0CC() & 1) == 0;
}

uint64_t sub_10001D234()
{
  if (sub_10001D030()) {
    return 1;
  }

  return sub_10001D0CC();
}

uint64_t sub_10001D26C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v28 = a1;
  uint64_t v2 = *v1;
  uint64_t v26 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v26 - 8);
  uint64_t v5 = __chkstk_darwin(v26, v4);
  uint64_t v27 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v25 - v8;
  uint64_t v25 = (char *)&v25 - v8;
  uint64_t v10 = sub_10000570C(&qword_1001A5CD0);
  uint64_t v11 = v10 - 8;
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)&v25 - v17;
  uint64_t v35 = *(void *)(v2 + 80);
  uint64_t v19 = v35;
  uint64_t v36 = *(void *)(v2 + 88);
  uint64_t v20 = v36;
  swift_getKeyPath();
  uint64_t v33 = v19;
  uint64_t v34 = v20;
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  uint64_t v22 = v9;
  uint64_t v23 = v26;
  v21(v22, v18, v26);
  sub_10000ACE0((uint64_t)v18, &qword_1001A5CD0);
  uint64_t v31 = v19;
  uint64_t v32 = v20;
  swift_getKeyPath();
  uint64_t v29 = v19;
  uint64_t v30 = v20;
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v21(v27, &v15[*(int *)(v11 + 44)], v23);
  sub_10000ACE0((uint64_t)v15, &qword_1001A5CD0);
  return DateInterval.init(start:end:)();
}

uint64_t sub_10001D50C()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v3 = __chkstk_darwin(v0, v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3, v6);
  uint64_t v8 = (char *)&v20 - v7;
  uint64_t v9 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v10 = v9 - 8;
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  uint64_t v17 = (char *)&v20 - v16;
  sub_10001C548();
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
  v18(v8, &v17[*(int *)(v10 + 28)], v0);
  sub_1000228C4((uint64_t)v17);
  sub_10001C5FC();
  v18(v5, &v14[*(int *)(v10 + 28)], v0);
  sub_1000228C4((uint64_t)v14);
  return DateInterval.init(start:end:)();
}

uint64_t sub_10001D6BC@<X0>(char *a1@<X8>)
{
  uint64_t v25 = a1;
  uint64_t v2 = *v1;
  uint64_t v24 = type metadata accessor for CompactDatePickerConfiguration() - 8;
  __chkstk_darwin(v24, v3);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)&v24 - v13;
  uint64_t v15 = sub_10000570C(&qword_1001A5CD0);
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = *(void *)(v2 + 80);
  uint64_t v19 = v28;
  uint64_t v29 = *(void *)(v2 + 88);
  uint64_t v20 = v29;
  swift_getKeyPath();
  uint64_t v26 = v19;
  uint64_t v27 = v20;
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v21(v14, v18, v6);
  sub_10000ACE0((uint64_t)v18, &qword_1001A5CD0);
  sub_10001C5FC();
  v21(v11, &v5[*(int *)(v24 + 28)], v6);
  sub_1000228C4((uint64_t)v5);
  sub_10007EA60((uint64_t)v14, (uint64_t)v11, v25);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v7 + 8);
  v22(v11, v6);
  return ((uint64_t (*)(char *, uint64_t))v22)(v14, v6);
}

uint64_t sub_10001D94C@<X0>(char *a1@<X8>)
{
  uint64_t v28 = a1;
  uint64_t v2 = *v1;
  uint64_t v27 = sub_10000570C(&qword_1001A5CD0) - 8;
  __chkstk_darwin(v27, v3);
  uint64_t v26 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v25 - v12;
  uint64_t v14 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001C548();
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v19(v13, &v18[*(int *)(v15 + 28)], v5);
  sub_1000228C4((uint64_t)v18);
  uint64_t v31 = *(void *)(v2 + 80);
  uint64_t v20 = v31;
  uint64_t v21 = *(void *)(v2 + 88);
  uint64_t v32 = v21;
  swift_getKeyPath();
  uint64_t v29 = v20;
  uint64_t v30 = v21;
  swift_getKeyPath();
  uint64_t v22 = (uint64_t)v26;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v19(v10, (char *)(v22 + *(int *)(v27 + 44)), v5);
  sub_10000ACE0(v22, &qword_1001A5CD0);
  sub_10007EA60((uint64_t)v13, (uint64_t)v10, v28);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v6 + 8);
  v23(v10, v5);
  return ((uint64_t (*)(char *, uint64_t))v23)(v13, v5);
}

BOOL sub_10001DBEC()
{
  return sub_10001DC1C((void (*)(uint64_t))&DateInterval.start.getter);
}

BOOL sub_10001DC04()
{
  return sub_10001DC1C((void (*)(uint64_t))&DateInterval.end.getter);
}

BOOL sub_10001DC1C(void (*a1)(uint64_t))
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v26 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v25 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v25 - v7;
  uint64_t v9 = type metadata accessor for DateInterval();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  uint64_t v17 = (char *)&v25 - v16;
  uint64_t v18 = sub_10001D50C();
  a1(v18);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v17, v9);
  uint64_t v20 = sub_10001D26C((uint64_t)v14);
  uint64_t v21 = v25;
  a1(v20);
  v19(v14, v9);
  sub_100022FC4(&qword_1001A5E18, (void (*)(uint64_t))&type metadata accessor for Date);
  char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v26 + 8);
  v23(v21, v2);
  v23(v8, v2);
  return (v22 & 1) == 0;
}

BOOL sub_10001DE88()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return (v1 & 1) == 0;
}

BOOL sub_10001DF44()
{
  uint64_t v0 = type metadata accessor for DateInterval();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v3 = __chkstk_darwin(v0, v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3, v6);
  uint64_t v8 = (char *)&v12 - v7;
  sub_10001D50C();
  sub_10001D26C((uint64_t)v5);
  sub_100022FC4(&qword_1001A5E10, (void (*)(uint64_t))&type metadata accessor for DateInterval);
  char v9 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v5, v0);
  v10(v8, v0);
  return (v9 & 1) == 0;
}

BOOL sub_10001E0A0()
{
  sub_10001CA70();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  char v0 = Set.isEmpty.getter();
  swift_bridgeObjectRelease();
  return (v0 & 1) == 0;
}

uint64_t sub_10001E168()
{
  BOOL v0 = sub_10001DC1C((void (*)(uint64_t))&DateInterval.start.getter);
  BOOL v1 = sub_10001DC1C((void (*)(uint64_t))&DateInterval.end.getter);
  uint64_t v2 = 1;
  if (v0) {
    uint64_t v2 = 2;
  }
  if (v1) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = v0;
  }
  sub_10001CA70();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = Set.count.getter();
  swift_bridgeObjectRelease();
  uint64_t result = v4 + v3;
  if (__OFADD__(v4, v3)) {
    __break(1u);
  }
  return result;
}

BOOL sub_10001E280()
{
  sub_10001C9B4();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_getWitnessTable();
  char v0 = Collection.isEmpty.getter();
  swift_bridgeObjectRelease();
  return (v0 & 1) == 0;
}

double sub_10001E34C()
{
  uint64_t v0 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v1 = v0 - 8;
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001C548();
  LOBYTE(v1) = v4[*(int *)(v1 + 32)];
  sub_1000228C4((uint64_t)v4);
  double result = 0.0;
  if ((v1 & 1) == 0) {
    return sub_10001CD78() * -0.5;
  }
  return result;
}

void sub_10001E3E8()
{
  uint64_t v0 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v1 = v0 - 8;
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001C548();
  sub_1000228C4((uint64_t)v4);
  sub_10001C5FC();
  LOBYTE(v1) = v4[*(int *)(v1 + 32)];
  sub_1000228C4((uint64_t)v4);
  if ((v1 & 1) == 0) {
    sub_10001CDA0();
  }
}

uint64_t sub_10001E4B0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80);
  uint64_t v2 = *(void *)(*(void *)v0 + 88);
  uint64_t v3 = type metadata accessor for FilterViewModel.FilterConfiguration();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)v11 - v6;
  void v11[2] = v1;
  v11[3] = v2;
  swift_getKeyPath();
  v11[0] = v1;
  v11[1] = v2;
  swift_getKeyPath();
  LOBYTE(v12) = 0;
  swift_retain();
  static Published.subscript.setter();
  static Array._allocateUninitialized(_:)();
  sub_10001CB38();
  sub_10001C344();
  uint64_t v8 = *((void *)v7 + 1);
  char v9 = *(void (**)(char *, uint64_t))(v4 + 8);
  swift_bridgeObjectRetain();
  v9(v7, v3);
  uint64_t v12 = v8;
  type metadata accessor for Array();
  swift_getWitnessTable();
  _ArrayProtocol.filter(_:)();
  return sub_10001CB38();
}

uint64_t sub_10001E6B4(uint64_t a1, void *a2)
{
  uint64_t v88 = a1;
  uint64_t v3 = *a2;
  uint64_t v90 = type metadata accessor for Calendar.Component();
  uint64_t v95 = *(void *)(v90 - 8);
  __chkstk_darwin(v90, v4);
  uint64_t v87 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = type metadata accessor for CompactDatePickerConfiguration() - 8;
  __chkstk_darwin(v91, v6);
  uint64_t v83 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for Date();
  uint64_t v94 = *(void *)(v81 - 8);
  uint64_t v9 = __chkstk_darwin(v81, v8);
  uint64_t v80 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v11);
  uint64_t v79 = (char *)&v61 - v12;
  uint64_t v84 = type metadata accessor for DateInterval();
  uint64_t v92 = *(void *)(v84 - 8);
  __chkstk_darwin(v84, v13);
  uint64_t v15 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v3 + 88);
  uint64_t v17 = *(void *)(v3 + 80);
  uint64_t v72 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v20);
  char v22 = (char *)&v61 - v21;
  uint64_t v89 = type metadata accessor for Calendar();
  uint64_t v93 = *(void *)(v89 - 8);
  __chkstk_darwin(v89, v23);
  uint64_t v82 = (char *)&v61 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter();
  uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v16 + 200);
  uint64_t v77 = v16 + 200;
  uint64_t v78 = v25;
  uint64_t v85 = v16;
  uint64_t v86 = v17;
  v25(v17, v16);
  uint64_t v68 = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v61 = v15;
  uint64_t v63 = v22;
  sub_100013DE4(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v15);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v19 + 8);
  uint64_t v74 = v19 + 8;
  uint64_t v75 = v26;
  v26(v22, AssociatedTypeWitness);
  uint64_t v27 = v79;
  DateInterval.start.getter();
  uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v92 + 8);
  v92 += 8;
  uint64_t v73 = v28;
  v28((uint64_t)v15, v84);
  uint64_t v29 = (uint64_t)v83;
  sub_10001C548();
  uint64_t v30 = v29 + *(int *)(v91 + 28);
  uint64_t v31 = v94;
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v94 + 16);
  uint64_t v70 = v94 + 16;
  uint64_t v71 = v32;
  uint64_t v33 = v80;
  uint64_t v34 = v81;
  v32(v80, v30, v81);
  sub_1000228C4(v29);
  unsigned int v67 = enum case for Calendar.Component.day(_:);
  uint64_t v35 = v95;
  uint64_t v36 = *(void (**)(void))(v95 + 104);
  uint64_t v65 = v95 + 104;
  uint64_t v66 = (void (*)(char *, void, uint64_t))v36;
  uint64_t v37 = v87;
  uint64_t v38 = v90;
  v36(v87);
  uint64_t v39 = v27;
  int v40 = v82;
  unint64_t v69 = Calendar.compare(_:to:toGranularity:)();
  uint64_t v41 = *(void (**)(char *, uint64_t))(v35 + 8);
  uint64_t v95 = v35 + 8;
  char v64 = v41;
  v41(v37, v38);
  uint64_t v42 = *(void (**)(char *, uint64_t))(v31 + 8);
  uint64_t v94 = v31 + 8;
  uint64_t v43 = v33;
  char v44 = v33;
  uint64_t v45 = v34;
  v42(v43, v34);
  uint64_t v46 = v39;
  v42(v39, v45);
  uint64_t v62 = *(void (**)(char *, uint64_t))(v93 + 8);
  v93 += 8;
  v62(v40, v89);
  static Calendar.current.getter();
  uint64_t v47 = v63;
  v78(v86, v85);
  uint64_t v48 = (uint64_t)v61;
  uint64_t v49 = v68;
  sub_100013DE4(v68, AssociatedConformanceWitness, (uint64_t)v61);
  v75(v47, v49);
  DateInterval.start.getter();
  v73(v48, v84);
  uint64_t v50 = (uint64_t)v83;
  sub_10001C5FC();
  v71(v44, v50 + *(int *)(v91 + 28), v45);
  sub_1000228C4(v50);
  uint64_t v51 = v87;
  uint64_t v52 = v90;
  v66(v87, v67, v90);
  uint64_t v53 = v44;
  unsigned __int8 v54 = v82;
  uint64_t v55 = Calendar.compare(_:to:toGranularity:)();
  v64(v51, v52);
  v42(v53, v45);
  v42(v46, v45);
  v62(v54, v89);
  BOOL v57 = v69 < 2 && (unint64_t)(v55 + 1) < 2;
  (*(void (**)(uint64_t, uint64_t))(v85 + 248))(v86, v85);
  sub_10001CA70();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  Set.intersection(_:)();
  swift_bridgeObjectRelease();
  char v58 = Set.isEmpty.getter();
  swift_bridgeObjectRelease();
  if (!sub_10001DF44() || (char v59 = v57, sub_10001E0A0()))
  {
    char v59 = v58 ^ 1;
    if (sub_10001DF44() || !sub_10001E0A0()) {
      v59 &= v57;
    }
  }
  return v59 & 1;
}

uint64_t sub_10001EF08()
{
  uint64_t v1 = *v0;
  uint64_t v2 = sub_10000570C(&qword_1001A5CD0);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v49 = (uint64_t)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v1 + 80);
  uint64_t v6 = *(void *)(v1 + 88);
  uint64_t v7 = type metadata accessor for FilterViewModel.FilterConfiguration();
  uint64_t v45 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7, v8);
  uint64_t v46 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = (char *)&v41 - v13;
  uint64_t v16 = __chkstk_darwin(v12, v15);
  uint64_t v18 = (char *)&v41 - v17;
  __chkstk_darwin(v16, v19);
  uint64_t v47 = (char *)&v41 - v20;
  uint64_t v52 = type metadata accessor for DateInterval();
  uint64_t v44 = *(void *)(v52 - 8);
  uint64_t v22 = __chkstk_darwin(v52, v21);
  uint64_t v24 = (char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  uint64_t v27 = (char *)&v41 - v26;
  if (sub_10001DE88())
  {
    sub_10001D50C();
    if (!sub_10001DE88()) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v43 = sub_10001E168();
    if (!sub_10001DE88()) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  sub_10001D26C((uint64_t)v27);
  if (sub_10001DE88()) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v43 = 0;
  if (!sub_10001DE88())
  {
LABEL_4:
    uint64_t v28 = static Array._allocateUninitialized(_:)();
    goto LABEL_8;
  }
LABEL_7:
  uint64_t v28 = sub_10001C534();
LABEL_8:
  uint64_t v42 = v28;
  uint64_t v51 = v27;
  BOOL v29 = sub_10001DE88();
  uint64_t v50 = v5;
  uint64_t v48 = v6;
  if (v29)
  {
    uint64_t v41 = (void *)sub_10001CA70();
  }
  else
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v31 = static Array._allocateUninitialized(_:)();
    if (Array._getCount()())
    {
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v41 = (void *)sub_100022BC8(v31, AssociatedTypeWitness, *(void *)(AssociatedConformanceWitness + 8));
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v41 = &_swiftEmptySetSingleton;
    }
  }
  sub_10001C344();
  uint64_t v33 = *((void *)v18 + 1);
  uint64_t v34 = *(void (**)(char *, uint64_t))(v45 + 8);
  swift_bridgeObjectRetain();
  v34(v18, v7);
  uint64_t v35 = v44;
  (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v24, v51, v52);
  sub_10001C344();
  uint64_t v36 = v49;
  sub_1000227F8((uint64_t)&v14[*(int *)(v7 + 48)], v49);
  v34(v14, v7);
  uint64_t v37 = v46;
  sub_10001C344();
  uint64_t v38 = *(void *)&v37[*(int *)(v7 + 52)];
  swift_bridgeObjectRetain();
  v34(v37, v7);
  uint64_t v39 = v47;
  sub_10001BD40(v43, v33, v42, (uint64_t)v24, v36, v38, (uint64_t)v41, v47);
  sub_1000219C8((uint64_t)v39);
  v34(v39, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v51, v52);
}

uint64_t sub_10001F368()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v30 = *(void *)(v2 - 8);
  uint64_t v3 = v30;
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_10000570C(&qword_1001A5CD0) - 8;
  __chkstk_darwin(v29, v7);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = *(void *)(v1 + 80);
  uint64_t v10 = v45;
  uint64_t v11 = *(void *)(v1 + 88);
  uint64_t v46 = v11;
  swift_getKeyPath();
  uint64_t v43 = v10;
  uint64_t v44 = v11;
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  uint64_t v27 = v3 + 16;
  uint64_t v28 = v12;
  uint64_t v13 = v2;
  v12(v6, v9, v2);
  sub_10000ACE0((uint64_t)v9, &qword_1001A5CD0);
  uint64_t v41 = v10;
  uint64_t v42 = v11;
  swift_getKeyPath();
  uint64_t v39 = v10;
  uint64_t v40 = v11;
  swift_getKeyPath();
  uint64_t v14 = (void (*)(unsigned char *, void))static Published.subscript.modify();
  uint64_t v16 = v15;
  uint64_t v26 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v17 = v16 + *(int *)(v26 + 20);
  uint64_t v18 = *(void (**)(uint64_t, char *, uint64_t))(v30 + 40);
  v30 += 40;
  uint64_t v25 = v18;
  v18(v17, v6, v13);
  v14(v47, 0);
  swift_release();
  swift_release();
  uint64_t v37 = v10;
  uint64_t v38 = v11;
  swift_getKeyPath();
  uint64_t v35 = v10;
  uint64_t v36 = v11;
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v28(v6, &v9[*(int *)(v29 + 44)], v13);
  sub_10000ACE0((uint64_t)v9, &qword_1001A5CD0);
  uint64_t v33 = v10;
  uint64_t v34 = v11;
  swift_getKeyPath();
  uint64_t v31 = v10;
  uint64_t v32 = v11;
  swift_getKeyPath();
  uint64_t v19 = (void (*)(unsigned char *, void))static Published.subscript.modify();
  v25(v20 + *(int *)(v26 + 20), v6, v13);
  v19(v47, 0);
  swift_release();
  swift_release();
  static Array._allocateUninitialized(_:)();
  sub_10001CB38();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = static Array._allocateUninitialized(_:)();
  if (Array._getCount()())
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    sub_100022BC8(v22, AssociatedTypeWitness, *(void *)(AssociatedConformanceWitness + 8));
  }
  swift_bridgeObjectRelease();
  return sub_10001CB38();
}

void sub_10001F7FC(char a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  sub_10000570C(&qword_1001A5390);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_100152B90;
  uint64_t v11 = sub_10001BF08();
  *(void *)(v10 + 56) = &type metadata for AnalyticsString;
  *(void *)(v10 + 64) = &off_1001AAD38;
  *(unsigned char *)(v10 + 32) = 0;
  *(void *)(v10 + 40) = v11;
  *(void *)(v10 + 48) = v12;
  *(void *)(v10 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v10 + 104) = &off_1001AAD10;
  *(unsigned char *)(v10 + 72) = 7;
  *(void *)(v10 + 136) = &type metadata for AnalyticsModuleName;
  *(void *)(v10 + 144) = &off_1001AAD98;
  *(unsigned char *)(v10 + 112) = a1;
  *(void *)(v10 + 176) = &type metadata for AnalyticsModuleAction;
  *(void *)(v10 + 184) = &off_1001AAD70;
  *(void *)(v10 + 152) = a2;
  *(void *)(v10 + 160) = a3;
  *(unsigned char *)(v10 + 168) = a4;
  if (*(void *)(a5 + 72))
  {
    uint64_t v13 = *(void *)(a5 + 64);
    unint64_t v14 = *(void *)(a5 + 72);
  }
  else
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0xE000000000000000;
  }
  uint64_t v29 = &type metadata for AnalyticsString;
  uint64_t v30 = (void *(*)())&off_1001AAD38;
  LOBYTE(aBlock) = 1;
  uint64_t v27 = v13;
  uint64_t v28 = (Class (*)(uint64_t))v14;
  sub_10000751C(a2, a3, a4);
  uint64_t v32 = (char *)v10;
  unint64_t v15 = *(void *)(v10 + 16);
  unint64_t v16 = *(void *)(v10 + 24);
  swift_bridgeObjectRetain();
  if (v15 >= v16 >> 1) {
    uint64_t v32 = sub_1001378BC((char *)(v16 > 1), v15 + 1, 1, (char *)v10);
  }
  uint64_t v17 = sub_100007534((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v17, v17);
  uint64_t v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v20 + 16))(v19);
  sub_100116BFC(v15, (uint64_t)v19, (uint64_t *)&v32, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_1001AAD38);
  sub_100007584((uint64_t)&aBlock);
  uint64_t v21 = v32;
  NSString v22 = String._bridgeToObjectiveC()();
  uint64_t v23 = (void *)swift_allocObject();
  void v23[2] = 0xD00000000000001ELL;
  v23[3] = 0x800000010015D360;
  v23[4] = v21;
  uint64_t v30 = sub_100007614;
  uint64_t v31 = v23;
  aBlock = _NSConcreteStackBlock;
  uint64_t v27 = 1107296256;
  uint64_t v28 = sub_100116B70;
  uint64_t v29 = (ValueMetadata *)&unk_1001961A8;
  uint64_t v24 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v24);
  swift_bridgeObjectRelease();
}

uint64_t sub_10001FB04(uint64_t a1)
{
  uint64_t v2 = sub_10001BF08();
  sub_100116C94(v2, v3, 7, a1);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10001FB4C()
{
  sub_10001CA70();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  char v0 = Set.contains(_:)();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

uint64_t sub_10001FC18(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 88);
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = __chkstk_darwin(AssociatedTypeWitness, v7);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v30 - v12;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v31 = *(void *)(v14 - 8);
  uint64_t v32 = v14;
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v30 - v16;
  uint64_t v18 = sub_10001FB4C();
  if (v18)
  {
    __chkstk_darwin(v18, v19);
    *(&v30 - 2) = v4;
    *(&v30 - 1) = v3;
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath, v21);
    *(&v30 - 2) = v4;
    *(&v30 - 1) = v3;
    swift_getKeyPath();
    uint64_t v33 = KeyPath;
    NSString v22 = (void (*)(unsigned char *, void))static Published.subscript.modify();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for Set();
    Set.remove(_:)();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v17, v32);
    v22(v34, 0);
  }
  else
  {
    uint64_t v23 = v6;
    uint64_t v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v10, a1, AssociatedTypeWitness);
    __chkstk_darwin(v24, v25);
    *(&v30 - 2) = v4;
    *(&v30 - 1) = v3;
    uint64_t v26 = swift_getKeyPath();
    __chkstk_darwin(v26, v27);
    *(&v30 - 2) = v4;
    *(&v30 - 1) = v3;
    swift_getKeyPath();
    uint64_t v33 = v26;
    uint64_t v28 = (void (*)(unsigned char *, void))static Published.subscript.modify();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for Set();
    Set.insert(_:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v13, AssociatedTypeWitness);
    v28(v34, 0);
  }
  swift_release();
  swift_release();
  return sub_10001E4B0();
}

uint64_t sub_100020014()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 120);
  type metadata accessor for FilterViewModel.FilterState();
  uint64_t v2 = type metadata accessor for Published();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 128);
  type metadata accessor for Array();
  uint64_t v4 = type metadata accessor for Published();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + *(void *)(*(void *)v0 + 136);
  uint64_t v6 = sub_10000570C(&qword_1001A5DF8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(v0 + *(void *)(*(void *)v0 + 144), v6);
  uint64_t v8 = v0 + *(void *)(*(void *)v0 + 152);
  uint64_t v9 = sub_10000570C(&qword_1001A5E00);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v0 + *(void *)(*(void *)v0 + 160);
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  uint64_t v11 = type metadata accessor for Published();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  uint64_t v12 = v0 + *(void *)(*(void *)v0 + 168);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  uint64_t v13 = type metadata accessor for Published();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  uint64_t v14 = v0 + *(void *)(*(void *)v0 + 176);
  uint64_t v15 = sub_10000570C(&qword_1001A57B8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  uint64_t v16 = v0 + *(void *)(*(void *)v0 + 184);
  uint64_t v17 = sub_10000570C(&qword_1001A57D0);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
  v18(v16, v17);
  v18(v0 + *(void *)(*(void *)v0 + 192), v17);
  uint64_t v19 = v0 + *(void *)(*(void *)v0 + 200);
  type metadata accessor for FilterViewModel.FilterConfiguration();
  uint64_t v20 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100020580()
{
  sub_100020014();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FilterViewModel()
{
  return sub_10000B72C();
}

uint64_t type metadata accessor for FilterViewModel.FilterState()
{
  return sub_10000B72C();
}

void sub_100020608()
{
  if (!qword_1001A5CC0)
  {
    type metadata accessor for CompactDatePickerConfiguration();
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001A5CC0);
    }
  }
}

void sub_100020660()
{
  if (!qword_1001A5CC8)
  {
    sub_100004A58(&qword_1001A5CD0);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001A5CC8);
    }
  }
}

void sub_1000206BC(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for Published();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t type metadata accessor for FilterViewModel.FilterConfiguration()
{
  return sub_10000B72C();
}

uint64_t sub_10002071C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

void sub_100020724()
{
  type metadata accessor for DateInterval();
  if (v0 <= 0x3F)
  {
    sub_100021270();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *sub_100020814(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    uint64_t v8 = a3[11];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for DateInterval();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[12];
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for Date();
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
    v17(v14, v15, v16);
    uint64_t v18 = sub_10000570C(&qword_1001A5CD0);
    v17(&v14[*(int *)(v18 + 36)], &v15[*(int *)(v18 + 36)], v16);
    uint64_t v19 = a3[14];
    *(uint64_t *)((char *)v4 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
    *(uint64_t *)((char *)v4 + v19) = *(uint64_t *)((char *)a2 + v19);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1000209B0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 48);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  uint64_t v9 = sub_10000570C(&qword_1001A5CD0);
  v8(v6 + *(int *)(v9 + 36), v7);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_100020AC0(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[11];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for DateInterval();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[12];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
  v16(v13, v14, v15);
  uint64_t v17 = sub_10000570C(&qword_1001A5CD0);
  v16(&v13[*(int *)(v17 + 36)], &v14[*(int *)(v17 + 36)], v15);
  uint64_t v18 = a3[14];
  *(void *)((char *)a1 + a3[13]) = *(void *)((char *)a2 + a3[13]);
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_100020C0C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[11];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for DateInterval();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[12];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  uint64_t v15 = sub_10000570C(&qword_1001A5CD0);
  v14(&v11[*(int *)(v15 + 36)], &v12[*(int *)(v15 + 36)], v13);
  *(void *)((char *)a1 + a3[13]) = *(void *)((char *)a2 + a3[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100020D7C(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[11];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[12];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32);
  v14(v11, v12, v13);
  uint64_t v15 = sub_10000570C(&qword_1001A5CD0);
  v14(v11 + *(int *)(v15 + 36), v12 + *(int *)(v15 + 36), v13);
  uint64_t v16 = a3[14];
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  return a1;
}

void *sub_100020EA0(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[11];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for DateInterval();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[12];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40);
  v15(v12, v13, v14);
  uint64_t v16 = sub_10000570C(&qword_1001A5CD0);
  v15(&v12[*(int *)(v16 + 36)], &v13[*(int *)(v16 + 36)], v14);
  *(void *)((char *)a1 + a3[13]) = *(void *)((char *)a2 + a3[13]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100020FE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100020FFC);
}

uint64_t sub_100020FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for DateInterval();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 44);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10000570C(&qword_1001A5CD0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 48);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_10002112C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100021140);
}

uint64_t sub_100021140(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for DateInterval();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 44);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10000570C(&qword_1001A5CD0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 48);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_100021270()
{
  if (!qword_1001A5D68)
  {
    type metadata accessor for Date();
    sub_100022FC4(qword_1001A5D70, (void (*)(uint64_t))&type metadata accessor for Date);
    unint64_t v0 = type metadata accessor for ClosedRange();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001A5D68);
    }
  }
}

uint64_t sub_100021304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

unsigned char *initializeBufferWithCopyOfBuffer for RemoteViewConfiguration.Service.Name(unsigned char *result, unsigned char *a2)
{
  *double result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for PhoneWallpapersWatchFacesConfiguration(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *sub_1000213A8(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *double result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100021474);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_10002149C(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1000214A4(unsigned char *result, char a2)
{
  *double result = a2 & 1;
  return result;
}

uint64_t sub_1000214B0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1000214CC()
{
  return sub_10001C548();
}

uint64_t sub_1000214F0(uint64_t a1)
{
  return sub_10002153C(a1);
}

uint64_t sub_100021504()
{
  return sub_10001C5FC();
}

uint64_t sub_100021528(uint64_t a1)
{
  return sub_10002153C(a1);
}

uint64_t sub_10002153C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CompactDatePickerConfiguration();
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100022860(a1, (uint64_t)v5);
  return sub_10001C6C4((uint64_t)v5);
}

uint64_t sub_1000215E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  __chkstk_darwin(a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  Published.init(initialValue:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, a2);
}

uint64_t sub_1000216D0()
{
  return swift_release();
}

uint64_t sub_100021768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 16);
  uint64_t v6 = *(void *)(a4 + a3 - 8);
  uint64_t v7 = sub_10000570C(&qword_1001A5CD0);
  uint64_t v9 = __chkstk_darwin(v7 - 8, v8);
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)v16 - v13;
  sub_1000227F8(a1, (uint64_t)v16 - v13);
  v16[2] = v5;
  v16[3] = v6;
  swift_getKeyPath();
  v16[0] = v5;
  v16[1] = v6;
  swift_getKeyPath();
  sub_1000227F8((uint64_t)v14, (uint64_t)v11);
  swift_retain();
  static Published.subscript.setter();
  return sub_10000ACE0((uint64_t)v14, &qword_1001A5CD0);
}

uint64_t sub_100021894@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_100021934()
{
  return static Published.subscript.setter();
}

uint64_t sub_1000219C8(uint64_t a1)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = type metadata accessor for FilterViewModel.FilterConfiguration();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v15 - v7;
  uint64_t v9 = type metadata accessor for Binding();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v15 - v12;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))((char *)&v15 - v12, &v1[*(void *)(v3 + 200)], v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  Binding.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

Swift::String *sub_100021B9C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v105 = a1;
  uint64_t countAndFlagsBits = v1->_countAndFlagsBits;
  uint64_t v4 = sub_10000570C(&qword_1001A5CD0);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v108 = (uint64_t)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = type metadata accessor for CompactDatePickerConfiguration() - 8;
  __chkstk_darwin(v107, v7);
  char v106 = (Swift::String *)((char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v110 = *(void *)(countAndFlagsBits + 80);
  uint64_t v111 = *(void *)(countAndFlagsBits + 88);
  uint64_t v103 = type metadata accessor for FilterViewModel.FilterConfiguration();
  uint64_t v109 = *(void *)(v103 - 8);
  __chkstk_darwin(v103, v9);
  double v104 = (char *)&v94 - v10;
  uint64_t v11 = type metadata accessor for GridItem.Size();
  uint64_t v101 = *(void *)(v11 - 8);
  uint64_t v102 = v11;
  __chkstk_darwin(v11, v12);
  uint64_t v99 = (_OWORD *)((char *)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v100 = sub_10000570C(&qword_1001A5E08) - 8;
  __chkstk_darwin(v100, v14);
  uint64_t v98 = (uint64_t *)((char *)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v96 = sub_10000570C(&qword_1001A57D0);
  uint64_t v95 = *(void *)(v96 - 8);
  __chkstk_darwin(v96, v16);
  uint64_t v18 = (char *)&v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = sub_10000570C(&qword_1001A57B8);
  uint64_t v19 = *(void *)(v94 - 8);
  __chkstk_darwin(v94, v20);
  NSString v22 = (char *)&v94 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = self;
  id v24 = [v23 mainBundle];
  v25._uint64_t countAndFlagsBits = 0xD000000000000024;
  unint64_t v97 = 0xD000000000000024;
  v115._object = (void *)0xE000000000000000;
  v25._object = (void *)0x800000010015D960;
  v26._uint64_t countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  v115._uint64_t countAndFlagsBits = 0;
  Swift::String v27 = NSLocalizedString(_:tableName:bundle:value:comment:)(v25, (Swift::String_optional)0, (NSBundle)v24, v26, v115);

  v2[1] = v27;
  id v28 = [v23 mainBundle];
  v116._object = (void *)0xE000000000000000;
  v29._object = (void *)0x800000010015D990;
  v29._uint64_t countAndFlagsBits = 0xD000000000000025;
  v30._uint64_t countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  v116._uint64_t countAndFlagsBits = 0;
  Swift::String v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v29, (Swift::String_optional)0, (NSBundle)v28, v30, v116);

  v2[2] = v31;
  id v32 = [v23 mainBundle];
  v33._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  v117._object = (void *)0xE000000000000000;
  v33._object = (void *)0x800000010015D9C0;
  v34._uint64_t countAndFlagsBits = 0;
  v34._object = (void *)0xE000000000000000;
  v117._uint64_t countAndFlagsBits = 0;
  Swift::String v35 = NSLocalizedString(_:tableName:bundle:value:comment:)(v33, (Swift::String_optional)0, (NSBundle)v32, v34, v117);

  v2[3] = v35;
  uint64_t v36 = (char *)v2 + *(void *)(v2->_countAndFlagsBits + 176);
  Swift::String v112 = (Swift::String)0;
  long long v113 = 0u;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v36, v22, v94);
  uint64_t v37 = (char *)v2 + *(void *)(v2->_countAndFlagsBits + 184);
  v112._uint64_t countAndFlagsBits = 0;
  Published.init(initialValue:)();
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v95 + 32);
  uint64_t v39 = v96;
  v38(v37, v18, v96);
  uint64_t v40 = (char *)v2 + *(void *)(v2->_countAndFlagsBits + 192);
  v112._uint64_t countAndFlagsBits = 0;
  Published.init(initialValue:)();
  v38(v40, v18, v39);
  uint64_t v41 = (char *)v2 + *(void *)(v2->_countAndFlagsBits + 208);
  *(void *)uint64_t v41 = LocalizedStringKey.init(stringLiteral:)();
  *((void *)v41 + 1) = v42;
  v41[16] = v43 & 1;
  *((void *)v41 + 3) = v44;
  uint64_t v45 = (uint64_t *)((char *)&v2->_countAndFlagsBits + *(void *)(v2->_countAndFlagsBits + 216));
  id v46 = [v23 mainBundle];
  v47._uint64_t countAndFlagsBits = 0xD000000000000030;
  v118._object = (void *)0xE000000000000000;
  v47._object = (void *)0x800000010015DA20;
  v48._uint64_t countAndFlagsBits = 0;
  v48._object = (void *)0xE000000000000000;
  v118._uint64_t countAndFlagsBits = 0;
  Swift::String v49 = NSLocalizedString(_:tableName:bundle:value:comment:)(v47, (Swift::String_optional)0, (NSBundle)v46, v48, v118);

  Swift::String v112 = v49;
  sub_100010B2C();
  uint64_t v50 = StringProtocol.localizedUppercase.getter();
  uint64_t v52 = v51;
  swift_bridgeObjectRelease();
  *uint64_t v45 = v50;
  v45[1] = v52;
  uint64_t v53 = (char *)v2 + *(void *)(v2->_countAndFlagsBits + 224);
  *(void *)uint64_t v53 = LocalizedStringKey.init(stringLiteral:)();
  *((void *)v53 + 1) = v54;
  v53[16] = v55 & 1;
  *((void *)v53 + 3) = v56;
  BOOL v57 = (char *)v2 + *(void *)(v2->_countAndFlagsBits + 232);
  *(void *)BOOL v57 = LocalizedStringKey.init(stringLiteral:)();
  *((void *)v57 + 1) = v58;
  v57[16] = v59 & 1;
  *((void *)v57 + 3) = v60;
  uint64_t v61 = (char *)v2 + *(void *)(v2->_countAndFlagsBits + 240);
  *(void *)uint64_t v61 = LocalizedStringKey.init(stringLiteral:)();
  *((void *)v61 + 1) = v62;
  v61[16] = v63 & 1;
  *((void *)v61 + 3) = v64;
  uint64_t v65 = (char *)v2 + *(void *)(v2->_countAndFlagsBits + 248);
  *(void *)uint64_t v65 = LocalizedStringKey.init(stringLiteral:)();
  *((void *)v65 + 1) = v66;
  v65[16] = v67 & 1;
  *((void *)v65 + 3) = v68;
  uint64_t v69 = *(void *)(v2->_countAndFlagsBits + 256);
  uint64_t v70 = v99;
  *uint64_t v99 = xmmword_1001538D0;
  (*(void (**)(_OWORD *, void, uint64_t))(v101 + 104))(v70, enum case for GridItem.Size.flexible(_:), v102);
  uint64_t v71 = v98;
  GridItem.init(_:spacing:alignment:)();
  uint64_t *v71 = 2;
  uint64_t v72 = sub_100137FF0(v71);
  sub_10000ACE0((uint64_t)v71, &qword_1001A5E08);
  *(uint64_t *)((char *)&v2->_countAndFlagsBits + v69) = (uint64_t)v72;
  uint64_t v73 = (char *)v2 + *(void *)(v2->_countAndFlagsBits + 200);
  uint64_t v74 = v103;
  uint64_t v75 = type metadata accessor for Binding();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v75 - 8) + 16))(v73, v105, v75);
  uint64_t v76 = v104;
  Binding.wrappedValue.getter();
  LOBYTE(v69) = *v76 < 1;
  swift_beginAccess();
  LOBYTE(v114[0]) = v69;
  uint64_t v77 = type metadata accessor for FilterViewModel.FilterState();
  sub_1000215E0((uint64_t)v114, v77);
  swift_endAccess();
  uint64_t v78 = v76[2];
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v114[0] = v78;
  uint64_t v79 = type metadata accessor for Array();
  sub_1000215E0((uint64_t)v114, v79);
  swift_endAccess();
  id v80 = [v23 mainBundle];
  v119._object = (void *)0xE000000000000000;
  v81._object = (void *)0x800000010015DB20;
  v81._uint64_t countAndFlagsBits = 0xD000000000000025;
  v82._uint64_t countAndFlagsBits = 0;
  v82._object = (void *)0xE000000000000000;
  v119._uint64_t countAndFlagsBits = 0;
  Swift::String v83 = NSLocalizedString(_:tableName:bundle:value:comment:)(v81, (Swift::String_optional)0, (NSBundle)v80, v82, v119);

  uint64_t v84 = v106;
  uint64_t v85 = v107;
  DateInterval.start.getter();
  *uint64_t v84 = v83;
  *((unsigned char *)&v84->_countAndFlagsBits + *(int *)(v85 + 32)) = 0;
  swift_beginAccess();
  sub_10001C55C((uint64_t)v84);
  swift_endAccess();
  id v86 = [v23 mainBundle];
  v87._uint64_t countAndFlagsBits = 0xD000000000000023;
  v120._object = (void *)0xE000000000000000;
  v87._object = (void *)0x800000010015DB50;
  v88._uint64_t countAndFlagsBits = 0;
  v88._object = (void *)0xE000000000000000;
  v120._uint64_t countAndFlagsBits = 0;
  Swift::String v89 = NSLocalizedString(_:tableName:bundle:value:comment:)(v87, (Swift::String_optional)0, (NSBundle)v86, v88, v120);

  DateInterval.end.getter();
  *uint64_t v84 = v89;
  *((unsigned char *)&v84->_countAndFlagsBits + *(int *)(v85 + 32)) = 0;
  swift_beginAccess();
  sub_10001C55C((uint64_t)v84);
  swift_endAccess();
  uint64_t v90 = v108;
  sub_1000227F8((uint64_t)v76 + *(int *)(v74 + 48), v108);
  swift_beginAccess();
  sub_10001C7D8(v90);
  swift_endAccess();
  swift_beginAccess();
  uint64_t v91 = swift_bridgeObjectRetain();
  sub_10001C948(v91);
  swift_endAccess();
  swift_beginAccess();
  uint64_t v92 = swift_bridgeObjectRetain();
  sub_10001C9C8(v92);
  swift_endAccess();
  (*(void (**)(void *, uint64_t))(v109 + 8))(v76, v74);
  return v2;
}

Swift::String *sub_1000227BC(uint64_t a1)
{
  return sub_100021B9C(a1);
}

uint64_t sub_1000227F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A5CD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100022860(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CompactDatePickerConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000228C4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CompactDatePickerConfiguration();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100022920()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100022960(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100022970()
{
  return swift_release();
}

void sub_100022978(uint64_t a1@<X8>)
{
  *(double *)a1 = sub_10001CBF0();
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
}

uint64_t sub_1000229A8()
{
  return sub_10001CCA8();
}

uint64_t sub_1000229D4()
{
  return 16;
}

__n128 sub_1000229E0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000229EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10001C534();
  *a1 = result;
  return result;
}

uint64_t sub_100022A18()
{
  return sub_100022A84();
}

uint64_t sub_100022A2C()
{
  return 16;
}

__n128 sub_100022A38(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100022A44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10001CA70();
  *a1 = result;
  return result;
}

uint64_t sub_100022A70()
{
  return sub_100022A84();
}

uint64_t sub_100022A84()
{
  return sub_10001CB38();
}

uint64_t sub_100022AC8()
{
  return 16;
}

__n128 sub_100022AD4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100022AE8()
{
  return 16;
}

__n128 sub_100022AF4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100022B00()
{
  return sub_10001C548();
}

uint64_t sub_100022B24(uint64_t a1)
{
  return sub_10002153C(a1);
}

uint64_t sub_100022B4C()
{
  return 16;
}

__n128 sub_100022B58(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100022B64()
{
  return sub_10001C5FC();
}

uint64_t sub_100022B88(uint64_t a1)
{
  return sub_10002153C(a1);
}

uint64_t sub_100022BB0()
{
  return 16;
}

__n128 sub_100022BBC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100022BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = __chkstk_darwin(a1, a2);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v7, v10);
  uint64_t v52 = (char *)&v40 - v12;
  uint64_t v41 = v13;
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v40 - v15;
  if (Array.count.getter())
  {
    type metadata accessor for _SetStorage();
    uint64_t v17 = (unsigned char *)static _SetStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v17 = &_swiftEmptySetSingleton;
  }
  Swift::Int v45 = Array._getCount()();
  if (!v45) {
    return (uint64_t)v17;
  }
  uint64_t v18 = 0;
  uint64_t v50 = (void (**)(char *, uint64_t *, uint64_t))(v6 + 16);
  uint64_t v51 = v17 + 56;
  uint64_t v47 = v6 + 32;
  Swift::String v49 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v42 = v6;
  uint64_t v43 = v5;
  uint64_t v44 = v16;
  while (1)
  {
    Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (IsNativeType)
    {
      uint64_t v20 = *(void (**)(char *, uint64_t *, uint64_t))(v6 + 16);
      v20(v16, (uint64_t *)(v5+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v18), a2);
      BOOL v21 = __OFADD__(v18, 1);
      uint64_t v22 = v18 + 1;
      if (v21) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
      if (v41 != 8) {
        goto LABEL_23;
      }
      uint64_t v53 = result;
      uint64_t v20 = *v50;
      (*v50)(v16, &v53, a2);
      swift_unknownObjectRelease();
      BOOL v21 = __OFADD__(v18, 1);
      uint64_t v22 = v18 + 1;
      if (v21)
      {
LABEL_20:
        __break(1u);
        return (uint64_t)v17;
      }
    }
    uint64_t v48 = v22;
    id v46 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v46(v52, v16, a2);
    uint64_t v23 = dispatch thunk of Hashable._rawHashValue(seed:)();
    id v24 = v17;
    uint64_t v25 = -1 << v17[32];
    unint64_t v26 = v23 & ~v25;
    unint64_t v27 = v26 >> 6;
    uint64_t v28 = *(void *)&v51[8 * (v26 >> 6)];
    uint64_t v29 = 1 << v26;
    uint64_t v30 = *(void *)(v6 + 72);
    if (((1 << v26) & v28) != 0)
    {
      uint64_t v31 = ~v25;
      do
      {
        v20(v9, (uint64_t *)(v24[6] + v30 * v26), a2);
        uint64_t v32 = a3;
        char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
        Swift::String v34 = *v49;
        (*v49)(v9, a2);
        if (v33)
        {
          v34(v52, a2);
          a3 = v32;
          uint64_t v6 = v42;
          uint64_t v5 = v43;
          uint64_t v17 = v24;
          goto LABEL_7;
        }
        unint64_t v26 = (v26 + 1) & v31;
        unint64_t v27 = v26 >> 6;
        uint64_t v28 = *(void *)&v51[8 * (v26 >> 6)];
        uint64_t v29 = 1 << v26;
        a3 = v32;
      }
      while ((v28 & (1 << v26)) != 0);
      uint64_t v6 = v42;
      uint64_t v5 = v43;
    }
    Swift::String v35 = v52;
    *(void *)&v51[8 * v27] = v29 | v28;
    unint64_t v36 = v24[6] + v30 * v26;
    uint64_t v17 = v24;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v46)(v36, v35, a2);
    uint64_t v38 = v24[2];
    BOOL v21 = __OFADD__(v38, 1);
    uint64_t v39 = v38 + 1;
    if (v21) {
      break;
    }
    v24[2] = v39;
LABEL_7:
    uint64_t v16 = v44;
    uint64_t v18 = v48;
    if (v48 == v45) {
      return (uint64_t)v17;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_100022F8C()
{
  return 16;
}

__n128 sub_100022F98(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100022FA4(uint64_t a1)
{
  return sub_10001E6B4(a1, v1) & 1;
}

uint64_t sub_100022FC4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002300C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A5CD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100023074@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10001C9B4();
  *a1 = result;
  return result;
}

uint64_t sub_1000230A0()
{
  return sub_100022A84();
}

uint64_t sub_1000230B4()
{
  return 16;
}

__n128 sub_1000230C0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000230D4()
{
  return 16;
}

__n128 sub_1000230E0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000230F4()
{
  return 16;
}

__n128 sub_100023100(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t destroy for SetlistLoadingView()
{
  return swift_release();
}

uint64_t _s16EventViewService18SetlistLoadingViewVwCP_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SetlistLoadingView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SetlistLoadingView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SetlistLoadingView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SetlistLoadingView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SetlistLoadingView()
{
  return &type metadata for SetlistLoadingView;
}

uint64_t sub_100023268()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100023284()
{
  uint64_t result = static Color.secondary.getter();
  qword_1001A5E20 = result;
  return result;
}

uint64_t sub_1000232A4@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v59 = a2;
  uint64_t v60 = a3;
  int v61 = a1;
  uint64_t v62 = a4;
  uint64_t v4 = sub_10000570C(&qword_1001A5E40);
  uint64_t v6 = __chkstk_darwin(v4 - 8, v5);
  uint64_t v63 = (uint64_t)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v58 - v9;
  uint64_t v11 = sub_10000570C(&qword_1001A5E48);
  uint64_t v13 = __chkstk_darwin(v11 - 8, v12);
  uint64_t v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)&v58 - v17;
  uint64_t v19 = type metadata accessor for Divider();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  uint64_t v23 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000570C(&qword_1001A5A58);
  uint64_t v25 = v24 - 8;
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v29 = (char *)&v58 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27, v30);
  uint64_t v32 = (char *)&v58 - v31;
  Divider.init()();
  char v33 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v29, v23, v19);
  uint64_t v42 = &v29[*(int *)(v25 + 44)];
  *uint64_t v42 = v33;
  *((void *)v42 + 1) = v35;
  *((void *)v42 + 2) = v37;
  *((void *)v42 + 3) = v39;
  *((void *)v42 + 4) = v41;
  v42[40] = 0;
  uint64_t v43 = v23;
  uint64_t v44 = v59;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v43, v19);
  uint64_t v45 = v60;
  sub_10000A3C4((uint64_t)v29, (uint64_t)v32, &qword_1001A5A58);
  *(void *)uint64_t v18 = static VerticalAlignment.center.getter();
  *((void *)v18 + 1) = 0x4018000000000000;
  v18[16] = 0;
  uint64_t v46 = sub_10000570C(&qword_1001A5E50);
  char v47 = v61;
  sub_10002377C(v61, (uint64_t)&v18[*(int *)(v46 + 44)]);
  if (v47)
  {
    uint64_t v48 = sub_10000570C(&qword_1001A5EB8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v10, 1, 1, v48);
  }
  else
  {
    uint64_t v49 = swift_allocObject();
    *(unsigned char *)(v49 + 16) = 0;
    *(void *)(v49 + 24) = v44;
    *(void *)(v49 + 32) = v45;
    swift_retain();
    sub_10000570C(&qword_1001A5E58);
    sub_1000241BC();
    Button.init(action:label:)();
    uint64_t v50 = sub_10000570C(&qword_1001A5EB8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v10, 0, 1, v50);
  }
  sub_10000A428((uint64_t)v32, (uint64_t)v29, &qword_1001A5A58);
  sub_10000A428((uint64_t)v18, (uint64_t)v15, &qword_1001A5E48);
  uint64_t v51 = v63;
  sub_10000A428((uint64_t)v10, v63, &qword_1001A5E40);
  uint64_t v52 = (uint64_t)v32;
  uint64_t v53 = (uint64_t)v10;
  uint64_t v54 = (uint64_t)v15;
  uint64_t v55 = v62;
  sub_10000A428((uint64_t)v29, v62, &qword_1001A5A58);
  uint64_t v56 = sub_10000570C(&qword_1001A5EC0);
  sub_10000A428(v54, v55 + *(int *)(v56 + 48), &qword_1001A5E48);
  sub_10000A428(v51, v55 + *(int *)(v56 + 64), &qword_1001A5E40);
  sub_10000ACE0(v53, &qword_1001A5E40);
  sub_10000ACE0((uint64_t)v18, &qword_1001A5E48);
  sub_10000ACE0(v52, &qword_1001A5A58);
  sub_10000ACE0(v51, &qword_1001A5E40);
  sub_10000ACE0(v54, &qword_1001A5E48);
  return sub_10000ACE0((uint64_t)v29, &qword_1001A5A58);
}

uint64_t sub_10002377C@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v3 = sub_10000570C(&qword_1001A5728);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000570C(&qword_1001A5EE8);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000570C(&qword_1001A5EF0);
  uint64_t v15 = __chkstk_darwin(v13 - 8, v14);
  uint64_t v42 = (uint64_t)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)&v41 - v18;
  if (a1)
  {
    ProgressView<>.init<>()();
    if (qword_1001A4E10 != -1) {
      swift_once();
    }
    uint64_t v20 = qword_1001A5E20;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v44 = v20;
    swift_retain_n();
    uint64_t v22 = AnyShapeStyle.init<A>(_:)();
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v12, v7, v3);
    swift_release();
    uint64_t v23 = (uint64_t *)&v12[*(int *)(v8 + 36)];
    *uint64_t v23 = KeyPath;
    v23[1] = v22;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    sub_10000A3C4((uint64_t)v12, (uint64_t)v19, &qword_1001A5EE8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v19, 0, 1, v8);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))((char *)&v41 - v18, 1, 1, v8);
  }
  LocalizedStringKey.init(_:)();
  uint64_t v24 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v26 = v25;
  char v28 = v27;
  if (qword_1001A4E10 != -1) {
    swift_once();
  }
  char v29 = v28 & 1;
  uint64_t v44 = qword_1001A5E20;
  swift_retain();
  uint64_t v30 = Text.foregroundStyle<A>(_:)();
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  char v36 = v35 & 1;
  sub_10000FCC4(v24, v26, v29);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v37 = v42;
  sub_10000A428((uint64_t)v19, v42, &qword_1001A5EF0);
  uint64_t v38 = v43;
  sub_10000A428(v37, v43, &qword_1001A5EF0);
  uint64_t v39 = v38 + *(int *)(sub_10000570C(&qword_1001A5EF8) + 48);
  *(void *)uint64_t v39 = v30;
  *(void *)(v39 + 8) = v32;
  *(unsigned char *)(v39 + 16) = v36;
  *(void *)(v39 + 24) = v34;
  sub_10000FCD4(v30, v32, v36);
  swift_bridgeObjectRetain();
  sub_10000ACE0((uint64_t)v19, &qword_1001A5EF0);
  sub_10000FCC4(v30, v32, v36);
  swift_bridgeObjectRelease();
  return sub_10000ACE0(v37, &qword_1001A5EF0);
}

uint64_t sub_100023BFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v56 = sub_10000570C(&qword_1001A5EB0);
  __chkstk_darwin(v56, v2);
  uint64_t v57 = (uint64_t)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v54, v4);
  uint64_t v55 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000570C(&qword_1001A5EC8);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringKey.init(_:)();
  uint64_t v10 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v51 = v11;
  uint64_t v52 = v10;
  char v13 = v12;
  uint64_t v53 = v14;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v15 = v58;
  char v16 = v59;
  uint64_t v17 = v60;
  char v18 = v61;
  uint64_t v19 = v62;
  uint64_t v50 = v63;
  char v20 = static Edge.Set.horizontal.getter();
  char v70 = v13 & 1;
  char v69 = v16;
  char v68 = v18;
  char v67 = 1;
  if (qword_1001A4E10 != -1) {
    swift_once();
  }
  uint64_t v21 = qword_1001A5E20;
  *(void *)&long long v71 = v52;
  *((void *)&v71 + 1) = v51;
  LOBYTE(v72) = v70;
  *((void *)&v72 + 1) = v53;
  *(void *)&long long v73 = v15;
  BYTE8(v73) = v69;
  *(void *)&long long v74 = v17;
  BYTE8(v74) = v68;
  *(void *)&long long v75 = v19;
  *((void *)&v75 + 1) = v50;
  LOBYTE(v76[0]) = v20;
  *(_OWORD *)((char *)v76 + 8) = 0u;
  *(_OWORD *)((char *)&v76[1] + 8) = 0u;
  BYTE8(v76[2]) = v67;
  uint64_t v77 = qword_1001A5E20;
  uint64_t v22 = v55;
  uint64_t v23 = &v55[*(int *)(v54 + 20)];
  uint64_t v24 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v25 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 104))(v23, v24, v25);
  __asm { FMOV            V0.2D, #3.0 }
  *uint64_t v22 = _Q0;
  swift_retain_n();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  sub_1000243EC((uint64_t)v22, (uint64_t)v9);
  uint64_t v31 = &v9[*(int *)(sub_10000570C(&qword_1001A5ED0) + 36)];
  long long v32 = v65;
  *(_OWORD *)uint64_t v31 = v64;
  *((_OWORD *)v31 + 1) = v32;
  *((void *)v31 + 4) = v66;
  uint64_t v33 = sub_10000570C(&qword_1001A5ED8);
  *(void *)&v9[*(int *)(v33 + 52)] = v21;
  *(_WORD *)&v9[*(int *)(v33 + 56)] = 256;
  uint64_t v34 = static Alignment.center.getter();
  uint64_t v36 = v35;
  uint64_t v37 = (uint64_t *)&v9[*(int *)(sub_10000570C(&qword_1001A5EE0) + 36)];
  *uint64_t v37 = v34;
  v37[1] = v36;
  sub_100024450((uint64_t)v22);
  uint64_t v38 = static Alignment.center.getter();
  uint64_t v40 = v39;
  uint64_t v41 = v57;
  sub_10000A428((uint64_t)v9, v57, &qword_1001A5EC8);
  uint64_t v42 = (uint64_t *)(v41 + *(int *)(v56 + 36));
  *uint64_t v42 = v38;
  v42[1] = v40;
  uint64_t v43 = sub_10000570C(&qword_1001A5E58);
  sub_10000A428(v41, a1 + *(int *)(v43 + 36), &qword_1001A5EB0);
  long long v44 = v76[0];
  long long v45 = v76[2];
  *(_OWORD *)(a1 + 96) = v76[1];
  *(_OWORD *)(a1 + 112) = v45;
  long long v46 = v72;
  long long v47 = v74;
  long long v48 = v75;
  *(_OWORD *)(a1 + 32) = v73;
  *(_OWORD *)(a1 + 48) = v47;
  *(void *)(a1 + 128) = v77;
  *(_OWORD *)(a1 + 64) = v48;
  *(_OWORD *)(a1 + 80) = v44;
  *(_OWORD *)a1 = v71;
  *(_OWORD *)(a1 + 16) = v46;
  sub_1000244AC((uint64_t)&v71);
  sub_10000ACE0(v41, &qword_1001A5EB0);
  sub_10000ACE0((uint64_t)v9, &qword_1001A5EC8);
  return sub_100024500((uint64_t)&v71);
}

uint64_t sub_100024038@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000570C(&qword_1001A5E28);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v7 = *v1;
  uint64_t v9 = *((void *)v1 + 1);
  uint64_t v8 = *((void *)v1 + 2);
  *(void *)uint64_t v6 = static HorizontalAlignment.center.getter();
  *((void *)v6 + 1) = 0x4035000000000000;
  v6[16] = 0;
  uint64_t v10 = sub_10000570C(&qword_1001A5E30);
  sub_1000232A4(v7, v9, v8, (uint64_t)&v6[*(int *)(v10 + 44)]);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_10000A428((uint64_t)v6, a1, &qword_1001A5E28);
  uint64_t v11 = (_OWORD *)(a1 + *(int *)(sub_10000570C(&qword_1001A5E38) + 36));
  long long v12 = v14[1];
  *uint64_t v11 = v14[0];
  v11[1] = v12;
  void v11[2] = v14[2];
  return sub_10000ACE0((uint64_t)v6, &qword_1001A5E28);
}

uint64_t sub_10002415C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100024194()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

unint64_t sub_1000241BC()
{
  unint64_t result = qword_1001A5E60;
  if (!qword_1001A5E60)
  {
    sub_100004A58(&qword_1001A5E58);
    sub_10002425C();
    sub_10000A780(&qword_1001A5EA8, &qword_1001A5EB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5E60);
  }
  return result;
}

unint64_t sub_10002425C()
{
  unint64_t result = qword_1001A5E68;
  if (!qword_1001A5E68)
  {
    sub_100004A58(&qword_1001A5E70);
    sub_1000242FC();
    sub_10000A780(&qword_1001A5E98, &qword_1001A5EA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5E68);
  }
  return result;
}

unint64_t sub_1000242FC()
{
  unint64_t result = qword_1001A5E78;
  if (!qword_1001A5E78)
  {
    sub_100004A58(&qword_1001A5E80);
    sub_100024378();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5E78);
  }
  return result;
}

unint64_t sub_100024378()
{
  unint64_t result = qword_1001A5E88;
  if (!qword_1001A5E88)
  {
    sub_100004A58(&qword_1001A5E90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5E88);
  }
  return result;
}

uint64_t sub_1000243EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RoundedRectangle();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100024450(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RoundedRectangle();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000244AC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100024500(uint64_t a1)
{
  return a1;
}

uint64_t sub_100024554@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100024580()
{
  return EnvironmentValues.tint.setter();
}

unint64_t sub_1000245B0()
{
  unint64_t result = qword_1001A5F00;
  if (!qword_1001A5F00)
  {
    sub_100004A58(&qword_1001A5E38);
    sub_10000A780(&qword_1001A5F08, &qword_1001A5E28);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5F00);
  }
  return result;
}

uint64_t *sub_100024650(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    a1[1] = a2[1];
    uint64_t v6 = *(int *)(a3 + 20);
    int v7 = (uint64_t *)((char *)a1 + v6);
    uint64_t v8 = (uint64_t *)((char *)a2 + v6);
    swift_retain();
    sub_10000570C(&qword_1001A5470);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v10 = *(void *)(v9 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        uint64_t v11 = sub_10000570C(&qword_1001A5478);
        memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
    }
    else
    {
      *int v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10002481C(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  sub_10000570C(&qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v8 = *(void *)(v5 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
    if (!result)
    {
      int v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
      return v7(v4, v5);
    }
  }
  else
  {
    return swift_release();
  }
  return result;
}

void *sub_100024944(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (void *)((char *)a1 + v5);
  int v7 = (void *)((char *)a2 + v5);
  swift_retain();
  sub_10000570C(&qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v9 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    {
      uint64_t v10 = sub_10000570C(&qword_1001A5478);
      memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v6, v7, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
    }
  }
  else
  {
    void *v6 = *v7;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_100024AC0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 20);
    int v7 = (void *)((char *)a1 + v6);
    uint64_t v8 = (void *)((char *)a2 + v6);
    sub_10000ACE0((uint64_t)a1 + v6, &qword_1001A5470);
    sub_10000570C(&qword_1001A5470);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v10 = *(void *)(v9 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        uint64_t v11 = sub_10000570C(&qword_1001A5478);
        memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
    }
    else
    {
      *int v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *sub_100024C70(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_10000570C(&qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v9 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8))
    {
      uint64_t v10 = sub_10000570C(&qword_1001A5478);
      memcpy(v5, v6, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v5, v6, v8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  return a1;
}

void *sub_100024DF0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    sub_10000ACE0((uint64_t)a1 + v6, &qword_1001A5470);
    uint64_t v9 = sub_10000570C(&qword_1001A5470);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
      {
        uint64_t v12 = sub_10000570C(&qword_1001A5478);
        memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v7, v8, v10);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100024FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100024FB4);
}

uint64_t sub_100024FB4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_10000570C(&qword_1001A5F10);
    uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = (char *)a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_100025074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100025088);
}

void *sub_100025088(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *uint64_t result = a2;
  }
  else
  {
    uint64_t v7 = sub_10000570C(&qword_1001A5F10);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for EventRootView()
{
  uint64_t result = qword_1001A5F70;
  if (!qword_1001A5F70) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100025180()
{
  sub_100025218();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_100025218()
{
  if (!qword_1001A5F80)
  {
    sub_100004A58(&qword_1001A5478);
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001A5F80);
    }
  }
}

uint64_t sub_100025274()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100025290@<X0>(uint64_t a1@<X8>)
{
  uint64_t v70 = a1;
  uint64_t v2 = type metadata accessor for TaskPriority();
  uint64_t v68 = *(void *)(v2 - 8);
  uint64_t v69 = v2;
  __chkstk_darwin(v2, v3);
  char v67 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v54 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000570C(&qword_1001A5FB0);
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9, v11);
  char v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000570C(&qword_1001A5478);
  uint64_t v16 = __chkstk_darwin(v14 - 8, v15);
  char v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v16, v19);
  uint64_t v22 = (char *)&v54 - v21;
  __chkstk_darwin(v20, v23);
  uint64_t v25 = (char *)&v54 - v24;
  uint64_t v26 = sub_10000570C(&qword_1001A5FB8);
  uint64_t v65 = *(void *)(v26 - 8);
  uint64_t v66 = v26;
  __chkstk_darwin(v26, v27);
  long long v71 = (char *)&v54 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_10000570C(&qword_1001A5FC0);
  __chkstk_darwin(v64, v29);
  uint64_t v58 = (char *)&v54 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100025994(v1, (uint64_t)&v73);
  uint64_t v72 = v73;
  uint64_t v62 = v75;
  uint64_t v63 = v74;
  uint64_t v60 = v77;
  uint64_t v61 = v76;
  uint64_t v59 = v78;
  uint64_t v56 = v79;
  int v55 = v80;
  int v57 = v81;
  type metadata accessor for EventRootView();
  sub_100026824((uint64_t)v25);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v22, enum case for UserInterfaceSizeClass.compact(_:), v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v22, 0, 1, v5);
  uint64_t v31 = (uint64_t)&v13[*(int *)(v10 + 56)];
  sub_10000A428((uint64_t)v25, (uint64_t)v13, &qword_1001A5478);
  sub_10000A428((uint64_t)v22, v31, &qword_1001A5478);
  long long v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v32((uint64_t)v13, 1, v5) == 1)
  {
    sub_10000ACE0((uint64_t)v22, &qword_1001A5478);
    sub_10000ACE0((uint64_t)v25, &qword_1001A5478);
    if (v32(v31, 1, v5) == 1) {
      uint64_t v33 = &qword_1001A5478;
    }
    else {
      uint64_t v33 = &qword_1001A5FB0;
    }
  }
  else
  {
    sub_10000A428((uint64_t)v13, (uint64_t)v18, &qword_1001A5478);
    if (v32(v31, 1, v5) == 1)
    {
      sub_10000ACE0((uint64_t)v22, &qword_1001A5478);
      sub_10000ACE0((uint64_t)v25, &qword_1001A5478);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v18, v5);
      uint64_t v33 = &qword_1001A5FB0;
    }
    else
    {
      uint64_t v34 = v54;
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v54, v31, v5);
      sub_10002726C((unint64_t *)&qword_1001A6040, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
      dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v35 = *(void (**)(char *, uint64_t))(v6 + 8);
      v35(v34, v5);
      uint64_t v33 = &qword_1001A5478;
      sub_10000ACE0((uint64_t)v22, &qword_1001A5478);
      sub_10000ACE0((uint64_t)v25, &qword_1001A5478);
      v35(v18, v5);
    }
  }
  sub_10000ACE0((uint64_t)v13, v33);
  uint64_t v37 = v62;
  uint64_t v36 = v63;
  uint64_t v73 = v72;
  uint64_t v74 = v63;
  uint64_t v39 = v60;
  uint64_t v38 = v61;
  uint64_t v75 = v62;
  uint64_t v76 = v61;
  uint64_t v40 = v59;
  uint64_t v77 = v60;
  uint64_t v78 = v59;
  uint64_t v41 = v56;
  uint64_t v79 = v56;
  __int16 v42 = v55;
  unsigned __int16 v80 = v55;
  char v43 = v57;
  unsigned __int8 v81 = v57;
  sub_10000570C(&qword_1001A5FC8);
  sub_100026AB4();
  View.statusBar(hidden:)();
  sub_100026DEC(v72, v36, v37, v38, v39, v40, v41, v42, v43);
  long long v44 = v67;
  static TaskPriority.userInitiated.getter();
  uint64_t v45 = (uint64_t)v58;
  long long v46 = &v58[*(int *)(v64 + 36)];
  uint64_t v47 = type metadata accessor for _TaskModifier();
  uint64_t v49 = v68;
  uint64_t v48 = v69;
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(&v46[*(int *)(v47 + 20)], v44, v69);
  *(void *)long long v46 = &unk_1001A6038;
  *((void *)v46 + 1) = 0;
  uint64_t v51 = v65;
  uint64_t v50 = v66;
  uint64_t v52 = v71;
  (*(void (**)(uint64_t, char *, uint64_t))(v65 + 16))(v45, v71, v66);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v44, v48);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v50);
  return sub_10000A3C4(v45, v70, &qword_1001A5FC0);
}

double sub_100025994@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  if (!*a1)
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10002726C((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    EnvironmentObject.error()();
    __break(1u);
    JUMPOUT(0x1000261FCLL);
  }
  switch(*(unsigned char *)(v3 + 32))
  {
    case 2:
      type metadata accessor for RemoteViewConfiguration();
      sub_10002726C((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
      swift_bridgeObjectRetain();
      EnvironmentObject.init()();
      sub_100026D44();
      sub_100026D98();
      swift_bridgeObjectRetain();
      swift_retain();
      _ConditionalContent<>.init(storage:)();
      sub_10000570C(&qword_1001A6000);
      sub_10000570C(&qword_1001A6020);
      sub_100026B9C();
      sub_100026C80();
      _ConditionalContent<>.init(storage:)();
      sub_10000570C(&qword_1001A5FF0);
      sub_100026B60();
      goto LABEL_7;
    case 3:
      uint64_t v10 = *(void *)(v3 + 16);
      uint64_t v9 = *(void *)(v3 + 24);
      type metadata accessor for PromotionalAssetsController();
      uint64_t v11 = swift_allocObject();
      uint64_t v12 = v11 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
      uint64_t v13 = type metadata accessor for ArtistPromotionalAssets();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
      *(void *)(v11 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__error) = 0;
      *(void *)(v11 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__emptyScheduleViewModel) = 0;
      swift_bridgeObjectRetain();
      ObservationRegistrar.init()();
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = v9;
      *(unsigned char *)(v11 + 32) = 1;
      type metadata accessor for RemoteViewConfiguration();
      sub_10002726C((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
      EnvironmentObject.init()();
      sub_100026D44();
      sub_100026D98();
      swift_retain();
      swift_retain();
      _ConditionalContent<>.init(storage:)();
      sub_10000570C(&qword_1001A6000);
      sub_10000570C(&qword_1001A6020);
      sub_100026B9C();
      sub_100026C80();
      _ConditionalContent<>.init(storage:)();
      sub_10000570C(&qword_1001A5FF0);
      sub_100026B60();
      _ConditionalContent<>.init(storage:)();
      swift_release();
      swift_release();
      break;
    case 4:
      uint64_t v5 = *(void *)(v3 + 16);
      uint64_t v4 = *(void *)(v3 + 24);
      type metadata accessor for PromotionalAssetsController();
      uint64_t v6 = swift_allocObject();
      uint64_t v7 = v6 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
      uint64_t v8 = type metadata accessor for ArtistPromotionalAssets();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
      *(void *)(v6 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__error) = 0;
      *(void *)(v6 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__emptyScheduleViewModel) = 0;
      swift_bridgeObjectRetain();
      ObservationRegistrar.init()();
      *(void *)(v6 + 16) = v5;
      *(void *)(v6 + 24) = v4;
      *(unsigned char *)(v6 + 32) = 0;
      type metadata accessor for RemoteViewConfiguration();
      sub_10002726C((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
      EnvironmentObject.init()();
      sub_10000570C(&qword_1001A5FF0);
      sub_100026B60();
      sub_100026D98();
      _ConditionalContent<>.init(storage:)();
      break;
    default:
      type metadata accessor for RemoteViewConfiguration();
      sub_10002726C((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
      swift_bridgeObjectRetain();
      EnvironmentObject.init()();
      sub_100026BD8();
      sub_100026C2C();
      swift_bridgeObjectRetain();
      swift_retain();
      _ConditionalContent<>.init(storage:)();
      sub_10000570C(&qword_1001A6000);
      sub_10000570C(&qword_1001A6020);
      sub_100026B9C();
      sub_100026C80();
      _ConditionalContent<>.init(storage:)();
      sub_10000570C(&qword_1001A5FF0);
      sub_100026B60();
      sub_100026D98();
LABEL_7:
      _ConditionalContent<>.init(storage:)();
      swift_release();
      swift_bridgeObjectRelease();
      break;
  }
  double result = *(double *)&v15;
  *(_OWORD *)a2 = v15;
  *(_OWORD *)(a2 + 16) = v16;
  *(_OWORD *)(a2 + 32) = v17;
  *(void *)(a2 + 48) = v18;
  *(_WORD *)(a2 + 56) = v19;
  *(unsigned char *)(a2 + 58) = v20;
  return result;
}

uint64_t sub_100026210()
{
  type metadata accessor for MainActor();
  v0[2] = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[3] = v2;
  v0[4] = v1;
  return _swift_task_switch(sub_1000262A4, v2, v1);
}

uint64_t sub_1000262A4()
{
  if (qword_1001A4ED8 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100026368;
  return sub_10011159C();
}

uint64_t sub_100026368()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 32);
  uint64_t v3 = *(void *)(v1 + 24);
  return _swift_task_switch(sub_100026488, v3, v2);
}

uint64_t sub_100026488()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000264EC@<X0>(uint64_t a1@<X8>)
{
  return sub_10002656C(&qword_1001A55D8, (uint64_t (*)(void))&type metadata accessor for OpenURLAction, 0x414C52556E65704FLL, 0xED00006E6F697463, a1);
}

uint64_t sub_10002652C@<X0>(uint64_t a1@<X8>)
{
  return sub_10002656C(&qword_1001A5460, (uint64_t (*)(void))&type metadata accessor for DismissAction, 0x417373696D736944, 0xED00006E6F697463, a1);
}

uint64_t sub_10002656C@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v29 = a3;
  uint64_t v9 = v5;
  uint64_t v11 = type metadata accessor for EnvironmentValues();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  long long v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000570C(a1);
  __chkstk_darwin(v16, v17);
  __int16 v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A428(v9, (uint64_t)v19, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = a2(0);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v20 - 8) + 32))(a5, v19, v20);
  }
  else
  {
    os_log_type_t v22 = static os_log_type_t.fault.getter();
    uint64_t v23 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v23, v22))
    {
      unint64_t v27 = a4;
      uint64_t v24 = swift_slowAlloc();
      uint64_t v28 = a5;
      uint64_t v25 = (uint8_t *)v24;
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136315138;
      uint64_t v30 = sub_1000FE1F8(v29, v27, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v23, v22, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
}

uint64_t sub_100026824@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000570C(&qword_1001A5470);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A428(v2, (uint64_t)v12, &qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return sub_10000A3C4((uint64_t)v12, a1, &qword_1001A5478);
  }
  os_log_type_t v14 = static os_log_type_t.fault.getter();
  long long v15 = static Log.runtimeIssuesLog.getter();
  os_log_type_t v16 = v14;
  if (os_log_type_enabled(v15, v14))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    v19[1] = a1;
    uint64_t v20 = v18;
    *(_DWORD *)uint64_t v17 = 136315138;
    v19[2] = sub_1000FE1F8(0xD000000000000020, 0x800000010015DC30, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

unint64_t sub_100026AB4()
{
  unint64_t result = qword_1001A5FD0;
  if (!qword_1001A5FD0)
  {
    sub_100004A58(&qword_1001A5FC8);
    sub_100026CBC(&qword_1001A5FD8, &qword_1001A5FE0, (void (*)(void))sub_100026B60, (void (*)(void))sub_100026D98);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5FD0);
  }
  return result;
}

uint64_t sub_100026B60()
{
  return sub_100026CBC(&qword_1001A5FE8, &qword_1001A5FF0, (void (*)(void))sub_100026B9C, (void (*)(void))sub_100026C80);
}

uint64_t sub_100026B9C()
{
  return sub_100026CBC(&qword_1001A5FF8, &qword_1001A6000, (void (*)(void))sub_100026BD8, (void (*)(void))sub_100026C2C);
}

unint64_t sub_100026BD8()
{
  unint64_t result = qword_1001A6008;
  if (!qword_1001A6008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6008);
  }
  return result;
}

unint64_t sub_100026C2C()
{
  unint64_t result = qword_1001A6010;
  if (!qword_1001A6010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6010);
  }
  return result;
}

uint64_t sub_100026C80()
{
  return sub_100026CBC(&qword_1001A6018, &qword_1001A6020, (void (*)(void))sub_100026D44, (void (*)(void))sub_100026D98);
}

uint64_t sub_100026CBC(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100026D44()
{
  unint64_t result = qword_1001A6028;
  if (!qword_1001A6028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6028);
  }
  return result;
}

unint64_t sub_100026D98()
{
  unint64_t result = qword_1001A6030;
  if (!qword_1001A6030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6030);
  }
  return result;
}

uint64_t sub_100026DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __int16 a8, char a9)
{
  if (a9)
  {
    swift_release();
    return swift_release();
  }
  else
  {
    return sub_100026E54(a1, a2, a3, a4, a5, a6, a7, a8, HIBYTE(a8) & 1);
  }
}

uint64_t sub_100026E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9)
{
  if (a9) {
    return sub_100026ECC(a1, a2, a3, a4, a5, a6, a7, a8 & 1);
  }
  else {
    return sub_100026E6C();
  }
}

uint64_t sub_100026E6C()
{
  swift_bridgeObjectRelease();
  sub_10001274C();

  return swift_release();
}

uint64_t sub_100026ECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a8)
  {
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_10001274C();
  }

  return swift_release();
}

uint64_t sub_100026F48@<X0>(uint64_t a1@<X8>)
{
  return sub_10002656C(&qword_1001A5468, (uint64_t (*)(void))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, a1);
}

uint64_t sub_100026F84(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    return a1 & 1;
  }
  swift_retain();
  os_log_type_t v9 = static os_log_type_t.fault.getter();
  uint64_t v10 = static Log.runtimeIssuesLog.getter();
  os_log_type_t v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v14 = sub_1000FE1F8(1819242306, 0xE400000000000000, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  sub_1000272B4(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v15;
}

unint64_t sub_10002718C()
{
  unint64_t result = qword_1001A6048;
  if (!qword_1001A6048)
  {
    sub_100004A58(&qword_1001A5FC0);
    sub_100004A58(&qword_1001A5FC8);
    sub_100026AB4();
    swift_getOpaqueTypeConformance2();
    sub_10002726C(&qword_1001A5430, (void (*)(uint64_t))&type metadata accessor for _TaskModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6048);
  }
  return result;
}

uint64_t sub_10002726C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000272B4(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_release();
  }
  return result;
}

ValueMetadata *type metadata accessor for LightGradientBackground()
{
  return &type metadata for LightGradientBackground;
}

uint64_t sub_1000272D0()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_1000272EC@<D0>(uint64_t a1@<X8>)
{
  sub_10000570C(&qword_1001A6050);
  double v2 = COERCE_DOUBLE(swift_allocObject());
  *(_OWORD *)(*(void *)&v2 + 16) = xmmword_100152B80;
  if (qword_1001A4E38 != -1) {
    swift_once();
  }
  *(void *)(*(void *)&v2 + 32) = qword_1001B74D8;
  swift_retain();
  *(void *)(*(void *)&v2 + 40) = static Color.clear.getter();
  *(double *)&long long v4 = v2;
  specialized Array._endMutation()();
  Gradient.init(colors:)();
  static UnitPoint.top.getter();
  static UnitPoint.bottom.getter();
  LinearGradient.init(gradient:startPoint:endPoint:)();
  double result = v2;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = v6;
  return result;
}

unint64_t sub_1000273EC()
{
  unint64_t result = qword_1001A6058[0];
  if (!qword_1001A6058[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001A6058);
  }
  return result;
}

uint64_t sub_100027440()
{
  type metadata accessor for WatchFacesViewModel();
  type metadata accessor for Bindable();
  Bindable.wrappedValue.getter();
  return v1;
}

uint64_t sub_100027480(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v7 - v5, a1, v2);
  State.init(wrappedValue:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t sub_100027574(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  type metadata accessor for Optional();
  uint64_t v3 = type metadata accessor for State();
  return a2(v3);
}

uint64_t sub_1000275CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  sub_100004A58(&qword_1001A60E0);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v40 = a1;
  type metadata accessor for Array();
  type metadata accessor for ScrollAsset();
  swift_getWitnessTable();
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v58 = *(void *)(v4 + 8);
  type metadata accessor for ForEach();
  uint64_t v53 = sub_10002EE44(&qword_1001A60E8, (void (*)(uint64_t))type metadata accessor for ScrollAsset);
  swift_getWitnessTable();
  type metadata accessor for HStack();
  swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  swift_getOpaqueTypeConformance2();
  type metadata accessor for ScrollView();
  swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for ViewAlignedScrollTargetBehavior();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeMetadata2();
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v56 = OpaqueTypeConformance2;
  uint64_t v57 = v58;
  uint64_t v7 = swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeMetadata2();
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v54 = OpaqueTypeMetadata2;
  uint64_t v55 = v7;
  uint64_t v51 = swift_getOpaqueTypeConformance2();
  uint64_t v52 = &protocol witness table for _FrameLayout;
  uint64_t v39 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v50 = *(void *)(v58 + 8);
  uint64_t v54 = v8;
  uint64_t v55 = v9;
  uint64_t v56 = WitnessTable;
  uint64_t v57 = swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  sub_100004A58(&qword_1001A60F0);
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001A60F8);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for PageControl();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for ModifiedContent();
  uint64_t v11 = v4;
  type metadata accessor for SelectAssetButton();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for VStack();
  uint64_t v35 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v33 - v14;
  uint64_t v16 = type metadata accessor for ModifiedContent();
  uint64_t v37 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v17);
  __int16 v19 = (char *)&v33 - v18;
  sub_100004A58(&qword_1001A5AE8);
  uint64_t v20 = type metadata accessor for ModifiedContent();
  uint64_t v38 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20, v21);
  uint64_t v34 = (char *)&v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v24);
  uint64_t v36 = (char *)&v33 - v25;
  uint64_t v43 = v3;
  uint64_t v44 = v11;
  uint64_t v45 = v41;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  static Edge.Set.top.getter();
  sub_100027440();
  swift_release();
  uint64_t v26 = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v15, v12);
  LOBYTE(v3) = *(unsigned char *)(sub_100027440() + 136);
  swift_release();
  LOBYTE(v54) = (v3 & 1) == 0;
  static Alignment.center.getter();
  sub_10000570C(&qword_1001A6100);
  uint64_t v48 = v26;
  uint64_t v49 = &protocol witness table for _PaddingLayout;
  uint64_t v27 = swift_getWitnessTable();
  sub_10002C4F4(&qword_1001A6108, &qword_1001A6100, (void (*)(void))sub_10002C464);
  uint64_t v28 = v34;
  View.background<A>(_:alignment:)();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v19, v16);
  uint64_t v29 = sub_10000A780(&qword_1001A5AE0, &qword_1001A5AE8);
  uint64_t v46 = v27;
  uint64_t v47 = v29;
  swift_getWitnessTable();
  uint64_t v30 = v36;
  sub_1001221F0(v28, v20);
  uint64_t v31 = *(void (**)(char *, uint64_t))(v38 + 8);
  v31(v28, v20);
  sub_1001221F0(v30, v20);
  return ((uint64_t (*)(char *, uint64_t))v31)(v30, v20);
}

uint64_t sub_100027EE0@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v133 = a1;
  uint64_t v129 = a4;
  uint64_t v6 = type metadata accessor for SelectAssetButton();
  uint64_t v123 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v106 = (uint64_t)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  uint64_t v107 = (char *)&v102 - v11;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v104 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v121 = (char *)&v102 - v15;
  uint64_t v122 = *(void *)(a2 - 8);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  uint64_t v103 = (char *)&v102 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  uint64_t v102 = (char *)&v102 - v20;
  uint64_t v128 = v6;
  uint64_t v127 = type metadata accessor for Optional();
  uint64_t v124 = *(void *)(v127 - 8);
  uint64_t v22 = __chkstk_darwin(v127, v21);
  uint64_t v126 = (char *)&v102 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v24);
  uint64_t v125 = (char *)&v102 - v25;
  uint64_t v26 = type metadata accessor for WatchFacesView();
  Swift::String v119 = *(void **)(v26 - 8);
  uint64_t v117 = v119[8];
  __chkstk_darwin(v26, v27);
  Swift::String v118 = (char *)&v102 - v28;
  uint64_t v29 = type metadata accessor for Array();
  uint64_t v30 = type metadata accessor for ScrollAsset();
  uint64_t WitnessTable = swift_getWitnessTable();
  Swift::String v120 = (char *)a3;
  long long v32 = *(void **)(a3 + 8);
  uint64_t v140 = v29;
  uint64_t v141 = a2;
  uint64_t v142 = v30;
  v143 = (void *)WitnessTable;
  v144 = v32;
  type metadata accessor for ForEach();
  v139[8] = sub_10002EE44(&qword_1001A60E8, (void (*)(uint64_t))type metadata accessor for ScrollAsset);
  swift_getWitnessTable();
  uint64_t v33 = type metadata accessor for HStack();
  uint64_t v34 = swift_getWitnessTable();
  uint64_t v140 = v33;
  uint64_t v141 = v34;
  swift_getOpaqueTypeMetadata2();
  uint64_t v140 = v33;
  uint64_t v141 = v34;
  swift_getOpaqueTypeConformance2();
  uint64_t v35 = type metadata accessor for ScrollView();
  uint64_t v36 = swift_getWitnessTable();
  uint64_t v140 = v35;
  uint64_t v141 = v36;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v38 = type metadata accessor for ViewAlignedScrollTargetBehavior();
  uint64_t v140 = v35;
  uint64_t v141 = v36;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v140 = OpaqueTypeMetadata2;
  uint64_t v141 = v38;
  uint64_t v142 = OpaqueTypeConformance2;
  v143 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  uint64_t v40 = swift_getOpaqueTypeMetadata2();
  uint64_t v140 = OpaqueTypeMetadata2;
  uint64_t v141 = v38;
  uint64_t v142 = OpaqueTypeConformance2;
  v143 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  uint64_t v41 = swift_getOpaqueTypeConformance2();
  uint64_t v140 = v40;
  uint64_t v141 = a2;
  uint64_t v142 = v41;
  v143 = v32;
  uint64_t v42 = swift_getOpaqueTypeMetadata2();
  uint64_t v140 = v40;
  uint64_t v141 = a2;
  uint64_t v142 = v41;
  v143 = v32;
  uint64_t v43 = swift_getOpaqueTypeConformance2();
  uint64_t v140 = v42;
  uint64_t v141 = v43;
  swift_getOpaqueTypeMetadata2();
  uint64_t v44 = type metadata accessor for ModifiedContent();
  uint64_t v140 = v42;
  uint64_t v141 = v43;
  v139[6] = swift_getOpaqueTypeConformance2();
  v139[7] = &protocol witness table for _FrameLayout;
  uint64_t v45 = swift_getWitnessTable();
  v139[5] = v32[1];
  uint64_t v46 = swift_getWitnessTable();
  uint64_t v140 = v44;
  uint64_t v141 = v12;
  uint64_t v105 = v12;
  uint64_t v142 = v45;
  v143 = (void *)v46;
  swift_getOpaqueTypeMetadata2();
  sub_100004A58(&qword_1001A60F0);
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001A60F8);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t v47 = (char *)a2;
  type metadata accessor for PageControl();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  uint64_t v108 = swift_getWitnessTable();
  uint64_t v48 = type metadata accessor for VStack();
  uint64_t v110 = *(void *)(v48 - 8);
  __chkstk_darwin(v48, v49);
  uint64_t v51 = (char *)&v102 - v50;
  uint64_t v116 = type metadata accessor for ModifiedContent();
  uint64_t v130 = *(void *)(v116 - 8);
  uint64_t v53 = __chkstk_darwin(v116, v52);
  Swift::String v115 = (char *)&v102 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = __chkstk_darwin(v53, v55);
  uint64_t v109 = (char *)&v102 - v57;
  __chkstk_darwin(v56, v58);
  unint64_t v131 = (char *)&v102 - v59;
  uint64_t v132 = v26;
  LODWORD(v45) = *(unsigned __int8 *)(sub_100027440() + 136);
  uint64_t v60 = swift_release();
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  if (v45 == 1)
  {
    uint64_t v66 = sub_100027440();
    uint64_t v62 = *(void *)(v66 + 16);
    uint64_t v63 = *(void *)(v66 + 24);
    uint64_t v64 = *(unsigned __int8 *)(v66 + 32);
    uint64_t v65 = *(void **)(v66 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v60 = swift_release();
  }
  uint64_t v111 = v65;
  uint64_t v112 = v64;
  uint64_t v113 = v63;
  uint64_t v114 = v62;
  __chkstk_darwin(v60, v61);
  char v67 = v120;
  *(&v102 - 4) = v47;
  *(&v102 - 3) = v67;
  uint64_t v68 = v133;
  *(&v102 - 2) = v133;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  uint64_t v69 = v119;
  uint64_t v70 = v118;
  uint64_t v71 = v132;
  ((void (*)(char *, char *, uint64_t))v119[2])(v118, v68, v132);
  unint64_t v72 = (*((unsigned __int8 *)v69 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v69 + 80);
  uint64_t v73 = swift_allocObject();
  *(void *)(v73 + 16) = v47;
  *(void *)(v73 + 24) = v67;
  uint64_t v74 = v70;
  uint64_t v75 = v47;
  ((void (*)(unint64_t, char *, uint64_t))v69[4])(v73 + v72, v74, v71);
  uint64_t v76 = swift_getWitnessTable();
  uint64_t v77 = v109;
  View.onAppear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v110 + 8))(v51, v48);
  v139[3] = v76;
  v139[4] = &protocol witness table for _AppearanceActionModifier;
  uint64_t v78 = v116;
  Swift::String v118 = (char *)swift_getWitnessTable();
  sub_1001221F0(v77, v78);
  uint64_t v79 = *(void **)(v130 + 8);
  Swift::String v120 = (char *)(v130 + 8);
  Swift::String v119 = v79;
  ((void (*)(char *, uint64_t))v79)(v77, v78);
  unsigned __int16 v80 = v121;
  sub_100027574(v71, (uint64_t (*)(uint64_t))&State.wrappedValue.getter);
  uint64_t v81 = v122;
  if ((*(unsigned int (**)(char *, uint64_t, char *))(v122 + 48))(v80, 1, v75) == 1)
  {
    (*(void (**)(char *, uint64_t))(v104 + 8))(v80, v105);
    Swift::String v82 = v126;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v123 + 56))(v126, 1, 1, v128);
    swift_getWitnessTable();
    Swift::String v83 = v125;
    uint64_t v84 = (uint64_t)v125;
    uint64_t v85 = (uint64_t)v82;
  }
  else
  {
    id v86 = v102;
    (*(void (**)(char *, char *, char *))(v81 + 32))(v102, v80, v75);
    uint64_t v87 = (uint64_t)v103;
    (*(void (**)(char *, char *, char *))(v81 + 16))(v103, v86, v75);
    uint64_t v88 = sub_100027440();
    uint64_t v89 = v106;
    sub_10002B388(v87, v88, v106);
    (*(void (**)(char *, char *))(v81 + 8))(v86, v75);
    uint64_t v90 = v128;
    swift_getWitnessTable();
    uint64_t v91 = v107;
    sub_1001221F0(v89, v90);
    uint64_t v92 = v123;
    uint64_t v93 = *(void (**)(uint64_t, uint64_t))(v123 + 8);
    v93(v89, v90);
    Swift::String v82 = v126;
    sub_1001221F0(v91, v90);
    v93((uint64_t)v91, v90);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(v82, 0, 1, v90);
    uint64_t v84 = (uint64_t)v125;
    uint64_t v85 = (uint64_t)v82;
    Swift::String v83 = v125;
  }
  sub_100123138(v85, v84);
  uint64_t v94 = v124;
  uint64_t v95 = *(void (**)(char *, uint64_t))(v124 + 8);
  uint64_t v96 = v127;
  v95(v82, v127);
  uint64_t v140 = v114;
  uint64_t v141 = v113;
  uint64_t v142 = v112;
  v143 = v111;
  v139[0] = &v140;
  unint64_t v97 = v115;
  uint64_t v98 = v131;
  (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v115, v131, v78);
  v139[1] = v97;
  (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v82, v83, v96);
  v139[2] = v82;
  v138[0] = sub_10000570C(&qword_1001A60E0);
  v138[1] = v78;
  v138[2] = v96;
  uint64_t v135 = sub_10002C4F4(&qword_1001A6118, &qword_1001A60E0, (void (*)(void))sub_10002C56C);
  uint64_t v136 = v118;
  uint64_t v134 = swift_getWitnessTable();
  uint64_t v137 = swift_getWitnessTable();
  sub_1001231A4((uint64_t)v139, 3uLL, (uint64_t)v138);
  v95(v83, v96);
  uint64_t v99 = v98;
  uint64_t v100 = (void (*)(char *, uint64_t))v119;
  ((void (*)(char *, uint64_t))v119)(v99, v78);
  v95(v82, v96);
  v100(v97, v78);
  return sub_10002C5C0(v140, v141);
}

uint64_t sub_100028E78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v221 = a1;
  uint64_t v212 = a4;
  uint64_t v4 = *(void **)(a3 + 8);
  uint64_t v222 = a3;
  uint64_t v214 = v4[1];
  uint64_t v6 = type metadata accessor for PageControl();
  uint64_t v207 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6, v6);
  v150 = (char *)&v149 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  char v151 = (char *)&v149 - v10;
  uint64_t v210 = v11;
  uint64_t v211 = type metadata accessor for Optional();
  uint64_t v219 = *(void *)(v211 - 8);
  uint64_t v13 = __chkstk_darwin(v211, v12);
  v209 = (char *)&v149 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  uint64_t v208 = (uint64_t)&v149 - v16;
  uint64_t v217 = type metadata accessor for WatchFacesView();
  uint64_t v204 = *(void *)(v217 - 8);
  uint64_t v205 = *(void *)(v204 + 64);
  __chkstk_darwin(v217, v17);
  v203 = (char *)&v149 - v18;
  uint64_t v215 = type metadata accessor for Optional();
  uint64_t v206 = *(void *)(v215 - 8);
  __chkstk_darwin(v215, v215);
  v202 = (char *)&v149 - v19;
  uint64_t v20 = type metadata accessor for Binding();
  uint64_t v199 = *(void *)(v20 - 8);
  uint64_t v200 = v20;
  __chkstk_darwin(v20, v21);
  v213 = (char *)&v149 - v22;
  uint64_t v23 = type metadata accessor for ViewAlignedScrollTargetBehavior.LimitBehavior();
  __chkstk_darwin(v23 - 8, v24);
  uint64_t v197 = (char *)&v149 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for ViewAlignedScrollTargetBehavior();
  uint64_t v198 = *(void *)(v26 - 8);
  __chkstk_darwin(v26, v27);
  uint64_t v196 = (char *)&v149 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for ContentMarginPlacement();
  uint64_t v194 = *(void *)(v29 - 8);
  uint64_t v195 = v29;
  __chkstk_darwin(v29, v30);
  uint64_t v192 = (char *)&v149 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for Array();
  uint64_t v33 = type metadata accessor for ScrollAsset();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v236 = v32;
  uint64_t v237 = a2;
  uint64_t v238 = v33;
  v239 = (void *)WitnessTable;
  v240 = v4;
  type metadata accessor for ForEach();
  v235[11] = sub_10002EE44(&qword_1001A60E8, (void (*)(uint64_t))type metadata accessor for ScrollAsset);
  swift_getWitnessTable();
  uint64_t v35 = type metadata accessor for HStack();
  uint64_t v36 = swift_getWitnessTable();
  uint64_t v236 = v35;
  uint64_t v237 = v36;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v236 = v35;
  uint64_t v237 = v36;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v37 = type metadata accessor for ScrollView();
  uint64_t v181 = *(void *)(v37 - 8);
  __chkstk_darwin(v37, v38);
  uint64_t v167 = (char *)&v149 - v39;
  uint64_t v40 = swift_getWitnessTable();
  uint64_t v236 = v37;
  uint64_t v237 = v40;
  uint64_t v41 = v40;
  uint64_t v164 = v40;
  uint64_t v42 = swift_getOpaqueTypeMetadata2();
  uint64_t v179 = *(void *)(v42 - 8);
  __chkstk_darwin(v42, v43);
  uint64_t v166 = (char *)&v149 - v44;
  uint64_t v236 = v37;
  uint64_t v237 = v41;
  uint64_t v45 = swift_getOpaqueTypeConformance2();
  uint64_t v236 = v42;
  uint64_t v237 = v26;
  uint64_t v46 = v42;
  uint64_t v160 = v26;
  uint64_t v161 = v42;
  uint64_t v47 = v26;
  uint64_t v238 = v45;
  v239 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  uint64_t v163 = v45;
  uint64_t v48 = swift_getOpaqueTypeMetadata2();
  uint64_t v177 = *(void *)(v48 - 8);
  __chkstk_darwin(v48, v49);
  uint64_t v159 = (char *)&v149 - v50;
  uint64_t v236 = v46;
  uint64_t v237 = v47;
  uint64_t v238 = v45;
  v239 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  uint64_t v51 = swift_getOpaqueTypeConformance2();
  uint64_t v236 = v48;
  uint64_t v237 = a2;
  uint64_t v52 = v48;
  uint64_t v156 = v48;
  uint64_t v157 = v51;
  uint64_t v238 = v51;
  v239 = v4;
  uint64_t v53 = v51;
  v158 = v4;
  uint64_t v54 = swift_getOpaqueTypeMetadata2();
  uint64_t v176 = *(void *)(v54 - 8);
  __chkstk_darwin(v54, v55);
  v154 = (char *)&v149 - v56;
  uint64_t v236 = v52;
  uint64_t v237 = a2;
  uint64_t v220 = a2;
  uint64_t v238 = v53;
  v239 = v4;
  uint64_t v57 = swift_getOpaqueTypeConformance2();
  uint64_t v236 = v54;
  uint64_t v237 = v57;
  uint64_t v152 = v54;
  uint64_t v153 = v57;
  uint64_t v58 = v57;
  uint64_t v168 = swift_getOpaqueTypeMetadata2();
  uint64_t v175 = *(void *)(v168 - 8);
  __chkstk_darwin(v168, v168);
  uint64_t v155 = (char *)&v149 - v59;
  uint64_t v60 = type metadata accessor for ModifiedContent();
  uint64_t v173 = v60;
  uint64_t v186 = *(void *)(v60 - 8);
  __chkstk_darwin(v60, v61);
  uint64_t v165 = (char *)&v149 - v62;
  uint64_t v236 = v54;
  uint64_t v237 = v58;
  uint64_t v162 = swift_getOpaqueTypeConformance2();
  v235[9] = v162;
  v235[10] = &protocol witness table for _FrameLayout;
  uint64_t v193 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v63 = swift_getWitnessTable();
  uint64_t v171 = v63;
  v235[8] = v214;
  uint64_t v64 = v215;
  uint64_t v172 = swift_getWitnessTable();
  uint64_t v236 = v60;
  uint64_t v237 = v64;
  uint64_t v238 = v63;
  v239 = (void *)v172;
  uint64_t v180 = &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>;
  uint64_t v178 = swift_getOpaqueTypeMetadata2();
  uint64_t v185 = *(void *)(v178 - 8);
  __chkstk_darwin(v178, v65);
  v216 = (char *)&v149 - v66;
  sub_100004A58(&qword_1001A60F0);
  uint64_t v182 = type metadata accessor for ModifiedContent();
  uint64_t v189 = *(void *)(v182 - 8);
  __chkstk_darwin(v182, v67);
  uint64_t v174 = (char *)&v149 - v68;
  sub_100004A58(&qword_1001A60F8);
  uint64_t v188 = type metadata accessor for ModifiedContent();
  uint64_t v191 = *(void *)(v188 - 8);
  __chkstk_darwin(v188, v188);
  uint64_t v183 = (char *)&v149 - v69;
  uint64_t v218 = type metadata accessor for ModifiedContent();
  uint64_t v190 = *(void *)(v218 - 8);
  uint64_t v71 = __chkstk_darwin(v218, v70);
  v201 = (char *)&v149 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = __chkstk_darwin(v71, v73);
  uint64_t v184 = (char *)&v149 - v75;
  __chkstk_darwin(v74, v76);
  uint64_t v187 = (char *)&v149 - v77;
  static Axis.Set.horizontal.getter();
  uint64_t v229 = a2;
  uint64_t v230 = v222;
  uint64_t v78 = v221;
  uint64_t v231 = v221;
  uint64_t v79 = v167;
  ScrollView.init(_:showsIndicators:content:)();
  static Edge.Set.horizontal.getter();
  uint64_t v80 = v217;
  sub_100027440();
  sub_100045B3C();
  swift_release();
  uint64_t v81 = v192;
  j___s7SwiftUI22ContentMarginPlacementV9automaticACvgZ();
  Swift::String v82 = v166;
  View.contentMargins(_:_:for:)();
  (*(void (**)(char *, uint64_t))(v194 + 8))(v81, v195);
  (*(void (**)(char *, uint64_t))(v181 + 8))(v79, v37);
  static ViewAlignedScrollTargetBehavior.LimitBehavior.automatic.getter();
  Swift::String v83 = v196;
  ViewAlignedScrollTargetBehavior.init(limitBehavior:)();
  uint64_t v85 = v159;
  uint64_t v84 = v160;
  uint64_t v86 = v161;
  View.scrollTargetBehavior<A>(_:)();
  (*(void (**)(char *, uint64_t))(v198 + 8))(v83, v84);
  (*(void (**)(char *, uint64_t))(v179 + 8))(v82, v86);
  uint64_t v87 = v213;
  uint64_t v88 = v80;
  sub_100027574(v80, (uint64_t (*)(uint64_t))&State.projectedValue.getter);
  uint64_t v89 = v154;
  uint64_t v90 = v156;
  uint64_t v91 = v220;
  View.scrollPosition<A>(id:anchor:)();
  (*(void (**)(char *, uint64_t))(v199 + 8))(v87, v200);
  uint64_t v92 = v91;
  (*(void (**)(char *, uint64_t))(v177 + 8))(v85, v90);
  uint64_t v93 = v88;
  sub_100027440();
  sub_100045B7C();
  swift_release();
  uint64_t v94 = v155;
  uint64_t v95 = v152;
  View.scrollDisabled(_:)();
  (*(void (**)(char *, uint64_t))(v176 + 8))(v89, v95);
  sub_100027440();
  sub_100045BB4();
  swift_release();
  static Alignment.center.getter();
  uint64_t v96 = v165;
  uint64_t v97 = v168;
  View.frame(width:height:alignment:)();
  (*(void (**)(char *, uint64_t))(v175 + 8))(v94, v97);
  uint64_t v98 = v202;
  sub_100027574(v93, (uint64_t (*)(uint64_t))&State.wrappedValue.getter);
  uint64_t v100 = v203;
  uint64_t v99 = v204;
  uint64_t v101 = v78;
  uint64_t v102 = v93;
  (*(void (**)(char *, uint64_t, uint64_t))(v204 + 16))(v203, v101, v93);
  uint64_t v103 = v99;
  unint64_t v104 = (*(unsigned __int8 *)(v99 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80);
  uint64_t v105 = swift_allocObject();
  uint64_t v106 = v222;
  *(void *)(v105 + 16) = v92;
  *(void *)(v105 + 24) = v106;
  (*(void (**)(unint64_t, char *, uint64_t))(v103 + 32))(v105 + v104, v100, v102);
  uint64_t v107 = v98;
  uint64_t v109 = (void *)v172;
  uint64_t v108 = v173;
  uint64_t v110 = v215;
  uint64_t v111 = v171;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v206 + 8))(v107, v110);
  uint64_t v112 = v108;
  (*(void (**)(char *, uint64_t))(v186 + 8))(v96, v108);
  static Alignment.center.getter();
  uint64_t v113 = v220;
  uint64_t v226 = v220;
  uint64_t v227 = v106;
  uint64_t v114 = v221;
  uint64_t v228 = v221;
  sub_10000570C(&qword_1001A6128);
  uint64_t v236 = v112;
  uint64_t v237 = v110;
  uint64_t v238 = v111;
  v239 = v109;
  uint64_t v115 = swift_getOpaqueTypeConformance2();
  sub_10002D71C();
  uint64_t v116 = v174;
  uint64_t v117 = v178;
  Swift::String v118 = v216;
  View.overlay<A>(alignment:content:)();
  (*(void (**)(char *, uint64_t))(v185 + 8))(v118, v117);
  static Alignment.center.getter();
  uint64_t v223 = v113;
  uint64_t v224 = v222;
  uint64_t v225 = v114;
  sub_10000570C(&qword_1001A6148);
  uint64_t v119 = sub_10000A780(&qword_1001A6150, &qword_1001A60F0);
  v235[6] = v115;
  v235[7] = v119;
  uint64_t v120 = v182;
  uint64_t v121 = swift_getWitnessTable();
  sub_10000A780(&qword_1001A6158, &qword_1001A6148);
  uint64_t v122 = v183;
  View.background<A>(alignment:content:)();
  (*(void (**)(char *, uint64_t))(v189 + 8))(v116, v120);
  static Edge.Set.bottom.getter();
  uint64_t v123 = sub_10000A780(qword_1001A6160, &qword_1001A60F8);
  v235[4] = v121;
  v235[5] = v123;
  uint64_t v124 = v188;
  uint64_t v125 = swift_getWitnessTable();
  uint64_t v126 = v184;
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v191 + 8))(v122, v124);
  v235[2] = v125;
  v235[3] = &protocol witness table for _PaddingLayout;
  uint64_t v127 = v218;
  uint64_t v128 = swift_getWitnessTable();
  uint64_t v129 = v187;
  uint64_t v215 = v128;
  sub_1001221F0(v126, v127);
  uint64_t v130 = v190;
  unint64_t v131 = *(char **)(v190 + 8);
  uint64_t v222 = v190 + 8;
  v216 = v131;
  ((void (*)(char *, uint64_t))v131)(v126, v127);
  uint64_t v132 = v217;
  sub_100027440();
  LOBYTE(v126) = sub_100045B7C();
  swift_release();
  if (v126)
  {
    uint64_t v133 = *(void *)(sub_100027440() + 112);
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v134 = (uint64_t)v213;
    sub_100027574(v132, (uint64_t (*)(uint64_t))&State.projectedValue.getter);
    uint64_t v135 = v150;
    sub_1000DBC50(v133, v134, v150);
    uint64_t v136 = v210;
    swift_getWitnessTable();
    uint64_t v137 = v151;
    sub_1001221F0(v135, v136);
    uint64_t v138 = v207;
    uint64_t v139 = *(void (**)(char *, uint64_t))(v207 + 8);
    v139(v135, v136);
    uint64_t v140 = (uint64_t)v209;
    sub_1001221F0(v137, v136);
    v139(v137, v136);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v138 + 56))(v140, 0, 1, v136);
  }
  else
  {
    uint64_t v140 = (uint64_t)v209;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v207 + 56))(v209, 1, 1, v210);
    swift_getWitnessTable();
  }
  uint64_t v141 = v208;
  sub_100123138(v140, v208);
  uint64_t v142 = *(void (**)(uint64_t, uint64_t))(v219 + 8);
  uint64_t v143 = v211;
  v142(v140, v211);
  v144 = *(void (**)(char *, char *, uint64_t))(v130 + 16);
  uint64_t v145 = v201;
  uint64_t v146 = v218;
  v144(v201, v129, v218);
  uint64_t v236 = (uint64_t)v145;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v219 + 16))(v140, v141, v143);
  uint64_t v237 = v140;
  v235[0] = v146;
  v235[1] = v143;
  uint64_t v233 = v215;
  uint64_t v232 = swift_getWitnessTable();
  uint64_t v234 = swift_getWitnessTable();
  sub_1001231A4((uint64_t)&v236, 2uLL, (uint64_t)v235);
  v142(v141, v143);
  uint64_t v147 = (uint64_t (*)(char *, uint64_t))v216;
  ((void (*)(char *, uint64_t))v216)(v129, v146);
  v142(v140, v143);
  return v147(v145, v146);
}

uint64_t sub_10002A4B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v29 = a3;
  uint64_t v30 = a1;
  uint64_t v31 = a4;
  uint64_t v28 = a2;
  uint64_t v6 = type metadata accessor for Array();
  uint64_t v7 = type metadata accessor for ScrollAsset();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = *(void *)(a3 + 8);
  uint64_t v36 = v6;
  uint64_t v37 = a2;
  uint64_t v38 = v7;
  uint64_t v39 = WitnessTable;
  uint64_t v40 = v9;
  type metadata accessor for ForEach();
  uint64_t v35 = sub_10002EE44(&qword_1001A60E8, (void (*)(uint64_t))type metadata accessor for ScrollAsset);
  v27[1] = swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for HStack();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)v27 - v13;
  uint64_t v15 = swift_getWitnessTable();
  uint64_t v36 = v10;
  uint64_t v37 = v15;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v17 = *(void *)(OpaqueTypeMetadata2 - 8);
  uint64_t v19 = __chkstk_darwin(OpaqueTypeMetadata2, v18);
  uint64_t v21 = (char *)v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v22);
  uint64_t v24 = (char *)v27 - v23;
  uint64_t v32 = v28;
  uint64_t v33 = v29;
  uint64_t v34 = v30;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  View.scrollTargetLayout(isEnabled:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  uint64_t v36 = v10;
  uint64_t v37 = v15;
  swift_getOpaqueTypeConformance2();
  sub_1001221F0(v21, OpaqueTypeMetadata2);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v17 + 8);
  v25(v21, OpaqueTypeMetadata2);
  sub_1001221F0(v24, OpaqueTypeMetadata2);
  return ((uint64_t (*)(char *, uint64_t))v25)(v24, OpaqueTypeMetadata2);
}

uint64_t sub_10002A7F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v37 = a4;
  uint64_t v7 = type metadata accessor for WatchFacesView();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v31 = *(void *)(v8 + 64);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)v29 - v10;
  uint64_t v12 = type metadata accessor for Array();
  uint64_t v35 = v12;
  uint64_t v13 = type metadata accessor for ScrollAsset();
  uint64_t v34 = v13;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v32 = *(void *)(a3 + 8);
  uint64_t v33 = WitnessTable;
  uint64_t v41 = v12;
  uint64_t v42 = a2;
  uint64_t v43 = v13;
  uint64_t v44 = WitnessTable;
  uint64_t v45 = v32;
  uint64_t v15 = type metadata accessor for ForEach();
  uint64_t v36 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15, v16);
  uint64_t v19 = (char *)v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v20);
  uint64_t v30 = (char *)v29 - v21;
  uint64_t v22 = *(void *)(sub_100027440() + 112);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v41 = v22;
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  v29[1] = swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  unint64_t v23 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = a2;
  *(void *)(v24 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v24 + v23, v11, v7);
  uint64_t v28 = sub_10002EE44(&qword_1001A60E8, (void (*)(uint64_t))type metadata accessor for ScrollAsset);
  ForEach<>.init(_:id:content:)();
  uint64_t v40 = v28;
  swift_getWitnessTable();
  uint64_t v25 = v30;
  sub_1001221F0(v19, v15);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v36 + 8);
  v26(v19, v15);
  sub_1001221F0(v25, v15);
  return ((uint64_t (*)(char *, uint64_t))v26)(v25, v15);
}

int *sub_10002AB54@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  type metadata accessor for WatchFacesView();
  sub_100027440();
  double v4 = sub_100045AB8();
  swift_release();
  sub_100027440();
  double v5 = sub_100045AE8();
  swift_release();
  sub_100027440();
  double v6 = sub_100045B0C();
  swift_release();
  unint64_t result = (int *)type metadata accessor for ScrollAsset();
  *(double *)(a3 + result[5]) = v4;
  *(double *)(a3 + result[6]) = v5;
  *(double *)(a3 + result[7]) = v6;
  return result;
}

uint64_t sub_10002AC50(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WatchFacesView();
  uint64_t v3 = sub_100027440();
  uint64_t v5 = *(void *)(v3 + 96);
  uint64_t v4 = *(void *)(v3 + 104);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v6 = *(void *)(a1 + *(int *)(v2 + 40));
  if (v6)
  {
    swift_retain();
    sub_100116F94(v5, v4, 8, 10, 27, 0, 3u, v6);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10002EE44((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10002AD5C@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for WatchFacesView();
  uint64_t v2 = sub_100027440();
  uint64_t v4 = *(void *)(v2 + 48);
  uint64_t v3 = *(void *)(v2 + 56);
  swift_bridgeObjectRetain();
  swift_release();
  sub_100027440();
  double v5 = sub_100045BB8();
  uint64_t result = swift_release();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  *(double *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

double sub_10002ADE8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Color.RGBColorSpace();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WatchFacesView();
  uint64_t v7 = sub_100027440();
  uint64_t v8 = *(void *)(v7 + 56);
  uint64_t v19 = *(void *)(v7 + 48);
  swift_bridgeObjectRetain();
  swift_release();
  sub_100027440();
  double v9 = sub_100045BB8();
  swift_release();
  uint64_t v10 = enum case for Color.RGBColorSpace.sRGBLinear(_:);
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v11(v6, enum case for Color.RGBColorSpace.sRGBLinear(_:), v2);
  uint64_t v12 = Color.init(_:white:opacity:)();
  v11(v6, v10, v2);
  uint64_t v13 = Color.init(_:white:opacity:)();
  sub_100027440();
  double v14 = sub_100045BDC();
  swift_release();
  sub_100027440();
  double v15 = sub_100045C0C();
  swift_release();
  sub_100027440();
  double v16 = sub_10004663C();
  swift_release();
  *(void *)a1 = v19;
  *(void *)(a1 + 8) = v8;
  *(double *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 32) = xmmword_100153F70;
  *(void *)(a1 + 48) = 0x4010000000000000;
  *(void *)(a1 + 56) = v13;
  double result = 10.0;
  *(_OWORD *)(a1 + 64) = xmmword_100153F80;
  *(_OWORD *)(a1 + 80) = xmmword_100153F90;
  *(double *)(a1 + 96) = v14;
  *(double *)(a1 + 104) = v15;
  *(double *)(a1 + 112) = v16;
  return result;
}

uint64_t sub_10002B02C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v28 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v27 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  double v14 = (char *)&v26 - v13;
  __chkstk_darwin(v12, v15);
  uint64_t v17 = (char *)&v26 - v16;
  uint64_t v18 = type metadata accessor for WatchFacesView();
  uint64_t v30 = a1;
  sub_100027574(v18, (uint64_t (*)(uint64_t))&State.wrappedValue.getter);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48);
  int v20 = v19(v17, 1, a2);
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  uint64_t result = v29(v17, v6);
  if (v20 == 1)
  {
    uint64_t v26 = v4;
    uint64_t v22 = *(void *)(sub_100027440() + 112);
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v31 = v22;
    type metadata accessor for Array();
    swift_getWitnessTable();
    Collection.first.getter();
    swift_bridgeObjectRelease();
    if (v19(v14, 1, a2) == 1)
    {
      return v29(v14, v6);
    }
    else
    {
      uint64_t v23 = v26;
      uint64_t v24 = v28;
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v28, v14, a2);
      uint64_t v25 = (uint64_t)v27;
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v27, v24, a2);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v23 + 56))(v25, 0, 1, a2);
      sub_10002D5E8(v25);
      v29((char *)v25, v6);
      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v24, a2);
    }
  }
  return result;
}

uint64_t sub_10002B388@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(*(void *)a2 + 80) - 8) + 32))(a3, a1, *(void *)(*(void *)a2 + 80));
  uint64_t v5 = type metadata accessor for SelectAssetButton();
  *(void *)(a3 + *(int *)(v5 + 36)) = a2;
  uint64_t v6 = (uint64_t *)(a3 + *(int *)(v5 + 40));
  type metadata accessor for RemoteViewConfiguration();
  sub_10002EE44((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  uint64_t result = EnvironmentObject.init()();
  uint64_t *v6 = result;
  v6[1] = v8;
  return result;
}

uint64_t sub_10002B480@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  swift_getWitnessTable();
  Bindable<A>.init(wrappedValue:)();
  uint64_t v4 = type metadata accessor for WatchFacesView();
  sub_100027480(a1);
  uint64_t v5 = (uint64_t *)(a2 + *(int *)(v4 + 40));
  type metadata accessor for RemoteViewConfiguration();
  sub_10002EE44((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  uint64_t result = EnvironmentObject.init()();
  *uint64_t v5 = result;
  v5[1] = v7;
  return result;
}

uint64_t type metadata accessor for WatchFacesView()
{
  return sub_10000B72C();
}

uint64_t sub_10002B5D0()
{
  type metadata accessor for WatchFacesViewModel();
  uint64_t result = type metadata accessor for Bindable();
  if (v1 <= 0x3F)
  {
    type metadata accessor for Optional();
    uint64_t result = type metadata accessor for State();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *sub_10002B6C4(void *a1, char *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *(void *)a2;
    *a1 = *(void *)a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = *(void *)(a3 + 16);
    type metadata accessor for WatchFacesViewModel();
    uint64_t v8 = type metadata accessor for Bindable();
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v4, a2, v8);
    uint64_t v9 = *(int *)(a3 + 36);
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = &a2[v9];
    uint64_t v12 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&a2[v9], 1, v7))
    {
      uint64_t v13 = type metadata accessor for Optional();
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v10, v11, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v7);
    }
    type metadata accessor for Optional();
    uint64_t v15 = type metadata accessor for State();
    *(void *)&v10[*(int *)(v15 + 28)] = *(void *)&v11[*(int *)(v15 + 28)];
    uint64_t v16 = *(int *)(a3 + 40);
    uint64_t v17 = (void *)((char *)v4 + v16);
    uint64_t v18 = &a2[v16];
    uint64_t v20 = *(void *)v18;
    uint64_t v19 = *((void *)v18 + 1);
    void *v17 = v20;
    v17[1] = v19;
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_10002B8B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  type metadata accessor for WatchFacesViewModel();
  uint64_t v5 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 36);
  uint64_t v7 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v6, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v4);
  }
  type metadata accessor for Optional();
  type metadata accessor for State();
  swift_release();

  return swift_release();
}

uint64_t sub_10002B9E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  type metadata accessor for WatchFacesViewModel();
  uint64_t v7 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a2 + v8, 1, v6))
  {
    uint64_t v12 = type metadata accessor for Optional();
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v9, v10, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v6);
  }
  type metadata accessor for Optional();
  uint64_t v13 = type metadata accessor for State();
  *(void *)&v9[*(int *)(v13 + 28)] = *(void *)&v10[*(int *)(v13 + 28)];
  uint64_t v14 = *(int *)(a3 + 40);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (uint64_t *)(a2 + v14);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  *uint64_t v15 = v18;
  v15[1] = v17;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_10002BB84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  type metadata accessor for WatchFacesViewModel();
  uint64_t v7 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = *(void *)(v6 - 8);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(a1 + v8, 1, v6);
  int v14 = v12((uint64_t)v10, 1, v6);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v9, v10, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v6);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = type metadata accessor for Optional();
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v9, v10, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v6);
LABEL_7:
  type metadata accessor for Optional();
  uint64_t v16 = type metadata accessor for State();
  *(void *)&v9[*(int *)(v16 + 28)] = *(void *)&v10[*(int *)(v16 + 28)];
  swift_retain();
  swift_release();
  uint64_t v17 = *(int *)(a3 + 40);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  swift_retain();
  swift_release();
  *(void *)(v18 + 8) = *(void *)(v19 + 8);
  return a1;
}

uint64_t sub_10002BDA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  type metadata accessor for WatchFacesViewModel();
  uint64_t v7 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a2 + v8, 1, v6))
  {
    uint64_t v12 = type metadata accessor for Optional();
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v9, v10, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v6);
  }
  type metadata accessor for Optional();
  uint64_t v13 = type metadata accessor for State();
  *(void *)&v9[*(int *)(v13 + 28)] = *(void *)&v10[*(int *)(v13 + 28)];
  *(_OWORD *)(a1 + *(int *)(a3 + 40)) = *(_OWORD *)(a2 + *(int *)(a3 + 40));
  return a1;
}

uint64_t sub_10002BF38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  type metadata accessor for WatchFacesViewModel();
  uint64_t v7 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = *(void *)(v6 - 8);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(a1 + v8, 1, v6);
  int v14 = v12((uint64_t)v10, 1, v6);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v9, v10, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v6);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = type metadata accessor for Optional();
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v9, v10, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v6);
LABEL_7:
  type metadata accessor for Optional();
  uint64_t v16 = type metadata accessor for State();
  *(void *)&v9[*(int *)(v16 + 28)] = *(void *)&v10[*(int *)(v16 + 28)];
  swift_release();
  uint64_t v17 = *(int *)(a3 + 40);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = (void *)(a2 + v17);
  *(void *)(a1 + v17) = *v19;
  swift_release();
  *(void *)(v18 + 8) = v19[1];
  return a1;
}

uint64_t sub_10002C14C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002C160);
}

uint64_t sub_10002C160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for WatchFacesViewModel();
  uint64_t v6 = type metadata accessor for Bindable();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  type metadata accessor for Optional();
  uint64_t v11 = type metadata accessor for State();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 36);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 40));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  int v15 = v14 - 1;
  if (v15 < 0) {
    int v15 = -1;
  }
  return (v15 + 1);
}

uint64_t sub_10002C2A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002C2B8);
}

uint64_t sub_10002C2B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for WatchFacesViewModel();
  uint64_t v8 = type metadata accessor for Bindable();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    type metadata accessor for Optional();
    uint64_t result = type metadata accessor for State();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 40)) = a2;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 36);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_10002C3F8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for SelectAssetButton()
{
  return sub_10000B72C();
}

uint64_t sub_10002C458@<X0>(uint64_t a1@<X8>)
{
  return sub_100027EE0(*(char **)(v1 + 32), *(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

unint64_t sub_10002C464()
{
  unint64_t result = qword_1001A6110;
  if (!qword_1001A6110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6110);
  }
  return result;
}

uint64_t sub_10002C4B8@<X0>(uint64_t a1@<X8>)
{
  return sub_100028E78(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10002C4C8()
{
  return sub_10002EA00((uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WatchFacesView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10002B02C);
}

uint64_t sub_10002C4F4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10002C56C()
{
  unint64_t result = qword_1001A6120;
  if (!qword_1001A6120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6120);
  }
  return result;
}

uint64_t sub_10002C5C0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10002C604@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v61 = a2;
  uint64_t v4 = type metadata accessor for PlainButtonStyle();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v59 = v4;
  uint64_t v60 = v5;
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v54 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a1 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v7, v11);
  uint64_t v55 = sub_10000570C(&qword_1001A61E8);
  uint64_t v57 = *(void *)(v55 - 8);
  __chkstk_darwin(v55, v12);
  uint64_t v52 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = sub_10000570C(&qword_1001A61F0);
  uint64_t v56 = *(void *)(v58 - 8);
  __chkstk_darwin(v58, v14);
  uint64_t v53 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000570C(&qword_1001A61F8);
  uint64_t v17 = v16 - 8;
  __chkstk_darwin(v16, v18);
  uint64_t v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a1);
  unint64_t v21 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v22 = swift_allocObject();
  uint64_t v23 = *(void *)(a1 + 16);
  uint64_t v24 = *(void *)(a1 + 24);
  *(void *)(v22 + 16) = v23;
  *(void *)(v22 + 24) = v24;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v22 + v21, (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  uint64_t v62 = v23;
  uint64_t v63 = v24;
  uint64_t v64 = v2;
  sub_10000570C(&qword_1001A6200);
  sub_10002EAAC();
  uint64_t v25 = v52;
  Button.init(action:label:)();
  uint64_t v26 = v54;
  PlainButtonStyle.init()();
  sub_10000A780(&qword_1001A62B0, &qword_1001A61E8);
  sub_10002EE44(&qword_1001A62B8, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
  uint64_t v27 = v53;
  uint64_t v28 = v55;
  uint64_t v29 = v59;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v26, v29);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v25, v28);
  LOBYTE(a1) = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v38 = v56;
  uint64_t v39 = v58;
  (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v20, v27, v58);
  uint64_t v40 = &v20[*(int *)(v17 + 44)];
  *uint64_t v40 = a1;
  *((void *)v40 + 1) = v31;
  *((void *)v40 + 2) = v33;
  *((void *)v40 + 3) = v35;
  *((void *)v40 + 4) = v37;
  v40[40] = 0;
  (*(void (**)(char *, uint64_t))(v38 + 8))(v27, v39);
  LOBYTE(a1) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  uint64_t v49 = v61;
  sub_10000A428((uint64_t)v20, v61, &qword_1001A61F8);
  uint64_t v50 = v49 + *(int *)(sub_10000570C(&qword_1001A62C0) + 36);
  *(unsigned char *)uint64_t v50 = a1;
  *(void *)(v50 + 8) = v42;
  *(void *)(v50 + 16) = v44;
  *(void *)(v50 + 24) = v46;
  *(void *)(v50 + 32) = v48;
  *(unsigned char *)(v50 + 40) = 0;
  return sub_10000ACE0((uint64_t)v20, &qword_1001A61F8);
}

uint64_t sub_10002CB0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SelectAssetButton();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = sub_10000570C(&qword_1001A95D0);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  type metadata accessor for MainActor();
  uint64_t v16 = static MainActor.shared.getter();
  unint64_t v17 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = (char *)swift_allocObject();
  *((void *)v18 + 2) = v16;
  *((void *)v18 + 3) = &protocol witness table for MainActor;
  *((void *)v18 + 4) = a2;
  *((void *)v18 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v18[v17], v10, v6);
  sub_100061C1C((uint64_t)v14, (uint64_t)&unk_1001A62D0, (uint64_t)v18);
  return swift_release();
}

uint64_t sub_10002CD00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v6[5] = type metadata accessor for MainActor();
  v6[6] = static MainActor.shared.getter();
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1001A6A78 + dword_1001A6A78);
  uint64_t v10 = (void *)swift_task_alloc();
  v6[7] = v10;
  void *v10 = v6;
  v10[1] = sub_10002CDE4;
  return v12(a4, a5, a6);
}

uint64_t sub_10002CDE4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v5 = v4;
    uint64_t v6 = sub_10001AC7C;
  }
  else
  {
    uint64_t v7 = type metadata accessor for SelectAssetButton();
    *(void *)(v2 + 72) = v7;
    *(_DWORD *)(v2 + 80) = *(_DWORD *)(v7 + 36);
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v5 = v8;
    uint64_t v6 = sub_10002CF7C;
  }
  return _swift_task_switch(v6, v3, v5);
}

uint64_t sub_10002CF7C()
{
  uint64_t v1 = *(int *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 16);
  swift_release();
  uint64_t v4 = *(void *)(v3 + v1);
  uint64_t v5 = *(void *)(v4 + 104);
  uint64_t v6 = *(void *)(v3 + *(int *)(v2 + 40));
  if (v6)
  {
    uint64_t v7 = *(void *)(v4 + 96);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_100116F94(v7, v5, 8, 10, 7, 0, 3u, v6);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10002EE44((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    swift_bridgeObjectRetain();
    return EnvironmentObject.error()();
  }
}

uint64_t sub_10002D0D8@<X0>(void *a1@<X8>)
{
  uint64_t v67 = a1;
  uint64_t v66 = sub_10000570C(&qword_1001A62A8) - 8;
  __chkstk_darwin(v66, v1);
  uint64_t v65 = &v50[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v3 = type metadata accessor for RoundedRectangle();
  uint64_t v4 = v3 - 8;
  __chkstk_darwin(v3, v5);
  uint64_t v7 = &v50[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v64 = static VerticalAlignment.center.getter();
  sub_10002D47C((uint64_t)v74);
  long long v62 = v74[0];
  uint64_t v61 = *(void *)&v74[1];
  char v8 = BYTE8(v74[1]);
  uint64_t v63 = *(void *)&v74[3];
  char v9 = BYTE8(v74[3]);
  long long v60 = v74[2];
  static Font.body.getter();
  static Font.Weight.semibold.getter();
  uint64_t v59 = Font.weight(_:)();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v57 = static Color.white.getter();
  int v56 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v54 = v11;
  uint64_t v55 = v10;
  uint64_t v52 = v13;
  uint64_t v53 = v12;
  char v71 = 0;
  char v70 = v8;
  char v69 = v9;
  char v68 = 0;
  int v51 = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  char v22 = v71;
  char v23 = v70;
  char v24 = v69;
  char v25 = v68;
  char v72 = 0;
  char v26 = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  char v35 = v72;
  char v73 = 0;
  uint64_t v36 = static Color.blue.getter();
  char v37 = static Edge.Set.all.getter();
  *(void *)&v74[0] = v64;
  *((void *)&v74[0] + 1) = 0x4010000000000000;
  LOBYTE(v74[1]) = v22;
  *(_OWORD *)((char *)&v74[1] + 8) = v62;
  *((void *)&v74[2] + 1) = v61;
  LOBYTE(v74[3]) = v23;
  *(_OWORD *)((char *)&v74[3] + 8) = v60;
  *((void *)&v74[4] + 1) = v63;
  LOBYTE(v74[5]) = v24;
  *((void *)&v74[5] + 1) = KeyPath;
  *(void *)&v74[6] = v59;
  *((void *)&v74[6] + 1) = v57;
  LOBYTE(v74[7]) = v56;
  *((void *)&v74[7] + 1) = v55;
  *(void *)&v74[8] = v54;
  *((void *)&v74[8] + 1) = v53;
  *(void *)&v74[9] = v52;
  BYTE8(v74[9]) = v25;
  LOBYTE(v74[10]) = v51;
  *((void *)&v74[10] + 1) = v15;
  *(void *)&v74[11] = v17;
  *((void *)&v74[11] + 1) = v19;
  *(void *)&v74[12] = v21;
  BYTE8(v74[12]) = v35;
  LOBYTE(v74[13]) = v26;
  *((void *)&v74[13] + 1) = v28;
  *(void *)&v74[14] = v30;
  *((void *)&v74[14] + 1) = v32;
  *(void *)&v74[15] = v34;
  BYTE8(v74[15]) = v73;
  *(void *)&v74[16] = v36;
  BYTE8(v74[16]) = v37;
  uint64_t v38 = (char *)v7 + *(int *)(v4 + 28);
  uint64_t v39 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v40 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 104))(v38, v39, v40);
  __asm { FMOV            V0.2D, #12.0 }
  *uint64_t v7 = _Q0;
  uint64_t v46 = v65;
  sub_1000243EC((uint64_t)v7, (uint64_t)v65);
  *(_WORD *)&v46[*(int *)(v66 + 44)] = 256;
  uint64_t v47 = sub_10000570C(&qword_1001A6200);
  uint64_t v48 = v67;
  sub_10000A428((uint64_t)v46, (uint64_t)v67 + *(int *)(v47 + 36), &qword_1001A62A8);
  memcpy(v48, v74, 0x109uLL);
  sub_10002EE94((uint64_t)v74);
  sub_10000ACE0((uint64_t)v46, &qword_1001A62A8);
  sub_100024450((uint64_t)v7);
  return sub_10002EF38((uint64_t)v74);
}

uint64_t sub_10002D47C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = Image.init(systemName:)();
  type metadata accessor for SelectAssetButton();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v3 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  char v9 = v8 & 1;
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = KeyPath;
  *(void *)(a1 + 48) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  swift_retain();
  sub_10000FCD4(v3, v5, v9);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10000FCC4(v3, v5, v9);
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10002D5E8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Optional();
  __chkstk_darwin(v2, v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v7 - v4, a1, v2);
  type metadata accessor for State();
  return State.wrappedValue.setter();
}

uint64_t sub_10002D6D4@<X0>(uint64_t a1@<X8>)
{
  return sub_10002A4B4(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10002D6E4()
{
  return sub_10002EA00((uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WatchFacesView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10002AC50);
}

uint64_t sub_10002D710@<X0>(uint64_t a1@<X8>)
{
  return sub_10002AD5C(a1);
}

unint64_t sub_10002D71C()
{
  unint64_t result = qword_1001A6130;
  if (!qword_1001A6130)
  {
    sub_100004A58(&qword_1001A6128);
    sub_10002D798();
    sub_10002D7EC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6130);
  }
  return result;
}

unint64_t sub_10002D798()
{
  unint64_t result = qword_1001A6138;
  if (!qword_1001A6138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6138);
  }
  return result;
}

unint64_t sub_10002D7EC()
{
  unint64_t result = qword_1001A6140;
  if (!qword_1001A6140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6140);
  }
  return result;
}

double sub_10002D840@<D0>(uint64_t a1@<X8>)
{
  return sub_10002ADE8(a1);
}

uint64_t sub_10002D84C@<X0>(uint64_t a1@<X8>)
{
  return sub_10002A7F8(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10002D85C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for WatchFacesView();
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80));
  type metadata accessor for WatchFacesViewModel();
  uint64_t v4 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v3 + *(int *)(v2 + 36);
  uint64_t v6 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v5, 1, v1)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v1);
  }
  type metadata accessor for Optional();
  type metadata accessor for State();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

int *sub_10002DA14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  type metadata accessor for WatchFacesView();

  return sub_10002AB54(v3, v4, a1);
}

uint64_t sub_10002DAB0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_10002DB58(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    void *v10 = *v11;
    uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v12 = *v13;
    v12[1] = v13[1];
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_10002DC78(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  swift_release();

  return swift_release();
}

uint64_t sub_10002DCF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  char v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_10002DD94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *int v7 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  uint64_t v10 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v9 &= 0xFFFFFFFFFFFFFFF8;
  void *v10 = *(void *)v9;
  swift_retain();
  swift_release();
  v10[1] = *(void *)(v9 + 8);
  return a1;
}

uint64_t sub_10002DE48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  *(_OWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_10002DED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  swift_release();
  unint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v9 = *v10;
  swift_release();
  v9[1] = v10[1];
  return a1;
}

uint64_t sub_10002DF78(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x10002E0CCLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_10002E0E0(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v20 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v20 = a2 - 1;
              }
              *uint64_t v19 = v20;
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x10002E2D0);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t sub_10002E2F8()
{
  return swift_getWitnessTable();
}

uint64_t sub_10002E894()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10002E8D8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for SelectAssetButton() - 8) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + ((v2 + 32) & ~v2), v1);
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10002E9D4()
{
  return sub_10002EA00((uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SelectAssetButton, sub_10002CB0C);
}

uint64_t sub_10002EA00(uint64_t (*a1)(void, uint64_t, uint64_t), uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v5 = *(void *)(a1(0, v3, v4) - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return a2(v6, v3, v4);
}

uint64_t sub_10002EAA0@<X0>(void *a1@<X8>)
{
  return sub_10002D0D8(a1);
}

unint64_t sub_10002EAAC()
{
  unint64_t result = qword_1001A6208;
  if (!qword_1001A6208)
  {
    sub_100004A58(&qword_1001A6200);
    sub_10002EB4C();
    sub_10000A780(&qword_1001A62A0, &qword_1001A62A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6208);
  }
  return result;
}

unint64_t sub_10002EB4C()
{
  unint64_t result = qword_1001A6210;
  if (!qword_1001A6210)
  {
    sub_100004A58(&qword_1001A6218);
    sub_10002EC38(&qword_1001A6220, &qword_1001A6228, (void (*)(void))sub_10002EC10);
    sub_10000A780(&qword_1001A6290, &qword_1001A6298);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6210);
  }
  return result;
}

uint64_t sub_10002EC10()
{
  return sub_10002EC38(&qword_1001A6230, &qword_1001A6238, (void (*)(void))sub_10002ECB8);
}

uint64_t sub_10002EC38(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002ECB8()
{
  return sub_10002EC38(&qword_1001A6240, &qword_1001A6248, (void (*)(void))sub_10002ECE0);
}

unint64_t sub_10002ECE0()
{
  unint64_t result = qword_1001A6250;
  if (!qword_1001A6250)
  {
    sub_100004A58(&qword_1001A6258);
    sub_10002ED80();
    sub_10000A780(&qword_1001A5E98, &qword_1001A5EA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6250);
  }
  return result;
}

unint64_t sub_10002ED80()
{
  unint64_t result = qword_1001A6260;
  if (!qword_1001A6260)
  {
    sub_100004A58(&qword_1001A6268);
    sub_10000A780(&qword_1001A6270, &qword_1001A6278);
    sub_10000A780(&qword_1001A6280, &qword_1001A6288);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6260);
  }
  return result;
}

uint64_t sub_10002EE44(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002EE94(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  char v4 = *(unsigned char *)(a1 + 48);
  swift_retain();
  sub_10000FCD4(v2, v3, v4);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_10002EF38(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  char v4 = *(unsigned char *)(a1 + 48);
  swift_release();
  sub_10000FCC4(v2, v3, v4);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_10002EFE4()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for SelectAssetButton() - 8) + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v3, v1);
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10002F0E8(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = *(void *)(type metadata accessor for SelectAssetButton() - 8);
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = (uint64_t)v1 + ((*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  unint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_100009854;
  return sub_10002CD00(a1, v7, v8, v9, v4, v5);
}

uint64_t sub_10002F1F0()
{
  return sub_10002EC38(&qword_1001A62D8, &qword_1001A62C0, (void (*)(void))sub_10002F22C);
}

unint64_t sub_10002F22C()
{
  unint64_t result = qword_1001A62E0;
  if (!qword_1001A62E0)
  {
    sub_100004A58(&qword_1001A61F8);
    sub_100004A58(&qword_1001A61E8);
    type metadata accessor for PlainButtonStyle();
    sub_10000A780(&qword_1001A62B0, &qword_1001A61E8);
    sub_10002EE44(&qword_1001A62B8, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A62E0);
  }
  return result;
}

uint64_t sub_10002F350()
{
  return sub_1000C3B80();
}

uint64_t sub_10002F388@<X0>(uint64_t a1@<X8>)
{
  uint64_t v187 = a1;
  uint64_t v150 = type metadata accessor for TaskPriority();
  uint64_t v149 = *(void *)(v150 - 8);
  __chkstk_darwin(v150, v2);
  uint64_t v148 = (char *)&v137 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = sub_10000570C(&qword_1001A5728);
  uint64_t v146 = *(void *)(v147 - 8);
  __chkstk_darwin(v147, v4);
  uint64_t v145 = (char *)&v137 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v162 = sub_10000570C(&qword_1001A5730);
  uint64_t v7 = __chkstk_darwin(v162, v6);
  v144 = (char *)&v137 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  uint64_t v151 = (uint64_t)&v137 - v10;
  uint64_t v160 = sub_10000570C(&qword_1001A62E8);
  __chkstk_darwin(v160, v11);
  uint64_t v161 = (uint64_t)&v137 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v186 = sub_10000570C(&qword_1001A62F0);
  __chkstk_darwin(v186, v13);
  uint64_t v163 = (char *)&v137 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v154 = type metadata accessor for ErrorView();
  uint64_t v16 = __chkstk_darwin(v154, v15);
  uint64_t v155 = (uint64_t *)((char *)&v137 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16, v18);
  uint64_t v157 = (uint64_t)&v137 - v19;
  uint64_t v159 = sub_10000570C(&qword_1001A5738);
  uint64_t v21 = __chkstk_darwin(v159, v20);
  uint64_t v156 = (uint64_t)&v137 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v23);
  uint64_t v158 = (uint64_t)&v137 - v24;
  uint64_t v176 = sub_10000570C(&qword_1001A62F8);
  uint64_t v26 = __chkstk_darwin(v176, v25);
  uint64_t v167 = (uint64_t (**)())((char *)&v137 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v26, v28);
  uint64_t v168 = (uint64_t)&v137 - v29;
  uint64_t v183 = sub_10000570C(&qword_1001A6300);
  __chkstk_darwin(v183, v30);
  uint64_t v185 = (uint64_t)&v137 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v172 = sub_10000570C(&qword_1001A6308);
  __chkstk_darwin(v172, v32);
  uint64_t v174 = (uint64_t)&v137 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v184 = sub_10000570C(&qword_1001A6310);
  __chkstk_darwin(v184, v34);
  uint64_t v175 = (char *)&v137 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v173 = sub_10000570C(&qword_1001A6318);
  uint64_t v37 = __chkstk_darwin(v173, v36);
  uint64_t v165 = (char *)&v137 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37, v39);
  uint64_t v153 = (uint64_t)&v137 - v40;
  uint64_t v41 = sub_10000570C(&qword_1001A5488);
  __chkstk_darwin(v41 - 8, v42);
  uint64_t v166 = (char *)&v137 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v182 = type metadata accessor for Artist();
  uint64_t v171 = *(void *)(v182 - 8);
  uint64_t v44 = *(void *)(v171 + 64);
  uint64_t v46 = __chkstk_darwin(v182, v45);
  uint64_t v164 = (char *)&v137 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46, v47);
  v170 = (char *)&v137 - v48;
  uint64_t v49 = sub_10000570C(&qword_1001A6320);
  __chkstk_darwin(v49 - 8, v50);
  uint64_t v52 = (char *)&v137 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_10000570C(&qword_1001A6328);
  uint64_t v188 = *(void *)(v53 - 8);
  uint64_t v54 = *(void *)(v188 + 64);
  uint64_t v56 = __chkstk_darwin(v53, v55);
  __chkstk_darwin(v56, v57);
  uint64_t v59 = (char *)&v137 - v58;
  uint64_t v61 = v1[2];
  uint64_t v60 = v1[3];
  uint64_t v169 = v1;
  int v62 = *((unsigned __int8 *)v1 + 32);
  uint64_t v63 = type metadata accessor for ArtistController();
  uint64_t v64 = sub_100034718(&qword_1001A6330, (void (*)(uint64_t))type metadata accessor for ArtistController);
  uint64_t v179 = v61;
  uint64_t v180 = v60;
  LODWORD(v181) = v62;
  uint64_t v177 = v64;
  uint64_t v178 = v63;
  StateObject.wrappedValue.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  uint64_t v65 = v188;
  swift_release();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v52, 1, v53) == 1)
  {
    sub_10000ACE0((uint64_t)v52, &qword_1001A6320);
  }
  else
  {
    uint64_t v66 = (uint64_t)v166;
    uint64_t v140 = v54;
    uint64_t v141 = (char *)&v137 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v142 = v44;
    uint64_t v67 = v170;
    uint64_t v68 = v171;
    uint64_t v138 = *(void (**)(char *, char *, uint64_t))(v65 + 32);
    v138(v59, v52, v53);
    uint64_t v69 = sub_10000A780(&qword_1001A6368, &qword_1001A6328);
    uint64_t v70 = (*(uint64_t (**)(uint64_t, uint64_t))(v69 + 40))(v53, v69);
    uint64_t v71 = *(void *)(v70 + 16);
    uint64_t v143 = v53;
    uint64_t v152 = v59;
    uint64_t v139 = v65 + 32;
    uint64_t v72 = v65;
    if (v71)
    {
      uint64_t v73 = v68;
      uint64_t v74 = v182;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v68 + 16))(v66, v70 + ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80)), v182);
      uint64_t v75 = 0;
    }
    else
    {
      uint64_t v75 = 1;
      uint64_t v74 = v182;
      uint64_t v73 = v68;
    }
    uint64_t v76 = (uint64_t)v165;
    uint64_t v77 = v164;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56))(v66, v75, 1, v74);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v66, 1, v74) != 1)
    {
      uint64_t v78 = v66;
      uint64_t v79 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 32);
      v79(v67, v78, v74);
      uint64_t v80 = *v169;
      uint64_t v81 = v169[1];
      if (v80 == Artist.id.getter() && v81 == v82)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v83 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v83 & 1) == 0)
        {
          (*(void (**)(char *, uint64_t))(v73 + 8))(v67, v182);
          (*(void (**)(char *, uint64_t))(v72 + 8))(v152, v143);
          goto LABEL_14;
        }
      }
      uint64_t v84 = *(void (**)(char *, char *))(v73 + 16);
      uint64_t v85 = v73;
      uint64_t v181 = (void (*)(unint64_t, char *, uint64_t))v79;
      uint64_t v86 = v182;
      v84(v77, v67);
      uint64_t v87 = v141;
      uint64_t v88 = v77;
      uint64_t v89 = v143;
      (*(void (**)(char *, char *))(v72 + 16))(v141, v152);
      unint64_t v90 = (*(unsigned __int8 *)(v85 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80);
      unint64_t v91 = (v142 + *(unsigned __int8 *)(v72 + 80) + v90) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
      uint64_t v92 = swift_allocObject();
      v181(v92 + v90, v88, v86);
      v138((char *)(v92 + v91), v87, v89);
      *(void *)uint64_t v76 = sub_1000328A8;
      *(void *)(v76 + 8) = v92;
      *(unsigned char *)(v76 + 16) = 0;
      sub_10000570C(&qword_1001A5448);
      *(unsigned char *)(swift_allocObject() + 16) = 0;
      sub_10000A780(&qword_1001A5450, &qword_1001A5448);
      *(void *)(v76 + 24) = ObservedObject.init(wrappedValue:)();
      *(void *)(v76 + 32) = v93;
      type metadata accessor for RemoteViewConfiguration();
      sub_100034718((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
      *(void *)(v76 + 40) = EnvironmentObject.init()();
      *(void *)(v76 + 48) = v94;
      uint64_t v95 = (uint64_t *)(v76 + *(int *)(v173 + 60));
      *uint64_t v95 = swift_getKeyPath();
      sub_10000570C(&qword_1001A5460);
      swift_storeEnumTagMultiPayload();
      uint64_t v96 = v153;
      sub_10000A3C4(v76, v153, &qword_1001A6318);
      sub_10000A428(v96, v174, &qword_1001A6318);
      swift_storeEnumTagMultiPayload();
      sub_10000A780(&qword_1001A6350, &qword_1001A6318);
      sub_10000A780(&qword_1001A6358, &qword_1001A62F8);
      uint64_t v97 = (uint64_t)v175;
      _ConditionalContent<>.init(storage:)();
      sub_10000A428(v97, v185, &qword_1001A6310);
      swift_storeEnumTagMultiPayload();
      sub_1000325B8();
      sub_100032678();
      _ConditionalContent<>.init(storage:)();
      sub_10000ACE0(v97, &qword_1001A6310);
      sub_10000ACE0(v96, &qword_1001A6318);
      (*(void (**)(char *, uint64_t))(v171 + 8))(v170, v182);
      return (*(uint64_t (**)(char *, uint64_t))(v188 + 8))(v152, v89);
    }
    (*(void (**)(char *, uint64_t))(v72 + 8))(v152, v143);
    sub_10000ACE0(v66, &qword_1001A5488);
  }
LABEL_14:
  StateObject.wrappedValue.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v99 = v190;
  if ((void)v190)
  {
    uint64_t v100 = (uint64_t)v167;
    *uint64_t v167 = sub_10003274C;
    *(void *)(v100 + 8) = v99;
    *(unsigned char *)(v100 + 16) = 0;
    sub_10000570C(&qword_1001A5448);
    *(unsigned char *)(swift_allocObject() + 16) = 0;
    sub_10000A780(&qword_1001A5450, &qword_1001A5448);
    swift_retain();
    *(void *)(v100 + 24) = ObservedObject.init(wrappedValue:)();
    *(void *)(v100 + 32) = v101;
    type metadata accessor for RemoteViewConfiguration();
    sub_100034718((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    *(void *)(v100 + 40) = EnvironmentObject.init()();
    *(void *)(v100 + 48) = v102;
    uint64_t v103 = (uint64_t *)(v100 + *(int *)(v176 + 60));
    *uint64_t v103 = swift_getKeyPath();
    sub_10000570C(&qword_1001A5460);
    swift_storeEnumTagMultiPayload();
    uint64_t v104 = v168;
    sub_10000A3C4(v100, v168, &qword_1001A62F8);
    sub_10000A428(v104, v174, &qword_1001A62F8);
    swift_storeEnumTagMultiPayload();
    sub_10000A780(&qword_1001A6350, &qword_1001A6318);
    sub_10000A780(&qword_1001A6358, &qword_1001A62F8);
    uint64_t v105 = (uint64_t)v175;
    _ConditionalContent<>.init(storage:)();
    sub_10000A428(v105, v185, &qword_1001A6310);
    swift_storeEnumTagMultiPayload();
    sub_1000325B8();
    sub_100032678();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    sub_10000ACE0(v105, &qword_1001A6310);
    uint64_t v106 = v104;
    uint64_t v107 = &qword_1001A62F8;
  }
  else
  {
    StateObject.wrappedValue.getter();
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v108 = v190;
    swift_errorRelease();
    if (v108)
    {
      uint64_t KeyPath = swift_getKeyPath();
      uint64_t v110 = v155;
      *uint64_t v155 = KeyPath;
      sub_10000570C(&qword_1001A5460);
      swift_storeEnumTagMultiPayload();
      uint64_t v111 = (uint64_t *)((char *)v110 + *(int *)(v154 + 20));
      type metadata accessor for RemoteViewConfiguration();
      sub_100034718((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
      *uint64_t v111 = EnvironmentObject.init()();
      v111[1] = v112;
      uint64_t v113 = (uint64_t)v110;
      uint64_t v114 = v157;
      sub_100012D14(v113, v157);
      uint64_t v115 = v169;
      long long v116 = *(_OWORD *)v169;
      long long v189 = *(_OWORD *)(v169 + 5);
      long long v190 = v116;
      uint64_t v117 = swift_allocObject();
      long long v118 = *((_OWORD *)v115 + 1);
      *(_OWORD *)(v117 + 16) = *(_OWORD *)v115;
      *(_OWORD *)(v117 + 32) = v118;
      *(_OWORD *)(v117 + 48) = *((_OWORD *)v115 + 2);
      *(void *)(v117 + 64) = v115[6];
      uint64_t v119 = v156;
      sub_1000344B4(v114, v156, (uint64_t (*)(void))type metadata accessor for ErrorView);
      uint64_t v120 = (uint64_t (**)())(v119 + *(int *)(v159 + 36));
      *uint64_t v120 = sub_100032744;
      v120[1] = (uint64_t (*)())v117;
      v120[2] = 0;
      v120[3] = 0;
      sub_100012A58((uint64_t)&v190);
      sub_1000126FC();
      sub_100012A84((uint64_t)&v189);
      sub_10003451C(v114, (uint64_t (*)(void))type metadata accessor for ErrorView);
      uint64_t v121 = &qword_1001A5738;
      uint64_t v122 = v158;
      sub_10000A3C4(v119, v158, &qword_1001A5738);
      sub_10000A428(v122, v161, &qword_1001A5738);
    }
    else
    {
      uint64_t v124 = v145;
      ProgressView<>.init<>()();
      uint64_t v125 = v169;
      long long v126 = *(_OWORD *)v169;
      long long v189 = *(_OWORD *)(v169 + 5);
      long long v190 = v126;
      uint64_t v127 = swift_allocObject();
      long long v128 = *((_OWORD *)v125 + 1);
      *(_OWORD *)(v127 + 16) = *(_OWORD *)v125;
      *(_OWORD *)(v127 + 32) = v128;
      *(_OWORD *)(v127 + 48) = *((_OWORD *)v125 + 2);
      *(void *)(v127 + 64) = v125[6];
      sub_1000126FC();
      sub_100012A58((uint64_t)&v190);
      sub_100012A84((uint64_t)&v189);
      uint64_t v129 = v148;
      static TaskPriority.userInitiated.getter();
      uint64_t v130 = (uint64_t)v144;
      unint64_t v131 = &v144[*(int *)(v162 + 36)];
      uint64_t v132 = type metadata accessor for _TaskModifier();
      uint64_t v133 = v149;
      uint64_t v134 = v150;
      (*(void (**)(char *, char *, uint64_t))(v149 + 16))(&v131[*(int *)(v132 + 20)], v129, v150);
      *(void *)unint64_t v131 = &unk_1001A6340;
      *((void *)v131 + 1) = v127;
      uint64_t v135 = v146;
      uint64_t v136 = v147;
      (*(void (**)(uint64_t, char *, uint64_t))(v146 + 16))(v130, v124, v147);
      (*(void (**)(char *, uint64_t))(v133 + 8))(v129, v134);
      (*(void (**)(char *, uint64_t))(v135 + 8))(v124, v136);
      uint64_t v121 = &qword_1001A5730;
      uint64_t v122 = v151;
      sub_10000A3C4(v130, v151, &qword_1001A5730);
      sub_10000A428(v122, v161, &qword_1001A5730);
    }
    swift_storeEnumTagMultiPayload();
    sub_100012B50();
    sub_100012BFC();
    uint64_t v123 = (uint64_t)v163;
    _ConditionalContent<>.init(storage:)();
    sub_10000A428(v123, v185, &qword_1001A62F0);
    swift_storeEnumTagMultiPayload();
    sub_1000325B8();
    sub_100032678();
    _ConditionalContent<>.init(storage:)();
    sub_10000ACE0(v123, &qword_1001A62F0);
    uint64_t v106 = v122;
    uint64_t v107 = v121;
  }
  return sub_10000ACE0(v106, v107);
}

uint64_t sub_1000308E8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Artist();
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v6 + 16))(v5, a1);
  uint64_t v7 = sub_10000A780(&qword_1001A6368, &qword_1001A6328);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 48);
  uint64_t v9 = sub_10000570C(&qword_1001A6328);
  uint64_t v10 = v8(v9, v7);
  sub_10000570C(&qword_1001A6370);
  swift_allocObject();
  return sub_100031724((uint64_t)v5, v10);
}

uint64_t sub_100030A2C(uint64_t *a1)
{
  type metadata accessor for ArtistController();
  sub_100034718(&qword_1001A6330, (void (*)(uint64_t))type metadata accessor for ArtistController);
  StateObject.wrappedValue.getter();
  uint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v4 = *a1;
    uint64_t v3 = a1[1];
    swift_retain();
    swift_bridgeObjectRetain();
    sub_100116C94(v4, v3, 3, v2);
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100034718((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100030B70(uint64_t a1)
{
  v1[2] = a1;
  type metadata accessor for MainActor();
  v1[3] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[4] = v3;
  v1[5] = v2;
  return _swift_task_switch(sub_100030C08, v3, v2);
}

uint64_t sub_100030C08()
{
  uint64_t v1 = (uint64_t *)v0[2];
  type metadata accessor for ArtistController();
  sub_100034718(&qword_1001A6330, (void (*)(uint64_t))type metadata accessor for ArtistController);
  v0[6] = StateObject.wrappedValue.getter();
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = (void *)swift_task_alloc();
  v0[7] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100011EF4;
  return sub_1000C2A28(v2, v3);
}

uint64_t sub_100030D20(uint64_t a1, uint64_t a2)
{
  uint64_t v88 = a2;
  uint64_t v89 = (uint64_t *)a1;
  uint64_t v3 = sub_10000570C(&qword_1001A6378);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = sub_10000570C(&qword_1001A5490);
  uint64_t v7 = *(void *)(v96 - 8);
  __chkstk_darwin(v96, v8);
  uint64_t v95 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000570C(&qword_1001A57C8);
  uint64_t v93 = *(void *)(v10 - 8);
  uint64_t v94 = v10;
  __chkstk_darwin(v10, v11);
  uint64_t v92 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000570C(&qword_1001A6380);
  uint64_t v86 = *(void *)(v13 - 8);
  uint64_t v87 = v13;
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v91 = (void (*)(char *, unint64_t, uint64_t))sub_10000570C(&qword_1001A6388);
  uint64_t v17 = *((void *)v91 - 1);
  __chkstk_darwin(v91, v18);
  uint64_t v20 = (char *)&v84 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000570C(&qword_1001A5760);
  uint64_t v23 = __chkstk_darwin(v21, v22);
  uint64_t v25 = (char *)&v84 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v26);
  uint64_t v28 = (char *)&v84 - v27;
  uint64_t v29 = v2 + *(void *)(*(void *)v2 + 136);
  uint64_t v90 = v7;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))((char *)&v84 - v27, 1, 1, v96);
  sub_10000A428((uint64_t)v28, (uint64_t)v25, &qword_1001A5760);
  Published.init(initialValue:)();
  sub_10000ACE0((uint64_t)v28, &qword_1001A5760);
  uint64_t v30 = v20;
  uint64_t v31 = v88;
  (*(void (**)(uint64_t, char *, void *))(v17 + 32))(v29, v30, v91);
  uint64_t v32 = v2 + *(void *)(*(void *)v2 + 152);
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v86 + 32))(v32, v16, v87);
  uint64_t v33 = v2 + *(void *)(*(void *)v2 + 160);
  LOBYTE(v99) = 0;
  uint64_t v34 = v92;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v93 + 32))(v33, v34, v94);
  uint64_t v35 = *(void *)(*(void *)v2 + 176);
  *(void *)(v2 + v35) = [objc_allocWithZone((Class)type metadata accessor for LocationManager()) init];
  uint64_t v36 = v2 + *(void *)(*(void *)v2 + 184);
  *(void *)uint64_t v36 = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v36 + 8) = v37;
  *(unsigned char *)(v36 + 16) = v38 & 1;
  *(void *)(v36 + 24) = v39;
  uint64_t v40 = v2 + *(void *)(*(void *)v2 + 192);
  *(void *)uint64_t v40 = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v40 + 8) = v41;
  *(unsigned char *)(v40 + 16) = v42 & 1;
  *(void *)(v40 + 24) = v43;
  uint64_t v44 = v2 + *(void *)(*(void *)v2 + 200);
  *(void *)uint64_t v44 = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v44 + 8) = v45;
  *(unsigned char *)(v44 + 16) = v46 & 1;
  *(void *)(v44 + 24) = v47;
  sub_1000344B4((uint64_t)v89, v2 + *(void *)(*(void *)v2 + 112), (uint64_t (*)(void))type metadata accessor for AppleMusicFetcher.MusicArtist);
  uint64_t v48 = *(void *)(*(void *)v2 + 120);
  uint64_t v85 = v2;
  *(void *)(v2 + v48) = v31;
  uint64_t v49 = *(void *)(v31 + 16);
  if (!v49)
  {
    swift_bridgeObjectRetain();
    uint64_t v54 = (char *)&_swiftEmptyArrayStorage;
    uint64_t v71 = v85;
    goto LABEL_18;
  }
  uint64_t v84 = v32;
  uint64_t v94 = sub_10000A780((unint64_t *)&qword_1001A54A0, &qword_1001A5490);
  uint64_t v92 = *(char **)(v94 + 216);
  uint64_t v93 = v94 + 216;
  uint64_t v51 = *(void (**)(char *, unint64_t, uint64_t))(v90 + 16);
  uint64_t v50 = v90 + 16;
  unint64_t v52 = v31 + ((*(unsigned __int8 *)(v90 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80));
  uint64_t v90 = *(void *)(v90 + 72);
  unint64_t v91 = v51;
  uint64_t v53 = (void (**)(char *, uint64_t))(v50 - 8);
  swift_bridgeObjectRetain_n();
  uint64_t v54 = (char *)&_swiftEmptyArrayStorage;
  uint64_t v55 = v50;
  do
  {
    uint64_t v56 = v96;
    uint64_t v57 = v55;
    v91(v95, v52, v96);
    uint64_t v58 = ((uint64_t (*)(uint64_t, uint64_t))v92)(v56, v94);
    uint64_t v59 = *(void *)(v58 + 16);
    uint64_t v60 = type metadata accessor for Venue();
    uint64_t v61 = *(void *)(v60 - 8);
    if (v59)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v60 - 8) + 16))(v6, v58+ ((*(unsigned __int8 *)(*(void *)(v60 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v60 - 8) + 80)), v60);
      uint64_t v62 = 0;
    }
    else
    {
      uint64_t v62 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v61 + 56))(v6, v62, 1, v60);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v6, 1, v60) == 1)
    {
      sub_10000ACE0((uint64_t)v6, &qword_1001A6378);
LABEL_4:
      (*v53)(v95, v96);
      goto LABEL_5;
    }
    uint64_t v63 = (void *)Venue.address.getter();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v6, v60);
    if (!v63) {
      goto LABEL_4;
    }
    id v64 = [v63 country];

    uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v67 = v66;

    (*v53)(v95, v96);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v54 = sub_1001379E0(0, *((void *)v54 + 2) + 1, 1, v54);
    }
    unint64_t v69 = *((void *)v54 + 2);
    unint64_t v68 = *((void *)v54 + 3);
    if (v69 >= v68 >> 1) {
      uint64_t v54 = sub_1001379E0((char *)(v68 > 1), v69 + 1, 1, v54);
    }
    *((void *)v54 + 2) = v69 + 1;
    uint64_t v70 = &v54[16 * v69];
    *((void *)v70 + 4) = v65;
    *((void *)v70 + 5) = v67;
LABEL_5:
    v52 += v90;
    --v49;
    uint64_t v55 = v57;
  }
  while (v49);
  uint64_t v31 = v88;
  swift_bridgeObjectRelease();
  uint64_t v32 = v84;
  uint64_t v71 = v85;
LABEL_18:
  uint64_t v72 = v89;
  uint64_t v73 = sub_10003441C((uint64_t)v54);
  swift_bridgeObjectRelease();
  *(void *)(v71 + *(void *)(*(void *)v71 + 128)) = v73;
  if (*(void *)(v73 + 16) == 1)
  {
    uint64_t v74 = sub_100012148(v73);
    if (v75)
    {
      uint64_t v76 = v74;
      uint64_t v77 = v75;
      swift_beginAccess();
      (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v32, v87);
      uint64_t v97 = v76;
      uint64_t v98 = v77;
      Published.init(initialValue:)();
      swift_endAccess();
    }
  }
  swift_beginAccess();
  uint64_t v97 = v31;
  sub_10000570C(&qword_1001A6390);
  Published.init(initialValue:)();
  swift_endAccess();
  uint64_t v78 = *v72;
  uint64_t v79 = v72[1];
  type metadata accessor for PromotionalAssetsController();
  uint64_t v80 = swift_allocObject();
  uint64_t v81 = v80 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
  uint64_t v82 = type metadata accessor for ArtistPromotionalAssets();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v81, 1, 1, v82);
  *(void *)(v80 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__error) = 0;
  *(void *)(v80 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__emptyScheduleViewModel) = 0;
  swift_bridgeObjectRetain();
  ObservationRegistrar.init()();
  *(void *)(v80 + 16) = v78;
  *(void *)(v80 + 24) = v79;
  *(unsigned char *)(v80 + 32) = 1;
  sub_10003451C((uint64_t)v72, (uint64_t (*)(void))type metadata accessor for AppleMusicFetcher.MusicArtist);
  *(void *)(v71 + *(void *)(*(void *)v71 + 168)) = v80;
  return v71;
}

uint64_t sub_100031724(uint64_t a1, uint64_t a2)
{
  uint64_t v95 = a2;
  uint64_t v96 = a1;
  uint64_t v3 = sub_10000570C(&qword_1001A6378);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (char *)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = sub_10000570C(&qword_1001A5490);
  uint64_t v7 = *(void *)(v103 - 8);
  __chkstk_darwin(v103, v8);
  uint64_t v102 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000570C(&qword_1001A57C8);
  uint64_t v100 = *(void *)(v10 - 8);
  uint64_t v101 = v10;
  __chkstk_darwin(v10, v11);
  uint64_t v99 = (char *)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000570C(&qword_1001A6380);
  uint64_t v93 = *(void *)(v13 - 8);
  uint64_t v94 = v13;
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = (void (*)(char *, unint64_t, uint64_t))sub_10000570C(&qword_1001A6388);
  uint64_t v17 = *((void *)v98 - 1);
  __chkstk_darwin(v98, v18);
  uint64_t v20 = (char *)&v88 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000570C(&qword_1001A5760);
  uint64_t v23 = __chkstk_darwin(v21, v22);
  uint64_t v25 = (char *)&v88 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v26);
  uint64_t v28 = (char *)&v88 - v27;
  uint64_t v29 = v2 + *(void *)(*(void *)v2 + 136);
  uint64_t v97 = v7;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))((char *)&v88 - v27, 1, 1, v103);
  sub_10000A428((uint64_t)v28, (uint64_t)v25, &qword_1001A5760);
  Published.init(initialValue:)();
  sub_10000ACE0((uint64_t)v28, &qword_1001A5760);
  uint64_t v30 = v20;
  uint64_t v31 = v95;
  (*(void (**)(uint64_t, char *, void *))(v17 + 32))(v29, v30, v98);
  uint64_t v32 = v2 + *(void *)(*(void *)v2 + 152);
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v93 + 32))(v32, v16, v94);
  uint64_t v33 = v2 + *(void *)(*(void *)v2 + 160);
  LOBYTE(v106) = 0;
  uint64_t v34 = v99;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v100 + 32))(v33, v34, v101);
  uint64_t v35 = *(void *)(*(void *)v2 + 176);
  *(void *)(v2 + v35) = [objc_allocWithZone((Class)type metadata accessor for LocationManager()) init];
  uint64_t v36 = v2 + *(void *)(*(void *)v2 + 184);
  *(void *)uint64_t v36 = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v36 + 8) = v37;
  *(unsigned char *)(v36 + 16) = v38 & 1;
  *(void *)(v36 + 24) = v39;
  uint64_t v40 = v2 + *(void *)(*(void *)v2 + 192);
  *(void *)uint64_t v40 = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v40 + 8) = v41;
  *(unsigned char *)(v40 + 16) = v42 & 1;
  *(void *)(v40 + 24) = v43;
  uint64_t v44 = v2 + *(void *)(*(void *)v2 + 200);
  *(void *)uint64_t v44 = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v44 + 8) = v45;
  *(unsigned char *)(v44 + 16) = v46 & 1;
  *(void *)(v44 + 24) = v47;
  uint64_t v48 = v2 + *(void *)(*(void *)v2 + 112);
  uint64_t v49 = type metadata accessor for Artist();
  uint64_t v50 = *(void *)(v49 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v48, v96, v49);
  uint64_t v51 = *(void *)(*(void *)v2 + 120);
  uint64_t v92 = v2;
  *(void *)(v2 + v51) = v31;
  uint64_t v52 = *(void *)(v31 + 16);
  if (!v52)
  {
    swift_bridgeObjectRetain();
    uint64_t v57 = (char *)&_swiftEmptyArrayStorage;
    uint64_t v74 = v92;
    uint64_t v75 = v96;
    goto LABEL_18;
  }
  uint64_t v89 = v50;
  uint64_t v90 = v49;
  uint64_t v91 = v32;
  uint64_t v101 = sub_10000A780((unint64_t *)&qword_1001A54A0, &qword_1001A5490);
  uint64_t v99 = *(char **)(v101 + 216);
  uint64_t v100 = v101 + 216;
  uint64_t v54 = *(void (**)(char *, unint64_t, uint64_t))(v97 + 16);
  uint64_t v53 = v97 + 16;
  unint64_t v55 = v31 + ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80));
  uint64_t v97 = *(void *)(v97 + 72);
  uint64_t v98 = v54;
  uint64_t v56 = (void (**)(char *, uint64_t))(v53 - 8);
  swift_bridgeObjectRetain_n();
  uint64_t v57 = (char *)&_swiftEmptyArrayStorage;
  uint64_t v58 = v53;
  do
  {
    uint64_t v59 = v103;
    uint64_t v60 = v58;
    v98(v102, v55, v103);
    uint64_t v61 = ((uint64_t (*)(uint64_t, uint64_t))v99)(v59, v101);
    uint64_t v62 = *(void *)(v61 + 16);
    uint64_t v63 = type metadata accessor for Venue();
    uint64_t v64 = *(void *)(v63 - 8);
    if (v62)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v63 - 8) + 16))(v6, v61+ ((*(unsigned __int8 *)(*(void *)(v63 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v63 - 8) + 80)), v63);
      uint64_t v65 = 0;
    }
    else
    {
      uint64_t v65 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v64 + 56))(v6, v65, 1, v63);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v6, 1, v63) == 1)
    {
      sub_10000ACE0((uint64_t)v6, &qword_1001A6378);
LABEL_4:
      (*v56)(v102, v103);
      goto LABEL_5;
    }
    uint64_t v66 = (void *)Venue.address.getter();
    (*(void (**)(char *, uint64_t))(v64 + 8))(v6, v63);
    if (!v66) {
      goto LABEL_4;
    }
    id v67 = [v66 country];

    uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v70 = v69;

    (*v56)(v102, v103);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v57 = sub_1001379E0(0, *((void *)v57 + 2) + 1, 1, v57);
    }
    unint64_t v72 = *((void *)v57 + 2);
    unint64_t v71 = *((void *)v57 + 3);
    if (v72 >= v71 >> 1) {
      uint64_t v57 = sub_1001379E0((char *)(v71 > 1), v72 + 1, 1, v57);
    }
    *((void *)v57 + 2) = v72 + 1;
    uint64_t v73 = &v57[16 * v72];
    *((void *)v73 + 4) = v68;
    *((void *)v73 + 5) = v70;
LABEL_5:
    v55 += v97;
    --v52;
    uint64_t v58 = v60;
  }
  while (v52);
  uint64_t v31 = v95;
  swift_bridgeObjectRelease();
  uint64_t v32 = v91;
  uint64_t v74 = v92;
  uint64_t v75 = v96;
  uint64_t v50 = v89;
  uint64_t v49 = v90;
LABEL_18:
  uint64_t v76 = sub_10003441C((uint64_t)v57);
  swift_bridgeObjectRelease();
  *(void *)(v74 + *(void *)(*(void *)v74 + 128)) = v76;
  if (*(void *)(v76 + 16) == 1)
  {
    uint64_t v77 = sub_100012148(v76);
    if (v78)
    {
      uint64_t v79 = v77;
      uint64_t v80 = v78;
      swift_beginAccess();
      (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v32, v94);
      uint64_t v104 = v79;
      uint64_t v105 = v80;
      Published.init(initialValue:)();
      swift_endAccess();
    }
  }
  swift_beginAccess();
  uint64_t v104 = v31;
  sub_10000570C(&qword_1001A6390);
  Published.init(initialValue:)();
  swift_endAccess();
  uint64_t v81 = Artist.id.getter();
  uint64_t v83 = v82;
  type metadata accessor for PromotionalAssetsController();
  uint64_t v84 = swift_allocObject();
  uint64_t v85 = v84 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
  uint64_t v86 = type metadata accessor for ArtistPromotionalAssets();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56))(v85, 1, 1, v86);
  *(void *)(v84 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__error) = 0;
  *(void *)(v84 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__emptyScheduleViewModel) = 0;
  ObservationRegistrar.init()();
  *(void *)(v84 + 16) = v81;
  *(void *)(v84 + 24) = v83;
  *(unsigned char *)(v84 + 32) = 1;
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v75, v49);
  *(void *)(v74 + *(void *)(*(void *)v74 + 168)) = v84;
  return v74;
}

uint64_t sub_10003216C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_1000321E8(uint64_t a1)
{
  uint64_t v2 = sub_10000570C(&qword_1001A6320);
  uint64_t v4 = __chkstk_darwin(v2 - 8, v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v11 - v8;
  sub_10000A428(a1, (uint64_t)&v11 - v8, &qword_1001A6320);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_10000A428((uint64_t)v9, (uint64_t)v6, &qword_1001A6320);
  swift_retain();
  static Published.subscript.setter();
  return sub_10000ACE0((uint64_t)v9, &qword_1001A6320);
}

uint64_t sub_1000322F8@<X0>(void *a1@<X8>)
{
  return sub_10003239C(a1);
}

uint64_t sub_10003230C()
{
  return static Published.subscript.setter();
}

uint64_t sub_100032388@<X0>(void *a1@<X8>)
{
  return sub_10003239C(a1);
}

uint64_t sub_10003239C@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_100032418()
{
  return static Published.subscript.setter();
}

ValueMetadata *type metadata accessor for ArtistEventContentView()
{
  return &type metadata for ArtistEventContentView;
}

uint64_t sub_1000324A4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000324C8@<X0>(void *a1@<X8>)
{
  return sub_10003239C(a1);
}

uint64_t sub_1000324F4@<X0>(void *a1@<X8>)
{
  return sub_10003239C(a1);
}

uint64_t sub_100032524()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100009854;
  return sub_100030B70(v0 + 16);
}

unint64_t sub_1000325B8()
{
  unint64_t result = qword_1001A6348;
  if (!qword_1001A6348)
  {
    sub_100004A58(&qword_1001A6310);
    sub_10000A780(&qword_1001A6350, &qword_1001A6318);
    sub_10000A780(&qword_1001A6358, &qword_1001A62F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6348);
  }
  return result;
}

uint64_t sub_100032678()
{
  return sub_1000326B4(&qword_1001A6360, &qword_1001A62F0, (void (*)(void))sub_100012B50, (void (*)(void))sub_100012BFC);
}

uint64_t sub_1000326B4(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100032744()
{
  return sub_100030A2C((uint64_t *)(v0 + 16));
}

uint64_t sub_10003274C()
{
  return swift_retain();
}

uint64_t sub_100032754()
{
  uint64_t v1 = type metadata accessor for Artist();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = v3 + *(void *)(v2 + 64);
  uint64_t v5 = sub_10000570C(&qword_1001A6328);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);

  return swift_deallocObject();
}

uint64_t sub_1000328A8()
{
  uint64_t v1 = *(void *)(type metadata accessor for Artist() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_10000570C(&qword_1001A6328);

  return sub_1000308E8(v0 + v2);
}

uint64_t sub_100032978()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000570C(&qword_1001A6398);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *uint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100032C58()
{
  uint64_t v1 = v0;
  uint64_t v43 = type metadata accessor for Genre();
  uint64_t v2 = *(void *)(v43 - 8);
  __chkstk_darwin(v43, v3);
  char v42 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_10000570C(&qword_1001A63B0);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    char v38 = (void *)(v5 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v9;
    uint64_t v36 = v0;
    int64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v40 = v2;
    uint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    uint64_t v39 = v7;
    unint64_t v15 = v42;
    uint64_t v16 = v43;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        int64_t v41 = v14;
        unint64_t v19 = v18 | (v14 << 6);
      }
      else
      {
        int64_t v20 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v20 >= v37) {
          goto LABEL_33;
        }
        unint64_t v21 = v38[v20];
        int64_t v22 = v14 + 1;
        if (!v21)
        {
          int64_t v22 = v14 + 2;
          if (v14 + 2 >= v37) {
            goto LABEL_33;
          }
          unint64_t v21 = v38[v22];
          if (!v21)
          {
            int64_t v22 = v14 + 3;
            if (v14 + 3 >= v37) {
              goto LABEL_33;
            }
            unint64_t v21 = v38[v22];
            if (!v21)
            {
              uint64_t v23 = v14 + 4;
              if (v14 + 4 >= v37)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v36;
                uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
                if (v35 > 63) {
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v38 = -1 << v35;
                }
                *(void *)(v5 + 16) = 0;
                break;
              }
              unint64_t v21 = v38[v23];
              if (!v21)
              {
                while (1)
                {
                  int64_t v22 = v23 + 1;
                  if (__OFADD__(v23, 1)) {
                    goto LABEL_39;
                  }
                  if (v22 >= v37) {
                    goto LABEL_33;
                  }
                  unint64_t v21 = v38[v22];
                  ++v23;
                  if (v21) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v22 = v14 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v11 = (v21 - 1) & v21;
        int64_t v41 = v22;
        unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
      }
      uint64_t v24 = v5;
      uint64_t v25 = *(void *)(v5 + 48);
      uint64_t v26 = *(void *)(v40 + 72);
      BOOL v27 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
      v27(v15, v25 + v26 * v19, v16);
      uint64_t v7 = v39;
      sub_100034718(&qword_1001A63A0, (void (*)(uint64_t))&type metadata accessor for Genre);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v29 = result & ~v28;
      unint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v33 = v30 == v32;
          if (v30 == v32) {
            unint64_t v30 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v12 + 8 * v30);
        }
        while (v34 == -1);
        unint64_t v17 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v12 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v27)(*(void *)(v7 + 48) + v17 * v26, v42, v43);
      ++*(void *)(v7 + 16);
      uint64_t v5 = v24;
      int64_t v14 = v41;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v7;
  return result;
}

uint64_t sub_100033054(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      unint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_100033528(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_100033204(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Genre();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  unint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_100034718(&qword_1001A63A0, (void (*)(uint64_t))&type metadata accessor for Genre);
  swift_bridgeObjectRetain();
  uint64_t v34 = a2;
  uint64_t v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  uint64_t v33 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    unint64_t v29 = v2;
    uint64_t v30 = a1;
    uint64_t v31 = ~v13;
    uint64_t v28 = v7;
    uint64_t v17 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v16 = v7 + 16;
    Swift::Int v15 = v17;
    uint64_t v32 = *(void *)(v16 + 56);
    unint64_t v18 = (void (**)(char *, uint64_t))(v16 - 8);
    v27[1] = v16 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v19 = v11;
      unint64_t v20 = v32 * v14;
      uint64_t v21 = v15;
      v15(v10, *(void *)(v11 + 48) + v32 * v14, v6);
      sub_100034718(&qword_1001A63A8, (void (*)(uint64_t))&type metadata accessor for Genre);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v23 = *v18;
      (*v18)(v10, v6);
      if (v22) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v31;
      uint64_t v11 = v19;
      Swift::Int v15 = v21;
      if (((*(void *)(v33 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v29;
        a1 = v30;
        uint64_t v7 = v28;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v34, v6);
    v21(v30, *(void *)(*v29 + 48) + v20, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    Swift::Int v15 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = v34;
    v15(v10, v34, v6);
    uint64_t v35 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1000336C4((uint64_t)v10, v14, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v25, v6);
    return 1;
  }
}

Swift::Int sub_100033528(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_100032978();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_100033964();
      goto LABEL_22;
    }
    sub_100033DBC();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    Swift::Int v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        unint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_1000336C4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for Genre();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  unint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  unint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100032C58();
  }
  else
  {
    if (v12 > v11)
    {
      sub_100033B18();
      goto LABEL_12;
    }
    sub_10003406C();
  }
  uint64_t v13 = *v3;
  sub_100034718(&qword_1001A63A0, (void (*)(uint64_t))&type metadata accessor for Genre);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    unint64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      sub_100034718(&qword_1001A63A8, (void (*)(uint64_t))&type metadata accessor for Genre);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_100033964()
{
  uint64_t v1 = v0;
  sub_10000570C(&qword_1001A6398);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100033B18()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Genre();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000570C(&qword_1001A63B0);
  uint64_t v7 = *v0;
  uint64_t v8 = static _SetStorage.copy(original:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_27:
    *uint64_t v1 = v9;
    return result;
  }
  uint64_t v23 = v1;
  uint64_t result = (void *)(v8 + 56);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 56 + 8 * v11) {
    uint64_t result = memmove(result, (const void *)(v7 + 56), 8 * v11);
  }
  uint64_t v24 = v7 + 56;
  int64_t v12 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v7 + 56);
  int64_t v25 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v17 = v16 | (v12 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v19 >= v25) {
      goto LABEL_25;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v12;
    if (!v20)
    {
      int64_t v12 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_25;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v12);
      if (!v20)
      {
        int64_t v12 = v19 + 2;
        if (v19 + 2 >= v25) {
          goto LABEL_25;
        }
        unint64_t v20 = *(void *)(v24 + 8 * v12);
        if (!v20) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v15 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_9:
    unint64_t v18 = *(void *)(v3 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(void *)(v7 + 48) + v18, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v9 + 48) + v18, v6, v2);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v25)
  {
LABEL_25:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v23;
    goto LABEL_27;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v12 = v21;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v25) {
      goto LABEL_25;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v12);
    ++v21;
    if (v20) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100033DBC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000570C(&qword_1001A6398);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    int64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *uint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10003406C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Genre();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v0;
  sub_10000570C(&qword_1001A63B0);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v9;
    return result;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  uint64_t v35 = v0;
  uint64_t v36 = v7 + 56;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  int64_t v37 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v38 = v3 + 16;
  uint64_t v14 = v8 + 56;
  uint64_t v39 = v3;
  unint64_t v15 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_24;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v21 >= v37) {
      goto LABEL_33;
    }
    unint64_t v22 = *(void *)(v36 + 8 * v21);
    ++v17;
    if (!v22)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v22 = *(void *)(v36 + 8 * v17);
      if (!v22)
      {
        int64_t v17 = v21 + 2;
        if (v21 + 2 >= v37) {
          goto LABEL_33;
        }
        unint64_t v22 = *(void *)(v36 + 8 * v17);
        if (!v22) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_24:
    uint64_t v24 = v7;
    uint64_t v25 = *(void *)(v7 + 48);
    uint64_t v26 = *(void *)(v39 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v39 + 16))(v6, v25 + v26 * v20, v2);
    sub_100034718(&qword_1001A63A0, (void (*)(uint64_t))&type metadata accessor for Genre);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v27 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v14 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v28) & ~*(void *)(v14 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v32 = v29 == v31;
        if (v29 == v31) {
          unint64_t v29 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v14 + 8 * v29);
      }
      while (v33 == -1);
      unint64_t v18 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t result = (*v15)(*(void *)(v9 + 48) + v18 * v26, v6, v2);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v24;
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v37)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v35;
    goto LABEL_35;
  }
  unint64_t v22 = *(void *)(v36 + 8 * v23);
  if (v22)
  {
    int64_t v17 = v23;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v17 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v17 >= v37) {
      goto LABEL_33;
    }
    unint64_t v22 = *(void *)(v36 + 8 * v17);
    ++v23;
    if (v22) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10003441C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_100033054(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1000344B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10003451C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10003457C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Genre();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  Swift::Int v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  sub_100034718(&qword_1001A63A0, (void (*)(uint64_t))&type metadata accessor for Genre);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v19 = result;
  if (v11)
  {
    unint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v13 = v3 + 16;
    uint64_t v14 = v15;
    uint64_t v16 = a1 + ((*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64));
    uint64_t v17 = *(void *)(v13 + 56);
    do
    {
      v14(v7, v16, v2);
      sub_100033204((uint64_t)v10, v7);
      (*(void (**)(char *, uint64_t))(v13 - 8))(v10, v2);
      v16 += v17;
      --v11;
    }
    while (v11);
    return v19;
  }
  return result;
}

uint64_t sub_100034718(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100034760()
{
  return sub_1000326B4(&qword_1001A63B8, &qword_1001A63C0, (void (*)(void))sub_1000325B8, (void (*)(void))sub_100032678);
}

uint64_t sub_1000347B8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100034820(&qword_1001A63C8);
  uint64_t result = sub_100034820(&qword_1001A63D0);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100034820(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Ticket();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_100034864(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    a1[3] = a2[3];
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (uint64_t *)((char *)a1 + v7);
    uint64_t v9 = (uint64_t *)((char *)a2 + v7);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_10000570C(&qword_1001A5470);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        uint64_t v12 = sub_10000570C(&qword_1001A5478);
        memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
    }
    else
    {
      *uint64_t v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100034A48(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  sub_10000570C(&qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v8 = *(void *)(v5 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
    if (!result)
    {
      uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
      return v7(v4, v5);
    }
  }
  else
  {
    return swift_release();
  }
  return result;
}

void *sub_100034B80(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10000570C(&qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v10 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    {
      uint64_t v11 = sub_10000570C(&qword_1001A5478);
      memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  else
  {
    *uint64_t v7 = *v8;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_100034D14(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (void *)((char *)a1 + v6);
    uint64_t v8 = (void *)((char *)a2 + v6);
    sub_10000ACE0((uint64_t)a1 + v6, &qword_1001A5470);
    sub_10000570C(&qword_1001A5470);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v10 = *(void *)(v9 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        uint64_t v11 = sub_10000570C(&qword_1001A5478);
        memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
    }
    else
    {
      *uint64_t v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *sub_100034EF4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_10000570C(&qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v10 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
    {
      uint64_t v11 = sub_10000570C(&qword_1001A5478);
      memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v6, v7, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v6, v7, *(void *)(*(void *)(v8 - 8) + 64));
  }
  return a1;
}

void *sub_100035074(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_release();
  a1[3] = a2[3];
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    sub_10000ACE0((uint64_t)a1 + v6, &qword_1001A5470);
    uint64_t v9 = sub_10000570C(&qword_1001A5470);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
      {
        uint64_t v12 = sub_10000570C(&qword_1001A5478);
        memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v7, v8, v10);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100035244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100035258);
}

uint64_t sub_100035258(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000570C(&qword_1001A5F10);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10003530C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100035320);
}

void *sub_100035320(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000570C(&qword_1001A5F10);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for SetlistView(uint64_t a1)
{
  return sub_10003859C(a1, qword_1001A6440);
}

void sub_1000353EC()
{
  sub_100025218();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_10003548C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000354A8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10003D46C(&qword_1001A5930, (void (*)(uint64_t))type metadata accessor for SetlistViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void *)(v3 + 184);
  *a2 = *(void *)(v3 + 176);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100035554()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100035638(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      uint64_t v4 = type metadata accessor for GridItem();
      uint64_t v5 = (char *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      *((void *)v5 + 2) = a2;
      uint64_t v6 = *(void *)(v4 - 8);
      unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      v8(&v5[v7], a1, v4);
      uint64_t v9 = a2 - 1;
      if (a2 != 1)
      {
        uint64_t v10 = *(void *)(v6 + 72);
        uint64_t v11 = &v5[v10 + v7];
        do
        {
          v8(v11, a1, v4);
          v11 += v10;
          --v9;
        }
        while (v9);
      }
    }
    else
    {
      uint64_t v5 = (char *)&_swiftEmptyArrayStorage;
    }
    uint64_t v12 = type metadata accessor for GridItem();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a1, v12);
    return (uint64_t)v5;
  }
  return result;
}

uint64_t sub_1000357E0()
{
  uint64_t v0 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000570C(&qword_1001A5FB0);
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000570C(&qword_1001A5478);
  uint64_t v12 = __chkstk_darwin(v10 - 8, v11);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v12, v15);
  uint64_t v18 = (char *)&v27 - v17;
  __chkstk_darwin(v16, v19);
  int64_t v21 = (char *)&v27 - v20;
  type metadata accessor for SetlistView(0);
  sub_100026824((uint64_t)v21);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v18, enum case for UserInterfaceSizeClass.regular(_:), v0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v1 + 56))(v18, 0, 1, v0);
  uint64_t v22 = (uint64_t)&v9[*(int *)(v6 + 56)];
  sub_10000A428((uint64_t)v21, (uint64_t)v9, &qword_1001A5478);
  sub_10000A428((uint64_t)v18, v22, &qword_1001A5478);
  int64_t v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v23((uint64_t)v9, 1, v0) == 1)
  {
    sub_10000ACE0((uint64_t)v18, &qword_1001A5478);
    sub_10000ACE0((uint64_t)v21, &qword_1001A5478);
    if (v23(v22, 1, v0) == 1)
    {
      sub_10000ACE0((uint64_t)v9, &qword_1001A5478);
      return 2;
    }
    goto LABEL_6;
  }
  sub_10000A428((uint64_t)v9, (uint64_t)v14, &qword_1001A5478);
  if (v23(v22, 1, v0) == 1)
  {
    sub_10000ACE0((uint64_t)v18, &qword_1001A5478);
    sub_10000ACE0((uint64_t)v21, &qword_1001A5478);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v14, v0);
LABEL_6:
    sub_10000ACE0((uint64_t)v9, &qword_1001A5FB0);
    return 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v4, v22, v0);
  sub_10003D46C((unint64_t *)&qword_1001A6040, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
  char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v1 + 8);
  v25(v4, v0);
  sub_10000ACE0((uint64_t)v18, &qword_1001A5478);
  sub_10000ACE0((uint64_t)v21, &qword_1001A5478);
  v25(v14, v0);
  sub_10000ACE0((uint64_t)v9, &qword_1001A5478);
  if (v24) {
    return 2;
  }
  return 1;
}

uint64_t sub_100035BD0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v180 = a2;
  uint64_t v3 = type metadata accessor for SetlistView(0);
  uint64_t v186 = *(void *)(v3 - 8);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v187 = v5;
  uint64_t v188 = (uint64_t)&v149 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ViewAlignedScrollTargetBehavior.LimitBehavior();
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v169 = (char *)&v149 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v174 = type metadata accessor for ViewAlignedScrollTargetBehavior();
  uint64_t v171 = *(void *)(v174 - 8);
  __chkstk_darwin(v174, v9);
  v170 = (char *)&v149 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = type metadata accessor for ContentMarginPlacement();
  uint64_t v163 = *(void *)(v165 - 8);
  __chkstk_darwin(v165, v11);
  uint64_t v159 = (char *)&v149 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v162 = sub_10000570C(&qword_1001A64B0);
  uint64_t v158 = *(void *)(v162 - 8);
  __chkstk_darwin(v162, v13);
  uint64_t v157 = (char *)&v149 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v168 = sub_10000570C(&qword_1001A64B8);
  uint64_t v164 = *(void *)(v168 - 8);
  __chkstk_darwin(v168, v15);
  uint64_t v160 = (char *)&v149 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v172 = sub_10000570C(&qword_1001A64C0);
  uint64_t v167 = *(void *)(v172 - 8);
  __chkstk_darwin(v172, v17);
  uint64_t v166 = (char *)&v149 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v179 = sub_10000570C(&qword_1001A64C8);
  uint64_t v176 = *(void *)(v179 - 8);
  __chkstk_darwin(v179, v19);
  uint64_t v173 = (char *)&v149 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v183 = sub_10000570C(&qword_1001A64D0);
  uint64_t v182 = *(void *)(v183 - 8);
  __chkstk_darwin(v183, v21);
  uint64_t v181 = (char *)&v149 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v185 = sub_10000570C(&qword_1001A64D8);
  uint64_t v184 = *(void *)(v185 - 8);
  uint64_t v24 = __chkstk_darwin(v185, v23);
  uint64_t v195 = (char *)&v149 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v26);
  uint64_t v194 = (char *)&v149 - v27;
  uint64_t v150 = type metadata accessor for SetlistDetailSection(0);
  __chkstk_darwin(v150, v28);
  uint64_t v153 = (uint64_t *)((char *)&v149 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v151 = sub_10000570C(&qword_1001A64E0);
  __chkstk_darwin(v151, v30);
  uint64_t v154 = (uint64_t)&v149 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v190 = sub_10000570C(&qword_1001A64E8);
  uint64_t v156 = *(void *)(v190 - 8);
  __chkstk_darwin(v190, v32);
  uint64_t v152 = (uint64_t)&v149 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v34 - 8, v35);
  int64_t v37 = (char *)&v149 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_10000570C(&qword_1001A64F0);
  uint64_t v40 = __chkstk_darwin(v38 - 8, v39);
  uint64_t v193 = (uint64_t)&v149 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40, v42);
  uint64_t v196 = (uint64_t)&v149 - v43;
  uint64_t v44 = (void *)a1[1];
  v203 = (void *)*a1;
  uint64_t v204 = v44;
  uint64_t v45 = sub_10000570C(&qword_1001A64A8);
  State.wrappedValue.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v46 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v48 = v47;
  char v50 = v49 & 1;
  static Font.title2.getter();
  static Font.Weight.bold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v178 = Text.font(_:)();
  uint64_t v177 = v51;
  int v155 = v52;
  uint64_t v192 = v53;
  swift_release();
  sub_10000FCC4(v46, v48, v50);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v175 = swift_getKeyPath();
  int v161 = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  uint64_t v55 = v54;
  uint64_t v57 = v56;
  uint64_t v59 = v58;
  uint64_t v61 = v60;
  uint64_t v62 = a1;
  uint64_t v64 = (void *)*a1;
  uint64_t v63 = (void *)a1[1];
  v203 = v64;
  uint64_t v204 = v63;
  uint64_t v189 = v45;
  State.wrappedValue.getter();
  uint64_t v65 = v199;
  uint64_t v66 = v199[7];
  uint64_t v67 = v199[8];
  sub_10000AC9C(v199 + 4, v66);
  (*(void (**)(uint64_t, uint64_t))(v67 + 64))(v66, v67);
  uint64_t v68 = type metadata accessor for URL();
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v68 - 8) + 48))(v37, 1, v68);
  sub_10000ACE0((uint64_t)v37, &qword_1001AD200);
  if (v46 == 1)
  {
    swift_release();
LABEL_5:
    uint64_t v101 = 1;
    uint64_t v99 = v190;
    goto LABEL_6;
  }
  uint64_t v69 = v65[7];
  uint64_t v70 = v65[8];
  sub_10000AC9C(v65 + 4, v69);
  (*(void (**)(uint64_t, uint64_t))(v70 + 40))(v69, v70);
  uint64_t v72 = v71;
  swift_release();
  if (!v72) {
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  v203 = v64;
  uint64_t v204 = v63;
  State.wrappedValue.getter();
  type metadata accessor for SetlistViewModel();
  State.init(wrappedValue:)();
  uint64_t v73 = v204;
  uint64_t v74 = (uint64_t)v153;
  *uint64_t v153 = v203;
  *(void *)(v74 + 8) = v73;
  LOBYTE(v199) = 0;
  State.init(wrappedValue:)();
  uint64_t v75 = v204;
  *(unsigned char *)(v74 + 16) = (_BYTE)v203;
  *(void *)(v74 + 24) = v75;
  type metadata accessor for RemoteViewConfiguration();
  sub_10003D46C((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  *(void *)(v74 + 32) = EnvironmentObject.init()();
  *(void *)(v74 + 40) = v76;
  uint64_t v77 = v150;
  uint64_t v78 = (uint64_t *)(v74 + *(int *)(v150 + 28));
  *uint64_t v78 = swift_getKeyPath();
  sub_10000570C(&qword_1001A55D8);
  swift_storeEnumTagMultiPayload();
  uint64_t v79 = (uint64_t *)(v74 + *(int *)(v77 + 32));
  *uint64_t v79 = swift_getKeyPath();
  sub_10000570C(&qword_1001A5468);
  swift_storeEnumTagMultiPayload();
  LOBYTE(v79) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v81 = v80;
  uint64_t v83 = v82;
  uint64_t v85 = v84;
  uint64_t v87 = v86;
  uint64_t v88 = v154;
  sub_10003BFCC(v74, v154, type metadata accessor for SetlistDetailSection);
  uint64_t v89 = v88 + *(int *)(v151 + 36);
  *(unsigned char *)uint64_t v89 = (_BYTE)v79;
  *(void *)(v89 + 8) = v81;
  *(void *)(v89 + 16) = v83;
  *(void *)(v89 + 24) = v85;
  *(void *)(v89 + 32) = v87;
  *(unsigned char *)(v89 + 40) = 0;
  sub_10003C584(v74, type metadata accessor for SetlistDetailSection);
  LOBYTE(v79) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v91 = v90;
  uint64_t v93 = v92;
  uint64_t v95 = v94;
  uint64_t v97 = v96;
  uint64_t v98 = v152;
  sub_10000A428(v88, v152, &qword_1001A64E0);
  uint64_t v99 = v190;
  uint64_t v100 = v98 + *(int *)(v190 + 36);
  *(unsigned char *)uint64_t v100 = (_BYTE)v79;
  *(void *)(v100 + 8) = v91;
  *(void *)(v100 + 16) = v93;
  *(void *)(v100 + 24) = v95;
  *(void *)(v100 + 32) = v97;
  *(unsigned char *)(v100 + 40) = 0;
  sub_10000ACE0(v88, &qword_1001A64E0);
  sub_10000A3C4(v98, v196, &qword_1001A64E8);
  uint64_t v101 = 0;
LABEL_6:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v156 + 56))(v196, v101, 1, v99);
  LODWORD(v190) = v155 & 1;
  uint64_t v102 = static Axis.Set.horizontal.getter();
  __chkstk_darwin(v102, v103);
  uint64_t v104 = v62;
  sub_10000570C(&qword_1001A64F8);
  uint64_t v105 = sub_100004A58(&qword_1001A6500);
  uint64_t v106 = sub_10000A780(&qword_1001A6508, &qword_1001A6500);
  v203 = (void *)v105;
  uint64_t v204 = (void *)v106;
  swift_getOpaqueTypeConformance2();
  uint64_t v107 = v157;
  ScrollView.init(_:showsIndicators:content:)();
  static Edge.Set.horizontal.getter();
  uint64_t v108 = v159;
  static ContentMarginPlacement.automatic.getter();
  uint64_t v109 = sub_10000A780(&qword_1001A6510, &qword_1001A64B0);
  uint64_t v110 = v160;
  uint64_t v111 = v162;
  View.contentMargins(_:_:for:)();
  (*(void (**)(char *, uint64_t))(v163 + 8))(v108, v165);
  (*(void (**)(char *, uint64_t))(v158 + 8))(v107, v111);
  static ViewAlignedScrollTargetBehavior.LimitBehavior.automatic.getter();
  uint64_t v112 = v170;
  ViewAlignedScrollTargetBehavior.init(limitBehavior:)();
  v203 = (void *)v111;
  uint64_t v204 = (void *)v109;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v114 = v166;
  uint64_t v115 = v168;
  long long v116 = (void *)v174;
  View.scrollTargetBehavior<A>(_:)();
  (*(void (**)(char *, void *))(v171 + 8))(v112, v116);
  (*(void (**)(char *, uint64_t))(v164 + 8))(v110, v115);
  uint64_t v117 = (void *)v104[1];
  v203 = (void *)*v104;
  uint64_t v204 = v117;
  State.wrappedValue.getter();
  swift_release();
  v203 = (void *)v115;
  uint64_t v204 = v116;
  uint64_t v205 = OpaqueTypeConformance2;
  uint64_t v206 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  uint64_t v118 = swift_getOpaqueTypeConformance2();
  uint64_t v119 = v173;
  uint64_t v120 = v172;
  View.scrollDisabled(_:)();
  (*(void (**)(char *, uint64_t))(v167 + 8))(v114, v120);
  uint64_t v121 = (void *)v104[1];
  uint64_t v199 = (void *)*v104;
  uint64_t v200 = v121;
  State.projectedValue.getter();
  uint64_t v122 = v203;
  uint64_t v123 = v204;
  uint64_t v124 = v205;
  swift_getKeyPath();
  uint64_t v199 = v122;
  uint64_t v200 = v123;
  uint64_t v201 = v124;
  sub_10000570C(&qword_1001A6518);
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v199 = v203;
  uint64_t v200 = v204;
  uint64_t v201 = v205;
  v202 = v206;
  uint64_t v197 = v120;
  uint64_t v198 = v118;
  uint64_t v174 = swift_getOpaqueTypeConformance2();
  unint64_t v125 = sub_10003BCF0();
  long long v126 = v181;
  uint64_t v127 = v179;
  View.scrollPosition<A>(id:anchor:)();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v176 + 8))(v119, v127);
  long long v128 = (void *)v104[1];
  v203 = (void *)*v104;
  uint64_t v204 = v128;
  State.wrappedValue.getter();
  uint64_t v129 = v199;
  swift_getKeyPath();
  v203 = v129;
  sub_10003D46C(&qword_1001A5930, (void (*)(uint64_t))type metadata accessor for SetlistViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  unint64_t v131 = (void *)v129[22];
  uint64_t v130 = (void *)v129[23];
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v199 = v131;
  uint64_t v200 = v130;
  uint64_t v132 = v188;
  sub_10003BFCC((uint64_t)v104, v188, type metadata accessor for SetlistView);
  unint64_t v133 = (*(unsigned __int8 *)(v186 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v186 + 80);
  uint64_t v134 = swift_allocObject();
  sub_10003D4D4(v132, v134 + v133, type metadata accessor for SetlistView);
  sub_10000570C(&qword_1001A6528);
  v203 = (void *)v127;
  uint64_t v204 = &type metadata for MusicItemID;
  uint64_t v205 = v174;
  uint64_t v206 = (void *)v125;
  swift_getOpaqueTypeConformance2();
  sub_10003BEF4();
  uint64_t v135 = v195;
  uint64_t v136 = v183;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v182 + 8))(v126, v136);
  uint64_t v137 = v184;
  uint64_t v138 = v194;
  uint64_t v139 = v185;
  (*(void (**)(char *, char *, uint64_t))(v184 + 32))(v194, v135, v185);
  LOBYTE(v133) = v190;
  LOBYTE(v203) = v190;
  uint64_t v140 = v193;
  sub_10000A428(v196, v193, &qword_1001A64F0);
  uint64_t v141 = *(void (**)(char *, char *, uint64_t))(v137 + 16);
  v141(v135, v138, v139);
  uint64_t v142 = v180;
  uint64_t v143 = v178;
  uint64_t v144 = v177;
  *uint64_t v180 = v178;
  v142[1] = v144;
  *((unsigned char *)v142 + 16) = v133;
  uint64_t v145 = KeyPath;
  v142[3] = v192;
  v142[4] = v145;
  v142[5] = 2;
  *((unsigned char *)v142 + 48) = 0;
  v142[7] = v175;
  *((unsigned char *)v142 + 64) = 0;
  *((unsigned char *)v142 + 72) = v161;
  v142[10] = v55;
  v142[11] = v57;
  v142[12] = v59;
  v142[13] = v61;
  *((unsigned char *)v142 + 112) = 0;
  uint64_t v146 = sub_10000570C(&qword_1001A6540);
  sub_10000A428(v140, (uint64_t)v142 + *(int *)(v146 + 48), &qword_1001A64F0);
  v141((char *)v142 + *(int *)(v146 + 64), v195, v139);
  LOBYTE(v140) = v190;
  sub_10000FCD4(v143, v144, v190);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_10000FCD4(v143, v144, v140);
  uint64_t v147 = *(void (**)(char *, uint64_t))(v137 + 8);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v147(v194, v139);
  sub_10000ACE0(v196, &qword_1001A64F0);
  sub_10000FCC4(v143, v144, v140);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v147(v195, v139);
  sub_10000ACE0(v193, &qword_1001A64F0);
  sub_10000FCC4(v143, v144, (char)v203);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000370BC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  v23[1] = a2;
  uint64_t v3 = type metadata accessor for PinnedScrollableViews();
  __chkstk_darwin(v3, v4);
  v23[0] = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for GridItem.Size();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (_OWORD *)((char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for GridItem();
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000570C(&qword_1001A6500);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = a1[1];
  uint64_t v24 = *a1;
  uint64_t v25 = v20;
  sub_10000570C(&qword_1001A64A8);
  State.wrappedValue.getter();
  _OWORD *v10 = xmmword_1001538D0;
  (*(void (**)(_OWORD *, void, uint64_t))(v7 + 104))(v10, enum case for GridItem.Size.flexible(_:), v6);
  GridItem.init(_:spacing:alignment:)();
  unint64_t v21 = sub_1000154DC();
  sub_100035638((uint64_t)v14, v21);
  swift_release();
  v23[4] = a1;
  static VerticalAlignment.center.getter();
  LODWORD(v24) = 0;
  sub_10003D46C(&qword_1001A6548, (void (*)(uint64_t))&type metadata accessor for PinnedScrollableViews);
  dispatch thunk of OptionSet.init(rawValue:)();
  sub_10000570C(&qword_1001A6550);
  sub_10003C05C();
  LazyHGrid.init(rows:alignment:spacing:pinnedViews:content:)();
  sub_10000A780(&qword_1001A6508, &qword_1001A6500);
  View.scrollTargetLayout(isEnabled:)();
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
}

uint64_t sub_10003742C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v3 = type metadata accessor for SetlistView(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3 - 8, v6);
  uint64_t v7 = a1[1];
  uint64_t v21 = *a1;
  uint64_t v22 = v7;
  sub_10000570C(&qword_1001A64A8);
  State.wrappedValue.getter();
  uint64_t v8 = v25[7];
  uint64_t v9 = v25[8];
  sub_10000AC9C(v25 + 4, v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 48))(v8, v9);
  swift_getAssociatedTypeWitness();
  sub_10000570C(&qword_1001A5948);
  uint64_t v10 = _arrayForceCast<A, B>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v25 = (void *)v10;
  swift_getKeyPath();
  sub_10003BFCC((uint64_t)a1, (uint64_t)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SetlistView);
  unint64_t v11 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v12 = swift_allocObject();
  sub_10003D4D4((uint64_t)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11, type metadata accessor for SetlistView);
  sub_10000570C(&qword_1001A6578);
  sub_10000570C(&qword_1001A6580);
  sub_10000A780(&qword_1001A6588, &qword_1001A6578);
  sub_10003BCF0();
  uint64_t v13 = sub_100004A58(&qword_1001A6560);
  uint64_t v14 = sub_100004A58(&qword_1001A6568);
  uint64_t v15 = type metadata accessor for PlainButtonStyle();
  uint64_t v16 = sub_10000A780(&qword_1001A6570, &qword_1001A6568);
  uint64_t v17 = sub_10003D46C(&qword_1001A62B8, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
  uint64_t v21 = v14;
  uint64_t v22 = v15;
  uint64_t v23 = v16;
  uint64_t v24 = v17;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v21 = v13;
  uint64_t v22 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  return ForEach<>.init(_:id:content:)();
}

uint64_t sub_100037778@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v44 = a3;
  uint64_t v36 = type metadata accessor for PlainButtonStyle();
  uint64_t v38 = *(void *)(v36 - 8);
  __chkstk_darwin(v36, v5);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SetlistView(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8, v11);
  uint64_t v12 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000570C(&qword_1001A6568);
  uint64_t v37 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000570C(&qword_1001A6560);
  uint64_t v42 = *(void *)(v17 - 8);
  uint64_t v43 = v17;
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000570C(&qword_1001A6580);
  uint64_t v40 = *(void *)(v21 - 8);
  uint64_t v41 = v21;
  __chkstk_darwin(v21, v22);
  uint64_t v39 = (char *)&v35 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003BFCC((uint64_t)a2, (uint64_t)v12, type metadata accessor for SetlistView);
  sub_10000AD3C(a1, (uint64_t)&v50);
  unint64_t v24 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v25 = (v10 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = swift_allocObject();
  uint64_t v27 = v26 + v24;
  uint64_t v28 = v36;
  sub_10003D4D4((uint64_t)v12, v27, type metadata accessor for SetlistView);
  sub_100017350(&v50, v26 + v25);
  uint64_t v45 = a2;
  uint64_t v46 = a1;
  sub_10000570C(&qword_1001A6590);
  sub_10003C4B4();
  Button.init(action:label:)();
  PlainButtonStyle.init()();
  uint64_t v29 = sub_10000A780(&qword_1001A6570, &qword_1001A6568);
  uint64_t v30 = sub_10003D46C(&qword_1001A62B8, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v7, v28);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v16, v13);
  static Axis.Set.horizontal.getter();
  uint64_t v31 = a2[1];
  uint64_t v47 = *a2;
  uint64_t v48 = v31;
  sub_10000570C(&qword_1001A64A8);
  State.wrappedValue.getter();
  LOBYTE(v16) = *(unsigned char *)(v49 + 72);
  swift_release();
  if ((v16 & 1) == 0) {
    sub_1000357E0();
  }
  static Alignment.center.getter();
  *(void *)&long long v50 = v13;
  *((void *)&v50 + 1) = v28;
  uint64_t v51 = v29;
  uint64_t v52 = v30;
  swift_getOpaqueTypeConformance2();
  uint64_t v32 = v39;
  uint64_t v33 = v43;
  View.containerRelativeFrame(_:count:span:spacing:alignment:)();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v20, v33);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v40 + 32))(v44, v32, v41);
}

uint64_t sub_100037CB8(uint64_t a1, void *a2)
{
  sub_10000570C(&qword_1001A64A8);
  State.wrappedValue.getter();
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    swift_retain();
    sub_100015B40(a2, v4);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10003D46C((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100037D98@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for SetlistSongRowView();
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (void *)((char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = a1[1];
  *(void *)&v21[0] = *a1;
  uint64_t v11 = *(void *)&v21[0];
  *((void *)&v21[0] + 1) = v12;
  sub_10000570C(&qword_1001A64A8);
  State.wrappedValue.getter();
  uint64_t v14 = *(void *)(v20[0] + 16);
  uint64_t v13 = *(void *)(v20[0] + 24);
  swift_bridgeObjectRetain();
  swift_release();
  sub_10000AD3C(a2, (uint64_t)v21);
  v20[0] = v11;
  v20[1] = v12;
  State.wrappedValue.getter();
  uint64_t v15 = v20[2];
  type metadata accessor for SetlistSongRowViewModel();
  uint64_t v16 = (void *)swift_allocObject();
  ObservationRegistrar.init()();
  v16[2] = v14;
  v16[3] = v13;
  sub_100017350(v21, (uint64_t)(v16 + 5));
  void v16[4] = v15;
  void *v10 = v16;
  type metadata accessor for RemoteViewConfiguration();
  sub_10003D46C((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  v10[1] = EnvironmentObject.init()();
  v10[2] = v17;
  uint64_t v18 = (void *)((char *)v10 + *(int *)(v7 + 32));
  *uint64_t v18 = swift_getKeyPath();
  sub_10000570C(&qword_1001A55D8);
  swift_storeEnumTagMultiPayload();
  sub_10003BFCC((uint64_t)v10, a3, (uint64_t (*)(void))type metadata accessor for SetlistSongRowView);
  *(unsigned char *)(a3 + *(int *)(sub_10000570C(&qword_1001A6590) + 36)) = 0;
  return sub_10003C584((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SetlistSongRowView);
}

uint64_t sub_100037FA4(uint64_t a1)
{
  sub_10000570C(&qword_1001A64A8);
  State.wrappedValue.getter();
  uint64_t v3 = *(void *)(v6 + 16);
  uint64_t v2 = *(void *)(v6 + 24);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    swift_retain();
    sub_100116F94(v3, v2, 8, 11, 24, 0, 3u, v4);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10003D46C((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000380AC(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  type metadata accessor for MainActor();
  *(void *)(v1 + 48) = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100038144, v3, v2);
}

uint64_t sub_100038144()
{
  uint64_t v1 = (void *)v0[5];
  swift_release();
  uint64_t v2 = v1[1];
  v0[2] = *v1;
  v0[3] = v2;
  sub_10000570C(&qword_1001A64A8);
  State.wrappedValue.getter();
  uint64_t v3 = *(void **)(v0[4] + 200);
  uint64_t v4 = v3[5];
  uint64_t v5 = v3[6];
  sub_10000AC9C(v3 + 2, v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 48))(v4, v5);
  swift_release();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100038214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2;
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a1 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v9, v14);
  uint64_t v15 = sub_10000570C(&qword_1001A6480);
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v18 = static HorizontalAlignment.leading.getter();
  *((void *)v18 + 1) = 0x402E000000000000;
  v18[16] = 0;
  uint64_t v19 = sub_10000570C(&qword_1001A6488);
  sub_100035BD0(v4, (uint64_t *)&v18[*(int *)(v19 + 44)]);
  sub_10003BFCC((uint64_t)v4, (uint64_t)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SetlistView);
  unint64_t v20 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v21 = swift_allocObject();
  sub_10003D4D4((uint64_t)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v21 + v20, type metadata accessor for SetlistView);
  static TaskPriority.userInitiated.getter();
  uint64_t v22 = (char *)(a2 + *(int *)(sub_10000570C(&qword_1001A64A0) + 36));
  uint64_t v23 = type metadata accessor for _TaskModifier();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(&v22[*(int *)(v23 + 20)], v11, v6);
  *(void *)uint64_t v22 = &unk_1001A6498;
  *((void *)v22 + 1) = v21;
  sub_10000A428((uint64_t)v18, a2, &qword_1001A6480);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  return sub_10000ACE0((uint64_t)v18, &qword_1001A6480);
}

uint64_t sub_1000384B0()
{
  uint64_t v2 = *(void *)(type metadata accessor for SetlistView(0) - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100009854;
  return sub_1000380AC(v3);
}

uint64_t type metadata accessor for SetlistDetailSection(uint64_t a1)
{
  return sub_10003859C(a1, (uint64_t *)&unk_1001A6618);
}

uint64_t sub_10003859C(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000385D4()
{
  static Color.black.getter();
  uint64_t v0 = Color.opacity(_:)();
  uint64_t result = swift_release();
  qword_1001A63D8 = v0;
  return result;
}

uint64_t sub_100038618()
{
  static Font.subheadline.getter();
  static Font.Weight.regular.getter();
  uint64_t v0 = Font.weight(_:)();
  uint64_t result = swift_release();
  qword_1001A63E0 = v0;
  return result;
}

uint64_t sub_10003865C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v156 = a2;
  uint64_t v136 = type metadata accessor for Text.Suffix();
  uint64_t v135 = *(void *)(v136 - 8);
  __chkstk_darwin(v136, v3);
  uint64_t v134 = (char *)v131 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = sub_10000570C(&qword_1001A66A0);
  uint64_t v140 = *(void *)(v141 - 8);
  __chkstk_darwin(v141, v5);
  uint64_t v139 = (char *)v131 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = sub_10000570C(&qword_1001A66A8);
  uint64_t v154 = *(void *)(v155 - 8);
  uint64_t v8 = __chkstk_darwin(v155, v7);
  uint64_t v138 = (char *)v131 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  uint64_t v137 = (char *)v131 - v11;
  uint64_t v12 = sub_10000570C(&qword_1001A5928);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v148 = (char *)v131 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for AttributedString();
  uint64_t v157 = *(void *)(v15 - 8);
  uint64_t v158 = v15;
  uint64_t v17 = __chkstk_darwin(v15, v16);
  v131[0] = (char *)v131 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  uint64_t v151 = (char *)v131 - v20;
  uint64_t v21 = sub_10000570C(&qword_1001A66B0);
  uint64_t v23 = __chkstk_darwin(v21 - 8, v22);
  uint64_t v153 = (uint64_t)v131 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v25);
  uint64_t v152 = (char *)v131 - v26;
  uint64_t v147 = type metadata accessor for PlainButtonStyle();
  uint64_t v149 = *(void (***)(char *, uint64_t))(v147 - 8);
  __chkstk_darwin(v147, v27);
  uint64_t v146 = (char *)v131 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v29 - 8, v30);
  uint64_t v32 = (char *)v131 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for SetlistDetailSection(0);
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(void *)(v34 + 64);
  uint64_t v37 = __chkstk_darwin(v33 - 8, v36);
  uint64_t v133 = (uint64_t)v131 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37, v38);
  uint64_t v40 = (char *)v131 - v39;
  uint64_t v145 = sub_10000570C(&qword_1001A66B8);
  uint64_t v41 = *(void *)(v145 - 8);
  __chkstk_darwin(v145, v42);
  uint64_t v44 = (char *)v131 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = sub_10000570C(&qword_1001A66C0);
  __chkstk_darwin(v144, v45);
  uint64_t v47 = (char *)v131 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_10000570C(&qword_1001A66C8);
  uint64_t v159 = *(void *)(v48 - 8);
  uint64_t v160 = v48;
  uint64_t v50 = __chkstk_darwin(v48, v49);
  uint64_t v150 = (void (**)(char *, uint64_t))((char *)v131 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v53 = __chkstk_darwin(v50, v52);
  uint64_t v143 = (char *)v131 - v54;
  __chkstk_darwin(v53, v55);
  uint64_t v57 = (void (**)(char *, uint64_t))((char *)v131 - v56);
  sub_10003BFCC((uint64_t)a1, (uint64_t)v40, type metadata accessor for SetlistDetailSection);
  uint64_t v58 = *(unsigned __int8 *)(v34 + 80);
  uint64_t v59 = (v58 + 16) & ~v58;
  v131[2] = v59 + v35;
  v131[1] = v58 | 7;
  uint64_t v60 = swift_allocObject();
  uint64_t v132 = v59;
  sub_10003D4D4((uint64_t)v40, v60 + v59, type metadata accessor for SetlistDetailSection);
  int v161 = a1;
  sub_10000570C(&qword_1001A66D0);
  sub_10003D864();
  Button.init(action:label:)();
  uint64_t v142 = a1;
  uint64_t v61 = a1[1];
  uint64_t v162 = *a1;
  uint64_t v163 = v61;
  sub_10000570C(&qword_1001A64A8);
  State.wrappedValue.getter();
  uint64_t v62 = v170[7];
  uint64_t v63 = v170[8];
  sub_10000AC9C(v170 + 4, v62);
  (*(void (**)(uint64_t, uint64_t))(v63 + 64))(v62, v63);
  uint64_t v64 = type metadata accessor for URL();
  LOBYTE(v35) = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v64 - 8) + 48))(v32, 1, v64) != 1;
  sub_10000ACE0((uint64_t)v32, &qword_1001AD200);
  swift_release();
  uint64_t v65 = v145;
  (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v47, v44, v145);
  v47[*(int *)(v144 + 36)] = v35;
  (*(void (**)(char *, uint64_t))(v41 + 8))(v44, v65);
  uint64_t v66 = (uint64_t)v148;
  uint64_t v67 = v146;
  PlainButtonStyle.init()();
  sub_10003D9A4();
  sub_10003D46C(&qword_1001A62B8, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
  uint64_t v68 = v143;
  uint64_t v69 = v147;
  View.buttonStyle<A>(_:)();
  v149[1](v67, v69);
  uint64_t v70 = (uint64_t)v47;
  uint64_t v71 = (uint64_t)v142;
  sub_10000ACE0(v70, &qword_1001A66C0);
  uint64_t v72 = *(void (**)(void (**)(char *, uint64_t), char *, uint64_t))(v159 + 32);
  uint64_t v149 = v57;
  v72(v57, v68, v160);
  uint64_t v73 = *(void *)(v71 + 8);
  uint64_t v162 = *(void *)v71;
  uint64_t v163 = v73;
  State.wrappedValue.getter();
  uint64_t v74 = (uint64_t)v170;
  swift_getKeyPath();
  uint64_t v162 = v74;
  sub_10003D46C(&qword_1001A5930, (void (*)(uint64_t))type metadata accessor for SetlistViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v75 = v74 + OBJC_IVAR____TtC16EventViewService16SetlistViewModel__formattedStandardDescription;
  swift_beginAccess();
  uint64_t v76 = v75;
  uint64_t v77 = v157;
  sub_10000A428(v76, v66, &qword_1001A5928);
  uint64_t v78 = v158;
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48))(v66, 1, v78) == 1)
  {
    sub_10000ACE0(v66, &qword_1001A5928);
    uint64_t v79 = 1;
    uint64_t v80 = v155;
    uint64_t v81 = v154;
    uint64_t v82 = (uint64_t)v152;
  }
  else
  {
    uint64_t v83 = v151;
    (*(void (**)(char *, uint64_t, uint64_t))(v77 + 32))(v151, v66, v78);
    (*(void (**)(void, char *, uint64_t))(v77 + 16))(v131[0], v83, v78);
    uint64_t v84 = Text.init(_:)();
    uint64_t v86 = v85;
    char v88 = v87;
    if (qword_1001A4E20 != -1) {
      swift_once();
    }
    uint64_t v89 = Text.font(_:)();
    uint64_t v91 = v90;
    char v93 = v92 & 1;
    sub_10000FCC4(v84, v86, v88 & 1);
    swift_bridgeObjectRelease();
    LODWORD(v162) = static HierarchicalShapeStyle.secondary.getter();
    uint64_t v94 = Text.foregroundStyle<A>(_:)();
    uint64_t v96 = v95;
    char v98 = v97;
    uint64_t v100 = v99;
    sub_10000FCC4(v89, v91, v93);
    swift_bridgeObjectRelease();
    uint64_t v101 = *(void *)(v71 + 24);
    LOBYTE(v162) = *(unsigned char *)(v71 + 16);
    uint64_t v163 = v101;
    sub_10000570C(&qword_1001A6728);
    State.wrappedValue.getter();
    char v102 = v169;
    if (v169) {
      uint64_t v103 = 0;
    }
    else {
      uint64_t v103 = 2;
    }
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v162 = v94;
    uint64_t v163 = v96;
    char v164 = v98 & 1;
    uint64_t v165 = v100;
    uint64_t v166 = KeyPath;
    uint64_t v167 = v103;
    char v168 = v102;
    uint64_t v105 = sub_10003B414();
    uint64_t v107 = v106;
    char v109 = v108 & 1;
    uint64_t v110 = v134;
    static Text.Suffix.truncated(_:)();
    sub_10000FCC4(v105, v107, v109);
    swift_bridgeObjectRelease();
    uint64_t v111 = sub_10000570C(&qword_1001A5A78);
    unint64_t v112 = sub_10001A2A4();
    uint64_t v113 = v139;
    View.textSuffix(_:)();
    (*(void (**)(char *, uint64_t))(v135 + 8))(v110, v136);
    sub_10000FCC4(v162, v163, v164);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v114 = v133;
    sub_10003BFCC(v71, v133, type metadata accessor for SetlistDetailSection);
    uint64_t v115 = swift_allocObject();
    sub_10003D4D4(v114, v115 + v132, type metadata accessor for SetlistDetailSection);
    uint64_t v162 = v111;
    uint64_t v163 = v112;
    swift_getOpaqueTypeConformance2();
    long long v116 = v138;
    uint64_t v117 = v141;
    View.onTapGesture(count:perform:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v140 + 8))(v113, v117);
    (*(void (**)(char *, uint64_t))(v157 + 8))(v151, v158);
    uint64_t v81 = v154;
    uint64_t v118 = *(void (**)(char *, char *, uint64_t))(v154 + 32);
    uint64_t v119 = v137;
    uint64_t v120 = v116;
    uint64_t v80 = v155;
    v118(v137, v120, v155);
    uint64_t v82 = (uint64_t)v152;
    v118(v152, v119, v80);
    uint64_t v79 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56))(v82, v79, 1, v80);
  uint64_t v122 = v159;
  uint64_t v121 = v160;
  uint64_t v123 = *(void (**)(char *, void (**)(char *, uint64_t), uint64_t))(v159 + 16);
  uint64_t v124 = v150;
  unint64_t v125 = v149;
  v123((char *)v150, v149, v160);
  uint64_t v126 = v153;
  sub_10000A428(v82, v153, &qword_1001A66B0);
  uint64_t v127 = v156;
  v123(v156, v124, v121);
  uint64_t v128 = sub_10000570C(&qword_1001A6720);
  sub_10000A428(v126, (uint64_t)&v127[*(int *)(v128 + 48)], &qword_1001A66B0);
  sub_10000ACE0(v82, &qword_1001A66B0);
  uint64_t v129 = *(void (**)(void, uint64_t))(v122 + 8);
  v129(v125, v121);
  sub_10000ACE0(v126, &qword_1001A66B0);
  return ((uint64_t (*)(void, uint64_t))v129)(v124, v121);
}

uint64_t sub_100039588(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for OpenURLAction();
  uint64_t v23 = *(void *)(v2 - 8);
  uint64_t v24 = v2;
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v25 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1[1];
  uint64_t v26 = *a1;
  uint64_t v27 = v14;
  sub_10000570C(&qword_1001A64A8);
  State.wrappedValue.getter();
  uint64_t v16 = v28[7];
  uint64_t v15 = v28[8];
  sub_10000AC9C(v28 + 4, v16);
  (*(void (**)(uint64_t, uint64_t))(v15 + 64))(v16, v15);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1) {
    return sub_10000ACE0((uint64_t)v9, &qword_1001AD200);
  }
  uint64_t v18 = v25;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v25, v9, v10);
  type metadata accessor for SetlistDetailSection(0);
  sub_1000264EC((uint64_t)v5);
  OpenURLAction.callAsFunction(_:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v24);
  uint64_t v19 = a1[1];
  uint64_t v26 = *a1;
  uint64_t v27 = v19;
  State.wrappedValue.getter();
  uint64_t v21 = v28[2];
  uint64_t v20 = v28[3];
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v22 = a1[4];
  if (v22)
  {
    swift_retain();
    sub_100116F94(v21, v20, 8, 12, 13, 0, 3u, v22);
    swift_bridgeObjectRelease();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v18, v10);
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10003D46C((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000398F0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000570C(&qword_1001A66F8);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (void *)((char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_10000570C(&qword_1001A66E8);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *uint64_t v7 = static Alignment.leading.getter();
  v7[1] = v12;
  uint64_t v13 = (char *)v7 + *(int *)(sub_10000570C(&qword_1001A6730) + 44);
  *(void *)uint64_t v13 = static VerticalAlignment.center.getter();
  *((void *)v13 + 1) = 0x4030000000000000;
  v13[16] = 0;
  uint64_t v14 = sub_10000570C(&qword_1001A6738);
  sub_100039AFC(a1, (uint64_t)&v13[*(int *)(v14 + 44)]);
  static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  v27[1] = v15;
  void v27[2] = v16;
  v27[3] = v17;
  void v27[4] = v18;
  char v28 = 0;
  sub_10000570C(&qword_1001A6740);
  SafeAreaPaddingModifier.init(edges:insets:)();
  uint64_t v19 = static Alignment.leading.getter();
  sub_1001234E4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v11, 0.0, 1, 0.0, 1, v19, v20);
  sub_10000ACE0((uint64_t)v7, &qword_1001A66F8);
  uint64_t v21 = static Alignment.center.getter();
  uint64_t v23 = v22;
  uint64_t v24 = a2 + *(int *)(sub_10000570C(&qword_1001A66D0) + 36);
  sub_10003B040((uint64_t)a1, v24);
  uint64_t v25 = (uint64_t *)(v24 + *(int *)(sub_10000570C(&qword_1001A6708) + 36));
  *uint64_t v25 = v21;
  v25[1] = v23;
  return sub_10000A3C4((uint64_t)v11, a2, &qword_1001A66E8);
}

uint64_t sub_100039AFC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v59 = a2;
  uint64_t v3 = sub_10000570C(&qword_1001A6758);
  uint64_t v5 = __chkstk_darwin(v3 - 8, v4);
  uint64_t v58 = (uint64_t)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v53 - v8;
  uint64_t v57 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin(v57, v10);
  uint64_t v56 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_10000570C(&qword_1001A6760);
  uint64_t v16 = *(void *)(v53 - 8);
  __chkstk_darwin(v53, v17);
  uint64_t v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000570C(&qword_1001A6768);
  uint64_t v21 = v20 - 8;
  __chkstk_darwin(v20, v22);
  uint64_t v24 = (char *)&v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000570C(&qword_1001A6770);
  uint64_t v26 = v25 - 8;
  uint64_t v28 = __chkstk_darwin(v25, v27);
  uint64_t v30 = (char *)&v53 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28, v31);
  uint64_t v54 = (uint64_t)&v53 - v32;
  uint64_t v55 = a1;
  uint64_t v33 = a1[1];
  *(void *)&long long v60 = *a1;
  *((void *)&v60 + 1) = v33;
  sub_10000570C(&qword_1001A64A8);
  State.wrappedValue.getter();
  sub_1000158F8((uint64_t)v15);
  swift_release();
  static Animation.spring(response:dampingFraction:blendDuration:)();
  Transaction.init(animation:)();
  sub_10000570C(&qword_1001A6778);
  sub_10003DA7C();
  AsyncImage.init(url:scale:transaction:content:)();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v34 = v53;
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v24, v19, v53);
  uint64_t v35 = &v24[*(int *)(v21 + 44)];
  long long v36 = v61;
  *(_OWORD *)uint64_t v35 = v60;
  *((_OWORD *)v35 + 1) = v36;
  *((_OWORD *)v35 + 2) = v62;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v34);
  uint64_t v37 = v56;
  uint64_t v38 = &v56[*(int *)(v57 + 28)];
  uint64_t v39 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v40 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 104))(v38, v39, v40);
  __asm { FMOV            V0.2D, #5.0 }
  *uint64_t v37 = _Q0;
  uint64_t v46 = (uint64_t)&v30[*(int *)(v26 + 44)];
  sub_10003BFCC((uint64_t)v37, v46, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v46 + *(int *)(sub_10000570C(&qword_1001A62A8) + 36)) = 256;
  sub_10000A428((uint64_t)v24, (uint64_t)v30, &qword_1001A6768);
  sub_10003C584((uint64_t)v37, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_10000ACE0((uint64_t)v24, &qword_1001A6768);
  uint64_t v47 = v54;
  sub_10000A3C4((uint64_t)v30, v54, &qword_1001A6770);
  *(void *)uint64_t v9 = static HorizontalAlignment.leading.getter();
  *((void *)v9 + 1) = 0x4008000000000000;
  v9[16] = 0;
  uint64_t v48 = sub_10000570C(&qword_1001A67A0);
  sub_10003A324(v55, (uint64_t)&v9[*(int *)(v48 + 44)]);
  sub_10000A428(v47, (uint64_t)v30, &qword_1001A6770);
  uint64_t v49 = v58;
  sub_10000A428((uint64_t)v9, v58, &qword_1001A6758);
  uint64_t v50 = v59;
  sub_10000A428((uint64_t)v30, v59, &qword_1001A6770);
  uint64_t v51 = sub_10000570C(&qword_1001A67A8);
  sub_10000A428(v49, v50 + *(int *)(v51 + 48), &qword_1001A6758);
  sub_10000ACE0((uint64_t)v9, &qword_1001A6758);
  sub_10000ACE0(v47, &qword_1001A6770);
  sub_10000ACE0(v49, &qword_1001A6758);
  return sub_10000ACE0((uint64_t)v30, &qword_1001A6770);
}

uint64_t sub_10003A048@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Image.ResizingMode();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AsyncImagePhase();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  if ((*(unsigned int (**)(char *, uint64_t))(v10 + 88))(v13, v9) == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(char *, uint64_t))(v10 + 96))(v13, v9);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, enum case for Image.ResizingMode.stretch(_:), v4);
    uint64_t v14 = Image.resizable(capInsets:resizingMode:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    uint64_t v18 = v14;
    char v19 = 0;
    swift_retain_n();
    sub_10000570C(&qword_1001A6790);
    sub_10003DAF8();
    _ConditionalContent<>.init(storage:)();
    swift_release_n();
    uint64_t result = swift_release();
    uint64_t v16 = v20;
    char v17 = v21;
  }
  else
  {
    uint64_t v18 = static Color.gray.getter();
    char v19 = 1;
    sub_10000570C(&qword_1001A6790);
    sub_10003DAF8();
    _ConditionalContent<>.init(storage:)();
    uint64_t v16 = v20;
    char v17 = v21;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  *(void *)a2 = v16;
  *(unsigned char *)(a2 + 8) = v17;
  return result;
}

uint64_t sub_10003A324@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v115 = a2;
  uint64_t v3 = type metadata accessor for SetlistDetailSection(0);
  uint64_t v106 = *(void *)(v3 - 8);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v107 = v5;
  uint64_t v108 = (uint64_t)&v104 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000570C(&qword_1001A56B0);
  uint64_t v113 = *(void *)(v6 - 8);
  uint64_t v114 = v6;
  __chkstk_darwin(v6, v7);
  char v109 = (char *)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v122 = (char *)&v104 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v123 = *(void *)(v12 - 8);
  uint64_t v124 = v12;
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v105 = (char *)&v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = v15;
  __chkstk_darwin(v14, v16);
  uint64_t v110 = (char *)&v104 - v17;
  uint64_t v18 = sub_10000570C(&qword_1001A67B0);
  uint64_t v20 = __chkstk_darwin(v18 - 8, v19);
  unint64_t v112 = (char *)&v104 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v22);
  uint64_t v111 = (char *)&v104 - v23;
  uint64_t v121 = sub_10000570C(&qword_1001A67B8) - 8;
  __chkstk_darwin(v121, v24);
  uint64_t v120 = (uint64_t *)((char *)&v104 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = sub_10000570C(&qword_1001A67C0);
  __chkstk_darwin(v26 - 8, v27);
  uint64_t v117 = (char *)&v104 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = sub_10000570C(&qword_1001A67C8) - 8;
  uint64_t v30 = __chkstk_darwin(v118, v29);
  uint64_t v32 = (char *)&v104 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30, v33);
  uint64_t v125 = (uint64_t)&v104 - v34;
  long long v116 = a1;
  uint64_t v35 = a1[1];
  uint64_t v126 = *a1;
  uint64_t v127 = v35;
  uint64_t v119 = sub_10000570C(&qword_1001A64A8);
  State.wrappedValue.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v36 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v38 = v37;
  char v40 = v39 & 1;
  static Font.caption2.getter();
  static Font.Weight.semibold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v41 = Text.font(_:)();
  uint64_t v43 = v42;
  char v45 = v44;
  swift_release();
  char v46 = v45 & 1;
  sub_10000FCC4(v36, v38, v40);
  swift_bridgeObjectRelease();
  LODWORD(v126) = static HierarchicalShapeStyle.secondary.getter();
  uint64_t v47 = Text.foregroundStyle<A>(_:)();
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  char v53 = v52 & 1;
  uint64_t v54 = v43;
  uint64_t v55 = v116;
  sub_10000FCC4(v41, v54, v46);
  swift_bridgeObjectRelease();
  uint64_t v56 = enum case for Text.Case.uppercase(_:);
  uint64_t v57 = type metadata accessor for Text.Case();
  uint64_t v58 = *(void *)(v57 - 8);
  uint64_t v59 = (uint64_t)v117;
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 104))(v117, v56, v57);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v58 + 56))(v59, 0, 1, v57);
  uint64_t KeyPath = swift_getKeyPath();
  long long v61 = v120;
  sub_10000A428(v59, (uint64_t)v120 + *(int *)(v121 + 36), &qword_1001A67C0);
  uint64_t *v61 = KeyPath;
  sub_10000A428((uint64_t)v61, (uint64_t)&v32[*(int *)(v118 + 44)], &qword_1001A67B8);
  *(void *)uint64_t v32 = v47;
  *((void *)v32 + 1) = v49;
  v32[16] = v53;
  *((void *)v32 + 3) = v51;
  swift_bridgeObjectRetain();
  sub_10000FCD4(v47, v49, v53);
  sub_10000ACE0((uint64_t)v61, &qword_1001A67B8);
  sub_10000ACE0(v59, &qword_1001A67C0);
  sub_10000FCC4(v47, v49, v53);
  swift_bridgeObjectRelease();
  uint64_t v118 = (uint64_t)v32;
  sub_10000A3C4((uint64_t)v32, v125, &qword_1001A67C8);
  uint64_t v62 = *v55;
  uint64_t v63 = v55[1];
  uint64_t v126 = *v55;
  uint64_t v127 = v63;
  State.wrappedValue.getter();
  uint64_t v64 = v128[7];
  uint64_t v65 = v128[8];
  sub_10000AC9C(v128 + 4, v64);
  uint64_t v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 40))(v64, v65);
  uint64_t v68 = v67;
  swift_release();
  if (v68)
  {
    uint64_t v126 = v66;
    uint64_t v127 = v68;
    sub_100010B2C();
    uint64_t v69 = Text.init<A>(_:)();
    uint64_t v117 = v70;
    uint64_t v120 = (uint64_t *)(v71 & 1);
    uint64_t v121 = v72;
  }
  else
  {
    uint64_t v69 = 0;
    uint64_t v120 = 0;
    uint64_t v121 = 0;
    uint64_t v117 = 0;
  }
  uint64_t v126 = v62;
  uint64_t v127 = v63;
  State.wrappedValue.getter();
  uint64_t v73 = v128[7];
  uint64_t v74 = v128[8];
  sub_10000AC9C(v128 + 4, v73);
  uint64_t v75 = (uint64_t)v122;
  (*(void (**)(uint64_t, uint64_t))(v74 + 64))(v73, v74);
  swift_release();
  uint64_t v76 = v123;
  uint64_t v77 = v124;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v123 + 48))(v75, 1, v124) == 1)
  {
    sub_10000ACE0(v75, &qword_1001AD200);
    uint64_t v78 = 1;
    uint64_t v79 = v114;
    uint64_t v80 = v115;
    uint64_t v82 = (uint64_t)v112;
    uint64_t v81 = v113;
    uint64_t v83 = (uint64_t)v111;
  }
  else
  {
    uint64_t v84 = *(void (**)(char *, uint64_t, uint64_t))(v76 + 32);
    uint64_t v85 = v110;
    v84(v110, v75, v77);
    uint64_t v122 = (char *)v69;
    uint64_t v86 = v108;
    sub_10003BFCC((uint64_t)v55, v108, type metadata accessor for SetlistDetailSection);
    char v87 = v105;
    (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v105, v85, v77);
    unint64_t v88 = (*(unsigned __int8 *)(v106 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80);
    unint64_t v89 = (v107 + *(unsigned __int8 *)(v76 + 80) + v88) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80);
    uint64_t v90 = swift_allocObject();
    uint64_t v91 = v86;
    uint64_t v69 = (uint64_t)v122;
    sub_10003D4D4(v91, v90 + v88, type metadata accessor for SetlistDetailSection);
    uint64_t v92 = ((uint64_t (*)(unint64_t, char *, uint64_t))v84)(v90 + v89, v87, v77);
    __chkstk_darwin(v92, v93);
    uint64_t v94 = v109;
    Button.init(action:label:)();
    (*(void (**)(char *, uint64_t))(v76 + 8))(v110, v77);
    uint64_t v81 = v113;
    uint64_t v79 = v114;
    uint64_t v83 = (uint64_t)v111;
    (*(void (**)(char *, char *, uint64_t))(v113 + 32))(v111, v94, v114);
    uint64_t v78 = 0;
    uint64_t v80 = v115;
    uint64_t v82 = (uint64_t)v112;
  }
  uint64_t v96 = (uint64_t)v117;
  uint64_t v95 = v118;
  uint64_t v97 = v125;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56))(v83, v78, 1, v79);
  sub_10000A428(v97, v95, &qword_1001A67C8);
  sub_10000A428(v83, v82, &qword_1001A67B0);
  sub_10000A428(v95, v80, &qword_1001A67C8);
  uint64_t v98 = sub_10000570C(&qword_1001A67D0);
  uint64_t v99 = (uint64_t *)(v80 + *(int *)(v98 + 48));
  uint64_t v100 = v69;
  uint64_t v101 = v121;
  *uint64_t v99 = v69;
  v99[1] = v101;
  char v102 = (char)v120;
  v99[2] = (uint64_t)v120;
  v99[3] = v96;
  sub_10000A428(v82, v80 + *(int *)(v98 + 64), &qword_1001A67B0);
  sub_10003DBF4(v100, v101, v102, v96);
  sub_10000ACE0(v83, &qword_1001A67B0);
  sub_10000ACE0(v97, &qword_1001A67C8);
  sub_10000ACE0(v82, &qword_1001A67B0);
  sub_10003DC38(v100, v101, v102, v96);
  return sub_10000ACE0(v95, &qword_1001A67C8);
}

uint64_t sub_10003ADA4()
{
  uint64_t v0 = type metadata accessor for OpenURLAction();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SetlistDetailSection(0);
  sub_1000264EC((uint64_t)v4);
  OpenURLAction.callAsFunction(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_10003AE90@<X0>(uint64_t a1@<X8>)
{
  sub_10000570C(&qword_1001A64A8);
  State.wrappedValue.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.subheadline.getter();
  static Font.Weight.regular.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v7 = Text.font(_:)();
  uint64_t v9 = v8;
  char v11 = v10;
  swift_release();
  char v12 = v11 & 1;
  sub_10000FCC4(v2, v4, v6);
  swift_bridgeObjectRelease();
  static Color.blue.getter();
  uint64_t v13 = Text.foregroundStyle<A>(_:)();
  uint64_t v15 = v14;
  char v17 = v16;
  uint64_t v19 = v18;
  sub_10000FCC4(v7, v9, v12);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v15;
  *(unsigned char *)(a1 + 16) = v17 & 1;
  *(void *)(a1 + 24) = v19;
  return result;
}

uint64_t sub_10003B040@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v36[1] = a1;
  uint64_t v38 = a2;
  uint64_t v2 = type metadata accessor for ColorScheme();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  char v10 = (char *)v36 - v9;
  uint64_t v11 = type metadata accessor for RoundedRectangle();
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (_OWORD *)((char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = sub_10000570C(&qword_1001A6748);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_10000570C(&qword_1001A6750);
  __chkstk_darwin(v37, v20);
  uint64_t v22 = (char *)v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = (char *)v15 + *(int *)(v12 + 28);
  uint64_t v24 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v25 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 104))(v23, v24, v25);
  __asm { FMOV            V0.2D, #10.0 }
  *uint64_t v15 = _Q0;
  type metadata accessor for SetlistDetailSection(0);
  sub_100026F48((uint64_t)v10);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v7, enum case for ColorScheme.light(_:), v2);
  LOBYTE(v23) = static ColorScheme.== infix(_:_:)();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v3 + 8);
  v31(v7, v2);
  v31(v10, v2);
  if (v23)
  {
    uint64_t v32 = static Color.white.getter();
  }
  else
  {
    if (qword_1001A4E38 != -1) {
      swift_once();
    }
    uint64_t v32 = qword_1001B74D8;
    swift_retain();
  }
  sub_10003BFCC((uint64_t)v15, (uint64_t)v19, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(void *)&v19[*(int *)(v16 + 36)] = v32;
  sub_10003C584((uint64_t)v15, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  if (qword_1001A4E18 != -1) {
    swift_once();
  }
  uint64_t v33 = qword_1001A63D8;
  sub_10000A428((uint64_t)v19, (uint64_t)v22, &qword_1001A6748);
  uint64_t v34 = &v22[*(int *)(v37 + 36)];
  *(void *)uint64_t v34 = v33;
  *(_OWORD *)(v34 + 8) = xmmword_1001542E0;
  *((void *)v34 + 3) = 0x4010000000000000;
  swift_retain();
  sub_10000ACE0((uint64_t)v19, &qword_1001A6748);
  return sub_10000A3C4((uint64_t)v22, v38, &qword_1001A6750);
}

uint64_t sub_10003B414()
{
  sub_10000570C(&qword_1001A64A8);
  State.wrappedValue.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v0 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v2 = v1;
  char v4 = v3 & 1;
  static Font.subheadline.getter();
  static Font.Weight.regular.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v5 = Text.font(_:)();
  uint64_t v7 = v6;
  char v9 = v8;
  swift_release();
  sub_10000FCC4(v0, v2, v4);
  swift_bridgeObjectRelease();
  static Color.blue.getter();
  uint64_t v10 = Text.foregroundStyle<A>(_:)();
  sub_10000FCC4(v5, v7, v9 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10003B5C0(uint64_t a1)
{
  LOBYTE(v6) = 1;
  sub_10000570C(&qword_1001A6728);
  State.wrappedValue.setter();
  sub_10000570C(&qword_1001A64A8);
  State.wrappedValue.getter();
  uint64_t v3 = *(void *)(v6 + 16);
  uint64_t v2 = *(void *)(v6 + 24);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    swift_retain();
    sub_100116F94(v3, v2, 8, 12, 22, 0, 3u, v4);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10003D46C((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10003B6FC(uint64_t a1)
{
  v1[5] = a1;
  type metadata accessor for MainActor();
  v1[6] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[7] = v3;
  v1[8] = v2;
  return _swift_task_switch(sub_10003B794, v3, v2);
}

uint64_t sub_10003B794()
{
  uint64_t v1 = (uint64_t *)v0[5];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  v0[2] = v3;
  v0[3] = v2;
  sub_10000570C(&qword_1001A64A8);
  State.wrappedValue.getter();
  v0[9] = v0[4];
  if (qword_1001A4E20 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_1001A63E0;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[10] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10003B894;
  return sub_100016150(v4);
}

uint64_t sub_10003B894()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v3 = *(void *)(v1 + 56);
  return _swift_task_switch(sub_10003B9D8, v3, v2);
}

uint64_t sub_10003B9D8()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10003BA38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2;
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a1 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v9, v14);
  uint64_t v15 = sub_10000570C(&qword_1001A6678);
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v18 = static HorizontalAlignment.center.getter();
  *((void *)v18 + 1) = 0x402E000000000000;
  v18[16] = 0;
  uint64_t v19 = sub_10000570C(&qword_1001A6680);
  sub_10003865C(v4, &v18[*(int *)(v19 + 44)]);
  sub_10003BFCC((uint64_t)v4, (uint64_t)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SetlistDetailSection);
  unint64_t v20 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v21 = swift_allocObject();
  sub_10003D4D4((uint64_t)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v21 + v20, type metadata accessor for SetlistDetailSection);
  static TaskPriority.userInitiated.getter();
  uint64_t v22 = (char *)(a2 + *(int *)(sub_10000570C(&qword_1001A6698) + 36));
  uint64_t v23 = type metadata accessor for _TaskModifier();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(&v22[*(int *)(v23 + 20)], v11, v6);
  *(void *)uint64_t v22 = &unk_1001A6690;
  *((void *)v22 + 1) = v21;
  sub_10000A428((uint64_t)v18, a2, &qword_1001A6678);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  return sub_10000ACE0((uint64_t)v18, &qword_1001A6678);
}

uint64_t sub_10003BCE0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000370BC(*(uint64_t **)(v1 + 16), a1);
}

unint64_t sub_10003BCF0()
{
  unint64_t result = qword_1001A6520;
  if (!qword_1001A6520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6520);
  }
  return result;
}

uint64_t sub_10003BD48()
{
  uint64_t v1 = (int *)(type metadata accessor for SetlistView(0) - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  swift_release();
  swift_release();
  swift_release();
  uint64_t v3 = v2 + v1[8];
  sub_10000570C(&qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v5 = *(void *)(v4 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4)) {
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    }
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_10003BEC8()
{
  return sub_10003D7E0(type metadata accessor for SetlistView, sub_100037FA4);
}

unint64_t sub_10003BEF4()
{
  unint64_t result = qword_1001A6530;
  if (!qword_1001A6530)
  {
    sub_100004A58(&qword_1001A6528);
    sub_10003BF68();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6530);
  }
  return result;
}

unint64_t sub_10003BF68()
{
  unint64_t result = qword_1001A6538;
  if (!qword_1001A6538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6538);
  }
  return result;
}

uint64_t sub_10003BFCC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10003C034()
{
  return sub_1000154A0(v0[2], v0[3], v0[4]);
}

uint64_t sub_10003C054@<X0>(uint64_t a1@<X8>)
{
  return sub_10003742C(*(uint64_t **)(v1 + 16), a1);
}

unint64_t sub_10003C05C()
{
  unint64_t result = qword_1001A6558;
  if (!qword_1001A6558)
  {
    sub_100004A58(&qword_1001A6550);
    sub_100004A58(&qword_1001A6560);
    sub_100004A58(&qword_1001A6568);
    type metadata accessor for PlainButtonStyle();
    sub_10000A780(&qword_1001A6570, &qword_1001A6568);
    sub_10003D46C(&qword_1001A62B8, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6558);
  }
  return result;
}

uint64_t sub_10003C1B4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10000AC9C(a1, a1[3]);
  uint64_t result = dispatch thunk of MusicItem.id.getter();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_10003C204@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for SetlistView(0) - 8);
  uint64_t v6 = (void *)(v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));

  return sub_100037778(a1, v6, a2);
}

uint64_t sub_10003C284()
{
  uint64_t v1 = (int *)(type metadata accessor for SetlistView(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = *(void *)(*(void *)v1 + 64);
  swift_release();
  swift_release();
  swift_release();
  unint64_t v4 = v0 + v2 + v1[8];
  sub_10000570C(&qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v6 = *(void *)(v5 - 8);
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v4, v5);
    }
  }
  else
  {
    swift_release();
  }
  sub_100007584(v0 + ((v3 + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return swift_deallocObject();
}

uint64_t sub_10003C420()
{
  uint64_t v1 = *(void *)(type metadata accessor for SetlistView(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100037CB8(v0 + v2, v3);
}

uint64_t sub_10003C4AC@<X0>(uint64_t a1@<X8>)
{
  return sub_100037D98(*(void **)(v1 + 16), *(void *)(v1 + 24), a1);
}

unint64_t sub_10003C4B4()
{
  unint64_t result = qword_1001A6598;
  if (!qword_1001A6598)
  {
    sub_100004A58(&qword_1001A6590);
    sub_10003D46C(&qword_1001A65A0, (void (*)(uint64_t))type metadata accessor for SetlistSongRowView);
    sub_10000A780(&qword_1001A65A8, &qword_1001A65B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6598);
  }
  return result;
}

uint64_t sub_10003C584(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10003C5E4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    *(void *)(a1 + 8) = a2[1];
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v8 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v8;
    uint64_t v9 = *(int *)(a3 + 28);
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    *(void *)(a1 + 40) = a2[5];
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_10000570C(&qword_1001A55D8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      void *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = *(int *)(a3 + 32);
    uint64_t v14 = (void *)(a1 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    sub_10000570C(&qword_1001A5468);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    }
    else
    {
      *uint64_t v14 = *v15;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10003C7DC(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for OpenURLAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + *(int *)(a2 + 32);
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    return v8(v6, v7);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_10003C924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  uint64_t v9 = *(int *)(a3 + 28);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  *(void *)(a1 + 24) = v7;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for OpenURLAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  else
  {
    void *v10 = *v11;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = *(int *)(a3 + 32);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  else
  {
    *uint64_t v14 = *v15;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_10003CAC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (void *)(a2 + v6);
    sub_10000ACE0(a1 + v6, &qword_1001A55D8);
    sub_10000570C(&qword_1001A55D8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      *uint64_t v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v10 = *(int *)(a3 + 32);
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (void *)(a2 + v10);
    sub_10000ACE0(a1 + v10, &qword_1001A5468);
    sub_10000570C(&qword_1001A5468);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *uint64_t v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *sub_10003CCB8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for OpenURLAction();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v13, v14, v16);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10003CE44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (const void *)(a2 + v6);
    sub_10000ACE0(a1 + v6, &qword_1001A55D8);
    uint64_t v9 = sub_10000570C(&qword_1001A55D8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
    }
    uint64_t v11 = *(int *)(a3 + 32);
    uint64_t v12 = (void *)(a1 + v11);
    uint64_t v13 = (const void *)(a2 + v11);
    sub_10000ACE0(a1 + v11, &qword_1001A5468);
    uint64_t v14 = sub_10000570C(&qword_1001A5468);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v12, v13, v15);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10003D038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003D04C);
}

uint64_t sub_10003D04C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000570C(qword_1001A55E8);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10000570C(&qword_1001A65B8);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 32);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_10003D180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003D194);
}

void *sub_10003D194(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_10000570C(qword_1001A55E8);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 28);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10000570C(&qword_1001A65B8);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 32);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_10003D2C8()
{
  sub_10003D3E0(319, (unint64_t *)&qword_1001A5678, (void (*)(uint64_t))&type metadata accessor for OpenURLAction);
  if (v0 <= 0x3F)
  {
    sub_10003D3E0(319, (unint64_t *)&qword_1001A6628, (void (*)(uint64_t))&type metadata accessor for ColorScheme);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_10003D3E0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Environment.Content();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_10003D434()
{
  return sub_10003DFCC(&qword_1001A6668, &qword_1001A64A0, &qword_1001A6670, &qword_1001A6480);
}

uint64_t sub_10003D46C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003D4B4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003D4D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10003D53C()
{
  uint64_t v2 = *(void *)(type metadata accessor for SetlistDetailSection(0) - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  unint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *unint64_t v4 = v1;
  v4[1] = sub_10003E098;
  return sub_10003B6FC(v3);
}

uint64_t sub_10003D60C()
{
  uint64_t v1 = type metadata accessor for SetlistDetailSection(0);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v3 = v2 + *(int *)(v1 + 28);
  sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for OpenURLAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = v2 + *(int *)(v1 + 32);
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_10003D7B4()
{
  return sub_10003D7E0(type metadata accessor for SetlistDetailSection, (uint64_t (*)(uint64_t))sub_100039588);
}

uint64_t sub_10003D7E0(uint64_t (*a1)(void), uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *(void *)(a1(0) - 8);
  uint64_t v4 = v2 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return a2(v4);
}

uint64_t sub_10003D85C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000398F0(*(uint64_t **)(v1 + 16), a1);
}

unint64_t sub_10003D864()
{
  unint64_t result = qword_1001A66D8;
  if (!qword_1001A66D8)
  {
    sub_100004A58(&qword_1001A66D0);
    sub_10003D904();
    sub_10000A780(&qword_1001A6700, &qword_1001A6708);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A66D8);
  }
  return result;
}

unint64_t sub_10003D904()
{
  unint64_t result = qword_1001A66E0;
  if (!qword_1001A66E0)
  {
    sub_100004A58(&qword_1001A66E8);
    sub_10000A780(&qword_1001A66F0, &qword_1001A66F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A66E0);
  }
  return result;
}

unint64_t sub_10003D9A4()
{
  unint64_t result = qword_1001A6710;
  if (!qword_1001A6710)
  {
    sub_100004A58(&qword_1001A66C0);
    sub_10000A780(&qword_1001A6718, &qword_1001A66B8);
    sub_10002D7EC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6710);
  }
  return result;
}

uint64_t sub_10003DA50()
{
  return sub_10003D7E0(type metadata accessor for SetlistDetailSection, sub_10003B5C0);
}

unint64_t sub_10003DA7C()
{
  unint64_t result = qword_1001A6780;
  if (!qword_1001A6780)
  {
    sub_100004A58(&qword_1001A6778);
    sub_10003DAF8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6780);
  }
  return result;
}

unint64_t sub_10003DAF8()
{
  unint64_t result = qword_1001A6788;
  if (!qword_1001A6788)
  {
    sub_100004A58(&qword_1001A6790);
    sub_10003DB98();
    sub_10000A780(&qword_1001A5E98, &qword_1001A5EA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6788);
  }
  return result;
}

unint64_t sub_10003DB98()
{
  unint64_t result = qword_1001A6798;
  if (!qword_1001A6798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6798);
  }
  return result;
}

uint64_t sub_10003DBF4(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_10000FCD4(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10003DC38(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_10000FCC4(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10003DC7C()
{
  uint64_t v1 = type metadata accessor for SetlistDetailSection(0);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v11 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  unint64_t v6 = v0 + v2 + *(int *)(v1 + 28);
  sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for OpenURLAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  unint64_t v8 = v0 + v2 + *(int *)(v1 + 32);
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for ColorScheme();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + ((v2 + v11 + v5) & ~v5), v3);

  return swift_deallocObject();
}

uint64_t sub_10003DEC0()
{
  type metadata accessor for SetlistDetailSection(0);
  type metadata accessor for URL();

  return sub_10003ADA4();
}

uint64_t sub_10003DF8C@<X0>(uint64_t a1@<X8>)
{
  return sub_10003AE90(a1);
}

uint64_t sub_10003DF94()
{
  return sub_10003DFCC(&qword_1001A67D8, &qword_1001A6698, qword_1001A67E0, &qword_1001A6678);
}

uint64_t sub_10003DFCC(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    sub_10000A780(a3, a4);
    sub_10003D46C(&qword_1001A5430, (void (*)(uint64_t))&type metadata accessor for _TaskModifier);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10003E09C()
{
  type metadata accessor for MusicViewModel();
  if (v0 <= 0x3F)
  {
    sub_10003F720(319, (unint64_t *)&qword_1001A6628, (void (*)(uint64_t))&type metadata accessor for ColorScheme);
    if (v1 <= 0x3F)
    {
      sub_10003F720(319, (unint64_t *)&qword_1001A5678, (void (*)(uint64_t))&type metadata accessor for OpenURLAction);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void *sub_10003E1E4(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v6;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v7 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = a2[5];
    *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    uint64_t v8 = a2[8];
    *(void *)(a1 + 56) = a2[7];
    *(void *)(a1 + 64) = v8;
    uint64_t v9 = type metadata accessor for MusicViewModel();
    uint64_t v10 = *(int *)(v9 + 44);
    __dst = (char *)v4 + v10;
    uint64_t v32 = v9;
    uint64_t v30 = (char *)a2 + v10;
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v29(v30, 1, v11))
    {
      uint64_t v13 = sub_10000570C(&qword_1001AD200);
      memcpy(__dst, v30, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v30, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    *(void *)((char *)v4 + *(int *)(v32 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v32 + 48));
    uint64_t v15 = a3[9];
    uint64_t v16 = (void *)((char *)v4 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    swift_bridgeObjectRetain();
    sub_10000570C(&qword_1001A5468);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v18 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    }
    else
    {
      *uint64_t v16 = *v17;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v19 = a3[10];
    unint64_t v20 = (void *)((char *)v4 + v19);
    uint64_t v21 = (uint64_t *)((char *)a2 + v19);
    sub_10000570C(&qword_1001A55D8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v22 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
    }
    else
    {
      *unint64_t v20 = *v21;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v23 = a3[11];
    uint64_t v24 = (void *)((char *)v4 + v23);
    uint64_t v25 = (uint64_t *)((char *)a2 + v23);
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    *uint64_t v24 = v26;
    v24[1] = v27;
  }
  swift_retain();
  return v4;
}

uint64_t sub_10003E524(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(type metadata accessor for MusicViewModel() + 44);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(a2 + 36);
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  uint64_t v9 = a1 + *(int *)(a2 + 40);
  sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for OpenURLAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  }
  else
  {
    swift_release();
  }

  return swift_release();
}

uint64_t sub_10003E708(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  uint64_t v8 = type metadata accessor for MusicViewModel();
  uint64_t v9 = *(int *)(v8 + 44);
  __dst = (void *)(a1 + v9);
  uint64_t v30 = v8;
  uint64_t v28 = (const void *)(a2 + v9);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v27 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v27(v28, 1, v10))
  {
    uint64_t v12 = sub_10000570C(&qword_1001AD200);
    memcpy(__dst, v28, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(__dst, v28, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
  }
  *(void *)(a1 + *(int *)(v30 + 48)) = *(void *)(a2 + *(int *)(v30 + 48));
  uint64_t v13 = a3[9];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  swift_bridgeObjectRetain();
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  else
  {
    *uint64_t v14 = *v15;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v17 = a3[10];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = type metadata accessor for OpenURLAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
  }
  else
  {
    *uint64_t v18 = *v19;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v21 = a3[11];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (uint64_t *)(a2 + v21);
  uint64_t v24 = *v23;
  uint64_t v25 = v23[1];
  *uint64_t v22 = v24;
  v22[1] = v25;
  swift_retain();
  return a1;
}

uint64_t sub_10003E9FC(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v28 = a3;
  uint64_t v6 = type metadata accessor for MusicViewModel();
  uint64_t v7 = *(int *)(v6 + 44);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_10000570C(&qword_1001AD200);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  *(void *)(a1 + *(int *)(v6 + 48)) = *(void *)(a2 + *(int *)(v6 + 48));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v16 = v28[9];
    uint64_t v17 = (void *)(a1 + v16);
    uint64_t v18 = (void *)(a2 + v16);
    sub_10000ACE0(a1 + v16, &qword_1001A5468);
    sub_10000570C(&qword_1001A5468);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v19 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    }
    else
    {
      void *v17 = *v18;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = v28[10];
    uint64_t v21 = (void *)(a1 + v20);
    uint64_t v22 = (void *)(a2 + v20);
    sub_10000ACE0(a1 + v20, &qword_1001A55D8);
    sub_10000570C(&qword_1001A55D8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v23 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
    }
    else
    {
      *uint64_t v21 = *v22;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v24 = v28[11];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  *(void *)(a1 + v24) = *(void *)(a2 + v24);
  swift_retain();
  swift_release();
  *(void *)(v25 + 8) = *(void *)(v26 + 8);
  return a1;
}

uint64_t sub_10003EDC4(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v8 = type metadata accessor for MusicViewModel();
  uint64_t v9 = *(int *)(v8 + 44);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = sub_10000570C(&qword_1001AD200);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  *(void *)(a1 + *(int *)(v8 + 48)) = *(void *)(a2 + *(int *)(v8 + 48));
  uint64_t v15 = a3[9];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  uint64_t v18 = sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v19 - 8) + 32))(v16, v17, v19);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  uint64_t v20 = a3[10];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (const void *)(a2 + v20);
  uint64_t v23 = sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v24 = type metadata accessor for OpenURLAction();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v24 - 8) + 32))(v21, v22, v24);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_10003F060(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  uint64_t v32 = a3;
  uint64_t v8 = type metadata accessor for MusicViewModel();
  uint64_t v9 = *(int *)(v8 + 44);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = sub_10000570C(&qword_1001AD200);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
LABEL_7:
  *(void *)(a1 + *(int *)(v8 + 48)) = *(void *)(a2 + *(int *)(v8 + 48));
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v18 = v32[9];
    uint64_t v19 = (void *)(a1 + v18);
    uint64_t v20 = (const void *)(a2 + v18);
    sub_10000ACE0(a1 + v18, &qword_1001A5468);
    uint64_t v21 = sub_10000570C(&qword_1001A5468);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v22 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v22 - 8) + 32))(v19, v20, v22);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
    }
    uint64_t v23 = v32[10];
    uint64_t v24 = (void *)(a1 + v23);
    uint64_t v25 = (const void *)(a2 + v23);
    sub_10000ACE0(a1 + v23, &qword_1001A55D8);
    uint64_t v26 = sub_10000570C(&qword_1001A55D8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v27 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v27 - 8) + 32))(v24, v25, v27);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
    }
  }
  uint64_t v28 = v32[11];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = (void *)(a2 + v28);
  *(void *)(a1 + v28) = *v30;
  swift_release();
  *(void *)(v29 + 8) = v30[1];
  return a1;
}

uint64_t sub_10003F400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003F414);
}

uint64_t sub_10003F414(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MusicViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_10000570C(&qword_1001A65B8);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[9];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = sub_10000570C(qword_1001A55E8);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[10];
    goto LABEL_7;
  }
  unint64_t v16 = *(void *)(a1 + a3[11]);
  if (v16 >= 0xFFFFFFFF) {
    LODWORD(v16) = -1;
  }
  int v17 = v16 - 1;
  if (v17 < 0) {
    int v17 = -1;
  }
  return (v17 + 1);
}

uint64_t sub_10003F58C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003F5A0);
}

uint64_t sub_10003F5A0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for MusicViewModel();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = sub_10000570C(&qword_1001A65B8);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[9];
    }
    else
    {
      uint64_t result = sub_10000570C(qword_1001A55E8);
      if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
      {
        *(void *)(a1 + a4[11]) = a2;
        return result;
      }
      uint64_t v10 = result;
      uint64_t v14 = *(void *)(result - 8);
      uint64_t v15 = a4[10];
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for MusicModule()
{
  return sub_10000B72C();
}

void sub_10003F720(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Environment.Content();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_10003F774()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003F7B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  sub_100004A58(&qword_1001A6868);
  sub_100004A58(&qword_1001A6870);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = type metadata accessor for Array();
  uint64_t v28 = *(void *)(a1 + 24);
  uint64_t v38 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v40 = sub_100004A58(&qword_1001A6878);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for ForEach();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001A6880);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for VStack();
  uint64_t v25 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v25 - v7;
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v26 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v25 - v11;
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v27 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  int v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  uint64_t v20 = (char *)&v25 - v19;
  static HorizontalAlignment.leading.getter();
  uint64_t v31 = v3;
  uint64_t v32 = v28;
  uint64_t v33 = v29;
  VStack.init(alignment:spacing:content:)();
  static Edge.Set.horizontal.getter();
  uint64_t v21 = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v5);
  static Edge.Set.bottom.getter();
  uint64_t v36 = v21;
  uint64_t v37 = &protocol witness table for _PaddingLayout;
  uint64_t v22 = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v9);
  uint64_t v34 = v22;
  uint64_t v35 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable();
  sub_1001221F0(v17, v13);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v27 + 8);
  v23(v17, v13);
  sub_1001221F0(v20, v13);
  return ((uint64_t (*)(char *, uint64_t))v23)(v20, v13);
}

uint64_t sub_10003FCD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v122 = a3;
  uint64_t v139 = a4;
  uint64_t v6 = sub_10000570C(&qword_1001A5EC8);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v138 = (uint64_t)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = sub_10000570C(&qword_1001A62A8);
  __chkstk_darwin(v128, v9);
  uint64_t v130 = (uint64_t)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v132, v11);
  uint64_t v135 = (char *)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = sub_10000570C(&qword_1001A6888);
  __chkstk_darwin(v123, v13);
  uint64_t v142 = (uint64_t *)((char *)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v137 = sub_10000570C(&qword_1001A6890);
  __chkstk_darwin(v137, v15);
  uint64_t v136 = (char *)&v110 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004A58(&qword_1001A6870);
  uint64_t v17 = type metadata accessor for Array();
  *(void *)&long long v120 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v19 = sub_100004A58(&qword_1001A6878);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v150 = v17;
  *((void *)&v150 + 1) = AssociatedTypeWitness;
  *(void *)&long long v151 = v19;
  *((void *)&v151 + 1) = WitnessTable;
  uint64_t v152 = AssociatedConformanceWitness;
  type metadata accessor for ForEach();
  swift_getTupleTypeMetadata2();
  uint64_t v117 = type metadata accessor for TupleView();
  uint64_t v118 = swift_getWitnessTable();
  uint64_t v115 = type metadata accessor for VStack();
  uint64_t v119 = *(void *)(v115 - 8);
  __chkstk_darwin(v115, v115);
  uint64_t v114 = (char *)&v110 - v22;
  uint64_t v116 = type metadata accessor for ModifiedContent();
  uint64_t v121 = *(void *)(v116 - 8);
  __chkstk_darwin(v116, v116);
  uint64_t v113 = (char *)&v110 - v23;
  uint64_t v24 = type metadata accessor for ModifiedContent();
  uint64_t v126 = *(void *)(v24 - 8);
  __chkstk_darwin(v24, v25);
  uint64_t v141 = (char *)&v110 - v26;
  sub_100004A58(&qword_1001A6880);
  uint64_t v127 = v24;
  uint64_t v134 = type metadata accessor for ModifiedContent();
  uint64_t v129 = *(void *)(v134 - 8);
  uint64_t v28 = __chkstk_darwin(v134, v27);
  uint64_t v133 = (char *)&v110 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28, v30);
  unint64_t v131 = (char *)&v110 - v31;
  uint64_t v125 = (char *)type metadata accessor for AccessibilityTraits();
  uint64_t v112 = *((void *)v125 - 1);
  __chkstk_darwin(v125, v32);
  uint64_t v110 = (char *)&v110 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = sub_10000570C(&qword_1001A6868);
  uint64_t v35 = __chkstk_darwin(v124, v34);
  uint64_t v37 = (char *)&v110 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35, v38);
  uint64_t v140 = (uint64_t)&v110 - v39;
  uint64_t v111 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v40 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v42 = v41;
  char v44 = v43 & 1;
  static Font.Weight.bold.getter();
  uint64_t v45 = Text.fontWeight(_:)();
  uint64_t v47 = v46;
  LOBYTE(v19) = v48 & 1;
  sub_10000FCC4(v40, v42, v44);
  swift_bridgeObjectRelease();
  static Font.title2.getter();
  uint64_t v49 = Text.font(_:)();
  uint64_t v51 = v50;
  char v53 = v52;
  swift_release();
  sub_10000FCC4(v45, v47, v19);
  swift_bridgeObjectRelease();
  uint64_t v54 = Text.accessibilityHeading(_:)();
  uint64_t v56 = v55;
  LOBYTE(v19) = v57;
  uint64_t v59 = v58;
  sub_10000FCC4(v49, v51, v53 & 1);
  swift_bridgeObjectRelease();
  *(void *)&long long v150 = v54;
  *((void *)&v150 + 1) = v56;
  LOBYTE(v151) = v19 & 1;
  *((void *)&v151 + 1) = v59;
  long long v60 = v110;
  static AccessibilityTraits.isHeader.getter();
  View.accessibility(addTraits:)();
  (*(void (**)(char *, char *))(v112 + 8))(v60, v125);
  sub_10000FCC4(v150, *((uint64_t *)&v150 + 1), v151);
  swift_bridgeObjectRelease();
  uint64_t v125 = v37;
  sub_10000A3C4((uint64_t)v37, v140, &qword_1001A6868);
  uint64_t v143 = v120;
  uint64_t v144 = v122;
  uint64_t v145 = v111;
  static HorizontalAlignment.center.getter();
  long long v61 = v114;
  VStack.init(alignment:spacing:content:)();
  static Edge.Set.horizontal.getter();
  uint64_t v62 = v115;
  uint64_t v63 = swift_getWitnessTable();
  uint64_t v64 = v113;
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v119 + 8))(v61, v62);
  static Edge.Set.top.getter();
  v149[6] = v63;
  v149[7] = &protocol witness table for _PaddingLayout;
  uint64_t v65 = v116;
  uint64_t v122 = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v121 + 8))(v64, v65);
  if (qword_1001A4E50 != -1) {
    swift_once();
  }
  uint64_t v66 = qword_1001B74F0;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v68 = v132;
  uint64_t v69 = v135;
  uint64_t v70 = &v135[*(int *)(v132 + 20)];
  uint64_t v71 = enum case for RoundedCornerStyle.continuous(_:);
  LODWORD(v121) = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v72 = type metadata accessor for RoundedCornerStyle();
  uint64_t v73 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v72 - 8) + 104);
  v73(v70, v71, v72);
  __asm { FMOV            V0.2D, #12.0 }
  long long v120 = _Q0;
  *(_OWORD *)uint64_t v69 = _Q0;
  uint64_t v79 = v130;
  sub_1000243EC((uint64_t)v69, v130);
  *(_WORD *)(v79 + *(int *)(v128 + 36)) = 256;
  uint64_t v80 = v142;
  sub_10000A428(v79, (uint64_t)v142 + *(int *)(v123 + 36), &qword_1001A62A8);
  *uint64_t v80 = KeyPath;
  v80[1] = v66;
  swift_retain_n();
  swift_retain();
  sub_10000ACE0(v79, &qword_1001A62A8);
  sub_100024450((uint64_t)v69);
  swift_release();
  swift_release();
  v73(&v69[*(int *)(v68 + 20)], v121, v72);
  *(_OWORD *)uint64_t v69 = v120;
  static Color.black.getter();
  uint64_t v81 = Color.opacity(_:)();
  swift_release();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v82 = v138;
  sub_1000243EC((uint64_t)v69, v138);
  uint64_t v83 = v82 + *(int *)(sub_10000570C(&qword_1001A5ED0) + 36);
  long long v84 = v151;
  *(_OWORD *)uint64_t v83 = v150;
  *(_OWORD *)(v83 + 16) = v84;
  *(void *)(v83 + 32) = v152;
  uint64_t v85 = sub_10000570C(&qword_1001A5ED8);
  *(void *)(v82 + *(int *)(v85 + 52)) = v81;
  *(_WORD *)(v82 + *(int *)(v85 + 56)) = 256;
  uint64_t v86 = static Alignment.center.getter();
  uint64_t v88 = v87;
  unint64_t v89 = (uint64_t *)(v82 + *(int *)(sub_10000570C(&qword_1001A5EE0) + 36));
  *unint64_t v89 = v86;
  v89[1] = v88;
  sub_100024450((uint64_t)v69);
  uint64_t v90 = static Alignment.center.getter();
  uint64_t v92 = v91;
  uint64_t v93 = (uint64_t)v136;
  uint64_t v94 = (uint64_t)&v136[*(int *)(v137 + 36)];
  sub_10000A428(v82, v94, &qword_1001A5EC8);
  uint64_t v95 = (uint64_t *)(v94 + *(int *)(sub_10000570C(&qword_1001A6898) + 36));
  *uint64_t v95 = v90;
  v95[1] = v92;
  uint64_t v96 = (uint64_t)v142;
  sub_10000A428((uint64_t)v142, v93, &qword_1001A6888);
  sub_10000ACE0(v82, &qword_1001A5EC8);
  sub_10000ACE0(v96, &qword_1001A6888);
  static Alignment.center.getter();
  v149[4] = v122;
  v149[5] = &protocol witness table for _PaddingLayout;
  uint64_t v97 = v127;
  uint64_t v98 = swift_getWitnessTable();
  sub_100042464();
  uint64_t v99 = v133;
  uint64_t v100 = v141;
  View.background<A>(_:alignment:)();
  sub_10000ACE0(v93, &qword_1001A6890);
  (*(void (**)(char *, uint64_t))(v126 + 8))(v100, v97);
  uint64_t v101 = sub_10000A780(&qword_1001A68D8, &qword_1001A6880);
  v149[2] = v98;
  v149[3] = v101;
  uint64_t v102 = v134;
  uint64_t v103 = swift_getWitnessTable();
  uint64_t v104 = v131;
  sub_1001221F0(v99, v102);
  uint64_t v105 = v129;
  uint64_t v106 = *(void (**)(char *, uint64_t))(v129 + 8);
  v106(v99, v102);
  uint64_t v107 = v140;
  uint64_t v108 = (uint64_t)v125;
  sub_10000A428(v140, (uint64_t)v125, &qword_1001A6868);
  v149[0] = v108;
  (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v99, v104, v102);
  v149[1] = v99;
  v148[0] = v124;
  v148[1] = v102;
  unint64_t v146 = sub_100042644();
  uint64_t v147 = v103;
  sub_1001231A4((uint64_t)v149, 2uLL, (uint64_t)v148);
  v106(v104, v102);
  sub_10000ACE0(v107, &qword_1001A6868);
  v106(v99, v102);
  return sub_10000ACE0(v108, &qword_1001A6868);
}

uint64_t sub_100040B9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v52 = a4;
  uint64_t v51 = type metadata accessor for MusicModule();
  uint64_t v7 = *(void *)(v51 - 8);
  uint64_t v50 = *(void *)(v7 + 64);
  __chkstk_darwin(v51, v8);
  uint64_t v47 = (char *)&v40 - v9;
  uint64_t v10 = type metadata accessor for Array();
  uint64_t v46 = v10;
  uint64_t v44 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v45 = AssociatedTypeWitness;
  uint64_t v12 = sub_100004A58(&qword_1001A6878);
  uint64_t v43 = v12;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v42 = WitnessTable;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v56 = v10;
  char v57 = (char *)AssociatedTypeWitness;
  uint64_t v58 = v12;
  uint64_t v59 = WitnessTable;
  uint64_t v60 = AssociatedConformanceWitness;
  uint64_t v15 = type metadata accessor for ForEach();
  uint64_t v49 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15, v16);
  uint64_t v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v20);
  uint64_t v41 = (char *)&v40 - v21;
  uint64_t v48 = sub_10000570C(&qword_1001A6870);
  uint64_t v23 = __chkstk_darwin(v48, v22);
  uint64_t v40 = (uint64_t)&v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v25);
  uint64_t v27 = (char *)&v40 - v26;
  *(void *)uint64_t v27 = static VerticalAlignment.center.getter();
  *((void *)v27 + 1) = 0;
  v27[16] = 1;
  uint64_t v28 = sub_10000570C(&qword_1001A68F0);
  sub_100041060(a1, a2, a3, (uint64_t)&v27[*(int *)(v28 + 44)]);
  type metadata accessor for MusicViewModel();
  uint64_t v56 = sub_100065500();
  uint64_t v29 = v47;
  uint64_t v30 = v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v47, a1, v51);
  unint64_t v31 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = a2;
  *(void *)(v32 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v32 + v31, v29, v30);
  unint64_t v33 = sub_100042A00();
  ForEach<>.init(_:content:)();
  v55[2] = v33;
  uint64_t v34 = swift_getWitnessTable();
  uint64_t v35 = v41;
  sub_1001221F0(v19, v15);
  uint64_t v36 = v49;
  uint64_t v37 = *(void (**)(char *, uint64_t))(v49 + 8);
  v37(v19, v15);
  uint64_t v38 = v40;
  sub_10000A428((uint64_t)v27, v40, &qword_1001A6870);
  uint64_t v56 = v38;
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v19, v35, v15);
  char v57 = v19;
  v55[0] = v48;
  v55[1] = v15;
  uint64_t v53 = sub_10000A780(&qword_1001A6918, &qword_1001A6870);
  uint64_t v54 = v34;
  sub_1001231A4((uint64_t)&v56, 2uLL, (uint64_t)v55);
  v37(v35, v15);
  sub_10000ACE0((uint64_t)v27, &qword_1001A6870);
  v37(v19, v15);
  return sub_10000ACE0(v38, &qword_1001A6870);
}

uint64_t sub_100041060@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v95 = a3;
  uint64_t v103 = a2;
  uint64_t v6 = type metadata accessor for MusicModule();
  uint64_t v78 = *(void *)(v6 - 8);
  uint64_t v77 = *(void *)(v78 + 64);
  __chkstk_darwin(v6, v7);
  uint64_t v99 = (char *)&v72 - v8;
  uint64_t v9 = sub_10000570C(&qword_1001A56B0);
  uint64_t v101 = *(void *)(v9 - 8);
  uint64_t v102 = v9;
  __chkstk_darwin(v9, v10);
  uint64_t v80 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v81 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v96 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = v19;
  __chkstk_darwin(v18, v20);
  uint64_t v98 = (char *)&v72 - v21;
  uint64_t v22 = sub_10000570C(&qword_1001A67B0);
  uint64_t v24 = __chkstk_darwin(v22 - 8, v23);
  uint64_t v100 = (uint64_t)&v72 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v26);
  uint64_t v97 = (char *)&v72 - v27;
  uint64_t v28 = type metadata accessor for ColorScheme();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v31 = __chkstk_darwin(v28, v30);
  unint64_t v33 = (char *)&v72 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31, v34);
  uint64_t v36 = (char *)&v72 - v35;
  uint64_t v79 = v6;
  sub_100026F48((uint64_t)&v72 - v35);
  (*(void (**)(char *, void, uint64_t))(v29 + 104))(v33, enum case for ColorScheme.light(_:), v28);
  static ColorScheme.== infix(_:_:)();
  uint64_t v37 = *(void (**)(char *, uint64_t))(v29 + 8);
  v37(v33, v28);
  v37(v36, v28);
  uint64_t v38 = Image.init(_:bundle:)();
  uint64_t v39 = static Alignment.leading.getter();
  sub_100123540(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v104, 0.0, 1, 0.0, 1, v39, v40, v38);
  swift_release();
  uint64_t v41 = v104[0];
  uint64_t v42 = v104[1];
  int v94 = v105;
  uint64_t v93 = v106;
  int v92 = v107;
  uint64_t v91 = v108;
  int v90 = v109;
  uint64_t v89 = v110;
  int v88 = v111;
  uint64_t v87 = v112;
  int v86 = v113;
  uint64_t v85 = v114;
  int v84 = v115;
  uint64_t v83 = v116;
  uint64_t v82 = v117;
  uint64_t v43 = v95;
  uint64_t v44 = type metadata accessor for MusicViewModel();
  sub_100065374(v44, (uint64_t)v15);
  uint64_t v45 = v81;
  uint64_t v46 = v16;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v15, 1, v16) == 1)
  {
    sub_10000ACE0((uint64_t)v15, &qword_1001AD200);
    uint64_t v47 = 1;
    uint64_t v49 = v101;
    uint64_t v48 = v102;
    uint64_t v50 = (uint64_t)v97;
  }
  else
  {
    uint64_t v75 = v41;
    uint64_t v73 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
    uint64_t v51 = v98;
    uint64_t v72 = v46;
    v73(v98, v15, v46);
    uint64_t v52 = v78;
    uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 16);
    uint64_t v54 = a1;
    uint64_t v74 = a1;
    uint64_t v55 = v79;
    v53(v99, v54, v79);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v96, v51, v46);
    unint64_t v56 = (*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
    uint64_t v57 = *(unsigned __int8 *)(v45 + 80);
    unint64_t v58 = v77 + v57 + v56;
    uint64_t v77 = v42;
    unint64_t v59 = v58 & ~v57;
    uint64_t v60 = swift_allocObject();
    *(void *)(v60 + 16) = v103;
    *(void *)(v60 + 24) = v43;
    (*(void (**)(unint64_t, char *, uint64_t))(v52 + 32))(v60 + v56, v99, v55);
    unint64_t v61 = v60 + v59;
    uint64_t v42 = v77;
    uint64_t v62 = v72;
    uint64_t v63 = ((uint64_t (*)(unint64_t, char *, uint64_t))v73)(v61, v96, v72);
    uint64_t v41 = v75;
    __chkstk_darwin(v63, v64);
    uint64_t v65 = v80;
    Button.init(action:label:)();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v98, v62);
    uint64_t v67 = v101;
    uint64_t v66 = v102;
    uint64_t v50 = (uint64_t)v97;
    (*(void (**)(char *, char *, uint64_t))(v101 + 32))(v97, v65, v102);
    uint64_t v47 = 0;
    uint64_t v48 = v66;
    uint64_t v49 = v67;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56))(v50, v47, 1, v48);
  uint64_t v68 = v100;
  sub_10000A428(v50, v100, &qword_1001A67B0);
  *(void *)a4 = v41;
  *(void *)(a4 + 8) = v42;
  *(unsigned char *)(a4 + 16) = v94;
  *(void *)(a4 + 24) = v93;
  *(unsigned char *)(a4 + 32) = v92;
  *(void *)(a4 + 40) = v91;
  *(unsigned char *)(a4 + 48) = v90;
  *(void *)(a4 + 56) = v89;
  *(unsigned char *)(a4 + 64) = v88;
  *(void *)(a4 + 72) = v87;
  *(unsigned char *)(a4 + 80) = v86;
  *(void *)(a4 + 88) = v85;
  *(unsigned char *)(a4 + 96) = v84;
  uint64_t v69 = v82;
  *(void *)(a4 + 104) = v83;
  *(void *)(a4 + 112) = v69;
  uint64_t v70 = sub_10000570C(&qword_1001A6930);
  sub_10000A428(v68, a4 + *(int *)(v70 + 48), &qword_1001A67B0);
  swift_retain();
  sub_10000ACE0(v50, &qword_1001A67B0);
  sub_10000ACE0(v68, &qword_1001A67B0);
  return swift_release();
}

uint64_t sub_100041918@<X0>(uint64_t a1@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_1000419AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v98 = a5;
  uint64_t v95 = type metadata accessor for MusicModule();
  uint64_t v94 = *(void *)(v95 - 8);
  uint64_t v93 = *(void *)(v94 + 64);
  __chkstk_darwin(v95, v9);
  int v92 = (char *)&v73 - v10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v83 = type metadata accessor for Optional();
  uint64_t v82 = *(void *)(v83 - 8);
  uint64_t v12 = __chkstk_darwin(v83, v11);
  uint64_t v85 = (char *)&v73 - v13;
  uint64_t v14 = *(void *)(a3 - 8);
  __chkstk_darwin(v12, v15);
  uint64_t v17 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = sub_10000570C(&qword_1001A6920);
  uint64_t v96 = *(void *)(v97 - 8);
  uint64_t v19 = __chkstk_darwin(v97, v18);
  uint64_t v91 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v21);
  int v90 = (char *)&v73 - v22;
  uint64_t v23 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v23 - 8, v24);
  uint64_t v26 = (char *)&v73 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for URL();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v30 = __chkstk_darwin(v27, v29);
  int v88 = (char *)&v73 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = v31;
  __chkstk_darwin(v30, v32);
  uint64_t v34 = (char *)&v73 - v33;
  uint64_t v84 = type metadata accessor for MusicViewModel();
  uint64_t v89 = a2;
  sub_1000655CC(v84, (uint64_t)v26);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) == 1)
  {
    sub_10000ACE0((uint64_t)v26, &qword_1001AD200);
    uint64_t v35 = 1;
    uint64_t v36 = v98;
    uint64_t v37 = v97;
    uint64_t v38 = v96;
  }
  else
  {
    uint64_t v81 = v28;
    uint64_t v39 = *(void (**)(unint64_t, char *, uint64_t))(v28 + 32);
    uint64_t v78 = v27;
    uint64_t v80 = v28 + 32;
    uint64_t v79 = v39;
    v39((unint64_t)v34, v26, v27);
    uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 48))(a3, a4);
    uint64_t v42 = v41;
    uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 64))(a3, a4);
    uint64_t v45 = v44;
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a1, a3);
    if (v45)
    {
      uint64_t v74 = v45;
      uint64_t v75 = v43;
    }
    else
    {
      uint64_t v75 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
      uint64_t v74 = v46;
    }
    uint64_t v47 = v85;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, a3);
    (*(void (**)(uint64_t, uint64_t))(a4 + 72))(a3, a4);
    uint64_t v48 = AssociatedTypeWitness;
    uint64_t v49 = *(void *)(AssociatedTypeWitness - 8);
    int v50 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, AssociatedTypeWitness);
    uint64_t v77 = a4;
    uint64_t v51 = v40;
    uint64_t v52 = v34;
    if (v50 == 1)
    {
      (*(void (**)(char *, uint64_t))(v82 + 8))(v47, v83);
      *(void *)&long long v101 = 0;
      long long v99 = 0u;
      long long v100 = 0u;
    }
    else
    {
      *((void *)&v100 + 1) = v48;
      *(void *)&long long v101 = swift_getAssociatedConformanceWitness();
      uint64_t v53 = sub_10000A7C4((uint64_t *)&v99);
      (*(void (**)(uint64_t *, char *, uint64_t))(v49 + 32))(v53, v47, v48);
    }
    uint64_t v54 = v75;
    uint64_t v55 = v74;
    uint64_t v56 = v89;
    char v57 = sub_10006575C(a1, v84);
    *(void *)&long long v103 = v51;
    *((void *)&v103 + 1) = v42;
    *(void *)&long long v104 = v54;
    *((void *)&v104 + 1) = v55;
    sub_10000A3C4((uint64_t)&v99, (uint64_t)&v105, &qword_1001A6928);
    v106[24] = v57 & 1;
    long long v101 = v105;
    *(_OWORD *)uint64_t v102 = *(_OWORD *)v106;
    long long v99 = v103;
    long long v100 = v104;
    *(_OWORD *)&v102[9] = *(_OWORD *)&v106[9];
    sub_100042B9C((uint64_t)&v99, (uint64_t)&v103);
    char v107 = 0;
    sub_100042BF8((uint64_t)&v99);
    uint64_t v58 = v94;
    unint64_t v59 = v92;
    uint64_t v60 = v95;
    (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))(v92, v56, v95);
    uint64_t v61 = v81;
    uint64_t v62 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
    uint64_t v63 = v88;
    uint64_t v76 = v52;
    uint64_t v64 = v78;
    v62(v88, v52, v78);
    unint64_t v65 = (*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
    unint64_t v66 = (v93 + *(unsigned __int8 *)(v61 + 80) + v65) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
    uint64_t v67 = swift_allocObject();
    uint64_t v68 = v77;
    *(void *)(v67 + 16) = a3;
    *(void *)(v67 + 24) = v68;
    (*(void (**)(unint64_t, char *, uint64_t))(v58 + 32))(v67 + v65, v59, v60);
    v79(v67 + v66, v63, v64);
    sub_10000570C(&qword_1001A6900);
    sub_100042AA8();
    uint64_t v69 = v91;
    View.onTapGesture(count:perform:)();
    swift_release();
    sub_10000ACE0((uint64_t)&v103, &qword_1001A6900);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v76, v64);
    uint64_t v38 = v96;
    uint64_t v70 = *(void (**)(char *, char *, uint64_t))(v96 + 32);
    uint64_t v71 = v90;
    uint64_t v37 = v97;
    v70(v90, v69, v97);
    uint64_t v36 = v98;
    v70(v98, v71, v37);
    uint64_t v35 = 0;
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v36, v35, 1, v37);
}

uint64_t sub_100042294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for OpenURLAction();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for MusicModule();
  sub_1000264EC((uint64_t)v11);
  OpenURLAction.callAsFunction(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  uint64_t v13 = *(void **)(a1 + *(int *)(v12 + 44));
  if (v13)
  {
    swift_retain();
    sub_100065C68(a5, 0, 3u, v13);
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100042C58((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100042444@<X0>(uint64_t a1@<X8>)
{
  return sub_10003FCD0(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100042450@<X0>(uint64_t a1@<X8>)
{
  return sub_100040B9C(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_100042464()
{
  unint64_t result = qword_1001A68A0;
  if (!qword_1001A68A0)
  {
    sub_100004A58(&qword_1001A6890);
    sub_100042504();
    sub_10000A780(&qword_1001A68D0, &qword_1001A6898);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A68A0);
  }
  return result;
}

unint64_t sub_100042504()
{
  unint64_t result = qword_1001A68A8;
  if (!qword_1001A68A8)
  {
    sub_100004A58(&qword_1001A6888);
    sub_1000425A4();
    sub_10000A780(&qword_1001A62A0, &qword_1001A62A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A68A8);
  }
  return result;
}

unint64_t sub_1000425A4()
{
  unint64_t result = qword_1001A68B0;
  if (!qword_1001A68B0)
  {
    sub_100004A58(&qword_1001A68B8);
    sub_10003DB98();
    sub_10000A780(&qword_1001A68C0, &qword_1001A68C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A68B0);
  }
  return result;
}

unint64_t sub_100042644()
{
  unint64_t result = qword_1001A68E0;
  if (!qword_1001A68E0)
  {
    sub_100004A58(&qword_1001A6868);
    sub_100042C58((unint64_t *)&qword_1001A68E8, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A68E0);
  }
  return result;
}

uint64_t sub_1000426F0()
{
  uint64_t v1 = type metadata accessor for MusicModule();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = v2 + *(int *)(type metadata accessor for MusicViewModel() + 44);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  }
  swift_bridgeObjectRelease();
  uint64_t v6 = v2 + *(int *)(v1 + 36);
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = v2 + *(int *)(v1 + 40);
  sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for OpenURLAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100042964@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for MusicModule() - 8);
  uint64_t v8 = v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_1000419AC(a1, v8, v5, v6, a2);
}

unint64_t sub_100042A00()
{
  unint64_t result = qword_1001A68F8;
  if (!qword_1001A68F8)
  {
    sub_100004A58(&qword_1001A6878);
    sub_100004A58(&qword_1001A6900);
    sub_100042AA8();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A68F8);
  }
  return result;
}

unint64_t sub_100042AA8()
{
  unint64_t result = qword_1001A6908;
  if (!qword_1001A6908)
  {
    sub_100004A58(&qword_1001A6900);
    sub_100042B48();
    sub_10000A780(&qword_1001A65A8, &qword_1001A65B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6908);
  }
  return result;
}

unint64_t sub_100042B48()
{
  unint64_t result = qword_1001A6910;
  if (!qword_1001A6910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6910);
  }
  return result;
}

uint64_t sub_100042B9C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100042BF8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100042C50()
{
  return sub_100042F7C(14);
}

uint64_t sub_100042C58(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100042CA4()
{
  uint64_t v1 = type metadata accessor for MusicModule();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v14 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v0 + v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v0 + v3 + *(int *)(type metadata accessor for MusicViewModel() + 44);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = v7 + *(int *)(v1 + 36);
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  }
  else
  {
    swift_release();
  }
  uint64_t v11 = v7 + *(int *)(v1 + 40);
  sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for OpenURLAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    swift_release();
  }
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + ((v3 + v14 + v6) & ~v6), v4);

  return swift_deallocObject();
}

uint64_t sub_100042F74()
{
  return sub_100042F7C(12);
}

uint64_t sub_100042F7C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(type metadata accessor for MusicModule() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(type metadata accessor for URL() - 8);
  return sub_100042294(v1 + v6, v1 + ((v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), v3, v4, a1);
}

uint64_t sub_100043060@<X0>(uint64_t a1@<X8>)
{
  return sub_100041918(a1);
}

uint64_t sub_10004306C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1000432E4()
{
  if ([v0 _remoteViewControllerProxy])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v3, 0, sizeof(v3));
  }
  sub_1000449C8((uint64_t)v3, (uint64_t)v4);
  if (v5)
  {
    sub_10000570C(&qword_1001A6980);
    if (swift_dynamicCast()) {
      return v2;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_10000ACE0((uint64_t)v4, (uint64_t *)&unk_1001A9610);
    return 0;
  }
}

void sub_1000433B0(void *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for EventRootView();
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = (uint64_t *)((char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v50 - v12;
  uint64_t v14 = sub_10000570C(&qword_1001A6998);
  uint64_t v16 = __chkstk_darwin(v14, v15);
  uint64_t v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  uint64_t v21 = (char *)&v50 - v20;
  if (!a1)
  {
    __break(1u);
    goto LABEL_30;
  }
  id v22 = [a1 userInfo];
  if (!v22)
  {
    if (qword_1001A4F38 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100017378(v29, (uint64_t)qword_1001B75B8);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Remote alert view configuration missing user info", v32, 2u);
      swift_slowDealloc();
    }

    if (a2) {
      goto LABEL_22;
    }
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v23 = v22;
  uint64_t v55 = a3;
  uint64_t v24 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v56 = 0xD000000000000013;
  unint64_t v57 = 0x800000010015DE30;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v24 + 16) && (unint64_t v25 = sub_1000B8248((uint64_t)v58), (v26 & 1) != 0))
  {
    sub_100044E1C(*(void *)(v24 + 56) + 32 * v25, (uint64_t)&v59);
  }
  else
  {
    long long v59 = 0u;
    long long v60 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_100044BDC((uint64_t)v58);
  if (!*((void *)&v60 + 1))
  {
LABEL_16:
    sub_10000ACE0((uint64_t)&v59, (uint64_t *)&unk_1001A9610);
LABEL_17:
    if (qword_1001A4F38 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_100017378(v33, (uint64_t)qword_1001B75B8);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Remote alert view configuration missing a route type", v36, 2u);
      swift_slowDealloc();
    }

    if (a2)
    {
LABEL_22:
      a2();
      return;
    }
LABEL_30:
    __break(1u);
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_17;
  }
  uint64_t v53 = a2;
  uint64_t v28 = v56;
  unint64_t v27 = v57;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  type metadata accessor for RemoteViewConfiguration();
  sub_100044C30(&qword_1001A69A0, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  unint64_t v51 = v27;
  uint64_t v52 = v28;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  uint64_t v50 = v58[0];
  id v37 = [v54 view];
  if (!v37) {
    goto LABEL_31;
  }
  uint64_t v38 = v37;
  id v39 = [v37 window];

  if (!v39) {
    goto LABEL_27;
  }
  id v40 = [v39 _rootSheetPresentationController];

  if (v40)
  {
    [v40 _setShouldScaleDownBehindDescendantSheets:0];

LABEL_27:
    id v41 = v54;
    [v54 setNeedsStatusBarAppearanceUpdate];
    sub_100044384();
    sub_100044C30((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t *v10 = EnvironmentObject.init()();
    v10[1] = v42;
    uint64_t v43 = (uint64_t *)((char *)v10 + *(int *)(v6 + 20));
    uint64_t *v43 = swift_getKeyPath();
    sub_10000570C(&qword_1001A5470);
    swift_storeEnumTagMultiPayload();
    sub_100044CF8((uint64_t)v10, (uint64_t)v13);
    uint64_t v44 = static ObservableObject.environmentStore.getter();
    sub_100044D5C((uint64_t)v13, (uint64_t)v21);
    uint64_t v45 = (uint64_t *)&v21[*(int *)(v14 + 36)];
    uint64_t v46 = v50;
    *uint64_t v45 = v44;
    v45[1] = v46;
    swift_retain();
    sub_100044DC0((uint64_t)v13);
    uint64_t v47 = (char *)objc_allocWithZone((Class)sub_10000570C(&qword_1001A69A8));
    *(void *)&v47[*(void *)(qword_1001B7510 + (swift_isaMask & *(void *)v47) + 16) + 8] = 0;
    swift_unknownObjectWeakInit();
    sub_10000A428((uint64_t)v21, (uint64_t)v18, &qword_1001A6998);
    uint64_t v48 = (void *)UIHostingController.init(rootView:)();
    sub_10000ACE0((uint64_t)v21, &qword_1001A6998);
    *(void *)((char *)v48 + *(void *)(qword_1001B7510 + (swift_isaMask & *v48) + 16) + 8) = &off_100196748;
    swift_unknownObjectWeakAssign();
    id v49 = [v41 presentViewController:v48 animated:1 completion:0];
    if (v53)
    {
      ((void (*)(id))v53)(v49);
      swift_release();

      sub_100044C78(v52, v51);
      return;
    }
    goto LABEL_32;
  }
LABEL_33:
  __break(1u);
}

void sub_100043CE8(uint64_t a1)
{
  uint64_t v44 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v44 - 8);
  __chkstk_darwin(v44, v3);
  uint64_t v43 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v42 - 8);
  __chkstk_darwin(v42, v6);
  id v41 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.makeIterator()();
      sub_100044A30(0, &qword_1001A6988);
      sub_100044A6C();
      Set.Iterator.init(_cocoa:)();
      a1 = v49[4];
      uint64_t v37 = v49[5];
      uint64_t v8 = v49[6];
      uint64_t v9 = v49[7];
      unint64_t v10 = v49[8];
    }
    else
    {
      uint64_t v11 = -1 << *(unsigned char *)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 56);
      uint64_t v37 = a1 + 56;
      uint64_t v13 = ~v11;
      uint64_t v14 = -v11;
      if (v14 < 64) {
        uint64_t v15 = ~(-1 << v14);
      }
      else {
        uint64_t v15 = -1;
      }
      unint64_t v10 = v15 & v12;
      swift_bridgeObjectRetain();
      uint64_t v8 = v13;
      uint64_t v9 = 0;
    }
    v35[3] = a1 & 0x7FFFFFFFFFFFFFFFLL;
    v35[1] = v8;
    int64_t v36 = (unint64_t)(v8 + 64) >> 6;
    id v40 = v49;
    id v39 = (void (**)(char *, uint64_t))(v2 + 8);
    uint64_t v38 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v16 = &off_1001A3000;
    v35[2] = (char *)&type metadata for Swift.AnyObject + 8;
    uint64_t v18 = v43;
    uint64_t v17 = v44;
    if ((a1 & 0x8000000000000000) == 0) {
      goto LABEL_14;
    }
LABEL_11:
    uint64_t v27 = __CocoaSet.Iterator.next()();
    if (v27)
    {
      uint64_t v47 = (void *)v27;
      sub_100044A30(0, &qword_1001A6988);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v28 = (id)aBlock[0];
      swift_unknownObjectRelease();
      uint64_t v29 = v9;
      uint64_t v30 = v10;
      while (v28)
      {
        if (([v28 (SEL)v16[488]] & 0x10) != 0)
        {
          sub_100044A30(0, (unint64_t *)&qword_1001A6960);
          unint64_t v46 = v30;
          uint64_t v19 = (void *)static OS_dispatch_queue.main.getter();
          uint64_t v20 = swift_allocObject();
          uint64_t v21 = v45;
          *(void *)(v20 + 16) = v45;
          v49[2] = sub_100044E80;
          v49[3] = v20;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          v49[0] = sub_100044790;
          v49[1] = &unk_1001967D0;
          id v22 = _Block_copy(aBlock);
          id v23 = v21;
          uint64_t v24 = a1;
          unint64_t v25 = v41;
          static DispatchQoS.unspecified.getter();
          uint64_t v47 = &_swiftEmptyArrayStorage;
          sub_100044C30(&qword_1001A6968, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
          sub_10000570C(&qword_1001A6970);
          sub_10004496C();
          dispatch thunk of SetAlgebra.init<A>(_:)();
          OS_dispatch_queue.async(group:qos:flags:execute:)();
          _Block_release(v22);

          (*v39)(v18, v17);
          char v26 = v25;
          a1 = v24;
          uint64_t v16 = &off_1001A3000;
          (*v38)(v26, v42);

          swift_release();
          uint64_t v9 = v29;
          unint64_t v10 = v46;
          if (a1 < 0) {
            goto LABEL_11;
          }
        }
        else
        {

          uint64_t v9 = v29;
          unint64_t v10 = v30;
          if (a1 < 0) {
            goto LABEL_11;
          }
        }
LABEL_14:
        if (v10)
        {
          uint64_t v30 = (v10 - 1) & v10;
          unint64_t v31 = __clz(__rbit64(v10)) | (v9 << 6);
          uint64_t v29 = v9;
        }
        else
        {
          int64_t v32 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            goto LABEL_36;
          }
          if (v32 >= v36) {
            break;
          }
          unint64_t v33 = *(void *)(v37 + 8 * v32);
          uint64_t v29 = v9 + 1;
          if (!v33)
          {
            uint64_t v29 = v9 + 2;
            if (v9 + 2 >= v36) {
              break;
            }
            unint64_t v33 = *(void *)(v37 + 8 * v29);
            if (!v33)
            {
              uint64_t v29 = v9 + 3;
              if (v9 + 3 >= v36) {
                break;
              }
              unint64_t v33 = *(void *)(v37 + 8 * v29);
              if (!v33)
              {
                uint64_t v29 = v9 + 4;
                if (v9 + 4 >= v36) {
                  break;
                }
                unint64_t v33 = *(void *)(v37 + 8 * v29);
                if (!v33)
                {
                  uint64_t v34 = v9 + 5;
                  while (v36 != v34)
                  {
                    unint64_t v33 = *(void *)(v37 + 8 * v34++);
                    if (v33)
                    {
                      uint64_t v29 = v34 - 1;
                      goto LABEL_29;
                    }
                  }
                  break;
                }
              }
            }
          }
LABEL_29:
          uint64_t v30 = (v33 - 1) & v33;
          unint64_t v31 = __clz(__rbit64(v33)) + (v29 << 6);
        }
        id v28 = *(id *)(*(void *)(a1 + 48) + 8 * v31);
      }
    }
    sub_100044AD4();
  }
  else
  {
LABEL_36:
    __break(1u);
  }
}

void *sub_100044384()
{
  uint64_t v0 = (void *)sub_1000432E4();
  if (v0)
  {
    [v0 setAllowsMenuButtonDismissal:1];
    swift_unknownObjectRelease();
  }
  uint64_t v1 = (void *)sub_1000432E4();
  if (v1)
  {
    [v1 setAllowsSiri:1];
    swift_unknownObjectRelease();
  }
  uint64_t v2 = (void *)sub_1000432E4();
  if (v2)
  {
    [v2 setDesiredHardwareButtonEvents:16];
    swift_unknownObjectRelease();
  }
  uint64_t v3 = (void *)sub_1000432E4();
  if (v3)
  {
    [v3 setDismissalAnimationStyle:2];
    swift_unknownObjectRelease();
  }
  uint64_t result = (void *)sub_1000432E4();
  if (result)
  {
    [result setSwipeDismissalStyle:1];
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_10004446C()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  unint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044A30(0, (unint64_t *)&qword_1001A6960);
  uint64_t v11 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v0;
  aBlock[4] = sub_10004494C;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100044790;
  aBlock[3] = &unk_100196780;
  uint64_t v13 = _Block_copy(aBlock);
  id v14 = v0;
  static DispatchQoS.unspecified.getter();
  v16[1] = &_swiftEmptyArrayStorage;
  sub_100044C30(&qword_1001A6968, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000570C(&qword_1001A6970);
  sub_10004496C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return swift_release();
}

void *sub_100044724(void *a1)
{
  [a1 dismissViewControllerAnimated:1 completion:0];
  uint64_t result = (void *)sub_1000432E4();
  if (result)
  {
    [result invalidate];
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_100044790(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

id sub_1000448BC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RemoteViewController();
  [super dealloc];
}

uint64_t type metadata accessor for RemoteViewController()
{
  return self;
}

uint64_t sub_100044914()
{
  return swift_deallocObject();
}

void *sub_10004494C()
{
  return sub_100044724(*(void **)(v0 + 16));
}

uint64_t sub_100044954(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100044964()
{
  return swift_release();
}

unint64_t sub_10004496C()
{
  unint64_t result = qword_1001A6978;
  if (!qword_1001A6978)
  {
    sub_100004A58(&qword_1001A6970);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6978);
  }
  return result;
}

uint64_t sub_1000449C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C((uint64_t *)&unk_1001A9610);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100044A30(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_100044A6C()
{
  unint64_t result = qword_1001A6990;
  if (!qword_1001A6990)
  {
    sub_100044A30(255, &qword_1001A6988);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6990);
  }
  return result;
}

uint64_t sub_100044AD4()
{
  return swift_release();
}

uint64_t sub_100044ADC()
{
  return EnvironmentValues.verticalSizeClass.getter();
}

uint64_t sub_100044B00(uint64_t a1)
{
  uint64_t v2 = sub_10000570C(&qword_1001A5478);
  __chkstk_darwin(v2 - 8, v3);
  sub_10000A428(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_1001A5478);
  return EnvironmentValues.verticalSizeClass.setter();
}

uint64_t sub_100044B94()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t sub_100044BCC()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_100044BDC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100044C30(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100044C78(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_100044CD0()
{
  return EnvironmentValues.verticalSizeClass.getter();
}

uint64_t sub_100044CF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventRootView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100044D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventRootView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100044DC0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for EventRootView();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100044E1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t destroy for EmptyEventsList()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for EmptyEventsList(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for EmptyEventsList(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for EmptyEventsList(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EmptyEventsList(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EmptyEventsList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EmptyEventsList()
{
  return &type metadata for EmptyEventsList;
}

uint64_t sub_100045064()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100045080@<X0>(uint64_t a1@<X8>)
{
  uint64_t v52 = sub_10000570C(&qword_1001A6898);
  __chkstk_darwin(v52, v2);
  uint64_t v54 = (uint64_t)v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin(v50, v4);
  unint64_t v51 = (char *)v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000570C(&qword_1001A5EC8);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v53 = (uint64_t)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = static VerticalAlignment.center.getter();
  sub_100045500((uint64_t)&v74);
  long long v10 = v74;
  uint64_t v11 = v75;
  v49[0] = v74;
  uint64_t v12 = *((void *)&v75 + 1);
  v49[1] = v75;
  long long v13 = v76;
  char v14 = v77;
  uint64_t v15 = *((void *)&v77 + 1);
  char v16 = static Edge.Set.all.getter();
  char v73 = 0;
  char v72 = v14;
  char v71 = 1;
  uint64_t v58 = v9;
  uint64_t v59 = 0x402E000000000000;
  char v60 = 0;
  long long v61 = v10;
  uint64_t v62 = v11;
  uint64_t v63 = v12;
  long long v64 = v13;
  char v65 = v14;
  uint64_t v66 = v15;
  char v67 = v16;
  long long v68 = 0u;
  long long v69 = 0u;
  char v70 = 1;
  static Alignment.leading.getter();
  sub_1001236FC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v74, 0.0, 1, 0.0, 1);
  swift_release();
  uint64_t v17 = v51;
  swift_release();
  swift_release();
  sub_10000FCC4(v13, *((uint64_t *)&v13 + 1), v14);
  swift_bridgeObjectRelease();
  uint64_t v18 = (char *)v17 + *(int *)(v50 + 28);
  uint64_t v19 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v20 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104))(v18, v19, v20);
  __asm { FMOV            V0.2D, #12.0 }
  _OWORD *v17 = _Q0;
  if (qword_1001A4E38 != -1) {
    swift_once();
  }
  uint64_t v26 = qword_1001B74D8;
  swift_retain();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v27 = v53;
  sub_1000243EC((uint64_t)v17, v53);
  uint64_t v28 = v27 + *(int *)(sub_10000570C(&qword_1001A5ED0) + 36);
  long long v29 = v56;
  *(_OWORD *)uint64_t v28 = v55;
  *(_OWORD *)(v28 + 16) = v29;
  *(void *)(v28 + 32) = v57;
  uint64_t v30 = sub_10000570C(&qword_1001A5ED8);
  *(void *)(v27 + *(int *)(v30 + 52)) = v26;
  *(_WORD *)(v27 + *(int *)(v30 + 56)) = 256;
  uint64_t v31 = static Alignment.center.getter();
  uint64_t v33 = v32;
  uint64_t v34 = (uint64_t *)(v27 + *(int *)(sub_10000570C(&qword_1001A5EE0) + 36));
  *uint64_t v34 = v31;
  v34[1] = v33;
  sub_100024450((uint64_t)v17);
  uint64_t v35 = static Alignment.center.getter();
  uint64_t v37 = v36;
  uint64_t v38 = v54;
  sub_10000A428(v27, v54, &qword_1001A5EC8);
  id v39 = (uint64_t *)(v38 + *(int *)(v52 + 36));
  *id v39 = v35;
  v39[1] = v37;
  uint64_t v40 = sub_10000570C(&qword_1001A69B0);
  sub_10000A428(v38, a1 + *(int *)(v40 + 36), &qword_1001A6898);
  long long v41 = v87;
  *(_OWORD *)(a1 + 192) = v86;
  *(_OWORD *)(a1 + 208) = v41;
  *(_OWORD *)(a1 + 224) = v88;
  *(void *)(a1 + 240) = v89;
  long long v42 = v83;
  *(_OWORD *)(a1 + 128) = v82;
  *(_OWORD *)(a1 + 144) = v42;
  long long v43 = v85;
  *(_OWORD *)(a1 + 160) = v84;
  *(_OWORD *)(a1 + 176) = v43;
  long long v44 = v79;
  *(_OWORD *)(a1 + 64) = v78;
  *(_OWORD *)(a1 + 80) = v44;
  long long v45 = v81;
  *(_OWORD *)(a1 + 96) = v80;
  *(_OWORD *)(a1 + 112) = v45;
  long long v46 = v75;
  *(_OWORD *)a1 = v74;
  *(_OWORD *)(a1 + 16) = v46;
  long long v47 = v77;
  *(_OWORD *)(a1 + 32) = v76;
  *(_OWORD *)(a1 + 48) = v47;
  sub_100045718((uint64_t)&v74);
  sub_10000ACE0(v38, &qword_1001A6898);
  sub_10000ACE0(v27, &qword_1001A5EC8);
  return sub_100045794((uint64_t)&v74);
}

uint64_t sub_100045500@<X0>(uint64_t a1@<X8>)
{
  uint64_t v22 = Image.init(systemName:)();
  uint64_t v21 = static Font.title2.getter();
  uint64_t KeyPath = swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.subheadline.getter();
  uint64_t v7 = Text.font(_:)();
  uint64_t v9 = v8;
  char v11 = v10;
  swift_release();
  sub_10000FCC4(v2, v4, v6);
  swift_bridgeObjectRelease();
  static Font.Weight.medium.getter();
  uint64_t v12 = Text.fontWeight(_:)();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  char v18 = v17 & 1;
  sub_10000FCC4(v7, v9, v11 & 1);
  swift_bridgeObjectRelease();
  *(void *)a1 = v22;
  *(void *)(a1 + 8) = KeyPath;
  *(void *)(a1 + 16) = v21;
  *(void *)(a1 + 24) = 0x3FE6666666666666;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v14;
  *(unsigned char *)(a1 + 48) = v18;
  *(void *)(a1 + 56) = v16;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10000FCD4(v12, v14, v18);
  swift_bridgeObjectRetain();
  sub_10000FCC4(v12, v14, v18);
  swift_release();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100045708@<X0>(uint64_t a1@<X8>)
{
  return sub_100045080(a1);
}

uint64_t sub_100045718(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  char v4 = *(unsigned char *)(a1 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10000FCD4(v2, v3, v4);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100045794(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  char v4 = *(unsigned char *)(a1 + 72);
  swift_release();
  swift_release();
  swift_release();
  sub_10000FCC4(v2, v3, v4);
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_10004581C()
{
  unint64_t result = qword_1001A69B8;
  if (!qword_1001A69B8)
  {
    sub_100004A58(&qword_1001A69B0);
    sub_1000458BC();
    sub_10000A780(&qword_1001A68D0, &qword_1001A6898);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A69B8);
  }
  return result;
}

unint64_t sub_1000458BC()
{
  unint64_t result = qword_1001A69C0;
  if (!qword_1001A69C0)
  {
    sub_100004A58(&qword_1001A69C8);
    sub_100045938();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A69C0);
  }
  return result;
}

unint64_t sub_100045938()
{
  unint64_t result = qword_1001A69D0;
  if (!qword_1001A69D0)
  {
    sub_100004A58(&qword_1001A69D8);
    sub_10000A780(&qword_1001A69E0, &qword_1001A69E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A69D0);
  }
  return result;
}

uint64_t sub_1000459D8()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

double sub_100045AB8()
{
  return sub_100045CB4() * 0.6136 * 0.74;
}

double sub_100045AE8()
{
  return sub_100045CB4() * 0.56;
}

double sub_100045B0C()
{
  return sub_100045CB4() * 0.56 * 0.18;
}

double sub_100045B3C()
{
  double v0 = sub_100045E88();
  return (v0 + sub_100045CB4() * -0.6136) * 0.5;
}

BOOL sub_100045B7C()
{
  return Array.count.getter() > 1;
}

double sub_100045BB8()
{
  return sub_100045CB4() * -0.015;
}

double sub_100045BDC()
{
  return sub_100045CB4() * 0.6136 * 0.8;
}

double sub_100045C0C()
{
  return sub_100045CB4() * 0.6;
}

uint64_t sub_100045C34(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double a5, double a6)
{
  uint64_t v12 = swift_allocObject();
  sub_100045F9C(a1, a2, a3, a4, a5, a6);
  return v12;
}

double sub_100045CB4()
{
  swift_getKeyPath();
  sub_100045D28();
  swift_release();
  return *(double *)(v0 + 120);
}

uint64_t sub_100045D28()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t sub_100045DBC()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

double sub_100045E88()
{
  swift_getKeyPath();
  sub_100045D28();
  swift_release();
  return *(double *)(v0 + 128);
}

uint64_t sub_100045EFC()
{
  return swift_release();
}

uint64_t sub_100045F9C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double a5, double a6)
{
  *(void *)(v6 + 16) = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v6 + 24) = v13;
  *(unsigned char *)(v6 + 32) = v14 & 1;
  *(void *)(v6 + 40) = v15;
  *(void *)(v6 + 48) = 0x7A65426863746177;
  *(void *)(v6 + 56) = 0xEA00000000006C65;
  *(void *)(v6 + 64) = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v6 + 72) = v16;
  *(unsigned char *)(v6 + 80) = v17 & 1;
  *(void *)(v6 + 88) = v18;
  ObservationRegistrar.init()();
  *(void *)(v6 + 96) = a1;
  *(void *)(v6 + 104) = a2;
  *(void *)(v6 + 112) = a3;
  *(double *)(v6 + 120) = a5;
  *(double *)(v6 + 128) = a6;
  *(unsigned char *)(v6 + 136) = a4;
  return v6;
}

uint64_t sub_100046084()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + qword_1001A69F0;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_100046128()
{
  sub_100046084();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for WatchFacesViewModel()
{
  return sub_10000B72C();
}

void sub_100046198(double *a1@<X8>)
{
  *a1 = sub_100045CB4();
}

uint64_t sub_1000461C4()
{
  return sub_100045EFC();
}

uint64_t sub_100046208()
{
  return 16;
}

__n128 sub_100046214(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_100046220()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + 120) = result;
  return result;
}

void sub_100046230(double *a1@<X8>)
{
  *a1 = sub_100045E88();
}

uint64_t sub_10004625C()
{
  return sub_100045EFC();
}

uint64_t sub_1000462A0()
{
  return 16;
}

__n128 sub_1000462AC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1000462B8()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + 128) = result;
  return result;
}

uint64_t sub_1000462C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  type metadata accessor for MainActor();
  v3[10] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[11] = v5;
  v3[12] = v4;
  return _swift_task_switch(sub_100046364, v5, v4);
}

uint64_t sub_100046364()
{
  uint64_t v1 = *(void *)(v0 + 56);
  long long v5 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 40) = v5;
  uint64_t v2 = sub_10000A7C4((uint64_t *)(v0 + 16));
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(v5 - 8) + 16))(v2, v1);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10004644C;
  return sub_10004B750(v0 + 16);
}

uint64_t sub_10004644C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 88);
    uint64_t v4 = *(void *)(v2 + 96);
    long long v5 = sub_1000465CC;
  }
  else
  {
    sub_100007584(v2 + 16);
    uint64_t v3 = *(void *)(v2 + 88);
    uint64_t v4 = *(void *)(v2 + 96);
    long long v5 = sub_100046568;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_100046568()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000465CC()
{
  swift_release();
  sub_100007584(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

ValueMetadata *type metadata accessor for CalendarController()
{
  return &type metadata for CalendarController;
}

id sub_100046650(uint64_t a1, void *a2, uint64_t a3, char *a4)
{
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v88 = *(void *)(v8 - 8);
  uint64_t v89 = v8;
  __chkstk_darwin(v8, v9);
  long long v87 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TimeZone();
  uint64_t v84 = *(void *)(v11 - 8);
  uint64_t v85 = v11;
  __chkstk_darwin(v11, v12);
  long long v83 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = type metadata accessor for Date();
  uint64_t v82 = *(void *)(v96 - 8);
  __chkstk_darwin(v96, v14);
  long long v80 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for DateInterval();
  uint64_t v78 = *(void *)(v95 - 8);
  __chkstk_darwin(v95, v16);
  long long v77 = (char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v97 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v18);
  long long v79 = (char *)&v75 - v19;
  uint64_t v20 = swift_getAssociatedTypeWitness();
  long long v76 = (void (*)(uint64_t, uint64_t))type metadata accessor for Optional();
  uint64_t v75 = *((void *)v76 - 1);
  uint64_t v22 = __chkstk_darwin(v76, v21);
  uint64_t v91 = v20;
  int v92 = (char *)&v75 - v23;
  uint64_t v93 = *(uint64_t (***)(char *, uint64_t, uint64_t))(v20 - 8);
  __chkstk_darwin(v22, v24);
  int v90 = (char *)&v75 - v25;
  uint64_t v26 = type metadata accessor for String.Encoding();
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26, v28);
  uint64_t v30 = (char *)&v75 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = self;
  id v86 = a2;
  id v32 = [v31 eventWithEventStore:a2];
  uint64_t v33 = (void (*)(uint64_t, char *))*((void *)a4 + 20);
  id v34 = v32;
  v33(a3, a4);
  uint64_t v35 = a3;
  NSString v36 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v34 setTitle:v36];

  uint64_t v37 = (void (*)(uint64_t, char *))*((void *)a4 + 19);
  uint64_t v98 = a1;
  uint64_t v38 = v35;
  v37(v35, a4);
  static String.Encoding.utf8.getter();
  uint64_t v39 = String.data(using:allowLossyConversion:)();
  unint64_t v41 = v40;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v30, v26);
  if (v41 >> 60 != 15)
  {
    id v42 = v34;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v42 setStructuredData:isa];

    sub_1000470F8(v39, v41);
  }
  uint64_t v99 = (*((uint64_t (**)(uint64_t, char *))a4 + 27))(v38, a4);
  uint64_t v44 = v91;
  type metadata accessor for Array();
  swift_getWitnessTable();
  long long v45 = v92;
  Collection.first.getter();
  swift_bridgeObjectRelease();
  long long v46 = v93;
  int v47 = v93[6](v45, 1, v44);
  id v94 = v34;
  if (v47 == 1)
  {
    (*(void (**)(char *, void *))(v75 + 8))(v45, v76);
  }
  else
  {
    uint64_t v48 = v90;
    v46[4](v90, (uint64_t)v45, v44);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    id v50 = sub_10014CB30(v44, AssociatedConformanceWitness);
    id v51 = [self locationWithMapItem:v50];

    [v34 setStructuredLocation:v51];
    ((void (*)(char *, uint64_t))v46[1])(v48, v44);
  }
  uint64_t v52 = (uint64_t (**)(char *, uint64_t, uint64_t))*((void *)a4 + 25);
  int v92 = a4 + 200;
  uint64_t v93 = v52;
  uint64_t v53 = v79;
  uint64_t v54 = v38;
  ((void (*)(uint64_t, char *))v52)(v38, a4);
  uint64_t v55 = AssociatedTypeWitness;
  uint64_t v91 = swift_getAssociatedConformanceWitness();
  long long v76 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
  long long v56 = v77;
  v76(v55, v91);
  uint64_t v75 = *(void *)(v97 + 8);
  v97 += 8;
  ((void (*)(char *, uint64_t))v75)(v53, v55);
  uint64_t v57 = v80;
  DateInterval.start.getter();
  int v90 = a4;
  uint64_t v78 = *(void *)(v78 + 8);
  ((void (*)(char *, uint64_t))v78)(v56, v95);
  Class v58 = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v82 = *(void *)(v82 + 8);
  ((void (*)(char *, uint64_t))v82)(v57, v96);
  [v94 setStartDate:v58];

  ((void (*)(uint64_t, char *))v93)(v54, v90);
  v76(v55, v91);
  uint64_t v59 = (void (*)(char *, uint64_t))v75;
  ((void (*)(char *, uint64_t))v75)(v53, v55);
  DateInterval.end.getter();
  ((void (*)(char *, uint64_t))v78)(v56, v95);
  Class v60 = Date._bridgeToObjectiveC()().super.isa;
  ((void (*)(char *, uint64_t))v82)(v57, v96);
  id v61 = v94;
  [v94 setEndDate:v60];

  id v62 = v61;
  uint64_t v63 = v54;
  uint64_t v64 = v54;
  char v65 = v90;
  ((void (*)(uint64_t, char *))v93)(v64, v90);
  uint64_t v66 = v83;
  (*(void (**)(uint64_t))(v91 + 16))(v55);
  v59(v53, v55);
  Class v67 = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v84 + 8))(v66, v85);
  [v62 setTimeZone:v67];

  id v68 = v62;
  id v69 = [v86 defaultCalendarForNewEvents];
  [v68 setCalendar:v69];

  char v70 = (void (*)(uint64_t, char *))*((void *)v65 + 22);
  id v71 = v68;
  char v72 = v87;
  v70(v63, v65);
  URL.absoluteString.getter();
  (*(void (**)(char *, uint64_t))(v88 + 8))(v72, v89);
  NSString v73 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v71 setNotes:v73];

  return v71;
}

uint64_t sub_1000470F8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100044C78(a1, a2);
  }
  return a1;
}

uint64_t sub_10004710C()
{
  uint64_t v0 = type metadata accessor for Color.RGBColorSpace();
  __chkstk_darwin(v0, v1);
  (*(void (**)(char *, void))(v3 + 104))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for Color.RGBColorSpace.sRGB(_:));
  uint64_t result = Color.init(_:red:green:blue:opacity:)();
  qword_1001B74C8 = result;
  return result;
}

uint64_t sub_1000471F0(uint64_t a1)
{
  return sub_100047268(a1, (SEL *)&selRef_systemBackgroundColor, &qword_1001B74D0);
}

uint64_t sub_100047204(uint64_t a1)
{
  return sub_100047268(a1, (SEL *)&selRef_secondarySystemBackgroundColor, &qword_1001B74D8);
}

uint64_t sub_100047218(uint64_t a1)
{
  return sub_100047268(a1, (SEL *)&selRef_secondaryLabelColor, &qword_1001B74E0);
}

uint64_t sub_10004722C(uint64_t a1)
{
  return sub_100047268(a1, (SEL *)&selRef_secondarySystemFillColor, &qword_1001B74E8);
}

uint64_t sub_100047240(uint64_t a1)
{
  return sub_100047268(a1, (SEL *)&selRef_secondarySystemGroupedBackgroundColor, &qword_1001B74F0);
}

uint64_t sub_100047254(uint64_t a1)
{
  return sub_100047268(a1, (SEL *)&selRef_tertiarySystemFillColor, &qword_1001B74F8);
}

uint64_t sub_100047268(uint64_t a1, SEL *a2, uint64_t *a3)
{
  id v4 = [self *a2];
  uint64_t result = Color.init(_:)();
  *a3 = result;
  return result;
}

uint64_t destroy for TourPhotosTitleView()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TourPhotosTitleView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TourPhotosTitleView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for TourPhotosTitleView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for TourPhotosTitleView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TourPhotosTitleView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TourPhotosTitleView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TourPhotosTitleView()
{
  return &type metadata for TourPhotosTitleView;
}

uint64_t sub_1000475B4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000475D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v31 = a1;
  uint64_t v1 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v29 = *(void *)(v1 - 8);
  uint64_t v30 = v1;
  __chkstk_darwin(v1, v2);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for BlendMode();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000570C(&qword_1001A6A80);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000570C(&qword_1001A6A88);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000570C(&qword_1001A6A90);
  uint64_t v18 = *(void *)(v27 - 8);
  __chkstk_darwin(v27, v19);
  uint64_t v21 = (char *)&v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v13 = static HorizontalAlignment.center.getter();
  *((void *)v13 + 1) = 0;
  v13[16] = 0;
  uint64_t v22 = sub_10000570C(&qword_1001A6A98);
  sub_100047968(v28, (uint64_t)&v13[*(int *)(v22 + 44)]);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, enum case for BlendMode.plusLighter(_:), v5);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(&v17[*(int *)(v14 + 36)], v9, v5);
  sub_10000A428((uint64_t)v13, (uint64_t)v17, &qword_1001A6A80);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  sub_10000ACE0((uint64_t)v13, &qword_1001A6A80);
  static AccessibilityChildBehavior.combine.getter();
  sub_1000485E0();
  View.accessibilityElement(children:)();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v4, v30);
  sub_10000ACE0((uint64_t)v17, &qword_1001A6A88);
  uint64_t v23 = v31;
  uint64_t v24 = v27;
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 16))(v31, v21, v27);
  *(unsigned char *)(v23 + *(int *)(sub_10000570C(&qword_1001A6AB0) + 36)) = 1;
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v21, v24);
}

uint64_t sub_100047968@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v103 = a2;
  uint64_t v3 = sub_10000570C(&qword_1001A6AB8);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (char *)&v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000570C(&qword_1001A6AC0);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000570C(&qword_1001A6AC8);
  uint64_t v13 = v12 - 8;
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v17 = (char *)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  uint64_t v20 = (char *)&v94 - v19;
  *(void *)uint64_t v6 = static VerticalAlignment.center.getter();
  *((void *)v6 + 1) = 0x4010000000000000;
  v6[16] = 0;
  uint64_t v21 = sub_10000570C(&qword_1001A6AD0);
  sub_100048104((uint64_t)&v6[*(int *)(v21 + 44)]);
  static Color.white.getter();
  uint64_t v22 = Color.opacity(_:)();
  swift_release();
  sub_10000A428((uint64_t)v6, (uint64_t)v11, &qword_1001A6AB8);
  *(void *)&v11[*(int *)(v8 + 44)] = v22;
  sub_10000ACE0((uint64_t)v6, &qword_1001A6AB8);
  char v23 = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  sub_10000A428((uint64_t)v11, (uint64_t)v17, &qword_1001A6AC0);
  id v32 = &v17[*(int *)(v13 + 44)];
  *id v32 = v23;
  *((void *)v32 + 1) = v25;
  *((void *)v32 + 2) = v27;
  *((void *)v32 + 3) = v29;
  *((void *)v32 + 4) = v31;
  v32[40] = 0;
  sub_10000ACE0((uint64_t)v11, &qword_1001A6AC0);
  long long v104 = v20;
  long long v105 = v17;
  sub_1000486B8((uint64_t)v17, (uint64_t)v20);
  uint64_t v33 = *(void *)(a1 + 72);
  if (v33)
  {
    uint64_t v115 = *(void *)(a1 + 64);
    uint64_t v116 = v33;
    sub_100010B2C();
    swift_bridgeObjectRetain();
    uint64_t v34 = Text.init<A>(_:)();
    uint64_t v36 = v35;
    char v38 = v37 & 1;
    static Font.largeTitle.getter();
    static Font.Weight.bold.getter();
    Font.weight(_:)();
    swift_release();
    uint64_t v39 = Text.font(_:)();
    uint64_t v41 = v40;
    char v43 = v42;
    swift_release();
    sub_10000FCC4(v34, v36, v38);
    swift_bridgeObjectRelease();
    static Color.white.getter();
    uint64_t v44 = Color.opacity(_:)();
    swift_release();
    uint64_t v115 = v44;
    uint64_t v45 = Text.foregroundStyle<A>(_:)();
    uint64_t v113 = v46;
    uint64_t v114 = v45;
    uint64_t v111 = v47 & 1;
    uint64_t v112 = v48;
    sub_10000FCC4(v39, v41, v43 & 1);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v109 = swift_getKeyPath();
    unsigned __int8 v49 = static Edge.Set.bottom.getter();
    EdgeInsets.init(_all:)();
    uint64_t v102 = v50;
    uint64_t v101 = v51;
    uint64_t v100 = v52;
    uint64_t v99 = v53;
    uint64_t v106 = v49;
    uint64_t v107 = 1;
    uint64_t v108 = 2;
  }
  else
  {
    uint64_t v113 = 0;
    uint64_t v114 = 0;
    uint64_t v111 = 0;
    uint64_t v112 = 0;
    uint64_t v109 = 0;
    uint64_t KeyPath = 0;
    uint64_t v107 = 0;
    uint64_t v108 = 0;
    uint64_t v106 = 0;
    uint64_t v102 = 0;
    uint64_t v101 = 0;
    uint64_t v100 = 0;
    uint64_t v99 = 0;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v54 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v56 = v55;
  char v58 = v57 & 1;
  static Font.subheadline.getter();
  static Font.Weight.regular.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v59 = Text.font(_:)();
  uint64_t v61 = v60;
  char v63 = v62;
  swift_release();
  sub_10000FCC4(v54, v56, v58);
  swift_bridgeObjectRelease();
  static Color.white.getter();
  uint64_t v64 = Color.opacity(_:)();
  swift_release();
  uint64_t v115 = v64;
  uint64_t v65 = Text.foregroundStyle<A>(_:)();
  uint64_t v97 = v66;
  uint64_t v98 = v67;
  int v96 = v68 & 1;
  sub_10000FCC4(v59, v61, v63 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v95 = swift_getKeyPath();
  uint64_t v69 = swift_getKeyPath();
  uint64_t v70 = (uint64_t)v105;
  sub_10000A428((uint64_t)v104, (uint64_t)v105, &qword_1001A6AC8);
  uint64_t v71 = v70;
  uint64_t v72 = v103;
  sub_10000A428(v71, v103, &qword_1001A6AC8);
  uint64_t v73 = sub_10000570C(&qword_1001A6AD8);
  uint64_t v74 = v72 + *(int *)(v73 + 48);
  uint64_t v75 = v113;
  uint64_t v76 = v114;
  *(void *)uint64_t v74 = v114;
  *(void *)(v74 + 8) = v75;
  uint64_t v113 = v75;
  uint64_t v114 = v76;
  uint64_t v77 = v75;
  uint64_t v78 = v111;
  *(void *)(v74 + 16) = v111;
  char v79 = v78;
  uint64_t v111 = v78;
  uint64_t v80 = v112;
  *(void *)(v74 + 24) = v112;
  uint64_t v81 = v80;
  uint64_t v112 = v80;
  uint64_t v82 = KeyPath;
  *(void *)(v74 + 32) = KeyPath;
  uint64_t KeyPath = v82;
  uint64_t v83 = v108;
  *(void *)(v74 + 40) = v108;
  *(void *)(v74 + 48) = 0;
  uint64_t v108 = v83;
  uint64_t v84 = v109;
  *(void *)(v74 + 56) = v109;
  uint64_t v109 = v84;
  uint64_t v85 = v107;
  *(void *)(v74 + 64) = v107;
  uint64_t v107 = v85;
  uint64_t v86 = v106;
  *(void *)(v74 + 72) = v106;
  uint64_t v106 = v86;
  uint64_t v87 = v101;
  *(void *)(v74 + 80) = v102;
  *(void *)(v74 + 88) = v87;
  uint64_t v88 = v99;
  *(void *)(v74 + 96) = v100;
  *(void *)(v74 + 104) = v88;
  *(unsigned char *)(v74 + 112) = 0;
  uint64_t v89 = v72 + *(int *)(v73 + 64);
  uint64_t v90 = v97;
  *(void *)uint64_t v89 = v65;
  *(void *)(v89 + 8) = v90;
  char v91 = v96;
  *(unsigned char *)(v89 + 16) = v96;
  uint64_t v92 = v95;
  *(void *)(v89 + 24) = v98;
  *(void *)(v89 + 32) = v92;
  *(void *)(v89 + 40) = 2;
  *(unsigned char *)(v89 + 48) = 0;
  *(void *)(v89 + 56) = v69;
  *(unsigned char *)(v89 + 64) = 1;
  sub_100048730(v76, v77, v79, v81);
  sub_10000FCD4(v65, v90, v91);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_10000ACE0((uint64_t)v104, &qword_1001A6AC8);
  sub_10000FCC4(v65, v90, v91);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_100048794(v114, v113, v111, v112);
  return sub_10000ACE0((uint64_t)v105, &qword_1001A6AC8);
}

uint64_t sub_100048104@<X0>(uint64_t a1@<X8>)
{
  uint64_t v36 = a1;
  uint64_t v1 = type metadata accessor for Image.ResizingMode();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000570C(&qword_1001A6AE0);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000570C(&qword_1001A6AE8);
  uint64_t v12 = __chkstk_darwin(v10 - 8, v11);
  uint64_t v35 = (uint64_t)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v35 - v15;
  Image.init(_:bundle:)();
  uint64_t v17 = enum case for Image.TemplateRenderingMode.template(_:);
  uint64_t v18 = type metadata accessor for Image.TemplateRenderingMode();
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 104))(v9, v17, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v9, 0, 1, v18);
  Image.renderingMode(_:)();
  swift_release();
  sub_10000ACE0((uint64_t)v9, &qword_1001A6AE0);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v5, enum case for Image.ResizingMode.stretch(_:), v1);
  uint64_t v20 = Image.resizable(capInsets:resizingMode:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v37 = v20;
  uint64_t v38 = v43;
  char v39 = v44;
  uint64_t v40 = v45;
  char v41 = v46;
  long long v42 = v47;
  sub_10000570C(&qword_1001A6AF0);
  sub_1000487F8();
  View.accessibilityHidden(_:)();
  swift_release();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v21 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v23 = v22;
  LOBYTE(v9) = v24 & 1;
  static Font.caption2.getter();
  static Font.Weight.semibold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v25 = Text.font(_:)();
  uint64_t v27 = v26;
  LOBYTE(v2) = v28;
  uint64_t v30 = v29;
  swift_release();
  LOBYTE(v2) = v2 & 1;
  sub_10000FCC4(v21, v23, (char)v9);
  swift_bridgeObjectRelease();
  uint64_t v31 = v35;
  sub_10000A428((uint64_t)v16, v35, &qword_1001A6AE8);
  uint64_t v32 = v36;
  sub_10000A428(v31, v36, &qword_1001A6AE8);
  uint64_t v33 = v32 + *(int *)(sub_10000570C(&qword_1001A6B00) + 48);
  *(void *)uint64_t v33 = v25;
  *(void *)(v33 + 8) = v27;
  *(unsigned char *)(v33 + 16) = v2;
  *(void *)(v33 + 24) = v30;
  sub_10000FCD4(v25, v27, v2);
  swift_bridgeObjectRetain();
  sub_10000ACE0((uint64_t)v16, &qword_1001A6AE8);
  sub_10000FCC4(v25, v27, v2);
  swift_bridgeObjectRelease();
  return sub_10000ACE0(v31, &qword_1001A6AE8);
}

uint64_t sub_10004859C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000475D0(a1);
}

unint64_t sub_1000485E0()
{
  unint64_t result = qword_1001A6AA0;
  if (!qword_1001A6AA0)
  {
    sub_100004A58(&qword_1001A6A88);
    sub_10004865C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6AA0);
  }
  return result;
}

unint64_t sub_10004865C()
{
  unint64_t result = qword_1001A6AA8;
  if (!qword_1001A6AA8)
  {
    sub_100004A58(&qword_1001A6A80);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6AA8);
  }
  return result;
}

uint64_t sub_1000486B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A6AC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100048730(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_10000FCD4(result, a2, a3 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_100048794(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_10000FCC4(result, a2, a3 & 1);
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1000487F8()
{
  unint64_t result = qword_1001A6AF8;
  if (!qword_1001A6AF8)
  {
    sub_100004A58(&qword_1001A6AF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6AF8);
  }
  return result;
}

unint64_t sub_100048870()
{
  unint64_t result = qword_1001A6B08;
  if (!qword_1001A6B08)
  {
    sub_100004A58(&qword_1001A6AB0);
    sub_100004A58(&qword_1001A6A88);
    sub_1000485E0();
    swift_getOpaqueTypeConformance2();
    sub_100048920();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6B08);
  }
  return result;
}

unint64_t sub_100048920()
{
  unint64_t result = qword_1001A6B10[0];
  if (!qword_1001A6B10[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001A6B10);
  }
  return result;
}

uint64_t sub_100048974(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 - 8;
  uint64_t v36 = *(void *)(a1 - 8);
  uint64_t v37 = a1;
  __chkstk_darwin(a1, a2);
  uint64_t v35 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v3 + 24);
  uint64_t v5 = *(void *)(v3 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v9);
  uint64_t v11 = (char *)&v31 - v10;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v32 = *(void *)(v14 - 8);
  uint64_t v33 = v14;
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v31 - v16;
  uint64_t v34 = v2;
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v5 + 208);
  uint64_t v31 = v6;
  uint64_t v19 = v6;
  uint64_t v20 = v5;
  v18(v19, v5);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
  uint64_t v38 = v21;
  uint64_t v22 = swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  swift_getWitnessTable();
  Collection.first.getter();
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v17, 1, v13) == 1)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v17, v33);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
  }
  else
  {
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 48))(v13, v22);
    uint64_t v25 = v26;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v17, v13);
  }
  uint64_t v28 = v36;
  uint64_t v27 = v37;
  uint64_t v29 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v35, v34, v37);
  if (!v25) {
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 160))(v31, v20);
  }
  (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v27);
  return v24;
}

uint64_t sub_100048D84(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v38 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  __chkstk_darwin(v4, v5);
  uint64_t v40 = (char *)&v38 - v6;
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v38 - v10;
  sub_10000570C(&qword_1001A6BA8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100152B80;
  (*(void (**)(uint64_t, uint64_t))(v1 + 200))(v2, v1);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v14 = sub_100014324(v7, AssociatedConformanceWitness);
  uint64_t v16 = v15;
  uint64_t v17 = v7;
  uint64_t v18 = (void *)inited;
  uint64_t v19 = v40;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v17);
  v18[4] = v14;
  v18[5] = v16;
  uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 216))(v2, v1);
  type metadata accessor for Array();
  swift_getWitnessTable();
  Collection.first.getter();
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v19, v39);
  }
  else
  {
    uint64_t v21 = swift_getAssociatedConformanceWitness();
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 48))(AssociatedTypeWitness, v21);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v19, AssociatedTypeWitness);
    if (v22)
    {
      id v23 = [v22 city];

      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v26 = v25;

      v18[6] = v24;
      v18[7] = v26;
      uint64_t v27 = v18[5];
      if (v27) {
        goto LABEL_8;
      }
LABEL_5:
      uint64_t v28 = (char *)_swiftEmptyArrayStorage;
      if (!v26) {
        goto LABEL_16;
      }
      goto LABEL_11;
    }
  }
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  v18[6] = 0;
  v18[7] = 0;
  uint64_t v27 = v18[5];
  if (!v27) {
    goto LABEL_5;
  }
LABEL_8:
  uint64_t v29 = v18[4];
  swift_bridgeObjectRetain();
  uint64_t v28 = sub_1001379E0(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  unint64_t v31 = *((void *)v28 + 2);
  unint64_t v30 = *((void *)v28 + 3);
  if (v31 >= v30 >> 1) {
    uint64_t v28 = sub_1001379E0((char *)(v30 > 1), v31 + 1, 1, v28);
  }
  *((void *)v28 + 2) = v31 + 1;
  uint64_t v32 = &v28[16 * v31];
  *((void *)v32 + 4) = v29;
  *((void *)v32 + 5) = v27;
  uint64_t v24 = v18[6];
  uint64_t v26 = v18[7];
  if (v26)
  {
LABEL_11:
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v28 = sub_1001379E0(0, *((void *)v28 + 2) + 1, 1, v28);
    }
    unint64_t v34 = *((void *)v28 + 2);
    unint64_t v33 = *((void *)v28 + 3);
    if (v34 >= v33 >> 1) {
      uint64_t v28 = sub_1001379E0((char *)(v33 > 1), v34 + 1, 1, v28);
    }
    *((void *)v28 + 2) = v34 + 1;
    uint64_t v35 = &v28[16 * v34];
    *((void *)v35 + 4) = v24;
    *((void *)v35 + 5) = v26;
  }
LABEL_16:
  swift_bridgeObjectRelease();
  uint64_t v41 = (uint64_t)v28;
  sub_10000570C(&qword_1001A6B98);
  sub_10004ADEC();
  uint64_t v36 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v36;
}

BOOL sub_10004927C(uint64_t a1)
{
  (*(void (**)(void, void))(*(void *)(a1 + 24) + 192))(*(void *)(a1 + 16), *(void *)(a1 + 24));
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_getWitnessTable();
  char v1 = Collection.isEmpty.getter();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

BOOL sub_100049348(uint64_t a1)
{
  (*(void (**)(void, void))(*(void *)(a1 + 24) + 192))(*(void *)(a1 + 16), *(void *)(a1 + 24));
  swift_getAssociatedTypeWitness();
  uint64_t v1 = Array.count.getter();
  swift_bridgeObjectRelease();
  return v1 == 1;
}

uint64_t sub_1000493D8(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000494A8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v51 = *(void *)(v5 - 8);
  uint64_t v52 = v5;
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v50 - v7;
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v50 - v12;
  long long v54 = xmmword_100152B90;
  uint64_t v55 = sub_100049AA8(a1);
  uint64_t v56 = v14;
  uint64_t v57 = sub_100048974(a1, v14);
  uint64_t v58 = v15;
  (*(void (**)(uint64_t, uint64_t))(v2 + 200))(v3, v2);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v17 = sub_100014BD0(v9, AssociatedConformanceWitness);
  uint64_t v19 = v18;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  uint64_t v59 = v17;
  uint64_t v60 = v19;
  uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 216))(v3, v2);
  type metadata accessor for Array();
  swift_getWitnessTable();
  Collection.first.getter();
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v8, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v8, v52);
  }
  else
  {
    uint64_t v21 = swift_getAssociatedConformanceWitness();
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 48))(AssociatedTypeWitness, v21);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v8, AssociatedTypeWitness);
    if (v22)
    {
      id v23 = [v22 city];

      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v26 = v25;

      uint64_t v61 = v24;
      uint64_t v62 = v26;
      uint64_t v27 = v56;
      if (v56) {
        goto LABEL_8;
      }
LABEL_5:
      uint64_t v28 = (char *)_swiftEmptyArrayStorage;
      uint64_t v29 = v58;
      if (!v58) {
        goto LABEL_16;
      }
      goto LABEL_11;
    }
  }
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v27 = v56;
  if (!v56) {
    goto LABEL_5;
  }
LABEL_8:
  uint64_t v30 = v55;
  swift_bridgeObjectRetain();
  uint64_t v28 = sub_1001379E0(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  unint64_t v32 = *((void *)v28 + 2);
  unint64_t v31 = *((void *)v28 + 3);
  if (v32 >= v31 >> 1) {
    uint64_t v28 = sub_1001379E0((char *)(v31 > 1), v32 + 1, 1, v28);
  }
  *((void *)v28 + 2) = v32 + 1;
  unint64_t v33 = &v28[16 * v32];
  *((void *)v33 + 4) = v30;
  *((void *)v33 + 5) = v27;
  uint64_t v29 = v58;
  if (v58)
  {
LABEL_11:
    uint64_t v34 = v57;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v28 = sub_1001379E0(0, *((void *)v28 + 2) + 1, 1, v28);
    }
    unint64_t v36 = *((void *)v28 + 2);
    unint64_t v35 = *((void *)v28 + 3);
    if (v36 >= v35 >> 1) {
      uint64_t v28 = sub_1001379E0((char *)(v35 > 1), v36 + 1, 1, v28);
    }
    *((void *)v28 + 2) = v36 + 1;
    uint64_t v37 = &v28[16 * v36];
    *((void *)v37 + 4) = v34;
    *((void *)v37 + 5) = v29;
  }
LABEL_16:
  uint64_t v38 = v60;
  if (v60)
  {
    uint64_t v39 = v59;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v28 = sub_1001379E0(0, *((void *)v28 + 2) + 1, 1, v28);
    }
    unint64_t v41 = *((void *)v28 + 2);
    unint64_t v40 = *((void *)v28 + 3);
    if (v41 >= v40 >> 1) {
      uint64_t v28 = sub_1001379E0((char *)(v40 > 1), v41 + 1, 1, v28);
    }
    *((void *)v28 + 2) = v41 + 1;
    long long v42 = &v28[16 * v41];
    *((void *)v42 + 4) = v39;
    *((void *)v42 + 5) = v38;
  }
  uint64_t v43 = v62;
  if (v62)
  {
    uint64_t v44 = v61;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v28 = sub_1001379E0(0, *((void *)v28 + 2) + 1, 1, v28);
    }
    unint64_t v46 = *((void *)v28 + 2);
    unint64_t v45 = *((void *)v28 + 3);
    if (v46 >= v45 >> 1) {
      uint64_t v28 = sub_1001379E0((char *)(v45 > 1), v46 + 1, 1, v28);
    }
    *((void *)v28 + 2) = v46 + 1;
    long long v47 = &v28[16 * v46];
    *((void *)v47 + 4) = v44;
    *((void *)v47 + 5) = v43;
  }
  sub_10000570C((uint64_t *)&unk_1001A8B80);
  swift_arrayDestroy();
  uint64_t v53 = (uint64_t)v28;
  sub_10000570C(&qword_1001A6B98);
  sub_10004ADEC();
  uint64_t v48 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v48;
}

uint64_t sub_100049AA8(uint64_t a1)
{
  char v1 = sub_100059CBC(*(void *)(a1 + 16), *(void *)(a1 + 24));
  id v2 = [self mainBundle];
  if (v1)
  {
    unint64_t v9 = 0xE000000000000000;
    unint64_t v3 = 0x800000010015DFD0;
    unint64_t v4 = 0xD00000000000001FLL;
  }
  else
  {
    unint64_t v4 = 0xD000000000000023;
    unint64_t v9 = 0xE000000000000000;
    unint64_t v3 = 0x800000010015DFA0;
  }
  v5._uint64_t countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  uint64_t v6 = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v4, (Swift::String_optional)0, (NSBundle)v2, v5, *(Swift::String *)(&v9 - 1))._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_100049B8C()
{
  return swift_release();
}

void sub_100049C3C(uint64_t a1, uint64_t a2)
{
  sub_10000570C(&qword_1001A5390);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100152B90;
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(a2 + 24) + 152))(*(void *)(a2 + 16));
  *(void *)(v4 + 56) = &type metadata for AnalyticsString;
  *(void *)(v4 + 64) = &off_1001AAD38;
  *(void *)(v4 + 40) = v5;
  *(void *)(v4 + 48) = v6;
  *(unsigned char *)(v4 + 32) = 0;
  *(void *)(v4 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v4 + 104) = &off_1001AAD10;
  *(unsigned char *)(v4 + 72) = 0;
  *(void *)(v4 + 136) = &type metadata for AnalyticsModuleName;
  *(void *)(v4 + 144) = &off_1001AAD98;
  *(unsigned char *)(v4 + 112) = 1;
  *(void *)(v4 + 176) = &type metadata for AnalyticsModuleAction;
  *(void *)(v4 + 184) = &off_1001AAD70;
  *(_OWORD *)(v4 + 152) = xmmword_1001549C0;
  *(unsigned char *)(v4 + 168) = 3;
  if (*(void *)(a1 + 72))
  {
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0xE000000000000000;
  }
  uint64_t v21 = &type metadata for AnalyticsString;
  uint64_t v22 = (void *(*)())&off_1001AAD38;
  LOBYTE(aBlock) = 1;
  uint64_t v19 = v7;
  uint64_t v20 = (Class (*)(uint64_t))v8;
  swift_bridgeObjectRetain();
  uint64_t v24 = sub_1001378BC((char *)1, 5, 1, (char *)v4);
  uint64_t v9 = sub_100007534((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v9, v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  sub_100116BFC(4, (uint64_t)v11, (uint64_t *)&v24, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_1001AAD38);
  sub_100007584((uint64_t)&aBlock);
  uint64_t v13 = v24;
  NSString v14 = String._bridgeToObjectiveC()();
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = 0xD00000000000001ELL;
  v15[3] = 0x800000010015D360;
  v15[4] = v13;
  uint64_t v22 = sub_10004AE50;
  id v23 = v15;
  aBlock = _NSConcreteStackBlock;
  uint64_t v19 = 1107296256;
  uint64_t v20 = sub_100116B70;
  uint64_t v21 = (ValueMetadata *)&unk_100196AD8;
  uint64_t v16 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v16);
  swift_bridgeObjectRelease();
}

void sub_100049F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10000570C(&qword_1001A5390);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100152B90;
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)(a4 + 24) + 152))(*(void *)(a4 + 16));
  *(void *)(v8 + 56) = &type metadata for AnalyticsString;
  *(void *)(v8 + 64) = &off_1001AAD38;
  *(unsigned char *)(v8 + 32) = 0;
  *(void *)(v8 + 40) = v9;
  *(void *)(v8 + 48) = v10;
  *(void *)(v8 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v8 + 104) = &off_1001AAD10;
  *(unsigned char *)(v8 + 72) = 0;
  *(void *)(v8 + 136) = &type metadata for AnalyticsModuleName;
  *(void *)(v8 + 144) = &off_1001AAD98;
  *(unsigned char *)(v8 + 112) = 1;
  *(void *)(v8 + 176) = &type metadata for AnalyticsModuleAction;
  *(void *)(v8 + 184) = &off_1001AAD70;
  *(void *)(v8 + 152) = a1;
  *(void *)(v8 + 160) = a2;
  *(unsigned char *)(v8 + 168) = 1;
  if (*(void *)(a3 + 72))
  {
    uint64_t v11 = *(void *)(a3 + 64);
    unint64_t v12 = *(void *)(a3 + 72);
  }
  else
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0xE000000000000000;
  }
  uint64_t v25 = &type metadata for AnalyticsString;
  uint64_t v26 = (void *(*)())&off_1001AAD38;
  LOBYTE(aBlock) = 1;
  uint64_t v23 = v11;
  uint64_t v24 = (Class (*)(uint64_t))v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v28 = sub_1001378BC((char *)1, 5, 1, (char *)v8);
  uint64_t v13 = sub_100007534((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v13, v13);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v15);
  sub_100116BFC(4, (uint64_t)v15, (uint64_t *)&v28, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_1001AAD38);
  sub_100007584((uint64_t)&aBlock);
  uint64_t v17 = v28;
  NSString v18 = String._bridgeToObjectiveC()();
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = 0xD00000000000001ELL;
  void v19[3] = 0x800000010015D360;
  v19[4] = v17;
  uint64_t v26 = sub_100007614;
  uint64_t v27 = v19;
  aBlock = _NSConcreteStackBlock;
  uint64_t v23 = 1107296256;
  uint64_t v24 = sub_100116B70;
  uint64_t v25 = (ValueMetadata *)&unk_100196A88;
  uint64_t v20 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v20);
  swift_bridgeObjectRelease();
}

uint64_t sub_10004A20C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  *(void *)a7 = a1;
  uint64_t v13 = (int *)type metadata accessor for EventDetailViewModel();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(&a7[v13[9]], a2, a6);
  uint64_t v14 = &a7[v13[10]];
  *(void *)uint64_t v14 = a3;
  *((void *)v14 + 1) = a4;
  unsigned char v14[16] = a5;
  uint64_t v15 = &a7[v13[11]];
  uint64_t result = LocalizedStringKey.init(stringLiteral:)();
  *(void *)uint64_t v15 = result;
  *((void *)v15 + 1) = v17;
  v15[16] = v18 & 1;
  *((void *)v15 + 3) = v19;
  return result;
}

uint64_t type metadata accessor for EventDetailViewModel()
{
  return sub_10000B72C();
}

uint64_t sub_10004A304()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_10004A3B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v6 + ((v5 + 8) & ~v5) + 31) & 0xFFFFFFFFFFFFFFF8) + 32 > 0x18)
  {
    uint64_t v9 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v10 = ((unint64_t)a1 + v5 + 8) & ~v5;
    uint64_t v11 = ((unint64_t)a2 + v5 + 8) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v10, v11);
    unint64_t v12 = (v10 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v13 = (v11 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v12 = *(void *)v13;
    *(void *)(v12 + 8) = *(void *)(v13 + 8);
    *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
    unint64_t v14 = (v10 + v6 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v15 = (v11 + v6 + 31) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v14 = *(void *)v15;
    *(void *)(v14 + 8) = *(void *)(v15 + 8);
    *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
    *(void *)(v14 + 24) = *(void *)(v15 + 24);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v3;
}

uint64_t sub_10004A53C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((a1
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)
                                                                                            + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_10004A5DC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 16;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 48);
  uint64_t v10 = v9 + v7;
  uint64_t v11 = v9 + v8;
  unint64_t v12 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v12 = *(void *)v13;
  *(void *)(v12 + 8) = *(void *)(v13 + 8);
  *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
  unint64_t v14 = (v10 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v11 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v14 = *(void *)v15;
  *(void *)(v14 + 8) = *(void *)(v15 + 8);
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
  *(void *)(v14 + 24) = *(void *)(v15 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10004A6DC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 24;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = v9 + v7;
  uint64_t v11 = v9 + v8;
  unint64_t v12 = (v9 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v12 = *(void *)v13;
  swift_retain();
  swift_release();
  *(void *)(v12 + 8) = *(void *)(v13 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
  unint64_t v14 = (v10 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v11 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v14 = *(void *)v15;
  *(void *)(v14 + 8) = *(void *)(v15 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
  *(void *)(v14 + 24) = *(void *)(v15 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_10004A808(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 32);
  uint64_t v10 = v9 + v7;
  uint64_t v11 = v9 + v8;
  unint64_t v12 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v14 = *(_OWORD *)v13;
  *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
  *(_OWORD *)unint64_t v12 = v14;
  unint64_t v15 = (_OWORD *)((v10 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (_OWORD *)((v11 + 31) & 0xFFFFFFFFFFFFFFF8);
  long long v17 = v16[1];
  *unint64_t v15 = *v16;
  v15[1] = v17;
  return a1;
}

void *sub_10004A8CC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 40;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + v7;
  uint64_t v11 = v9 + v8;
  unint64_t v12 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v12 = *(void *)v13;
  swift_release();
  *(void *)(v12 + 8) = *(void *)(v13 + 8);
  swift_release();
  *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
  unint64_t v14 = (v10 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v11 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v14 = *(void *)v15;
  *(void *)(v14 + 8) = *(void *)(v15 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
  *(void *)(v14 + 24) = *(void *)(v15 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10004A9D8(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v8 < a2)
  {
    unint64_t v9 = ((v7 + ((v6 + 8) & ~v6) + 31) & 0xFFFFFFFFFFFFFFF8) + 32;
    unsigned int v10 = a2 - v8;
    uint64_t v11 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v12 = 2;
    }
    else {
      unsigned int v12 = v10 + 1;
    }
    if (v12 >= 0x10000) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v12 < 0x100) {
      unsigned int v13 = 1;
    }
    if (v12 >= 2) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    switch(v14)
    {
      case 1:
        int v15 = *((unsigned __int8 *)a1 + v9);
        if (!v15) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v15 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v15) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x10004AB44);
      case 4:
        int v15 = *(_DWORD *)((char *)a1 + v9);
        if (!v15) {
          break;
        }
LABEL_22:
        int v17 = v15 - 1;
        if (v11)
        {
          int v17 = 0;
          LODWORD(v11) = *a1;
        }
        return v8 + (v11 | v17) + 1;
      default:
        break;
    }
  }
  uint64_t v18 = ((unint64_t)a1 + v6 + 8) & ~v6;
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(v18);
  }
  unint64_t v19 = *(void *)(((v7 + v18 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v19 >= 0xFFFFFFFF) {
    LODWORD(v19) = -1;
  }
  return (v19 + 1);
}

void sub_10004AB58(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v11 = ((v10 + ((v9 + 8) & ~v9) + 31) & 0xFFFFFFFFFFFFFFF8) + 32;
  if (v8 >= a3)
  {
    int v15 = 0;
    int v16 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v11] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            unint64_t v19 = (unint64_t)&a1[v9 + 8] & ~v9;
            if (v7 < 0x7FFFFFFF)
            {
              unint64_t v21 = (v10 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
              if ((a2 & 0x80000000) != 0)
              {
                *(unsigned char *)(v21 + 16) = 0;
                *(void *)unint64_t v21 = a2 ^ 0x80000000;
                *(void *)(v21 + 8) = 0;
              }
              else
              {
                *(void *)(v21 + 8) = a2 - 1;
              }
            }
            else
            {
              uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(v19);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = a3 - v8;
    if (((v10 + ((v9 + 8) & ~v9) + 31) & 0xFFFFFFF8) == 0xFFFFFFE0) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    int v16 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((v10 + ((v9 + 8) & ~v9) + 31) & 0xFFFFFFF8) == 0xFFFFFFE0) {
    int v17 = v16;
  }
  else {
    int v17 = 1;
  }
  if (((v10 + ((v9 + 8) & ~v9) + 31) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    int v18 = ~v8 + a2;
    bzero(a1, ((v10 + ((v9 + 8) & ~v9) + 31) & 0xFFFFFFFFFFFFFFF8) + 32);
    *(_DWORD *)a1 = v18;
  }
  switch(v15)
  {
    case 1:
      a1[v11] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v11] = v17;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x10004AD64);
    case 4:
      *(_DWORD *)&a1[v11] = v17;
      break;
    default:
      return;
  }
}

uint64_t sub_10004AD90(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10004ADA0()
{
  return swift_release();
}

uint64_t sub_10004ADAC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

unint64_t sub_10004ADEC()
{
  unint64_t result = qword_1001A6BA0;
  if (!qword_1001A6BA0)
  {
    sub_100004A58(&qword_1001A6B98);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6BA0);
  }
  return result;
}

uint64_t sub_10004AE54()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10004AF08()
{
  sub_10004B4E0();

  return swift_bridgeObjectRetain();
}

uint64_t sub_10004AF30()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10004AFE0()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t sub_10004B074()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

uint64_t sub_10004B140()
{
  swift_getKeyPath();
  sub_10004AFE0();
  swift_release();
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t sub_10004B1B4()
{
  return swift_release();
}

uint64_t sub_10004B260()
{
  return LocalizedStringKey.init(stringLiteral:)();
}

BOOL sub_10004B2C4()
{
  sub_10004B4E0();
  swift_bridgeObjectRetain();
  uint64_t v0 = Array.count.getter();
  swift_bridgeObjectRelease();
  return v0 > 1;
}

BOOL sub_10004B328()
{
  sub_10004B4E0();
  swift_bridgeObjectRetain();
  uint64_t v0 = Array.count.getter();
  swift_bridgeObjectRelease();
  return v0 == 1;
}

uint64_t sub_10004B38C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = swift_allocObject();
  ObservationRegistrar.init()();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 32) = a3;
  *(unsigned char *)(v8 + 40) = a4;
  return v8;
}

uint64_t sub_10004B3FC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + qword_1001A6BB0;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_10004B470()
{
  sub_10004B3FC();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FeaturedVideosViewModel()
{
  return sub_10000B72C();
}

uint64_t sub_10004B4E0()
{
  swift_getKeyPath();
  sub_10004AFE0();
  swift_release();
  return *(void *)(v0 + 32);
}

uint64_t sub_10004B554@<X0>(uint64_t *a1@<X8>)
{
  *a1 = sub_10004B4E0();

  return swift_bridgeObjectRetain();
}

uint64_t sub_10004B590()
{
  return sub_10004AF30();
}

uint64_t sub_10004B5BC()
{
  return 16;
}

__n128 sub_10004B5C8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10004B5D4()
{
  *(void *)(*(void *)(v0 + 16) + 32) = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10004B610@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10004B140();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10004B640()
{
  return sub_10004B1B4();
}

uint64_t sub_10004B668()
{
  return 16;
}

__n128 sub_10004B674(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_10004B680()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 40) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_10004B694(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10004B6FC(&qword_1001A6C38);
  uint64_t result = sub_10004B6FC(&qword_1001A6C40);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10004B6FC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for PromotionalAssets.PhoneWallpaper();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for WallpaperWatchFaceController()
{
  return &type metadata for WallpaperWatchFaceController;
}

uint64_t sub_10004B750(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL();
  v1[15] = v3;
  v1[16] = *(void *)(v3 - 8);
  uint64_t v4 = swift_task_alloc();
  v1[17] = v4;
  unsigned int v5 = (void *)swift_task_alloc();
  v1[18] = v5;
  *unsigned int v5 = v1;
  v5[1] = sub_10004B84C;
  return sub_10004BD64(v4, a1);
}

uint64_t sub_10004B84C()
{
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10004BC40;
  }
  else {
    uint64_t v2 = sub_10004B960;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10004B960()
{
  id v1 = [objc_allocWithZone((Class)CLKWatchFaceLibrary) init];
  v0[20] = v1;
  URL._bridgeToObjectiveC()(v2);
  uint64_t v4 = v3;
  v0[21] = v3;
  v0[2] = v0;
  v0[3] = sub_10004BA88;
  uint64_t v5 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10004C574;
  v0[13] = &unk_100196C60;
  v0[14] = v5;
  [v1 addWatchFaceAtURL:v4 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10004BA88()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 176) = v1;
  if (v1) {
    uint64_t v2 = sub_10004BCA4;
  }
  else {
    uint64_t v2 = sub_10004BB98;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10004BB98()
{
  uint64_t v1 = *(void **)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 120);

  sub_10004D8E8(v2, "Failed to remove file at %s possibly does not exist");
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10004BC40()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10004BCA4()
{
  uint64_t v1 = (void *)v0[21];
  uint64_t v2 = (void *)v0[20];
  uint64_t v4 = v0[16];
  uint64_t v3 = v0[17];
  uint64_t v5 = v0[15];
  swift_willThrow();

  sub_10004D8E8(v3, "Failed to remove file at %s possibly does not exist");
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10004BD64(uint64_t a1, uint64_t a2)
{
  v2[4] = a1;
  v2[5] = a2;
  uint64_t v3 = type metadata accessor for URL();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  return _swift_task_switch(sub_10004BE6C, 0, 0);
}

uint64_t sub_10004BE6C()
{
  uint64_t v1 = (void *)v0[5];
  id v2 = [self defaultSessionConfiguration];
  v0[11] = [self sessionWithConfiguration:v2];

  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  sub_10000AC9C(v1, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[12] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10004BFD8;
  uint64_t v7 = v0[9];
  uint64_t v6 = v0[10];
  return NSURLSession.download(from:delegate:)(v6, v7, 0);
}

uint64_t sub_10004BFD8(void *a1)
{
  uint64_t v4 = (void *)*v2;
  v4[13] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[9];
  uint64_t v6 = v4[7];
  uint64_t v7 = v4[6];
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    uint64_t v8 = sub_10004C4C0;
  }
  else
  {

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v4[14] = v9;
    v4[15] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v9(v5, v7);
    uint64_t v8 = sub_10004C1B0;
  }
  return _swift_task_switch(v8, 0, 0);
}

uint64_t sub_10004C1B0()
{
  uint64_t v1 = *(void *)(v0 + 104);
  sub_10004D67C(*(void *)(v0 + 64));
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v0 + 48);
  if (v2)
  {
    uint64_t v4 = *(void **)(v0 + 88);
    (*(void (**)(void, void))(v0 + 112))(*(void *)(v0 + 80), *(void *)(v0 + 48));

LABEL_3:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_4;
  }
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 112);
  uint64_t v8 = *(void *)(v0 + 64);
  URL.appendingPathComponent(_:isDirectory:)();
  v7(v8, v3);
  uint64_t v9 = self;
  id v10 = [v9 defaultManager];
  URL._bridgeToObjectiveC()(v11);
  unsigned int v13 = v12;
  URL._bridgeToObjectiveC()(v14);
  int v16 = v15;
  *(void *)(v0 + 16) = 0;
  LODWORD(v7) = [v10 copyItemAtURL:v13 toURL:v15 error:v0 + 16];

  int v17 = *(void **)(v0 + 16);
  if (!v7)
  {
    id v23 = v17;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    id v24 = [v9 defaultManager];
    URL._bridgeToObjectiveC()(v25);
    uint64_t v27 = v26;
    *(void *)(v0 + 24) = 0;
    unsigned int v28 = [v24 removeItemAtURL:v26 error:v0 + 24];

    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v0 + 112);
    uint64_t v31 = *(void *)(v0 + 80);
    uint64_t v30 = *(void **)(v0 + 88);
    uint64_t v32 = *(void *)(v0 + 48);
    unint64_t v33 = *(void **)(v0 + 24);
    uint64_t v34 = *(void *)(v0 + 32);
    if (v28)
    {
      id v35 = v33;
      swift_willThrow();
    }
    else
    {
      id v36 = v33;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
    }
    v29(v34, v32);
    v29(v31, v32);
    goto LABEL_3;
  }
  int v18 = *(void (**)(uint64_t, uint64_t))(v0 + 112);
  uint64_t v19 = *(void *)(v0 + 80);
  uint64_t v20 = *(void **)(v0 + 88);
  uint64_t v21 = *(void *)(v0 + 48);
  id v22 = v17;
  v18(v19, v21);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
LABEL_4:
  return v5();
}

uint64_t sub_10004C4C0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10004C574(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    sub_10000570C(&qword_1001A5968);
    uint64_t v4 = swift_allocError();
    *uint64_t v5 = a2;
    id v6 = a2;
    return _swift_continuation_throwingResumeWithError(v2, v4);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    return _swift_continuation_throwingResume(v7);
  }
}

uint64_t sub_10004C60C(uint64_t a1)
{
  v1[5] = a1;
  uint64_t v2 = type metadata accessor for URL();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  return _swift_task_switch(sub_10004C738, 0, 0);
}

uint64_t sub_10004C738()
{
  uint64_t v1 = (void *)v0[5];
  id v2 = [self defaultSessionConfiguration];
  v0[14] = [self sessionWithConfiguration:v2];

  uint64_t v3 = v1[3];
  v0[15] = v3;
  uint64_t v4 = v1[4];
  v0[16] = v4;
  v0[17] = sub_10000AC9C(v1, v3);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 24);
  v0[18] = v5;
  v0[19] = (v4 + 24) & 0xFFFFFFFFFFFFLL | 0xA2BE000000000000;
  v5(v3, v4);
  id v6 = (void *)swift_task_alloc();
  v0[20] = v6;
  void *v6 = v0;
  v6[1] = sub_10004C8C0;
  uint64_t v8 = v0[12];
  uint64_t v7 = v0[13];
  return NSURLSession.download(from:delegate:)(v7, v8, 0);
}

uint64_t sub_10004C8C0(void *a1)
{
  uint64_t v4 = (void *)*v2;
  v4[21] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[12];
  uint64_t v6 = v4[7];
  uint64_t v7 = v4[6];
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    uint64_t v8 = sub_10004D59C;
  }
  else
  {

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v4[22] = v9;
    v4[23] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v9(v5, v7);
    uint64_t v8 = sub_10004CA98;
  }
  return _swift_task_switch(v8, 0, 0);
}

uint64_t sub_10004CA98()
{
  uint64_t v61 = v0;
  uint64_t v1 = *(void *)(v0 + 168);
  sub_10004D67C(*(void *)(v0 + 80));
  if (v1)
  {
    id v2 = *(void **)(v0 + 112);
    (*(void (**)(void, void))(v0 + 176))(*(void *)(v0 + 104), *(void *)(v0 + 48));

LABEL_3:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
LABEL_4:
    return v3();
  }
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
  uint64_t v6 = *(void *)(v0 + 80);
  uint64_t v7 = *(void *)(v0 + 72);
  uint64_t v8 = *(void *)(v0 + 48);
  (*(void (**)(void, void))(v0 + 144))(*(void *)(v0 + 120), *(void *)(v0 + 128));
  URL.lastPathComponent.getter();
  v5(v7, v8);
  URL.appendingPathComponent(_:isDirectory:)();
  swift_bridgeObjectRelease();
  v5(v6, v8);
  uint64_t v9 = self;
  *(void *)(v0 + 192) = v9;
  id v10 = [v9 defaultManager];
  URL._bridgeToObjectiveC()(v11);
  unsigned int v13 = v12;
  URL._bridgeToObjectiveC()(v14);
  int v16 = v15;
  *(void *)(v0 + 16) = 0;
  LODWORD(v7) = [v10 copyItemAtURL:v13 toURL:v15 error:v0 + 16];

  int v17 = *(void **)(v0 + 16);
  if (!v7)
  {
    id v21 = v17;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    id v22 = [*(id *)(v0 + 192) defaultManager];
    URL._bridgeToObjectiveC()(v23);
    uint64_t v25 = v24;
    *(void *)(v0 + 24) = 0;
    unsigned int v26 = [v22 removeItemAtURL:v24 error:v0 + 24];

    uint64_t v27 = *(void **)(v0 + 24);
    unsigned int v28 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
    uint64_t v30 = *(void *)(v0 + 104);
    uint64_t v29 = *(void **)(v0 + 112);
    uint64_t v31 = *(void *)(v0 + 88);
    uint64_t v32 = *(void *)(v0 + 48);
    if (v26)
    {
      id v33 = v27;
      swift_willThrow();
    }
    else
    {
      id v34 = v27;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
    }
    v28(v31, v32);
    v28(v30, v32);
    goto LABEL_3;
  }
  id v18 = v17;
  uint64_t v19 = Data.init(contentsOf:options:)();
  *(void *)(v0 + 200) = v19;
  *(void *)(v0 + 208) = v20;
  uint64_t v35 = v19;
  unint64_t v36 = v20;
  id v37 = objc_allocWithZone((Class)UIImage);
  sub_10004DC50(v35, v36);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v39 = [v37 initWithData:isa];
  *(void *)(v0 + 216) = v39;
  sub_100044C78(v35, v36);

  if (!v39)
  {
    if (qword_1001A4F38 != -1) {
      swift_once();
    }
    uint64_t v41 = *(void *)(v0 + 88);
    uint64_t v43 = *(void *)(v0 + 56);
    uint64_t v42 = *(void *)(v0 + 64);
    uint64_t v44 = *(void *)(v0 + 48);
    uint64_t v45 = type metadata accessor for Logger();
    sub_100017378(v45, (uint64_t)qword_1001B75B8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v42, v41, v44);
    unint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    BOOL v48 = os_log_type_enabled(v46, v47);
    unsigned __int8 v49 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
    uint64_t v50 = *(void *)(v0 + 64);
    uint64_t v51 = *(void *)(v0 + 48);
    if (v48)
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      uint64_t v60 = swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 136315138;
      sub_10004DD9C();
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 32) = sub_1000FE1F8(v53, v54, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v49(v50, v51);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Failed to create image from %s", v52, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100044C78(v35, v36);
    }
    else
    {
      sub_100044C78(v35, v36);
      v49(v50, v51);
    }
    uint64_t v55 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
    uint64_t v56 = *(void *)(v0 + 104);
    uint64_t v57 = *(void **)(v0 + 112);
    uint64_t v58 = *(void *)(v0 + 88);
    uint64_t v59 = *(void *)(v0 + 48);
    sub_10004D8E8(v58, "Failed to delete wallpaper at %s");

    v55(v58, v59);
    v55(v56, v59);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_4;
  }
  unint64_t v40 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v40;
  *unint64_t v40 = v0;
  v40[1] = sub_10004D144;
  v40[16] = v39;
  return _swift_task_switch(sub_10004DE14, 0, 0);
}

uint64_t sub_10004D144()
{
  *(void *)(*(void *)v1 + 232) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = sub_10004D3BC;
  }
  else {
    id v2 = sub_10004D284;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10004D284()
{
  unint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 200);

  sub_100044C78(v2, v1);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = *(void **)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v7 = *(void *)(v0 + 48);
  sub_10004D8E8(v6, "Failed to delete wallpaper at %s");

  v3(v6, v7);
  v3(v4, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_10004D3BC()
{
  unint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 88);

  sub_100044C78(v2, v1);
  sub_10004D8E8(v3, "Failed to delete wallpaper at %s");
  id v4 = [*(id *)(v0 + 192) defaultManager];
  URL._bridgeToObjectiveC()(v5);
  uint64_t v7 = v6;
  *(void *)(v0 + 24) = 0;
  unsigned int v8 = [v4 removeItemAtURL:v6 error:v0 + 24];

  uint64_t v9 = *(void **)(v0 + 24);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
  uint64_t v12 = *(void *)(v0 + 104);
  uint64_t v11 = *(void **)(v0 + 112);
  uint64_t v13 = *(void *)(v0 + 88);
  uint64_t v14 = *(void *)(v0 + 48);
  if (v8)
  {
    id v15 = v9;
    swift_willThrow();
  }
  else
  {
    id v16 = v9;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  v10(v13, v14);
  v10(v12, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

uint64_t sub_10004D59C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

id sub_10004D67C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  uint64_t v10 = (char *)&v21 - v9;
  static URL.temporaryDirectory.getter();
  id v11 = [self processInfo];
  id v12 = [v11 globallyUniqueString];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  URL.appendingPathComponent(_:isDirectory:)();
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v7, v2);
  id v14 = [self defaultManager];
  URL._bridgeToObjectiveC()(v15);
  int v17 = v16;
  id v22 = 0;
  LOBYTE(v12) = [v14 createDirectoryAtURL:v16 withIntermediateDirectories:1 attributes:0 error:&v22];

  id v18 = v22;
  if (v12)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v10, v2);
    return v18;
  }
  else
  {
    id v20 = v22;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return (id)((uint64_t (*)(char *, uint64_t))v13)(v10, v2);
  }
}

void sub_10004D8E8(uint64_t a1, const char *a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [self defaultManager];
  URL._bridgeToObjectiveC()(v10);
  id v12 = v11;
  id v28 = 0;
  unsigned int v13 = [v9 removeItemAtURL:v11 error:&v28];

  id v14 = v28;
  if (v13)
  {
    id v15 = v14;
  }
  else
  {
    uint64_t v26 = (uint64_t)v28;
    id v16 = v28;
    uint64_t v17 = _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_1001A4F38 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100017378(v18, (uint64_t)qword_1001B75B8);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      id v22 = (void *)swift_slowAlloc();
      uint64_t v25 = a2;
      id v28 = v22;
      *(_DWORD *)uint64_t v21 = 136315138;
      uint64_t v26 = v17;
      sub_10004DD9C();
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v27 = sub_1000FE1F8(v23, v24, (uint64_t *)&v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, v25, v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
    swift_errorRelease();
  }
}

uint64_t sub_10004DC50(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

void sub_10004DCA8(uint64_t a1)
{
  id v1 = [self creationRequestForAssetFromImage:a1];
}

uint64_t sub_10004DCFC(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2)
  {
    a1 = *(void *)(a1 + 32);
    return _swift_continuation_throwingResume(a1);
  }
  if (!a3)
  {
    __break(1u);
    return _swift_continuation_throwingResume(a1);
  }
  sub_10000570C(&qword_1001A5968);
  uint64_t v5 = swift_allocError();
  void *v6 = a3;
  id v7 = a3;

  return _swift_continuation_throwingResumeWithError(v3, v5);
}

unint64_t sub_10004DD9C()
{
  unint64_t result = qword_1001A6C50;
  if (!qword_1001A6C50)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001A6C50);
  }
  return result;
}

uint64_t sub_10004DDF4(uint64_t a1)
{
  *(void *)(v1 + 128) = a1;
  return _swift_task_switch(sub_10004DE14, 0, 0);
}

uint64_t sub_10004DE14()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 2;
  uint64_t v3 = v0 + 10;
  uint64_t v4 = (void *)v1[16];
  id v5 = [self sharedPhotoLibrary];
  v1[17] = v5;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  v1[14] = sub_10004E1F0;
  v1[15] = v6;
  v1[10] = _NSConcreteStackBlock;
  v1[11] = 1107296256;
  v1[12] = sub_100044790;
  v1[13] = &unk_100196C20;
  id v7 = _Block_copy(v3);
  v1[18] = v7;
  id v8 = v4;
  swift_release();
  v1[2] = v1;
  v1[3] = sub_10004DFC0;
  uint64_t v9 = swift_continuation_init();
  v1[10] = _NSConcreteStackBlock;
  v1[11] = 0x40000000;
  v1[12] = sub_10004DCFC;
  v1[13] = &unk_100196C48;
  v1[14] = v9;
  [v5 performChanges:v7 completionHandler:v3];
  return _swift_continuation_await(v2);
}

uint64_t sub_10004DFC0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 152) = v1;
  if (v1) {
    uint64_t v2 = sub_10004E13C;
  }
  else {
    uint64_t v2 = sub_10004E0D0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10004E0D0()
{
  uint64_t v1 = *(const void **)(v0 + 144);

  _Block_release(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10004E13C()
{
  uint64_t v1 = (const void *)v0[18];
  uint64_t v2 = (void *)v0[17];
  swift_willThrow();

  _Block_release(v1);
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10004E1B8()
{
  return swift_deallocObject();
}

void sub_10004E1F0()
{
  sub_10004DCA8(*(void *)(v0 + 16));
}

uint64_t sub_10004E1F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10004E208()
{
  return swift_release();
}

uint64_t sub_10004E218(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10004E280(&qword_1001A6C70);
  uint64_t result = sub_10004E280(&qword_1001A6C78);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10004E280(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for PromotionalAssets.WatchFace();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004E2C4@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_100050860(&qword_1001A53E0, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess();
  return sub_100050750(v3, a1);
}

uint64_t sub_10004E390()
{
  v1[6] = v0;
  sub_10000570C(&qword_1001A53D8);
  v1[7] = swift_task_alloc();
  type metadata accessor for MainActor();
  v1[8] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[9] = v3;
  v1[10] = v2;
  return _swift_task_switch(sub_10004E458, v3, v2);
}

uint64_t sub_10004E458()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  swift_getKeyPath();
  v0[5] = v2;
  sub_100050860(&qword_1001A53E0, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = v2 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess();
  sub_100050750(v3, v1);
  uint64_t v4 = type metadata accessor for ArtistPromotionalAssets();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v1, 1, v4) == 1)
  {
    uint64_t v5 = v0[6];
    sub_10000ACE0(v0[7], &qword_1001A53D8);
    uint64_t v7 = *(void *)(v5 + 16);
    uint64_t v6 = *(void *)(v5 + 24);
    if (*(unsigned char *)(v5 + 32))
    {
      id v8 = (void *)swift_task_alloc();
      v0[12] = v8;
      *id v8 = v0;
      v8[1] = sub_10004E85C;
      return sub_10004F1C8(v7, v6);
    }
    else
    {
      id v12 = (void *)swift_task_alloc();
      v0[11] = v12;
      *id v12 = v0;
      v12[1] = sub_10004E6D4;
      return sub_10004EBD0(v7, v6);
    }
  }
  else
  {
    uint64_t v10 = v0[7];
    swift_release();
    sub_10000ACE0(v10, &qword_1001A53D8);
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_10004E6D4()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 72);
  return _swift_task_switch(sub_10004E7F4, v3, v2);
}

uint64_t sub_10004E7F4()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10004E85C()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 72);
  return _swift_task_switch(sub_100050A6C, v3, v2);
}

uint64_t sub_10004E97C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess();
  sub_1000507D8(a2, v3);
  return swift_endAccess();
}

uint64_t sub_10004E9E8()
{
  swift_getKeyPath();
  sub_100050860(&qword_1001A53E0, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__error);
  swift_errorRetain();
  return v1;
}

uint64_t sub_10004EA9C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__error) = a2;
  swift_errorRetain();
  return swift_errorRelease();
}

uint64_t sub_10004EAE0()
{
  return swift_retain();
}

uint64_t sub_10004EB8C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__emptyScheduleViewModel) = a2;
  swift_retain();
  return swift_release();
}

uint64_t sub_10004EBD0(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  sub_10000570C(&qword_1001A53D8);
  v3[7] = swift_task_alloc();
  uint64_t v4 = sub_10000570C(&qword_1001A5490);
  v3[8] = v4;
  v3[9] = *(void *)(v4 - 8);
  v3[10] = swift_task_alloc();
  type metadata accessor for MainActor();
  v3[11] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[12] = v6;
  v3[13] = v5;
  return _swift_task_switch(sub_10004ECFC, v6, v5);
}

uint64_t sub_10004ECFC()
{
  sub_100050100();
  swift_bridgeObjectRetain();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[14] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10004EDAC;
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  return Event<>.init(id:)(v2, v3, v4);
}

uint64_t sub_10004EDAC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 104);
  uint64_t v4 = *(void *)(v2 + 96);
  if (v0) {
    uint64_t v5 = sub_10004F06C;
  }
  else {
    uint64_t v5 = sub_10004EEE8;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_10004EEE8()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[9];
  uint64_t v8 = v0[8];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  swift_release();
  Event<>.artistPromotionalAssets.getter();
  swift_getKeyPath();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  v0[3] = v3;
  sub_100050860(&qword_1001A53E0, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  sub_10000ACE0(v4, &qword_1001A53D8);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10004F06C()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[6];
  swift_release();
  swift_getKeyPath();
  uint64_t v3 = swift_task_alloc();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  v0[2] = v2;
  swift_errorRetain();
  sub_100050860(&qword_1001A53E0, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_errorRelease();
  swift_release();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10004F1C8(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  sub_10000570C(&qword_1001A6D90);
  v3[10] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for AppleMusicFetcher.MusicArtist();
  v3[11] = v4;
  v3[12] = *(void *)(v4 - 8);
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for EventsError();
  v3[15] = v5;
  v3[16] = *(void *)(v5 - 8);
  v3[17] = swift_task_alloc();
  sub_10000570C(&qword_1001A53D8);
  v3[18] = swift_task_alloc();
  v3[19] = type metadata accessor for MainActor();
  v3[20] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[21] = v7;
  v3[22] = v6;
  return _swift_task_switch(sub_10004F390, v7, v6);
}

uint64_t sub_10004F390()
{
  sub_100050100();
  swift_bridgeObjectRetain();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[23] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10004F440;
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[8];
  return ArtistPromotionalAssets.init(artistID:)(v2, v3, v4);
}

uint64_t sub_10004F440()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 176);
  uint64_t v4 = *(void *)(v2 + 168);
  if (v0) {
    uint64_t v5 = sub_10004F6EC;
  }
  else {
    uint64_t v5 = sub_10004F57C;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_10004F57C()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[9];
  swift_release();
  swift_getKeyPath();
  uint64_t v3 = swift_task_alloc();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  v0[6] = v2;
  sub_100050860(&qword_1001A53E0, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  sub_10000ACE0(v1, &qword_1001A53D8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10004F6EC()
{
  *(void *)(v0 + 16) = *(void *)(v0 + 192);
  swift_errorRetain();
  sub_10000570C(&qword_1001A5968);
  if (swift_dynamicCast())
  {
    int v1 = (*(uint64_t (**)(void, void))(*(void *)(v0 + 128) + 88))(*(void *)(v0 + 136), *(void *)(v0 + 120));
    *(_DWORD *)(v0 + 224) = v1;
    if (v1 == enum case for EventsError.missingData(_:))
    {
      swift_errorRelease();
      *(void *)(v0 + 200) = static MainActor.shared.getter();
      uint64_t v2 = (void *)swift_task_alloc();
      *(void *)(v0 + 208) = v2;
      *uint64_t v2 = v0;
      v2[1] = sub_10004F998;
      uint64_t v3 = *(void *)(v0 + 80);
      uint64_t v4 = *(void *)(v0 + 56);
      uint64_t v5 = *(void *)(v0 + 64);
      return sub_1000660D0(v3, v4, v5);
    }
    uint64_t v8 = *(void *)(v0 + 128);
    uint64_t v7 = *(void *)(v0 + 136);
    uint64_t v9 = *(void *)(v0 + 120);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  else
  {
    swift_release();
  }
  uint64_t v10 = *(void *)(v0 + 192);
  uint64_t v11 = *(void *)(v0 + 72);
  swift_errorRelease();
  swift_getKeyPath();
  uint64_t v12 = swift_task_alloc();
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = v10;
  *(void *)(v0 + 24) = v11;
  swift_errorRetain();
  sub_100050860(&qword_1001A53E0, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_errorRelease();
  swift_release();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_10004F998()
{
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  if (v0) {
    uint64_t v4 = sub_10004FE80;
  }
  else {
    uint64_t v4 = sub_10004FAF0;
  }
  return _swift_task_switch(v4, v3, v2);
}

uint64_t sub_10004FAF0()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 176);
  return _swift_task_switch(sub_10004FB54, v1, v2);
}

uint64_t sub_10004FB54()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    uint64_t v4 = *(unsigned int *)(v0 + 224);
    uint64_t v5 = *(void *)(v0 + 120);
    uint64_t v6 = *(void *)(v0 + 128);
    uint64_t v7 = *(void *)(v0 + 72);
    sub_10000ACE0(*(void *)(v0 + 80), &qword_1001A6D90);
    sub_100050860((unint64_t *)&qword_1001A6D98, (void (*)(uint64_t))&type metadata accessor for EventsError);
    uint64_t v8 = swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(v9, v4, v5);
    swift_getKeyPath();
    uint64_t v10 = swift_task_alloc();
    *(void *)(v10 + 16) = v7;
    *(void *)(v10 + 24) = v8;
    *(void *)(v0 + 32) = v7;
    sub_100050860(&qword_1001A53E0, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_errorRelease();
    swift_release();
    swift_task_dealloc();
  }
  else
  {
    uint64_t v12 = *(void *)(v0 + 104);
    uint64_t v11 = *(void *)(v0 + 112);
    uint64_t v13 = *(void *)(v0 + 72);
    sub_1000508EC(*(void *)(v0 + 80), v11);
    sub_100050950(v11, v12);
    sub_10000570C(&qword_1001A6DA0);
    swift_allocObject();
    uint64_t v14 = sub_100030D20(v12, (uint64_t)&_swiftEmptyArrayStorage);
    swift_getKeyPath();
    uint64_t v15 = swift_task_alloc();
    *(void *)(v15 + 16) = v13;
    *(void *)(v15 + 24) = v14;
    *(void *)(v0 + 40) = v13;
    sub_100050860(&qword_1001A53E0, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
    swift_task_dealloc();
    sub_1000509F8(v11);
  }
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t sub_10004FE80()
{
  swift_release();
  swift_errorRelease();
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 176);
  return _swift_task_switch(sub_10004FEF0, v1, v2);
}

uint64_t sub_10004FEF0()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v3, 1, 1, v1);
  uint64_t v4 = *(unsigned int *)(v0 + 224);
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 128);
  uint64_t v7 = *(void *)(v0 + 72);
  sub_10000ACE0(*(void *)(v0 + 80), &qword_1001A6D90);
  sub_100050860((unint64_t *)&qword_1001A6D98, (void (*)(uint64_t))&type metadata accessor for EventsError);
  uint64_t v8 = swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(v9, v4, v5);
  swift_getKeyPath();
  uint64_t v10 = swift_task_alloc();
  *(void *)(v10 + 16) = v7;
  *(void *)(v10 + 24) = v8;
  *(void *)(v0 + 32) = v7;
  sub_100050860(&qword_1001A53E0, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_errorRelease();
  swift_release();
  swift_task_dealloc();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_100050100()
{
  uint64_t v1 = sub_10000570C(&qword_1001A53D8);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v4 = &v7[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for ArtistPromotionalAssets();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  swift_getKeyPath();
  uint64_t v12 = v0;
  uint64_t v13 = v4;
  uint64_t v14 = v0;
  sub_100050860(&qword_1001A53E0, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  sub_10000ACE0((uint64_t)v4, &qword_1001A53D8);
  swift_getKeyPath();
  uint64_t v10 = v0;
  uint64_t v11 = 0;
  uint64_t v14 = v0;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_getKeyPath();
  uint64_t v8 = v0;
  uint64_t v9 = 0;
  uint64_t v14 = v0;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

uint64_t sub_100050310()
{
  sub_10000ADA8();
  sub_10000ACE0(v0 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets, &qword_1001A53D8);
  swift_errorRelease();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1000503F4()
{
  return type metadata accessor for PromotionalAssetsController();
}

uint64_t type metadata accessor for PromotionalAssetsController()
{
  uint64_t result = qword_1001A6CC8;
  if (!qword_1001A6CC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100050448()
{
  sub_10005052C();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ObservationRegistrar();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_10005052C()
{
  if (!qword_1001A6CD8)
  {
    type metadata accessor for ArtistPromotionalAssets();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001A6CD8);
    }
  }
}

uint64_t destroy for PromotionalAssetsController.PromotionalAssetsType()
{
  return sub_10000ADA8();
}

uint64_t _s16EventViewService27PromotionalAssetsControllerC21PromotionalAssetsTypeOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_10000ADA0();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for PromotionalAssetsController.PromotionalAssetsType(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_10000ADA0();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_10000ADA8();
  return a1;
}

__n128 initializeWithTake for PromotionalAssetsController.PromotionalAssetsType(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for PromotionalAssetsController.PromotionalAssetsType(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_10000ADA8();
  return a1;
}

uint64_t getEnumTagSinglePayload for PromotionalAssetsController.PromotionalAssetsType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PromotionalAssetsController.PromotionalAssetsType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100050724(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_10005072C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for PromotionalAssetsController.PromotionalAssetsType()
{
  return &type metadata for PromotionalAssetsController.PromotionalAssetsType;
}

uint64_t sub_100050750(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A53D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000507C0()
{
  return sub_1000508A8();
}

uint64_t sub_1000507D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A53D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100050848()
{
  return sub_1000509B4();
}

uint64_t sub_100050860(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000508A8()
{
  *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__error) = *(void *)(v0 + 24);
  swift_errorRetain();
  return swift_errorRelease();
}

uint64_t sub_1000508EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppleMusicFetcher.MusicArtist();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100050950(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppleMusicFetcher.MusicArtist();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000509B4()
{
  *(void *)(*(void *)(v0 + 16)
            + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__emptyScheduleViewModel) = *(void *)(v0 + 24);
  swift_retain();
  return swift_release();
}

uint64_t sub_1000509F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AppleMusicFetcher.MusicArtist();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100050A54()
{
  return sub_10000ADE8();
}

unint64_t sub_100050A74(uint64_t a1)
{
  unint64_t result = sub_100050A9C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100050A9C()
{
  unint64_t result = qword_1001A6DA8[0];
  if (!qword_1001A6DA8[0])
  {
    type metadata accessor for Playlist();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001A6DA8);
  }
  return result;
}

void sub_100050AF4()
{
  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Optional();
    type metadata accessor for Published();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Array();
      type metadata accessor for Published();
      if (v2 <= 0x3F)
      {
        sub_1000206BC(319, &qword_1001A6E30);
        if (v3 <= 0x3F)
        {
          sub_1000206BC(319, &qword_1001A6E38);
          if (v4 <= 0x3F) {
            swift_initClassMetadata2();
          }
        }
      }
    }
  }
}

uint64_t sub_100050CF0()
{
  id v0 = [self currentDevice];
  id v1 = [v0 userInterfaceIdiom];

  if (v1 == (id)1) {
    return 200;
  }
  else {
    return 100;
  }
}

uint64_t sub_100050D54()
{
  return swift_release();
}

uint64_t sub_100050E4C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100050F3C()
{
  return static Published.subscript.setter();
}

uint64_t sub_100051030()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100051120()
{
  return static Published.subscript.setter();
}

uint64_t sub_100051218()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100051308()
{
  return static Published.subscript.setter();
}

uint64_t sub_1000513FC()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 96) + 48))(*(void *)(*(void *)v0 + 80));
}

uint64_t sub_100051474@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 96);
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v17 - v9;
  (*(void (**)(uint64_t, uint64_t))(v3 + 56))(v4, v3);
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    uint64_t v12 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
  else
  {
    uint64_t v14 = sub_100050CF0();
    uint64_t v15 = sub_100050CF0();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v14, v15, AssociatedTypeWitness, AssociatedConformanceWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v10, AssociatedTypeWitness);
  }
}

BOOL sub_10005172C()
{
  return (Collection.isEmpty.getter() & 1) == 0;
}

uint64_t sub_1000517C4()
{
  return sub_100051308();
}

void *sub_1000517CC(char a1)
{
  uint64_t v3 = *(void *)(v1 + *(void *)(*(void *)v1 + 128));
  swift_bridgeObjectRetain_n();
  uint64_t v4 = sub_100138208(v3);
  swift_bridgeObjectRelease();
  uint64_t v18 = v4;
  sub_100053040((uint64_t *)&v18);
  swift_bridgeObjectRelease();
  char v5 = v18;
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (*(void *)(v3 + 16) == 1)
  {
    if ((a1 & 1) == 0) {
      goto LABEL_3;
    }
LABEL_10:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v6 = sub_100137AF0(0, v6[2] + 1, 1, v6);
    }
    unint64_t v16 = v6[2];
    unint64_t v15 = v6[3];
    if (v16 >= v15 >> 1) {
      uint64_t v6 = sub_100137AF0((void *)(v15 > 1), v16 + 1, 1, v6);
    }
    v6[2] = v16 + 1;
    *(_OWORD *)&v6[2 * v16 + 4] = xmmword_100154D40;
    int64_t v7 = v5[2];
    if (v7) {
      goto LABEL_4;
    }
LABEL_15:
    swift_release();
    uint64_t v8 = _swiftEmptyArrayStorage;
    goto LABEL_16;
  }
  sub_10000570C(qword_1001A6E50);
  uint64_t v6 = (void *)swift_allocObject();
  *((_OWORD *)v6 + 1) = xmmword_100153180;
  v6[4] = 0;
  v6[5] = 0;
  if (a1) {
    goto LABEL_10;
  }
LABEL_3:
  int64_t v7 = v5[2];
  if (!v7) {
    goto LABEL_15;
  }
LABEL_4:
  uint64_t v18 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  sub_10006B0D8(0, v7, 0);
  uint64_t v8 = v18;
  uint64_t v9 = v5 + 5;
  do
  {
    uint64_t v11 = *(v9 - 1);
    uint64_t v10 = *v9;
    uint64_t v18 = v8;
    unint64_t v13 = v8[2];
    unint64_t v12 = v8[3];
    swift_bridgeObjectRetain();
    if (v13 >= v12 >> 1)
    {
      sub_10006B0D8(v12 > 1, v13 + 1, 1);
      uint64_t v8 = v18;
    }
    v9 += 2;
    v8[2] = v13 + 1;
    uint64_t v14 = &v8[2 * v13];
    v14[4] = v11;
    v14[5] = v10;
    --v7;
  }
  while (v7);
  swift_release();
  swift_bridgeObjectRelease();
LABEL_16:
  uint64_t v18 = v6;
  sub_1000A3230((uint64_t)v8);
  return v18;
}

uint64_t sub_100051A00(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v3[6] = *v2;
  type metadata accessor for MainActor();
  v3[7] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[8] = v5;
  v3[9] = v4;
  return _swift_task_switch(sub_100051AC4, v5, v4);
}

uint64_t sub_100051AC4()
{
  uint64_t v1 = v0[4];
  sub_10001AEA0();
  if (v1)
  {
    if (v1 == 1)
    {
      unint64_t v2 = (void *)swift_task_alloc();
      v0[10] = v2;
      *unint64_t v2 = v0;
      v2[1] = sub_100051CF0;
      return sub_100051F1C();
    }
    uint64_t v4 = (void *)v0[6];
    uint64_t v6 = v0[4];
    uint64_t v5 = v0[5];
    uint64_t v7 = v0[3];
    swift_release();
    v0[2] = *(void *)(v5 + *(void *)(*(void *)v5 + 120));
    uint64_t v8 = (void *)swift_task_alloc();
    v8[2] = v4[10];
    v8[3] = v4[11];
    v8[4] = v4[12];
    v8[5] = v4[13];
    v8[6] = v7;
    v8[7] = v6;
    type metadata accessor for Array();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    _ArrayProtocol.filter(_:)();
    swift_task_dealloc();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRetain();
  }
  sub_100050F3C();
  sub_100008068(v0[3], v0[4]);
  sub_100051120();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100051CF0(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 88) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[8];
    uint64_t v6 = v4[9];
    uint64_t v7 = sub_100051EB0;
  }
  else
  {
    v4[12] = a1;
    uint64_t v5 = v4[8];
    uint64_t v6 = v4[9];
    uint64_t v7 = sub_100051E18;
  }
  return _swift_task_switch(v7, v5, v6);
}

uint64_t sub_100051E18()
{
  swift_release();
  sub_100050F3C();
  sub_100008068(v0[3], v0[4]);
  sub_100051120();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100051EB0()
{
  swift_release();
  swift_errorRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100051F1C()
{
  v1[3] = v0;
  v1[4] = *v0;
  type metadata accessor for MainActor();
  v1[5] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[6] = v3;
  v1[7] = v2;
  return _swift_task_switch(sub_100051FDC, v3, v2);
}

uint64_t sub_100051FDC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100052084;
  return sub_10001AA08();
}

uint64_t sub_100052084(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = *v4;
  *(void *)(v6 + 72) = a1;
  *(void *)(v6 + 80) = a2;
  *(void *)(v6 + 88) = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v7 = *(void *)(v6 + 48);
    uint64_t v8 = *(void *)(v6 + 56);
    uint64_t v9 = sub_100052310;
  }
  else
  {
    *(unsigned char *)(v6 + 96) = a3;
    uint64_t v7 = *(void *)(v6 + 48);
    uint64_t v8 = *(void *)(v6 + 56);
    uint64_t v9 = sub_1000521B0;
  }
  return _swift_task_switch(v9, v7, v8);
}

uint64_t sub_1000521B0()
{
  char v1 = *(unsigned char *)(v0 + 96);
  swift_release();
  if (v1)
  {
    uint64_t v6 = static Array._allocateUninitialized(_:)();
  }
  else
  {
    *(void *)(v0 + 16) = *(void *)(*(void *)(v0 + 24) + *(void *)(**(void **)(v0 + 24) + 120));
    uint64_t v2 = *(void *)(v0 + 80);
    uint64_t v3 = *(void *)(v0 + 72);
    uint64_t v4 = *(void **)(v0 + 32);
    uint64_t v5 = (void *)swift_task_alloc();
    v5[2] = v4[10];
    v5[3] = v4[11];
    v5[4] = v4[12];
    v5[5] = v4[13];
    v5[6] = v3;
    v5[7] = v2;
    type metadata accessor for Array();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    uint64_t v6 = _ArrayProtocol.filter(_:)();
    swift_task_dealloc();
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v7(v6);
}

uint64_t sub_100052310()
{
  swift_release();
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100052374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v29 = a3;
  uint64_t v28 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v27 - v13;
  uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 216))(a5, a7);
  type metadata accessor for Array();
  swift_getWitnessTable();
  Collection.first.getter();
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    char v16 = 0;
  }
  else
  {
    uint64_t v18 = v28;
    uint64_t v17 = v29;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    os_log_type_t v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v14, AssociatedTypeWitness);
    if (v20)
    {
      id v21 = [v20 country];

      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v24 = v23;

      if (v22 == v18 && v24 == v17)
      {
        swift_bridgeObjectRelease();
        char v16 = 1;
      }
      else
      {
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      char v16 = 0;
    }
  }
  return v16 & 1;
}

BOOL sub_100052630(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  char v16 = (char *)v27 - v15;
  v27[7] = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 216))(a5, a7);
  type metadata accessor for Array();
  swift_getWitnessTable();
  Collection.first.getter();
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    return 0;
  }
  else
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    double v20 = (*(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
    double v22 = v21;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v16, AssociatedTypeWitness);
    id v23 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:v20 longitude:v22];
    id v24 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:a1 longitude:a2];
    [v24 distanceFromLocation:v23];
    double v26 = v25;

    return v26 <= 161000.0;
  }
}

uint64_t sub_1000528E8(uint64_t a1)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)(*(void *)v1 + 96) + 40))(*(void *)(*(void *)v1 + 80));
  sub_100116C94(v3, v4, 2, a1);

  return swift_bridgeObjectRelease();
}

void sub_100052988(char a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t v11 = *v5;
  sub_10000570C(&qword_1001A5390);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_100152B90;
  uint64_t v13 = (*(uint64_t (**)(void))(*(void *)(v11 + 96) + 40))(*(void *)(v11 + 80));
  *(void *)(v12 + 56) = &type metadata for AnalyticsString;
  *(void *)(v12 + 64) = &off_1001AAD38;
  *(unsigned char *)(v12 + 32) = 0;
  *(void *)(v12 + 40) = v13;
  *(void *)(v12 + 48) = v14;
  *(void *)(v12 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v12 + 104) = &off_1001AAD10;
  *(unsigned char *)(v12 + 72) = 2;
  *(void *)(v12 + 136) = &type metadata for AnalyticsModuleName;
  *(void *)(v12 + 144) = &off_1001AAD98;
  *(unsigned char *)(v12 + 112) = a1;
  *(void *)(v12 + 176) = &type metadata for AnalyticsModuleAction;
  *(void *)(v12 + 184) = &off_1001AAD70;
  *(void *)(v12 + 152) = a2;
  *(void *)(v12 + 160) = a3;
  *(unsigned char *)(v12 + 168) = a4;
  if (*(void *)(a5 + 72))
  {
    uint64_t v15 = *(void *)(a5 + 64);
    unint64_t v16 = *(void *)(a5 + 72);
  }
  else
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0xE000000000000000;
  }
  uint64_t v31 = &type metadata for AnalyticsString;
  uint64_t v32 = (void *(*)())&off_1001AAD38;
  LOBYTE(aBlock) = 1;
  uint64_t v29 = v15;
  uint64_t v30 = (Class (*)(uint64_t))v16;
  sub_10000751C(a2, a3, a4);
  id v34 = (char *)v12;
  unint64_t v17 = *(void *)(v12 + 16);
  unint64_t v18 = *(void *)(v12 + 24);
  swift_bridgeObjectRetain();
  if (v17 >= v18 >> 1) {
    id v34 = sub_1001378BC((char *)(v18 > 1), v17 + 1, 1, (char *)v12);
  }
  uint64_t v19 = sub_100007534((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v19, v19);
  double v21 = (char *)&v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v22 + 16))(v21);
  sub_100116BFC(v17, (uint64_t)v21, (uint64_t *)&v34, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_1001AAD38);
  sub_100007584((uint64_t)&aBlock);
  id v23 = v34;
  NSString v24 = String._bridgeToObjectiveC()();
  double v25 = (void *)swift_allocObject();
  v25[2] = 0xD00000000000001ELL;
  v25[3] = 0x800000010015D360;
  v25[4] = v23;
  uint64_t v32 = sub_100007614;
  id v33 = v25;
  aBlock = _NSConcreteStackBlock;
  uint64_t v29 = 1107296256;
  uint64_t v30 = sub_100116B70;
  uint64_t v31 = (ValueMetadata *)&unk_100196E28;
  double v26 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v26);
  swift_bridgeObjectRelease();
}

uint64_t sub_100052CE0()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 112));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 136);
  type metadata accessor for Optional();
  uint64_t v2 = type metadata accessor for Published();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 144);
  type metadata accessor for Array();
  uint64_t v4 = type metadata accessor for Published();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + *(void *)(*(void *)v0 + 152);
  uint64_t v6 = sub_10000570C(&qword_1001A6380);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + *(void *)(*(void *)v0 + 160);
  uint64_t v8 = sub_10000570C(&qword_1001A57C8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100052FD0()
{
  sub_100052CE0();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ArtistEventViewModel()
{
  return swift_getGenericMetadata();
}

Swift::Int sub_100053040(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000A567C(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_1000530AC(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_1000530AC(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_133;
    }
    if (v3) {
      return sub_1000537D4(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_141;
  }
  Swift::Int v90 = result;
  uint64_t v87 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = (char *)_swiftEmptyArrayStorage;
    uint64_t v92 = (char *)&_swiftEmptyArrayStorage[4];
    uint64_t v89 = _swiftEmptyArrayStorage;
    if (v3 != 1)
    {
      unint64_t v11 = _swiftEmptyArrayStorage[2];
LABEL_99:
      if (v11 >= 2)
      {
        uint64_t v81 = *v87;
        do
        {
          unint64_t v82 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_128;
          }
          if (!v81) {
            goto LABEL_140;
          }
          uint64_t v83 = *(void *)&v8[16 * v82 + 32];
          uint64_t v84 = *(void *)&v8[16 * v11 + 24];
          sub_1000538CC((char *)(v81 + 16 * v83), (char *)(v81 + 16 * *(void *)&v8[16 * v11 + 16]), v81 + 16 * v84, v92);
          if (v1) {
            break;
          }
          if (v84 < v83) {
            goto LABEL_129;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v8 = sub_1000A5668((uint64_t)v8);
          }
          if (v82 >= *((void *)v8 + 2)) {
            goto LABEL_130;
          }
          uint64_t v85 = &v8[16 * v82 + 32];
          *(void *)uint64_t v85 = v83;
          *((void *)v85 + 1) = v84;
          unint64_t v86 = *((void *)v8 + 2);
          if (v11 > v86) {
            goto LABEL_131;
          }
          memmove(&v8[16 * v11 + 16], &v8[16 * v11 + 32], 16 * (v86 - v11));
          *((void *)v8 + 2) = v86 - 1;
          unint64_t v11 = v86 - 1;
        }
        while (v86 > 2);
      }
LABEL_110:
      swift_bridgeObjectRelease();
      v89[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    uint64_t v89 = (void *)v7;
    uint64_t v92 = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v88 = *a1 + 24;
  uint64_t v8 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v91 = v3;
LABEL_15:
  Swift::Int v12 = v9++;
  if (v9 >= v3) {
    goto LABEL_32;
  }
  sub_100010B2C();
  uint64_t v13 = StringProtocol.localizedStandardCompare<A>(_:)();
  Swift::Int v9 = v12 + 2;
  if (v12 + 2 >= v3) {
    goto LABEL_21;
  }
  uint64_t v14 = v88 + 16 * v12;
  do
  {
    v14 += 16;
    if ((v13 == -1) == (StringProtocol.localizedStandardCompare<A>(_:)() != -1))
    {
      Swift::Int v3 = v91;
      if (v13 == -1) {
        goto LABEL_24;
      }
LABEL_32:
      if (v9 < v3)
      {
        if (__OFSUB__(v9, v12)) {
          goto LABEL_132;
        }
        if (v9 - v12 < v90)
        {
          if (__OFADD__(v12, v90)) {
            goto LABEL_134;
          }
          if (v12 + v90 >= v3) {
            Swift::Int v22 = v3;
          }
          else {
            Swift::Int v22 = v12 + v90;
          }
          if (v22 < v12)
          {
LABEL_135:
            __break(1u);
            goto LABEL_136;
          }
          if (v9 != v22)
          {
            sub_100010B2C();
            id v23 = (void *)(v10 + 16 * v9);
            do
            {
              Swift::Int v24 = v12;
              double v25 = v23;
              do
              {
                if (StringProtocol.localizedStandardCompare<A>(_:)() != -1) {
                  break;
                }
                if (!v10) {
                  goto LABEL_137;
                }
                uint64_t v26 = *v25;
                uint64_t v27 = v25[1];
                *(_OWORD *)double v25 = *((_OWORD *)v25 - 1);
                *(v25 - 1) = v27;
                *(v25 - 2) = v26;
                v25 -= 2;
                ++v24;
              }
              while (v9 != v24);
              ++v9;
              v23 += 2;
            }
            while (v9 != v22);
            Swift::Int v9 = v22;
          }
        }
      }
      if (v9 < v12) {
        goto LABEL_127;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = sub_1000A5370(0, *((void *)v8 + 2) + 1, 1, v8);
      }
      unint64_t v29 = *((void *)v8 + 2);
      unint64_t v28 = *((void *)v8 + 3);
      unint64_t v11 = v29 + 1;
      if (v29 >= v28 >> 1) {
        uint64_t v8 = sub_1000A5370((char *)(v28 > 1), v29 + 1, 1, v8);
      }
      *((void *)v8 + 2) = v11;
      uint64_t v93 = v8 + 32;
      uint64_t v30 = &v8[16 * v29 + 32];
      *(void *)uint64_t v30 = v12;
      *((void *)v30 + 1) = v9;
      if (v29)
      {
        uint64_t v31 = v8 + 32;
        while (1)
        {
          unint64_t v32 = v11 - 1;
          if (v11 >= 4)
          {
            id v37 = &v31[16 * v11];
            uint64_t v38 = *((void *)v37 - 8);
            uint64_t v39 = *((void *)v37 - 7);
            BOOL v43 = __OFSUB__(v39, v38);
            uint64_t v40 = v39 - v38;
            if (v43) {
              goto LABEL_116;
            }
            uint64_t v42 = *((void *)v37 - 6);
            uint64_t v41 = *((void *)v37 - 5);
            BOOL v43 = __OFSUB__(v41, v42);
            uint64_t v35 = v41 - v42;
            char v36 = v43;
            if (v43) {
              goto LABEL_117;
            }
            unint64_t v44 = v11 - 2;
            uint64_t v45 = &v31[16 * v11 - 32];
            uint64_t v47 = *(void *)v45;
            uint64_t v46 = *((void *)v45 + 1);
            BOOL v43 = __OFSUB__(v46, v47);
            uint64_t v48 = v46 - v47;
            if (v43) {
              goto LABEL_119;
            }
            BOOL v43 = __OFADD__(v35, v48);
            uint64_t v49 = v35 + v48;
            if (v43) {
              goto LABEL_122;
            }
            if (v49 >= v40)
            {
              uint64_t v67 = &v31[16 * v32];
              uint64_t v69 = *(void *)v67;
              uint64_t v68 = *((void *)v67 + 1);
              BOOL v43 = __OFSUB__(v68, v69);
              uint64_t v70 = v68 - v69;
              if (v43) {
                goto LABEL_126;
              }
              BOOL v60 = v35 < v70;
              goto LABEL_87;
            }
          }
          else
          {
            if (v11 != 3)
            {
              uint64_t v61 = *((void *)v8 + 4);
              uint64_t v62 = *((void *)v8 + 5);
              BOOL v43 = __OFSUB__(v62, v61);
              uint64_t v54 = v62 - v61;
              char v55 = v43;
              goto LABEL_81;
            }
            uint64_t v34 = *((void *)v8 + 4);
            uint64_t v33 = *((void *)v8 + 5);
            BOOL v43 = __OFSUB__(v33, v34);
            uint64_t v35 = v33 - v34;
            char v36 = v43;
          }
          if (v36) {
            goto LABEL_118;
          }
          unint64_t v44 = v11 - 2;
          uint64_t v50 = &v31[16 * v11 - 32];
          uint64_t v52 = *(void *)v50;
          uint64_t v51 = *((void *)v50 + 1);
          BOOL v53 = __OFSUB__(v51, v52);
          uint64_t v54 = v51 - v52;
          char v55 = v53;
          if (v53) {
            goto LABEL_121;
          }
          uint64_t v56 = &v31[16 * v32];
          uint64_t v58 = *(void *)v56;
          uint64_t v57 = *((void *)v56 + 1);
          BOOL v43 = __OFSUB__(v57, v58);
          uint64_t v59 = v57 - v58;
          if (v43) {
            goto LABEL_124;
          }
          if (__OFADD__(v54, v59)) {
            goto LABEL_125;
          }
          if (v54 + v59 >= v35)
          {
            BOOL v60 = v35 < v59;
LABEL_87:
            if (v60) {
              unint64_t v32 = v44;
            }
            goto LABEL_89;
          }
LABEL_81:
          if (v55) {
            goto LABEL_120;
          }
          char v63 = &v31[16 * v32];
          uint64_t v65 = *(void *)v63;
          uint64_t v64 = *((void *)v63 + 1);
          BOOL v43 = __OFSUB__(v64, v65);
          uint64_t v66 = v64 - v65;
          if (v43) {
            goto LABEL_123;
          }
          if (v66 < v54) {
            goto LABEL_14;
          }
LABEL_89:
          unint64_t v71 = v32 - 1;
          if (v32 - 1 >= v11)
          {
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
            goto LABEL_135;
          }
          uint64_t v72 = v10;
          if (!v10) {
            goto LABEL_138;
          }
          uint64_t v73 = v8;
          uint64_t v74 = &v31[16 * v71];
          uint64_t v75 = v31;
          uint64_t v76 = *(void *)v74;
          uint64_t v77 = &v75[16 * v32];
          uint64_t v78 = *((void *)v77 + 1);
          uint64_t v79 = v72;
          sub_1000538CC((char *)(v72 + 16 * *(void *)v74), (char *)(v72 + 16 * *(void *)v77), v72 + 16 * v78, v92);
          if (v1) {
            goto LABEL_110;
          }
          if (v78 < v76) {
            goto LABEL_113;
          }
          if (v32 > *((void *)v73 + 2)) {
            goto LABEL_114;
          }
          *(void *)uint64_t v74 = v76;
          uint64_t v31 = v93;
          *(void *)&v93[16 * v71 + 8] = v78;
          unint64_t v80 = *((void *)v73 + 2);
          if (v32 >= v80) {
            goto LABEL_115;
          }
          uint64_t v8 = v73;
          unint64_t v11 = v80 - 1;
          memmove(v77, v77 + 16, 16 * (v80 - 1 - v32));
          *((void *)v73 + 2) = v80 - 1;
          uint64_t v10 = v79;
          if (v80 <= 2) {
            goto LABEL_14;
          }
        }
      }
      unint64_t v11 = 1;
LABEL_14:
      Swift::Int v3 = v91;
      if (v9 >= v91) {
        goto LABEL_99;
      }
      goto LABEL_15;
    }
    ++v9;
    Swift::Int v3 = v91;
  }
  while (v91 != v9);
  Swift::Int v9 = v91;
LABEL_21:
  if (v13 != -1) {
    goto LABEL_32;
  }
LABEL_24:
  if (v9 >= v12)
  {
    if (v12 < v9)
    {
      uint64_t v15 = 16 * v9;
      uint64_t v16 = 16 * v12;
      Swift::Int v17 = v9;
      Swift::Int v18 = v12;
      while (1)
      {
        if (v18 != --v17)
        {
          if (!v10) {
            goto LABEL_139;
          }
          uint64_t v19 = v10 + v15;
          uint64_t v20 = *(void *)(v10 + v16);
          uint64_t v21 = *(void *)(v10 + v16 + 8);
          *(_OWORD *)(v10 + v16) = *(_OWORD *)(v10 + v15 - 16);
          *(void *)(v19 - 16) = v20;
          *(void *)(v19 - 8) = v21;
        }
        ++v18;
        v15 -= 16;
        v16 += 16;
        if (v18 >= v17) {
          goto LABEL_32;
        }
      }
    }
    goto LABEL_32;
  }
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000537D4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v12 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    sub_100010B2C();
    uint64_t v6 = (void *)(v5 + 16 * v4);
LABEL_5:
    uint64_t v7 = v12;
    uint64_t v8 = v6;
    while (1)
    {
      Swift::Int result = StringProtocol.localizedStandardCompare<A>(_:)();
      if (result != -1)
      {
LABEL_4:
        ++v4;
        v6 += 2;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v5) {
        break;
      }
      uint64_t v9 = *v8;
      uint64_t v10 = v8[1];
      *(_OWORD *)uint64_t v8 = *((_OWORD *)v8 - 1);
      *(v8 - 1) = v10;
      *(v8 - 2) = v9;
      v8 -= 2;
      if (v4 == ++v7) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000538CC(char *__src, char *a2, unint64_t a3, char *a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = __src;
  int64_t v7 = a2 - __src;
  int64_t v8 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v8 = a2 - __src;
  }
  uint64_t v9 = v8 >> 4;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v11 = a3 - (void)a2;
  }
  uint64_t v12 = v11 >> 4;
  id v23 = __src;
  Swift::Int v22 = a4;
  if (v9 >= v11 >> 4)
  {
    if (v10 >= -15)
    {
      if (a4 != a2 || &a2[16 * v12] <= a4) {
        memmove(a4, a2, 16 * v12);
      }
      uint64_t v15 = &a4[16 * v12];
      uint64_t v21 = v15;
      id v23 = v5;
      if (v6 < v5 && v10 >= 16)
      {
        sub_100010B2C();
        uint64_t v16 = (char *)(a3 - 16);
        Swift::Int v17 = v5;
        do
        {
          Swift::Int v18 = v16 + 16;
          v17 -= 16;
          if (StringProtocol.localizedStandardCompare<A>(_:)() == -1)
          {
            if (v18 != v5 || v16 >= v5) {
              *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
            }
            id v23 = v17;
          }
          else
          {
            uint64_t v21 = v15 - 16;
            if (v18 < v15 || v16 >= v15 || v18 != v15) {
              *(_OWORD *)uint64_t v16 = *((_OWORD *)v15 - 1);
            }
            Swift::Int v17 = v5;
            v15 -= 16;
          }
          if (v17 <= v6) {
            break;
          }
          v16 -= 16;
          uint64_t v5 = v17;
        }
        while (v15 > a4);
      }
      goto LABEL_43;
    }
  }
  else if (v7 >= -15)
  {
    uint64_t v13 = a4;
    if (a4 != __src || &__src[16 * v9] <= a4) {
      memmove(a4, __src, 16 * v9);
    }
    uint64_t v21 = &a4[16 * v9];
    if ((unint64_t)v5 < a3 && v7 >= 16)
    {
      sub_100010B2C();
      do
      {
        if (StringProtocol.localizedStandardCompare<A>(_:)() == -1)
        {
          uint64_t v14 = v5 + 16;
          if (v6 < v5 || v6 >= v14 || v6 != v5) {
            *(_OWORD *)uint64_t v6 = *(_OWORD *)v5;
          }
        }
        else
        {
          if (v6 != v13) {
            *(_OWORD *)uint64_t v6 = *(_OWORD *)v13;
          }
          v13 += 16;
          Swift::Int v22 = v13;
          uint64_t v14 = v5;
        }
        v6 += 16;
        if (v13 >= &a4[16 * v9]) {
          break;
        }
        uint64_t v5 = v14;
      }
      while ((unint64_t)v14 < a3);
      id v23 = v6;
    }
LABEL_43:
    sub_1000A546C((void **)&v23, (const void **)&v22, &v21);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100053BAC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100053BEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100053BFC()
{
  return swift_release();
}

uint64_t sub_100053C0C()
{
  return 32;
}

__n128 sub_100053C18(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_100053C24(uint64_t a1)
{
  long long v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 88);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)v14 - v8;
  uint64_t v15 = v3[10];
  uint64_t v10 = v15;
  uint64_t v16 = v4;
  uint64_t v17 = v3[12];
  uint64_t v11 = v17;
  uint64_t v18 = v3[13];
  uint64_t v12 = v18;
  swift_getKeyPath();
  v14[0] = v10;
  v14[1] = v4;
  v14[2] = v11;
  _OWORD v14[3] = v12;
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t sub_100053DB4()
{
  return 32;
}

__n128 sub_100053DC0(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_100053DCC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100050E4C();
  *a1 = result;
  return result;
}

uint64_t sub_100053DF8()
{
  return sub_100050F3C();
}

uint64_t sub_100053E24()
{
  return 32;
}

__n128 sub_100053E30(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_100053E3C(uint64_t a1)
{
  return sub_100052374(a1, v1[6], v1[7], v1[2], v1[3], v1[4], v1[5]) & 1;
}

BOOL sub_100053E64(uint64_t a1)
{
  return sub_100052630(*(double *)(v1 + 48), *(double *)(v1 + 56), a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100053E8C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100051030();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100053EB8(uint64_t a1)
{
  return sub_100051120();
}

uint64_t sub_100053EFC()
{
  return 32;
}

__n128 sub_100053F08(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_100053F14()
{
  uint64_t v0 = type metadata accessor for TimeZone();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000570C(&qword_1001A5808);
  uint64_t v7 = __chkstk_darwin(v5 - 8, v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)&v20 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))((char *)&v20 - v11, 1, 1, v0);
  id v13 = [objc_allocWithZone((Class)NSDateFormatter) init];
  NSString v14 = String._bridgeToObjectiveC()();
  [v13 setDateFormat:v14];

  sub_100015328((uint64_t)v12, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v9, 1, v0) == 1)
  {
    sub_100015390((uint64_t)v9);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v4, v9, v0);
    Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
    [v13 setTimeZone:isa];

    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  }
  sub_100015390((uint64_t)v12);
  Class v16 = Date._bridgeToObjectiveC()().super.isa;
  id v17 = [v13 stringFromDate:v16];

  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v18;
}

uint64_t sub_10005418C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v22[3] = a2;
  sub_100004A58(&qword_1001A6ED8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = type metadata accessor for Array();
  uint64_t v5 = *(void *)(a1 + 24);
  v22[14] = v4;
  v22[15] = swift_getAssociatedTypeWitness();
  v22[16] = &type metadata for ArtistItem;
  v22[17] = swift_getWitnessTable();
  v22[18] = swift_getAssociatedConformanceWitness();
  type metadata accessor for ForEach();
  v22[13] = sub_100055554();
  swift_getWitnessTable();
  type metadata accessor for HStack();
  type metadata accessor for ModifiedContent();
  v22[11] = swift_getWitnessTable();
  v22[12] = &protocol witness table for _PaddingLayout;
  v22[1] = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  swift_getWitnessTable();
  type metadata accessor for ScrollView();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for VStack();
  v22[0] = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)v22 - v8;
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)v22 - v17;
  static HorizontalAlignment.leading.getter();
  v22[6] = v3;
  v22[7] = v5;
  v22[8] = v22[2];
  VStack.init(alignment:spacing:content:)();
  static Edge.Set.vertical.getter();
  uint64_t WitnessTable = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v22[0] + 8))(v9, v6);
  v22[9] = WitnessTable;
  v22[10] = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable();
  sub_1001221F0(v15, v10);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v15, v10);
  sub_1001221F0(v18, v10);
  return ((uint64_t (*)(char *, uint64_t))v20)(v18, v10);
}

uint64_t sub_1000545C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v65 = a3;
  uint64_t v66 = a4;
  uint64_t v64 = a2;
  uint64_t v73 = type metadata accessor for Array();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v75 = &type metadata for ArtistItem;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for ForEach();
  unint64_t v83 = sub_100055554();
  swift_getWitnessTable();
  type metadata accessor for HStack();
  uint64_t v5 = type metadata accessor for ModifiedContent();
  uint64_t v81 = swift_getWitnessTable();
  unint64_t v82 = &protocol witness table for _PaddingLayout;
  uint64_t v62 = v5;
  uint64_t v61 = swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for ScrollView();
  uint64_t v63 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v59 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  BOOL v60 = (char *)&v51 - v11;
  uint64_t v58 = type metadata accessor for AccessibilityTraits();
  uint64_t v57 = *(void *)(v58 - 8);
  __chkstk_darwin(v58, v12);
  uint64_t v56 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_10000570C(&qword_1001A6ED8);
  uint64_t v15 = __chkstk_darwin(v55, v14);
  uint64_t v51 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v52 = (char *)&v51 - v19;
  __chkstk_darwin(v18, v20);
  uint64_t v53 = (uint64_t)&v51 - v21;
  uint64_t v54 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v22 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v24 = v23;
  char v26 = v25 & 1;
  static Font.Weight.bold.getter();
  uint64_t v27 = Text.fontWeight(_:)();
  uint64_t v29 = v28;
  char v31 = v30 & 1;
  sub_10000FCC4(v22, v24, v26);
  swift_bridgeObjectRelease();
  static Font.title2.getter();
  uint64_t v32 = Text.font(_:)();
  uint64_t v34 = v33;
  char v36 = v35;
  uint64_t v38 = v37;
  swift_release();
  v36 &= 1u;
  sub_10000FCC4(v27, v29, v31);
  swift_bridgeObjectRelease();
  char v39 = static Edge.Set.leading.getter();
  uint64_t v73 = v32;
  uint64_t AssociatedTypeWitness = v34;
  LOBYTE(v75) = v36;
  uint64_t WitnessTable = v38;
  LOBYTE(AssociatedConformanceWitness) = v39;
  long long v78 = 0u;
  long long v79 = 0u;
  char v80 = 1;
  sub_10000570C(&qword_1001A6EE8);
  sub_1000555B4();
  uint64_t v40 = (uint64_t)v51;
  View.accessibilityHeading(_:)();
  sub_10000FCC4(v32, v34, v36);
  swift_bridgeObjectRelease();
  uint64_t v41 = v56;
  static AccessibilityTraits.isHeader.getter();
  uint64_t v42 = (uint64_t)v52;
  uint64_t v43 = v55;
  ModifiedContent<>.accessibility(addTraits:)();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v41, v58);
  sub_100055628(v40);
  uint64_t v44 = v53;
  sub_100055688(v42, v53);
  static Axis.Set.horizontal.getter();
  uint64_t v67 = v64;
  uint64_t v68 = v65;
  uint64_t v69 = v54;
  uint64_t v45 = v59;
  ScrollView.init(_:showsIndicators:content:)();
  uint64_t v46 = swift_getWitnessTable();
  uint64_t v47 = v60;
  sub_1001221F0(v45, v6);
  uint64_t v48 = v63;
  uint64_t v49 = *(void (**)(char *, uint64_t))(v63 + 8);
  v49(v45, v6);
  sub_1000556FC(v44, v42);
  uint64_t v73 = v42;
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v47, v6);
  uint64_t AssociatedTypeWitness = (uint64_t)v45;
  v72[0] = v43;
  v72[1] = v6;
  unint64_t v70 = sub_100055764();
  uint64_t v71 = v46;
  sub_1001231A4((uint64_t)&v73, 2uLL, (uint64_t)v72);
  v49(v47, v6);
  sub_100055628(v44);
  v49(v45, v6);
  return sub_100055628(v42);
}

uint64_t sub_100054CA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v25 = a4;
  uint64_t v32 = type metadata accessor for Array();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v34 = &type metadata for ArtistItem;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for ForEach();
  unint64_t v31 = sub_100055554();
  swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for HStack();
  uint64_t v23 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v22 - v8;
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)&v22 - v17;
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  uint64_t v28 = v24;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  static Edge.Set.horizontal.getter();
  uint64_t v19 = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v6);
  uint64_t v29 = v19;
  char v30 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable();
  sub_1001221F0(v15, v10);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v15, v10);
  sub_1001221F0(v18, v10);
  return ((uint64_t (*)(char *, uint64_t))v20)(v18, v10);
}

uint64_t sub_100054FFC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v6 = type metadata accessor for Array();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v27 = v6;
  uint64_t v28 = AssociatedTypeWitness;
  uint64_t v29 = &type metadata for ArtistItem;
  uint64_t v30 = WitnessTable;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for ForEach();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v22 - v15;
  uint64_t v27 = *a1;
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = v24;
  *(void *)(v17 + 16) = a2;
  *(void *)(v17 + 24) = v18;
  unint64_t v19 = sub_100055554();
  swift_bridgeObjectRetain();
  ForEach<>.init(_:content:)();
  unint64_t v26 = v19;
  swift_getWitnessTable();
  sub_1001221F0(v13, v8);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v20(v13, v8);
  sub_1001221F0(v16, v8);
  return ((uint64_t (*)(char *, uint64_t))v20)(v16, v8);
}

__n128 sub_100055270@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  unint64_t v3 = a1[1].n128_u64[0];
  unint64_t v4 = a1[2].n128_u64[0];
  unsigned __int8 v5 = a1[1].n128_u8[8] & 1;
  *a2 = *a1;
  a2[1].n128_u64[0] = v3;
  a2[1].n128_u8[8] = v5;
  a2[2].n128_u64[0] = v4;
  return result;
}

uint64_t sub_100055298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_1000552A0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000552E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100055344(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000553CC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareSheet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShareSheet(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for LineupModule()
{
  return sub_10000B72C();
}

uint64_t sub_1000554D4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100055518@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005418C(a1, a2);
}

unint64_t sub_100055554()
{
  unint64_t result = qword_1001A6EE0;
  if (!qword_1001A6EE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6EE0);
  }
  return result;
}

uint64_t sub_1000555A8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000545C0(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_1000555B4()
{
  unint64_t result = qword_1001A6EF0;
  if (!qword_1001A6EF0)
  {
    sub_100004A58(&qword_1001A6EE8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6EF0);
  }
  return result;
}

uint64_t sub_100055628(uint64_t a1)
{
  uint64_t v2 = sub_10000570C(&qword_1001A6ED8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100055688(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A6ED8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000556F0@<X0>(uint64_t a1@<X8>)
{
  return sub_100054CA0(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000556FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A6ED8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100055764()
{
  unint64_t result = qword_1001A6EF8;
  if (!qword_1001A6EF8)
  {
    sub_100004A58(&qword_1001A6ED8);
    sub_1000555B4();
    sub_1000557E0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6EF8);
  }
  return result;
}

unint64_t sub_1000557E0()
{
  unint64_t result = qword_1001A68E8;
  if (!qword_1001A68E8)
  {
    type metadata accessor for AccessibilityAttachmentModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A68E8);
  }
  return result;
}

uint64_t sub_100055838@<X0>(uint64_t a1@<X8>)
{
  return sub_100054FFC(*(uint64_t **)(v1 + 32), *(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_100055844()
{
  return swift_deallocObject();
}

uint64_t sub_100055854@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(v1 + 24) + 48))(*(void *)(v1 + 16));
  *a1 = result;
  a1[1] = v4;
  return result;
}

ValueMetadata *type metadata accessor for ArtistItem()
{
  return &type metadata for ArtistItem;
}

uint64_t sub_1000558A8()
{
  return swift_getWitnessTable();
}

uint64_t sub_100055AE4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100055B00@<X0>(uint64_t a1@<X8>)
{
  if (qword_1001A4E58 != -1) {
    swift_once();
  }
  uint64_t v20 = qword_1001B74F8;
  uint64_t KeyPath = swift_getKeyPath();
  swift_retain();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_100010B2C();
  swift_bridgeObjectRetain();
  uint64_t v2 = Text.init<A>(_:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.Weight.medium.getter();
  uint64_t v7 = Text.fontWeight(_:)();
  uint64_t v9 = v8;
  char v11 = v10 & 1;
  sub_10000FCC4(v2, v4, v6);
  swift_bridgeObjectRelease();
  static Font.subheadline.getter();
  uint64_t v12 = Text.font(_:)();
  uint64_t v14 = v13;
  char v16 = v15;
  uint64_t v18 = v17;
  swift_release();
  v16 &= 1u;
  sub_10000FCC4(v7, v9, v11);
  swift_bridgeObjectRelease();
  *(void *)a1 = KeyPath;
  *(void *)(a1 + 8) = v20;
  *(void *)(a1 + 16) = v22;
  *(unsigned char *)(a1 + 24) = v23;
  *(void *)(a1 + 32) = v24;
  *(unsigned char *)(a1 + 40) = v25;
  *(void *)(a1 + 48) = v26;
  *(void *)(a1 + 56) = v27;
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v14;
  *(unsigned char *)(a1 + 80) = v16;
  *(void *)(a1 + 88) = v18;
  swift_retain();
  swift_retain();
  sub_10000FCD4(v12, v14, v16);
  swift_bridgeObjectRetain();
  sub_10000FCC4(v12, v14, v16);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

__n128 sub_100055D54@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static HorizontalAlignment.center.getter();
  sub_100055B00((uint64_t)&v12);
  uint64_t v3 = v12;
  char v4 = v14;
  uint64_t v5 = v15;
  char v6 = v16;
  char v7 = v19;
  uint64_t v8 = v20;
  __n128 result = v13;
  long long v10 = v17;
  long long v11 = v18;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = v3;
  *(__n128 *)(a1 + 32) = result;
  *(unsigned char *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = v5;
  *(unsigned char *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 72) = v10;
  *(_OWORD *)(a1 + 88) = v11;
  *(unsigned char *)(a1 + 104) = v7;
  *(void *)(a1 + 112) = v8;
  return result;
}

unint64_t sub_100055DFC()
{
  unint64_t result = qword_1001A6F00;
  if (!qword_1001A6F00)
  {
    sub_100004A58(&qword_1001A6F08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6F00);
  }
  return result;
}

uint64_t sub_100055E64(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100055ECC(&qword_1001A6F10);
  uint64_t result = sub_100055ECC(&qword_1001A6F18);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100055ECC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for PromotionalAssets.Video();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double sub_100055F10()
{
  return 0.0;
}

uint64_t destroy for SongRowViewModel(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 56))
  {
    return sub_100007584(a1 + 32);
  }
  return result;
}

uint64_t initializeWithCopy for SongRowViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = a2 + 32;
  uint64_t v7 = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    uint64_t v8 = *(void *)(a2 + 64);
    *(void *)(a1 + 56) = v7;
    *(void *)(a1 + 64) = v8;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8))(a1 + 32, v6, v7);
  }
  else
  {
    long long v9 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v6;
    *(_OWORD *)(a1 + 48) = v9;
    *(void *)(a1 + 64) = *(void *)(v6 + 32);
  }
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t assignWithCopy for SongRowViewModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 56);
  if (!*(void *)(a1 + 56))
  {
    if (v4)
    {
      *(void *)(a1 + 56) = v4;
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 32, a2 + 32);
      goto LABEL_8;
    }
LABEL_7:
    long long v5 = *(_OWORD *)(a2 + 32);
    long long v6 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 32) = v5;
    *(_OWORD *)(a1 + 48) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    sub_100007584(a1 + 32);
    goto LABEL_7;
  }
  sub_100056128((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
LABEL_8:
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t *sub_100056128(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        long long v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for SongRowViewModel(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for SongRowViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 56)) {
    sub_100007584(a1 + 32);
  }
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for SongRowViewModel(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 73)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SongRowViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 73) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SongRowViewModel()
{
  return &type metadata for SongRowViewModel;
}

uint64_t sub_1000564A4@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_100058028(&qword_1001A7020, (void (*)(uint64_t))type metadata accessor for SetlistController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  return sub_100058220(v1 + 72, a1);
}

uint64_t sub_100056568@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100058028(&qword_1001A7020, (void (*)(uint64_t))type metadata accessor for SetlistController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  return sub_100058220(v3 + 72, a2);
}

uint64_t sub_10005662C(uint64_t a1)
{
  sub_100058220(a1, (uint64_t)v2);
  swift_getKeyPath();
  sub_100058028(&qword_1001A7020, (void (*)(uint64_t))type metadata accessor for SetlistController);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_10000ACE0((uint64_t)v2, &qword_1001A7008);
}

uint64_t sub_100056714(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 72;
  swift_beginAccess();
  sub_1000581B8(a2, v3);
  return swift_endAccess();
}

uint64_t sub_100056778()
{
  swift_getKeyPath();
  sub_100058028(&qword_1001A7020, (void (*)(uint64_t))type metadata accessor for SetlistController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 112);
}

uint64_t sub_100056818@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100058028(&qword_1001A7020, (void (*)(uint64_t))type metadata accessor for SetlistController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 112);
  return result;
}

uint64_t sub_1000568C0()
{
  return swift_release();
}

uint64_t sub_100056990()
{
  v1[27] = v0;
  sub_10000570C(&qword_1001A7018);
  v1[28] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for AppleMusicSetlist();
  v1[29] = v2;
  v1[30] = *(void *)(v2 - 8);
  v1[31] = swift_task_alloc();
  type metadata accessor for MainActor();
  v1[32] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[33] = v4;
  v1[34] = v3;
  return _swift_task_switch(sub_100056AB4, v4, v3);
}

uint64_t sub_100056AB4()
{
  uint64_t v48 = v0;
  uint64_t v1 = *(void **)(v0 + 216);
  swift_getKeyPath();
  uint64_t v2 = swift_task_alloc();
  *(void *)(v2 + 16) = v1;
  *(unsigned char *)(v2 + 24) = 1;
  *(void *)(v0 + 200) = v1;
  *(void *)(v0 + 280) = OBJC_IVAR____TtC16EventViewService17SetlistController___observationRegistrar;
  *(void *)(v0 + 288) = sub_100058028(&qword_1001A7020, (void (*)(uint64_t))type metadata accessor for SetlistController);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  *(void *)(v0 + 296) = 0;
  swift_release();
  swift_task_dealloc();
  uint64_t v3 = v1[5];
  uint64_t v4 = v1[6];
  sub_10000AC9C(v1 + 2, v3);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v4 + 240))(v3, v4))
  {
    uint64_t v5 = (void *)(v0 + 56);
    swift_getAssociatedTypeWitness();
    sub_10000570C(&qword_1001A54B8);
    uint64_t v6 = _arrayForceCast<A, B>(_:)();
    swift_bridgeObjectRelease();
    if (*(void *)(v6 + 16))
    {
      sub_10000AD3C(v6 + 32, v0 + 56);
    }
    else
    {
      *(void *)(v0 + 88) = 0;
      *(_OWORD *)uint64_t v5 = 0u;
      *(_OWORD *)(v0 + 72) = 0u;
    }
    swift_bridgeObjectRelease();
    uint64_t v7 = *(void *)(v0 + 80);
    if (v7)
    {
      uint64_t v8 = *(void *)(v0 + 216);
      uint64_t v9 = *(void *)(v0 + 88);
      sub_10000AC9C(v5, *(void *)(v0 + 80));
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v7, v9);
      uint64_t v12 = v11;
      *(void *)(v0 + 304) = v11;
      sub_100007584((uint64_t)v5);
      uint64_t v13 = *(void *)(v8 + 56);
      uint64_t v14 = *(void *)(v8 + 64);
      uint64_t v15 = (void *)swift_task_alloc();
      *(void *)(v0 + 312) = v15;
      *uint64_t v15 = v0;
      v15[1] = sub_10005727C;
      uint64_t v16 = *(void *)(v0 + 224);
      return sub_100066D20(v16, v10, v12, v13, v14);
    }
    sub_10000ACE0(v0 + 56, &qword_1001A54B0);
  }
  long long v18 = *(void **)(v0 + 216);
  uint64_t v19 = v18[5];
  uint64_t v20 = v18[6];
  sub_10000AC9C(v18 + 2, v19);
  uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v20 + 232);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = type metadata accessor for Optional();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = swift_task_alloc();
  v45(v19, v20);
  uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v24, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v24, v22);
    swift_release();
    swift_task_dealloc();
    if (qword_1001A4F38 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100017378(v26, (uint64_t)qword_1001B75B8);
    swift_retain_n();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    uint64_t v30 = *(void **)(v0 + 216);
    if (v29)
    {
      unint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v47 = swift_slowAlloc();
      *(_DWORD *)unint64_t v31 = 136315138;
      uint64_t v32 = v30[5];
      uint64_t v33 = v30[6];
      sub_10000AC9C(v30 + 2, v32);
      uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 152))(v32, v33);
      *(void *)(v0 + 176) = sub_1000FE1F8(v34, v35, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "No set list items with eventID: %s", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    uint64_t v42 = *(void *)(v0 + 216);
    swift_getKeyPath();
    uint64_t v43 = swift_task_alloc();
    *(void *)(v43 + 16) = v42;
    *(unsigned char *)(v43 + 24) = 0;
    *(void *)(v0 + 184) = v42;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v44 = *(uint64_t (**)(void))(v0 + 8);
    return v44();
  }
  else
  {
    *(void *)(v0 + 120) = AssociatedTypeWitness;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    *(void *)(v0 + 128) = AssociatedConformanceWitness;
    uint64_t v37 = sub_10000A7C4((uint64_t *)(v0 + 96));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v25 + 32))(v37, v24, AssociatedTypeWitness);
    swift_task_dealloc();
    uint64_t v38 = *(void *)(v0 + 120);
    uint64_t v39 = *(void *)(v0 + 128);
    sub_10000AC9C((void *)(v0 + 96), v38);
    (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v38, v39);
    swift_getAssociatedTypeWitness();
    sub_10000570C(&qword_1001A54C0);
    uint64_t v40 = _arrayForceCast<A, B>(_:)();
    *(void *)(v0 + 320) = v40;
    swift_bridgeObjectRelease();
    sub_100007584(v0 + 96);
    uint64_t v46 = (uint64_t (*)(uint64_t))((char *)&dword_1001A7A40 + dword_1001A7A40);
    uint64_t v41 = (void *)swift_task_alloc();
    *(void *)(v0 + 328) = v41;
    *uint64_t v41 = v0;
    v41[1] = sub_100057A4C;
    return v46(v40);
  }
}

uint64_t sub_10005727C()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v1 + 272);
  uint64_t v3 = *(void *)(v1 + 264);
  return _swift_task_switch(sub_1000573C0, v3, v2);
}

uint64_t sub_1000573C0()
{
  uint64_t v38 = v0;
  uint64_t v1 = v0[29];
  uint64_t v2 = v0[28];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[30] + 48))(v2, 1, v1) != 1)
  {
    uint64_t v22 = v0[31];
    uint64_t v23 = v0[27];
    swift_release();
    sub_100058094(v2, v22);
    v0[5] = v1;
    v0[6] = sub_100058028(&qword_1001A7028, (void (*)(uint64_t))type metadata accessor for AppleMusicSetlist);
    uint64_t v24 = sub_10000A7C4(v0 + 2);
    sub_1000580F8(v22, (uint64_t)v24);
    swift_getKeyPath();
    uint64_t v25 = swift_task_alloc();
    *(void *)(v25 + 16) = v23;
    *(void *)(v25 + 24) = v0 + 2;
    v0[26] = v23;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_task_dealloc();
    sub_10000ACE0((uint64_t)(v0 + 2), &qword_1001A7008);
    sub_10005815C(v22);
LABEL_13:
    uint64_t v33 = v0[27];
    swift_getKeyPath();
    uint64_t v34 = swift_task_alloc();
    *(void *)(v34 + 16) = v33;
    *(unsigned char *)(v34 + 24) = 0;
    v0[23] = v33;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v35 = (uint64_t (*)(void))v0[1];
    return v35();
  }
  sub_10000ACE0(v2, &qword_1001A7018);
  uint64_t v3 = (void *)v0[27];
  uint64_t v4 = v3[5];
  uint64_t v5 = v3[6];
  sub_10000AC9C(v3 + 2, v4);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 232);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = swift_task_alloc();
  v6(v4, v5);
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v8);
    swift_release();
    swift_task_dealloc();
    if (qword_1001A4F38 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100017378(v12, (uint64_t)qword_1001B75B8);
    swift_retain_n();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    BOOL v15 = os_log_type_enabled(v13, v14);
    uint64_t v16 = (void *)v0[27];
    if (v15)
    {
      long long v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(_DWORD *)long long v17 = 136315138;
      uint64_t v18 = v16[5];
      uint64_t v19 = v16[6];
      sub_10000AC9C(v16 + 2, v18);
      uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 152))(v18, v19);
      v0[22] = sub_1000FE1F8(v20, v21, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "No set list items with eventID: %s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    goto LABEL_13;
  }
  v0[15] = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v0[16] = AssociatedConformanceWitness;
  uint64_t v27 = sub_10000A7C4(v0 + 12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 32))(v27, v10, AssociatedTypeWitness);
  swift_task_dealloc();
  uint64_t v28 = v0[15];
  uint64_t v29 = v0[16];
  sub_10000AC9C(v0 + 12, v28);
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v28, v29);
  swift_getAssociatedTypeWitness();
  sub_10000570C(&qword_1001A54C0);
  uint64_t v30 = _arrayForceCast<A, B>(_:)();
  v0[40] = v30;
  swift_bridgeObjectRelease();
  sub_100007584((uint64_t)(v0 + 12));
  char v36 = (uint64_t (*)(uint64_t))((char *)&dword_1001A7A40 + dword_1001A7A40);
  unint64_t v31 = (void *)swift_task_alloc();
  v0[41] = v31;
  void *v31 = v0;
  v31[1] = sub_100057A4C;
  return v36(v30);
}

uint64_t sub_100057A4C(uint64_t a1)
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 336) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v2 + 272);
  uint64_t v4 = *(void *)(v2 + 264);
  return _swift_task_switch(sub_100057B98, v4, v3);
}

uint64_t sub_100057B98()
{
  uint64_t v1 = v0[42];
  uint64_t v2 = (int *)v0[29];
  uint64_t v3 = v0[27];
  swift_release();
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v5 = *(void *)(v3 + 64);
  v0[20] = v2;
  v0[21] = sub_100058028(&qword_1001A7028, (void (*)(uint64_t))type metadata accessor for AppleMusicSetlist);
  uint64_t v6 = sub_10000A7C4(v0 + 17);
  uint64_t v7 = (char *)v6 + v2[6];
  uint64_t v8 = type metadata accessor for Artwork();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = (char *)v6 + v2[7];
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t *v6 = v4;
  v6[1] = v5;
  v6[2] = v1;
  uint64_t v11 = (uint64_t *)((char *)v6 + v2[8]);
  *uint64_t v11 = 0;
  v11[1] = 0;
  swift_getKeyPath();
  uint64_t v12 = swift_task_alloc();
  *(void *)(v12 + 16) = v3;
  *(void *)(v12 + 24) = v0 + 17;
  v0[24] = v3;
  swift_bridgeObjectRetain();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  sub_10000ACE0((uint64_t)(v0 + 17), &qword_1001A7008);
  uint64_t v13 = v0[27];
  swift_getKeyPath();
  uint64_t v14 = swift_task_alloc();
  *(void *)(v14 + 16) = v13;
  *(unsigned char *)(v14 + 24) = 0;
  v0[23] = v13;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_100057E34()
{
  sub_100007584(v0 + 16);
  swift_bridgeObjectRelease();
  sub_10000ACE0(v0 + 72, &qword_1001A7008);
  uint64_t v1 = v0 + OBJC_IVAR____TtC16EventViewService17SetlistController___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100057EF4()
{
  return type metadata accessor for SetlistController();
}

uint64_t type metadata accessor for SetlistController()
{
  uint64_t result = qword_1001A6F50;
  if (!qword_1001A6F50) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100057F48()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_100058018()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 112) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_100058028(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100058078()
{
  return sub_100056714(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100058094(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppleMusicSetlist();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000580F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppleMusicSetlist();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005815C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AppleMusicSetlist();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000581B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A7008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100058220(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A7008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_100058288()
{
}

uint64_t sub_1000582A0()
{
  return sub_100058078();
}

void sub_1000582B8()
{
  id v0 = [self currentDevice];
  id v1 = [v0 userInterfaceIdiom];

  uint64_t v2 = 750;
  if (v1 == (id)1) {
    uint64_t v2 = 1410;
  }
  qword_1001B7508 = v2;
}

uint64_t destroy for ShareSheet(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 24))
  {
    return swift_release();
  }
  return result;
}

void *initializeWithCopy for ShareSheet(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v6 = a2 + 3;
  uint64_t v5 = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5)
  {
    uint64_t v7 = a2[4];
    a1[3] = v5;
    a1[4] = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 3) = *v6;
  }
  return a1;
}

void *assignWithCopy for ShareSheet(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[3];
  if (!a1[3])
  {
    if (v4)
    {
      uint64_t v6 = a2[4];
      a1[3] = v4;
      a1[4] = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = a2[4];
  a1[3] = v4;
  a1[4] = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ShareSheet(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  if (!*(void *)(a1 + 24))
  {
    if (v4)
    {
      uint64_t v6 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = v6;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ShareSheet()
{
  return &type metadata for ShareSheet;
}

unint64_t sub_100058590()
{
  unint64_t result = qword_1001A7030;
  if (!qword_1001A7030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7030);
  }
  return result;
}

id sub_1000585E4()
{
  sub_10000A3C4(v0 + 8, (uint64_t)v10, &qword_1001A7040);
  swift_bridgeObjectRetain();
  sub_100058A48((uint64_t)v10);
  v1.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10000A3C4((uint64_t)v10, (uint64_t)&v11, &qword_1001A7040);
  if (v11)
  {
    sub_100058A8C();
    v2.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    sub_100058ACC((uint64_t)v10);
  }
  else
  {
    v2.super.Class isa = 0;
  }
  id v3 = [objc_allocWithZone((Class)UIActivityViewController) initWithActivityItems:v1.super.isa applicationActivities:v2.super.isa];

  sub_10000A3C4(v0 + 16, (uint64_t)v9, &qword_1001A7048);
  sub_10000A3C4((uint64_t)v9, (uint64_t)&v12, &qword_1001A7048);
  Class isa = v12;
  if (v12)
  {
    type metadata accessor for ActivityType(0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  [v3 setExcludedActivityTypes:isa];

  if (*(void *)(v0 + 24))
  {
    uint64_t v5 = *(void *)(v0 + 32);
    v8[4] = *(void *)(v0 + 24);
    v8[5] = v5;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 1107296256;
    v8[2] = sub_1000587C4;
    v8[3] = &unk_1001970A0;
    uint64_t v6 = _Block_copy(v8);
    swift_retain();
    swift_release();
  }
  else
  {
    uint64_t v6 = 0;
  }
  [v3 setCompletionWithItemsHandler:v6];
  _Block_release(v6);
  return v3;
}

uint64_t sub_1000587C4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = *(void (**)(void *, uint64_t, uint64_t, void *))(a1 + 32);
  if (a4) {
    uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else {
    uint64_t v9 = 0;
  }
  swift_retain();
  id v10 = a2;
  id v11 = a5;
  v8(a2, a3, v9, a5);
  swift_release();

  return swift_bridgeObjectRelease();
}

id sub_100058880()
{
  return sub_1000585E4();
}

uint64_t sub_1000588C8()
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)();
}

uint64_t sub_100058904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000589F4();

  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100058968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000589F4();

  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000589CC()
{
}

unint64_t sub_1000589F4()
{
  unint64_t result = qword_1001A7038;
  if (!qword_1001A7038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7038);
  }
  return result;
}

uint64_t sub_100058A48(uint64_t a1)
{
  return a1;
}

uint64_t sub_100058A74(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100058A84()
{
  return swift_release();
}

unint64_t sub_100058A8C()
{
  unint64_t result = qword_1001A7050;
  if (!qword_1001A7050)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001A7050);
  }
  return result;
}

uint64_t sub_100058ACC(uint64_t a1)
{
  return a1;
}

void *initializeWithCopy for CalendarIcon(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CalendarIcon(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for CalendarIcon(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CalendarIcon()
{
  return &type metadata for CalendarIcon;
}

uint64_t sub_100058C00()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100058C1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)&long long v75 = a2;
  uint64_t v74 = a1;
  uint64_t v81 = a5;
  uint64_t v7 = sub_10000570C(&qword_1001A5EC8);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v80 = (uint64_t)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_10000570C(&qword_1001A62A8) - 8;
  __chkstk_darwin(v76, v10);
  uint64_t v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for RoundedRectangle() - 8;
  uint64_t v73 = v13;
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000570C(&qword_1001A6888);
  uint64_t v18 = v17 - 8;
  __chkstk_darwin(v17, v19);
  unint64_t v82 = (uint64_t *)((char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v79 = sub_10000570C(&qword_1001A6890) - 8;
  __chkstk_darwin(v79, v21);
  long long v78 = (char *)&v73 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000570C(&qword_1001A7058);
  __chkstk_darwin(v23 - 8, v24);
  uint64_t v26 = (char *)&v73 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000570C(&qword_1001A7060);
  uint64_t v28 = v27 - 8;
  __chkstk_darwin(v27, v29);
  unint64_t v31 = (char *)&v73 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v26 = static HorizontalAlignment.center.getter();
  *((void *)v26 + 1) = 0;
  v26[16] = 0;
  uint64_t v32 = sub_10000570C(&qword_1001A7068);
  sub_10005920C(v74, v75, a3, a4, (uint64_t)&v26[*(int *)(v32 + 44)]);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v77 = v31;
  sub_10000A428((uint64_t)v26, (uint64_t)v31, &qword_1001A7058);
  uint64_t v33 = &v31[*(int *)(v28 + 44)];
  long long v34 = v84;
  *(_OWORD *)uint64_t v33 = v83;
  *((_OWORD *)v33 + 1) = v34;
  *((_OWORD *)v33 + 2) = v85;
  sub_10000ACE0((uint64_t)v26, &qword_1001A7058);
  uint64_t v35 = static Color.white.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v37 = &v16[*(int *)(v13 + 28)];
  uint64_t v38 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v39 = type metadata accessor for RoundedCornerStyle();
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v39 - 8) + 104);
  v40(v37, v38, v39);
  __asm { FMOV            V0.2D, #9.0 }
  long long v75 = _Q0;
  *(_OWORD *)uint64_t v16 = _Q0;
  sub_1000243EC((uint64_t)v16, (uint64_t)v12);
  *(_WORD *)&v12[*(int *)(v76 + 44)] = 256;
  uint64_t v46 = *(int *)(v18 + 44);
  uint64_t v47 = v82;
  sub_10000A428((uint64_t)v12, (uint64_t)v82 + v46, &qword_1001A62A8);
  *uint64_t v47 = KeyPath;
  v47[1] = v35;
  swift_retain();
  swift_retain();
  sub_10000ACE0((uint64_t)v12, &qword_1001A62A8);
  sub_100024450((uint64_t)v16);
  swift_release();
  swift_release();
  v40(&v16[*(int *)(v73 + 28)], v38, v39);
  *(_OWORD *)uint64_t v16 = v75;
  static Color.primary.getter();
  uint64_t v48 = Color.opacity(_:)();
  swift_release();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v49 = v80;
  sub_1000243EC((uint64_t)v16, v80);
  uint64_t v50 = v49 + *(int *)(sub_10000570C(&qword_1001A5ED0) + 36);
  long long v51 = v87;
  *(_OWORD *)uint64_t v50 = v86;
  *(_OWORD *)(v50 + 16) = v51;
  *(void *)(v50 + 32) = v88;
  uint64_t v52 = sub_10000570C(&qword_1001A5ED8);
  *(void *)(v49 + *(int *)(v52 + 52)) = v48;
  *(_WORD *)(v49 + *(int *)(v52 + 56)) = 256;
  uint64_t v53 = static Alignment.center.getter();
  uint64_t v55 = v54;
  uint64_t v56 = (uint64_t *)(v49 + *(int *)(sub_10000570C(&qword_1001A5EE0) + 36));
  *uint64_t v56 = v53;
  v56[1] = v55;
  sub_100024450((uint64_t)v16);
  uint64_t v57 = static Alignment.center.getter();
  uint64_t v59 = v58;
  uint64_t v60 = (uint64_t)v78;
  uint64_t v61 = (uint64_t)&v78[*(int *)(v79 + 44)];
  sub_10000A428(v49, v61, &qword_1001A5EC8);
  uint64_t v62 = (uint64_t *)(v61 + *(int *)(sub_10000570C(&qword_1001A6898) + 36));
  *uint64_t v62 = v57;
  v62[1] = v59;
  uint64_t v63 = (uint64_t)v82;
  sub_10000A428((uint64_t)v82, v60, &qword_1001A6888);
  sub_10000ACE0(v49, &qword_1001A5EC8);
  sub_10000ACE0(v63, &qword_1001A6888);
  uint64_t v64 = static Alignment.center.getter();
  uint64_t v66 = v65;
  uint64_t v67 = sub_10000570C(&qword_1001A7070);
  uint64_t v68 = v81;
  uint64_t v69 = v81 + *(int *)(v67 + 36);
  sub_10000A428(v60, v69, &qword_1001A6890);
  unint64_t v70 = (uint64_t *)(v69 + *(int *)(sub_10000570C(&qword_1001A6880) + 36));
  *unint64_t v70 = v64;
  v70[1] = v66;
  uint64_t v71 = (uint64_t)v77;
  sub_10000A428((uint64_t)v77, v68, &qword_1001A7060);
  sub_10000ACE0(v60, &qword_1001A6890);
  return sub_10000ACE0(v71, &qword_1001A7060);
}

uint64_t sub_10005920C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v90 = a3;
  uint64_t v91 = a4;
  uint64_t v93 = a5;
  uint64_t v83 = sub_10000570C(&qword_1001A67B8) - 8;
  __chkstk_darwin(v83, v7);
  unint64_t v82 = (uint64_t *)((char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = sub_10000570C(&qword_1001A67C0);
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v12 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000570C(&qword_1001A67C8);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = sub_10000570C(&qword_1001A7078);
  __chkstk_darwin(v85, v18);
  uint64_t v84 = (uint64_t)&v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_10000570C(&qword_1001A7080);
  __chkstk_darwin(v86, v20);
  uint64_t v89 = (uint64_t)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_10000570C(&qword_1001A7088);
  uint64_t v23 = __chkstk_darwin(v87, v22);
  uint64_t v92 = (uint64_t)&v82 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v25);
  uint64_t v94 = (uint64_t)&v82 - v26;
  uint64_t v95 = a1;
  uint64_t v96 = a2;
  unint64_t v27 = sub_100010B2C();
  swift_bridgeObjectRetain();
  unint64_t v88 = v27;
  uint64_t v28 = Text.init<A>(_:)();
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  char v34 = v33 & 1;
  uint64_t v35 = enum case for Text.Case.uppercase(_:);
  uint64_t v36 = type metadata accessor for Text.Case();
  uint64_t v37 = *(void *)(v36 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 104))(v12, v35, v36);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v12, 0, 1, v36);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v39 = v82;
  sub_10000A428((uint64_t)v12, (uint64_t)v82 + *(int *)(v83 + 36), &qword_1001A67C0);
  *uint64_t v39 = KeyPath;
  sub_10000A428((uint64_t)v39, (uint64_t)&v17[*(int *)(v14 + 44)], &qword_1001A67B8);
  *(void *)uint64_t v17 = v28;
  *((void *)v17 + 1) = v30;
  v17[16] = v34;
  *((void *)v17 + 3) = v32;
  sub_10000FCD4(v28, v30, v34);
  swift_bridgeObjectRetain();
  sub_10000ACE0((uint64_t)v39, &qword_1001A67B8);
  sub_10000ACE0((uint64_t)v12, &qword_1001A67C0);
  sub_10000FCC4(v28, v30, v34);
  swift_bridgeObjectRelease();
  if (qword_1001A4E88 != -1) {
    swift_once();
  }
  static Font.Weight.bold.getter();
  uint64_t v40 = Font.weight(_:)();
  uint64_t v41 = swift_getKeyPath();
  uint64_t v42 = v84;
  sub_10000A428((uint64_t)v17, v84, &qword_1001A67C8);
  uint64_t v43 = (uint64_t *)(v42 + *(int *)(v85 + 36));
  uint64_t *v43 = v41;
  v43[1] = v40;
  sub_10000ACE0((uint64_t)v17, &qword_1001A67C8);
  uint64_t v44 = v42;
  if (qword_1001A4E28 != -1) {
    swift_once();
  }
  uint64_t v45 = qword_1001B74C8;
  uint64_t v46 = swift_getKeyPath();
  uint64_t v47 = v42;
  uint64_t v48 = v89;
  sub_10000A428(v47, v89, &qword_1001A7078);
  uint64_t v49 = (uint64_t *)(v48 + *(int *)(v86 + 36));
  uint64_t *v49 = v46;
  v49[1] = v45;
  swift_retain();
  sub_10000ACE0(v44, &qword_1001A7078);
  LOBYTE(v45) = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  uint64_t v57 = v56;
  uint64_t v58 = v92;
  sub_10000A428(v48, v92, &qword_1001A7080);
  uint64_t v59 = v58 + *(int *)(v87 + 36);
  *(unsigned char *)uint64_t v59 = v45;
  *(void *)(v59 + 8) = v51;
  *(void *)(v59 + 16) = v53;
  *(void *)(v59 + 24) = v55;
  *(void *)(v59 + 32) = v57;
  *(unsigned char *)(v59 + 40) = 0;
  sub_10000ACE0(v48, &qword_1001A7080);
  sub_100059938(v58, v94);
  uint64_t v95 = v90;
  uint64_t v96 = v91;
  swift_bridgeObjectRetain();
  uint64_t v60 = Text.init<A>(_:)();
  uint64_t v62 = v61;
  char v64 = v63;
  if (qword_1001A4E90 != -1) {
    swift_once();
  }
  static Font.Weight.light.getter();
  Font.weight(_:)();
  uint64_t v65 = Text.font(_:)();
  uint64_t v67 = v66;
  char v69 = v68;
  swift_release();
  char v70 = v69 & 1;
  sub_10000FCC4(v60, v62, v64 & 1);
  swift_bridgeObjectRelease();
  static Color.black.getter();
  uint64_t v71 = Text.foregroundColor(_:)();
  uint64_t v73 = v72;
  char v75 = v74;
  uint64_t v77 = v76;
  swift_release();
  sub_10000FCC4(v65, v67, v70);
  swift_bridgeObjectRelease();
  uint64_t v78 = v94;
  sub_10000A428(v94, v58, &qword_1001A7088);
  uint64_t v79 = v93;
  sub_10000A428(v58, v93, &qword_1001A7088);
  uint64_t v80 = v79 + *(int *)(sub_10000570C(&qword_1001A7090) + 48);
  *(void *)uint64_t v80 = v71;
  *(void *)(v80 + 8) = v73;
  *(unsigned char *)(v80 + 16) = v75 & 1;
  *(void *)(v80 + 24) = v77;
  sub_10000FCD4(v71, v73, v75 & 1);
  swift_bridgeObjectRetain();
  sub_10000ACE0(v78, &qword_1001A7088);
  sub_10000FCC4(v71, v73, v75 & 1);
  swift_bridgeObjectRelease();
  return sub_10000ACE0(v58, &qword_1001A7088);
}

uint64_t sub_100059914@<X0>(uint64_t a1@<X8>)
{
  return sub_100058C1C(*v1, v1[1], v1[2], v1[3], a1);
}

uint64_t sub_100059938(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A7088);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000599A4()
{
  unint64_t result = qword_1001A7098;
  if (!qword_1001A7098)
  {
    sub_100004A58(&qword_1001A7070);
    sub_100059A44();
    sub_10000A780(&qword_1001A68D8, &qword_1001A6880);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7098);
  }
  return result;
}

unint64_t sub_100059A44()
{
  unint64_t result = qword_1001A70A0;
  if (!qword_1001A70A0)
  {
    sub_100004A58(&qword_1001A7060);
    sub_10000A780(&qword_1001A70A8, &qword_1001A7058);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A70A0);
  }
  return result;
}

uint64_t sub_100059AE4()
{
  return sub_10005A0EC(&qword_1001A70B0, (void (*)(uint64_t))&type metadata accessor for Genre);
}

uint64_t sub_100059B2C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100059B48()
{
  return sub_10005A0EC(&qword_1001A70B8, (void (*)(uint64_t))&type metadata accessor for Playlist);
}

uint64_t sub_100059B90()
{
  return sub_10005A0EC((unint64_t *)&qword_1001A70C0, (void (*)(uint64_t))&type metadata accessor for PromotionalAssets);
}

uint64_t sub_100059BD8()
{
  return sub_10005A0EC(&qword_1001A70C8, (void (*)(uint64_t))&type metadata accessor for Setlist);
}

uint64_t sub_100059C20()
{
  return sub_10005A0EC(&qword_1001A70D0, (void (*)(uint64_t))&type metadata accessor for Ticket);
}

_UNKNOWN **sub_100059C68()
{
  return &off_100195E80;
}

uint64_t sub_100059C74()
{
  return sub_10005A0EC(&qword_1001A70D8, (void (*)(uint64_t))&type metadata accessor for Venue);
}

uint64_t sub_100059CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v29 = *(void *)(v4 - 8);
  uint64_t v30 = v4;
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v27 - v10;
  uint64_t v28 = type metadata accessor for DateInterval();
  uint64_t v12 = *(void *)(v28 - 8);
  __chkstk_darwin(v28, v13);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v18);
  uint64_t v20 = (char *)&v27 - v19;
  (*(void (**)(uint64_t, uint64_t))(a2 + 200))(a1, a2);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_100013DE4(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v15);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, AssociatedTypeWitness);
  DateInterval.end.getter();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v28);
  static Date.now.getter();
  char v22 = static Date.< infix(_:_:)();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v29 + 8);
  uint64_t v24 = v8;
  uint64_t v25 = v30;
  v23(v24, v30);
  v23(v11, v25);
  return v22 & 1;
}

uint64_t sub_100059F94(uint64_t a1)
{
  return Event<>.tickets.getter(a1, &protocol witness table for LiveMusic);
}

uint64_t sub_100059FA4()
{
  sub_10005A0EC(&qword_1001A5498, (void (*)(uint64_t))&type metadata accessor for LiveMusic);

  return Event<>.participants.getter();
}

uint64_t sub_10005A020(uint64_t a1)
{
  return Event<>.venues.getter(a1, &protocol witness table for LiveMusic);
}

uint64_t sub_10005A038(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10000A780(&qword_1001A71E0, &qword_1001A5490);
  uint64_t result = sub_10000A780(&qword_1001A71E8, &qword_1001A5490);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10005A0B0()
{
  return sub_10000A780(&qword_1001A71F0, &qword_1001A5480);
}

uint64_t sub_10005A0EC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for GenericErrorView()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GenericErrorView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GenericErrorView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for GenericErrorView(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for GenericErrorView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericErrorView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericErrorView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GenericErrorView()
{
  return &type metadata for GenericErrorView;
}

uint64_t sub_10005A3DC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10005A3F8@<X0>(uint64_t a1@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.title.getter();
  static Font.Weight.bold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v7 = Text.font(_:)();
  uint64_t v9 = v8;
  char v11 = v10;
  swift_release();
  sub_10000FCC4(v2, v4, v6);
  swift_bridgeObjectRelease();
  if (qword_1001A4E40 != -1) {
    swift_once();
  }
  swift_retain();
  uint64_t v12 = Text.foregroundStyle<A>(_:)();
  uint64_t v35 = v13;
  uint64_t v36 = v12;
  uint64_t v37 = v14;
  char v34 = v15 & 1;
  sub_10000FCC4(v7, v9, v11 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v16 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v18 = v17;
  char v20 = v19 & 1;
  static Font.subheadline.getter();
  static Font.Weight.regular.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v21 = Text.font(_:)();
  uint64_t v23 = v22;
  char v25 = v24;
  swift_release();
  sub_10000FCC4(v16, v18, v20);
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v26 = Text.foregroundStyle<A>(_:)();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  char v32 = v31 & 1;
  sub_10000FCC4(v21, v23, v25 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  *(void *)a1 = v36;
  *(void *)(a1 + 8) = v35;
  *(unsigned char *)(a1 + 16) = v34;
  *(void *)(a1 + 24) = v37;
  *(void *)(a1 + 32) = v26;
  *(void *)(a1 + 40) = v28;
  *(unsigned char *)(a1 + 48) = v32;
  *(void *)(a1 + 56) = v30;
  sub_10000FCD4(v36, v35, v34);
  swift_bridgeObjectRetain();
  sub_10000FCD4(v26, v28, v32);
  swift_bridgeObjectRetain();
  sub_10000FCC4(v26, v28, v32);
  swift_bridgeObjectRelease();
  sub_10000FCC4(v36, v35, v34);
  return swift_bridgeObjectRelease();
}

__n128 sub_10005A764@<Q0>(uint64_t a1@<X8>)
{
  long long v3 = v1[1];
  long long v18 = *v1;
  long long v19 = v3;
  long long v4 = v1[3];
  long long v20 = v1[2];
  long long v21 = v4;
  uint64_t v5 = static HorizontalAlignment.center.getter();
  sub_10005A3F8((uint64_t)&v12);
  char v6 = v13;
  uint64_t v7 = v14;
  char v8 = v16;
  uint64_t v9 = v17;
  __n128 result = v12;
  long long v11 = v15;
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = 0x4018000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  *(__n128 *)(a1 + 24) = result;
  *(unsigned char *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 72) = v8;
  *(void *)(a1 + 80) = v9;
  return result;
}

unint64_t sub_10005A7F0()
{
  unint64_t result = qword_1001A71F8;
  if (!qword_1001A71F8)
  {
    sub_100004A58(&qword_1001A7200);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A71F8);
  }
  return result;
}

void sub_10005A84C()
{
  qword_1001A7208 = 0x7473696C70;
  unk_1001A7210 = 0xE500000000000000;
}

unint64_t sub_10005A86C(char a1)
{
  uint64_t v2 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  long long v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)&v39 - v13;
  id v15 = [self mainBundle];
  uint64_t v39 = v14;
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (qword_1001A4E68 != -1) {
    swift_once();
  }
  NSString v17 = String._bridgeToObjectiveC()();
  id v18 = [v15 URLForResource:v16 withExtension:v17];

  if (!v18)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
    goto LABEL_17;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  long long v19 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v19(v5, v11, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
LABEL_17:
    sub_10000ACE0((uint64_t)v5, &qword_1001AD200);
    return sub_10014955C((uint64_t)&_swiftEmptyArrayStorage);
  }
  long long v20 = v39;
  v19(v39, v5, v6);
  uint64_t v28 = Data.init(contentsOf:options:)();
  unint64_t v30 = v29;
  char v31 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v41[0] = 0;
  id v33 = [v31 propertyListWithData:isa options:0 format:0 error:v41];

  if (v33)
  {
    id v34 = v41[0];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10000570C(qword_1001A7218);
    if (swift_dynamicCast()) {
      unint64_t v27 = v40;
    }
    else {
      unint64_t v27 = sub_10014955C((uint64_t)&_swiftEmptyArrayStorage);
    }
    sub_100044C78(v28, v30);
  }
  else
  {
    id v35 = v41[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_100044C78(v28, v30);
    if (qword_1001A4F38 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100017378(v21, (uint64_t)qword_1001B75B8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      v41[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136315394;
      if (a1)
      {
        if (a1 == 1) {
          uint64_t v25 = 0xD000000000000019;
        }
        else {
          uint64_t v25 = 0xD000000000000014;
        }
        if (a1 == 1) {
          unint64_t v26 = 0x800000010015E3B0;
        }
        else {
          unint64_t v26 = 0x800000010015E390;
        }
      }
      else
      {
        uint64_t v25 = 0xD000000000000016;
        unint64_t v26 = 0x800000010015E3D0;
      }
      uint64_t v40 = sub_1000FE1F8(v25, v26, (uint64_t *)v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v36 = Error.localizedDescription.getter();
      uint64_t v40 = sub_1000FE1F8(v36, v37, (uint64_t *)v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Error fetching allow list for %s %s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      long long v20 = v39;
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    unint64_t v27 = sub_10014955C((uint64_t)&_swiftEmptyArrayStorage);
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
  return v27;
}

unint64_t sub_10005AF14(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10005A86C(2);
  if (!*(void *)(v4 + 16) || (unint64_t v5 = sub_1000B81CC(0xD000000000000032, 0x800000010015E350), (v6 & 1) == 0))
  {
    long long v11 = 0u;
    long long v12 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  sub_100044E1C(*(void *)(v4 + 56) + 32 * v5, (uint64_t)&v11);
  swift_bridgeObjectRelease();
  if (!*((void *)&v12 + 1))
  {
LABEL_10:
    sub_10000ACE0((uint64_t)&v11, (uint64_t *)&unk_1001A9610);
LABEL_11:
    long long v11 = 0u;
    long long v12 = 0u;
LABEL_12:
    sub_10000ACE0((uint64_t)&v11, (uint64_t *)&unk_1001A9610);
    return sub_10014955C((uint64_t)&_swiftEmptyArrayStorage);
  }
  sub_10000570C(qword_1001A7218);
  if ((swift_dynamicCast() & 1) == 0 || !v10) {
    goto LABEL_11;
  }
  if (*(void *)(v10 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v7 = sub_1000B81CC(a1, a2);
    if (v8)
    {
      sub_100044E1C(*(void *)(v10 + 56) + 32 * v7, (uint64_t)&v11);
    }
    else
    {
      long long v11 = 0u;
      long long v12 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v11 = 0u;
    long long v12 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v12 + 1)) {
    goto LABEL_12;
  }
  sub_10000570C(qword_1001A7218);
  if (swift_dynamicCast()) {
    return v10;
  }
  return sub_10014955C((uint64_t)&_swiftEmptyArrayStorage);
}

uint64_t sub_10005B0A8()
{
  return swift_initClassMetadata2();
}

uint64_t sub_10005B0F8(uint64_t a1)
{
  uint64_t v2 = v1;
  id v4 = objc_allocWithZone(v1);
  uint64_t v6 = sub_10005B6D0(a1, v5);
  (*(void (**)(uint64_t))(*(void *)(*(void *)((char *)v2 + qword_1001B7510) - 8) + 8))(a1);
  return v6;
}

uint64_t sub_10005B178()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_10005B1E8(char a1)
{
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for RemoteHostingController();
  [super viewDidDisappear:a1 & 1];
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    sub_10004446C();
    return swift_unknownObjectRelease();
  }
  return result;
}

void sub_10005B2D0(void *a1, uint64_t a2, char a3)
{
  id v4 = a1;
  sub_10005B1E8(a3);
}

void *sub_10005B324(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_10005B368(a1, a2);
}

void *sub_10005B368(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((swift_isaMask & *v2) + qword_1001B7510);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(a1, a2);
  unint64_t v7 = (char *)&v13 - v6;
  *(void *)((char *)v2 + *(void *)(v8 + 16) + 8) = 0;
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v9 = (void *)UIHostingController.init(coder:rootView:)();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  id v11 = v9;
  v10(a2, v4);
  if (v9) {

  }
  return v9;
}

id sub_10005B4BC(void *a1)
{
  *(void *)((char *)v1 + *(void *)(qword_1001B7510 + (swift_isaMask & *v1) + 16) + 8) = 0;
  swift_unknownObjectWeakInit();
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for RemoteHostingController();
  id v3 = [super initWithCoder:a1];

  return v3;
}

id sub_10005B57C(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_10005B4BC(a3);
}

uint64_t sub_10005B5A4()
{
  return sub_10005B7E8((uint64_t)v0 + *(void *)(qword_1001B7510 + (swift_isaMask & *v0) + 16));
}

id sub_10005B5F0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RemoteHostingController();
  return [super dealloc];
}

uint64_t sub_10005B66C(void *a1)
{
  return sub_10005B7E8((uint64_t)a1 + *(void *)(qword_1001B7510 + (swift_isaMask & *a1) + 16));
}

uint64_t type metadata accessor for RemoteHostingController()
{
  return sub_10000B72C();
}

uint64_t sub_10005B6D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((swift_isaMask & *v2) + qword_1001B7510);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(a1, a2);
  unint64_t v7 = (char *)&v10 - v6;
  *(void *)((char *)v2 + *(void *)(v8 + 16) + 8) = 0;
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  return UIHostingController.init(rootView:)();
}

uint64_t sub_10005B7E8(uint64_t a1)
{
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for ViewModulesConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ViewModulesConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ViewModulesConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ViewModulesConfiguration()
{
  return &type metadata for ViewModulesConfiguration;
}

Swift::Int sub_10005B8D8()
{
  return Hasher._finalize()();
}

Swift::Int sub_10005B9D4()
{
  return Hasher._finalize()();
}

Swift::Int sub_10005BA54()
{
  return Hasher._finalize()();
}

Swift::Int sub_10005BADC()
{
  return Hasher._finalize()();
}

Swift::Int sub_10005BB48()
{
  return Hasher._finalize()();
}

Swift::Int sub_10005BBC0()
{
  return Hasher._finalize()();
}

Swift::Int sub_10005BC2C()
{
  return Hasher._finalize()();
}

uint64_t sub_10005BC98()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10005BCEC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10005BD40()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10005BDA0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10005BDF4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10005BE64()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10005BECC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10005BFA8()
{
  return Hasher._finalize()();
}

Swift::Int sub_10005C0A0()
{
  return Hasher._finalize()();
}

Swift::Int sub_10005C11C()
{
  return Hasher._finalize()();
}

Swift::Int sub_10005C1A0()
{
  return Hasher._finalize()();
}

Swift::Int sub_10005C208()
{
  return Hasher._finalize()();
}

Swift::Int sub_10005C27C()
{
  return Hasher._finalize()();
}

Swift::Int sub_10005C2E4()
{
  return Hasher._finalize()();
}

uint64_t sub_10005C34C(char a1)
{
  if (a1) {
    return 0xD000000000000011;
  }
  else {
    return 0x73656C75646F6DLL;
  }
}

uint64_t sub_10005C388(char *a1, char *a2)
{
  return sub_1001375C4(*a1, *a2);
}

Swift::Int sub_10005C394()
{
  return sub_10005BA54();
}

uint64_t sub_10005C39C()
{
  return sub_10005BDF4();
}

Swift::Int sub_10005C3A4()
{
  return sub_10005C11C();
}

uint64_t sub_10005C3AC@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_100194DB0;
  return sub_10005C730(v2, a1, a2);
}

uint64_t sub_10005C3B8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10005C34C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10005C3E4()
{
  return sub_10005C34C(*v0);
}

uint64_t sub_10005C3EC@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100194DB0, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_10005C450()
{
  return 0;
}

void sub_10005C45C(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10005C468(uint64_t a1)
{
  unint64_t v2 = sub_10005D350();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005C4A4(uint64_t a1)
{
  unint64_t v2 = sub_10005D350();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005C4E0(char a1)
{
  return *(void *)&aLocationmusic[8 * a1];
}

uint64_t sub_10005C500(char a1)
{
  return *(void *)&aDefault_2[8 * a1];
}

uint64_t sub_10005C520(char a1)
{
  if (a1) {
    return 7368801;
  }
  else {
    return 0x6C61646F6DLL;
  }
}

uint64_t sub_10005C54C(char *a1, char *a2)
{
  return sub_10013741C(*a1, *a2);
}

Swift::Int sub_10005C558()
{
  return sub_10005BBC0();
}

uint64_t sub_10005C560()
{
  return sub_10005BCEC();
}

Swift::Int sub_10005C568()
{
  return sub_10005C27C();
}

unint64_t sub_10005C570@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10005CF7C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10005C5A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10005C4E0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10005C5CC(char *a1, char *a2)
{
  return sub_10013753C(*a1, *a2);
}

Swift::Int sub_10005C5D8()
{
  return sub_10005BADC();
}

uint64_t sub_10005C5E0()
{
  return sub_10005BDA0();
}

Swift::Int sub_10005C5E8()
{
  return sub_10005C1A0();
}

unint64_t sub_10005C5F0@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10005CFC8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10005C620@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10005C500(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10005C650@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10005D014(a1, a2);
  *a3 = result & 1;
  return result;
}

void sub_10005C67C(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_10005C688(uint64_t a1)
{
  unint64_t v2 = sub_10005DC1C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005C6C4(uint64_t a1)
{
  unint64_t v2 = sub_10005DC1C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005C700(char *a1, char *a2)
{
  return sub_1001374A4(*a1, *a2);
}

Swift::Int sub_10005C70C()
{
  return sub_10005BB48();
}

uint64_t sub_10005C714()
{
  return sub_10005BD40();
}

Swift::Int sub_10005C71C()
{
  return sub_10005C208();
}

uint64_t sub_10005C724@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_100194F30;
  return sub_10005C730(v2, a1, a2);
}

uint64_t sub_10005C730@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, char *a3@<X8>)
{
  Swift::Int v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  uint64_t result = swift_bridgeObjectRelease();
  if (v4 == 1) {
    char v6 = 1;
  }
  else {
    char v6 = 2;
  }
  if (!v4) {
    char v6 = 0;
  }
  *a3 = v6;
  return result;
}

uint64_t sub_10005C78C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10005C520(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10005C7B8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DecodingError.Context();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *a1;
  uint64_t v10 = (void *)a1[1];
  swift_bridgeObjectRetain();
  v20._uint64_t countAndFlagsBits = v9;
  v20._object = v10;
  unint64_t result = sub_10005CF7C(v20);
  if (result == 6)
  {
    unint64_t v18 = 0;
    unint64_t v19 = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    unint64_t v18 = 0xD000000000000018;
    unint64_t v19 = 0x800000010015E470;
    v12._uint64_t countAndFlagsBits = v9;
    v12._object = v10;
    String.append(_:)(v12);
    v13._uint64_t countAndFlagsBits = 0x6F6E2073656F6420;
    v13._object = (void *)0xEF74736978652074;
    String.append(_:)(v13);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    uint64_t v14 = type metadata accessor for DecodingError();
    swift_allocError();
    NSString v16 = v15;
    NSString v17 = (char *)v15 + *(int *)(sub_10000570C(&qword_1001A72D8) + 48);
    *NSString v16 = &type metadata for ViewModulesConfiguration.Name;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v17, v8, v4);
    (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v16, enum case for DecodingError.valueNotFound(_:), v14);
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  else
  {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10005C9E8(void *a1, char a2, uint64_t a3)
{
  uint64_t v7 = sub_10000570C(&qword_1001A72E0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  id v11 = &v13[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000AC9C(a1, a1[3]);
  sub_10005D350();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v14 = a3;
  v13[15] = 0;
  sub_10000570C(&qword_1001A72E8);
  sub_10005D51C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v3)
  {
    v13[14] = a2 & 1;
    v13[13] = 1;
    sub_10005D640();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v11, v7);
}

void *sub_10005CB8C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_10005D0C0(a1);
  if (!v2)
  {
    *(unsigned char *)a2 = result & 1;
    *(void *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_10005CBC0(void *a1)
{
  return sub_10005C9E8(a1, *(unsigned char *)v1, *(void *)(v1 + 8));
}

uint64_t sub_10005CBE0()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10005CC40()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10005CC90(void *a1, char a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A7330);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000AC9C(a1, a1[3]);
  sub_10005DC1C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = a2;
  sub_10005DCC4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v4);
}

void *sub_10005CDD4@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10005DAB0(a1);
  if (!v2) {
    *a2 = (_BYTE)result;
  }
  return result;
}

uint64_t sub_10005CE00(void *a1)
{
  return sub_10005CC90(a1, *v1);
}

uint64_t sub_10005CE1C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10005CE7C()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10005CECC()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10005CF2C()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t sub_10005CF7C(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100194E00, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

unint64_t sub_10005CFC8(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100194EB0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_10005D014(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6E61726165707061 && a2 == 0xEA00000000006563)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_10005D0A4()
{
  return 0x6E61726165707061;
}

void *sub_10005D0C0(void *a1)
{
  uint64_t v3 = sub_10000570C(&qword_1001A72A0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = sub_10000AC9C(a1, a1[3]);
  sub_10005D350();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100007584((uint64_t)a1);
  }
  else
  {
    sub_10000570C(&qword_1001A72B0);
    v10[7] = 0;
    sub_10005D3A4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_10005D474();
    Dictionary.mapKeys<A>(_:)();
    swift_bridgeObjectRelease();
    v10[5] = 1;
    sub_10005D4C8();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
    uint64_t v8 = (void *)v10[6];
    sub_100007584((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v8;
}

unint64_t sub_10005D350()
{
  unint64_t result = qword_1001A72A8;
  if (!qword_1001A72A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A72A8);
  }
  return result;
}

unint64_t sub_10005D3A4()
{
  unint64_t result = qword_1001A72B8;
  if (!qword_1001A72B8)
  {
    sub_100004A58(&qword_1001A72B0);
    sub_10005D420();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A72B8);
  }
  return result;
}

unint64_t sub_10005D420()
{
  unint64_t result = qword_1001A72C0;
  if (!qword_1001A72C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A72C0);
  }
  return result;
}

unint64_t sub_10005D474()
{
  unint64_t result = qword_1001A72C8;
  if (!qword_1001A72C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A72C8);
  }
  return result;
}

unint64_t sub_10005D4C8()
{
  unint64_t result = qword_1001A72D0;
  if (!qword_1001A72D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A72D0);
  }
  return result;
}

unint64_t sub_10005D51C()
{
  unint64_t result = qword_1001A72F0;
  if (!qword_1001A72F0)
  {
    sub_100004A58(&qword_1001A72E8);
    sub_10005D598();
    sub_10005D5EC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A72F0);
  }
  return result;
}

unint64_t sub_10005D598()
{
  unint64_t result = qword_1001A72F8;
  if (!qword_1001A72F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A72F8);
  }
  return result;
}

unint64_t sub_10005D5EC()
{
  unint64_t result = qword_1001A7300;
  if (!qword_1001A7300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7300);
  }
  return result;
}

unint64_t sub_10005D640()
{
  unint64_t result = qword_1001A7308;
  if (!qword_1001A7308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7308);
  }
  return result;
}

unint64_t sub_10005D694()
{
  unint64_t result = qword_1001A7310;
  if (!qword_1001A7310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7310);
  }
  return result;
}

uint64_t sub_10005D6E8(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  swift_bridgeObjectRetain();
  sub_10005AF14(a1, a2);
  uint64_t v4 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v19 = 0;
  id v6 = [v4 dataWithPropertyList:isa format:100 options:0 error:&v19];

  id v7 = v19;
  if (v6)
  {
    uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    sub_10005DDC0();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    swift_release();
    sub_100044C78(v8, v10);
    swift_bridgeObjectRelease();
    return v19;
  }
  else
  {
    id v11 = v7;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_1001A4F38 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100017378(v12, (uint64_t)qword_1001B75B8);
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    Swift::String v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      id v19 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315394;
      swift_bridgeObjectRetain();
      sub_1000FE1F8(a1, a2, (uint64_t *)&v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v15 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v16 = Error.localizedDescription.getter();
      sub_1000FE1F8(v16, v17, (uint64_t *)&v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Empty or invalid view module configuration for ID: %s. Error: %s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }
    return 0;
  }
}

void *sub_10005DAB0(void *a1)
{
  uint64_t v3 = sub_10000570C(&qword_1001A7318);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  id v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = sub_10000AC9C(a1, a1[3]);
  sub_10005DC1C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100007584((uint64_t)a1);
  }
  else
  {
    sub_10005DC70();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
    uint64_t v8 = (void *)v10[15];
    sub_100007584((uint64_t)a1);
  }
  return v8;
}

unint64_t sub_10005DC1C()
{
  unint64_t result = qword_1001A7320;
  if (!qword_1001A7320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7320);
  }
  return result;
}

unint64_t sub_10005DC70()
{
  unint64_t result = qword_1001A7328;
  if (!qword_1001A7328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7328);
  }
  return result;
}

unint64_t sub_10005DCC4()
{
  unint64_t result = qword_1001A7338;
  if (!qword_1001A7338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7338);
  }
  return result;
}

unint64_t sub_10005DD18()
{
  unint64_t result = qword_1001A7340;
  if (!qword_1001A7340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7340);
  }
  return result;
}

unint64_t sub_10005DD6C()
{
  unint64_t result = qword_1001A7348;
  if (!qword_1001A7348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7348);
  }
  return result;
}

unint64_t sub_10005DDC0()
{
  unint64_t result = qword_1001A7350;
  if (!qword_1001A7350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7350);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ViewModulesConfiguration.ModuleSettings.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10005DEB0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewModulesConfiguration.ModuleSettings.CodingKeys()
{
  return &type metadata for ViewModulesConfiguration.ModuleSettings.CodingKeys;
}

ValueMetadata *type metadata accessor for ViewModulesConfiguration.CodingKeys()
{
  return &type metadata for ViewModulesConfiguration.CodingKeys;
}

unsigned char *sub_10005DF08(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ViewModulesConfiguration.ModuleSettings.Appearance()
{
  return &type metadata for ViewModulesConfiguration.ModuleSettings.Appearance;
}

uint64_t getEnumTagSinglePayload for NavigationButton.Style(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s16EventViewService24ViewModulesConfigurationV14ModuleSettingsV10AppearanceOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005E07CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewModulesConfiguration.ModuleSettings()
{
  return &type metadata for ViewModulesConfiguration.ModuleSettings;
}

uint64_t getEnumTagSinglePayload for ViewModulesConfiguration.Name(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ViewModulesConfiguration.Name(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005E210);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewModulesConfiguration.Name()
{
  return &type metadata for ViewModulesConfiguration.Name;
}

unsigned char *_s16EventViewService24ViewModulesConfigurationV17PresentationStyleOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005E314);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewModulesConfiguration.PresentationStyle()
{
  return &type metadata for ViewModulesConfiguration.PresentationStyle;
}

unint64_t sub_10005E350()
{
  unint64_t result = qword_1001A7358;
  if (!qword_1001A7358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7358);
  }
  return result;
}

unint64_t sub_10005E3A8()
{
  unint64_t result = qword_1001A7360;
  if (!qword_1001A7360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7360);
  }
  return result;
}

unint64_t sub_10005E400()
{
  unint64_t result = qword_1001A7368;
  if (!qword_1001A7368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7368);
  }
  return result;
}

unint64_t sub_10005E458()
{
  unint64_t result = qword_1001A7370;
  if (!qword_1001A7370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7370);
  }
  return result;
}

unint64_t sub_10005E4B0()
{
  unint64_t result = qword_1001A7378;
  if (!qword_1001A7378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7378);
  }
  return result;
}

unint64_t sub_10005E508()
{
  unint64_t result = qword_1001A7380;
  if (!qword_1001A7380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7380);
  }
  return result;
}

unint64_t sub_10005E560()
{
  unint64_t result = qword_1001A7388;
  if (!qword_1001A7388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7388);
  }
  return result;
}

unint64_t sub_10005E5B8()
{
  unint64_t result = qword_1001A7390;
  if (!qword_1001A7390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7390);
  }
  return result;
}

unint64_t sub_10005E610()
{
  unint64_t result = qword_1001A7398;
  if (!qword_1001A7398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7398);
  }
  return result;
}

uint64_t sub_10005E674(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *(void *)a1 = *a2;
    a1 = v16 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    uint64_t v6 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v6;
    uint64_t v7 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v7;
    unint64_t v9 = (void *)a2[8];
    uint64_t v8 = a2[9];
    *(void *)(a1 + 64) = v9;
    *(void *)(a1 + 72) = v8;
    *(void *)(a1 + 80) = a2[10];
    *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
    uint64_t v10 = a2[13];
    *(void *)(a1 + 96) = a2[12];
    *(void *)(a1 + 104) = v10;
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v12 = (uint64_t *)((char *)a2 + v11);
    Swift::String v13 = (void *)(a1 + v11);
    *(void *)(a1 + 112) = a2[14];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v14 = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10000570C(&qword_1001A55D8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v12, v15);
    }
    else
    {
      *Swift::String v13 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10005E818(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for OpenURLAction();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_10005E900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v8 = *(void **)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = v7;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v9;
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)(a2 + v10);
  uint64_t v12 = (void *)(a1 + v10);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v13 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = type metadata accessor for OpenURLAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v11, v14);
  }
  else
  {
    *uint64_t v12 = *v11;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_10005EA4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void **)(a1 + 64);
  uint64_t v7 = *(void **)(a2 + 64);
  *(void *)(a1 + 64) = v7;
  id v8 = v7;

  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_retain();
  swift_release();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  if (a1 != a2)
  {
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (void *)(a2 + v9);
    sub_10000ACE0(a1 + v9, &qword_1001A55D8);
    sub_10000570C(&qword_1001A55D8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      void *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10005EC0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  id v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  uint64_t v10 = sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for OpenURLAction();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10005ED00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);

  uint64_t v10 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v10;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_release();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  if (a1 != a2)
  {
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v12 = (void *)(a1 + v11);
    id v13 = (const void *)(a2 + v11);
    sub_10000ACE0(a1 + v11, &qword_1001A55D8);
    uint64_t v14 = sub_10000570C(&qword_1001A55D8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v12, v13, v15);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10005EE74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005EE88);
}

uint64_t sub_10005EE88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000570C(qword_1001A55E8);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10005EF3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005EF50);
}

uint64_t sub_10005EF50(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000570C(qword_1001A55E8);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for LocationModule()
{
  uint64_t result = qword_1001A73F8;
  if (!qword_1001A73F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10005F048()
{
  sub_100017E94();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_10005F0E8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10005F104@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v75 = a1;
  uint64_t v3 = sub_10000570C(&qword_1001A5EC8);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v74 = (uint64_t)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_10000570C(&qword_1001A62A8);
  __chkstk_darwin(v70, v6);
  uint64_t v8 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_10000570C(&qword_1001A6888);
  __chkstk_darwin(v69, v13);
  uint64_t v15 = (uint64_t *)((char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v71 = sub_10000570C(&qword_1001A6890);
  __chkstk_darwin(v71, v16);
  uint64_t v73 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000570C(&qword_1001A7438);
  __chkstk_darwin(v18 - 8, v19);
  uint64_t v21 = (char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000570C(&qword_1001A7440);
  uint64_t v23 = v22 - 8;
  __chkstk_darwin(v22, v24);
  unint64_t v26 = (char *)&v66 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v21 = static HorizontalAlignment.leading.getter();
  *((void *)v21 + 1) = 0x4030000000000000;
  v21[16] = 0;
  uint64_t v27 = sub_10000570C(&qword_1001A7448);
  sub_10005F71C(v2, (uint64_t)&v21[*(int *)(v27 + 44)]);
  LOBYTE(v2) = static Edge.Set.all.getter();
  sub_10000A428((uint64_t)v21, (uint64_t)v26, &qword_1001A7438);
  uint64_t v28 = *(int *)(v23 + 44);
  uint64_t v72 = v26;
  unint64_t v29 = &v26[v28];
  char *v29 = v2;
  *(_OWORD *)(v29 + 8) = 0u;
  *(_OWORD *)(v29 + 24) = 0u;
  v29[40] = 1;
  sub_10000ACE0((uint64_t)v21, &qword_1001A7438);
  if (qword_1001A4E50 != -1) {
    swift_once();
  }
  uint64_t v30 = qword_1001B74F0;
  uint64_t KeyPath = swift_getKeyPath();
  char v32 = &v12[*(int *)(v9 + 20)];
  uint64_t v33 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v34 = type metadata accessor for RoundedCornerStyle();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v67 = v9;
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 104);
  v36(v32, v33, v34);
  __asm { FMOV            V0.2D, #12.0 }
  long long v66 = _Q0;
  *(_OWORD *)uint64_t v12 = _Q0;
  char v68 = &type metadata accessor for RoundedRectangle;
  sub_1000617F4((uint64_t)v12, (uint64_t)v8, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v8[*(int *)(v70 + 36)] = 256;
  sub_10000A428((uint64_t)v8, (uint64_t)v15 + *(int *)(v69 + 36), &qword_1001A62A8);
  *uint64_t v15 = KeyPath;
  v15[1] = v30;
  swift_retain_n();
  swift_retain();
  sub_10000ACE0((uint64_t)v8, &qword_1001A62A8);
  sub_100024450((uint64_t)v12);
  swift_release();
  swift_release();
  v36(&v12[*(int *)(v67 + 20)], v33, v34);
  *(_OWORD *)uint64_t v12 = v66;
  static Color.black.getter();
  uint64_t v42 = Color.opacity(_:)();
  swift_release();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v43 = v74;
  sub_1000617F4((uint64_t)v12, v74, (uint64_t (*)(void))v68);
  uint64_t v44 = v43 + *(int *)(sub_10000570C(&qword_1001A5ED0) + 36);
  long long v45 = v77;
  *(_OWORD *)uint64_t v44 = v76;
  *(_OWORD *)(v44 + 16) = v45;
  *(void *)(v44 + 32) = v78;
  uint64_t v46 = sub_10000570C(&qword_1001A5ED8);
  *(void *)(v43 + *(int *)(v46 + 52)) = v42;
  *(_WORD *)(v43 + *(int *)(v46 + 56)) = 256;
  uint64_t v47 = static Alignment.center.getter();
  uint64_t v49 = v48;
  uint64_t v50 = (uint64_t *)(v43 + *(int *)(sub_10000570C(&qword_1001A5EE0) + 36));
  *uint64_t v50 = v47;
  v50[1] = v49;
  sub_100024450((uint64_t)v12);
  uint64_t v51 = static Alignment.center.getter();
  uint64_t v53 = v52;
  uint64_t v54 = (uint64_t)v73;
  uint64_t v55 = (uint64_t)&v73[*(int *)(v71 + 36)];
  sub_10000A428(v43, v55, &qword_1001A5EC8);
  uint64_t v56 = (uint64_t *)(v55 + *(int *)(sub_10000570C(&qword_1001A6898) + 36));
  *uint64_t v56 = v51;
  v56[1] = v53;
  sub_10000A428((uint64_t)v15, v54, &qword_1001A6888);
  sub_10000ACE0(v43, &qword_1001A5EC8);
  sub_10000ACE0((uint64_t)v15, &qword_1001A6888);
  uint64_t v57 = static Alignment.center.getter();
  uint64_t v59 = v58;
  uint64_t v60 = sub_10000570C(&qword_1001A7450);
  uint64_t v61 = v75;
  uint64_t v62 = v75 + *(int *)(v60 + 36);
  sub_10000A428(v54, v62, &qword_1001A6890);
  char v63 = (uint64_t *)(v62 + *(int *)(sub_10000570C(&qword_1001A6880) + 36));
  *char v63 = v57;
  v63[1] = v59;
  uint64_t v64 = (uint64_t)v72;
  sub_10000A428((uint64_t)v72, v61, &qword_1001A7440);
  sub_10000ACE0(v54, &qword_1001A6890);
  return sub_10000ACE0(v64, &qword_1001A7440);
}

uint64_t sub_10005F71C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v75 = a2;
  uint64_t v3 = type metadata accessor for LocationModule();
  uint64_t v66 = *(void *)(v3 - 8);
  uint64_t v4 = *(void *)(v66 + 64);
  __chkstk_darwin(v3 - 8, v5);
  uint64_t v6 = sub_10000570C(&qword_1001A7458);
  uint64_t v69 = *(void *)(v6 - 8);
  uint64_t v70 = v6;
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000570C(&qword_1001A7460);
  uint64_t v12 = __chkstk_darwin(v10 - 8, v11);
  uint64_t v67 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  uint64_t v68 = (uint64_t)&v64 - v15;
  uint64_t v16 = type metadata accessor for Divider();
  uint64_t v71 = *(void *)(v16 - 8);
  uint64_t v72 = v16;
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v64 - v22;
  uint64_t v24 = sub_10000570C(&qword_1001A7468);
  uint64_t v26 = __chkstk_darwin(v24 - 8, v25);
  uint64_t v28 = (char *)&v64 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26, v29);
  uint64_t v74 = (uint64_t)&v64 - v30;
  uint64_t v31 = sub_10000570C(&qword_1001A7470);
  uint64_t v33 = __chkstk_darwin(v31 - 8, v32);
  uint64_t v73 = (uint64_t)&v64 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __chkstk_darwin(v33, v35);
  uint64_t v38 = (char *)&v64 - v37;
  __chkstk_darwin(v36, v39);
  uint64_t v41 = (char *)&v64 - v40;
  *(void *)uint64_t v38 = static HorizontalAlignment.leading.getter();
  *((void *)v38 + 1) = 0x4024000000000000;
  v38[16] = 0;
  uint64_t v42 = sub_10000570C(&qword_1001A7478);
  sub_10005FED4((long long *)a1, (uint64_t)&v38[*(int *)(v42 + 44)]);
  sub_10000A3C4((uint64_t)v38, (uint64_t)v41, &qword_1001A7470);
  if (*(void *)(a1 + 104))
  {
    swift_retain();
    char v43 = sub_10014D9F0();
    swift_release();
    if (v43)
    {
      uint64_t v44 = sub_10000570C(&qword_1001A74A0);
      uint64_t v45 = v74;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v74, 1, 1, v44);
    }
    else
    {
      uint64_t v65 = v41;
      uint64_t v46 = v23;
      Divider.init()();
      sub_1000617F4(a1, (uint64_t)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for LocationModule);
      unint64_t v47 = (*(unsigned __int8 *)(v66 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
      uint64_t v48 = swift_allocObject();
      uint64_t v49 = sub_1000619A4((uint64_t)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v48 + v47);
      __chkstk_darwin(v49, v50);
      *(&v64 - 2) = a1;
      sub_10000570C(&qword_1001A7480);
      sub_10000A780(&qword_1001A7488, &qword_1001A7480);
      Button.init(action:label:)();
      if (qword_1001A4F20 != -1) {
        swift_once();
      }
      sub_10000A780(&qword_1001A7490, &qword_1001A7458);
      uint64_t v51 = (uint64_t)v67;
      uint64_t v52 = v70;
      View.accessibilityIdentifier(_:)();
      (*(void (**)(char *, uint64_t))(v69 + 8))(v9, v52);
      uint64_t v53 = v68;
      sub_10000A3C4(v51, v68, &qword_1001A7460);
      uint64_t v55 = v71;
      uint64_t v54 = v72;
      uint64_t v56 = *(void (**)(char *, char *, uint64_t))(v71 + 16);
      v56(v20, v46, v72);
      sub_10000A428(v53, v51, &qword_1001A7460);
      v56(v28, v20, v54);
      uint64_t v57 = sub_10000570C(&qword_1001A7498);
      sub_10000A428(v51, (uint64_t)&v28[*(int *)(v57 + 48)], &qword_1001A7460);
      sub_10000ACE0(v53, &qword_1001A7460);
      uint64_t v58 = *(void (**)(char *, uint64_t))(v55 + 8);
      v58(v46, v54);
      sub_10000ACE0(v51, &qword_1001A7460);
      v58(v20, v54);
      uint64_t v59 = sub_10000570C(&qword_1001A74A0);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v28, 0, 1, v59);
      uint64_t v45 = v74;
      sub_10000A3C4((uint64_t)v28, v74, &qword_1001A7468);
      uint64_t v41 = v65;
    }
    uint64_t v60 = v73;
    sub_10000A428((uint64_t)v41, v73, &qword_1001A7470);
    sub_10000A428(v45, (uint64_t)v28, &qword_1001A7468);
    uint64_t v61 = v75;
    sub_10000A428(v60, v75, &qword_1001A7470);
    uint64_t v62 = sub_10000570C(&qword_1001A74A8);
    sub_10000A428((uint64_t)v28, v61 + *(int *)(v62 + 48), &qword_1001A7468);
    sub_10000ACE0(v45, &qword_1001A7468);
    sub_10000ACE0((uint64_t)v41, &qword_1001A7470);
    sub_10000ACE0((uint64_t)v28, &qword_1001A7468);
    return sub_10000ACE0(v60, &qword_1001A7470);
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100061A78((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10005FED4@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v185 = a2;
  uint64_t v180 = type metadata accessor for EnabledTextSelectability();
  uint64_t v179 = *(void *)(v180 - 8);
  __chkstk_darwin(v180, v3);
  uint64_t v178 = (char *)&v147 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v184 = sub_10000570C(&qword_1001A74B0);
  uint64_t v183 = *(void *)(v184 - 8);
  uint64_t v6 = __chkstk_darwin(v184, v5);
  uint64_t v182 = (char *)&v147 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  uint64_t v181 = (char *)&v147 - v9;
  uint64_t v177 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v177, v10);
  uint64_t v12 = (_OWORD *)((char *)&v147 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for MapInteractionModes();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v147 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000570C(&qword_1001A74B8);
  __chkstk_darwin(v18 - 8, v19);
  uint64_t v175 = (char *)&v147 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for MapCamera();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  uint64_t v163 = (char *)&v147 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = type metadata accessor for MapCameraPosition();
  uint64_t v164 = *(void *)(v165 - 8);
  __chkstk_darwin(v165, v25);
  uint64_t v162 = (char *)&v147 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000570C(&qword_1001A74C0);
  __chkstk_darwin(v27 - 8, v28);
  uint64_t v166 = (char *)&v147 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v172 = sub_10000570C(&qword_1001A74C8);
  uint64_t v170 = *(void *)(v172 - 8);
  __chkstk_darwin(v172, v30);
  char v169 = (char *)&v147 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v167 = sub_10000570C(&qword_1001A74D0);
  __chkstk_darwin(v167, v32);
  uint64_t v174 = (char *)&v147 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v168 = sub_10000570C(&qword_1001A74D8);
  __chkstk_darwin(v168, v34);
  uint64_t v173 = (char *)&v147 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v171 = sub_10000570C(&qword_1001A74E0);
  uint64_t v37 = __chkstk_darwin(v171, v36);
  uint64_t v188 = (uint64_t)&v147 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37, v39);
  uint64_t v187 = (uint64_t)&v147 - v40;
  uint64_t v156 = sub_10000570C(&qword_1001A67B8);
  __chkstk_darwin(v156, v41);
  uint64_t v159 = (uint64_t *)((char *)&v147 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v43 = sub_10000570C(&qword_1001A67C0);
  __chkstk_darwin(v43 - 8, v44);
  uint64_t v46 = (char *)&v147 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = sub_10000570C(&qword_1001A67C8);
  __chkstk_darwin(v155, v47);
  uint64_t v49 = (char *)&v147 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = sub_10000570C(&qword_1001A7078);
  __chkstk_darwin(v158, v50);
  uint64_t v52 = (char *)&v147 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v161 = sub_10000570C(&qword_1001A74E8);
  uint64_t v160 = *(void *)(v161 - 8);
  __chkstk_darwin(v161, v53);
  uint64_t v157 = (uint64_t)&v147 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_10000570C(&qword_1001A74F0);
  uint64_t v57 = __chkstk_darwin(v55 - 8, v56);
  uint64_t v176 = (uint64_t)&v147 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v57, v59);
  uint64_t v186 = (uint64_t)&v147 - v60;
  uint64_t v61 = (void *)*((void *)a1 + 8);
  if (v61)
  {
    id v62 = [v61 city];
    uint64_t v149 = v21;
    id v63 = v62;
    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v154 = a1;
    uint64_t v65 = v64;
    uint64_t v153 = v12;
    uint64_t v67 = v66;

    *(void *)&long long v196 = v65;
    *((void *)&v196 + 1) = v67;
    sub_100010B2C();
    uint64_t v68 = Text.init<A>(_:)();
    uint64_t v70 = v69;
    uint64_t v72 = v71;
    uint64_t v148 = v22;
    char v74 = v73 & 1;
    uint64_t v150 = v14;
    uint64_t v75 = enum case for Text.Case.uppercase(_:);
    uint64_t v76 = type metadata accessor for Text.Case();
    uint64_t v152 = v17;
    uint64_t v77 = v76;
    uint64_t v78 = *(void *)(v76 - 8);
    uint64_t v151 = v13;
    uint64_t v79 = v78;
    (*(void (**)(char *, uint64_t, uint64_t))(v78 + 104))(v46, v75, v76);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v79 + 56))(v46, 0, 1, v77);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v81 = v159;
    sub_10000A428((uint64_t)v46, (uint64_t)v159 + *(int *)(v156 + 28), &qword_1001A67C0);
    *uint64_t v81 = KeyPath;
    sub_10000A428((uint64_t)v81, (uint64_t)&v49[*(int *)(v155 + 36)], &qword_1001A67B8);
    *(void *)uint64_t v49 = v68;
    *((void *)v49 + 1) = v70;
    v49[16] = v74;
    *((void *)v49 + 3) = v72;
    sub_10000FCD4(v68, v70, v74);
    swift_bridgeObjectRetain();
    sub_10000ACE0((uint64_t)v81, &qword_1001A67B8);
    sub_10000ACE0((uint64_t)v46, &qword_1001A67C0);
    uint64_t v82 = v70;
    a1 = v154;
    char v83 = v74;
    uint64_t v22 = v148;
    sub_10000FCC4(v68, v82, v83);
    uint64_t v12 = v153;
    swift_bridgeObjectRelease();
    uint64_t v84 = static Font.subheadline.getter();
    uint64_t v85 = swift_getKeyPath();
    sub_10000A428((uint64_t)v49, (uint64_t)v52, &qword_1001A67C8);
    uint64_t v86 = (uint64_t *)&v52[*(int *)(v158 + 36)];
    uint64_t *v86 = v85;
    v86[1] = v84;
    uint64_t v21 = v149;
    sub_10000ACE0((uint64_t)v49, &qword_1001A67C8);
    uint64_t v87 = v157;
    sub_10000A428((uint64_t)v52, v157, &qword_1001A7078);
    uint64_t v88 = v161;
    *(void *)(v87 + *(int *)(v161 + 36)) = 0x3FE0000000000000;
    sub_10000ACE0((uint64_t)v52, &qword_1001A7078);
    uint64_t v89 = v186;
    sub_10000A3C4(v87, v186, &qword_1001A74E8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v160 + 56))(v89, 0, 1, v88);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v160 + 56))(v186, 1, 1, v161);
  }
  uint64_t v90 = v163;
  MapCamera.init(centerCoordinate:distance:heading:pitch:)();
  uint64_t v91 = v162;
  static MapCameraPosition.camera(_:)();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v90, v21);
  uint64_t v92 = v165;
  static Binding.constant(_:)();
  (*(void (**)(char *, uint64_t))(v164 + 8))(v91, v92);
  uint64_t v93 = type metadata accessor for MapCameraBounds();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v93 - 8) + 56))(v175, 1, 1, v93);
  sub_10000570C(&qword_1001A74F8);
  uint64_t v94 = swift_allocObject();
  *(_OWORD *)(v94 + 16) = xmmword_100152B80;
  static MapInteractionModes.zoom.getter();
  static MapInteractionModes.pitch.getter();
  *(void *)&long long v196 = v94;
  sub_100061A78(&qword_1001A7500, (void (*)(uint64_t))&type metadata accessor for MapInteractionModes);
  sub_10000570C(&qword_1001A7508);
  sub_10000A780(&qword_1001A7510, &qword_1001A7508);
  uint64_t v95 = dispatch thunk of SetAlgebra.init<A>(_:)();
  __chkstk_darwin(v95, v96);
  sub_10000570C(&qword_1001A7518);
  sub_10000A780(&qword_1001A7520, &qword_1001A7518);
  uint64_t v97 = v169;
  Map.init<A>(position:bounds:interactionModes:scope:content:)();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v98 = v170;
  uint64_t v99 = (uint64_t)v174;
  uint64_t v100 = v172;
  (*(void (**)(char *, char *, uint64_t))(v170 + 16))(v174, v97, v172);
  uint64_t v101 = (_OWORD *)(v99 + *(int *)(v167 + 36));
  long long v102 = v194;
  *uint64_t v101 = v193;
  v101[1] = v102;
  v101[2] = v195;
  (*(void (**)(char *, uint64_t))(v98 + 8))(v97, v100);
  uint64_t v103 = (char *)v12 + *(int *)(v177 + 20);
  uint64_t v104 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v105 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v105 - 8) + 104))(v103, v104, v105);
  __asm { FMOV            V0.2D, #10.0 }
  *uint64_t v12 = _Q0;
  uint64_t v111 = (uint64_t)v173;
  uint64_t v112 = (uint64_t)&v173[*(int *)(v168 + 36)];
  sub_1000617F4((uint64_t)v12, v112, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v112 + *(int *)(sub_10000570C(&qword_1001A62A8) + 36)) = 256;
  sub_10000A428(v99, v111, &qword_1001A74D0);
  sub_100024450((uint64_t)v12);
  sub_10000ACE0(v99, &qword_1001A74D0);
  uint64_t v113 = v188;
  sub_10000A428(v111, v188, &qword_1001A74D8);
  *(unsigned char *)(v113 + *(int *)(v171 + 36)) = 1;
  sub_10000ACE0(v111, &qword_1001A74D8);
  sub_10000A3C4(v113, v187, &qword_1001A74E0);
  long long v114 = a1[5];
  long long v200 = a1[4];
  long long v201 = v114;
  uint64_t v202 = *((void *)a1 + 12);
  long long v115 = a1[1];
  long long v196 = *a1;
  long long v197 = v115;
  long long v116 = a1[3];
  long long v198 = a1[2];
  long long v199 = v116;
  uint64_t v189 = sub_10014D300();
  uint64_t v190 = v117;
  sub_100010B2C();
  uint64_t v118 = Text.init<A>(_:)();
  uint64_t v120 = v119;
  char v122 = v121 & 1;
  static Font.headline.getter();
  uint64_t v123 = Text.font(_:)();
  uint64_t v125 = v124;
  char v127 = v126;
  swift_release();
  sub_10000FCC4(v118, v120, v122);
  swift_bridgeObjectRelease();
  static Font.Weight.medium.getter();
  uint64_t v128 = Text.fontWeight(_:)();
  uint64_t v130 = v129;
  LOBYTE(v97) = v131;
  uint64_t v133 = v132;
  sub_10000FCC4(v123, v125, v127 & 1);
  swift_bridgeObjectRelease();
  uint64_t v189 = v128;
  uint64_t v190 = v130;
  char v191 = v97 & 1;
  uint64_t v192 = v133;
  uint64_t v134 = v178;
  EnabledTextSelectability.init()();
  uint64_t v135 = v182;
  uint64_t v136 = v180;
  View.textSelection<A>(_:)();
  (*(void (**)(char *, uint64_t))(v179 + 8))(v134, v136);
  sub_10000FCC4(v189, v190, v191);
  swift_bridgeObjectRelease();
  uint64_t v137 = v183;
  uint64_t v138 = v181;
  uint64_t v139 = v184;
  (*(void (**)(char *, char *, uint64_t))(v183 + 32))(v181, v135, v184);
  uint64_t v140 = v176;
  sub_10000A428(v186, v176, &qword_1001A74F0);
  uint64_t v141 = v188;
  sub_10000A428(v187, v188, &qword_1001A74E0);
  uint64_t v142 = *(void (**)(char *, char *, uint64_t))(v137 + 16);
  v142(v135, v138, v139);
  uint64_t v143 = v185;
  sub_10000A428(v140, v185, &qword_1001A74F0);
  uint64_t v144 = sub_10000570C(&qword_1001A7528);
  sub_10000A428(v141, v143 + *(int *)(v144 + 48), &qword_1001A74E0);
  v142((char *)(v143 + *(int *)(v144 + 64)), v135, v139);
  uint64_t v145 = *(void (**)(char *, uint64_t))(v137 + 8);
  v145(v138, v139);
  sub_10000ACE0(v187, &qword_1001A74E0);
  sub_10000ACE0(v186, &qword_1001A74F0);
  v145(v135, v139);
  sub_10000ACE0(v188, &qword_1001A74E0);
  return sub_10000ACE0(v140, &qword_1001A74F0);
}

uint64_t sub_100061140()
{
  return Marker.init<A>(_:systemImage:coordinate:)();
}

uint64_t sub_1000611D0(long long *a1)
{
  uint64_t v2 = type metadata accessor for OpenURLAction();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v16 = a1[5];
  long long v31 = a1[4];
  long long v32 = v16;
  uint64_t v33 = *((void *)a1 + 12);
  long long v17 = a1[1];
  long long v27 = *a1;
  long long v28 = v17;
  long long v18 = a1[3];
  long long v29 = a1[2];
  long long v30 = v18;
  sub_10014D394();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1) {
    return sub_10000ACE0((uint64_t)v10, &qword_1001AD200);
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v10, v11);
  type metadata accessor for LocationModule();
  sub_1000264EC((uint64_t)v6);
  OpenURLAction.callAsFunction(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  uint64_t v20 = *((void *)a1 + 13);
  uint64_t v26 = *((void *)a1 + 12);
  long long v21 = a1[5];
  v25[4] = a1[4];
  v25[5] = v21;
  long long v22 = a1[1];
  v25[0] = *a1;
  v25[1] = v22;
  long long v23 = a1[2];
  v25[3] = a1[3];
  v25[2] = v23;
  if (v20)
  {
    uint64_t v24 = swift_retain();
    sub_10014D664(v24);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100061A78((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

double sub_1000614D8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static VerticalAlignment.center.getter();
  sub_1000615C0((uint64_t)v8);
  *(_OWORD *)&v10[103] = v8[6];
  *(_OWORD *)&v10[87] = v8[5];
  *(_OWORD *)&v10[39] = v8[2];
  *(_OWORD *)&v10[23] = v8[1];
  *(_OWORD *)&v10[119] = v8[7];
  v10[135] = v9;
  *(_OWORD *)&v10[55] = v8[3];
  *(_OWORD *)&v10[71] = v8[4];
  *(_OWORD *)&v10[7] = v8[0];
  long long v3 = *(_OWORD *)&v10[64];
  *(_OWORD *)(a1 + 97) = *(_OWORD *)&v10[80];
  long long v4 = *(_OWORD *)&v10[112];
  *(_OWORD *)(a1 + 113) = *(_OWORD *)&v10[96];
  *(_OWORD *)(a1 + 129) = v4;
  long long v5 = *(_OWORD *)v10;
  *(_OWORD *)(a1 + 33) = *(_OWORD *)&v10[16];
  double result = *(double *)&v10[32];
  long long v7 = *(_OWORD *)&v10[48];
  *(_OWORD *)(a1 + 49) = *(_OWORD *)&v10[32];
  *(_OWORD *)(a1 + 65) = v7;
  *(_OWORD *)(a1 + 81) = v3;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = 0x4022000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 145) = *(void *)&v10[128];
  *(_OWORD *)(a1 + 17) = v5;
  return result;
}

uint64_t sub_1000615C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v25 = Image.init(systemName:)();
  char v24 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  if (qword_1001A4E58 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_1001B74F8;
  uint64_t KeyPath = swift_getKeyPath();
  swift_retain();
  uint64_t v23 = static Alignment.center.getter();
  uint64_t v13 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v14 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  char v20 = v19 & 1;
  uint64_t v21 = swift_getKeyPath();
  *(void *)a1 = v25;
  *(unsigned char *)(a1 + 8) = v24;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v9;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = KeyPath;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v23;
  *(void *)(a1 + 80) = v13;
  *(void *)(a1 + 88) = v14;
  *(void *)(a1 + 96) = v16;
  *(unsigned char *)(a1 + 104) = v20;
  *(void *)(a1 + 112) = v18;
  *(void *)(a1 + 120) = v21;
  *(unsigned char *)(a1 + 128) = 0;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10000FCD4(v14, v16, v20);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10000FCC4(v14, v16, v20);
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000617F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10006185C()
{
  uint64_t v1 = (int *)(type metadata accessor for LocationModule() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v3 = v2 + v1[8];
  sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for OpenURLAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_1000619A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocationModule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100061A08()
{
  uint64_t v1 = *(void *)(type metadata accessor for LocationModule() - 8);
  uint64_t v2 = (long long *)(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));

  return sub_1000611D0(v2);
}

double sub_100061A68@<D0>(uint64_t a1@<X8>)
{
  return sub_1000614D8(a1);
}

uint64_t sub_100061A78(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100061AC0()
{
  return sub_100061140();
}

unint64_t sub_100061ADC()
{
  unint64_t result = qword_1001A7530;
  if (!qword_1001A7530)
  {
    sub_100004A58(&qword_1001A7450);
    sub_100061B7C();
    sub_10000A780(&qword_1001A68D8, &qword_1001A6880);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7530);
  }
  return result;
}

unint64_t sub_100061B7C()
{
  unint64_t result = qword_1001A7538;
  if (!qword_1001A7538)
  {
    sub_100004A58(&qword_1001A7440);
    sub_10000A780(qword_1001A7540, &qword_1001A7438);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7538);
  }
  return result;
}

uint64_t sub_100061C1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_10000ACE0(a1, &qword_1001A95D0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_100061DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CalendarViewModel();
  uint64_t WitnessTable = swift_getWitnessTable();

  return ObservedObject.projectedValue.getter(a1, a2, v4, WitnessTable);
}

uint64_t sub_100061E20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(void, void, void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v102 = a7;
  uint64_t v103 = a5;
  uint64_t v12 = sub_10000570C(&qword_1001A5EC8);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v93 = (uint64_t)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_10000570C(&qword_1001A62A8);
  __chkstk_darwin(v87, v15);
  uint64_t v88 = (uint64_t)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v89, v17);
  char v19 = (char *)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_10000570C(&qword_1001A6888);
  __chkstk_darwin(v86, v20);
  uint64_t v92 = (uint64_t *)((char *)&v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v90 = sub_10000570C(&qword_1001A6890);
  __chkstk_darwin(v90, v22);
  uint64_t v94 = (char *)&v84 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000570C(&qword_1001A75C8);
  __chkstk_darwin(v24 - 8, v25);
  long long v27 = (char *)&v84 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_10000570C(&qword_1001A75D0);
  uint64_t v29 = v28 - 8;
  __chkstk_darwin(v28, v30);
  long long v32 = (char *)&v84 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = sub_10000570C(&qword_1001A75D8);
  __chkstk_darwin(v95, v33);
  uint64_t v96 = (char *)&v84 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)long long v27 = static HorizontalAlignment.leading.getter();
  *((void *)v27 + 1) = 0x4030000000000000;
  v27[16] = 0;
  uint64_t v35 = (uint64_t)&v27[*(int *)(sub_10000570C(&qword_1001A75E0) + 44)];
  uint64_t v97 = a1;
  uint64_t v98 = a6;
  uint64_t v100 = a3;
  uint64_t v101 = a2;
  uint64_t v99 = a4;
  sub_10006265C(a1, a2, a3, a4, v103, a6, v35);
  LOBYTE(a1) = static Edge.Set.all.getter();
  sub_10000A428((uint64_t)v27, (uint64_t)v32, &qword_1001A75C8);
  uint64_t v36 = *(int *)(v29 + 44);
  uint64_t v91 = v32;
  uint64_t v37 = &v32[v36];
  *uint64_t v37 = a1;
  *(_OWORD *)(v37 + 8) = 0u;
  *(_OWORD *)(v37 + 24) = 0u;
  v37[40] = 1;
  sub_10000ACE0((uint64_t)v27, &qword_1001A75C8);
  if (qword_1001A4E50 != -1) {
    swift_once();
  }
  uint64_t v38 = qword_1001B74F0;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v40 = v89;
  uint64_t v41 = v19;
  uint64_t v42 = &v19[*(int *)(v89 + 20)];
  uint64_t v43 = enum case for RoundedCornerStyle.continuous(_:);
  unsigned int v85 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v44 = type metadata accessor for RoundedCornerStyle();
  uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v44 - 8) + 104);
  v45(v42, v43, v44);
  __asm { FMOV            V0.2D, #12.0 }
  long long v84 = _Q0;
  *(_OWORD *)uint64_t v41 = _Q0;
  uint64_t v51 = v88;
  sub_1000243EC((uint64_t)v41, v88);
  *(_WORD *)(v51 + *(int *)(v87 + 36)) = 256;
  uint64_t v52 = v92;
  sub_10000A428(v51, (uint64_t)v92 + *(int *)(v86 + 36), &qword_1001A62A8);
  *uint64_t v52 = KeyPath;
  v52[1] = v38;
  swift_retain_n();
  swift_retain();
  sub_10000ACE0(v51, &qword_1001A62A8);
  sub_100024450((uint64_t)v41);
  swift_release();
  swift_release();
  v45(&v41[*(int *)(v40 + 20)], v85, v44);
  *(_OWORD *)uint64_t v41 = v84;
  static Color.black.getter();
  uint64_t v53 = Color.opacity(_:)();
  swift_release();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v54 = v93;
  sub_1000243EC((uint64_t)v41, v93);
  uint64_t v55 = v54 + *(int *)(sub_10000570C(&qword_1001A5ED0) + 36);
  long long v56 = v105;
  *(_OWORD *)uint64_t v55 = v104;
  *(_OWORD *)(v55 + 16) = v56;
  *(void *)(v55 + 32) = v106;
  uint64_t v57 = sub_10000570C(&qword_1001A5ED8);
  *(void *)(v54 + *(int *)(v57 + 52)) = v53;
  *(_WORD *)(v54 + *(int *)(v57 + 56)) = 256;
  uint64_t v58 = static Alignment.center.getter();
  uint64_t v60 = v59;
  uint64_t v61 = (uint64_t *)(v54 + *(int *)(sub_10000570C(&qword_1001A5EE0) + 36));
  uint64_t *v61 = v58;
  v61[1] = v60;
  sub_100024450((uint64_t)v41);
  uint64_t v62 = static Alignment.center.getter();
  uint64_t v64 = v63;
  uint64_t v65 = (uint64_t)v94;
  uint64_t v66 = (uint64_t)&v94[*(int *)(v90 + 36)];
  sub_10000A428(v54, v66, &qword_1001A5EC8);
  uint64_t v67 = (uint64_t *)(v66 + *(int *)(sub_10000570C(&qword_1001A6898) + 36));
  uint64_t *v67 = v62;
  v67[1] = v64;
  sub_10000A428((uint64_t)v52, v65, &qword_1001A6888);
  sub_10000ACE0(v54, &qword_1001A5EC8);
  sub_10000ACE0((uint64_t)v52, &qword_1001A6888);
  uint64_t v68 = static Alignment.center.getter();
  uint64_t v70 = v69;
  uint64_t v71 = (uint64_t)v96;
  uint64_t v72 = (uint64_t)&v96[*(int *)(v95 + 36)];
  sub_10000A428(v65, v72, &qword_1001A6890);
  char v73 = (uint64_t *)(v72 + *(int *)(sub_10000570C(&qword_1001A6880) + 36));
  uint64_t *v73 = v68;
  v73[1] = v70;
  uint64_t v74 = (uint64_t)v91;
  sub_10000A428((uint64_t)v91, v71, &qword_1001A75D0);
  sub_10000ACE0(v65, &qword_1001A6890);
  sub_10000ACE0(v74, &qword_1001A75D0);
  uint64_t v76 = v97;
  uint64_t v75 = v98;
  uint64_t v77 = v101;
  uint64_t v78 = v103;
  uint64_t v79 = sub_100061DA4(v97, v101);
  __chkstk_darwin(v79, v80);
  swift_getKeyPath();
  type metadata accessor for CalendarViewModel();
  swift_getWitnessTable();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v81 = (void *)swift_allocObject();
  v81[2] = v78;
  v81[3] = v75;
  v81[4] = v76;
  v81[5] = v77;
  uint64_t v82 = v99;
  v81[6] = v100;
  v81[7] = v82;
  swift_retain();
  swift_retain();
  sub_10000570C(&qword_1001A75E8);
  sub_1000641B4();
  sub_1000642F4();
  View.sheet<A>(isPresented:onDismiss:content:)();
  swift_release();
  swift_release();
  swift_release();
  return sub_10000ACE0(v71, &qword_1001A75D8);
}

uint64_t sub_10006265C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(void, void, void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v107 = a5;
  uint64_t v108 = a6;
  uint64_t v109 = a4;
  uint64_t v110 = a3;
  uint64_t v106 = a7;
  uint64_t v9 = sub_10000570C(&qword_1001A7458);
  uint64_t v97 = *(void *)(v9 - 8);
  uint64_t v98 = v9;
  uint64_t v11 = __chkstk_darwin(v9, v10);
  uint64_t v96 = (char *)&v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  uint64_t v103 = (char *)&v92 - v14;
  uint64_t v15 = type metadata accessor for Divider();
  uint64_t v94 = *(void *)(v15 - 8);
  uint64_t v95 = v15;
  uint64_t v17 = __chkstk_darwin(v15, v16);
  uint64_t v93 = (char *)&v92 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  uint64_t v102 = (char *)&v92 - v20;
  uint64_t v21 = sub_10000570C(&qword_1001A7610);
  uint64_t v23 = __chkstk_darwin(v21 - 8, v22);
  long long v104 = (char *)&v92 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v25);
  uint64_t v105 = (uint64_t)&v92 - v26;
  uint64_t v27 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27, v29);
  uint64_t v31 = (char *)&v92 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_10000570C(&qword_1001A7618);
  __chkstk_darwin(v32 - 8, v33);
  uint64_t v35 = (char *)&v92 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = sub_10000570C(&qword_1001A7620);
  __chkstk_darwin(v99, v36);
  uint64_t v38 = (char *)&v92 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_10000570C(&qword_1001A7628);
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v100 = v39;
  uint64_t v101 = (void (**)(char *, uint64_t))v40;
  __chkstk_darwin(v39, v41);
  uint64_t v43 = (char *)&v92 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_10000570C(&qword_1001A7630);
  uint64_t v46 = __chkstk_darwin(v44 - 8, v45);
  uint64_t v48 = (void (**)(char *, uint64_t))((char *)&v92 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v46, v49);
  uint64_t v111 = (uint64_t)&v92 - v50;
  *(void *)uint64_t v35 = static HorizontalAlignment.leading.getter();
  *((void *)v35 + 1) = 0x4014000000000000;
  v35[16] = 0;
  uint64_t v51 = (uint64_t)&v35[*(int *)(sub_10000570C(&qword_1001A7638) + 44)];
  uint64_t v92 = a1;
  sub_100062F8C(a2, v51);
  uint64_t v52 = static Alignment.leading.getter();
  sub_1001238D8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v38, 0.0, 1, 0.0, 1, v52, v53);
  sub_10000ACE0((uint64_t)v35, &qword_1001A7618);
  static AccessibilityChildBehavior.ignore.getter();
  unint64_t v54 = sub_100064408();
  uint64_t v55 = v99;
  View.accessibilityElement(children:)();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v27);
  sub_10000ACE0((uint64_t)v38, &qword_1001A7620);
  swift_retain();
  uint64_t v56 = sub_1000B2DDC();
  unint64_t v58 = v57;
  swift_release();
  uint64_t v112 = v56;
  unint64_t v113 = v58;
  sub_100010B2C();
  uint64_t v59 = Text.init<A>(_:)();
  uint64_t v61 = v60;
  LOBYTE(v28) = v62 & 1;
  uint64_t v112 = v55;
  unint64_t v113 = v54;
  swift_getOpaqueTypeConformance2();
  uint64_t v63 = v100;
  View.accessibility(label:)();
  sub_10000FCC4(v59, v61, v28);
  swift_bridgeObjectRelease();
  v101[1](v43, v63);
  uint64_t v101 = v48;
  sub_10000A3C4((uint64_t)v48, v111, &qword_1001A7630);
  swift_retain();
  LOBYTE(v28) = sub_1000B3010();
  swift_release();
  if (v28)
  {
    uint64_t v64 = v102;
    Divider.init()();
    uint64_t v65 = (void *)swift_allocObject();
    uint64_t v66 = v108;
    v65[2] = v107;
    v65[3] = v66;
    v65[4] = v92;
    v65[5] = a2;
    uint64_t v68 = v109;
    uint64_t v67 = v110;
    v65[6] = v110;
    v65[7] = v68;
    __chkstk_darwin(v67, v69);
    swift_retain();
    swift_retain();
    sub_10000570C(&qword_1001A7480);
    sub_10000A780(&qword_1001A7488, &qword_1001A7480);
    uint64_t v70 = v103;
    Button.init(action:label:)();
    uint64_t v72 = v94;
    uint64_t v71 = v95;
    char v73 = *(void (**)(char *, char *, uint64_t))(v94 + 16);
    uint64_t v74 = v93;
    v73(v93, v64, v95);
    uint64_t v76 = v96;
    uint64_t v75 = v97;
    uint64_t v110 = *(void (**)(void, void, void))(v97 + 16);
    uint64_t v77 = v70;
    uint64_t v78 = v98;
    v110(v96, v77, v98);
    uint64_t v79 = (uint64_t)v104;
    v73(v104, v74, v71);
    uint64_t v80 = sub_10000570C(&qword_1001A7660);
    v110(v79 + *(int *)(v80 + 48), v76, v78);
    uint64_t v81 = *(void (**)(char *, uint64_t))(v75 + 8);
    v81(v103, v78);
    uint64_t v82 = *(void (**)(char *, uint64_t))(v72 + 8);
    v82(v102, v71);
    v81(v76, v78);
    v82(v74, v71);
    uint64_t v83 = sub_10000570C(&qword_1001A7650);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v83 - 8) + 56))(v79, 0, 1, v83);
    uint64_t v84 = v105;
    sub_10000A3C4(v79, v105, &qword_1001A7610);
    uint64_t v85 = v79;
  }
  else
  {
    uint64_t v86 = sub_10000570C(&qword_1001A7650);
    uint64_t v84 = v105;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56))(v105, 1, 1, v86);
    uint64_t v85 = (uint64_t)v104;
  }
  uint64_t v87 = v111;
  uint64_t v88 = (uint64_t)v101;
  sub_10000A428(v111, (uint64_t)v101, &qword_1001A7630);
  sub_10000A428(v84, v85, &qword_1001A7610);
  uint64_t v89 = v106;
  sub_10000A428(v88, v106, &qword_1001A7630);
  uint64_t v90 = sub_10000570C(&qword_1001A7658);
  sub_10000A428(v85, v89 + *(int *)(v90 + 48), &qword_1001A7610);
  sub_10000ACE0(v84, &qword_1001A7610);
  sub_10000ACE0(v87, &qword_1001A7630);
  sub_10000ACE0(v85, &qword_1001A7610);
  return sub_10000ACE0(v88, &qword_1001A7630);
}

uint64_t sub_100062F8C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v70 = a2;
  uint64_t v66 = sub_10000570C(&qword_1001A67B8) - 8;
  __chkstk_darwin(v66, v3);
  v63[0] = (char *)v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000570C(&qword_1001A67C0);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (uint64_t)v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000570C(&qword_1001A67C8);
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_10000570C(&qword_1001A7078) - 8;
  __chkstk_darwin(v69, v14);
  uint64_t v64 = (uint64_t)v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_10000570C(&qword_1001A74E8) - 8;
  uint64_t v17 = __chkstk_darwin(v68, v16);
  uint64_t v71 = (uint64_t)v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  uint64_t v67 = (uint64_t)v63 - v20;
  v63[1] = a1;
  swift_retain();
  uint64_t v21 = sub_1000B2A40();
  uint64_t v23 = v22;
  swift_release();
  uint64_t v72 = v21;
  uint64_t v73 = v23;
  unint64_t v65 = sub_100010B2C();
  uint64_t v24 = Text.init<A>(_:)();
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  char v30 = v29 & 1;
  uint64_t v31 = enum case for Text.Case.uppercase(_:);
  uint64_t v32 = type metadata accessor for Text.Case();
  uint64_t v33 = *(void *)(v32 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 104))(v8, v31, v32);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v33 + 56))(v8, 0, 1, v32);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v35 = (uint64_t *)v63[0];
  sub_10000A428(v8, v63[0] + *(int *)(v66 + 36), &qword_1001A67C0);
  *uint64_t v35 = KeyPath;
  sub_10000A428((uint64_t)v35, (uint64_t)&v13[*(int *)(v10 + 44)], &qword_1001A67B8);
  *(void *)uint64_t v13 = v24;
  *((void *)v13 + 1) = v26;
  unsigned char v13[16] = v30;
  *((void *)v13 + 3) = v28;
  sub_10000FCD4(v24, v26, v30);
  swift_bridgeObjectRetain();
  sub_10000ACE0((uint64_t)v35, &qword_1001A67B8);
  sub_10000ACE0(v8, &qword_1001A67C0);
  sub_10000FCC4(v24, v26, v30);
  swift_bridgeObjectRelease();
  uint64_t v36 = static Font.subheadline.getter();
  uint64_t v37 = swift_getKeyPath();
  uint64_t v38 = v64;
  sub_10000A428((uint64_t)v13, v64, &qword_1001A67C8);
  uint64_t v39 = (uint64_t *)(v38 + *(int *)(v69 + 44));
  *uint64_t v39 = v37;
  v39[1] = v36;
  sub_10000ACE0((uint64_t)v13, &qword_1001A67C8);
  uint64_t v40 = v71;
  sub_10000A428(v38, v71, &qword_1001A7078);
  *(void *)(v40 + *(int *)(v68 + 44)) = 0x3FD999999999999ALL;
  sub_10000ACE0(v38, &qword_1001A7078);
  uint64_t v41 = v67;
  sub_10000A3C4(v40, v67, &qword_1001A74E8);
  swift_retain();
  uint64_t v42 = sub_1000B2BC0();
  uint64_t v44 = v43;
  swift_release();
  uint64_t v72 = v42;
  uint64_t v73 = v44;
  uint64_t v45 = Text.init<A>(_:)();
  uint64_t v47 = v46;
  LOBYTE(v38) = v48 & 1;
  static Font.body.getter();
  uint64_t v49 = Text.font(_:)();
  uint64_t v51 = v50;
  LOBYTE(v8) = v52;
  swift_release();
  sub_10000FCC4(v45, v47, v38);
  swift_bridgeObjectRelease();
  static Font.Weight.medium.getter();
  uint64_t v53 = Text.fontWeight(_:)();
  uint64_t v55 = v54;
  uint64_t v57 = v56;
  LOBYTE(v38) = v58 & 1;
  sub_10000FCC4(v49, v51, v8 & 1);
  swift_bridgeObjectRelease();
  uint64_t v59 = v71;
  sub_10000A428(v41, v71, &qword_1001A74E8);
  uint64_t v60 = v70;
  sub_10000A428(v59, v70, &qword_1001A74E8);
  uint64_t v61 = v60 + *(int *)(sub_10000570C(qword_1001A7678) + 48);
  *(void *)uint64_t v61 = v53;
  *(void *)(v61 + 8) = v55;
  *(unsigned char *)(v61 + 16) = v38;
  *(void *)(v61 + 24) = v57;
  sub_10000FCD4(v53, v55, v38);
  swift_bridgeObjectRetain();
  sub_10000ACE0(v41, &qword_1001A74E8);
  sub_10000FCC4(v53, v55, v38);
  swift_bridgeObjectRelease();
  return sub_10000ACE0(v59, &qword_1001A74E8);
}

uint64_t sub_100063524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_10000570C(&qword_1001A95D0);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  type metadata accessor for MainActor();
  swift_retain();
  swift_retain();
  uint64_t v17 = static MainActor.shared.getter();
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = v17;
  v18[3] = &protocol witness table for MainActor;
  v18[4] = a5;
  v18[5] = a6;
  v18[6] = a1;
  v18[7] = a2;
  v18[8] = a3;
  v18[9] = a4;
  sub_100061C1C((uint64_t)v15, (uint64_t)&unk_1001A7670, (uint64_t)v18);
  return swift_release();
}

uint64_t sub_100063670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[3] = a6;
  v7[4] = a7;
  v7[2] = a5;
  type metadata accessor for MainActor();
  v7[5] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  v7[6] = v9;
  v7[7] = v8;
  return _swift_task_switch(sub_100063710, v9, v8);
}

uint64_t sub_100063710()
{
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000637AC;
  return sub_1000B3080();
}

uint64_t sub_1000637AC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 48);
    uint64_t v4 = *(void *)(v2 + 56);
    uint64_t v5 = sub_1000639BC;
  }
  else
  {
    swift_release();
    uint64_t v3 = *(void *)(v2 + 48);
    uint64_t v4 = *(void *)(v2 + 56);
    uint64_t v5 = sub_1000638C8;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_1000638C8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_release();
  if (v1)
  {
    swift_retain();
    uint64_t v2 = swift_retain();
    sub_1000B31D4(v2);
    swift_release();
    swift_release();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10000E4F8();
    swift_retain();
    return EnvironmentObject.error()();
  }
}

uint64_t sub_1000639BC()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

double sub_100063A2C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static VerticalAlignment.center.getter();
  sub_100063B4C((uint64_t)v8);
  *(_OWORD *)&v10[103] = v8[6];
  *(_OWORD *)&v10[87] = v8[5];
  *(_OWORD *)&v10[39] = v8[2];
  *(_OWORD *)&v10[23] = v8[1];
  *(_OWORD *)&v10[119] = v8[7];
  v10[135] = v9;
  *(_OWORD *)&v10[55] = v8[3];
  *(_OWORD *)&v10[71] = v8[4];
  *(_OWORD *)&v10[7] = v8[0];
  long long v3 = *(_OWORD *)&v10[64];
  *(_OWORD *)(a1 + 97) = *(_OWORD *)&v10[80];
  long long v4 = *(_OWORD *)&v10[112];
  *(_OWORD *)(a1 + 113) = *(_OWORD *)&v10[96];
  *(_OWORD *)(a1 + 129) = v4;
  long long v5 = *(_OWORD *)v10;
  *(_OWORD *)(a1 + 33) = *(_OWORD *)&v10[16];
  double result = *(double *)&v10[32];
  long long v7 = *(_OWORD *)&v10[48];
  *(_OWORD *)(a1 + 49) = *(_OWORD *)&v10[32];
  *(_OWORD *)(a1 + 65) = v7;
  *(_OWORD *)(a1 + 81) = v3;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = 0x4022000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 145) = *(void *)&v10[128];
  *(_OWORD *)(a1 + 17) = v5;
  return result;
}

uint64_t sub_100063B4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v25 = Image.init(systemName:)();
  char v24 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  if (qword_1001A4E58 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_1001B74F8;
  uint64_t KeyPath = swift_getKeyPath();
  swift_retain();
  uint64_t v23 = static Alignment.center.getter();
  uint64_t v13 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v14 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  char v20 = v19 & 1;
  uint64_t v21 = swift_getKeyPath();
  *(void *)a1 = v25;
  *(unsigned char *)(a1 + 8) = v24;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v9;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = KeyPath;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v23;
  *(void *)(a1 + 80) = v13;
  *(void *)(a1 + 88) = v14;
  *(void *)(a1 + 96) = v16;
  *(unsigned char *)(a1 + 104) = v20;
  *(void *)(a1 + 112) = v18;
  *(void *)(a1 + 120) = v21;
  *(unsigned char *)(a1 + 128) = 0;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10000FCD4(v14, v16, v20);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10000FCC4(v14, v16, v20);
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100063D84@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1000B34F0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100063DB4()
{
  return sub_1000B35A4();
}

uint64_t sub_100063DDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  swift_retain();
  id v14 = sub_1000B365C();
  swift_release();
  uint64_t v15 = *(void **)(a2 + *(void *)(*(void *)a2 + 112));
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a5;
  v16[3] = a6;
  void v16[4] = a1;
  v16[5] = a2;
  v16[6] = a3;
  v16[7] = a4;
  swift_retain();
  id v17 = v15;
  swift_retain();
  uint64_t v18 = static SafeAreaRegions.all.getter();
  uint64_t result = static Edge.Set.all.getter();
  *(void *)a7 = v14;
  *(void *)(a7 + 8) = v17;
  *(void *)(a7 + 16) = sub_1000643C8;
  *(void *)(a7 + 24) = v16;
  *(void *)(a7 + 32) = v18;
  *(unsigned char *)(a7 + 40) = result;
  return result;
}

uint64_t sub_100063ECC()
{
  swift_getWitnessTable();
  uint64_t v0 = ObservedObject.init(wrappedValue:)();
  type metadata accessor for RemoteViewConfiguration();
  sub_10000E4F8();
  EnvironmentObject.init()();
  return v0;
}

uint64_t destroy for ConditionalFontModifier()
{
  swift_release();

  return swift_release();
}

void *sub_100063FB8(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_100063FF8(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  return a1;
}

uint64_t sub_100064068(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t type metadata accessor for CalendarModule()
{
  return sub_10000B72C();
}

uint64_t sub_1000640D0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100064114@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100061E20(*(void *)v2, *(void *)(v2 + 8), *(void (**)(void, void, void))(v2 + 16), *(void *)(v2 + 24), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t sub_100064130@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1000B34F0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100064160()
{
  return sub_1000B35A4();
}

uint64_t sub_100064188()
{
  return 16;
}

__n128 sub_100064194(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000641A4@<X0>(uint64_t a1@<X8>)
{
  return sub_100063DDC(v1[4], v1[5], v1[6], v1[7], v1[2], v1[3], a1);
}

unint64_t sub_1000641B4()
{
  unint64_t result = qword_1001A75F0;
  if (!qword_1001A75F0)
  {
    sub_100004A58(&qword_1001A75D8);
    sub_100064254();
    sub_10000A780(&qword_1001A68D8, &qword_1001A6880);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A75F0);
  }
  return result;
}

unint64_t sub_100064254()
{
  unint64_t result = qword_1001A75F8;
  if (!qword_1001A75F8)
  {
    sub_100004A58(&qword_1001A75D0);
    sub_10000A780(&qword_1001A7600, &qword_1001A75C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A75F8);
  }
  return result;
}

unint64_t sub_1000642F4()
{
  unint64_t result = qword_1001A7608;
  if (!qword_1001A7608)
  {
    sub_100004A58(&qword_1001A75E8);
    sub_100064370();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7608);
  }
  return result;
}

unint64_t sub_100064370()
{
  unint64_t result = qword_1001AA420;
  if (!qword_1001AA420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA420);
  }
  return result;
}

uint64_t sub_1000643C8()
{
  swift_retain();
  sub_1000B36BC();

  return swift_release();
}

unint64_t sub_100064408()
{
  unint64_t result = qword_1001A7640;
  if (!qword_1001A7640)
  {
    sub_100004A58(&qword_1001A7620);
    sub_10000A780(&qword_1001A7648, &qword_1001A7618);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7640);
  }
  return result;
}

uint64_t sub_1000644AC()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000644EC()
{
  return sub_100063524(v0[4], v0[5], v0[6], v0[7], v0[2], v0[3]);
}

double sub_1000644FC@<D0>(uint64_t a1@<X8>)
{
  return sub_100063A2C(a1);
}

uint64_t sub_100064514()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10006455C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[6];
  uint64_t v7 = v1[7];
  uint64_t v9 = v1[8];
  uint64_t v8 = v1[9];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_100009854;
  return sub_100063670(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_100064658()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000646D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

void sub_1000646E0()
{
  sub_10006531C();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *sub_100064788(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v6;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v7 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = a2[5];
    *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    uint64_t v8 = a2[8];
    uint64_t v9 = *(int *)(a3 + 44);
    __dst = (void *)(a1 + v9);
    uint64_t v10 = (char *)a2 + v9;
    *(void *)(a1 + 56) = a2[7];
    *(void *)(a1 + 64) = v8;
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v15 = *(void *)(v11 - 8);
    uint64_t v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v16(v10, 1, v11))
    {
      uint64_t v12 = sub_10000570C(&qword_1001AD200);
      memcpy(__dst, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v15 + 16))(__dst, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v11);
    }
    *(void *)((char *)v4 + *(int *)(a3 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 48));
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_100064980(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100064A70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 64);
  uint64_t v8 = *(int *)(a3 + 44);
  __dst = (void *)(a1 + v8);
  uint64_t v9 = (const void *)(a2 + v8);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v10 - 8);
  id v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v14(v9, 1, v10))
  {
    uint64_t v11 = sub_10000570C(&qword_1001AD200);
    memcpy(__dst, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(__dst, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v10);
  }
  *(void *)(a1 + *(int *)(a3 + 48)) = *(void *)(a2 + *(int *)(a3 + 48));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100064C14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 44);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_10000570C(&qword_1001AD200);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(void *)(a1 + *(int *)(a3 + 48)) = *(void *)(a2 + *(int *)(a3 + 48));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100064E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v8 = *(int *)(a3 + 44);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_10000570C(&qword_1001AD200);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  *(void *)(a1 + *(int *)(a3 + 48)) = *(void *)(a2 + *(int *)(a3 + 48));
  return a1;
}

uint64_t sub_100064F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 44);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v16 = sub_10000570C(&qword_1001AD200);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  *(void *)(a1 + *(int *)(a3 + 48)) = *(void *)(a2 + *(int *)(a3 + 48));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10006517C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100065190);
}

uint64_t sub_100065190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000570C(&qword_1001AD200);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 44);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100065244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100065258);
}

uint64_t sub_100065258(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000570C(&qword_1001AD200);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 44);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for MusicViewModel()
{
  return sub_10000B72C();
}

void sub_10006531C()
{
  if (!qword_1001A7700)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001A7700);
    }
  }
}

uint64_t sub_100065374@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v2 + *(int *)(a1 + 44);
  if (*(void *)(*(void *)(v2 + *(int *)(a1 + 48)) + 16))
  {
    sub_100066020(v9, (uint64_t)v8);
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) == 1)
    {
      sub_100065FC0((uint64_t)v8);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a2, 1, 1, v10);
    }
    else
    {
      URL.appending(queryItems:)();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(a2, 0, 1, v10);
    }
  }
  else
  {
    return sub_100066020(v9, a2);
  }
}

uint64_t sub_100065500()
{
  return Array.init<A>(_:)();
}

uint64_t sub_1000655CC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 80);
  if (!*(void *)(*(void *)(v2 + *(int *)(a1 + 48)) + 16)) {
    return v10(v9);
  }
  v10(v9);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v8, 1, v11) == 1)
  {
    sub_100065FC0((uint64_t)v8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a2, 1, 1, v11);
  }
  else
  {
    URL.appending(queryItems:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v11);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, v11);
  }
}

uint64_t sub_10006575C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v39 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v41 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v10 = __chkstk_darwin(TupleTypeMetadata2, v9);
  uint64_t v12 = (char *)&v37 - v11;
  uint64_t v47 = *(void *)(v7 - 8);
  uint64_t v14 = __chkstk_darwin(v10, v13);
  uint64_t v44 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  char v19 = (char *)&v37 - v18;
  __chkstk_darwin(v17, v20);
  uint64_t v22 = (char *)&v37 - v21;
  uint64_t v46 = v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v37 - v21, a1, v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v22, 0, 1, v4);
  uint64_t v40 = a2;
  uint64_t v48 = sub_100065500();
  type metadata accessor for Array();
  swift_getWitnessTable();
  BidirectionalCollection.last.getter();
  swift_bridgeObjectRelease();
  uint64_t v42 = TupleTypeMetadata2;
  uint64_t v23 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
  char v24 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
  v24(v12, v22, v7);
  uint64_t v43 = v23;
  v24(v23, v19, v7);
  uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48);
  uint64_t v45 = v12;
  if (v25(v12, 1, v4) != 1)
  {
    uint64_t v38 = v19;
    v24(v44, v45, v7);
    uint64_t v28 = v43;
    if (v25(v43, 1, v4) != 1)
    {
      uint64_t v30 = v46;
      uint64_t v31 = v39;
      (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v39, v28, v4);
      uint64_t v32 = v44;
      char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v34 = *(void (**)(char *, uint64_t))(v30 + 8);
      v34(v31, v4);
      uint64_t v35 = *(void (**)(char *, uint64_t))(v47 + 8);
      v35(v38, v7);
      v35(v22, v7);
      v34(v32, v4);
      v35(v45, v7);
      char v27 = v33 ^ 1;
      return v27 & 1;
    }
    char v29 = *(void (**)(char *, uint64_t))(v47 + 8);
    v29(v38, v7);
    v29(v22, v7);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v44, v4);
    goto LABEL_6;
  }
  uint64_t v26 = *(void (**)(char *, uint64_t))(v47 + 8);
  v26(v19, v7);
  v26(v22, v7);
  if (v25(v43, 1, v4) != 1)
  {
LABEL_6:
    (*(void (**)(char *, uint64_t))(v41 + 8))(v45, v42);
    char v27 = 1;
    return v27 & 1;
  }
  v26(v45, v7);
  char v27 = 0;
  return v27 & 1;
}

void sub_100065C68(uint64_t a1, uint64_t a2, unsigned __int8 a3, void *a4)
{
  sub_10000570C(&qword_1001A5390);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100152B90;
  uint64_t v10 = a4[2];
  uint64_t v9 = a4[3];
  *(void *)(v8 + 56) = &type metadata for AnalyticsString;
  *(void *)(v8 + 64) = &off_1001AAD38;
  *(unsigned char *)(v8 + 32) = 0;
  *(void *)(v8 + 40) = v10;
  *(void *)(v8 + 48) = v9;
  *(void *)(v8 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v8 + 104) = &off_1001AAD10;
  *(unsigned char *)(v8 + 72) = 0;
  *(void *)(v8 + 136) = &type metadata for AnalyticsModuleName;
  *(void *)(v8 + 144) = &off_1001AAD98;
  *(unsigned char *)(v8 + 112) = 9;
  *(void *)(v8 + 176) = &type metadata for AnalyticsModuleAction;
  *(void *)(v8 + 184) = &off_1001AAD70;
  *(void *)(v8 + 152) = a1;
  *(void *)(v8 + 160) = a2;
  *(unsigned char *)(v8 + 168) = a3;
  if (a4[9])
  {
    uint64_t v11 = a4[8];
    unint64_t v12 = a4[9];
  }
  else
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0xE000000000000000;
  }
  char v27 = &type metadata for AnalyticsString;
  uint64_t v28 = (void *(*)())&off_1001AAD38;
  LOBYTE(aBlock) = 1;
  uint64_t v25 = v11;
  uint64_t v26 = (Class (*)(uint64_t))v12;
  swift_bridgeObjectRetain();
  sub_10000751C(a1, a2, a3);
  uint64_t v30 = (char *)v8;
  unint64_t v13 = *(void *)(v8 + 16);
  unint64_t v14 = *(void *)(v8 + 24);
  swift_bridgeObjectRetain();
  if (v13 >= v14 >> 1) {
    uint64_t v30 = sub_1001378BC((char *)(v14 > 1), v13 + 1, 1, (char *)v8);
  }
  uint64_t v15 = sub_100007534((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v15, v15);
  uint64_t v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v17);
  sub_100116BFC(v13, (uint64_t)v17, (uint64_t *)&v30, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_1001AAD38);
  sub_100007584((uint64_t)&aBlock);
  char v19 = v30;
  NSString v20 = String._bridgeToObjectiveC()();
  uint64_t v21 = (void *)swift_allocObject();
  long long v21[2] = 0xD00000000000001ELL;
  v21[3] = 0x800000010015D360;
  v21[4] = v19;
  uint64_t v28 = sub_100007614;
  char v29 = v21;
  aBlock = _NSConcreteStackBlock;
  uint64_t v25 = 1107296256;
  uint64_t v26 = sub_100116B70;
  char v27 = (ValueMetadata *)&unk_100197810;
  uint64_t v22 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v22);
  swift_bridgeObjectRelease();
}

uint64_t sub_100065F68()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100065FA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100065FB8()
{
  return swift_release();
}

uint64_t sub_100065FC0(uint64_t a1)
{
  uint64_t v2 = sub_10000570C(&qword_1001AD200);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100066020(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001AD200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100066088()
{
  return sub_10006CE64(&qword_1001A7708, (void (*)(uint64_t))&type metadata accessor for Artwork);
}

uint64_t sub_1000660D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  uint64_t v4 = sub_10000570C(&qword_1001A57D8);
  v3[11] = v4;
  v3[12] = *(void *)(v4 - 8);
  v3[13] = swift_task_alloc();
  sub_10000570C(&qword_1001A7968);
  v3[14] = swift_task_alloc();
  uint64_t v5 = sub_10000570C(&qword_1001A7970);
  v3[15] = v5;
  v3[16] = *(void *)(v5 - 8);
  v3[17] = swift_task_alloc();
  uint64_t v6 = sub_10000570C(&qword_1001A7978);
  v3[18] = v6;
  v3[19] = *(void *)(v6 - 8);
  v3[20] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for MusicDataRequest.ExecutionMethod();
  v3[21] = v7;
  v3[22] = *(void *)(v7 - 8);
  v3[23] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for MusicAuthorization.Status();
  v3[24] = v8;
  v3[25] = *(void *)(v8 - 8);
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  return _swift_task_switch(sub_100066350, 0, 0);
}

uint64_t sub_100066350()
{
  (*(void (**)(void, void, void))(v0[22] + 104))(v0[23], enum case for MusicDataRequest.ExecutionMethod.firstParty(_:), v0[21]);
  static MusicDataRequest.preferredExecutionMethod.setter();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[28] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100066418;
  uint64_t v2 = v0[27];
  return static MusicAuthorization.request()(v2);
}

uint64_t sub_100066418()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100066514, 0, 0);
}

uint64_t sub_100066514()
{
  (*(void (**)(void, void, void))(v0[25] + 104))(v0[26], enum case for MusicAuthorization.Status.authorized(_:), v0[24]);
  sub_10006CE64(&qword_1001A7980, (void (*)(uint64_t))&type metadata accessor for MusicAuthorization.Status);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[24];
  uint64_t v4 = v0[25];
  if (v0[2] == v0[4] && v0[3] == v0[5])
  {
    swift_bridgeObjectRelease_n();
    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v5(v2, v3);
    v5(v1, v3);
LABEL_5:
    swift_getKeyPath();
    swift_bridgeObjectRetain();
    v0[6] = MusicItemID.init(_:)();
    v0[7] = v8;
    v0[29] = type metadata accessor for Artist();
    sub_10006CE64(&qword_1001A7988, (void (*)(uint64_t))&type metadata accessor for Artist);
    MusicCatalogResourceRequest.init<A>(matching:equalTo:)();
    sub_10000570C(&qword_1001A7990);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_100155FF0;
    sub_10000570C(&qword_1001A7998);
    *(void *)(v9 + 32) = static PartialMusicProperty<A>.topSongs.getter();
    specialized Array._endMutation()();
    MusicCatalogResourceRequest.properties.setter();
    uint64_t v10 = (void *)swift_task_alloc();
    v0[30] = v10;
    void *v10 = v0;
    v10[1] = sub_1000668E0;
    uint64_t v11 = v0[17];
    uint64_t v12 = v0[18];
    return MusicCatalogResourceRequest.response()(v11, v12);
  }
  char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v7(v2, v3);
  v7(v1, v3);
  if (v6) {
    goto LABEL_5;
  }
  uint64_t v13 = v0[8];
  uint64_t v14 = type metadata accessor for AppleMusicFetcher.MusicArtist();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_1000668E0()
{
  *(void *)(*(void *)v1 + 248) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100066C4C;
  }
  else {
    uint64_t v2 = sub_1000669F4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000669F4()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 88);
  MusicCatalogResourceResponse.items.getter();
  sub_100012120(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v1 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v1) == 1)
  {
    uint64_t v8 = *(void *)(v0 + 152);
    uint64_t v7 = *(void *)(v0 + 160);
    uint64_t v9 = *(void *)(v0 + 144);
    uint64_t v10 = *(void *)(v0 + 112);
    (*(void (**)(void, void))(*(void *)(v0 + 128) + 8))(*(void *)(v0 + 136), *(void *)(v0 + 120));
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    sub_10000ACE0(v10, &qword_1001A7968);
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v12 = *(void *)(v0 + 232);
    uint64_t v14 = *(void *)(v0 + 152);
    uint64_t v13 = *(void *)(v0 + 160);
    uint64_t v16 = *(void *)(v0 + 136);
    uint64_t v15 = *(void *)(v0 + 144);
    uint64_t v17 = *(void *)(v0 + 120);
    uint64_t v18 = *(void *)(v0 + 128);
    uint64_t v19 = *(void *)(v0 + 112);
    sub_100068DEC(*(uint64_t **)(v0 + 64));
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v19, v12);
    uint64_t v11 = 0;
  }
  uint64_t v20 = *(void *)(v0 + 64);
  uint64_t v21 = type metadata accessor for AppleMusicFetcher.MusicArtist();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, v11, 1, v21);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

uint64_t sub_100066C4C()
{
  (*(void (**)(void, void))(v0[19] + 8))(v0[20], v0[18]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100066D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[18] = a4;
  v5[19] = a5;
  v5[16] = a2;
  v5[17] = a3;
  v5[15] = a1;
  sub_10000570C(&qword_1001AD200);
  v5[20] = swift_task_alloc();
  sub_10000570C(&qword_1001A77A0);
  v5[21] = swift_task_alloc();
  sub_10000570C(&qword_1001A79E0);
  v5[22] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Song();
  v5[23] = v6;
  v5[24] = *(void *)(v6 - 8);
  v5[25] = swift_task_alloc();
  v5[26] = swift_task_alloc();
  v5[27] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Track();
  v5[28] = v7;
  v5[29] = *(void *)(v7 - 8);
  v5[30] = swift_task_alloc();
  v5[31] = swift_task_alloc();
  v5[32] = swift_task_alloc();
  uint64_t v8 = sub_10000570C(&qword_1001A79E8);
  v5[33] = v8;
  v5[34] = *(void *)(v8 - 8);
  v5[35] = swift_task_alloc();
  v5[36] = sub_10000570C(&qword_1001A79F0);
  v5[37] = swift_task_alloc();
  sub_10000570C(&qword_1001A79F8);
  v5[38] = swift_task_alloc();
  sub_10000570C(&qword_1001A7A00);
  v5[39] = swift_task_alloc();
  uint64_t v9 = sub_10000570C(&qword_1001A57F8);
  v5[40] = v9;
  v5[41] = *(void *)(v9 - 8);
  v5[42] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Playlist();
  v5[43] = v10;
  v5[44] = *(void *)(v10 - 8);
  v5[45] = swift_task_alloc();
  uint64_t v11 = sub_10000570C(&qword_1001A7A08);
  v5[46] = v11;
  v5[47] = *(void *)(v11 - 8);
  v5[48] = swift_task_alloc();
  uint64_t v12 = sub_10000570C(&qword_1001A7A10);
  v5[49] = v12;
  v5[50] = *(void *)(v12 - 8);
  v5[51] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for MusicDataRequest.ExecutionMethod();
  v5[52] = v13;
  v5[53] = *(void *)(v13 - 8);
  v5[54] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for MusicAuthorization.Status();
  v5[55] = v14;
  v5[56] = *(void *)(v14 - 8);
  v5[57] = swift_task_alloc();
  v5[58] = swift_task_alloc();
  return _swift_task_switch(sub_100067244, 0, 0);
}

uint64_t sub_100067244()
{
  (*(void (**)(void, void, void))(v0[53] + 104))(v0[54], enum case for MusicDataRequest.ExecutionMethod.firstParty(_:), v0[52]);
  static MusicDataRequest.preferredExecutionMethod.setter();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[59] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10006730C;
  uint64_t v2 = v0[58];
  return static MusicAuthorization.request()(v2);
}

uint64_t sub_10006730C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100067408, 0, 0);
}

uint64_t sub_100067408()
{
  (*(void (**)(void, void, void))(v0[56] + 104))(v0[57], enum case for MusicAuthorization.Status.authorized(_:), v0[55]);
  sub_10006CE64(&qword_1001A7980, (void (*)(uint64_t))&type metadata accessor for MusicAuthorization.Status);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v2 = v0[57];
  uint64_t v1 = v0[58];
  uint64_t v3 = v0[55];
  uint64_t v4 = v0[56];
  if (v0[10] == v0[6] && v0[11] == v0[7])
  {
    swift_bridgeObjectRelease_n();
    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v5(v2, v3);
    v5(v1, v3);
LABEL_5:
    swift_getKeyPath();
    swift_bridgeObjectRetain();
    v0[8] = MusicItemID.init(_:)();
    v0[9] = v8;
    sub_10006CE64(&qword_1001A7A18, (void (*)(uint64_t))&type metadata accessor for Playlist);
    MusicCatalogResourceRequest.init<A>(matching:equalTo:)();
    sub_10000570C(&qword_1001A7990);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_100155FF0;
    sub_10000570C(&qword_1001A7A20);
    *(void *)(v9 + 32) = static PartialMusicProperty<A>.tracks.getter();
    specialized Array._endMutation()();
    MusicCatalogResourceRequest.properties.setter();
    uint64_t v10 = (void *)swift_task_alloc();
    v0[60] = v10;
    void *v10 = v0;
    v10[1] = sub_100067924;
    uint64_t v11 = v0[48];
    uint64_t v12 = v0[49];
    return MusicCatalogResourceRequest.response()(v11, v12);
  }
  char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v7(v2, v3);
  v7(v1, v3);
  if (v6) {
    goto LABEL_5;
  }
  if (qword_1001A4F38 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100017378(v13, (uint64_t)qword_1001B75B8);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Authorization Error fetching playlist.", v16, 2u);
    swift_slowDealloc();
  }
  uint64_t v17 = v0[15];

  uint64_t v18 = type metadata accessor for AppleMusicSetlist();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_100067924()
{
  *(void *)(*(void *)v1 + 488) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10006849C;
  }
  else {
    uint64_t v2 = sub_100067A38;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100067A38()
{
  uint64_t v103 = v0;
  uint64_t v2 = v0[43];
  uint64_t v1 = v0[44];
  uint64_t v4 = v0[41];
  uint64_t v3 = v0[42];
  uint64_t v6 = v0[39];
  uint64_t v5 = v0[40];
  MusicCatalogResourceResponse.items.getter();
  sub_1000121C8(v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v6, 1, v2) == 1)
  {
    sub_10000ACE0(v0[39], &qword_1001A7A00);
    if (qword_1001A4F38 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100017378(v7, (uint64_t)qword_1001B75B8);
    swift_bridgeObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = v0[50];
    uint64_t v12 = v0[51];
    uint64_t v14 = v0[48];
    uint64_t v13 = v0[49];
    uint64_t v16 = v0[46];
    uint64_t v15 = v0[47];
    unint64_t v17 = v0[17];
    if (v10)
    {
      uint64_t v90 = v0[16];
      uint64_t v100 = v0[49];
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v102 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      swift_bridgeObjectRetain();
      v0[12] = sub_1000FE1F8(v90, v17, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Could not find playlist for id %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v100);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
    }
    uint64_t v22 = v0[15];
    uint64_t v23 = type metadata accessor for AppleMusicSetlist();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
  }
  else
  {
    uint64_t v19 = v0[38];
    uint64_t v21 = v0[33];
    uint64_t v20 = v0[34];
    (*(void (**)(void, void, void))(v0[44] + 32))(v0[45], v0[39], v0[43]);
    Playlist.tracks.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v19, 1, v21) == 1)
    {
      sub_10000ACE0(v0[38], &qword_1001A79F8);
      uint64_t v93 = _swiftEmptyArrayStorage;
    }
    else
    {
      uint64_t v24 = v0[36];
      uint64_t v25 = v0[37];
      uint64_t v87 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[34] + 16);
      v87(v0[35], v0[38], v0[33]);
      sub_10000A780(&qword_1001A7A30, &qword_1001A79E8);
      dispatch thunk of Sequence.makeIterator()();
      uint64_t v98 = (uint64_t *)(v25 + *(int *)(v24 + 36));
      uint64_t v26 = *v98;
      sub_10000A780(&qword_1001A7A38, &qword_1001A79E8);
      dispatch thunk of Collection.endIndex.getter();
      if (v26 == v0[13])
      {
        uint64_t v93 = _swiftEmptyArrayStorage;
      }
      else
      {
        uint64_t v45 = v0[29];
        uint64_t v46 = v0[24];
        uint64_t v85 = (void (**)(uint64_t, uint64_t))(v0[34] + 8);
        uint64_t v86 = (void (**)(uint64_t))(v45 + 16);
        uint64_t v83 = (uint64_t (**)(uint64_t, uint64_t))(v45 + 88);
        uint64_t v84 = (void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32);
        int v82 = enum case for Track.song(_:);
        uint64_t v77 = (void (**)(void, uint64_t))(v45 + 96);
        uint64_t v78 = v46;
        uint64_t v92 = (void (**)(uint64_t, uint64_t, uint64_t))(v46 + 32);
        uint64_t v79 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48);
        uint64_t v80 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56);
        uint64_t v93 = _swiftEmptyArrayStorage;
        uint64_t v81 = (void (**)(void, uint64_t))(v45 + 8);
        do
        {
          uint64_t v49 = v0[37];
          uint64_t v50 = v0[35];
          uint64_t v52 = v0[32];
          uint64_t v51 = v0[33];
          uint64_t v95 = v0[31];
          uint64_t v97 = v0[30];
          uint64_t v53 = v0[28];
          uint64_t v54 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
          uint64_t v55 = *v86;
          (*v86)(v52);
          v54(v0 + 2, 0);
          v87(v50, v49, v51);
          dispatch thunk of Collection.formIndex(after:)();
          (*v85)(v50, v51);
          (*v84)(v95, v52, v53);
          ((void (*)(uint64_t, uint64_t, uint64_t))v55)(v97, v95, v53);
          int v56 = (*v83)(v97, v53);
          uint64_t v57 = v0[30];
          uint64_t v58 = v0[28];
          if (v56 == v82)
          {
            uint64_t v59 = v0[26];
            uint64_t v61 = v0[22];
            uint64_t v60 = v0[23];
            (*v77)(v0[30], v58);
            char v62 = *v92;
            (*v92)(v59, v57, v60);
            v62(v61, v59, v60);
            (*v80)(v61, 0, 1, v60);
            uint64_t v63 = *v81;
          }
          else
          {
            uint64_t v65 = v0[22];
            uint64_t v64 = v0[23];
            uint64_t v63 = *v81;
            (*v81)(v0[30], v58);
            (*v80)(v65, 1, 1, v64);
          }
          uint64_t v66 = v0[22];
          uint64_t v67 = v0[23];
          v63(v0[31], v0[28]);
          if ((*v79)(v66, 1, v67) == 1)
          {
            sub_10000ACE0(v0[22], &qword_1001A79E0);
            uint64_t v47 = v98;
          }
          else
          {
            uint64_t v68 = v0[27];
            uint64_t v69 = v0[25];
            uint64_t v70 = v0[23];
            uint64_t v71 = *v92;
            (*v92)(v68, v0[22], v70);
            v71(v69, v68, v70);
            uint64_t v47 = v98;
            if (swift_isUniquelyReferenced_nonNull_native()) {
              unint64_t v72 = (unint64_t)v93;
            }
            else {
              unint64_t v72 = sub_100137C00(0, v93[2] + 1, 1, (unint64_t)v93);
            }
            unint64_t v74 = *(void *)(v72 + 16);
            unint64_t v73 = *(void *)(v72 + 24);
            if (v74 >= v73 >> 1) {
              unint64_t v72 = sub_100137C00(v73 > 1, v74 + 1, 1, v72);
            }
            uint64_t v75 = v0[25];
            uint64_t v76 = v0[23];
            *(void *)(v72 + 16) = v74 + 1;
            uint64_t v93 = (void *)v72;
            v71(v72+ ((*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80))+ *(void *)(v78 + 72) * v74, v75, v76);
          }
          uint64_t v48 = *v47;
          dispatch thunk of Collection.endIndex.getter();
        }
        while (v48 != v0[13]);
      }
      uint64_t v27 = v0[38];
      uint64_t v28 = v0[33];
      uint64_t v29 = v0[34];
      sub_10000ACE0(v0[37], &qword_1001A79F0);
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
    }
    uint64_t v30 = v0[50];
    uint64_t v94 = v0[49];
    uint64_t v96 = v0[51];
    uint64_t v31 = v0[47];
    uint64_t v32 = v0[45];
    uint64_t v33 = v0[46];
    uint64_t v35 = v0[43];
    uint64_t v34 = v0[44];
    uint64_t v37 = v0[20];
    uint64_t v36 = v0[21];
    uint64_t v91 = v0[19];
    uint64_t v88 = v0[48];
    uint64_t v89 = v0[18];
    uint64_t v38 = (void *)v0[15];
    Playlist.artwork.getter();
    Playlist.url.getter();
    uint64_t v39 = Playlist.standardDescription.getter();
    uint64_t v99 = v40;
    uint64_t v101 = v39;
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v35);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v88, v33);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v96, v94);
    *uint64_t v38 = v89;
    v38[1] = v91;
    v38[2] = v93;
    uint64_t v41 = (int *)type metadata accessor for AppleMusicSetlist();
    sub_10000A3C4(v36, (uint64_t)v38 + v41[6], &qword_1001A77A0);
    sub_10000A3C4(v37, (uint64_t)v38 + v41[7], &qword_1001AD200);
    uint64_t v42 = (void *)((char *)v38 + v41[8]);
    *uint64_t v42 = v101;
    v42[1] = v99;
    (*(void (**)(void *, void, uint64_t, int *))(*((void *)v41 - 1) + 56))(v38, 0, 1, v41);
    swift_bridgeObjectRetain();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v43 = (uint64_t (*)(void))v0[1];
  return v43();
}

uint64_t sub_10006849C()
{
  if (qword_1001A4F38 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100017378(v1, (uint64_t)qword_1001B75B8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[14] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error fetching apple music setlist. Error: %@", v4, 0xCu);
    sub_10000570C(&qword_1001A7A28);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = v0[50];
  uint64_t v7 = v0[51];
  uint64_t v9 = v0[49];
  uint64_t v10 = v0[15];
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  uint64_t v11 = type metadata accessor for AppleMusicSetlist();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

void sub_1000687F4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v29 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v31 = (uint64_t)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Artwork();
  uint64_t v30 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v28 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000570C(&qword_1001A77A0);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(v0 + 32);
  Swift::UInt v17 = *(void *)(v16 + 16);
  Hasher._combine(_:)(v17);
  if (v17)
  {
    uint64_t v26 = v3;
    uint64_t v27 = v2;
    uint64_t v18 = *(void *)(type metadata accessor for Song() - 8);
    uint64_t v19 = v16 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
    uint64_t v20 = *(void *)(v18 + 72);
    sub_10006CE64(&qword_1001A7788, (void (*)(uint64_t))&type metadata accessor for Song);
    swift_bridgeObjectRetain();
    do
    {
      dispatch thunk of Hashable.hash(into:)();
      v19 += v20;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
    uint64_t v3 = v26;
    uint64_t v2 = v27;
  }
  uint64_t v21 = type metadata accessor for AppleMusicFetcher.MusicArtist();
  sub_10000A428(v1 + *(int *)(v21 + 28), (uint64_t)v15, &qword_1001A77A0);
  uint64_t v22 = v30;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v15, 1, v9) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v23 = v28;
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v28, v15, v9);
    Hasher._combine(_:)(1u);
    sub_10006CE64(&qword_1001A7798, (void (*)(uint64_t))&type metadata accessor for Artwork);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v9);
  }
  uint64_t v24 = v31;
  sub_10000A428(v1 + *(int *)(v21 + 32), v31, &qword_1001AD200);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v24, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v25 = v29;
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v29, v24, v2);
    Hasher._combine(_:)(1u);
    sub_10006CE64(&qword_1001A7910, (void (*)(uint64_t))&type metadata accessor for URL);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v25, v2);
  }
}

uint64_t sub_100068CD0()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100068D00()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100068D30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10000A428(v2 + *(int *)(a1 + 28), a2, &qword_1001A77A0);
}

Swift::Int sub_100068D5C()
{
  return Hasher._finalize()();
}

Swift::Int sub_100068DA0()
{
  return Hasher._finalize()();
}

uint64_t sub_100068DDC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100068DEC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000570C(&qword_1001A77A0);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for Song();
  uint64_t v49 = *(void *)(v42 - 8);
  __chkstk_darwin(v42, v8);
  uint64_t v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000570C(&qword_1001A79A0);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = Artist.id.getter();
  uint64_t v17 = v16;
  uint64_t v18 = Artist.name.getter();
  uint64_t v43 = v19;
  Artist.topSongs.getter();
  uint64_t v20 = sub_10000570C(&qword_1001A79A8);
  uint64_t v21 = *(void *)(v20 - 8);
  int v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v14, 1, v20);
  uint64_t v45 = v17;
  uint64_t v46 = v15;
  uint64_t v44 = v18;
  if (v22 == 1)
  {
    sub_10000ACE0((uint64_t)v14, &qword_1001A79A0);
    uint64_t v23 = (unint64_t *)&_swiftEmptyArrayStorage;
LABEL_11:
    uint64_t v32 = v43;
    sub_10000570C(&qword_1001A79B0);
    swift_allocObject();
    MusicAttributeProperty.init(_:)();
    Artist.subscript.getter();
    swift_release();
    uint64_t v33 = type metadata accessor for AppleMusicFetcher.MusicArtist();
    Artist.url.getter();
    uint64_t v34 = v45;
    *a1 = v46;
    a1[1] = v34;
    a1[2] = v44;
    a1[3] = v32;
    a1[4] = (uint64_t)v23;
    return sub_10000A3C4((uint64_t)v7, (uint64_t)a1 + *(int *)(v33 + 28), &qword_1001A77A0);
  }
  uint64_t v38 = v21;
  uint64_t v39 = v7;
  uint64_t v24 = sub_10000A780(&qword_1001A79B8, &qword_1001A79A8);
  uint64_t v25 = dispatch thunk of Collection.count.getter();
  uint64_t v23 = (unint64_t *)&_swiftEmptyArrayStorage;
  uint64_t v40 = v20;
  uint64_t v41 = v14;
  if (!v25)
  {
LABEL_10:
    (*(void (**)(char *, uint64_t))(v38 + 8))(v41, v40);
    uint64_t v7 = v39;
    goto LABEL_11;
  }
  uint64_t v26 = v25;
  uint64_t v51 = (unint64_t *)&_swiftEmptyArrayStorage;
  sub_10006B09C(0, v25 & ~(v25 >> 63), 0);
  uint64_t v23 = v51;
  uint64_t v37 = v24;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if ((v26 & 0x8000000000000000) == 0)
  {
    v35[1] = v2;
    uint64_t v36 = a1;
    uint64_t v47 = v49 + 32;
    uint64_t v48 = (void (**)(char *))(v49 + 16);
    uint64_t v28 = v42;
    do
    {
      uint64_t v29 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      (*v48)(v10);
      v29(v50, 0);
      uint64_t v51 = v23;
      unint64_t v31 = v23[2];
      unint64_t v30 = v23[3];
      if (v31 >= v30 >> 1)
      {
        sub_10006B09C(v30 > 1, v31 + 1, 1);
        uint64_t v23 = v51;
      }
      void v23[2] = v31 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v49 + 32))((unint64_t)v23+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(void *)(v49 + 72) * v31, v10, v28);
      dispatch thunk of Collection.formIndex(after:)();
      --v26;
    }
    while (v26);
    a1 = v36;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000692A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000570C(&qword_1001A7958);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = Song.previewAssets.getter();
  if (!v6) {
    goto LABEL_7;
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 + 16);
  uint64_t v9 = type metadata accessor for PreviewAsset();
  uint64_t v10 = *(void *)(v9 - 8);
  if (v8)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v5, v7 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v5, 0, 1, v9);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v5, 1, 1, v9);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for PreviewAsset();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    sub_10000ACE0((uint64_t)v5, &qword_1001A7958);
LABEL_7:
    uint64_t v11 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
  PreviewAsset.url.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v5, v9);
}

uint64_t sub_1000694BC()
{
  uint64_t v0 = type metadata accessor for ContentRating();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  unint64_t v30 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000570C(&qword_1001A7940);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000570C(&qword_1001A7948);
  uint64_t v11 = __chkstk_darwin(v9 - 8, v10);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v11, v14);
  uint64_t v17 = (char *)&v29 - v16;
  __chkstk_darwin(v15, v18);
  uint64_t v20 = (char *)&v29 - v19;
  Song.contentRating.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v17, enum case for ContentRating.explicit(_:), v0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v1 + 56))(v17, 0, 1, v0);
  uint64_t v21 = (uint64_t)&v8[*(int *)(v5 + 56)];
  sub_10000A428((uint64_t)v20, (uint64_t)v8, &qword_1001A7948);
  sub_10000A428((uint64_t)v17, v21, &qword_1001A7948);
  int v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v22((uint64_t)v8, 1, v0) == 1)
  {
    sub_10000ACE0((uint64_t)v17, &qword_1001A7948);
    sub_10000ACE0((uint64_t)v20, &qword_1001A7948);
    int v23 = v22(v21, 1, v0);
    if (v23 == 1) {
      uint64_t v24 = &qword_1001A7948;
    }
    else {
      uint64_t v24 = &qword_1001A7940;
    }
    if (v23 == 1) {
      char v25 = -1;
    }
    else {
      char v25 = 0;
    }
  }
  else
  {
    sub_10000A428((uint64_t)v8, (uint64_t)v13, &qword_1001A7948);
    if (v22(v21, 1, v0) == 1)
    {
      sub_10000ACE0((uint64_t)v17, &qword_1001A7948);
      sub_10000ACE0((uint64_t)v20, &qword_1001A7948);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v13, v0);
      char v25 = 0;
      uint64_t v24 = &qword_1001A7940;
    }
    else
    {
      uint64_t v26 = v30;
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v30, v21, v0);
      sub_10006CE64(&qword_1001A7950, (void (*)(uint64_t))&type metadata accessor for ContentRating);
      char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v27 = *(void (**)(char *, uint64_t))(v1 + 8);
      v27(v26, v0);
      uint64_t v24 = &qword_1001A7948;
      sub_10000ACE0((uint64_t)v17, &qword_1001A7948);
      sub_10000ACE0((uint64_t)v20, &qword_1001A7948);
      v27(v13, v0);
    }
  }
  sub_10000ACE0((uint64_t)v8, v24);
  return v25 & 1;
}

uint64_t sub_1000698A4()
{
  return Song.duration.getter();
}

uint64_t sub_1000698C8(uint64_t a1)
{
  *(void *)(a1 + 16) = sub_10006CE64(&qword_1001A7788, (void (*)(uint64_t))&type metadata accessor for Song);
  uint64_t result = sub_10006CE64(&qword_1001A7790, (void (*)(uint64_t))&type metadata accessor for Song);
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t sub_100069954(uint64_t a1)
{
  uint64_t result = sub_10006CE64(&qword_1001A7798, (void (*)(uint64_t))&type metadata accessor for Artwork);
  *(void *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for AppleMusicFetcher()
{
  return &type metadata for AppleMusicFetcher;
}

uint64_t *sub_1000699BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = *(int *)(a3 + 28);
    __dst = (char *)a1 + v9;
    uint64_t v10 = (char *)a2 + v9;
    a1[4] = a2[4];
    uint64_t v11 = type metadata accessor for Artwork();
    uint64_t v12 = *(void *)(v11 - 8);
    int v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v22(v10, 1, v11))
    {
      uint64_t v13 = sub_10000570C(&qword_1001A77A0);
      memcpy(__dst, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    uint64_t v15 = *(int *)(a3 + 32);
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for URL();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = sub_10000570C(&qword_1001AD200);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
  }
  return v4;
}

uint64_t sub_100069C68(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for Artwork();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 32);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v8 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v7, 1, v8);
  if (!result)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
    return v10(v7, v8);
  }
  return result;
}

void *sub_100069DF0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  a1[4] = a2[4];
  uint64_t v7 = *(int *)(a3 + 28);
  __dst = (char *)a1 + v7;
  uint64_t v8 = (char *)a2 + v7;
  uint64_t v9 = type metadata accessor for Artwork();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_10000570C(&qword_1001A77A0);
    memcpy(__dst, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(__dst, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
  }
  uint64_t v13 = *(int *)(a3 + 32);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_10000570C(&qword_1001AD200);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

void *sub_10006A040(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Artwork();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000570C(&qword_1001A77A0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 32);
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for URL();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    uint64_t v23 = sub_10000570C(&qword_1001AD200);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  return a1;
}

uint64_t sub_10006A360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Artwork();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_10000570C(&qword_1001A77A0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v13 = *(int *)(a3 + 32);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_10000570C(&qword_1001AD200);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

void *sub_10006A578(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Artwork();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    uint64_t v16 = sub_10000570C(&qword_1001A77A0);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  uint64_t v17 = *(int *)(a3 + 32);
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = type metadata accessor for URL();
  uint64_t v21 = *(void *)(v20 - 8);
  int v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  int v23 = v22(v18, 1, v20);
  int v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 40))(v18, v19, v20);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v20);
    goto LABEL_12;
  }
  if (v24)
  {
LABEL_12:
    uint64_t v25 = sub_10000570C(&qword_1001AD200);
    memcpy(v18, v19, *(void *)(*(void *)(v25 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  return a1;
}

uint64_t sub_10006A870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006A884);
}

uint64_t sub_10006A884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000570C(&qword_1001A77A0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 28);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10000570C(&qword_1001AD200);
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 32);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_10006A9B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006A9CC);
}

uint64_t sub_10006A9CC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_10000570C(&qword_1001A77A0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 28);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10000570C(&qword_1001AD200);
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 32);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for AppleMusicFetcher.MusicArtist()
{
  uint64_t result = qword_1001A7800;
  if (!qword_1001A7800) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10006AB4C()
{
  sub_10006AC68(319, (unint64_t *)&unk_1001A7810, (void (*)(uint64_t))&type metadata accessor for Artwork);
  if (v0 <= 0x3F)
  {
    sub_10006AC68(319, (unint64_t *)&qword_1001A7700, (void (*)(uint64_t))&type metadata accessor for URL);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_10006AC68(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void *sub_10006ACBC()
{
  return &protocol witness table for String;
}

uint64_t sub_10006ACC8()
{
  return sub_10006CE64(&qword_1001A7850, (void (*)(uint64_t))type metadata accessor for AppleMusicFetcher.MusicArtist);
}

uint64_t sub_10006AD10(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10006CE64(&qword_1001A7898, (void (*)(uint64_t))type metadata accessor for AppleMusicFetcher.MusicArtist);
  uint64_t result = sub_10006CE64(&qword_1001A78A0, (void (*)(uint64_t))type metadata accessor for AppleMusicFetcher.MusicArtist);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10006AD94()
{
  return sub_10006CE64(&qword_1001A78A8, (void (*)(uint64_t))&type metadata accessor for Song);
}

uint64_t sub_10006ADDC(uint64_t a1)
{
  uint64_t result = sub_10006CE64(&qword_1001A78E0, (void (*)(uint64_t))type metadata accessor for AppleMusicFetcher.MusicArtist);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10006AE34()
{
  return sub_10006CE64(&qword_1001A78E8, (void (*)(uint64_t))type metadata accessor for AppleMusicFetcher.MusicArtist);
}

uint64_t sub_10006AE7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Song();
  uint64_t v6 = __chkstk_darwin(v4, v5);
  __chkstk_darwin(v6, v7);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12 == *(void *)(a2 + 16))
  {
    if (!v12 || a1 == a2)
    {
      char v25 = 1;
    }
    else
    {
      uint64_t v13 = *(unsigned __int8 *)(v8 + 80);
      uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
      uint64_t v14 = v8 + 16;
      uint64_t v33 = v9;
      uint64_t v34 = v15;
      uint64_t v16 = (v13 + 32) & ~v13;
      uint64_t v17 = *(void *)(v14 + 56);
      uint64_t v35 = v14;
      uint64_t v31 = v17;
      uint64_t v32 = (void (**)(uint64_t, uint64_t))(v14 - 8);
      uint64_t v18 = v12 - 1;
      uint64_t v19 = v9;
      do
      {
        uint64_t v20 = a1;
        uint64_t v21 = v11;
        int v22 = v11;
        int v23 = v34;
        v34((uint64_t)v21, a1 + v16, v4);
        uint64_t v24 = a2;
        v23(v19, a2 + v16, v4);
        uint64_t v11 = v22;
        sub_10006CE64(&qword_1001A7938, (void (*)(uint64_t))&type metadata accessor for Song);
        char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v26 = *v32;
        (*v32)(v19, v4);
        v26((uint64_t)v22, v4);
        BOOL v28 = v18-- != 0;
        if ((v25 & 1) == 0) {
          break;
        }
        v16 += v31;
        a2 = v24;
        a1 = v20;
      }
      while (v28);
    }
  }
  else
  {
    char v25 = 0;
  }
  return v25 & 1;
}

uint64_t sub_10006B09C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10006B57C(a1, a2, a3, (void *)*v3, &qword_1001A79C0, (uint64_t (*)(void))&type metadata accessor for Song);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10006B0D8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10006B118(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10006B0F8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10006B3F0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10006B118(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000570C(qword_1001A6E50);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10006B284(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000570C(&qword_1001A79D0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10006B3F0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000570C(&qword_1001A7A68);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10006B55C(char a1, int64_t a2, char a3, void *a4)
{
  return sub_10006B57C(a1, a2, a3, a4, &qword_1001A79C8, (uint64_t (*)(void))&type metadata accessor for Genre);
}

uint64_t sub_10006B57C(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000570C(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  void v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  int v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

BOOL sub_10006B7C4(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v73 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  uint64_t v67 = &v62[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v70 = sub_10000570C(&qword_1001A7918);
  __chkstk_darwin(v70, v7);
  unint64_t v9 = &v62[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = sub_10000570C(&qword_1001AD200);
  uint64_t v12 = __chkstk_darwin(v10 - 8, v11);
  uint64_t v68 = &v62[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v71 = &v62[-v16];
  __chkstk_darwin(v15, v17);
  unint64_t v72 = &v62[-v18];
  uint64_t v19 = type metadata accessor for Artwork();
  uint64_t v74 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v20);
  uint64_t v69 = &v62[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v22 = sub_10000570C(&qword_1001A7920);
  __chkstk_darwin(v22, v23);
  unint64_t v25 = &v62[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v26 = sub_10000570C(&qword_1001A77A0);
  uint64_t v28 = __chkstk_darwin(v26 - 8, v27);
  uint64_t v30 = &v62[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v32 = __chkstk_darwin(v28, v31);
  uint64_t v34 = &v62[-v33];
  __chkstk_darwin(v32, v35);
  uint64_t v37 = &v62[-v36];
  if (*a1 == *a2 && a1[1] == a2[1]
    || (v38 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v38 & 1) != 0))
  {
    if (a1[2] == a2[2] && a1[3] == a2[3]
      || (v40 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v40 & 1) != 0))
    {
      if (sub_10006AE7C(a1[4], a2[4]))
      {
        uint64_t v65 = v9;
        uint64_t v66 = v4;
        uint64_t v41 = type metadata accessor for AppleMusicFetcher.MusicArtist();
        sub_10000A428((uint64_t)a1 + *(int *)(v41 + 28), (uint64_t)v37, &qword_1001A77A0);
        uint64_t v64 = v41;
        sub_10000A428((uint64_t)a2 + *(int *)(v41 + 28), (uint64_t)v34, &qword_1001A77A0);
        uint64_t v42 = (uint64_t)&v25[*(int *)(v22 + 48)];
        sub_10000A428((uint64_t)v37, (uint64_t)v25, &qword_1001A77A0);
        sub_10000A428((uint64_t)v34, v42, &qword_1001A77A0);
        uint64_t v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
        if (v43((uint64_t)v25, 1, v19) == 1)
        {
          sub_10000ACE0((uint64_t)v34, &qword_1001A77A0);
          sub_10000ACE0((uint64_t)v37, &qword_1001A77A0);
          if (v43(v42, 1, v19) == 1)
          {
            sub_10000ACE0((uint64_t)v25, &qword_1001A77A0);
LABEL_15:
            uint64_t v49 = v64;
            uint64_t v50 = (uint64_t)a1 + *(int *)(v64 + 32);
            uint64_t v51 = v72;
            sub_10000A428(v50, (uint64_t)v72, &qword_1001AD200);
            uint64_t v52 = v71;
            sub_10000A428((uint64_t)a2 + *(int *)(v49 + 32), (uint64_t)v71, &qword_1001AD200);
            uint64_t v53 = (uint64_t)v65;
            uint64_t v54 = (uint64_t)&v65[*(int *)(v70 + 48)];
            sub_10000A428((uint64_t)v51, (uint64_t)v65, &qword_1001AD200);
            sub_10000A428((uint64_t)v52, v54, &qword_1001AD200);
            uint64_t v55 = v73;
            int v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
            uint64_t v57 = v66;
            if (v56(v53, 1, v66) == 1)
            {
              sub_10000ACE0((uint64_t)v52, &qword_1001AD200);
              sub_10000ACE0((uint64_t)v51, &qword_1001AD200);
              if (v56(v54, 1, v57) == 1)
              {
                sub_10000ACE0(v53, &qword_1001AD200);
                return 1;
              }
            }
            else
            {
              uint64_t v58 = v68;
              sub_10000A428(v53, (uint64_t)v68, &qword_1001AD200);
              if (v56(v54, 1, v57) != 1)
              {
                uint64_t v59 = v67;
                (*(void (**)(unsigned char *, uint64_t, uint64_t))(v55 + 32))(v67, v54, v57);
                sub_10006CE64(&qword_1001A7928, (void (*)(uint64_t))&type metadata accessor for URL);
                char v60 = dispatch thunk of static Equatable.== infix(_:_:)();
                uint64_t v61 = *(void (**)(unsigned char *, uint64_t))(v55 + 8);
                v61(v59, v57);
                sub_10000ACE0((uint64_t)v52, &qword_1001AD200);
                sub_10000ACE0((uint64_t)v51, &qword_1001AD200);
                v61(v58, v57);
                sub_10000ACE0(v53, &qword_1001AD200);
                return (v60 & 1) != 0;
              }
              sub_10000ACE0((uint64_t)v52, &qword_1001AD200);
              sub_10000ACE0((uint64_t)v51, &qword_1001AD200);
              (*(void (**)(unsigned char *, uint64_t))(v55 + 8))(v58, v57);
            }
            uint64_t v44 = &qword_1001A7918;
            uint64_t v45 = v53;
            goto LABEL_21;
          }
LABEL_13:
          uint64_t v44 = &qword_1001A7920;
          uint64_t v45 = (uint64_t)v25;
LABEL_21:
          sub_10000ACE0(v45, v44);
          return 0;
        }
        sub_10000A428((uint64_t)v25, (uint64_t)v30, &qword_1001A77A0);
        if (v43(v42, 1, v19) == 1)
        {
          sub_10000ACE0((uint64_t)v34, &qword_1001A77A0);
          sub_10000ACE0((uint64_t)v37, &qword_1001A77A0);
          (*(void (**)(unsigned char *, uint64_t))(v74 + 8))(v30, v19);
          goto LABEL_13;
        }
        uint64_t v46 = v74;
        uint64_t v47 = v69;
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v74 + 32))(v69, v42, v19);
        sub_10006CE64(&qword_1001A7930, (void (*)(uint64_t))&type metadata accessor for Artwork);
        int v63 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v48 = *(void (**)(unsigned char *, uint64_t))(v46 + 8);
        v48(v47, v19);
        sub_10000ACE0((uint64_t)v34, &qword_1001A77A0);
        sub_10000ACE0((uint64_t)v37, &qword_1001A77A0);
        v48(v30, v19);
        sub_10000ACE0((uint64_t)v25, &qword_1001A77A0);
        if (v63) {
          goto LABEL_15;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_10006BFAC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10006CE0C(a1, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of ArtistFilter.id.getter, a2);
}

uint64_t sub_10006BFC8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10006CE0C(a1, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of PlaylistFilter.id.getter, a2);
}

uint64_t sub_10006BFE0(uint64_t a1)
{
  v1[12] = a1;
  v1[13] = sub_10000570C(&qword_1001A79A8);
  v1[14] = swift_task_alloc();
  uint64_t v2 = sub_10000570C(&qword_1001A7A48);
  v1[15] = v2;
  v1[16] = *(void *)(v2 - 8);
  v1[17] = swift_task_alloc();
  uint64_t v3 = sub_10000570C(&qword_1001A7A50);
  v1[18] = v3;
  v1[19] = *(void *)(v3 - 8);
  v1[20] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MusicDataRequest.ExecutionMethod();
  v1[21] = v4;
  v1[22] = *(void *)(v4 - 8);
  v1[23] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MusicAuthorization.Status();
  v1[24] = v5;
  v1[25] = *(void *)(v5 - 8);
  v1[26] = swift_task_alloc();
  v1[27] = swift_task_alloc();
  return _swift_task_switch(sub_10006C200, 0, 0);
}

uint64_t sub_10006C200()
{
  (*(void (**)(void, void, void))(v0[22] + 104))(v0[23], enum case for MusicDataRequest.ExecutionMethod.firstParty(_:), v0[21]);
  static MusicDataRequest.preferredExecutionMethod.setter();
  unint64_t v1 = (void *)swift_task_alloc();
  v0[28] = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_10006C2C8;
  uint64_t v2 = v0[27];
  return static MusicAuthorization.request()(v2);
}

uint64_t sub_10006C2C8()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10006C3C4, 0, 0);
}

uint64_t sub_10006C3C4()
{
  (*(void (**)(void, void, void))(v0[25] + 104))(v0[26], enum case for MusicAuthorization.Status.authorized(_:), v0[24]);
  sub_10006CE64(&qword_1001A7980, (void (*)(uint64_t))&type metadata accessor for MusicAuthorization.Status);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[24];
  uint64_t v4 = v0[25];
  if (v0[7] == v0[9] && v0[8] == v0[10])
  {
    swift_bridgeObjectRelease_n();
    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v5(v2, v3);
    v5(v1, v3);
    goto LABEL_5;
  }
  char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v7(v2, v3);
  v7(v1, v3);
  if (v6)
  {
LABEL_5:
    uint64_t v8 = v0[12];
    swift_getKeyPath();
    uint64_t v9 = *(void *)(v8 + 16);
    if (v9)
    {
      uint64_t v10 = v0[12] + 32;
      swift_bridgeObjectRetain();
      uint64_t v11 = (char *)_swiftEmptyArrayStorage;
      do
      {
        sub_10000AD3C(v10, (uint64_t)(v0 + 2));
        uint64_t v13 = v0[5];
        uint64_t v14 = v0[6];
        sub_10000AC9C(v0 + 2, v13);
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 24))(v13, v14);
        uint64_t v17 = v16;
        sub_100007584((uint64_t)(v0 + 2));
        if (v17)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v11 = sub_1001379E0(0, *((void *)v11 + 2) + 1, 1, v11);
          }
          unint64_t v19 = *((void *)v11 + 2);
          unint64_t v18 = *((void *)v11 + 3);
          if (v19 >= v18 >> 1) {
            uint64_t v11 = sub_1001379E0((char *)(v18 > 1), v19 + 1, 1, v11);
          }
          *((void *)v11 + 2) = v19 + 1;
          uint64_t v12 = &v11[16 * v19];
          *((void *)v12 + 4) = v15;
          *((void *)v12 + 5) = v17;
        }
        v10 += 40;
        --v9;
      }
      while (v9);
      swift_bridgeObjectRelease();
      int64_t v20 = *((void *)v11 + 2);
      if (!v20) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v11 = (char *)_swiftEmptyArrayStorage;
      int64_t v20 = _swiftEmptyArrayStorage[2];
      if (!v20)
      {
LABEL_21:
        swift_bridgeObjectRelease();
        type metadata accessor for Song();
        sub_10006CE64(&qword_1001A7A58, (void (*)(uint64_t))&type metadata accessor for Song);
        MusicCatalogResourceRequest.init<A>(matching:memberOf:)();
        uint64_t v28 = (void *)swift_task_alloc();
        v0[29] = v28;
        *uint64_t v28 = v0;
        v28[1] = sub_10006C934;
        uint64_t v29 = v0[17];
        uint64_t v30 = v0[18];
        return MusicCatalogResourceRequest.response()(v29, v30);
      }
    }
    sub_10006B0F8(0, v20, 0);
    uint64_t v21 = v11 + 40;
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = MusicItemID.init(_:)();
      uint64_t v24 = v23;
      unint64_t v26 = _swiftEmptyArrayStorage[2];
      unint64_t v25 = _swiftEmptyArrayStorage[3];
      if (v26 >= v25 >> 1) {
        sub_10006B0F8(v25 > 1, v26 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v26 + 1;
      uint64_t v27 = (char *)&_swiftEmptyArrayStorage[2 * v26];
      *((void *)v27 + 4) = v22;
      *((void *)v27 + 5) = v24;
      v21 += 16;
      --v20;
    }
    while (v20);
    goto LABEL_21;
  }
  if (qword_1001A4F38 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  sub_100017378(v31, (uint64_t)qword_1001B75B8);
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Authorization Error fetching songs.", v34, 2u);
    swift_slowDealloc();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v35 = (uint64_t (*)(void *))v0[1];
  return v35(_swiftEmptyArrayStorage);
}

uint64_t sub_10006C934()
{
  *(void *)(*(void *)v1 + 240) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10006CB90;
  }
  else {
    uint64_t v2 = sub_10006CA48;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10006CA48()
{
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v4 = v0[17];
  uint64_t v3 = v0[18];
  uint64_t v5 = v0[15];
  uint64_t v6 = v0[16];
  MusicCatalogResourceResponse.items.getter();
  sub_10000A780(&qword_1001A7A60, &qword_1001A79A8);
  uint64_t v7 = dispatch thunk of Sequence._copyToContiguousArray()();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
  return v8(v7);
}

uint64_t sub_10006CB90()
{
  if (qword_1001A4F38 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100017378(v1, (uint64_t)qword_1001B75B8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[11] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error fetching songs for setlists. Error: %@", v4, 0xCu);
    sub_10000570C(&qword_1001A7A28);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = v0[19];
  uint64_t v7 = v0[20];
  uint64_t v9 = v0[18];

  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void *))v0[1];
  return v10(&_swiftEmptyArrayStorage);
}

uint64_t sub_10006CDF4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10006CE0C(a1, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of SongFilter.id.getter, a2);
}

uint64_t sub_10006CE0C@<X0>(void *a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_10000AC9C(a1, v5);
  uint64_t result = a2(v5, v6);
  *a3 = result;
  a3[1] = v8;
  return result;
}

uint64_t sub_10006CE64(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10006CEB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RemoteViewConfiguration.Service(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for RemoteViewConfiguration.Service(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for TourPhotosDefaultView(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TourPhotosDefaultView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TourPhotosDefaultView()
{
  return &type metadata for TourPhotosDefaultView;
}

uint64_t sub_10006D040()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006D05C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = static Alignment.bottom.getter();
  uint64_t v48 = v5;
  uint64_t v49 = v4;
  sub_10006D2B8((uint64_t)&v51);
  uint64_t v6 = v53;
  uint64_t v7 = v54;
  char v8 = v56;
  uint64_t v46 = v57;
  uint64_t v47 = v55;
  char v9 = v58;
  uint64_t v44 = v60;
  uint64_t v45 = v59;
  long long v42 = v51;
  long long v43 = v52;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  char v10 = BYTE8(v51);
  uint64_t v37 = v52;
  uint64_t v38 = v51;
  char v11 = BYTE8(v52);
  uint64_t v35 = v54;
  uint64_t v36 = v53;
  uint64_t v12 = static Alignment.center.getter();
  uint64_t v40 = v13;
  uint64_t v41 = v12;
  swift_bridgeObjectRetain();
  uint64_t v14 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v33 = v15;
  uint64_t v34 = v14;
  char v17 = v16;
  uint64_t v32 = v18;
  uint64_t v19 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v21 = v20;
  char v23 = v22;
  uint64_t v25 = v24;
  char v31 = static Edge.Set.bottom.getter();
  uint64_t result = EdgeInsets.init(_all:)();
  *(void *)a3 = v49;
  *(void *)(a3 + 8) = v48;
  *(_OWORD *)(a3 + 16) = v42;
  *(_OWORD *)(a3 + 32) = v43;
  *(void *)(a3 + 48) = v6;
  *(void *)(a3 + 56) = v7;
  *(void *)(a3 + 64) = v47;
  *(unsigned char *)(a3 + 72) = v8;
  *(void *)(a3 + 80) = v46;
  *(unsigned char *)(a3 + 88) = v9;
  *(void *)(a3 + 96) = v45;
  *(void *)(a3 + 104) = v44;
  *(void *)(a3 + 112) = v38;
  *(unsigned char *)(a3 + 120) = v10;
  *(void *)(a3 + 128) = v37;
  *(unsigned char *)(a3 + 136) = v11;
  *(void *)(a3 + 144) = v36;
  *(void *)(a3 + 152) = v35;
  *(void *)(a3 + 160) = v34;
  *(void *)(a3 + 168) = v33;
  *(unsigned char *)(a3 + 176) = v17 & 1;
  *(void *)(a3 + 184) = v32;
  *(void *)(a3 + 192) = v19;
  *(void *)(a3 + 200) = v21;
  *(unsigned char *)(a3 + 208) = v23 & 1;
  *(void *)(a3 + 216) = v25;
  *(void *)(a3 + 224) = a1;
  *(void *)(a3 + 232) = a2;
  *(void *)(a3 + 240) = v41;
  *(void *)(a3 + 248) = v40;
  *(unsigned char *)(a3 + 256) = v31;
  *(void *)(a3 + 264) = v27;
  *(void *)(a3 + 272) = v28;
  *(void *)(a3 + 280) = v29;
  *(void *)(a3 + 288) = v30;
  *(unsigned char *)(a3 + 296) = 0;
  return result;
}

double sub_10006D2B8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Color.RGBColorSpace();
  __chkstk_darwin(v2, v3);
  (*(void (**)(char *, void))(v5 + 104))((char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for Color.RGBColorSpace.sRGB(_:));
  uint64_t v6 = Color.init(_:red:green:blue:opacity:)();
  sub_10000570C(&qword_1001A6050);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_100152B80;
  *(void *)(v7 + 32) = static Color.clear.getter();
  static Color.white.getter();
  uint64_t v8 = Color.opacity(_:)();
  swift_release();
  *(void *)(v7 + 40) = v8;
  uint64_t v22 = v7;
  specialized Array._endMutation()();
  static UnitPoint.top.getter();
  static UnitPoint.bottom.getter();
  Gradient.init(colors:)();
  LinearGradient.init(gradient:startPoint:endPoint:)();
  uint64_t v9 = v18;
  long long v17 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v12 = v22;
  char v13 = v23;
  uint64_t v14 = v24;
  char v15 = v25;
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v9;
  *(_OWORD *)(a1 + 16) = v17;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = v12;
  *(unsigned char *)(a1 + 56) = v13;
  *(void *)(a1 + 64) = v14;
  *(unsigned char *)(a1 + 72) = v15;
  double result = *(double *)&v26;
  *(_OWORD *)(a1 + 80) = v26;
  return result;
}

uint64_t sub_10006D4D0@<X0>(uint64_t a1@<X8>)
{
  return sub_10006D05C(*v1, v1[1], a1);
}

unint64_t sub_10006D4E0()
{
  unint64_t result = qword_1001A7A70;
  if (!qword_1001A7A70)
  {
    sub_100004A58(&qword_1001A7A78);
    sub_10006D55C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7A70);
  }
  return result;
}

unint64_t sub_10006D55C()
{
  unint64_t result = qword_1001A7A80;
  if (!qword_1001A7A80)
  {
    sub_100004A58(&qword_1001A7A88);
    sub_10006D5FC();
    sub_10000A780(&qword_1001A7AB0, qword_1001A7AB8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7A80);
  }
  return result;
}

unint64_t sub_10006D5FC()
{
  unint64_t result = qword_1001A7A90;
  if (!qword_1001A7A90)
  {
    sub_100004A58(&qword_1001A7A98);
    sub_10000A780(&qword_1001A7AA0, &qword_1001A7AA8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7A90);
  }
  return result;
}

uint64_t sub_10006D69C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 56);
}

void sub_10006D6A4()
{
  sub_10006E070();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_10006D758(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *(void *)a1 = *a2;
    a1 = v16 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    char v9 = *((unsigned char *)a2 + 16);
    sub_1000126FC();
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    uint64_t v10 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v10;
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    uint64_t v11 = a2[6];
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
    uint64_t v12 = *(int *)(a3 + 60);
    char v13 = (void *)(a1 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    *(void *)(a1 + 48) = v11;
    swift_retain();
    swift_retain();
    sub_10000570C(&qword_1001A5460);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    }
    else
    {
      *char v13 = *v14;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = *(int *)(a3 + 64);
    uint64_t v18 = (void *)(a1 + v17);
    long long v19 = (uint64_t *)((char *)a2 + v17);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    *uint64_t v18 = v20;
    v18[1] = v21;
  }
  swift_retain();
  return a1;
}

uint64_t sub_10006D8D4(uint64_t a1, uint64_t a2)
{
  sub_10001274C();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 60);
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }

  return swift_release();
}

uint64_t sub_10006D9A4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_1000126FC();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  uint64_t v9 = a2[4];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = v9;
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  uint64_t v10 = a2[6];
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  uint64_t v11 = *(int *)(a3 + 60);
  uint64_t v12 = (void *)(a1 + v11);
  char v13 = (uint64_t *)((char *)a2 + v11);
  *(void *)(a1 + 48) = v10;
  swift_retain();
  swift_retain();
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = type metadata accessor for DismissAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  else
  {
    *uint64_t v12 = *v13;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v15 = *(int *)(a3 + 64);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (uint64_t *)((char *)a2 + v15);
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  *uint64_t v16 = v18;
  v16[1] = v19;
  swift_retain();
  return a1;
}

uint64_t sub_10006DAD4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_1000126FC();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  sub_10001274C();
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = a2[4];
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(void *)(a1 + 48) = a2[6];
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v9 = *(int *)(a3 + 60);
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    sub_10000ACE0(a1 + v9, &qword_1001A5460);
    sub_10000570C(&qword_1001A5460);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      void *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v13 = *(int *)(a3 + 64);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = (uint64_t)a2 + v13;
  *(void *)(a1 + v13) = *(uint64_t *)((char *)a2 + v13);
  swift_retain();
  swift_release();
  *(void *)(v14 + 8) = *(void *)(v15 + 8);
  return a1;
}

uint64_t sub_10006DC58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v6 = *(int *)(a3 + 60);
  uint64_t v7 = (void *)(a1 + v6);
  char v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for DismissAction();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  *(_OWORD *)(a1 + *(int *)(a3 + 64)) = *(_OWORD *)(a2 + *(int *)(a3 + 64));
  return a1;
}

uint64_t sub_10006DD68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  sub_10001274C();
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  if (a1 != a2)
  {
    uint64_t v8 = *(int *)(a3 + 60);
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (const void *)(a2 + v8);
    sub_10000ACE0(a1 + v8, &qword_1001A5460);
    uint64_t v11 = sub_10000570C(&qword_1001A5460);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for DismissAction();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
  }
  uint64_t v13 = *(int *)(a3 + 64);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = (void *)(a2 + v13);
  *(void *)(a1 + v13) = *v15;
  swift_release();
  *(void *)(v14 + 8) = v15[1];
  return a1;
}

uint64_t sub_10006DED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006DEE4);
}

uint64_t sub_10006DEE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000570C(&qword_1001A55E0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 60);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10006DF98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006DFAC);
}

uint64_t sub_10006DFAC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 32) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000570C(&qword_1001A55E0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 60);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for VenueEventView()
{
  return swift_getGenericMetadata();
}

void sub_10006E070()
{
  if (!qword_1001A5670)
  {
    type metadata accessor for DismissAction();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001A5670);
    }
  }
}

uint64_t sub_10006E0C8()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_10006E10C(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_10006E11C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  __chkstk_darwin(a1, v1);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v6 = *(unsigned char *)(*(void *)(v1 + 32) + 16);
  (*(void (**)(char *))(v3 + 16))(v5);
  if (v6)
  {
    char v7 = 1;
  }
  else
  {
    sub_10006E244(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    BOOL v8 = sub_100077B38();
    swift_release();
    char v7 = !v8;
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, a1);
  return v7 & 1;
}

uint64_t sub_10006E244(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *v2;
  uint64_t v5 = v2[1];
  uint64_t v6 = *((unsigned __int8 *)v2 + 16);
  uint64_t v7 = type metadata accessor for VenueEventViewModel();
  uint64_t WitnessTable = swift_getWitnessTable();
  return a2(v4, v5, v6, v7, WitnessTable);
}

uint64_t sub_10006E2D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v217 = a2;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 24);
  type metadata accessor for Optional();
  uint64_t v4 = type metadata accessor for Binding();
  uint64_t v215 = *(void *)(v4 - 8);
  uint64_t v216 = v4;
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v214 = (char *)&v179 - v7;
  uint64_t v235 = a1;
  uint64_t v238 = *(void *)(a1 - 8);
  uint64_t v232 = *(void *)(v238 + 64);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v228 = (char *)&v179 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v11);
  uint64_t v236 = (char *)&v179 - v12;
  uint64_t v13 = type metadata accessor for CoordinateSpace();
  uint64_t v233 = *(void *)(v13 - 8);
  uint64_t v234 = (void (*)(char *, uint64_t, uint64_t))v13;
  __chkstk_darwin(v13, v14);
  uint64_t v231 = (uint64_t)&v179 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v240 = type metadata accessor for NavigationPath();
  sub_100004A58(&qword_1001A7B40);
  sub_100004A58(&qword_1001A7B48);
  uint64_t v16 = type metadata accessor for Array();
  v242 = *(void **)(a1 + 40);
  uint64_t v219 = v242[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v18 = sub_100004A58(&qword_1001A7B50);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v20 = v2;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v262 = v16;
  v263 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))AssociatedTypeWitness;
  uint64_t v264 = v18;
  v265 = (void *)WitnessTable;
  uint64_t v266 = AssociatedConformanceWitness;
  type metadata accessor for ForEach();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  type metadata accessor for ModifiedContent();
  type metadata accessor for Section();
  uint64_t v22 = sub_1000759D8(&qword_1001A7B58, &qword_1001A7B40, (void (*)(void))sub_1000759A8);
  uint64_t v23 = sub_1000759D8(&qword_1001A7B78, &qword_1001A7B48, (void (*)(void))sub_100075AA8);
  unint64_t v280 = sub_100075AFC();
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v278 = v23;
  uint64_t v279 = v24;
  uint64_t v277 = swift_getWitnessTable();
  uint64_t v275 = swift_getWitnessTable();
  v276 = &protocol witness table for _PaddingLayout;
  uint64_t v25 = swift_getWitnessTable();
  uint64_t v272 = v22;
  uint64_t v273 = v25;
  v274 = &protocol witness table for EmptyView;
  swift_getWitnessTable();
  type metadata accessor for LazyVGrid();
  swift_getWitnessTable();
  uint64_t v26 = type metadata accessor for ObservableScrollView();
  uint64_t v27 = swift_getWitnessTable();
  uint64_t v262 = v26;
  v263 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v27;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v262 = v26;
  v263 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v27;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v262 = OpaqueTypeMetadata2;
  v263 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))OpaqueTypeConformance2;
  uint64_t v30 = swift_getOpaqueTypeMetadata2();
  uint64_t v31 = sub_100004A58(&qword_1001A7BA8);
  uint64_t v262 = OpaqueTypeMetadata2;
  v263 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))OpaqueTypeConformance2;
  uint64_t v32 = swift_getOpaqueTypeConformance2();
  uint64_t v33 = sub_100004A58(&qword_1001A7BB0);
  uint64_t v34 = sub_10000A780(&qword_1001A7BB8, &qword_1001A7BB0);
  uint64_t v262 = v33;
  v263 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v34;
  uint64_t v35 = swift_getOpaqueTypeConformance2();
  uint64_t v262 = v30;
  v263 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v31;
  uint64_t v264 = v32;
  v265 = (void *)v35;
  uint64_t v229 = swift_getOpaqueTypeMetadata2();
  uint64_t v262 = v30;
  v263 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v31;
  uint64_t v264 = v32;
  v265 = (void *)v35;
  uint64_t v186 = swift_getOpaqueTypeConformance2();
  uint64_t v36 = type metadata accessor for NavigationStack();
  uint64_t v230 = *(void *)(v36 - 8);
  __chkstk_darwin(v36, v37);
  uint64_t v184 = (char *)&v179 - v38;
  sub_100004A58(&qword_1001A7BC0);
  uint64_t v181 = v36;
  uint64_t v39 = type metadata accessor for ModifiedContent();
  uint64_t v191 = *(void *)(v39 - 8);
  __chkstk_darwin(v39, v40);
  uint64_t v218 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v179 - v41);
  sub_100004A58(&qword_1001A7BC8);
  uint64_t v185 = v39;
  uint64_t v42 = type metadata accessor for ModifiedContent();
  uint64_t v197 = *(void *)(v42 - 8);
  __chkstk_darwin(v42, v43);
  uint64_t v220 = (char *)&v179 - v44;
  uint64_t v45 = type metadata accessor for EventView();
  uint64_t v46 = swift_getWitnessTable();
  uint64_t v180 = v46;
  uint64_t v47 = sub_10000A780(&qword_1001A7BD0, &qword_1001A7BC0);
  uint64_t v270 = v46;
  uint64_t v271 = v47;
  v213 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v48 = swift_getWitnessTable();
  uint64_t v183 = v48;
  uint64_t v49 = sub_10000A780(&qword_1001A7BD8, &qword_1001A7BC8);
  uint64_t v268 = v48;
  uint64_t v269 = v49;
  uint64_t v50 = swift_getWitnessTable();
  uint64_t v51 = v45;
  uint64_t v52 = swift_getWitnessTable();
  uint64_t v262 = v42;
  v263 = v20;
  uint64_t v189 = v50;
  uint64_t v190 = v42;
  uint64_t v53 = v20;
  uint64_t v264 = v51;
  v265 = (void *)v50;
  uint64_t v187 = v51;
  uint64_t v188 = v52;
  uint64_t v54 = v219;
  uint64_t v266 = v219;
  uint64_t v267 = v52;
  uint64_t v222 = swift_getOpaqueTypeMetadata2();
  uint64_t v198 = *(void *)(v222 - 8);
  __chkstk_darwin(v222, v55);
  uint64_t v224 = (char *)&v179 - v56;
  uint64_t v57 = type metadata accessor for FilterView();
  uint64_t v262 = v42;
  v263 = v53;
  uint64_t v264 = v51;
  v265 = (void *)v50;
  uint64_t v266 = v54;
  uint64_t v267 = v52;
  uint64_t v58 = swift_getOpaqueTypeConformance2();
  uint64_t v59 = swift_getWitnessTable();
  uint64_t v60 = v222;
  uint64_t v262 = v222;
  v263 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v57;
  uint64_t v192 = v57;
  uint64_t v193 = v59;
  uint64_t v264 = v58;
  v265 = (void *)v59;
  uint64_t v194 = v58;
  uint64_t v61 = (void *)v59;
  uint64_t v62 = swift_getOpaqueTypeMetadata2();
  uint64_t v200 = *(void *)(v62 - 8);
  __chkstk_darwin(v62, v63);
  uint64_t v221 = (char *)&v179 - v64;
  uint64_t v262 = v60;
  v263 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v57;
  uint64_t v264 = v58;
  v265 = v61;
  uint64_t v65 = swift_getOpaqueTypeConformance2();
  uint64_t v66 = v62;
  uint64_t v195 = v62;
  uint64_t v262 = v62;
  v263 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&type metadata for String;
  uint64_t v264 = v65;
  v265 = &protocol witness table for String;
  uint64_t v67 = v65;
  uint64_t v196 = v65;
  uint64_t v68 = swift_getOpaqueTypeMetadata2();
  uint64_t v199 = v68;
  uint64_t v202 = *(void *)(v68 - 8);
  __chkstk_darwin(v68, v69);
  uint64_t v223 = (char *)&v179 - v70;
  uint64_t v262 = v66;
  v263 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&type metadata for String;
  uint64_t v264 = v67;
  v265 = &protocol witness table for String;
  uint64_t v226 = swift_getOpaqueTypeConformance2();
  uint64_t v262 = v68;
  v263 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&type metadata for Bool;
  uint64_t v264 = v226;
  v265 = &protocol witness table for Bool;
  v203 = &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>;
  uint64_t v201 = swift_getOpaqueTypeMetadata2();
  uint64_t v204 = *(void *)(v201 - 8);
  __chkstk_darwin(v201, v201);
  uint64_t v225 = (char *)&v179 - v71;
  uint64_t v72 = type metadata accessor for ModifiedContent();
  uint64_t v73 = *(void *)(v72 - 8);
  uint64_t v205 = v72;
  uint64_t v206 = v73;
  __chkstk_darwin(v72, v72);
  uint64_t v227 = (char *)&v179 - v74;
  uint64_t v75 = type metadata accessor for ModifiedContent();
  uint64_t v209 = *(void *)(v75 - 8);
  __chkstk_darwin(v75, v76);
  uint64_t v182 = (char *)&v179 - v77;
  type metadata accessor for AccessibilityAttachmentModifier();
  uint64_t v210 = v75;
  uint64_t v78 = type metadata accessor for ModifiedContent();
  uint64_t v211 = *(void *)(v78 - 8);
  uint64_t v212 = v78;
  uint64_t v80 = __chkstk_darwin(v78, v79);
  uint64_t v207 = (char *)&v179 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v80, v82);
  uint64_t v208 = (char *)&v179 - v83;
  uint64_t v240 = *(void *)(v235 + 16);
  uint64_t v251 = v240;
  v252 = v53;
  uint64_t v239 = *(void *)(v235 + 32);
  uint64_t v84 = v235;
  uint64_t v253 = v239;
  uint64_t v85 = v241;
  v254 = v242;
  uint64_t v255 = v241;
  uint64_t v86 = v184;
  NavigationStack.init<>(root:)();
  unint64_t v87 = sub_100075CB8();
  uint64_t v88 = v231;
  uint64_t v90 = v180;
  uint64_t v89 = v181;
  uint64_t v186 = v87;
  sub_100125564(v231);
  sub_1000B0F88((uint64_t)&type metadata for NavigationBarWidthPreferenceKey, v88, (uint64_t)sub_100074E78, 0, v89, v90, (uint64_t)v218);
  (*(void (**)(uint64_t, void (*)(char *, uint64_t, uint64_t)))(v233 + 8))(v88, v234);
  (*(void (**)(char *, uint64_t))(v230 + 8))(v86, v89);
  uint64_t v91 = v238;
  uint64_t v92 = *(void (**)(char *, uint64_t, uint64_t))(v238 + 16);
  uint64_t v233 = v238 + 16;
  uint64_t v234 = v92;
  uint64_t v93 = v236;
  uint64_t v94 = v84;
  v92(v236, v85, v84);
  uint64_t v95 = *(unsigned __int8 *)(v91 + 80);
  uint64_t v96 = (v95 + 48) & ~v95;
  uint64_t v229 = v96;
  uint64_t v231 = v95 | 7;
  v232 += v96;
  uint64_t v97 = (void *)swift_allocObject();
  uint64_t v99 = v239;
  uint64_t v98 = v240;
  v97[2] = v240;
  v97[3] = v53;
  uint64_t v100 = v242;
  v97[4] = v99;
  v97[5] = v100;
  uint64_t v230 = *(void *)(v91 + 32);
  uint64_t v238 = v91 + 32;
  uint64_t v101 = v93;
  uint64_t v102 = v94;
  ((void (*)(char *, char *, uint64_t))v230)((char *)v97 + v96, v101, v94);
  sub_100076078(&qword_1001A7BE8, type metadata accessor for CGSize);
  uint64_t v103 = v185;
  uint64_t v104 = v218;
  View.onPreferenceChange<A>(_:perform:)();
  swift_release();
  (*(void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(v191 + 8))(v104, v103);
  uint64_t v218 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter;
  sub_10006E244(v102, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  uint64_t v247 = v98;
  v248 = v53;
  uint64_t v105 = v99;
  uint64_t v249 = v99;
  v250 = v100;
  swift_getKeyPath();
  uint64_t v262 = v98;
  v263 = v53;
  uint64_t v106 = v98;
  uint64_t v264 = v105;
  v265 = v100;
  type metadata accessor for VenueEventViewModel();
  uint64_t v191 = swift_getWitnessTable();
  uint64_t v107 = v214;
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v108 = (void *)swift_allocObject();
  v108[2] = v98;
  v108[3] = v53;
  v108[4] = v105;
  v108[5] = v100;
  uint64_t v109 = v105;
  swift_checkMetadataState();
  uint64_t v110 = v190;
  uint64_t v237 = v53;
  uint64_t v111 = v220;
  View.sheet<A, B>(item:onDismiss:content:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v215 + 8))(v107, v216);
  (*(void (**)(char *, uint64_t))(v197 + 8))(v111, v110);
  uint64_t v112 = v235;
  uint64_t v113 = v241;
  sub_10006E244(v235, v218);
  uint64_t v243 = v106;
  v244 = v53;
  uint64_t v245 = v109;
  v246 = v100;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v218 = v263;
  uint64_t v219 = v262;
  LODWORD(v220) = v264;
  long long v114 = v236;
  uint64_t v115 = v113;
  uint64_t v116 = v113;
  uint64_t v117 = v234;
  v234(v236, v116, v112);
  uint64_t v118 = (void *)swift_allocObject();
  uint64_t v119 = v237;
  v118[2] = v106;
  v118[3] = v119;
  v118[4] = v239;
  v118[5] = v100;
  uint64_t v120 = v229;
  char v121 = v114;
  uint64_t v122 = v235;
  uint64_t v123 = (void (*)(char *, char *, uint64_t))v230;
  ((void (*)(char *, char *, uint64_t))v230)((char *)v118 + v229, v121, v235);
  uint64_t v124 = v115;
  uint64_t v125 = v122;
  v117(v228, v124, v122);
  char v126 = (char *)swift_allocObject();
  char v127 = v237;
  *((void *)v126 + 2) = v240;
  *((void *)v126 + 3) = v127;
  uint64_t v128 = v242;
  *((void *)v126 + 4) = v239;
  *((void *)v126 + 5) = v128;
  v123(&v126[v120], v228, v122);
  swift_checkMetadataState();
  uint64_t v129 = v222;
  uint64_t v130 = v224;
  View.sheet<A>(isPresented:onDismiss:content:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v198 + 8))(v130, v129);
  uint64_t v131 = v241;
  sub_10006E244(v122, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v132 = sub_1000780D4();
  uint64_t v134 = v133;
  swift_release();
  uint64_t v262 = v132;
  v263 = v134;
  uint64_t v135 = v236;
  uint64_t v136 = v131;
  v234(v236, v131, v125);
  uint64_t v137 = (void *)swift_allocObject();
  uint64_t v138 = v237;
  v137[2] = v240;
  v137[3] = v138;
  uint64_t v139 = v242;
  v137[4] = v239;
  v137[5] = v139;
  uint64_t v140 = (char *)v137 + v120;
  uint64_t v141 = v125;
  ((void (*)(char *, char *, uint64_t))v230)(v140, v135, v125);
  uint64_t v142 = v195;
  uint64_t v143 = v221;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v200 + 8))(v143, v142);
  uint64_t v144 = v136;
  sub_10006E244(v125, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  LOBYTE(v123) = sub_1000780C0();
  swift_release();
  LOBYTE(v262) = v123 & 1;
  uint64_t v145 = v135;
  unint64_t v146 = v234;
  v234(v135, v144, v125);
  uint64_t v147 = (void *)swift_allocObject();
  uint64_t v148 = v239;
  uint64_t v149 = v237;
  v147[2] = v240;
  v147[3] = v149;
  uint64_t v150 = v242;
  v147[4] = v148;
  v147[5] = v150;
  ((void (*)(char *, char *, uint64_t))v230)((char *)v147 + v229, v135, v141);
  uint64_t v151 = v199;
  uint64_t v152 = v223;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v202 + 8))(v152, v151);
  uint64_t v153 = v235;
  v146(v135, v241, v235);
  uint64_t v154 = (void *)swift_allocObject();
  uint64_t v155 = v237;
  v154[2] = v240;
  v154[3] = v155;
  uint64_t v156 = v242;
  v154[4] = v148;
  v154[5] = v156;
  uint64_t v157 = v229;
  uint64_t v158 = (void (*)(char *, char *, uint64_t))v230;
  uint64_t v159 = v145;
  uint64_t v160 = v153;
  ((void (*)(char *, char *, uint64_t))v230)((char *)v154 + v229, v159, v153);
  uint64_t v262 = v151;
  v263 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&type metadata for Bool;
  uint64_t v264 = v226;
  v265 = &protocol witness table for Bool;
  uint64_t v161 = swift_getOpaqueTypeConformance2();
  uint64_t v162 = v201;
  uint64_t v163 = v225;
  View.onAppear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v204 + 8))(v163, v162);
  uint64_t v164 = v236;
  v234(v236, v241, v160);
  uint64_t v165 = (char *)swift_allocObject();
  *((void *)v165 + 2) = v240;
  *((void *)v165 + 3) = v155;
  uint64_t v166 = v242;
  *((void *)v165 + 4) = v239;
  *((void *)v165 + 5) = v166;
  v158(&v165[v157], v164, v160);
  uint64_t v260 = v161;
  v261 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v167 = v205;
  uint64_t v168 = swift_getWitnessTable();
  char v169 = v182;
  uint64_t v170 = v227;
  View.onDisappear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v206 + 8))(v170, v167);
  if (qword_1001A4F18 != -1) {
    swift_once();
  }
  uint64_t v258 = v168;
  v259 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v171 = v210;
  uint64_t v172 = swift_getWitnessTable();
  uint64_t v173 = v207;
  View.accessibilityIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v209 + 8))(v169, v171);
  uint64_t v174 = sub_100076078((unint64_t *)&qword_1001A68E8, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  uint64_t v256 = v172;
  uint64_t v257 = v174;
  uint64_t v175 = v212;
  swift_getWitnessTable();
  uint64_t v176 = v208;
  sub_1001221F0(v173, v175);
  uint64_t v177 = *(void (**)(char *, uint64_t))(v211 + 8);
  v177(v173, v175);
  sub_1001221F0(v176, v175);
  return ((uint64_t (*)(char *, uint64_t))v177)(v176, v175);
}

uint64_t sub_10006FBB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v110 = a4;
  uint64_t v109 = a2;
  uint64_t v111 = a1;
  uint64_t v107 = a6;
  uint64_t v106 = type metadata accessor for NavigationBarItem.TitleDisplayMode();
  uint64_t v105 = *(void *)(v106 - 8);
  __chkstk_darwin(v106, v10);
  uint64_t v104 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = type metadata accessor for ScrollDismissesKeyboardMode();
  uint64_t v102 = *(void *)(v103 - 8);
  __chkstk_darwin(v103, v12);
  uint64_t v101 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = a2;
  uint64_t v132 = a3;
  uint64_t v133 = a4;
  uint64_t v134 = a5;
  uint64_t v96 = a5;
  uint64_t v100 = type metadata accessor for VenueEventView();
  uint64_t v98 = *(void *)(v100 - 8);
  uint64_t v99 = *(void *)(v98 + 64);
  __chkstk_darwin(v100, v14);
  uint64_t v97 = (char *)&v76 - v15;
  sub_100004A58(&qword_1001A7B40);
  sub_100004A58(&qword_1001A7B48);
  uint64_t v16 = type metadata accessor for Array();
  uint64_t v108 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v18 = sub_100004A58(&qword_1001A7B50);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v131 = v16;
  uint64_t v132 = AssociatedTypeWitness;
  uint64_t v133 = v18;
  uint64_t v134 = WitnessTable;
  uint64_t v135 = AssociatedConformanceWitness;
  type metadata accessor for ForEach();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  type metadata accessor for ModifiedContent();
  type metadata accessor for Section();
  uint64_t v21 = sub_1000759D8(&qword_1001A7B58, &qword_1001A7B40, (void (*)(void))sub_1000759A8);
  uint64_t v22 = sub_1000759D8(&qword_1001A7B78, &qword_1001A7B48, (void (*)(void))sub_100075AA8);
  unint64_t v130 = sub_100075AFC();
  uint64_t v23 = swift_getWitnessTable();
  uint64_t v128 = v22;
  uint64_t v129 = v23;
  uint64_t v127 = swift_getWitnessTable();
  uint64_t v125 = swift_getWitnessTable();
  char v126 = &protocol witness table for _PaddingLayout;
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v122 = v21;
  uint64_t v123 = v24;
  uint64_t v124 = &protocol witness table for EmptyView;
  swift_getWitnessTable();
  uint64_t v93 = type metadata accessor for LazyVGrid();
  uint64_t v92 = swift_getWitnessTable();
  uint64_t v25 = type metadata accessor for ObservableScrollView();
  uint64_t v95 = *(void *)(v25 - 8);
  __chkstk_darwin(v25, v26);
  uint64_t v90 = (uint64_t)&v76 - v27;
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v131 = v25;
  uint64_t v132 = v28;
  uint64_t v88 = v25;
  uint64_t v29 = v28;
  uint64_t v89 = v28;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v94 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2, v31);
  unint64_t v87 = (char *)&v76 - v32;
  uint64_t v131 = v25;
  uint64_t v132 = v29;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v82 = OpaqueTypeMetadata2;
  uint64_t v131 = OpaqueTypeMetadata2;
  uint64_t v132 = OpaqueTypeConformance2;
  uint64_t v34 = OpaqueTypeConformance2;
  uint64_t v83 = OpaqueTypeConformance2;
  uint64_t v35 = swift_getOpaqueTypeMetadata2();
  uint64_t v81 = v35;
  uint64_t v91 = *(void *)(v35 - 8);
  __chkstk_darwin(v35, v36);
  uint64_t v85 = (char *)&v76 - v37;
  uint64_t v38 = sub_100004A58(&qword_1001A7BA8);
  uint64_t v80 = v38;
  uint64_t v131 = OpaqueTypeMetadata2;
  uint64_t v132 = v34;
  uint64_t v39 = swift_getOpaqueTypeConformance2();
  uint64_t v79 = v39;
  uint64_t v40 = sub_100004A58(&qword_1001A7BB0);
  uint64_t v41 = sub_10000A780(&qword_1001A7BB8, &qword_1001A7BB0);
  uint64_t v131 = v40;
  uint64_t v132 = v41;
  uint64_t v78 = swift_getOpaqueTypeConformance2();
  uint64_t v131 = v35;
  uint64_t v132 = v38;
  uint64_t v133 = v39;
  uint64_t v134 = v78;
  uint64_t v84 = &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>;
  uint64_t v42 = swift_getOpaqueTypeMetadata2();
  uint64_t v86 = *(void *)(v42 - 8);
  uint64_t v44 = __chkstk_darwin(v42, v43);
  uint64_t v76 = (char *)&v76 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44, v46);
  uint64_t v77 = (char *)&v76 - v47;
  uint64_t v48 = v109;
  uint64_t v49 = v108;
  uint64_t v117 = v109;
  uint64_t v118 = v108;
  uint64_t v50 = v110;
  uint64_t v51 = v96;
  uint64_t v119 = v110;
  uint64_t v120 = v96;
  uint64_t v121 = v111;
  uint64_t v52 = v98;
  uint64_t v53 = v97;
  uint64_t v54 = v100;
  (*(void (**)(char *))(v98 + 16))(v97);
  unint64_t v55 = (*(unsigned __int8 *)(v52 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
  uint64_t v56 = (char *)swift_allocObject();
  *((void *)v56 + 2) = v48;
  *((void *)v56 + 3) = v49;
  *((void *)v56 + 4) = v50;
  *((void *)v56 + 5) = v51;
  uint64_t v57 = v51;
  (*(void (**)(char *, char *, uint64_t))(v52 + 32))(&v56[v55], v53, v54);
  char v58 = static Axis.Set.vertical.getter();
  uint64_t v59 = v90;
  sub_1000C3FB0(v58, 0, (void (*)(uint64_t))sub_100076254, (uint64_t)sub_100076270, (uint64_t)v56, v90);
  uint64_t v60 = v101;
  static ScrollDismissesKeyboardMode.immediately.getter();
  uint64_t v61 = v87;
  uint64_t v62 = v88;
  View.scrollDismissesKeyboard(_:)();
  (*(void (**)(char *, uint64_t))(v102 + 8))(v60, v103);
  (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v59, v62);
  uint64_t v63 = v105;
  uint64_t v64 = v104;
  uint64_t v65 = v106;
  (*(void (**)(char *, void, uint64_t))(v105 + 104))(v104, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v106);
  uint64_t v66 = v85;
  uint64_t v67 = v82;
  View.navigationBarTitleDisplayMode(_:)();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v65);
  (*(void (**)(char *, uint64_t))(v94 + 8))(v61, v67);
  uint64_t v112 = v109;
  uint64_t v113 = v108;
  uint64_t v114 = v110;
  uint64_t v115 = v57;
  uint64_t v116 = v111;
  uint64_t v68 = v76;
  uint64_t v69 = v81;
  uint64_t v70 = v80;
  uint64_t v71 = v79;
  uint64_t v72 = v78;
  View.toolbar<A>(content:)();
  (*(void (**)(char *, uint64_t))(v91 + 8))(v66, v69);
  uint64_t v131 = v69;
  uint64_t v132 = v70;
  uint64_t v133 = v71;
  uint64_t v134 = v72;
  swift_getOpaqueTypeConformance2();
  uint64_t v73 = v77;
  sub_1001221F0(v68, v42);
  uint64_t v74 = *(void (**)(char *, uint64_t))(v86 + 8);
  v74(v68, v42);
  sub_1001221F0(v73, v42);
  return ((uint64_t (*)(char *, uint64_t))v74)(v73, v42);
}

uint64_t sub_100070794@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v33 = a5;
  uint64_t v39 = a4;
  uint64_t v37 = a2;
  uint64_t v38 = a1;
  uint64_t v40 = a6;
  uint64_t v7 = type metadata accessor for PinnedScrollableViews();
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v36 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for GridItem.Size();
  uint64_t v34 = *(void *)(v35 - 8);
  __chkstk_darwin(v35, v10);
  uint64_t v12 = (_OWORD *)((char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100004A58(&qword_1001A7B40);
  sub_100004A58(&qword_1001A7B48);
  uint64_t v13 = type metadata accessor for Array();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = sub_100004A58(&qword_1001A7B50);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v55 = v13;
  uint64_t v56 = AssociatedTypeWitness;
  uint64_t v57 = v15;
  uint64_t v58 = WitnessTable;
  uint64_t v59 = AssociatedConformanceWitness;
  type metadata accessor for ForEach();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  type metadata accessor for ModifiedContent();
  type metadata accessor for Section();
  uint64_t v18 = sub_1000759D8(&qword_1001A7B58, &qword_1001A7B40, (void (*)(void))sub_1000759A8);
  uint64_t v19 = sub_1000759D8(&qword_1001A7B78, &qword_1001A7B48, (void (*)(void))sub_100075AA8);
  unint64_t v54 = sub_100075AFC();
  uint64_t v20 = swift_getWitnessTable();
  uint64_t v52 = v19;
  uint64_t v53 = v20;
  uint64_t v51 = swift_getWitnessTable();
  uint64_t v49 = swift_getWitnessTable();
  uint64_t v50 = &protocol witness table for _PaddingLayout;
  uint64_t v21 = swift_getWitnessTable();
  uint64_t v46 = v18;
  uint64_t v47 = v21;
  uint64_t v48 = &protocol witness table for EmptyView;
  swift_getWitnessTable();
  uint64_t v22 = type metadata accessor for LazyVGrid();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v25 = __chkstk_darwin(v22, v24);
  uint64_t v27 = (char *)&v33 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25, v28);
  uint64_t v30 = (char *)&v33 - v29;
  sub_10000570C(&qword_1001A7CC8);
  type metadata accessor for GridItem();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_100153180;
  *uint64_t v12 = xmmword_1001538D0;
  (*(void (**)(_OWORD *, void, uint64_t))(v34 + 104))(v12, enum case for GridItem.Size.flexible(_:), v35);
  GridItem.init(_:spacing:alignment:)();
  uint64_t v41 = v37;
  uint64_t v42 = a3;
  uint64_t v43 = v39;
  uint64_t v44 = v33;
  uint64_t v45 = v38;
  static HorizontalAlignment.center.getter();
  sub_1000B9D68();
  LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)();
  swift_getWitnessTable();
  sub_1001221F0(v27, v22);
  uint64_t v31 = *(void (**)(char *, uint64_t))(v23 + 8);
  v31(v27, v22);
  sub_1001221F0(v30, v22);
  return ((uint64_t (*)(char *, uint64_t))v31)(v30, v22);
}

uint64_t sub_100070DA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v27 = a4;
  uint64_t v24 = a2;
  uint64_t v26 = a1;
  uint64_t v28 = a6;
  uint64_t v25 = sub_100004A58(&qword_1001A7B40);
  sub_100004A58(&qword_1001A7B48);
  uint64_t v49 = type metadata accessor for Array();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v51 = sub_100004A58(&qword_1001A7B50);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for ForEach();
  type metadata accessor for _ConditionalContent();
  uint64_t v23 = type metadata accessor for Group();
  type metadata accessor for ModifiedContent();
  uint64_t v8 = type metadata accessor for Section();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v23 - v15;
  uint64_t v35 = v24;
  uint64_t v36 = a3;
  uint64_t v37 = v27;
  uint64_t v38 = a5;
  uint64_t v39 = v26;
  uint64_t v29 = v24;
  uint64_t v30 = a3;
  uint64_t v31 = v27;
  uint64_t v32 = a5;
  uint64_t v33 = v26;
  uint64_t v17 = sub_1000759D8(&qword_1001A7B58, &qword_1001A7B40, (void (*)(void))sub_1000759A8);
  uint64_t v18 = sub_1000759D8(&qword_1001A7B78, &qword_1001A7B48, (void (*)(void))sub_100075AA8);
  unint64_t v48 = sub_100075AFC();
  uint64_t v19 = swift_getWitnessTable();
  uint64_t v46 = v18;
  uint64_t v47 = v19;
  uint64_t v45 = swift_getWitnessTable();
  uint64_t v43 = swift_getWitnessTable();
  uint64_t v44 = &protocol witness table for _PaddingLayout;
  uint64_t v20 = swift_getWitnessTable();
  sub_100072C34((uint64_t)sub_100076A68, (uint64_t)v34);
  uint64_t v40 = v17;
  uint64_t v41 = v20;
  uint64_t v42 = &protocol witness table for EmptyView;
  swift_getWitnessTable();
  sub_1001221F0(v13, v8);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v9 + 8);
  v21(v13, v8);
  sub_1001221F0(v16, v8);
  return ((uint64_t (*)(char *, uint64_t))v21)(v16, v8);
}

uint64_t sub_1000711F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v32 = a4;
  uint64_t v30 = a2;
  uint64_t v31 = a1;
  uint64_t v34 = a6;
  sub_100004A58(&qword_1001A7B48);
  uint64_t v46 = type metadata accessor for Array();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v48 = sub_100004A58(&qword_1001A7B50);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for ForEach();
  type metadata accessor for _ConditionalContent();
  uint64_t v8 = type metadata accessor for Group();
  uint64_t v33 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v29 - v10;
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  uint64_t v20 = (char *)&v29 - v19;
  uint64_t v35 = v30;
  uint64_t v36 = a3;
  uint64_t v37 = v32;
  uint64_t v38 = a5;
  uint64_t v39 = v31;
  uint64_t v21 = sub_1000759D8(&qword_1001A7B78, &qword_1001A7B48, (void (*)(void))sub_100075AA8);
  unint64_t v45 = sub_100075AFC();
  uint64_t v22 = swift_getWitnessTable();
  uint64_t v43 = v21;
  uint64_t v44 = v22;
  uint64_t v23 = swift_getWitnessTable();
  Group<A>.init(content:)();
  unsigned __int8 v24 = static Edge.Set.leading.getter();
  unsigned __int8 v25 = static Edge.Set.trailing.getter();
  Edge.Set.init(rawValue:)();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v24) {
    Edge.Set.init(rawValue:)();
  }
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v25) {
    Edge.Set.init(rawValue:)();
  }
  uint64_t v42 = v23;
  uint64_t v26 = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v8);
  uint64_t v40 = v26;
  uint64_t v41 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable();
  sub_1001221F0(v17, v12);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v13 + 8);
  v27(v17, v12);
  sub_1001221F0(v20, v12);
  return ((uint64_t (*)(char *, uint64_t))v27)(v20, v12);
}

uint64_t sub_10007165C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v58 = a1;
  uint64_t v63 = a6;
  uint64_t v54 = a2;
  uint64_t v65 = a2;
  uint64_t v66 = a3;
  uint64_t v55 = a4;
  uint64_t v67 = a4;
  uint64_t v68 = a5;
  uint64_t v8 = type metadata accessor for VenueEventView();
  uint64_t v53 = *(void *)(v8 - 8);
  v50[1] = *(void *)(v53 + 64);
  __chkstk_darwin(v8, v9);
  uint64_t v51 = (char *)v50 - v10;
  uint64_t v11 = type metadata accessor for Array();
  uint64_t v57 = a5;
  uint64_t v12 = *(void *)(a5 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = sub_100004A58(&qword_1001A7B50);
  uint64_t WitnessTable = swift_getWitnessTable();
  v50[4] = v12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v65 = v11;
  uint64_t v66 = AssociatedTypeWitness;
  v50[3] = AssociatedTypeWitness;
  void v50[2] = v14;
  uint64_t v67 = v14;
  uint64_t v68 = WitnessTable;
  v50[0] = WitnessTable;
  uint64_t v69 = AssociatedConformanceWitness;
  uint64_t v17 = type metadata accessor for ForEach();
  uint64_t v56 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17, v18);
  uint64_t v21 = (char *)v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v22);
  uint64_t v52 = (char *)v50 - v23;
  uint64_t v59 = sub_100004A58(&qword_1001A7B48);
  uint64_t v24 = type metadata accessor for _ConditionalContent();
  uint64_t v61 = *(void *)(v24 - 8);
  uint64_t v62 = v24;
  __chkstk_darwin(v24, v25);
  uint64_t v60 = (char *)v50 - v26;
  uint64_t v27 = v58;
  sub_10006E244(v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v28 = sub_100077B88();
  swift_release();
  uint64_t v65 = v28;
  swift_getWitnessTable();
  LOBYTE(WitnessTable) = Collection.isEmpty.getter();
  swift_bridgeObjectRelease();
  uint64_t v29 = sub_10006E244(v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  if (WitnessTable)
  {
    uint64_t v30 = v29 + *(void *)(*(void *)v29 + 192);
    uint64_t v32 = *(void *)v30;
    uint64_t v31 = *(void *)(v30 + 8);
    char v33 = *(unsigned char *)(v30 + 16);
    uint64_t v34 = *(void *)(v30 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    char v35 = static Edge.Set.top.getter();
    uint64_t v65 = v32;
    uint64_t v66 = v31;
    LOBYTE(v67) = v33;
    uint64_t v68 = v34;
    LOBYTE(v69) = v35;
    long long v70 = 0u;
    long long v71 = 0u;
    char v72 = 1;
    sub_1000759D8(&qword_1001A7B78, &qword_1001A7B48, (void (*)(void))sub_100075AA8);
    unint64_t v64 = sub_100075AFC();
    swift_getWitnessTable();
    uint64_t v36 = v60;
    sub_10012222C((uint64_t)&v65, v59);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v37 = sub_100077B88();
    swift_release();
    uint64_t v65 = v37;
    uint64_t v38 = v53;
    uint64_t v39 = v51;
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v51, v27, v8);
    unint64_t v40 = (*(unsigned __int8 *)(v38 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
    uint64_t v41 = (char *)swift_allocObject();
    *((void *)v41 + 2) = v54;
    *((void *)v41 + 3) = a3;
    uint64_t v42 = v57;
    *((void *)v41 + 4) = v55;
    *((void *)v41 + 5) = v42;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(&v41[v40], v39, v8);
    unint64_t v43 = sub_100075AFC();
    ForEach<>.init(_:content:)();
    unint64_t v76 = v43;
    swift_getWitnessTable();
    uint64_t v44 = v52;
    sub_1001221F0(v21, v17);
    unint64_t v45 = *(void (**)(char *, uint64_t))(v56 + 8);
    v45(v21, v17);
    sub_1001221F0(v44, v17);
    sub_1000759D8(&qword_1001A7B78, &qword_1001A7B48, (void (*)(void))sub_100075AA8);
    uint64_t v36 = v60;
    sub_100122324((uint64_t)v21, v59, v17);
    v45(v21, v17);
    v45(v44, v17);
  }
  uint64_t v46 = sub_1000759D8(&qword_1001A7B78, &qword_1001A7B48, (void (*)(void))sub_100075AA8);
  unint64_t v75 = sub_100075AFC();
  uint64_t v47 = swift_getWitnessTable();
  uint64_t v73 = v46;
  uint64_t v74 = v47;
  uint64_t v48 = v62;
  swift_getWitnessTable();
  sub_1001221F0(v36, v48);
  return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v36, v48);
}

uint64_t sub_100071D68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v131 = a3;
  uint64_t v132 = a5;
  uint64_t v120 = a2;
  uint64_t v127 = a7;
  uint64_t v125 = *(void *)(a4 - 8);
  uint64_t v126 = *(void *)(v125 + 64);
  __chkstk_darwin(a1, a2);
  uint64_t v124 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134[0] = v11;
  v134[1] = v12;
  v134[2] = v13;
  v134[3] = v14;
  uint64_t v117 = type metadata accessor for VenueEventView();
  uint64_t v122 = *(void *)(v117 - 8);
  uint64_t v123 = *(void *)(v122 + 64);
  __chkstk_darwin(v117, v15);
  uint64_t v121 = (char *)&v90 - v16;
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v118 = *(void *)(v17 - 8);
  uint64_t v119 = v17;
  __chkstk_darwin(v17, v18);
  uint64_t v112 = (char *)&v90 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = type metadata accessor for DateInterval();
  uint64_t v111 = *(void *)(v113 - 8);
  __chkstk_darwin(v113, v20);
  uint64_t v109 = (uint64_t)&v90 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v133 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v23 = __chkstk_darwin(AssociatedTypeWitness, v22);
  uint64_t v108 = (char *)&v90 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v25);
  uint64_t v102 = (char *)&v90 - v26;
  uint64_t v27 = swift_getAssociatedTypeWitness();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v30 = __chkstk_darwin(v27, v29);
  uint64_t v103 = (char *)&v90 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30, v32);
  uint64_t v34 = (char *)&v90 - v33;
  uint64_t v107 = type metadata accessor for EventRowViewModel();
  uint64_t v36 = __chkstk_darwin(v107, v35);
  uint64_t v110 = (uint64_t)&v90 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36, v38);
  unint64_t v40 = (uint64_t *)((char *)&v90 - v39);
  uint64_t v41 = type metadata accessor for EventRow(0);
  __chkstk_darwin(v41 - 8, v42);
  uint64_t v106 = (char *)&v90 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = sub_10000570C(&qword_1001A7B90);
  __chkstk_darwin(v130, v44);
  uint64_t v105 = (uint64_t)&v90 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = sub_10000570C(qword_1001A7CD0);
  uint64_t v115 = *(void *)(v116 - 8);
  __chkstk_darwin(v116, v46);
  uint64_t v114 = (char *)&v90 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = *(void (**)(uint64_t, uint64_t))(a6 + 200);
  uint64_t v128 = a1;
  v97(a4, a6);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v101 = sub_100014828(v27, AssociatedConformanceWitness);
  uint64_t v100 = v48;
  uint64_t v49 = *(void (**)(char *, uint64_t))(v28 + 8);
  uint64_t v92 = v28 + 8;
  uint64_t v93 = v49;
  v49(v34, v27);
  uint64_t v96 = *(void (**)(uint64_t, uint64_t))(a6 + 208);
  uint64_t v50 = v102;
  uint64_t v51 = a4;
  v96(a4, a6);
  uint64_t v129 = a6;
  uint64_t v52 = AssociatedTypeWitness;
  uint64_t v94 = swift_getAssociatedConformanceWitness();
  uint64_t v99 = sub_100080074(v52, v94);
  uint64_t v98 = v53;
  uint64_t v54 = *(void (**)(char *, uint64_t))(v133 + 8);
  v133 += 8;
  uint64_t v91 = v54;
  v54(v50, v52);
  uint64_t v55 = v103;
  uint64_t v56 = v128;
  v97(v51, a6);
  uint64_t v57 = v109;
  sub_100013DE4(v27, AssociatedConformanceWitness, v109);
  v93(v55, v27);
  uint64_t v58 = v112;
  DateInterval.start.getter();
  (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v57, v113);
  uint64_t v59 = v108;
  uint64_t v60 = v51;
  uint64_t v61 = v129;
  v96(v51, v129);
  sub_100080288(v52, v94, (uint64_t)v134);
  v91(v59, v52);
  uint64_t v62 = v117;
  uint64_t v63 = v120;
  sub_10006E244(v117, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v64 = v60;
  uint64_t v65 = sub_10007990C(v56, v131, v60, v132, v61);
  swift_release();
  uint64_t v66 = v100;
  *unint64_t v40 = v101;
  v40[1] = v66;
  uint64_t v67 = v98;
  v40[2] = v99;
  v40[3] = v67;
  uint64_t v68 = (int *)v107;
  (*(void (**)(char *, char *, uint64_t))(v118 + 32))((char *)v40 + *(int *)(v107 + 24), v58, v119);
  sub_10000A3C4((uint64_t)v134, (uint64_t)v40 + v68[7], &qword_1001A6928);
  *((unsigned char *)v40 + v68[8]) = 1;
  *(uint64_t *)((char *)v40 + v68[9]) = v65;
  sub_100076CD4((uint64_t)v40, v110, (uint64_t (*)(void))type metadata accessor for EventRowViewModel);
  uint64_t v69 = (uint64_t)v106;
  State.init(wrappedValue:)();
  sub_100076D3C((uint64_t)v40, (uint64_t (*)(void))type metadata accessor for EventRowViewModel);
  uint64_t v70 = v105;
  sub_100076CD4(v69, v105, type metadata accessor for EventRow);
  *(unsigned char *)(v70 + *(int *)(v130 + 36)) = 0;
  sub_100076D3C(v69, type metadata accessor for EventRow);
  char v72 = v121;
  uint64_t v71 = v122;
  uint64_t v73 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v122 + 16))(v121, v63, v62);
  unint64_t v75 = v124;
  uint64_t v74 = v125;
  (*(void (**)(char *, uint64_t, uint64_t))(v125 + 16))(v124, v128, v64);
  uint64_t v76 = v71;
  unint64_t v77 = (*(unsigned __int8 *)(v71 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
  uint64_t v78 = v74;
  unint64_t v79 = (v123 + *(unsigned __int8 *)(v74 + 80) + v77) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80);
  uint64_t v80 = (char *)swift_allocObject();
  *((void *)v80 + 2) = v131;
  *((void *)v80 + 3) = v64;
  uint64_t v81 = v129;
  *((void *)v80 + 4) = v132;
  *((void *)v80 + 5) = v81;
  (*(void (**)(char *, char *, uint64_t))(v76 + 32))(&v80[v77], v72, v73);
  (*(void (**)(char *, char *, uint64_t))(v78 + 32))(&v80[v79], v75, v64);
  sub_100075BD0();
  uint64_t v82 = v114;
  View.onTapGesture(count:perform:)();
  swift_release();
  sub_10000ACE0(v70, &qword_1001A7B90);
  uint64_t v83 = static Color.primary.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v85 = v115;
  uint64_t v86 = v127;
  uint64_t v87 = v116;
  (*(void (**)(uint64_t, char *, uint64_t))(v115 + 16))(v127, v82, v116);
  uint64_t v88 = (uint64_t *)(v86 + *(int *)(sub_10000570C(&qword_1001A7B50) + 36));
  *uint64_t v88 = KeyPath;
  v88[1] = v83;
  return (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v82, v87);
}

uint64_t sub_100072874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)v21 - v15;
  v21[0] = a3;
  v21[1] = a4;
  long long v21[2] = a5;
  v21[3] = a6;
  uint64_t v17 = type metadata accessor for VenueEventView();
  sub_10006E244(v17, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v18 = *(void *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v16, a2, a4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, a4);
  sub_100079CF4((uint64_t)v16);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  swift_release();
  sub_10006E244(v17, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v19 = *(void *)(a1 + *(int *)(v17 + 64));
  if (v19)
  {
    swift_retain();
    sub_100077C78(8, 10, 0, 3u, v19);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100076078((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

double sub_100072AC8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for VenueEventView();
  sub_10006E244(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v18 = sub_100077FD0();
  uint64_t v4 = v3;
  swift_release();
  uint64_t v5 = sub_10006E244(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v6 = v5 + *(void *)(*(void *)v5 + 184);
  uint64_t v8 = *(void *)v6;
  uint64_t v7 = *(void *)(v6 + 8);
  char v9 = *(unsigned char *)(v6 + 16);
  uint64_t v10 = *(void *)(v6 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  sub_10006E244(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_100078048();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  swift_release();
  char v15 = static Edge.Set.horizontal.getter();
  char v16 = static Edge.Set.vertical.getter();
  *(void *)a1 = v18;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = v12;
  *(void *)(a1 + 64) = v14;
  *(unsigned char *)(a1 + 72) = v15;
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(unsigned char *)(a1 + 112) = 1;
  *(unsigned char *)(a1 + 120) = v16;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(unsigned char *)(a1 + 160) = 1;
  return result;
}

uint64_t sub_100072C34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __chkstk_darwin(a1, a2);
  v3(v2);
  return Section<>.init(header:content:)();
}

uint64_t sub_100072D04()
{
  return swift_release();
}

uint64_t sub_100072D7C(uint64_t result, double a2)
{
  uint64_t v3 = *(void *)(result + 32);
  if (a2 < -50.0 != *(unsigned char *)(v3 + 16))
  {
    sub_10000570C(&qword_1001A5448);
    sub_10000A780(&qword_1001A5450, &qword_1001A5448);
    ObservableObject<>.objectWillChange.getter();
    ObservableObjectPublisher.send()();
    double result = swift_release();
  }
  *(unsigned char *)(v3 + 16) = a2 < -50.0;
  return result;
}

uint64_t sub_100072E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for ToolbarItemPlacement();
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v12 = sub_10000570C(&qword_1001A7BB0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  char v16 = &v18[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static ToolbarItemPlacement.principal.getter();
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  uint64_t v23 = a1;
  sub_10000570C(&qword_1001A7BF8);
  sub_100076354();
  ToolbarItem<>.init(placement:content:)();
  sub_10000A780(&qword_1001A7BB8, &qword_1001A7BB0);
  static ToolbarContentBuilder.buildBlock<A>(_:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t sub_100073004@<X0>(uint64_t a1@<X0>, uint64_t (*a2)()@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v94 = a1;
  uint64_t v99 = a6;
  uint64_t v10 = sub_10000570C(&qword_1001A7C80);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v89 = (uint64_t *)((char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v88 = sub_10000570C(&qword_1001A7C70);
  __chkstk_darwin(v88, v13);
  uint64_t v91 = (uint64_t)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_10000570C(&qword_1001A7C60);
  uint64_t v16 = __chkstk_darwin(v98, v15);
  uint64_t v90 = (uint64_t)&v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v18);
  uint64_t v92 = (uint64_t)&v81 - v19;
  uint64_t v96 = sub_10000570C(&qword_1001A7C88);
  __chkstk_darwin(v96, v20);
  uint64_t v97 = (uint64_t)&v81 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000570C(&qword_1001A7C50);
  __chkstk_darwin(v22 - 8, v23);
  uint64_t v25 = (char *)&v81 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = sub_10000570C(&qword_1001A7C40);
  __chkstk_darwin(v82, v26);
  uint64_t v28 = (char *)&v81 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_10000570C(&qword_1001A7C30);
  __chkstk_darwin(v83, v29);
  uint64_t v86 = (uint64_t)&v81 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = sub_10000570C(&qword_1001A7C20);
  __chkstk_darwin(v84, v31);
  uint64_t v33 = (char *)&v81 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = sub_10000570C(&qword_1001A7C10);
  uint64_t v35 = __chkstk_darwin(v95, v34);
  uint64_t v85 = (uint64_t)&v81 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35, v37);
  uint64_t v87 = (uint64_t)&v81 - v38;
  uint64_t v39 = a2;
  *(void *)&long long v100 = a2;
  *((void *)&v100 + 1) = a3;
  uint64_t v40 = a4;
  *(void *)&long long v101 = a4;
  *((void *)&v101 + 1) = a5;
  uint64_t v41 = a5;
  uint64_t v93 = type metadata accessor for VenueEventView();
  uint64_t v42 = v94;
  sub_10006E244(v93, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  LOBYTE(a5) = sub_1000780C0();
  swift_release();
  uint64_t v43 = static VerticalAlignment.center.getter();
  if (a5)
  {
    *(void *)uint64_t v25 = v43;
    *((void *)v25 + 1) = 0x4010000000000000;
    v25[16] = 0;
    uint64_t v44 = sub_10000570C(&qword_1001A7C98);
    sub_10007386C(v42, (uint64_t)v39, a3, v40, v41, &v25[*(int *)(v44 + 44)]);
    char v45 = static Edge.Set.leading.getter();
    sub_10000A428((uint64_t)v25, (uint64_t)v28, &qword_1001A7C50);
    uint64_t v46 = &v28[*(int *)(v82 + 36)];
    *uint64_t v46 = v45;
    *(_OWORD *)(v46 + 8) = 0u;
    *(_OWORD *)(v46 + 24) = 0u;
    v46[40] = 1;
    sub_10000ACE0((uint64_t)v25, &qword_1001A7C50);
    char v47 = static Edge.Set.trailing.getter();
    EdgeInsets.init(_all:)();
    uint64_t v49 = v48;
    uint64_t v51 = v50;
    uint64_t v53 = v52;
    uint64_t v55 = v54;
    uint64_t v56 = v86;
    sub_10000A428((uint64_t)v28, v86, &qword_1001A7C40);
    uint64_t v57 = v56 + *(int *)(v83 + 36);
    *(unsigned char *)uint64_t v57 = v47;
    *(void *)(v57 + 8) = v49;
    *(void *)(v57 + 16) = v51;
    *(void *)(v57 + 24) = v53;
    *(void *)(v57 + 32) = v55;
    *(unsigned char *)(v57 + 40) = 0;
    sub_10000ACE0((uint64_t)v28, &qword_1001A7C40);
    sub_10006E244(v93, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    sub_100078480();
    swift_release();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    sub_10000A428(v56, (uint64_t)v33, &qword_1001A7C30);
    uint64_t v58 = &v33[*(int *)(v84 + 36)];
    long long v59 = v101;
    *(_OWORD *)uint64_t v58 = v100;
    *((_OWORD *)v58 + 1) = v59;
    *((_OWORD *)v58 + 2) = v102;
    sub_10000ACE0(v56, &qword_1001A7C30);
    uint64_t v60 = v85;
    sub_10000A428((uint64_t)v33, v85, &qword_1001A7C20);
    uint64_t v61 = (uint64_t (**)())(v60 + *(int *)(v95 + 36));
    char *v61 = sub_100073FD8;
    v61[1] = 0;
    sub_10000ACE0((uint64_t)v33, &qword_1001A7C20);
    uint64_t v62 = &qword_1001A7C10;
    uint64_t v63 = v87;
    sub_10000A3C4(v60, v87, &qword_1001A7C10);
    sub_10000A428(v63, v97, &qword_1001A7C10);
  }
  else
  {
    uint64_t v64 = (uint64_t)v89;
    *uint64_t v89 = v43;
    *(void *)(v64 + 8) = 0x4010000000000000;
    *(unsigned char *)(v64 + 16) = 0;
    uint64_t v65 = sub_10000570C(&qword_1001A7C90);
    sub_100074000(v42, v39, a3, v40, v41, v64 + *(int *)(v65 + 44));
    char v66 = static Edge.Set.horizontal.getter();
    EdgeInsets.init(_all:)();
    uint64_t v68 = v67;
    uint64_t v70 = v69;
    uint64_t v72 = v71;
    uint64_t v74 = v73;
    uint64_t v75 = v91;
    sub_10000A428(v64, v91, &qword_1001A7C80);
    uint64_t v76 = v75 + *(int *)(v88 + 36);
    *(unsigned char *)uint64_t v76 = v66;
    *(void *)(v76 + 8) = v68;
    *(void *)(v76 + 16) = v70;
    *(void *)(v76 + 24) = v72;
    *(void *)(v76 + 32) = v74;
    *(unsigned char *)(v76 + 40) = 0;
    sub_10000ACE0(v64, &qword_1001A7C80);
    sub_10006E244(v93, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    sub_100078480();
    swift_release();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v77 = v90;
    sub_10000A428(v75, v90, &qword_1001A7C70);
    uint64_t v78 = (_OWORD *)(v77 + *(int *)(v98 + 36));
    long long v79 = v101;
    *uint64_t v78 = v100;
    v78[1] = v79;
    v78[2] = v102;
    sub_10000ACE0(v75, &qword_1001A7C70);
    uint64_t v62 = &qword_1001A7C60;
    uint64_t v63 = v92;
    sub_10000A3C4(v77, v92, &qword_1001A7C60);
    sub_10000A428(v63, v97, &qword_1001A7C60);
  }
  swift_storeEnumTagMultiPayload();
  sub_1000759D8(&qword_1001A7C08, &qword_1001A7C10, (void (*)(void))sub_1000763FC);
  sub_100076564();
  _ConditionalContent<>.init(storage:)();
  return sub_10000ACE0(v63, v62);
}

uint64_t sub_10007386C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v77 = a6;
  uint64_t v92 = a2;
  uint64_t v93 = a3;
  uint64_t v94 = a4;
  uint64_t v95 = a5;
  uint64_t v11 = type metadata accessor for VenueEventView();
  uint64_t v72 = *(void *)(v11 - 8);
  uint64_t v74 = *(void *)(v72 + 64);
  __chkstk_darwin(v11, v12);
  uint64_t v70 = (char *)&v57 - v13;
  uint64_t v76 = sub_10000570C(&qword_1001A56B0);
  uint64_t v80 = *(void *)(v76 - 8);
  uint64_t v15 = __chkstk_darwin(v76, v14);
  uint64_t v75 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v17);
  uint64_t v71 = (char *)&v57 - v18;
  uint64_t v73 = sub_10000570C(&qword_1001A7CA0);
  uint64_t v79 = *(void *)(v73 - 8);
  uint64_t v20 = __chkstk_darwin(v73, v19);
  uint64_t v69 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v22);
  uint64_t v78 = (char *)&v57 - v23;
  uint64_t v57 = a1;
  sub_10006E244(v11, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  uint64_t v24 = a2;
  uint64_t v85 = a2;
  uint64_t v86 = a3;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v87 = a4;
  uint64_t v88 = a5;
  swift_getKeyPath();
  uint64_t v92 = v24;
  uint64_t v93 = v25;
  uint64_t v65 = v24;
  uint64_t v66 = v25;
  uint64_t v94 = a4;
  uint64_t v95 = a5;
  uint64_t v67 = a4;
  uint64_t v68 = a5;
  type metadata accessor for VenueEventViewModel();
  swift_getWitnessTable();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v27 = v92;
  uint64_t v62 = v92;
  uint64_t v59 = v93;
  uint64_t v60 = v94;
  uint64_t v58 = v95;
  uint64_t v63 = v11;
  sub_10006E244(v11, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  uint64_t v81 = v24;
  uint64_t v82 = v25;
  uint64_t v83 = v26;
  uint64_t v84 = a5;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v29 = v101;
  uint64_t v28 = v102;
  uint64_t v61 = v101;
  LOBYTE(v26) = v103;
  uint64_t v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter;
  uint64_t v30 = v57;
  uint64_t v31 = sub_10006E244(v11, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v32 = (uint64_t *)(v31 + *(void *)(*(void *)v31 + 208));
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v92 = v27;
  uint64_t v93 = v59;
  uint64_t v94 = v60;
  uint64_t v95 = v58;
  uint64_t v96 = v29;
  uint64_t v97 = v28;
  char v98 = v26;
  uint64_t v99 = v34;
  uint64_t v100 = v33;
  uint64_t v35 = *(void *)(v30 + 48);
  char v36 = *(unsigned char *)(v30 + 56);
  char v89 = *(unsigned char *)(v30 + 40);
  uint64_t v90 = v35;
  char v91 = v36;
  sub_10000570C(&qword_1001A7BF0);
  FocusState.projectedValue.getter();
  sub_100076640();
  uint64_t v37 = v78;
  View.focused(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v38 = v63;
  sub_10006E244(v63, v64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v39 = v72;
  uint64_t v40 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v70, v30, v38);
  unint64_t v41 = (*(unsigned __int8 *)(v39 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
  uint64_t v42 = (char *)swift_allocObject();
  uint64_t v43 = v66;
  *((void *)v42 + 2) = v65;
  *((void *)v42 + 3) = v43;
  uint64_t v44 = v68;
  *((void *)v42 + 4) = v67;
  *((void *)v42 + 5) = v44;
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(&v42[v41], v40, v38);
  char v45 = v71;
  Button<>.init(_:action:)();
  uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v79 + 16);
  char v47 = v69;
  uint64_t v48 = v73;
  v46(v69, v37, v73);
  uint64_t v49 = *(void (**)(char *, char *, uint64_t))(v80 + 16);
  uint64_t v50 = v75;
  uint64_t v51 = v76;
  v49(v75, v45, v76);
  uint64_t v52 = v77;
  v46(v77, v47, v48);
  uint64_t v53 = sub_10000570C(&qword_1001A7CA8);
  v49(&v52[*(int *)(v53 + 48)], v50, v51);
  uint64_t v54 = *(void (**)(char *, uint64_t))(v80 + 8);
  v54(v45, v51);
  uint64_t v55 = *(void (**)(char *, uint64_t))(v79 + 8);
  v55(v78, v48);
  v54(v50, v51);
  return ((uint64_t (*)(char *, uint64_t))v55)(v47, v48);
}

uint64_t sub_100073FD8()
{
  return Transaction.animation.setter();
}

uint64_t sub_100074000@<X0>(uint64_t a1@<X0>, uint64_t (*a2)()@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v156 = a5;
  uint64_t v152 = a3;
  uint64_t v153 = a4;
  uint64_t v150 = a6;
  uint64_t v151 = a2;
  uint64_t v11 = type metadata accessor for DismissAction();
  uint64_t v140 = *(void *)(v11 - 8);
  uint64_t v141 = v11;
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v139 = (char *)&v128 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = v14;
  __chkstk_darwin(v13, v15);
  uint64_t v138 = (uint64_t)&v128 - v16;
  *(void *)&long long v174 = a2;
  *((void *)&v174 + 1) = a3;
  *(void *)&long long v175 = a4;
  *((void *)&v175 + 1) = a5;
  uint64_t v17 = type metadata accessor for VenueEventView();
  uint64_t v18 = *(void *)(v17 - 8);
  unint64_t v144 = *(void *)(v18 + 64);
  __chkstk_darwin(v17, v19);
  uint64_t v21 = (char *)&v128 - v20;
  uint64_t v149 = sub_10000570C(&qword_1001A56B0);
  uint64_t v147 = *(void *)(v149 - 8);
  __chkstk_darwin(v149, v22);
  unint64_t v146 = (char *)&v128 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000570C(&qword_1001A7CB0);
  uint64_t v25 = v24 - 8;
  __chkstk_darwin(v24, v26);
  uint64_t v28 = (char *)&v128 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v148 = sub_10000570C(&qword_1001A7CB8) - 8;
  uint64_t v30 = __chkstk_darwin(v148, v29);
  uint64_t v155 = (uint64_t)&v128 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __chkstk_darwin(v30, v32);
  uint64_t v145 = (uint64_t)&v128 - v34;
  __chkstk_darwin(v33, v35);
  uint64_t v157 = (uint64_t)&v128 - v36;
  uint64_t v143 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter;
  uint64_t v154 = a1;
  sub_10006E244(v17, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v37 = sub_100078570();
  uint64_t v39 = v38;
  swift_release();
  *(void *)&long long v174 = v37;
  *((void *)&v174 + 1) = v39;
  uint64_t v132 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  uint64_t v133 = v18 + 16;
  v132(v21, a1, v17);
  uint64_t v40 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v41 = (v40 + 48) & ~v40;
  uint64_t v130 = v40 | 7;
  unint64_t v131 = v41 + v144;
  uint64_t v42 = (char *)swift_allocObject();
  uint64_t v43 = v152;
  *((void *)v42 + 2) = v151;
  *((void *)v42 + 3) = v43;
  uint64_t v44 = v156;
  *((void *)v42 + 4) = v153;
  *((void *)v42 + 5) = v44;
  uint64_t v134 = v41;
  uint64_t v135 = v21;
  char v45 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
  uint64_t v136 = v18 + 32;
  uint64_t v129 = v45;
  v45(&v42[v41], v21, v17);
  unint64_t v144 = sub_100010B2C();
  uint64_t v46 = v146;
  Button<>.init<A>(_:action:)();
  uint64_t v47 = static Color.blue.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v49 = v147;
  uint64_t v50 = v149;
  (*(void (**)(char *, char *, uint64_t))(v147 + 16))(v28, v46, v149);
  uint64_t v51 = (uint64_t *)&v28[*(int *)(v25 + 44)];
  *uint64_t v51 = KeyPath;
  v51[1] = v47;
  (*(void (**)(char *, uint64_t))(v49 + 8))(v46, v50);
  uint64_t v142 = v17;
  uint64_t v52 = v143;
  sub_10006E244(v17, v143);
  LOBYTE(KeyPath) = sub_100077B38();
  swift_release();
  double v53 = 0.0;
  double v54 = 1.0;
  if (KeyPath) {
    double v55 = 1.0;
  }
  else {
    double v55 = 0.0;
  }
  uint64_t v56 = v145;
  sub_10000A428((uint64_t)v28, v145, &qword_1001A7CB0);
  *(double *)(v56 + *(int *)(v148 + 44)) = v55;
  sub_10000ACE0((uint64_t)v28, &qword_1001A7CB0);
  sub_10000A3C4(v56, v157, &qword_1001A7CB8);
  sub_10006E244(v17, v52);
  uint64_t v57 = sub_100077FD0();
  uint64_t v59 = v58;
  swift_release();
  *(void *)&long long v174 = v57;
  *((void *)&v174 + 1) = v59;
  uint64_t v60 = Text.init<A>(_:)();
  uint64_t v62 = v61;
  char v64 = v63 & 1;
  static Font.Weight.semibold.getter();
  uint64_t v65 = Text.fontWeight(_:)();
  uint64_t v67 = v66;
  char v69 = v68 & 1;
  sub_10000FCC4(v60, v62, v64);
  swift_bridgeObjectRelease();
  static Font.subheadline.getter();
  uint64_t v70 = Text.font(_:)();
  uint64_t v72 = v71;
  char v74 = v73;
  uint64_t v76 = v75;
  swift_release();
  char v77 = v74 & 1;
  sub_10000FCC4(v65, v67, v69);
  swift_bridgeObjectRelease();
  if (!*(unsigned char *)(*(void *)(v154 + 32) + 16)) {
    double v54 = 0.0;
  }
  uint64_t v78 = v142;
  uint64_t v79 = v154;
  if ((sub_10006E11C(v142) & 1) == 0) {
    double v53 = 22.0;
  }
  uint64_t v80 = swift_getKeyPath();
  uint64_t v186 = v70;
  uint64_t v187 = v72;
  char v188 = v77;
  uint64_t v189 = v76;
  double v190 = v54;
  double v191 = v53;
  uint64_t v192 = 0;
  uint64_t v193 = v80;
  char v194 = 1;
  static Alignment.center.getter();
  sub_100123B04(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v174, 0.0, 1, 0.0, 1);
  uint64_t v81 = v72;
  uint64_t v82 = v79;
  char v83 = v77;
  uint64_t v84 = v78;
  sub_10000FCC4(v70, v81, v83);
  swift_release();
  swift_bridgeObjectRelease();
  long long v170 = v182;
  long long v171 = v183;
  long long v172 = v184;
  uint64_t v173 = v185;
  long long v166 = v178;
  long long v167 = v179;
  long long v168 = v180;
  long long v169 = v181;
  long long v162 = v174;
  long long v163 = v175;
  long long v164 = v176;
  long long v165 = v177;
  char v85 = sub_10006E11C(v78);
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  if ((v85 & 1) == 0)
  {
    char v91 = v135;
    v132(v135, v82, v84);
    uint64_t v88 = (char *)swift_allocObject();
    uint64_t v92 = v152;
    *((void *)v88 + 2) = v151;
    *((void *)v88 + 3) = v92;
    uint64_t v93 = v156;
    *((void *)v88 + 4) = v153;
    *((void *)v88 + 5) = v93;
    v129(&v88[v134], v91, v84);
    uint64_t v90 = static Font.title2.getter();
    uint64_t v89 = swift_getKeyPath();
    uint64_t v87 = sub_100076780;
    uint64_t v86 = 3;
  }
  uint64_t v156 = v86;
  if (*(void *)(v82 + *(int *)(v84 + 64)))
  {
    swift_retain();
    char v94 = sub_1000D1500();
    uint64_t v96 = v95;
    swift_release();
    uint64_t v152 = v89;
    uint64_t v153 = v90;
    uint64_t v151 = v87;
    if (v96 && (swift_bridgeObjectRelease(), (v94 & 1) != 0))
    {
      char v127 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v127 & 1) == 0)
      {
        uint64_t v97 = v88;
        uint64_t v104 = 0;
        char v103 = 0;
        uint64_t v148 = 0;
        uint64_t v149 = 0;
        uint64_t v154 = 0;
        goto LABEL_15;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v97 = v88;
    uint64_t v98 = v138;
    sub_10002652C(v138);
    uint64_t v100 = v139;
    uint64_t v99 = v140;
    uint64_t v101 = v141;
    (*(void (**)(char *, uint64_t, uint64_t))(v140 + 16))(v139, v98, v141);
    unint64_t v102 = (*(unsigned __int8 *)(v99 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80);
    uint64_t v148 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v99 + 32))(v148 + v102, v100, v101);
    (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v98, v101);
    uint64_t v154 = static Font.title2.getter();
    uint64_t v149 = swift_getKeyPath();
    char v103 = sub_10000FC50;
    uint64_t v104 = 1;
LABEL_15:
    uint64_t v105 = v155;
    sub_10000A428(v157, v155, &qword_1001A7CB8);
    uint64_t v106 = v105;
    uint64_t v107 = v150;
    sub_10000A428(v106, v150, &qword_1001A7CB8);
    uint64_t v108 = (int *)sub_10000570C(&qword_1001A7CC0);
    uint64_t v109 = v108[12];
    long long v110 = v171;
    v158[8] = v170;
    v158[9] = v171;
    long long v111 = v172;
    v158[10] = v172;
    long long v112 = v166;
    long long v113 = v167;
    v158[4] = v166;
    v158[5] = v167;
    long long v114 = v168;
    long long v115 = v169;
    v158[6] = v168;
    v158[7] = v169;
    long long v116 = v162;
    long long v117 = v163;
    v158[0] = v162;
    v158[1] = v163;
    long long v118 = v164;
    long long v119 = v165;
    v158[2] = v164;
    v158[3] = v165;
    uint64_t v120 = v107 + v109;
    *(_OWORD *)(v120 + 128) = v170;
    *(_OWORD *)(v120 + 144) = v110;
    *(_OWORD *)(v120 + 160) = v111;
    *(_OWORD *)(v120 + 64) = v112;
    *(_OWORD *)(v120 + 80) = v113;
    *(_OWORD *)(v120 + 96) = v114;
    *(_OWORD *)(v120 + 112) = v115;
    *(_OWORD *)uint64_t v120 = v116;
    *(_OWORD *)(v120 + 16) = v117;
    uint64_t v159 = v173;
    *(void *)(v120 + 176) = v173;
    *(_OWORD *)(v120 + 32) = v118;
    *(_OWORD *)(v120 + 48) = v119;
    uint64_t v121 = (void *)(v107 + v108[16]);
    uint64_t v123 = (uint64_t)v151;
    uint64_t v122 = v152;
    *uint64_t v121 = v156;
    v121[1] = v123;
    v121[2] = v97;
    v121[3] = v122;
    v121[4] = v153;
    uint64_t v124 = (uint64_t *)(v107 + v108[20]);
    *uint64_t v124 = v104;
    v124[1] = (uint64_t)v103;
    uint64_t v125 = v149;
    v124[2] = v148;
    v124[3] = v125;
    v124[4] = v154;
    sub_100076850((uint64_t)v158);
    sub_1000768A4(v156, v123);
    sub_1000768A4(v104, (uint64_t)v103);
    sub_10000ACE0(v157, &qword_1001A7CB8);
    sub_1000768F4(v104, (uint64_t)v103);
    sub_1000768F4(v156, v123);
    v160[8] = v170;
    v160[9] = v171;
    v160[10] = v172;
    uint64_t v161 = v173;
    v160[4] = v166;
    v160[5] = v167;
    v160[6] = v168;
    v160[7] = v169;
    v160[0] = v162;
    v160[1] = v163;
    v160[2] = v164;
    v160[3] = v165;
    sub_100076944((uint64_t)v160);
    return sub_10000ACE0(v155, &qword_1001A7CB8);
  }
  type metadata accessor for RemoteViewConfiguration();
  sub_100076078((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  uint64_t result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

uint64_t sub_100074B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v11[0] = a2;
  v11[1] = a3;
  void v11[2] = a4;
  v11[3] = a5;
  uint64_t v6 = type metadata accessor for VenueEventView();
  sub_10006E244(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v7 = (void (*)(void *, void))static Published.subscript.modify();
  *uint64_t v8 = !*v8;
  v7(v11, 0);
  swift_release();
  swift_release();
  swift_release();
  sub_10006E244(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v9 = *(void *)(a1 + *(int *)(v6 + 64));
  if (v9)
  {
    swift_retain();
    sub_100077C78(0, 11, 0, 3u, v9);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100076078((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100074D50(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for VenueEventView();
  sub_10006E244(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_1000787CC();
  swift_release();
  sub_10006E244(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v3 = *(void *)(a1 + *(int *)(v2 + 64));
  if (v3)
  {
    swift_retain();
    sub_100077C78(0, 0, 0, 3u, v3);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100076078((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

void sub_100074E78(double *a1@<X8>, double a2@<D2>, double a3@<D3>)
{
  *a1 = a2;
  a1[1] = a3;
}

uint64_t sub_100074E80()
{
  uint64_t v0 = type metadata accessor for VenueEventView();
  sub_10006E244(v0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_1000787F8();
  return swift_release();
}

uint64_t sub_100074EF4()
{
  return sub_1000788EC();
}

uint64_t sub_100074F18(uint64_t a1)
{
  return sub_100079CF4(a1);
}

uint64_t sub_100074F3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v25 = a5;
  uint64_t v26 = a2;
  uint64_t v27 = a4;
  uint64_t v28 = a6;
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(a1, a2);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for EventView();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v25 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  unint64_t v20 = (*(unsigned __int8 *)(v8 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v21 = (char *)swift_allocObject();
  uint64_t v22 = v25;
  *((void *)v21 + 2) = v26;
  *((void *)v21 + 3) = a3;
  *((void *)v21 + 4) = v27;
  *((void *)v21 + 5) = v22;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v21[v20], v10, a3);
  sub_100123368((uint64_t)sub_10012576C, 0, (uint64_t)v16);
  swift_getWitnessTable();
  sub_1001221F0(v16, v11);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v12 + 8);
  v23(v16, v11);
  sub_1001221F0(v19, v11);
  return ((uint64_t (*)(char *, uint64_t))v23)(v19, v11);
}

uint64_t sub_1000751C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EventViewModel();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a3);
  return sub_10011EC14((uint64_t)v7);
}

uint64_t sub_1000752A0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100078900();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000752D0()
{
  return sub_100078A04();
}

uint64_t sub_1000752F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = type metadata accessor for VenueEventView();
  uint64_t v8 = sub_10006E244(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  a6(v8, v9, v10, v11);
  return swift_release();
}

uint64_t sub_100075364@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v29 = a4;
  uint64_t v26 = a1;
  uint64_t v30 = a6;
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  uint64_t v8 = type metadata accessor for VenueEventView();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v25 - v11;
  uint64_t v13 = type metadata accessor for FilterView();
  uint64_t v27 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  unint64_t v20 = (char *)&v25 - v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v26, v8);
  unint64_t v21 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v22 = (char *)swift_allocObject();
  *((void *)v22 + 2) = v28;
  *((void *)v22 + 3) = a3;
  *((void *)v22 + 4) = v29;
  *((void *)v22 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v22[v21], v12, v8);
  sub_1000806FC((uint64_t)v17);
  swift_getWitnessTable();
  sub_1001221F0(v17, v13);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v27 + 8);
  v23(v17, v13);
  sub_1001221F0(v20, v13);
  return ((uint64_t (*)(char *, uint64_t))v23)(v20, v13);
}

Swift::String *sub_1000755F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for FilterViewModel.FilterConfiguration();
  uint64_t v9 = type metadata accessor for Binding();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)v17 - v12;
  type metadata accessor for FilterViewModel();
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  uint64_t v14 = type metadata accessor for VenueEventView();
  sub_10006E244(v14, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  v17[0] = a2;
  v17[1] = a3;
  v17[2] = a4;
  v17[3] = a5;
  swift_getKeyPath();
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  type metadata accessor for VenueEventViewModel();
  swift_getWitnessTable();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v15 = sub_1000227BC((uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  return v15;
}

uint64_t sub_1000757B0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for VenueEventView();
  sub_10006E244(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  if (*(void *)(a1 + *(int *)(v2 + 64)))
  {
    uint64_t v3 = swift_retain();
    sub_100078D94(v3);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100076078((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000758A0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for VenueEventView();
  sub_10006E244(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v3 = *(void *)(a1 + *(int *)(v2 + 64));
  if (v3)
  {
    swift_retain();
    sub_100077C78(0, 2, 0, 3u, v3);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100076078((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000759A8()
{
  return sub_1000759D8(&qword_1001A7B60, &qword_1001A7B68, (void (*)(void))sub_100075A54);
}

uint64_t sub_1000759D8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100075A54()
{
  unint64_t result = qword_1001A7B70;
  if (!qword_1001A7B70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7B70);
  }
  return result;
}

unint64_t sub_100075AA8()
{
  unint64_t result = qword_1001A7B80;
  if (!qword_1001A7B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7B80);
  }
  return result;
}

unint64_t sub_100075AFC()
{
  unint64_t result = qword_1001A7B88;
  if (!qword_1001A7B88)
  {
    sub_100004A58(&qword_1001A7B50);
    sub_100004A58(&qword_1001A7B90);
    sub_100075BD0();
    swift_getOpaqueTypeConformance2();
    sub_10000A780(&qword_1001A68C0, &qword_1001A68C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7B88);
  }
  return result;
}

unint64_t sub_100075BD0()
{
  unint64_t result = qword_1001A7B98;
  if (!qword_1001A7B98)
  {
    sub_100004A58(&qword_1001A7B90);
    sub_100076078(&qword_1001A7BA0, (void (*)(uint64_t))type metadata accessor for EventRow);
    sub_10000A780(&qword_1001A65A8, &qword_1001A65B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7B98);
  }
  return result;
}

uint64_t sub_100075CA0()
{
  return sub_100076AA8((uint64_t (*)(void, void, void, void, void))sub_10006FBB0);
}

unint64_t sub_100075CB8()
{
  unint64_t result = qword_1001A7BE0;
  if (!qword_1001A7BE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7BE0);
  }
  return result;
}

uint64_t sub_100075D10()
{
  type metadata accessor for VenueEventView();

  return sub_100074E80();
}

uint64_t sub_100075DBC()
{
  return sub_1000788EC();
}

uint64_t sub_100075DE0(uint64_t a1)
{
  return sub_100079CF4(a1);
}

uint64_t sub_100075E04()
{
  return 32;
}

__n128 sub_100075E10(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_100075E1C()
{
  return swift_deallocObject();
}

uint64_t sub_100075E2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100074F3C(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_100075E38@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100078900();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100075E68()
{
  return sub_100078A04();
}

uint64_t sub_100075E90()
{
  return 32;
}

__n128 sub_100075E9C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_100075EAC()
{
  return sub_1000766B0((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100078B0C);
}

uint64_t sub_100075EC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = *(void *)(type metadata accessor for VenueEventView() - 8);
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_100075364(v8, v3, v4, v5, v6, a1);
}

uint64_t sub_100075F78()
{
  return sub_1000766B0((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100078C80);
}

uint64_t sub_100075F94()
{
  return FocusState.wrappedValue.setter();
}

uint64_t sub_100076044()
{
  return sub_100076798((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000757B0);
}

uint64_t sub_100076060()
{
  return sub_100076798((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000758A0);
}

uint64_t sub_100076078(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::String *sub_1000760C4()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v5 = *(void *)(type metadata accessor for VenueEventView() - 8);
  uint64_t v6 = (uint64_t)v0 + ((*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_1000755F0(v6, v1, v2, v3, v4);
}

uint64_t sub_100076170()
{
  return 32;
}

__n128 sub_10007617C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_100076188()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t sub_100076210()
{
  return sub_1000751C0(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80)), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100076254()
{
  return sub_100076AA8((uint64_t (*)(void, void, void, void, void))sub_100070794);
}

uint64_t sub_100076270()
{
  type metadata accessor for VenueEventView();

  return sub_100072D04();
}

uint64_t sub_100076324()
{
  return sub_100076AA8(sub_100072E40);
}

uint64_t sub_10007633C()
{
  return sub_100076AA8((uint64_t (*)(void, void, void, void, void))sub_100073004);
}

unint64_t sub_100076354()
{
  unint64_t result = qword_1001A7C00;
  if (!qword_1001A7C00)
  {
    sub_100004A58(&qword_1001A7BF8);
    sub_1000759D8(&qword_1001A7C08, &qword_1001A7C10, (void (*)(void))sub_1000763FC);
    sub_100076564();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7C00);
  }
  return result;
}

uint64_t sub_1000763FC()
{
  return sub_1000759D8(&qword_1001A7C18, &qword_1001A7C20, (void (*)(void))sub_10007642C);
}

unint64_t sub_10007642C()
{
  unint64_t result = qword_1001A7C28;
  if (!qword_1001A7C28)
  {
    sub_100004A58(&qword_1001A7C30);
    sub_1000764C8(&qword_1001A7C38, &qword_1001A7C40, &qword_1001A7C48, &qword_1001A7C50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7C28);
  }
  return result;
}

uint64_t sub_1000764C8(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    sub_10000A780(a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100076564()
{
  unint64_t result = qword_1001A7C58;
  if (!qword_1001A7C58)
  {
    sub_100004A58(&qword_1001A7C60);
    sub_1000764C8(&qword_1001A7C68, &qword_1001A7C70, &qword_1001A7C78, &qword_1001A7C80);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7C58);
  }
  return result;
}

uint64_t sub_100076608()
{
  return 32;
}

__n128 sub_100076614(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_100076628()
{
  return 32;
}

__n128 sub_100076634(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

unint64_t sub_100076640()
{
  unint64_t result = qword_1001A8B60;
  if (!qword_1001A8B60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8B60);
  }
  return result;
}

uint64_t sub_100076698()
{
  return sub_1000766B0((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100078390);
}

uint64_t sub_1000766B0(void (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = *(void *)(type metadata accessor for VenueEventView() - 8);
  return sub_1000752F8((uint64_t)v1 + ((*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v3, v4, v5, v6, a1);
}

uint64_t sub_100076754()
{
  return sub_100076798((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_100074B80);
}

uint64_t sub_100076780()
{
  return sub_100076798((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_100074D50);
}

uint64_t sub_100076798(uint64_t (*a1)(char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = *(void *)(type metadata accessor for VenueEventView() - 8);
  uint64_t v7 = (char *)v1 + ((*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return a1(v7, v2, v3, v4, v5);
}

uint64_t sub_100076850(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000768A4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1000768F4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_100076944(uint64_t a1)
{
  return a1;
}

uint64_t sub_100076998()
{
  uint64_t v1 = type metadata accessor for DismissAction();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t sub_100076A28()
{
  return sub_100072D7C(*(void *)(v0 + 48), *(double *)(v0 + 56));
}

uint64_t sub_100076A50()
{
  return sub_100076AA8((uint64_t (*)(void, void, void, void, void))sub_100070DA8);
}

uint64_t sub_100076A68()
{
  return sub_100076AA8((uint64_t (*)(void, void, void, void, void))sub_1000711F0);
}

double sub_100076A80@<D0>(uint64_t a1@<X8>)
{
  return sub_100072AC8(a1);
}

uint64_t sub_100076A90()
{
  return sub_100076AA8((uint64_t (*)(void, void, void, void, void))sub_10007165C);
}

uint64_t sub_100076AA8(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100076AC4()
{
  uint64_t v1 = type metadata accessor for VenueEventView();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  sub_10001274C();
  swift_release();
  swift_release();
  uint64_t v3 = v2 + *(int *)(v1 + 60);
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_100076C18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v9 = *(void *)(type metadata accessor for VenueEventView() - 8);
  uint64_t v10 = (uint64_t)v2 + ((*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));

  return sub_100071D68(a1, v10, v5, v6, v7, v8, a2);
}

uint64_t sub_100076CD4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100076D3C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100076D9C()
{
  long long v8 = *(_OWORD *)(v0 + 24);
  uint64_t v1 = type metadata accessor for VenueEventView();
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v9 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v3 = *(void *)(v8 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  sub_10001274C();
  swift_release();
  swift_release();
  unint64_t v5 = v0 + v2 + *(int *)(v1 + 60);
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for DismissAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  swift_release();
  (*(void (**)(unint64_t, void))(v3 + 8))(v0 + ((v2 + v9 + v4) & ~v4), v8);
  return swift_deallocObject();
}

uint64_t sub_100076F8C()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v5 = *(void *)(type metadata accessor for VenueEventView() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (uint64_t)v0
     + ((v6 + *(void *)(v5 + 64) + *(unsigned __int8 *)(*(void *)(v2 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80));

  return sub_100072874((uint64_t)v0 + v6, v7, v1, v2, v3, v4);
}

ValueMetadata *type metadata accessor for NavigationBarWidthPreferenceKey()
{
  return &type metadata for NavigationBarWidthPreferenceKey;
}

uint64_t sub_100077098()
{
  return swift_getWitnessTable();
}

unint64_t sub_100077884(uint64_t a1)
{
  unint64_t result = sub_100075CB8();
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_1000778AC()
{
  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    sub_1000206BC(319, &qword_1001A6E38);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Optional();
      type metadata accessor for Published();
      if (v2 <= 0x3F)
      {
        sub_1000206BC(319, &qword_1001A7D58);
        if (v3 <= 0x3F)
        {
          sub_1000206BC(319, qword_1001A5CE0);
          if (v4 <= 0x3F)
          {
            type metadata accessor for FilterViewModel.FilterConfiguration();
            type metadata accessor for Published();
            if (v5 <= 0x3F)
            {
              type metadata accessor for Array();
              type metadata accessor for Published();
              if (v6 <= 0x3F) {
                swift_initClassMetadata2();
              }
            }
          }
        }
      }
    }
  }
}

BOOL sub_100077B38()
{
  return Array.count.getter() > 5;
}

uint64_t sub_100077B88()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

void sub_100077C78(char a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t v11 = *v5;
  sub_10000570C(&qword_1001A5390);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_100152B90;
  uint64_t v13 = (*(uint64_t (**)(void))(*(void *)(v11 + 96) + 16))(*(void *)(v11 + 80));
  *(void *)(v12 + 56) = &type metadata for AnalyticsString;
  *(void *)(v12 + 64) = &off_1001AAD38;
  *(unsigned char *)(v12 + 32) = 0;
  *(void *)(v12 + 40) = v13;
  *(void *)(v12 + 48) = v14;
  *(void *)(v12 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v12 + 104) = &off_1001AAD10;
  *(unsigned char *)(v12 + 72) = 4;
  *(void *)(v12 + 136) = &type metadata for AnalyticsModuleName;
  *(void *)(v12 + 144) = &off_1001AAD98;
  *(unsigned char *)(v12 + 112) = a1;
  *(void *)(v12 + 176) = &type metadata for AnalyticsModuleAction;
  *(void *)(v12 + 184) = &off_1001AAD70;
  *(void *)(v12 + 152) = a2;
  *(void *)(v12 + 160) = a3;
  *(unsigned char *)(v12 + 168) = a4;
  if (*(void *)(a5 + 72))
  {
    uint64_t v15 = *(void *)(a5 + 64);
    unint64_t v16 = *(void *)(a5 + 72);
  }
  else
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0xE000000000000000;
  }
  uint64_t v31 = &type metadata for AnalyticsString;
  uint64_t v32 = (void *(*)())&off_1001AAD38;
  LOBYTE(aBlock) = 1;
  uint64_t v29 = v15;
  uint64_t v30 = (Class (*)(uint64_t))v16;
  sub_10000751C(a2, a3, a4);
  uint64_t v34 = (char *)v12;
  unint64_t v17 = *(void *)(v12 + 16);
  unint64_t v18 = *(void *)(v12 + 24);
  swift_bridgeObjectRetain();
  if (v17 >= v18 >> 1) {
    uint64_t v34 = sub_1001378BC((char *)(v18 > 1), v17 + 1, 1, (char *)v12);
  }
  uint64_t v19 = sub_100007534((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v19, v19);
  uint64_t v21 = (char *)&v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v22 + 16))(v21);
  sub_100116BFC(v17, (uint64_t)v21, (uint64_t *)&v34, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_1001AAD38);
  sub_100007584((uint64_t)&aBlock);
  uint64_t v23 = v34;
  NSString v24 = String._bridgeToObjectiveC()();
  uint64_t v25 = (void *)swift_allocObject();
  v25[2] = 0xD00000000000001ELL;
  v25[3] = 0x800000010015D360;
  v25[4] = v23;
  uint64_t v32 = sub_100007614;
  uint64_t v33 = v25;
  aBlock = _NSConcreteStackBlock;
  uint64_t v29 = 1107296256;
  uint64_t v30 = sub_100116B70;
  uint64_t v31 = (ValueMetadata *)&unk_100197D18;
  uint64_t v26 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v26);
  swift_bridgeObjectRelease();
}

uint64_t sub_100077FD0()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 96) + 24))(*(void *)(*(void *)v0 + 80));
}

uint64_t sub_100078048()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 96) + 32))(*(void *)(*(void *)v0 + 80));
}

uint64_t sub_1000780C0()
{
  return sub_100078914();
}

uint64_t sub_1000780D4()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1000781C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000780D4();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000781F0()
{
  return sub_100078230();
}

uint64_t sub_100078230()
{
  return static Published.subscript.setter();
}

uint64_t sub_100078328@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1000780C0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100078358()
{
  return sub_100078A18();
}

void sub_100078390()
{
  sub_100078230();
  sub_100078A18();
  uint64_t v0 = self;
  v2[4] = sub_1000B24E0;
  v2[5] = 0;
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 1107296256;
  v2[2] = sub_100044790;
  v2[3] = &unk_100197D40;
  uint64_t v1 = _Block_copy(v2);
  [v0 animateWithDuration:0 delay:v1 options:0 animations:0.3 completion:0.0];
  _Block_release(v1);
}

double sub_100078480()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100078570()
{
  uint64_t v0 = type metadata accessor for FilterViewModel.FilterConfiguration();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  unint64_t v4 = (uint64_t *)((char *)&v17 - v3);
  unint64_t v5 = self;
  id v6 = [v5 mainBundle];
  v7._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  v18._object = (void *)0xE000000000000000;
  v7._object = (void *)0x800000010015E640;
  v8._uint64_t countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v18._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v18);

  id v9 = [v5 mainBundle];
  v19._object = (void *)0xE000000000000000;
  v10._object = (void *)0x800000010015DA90;
  v10._uint64_t countAndFlagsBits = 0xD000000000000025;
  v11._uint64_t countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v19._uint64_t countAndFlagsBits = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, (NSBundle)v9, v11, v19)._countAndFlagsBits;

  sub_10000570C(&qword_1001A56F0);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_100153180;
  sub_100078B34();
  uint64_t v14 = *v4;
  (*(void (**)(uint64_t *, uint64_t))(v1 + 8))(v4, v0);
  *(void *)(v13 + 56) = &type metadata for Int;
  *(void *)(v13 + 64) = &protocol witness table for Int;
  *(void *)(v13 + 32) = v14;
  uint64_t v15 = String.init(format:_:)();
  swift_bridgeObjectRelease();
  if (!sub_100078E34()) {
    uint64_t v15 = countAndFlagsBits;
  }
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1000787CC()
{
  return sub_100078A18();
}

uint64_t sub_1000787F8()
{
  return static Published.subscript.setter();
}

uint64_t sub_1000788EC()
{
  return sub_100078B48();
}

uint64_t sub_100078900()
{
  return sub_100078914();
}

uint64_t sub_100078914()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100078A04()
{
  return sub_100078A18();
}

uint64_t sub_100078A18()
{
  return static Published.subscript.setter();
}

uint64_t sub_100078B0C()
{
  sub_100078F28();

  return sub_100079054();
}

uint64_t sub_100078B34()
{
  return sub_100078B48();
}

uint64_t sub_100078B48()
{
  return swift_release();
}

uint64_t sub_100078C38()
{
  return sub_100078B34();
}

uint64_t sub_100078C5C(uint64_t a1)
{
  return sub_100079E7C(a1);
}

uint64_t sub_100078C80()
{
  uint64_t v0 = sub_1000780D4();
  unint64_t v2 = v1;
  swift_bridgeObjectRelease();
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = v0 & 0xFFFFFFFFFFFFLL;
  }
  if (v3)
  {
    sub_100078F28();
    type metadata accessor for Array();
    swift_getWitnessTable();
    _ArrayProtocol.filter(_:)();
    return sub_100079054();
  }
  else
  {
    sub_100078F28();
    return sub_100079054();
  }
}

uint64_t sub_100078D94(uint64_t a1)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)(*(void *)v1 + 96) + 16))(*(void *)(*(void *)v1 + 80));
  sub_100116C94(v3, v4, 4, a1);

  return swift_bridgeObjectRelease();
}

BOOL sub_100078E34()
{
  uint64_t v0 = type metadata accessor for FilterViewModel.FilterConfiguration();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (uint64_t *)((char *)&v7 - v3);
  sub_100078B34();
  uint64_t v5 = *v4;
  (*(void (**)(uint64_t *, uint64_t))(v1 + 8))(v4, v0);
  return v5 > 0;
}

uint64_t sub_100078F28()
{
  uint64_t v1 = type metadata accessor for FilterViewModel.FilterConfiguration();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v9 - v4;
  if (sub_100078E34())
  {
    sub_100078B34();
    uint64_t v6 = *((void *)v5 + 2);
    uint64_t v7 = *(void (**)(char *, uint64_t))(v2 + 8);
    swift_bridgeObjectRetain();
    v7(v5, v1);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + *(void *)(*(void *)v0 + 120));
    swift_bridgeObjectRetain();
  }
  return v6;
}

uint64_t sub_100079054()
{
  return static Published.subscript.setter();
}

uint64_t sub_100079148(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 104);
  uint64_t v3 = *(void *)(*(void *)a2 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v6);
  Swift::String v8 = (char *)v15 - v7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 208))(v3, v2);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = sub_100080074(AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
  v15[2] = v10;
  v15[3] = v12;
  v15[0] = sub_1000780D4();
  v15[1] = v13;
  sub_100010B2C();
  LOBYTE(v10) = StringProtocol.localizedStandardContains<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t sub_100079314()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 112));
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 128);
  uint64_t v2 = sub_10000570C(&qword_1001A57C8);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  uint64_t v4 = v0 + *(void *)(*(void *)v0 + 136);
  type metadata accessor for Optional();
  uint64_t v5 = type metadata accessor for Published();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = v0 + *(void *)(*(void *)v0 + 144);
  uint64_t v7 = sub_10000570C(&qword_1001A7D60);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  v3(v0 + *(void *)(*(void *)v0 + 152), v2);
  uint64_t v8 = v0 + *(void *)(*(void *)v0 + 160);
  uint64_t v9 = sub_10000570C(&qword_1001A57D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v0 + *(void *)(*(void *)v0 + 168);
  type metadata accessor for FilterViewModel.FilterConfiguration();
  uint64_t v11 = type metadata accessor for Published();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  uint64_t v12 = v0 + *(void *)(*(void *)v0 + 176);
  type metadata accessor for Array();
  uint64_t v13 = type metadata accessor for Published();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000796D4()
{
  sub_100079314();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for VenueEventViewModel()
{
  return swift_getGenericMetadata();
}

uint64_t sub_100079744()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100079784(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100079794()
{
  return swift_release();
}

uint64_t sub_10007979C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1000780C0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000797CC()
{
  return sub_100078A18();
}

uint64_t sub_100079804()
{
  return 32;
}

__n128 sub_100079810(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_10007981C(uint64_t a1)
{
  return sub_100079148(a1, v1) & 1;
}

uint64_t sub_10007983C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100077B88();
  *a1 = result;
  return result;
}

uint64_t sub_100079868()
{
  return sub_100079054();
}

uint64_t sub_100079894()
{
  return 32;
}

__n128 sub_1000798A0(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1000798AC()
{
  return sub_100078B34();
}

uint64_t sub_1000798D0(uint64_t a1)
{
  return sub_100079E7C(a1);
}

uint64_t sub_1000798F4()
{
  return 32;
}

__n128 sub_100079900(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_10007990C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v10);
  uint64_t v12 = (char *)&v32 - v11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v32 = *(void *)(v15 - 8);
  uint64_t v33 = v15;
  __chkstk_darwin(v15, v16);
  Swift::String v18 = (char *)&v32 - v17;
  Swift::String v19 = *(void (**)(uint64_t, uint64_t))(a5 + 208);
  uint64_t v34 = a1;
  v19(a3, a5);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
  uint64_t v35 = v20;
  uint64_t v21 = swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  swift_getWitnessTable();
  Collection.first.getter();
  swift_bridgeObjectRelease();
  uint64_t v22 = *(void *)(v14 - 8);
  int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v18, 1, v14);
  if (v23 == 1)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v18, v33);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 152))(a3, a5);
    uint64_t v26 = v27;
  }
  else
  {
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 40))(v14, v21);
    uint64_t v26 = v25;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v18, v14);
  }
  type metadata accessor for PromotionalAssetsController();
  uint64_t v28 = swift_allocObject();
  uint64_t v29 = v28 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
  uint64_t v30 = type metadata accessor for ArtistPromotionalAssets();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v29, 1, 1, v30);
  *(void *)(v28 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__error) = 0;
  *(void *)(v28 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__emptyScheduleViewModel) = 0;
  ObservationRegistrar.init()();
  *(void *)(v28 + 16) = v24;
  *(void *)(v28 + 24) = v26;
  *(unsigned char *)(v28 + 32) = v23 != 1;
  return v28;
}

uint64_t sub_100079CF4(uint64_t a1)
{
  long long v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 88);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)v14 - v8;
  uint64_t v15 = v3[10];
  uint64_t v10 = v15;
  uint64_t v16 = v4;
  uint64_t v17 = v3[12];
  uint64_t v11 = v17;
  uint64_t v18 = v3[13];
  uint64_t v12 = v18;
  swift_getKeyPath();
  v14[0] = v10;
  v14[1] = v4;
  v14[2] = v11;
  _OWORD v14[3] = v12;
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t sub_100079E7C(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v5 = *(void *)(*v1 + 104);
  uint64_t v6 = type metadata accessor for FilterViewModel.FilterConfiguration();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)v14 - v9;
  uint64_t v15 = *(void *)(v3 + 80);
  uint64_t v11 = v15;
  uint64_t v16 = v4;
  uint64_t v17 = *(void *)(v3 + 96);
  uint64_t v12 = v17;
  uint64_t v18 = v5;
  swift_getKeyPath();
  v14[0] = v11;
  v14[1] = v4;
  v14[2] = v12;
  _OWORD v14[3] = v5;
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t sub_10007A004@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000780D4();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10007A030()
{
  return sub_100078230();
}

uint64_t sub_10007A070()
{
  return 32;
}

__n128 sub_10007A07C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_10007A090()
{
  return 32;
}

__n128 sub_10007A09C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_10007A0B0()
{
  return 32;
}

__n128 sub_10007A0BC(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_10007A0C8(double *a1@<X8>)
{
  *a1 = sub_100078480();
}

uint64_t sub_10007A0F4()
{
  return sub_1000787F8();
}

uint64_t sub_10007A11C()
{
  return 32;
}

__n128 sub_10007A128(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_10007A13C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_10007A1B4()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10007A228(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  sub_10000570C(&qword_1001A5760);
  v3[7] = swift_task_alloc();
  v3[8] = swift_task_alloc();
  v3[9] = swift_task_alloc();
  type metadata accessor for MainActor();
  v3[10] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[11] = v5;
  v3[12] = v4;
  return _swift_task_switch(sub_10007A310, v5, v4);
}

uint64_t sub_10007A310()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = sub_10000570C(&qword_1001A5490);
  v0[13] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v0[14] = v5;
  v0[15] = (v4 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v5(v1, 1, 1, v3);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_10007AC78(v1, v2);
  swift_retain();
  static Published.subscript.setter();
  sub_10007ACE0(v1);
  swift_getKeyPath();
  swift_getKeyPath();
  v0[2] = 0;
  swift_retain();
  static Published.subscript.setter();
  swift_bridgeObjectRetain();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[16] = v6;
  void *v6 = v0;
  v6[1] = sub_10007A4B8;
  uint64_t v7 = v0[7];
  uint64_t v8 = v0[4];
  uint64_t v9 = v0[5];
  return Event<>.init(id:)(v7, v8, v9);
}

uint64_t sub_10007A4B8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 96);
  uint64_t v4 = *(void *)(v2 + 88);
  if (v0) {
    uint64_t v5 = sub_10007A6F0;
  }
  else {
    uint64_t v5 = sub_10007A5F4;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_10007A5F4()
{
  uint64_t v1 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[14];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[7];
  swift_release();
  v1(v4, 0, 1, v2);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_10007AC78(v4, v3);
  swift_retain();
  static Published.subscript.setter();
  sub_10007ACE0(v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10007A6F0()
{
  uint64_t v1 = v0[17];
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  v0[3] = v1;
  swift_retain();
  static Published.subscript.setter();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_10007A7C8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC16EventViewService15EventController__event;
  uint64_t v2 = sub_10000570C(&qword_1001A6388);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC16EventViewService15EventController__error;
  uint64_t v4 = sub_10000570C(&qword_1001A50F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocClassInstance();
}

uint64_t sub_10007A8B4()
{
  return type metadata accessor for EventController();
}

uint64_t type metadata accessor for EventController()
{
  uint64_t result = qword_1001A7DA0;
  if (!qword_1001A7DA0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10007A908()
{
  sub_100004AA0(319, (unint64_t *)&unk_1001A7DB0, &qword_1001A5760);
  if (v0 <= 0x3F)
  {
    sub_100004AA0(319, &qword_1001A4FB0, (uint64_t *)&unk_1001A4FB8);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_10007A9F0()
{
  v22[0] = sub_10000570C(&qword_1001A50F0);
  uint64_t v1 = *(void *)(v22[0] - 8);
  __chkstk_darwin(v22[0], v2);
  uint64_t v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000570C(&qword_1001A6388);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000570C(&qword_1001A5760);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  uint64_t v17 = (char *)v22 - v16;
  uint64_t v18 = v0 + OBJC_IVAR____TtC16EventViewService15EventController__event;
  uint64_t v19 = sub_10000570C(&qword_1001A5490);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v17, 1, 1, v19);
  sub_10007AC78((uint64_t)v17, (uint64_t)v14);
  Published.init(initialValue:)();
  sub_10007ACE0((uint64_t)v17);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v18, v9, v5);
  uint64_t v20 = v0 + OBJC_IVAR____TtC16EventViewService15EventController__error;
  v22[1] = 0;
  sub_10000570C((uint64_t *)&unk_1001A4FB8);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, void))(v1 + 32))(v20, v4, v22[0]);
  return v0;
}

uint64_t sub_10007AC78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A5760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007ACE0(uint64_t a1)
{
  uint64_t v2 = sub_10000570C(&qword_1001A5760);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10007AD50(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))(*(void *)(a1 + 16));
}

uint64_t sub_10007AD68(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10007AE30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
  uint64_t v4 = a3 + *(int *)(type metadata accessor for GuideViewModel() + 36);
  uint64_t result = LocalizedStringKey.init(stringLiteral:)();
  *(void *)uint64_t v4 = result;
  *(void *)(v4 + 8) = v6;
  *(unsigned char *)(v4 + 16) = v7 & 1;
  *(void *)(v4 + 24) = v8;
  return result;
}

uint64_t type metadata accessor for GuideViewModel()
{
  return sub_10000B72C();
}

uint64_t sub_10007AEF0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_10007AF88(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v10 = *(void *)v11;
    *(void *)(v10 + 8) = *(void *)(v11 + 8);
    *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
    *(void *)(v10 + 24) = *(void *)(v11 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_10007B0A4(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10007B11C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10007B1BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10007B270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  long long v9 = v8[1];
  *unint64_t v7 = *v8;
  v7[1] = v9;
  return a1;
}

uint64_t sub_10007B2EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10007B390(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x10007B4DCLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_10007B4F0(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFE0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFE0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFE0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 32);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x10007B6D4);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            v18[2] = 0;
            v18[3] = 0;
            *uint64_t v18 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            v18[1] = a2 - 1;
          }
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t sub_10007B6FC()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

double sub_10007B7C0()
{
  sub_10000570C(&qword_1001A7F40);
  Binding.wrappedValue.getter();
  return v1;
}

uint64_t sub_10007B828@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  unsigned int v7 = (char *)&v13 - v6;
  sub_10007BB18((uint64_t)&v13 - v6);
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    uint64_t v9 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a1, 1, 1, v9);
  }
  else
  {
    if (qword_1001A4E60 != -1) {
      swift_once();
    }
    uint64_t v11 = qword_1001B7508;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v11, v11, AssociatedTypeWitness, AssociatedConformanceWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v7, AssociatedTypeWitness);
  }
}

uint64_t sub_10007BB18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v23 = a1;
  uint64_t v2 = *(void *)(*(void *)v1 + 88);
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v6);
  uint64_t v8 = (char *)&v21 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v21 = *(void *)(v11 - 8);
  uint64_t v22 = v11;
  __n128 v13 = __chkstk_darwin(v11, v12);
  int v15 = (char *)&v21 - v14;
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 208))(v3, v2, v13);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
  uint64_t v24 = v16;
  uint64_t v17 = swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  swift_getWitnessTable();
  Collection.first.getter();
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v15, 1, v10) == 1)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v15, v22);
    uint64_t v19 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v23, 1, 1, v19);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v17 + 56))(v10, v17);
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v15, v10);
  }
}

id sub_10007BEC0()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = type metadata accessor for Optional();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v12 - v4;
  sub_10007BB18((uint64_t)&v12 - v4);
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v5, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
  else
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v5, AssociatedTypeWitness);
    if (v8) {
      return (id)v8;
    }
  }
  id v10 = [self clearColor];
  id v11 = [v10 CGColor];

  return v11;
}

double sub_10007C174()
{
  double v0 = sub_10007B7C0();
  double result = 0.0;
  if (v0 <= 0.0) {
    return sub_10007B7C0() * 0.125;
  }
  return result;
}

double sub_10007C1A8()
{
  double v1 = sub_10007B7C0();
  double result = 1.0;
  if (v1 > 0.0) {
    return sub_10007B7C0() * (1.0 / *(double *)(v0 + *(void *)(*(void *)v0 + 112))) + 1.0;
  }
  return result;
}

uint64_t sub_10007C1FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, _OWORD *a8, double a9, double a10)
{
  uint64_t v20 = swift_allocObject();
  sub_10007C2AC(a1, a9, a10, a2, a3, a4, a5, a6, a7, a8);
  return v20;
}

char *sub_10007C2AC(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, _OWORD *a10)
{
  uint64_t v19 = *(void *)v10;
  *((void *)v10 + 2) = a1;
  (*(void (**)(char *))(*(void *)(*(void *)(v19 + 80) - 8) + 32))(&v10[*(void *)(v19 + 104)]);
  *(double *)&v10[*(void *)(*(void *)v10 + 112)] = a2;
  uint64_t v20 = &v10[*(void *)(*(void *)v10 + 120)];
  *(void *)uint64_t v20 = a5;
  *((void *)v20 + 1) = a6;
  *((double *)v20 + 2) = a3;
  uint64_t v21 = &v10[*(void *)(*(void *)v10 + 128)];
  *(void *)uint64_t v21 = a7;
  *((void *)v21 + 1) = a8;
  v21[16] = a9;
  uint64_t v22 = &v10[*(void *)(*(void *)v10 + 136)];
  long long v23 = a10[1];
  *(_OWORD *)uint64_t v22 = *a10;
  *((_OWORD *)v22 + 1) = v23;
  *((_OWORD *)v22 + 2) = a10[2];
  return v10;
}

uint64_t sub_10007C3E8()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 104));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_10007C4D8()
{
  sub_10007C3E8();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HeroImageLandscapeModel()
{
  return sub_10000B72C();
}

uint64_t sub_10007C54C(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NavigationButton(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for NavigationButton(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for NavigationButton()
{
  return &type metadata for NavigationButton;
}

uint64_t sub_10007C61C()
{
  return swift_getOpaqueTypeConformance2();
}

BOOL sub_10007C640(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10007C654()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10007C69C()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10007C6C8()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10007C70C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = a1;
  uint64_t v38 = a4;
  uint64_t v39 = a1;
  LODWORD(v41) = a1 >> 8;
  uint64_t v7 = type metadata accessor for BorderlessButtonStyle();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  id v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000570C(&qword_1001A7F48);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_10000570C(&qword_1001A7F50);
  uint64_t v42 = *(void *)(v37 - 8);
  __chkstk_darwin(v37, v17);
  uint64_t v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000570C(&qword_1001A7F58);
  __chkstk_darwin(v20 - 8, v21);
  uint64_t v40 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v43 = v6;
  char v44 = (char)v41;
  uint64_t v45 = a2;
  uint64_t v46 = a3;
  swift_retain();
  sub_10000570C(&qword_1001A7F60);
  sub_10007CCB0();
  Button.init(action:label:)();
  BorderlessButtonStyle.init()();
  uint64_t v23 = sub_10000A780(&qword_1001A7F78, &qword_1001A7F48);
  uint64_t v24 = sub_10007DE58(&qword_1001A7F80, (void (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle);
  uint64_t v41 = v19;
  View.buttonStyle<A>(_:)();
  uint64_t v25 = v11;
  uint64_t v26 = v7;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v25, v7);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v27 = v37;
  uint64_t v28 = v38;
  uint64_t v29 = v26;
  uint64_t v30 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v32 = v31;
  uint64_t v47 = v12;
  uint64_t v48 = v29;
  LOBYTE(v13) = v33 & 1;
  uint64_t v49 = v23;
  uint64_t v50 = v24;
  swift_getOpaqueTypeConformance2();
  uint64_t v35 = (uint64_t)v40;
  uint64_t v34 = v41;
  View.accessibility(label:)();
  sub_10000FCC4(v30, v32, v13);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v34, v27);
  return sub_10000A3C4(v35, v28, &qword_1001A7F58);
}

uint64_t sub_10007CBB4@<X0>(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  unsigned int v3 = a1 >> 8;
  uint64_t v4 = Image.init(systemName:)();
  uint64_t result = swift_getKeyPath();
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = result;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

uint64_t sub_10007CC98@<X0>(uint64_t a1@<X8>)
{
  return sub_10007C70C(*v1, *((void *)v1 + 1), *((void *)v1 + 2), a1);
}

uint64_t sub_10007CCA4@<X0>(uint64_t a1@<X8>)
{
  return sub_10007CBB4(*(unsigned __int16 *)(v1 + 16), a1);
}

unint64_t sub_10007CCB0()
{
  unint64_t result = qword_1001A7F68;
  if (!qword_1001A7F68)
  {
    sub_100004A58(&qword_1001A7F60);
    sub_10007CD2C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7F68);
  }
  return result;
}

unint64_t sub_10007CD2C()
{
  unint64_t result = qword_1001A7F70;
  if (!qword_1001A7F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7F70);
  }
  return result;
}

uint64_t sub_10007CD80@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  int v90 = a2;
  uint64_t v98 = a1;
  uint64_t v99 = a5;
  uint64_t v92 = sub_10000570C(&qword_1001A7FA0);
  __chkstk_darwin(v92, v7);
  uint64_t v94 = (uint64_t)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_10000570C(&qword_1001A7FA8);
  __chkstk_darwin(v87, v9);
  uint64_t v88 = (uint64_t)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = sub_10000570C(&qword_1001A7FB0);
  __chkstk_darwin(v91, v11);
  uint64_t v89 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_10000570C(&qword_1001A7FB8);
  uint64_t v14 = __chkstk_darwin(v86, v13);
  uint64_t v16 = (char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  uint64_t v85 = (uint64_t)&v84 - v18;
  uint64_t v95 = sub_10000570C(&qword_1001A7FC0);
  __chkstk_darwin(v95, v19);
  uint64_t v93 = (char *)&v84 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = sub_10000570C(&qword_1001A7FC8);
  __chkstk_darwin(v96, v21);
  uint64_t v97 = (uint64_t)&v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000570C(&qword_1001A5700);
  __chkstk_darwin(v23 - 8, v24);
  uint64_t v26 = (char *)&v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000570C(&qword_1001A7FD0);
  __chkstk_darwin(v27, v28);
  uint64_t v30 = (char *)&v84 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_10000570C(&qword_1001A7FD8);
  uint64_t v33 = __chkstk_darwin(v31, v32);
  uint64_t v35 = (char *)&v84 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33, v36);
  uint64_t v38 = (char *)&v84 - v37;
  a4 &= 1u;
  sub_10007D948(a3, a4);
  char v39 = sub_100026F84(a3, a4);
  sub_1000272B4(a3, a4);
  if (v39)
  {
    static SymbolRenderingMode.palette.getter();
    uint64_t v40 = type metadata accessor for SymbolRenderingMode();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v26, 0, 1, v40);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v42 = (uint64_t *)&v30[*(int *)(v27 + 36)];
    uint64_t v43 = sub_10000570C(&qword_1001A7FE0);
    sub_10000A428((uint64_t)v26, (uint64_t)v42 + *(int *)(v43 + 28), &qword_1001A5700);
    *uint64_t v42 = KeyPath;
    uint64_t v44 = sub_10000570C(&qword_1001A7FE8);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v44 - 8) + 16))(v30, v98, v44);
    sub_10000ACE0((uint64_t)v26, &qword_1001A5700);
    uint64_t v45 = static Color.white.getter();
    uint64_t v46 = static Color.gray.getter();
    sub_10000A428((uint64_t)v30, (uint64_t)v35, &qword_1001A7FD0);
    uint64_t v47 = (uint64_t *)&v35[*(int *)(v31 + 36)];
    *uint64_t v47 = v45;
    v47[1] = v46;
    sub_10000ACE0((uint64_t)v30, &qword_1001A7FD0);
    sub_10000A3C4((uint64_t)v35, (uint64_t)v38, &qword_1001A7FD8);
    sub_10000A428((uint64_t)v38, v97, &qword_1001A7FD8);
    swift_storeEnumTagMultiPayload();
    sub_10007E1D8();
    sub_10007E278();
    _ConditionalContent<>.init(storage:)();
    uint64_t v48 = (uint64_t)v38;
    uint64_t v49 = &qword_1001A7FD8;
  }
  else
  {
    uint64_t v50 = v98;
    uint64_t v84 = v31;
    if ((_BYTE)v90)
    {
      if (v90 == 1)
      {
        static SymbolRenderingMode.palette.getter();
        uint64_t v51 = type metadata accessor for SymbolRenderingMode();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v26, 0, 1, v51);
        uint64_t v52 = swift_getKeyPath();
        double v53 = (uint64_t *)&v30[*(int *)(v27 + 36)];
        uint64_t v54 = sub_10000570C(&qword_1001A7FE0);
        sub_10000A428((uint64_t)v26, (uint64_t)v53 + *(int *)(v54 + 28), &qword_1001A5700);
        *double v53 = v52;
        uint64_t v55 = sub_10000570C(&qword_1001A7FE8);
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v55 - 8) + 16))(v30, v50, v55);
        sub_10000ACE0((uint64_t)v26, &qword_1001A5700);
        uint64_t v56 = static Color.white.getter();
        static Color.white.getter();
        uint64_t v57 = Color.opacity(_:)();
        swift_release();
        sub_10000A428((uint64_t)v30, (uint64_t)v35, &qword_1001A7FD0);
        uint64_t v58 = (uint64_t *)&v35[*(int *)(v84 + 36)];
        *uint64_t v58 = v56;
        v58[1] = v57;
        sub_10000ACE0((uint64_t)v30, &qword_1001A7FD0);
        uint64_t v59 = (uint64_t)v35;
        uint64_t v60 = v38;
        sub_10000A3C4(v59, (uint64_t)v38, &qword_1001A7FD8);
        sub_10000A428((uint64_t)v38, v88, &qword_1001A7FD8);
        swift_storeEnumTagMultiPayload();
        sub_10007E074();
        sub_10007E1D8();
        uint64_t v61 = (uint64_t)v89;
        _ConditionalContent<>.init(storage:)();
        sub_10000A428(v61, v94, &qword_1001A7FB0);
        swift_storeEnumTagMultiPayload();
        sub_10007E038();
        uint64_t v81 = (uint64_t)v93;
        _ConditionalContent<>.init(storage:)();
        sub_10000ACE0(v61, &qword_1001A7FB0);
        uint64_t v82 = (uint64_t)v60;
      }
      else
      {
        static SymbolRenderingMode.palette.getter();
        uint64_t v72 = type metadata accessor for SymbolRenderingMode();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v72 - 8) + 56))(v26, 0, 1, v72);
        uint64_t v73 = swift_getKeyPath();
        char v74 = (uint64_t *)&v30[*(int *)(v27 + 36)];
        uint64_t v75 = sub_10000570C(&qword_1001A7FE0);
        sub_10000A428((uint64_t)v26, (uint64_t)v74 + *(int *)(v75 + 28), &qword_1001A5700);
        uint64_t *v74 = v73;
        uint64_t v76 = sub_10000570C(&qword_1001A7FE8);
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v76 - 8) + 16))(v30, v50, v76);
        sub_10000ACE0((uint64_t)v26, &qword_1001A5700);
        uint64_t v77 = static Color.white.getter();
        static Color.primary.getter();
        uint64_t v78 = Color.opacity(_:)();
        swift_release();
        sub_10000A428((uint64_t)v30, (uint64_t)v35, &qword_1001A7FD0);
        uint64_t v79 = (uint64_t *)&v35[*(int *)(v84 + 36)];
        *uint64_t v79 = v77;
        v79[1] = v78;
        sub_10000ACE0((uint64_t)v30, &qword_1001A7FD0);
        uint64_t v80 = v38;
        sub_10000A3C4((uint64_t)v35, (uint64_t)v38, &qword_1001A7FD8);
        sub_10000A428((uint64_t)v38, v94, &qword_1001A7FD8);
        swift_storeEnumTagMultiPayload();
        sub_10007E038();
        sub_10007E1D8();
        uint64_t v81 = (uint64_t)v93;
        _ConditionalContent<>.init(storage:)();
        uint64_t v82 = (uint64_t)v80;
      }
      uint64_t v71 = &qword_1001A7FD8;
    }
    else
    {
      uint64_t v62 = (uint64_t)v26;
      static SymbolRenderingMode.hierarchical.getter();
      uint64_t v63 = type metadata accessor for SymbolRenderingMode();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v26, 0, 1, v63);
      uint64_t v64 = swift_getKeyPath();
      uint64_t v65 = (uint64_t *)&v30[*(int *)(v27 + 36)];
      uint64_t v66 = sub_10000570C(&qword_1001A7FE0);
      sub_10000A428(v62, (uint64_t)v65 + *(int *)(v66 + 28), &qword_1001A5700);
      uint64_t *v65 = v64;
      uint64_t v67 = sub_10000570C(&qword_1001A7FE8);
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v67 - 8) + 16))(v30, v50, v67);
      sub_10000ACE0(v62, &qword_1001A5700);
      if (qword_1001A4E40 != -1) {
        swift_once();
      }
      uint64_t v68 = qword_1001B74E0;
      sub_10000A428((uint64_t)v30, (uint64_t)v16, &qword_1001A7FD0);
      *(void *)&v16[*(int *)(v86 + 36)] = v68;
      swift_retain();
      sub_10000ACE0((uint64_t)v30, &qword_1001A7FD0);
      uint64_t v69 = v85;
      sub_10000A3C4((uint64_t)v16, v85, &qword_1001A7FB8);
      sub_10000A428(v69, v88, &qword_1001A7FB8);
      swift_storeEnumTagMultiPayload();
      sub_10007E074();
      sub_10007E1D8();
      uint64_t v70 = (uint64_t)v89;
      _ConditionalContent<>.init(storage:)();
      sub_10000A428(v70, v94, &qword_1001A7FB0);
      swift_storeEnumTagMultiPayload();
      sub_10007E038();
      uint64_t v81 = (uint64_t)v93;
      _ConditionalContent<>.init(storage:)();
      sub_10000ACE0(v70, &qword_1001A7FB0);
      uint64_t v82 = v69;
      uint64_t v71 = &qword_1001A7FB8;
    }
    sub_10000ACE0(v82, v71);
    sub_10000A428(v81, v97, &qword_1001A7FC0);
    swift_storeEnumTagMultiPayload();
    sub_10007E1D8();
    sub_10007E278();
    _ConditionalContent<>.init(storage:)();
    uint64_t v48 = v81;
    uint64_t v49 = &qword_1001A7FC0;
  }
  return sub_10000ACE0(v48, v49);
}

uint64_t sub_10007D914@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.accessibilityReduceTransparency.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10007D948(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t destroy for NavigationImageStyle(uint64_t a1)
{
  return sub_1000272B4(*(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s16EventViewService20NavigationImageStyleVwCP_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 16);
  sub_10007D948(v3, v4);
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for NavigationImageStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 16);
  sub_10007D948(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  sub_1000272B4(v5, v6);
  return a1;
}

uint64_t assignWithTake for NavigationImageStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  sub_1000272B4(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for NavigationImageStyle()
{
  return &type metadata for NavigationImageStyle;
}

uint64_t getEnumTagSinglePayload for NavigationButton.ColorScheme(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NavigationButton.ColorScheme(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10007DBC4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationButton.ColorScheme()
{
  return &type metadata for NavigationButton.ColorScheme;
}

unsigned char *storeEnumTagSinglePayload for NavigationButton.Style(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10007DCC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationButton.Style()
{
  return &type metadata for NavigationButton.Style;
}

unint64_t sub_10007DD04()
{
  unint64_t result = qword_1001A7F88;
  if (!qword_1001A7F88)
  {
    sub_100004A58(&qword_1001A7F58);
    sub_100004A58(&qword_1001A7F48);
    type metadata accessor for BorderlessButtonStyle();
    sub_10000A780(&qword_1001A7F78, &qword_1001A7F48);
    sub_10007DE58(&qword_1001A7F80, (void (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle);
    swift_getOpaqueTypeConformance2();
    sub_10007DE58((unint64_t *)&qword_1001A68E8, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7F88);
  }
  return result;
}

uint64_t sub_10007DE58(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10007DEA4()
{
  unint64_t result = qword_1001A7F90;
  if (!qword_1001A7F90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7F90);
  }
  return result;
}

unint64_t sub_10007DEFC()
{
  unint64_t result = qword_1001A7F98;
  if (!qword_1001A7F98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7F98);
  }
  return result;
}

uint64_t sub_10007DF50()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10007DF6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10007CD80(a1, *v2, *((void *)v2 + 1), v2[16], a2);
}

uint64_t sub_10007DF7C()
{
  return EnvironmentValues.symbolRenderingMode.getter();
}

uint64_t sub_10007DFA0(uint64_t a1)
{
  uint64_t v2 = sub_10000570C(&qword_1001A5700);
  __chkstk_darwin(v2 - 8, v3);
  sub_10000A428(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_1001A5700);
  return EnvironmentValues.symbolRenderingMode.setter();
}

uint64_t sub_10007E038()
{
  return sub_10007E304(&qword_1001A7FF0, &qword_1001A7FB0, (void (*)(void))sub_10007E074, (void (*)(void))sub_10007E1D8);
}

unint64_t sub_10007E074()
{
  unint64_t result = qword_1001A7FF8;
  if (!qword_1001A7FF8)
  {
    sub_100004A58(&qword_1001A7FB8);
    sub_10007E114();
    sub_10000A780(&qword_1001A5E98, &qword_1001A5EA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A7FF8);
  }
  return result;
}

unint64_t sub_10007E114()
{
  unint64_t result = qword_1001A8000;
  if (!qword_1001A8000)
  {
    sub_100004A58(&qword_1001A7FD0);
    sub_10000A780(&qword_1001A8008, &qword_1001A7FE8);
    sub_10000A780(&qword_1001A8010, &qword_1001A7FE0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8000);
  }
  return result;
}

unint64_t sub_10007E1D8()
{
  unint64_t result = qword_1001A8018;
  if (!qword_1001A8018)
  {
    sub_100004A58(&qword_1001A7FD8);
    sub_10007E114();
    sub_10000A780(&qword_1001A8020, &qword_1001A8028);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8018);
  }
  return result;
}

uint64_t sub_10007E278()
{
  return sub_10007E304(&qword_1001A8030, &qword_1001A7FC0, (void (*)(void))sub_10007E038, (void (*)(void))sub_10007E1D8);
}

uint64_t sub_10007E2B4()
{
  return sub_10007E304(&qword_1001A8038, &qword_1001A8040, (void (*)(void))sub_10007E1D8, (void (*)(void))sub_10007E278);
}

uint64_t sub_10007E304(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_10007E394(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    *((unsigned char *)v4 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t sub_10007E498(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_10007E510(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_10007E5C4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *sub_10007E674(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_10007E70C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10007E7AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007E7C0);
}

uint64_t sub_10007E7C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10007E870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007E884);
}

uint64_t sub_10007E884(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for CompactDatePickerConfiguration()
{
  uint64_t result = qword_1001A80A0;
  if (!qword_1001A80A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10007E978()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10007EA18()
{
  return sub_10007FB54(&qword_1001A80E0, (void (*)(uint64_t))type metadata accessor for CompactDatePickerConfiguration);
}

uint64_t sub_10007EA60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6 = sub_10000570C(&qword_1001A80F0);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v31 - v12;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void **)(v14 - 8);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  uint64_t v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v20);
  uint64_t v22 = (char *)&v31 - v21;
  sub_10007ED50(a1, (uint64_t)&v31 - v21);
  sub_10007ED50(a2, (uint64_t)v19);
  sub_10007FB54(qword_1001A5D70, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v31 = v6;
    uint64_t v32 = a3;
    uint64_t v24 = &v13[*(int *)(v6 + 48)];
    uint64_t v25 = (void (*)(char *, char *, uint64_t))v15[4];
    v25(v13, v22, v14);
    v25(v24, v19, v14);
    uint64_t v26 = &v10[*(int *)(v6 + 48)];
    uint64_t v27 = (void (*)(char *, char *, uint64_t))v15[2];
    v27(v10, v13, v14);
    v27(v26, v24, v14);
    v25(v32, v10, v14);
    uint64_t v28 = (void (*)(char *, uint64_t))v15[1];
    v28(v26, v14);
    uint64_t v29 = &v10[*(int *)(v31 + 48)];
    v25(v10, v13, v14);
    v25(v29, v24, v14);
    uint64_t v30 = sub_10000570C(&qword_1001A5CD0);
    v25(&v32[*(int *)(v30 + 36)], v29, v14);
    return ((uint64_t (*)(char *, uint64_t))v28)(v10, v14);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10007ED50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = a1;
  uint64_t v37 = a2;
  uint64_t v2 = type metadata accessor for DateComponents();
  uint64_t v35 = *(void *)(v2 - 8);
  uint64_t v36 = v2;
  __chkstk_darwin(v2, v3);
  uint64_t v32 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for Calendar();
  uint64_t v5 = *(void *)(v33 - 8);
  uint64_t v7 = __chkstk_darwin(v33, v6);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)&v30 - v11;
  uint64_t v13 = sub_10000570C(&qword_1001A80F8);
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v31 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter();
  static Calendar.current.getter();
  sub_10000570C(&qword_1001A8100);
  uint64_t v16 = type metadata accessor for Calendar.Component();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 72);
  unint64_t v19 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_100156CD0;
  unint64_t v21 = v20 + v19;
  uint64_t v22 = *(void (**)(unint64_t, void, uint64_t))(v17 + 104);
  v22(v21, enum case for Calendar.Component.year(_:), v16);
  v22(v21 + v18, enum case for Calendar.Component.month(_:), v16);
  v22(v21 + 2 * v18, enum case for Calendar.Component.day(_:), v16);
  v22(v21 + 3 * v18, enum case for Calendar.Component.hour(_:), v16);
  v22(v21 + 4 * v18, enum case for Calendar.Component.minute(_:), v16);
  v22(v21 + 5 * v18, enum case for Calendar.Component.second(_:), v16);
  sub_10007F4C4(v20);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v23 = v32;
  Calendar.dateComponents(_:from:)();
  uint64_t v24 = (uint64_t)v31;
  swift_bridgeObjectRelease();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v26 = v33;
  v25(v9, v33);
  Calendar.date(from:)();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v23, v36);
  v25(v12, v26);
  uint64_t v27 = type metadata accessor for Date();
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v24, 1, v27) != 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v37, v24, v27);
  }
  Date.init()();
  return sub_10007F7DC(v24);
}

Swift::Int sub_10007F1B4(uint64_t a1)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  type metadata accessor for Date();
  sub_10007FB54(&qword_1001A80E8, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned char *)(v1 + *(int *)(a1 + 24)));
  return Hasher._finalize()();
}

void sub_10007F28C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  type metadata accessor for Date();
  sub_10007FB54(&qword_1001A80E8, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned char *)(v2 + *(int *)(a2 + 24)));
}

Swift::Int sub_10007F354(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  type metadata accessor for Date();
  sub_10007FB54(&qword_1001A80E8, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned char *)(v2 + *(int *)(a2 + 24)));
  return Hasher._finalize()();
}

uint64_t sub_10007F428(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), v6 = 0, (v5 & 1) != 0))
  {
    uint64_t v7 = type metadata accessor for CompactDatePickerConfiguration();
    if (static Date.== infix(_:_:)()) {
      char v6 = *((unsigned char *)a1 + *(int *)(v7 + 24)) ^ *((unsigned char *)a2 + *(int *)(v7 + 24)) ^ 1;
    }
    else {
      char v6 = 0;
    }
  }
  return v6 & 1;
}

void *sub_10007F4C4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Calendar.Component();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  char v39 = (char *)&v32 - v9;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    sub_10000570C(&qword_1001A8108);
    uint64_t v11 = static _SetStorage.allocate(capacity:)();
    uint64_t v12 = 0;
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v13 = v3 + 16;
    uint64_t v37 = v14;
    uint64_t v38 = v11 + 56;
    uint64_t v15 = *(unsigned __int8 *)(v13 + 64);
    uint64_t v34 = v10;
    uint64_t v35 = a1 + ((v15 + 32) & ~v15);
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v13 - 8);
    uint64_t v33 = (uint64_t (**)(unint64_t, char *, uint64_t))(v13 + 16);
    while (1)
    {
      uint64_t v36 = v12;
      v37(v39, v35 + v16 * v12, v2);
      sub_10007FB54(&qword_1001A8110, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
      uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v19 = ~(-1 << *(unsigned char *)(v11 + 32));
      unint64_t v20 = v18 & v19;
      unint64_t v21 = (v18 & (unint64_t)v19) >> 6;
      uint64_t v22 = *(void *)(v38 + 8 * v21);
      uint64_t v23 = 1 << (v18 & v19);
      if ((v23 & v22) != 0)
      {
        while (1)
        {
          uint64_t v24 = v13;
          v37(v7, *(void *)(v11 + 48) + v20 * v16, v2);
          sub_10007FB54(&qword_1001A8118, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
          char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v26 = *v17;
          (*v17)(v7, v2);
          if (v25) {
            break;
          }
          unint64_t v20 = (v20 + 1) & v19;
          unint64_t v21 = v20 >> 6;
          uint64_t v22 = *(void *)(v38 + 8 * (v20 >> 6));
          uint64_t v23 = 1 << v20;
          uint64_t v13 = v24;
          if ((v22 & (1 << v20)) == 0) {
            goto LABEL_8;
          }
        }
        v26(v39, v2);
        uint64_t v13 = v24;
      }
      else
      {
LABEL_8:
        uint64_t v27 = v39;
        *(void *)(v38 + 8 * v21) = v23 | v22;
        uint64_t result = (void *)(*v33)(*(void *)(v11 + 48) + v20 * v16, v27, v2);
        uint64_t v29 = *(void *)(v11 + 16);
        BOOL v30 = __OFADD__(v29, 1);
        uint64_t v31 = v29 + 1;
        if (v30)
        {
          __break(1u);
          return result;
        }
        *(void *)(v11 + 16) = v31;
      }
      uint64_t v12 = v36 + 1;
      if (v36 + 1 == v34) {
        return (void *)v11;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

uint64_t sub_10007F7DC(uint64_t a1)
{
  uint64_t v2 = sub_10000570C(&qword_1001A80F8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_10007F83C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PresentationDetent();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  char v39 = (char *)&v32 - v9;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    sub_10000570C(&qword_1001A8120);
    uint64_t v11 = static _SetStorage.allocate(capacity:)();
    uint64_t v12 = 0;
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v13 = v3 + 16;
    uint64_t v37 = v14;
    uint64_t v38 = v11 + 56;
    uint64_t v15 = *(unsigned __int8 *)(v13 + 64);
    uint64_t v34 = v10;
    uint64_t v35 = a1 + ((v15 + 32) & ~v15);
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v13 - 8);
    uint64_t v33 = (uint64_t (**)(unint64_t, char *, uint64_t))(v13 + 16);
    while (1)
    {
      uint64_t v36 = v12;
      v37(v39, v35 + v16 * v12, v2);
      sub_10007FB54(&qword_1001A8128, (void (*)(uint64_t))&type metadata accessor for PresentationDetent);
      uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v19 = ~(-1 << *(unsigned char *)(v11 + 32));
      unint64_t v20 = v18 & v19;
      unint64_t v21 = (v18 & (unint64_t)v19) >> 6;
      uint64_t v22 = *(void *)(v38 + 8 * v21);
      uint64_t v23 = 1 << (v18 & v19);
      if ((v23 & v22) != 0)
      {
        while (1)
        {
          uint64_t v24 = v13;
          v37(v7, *(void *)(v11 + 48) + v20 * v16, v2);
          sub_10007FB54(&qword_1001A8130, (void (*)(uint64_t))&type metadata accessor for PresentationDetent);
          char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v26 = *v17;
          (*v17)(v7, v2);
          if (v25) {
            break;
          }
          unint64_t v20 = (v20 + 1) & v19;
          unint64_t v21 = v20 >> 6;
          uint64_t v22 = *(void *)(v38 + 8 * (v20 >> 6));
          uint64_t v23 = 1 << v20;
          uint64_t v13 = v24;
          if ((v22 & (1 << v20)) == 0) {
            goto LABEL_8;
          }
        }
        v26(v39, v2);
        uint64_t v13 = v24;
      }
      else
      {
LABEL_8:
        uint64_t v27 = v39;
        *(void *)(v38 + 8 * v21) = v23 | v22;
        uint64_t result = (void *)(*v33)(*(void *)(v11 + 48) + v20 * v16, v27, v2);
        uint64_t v29 = *(void *)(v11 + 16);
        BOOL v30 = __OFADD__(v29, 1);
        uint64_t v31 = v29 + 1;
        if (v30)
        {
          __break(1u);
          return result;
        }
        *(void *)(v11 + 16) = v31;
      }
      uint64_t v12 = v36 + 1;
      if (v36 + 1 == v34) {
        return (void *)v11;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

uint64_t sub_10007FB54(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10007FB9C()
{
  return sub_10007FC2C((unint64_t *)&qword_1001A8138, (void (*)(uint64_t))&type metadata accessor for Artist);
}

uint64_t sub_10007FBE4()
{
  return sub_10007FC2C(&qword_1001A70B0, (void (*)(uint64_t))&type metadata accessor for Genre);
}

uint64_t sub_10007FC2C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10007FC74(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = a5;
  uint64_t v32 = a8;
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  uint64_t v30 = *(void *)(a5 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v43 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v11 = __chkstk_darwin(AssociatedTypeWitness, v10);
  uint64_t v13 = (char *)&v29 - v12;
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v33 = *(void *)(v17 - 8);
  uint64_t v34 = v17;
  __chkstk_darwin(v17, v18);
  unint64_t v20 = (char *)&v29 - v19;
  uint64_t v21 = dispatch thunk of Collection.count.getter();
  if (!v21) {
    return static Array._allocateUninitialized(_:)();
  }
  Swift::Int v22 = v21;
  uint64_t v46 = ContiguousArray.init()();
  uint64_t v35 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v22);
  uint64_t v39 = v8;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v22 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v37 = (void (**)(char *))(v36 + 2);
    uint64_t v38 = v16;
    ++v36;
    while (1)
    {
      uint64_t v24 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      char v25 = v13;
      uint64_t v26 = v13;
      uint64_t v27 = AssociatedTypeWitness;
      (*v37)(v25);
      v24(v45, 0);
      uint64_t v28 = v44;
      v41(v26, v43);
      if (v28) {
        break;
      }
      uint64_t v44 = 0;
      (*v36)(v26, v27);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      --v22;
      uint64_t v13 = v26;
      if (!v22)
      {
        (*(void (**)(char *, uint64_t))(v33 + 8))(v20, v34);
        return v46;
      }
    }
    (*v36)(v26, v27);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v20, v34);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v30 + 32))(v32, v43, v31);
  }
  return result;
}

uint64_t sub_100080074(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = (*(uint64_t (**)(void))(a2 + 40))();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  swift_getWitnessTable();
  Array.init<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
  Array.init<A>(_:)();
  uint64_t v4 = static Array.+ infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = v4;
  void v11[2] = a1;
  v11[3] = a2;
  uint64_t v5 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v8 = sub_10007FC74((void (*)(char *, char *))sub_1000806DC, (uint64_t)v11, v5, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v7);
  swift_bridgeObjectRelease();
  uint64_t v12 = v8;
  sub_10000570C(&qword_1001A6B98);
  sub_10004ADEC();
  uint64_t v9 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_100080288@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v25 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v23 - v9;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v23 = *(void *)(v13 - 8);
  uint64_t v24 = v13;
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v23 - v15;
  uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  type metadata accessor for Set();
  swift_getWitnessTable();
  Collection.first.getter();
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v10, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
LABEL_5:
    unint64_t v20 = (_OWORD *)v25;
    *(void *)(v25 + 32) = 0;
    *unint64_t v20 = 0u;
    v20[1] = 0u;
    return result;
  }
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v10, AssociatedTypeWitness);
  uint64_t v19 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v12) == 1)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v16, v24);
    goto LABEL_5;
  }
  uint64_t v21 = (uint64_t *)v25;
  *(void *)(v25 + 24) = v12;
  void v21[4] = swift_getAssociatedConformanceWitness();
  Swift::Int v22 = sub_10000A7C4(v21);
  return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v19 + 32))(v22, v16, v12);
}

uint64_t sub_10008061C@<X0>(uint64_t *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
  uint64_t v4 = swift_checkMetadataState();
  uint64_t result = v3(v4, AssociatedConformanceWitness);
  *a1 = result;
  a1[1] = v6;
  return result;
}

uint64_t sub_1000806DC@<X0>(uint64_t *a1@<X8>)
{
  return sub_10008061C(a1);
}

uint64_t sub_1000806FC@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = sub_100080824();
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3 & 1;
  uint64_t v4 = (int *)type metadata accessor for FilterView();
  uint64_t v5 = (uint64_t *)(a1 + v4[9]);
  *uint64_t v5 = swift_getKeyPath();
  sub_10000570C(&qword_1001A5468);
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = (uint64_t *)(a1 + v4[10]);
  uint64_t *v6 = swift_getKeyPath();
  sub_10000570C(&qword_1001A5460);
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = (uint64_t *)(a1 + v4[11]);
  type metadata accessor for RemoteViewConfiguration();
  sub_10008E768((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  uint64_t result = EnvironmentObject.init()();
  *uint64_t v7 = result;
  v7[1] = v9;
  return result;
}

double sub_100080810@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void sub_10008081C(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_100080824()
{
  return StateObject.init(wrappedValue:)();
}

uint64_t type metadata accessor for FilterView()
{
  return sub_10000B72C();
}

uint64_t sub_1000808B8(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = *((unsigned __int8 *)v2 + 16);
  uint64_t v6 = type metadata accessor for FilterViewModel();
  uint64_t WitnessTable = swift_getWitnessTable();

  return a2(v3, v4, v5, v6, WitnessTable);
}

uint64_t sub_100080948@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v22 = type metadata accessor for NavigationPath();
  uint64_t v46 = sub_100004A58(&qword_1001A5A58);
  sub_100004A58(&qword_1001A8200);
  v19[2] = sub_100004A58(&qword_1001A8208);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v21 = *(void *)(a1 + 24);
  uint64_t v20 = v3;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  sub_100004A58(&qword_1001A8210);
  type metadata accessor for Set();
  swift_getWitnessTable();
  type metadata accessor for _AnimationModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for ZStack();
  swift_getWitnessTable();
  type metadata accessor for Button();
  type metadata accessor for AccessibilityAttachmentModifier();
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for ForEach();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v40 = sub_10008E768((unint64_t *)&qword_1001A68E8, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  v19[1] = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v38 = swift_getWitnessTable();
  swift_getWitnessTable();
  type metadata accessor for LazyVGrid();
  swift_getWitnessTable();
  type metadata accessor for ScrollView();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  swift_getWitnessTable();
  type metadata accessor for ScrollView();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001A6298);
  uint64_t v47 = type metadata accessor for ModifiedContent();
  uint64_t v48 = type metadata accessor for Divider();
  uint64_t v49 = sub_100004A58(&qword_1001A8218);
  swift_getTupleTypeMetadata();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for ModifiedContent();
  type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v36 = swift_getWitnessTable();
  uint64_t v37 = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  swift_getWitnessTable();
  sub_10008E768(&qword_1001A80E0, (void (*)(uint64_t))type metadata accessor for CompactDatePickerConfiguration);
  swift_getOpaqueTypeMetadata2();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeMetadata2();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeMetadata2();
  swift_getOpaqueTypeConformance2();
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v5 = sub_100004A58(&qword_1001A8220);
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v7 = sub_10000A780(&qword_1001A8228, &qword_1001A8220);
  swift_getOpaqueTypeMetadata2();
  sub_100004A58(&qword_1001A8230);
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001A8238);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t v41 = OpaqueTypeMetadata2;
  uint64_t v42 = v5;
  uint64_t v43 = OpaqueTypeConformance2;
  uint64_t v44 = v7;
  uint64_t v34 = swift_getOpaqueTypeConformance2();
  uint64_t v35 = sub_10000A780(&qword_1001A8240, &qword_1001A8230);
  uint64_t v32 = swift_getWitnessTable();
  uint64_t v33 = sub_10000A780(&qword_1001A8248, &qword_1001A8238);
  uint64_t v30 = swift_getWitnessTable();
  uint64_t v31 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v29 = &protocol witness table for _AppearanceActionModifier;
  swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for NavigationStack();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)v19 - v15;
  uint64_t v25 = v20;
  uint64_t v26 = v21;
  uint64_t v27 = v23;
  NavigationStack.init<>(root:)();
  swift_getWitnessTable();
  sub_1001221F0(v13, v8);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v9 + 8);
  v17(v13, v8);
  sub_1001221F0(v16, v8);
  return ((uint64_t (*)(char *, uint64_t))v17)(v16, v8);
}

uint64_t sub_100081340@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v193 = a1;
  uint64_t v174 = a4;
  uint64_t v6 = type metadata accessor for NavigationBarItem.TitleDisplayMode();
  uint64_t v172 = *(void *)(v6 - 8);
  uint64_t v173 = v6;
  __chkstk_darwin(v6, v7);
  long long v171 = (char *)&v134 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v192 = a3;
  uint64_t v187 = type metadata accessor for FilterView();
  uint64_t v190 = *(void *)(v187 - 8);
  uint64_t v188 = *(void *)(v190 + 64);
  __chkstk_darwin(v187, v9);
  uint64_t v189 = (char *)&v134 - v10;
  unint64_t v180 = type metadata accessor for CompactDatePickerConfiguration();
  __chkstk_darwin(v180, v11);
  long long v170 = (char *)&v134 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v218 = sub_100004A58(&qword_1001A5A58);
  sub_100004A58(&qword_1001A8200);
  uint64_t v186 = (void (*)(char *, uint64_t, uint64_t))sub_100004A58(&qword_1001A8208);
  uint64_t v191 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Array();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_100004A58(&qword_1001A8210);
  type metadata accessor for Set();
  swift_getWitnessTable();
  type metadata accessor for _AnimationModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for ZStack();
  swift_getWitnessTable();
  type metadata accessor for Button();
  type metadata accessor for AccessibilityAttachmentModifier();
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v213 = v13;
  unint64_t v214 = AssociatedTypeWitness;
  uint64_t v215 = v15;
  uint64_t v216 = WitnessTable;
  uint64_t v217 = AssociatedConformanceWitness;
  type metadata accessor for ForEach();
  uint64_t v18 = swift_getWitnessTable();
  uint64_t v19 = sub_10008E768((unint64_t *)&qword_1001A68E8, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  uint64_t v211 = v18;
  uint64_t v212 = v19;
  long long v181 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v210 = swift_getWitnessTable();
  swift_getWitnessTable();
  type metadata accessor for LazyVGrid();
  swift_getWitnessTable();
  type metadata accessor for ScrollView();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  swift_getWitnessTable();
  type metadata accessor for ScrollView();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001A6298);
  uint64_t v219 = type metadata accessor for ModifiedContent();
  uint64_t v220 = type metadata accessor for Divider();
  uint64_t v221 = sub_100004A58(&qword_1001A8218);
  swift_getTupleTypeMetadata();
  uint64_t v186 = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for TupleView();
  uint64_t v185 = swift_getWitnessTable();
  uint64_t v20 = type metadata accessor for VStack();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  uint64_t v24 = (char *)&v134 - v23;
  uint64_t v25 = type metadata accessor for ModifiedContent();
  uint64_t v157 = *(void *)(v25 - 8);
  __chkstk_darwin(v25, v26);
  long long v179 = (char *)&v134 - v27;
  uint64_t v184 = swift_getWitnessTable();
  uint64_t v208 = v184;
  uint64_t v209 = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v29 = sub_10008E768(&qword_1001A80E0, (void (*)(uint64_t))type metadata accessor for CompactDatePickerConfiguration);
  uint64_t v30 = v25;
  uint64_t v135 = v25;
  uint64_t v136 = v28;
  unint64_t v31 = v180;
  uint64_t v213 = v25;
  unint64_t v214 = v180;
  uint64_t v215 = v28;
  uint64_t v216 = v29;
  uint64_t v32 = v29;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v159 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2, v34);
  long long v177 = (char *)&v134 - v35;
  uint64_t v213 = v30;
  unint64_t v214 = v31;
  uint64_t v215 = v28;
  uint64_t v216 = v32;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v213 = OpaqueTypeMetadata2;
  unint64_t v214 = v31;
  uint64_t v37 = OpaqueTypeMetadata2;
  uint64_t v142 = OpaqueTypeMetadata2;
  uint64_t v143 = OpaqueTypeConformance2;
  unint64_t v38 = v31;
  uint64_t v215 = OpaqueTypeConformance2;
  uint64_t v216 = v32;
  uint64_t v39 = OpaqueTypeConformance2;
  uint64_t v134 = v32;
  uint64_t v40 = swift_getOpaqueTypeMetadata2();
  uint64_t v156 = *(void *)(v40 - 8);
  __chkstk_darwin(v40, v41);
  uint64_t v141 = (char *)&v134 - v42;
  uint64_t v213 = v37;
  unint64_t v214 = v38;
  uint64_t v215 = v39;
  uint64_t v216 = v32;
  uint64_t v43 = swift_getOpaqueTypeConformance2();
  uint64_t v213 = v40;
  unint64_t v214 = v43;
  uint64_t v44 = v40;
  uint64_t v139 = v40;
  uint64_t v140 = v43;
  uint64_t v45 = v43;
  uint64_t v46 = swift_getOpaqueTypeMetadata2();
  uint64_t v160 = *(void *)(v46 - 8);
  __chkstk_darwin(v46, v47);
  uint64_t v138 = (char *)&v134 - v48;
  uint64_t v213 = v44;
  unint64_t v214 = v45;
  uint64_t v49 = swift_getOpaqueTypeConformance2();
  uint64_t v213 = v46;
  unint64_t v214 = v49;
  uint64_t v50 = v46;
  uint64_t v144 = v46;
  uint64_t v145 = v49;
  uint64_t v51 = v49;
  uint64_t v52 = swift_getOpaqueTypeMetadata2();
  uint64_t v151 = v52;
  uint64_t v155 = *(void *)(v52 - 8);
  __chkstk_darwin(v52, v53);
  unint64_t v146 = (char *)&v134 - v54;
  uint64_t v55 = sub_100004A58(&qword_1001A8220);
  uint64_t v150 = v55;
  uint64_t v213 = v50;
  unint64_t v214 = v51;
  uint64_t v56 = swift_getOpaqueTypeConformance2();
  uint64_t v149 = v56;
  uint64_t v148 = sub_10000A780(&qword_1001A8228, &qword_1001A8220);
  uint64_t v213 = v52;
  unint64_t v214 = v55;
  uint64_t v215 = v56;
  uint64_t v216 = v148;
  uint64_t v152 = &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>;
  uint64_t v147 = swift_getOpaqueTypeMetadata2();
  uint64_t v154 = *(void *)(v147 - 8);
  __chkstk_darwin(v147, v57);
  uint64_t v137 = (char *)&v134 - v58;
  sub_100004A58(&qword_1001A8230);
  uint64_t v153 = type metadata accessor for ModifiedContent();
  uint64_t v161 = *(void *)(v153 - 8);
  __chkstk_darwin(v153, v59);
  long long v176 = (char *)&v134 - v60;
  sub_100004A58(&qword_1001A8238);
  uint64_t v162 = type metadata accessor for ModifiedContent();
  uint64_t v165 = *(void *)(v162 - 8);
  __chkstk_darwin(v162, v162);
  long long v178 = (char *)&v134 - v61;
  uint64_t v164 = type metadata accessor for ModifiedContent();
  uint64_t v168 = *(void *)(v164 - 8);
  __chkstk_darwin(v164, v164);
  uint64_t v158 = (char *)&v134 - v62;
  uint64_t v167 = type metadata accessor for ModifiedContent();
  uint64_t v169 = *(void *)(v167 - 8);
  uint64_t v64 = __chkstk_darwin(v167, v63);
  long long v163 = (char *)&v134 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v64, v66);
  long long v166 = (char *)&v134 - v67;
  static HorizontalAlignment.leading.getter();
  uint64_t v68 = v191;
  uint64_t v197 = v191;
  uint64_t v198 = v192;
  uint64_t v69 = v193;
  uint64_t v199 = v193;
  VStack.init(alignment:spacing:content:)();
  static SafeAreaRegions.all.getter();
  static Edge.Set.all.getter();
  View.ignoresSafeArea(_:edges:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
  long long v175 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter;
  uint64_t v70 = v187;
  sub_1000808B8(v187, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v71 = v170;
  sub_10001C548();
  swift_release();
  uint64_t v73 = v189;
  uint64_t v72 = v190;
  char v74 = *(void (**)(char *, uint64_t, uint64_t))(v190 + 16);
  uint64_t v185 = v190 + 16;
  uint64_t v186 = v74;
  v74(v189, v69, v70);
  uint64_t v75 = *(unsigned __int8 *)(v72 + 80);
  uint64_t v183 = ((v75 + 32) & ~v75) + v188;
  uint64_t v184 = (v75 + 32) & ~v75;
  uint64_t v76 = v184;
  uint64_t v188 = v75 | 7;
  uint64_t v77 = swift_allocObject();
  uint64_t v78 = v192;
  *(void *)(v77 + 16) = v68;
  *(void *)(v77 + 24) = v78;
  uint64_t v79 = *(void (**)(uint64_t, char *, uint64_t))(v72 + 32);
  uint64_t v190 = v72 + 32;
  v79(v77 + v76, v73, v70);
  long long v182 = v79;
  uint64_t v80 = (uint64_t)v71;
  uint64_t v81 = v135;
  uint64_t v82 = v179;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  sub_10008ED20(v80, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
  (*(void (**)(char *, uint64_t))(v157 + 8))(v82, v81);
  uint64_t v83 = v193;
  sub_1000808B8(v70, v175);
  sub_10001C5FC();
  swift_release();
  uint64_t v84 = v189;
  v186(v189, v83, v70);
  uint64_t v85 = swift_allocObject();
  *(void *)(v85 + 16) = v191;
  *(void *)(v85 + 24) = v78;
  v79(v85 + v184, v84, v70);
  uint64_t v87 = v141;
  uint64_t v86 = v142;
  uint64_t v88 = v177;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  sub_10008ED20(v80, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
  (*(void (**)(char *, uint64_t))(v159 + 8))(v88, v86);
  int v90 = v171;
  uint64_t v89 = v172;
  uint64_t v91 = v173;
  (*(void (**)(char *, void, uint64_t))(v172 + 104))(v171, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v173);
  uint64_t v93 = v138;
  uint64_t v92 = v139;
  View.navigationBarTitleDisplayMode(_:)();
  (*(void (**)(char *, uint64_t))(v89 + 8))(v90, v91);
  (*(void (**)(char *, uint64_t))(v156 + 8))(v87, v92);
  uint64_t v94 = v193;
  sub_1000808B8(v70, v175);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v95 = v146;
  uint64_t v96 = v144;
  View.navigationBarTitle(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v160 + 8))(v93, v96);
  uint64_t v97 = v191;
  uint64_t v98 = v192;
  uint64_t v194 = v191;
  uint64_t v195 = v192;
  uint64_t v196 = v94;
  uint64_t v99 = v137;
  unint64_t v101 = v150;
  uint64_t v100 = v151;
  uint64_t v103 = v148;
  uint64_t v102 = v149;
  View.toolbar<A>(content:)();
  (*(void (**)(char *, uint64_t))(v155 + 8))(v95, v100);
  uint64_t v213 = v100;
  unint64_t v214 = v101;
  uint64_t v215 = v102;
  uint64_t v216 = v103;
  long long v179 = (char *)swift_getOpaqueTypeConformance2();
  unint64_t v180 = sub_10008E8AC();
  uint64_t v104 = v147;
  sub_1000B1184();
  (*(void (**)(char *, uint64_t))(v154 + 8))(v99, v104);
  uint64_t v105 = v189;
  uint64_t v106 = v186;
  uint64_t v107 = v187;
  v186(v189, v193, v187);
  uint64_t v108 = swift_allocObject();
  *(void *)(v108 + 16) = v97;
  *(void *)(v108 + 24) = v98;
  uint64_t v109 = v184;
  v182(v108 + v184, v105, v107);
  uint64_t v110 = sub_10000A780(&qword_1001A8240, &qword_1001A8230);
  uint64_t v206 = v179;
  uint64_t v207 = v110;
  uint64_t v111 = v153;
  uint64_t v112 = swift_getWitnessTable();
  sub_10008E990();
  long long v113 = v176;
  View.onPreferenceChange<A>(_:perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v161 + 8))(v113, v111);
  long long v114 = v189;
  uint64_t v115 = v187;
  v106(v189, v193, v187);
  uint64_t v116 = swift_allocObject();
  uint64_t v117 = v192;
  *(void *)(v116 + 16) = v191;
  *(void *)(v116 + 24) = v117;
  uint64_t v118 = v116 + v109;
  uint64_t v119 = v115;
  v182(v118, v114, v115);
  uint64_t v120 = sub_10000A780(&qword_1001A8248, &qword_1001A8238);
  uint64_t v204 = v112;
  uint64_t v205 = v120;
  uint64_t v121 = v162;
  uint64_t v122 = swift_getWitnessTable();
  uint64_t v123 = v158;
  uint64_t v124 = v178;
  View.onAppear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v165 + 8))(v124, v121);
  v186(v114, v193, v119);
  uint64_t v125 = swift_allocObject();
  uint64_t v126 = v192;
  *(void *)(v125 + 16) = v191;
  *(void *)(v125 + 24) = v126;
  v182(v125 + v184, v114, v119);
  uint64_t v202 = v122;
  v203 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v127 = v164;
  uint64_t v128 = swift_getWitnessTable();
  uint64_t v129 = v163;
  View.onDisappear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v168 + 8))(v123, v127);
  uint64_t v200 = v128;
  uint64_t v201 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v130 = v167;
  swift_getWitnessTable();
  unint64_t v131 = v166;
  sub_1001221F0(v129, v130);
  uint64_t v132 = *(void (**)(char *, uint64_t))(v169 + 8);
  v132(v129, v130);
  sub_1001221F0(v131, v130);
  return ((uint64_t (*)(char *, uint64_t))v132)(v131, v130);
}

uint64_t sub_100082960@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v189 = a1;
  uint64_t v229 = a4;
  uint64_t v228 = type metadata accessor for AccessibilityTraits();
  uint64_t v227 = *(void *)(v228 - 8);
  __chkstk_darwin(v228, v6);
  uint64_t v226 = (char *)v181 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v217 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v217, v8);
  uint64_t v218 = (char *)v181 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v238 = type metadata accessor for FilterView();
  uint64_t v204 = *(void *)(v238 - 8);
  uint64_t v202 = *(void *)(v204 + 64);
  __chkstk_darwin(v238, v10);
  v203 = (char *)v181 - v11;
  uint64_t v208 = sub_10000570C(&qword_1001A8290);
  uint64_t v207 = *(void *)(v208 - 8);
  __chkstk_darwin(v208, v12);
  uint64_t v206 = (char *)v181 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v205 = sub_10000570C(&qword_1001A8298);
  __chkstk_darwin(v205, v14);
  uint64_t v211 = (void (*)(char *, uint64_t))((char *)v181 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v209 = sub_10000570C(&qword_1001A82A0);
  __chkstk_darwin(v209, v16);
  uint64_t v214 = (uint64_t)v181 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v210 = sub_10000570C(&qword_1001A82A8);
  __chkstk_darwin(v210, v18);
  uint64_t v215 = (char *)v181 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v212 = sub_10000570C(&qword_1001A82B0);
  __chkstk_darwin(v212, v20);
  uint64_t v216 = (uint64_t)v181 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v213 = sub_10000570C(&qword_1001A82B8);
  __chkstk_darwin(v213, v22);
  uint64_t v220 = (char *)v181 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v221 = sub_10000570C(&qword_1001A82C0);
  __chkstk_darwin(v221, v24);
  uint64_t v222 = (uint64_t)v181 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v223 = sub_10000570C(&qword_1001A8218);
  uint64_t v27 = __chkstk_darwin(v223, v26);
  uint64_t v225 = (uint64_t)v181 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v27, v29);
  uint64_t v219 = (char *)v181 - v31;
  __chkstk_darwin(v30, v32);
  uint64_t v224 = (uint64_t)v181 - v33;
  uint64_t v193 = type metadata accessor for ColorScheme();
  uint64_t v192 = *(void *)(v193 - 8);
  uint64_t v35 = __chkstk_darwin(v193, v34);
  uint64_t v191 = (char *)v181 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35, v37);
  uint64_t v190 = (uint64_t)v181 - v38;
  sub_100004A58(&qword_1001A8200);
  uint64_t v235 = sub_100004A58(&qword_1001A8208);
  uint64_t v237 = a3;
  uint64_t v236 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v39 = type metadata accessor for Array();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_100004A58(&qword_1001A8210);
  type metadata accessor for Set();
  swift_getWitnessTable();
  type metadata accessor for _AnimationModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for ZStack();
  swift_getWitnessTable();
  type metadata accessor for Button();
  type metadata accessor for AccessibilityAttachmentModifier();
  uint64_t v41 = type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v247 = v39;
  uint64_t v248 = AssociatedTypeWitness;
  uint64_t v249 = v41;
  uint64_t v250 = WitnessTable;
  uint64_t v251 = AssociatedConformanceWitness;
  type metadata accessor for ForEach();
  uint64_t v44 = swift_getWitnessTable();
  uint64_t v45 = sub_10008E768((unint64_t *)&qword_1001A68E8, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  v246[11] = v44;
  v246[12] = v45;
  v246[10] = swift_getWitnessTable();
  swift_getWitnessTable();
  type metadata accessor for LazyVGrid();
  swift_getWitnessTable();
  type metadata accessor for ScrollView();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  v181[2] = type metadata accessor for VStack();
  v181[1] = swift_getWitnessTable();
  uint64_t v46 = type metadata accessor for ScrollView();
  uint64_t v182 = *(void *)(v46 - 8);
  __chkstk_darwin(v46, v47);
  v181[0] = (char *)v181 - v48;
  uint64_t v49 = type metadata accessor for ModifiedContent();
  uint64_t v184 = *(void *)(v49 - 8);
  __chkstk_darwin(v49, v49);
  uint64_t v183 = (char *)v181 - v50;
  uint64_t v185 = v51;
  uint64_t v52 = type metadata accessor for ModifiedContent();
  uint64_t v187 = *(void *)(v52 - 8);
  __chkstk_darwin(v52, v53);
  uint64_t v230 = (char *)v181 - v54;
  sub_100004A58(&qword_1001A6298);
  uint64_t v188 = v52;
  uint64_t v235 = type metadata accessor for ModifiedContent();
  uint64_t v232 = *(void *)(v235 - 8);
  uint64_t v56 = __chkstk_darwin(v235, v55);
  uint64_t v201 = (char *)v181 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = __chkstk_darwin(v56, v58);
  uint64_t v186 = (char *)v181 - v60;
  __chkstk_darwin(v59, v61);
  uint64_t v234 = (char *)v181 - v62;
  uint64_t v63 = type metadata accessor for Divider();
  uint64_t v64 = *(void *)(v63 - 8);
  uint64_t v66 = __chkstk_darwin(v63, v65);
  uint64_t v233 = (char *)v181 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v66, v68);
  uint64_t v70 = (char *)v181 - v69;
  uint64_t v71 = sub_10000570C(&qword_1001A5A58);
  uint64_t v73 = __chkstk_darwin(v71, v72);
  uint64_t v75 = (char *)v181 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v73, v76);
  uint64_t v78 = (char *)v181 - v77;
  Divider.init()();
  LOBYTE(v41) = static Edge.Set.top.getter();
  uint64_t v79 = v189;
  sub_1000808B8(v238, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10001CBF0();
  swift_release();
  EdgeInsets.init(_all:)();
  uint64_t v81 = v80;
  uint64_t v83 = v82;
  uint64_t v85 = v84;
  uint64_t v87 = v86;
  uint64_t v88 = *(void (**)(char *, char *, uint64_t))(v64 + 16);
  uint64_t v195 = v64 + 16;
  uint64_t v194 = v88;
  v88(v75, v70, v63);
  uint64_t v197 = v71;
  uint64_t v89 = *(int *)(v71 + 36);
  uint64_t v90 = v181[0];
  uint64_t v91 = &v75[v89];
  *uint64_t v91 = v41;
  *((void *)v91 + 1) = v81;
  *((void *)v91 + 2) = v83;
  *((void *)v91 + 3) = v85;
  *((void *)v91 + 4) = v87;
  v91[40] = 0;
  uint64_t v92 = *(void (**)(char *, uint64_t))(v64 + 8);
  uint64_t v198 = v70;
  uint64_t v200 = v63;
  uint64_t v199 = v64 + 8;
  uint64_t v196 = v92;
  v92(v70, v63);
  uint64_t v231 = v75;
  uint64_t v93 = (uint64_t)v78;
  sub_10000A3C4((uint64_t)v75, (uint64_t)v78, &qword_1001A5A58);
  uint64_t v239 = v236;
  uint64_t v240 = v237;
  uint64_t v94 = v79;
  uint64_t v241 = v79;
  static Axis.Set.vertical.getter();
  ScrollView.init(_:showsIndicators:content:)();
  LOBYTE(v79) = static Edge.Set.leading.getter();
  unsigned __int8 v95 = static Edge.Set.trailing.getter();
  Edge.Set.init(rawValue:)();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v79) {
    Edge.Set.init(rawValue:)();
  }
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v95) {
    Edge.Set.init(rawValue:)();
  }
  sub_1000808B8(v238, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10001CBF0();
  swift_release();
  uint64_t v96 = swift_getWitnessTable();
  uint64_t v97 = v183;
  sub_1000B1148();
  uint64_t v98 = v46;
  uint64_t v99 = v94;
  (*(void (**)(uint64_t, uint64_t))(v182 + 8))(v90, v98);
  static Edge.Set.horizontal.getter();
  unint64_t v100 = sub_10008EC00();
  v246[8] = v96;
  v246[9] = v100;
  uint64_t v101 = v185;
  uint64_t v102 = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v184 + 8))(v97, v101);
  uint64_t v103 = v190;
  sub_100026F48(v190);
  uint64_t v104 = v192;
  uint64_t v105 = v191;
  uint64_t v106 = v193;
  (*(void (**)(char *, void, uint64_t))(v192 + 104))(v191, enum case for ColorScheme.light(_:), v193);
  char v107 = static ColorScheme.== infix(_:_:)();
  uint64_t v108 = *(void (**)(char *, uint64_t))(v104 + 8);
  v108(v105, v106);
  v108((char *)v103, v106);
  if (v107)
  {
    uint64_t v109 = (uint64_t)v211;
    if (qword_1001A4E58 != -1) {
      swift_once();
    }
    uint64_t v110 = &qword_1001B74F8;
  }
  else
  {
    uint64_t v109 = (uint64_t)v211;
    if (qword_1001A4E30 != -1) {
      swift_once();
    }
    uint64_t v110 = &qword_1001B74D0;
  }
  uint64_t v111 = *v110;
  swift_retain();
  uint64_t v247 = v111;
  static Edge.Set.all.getter();
  v246[6] = v102;
  v246[7] = &protocol witness table for _PaddingLayout;
  uint64_t v112 = v188;
  uint64_t v113 = swift_getWitnessTable();
  long long v114 = v186;
  uint64_t v115 = v230;
  View.background<A>(_:ignoresSafeAreaEdges:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v187 + 8))(v115, v112);
  uint64_t v116 = sub_10000A780(&qword_1001A6290, &qword_1001A6298);
  v246[4] = v113;
  v246[5] = v116;
  uint64_t v117 = v235;
  uint64_t v193 = swift_getWitnessTable();
  sub_1001221F0(v114, v117);
  uint64_t v118 = *(void (**)(char *, uint64_t))(v232 + 8);
  uint64_t v230 = (char *)(v232 + 8);
  uint64_t v211 = v118;
  v118(v114, v117);
  Divider.init()();
  uint64_t v119 = v204;
  uint64_t v120 = v203;
  uint64_t v121 = v238;
  (*(void (**)(char *, uint64_t, uint64_t))(v204 + 16))(v203, v99, v238);
  unint64_t v122 = (*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80);
  uint64_t v123 = swift_allocObject();
  uint64_t v124 = v236;
  uint64_t v125 = v237;
  *(void *)(v123 + 16) = v236;
  *(void *)(v123 + 24) = v125;
  uint64_t v126 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v119 + 32))(v123 + v122, v120, v121);
  __chkstk_darwin(v126, v127);
  v181[-4] = v124;
  v181[-3] = v125;
  v181[-2] = v99;
  sub_10000570C(&qword_1001A82D0);
  sub_10008EC7C();
  uint64_t v128 = v206;
  Button.init(action:label:)();
  sub_1000808B8(v121, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  LOBYTE(v124) = sub_10001D214();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v130 = swift_allocObject();
  *(unsigned char *)(v130 + 16) = (v124 & 1) == 0;
  uint64_t v131 = v207;
  uint64_t v132 = v208;
  (*(void (**)(uint64_t, char *, uint64_t))(v207 + 16))(v109, v128, v208);
  uint64_t v133 = (uint64_t *)(v109 + *(int *)(v205 + 36));
  *uint64_t v133 = KeyPath;
  v133[1] = (uint64_t)sub_100092AA0;
  v133[2] = v130;
  (*(void (**)(char *, uint64_t))(v131 + 8))(v128, v132);
  sub_1000808B8(v121, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  LOBYTE(v117) = sub_10001D214();
  swift_release();
  if (v117) {
    uint64_t v134 = static Color.blue.getter();
  }
  else {
    uint64_t v134 = static Color.gray.getter();
  }
  uint64_t v135 = v134;
  uint64_t v136 = (uint64_t)v220;
  char v137 = static Edge.Set.all.getter();
  uint64_t v138 = v214;
  sub_10000A428(v109, v214, &qword_1001A8298);
  uint64_t v139 = v138 + *(int *)(v209 + 36);
  *(void *)uint64_t v139 = v135;
  *(unsigned char *)(v139 + 8) = v137;
  sub_10000ACE0(v109, &qword_1001A8298);
  uint64_t v140 = v218;
  uint64_t v141 = &v218[*(int *)(v217 + 20)];
  uint64_t v142 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v143 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v143 - 8) + 104))(v141, v142, v143);
  __asm { FMOV            V0.2D, #8.0 }
  *uint64_t v140 = _Q0;
  uint64_t v149 = (uint64_t)v215;
  uint64_t v150 = (uint64_t)&v215[*(int *)(v210 + 36)];
  sub_10008FDD4((uint64_t)v140, v150, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v150 + *(int *)(sub_10000570C(&qword_1001A62A8) + 36)) = 256;
  sub_10000A428(v138, v149, &qword_1001A82A0);
  sub_10008ED20((uint64_t)v140, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_10000ACE0(v138, &qword_1001A82A0);
  LOBYTE(v150) = static Edge.Set.vertical.getter();
  uint64_t v151 = v216;
  sub_10000A428(v149, v216, &qword_1001A82A8);
  uint64_t v152 = v151 + *(int *)(v212 + 36);
  *(unsigned char *)uint64_t v152 = v150;
  *(_OWORD *)(v152 + 8) = 0u;
  *(_OWORD *)(v152 + 24) = 0u;
  *(unsigned char *)(v152 + 40) = 1;
  sub_10000ACE0(v149, &qword_1001A82A8);
  LOBYTE(v150) = static Edge.Set.horizontal.getter();
  sub_10000A428(v151, v136, &qword_1001A82B0);
  uint64_t v153 = v136 + *(int *)(v213 + 36);
  *(unsigned char *)uint64_t v153 = v150;
  *(_OWORD *)(v153 + 8) = 0u;
  *(_OWORD *)(v153 + 24) = 0u;
  *(unsigned char *)(v153 + 40) = 1;
  sub_10000ACE0(v151, &qword_1001A82B0);
  LOBYTE(v151) = static Edge.Set.leading.getter();
  unsigned __int8 v154 = static Edge.Set.trailing.getter();
  unsigned __int8 v155 = static Edge.Set.bottom.getter();
  char v156 = Edge.Set.init(rawValue:)();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v151) {
    char v156 = Edge.Set.init(rawValue:)();
  }
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v154) {
    char v156 = Edge.Set.init(rawValue:)();
  }
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v155) {
    char v156 = Edge.Set.init(rawValue:)();
  }
  sub_1000808B8(v238, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  double v157 = sub_10001CBF0();
  uint64_t v159 = v158;
  uint64_t v161 = v160;
  uint64_t v163 = v162;
  swift_release();
  uint64_t v164 = v222;
  sub_10000A428(v136, v222, &qword_1001A82B8);
  uint64_t v165 = v164 + *(int *)(v221 + 36);
  *(unsigned char *)uint64_t v165 = v156;
  *(double *)(v165 + 8) = v157;
  *(void *)(v165 + 16) = v159;
  *(void *)(v165 + 24) = v161;
  *(void *)(v165 + 32) = v163;
  sub_10000ACE0(v136, &qword_1001A82B8);
  long long v166 = v226;
  static AccessibilityTraits.isHeader.getter();
  sub_10008ED80();
  uint64_t v167 = (uint64_t)v219;
  View.accessibilityAddTraits(_:)();
  (*(void (**)(char *, uint64_t))(v227 + 8))(v166, v228);
  sub_10000ACE0(v164, &qword_1001A82C0);
  uint64_t v168 = v224;
  sub_10000A3C4(v167, v224, &qword_1001A8218);
  uint64_t v169 = (uint64_t)v231;
  sub_10000A428(v93, (uint64_t)v231, &qword_1001A5A58);
  uint64_t v247 = v169;
  long long v170 = v201;
  long long v171 = v234;
  uint64_t v172 = v235;
  (*(void (**)(char *, char *, uint64_t))(v232 + 16))(v201, v234, v235);
  uint64_t v248 = (uint64_t)v170;
  uint64_t v173 = v198;
  uint64_t v174 = v233;
  uint64_t v175 = v200;
  v194(v198, v233, v200);
  uint64_t v249 = (uint64_t)v173;
  uint64_t v176 = v225;
  sub_10000A428(v168, v225, &qword_1001A8218);
  uint64_t v250 = v176;
  v246[0] = v197;
  v246[1] = v172;
  v246[2] = v175;
  v246[3] = v223;
  unint64_t v242 = sub_10008F05C();
  uint64_t v243 = v193;
  uint64_t v244 = sub_10008E768(&qword_1001A8320, (void (*)(uint64_t))&type metadata accessor for Divider);
  unint64_t v245 = sub_10008F108();
  sub_1001231A4((uint64_t)&v247, 4uLL, (uint64_t)v246);
  sub_10000ACE0(v168, &qword_1001A8218);
  long long v177 = v174;
  long long v178 = v196;
  v196(v177, v175);
  long long v179 = v211;
  v211(v171, v172);
  sub_10000ACE0(v93, &qword_1001A5A58);
  sub_10000ACE0(v176, &qword_1001A8218);
  v178(v173, v175);
  v179(v170, v172);
  return sub_10000ACE0((uint64_t)v231, &qword_1001A5A58);
}

uint64_t sub_100084454@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v21 = a4;
  v19[0] = sub_100004A58(&qword_1001A8200);
  v19[1] = sub_100004A58(&qword_1001A8208);
  swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Array();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_100004A58(&qword_1001A8210);
  type metadata accessor for Set();
  swift_getWitnessTable();
  type metadata accessor for _AnimationModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for ZStack();
  swift_getWitnessTable();
  type metadata accessor for Button();
  type metadata accessor for AccessibilityAttachmentModifier();
  uint64_t v28 = v6;
  uint64_t v29 = AssociatedTypeWitness;
  uint64_t v30 = type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for ForEach();
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v27 = sub_10008E768((unint64_t *)&qword_1001A68E8, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  uint64_t v25 = swift_getWitnessTable();
  swift_getWitnessTable();
  type metadata accessor for LazyVGrid();
  swift_getWitnessTable();
  type metadata accessor for ScrollView();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for VStack();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)v19 - v15;
  static HorizontalAlignment.leading.getter();
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v24 = v20;
  VStack.init(alignment:spacing:content:)();
  swift_getWitnessTable();
  sub_1001221F0(v13, v8);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v9 + 8);
  v17(v13, v8);
  sub_1001221F0(v16, v8);
  return ((uint64_t (*)(char *, uint64_t))v17)(v16, v8);
}

uint64_t sub_10008498C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(void, void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v183 = a1;
  uint64_t v174 = a4;
  uint64_t v185 = a2;
  uint64_t v186 = a3;
  swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Array();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_100004A58(&qword_1001A8210);
  type metadata accessor for Set();
  swift_getWitnessTable();
  type metadata accessor for _AnimationModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for ZStack();
  swift_getWitnessTable();
  type metadata accessor for Button();
  type metadata accessor for AccessibilityAttachmentModifier();
  *(void *)&long long v256 = v4;
  *((void *)&v256 + 1) = AssociatedTypeWitness;
  *(void *)&long long v257 = type metadata accessor for ModifiedContent();
  *((void *)&v257 + 1) = swift_getWitnessTable();
  *(void *)&long long v258 = swift_getAssociatedConformanceWitness();
  type metadata accessor for ForEach();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v232 = sub_10008E768((unint64_t *)&qword_1001A68E8, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  uint64_t v230 = swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for LazyVGrid();
  v150[1] = swift_getWitnessTable();
  v150[2] = v6;
  uint64_t v7 = type metadata accessor for ScrollView();
  uint64_t v152 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v7);
  uint64_t v151 = (char *)v150 - v8;
  uint64_t v153 = v9;
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v154 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  char v156 = (char *)v150 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  unsigned __int8 v155 = (char *)v150 - v15;
  uint64_t v187 = sub_100004A58(&qword_1001A8200);
  uint64_t v157 = v10;
  swift_getTupleTypeMetadata2();
  uint64_t v171 = type metadata accessor for TupleView();
  uint64_t v173 = type metadata accessor for Optional();
  uint64_t v181 = *(void *)(v173 - 8);
  uint64_t v17 = __chkstk_darwin(v173, v16);
  uint64_t v172 = (char *)v150 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  uint64_t v170 = (uint64_t)v150 - v20;
  uint64_t v168 = sub_10000570C(&qword_1001A8330);
  __chkstk_darwin(v168, v21);
  uint64_t v164 = (uint64_t)v150 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000570C(&qword_1001A8338);
  uint64_t v166 = *(void *)(v23 - 8);
  uint64_t v167 = v23;
  __chkstk_darwin(v23, v24);
  uint64_t v165 = (char *)v150 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v179 = sub_10000570C(&qword_1001A8208);
  uint64_t v27 = __chkstk_darwin(v179, v26);
  uint64_t v169 = (uint64_t)v150 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v27, v29);
  uint64_t v163 = (char *)v150 - v31;
  __chkstk_darwin(v30, v32);
  uint64_t v180 = (uint64_t)v150 - v33;
  uint64_t v176 = type metadata accessor for AccessibilityTraits();
  uint64_t v182 = *(void *)(v176 - 8);
  uint64_t v35 = __chkstk_darwin(v176, v34);
  uint64_t v175 = (char *)v150 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __chkstk_darwin(v35, v37);
  v150[0] = (char *)v150 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = __chkstk_darwin(v38, v40);
  long long v177 = (char *)v150 - v42;
  uint64_t v44 = __chkstk_darwin(v41, v43);
  uint64_t v184 = (uint64_t)v150 - v45;
  __chkstk_darwin(v44, v46);
  uint64_t v178 = (uint64_t)v150 - v47;
  uint64_t v161 = type metadata accessor for FilterView();
  uint64_t v162 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter;
  sub_1000808B8(v161, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  __int16 v149 = 256;
  uint64_t v148 = 0;
  uint64_t v48 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v50 = v49;
  char v52 = v51 & 1;
  static Font.Weight.semibold.getter();
  uint64_t v53 = Text.fontWeight(_:)();
  uint64_t v55 = v54;
  char v57 = v56 & 1;
  sub_10000FCC4(v48, v50, v52);
  swift_bridgeObjectRelease();
  static Font.title2.getter();
  uint64_t v58 = Text.font(_:)();
  uint64_t v159 = v59;
  uint64_t v160 = v58;
  LOBYTE(AssociatedTypeWitness) = v60;
  uint64_t v158 = v61;
  swift_release();
  sub_10000FCC4(v53, v55, v57);
  swift_bridgeObjectRelease();
  static Alignment.leading.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v62 = v233;
  LOBYTE(v55) = v234;
  uint64_t v63 = v235;
  LOBYTE(v50) = v236;
  uint64_t v64 = v237;
  uint64_t v65 = v238;
  char v66 = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v68 = v67;
  uint64_t v70 = v69;
  uint64_t v72 = v71;
  uint64_t v74 = v73;
  char v252 = AssociatedTypeWitness & 1;
  char v250 = v55;
  char v248 = v50;
  char v245 = 0;
  LOBYTE(v55) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  *(_DWORD *)((char *)&v221 + 1) = *(_DWORD *)v251;
  DWORD1(v221) = *(_DWORD *)&v251[3];
  *(_DWORD *)((char *)&v222 + 9) = *(_DWORD *)v249;
  HIDWORD(v222) = *(_DWORD *)&v249[3];
  *(_DWORD *)((char *)&v223 + 9) = *(_DWORD *)v247;
  HIDWORD(v223) = *(_DWORD *)&v247[3];
  *(_DWORD *)((char *)&v225 + 1) = *(_DWORD *)v246;
  DWORD1(v225) = *(_DWORD *)&v246[3];
  char v253 = 0;
  *(void *)&long long v220 = v160;
  *((void *)&v220 + 1) = v159;
  LOBYTE(v221) = v252;
  *((void *)&v221 + 1) = v158;
  *(void *)&long long v222 = v62;
  BYTE8(v222) = v250;
  *(void *)&long long v223 = v63;
  uint64_t v75 = v184;
  BYTE8(v223) = v248;
  *(void *)&long long v224 = v64;
  *((void *)&v224 + 1) = v65;
  LOBYTE(v225) = v66;
  *((void *)&v225 + 1) = v68;
  *(void *)&long long v226 = v70;
  *((void *)&v226 + 1) = v72;
  *(void *)&long long v227 = v74;
  BYTE8(v227) = v245;
  HIDWORD(v227) = *(_DWORD *)&v255[3];
  *(_DWORD *)((char *)&v227 + 9) = *(_DWORD *)v255;
  LOBYTE(v228) = v55;
  DWORD1(v228) = *(_DWORD *)&v254[3];
  *(_DWORD *)((char *)&v228 + 1) = *(_DWORD *)v254;
  *((void *)&v228 + 1) = v76;
  *(void *)&v229[0] = v77;
  *((void *)&v229[0] + 1) = v78;
  *(void *)&v229[1] = v79;
  BYTE8(v229[1]) = 0;
  uint64_t v80 = v175;
  static AccessibilityTraits.isHeader.getter();
  uint64_t v81 = sub_10000570C(&qword_1001A8340);
  uint64_t v82 = sub_100092924(&qword_1001A8348, &qword_1001A8340, (void (*)(void))sub_1000242FC);
  uint64_t v83 = (uint64_t)v177;
  uint64_t v160 = v82;
  View.accessibilityAddTraits(_:)();
  uint64_t v84 = *(void (**)(char *, uint64_t))(v182 + 8);
  v182 += 8;
  uint64_t v159 = v84;
  v84(v80, v176);
  long long v264 = v228;
  v265[0] = v229[0];
  *(_OWORD *)((char *)v265 + 9) = *(_OWORD *)((char *)v229 + 9);
  long long v260 = v224;
  long long v261 = v225;
  long long v263 = v227;
  long long v262 = v226;
  long long v256 = v220;
  long long v257 = v221;
  long long v259 = v223;
  long long v258 = v222;
  sub_10008F22C((uint64_t)&v256);
  ModifiedContent<>.accessibilityHeading(_:)();
  sub_10000ACE0(v83, &qword_1001A8200);
  sub_10000A3C4(v75, v178, &qword_1001A8200);
  uint64_t v188 = v185;
  uint64_t v189 = v186;
  uint64_t v190 = v183;
  sub_100086F40(v164);
  sub_10000570C(&qword_1001A8350);
  sub_10008F278();
  sub_10008F4B0();
  uint64_t v85 = v165;
  Section<>.init(header:content:)();
  LOBYTE(v83) = static Edge.Set.bottom.getter();
  uint64_t v87 = v166;
  uint64_t v86 = v167;
  uint64_t v88 = (uint64_t)v163;
  (*(void (**)(char *, char *, uint64_t))(v166 + 16))(v163, v85, v167);
  uint64_t v89 = v88 + *(int *)(v179 + 36);
  *(unsigned char *)uint64_t v89 = v83;
  *(_OWORD *)(v89 + 8) = 0u;
  *(_OWORD *)(v89 + 24) = 0u;
  *(unsigned char *)(v89 + 40) = 1;
  uint64_t v90 = v87;
  uint64_t v91 = v161;
  (*(void (**)(char *, uint64_t))(v90 + 8))(v85, v86);
  sub_10000A3C4(v88, v180, &qword_1001A8208);
  sub_1000808B8(v91, v162);
  LOBYTE(v83) = sub_10001E280();
  swift_release();
  if (v83)
  {
    sub_1000808B8(v91, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    __int16 v149 = 256;
    uint64_t v92 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v94 = v93;
    char v96 = v95 & 1;
    static Font.Weight.semibold.getter();
    uint64_t v97 = Text.fontWeight(_:)();
    uint64_t v99 = v98;
    uint64_t v168 = v81;
    char v101 = v100 & 1;
    sub_10000FCC4(v92, v94, v96);
    swift_bridgeObjectRelease();
    static Font.title2.getter();
    uint64_t v102 = Text.font(_:)();
    uint64_t v166 = v103;
    uint64_t v167 = v102;
    char v105 = v104;
    uint64_t v107 = v106;
    swift_release();
    sub_10000FCC4(v97, v99, v101);
    swift_bridgeObjectRelease();
    static Alignment.leading.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v108 = v239;
    LOBYTE(v94) = v240;
    uint64_t v109 = v241;
    char v110 = v242;
    uint64_t v111 = v243;
    uint64_t v112 = v244;
    LOBYTE(v97) = static Edge.Set.bottom.getter();
    EdgeInsets.init(_all:)();
    uint64_t v114 = v113;
    uint64_t v116 = v115;
    uint64_t v118 = v117;
    uint64_t v120 = v119;
    char v212 = v105 & 1;
    char v210 = v94;
    char v208 = v110;
    char v205 = 0;
    LOBYTE(v94) = static Edge.Set.top.getter();
    EdgeInsets.init(_all:)();
    *(_DWORD *)((char *)&v196 + 1) = *(_DWORD *)v211;
    DWORD1(v196) = *(_DWORD *)&v211[3];
    *(_DWORD *)((char *)&v197 + 9) = *(_DWORD *)v209;
    HIDWORD(v197) = *(_DWORD *)&v209[3];
    *(_DWORD *)((char *)&v198 + 9) = *(_DWORD *)v207;
    HIDWORD(v198) = *(_DWORD *)&v207[3];
    *(_DWORD *)((char *)&v200 + 1) = *(_DWORD *)v206;
    DWORD1(v200) = *(_DWORD *)&v206[3];
    char v213 = 0;
    *(void *)&long long v195 = v167;
    *((void *)&v195 + 1) = v166;
    LOBYTE(v196) = v212;
    *((void *)&v196 + 1) = v107;
    *(void *)&long long v197 = v108;
    BYTE8(v197) = v210;
    *(void *)&long long v198 = v109;
    BYTE8(v198) = v208;
    *(void *)&long long v199 = v111;
    *((void *)&v199 + 1) = v112;
    uint64_t v75 = v184;
    LOBYTE(v200) = v97;
    *((void *)&v200 + 1) = v114;
    *(void *)&long long v201 = v116;
    *((void *)&v201 + 1) = v118;
    *(void *)&long long v202 = v120;
    BYTE8(v202) = v205;
    HIDWORD(v202) = *(_DWORD *)&v215[3];
    *(_DWORD *)((char *)&v202 + 9) = *(_DWORD *)v215;
    LOBYTE(v203) = v94;
    DWORD1(v203) = *(_DWORD *)&v214[3];
    *(_DWORD *)((char *)&v203 + 1) = *(_DWORD *)v214;
    *((void *)&v203 + 1) = v121;
    *(void *)&v204[0] = v122;
    *((void *)&v204[0] + 1) = v123;
    *(void *)&v204[1] = v124;
    BYTE8(v204[1]) = 0;
    uint64_t v125 = v175;
    static AccessibilityTraits.isHeader.getter();
    uint64_t v126 = v150[0];
    View.accessibilityAddTraits(_:)();
    v159(v125, v176);
    long long v228 = v203;
    v229[0] = v204[0];
    *(_OWORD *)((char *)v229 + 9) = *(_OWORD *)((char *)v204 + 9);
    long long v224 = v199;
    long long v225 = v200;
    long long v226 = v201;
    long long v227 = v202;
    long long v220 = v195;
    long long v221 = v196;
    long long v222 = v197;
    long long v223 = v198;
    sub_10008F22C((uint64_t)&v220);
    uint64_t v127 = (uint64_t)v177;
    ModifiedContent<>.accessibilityHeading(_:)();
    sub_10000ACE0(v126, &qword_1001A8200);
    uint64_t v128 = sub_10000A3C4(v127, v75, &qword_1001A8200);
    __chkstk_darwin(v128, v129);
    uint64_t v130 = v186;
    v150[-4] = v185;
    v150[-3] = v130;
    uint64_t v148 = v183;
    static Axis.Set.vertical.getter();
    uint64_t v131 = v151;
    ScrollView.init(_:showsIndicators:content:)();
    static Edge.Set.bottom.getter();
    uint64_t v132 = v153;
    uint64_t v133 = swift_getWitnessTable();
    uint64_t v134 = v156;
    View.padding(_:_:)();
    (*(void (**)(char *, uint64_t))(v152 + 8))(v131, v132);
    uint64_t v193 = v133;
    uint64_t v194 = &protocol witness table for _PaddingLayout;
    uint64_t v135 = v157;
    uint64_t v136 = swift_getWitnessTable();
    char v137 = v155;
    sub_1001221F0(v134, v135);
    uint64_t v138 = v154;
    uint64_t v139 = *(void (**)(char *, uint64_t))(v154 + 8);
    v139(v134, v135);
    sub_10000A428(v75, v127, &qword_1001A8200);
    *(void *)&long long v195 = v127;
    (*(void (**)(char *, char *, uint64_t))(v138 + 16))(v134, v137, v135);
    *((void *)&v195 + 1) = v134;
    unint64_t v217 = v187;
    uint64_t v218 = v135;
    unint64_t v191 = sub_10008F550();
    uint64_t v192 = v136;
    uint64_t v140 = (uint64_t)v172;
    sub_1001231A4((uint64_t)&v195, 2uLL, (uint64_t)&v217);
    v139(v137, v135);
    sub_10000ACE0(v75, &qword_1001A8200);
    v139(v134, v135);
    sub_10000ACE0(v127, &qword_1001A8200);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v171 - 8) + 56))(v140, 0, 1, v171);
  }
  else
  {
    uint64_t v140 = (uint64_t)v172;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v171 - 8) + 56))(v172, 1, 1, v171);
  }
  swift_getWitnessTable();
  uint64_t v141 = v170;
  sub_100123138(v140, v170);
  uint64_t v142 = v173;
  uint64_t v186 = *(void (**)(void, void))(v181 + 8);
  v186(v140, v173);
  uint64_t v143 = v178;
  sub_10000A428(v178, v75, &qword_1001A8200);
  *(void *)&long long v220 = v75;
  uint64_t v144 = v180;
  uint64_t v145 = v169;
  sub_10000A428(v180, v169, &qword_1001A8208);
  *((void *)&v220 + 1) = v145;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v181 + 16))(v140, v141, v142);
  *(void *)&long long v221 = v140;
  *(void *)&long long v195 = v187;
  *((void *)&v195 + 1) = v179;
  *(void *)&long long v196 = v142;
  unint64_t v217 = sub_10008F550();
  uint64_t v218 = sub_100092924(&qword_1001A83A0, &qword_1001A8208, (void (*)(void))sub_10008F628);
  uint64_t v216 = swift_getWitnessTable();
  uint64_t v219 = swift_getWitnessTable();
  sub_1001231A4((uint64_t)&v220, 3uLL, (uint64_t)&v195);
  unint64_t v146 = v186;
  v186(v141, v142);
  sub_10000ACE0(v144, &qword_1001A8208);
  sub_10000ACE0(v143, &qword_1001A8200);
  v146(v140, v142);
  sub_10000ACE0(v145, &qword_1001A8208);
  return sub_10000ACE0(v184, &qword_1001A8200);
}

uint64_t sub_100085E04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_10000570C(&qword_1001A8390);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (uint64_t *)((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v11 = static Alignment.center.getter();
  v11[1] = v12;
  uint64_t v13 = sub_10000570C(&qword_1001A8408);
  sub_100085F2C(a1, a2, a3, (uint64_t)v11 + *(int *)(v13 + 44));
  LOBYTE(a3) = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  sub_10000A428((uint64_t)v11, a4, &qword_1001A8390);
  uint64_t v22 = a4 + *(int *)(sub_10000570C(&qword_1001A8350) + 36);
  *(unsigned char *)uint64_t v22 = a3;
  *(void *)(v22 + 8) = v15;
  *(void *)(v22 + 16) = v17;
  *(void *)(v22 + 24) = v19;
  *(void *)(v22 + 32) = v21;
  *(unsigned char *)(v22 + 40) = 0;
  return sub_10000ACE0((uint64_t)v11, &qword_1001A8390);
}

uint64_t sub_100085F2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v82 = a2;
  uint64_t v83 = a3;
  uint64_t v80 = a4;
  uint64_t v81 = a1;
  uint64_t v4 = sub_10000570C(&qword_1001A8410);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_10000570C(&qword_1001A8418);
  __chkstk_darwin(v76, v8);
  uint64_t v78 = (uint64_t)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_10000570C(&qword_1001A8420);
  uint64_t v11 = __chkstk_darwin(v77, v10);
  uint64_t v13 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  uint64_t v79 = (uint64_t)&v72 - v15;
  uint64_t v16 = type metadata accessor for ColorScheme();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v21 = (char *)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v22);
  uint64_t v24 = (char *)&v72 - v23;
  uint64_t v25 = type metadata accessor for RoundedRectangle();
  uint64_t v26 = v25 - 8;
  __chkstk_darwin(v25, v27);
  uint64_t v29 = (_OWORD *)((char *)&v72 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v73 = sub_10000570C(&qword_1001A8428);
  uint64_t v31 = __chkstk_darwin(v73, v30);
  uint64_t v75 = (uint64_t)&v72 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __chkstk_darwin(v31, v33);
  uint64_t v36 = (char *)&v72 - v35;
  __chkstk_darwin(v34, v37);
  uint64_t v74 = (uint64_t)&v72 - v38;
  uint64_t v39 = (char *)v29 + *(int *)(v26 + 28);
  uint64_t v40 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v41 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v41 - 8) + 104))(v39, v40, v41);
  __asm { FMOV            V0.2D, #8.0 }
  _OWORD *v29 = _Q0;
  type metadata accessor for FilterView();
  sub_100026F48((uint64_t)v24);
  (*(void (**)(char *, void, uint64_t))(v17 + 104))(v21, enum case for ColorScheme.light(_:), v16);
  LOBYTE(v39) = static ColorScheme.== infix(_:_:)();
  uint64_t v47 = *(void (**)(char *, uint64_t))(v17 + 8);
  v47(v21, v16);
  v47(v24, v16);
  if (v39)
  {
    if (qword_1001A4E30 != -1) {
      swift_once();
    }
    uint64_t v48 = &qword_1001B74D0;
  }
  else
  {
    if (qword_1001A4E58 != -1) {
      swift_once();
    }
    uint64_t v48 = &qword_1001B74F8;
  }
  uint64_t v49 = *v48;
  swift_retain();
  uint64_t KeyPath = swift_getKeyPath();
  sub_10008FDD4((uint64_t)v29, (uint64_t)v36, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  char v51 = (uint64_t *)&v36[*(int *)(v73 + 36)];
  *char v51 = KeyPath;
  v51[1] = v49;
  sub_10008ED20((uint64_t)v29, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  uint64_t v52 = v74;
  sub_10000A3C4((uint64_t)v36, v74, &qword_1001A8428);
  *(void *)uint64_t v7 = static HorizontalAlignment.center.getter();
  *((void *)v7 + 1) = 0;
  unsigned char v7[16] = 0;
  uint64_t v53 = sub_10000570C(&qword_1001A8430);
  sub_10008656C(v82, v83, (uint64_t)&v7[*(int *)(v53 + 44)]);
  char v54 = static Edge.Set.horizontal.getter();
  uint64_t v55 = v78;
  sub_10000A428((uint64_t)v7, v78, &qword_1001A8410);
  uint64_t v56 = v55 + *(int *)(v76 + 36);
  *(unsigned char *)uint64_t v56 = v54;
  *(_OWORD *)(v56 + 8) = 0u;
  *(_OWORD *)(v56 + 24) = 0u;
  *(unsigned char *)(v56 + 40) = 1;
  sub_10000ACE0((uint64_t)v7, &qword_1001A8410);
  char v57 = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v59 = v58;
  uint64_t v61 = v60;
  uint64_t v63 = v62;
  uint64_t v65 = v64;
  sub_10000A428(v55, (uint64_t)v13, &qword_1001A8418);
  char v66 = &v13[*(int *)(v77 + 36)];
  char *v66 = v57;
  *((void *)v66 + 1) = v59;
  *((void *)v66 + 2) = v61;
  *((void *)v66 + 3) = v63;
  *((void *)v66 + 4) = v65;
  v66[40] = 0;
  sub_10000ACE0(v55, &qword_1001A8418);
  uint64_t v67 = v79;
  sub_10000A3C4((uint64_t)v13, v79, &qword_1001A8420);
  uint64_t v68 = v75;
  sub_10000A428(v52, v75, &qword_1001A8428);
  sub_10000A428(v67, (uint64_t)v13, &qword_1001A8420);
  uint64_t v69 = v80;
  sub_10000A428(v68, v80, &qword_1001A8428);
  uint64_t v70 = sub_10000570C(&qword_1001A8438);
  sub_10000A428((uint64_t)v13, v69 + *(int *)(v70 + 48), &qword_1001A8420);
  sub_10000ACE0(v67, &qword_1001A8420);
  sub_10000ACE0(v52, &qword_1001A8428);
  sub_10000ACE0((uint64_t)v13, &qword_1001A8420);
  return sub_10000ACE0(v68, &qword_1001A8428);
}

uint64_t sub_10008656C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v81 = a3;
  uint64_t v80 = type metadata accessor for Divider();
  uint64_t v79 = *(void *)(v80 - 8);
  uint64_t v6 = __chkstk_darwin(v80, v5);
  uint64_t v78 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  uint64_t v87 = (char *)&v69 - v9;
  uint64_t v10 = sub_10000570C(&qword_1001A8440);
  uint64_t v12 = __chkstk_darwin(v10 - 8, v11);
  uint64_t v83 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v82 = (uint64_t)&v69 - v16;
  __chkstk_darwin(v15, v17);
  uint64_t v84 = (uint64_t)&v69 - v18;
  uint64_t v19 = (int *)(type metadata accessor for CompactDatePicker(0) - 8);
  uint64_t v21 = __chkstk_darwin(v19, v20);
  uint64_t v77 = (uint64_t)&v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v21, v23);
  uint64_t v86 = (uint64_t)&v69 - v25;
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v85 = (uint64_t)&v69 - v28;
  __chkstk_darwin(v27, v29);
  uint64_t v88 = (uint64_t)&v69 - v30;
  uint64_t v31 = type metadata accessor for FilterView();
  sub_1000808B8(v31, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  uint64_t v103 = a1;
  uint64_t v104 = a2;
  swift_getKeyPath();
  type metadata accessor for FilterViewModel();
  uint64_t WitnessTable = swift_getWitnessTable();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  sub_1000808B8(v31, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  uint64_t v101 = a1;
  uint64_t v102 = a2;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter;
  sub_1000808B8(v31, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  uint64_t v73 = a1;
  uint64_t v99 = a1;
  uint64_t v100 = a2;
  uint64_t v33 = a2;
  uint64_t v74 = a2;
  swift_getKeyPath();
  uint64_t v34 = (uint64_t)v83;
  uint64_t v71 = WitnessTable;
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  sub_1000808B8(v31, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  uint64_t v97 = a1;
  uint64_t v98 = v33;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v70 = v105;
  uint64_t v69 = v106;
  uint64_t v35 = v107;
  sub_1000808B8(v31, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v36 = v88;
  sub_10001D6BC((char *)(v88 + v19[10]));
  swift_release();
  uint64_t v76 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter;
  sub_1000808B8(v31, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  double v37 = sub_10001E34C();
  swift_release();
  sub_1000808B8(v31, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  LOBYTE(v33) = sub_10001DBEC();
  swift_release();
  sub_10000A3C4(v84, v36, &qword_1001A8440);
  sub_10000A3C4(v82, v36 + v19[7], &qword_1001A8440);
  sub_10000A3C4(v34, v36 + v19[8], &qword_1001A8440);
  uint64_t v75 = v19;
  uint64_t v38 = (void *)(v36 + v19[9]);
  uint64_t v39 = v69;
  *uint64_t v38 = v70;
  v38[1] = v39;
  v38[2] = v35;
  *(double *)(v36 + v19[11]) = v37;
  *(unsigned char *)(v36 + v19[12]) = v33 & 1;
  Divider.init()();
  uint64_t v40 = v72;
  sub_1000808B8(v31, v72);
  uint64_t v41 = v73;
  uint64_t v42 = v74;
  uint64_t v95 = v73;
  uint64_t v96 = v74;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  sub_1000808B8(v31, v40);
  uint64_t v93 = v41;
  uint64_t v94 = v42;
  uint64_t v43 = v42;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  sub_1000808B8(v31, v40);
  uint64_t v91 = v41;
  uint64_t v92 = v42;
  swift_getKeyPath();
  uint64_t v44 = (uint64_t)v83;
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  sub_1000808B8(v31, v40);
  uint64_t v89 = v41;
  uint64_t v90 = v43;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v45 = v105;
  uint64_t v46 = v106;
  uint64_t v47 = v107;
  uint64_t v48 = v76;
  sub_1000808B8(v31, v76);
  uint64_t v49 = v75;
  uint64_t v50 = v85;
  sub_10001D94C((char *)(v85 + v75[10]));
  swift_release();
  sub_1000808B8(v31, v48);
  sub_10001E3E8();
  uint64_t v52 = v51;
  swift_release();
  sub_1000808B8(v31, v48);
  LOBYTE(v48) = sub_10001DC04();
  swift_release();
  sub_10000A3C4(v84, v50, &qword_1001A8440);
  uint64_t v53 = v49;
  sub_10000A3C4(v82, v50 + v49[7], &qword_1001A8440);
  uint64_t v54 = v50 + v49[8];
  uint64_t v55 = v50;
  sub_10000A3C4(v44, v54, &qword_1001A8440);
  uint64_t v56 = (void *)(v50 + v53[9]);
  *uint64_t v56 = v45;
  v56[1] = v46;
  v56[2] = v47;
  *(void *)(v50 + v53[11]) = v52;
  *(unsigned char *)(v50 + v53[12]) = v48 & 1;
  uint64_t v57 = v86;
  sub_10008FDD4(v88, v86, type metadata accessor for CompactDatePicker);
  uint64_t v58 = v79;
  uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v79 + 16);
  uint64_t v60 = v78;
  uint64_t v61 = v87;
  uint64_t v62 = v80;
  v59(v78, v87, v80);
  uint64_t v63 = v55;
  uint64_t v64 = v77;
  sub_10008FDD4(v63, v77, type metadata accessor for CompactDatePicker);
  uint64_t v65 = v81;
  sub_10008FDD4(v57, v81, type metadata accessor for CompactDatePicker);
  uint64_t v66 = sub_10000570C(&qword_1001A8448);
  v59((char *)(v65 + *(int *)(v66 + 48)), v60, v62);
  sub_10008FDD4(v64, v65 + *(int *)(v66 + 64), type metadata accessor for CompactDatePicker);
  sub_10008ED20(v85, type metadata accessor for CompactDatePicker);
  uint64_t v67 = *(void (**)(char *, uint64_t))(v58 + 8);
  v67(v61, v62);
  sub_10008ED20(v88, type metadata accessor for CompactDatePicker);
  sub_10008ED20(v64, type metadata accessor for CompactDatePicker);
  v67(v60, v62);
  return sub_10008ED20(v86, type metadata accessor for CompactDatePicker);
}

void sub_100086E98(double *a1@<X8>)
{
  *a1 = sub_10001CD78();
}

uint64_t sub_100086EC4()
{
  return sub_10001CD8C();
}

void sub_100086EEC(double *a1@<X8>)
{
  *a1 = sub_10001CDA0();
}

uint64_t sub_100086F18()
{
  return sub_10001CE68();
}

uint64_t sub_100086F40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v43 = a1;
  uint64_t v1 = type metadata accessor for AccessibilityTraits();
  uint64_t v44 = *(void *)(v1 - 8);
  uint64_t v45 = v1;
  __chkstk_darwin(v1, v2);
  uint64_t v42 = &v37[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v41 = sub_10000570C(&qword_1001A8400);
  uint64_t v40 = *(void *)(v41 - 8);
  __chkstk_darwin(v41, v4);
  uint64_t v6 = &v37[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for FilterView();
  uint64_t v8 = sub_1000808B8(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v9 = (uint64_t *)(v8 + *(void *)(*(void *)v8 + 216));
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v46 = v10;
  unint64_t v47 = v11;
  sub_100010B2C();
  uint64_t v12 = Text.init<A>(_:)();
  uint64_t v14 = v13;
  char v16 = v15;
  uint64_t v18 = v17;
  char v19 = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  if (qword_1001A4E40 != -1) {
    swift_once();
  }
  int v28 = v16 & 1;
  int v38 = v28;
  uint64_t v29 = qword_1001B74E0;
  swift_retain();
  uint64_t v30 = static Font.caption.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v46 = v12;
  unint64_t v47 = v14;
  char v48 = v28;
  uint64_t v49 = v18;
  char v50 = v19;
  uint64_t v51 = v21;
  uint64_t v52 = v23;
  uint64_t v53 = v25;
  uint64_t v54 = v27;
  char v55 = 0;
  uint64_t v56 = v29;
  uint64_t v57 = KeyPath;
  uint64_t v58 = v30;
  static Font.Weight.semibold.getter();
  uint64_t v39 = v18;
  uint64_t v32 = sub_10000570C(&qword_1001A8360);
  unint64_t v33 = sub_10008F358();
  View.fontWeight(_:)();
  sub_10000FCC4(v12, v14, v38);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v34 = v42;
  static AccessibilityTraits.isHeader.getter();
  uint64_t v46 = v32;
  unint64_t v47 = v33;
  swift_getOpaqueTypeConformance2();
  uint64_t v35 = v41;
  View.accessibilityRemoveTraits(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v44 + 8))(v34, v45);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v40 + 8))(v6, v35);
}

uint64_t sub_1000872D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v31 = a1;
  uint64_t v33 = a4;
  uint64_t v6 = type metadata accessor for PinnedScrollableViews();
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v32 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Array();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_100004A58(&qword_1001A8210);
  type metadata accessor for Set();
  swift_getWitnessTable();
  type metadata accessor for _AnimationModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for ZStack();
  swift_getWitnessTable();
  type metadata accessor for Button();
  type metadata accessor for AccessibilityAttachmentModifier();
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v40 = v9;
  uint64_t v41 = AssociatedTypeWitness;
  uint64_t v42 = v11;
  uint64_t v43 = WitnessTable;
  uint64_t v44 = AssociatedConformanceWitness;
  uint64_t v14 = type metadata accessor for ForEach();
  uint64_t v15 = swift_getWitnessTable();
  uint64_t v16 = sub_10008E768((unint64_t *)&qword_1001A68E8, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  uint64_t v38 = v15;
  uint64_t v39 = v16;
  uint64_t v37 = swift_getWitnessTable();
  uint64_t v30 = v14;
  swift_getWitnessTable();
  uint64_t v17 = type metadata accessor for LazyVGrid();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v20 = __chkstk_darwin(v17, v19);
  uint64_t v22 = (char *)&v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v23);
  uint64_t v25 = (char *)&v30 - v24;
  uint64_t v26 = type metadata accessor for FilterView();
  uint64_t v27 = v31;
  sub_1000808B8(v26, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v34 = a2;
  uint64_t v35 = a3;
  uint64_t v36 = v27;
  static HorizontalAlignment.center.getter();
  sub_1000B9D68();
  LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)();
  swift_getWitnessTable();
  sub_1001221F0(v22, v17);
  int v28 = *(void (**)(char *, uint64_t))(v18 + 8);
  v28(v22, v17);
  sub_1001221F0(v25, v17);
  return ((uint64_t (*)(char *, uint64_t))v28)(v25, v17);
}

uint64_t sub_1000877F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v40 = a4;
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v34 = type metadata accessor for FilterView();
  uint64_t v38 = *(void *)(v34 - 8);
  uint64_t v39 = *(void *)(v38 + 64);
  __chkstk_darwin(v34, v5);
  uint64_t v37 = (char *)v33 - v6;
  swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Array();
  v33[3] = *(void *)(swift_getAssociatedConformanceWitness() + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_100004A58(&qword_1001A8210);
  type metadata accessor for Set();
  swift_getWitnessTable();
  type metadata accessor for _AnimationModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for ZStack();
  swift_getWitnessTable();
  v33[1] = type metadata accessor for Button();
  type metadata accessor for AccessibilityAttachmentModifier();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  v33[5] = v7;
  uint64_t WitnessTable = swift_getWitnessTable();
  v33[2] = WitnessTable;
  v33[4] = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v44 = v7;
  uint64_t v45 = AssociatedTypeWitness;
  uint64_t v46 = v9;
  uint64_t v47 = WitnessTable;
  uint64_t v48 = AssociatedConformanceWitness;
  uint64_t v12 = type metadata accessor for ForEach();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v17 = (char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  uint64_t v20 = (char *)v33 - v19;
  uint64_t v21 = v34;
  sub_1000808B8(v34, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v22 = sub_10001C9B4();
  swift_release();
  uint64_t v44 = v22;
  uint64_t v23 = v37;
  uint64_t v24 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v37, a1, v21);
  unint64_t v25 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  uint64_t v26 = swift_allocObject();
  uint64_t v27 = v36;
  *(void *)(v26 + 16) = v35;
  *(void *)(v26 + 24) = v27;
  (*(void (**)(unint64_t, char *, uint64_t))(v24 + 32))(v26 + v25, v23, v21);
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v29 = sub_10008E768((unint64_t *)&qword_1001A68E8, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  uint64_t v42 = v28;
  uint64_t v43 = v29;
  uint64_t v30 = swift_getWitnessTable();
  ForEach<>.init(_:content:)();
  uint64_t v41 = v30;
  swift_getWitnessTable();
  sub_1001221F0(v17, v12);
  uint64_t v31 = *(void (**)(char *, uint64_t))(v13 + 8);
  v31(v17, v12);
  sub_1001221F0(v20, v12);
  return ((uint64_t (*)(char *, uint64_t))v31)(v20, v12);
}

uint64_t sub_100087D68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v73 = a5;
  uint64_t v74 = a2;
  uint64_t v65 = a1;
  uint64_t v7 = type metadata accessor for AccessibilityTraits();
  uint64_t v70 = *(void *)(v7 - 8);
  uint64_t v71 = v7;
  __chkstk_darwin(v7, v8);
  uint64_t v72 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v62 = *(void *)(v11 + 64);
  __chkstk_darwin(AssociatedTypeWitness, v12);
  uint64_t v61 = (char *)&v53 - v13;
  uint64_t v59 = a3;
  uint64_t v60 = a4;
  uint64_t v14 = type metadata accessor for FilterView();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v53 - v18;
  char v55 = (char *)&v53 - v18;
  sub_100004A58(&qword_1001A8210);
  swift_getAssociatedConformanceWitness();
  uint64_t v54 = AssociatedTypeWitness;
  type metadata accessor for Set();
  swift_getWitnessTable();
  type metadata accessor for _AnimationModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v58 = type metadata accessor for ZStack();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v20 = type metadata accessor for Button();
  uint64_t v67 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v21);
  uint64_t v56 = (char *)&v53 - v22;
  type metadata accessor for AccessibilityAttachmentModifier();
  uint64_t v68 = v20;
  uint64_t v63 = type metadata accessor for ModifiedContent();
  uint64_t v69 = *(void *)(v63 - 8);
  uint64_t v24 = __chkstk_darwin(v63, v23);
  uint64_t v64 = (char *)&v53 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v26);
  uint64_t v66 = (char *)&v53 - v27;
  uint64_t v28 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v19, v74, v14);
  uint64_t v29 = v11;
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v31 = v61;
  uint64_t v32 = v65;
  v30(v61, v65, AssociatedTypeWitness);
  unint64_t v33 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v34 = v29;
  unint64_t v35 = (v16 + v33 + *(unsigned __int8 *)(v29 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  uint64_t v36 = swift_allocObject();
  uint64_t v37 = v59;
  uint64_t v38 = v60;
  *(void *)(v36 + 16) = v59;
  *(void *)(v36 + 24) = v38;
  (*(void (**)(unint64_t, char *, uint64_t))(v28 + 32))(v36 + v33, v55, v14);
  uint64_t v39 = v31;
  uint64_t v40 = v56;
  (*(void (**)(unint64_t, char *, uint64_t))(v34 + 32))(v36 + v35, v39, v54);
  uint64_t v75 = v37;
  uint64_t v76 = v38;
  uint64_t v77 = v74;
  uint64_t v78 = v32;
  Button.init(action:label:)();
  sub_1000808B8(v14, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  LOBYTE(v32) = sub_10001FB4C();
  swift_release();
  if (v32)
  {
    sub_10000570C(&qword_1001A83B0);
    uint64_t v41 = v70;
    uint64_t v42 = swift_allocObject();
    *(_OWORD *)(v42 + 16) = xmmword_100152B80;
    static AccessibilityTraits.isToggle.getter();
    static AccessibilityTraits.isSelected.getter();
    uint64_t v79 = v42;
    sub_10008E768(&qword_1001A83B8, (void (*)(uint64_t))&type metadata accessor for AccessibilityTraits);
    sub_10000570C(&qword_1001A83C0);
    sub_10000A780(&qword_1001A83C8, &qword_1001A83C0);
    uint64_t v43 = v72;
    uint64_t v44 = v71;
    dispatch thunk of SetAlgebra.init<A>(_:)();
  }
  else
  {
    uint64_t v43 = v72;
    static AccessibilityTraits.isToggle.getter();
    uint64_t v41 = v70;
    uint64_t v44 = v71;
  }
  uint64_t v45 = v68;
  uint64_t v46 = swift_getWitnessTable();
  uint64_t v47 = v64;
  View.accessibilityAddTraits(_:)();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v43, v44);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v40, v45);
  uint64_t v48 = sub_10008E768((unint64_t *)&qword_1001A68E8, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  uint64_t v80 = v46;
  uint64_t v81 = v48;
  uint64_t v49 = v63;
  swift_getWitnessTable();
  char v50 = v66;
  sub_1001221F0(v47, v49);
  uint64_t v51 = *(void (**)(char *, uint64_t))(v69 + 8);
  v51(v47, v49);
  sub_1001221F0(v50, v49);
  return ((uint64_t (*)(char *, uint64_t))v51)(v50, v49);
}

uint64_t sub_10008858C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FilterView();
  sub_1000808B8(v4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10001FC18(a2);
  swift_release();
  sub_1000808B8(v4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v5 = *(void *)(a1 + *(int *)(v4 + 44));
  if (v5)
  {
    swift_retain();
    sub_10001F7FC(7, 0x65726E6567, 0xE500000000000000, 2u, v5);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10008E768((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000886CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v20[1] = a5;
  sub_100004A58(&qword_1001A8210);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  swift_getWitnessTable();
  type metadata accessor for _AnimationModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v9 = type metadata accessor for ZStack();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  uint64_t v17 = (char *)v20 - v16;
  v20[4] = a3;
  v20[5] = a4;
  v20[6] = a1;
  v20[7] = a2;
  static Alignment.center.getter();
  ZStack.init(alignment:content:)();
  swift_getWitnessTable();
  sub_1001221F0(v14, v9);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v14, v9);
  sub_1001221F0(v17, v9);
  return ((uint64_t (*)(char *, uint64_t))v18)(v17, v9);
}

uint64_t sub_100088988@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v120 = a2;
  uint64_t v122 = a1;
  uint64_t v112 = a4;
  uint64_t v105 = sub_10000570C(&qword_1001A83D0);
  __chkstk_darwin(v105, v5);
  uint64_t v108 = (uint64_t)&v100 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = type metadata accessor for ColorScheme();
  uint64_t v7 = *(void *)(v103 - 8);
  uint64_t v9 = __chkstk_darwin(v103, v8);
  uint64_t v102 = (char *)&v100 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v11);
  uint64_t v101 = (uint64_t)&v100 - v12;
  uint64_t v13 = type metadata accessor for RoundedRectangle();
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (_OWORD *)((char *)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10000570C(&qword_1001A83D8);
  __chkstk_darwin(v113, v18);
  uint64_t v20 = (char *)&v100 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000570C(&qword_1001A8210);
  __chkstk_darwin(v21, v22);
  uint64_t v107 = (void (*)(char *, uint64_t))((char *)&v100 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v121 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v110 = AssociatedTypeWitness;
  uint64_t v25 = (uint64_t)v17;
  uint64_t v26 = type metadata accessor for Set();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v115 = v26;
  uint64_t v27 = type metadata accessor for _AnimationModifier();
  uint64_t v106 = v21;
  uint64_t v116 = v27;
  uint64_t v119 = type metadata accessor for ModifiedContent();
  uint64_t v117 = *(void *)(v119 - 8);
  uint64_t v29 = __chkstk_darwin(v119, v28);
  uint64_t v111 = (char *)&v100 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v29, v31);
  uint64_t v104 = (char *)&v100 - v33;
  __chkstk_darwin(v32, v34);
  uint64_t v118 = (char *)&v100 - v35;
  uint64_t v36 = (char *)v17 + *(int *)(v14 + 28);
  uint64_t v37 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v38 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 104))(v36, v37, v38);
  __asm { FMOV            V0.2D, #8.0 }
  _OWORD *v17 = _Q0;
  uint64_t v121 = type metadata accessor for FilterView();
  uint64_t v44 = v101;
  sub_100026F48(v101);
  uint64_t v46 = v102;
  uint64_t v45 = v103;
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v102, enum case for ColorScheme.light(_:), v103);
  LOBYTE(v36) = static ColorScheme.== infix(_:_:)();
  uint64_t v47 = *(void (**)(char *, uint64_t))(v7 + 8);
  v47(v46, v45);
  v47((char *)v44, v45);
  if (v36)
  {
    if (qword_1001A4E30 != -1) {
      swift_once();
    }
    uint64_t v48 = &qword_1001B74D0;
  }
  else
  {
    if (qword_1001A4E58 != -1) {
      swift_once();
    }
    uint64_t v48 = &qword_1001B74F8;
  }
  uint64_t v49 = *v48;
  swift_retain();
  sub_10008FDD4(v25, (uint64_t)v20, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  char v50 = v113;
  *(void *)&v20[*((int *)v113 + 13)] = v49;
  *(_WORD *)&v20[*((int *)v50 + 14)] = 256;
  sub_10008ED20(v25, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  static Color.blue.getter();
  uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter;
  sub_1000808B8(v121, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10001FB4C();
  swift_release();
  uint64_t v51 = Color.opacity(_:)();
  swift_release();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v52 = (uint64_t)v107;
  sub_10008FDD4((uint64_t)v20, (uint64_t)v107, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  double v53 = *(double *)&v160 * 0.5;
  uint64_t v54 = v108;
  sub_10008FDD4((uint64_t)v20, v108, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(double *)(v54 + *(int *)(type metadata accessor for RoundedRectangle._Inset() + 20)) = v53;
  uint64_t v55 = v54 + *(int *)(sub_10000570C(&qword_1001A83E0) + 36);
  long long v56 = v161;
  *(_OWORD *)uint64_t v55 = v160;
  *(_OWORD *)(v55 + 16) = v56;
  *(void *)(v55 + 32) = v162;
  uint64_t v57 = v105;
  *(void *)(v54 + *(int *)(v105 + 52)) = v51;
  *(_WORD *)(v54 + *(int *)(v57 + 56)) = 256;
  uint64_t v58 = static Alignment.center.getter();
  uint64_t v60 = v59;
  uint64_t v61 = v52 + *(int *)(v106 + 68);
  uint64_t v62 = v61 + *(int *)(sub_10000570C(&qword_1001A83E8) + 36);
  sub_10000A428((uint64_t)v20, v62, &qword_1001A83D8);
  uint64_t v63 = (uint64_t *)(v62 + *(int *)(sub_10000570C(&qword_1001A83F0) + 36));
  *uint64_t v63 = v58;
  v63[1] = v60;
  sub_10000A3C4(v54, v61, &qword_1001A83D0);
  sub_10000ACE0((uint64_t)v20, &qword_1001A83D8);
  uint64_t v64 = v121;
  uint64_t v65 = v113;
  sub_1000808B8(v121, v113);
  sub_10001FB4C();
  swift_release();
  static Animation.easeInOut(duration:)();
  sub_1000808B8(v64, v65);
  uint64_t v66 = sub_10001CA70();
  swift_release();
  uint64_t v148 = v66;
  uint64_t v67 = sub_10000A780(&qword_1001A83F8, &qword_1001A8210);
  uint64_t v68 = v104;
  View.animation<A>(_:value:)();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000ACE0(v52, &qword_1001A8210);
  uint64_t v69 = swift_getWitnessTable();
  uint64_t v158 = v67;
  uint64_t v159 = v69;
  uint64_t v105 = v69;
  uint64_t v70 = v119;
  uint64_t v106 = swift_getWitnessTable();
  sub_1001221F0(v68, v70);
  uint64_t v107 = *(void (**)(char *, uint64_t))(v117 + 8);
  uint64_t v108 = v117 + 8;
  v107(v68, v70);
  uint64_t v148 = (*(uint64_t (**)(uint64_t))(AssociatedConformanceWitness + 32))(v110);
  __int16 v149 = (uint64_t *)v71;
  sub_100010B2C();
  uint64_t v72 = Text.init<A>(_:)();
  uint64_t v74 = v73;
  char v76 = v75;
  sub_1000808B8(v121, v113);
  LOBYTE(v52) = sub_10001FB4C();
  swift_release();
  if (v52) {
    static Color.blue.getter();
  }
  else {
    static Color.primary.getter();
  }
  char v77 = v76 & 1;
  uint64_t v78 = Text.foregroundColor(_:)();
  uint64_t v80 = v79;
  char v82 = v81;
  uint64_t v84 = v83;
  swift_release();
  v82 &= 1u;
  sub_10000FCC4(v72, v74, v77);
  swift_bridgeObjectRelease();
  uint64_t v138 = v78;
  uint64_t v139 = (uint64_t *)v80;
  char v140 = v82;
  uint64_t v141 = v84;
  uint64_t v85 = v121;
  sub_1000808B8(v121, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10001FB4C();
  swift_release();
  static Animation.easeInOut(duration:)();
  sub_1000808B8(v85, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v86 = sub_10001CA70();
  swift_release();
  uint64_t v126 = v86;
  View.animation<A>(_:value:)();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000FCC4(v78, v80, v82);
  swift_bridgeObjectRelease();
  uint64_t v87 = v148;
  uint64_t v88 = (uint64_t)v149;
  LOBYTE(v80) = v150;
  uint64_t v126 = v148;
  uint64_t v127 = v149;
  char v128 = v150;
  uint64_t v129 = v151;
  uint64_t v130 = v152;
  uint64_t v131 = v153;
  type metadata accessor for ModifiedContent();
  uint64_t v136 = &protocol witness table for Text;
  uint64_t v137 = v105;
  uint64_t v122 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v89 = swift_getWitnessTable();
  View.padding(_:)();
  sub_10000FCC4(v87, v88, v80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v90 = v138;
  uint64_t v91 = (uint64_t)v139;
  char v92 = v140;
  uint64_t v126 = v138;
  uint64_t v127 = v139;
  char v128 = v140;
  uint64_t v129 = v141;
  uint64_t v130 = v142;
  uint64_t v131 = v143;
  char v132 = v144;
  long long v133 = v145;
  long long v134 = v146;
  char v135 = v147;
  uint64_t v93 = type metadata accessor for ModifiedContent();
  v125[2] = v89;
  v125[3] = &protocol witness table for _PaddingLayout;
  uint64_t v94 = swift_getWitnessTable();
  sub_1001221F0(&v126, v93);
  sub_10000FCC4(v90, v91, v92);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v95 = v118;
  uint64_t v96 = v111;
  uint64_t v97 = v119;
  (*(void (**)(char *, char *, uint64_t))(v117 + 16))(v111, v118, v119);
  uint64_t v138 = v148;
  uint64_t v139 = v149;
  char v140 = v150;
  uint64_t v141 = v151;
  uint64_t v142 = v152;
  uint64_t v143 = v153;
  char v144 = v154;
  long long v145 = v155;
  long long v146 = v156;
  char v147 = v157;
  uint64_t v126 = (uint64_t)v96;
  uint64_t v127 = &v138;
  sub_10000FCD4(v148, (uint64_t)v149, v150);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v125[0] = v97;
  v125[1] = v93;
  uint64_t v123 = v106;
  uint64_t v124 = v94;
  sub_1001231A4((uint64_t)&v126, 2uLL, (uint64_t)v125);
  sub_10000FCC4(v148, (uint64_t)v149, v150);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v98 = (uint64_t (*)(char *, uint64_t))v107;
  v107(v95, v97);
  sub_10000FCC4(v138, (uint64_t)v139, v140);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v98(v96, v97);
}

uint64_t sub_10008963C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DismissAction();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for FilterView();
  sub_1000808B8(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10001EF08();
  swift_release();
  sub_1000808B8(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v8 = *(void *)(a1 + *(int *)(v7 + 44));
  if (v8)
  {
    swift_retain();
    sub_10001F7FC(7, 21, 0, 3u, v8);
    swift_release();
    swift_release();
    sub_10002652C((uint64_t)v6);
    DismissAction.callAsFunction()();
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10008E768((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

double sub_10008981C@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for FilterView();
  sub_1000808B8(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v3 = sub_10001CF34();
  uint64_t v5 = v4;
  swift_release();
  *(void *)&long long v49 = v3;
  *((void *)&v49 + 1) = v5;
  sub_100010B2C();
  uint64_t v6 = Text.init<A>(_:)();
  uint64_t v8 = v7;
  char v10 = v9 & 1;
  static Font.Weight.semibold.getter();
  uint64_t v11 = Text.fontWeight(_:)();
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  sub_10000FCC4(v6, v8, v10);
  swift_bridgeObjectRelease();
  static Font.headline.getter();
  uint64_t v16 = Text.font(_:)();
  uint64_t v18 = v17;
  LOBYTE(v5) = v19;
  swift_release();
  LOBYTE(v6) = v5 & 1;
  sub_10000FCC4(v11, v13, v15);
  swift_bridgeObjectRelease();
  static Color.white.getter();
  uint64_t v20 = Text.foregroundColor(_:)();
  uint64_t v37 = v21;
  char v23 = v22;
  uint64_t v25 = v24;
  swift_release();
  sub_10000FCC4(v16, v18, v6);
  swift_bridgeObjectRelease();
  LOBYTE(v6) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v39 = v20;
  uint64_t v40 = v37;
  char v41 = v23 & 1;
  uint64_t v42 = v25;
  char v43 = v6;
  uint64_t v44 = v26;
  uint64_t v45 = v27;
  uint64_t v46 = v28;
  uint64_t v47 = v29;
  char v48 = 0;
  static Alignment.center.getter();
  sub_100123CD0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v38, 0.0, 1, 0.0, 1);
  sub_10000FCC4(v20, v37, v23 & 1);
  swift_bridgeObjectRelease();
  long long v57 = v38[10];
  long long v58 = v38[11];
  long long v53 = v38[4];
  long long v54 = v38[5];
  long long v55 = v38[6];
  long long v56 = v38[7];
  long long v49 = v38[0];
  long long v50 = v38[1];
  long long v51 = v38[2];
  long long v52 = v38[3];
  long long v30 = v38[9];
  a1[8] = v38[8];
  a1[9] = v30;
  long long v31 = v58;
  a1[10] = v57;
  a1[11] = v31;
  long long v32 = v54;
  a1[4] = v53;
  a1[5] = v32;
  long long v33 = v56;
  a1[6] = v55;
  a1[7] = v33;
  long long v34 = v50;
  *a1 = v49;
  a1[1] = v34;
  double result = *(double *)&v51;
  long long v36 = v52;
  a1[2] = v51;
  a1[3] = v36;
  return result;
}

uint64_t sub_100089AB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v29 = a4;
  uint64_t v28 = sub_10000570C(&qword_1001A8260);
  __chkstk_darwin(v28, v7);
  uint64_t v26 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000570C(&qword_1001A8268);
  uint64_t v9 = *(void *)(v27 - 8);
  __chkstk_darwin(v27, v10);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ToolbarItemPlacement();
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v25 = sub_10000570C(&qword_1001A56A0);
  uint64_t v15 = *(void *)(v25 - 8);
  __chkstk_darwin(v25, v16);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ToolbarItemPlacement.navigationBarLeading.getter();
  uint64_t v33 = a2;
  uint64_t v34 = a3;
  uint64_t v35 = a1;
  sub_10000570C(&qword_1001A56B0);
  sub_10000A780(&qword_1001A56B8, &qword_1001A56B0);
  ToolbarItem<>.init(placement:content:)();
  static ToolbarItemPlacement.navigationBarTrailing.getter();
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v32 = a1;
  sub_10000570C(&qword_1001A8270);
  sub_10008EACC();
  ToolbarItem<>.init(placement:content:)();
  uint64_t v19 = v25;
  uint64_t v20 = &v26[*(int *)(v28 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v26, v18, v25);
  uint64_t v21 = v20;
  uint64_t v22 = v27;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v21, v12, v27);
  TupleToolbarContent.init(_:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v19);
}

uint64_t sub_100089DF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v20 = a4;
  uint64_t v7 = type metadata accessor for FilterView();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)v18 - v11;
  uint64_t v13 = sub_1000808B8(v10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v14 = v13 + *(void *)(*(void *)v13 + 248);
  uint64_t v19 = *(void *)v14;
  v18[3] = *(unsigned __int8 *)(v14 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v12, a1, v7);
  unint64_t v15 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v16 + v15, v12, v7);
  return Button<>.init(_:action:)();
}

uint64_t sub_100089FAC()
{
  uint64_t v0 = type metadata accessor for DismissAction();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FilterView();
  sub_10002652C((uint64_t)v4);
  DismissAction.callAsFunction()();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_10008A0A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v34 = a4;
  uint64_t v5 = type metadata accessor for FilterView();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)v27 - v8;
  uint64_t v10 = sub_10000570C(&qword_1001A56B0);
  uint64_t v32 = *(void *)(v10 - 8);
  uint64_t v33 = v10;
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter;
  uint64_t v14 = sub_1000808B8(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v15 = v14 + *(void *)(*(void *)v14 + 240);
  uint64_t v28 = *(void *)v15;
  v27[1] = *(unsigned __int8 *)(v15 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
  unint64_t v16 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = v31;
  *(void *)(v17 + 16) = v30;
  *(void *)(v17 + 24) = v18;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v17 + v16, v9, v5);
  Button<>.init(_:action:)();
  sub_1000808B8(v5, v29);
  char v19 = sub_10001D234();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v21 = swift_allocObject();
  *(unsigned char *)(v21 + 16) = (v19 & 1) == 0;
  uint64_t v23 = v32;
  uint64_t v22 = v33;
  uint64_t v24 = v34;
  (*(void (**)(uint64_t, char *, uint64_t))(v32 + 16))(v34, v13, v33);
  uint64_t v25 = (uint64_t *)(v24 + *(int *)(sub_10000570C(&qword_1001A8270) + 36));
  *uint64_t v25 = KeyPath;
  v25[1] = (uint64_t)sub_10008EBD0;
  v25[2] = v21;
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v13, v22);
}

uint64_t sub_10008A3A8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  uint64_t v12 = type metadata accessor for FilterView();
  sub_1000808B8(v12, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  a4();
  swift_release();
  sub_1000808B8(v12, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v13 = *(void *)(a1 + *(int *)(v12 + 44));
  if (v13)
  {
    swift_retain();
    sub_10001F7FC(7, a5, a6, a7, v13);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10008E768((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

void sub_10008A4EC(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
}

uint64_t sub_10008A4F8()
{
  uint64_t v0 = type metadata accessor for FilterView();
  sub_1000808B8(v0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10001CCA8();

  return swift_release();
}

uint64_t sub_10008A584(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FilterView();
  sub_1000808B8(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  if (*(void *)(a1 + *(int *)(v2 + 44)))
  {
    uint64_t v3 = swift_retain();
    sub_10001FB04(v3);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10008E768((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10008A66C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FilterView();
  sub_1000808B8(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v3 = *(void *)(a1 + *(int *)(v2 + 44));
  if (v3)
  {
    swift_retain();
    sub_10001F7FC(7, 2, 0, 3u, v3);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10008E768((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10008A770()
{
  uint64_t v29 = type metadata accessor for Date();
  uint64_t v0 = *(void *)(v29 - 8);
  __chkstk_darwin(v29, v1);
  uint64_t v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for CompactDatePickerConfiguration();
  __chkstk_darwin(v28, v4);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TimeZone();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000570C(&qword_1001A5808);
  uint64_t v14 = __chkstk_darwin(v12 - 8, v13);
  unint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  char v19 = (char *)&v27 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))((char *)&v27 - v18, 1, 1, v7);
  id v20 = [objc_allocWithZone((Class)NSDateFormatter) init];
  [v20 setDateStyle:2];
  sub_10000A428((uint64_t)v19, (uint64_t)v16, &qword_1001A5808);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v16, 1, v7) == 1)
  {
    sub_10000ACE0((uint64_t)v16, &qword_1001A5808);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v16, v7);
    Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
    [v20 setTimeZone:isa];

    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
  sub_10000ACE0((uint64_t)v19, &qword_1001A5808);
  type metadata accessor for CompactDatePicker(0);
  sub_10000570C(&qword_1001A8440);
  Binding.wrappedValue.getter();
  uint64_t v22 = v29;
  (*(void (**)(char *, char *, uint64_t))(v0 + 16))(v3, &v6[*(int *)(v28 + 20)], v29);
  sub_10008ED20((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
  Class v23 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v0 + 8))(v3, v22);
  id v24 = [v20 stringFromDate:v23];

  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v25;
}

uint64_t sub_10008AB3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v3 = sub_10000570C(&qword_1001A8508);
  uint64_t v5 = __chkstk_darwin(v3 - 8, v4);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  uint64_t v10 = (char *)&v39 - v9;
  uint64_t v11 = sub_10000570C(&qword_1001A8510);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000570C(&qword_1001A8518);
  uint64_t v16 = v15 - 8;
  uint64_t v18 = __chkstk_darwin(v15, v17);
  id v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v21);
  Class v23 = (char *)&v39 - v22;
  *(void *)uint64_t v14 = static VerticalAlignment.center.getter();
  *((void *)v14 + 1) = 0;
  unsigned char v14[16] = 1;
  uint64_t v24 = sub_10000570C(&qword_1001A8520);
  sub_10008AE00(a1, (uint64_t)&v14[*(int *)(v24 + 44)]);
  char v25 = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  sub_10000A428((uint64_t)v14, (uint64_t)v20, &qword_1001A8510);
  uint64_t v34 = &v20[*(int *)(v16 + 44)];
  *uint64_t v34 = v25;
  *((void *)v34 + 1) = v27;
  *((void *)v34 + 2) = v29;
  *((void *)v34 + 3) = v31;
  *((void *)v34 + 4) = v33;
  v34[40] = 0;
  sub_10000ACE0((uint64_t)v14, &qword_1001A8510);
  sub_10000A3C4((uint64_t)v20, (uint64_t)v23, &qword_1001A8518);
  *(void *)uint64_t v10 = static HorizontalAlignment.center.getter();
  *((void *)v10 + 1) = 0;
  unsigned char v10[16] = 0;
  uint64_t v35 = sub_10000570C(&qword_1001A8528);
  sub_10008BEC0(a1, &v10[*(int *)(v35 + 44)]);
  sub_10000A428((uint64_t)v23, (uint64_t)v20, &qword_1001A8518);
  sub_10000A428((uint64_t)v10, (uint64_t)v7, &qword_1001A8508);
  uint64_t v36 = v40;
  sub_10000A428((uint64_t)v20, v40, &qword_1001A8518);
  uint64_t v37 = sub_10000570C(&qword_1001A8530);
  sub_10000A428((uint64_t)v7, v36 + *(int *)(v37 + 48), &qword_1001A8508);
  sub_10000ACE0((uint64_t)v10, &qword_1001A8508);
  sub_10000ACE0((uint64_t)v23, &qword_1001A8518);
  sub_10000ACE0((uint64_t)v7, &qword_1001A8508);
  return sub_10000ACE0((uint64_t)v20, &qword_1001A8518);
}

uint64_t sub_10008AE00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v70 = a1;
  uint64_t v89 = a2;
  uint64_t v86 = type metadata accessor for DatePickerButtonStyle(0);
  __chkstk_darwin(v86, v3);
  uint64_t v83 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CompactDatePicker(0);
  uint64_t v79 = *(void *)(v5 - 8);
  uint64_t v78 = *(void *)(v79 + 64);
  uint64_t v6 = v5 - 8;
  uint64_t v76 = v5 - 8;
  __chkstk_darwin(v5 - 8, v7);
  uint64_t v77 = (uint64_t)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = sub_10000570C(&qword_1001A85E8);
  uint64_t v88 = *(void *)(v85 - 8);
  __chkstk_darwin(v85, v9);
  uint64_t v80 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_10000570C(&qword_1001A85F0);
  uint64_t v84 = *(void *)(v87 - 8);
  uint64_t v12 = __chkstk_darwin(v87, v11);
  char v81 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  char v82 = (char *)&v68 - v15;
  uint64_t v73 = type metadata accessor for AccessibilityTraits();
  uint64_t v72 = *(void *)(v73 - 8);
  __chkstk_darwin(v73, v16);
  uint64_t v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for CompactDatePickerConfiguration();
  __chkstk_darwin(v19 - 8, v20);
  uint64_t v22 = (uint64_t *)((char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v71 = sub_10000570C(&qword_1001A6868);
  uint64_t v24 = __chkstk_darwin(v71, v23);
  uint64_t v26 = (char *)&v68 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v24, v27);
  uint64_t v68 = (char *)&v68 - v29;
  __chkstk_darwin(v28, v30);
  uint64_t v69 = (uint64_t)&v68 - v31;
  uint64_t v75 = a1 + *(int *)(v6 + 32);
  uint64_t v74 = sub_10000570C(&qword_1001A8440);
  Binding.wrappedValue.getter();
  uint64_t v32 = *v22;
  uint64_t v33 = v22[1];
  swift_bridgeObjectRetain();
  sub_10008ED20((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
  uint64_t v91 = v32;
  uint64_t v92 = v33;
  sub_100010B2C();
  uint64_t v34 = Text.init<A>(_:)();
  uint64_t v36 = v35;
  char v38 = v37 & 1;
  static Font.Weight.regular.getter();
  uint64_t v39 = Text.fontWeight(_:)();
  uint64_t v41 = v40;
  char v43 = v42;
  uint64_t v45 = v44;
  sub_10000FCC4(v34, v36, v38);
  swift_bridgeObjectRelease();
  uint64_t v91 = v39;
  uint64_t v92 = v41;
  char v93 = v43 & 1;
  uint64_t v94 = v45;
  static AccessibilityTraits.isHeader.getter();
  View.accessibilityAddTraits(_:)();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v18, v73);
  sub_10000FCC4(v91, v92, v93);
  swift_bridgeObjectRelease();
  uint64_t v46 = (uint64_t)v68;
  ModifiedContent<>.accessibilityHeading(_:)();
  sub_10000ACE0((uint64_t)v26, &qword_1001A6868);
  uint64_t v47 = v69;
  sub_10000A3C4(v46, v69, &qword_1001A6868);
  uint64_t v48 = v70;
  uint64_t v49 = v77;
  sub_10008FDD4(v70, v77, type metadata accessor for CompactDatePicker);
  unint64_t v50 = (*(unsigned __int8 *)(v79 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
  uint64_t v51 = swift_allocObject();
  sub_100091B18(v49, v51 + v50);
  uint64_t v90 = v48;
  sub_100042644();
  long long v52 = v80;
  Button.init(action:label:)();
  LOBYTE(v45) = *(unsigned char *)(v48 + *(int *)(v76 + 48));
  uint64_t v53 = v86;
  long long v54 = v83;
  Binding.wrappedValue.getter();
  *long long v54 = v45;
  *(void *)&v54[*(int *)(v53 + 24)] = 0x3FD3333333333333;
  sub_10000A780(&qword_1001A85F8, &qword_1001A85E8);
  sub_10008E768(&qword_1001A8600, (void (*)(uint64_t))type metadata accessor for DatePickerButtonStyle);
  long long v55 = v81;
  uint64_t v56 = v85;
  View.buttonStyle<A>(_:)();
  sub_10008ED20((uint64_t)v54, type metadata accessor for DatePickerButtonStyle);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v52, v56);
  uint64_t v57 = v84;
  long long v58 = v82;
  uint64_t v59 = v87;
  (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v82, v55, v87);
  sub_10000A428(v47, v46, &qword_1001A6868);
  uint64_t v60 = v57;
  uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
  uint64_t v62 = v55;
  v61(v55, v58, v59);
  uint64_t v63 = v89;
  sub_10000A428(v46, v89, &qword_1001A6868);
  uint64_t v64 = sub_10000570C(&qword_1001A8608);
  uint64_t v65 = v63 + *(int *)(v64 + 48);
  *(void *)uint64_t v65 = 0;
  *(unsigned char *)(v65 + 8) = 1;
  v61((char *)(v63 + *(int *)(v64 + 64)), v62, v59);
  uint64_t v66 = *(void (**)(char *, uint64_t))(v60 + 8);
  v66(v58, v59);
  sub_10000ACE0(v47, &qword_1001A6868);
  v66(v62, v59);
  return sub_10000ACE0(v46, &qword_1001A6868);
}

uint64_t sub_10008B5F8()
{
  return swift_release();
}

uint64_t sub_10008B674(uint64_t a1)
{
  uint64_t v2 = sub_10000570C(&qword_1001A8440);
  __chkstk_darwin(v2, v3);
  uint64_t v44 = (char *)v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v7 = __chkstk_darwin(v5, v6);
  uint64_t v9 = (void *)((char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __chkstk_darwin(v7, v10);
  uint64_t v13 = (void *)((char *)v42 - v12);
  uint64_t v15 = __chkstk_darwin(v11, v14);
  char v43 = (char *)v42 - v16;
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v20 = (void *)((char *)v42 - v19);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (void *)((char *)v42 - v22);
  uint64_t v45 = a1 + *(int *)(type metadata accessor for CompactDatePicker(0) + 24);
  Binding.wrappedValue.getter();
  Binding.wrappedValue.getter();
  BOOL v24 = *v23 == *v20 && v23[1] == v20[1];
  if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)()) && (static Date.== infix(_:_:)())
  {
    uint64_t v25 = v5;
    uint64_t v26 = *(int *)(v5 + 24);
    int v52 = *((unsigned __int8 *)v23 + v26);
    v42[1] = a1;
    int v27 = *((unsigned __int8 *)v20 + v26);
    uint64_t v28 = (uint64_t)v20;
    uint64_t v29 = v25;
    sub_10008ED20(v28, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
    sub_10008ED20((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
    uint64_t v30 = (uint64_t)v44;
    if (v52 == v27)
    {
      uint64_t v31 = v43;
      Binding.wrappedValue.getter();
      v31[*(int *)(v29 + 24)] = 0;
      Binding.wrappedValue.setter();
    }
  }
  else
  {
    sub_10008ED20((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
    sub_10008ED20((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
    uint64_t v30 = (uint64_t)v44;
    uint64_t v29 = v5;
  }
  Binding.wrappedValue.getter();
  Binding.wrappedValue.getter();
  BOOL v32 = *v13 == *v9 && v13[1] == v9[1];
  if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)()) && (static Date.== infix(_:_:)())
  {
    uint64_t v33 = *(int *)(v29 + 24);
    int v34 = *((unsigned __int8 *)v13 + v33);
    uint64_t v35 = v29;
    int v36 = *((unsigned __int8 *)v9 + v33);
    sub_10008ED20((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
    sub_10008ED20((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
    if (v34 == v36)
    {
      char v37 = v43;
      Binding.wrappedValue.getter();
      v37[*(int *)(v35 + 24)] = 0;
      Binding.wrappedValue.setter();
    }
  }
  else
  {
    sub_10008ED20((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
    sub_10008ED20((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
  }
  sub_10000A428(v45, v30, &qword_1001A8440);
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  sub_10000ACE0(v30, &qword_1001A8440);
  uint64_t v38 = v49;
  uint64_t v39 = v50;
  char v40 = v51;
  uint64_t v46 = v49;
  uint64_t v47 = v50;
  char v48 = v51;
  sub_10000570C(&qword_1001A8B70);
  Binding.wrappedValue.getter();
  uint64_t v46 = v38;
  uint64_t v47 = v39;
  char v48 = v40;
  BOOL v53 = (v54 & 1) == 0;
  Binding.wrappedValue.setter();
  swift_release();
  return swift_release();
}

uint64_t sub_10008BAB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v1 = type metadata accessor for CompactDatePickerConfiguration();
  __chkstk_darwin(v1, v2);
  uint64_t v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AccessibilityTraits();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000570C(&qword_1001A6868);
  uint64_t v11 = __chkstk_darwin(v26, v10);
  uint64_t v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  uint64_t v25 = (char *)v24 - v15;
  uint64_t v29 = sub_10008A770();
  uint64_t v30 = v16;
  sub_100010B2C();
  uint64_t v29 = Text.init<A>(_:)();
  uint64_t v30 = v17;
  char v31 = v18 & 1;
  uint64_t v32 = v19;
  type metadata accessor for CompactDatePicker(0);
  sub_10000570C(&qword_1001A8440);
  Binding.wrappedValue.getter();
  v24[1] = v1;
  int v20 = v4[*(int *)(v1 + 24)];
  sub_10008ED20((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
  if (v20 == 1)
  {
    sub_10000570C(&qword_1001A83B0);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_100153180;
    static AccessibilityTraits.isSelected.getter();
    uint64_t v28 = (void *)v21;
  }
  else
  {
    uint64_t v28 = &_swiftEmptyArrayStorage;
  }
  sub_10008E768(&qword_1001A83B8, (void (*)(uint64_t))&type metadata accessor for AccessibilityTraits);
  sub_10000570C(&qword_1001A83C0);
  sub_10000A780(&qword_1001A83C8, &qword_1001A83C0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  View.accessibilityAddTraits(_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  sub_10000FCC4(v29, v30, v31);
  swift_bridgeObjectRelease();
  Binding.wrappedValue.getter();
  sub_10008ED20((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v22 = (uint64_t)v25;
  ModifiedContent<>.accessibilityHint(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000ACE0((uint64_t)v13, &qword_1001A6868);
  return sub_10000A3C4(v22, v27, &qword_1001A6868);
}

uint64_t sub_10008BEC0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  char v154 = a2;
  uint64_t v3 = type metadata accessor for CompactDatePicker(0);
  uint64_t v151 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v152 = v5;
  uint64_t v153 = (uint64_t)&v114 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = type metadata accessor for CoordinateSpace();
  uint64_t v148 = *(void *)(v150 - 8);
  __chkstk_darwin(v150, v6);
  char v147 = (char *)&v114 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for GraphicalDatePickerStyle();
  uint64_t v145 = *(void *)(v8 - 8);
  uint64_t v146 = v8;
  __chkstk_darwin(v8, v9);
  uint64_t v143 = (char *)&v114 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DatePickerComponents();
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v127 = (char *)&v114 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000570C(&qword_1001A5CD0);
  __chkstk_darwin(v14 - 8, v15);
  uint64_t v124 = (uint64_t)&v114 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000570C(&qword_1001A8538);
  __chkstk_darwin(v17 - 8, v18);
  uint64_t v119 = (char *)&v114 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000570C(&qword_1001A8440);
  __chkstk_darwin(v20, v21);
  uint64_t v118 = (char *)&v114 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = sub_10000570C(&qword_1001A8540);
  uint64_t v122 = *(void *)(v123 - 8);
  __chkstk_darwin(v123, v23);
  uint64_t v120 = (char *)&v114 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = sub_10000570C(&qword_1001A8548);
  __chkstk_darwin(v125, v25);
  uint64_t v126 = (char *)&v114 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v133 = sub_10000570C(&qword_1001A8550);
  uint64_t v132 = *(void *)(v133 - 8);
  __chkstk_darwin(v133, v27);
  char v128 = (char *)&v114 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = sub_10000570C(&qword_1001A8558);
  __chkstk_darwin(v121, v29);
  uint64_t v136 = (char *)&v114 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = sub_10000570C(&qword_1001A8560);
  __chkstk_darwin(v130, v31);
  uint64_t v135 = (uint64_t)&v114 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = sub_10000570C(&qword_1001A8568);
  __chkstk_darwin(v129, v33);
  uint64_t v138 = (uint64_t)&v114 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = sub_10000570C(&qword_1001A8570);
  __chkstk_darwin(v134, v35);
  uint64_t v141 = (uint64_t)&v114 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_10000570C(&qword_1001A8578);
  __chkstk_darwin(v37 - 8, v38);
  uint64_t v140 = (uint64_t)&v114 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = sub_10000570C(&qword_1001A8580);
  uint64_t v41 = __chkstk_darwin(v139, v40);
  uint64_t v144 = (uint64_t)&v114 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = __chkstk_darwin(v41, v43);
  uint64_t v137 = (uint64_t)&v114 - v45;
  __chkstk_darwin(v44, v46);
  uint64_t v142 = (uint64_t)&v114 - v47;
  uint64_t v48 = type metadata accessor for CompactDatePickerConfiguration();
  __chkstk_darwin(v48, v49);
  char v51 = (char *)&v114 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = type metadata accessor for Divider();
  uint64_t v115 = *(void *)(v117 - 8);
  __chkstk_darwin(v117, v52);
  char v54 = (char *)&v114 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_10000570C(&qword_1001A8588);
  uint64_t v158 = *(void *)(v55 - 8);
  uint64_t v159 = v55;
  uint64_t v57 = __chkstk_darwin(v55, v56);
  uint64_t v131 = (char *)&v114 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = __chkstk_darwin(v57, v59);
  uint64_t v62 = (char *)&v114 - v61;
  __chkstk_darwin(v60, v63);
  char v157 = (char *)&v114 - v64;
  Divider.init()();
  uint64_t v160 = v3;
  uint64_t v65 = a1 + *(int *)(v3 + 24);
  uint64_t v149 = v20;
  uint64_t v155 = v65;
  Binding.wrappedValue.getter();
  uint64_t v156 = v48;
  LOBYTE(v65) = v51[*(int *)(v48 + 24)];
  sub_10008ED20((uint64_t)v51, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
  uint64_t v66 = static Animation.linear(duration:)();
  if ((v65 & 1) == 0)
  {
    Animation.delay(_:)();
    uint64_t v66 = swift_release();
  }
  __chkstk_darwin(v66, v67);
  sub_10000570C(&qword_1001A8590);
  sub_10008E768(&qword_1001A8320, (void (*)(uint64_t))&type metadata accessor for Divider);
  uint64_t v116 = a1;
  sub_100092924(&qword_1001A8598, &qword_1001A8590, (void (*)(void))sub_1000919A4);
  uint64_t v68 = v117;
  View.animation<A>(_:body:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v115 + 8))(v54, v68);
  (*(void (**)(char *, char *, uint64_t))(v158 + 32))(v157, v62, v159);
  uint64_t v69 = (uint64_t)v118;
  Binding.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  sub_10000ACE0(v69, &qword_1001A8440);
  sub_10000A428(a1 + *(int *)(v160 + 32), v124, &qword_1001A5CD0);
  static DatePickerComponents.date.getter();
  uint64_t v70 = v120;
  DatePicker.init(selection:in:displayedComponents:label:)();
  Binding.wrappedValue.getter();
  sub_10008ED20((uint64_t)v51, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
  sub_10000A780(&qword_1001A85C0, &qword_1001A8540);
  uint64_t v71 = (uint64_t)v126;
  uint64_t v72 = v123;
  View.accessibilityHidden(_:isEnabled:)();
  (*(void (**)(char *, uint64_t))(v122 + 8))(v70, v72);
  uint64_t v73 = v143;
  GraphicalDatePickerStyle.init()();
  sub_100091A44();
  sub_10008E768(&qword_1001A85D0, (void (*)(uint64_t))&type metadata accessor for GraphicalDatePickerStyle);
  uint64_t v74 = v128;
  uint64_t v75 = v146;
  View.datePickerStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v145 + 8))(v73, v75);
  sub_10000ACE0(v71, &qword_1001A8548);
  uint64_t v77 = v147;
  uint64_t v76 = v148;
  uint64_t v78 = v150;
  (*(void (**)(char *, void, uint64_t))(v148 + 104))(v147, enum case for CoordinateSpace.local(_:), v150);
  uint64_t v79 = (uint64_t)v136;
  uint64_t v80 = &v136[*(int *)(v121 + 36)];
  uint64_t v81 = sub_10000570C(&qword_1001A85D8);
  (*(void (**)(char *, char *, uint64_t))(v76 + 16))(&v80[*(int *)(v81 + 36)], v77, v78);
  *(void *)uint64_t v80 = &type metadata for FilterViewStartDatePickerHeightPreferenceKey;
  char v82 = (void (**)(CGFloat *@<X8>, double@<D0>))&v80[*(int *)(v81 + 40)];
  *char v82 = sub_10008D1C4;
  v82[1] = 0;
  uint64_t v83 = v132;
  uint64_t v84 = v133;
  (*(void (**)(uint64_t, char *, uint64_t))(v132 + 16))(v79, v74, v133);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v77, v78);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v74, v84);
  uint64_t v85 = v116;
  uint64_t v86 = v153;
  sub_10008FDD4(v116, v153, type metadata accessor for CompactDatePicker);
  unint64_t v87 = (*(unsigned __int8 *)(v151 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v151 + 80);
  uint64_t v88 = swift_allocObject();
  sub_100091B18(v86, v88 + v87);
  uint64_t v89 = v135;
  sub_10000A428(v79, v135, &qword_1001A8558);
  uint64_t v90 = (uint64_t (**)())(v89 + *(int *)(v130 + 36));
  *uint64_t v90 = sub_100091B7C;
  v90[1] = (uint64_t (*)())v88;
  sub_10000ACE0(v79, &qword_1001A8558);
  uint64_t v91 = *(void *)(v85 + *(int *)(v160 + 36));
  uint64_t v92 = v138;
  sub_10000A428(v89, v138, &qword_1001A8560);
  char v93 = (void *)(v92 + *(int *)(v129 + 36));
  void *v93 = 0;
  v93[1] = v91;
  sub_10000ACE0(v89, &qword_1001A8560);
  Binding.wrappedValue.getter();
  uint64_t v94 = v156;
  LODWORD(v88) = v51[*(int *)(v156 + 24)];
  sub_10008ED20((uint64_t)v51, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
  if (v88) {
    double v95 = 1.0;
  }
  else {
    double v95 = 0.5;
  }
  uint64_t v96 = v141;
  sub_10000A428(v92, v141, &qword_1001A8568);
  *(double *)(v96 + *(int *)(v134 + 36)) = v95;
  sub_10000ACE0(v92, &qword_1001A8568);
  Binding.wrappedValue.getter();
  int v97 = v51[*(int *)(v94 + 24)];
  sub_10008ED20((uint64_t)v51, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
  if (v97) {
    double v98 = INFINITY;
  }
  else {
    double v98 = 0.0;
  }
  uint64_t v99 = static Alignment.center.getter();
  uint64_t v100 = v140;
  sub_100123E90(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v140, 0.0, 1, v98, 0, v99, v101);
  sub_10000ACE0(v96, &qword_1001A8570);
  uint64_t v102 = v137;
  sub_10000A428(v100, v137, &qword_1001A8578);
  *(_WORD *)(v102 + *(int *)(v139 + 36)) = 0;
  sub_10000ACE0(v100, &qword_1001A8578);
  uint64_t v103 = v142;
  sub_10000A3C4(v102, v142, &qword_1001A8580);
  uint64_t v105 = v157;
  uint64_t v104 = v158;
  uint64_t v106 = *(void (**)(char *, char *, uint64_t))(v158 + 16);
  uint64_t v107 = v131;
  uint64_t v108 = v159;
  v106(v131, v157, v159);
  uint64_t v109 = v144;
  sub_10000A428(v103, v144, &qword_1001A8580);
  uint64_t v110 = v154;
  v106(v154, v107, v108);
  uint64_t v111 = sub_10000570C(&qword_1001A85E0);
  sub_10000A428(v109, (uint64_t)&v110[*(int *)(v111 + 48)], &qword_1001A8580);
  sub_10000ACE0(v103, &qword_1001A8580);
  uint64_t v112 = *(void (**)(char *, uint64_t))(v104 + 8);
  v112(v105, v108);
  sub_10000ACE0(v109, &qword_1001A8580);
  return ((uint64_t (*)(char *, uint64_t))v112)(v107, v108);
}

uint64_t sub_10008CF48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v3 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v4 = v3 - 8;
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000570C(&qword_1001A85A8);
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000570C(&qword_1001A8590);
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CompactDatePicker(0);
  sub_10000570C(&qword_1001A8440);
  Binding.wrappedValue.getter();
  int v17 = v7[*(int *)(v4 + 32)];
  sub_10008ED20((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
  if (v17) {
    double v18 = 1.0;
  }
  else {
    double v18 = 0.0;
  }
  uint64_t v19 = sub_10000570C(&qword_1001A85B8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v12, a1, v19);
  *(double *)&v12[*(int *)(v9 + 44)] = v18;
  Binding.wrappedValue.getter();
  int v20 = v7[*(int *)(v4 + 32)];
  sub_10008ED20((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
  if (v20) {
    double v21 = INFINITY;
  }
  else {
    double v21 = 0.0;
  }
  uint64_t v22 = static Alignment.center.getter();
  sub_100123EEC(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v16, 0.0, 1, v21, 0, v22, v23);
  sub_10000ACE0((uint64_t)v12, &qword_1001A85A8);
  return sub_10000A3C4((uint64_t)v16, v26, &qword_1001A8590);
}

void sub_10008D1C4(CGFloat *a1@<X8>, double a2@<D0>)
{
  *a1 = CGRectGetHeight(*(CGRect *)&a2);
}

uint64_t sub_10008D1EC()
{
  return Binding.wrappedValue.setter();
}

uint64_t sub_10008D260@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = static HorizontalAlignment.leading.getter();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v3 = sub_10000570C(&qword_1001A8500);
  return sub_10008AB3C(v1, a1 + *(int *)(v3 + 44));
}

uint64_t sub_10008D2A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v87 = a1;
  uint64_t v84 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v84, v2);
  uint64_t v85 = (char *)&v74 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ButtonStyleConfiguration.Label();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = sub_10000570C(&qword_1001A86C0);
  __chkstk_darwin(v74, v9);
  uint64_t v11 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_10000570C(&qword_1001A86C8);
  __chkstk_darwin(v75, v12);
  uint64_t v14 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_10000570C(&qword_1001A86D0);
  __chkstk_darwin(v76, v15);
  int v17 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_10000570C(&qword_1001A86D8);
  __chkstk_darwin(v77, v18);
  int v20 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_10000570C(&qword_1001A86E0);
  __chkstk_darwin(v79, v21);
  uint64_t v78 = (uint64_t)&v74 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = sub_10000570C(&qword_1001A86E8);
  __chkstk_darwin(v80, v23);
  uint64_t v83 = (char *)&v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = sub_10000570C(&qword_1001A86F0);
  __chkstk_darwin(v82, v25);
  uint64_t v81 = (uint64_t)&v74 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  ButtonStyleConfiguration.label.getter();
  uint64_t v86 = v1;
  if (*v1 == 1) {
    uint64_t v27 = static Color.blue.getter();
  }
  else {
    uint64_t v27 = static Color.primary.getter();
  }
  uint64_t v28 = v27;
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v11, v8, v4);
  uint64_t v30 = (uint64_t *)&v11[*(int *)(v74 + 36)];
  *uint64_t v30 = KeyPath;
  v30[1] = v28;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if (ButtonStyleConfiguration.isPressed.getter()) {
    double v31 = 0.3;
  }
  else {
    double v31 = 1.0;
  }
  sub_10000A428((uint64_t)v11, (uint64_t)v14, &qword_1001A86C0);
  *(double *)&v14[*(int *)(v75 + 36)] = v31;
  sub_10000ACE0((uint64_t)v11, &qword_1001A86C0);
  char v32 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  sub_10000A428((uint64_t)v14, (uint64_t)v17, &qword_1001A86C8);
  uint64_t v41 = &v17[*(int *)(v76 + 36)];
  *uint64_t v41 = v32;
  *((void *)v41 + 1) = v34;
  *((void *)v41 + 2) = v36;
  *((void *)v41 + 3) = v38;
  *((void *)v41 + 4) = v40;
  v41[40] = 0;
  sub_10000ACE0((uint64_t)v14, &qword_1001A86C8);
  char v42 = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  sub_10000A428((uint64_t)v17, (uint64_t)v20, &qword_1001A86D0);
  char v51 = &v20[*(int *)(v77 + 36)];
  *char v51 = v42;
  *((void *)v51 + 1) = v44;
  *((void *)v51 + 2) = v46;
  *((void *)v51 + 3) = v48;
  *((void *)v51 + 4) = v50;
  v51[40] = 0;
  sub_10000ACE0((uint64_t)v17, &qword_1001A86D0);
  if (qword_1001A4E58 != -1) {
    swift_once();
  }
  uint64_t v52 = qword_1001B74F8;
  swift_retain();
  char v53 = static Edge.Set.all.getter();
  uint64_t v54 = v78;
  sub_10000A428((uint64_t)v20, v78, &qword_1001A86D8);
  uint64_t v55 = v54 + *(int *)(v79 + 36);
  *(void *)uint64_t v55 = v52;
  *(unsigned char *)(v55 + 8) = v53;
  sub_10000ACE0((uint64_t)v20, &qword_1001A86D8);
  uint64_t v56 = v85;
  uint64_t v57 = &v85[*(int *)(v84 + 20)];
  uint64_t v58 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v59 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v59 - 8) + 104))(v57, v58, v59);
  __asm { FMOV            V0.2D, #7.0 }
  *uint64_t v56 = _Q0;
  uint64_t v65 = (uint64_t)v83;
  uint64_t v66 = (uint64_t)&v83[*(int *)(v80 + 36)];
  sub_10008FDD4((uint64_t)v56, v66, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v66 + *(int *)(sub_10000570C(&qword_1001A62A8) + 36)) = 256;
  sub_10000A428(v54, v65, &qword_1001A86E0);
  sub_10008ED20((uint64_t)v56, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_10000ACE0(v54, &qword_1001A86E0);
  uint64_t v67 = type metadata accessor for DatePickerButtonStyle(0);
  uint64_t v68 = v86;
  uint64_t v69 = static Animation.easeInOut(duration:)();
  uint64_t v70 = &v68[*(int *)(v67 + 20)];
  LOBYTE(v68) = v70[*(int *)(type metadata accessor for CompactDatePickerConfiguration() + 24)];
  uint64_t v71 = v81;
  sub_10000A428(v65, v81, &qword_1001A86E8);
  uint64_t v72 = v71 + *(int *)(v82 + 36);
  *(void *)uint64_t v72 = v69;
  *(unsigned char *)(v72 + 8) = (_BYTE)v68;
  sub_10000ACE0(v65, &qword_1001A86E8);
  return sub_10000A3C4(v71, v87, &qword_1001A86F0);
}

void sub_10008D98C()
{
  sub_100091088(319, (unint64_t *)&qword_1001A6628, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v0 <= 0x3F)
  {
    sub_100091088(319, (unint64_t *)&qword_1001A5670, (uint64_t (*)(uint64_t))&type metadata accessor for DismissAction, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_10008DAC8(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *(void *)a1 = *a2;
    a1 = v14 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    char v9 = *((unsigned char *)a2 + 16);
    sub_1000126FC();
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    uint64_t v10 = a3[9];
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (uint64_t *)((char *)a2 + v10);
    sub_10000570C(&qword_1001A5468);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *uint64_t v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = a3[10];
    uint64_t v16 = (void *)(a1 + v15);
    int v17 = (uint64_t *)((char *)a2 + v15);
    sub_10000570C(&qword_1001A5460);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v18 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    }
    else
    {
      *uint64_t v16 = *v17;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v19 = a3[11];
    int v20 = (void *)(a1 + v19);
    uint64_t v21 = (uint64_t *)((char *)a2 + v19);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    *int v20 = v22;
    v20[1] = v23;
  }
  swift_retain();
  return a1;
}

uint64_t sub_10008DCA8(uint64_t a1, uint64_t a2)
{
  sub_10001274C();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + *(int *)(a2 + 40);
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }

  return swift_release();
}

uint64_t sub_10008DDD4(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_1000126FC();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  uint64_t v9 = a3[9];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (uint64_t *)((char *)a2 + v9);
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  else
  {
    void *v10 = *v11;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = a3[10];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)((char *)a2 + v13);
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = type metadata accessor for DismissAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  else
  {
    *uint64_t v14 = *v15;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v17 = a3[11];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (uint64_t *)((char *)a2 + v17);
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  *uint64_t v18 = v20;
  v18[1] = v21;
  swift_retain();
  return a1;
}

uint64_t sub_10008DF68(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_1000126FC();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  sub_10001274C();
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v9 = a3[9];
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    sub_10000ACE0(a1 + v9, &qword_1001A5468);
    sub_10000570C(&qword_1001A5468);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      void *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = a3[10];
    uint64_t v14 = (void *)(a1 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    sub_10000ACE0(a1 + v13, &qword_1001A5460);
    sub_10000570C(&qword_1001A5460);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    }
    else
    {
      *uint64_t v14 = *v15;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v17 = a3[11];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = (uint64_t)a2 + v17;
  *(void *)(a1 + v17) = *(uint64_t *)((char *)a2 + v17);
  swift_retain();
  swift_release();
  *(void *)(v18 + 8) = *(void *)(v19 + 8);
  return a1;
}

uint64_t sub_10008E144(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = a3[9];
  uint64_t v7 = (void *)(a1 + v6);
  char v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v11 = a3[10];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = type metadata accessor for DismissAction();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v12, v13, v15);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_10008E2DC(uint64_t a1, uint64_t a2, int *a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  sub_10001274C();
  if (a1 != a2)
  {
    uint64_t v7 = a3[9];
    char v8 = (void *)(a1 + v7);
    uint64_t v9 = (const void *)(a2 + v7);
    sub_10000ACE0(a1 + v7, &qword_1001A5468);
    uint64_t v10 = sub_10000570C(&qword_1001A5468);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
    uint64_t v12 = a3[10];
    uint64_t v13 = (void *)(a1 + v12);
    uint64_t v14 = (const void *)(a2 + v12);
    sub_10000ACE0(a1 + v12, &qword_1001A5460);
    uint64_t v15 = sub_10000570C(&qword_1001A5460);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = type metadata accessor for DismissAction();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v16 - 8) + 32))(v13, v14, v16);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
  }
  uint64_t v17 = a3[11];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = (void *)(a2 + v17);
  *(void *)(a1 + v17) = *v19;
  swift_release();
  *(void *)(v18 + 8) = v19[1];
  return a1;
}

uint64_t sub_10008E4C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008E4D8);
}

uint64_t sub_10008E4D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_10000570C(&qword_1001A65B8);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[9];
LABEL_5:
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v11(a1 + v9, a2, v7);
  }
  uint64_t v10 = sub_10000570C(&qword_1001A55E0);
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[10];
    goto LABEL_5;
  }
  unint64_t v13 = *(void *)(a1 + a3[11]);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  int v14 = v13 - 1;
  if (v14 < 0) {
    int v14 = -1;
  }
  return (v14 + 1);
}

uint64_t sub_10008E5FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008E610);
}

uint64_t sub_10008E610(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_10000570C(&qword_1001A65B8);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[9];
  }
  else
  {
    uint64_t result = sub_10000570C(&qword_1001A55E0);
    if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
    {
      *(void *)(a1 + a4[11]) = a2;
      return result;
    }
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[10];
  }
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);

  return v13(a1 + v11, a2, a2, v9);
}

uint64_t sub_10008E724()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10008E768(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10008E7B0@<X0>(uint64_t a1@<X8>)
{
  return sub_100081340(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10008E7BC@<X0>(uint64_t a1@<X8>)
{
  return sub_100082960(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10008E7CC()
{
  return sub_10008E7F8((void (*)(void))sub_10001E4B0, 1702125924, 0xE400000000000000, 2u);
}

uint64_t sub_10008E7F8(void (*a1)(void), uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v9 = *(void *)(v4 + 16);
  uint64_t v10 = *(void *)(v4 + 24);
  uint64_t v11 = *(void *)(type metadata accessor for FilterView() - 8);
  return sub_10008A3A8(v4 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)), v9, v10, a1, a2, a3, a4);
}

uint64_t sub_10008E8A0@<X0>(uint64_t a1@<X8>)
{
  return sub_100089AB0(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_10008E8AC()
{
  unint64_t result = qword_1001A8250;
  if (!qword_1001A8250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8250);
  }
  return result;
}

uint64_t sub_10008E904()
{
  type metadata accessor for FilterView();

  return sub_10008A4F8();
}

unint64_t sub_10008E990()
{
  unint64_t result = qword_1001A8258;
  if (!qword_1001A8258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8258);
  }
  return result;
}

uint64_t sub_10008E9E8()
{
  return sub_10008EA00((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10008A584);
}

uint64_t sub_10008EA00(uint64_t (*a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(type metadata accessor for FilterView() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a1(v5, v2, v3);
}

uint64_t sub_10008EA9C()
{
  return sub_10008EA00((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10008A66C);
}

uint64_t sub_10008EAB4@<X0>(uint64_t a1@<X8>)
{
  return sub_100089DF0(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10008EAC0@<X0>(uint64_t a1@<X8>)
{
  return sub_10008A0A0(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_10008EACC()
{
  unint64_t result = qword_1001A8278;
  if (!qword_1001A8278)
  {
    sub_100004A58(&qword_1001A8270);
    sub_10000A780(&qword_1001A56B8, &qword_1001A56B0);
    sub_10000A780(&qword_1001A8280, &qword_1001A8288);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8278);
  }
  return result;
}

uint64_t sub_10008EB94()
{
  return sub_10008E7F8((void (*)(void))sub_10001F368, 18, 0, 3u);
}

uint64_t sub_10008EBC0()
{
  return swift_deallocObject();
}

unsigned char *sub_10008EBD0(unsigned char *a1)
{
  return sub_10010EED8(a1, *(unsigned char *)(v1 + 16));
}

uint64_t sub_10008EBDC()
{
  return sub_10008EA00((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100089FAC);
}

uint64_t sub_10008EBF4@<X0>(uint64_t a1@<X8>)
{
  return sub_100084454(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_10008EC00()
{
  unint64_t result = qword_1001A82C8;
  if (!qword_1001A82C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A82C8);
  }
  return result;
}

uint64_t sub_10008EC58()
{
  return sub_10008EA00((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10008963C);
}

double sub_10008EC70@<D0>(_OWORD *a1@<X8>)
{
  return sub_10008981C(a1);
}

unint64_t sub_10008EC7C()
{
  unint64_t result = qword_1001A82D8;
  if (!qword_1001A82D8)
  {
    sub_100004A58(&qword_1001A82D0);
    sub_10008F1C0((unint64_t *)&qword_1001A6EF0, &qword_1001A6EE8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A82D8);
  }
  return result;
}

uint64_t sub_10008ED10()
{
  return swift_deallocObject();
}

uint64_t sub_10008ED20(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_10008ED80()
{
  unint64_t result = qword_1001A82E0;
  if (!qword_1001A82E0)
  {
    sub_100004A58(&qword_1001A82C0);
    sub_100092924(&qword_1001A82E8, &qword_1001A82B8, (void (*)(void))sub_10008EE28);
    sub_10008EC00();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A82E0);
  }
  return result;
}

uint64_t sub_10008EE28()
{
  return sub_100092924(&qword_1001A82F0, &qword_1001A82B0, (void (*)(void))sub_10008EE58);
}

unint64_t sub_10008EE58()
{
  unint64_t result = qword_1001A82F8;
  if (!qword_1001A82F8)
  {
    sub_100004A58(&qword_1001A82A8);
    sub_10008EEF8();
    sub_10000A780(&qword_1001A62A0, &qword_1001A62A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A82F8);
  }
  return result;
}

unint64_t sub_10008EEF8()
{
  unint64_t result = qword_1001A8300;
  if (!qword_1001A8300)
  {
    sub_100004A58(&qword_1001A82A0);
    sub_10008EF98();
    sub_10000A780(&qword_1001A6290, &qword_1001A6298);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8300);
  }
  return result;
}

unint64_t sub_10008EF98()
{
  unint64_t result = qword_1001A8308;
  if (!qword_1001A8308)
  {
    sub_100004A58(&qword_1001A8298);
    sub_10000A780(&qword_1001A8310, &qword_1001A8290);
    sub_10000A780(&qword_1001A8280, &qword_1001A8288);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8308);
  }
  return result;
}

unint64_t sub_10008F05C()
{
  unint64_t result = qword_1001A8318;
  if (!qword_1001A8318)
  {
    sub_100004A58(&qword_1001A5A58);
    sub_10008E768(&qword_1001A8320, (void (*)(uint64_t))&type metadata accessor for Divider);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8318);
  }
  return result;
}

unint64_t sub_10008F108()
{
  unint64_t result = qword_1001A8328;
  if (!qword_1001A8328)
  {
    sub_100004A58(&qword_1001A8218);
    sub_10008ED80();
    sub_10008E768((unint64_t *)&qword_1001A68E8, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8328);
  }
  return result;
}

uint64_t sub_10008F1B4@<X0>(uint64_t a1@<X8>)
{
  return sub_10008498C(*(void *)(v1 + 32), *(void *)(v1 + 16), *(void (**)(void, void))(v1 + 24), a1);
}

uint64_t sub_10008F1C0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10008F22C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10008F26C@<X0>(uint64_t a1@<X8>)
{
  return sub_100085E04(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_10008F278()
{
  unint64_t result = qword_1001A8358;
  if (!qword_1001A8358)
  {
    sub_100004A58(&qword_1001A8330);
    sub_100004A58(&qword_1001A8360);
    sub_10008F358();
    swift_getOpaqueTypeConformance2();
    sub_10008E768((unint64_t *)&qword_1001A68E8, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8358);
  }
  return result;
}

unint64_t sub_10008F358()
{
  unint64_t result = qword_1001A8368;
  if (!qword_1001A8368)
  {
    sub_100004A58(&qword_1001A8360);
    sub_10008F3F8();
    sub_10000A780(&qword_1001A6280, &qword_1001A6288);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8368);
  }
  return result;
}

unint64_t sub_10008F3F8()
{
  unint64_t result = qword_1001A8370;
  if (!qword_1001A8370)
  {
    sub_100004A58(&qword_1001A8378);
    sub_10008F1C0((unint64_t *)&qword_1001A6EF0, &qword_1001A6EE8);
    sub_10000A780(&qword_1001A5E98, &qword_1001A5EA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8370);
  }
  return result;
}

unint64_t sub_10008F4B0()
{
  unint64_t result = qword_1001A8380;
  if (!qword_1001A8380)
  {
    sub_100004A58(&qword_1001A8350);
    sub_10000A780(&qword_1001A8388, &qword_1001A8390);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8380);
  }
  return result;
}

unint64_t sub_10008F550()
{
  unint64_t result = qword_1001A8398;
  if (!qword_1001A8398)
  {
    sub_100004A58(&qword_1001A8200);
    sub_100092924(&qword_1001A8348, &qword_1001A8340, (void (*)(void))sub_1000242FC);
    sub_10008E768((unint64_t *)&qword_1001A68E8, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8398);
  }
  return result;
}

unint64_t sub_10008F628()
{
  unint64_t result = qword_1001A83A8;
  if (!qword_1001A83A8)
  {
    sub_100004A58(&qword_1001A8338);
    sub_10008F278();
    sub_10008F4B0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A83A8);
  }
  return result;
}

uint64_t sub_10008F6B0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000872D4(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10008F6BC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000877F8(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10008F6CC()
{
  uint64_t v1 = type metadata accessor for FilterView();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  sub_10001274C();
  uint64_t v3 = v2 + *(int *)(v1 + 36);
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = v2 + *(int *)(v1 + 40);
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10008F878@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for FilterView() - 8);
  uint64_t v8 = v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_100087D68(a1, v8, v5, v6, a2);
}

uint64_t sub_10008F914()
{
  uint64_t v1 = type metadata accessor for FilterView();
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v11 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  sub_10001274C();
  unint64_t v6 = v0 + v2 + *(int *)(v1 + 36);
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  unint64_t v8 = v0 + v2 + *(int *)(v1 + 40);
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for DismissAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + ((v2 + v11 + v5) & ~v5), AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t sub_10008FB74()
{
  uint64_t v1 = *(void *)(type metadata accessor for FilterView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return sub_10008858C(v0 + v2, v5);
}

uint64_t sub_10008FC74@<X0>(uint64_t a1@<X8>)
{
  return sub_1000886CC(v1[4], v1[5], v1[2], v1[3], a1);
}

uint64_t sub_10008FC80@<X0>(uint64_t a1@<X8>)
{
  return sub_100088988(*(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 24), a1);
}

uint64_t type metadata accessor for CompactDatePicker(uint64_t a1)
{
  return sub_10003859C(a1, (uint64_t *)&unk_1001A84A8);
}

uint64_t sub_10008FCC4()
{
  return 16;
}

__n128 sub_10008FCD0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10008FCE4()
{
  return 16;
}

__n128 sub_10008FCF0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_10008FCFC(double *a1@<X8>)
{
  *a1 = sub_10001CD78();
}

uint64_t sub_10008FD28()
{
  return sub_10001CD8C();
}

uint64_t sub_10008FD50()
{
  return 16;
}

__n128 sub_10008FD5C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_10008FD68(double *a1@<X8>)
{
  *a1 = sub_10001CDA0();
}

uint64_t sub_10008FD94()
{
  return sub_10001CE68();
}

uint64_t sub_10008FDBC()
{
  return 16;
}

__n128 sub_10008FDC8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10008FDD4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

ValueMetadata *type metadata accessor for FilterViewSafeAreaPreferenceKey()
{
  return &type metadata for FilterViewSafeAreaPreferenceKey;
}

void *sub_10008FE4C(void *a1, void *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (void *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    a1[1] = a2[1];
    swift_retain();
    swift_retain();
    uint64_t v49 = sub_10000570C(&qword_1001A8440);
    uint64_t v7 = *(int *)(v49 + 32);
    unint64_t v8 = (void *)((char *)a1 + v7);
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = *(void *)((char *)a2 + v7 + 8);
    *unint64_t v8 = *(void *)((char *)a2 + v7);
    v8[1] = v10;
    uint64_t v11 = type metadata accessor for CompactDatePickerConfiguration();
    uint64_t v12 = *(int *)(v11 + 20);
    uint64_t v45 = (char *)v8 + v12;
    unint64_t v13 = &v9[v12];
    uint64_t v46 = type metadata accessor for Date();
    uint64_t v48 = *(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16);
    swift_bridgeObjectRetain();
    v48(v45, v13, v46);
    *((unsigned char *)v8 + *(int *)(v11 + 24)) = v9[*(int *)(v11 + 24)];
    uint64_t v14 = a3[5];
    uint64_t v15 = (void *)((char *)a1 + v14);
    uint64_t v16 = (void *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = *(int *)(v49 + 32);
    uint64_t v19 = (void *)((char *)v15 + v18);
    uint64_t v20 = (char *)v16 + v18;
    uint64_t v21 = *(void *)((char *)v16 + v18 + 8);
    *uint64_t v19 = *(void *)((char *)v16 + v18);
    v19[1] = v21;
    uint64_t v22 = *(int *)(v11 + 20);
    uint64_t v23 = (char *)v15 + v18 + v22;
    uint64_t v24 = &v20[v22];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v48(v23, v24, v46);
    *((unsigned char *)v19 + *(int *)(v11 + 24)) = v20[*(int *)(v11 + 24)];
    uint64_t v25 = a3[6];
    uint64_t v26 = (void *)((char *)a1 + v25);
    uint64_t v27 = (void *)((char *)a2 + v25);
    uint64_t v28 = v27[1];
    *uint64_t v26 = *v27;
    v26[1] = v28;
    uint64_t v29 = *(int *)(v49 + 32);
    uint64_t v30 = (void *)((char *)v26 + v29);
    double v31 = (char *)v27 + v29;
    uint64_t v32 = *(void *)((char *)v27 + v29 + 8);
    *uint64_t v30 = *(void *)((char *)v27 + v29);
    v30[1] = v32;
    uint64_t v33 = *(int *)(v11 + 20);
    uint64_t v34 = (char *)v26 + v29 + v33;
    uint64_t v50 = &v31[v33];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v48(v34, v50, v46);
    *((unsigned char *)v30 + *(int *)(v11 + 24)) = v31[*(int *)(v11 + 24)];
    uint64_t v35 = a3[7];
    uint64_t v36 = a3[8];
    uint64_t v37 = (void *)((char *)a1 + v35);
    uint64_t v38 = (void *)((char *)a2 + v35);
    uint64_t v39 = v38[2];
    v37[1] = v38[1];
    v37[2] = v39;
    *uint64_t v37 = *v38;
    uint64_t v40 = (char *)a1 + v36;
    uint64_t v41 = (char *)a2 + v36;
    swift_retain();
    swift_retain();
    v48(v40, v41, v46);
    uint64_t v42 = sub_10000570C(&qword_1001A5CD0);
    v48(&v40[*(int *)(v42 + 36)], &v41[*(int *)(v42 + 36)], v46);
    uint64_t v43 = a3[10];
    *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
    *((unsigned char *)a1 + v43) = *((unsigned char *)a2 + v43);
  }
  return a1;
}

uint64_t sub_100090128(uint64_t a1, int *a2)
{
  swift_release();
  swift_release();
  uint64_t v4 = sub_10000570C(&qword_1001A8440);
  uint64_t v5 = a1 + *(int *)(v4 + 32);
  swift_bridgeObjectRelease();
  uint64_t v6 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v7 = v5 + *(int *)(v6 + 20);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v16)((void *)(v8 - 8), v7, v8);
  uint64_t v9 = a1 + a2[5];
  swift_release();
  swift_release();
  uint64_t v10 = v9 + *(int *)(v4 + 32);
  swift_bridgeObjectRelease();
  v16(v10 + *(int *)(v6 + 20), v8);
  uint64_t v11 = a1 + a2[6];
  swift_release();
  swift_release();
  uint64_t v12 = v11 + *(int *)(v4 + 32);
  swift_bridgeObjectRelease();
  v16(v12 + *(int *)(v6 + 20), v8);
  swift_release();
  swift_release();
  uint64_t v13 = a1 + a2[8];
  v16(v13, v8);
  uint64_t v14 = v13 + *(int *)(sub_10000570C(&qword_1001A5CD0) + 36);

  return ((uint64_t (*)(uint64_t, uint64_t))v16)(v14, v8);
}

void *sub_1000902E0(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  swift_retain();
  swift_retain();
  uint64_t v48 = sub_10000570C(&qword_1001A8440);
  uint64_t v6 = *(int *)(v48 + 32);
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = *(void *)((char *)a2 + v6 + 8);
  *uint64_t v7 = *(void *)((char *)a2 + v6);
  v7[1] = v9;
  uint64_t v10 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v11 = *(int *)(v10 + 20);
  uint64_t v45 = (char *)v7 + v11;
  uint64_t v12 = &v8[v11];
  uint64_t v46 = type metadata accessor for Date();
  uint64_t v47 = *(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16);
  swift_bridgeObjectRetain();
  v47(v45, v12, v46);
  *((unsigned char *)v7 + *(int *)(v10 + 24)) = v8[*(int *)(v10 + 24)];
  uint64_t v13 = a3[5];
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = *(int *)(v48 + 32);
  uint64_t v18 = (void *)((char *)v14 + v17);
  uint64_t v19 = (char *)v15 + v17;
  uint64_t v20 = *(void *)((char *)v15 + v17 + 8);
  *uint64_t v18 = *(void *)((char *)v15 + v17);
  v18[1] = v20;
  uint64_t v21 = *(int *)(v10 + 20);
  uint64_t v22 = (char *)v14 + v17 + v21;
  uint64_t v23 = &v19[v21];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v47(v22, v23, v46);
  *((unsigned char *)v18 + *(int *)(v10 + 24)) = v19[*(int *)(v10 + 24)];
  uint64_t v24 = a3[6];
  uint64_t v25 = (void *)((char *)a1 + v24);
  uint64_t v26 = (void *)((char *)a2 + v24);
  uint64_t v27 = v26[1];
  *uint64_t v25 = *v26;
  v25[1] = v27;
  uint64_t v28 = *(int *)(v48 + 32);
  uint64_t v29 = (void *)((char *)v25 + v28);
  uint64_t v30 = (char *)v26 + v28;
  uint64_t v31 = *(void *)((char *)v26 + v28 + 8);
  void *v29 = *(void *)((char *)v26 + v28);
  v29[1] = v31;
  uint64_t v32 = *(int *)(v10 + 20);
  uint64_t v33 = (char *)v25 + v28 + v32;
  uint64_t v34 = &v30[v32];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v47(v33, v34, v46);
  *((unsigned char *)v29 + *(int *)(v10 + 24)) = v30[*(int *)(v10 + 24)];
  uint64_t v35 = a3[7];
  uint64_t v36 = a3[8];
  uint64_t v37 = (void *)((char *)a1 + v35);
  uint64_t v38 = (void *)((char *)a2 + v35);
  uint64_t v39 = v38[2];
  v37[1] = v38[1];
  v37[2] = v39;
  *uint64_t v37 = *v38;
  uint64_t v40 = (char *)a1 + v36;
  uint64_t v41 = (char *)a2 + v36;
  swift_retain();
  swift_retain();
  v47(v40, v41, v46);
  uint64_t v42 = sub_10000570C(&qword_1001A5CD0);
  v47(&v40[*(int *)(v42 + 36)], &v41[*(int *)(v42 + 36)], v46);
  uint64_t v43 = a3[10];
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  *((unsigned char *)a1 + v43) = *((unsigned char *)a2 + v43);
  return a1;
}

char *sub_10009055C(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *((void *)a1 + 1) = *((void *)a2 + 1);
  swift_retain();
  swift_release();
  uint64_t v33 = sub_10000570C(&qword_1001A8440);
  uint64_t v5 = *(int *)(v33 + 32);
  uint64_t v6 = &a1[v5];
  uint64_t v7 = &a2[v5];
  *(void *)uint64_t v6 = *(void *)&a2[v5];
  *((void *)v6 + 1) = *(void *)&a2[v5 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v9 = *(int *)(v8 + 20);
  uint64_t v10 = &v6[v9];
  uint64_t v11 = &v7[v9];
  uint64_t v35 = type metadata accessor for Date();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 24);
  v12(v10, v11, v35);
  v6[*(int *)(v8 + 24)] = v7[*(int *)(v8 + 24)];
  uint64_t v13 = a3[5];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  swift_retain();
  swift_release();
  *((void *)v14 + 1) = *((void *)v15 + 1);
  swift_retain();
  swift_release();
  uint64_t v16 = *(int *)(v33 + 32);
  uint64_t v17 = &v14[v16];
  uint64_t v18 = &v15[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  *((void *)v17 + 1) = *((void *)v18 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12(&v17[*(int *)(v8 + 20)], &v18[*(int *)(v8 + 20)], v35);
  v17[*(int *)(v8 + 24)] = v18[*(int *)(v8 + 24)];
  uint64_t v19 = a3[6];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  *(void *)&a1[v19] = *(void *)&a2[v19];
  swift_retain();
  swift_release();
  *((void *)v20 + 1) = *((void *)v21 + 1);
  swift_retain();
  swift_release();
  uint64_t v22 = *(int *)(v33 + 32);
  uint64_t v23 = &v20[v22];
  uint64_t v24 = &v21[v22];
  *(void *)uint64_t v23 = *(void *)&v21[v22];
  *((void *)v23 + 1) = *(void *)&v21[v22 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12(&v23[*(int *)(v8 + 20)], &v24[*(int *)(v8 + 20)], v35);
  v23[*(int *)(v8 + 24)] = v24[*(int *)(v8 + 24)];
  uint64_t v25 = a3[7];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  *(void *)&a1[v25] = *(void *)&a2[v25];
  swift_retain();
  swift_release();
  *((void *)v26 + 1) = *((void *)v27 + 1);
  swift_retain();
  swift_release();
  *((void *)v26 + 2) = *((void *)v27 + 2);
  uint64_t v28 = a3[8];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  v12(&a1[v28], &a2[v28], v35);
  uint64_t v31 = sub_10000570C(&qword_1001A5CD0);
  v12(&v29[*(int *)(v31 + 36)], &v30[*(int *)(v31 + 36)], v35);
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

char *sub_100090854(char *a1, char *a2, int *a3)
{
  uint64_t v5 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = v5;
  uint64_t v38 = sub_10000570C(&qword_1001A8440);
  uint64_t v6 = *(int *)(v38 + 32);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  *(_OWORD *)&a1[v6] = *(_OWORD *)&a2[v6];
  uint64_t v9 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v10 = *(int *)(v9 + 20);
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
  v14(v11, v12, v13);
  v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
  uint64_t v15 = a3[5];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = *((void *)v17 + 1);
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + 1) = v18;
  uint64_t v19 = *(int *)(v38 + 32);
  uint64_t v20 = &v16[v19];
  uint64_t v21 = &v17[v19];
  *(_OWORD *)&v16[v19] = *(_OWORD *)&v17[v19];
  v14(&v16[v19 + *(int *)(v9 + 20)], &v17[v19 + *(int *)(v9 + 20)], v13);
  v20[*(int *)(v9 + 24)] = v21[*(int *)(v9 + 24)];
  uint64_t v22 = a3[6];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *((void *)v24 + 1);
  *(void *)uint64_t v23 = *(void *)v24;
  *((void *)v23 + 1) = v25;
  uint64_t v26 = *(int *)(v38 + 32);
  uint64_t v27 = &v23[v26];
  uint64_t v28 = &v24[v26];
  *(_OWORD *)&v23[v26] = *(_OWORD *)&v24[v26];
  v14(&v23[v26 + *(int *)(v9 + 20)], &v24[v26 + *(int *)(v9 + 20)], v13);
  v27[*(int *)(v9 + 24)] = v28[*(int *)(v9 + 24)];
  uint64_t v29 = a3[7];
  uint64_t v30 = a3[8];
  uint64_t v31 = &a1[v29];
  uint64_t v32 = &a2[v29];
  *((void *)v31 + 2) = *((void *)v32 + 2);
  *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  uint64_t v33 = &a1[v30];
  uint64_t v34 = &a2[v30];
  v14(&a1[v30], &a2[v30], v13);
  uint64_t v35 = sub_10000570C(&qword_1001A5CD0);
  v14(&v33[*(int *)(v35 + 36)], &v34[*(int *)(v35 + 36)], v13);
  uint64_t v36 = a3[10];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  a1[v36] = a2[v36];
  return a1;
}

char *sub_100090A54(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *((void *)a1 + 1) = *((void *)a2 + 1);
  swift_release();
  uint64_t v38 = sub_10000570C(&qword_1001A8440);
  uint64_t v5 = *(int *)(v38 + 32);
  uint64_t v6 = &a1[v5];
  uint64_t v7 = &a2[v5];
  uint64_t v8 = *(void *)&a2[v5 + 8];
  *(void *)uint64_t v6 = *(void *)&a2[v5];
  *((void *)v6 + 1) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v10 = *(int *)(v9 + 20);
  uint64_t v11 = &v6[v10];
  uint64_t v12 = &v7[v10];
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40);
  v14(v11, v12, v13);
  v6[*(int *)(v9 + 24)] = v7[*(int *)(v9 + 24)];
  uint64_t v15 = a3[5];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)&a1[v15] = *(void *)&a2[v15];
  swift_release();
  *((void *)v16 + 1) = *((void *)v17 + 1);
  swift_release();
  uint64_t v18 = *(int *)(v38 + 32);
  uint64_t v19 = &v16[v18];
  uint64_t v20 = &v17[v18];
  uint64_t v21 = *((void *)v20 + 1);
  *(void *)uint64_t v19 = *(void *)v20;
  *((void *)v19 + 1) = v21;
  swift_bridgeObjectRelease();
  v14(&v19[*(int *)(v9 + 20)], &v20[*(int *)(v9 + 20)], v13);
  v19[*(int *)(v9 + 24)] = v20[*(int *)(v9 + 24)];
  uint64_t v22 = a3[6];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  *(void *)&a1[v22] = *(void *)&a2[v22];
  swift_release();
  *((void *)v23 + 1) = *((void *)v24 + 1);
  swift_release();
  uint64_t v25 = *(int *)(v38 + 32);
  uint64_t v26 = &v23[v25];
  uint64_t v27 = &v24[v25];
  uint64_t v28 = *((void *)v27 + 1);
  *(void *)uint64_t v26 = *(void *)v27;
  *((void *)v26 + 1) = v28;
  swift_bridgeObjectRelease();
  v14(&v26[*(int *)(v9 + 20)], &v27[*(int *)(v9 + 20)], v13);
  v26[*(int *)(v9 + 24)] = v27[*(int *)(v9 + 24)];
  uint64_t v29 = a3[7];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = &a2[v29];
  *(void *)&a1[v29] = *(void *)&a2[v29];
  swift_release();
  *((void *)v30 + 1) = *((void *)v31 + 1);
  swift_release();
  *((void *)v30 + 2) = *((void *)v31 + 2);
  uint64_t v32 = a3[8];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  v14(&a1[v32], &a2[v32], v13);
  uint64_t v35 = sub_10000570C(&qword_1001A5CD0);
  v14(&v33[*(int *)(v35 + 36)], &v34[*(int *)(v35 + 36)], v13);
  uint64_t v36 = a3[10];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  a1[v36] = a2[v36];
  return a1;
}

uint64_t sub_100090CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100090CE8);
}

uint64_t sub_100090CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000570C(&qword_1001A8440);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = sub_10000570C(&qword_1001A5CD0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 32);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_100090E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100090E34);
}

uint64_t sub_100090E34(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_10000570C(&qword_1001A8440);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = sub_10000570C(&qword_1001A5CD0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 32);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void sub_100090F6C()
{
  sub_100091088(319, (unint64_t *)&unk_1001A84B8, (uint64_t (*)(uint64_t))type metadata accessor for CompactDatePickerConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Binding);
  if (v0 <= 0x3F)
  {
    sub_100021270();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_100091088(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1000910EC()
{
  return swift_getWitnessTable();
}

uint64_t sub_100091958()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100091974(uint64_t a1)
{
  unint64_t result = sub_10008E8AC();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10009199C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10008CF48(a1, a2);
}

unint64_t sub_1000919A4()
{
  unint64_t result = qword_1001A85A0;
  if (!qword_1001A85A0)
  {
    sub_100004A58(&qword_1001A85A8);
    sub_10000A780(&qword_1001A85B0, &qword_1001A85B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A85A0);
  }
  return result;
}

unint64_t sub_100091A44()
{
  unint64_t result = qword_1001A85C8;
  if (!qword_1001A85C8)
  {
    sub_100004A58(&qword_1001A8548);
    sub_10000A780(&qword_1001A85C0, &qword_1001A8540);
    sub_10008E768((unint64_t *)&qword_1001A68E8, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A85C8);
  }
  return result;
}

uint64_t sub_100091B18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CompactDatePicker(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100091B7C()
{
  type metadata accessor for CompactDatePicker(0);

  return sub_10008D1EC();
}

uint64_t type metadata accessor for DatePickerButtonStyle(uint64_t a1)
{
  return sub_10003859C(a1, qword_1001A8668);
}

uint64_t sub_100091C10()
{
  unint64_t v1 = (int *)(type metadata accessor for CompactDatePicker(0) - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  swift_release();
  swift_release();
  uint64_t v3 = sub_10000570C(&qword_1001A8440);
  uint64_t v4 = v2 + *(int *)(v3 + 32);
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v6 = v4 + *(int *)(v5 + 20);
  uint64_t v7 = type metadata accessor for Date();
  unint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  uint64_t v9 = v2 + v1[7];
  swift_release();
  swift_release();
  uint64_t v10 = v9 + *(int *)(v3 + 32);
  swift_bridgeObjectRelease();
  v8(v10 + *(int *)(v5 + 20), v7);
  uint64_t v11 = v2 + v1[8];
  swift_release();
  swift_release();
  uint64_t v12 = v11 + *(int *)(v3 + 32);
  swift_bridgeObjectRelease();
  v8(v12 + *(int *)(v5 + 20), v7);
  swift_release();
  swift_release();
  uint64_t v13 = v2 + v1[10];
  v8(v13, v7);
  uint64_t v14 = sub_10000570C(&qword_1001A5CD0);
  v8(v13 + *(int *)(v14 + 36), v7);

  return swift_deallocObject();
}

uint64_t sub_100091E30()
{
  type metadata accessor for CompactDatePicker(0);

  return sub_10008B5F8();
}

uint64_t sub_100091E90@<X0>(uint64_t a1@<X8>)
{
  return sub_10008BAB4(a1);
}

uint64_t sub_100091E98()
{
  return sub_10008B674(*(void *)(v0 + 16));
}

ValueMetadata *type metadata accessor for FilterViewStartDatePickerHeightPreferenceKey()
{
  return &type metadata for FilterViewStartDatePickerHeightPreferenceKey;
}

uint64_t *sub_100091EC4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = *(int *)(a3 + 20);
    unint64_t v8 = (uint64_t *)((char *)a1 + v7);
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = *(uint64_t *)((char *)a2 + v7 + 8);
    *unint64_t v8 = *(uint64_t *)((char *)a2 + v7);
    v8[1] = v10;
    uint64_t v11 = type metadata accessor for CompactDatePickerConfiguration();
    uint64_t v12 = *(int *)(v11 + 20);
    uint64_t v17 = &v9[v12];
    uint64_t v18 = (char *)v8 + v12;
    uint64_t v13 = type metadata accessor for Date();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    v14(v18, v17, v13);
    *((unsigned char *)v8 + *(int *)(v11 + 24)) = v9[*(int *)(v11 + 24)];
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t sub_100091FFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  uint64_t v3 = v2 + *(int *)(type metadata accessor for CompactDatePickerConfiguration() + 20);
  uint64_t v4 = type metadata accessor for Date();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(v3, v4);
}

unsigned char *sub_10009207C(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = &a1[v5];
  uint64_t v7 = &a2[v5];
  uint64_t v8 = *(void *)&a2[v5 + 8];
  void *v6 = *(void *)&a2[v5];
  v6[1] = v8;
  uint64_t v9 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v10 = *(int *)(v9 + 20);
  uint64_t v15 = (char *)v6 + v10;
  uint64_t v11 = &v7[v10];
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  v13(v15, v11, v12);
  *((unsigned char *)v6 + *(int *)(v9 + 24)) = v7[*(int *)(v9 + 24)];
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  return a1;
}

unsigned char *sub_10009216C(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  *uint64_t v7 = *(void *)&a2[v6];
  v7[1] = *(void *)&a2[v6 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v10 = *(int *)(v9 + 20);
  uint64_t v11 = (char *)v7 + v10;
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  *((unsigned char *)v7 + *(int *)(v9 + 24)) = v8[*(int *)(v9 + 24)];
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  return a1;
}

unsigned char *sub_100092250(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  *(_OWORD *)&a1[v6] = *(_OWORD *)&a2[v6];
  uint64_t v9 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v10 = *(int *)(v9 + 20);
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  return a1;
}

unsigned char *sub_10009231C(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = *(void *)&a2[v6 + 8];
  *uint64_t v7 = *(void *)&a2[v6];
  v7[1] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v11 = *(int *)(v10 + 20);
  uint64_t v12 = (char *)v7 + v11;
  uint64_t v13 = &v8[v11];
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  *((unsigned char *)v7 + *(int *)(v10 + 24)) = v8[*(int *)(v10 + 24)];
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t sub_1000923F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100092404);
}

uint64_t sub_100092404(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = type metadata accessor for CompactDatePickerConfiguration();
    uint64_t v11 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = &a1[*(int *)(a3 + 20)];
    return v11(v13, a2, v12);
  }
}

uint64_t sub_1000924B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000924C8);
}

unsigned char *sub_1000924C8(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *unint64_t result = a2 + 1;
  }
  else
  {
    uint64_t v7 = type metadata accessor for CompactDatePickerConfiguration();
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 20)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10009256C()
{
  uint64_t result = type metadata accessor for CompactDatePickerConfiguration();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100092610()
{
  return sub_10000A780(&qword_1001A86A8, &qword_1001A86B0);
}

unint64_t sub_10009264C(uint64_t a1)
{
  unint64_t result = sub_100092674();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100092674()
{
  unint64_t result = qword_1001A86B8;
  if (!qword_1001A86B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A86B8);
  }
  return result;
}

uint64_t sub_1000926C8()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1000926E8()
{
  unint64_t result = qword_1001A86F8;
  if (!qword_1001A86F8)
  {
    sub_100004A58(&qword_1001A86F0);
    sub_100092788();
    sub_10000A780(&qword_1001A8738, qword_1001A8740);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A86F8);
  }
  return result;
}

unint64_t sub_100092788()
{
  unint64_t result = qword_1001A8700;
  if (!qword_1001A8700)
  {
    sub_100004A58(&qword_1001A86E8);
    sub_100092828();
    sub_10000A780(&qword_1001A62A0, &qword_1001A62A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8700);
  }
  return result;
}

unint64_t sub_100092828()
{
  unint64_t result = qword_1001A8708;
  if (!qword_1001A8708)
  {
    sub_100004A58(&qword_1001A86E0);
    sub_100092924(&qword_1001A8710, &qword_1001A86D8, (void (*)(void))sub_1000928F4);
    sub_10000A780(&qword_1001A6290, &qword_1001A6298);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8708);
  }
  return result;
}

uint64_t sub_1000928F4()
{
  return sub_100092924(&qword_1001A8718, &qword_1001A86D0, (void (*)(void))sub_1000929A0);
}

uint64_t sub_100092924(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000929A0()
{
  return sub_100092924(&qword_1001A8720, &qword_1001A86C8, (void (*)(void))sub_1000929D0);
}

unint64_t sub_1000929D0()
{
  unint64_t result = qword_1001A8728;
  if (!qword_1001A8728)
  {
    sub_100004A58(&qword_1001A86C0);
    sub_10008E768(&qword_1001A8730, (void (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label);
    sub_10000A780(&qword_1001A68C0, &qword_1001A68C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8728);
  }
  return result;
}

uint64_t sub_100092AA4()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ObservationRegistrar();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t sub_100092BA0()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 104);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 136);
  uint64_t v4 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t sub_100092CAC()
{
  sub_100092BA0();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for UpcomingEventsViewModel()
{
  return sub_10000B72C();
}

void sub_100092D1C()
{
  type metadata accessor for PromotionalAssetsViewModel();
  type metadata accessor for Bindable();
  if (v0 <= 0x3F)
  {
    sub_100094D04(319, (unint64_t *)&qword_1001A5670, (void (*)(uint64_t))&type metadata accessor for DismissAction);
    if (v1 <= 0x3F)
    {
      sub_100094D04(319, (unint64_t *)&qword_1001A6628, (void (*)(uint64_t))&type metadata accessor for ColorScheme);
      if (v2 <= 0x3F)
      {
        sub_100025218();
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t *sub_100092EB8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    type metadata accessor for PromotionalAssetsViewModel();
    uint64_t v7 = type metadata accessor for Bindable();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[9];
    uint64_t v9 = a3[10];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    void *v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)a1 + v9);
    uint64_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    *uint64_t v13 = v16;
    v13[1] = v15;
    uint64_t v17 = a3[11];
    uint64_t v18 = (uint64_t *)((char *)a1 + v17);
    uint64_t v19 = (uint64_t *)((char *)a2 + v17);
    swift_retain();
    swift_retain();
    sub_10000570C(&qword_1001A5460);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v20 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    }
    else
    {
      *uint64_t v18 = *v19;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v22 = a3[12];
    uint64_t v23 = (uint64_t *)((char *)a1 + v22);
    uint64_t v24 = (uint64_t *)((char *)a2 + v22);
    sub_10000570C(&qword_1001A5468);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v25 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
    }
    else
    {
      *uint64_t v23 = *v24;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v26 = a3[13];
    uint64_t v27 = (uint64_t *)((char *)a1 + v26);
    uint64_t v28 = (uint64_t *)((char *)a2 + v26);
    sub_10000570C(&qword_1001A5470);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v29 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v30 = *(void *)(v29 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        uint64_t v31 = sub_10000570C(&qword_1001A5478);
        memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v30 + 16))(v27, v28, v29);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      }
    }
    else
    {
      *uint64_t v27 = *v28;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v32 = a3[14];
    uint64_t v33 = (uint64_t *)((char *)a1 + v32);
    uint64_t v34 = (uint64_t *)((char *)a2 + v32);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v35 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v36 = *(void *)(v35 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        uint64_t v37 = sub_10000570C(&qword_1001A5478);
        memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v36 + 16))(v33, v34, v35);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
    }
    else
    {
      *uint64_t v33 = *v34;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100093358(uint64_t a1, int *a2)
{
  type metadata accessor for PromotionalAssetsViewModel();
  uint64_t v4 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_release();
  swift_release();
  uint64_t v5 = a1 + a2[11];
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  uint64_t v7 = a1 + a2[12];
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  uint64_t v9 = a1 + a2[13];
  sub_10000570C(&qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v11 = *(void *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v12 = a1 + a2[14];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v16 = *(void *)(v13 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v12, 1, v13);
    if (!result)
    {
      uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8);
      return v15(v12, v13);
    }
  }
  else
  {
    return swift_release();
  }
  return result;
}

uint64_t sub_10009368C(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for PromotionalAssetsViewModel();
  uint64_t v6 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[9];
  uint64_t v8 = a3[10];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (uint64_t *)(a2 + v8);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  uint64_t v16 = a3[11];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  swift_retain();
  swift_retain();
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = type metadata accessor for DismissAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  }
  else
  {
    void *v17 = *v18;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v20 = a3[12];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v23 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
  }
  else
  {
    *uint64_t v21 = *v22;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v24 = a3[13];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (void *)(a2 + v24);
  sub_10000570C(&qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v27 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      uint64_t v29 = sub_10000570C(&qword_1001A5478);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 16))(v25, v26, v27);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
  }
  else
  {
    *uint64_t v25 = *v26;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v30 = a3[14];
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (void *)(a2 + v30);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v33 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v34 = *(void *)(v33 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      uint64_t v35 = sub_10000570C(&qword_1001A5478);
      memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v34 + 16))(v31, v32, v33);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
    }
  }
  else
  {
    void *v31 = *v32;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_100093ADC(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for PromotionalAssetsViewModel();
  uint64_t v6 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[9];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_retain();
  swift_release();
  uint64_t v10 = a3[10];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  swift_retain();
  swift_release();
  *(void *)(v11 + 8) = *(void *)(v12 + 8);
  if (a1 != a2)
  {
    uint64_t v13 = a3[11];
    uint64_t v14 = (void *)(a1 + v13);
    uint64_t v15 = (void *)(a2 + v13);
    sub_10000ACE0(a1 + v13, &qword_1001A5460);
    sub_10000570C(&qword_1001A5460);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    }
    else
    {
      *uint64_t v14 = *v15;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = a3[12];
    uint64_t v18 = (void *)(a1 + v17);
    uint64_t v19 = (void *)(a2 + v17);
    sub_10000ACE0(a1 + v17, &qword_1001A5468);
    sub_10000570C(&qword_1001A5468);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v20 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    }
    else
    {
      *uint64_t v18 = *v19;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v21 = a3[13];
    uint64_t v22 = (void *)(a1 + v21);
    uint64_t v23 = (void *)(a2 + v21);
    sub_10000ACE0(a1 + v21, &qword_1001A5470);
    sub_10000570C(&qword_1001A5470);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v24 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v25 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        uint64_t v26 = sub_10000570C(&qword_1001A5478);
        memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v25 + 16))(v22, v23, v24);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
    }
    else
    {
      *uint64_t v22 = *v23;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v27 = a3[14];
    uint64_t v28 = (void *)(a1 + v27);
    uint64_t v29 = (void *)(a2 + v27);
    sub_10000ACE0(a1 + v27, &qword_1001A5470);
    sub_10000570C(&qword_1001A5470);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v30 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v31 = *(void *)(v30 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      {
        uint64_t v32 = sub_10000570C(&qword_1001A5478);
        memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v31 + 16))(v28, v29, v30);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      }
    }
    else
    {
      *uint64_t v28 = *v29;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100093FAC(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for PromotionalAssetsViewModel();
  uint64_t v6 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[11];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for DismissAction();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  uint64_t v13 = a3[12];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v16 = sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v17 - 8) + 32))(v14, v15, v17);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  uint64_t v18 = a3[13];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  uint64_t v21 = sub_10000570C(&qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22))
    {
      uint64_t v24 = sub_10000570C(&qword_1001A5478);
      memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v23 + 32))(v19, v20, v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v19, 0, 1, v22);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  uint64_t v25 = a3[14];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (const void *)(a2 + v25);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v28 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      uint64_t v30 = sub_10000570C(&qword_1001A5478);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v29 + 32))(v26, v27, v28);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v26, v27, *(void *)(*(void *)(v21 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10009440C(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for PromotionalAssetsViewModel();
  uint64_t v6 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[9];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_release();
  uint64_t v12 = a3[10];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  swift_release();
  *(void *)(v13 + 8) = *(void *)(v14 + 8);
  if (a1 != a2)
  {
    uint64_t v15 = a3[11];
    uint64_t v16 = (void *)(a1 + v15);
    uint64_t v17 = (const void *)(a2 + v15);
    sub_10000ACE0(a1 + v15, &qword_1001A5460);
    uint64_t v18 = sub_10000570C(&qword_1001A5460);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v19 = type metadata accessor for DismissAction();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v19 - 8) + 32))(v16, v17, v19);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    uint64_t v20 = a3[12];
    uint64_t v21 = (void *)(a1 + v20);
    uint64_t v22 = (const void *)(a2 + v20);
    sub_10000ACE0(a1 + v20, &qword_1001A5468);
    uint64_t v23 = sub_10000570C(&qword_1001A5468);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v24 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v24 - 8) + 32))(v21, v22, v24);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
    uint64_t v25 = a3[13];
    uint64_t v26 = (void *)(a1 + v25);
    uint64_t v27 = (const void *)(a2 + v25);
    sub_10000ACE0(a1 + v25, &qword_1001A5470);
    uint64_t v28 = sub_10000570C(&qword_1001A5470);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v29 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v30 = *(void *)(v29 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v27, 1, v29))
      {
        uint64_t v31 = sub_10000570C(&qword_1001A5478);
        memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v30 + 32))(v26, v27, v29);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v26, 0, 1, v29);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
    }
    uint64_t v32 = a3[14];
    uint64_t v33 = (void *)(a1 + v32);
    uint64_t v34 = (const void *)(a2 + v32);
    sub_10000ACE0(a1 + v32, &qword_1001A5470);
    uint64_t v35 = sub_10000570C(&qword_1001A5470);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v36 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v37 = *(void *)(v36 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v37 + 48))(v34, 1, v36))
      {
        uint64_t v38 = sub_10000570C(&qword_1001A5478);
        memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v37 + 32))(v33, v34, v36);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v37 + 56))(v33, 0, 1, v36);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000948EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100094900);
}

uint64_t sub_100094900(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for PromotionalAssetsViewModel();
  uint64_t v6 = type metadata accessor for Bindable();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_12:
    return v9(v10, a2, v8);
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v11 = *(void *)(a1 + a3[9] + 8);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
  uint64_t v13 = sub_10000570C(&qword_1001A55E0);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v8 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a3[11];
LABEL_11:
    uint64_t v10 = a1 + v15;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    goto LABEL_12;
  }
  uint64_t v16 = sub_10000570C(&qword_1001A65B8);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a2)
  {
    uint64_t v8 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a3[12];
    goto LABEL_11;
  }
  uint64_t v17 = sub_10000570C(&qword_1001A5F10);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48);
  uint64_t v19 = v17;
  uint64_t v20 = a1 + a3[13];

  return v18(v20, a2, v19);
}

uint64_t sub_100094AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100094B00);
}

uint64_t sub_100094B00(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  type metadata accessor for PromotionalAssetsViewModel();
  uint64_t result = type metadata accessor for Bindable();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_10:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[9] + 8) = (a2 - 1);
    return result;
  }
  uint64_t v13 = sub_10000570C(&qword_1001A55E0);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[11];
LABEL_9:
    uint64_t v12 = a1 + v15;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_10;
  }
  uint64_t v16 = sub_10000570C(&qword_1001A65B8);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[12];
    goto LABEL_9;
  }
  uint64_t v17 = sub_10000570C(&qword_1001A5F10);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  uint64_t v19 = v17;
  uint64_t v20 = a1 + a4[13];

  return v18(v20, a2, a2, v19);
}

uint64_t type metadata accessor for PromotionalAssetsView()
{
  return sub_10000B72C();
}

void sub_100094D04(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Environment.Content();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_100094D58()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100094D9C()
{
  type metadata accessor for PromotionalAssetsViewModel();
  type metadata accessor for Bindable();
  Bindable.wrappedValue.getter();
  return v1;
}

uint64_t sub_100094DDC()
{
  type metadata accessor for PromotionalAssetsViewModel();
  type metadata accessor for Bindable();

  return Bindable.projectedValue.getter();
}

uint64_t sub_100094E28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v250 = a2;
  uint64_t v258 = sub_10000570C(&qword_1001A5478);
  __chkstk_darwin(v258, v3);
  uint64_t v249 = (uint64_t)v190 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v247 = *(void *)(v5 - 8);
  uint64_t v248 = v5;
  __chkstk_darwin(v5, v6);
  v246 = (char *)v190 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = a1;
  uint64_t v270 = a1;
  uint64_t v11 = v8;
  uint64_t v12 = v9;
  type metadata accessor for PromotionalAssetsViewModel();
  uint64_t v13 = type metadata accessor for Bindable();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v244 = v13;
  uint64_t v245 = v14;
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v243 = (char *)v190 - v17;
  uint64_t v269 = *(void *)(v10 - 8);
  uint64_t v265 = *(void *)(v269 + 64);
  __chkstk_darwin(v16, v18);
  long long v264 = (char *)v190 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v266 = type metadata accessor for CoordinateSpace();
  uint64_t v262 = *(void *)(v266 - 8);
  __chkstk_darwin(v266, v20);
  long long v261 = (void *)((char *)v190 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for NavigationPath();
  uint64_t v263 = v12;
  uint64_t v267 = v11;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for TourPhotosView();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  sub_100004A58(&qword_1001A8848);
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001A8850);
  uint64_t v306 = type metadata accessor for ModifiedContent();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for FeaturedVideosView();
  sub_100004A58(&qword_1001A8858);
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001A8860);
  type metadata accessor for ModifiedContent();
  uint64_t v307 = type metadata accessor for Optional();
  uint64_t v308 = sub_100004A58(&qword_1001A8868);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v25 = swift_getAssociatedConformanceWitness();
  uint64_t v302 = AssociatedTypeWitness;
  uint64_t v303 = v23;
  uint64_t v304 = AssociatedConformanceWitness;
  uint64_t v305 = v25;
  type metadata accessor for PhoneWallpapersWatchFacesView();
  type metadata accessor for PhoneWallpaperView();
  type metadata accessor for Optional();
  type metadata accessor for WatchFacesView();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  type metadata accessor for _ConditionalContent();
  uint64_t v309 = type metadata accessor for Optional();
  uint64_t v310 = type metadata accessor for AppModule();
  swift_getTupleTypeMetadata();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  swift_getWitnessTable();
  type metadata accessor for ObservableScrollView();
  uint64_t v26 = type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  v301 = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  uint64_t v27 = swift_getWitnessTable();
  uint64_t v306 = v26;
  uint64_t v307 = v27;
  swift_getOpaqueTypeMetadata2();
  sub_100004A58(&qword_1001A8870);
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001A8878);
  uint64_t v28 = type metadata accessor for ModifiedContent();
  uint64_t v306 = v26;
  uint64_t v307 = v27;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v30 = sub_10000A780(&qword_1001A8880, &qword_1001A8870);
  uint64_t v298 = OpaqueTypeConformance2;
  uint64_t v299 = v30;
  uint64_t v31 = swift_getWitnessTable();
  uint64_t v32 = sub_10000A780(&qword_1001A8888, &qword_1001A8878);
  uint64_t v296 = v31;
  uint64_t v297 = v32;
  uint64_t v259 = v28;
  uint64_t v207 = swift_getWitnessTable();
  uint64_t v33 = type metadata accessor for NavigationStack();
  uint64_t v260 = *(void *)(v33 - 8);
  __chkstk_darwin(v33, v34);
  uint64_t v206 = (char *)v190 - v35;
  sub_100004A58(&qword_1001A8890);
  uint64_t v193 = v33;
  uint64_t v36 = type metadata accessor for ModifiedContent();
  uint64_t v229 = *(void *)(v36 - 8);
  __chkstk_darwin(v36, v37);
  unint64_t v251 = (unint64_t)v190 - v38;
  sub_100004A58(&qword_1001A8898);
  uint64_t v197 = v36;
  uint64_t v39 = type metadata accessor for ModifiedContent();
  uint64_t v228 = *(void *)(v39 - 8);
  __chkstk_darwin(v39, v40);
  char v210 = (char *)v190 - v41;
  sub_100004A58(&qword_1001A88A0);
  uint64_t v200 = v39;
  uint64_t v42 = type metadata accessor for ModifiedContent();
  uint64_t v236 = *(void *)(v42 - 8);
  __chkstk_darwin(v42, v43);
  char v212 = (char *)v190 - v44;
  sub_100004A58(&qword_1001A88A8);
  uint64_t v203 = v42;
  uint64_t v45 = type metadata accessor for ModifiedContent();
  uint64_t v241 = *(void *)(v45 - 8);
  __chkstk_darwin(v45, v46);
  uint64_t v255 = (char *)v190 - v47;
  uint64_t v48 = sub_100004A58(&qword_1001A88B0);
  uint64_t v49 = swift_getWitnessTable();
  uint64_t v191 = v49;
  uint64_t v50 = sub_10000A780(&qword_1001A88B8, &qword_1001A8890);
  uint64_t v294 = v49;
  uint64_t v295 = v50;
  uint64_t v51 = swift_getWitnessTable();
  uint64_t v195 = v51;
  uint64_t v52 = sub_10000A780(&qword_1001A88C0, &qword_1001A8898);
  uint64_t v292 = v51;
  uint64_t v293 = v52;
  uint64_t v53 = swift_getWitnessTable();
  uint64_t v196 = v53;
  uint64_t v54 = sub_10000A780(&qword_1001A88C8, &qword_1001A88A0);
  uint64_t v290 = v53;
  uint64_t v291 = v54;
  long long v257 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v55 = swift_getWitnessTable();
  uint64_t v202 = v55;
  uint64_t v56 = sub_10000A780(&qword_1001A88D0, &qword_1001A88A8);
  uint64_t v288 = v55;
  uint64_t v289 = v56;
  uint64_t v57 = swift_getWitnessTable();
  uint64_t v253 = v57;
  uint64_t v58 = sub_100004A58(&qword_1001A88D8);
  uint64_t v59 = sub_10009E018(&qword_1001A88E0, &qword_1001A88D8, (void (*)(void))sub_100058590);
  uint64_t v306 = v58;
  uint64_t v307 = v59;
  uint64_t v252 = swift_getOpaqueTypeConformance2();
  uint64_t v306 = v45;
  uint64_t v307 = v48;
  uint64_t v60 = v45;
  uint64_t v192 = v45;
  uint64_t v61 = v48;
  v190[1] = v48;
  uint64_t v308 = v57;
  uint64_t v309 = v252;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v225 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2, OpaqueTypeMetadata2);
  char v205 = (char *)v190 - v62;
  uint64_t v63 = type metadata accessor for ModifiedContent();
  uint64_t v230 = *(void *)(v63 - 8);
  __chkstk_darwin(v63, v64);
  v254 = (char *)v190 - v65;
  uint64_t v199 = v63;
  uint64_t v66 = type metadata accessor for ModifiedContent();
  uint64_t v238 = *(void *)(v66 - 8);
  __chkstk_darwin(v66, v67);
  uint64_t v218 = (char *)v190 - v68;
  type metadata accessor for _TaskModifier();
  uint64_t v204 = v66;
  uint64_t v69 = type metadata accessor for ModifiedContent();
  uint64_t v239 = *(void *)(v69 - 8);
  __chkstk_darwin(v69, v70);
  long long v256 = (char *)v190 - v71;
  uint64_t v209 = v69;
  uint64_t v72 = type metadata accessor for ModifiedContent();
  uint64_t v240 = *(void *)(v72 - 8);
  __chkstk_darwin(v72, v73);
  uint64_t v233 = (char *)v190 - v74;
  uint64_t v221 = v72;
  uint64_t v75 = type metadata accessor for ModifiedContent();
  uint64_t v242 = *(void *)(v75 - 8);
  __chkstk_darwin(v75, v76);
  uint64_t v237 = (char *)v190 - v77;
  uint64_t v306 = v60;
  uint64_t v307 = v61;
  uint64_t v308 = v253;
  uint64_t v309 = v252;
  uint64_t v194 = swift_getOpaqueTypeConformance2();
  uint64_t v286 = v194;
  v287 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v198 = swift_getWitnessTable();
  uint64_t v284 = v198;
  v285 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v78 = swift_getWitnessTable();
  uint64_t v201 = v78;
  uint64_t v79 = sub_10009E848(&qword_1001A5430, (void (*)(uint64_t))&type metadata accessor for _TaskModifier);
  uint64_t v282 = v78;
  uint64_t v283 = v79;
  uint64_t v208 = swift_getWitnessTable();
  uint64_t v280 = v208;
  v281 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v220 = swift_getWitnessTable();
  uint64_t v278 = v220;
  uint64_t v279 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v80 = swift_getWitnessTable();
  unint64_t v81 = sub_10009D964();
  uint64_t v82 = v75;
  uint64_t v215 = v75;
  uint64_t v216 = v80;
  uint64_t v83 = v258;
  uint64_t v306 = v75;
  uint64_t v307 = v258;
  uint64_t v308 = v80;
  uint64_t v309 = v81;
  unint64_t v84 = v81;
  long long v227 = &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>;
  uint64_t v85 = swift_getOpaqueTypeMetadata2();
  uint64_t v223 = v85;
  uint64_t v235 = *(void *)(v85 - 8);
  __chkstk_darwin(v85, v86);
  uint64_t v214 = (char *)v190 - v87;
  uint64_t v306 = v82;
  uint64_t v307 = v83;
  uint64_t v308 = v80;
  uint64_t v309 = v84;
  unint64_t v211 = v84;
  uint64_t v222 = swift_getOpaqueTypeConformance2();
  uint64_t v306 = v85;
  uint64_t v307 = v83;
  uint64_t v308 = v222;
  uint64_t v309 = v84;
  uint64_t v224 = swift_getOpaqueTypeMetadata2();
  uint64_t v231 = *(void *)(v224 - 8);
  __chkstk_darwin(v224, v88);
  char v213 = (char *)v190 - v89;
  type metadata accessor for AccessibilityAttachmentModifier();
  uint64_t v232 = type metadata accessor for ModifiedContent();
  uint64_t v234 = *(void *)(v232 - 8);
  uint64_t v91 = __chkstk_darwin(v232, v90);
  uint64_t v219 = (char *)v190 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v91, v93);
  long long v226 = (char *)v190 - v94;
  uint64_t v95 = v267;
  uint64_t v273 = v267;
  uint64_t v96 = v263;
  uint64_t v274 = v263;
  uint64_t v97 = v268;
  uint64_t v275 = v268;
  double v98 = v206;
  NavigationStack.init<>(root:)();
  sub_10009DA14();
  uint64_t v99 = (void (*)(void, void, void))v261;
  uint64_t v100 = v193;
  uint64_t v101 = v191;
  sub_100125564((uint64_t)v261);
  sub_1000B0F88((uint64_t)&type metadata for PromotionalAssetsViewSizePreferenceKey, (uint64_t)v99, (uint64_t)sub_10009FF94, 0, v100, v101, v251);
  (*(void (**)(void (*)(void, void, void), uint64_t))(v262 + 8))(v99, v266);
  (*(void (**)(char *, uint64_t))(v260 + 8))(v98, v100);
  uint64_t v102 = v269;
  uint64_t v103 = *(void **)(v269 + 16);
  uint64_t v266 = v269 + 16;
  long long v261 = v103;
  uint64_t v104 = v264;
  uint64_t v105 = v270;
  ((void (*)(char *, uint64_t, uint64_t))v103)(v264, v97, v270);
  uint64_t v106 = *(unsigned __int8 *)(v102 + 80);
  uint64_t v107 = ((v106 + 32) & ~v106) + v265;
  uint64_t v108 = (v106 + 32) & ~v106;
  uint64_t v260 = v108;
  uint64_t v265 = v106 | 7;
  uint64_t v259 = v107;
  uint64_t v109 = swift_allocObject();
  *(void *)(v109 + 16) = v95;
  *(void *)(v109 + 24) = v96;
  uint64_t v262 = *(void *)(v102 + 32);
  uint64_t v269 = v102 + 32;
  ((void (*)(uint64_t, char *, uint64_t))v262)(v109 + v108, v104, v105);
  sub_10009E848(&qword_1001A7BE8, type metadata accessor for CGSize);
  uint64_t v110 = v210;
  uint64_t v111 = v197;
  unint64_t v112 = v251;
  View.onPreferenceChange<A>(_:perform:)();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v229 + 8))(v112, v111);
  unint64_t v251 = sub_10009DAF8();
  uint64_t v113 = v212;
  uint64_t v114 = v200;
  sub_1000B1184();
  (*(void (**)(char *, uint64_t))(v228 + 8))(v110, v114);
  uint64_t v115 = v104;
  uint64_t v116 = v104;
  uint64_t v117 = v268;
  uint64_t v118 = v270;
  ((void (*)(char *, uint64_t, uint64_t))v261)(v116, v268, v270);
  uint64_t v119 = swift_allocObject();
  uint64_t v120 = v267;
  uint64_t v121 = v263;
  *(void *)(v119 + 16) = v267;
  *(void *)(v119 + 24) = v121;
  ((void (*)(uint64_t, char *, uint64_t))v262)(v119 + v260, v115, v118);
  sub_10008E990();
  uint64_t v122 = v203;
  View.onPreferenceChange<A>(_:perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v236 + 8))(v113, v122);
  uint64_t v123 = v243;
  sub_100094DDC();
  uint64_t v271 = v120;
  uint64_t v124 = v120;
  uint64_t v272 = v121;
  swift_getKeyPath();
  uint64_t v125 = v244;
  Bindable<A>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v245 + 8))(v123, v125);
  LODWORD(v251) = v308;
  uint64_t v126 = v264;
  uint64_t v127 = v117;
  uint64_t v128 = v118;
  uint64_t v129 = v118;
  uint64_t v130 = (void (*)(char *, uint64_t, uint64_t))v261;
  ((void (*)(char *, uint64_t, uint64_t))v261)(v264, v127, v129);
  uint64_t v131 = swift_allocObject();
  *(void *)(v131 + 16) = v124;
  *(void *)(v131 + 24) = v121;
  uint64_t v132 = v260;
  ((void (*)(uint64_t, char *, uint64_t))v262)(v131 + v260, v126, v128);
  uint64_t v133 = v205;
  uint64_t v134 = v192;
  uint64_t v135 = v255;
  View.sheet<A>(isPresented:onDismiss:content:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v241 + 8))(v135, v134);
  uint64_t v136 = v264;
  uint64_t v137 = v268;
  uint64_t v138 = v270;
  v130(v264, v268, v270);
  uint64_t v139 = swift_allocObject();
  uint64_t v140 = v263;
  *(void *)(v139 + 16) = v267;
  *(void *)(v139 + 24) = v140;
  uint64_t v141 = v139 + v132;
  uint64_t v142 = (void (*)(uint64_t, char *, uint64_t))v262;
  ((void (*)(uint64_t, char *, uint64_t))v262)(v141, v136, v138);
  uint64_t v143 = OpaqueTypeMetadata2;
  View.onAppear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v225 + 8))(v133, v143);
  uint64_t v144 = v137;
  uint64_t v145 = v270;
  uint64_t v146 = (void (*)(char *, uint64_t, uint64_t))v261;
  ((void (*)(char *, uint64_t, uint64_t))v261)(v136, v144, v270);
  uint64_t v147 = swift_allocObject();
  *(void *)(v147 + 16) = v267;
  *(void *)(v147 + 24) = v140;
  v142(v147 + v260, v136, v145);
  uint64_t v148 = v218;
  uint64_t v149 = v199;
  uint64_t v150 = v254;
  View.onDisappear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v230 + 8))(v150, v149);
  uint64_t v151 = v264;
  uint64_t v152 = v270;
  v146(v264, v268, v270);
  uint64_t v153 = swift_allocObject();
  uint64_t v154 = v263;
  *(void *)(v153 + 16) = v267;
  *(void *)(v153 + 24) = v154;
  uint64_t v155 = v260;
  uint64_t v156 = (void (*)(uint64_t, char *, uint64_t))v262;
  ((void (*)(uint64_t, char *, uint64_t))v262)(v153 + v260, v151, v152);
  char v157 = v246;
  uint64_t v158 = v204;
  j___sScP13userInitiatedScPvgZ();
  View.task(priority:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v247 + 8))(v157, v248);
  (*(void (**)(char *, uint64_t))(v238 + 8))(v148, v158);
  uint64_t v159 = v264;
  uint64_t v160 = v268;
  uint64_t v161 = v270;
  ((void (*)(char *, uint64_t, uint64_t))v261)(v264, v268, v270);
  uint64_t v162 = swift_allocObject();
  uint64_t v163 = v267;
  uint64_t v164 = v263;
  *(void *)(v162 + 16) = v267;
  *(void *)(v162 + 24) = v164;
  uint64_t v165 = v162 + v155;
  uint64_t v166 = v159;
  v156(v165, v159, v161);
  uint64_t v167 = v233;
  uint64_t v168 = v209;
  uint64_t v169 = v256;
  View.onAppear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v239 + 8))(v169, v168);
  uint64_t v170 = v270;
  ((void (*)(char *, uint64_t, uint64_t))v261)(v166, v160, v270);
  uint64_t v171 = swift_allocObject();
  *(void *)(v171 + 16) = v163;
  *(void *)(v171 + 24) = v164;
  ((void (*)(uint64_t, char *, uint64_t))v262)(v171 + v260, v166, v170);
  uint64_t v172 = v237;
  uint64_t v173 = v221;
  View.onDisappear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v240 + 8))(v167, v173);
  uint64_t v174 = v249;
  sub_100026824(v249);
  uint64_t v175 = v214;
  uint64_t v176 = v215;
  uint64_t v177 = v258;
  uint64_t v178 = v211;
  View.onChange<A>(of:initial:_:)();
  sub_10000ACE0(v174, &qword_1001A5478);
  (*(void (**)(char *, uint64_t))(v242 + 8))(v172, v176);
  sub_100026824(v174);
  uint64_t v179 = v213;
  uint64_t v181 = v222;
  uint64_t v180 = v223;
  View.onChange<A>(of:initial:_:)();
  sub_10000ACE0(v174, &qword_1001A5478);
  (*(void (**)(char *, uint64_t))(v235 + 8))(v175, v180);
  uint64_t v306 = v180;
  uint64_t v307 = v177;
  uint64_t v308 = v181;
  uint64_t v309 = v178;
  uint64_t v182 = swift_getOpaqueTypeConformance2();
  uint64_t v183 = v219;
  uint64_t v184 = v224;
  View.accessibilityIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v231 + 8))(v179, v184);
  uint64_t v185 = sub_10009E848((unint64_t *)&qword_1001A68E8, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  uint64_t v276 = v182;
  uint64_t v277 = v185;
  uint64_t v186 = v232;
  swift_getWitnessTable();
  uint64_t v187 = v226;
  sub_1001221F0(v183, v186);
  uint64_t v188 = *(void (**)(char *, uint64_t))(v234 + 8);
  v188(v183, v186);
  sub_1001221F0(v187, v186);
  return ((uint64_t (*)(char *, uint64_t))v188)(v187, v186);
}

uint64_t sub_100096BC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v93 = a1;
  uint64_t v89 = a4;
  uint64_t v88 = sub_10000570C(&qword_1001A5478);
  __chkstk_darwin(v88, v6);
  uint64_t v87 = (uint64_t)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = a2;
  uint64_t v92 = type metadata accessor for PromotionalAssetsView();
  uint64_t v85 = *(void *)(v92 - 8);
  uint64_t v86 = *(void *)(v85 + 64);
  __chkstk_darwin(v92, v8);
  unint64_t v84 = (char *)&v66 - v9;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for TourPhotosView();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  sub_100004A58(&qword_1001A8848);
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001A8850);
  uint64_t v97 = type metadata accessor for ModifiedContent();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for FeaturedVideosView();
  sub_100004A58(&qword_1001A8858);
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001A8860);
  type metadata accessor for ModifiedContent();
  uint64_t v98 = type metadata accessor for Optional();
  uint64_t v99 = sub_100004A58(&qword_1001A8868);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v13 = swift_getAssociatedConformanceWitness();
  v96[18] = AssociatedTypeWitness;
  v96[19] = v11;
  v96[20] = AssociatedConformanceWitness;
  v96[21] = v13;
  type metadata accessor for PhoneWallpapersWatchFacesView();
  type metadata accessor for PhoneWallpaperView();
  type metadata accessor for Optional();
  type metadata accessor for WatchFacesView();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  type metadata accessor for _ConditionalContent();
  uint64_t v100 = type metadata accessor for Optional();
  uint64_t v101 = type metadata accessor for AppModule();
  swift_getTupleTypeMetadata();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v70 = type metadata accessor for VStack();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v14 = type metadata accessor for ObservableScrollView();
  uint64_t v71 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v66 - v16;
  uint64_t v18 = type metadata accessor for ModifiedContent();
  uint64_t v74 = v18;
  uint64_t v79 = *(void *)(v18 - 8);
  __chkstk_darwin(v18, v19);
  uint64_t v90 = (char *)&v66 - v20;
  uint64_t v68 = swift_getWitnessTable();
  v96[16] = v68;
  v96[17] = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  uint64_t v82 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v73 = swift_getWitnessTable();
  uint64_t v97 = v18;
  uint64_t v98 = v73;
  uint64_t v77 = &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>;
  swift_getOpaqueTypeMetadata2();
  sub_100004A58(&qword_1001A8870);
  uint64_t v76 = type metadata accessor for ModifiedContent();
  uint64_t v81 = *(void *)(v76 - 8);
  __chkstk_darwin(v76, v21);
  uint64_t v72 = (uint64_t)&v66 - v22;
  sub_100004A58(&qword_1001A8878);
  uint64_t v80 = type metadata accessor for ModifiedContent();
  uint64_t v83 = *(void *)(v80 - 8);
  uint64_t v24 = __chkstk_darwin(v80, v23);
  uint64_t v75 = (char *)&v66 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v26);
  uint64_t v78 = (char *)&v66 - v27;
  uint64_t v29 = v91;
  uint64_t v28 = v92;
  v96[8] = v91;
  v96[9] = a3;
  uint64_t v67 = a3;
  v96[10] = v93;
  uint64_t v31 = v84;
  uint64_t v30 = v85;
  (*(void (**)(char *))(v85 + 16))(v84);
  unint64_t v32 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = v29;
  *(void *)(v33 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v30 + 32))(v33 + v32, v31, v28);
  char v34 = static Axis.Set.vertical.getter();
  sub_1000C3FB0(v34, 0, (void (*)(uint64_t))sub_10009DEF0, (uint64_t)sub_10009DF00, v33, (uint64_t)v17);
  static Edge.Set.bottom.getter();
  static SafeAreaRegions.all.getter();
  View.ignoresSafeArea(_:edges:)();
  (*(void (**)(char *, uint64_t))(v71 + 8))(v17, v14);
  uint64_t v35 = v93;
  uint64_t v36 = (uint64_t *)(v93 + *(int *)(v28 + 36));
  uint64_t v38 = *v36;
  uint64_t v37 = v36[1];
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v39 = static MainActor.shared.getter();
  uint64_t v40 = (void *)swift_allocObject();
  v40[2] = v39;
  v40[3] = &protocol witness table for MainActor;
  v40[4] = v38;
  v40[5] = v37;
  swift_retain();
  uint64_t v41 = static MainActor.shared.getter();
  uint64_t v42 = (void *)swift_allocObject();
  void v42[2] = v41;
  v42[3] = &protocol witness table for MainActor;
  v42[4] = v38;
  v42[5] = v37;
  Binding.init(get:set:)();
  uint64_t v43 = v97;
  uint64_t v44 = v98;
  LODWORD(v41) = v99;
  v96[2] = v91;
  v96[3] = v67;
  v96[4] = v35;
  v95[2] = v91;
  v95[3] = v67;
  v95[4] = v35;
  v94[2] = v91;
  v94[3] = v67;
  v94[4] = v35;
  uint64_t v45 = sub_10000570C(&qword_1001A8928);
  uint64_t v46 = sub_10000570C(&qword_1001A8930);
  uint64_t v47 = sub_10009E018(&qword_1001A8938, &qword_1001A8928, (void (*)(void))sub_10009E094);
  unint64_t v48 = sub_10009E188();
  uint64_t v49 = v73;
  uint64_t v65 = v46;
  uint64_t v50 = v74;
  uint64_t v51 = v72;
  int v52 = v41;
  uint64_t v53 = v90;
  sub_1000B122C(v43, v44, v52, (uint64_t)sub_10009DFF4, (uint64_t)v96, (void (*)(uint64_t))sub_10009E000, (uint64_t)v95, (uint64_t)sub_10009E00C, v72, (uint64_t)v94, v74, v45, v65, v45, v73, v47, v48, v47);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v79 + 8))(v53, v50);
  static Animation.easeInOut.getter();
  uint64_t v54 = v87;
  sub_100026824(v87);
  uint64_t v97 = v50;
  uint64_t v98 = v49;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v56 = sub_10000A780(&qword_1001A8880, &qword_1001A8870);
  v96[14] = OpaqueTypeConformance2;
  v96[15] = v56;
  uint64_t v57 = v76;
  uint64_t v58 = swift_getWitnessTable();
  sub_10009D964();
  uint64_t v59 = v75;
  View.animation<A>(_:value:)();
  swift_release();
  sub_10000ACE0(v54, &qword_1001A5478);
  (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v51, v57);
  uint64_t v60 = sub_10000A780(&qword_1001A8888, &qword_1001A8878);
  v96[12] = v58;
  v96[13] = v60;
  uint64_t v61 = v80;
  swift_getWitnessTable();
  uint64_t v62 = v78;
  sub_1001221F0(v59, v61);
  uint64_t v63 = *(void (**)(char *, uint64_t))(v83 + 8);
  v63(v59, v61);
  sub_1001221F0(v62, v61);
  return ((uint64_t (*)(char *, uint64_t))v63)(v62, v61);
}

uint64_t sub_1000977CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v18[1] = a4;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for TourPhotosView();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  sub_100004A58(&qword_1001A8848);
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001A8850);
  v18[11] = type metadata accessor for ModifiedContent();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for FeaturedVideosView();
  sub_100004A58(&qword_1001A8858);
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001A8860);
  type metadata accessor for ModifiedContent();
  v18[12] = type metadata accessor for Optional();
  v18[13] = sub_100004A58(&qword_1001A8868);
  v18[7] = swift_getAssociatedTypeWitness();
  v18[8] = swift_getAssociatedTypeWitness();
  v18[9] = swift_getAssociatedConformanceWitness();
  v18[10] = swift_getAssociatedConformanceWitness();
  type metadata accessor for PhoneWallpapersWatchFacesView();
  type metadata accessor for PhoneWallpaperView();
  type metadata accessor for Optional();
  type metadata accessor for WatchFacesView();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  type metadata accessor for _ConditionalContent();
  v18[14] = type metadata accessor for Optional();
  v18[15] = type metadata accessor for AppModule();
  swift_getTupleTypeMetadata();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v7 = type metadata accessor for VStack();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)v18 - v14;
  static HorizontalAlignment.leading.getter();
  _DWORD v18[4] = a2;
  v18[5] = a3;
  v18[6] = a1;
  VStack.init(alignment:spacing:content:)();
  swift_getWitnessTable();
  sub_1001221F0(v12, v7);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v12, v7);
  sub_1001221F0(v15, v7);
  return ((uint64_t (*)(char *, uint64_t))v16)(v15, v7);
}

uint64_t sub_100097CD0@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  v485 = a3;
  v486 = a2;
  uint64_t v487 = a1;
  uint64_t v453 = a4;
  uint64_t v451 = type metadata accessor for AppModule();
  uint64_t v5 = __chkstk_darwin(v451, v4);
  v472 = (uint64_t (**)())((char *)&v379 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5, v7);
  uint64_t v452 = (uint64_t)&v379 - v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  v478 = (char *)AssociatedTypeWitness;
  uint64_t v12 = swift_getAssociatedConformanceWitness();
  uint64_t v13 = type metadata accessor for PhoneWallpaperView();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v473 = AssociatedConformanceWitness;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = swift_getAssociatedConformanceWitness();
  uint64_t v17 = type metadata accessor for WatchFacesView();
  uint64_t v18 = type metadata accessor for Optional();
  swift_getTupleTypeMetadata2();
  uint64_t v19 = type metadata accessor for TupleView();
  uint64_t v394 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v20);
  v393 = (char *)&v379 - v21;
  uint64_t v22 = type metadata accessor for Optional();
  uint64_t v24 = __chkstk_darwin(v22 - 8, v23);
  v382 = (char *)&v379 - v25;
  uint64_t v392 = v17;
  uint64_t v389 = *(void *)(v17 - 8);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v383 = (uint64_t)&v379 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v27, v29);
  v384 = (char *)&v379 - v31;
  uint64_t v420 = v18;
  uint64_t v390 = *(void *)(v18 - 8);
  uint64_t v33 = __chkstk_darwin(v30, v32);
  v391 = (char *)&v379 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33, v35);
  uint64_t v419 = (uint64_t)&v379 - v36;
  uint64_t v37 = type metadata accessor for Optional();
  uint64_t v39 = __chkstk_darwin(v37 - 8, v38);
  v379 = (char *)&v379 - v40;
  uint64_t v399 = v13;
  uint64_t v385 = *(void *)(v13 - 8);
  uint64_t v42 = __chkstk_darwin(v39, v41);
  uint64_t v380 = (uint64_t)&v379 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = __chkstk_darwin(v42, v44);
  v381 = (char *)&v379 - v46;
  uint64_t v421 = v14;
  uint64_t v417 = *(void *)(v14 - 8);
  uint64_t v48 = __chkstk_darwin(v45, v47);
  v418 = (char *)&v379 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v48, v50);
  uint64_t v438 = (uint64_t)&v379 - v51;
  uint64_t v395 = v12;
  uint64_t v396 = v11;
  uint64_t v517 = v11;
  uint64_t v518 = v15;
  uint64_t v397 = v16;
  uint64_t v398 = v15;
  uint64_t v519 = v12;
  uint64_t v520 = v16;
  uint64_t v52 = type metadata accessor for PhoneWallpapersWatchFacesView();
  uint64_t v388 = *(void *)(v52 - 8);
  uint64_t v53 = __chkstk_darwin(v52, v52);
  uint64_t v387 = (uint64_t)&v379 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v53, v55);
  v386 = (char *)&v379 - v56;
  uint64_t v469 = v57;
  uint64_t v471 = v19;
  uint64_t v58 = type metadata accessor for _ConditionalContent();
  uint64_t v449 = *(void *)(v58 - 8);
  __chkstk_darwin(v58, v58);
  v422 = (char *)&v379 - v59;
  uint64_t v476 = v60;
  uint64_t v450 = type metadata accessor for Optional();
  uint64_t v470 = *(void *)(v450 - 8);
  uint64_t v62 = __chkstk_darwin(v450, v61);
  v483 = (char *)&v379 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v62, v64);
  uint64_t v468 = (uint64_t)&v379 - v65;
  uint64_t v410 = type metadata accessor for _TaskModifier();
  __chkstk_darwin(v410, v66);
  v414 = (char *)&v379 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v415 = type metadata accessor for TaskPriority();
  uint64_t v413 = *(void *)(v415 - 8);
  __chkstk_darwin(v415, v68);
  v412 = (char *)&v379 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v442 = sub_10000570C(&qword_1001A8980);
  uint64_t v71 = __chkstk_darwin(v442, v70);
  v411 = (char *)&v379 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v71, v73);
  uint64_t v416 = (uint64_t)&v379 - v74;
  uint64_t v440 = sub_10000570C(&qword_1001A8988);
  __chkstk_darwin(v440, v75);
  uint64_t v441 = (uint64_t)&v379 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v403 = *(void *)(v77 - 8);
  uint64_t v404 = v77;
  __chkstk_darwin(v77, v78);
  v401 = (char *)&v379 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v406 = type metadata accessor for SetlistView(0);
  __chkstk_darwin(v406, v80);
  v400 = (char **)((char *)&v379 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v82 = sub_10000570C(&qword_1001A8990);
  uint64_t v407 = *(void *)(v82 - 8);
  uint64_t v408 = v82;
  __chkstk_darwin(v82, v83);
  v405 = (char *)&v379 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v439 = sub_10000570C(&qword_1001A8998);
  uint64_t v86 = __chkstk_darwin(v439, v85);
  v402 = (char *)&v379 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v86, v88);
  uint64_t v409 = (uint64_t)&v379 - v89;
  uint64_t v448 = sub_10000570C(&qword_1001A8868);
  uint64_t v91 = __chkstk_darwin(v448, v90);
  uint64_t v475 = (uint64_t)&v379 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v91, v93);
  uint64_t v482 = (uint64_t)&v379 - v94;
  uint64_t v95 = swift_getAssociatedTypeWitness();
  uint64_t v96 = type metadata accessor for Optional();
  __chkstk_darwin(v96, v96);
  v432 = (char *)&v379 - v97;
  uint64_t v98 = type metadata accessor for Binding();
  __chkstk_darwin(v98 - 8, v99);
  v431 = (char *)&v379 - v100;
  uint64_t v101 = v486;
  uint64_t v102 = v485;
  type metadata accessor for PromotionalAssetsViewModel();
  uint64_t v103 = type metadata accessor for Bindable();
  uint64_t v427 = *(void *)(v103 - 8);
  uint64_t v428 = v103;
  __chkstk_darwin(v103, v104);
  v426 = (char *)&v379 - v105;
  uint64_t v106 = swift_getAssociatedConformanceWitness();
  uint64_t v434 = v95;
  uint64_t v425 = v106;
  uint64_t v107 = type metadata accessor for FeaturedVideosView();
  uint64_t v430 = *(void *)(v107 - 8);
  __chkstk_darwin(v107, v108);
  uint64_t v429 = (uint64_t)&v379 - v109;
  sub_100004A58(&qword_1001A8858);
  uint64_t v467 = v107;
  uint64_t v110 = type metadata accessor for ModifiedContent();
  uint64_t v437 = *(void *)(v110 - 8);
  __chkstk_darwin(v110, v111);
  uint64_t v433 = (uint64_t)&v379 - v112;
  sub_100004A58(&qword_1001A8860);
  uint64_t v466 = v110;
  uint64_t v113 = type metadata accessor for ModifiedContent();
  uint64_t v444 = *(void *)(v113 - 8);
  uint64_t v114 = __chkstk_darwin(v113, v113);
  v435 = (char *)&v379 - ((v115 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v114, v116);
  v436 = (char *)&v379 - v117;
  uint64_t v465 = v118;
  uint64_t v481 = type metadata accessor for Optional();
  uint64_t v462 = *(void *)(v481 - 8);
  uint64_t v120 = __chkstk_darwin(v481, v119);
  v480 = (char *)&v379 - ((v121 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v120, v122);
  v479 = (char *)&v379 - v123;
  uint64_t v124 = v102;
  uint64_t v488 = type metadata accessor for PromotionalAssetsView();
  uint64_t v484 = *(void *)(v488 - 8);
  uint64_t v458 = *(void *)(v484 + 64);
  __chkstk_darwin(v488, v125);
  v477 = (char *)&v379 - v126;
  v455 = (void (*)(char *, uint64_t))type metadata accessor for CoordinateSpace();
  uint64_t v474 = *((void *)v455 - 1);
  __chkstk_darwin(v455, v127);
  uint64_t v454 = (uint64_t)&v379 - ((v128 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for TourPhotosView();
  type metadata accessor for _ConditionalContent();
  uint64_t v129 = type metadata accessor for Group();
  uint64_t v473 = *(void *)(v129 - 8);
  __chkstk_darwin(v129, v130);
  uint64_t v132 = (char *)&v379 - v131;
  sub_100004A58(&qword_1001A8848);
  uint64_t v133 = type metadata accessor for ModifiedContent();
  uint64_t v447 = *(void *)(v133 - 8);
  __chkstk_darwin(v133, v134);
  uint64_t v136 = (char *)&v379 - v135;
  v446 = (char *)&v379 - v135;
  sub_100004A58(&qword_1001A8850);
  uint64_t v464 = type metadata accessor for ModifiedContent();
  uint64_t v461 = *(void *)(v464 - 8);
  uint64_t v138 = __chkstk_darwin(v464, v137);
  v463 = (char *)&v379 - ((v139 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = __chkstk_darwin(v138, v140);
  uint64_t v443 = (uint64_t)&v379 - v142;
  __chkstk_darwin(v141, v143);
  v478 = (char *)&v379 - v144;
  v489 = v101;
  v490 = v124;
  uint64_t v145 = v487;
  uint64_t v491 = v487;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v147 = sub_10009E368();
  uint64_t v533 = WitnessTable;
  unint64_t v534 = v147;
  uint64_t v148 = swift_getWitnessTable();
  Group<A>.init(content:)();
  uint64_t v532 = v148;
  uint64_t v149 = swift_getWitnessTable();
  sub_10009E3BC();
  uint64_t v150 = v454;
  sub_100125564(v454);
  sub_1000B0F88((uint64_t)&type metadata for TourPhotosViewSizePreferenceKey, v150, (uint64_t)sub_100074E78, 0, v129, v149, (uint64_t)v136);
  uint64_t v151 = *(void (**)(uint64_t, void *))(v474 + 8);
  v474 += 8;
  v424 = v151;
  v151(v150, v455);
  (*(void (**)(char *, uint64_t))(v473 + 8))(v132, v129);
  uint64_t v152 = v484;
  uint64_t v153 = *(void (**)(char *, uint64_t, uint64_t))(v484 + 16);
  uint64_t v154 = v477;
  uint64_t v155 = v488;
  uint64_t v460 = v484 + 16;
  v459 = v153;
  v153(v477, v145, v488);
  uint64_t v156 = *(unsigned __int8 *)(v152 + 80);
  uint64_t v157 = (v156 + 32) & ~v156;
  uint64_t v158 = v156 | 7;
  uint64_t v473 = v157 + v458;
  uint64_t v159 = swift_allocObject();
  uint64_t v160 = v485;
  *(void *)(v159 + 16) = v486;
  *(void *)(v159 + 24) = v160;
  uint64_t v458 = v157;
  uint64_t v161 = *(void (**)(uint64_t, char *, uint64_t))(v152 + 32);
  uint64_t v484 = v152 + 32;
  v456 = v161;
  v161(v159 + v157, v154, v155);
  uint64_t v162 = sub_10000A780(&qword_1001A89B0, &qword_1001A8848);
  uint64_t v530 = v149;
  uint64_t v531 = v162;
  uint64_t v163 = swift_getWitnessTable();
  uint64_t v164 = sub_10009E848(&qword_1001A7BE8, type metadata accessor for CGSize);
  uint64_t v165 = v443;
  uint64_t v166 = v155;
  uint64_t v423 = v164;
  uint64_t v167 = v446;
  View.onPreferenceChange<A>(_:perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v447 + 8))(v167, v133);
  uint64_t v168 = sub_10000A780(&qword_1001A89B8, &qword_1001A8850);
  uint64_t v528 = v163;
  uint64_t v529 = v168;
  uint64_t v169 = v487;
  uint64_t v170 = v464;
  uint64_t v171 = swift_getWitnessTable();
  sub_1001221F0(v165, v170);
  uint64_t v172 = v461 + 8;
  uint64_t v173 = *(void (**)(uint64_t, uint64_t))(v461 + 8);
  v173(v165, v170);
  sub_100094D9C();
  LOBYTE(v165) = sub_1000EFB64();
  swift_release();
  uint64_t v457 = v158;
  uint64_t v447 = v172;
  v446 = (char *)v173;
  uint64_t v445 = v171;
  if (v165)
  {
    uint64_t v174 = v434;
    type metadata accessor for FeaturedVideosViewModel();
    sub_100094D9C();
    uint64_t v175 = sub_1000EEDE8();
    uint64_t v177 = v176;
    swift_release();
    sub_100094D9C();
    uint64_t v178 = sub_1000EFC84();
    swift_release();
    sub_100094D9C();
    BOOL v179 = sub_1000EFEF0();
    swift_release();
    sub_10004B38C(v175, v177, v178, v179);
    uint64_t v180 = v426;
    uint64_t v181 = sub_100094DDC();
    __chkstk_darwin(v181, v182);
    uint64_t v183 = v485;
    *(&v379 - 2) = v486;
    *(&v379 - 1) = v183;
    swift_getKeyPath();
    uint64_t v184 = (uint64_t)v431;
    uint64_t v185 = v428;
    Bindable<A>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v427 + 8))(v180, v185);
    uint64_t v186 = (uint64_t)v432;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v174 - 8) + 56))(v432, 1, 1, v174);
    uint64_t v187 = v429;
    sub_1000E78E8(v184, v186, v429);
    uint64_t v188 = v467;
    uint64_t v189 = swift_getWitnessTable();
    sub_10009EB60();
    uint64_t v190 = v454;
    sub_100125564(v454);
    uint64_t v191 = v433;
    sub_1000B0F88((uint64_t)&type metadata for FeaturedVideosViewSizePreferenceKey, v190, (uint64_t)sub_10009FF94, 0, v188, v189, v433);
    v424(v190, v455);
    (*(void (**)(uint64_t, uint64_t))(v430 + 8))(v187, v188);
    uint64_t v192 = v477;
    v459(v477, v487, v488);
    uint64_t v193 = swift_allocObject();
    *(void *)(v193 + 16) = v486;
    *(void *)(v193 + 24) = v183;
    v456(v193 + v458, v192, v488);
    uint64_t v194 = sub_10000A780(&qword_1001A89C0, &qword_1001A8858);
    uint64_t v494 = v189;
    uint64_t v495 = v194;
    uint64_t v195 = v466;
    uint64_t v196 = swift_getWitnessTable();
    uint64_t v197 = v435;
    View.onPreferenceChange<A>(_:perform:)();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v437 + 8))(v191, v195);
    uint64_t v198 = sub_10000A780(&qword_1001A89C8, &qword_1001A8860);
    uint64_t v492 = v196;
    uint64_t v199 = v487;
    uint64_t v493 = v198;
    uint64_t v166 = v488;
    uint64_t v200 = v465;
    swift_getWitnessTable();
    uint64_t v201 = v436;
    sub_1001221F0(v197, v200);
    uint64_t v202 = v444;
    uint64_t v203 = *(void (**)(char *, uint64_t))(v444 + 8);
    uint64_t v204 = v197;
    uint64_t v205 = v199;
    v203(v204, v200);
    uint64_t v206 = v480;
    sub_1001221F0(v201, v200);
    v203(v201, v200);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v202 + 56))(v206, 0, 1, v200);
    uint64_t v207 = v485;
    uint64_t v208 = (uint64_t)v206;
  }
  else
  {
    uint64_t v209 = v480;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v444 + 56))(v480, 1, 1, v465);
    uint64_t v210 = swift_getWitnessTable();
    uint64_t v211 = sub_10000A780(&qword_1001A89C0, &qword_1001A8858);
    uint64_t v526 = v210;
    uint64_t v527 = v211;
    uint64_t v212 = swift_getWitnessTable();
    uint64_t v213 = sub_10000A780(&qword_1001A89C8, &qword_1001A8860);
    uint64_t v524 = v212;
    uint64_t v525 = v213;
    swift_getWitnessTable();
    uint64_t v207 = v485;
    uint64_t v208 = (uint64_t)v209;
    uint64_t v205 = v169;
  }
  sub_100123138(v208, (uint64_t)v479);
  uint64_t v214 = v462 + 8;
  uint64_t v215 = *(void (**)(uint64_t, uint64_t))(v462 + 8);
  v215(v208, v481);
  sub_100094D9C();
  BOOL v216 = sub_1000F00A8();
  swift_release();
  uint64_t v217 = v476;
  uint64_t v474 = v214;
  v455 = (void (*)(char *, uint64_t))v215;
  if (v216)
  {
    sub_100094D9C();
    sub_1000F01A8((uint64_t)&v513);
    swift_release();
    if (v515)
    {
      sub_100017350(&v513, (uint64_t)&v517);
      uint64_t v218 = type metadata accessor for SetlistViewModel();
      sub_100094D9C();
      uint64_t v219 = sub_1000EEDE8();
      uint64_t v221 = v220;
      swift_release();
      sub_10000AD3C((uint64_t)&v517, (uint64_t)&v513);
      sub_100094D9C();
      char v222 = sub_1000F0274();
      swift_release();
      uint64_t v223 = v515;
      uint64_t v224 = v516;
      uint64_t v225 = sub_100007534((uint64_t)&v513, v515);
      uint64_t v226 = sub_10001723C(v219, v221, v225, v222 & 1, v218, v223, v224);
      sub_100007584((uint64_t)&v513);
      uint64_t v508 = v226;
      State.init(wrappedValue:)();
      uint64_t v227 = *((void *)&v513 + 1);
      uint64_t v228 = v400;
      void *v400 = v513;
      v228[1] = v227;
      type metadata accessor for RemoteViewConfiguration();
      sub_10009E848((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
      v228[2] = EnvironmentObject.init()();
      v228[3] = v229;
      uint64_t v230 = v406;
      uint64_t v231 = (void *)((char *)v228 + *(int *)(v406 + 24));
      *uint64_t v231 = swift_getKeyPath();
      sub_10000570C(&qword_1001A5470);
      swift_storeEnumTagMultiPayload();
      uint64_t v232 = v401;
      static AccessibilityChildBehavior.contain.getter();
      uint64_t v233 = sub_10009E848(&qword_1001A89F0, (void (*)(uint64_t))type metadata accessor for SetlistView);
      uint64_t v234 = v405;
      View.accessibilityElement(children:)();
      (*(void (**)(char *, uint64_t))(v403 + 8))(v232, v404);
      sub_10009EAA0((uint64_t)v228, type metadata accessor for SetlistView);
      if (qword_1001A4F30 != -1) {
        swift_once();
      }
      *(void *)&long long v513 = v230;
      *((void *)&v513 + 1) = v233;
      swift_getOpaqueTypeConformance2();
      uint64_t v235 = (uint64_t)v402;
      uint64_t v236 = v408;
      View.accessibilityIdentifier(_:)();
      (*(void (**)(char *, uint64_t))(v407 + 8))(v234, v236);
      uint64_t v237 = v409;
      sub_10000A3C4(v235, v409, &qword_1001A8998);
      sub_10000A428(v237, v441, &qword_1001A8998);
      swift_storeEnumTagMultiPayload();
      sub_10009E63C();
      sub_10009E748();
      uint64_t v238 = v475;
      _ConditionalContent<>.init(storage:)();
      sub_10000ACE0(v237, &qword_1001A8998);
      sub_100007584((uint64_t)&v517);
      uint64_t v239 = sub_10000570C(&qword_1001A89D0);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v239 - 8) + 56))(v238, 0, 1, v239);
      sub_10000A3C4(v238, v482, &qword_1001A8868);
      uint64_t v240 = (uint64_t)v483;
      uint64_t v166 = v488;
      uint64_t v217 = v476;
      goto LABEL_15;
    }
    sub_10000ACE0((uint64_t)&v513, &qword_1001A7008);
  }
  sub_100094D9C();
  if (!*(void *)(v205 + *(int *)(v166 + 40)))
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10009E848((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
    return result;
  }
  swift_retain();
  char v241 = sub_1000F02C4();
  swift_release();
  swift_release();
  if (v241)
  {
    sub_100094D9C();
    LODWORD(v454) = sub_1000F03E4();
    swift_release();
    uint64_t v242 = v477;
    uint64_t v243 = v166;
    uint64_t v244 = v459;
    v459(v477, v487, v243);
    uint64_t v245 = swift_allocObject();
    *(void *)(v245 + 16) = v486;
    *(void *)(v245 + 24) = v207;
    uint64_t v246 = v458;
    uint64_t v247 = v217;
    uint64_t v248 = v456;
    v456(v245 + v458, v242, v488);
    v244(v242, v487, v488);
    uint64_t v249 = v248;
    uint64_t v217 = v247;
    uint64_t v250 = swift_allocObject();
    unint64_t v251 = v485;
    *(void *)(v250 + 16) = v486;
    *(void *)(v250 + 24) = v251;
    v249(v250 + v246, v242, v488);
    uint64_t v252 = v412;
    static TaskPriority.userInitiated.getter();
    uint64_t v254 = v413;
    uint64_t v253 = v414;
    uint64_t v255 = v415;
    (*(void (**)(char *, char *, uint64_t))(v413 + 16))(&v414[*(int *)(v410 + 20)], v252, v415);
    *uint64_t v253 = &unk_1001A8A18;
    v253[1] = v250;
    uint64_t v256 = (uint64_t)v411;
    sub_10009EA30((uint64_t)v253, (uint64_t)&v411[*(int *)(v442 + 36)], (uint64_t (*)(void))&type metadata accessor for _TaskModifier);
    *(unsigned char *)uint64_t v256 = v454 & 1;
    *(void *)(v256 + 8) = sub_10009E894;
    *(void *)(v256 + 16) = v245;
    swift_retain();
    sub_10009EAA0((uint64_t)v253, (uint64_t (*)(void))&type metadata accessor for _TaskModifier);
    long long v257 = v252;
    uint64_t v207 = v485;
    (*(void (**)(char *, uint64_t))(v254 + 8))(v257, v255);
    swift_release();
    uint64_t v258 = v416;
    sub_10000A3C4(v256, v416, &qword_1001A8980);
    sub_10000A428(v258, v441, &qword_1001A8980);
    swift_storeEnumTagMultiPayload();
    sub_10009E63C();
    sub_10009E748();
    uint64_t v259 = v475;
    _ConditionalContent<>.init(storage:)();
    uint64_t v260 = v258;
    uint64_t v166 = v488;
    sub_10000ACE0(v260, &qword_1001A8980);
    uint64_t v261 = sub_10000570C(&qword_1001A89D0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v261 - 8) + 56))(v259, 0, 1, v261);
    sub_10000A3C4(v259, v482, &qword_1001A8868);
  }
  else
  {
    uint64_t v262 = sub_10000570C(&qword_1001A89D0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v262 - 8) + 56))(v482, 1, 1, v262);
  }
  uint64_t v240 = (uint64_t)v483;
LABEL_15:
  sub_100094D9C();
  id v263 = [self currentDevice];
  id v264 = [v263 userInterfaceIdiom];
  swift_release();

  if (v264)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v449 + 56))(v240, 1, 1, v217);
    uint64_t v265 = swift_getWitnessTable();
    uint64_t v266 = swift_getWitnessTable();
    uint64_t v522 = v265;
    uint64_t v523 = v266;
    swift_getWitnessTable();
    sub_100123138(v240, v468);
    uint64_t v267 = *(void (**)(uint64_t, uint64_t))(v470 + 8);
    uint64_t v454 = (v470 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v268 = v450;
    v267(v240, v450);
    uint64_t v269 = v451;
    uint64_t v270 = v166;
    uint64_t v271 = v477;
    uint64_t v272 = v458;
    uint64_t v273 = v486;
    v459(v477, v487, v270);
  }
  else
  {
    sub_100094D9C();
    char v274 = sub_1000F06D0();
    swift_release();
    sub_100094D9C();
    if (v274)
    {
      uint64_t v454 = sub_1000EEDE8();
      uint64_t v444 = v275;
      swift_release();
      sub_100094D9C();
      uint64_t v276 = sub_1000EF390();
      uint64_t v443 = v277;
      swift_release();
      type metadata accessor for PhoneWallpaperViewModel();
      sub_100094D9C();
      uint64_t v278 = sub_1000EEDE8();
      uint64_t v280 = v279;
      swift_release();
      sub_100094D9C();
      uint64_t v281 = sub_1000F0730();
      swift_release();
      sub_100094D9C();
      sub_1000F099C();
      double v283 = v282;
      swift_release();
      sub_100094D9C();
      double v284 = sub_1000EF608();
      swift_release();
      sub_100094D9C();
      BOOL v285 = sub_1000F0C0C();
      swift_release();
      sub_10014BD24(v278, v280, v281, v285, v283, v284);
      type metadata accessor for WatchFacesViewModel();
      sub_100094D9C();
      uint64_t v286 = sub_1000EEDE8();
      uint64_t v288 = v287;
      swift_release();
      sub_100094D9C();
      uint64_t v289 = sub_1000F0C2C();
      swift_release();
      sub_100094D9C();
      sub_1000F099C();
      double v291 = v290;
      swift_release();
      sub_100094D9C();
      double v292 = sub_1000EF608();
      swift_release();
      sub_100094D9C();
      BOOL v293 = sub_1000F0C0C();
      swift_release();
      sub_100045C34(v286, v288, v289, v293, v291, v292);
      uint64_t v294 = v387;
      uint64_t v295 = (uint64_t)v483;
      sub_1000FEF1C(v454, v444, v276, v443, v387);
      uint64_t v296 = v469;
      swift_getWitnessTable();
      uint64_t v297 = v386;
      sub_1001221F0(v294, v296);
      uint64_t v298 = *(void (**)(uint64_t, uint64_t))(v388 + 8);
      v298(v294, v296);
      sub_1001221F0(v297, v296);
      swift_getWitnessTable();
      uint64_t v299 = v422;
      sub_10012222C(v294, v296);
      v298(v294, v296);
      v298((uint64_t)v297, v296);
    }
    else
    {
      char v300 = sub_1000F0E98();
      swift_release();
      if (v300)
      {
        uint64_t v301 = v396;
        type metadata accessor for PhoneWallpaperViewModel();
        sub_100094D9C();
        uint64_t v302 = sub_1000EEDE8();
        uint64_t v304 = v303;
        swift_release();
        sub_100094D9C();
        uint64_t v305 = sub_1000F0730();
        swift_release();
        sub_100094D9C();
        sub_1000F099C();
        double v307 = v306;
        swift_release();
        sub_100094D9C();
        double v308 = sub_1000EF608();
        swift_release();
        sub_100094D9C();
        BOOL v309 = sub_1000F0C0C();
        swift_release();
        sub_10014BD24(v302, v304, v305, v309, v307, v308);
        uint64_t v310 = (uint64_t)v379;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v301 - 8) + 56))(v379, 1, 1, v301);
        uint64_t v311 = v380;
        sub_10013FCA8(v310, v380);
        uint64_t v312 = v399;
        swift_getWitnessTable();
        v313 = v381;
        sub_1001221F0(v311, v312);
        uint64_t v314 = v385;
        v315 = *(void (**)(uint64_t, uint64_t))(v385 + 8);
        v315(v311, v312);
        uint64_t v316 = (uint64_t)v418;
        sub_1001221F0(v313, v312);
        v315((uint64_t)v313, v312);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v314 + 56))(v316, 0, 1, v312);
      }
      else
      {
        uint64_t v316 = (uint64_t)v418;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v385 + 56))(v418, 1, 1, v399);
        swift_getWitnessTable();
      }
      uint64_t v317 = v390;
      sub_100123138(v316, v438);
      uint64_t v454 = *(void *)(v417 + 8);
      uint64_t v444 = v417 + 8;
      ((void (*)(uint64_t, uint64_t))v454)(v316, v421);
      sub_100094D9C();
      char v318 = sub_1000F1124();
      swift_release();
      if (v318)
      {
        uint64_t v319 = v398;
        uint64_t v443 = type metadata accessor for WatchFacesViewModel();
        sub_100094D9C();
        uint64_t v320 = sub_1000EEDE8();
        uint64_t v322 = v321;
        swift_release();
        sub_100094D9C();
        uint64_t v323 = sub_1000F0C2C();
        swift_release();
        sub_100094D9C();
        sub_1000F099C();
        double v325 = v324;
        swift_release();
        sub_100094D9C();
        double v326 = sub_1000EF608();
        swift_release();
        sub_100094D9C();
        BOOL v327 = sub_1000F0C0C();
        swift_release();
        sub_100045C34(v320, v322, v323, v327, v325, v326);
        uint64_t v328 = (uint64_t)v382;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v319 - 8) + 56))(v382, 1, 1, v319);
        uint64_t v329 = v383;
        sub_10002B480(v328, v383);
        uint64_t v330 = v392;
        swift_getWitnessTable();
        v331 = v384;
        sub_1001221F0(v329, v330);
        uint64_t v332 = v389;
        v333 = *(void (**)(uint64_t, uint64_t))(v389 + 8);
        v333(v329, v330);
        uint64_t v334 = (uint64_t)v391;
        sub_1001221F0(v331, v330);
        v333((uint64_t)v331, v330);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v332 + 56))(v334, 0, 1, v330);
        uint64_t v335 = v419;
        uint64_t v336 = v334;
        sub_100123138(v334, v419);
        v337 = *(void (**)(uint64_t, uint64_t))(v317 + 8);
        uint64_t v443 = (v317 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        uint64_t v338 = v334;
      }
      else
      {
        uint64_t v336 = (uint64_t)v391;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v389 + 56))(v391, 1, 1, v392);
        swift_getWitnessTable();
        uint64_t v335 = v419;
        sub_100123138(v336, v419);
        v337 = *(void (**)(uint64_t, uint64_t))(v317 + 8);
        uint64_t v443 = (v317 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        uint64_t v338 = v336;
      }
      uint64_t v339 = v420;
      v337(v338, v420);
      uint64_t v442 = (uint64_t)v337;
      v340 = v418;
      uint64_t v341 = v421;
      (*(void (**)(char *, uint64_t, uint64_t))(v417 + 16))(v418, v438, v421);
      uint64_t v517 = (uint64_t)v340;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v317 + 16))(v336, v335, v339);
      uint64_t v518 = v336;
      *(void *)&long long v513 = v341;
      *((void *)&v513 + 1) = v339;
      uint64_t v499 = swift_getWitnessTable();
      uint64_t v508 = swift_getWitnessTable();
      uint64_t v498 = swift_getWitnessTable();
      uint64_t v509 = swift_getWitnessTable();
      uint64_t v342 = (uint64_t)v393;
      sub_1001231A4((uint64_t)&v517, 2uLL, (uint64_t)&v513);
      v337(v336, v339);
      v343 = (void (*)(uint64_t, uint64_t))v454;
      ((void (*)(char *, uint64_t))v454)(v340, v341);
      uint64_t v344 = v469;
      swift_getWitnessTable();
      uint64_t v345 = v471;
      swift_getWitnessTable();
      v346 = v422;
      sub_100122324(v342, v344, v345);
      (*(void (**)(uint64_t, uint64_t))(v394 + 8))(v342, v345);
      ((void (*)(uint64_t, uint64_t))v442)(v419, v420);
      uint64_t v299 = v346;
      v343(v438, v341);
      uint64_t v295 = (uint64_t)v483;
    }
    uint64_t v347 = v470;
    uint64_t v348 = swift_getWitnessTable();
    uint64_t v349 = swift_getWitnessTable();
    uint64_t v496 = v348;
    uint64_t v497 = v349;
    uint64_t v350 = v476;
    swift_getWitnessTable();
    sub_1001221F0(v299, v350);
    uint64_t v351 = v449;
    (*(void (**)(char *, uint64_t))(v449 + 8))(v299, v350);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v351 + 56))(v295, 0, 1, v350);
    sub_100123138(v295, v468);
    v352 = *(void (**)(uint64_t, uint64_t))(v347 + 8);
    uint64_t v454 = (v347 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v268 = v450;
    v352(v295, v450);
    uint64_t v269 = v451;
    uint64_t v207 = v485;
    uint64_t v273 = v486;
    uint64_t v270 = v488;
    uint64_t v271 = v477;
    uint64_t v272 = v458;
    v459(v477, v487, v488);
  }
  uint64_t v353 = swift_allocObject();
  *(void *)(v353 + 16) = v273;
  *(void *)(v353 + 24) = v207;
  v456(v353 + v272, v271, v270);
  v354 = v472;
  *v472 = sub_10009E4C0;
  v354[1] = (uint64_t (*)())v353;
  *((unsigned char *)v354 + 16) = 0;
  type metadata accessor for RemoteViewConfiguration();
  sub_10009E848((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  v354[3] = (uint64_t (*)())EnvironmentObject.init()();
  v354[4] = v355;
  v356 = (uint64_t *)((char *)v354 + *(int *)(v269 + 24));
  uint64_t *v356 = swift_getKeyPath();
  sub_10000570C(&qword_1001A55D8);
  swift_storeEnumTagMultiPayload();
  uint64_t v357 = v452;
  sub_10001A0AC((uint64_t)v354, v452);
  v358 = v463;
  uint64_t v359 = v464;
  (*(void (**)(char *, char *))(v461 + 16))(v463, v478);
  uint64_t v517 = (uint64_t)v358;
  v360 = v480;
  uint64_t v361 = v481;
  (*(void (**)(char *, char *))(v462 + 16))(v480, v479);
  uint64_t v518 = (uint64_t)v360;
  uint64_t v362 = v475;
  sub_10000A428(v482, v475, &qword_1001A8868);
  uint64_t v519 = v362;
  uint64_t v363 = v470 + 16;
  v364 = v483;
  uint64_t v365 = v468;
  (*(void (**)(char *, uint64_t, uint64_t))(v470 + 16))(v483, v468, v268);
  uint64_t v520 = (uint64_t)v364;
  sub_10009EA30(v357, (uint64_t)v354, (uint64_t (*)(void))type metadata accessor for AppModule);
  v521 = v354;
  *(void *)&long long v513 = v359;
  *((void *)&v513 + 1) = v361;
  uint64_t v514 = v448;
  uint64_t v515 = v268;
  uint64_t v516 = v269;
  uint64_t v508 = v445;
  uint64_t v366 = swift_getWitnessTable();
  uint64_t v367 = sub_10000A780(&qword_1001A89C0, &qword_1001A8858);
  uint64_t v506 = v366;
  uint64_t v507 = v367;
  uint64_t v368 = v268;
  uint64_t v369 = swift_getWitnessTable();
  uint64_t v370 = sub_10000A780(&qword_1001A89C8, &qword_1001A8860);
  uint64_t v504 = v369;
  uint64_t v505 = v370;
  uint64_t v503 = swift_getWitnessTable();
  uint64_t v509 = swift_getWitnessTable();
  unint64_t v510 = sub_10009E54C();
  uint64_t v371 = swift_getWitnessTable();
  uint64_t v372 = swift_getWitnessTable();
  uint64_t v501 = v371;
  uint64_t v502 = v372;
  uint64_t v500 = swift_getWitnessTable();
  uint64_t v511 = swift_getWitnessTable();
  uint64_t v512 = sub_10009E848(&qword_1001A8A08, (void (*)(uint64_t))type metadata accessor for AppModule);
  sub_1001231A4((uint64_t)&v517, 5uLL, (uint64_t)&v513);
  sub_10009EAA0(v357, (uint64_t (*)(void))type metadata accessor for AppModule);
  v373 = *(void (**)(uint64_t, uint64_t))(v363 - 8);
  v373(v365, v368);
  sub_10000ACE0(v482, &qword_1001A8868);
  v374 = v455;
  v455(v479, v361);
  uint64_t v375 = v359;
  uint64_t v376 = v359;
  v377 = (uint64_t (*)(char *, uint64_t))v446;
  ((void (*)(char *, uint64_t))v446)(v478, v376);
  sub_10009EAA0((uint64_t)v472, (uint64_t (*)(void))type metadata accessor for AppModule);
  v373((uint64_t)v483, v368);
  sub_10000ACE0(v475, &qword_1001A8868);
  v374(v480, v481);
  return v377(v463, v375);
}

uint64_t sub_10009B0DC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v62 = a3;
  type metadata accessor for PromotionalAssetsViewModel();
  uint64_t v5 = type metadata accessor for Bindable();
  uint64_t v57 = *(void *)(v5 - 8);
  uint64_t v58 = v5;
  uint64_t v7 = __chkstk_darwin(v5, v6);
  uint64_t v56 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  uint64_t v53 = (uint64_t)&v49 - v10;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = type metadata accessor for TourPhotosView();
  uint64_t v52 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v55 = (uint64_t)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  uint64_t v54 = (char *)&v49 - v16;
  uint64_t v17 = type metadata accessor for _ConditionalContent();
  uint64_t v60 = *(void *)(v17 - 8);
  uint64_t v61 = v17;
  __chkstk_darwin(v17, v18);
  uint64_t v59 = (char *)&v49 - v19;
  type metadata accessor for PromotionalAssetsView();
  sub_100094D9C();
  BOOL v20 = sub_1000EEC80();
  swift_release();
  if (v20)
  {
    type metadata accessor for TourPhotosViewModel();
    sub_100094D9C();
    uint64_t v51 = sub_1000EEDE8();
    uint64_t v50 = v21;
    swift_release();
    sub_100094D9C();
    uint64_t v49 = sub_1000EEF78();
    swift_release();
    sub_100094D9C();
    uint64_t v22 = sub_1000EF390();
    uint64_t v24 = v23;
    swift_release();
    sub_100094D9C();
    double v25 = sub_1000EF608();
    swift_release();
    sub_100094D9C();
    sub_1000EF690();
    double v27 = v26;
    swift_release();
    sub_100094D9C();
    char v28 = sub_1000EF8F0();
    swift_release();
    uint64_t v51 = sub_1001134B0(v51, v50, v49, v22, v24, v28 & 1, v25, v27);
    uint64_t v29 = v53;
    uint64_t v30 = sub_100094DDC();
    __chkstk_darwin(v30, v31);
    *(&v49 - 2) = a1;
    *(&v49 - 1) = a2;
    swift_getKeyPath();
    uint64_t v32 = v58;
    Bindable<A>.subscript.getter();
    swift_release();
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
    v33(v29, v32);
    uint64_t v57 = v66;
    uint64_t v53 = v67;
    uint64_t v50 = v68;
    LODWORD(v49) = v69;
    uint64_t v34 = v56;
    uint64_t v35 = sub_100094DDC();
    __chkstk_darwin(v35, v36);
    *(&v49 - 2) = a1;
    *(&v49 - 1) = a2;
    swift_getKeyPath();
    Bindable<A>.subscript.getter();
    swift_release();
    v33((uint64_t)v34, v32);
    uint64_t v37 = v55;
    sub_1000D4620(v57, v53, v50, v49, v63, v64, v55, v65);
    swift_getWitnessTable();
    uint64_t v38 = v54;
    sub_1001221F0(v37, v11);
    uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
    v39(v37, v11);
    sub_1001221F0(v38, v11);
    sub_10009E368();
    uint64_t v40 = v59;
    sub_10012222C(v37, v11);
    v39(v37, v11);
    v39((uint64_t)v38, v11);
  }
  else
  {
    sub_100094D9C();
    uint64_t v41 = sub_1000EF390();
    uint64_t v43 = v42;
    swift_release();
    sub_100094D9C();
    char v44 = sub_1000EF8F0();
    swift_release();
    uint64_t v66 = v41;
    uint64_t v67 = v43;
    LOBYTE(v68) = v44 & 1;
    swift_getWitnessTable();
    sub_10009E368();
    uint64_t v40 = v59;
    sub_100122324((uint64_t)&v66, v11, (uint64_t)&type metadata for TourPhotosDefaultView);
    swift_bridgeObjectRelease();
  }
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v46 = sub_10009E368();
  uint64_t v70 = WitnessTable;
  unint64_t v71 = v46;
  uint64_t v47 = v61;
  swift_getWitnessTable();
  sub_1001221F0(v40, v47);
  return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v40, v47);
}

uint64_t sub_10009B87C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_1000EF958();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10009B8B0()
{
  return sub_1000EF9E8();
}

void sub_10009B8E4(double *a1@<X8>)
{
  *a1 = sub_1000EFA9C();
}

uint64_t sub_10009B910()
{
  return sub_1000EFB24();
}

uint64_t sub_10009B938@<X0>(uint64_t a1@<X8>)
{
  return sub_1000EFF2C(a1);
}

uint64_t sub_10009B95C()
{
  return sub_1000F303C();
}

uint64_t sub_10009B980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(double))
{
  double v6 = *(double *)(a1 + 8);
  type metadata accessor for PromotionalAssetsView();
  sub_100094D9C();
  a5(v6);

  return swift_release();
}

uint64_t sub_10009B9E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PromotionalAssetsView();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = sub_10000570C(&qword_1001A95D0);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  type metadata accessor for MainActor();
  uint64_t v16 = static MainActor.shared.getter();
  unint64_t v17 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = (char *)swift_allocObject();
  *((void *)v18 + 2) = v16;
  *((void *)v18 + 3) = &protocol witness table for MainActor;
  *((void *)v18 + 4) = a2;
  *((void *)v18 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v18[v17], v10, v6);
  sub_10013AF58((uint64_t)v14, (uint64_t)&unk_1001A8A30, (uint64_t)v18);
  return swift_release();
}

uint64_t sub_10009BBDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  type metadata accessor for MainActor();
  v6[5] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[6] = v8;
  v6[7] = v7;
  return _swift_task_switch(sub_10009BC78, v8, v7);
}

uint64_t sub_10009BC78()
{
  type metadata accessor for PromotionalAssetsView();
  *(void *)(v0 + 64) = sub_100094D9C();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10009BD20;
  return sub_1000F0484();
}

uint64_t sub_10009BD20()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 56);
  uint64_t v3 = *(void *)(v1 + 48);
  return _swift_task_switch(sub_10009FF98, v3, v2);
}

uint64_t sub_10009BE64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  _OWORD v3[2] = a1;
  type metadata accessor for MainActor();
  v3[5] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[6] = v5;
  v3[7] = v4;
  return _swift_task_switch(sub_10009BF00, v5, v4);
}

uint64_t sub_10009BF00()
{
  type metadata accessor for PromotionalAssetsView();
  *(void *)(v0 + 64) = sub_100094D9C();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10009BFA8;
  return sub_1000F0484();
}

uint64_t sub_10009BFA8()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 56);
  uint64_t v3 = *(void *)(v1 + 48);
  return _swift_task_switch(sub_10009C0EC, v3, v2);
}

uint64_t sub_10009C0EC()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10009C14C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  __chkstk_darwin(v2 - 8, v3);
  double v26 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = __chkstk_darwin(AssociatedTypeWitness, v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v26 - v12;
  uint64_t v14 = type metadata accessor for PromotionalAssetsView();
  sub_100094D9C();
  sub_1000F13B0();
  swift_release();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 152))(AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v17 = v16;
  uint64_t v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v19 = v13;
  uint64_t v20 = (uint64_t)v26;
  v18(v19, AssociatedTypeWitness);
  sub_100094D9C();
  sub_1000F13B0();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 176))(AssociatedTypeWitness, AssociatedConformanceWitness);
  v18(v10, AssociatedTypeWitness);
  sub_100094D9C();
  if (*(void *)(a1 + *(int *)(v14 + 40)))
  {
    uint64_t v21 = swift_retain();
    uint64_t v22 = sub_1000F3224(v21);
    uint64_t v24 = v23;
    swift_release();
    swift_release();
    type metadata accessor for AppViewModel();
    swift_allocObject();
    return sub_10000632C(v27, v17, v20, v22, v24, 1);
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10009E848((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10009C458()
{
  return swift_release();
}

uint64_t sub_10009C4CC(uint64_t a1)
{
  sub_100094D9C();
  sub_1000F1844();
  swift_release();
  sub_100094D9C();
  int v3 = sub_1000F1864();
  uint64_t result = swift_release();
  uint64_t v5 = *(void *)(v1 + *(int *)(a1 + 36) + 8);
  if (v3 != *(unsigned __int8 *)(v5 + 16))
  {
    sub_10000570C(&qword_1001A5448);
    sub_10000A780(&qword_1001A5450, &qword_1001A5448);
    ObservableObject<>.objectWillChange.getter();
    ObservableObjectPublisher.send()();
    uint64_t result = swift_release();
  }
  *(unsigned char *)(v5 + 16) = v3;
  return result;
}

double sub_10009C5B0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for PromotionalAssetsView();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)&v21 - v12;
  if (*(unsigned char *)(*(void *)(a1 + *(int *)(v11 + 36) + 8) + 16)) {
    char v14 = 2;
  }
  else {
    char v14 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v13, a1, v8);
  unint64_t v15 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v16 + v15, v13, v8);
  static Font.title.getter();
  static Font.Weight.medium.getter();
  uint64_t v17 = Font.weight(_:)();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  char v19 = static Edge.Set.horizontal.getter();
  *(unsigned char *)a4 = 2;
  *(unsigned char *)(a4 + 1) = v14;
  *(void *)(a4 + 8) = sub_10009E2E4;
  *(void *)(a4 + 16) = v16;
  *(void *)(a4 + 24) = KeyPath;
  *(void *)(a4 + 32) = v17;
  *(unsigned char *)(a4 + 40) = v19;
  double result = 0.0;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(unsigned char *)(a4 + 80) = 1;
  return result;
}

uint64_t sub_10009C764(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PromotionalAssetsView();
  sub_100094D9C();
  sub_1000F1428();
  swift_release();
  sub_100094D9C();
  uint64_t v3 = sub_1000EEDE8();
  uint64_t v5 = v4;
  swift_release();
  uint64_t v6 = *(void *)(a1 + *(int *)(v2 + 40));
  if (v6)
  {
    swift_retain();
    sub_100116F94(v3, v5, 8, 0, 1, 0, 3u, v6);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10009E848((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10009C890@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PromotionalAssetsView();
  sub_100094D9C();
  uint64_t v5 = sub_1000EF390();
  uint64_t v7 = v6;
  swift_release();
  if (v7)
  {
    v29[0] = v5;
    v29[1] = v7;
    sub_100010B2C();
    uint64_t v8 = Text.init<A>(_:)();
    uint64_t v10 = v9;
    char v12 = v11 & 1;
    static Font.Weight.semibold.getter();
    uint64_t v13 = Text.fontWeight(_:)();
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    uint64_t v25 = a2;
    char v19 = v18 & 1;
    sub_10000FCC4(v8, v10, v12);
    swift_bridgeObjectRelease();
    uint64_t v20 = static Alignment.center.getter();
    sub_100123F48(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v26, 0.0, 1, 0.0, 1, v20, v21, v13, v15, v19, v17);
    char v22 = v19;
    a2 = v25;
    sub_10000FCC4(v13, v15, v22);
    swift_bridgeObjectRelease();
    double v23 = 0.0;
    if (*(unsigned char *)(*(void *)(a1 + *(int *)(v4 + 36) + 8) + 16)) {
      double v23 = 1.0;
    }
    v27[6] = v26[6];
    v27[7] = v26[7];
    void v27[8] = v26[8];
    _DWORD v27[2] = v26[2];
    v27[3] = v26[3];
    void v27[4] = v26[4];
    void v27[5] = v26[5];
    v27[0] = v26[0];
    v27[1] = v26[1];
    double v28 = v23;
    nullsub_1(v27);
  }
  else
  {
    sub_10009E2C0((uint64_t)v27);
  }
  sub_10000A3C4((uint64_t)v27, (uint64_t)v29, &qword_1001A8930);
  return sub_10000A3C4((uint64_t)v29, a2, &qword_1001A8930);
}

double sub_10009CA7C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for PromotionalAssetsView();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)&v21 - v12;
  if (*(unsigned char *)(*(void *)(a1 + *(int *)(v11 + 36) + 8) + 16)) {
    char v14 = 2;
  }
  else {
    char v14 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v13, a1, v8);
  unint64_t v15 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v16 + v15, v13, v8);
  static Font.title.getter();
  static Font.Weight.medium.getter();
  uint64_t v17 = Font.weight(_:)();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  char v19 = static Edge.Set.horizontal.getter();
  *(unsigned char *)a4 = 1;
  *(unsigned char *)(a4 + 1) = v14;
  *(void *)(a4 + 8) = sub_10009E2A0;
  *(void *)(a4 + 16) = v16;
  *(void *)(a4 + 24) = KeyPath;
  *(void *)(a4 + 32) = v17;
  *(unsigned char *)(a4 + 40) = v19;
  double result = 0.0;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(unsigned char *)(a4 + 80) = 1;
  return result;
}

uint64_t sub_10009CC2C()
{
  uint64_t v0 = type metadata accessor for DismissAction();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PromotionalAssetsView();
  sub_10002652C((uint64_t)v4);
  DismissAction.callAsFunction()();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_10009CD20()
{
  uint64_t v0 = sub_10000570C(&qword_1001A5478);
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PromotionalAssetsView();
  sub_100094D9C();
  sub_1000F1430();
  swift_release();
  sub_100094D9C();
  sub_1000F1450();
  swift_release();
  sub_100094D9C();
  sub_100026824((uint64_t)v3);
  sub_1000F1470((uint64_t)v3);
  return swift_release();
}

uint64_t sub_10009CE38()
{
  type metadata accessor for PromotionalAssetsView();
  sub_100094D9C();
  sub_1000F1528();

  return swift_release();
}

uint64_t sub_10009CEB0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1000F15F4();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10009CEE0()
{
  return sub_1000F167C();
}

uint64_t sub_10009CF08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v31 = a4;
  uint64_t v32 = a1;
  uint64_t v26 = type metadata accessor for PromotionalAssetsView();
  uint64_t v6 = *(void *)(v26 - 8);
  uint64_t v30 = *(void *)(v6 + 64);
  __chkstk_darwin(v26, v7);
  uint64_t v29 = (char *)&v26 - v8;
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v11);
  uint64_t v13 = (char *)&v26 - v12;
  sub_10000570C(&qword_1001A8918);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_100153180;
  sub_100094D9C();
  sub_1000F13B0();
  swift_release();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 176);
  *(void *)(v14 + 56) = type metadata accessor for URL();
  sub_10000A7C4((uint64_t *)(v14 + 32));
  v16(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
  uint64_t v17 = v29;
  uint64_t v18 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v29, v32, v26);
  unint64_t v19 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = v28;
  *(void *)(v20 + 16) = v27;
  *(void *)(v20 + 24) = v21;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v20 + v19, v17, v18);
  uint64_t v22 = static SafeAreaRegions.all.getter();
  char v23 = static Edge.Set.all.getter();
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v33 = v14;
  uint64_t v36 = sub_10009DE3C;
  uint64_t v37 = v20;
  uint64_t v38 = v22;
  char v39 = v23;
  sub_10000570C(&qword_1001A8920);
  type metadata accessor for PresentationDetent();
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_100152B80;
  static PresentationDetent.medium.getter();
  static PresentationDetent.large.getter();
  sub_10007F83C(v24);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_10000570C(&qword_1001A88D8);
  sub_10009E018(&qword_1001A88E0, &qword_1001A88D8, (void (*)(void))sub_100058590);
  View.presentationDetents(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_10009D314(uint64_t a1, char a2)
{
  if (a2)
  {
    type metadata accessor for PromotionalAssetsView();
    sub_100094D9C();
    sub_1000F1728();
    swift_release();
  }
}

uint64_t sub_10009D36C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PromotionalAssetsView();
  sub_100094D9C();
  uint64_t v3 = sub_1000EEDE8();
  uint64_t v5 = v4;
  swift_release();
  uint64_t v6 = *(void *)(a1 + *(int *)(v2 + 40));
  if (v6)
  {
    swift_retain();
    sub_100116C94(v3, v5, 8, v6);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10009E848((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10009D46C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PromotionalAssetsView();
  sub_100094D9C();
  uint64_t v3 = sub_1000EEDE8();
  uint64_t v5 = v4;
  swift_release();
  uint64_t v6 = *(void *)(a1 + *(int *)(v2 + 40));
  if (v6)
  {
    swift_retain();
    sub_100116F94(v3, v5, 8, 0, 2, 0, 3u, v6);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10009E848((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10009D57C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  _OWORD v3[2] = a1;
  type metadata accessor for MainActor();
  v3[5] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[6] = v5;
  v3[7] = v4;
  return _swift_task_switch(sub_10009D618, v5, v4);
}

uint64_t sub_10009D618()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = type metadata accessor for PromotionalAssetsView();
  sub_100094D9C();
  if (*(void *)(v1 + *(int *)(v2 + 40)))
  {
    swift_retain();
    char v3 = sub_1000F02C4();
    swift_release();
    swift_release();
    if (v3)
    {
      v0[8] = sub_100094D9C();
      uint64_t v4 = (void *)swift_task_alloc();
      v0[9] = v4;
      *uint64_t v4 = v0;
      v4[1] = sub_10009BFA8;
      return sub_1000F0484();
    }
    else
    {
      swift_release();
      uint64_t v6 = (uint64_t (*)(void))v0[1];
      return v6();
    }
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10009E848((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    return EnvironmentObject.error()();
  }
}

uint64_t sub_10009D7C8()
{
  type metadata accessor for PromotionalAssetsView();
  sub_100094D9C();
  sub_1000F1730();

  return swift_release();
}

void sub_10009D810()
{
  type metadata accessor for PromotionalAssetsView();
  sub_100094D9C();
  if (qword_1001A4E98 != -1) {
    swift_once();
  }
  sub_10000AD3C(qword_1001B7548 + 16, (uint64_t)v1);
  sub_10000570C(&qword_1001A8910);
  type metadata accessor for MusicPreviewPlayer(0);
  if (swift_dynamicCast())
  {
    sub_1000FC418();
    swift_release();
  }
  else
  {
    swift_release();
  }
}

uint64_t sub_10009D8E0()
{
  return sub_10009D8F8();
}

uint64_t sub_10009D8F8()
{
  static Animation.default.getter();
  withAnimation<A>(_:_:)();

  return swift_release();
}

unint64_t sub_10009D964()
{
  unint64_t result = qword_1001A88E8;
  if (!qword_1001A88E8)
  {
    sub_100004A58(&qword_1001A5478);
    sub_10009E848((unint64_t *)&qword_1001A6040, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A88E8);
  }
  return result;
}

uint64_t sub_10009DA08@<X0>(uint64_t a1@<X8>)
{
  return sub_100096BC4(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_10009DA14()
{
  unint64_t result = qword_1001A88F0;
  if (!qword_1001A88F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A88F0);
  }
  return result;
}

uint64_t sub_10009DA6C()
{
  type metadata accessor for PromotionalAssetsView();

  return sub_10009CD20();
}

unint64_t sub_10009DAF8()
{
  unint64_t result = qword_1001A88F8;
  if (!qword_1001A88F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001A88F8);
  }
  return result;
}

uint64_t sub_10009DB50()
{
  type metadata accessor for PromotionalAssetsView();

  return sub_10009CE38();
}

uint64_t sub_10009DBDC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1000F15F4();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10009DC0C()
{
  return sub_1000F167C();
}

uint64_t sub_10009DC34()
{
  return 16;
}

__n128 sub_10009DC40(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10009DC50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(type metadata accessor for PromotionalAssetsView() - 8);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_10009CF08(v6, v3, v4, a1);
}

uint64_t sub_10009DCE0()
{
  return sub_10009E8AC((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10009D36C);
}

uint64_t sub_10009DCFC()
{
  return sub_10009E8AC((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10009D46C);
}

uint64_t sub_10009DD18()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(type metadata accessor for PromotionalAssetsView() - 8);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = sub_10003E098;
  return sub_10009D57C(v5, v2, v3);
}

uint64_t sub_10009DE04()
{
  return sub_10009E8AC((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10009D7C8);
}

uint64_t sub_10009DE20()
{
  return sub_10009E8AC((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10009D810);
}

void sub_10009DE3C(uint64_t a1, char a2)
{
  type metadata accessor for PromotionalAssetsView();

  sub_10009D314(a1, a2);
}

uint64_t sub_10009DEF0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000977CC(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10009DF00()
{
  type metadata accessor for PromotionalAssetsView();

  return sub_10009C458();
}

void sub_10009DF98(unsigned char *a1@<X8>)
{
  sub_100132394(*(void *)(v1 + 40), a1);
}

uint64_t sub_10009DFA8()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

unsigned __int8 *sub_10009DFE8(unsigned __int8 *a1)
{
  return sub_1001323A0(a1, v1[2], v1[3], v1[4], v1[5]);
}

double sub_10009DFF4@<D0>(uint64_t a1@<X8>)
{
  return sub_10009C5B0(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10009E000@<X0>(uint64_t a1@<X8>)
{
  return sub_10009C890(*(void *)(v1 + 32), a1);
}

double sub_10009E00C@<D0>(uint64_t a1@<X8>)
{
  return sub_10009CA7C(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10009E018(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10009E094()
{
  unint64_t result = qword_1001A8940;
  if (!qword_1001A8940)
  {
    sub_100004A58(&qword_1001A8948);
    sub_10009E134();
    sub_10000A780(&qword_1001A6280, &qword_1001A6288);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8940);
  }
  return result;
}

unint64_t sub_10009E134()
{
  unint64_t result = qword_1001A8950;
  if (!qword_1001A8950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8950);
  }
  return result;
}

unint64_t sub_10009E188()
{
  unint64_t result = qword_1001A8958;
  if (!qword_1001A8958)
  {
    sub_100004A58(&qword_1001A8930);
    sub_10009E018((unint64_t *)&qword_1001A8960, &qword_1001A8968, (void (*)(void))sub_10009E228);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8958);
  }
  return result;
}

unint64_t sub_10009E228()
{
  unint64_t result = qword_1001A8970;
  if (!qword_1001A8970)
  {
    sub_100004A58(&qword_1001A8978);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8970);
  }
  return result;
}

uint64_t sub_10009E2A0()
{
  return sub_10009E8AC((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10009CC2C);
}

double sub_10009E2C0(uint64_t a1)
{
  *(void *)(a1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_10009E2E4()
{
  return sub_10009E8AC((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10009C764);
}

uint64_t sub_10009E2FC()
{
  uint64_t v0 = type metadata accessor for PromotionalAssetsView();
  return sub_10009C4CC(v0);
}

uint64_t sub_10009E350@<X0>(uint64_t a1@<X8>)
{
  return sub_100097CD0(*(void *)(v1 + 32), *(char **)(v1 + 16), *(char **)(v1 + 24), a1);
}

uint64_t sub_10009E35C@<X0>(uint64_t a1@<X8>)
{
  return sub_10009B0DC(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

unint64_t sub_10009E368()
{
  unint64_t result = qword_1001A89A0;
  if (!qword_1001A89A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A89A0);
  }
  return result;
}

unint64_t sub_10009E3BC()
{
  unint64_t result = qword_1001A89A8;
  if (!qword_1001A89A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A89A8);
  }
  return result;
}

uint64_t sub_10009E414(uint64_t a1)
{
  return sub_10009E42C(a1, (void (*)(double))sub_1000EFB44);
}

uint64_t sub_10009E42C(uint64_t a1, void (*a2)(double))
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for PromotionalAssetsView() - 8);
  return sub_10009B980(a1, v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v5, v6, a2);
}

uint64_t sub_10009E4C0()
{
  uint64_t v1 = *(void *)(type metadata accessor for PromotionalAssetsView() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_10009C14C(v2);
}

unint64_t sub_10009E54C()
{
  unint64_t result = qword_1001A89D8;
  if (!qword_1001A89D8)
  {
    sub_100004A58(&qword_1001A8868);
    sub_10009E5C0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A89D8);
  }
  return result;
}

unint64_t sub_10009E5C0()
{
  unint64_t result = qword_1001A89E0;
  if (!qword_1001A89E0)
  {
    sub_100004A58(&qword_1001A89D0);
    sub_10009E63C();
    sub_10009E748();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A89E0);
  }
  return result;
}

unint64_t sub_10009E63C()
{
  unint64_t result = qword_1001A89E8;
  if (!qword_1001A89E8)
  {
    sub_100004A58(&qword_1001A8998);
    type metadata accessor for SetlistView(255);
    sub_10009E848(&qword_1001A89F0, (void (*)(uint64_t))type metadata accessor for SetlistView);
    swift_getOpaqueTypeConformance2();
    sub_10009E848((unint64_t *)&qword_1001A68E8, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A89E8);
  }
  return result;
}

unint64_t sub_10009E748()
{
  unint64_t result = qword_1001A89F8;
  if (!qword_1001A89F8)
  {
    sub_100004A58(&qword_1001A8980);
    sub_10009E7F4();
    sub_10009E848(&qword_1001A5430, (void (*)(uint64_t))&type metadata accessor for _TaskModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A89F8);
  }
  return result;
}

unint64_t sub_10009E7F4()
{
  unint64_t result = qword_1001A8A00;
  if (!qword_1001A8A00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8A00);
  }
  return result;
}

uint64_t sub_10009E848(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10009E894()
{
  return sub_10009E8AC(sub_10009B9E8);
}

uint64_t sub_10009E8AC(uint64_t (*a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(type metadata accessor for PromotionalAssetsView() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a1(v5, v2, v3);
}

uint64_t sub_10009E948()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(type metadata accessor for PromotionalAssetsView() - 8);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = sub_100009854;
  return sub_10009BE64(v5, v2, v3);
}

uint64_t sub_10009EA30(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10009EAA0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10009EB00@<X0>(uint64_t a1@<X8>)
{
  return sub_1000EFF2C(a1);
}

uint64_t sub_10009EB24()
{
  return sub_1000F303C();
}

uint64_t sub_10009EB48()
{
  return 16;
}

__n128 sub_10009EB54(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

unint64_t sub_10009EB60()
{
  unint64_t result = qword_1001A8A20;
  if (!qword_1001A8A20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001A8A20);
  }
  return result;
}

uint64_t sub_10009EBB8()
{
  uint64_t v1 = (int *)type metadata accessor for PromotionalAssetsView();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80));
  type metadata accessor for PromotionalAssetsViewModel();
  uint64_t v3 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_release();
  swift_release();
  uint64_t v4 = v2 + v1[11];
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = v2 + v1[12];
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = v2 + v1[13];
  sub_10000570C(&qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v10 = *(void *)(v9 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v11 = v2 + v1[14];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v13 = *(void *)(v12 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    }
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_10009EF2C(uint64_t a1)
{
  return sub_10009E42C(a1, (void (*)(double))sub_1000F0088);
}

uint64_t sub_10009EF44()
{
  uint64_t v1 = (int *)type metadata accessor for PromotionalAssetsView();
  unint64_t v2 = (*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  swift_unknownObjectRelease();
  uint64_t v3 = v0 + v2;
  type metadata accessor for PromotionalAssetsViewModel();
  uint64_t v4 = type metadata accessor for Bindable();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v0 + v2, v4);
  swift_release();
  swift_release();
  unint64_t v5 = v0 + v2 + v1[11];
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for DismissAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  uint64_t v7 = v3 + v1[12];
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  uint64_t v9 = v3 + v1[13];
  sub_10000570C(&qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v11 = *(void *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v12 = v3 + v1[14];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v14 = *(void *)(v13 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    }
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_10009F2C0(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = *(void *)(type metadata accessor for PromotionalAssetsView() - 8);
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = (uint64_t)v1 + ((*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_10003E098;
  return sub_10009BBDC(a1, v7, v8, v9, v4, v5);
}

uint64_t sub_10009F3C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_1000EF958();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10009F3FC()
{
  return sub_1000EF9E8();
}

uint64_t sub_10009F430()
{
  return 16;
}

__n128 sub_10009F43C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_10009F448(double *a1@<X8>)
{
  *a1 = sub_1000EFA9C();
}

uint64_t sub_10009F474()
{
  return sub_1000EFB24();
}

uint64_t sub_10009F49C()
{
  return 16;
}

__n128 sub_10009F4A8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

ValueMetadata *type metadata accessor for PromotionalAssetsViewSafeAreaPreferenceKey()
{
  return &type metadata for PromotionalAssetsViewSafeAreaPreferenceKey;
}

ValueMetadata *type metadata accessor for PromotionalAssetsViewSizePreferenceKey()
{
  return &type metadata for PromotionalAssetsViewSizePreferenceKey;
}

ValueMetadata *type metadata accessor for FeaturedVideosViewSizePreferenceKey()
{
  return &type metadata for FeaturedVideosViewSizePreferenceKey;
}

ValueMetadata *type metadata accessor for TourPhotosViewSizePreferenceKey()
{
  return &type metadata for TourPhotosViewSizePreferenceKey;
}

uint64_t sub_10009F4F4()
{
  return swift_getWitnessTable();
}

unint64_t sub_10009FEF4(uint64_t a1)
{
  unint64_t result = sub_10009E3BC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10009FF1C(uint64_t a1)
{
  unint64_t result = sub_10009EB60();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10009FF44(uint64_t a1)
{
  unint64_t result = sub_10009DA14();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10009FF6C(uint64_t a1)
{
  unint64_t result = sub_10009DAF8();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10009FF9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v44 = a1;
  uint64_t v53 = type metadata accessor for Calendar();
  uint64_t v56 = *(void *)(v53 - 8);
  __chkstk_darwin(v53, v2);
  uint64_t v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for TimeZone();
  uint64_t v57 = *(void *)(v55 - 8);
  uint64_t v6 = __chkstk_darwin(v55, v5);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v40 - v10;
  uint64_t v12 = type metadata accessor for DateInterval();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for Date();
  uint64_t v54 = *(void *)(v51 - 8);
  uint64_t v18 = __chkstk_darwin(v51, v17);
  uint64_t v50 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v18, v20);
  char v23 = (char *)&v40 - v22;
  __chkstk_darwin(v21, v24);
  uint64_t v49 = (char *)&v40 - v25;
  sub_10000570C(&qword_1001A8A90);
  Event.Time.dateInterval.getter();
  DateInterval.start.getter();
  uint64_t v26 = *(void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v46 = v13 + 8;
  uint64_t v47 = v12;
  uint64_t v45 = v26;
  v26(v16, v12);
  uint64_t v48 = v1;
  Event.Time.timeZone.getter();
  uint64_t v52 = v11;
  uint64_t v27 = TimeZone.secondsFromGMT(for:)();
  static Calendar.current.getter();
  Calendar.timeZone.getter();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v56 + 8);
  uint64_t v29 = v4;
  v56 += 8;
  v28(v4, v53);
  uint64_t v30 = TimeZone.secondsFromGMT(for:)();
  uint64_t v31 = *(uint64_t (**)(char *, uint64_t))(v57 + 8);
  v57 += 8;
  uint64_t result = v31(v8, v55);
  if (__OFSUB__(v27, v30))
  {
    __break(1u);
  }
  else
  {
    Date.addingTimeInterval(_:)();
    uint64_t v33 = v54;
    uint64_t v34 = v55;
    uint64_t v42 = v28;
    v31(v52, v55);
    uint64_t v35 = *(void (**)(char *, uint64_t))(v33 + 8);
    uint64_t v54 = v33 + 8;
    uint64_t v41 = v35;
    v35(v23, v51);
    Event.Time.dateInterval.getter();
    uint64_t v43 = v31;
    DateInterval.end.getter();
    v45(v16, v47);
    Event.Time.timeZone.getter();
    uint64_t v36 = TimeZone.secondsFromGMT(for:)();
    static Calendar.current.getter();
    Calendar.timeZone.getter();
    v42(v29, v53);
    uint64_t v37 = v43;
    uint64_t v38 = TimeZone.secondsFromGMT(for:)();
    uint64_t result = v37(v8, v34);
    if (!__OFSUB__(v36, v38))
    {
      char v39 = v50;
      Date.addingTimeInterval(_:)();
      v37(v52, v55);
      v41(v39, v51);
      return DateInterval.init(start:end:)();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A0490(uint64_t a1, uint64_t a2)
{
  uint64_t v173 = a2;
  uint64_t v171 = a1;
  uint64_t v144 = sub_10000570C(&qword_1001A8A88);
  uint64_t v4 = __chkstk_darwin(v144, v3);
  uint64_t v143 = (uint64_t)&v136 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v6);
  uint64_t v142 = (char *)&v136 - v7;
  uint64_t v8 = sub_10000570C(&qword_1001A5CD0);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v170 = (char *)&v136 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DateInterval();
  uint64_t v163 = *(void *)(v11 - 8);
  uint64_t v164 = v11;
  __chkstk_darwin(v11, v12);
  uint64_t v162 = (uint64_t)&v136 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000570C(&qword_1001A8A90);
  uint64_t v165 = *(void *)(v14 - 8);
  uint64_t v166 = v14;
  __chkstk_darwin(v14, v15);
  uint64_t v161 = (char *)&v136 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000570C(&qword_1001A5490);
  uint64_t v148 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17, v18);
  uint64_t v21 = (char *)&v136 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v19, v22);
  uint64_t v138 = (char *)&v136 - v24;
  __chkstk_darwin(v23, v25);
  uint64_t v137 = (char *)&v136 - v26;
  uint64_t v27 = sub_10000570C(&qword_1001A80F8);
  uint64_t v29 = __chkstk_darwin(v27 - 8, v28);
  uint64_t v139 = (char *)&v136 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29, v31);
  uint64_t v167 = (char *)&v136 - v32;
  uint64_t v168 = type metadata accessor for Date();
  uint64_t v172 = *(void *)(v168 - 8);
  uint64_t v34 = __chkstk_darwin(v168, v33);
  uint64_t v141 = (char *)&v136 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __chkstk_darwin(v34, v36);
  uint64_t v140 = (char *)&v136 - v38;
  uint64_t v40 = __chkstk_darwin(v37, v39);
  uint64_t v169 = (char *)&v136 - v41;
  __chkstk_darwin(v40, v42);
  uint64_t v174 = (char *)&v136 - v43;
  uint64_t v44 = type metadata accessor for Locale();
  __chkstk_darwin(v44 - 8, v45);
  uint64_t v160 = (char *)&v136 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v47 - 8, v48);
  uint64_t v159 = (char *)&v136 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = sub_10000570C(&qword_1001A57D0);
  uint64_t v157 = *(void *)(v158 - 8);
  __chkstk_darwin(v158, v50);
  uint64_t v156 = (char *)&v136 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = sub_10000570C(&qword_1001A7D60);
  uint64_t v154 = *(void *)(v155 - 8);
  __chkstk_darwin(v155, v52);
  uint64_t v153 = (char *)&v136 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = sub_10000570C(&qword_1001A6388);
  uint64_t v151 = *(void *)(v152 - 8);
  __chkstk_darwin(v152, v54);
  uint64_t v150 = (char *)&v136 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = sub_10000570C(&qword_1001A5760);
  uint64_t v57 = __chkstk_darwin(v149, v56);
  uint64_t v59 = (char *)&v136 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v57, v60);
  uint64_t v62 = (char *)&v136 - v61;
  uint64_t v63 = sub_10000570C(&qword_1001A57C8);
  uint64_t v146 = v63;
  uint64_t v64 = *(void *)(v63 - 8);
  __chkstk_darwin(v63, v65);
  uint64_t v67 = (char *)&v136 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = &v2[*(void *)(*(void *)v2 + 128)];
  LOBYTE(v176[0]) = 0;
  Published.init(initialValue:)();
  unsigned __int8 v69 = *(void (**)(char *, char *, uint64_t))(v64 + 32);
  uint64_t v147 = v64 + 32;
  v69(v68, v67, v63);
  uint64_t v70 = v148;
  uint64_t v145 = &v2[*(void *)(*(void *)v2 + 136)];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v148 + 56))(v62, 1, 1, v17);
  sub_10000A428((uint64_t)v62, (uint64_t)v59, &qword_1001A5760);
  unint64_t v71 = v150;
  Published.init(initialValue:)();
  sub_10000ACE0((uint64_t)v62, &qword_1001A5760);
  (*(void (**)(char *, char *, uint64_t))(v151 + 32))(v145, v71, v152);
  uint64_t v72 = &v2[*(void *)(*(void *)v2 + 144)];
  v176[0] = 0;
  v176[1] = (void *)0xE000000000000000;
  uint64_t v73 = v153;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v154 + 32))(v72, v73, v155);
  uint64_t v74 = &v2[*(void *)(*(void *)v2 + 152)];
  LOBYTE(v176[0]) = 0;
  Published.init(initialValue:)();
  v69(v74, v67, v146);
  uint64_t v75 = &v2[*(void *)(*(void *)v2 + 160)];
  v176[0] = 0;
  uint64_t v76 = v156;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v157 + 32))(v75, v76, v158);
  uint64_t v77 = &v2[*(void *)(*(void *)v2 + 184)];
  *(void *)uint64_t v77 = LocalizedStringKey.init(stringLiteral:)();
  *((void *)v77 + 1) = v78;
  v77[16] = v79 & 1;
  *((void *)v77 + 3) = v80;
  uint64_t v81 = &v2[*(void *)(*(void *)v2 + 192)];
  *(void *)uint64_t v81 = LocalizedStringKey.init(stringLiteral:)();
  *((void *)v81 + 1) = v82;
  v81[16] = v83 & 1;
  *((void *)v81 + 3) = v84;
  uint64_t v85 = &v2[*(void *)(*(void *)v2 + 200)];
  *(void *)uint64_t v85 = LocalizedStringKey.init(stringLiteral:)();
  *((void *)v85 + 1) = v86;
  v85[16] = v87 & 1;
  *((void *)v85 + 3) = v88;
  uint64_t v89 = (uint64_t *)&v2[*(void *)(*(void *)v2 + 208)];
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  *uint64_t v89 = String.init(localized:table:bundle:locale:comment:)();
  v89[1] = v90;
  uint64_t v91 = &v2[*(void *)(*(void *)v2 + 112)];
  uint64_t v92 = type metadata accessor for Venue();
  uint64_t v158 = *(void *)(v92 - 8);
  uint64_t v93 = *(void (**)(char *, uint64_t))(v158 + 16);
  uint64_t v94 = v91;
  uint64_t v95 = v173;
  uint64_t v159 = (char *)v92;
  v93(v94, v171);
  *(void *)&v2[*(void *)(*(void *)v2 + 120)] = v95;
  uint64_t v160 = v2;
  swift_beginAccess();
  uint64_t v175 = v95;
  swift_bridgeObjectRetain_n();
  sub_10000570C(&qword_1001A6390);
  Published.init(initialValue:)();
  swift_endAccess();
  unint64_t v96 = *(void *)(v95 + 16);
  if (v96)
  {
    uint64_t v97 = v137;
    (*(void (**)(char *, unint64_t, uint64_t))(v70 + 16))(v137, v95 + ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80)), v17);
    uint64_t v98 = sub_10000A780((unint64_t *)&qword_1001A54A0, &qword_1001A5490);
    uint64_t v99 = v161;
    (*(void (**)(uint64_t, uint64_t))(v98 + 200))(v17, v98);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v97, v17);
    uint64_t v100 = v162;
    sub_10009FF9C(v162);
    (*(void (**)(char *, uint64_t))(v165 + 8))(v99, v166);
    uint64_t v101 = v167;
    DateInterval.start.getter();
    (*(void (**)(uint64_t, uint64_t))(v163 + 8))(v100, v164);
    uint64_t v102 = v172;
    uint64_t v103 = v168;
    uint64_t v157 = *(void *)(v172 + 56);
    ((void (*)(char *, void, uint64_t, uint64_t))v157)(v101, 0, 1, v168);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v102 + 48))(v101, 1, v103) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v102 + 32))(v174, v167, v103);
      goto LABEL_8;
    }
    uint64_t v104 = (uint64_t)v167;
  }
  else
  {
    uint64_t v104 = (uint64_t)v167;
    uint64_t v103 = v168;
    uint64_t v157 = *(void *)(v172 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v157)(v167, 1, 1, v168);
    uint64_t v99 = v161;
    uint64_t v100 = v162;
  }
  Date.init()();
  sub_10000ACE0(v104, &qword_1001A80F8);
  if (!v96)
  {
    uint64_t v105 = v172;
    uint64_t v106 = (uint64_t)v139;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v157)(v139, 1, 1, v103);
    uint64_t v107 = v173;
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v107 = v173;
  if (v96 <= *(void *)(v173 + 16))
  {
    uint64_t v167 = (char *)((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80));
    uint64_t v108 = v138;
    (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v138, &v167[v173 + *(void *)(v70 + 72) * (v96 - 1)], v17);
    uint64_t v109 = sub_10000A780((unint64_t *)&qword_1001A54A0, &qword_1001A5490);
    uint64_t v110 = v99;
    uint64_t v111 = v163;
    (*(void (**)(uint64_t, uint64_t))(v109 + 200))(v17, v109);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v108, v17);
    sub_10009FF9C(v100);
    (*(void (**)(char *, uint64_t))(v165 + 8))(v110, v166);
    uint64_t v106 = (uint64_t)v139;
    DateInterval.start.getter();
    (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v100, v164);
    uint64_t v105 = v172;
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v157)(v106, 0, 1, v103);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v105 + 48))(v106, 1, v103) != 1)
    {
      uint64_t v114 = (uint64_t)v169;
      (*(void (**)(char *, uint64_t, uint64_t))(v105 + 32))(v169, v106, v103);
      sub_10007EA60((uint64_t)v174, v114, v170);
      v176[0] = _swiftEmptyArrayStorage;
      unint64_t v113 = (unint64_t)v167;
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v112 = (uint64_t)v169;
    Date.init()();
    sub_10000ACE0(v106, &qword_1001A80F8);
    sub_10007EA60((uint64_t)v174, v112, v170);
    v176[0] = _swiftEmptyArrayStorage;
    if (!v96)
    {
      uint64_t v121 = _swiftEmptyArrayStorage;
LABEL_17:
      uint64_t v122 = v107;
      sub_10003457C((uint64_t)v121);
      swift_bridgeObjectRelease();
      uint64_t v123 = swift_bridgeObjectRetain();
      uint64_t v124 = sub_1001382F0(v123);
      swift_bridgeObjectRelease();
      v176[0] = v124;
      sub_1000A3188(v176);
      swift_bridgeObjectRelease();
      uint64_t v125 = v176[0];
      uint64_t v126 = *(void (**)(char *, uint64_t, uint64_t))(v105 + 16);
      v126(v140, (uint64_t)v174, v103);
      uint64_t v127 = v169;
      v126(v141, (uint64_t)v169, v103);
      uint64_t v128 = v103;
      uint64_t v129 = (int *)v144;
      uint64_t v130 = v105;
      uint64_t v131 = v142;
      DateInterval.init(start:end:)();
      *uint64_t v131 = 0;
      v131[1] = v122;
      v131[2] = _swiftEmptyArrayStorage;
      uint64_t v132 = v170;
      sub_10000A428((uint64_t)v170, (uint64_t)v131 + v129[12], &qword_1001A5CD0);
      *(void *)((char *)v131 + v129[13]) = v125;
      *(void *)((char *)v131 + v129[14]) = &_swiftEmptySetSingleton;
      uint64_t v133 = v160;
      swift_beginAccess();
      sub_10000A428((uint64_t)v131, v143, &qword_1001A8A88);
      Published.init(initialValue:)();
      sub_10000ACE0((uint64_t)v131, &qword_1001A8A88);
      swift_endAccess();
      (*(void (**)(uint64_t, char *))(v158 + 8))(v171, v159);
      sub_10000ACE0((uint64_t)v132, &qword_1001A5CD0);
      uint64_t v134 = *(void (**)(char *, uint64_t))(v130 + 8);
      v134(v127, v128);
      v134(v174, v128);
      return (uint64_t)v133;
    }
    unint64_t v113 = (*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
LABEL_13:
    uint64_t v115 = v107 + v113;
    uint64_t v118 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 16);
    uint64_t v117 = v70 + 16;
    uint64_t v116 = v118;
    uint64_t v119 = *(void *)(v117 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v116(v21, v115, v17);
      uint64_t v120 = Event<>.genres.getter();
      (*(void (**)(char *, uint64_t))(v117 - 8))(v21, v17);
      sub_1000A3388(v120);
      v115 += v119;
      --v96;
    }
    while (v96);
    uint64_t v107 = v173;
    swift_bridgeObjectRelease();
    uint64_t v121 = v176[0];
    uint64_t v103 = v168;
    uint64_t v105 = v172;
    goto LABEL_17;
  }
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1000A16D0()
{
  return sub_100004B98();
}

ValueMetadata *type metadata accessor for VenueEventContentView()
{
  return &type metadata for VenueEventContentView;
}

uint64_t sub_1000A1718()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000A1734@<X0>(uint64_t a1@<X8>)
{
  uint64_t v146 = a1;
  uint64_t v125 = type metadata accessor for TaskPriority();
  uint64_t v124 = *(void *)(v125 - 8);
  __chkstk_darwin(v125, v2);
  uint64_t v123 = (char *)&v108 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = sub_10000570C(&qword_1001A5728);
  uint64_t v120 = *(void *)(v122 - 8);
  __chkstk_darwin(v122, v4);
  uint64_t v119 = (char *)&v108 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = sub_10000570C(&qword_1001A5730);
  uint64_t v7 = __chkstk_darwin(v145, v6);
  uint64_t v118 = (char *)&v108 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  uint64_t v121 = (uint64_t)&v108 - v10;
  uint64_t v126 = type metadata accessor for ErrorView();
  uint64_t v12 = __chkstk_darwin(v126, v11);
  uint64_t v127 = (uint64_t *)((char *)&v108 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12, v14);
  uint64_t v129 = (uint64_t)&v108 - v15;
  uint64_t v137 = sub_10000570C(&qword_1001A5738);
  uint64_t v17 = __chkstk_darwin(v137, v16);
  uint64_t v128 = (uint64_t)&v108 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  uint64_t v130 = (uint64_t)&v108 - v20;
  uint64_t v142 = sub_10000570C(&qword_1001A8A38);
  __chkstk_darwin(v142, v21);
  uint64_t v144 = (uint64_t)&v108 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v133 = sub_10000570C(&qword_1001A8A40);
  __chkstk_darwin(v133, v23);
  uint64_t v135 = (uint64_t)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = sub_10000570C(&qword_1001A8A48);
  __chkstk_darwin(v143, v25);
  uint64_t v136 = (char *)&v108 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = sub_10000570C(&qword_1001A8A50);
  uint64_t v28 = __chkstk_darwin(v134, v27);
  uint64_t v116 = (uint64_t (**)())((char *)&v108 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v28, v30);
  uint64_t v117 = (uint64_t)&v108 - v31;
  uint64_t v32 = sub_10000570C(&qword_1001A6378);
  __chkstk_darwin(v32 - 8, v33);
  uint64_t v140 = (uint64_t)&v108 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = type metadata accessor for Venue();
  uint64_t v141 = *(void *)(v132 - 8);
  uint64_t v36 = __chkstk_darwin(v132, v35);
  uint64_t v115 = (char *)&v108 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = v37;
  __chkstk_darwin(v36, v38);
  uint64_t v131 = (char *)&v108 - v39;
  uint64_t v40 = sub_10000570C(&qword_1001A4FA8);
  __chkstk_darwin(v40 - 8, v41);
  uint64_t v43 = (char *)&v108 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_10000570C(&qword_1001A5140);
  uint64_t v45 = *(void *)(v44 - 8);
  uint64_t v47 = __chkstk_darwin(v44, v46);
  unint64_t v113 = (char *)&v108 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = v48;
  __chkstk_darwin(v47, v49);
  uint64_t v147 = (char *)&v108 - v50;
  uint64_t v51 = *(void *)(v1 + 16);
  uint64_t v138 = (_OWORD *)v1;
  type metadata accessor for VenueController();
  sub_1000A2F10(&qword_1001A8A58, (void (*)(uint64_t))type metadata accessor for VenueController);
  uint64_t v139 = v51;
  StateObject.wrappedValue.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v52 = v45;
  uint64_t v53 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
  uint64_t v54 = v44;
  if (v53(v43, 1, v44) == 1)
  {
    sub_10000ACE0((uint64_t)v43, &qword_1001A4FA8);
  }
  else
  {
    uint64_t v55 = *(void (**)(unint64_t, char *, uint64_t))(v52 + 32);
    uint64_t v111 = v52 + 32;
    uint64_t v110 = v55;
    v55((unint64_t)v147, v43, v44);
    StateObject.wrappedValue.getter();
    uint64_t v56 = v140;
    sub_100004068(v140);
    swift_release();
    uint64_t v57 = v132;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v141 + 48))(v56, 1, v132) != 1)
    {
      uint64_t v89 = v141;
      uint64_t v90 = *(void (**)(char *, uint64_t, uint64_t))(v141 + 32);
      uint64_t v91 = v131;
      v90(v131, v140, v57);
      uint64_t v92 = v115;
      uint64_t v93 = v57;
      (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v115, v91, v57);
      uint64_t v109 = v52;
      uint64_t v94 = v113;
      (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v113, v147, v54);
      unint64_t v95 = (*(unsigned __int8 *)(v89 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80);
      unint64_t v96 = (v114 + *(unsigned __int8 *)(v52 + 80) + v95) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
      uint64_t v97 = swift_allocObject();
      v90((char *)(v97 + v95), (uint64_t)v92, v57);
      v110(v97 + v96, v94, v54);
      uint64_t v98 = (uint64_t)v116;
      *uint64_t v116 = sub_1000A30B8;
      *(void *)(v98 + 8) = v97;
      *(unsigned char *)(v98 + 16) = 0;
      sub_10000570C(&qword_1001A5448);
      *(unsigned char *)(swift_allocObject() + 16) = 0;
      sub_10000A780(&qword_1001A5450, &qword_1001A5448);
      *(void *)(v98 + 24) = ObservedObject.init(wrappedValue:)();
      *(void *)(v98 + 32) = v99;
      *(unsigned char *)(v98 + 40) = FocusState.init<>()() & 1;
      *(void *)(v98 + 48) = v100;
      *(unsigned char *)(v98 + 56) = v101 & 1;
      uint64_t v102 = v134;
      uint64_t v103 = (uint64_t *)(v98 + *(int *)(v134 + 60));
      *uint64_t v103 = swift_getKeyPath();
      sub_10000570C(&qword_1001A5460);
      swift_storeEnumTagMultiPayload();
      uint64_t v104 = (uint64_t *)(v98 + *(int *)(v102 + 64));
      type metadata accessor for RemoteViewConfiguration();
      sub_1000A2F10((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
      uint64_t *v104 = EnvironmentObject.init()();
      v104[1] = v105;
      uint64_t v106 = v117;
      sub_10000A3C4(v98, v117, &qword_1001A8A50);
      sub_10000A428(v106, v135, &qword_1001A8A50);
      swift_storeEnumTagMultiPayload();
      sub_10000A780(&qword_1001A8A78, &qword_1001A8A50);
      sub_100012B50();
      uint64_t v107 = (uint64_t)v136;
      _ConditionalContent<>.init(storage:)();
      sub_10000A428(v107, v144, &qword_1001A8A48);
      swift_storeEnumTagMultiPayload();
      sub_1000A2E6C();
      sub_100012BFC();
      _ConditionalContent<>.init(storage:)();
      sub_10000ACE0(v107, &qword_1001A8A48);
      sub_10000ACE0(v106, &qword_1001A8A50);
      (*(void (**)(char *, uint64_t))(v141 + 8))(v131, v93);
      return (*(uint64_t (**)(char *, uint64_t))(v109 + 8))(v147, v54);
    }
    (*(void (**)(char *, uint64_t))(v52 + 8))(v147, v44);
    sub_10000ACE0(v140, &qword_1001A6378);
  }
  StateObject.wrappedValue.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v58 = v149;
  swift_errorRelease();
  if (v58)
  {
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v60 = (uint64_t)v127;
    *uint64_t v127 = KeyPath;
    sub_10000570C(&qword_1001A5460);
    swift_storeEnumTagMultiPayload();
    uint64_t v61 = (uint64_t *)(v60 + *(int *)(v126 + 20));
    type metadata accessor for RemoteViewConfiguration();
    sub_1000A2F10((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t *v61 = EnvironmentObject.init()();
    v61[1] = v62;
    uint64_t v63 = v129;
    sub_100012D14(v60, v129);
    uint64_t v64 = v138;
    long long v65 = *v138;
    long long v148 = *(_OWORD *)((char *)v138 + 40);
    long long v149 = v65;
    uint64_t v66 = swift_allocObject();
    long long v67 = v64[1];
    *(_OWORD *)(v66 + 16) = *v64;
    *(_OWORD *)(v66 + 32) = v67;
    *(_OWORD *)(v66 + 48) = v64[2];
    *(void *)(v66 + 64) = *((void *)v64 + 6);
    uint64_t v68 = v128;
    sub_100012DD0(v63, v128);
    unsigned __int8 v69 = (uint64_t (**)())(v68 + *(int *)(v137 + 36));
    char *v69 = sub_1000A2F5C;
    v69[1] = (uint64_t (*)())v66;
    v69[2] = 0;
    v69[3] = 0;
    sub_100012A58((uint64_t)&v149);
    sub_1000126FC();
    sub_100012A84((uint64_t)&v148);
    sub_100012E34(v63);
    uint64_t v70 = &qword_1001A5738;
    uint64_t v71 = v130;
    sub_10000A3C4(v68, v130, &qword_1001A5738);
    sub_10000A428(v71, v135, &qword_1001A5738);
    swift_storeEnumTagMultiPayload();
    sub_10000A780(&qword_1001A8A78, &qword_1001A8A50);
    sub_100012B50();
    uint64_t v72 = (uint64_t)v136;
    _ConditionalContent<>.init(storage:)();
    sub_10000A428(v72, v144, &qword_1001A8A48);
    swift_storeEnumTagMultiPayload();
    sub_1000A2E6C();
    sub_100012BFC();
    _ConditionalContent<>.init(storage:)();
    sub_10000ACE0(v72, &qword_1001A8A48);
    uint64_t v73 = v71;
  }
  else
  {
    uint64_t v74 = v119;
    ProgressView<>.init<>()();
    uint64_t v75 = v138;
    long long v76 = *v138;
    long long v148 = *(_OWORD *)((char *)v138 + 40);
    long long v149 = v76;
    uint64_t v77 = swift_allocObject();
    long long v78 = v75[1];
    *(_OWORD *)(v77 + 16) = *v75;
    *(_OWORD *)(v77 + 32) = v78;
    *(_OWORD *)(v77 + 48) = v75[2];
    *(void *)(v77 + 64) = *((void *)v75 + 6);
    sub_1000126FC();
    sub_100012A58((uint64_t)&v149);
    sub_100012A84((uint64_t)&v148);
    char v79 = v123;
    static TaskPriority.userInitiated.getter();
    uint64_t v80 = (uint64_t)v118;
    uint64_t v81 = &v118[*(int *)(v145 + 36)];
    uint64_t v82 = type metadata accessor for _TaskModifier();
    uint64_t v83 = v124;
    uint64_t v84 = v125;
    (*(void (**)(char *, char *, uint64_t))(v124 + 16))(&v81[*(int *)(v82 + 20)], v79, v125);
    *(void *)uint64_t v81 = &unk_1001A8A68;
    *((void *)v81 + 1) = v77;
    uint64_t v85 = v120;
    uint64_t v86 = v122;
    (*(void (**)(uint64_t, char *, uint64_t))(v120 + 16))(v80, v74, v122);
    (*(void (**)(char *, uint64_t))(v83 + 8))(v79, v84);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v74, v86);
    uint64_t v70 = &qword_1001A5730;
    uint64_t v87 = v121;
    sub_10000A3C4(v80, v121, &qword_1001A5730);
    sub_10000A428(v87, v144, &qword_1001A5730);
    swift_storeEnumTagMultiPayload();
    sub_1000A2E6C();
    sub_100012BFC();
    _ConditionalContent<>.init(storage:)();
    uint64_t v73 = v87;
  }
  return sub_10000ACE0(v73, v70);
}

uint64_t sub_1000A274C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Venue();
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v6 + 16))(v5, a1);
  sub_10000570C(&qword_1001A5140);
  uint64_t v7 = VenueSchedule.events.getter();
  sub_10000570C(&qword_1001A8A80);
  swift_allocObject();
  return sub_1000A0490((uint64_t)v5, v7);
}

uint64_t sub_1000A2848(uint64_t *a1)
{
  type metadata accessor for VenueController();
  sub_1000A2F10(&qword_1001A8A58, (void (*)(uint64_t))type metadata accessor for VenueController);
  StateObject.wrappedValue.getter();
  uint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v4 = *a1;
    uint64_t v3 = a1[1];
    swift_retain();
    swift_bridgeObjectRetain();
    sub_100116C94(v4, v3, 5, v2);
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1000A2F10((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A298C(uint64_t a1)
{
  v1[2] = a1;
  type metadata accessor for MainActor();
  v1[3] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[4] = v3;
  v1[5] = v2;
  return _swift_task_switch(sub_1000A2A24, v3, v2);
}

uint64_t sub_1000A2A24()
{
  uint64_t v1 = (uint64_t *)v0[2];
  type metadata accessor for VenueController();
  sub_1000A2F10(&qword_1001A8A58, (void (*)(uint64_t))type metadata accessor for VenueController);
  v0[6] = StateObject.wrappedValue.getter();
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = (void *)swift_task_alloc();
  v0[7] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100011EF4;
  return sub_10000429C(v2, v3);
}

uint64_t sub_1000A2B3C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_1000A2BBC(uint64_t a1)
{
  uint64_t v2 = sub_10000570C(&qword_1001A4FA8);
  uint64_t v4 = __chkstk_darwin(v2 - 8, v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v11 - v8;
  sub_10000A428(a1, (uint64_t)&v11 - v8, &qword_1001A4FA8);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_10000A428((uint64_t)v9, (uint64_t)v6, &qword_1001A4FA8);
  swift_retain();
  static Published.subscript.setter();
  return sub_10000ACE0((uint64_t)v9, &qword_1001A4FA8);
}

uint64_t sub_1000A2CD0@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1000A2D54()
{
  return static Published.subscript.setter();
}

uint64_t sub_1000A2DD8()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100009854;
  return sub_1000A298C(v0 + 16);
}

unint64_t sub_1000A2E6C()
{
  unint64_t result = qword_1001A8A70;
  if (!qword_1001A8A70)
  {
    sub_100004A58(&qword_1001A8A48);
    sub_10000A780(&qword_1001A8A78, &qword_1001A8A50);
    sub_100012B50();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8A70);
  }
  return result;
}

uint64_t sub_1000A2F10(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000A2F5C()
{
  return sub_1000A2848((uint64_t *)(v0 + 16));
}

uint64_t sub_1000A2F64()
{
  uint64_t v1 = type metadata accessor for Venue();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = v3 + *(void *)(v2 + 64);
  uint64_t v5 = sub_10000570C(&qword_1001A5140);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);

  return swift_deallocObject();
}

uint64_t sub_1000A30B8()
{
  uint64_t v1 = *(void *)(type metadata accessor for Venue() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_10000570C(&qword_1001A5140);

  return sub_1000A274C(v0 + v2);
}

Swift::Int sub_1000A3188(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for Genre() - 8);
  unint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v3 = (void *)sub_1000A5690(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_1000A3C48(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_1000A3230(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  unint64_t v3 = sub_100137AF0(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    _OWORD v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A3388(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for Genre();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v90 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000570C(&qword_1001A8AA0);
  uint64_t v10 = __chkstk_darwin(v8 - 8, v9);
  uint64_t v91 = (uint64_t)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  __chkstk_darwin(v13, v14);
  uint64_t v20 = (char *)&v74 - v19;
  uint64_t v21 = *(void *)(a1 + 16);
  int64_t v22 = *v1;
  int64_t v23 = *(void *)(*v1 + 16);
  int64_t v24 = v23 + v21;
  if (__OFADD__(v23, v21))
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v89 = v15;
  uint64_t v2 = v5;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v22;
  if (!isUniquelyReferenced_nonNull_native || (int64_t v26 = *(void *)(v22 + 24) >> 1, v26 < v24))
  {
    if (v23 <= v24) {
      int64_t v27 = v23 + v21;
    }
    else {
      int64_t v27 = v23;
    }
    int64_t v22 = sub_100137C24(isUniquelyReferenced_nonNull_native, v27, 1, v22);
    *uint64_t v1 = v22;
    int64_t v26 = *(void *)(v22 + 24) >> 1;
  }
  uint64_t v28 = *(void *)(v22 + 16);
  int64_t v23 = *(void *)(v5 + 72);
  int64_t v29 = v26 - v28;
  unint64_t v88 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v30 = sub_1001389D4(&v92, v22 + v88 + v23 * v28, v26 - v28, a1);
  if (v30 < v21) {
    goto LABEL_17;
  }
  if (v30)
  {
    uint64_t v33 = *(void *)(v22 + 16);
    BOOL v34 = __OFADD__(v33, v30);
    uint64_t v35 = v33 + v30;
    if (v34)
    {
      __break(1u);
      goto LABEL_22;
    }
    *(void *)(v22 + 16) = v35;
  }
  if (v30 == v29)
  {
LABEL_18:
    int64_t v22 = *(void *)(v22 + 16);
    uint64_t v21 = v92;
    uint64_t v32 = v93;
    int64_t v31 = v94;
    int64_t v29 = v95;
    int64_t v83 = v94;
    int64_t v87 = v93;
    if (v96)
    {
      unint64_t v37 = (v96 - 1) & v96;
      unint64_t v38 = __clz(__rbit64(v96)) | (v95 << 6);
LABEL_20:
      (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v20, *(void *)(v21 + 48) + v38 * v23, v4);
      long long v78 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
      v78(v20, 0, 1, v4);
      unint64_t v39 = v37;
LABEL_43:
      unint64_t v85 = v39;
      int64_t v86 = v29;
      unint64_t v92 = v21;
      int64_t v93 = v87;
      int64_t v94 = v83;
      int64_t v95 = v29;
      unint64_t v96 = v39;
      uint64_t v45 = v89;
      sub_10000A428((uint64_t)v20, v89, &qword_1001A8AA0);
      uint64_t v84 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
      int v46 = v84(v45, 1, v4);
      uint64_t v47 = v91;
      if (v46 == 1)
      {
LABEL_81:
        sub_10000ACE0((uint64_t)v20, &qword_1001A8AA0);
        sub_100044AD4();
        return sub_10000ACE0(v89, &qword_1001A8AA0);
      }
      uint64_t v82 = (void (**)(void, void, void))(v5 + 32);
      long long v76 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v77 = v5 + 56;
      uint64_t v75 = (void (**)(char *, uint64_t))(v5 + 8);
      uint64_t v48 = v89;
      uint64_t v49 = v90;
      char v79 = v20;
      while (1)
      {
        sub_10000ACE0(v48, &qword_1001A8AA0);
        uint64_t v51 = *v1;
        unint64_t v52 = *(void *)(*v1 + 24);
        int64_t v53 = v52 >> 1;
        if ((uint64_t)(v52 >> 1) < v22 + 1)
        {
          uint64_t v51 = sub_100137C24(v52 > 1, v22 + 1, 1, *v1);
          *uint64_t v1 = v51;
          int64_t v53 = *(void *)(v51 + 24) >> 1;
        }
        sub_10000A428((uint64_t)v20, v47, &qword_1001A8AA0);
        if (v84(v47, 1, v4) != 1) {
          break;
        }
LABEL_50:
        sub_10000ACE0(v47, &qword_1001A8AA0);
        int64_t v50 = v22;
LABEL_46:
        *(void *)(*v1 + 16) = v50;
        uint64_t v48 = v89;
        sub_10000A428((uint64_t)v20, v89, &qword_1001A8AA0);
        if (v84(v48, 1, v4) == 1)
        {
          int64_t v86 = v95;
          int64_t v87 = v93;
          unint64_t v85 = v96;
          goto LABEL_81;
        }
      }
      unint64_t v81 = v51 + v88;
      uint64_t v54 = *v82;
      if (v22 <= v53) {
        int64_t v55 = v53;
      }
      else {
        int64_t v55 = v22;
      }
      int64_t v83 = v55;
      uint64_t v80 = v54;
      while (1)
      {
        uint64_t v59 = v49;
        uint64_t v60 = v47;
        uint64_t v61 = v47;
        uint64_t v62 = v49;
        uint64_t v63 = (uint64_t (*)(unint64_t, char *, uint64_t))v54;
        v54(v59, v60, v4);
        if (v22 == v83)
        {
          (*v75)(v62, v4);
          int64_t v50 = v83;
          int64_t v22 = v83;
          uint64_t v49 = v62;
          uint64_t v47 = v61;
          uint64_t v20 = v79;
          goto LABEL_46;
        }
        uint64_t v20 = v79;
        sub_10000ACE0((uint64_t)v79, &qword_1001A8AA0);
        int64_t v64 = v22;
        uint64_t result = v63(v81 + v22 * v23, v62, v4);
        uint64_t v65 = v93;
        int64_t v66 = v95;
        int64_t v87 = v64;
        unint64_t v85 = v92;
        int64_t v86 = v94;
        if (v96) {
          break;
        }
        int64_t v69 = v95 + 1;
        if (__OFADD__(v95, 1))
        {
          __break(1u);
          return result;
        }
        int64_t v70 = (unint64_t)(v94 + 64) >> 6;
        int64_t v68 = v95;
        if (v69 < v70)
        {
          unint64_t v71 = *(void *)(v93 + 8 * v69);
          if (v71) {
            goto LABEL_65;
          }
          int64_t v72 = v95 + 2;
          int64_t v68 = v95 + 1;
          if (v95 + 2 < v70)
          {
            unint64_t v71 = *(void *)(v93 + 8 * v72);
            if (v71) {
              goto LABEL_68;
            }
            int64_t v68 = v95 + 2;
            if (v95 + 3 < v70)
            {
              unint64_t v71 = *(void *)(v93 + 8 * (v95 + 3));
              if (v71)
              {
                int64_t v69 = v95 + 3;
                goto LABEL_65;
              }
              int64_t v72 = v95 + 4;
              int64_t v68 = v95 + 3;
              if (v95 + 4 < v70)
              {
                unint64_t v71 = *(void *)(v93 + 8 * v72);
                if (v71)
                {
LABEL_68:
                  int64_t v69 = v72;
                  goto LABEL_65;
                }
                int64_t v69 = v95 + 5;
                int64_t v68 = v95 + 4;
                if (v95 + 5 < v70)
                {
                  unint64_t v71 = *(void *)(v93 + 8 * v69);
                  if (!v71)
                  {
                    int64_t v68 = v70 - 1;
                    int64_t v73 = v95 + 6;
                    do
                    {
                      if (v70 == v73)
                      {
                        uint64_t v20 = v79;
                        goto LABEL_56;
                      }
                      unint64_t v71 = *(void *)(v93 + 8 * v73++);
                    }
                    while (!v71);
                    int64_t v69 = v73 - 1;
                    uint64_t v20 = v79;
                  }
LABEL_65:
                  unint64_t v56 = (v71 - 1) & v71;
                  unint64_t v67 = __clz(__rbit64(v71)) + (v69 << 6);
                  int64_t v66 = v69;
LABEL_61:
                  unint64_t v57 = v85;
                  (*v76)(v20, *(void *)(v85 + 48) + v67 * v23, v4);
                  v78(v20, 0, 1, v4);
                  int64_t v68 = v66;
                  goto LABEL_57;
                }
              }
            }
          }
        }
LABEL_56:
        v78(v20, 1, 1, v4);
        unint64_t v56 = 0;
        unint64_t v57 = v85;
LABEL_57:
        unint64_t v92 = v57;
        int64_t v93 = v65;
        int64_t v22 = v87 + 1;
        int64_t v94 = v86;
        int64_t v95 = v68;
        unint64_t v96 = v56;
        uint64_t v47 = v91;
        sub_10000A428((uint64_t)v20, v91, &qword_1001A8AA0);
        int v58 = v84(v47, 1, v4);
        uint64_t v49 = v90;
        uint64_t v54 = v80;
        if (v58 == 1) {
          goto LABEL_50;
        }
      }
      unint64_t v56 = (v96 - 1) & v96;
      unint64_t v67 = __clz(__rbit64(v96)) | (v95 << 6);
      goto LABEL_61;
    }
LABEL_22:
    int64_t v40 = v29 + 1;
    if (__OFADD__(v29, 1))
    {
      __break(1u);
LABEL_41:
      uint64_t v21 = v15;
      int64_t v22 = v16;
      uint64_t v4 = v17;
      uint64_t v20 = v18;
    }
    else
    {
      int64_t v41 = (unint64_t)(v31 + 64) >> 6;
      int64_t v86 = v29;
      if (v40 < v41)
      {
        unint64_t v42 = *(void *)(v32 + 8 * v40);
        if (v42)
        {
LABEL_25:
          unint64_t v37 = (v42 - 1) & v42;
          unint64_t v38 = __clz(__rbit64(v42)) + (v40 << 6);
          int64_t v29 = v40;
          goto LABEL_20;
        }
        int64_t v43 = v29 + 2;
        int64_t v86 = v29 + 1;
        if (v29 + 2 < v41)
        {
          uint64_t v18 = v20;
          uint64_t v17 = v4;
          int64_t v16 = v22;
          uint64_t v15 = v21;
          unint64_t v42 = *(void *)(v32 + 8 * v43);
          if (v42)
          {
LABEL_28:
            int64_t v40 = v43;
            goto LABEL_25;
          }
          int64_t v86 = v29 + 2;
          if (v29 + 3 < v41)
          {
            unint64_t v42 = *(void *)(v87 + 8 * (v29 + 3));
            if (v42)
            {
              int64_t v40 = v29 + 3;
              goto LABEL_25;
            }
            int64_t v43 = v29 + 4;
            int64_t v86 = v29 + 3;
            if (v29 + 4 < v41)
            {
              unint64_t v42 = *(void *)(v87 + 8 * v43);
              if (v42) {
                goto LABEL_28;
              }
              int64_t v40 = v29 + 5;
              int64_t v86 = v29 + 4;
              if (v29 + 5 < v41)
              {
                unint64_t v42 = *(void *)(v87 + 8 * v40);
                if (!v42)
                {
                  int64_t v86 = v41 - 1;
                  int64_t v44 = v29 + 6;
                  do
                  {
                    if (v41 == v44) {
                      goto LABEL_41;
                    }
                    unint64_t v42 = *(void *)(v87 + 8 * v44++);
                  }
                  while (!v42);
                  int64_t v40 = v44 - 1;
                }
                goto LABEL_25;
              }
            }
          }
        }
      }
    }
    long long v78 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
    v78(v20, 1, 1, v4);
    unint64_t v39 = 0;
    int64_t v29 = v86;
    goto LABEL_43;
  }

  return sub_100044AD4();
}

Swift::Int sub_1000A3C48(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Genre();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v161 = (char *)&v153 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v173 = (char *)&v153 - v11;
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v176 = (char *)&v153 - v14;
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v175 = (char *)&v153 - v17;
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v156 = (char *)&v153 - v20;
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v163 = (char *)&v153 - v23;
  uint64_t v25 = __chkstk_darwin(v22, v24);
  uint64_t v159 = (char *)&v153 - v26;
  __chkstk_darwin(v25, v27);
  uint64_t v158 = (char *)&v153 - v28;
  uint64_t v178 = a1;
  Swift::Int v29 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v29);
  if (result >= v29)
  {
    if (v29 < 0) {
      goto LABEL_151;
    }
    if (v29) {
      return sub_1000A495C(0, v29, 1, v178);
    }
    return result;
  }
  if (v29 >= 0) {
    uint64_t v31 = v29;
  }
  else {
    uint64_t v31 = v29 + 1;
  }
  if (v29 < -1) {
    goto LABEL_159;
  }
  Swift::Int v154 = result;
  if (v29 < 2)
  {
    uint64_t v34 = v5;
    uint64_t v36 = (char *)_swiftEmptyArrayStorage;
    unint64_t v164 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v153 = _swiftEmptyArrayStorage;
    if (v29 != 1)
    {
      unint64_t v38 = _swiftEmptyArrayStorage[2];
LABEL_117:
      if (v38 >= 2)
      {
        uint64_t v144 = *v178;
        do
        {
          unint64_t v145 = v38 - 2;
          if (v38 < 2) {
            goto LABEL_146;
          }
          if (!v144) {
            goto LABEL_158;
          }
          uint64_t v146 = v36;
          uint64_t v147 = v36 + 32;
          uint64_t v148 = *(void *)&v36[16 * v145 + 32];
          uint64_t v149 = *(void *)&v36[16 * v38 + 24];
          uint64_t v150 = v34;
          sub_1000A4CA8(v144 + *(void *)(v34 + 72) * v148, v144 + *(void *)(v34 + 72) * *(void *)&v147[16 * v38 - 16], v144 + *(void *)(v34 + 72) * v149, v164);
          if (v2) {
            break;
          }
          if (v149 < v148) {
            goto LABEL_147;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v146 = sub_1000A5668((uint64_t)v146);
          }
          if (v145 >= *((void *)v146 + 2)) {
            goto LABEL_148;
          }
          uint64_t v151 = &v146[16 * v145 + 32];
          *(void *)uint64_t v151 = v148;
          *((void *)v151 + 1) = v149;
          unint64_t v152 = *((void *)v146 + 2);
          if (v38 > v152) {
            goto LABEL_149;
          }
          uint64_t v36 = v146;
          memmove(&v146[16 * v38 + 16], &v146[16 * v38 + 32], 16 * (v152 - v38));
          *((void *)v146 + 2) = v152 - 1;
          unint64_t v38 = v152 - 1;
          uint64_t v34 = v150;
        }
        while (v152 > 2);
      }
LABEL_128:
      swift_bridgeObjectRelease();
      v153[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v32 = v31 >> 1;
    uint64_t v33 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v33 + 16) = v32;
    uint64_t v34 = v5;
    unint64_t v35 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v153 = (void *)v33;
    unint64_t v164 = v33 + v35;
  }
  Swift::Int v37 = 0;
  uint64_t v169 = v34 + 16;
  uint64_t v170 = (void (**)(char *, uint64_t))(v34 + 8);
  uint64_t v174 = (char **)(v34 + 32);
  uint64_t v36 = (char *)_swiftEmptyArrayStorage;
  uint64_t v165 = v34;
  uint64_t v172 = v4;
  while (1)
  {
    Swift::Int v39 = v37;
    Swift::Int v40 = v37 + 1;
    Swift::Int v162 = v37;
    if (v37 + 1 >= v29)
    {
      Swift::Int v48 = v37 + 1;
      goto LABEL_69;
    }
    Swift::Int v171 = v29;
    uint64_t v157 = v36;
    uint64_t v41 = *v178;
    uint64_t v42 = *(void *)(v34 + 72);
    int64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
    v43(v158, *v178 + v42 * v40, v4);
    uint64_t v166 = (char *)v41;
    uint64_t v177 = v42;
    v43(v159, v41 + v42 * v39, v4);
    uint64_t v44 = Genre.name.getter();
    uint64_t v46 = v45;
    if (v44 != Genre.name.getter()) {
      goto LABEL_20;
    }
    if (v46 == v47) {
      LODWORD(v168) = 0;
    }
    else {
LABEL_20:
    }
      LODWORD(v168) = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v49 = v156;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int64_t v50 = *v170;
    uint64_t v51 = v172;
    (*v170)(v159, v172);
    v50(v158, v51);
    Swift::Int v48 = v162 + 2;
    if (v162 + 2 >= v171)
    {
      uint64_t v63 = v165;
    }
    else
    {
      uint64_t v155 = v2;
      uint64_t v167 = v177 * v40;
      unint64_t v52 = v166;
      uint64_t v53 = v177 * v48;
      while (1)
      {
        Swift::Int v54 = v48;
        uint64_t v55 = v172;
        v43(v163, (uint64_t)&v52[v53], v172);
        v43(v49, (uint64_t)&v52[v167], v55);
        uint64_t v56 = Genre.name.getter();
        uint64_t v58 = v57;
        if (v56 == Genre.name.getter() && v58 == v59) {
          int v60 = 0;
        }
        else {
          int v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v61 = v172;
        v50(v49, v172);
        v50(v163, v61);
        if ((v168 ^ v60)) {
          break;
        }
        Swift::Int v48 = v54 + 1;
        v52 += v177;
        if (v171 == v54 + 1)
        {
          Swift::Int v62 = v171;
          Swift::Int v48 = v171;
          uint64_t v2 = v155;
          uint64_t v63 = v165;
          goto LABEL_33;
        }
      }
      uint64_t v2 = v155;
      uint64_t v63 = v165;
      Swift::Int v48 = v54;
    }
    Swift::Int v62 = v171;
LABEL_33:
    uint64_t v36 = v157;
    Swift::Int v39 = v162;
    int64_t v64 = v166;
    if ((v168 & 1) == 0) {
      break;
    }
    if (v48 < v162) {
      goto LABEL_152;
    }
    if (v162 >= v48) {
      break;
    }
    uint64_t v155 = v2;
    uint64_t v65 = 0;
    uint64_t v66 = v177 * (v48 - 1);
    uint64_t v67 = v48 * v177;
    Swift::Int v68 = v162;
    uint64_t v69 = v162 * v177;
    do
    {
      if (v68 != v48 + v65 - 1)
      {
        if (!v64) {
          goto LABEL_157;
        }
        unint64_t v71 = &v64[v66];
        uint64_t v168 = *v174;
        ((void (*)(char *, char *, uint64_t))v168)(v161, &v64[v69], v172);
        if (v69 < v66 || &v64[v69] >= &v64[v67])
        {
          uint64_t v70 = v172;
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          uint64_t v70 = v172;
          if (v69 != v66) {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        ((void (*)(char *, char *, uint64_t))v168)(v71, v161, v70);
        uint64_t v63 = v165;
        int64_t v64 = v166;
      }
      ++v68;
      --v65;
      v66 -= v177;
      v67 -= v177;
      v69 += v177;
    }
    while (v68 < v48 + v65);
    uint64_t v2 = v155;
    Swift::Int v62 = v171;
    uint64_t v72 = v172;
    uint64_t v36 = v157;
    Swift::Int v39 = v162;
    if (v48 < v171) {
      goto LABEL_49;
    }
LABEL_69:
    if (v48 < v39) {
      goto LABEL_145;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v36 = sub_1000A5370(0, *((void *)v36 + 2) + 1, 1, v36);
    }
    unint64_t v93 = *((void *)v36 + 2);
    unint64_t v92 = *((void *)v36 + 3);
    unint64_t v38 = v93 + 1;
    uint64_t v34 = v165;
    Swift::Int v171 = v48;
    if (v93 >= v92 >> 1)
    {
      uint64_t v143 = sub_1000A5370((char *)(v92 > 1), v93 + 1, 1, v36);
      uint64_t v34 = v165;
      uint64_t v36 = v143;
    }
    *((void *)v36 + 2) = v38;
    int64_t v94 = v36 + 32;
    int64_t v95 = &v36[16 * v93 + 32];
    Swift::Int v96 = v171;
    *(void *)int64_t v95 = v39;
    *((void *)v95 + 1) = v96;
    if (v93)
    {
      while (1)
      {
        unint64_t v97 = v38 - 1;
        if (v38 >= 4)
        {
          uint64_t v102 = &v94[16 * v38];
          uint64_t v103 = *((void *)v102 - 8);
          uint64_t v104 = *((void *)v102 - 7);
          BOOL v108 = __OFSUB__(v104, v103);
          uint64_t v105 = v104 - v103;
          if (v108) {
            goto LABEL_134;
          }
          uint64_t v107 = *((void *)v102 - 6);
          uint64_t v106 = *((void *)v102 - 5);
          BOOL v108 = __OFSUB__(v106, v107);
          uint64_t v100 = v106 - v107;
          char v101 = v108;
          if (v108) {
            goto LABEL_135;
          }
          unint64_t v109 = v38 - 2;
          uint64_t v110 = &v94[16 * v38 - 32];
          uint64_t v112 = *(void *)v110;
          uint64_t v111 = *((void *)v110 + 1);
          BOOL v108 = __OFSUB__(v111, v112);
          uint64_t v113 = v111 - v112;
          if (v108) {
            goto LABEL_137;
          }
          BOOL v108 = __OFADD__(v100, v113);
          uint64_t v114 = v100 + v113;
          if (v108) {
            goto LABEL_140;
          }
          if (v114 >= v105)
          {
            uint64_t v132 = &v94[16 * v97];
            uint64_t v134 = *(void *)v132;
            uint64_t v133 = *((void *)v132 + 1);
            BOOL v108 = __OFSUB__(v133, v134);
            uint64_t v135 = v133 - v134;
            if (v108) {
              goto LABEL_144;
            }
            BOOL v125 = v100 < v135;
            goto LABEL_106;
          }
        }
        else
        {
          if (v38 != 3)
          {
            uint64_t v126 = *((void *)v36 + 4);
            uint64_t v127 = *((void *)v36 + 5);
            BOOL v108 = __OFSUB__(v127, v126);
            uint64_t v119 = v127 - v126;
            char v120 = v108;
            goto LABEL_100;
          }
          uint64_t v99 = *((void *)v36 + 4);
          uint64_t v98 = *((void *)v36 + 5);
          BOOL v108 = __OFSUB__(v98, v99);
          uint64_t v100 = v98 - v99;
          char v101 = v108;
        }
        if (v101) {
          goto LABEL_136;
        }
        unint64_t v109 = v38 - 2;
        uint64_t v115 = &v94[16 * v38 - 32];
        uint64_t v117 = *(void *)v115;
        uint64_t v116 = *((void *)v115 + 1);
        BOOL v118 = __OFSUB__(v116, v117);
        uint64_t v119 = v116 - v117;
        char v120 = v118;
        if (v118) {
          goto LABEL_139;
        }
        uint64_t v121 = &v94[16 * v97];
        uint64_t v123 = *(void *)v121;
        uint64_t v122 = *((void *)v121 + 1);
        BOOL v108 = __OFSUB__(v122, v123);
        uint64_t v124 = v122 - v123;
        if (v108) {
          goto LABEL_142;
        }
        if (__OFADD__(v119, v124)) {
          goto LABEL_143;
        }
        if (v119 + v124 >= v100)
        {
          BOOL v125 = v100 < v124;
LABEL_106:
          if (v125) {
            unint64_t v97 = v109;
          }
          goto LABEL_108;
        }
LABEL_100:
        if (v120) {
          goto LABEL_138;
        }
        uint64_t v128 = &v94[16 * v97];
        uint64_t v130 = *(void *)v128;
        uint64_t v129 = *((void *)v128 + 1);
        BOOL v108 = __OFSUB__(v129, v130);
        uint64_t v131 = v129 - v130;
        if (v108) {
          goto LABEL_141;
        }
        if (v131 < v119) {
          goto LABEL_14;
        }
LABEL_108:
        unint64_t v136 = v97 - 1;
        if (v97 - 1 >= v38)
        {
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        if (!*v178) {
          goto LABEL_156;
        }
        uint64_t v137 = v36;
        uint64_t v138 = &v94[16 * v136];
        uint64_t v139 = *(void *)v138;
        uint64_t v140 = &v94[16 * v97];
        uint64_t v141 = *((void *)v140 + 1);
        sub_1000A4CA8(*v178 + *(void *)(v34 + 72) * *(void *)v138, *v178 + *(void *)(v34 + 72) * *(void *)v140, *v178 + *(void *)(v34 + 72) * v141, v164);
        if (v2) {
          goto LABEL_128;
        }
        if (v141 < v139) {
          goto LABEL_131;
        }
        if (v97 > *((void *)v137 + 2)) {
          goto LABEL_132;
        }
        *(void *)uint64_t v138 = v139;
        *(void *)&v94[16 * v136 + 8] = v141;
        unint64_t v142 = *((void *)v137 + 2);
        if (v97 >= v142) {
          goto LABEL_133;
        }
        uint64_t v36 = v137;
        unint64_t v38 = v142 - 1;
        memmove(&v94[16 * v97], v140 + 16, 16 * (v142 - 1 - v97));
        *((void *)v137 + 2) = v142 - 1;
        uint64_t v34 = v165;
        if (v142 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v38 = 1;
LABEL_14:
    Swift::Int v29 = v178[1];
    Swift::Int v37 = v171;
    uint64_t v4 = v172;
    if (v171 >= v29) {
      goto LABEL_117;
    }
  }
  uint64_t v72 = v172;
  if (v48 >= v62) {
    goto LABEL_69;
  }
LABEL_49:
  if (__OFSUB__(v48, v39)) {
    goto LABEL_150;
  }
  if (v48 - v39 >= v154) {
    goto LABEL_69;
  }
  if (__OFADD__(v39, v154)) {
    goto LABEL_153;
  }
  if (v39 + v154 >= v62) {
    Swift::Int v73 = v62;
  }
  else {
    Swift::Int v73 = v39 + v154;
  }
  if (v73 >= v39)
  {
    if (v48 != v73)
    {
      uint64_t v157 = v36;
      uint64_t v155 = v2;
      uint64_t v74 = *(void *)(v63 + 72);
      uint64_t v166 = *(char **)(v63 + 16);
      uint64_t v167 = v74;
      uint64_t v177 = v74 * (v48 - 1);
      Swift::Int v75 = v48 * v74;
      Swift::Int v160 = v73;
      do
      {
        uint64_t v78 = 0;
        Swift::Int v79 = v39;
        Swift::Int v171 = v48;
        uint64_t v168 = (char *)v75;
        while (1)
        {
          uint64_t v80 = *v178;
          uint64_t v81 = v75 + v78 + *v178;
          uint64_t v82 = v166;
          ((void (*)(char *, uint64_t, uint64_t))v166)(v175, v81, v72);
          ((void (*)(char *, uint64_t, uint64_t))v82)(v176, v177 + v78 + v80, v72);
          uint64_t v83 = Genre.name.getter();
          uint64_t v85 = v84;
          if (v83 == Genre.name.getter() && v85 == v86) {
            break;
          }
          char v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v88 = *v170;
          uint64_t v72 = v172;
          (*v170)(v176, v172);
          v88(v175, v72);
          if ((v87 & 1) == 0) {
            goto LABEL_59;
          }
          uint64_t v89 = *v178;
          Swift::Int v75 = (Swift::Int)v168;
          if (!*v178) {
            goto LABEL_155;
          }
          uint64_t v90 = v89 + v177 + v78;
          uint64_t v91 = *v174;
          ((void (*)(char *, char *, uint64_t))*v174)(v173, &v168[v89 + v78], v72);
          swift_arrayInitWithTakeFrontToBack();
          ((void (*)(uint64_t, char *, uint64_t))v91)(v90, v173, v72);
          v78 -= v167;
          ++v79;
          Swift::Int v77 = v171;
          if (v171 == v79) {
            goto LABEL_60;
          }
        }
        swift_bridgeObjectRelease_n();
        long long v76 = *v170;
        uint64_t v72 = v172;
        (*v170)(v176, v172);
        v76(v175, v72);
LABEL_59:
        Swift::Int v77 = v171;
        Swift::Int v75 = (Swift::Int)v168;
LABEL_60:
        Swift::Int v48 = v77 + 1;
        v177 += v167;
        v75 += v167;
        Swift::Int v39 = v162;
      }
      while (v48 != v160);
      Swift::Int v48 = v160;
      uint64_t v2 = v155;
      uint64_t v36 = v157;
    }
    goto LABEL_69;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A495C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v49 = a4;
  uint64_t v37 = a1;
  uint64_t v6 = type metadata accessor for Genre();
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v47 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v51 = (char *)&v35 - v12;
  uint64_t result = __chkstk_darwin(v11, v13);
  int64_t v50 = (char *)&v35 - v16;
  uint64_t v45 = a3;
  uint64_t v36 = a2;
  if (a3 != a2)
  {
    Swift::Int v40 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    uint64_t v41 = v15 + 16;
    uint64_t v17 = *(void *)(v15 + 72);
    unint64_t v38 = (void (**)(char *, uint64_t))(v15 + 8);
    uint64_t v39 = v6;
    uint64_t v46 = (void (**)(char *, uint64_t, uint64_t))(v15 + 32);
    uint64_t v18 = v17 * (v45 - 1);
    uint64_t v42 = v17;
    uint64_t v19 = v17 * v45;
LABEL_6:
    uint64_t v21 = 0;
    uint64_t v22 = v37;
    uint64_t v43 = v19;
    uint64_t v44 = v18;
    while (1)
    {
      uint64_t v23 = *v49;
      uint64_t v48 = v19 + v21;
      uint64_t v24 = v19 + v21 + v23;
      uint64_t v25 = v40;
      v40(v50, v24, v6);
      v25(v51, v18 + v21 + v23, v6);
      uint64_t v26 = Genre.name.getter();
      uint64_t v28 = v27;
      if (v26 == Genre.name.getter() && v28 == v29)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v6 = v39;
        uint64_t v20 = *v38;
        (*v38)(v51, v39);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v20)(v50, v6);
        uint64_t v19 = v43;
        uint64_t v18 = v44;
LABEL_5:
        v18 += v42;
        v19 += v42;
        if (++v45 == v36) {
          return result;
        }
        goto LABEL_6;
      }
      char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v6 = v39;
      uint64_t v31 = *v38;
      (*v38)(v51, v39);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v31)(v50, v6);
      uint64_t v19 = v43;
      uint64_t v18 = v44;
      if ((v30 & 1) == 0) {
        goto LABEL_5;
      }
      uint64_t v32 = *v49;
      if (!*v49) {
        break;
      }
      uint64_t v33 = v32 + v44 + v21;
      uint64_t v34 = *v46;
      (*v46)(v47, v32 + v43 + v21, v6);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v34)(v33, v47, v6);
      v21 -= v42;
      if (v45 == ++v22) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A4CA8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v70 = type metadata accessor for Genre();
  uint64_t v8 = *(void *)(v70 - 8);
  uint64_t v10 = __chkstk_darwin(v70, v9);
  Swift::Int v68 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v67 = (char *)&v62 - v14;
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v66 = (char *)&v62 - v17;
  __chkstk_darwin(v16, v18);
  uint64_t v20 = (char *)&v62 - v19;
  uint64_t v69 = *(void *)(v21 + 72);
  if (!v69)
  {
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  if (a2 - a1 == 0x8000000000000000 && v69 == -1) {
    goto LABEL_69;
  }
  int64_t v22 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v69 == -1) {
    goto LABEL_70;
  }
  uint64_t v23 = (uint64_t)(a2 - a1) / v69;
  unint64_t v73 = a1;
  unint64_t v72 = a4;
  uint64_t v24 = v22 / v69;
  if (v23 >= v22 / v69)
  {
    if ((v24 & 0x8000000000000000) == 0)
    {
      uint64_t v26 = v24 * v69;
      if (a4 < a2 || a2 + v26 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v44 = a4 + v26;
      unint64_t v71 = a4 + v26;
      unint64_t v73 = a2;
      uint64_t v66 = (char *)a1;
      if (v26 >= 1 && a1 < a2)
      {
        uint64_t v46 = -v69;
        uint64_t v69 = *(void *)(v8 + 16);
        unint64_t v64 = a4;
        uint64_t v65 = v8 + 16;
        uint64_t v63 = (void (**)(char *, uint64_t))(v8 + 8);
        do
        {
          unint64_t v47 = a3;
          uint64_t v48 = (void (*)(char *, unint64_t, uint64_t))v69;
          uint64_t v49 = v70;
          ((void (*)(char *, unint64_t, uint64_t))v69)(v67, v44 + v46, v70);
          unint64_t v50 = a2 + v46;
          v48(v68, a2 + v46, v49);
          uint64_t v51 = Genre.name.getter();
          uint64_t v53 = v52;
          if (v51 == Genre.name.getter() && v53 == v54) {
            char v55 = 0;
          }
          else {
            char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v56 = v47 + v46;
          uint64_t v57 = *v63;
          uint64_t v58 = v70;
          (*v63)(v68, v70);
          v57(v67, v58);
          unint64_t v59 = v64;
          if (v55)
          {
            if (v47 < a2 || v56 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v47 != a2)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v73 += v46;
          }
          else
          {
            unint64_t v60 = v71;
            v71 += v46;
            if (v47 < v60 || v56 >= v60)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v47 != v60)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v50 = a2;
          }
          unint64_t v44 = v71;
          if (v71 <= v59) {
            break;
          }
          a2 = v50;
          a3 = v47 + v46;
        }
        while (v50 > (unint64_t)v66);
      }
LABEL_67:
      sub_1000A5528(&v73, &v72, (uint64_t *)&v71);
      return 1;
    }
  }
  else if ((v23 & 0x8000000000000000) == 0)
  {
    uint64_t v25 = v23 * v69;
    if (a4 < a1 || a1 + v25 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    Swift::Int v68 = (char *)(a4 + v25);
    unint64_t v71 = a4 + v25;
    if (v25 >= 1 && a2 < a3)
    {
      uint64_t v67 = *(char **)(v8 + 16);
      uint64_t v65 = v8 + 16;
      uint64_t v28 = (void (**)(char *, uint64_t))(v8 + 8);
      while (1)
      {
        unint64_t v29 = a3;
        uint64_t v30 = v70;
        uint64_t v31 = (void (*)(char *, unint64_t, uint64_t))v67;
        ((void (*)(char *, unint64_t, uint64_t))v67)(v20, a2, v70);
        v31(v66, a4, v30);
        uint64_t v32 = Genre.name.getter();
        uint64_t v34 = v33;
        if (v32 == Genre.name.getter() && v34 == v35) {
          break;
        }
        char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v39 = *v28;
        uint64_t v40 = v70;
        (*v28)(v66, v70);
        v39(v20, v40);
        if ((v38 & 1) == 0) {
          goto LABEL_31;
        }
        unint64_t v41 = v73;
        unint64_t v42 = a2 + v69;
        if (v73 < a2 || v73 >= v42)
        {
          swift_arrayInitWithTakeFrontToBack();
          a3 = v29;
        }
        else
        {
          a3 = v29;
          if (v73 == a2) {
            unint64_t v41 = a2;
          }
          else {
            swift_arrayInitWithTakeBackToFront();
          }
        }
LABEL_37:
        unint64_t v73 = v41 + v69;
        a4 = v72;
        if (v72 < (unint64_t)v68)
        {
          a2 = v42;
          if (v42 < a3) {
            continue;
          }
        }
        goto LABEL_67;
      }
      swift_bridgeObjectRelease_n();
      uint64_t v36 = *v28;
      uint64_t v37 = v70;
      (*v28)(v66, v70);
      v36(v20, v37);
LABEL_31:
      unint64_t v41 = v73;
      unint64_t v43 = v72 + v69;
      if (v73 < v72 || v73 >= v43)
      {
        swift_arrayInitWithTakeFrontToBack();
        a3 = v29;
      }
      else
      {
        a3 = v29;
        if (v73 != v72) {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      unint64_t v72 = v43;
      unint64_t v42 = a2;
      goto LABEL_37;
    }
    goto LABEL_67;
  }
LABEL_71:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1000A5370(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000570C(&qword_1001A8A98);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1000A546C(void **a1, const void **a2, void *a3)
{
  unint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

uint64_t sub_1000A5528(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t result = type metadata accessor for Genre();
  uint64_t v7 = *(void *)(*(void *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1) {
    goto LABEL_18;
  }
  if (v8 / v7 < 0)
  {
LABEL_19:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v3 != v4)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

char *sub_1000A5668(uint64_t a1)
{
  return sub_1000A5370(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000A567C(uint64_t a1)
{
  return sub_10006B284(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000A5690(void *a1)
{
  return sub_10006B55C(0, a1[2], 0, a1);
}

unint64_t sub_1000A56A8()
{
  unint64_t result = qword_1001A8AA8;
  if (!qword_1001A8AA8)
  {
    sub_100004A58((uint64_t *)&unk_1001A8AB0);
    sub_1000A2E6C();
    sub_100012BFC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8AA8);
  }
  return result;
}

id sub_1000A5724()
{
  long long v1 = v0[1];
  long long v12 = *v0;
  long long v13 = v1;
  sub_10000570C(&qword_1001A8B58);
  Binding.projectedValue.getter();
  uint64_t v2 = v15;
  uint64_t v3 = v16;
  long long v12 = v0[2];
  LOBYTE(v13) = *((unsigned char *)v0 + 48);
  sub_10000570C(&qword_1001A8B70);
  Binding.projectedValue.getter();
  long long v4 = v14;
  char v5 = v15;
  unint64_t v6 = (objc_class *)type metadata accessor for SearchBar.Coordinator();
  uint64_t v7 = (char *)objc_allocWithZone(v6);
  uint64_t v8 = &v7[OBJC_IVAR____TtCV16EventViewService9SearchBar11Coordinator__text];
  *(_OWORD *)uint64_t v8 = v14;
  *((void *)v8 + 2) = v2;
  *((void *)v8 + 3) = v3;
  uint64_t v9 = &v7[OBJC_IVAR____TtCV16EventViewService9SearchBar11Coordinator__isSearching];
  *(_OWORD *)uint64_t v9 = v4;
  v9[16] = v5;
  v11.receiver = v7;
  v11.super_class = v6;
  return [super init];
}

id sub_1000A5804()
{
  id v1 = [objc_allocWithZone((Class)UISearchBar) initWithFrame:0.0, 0.0, 0.0, 0.0];
  sub_10000570C(&qword_1001A8B78);
  UIViewRepresentableContext.coordinator.getter();
  [v1 setDelegate:v5[0]];

  [v1 setSearchBarStyle:2];
  sub_100007480(v0 + 56, (uint64_t)v4);
  sub_100007480((uint64_t)v4, (uint64_t)v5);
  if (v5[1]) {
    NSString v2 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v2 = 0;
  }
  [v1 setPlaceholder:v2];

  [v1 setReturnKeyType:0];
  [v1 setShowsCancelButton:0 animated:0];
  return v1;
}

uint64_t type metadata accessor for SearchBar.Coordinator()
{
  return self;
}

id sub_1000A5B50()
{
  return sub_1000A5804();
}

void sub_1000A5B94(void *a1)
{
  long long v4 = *v1;
  uint64_t v5 = *((void *)v1 + 2);
  uint64_t v6 = *((void *)v1 + 3);
  sub_10000570C(&qword_1001A8B58);
  Binding.wrappedValue.getter();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a1 setText:v3, v4, v5, v6];
}

id sub_1000A5C1C@<X0>(void *a1@<X8>)
{
  id result = sub_1000A5724();
  *a1 = result;
  return result;
}

uint64_t sub_1000A5C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000A6060();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000A5CA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000A6060();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000A5D0C()
{
}

uint64_t sub_1000A5D34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000A5D44()
{
  return swift_release();
}

uint64_t destroy for SearchBar()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SearchBar(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SearchBar(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for SearchBar(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for SearchBar(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchBar(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SearchBar(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchBar()
{
  return &type metadata for SearchBar;
}

unint64_t sub_1000A6060()
{
  unint64_t result = qword_1001A8B68;
  if (!qword_1001A8B68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8B68);
  }
  return result;
}

ValueMetadata *type metadata accessor for SongRow()
{
  return &type metadata for SongRow;
}

uint64_t sub_1000A60C4()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1000A60E0()
{
  qword_1001A8BF0 = 0x6F6E2E636973756DLL;
  *(void *)algn_1001A8BF8 = 0xEA00000000006574;
}

uint64_t sub_1000A6108()
{
  uint64_t v1 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000570C(&qword_1001A8C00);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000570C(&qword_1001A8C08);
  __chkstk_darwin(v10, v11);
  long long v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v9 = static VerticalAlignment.center.getter();
  *((void *)v9 + 1) = 0x4024000000000000;
  v9[16] = 0;
  uint64_t v14 = sub_10000570C(&qword_1001A8C10);
  sub_1000A6320(v0, (uint64_t)&v9[*(int *)(v14 + 44)]);
  char v15 = static Edge.Set.top.getter();
  sub_10000A428((uint64_t)v9, (uint64_t)v13, &qword_1001A8C00);
  uint64_t v16 = &v13[*(int *)(v10 + 36)];
  *uint64_t v16 = v15;
  *(_OWORD *)(v16 + 8) = 0u;
  *(_OWORD *)(v16 + 24) = 0u;
  v16[40] = 1;
  sub_10000ACE0((uint64_t)v9, &qword_1001A8C00);
  static AccessibilityChildBehavior.ignore.getter();
  sub_1000A7B80();
  View.accessibilityElement(children:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return sub_10000ACE0((uint64_t)v13, &qword_1001A8C08);
}

uint64_t sub_1000A6320@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v53 = a2;
  uint64_t v3 = sub_10000570C(&qword_1001A8C28);
  uint64_t v5 = __chkstk_darwin(v3 - 8, v4);
  uint64_t v54 = (uint64_t)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v46 - v8;
  uint64_t v10 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v10 - 8, v11);
  char v55 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_10000570C(&qword_1001A8C30);
  uint64_t v13 = *(void *)(v50 - 8);
  __chkstk_darwin(v50, v14);
  uint64_t v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_10000570C(&qword_1001A8C38);
  __chkstk_darwin(v48, v17);
  uint64_t v19 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_10000570C(&qword_1001A8C40);
  __chkstk_darwin(v49, v20);
  int64_t v22 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_10000570C(&qword_1001A8C48);
  uint64_t v24 = __chkstk_darwin(v47, v23);
  uint64_t v51 = (uint64_t)&v46 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  unint64_t v29 = (char *)&v46 - v28;
  __chkstk_darwin(v27, v30);
  uint64_t v32 = (char *)&v46 - v31;
  uint64_t v52 = a1;
  sub_10000A428(a1 + 32, (uint64_t)&v56, &qword_1001A6928);
  uint64_t v33 = *((void *)&v57 + 1);
  if (*((void *)&v57 + 1))
  {
    uint64_t v34 = v58;
    sub_10000AC9C(&v56, *((uint64_t *)&v57 + 1));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 40))(100, 100, v33, v34);
    sub_100007584((uint64_t)&v56);
  }
  else
  {
    sub_10000ACE0((uint64_t)&v56, &qword_1001A6928);
    uint64_t v35 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v55, 1, 1, v35);
  }
  static Animation.easeInOut.getter();
  Transaction.init(animation:)();
  sub_10000570C(&qword_1001A8C50);
  sub_1000A7C20();
  AsyncImage.init(url:scale:transaction:content:)();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v36 = v50;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v19, v16, v50);
  uint64_t v37 = &v19[*(int *)(v48 + 36)];
  long long v38 = v57;
  *(_OWORD *)uint64_t v37 = v56;
  *((_OWORD *)v37 + 1) = v38;
  *((_OWORD *)v37 + 2) = v58;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v36);
  sub_10000A428((uint64_t)v19, (uint64_t)v22, &qword_1001A8C38);
  v22[*(int *)(v49 + 36)] = 1;
  sub_10000ACE0((uint64_t)v19, &qword_1001A8C38);
  LOBYTE(v36) = static Edge.Set.bottom.getter();
  sub_10000A428((uint64_t)v22, (uint64_t)v29, &qword_1001A8C40);
  uint64_t v39 = &v29[*(int *)(v47 + 36)];
  *uint64_t v39 = v36;
  *(_OWORD *)(v39 + 8) = 0u;
  *(_OWORD *)(v39 + 24) = 0u;
  v39[40] = 1;
  sub_10000ACE0((uint64_t)v22, &qword_1001A8C40);
  sub_10000A3C4((uint64_t)v29, (uint64_t)v32, &qword_1001A8C48);
  *(void *)uint64_t v9 = static HorizontalAlignment.leading.getter();
  *((void *)v9 + 1) = 0x4030000000000000;
  v9[16] = 0;
  uint64_t v40 = sub_10000570C(&qword_1001A8CA0);
  sub_1000A74A0(v52, &v9[*(int *)(v40 + 44)]);
  uint64_t v41 = v51;
  sub_10000A428((uint64_t)v32, v51, &qword_1001A8C48);
  uint64_t v42 = v54;
  sub_10000A428((uint64_t)v9, v54, &qword_1001A8C28);
  uint64_t v43 = v53;
  sub_10000A428(v41, v53, &qword_1001A8C48);
  uint64_t v44 = sub_10000570C(&qword_1001A8CA8);
  sub_10000A428(v42, v43 + *(int *)(v44 + 48), &qword_1001A8C28);
  sub_10000ACE0((uint64_t)v9, &qword_1001A8C28);
  sub_10000ACE0((uint64_t)v32, &qword_1001A8C48);
  sub_10000ACE0(v42, &qword_1001A8C28);
  return sub_10000ACE0(v41, &qword_1001A8C48);
}

uint64_t sub_1000A68B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v60 = a1;
  uint64_t v67 = a2;
  uint64_t v66 = sub_10000570C(&qword_1001A8C98);
  __chkstk_darwin(v66, v2);
  long long v56 = (uint64_t *)((char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v65 = sub_10000570C(&qword_1001A8CC0);
  __chkstk_darwin(v65, v4);
  uint64_t v64 = (uint64_t)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_10000570C(&qword_1001A8CC8);
  __chkstk_darwin(v59, v6);
  uint64_t v61 = (uint64_t)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_10000570C(&qword_1001A8C68);
  __chkstk_darwin(v63, v8);
  uint64_t v62 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000570C(&qword_1001A8C88);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (_OWORD *)((char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = type metadata accessor for Image.ResizingMode();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  int64_t v22 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = sub_10000570C(&qword_1001A8C78);
  uint64_t v24 = __chkstk_darwin(v58, v23);
  uint64_t v26 = (uint64_t *)((char *)&v56 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v24, v27);
  uint64_t v57 = (uint64_t)&v56 - v28;
  uint64_t v29 = type metadata accessor for AsyncImagePhase();
  uint64_t v30 = *(void *)(v29 - 8);
  __chkstk_darwin(v29, v31);
  uint64_t v33 = (char *)&v56 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v33, v60, v29);
  int v34 = (*(uint64_t (**)(char *, uint64_t))(v30 + 88))(v33, v29);
  if (v34 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(char *, uint64_t))(v30 + 96))(v33, v29);
    (*(void (**)(char *, void, uint64_t))(v19 + 104))(v22, enum case for Image.ResizingMode.stretch(_:), v18);
    uint64_t v35 = Image.resizable(capInsets:resizingMode:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    uint64_t v36 = (char *)v17 + *(int *)(v14 + 20);
    uint64_t v37 = enum case for RoundedCornerStyle.continuous(_:);
    uint64_t v38 = type metadata accessor for RoundedCornerStyle();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 104))(v36, v37, v38);
    __asm { FMOV            V0.2D, #4.0 }
    _OWORD *v17 = _Q0;
    sub_1000243EC((uint64_t)v17, (uint64_t)v13);
    sub_10000A428((uint64_t)v13, (uint64_t)v26 + *(int *)(v58 + 36), &qword_1001A8C88);
    *uint64_t v26 = v35;
    swift_retain();
    sub_10000ACE0((uint64_t)v13, &qword_1001A8C88);
    sub_100024450((uint64_t)v17);
    swift_release();
    uint64_t v44 = v57;
    sub_10000A3C4((uint64_t)v26, v57, &qword_1001A8C78);
    sub_10000A428(v44, v61, &qword_1001A8C78);
    swift_storeEnumTagMultiPayload();
    sub_1000A7D3C();
    sub_10000A780(&qword_1001A8C90, &qword_1001A8C98);
    uint64_t v45 = (uint64_t)v62;
    _ConditionalContent<>.init(storage:)();
    sub_10000A428(v45, v64, &qword_1001A8C68);
    swift_storeEnumTagMultiPayload();
    sub_1000A7C9C();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    sub_10000ACE0(v45, &qword_1001A8C68);
    uint64_t v46 = v44;
    uint64_t v47 = &qword_1001A8C78;
  }
  else
  {
    uint64_t v48 = v61;
    uint64_t v49 = (uint64_t)v62;
    uint64_t v50 = v64;
    if (v34 == enum case for AsyncImagePhase.failure(_:))
    {
      (*(void (**)(char *, uint64_t))(v30 + 96))(v33, v29);
      swift_errorRelease();
    }
    else if (v34 != enum case for AsyncImagePhase.empty(_:))
    {
      swift_storeEnumTagMultiPayload();
      sub_1000A7C9C();
      _ConditionalContent<>.init(storage:)();
      return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v33, v29);
    }
    uint64_t v51 = static Alignment.center.getter();
    uint64_t v52 = (uint64_t)v56;
    *long long v56 = v51;
    *(void *)(v52 + 8) = v53;
    uint64_t v54 = sub_10000570C(&qword_1001A8CD0);
    sub_1000A7074(v52 + *(int *)(v54 + 44));
    sub_10000A428(v52, v48, &qword_1001A8C98);
    swift_storeEnumTagMultiPayload();
    sub_1000A7D3C();
    sub_10000A780(&qword_1001A8C90, &qword_1001A8C98);
    _ConditionalContent<>.init(storage:)();
    sub_10000A428(v49, v50, &qword_1001A8C68);
    swift_storeEnumTagMultiPayload();
    sub_1000A7C9C();
    _ConditionalContent<>.init(storage:)();
    sub_10000ACE0(v49, &qword_1001A8C68);
    uint64_t v46 = v52;
    uint64_t v47 = &qword_1001A8C98;
  }
  return sub_10000ACE0(v46, v47);
}

uint64_t sub_1000A7074@<X0>(uint64_t a1@<X8>)
{
  uint64_t v47 = a1;
  uint64_t v1 = type metadata accessor for Image.ResizingMode();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = &v42[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for RoundedRectangle();
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6, v8);
  uint64_t v10 = &v42[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = sub_10000570C(&qword_1001A8428);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v15 = &v42[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13, v16);
  uint64_t v18 = &v42[-v17];
  uint64_t v19 = (char *)v10 + *(int *)(v7 + 28);
  uint64_t v20 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v21 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104))(v19, v20, v21);
  __asm { FMOV            V0.2D, #4.0 }
  _OWORD *v10 = _Q0;
  if (qword_1001A4E48 != -1) {
    swift_once();
  }
  uint64_t v27 = qword_1001B74E8;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1000243EC((uint64_t)v10, (uint64_t)v15);
  uint64_t v29 = (uint64_t *)&v15[*(int *)(v11 + 36)];
  uint64_t *v29 = KeyPath;
  v29[1] = v27;
  swift_retain();
  sub_100024450((uint64_t)v10);
  sub_10000A3C4((uint64_t)v15, (uint64_t)v18, &qword_1001A8428);
  uint64_t v46 = v18;
  if (qword_1001A4E70 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  Image.init(systemName:)();
  (*(void (**)(unsigned char *, void, uint64_t))(v2 + 104))(v5, enum case for Image.ResizingMode.stretch(_:), v1);
  uint64_t v45 = Image.resizable(capInsets:resizingMode:)();
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v5, v1);
  uint64_t v30 = static Color.white.getter();
  uint64_t v31 = swift_getKeyPath();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v32 = v48;
  char v33 = v49;
  uint64_t v34 = v50;
  int v43 = v51;
  uint64_t v35 = v52;
  uint64_t v36 = v53;
  uint64_t v37 = (uint64_t)v46;
  sub_10000A428((uint64_t)v46, (uint64_t)v15, &qword_1001A8428);
  uint64_t v38 = (uint64_t)v15;
  uint64_t v44 = v15;
  uint64_t v39 = v47;
  sub_10000A428(v38, v47, &qword_1001A8428);
  uint64_t v40 = v39 + *(int *)(sub_10000570C(&qword_1001A8CD8) + 48);
  *(void *)uint64_t v40 = v45;
  *(void *)(v40 + 8) = 0;
  *(_WORD *)(v40 + 16) = 1;
  *(void *)(v40 + 24) = v31;
  *(void *)(v40 + 32) = v30;
  *(void *)(v40 + 40) = v32;
  *(unsigned char *)(v40 + 48) = v33;
  *(void *)(v40 + 56) = v34;
  *(unsigned char *)(v40 + 64) = v43;
  *(void *)(v40 + 72) = v35;
  *(void *)(v40 + 80) = v36;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10000ACE0(v37, &qword_1001A8428);
  swift_release();
  swift_release();
  swift_release();
  return sub_10000ACE0((uint64_t)v44, &qword_1001A8428);
}

uint64_t sub_1000A74A0@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v48 = type metadata accessor for Divider();
  uint64_t v4 = *(void *)(v48 - 8);
  __chkstk_darwin(v48, v5);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000570C(&qword_1001A8CB0);
  uint64_t v9 = v8 - 8;
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v47 = (uint64_t)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = (char *)&v41 - v15;
  __chkstk_darwin(v14, v17);
  uint64_t v49 = (uint64_t)&v41 - v18;
  uint64_t v50 = static HorizontalAlignment.leading.getter();
  sub_1000A78F4((uint64_t)&v66);
  uint64_t v51 = v67;
  uint64_t v52 = v66;
  unsigned __int8 v19 = v68;
  uint64_t v57 = v72;
  uint64_t v54 = v74;
  uint64_t v55 = v70;
  uint64_t v41 = v71;
  uint64_t v42 = v75;
  int v53 = v76;
  uint64_t v20 = v79;
  uint64_t v44 = v80;
  uint64_t v45 = v78;
  uint64_t v43 = v81;
  int v56 = v82;
  char v90 = 0;
  unsigned __int8 v89 = v68;
  int v46 = v68;
  char v88 = v73;
  unsigned __int8 v87 = v76;
  char v86 = v82;
  unsigned __int8 v21 = v73;
  Divider.init()();
  if (*(unsigned char *)(a1 + 72)) {
    double v22 = 1.0;
  }
  else {
    double v22 = 0.0;
  }
  uint64_t v23 = v48;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v16, v7, v48);
  *(double *)&v16[*(int *)(v9 + 44)] = v22;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v23);
  uint64_t v24 = (uint64_t)v16;
  uint64_t v25 = v49;
  sub_10000A3C4(v24, v49, &qword_1001A8CB0);
  uint64_t v26 = v25;
  uint64_t v27 = v47;
  sub_10000A428(v26, v47, &qword_1001A8CB0);
  *(void *)&long long v58 = v50;
  *((void *)&v58 + 1) = 0x4014000000000000;
  LOBYTE(v59) = 0;
  *(_DWORD *)((char *)&v59 + 1) = v94[0];
  DWORD1(v59) = *(_DWORD *)((char *)v94 + 3);
  *((void *)&v59 + 1) = v52;
  *(void *)&long long v60 = v51;
  BYTE8(v60) = v19;
  *(_DWORD *)((char *)&v60 + 9) = *(_DWORD *)v93;
  HIDWORD(v60) = *(_DWORD *)&v93[3];
  uint64_t v28 = v41;
  uint64_t v29 = v42;
  *(void *)&long long v61 = v55;
  *((void *)&v61 + 1) = v41;
  *(void *)&long long v62 = v57;
  BYTE8(v62) = v21;
  *(_DWORD *)((char *)&v62 + 9) = *(_DWORD *)v92;
  HIDWORD(v62) = *(_DWORD *)&v92[3];
  *(void *)&long long v63 = v54;
  *((void *)&v63 + 1) = v42;
  LOBYTE(v64) = v53;
  *(_DWORD *)((char *)&v64 + 1) = *(_DWORD *)v91;
  DWORD1(v64) = *(_DWORD *)&v91[3];
  uint64_t v31 = v44;
  uint64_t v30 = v45;
  *((void *)&v64 + 1) = v45;
  *(void *)&v65[0] = v20;
  uint64_t v32 = v43;
  *((void *)&v65[0] + 1) = v44;
  *(void *)&v65[1] = v43;
  BYTE8(v65[1]) = v56;
  long long v33 = v58;
  long long v34 = v59;
  long long v35 = v61;
  a2[2] = v60;
  a2[3] = v35;
  *a2 = v33;
  a2[1] = v34;
  long long v36 = v62;
  long long v37 = v63;
  *(_OWORD *)((char *)a2 + 121) = *(_OWORD *)((char *)v65 + 9);
  long long v38 = v65[0];
  a2[6] = v64;
  a2[7] = v38;
  a2[4] = v36;
  a2[5] = v37;
  uint64_t v39 = (uint64_t)a2 + *(int *)(sub_10000570C(&qword_1001A8CB8) + 48);
  sub_10000A428(v27, v39, &qword_1001A8CB0);
  sub_1000A7DDC((uint64_t)&v58);
  sub_10000ACE0(v49, &qword_1001A8CB0);
  sub_10000ACE0(v27, &qword_1001A8CB0);
  uint64_t v66 = v50;
  uint64_t v67 = 0x4014000000000000;
  unsigned __int8 v68 = 0;
  *(_DWORD *)uint64_t v69 = v94[0];
  *(_DWORD *)&v69[3] = *(_DWORD *)((char *)v94 + 3);
  uint64_t v70 = v52;
  uint64_t v71 = v51;
  LOBYTE(v72) = v46;
  *(_DWORD *)((char *)&v72 + 1) = *(_DWORD *)v93;
  HIDWORD(v72) = *(_DWORD *)&v93[3];
  uint64_t v73 = v55;
  uint64_t v74 = v28;
  uint64_t v75 = v57;
  unsigned __int8 v76 = v21;
  *(_DWORD *)&v77[3] = *(_DWORD *)&v92[3];
  *(_DWORD *)Swift::Int v77 = *(_DWORD *)v92;
  uint64_t v78 = v54;
  uint64_t v79 = v29;
  LOBYTE(v80) = v53;
  *(_DWORD *)((char *)&v80 + 1) = *(_DWORD *)v91;
  HIDWORD(v80) = *(_DWORD *)&v91[3];
  uint64_t v81 = v30;
  uint64_t v82 = v20;
  uint64_t v83 = v31;
  uint64_t v84 = v32;
  char v85 = v56;
  return sub_1000A7E6C((uint64_t)&v66);
}

uint64_t sub_1000A78F4@<X0>(uint64_t a1@<X8>)
{
  sub_100010B2C();
  swift_bridgeObjectRetain();
  uint64_t v2 = Text.init<A>(_:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.Weight.semibold.getter();
  uint64_t v7 = Text.fontWeight(_:)();
  uint64_t v9 = v8;
  char v11 = v10 & 1;
  sub_10000FCC4(v2, v4, v6);
  swift_bridgeObjectRelease();
  static Font.headline.getter();
  uint64_t v12 = Text.font(_:)();
  uint64_t v32 = v13;
  uint64_t v33 = v12;
  char v15 = v14;
  uint64_t v34 = v16;
  swift_release();
  char v31 = v15 & 1;
  sub_10000FCC4(v7, v9, v11);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  swift_bridgeObjectRetain();
  uint64_t v17 = Text.init<A>(_:)();
  uint64_t v19 = v18;
  char v21 = v20 & 1;
  static Font.subheadline.getter();
  uint64_t v22 = Text.font(_:)();
  uint64_t v24 = v23;
  LOBYTE(v2) = v25;
  uint64_t v27 = v26;
  swift_release();
  sub_10000FCC4(v17, v19, v21);
  swift_bridgeObjectRelease();
  uint64_t v28 = swift_getKeyPath();
  *(void *)a1 = v33;
  *(void *)(a1 + 8) = v32;
  *(unsigned char *)(a1 + 16) = v31;
  *(void *)(a1 + 24) = v34;
  *(void *)(a1 + 32) = KeyPath;
  *(void *)(a1 + 40) = 1;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = v22;
  *(void *)(a1 + 64) = v24;
  *(unsigned char *)(a1 + 72) = v2 & 1;
  *(void *)(a1 + 80) = v27;
  *(void *)(a1 + 88) = 0x3FE6666666666666;
  *(void *)(a1 + 96) = v28;
  *(void *)(a1 + 104) = 1;
  *(unsigned char *)(a1 + 112) = 0;
  sub_10000FCD4(v33, v32, v31);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10000FCD4(v22, v24, v2 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10000FCC4(v22, v24, v2 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  sub_10000FCC4(v33, v32, v31);
  swift_release();
  return swift_bridgeObjectRelease();
}

unint64_t sub_1000A7B80()
{
  unint64_t result = qword_1001A8C18;
  if (!qword_1001A8C18)
  {
    sub_100004A58(&qword_1001A8C08);
    sub_10000A780(&qword_1001A8C20, &qword_1001A8C00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8C18);
  }
  return result;
}

unint64_t sub_1000A7C20()
{
  unint64_t result = qword_1001A8C58;
  if (!qword_1001A8C58)
  {
    sub_100004A58(&qword_1001A8C50);
    sub_1000A7C9C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8C58);
  }
  return result;
}

unint64_t sub_1000A7C9C()
{
  unint64_t result = qword_1001A8C60;
  if (!qword_1001A8C60)
  {
    sub_100004A58(&qword_1001A8C68);
    sub_1000A7D3C();
    sub_10000A780(&qword_1001A8C90, &qword_1001A8C98);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8C60);
  }
  return result;
}

unint64_t sub_1000A7D3C()
{
  unint64_t result = qword_1001A8C70;
  if (!qword_1001A8C70)
  {
    sub_100004A58(&qword_1001A8C78);
    sub_10000A780(&qword_1001A8C80, &qword_1001A8C88);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8C70);
  }
  return result;
}

uint64_t sub_1000A7DDC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 88);
  char v4 = *(unsigned char *)(a1 + 96);
  sub_10000FCD4(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10000FCD4(v2, v3, v4);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_1000A7E6C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 88);
  char v4 = *(unsigned char *)(a1 + 96);
  sub_10000FCC4(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_release();
  swift_bridgeObjectRelease();
  sub_10000FCC4(v2, v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000A7F0C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000A7F68()
{
  return sub_10000A780((unint64_t *)&qword_1001A54A0, &qword_1001A5490);
}

unint64_t sub_1000A7FA8()
{
  unint64_t result = qword_1001A70C0;
  if (!qword_1001A70C0)
  {
    type metadata accessor for PromotionalAssets();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A70C0);
  }
  return result;
}

uint64_t sub_1000A8000()
{
  return sub_10000A780(&qword_1001A6368, &qword_1001A6328);
}

double sub_1000A8044()
{
  swift_getKeyPath();
  sub_1000A8440();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(double *)(v0 + 112);
}

uint64_t sub_1000A80B4(uint64_t result, double a2)
{
  *(double *)(result + 112) = a2;
  return result;
}

double sub_1000A80BC()
{
  swift_getKeyPath();
  sub_1000A8440();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(double *)(v0 + 120);
}

uint64_t sub_1000A812C(uint64_t result, double a2)
{
  *(double *)(result + 120) = a2;
  return result;
}

uint64_t sub_1000A8134(uint64_t a1)
{
  *(void *)(v1 + 16) = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v1 + 24) = v3;
  *(unsigned char *)(v1 + 32) = v4 & 1;
  *(void *)(v1 + 40) = v5;
  *(void *)(v1 + 48) = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v1 + 56) = v6;
  *(unsigned char *)(v1 + 64) = v7 & 1;
  *(void *)(v1 + 72) = v8;
  *(void *)(v1 + 80) = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v1 + 88) = v9;
  *(unsigned char *)(v1 + 96) = v10 & 1;
  *(void *)(v1 + 112) = 0;
  *(void *)(v1 + 120) = 0;
  *(void *)(v1 + 104) = v11;
  ObservationRegistrar.init()();
  sub_1000A84A0(a1, v1 + OBJC_IVAR____TtC16EventViewService36PromotionalAssetsPhotoEntryViewModel_photoURL);
  return v1;
}

uint64_t sub_1000A820C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100065FC0(v0 + OBJC_IVAR____TtC16EventViewService36PromotionalAssetsPhotoEntryViewModel_photoURL);
  uint64_t v1 = v0 + OBJC_IVAR____TtC16EventViewService36PromotionalAssetsPhotoEntryViewModel___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1000A82F8()
{
  return type metadata accessor for PromotionalAssetsPhotoEntryViewModel();
}

uint64_t type metadata accessor for PromotionalAssetsPhotoEntryViewModel()
{
  uint64_t result = qword_1001A8D60;
  if (!qword_1001A8D60) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000A834C()
{
  sub_10006531C();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ObservationRegistrar();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

unint64_t sub_1000A8440()
{
  unint64_t result = qword_1001A8E18[0];
  if (!qword_1001A8E18[0])
  {
    type metadata accessor for PromotionalAssetsPhotoEntryViewModel();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001A8E18);
  }
  return result;
}

uint64_t sub_1000A84A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001AD200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A8508@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v31 = a3;
  uint64_t v4 = *(void *)(a2 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(a1, a2);
  swift_getWitnessTable();
  v25[1] = type metadata accessor for _ViewModifier_Content();
  sub_100004A58(&qword_1001A68B8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v26 = *(void *)(a2 + 24);
  uint64_t v27 = v6;
  type metadata accessor for _PreferenceWritingModifier();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  unint64_t v36 = sub_1000425A4();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v29 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  v25[3] = v7;
  v25[2] = swift_getWitnessTable();
  type metadata accessor for GeometryReader();
  v25[4] = swift_getWitnessTable();
  v25[5] = type metadata accessor for _BackgroundModifier();
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)v25 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v28, a2);
  unint64_t v17 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = v26;
  *(void *)(v18 + 16) = v27;
  *(void *)(v18 + 24) = v19;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v18 + v17, (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  uint64_t v34 = GeometryReader.init(content:)();
  uint64_t v35 = v20;
  static Alignment.center.getter();
  uint64_t v21 = swift_getWitnessTable();
  View.background<A>(_:alignment:)();
  swift_release();
  uint64_t v22 = swift_getWitnessTable();
  uint64_t v32 = v21;
  uint64_t v33 = v22;
  swift_getWitnessTable();
  sub_1001221F0(v13, v8);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v9 + 8);
  v23(v13, v8);
  sub_1001221F0(v16, v8);
  return ((uint64_t (*)(char *, uint64_t))v23)(v16, v8);
}

uint64_t sub_1000A88EC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  void v22[2] = a1;
  uint64_t v26 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v4);
  uint64_t v6 = (char *)v22 - v5;
  v22[1] = sub_100004A58(&qword_1001A68B8);
  v22[3] = type metadata accessor for _PreferenceWritingModifier();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7, v8);
  uint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)v22 - v13;
  uint64_t v15 = static Color.clear.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v30 = v15;
  v22[0] = *a2;
  uint64_t v16 = *(void (**)(uint64_t))((char *)a2 + *(int *)(type metadata accessor for SizeModifier() + 40));
  uint64_t v17 = GeometryProxy.frame(in:)();
  v16(v17);
  unint64_t v18 = sub_1000425A4();
  View.preference<A>(key:value:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v6, AssociatedTypeWitness);
  swift_release();
  swift_release();
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v27 = v18;
  uint64_t v28 = WitnessTable;
  swift_getWitnessTable();
  sub_1001221F0(v11, v7);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v24 + 8);
  v20(v11, v7);
  sub_1001221F0(v14, v7);
  return ((uint64_t (*)(char *, uint64_t))v20)(v14, v7);
}

uint64_t sub_1000A8BDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = a1;
  uint64_t v9 = type metadata accessor for SizeModifier();
  uint64_t v10 = (char *)a5 + *(int *)(v9 + 36);
  uint64_t v11 = type metadata accessor for CoordinateSpace();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10, a2, v11);
  uint64_t v13 = (void *)((char *)a5 + *(int *)(v9 + 40));
  *uint64_t v13 = a3;
  v13[1] = a4;
  return result;
}

uint64_t type metadata accessor for SizeModifier()
{
  return sub_10000B72C();
}

uint64_t sub_1000A8C98()
{
  uint64_t result = type metadata accessor for CoordinateSpace();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1000A8D40(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
  }
  else
  {
    uint64_t v8 = *(int *)(a3 + 36);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for CoordinateSpace();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = *(int *)(a3 + 40);
    uint64_t v13 = (uint64_t *)((char *)a1 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
  }
  swift_retain();
  return a1;
}

uint64_t sub_1000A8E28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 36);
  uint64_t v3 = type metadata accessor for CoordinateSpace();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);

  return swift_release();
}

void *sub_1000A8EB0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for CoordinateSpace();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 40);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  swift_retain();
  return a1;
}

void *sub_1000A8F54(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for CoordinateSpace();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 40);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  swift_retain();
  swift_release();
  return a1;
}

void *sub_1000A9004(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for CoordinateSpace();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 40)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 40));
  return a1;
}

void *sub_1000A909C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for CoordinateSpace();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 40)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 40));
  swift_release();
  return a1;
}

uint64_t sub_1000A9140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A9154);
}

uint64_t sub_1000A9154(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for CoordinateSpace();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000A9204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A9218);
}

void *sub_1000A9218(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for CoordinateSpace();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 36);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000A92C0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000A9308()
{
  uint64_t v1 = type metadata accessor for SizeModifier();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = v0 + ((v2 + 32) & ~v2) + *(int *)(v1 + 36);
  uint64_t v4 = type metadata accessor for CoordinateSpace();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000A9408@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for SizeModifier() - 8);
  uint64_t v6 = (void *)(v2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));

  return sub_1000A88EC(a1, v6, a2);
}

uint64_t sub_1000A94AC()
{
  return swift_getWitnessTable();
}

uint64_t *sub_1000A964C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    swift_retain();
    uint64_t v9 = sub_10000570C(&qword_1001A8EA0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  }
  return a1;
}

uint64_t sub_1000A9718(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_10000570C(&qword_1001A8EA0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_1000A9794(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  swift_retain();
  uint64_t v7 = sub_10000570C(&qword_1001A8EA0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

void *sub_1000A9818(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_10000570C(&qword_1001A8EA0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *sub_1000A98B0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_10000570C(&qword_1001A8EA0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_1000A9930(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_10000570C(&qword_1001A8EA0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_1000A99C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A99D4);
}

uint64_t sub_1000A99D4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000570C(&qword_1001A8EA0);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000A9A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A9A9C);
}

void *sub_1000A9A9C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000570C(&qword_1001A8EA0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for CircularProgressViewStyle()
{
  uint64_t result = qword_1001A8F00;
  if (!qword_1001A8F00) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000A9B94()
{
  sub_1000A9C30();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1000A9C30()
{
  if (!qword_1001A8F10)
  {
    sub_1000A9C8C();
    unint64_t v0 = type metadata accessor for ScaledMetric();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001A8F10);
    }
  }
}

unint64_t sub_1000A9C8C()
{
  unint64_t result = qword_1001A8F18;
  if (!qword_1001A8F18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8F18);
  }
  return result;
}

uint64_t sub_1000A9CE0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000A9CFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000570C(&qword_1001A8F48);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for LayoutDirection();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A9F98(v2, (uint64_t)v25);
  long long v39 = v25[12];
  long long v40 = v25[13];
  char v41 = v26;
  long long v35 = v25[8];
  long long v36 = v25[9];
  long long v37 = v25[10];
  long long v38 = v25[11];
  long long v31 = v25[4];
  long long v32 = v25[5];
  long long v33 = v25[6];
  long long v34 = v25[7];
  long long v27 = v25[0];
  long long v28 = v25[1];
  long long v29 = v25[2];
  long long v30 = v25[3];
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v13, enum case for LayoutDirection.leftToRight(_:), v9);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))((char *)v8 + *(int *)(v5 + 36), v13, v9);
  *uint64_t v8 = KeyPath;
  uint64_t v15 = sub_10000570C(&qword_1001A8F50);
  sub_1000AA458((uint64_t)v8, a1 + *(int *)(v15 + 36));
  long long v16 = v40;
  *(_OWORD *)(a1 + 192) = v39;
  *(_OWORD *)(a1 + 208) = v16;
  *(unsigned char *)(a1 + 224) = v41;
  long long v17 = v36;
  *(_OWORD *)(a1 + 128) = v35;
  *(_OWORD *)(a1 + 144) = v17;
  long long v18 = v38;
  *(_OWORD *)(a1 + 160) = v37;
  *(_OWORD *)(a1 + 176) = v18;
  long long v19 = v32;
  *(_OWORD *)(a1 + 64) = v31;
  *(_OWORD *)(a1 + 80) = v19;
  long long v20 = v34;
  *(_OWORD *)(a1 + 96) = v33;
  *(_OWORD *)(a1 + 112) = v20;
  long long v21 = v28;
  *(_OWORD *)a1 = v27;
  *(_OWORD *)(a1 + 16) = v21;
  long long v22 = v30;
  *(_OWORD *)(a1 + 32) = v29;
  *(_OWORD *)(a1 + 48) = v22;
  sub_1000AA594((uint64_t)&v27, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1000AA4C0);
  sub_1000AA534((uint64_t)v8);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  return sub_1000AA594((uint64_t)v25, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1000AA618);
}

__n128 sub_1000A9F98@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = ProgressViewStyleConfiguration.fractionCompleted.getter();
  if (v5)
  {
    sub_1000AA68C((uint64_t)v32);
  }
  else
  {
    double v6 = *(double *)&v4;
    uint64_t v7 = static Alignment.center.getter();
    uint64_t v9 = v8;
    sub_1000AA1D4(a1, (uint64_t)v28, v6);
    type metadata accessor for CircularProgressViewStyle();
    sub_10000570C(&qword_1001A8EA0);
    ScaledMetric.wrappedValue.getter();
    char v10 = static Edge.Set.all.getter();
    EdgeInsets.init(_all:)();
    uint64_t v12 = v11;
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    uint64_t v18 = v17;
    char v30 = 0;
    static UnitPoint.center.getter();
    v32[0] = v7;
    v32[1] = v9;
    long long v39 = v28[6];
    long long v40 = v28[7];
    uint64_t v41 = v29;
    long long v35 = v28[2];
    long long v36 = v28[3];
    long long v37 = v28[4];
    long long v38 = v28[5];
    long long v33 = v28[0];
    long long v34 = v28[1];
    char v42 = v10;
    uint64_t v43 = v12;
    uint64_t v44 = v14;
    uint64_t v45 = v16;
    uint64_t v46 = v18;
    char v47 = v30;
    unint64_t v48 = 0xBFF921FB54442D18;
    uint64_t v49 = v19;
    uint64_t v50 = v20;
    sub_1000AA81C((uint64_t)v32);
  }
  sub_1000AA698((uint64_t)v32, (uint64_t)v31);
  sub_10000570C(&qword_1001A8F60);
  sub_1000AA700();
  _ConditionalContent<>.init(storage:)();
  long long v21 = v64;
  *(_OWORD *)(a2 + 192) = v63;
  *(_OWORD *)(a2 + 208) = v21;
  *(unsigned char *)(a2 + 224) = v65;
  long long v22 = v60;
  *(_OWORD *)(a2 + 128) = v59;
  *(_OWORD *)(a2 + 144) = v22;
  long long v23 = v62;
  *(_OWORD *)(a2 + 160) = v61;
  *(_OWORD *)(a2 + 176) = v23;
  long long v24 = v56;
  *(_OWORD *)(a2 + 64) = v55;
  *(_OWORD *)(a2 + 80) = v24;
  long long v25 = v58;
  *(_OWORD *)(a2 + 96) = v57;
  *(_OWORD *)(a2 + 112) = v25;
  long long v26 = v52;
  *(_OWORD *)a2 = v51;
  *(_OWORD *)(a2 + 16) = v26;
  __n128 result = v54;
  *(_OWORD *)(a2 + 32) = v53;
  *(__n128 *)(a2 + 48) = result;
  return result;
}

uint64_t sub_1000AA1D4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  int v6 = static HierarchicalShapeStyle.primary.getter();
  type metadata accessor for CircularProgressViewStyle();
  sub_10000570C(&qword_1001A8EA0);
  ScaledMetric.wrappedValue.getter();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v7 = static Alignment.center.getter();
  uint64_t v9 = v8;
  uint64_t v10 = *a1;
  uint64_t v11 = Color.opacity(_:)();
  ScaledMetric.wrappedValue.getter();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  *(void *)a2 = v13;
  *(void *)(a2 + 8) = v14;
  *(void *)(a2 + 16) = v15;
  *(void *)(a2 + 24) = v16;
  *(void *)(a2 + 32) = v17;
  *(_DWORD *)(a2 + 40) = v6;
  *(_WORD *)(a2 + 44) = 256;
  *(void *)(a2 + 48) = v7;
  *(void *)(a2 + 56) = v9;
  *(void *)(a2 + 64) = v11;
  *(void *)(a2 + 72) = 0;
  *(double *)(a2 + 80) = a3;
  *(void *)(a2 + 88) = v18;
  *(void *)(a2 + 96) = v19;
  *(void *)(a2 + 104) = v20;
  *(void *)(a2 + 112) = v21;
  *(void *)(a2 + 120) = v22;
  *(void *)(a2 + 128) = v10;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000AA364(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LayoutDirection();
  __chkstk_darwin(v2, v3);
  (*(void (**)(char *, uint64_t))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.layoutDirection.setter();
}

uint64_t sub_1000AA430()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t sub_1000AA458(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A8F48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AA4C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if ((a29 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1000AA534(uint64_t a1)
{
  uint64_t v2 = sub_10000570C(&qword_1001A8F48);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000AA594(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 224);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v4);
  return a1;
}

uint64_t sub_1000AA618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if ((a29 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000AA68C(uint64_t result)
{
  *(unsigned char *)(result + 224) = 1;
  return result;
}

uint64_t sub_1000AA698(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A8F58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000AA700()
{
  unint64_t result = qword_1001A8F68;
  if (!qword_1001A8F68)
  {
    sub_100004A58(&qword_1001A8F60);
    sub_1000AA77C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8F68);
  }
  return result;
}

unint64_t sub_1000AA77C()
{
  unint64_t result = qword_1001A8F70;
  if (!qword_1001A8F70)
  {
    sub_100004A58(&qword_1001A8F78);
    sub_10000A780(&qword_1001A8F80, &qword_1001A8F88);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8F70);
  }
  return result;
}

uint64_t sub_1000AA81C(uint64_t result)
{
  *(unsigned char *)(result + 224) = 0;
  return result;
}

unint64_t sub_1000AA828()
{
  unint64_t result = qword_1001A8F90;
  if (!qword_1001A8F90)
  {
    sub_100004A58(&qword_1001A8F50);
    sub_1000AA8C8();
    sub_10000A780(qword_1001A8FD8, &qword_1001A8F48);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8F90);
  }
  return result;
}

unint64_t sub_1000AA8C8()
{
  unint64_t result = qword_1001A8F98;
  if (!qword_1001A8F98)
  {
    sub_100004A58(&qword_1001A8FA0);
    sub_1000AA968();
    sub_10000A780(&qword_1001A8FC8, &qword_1001A8FD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8F98);
  }
  return result;
}

unint64_t sub_1000AA968()
{
  unint64_t result = qword_1001A8FA8;
  if (!qword_1001A8FA8)
  {
    sub_100004A58(&qword_1001A8FB0);
    sub_1000AA9DC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8FA8);
  }
  return result;
}

unint64_t sub_1000AA9DC()
{
  unint64_t result = qword_1001A8FB8;
  if (!qword_1001A8FB8)
  {
    sub_100004A58(&qword_1001A8FC0);
    sub_1000AA700();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8FB8);
  }
  return result;
}

uint64_t sub_1000AAA58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void (*a4)(long long *__return_ptr)@<X3>, uint64_t a5@<X4>, void (*a6)(long long *__return_ptr, uint64_t)@<X5>, uint64_t a7@<X6>, void (*a8)(long long *__return_ptr)@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  void (*v51)(long long *__return_ptr, uint64_t);
  uint64_t v52;
  char v53;
  uint64_t v54;
  unsigned char *v55;
  unsigned char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  unsigned char *v64;
  uint64_t *v65;
  void *v66;
  uint64_t v67;
  unsigned char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned char *v79;
  unsigned char v81[4];
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unsigned char *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  unsigned char *v91;
  uint64_t v92;
  unsigned char *v93;
  uint64_t v94;
  unsigned char *v95;
  unsigned char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  uint64_t v134;
  void (*v135)(long long *__return_ptr, uint64_t);
  uint64_t v136;
  uint64_t v137;
  void (*v138)(long long *__return_ptr);
  void (*v139)(long long *__return_ptr);
  int v140;
  __int16 v141;
  _DWORD v142[2];
  _DWORD v143[2];
  _DWORD v144[2];
  _DWORD v145[2];
  int v146;
  __int16 v147;
  int v148;
  __int16 v149;
  unsigned char v150[7];
  unsigned char v151[7];
  unsigned char v152[7];
  unsigned char v153[11];
  __int16 v154;
  unsigned char v155[7];
  unsigned char v156[7];
  unsigned char v157[7];
  long long v158;
  long long v159;
  long long v160;
  long long v161;
  long long v162;
  long long v163;
  long long v164;
  long long v165;
  long long v166;
  unsigned __int8 v167;
  unsigned __int8 v168;
  unsigned __int8 v169;
  unsigned __int8 v170;
  unsigned __int8 v171;
  unsigned __int8 v172;
  int v173;
  __int16 v174;
  char v175;
  unsigned char v176[7];
  unsigned char v177[7];
  unsigned char v178[7];
  unsigned char v179[7];
  int v180;
  __int16 v181;
  _OWORD v182[34];
  long long v183;
  long long v184;
  long long v185;
  long long v186;
  long long v187;
  long long v188;
  long long v189;
  long long v190;
  long long v191;
  char v192;
  unsigned char v193[7];
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  unsigned char v199[7];
  uint64_t v200;
  char v201;
  unsigned char v202[7];
  char v203;
  char v204;
  int v205;
  __int16 v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char v211;
  unsigned char v212[7];
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char v217;
  unsigned char v218[7];
  char v219;
  unsigned char v220[7];
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char v225;
  unsigned char v226[7];
  uint64_t v227;
  uint64_t v228;
  char v229;
  char v230;
  int v231;
  __int16 v232;
  uint64_t v233;
  char v234;
  char v235;
  int v236;
  __int16 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char v242;
  unsigned char v243[7];
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char v248;
  unsigned char v249[7];
  char v250;
  unsigned char v251[7];
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  void (*v255)(long long *__return_ptr, uint64_t);
  char v256;
  unsigned char v257[7];
  uint64_t v258;
  uint64_t v259;
  char v260;
  char v261;
  int v262;
  __int16 v263;
  void (*v264)(long long *__return_ptr);

  uint64_t v138 = a8;
  uint64_t v139 = a4;
  uint64_t v134 = a7;
  uint64_t v135 = a6;
  unint64_t v136 = a5;
  char v90 = a3;
  char v88 = a1;
  unsigned __int8 v89 = a2;
  uint64_t v99 = a9;
  uint64_t v137 = a10;
  int64_t v94 = sub_10000570C(&qword_1001A9088) - 8;
  __chkstk_darwin(v94, v10);
  unint64_t v93 = &v81[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = sub_10000570C(&qword_1001A9090);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = &v81[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = sub_10000570C(&qword_1001A9098);
  uint64_t v17 = v16 - 8;
  __chkstk_darwin(v16, v18);
  unsigned __int8 v87 = &v81[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v92 = sub_10000570C(&qword_1001A90A0) - 8;
  __chkstk_darwin(v92, v20);
  uint64_t v91 = &v81[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v22 = sub_10000570C(&qword_1001A90A8);
  __chkstk_darwin(v22 - 8, v23);
  Swift::Int v96 = &v81[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v25 = sub_10000570C(&qword_1001A90B0);
  unint64_t v97 = *(void *)(v25 - 8);
  uint64_t v98 = v25;
  __chkstk_darwin(v25, v26);
  int64_t v95 = &v81[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000570C(&qword_1001A90B8);
  type metadata accessor for ToolbarPlacement();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_100153180;
  static ToolbarPlacement.navigationBar.getter();
  sub_10000570C(&qword_1001A9070);
  sub_1000B03B8(&qword_1001A90C0, &qword_1001A9070, (void (*)(void))sub_1000AFC04);
  View.toolbar(_:for:)();
  uint64_t v28 = swift_bridgeObjectRelease();
  v135(&v158, v28);
  char v86 = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  char v85 = static Edge.Set.all.getter();
  uint64_t v100 = static SafeAreaRegions.all.getter();
  uint64_t v167 = 0;
  uint64_t v131 = static VerticalAlignment.center.getter();
  unsigned __int8 v37 = v167;
  uint64_t v82 = v167;
  v139(&v183);
  LODWORD(v134) = static Edge.Set.vertical.getter();
  uint64_t v111 = BYTE1(v183);
  uint64_t v112 = v183;
  unint64_t v109 = v184;
  uint64_t v110 = *((void *)&v183 + 1);
  uint64_t v106 = v185;
  uint64_t v107 = *((void *)&v184 + 1);
  uint64_t v104 = BYTE8(v185);
  char v101 = *((void *)&v186 + 1);
  uint64_t v103 = v186;
  uint64_t v130 = *((void *)&v187 + 1);
  BOOL v125 = v187;
  unsigned __int8 v38 = v188;
  EdgeInsets.init(_all:)();
  uint64_t v40 = v39;
  uint64_t v83 = v39;
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v169 = v38;
  uint64_t v168 = 0;
  HorizontalEdge.rawValue.getter();
  uint64_t v132 = Edge.init(rawValue:)();
  uint64_t v124 = static SafeAreaRegions.container.getter();
  BOOL v108 = v169;
  uint64_t v116 = v168;
  uint64_t v170 = 1;
  uint64_t v139 = (void (*)(long long *__return_ptr))static VerticalAlignment.center.getter();
  uint64_t v117 = v170;
  v138(&v183);
  LODWORD(v138) = static Edge.Set.vertical.getter();
  uint64_t v114 = BYTE1(v183);
  uint64_t v115 = v183;
  uint64_t v121 = v184;
  uint64_t v122 = *((void *)&v183 + 1);
  uint64_t v119 = v185;
  char v120 = *((void *)&v184 + 1);
  BOOL v118 = BYTE8(v185);
  uint64_t v128 = *((void *)&v186 + 1);
  uint64_t v129 = v186;
  uint64_t v126 = *((void *)&v187 + 1);
  uint64_t v127 = v187;
  unsigned __int8 v47 = v188;
  EdgeInsets.init(_all:)();
  uint64_t v84 = v48;
  unint64_t v136 = v50;
  uint64_t v137 = v49;
  uint64_t v135 = v51;
  uint64_t v172 = v47;
  Swift::Int v171 = 0;
  HorizontalEdge.rawValue.getter();
  uint64_t v133 = Edge.init(rawValue:)();
  uint64_t v123 = static SafeAreaRegions.container.getter();
  uint64_t v102 = v172;
  uint64_t v113 = v171;
  uint64_t v175 = 1;
  uint64_t v146 = v180;
  uint64_t v147 = v181;
  v145[0] = *(_DWORD *)v179;
  *(_DWORD *)((char *)v145 + 3) = *(_DWORD *)&v179[3];
  v144[0] = *(_DWORD *)v178;
  *(_DWORD *)((char *)v144 + 3) = *(_DWORD *)&v178[3];
  *(_DWORD *)((char *)v143 + 3) = *(_DWORD *)&v177[3];
  v143[0] = *(_DWORD *)v177;
  v142[0] = *(_DWORD *)v176;
  *(_DWORD *)((char *)v142 + 3) = *(_DWORD *)&v176[3];
  uint64_t v105 = 1;
  uint64_t v140 = v173;
  uint64_t v141 = v174;
  *(void *)uint64_t v15 = static HorizontalAlignment.center.getter();
  *((void *)v15 + 1) = 0;
  v15[16] = 0;
  long long v52 = sub_10000570C(&qword_1001A90D8);
  sub_1000B2258(v88, v89, v90, (double *)&v15[*(int *)(v52 + 44)]);
  long long v53 = static Edge.Set.all.getter();
  __n128 v54 = static SafeAreaRegions.all.getter();
  long long v55 = v87;
  sub_10000A428((uint64_t)v15, (uint64_t)v87, &qword_1001A9090);
  long long v56 = &v55[*(int *)(v17 + 44)];
  long long v57 = (uint64_t)v55;
  *(void *)long long v56 = v54;
  v56[8] = v53;
  sub_10000ACE0((uint64_t)v15, &qword_1001A9090);
  long long v58 = static Alignment.center.getter();
  long long v60 = v59;
  *(_DWORD *)((char *)&v182[23] + 10) = v180;
  *(_DWORD *)((char *)&v182[26] + 1) = *(_DWORD *)v179;
  *(_DWORD *)((char *)&v182[28] + 9) = *(_DWORD *)v178;
  *(_DWORD *)((char *)&v182[29] + 1) = *(_DWORD *)v177;
  *(_DWORD *)((char *)&v182[31] + 9) = *(_DWORD *)v176;
  *(_DWORD *)((char *)&v182[33] + 2) = v173;
  HIWORD(v182[23]) = v181;
  DWORD1(v182[26]) = *(_DWORD *)&v179[3];
  HIDWORD(v182[28]) = *(_DWORD *)&v178[3];
  DWORD1(v182[29]) = *(_DWORD *)&v177[3];
  HIDWORD(v182[31]) = *(_DWORD *)&v176[3];
  WORD3(v182[33]) = v174;
  v182[6] = v164;
  v182[7] = v165;
  v182[8] = v166;
  v182[2] = v160;
  v182[3] = v161;
  v182[4] = v162;
  v182[5] = v163;
  v182[0] = v158;
  v182[1] = v159;
  LOBYTE(v55) = v86;
  LOBYTE(v182[9]) = v86;
  *((void *)&v182[9] + 1) = v30;
  *(void *)&v182[10] = v32;
  *((void *)&v182[10] + 1) = v34;
  *(void *)&v182[11] = v36;
  BYTE8(v182[11]) = v37;
  *(void *)&v182[12] = v100;
  long long v61 = v85;
  BYTE8(v182[12]) = v85;
  LOBYTE(v182[13]) = v112;
  BYTE1(v182[13]) = v111;
  *((void *)&v182[13] + 1) = v110;
  *(void *)&v182[14] = v109;
  *((void *)&v182[14] + 1) = v107;
  *(void *)&v182[15] = v106;
  BYTE8(v182[15]) = v104;
  *(void *)&v182[16] = v103;
  *((void *)&v182[16] + 1) = v101;
  *(void *)&v182[17] = v125;
  *((void *)&v182[17] + 1) = v130;
  LOBYTE(v182[18]) = v108;
  BYTE8(v182[18]) = v134;
  *(void *)&v182[19] = v40;
  *((void *)&v182[19] + 1) = v42;
  long long v62 = v42;
  *(void *)&v182[20] = v44;
  *((void *)&v182[20] + 1) = v46;
  LOBYTE(v182[21]) = v116;
  *((void *)&v182[21] + 1) = v124;
  *(void *)&v182[22] = 0;
  BYTE8(v182[22]) = v117;
  BYTE9(v182[22]) = v132;
  *(void *)&v182[23] = v131;
  BYTE8(v182[23]) = v115;
  BYTE9(v182[23]) = v114;
  *(void *)&v182[24] = v122;
  *((void *)&v182[24] + 1) = v121;
  *(void *)&v182[25] = v120;
  *((void *)&v182[25] + 1) = v119;
  LOBYTE(v182[26]) = v118;
  *((void *)&v182[26] + 1) = v129;
  *(void *)&v182[27] = v128;
  *((void *)&v182[27] + 1) = v127;
  *(void *)&v182[28] = v126;
  BYTE8(v182[28]) = v102;
  LOBYTE(v182[29]) = (_BYTE)v138;
  long long v63 = v84;
  *((void *)&v182[29] + 1) = v84;
  *(void *)&v182[30] = v137;
  *((void *)&v182[30] + 1) = v136;
  *(void *)&v182[31] = v135;
  BYTE8(v182[31]) = v113;
  v182[32] = (unint64_t)v123;
  LOBYTE(v182[33]) = v105;
  BYTE1(v182[33]) = v133;
  *((void *)&v182[33] + 1) = v139;
  long long v64 = v93;
  sub_10000A428(v57, (uint64_t)v93, &qword_1001A9098);
  char v65 = (uint64_t *)&v64[*(int *)(v94 + 44)];
  uint64_t *v65 = v58;
  v65[1] = v60;
  uint64_t v66 = v91;
  sub_10000A428((uint64_t)v64, (uint64_t)&v91[*(int *)(v92 + 44)], &qword_1001A9088);
  memcpy(v66, v182, 0x220uLL);
  sub_1000AFCA4((uint64_t)v182);
  sub_10000ACE0((uint64_t)v64, &qword_1001A9088);
  sub_10000ACE0(v57, &qword_1001A9098);
  uint64_t v192 = (char)v55;
  uint64_t v198 = v82;
  uint64_t v200 = v100;
  uint64_t v201 = v61;
  uint64_t v203 = v112;
  uint64_t v204 = v111;
  uint64_t v207 = v110;
  uint64_t v208 = v109;
  uint64_t v209 = v107;
  uint64_t v210 = v106;
  uint64_t v211 = v104;
  uint64_t v213 = v103;
  uint64_t v214 = v101;
  uint64_t v189 = v164;
  uint64_t v190 = v165;
  uint64_t v191 = v166;
  uint64_t v185 = v160;
  uint64_t v186 = v161;
  uint64_t v187 = v162;
  uint64_t v188 = v163;
  uint64_t v183 = v158;
  uint64_t v184 = v159;
  *(_DWORD *)uint64_t v193 = *(_DWORD *)v157;
  *(_DWORD *)&v193[3] = *(_DWORD *)&v157[3];
  uint64_t v194 = v30;
  uint64_t v195 = v32;
  uint64_t v196 = v34;
  uint64_t v197 = v36;
  *(_DWORD *)uint64_t v199 = *(_DWORD *)v156;
  *(_DWORD *)&v199[3] = *(_DWORD *)&v156[3];
  *(_DWORD *)&v202[3] = *(_DWORD *)&v155[3];
  *(_DWORD *)uint64_t v202 = *(_DWORD *)v155;
  uint64_t v206 = v154;
  uint64_t v205 = *(_DWORD *)&v153[7];
  *(_DWORD *)uint64_t v212 = *(_DWORD *)v153;
  *(_DWORD *)&v212[3] = *(_DWORD *)&v153[3];
  uint64_t v215 = v125;
  BOOL v216 = v130;
  uint64_t v217 = v108;
  *(_DWORD *)uint64_t v218 = *(_DWORD *)v152;
  *(_DWORD *)&v218[3] = *(_DWORD *)&v152[3];
  uint64_t v219 = v134;
  *(_DWORD *)uint64_t v220 = *(_DWORD *)v151;
  *(_DWORD *)&v220[3] = *(_DWORD *)&v151[3];
  uint64_t v221 = v83;
  char v222 = v62;
  uint64_t v223 = v44;
  uint64_t v224 = v46;
  uint64_t v225 = v116;
  *(_DWORD *)uint64_t v226 = *(_DWORD *)v150;
  *(_DWORD *)&v226[3] = *(_DWORD *)&v150[3];
  uint64_t v227 = v124;
  uint64_t v228 = 0;
  uint64_t v229 = v117;
  uint64_t v230 = v132;
  uint64_t v231 = v148;
  uint64_t v232 = v149;
  uint64_t v233 = v131;
  uint64_t v234 = v115;
  uint64_t v235 = v114;
  uint64_t v236 = v146;
  uint64_t v237 = v147;
  uint64_t v238 = v122;
  uint64_t v239 = v121;
  uint64_t v240 = v120;
  char v241 = v119;
  uint64_t v242 = v118;
  *(_DWORD *)uint64_t v243 = v145[0];
  *(_DWORD *)&v243[3] = *(_DWORD *)((char *)v145 + 3);
  uint64_t v244 = v129;
  uint64_t v245 = v128;
  uint64_t v246 = v127;
  uint64_t v247 = v126;
  uint64_t v248 = v102;
  *(_DWORD *)uint64_t v249 = v144[0];
  *(_DWORD *)&v249[3] = *(_DWORD *)((char *)v144 + 3);
  uint64_t v250 = (char)v138;
  *(_DWORD *)unint64_t v251 = v143[0];
  *(_DWORD *)&v251[3] = *(_DWORD *)((char *)v143 + 3);
  uint64_t v252 = v63;
  uint64_t v253 = v137;
  uint64_t v254 = v136;
  uint64_t v255 = v135;
  uint64_t v256 = v113;
  *(_DWORD *)long long v257 = v142[0];
  *(_DWORD *)&v257[3] = *(_DWORD *)((char *)v142 + 3);
  uint64_t v258 = v123;
  uint64_t v259 = 0;
  uint64_t v260 = v105;
  uint64_t v261 = v133;
  uint64_t v262 = v140;
  id v263 = v141;
  id v264 = v139;
  sub_1000AFD3C((uint64_t)&v183);
  uint64_t v67 = static Alignment.top.getter();
  unsigned __int8 v68 = v96;
  sub_10012413C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v96, 0.0, 1, INFINITY, 0, v67, v69);
  sub_10000ACE0((uint64_t)v66, &qword_1001A90A0);
  uint64_t v70 = static Alignment.center.getter();
  uint64_t v72 = v71;
  uint64_t v73 = sub_10000570C(&qword_1001A90E0);
  uint64_t v74 = v99;
  uint64_t v75 = v99 + *(int *)(v73 + 36);
  sub_10000A428((uint64_t)v68, v75, &qword_1001A90A8);
  unsigned __int8 v76 = (uint64_t *)(v75 + *(int *)(sub_10000570C(&qword_1001A90E8) + 36));
  *unsigned __int8 v76 = v70;
  v76[1] = v72;
  uint64_t v78 = v97;
  Swift::Int v77 = v98;
  uint64_t v79 = v95;
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v97 + 16))(v74, v95, v98);
  sub_10000ACE0((uint64_t)v68, &qword_1001A90A8);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v78 + 8))(v79, v77);
}

uint64_t sub_1000AB724()
{
  uint64_t v0 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v0 - 8, v1);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v2._uint64_t countAndFlagsBits = 0xD00000000000003CLL;
  v2._object = (void *)0x800000010015EBA0;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v2);
  Image.init(systemName:)();
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v3);
  return LocalizedStringKey.init(stringInterpolation:)();
}

uint64_t sub_1000AB7FC()
{
  type metadata accessor for SavedWallpaperViewModel();
  type metadata accessor for State();
  State.wrappedValue.getter();
  return v1;
}

uint64_t sub_1000AB850(char a1)
{
  sub_10000570C(&qword_1001A5448);
  *(unsigned char *)(swift_allocObject() + 16) = a1;
  sub_10000A780(&qword_1001A5450, &qword_1001A5448);

  return ObservedObject.init(wrappedValue:)();
}

uint64_t sub_1000AB8E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v50 = a2;
  uint64_t v5 = sub_10000570C(&qword_1001A9060);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000570C(&qword_1001A9068);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000570C(&qword_1001A9070);
  uint64_t v16 = v15 - 8;
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = *(void *)(a1 + 16);
  uint64_t v49 = *(void *)(a1 + 24);
  uint64_t v55 = v48;
  uint64_t v56 = v49;
  uint64_t v57 = v3;
  sub_10000570C(&qword_1001A9078);
  sub_10000A780(&qword_1001A9080, &qword_1001A9078);
  NavigationStack.init<>(root:)();
  char v20 = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v14, v9, v5);
  uint64_t v29 = &v14[*(int *)(v11 + 44)];
  char *v29 = v20;
  *((void *)v29 + 1) = v22;
  *((void *)v29 + 2) = v24;
  *((void *)v29 + 3) = v26;
  *((void *)v29 + 4) = v28;
  v29[40] = 0;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  char v30 = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  sub_10000A428((uint64_t)v14, (uint64_t)v19, &qword_1001A9068);
  uint64_t v39 = &v19[*(int *)(v16 + 44)];
  *uint64_t v39 = v30;
  *((void *)v39 + 1) = v32;
  *((void *)v39 + 2) = v34;
  *((void *)v39 + 3) = v36;
  *((void *)v39 + 4) = v38;
  v39[40] = 0;
  sub_10000ACE0((uint64_t)v14, &qword_1001A9068);
  uint64_t v41 = *(void *)(v3 + 16);
  uint64_t v40 = *(void *)(v3 + 24);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v42 = static MainActor.shared.getter();
  uint64_t v43 = (void *)swift_allocObject();
  v43[2] = v42;
  v43[3] = &protocol witness table for MainActor;
  v43[4] = v41;
  v43[5] = v40;
  swift_retain();
  uint64_t v44 = static MainActor.shared.getter();
  uint64_t v45 = (void *)swift_allocObject();
  v45[2] = v44;
  v45[3] = &protocol witness table for MainActor;
  v45[4] = v41;
  v45[5] = v40;
  Binding.init(get:set:)();
  uint64_t v52 = v48;
  uint64_t v53 = v49;
  uint64_t v54 = v3;
  sub_1000AAA58(v58, v59, v60, (void (*)(long long *__return_ptr))sub_1000AE88C, 0, (void (*)(long long *__return_ptr, uint64_t))sub_1000AE918, 0, (void (*)(long long *__return_ptr))sub_1000AFBF8, v50, (uint64_t)v51);
  swift_release();
  swift_release();
  return sub_10000ACE0((uint64_t)v19, &qword_1001A9070);
}

uint64_t sub_1000ABCF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = static HorizontalAlignment.center.getter();
  *(void *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t v8 = sub_10000570C(&qword_1001A90F0);
  return sub_1000ABD58(a1, a2, a3, a4 + *(int *)(v8 + 44));
}

uint64_t sub_1000ABD58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v213 = a1;
  uint64_t v207 = a4;
  uint64_t v6 = sub_10000570C(&qword_1001A90F8);
  uint64_t v189 = *(void *)(v6 - 8);
  uint64_t v190 = v6;
  __chkstk_darwin(v6, v7);
  uint64_t v188 = (char *)&v183 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000570C(&qword_1001A9100);
  uint64_t v199 = *(void *)(v9 - 8);
  uint64_t v200 = v9;
  __chkstk_darwin(v9, v10);
  uint64_t v187 = (char *)&v183 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v205 = (char *)&v183 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v210 = *(void *)(v15 - 8);
  uint64_t v211 = v15;
  uint64_t v17 = __chkstk_darwin(v15, v16);
  uint64_t v185 = v18;
  uint64_t v186 = (char *)&v183 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  uint64_t v198 = (char *)&v183 - v20;
  uint64_t v21 = sub_10000570C(&qword_1001A9108);
  uint64_t v23 = __chkstk_darwin(v21 - 8, v22);
  uint64_t v206 = (uint64_t)&v183 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v25);
  uint64_t v214 = (uint64_t)&v183 - v26;
  uint64_t v216 = a2;
  uint64_t v209 = a3;
  uint64_t v217 = type metadata accessor for SavedWallpaperView();
  uint64_t v208 = *(void *)(v217 - 8);
  uint64_t v27 = *(void *)(v208 + 64);
  __chkstk_darwin(v217, v28);
  uint64_t v212 = (char *)&v183 - v29;
  uint64_t v192 = sub_10000570C(&qword_1001A9110);
  __chkstk_darwin(v192, v30);
  uint64_t v32 = (char *)&v183 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v196 = type metadata accessor for CoordinateSpace();
  uint64_t v33 = *(void *)(v196 - 8);
  __chkstk_darwin(v196, v34);
  uint64_t v193 = (char *)&v183 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for Image.ResizingMode();
  uint64_t v37 = *(void *)(v36 - 8);
  __chkstk_darwin(v36, v38);
  uint64_t v40 = (char *)&v183 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v191 = sub_10000570C(&qword_1001A9118);
  __chkstk_darwin(v191, v41);
  uint64_t v43 = (char *)&v183 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v194 = sub_10000570C(&qword_1001A9120);
  __chkstk_darwin(v194, v44);
  uint64_t v197 = (id *)((char *)&v183 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v195 = sub_10000570C(&qword_1001A9128);
  __chkstk_darwin(v195, v46);
  uint64_t v202 = (char *)&v183 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_10000570C(&qword_1001A9130);
  uint64_t v203 = *(void *)(v48 - 8);
  uint64_t v204 = v48;
  __chkstk_darwin(v48, v49);
  uint64_t v201 = (uint64_t)&v183 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_10000570C(&qword_1001A9138);
  uint64_t v53 = __chkstk_darwin(v51 - 8, v52);
  uint64_t v215 = (uint64_t)&v183 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v53, v55);
  uint64_t v218 = (uint64_t)&v183 - v56;
  NSString v57 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v58 = [self imageNamed:v57];

  uint64_t v184 = v27;
  if (v58)
  {
    id v183 = v58;
    Image.init(uiImage:)();
    (*(void (**)(char *, void, uint64_t))(v37 + 104))(v40, enum case for Image.ResizingMode.stretch(_:), v36);
    uint64_t v59 = Image.resizable(capInsets:resizingMode:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v40, v36);
    sub_1000AB7FC();
    sub_10013A660();
    swift_release();
    char v60 = static Edge.Set.all.getter();
    EdgeInsets.init(_all:)();
    uint64_t v62 = v61;
    uint64_t v64 = v63;
    uint64_t v66 = v65;
    uint64_t v68 = v67;
    static Alignment.center.getter();
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
    long long v220 = (unint64_t)v59;
    *(_WORD *)uint64_t v221 = 1;
    v221[8] = v60;
    *(void *)&v221[16] = v62;
    *(void *)&v221[24] = v64;
    *(void *)&v221[32] = v66;
    *(void *)&v221[40] = v68;
    v221[48] = 0;
    *(_WORD *)&v221[49] = 0;
    *(void *)&v221[56] = v253;
    v221[64] = v254;
    *(void *)&v221[72] = v255;
    v221[80] = v256;
    *(void *)&v221[88] = v257;
    v221[96] = v258;
    *(void *)&v221[104] = v259;
    v221[112] = v260;
    *(void *)&v221[120] = v261;
    v221[128] = v262;
    *(void *)&v221[136] = v263;
    v221[144] = v264;
    *(_OWORD *)&v221[152] = v265;
    uint64_t v69 = v193;
    uint64_t v70 = v196;
    (*(void (**)(char *, void, uint64_t))(v33 + 104))(v193, enum case for CoordinateSpace.local(_:), v196);
    uint64_t v71 = v192;
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(&v32[*(int *)(v192 + 36)], v69, v70);
    *(void *)uint64_t v32 = &type metadata for BezelSizePreferenceKey;
    uint64_t v72 = (void (**)(double *@<X8>, double@<D2>, double@<D3>))&v32[*(int *)(v71 + 40)];
    char *v72 = sub_100074E78;
    v72[1] = 0;
    sub_10000A428((uint64_t)v32, (uint64_t)&v43[*(int *)(v191 + 36)], &qword_1001A9110);
    long long v73 = *(_OWORD *)&v221[128];
    *((_OWORD *)v43 + 8) = *(_OWORD *)&v221[112];
    *((_OWORD *)v43 + 9) = v73;
    *((_OWORD *)v43 + 10) = *(_OWORD *)&v221[144];
    *((void *)v43 + 22) = *(void *)&v221[160];
    long long v74 = *(_OWORD *)&v221[64];
    *((_OWORD *)v43 + 4) = *(_OWORD *)&v221[48];
    *((_OWORD *)v43 + 5) = v74;
    long long v75 = *(_OWORD *)&v221[96];
    *((_OWORD *)v43 + 6) = *(_OWORD *)&v221[80];
    *((_OWORD *)v43 + 7) = v75;
    long long v76 = *(_OWORD *)v221;
    *(_OWORD *)uint64_t v43 = v220;
    *((_OWORD *)v43 + 1) = v76;
    long long v77 = *(_OWORD *)&v221[32];
    *((_OWORD *)v43 + 2) = *(_OWORD *)&v221[16];
    *((_OWORD *)v43 + 3) = v77;
    sub_100012A84((uint64_t)&v220);
    sub_10000ACE0((uint64_t)v32, &qword_1001A9110);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v69, v70);
    swift_release();
    uint64_t v78 = v208;
    uint64_t v79 = v212;
    uint64_t v80 = v213;
    uint64_t v81 = v27;
    uint64_t v82 = v217;
    (*(void (**)(char *, uint64_t, uint64_t))(v208 + 16))(v212, v213, v217);
    unint64_t v83 = (*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
    unint64_t v84 = (v81 + v83 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v85 = swift_allocObject();
    uint64_t v86 = v209;
    *(void *)(v85 + 16) = v216;
    *(void *)(v85 + 24) = v86;
    (*(void (**)(unint64_t, char *, uint64_t))(v78 + 32))(v85 + v83, v79, v82);
    unsigned __int8 v87 = v183;
    *(void *)(v85 + v84) = v183;
    char v88 = (char *)v197;
    sub_10000A428((uint64_t)v43, (uint64_t)v197, &qword_1001A9118);
    unsigned __int8 v89 = (uint64_t (**)(uint64_t))&v88[*(int *)(v194 + 36)];
    *unsigned __int8 v89 = sub_1000B0624;
    v89[1] = (uint64_t (*)(uint64_t))v85;
    id v90 = v87;
    sub_10000ACE0((uint64_t)v43, &qword_1001A9118);
    uint64_t v91 = static Alignment.center.getter();
    uint64_t v93 = v92;
    uint64_t v94 = (uint64_t)v202;
    uint64_t v95 = (uint64_t)&v202[*(int *)(v195 + 36)];
    sub_1000AD0C0(v80, v216, v86, v95);
    Swift::Int v96 = (uint64_t *)(v95 + *(int *)(sub_10000570C(&qword_1001A9188) + 36));
    *Swift::Int v96 = v91;
    v96[1] = v93;
    sub_10000A3C4((uint64_t)v88, v94, &qword_1001A9120);
    LOBYTE(v91) = static Edge.Set.bottom.getter();
    EdgeInsets.init(_all:)();
    uint64_t v98 = v97;
    uint64_t v100 = v99;
    uint64_t v102 = v101;
    uint64_t v104 = v103;
    uint64_t v105 = v201;
    sub_10000A428(v94, v201, &qword_1001A9128);

    uint64_t v106 = v204;
    uint64_t v107 = v105 + *(int *)(v204 + 36);
    *(unsigned char *)uint64_t v107 = v91;
    *(void *)(v107 + 8) = v98;
    *(void *)(v107 + 16) = v100;
    *(void *)(v107 + 24) = v102;
    *(void *)(v107 + 32) = v104;
    *(unsigned char *)(v107 + 40) = 0;
    sub_10000ACE0(v94, &qword_1001A9128);
    uint64_t v108 = v105;
    uint64_t v109 = v218;
    sub_10000A3C4(v108, v218, &qword_1001A9130);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v203 + 56))(v109, 0, 1, v106);
    uint64_t v110 = v80;
  }
  else
  {
    uint64_t v109 = v218;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v203 + 56))(v218, 1, 1, v204);
    uint64_t v110 = v213;
  }
  uint64_t v111 = static HorizontalAlignment.center.getter();
  sub_1000ADF18((uint64_t)v234);
  *(_OWORD *)((char *)&v236[6] + 7) = v234[6];
  *(_OWORD *)((char *)&v236[5] + 7) = v234[5];
  *(_OWORD *)((char *)&v236[2] + 7) = v234[2];
  *(_OWORD *)((char *)&v236[1] + 7) = v234[1];
  *(_OWORD *)((char *)&v236[7] + 7) = v235[0];
  v236[8] = *(_OWORD *)((char *)v235 + 9);
  *(_OWORD *)((char *)&v236[3] + 7) = v234[3];
  char v237 = 0;
  *(_OWORD *)((char *)&v236[4] + 7) = v234[4];
  *(_OWORD *)((char *)v236 + 7) = v234[0];
  char v112 = 0;
  long long v250 = v236[6];
  long long v251 = v236[7];
  long long v252 = *(_OWORD *)((char *)v235 + 9);
  long long v246 = v236[2];
  long long v247 = v236[3];
  long long v249 = v236[5];
  long long v248 = v236[4];
  long long v245 = v236[1];
  long long v244 = v236[0];
  int v113 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v115 = v114;
  uint64_t v117 = v116;
  uint64_t v119 = v118;
  uint64_t v121 = v120;
  unsigned __int8 v238 = 0;
  LODWORD(v202) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v123 = v122;
  uint64_t v125 = v124;
  uint64_t v127 = v126;
  uint64_t v129 = v128;
  LODWORD(v201) = v238;
  char v239 = 0;
  uint64_t v130 = (uint64_t)v205;
  URL.init(string:)();
  swift_bridgeObjectRelease();
  uint64_t v131 = v210;
  uint64_t v132 = v211;
  int v133 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v210 + 48))(v130, 1, v211);
  uint64_t v204 = v111;
  LODWORD(v213) = 0;
  LODWORD(v203) = v113;
  if (v133 == 1)
  {
    sub_10000ACE0(v130, &qword_1001AD200);
    uint64_t v134 = 1;
    uint64_t v135 = v214;
    uint64_t v136 = v200;
  }
  else
  {
    uint64_t v197 = *(id **)(v131 + 32);
    uint64_t v137 = v198;
    ((void (*)(char *, uint64_t, uint64_t))v197)(v198, v130, v132);
    uint64_t v138 = v208;
    (*(void (**)(char *, uint64_t, uint64_t))(v208 + 16))(v212, v110, v217);
    uint64_t v139 = v131;
    uint64_t v140 = *(void (**)(char *, char *, uint64_t))(v131 + 16);
    uint64_t v141 = v186;
    v140(v186, v137, v132);
    unint64_t v142 = (*(unsigned __int8 *)(v138 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80);
    unint64_t v143 = (v184 + *(unsigned __int8 *)(v139 + 80) + v142) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80);
    uint64_t v144 = v132;
    uint64_t v145 = swift_allocObject();
    uint64_t v146 = v217;
    uint64_t v147 = v209;
    *(void *)(v145 + 16) = v216;
    *(void *)(v145 + 24) = v147;
    (*(void (**)(unint64_t, char *, uint64_t))(v138 + 32))(v145 + v142, v212, v146);
    uint64_t v148 = ((uint64_t (*)(unint64_t, char *, uint64_t))v197)(v145 + v143, v141, v144);
    __chkstk_darwin(v148, v149);
    sub_10000570C(&qword_1001A9148);
    sub_1000B09EC(&qword_1001A9150, &qword_1001A9148, (void (*)(void))sub_1000B02EC);
    uint64_t v150 = v188;
    Button.init(action:label:)();
    LOBYTE(v145) = static Edge.Set.horizontal.getter();
    EdgeInsets.init(_all:)();
    uint64_t v209 = v129;
    uint64_t v151 = v123;
    uint64_t v152 = v115;
    uint64_t v154 = v153;
    uint64_t v216 = v125;
    uint64_t v217 = v121;
    uint64_t v155 = v117;
    uint64_t v157 = v156;
    uint64_t v212 = v127;
    uint64_t v158 = v119;
    uint64_t v160 = v159;
    uint64_t v162 = v161;
    uint64_t v164 = v189;
    uint64_t v163 = v190;
    uint64_t v165 = v187;
    (*(void (**)(char *, char *, uint64_t))(v189 + 16))(v187, v150, v190);
    uint64_t v136 = v200;
    uint64_t v166 = &v165[*(int *)(v200 + 36)];
    *uint64_t v166 = v145;
    *((void *)v166 + 1) = v154;
    *((void *)v166 + 2) = v157;
    uint64_t v115 = v152;
    uint64_t v123 = v151;
    uint64_t v129 = v209;
    uint64_t v117 = v155;
    *((void *)v166 + 3) = v160;
    *((void *)v166 + 4) = v162;
    uint64_t v119 = v158;
    uint64_t v127 = v212;
    uint64_t v125 = v216;
    uint64_t v121 = v217;
    v166[40] = 0;
    uint64_t v167 = v163;
    char v112 = v213;
    (*(void (**)(char *, uint64_t))(v164 + 8))(v150, v167);
    (*(void (**)(char *, uint64_t))(v210 + 8))(v198, v211);
    uint64_t v168 = (uint64_t)v165;
    uint64_t v109 = v218;
    uint64_t v135 = v214;
    sub_10000A3C4(v168, v214, &qword_1001A9100);
    uint64_t v134 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v199 + 56))(v135, v134, 1, v136);
  uint64_t v169 = v135;
  uint64_t v170 = v215;
  sub_10000A428(v109, v215, &qword_1001A9138);
  char v171 = v239;
  uint64_t v172 = v169;
  uint64_t v173 = v206;
  sub_10000A428(v172, v206, &qword_1001A9108);
  uint64_t v174 = v170;
  uint64_t v175 = v207;
  sub_10000A428(v174, v207, &qword_1001A9138);
  uint64_t v176 = sub_10000570C(&qword_1001A9140);
  uint64_t v177 = *(int *)(v176 + 48);
  *(_OWORD *)((char *)&v219[12] + 1) = v249;
  *(_OWORD *)((char *)&v219[14] + 1) = v250;
  *(_OWORD *)((char *)&v219[16] + 1) = v251;
  *(_OWORD *)((char *)&v219[18] + 1) = v252;
  *(_OWORD *)((char *)&v219[4] + 1) = v245;
  *(_OWORD *)((char *)&v219[6] + 1) = v246;
  *(_OWORD *)((char *)&v219[8] + 1) = v247;
  *(_OWORD *)((char *)&v219[10] + 1) = v248;
  uint64_t v178 = v204;
  v219[0] = v204;
  v219[1] = 0x4020000000000000;
  LOBYTE(v219[2]) = v112;
  *(_OWORD *)((char *)&v219[2] + 1) = v244;
  *(_DWORD *)((char *)&v219[20] + 1) = *(_DWORD *)v243;
  HIDWORD(v219[20]) = *(_DWORD *)&v243[3];
  char v179 = v203;
  LOBYTE(v219[21]) = v203;
  *(_DWORD *)((char *)&v219[21] + 1) = *(_DWORD *)v242;
  HIDWORD(v219[21]) = *(_DWORD *)&v242[3];
  v219[22] = v115;
  v219[23] = v117;
  v219[24] = v119;
  v219[25] = v121;
  char v180 = v201;
  LOBYTE(v219[26]) = v201;
  *(_DWORD *)((char *)&v219[26] + 1) = *(_DWORD *)v241;
  HIDWORD(v219[26]) = *(_DWORD *)&v241[3];
  char v181 = (char)v202;
  LOBYTE(v219[27]) = (_BYTE)v202;
  HIDWORD(v219[27]) = *(_DWORD *)&v240[3];
  *(_DWORD *)((char *)&v219[27] + 1) = *(_DWORD *)v240;
  v219[28] = v123;
  v219[29] = v125;
  v219[30] = v127;
  v219[31] = v129;
  LOBYTE(v219[32]) = v171;
  memcpy((void *)(v175 + v177), v219, 0x101uLL);
  sub_10000A428(v173, v175 + *(int *)(v176 + 64), &qword_1001A9108);
  sub_1000AFE64((uint64_t)v219);
  sub_10000ACE0(v214, &qword_1001A9108);
  sub_10000ACE0(v218, &qword_1001A9138);
  sub_10000ACE0(v173, &qword_1001A9108);
  *(_OWORD *)&v221[81] = v249;
  *(_OWORD *)&v221[97] = v250;
  *(_OWORD *)&v221[113] = v251;
  *(_OWORD *)&v221[129] = v252;
  *(_OWORD *)&v221[17] = v245;
  *(_OWORD *)&v221[33] = v246;
  *(_OWORD *)&v221[49] = v247;
  *(_OWORD *)&v221[65] = v248;
  *(void *)&long long v220 = v178;
  *((void *)&v220 + 1) = 0x4020000000000000;
  v221[0] = v213;
  *(_OWORD *)&v221[1] = v244;
  *(_DWORD *)&v221[145] = *(_DWORD *)v243;
  *(_DWORD *)&v221[148] = *(_DWORD *)&v243[3];
  v221[152] = v179;
  *(_DWORD *)&v221[153] = *(_DWORD *)v242;
  *(_DWORD *)&v221[156] = *(_DWORD *)&v242[3];
  *(void *)&v221[160] = v115;
  uint64_t v222 = v117;
  uint64_t v223 = v119;
  uint64_t v224 = v121;
  char v225 = v180;
  *(_DWORD *)uint64_t v226 = *(_DWORD *)v241;
  *(_DWORD *)&v226[3] = *(_DWORD *)&v241[3];
  char v227 = v181;
  *(_DWORD *)&v228[3] = *(_DWORD *)&v240[3];
  *(_DWORD *)uint64_t v228 = *(_DWORD *)v240;
  uint64_t v229 = v123;
  uint64_t v230 = v125;
  uint64_t v231 = v127;
  uint64_t v232 = v129;
  char v233 = v171;
  sub_1000AFF10((uint64_t)&v220);
  return sub_10000ACE0(v215, &qword_1001A9138);
}

uint64_t sub_1000ACFB8(uint64_t a1, uint64_t a2, void *a3)
{
  type metadata accessor for SavedWallpaperView();
  sub_1000AB7FC();
  sub_10013A684();
  swift_release();
  sub_1000AB7FC();
  sub_10013A6A4();
  swift_release();
  [a3 size];
  sub_1000AB7FC();
  [a3 size];
  sub_10013A72C();
  swift_release();
  sub_1000AB7FC();
  [a3 size];
  sub_10013A74C();

  return swift_release();
}

uint64_t sub_1000AD0C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v25[0] = a1;
  v25[1] = a4;
  uint64_t v6 = type metadata accessor for SavedWallpaperView();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)v25 - v10;
  uint64_t v12 = *(void *)(a2 - 8);
  __chkstk_darwin(v9, v13);
  uint64_t v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v16 - 8, v17);
  uint64_t v19 = (char *)v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_1000AB7FC();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v20 + *(void *)(*(void *)v20 + 96), a2);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, a2);
  uint64_t v21 = type metadata accessor for URL();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v19, 0, 1, v21);
  (*(void (**)(char *, void, uint64_t))(v7 + 16))(v11, v25[0], v6);
  unint64_t v22 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a2;
  *(void *)(v23 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v23 + v22, v11, v6);
  sub_10000570C(&qword_1001A9190);
  sub_1000B0920();
  return AsyncImage.init(url:scale:transaction:content:)();
}

uint64_t sub_1000AD3B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v79 = a3;
  uint64_t v80 = (char *)a4;
  uint64_t v82 = a2;
  uint64_t v78 = a1;
  uint64_t v87 = a5;
  uint64_t v70 = sub_10000570C(&qword_1001A6748);
  __chkstk_darwin(v70, v5);
  uint64_t v72 = (uint64_t)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_10000570C(&qword_1001A9218);
  __chkstk_darwin(v71, v7);
  unint64_t v75 = (unint64_t)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_10000570C(&qword_1001A9208);
  uint64_t v10 = __chkstk_darwin(v86, v9);
  uint64_t v73 = (uint64_t)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v68 - v13;
  uint64_t v84 = sub_10000570C(&qword_1001A9230);
  __chkstk_darwin(v84, v15);
  uint64_t v85 = (uint64_t)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = sub_10000570C(&qword_1001A62A8);
  __chkstk_darwin(v74, v17);
  uint64_t v77 = (uint64_t)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v81, v19);
  uint64_t v21 = (double *)((char *)&v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = type metadata accessor for Image.ResizingMode();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22, v24);
  uint64_t v26 = (char *)&v68 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_10000570C(&qword_1001A91A8);
  uint64_t v28 = __chkstk_darwin(v83, v27);
  uint64_t v30 = (_OWORD *)((char *)&v68 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v28, v31);
  uint64_t v76 = (uint64_t)&v68 - v32;
  uint64_t v33 = type metadata accessor for AsyncImagePhase();
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33, v35);
  uint64_t v37 = (uint64_t *)((char *)&v68 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v34 + 16))(v37, v78, v33);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v34 + 88))(v37, v33) == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v34 + 96))(v37, v33);
    uint64_t v78 = *v37;
    (*(void (**)(char *, void, uint64_t))(v23 + 104))(v26, enum case for Image.ResizingMode.stretch(_:), v22);
    unint64_t v75 = Image.resizable(capInsets:resizingMode:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v22);
    static Alignment.center.getter();
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
    uint64_t v38 = v108;
    uint64_t v73 = v109;
    uint64_t v39 = v110;
    uint64_t v72 = v111;
    uint64_t v70 = v115;
    uint64_t v71 = v113;
    uint64_t v68 = v118;
    uint64_t v69 = v117;
    char v94 = 1;
    char v93 = BYTE8(v108);
    char v92 = BYTE8(v109);
    char v91 = BYTE8(v110);
    char v90 = v112;
    char v89 = v114;
    char v88 = v116;
    type metadata accessor for SavedWallpaperView();
    sub_1000AB7FC();
    sub_10013A80C();
    swift_release();
    sub_1000AB7FC();
    sub_10013A830();
    swift_release();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    char v96 = v120;
    char v95 = v122;
    long long v97 = v75;
    LOBYTE(v98) = v94;
    BYTE1(v98) = 1;
    *((void *)&v98 + 1) = v38;
    LOBYTE(v99) = v93;
    *((void *)&v99 + 1) = v73;
    LOBYTE(v100) = v92;
    *((void *)&v100 + 1) = v39;
    LOBYTE(v101) = v91;
    *((void *)&v101 + 1) = v72;
    LOBYTE(v102) = v90;
    *((void *)&v102 + 1) = v71;
    LOBYTE(v103) = v89;
    *((void *)&v103 + 1) = v70;
    LOBYTE(v104) = v88;
    *((void *)&v104 + 1) = v69;
    *(void *)&long long v105 = v68;
    *((void *)&v105 + 1) = v119;
    LOBYTE(v106) = v120;
    *((void *)&v106 + 1) = v121;
    LOBYTE(v107[0]) = v122;
    *(_OWORD *)((char *)v107 + 8) = v123;
    WORD4(v107[1]) = 0;
    sub_1000AB7FC();
    double v40 = sub_10013A854();
    swift_release();
    uint64_t v41 = (char *)v21 + *(int *)(v81 + 20);
    uint64_t v42 = enum case for RoundedCornerStyle.continuous(_:);
    uint64_t v43 = type metadata accessor for RoundedCornerStyle();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v43 - 8) + 104))(v41, v42, v43);
    *uint64_t v21 = v40;
    v21[1] = v40;
    uint64_t v44 = v77;
    sub_1000243EC((uint64_t)v21, v77);
    *(_WORD *)(v44 + *(int *)(v74 + 36)) = 256;
    sub_10000A428(v44, (uint64_t)v30 + *(int *)(v83 + 36), &qword_1001A62A8);
    long long v45 = v106;
    v30[8] = v105;
    v30[9] = v45;
    v30[10] = v107[0];
    *(_OWORD *)((char *)v30 + 170) = *(_OWORD *)((char *)v107 + 10);
    long long v46 = v102;
    v30[4] = v101;
    v30[5] = v46;
    long long v47 = v104;
    v30[6] = v103;
    v30[7] = v47;
    long long v48 = v98;
    *uint64_t v30 = v97;
    v30[1] = v48;
    long long v49 = v100;
    v30[2] = v99;
    v30[3] = v49;
    sub_100012A84((uint64_t)&v97);
    sub_10000ACE0(v44, &qword_1001A62A8);
    sub_100024450((uint64_t)v21);
    swift_release();
    uint64_t v50 = (uint64_t)v30;
    uint64_t v51 = v76;
    sub_10000A3C4(v50, v76, &qword_1001A91A8);
    sub_10000A428(v51, v85, &qword_1001A91A8);
    swift_storeEnumTagMultiPayload();
    sub_1000B09EC(&qword_1001A91A0, &qword_1001A91A8, (void (*)(void))sub_1000B0A90);
    sub_1000B03B8(&qword_1001A9200, &qword_1001A9208, (void (*)(void))sub_1000B0C00);
    _ConditionalContent<>.init(storage:)();
    swift_release();
    return sub_10000ACE0(v51, &qword_1001A91A8);
  }
  else
  {
    type metadata accessor for SavedWallpaperView();
    uint64_t v80 = v14;
    sub_1000AB7FC();
    double v53 = sub_10013A854();
    swift_release();
    uint64_t v54 = (char *)v21 + *(int *)(v81 + 20);
    uint64_t v55 = enum case for RoundedCornerStyle.continuous(_:);
    uint64_t v56 = type metadata accessor for RoundedCornerStyle();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v56 - 8) + 104))(v54, v55, v56);
    *uint64_t v21 = v53;
    v21[1] = v53;
    uint64_t v57 = static Color.black.getter();
    uint64_t v58 = v72;
    sub_1000243EC((uint64_t)v21, v72);
    *(void *)(v58 + *(int *)(v70 + 36)) = v57;
    sub_100024450((uint64_t)v21);
    static Alignment.center.getter();
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
    uint64_t v59 = v75;
    sub_10000A428(v58, v75, &qword_1001A6748);
    char v60 = (_OWORD *)(v59 + *(int *)(v71 + 36));
    long long v61 = v102;
    v60[4] = v101;
    v60[5] = v61;
    v60[6] = v103;
    long long v62 = v98;
    *char v60 = v97;
    v60[1] = v62;
    long long v63 = v100;
    v60[2] = v99;
    v60[3] = v63;
    sub_10000ACE0(v58, &qword_1001A6748);
    sub_1000AB7FC();
    sub_10013A80C();
    swift_release();
    sub_1000AB7FC();
    sub_10013A830();
    swift_release();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v64 = v73;
    sub_10000A428(v59, v73, &qword_1001A9218);
    uint64_t v65 = (_OWORD *)(v64 + *(int *)(v86 + 36));
    long long v66 = v109;
    _OWORD *v65 = v108;
    v65[1] = v66;
    _OWORD v65[2] = v110;
    sub_10000ACE0(v59, &qword_1001A9218);
    uint64_t v67 = (uint64_t)v80;
    sub_10000A3C4(v64, (uint64_t)v80, &qword_1001A9208);
    sub_10000A428(v67, v85, &qword_1001A9208);
    swift_storeEnumTagMultiPayload();
    sub_1000B09EC(&qword_1001A91A0, &qword_1001A91A8, (void (*)(void))sub_1000B0A90);
    sub_1000B03B8(&qword_1001A9200, &qword_1001A9208, (void (*)(void))sub_1000B0C00);
    _ConditionalContent<>.init(storage:)();
    sub_10000ACE0(v67, &qword_1001A9208);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v34 + 8))(v37, v33);
  }
}

uint64_t sub_1000ADF18@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.title.getter();
  static Font.Weight.bold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v7 = Text.font(_:)();
  uint64_t v36 = v8;
  uint64_t v37 = v7;
  char v32 = v9;
  uint64_t v38 = v10;
  swift_release();
  sub_10000FCC4(v2, v4, v6);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v34 = swift_getKeyPath();
  sub_1000AB724();
  uint64_t v11 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  static Font.subheadline.getter();
  static Font.Weight.regular.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v16 = Text.font(_:)();
  uint64_t v18 = v17;
  char v20 = v19;
  swift_release();
  sub_10000FCC4(v11, v13, v15);
  swift_bridgeObjectRelease();
  if (qword_1001A4E40 != -1) {
    swift_once();
  }
  char v21 = v32 & 1;
  uint64_t v39 = qword_1001B74E0;
  swift_retain();
  uint64_t v30 = Text.foregroundStyle<A>(_:)();
  uint64_t v23 = v22;
  uint64_t v33 = v24;
  char v26 = v25 & 1;
  char v31 = v25 & 1;
  sub_10000FCC4(v16, v18, v20 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v27 = swift_getKeyPath();
  uint64_t v28 = swift_getKeyPath();
  *(_DWORD *)(a1 + 17) = v39;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)((char *)&v39 + 3);
  *(_DWORD *)(a1 + 49) = *(_DWORD *)v43;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)&v43[3];
  *(_DWORD *)(a1 + 68) = *(_DWORD *)&v42[3];
  *(_DWORD *)(a1 + 65) = *(_DWORD *)v42;
  *(_DWORD *)(a1 + 89) = *(_DWORD *)v41;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)&v41[3];
  *(_DWORD *)(a1 + 121) = *(_DWORD *)v40;
  *(_DWORD *)(a1 + 124) = *(_DWORD *)&v40[3];
  *(void *)a1 = v37;
  *(void *)(a1 + 8) = v36;
  *(unsigned char *)(a1 + 16) = v21;
  *(void *)(a1 + 24) = v38;
  *(void *)(a1 + 32) = KeyPath;
  *(void *)(a1 + 40) = 2;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = v34;
  *(unsigned char *)(a1 + 64) = 1;
  *(void *)(a1 + 72) = v30;
  *(void *)(a1 + 80) = v23;
  *(unsigned char *)(a1 + 88) = v26;
  *(void *)(a1 + 96) = v33;
  *(void *)(a1 + 104) = v27;
  *(void *)(a1 + 112) = 2;
  *(unsigned char *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = v28;
  *(unsigned char *)(a1 + 136) = 1;
  sub_10000FCD4(v37, v36, v21);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_10000FCD4(v30, v23, v31);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_10000FCC4(v30, v23, v31);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10000FCC4(v37, v36, v21);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000AE318()
{
  uint64_t v0 = type metadata accessor for OpenURLAction();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SavedWallpaperView();
  sub_1000264EC((uint64_t)v4);
  OpenURLAction.callAsFunction(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_1000AE41C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v55 = a1;
  uint64_t v54 = sub_10000570C(&qword_1001A62A8) - 8;
  __chkstk_darwin(v54, v1);
  uint64_t v53 = (uint64_t)&v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin(v52, v3);
  uint64_t v51 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v5 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v7 = v6;
  char v9 = v8 & 1;
  static Font.body.getter();
  static Font.Weight.semibold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v10 = Text.font(_:)();
  uint64_t v12 = v11;
  char v14 = v13;
  uint64_t v49 = v15;
  swift_release();
  sub_10000FCC4(v5, v7, v9);
  swift_bridgeObjectRelease();
  *(void *)&long long v83 = static Color.white.getter();
  uint64_t v50 = Text.foregroundStyle<A>(_:)();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  LOBYTE(v7) = v20 & 1;
  sub_10000FCC4(v10, v12, v14 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  LOBYTE(v5) = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v22 = v50;
  uint64_t v56 = v50;
  uint64_t v57 = v17;
  char v58 = v7;
  uint64_t v59 = v19;
  uint64_t v60 = KeyPath;
  uint64_t v61 = 1;
  char v62 = 0;
  char v63 = v5;
  uint64_t v64 = v23;
  uint64_t v65 = v24;
  uint64_t v66 = v25;
  uint64_t v67 = v26;
  char v68 = 0;
  static Alignment.center.getter();
  sub_100124198(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v83, 0.0, 1, 0.0, 1);
  sub_10000FCC4(v22, v17, v7);
  swift_release();
  swift_bridgeObjectRelease();
  long long v80 = v94;
  long long v81 = v95;
  long long v76 = v90;
  long long v77 = v91;
  long long v78 = v92;
  long long v79 = v93;
  long long v72 = v86;
  long long v73 = v87;
  long long v74 = v88;
  long long v75 = v89;
  long long v69 = v83;
  uint64_t v82 = v96;
  long long v70 = v84;
  long long v71 = v85;
  uint64_t v27 = static Color.blue.getter();
  char v28 = static Edge.Set.all.getter();
  long long v93 = v79;
  long long v94 = v80;
  long long v95 = v81;
  long long v89 = v75;
  long long v90 = v76;
  long long v91 = v77;
  long long v92 = v78;
  long long v85 = v71;
  long long v86 = v72;
  long long v87 = v73;
  long long v88 = v74;
  long long v83 = v69;
  long long v84 = v70;
  *(void *)&long long v96 = v82;
  *((void *)&v96 + 1) = v27;
  char v97 = v28;
  uint64_t v29 = v51;
  uint64_t v30 = &v51[*(int *)(v52 + 28)];
  uint64_t v31 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v32 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 104))(v30, v31, v32);
  __asm { FMOV            V0.2D, #12.0 }
  _OWORD *v29 = _Q0;
  uint64_t v38 = v53;
  sub_1000243EC((uint64_t)v29, v53);
  *(_WORD *)(v38 + *(int *)(v54 + 44)) = 256;
  uint64_t v39 = sub_10000570C(&qword_1001A9148);
  uint64_t v40 = v55;
  sub_10000A428(v38, v55 + *(int *)(v39 + 36), &qword_1001A62A8);
  long long v41 = v96;
  *(_OWORD *)(v40 + 192) = v95;
  *(_OWORD *)(v40 + 208) = v41;
  *(unsigned char *)(v40 + 224) = v97;
  long long v42 = v92;
  *(_OWORD *)(v40 + 128) = v91;
  *(_OWORD *)(v40 + 144) = v42;
  long long v43 = v94;
  *(_OWORD *)(v40 + 160) = v93;
  *(_OWORD *)(v40 + 176) = v43;
  long long v44 = v88;
  *(_OWORD *)(v40 + 64) = v87;
  *(_OWORD *)(v40 + 80) = v44;
  long long v45 = v90;
  *(_OWORD *)(v40 + 96) = v89;
  *(_OWORD *)(v40 + 112) = v45;
  long long v46 = v84;
  *(_OWORD *)uint64_t v40 = v83;
  *(_OWORD *)(v40 + 16) = v46;
  long long v47 = v86;
  *(_OWORD *)(v40 + 32) = v85;
  *(_OWORD *)(v40 + 48) = v47;
  sub_1000B0D30((uint64_t)&v83);
  sub_10000ACE0(v38, &qword_1001A62A8);
  sub_100024450((uint64_t)v29);
  return sub_1000B0D8C((uint64_t)&v83);
}

double sub_1000AE88C@<D0>(uint64_t a1@<X8>)
{
  static Font.title.getter();
  static Font.Weight.medium.getter();
  uint64_t v2 = Font.weight(_:)();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  char v4 = static Edge.Set.horizontal.getter();
  *(_WORD *)a1 = 1;
  *(void *)(a1 + 8) = nullsub_1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = KeyPath;
  *(void *)(a1 + 32) = v2;
  *(unsigned char *)(a1 + 40) = v4;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(unsigned char *)(a1 + 80) = 1;
  return result;
}

__n128 sub_1000AE918@<Q0>(uint64_t a1@<X8>)
{
  static Font.Weight.semibold.getter();
  uint64_t v2 = Text.fontWeight(_:)();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  char v8 = v7 & 1;
  uint64_t v9 = static Alignment.center.getter();
  sub_100123F48(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v15, 0.0, 1, 0.0, 1, v9, v10, v2, v4, v8, v6);
  sub_10000FCC4(v2, v4, v8);
  swift_bridgeObjectRelease();
  long long v11 = v15[7];
  *(_OWORD *)(a1 + 96) = v15[6];
  *(_OWORD *)(a1 + 112) = v11;
  *(_OWORD *)(a1 + 128) = v15[8];
  long long v12 = v15[3];
  *(_OWORD *)(a1 + 32) = v15[2];
  *(_OWORD *)(a1 + 48) = v12;
  long long v13 = v15[5];
  *(_OWORD *)(a1 + 64) = v15[4];
  *(_OWORD *)(a1 + 80) = v13;
  __n128 result = (__n128)v15[1];
  *(_OWORD *)a1 = v15[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

double sub_1000AEA14@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for SavedWallpaperView();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  long long v12 = (char *)&v19 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v19 - v11, a1, v8);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v14 + v13, v12, v8);
  static Font.title.getter();
  static Font.Weight.medium.getter();
  uint64_t v15 = Font.weight(_:)();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  char v17 = static Edge.Set.horizontal.getter();
  *(_WORD *)a4 = 1;
  *(void *)(a4 + 8) = sub_1000AFDD8;
  *(void *)(a4 + 16) = v14;
  *(void *)(a4 + 24) = KeyPath;
  *(void *)(a4 + 32) = v15;
  *(unsigned char *)(a4 + 40) = v17;
  double result = 0.0;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(unsigned char *)(a4 + 80) = 1;
  return result;
}

uint64_t sub_1000AEBA4()
{
  uint64_t v0 = type metadata accessor for DismissAction();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SavedWallpaperView();
  sub_10002652C((uint64_t)v4);
  DismissAction.callAsFunction()();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_1000AEC98@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  sub_10000570C(&qword_1001A5460);

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1000AECF0@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  State.init(wrappedValue:)();
  *a2 = v8;
  a2[1] = v9;
  a2[2] = sub_1000AB850(0);
  a2[3] = v4;
  uint64_t v5 = type metadata accessor for SavedWallpaperView();
  sub_10000A3C4(a1, (uint64_t)a2 + *(int *)(v5 + 40), &qword_1001A55E0);
  uint64_t v6 = (void *)((char *)a2 + *(int *)(v5 + 44));
  uint64_t *v6 = swift_getKeyPath();
  sub_10000570C(&qword_1001A55D8);
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for SavedWallpaperView()
{
  return sub_10000B72C();
}

void sub_1000AEE2C()
{
  sub_10000FA40(319, (unint64_t *)&qword_1001A5670, (void (*)(uint64_t))&type metadata accessor for DismissAction);
  if (v0 <= 0x3F)
  {
    sub_10000FA40(319, (unint64_t *)&qword_1001A5678, (void (*)(uint64_t))&type metadata accessor for OpenURLAction);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *sub_1000AEF38(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    a1[3] = a2[3];
    uint64_t v9 = *(int *)(a3 + 40);
    uint64_t v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_10000570C(&qword_1001A5460);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      void *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = *(int *)(a3 + 44);
    uint64_t v14 = (uint64_t *)((char *)a1 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    sub_10000570C(&qword_1001A55D8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    }
    else
    {
      *uint64_t v14 = *v15;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1000AF118(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + *(int *)(a2 + 44);
  sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for OpenURLAction();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    return v8(v6, v7);
  }
  else
  {
    return swift_release();
  }
}

void *sub_1000AF258(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = *(int *)(a3 + 40);
  uint64_t v9 = (void *)((char *)a1 + v8);
  uint64_t v10 = (void *)((char *)a2 + v8);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for DismissAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  else
  {
    *uint64_t v9 = *v10;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = *(int *)(a3 + 44);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = type metadata accessor for OpenURLAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  }
  else
  {
    *uint64_t v13 = *v14;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_1000AF3E0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 40);
    uint64_t v7 = (void *)((char *)a1 + v6);
    uint64_t v8 = (void *)((char *)a2 + v6);
    sub_10000ACE0((uint64_t)a1 + v6, &qword_1001A5460);
    sub_10000570C(&qword_1001A5460);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      *uint64_t v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v10 = *(int *)(a3 + 44);
    uint64_t v11 = (void *)((char *)a1 + v10);
    uint64_t v12 = (void *)((char *)a2 + v10);
    sub_10000ACE0((uint64_t)a1 + v10, &qword_1001A55D8);
    sub_10000570C(&qword_1001A55D8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *uint64_t v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *sub_1000AF5B4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 40);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for DismissAction();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  uint64_t v12 = *(int *)(a3 + 44);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = type metadata accessor for OpenURLAction();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v13, v14, v16);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  return a1;
}

void *sub_1000AF738(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_release();
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(a3 + 40);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    sub_10000ACE0((uint64_t)a1 + v7, &qword_1001A5460);
    uint64_t v10 = sub_10000570C(&qword_1001A5460);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for DismissAction();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
    uint64_t v12 = *(int *)(a3 + 44);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    sub_10000ACE0((uint64_t)a1 + v12, &qword_1001A55D8);
    uint64_t v15 = sub_10000570C(&qword_1001A55D8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = type metadata accessor for OpenURLAction();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v13, v14, v16);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000AF90C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000AF920);
}

uint64_t sub_1000AF920(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000570C(&qword_1001A55E0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 40);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10000570C(qword_1001A55E8);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 44);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_1000AFA54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000AFA68);
}

void *sub_1000AFA68(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *double result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_10000570C(&qword_1001A55E0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 40);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10000570C(qword_1001A55E8);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 44);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t sub_1000AFB9C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000AFBE4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ABCF4(v1[4], v1[2], v1[3], a1);
}

double sub_1000AFBF8@<D0>(uint64_t a1@<X8>)
{
  return sub_1000AEA14(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_1000AFC04()
{
  unint64_t result = qword_1001A90C8;
  if (!qword_1001A90C8)
  {
    sub_100004A58(&qword_1001A9068);
    sub_10000A780(&qword_1001A90D0, &qword_1001A9060);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A90C8);
  }
  return result;
}

uint64_t sub_1000AFCA4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000AFD3C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000AFDD8()
{
  type metadata accessor for SavedWallpaperView();

  return sub_1000AEBA4();
}

uint64_t sub_1000AFE64(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 104);
  char v4 = *(unsigned char *)(a1 + 112);
  sub_10000FCD4(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_10000FCD4(v2, v3, v4);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1000AFF10(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 104);
  char v4 = *(unsigned char *)(a1 + 112);
  sub_10000FCC4(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10000FCC4(v2, v3, v4);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000AFFBC()
{
  uint64_t v1 = type metadata accessor for SavedWallpaperView();
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v11 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  swift_release();
  swift_release();
  swift_release();
  unint64_t v6 = v0 + v2 + *(int *)(v1 + 40);
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for DismissAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  unint64_t v8 = v0 + v2 + *(int *)(v1 + 44);
  sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for OpenURLAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + ((v2 + v11 + v5) & ~v5), v3);

  return swift_deallocObject();
}

uint64_t sub_1000B01FC()
{
  type metadata accessor for SavedWallpaperView();
  type metadata accessor for URL();

  return sub_1000AE318();
}

uint64_t sub_1000B02E4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AE41C(a1);
}

unint64_t sub_1000B02EC()
{
  unint64_t result = qword_1001A9158;
  if (!qword_1001A9158)
  {
    sub_100004A58(&qword_1001A9160);
    sub_1000B03B8(&qword_1001A9168, &qword_1001A9170, (void (*)(void))sub_1000B0434);
    sub_10000A780(&qword_1001A6290, &qword_1001A6298);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A9158);
  }
  return result;
}

uint64_t sub_1000B03B8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B0434()
{
  return sub_1000B03B8(&qword_1001A9178, &qword_1001A9180, (void (*)(void))sub_10001A2A4);
}

uint64_t sub_1000B0464()
{
  uint64_t v1 = type metadata accessor for SavedWallpaperView();
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  swift_release();
  swift_release();
  unint64_t v4 = v0 + v2 + *(int *)(v1 + 40);
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for DismissAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  unint64_t v6 = v0 + v2 + *(int *)(v1 + 44);
  sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for OpenURLAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_1000B0624(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SavedWallpaperView() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void **)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1000ACFB8(a1, v1 + v4, v5);
}

uint64_t sub_1000B06E0()
{
  uint64_t v1 = type metadata accessor for SavedWallpaperView();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  swift_release();
  swift_release();
  swift_release();
  uint64_t v3 = v2 + *(int *)(v1 + 40);
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = v2 + *(int *)(v1 + 44);
  sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for OpenURLAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_1000B0884@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for SavedWallpaperView() - 8);
  uint64_t v8 = v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_1000AD3B0(a1, v8, v5, v6, a2);
}

unint64_t sub_1000B0920()
{
  unint64_t result = qword_1001A9198;
  if (!qword_1001A9198)
  {
    sub_100004A58(&qword_1001A9190);
    sub_1000B09EC(&qword_1001A91A0, &qword_1001A91A8, (void (*)(void))sub_1000B0A90);
    sub_1000B03B8(&qword_1001A9200, &qword_1001A9208, (void (*)(void))sub_1000B0C00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A9198);
  }
  return result;
}

uint64_t sub_1000B09EC(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    a3();
    sub_10000A780(&qword_1001A62A0, &qword_1001A62A8);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000B0A90()
{
  unint64_t result = qword_1001A91B0;
  if (!qword_1001A91B0)
  {
    sub_100004A58(&qword_1001A91B8);
    sub_1000B03B8(&qword_1001A91C0, &qword_1001A91C8, (void (*)(void))sub_1000B0B5C);
    sub_10000A780(&qword_1001A91F0, &qword_1001A91F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A91B0);
  }
  return result;
}

uint64_t sub_1000B0B5C()
{
  return sub_1000B03B8(&qword_1001A91D0, &qword_1001A91D8, (void (*)(void))sub_1000B0B8C);
}

unint64_t sub_1000B0B8C()
{
  unint64_t result = qword_1001A91E0;
  if (!qword_1001A91E0)
  {
    sub_100004A58(&qword_1001A91E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A91E0);
  }
  return result;
}

uint64_t sub_1000B0C00()
{
  return sub_1000B03B8(&qword_1001A9210, &qword_1001A9218, (void (*)(void))sub_1000B0C30);
}

unint64_t sub_1000B0C30()
{
  unint64_t result = qword_1001A9220;
  if (!qword_1001A9220)
  {
    sub_100004A58(&qword_1001A6748);
    sub_1000B0CD0();
    sub_10000A780(&qword_1001A5E98, &qword_1001A5EA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A9220);
  }
  return result;
}

unint64_t sub_1000B0CD0()
{
  unint64_t result = qword_1001A9228;
  if (!qword_1001A9228)
  {
    type metadata accessor for RoundedRectangle();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A9228);
  }
  return result;
}

uint64_t sub_1000B0D30(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B0D8C(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for BezelSizePreferenceKey()
{
  return &type metadata for BezelSizePreferenceKey;
}

unint64_t sub_1000B0E04()
{
  unint64_t result = qword_1001A9238;
  if (!qword_1001A9238)
  {
    sub_100004A58(&qword_1001A90E0);
    sub_100004A58(&qword_1001A9070);
    sub_1000B03B8(&qword_1001A90C0, &qword_1001A9070, (void (*)(void))sub_1000AFC04);
    swift_getOpaqueTypeConformance2();
    sub_10000A780(&qword_1001A9240, &qword_1001A90E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A9238);
  }
  return result;
}

unint64_t sub_1000B0F0C(uint64_t a1)
{
  unint64_t result = sub_1000B0F34();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B0F34()
{
  unint64_t result = qword_1001A9248;
  if (!qword_1001A9248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A9248);
  }
  return result;
}

uint64_t sub_1000B0F88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v24 = a6;
  uint64_t v22 = a7;
  uint64_t v23 = a5;
  uint64_t v20 = a1;
  uint64_t v21 = a3;
  uint64_t v9 = type metadata accessor for CoordinateSpace();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for SizeModifier();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (uint64_t *)((char *)&v20 - v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a2, v9);
  sub_1000A8BDC(v20, (uint64_t)v13, v21, a4, v18);
  swift_retain();
  View.modifier<A>(_:)();
  return (*(uint64_t (**)(void *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t sub_1000B1148()
{
  return View.modifier<A>(_:)();
}

uint64_t sub_1000B1184()
{
  return swift_release();
}

uint64_t sub_1000B122C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v117 = a8;
  uint64_t v98 = a7;
  long long v99 = a6;
  uint64_t v109 = a4;
  uint64_t v110 = a5;
  int v122 = a3;
  uint64_t v120 = a1;
  uint64_t v121 = a2;
  uint64_t v123 = a9;
  uint64_t v116 = a10;
  uint64_t v126 = a11;
  uint64_t v80 = a18;
  uint64_t v81 = a14;
  uint64_t v130 = a17;
  uint64_t v85 = a16;
  uint64_t v86 = a12;
  uint64_t v18 = sub_10000570C(&qword_1001A9090);
  __chkstk_darwin(v18 - 8, v19);
  uint64_t v115 = (uint64_t *)((char *)&v78 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v119 = sub_10000570C(&qword_1001A9098);
  uint64_t v22 = __chkstk_darwin(v119, v21);
  uint64_t v118 = (uint64_t)&v78 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = a13;
  uint64_t v92 = *(void *)(a13 - 8);
  __chkstk_darwin(v22, a13);
  uint64_t v82 = (char *)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = type metadata accessor for ModifiedContent();
  uint64_t v93 = *(void *)(v79 - 8);
  __chkstk_darwin(v79, v79);
  long long v83 = (char *)&v78 - v25;
  uint64_t v84 = type metadata accessor for ModifiedContent();
  uint64_t v97 = *(void *)(v84 - 8);
  __chkstk_darwin(v84, v26);
  uint64_t v128 = (char *)&v78 - v27;
  uint64_t v91 = type metadata accessor for ModifiedContent();
  uint64_t v167 = a16;
  uint64_t v168 = &protocol witness table for _PaddingLayout;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v95 = type metadata accessor for _InsetViewModifier();
  uint64_t v89 = type metadata accessor for ModifiedContent();
  uint64_t v100 = *(void *)(v89 - 8);
  __chkstk_darwin(v89, v28);
  uint64_t v129 = (char *)&v78 - v29;
  uint64_t v94 = type metadata accessor for ModifiedContent();
  uint64_t v165 = a18;
  uint64_t v166 = &protocol witness table for _PaddingLayout;
  uint64_t v90 = swift_getWitnessTable();
  uint64_t v103 = type metadata accessor for _InsetViewModifier();
  uint64_t v101 = type metadata accessor for ModifiedContent();
  uint64_t v107 = *(void *)(v101 - 8);
  __chkstk_darwin(v101, v30);
  long long v87 = (char *)&v78 - v31;
  sub_100004A58(&qword_1001A9088);
  uint64_t v105 = type metadata accessor for ModifiedContent();
  uint64_t v112 = *(void *)(v105 - 8);
  __chkstk_darwin(v105, v105);
  long long v96 = (char *)&v78 - v32;
  uint64_t v33 = type metadata accessor for ModifiedContent();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v113 = v33;
  uint64_t v114 = v34;
  __chkstk_darwin(v33, v35);
  long long v104 = (char *)&v78 - v36;
  uint64_t v37 = v126;
  uint64_t v163 = v126;
  uint64_t v164 = a15;
  uint64_t v125 = a15;
  long long v106 = &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v111 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2, v38);
  long long v102 = (char *)&v78 - v39;
  sub_10000570C(&qword_1001A90B8);
  type metadata accessor for ToolbarPlacement();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_100153180;
  static ToolbarPlacement.navigationBar.getter();
  View.toolbar(_:for:)();
  uint64_t v40 = swift_bridgeObjectRelease();
  long long v41 = v82;
  v99(v40);
  static Edge.Set.vertical.getter();
  long long v42 = v83;
  uint64_t v43 = v127;
  uint64_t v44 = v130;
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v92 + 8))(v41, v43);
  static Edge.Set.all.getter();
  static SafeAreaRegions.all.getter();
  uint64_t v161 = v44;
  uint64_t v162 = &protocol witness table for _PaddingLayout;
  uint64_t v124 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v45 = v79;
  uint64_t v46 = swift_getWitnessTable();
  View.ignoresSafeArea(_:edges:)();
  (*(void (**)(char *, uint64_t))(v93 + 8))(v42, v45);
  uint64_t v141 = v37;
  uint64_t v48 = v85;
  uint64_t v47 = v86;
  uint64_t v142 = v86;
  uint64_t v143 = v43;
  uint64_t v49 = v81;
  uint64_t v144 = v81;
  uint64_t v50 = v125;
  uint64_t v145 = v125;
  uint64_t v146 = v85;
  uint64_t v147 = v44;
  uint64_t v51 = v80;
  uint64_t v148 = v80;
  uint64_t v149 = v109;
  uint64_t v150 = v110;
  static VerticalAlignment.center.getter();
  uint64_t v159 = v46;
  uint64_t v160 = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  uint64_t v52 = v84;
  uint64_t v53 = swift_getWitnessTable();
  uint64_t v54 = v128;
  View.safeAreaInset<A>(edge:alignment:spacing:content:)();
  (*(void (**)(char *, uint64_t))(v97 + 8))(v54, v52);
  uint64_t v131 = v37;
  uint64_t v132 = v47;
  uint64_t v133 = v127;
  uint64_t v134 = v49;
  uint64_t v135 = v50;
  uint64_t v136 = v48;
  uint64_t v137 = v130;
  uint64_t v138 = v51;
  uint64_t v139 = v117;
  uint64_t v140 = v116;
  static VerticalAlignment.center.getter();
  uint64_t v55 = swift_getWitnessTable();
  uint64_t v157 = v53;
  uint64_t v158 = v55;
  uint64_t v56 = v89;
  uint64_t v57 = swift_getWitnessTable();
  char v58 = v87;
  uint64_t v59 = v129;
  View.safeAreaInset<A>(edge:alignment:spacing:content:)();
  (*(void (**)(char *, uint64_t))(v100 + 8))(v59, v56);
  uint64_t v60 = static HorizontalAlignment.center.getter();
  uint64_t v61 = (uint64_t)v115;
  *uint64_t v115 = v60;
  *(void *)(v61 + 8) = 0;
  *(unsigned char *)(v61 + 16) = 0;
  uint64_t v62 = sub_10000570C(&qword_1001A90D8);
  sub_1000B2258(v120, v121, v122, (double *)(v61 + *(int *)(v62 + 44)));
  LOBYTE(v59) = static Edge.Set.all.getter();
  uint64_t v63 = static SafeAreaRegions.all.getter();
  uint64_t v64 = v118;
  sub_10000A428(v61, v118, &qword_1001A9090);
  uint64_t v65 = v64 + *(int *)(v119 + 36);
  *(void *)uint64_t v65 = v63;
  *(unsigned char *)(v65 + 8) = (_BYTE)v59;
  sub_10000ACE0(v61, &qword_1001A9090);
  static Alignment.center.getter();
  uint64_t v66 = swift_getWitnessTable();
  uint64_t v155 = v57;
  uint64_t v156 = v66;
  uint64_t v67 = v101;
  uint64_t v68 = swift_getWitnessTable();
  sub_1000B25C4();
  long long v69 = v96;
  View.background<A>(_:alignment:)();
  sub_10000ACE0(v64, &qword_1001A9098);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v58, v67);
  static Alignment.top.getter();
  uint64_t v70 = sub_10000A780(&qword_1001A9260, &qword_1001A9088);
  uint64_t v153 = v68;
  uint64_t v154 = v70;
  uint64_t v76 = v105;
  uint64_t v77 = swift_getWitnessTable();
  long long v71 = v104;
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  (*(void (**)(char *, uint64_t))(v112 + 8))(v69, v76);
  static Alignment.center.getter();
  uint64_t v163 = v126;
  uint64_t v164 = v125;
  swift_getOpaqueTypeConformance2();
  uint64_t v151 = v77;
  uint64_t v152 = &protocol witness table for _FlexFrameLayout;
  uint64_t v72 = v113;
  swift_getWitnessTable();
  uint64_t v73 = OpaqueTypeMetadata2;
  long long v74 = v102;
  View.overlay<A>(_:alignment:)();
  (*(void (**)(char *, uint64_t))(v114 + 8))(v71, v72);
  return (*(uint64_t (**)(char *, uint64_t))(v111 + 8))(v74, v73);
}

uint64_t sub_1000B1DF8@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  v23[1] = a5;
  uint64_t v8 = *(void *)(a3 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v14, v17);
  uint64_t v20 = (char *)v23 - v19;
  a1(v18);
  static Edge.Set.vertical.getter();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a3);
  void v23[2] = a4;
  v23[3] = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable();
  sub_1001221F0(v16, v11);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v12 + 8);
  v21(v16, v11);
  sub_1001221F0(v20, v11);
  return ((uint64_t (*)(char *, uint64_t))v21)(v20, v11);
}

uint64_t sub_1000B2028@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6)
{
  v23[1] = a4;
  uint64_t v8 = *(void *)(a3 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v14, v17);
  uint64_t v20 = (char *)v23 - v19;
  a1(v18);
  static Edge.Set.vertical.getter();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a3);
  void v23[2] = a6;
  v23[3] = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable();
  sub_1001221F0(v16, v11);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v12 + 8);
  v21(v16, v11);
  sub_1001221F0(v20, v11);
  return ((uint64_t (*)(char *, uint64_t))v21)(v20, v11);
}

uint64_t sub_1000B2258@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, double *a4@<X8>)
{
  uint64_t v33 = a4;
  uint64_t v32 = type metadata accessor for Divider();
  uint64_t v7 = *(void *)(v32 - 8);
  __chkstk_darwin(v32, v8);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000570C(&qword_1001A8CB0);
  uint64_t v12 = v11 - 8;
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v31 = (uint64_t)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  uint64_t v19 = (char *)&v31 - v18;
  __chkstk_darwin(v17, v20);
  uint64_t v22 = (char *)&v31 - v21;
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  char v36 = a3;
  sub_10000570C(&qword_1001A8B70);
  Binding.wrappedValue.getter();
  double v23 = 0.0;
  if (v37) {
    double v24 = 1.0;
  }
  else {
    double v24 = 0.0;
  }
  Divider.init()();
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  char v36 = a3;
  Binding.wrappedValue.getter();
  if (v37) {
    double v23 = 1.0;
  }
  uint64_t v25 = v32;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v19, v10, v32);
  *(double *)&v19[*(int *)(v12 + 44)] = v23;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v25);
  sub_1000B2664((uint64_t)v19, (uint64_t)v22);
  uint64_t v26 = v31;
  sub_10000A428((uint64_t)v22, v31, &qword_1001A8CB0);
  uint64_t v27 = v33;
  *(void *)uint64_t v33 = 8;
  v27[1] = v24;
  uint64_t v28 = v27;
  uint64_t v29 = sub_10000570C(&qword_1001A9268);
  sub_10000A428(v26, (uint64_t)v28 + *(int *)(v29 + 48), &qword_1001A8CB0);
  sub_10000ACE0((uint64_t)v22, &qword_1001A8CB0);
  return sub_10000ACE0(v26, &qword_1001A8CB0);
}

void sub_1000B24E0()
{
  id v0 = [self sharedApplication];
  [v0 sendAction:"resignFirstResponder" to:0 from:0 forEvent:0];
}

uint64_t sub_1000B2554()
{
  return sub_1000B2584((uint64_t (*)(void, void, void, void, void, void, void, void, void, void))sub_1000B1DF8);
}

uint64_t sub_1000B256C()
{
  return sub_1000B2584((uint64_t (*)(void, void, void, void, void, void, void, void, void, void))sub_1000B2028);
}

uint64_t sub_1000B2584(uint64_t (*a1)(void, void, void, void, void, void, void, void, void, void))
{
  return a1(v1[10], v1[11], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
}

unint64_t sub_1000B25C4()
{
  unint64_t result = qword_1001A9250;
  if (!qword_1001A9250)
  {
    sub_100004A58(&qword_1001A9098);
    sub_10000A780(&qword_1001A9258, &qword_1001A9090);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A9250);
  }
  return result;
}

uint64_t sub_1000B2664(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A8CB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B26CC()
{
  return sub_1000B27EC(&qword_1001A9270, (void (*)(uint64_t))&type metadata accessor for PromotionalAssets.PhoneWallpaper);
}

uint64_t sub_1000B2714()
{
  return sub_1000B27EC(&qword_1001A9278, (void (*)(uint64_t))&type metadata accessor for PromotionalAssets.PhotoAlbum);
}

uint64_t sub_1000B275C()
{
  return sub_1000B27EC(&qword_1001A9280, (void (*)(uint64_t))&type metadata accessor for PromotionalAssets.Video);
}

uint64_t sub_1000B27A4()
{
  return sub_1000B27EC(&qword_1001A9288, (void (*)(uint64_t))&type metadata accessor for PromotionalAssets.WatchFace);
}

uint64_t sub_1000B27EC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B2850()
{
  uint64_t v0 = Venue.address.getter();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = (void *)v0;
  id v2 = [self stringFromPostalAddress:v0 style:0];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t sub_1000B28D8(uint64_t a1)
{
  unint64_t result = sub_1000B2900();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B2900()
{
  unint64_t result = qword_1001A92F8;
  if (!qword_1001A92F8)
  {
    type metadata accessor for Venue();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A92F8);
  }
  return result;
}

void sub_1000B2958()
{
  sub_1000B3A58();
  if (v0 <= 0x3F)
  {
    swift_checkMetadataState();
    if (v1 <= 0x3F) {
      swift_initClassMetadata2();
    }
  }
}

uint64_t sub_1000B2A40()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = *(void *)(*(void *)v0 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v5);
  uint64_t v7 = (char *)&v11 - v6;
  (*(void (**)(uint64_t, uint64_t))(v1 + 200))(v2, v1);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = sub_100013A24(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, AssociatedTypeWitness);
  return v9;
}

uint64_t sub_1000B2BC0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 88);
  uint64_t v3 = *(void *)(*v0 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v6);
  uint64_t v8 = (char *)&v21 - v7;
  uint64_t v23 = 0;
  unint64_t v24 = 0xE000000000000000;
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 200);
  uint64_t v21 = (uint64_t)v0 + *(void *)(v1 + 104);
  uint64_t v22 = v9;
  v9(v3, v2);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = sub_100014BD0(AssociatedTypeWitness, AssociatedConformanceWitness);
  unint64_t v13 = v12;
  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  uint64_t v23 = v11;
  unint64_t v24 = v13;
  v15._uint64_t countAndFlagsBits = 0x20A280E220;
  v15._object = (void *)0xA500000000000000;
  String.append(_:)(v15);
  v22(v3, v2);
  uint64_t v16 = sub_100014F78(AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v18 = v17;
  v14(v8, AssociatedTypeWitness);
  v19._uint64_t countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t sub_1000B2DDC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = *(void *)(*(void *)v0 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v5);
  uint64_t v7 = (char *)&v23 - v6;
  uint64_t v27 = sub_1000B2A40();
  uint64_t v28 = v8;
  v9._uint64_t countAndFlagsBits = 8236;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  uint64_t v10 = v0 + *(void *)(*(void *)v0 + 104);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v1 + 200);
  uint64_t v26 = v10;
  uint64_t v24 = v2;
  v25(v2, v1);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v12 = sub_100014BD0(AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v14 = v13;
  Swift::String v15 = *(void (**)(char *, uint64_t))(v4 + 8);
  v15(v7, AssociatedTypeWitness);
  v16._uint64_t countAndFlagsBits = v12;
  v16._object = v14;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = 8236;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  v25(v24, v1);
  uint64_t v18 = sub_100014F78(AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v20 = v19;
  v15(v7, AssociatedTypeWitness);
  v21._uint64_t countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  return v27;
}

BOOL sub_1000B3010()
{
  return (sub_100059CBC(*(void *)(*(void *)v0 + 80), *(void *)(*(void *)v0 + 88)) & 1) == 0;
}

uint64_t sub_1000B3080()
{
  *(void *)(v1 + 16) = v0;
  type metadata accessor for MainActor();
  *(void *)(v1 + 24) = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000B3118, v3, v2);
}

uint64_t sub_1000B3118()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_release();
  if ((sub_100059CBC(*(void *)(*(void *)v1 + 80), *(void *)(*(void *)v1 + 88)) & 1) == 0) {
    sub_1000B35A4();
  }
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void sub_1000B31D4(uint64_t a1)
{
  uint64_t v3 = *v1;
  sub_10000570C(&qword_1001A5390);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100152B90;
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(v3 + 88) + 152))(*(void *)(v3 + 80));
  *(void *)(v4 + 56) = &type metadata for AnalyticsString;
  *(void *)(v4 + 64) = &off_1001AAD38;
  *(void *)(v4 + 40) = v5;
  *(void *)(v4 + 48) = v6;
  *(unsigned char *)(v4 + 32) = 0;
  *(void *)(v4 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v4 + 104) = &off_1001AAD10;
  *(unsigned char *)(v4 + 72) = 0;
  *(void *)(v4 + 136) = &type metadata for AnalyticsModuleName;
  *(void *)(v4 + 144) = &off_1001AAD98;
  *(unsigned char *)(v4 + 112) = 2;
  *(void *)(v4 + 176) = &type metadata for AnalyticsModuleAction;
  *(void *)(v4 + 184) = &off_1001AAD70;
  *(_OWORD *)(v4 + 152) = xmmword_100157FF0;
  *(unsigned char *)(v4 + 168) = 3;
  if (*(void *)(a1 + 72))
  {
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0xE000000000000000;
  }
  Swift::String v21 = &type metadata for AnalyticsString;
  uint64_t v22 = (void *(*)())&off_1001AAD38;
  LOBYTE(aBlock) = 1;
  uint64_t v19 = v7;
  uint64_t v20 = (Class (*)(uint64_t))v8;
  swift_bridgeObjectRetain();
  uint64_t v24 = sub_1001378BC((char *)1, 5, 1, (char *)v4);
  uint64_t v9 = sub_100007534((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v9, v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  sub_100116BFC(4, (uint64_t)v11, (uint64_t *)&v24, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_1001AAD38);
  sub_100007584((uint64_t)&aBlock);
  unint64_t v13 = v24;
  NSString v14 = String._bridgeToObjectiveC()();
  Swift::String v15 = (void *)swift_allocObject();
  v15[2] = 0xD00000000000001ELL;
  v15[3] = 0x800000010015D360;
  void v15[4] = v13;
  uint64_t v22 = sub_100007614;
  uint64_t v23 = v15;
  aBlock = _NSConcreteStackBlock;
  uint64_t v19 = 1107296256;
  uint64_t v20 = sub_100116B70;
  Swift::String v21 = (ValueMetadata *)&unk_100198DB8;
  Swift::String v16 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v16);
  swift_bridgeObjectRelease();
}

uint64_t sub_1000B34F0()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1000B35A4()
{
  return static Published.subscript.setter();
}

id sub_1000B365C()
{
  return sub_100046650(v0 + *(void *)(*(void *)v0 + 104), *(void **)(v0 + *(void *)(*(void *)v0 + 112)), *(void *)(*(void *)v0 + 80), *(char **)(*(void *)v0 + 88));
}

uint64_t sub_1000B36BC()
{
  return sub_1000B35A4();
}

uint64_t sub_1000B36C4(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  sub_1000B3704(a1);
  return v2;
}

uint64_t *sub_1000B3704(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = sub_10000570C(&qword_1001A57C8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  unint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = (uint64_t)v1 + qword_1001A9300;
  uint64_t v10 = *(void *)(v3 + 80);
  v17[15] = 0;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v5 + 32))(v9, v8, v4);
  uint64_t v11 = *(void *)(*v1 + 112);
  *(uint64_t *)((char *)v1 + v11) = (uint64_t)[objc_allocWithZone((Class)EKEventStore) init];
  uint64_t v12 = (uint64_t)v1 + *(void *)(*v1 + 120);
  *(void *)uint64_t v12 = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v12 + 8) = v13;
  *(unsigned char *)(v12 + 16) = v14 & 1;
  *(void *)(v12 + 24) = v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))((uint64_t)v1 + *(void *)(*v1 + 104), a1, v10);
  return v1;
}

uint64_t *sub_1000B38D8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (uint64_t)v0 + qword_1001A9300;
  uint64_t v3 = sub_10000570C(&qword_1001A57C8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 104));

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000B39E8()
{
  sub_1000B38D8();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CalendarViewModel()
{
  return sub_10000B72C();
}

void sub_1000B3A58()
{
  if (!qword_1001A6E38)
  {
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, &qword_1001A6E38);
    }
  }
}

uint64_t sub_1000B3AB8()
{
  return 16;
}

__n128 sub_1000B3AC4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000B3AD0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1000B3B10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000B3B20()
{
  return swift_release();
}

unint64_t sub_1000B3B2C()
{
  unint64_t result = qword_1001A8138;
  if (!qword_1001A8138)
  {
    type metadata accessor for Artist();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8138);
  }
  return result;
}

unint64_t sub_1000B3B88()
{
  unint64_t result = qword_1001A54A0;
  if (!qword_1001A54A0)
  {
    sub_100004A58(&qword_1001A5490);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A54A0);
  }
  return result;
}

void *sub_1000B3BEC(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    uint64_t v14 = a3[7];
    uint64_t v15 = (char *)v4 + v14;
    Swift::String v16 = (char *)a2 + v14;
    uint64_t v17 = *(void *)((char *)a2 + v14 + 24);
    if (v17)
    {
      uint64_t v18 = *((void *)v16 + 4);
      *((void *)v15 + 3) = v17;
      *((void *)v15 + 4) = v18;
      (**(void (***)(void))(v17 - 8))();
    }
    else
    {
      long long v20 = *((_OWORD *)v16 + 1);
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v20;
      *((void *)v15 + 4) = *((void *)v16 + 4);
    }
    uint64_t v21 = a3[9];
    *((unsigned char *)v4 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    *(void *)((char *)v4 + v21) = *(void *)((char *)a2 + v21);
  }
  swift_retain();
  return v4;
}

uint64_t sub_1000B3D60(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  if (*(void *)(v6 + 24)) {
    sub_100007584(v6);
  }

  return swift_release();
}

void *sub_1000B3E08(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = *(void *)((char *)a2 + v13 + 24);
  if (v16)
  {
    uint64_t v17 = *((void *)v15 + 4);
    *((void *)v14 + 3) = v16;
    *((void *)v14 + 4) = v17;
    (**(void (***)(void))(v16 - 8))();
  }
  else
  {
    long long v18 = *((_OWORD *)v15 + 1);
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    *((_OWORD *)v14 + 1) = v18;
    *((void *)v14 + 4) = *((void *)v15 + 4);
  }
  uint64_t v19 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  *(void *)((char *)a1 + v19) = *(void *)((char *)a2 + v19);
  swift_retain();
  return a1;
}

void *sub_1000B3F30(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = (uint64_t)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = *(void *)((char *)a2 + v10 + 24);
  if (!*(void *)((char *)a1 + v10 + 24))
  {
    if (v13)
    {
      *(void *)(v11 + 24) = v13;
      *(void *)(v11 + 32) = *((void *)v12 + 4);
      (**(void (***)(uint64_t, char *))(v13 - 8))(v11, v12);
      goto LABEL_8;
    }
LABEL_7:
    long long v14 = *(_OWORD *)v12;
    long long v15 = *((_OWORD *)v12 + 1);
    *(void *)(v11 + 32) = *((void *)v12 + 4);
    *(_OWORD *)uint64_t v11 = v14;
    *(_OWORD *)(v11 + 16) = v15;
    goto LABEL_8;
  }
  if (!v13)
  {
    sub_100007584(v11);
    goto LABEL_7;
  }
  sub_100056128((uint64_t *)v11, (uint64_t *)v12);
LABEL_8:
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_1000B40A4(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = a3[8];
  uint64_t v13 = (char *)a1 + v11;
  long long v14 = (char *)a2 + v11;
  long long v15 = *(_OWORD *)v14;
  long long v16 = *((_OWORD *)v14 + 1);
  *((void *)v13 + 4) = *((void *)v14 + 4);
  *(_OWORD *)uint64_t v13 = v15;
  *((_OWORD *)v13 + 1) = v16;
  *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  return a1;
}

void *sub_1000B4160(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v12;
  if (*(void *)((char *)a1 + v12 + 24)) {
    sub_100007584((uint64_t)a1 + v12);
  }
  long long v14 = *(_OWORD *)((char *)a2 + v12 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)((char *)a2 + v12);
  *((_OWORD *)v13 + 1) = v14;
  *((void *)v13 + 4) = *(void *)((char *)a2 + v12 + 32);
  uint64_t v15 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  *(void *)((char *)a1 + v15) = *(void *)((char *)a2 + v15);
  swift_release();
  return a1;
}

uint64_t sub_1000B424C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B4260);
}

uint64_t sub_1000B4260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000B4310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B4324);
}

uint64_t sub_1000B4324(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for EventRowViewModel()
{
  uint64_t result = qword_1001A9420;
  if (!qword_1001A9420) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000B4418()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000B44CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for EventRowViewModel();
  sub_10000A428(v1 + *(int *)(v3 + 28), (uint64_t)v16, &qword_1001A6928);
  uint64_t v4 = v17;
  if (v17)
  {
    uint64_t v5 = v18;
    uint64_t v15 = sub_10000AC9C(v16, v17);
    uint64_t v6 = self;
    id v7 = [v6 currentDevice];
    id v8 = [v7 userInterfaceIdiom];

    if (v8 == (id)1) {
      uint64_t v9 = 200;
    }
    else {
      uint64_t v9 = 100;
    }
    id v10 = [v6 currentDevice];
    id v11 = [v10 userInterfaceIdiom];

    if (v11 == (id)1) {
      uint64_t v12 = 200;
    }
    else {
      uint64_t v12 = 100;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 40))(v9, v12, v4, v5);
    return sub_100007584((uint64_t)v16);
  }
  else
  {
    sub_10000ACE0((uint64_t)v16, &qword_1001A6928);
    uint64_t v14 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a1, 1, 1, v14);
  }
}

uint64_t sub_1000B4650()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for TimeZone();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000570C(&qword_1001A5808);
  uint64_t v9 = __chkstk_darwin(v7 - 8, v8);
  id v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)&v33 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))((char *)&v33 - v13, 1, 1, v2);
  id v15 = [objc_allocWithZone((Class)NSDateFormatter) init];
  [v15 setDateStyle:2];
  sub_10000A428((uint64_t)v14, (uint64_t)v11, &qword_1001A5808);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1)
  {
    sub_10000ACE0((uint64_t)v11, &qword_1001A5808);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v11, v2);
    Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
    [v15 setTimeZone:isa];

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  sub_10000ACE0((uint64_t)v14, &qword_1001A5808);
  uint64_t v17 = type metadata accessor for EventRowViewModel();
  Class v18 = Date._bridgeToObjectiveC()().super.isa;
  id v19 = [v15 stringFromDate:v18];

  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;

  if (*((unsigned char *)v1 + *(int *)(v17 + 32)) == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v23 = v1[3];
    uint64_t v33 = v1[2];
    uint64_t v34 = v23;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v33 = v20;
    uint64_t v34 = v22;
    v24._uint64_t countAndFlagsBits = 8236;
    v24._object = (void *)0xE200000000000000;
    String.append(_:)(v24);
    uint64_t v25 = v1[2];
    uint64_t v26 = (void *)v1[3];
    swift_bridgeObjectRetain();
    v27._uint64_t countAndFlagsBits = v25;
    v27._object = v26;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
  }
  v28._uint64_t countAndFlagsBits = 8236;
  v28._object = (void *)0xE200000000000000;
  String.append(_:)(v28);
  uint64_t v30 = *v1;
  uint64_t v29 = (void *)v1[1];
  swift_bridgeObjectRetain();
  v31._uint64_t countAndFlagsBits = v30;
  v31._object = v29;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  return v33;
}

uint64_t sub_1000B4960()
{
  uint64_t result = type metadata accessor for FeaturedVideoPlayer();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000B4A00()
{
  return Binding.wrappedValue.getter();
}

uint64_t sub_1000B4A48(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  id v11 = (char *)&v22 - v10;
  sub_1000B4A00();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v11, 1, v3))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    (*(void (**)(uint64_t))(*(void *)(a1 + 24) + 24))(v3);
LABEL_3:
    char v12 = 0;
    goto LABEL_4;
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v11, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  uint64_t v14 = *(void *)(a1 + 24);
  id v15 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 24);
  uint64_t v16 = v15(v3, v14);
  uint64_t v18 = v17;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v19 = v15(v3, v14);
  if (!v18) {
    goto LABEL_3;
  }
  if (v16 == v19 && v18 == v20)
  {
    swift_bridgeObjectRelease();
    char v12 = 1;
  }
  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
LABEL_4:
  swift_bridgeObjectRelease();
  return v12 & 1;
}

uint64_t sub_1000B4CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = __chkstk_darwin(a1, a2);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v9 = sub_1000B4A48(v5, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v2, a1);
  if (v9) {
    uint64_t v10 = v7[*(int *)(a1 + 36)];
  }
  else {
    uint64_t v10 = 1;
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, a1);
  return v10;
}

id sub_1000B4DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [objc_allocWithZone((Class)AVPlayerViewController) init];
  (*(void (**)(void))(*(void *)(a2 + 24) + 40))(*(void *)(a2 + 16));
  id v9 = objc_allocWithZone((Class)AVPlayer);
  URL._bridgeToObjectiveC()(v10);
  uint64_t v12 = v11;
  id v13 = [v9 initWithURL:v11];

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  [v8 setModalPresentationStyle:0];
  [v8 setExitsFullScreenWhenPlaybackEnds:1];
  [v8 setShowsPlaybackControls:1];
  [v8 setVideoGravity:AVLayerVideoGravityResizeAspectFill];
  [v8 setPlayer:v13];
  id v14 = [v8 player];
  if (v14)
  {
    id v15 = v14;
    swift_getWitnessTable();
    type metadata accessor for UIViewControllerRepresentableContext();
    UIViewControllerRepresentableContext.coordinator.getter();
    uint64_t v16 = v21;
    NSString v17 = String._bridgeToObjectiveC()();
    [v15 addObserver:v16 forKeyPath:v17 options:1 context:0];
  }
  swift_getWitnessTable();
  type metadata accessor for UIViewControllerRepresentableContext();
  UIViewControllerRepresentableContext.coordinator.getter();
  uint64_t v18 = v21;
  [v8 setDelegate:v21];

  return v8;
}

void *sub_1000B5074()
{
  id v1 = objc_allocWithZone((Class)type metadata accessor for FeaturedVideoPlayer.Coordinator());
  return sub_1000B8A1C(v0);
}

id sub_1000B50B0()
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = swift_isaMask & *v0;
  if (*(void *)((char *)v0 + *(void *)(v2 + 0x68)))
  {
    swift_retain();
    sub_10000570C(&qword_1001A5968);
    Task.cancel()();
    swift_release();
    uint64_t v2 = swift_isaMask & *v0;
  }
  if (*(void *)((char *)v0 + *(void *)(v2 + 112)))
  {
    swift_retain();
    sub_10000570C(&qword_1001A5968);
    Task.cancel()();
    swift_release();
  }
  v4.receiver = v0;
  v4.super_class = ObjectType;
  [super dealloc];
}

id sub_1000B51CC(void *a1)
{
  id v1 = a1;
  return sub_1000B50B0();
}

uint64_t sub_1000B51F4(void *a1)
{
  id v1 = (char *)a1 + *(void *)((swift_isaMask & *a1) + 0x60);
  uint64_t v2 = type metadata accessor for FeaturedVideoPlayer();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();

  return swift_release();
}

uint64_t sub_1000B52FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a4;
  uint64_t v5 = type metadata accessor for Notification();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  sub_10000570C(&qword_1001A95F8);
  v4[10] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for NSNotificationCenter.Notifications.Iterator();
  v4[11] = v6;
  v4[12] = *(void *)(v6 - 8);
  v4[13] = swift_task_alloc();
  return _swift_task_switch(sub_1000B5448, 0, 0);
}

uint64_t sub_1000B5448()
{
  id v1 = [self defaultCenter];
  if (qword_1001A4E78 != -1) {
    swift_once();
  }
  NSNotificationCenter.notifications(named:object:)();

  NSNotificationCenter.Notifications.makeAsyncIterator()();
  swift_beginAccess();
  uint64_t v2 = sub_1000B9320((unint64_t *)&unk_1001A9600, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[14] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000B55CC;
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[11];
  return dispatch thunk of AsyncIteratorProtocol.next()(v4, v5, v2);
}

uint64_t sub_1000B55CC()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000B942C;
  }
  else {
    uint64_t v2 = sub_1000B56E0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000B56E0()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) != 1)
  {
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(v0[9], v1, v2);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    uint64_t v5 = v0[9];
    uint64_t v6 = v0[7];
    uint64_t v7 = (void (**)(uint64_t, uint64_t))(v0[8] + 8);
    if (Strong)
    {
      uint64_t v8 = (void *)Strong;
      sub_1000B58E0();

      (*v7)(v5, v6);
      uint64_t v9 = sub_1000B9320((unint64_t *)&unk_1001A9600, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator);
      uint64_t v10 = (void *)swift_task_alloc();
      v0[14] = v10;
      void *v10 = v0;
      v10[1] = sub_1000B55CC;
      uint64_t v11 = v0[10];
      uint64_t v12 = v0[11];
      return dispatch thunk of AsyncIteratorProtocol.next()(v11, v12, v9);
    }
    (*v7)(v0[9], v0[7]);
  }
  (*(void (**)(void, void))(v0[12] + 8))(v0[13], v0[11]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_1000B58E0()
{
  uint64_t v1 = swift_isaMask & *v0;
  uint64_t v2 = (void *)Notification.name.getter();
  if (qword_1001A4E78 != -1) {
    swift_once();
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
  {

    swift_bridgeObjectRelease_n();
    goto LABEL_14;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v8)
  {
LABEL_14:
    uint64_t v14 = Notification.userInfo.getter();
    if (v14)
    {
      uint64_t v15 = v14;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v15 + 16) && (unint64_t v16 = sub_1000B8248((uint64_t)v25), (v17 & 1) != 0))
      {
        sub_100044E1C(*(void *)(v15 + 56) + 32 * v16, (uint64_t)&v26);
      }
      else
      {
        long long v26 = 0u;
        long long v27 = 0u;
      }
      swift_bridgeObjectRelease();
      sub_100044BDC((uint64_t)v25);
      if (*((void *)&v27 + 1))
      {
        uint64_t result = swift_dynamicCast();
        if ((result & 1) == 0) {
          return result;
        }
        uint64_t v20 = v25[0];
        uint64_t v19 = v25[1];
        if (v20 == (*(uint64_t (**)(void))(*(void *)(v1 + 88) + 24))(*(void *)(v1 + 80))
          && v19 == v21)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          if ((v23 & 1) == 0) {
            return result;
          }
        }
        return sub_1000B6478();
      }
    }
    else
    {
      long long v26 = 0u;
      long long v27 = 0u;
    }
    return sub_10000ACE0((uint64_t)&v26, (uint64_t *)&unk_1001A9610);
  }
  uint64_t v9 = (void *)Notification.name.getter();
  if (qword_1001A4E80 != -1) {
    swift_once();
  }
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v12 == v13)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v24 & 1) == 0) {
      return result;
    }
  }

  return sub_1000B661C();
}

uint64_t sub_1000B5C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_10000570C(&qword_1001A95D0);
  __chkstk_darwin(v5 - 8, v6);
  char v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B8FDC(a1, (uint64_t)v8);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10000ACE0((uint64_t)v8, &qword_1001A95D0);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
  }
  swift_getObjectType();
  swift_unknownObjectRetain();
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
  uint64_t v13 = v12;
  swift_unknownObjectRelease();
  if (v13 | v11)
  {
    v15[0] = 0;
    v15[1] = 0;
    v15[2] = v11;
    v15[3] = v13;
  }
  return swift_task_create();
}

uint64_t sub_1000B5E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a4;
  uint64_t v5 = type metadata accessor for Notification();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  sub_10000570C(&qword_1001A95F8);
  v4[10] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for NSNotificationCenter.Notifications.Iterator();
  v4[11] = v6;
  v4[12] = *(void *)(v6 - 8);
  v4[13] = swift_task_alloc();
  return _swift_task_switch(sub_1000B5F5C, 0, 0);
}

uint64_t sub_1000B5F5C()
{
  id v1 = [self defaultCenter];
  if (qword_1001A4E80 != -1) {
    swift_once();
  }
  NSNotificationCenter.notifications(named:object:)();

  NSNotificationCenter.Notifications.makeAsyncIterator()();
  swift_beginAccess();
  uint64_t v2 = sub_1000B9320((unint64_t *)&unk_1001A9600, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[14] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000B60E0;
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[11];
  return dispatch thunk of AsyncIteratorProtocol.next()(v4, v5, v2);
}

uint64_t sub_1000B60E0()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000B63F4;
  }
  else {
    uint64_t v2 = sub_1000B61F4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000B61F4()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) != 1)
  {
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(v0[9], v1, v2);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    uint64_t v5 = v0[9];
    uint64_t v6 = v0[7];
    uint64_t v7 = (void (**)(uint64_t, uint64_t))(v0[8] + 8);
    if (Strong)
    {
      uint64_t v8 = (void *)Strong;
      sub_1000B58E0();

      (*v7)(v5, v6);
      uint64_t v9 = sub_1000B9320((unint64_t *)&unk_1001A9600, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator);
      uint64_t v10 = (void *)swift_task_alloc();
      v0[14] = v10;
      void *v10 = v0;
      v10[1] = sub_1000B60E0;
      uint64_t v11 = v0[10];
      uint64_t v12 = v0[11];
      return dispatch thunk of AsyncIteratorProtocol.next()(v11, v12, v9);
    }
    (*v7)(v0[9], v0[7]);
  }
  (*(void (**)(void, void))(v0[12] + 8))(v0[13], v0[11]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_1000B63F4()
{
  *(void *)(v0 + 40) = *(void *)(v0 + 120);
  sub_10000570C(&qword_1001A5968);
  uint64_t v1 = swift_dynamicCast();
  return _swift_willThrowTypedImpl(v1, &type metadata for Never, &protocol witness table for Never);
}

uint64_t sub_1000B6478()
{
  uint64_t v1 = swift_isaMask & *(void *)v0;
  uint64_t v2 = *(void *)(v1 + 0x50);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v10 - v6;
  uint64_t v8 = *(void *)(v2 - 8);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)&v10 - v6, &v0[*(void *)(v1 + 96)], v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v7, 0, 1, v2);
  type metadata accessor for FeaturedVideoPlayer();
  sub_1000B8878((uint64_t)v7);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1000B661C()
{
  uint64_t v1 = *(void *)((swift_isaMask & *v0) + 0x50);
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v8 - v5;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))((char *)&v8 - v5, 1, 1, v1);
  type metadata accessor for FeaturedVideoPlayer();
  sub_1000B8878((uint64_t)v6);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

void sub_1000B678C(void *a1, void *a2)
{
  id v3 = [a1 player];
  if (v3)
  {
    uint64_t v4 = v3;
    [v3 rate];
    if (v5 > 0.0)
    {
      id v6 = [v4 error];
      if (!v6)
      {
        char v7 = 1;
        goto LABEL_7;
      }
    }
    char v7 = 0;
LABEL_7:
    uint64_t v8 = swift_allocObject();
    *(unsigned char *)(v8 + 16) = v7;
    *(void *)(v8 + 24) = v4;
    void v11[4] = sub_1000B93F4;
    void v11[5] = v8;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    void v11[2] = sub_1000B68E0;
    v11[3] = &unk_100198FB8;
    uint64_t v9 = _Block_copy(v11);
    id v10 = v4;
    swift_release();
    [a2 animateAlongsideTransition:0 completion:v9];
    _Block_release(v9);
  }
}

uint64_t sub_1000B68E0(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_1000B6940(uint64_t a1, uint64_t a2)
{
  static MainActor.shared.getter();
  swift_release();
  swift_task_getMainExecutor();
  if ((swift_task_isCurrentExecutor() & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  sub_1000B9394();
  if (v2) {
    return swift_release();
  }
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_6:
    _StringGuts.grow(_:)(66);
    v8._object = (void *)0x800000010015EDF0;
    v8._uint64_t countAndFlagsBits = 0xD00000000000003FLL;
    String.append(_:)(v8);
    v9._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._uint64_t countAndFlagsBits = 46;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void sub_1000B6ACC(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  type metadata accessor for MainActor();
  v9[2] = a3;
  v9[3] = a4;
  id v7 = a3;
  swift_unknownObjectRetain();
  id v8 = a1;
  sub_1000B6940((uint64_t)sub_1000B9368, (uint64_t)v9);

  swift_unknownObjectRelease();
}

uint64_t sub_1000B6B7C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a3)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;
    if (a4) {
      goto LABEL_3;
    }
LABEL_6:
    memset(v17, 0, sizeof(v17));
    id v14 = a5;
    id v15 = a1;
    if (a5) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v13 = 0;
    goto LABEL_8;
  }
  uint64_t v8 = 0;
  uint64_t v10 = 0;
  if (!a4) {
    goto LABEL_6;
  }
LABEL_3:
  swift_unknownObjectRetain();
  id v11 = a5;
  id v12 = a1;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  if (!a5) {
    goto LABEL_7;
  }
LABEL_4:
  type metadata accessor for NSKeyValueChangeKey(0);
  sub_1000B9320(&qword_1001A5148, type metadata accessor for NSKeyValueChangeKey);
  uint64_t v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

LABEL_8:
  sub_1000B9044(v8, v10, (uint64_t)v17, v13);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_10000ACE0((uint64_t)v17, (uint64_t *)&unk_1001A9610);
}

void sub_1000B6CC0()
{
}

uint64_t type metadata accessor for FeaturedVideoPlayer.Coordinator()
{
  return sub_10000B72C();
}

uint64_t type metadata accessor for FeaturedVideoPlayer()
{
  return sub_10000B72C();
}

uint64_t sub_1000B6D34()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    type metadata accessor for Optional();
    uint64_t v0 = type metadata accessor for Binding();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

void *sub_1000B6E28(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 + 64);
  int v9 = *(_DWORD *)(v6 + 80);
  uint64_t v10 = v9;
  uint64_t v11 = ~(v9 | 7);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v12 = *(void *)(v6 + 64);
  }
  else {
    size_t v12 = v8 + 1;
  }
  unint64_t v13 = ((v9 + 16) & ~(unint64_t)v9)
      + v12
      + (((v9 | 7) + v8 + 1) & ~(v9 | 7));
  int v14 = v9 & 0x100000;
  if (v10 > 7 || v14 != 0 || v13 > 0x18)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v17 + ((v10 + 16) & v11));
    swift_retain();
  }
  else
  {
    long long v26 = *(void (**)(void *, void *, uint64_t))(v6 + 16);
    v26(a1, a2, v5);
    *((unsigned char *)v4 + v8) = *((unsigned char *)a2 + v8);
    uint64_t v18 = (void *)(((unint64_t)v4 + v8 + 8) & v11);
    uint64_t v19 = (void *)(((unint64_t)a2 + v8 + 8) & v11);
    *uint64_t v18 = *v19;
    uint64_t v20 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v21 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v20 = *v21;
    uint64_t v22 = (void *)(((unint64_t)v20 + v10 + 8) & ~v10);
    char v23 = (void *)(((unint64_t)v21 + v10 + 8) & ~v10);
    char v24 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48);
    swift_retain();
    swift_retain();
    if (v24(v23, 1, v5))
    {
      memcpy(v22, v23, v12);
    }
    else
    {
      v26(v22, v23, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v22, 0, 1, v5);
    }
  }
  return v4;
}

uint64_t sub_1000B700C(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  uint64_t v11 = *(uint64_t (**)(unint64_t, uint64_t))(v4 + 8);
  v11(a1, v3);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = (a1 + v6 + (v7 | 7) + 1) & ~(v7 | 7);
  swift_release();
  swift_release();
  unint64_t v9 = (v7 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v7;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v9, 1, v3);
  if (!result)
  {
    return v11(v9, v3);
  }
  return result;
}

void *sub_1000B714C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  uint64_t v20 = *(void (**)(void *, const void *, uint64_t))(v6 + 16);
  v20(a1, a2, v5);
  size_t v8 = *(void *)(v6 + 64);
  *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = (v9 | 7) + 1;
  uint64_t v11 = (void *)(((unint64_t)a1 + v8 + v10) & ~(v9 | 7));
  size_t v12 = (void *)(((unint64_t)a2 + v8 + v10) & ~(v9 | 7));
  *uint64_t v11 = *v12;
  unint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v13 = *v14;
  id v15 = (void *)(((unint64_t)v13 + v9 + 8) & ~v9);
  unint64_t v16 = (const void *)(((unint64_t)v14 + v9 + 8) & ~v9);
  uint64_t v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  swift_retain();
  swift_retain();
  if (v17(v16, 1, v5))
  {
    if (*(_DWORD *)(v7 + 84)) {
      size_t v18 = v8;
    }
    else {
      size_t v18 = v8 + 1;
    }
    memcpy(v15, v16, v18);
  }
  else
  {
    v20(v15, v16, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v5);
  }
  return a1;
}

void *sub_1000B72F0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  size_t v8 = *(void (**)(void *, const void *, uint64_t))(v6 + 24);
  v8(a1, a2, v5);
  size_t v9 = *(void *)(v6 + 64);
  char v23 = a1;
  *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = (v10 | 7) + 1;
  size_t v12 = (void *)(((unint64_t)a1 + v9 + v11) & ~(v10 | 7));
  unint64_t v13 = (void *)(((unint64_t)a2 + v9 + v11) & ~(v10 | 7));
  *size_t v12 = *v13;
  swift_retain();
  swift_release();
  int v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  id v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  *int v14 = *v15;
  swift_retain();
  swift_release();
  unint64_t v16 = (void *)(((unint64_t)v14 + v10 + 8) & ~v10);
  uint64_t v17 = (void *)(((unint64_t)v15 + v10 + 8) & ~v10);
  size_t v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v14) = v18(v16, 1, v5);
  int v19 = v18(v17, 1, v5);
  if (v14)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v16, v17, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v16, 0, 1, v5);
      return v23;
    }
    int v20 = *(_DWORD *)(v7 + 84);
  }
  else
  {
    if (!v19)
    {
      v8(v16, v17, v5);
      return v23;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v16, v5);
    int v20 = *(_DWORD *)(v7 + 84);
  }
  if (v20) {
    size_t v21 = v9;
  }
  else {
    size_t v21 = v9 + 1;
  }
  memcpy(v16, v17, v21);
  return v23;
}

void *sub_1000B750C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  size_t v8 = *(void (**)(void *, const void *, uint64_t))(v6 + 32);
  v8(a1, a2, v5);
  size_t v9 = *(void *)(v6 + 64);
  *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = (v10 | 7) + 1;
  size_t v12 = (void *)(((unint64_t)a1 + v9 + v11) & ~(v10 | 7));
  unint64_t v13 = (void *)(((unint64_t)a2 + v9 + v11) & ~(v10 | 7));
  *size_t v12 = *v13;
  int v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  id v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  *int v14 = *v15;
  unint64_t v16 = (void *)(((unint64_t)v14 + v10 + 8) & ~v10);
  uint64_t v17 = (const void *)(((unint64_t)v15 + v10 + 8) & ~v10);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v17, 1, v5))
  {
    if (*(_DWORD *)(v7 + 84)) {
      size_t v18 = v9;
    }
    else {
      size_t v18 = v9 + 1;
    }
    memcpy(v16, v17, v18);
  }
  else
  {
    v8(v16, v17, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v16, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_1000B768C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  size_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v8(a1, a2, v5);
  size_t v9 = *(void *)(v6 + 64);
  uint64_t v24 = a1;
  size_t v10 = v9 + a2;
  *(unsigned char *)(v9 + a1) = *(unsigned char *)(v9 + a2);
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = (v11 | 7) + 1;
  unint64_t v13 = (void *)((v12 + v9 + a1) & ~(v11 | 7));
  int v14 = (void *)((v12 + v10) & ~(v11 | 7));
  *unint64_t v13 = *v14;
  swift_release();
  id v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  *id v15 = *v16;
  swift_release();
  uint64_t v17 = (void *)(((unint64_t)v15 + v11 + 8) & ~v11);
  size_t v18 = (void *)(((unint64_t)v16 + v11 + 8) & ~v11);
  int v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v16) = v19(v17, 1, v5);
  int v20 = v19(v18, 1, v5);
  if (v16)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v17, v18, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v5);
      return v24;
    }
    int v21 = *(_DWORD *)(v7 + 84);
  }
  else
  {
    if (!v20)
    {
      v8((uint64_t)v17, (uint64_t)v18, v5);
      return v24;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v17, v5);
    int v21 = *(_DWORD *)(v7 + 84);
  }
  if (v21) {
    size_t v22 = v9;
  }
  else {
    size_t v22 = v9 + 1;
  }
  memcpy(v17, v18, v22);
  return v24;
}

uint64_t sub_1000B7898(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  if (v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = v7;
  }
  if (v6 <= v8) {
    unsigned int v9 = v8;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v10 = *(void *)(v4 + 64);
  if (v6) {
    uint64_t v11 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v11 = v10 + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v12 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v13 = v12 | 7;
  int v14 = a2 - v9;
  if (a2 <= v9) {
    goto LABEL_32;
  }
  uint64_t v15 = ((v12 + 16) & ~v12) + v11 + ((v13 + v10 + 1) & ~v13);
  char v16 = 8 * v15;
  if (v15 <= 3)
  {
    unsigned int v19 = ((v14 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v19))
    {
      int v17 = *(_DWORD *)((char *)a1 + v15);
      if (!v17) {
        goto LABEL_32;
      }
      goto LABEL_24;
    }
    if (v19 > 0xFF)
    {
      int v17 = *(unsigned __int16 *)((char *)a1 + v15);
      if (!*(unsigned __int16 *)((char *)a1 + v15)) {
        goto LABEL_32;
      }
      goto LABEL_24;
    }
    if (v19 < 2)
    {
LABEL_32:
      if (v6 >= v8)
      {
        char v23 = *(uint64_t (**)(void))(v5 + 48);
        return v23();
      }
      else
      {
        int v21 = (unint64_t *)(((((unint64_t)a1 + v10 + v13 + 1) & ~v13) + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v7 & 0x80000000) != 0)
        {
          unsigned int v24 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v21 + v12 + 8) & ~v12);
          if (v24 >= 2) {
            return v24 - 1;
          }
          else {
            return 0;
          }
        }
        else
        {
          unint64_t v22 = *v21;
          if (v22 >= 0xFFFFFFFF) {
            LODWORD(v22) = -1;
          }
          return (v22 + 1);
        }
      }
    }
  }
  int v17 = *((unsigned __int8 *)a1 + v15);
  if (!*((unsigned char *)a1 + v15)) {
    goto LABEL_32;
  }
LABEL_24:
  int v20 = (v17 - 1) << v16;
  if (v15 > 3) {
    int v20 = 0;
  }
  if (v15)
  {
    if (v15 > 3) {
      LODWORD(v15) = 4;
    }
    switch((int)v15)
    {
      case 2:
        LODWORD(v15) = *a1;
        break;
      case 3:
        LODWORD(v15) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v15) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v15) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v9 + (v15 | v20) + 1;
}

void sub_1000B7AD8(char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = a1;
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  if (v8 <= v10) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = (v13 + 16) & ~v13;
  if (v8) {
    uint64_t v15 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  }
  else {
    uint64_t v15 = v12 + 1;
  }
  size_t v16 = v14 + v15 + (((v13 | 7) + v12 + 1) & ~(v13 | 7));
  BOOL v17 = a3 >= v11;
  unsigned int v18 = a3 - v11;
  if (v18 == 0 || !v17)
  {
LABEL_23:
    if (v11 < a2) {
      goto LABEL_24;
    }
    goto LABEL_16;
  }
  if (v16 > 3)
  {
    int v6 = 1;
    if (v11 < a2) {
      goto LABEL_24;
    }
    goto LABEL_16;
  }
  unsigned int v19 = ((v18 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
  if (!HIWORD(v19))
  {
    if (v19 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v19 > 1;
    }
    goto LABEL_23;
  }
  int v6 = 4;
  if (v11 < a2)
  {
LABEL_24:
    unsigned int v20 = ~v11 + a2;
    if (v16 < 4)
    {
      int v21 = (v20 >> (8 * v16)) + 1;
      if (v16)
      {
        int v22 = v20 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)uint64_t v5 = v22;
          id v5[2] = BYTE2(v22);
        }
        else if (v16 == 2)
        {
          *(_WORD *)uint64_t v5 = v22;
        }
        else
        {
          *uint64_t v5 = v22;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)uint64_t v5 = v20;
      int v21 = 1;
    }
    switch(v6)
    {
      case 1:
        v5[v16] = v21;
        return;
      case 2:
        *(_WORD *)&v5[v16] = v21;
        return;
      case 3:
        goto LABEL_81;
      case 4:
        *(_DWORD *)&v5[v16] = v21;
        return;
      default:
        return;
    }
  }
LABEL_16:
  switch(v6)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 3:
LABEL_81:
      __break(1u);
      JUMPOUT(0x1000B7EA0);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_31;
    default:
LABEL_31:
      if (!a2) {
        return;
      }
LABEL_32:
      if (v8 >= v10) {
        goto LABEL_75;
      }
      uint64_t v5 = (char *)((unint64_t)&a1[v12 + 1 + (v13 | 7)] & ~(v13 | 7));
      if (v8) {
        int v23 = v12;
      }
      else {
        int v23 = v12 + 1;
      }
      if (v10 >= a2)
      {
        Swift::String v28 = (void *)((unint64_t)(v5 + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v9 & 0x80000000) != 0)
        {
          uint64_t v5 = (char *)(((unint64_t)v28 + v13 + 8) & ~v13);
          if (v8) {
            size_t v30 = v12;
          }
          else {
            size_t v30 = (v12 + 1);
          }
          if (v9 >= a2)
          {
            a2 = (a2 + 1);
LABEL_75:
            uint64_t v33 = *(void (**)(char *, uint64_t))(v7 + 56);
            v33(v5, a2);
          }
          else
          {
            if (v30 <= 3) {
              int v31 = ~(-1 << (8 * v30));
            }
            else {
              int v31 = -1;
            }
            if (v30)
            {
              int v26 = v31 & (~v9 + a2);
              if (v30 <= 3) {
                int v32 = v30;
              }
              else {
                int v32 = 4;
              }
              bzero(v5, v30);
              switch(v32)
              {
                case 2:
LABEL_71:
                  *(_WORD *)uint64_t v5 = v26;
                  break;
                case 3:
LABEL_78:
                  *(_WORD *)uint64_t v5 = v26;
                  id v5[2] = BYTE2(v26);
                  break;
                case 4:
LABEL_79:
                  *(_DWORD *)uint64_t v5 = v26;
                  break;
                default:
LABEL_45:
                  *uint64_t v5 = v26;
                  break;
              }
            }
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v29 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v29 = (a2 - 1);
          }
          *Swift::String v28 = v29;
        }
      }
      else
      {
        unsigned int v24 = v23 + v14;
        if ((v23 + v14) <= 3) {
          int v25 = ~(-1 << (8 * (v23 + v14)));
        }
        else {
          int v25 = -1;
        }
        if (v24)
        {
          int v26 = v25 & (~v10 + a2);
          if (v24 <= 3) {
            int v27 = v23 + v14;
          }
          else {
            int v27 = 4;
          }
          bzero(v5, (v23 + v14));
          switch(v27)
          {
            case 2:
              goto LABEL_71;
            case 3:
              goto LABEL_78;
            case 4:
              goto LABEL_79;
            default:
              goto LABEL_45;
          }
        }
      }
      return;
  }
}

uint64_t sub_1000B7EE8@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t v8 = type metadata accessor for FeaturedVideoPlayer();
  *(unsigned char *)(a5 + *(int *)(v8 + 36)) = a2;
  uint64_t v9 = a5 + *(int *)(v8 + 40);
  type metadata accessor for Optional();
  uint64_t v10 = type metadata accessor for Binding();
  unsigned int v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);

  return v11(v9, a3, v10);
}

void sub_1000B7FD8(void *a1, uint64_t a2, uint64_t a3)
{
}

void *sub_1000B7FE0@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1000B5074();
  *a1 = result;
  return result;
}

uint64_t sub_1000B8008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, WitnessTable);
}

uint64_t sub_1000B8084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, WitnessTable);
}

void sub_1000B8100()
{
}

uint64_t sub_1000B8140()
{
  return swift_getWitnessTable();
}

NSString sub_1000B815C()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_1001B7528 = (uint64_t)result;
  return result;
}

NSString sub_1000B8194()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_1001B7530 = (uint64_t)result;
  return result;
}

unint64_t sub_1000B81CC(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_1000B8440(a1, a2, v4);
}

unint64_t sub_1000B8248(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_1000B8524(a1, v4);
}

unint64_t sub_1000B828C(char a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_1000B85EC(a1, v2);
}

unint64_t sub_1000B831C(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return sub_1000B8700(a1, v2);
}

unint64_t sub_1000B83B0(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return sub_1000B8700(a1, v2);
}

unint64_t sub_1000B8440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1000B8524(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_1000B8F80(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_100044BDC((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1000B85EC(char a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = 8 * a1;
    uint64_t v7 = *(void *)&aLocationmusic_0[v6];
    uint64_t v8 = *(void *)&aCalendar_2[v6 + 8];
    while (*(void *)&aLocationmusic_0[8 * *(char *)(*(void *)(v2 + 48) + v4)] != v7
         || *(void *)&aCalendar_2[8 * *(char *)(*(void *)(v2 + 48) + v4) + 8] != v8)
    {
      char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v10 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v5;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v4;
}

unint64_t sub_1000B8700(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_1000B8878(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Optional();
  __chkstk_darwin(v2, v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v7 - v4, a1, v2);
  type metadata accessor for Binding();
  return Binding.wrappedValue.setter();
}

void sub_1000B8964(void *a1, uint64_t a2)
{
  id v4 = [a1 player];
  if (v4)
  {
    id v6 = v4;
    if (sub_1000B4CD4(a2, v5))
    {
      [v6 pause];
      [a1 setShowsPlaybackControls:0];
      [a1 setShowsPlaybackControls:1];
    }
  }
}

void *sub_1000B8A1C(uint64_t a1)
{
  uint64_t v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = (void *)(swift_isaMask & *v1);
  uint64_t v6 = sub_10000570C(&qword_1001A95D0);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)((char *)v2 + v5[13]) = 0;
  *(void *)((char *)v2 + *(void *)((swift_isaMask & *v2) + 0x70)) = 0;
  char v10 = (char *)v2 + *(void *)((swift_isaMask & *v2) + 0x60);
  uint64_t v11 = v5[10];
  uint64_t v12 = v5[11];
  uint64_t v13 = type metadata accessor for FeaturedVideoPlayer();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v10, a1, v13);
  v25.receiver = v2;
  v25.super_class = ObjectType;
  id v14 = [super init];
  uint64_t v15 = type metadata accessor for TaskPriority();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  v16(v9, 1, 1, v15);
  uint64_t v17 = swift_allocObject();
  swift_unknownObjectWeakInit();
  char v18 = (void *)swift_allocObject();
  v18[2] = 0;
  v18[3] = 0;
  _DWORD v18[4] = v11;
  v18[5] = v12;
  v18[6] = v17;
  unsigned int v19 = v14;
  uint64_t v20 = sub_1000B5C48((uint64_t)v9, (uint64_t)&unk_1001A95E0, (uint64_t)v18);
  sub_10000ACE0((uint64_t)v9, &qword_1001A95D0);
  *(void *)((char *)v19 + *(void *)((swift_isaMask & *v19) + 0x68)) = v20;
  swift_release();
  v16(v9, 1, 1, v15);
  uint64_t v21 = swift_allocObject();
  swift_unknownObjectWeakInit();
  int v22 = (void *)swift_allocObject();
  void v22[2] = 0;
  v22[3] = 0;
  void v22[4] = v11;
  v22[5] = v12;
  v22[6] = v21;
  uint64_t v23 = sub_1000B5C48((uint64_t)v9, (uint64_t)&unk_1001A95F0, (uint64_t)v22);

  sub_10000ACE0((uint64_t)v9, &qword_1001A95D0);
  *(void *)((char *)v19 + *(void *)((swift_isaMask & *v19) + 0x70)) = v23;
  swift_release();
  return v19;
}