uint64_t sub_1000B8D70()
{
  uint64_t vars8;

  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1000B8DAC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[6];
  v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10003E098;
  return sub_1000B52FC(a1, v4, v5, v6);
}

uint64_t sub_1000B8E78()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000B8EB8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[6];
  v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100009854;
  return sub_1000B5E10(a1, v4, v5, v6);
}

uint64_t sub_1000B8F80(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000B8FDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A95D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000B9044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = swift_isaMask & *v4;
  if (!a2) {
    return;
  }
  uint64_t v7 = v5;
  if ((a1 != 1702125938 || a2 != 0xE400000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return;
  }
  if (!a4 || !*(void *)(a4 + 16))
  {
    long long v18 = 0u;
    long long v19 = 0u;
    goto LABEL_16;
  }
  v8 = NSKeyValueChangeNewKey;
  unint64_t v9 = sub_1000B831C((uint64_t)v8);
  if ((v10 & 1) == 0)
  {
    long long v18 = 0u;
    long long v19 = 0u;

    goto LABEL_16;
  }
  sub_100044E1C(*(void *)(a4 + 56) + 32 * v9, (uint64_t)&v18);

  if (!*((void *)&v19 + 1))
  {
LABEL_16:
    sub_10000ACE0((uint64_t)&v18, (uint64_t *)&unk_1001A9610);
    return;
  }
  if ((swift_dynamicCast() & 1) != 0 && v17 != 0.0)
  {
    id v11 = [self defaultCenter];
    if (qword_1001A4E78 != -1) {
      swift_once();
    }
    uint64_t v12 = qword_1001B7528;
    sub_10000570C(qword_1001A9620);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100153180;
    *(void *)&long long v18 = 0x44496F65646976;
    *((void *)&v18 + 1) = 0xE700000000000000;
    AnyHashable.init<A>(_:)();
    uint64_t v14 = (*(uint64_t (**)(void))(*(void *)(v7 + 88) + 24))(*(void *)(v7 + 80));
    *(void *)(inited + 96) = &type metadata for String;
    *(void *)(inited + 72) = v14;
    *(void *)(inited + 80) = v15;
    sub_100149694(inited);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v11 postNotificationName:v12 object:0 userInfo:isa];
  }
}

void sub_1000B92F0()
{
}

uint64_t sub_1000B9320(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000B9368()
{
  sub_1000B678C(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000B9384()
{
  return swift_deallocObject();
}

uint64_t sub_1000B9394()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000B93BC()
{
  return swift_deallocObject();
}

id sub_1000B93F4()
{
  if (*(unsigned char *)(v0 + 16) == 1) {
    return [*(id *)(v0 + 24) play];
  }
  return result;
}

uint64_t sub_1000B9414(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000B9424()
{
  return swift_release();
}

void sub_1000B9430()
{
  sub_10006E070();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1000B94DC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *(void *)a1 = *a2;
    a1 = v16 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    char v9 = *((unsigned char *)a2 + 16);
    sub_1000126FC();
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    uint64_t v10 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v10;
    uint64_t v11 = a2[6];
    uint64_t v12 = *(int *)(a3 + 60);
    v13 = (void *)(a1 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v11;
    swift_retain();
    swift_retain();
    sub_10000570C(&qword_1001A5460);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    }
    else
    {
      void *v13 = *v14;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1000B963C(uint64_t a1, uint64_t a2)
{
  sub_10001274C();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 60);
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for DismissAction();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_1000B970C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_1000126FC();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  uint64_t v9 = a2[4];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = v9;
  uint64_t v10 = a2[6];
  uint64_t v11 = *(int *)(a3 + 60);
  uint64_t v12 = (void *)(a1 + v11);
  v13 = (uint64_t *)((char *)a2 + v11);
  *(void *)(a1 + 40) = a2[5];
  *(void *)(a1 + 48) = v10;
  swift_retain();
  swift_retain();
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = type metadata accessor for DismissAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  else
  {
    *uint64_t v12 = *v13;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1000B9814(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_1000126FC();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  sub_10001274C();
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = a2[4];
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = a2[5];
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = a2[6];
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v9 = *(int *)(a3 + 60);
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    sub_10000ACE0(a1 + v9, &qword_1001A5460);
    sub_10000570C(&qword_1001A5460);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      *uint64_t v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1000B9964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 60);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for DismissAction();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000B9A50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  sub_10001274C();
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  if (a1 != a2)
  {
    uint64_t v8 = *(int *)(a3 + 60);
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (const void *)(a2 + v8);
    sub_10000ACE0(a1 + v8, &qword_1001A5460);
    uint64_t v11 = sub_10000570C(&qword_1001A5460);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for DismissAction();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000B9B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B9B98);
}

uint64_t sub_1000B9B98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000570C(&qword_1001A55E0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 60);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000B9C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B9C60);
}

uint64_t sub_1000B9C60(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 32) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000570C(&qword_1001A55E0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 60);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for ArtistEventView()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1000B9D24()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000B9D68()
{
  return dispatch thunk of OptionSet.init(rawValue:)();
}

uint64_t sub_1000B9DE8(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *v2;
  uint64_t v5 = v2[1];
  uint64_t v6 = *((unsigned __int8 *)v2 + 16);
  uint64_t v7 = type metadata accessor for ArtistEventViewModel();
  uint64_t WitnessTable = swift_getWitnessTable();
  return a2(v4, v5, v6, v7, WitnessTable);
}

uint64_t sub_1000B9E78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v127 = a2;
  uint64_t v126 = type metadata accessor for TaskPriority();
  uint64_t v125 = *(void *)(v126 - 8);
  uint64_t v4 = __chkstk_darwin(v126, v3);
  v124 = (char *)v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = *(void *)(a1 - 8);
  uint64_t v134 = *(void *)(v146 + 64);
  __chkstk_darwin(v4, v6);
  v141 = (char *)v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(ValueMetadata **)(a1 + 24);
  uint64_t v143 = a1;
  type metadata accessor for Optional();
  v131 = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for Binding();
  uint64_t v130 = *((void *)v131 - 1);
  __chkstk_darwin(v131, v9);
  v129 = (char *)v105 - v10;
  uint64_t v142 = type metadata accessor for NavigationPath();
  sub_100004A58(&qword_1001A96B0);
  sub_100004A58(&qword_1001A7B48);
  uint64_t v11 = type metadata accessor for Array();
  unint64_t v144 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(v144 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = sub_100004A58(&qword_1001A96B8);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v168 = v11;
  v169 = (ValueMetadata *)AssociatedTypeWitness;
  uint64_t v170 = v14;
  unint64_t v171 = WitnessTable;
  uint64_t v172 = AssociatedConformanceWitness;
  type metadata accessor for ForEach();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  swift_getWitnessTable();
  type metadata accessor for LazyVGrid();
  swift_getWitnessTable();
  uint64_t v17 = type metadata accessor for ObservableScrollView();
  uint64_t v18 = swift_getWitnessTable();
  uint64_t v168 = v17;
  v169 = (ValueMetadata *)v18;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v20 = sub_100004A58(&qword_1001A96C0);
  uint64_t v168 = v17;
  v169 = (ValueMetadata *)v18;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v22 = sub_10000A780(&qword_1001A96C8, &qword_1001A96C0);
  uint64_t v168 = OpaqueTypeMetadata2;
  v169 = (ValueMetadata *)v20;
  uint64_t v170 = OpaqueTypeConformance2;
  unint64_t v171 = v22;
  v105[3] = swift_getOpaqueTypeMetadata2();
  uint64_t v168 = OpaqueTypeMetadata2;
  v169 = (ValueMetadata *)v20;
  uint64_t v170 = OpaqueTypeConformance2;
  unint64_t v171 = v22;
  v105[2] = swift_getOpaqueTypeConformance2();
  uint64_t v23 = type metadata accessor for NavigationStack();
  uint64_t v128 = *(void *)(v23 - 8);
  __chkstk_darwin(v23, v24);
  v105[0] = (char *)v105 - v25;
  unint64_t v26 = v144;
  uint64_t v27 = type metadata accessor for EventView();
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v29 = swift_getWitnessTable();
  uint64_t v168 = v23;
  v169 = v8;
  uint64_t v170 = v27;
  unint64_t v171 = v28;
  v105[1] = v27;
  uint64_t v30 = v28;
  v107 = (void (*)(char *, char *, uint64_t))v28;
  uint64_t v106 = v12;
  uint64_t v172 = v12;
  uint64_t v173 = v29;
  v105[4] = v29;
  uint64_t v31 = swift_getOpaqueTypeMetadata2();
  uint64_t v108 = v31;
  uint64_t v112 = *(void *)(v31 - 8);
  __chkstk_darwin(v31, v32);
  v137 = (char *)v105 - v33;
  uint64_t v168 = v23;
  v169 = v8;
  uint64_t v170 = v27;
  unint64_t v171 = v30;
  uint64_t v172 = v12;
  uint64_t v173 = v29;
  uint64_t v34 = swift_getOpaqueTypeConformance2();
  uint64_t v136 = v34;
  unint64_t v135 = sub_100026D98();
  uint64_t v168 = v31;
  v169 = &type metadata for PromotionalAssetsContentView;
  uint64_t v170 = v34;
  unint64_t v171 = v135;
  v111 = &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>;
  uint64_t v110 = swift_getOpaqueTypeMetadata2();
  uint64_t v113 = *(void *)(v110 - 8);
  __chkstk_darwin(v110, v110);
  v138 = (char *)v105 - v35;
  uint64_t v114 = type metadata accessor for ModifiedContent();
  uint64_t v116 = *(void *)(v114 - 8);
  __chkstk_darwin(v114, v114);
  v139 = (char *)v105 - v36;
  uint64_t v115 = type metadata accessor for ModifiedContent();
  uint64_t v117 = *(void *)(v115 - 8);
  __chkstk_darwin(v115, v37);
  v140 = (char *)v105 - v38;
  type metadata accessor for _TaskModifier();
  uint64_t v39 = type metadata accessor for ModifiedContent();
  uint64_t v120 = *(void *)(v39 - 8);
  __chkstk_darwin(v39, v40);
  v109 = (char *)v105 - v41;
  type metadata accessor for AccessibilityAttachmentModifier();
  uint64_t v121 = v39;
  uint64_t v123 = type metadata accessor for ModifiedContent();
  uint64_t v122 = *(void *)(v123 - 8);
  uint64_t v43 = __chkstk_darwin(v123, v42);
  v118 = (char *)v105 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43, v45);
  v119 = (char *)v105 - v46;
  uint64_t v47 = v143;
  uint64_t v155 = *(void *)(v143 + 16);
  uint64_t v48 = v155;
  v156 = v8;
  uint64_t v157 = *(void *)(v143 + 32);
  uint64_t v49 = v157;
  unint64_t v158 = v26;
  uint64_t v159 = v145;
  NavigationStack.init<>(root:)();
  sub_1000B9DE8(v47, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  uint64_t v151 = v48;
  v152 = v8;
  uint64_t v50 = v49;
  uint64_t v153 = v49;
  unint64_t v154 = v26;
  swift_getKeyPath();
  uint64_t v168 = v48;
  v169 = v8;
  uint64_t v170 = v49;
  unint64_t v171 = v26;
  unint64_t v51 = v26;
  type metadata accessor for ArtistEventViewModel();
  swift_getWitnessTable();
  v52 = v129;
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  v53 = (void *)swift_allocObject();
  v53[2] = v48;
  v53[3] = v8;
  v53[4] = v50;
  v53[5] = v26;
  swift_checkMetadataState();
  uint64_t v54 = v105[0];
  View.sheet<A, B>(item:onDismiss:content:)();
  swift_release();
  (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t)))(v130 + 8))(v52, v131);
  (*(void (**)(uint64_t, uint64_t))(v128 + 8))(v54, v23);
  uint64_t v55 = v143;
  uint64_t v56 = v145;
  sub_1000B9DE8(v143, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  uint64_t v133 = v48;
  uint64_t v147 = v48;
  v148 = v8;
  v57 = v8;
  uint64_t v142 = v50;
  uint64_t v149 = v50;
  unint64_t v150 = v51;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  LODWORD(v106) = v170;
  uint64_t v58 = v146;
  v59 = *(void (**)(char *, uint64_t, uint64_t))(v146 + 16);
  uint64_t v130 = v146 + 16;
  v131 = v59;
  v60 = v141;
  v59(v141, v56, v55);
  uint64_t v61 = *(unsigned __int8 *)(v58 + 80);
  uint64_t v62 = (v61 + 48) & ~v61;
  uint64_t v128 = v62 + v134;
  v129 = (char *)v62;
  uint64_t v134 = v61 | 7;
  v63 = (char *)swift_allocObject();
  *((void *)v63 + 2) = v48;
  *((void *)v63 + 3) = v57;
  v132 = v57;
  *((void *)v63 + 4) = v50;
  unint64_t v64 = v144;
  *((void *)v63 + 5) = v144;
  v107 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
  uint64_t v146 = v58 + 32;
  v107(&v63[v62], v60, v55);
  uint64_t v65 = v108;
  v66 = v137;
  View.sheet<A>(isPresented:onDismiss:content:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v112 + 8))(v66, v65);
  uint64_t v67 = v145;
  uint64_t v68 = v55;
  uint64_t v69 = v55;
  v70 = v131;
  v131(v60, v145, v69);
  uint64_t v71 = swift_allocObject();
  *(void *)(v71 + 16) = v133;
  *(void *)(v71 + 24) = v57;
  *(void *)(v71 + 32) = v142;
  *(void *)(v71 + 40) = v64;
  v72 = v129;
  v73 = v60;
  v74 = v107;
  v107(&v129[v71], v73, v68);
  uint64_t v168 = v65;
  v169 = &type metadata for PromotionalAssetsContentView;
  uint64_t v170 = v136;
  unint64_t v171 = v135;
  v137 = (char *)swift_getOpaqueTypeConformance2();
  uint64_t v75 = v110;
  v76 = v138;
  View.onAppear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v113 + 8))(v76, v75);
  v77 = v141;
  uint64_t v78 = v67;
  uint64_t v79 = v143;
  v70(v141, v78, v143);
  uint64_t v80 = swift_allocObject();
  uint64_t v81 = v133;
  v82 = v132;
  *(void *)(v80 + 16) = v133;
  *(void *)(v80 + 24) = v82;
  unint64_t v83 = v144;
  *(void *)(v80 + 32) = v142;
  *(void *)(v80 + 40) = v83;
  v74(&v72[v80], v77, v79);
  v166 = v137;
  v167 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v84 = v114;
  uint64_t v85 = swift_getWitnessTable();
  v86 = v139;
  View.onDisappear(perform:)();
  v87 = v109;
  swift_release();
  (*(void (**)(char *, uint64_t))(v116 + 8))(v86, v84);
  v131(v77, v145, v79);
  uint64_t v88 = swift_allocObject();
  v89 = v132;
  *(void *)(v88 + 16) = v81;
  *(void *)(v88 + 24) = v89;
  unint64_t v90 = v144;
  *(void *)(v88 + 32) = v142;
  *(void *)(v88 + 40) = v90;
  v74(&v129[v88], v77, v79);
  uint64_t v164 = v85;
  v165 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v91 = v115;
  uint64_t v92 = swift_getWitnessTable();
  v93 = v124;
  j___sScP13userInitiatedScPvgZ();
  v94 = v93;
  v95 = v140;
  View.task(priority:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v125 + 8))(v94, v126);
  (*(void (**)(char *, uint64_t))(v117 + 8))(v95, v91);
  if (qword_1001A4F10 != -1) {
    swift_once();
  }
  uint64_t v96 = sub_1000C16DC(&qword_1001A5430, (void (*)(uint64_t))&type metadata accessor for _TaskModifier);
  uint64_t v162 = v92;
  uint64_t v163 = v96;
  uint64_t v97 = v121;
  uint64_t v98 = swift_getWitnessTable();
  v99 = v118;
  View.accessibilityIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v120 + 8))(v87, v97);
  uint64_t v100 = sub_1000C16DC((unint64_t *)&qword_1001A68E8, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  uint64_t v160 = v98;
  uint64_t v161 = v100;
  uint64_t v101 = v123;
  swift_getWitnessTable();
  v102 = v119;
  sub_1001221F0(v99, v101);
  v103 = *(void (**)(char *, uint64_t))(v122 + 8);
  v103(v99, v101);
  sub_1001221F0(v102, v101);
  return ((uint64_t (*)(char *, uint64_t))v103)(v102, v101);
}

uint64_t sub_1000BB214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v80 = a4;
  uint64_t v85 = a2;
  uint64_t v86 = a1;
  uint64_t v84 = a6;
  uint64_t v83 = type metadata accessor for NavigationBarItem.TitleDisplayMode();
  uint64_t v82 = *(void *)(v83 - 8);
  __chkstk_darwin(v83, v10);
  uint64_t v81 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = a2;
  uint64_t v98 = a3;
  uint64_t v99 = a4;
  uint64_t v100 = a5;
  uint64_t v75 = a5;
  uint64_t v79 = type metadata accessor for ArtistEventView();
  uint64_t v77 = *(void *)(v79 - 8);
  uint64_t v78 = *(void *)(v77 + 64);
  __chkstk_darwin(v79, v12);
  v76 = (char *)&v57 - v13;
  sub_100004A58(&qword_1001A96B0);
  sub_100004A58(&qword_1001A7B48);
  uint64_t v14 = type metadata accessor for Array();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = sub_100004A58(&qword_1001A96B8);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v97 = v14;
  uint64_t v98 = AssociatedTypeWitness;
  uint64_t v99 = v16;
  uint64_t v100 = WitnessTable;
  uint64_t v101 = AssociatedConformanceWitness;
  type metadata accessor for ForEach();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  swift_getWitnessTable();
  uint64_t v72 = type metadata accessor for LazyVGrid();
  uint64_t v71 = swift_getWitnessTable();
  uint64_t v19 = type metadata accessor for ObservableScrollView();
  uint64_t v74 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v20);
  uint64_t v70 = (uint64_t)&v57 - v21;
  uint64_t v22 = swift_getWitnessTable();
  uint64_t v97 = v19;
  uint64_t v98 = v22;
  uint64_t v23 = v22;
  uint64_t v61 = v22;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v66 = OpaqueTypeMetadata2;
  uint64_t v73 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2, v25);
  uint64_t v62 = (char *)&v57 - v26;
  uint64_t v27 = sub_100004A58(&qword_1001A96C0);
  uint64_t v65 = v27;
  uint64_t v97 = v19;
  uint64_t v98 = v23;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v64 = OpaqueTypeConformance2;
  uint64_t v63 = sub_10000A780(&qword_1001A96C8, &qword_1001A96C0);
  uint64_t v97 = OpaqueTypeMetadata2;
  uint64_t v98 = v27;
  uint64_t v99 = OpaqueTypeConformance2;
  uint64_t v100 = v63;
  uint64_t v67 = &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>;
  uint64_t v68 = swift_getOpaqueTypeMetadata2();
  uint64_t v69 = *(void *)(v68 - 8);
  uint64_t v30 = __chkstk_darwin(v68, v29);
  v59 = (char *)&v57 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30, v32);
  v60 = (char *)&v57 - v33;
  uint64_t v34 = v85;
  uint64_t v92 = v85;
  uint64_t v93 = a3;
  uint64_t v58 = a3;
  uint64_t v35 = v80;
  uint64_t v36 = v75;
  uint64_t v94 = v80;
  uint64_t v95 = v75;
  uint64_t v96 = v86;
  uint64_t v37 = v77;
  uint64_t v38 = v76;
  uint64_t v39 = v79;
  (*(void (**)(char *))(v77 + 16))(v76);
  unint64_t v40 = (*(unsigned __int8 *)(v37 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
  uint64_t v41 = (char *)swift_allocObject();
  *((void *)v41 + 2) = v34;
  *((void *)v41 + 3) = a3;
  *((void *)v41 + 4) = v35;
  *((void *)v41 + 5) = v36;
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(&v41[v40], v38, v39);
  char v42 = static Axis.Set.vertical.getter();
  uint64_t v43 = v70;
  sub_1000C3FB0(v42, 0, (void (*)(uint64_t))sub_1000C0EC0, (uint64_t)sub_1000C0EDC, (uint64_t)v41, v70);
  uint64_t v44 = v82;
  uint64_t v45 = v81;
  uint64_t v46 = v83;
  (*(void (**)(char *, void, uint64_t))(v82 + 104))(v81, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v83);
  uint64_t v47 = v62;
  View.navigationBarTitleDisplayMode(_:)();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v46);
  (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v43, v19);
  uint64_t v87 = v85;
  uint64_t v88 = v58;
  uint64_t v89 = v35;
  uint64_t v90 = v36;
  uint64_t v91 = v86;
  uint64_t v48 = v59;
  uint64_t v49 = v66;
  uint64_t v50 = v65;
  uint64_t v51 = v64;
  uint64_t v52 = v63;
  View.toolbar<A>(content:)();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v47, v49);
  uint64_t v97 = v49;
  uint64_t v98 = v50;
  uint64_t v99 = v51;
  uint64_t v100 = v52;
  swift_getOpaqueTypeConformance2();
  v53 = v60;
  uint64_t v54 = v68;
  sub_1001221F0(v48, v68);
  uint64_t v55 = *(void (**)(char *, uint64_t))(v69 + 8);
  v55(v48, v54);
  sub_1001221F0(v53, v54);
  return ((uint64_t (*)(char *, uint64_t))v55)(v53, v54);
}

uint64_t sub_1000BBAF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v32 = a5;
  uint64_t v37 = a1;
  uint64_t v38 = a4;
  uint64_t v36 = a2;
  uint64_t v39 = a6;
  uint64_t v7 = type metadata accessor for PinnedScrollableViews();
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v35 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for GridItem.Size();
  uint64_t v33 = *(void *)(v10 - 8);
  uint64_t v34 = v10;
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (_OWORD *)((char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100004A58(&qword_1001A96B0);
  sub_100004A58(&qword_1001A7B48);
  uint64_t v14 = type metadata accessor for Array();
  uint64_t v31 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = sub_100004A58(&qword_1001A96B8);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v45 = v14;
  uint64_t v46 = AssociatedTypeWitness;
  uint64_t v47 = v16;
  uint64_t v48 = WitnessTable;
  uint64_t v49 = AssociatedConformanceWitness;
  type metadata accessor for ForEach();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  swift_getWitnessTable();
  uint64_t v19 = type metadata accessor for LazyVGrid();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v24 = (char *)&v30 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  uint64_t v27 = (char *)&v30 - v26;
  sub_10000570C(&qword_1001A7CC8);
  type metadata accessor for GridItem();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_100153180;
  _OWORD *v13 = xmmword_1001538D0;
  (*(void (**)(_OWORD *, void, uint64_t))(v33 + 104))(v13, enum case for GridItem.Size.flexible(_:), v34);
  GridItem.init(_:spacing:alignment:)();
  uint64_t v40 = v36;
  uint64_t v41 = v31;
  uint64_t v42 = v38;
  uint64_t v43 = v32;
  uint64_t v44 = v37;
  static HorizontalAlignment.center.getter();
  sub_1000B9D68();
  LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)();
  swift_getWitnessTable();
  sub_1001221F0(v24, v19);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v20 + 8);
  v28(v24, v19);
  sub_1001221F0(v27, v19);
  return ((uint64_t (*)(char *, uint64_t))v28)(v27, v19);
}

uint64_t sub_1000BBFF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v21 = a4;
  uint64_t v19 = a2;
  uint64_t v22 = a6;
  sub_100004A58(&qword_1001A96B0);
  sub_100004A58(&qword_1001A7B48);
  uint64_t v28 = type metadata accessor for Array();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v30 = sub_100004A58(&qword_1001A96B8);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for ForEach();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for VStack();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v19 - v15;
  uint64_t v23 = v19;
  uint64_t v24 = a3;
  uint64_t v25 = v21;
  uint64_t v26 = a5;
  uint64_t v27 = v20;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  swift_getWitnessTable();
  sub_1001221F0(v13, v8);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v9 + 8);
  v17(v13, v8);
  sub_1001221F0(v16, v8);
  return ((uint64_t (*)(char *, uint64_t))v17)(v16, v8);
}

uint64_t sub_1000BC2FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v48 = a5;
  uint64_t v53 = a4;
  uint64_t v51 = a2;
  uint64_t v57 = a6;
  sub_100004A58(&qword_1001A7B48);
  uint64_t v66 = type metadata accessor for Array();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v68 = sub_100004A58(&qword_1001A96B8);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v46 = type metadata accessor for ForEach();
  uint64_t v47 = type metadata accessor for _ConditionalContent();
  uint64_t v8 = type metadata accessor for Group();
  uint64_t v52 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v45 = (char *)&v44 - v10;
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v55 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  uint64_t v44 = (char *)&v44 - v13;
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v56 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14, v15);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  uint64_t v50 = (char *)&v44 - v20;
  uint64_t v54 = sub_10000570C(&qword_1001A96B0);
  uint64_t v22 = __chkstk_darwin(v54, v21);
  uint64_t v49 = (uint64_t)&v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v24);
  uint64_t v26 = (char *)&v44 - v25;
  *(void *)uint64_t v26 = static HorizontalAlignment.center.getter();
  *((void *)v26 + 1) = 0;
  v26[16] = 0;
  uint64_t v27 = sub_10000570C(&qword_1001A9728);
  uint64_t v28 = v51;
  uint64_t v29 = v53;
  uint64_t v30 = v48;
  sub_1000BC9B4(a1, v51, a3, v53, v48, (uint64_t)&v26[*(int *)(v27 + 44)]);
  uint64_t v58 = v28;
  uint64_t v59 = a3;
  uint64_t v60 = v29;
  uint64_t v61 = v30;
  uint64_t v62 = a1;
  uint64_t v31 = sub_1000C117C(&qword_1001A7B78, &qword_1001A7B48, (void (*)(void))sub_100075AA8);
  v65[9] = sub_1000C11FC();
  uint64_t v32 = swift_getWitnessTable();
  v65[7] = v31;
  v65[8] = v32;
  uint64_t v33 = swift_getWitnessTable();
  uint64_t v34 = v45;
  Group<A>.init(content:)();
  static Edge.Set.leading.getter();
  v65[6] = v33;
  uint64_t v35 = swift_getWitnessTable();
  uint64_t v36 = v44;
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v34, v8);
  static Edge.Set.trailing.getter();
  v65[4] = v35;
  v65[5] = &protocol witness table for _PaddingLayout;
  uint64_t v37 = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v36, v11);
  v65[2] = v37;
  v65[3] = &protocol witness table for _PaddingLayout;
  uint64_t v38 = swift_getWitnessTable();
  uint64_t v39 = v50;
  sub_1001221F0(v18, v14);
  uint64_t v40 = v56;
  uint64_t v41 = *(void (**)(char *, uint64_t))(v56 + 8);
  v41(v18, v14);
  uint64_t v42 = v49;
  sub_10000A428((uint64_t)v26, v49, &qword_1001A96B0);
  uint64_t v66 = v42;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v18, v39, v14);
  uint64_t AssociatedTypeWitness = (uint64_t)v18;
  v65[0] = v54;
  v65[1] = v14;
  uint64_t v63 = sub_10000A780(&qword_1001A9738, &qword_1001A96B0);
  uint64_t v64 = v38;
  sub_1001231A4((uint64_t)&v66, 2uLL, (uint64_t)v65);
  v41(v39, v14);
  sub_10000ACE0((uint64_t)v26, &qword_1001A96B0);
  v41(v18, v14);
  return sub_10000ACE0(v42, &qword_1001A96B0);
}

uint64_t sub_1000BC9B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v139 = a6;
  uint64_t v134 = a2;
  uint64_t v135 = a3;
  uint64_t v164 = a2;
  uint64_t v165 = a3;
  uint64_t v136 = a4;
  uint64_t v137 = a5;
  uint64_t v166 = a4;
  *(void *)&long long v167 = a5;
  uint64_t v7 = type metadata accessor for ArtistEventView();
  uint64_t v133 = *(void *)(v7 - 8);
  uint64_t v131 = *(void *)(v133 + 64);
  __chkstk_darwin(v7, v8);
  v132 = (char *)&v119 - v9;
  uint64_t v10 = sub_10000570C(&qword_1001A9740);
  uint64_t v129 = *(void *)(v10 - 8);
  uint64_t v130 = v10;
  __chkstk_darwin(v10, v11);
  uint64_t v121 = (char *)&v119 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000570C(&qword_1001A53D8);
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v127 = (uint64_t)&v119 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = type metadata accessor for ArtistPromotionalAssets();
  uint64_t v126 = *(void *)(v128 - 8);
  uint64_t v17 = __chkstk_darwin(v128, v16);
  uint64_t v119 = v18;
  uint64_t v120 = (char *)&v119 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  v140 = (char *)&v119 - v20;
  uint64_t v21 = sub_10000570C(&qword_1001A9748);
  uint64_t v23 = __chkstk_darwin(v21 - 8, v22);
  uint64_t v138 = (uint64_t)&v119 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v25);
  v141 = (char *)&v119 - v26;
  uint64_t v27 = type metadata accessor for ArtistEventListHeader(0);
  uint64_t v28 = (int *)(v27 - 8);
  __chkstk_darwin(v27, v29);
  uint64_t v31 = (uint64_t *)((char *)&v119 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v125 = sub_10000570C(&qword_1001A9750) - 8;
  uint64_t v33 = __chkstk_darwin(v125, v32);
  uint64_t v144 = (uint64_t)&v119 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33, v35);
  uint64_t v143 = (uint64_t)&v119 - v36;
  sub_1000B9DE8(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v37 = sub_1000513FC();
  uint64_t v122 = v38;
  uint64_t v123 = v37;
  swift_release();
  uint64_t v124 = v7;
  sub_1000B9DE8(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_100051474((uint64_t)v31 + v28[7]);
  swift_release();
  uint64_t v39 = sub_1000B9DE8(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v40 = v39 + *(void *)(*(void *)v39 + 184);
  uint64_t v41 = *(void *)v40;
  uint64_t v42 = *(void *)(v40 + 8);
  char v43 = *(unsigned char *)(v40 + 16);
  uint64_t v44 = *(void *)(v40 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v45 = v122;
  *uint64_t v31 = v123;
  v31[1] = v45;
  uint64_t v46 = (char *)v31 + v28[8];
  *(void *)uint64_t v46 = v41;
  *((void *)v46 + 1) = v42;
  uint64_t v47 = a1;
  uint64_t v48 = v144;
  v46[16] = v43;
  *((void *)v46 + 3) = v44;
  *((unsigned char *)v31 + v28[9]) = 0;
  uint64_t v49 = (uint64_t *)((char *)v31 + v28[10]);
  *uint64_t v49 = swift_getKeyPath();
  sub_10000570C(&qword_1001A5470);
  swift_storeEnumTagMultiPayload();
  LOBYTE(v49) = static Edge.Set.horizontal.getter();
  sub_1000C1330((uint64_t)v31, v48, type metadata accessor for ArtistEventListHeader);
  uint64_t v50 = v124;
  uint64_t v51 = v48 + *(int *)(v125 + 44);
  *(unsigned char *)uint64_t v51 = (_BYTE)v49;
  *(_OWORD *)(v51 + 8) = 0u;
  *(_OWORD *)(v51 + 24) = 0u;
  *(unsigned char *)(v51 + 40) = 1;
  sub_1000C1398((uint64_t)v31, type metadata accessor for ArtistEventListHeader);
  sub_10000A3C4(v48, v143, &qword_1001A9750);
  uint64_t v52 = sub_1000B9DE8(v50, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v53 = *(void *)(v52 + *(void *)(*(void *)v52 + 168));
  swift_retain();
  swift_release();
  swift_getKeyPath();
  uint64_t v164 = v53;
  sub_1000C16DC(&qword_1001A53E0, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v54 = v53 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess();
  uint64_t v55 = v54;
  uint64_t v56 = v127;
  sub_10000A428(v55, v127, &qword_1001A53D8);
  swift_release();
  uint64_t v57 = v126;
  uint64_t v58 = v128;
  int v59 = (*(uint64_t (**)(uint64_t, uint64_t))(v126 + 48))(v56, 1);
  uint64_t v142 = v47;
  if (v59 == 1)
  {
    sub_10000ACE0(v56, &qword_1001A53D8);
    uint64_t v60 = 1;
    uint64_t v61 = v50;
    uint64_t v62 = (uint64_t)v141;
    uint64_t v64 = v129;
    uint64_t v63 = v130;
  }
  else
  {
    uint64_t v65 = *(void (**)(char *, uint64_t, uint64_t))(v57 + 32);
    uint64_t v123 = v57 + 32;
    uint64_t v125 = (uint64_t)v65;
    v65(v140, v56, v58);
    uint64_t v66 = sub_1000B9DE8(v50, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    uint64_t v67 = *(void *)(v66 + *(void *)(*(void *)v66 + 168));
    swift_retain();
    swift_release();
    type metadata accessor for PromotionalAssetsEntryViewModel();
    uint64_t v68 = swift_allocObject();
    ObservationRegistrar.init()();
    *(void *)(v68 + 16) = v67;
    v150[0] = v68;
    State.init(wrappedValue:)();
    uint64_t v69 = v164;
    uint64_t v61 = v50;
    uint64_t v70 = v165;
    char v71 = static Edge.Set.horizontal.getter();
    LOBYTE(v67) = static Edge.Set.top.getter();
    EdgeInsets.init(_all:)();
    uint64_t v164 = v69;
    uint64_t v165 = v70;
    LOBYTE(v166) = v71;
    long long v167 = 0u;
    long long v168 = 0u;
    char v169 = 1;
    char v170 = v67;
    uint64_t v171 = v72;
    uint64_t v172 = v73;
    uint64_t v173 = v74;
    uint64_t v174 = v75;
    char v175 = 0;
    v76 = v132;
    uint64_t v77 = v133;
    (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v132, v142, v61);
    uint64_t v78 = v120;
    (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v120, v140, v58);
    unint64_t v79 = (*(unsigned __int8 *)(v77 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
    unint64_t v80 = (v131 + *(unsigned __int8 *)(v57 + 80) + v79) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
    uint64_t v81 = (char *)swift_allocObject();
    uint64_t v82 = v135;
    *((void *)v81 + 2) = v134;
    *((void *)v81 + 3) = v82;
    uint64_t v83 = v137;
    *((void *)v81 + 4) = v136;
    *((void *)v81 + 5) = v83;
    (*(void (**)(char *, char *, uint64_t))(v77 + 32))(&v81[v79], v76, v61);
    uint64_t v84 = v58;
    ((void (*)(char *, char *, uint64_t))v125)(&v81[v80], v78, v58);
    uint64_t v47 = v142;
    sub_10000570C(&qword_1001A9768);
    sub_1000C117C(&qword_1001A9770, &qword_1001A9768, (void (*)(void))sub_1000C1D44);
    uint64_t v85 = v121;
    View.onTapGesture(count:perform:)();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v140, v84);
    uint64_t v87 = v129;
    uint64_t v86 = v130;
    uint64_t v62 = (uint64_t)v141;
    (*(void (**)(char *, char *, uint64_t))(v129 + 32))(v141, v85, v130);
    uint64_t v60 = 0;
    uint64_t v63 = v86;
    uint64_t v64 = v87;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 56))(v62, v60, 1, v63);
  sub_1000B9DE8(v61, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  BOOL v88 = sub_10005172C();
  swift_release();
  if (!v88)
  {
    sub_1000C1724((uint64_t)v150);
    sub_10000A3C4((uint64_t)v150, (uint64_t)&v164, &qword_1001A9758);
LABEL_13:
    uint64_t v113 = v143;
    uint64_t v112 = v144;
    sub_10000A428(v143, v144, &qword_1001A9750);
    uint64_t v114 = v138;
    sub_10000A428(v62, v138, &qword_1001A9748);
    sub_10000A3C4((uint64_t)&v164, (uint64_t)v148, &qword_1001A9758);
    uint64_t v115 = v139;
    sub_10000A428(v112, v139, &qword_1001A9750);
    uint64_t v116 = sub_10000570C(&qword_1001A9760);
    sub_10000A428(v114, v115 + *(int *)(v116 + 48), &qword_1001A9748);
    uint64_t v117 = v115 + *(int *)(v116 + 64);
    sub_10000A3C4((uint64_t)v148, (uint64_t)v149, &qword_1001A9758);
    sub_10000A3C4((uint64_t)v149, v117, &qword_1001A9758);
    sub_1000C17AC((uint64_t)v149, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1000C1744);
    sub_10000ACE0(v62, &qword_1001A9748);
    sub_10000ACE0(v113, &qword_1001A9750);
    sub_10000A3C4((uint64_t)v148, (uint64_t)v150, &qword_1001A9758);
    sub_1000C17AC((uint64_t)v150, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1000C1818);
    sub_10000ACE0(v114, &qword_1001A9748);
    return sub_10000ACE0(v112, &qword_1001A9750);
  }
  sub_1000B9DE8(v61, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  if (*(void *)(v47 + 40))
  {
    swift_retain();
    char v89 = sub_1000D1500();
    uint64_t v91 = v90;
    swift_release();
    uint64_t v92 = v137;
    if (v91)
    {
      swift_bridgeObjectRelease();
      if (v89) {
        char v93 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      else {
        char v93 = 1;
      }
    }
    else
    {
      char v93 = 1;
    }
    swift_bridgeObjectRelease();
    uint64_t v94 = sub_1000517CC(v93 & 1);
    swift_release();
    uint64_t v95 = v142;
    sub_1000B9DE8(v61, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    uint64_t v96 = sub_100051030();
    uint64_t v98 = v97;
    swift_release();
    uint64_t v100 = v132;
    uint64_t v99 = v133;
    (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v132, v95, v61);
    uint64_t v101 = v61;
    unint64_t v102 = (*(unsigned __int8 *)(v99 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80);
    v103 = (char *)swift_allocObject();
    uint64_t v104 = v135;
    *((void *)v103 + 2) = v134;
    *((void *)v103 + 3) = v104;
    *((void *)v103 + 4) = v136;
    *((void *)v103 + 5) = v92;
    (*(void (**)(char *, char *, uint64_t))(v99 + 32))(&v103[v102], v100, v101);
    type metadata accessor for RemoteViewConfiguration();
    sub_1000C16DC((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t v105 = EnvironmentObject.init()();
    uint64_t v107 = v106;
    LOBYTE(v101) = static Edge.Set.bottom.getter();
    LOBYTE(v99) = static Edge.Set.top.getter();
    EdgeInsets.init(_all:)();
    char v147 = 1;
    char v145 = 0;
    v150[0] = v94;
    v150[1] = v96;
    v150[2] = v98;
    v150[3] = sub_1000C19B8;
    v150[4] = v103;
    v150[5] = v105;
    v150[6] = v107;
    char v151 = v101;
    *(_DWORD *)v152 = *(_DWORD *)v149;
    *(_DWORD *)&v152[3] = *(_DWORD *)&v149[3];
    long long v153 = 0u;
    long long v154 = 0u;
    char v155 = 1;
    *(_DWORD *)v156 = *(_DWORD *)v148;
    *(_DWORD *)&v156[3] = *(_DWORD *)&v148[3];
    char v157 = v99;
    *(_DWORD *)unint64_t v158 = *(_DWORD *)v146;
    *(_DWORD *)&v158[3] = *(_DWORD *)&v146[3];
    uint64_t v159 = v108;
    uint64_t v160 = v109;
    uint64_t v161 = v110;
    uint64_t v162 = v111;
    char v163 = 0;
    nullsub_1(v150);
    sub_10000A3C4((uint64_t)v150, (uint64_t)&v164, &qword_1001A9758);
    uint64_t v62 = (uint64_t)v141;
    goto LABEL_13;
  }
  type metadata accessor for RemoteViewConfiguration();
  sub_1000C16DC((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  uint64_t result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

uint64_t sub_1000BD770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = sub_10000570C(&qword_1001A5490);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[0] = a3;
  v23[1] = a4;
  v23[2] = a5;
  v23[3] = a6;
  uint64_t v16 = type metadata accessor for ArtistEventView();
  sub_1000B9DE8(v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_1000517C4();
  swift_release();
  ArtistPromotionalAssets.eventWithPromotionalAssets.getter();
  uint64_t v17 = sub_10000A780((unint64_t *)&qword_1001A54A0, &qword_1001A5490);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 152))(v11, v17);
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  uint64_t v21 = *(void *)(a1 + 40);
  if (v21)
  {
    swift_retain();
    sub_100116F94(v18, v20, 2, 3, 9, 0, 3u, v21);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1000C16DC((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000BD99C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v31 = a6;
  uint64_t v32 = a7;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  uint64_t v35 = a6;
  uint64_t v36 = a7;
  uint64_t v10 = type metadata accessor for ArtistEventView();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v29 - v14;
  uint64_t v16 = sub_10000570C(&qword_1001A95D0);
  __chkstk_darwin(v16 - 8, v17);
  uint64_t v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v15, a3, v10);
  type metadata accessor for MainActor();
  sub_100008068(a1, a2);
  uint64_t v21 = static MainActor.shared.getter();
  unint64_t v22 = (*(unsigned __int8 *)(v11 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v23 = (v12 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = (char *)swift_allocObject();
  *((void *)v24 + 2) = v21;
  *((void *)v24 + 3) = &protocol witness table for MainActor;
  uint64_t v25 = v30;
  *((void *)v24 + 4) = v29;
  *((void *)v24 + 5) = v25;
  uint64_t v26 = v32;
  *((void *)v24 + 6) = v31;
  *((void *)v24 + 7) = v26;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v24[v22], v15, v10);
  uint64_t v27 = (uint64_t *)&v24[v23];
  *uint64_t v27 = a1;
  v27[1] = a2;
  sub_10013AF58((uint64_t)v19, (uint64_t)&unk_1001A9798, (uint64_t)v24);
  return swift_release();
}

uint64_t sub_1000BDBDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[11] = v13;
  v8[12] = v14;
  v8[9] = a7;
  v8[10] = a8;
  v8[7] = a5;
  v8[8] = a6;
  v8[6] = a4;
  type metadata accessor for MainActor();
  v8[13] = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  v8[14] = v10;
  v8[15] = v9;
  return _swift_task_switch(sub_1000BDC88, v10, v9);
}

uint64_t sub_1000BDC88()
{
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 72);
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v0 + 88);
  uint64_t v1 = type metadata accessor for ArtistEventView();
  *(void *)(v0 + 128) = v1;
  *(void *)(v0 + 136) = sub_1000B9DE8(v1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000BDD60;
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  return sub_100051A00(v4, v3);
}

uint64_t sub_1000BDD60()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 120);
  uint64_t v3 = *(void *)(v1 + 112);
  return _swift_task_switch(sub_1000BDEA4, v3, v2);
}

uint64_t sub_1000BDEA4()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[8];
  swift_release();
  sub_1000B9DE8(v1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  if (v2)
  {
    if (v2 == 1)
    {
      uint64_t v3 = 0xEF6E6F697461636FLL;
      uint64_t v4 = 0x4C746E6572727563;
    }
    else
    {
      uint64_t v4 = v0[7];
      uint64_t v3 = v0[8];
    }
  }
  else
  {
    uint64_t v3 = 0xE300000000000000;
    uint64_t v4 = 7105633;
  }
  uint64_t v5 = v0[7];
  uint64_t v6 = *(void *)(v0[6] + 40);
  unint64_t v7 = v0[8];
  if (v6)
  {
    sub_100008068(v5, v7);
    swift_retain();
    sub_100052988(7, v4, v3, 2u, v6);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  else
  {
    sub_100008068(v5, v7);
    type metadata accessor for RemoteViewConfiguration();
    sub_1000C16DC((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    return EnvironmentObject.error()();
  }
}

uint64_t sub_1000BE044@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v62 = a6;
  uint64_t v54 = a2;
  uint64_t v64 = a2;
  uint64_t v65 = a3;
  uint64_t v56 = a4;
  uint64_t v66 = a4;
  uint64_t v67 = a5;
  uint64_t v9 = type metadata accessor for ArtistEventView();
  uint64_t v53 = *(void *)(v9 - 8);
  v50[2] = *(void *)(v53 + 64);
  __chkstk_darwin(v9, v10);
  uint64_t v51 = (char *)v50 - v11;
  uint64_t v12 = type metadata accessor for Array();
  uint64_t v57 = a5;
  uint64_t v13 = *(void *)(a5 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = sub_100004A58(&qword_1001A96B8);
  uint64_t WitnessTable = swift_getWitnessTable();
  v50[5] = v13;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v64 = v12;
  uint64_t v65 = AssociatedTypeWitness;
  v50[4] = AssociatedTypeWitness;
  v50[3] = v15;
  uint64_t v66 = v15;
  uint64_t v67 = WitnessTable;
  v50[1] = WitnessTable;
  uint64_t v68 = AssociatedConformanceWitness;
  uint64_t v18 = type metadata accessor for ForEach();
  uint64_t v55 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18, v19);
  unint64_t v22 = (char *)v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v23);
  uint64_t v52 = (char *)v50 - v24;
  uint64_t v58 = sub_100004A58(&qword_1001A7B48);
  uint64_t v25 = type metadata accessor for _ConditionalContent();
  uint64_t v60 = *(void *)(v25 - 8);
  uint64_t v61 = v25;
  __chkstk_darwin(v25, v26);
  int v59 = (char *)v50 - v27;
  sub_1000B9DE8(v9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v28 = sub_100050E4C();
  swift_release();
  uint64_t v64 = v28;
  swift_getWitnessTable();
  LOBYTE(WitnessTable) = Collection.isEmpty.getter();
  swift_bridgeObjectRelease();
  uint64_t v29 = sub_1000B9DE8(v9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  if (WitnessTable)
  {
    uint64_t v30 = v29 + *(void *)(*(void *)v29 + 200);
    uint64_t v32 = *(void *)v30;
    uint64_t v31 = *(void *)(v30 + 8);
    char v33 = *(unsigned char *)(v30 + 16);
    uint64_t v34 = *(void *)(v30 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    char v35 = static Edge.Set.top.getter();
    uint64_t v64 = v32;
    uint64_t v65 = v31;
    LOBYTE(v66) = v33;
    uint64_t v67 = v34;
    LOBYTE(v68) = v35;
    long long v69 = 0u;
    long long v70 = 0u;
    char v71 = 1;
    sub_1000C117C(&qword_1001A7B78, &qword_1001A7B48, (void (*)(void))sub_100075AA8);
    unint64_t v63 = sub_1000C11FC();
    swift_getWitnessTable();
    uint64_t v36 = v59;
    sub_10012222C((uint64_t)&v64, v58);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v37 = sub_100050E4C();
    swift_release();
    uint64_t v64 = v37;
    uint64_t v38 = v53;
    uint64_t v39 = v51;
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v51, a1, v9);
    unint64_t v40 = (*(unsigned __int8 *)(v38 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
    uint64_t v41 = (char *)swift_allocObject();
    *((void *)v41 + 2) = v54;
    *((void *)v41 + 3) = a3;
    uint64_t v42 = v57;
    *((void *)v41 + 4) = v56;
    *((void *)v41 + 5) = v42;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(&v41[v40], v39, v9);
    unint64_t v43 = sub_1000C11FC();
    ForEach<>.init(_:content:)();
    unint64_t v75 = v43;
    swift_getWitnessTable();
    uint64_t v44 = v52;
    sub_1001221F0(v22, v18);
    uint64_t v45 = *(void (**)(char *, uint64_t))(v55 + 8);
    v45(v22, v18);
    sub_1001221F0(v44, v18);
    sub_1000C117C(&qword_1001A7B78, &qword_1001A7B48, (void (*)(void))sub_100075AA8);
    uint64_t v36 = v59;
    sub_100122324((uint64_t)v22, v58, v18);
    v45(v22, v18);
    v45(v44, v18);
  }
  uint64_t v46 = sub_1000C117C(&qword_1001A7B78, &qword_1001A7B48, (void (*)(void))sub_100075AA8);
  unint64_t v74 = sub_1000C11FC();
  uint64_t v47 = swift_getWitnessTable();
  uint64_t v72 = v46;
  uint64_t v73 = v47;
  uint64_t v48 = v61;
  swift_getWitnessTable();
  sub_1001221F0(v36, v48);
  return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v36, v48);
}

uint64_t sub_1000BE72C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v116 = a2;
  uint64_t v129 = a5;
  uint64_t v124 = *(void *)(a3 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v120 = v9;
  uint64_t v121 = v8;
  uint64_t v122 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = v10;
  uint64_t v131 = v8;
  uint64_t v132 = v11;
  uint64_t v133 = v10;
  uint64_t v134 = v12;
  uint64_t v13 = type metadata accessor for ArtistEventView();
  uint64_t v118 = *(void *)(v13 - 8);
  uint64_t v119 = v13;
  uint64_t v114 = *(void *)(v118 + 64);
  __chkstk_darwin(v13, v14);
  uint64_t v115 = (char *)&v94 - v15;
  uint64_t v110 = type metadata accessor for Date();
  uint64_t v109 = *(void *)(v110 - 8);
  __chkstk_darwin(v110, v16);
  uint64_t v107 = (char *)&v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = type metadata accessor for DateInterval();
  uint64_t v105 = *(void *)(v106 - 8);
  __chkstk_darwin(v106, v18);
  uint64_t v103 = (uint64_t)&v94 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v98 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v20);
  uint64_t v97 = (char *)&v94 - v21;
  uint64_t v104 = type metadata accessor for EventRowViewModel();
  uint64_t v23 = __chkstk_darwin(v104, v22);
  uint64_t v102 = (uint64_t)&v94 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v25);
  uint64_t v101 = (uint64_t *)((char *)&v94 - v26);
  uint64_t v27 = type metadata accessor for EventRow(0);
  __chkstk_darwin(v27 - 8, v28);
  uint64_t v100 = (char *)&v94 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = sub_10000570C(&qword_1001A7B90);
  __chkstk_darwin(v126, v30);
  uint64_t v125 = (uint64_t)&v94 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = sub_10000570C(qword_1001A7CD0);
  uint64_t v112 = *(void *)(v113 - 8);
  __chkstk_darwin(v113, v32);
  uint64_t v111 = (char *)&v94 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_10000570C(&qword_1001A7B50);
  uint64_t v127 = *(void *)(v34 - 8);
  uint64_t v128 = v34;
  __chkstk_darwin(v34, v35);
  uint64_t v108 = (char *)&v94 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = swift_getAssociatedTypeWitness();
  uint64_t v38 = type metadata accessor for Optional();
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v41 = __chkstk_darwin(v38, v40);
  unint64_t v43 = (char *)&v94 - v42;
  uint64_t v44 = *(void *)(v37 - 8);
  __chkstk_darwin(v41, v45);
  uint64_t v47 = (char *)&v94 - v46;
  uint64_t v48 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 216);
  uint64_t v117 = a1;
  uint64_t v130 = a4;
  uint64_t v131 = v48(a3, a4);
  type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t v49 = v44;
  Collection.first.getter();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v43, 1, v37) == 1)
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v43, v38);
LABEL_6:
    uint64_t v92 = 1;
    uint64_t v89 = v128;
    uint64_t v91 = v129;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v127 + 56))(v91, v92, 1, v89);
  }
  uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
  uint64_t v51 = v47;
  v50(v47, v43, v37);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v53 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v37, AssociatedConformanceWitness);
  if (!v53)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v47, v37);
    goto LABEL_6;
  }
  uint64_t v54 = v53;
  id v55 = [v53 city];
  uint64_t v96 = v49;
  id v56 = v55;

  uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v94 = v57;

  uint64_t v58 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(v37, AssociatedConformanceWitness);
  uint64_t v60 = v59;
  uint64_t v61 = v97;
  uint64_t v62 = v117;
  (*(void (**)(uint64_t, uint64_t))(v130 + 200))(a3, v130);
  uint64_t v63 = AssociatedTypeWitness;
  uint64_t v64 = swift_getAssociatedConformanceWitness();
  uint64_t v65 = v103;
  sub_100013DE4(v63, v64, v103);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v61, v63);
  uint64_t AssociatedTypeWitness = (uint64_t)v51;
  uint64_t v66 = v107;
  DateInterval.start.getter();
  (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v65, v106);
  uint64_t v67 = (int *)v104;
  uint64_t v68 = v101;
  long long v69 = (char *)v101 + *(int *)(v104 + 28);
  *((void *)v69 + 4) = 0;
  *(_OWORD *)long long v69 = 0u;
  *((_OWORD *)v69 + 1) = 0u;
  uint64_t v70 = v94;
  *uint64_t v68 = v95;
  v68[1] = v70;
  v68[2] = v58;
  v68[3] = v60;
  (*(void (**)(char *, char *, uint64_t))(v109 + 32))((char *)v68 + v67[6], v66, v110);
  *((unsigned char *)v68 + v67[8]) = 0;
  *(uint64_t *)((char *)v68 + v67[9]) = 0;
  sub_1000C1330((uint64_t)v68, v102, (uint64_t (*)(void))type metadata accessor for EventRowViewModel);
  uint64_t v71 = (uint64_t)v100;
  State.init(wrappedValue:)();
  sub_1000C1398((uint64_t)v68, (uint64_t (*)(void))type metadata accessor for EventRowViewModel);
  uint64_t v72 = v125;
  sub_1000C1330(v71, v125, type metadata accessor for EventRow);
  *(unsigned char *)(v72 + *(int *)(v126 + 36)) = 0;
  sub_1000C1398(v71, type metadata accessor for EventRow);
  uint64_t v74 = v118;
  uint64_t v73 = v119;
  unint64_t v75 = v115;
  (*(void (**)(char *, uint64_t, uint64_t))(v118 + 16))(v115, v116, v119);
  uint64_t v76 = v124;
  uint64_t v77 = v122;
  (*(void (**)(char *, uint64_t, uint64_t))(v124 + 16))(v122, v62, a3);
  unint64_t v78 = (*(unsigned __int8 *)(v74 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80);
  unint64_t v79 = (v114 + *(unsigned __int8 *)(v76 + 80) + v78) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80);
  unint64_t v80 = (char *)swift_allocObject();
  *((void *)v80 + 2) = v121;
  *((void *)v80 + 3) = a3;
  uint64_t v81 = v130;
  *((void *)v80 + 4) = v123;
  *((void *)v80 + 5) = v81;
  (*(void (**)(char *, char *, uint64_t))(v74 + 32))(&v80[v78], v75, v73);
  (*(void (**)(char *, char *, uint64_t))(v76 + 32))(&v80[v79], v77, a3);
  sub_100075BD0();
  uint64_t v82 = v111;
  uint64_t v83 = v125;
  View.onTapGesture(count:perform:)();
  swift_release();
  sub_10000ACE0(v83, &qword_1001A7B90);
  uint64_t v84 = static Color.primary.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v86 = v112;
  uint64_t v87 = (uint64_t)v108;
  uint64_t v88 = v113;
  (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v108, v82, v113);
  uint64_t v89 = v128;
  uint64_t v90 = (uint64_t *)(v87 + *(int *)(v128 + 36));
  *uint64_t v90 = KeyPath;
  v90[1] = v84;
  (*(void (**)(char *, uint64_t))(v86 + 8))(v82, v88);
  (*(void (**)(uint64_t, uint64_t))(v96 + 8))(AssociatedTypeWitness, v37);
  uint64_t v91 = v129;
  sub_10000A3C4(v87, v129, &qword_1001A7B50);
  uint64_t v92 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v127 + 56))(v91, v92, 1, v89);
}

uint64_t sub_1000BF2F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)v21 - v15;
  v21[0] = a3;
  v21[1] = a4;
  v21[2] = a5;
  v21[3] = a6;
  uint64_t v17 = type metadata accessor for ArtistEventView();
  sub_1000B9DE8(v17, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v18 = *(void *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v16, a2, a4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, a4);
  sub_100053C24((uint64_t)v16);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  swift_release();
  sub_1000B9DE8(v17, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v19 = *(void *)(a1 + 40);
  if (v19)
  {
    swift_retain();
    sub_100052988(8, 10, 0, 3u, v19);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1000C16DC((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000BF544@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v60 = a1;
  uint64_t v66 = a6;
  uint64_t v65 = sub_10000570C(&qword_1001A96E0);
  __chkstk_darwin(v65, v10);
  uint64_t v64 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_10000570C(&qword_1001A96E8);
  uint64_t v59 = *(void *)(v62 - 8);
  __chkstk_darwin(v62, v12);
  id v55 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000570C(&qword_1001A96F0);
  uint64_t v16 = __chkstk_darwin(v14 - 8, v15);
  uint64_t v61 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v18);
  uint64_t v63 = (char *)&v53 - v19;
  uint64_t v20 = type metadata accessor for ToolbarItemPlacement();
  uint64_t v22 = __chkstk_darwin(v20 - 8, v21);
  __chkstk_darwin(v22, v23);
  uint64_t v24 = sub_10000570C(&qword_1001A96F8);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v29 = (char *)&v53 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27, v30);
  uint64_t v32 = (char *)&v53 - v31;
  static ToolbarItemPlacement.navigationBarLeading.getter();
  uint64_t v54 = a2;
  uint64_t v67 = a2;
  uint64_t v68 = a3;
  uint64_t v56 = a3;
  uint64_t v57 = a4;
  uint64_t v69 = a4;
  uint64_t v70 = a5;
  uint64_t v33 = v60;
  uint64_t v58 = a5;
  uint64_t v71 = v60;
  sub_10000570C(&qword_1001A9700);
  sub_1000C0FC0();
  ToolbarItem<>.init(placement:content:)();
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v32, v29, v24);
  if (*(void *)(v33 + 40))
  {
    swift_retain();
    char v34 = sub_1000D1500();
    uint64_t v36 = v35;
    swift_release();
    if (v36 && (swift_bridgeObjectRelease(), (v34 & 1) != 0))
    {
      char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v49 & 1) == 0)
      {
        uint64_t v50 = sub_10000570C(&qword_1001A9718);
        uint64_t v51 = (uint64_t)v61;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v61, 1, 1, v50);
        uint64_t v52 = sub_10000A780(&qword_1001A9720, &qword_1001A96E8);
        uint64_t v72 = v62;
        uint64_t v73 = v52;
        swift_getOpaqueTypeConformance2();
        uint64_t v46 = (uint64_t)v63;
        static ToolbarContentBuilder.buildIf<A>(_:)();
        sub_10000ACE0(v51, &qword_1001A96F0);
        goto LABEL_6;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v37 = static ToolbarItemPlacement.navigationBarTrailing.getter();
    __chkstk_darwin(v37, v38);
    uint64_t v39 = v56;
    *(&v53 - 6) = v54;
    *(&v53 - 5) = v39;
    uint64_t v40 = v58;
    *(&v53 - 4) = v57;
    *(&v53 - 3) = v40;
    *(&v53 - 2) = v33;
    sub_10000570C(&qword_1001A8948);
    sub_10009E094();
    uint64_t v41 = v55;
    ToolbarItem<>.init(placement:content:)();
    uint64_t v42 = sub_10000A780(&qword_1001A9720, &qword_1001A96E8);
    uint64_t v44 = (uint64_t)v61;
    uint64_t v43 = v62;
    static ToolbarContentBuilder.buildBlock<A>(_:)();
    uint64_t v45 = sub_10000570C(&qword_1001A9718);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v44, 0, 1, v45);
    uint64_t v72 = v43;
    uint64_t v73 = v42;
    swift_getOpaqueTypeConformance2();
    uint64_t v46 = (uint64_t)v63;
    static ToolbarContentBuilder.buildIf<A>(_:)();
    sub_10000ACE0(v44, &qword_1001A96F0);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v41, v43);
LABEL_6:
    uint64_t v47 = (uint64_t)&v64[*(int *)(v65 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v64, v32, v24);
    sub_10000A428(v46, v47, &qword_1001A96F0);
    TupleToolbarContent.init(_:)();
    sub_10000ACE0(v46, &qword_1001A96F0);
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v32, v24);
  }
  type metadata accessor for RemoteViewConfiguration();
  sub_1000C16DC((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  uint64_t result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

uint64_t sub_1000BFC04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v37 = a6;
  uint64_t v11 = type metadata accessor for ArtistEventListHeader(0);
  uint64_t v12 = (int *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (uint64_t *)((char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = sub_10000570C(&qword_1001A9700);
  uint64_t v17 = v16 - 8;
  __chkstk_darwin(v16, v18);
  uint64_t v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  uint64_t v41 = a5;
  uint64_t v21 = type metadata accessor for ArtistEventView();
  sub_1000B9DE8(v21, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v22 = sub_1000513FC();
  uint64_t v35 = v23;
  uint64_t v36 = v22;
  swift_release();
  sub_1000B9DE8(v21, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_100051474((uint64_t)v15 + v12[7]);
  swift_release();
  uint64_t v24 = sub_1000B9DE8(v21, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v25 = v24 + *(void *)(*(void *)v24 + 184);
  uint64_t v26 = *(void *)v25;
  uint64_t v27 = *(void *)(v25 + 8);
  LOBYTE(a3) = *(unsigned char *)(v25 + 16);
  uint64_t v28 = *(void *)(v25 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v29 = v35;
  *uint64_t v15 = v36;
  v15[1] = v29;
  uint64_t v30 = (char *)v15 + v12[8];
  *(void *)uint64_t v30 = v26;
  *((void *)v30 + 1) = v27;
  v30[16] = a3;
  *((void *)v30 + 3) = v28;
  *((unsigned char *)v15 + v12[9]) = 1;
  uint64_t v31 = (uint64_t *)((char *)v15 + v12[10]);
  *uint64_t v31 = swift_getKeyPath();
  sub_10000570C(&qword_1001A5470);
  swift_storeEnumTagMultiPayload();
  if (*(unsigned char *)(*(void *)(a1 + 32) + 16)) {
    double v32 = 1.0;
  }
  else {
    double v32 = 0.0;
  }
  sub_1000C1330((uint64_t)v15, (uint64_t)v20, type metadata accessor for ArtistEventListHeader);
  *(double *)&v20[*(int *)(v17 + 44)] = v32;
  sub_1000C1398((uint64_t)v15, type metadata accessor for ArtistEventListHeader);
  return sub_10000A3C4((uint64_t)v20, v37, &qword_1001A9700);
}

uint64_t sub_1000BFE84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v24[1] = a1;
  uint64_t v11 = type metadata accessor for DismissAction();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v15 = __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)v24 - v18;
  v24[2] = a2;
  v24[3] = a3;
  v24[4] = a4;
  v24[5] = a5;
  type metadata accessor for ArtistEventView();
  sub_10002652C((uint64_t)v19);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v16, v19, v11);
  unint64_t v20 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v21 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v21 + v20, v16, v11);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v11);
  uint64_t v22 = static Font.title2.getter();
  uint64_t result = swift_getKeyPath();
  *(_WORD *)a6 = 1;
  *(void *)(a6 + 8) = sub_10000FC50;
  *(void *)(a6 + 16) = v21;
  *(void *)(a6 + 24) = result;
  *(void *)(a6 + 32) = v22;
  return result;
}

uint64_t sub_1000C0050()
{
  return sub_100050D54();
}

uint64_t sub_1000C0074(uint64_t a1)
{
  return sub_100053C24(a1);
}

uint64_t sub_1000C0098@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v25 = a5;
  uint64_t v26 = a2;
  uint64_t v27 = a4;
  uint64_t v28 = a6;
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(a1, a2);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for EventView();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v25 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  unint64_t v20 = (*(unsigned __int8 *)(v8 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v21 = (char *)swift_allocObject();
  uint64_t v22 = v25;
  *((void *)v21 + 2) = v26;
  *((void *)v21 + 3) = a3;
  *((void *)v21 + 4) = v27;
  *((void *)v21 + 5) = v22;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v21[v20], v10, a3);
  sub_100123368((uint64_t)sub_10012576C, 0, (uint64_t)v16);
  swift_getWitnessTable();
  sub_1001221F0(v16, v11);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v12 + 8);
  v23(v16, v11);
  sub_1001221F0(v19, v11);
  return ((uint64_t (*)(char *, uint64_t))v23)(v19, v11);
}

uint64_t sub_1000C031C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  __chkstk_darwin(a1, a2);
  unint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EventViewModel();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a3);
  return sub_10011EC14((uint64_t)v7);
}

uint64_t sub_1000C03FC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100051218();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000C042C()
{
  return sub_100051308();
}

uint64_t sub_1000C0454@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ArtistEventView();
  uint64_t v3 = sub_1000B9DE8(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v4 = *(void *)(v3 + *(void *)(*(void *)v3 + 168));
  swift_retain();
  swift_release();
  type metadata accessor for RemoteViewConfiguration();
  sub_1000C16DC((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  uint64_t result = EnvironmentObject.init()();
  *a1 = v4;
  a1[1] = result;
  a1[2] = v6;
  return result;
}

uint64_t sub_1000C0534(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ArtistEventView();
  sub_1000B9DE8(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  if (*(void *)(a1 + 40))
  {
    uint64_t v3 = swift_retain();
    sub_1000528E8(v3);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1000C16DC((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000C0618(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ArtistEventView();
  sub_1000B9DE8(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    swift_retain();
    sub_100052988(0, 2, 0, 3u, v3);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1000C16DC((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000C0710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[9] = a4;
  v5[10] = a5;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  type metadata accessor for MainActor();
  v5[11] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[12] = v7;
  v5[13] = v6;
  return _swift_task_switch(sub_1000C07B0, v7, v6);
}

uint64_t sub_1000C07B0()
{
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 56);
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v0 + 72);
  uint64_t v1 = type metadata accessor for ArtistEventView();
  uint64_t v2 = sub_1000B9DE8(v1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  *(void *)(v0 + 112) = *(void *)(v2 + *(void *)(*(void *)v2 + 168));
  swift_retain();
  swift_release();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000C08A8;
  return sub_10004E390();
}

uint64_t sub_1000C08A8()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 104);
  uint64_t v3 = *(void *)(v1 + 96);
  return _swift_task_switch(sub_1000C09EC, v3, v2);
}

uint64_t sub_1000C09EC()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000C0A50()
{
  return sub_1000C1164((uint64_t (*)(void, void, void, void, void))sub_1000BB214);
}

uint64_t sub_1000C0A68()
{
  return sub_100050D54();
}

uint64_t sub_1000C0A8C(uint64_t a1)
{
  return sub_100053C24(a1);
}

uint64_t sub_1000C0AB0()
{
  return 32;
}

__n128 sub_1000C0ABC(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1000C0AC8()
{
  return swift_deallocObject();
}

uint64_t sub_1000C0AD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000C0098(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_1000C0AE4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100051218();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000C0B14()
{
  return sub_100051308();
}

uint64_t sub_1000C0B3C()
{
  return 32;
}

__n128 sub_1000C0B48(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1000C0B58@<X0>(void *a1@<X8>)
{
  type metadata accessor for ArtistEventView();

  return sub_1000C0454(a1);
}

uint64_t sub_1000C0C08()
{
  return sub_1000C0C3C((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000C0534);
}

uint64_t sub_1000C0C24()
{
  return sub_1000C0C3C((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000C0618);
}

uint64_t sub_1000C0C3C(uint64_t (*a1)(char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = *(void *)(type metadata accessor for ArtistEventView() - 8);
  uint64_t v7 = (char *)v1 + ((*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return a1(v7, v2, v3, v4, v5);
}

uint64_t sub_1000C0CF0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  v1[2] = v2;
  v1[3] = v3;
  v1[4] = v4;
  v1[5] = v5;
  uint64_t v6 = *(void *)(type metadata accessor for ArtistEventView() - 8);
  uint64_t v7 = (uint64_t)v0 + ((*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  v1[6] = v8;
  void *v8 = v1;
  v8[1] = sub_1000C26DC;
  return sub_1000C0710(v7, v2, v3, v4, v5);
}

uint64_t sub_1000C0DF4()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t sub_1000C0E7C()
{
  return sub_1000C031C(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80)), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000C0EC0()
{
  return sub_1000C1164((uint64_t (*)(void, void, void, void, void))sub_1000BBAF0);
}

uint64_t sub_1000C0EDC()
{
  type metadata accessor for ArtistEventView();

  return sub_100072D04();
}

uint64_t sub_1000C0F90()
{
  return sub_1000C1164((uint64_t (*)(void, void, void, void, void))sub_1000BF544);
}

uint64_t sub_1000C0FA8()
{
  return sub_1000C1164((uint64_t (*)(void, void, void, void, void))sub_1000BFC04);
}

unint64_t sub_1000C0FC0()
{
  unint64_t result = qword_1001A9708;
  if (!qword_1001A9708)
  {
    sub_100004A58(&qword_1001A9700);
    sub_1000C16DC(&qword_1001A9710, (void (*)(uint64_t))type metadata accessor for ArtistEventListHeader);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A9708);
  }
  return result;
}

uint64_t sub_1000C106C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BFE84(v1[6], v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t sub_1000C107C()
{
  uint64_t v1 = type metadata accessor for DismissAction();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t sub_1000C111C()
{
  return sub_1000C1164((uint64_t (*)(void, void, void, void, void))sub_1000BBFF8);
}

uint64_t sub_1000C1134()
{
  return sub_1000C1164((uint64_t (*)(void, void, void, void, void))sub_1000BC2FC);
}

uint64_t sub_1000C114C()
{
  return sub_1000C1164((uint64_t (*)(void, void, void, void, void))sub_1000BE044);
}

uint64_t sub_1000C1164(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1000C117C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000C11FC()
{
  unint64_t result = qword_1001A9730;
  if (!qword_1001A9730)
  {
    sub_100004A58(&qword_1001A96B8);
    sub_100075AFC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A9730);
  }
  return result;
}

uint64_t sub_1000C1274@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(v2 + 40);
  uint64_t v7 = *(void *)(type metadata accessor for ArtistEventView() - 8);
  uint64_t v8 = v2 + ((*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_1000BE72C(a1, v8, v5, v6, a2);
}

uint64_t sub_1000C1330(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000C1398(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000C13F8()
{
  long long v9 = *(_OWORD *)(v0 + 24);
  uint64_t v1 = (int *)(type metadata accessor for ArtistEventView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = *(void *)(*(void *)v1 + 64);
  uint64_t v4 = *(void *)(v9 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  sub_10001274C();
  swift_release();
  swift_release();
  unint64_t v6 = v0 + v2 + v1[17];
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for DismissAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  (*(void (**)(unint64_t, void))(v4 + 8))(v0 + ((v2 + v3 + v5) & ~v5), v9);
  return swift_deallocObject();
}

uint64_t sub_1000C15D0()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v5 = *(void *)(type metadata accessor for ArtistEventView() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (uint64_t)v0
     + ((v6 + *(void *)(v5 + 64) + *(unsigned __int8 *)(*(void *)(v2 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80));

  return sub_1000BF2F8((uint64_t)v0 + v6, v7, v1, v2, v3, v4);
}

uint64_t sub_1000C16DC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double sub_1000C1724(uint64_t a1)
{
  *(unsigned char *)(a1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_1000C1744(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    sub_100008068(a2, a3);
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1000C17AC(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 144);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), v4);
  return a1;
}

uint64_t sub_1000C1818(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    sub_100007D90(a2, a3);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000C1884()
{
  uint64_t v1 = (int *)(type metadata accessor for ArtistEventView() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  sub_10001274C();
  swift_release();
  swift_release();
  uint64_t v3 = v2 + v1[17];
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_1000C19B8(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v9 = *(void *)(type metadata accessor for ArtistEventView() - 8);
  uint64_t v10 = (uint64_t)v2 + ((*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));

  return sub_1000BD99C(a1, a2, v10, v5, v6, v7, v8);
}

uint64_t sub_1000C1A74()
{
  uint64_t v1 = (int *)(type metadata accessor for ArtistEventView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = *(void *)(*(void *)v1 + 64);
  uint64_t v4 = type metadata accessor for ArtistPromotionalAssets();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  sub_10001274C();
  swift_release();
  swift_release();
  unint64_t v7 = v0 + v2 + v1[17];
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for DismissAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + ((v2 + v3 + v6) & ~v6), v4);
  return swift_deallocObject();
}

uint64_t sub_1000C1C3C()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v5 = *(void *)(type metadata accessor for ArtistEventView() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(type metadata accessor for ArtistPromotionalAssets() - 8);
  uint64_t v9 = (uint64_t)v0 + ((v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));

  return sub_1000BD770((uint64_t)v0 + v6, v9, v1, v2, v3, v4);
}

uint64_t sub_1000C1D44()
{
  return sub_1000C117C(&qword_1001A9778, &qword_1001A9780, (void (*)(void))sub_1000C1D6C);
}

unint64_t sub_1000C1D6C()
{
  unint64_t result = qword_1001A9788;
  if (!qword_1001A9788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001A9788);
  }
  return result;
}

uint64_t sub_1000C1DC0()
{
  uint64_t v1 = (int *)(type metadata accessor for ArtistEventView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v3 = (*(void *)(*(void *)v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  sub_10001274C();
  swift_release();
  swift_release();
  unint64_t v4 = v0 + v2 + v1[17];
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for DismissAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  if (*(void *)(v0 + v3 + 8) >= 2uLL) {
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

uint64_t sub_1000C1F1C(uint64_t a1)
{
  unint64_t v3 = v2;
  uint64_t v5 = v1[4];
  uint64_t v4 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v6 = v1[7];
  v3[2] = v5;
  v3[3] = v4;
  v3[4] = v7;
  v3[5] = v6;
  uint64_t v8 = *(void *)(type metadata accessor for ArtistEventView() - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = (uint64_t)v1 + v9;
  uint64_t v13 = (void *)((char *)v1 + ((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  uint64_t v16 = (void *)swift_task_alloc();
  v3[6] = v16;
  *uint64_t v16 = v3;
  v16[1] = sub_1000C2084;
  return sub_1000BDBDC(a1, v10, v11, v12, v14, v15, v5, v4);
}

uint64_t sub_1000C2084()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000C2178()
{
  return swift_getWitnessTable();
}

uint64_t sub_1000C26E0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000C2774()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 96));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ConditionalValue.Storage()
{
  return sub_10000B72C();
}

void *sub_1000C2838(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t sub_1000C2868()
{
  return swift_release();
}

void *sub_1000C2870(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *sub_1000C28B4(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for ConditionalValue()
{
  return sub_10000B72C();
}

uint64_t sub_1000C2900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a2, a3, a4, a6, a5);
}

uint64_t sub_1000C291C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_1000C2994()
{
  return sub_1000C29BC();
}

uint64_t sub_1000C29A8()
{
  return sub_1000C29BC();
}

uint64_t sub_1000C29BC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1000C2A28(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  sub_10000570C(&qword_1001A6D90);
  v3[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for AppleMusicFetcher.MusicArtist();
  v3[10] = v4;
  v3[11] = *(void *)(v4 - 8);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for EventsError();
  v3[14] = v5;
  v3[15] = *(void *)(v5 - 8);
  v3[16] = swift_task_alloc();
  sub_10000570C(&qword_1001A6320);
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  v3[19] = type metadata accessor for MainActor();
  v3[20] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[21] = v7;
  v3[22] = v6;
  return _swift_task_switch(sub_1000C2C00, v7, v6);
}

uint64_t sub_1000C2C00()
{
  sub_1000C370C();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[23] = v1;
  void *v1 = v0;
  v1[1] = sub_1000C2CA4;
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  return static Artist.schedule(id:)(v2, v3, v4);
}

uint64_t sub_1000C2CA4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 176);
  uint64_t v4 = *(void *)(v2 + 168);
  if (v0) {
    uint64_t v5 = sub_1000C2F30;
  }
  else {
    uint64_t v5 = sub_1000C2DE0;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_1000C2DE0()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[18];
  swift_release();
  uint64_t v3 = sub_10000570C(&qword_1001A6328);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 0, 1, v3);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1000C3ED8(v2, v1);
  swift_retain();
  static Published.subscript.setter();
  sub_10000ACE0(v2, &qword_1001A6320);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000C2F30()
{
  *(void *)(v0 + 16) = *(void *)(v0 + 192);
  swift_errorRetain();
  sub_10000570C(&qword_1001A5968);
  if (swift_dynamicCast())
  {
    int v1 = (*(uint64_t (**)(void, void))(*(void *)(v0 + 120) + 88))(*(void *)(v0 + 128), *(void *)(v0 + 112));
    *(_DWORD *)(v0 + 224) = v1;
    if (v1 == enum case for EventsError.missingData(_:))
    {
      swift_errorRelease();
      *(void *)(v0 + 200) = static MainActor.shared.getter();
      uint64_t v2 = (void *)swift_task_alloc();
      *(void *)(v0 + 208) = v2;
      *uint64_t v2 = v0;
      v2[1] = sub_1000C3158;
      uint64_t v3 = *(void *)(v0 + 72);
      uint64_t v4 = *(void *)(v0 + 48);
      uint64_t v5 = *(void *)(v0 + 56);
      return sub_1000660D0(v3, v4, v5);
    }
    uint64_t v8 = *(void *)(v0 + 120);
    uint64_t v7 = *(void *)(v0 + 128);
    uint64_t v9 = *(void *)(v0 + 112);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  else
  {
    swift_release();
  }
  uint64_t v10 = *(void *)(v0 + 192);
  swift_errorRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  *(void *)(v0 + 24) = v10;
  swift_retain();
  static Published.subscript.setter();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_1000C3158()
{
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  if (v0) {
    uint64_t v4 = sub_1000C352C;
  }
  else {
    uint64_t v4 = sub_1000C32B4;
  }
  return _swift_task_switch(v4, v3, v2);
}

uint64_t sub_1000C32B4()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 176);
  return _swift_task_switch(sub_1000C3318, v1, v2);
}

uint64_t sub_1000C3318()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    uint64_t v4 = *(unsigned int *)(v0 + 224);
    uint64_t v5 = *(void *)(v0 + 112);
    uint64_t v6 = *(void *)(v0 + 120);
    sub_10000ACE0(*(void *)(v0 + 72), &qword_1001A6D90);
    sub_1000C3F48();
    uint64_t v7 = swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(v8, v4, v5);
    swift_getKeyPath();
    swift_getKeyPath();
    *(void *)(v0 + 32) = v7;
    swift_retain();
    static Published.subscript.setter();
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 96);
    uint64_t v9 = *(void *)(v0 + 104);
    sub_1000508EC(*(void *)(v0 + 72), v9);
    sub_100050950(v9, v10);
    sub_10000570C(&qword_1001A6DA0);
    swift_allocObject();
    uint64_t v11 = sub_100030D20(v10, (uint64_t)&_swiftEmptyArrayStorage);
    swift_getKeyPath();
    swift_getKeyPath();
    *(void *)(v0 + 40) = v11;
    swift_retain();
    static Published.subscript.setter();
    sub_1000509F8(v9);
  }
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_1000C352C()
{
  swift_release();
  swift_errorRelease();
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 176);
  return _swift_task_switch(sub_1000C359C, v1, v2);
}

uint64_t sub_1000C359C()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v3, 1, 1, v1);
  uint64_t v4 = *(unsigned int *)(v0 + 224);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 120);
  sub_10000ACE0(*(void *)(v0 + 72), &qword_1001A6D90);
  sub_1000C3F48();
  uint64_t v7 = swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(v8, v4, v5);
  swift_getKeyPath();
  swift_getKeyPath();
  *(void *)(v0 + 32) = v7;
  swift_retain();
  static Published.subscript.setter();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_1000C370C()
{
  uint64_t v0 = sub_10000570C(&qword_1001A6320);
  uint64_t v2 = __chkstk_darwin(v0 - 8, v1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2, v5);
  uint64_t v7 = (char *)&v10 - v6;
  uint64_t v8 = sub_10000570C(&qword_1001A6328);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1000C3ED8((uint64_t)v7, (uint64_t)v4);
  swift_retain();
  static Published.subscript.setter();
  sub_10000ACE0((uint64_t)v7, &qword_1001A6320);
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v11 = 0;
  swift_retain();
  static Published.subscript.setter();
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v11 = 0;
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t sub_1000C38C4()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC16EventViewService16ArtistController__schedule;
  uint64_t v2 = sub_10000570C(&qword_1001A9990);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC16EventViewService16ArtistController__error;
  uint64_t v4 = sub_10000570C(&qword_1001A50F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC16EventViewService16ArtistController__emptyScheduleViewModel;
  uint64_t v6 = sub_10000570C(&qword_1001A9998);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return swift_deallocClassInstance();
}

uint64_t sub_1000C39F8()
{
  return type metadata accessor for ArtistController();
}

uint64_t type metadata accessor for ArtistController()
{
  uint64_t result = qword_1001A98E0;
  if (!qword_1001A98E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000C3A4C()
{
  sub_100004AA0(319, &qword_1001A98F0, &qword_1001A6320);
  if (v0 <= 0x3F)
  {
    sub_100004AA0(319, &qword_1001A4FB0, (uint64_t *)&unk_1001A4FB8);
    if (v1 <= 0x3F)
    {
      sub_100004AA0(319, &qword_1001A98F8, (uint64_t *)&unk_1001A9900);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t sub_1000C3B80()
{
  uint64_t v1 = sub_10000570C(&qword_1001A9998);
  uint64_t v30 = *(void *)(v1 - 8);
  uint64_t v31 = v1;
  __chkstk_darwin(v1, v2);
  uint64_t v29 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_10000570C(&qword_1001A50F0);
  uint64_t v4 = *(void *)(v28 - 8);
  __chkstk_darwin(v28, v5);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000570C(&qword_1001A9990);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000570C(&qword_1001A6320);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  unint64_t v20 = (char *)&v27 - v19;
  uint64_t v21 = v0 + OBJC_IVAR____TtC16EventViewService16ArtistController__schedule;
  uint64_t v22 = sub_10000570C(&qword_1001A6328);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v20, 1, 1, v22);
  sub_1000C3ED8((uint64_t)v20, (uint64_t)v17);
  Published.init(initialValue:)();
  sub_10000ACE0((uint64_t)v20, &qword_1001A6320);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v21, v12, v8);
  uint64_t v23 = v0 + OBJC_IVAR____TtC16EventViewService16ArtistController__error;
  uint64_t v32 = 0;
  sub_10000570C((uint64_t *)&unk_1001A4FB8);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v23, v7, v28);
  uint64_t v24 = v0 + OBJC_IVAR____TtC16EventViewService16ArtistController__emptyScheduleViewModel;
  uint64_t v32 = 0;
  sub_10000570C((uint64_t *)&unk_1001A9900);
  uint64_t v25 = v29;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v24, v25, v31);
  return v0;
}

uint64_t sub_1000C3ED8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A6320);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000C3F48()
{
  unint64_t result = qword_1001A6D98;
  if (!qword_1001A6D98)
  {
    type metadata accessor for EventsError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6D98);
  }
  return result;
}

uint64_t sub_1000C3FB0@<X0>(char a1@<W0>, char a2@<W1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  *(unsigned char *)a6 = a1;
  *(unsigned char *)(a6 + 1) = a2;
  *(void *)(a6 + 8) = a4;
  *(void *)(a6 + 16) = a5;
  type metadata accessor for ObservableScrollView();
  uint64_t v7 = swift_retain();
  a3(v7);

  return swift_release();
}

uint64_t type metadata accessor for ObservableScrollView()
{
  return sub_10000B72C();
}

uint64_t sub_1000C4048()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_1000C4100(unsigned char *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 24) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    a1[1] = *((unsigned char *)a2 + 1);
    uint64_t v10 = (void *)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + 9) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = ((unint64_t)v10 + v6 + 16) & ~v6;
    uint64_t v14 = ((unint64_t)v11 + v6 + 16) & ~v6;
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v15(v13, v14, v4);
  }
  return v3;
}

uint64_t sub_1000C422C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (a1 + 9) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (v3 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

unsigned char *sub_1000C42A4(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = (void *)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)((unint64_t)(a2 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = v5[1];
  *uint64_t v4 = *v5;
  v4[1] = v6;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  uint64_t v9 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v10 = ((unint64_t)v4 + v9 + 16) & ~v9;
  uint64_t v11 = ((unint64_t)v5 + v9 + 16) & ~v9;
  swift_retain();
  v8(v10, v11, v7);
  return a1;
}

unsigned char *sub_1000C4354(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v5 = (void *)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)((unint64_t)(a2 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = v6[1];
  *uint64_t v5 = *v6;
  v5[1] = v7;
  swift_retain();
  swift_release();
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)v5 + *(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)v6 + *(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

unsigned char *sub_1000C4408(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = (_OWORD *)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (_OWORD *)((unint64_t)(a2 + 9) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

unsigned char *sub_1000C4498(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v5 = (_OWORD *)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (_OWORD *)((unint64_t)(a2 + 9) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  swift_release();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)v5 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_1000C453C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 24) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      uint64_t v15 = (unint64_t *)(((unint64_t)a1 + 9) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v15 + v6 + 16) & ~v6);
      }
      unint64_t v16 = *v15;
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void sub_1000C46E4(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 24) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x1000C494CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        uint64_t v18 = (void *)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8);
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(((unint64_t)v18 + v9 + 16) & ~v9);
        }
        else
        {
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *uint64_t v18 = v19;
        }
      }
      return;
  }
}

uint64_t sub_1000C4974()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1000C49B8(double *a1@<X8>)
{
  *a1 = sub_100055F10();
}

uint64_t sub_1000C4A10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v42 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v33 = *(void *)(a1 + 16);
  uint64_t v5 = v4;
  uint64_t v32 = v4;
  uint64_t v34 = type metadata accessor for ObservableScrollView.OffsetPreferenceKey();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for SizeModifier();
  type metadata accessor for ModifiedContent();
  uint64_t v52 = v5;
  uint64_t v53 = swift_getWitnessTable();
  uint64_t v41 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v31 = swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for ScrollView();
  uint64_t v35 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v31 - v8;
  sub_100004A58(&qword_1001A9A28);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v40 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  int v13 = (char *)&v31 - v12;
  unint64_t v36 = sub_1000C5238();
  uint64_t v38 = type metadata accessor for _PreferenceActionModifier();
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v39 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14, v15);
  uint64_t v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  uint64_t v21 = (char *)&v31 - v20;
  uint64_t v43 = v33;
  uint64_t v44 = v32;
  uint64_t v45 = v3;
  ScrollView.init(_:showsIndicators:content:)();
  uint64_t v50 = 0x69566C6C6F726373;
  unint64_t v51 = 0xEA00000000007765;
  uint64_t v22 = swift_getWitnessTable();
  View.coordinateSpace<A>(name:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v6);
  uint64_t v24 = *(void *)(v3 + 8);
  uint64_t v23 = *(void *)(v3 + 16);
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v24;
  *(void *)(v25 + 24) = v23;
  unint64_t v26 = sub_1000C52FC();
  uint64_t v48 = v22;
  unint64_t v49 = v26;
  swift_retain();
  uint64_t v27 = swift_getWitnessTable();
  View.onPreferenceChange<A>(_:perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v13, v10);
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v46 = v27;
  uint64_t v47 = v28;
  swift_getWitnessTable();
  sub_1001221F0(v18, v14);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v39 + 8);
  v29(v18, v14);
  sub_1001221F0(v21, v14);
  return ((uint64_t (*)(char *, uint64_t))v29)(v21, v14);
}

uint64_t sub_1000C4EF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v25 = a1;
  uint64_t v27 = a4;
  uint64_t v26 = type metadata accessor for CoordinateSpace();
  uint64_t v6 = *(void *)(v26 - 8);
  __chkstk_darwin(v26, v7);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ObservableScrollView.OffsetPreferenceKey();
  v24[1] = swift_getWitnessTable();
  v24[2] = type metadata accessor for SizeModifier();
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)v24 - v18;
  v25 += *(int *)(type metadata accessor for ObservableScrollView() + 44);
  uint64_t v30 = 0x69566C6C6F726373;
  unint64_t v31 = 0xEA00000000007765;
  AnyHashable.init<A>(_:)();
  uint64_t v20 = v26;
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, enum case for CoordinateSpace.named(_:), v26);
  sub_1000B0F88(v10, (uint64_t)v9, (uint64_t)sub_1000C5214, 0, a2, a3, (uint64_t)v16);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v20);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v28 = a3;
  uint64_t v29 = WitnessTable;
  swift_getWitnessTable();
  sub_1001221F0(v16, v11);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v12 + 8);
  v22(v16, v11);
  sub_1001221F0(v19, v11);
  return ((uint64_t (*)(char *, uint64_t))v22)(v19, v11);
}

void sub_1000C5214(double *a1@<X8>, double a2@<D1>)
{
  *a1 = a2;
}

uint64_t type metadata accessor for ObservableScrollView.OffsetPreferenceKey()
{
  return sub_10000B72C();
}

unint64_t sub_1000C5238()
{
  unint64_t result = qword_1001A9A30;
  if (!qword_1001A9A30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A9A30);
  }
  return result;
}

uint64_t sub_1000C528C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C4EF0(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000C5298()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000C52D0(double *a1)
{
  return (*(uint64_t (**)(double))(v1 + 16))(*a1);
}

unint64_t sub_1000C52FC()
{
  unint64_t result = qword_1001A9A38[0];
  if (!qword_1001A9A38[0])
  {
    sub_100004A58(&qword_1001A9A28);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001A9A38);
  }
  return result;
}

uint64_t sub_1000C5358()
{
  return swift_getWitnessTable();
}

uint64_t sub_1000C5500(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000C553C()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

double sub_1000C55EC()
{
  sub_10000570C(&qword_1001A7F40);
  Binding.wrappedValue.getter();
  return v1;
}

double sub_1000C563C()
{
  sub_10000570C(&qword_1001A7F40);
  Binding.wrappedValue.getter();
  return v1;
}

uint64_t sub_1000C568C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 80);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v14 - v9, (uint64_t)v1 + *(void *)(v3 + 120), v6);
  uint64_t v11 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    uint64_t v12 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
  else
  {
    if (qword_1001A4E60 != -1) {
      swift_once();
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 88) + 40))(qword_1001B7508, qword_1001B7508, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v10, v5);
  }
}

id sub_1000C58DC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(*v0 + 80);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v13 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v13 - v7, (uint64_t)v0 + *(void *)(v1 + 120), v4);
  uint64_t v9 = *(void *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
LABEL_4:
    id v11 = [self blackColor];
    id v10 = [v11 CGColor];

    return v10;
  }
  id v10 = (id)(*(uint64_t (**)(uint64_t))(*(void *)(v2 + 88) + 16))(v3);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v3);
  if (!v10) {
    goto LABEL_4;
  }
  return v10;
}

double sub_1000C5AF4()
{
  double v0 = sub_1000C55EC();
  double result = 0.0;
  if (v0 <= 0.0) {
    return sub_1000C55EC() * 0.125;
  }
  return result;
}

double sub_1000C5B28()
{
  if (sub_1000C55EC() > 0.0) {
    return 0.0;
  }

  return sub_1000C55EC();
}

double sub_1000C5B64()
{
  double v0 = sub_1000C55EC();
  double result = 1.0;
  if (v0 > 0.0) {
    return sub_1000C55EC() * 0.002 + 1.0;
  }
  return result;
}

BOOL sub_1000C5BA4()
{
  double v0 = -sub_1000C55EC();
  return sub_1000C563C() >= v0;
}

uint64_t sub_1000C5BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = *(void *)v16;
  *(void *)(v16 + 64) = a1;
  uint64_t v18 = v16 + *(void *)(v17 + 120);
  uint64_t v19 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v18, a2, v19);
  *(void *)(v16 + 16) = a3;
  *(void *)(v16 + 24) = a4;
  *(double *)(v16 + 32) = a7;
  *(void *)(v16 + 40) = a5;
  *(void *)(v16 + 48) = a6;
  *(double *)(v16 + 56) = a8;
  return v16;
}

uint64_t sub_1000C5CC8()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 120);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_1000C5D78()
{
  sub_1000C5CC8();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HeroImageModel()
{
  return sub_10000B72C();
}

uint64_t sub_1000C5DE8()
{
  return swift_retain();
}

uint64_t sub_1000C5E8C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000C6BC0(&qword_1001A9C10, (void (*)(uint64_t))type metadata accessor for SetlistSongRowViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + 32);
  return swift_retain();
}

uint64_t sub_1000C5F38()
{
  return swift_release();
}

uint64_t sub_1000C6018@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1[8];
  uint64_t v4 = v1[9];
  sub_10000AC9C(v1 + 5, v3);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 72);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  id v11 = (char *)&v17[-1] - v10;
  v5(v3, v4);
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    uint64_t v13 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
  else
  {
    v17[3] = AssociatedTypeWitness;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v17[4] = AssociatedConformanceWitness;
    sub_10000A7C4(v17);
    (*(void (**)(void))(v12 + 32))();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(100, 100, AssociatedTypeWitness, AssociatedConformanceWitness);
    return sub_100007584((uint64_t)v17);
  }
}

BOOL sub_1000C6260()
{
  uint64_t v1 = v0;
  swift_getKeyPath();
  sub_1000C6BC0(&qword_1001A9C10, (void (*)(uint64_t))type metadata accessor for SetlistSongRowViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v2 = *(void **)(*(void *)(v0 + 32) + 200);
  uint64_t v3 = v2[5];
  uint64_t v4 = v2[6];
  sub_10000AC9C(v2 + 2, v3);
  uint64_t v5 = *(unsigned __int8 (**)(uint64_t, uint64_t))(v4 + 16);
  swift_retain();
  int v6 = v5(v3, v4);
  swift_release();
  if (v6 == 3) {
    return 1;
  }
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v8 = *(void **)(*(void *)(v1 + 32) + 200);
  uint64_t v9 = v8[5];
  uint64_t v10 = v8[6];
  sub_10000AC9C(v8 + 2, v9);
  id v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 16);
  swift_retain();
  char v12 = v11(v9, v10);
  swift_release();
  return v12 == 0;
}

BOOL sub_1000C63FC()
{
  uint64_t v1 = v0;
  sub_10000AC9C(v0 + 5, v0[8]);
  uint64_t v2 = dispatch thunk of MusicItem.id.getter();
  uint64_t v4 = v3;
  swift_getKeyPath();
  sub_1000C6BC0(&qword_1001A9C10, (void (*)(uint64_t))type metadata accessor for SetlistSongRowViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v5 = *(void *)(v0[4] + 200);
  swift_getKeyPath();
  sub_1000C6BC0((unint64_t *)&qword_1001A5938, (void (*)(uint64_t))type metadata accessor for SetlistSongPlaybackController);
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  sub_1000C6C08(v5 + 56, (uint64_t)v16);
  swift_release();
  if (!v17)
  {
    sub_1000C6C70((uint64_t)v16);
    swift_bridgeObjectRelease();
    return 0;
  }
  sub_10000AC9C(v16, v17);
  uint64_t v6 = dispatch thunk of MusicItem.id.getter();
  uint64_t v8 = v7;
  sub_100007584((uint64_t)v16);
  if (v2 == v6 && v4 == v8)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL result = 0;
    if ((v10 & 1) == 0) {
      return result;
    }
  }
  swift_getKeyPath();
  v16[0] = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  id v11 = *(void **)(v1[4] + 200);
  uint64_t v12 = v11[5];
  uint64_t v13 = v11[6];
  sub_10000AC9C(v11 + 2, v12);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 16);
  swift_retain();
  char v15 = v14(v12, v13);
  swift_release();
  return v15 != 0;
}

BOOL sub_1000C66BC()
{
  uint64_t v1 = v0;
  swift_getKeyPath();
  sub_1000C6BC0(&qword_1001A9C10, (void (*)(uint64_t))type metadata accessor for SetlistSongRowViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v2 = *(void **)(*(void *)(v0 + 32) + 200);
  uint64_t v3 = v2[5];
  uint64_t v4 = v2[6];
  sub_10000AC9C(v2 + 2, v3);
  uint64_t v5 = *(unsigned __int8 (**)(uint64_t, uint64_t))(v4 + 16);
  swift_retain();
  int v6 = v5(v3, v4);
  swift_release();
  if (v6 != 2)
  {
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v7 = *(void **)(*(void *)(v1 + 32) + 200);
    uint64_t v8 = v7[5];
    uint64_t v9 = v7[6];
    sub_10000AC9C(v7 + 2, v8);
    char v10 = *(unsigned __int8 (**)(uint64_t, uint64_t))(v9 + 16);
    swift_retain();
    int v11 = v10(v8, v9);
    swift_release();
    if (v11 != 3) {
      return 0;
    }
  }
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v12 = *(void **)(*(void *)(v1 + 32) + 200);
  uint64_t v13 = v12[5];
  uint64_t v14 = v12[6];
  sub_10000AC9C(v12 + 2, v13);
  char v15 = *(double (**)(uint64_t, uint64_t))(v14 + 8);
  swift_retain();
  double v16 = v15(v13, v14);
  swift_release();
  return v16 > 0.0;
}

uint64_t sub_1000C68E4()
{
  swift_bridgeObjectRelease();
  swift_release();
  sub_100007584(v0 + 40);
  uint64_t v1 = v0 + OBJC_IVAR____TtC16EventViewService23SetlistSongRowViewModel___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1000C699C()
{
  return type metadata accessor for SetlistSongRowViewModel();
}

uint64_t type metadata accessor for SetlistSongRowViewModel()
{
  uint64_t result = qword_1001A9B70;
  if (!qword_1001A9B70) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000C69F0()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000C6AA4()
{
  sub_1000D1500();
  if (v0)
  {
    uint64_t v1 = v0;
    if (*(void *)(v0 + 16) && (unint64_t v2 = sub_1000B828C(2), (v3 & 1) != 0))
    {
      uint64_t v4 = *(unsigned __int8 *)(*(void *)(v1 + 56) + v2);
      swift_bridgeObjectRelease();
      char v5 = 1;
      switch(v4)
      {
        case 1:
        case 2:
        case 3:
          char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
          break;
        default:
          break;
      }
    }
    else
    {
      char v5 = 1;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v5 = 1;
  }
  return v5 & 1;
}

uint64_t sub_1000C6BC0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000C6C08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A5940);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C6C70(uint64_t a1)
{
  uint64_t v2 = sub_10000570C(&qword_1001A5940);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000C6CD0()
{
  *(void *)(*(void *)(v0 + 16) + 32) = *(void *)(v0 + 24);
  swift_retain();
  return swift_release();
}

void *sub_1000C6D0C(void *a1, void *a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A9C18);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = v19;
    a1 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v22 = v4;
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    uint64_t v8 = (int *)type metadata accessor for EventRowViewModel();
    uint64_t v9 = v8[6];
    char v10 = (char *)a1 + v9;
    int v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    uint64_t v14 = v8[7];
    char v15 = (char *)a1 + v14;
    double v16 = (char *)a2 + v14;
    uint64_t v17 = *(void *)((char *)a2 + v14 + 24);
    if (v17)
    {
      uint64_t v18 = *((void *)v16 + 4);
      *((void *)v15 + 3) = v17;
      *((void *)v15 + 4) = v18;
      (**(void (***)(void))(v17 - 8))();
    }
    else
    {
      long long v20 = *((_OWORD *)v16 + 1);
      *(_OWORD *)char v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v20;
      *((void *)v15 + 4) = *((void *)v16 + 4);
    }
    *((unsigned char *)a1 + v8[8]) = *((unsigned char *)a2 + v8[8]);
    *(void *)((char *)a1 + v8[9]) = *(void *)((char *)a2 + v8[9]);
    *(void *)((char *)a1 + *(int *)(v22 + 28)) = *(void *)((char *)a2 + *(int *)(v22 + 28));
    swift_retain();
  }
  swift_retain();
  return a1;
}

uint64_t sub_1000C6EBC(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = type metadata accessor for EventRowViewModel();
  uint64_t v3 = a1 + *(int *)(v2 + 24);
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = a1 + *(int *)(v2 + 28);
  if (*(void *)(v5 + 24)) {
    sub_100007584(v5);
  }
  swift_release();
  sub_10000570C(&qword_1001A9C18);

  return swift_release();
}

void *sub_1000C6F84(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = (int *)type metadata accessor for EventRowViewModel();
  uint64_t v7 = v6[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  int v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = v6[7];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = *(void *)((char *)a2 + v12 + 24);
  if (v15)
  {
    uint64_t v16 = *((void *)v14 + 4);
    *((void *)v13 + 3) = v15;
    *((void *)v13 + 4) = v16;
    (**(void (***)(void))(v15 - 8))();
  }
  else
  {
    long long v17 = *((_OWORD *)v14 + 1);
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    *((_OWORD *)v13 + 1) = v17;
    *((void *)v13 + 4) = *((void *)v14 + 4);
  }
  *((unsigned char *)a1 + v6[8]) = *((unsigned char *)a2 + v6[8]);
  *(void *)((char *)a1 + v6[9]) = *(void *)((char *)a2 + v6[9]);
  swift_retain();
  uint64_t v18 = sub_10000570C(&qword_1001A9C18);
  *(void *)((char *)a1 + *(int *)(v18 + 28)) = *(void *)((char *)a2 + *(int *)(v18 + 28));
  swift_retain();
  return a1;
}

void *sub_1000C70D4(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (int *)type metadata accessor for EventRowViewModel();
  uint64_t v5 = v4[6];
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 24))(v6, v7, v8);
  uint64_t v9 = v4[7];
  uint64_t v10 = (uint64_t)a1 + v9;
  int v11 = (char *)a2 + v9;
  uint64_t v12 = *(void *)((char *)a2 + v9 + 24);
  if (!*(void *)((char *)a1 + v9 + 24))
  {
    if (v12)
    {
      *(void *)(v10 + 24) = v12;
      *(void *)(v10 + 32) = *((void *)v11 + 4);
      (**(void (***)(uint64_t, char *))(v12 - 8))(v10, v11);
      goto LABEL_8;
    }
LABEL_7:
    long long v13 = *(_OWORD *)v11;
    long long v14 = *((_OWORD *)v11 + 1);
    *(void *)(v10 + 32) = *((void *)v11 + 4);
    *(_OWORD *)uint64_t v10 = v13;
    *(_OWORD *)(v10 + 16) = v14;
    goto LABEL_8;
  }
  if (!v12)
  {
    sub_100007584(v10);
    goto LABEL_7;
  }
  sub_100056128((uint64_t *)v10, (uint64_t *)v11);
LABEL_8:
  *((unsigned char *)a1 + v4[8]) = *((unsigned char *)a2 + v4[8]);
  *(void *)((char *)a1 + v4[9]) = *(void *)((char *)a2 + v4[9]);
  swift_retain();
  swift_release();
  uint64_t v15 = sub_10000570C(&qword_1001A9C18);
  *(void *)((char *)a1 + *(int *)(v15 + 28)) = *(void *)((char *)a2 + *(int *)(v15 + 28));
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_1000C7278(_OWORD *a1, _OWORD *a2)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = (int *)type metadata accessor for EventRowViewModel();
  uint64_t v6 = v5[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = v5[7];
  int v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  long long v13 = *((_OWORD *)v12 + 1);
  *(_OWORD *)int v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v13;
  *((void *)v11 + 4) = *((void *)v12 + 4);
  *((unsigned char *)a1 + v5[8]) = *((unsigned char *)a2 + v5[8]);
  *(void *)((char *)a1 + v5[9]) = *(void *)((char *)a2 + v5[9]);
  uint64_t v14 = sub_10000570C(&qword_1001A9C18);
  *(void *)((char *)a1 + *(int *)(v14 + 28)) = *(void *)((char *)a2 + *(int *)(v14 + 28));
  return a1;
}

void *sub_1000C7358(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = (int *)type metadata accessor for EventRowViewModel();
  uint64_t v7 = v6[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = v6[7];
  uint64_t v12 = (char *)a1 + v11;
  if (*(void *)((char *)a1 + v11 + 24)) {
    sub_100007584((uint64_t)a1 + v11);
  }
  long long v13 = *(_OWORD *)((char *)a2 + v11 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)((char *)a2 + v11);
  *((_OWORD *)v12 + 1) = v13;
  *((void *)v12 + 4) = *(void *)((char *)a2 + v11 + 32);
  *((unsigned char *)a1 + v6[8]) = *((unsigned char *)a2 + v6[8]);
  *(void *)((char *)a1 + v6[9]) = *(void *)((char *)a2 + v6[9]);
  swift_release();
  uint64_t v14 = sub_10000570C(&qword_1001A9C18);
  *(void *)((char *)a1 + *(int *)(v14 + 28)) = *(void *)((char *)a2 + *(int *)(v14 + 28));
  swift_release();
  return a1;
}

uint64_t sub_1000C7470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C7484);
}

uint64_t sub_1000C7484(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A9C18);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1000C74F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C7508);
}

uint64_t sub_1000C7508(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A9C18);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for EventRow(uint64_t a1)
{
  return sub_10003859C(a1, (uint64_t *)&unk_1001A9C78);
}

uint64_t sub_1000C759C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CB0F0(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1000C75B4);
}

void sub_1000C75B4()
{
  if (!qword_1001A9C88)
  {
    type metadata accessor for EventRowViewModel();
    unint64_t v0 = type metadata accessor for State();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001A9C88);
    }
  }
}

uint64_t sub_1000C760C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000C7628@<X0>(uint64_t a1@<X8>)
{
  uint64_t v78 = a1;
  uint64_t v79 = type metadata accessor for TaskPriority();
  uint64_t v77 = *(void *)(v79 - 8);
  __chkstk_darwin(v79, v2);
  uint64_t v76 = (char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for EventRow(0);
  uint64_t v75 = *(void *)(v4 - 8);
  uint64_t v74 = *(void *)(v75 + 64);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v73 = (uint64_t)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for EventRowViewModel();
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v11 = *(void *)(v68 - 8);
  __chkstk_darwin(v68, v12);
  uint64_t v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000570C(&qword_1001A9CB8);
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v18 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000570C(&qword_1001A9CC0);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000570C(&qword_1001A9CC8);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v69 = v23;
  uint64_t v70 = v24;
  __chkstk_darwin(v23, v25);
  uint64_t v65 = (char *)&v65 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = sub_10000570C(&qword_1001A9CD0);
  uint64_t v28 = __chkstk_darwin(v72, v27);
  uint64_t v67 = (char *)&v65 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28, v30);
  uint64_t v71 = (char *)&v65 - v31;
  *(void *)uint64_t v18 = static VerticalAlignment.center.getter();
  *((void *)v18 + 1) = 0x4026000000000000;
  v18[16] = 0;
  uint64_t v32 = (uint64_t)&v18[*(int *)(sub_10000570C(&qword_1001A9CD8) + 44)];
  uint64_t v66 = v1;
  sub_1000C7D40(v32);
  char v33 = static Edge.Set.top.getter();
  sub_10000A428((uint64_t)v18, (uint64_t)v22, &qword_1001A9CB8);
  uint64_t v34 = &v22[*(int *)(v19 + 36)];
  *uint64_t v34 = v33;
  *(_OWORD *)(v34 + 8) = 0u;
  *(_OWORD *)(v34 + 24) = 0u;
  v34[40] = 1;
  sub_10000ACE0((uint64_t)v18, &qword_1001A9CB8);
  static AccessibilityChildBehavior.ignore.getter();
  uint64_t v35 = sub_1000764C8(&qword_1001A9CE0, &qword_1001A9CC0, &qword_1001A9CE8, &qword_1001A9CB8);
  View.accessibilityElement(children:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v68);
  sub_10000ACE0((uint64_t)v22, &qword_1001A9CC0);
  uint64_t v68 = sub_10000570C(&qword_1001A9C18);
  State.wrappedValue.getter();
  uint64_t v36 = sub_1000B4650();
  uint64_t v38 = v37;
  sub_1000C901C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for EventRowViewModel);
  uint64_t v80 = v36;
  uint64_t v81 = v38;
  sub_100010B2C();
  uint64_t v39 = Text.init<A>(_:)();
  uint64_t v41 = v40;
  LOBYTE(v14) = v42 & 1;
  uint64_t v80 = v19;
  uint64_t v81 = v35;
  swift_getOpaqueTypeConformance2();
  uint64_t v43 = (uint64_t)v67;
  uint64_t v44 = v69;
  uint64_t v45 = v65;
  View.accessibility(label:)();
  sub_10000FCC4(v39, v41, (char)v14);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v70 + 8))(v45, v44);
  sub_10000570C(&qword_1001A9CF0);
  uint64_t v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_100153180;
  uint64_t v47 = v66;
  State.wrappedValue.getter();
  uint64_t v49 = *((void *)v10 + 2);
  uint64_t v48 = *((void *)v10 + 3);
  swift_bridgeObjectRetain();
  sub_1000C901C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for EventRowViewModel);
  uint64_t v80 = v49;
  uint64_t v81 = v48;
  *(void *)(v46 + 32) = Text.init<A>(_:)();
  *(void *)(v46 + 40) = v50;
  *(unsigned char *)(v46 + 48) = v51 & 1;
  *(void *)(v46 + 56) = v52;
  uint64_t v53 = (uint64_t)v71;
  ModifiedContent<>.accessibility(inputLabels:)();
  swift_bridgeObjectRelease();
  sub_10000ACE0(v43, &qword_1001A9CD0);
  uint64_t v54 = v73;
  sub_1000C8FB4(v47, v73, type metadata accessor for EventRow);
  unint64_t v55 = (*(unsigned __int8 *)(v75 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
  uint64_t v56 = swift_allocObject();
  sub_1000C8E64(v54, v56 + v55);
  uint64_t v57 = v76;
  static TaskPriority.userInitiated.getter();
  uint64_t v58 = sub_10000570C(&qword_1001A9D08);
  uint64_t v59 = v78;
  uint64_t v60 = (char *)(v78 + *(int *)(v58 + 36));
  uint64_t v61 = type metadata accessor for _TaskModifier();
  uint64_t v62 = v77;
  uint64_t v63 = v79;
  (*(void (**)(char *, char *, uint64_t))(v77 + 16))(&v60[*(int *)(v61 + 20)], v57, v79);
  *(void *)uint64_t v60 = &unk_1001A9D00;
  *((void *)v60 + 1) = v56;
  sub_10000A428(v53, v59, &qword_1001A9CD0);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v57, v63);
  return sub_10000ACE0(v53, &qword_1001A9CD0);
}

uint64_t sub_1000C7D40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v64 = a1;
  uint64_t v1 = type metadata accessor for Divider();
  uint64_t v61 = *(void *)(v1 - 8);
  uint64_t v62 = v1;
  uint64_t v3 = __chkstk_darwin(v1, v2);
  uint64_t v60 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3, v5);
  uint64_t v66 = (char *)&v57 - v6;
  uint64_t v7 = sub_10000570C(&qword_1001A9D10);
  uint64_t v9 = __chkstk_darwin(v7 - 8, v8);
  uint64_t v63 = (uint64_t)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v11);
  uint64_t v65 = (uint64_t *)((char *)&v57 - v12);
  uint64_t v13 = type metadata accessor for EventRowImage(0);
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000570C(&qword_1001A9D18);
  uint64_t v18 = v17 - 8;
  __chkstk_darwin(v17, v19);
  uint64_t v21 = (char *)&v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000570C(&qword_1001A9D20);
  uint64_t v23 = v22 - 8;
  uint64_t v25 = __chkstk_darwin(v22, v24);
  uint64_t v27 = (char *)&v57 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25, v28);
  uint64_t v30 = (char *)&v57 - v29;
  uint64_t v59 = (uint64_t)&v57 - v29;
  sub_10000570C(&qword_1001A9C18);
  State.wrappedValue.getter();
  sub_1000C8FB4((uint64_t)v16, (uint64_t)v21, type metadata accessor for EventRowImage);
  v21[*(int *)(v18 + 44)] = 1;
  sub_1000C901C((uint64_t)v16, type metadata accessor for EventRowImage);
  LOBYTE(v18) = static Edge.Set.bottom.getter();
  sub_10000A428((uint64_t)v21, (uint64_t)v27, &qword_1001A9D18);
  uint64_t v31 = &v27[*(int *)(v23 + 44)];
  uint64_t v58 = v27;
  *uint64_t v31 = v18;
  *(_OWORD *)(v31 + 8) = 0u;
  *(_OWORD *)(v31 + 24) = 0u;
  v31[40] = 1;
  sub_10000ACE0((uint64_t)v21, &qword_1001A9D18);
  sub_10000A3C4((uint64_t)v27, (uint64_t)v30, &qword_1001A9D20);
  uint64_t v32 = static HorizontalAlignment.leading.getter();
  char v33 = v65;
  *uint64_t v65 = v32;
  v33[1] = 0x4030000000000000;
  *((unsigned char *)v33 + 16) = 0;
  uint64_t v34 = (char *)v33 + *(int *)(sub_10000570C(&qword_1001A9D28) + 44);
  uint64_t v35 = static HorizontalAlignment.leading.getter();
  sub_1000C833C((uint64_t)v78);
  *(_OWORD *)((char *)&v80[4] + 7) = v78[4];
  *(_OWORD *)((char *)&v80[3] + 7) = v78[3];
  *(_OWORD *)((char *)&v80[7] + 7) = v78[7];
  *(_OWORD *)((char *)&v80[8] + 7) = v78[8];
  *(_OWORD *)((char *)&v80[9] + 7) = v79[0];
  v80[10] = *(_OWORD *)((char *)v79 + 9);
  *(_OWORD *)((char *)&v80[5] + 7) = v78[5];
  *(_OWORD *)((char *)&v80[6] + 7) = v78[6];
  *(_OWORD *)((char *)v80 + 7) = v78[0];
  char v81 = 0;
  *(_OWORD *)((char *)&v80[1] + 7) = v78[1];
  *(_OWORD *)((char *)&v80[2] + 7) = v78[2];
  long long v75 = v80[8];
  long long v76 = v80[9];
  long long v77 = *(_OWORD *)((char *)v79 + 9);
  long long v71 = v80[4];
  long long v72 = v80[5];
  long long v73 = v80[6];
  long long v74 = v80[7];
  long long v67 = v80[0];
  long long v68 = v80[1];
  long long v69 = v80[2];
  long long v70 = v80[3];
  uint64_t v36 = v66;
  Divider.init()();
  uint64_t v38 = v60;
  uint64_t v37 = v61;
  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v61 + 16);
  uint64_t v40 = v36;
  uint64_t v41 = v62;
  v39(v60, v40, v62);
  *(_OWORD *)&v83[113] = v74;
  *(_OWORD *)&v83[129] = v75;
  *(_OWORD *)&v83[145] = v76;
  *(_OWORD *)&v83[161] = v77;
  *(_OWORD *)&v83[49] = v70;
  *(_OWORD *)&v83[65] = v71;
  *(_OWORD *)&v83[81] = v72;
  *(_OWORD *)&v83[97] = v73;
  *(_OWORD *)&v83[1] = v67;
  *(void *)&long long v82 = v35;
  *((void *)&v82 + 1) = 0x4014000000000000;
  v83[0] = 0;
  *(_OWORD *)&v83[17] = v68;
  *(_OWORD *)&v83[33] = v69;
  long long v42 = *(_OWORD *)&v83[160];
  *((_OWORD *)v34 + 10) = *(_OWORD *)&v83[144];
  *((_OWORD *)v34 + 11) = v42;
  v34[192] = v83[176];
  long long v43 = *(_OWORD *)&v83[96];
  *((_OWORD *)v34 + 6) = *(_OWORD *)&v83[80];
  *((_OWORD *)v34 + 7) = v43;
  long long v44 = *(_OWORD *)&v83[128];
  *((_OWORD *)v34 + 8) = *(_OWORD *)&v83[112];
  *((_OWORD *)v34 + 9) = v44;
  long long v45 = *(_OWORD *)&v83[32];
  *((_OWORD *)v34 + 2) = *(_OWORD *)&v83[16];
  *((_OWORD *)v34 + 3) = v45;
  long long v46 = *(_OWORD *)&v83[64];
  *((_OWORD *)v34 + 4) = *(_OWORD *)&v83[48];
  *((_OWORD *)v34 + 5) = v46;
  long long v47 = *(_OWORD *)v83;
  *(_OWORD *)uint64_t v34 = v82;
  *((_OWORD *)v34 + 1) = v47;
  uint64_t v48 = sub_10000570C(&qword_1001A9D30);
  v39(&v34[*(int *)(v48 + 48)], v38, v41);
  sub_1000C907C((uint64_t)&v82);
  uint64_t v49 = *(void (**)(char *, uint64_t))(v37 + 8);
  v49(v66, v41);
  v49(v38, v41);
  long long v93 = v74;
  long long v94 = v75;
  long long v95 = v76;
  long long v96 = v77;
  long long v89 = v70;
  long long v90 = v71;
  long long v91 = v72;
  long long v92 = v73;
  long long v86 = v67;
  long long v87 = v68;
  v84[0] = v35;
  v84[1] = 0x4014000000000000;
  char v85 = 0;
  long long v88 = v69;
  sub_1000C91A4((uint64_t)v84);
  uint64_t v51 = (uint64_t)v58;
  uint64_t v50 = v59;
  sub_10000A428(v59, (uint64_t)v58, &qword_1001A9D20);
  uint64_t v52 = v65;
  uint64_t v53 = v63;
  sub_10000A428((uint64_t)v65, v63, &qword_1001A9D10);
  uint64_t v54 = v64;
  sub_10000A428(v51, v64, &qword_1001A9D20);
  uint64_t v55 = sub_10000570C(&qword_1001A9D38);
  sub_10000A428(v53, v54 + *(int *)(v55 + 48), &qword_1001A9D10);
  sub_10000ACE0((uint64_t)v52, &qword_1001A9D10);
  sub_10000ACE0(v50, &qword_1001A9D20);
  sub_10000ACE0(v53, &qword_1001A9D10);
  return sub_10000ACE0(v51, &qword_1001A9D20);
}

uint64_t sub_1000C833C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000570C(&qword_1001A53D8);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v80 = (uint64_t)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = type metadata accessor for EventRowViewModel() - 8;
  uint64_t v6 = __chkstk_darwin(v79, v5);
  uint64_t v78 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (uint64_t *)((char *)&v77 - v9);
  uint64_t v82 = sub_10000570C(&qword_1001A9C18);
  State.wrappedValue.getter();
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  swift_bridgeObjectRetain();
  sub_1000C901C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for EventRowViewModel);
  uint64_t v90 = v11;
  uint64_t v91 = v12;
  sub_100010B2C();
  uint64_t v13 = Text.init<A>(_:)();
  uint64_t v15 = v14;
  char v17 = v16 & 1;
  static Font.subheadline.getter();
  uint64_t v18 = Text.font(_:)();
  uint64_t v85 = v19;
  uint64_t v86 = v18;
  int v81 = v20;
  uint64_t v87 = v21;
  swift_release();
  sub_10000FCC4(v13, v15, v17);
  swift_bridgeObjectRelease();
  State.wrappedValue.getter();
  uint64_t v23 = v10[2];
  uint64_t v22 = v10[3];
  swift_bridgeObjectRetain();
  sub_1000C901C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for EventRowViewModel);
  uint64_t v90 = v23;
  uint64_t v91 = v22;
  uint64_t v24 = Text.init<A>(_:)();
  uint64_t v26 = v25;
  LOBYTE(v15) = v27 & 1;
  static Font.Weight.medium.getter();
  uint64_t v28 = Text.fontWeight(_:)();
  uint64_t v30 = v29;
  char v32 = v31 & 1;
  sub_10000FCC4(v24, v26, v15);
  uint64_t v33 = (uint64_t)v78;
  swift_bridgeObjectRelease();
  static Font.body.getter();
  uint64_t v84 = Text.font(_:)();
  uint64_t v88 = v34;
  uint64_t v89 = v35;
  char v37 = v36;
  swift_release();
  sub_10000FCC4(v28, v30, v32);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  State.wrappedValue.getter();
  uint64_t v38 = *(void *)(v33 + *(int *)(v79 + 44));
  if (!v38)
  {
    uint64_t v64 = type metadata accessor for ArtistPromotionalAssets();
    uint64_t v41 = v80;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56))(v80, 1, 1, v64);
    goto LABEL_5;
  }
  swift_getKeyPath();
  uint64_t v90 = v38;
  sub_1000CB338(&qword_1001A53E0, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v39 = v38 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess();
  uint64_t v40 = v39;
  uint64_t v41 = v80;
  sub_10000A428(v40, v80, &qword_1001A53D8);
  uint64_t v42 = type metadata accessor for ArtistPromotionalAssets();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 48))(v41, 1, v42) == 1)
  {
LABEL_5:
    sub_10000ACE0(v41, &qword_1001A53D8);
    sub_1000C901C(v33, (uint64_t (*)(void))type metadata accessor for EventRowViewModel);
    uint64_t v53 = 0;
    uint64_t v52 = 0;
    uint64_t v62 = 0;
    uint64_t v51 = 0;
    uint64_t v63 = 0;
    uint64_t v55 = 0;
    uint64_t v57 = 0;
    uint64_t v59 = 0;
    uint64_t v61 = 0;
    goto LABEL_6;
  }
  sub_10000ACE0(v41, &qword_1001A53D8);
  sub_1000C901C(v33, (uint64_t (*)(void))type metadata accessor for EventRowViewModel);
  uint64_t v43 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v45 = v44;
  char v47 = v46;
  uint64_t v49 = v48;
  unsigned __int8 v50 = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v51 = v49;
  uint64_t v52 = v45;
  uint64_t v53 = v43;
  uint64_t v55 = v54;
  uint64_t v57 = v56;
  uint64_t v59 = v58;
  uint64_t v61 = v60;
  uint64_t v62 = v47 & 1;
  uint64_t v63 = v50;
LABEL_6:
  uint64_t v79 = v55;
  uint64_t v80 = v57;
  uint64_t v82 = v59;
  char v65 = v81 & 1;
  char v92 = v81 & 1;
  char v66 = v37 & 1;
  char v95 = v81 & 1;
  char v94 = v37 & 1;
  char v93 = 0;
  uint64_t v67 = v86;
  uint64_t v68 = v87;
  *(void *)a1 = v86;
  uint64_t v69 = v67;
  uint64_t v71 = v84;
  uint64_t v70 = v85;
  *(void *)(a1 + 8) = v85;
  uint64_t v72 = v70;
  *(unsigned char *)(a1 + 16) = v65;
  *(void *)(a1 + 24) = v68;
  *(void *)(a1 + 32) = 0x3FE3333333333333;
  uint64_t v73 = v88;
  *(void *)(a1 + 40) = v71;
  *(void *)(a1 + 48) = v73;
  *(unsigned char *)(a1 + 56) = v66;
  uint64_t v74 = KeyPath;
  *(void *)(a1 + 64) = v89;
  *(void *)(a1 + 72) = v74;
  *(void *)(a1 + 80) = 1;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = v53;
  *(void *)(a1 + 104) = v52;
  *(void *)(a1 + 112) = v62;
  *(void *)(a1 + 120) = v51;
  *(void *)(a1 + 128) = v63;
  *(void *)(a1 + 136) = v55;
  *(void *)(a1 + 144) = v57;
  *(void *)(a1 + 152) = v59;
  *(void *)(a1 + 160) = v61;
  *(unsigned char *)(a1 + 168) = 0;
  uint64_t v75 = v53;
  sub_10000FCD4(v69, v72, v65);
  swift_bridgeObjectRetain();
  sub_10000FCD4(v71, v88, v66);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000C9160(v75, v52);
  sub_10002C5C0(v75, v52);
  sub_10000FCC4(v84, v88, v66);
  swift_release();
  swift_bridgeObjectRelease();
  sub_10000FCC4(v86, v85, v92);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000C8980(uint64_t a1)
{
  v1[2] = a1;
  v1[3] = type metadata accessor for EventRowViewModel();
  v1[4] = swift_task_alloc();
  type metadata accessor for MainActor();
  v1[5] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[6] = v3;
  v1[7] = v2;
  return _swift_task_switch(sub_1000C8A48, v3, v2);
}

uint64_t sub_1000C8A48()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  sub_10000570C(&qword_1001A9C18);
  State.wrappedValue.getter();
  uint64_t v3 = *(void *)(v1 + *(int *)(v2 + 36));
  v0[8] = v3;
  swift_retain();
  sub_1000C901C(v1, (uint64_t (*)(void))type metadata accessor for EventRowViewModel);
  if (v3)
  {
    uint64_t v4 = (void *)swift_task_alloc();
    v0[9] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1000C8B70;
    return sub_10004E390();
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_1000C8B70()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 56);
  uint64_t v3 = *(void *)(v1 + 48);
  return _swift_task_switch(sub_1000C8CB4, v3, v2);
}

uint64_t sub_1000C8CB4()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000C8D20()
{
  uint64_t v1 = *(void *)(type metadata accessor for EventRow(0) - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = type metadata accessor for EventRowViewModel();
  uint64_t v4 = v2 + *(int *)(v3 + 24);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = v2 + *(int *)(v3 + 28);
  if (*(void *)(v6 + 24)) {
    sub_100007584(v6);
  }
  swift_release();
  sub_10000570C(&qword_1001A9C18);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000C8E64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventRow(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C8EC8()
{
  uint64_t v2 = *(void *)(type metadata accessor for EventRow(0) - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100009854;
  return sub_1000C8980(v3);
}

uint64_t type metadata accessor for EventRowImage(uint64_t a1)
{
  return sub_10003859C(a1, qword_1001A9D98);
}

uint64_t sub_1000C8FB4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000C901C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000C907C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  char v4 = *(unsigned char *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 128);
  uint64_t v7 = *(void *)(a1 + 120);
  sub_10000FCD4(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRetain();
  sub_10000FCD4(v2, v3, v4);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000C9160(v7, v6);
  return a1;
}

uint64_t sub_1000C9160(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000C91A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  char v4 = *(unsigned char *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 128);
  uint64_t v7 = *(void *)(a1 + 120);
  sub_10000FCC4(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRelease();
  sub_10000FCC4(v2, v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  sub_10002C5C0(v7, v6);
  return a1;
}

uint64_t sub_1000C9288@<X0>(uint64_t a1@<X8>)
{
  uint64_t v46 = a1;
  uint64_t v2 = type metadata accessor for Calendar();
  uint64_t v42 = *(void *)(v2 - 8);
  uint64_t v43 = v2;
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for Calendar.Component();
  uint64_t v6 = *(void *)(v41 - 8);
  __chkstk_darwin(v41, v7);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_10000570C(&qword_1001A9E08);
  __chkstk_darwin(v45, v10);
  uint64_t v12 = (uint64_t *)((char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v13 - 8, v14);
  char v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_10000570C(&qword_1001A9E10);
  uint64_t v17 = *(void *)(v40 - 8);
  __chkstk_darwin(v40, v18);
  int v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_10000570C(&qword_1001A9E18);
  uint64_t v22 = __chkstk_darwin(v44, v21);
  uint64_t v24 = (char *)&v39 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  char v27 = (char *)&v39 - v26;
  if (*(unsigned char *)(v1 + *(int *)(type metadata accessor for EventRowViewModel() + 32)) == 1)
  {
    sub_1000B44CC((uint64_t)v16);
    static Animation.easeInOut.getter();
    Transaction.init(animation:)();
    sub_10000570C(&qword_1001A9E38);
    sub_1000CB4AC();
    AsyncImage.init(url:scale:transaction:content:)();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v28 = v40;
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v24, v20, v40);
    uint64_t v29 = &v24[*(int *)(v44 + 36)];
    long long v30 = v48;
    *(_OWORD *)uint64_t v29 = v47;
    *((_OWORD *)v29 + 1) = v30;
    *((_OWORD *)v29 + 2) = v49;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v28);
    sub_10000A3C4((uint64_t)v24, (uint64_t)v27, &qword_1001A9E18);
    sub_10000A428((uint64_t)v27, (uint64_t)v12, &qword_1001A9E18);
    swift_storeEnumTagMultiPayload();
    sub_1000CB3B8();
    sub_1000CB458();
    _ConditionalContent<>.init(storage:)();
    return sub_10000ACE0((uint64_t)v27, &qword_1001A9E18);
  }
  else
  {
    uint64_t v32 = sub_100053F14();
    uint64_t v34 = v33;
    uint64_t v35 = v41;
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, enum case for Calendar.Component.day(_:), v41);
    static Calendar.current.getter();
    uint64_t v36 = Calendar.component(_:from:)();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v5, v43);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v35);
    *(void *)&long long v47 = v36;
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
    *uint64_t v12 = v32;
    v12[1] = v34;
    v12[2] = v37;
    v12[3] = v38;
    swift_storeEnumTagMultiPayload();
    sub_1000CB3B8();
    sub_1000CB458();
    return _ConditionalContent<>.init(storage:)();
  }
}

double sub_1000C9790@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Image.ResizingMode();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AsyncImagePhase();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  int v14 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v13, v9);
  if (v14 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(char *, uint64_t))(v10 + 96))(v13, v9);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, enum case for Image.ResizingMode.stretch(_:), v4);
    uint64_t v15 = Image.resizable(capInsets:resizingMode:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    static Color.black.getter();
    uint64_t v16 = Color.opacity(_:)();
    swift_release();
    *(void *)&long long v36 = v15;
    *((void *)&v36 + 1) = v16;
    long long v37 = xmmword_100153F70;
    *(void *)&long long v38 = 0x4010000000000000;
    sub_1000CB730((uint64_t)&v36);
    sub_10000A3C4((uint64_t)&v36, (uint64_t)&v61, &qword_1001A9EA0);
    swift_retain();
    swift_retain();
    sub_10000570C(&qword_1001A9E60);
    sub_10000570C(&qword_1001A9E90);
    sub_1000CB5F4(&qword_1001A9E58, &qword_1001A9E60, (void (*)(void))sub_1000CB670);
    sub_10000A780(&qword_1001A9E88, &qword_1001A9E90);
    _ConditionalContent<>.init(storage:)();
    long long v47 = v33;
    long long v48 = v34;
    v49[0] = v35[0];
    *(_OWORD *)((char *)v49 + 9) = *(_OWORD *)((char *)v35 + 9);
    long long v43 = v29;
    long long v44 = v30;
    long long v45 = v31;
    long long v46 = v32;
    *(_OWORD *)((char *)v60 + 9) = *(_OWORD *)((char *)v35 + 9);
    long long v59 = v34;
    v60[0] = v35[0];
    long long v57 = v32;
    long long v58 = v33;
    long long v55 = v30;
    long long v56 = v31;
    long long v54 = v29;
    sub_1000CB728((uint64_t)&v54);
    sub_10000A3C4((uint64_t)&v54, (uint64_t)&v61, &qword_1001A9E98);
    sub_1000CB7B8((uint64_t)&v43, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1000CB738);
    sub_10000570C(&qword_1001A9E50);
    sub_1000CB528();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    sub_1000CB7B8((uint64_t)&v43, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1000CB824);
    swift_release();
    swift_release();
    long long v65 = v51;
    *(_OWORD *)char v66 = v52;
    *(_OWORD *)&v66[16] = v53[0];
    long long v17 = *(_OWORD *)((char *)v53 + 10);
  }
  else
  {
    if (v14 == enum case for AsyncImagePhase.failure(_:))
    {
      (*(void (**)(char *, uint64_t))(v10 + 96))(v13, v9);
      swift_errorRelease();
    }
    else if (v14 != enum case for AsyncImagePhase.empty(_:))
    {
      sub_1000CB710((uint64_t)v50);
      sub_10000A3C4((uint64_t)v50, (uint64_t)&v61, &qword_1001A9E98);
      sub_10000570C(&qword_1001A9E50);
      sub_1000CB528();
      _ConditionalContent<>.init(storage:)();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      long long v65 = v58;
      *(_OWORD *)char v66 = v59;
      *(_OWORD *)&v66[16] = v60[0];
      *(_OWORD *)&v66[26] = *(_OWORD *)((char *)v60 + 10);
      long long v61 = v54;
      long long v62 = v55;
      long long v21 = v56;
      long long v22 = v57;
      goto LABEL_8;
    }
    uint64_t v18 = static Alignment.center.getter();
    uint64_t v20 = v19;
    sub_1000C9EF0((uint64_t)&v61);
    long long v27 = v64;
    *(void *)&long long v43 = v18;
    *((void *)&v43 + 1) = v20;
    long long v44 = v61;
    uint64_t v28 = v61;
    long long v45 = v62;
    LOWORD(v46) = v63;
    *((void *)&v46 + 1) = *((void *)&v63 + 1);
    long long v47 = v64;
    LOBYTE(v48) = v65;
    *((void *)&v48 + 1) = *((void *)&v65 + 1);
    LOBYTE(v49[0]) = v66[0];
    *(_OWORD *)((char *)v49 + 8) = *(_OWORD *)&v66[8];
    sub_1000CB71C((uint64_t)&v43);
    sub_10000A3C4((uint64_t)&v43, (uint64_t)&v61, &qword_1001A9EA0);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_10000570C(&qword_1001A9E60);
    sub_10000570C(&qword_1001A9E90);
    sub_1000CB5F4(&qword_1001A9E58, &qword_1001A9E60, (void (*)(void))sub_1000CB670);
    sub_10000A780(&qword_1001A9E88, &qword_1001A9E90);
    _ConditionalContent<>.init(storage:)();
    long long v58 = v40;
    long long v59 = v41;
    v60[0] = v42[0];
    *(_OWORD *)((char *)v60 + 9) = *(_OWORD *)((char *)v42 + 9);
    long long v54 = v36;
    long long v55 = v37;
    long long v56 = v38;
    long long v57 = v39;
    sub_1000CB728((uint64_t)&v54);
    sub_10000A3C4((uint64_t)&v54, (uint64_t)&v61, &qword_1001A9E98);
    sub_10000570C(&qword_1001A9E50);
    sub_1000CB528();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    long long v65 = v51;
    *(_OWORD *)char v66 = v52;
    *(_OWORD *)&v66[16] = v53[0];
    long long v17 = *(_OWORD *)((char *)v53 + 10);
  }
  *(_OWORD *)&v66[26] = v17;
  long long v61 = v50[0];
  long long v62 = v50[1];
  long long v21 = v50[2];
  long long v22 = v50[3];
LABEL_8:
  long long v63 = v21;
  long long v64 = v22;
  long long v23 = *(_OWORD *)v66;
  a2[4] = v65;
  a2[5] = v23;
  a2[6] = *(_OWORD *)&v66[16];
  *(_OWORD *)((char *)a2 + 106) = *(_OWORD *)&v66[26];
  long long v24 = v62;
  *a2 = v61;
  a2[1] = v24;
  double result = *(double *)&v63;
  long long v26 = v64;
  a2[2] = v63;
  a2[3] = v26;
  return result;
}

uint64_t sub_1000C9EF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Image.ResizingMode();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A4E48 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_1001B74E8;
  uint64_t KeyPath = swift_getKeyPath();
  swift_retain();
  Image.init(systemName:)();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, enum case for Image.ResizingMode.stretch(_:), v2);
  uint64_t v9 = Image.resizable(capInsets:resizingMode:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  uint64_t v10 = static Color.white.getter();
  uint64_t v11 = swift_getKeyPath();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v12 = v17;
  char v13 = v18;
  uint64_t v14 = v19;
  char v15 = v20;
  *(void *)a1 = KeyPath;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 1;
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v12;
  *(unsigned char *)(a1 + 64) = v13;
  *(void *)(a1 + 72) = v14;
  *(unsigned char *)(a1 + 80) = v15;
  *(_OWORD *)(a1 + 88) = v21;
  swift_retain();
  return swift_release();
}

uint64_t sub_1000CA114@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v76 = a1;
  uint64_t v77 = a2;
  uint64_t v81 = a3;
  uint64_t v80 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin(v80, v3);
  uint64_t v79 = (char *)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000570C(&qword_1001A6AB8);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000570C(&qword_1001A9DE0);
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9, v11);
  char v13 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000570C(&qword_1001A9DE8);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14, v16);
  char v18 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000570C(&qword_1001A9DF0);
  uint64_t v20 = v19 - 8;
  __chkstk_darwin(v19, v21);
  long long v23 = (char *)&v76 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000570C(&qword_1001A9DF8);
  uint64_t v25 = v24 - 8;
  __chkstk_darwin(v24, v26);
  uint64_t v78 = (uint64_t)&v76 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v8 = static VerticalAlignment.center.getter();
  *((void *)v8 + 1) = 0x4010000000000000;
  v8[16] = 0;
  uint64_t v28 = sub_10000570C(&qword_1001A6AD0);
  sub_1000CA5DC((uint64_t)&v8[*(int *)(v28 + 44)]);
  char v29 = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  sub_10000A428((uint64_t)v8, (uint64_t)v13, &qword_1001A6AB8);
  long long v38 = &v13[*(int *)(v10 + 44)];
  *long long v38 = v29;
  *((void *)v38 + 1) = v31;
  *((void *)v38 + 2) = v33;
  *((void *)v38 + 3) = v35;
  *((void *)v38 + 4) = v37;
  v38[40] = 0;
  sub_10000ACE0((uint64_t)v8, &qword_1001A6AB8);
  char v39 = static Edge.Set.trailing.getter();
  EdgeInsets.init(_all:)();
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  sub_10000A428((uint64_t)v13, (uint64_t)v18, &qword_1001A9DE0);
  long long v48 = &v18[*(int *)(v15 + 44)];
  *long long v48 = v39;
  *((void *)v48 + 1) = v41;
  *((void *)v48 + 2) = v43;
  *((void *)v48 + 3) = v45;
  *((void *)v48 + 4) = v47;
  v48[40] = 0;
  sub_10000ACE0((uint64_t)v13, &qword_1001A9DE0);
  LOBYTE(v15) = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  uint64_t v50 = v49;
  uint64_t v52 = v51;
  uint64_t v54 = v53;
  uint64_t v56 = v55;
  sub_10000A428((uint64_t)v18, (uint64_t)v23, &qword_1001A9DE8);
  long long v57 = &v23[*(int *)(v20 + 44)];
  char *v57 = v15;
  *((void *)v57 + 1) = v50;
  *((void *)v57 + 2) = v52;
  *((void *)v57 + 3) = v54;
  *((void *)v57 + 4) = v56;
  v57[40] = 0;
  sub_10000ACE0((uint64_t)v18, &qword_1001A9DE8);
  [self secondarySystemBackgroundColor:v76, v77];
  uint64_t v59 = Color.init(_:)();
  char v60 = static Edge.Set.all.getter();
  uint64_t v61 = v78;
  sub_10000A428((uint64_t)v23, v78, &qword_1001A9DF0);
  uint64_t v62 = v61 + *(int *)(v25 + 44);
  *(void *)uint64_t v62 = v59;
  *(unsigned char *)(v62 + 8) = v60;
  sub_10000ACE0((uint64_t)v23, &qword_1001A9DF0);
  long long v63 = v79;
  long long v64 = &v79[*(int *)(v80 + 28)];
  uint64_t v65 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v66 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v66 - 8) + 104))(v64, v65, v66);
  __asm { FMOV            V0.2D, #6.0 }
  _OWORD *v63 = _Q0;
  uint64_t v72 = sub_10000570C(&qword_1001A9E00);
  uint64_t v73 = v81;
  uint64_t v74 = v81 + *(int *)(v72 + 36);
  sub_1000C8FB4((uint64_t)v63, v74, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v74 + *(int *)(sub_10000570C(&qword_1001A62A8) + 36)) = 256;
  sub_10000A428(v61, v73, &qword_1001A9DF8);
  sub_1000C901C((uint64_t)v63, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  return sub_10000ACE0(v61, &qword_1001A9DF8);
}

uint64_t sub_1000CA5DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v32 = a1;
  uint64_t v1 = sub_10000570C(&qword_1001A6AE8);
  uint64_t v3 = __chkstk_darwin(v1 - 8, v2);
  uint64_t v31 = (uint64_t)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v30 - v6;
  uint64_t v8 = Image.init(_:bundle:)();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v33 = v8;
  uint64_t v34 = v39;
  char v35 = v40;
  uint64_t v36 = v41;
  char v37 = v42;
  long long v38 = v43;
  sub_10000570C(&qword_1001A6AF0);
  sub_1000487F8();
  View.accessibilityHidden(_:)();
  swift_release();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v11 = v10;
  char v13 = v12 & 1;
  static Font.caption2.getter();
  static Font.Weight.semibold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v14 = Text.font(_:)();
  uint64_t v16 = v15;
  char v18 = v17;
  swift_release();
  sub_10000FCC4(v9, v11, v13);
  swift_bridgeObjectRelease();
  uint64_t v33 = static Color.blue.getter();
  uint64_t v19 = Text.foregroundStyle<A>(_:)();
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  char v25 = v24 & 1;
  sub_10000FCC4(v14, v16, v18 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v26 = v31;
  sub_10000A428((uint64_t)v7, v31, &qword_1001A6AE8);
  uint64_t v27 = v32;
  sub_10000A428(v26, v32, &qword_1001A6AE8);
  uint64_t v28 = v27 + *(int *)(sub_10000570C(&qword_1001A6B00) + 48);
  *(void *)uint64_t v28 = v19;
  *(void *)(v28 + 8) = v21;
  *(unsigned char *)(v28 + 16) = v25;
  *(void *)(v28 + 24) = v23;
  sub_10000FCD4(v19, v21, v25);
  swift_bridgeObjectRetain();
  sub_10000ACE0((uint64_t)v7, &qword_1001A6AE8);
  sub_10000FCC4(v19, v21, v25);
  swift_bridgeObjectRelease();
  return sub_10000ACE0(v26, &qword_1001A6AE8);
}

uint64_t sub_1000CA904@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CA114(*v1, v1[1], a1);
}

ValueMetadata *type metadata accessor for PromotionalAssetsTagView()
{
  return &type metadata for PromotionalAssetsTagView;
}

void *sub_1000CA934(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for EventRowViewModel();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v6 = (int *)v4;
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = *(int *)(v4 + 24);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date();
    char v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    uint64_t v14 = v6[7];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = *(void *)((char *)a2 + v14 + 24);
    if (v17)
    {
      uint64_t v18 = *((void *)v16 + 4);
      *((void *)v15 + 3) = v17;
      *((void *)v15 + 4) = v18;
      (**(void (***)(void))(v17 - 8))();
    }
    else
    {
      long long v20 = *((_OWORD *)v16 + 1);
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v20;
      *((void *)v15 + 4) = *((void *)v16 + 4);
    }
    *((unsigned char *)a1 + v6[8]) = *((unsigned char *)a2 + v6[8]);
    *(void *)((char *)a1 + v6[9]) = *(void *)((char *)a2 + v6[9]);
  }
  swift_retain();
  return a1;
}

uint64_t sub_1000CAAB4(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = type metadata accessor for EventRowViewModel();
  uint64_t v3 = a1 + *(int *)(v2 + 24);
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = a1 + *(int *)(v2 + 28);
  if (*(void *)(v5 + 24)) {
    sub_100007584(v5);
  }

  return swift_release();
}

void *sub_1000CAB64(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = (int *)type metadata accessor for EventRowViewModel();
  uint64_t v7 = v6[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = v6[7];
  char v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = *(void *)((char *)a2 + v12 + 24);
  if (v15)
  {
    uint64_t v16 = *((void *)v14 + 4);
    *((void *)v13 + 3) = v15;
    *((void *)v13 + 4) = v16;
    (**(void (***)(void))(v15 - 8))();
  }
  else
  {
    long long v17 = *((_OWORD *)v14 + 1);
    *(_OWORD *)char v13 = *(_OWORD *)v14;
    *((_OWORD *)v13 + 1) = v17;
    *((void *)v13 + 4) = *((void *)v14 + 4);
  }
  *((unsigned char *)a1 + v6[8]) = *((unsigned char *)a2 + v6[8]);
  *(void *)((char *)a1 + v6[9]) = *(void *)((char *)a2 + v6[9]);
  swift_retain();
  return a1;
}

void *sub_1000CAC98(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (int *)type metadata accessor for EventRowViewModel();
  uint64_t v5 = v4[6];
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 24))(v6, v7, v8);
  uint64_t v9 = v4[7];
  uint64_t v10 = (uint64_t)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = *(void *)((char *)a2 + v9 + 24);
  if (!*(void *)((char *)a1 + v9 + 24))
  {
    if (v12)
    {
      *(void *)(v10 + 24) = v12;
      *(void *)(v10 + 32) = *((void *)v11 + 4);
      (**(void (***)(uint64_t, char *))(v12 - 8))(v10, v11);
      goto LABEL_8;
    }
LABEL_7:
    long long v13 = *(_OWORD *)v11;
    long long v14 = *((_OWORD *)v11 + 1);
    *(void *)(v10 + 32) = *((void *)v11 + 4);
    *(_OWORD *)uint64_t v10 = v13;
    *(_OWORD *)(v10 + 16) = v14;
    goto LABEL_8;
  }
  if (!v12)
  {
    sub_100007584(v10);
    goto LABEL_7;
  }
  sub_100056128((uint64_t *)v10, (uint64_t *)v11);
LABEL_8:
  *((unsigned char *)a1 + v4[8]) = *((unsigned char *)a2 + v4[8]);
  *(void *)((char *)a1 + v4[9]) = *(void *)((char *)a2 + v4[9]);
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_1000CAE14(_OWORD *a1, _OWORD *a2)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = (int *)type metadata accessor for EventRowViewModel();
  uint64_t v6 = v5[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = v5[7];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  long long v13 = *((_OWORD *)v12 + 1);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v13;
  *((void *)v11 + 4) = *((void *)v12 + 4);
  *((unsigned char *)a1 + v5[8]) = *((unsigned char *)a2 + v5[8]);
  *(void *)((char *)a1 + v5[9]) = *(void *)((char *)a2 + v5[9]);
  return a1;
}

void *sub_1000CAEDC(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = (int *)type metadata accessor for EventRowViewModel();
  uint64_t v7 = v6[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = v6[7];
  uint64_t v12 = (char *)a1 + v11;
  if (*(void *)((char *)a1 + v11 + 24)) {
    sub_100007584((uint64_t)a1 + v11);
  }
  long long v13 = *(_OWORD *)((char *)a2 + v11 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)((char *)a2 + v11);
  *((_OWORD *)v12 + 1) = v13;
  *((void *)v12 + 4) = *(void *)((char *)a2 + v11 + 32);
  *((unsigned char *)a1 + v6[8]) = *((unsigned char *)a2 + v6[8]);
  *(void *)((char *)a1 + v6[9]) = *(void *)((char *)a2 + v6[9]);
  swift_release();
  return a1;
}

uint64_t sub_1000CAFD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CAFE8);
}

uint64_t sub_1000CAFE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventRowViewModel();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1000CB054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CB068);
}

uint64_t sub_1000CB068(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventRowViewModel();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_1000CB0D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CB0F0(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for EventRowViewModel);
}

uint64_t sub_1000CB0F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1000CB184()
{
  unint64_t result = qword_1001A9DD0;
  if (!qword_1001A9DD0)
  {
    sub_100004A58(&qword_1001A9D08);
    sub_1000CB230();
    sub_1000CB338(&qword_1001A5430, (void (*)(uint64_t))&type metadata accessor for _TaskModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A9DD0);
  }
  return result;
}

unint64_t sub_1000CB230()
{
  unint64_t result = qword_1001A9DD8;
  if (!qword_1001A9DD8)
  {
    sub_100004A58(&qword_1001A9CD0);
    sub_100004A58(&qword_1001A9CC0);
    sub_1000764C8(&qword_1001A9CE0, &qword_1001A9CC0, &qword_1001A9CE8, &qword_1001A9CB8);
    swift_getOpaqueTypeConformance2();
    sub_1000CB338((unint64_t *)&qword_1001A68E8, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A9DD8);
  }
  return result;
}

uint64_t sub_1000CB338(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000CB380()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000CB39C()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1000CB3B8()
{
  unint64_t result = qword_1001A9E20;
  if (!qword_1001A9E20)
  {
    sub_100004A58(&qword_1001A9E18);
    sub_10000A780(&qword_1001A9E28, &qword_1001A9E10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A9E20);
  }
  return result;
}

unint64_t sub_1000CB458()
{
  unint64_t result = qword_1001A9E30;
  if (!qword_1001A9E30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A9E30);
  }
  return result;
}

unint64_t sub_1000CB4AC()
{
  unint64_t result = qword_1001A9E40;
  if (!qword_1001A9E40)
  {
    sub_100004A58(&qword_1001A9E38);
    sub_1000CB528();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A9E40);
  }
  return result;
}

unint64_t sub_1000CB528()
{
  unint64_t result = qword_1001A9E48;
  if (!qword_1001A9E48)
  {
    sub_100004A58(&qword_1001A9E50);
    sub_1000CB5F4(&qword_1001A9E58, &qword_1001A9E60, (void (*)(void))sub_1000CB670);
    sub_10000A780(&qword_1001A9E88, &qword_1001A9E90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A9E48);
  }
  return result;
}

uint64_t sub_1000CB5F4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000CB670()
{
  unint64_t result = qword_1001A9E68;
  if (!qword_1001A9E68)
  {
    sub_100004A58(&qword_1001A9E70);
    sub_10000A780(&qword_1001A9E78, &qword_1001A9E80);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A9E68);
  }
  return result;
}

uint64_t sub_1000CB710(uint64_t result)
{
  *(unsigned char *)(result + 121) = 1;
  return result;
}

uint64_t sub_1000CB71C(uint64_t result)
{
  *(unsigned char *)(result + 120) = 1;
  return result;
}

uint64_t sub_1000CB728(uint64_t result)
{
  *(unsigned char *)(result + 121) = 0;
  return result;
}

uint64_t sub_1000CB730(uint64_t result)
{
  *(unsigned char *)(result + 120) = 0;
  return result;
}

uint64_t sub_1000CB738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16)
  {
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();

  return swift_retain();
}

uint64_t sub_1000CB7B8(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 120);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), v4);
  return a1;
}

uint64_t sub_1000CB824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16)
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();

  return swift_release();
}

unint64_t sub_1000CB8A4()
{
  unint64_t result = qword_1001A9EA8;
  if (!qword_1001A9EA8)
  {
    sub_100004A58(&qword_1001A9E00);
    sub_1000CB944();
    sub_10000A780(&qword_1001A62A0, &qword_1001A62A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A9EA8);
  }
  return result;
}

unint64_t sub_1000CB944()
{
  unint64_t result = qword_1001A9EB0;
  if (!qword_1001A9EB0)
  {
    sub_100004A58(&qword_1001A9DF8);
    sub_1000CB5F4(&qword_1001A9EB8, &qword_1001A9DF0, (void (*)(void))sub_1000CBA10);
    sub_10000A780(&qword_1001A6290, &qword_1001A6298);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A9EB0);
  }
  return result;
}

unint64_t sub_1000CBA10()
{
  unint64_t result = qword_1001A9EC0;
  if (!qword_1001A9EC0)
  {
    sub_100004A58(&qword_1001A9DE8);
    sub_1000764C8(&qword_1001A9EC8, &qword_1001A9DE0, &qword_1001A9ED0, &qword_1001A6AB8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A9EC0);
  }
  return result;
}

unint64_t sub_1000CBAB0()
{
  unint64_t result = qword_1001A9ED8;
  if (!qword_1001A9ED8)
  {
    sub_100004A58(&qword_1001A9EE0);
    sub_1000CB3B8();
    sub_1000CB458();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A9ED8);
  }
  return result;
}

uint64_t sub_1000CBB2C(uint64_t a1)
{
  return sub_1000CBB4C(a1, &qword_1001B7538);
}

uint64_t sub_1000CBB3C(uint64_t a1)
{
  return sub_1000CBB4C(a1, &qword_1001B7540);
}

uint64_t sub_1000CBB4C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000570C(qword_1001A9EE8);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = static Font.system(size:weight:design:)();
  uint64_t result = sub_1000CBC30((uint64_t)v6);
  *a2 = v8;
  return result;
}

uint64_t sub_1000CBC30(uint64_t a1)
{
  uint64_t v2 = sub_10000570C(qword_1001A9EE8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000CBC90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v51 = a2;
  uint64_t v50 = type metadata accessor for SlideTransition();
  uint64_t v3 = *(void *)(v50 - 8);
  uint64_t v5 = __chkstk_darwin(v50, v4);
  uint64_t v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  uint64_t v10 = (char *)&v46 - v9;
  uint64_t v11 = sub_10000570C(&qword_1001A9F70);
  __chkstk_darwin(v11 - 8, v12);
  long long v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000570C(&qword_1001A9F78);
  uint64_t v16 = v15 - 8;
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000570C(&qword_1001A9F80);
  uint64_t v21 = v20 - 8;
  __chkstk_darwin(v20, v22);
  char v24 = (char *)&v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_10000570C(&qword_1001A9F88) - 8;
  __chkstk_darwin(v48, v25);
  uint64_t v47 = (uint64_t)&v46 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = *(void *)(a1 + 16);
  uint64_t v27 = *(void *)(a1 + 24);
  *(void *)long long v14 = static HorizontalAlignment.center.getter();
  *((void *)v14 + 1) = 0x403C000000000000;
  v14[16] = 0;
  uint64_t v29 = sub_10000570C(&qword_1001A9F90);
  sub_1000CC0C4(v49, v28, v27, (uint64_t)&v14[*(int *)(v29 + 44)]);
  SlideTransition.init()();
  uint64_t v30 = v50;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v7, v10, v50);
  sub_1000D0FD0((unint64_t *)&qword_1001A9F98, (void (*)(uint64_t))&type metadata accessor for SlideTransition);
  uint64_t v31 = AnyTransition.init<A>(_:)();
  sub_10000A428((uint64_t)v14, (uint64_t)v19, &qword_1001A9F70);
  *(void *)&v19[*(int *)(v16 + 44)] = v31;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v30);
  sub_10000ACE0((uint64_t)v14, &qword_1001A9F70);
  LOBYTE(v31) = static Edge.Set.top.getter();
  sub_10000A428((uint64_t)v19, (uint64_t)v24, &qword_1001A9F78);
  uint64_t v32 = &v24[*(int *)(v21 + 44)];
  *uint64_t v32 = v31;
  *(_OWORD *)(v32 + 8) = 0u;
  *(_OWORD *)(v32 + 24) = 0u;
  v32[40] = 1;
  sub_10000ACE0((uint64_t)v19, &qword_1001A9F78);
  LOBYTE(v19) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  uint64_t v41 = v47;
  sub_10000A428((uint64_t)v24, v47, &qword_1001A9F80);
  uint64_t v42 = v41 + *(int *)(v48 + 44);
  *(unsigned char *)uint64_t v42 = (_BYTE)v19;
  *(void *)(v42 + 8) = v34;
  *(void *)(v42 + 16) = v36;
  *(void *)(v42 + 24) = v38;
  *(void *)(v42 + 32) = v40;
  *(unsigned char *)(v42 + 40) = 0;
  sub_10000ACE0((uint64_t)v24, &qword_1001A9F80);
  uint64_t v43 = static Alignment.center.getter();
  sub_10012436C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v51, 0.0, 1, 0.0, 1, v43, v44);
  return sub_10000ACE0(v41, &qword_1001A9F88);
}

uint64_t sub_1000CC0C4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v97 = a4;
  uint64_t v7 = type metadata accessor for EventDetailModule();
  uint64_t v86 = *(void *)(v7 - 8);
  uint64_t v87 = v7;
  v84[1] = *(void *)(v86 + 64);
  __chkstk_darwin(v7, v8);
  uint64_t v85 = (char *)v84 - v9;
  unint64_t v92 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v90 = *(void *)(v92 - 8);
  __chkstk_darwin(v92, v10);
  uint64_t v12 = (char *)v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000570C(&qword_1001A9FA0);
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v16 = (char *)v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000570C(&qword_1001A9FA8);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)v84 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = sub_10000570C(&qword_1001A9FB0);
  uint64_t v93 = *(void *)(v91 - 8);
  __chkstk_darwin(v91, v21);
  uint64_t v98 = (char *)v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = sub_10000570C(&qword_1001A9FB8);
  uint64_t v24 = __chkstk_darwin(v95, v23);
  uint64_t v96 = (uint64_t)v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v89 = (char *)v84 - v28;
  uint64_t v30 = __chkstk_darwin(v27, v29);
  char v94 = (char *)v84 - v31;
  __chkstk_darwin(v30, v32);
  uint64_t v99 = (uint64_t)v84 - v33;
  *(void *)uint64_t v16 = static HorizontalAlignment.center.getter();
  *((void *)v16 + 1) = 0x4024000000000000;
  v16[16] = 0;
  uint64_t v34 = sub_10000570C(&qword_1001A9FC0);
  sub_1000CC930(a1, a2, a3, (uint64_t)&v16[*(int *)(v34 + 44)]);
  char v35 = static Edge.Set.horizontal.getter();
  sub_10000A428((uint64_t)v16, (uint64_t)v20, &qword_1001A9FA0);
  uint64_t v36 = &v20[*(int *)(v17 + 36)];
  *uint64_t v36 = v35;
  *(_OWORD *)(v36 + 8) = 0u;
  *(_OWORD *)(v36 + 24) = 0u;
  v36[40] = 1;
  sub_10000ACE0((uint64_t)v16, &qword_1001A9FA0);
  static AccessibilityChildBehavior.ignore.getter();
  unint64_t v37 = sub_1000CF52C();
  View.accessibilityElement(children:)();
  (*(void (**)(char *, unint64_t))(v90 + 8))(v12, v92);
  sub_10000ACE0((uint64_t)v20, &qword_1001A9FA8);
  uint64_t v88 = a2;
  uint64_t v90 = a3;
  uint64_t v38 = type metadata accessor for EventDetailViewModel();
  uint64_t v128 = sub_1000494A8(v38);
  unint64_t v129 = v39;
  unint64_t v92 = sub_100010B2C();
  uint64_t v40 = Text.init<A>(_:)();
  uint64_t v42 = v41;
  char v44 = v43 & 1;
  uint64_t v128 = v17;
  unint64_t v129 = v37;
  swift_getOpaqueTypeConformance2();
  uint64_t v45 = (uint64_t)v89;
  uint64_t v46 = v91;
  uint64_t v47 = v98;
  View.accessibility(label:)();
  uint64_t v48 = v40;
  uint64_t v49 = a1;
  sub_10000FCC4(v48, v42, v44);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v93 + 8))(v47, v46);
  sub_10000570C(&qword_1001A9CF0);
  uint64_t v50 = swift_allocObject();
  *(_OWORD *)(v50 + 16) = xmmword_100153180;
  uint64_t v128 = sub_100048974(v38, v51);
  unint64_t v129 = v52;
  *(void *)(v50 + 32) = Text.init<A>(_:)();
  *(void *)(v50 + 40) = v53;
  *(unsigned char *)(v50 + 48) = v54 & 1;
  *(void *)(v50 + 56) = v55;
  uint64_t v56 = (uint64_t)v94;
  ModifiedContent<>.accessibility(inputLabels:)();
  swift_bridgeObjectRelease();
  sub_10000ACE0(v45, &qword_1001A9FB8);
  sub_10000A3C4(v56, v99, &qword_1001A9FB8);
  if (sub_10004927C(v38))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v57 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v93 = v58;
    char v94 = (char *)v57;
    char v60 = v59;
    uint64_t v98 = v61;
    uint64_t v95 = static Color.white.getter();
    uint64_t v62 = static Color.black.getter();
    long long v64 = v85;
    uint64_t v63 = v86;
    uint64_t v65 = v87;
    (*(void (**)(char *, uint64_t *, uint64_t))(v86 + 16))(v85, v49, v87);
    unint64_t v66 = (*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80);
    uint64_t v67 = swift_allocObject();
    uint64_t v68 = v90;
    *(void *)(v67 + 16) = v88;
    *(void *)(v67 + 24) = v68;
    (*(void (**)(unint64_t, char *, uint64_t))(v63 + 32))(v67 + v66, v64, v65);
    uint64_t v69 = *v49;
    LODWORD(v66) = static MatchedGeometryProperties.frame.getter();
    static UnitPoint.center.getter();
    uint64_t v71 = v70;
    uint64_t v73 = v72;
    char v74 = static Edge.Set.horizontal.getter();
    EdgeInsets.init(_all:)();
    char v102 = v60 & 1;
    char v100 = 0;
    v105[0] = v94;
    v105[1] = v93;
    char v106 = v60 & 1;
    *(_DWORD *)uint64_t v107 = *(_DWORD *)v104;
    *(_DWORD *)&v107[3] = *(_DWORD *)&v104[3];
    uint64_t v108 = v98;
    uint64_t v109 = v95;
    uint64_t v110 = v62;
    uint64_t v111 = sub_1000CF910;
    uint64_t v112 = v67;
    unint64_t v113 = 0xD000000000000017;
    unint64_t v114 = 0x800000010015EF50;
    uint64_t v115 = v69;
    int v116 = v66;
    uint64_t v117 = v71;
    uint64_t v118 = v73;
    char v119 = 1;
    *(_DWORD *)&v120[3] = *(_DWORD *)&v103[3];
    *(_DWORD *)uint64_t v120 = *(_DWORD *)v103;
    char v121 = v74;
    *(_DWORD *)&v122[3] = *(_DWORD *)&v101[3];
    *(_DWORD *)uint64_t v122 = *(_DWORD *)v101;
    uint64_t v123 = v75;
    uint64_t v124 = v76;
    uint64_t v125 = v77;
    uint64_t v126 = v78;
    char v127 = 0;
    nullsub_1(v105);
  }
  else
  {
    sub_1000CF5CC((uint64_t)v105);
  }
  sub_10000A3C4((uint64_t)v105, (uint64_t)&v128, &qword_1001A9FD8);
  uint64_t v79 = v99;
  uint64_t v80 = v96;
  sub_10000A428(v99, v96, &qword_1001A9FB8);
  sub_10000A3C4((uint64_t)&v128, (uint64_t)v103, &qword_1001A9FD8);
  uint64_t v81 = v97;
  sub_10000A428(v80, v97, &qword_1001A9FB8);
  uint64_t v82 = v81 + *(int *)(sub_10000570C(&qword_1001A9FE0) + 48);
  sub_10000A3C4((uint64_t)v103, (uint64_t)v104, &qword_1001A9FD8);
  sub_10000A3C4((uint64_t)v104, v82, &qword_1001A9FD8);
  sub_1000CF670((uint64_t)v104, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1000CF5EC);
  sub_10000ACE0(v79, &qword_1001A9FB8);
  sub_10000A3C4((uint64_t)v103, (uint64_t)v105, &qword_1001A9FD8);
  sub_1000CF670((uint64_t)v105, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1000CF6E4);
  return sub_10000ACE0(v80, &qword_1001A9FB8);
}

uint64_t sub_1000CC930@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v93 = a2;
  uint64_t v94 = a3;
  uint64_t v79 = a1;
  uint64_t v95 = a4;
  uint64_t v83 = sub_10000570C(&qword_1001A67B8) - 8;
  __chkstk_darwin(v83, v4);
  uint64_t v80 = (uint64_t *)((char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = sub_10000570C(&qword_1001A67C0);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v77 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = sub_10000570C(&qword_1001A67C8) - 8;
  __chkstk_darwin(v78, v9);
  uint64_t v11 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_10000570C(&qword_1001A7078) - 8;
  __chkstk_darwin(v87, v12);
  uint64_t v81 = (uint64_t)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = sub_10000570C(&qword_1001A7080) - 8;
  __chkstk_darwin(v90, v14);
  uint64_t v85 = (uint64_t)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = sub_10000570C(&qword_1001A9FE8) - 8;
  __chkstk_darwin(v88, v16);
  uint64_t v82 = (uint64_t)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = sub_10000570C(&qword_1001A9FF0) - 8;
  __chkstk_darwin(v89, v18);
  uint64_t v84 = (uint64_t)&v77 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = sub_10000570C(&qword_1001A9FF8) - 8;
  uint64_t v21 = __chkstk_darwin(v91, v20);
  uint64_t v86 = (uint64_t)&v77 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v23);
  uint64_t v92 = (uint64_t)&v77 - v24;
  uint64_t v25 = type metadata accessor for EventDetailViewModel();
  uint64_t v102 = sub_100049AA8(v25);
  uint64_t v103 = v26;
  sub_100010B2C();
  uint64_t v27 = Text.init<A>(_:)();
  uint64_t v29 = v28;
  char v31 = v30 & 1;
  static Font.Weight.heavy.getter();
  uint64_t v32 = Text.fontWeight(_:)();
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  char v38 = v37 & 1;
  sub_10000FCC4(v27, v29, v31);
  swift_bridgeObjectRelease();
  uint64_t v39 = enum case for Text.Case.uppercase(_:);
  uint64_t v40 = type metadata accessor for Text.Case();
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = (uint64_t)v77;
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 104))(v77, v39, v40);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v42, 0, 1, v40);
  uint64_t KeyPath = swift_getKeyPath();
  char v44 = v80;
  sub_10000A428(v42, (uint64_t)v80 + *(int *)(v83 + 36), &qword_1001A67C0);
  *char v44 = KeyPath;
  sub_10000A428((uint64_t)v44, (uint64_t)&v11[*(int *)(v78 + 44)], &qword_1001A67B8);
  *(void *)uint64_t v11 = v32;
  *((void *)v11 + 1) = v34;
  v11[16] = v38;
  *((void *)v11 + 3) = v36;
  sub_10000FCD4(v32, v34, v38);
  swift_bridgeObjectRetain();
  sub_10000ACE0((uint64_t)v44, &qword_1001A67B8);
  sub_10000ACE0(v42, &qword_1001A67C0);
  sub_10000FCC4(v32, v34, v38);
  swift_bridgeObjectRelease();
  uint64_t v45 = static Font.subheadline.getter();
  uint64_t v46 = swift_getKeyPath();
  uint64_t v47 = v81;
  sub_10000A428((uint64_t)v11, v81, &qword_1001A67C8);
  uint64_t v48 = (uint64_t *)(v47 + *(int *)(v87 + 44));
  *uint64_t v48 = v46;
  v48[1] = v45;
  sub_10000ACE0((uint64_t)v11, &qword_1001A67C8);
  uint64_t v49 = static Color.white.getter();
  uint64_t v50 = swift_getKeyPath();
  uint64_t v51 = v85;
  sub_10000A428(v47, v85, &qword_1001A7078);
  unint64_t v52 = (uint64_t *)(v51 + *(int *)(v90 + 44));
  uint64_t *v52 = v50;
  v52[1] = v49;
  sub_10000ACE0(v47, &qword_1001A7078);
  uint64_t v53 = v82;
  sub_10000A428(v51, v82, &qword_1001A7080);
  *(void *)(v53 + *(int *)(v88 + 44)) = 0x3FE999999999999ALL;
  sub_10000ACE0(v51, &qword_1001A7080);
  uint64_t v54 = swift_getKeyPath();
  uint64_t v55 = v84;
  sub_10000A428(v53, v84, &qword_1001A9FE8);
  uint64_t v56 = v55 + *(int *)(v89 + 44);
  *(void *)uint64_t v56 = v54;
  *(unsigned char *)(v56 + 8) = 1;
  sub_10000ACE0(v53, &qword_1001A9FE8);
  uint64_t v57 = v79;
  uint64_t v58 = *v79;
  LODWORD(v54) = static MatchedGeometryProperties.frame.getter();
  static UnitPoint.center.getter();
  uint64_t v60 = v59;
  uint64_t v62 = v61;
  uint64_t v63 = v86;
  sub_10000A428(v55, v86, &qword_1001A9FF0);
  uint64_t v64 = v63 + *(int *)(v91 + 44);
  *(void *)uint64_t v64 = 0xD000000000000017;
  *(void *)(v64 + 8) = 0x800000010015EFB0;
  *(void *)(v64 + 16) = v58;
  *(_DWORD *)(v64 + 24) = v54;
  *(void *)(v64 + 32) = v60;
  *(void *)(v64 + 40) = v62;
  *(unsigned char *)(v64 + 48) = 1;
  sub_10000ACE0(v55, &qword_1001A9FF0);
  uint64_t v65 = v92;
  sub_10000A3C4(v63, v92, &qword_1001A9FF8);
  uint64_t v66 = static HorizontalAlignment.center.getter();
  sub_1000CD2A8(v57, (uint64_t)v96);
  *(_OWORD *)&v98[167] = v96[10];
  *(_OWORD *)&v98[183] = v96[11];
  *(_OWORD *)&v98[199] = v96[12];
  *(_OWORD *)&v98[103] = v96[6];
  *(_OWORD *)&v98[119] = v96[7];
  *(_OWORD *)&v98[135] = v96[8];
  *(_OWORD *)&v98[151] = v96[9];
  *(_OWORD *)&v98[39] = v96[2];
  *(_OWORD *)&v98[55] = v96[3];
  *(_OWORD *)&v98[71] = v96[4];
  *(_OWORD *)&v98[87] = v96[5];
  *(_OWORD *)&v98[7] = v96[0];
  char v99 = 0;
  v98[215] = v97;
  *(_OWORD *)&v98[23] = v96[1];
  sub_10000A428(v65, v63, &qword_1001A9FF8);
  uint64_t v67 = v95;
  sub_10000A428(v63, v95, &qword_1001A9FF8);
  uint64_t v68 = (_OWORD *)(v67 + *(int *)(sub_10000570C(&qword_1001AA000) + 48));
  *(void *)&long long v100 = v66;
  *((void *)&v100 + 1) = 0x4014000000000000;
  LOBYTE(v101[0]) = 0;
  *(_OWORD *)((char *)&v101[10] + 1) = *(_OWORD *)&v98[160];
  *(_OWORD *)((char *)&v101[11] + 1) = *(_OWORD *)&v98[176];
  *(_OWORD *)((char *)&v101[12] + 1) = *(_OWORD *)&v98[192];
  *(void *)((char *)&v101[13] + 1) = *(void *)&v98[208];
  *(_OWORD *)((char *)&v101[6] + 1) = *(_OWORD *)&v98[96];
  *(_OWORD *)((char *)&v101[7] + 1) = *(_OWORD *)&v98[112];
  *(_OWORD *)((char *)&v101[8] + 1) = *(_OWORD *)&v98[128];
  *(_OWORD *)((char *)&v101[9] + 1) = *(_OWORD *)&v98[144];
  *(_OWORD *)((char *)&v101[2] + 1) = *(_OWORD *)&v98[32];
  *(_OWORD *)((char *)&v101[3] + 1) = *(_OWORD *)&v98[48];
  *(_OWORD *)((char *)&v101[4] + 1) = *(_OWORD *)&v98[64];
  *(_OWORD *)((char *)&v101[5] + 1) = *(_OWORD *)&v98[80];
  *(_OWORD *)((char *)&v101[1] + 1) = *(_OWORD *)&v98[16];
  *(_OWORD *)((char *)v101 + 1) = *(_OWORD *)v98;
  long long v69 = v101[12];
  v68[12] = v101[11];
  v68[13] = v69;
  *(_OWORD *)((char *)v68 + 217) = *(_OWORD *)((char *)&v101[12] + 9);
  long long v70 = v101[8];
  v68[8] = v101[7];
  v68[9] = v70;
  long long v71 = v101[10];
  v68[10] = v101[9];
  v68[11] = v71;
  long long v72 = v101[4];
  v68[4] = v101[3];
  v68[5] = v72;
  long long v73 = v101[6];
  v68[6] = v101[5];
  v68[7] = v73;
  long long v74 = v101[0];
  *uint64_t v68 = v100;
  v68[1] = v74;
  long long v75 = v101[2];
  v68[2] = v101[1];
  v68[3] = v75;
  sub_1000D03E4((uint64_t)&v100);
  sub_10000ACE0(v65, &qword_1001A9FF8);
  long long v115 = *(_OWORD *)&v98[160];
  long long v116 = *(_OWORD *)&v98[176];
  long long v117 = *(_OWORD *)&v98[192];
  long long v111 = *(_OWORD *)&v98[96];
  long long v112 = *(_OWORD *)&v98[112];
  long long v113 = *(_OWORD *)&v98[128];
  long long v114 = *(_OWORD *)&v98[144];
  long long v107 = *(_OWORD *)&v98[32];
  long long v108 = *(_OWORD *)&v98[48];
  long long v109 = *(_OWORD *)&v98[64];
  long long v110 = *(_OWORD *)&v98[80];
  long long v105 = *(_OWORD *)v98;
  uint64_t v102 = v66;
  uint64_t v103 = 0x4014000000000000;
  char v104 = 0;
  uint64_t v118 = *(void *)&v98[208];
  long long v106 = *(_OWORD *)&v98[16];
  sub_1000D0494((uint64_t)&v102);
  return sub_10000ACE0(v63, &qword_1001A9FF8);
}

uint64_t sub_1000CD2A8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v46 = type metadata accessor for EventDetailViewModel();
  sub_100048974(v46, v3);
  sub_100010B2C();
  uint64_t v4 = Text.init<A>(_:)();
  uint64_t v6 = v5;
  char v8 = v7 & 1;
  static Font.largeTitle.getter();
  uint64_t v9 = Text.font(_:)();
  uint64_t v11 = v10;
  char v13 = v12;
  swift_release();
  sub_10000FCC4(v4, v6, v8);
  swift_bridgeObjectRelease();
  static Font.Weight.heavy.getter();
  uint64_t v14 = Text.fontWeight(_:)();
  uint64_t v16 = v15;
  char v18 = v17 & 1;
  sub_10000FCC4(v9, v11, v13 & 1);
  swift_bridgeObjectRelease();
  static Color.white.getter();
  uint64_t v54 = Text.foregroundColor(_:)();
  uint64_t v55 = v19;
  uint64_t v51 = v20;
  char v22 = v21;
  swift_release();
  sub_10000FCC4(v14, v16, v18);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v50 = *a1;
  int v49 = static MatchedGeometryProperties.frame.getter();
  static UnitPoint.center.getter();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v56 = sub_100048D84(v46);
  uint64_t v27 = Text.init<A>(_:)();
  uint64_t v29 = v28;
  LOBYTE(v11) = v30 & 1;
  static Font.body.getter();
  uint64_t v31 = Text.font(_:)();
  uint64_t v33 = v32;
  char v35 = v34;
  swift_release();
  LOBYTE(v9) = v35 & 1;
  sub_10000FCC4(v27, v29, v11);
  swift_bridgeObjectRelease();
  static Color.white.getter();
  uint64_t v36 = Text.foregroundColor(_:)();
  uint64_t v38 = v37;
  LOBYTE(v29) = v39;
  uint64_t v47 = v40;
  swift_release();
  sub_10000FCC4(v31, v33, v9);
  swift_bridgeObjectRelease();
  uint64_t v41 = swift_getKeyPath();
  uint64_t v53 = *a1;
  int v45 = static MatchedGeometryProperties.frame.getter();
  static UnitPoint.center.getter();
  *(_DWORD *)(a2 + 17) = v56;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)((char *)&v56 + 3);
  *(_DWORD *)(a2 + 41) = *(_DWORD *)v60;
  *(_DWORD *)(a2 + 44) = *(_DWORD *)&v60[3];
  *(_DWORD *)(a2 + 97) = *(_DWORD *)v59;
  *(_DWORD *)(a2 + 100) = *(_DWORD *)&v59[3];
  *(_DWORD *)(a2 + 124) = *(_DWORD *)&v58[3];
  *(_DWORD *)(a2 + 121) = *(_DWORD *)v58;
  *(_DWORD *)(a2 + 156) = *(_DWORD *)&v57[3];
  *(_DWORD *)(a2 + 153) = *(_DWORD *)v57;
  *(void *)a2 = v54;
  *(void *)(a2 + 8) = v51;
  *(unsigned char *)(a2 + 16) = v22 & 1;
  *(void *)(a2 + 24) = v55;
  *(void *)(a2 + 32) = KeyPath;
  *(unsigned char *)(a2 + 40) = 1;
  *(void *)(a2 + 48) = 0xD000000000000016;
  *(void *)(a2 + 56) = 0x800000010015EF90;
  *(void *)(a2 + 64) = v50;
  *(_DWORD *)(a2 + 72) = v49;
  *(void *)(a2 + 80) = v24;
  *(void *)(a2 + 88) = v26;
  *(unsigned char *)(a2 + 96) = 1;
  *(void *)(a2 + 104) = v36;
  *(void *)(a2 + 112) = v38;
  *(unsigned char *)(a2 + 120) = v29 & 1;
  *(void *)(a2 + 128) = v47;
  *(void *)(a2 + 136) = 0x3FE999999999999ALL;
  *(void *)(a2 + 144) = v41;
  *(unsigned char *)(a2 + 152) = 1;
  *(void *)(a2 + 160) = 0xD000000000000019;
  *(void *)(a2 + 168) = 0x800000010015EF70;
  *(void *)(a2 + 176) = v53;
  *(_DWORD *)(a2 + 184) = v45;
  *(void *)(a2 + 192) = v42;
  *(void *)(a2 + 200) = v43;
  *(unsigned char *)(a2 + 208) = 1;
  sub_10000FCD4(v54, v51, v22 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10000FCD4(v36, v38, v29 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10000FCC4(v36, v38, v29 & 1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10000FCC4(v54, v51, v22 & 1);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000CD6F0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v33 = *(void *)(v3 - 8);
  uint64_t v34 = v3;
  __chkstk_darwin(v3, v4);
  uint64_t v31 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for OpenURLAction();
  uint64_t v30 = *(void *)(v32 - 8);
  __chkstk_darwin(v32, v6);
  uint64_t v29 = (uint64_t)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v28 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9, v10);
  char v13 = (char *)&v28 - v12;
  uint64_t v35 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v28 - v15;
  uint64_t v17 = type metadata accessor for EventDetailViewModel();
  if (sub_100049348(v17))
  {
    sub_1000493D8(v17);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v13, 1, AssociatedTypeWitness) == 1) {
      return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v13, v9);
    }
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v16, v13, AssociatedTypeWitness);
    uint64_t v20 = v29;
    sub_1000264EC(v29);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    char v22 = v31;
    (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
    OpenURLAction.callAsFunction(_:)();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v22, v34);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v20, v32);
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
    uint64_t v25 = *(void *)(v1 + *(int *)(a1 + 36));
    if (v25)
    {
      uint64_t v26 = v23;
      uint64_t v27 = v24;
      swift_retain();
      sub_100049F20(v26, v27, v25, v17);
      swift_bridgeObjectRelease();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v16, AssociatedTypeWitness);
    }
LABEL_11:
    type metadata accessor for RemoteViewConfiguration();
    sub_1000D0FD0((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
    return result;
  }
  sub_100049B8C();
  if (!*(void *)(v1 + *(int *)(a1 + 36))) {
    goto LABEL_11;
  }
  uint64_t v19 = swift_retain();
  sub_100049C3C(v19, v17);

  return swift_release();
}

uint64_t sub_1000CDBA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for EventDetailViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  uint64_t v5 = type metadata accessor for EventDetailModule();
  uint64_t v6 = (uint64_t *)(a2 + *(int *)(v5 + 36));
  type metadata accessor for RemoteViewConfiguration();
  sub_1000D0FD0((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  *uint64_t v6 = EnvironmentObject.init()();
  v6[1] = v7;
  char v8 = (uint64_t *)(a2 + *(int *)(v5 + 40));
  uint64_t *v8 = swift_getKeyPath();
  sub_10000570C(&qword_1001A55D8);

  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for EventDetailModule()
{
  return sub_10000B72C();
}

void sub_1000CDCE0()
{
  type metadata accessor for EventDetailViewModel();
  if (v0 <= 0x3F)
  {
    sub_100017E94();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *sub_1000CDDB4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  unint64_t v9 = ((v8 + ((v7 + 8) & ~(unint64_t)v7) + 31) & 0xFFFFFFFFFFFFFFF8) + 39;
  uint64_t v10 = type metadata accessor for OpenURLAction();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = v12 & 0xF8 | 7;
  uint64_t v14 = (v12 & 0xF8) + 23;
  uint64_t v15 = 8;
  if (*(void *)(v11 + 64) > 8uLL) {
    uint64_t v15 = *(void *)(v11 + 64);
  }
  int v16 = (v12 | v7) & 0x100000;
  if ((v13 | v7) != 7 || v16 != 0 || v15 + ((v14 + (v9 & 0xFFFFFFFFFFFFFFF8)) & ~v13) + 1 > 0x18)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    uint64_t v20 = (void *)(v19 + (((v13 | v7) + 16) & ~(v13 | v7)));
LABEL_29:
    swift_retain();
    return v20;
  }
  uint64_t v43 = v15;
  uint64_t v44 = *(void *)(v10 - 8);
  uint64_t v42 = v10;
  char v21 = a2;
  char v22 = a1;
  uint64_t v23 = ~v13;
  *char v22 = *v21;
  unint64_t v24 = ((unint64_t)v22 + v7 + 8) & ~(unint64_t)v7;
  unint64_t v25 = ((unint64_t)v21 + v7 + 8) & ~(unint64_t)v7;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v24, v25, v5);
  unint64_t v26 = (v24 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = (v25 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v26 = *(void *)v27;
  *(void *)(v26 + 8) = *(void *)(v27 + 8);
  *(unsigned char *)(v26 + 16) = *(unsigned char *)(v27 + 16);
  unint64_t v28 = (v24 + v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = (v25 + v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v28 = *(void *)v29;
  *(void *)(v28 + 8) = *(void *)(v29 + 8);
  *(unsigned char *)(v28 + 16) = *(unsigned char *)(v29 + 16);
  *(void *)(v28 + 24) = *(void *)(v29 + 24);
  uint64_t v30 = (void *)(((unint64_t)v22 + v9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v31 = (void *)(((unint64_t)v21 + v9) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v30 = *v31;
  v30[1] = v31[1];
  uint64_t v32 = (void *)(((unint64_t)v30 + v14) & v23);
  uint64_t v33 = (unsigned __int8 *)(((unint64_t)v31 + v14) & v23);
  unsigned int v34 = v33[v43];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v34 < 2)
  {
    uint64_t v36 = v44;
    uint64_t v20 = v22;
LABEL_19:
    if (v34 != 1)
    {
LABEL_28:
      *uint64_t v32 = *(void *)v33;
      *((unsigned char *)v32 + v43) = 0;
      goto LABEL_29;
    }
  }
  else
  {
    if (v43 <= 3) {
      uint64_t v35 = v43;
    }
    else {
      uint64_t v35 = 4;
    }
    uint64_t v36 = v44;
    uint64_t v20 = v22;
    switch(v35)
    {
      case 1:
        int v37 = *v33;
        break;
      case 2:
        int v37 = *(unsigned __int16 *)v33;
        break;
      case 3:
        int v37 = *(unsigned __int16 *)v33 | (v33[2] << 16);
        break;
      case 4:
        int v37 = *(_DWORD *)v33;
        break;
      default:
        goto LABEL_19;
    }
    int v38 = (v37 | ((v34 - 2) << (8 * v43))) + 2;
    int v39 = v37 + 2;
    if (v43 >= 4) {
      int v40 = v39;
    }
    else {
      int v40 = v38;
    }
    if (v40 != 1) {
      goto LABEL_28;
    }
  }
  (*(void (**)(void *, unsigned __int8 *, uint64_t))(v36 + 16))(v32, v33, v42);
  *((unsigned char *)v32 + v43) = 1;
  return v20;
}

uint64_t sub_1000CE108(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v4 = v3 + 8;
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  (*(void (**)(uint64_t))(v3 + 8))((v5 + 8 + a1) & ~v5);
  uint64_t v6 = *(void *)(v4 + 56);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v7 = *(void *)(type metadata accessor for OpenURLAction() - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80) & 0xF8 | 7;
  unint64_t v9 = (unsigned __int8 *)((((a1 + ((v6 + ((v5 + 8) & ~v5) + 31) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)
                          + v8
                          + 16) & ~v8);
  unint64_t v10 = *(void *)(v7 + 64);
  if (v10 <= 8) {
    unint64_t v10 = 8;
  }
  unsigned int v11 = v9[v10];
  unsigned int v12 = v11 - 2;
  if (v11 >= 2)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *v9;
        goto LABEL_12;
      case 2:
        int v14 = *(unsigned __int16 *)v9;
        goto LABEL_12;
      case 3:
        int v14 = *(unsigned __int16 *)v9 | (v9[2] << 16);
        goto LABEL_12;
      case 4:
        int v14 = *(_DWORD *)v9;
LABEL_12:
        int v15 = (v14 | (v12 << (8 * v10))) + 2;
        unsigned int v11 = v14 + 2;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  if (v11 == 1)
  {
    int v16 = *(uint64_t (**)(void))(v7 + 8);
    return v16();
  }
  else
  {
    return swift_release();
  }
}

void *sub_1000CE320(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 16;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 48);
  unint64_t v11 = (v10 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v10 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v11 = *(void *)v12;
  *(void *)(v11 + 8) = *(void *)(v12 + 8);
  *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
  unint64_t v13 = (v10 + v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v10 + v9 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v13 = *(void *)v14;
  *(void *)(v13 + 8) = *(void *)(v14 + 8);
  *(unsigned char *)(v13 + 16) = *(unsigned char *)(v14 + 16);
  *(void *)(v13 + 24) = *(void *)(v14 + 24);
  unint64_t v15 = ((v10 + ((v7 + 8) & ~v7) + 31) & 0xFFFFFFFFFFFFFFF8) + 39;
  int v16 = (void *)(((unint64_t)a1 + v15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (void *)(((unint64_t)a2 + v15) & 0xFFFFFFFFFFFFFFF8);
  *int v16 = *v17;
  v16[1] = v17[1];
  uint64_t v18 = type metadata accessor for OpenURLAction();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(_DWORD *)(v19 + 80) & 0xF8;
  uint64_t v21 = v20 + 23;
  unint64_t v22 = (unint64_t)v16 + v20 + 23;
  unint64_t v23 = ~v20 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v34 = v18;
  uint64_t v35 = (void *)(v22 & v23);
  unint64_t v24 = (unsigned __int8 *)(((unint64_t)v17 + v21) & v23);
  if (*(void *)(v19 + 64) <= 8uLL) {
    uint64_t v25 = 8;
  }
  else {
    uint64_t v25 = *(void *)(*(void *)(v18 - 8) + 64);
  }
  unsigned int v26 = v24[v25];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v26 >= 2)
  {
    if (v25 <= 3) {
      uint64_t v27 = v25;
    }
    else {
      uint64_t v27 = 4;
    }
    switch(v27)
    {
      case 1:
        int v28 = *v24;
        goto LABEL_13;
      case 2:
        int v28 = *(unsigned __int16 *)v24;
        goto LABEL_13;
      case 3:
        int v28 = *(unsigned __int16 *)v24 | (v24[2] << 16);
        goto LABEL_13;
      case 4:
        int v28 = *(_DWORD *)v24;
LABEL_13:
        int v29 = (v28 | ((v26 - 2) << (8 * v25))) + 2;
        unsigned int v30 = v28 + 2;
        if (v25 >= 4) {
          unsigned int v26 = v30;
        }
        else {
          unsigned int v26 = v29;
        }
        break;
      default:
        break;
    }
  }
  if (v26 == 1)
  {
    uint64_t v31 = v35;
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v19 + 16))(v35, v24, v34);
    char v32 = 1;
  }
  else
  {
    uint64_t v31 = v35;
    *uint64_t v35 = *(void *)v24;
    swift_retain();
    char v32 = 0;
  }
  *((unsigned char *)v31 + v25) = v32;
  return a1;
}

void *sub_1000CE5D4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 24;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 24))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 40);
  uint64_t v11 = v10 + v9;
  unint64_t v12 = (v10 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v12 = *(void *)v13;
  swift_retain();
  swift_release();
  *(void *)(v12 + 8) = *(void *)(v13 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
  unint64_t v14 = (v10 + v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v11 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v14 = *(void *)v15;
  *(void *)(v14 + 8) = *(void *)(v15 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
  *(void *)(v14 + 24) = *(void *)(v15 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v16 = ((v10 + ((v7 + 8) & ~v7) + 31) & 0xFFFFFFFFFFFFFFF8) + 39;
  uint64_t v17 = (void *)(((unint64_t)a1 + v16) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = (void *)(((unint64_t)a2 + v16) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v17 = *v18;
  swift_retain();
  swift_release();
  v17[1] = v18[1];
  uint64_t v19 = type metadata accessor for OpenURLAction();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(_DWORD *)(v20 + 80) & 0xF8;
  uint64_t v22 = v21 + 23;
  unint64_t v23 = (unint64_t)v17 + v21 + 23;
  unint64_t v24 = ~v21 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = (unsigned __int8 *)(v23 & v24);
  unint64_t v26 = (unint64_t)v18 + v22;
  uint64_t v27 = (unsigned __int8 *)(v26 & v24);
  if ((v23 & v24) != (v26 & v24))
  {
    uint64_t v28 = v19;
    uint64_t v29 = *(void *)(v19 - 8);
    if (*(void *)(v20 + 64) <= 8uLL) {
      uint64_t v30 = 8;
    }
    else {
      uint64_t v30 = *(void *)(v20 + 64);
    }
    unsigned int v31 = v25[v30];
    unsigned int v32 = v31 - 2;
    if (v31 >= 2)
    {
      if (v30 <= 3) {
        uint64_t v33 = v30;
      }
      else {
        uint64_t v33 = 4;
      }
      switch(v33)
      {
        case 1:
          int v34 = *v25;
          goto LABEL_14;
        case 2:
          int v34 = *(unsigned __int16 *)v25;
          goto LABEL_14;
        case 3:
          int v34 = *(unsigned __int16 *)v25 | (v25[2] << 16);
          goto LABEL_14;
        case 4:
          int v34 = *(_DWORD *)v25;
LABEL_14:
          int v35 = (v34 | (v32 << (8 * v30))) + 2;
          unsigned int v31 = v34 + 2;
          if (v30 < 4) {
            unsigned int v31 = v35;
          }
          break;
        default:
          break;
      }
    }
    if (v31 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v29 + 8))(v25, v19);
    }
    else {
      swift_release();
    }
    unsigned int v36 = v27[v30];
    unsigned int v37 = v36 - 2;
    if (v36 >= 2)
    {
      if (v30 <= 3) {
        uint64_t v38 = v30;
      }
      else {
        uint64_t v38 = 4;
      }
      switch(v38)
      {
        case 1:
          int v39 = *v27;
          goto LABEL_28;
        case 2:
          int v39 = *(unsigned __int16 *)v27;
          goto LABEL_28;
        case 3:
          int v39 = *(unsigned __int16 *)v27 | (v27[2] << 16);
          goto LABEL_28;
        case 4:
          int v39 = *(_DWORD *)v27;
LABEL_28:
          int v40 = (v39 | (v37 << (8 * v30))) + 2;
          unsigned int v36 = v39 + 2;
          if (v30 < 4) {
            unsigned int v36 = v40;
          }
          break;
        default:
          break;
      }
    }
    if (v36 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v29 + 16))(v25, v27, v28);
      v25[v30] = 1;
    }
    else
    {
      *(void *)uint64_t v25 = *(void *)v27;
      v25[v30] = 0;
      swift_retain();
    }
  }
  return a1;
}

void *sub_1000CE954(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 32;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 32);
  unint64_t v11 = (v10 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v10 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v13 = *(_OWORD *)v12;
  *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
  *(_OWORD *)unint64_t v11 = v13;
  unint64_t v14 = (_OWORD *)((v10 + v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = (_OWORD *)((v10 + v9 + 31) & 0xFFFFFFFFFFFFFFF8);
  long long v16 = v15[1];
  *unint64_t v14 = *v15;
  v14[1] = v16;
  unint64_t v17 = ((v10 + ((v7 + 8) & ~v7) + 31) & 0xFFFFFFFFFFFFFFF8) + 39;
  uint64_t v18 = (_OWORD *)(((unint64_t)a1 + v17) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (_OWORD *)(((unint64_t)a2 + v17) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v18 = *v19;
  uint64_t v20 = *(void *)(type metadata accessor for OpenURLAction() - 8);
  uint64_t v21 = *(_DWORD *)(v20 + 80) & 0xF8;
  uint64_t v22 = v21 + 23;
  unint64_t v23 = (unint64_t)v18 + v21 + 23;
  unint64_t v24 = ~v21 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = (void *)(v23 & v24);
  unint64_t v26 = (unsigned __int8 *)(((unint64_t)v19 + v22) & v24);
  if (*(void *)(v20 + 64) <= 8uLL) {
    uint64_t v27 = 8;
  }
  else {
    uint64_t v27 = *(void *)(v20 + 64);
  }
  unsigned int v28 = v26[v27];
  unsigned int v29 = v28 - 2;
  if (v28 >= 2)
  {
    if (v27 <= 3) {
      uint64_t v30 = v27;
    }
    else {
      uint64_t v30 = 4;
    }
    switch(v30)
    {
      case 1:
        int v31 = *v26;
        goto LABEL_13;
      case 2:
        int v31 = *(unsigned __int16 *)v26;
        goto LABEL_13;
      case 3:
        int v31 = *(unsigned __int16 *)(((unint64_t)v19 + v22) & v24) | (*(unsigned __int8 *)((((unint64_t)v19
                                                                                                 + v22) & v24)
                                                                                               + 2) << 16);
        goto LABEL_13;
      case 4:
        int v31 = *(_DWORD *)v26;
LABEL_13:
        int v32 = (v31 | (v29 << (8 * v27))) + 2;
        unsigned int v28 = v31 + 2;
        if (v27 < 4) {
          unsigned int v28 = v32;
        }
        break;
      default:
        break;
    }
  }
  if (v28 == 1)
  {
    (*(void (**)(void *))(v20 + 32))(v25);
    char v33 = 1;
  }
  else
  {
    char v33 = 0;
    *uint64_t v25 = *(void *)v26;
  }
  *((unsigned char *)v25 + v27) = v33;
  return a1;
}

void *sub_1000CEB98(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 40;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 24);
  uint64_t v11 = v10 + v8;
  uint64_t v12 = v10 + v9;
  unint64_t v13 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v13 = *(void *)v14;
  swift_release();
  *(void *)(v13 + 8) = *(void *)(v14 + 8);
  swift_release();
  *(unsigned char *)(v13 + 16) = *(unsigned char *)(v14 + 16);
  unint64_t v15 = (v11 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v12 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v15 = *(void *)v16;
  *(void *)(v15 + 8) = *(void *)(v16 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
  *(void *)(v15 + 24) = *(void *)(v16 + 24);
  swift_bridgeObjectRelease();
  unint64_t v17 = ((v10 + ((v7 + 8) & ~v7) + 31) & 0xFFFFFFFFFFFFFFF8) + 39;
  uint64_t v18 = (void *)(((unint64_t)a1 + v17) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (void *)(((unint64_t)a2 + v17) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v18 = *v19;
  swift_release();
  v18[1] = v19[1];
  uint64_t v20 = type metadata accessor for OpenURLAction();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(_DWORD *)(v21 + 80) & 0xF8;
  uint64_t v23 = v22 + 23;
  unint64_t v24 = (unint64_t)v18 + v22 + 23;
  unint64_t v25 = ~v22 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = (unsigned __int8 *)(v24 & v25);
  unint64_t v27 = (unint64_t)v19 + v23;
  unsigned int v28 = (unsigned __int8 *)(v27 & v25);
  if ((v24 & v25) != (v27 & v25))
  {
    uint64_t v29 = v20;
    uint64_t v30 = *(void *)(v20 - 8);
    if (*(void *)(v21 + 64) <= 8uLL) {
      uint64_t v31 = 8;
    }
    else {
      uint64_t v31 = *(void *)(v21 + 64);
    }
    unsigned int v32 = v26[v31];
    unsigned int v33 = v32 - 2;
    if (v32 >= 2)
    {
      if (v31 <= 3) {
        uint64_t v34 = v31;
      }
      else {
        uint64_t v34 = 4;
      }
      switch(v34)
      {
        case 1:
          int v35 = *v26;
          goto LABEL_14;
        case 2:
          int v35 = *(unsigned __int16 *)v26;
          goto LABEL_14;
        case 3:
          int v35 = *(unsigned __int16 *)v26 | (v26[2] << 16);
          goto LABEL_14;
        case 4:
          int v35 = *(_DWORD *)v26;
LABEL_14:
          int v36 = (v35 | (v33 << (8 * v31))) + 2;
          unsigned int v32 = v35 + 2;
          if (v31 < 4) {
            unsigned int v32 = v36;
          }
          break;
        default:
          break;
      }
    }
    if (v32 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v30 + 8))(v26, v20);
    }
    else {
      swift_release();
    }
    unsigned int v37 = v28[v31];
    unsigned int v38 = v37 - 2;
    if (v37 >= 2)
    {
      if (v31 <= 3) {
        uint64_t v39 = v31;
      }
      else {
        uint64_t v39 = 4;
      }
      switch(v39)
      {
        case 1:
          int v40 = *v28;
          goto LABEL_28;
        case 2:
          int v40 = *(unsigned __int16 *)v28;
          goto LABEL_28;
        case 3:
          int v40 = *(unsigned __int16 *)v28 | (v28[2] << 16);
          goto LABEL_28;
        case 4:
          int v40 = *(_DWORD *)v28;
LABEL_28:
          int v41 = (v40 | (v38 << (8 * v31))) + 2;
          unsigned int v37 = v40 + 2;
          if (v31 < 4) {
            unsigned int v37 = v41;
          }
          break;
        default:
          break;
      }
    }
    if (v37 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v30 + 32))(v26, v28, v29);
      char v42 = 1;
    }
    else
    {
      char v42 = 0;
      *(void *)unint64_t v26 = *(void *)v28;
    }
    v26[v31] = v42;
  }
  return a1;
}

uint64_t sub_1000CEEEC(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(type metadata accessor for OpenURLAction() - 8);
  if (*(void *)(v9 + 64) <= 8uLL) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = *(void *)(v9 + 64);
  }
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = *(void *)(v6 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v8) {
    goto LABEL_26;
  }
  uint64_t v13 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  unint64_t v14 = v10
      + ((v13 + ((((v12 + ((v11 + 8) & ~v11) + 31) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v13)
      + 1;
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v18 = ((a2 - v8 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v18))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v18 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v18 < 2)
    {
LABEL_26:
      uint64_t v20 = ((unint64_t)a1 + v11 + 8) & ~v11;
      if (v7 < 0x7FFFFFFF)
      {
        unint64_t v22 = *(void *)(((v12 + v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
        if (v22 >= 0xFFFFFFFF) {
          LODWORD(v22) = -1;
        }
        return (v22 + 1);
      }
      else
      {
        uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
        return v21(v20, v7, v5);
      }
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_26;
  }
LABEL_18:
  int v19 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v19 = 0;
  }
  if (v14)
  {
    if (v14 > 3) {
      LODWORD(v14) = 4;
    }
    switch((int)v14)
    {
      case 2:
        LODWORD(v14) = *a1;
        break;
      case 3:
        LODWORD(v14) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v14) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v14) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v14 | v19) + 1;
}

void sub_1000CF194(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v25 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(void *)(type metadata accessor for OpenURLAction() - 8);
  if (*(void *)(v11 + 64) <= 8uLL) {
    uint64_t v12 = 8;
  }
  else {
    uint64_t v12 = *(void *)(v11 + 64);
  }
  uint64_t v13 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v14 = *(void *)(v8 + 64);
  uint64_t v15 = *(_DWORD *)(v11 + 80) & 0xF8 | 7;
  size_t v16 = v12
      + ((v15 + ((((v14 + ((v13 + 8) & ~v13) + 31) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v15)
      + 1;
  if (a3 <= v10)
  {
    int v17 = 0;
  }
  else if (v16 <= 3)
  {
    unsigned int v20 = ((a3 - v10 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
    if (HIWORD(v20))
    {
      int v17 = 4;
    }
    else if (v20 >= 0x100)
    {
      int v17 = 2;
    }
    else
    {
      int v17 = v20 > 1;
    }
  }
  else
  {
    int v17 = 1;
  }
  if (v10 < a2)
  {
    unsigned int v18 = ~v10 + a2;
    if (v16 < 4)
    {
      int v19 = (v18 >> (8 * v16)) + 1;
      if (v16)
      {
        int v21 = v18 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v16 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v16] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v16] = v19;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v16] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x1000CF4BCLL);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        uint64_t v22 = (unint64_t)&a1[v13 + 8] & ~v13;
        if (v9 < 0x7FFFFFFF)
        {
          unint64_t v24 = (v14 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
          if ((a2 & 0x80000000) != 0)
          {
            *(unsigned char *)(v24 + 16) = 0;
            *(void *)unint64_t v24 = a2 ^ 0x80000000;
            *(void *)(v24 + 8) = 0;
          }
          else
          {
            *(void *)(v24 + 8) = (a2 - 1);
          }
        }
        else
        {
          uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56);
          v23(v22, a2, v9, v7);
        }
      }
      return;
  }
}

uint64_t sub_1000CF4E4()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1000CF52C()
{
  unint64_t result = qword_1001A9FC8;
  if (!qword_1001A9FC8)
  {
    sub_100004A58(&qword_1001A9FA8);
    sub_10000A780(&qword_1001A9FD0, &qword_1001A9FA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A9FC8);
  }
  return result;
}

double sub_1000CF5CC(uint64_t a1)
{
  *(unsigned char *)(a1 + 160) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_1000CF5EC(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_10000FCD4(result, a2, a3 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000CF670(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 160);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    v4);
  return a1;
}

uint64_t sub_1000CF6E4(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_10000FCC4(result, a2, a3 & 1);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000CF768()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)(type metadata accessor for EventDetailModule() - 8);
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80));
  uint64_t v4 = type metadata accessor for EventDetailViewModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3 + *(int *)(v4 + 36), v1);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v5 = v3 + v2[12];
  sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for OpenURLAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_1000CF910()
{
  uint64_t v0 = type metadata accessor for EventDetailModule();
  return sub_1000CD6F0(v0);
}

uint64_t sub_1000CF974@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v68 = a2;
  uint64_t v74 = a1;
  uint64_t v78 = a3;
  uint64_t v76 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v76, v3);
  uint64_t v77 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ButtonStyleConfiguration.Label();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000570C(&qword_1001AA060);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_10000570C(&qword_1001AA068);
  __chkstk_darwin(v65, v15);
  int v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_10000570C(&qword_1001AA070);
  __chkstk_darwin(v66, v18);
  unsigned int v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_10000570C(&qword_1001AA078);
  __chkstk_darwin(v67, v21);
  uint64_t v23 = (char *)&v63 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_10000570C(&qword_1001AA080);
  __chkstk_darwin(v71, v24);
  uint64_t v64 = (uint64_t)&v63 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000570C(&qword_1001AA088);
  uint64_t v72 = *(void *)(v26 - 8);
  uint64_t v73 = v26;
  __chkstk_darwin(v26, v27);
  long long v70 = (char *)&v63 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_10000570C(&qword_1001AA090);
  __chkstk_darwin(v69, v29);
  long long v75 = (char *)&v63 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  ButtonStyleConfiguration.label.getter();
  char v31 = static Edge.Set.all.getter();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v14, v9, v5);
  unsigned int v32 = &v14[*(int *)(v11 + 44)];
  *unsigned int v32 = v31;
  *(_OWORD *)(v32 + 8) = 0u;
  *(_OWORD *)(v32 + 24) = 0u;
  v32[40] = 1;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  if (ButtonStyleConfiguration.isPressed.getter())
  {
    uint64_t v33 = Color.opacity(_:)();
  }
  else
  {
    uint64_t v33 = v68;
    swift_retain();
  }
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000A428((uint64_t)v14, (uint64_t)v17, &qword_1001AA060);
  int v35 = (uint64_t *)&v17[*(int *)(v65 + 36)];
  *int v35 = KeyPath;
  v35[1] = v33;
  sub_10000ACE0((uint64_t)v14, &qword_1001AA060);
  if (ButtonStyleConfiguration.isPressed.getter())
  {
    uint64_t v36 = Color.opacity(_:)();
  }
  else
  {
    uint64_t v36 = v74;
    swift_retain();
  }
  char v37 = static Edge.Set.all.getter();
  sub_10000A428((uint64_t)v17, (uint64_t)v20, &qword_1001AA068);
  unsigned int v38 = &v20[*(int *)(v66 + 36)];
  *(void *)unsigned int v38 = v36;
  v38[8] = v37;
  sub_10000ACE0((uint64_t)v17, &qword_1001AA068);
  uint64_t v39 = v77;
  int v40 = &v77[*(int *)(v76 + 20)];
  uint64_t v41 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v42 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v42 - 8) + 104))(v40, v41, v42);
  __asm { FMOV            V0.2D, #10.0 }
  *uint64_t v39 = _Q0;
  uint64_t v48 = (uint64_t)&v23[*(int *)(v67 + 36)];
  sub_1000243EC((uint64_t)v39, v48);
  *(_WORD *)(v48 + *(int *)(sub_10000570C(&qword_1001A62A8) + 36)) = 256;
  sub_10000A428((uint64_t)v20, (uint64_t)v23, &qword_1001AA070);
  sub_100024450((uint64_t)v39);
  sub_10000ACE0((uint64_t)v20, &qword_1001AA070);
  uint64_t v49 = static Font.headline.getter();
  uint64_t v50 = swift_getKeyPath();
  uint64_t v51 = v64;
  sub_10000A428((uint64_t)v23, v64, &qword_1001AA078);
  unint64_t v52 = (uint64_t *)(v51 + *(int *)(v71 + 36));
  uint64_t *v52 = v50;
  v52[1] = v49;
  sub_10000ACE0((uint64_t)v23, &qword_1001AA078);
  static Font.Weight.bold.getter();
  sub_1000D0CA4();
  uint64_t v53 = v70;
  View.fontWeight(_:)();
  sub_10000ACE0(v51, &qword_1001AA080);
  uint64_t v54 = swift_getKeyPath();
  uint64_t v56 = v72;
  uint64_t v55 = v73;
  uint64_t v57 = (uint64_t)v75;
  (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v75, v53, v73);
  uint64_t v58 = v57 + *(int *)(v69 + 36);
  *(void *)uint64_t v58 = v54;
  *(unsigned char *)(v58 + 8) = 1;
  (*(void (**)(char *, uint64_t))(v56 + 8))(v53, v55);
  static Color.black.getter();
  uint64_t v59 = Color.opacity(_:)();
  swift_release();
  uint64_t v60 = v78;
  sub_10000A428(v57, v78, &qword_1001AA090);
  uint64_t v61 = v60 + *(int *)(sub_10000570C(&qword_1001AA0C0) + 36);
  *(void *)uint64_t v61 = v59;
  *(_OWORD *)(v61 + 8) = xmmword_100153F70;
  *(void *)(v61 + 24) = 0x4010000000000000;
  return sub_10000ACE0(v57, &qword_1001AA090);
}

uint64_t sub_1000D0060@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CF974(*v1, v1[1], a1);
}

__n128 sub_1000D0068@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = *(unsigned char *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  sub_10000FCD4(*(void *)a1, v4, v5);
  swift_bridgeObjectRetain();
  uint64_t v7 = static Alignment.center.getter();
  sub_100123F48(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v13, 0.0, 1, 0.0, 1, v7, v8, v3, v4, v5, v6);
  sub_10000FCC4(v3, v4, v5);
  swift_bridgeObjectRelease();
  long long v9 = v13[7];
  *(_OWORD *)(a2 + 96) = v13[6];
  *(_OWORD *)(a2 + 112) = v9;
  *(_OWORD *)(a2 + 128) = v13[8];
  long long v10 = v13[3];
  *(_OWORD *)(a2 + 32) = v13[2];
  *(_OWORD *)(a2 + 48) = v10;
  long long v11 = v13[5];
  *(_OWORD *)(a2 + 64) = v13[4];
  *(_OWORD *)(a2 + 80) = v11;
  __n128 result = (__n128)v13[1];
  *(_OWORD *)a2 = v13[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t sub_1000D0154()
{
  uint64_t v1 = sub_10000570C(&qword_1001AA048);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  char v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  long long v6 = v0[1];
  v12[0] = *v0;
  v12[1] = v6;
  long long v7 = v0[3];
  long long v13 = v0[2];
  long long v14 = v7;
  long long v10 = v12;
  swift_retain();
  sub_10000570C(&qword_1001A8978);
  sub_10009E228();
  Button.init(action:label:)();
  long long v11 = v13;
  sub_10000A780(&qword_1001AA050, &qword_1001AA048);
  sub_1000D0A30();
  View.buttonStyle<A>(_:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v2 + 8))(v5, v1);
}

uint64_t sub_1000D02EC()
{
  return EnvironmentValues.textCase.getter();
}

uint64_t sub_1000D0310()
{
  return EnvironmentValues.textCase.getter();
}

uint64_t sub_1000D0334(uint64_t a1)
{
  uint64_t v2 = sub_10000570C(&qword_1001A67C0);
  __chkstk_darwin(v2 - 8, v3);
  sub_10000A428(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_1001A67C0);
  return EnvironmentValues.textCase.setter();
}

uint64_t sub_1000D03E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 128);
  uint64_t v3 = *(void *)(a1 + 136);
  char v4 = *(unsigned char *)(a1 + 144);
  sub_10000FCD4(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10000FCD4(v2, v3, v4);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000D0494(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 128);
  uint64_t v3 = *(void *)(a1 + 136);
  char v4 = *(unsigned char *)(a1 + 144);
  sub_10000FCC4(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10000FCC4(v2, v3, v4);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t destroy for LargeButton(uint64_t a1)
{
  sub_10000FCC4(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for LargeButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_10000FCD4(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LargeButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_10000FCD4(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  sub_10000FCC4(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  uint64_t v10 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v10;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for LargeButton(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  sub_10000FCC4(v5, v6, v7);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  swift_release();
  uint64_t v8 = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = v8;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for LargeButton(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LargeButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LargeButton()
{
  return &type metadata for LargeButton;
}

uint64_t sub_1000D0828()
{
  return sub_1000D08CC(&qword_1001AA008, &qword_1001AA010, (void (*)(void))sub_1000D086C);
}

uint64_t sub_1000D086C()
{
  return sub_1000D08CC(&qword_1001AA018, &qword_1001A9F88, (void (*)(void))sub_1000D089C);
}

uint64_t sub_1000D089C()
{
  return sub_1000D08CC(&qword_1001AA020, &qword_1001A9F80, (void (*)(void))sub_1000D0948);
}

uint64_t sub_1000D08CC(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000D0948()
{
  unint64_t result = qword_1001AA028;
  if (!qword_1001AA028)
  {
    sub_100004A58(&qword_1001A9F78);
    sub_10000A780(&qword_1001AA030, &qword_1001A9F70);
    sub_10000A780(&qword_1001AA038, &qword_1001AA040);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA028);
  }
  return result;
}

uint64_t sub_1000D0A0C()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_1000D0A28@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = sub_1000D0068(*(void *)(v1 + 16), a1).n128_u64[0];
  return result;
}

unint64_t sub_1000D0A30()
{
  unint64_t result = qword_1001AA058;
  if (!qword_1001AA058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA058);
  }
  return result;
}

void *sub_1000D0A88(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for LargeButton.LargeButtonStyle(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for LargeButton.LargeButtonStyle(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for LargeButton.LargeButtonStyle(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LargeButton.LargeButtonStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LargeButton.LargeButtonStyle()
{
  return &type metadata for LargeButton.LargeButtonStyle;
}

uint64_t sub_1000D0BF4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000D0C88()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1000D0CA4()
{
  unint64_t result = qword_1001AA098;
  if (!qword_1001AA098)
  {
    sub_100004A58(&qword_1001AA080);
    sub_1000D0D44();
    sub_10000A780(&qword_1001A6280, &qword_1001A6288);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA098);
  }
  return result;
}

unint64_t sub_1000D0D44()
{
  unint64_t result = qword_1001AA0A0;
  if (!qword_1001AA0A0)
  {
    sub_100004A58(&qword_1001AA078);
    sub_1000D0DE4();
    sub_10000A780(&qword_1001A62A0, &qword_1001A62A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA0A0);
  }
  return result;
}

unint64_t sub_1000D0DE4()
{
  unint64_t result = qword_1001AA0A8;
  if (!qword_1001AA0A8)
  {
    sub_100004A58(&qword_1001AA070);
    sub_1000D0E84();
    sub_10000A780(&qword_1001A6290, &qword_1001A6298);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA0A8);
  }
  return result;
}

unint64_t sub_1000D0E84()
{
  unint64_t result = qword_1001AA0B0;
  if (!qword_1001AA0B0)
  {
    sub_100004A58(&qword_1001AA068);
    sub_1000D0F24();
    sub_10000A780(&qword_1001A68C0, &qword_1001A68C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA0B0);
  }
  return result;
}

unint64_t sub_1000D0F24()
{
  unint64_t result = qword_1001AA0B8;
  if (!qword_1001AA0B8)
  {
    sub_100004A58(&qword_1001AA060);
    sub_1000D0FD0(&qword_1001A8730, (void (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA0B8);
  }
  return result;
}

uint64_t sub_1000D0FD0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000D1018()
{
  return sub_1000D08CC(&qword_1001AA0C8, &qword_1001AA0C0, (void (*)(void))sub_1000D105C);
}

unint64_t sub_1000D105C()
{
  unint64_t result = qword_1001AA0D0;
  if (!qword_1001AA0D0)
  {
    sub_100004A58(&qword_1001AA090);
    sub_100004A58(&qword_1001AA080);
    sub_1000D0CA4();
    swift_getOpaqueTypeConformance2();
    sub_10000A780(&qword_1001AA0D8, &qword_1001AA0E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA0D0);
  }
  return result;
}

unint64_t sub_1000D1130(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x747369747261;
      break;
    case 2:
      unint64_t result = 0x65756E6576;
      break;
    case 3:
      return result;
    case 4:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      unint64_t result = 0x746E657665;
      break;
  }
  return result;
}

uint64_t sub_1000D11D8(char a1)
{
  if (a1) {
    return 1701667182;
  }
  else {
    return 25705;
  }
}

uint64_t sub_1000D11FC(char a1)
{
  if (a1) {
    return 0x6449707061;
  }
  else {
    return 0x7972746E756F63;
  }
}

uint64_t sub_1000D1230(char a1)
{
  if (a1) {
    return 0x65756C6176;
  }
  else {
    return 0x6574656D61726170;
  }
}

uint64_t sub_1000D1268(unsigned __int8 *a1, char *a2)
{
  return sub_10013770C(*a1, *a2);
}

Swift::Int sub_1000D1274()
{
  return sub_10005B8D8();
}

uint64_t sub_1000D127C()
{
  return sub_10005BECC();
}

Swift::Int sub_1000D1284()
{
  return sub_10005BFA8();
}

unint64_t sub_1000D128C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000D26D8(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000D12BC@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1000D1130(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

BOOL sub_1000D12E8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1000D1300()
{
  return sub_1000D11D8(*v0);
}

uint64_t sub_1000D1308@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000D2724(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000D1330(uint64_t a1)
{
  unint64_t v2 = sub_1000D2C94();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D136C(uint64_t a1)
{
  unint64_t v2 = sub_1000D2C94();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D13A8(char *a1, char *a2)
{
  return sub_10013766C(*a1, *a2);
}

Swift::Int sub_1000D13B4()
{
  return sub_10005B9D4();
}

uint64_t sub_1000D13BC()
{
  return sub_10005BE64();
}

Swift::Int sub_1000D13C4()
{
  return sub_10005C0A0();
}

uint64_t sub_1000D13CC@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100195018, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

uint64_t sub_1000D142C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000D11FC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000D1458()
{
  return sub_1000D1230(*v0);
}

uint64_t sub_1000D1460@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000D27E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000D1488(uint64_t a1)
{
  unint64_t v2 = sub_1000D2FA4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D14C4(uint64_t a1)
{
  unint64_t v2 = sub_1000D2FA4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D1500()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v3 = v1;
  if (v2 == 1)
  {
    uint64_t v4 = v0[8];
    unint64_t v5 = v0[9];
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_10005D6E8(v4, v5);
    uint64_t v7 = v6;
    swift_bridgeObjectRelease();
    uint64_t v8 = v0[10];
    uint64_t v9 = v0[11];
    v0[10] = v3;
    v0[11] = v7;
    swift_bridgeObjectRetain();
    sub_1000D2504(v8, v9);
  }
  sub_1000D30F4(v1, v2);
  return v3;
}

unint64_t sub_1000D15A0(char a1)
{
  unint64_t result = 0xD000000000000019;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6574497972657571;
      break;
    case 2:
      unint64_t result = 0x7470697263736564;
      break;
    case 3:
      return result;
    default:
      unint64_t result = 0x65636976726573;
      break;
  }
  return result;
}

unint64_t sub_1000D1644()
{
  return sub_1000D15A0(*v0);
}

uint64_t sub_1000D164C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000D28D4(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000D1674(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1000D1680(uint64_t a1)
{
  unint64_t v2 = sub_1000D24B0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D16BC(uint64_t a1)
{
  unint64_t v2 = sub_1000D24B0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D16F8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000D2504(*(void *)(v0 + 80), *(void *)(v0 + 88));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RemoteViewConfiguration()
{
  return self;
}

uint64_t destroy for RemoteViewConfiguration.QueryItem()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s16EventViewService23RemoteViewConfigurationC9QueryItemVwCP_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RemoteViewConfiguration.QueryItem(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for RemoteViewConfiguration.QueryItem(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoteViewConfiguration.QueryItem(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RemoteViewConfiguration.QueryItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteViewConfiguration.QueryItem()
{
  return &type metadata for RemoteViewConfiguration.QueryItem;
}

uint64_t getEnumTagSinglePayload for RemoteViewConfiguration.Service(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RemoteViewConfiguration.Service(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteViewConfiguration.Service()
{
  return &type metadata for RemoteViewConfiguration.Service;
}

uint64_t sub_1000D1970(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000570C(&qword_1001AA1D8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AC9C(a1, a1[3]);
  sub_1000D24B0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v10 = *(void *)(v3 + 24);
  char v11 = *(unsigned char *)(v3 + 32);
  uint64_t v14 = *(void *)(v3 + 16);
  uint64_t v15 = v10;
  char v16 = v11;
  HIBYTE(v13) = 0;
  sub_1000D25C0();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  uint64_t v14 = *(void *)(v3 + 40);
  HIBYTE(v13) = 1;
  sub_10000570C(&qword_1001AA1C0);
  sub_1000D2614(&qword_1001AA1E8, (void (*)(void))sub_1000D2684);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v14) = 2;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v14) = 3;
  swift_bridgeObjectRetain();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return swift_bridgeObjectRelease();
}

uint64_t *sub_1000D1BC8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v17 = *v1;
  uint64_t v5 = sub_10000570C(&qword_1001AA1A8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[8] = 0;
  v1[9] = 0;
  v1[10] = 0;
  v1[11] = 1;
  sub_10000AC9C(a1, a1[3]);
  sub_1000D24B0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    swift_bridgeObjectRelease();
    sub_1000D2504(v1[10], v1[11]);
    swift_deallocPartialClassInstance();
  }
  else
  {
    char v21 = 0;
    sub_1000D2518();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v10 = v19;
    char v11 = v20;
    v1[2] = v18;
    v1[3] = v10;
    *((unsigned char *)v1 + 32) = v11;
    sub_10000570C(&qword_1001AA1C0);
    char v21 = 1;
    sub_1000D2614(&qword_1001AA1C8, (void (*)(void))sub_1000D256C);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v1[5] = v18;
    LOBYTE(v18) = 2;
    v1[6] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v1[7] = v13;
    LOBYTE(v18) = 3;
    uint64_t v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v16 = v15;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v3[8] = v14;
    v3[9] = v16;
    swift_bridgeObjectRelease();
  }
  sub_100007584((uint64_t)a1);
  return v3;
}

uint64_t sub_1000D1F10(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  uint64_t v6 = sub_10000570C(&qword_1001AA210);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AC9C(a1, a1[3]);
  sub_1000D2C94();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    char v15 = v13;
    char v14 = 1;
    sub_1000D2D3C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1000D2098(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  v13[1] = a4;
  char v6 = a2 & 1;
  uint64_t v7 = sub_10000570C(&qword_1001AA240);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  char v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AC9C(a1, a1[3]);
  sub_1000D2FA4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v16 = v6;
  char v15 = 0;
  sub_1000D304C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    char v14 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t *sub_1000D2220@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = swift_allocObject();
  uint64_t result = sub_1000D1BC8(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1000D2278(void *a1)
{
  return sub_1000D1970(a1);
}

uint64_t sub_1000D229C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24);
  *a1 = *(void *)(*(void *)v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000D22AC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000D2A8C(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1000D22DC(void *a1)
{
  return sub_1000D1F10(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_1000D22FC()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000D235C()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1000D23AC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000D2DE4(a1);
  if (!v2)
  {
    *(unsigned char *)a2 = result & 1;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1000D23E0(void *a1)
{
  return sub_1000D2098(a1, *(unsigned char *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16));
}

uint64_t sub_1000D2400()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000D2460()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t sub_1000D24B0()
{
  unint64_t result = qword_1001AA1B0;
  if (!qword_1001AA1B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA1B0);
  }
  return result;
}

uint64_t sub_1000D2504(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1000D2518()
{
  unint64_t result = qword_1001AA1B8;
  if (!qword_1001AA1B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA1B8);
  }
  return result;
}

unint64_t sub_1000D256C()
{
  unint64_t result = qword_1001AA1D0;
  if (!qword_1001AA1D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA1D0);
  }
  return result;
}

unint64_t sub_1000D25C0()
{
  unint64_t result = qword_1001AA1E0;
  if (!qword_1001AA1E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA1E0);
  }
  return result;
}

uint64_t sub_1000D2614(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(&qword_1001AA1C0);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000D2684()
{
  unint64_t result = qword_1001AA1F0;
  if (!qword_1001AA1F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA1F0);
  }
  return result;
}

unint64_t sub_1000D26D8(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100194F80, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000D2724(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000D27E8(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x6574656D61726170 && a2 == 0xE900000000000072;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000D28D4(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x65636976726573 && a2 == 0xE700000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574497972657571 && a2 == 0xEA0000000000736DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000010015F020)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1000D2A8C(void *a1)
{
  uint64_t v3 = sub_10000570C(&qword_1001AA1F8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = a1[4];
  sub_10000AC9C(a1, a1[3]);
  sub_1000D2C94();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100007584((uint64_t)a1);
  }
  else
  {
    v10[15] = 0;
    uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)();
    v10[13] = 1;
    sub_1000D2CE8();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
    sub_100007584((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v8;
}

unint64_t sub_1000D2C94()
{
  unint64_t result = qword_1001AA200;
  if (!qword_1001AA200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA200);
  }
  return result;
}

unint64_t sub_1000D2CE8()
{
  unint64_t result = qword_1001AA208;
  if (!qword_1001AA208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA208);
  }
  return result;
}

unint64_t sub_1000D2D3C()
{
  unint64_t result = qword_1001AA218;
  if (!qword_1001AA218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA218);
  }
  return result;
}

unint64_t sub_1000D2D90()
{
  unint64_t result = qword_1001AA220;
  if (!qword_1001AA220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA220);
  }
  return result;
}

uint64_t sub_1000D2DE4(void *a1)
{
  uint64_t v3 = sub_10000570C(&qword_1001AA228);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = a1[3];
  sub_10000AC9C(a1, v8);
  sub_1000D2FA4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v10[14] = 0;
    sub_1000D2FF8();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v8 = v10[15];
    v10[13] = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
  }
  sub_100007584((uint64_t)a1);
  return v8;
}

unint64_t sub_1000D2FA4()
{
  unint64_t result = qword_1001AA230;
  if (!qword_1001AA230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA230);
  }
  return result;
}

unint64_t sub_1000D2FF8()
{
  unint64_t result = qword_1001AA238;
  if (!qword_1001AA238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA238);
  }
  return result;
}

unint64_t sub_1000D304C()
{
  unint64_t result = qword_1001AA248;
  if (!qword_1001AA248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA248);
  }
  return result;
}

unint64_t sub_1000D30A0()
{
  unint64_t result = qword_1001AA250;
  if (!qword_1001AA250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA250);
  }
  return result;
}

uint64_t sub_1000D30F4(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteViewConfiguration.QueryItem.CodingKeys()
{
  return &type metadata for RemoteViewConfiguration.QueryItem.CodingKeys;
}

ValueMetadata *type metadata accessor for RemoteViewConfiguration.Service.CodingKeys()
{
  return &type metadata for RemoteViewConfiguration.Service.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for RemoteViewConfiguration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000D31F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteViewConfiguration.CodingKeys()
{
  return &type metadata for RemoteViewConfiguration.CodingKeys;
}

unsigned char *_s16EventViewService23RemoteViewConfigurationC9QueryItemV9ParameterOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000D32FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteViewConfiguration.QueryItem.Parameter()
{
  return &type metadata for RemoteViewConfiguration.QueryItem.Parameter;
}

uint64_t getEnumTagSinglePayload for RemoteViewConfiguration.Service.Name(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for RemoteViewConfiguration.Service.Name(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000D3490);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteViewConfiguration.Service.Name()
{
  return &type metadata for RemoteViewConfiguration.Service.Name;
}

unint64_t sub_1000D34CC()
{
  unint64_t result = qword_1001AA258;
  if (!qword_1001AA258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA258);
  }
  return result;
}

unint64_t sub_1000D3524()
{
  unint64_t result = qword_1001AA260;
  if (!qword_1001AA260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA260);
  }
  return result;
}

unint64_t sub_1000D357C()
{
  unint64_t result = qword_1001AA268;
  if (!qword_1001AA268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA268);
  }
  return result;
}

unint64_t sub_1000D35D4()
{
  unint64_t result = qword_1001AA270;
  if (!qword_1001AA270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA270);
  }
  return result;
}

unint64_t sub_1000D362C()
{
  unint64_t result = qword_1001AA278;
  if (!qword_1001AA278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA278);
  }
  return result;
}

unint64_t sub_1000D3684()
{
  unint64_t result = qword_1001AA280;
  if (!qword_1001AA280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA280);
  }
  return result;
}

unint64_t sub_1000D36DC()
{
  unint64_t result = qword_1001AA288;
  if (!qword_1001AA288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA288);
  }
  return result;
}

unint64_t sub_1000D3734()
{
  unint64_t result = qword_1001AA290;
  if (!qword_1001AA290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA290);
  }
  return result;
}

unint64_t sub_1000D378C()
{
  unint64_t result = qword_1001AA298;
  if (!qword_1001AA298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA298);
  }
  return result;
}

unint64_t sub_1000D37E4()
{
  unint64_t result = qword_1001AA2A0;
  if (!qword_1001AA2A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA2A0);
  }
  return result;
}

unint64_t sub_1000D383C()
{
  unint64_t result = qword_1001AA2A8;
  if (!qword_1001AA2A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA2A8);
  }
  return result;
}

uint64_t sub_1000D3894@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000570C(&qword_1001A53D8);
  __chkstk_darwin(v3 - 8, v4);
  unsigned int v6 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000570C(&qword_1001AA370);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000570C(&qword_1001AA378);
  __chkstk_darwin(v11 - 8, v12);
  char v14 = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000570C((uint64_t *)&unk_1001AA380);
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v18 = (char *)v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v1 + 16);
  swift_getKeyPath();
  v40[1] = v19;
  sub_1000D3F9C();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v20 = v19 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess();
  sub_100050750(v20, (uint64_t)v6);
  uint64_t v21 = type metadata accessor for ArtistPromotionalAssets();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v6, 1, v21) == 1)
  {
    uint64_t v23 = &qword_1001A53D8;
    uint64_t v24 = (uint64_t)v6;
LABEL_16:
    sub_10000ACE0(v24, v23);
    goto LABEL_17;
  }
  ArtistPromotionalAssets.promotionalAssets.getter();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v21);
  uint64_t v25 = type metadata accessor for PromotionalAssets();
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v10, 1, v25) == 1)
  {
    uint64_t v23 = &qword_1001AA370;
    uint64_t v24 = (uint64_t)v10;
    goto LABEL_16;
  }
  uint64_t v27 = PromotionalAssets.photoAlbums.getter();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v25);
  if (v27)
  {
    uint64_t v28 = *(void *)(v27 + 16);
    uint64_t v29 = type metadata accessor for PromotionalAssets.PhotoAlbum();
    uint64_t v30 = *(void *)(v29 - 8);
    if (v28)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(v14, v27+ ((*(unsigned __int8 *)(*(void *)(v29 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v29 - 8) + 80)), v29);
      uint64_t v31 = 0;
    }
    else
    {
      uint64_t v31 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56))(v14, v31, 1, v29);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v14, 1, v29) == 1)
    {
      uint64_t v23 = &qword_1001AA378;
      uint64_t v24 = (uint64_t)v14;
    }
    else
    {
      uint64_t v32 = PromotionalAssets.PhotoAlbum.photos.getter();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v29);
      uint64_t v33 = *(void *)(v32 + 16);
      uint64_t v34 = type metadata accessor for PromotionalAssets.PhotoAlbum.Photo();
      uint64_t v35 = *(void *)(v34 - 8);
      if (v33)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v34 - 8) + 16))(v18, v32+ ((*(unsigned __int8 *)(*(void *)(v34 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v34 - 8) + 80)), v34);
        uint64_t v36 = 0;
      }
      else
      {
        uint64_t v36 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56))(v18, v36, 1, v34);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v18, 1, v34) != 1)
      {
        PromotionalAssets.PhotoAlbum.Photo.url.getter();
        (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v34);
        uint64_t v39 = type metadata accessor for URL();
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(a1, 0, 1, v39);
      }
      uint64_t v23 = (uint64_t *)&unk_1001AA380;
      uint64_t v24 = (uint64_t)v18;
    }
    goto LABEL_16;
  }
LABEL_17:
  uint64_t v37 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(a1, 1, 1, v37);
}

uint64_t sub_1000D3DF8()
{
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC16EventViewService31PromotionalAssetsEntryViewModel___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1000D3EA0()
{
  return type metadata accessor for PromotionalAssetsEntryViewModel();
}

uint64_t type metadata accessor for PromotionalAssetsEntryViewModel()
{
  uint64_t result = qword_1001AA2E0;
  if (!qword_1001AA2E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000D3EF4()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_1000D3F9C()
{
  unint64_t result = qword_1001A53E0;
  if (!qword_1001A53E0)
  {
    type metadata accessor for PromotionalAssetsController();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001A53E0);
  }
  return result;
}

uint64_t type metadata accessor for CalendarSheet.CalendarCoordinator()
{
  return self;
}

void destroy for CalendarSheet(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    swift_release();
  }
}

void *initializeWithCopy for CalendarSheet(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v5;
  uint64_t v7 = (_OWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 16);
  id v8 = v4;
  id v9 = v5;
  if (v6)
  {
    uint64_t v10 = *(void *)(a2 + 24);
    a1[2] = v6;
    a1[3] = v10;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *v7;
  }
  return a1;
}

uint64_t assignWithCopy for CalendarSheet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 8);
  id v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  uint64_t v10 = *(void *)(a2 + 16);
  if (!*(void *)(a1 + 16))
  {
    if (v10)
    {
      uint64_t v12 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = v10;
      *(void *)(a1 + 24) = v12;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    return a1;
  }
  if (!v10)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v11 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v11;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for CalendarSheet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  uint64_t v5 = *(void *)(a2 + 16);
  if (!*(void *)(a1 + 16))
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = v5;
      *(void *)(a1 + 24) = v7;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    return a1;
  }
  if (!v5)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CalendarSheet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CalendarSheet(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CalendarSheet()
{
  return &type metadata for CalendarSheet;
}

id sub_1000D43A4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  id v3 = [objc_allocWithZone((Class)EKEventEditViewController) init];
  sub_10000570C(qword_1001AA430);
  UIViewControllerRepresentableContext.coordinator.getter();
  [v3 setEditViewDelegate:v5];

  [v3 setEventStore:v2];
  [v3 setEvent:v1];
  return v3;
}

id sub_1000D445C@<X0>(void *a1@<X8>)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v5 = (objc_class *)type metadata accessor for CalendarSheet.CalendarCoordinator();
  uint64_t v6 = (char *)objc_allocWithZone(v5);
  uint64_t v7 = (uint64_t *)&v6[OBJC_IVAR____TtCV16EventViewService13CalendarSheet19CalendarCoordinator_completionHandler];
  uint64_t *v7 = v4;
  v7[1] = v3;
  sub_100009CC8(v4);
  v9.receiver = v6;
  v9.super_class = v5;
  id result = [super init];
  *a1 = result;
  return result;
}

uint64_t sub_1000D44DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000D45CC();

  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000D4540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000D45CC();

  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000D45A4()
{
}

unint64_t sub_1000D45CC()
{
  unint64_t result = qword_1001AA428;
  if (!qword_1001AA428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA428);
  }
  return result;
}

uint64_t sub_1000D4620@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>, double a8@<D0>)
{
  swift_getWitnessTable();
  Bindable<A>.init(wrappedValue:)();
  uint64_t v16 = (int *)type metadata accessor for TourPhotosView();
  uint64_t v17 = a7 + v16[9];
  *(void *)uint64_t v17 = a1;
  *(void *)(v17 + 8) = a2;
  *(void *)(v17 + 16) = a3;
  *(unsigned char *)(v17 + 24) = a4 & 1;
  uint64_t v18 = a7 + v16[10];
  *(void *)uint64_t v18 = a5;
  *(void *)(v18 + 8) = a6;
  *(double *)(v18 + 16) = a8;
  uint64_t v19 = (uint64_t *)(a7 + v16[11]);
  type metadata accessor for RemoteViewConfiguration();
  sub_10000E4F8();
  uint64_t result = EnvironmentObject.init()();
  *uint64_t v19 = result;
  v19[1] = v21;
  return result;
}

uint64_t type metadata accessor for TourPhotosView()
{
  return sub_10000B72C();
}

uint64_t sub_1000D477C()
{
  type metadata accessor for TourPhotosViewModel();
  uint64_t result = type metadata accessor for Bindable();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1000D4834(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    type metadata accessor for TourPhotosViewModel();
    uint64_t v7 = type metadata accessor for Bindable();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = a3[9];
    uint64_t v9 = a3[10];
    uint64_t v10 = (char *)v4 + v8;
    uint64_t v11 = (char *)a2 + v8;
    uint64_t v12 = *((void *)v11 + 1);
    *(void *)uint64_t v10 = *(void *)v11;
    *((void *)v10 + 1) = v12;
    *((void *)v10 + 2) = *((void *)v11 + 2);
    v10[24] = v11[24];
    uint64_t v13 = (uint64_t *)((char *)v4 + v9);
    char v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    void *v13 = *v14;
    v13[1] = v15;
    void v13[2] = v14[2];
    uint64_t v16 = a3[11];
    uint64_t v17 = (uint64_t *)((char *)v4 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    *uint64_t v17 = v20;
    v17[1] = v19;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_1000D497C(uint64_t a1)
{
  type metadata accessor for TourPhotosViewModel();
  uint64_t v2 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_1000D4A3C(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for TourPhotosViewModel();
  uint64_t v6 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[9];
  uint64_t v8 = a3[10];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  uint64_t v11 = *(void *)(v10 + 8);
  *(void *)uint64_t v9 = *(void *)v10;
  *(void *)(v9 + 8) = v11;
  *(void *)(v9 + 16) = *(void *)(v10 + 16);
  *(unsigned char *)(v9 + 24) = *(unsigned char *)(v10 + 24);
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  _OWORD v12[2] = v13[2];
  uint64_t v15 = a3[11];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1000D4B38(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for TourPhotosViewModel();
  uint64_t v6 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[9];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_retain();
  swift_release();
  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  swift_retain();
  swift_release();
  uint64_t v10 = *(void *)(v9 + 16);
  *(unsigned char *)(v8 + 24) = *(unsigned char *)(v9 + 24);
  *(void *)(v8 + 16) = v10;
  uint64_t v11 = a3[10];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  swift_retain();
  swift_release();
  *(void *)(v12 + 8) = *(void *)(v13 + 8);
  swift_retain();
  swift_release();
  *(void *)(v12 + 16) = *(void *)(v13 + 16);
  uint64_t v14 = a3[11];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  swift_retain();
  swift_release();
  *(void *)(v15 + 8) = *(void *)(v16 + 8);
  return a1;
}

uint64_t sub_1000D4C7C(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for TourPhotosViewModel();
  uint64_t v6 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[9];
  uint64_t v8 = a3[10];
  uint64_t v9 = (_OWORD *)(a1 + v7);
  uint64_t v10 = (_OWORD *)(a2 + v7);
  *uint64_t v9 = *v10;
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)((char *)v10 + 9);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(void *)(v11 + 16) = *(void *)(v12 + 16);
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_1000D4D3C(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for TourPhotosViewModel();
  uint64_t v6 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[9];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_release();
  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  swift_release();
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  *(unsigned char *)(v8 + 24) = *(unsigned char *)(v9 + 24);
  uint64_t v10 = a3[10];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  swift_release();
  *(void *)(v11 + 8) = *(void *)(v12 + 8);
  swift_release();
  *(void *)(v11 + 16) = *(void *)(v12 + 16);
  uint64_t v13 = a3[11];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = (void *)(a2 + v13);
  *(void *)(a1 + v13) = *v15;
  swift_release();
  *(void *)(v14 + 8) = v15[1];
  return a1;
}

uint64_t sub_1000D4E58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D4E6C);
}

uint64_t sub_1000D4E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for TourPhotosViewModel();
  uint64_t v6 = type metadata accessor for Bindable();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 36) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1000D4F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D4F54);
}

uint64_t sub_1000D4F54(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for TourPhotosViewModel();
  uint64_t result = type metadata accessor for Bindable();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 36) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1000D5024()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000D5068()
{
  type metadata accessor for TourPhotosViewModel();
  type metadata accessor for Bindable();
  Bindable.wrappedValue.getter();
  return v1;
}

uint64_t sub_1000D50A8()
{
  sub_10000570C(&qword_1001AA550);
  Binding.wrappedValue.getter();
  return v1;
}

uint64_t sub_1000D510C()
{
  sub_10000570C(&qword_1001AA550);
  Binding.projectedValue.getter();
  return v1;
}

double sub_1000D5174()
{
  sub_10000570C(&qword_1001A7F40);
  Binding.wrappedValue.getter();
  return v1;
}

uint64_t sub_1000D51CC()
{
  return Binding.wrappedValue.setter();
}

uint64_t sub_1000D5228@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v156 = a3;
  uint64_t v137 = a1;
  uint64_t v154 = *(void *)(a1 - 8);
  uint64_t v155 = *(void *)(v154 + 64);
  __chkstk_darwin(a1, a2);
  long long v153 = (char *)&v99 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PagingScrollTargetBehavior();
  uint64_t v151 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v133 = (char *)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = *(void *)(a1 + 16);
  swift_getTupleTypeMetadata2();
  uint64_t v8 = type metadata accessor for Array();
  uint64_t v9 = sub_100004A58(&qword_1001AA4C0);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v177 = v8;
  v178 = &type metadata for Int;
  uint64_t v179 = v9;
  v180 = (void *)WitnessTable;
  v181 = &protocol witness table for Int;
  type metadata accessor for ForEach();
  v152 = &protocol conformance descriptor for AsyncImage<A>;
  uint64_t v176 = sub_10000A780(&qword_1001AA4C8, &qword_1001AA4C0);
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for HStack();
  uint64_t v12 = swift_getWitnessTable();
  uint64_t v177 = v11;
  v178 = (void *)v12;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v177 = v11;
  v178 = (void *)v12;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v13 = type metadata accessor for ScrollView();
  uint64_t v143 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v14);
  uint64_t v134 = (char *)&v99 - v15;
  uint64_t v16 = swift_getWitnessTable();
  uint64_t v177 = v13;
  v178 = (void *)v5;
  uint64_t v123 = v5;
  uint64_t v124 = v13;
  uint64_t v179 = v16;
  v180 = &protocol witness table for PagingScrollTargetBehavior;
  uint64_t v17 = v16;
  uint64_t v125 = v16;
  uint64_t v18 = swift_getOpaqueTypeMetadata2();
  uint64_t v145 = *(void *)(v18 - 8);
  __chkstk_darwin(v18, v19);
  uint64_t v122 = (char *)&v99 - v20;
  uint64_t v177 = v13;
  v178 = (void *)v5;
  uint64_t v179 = v17;
  v180 = &protocol witness table for PagingScrollTargetBehavior;
  uint64_t v21 = swift_getOpaqueTypeConformance2();
  uint64_t v119 = v18;
  uint64_t v177 = v18;
  v178 = &type metadata for Int;
  uint64_t v179 = v21;
  v180 = &protocol witness table for Int;
  uint64_t v22 = v21;
  uint64_t v121 = v21;
  uint64_t v23 = swift_getOpaqueTypeMetadata2();
  uint64_t v140 = *(void *)(v23 - 8);
  __chkstk_darwin(v23, v24);
  uint64_t v118 = (char *)&v99 - v25;
  uint64_t v177 = v18;
  v178 = &type metadata for Int;
  uint64_t v179 = v22;
  v180 = &protocol witness table for Int;
  uint64_t v26 = swift_getOpaqueTypeConformance2();
  uint64_t v177 = v23;
  v178 = (void *)v26;
  uint64_t v101 = v23;
  uint64_t v102 = v26;
  uint64_t v136 = swift_getOpaqueTypeMetadata2();
  uint64_t v142 = *(void *)(v136 - 8);
  __chkstk_darwin(v136, v27);
  uint64_t v120 = (char *)&v99 - v28;
  sub_100004A58(&qword_1001AA4D0);
  uint64_t v29 = type metadata accessor for ModifiedContent();
  uint64_t v144 = *(void *)(v29 - 8);
  __chkstk_darwin(v29, v30);
  unint64_t v129 = (char *)&v99 - v31;
  uint64_t v106 = v29;
  uint64_t v32 = type metadata accessor for ModifiedContent();
  uint64_t v141 = *(void *)(v32 - 8);
  __chkstk_darwin(v32, v33);
  uint64_t v131 = (char *)&v99 - v34;
  sub_100004A58(&qword_1001A91F8);
  uint64_t v107 = v32;
  uint64_t v35 = type metadata accessor for ModifiedContent();
  uint64_t v146 = *(void *)(v35 - 8);
  __chkstk_darwin(v35, v36);
  char v127 = (char *)&v99 - v37;
  sub_100004A58(&qword_1001AA4D8);
  uint64_t v109 = v35;
  uint64_t v38 = type metadata accessor for ModifiedContent();
  uint64_t v148 = *(void *)(v38 - 8);
  __chkstk_darwin(v38, v39);
  uint64_t v132 = (char *)&v99 - v40;
  uint64_t v111 = v38;
  uint64_t v41 = type metadata accessor for ModifiedContent();
  uint64_t v149 = *(void *)(v41 - 8);
  __chkstk_darwin(v41, v42);
  uint64_t v135 = (char *)&v99 - v43;
  uint64_t v44 = sub_100004A58(&qword_1001AA4E0);
  uint64_t v117 = v44;
  uint64_t v177 = v23;
  v178 = (void *)v26;
  uint64_t v45 = swift_getOpaqueTypeConformance2();
  uint64_t v103 = v45;
  uint64_t v46 = sub_10000A780(&qword_1001AA4E8, &qword_1001AA4D0);
  uint64_t v174 = v45;
  uint64_t v175 = v46;
  uint64_t v105 = swift_getWitnessTable();
  uint64_t v172 = v105;
  uint64_t v173 = &protocol witness table for _FrameLayout;
  uint64_t v47 = swift_getWitnessTable();
  uint64_t v104 = v47;
  uint64_t v48 = sub_10000A780(&qword_1001A91F0, &qword_1001A91F8);
  uint64_t v170 = v47;
  uint64_t v171 = v48;
  uint64_t v49 = swift_getWitnessTable();
  uint64_t v108 = v49;
  uint64_t v50 = sub_10000A780(&qword_1001AA4F0, &qword_1001AA4D8);
  uint64_t v168 = v49;
  uint64_t v169 = v50;
  uint64_t v110 = swift_getWitnessTable();
  uint64_t v166 = v110;
  long long v167 = &protocol witness table for _PaddingLayout;
  uint64_t v114 = v41;
  uint64_t v51 = swift_getWitnessTable();
  uint64_t v116 = v51;
  unint64_t v115 = sub_1000D9F04();
  uint64_t v177 = v41;
  v178 = (void *)v44;
  uint64_t v179 = v51;
  v180 = (void *)v115;
  uint64_t v126 = &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>;
  uint64_t v128 = swift_getOpaqueTypeMetadata2();
  uint64_t v130 = *(void *)(v128 - 8);
  uint64_t v53 = __chkstk_darwin(v128, v52);
  long long v112 = (char *)&v99 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v53, v55);
  long long v113 = (char *)&v99 - v56;
  static Axis.Set.horizontal.getter();
  uint64_t v57 = v137;
  uint64_t v100 = *(void *)(v137 + 24);
  uint64_t v58 = v150;
  uint64_t v163 = v150;
  uint64_t v164 = v100;
  uint64_t v59 = v147;
  uint64_t v165 = v147;
  uint64_t v60 = v134;
  ScrollView.init(_:showsIndicators:content:)();
  uint64_t v61 = v133;
  PagingScrollTargetBehavior.init()();
  uint64_t v63 = v122;
  uint64_t v62 = v123;
  uint64_t v64 = v124;
  View.scrollTargetBehavior<A>(_:)();
  (*(void (**)(char *, uint64_t))(v151 + 8))(v61, v62);
  (*(void (**)(char *, uint64_t))(v143 + 8))(v60, v64);
  uint64_t v177 = sub_1000D510C();
  v178 = v65;
  uint64_t v179 = v66;
  LOBYTE(v180) = v67 & 1;
  uint64_t v68 = v118;
  uint64_t v69 = v119;
  View.scrollPosition<A>(id:anchor:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v145 + 8))(v63, v69);
  sub_1000D5068();
  sub_100113548();
  swift_release();
  long long v70 = v120;
  uint64_t v71 = v101;
  View.scrollDisabled(_:)();
  (*(void (**)(char *, uint64_t))(v140 + 8))(v68, v71);
  uint64_t v160 = v58;
  uint64_t v72 = v100;
  uint64_t v161 = v100;
  uint64_t v162 = v59;
  static Alignment.center.getter();
  sub_10000570C(&qword_1001AA500);
  sub_10000A780(&qword_1001AA508, &qword_1001AA500);
  uint64_t v73 = v129;
  uint64_t v74 = v136;
  View.background<A>(alignment:content:)();
  (*(void (**)(char *, uint64_t))(v142 + 8))(v70, v74);
  sub_1000D5068();
  swift_release();
  static Alignment.center.getter();
  long long v75 = v131;
  uint64_t v76 = v106;
  View.frame(width:height:alignment:)();
  (*(void (**)(char *, uint64_t))(v144 + 8))(v73, v76);
  uint64_t v77 = v127;
  uint64_t v78 = v107;
  View.clipped(antialiased:)();
  (*(void (**)(char *, uint64_t))(v141 + 8))(v75, v78);
  uint64_t v157 = v58;
  uint64_t v158 = v72;
  uint64_t v159 = v59;
  static Alignment.center.getter();
  sub_10000570C(&qword_1001AA510);
  sub_1000D9F94();
  uint64_t v79 = v132;
  uint64_t v80 = v109;
  View.overlay<A>(alignment:content:)();
  (*(void (**)(char *, uint64_t))(v146 + 8))(v77, v80);
  static Edge.Set.bottom.getter();
  uint64_t v81 = v57;
  sub_1000D5068();
  swift_release();
  uint64_t v82 = v135;
  uint64_t v83 = v111;
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v148 + 8))(v79, v83);
  uint64_t v177 = sub_1000D50A8();
  LOBYTE(v178) = v84 & 1;
  uint64_t v86 = v153;
  uint64_t v85 = v154;
  (*(void (**)(char *, uint64_t, uint64_t))(v154 + 16))(v153, v59, v81);
  uint64_t v87 = v85;
  unint64_t v88 = (*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80);
  uint64_t v89 = swift_allocObject();
  *(void *)(v89 + 16) = v58;
  *(void *)(v89 + 24) = v72;
  (*(void (**)(unint64_t, char *, uint64_t))(v87 + 32))(v89 + v88, v86, v81);
  uint64_t v90 = v112;
  uint64_t v92 = v114;
  uint64_t v91 = (void *)v115;
  uint64_t v94 = v116;
  uint64_t v93 = (void *)v117;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v149 + 8))(v82, v92);
  uint64_t v177 = v92;
  v178 = v93;
  uint64_t v179 = v94;
  v180 = v91;
  swift_getOpaqueTypeConformance2();
  uint64_t v95 = v113;
  uint64_t v96 = v128;
  sub_1001221F0(v90, v128);
  char v97 = *(void (**)(char *, uint64_t))(v130 + 8);
  v97(v90, v96);
  sub_1001221F0(v95, v96);
  return ((uint64_t (*)(char *, uint64_t))v97)(v95, v96);
}

uint64_t sub_1000D61D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = a1;
  uint64_t v24 = a3;
  uint64_t v22 = a2;
  uint64_t v25 = a4;
  swift_getTupleTypeMetadata2();
  uint64_t v30 = type metadata accessor for Array();
  uint64_t v31 = &type metadata for Int;
  uint64_t v32 = sub_100004A58(&qword_1001AA4C0);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v34 = &protocol witness table for Int;
  type metadata accessor for ForEach();
  uint64_t v29 = sub_10000A780(&qword_1001AA4C8, &qword_1001AA4C0);
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for HStack();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)v21 - v7;
  uint64_t v9 = swift_getWitnessTable();
  uint64_t v30 = v4;
  uint64_t v31 = (void *)v9;
  v21[1] = &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v11 = *(void *)(OpaqueTypeMetadata2 - 8);
  uint64_t v13 = __chkstk_darwin(OpaqueTypeMetadata2, v12);
  uint64_t v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)v21 - v17;
  uint64_t v26 = v22;
  uint64_t v27 = v24;
  uint64_t v28 = v23;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  View.scrollTargetLayout(isEnabled:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  uint64_t v30 = v4;
  uint64_t v31 = (void *)v9;
  swift_getOpaqueTypeConformance2();
  sub_1001221F0(v15, OpaqueTypeMetadata2);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v15, OpaqueTypeMetadata2);
  sub_1001221F0(v18, OpaqueTypeMetadata2);
  return ((uint64_t (*)(char *, uint64_t))v19)(v18, OpaqueTypeMetadata2);
}

uint64_t sub_1000D6530@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v31 = a3;
  uint64_t v28 = a1;
  uint64_t v37 = a4;
  uint64_t v5 = type metadata accessor for TourPhotosView();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v32 = *(void *)(v6 + 64);
  __chkstk_darwin(v5, v7);
  uint64_t v30 = (char *)&v28 - v8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = type metadata accessor for Array();
  uint64_t v35 = v9;
  uint64_t v10 = sub_100004A58(&qword_1001AA4C0);
  uint64_t v34 = v10;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v42 = v9;
  uint64_t v43 = &type metadata for Int;
  uint64_t v44 = v10;
  uint64_t v45 = WitnessTable;
  uint64_t v46 = &protocol witness table for Int;
  uint64_t v11 = type metadata accessor for ForEach();
  uint64_t v36 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)&v28 - v17;
  uint64_t v19 = *(void *)(sub_1000D5068() + 32);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v41 = v19;
  type metadata accessor for Array();
  swift_getWitnessTable();
  Sequence.enumerated()();
  swift_bridgeObjectRelease();
  uint64_t v41 = v42;
  type metadata accessor for EnumeratedSequence();
  swift_getWitnessTable();
  uint64_t v42 = Array.init<A>(_:)();
  uint64_t v20 = v31;
  uint64_t v38 = a2;
  uint64_t v39 = v31;
  TupleTypeMetadata2 = swift_getKeyPath();
  uint64_t v21 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v30, v28, v5);
  unint64_t v22 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a2;
  *(void *)(v23 + 24) = v20;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v23 + v22, v21, v5);
  uint64_t v24 = (void *)swift_allocObject();
  v24[2] = a2;
  void v24[3] = v20;
  v24[4] = sub_1000DAC68;
  v24[5] = v23;
  uint64_t v27 = sub_10000A780(&qword_1001AA4C8, &qword_1001AA4C0);
  ForEach<>.init(_:id:content:)();
  uint64_t v40 = v27;
  swift_getWitnessTable();
  sub_1001221F0(v15, v11);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v36 + 8);
  v25(v15, v11);
  sub_1001221F0(v18, v11);
  return ((uint64_t (*)(char *, uint64_t))v25)(v18, v11);
}

uint64_t sub_1000D698C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  v20[1] = a4;
  uint64_t v7 = type metadata accessor for TourPhotosView();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)v20 - v10;
  uint64_t v12 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  uint64_t v16 = type metadata accessor for URL();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 0, 1, v16);
  static Animation.easeInOut.getter();
  Transaction.init(animation:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  unint64_t v17 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v18 + v17, v11, v7);
  sub_10000570C(&qword_1001AA630);
  sub_1000DA904(&qword_1001AA638, &qword_1001AA630, (void (*)(void))sub_1000DAFA0);
  return AsyncImage.init(url:scale:transaction:content:)();
}

uint64_t sub_1000D6BE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)&long long v166 = a4;
  uint64_t v165 = a3;
  uint64_t v160 = a2;
  uint64_t v164 = a5;
  uint64_t v133 = sub_10000570C(&qword_1001AA5E8);
  uint64_t v132 = *(void (**)(void))(v133 - 8);
  __chkstk_darwin(v133, v6);
  uint64_t v131 = (char *)&v122 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = sub_10000570C(&qword_1001AA6F8);
  uint64_t v9 = __chkstk_darwin(v152, v8);
  uint64_t v130 = (char *)&v122 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v11);
  uint64_t v137 = (uint64_t)&v122 - v12;
  uint64_t v162 = sub_10000570C(&qword_1001AA700);
  __chkstk_darwin(v162, v13);
  uint64_t v161 = (uint64_t)&v122 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v153 = sub_10000570C(&qword_1001AA708);
  __chkstk_darwin(v153, v15);
  uint64_t v154 = (uint64_t)&v122 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v163 = sub_10000570C(&qword_1001AA648);
  __chkstk_darwin(v163, v17);
  uint64_t v155 = (char *)&v122 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = sub_10000570C(&qword_1001AA710);
  __chkstk_darwin(v147, v19);
  uint64_t v149 = (uint64_t)&v122 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = sub_10000570C(&qword_1001AA718);
  __chkstk_darwin(v146, v21);
  uint64_t v150 = (uint64_t)&v122 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for Image.ResizingMode();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23, v25);
  uint64_t v27 = (char *)&v122 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = sub_10000570C(&qword_1001AA600);
  uint64_t v140 = *(void *)(v158 - 8);
  __chkstk_darwin(v158, v28);
  uint64_t v30 = (char *)&v122 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v157 = sub_10000570C(&qword_1001AA6B8);
  __chkstk_darwin(v157, v31);
  uint64_t v135 = (char *)&v122 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = sub_10000570C(&qword_1001AA6A8);
  __chkstk_darwin(v156, v33);
  uint64_t v138 = (uint64_t)&v122 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = sub_10000570C(&qword_1001AA698);
  __chkstk_darwin(v136, v35);
  uint64_t v159 = (uint64_t)&v122 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = sub_10000570C(&qword_1001AA688);
  __chkstk_darwin(v139, v37);
  uint64_t v142 = (char *)&v122 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = sub_10000570C(&qword_1001AA678);
  __chkstk_darwin(v134, v39);
  uint64_t v145 = (char *)&v122 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = sub_10000570C(&qword_1001AA668);
  __chkstk_darwin(v143, v41);
  uint64_t v144 = (uint64_t)&v122 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = sub_10000570C(&qword_1001AA658);
  uint64_t v44 = __chkstk_darwin(v151, v43);
  uint64_t v141 = (uint64_t)&v122 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44, v46);
  uint64_t v148 = (uint64_t)&v122 - v47;
  uint64_t v48 = type metadata accessor for AsyncImagePhase();
  uint64_t v49 = *(void *)(v48 - 8);
  __chkstk_darwin(v48, v50);
  uint64_t v52 = (uint64_t *)((char *)&v122 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v49 + 16))(v52, a1, v48);
  int v53 = (*(uint64_t (**)(uint64_t *, uint64_t))(v49 + 88))(v52, v48);
  if (v53 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v49 + 96))(v52, v48);
    uint64_t v137 = *v52;
    LODWORD(v133) = enum case for Image.ResizingMode.stretch(_:);
    uint64_t v54 = *(void (**)(void))(v24 + 104);
    uint64_t v131 = (char *)(v24 + 104);
    uint64_t v132 = v54;
    uint64_t v126 = v23;
    v54(v27);
    uint64_t v55 = Image.resizable(capInsets:resizingMode:)();
    uint64_t v56 = *(char **)(v24 + 8);
    uint64_t v129 = v24 + 8;
    uint64_t v130 = v56;
    ((void (*)(char *, uint64_t))v56)(v27, v23);
    *(_OWORD *)uint64_t v174 = (unint64_t)v55;
    *(_WORD *)&v174[16] = 257;
    static Axis.Set.horizontal.getter();
    static Alignment.center.getter();
    uint64_t v128 = sub_10000570C(&qword_1001A91E8);
    unint64_t v127 = sub_1000B0B8C();
    View.containerRelativeFrame(_:alignment:)();
    swift_release();
    uint64_t v125 = type metadata accessor for TourPhotosView();
    sub_1000D5068();
    swift_release();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v57 = v140;
    uint64_t v58 = *(void (**)(uint64_t, char *, uint64_t))(v140 + 16);
    uint64_t v123 = v140 + 16;
    uint64_t v124 = v58;
    uint64_t v59 = (uint64_t)v135;
    uint64_t v60 = v158;
    v58((uint64_t)v135, v30, v158);
    uint64_t v61 = (_OWORD *)(v59 + *(int *)(v157 + 36));
    long long v62 = v172;
    *uint64_t v61 = v171;
    v61[1] = v62;
    v61[2] = v173;
    uint64_t v140 = *(void *)(v57 + 8);
    ((void (*)(char *, uint64_t))v140)(v30, v60);
    uint64_t v63 = v138;
    sub_10000A428(v59, v138, &qword_1001AA6B8);
    *(_WORD *)(v63 + *(int *)(v156 + 36)) = 0;
    sub_10000ACE0(v59, &qword_1001AA6B8);
    uint64_t v64 = static Alignment.center.getter();
    uint64_t v66 = v65;
    sub_1000D9874((uint64_t (*)(void))&static Color.black.getter, (uint64_t (*)(void))&static Color.clear.getter, (uint64_t)v174);
    uint64_t v67 = *(void *)v174;
    long long v122 = *(_OWORD *)&v174[8];
    uint64_t v68 = *(void *)&v174[24];
    uint64_t v69 = v175;
    uint64_t v70 = v159;
    sub_10000A428(v63, v159, &qword_1001AA6A8);
    uint64_t v71 = v70 + *(int *)(v136 + 36);
    *(void *)uint64_t v71 = v64;
    *(void *)(v71 + 8) = v66;
    *(void *)(v71 + 16) = v67;
    *(_OWORD *)(v71 + 24) = v122;
    *(void *)(v71 + 40) = v68;
    *(void *)(v71 + 48) = v69;
    sub_10000ACE0(v63, &qword_1001AA6A8);
    uint64_t v72 = v126;
    ((void (*)(char *, void, uint64_t))v132)(v27, v133, v126);
    uint64_t v73 = Image.resizable(capInsets:resizingMode:)();
    ((void (*)(char *, uint64_t))v130)(v27, v72);
    *(_OWORD *)uint64_t v174 = (unint64_t)v73;
    *(_WORD *)&v174[16] = 257;
    static Axis.Set.horizontal.getter();
    static Alignment.center.getter();
    View.containerRelativeFrame(_:alignment:)();
    swift_release();
    uint64_t v74 = v160;
    sub_1000D5068();
    swift_release();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v75 = v158;
    v124(v59, v30, v158);
    uint64_t v76 = (_OWORD *)(v59 + *(int *)(v157 + 36));
    long long v77 = *(_OWORD *)&v174[16];
    _OWORD *v76 = *(_OWORD *)v174;
    v76[1] = v77;
    v76[2] = v175;
    ((void (*)(char *, uint64_t))v140)(v30, v75);
    sub_10000A428(v59, v63, &qword_1001AA6B8);
    *(_WORD *)(v63 + *(int *)(v156 + 36)) = 0;
    sub_10000ACE0(v59, &qword_1001AA6B8);
    uint64_t v78 = v149;
    sub_10000A428(v63, v149, &qword_1001AA6A8);
    uint64_t v79 = v78 + *(int *)(v147 + 36);
    *(void *)uint64_t v79 = 0x4049000000000000;
    *(unsigned char *)(v79 + 8) = 1;
    sub_10000ACE0(v63, &qword_1001AA6A8);
    uint64_t v80 = v150;
    sub_10000A428(v78, v150, &qword_1001AA710);
    *(_WORD *)(v80 + *(int *)(v146 + 36)) = 0;
    sub_10000ACE0(v78, &qword_1001AA710);
    uint64_t v81 = static Alignment.center.getter();
    uint64_t v83 = v82;
    uint64_t v84 = (uint64_t)v142;
    uint64_t v85 = (uint64_t)&v142[*(int *)(v139 + 36)];
    sub_10000A428(v80, v85, &qword_1001AA718);
    uint64_t v86 = (uint64_t *)(v85 + *(int *)(sub_10000570C(&qword_1001AA6D8) + 36));
    uint64_t *v86 = v81;
    v86[1] = v83;
    uint64_t v87 = v159;
    sub_10000A428(v159, v84, &qword_1001AA698);
    sub_10000ACE0(v80, &qword_1001AA718);
    sub_10000ACE0(v87, &qword_1001AA698);
    uint64_t v88 = static Alignment.center.getter();
    uint64_t v90 = v89;
    uint64_t v91 = (uint64_t)v145;
    uint64_t v92 = (uint64_t)&v145[*(int *)(v134 + 36)];
    sub_1000D7EC0(v74, v165, v166, v92);
    uint64_t v93 = (uint64_t *)(v92 + *(int *)(sub_10000570C(&qword_1001AA6E8) + 36));
    uint64_t *v93 = v88;
    v93[1] = v90;
    sub_10000A3C4(v84, v91, &qword_1001AA688);
    uint64_t v94 = static Alignment.center.getter();
    uint64_t v96 = v95;
    sub_1000D993C((uint64_t)&v167);
    uint64_t v97 = v167;
    long long v166 = v168;
    uint64_t v98 = v169;
    uint64_t v99 = v170;
    uint64_t v100 = v144;
    sub_10000A428(v91, v144, &qword_1001AA678);
    uint64_t v101 = v100 + *(int *)(v143 + 36);
    *(void *)uint64_t v101 = v97;
    *(_OWORD *)(v101 + 8) = v166;
    *(void *)(v101 + 24) = v98;
    *(void *)(v101 + 32) = v99;
    *(void *)(v101 + 40) = v94;
    *(void *)(v101 + 48) = v96;
    sub_10000ACE0(v91, &qword_1001AA678);
    uint64_t v102 = v141;
    sub_10000A428(v100, v141, &qword_1001AA668);
    *(unsigned char *)(v102 + *(int *)(v151 + 36)) = 1;
    sub_10000ACE0(v100, &qword_1001AA668);
    uint64_t v103 = &qword_1001AA658;
    uint64_t v104 = v148;
    sub_10000A3C4(v102, v148, &qword_1001AA658);
    sub_10000A428(v104, v154, &qword_1001AA658);
    swift_storeEnumTagMultiPayload();
    sub_1000DB01C();
    sub_1000DB478();
    uint64_t v105 = (uint64_t)v155;
    _ConditionalContent<>.init(storage:)();
    sub_10000A428(v105, v161, &qword_1001AA648);
    swift_storeEnumTagMultiPayload();
    sub_1000DAFA0();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    sub_10000ACE0(v105, &qword_1001AA648);
    uint64_t v106 = v104;
    return sub_10000ACE0(v106, v103);
  }
  uint64_t v107 = v161;
  if (v53 == enum case for AsyncImagePhase.failure(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v49 + 96))(v52, v48);
    swift_errorRelease();
LABEL_6:
    if (qword_1001A4E48 != -1) {
      swift_once();
    }
    *(void *)uint64_t v174 = qword_1001B74E8;
    *(_WORD *)&v174[8] = 256;
    swift_retain();
    static Axis.Set.horizontal.getter();
    static Alignment.center.getter();
    sub_10000570C(&qword_1001AA5D8);
    sub_10000A780(&qword_1001AA5E0, &qword_1001AA5D8);
    uint64_t v108 = v131;
    View.containerRelativeFrame(_:alignment:)();
    swift_release();
    uint64_t v109 = static Alignment.center.getter();
    uint64_t v111 = v110;
    sub_1000D993C((uint64_t)v174);
    uint64_t v112 = *(void *)v174;
    long long v166 = *(_OWORD *)&v174[8];
    uint64_t v113 = *(void *)&v174[24];
    uint64_t v114 = v175;
    unint64_t v115 = (void (**)(char *, uint64_t))v132;
    uint64_t v116 = (uint64_t)v130;
    uint64_t v117 = v133;
    (*((void (**)(char *, char *, uint64_t))v132 + 2))(v130, v108, v133);
    uint64_t v118 = v116 + *(int *)(v152 + 36);
    *(void *)uint64_t v118 = v112;
    *(_OWORD *)(v118 + 8) = v166;
    *(void *)(v118 + 24) = v113;
    *(void *)(v118 + 32) = v114;
    *(void *)(v118 + 40) = v109;
    *(void *)(v118 + 48) = v111;
    v115[1](v108, v117);
    uint64_t v103 = &qword_1001AA6F8;
    uint64_t v119 = v137;
    sub_10000A3C4(v116, v137, &qword_1001AA6F8);
    sub_10000A428(v119, v154, &qword_1001AA6F8);
    swift_storeEnumTagMultiPayload();
    sub_1000DB01C();
    sub_1000DB478();
    uint64_t v120 = (uint64_t)v155;
    _ConditionalContent<>.init(storage:)();
    sub_10000A428(v120, v107, &qword_1001AA648);
    swift_storeEnumTagMultiPayload();
    sub_1000DAFA0();
    _ConditionalContent<>.init(storage:)();
    sub_10000ACE0(v120, &qword_1001AA648);
    uint64_t v106 = v119;
    return sub_10000ACE0(v106, v103);
  }
  if (v53 == enum case for AsyncImagePhase.empty(_:)) {
    goto LABEL_6;
  }
  swift_storeEnumTagMultiPayload();
  sub_1000DAFA0();
  _ConditionalContent<>.init(storage:)();
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v49 + 8))(v52, v48);
}

uint64_t sub_1000D7EC0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v51 = a2;
  uint64_t v52 = a3;
  *(void *)&long long v54 = a1;
  uint64_t v55 = a4;
  uint64_t v4 = type metadata accessor for Image.ResizingMode();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_10000570C(&qword_1001AA600);
  uint64_t v50 = *(void *)(v53 - 8);
  __chkstk_darwin(v53, v9);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_10000570C(&qword_1001AA6B8) - 8;
  __chkstk_darwin(v48, v12);
  uint64_t v44 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_10000570C(&qword_1001AA6A8) - 8;
  __chkstk_darwin(v49, v14);
  uint64_t v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_10000570C(&qword_1001AA720) - 8;
  __chkstk_darwin(v47, v17);
  uint64_t v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_10000570C(&qword_1001AA728) - 8;
  __chkstk_darwin(v46, v20);
  uint64_t v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_10000570C(&qword_1001AA730) - 8;
  __chkstk_darwin(v45, v23);
  uint64_t v43 = (uint64_t)&v42 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, enum case for Image.ResizingMode.stretch(_:), v4);
  uint64_t v25 = Image.resizable(capInsets:resizingMode:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  long long v60 = (unint64_t)v25;
  LOWORD(v61) = 257;
  static Axis.Set.horizontal.getter();
  static Alignment.center.getter();
  sub_10000570C(&qword_1001A91E8);
  sub_1000B0B8C();
  View.containerRelativeFrame(_:alignment:)();
  swift_release();
  type metadata accessor for TourPhotosView();
  sub_1000D5068();
  swift_release();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v26 = v50;
  uint64_t v27 = (uint64_t)v44;
  uint64_t v28 = v53;
  (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v44, v11, v53);
  uint64_t v29 = (_OWORD *)(v27 + *(int *)(v48 + 44));
  long long v30 = v61;
  *uint64_t v29 = v60;
  v29[1] = v30;
  v29[2] = v62;
  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v28);
  sub_10000A428(v27, (uint64_t)v16, &qword_1001AA6B8);
  *(_WORD *)&v16[*(int *)(v49 + 44)] = 0;
  sub_10000ACE0(v27, &qword_1001AA6B8);
  sub_10000A428((uint64_t)v16, (uint64_t)v19, &qword_1001AA6A8);
  *(void *)&v19[*(int *)(v47 + 44)] = 0x3FF0000000000000;
  sub_10000ACE0((uint64_t)v16, &qword_1001AA6A8);
  sub_10000A428((uint64_t)v19, (uint64_t)v22, &qword_1001AA720);
  uint64_t v31 = &v22[*(int *)(v46 + 44)];
  *(void *)uint64_t v31 = 0x4038000000000000;
  v31[8] = 1;
  sub_10000ACE0((uint64_t)v19, &qword_1001AA720);
  uint64_t v32 = v43;
  sub_10000A428((uint64_t)v22, v43, &qword_1001AA728);
  *(_WORD *)(v32 + *(int *)(v45 + 44)) = 0;
  sub_10000ACE0((uint64_t)v22, &qword_1001AA728);
  uint64_t v33 = static Alignment.center.getter();
  uint64_t v35 = v34;
  sub_1000D9874((uint64_t (*)(void))&static Color.clear.getter, (uint64_t (*)(void))&static Color.black.getter, (uint64_t)&v56);
  uint64_t v37 = v55;
  uint64_t v36 = v56;
  long long v54 = v57;
  uint64_t v38 = v58;
  uint64_t v39 = v59;
  sub_10000A428(v32, v55, &qword_1001AA730);
  uint64_t v40 = v37 + *(int *)(sub_10000570C(&qword_1001AA738) + 36);
  *(void *)uint64_t v40 = v33;
  *(void *)(v40 + 8) = v35;
  *(void *)(v40 + 16) = v36;
  *(_OWORD *)(v40 + 24) = v54;
  *(void *)(v40 + 40) = v38;
  *(void *)(v40 + 48) = v39;
  return sub_10000ACE0(v32, &qword_1001AA730);
}

uint64_t sub_1000D84BC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v25 = a3;
  uint64_t v23 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v23 - 8);
  __chkstk_darwin(v23, v6);
  uint64_t v8 = (char *)&v23 - v7;
  uint64_t v9 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000570C(&qword_1001AA500);
  uint64_t v13 = *(void *)(v24 - 8);
  __chkstk_darwin(v24, v14);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TourPhotosView();
  uint64_t v17 = *(void *)(sub_1000D5068() + 32);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v26 = v17;
  type metadata accessor for Array();
  swift_getWitnessTable();
  Collection.first.getter();
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(a1 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v8, 1, a1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v23);
    uint64_t v19 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v12, 1, 1, v19);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v8, a1);
    uint64_t v20 = type metadata accessor for URL();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v12, 0, 1, v20);
  }
  static Animation.easeInOut.getter();
  Transaction.init(animation:)();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a1;
  *(void *)(v21 + 24) = a2;
  sub_10000570C(&qword_1001AA558);
  sub_1000DA904(&qword_1001AA560, &qword_1001AA558, (void (*)(void))sub_1000DA984);
  AsyncImage.init(url:scale:transaction:content:)();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(v25, v16, v24);
}

uint64_t sub_1000D8888@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v77 = a2;
  *(void *)&long long v78 = a3;
  uint64_t v84 = a1;
  uint64_t v85 = a4;
  uint64_t v83 = sub_10000570C(&qword_1001AA5E8);
  uint64_t v69 = *(void *)(v83 - 8);
  __chkstk_darwin(v83, v4);
  uint64_t v68 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_10000570C(&qword_1001AA5F0);
  __chkstk_darwin(v87, v6);
  uint64_t v88 = (uint64_t)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = sub_10000570C(&qword_1001AA5F8);
  __chkstk_darwin(v80, v8);
  uint64_t v81 = (uint64_t)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_10000570C(&qword_1001AA570);
  __chkstk_darwin(v86, v10);
  uint64_t v82 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Image.ResizingMode();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_10000570C(&qword_1001AA600);
  uint64_t v74 = *(void *)(v75 - 8);
  __chkstk_darwin(v75, v17);
  uint64_t v19 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_10000570C(&qword_1001AA5B0);
  __chkstk_darwin(v71, v20);
  uint64_t v22 = (char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = sub_10000570C(&qword_1001AA5A0);
  __chkstk_darwin(v72, v23);
  uint64_t v25 = (char *)&v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_10000570C(&qword_1001AA590);
  __chkstk_darwin(v70, v26);
  uint64_t v28 = (char *)&v68 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_10000570C(&qword_1001AA580);
  uint64_t v30 = __chkstk_darwin(v79, v29);
  uint64_t v73 = (uint64_t)&v68 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30, v32);
  uint64_t v76 = (uint64_t)&v68 - v33;
  uint64_t v34 = type metadata accessor for AsyncImagePhase();
  uint64_t v35 = *(void *)(v34 - 8);
  __chkstk_darwin(v34, v36);
  uint64_t v38 = (uint64_t *)((char *)&v68 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v35 + 16))(v38, v84, v34);
  int v39 = (*(uint64_t (**)(uint64_t *, uint64_t))(v35 + 88))(v38, v34);
  if (v39 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v35 + 96))(v38, v34);
    uint64_t v84 = *v38;
    (*(void (**)(char *, void, uint64_t))(v13 + 104))(v16, enum case for Image.ResizingMode.stretch(_:), v12);
    uint64_t v40 = Image.resizable(capInsets:resizingMode:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    uint64_t v89 = v40;
    *(void *)&long long v90 = 0;
    WORD4(v90) = 257;
    static Axis.Set.horizontal.getter();
    static Alignment.center.getter();
    sub_10000570C(&qword_1001A91E8);
    sub_1000B0B8C();
    View.containerRelativeFrame(_:alignment:)();
    swift_release();
    uint64_t v41 = v74;
    uint64_t v42 = v75;
    (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v22, v19, v75);
    uint64_t v43 = &v22[*(int *)(v71 + 36)];
    *(void *)uint64_t v43 = 0x4059000000000000;
    v43[8] = 1;
    (*(void (**)(char *, uint64_t))(v41 + 8))(v19, v42);
    sub_10000A428((uint64_t)v22, (uint64_t)v25, &qword_1001AA5B0);
    *(_WORD *)&v25[*(int *)(v72 + 36)] = 0;
    sub_10000ACE0((uint64_t)v22, &qword_1001AA5B0);
    uint64_t v44 = static Alignment.center.getter();
    uint64_t v46 = v45;
    uint64_t v47 = (uint64_t)&v28[*(int *)(v70 + 36)];
    sub_1000D939C(v77, v78, v47);
    uint64_t v48 = (uint64_t *)(v47 + *(int *)(sub_10000570C(&qword_1001AA5C0) + 36));
    *uint64_t v48 = v44;
    v48[1] = v46;
    sub_10000A3C4((uint64_t)v25, (uint64_t)v28, &qword_1001AA5A0);
    uint64_t v49 = static Alignment.center.getter();
    uint64_t v51 = v50;
    sub_1000D993C((uint64_t)&v89);
    uint64_t v52 = v89;
    long long v78 = v90;
    uint64_t v53 = v91;
    uint64_t v54 = v92;
    uint64_t v55 = v73;
    sub_10000A428((uint64_t)v28, v73, &qword_1001AA590);
    uint64_t v56 = v55 + *(int *)(v79 + 36);
    *(void *)uint64_t v56 = v52;
    *(_OWORD *)(v56 + 8) = v78;
    *(void *)(v56 + 24) = v53;
    *(void *)(v56 + 32) = v54;
    *(void *)(v56 + 40) = v49;
    *(void *)(v56 + 48) = v51;
    sub_10000ACE0((uint64_t)v28, &qword_1001AA590);
    uint64_t v57 = v76;
    sub_10000A3C4(v55, v76, &qword_1001AA580);
    sub_10000A428(v57, v81, &qword_1001AA580);
    swift_storeEnumTagMultiPayload();
    sub_1000DAA60();
    uint64_t v58 = sub_100004A58(&qword_1001AA5D8);
    uint64_t v59 = sub_10000A780(&qword_1001AA5E0, &qword_1001AA5D8);
    uint64_t v89 = v58;
    *(void *)&long long v90 = v59;
    swift_getOpaqueTypeConformance2();
    uint64_t v60 = (uint64_t)v82;
    _ConditionalContent<>.init(storage:)();
    sub_10000A428(v60, v88, &qword_1001AA570);
    swift_storeEnumTagMultiPayload();
    sub_1000DA984();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    sub_10000ACE0(v60, &qword_1001AA570);
    return sub_10000ACE0(v57, &qword_1001AA580);
  }
  if (v39 == enum case for AsyncImagePhase.failure(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v35 + 96))(v38, v34);
    swift_errorRelease();
  }
  else if (v39 != enum case for AsyncImagePhase.empty(_:))
  {
    swift_storeEnumTagMultiPayload();
    sub_1000DA984();
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v35 + 8))(v38, v34);
  }
  if (qword_1001A4E48 != -1) {
    swift_once();
  }
  uint64_t v89 = qword_1001B74E8;
  LOWORD(v90) = 256;
  swift_retain();
  static Axis.Set.horizontal.getter();
  static Alignment.center.getter();
  uint64_t v62 = sub_10000570C(&qword_1001AA5D8);
  uint64_t v63 = sub_10000A780(&qword_1001AA5E0, &qword_1001AA5D8);
  uint64_t v64 = v68;
  View.containerRelativeFrame(_:alignment:)();
  swift_release();
  uint64_t v65 = v69;
  uint64_t v66 = v83;
  (*(void (**)(uint64_t, char *, uint64_t))(v69 + 16))(v81, v64, v83);
  swift_storeEnumTagMultiPayload();
  sub_1000DAA60();
  uint64_t v89 = v62;
  *(void *)&long long v90 = v63;
  swift_getOpaqueTypeConformance2();
  uint64_t v67 = (uint64_t)v82;
  _ConditionalContent<>.init(storage:)();
  sub_10000A428(v67, v88, &qword_1001AA570);
  swift_storeEnumTagMultiPayload();
  sub_1000DA984();
  _ConditionalContent<>.init(storage:)();
  sub_10000ACE0(v67, &qword_1001AA570);
  return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v64, v66);
}

uint64_t sub_1000D939C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v46 = a1;
  *(void *)&long long v47 = a2;
  uint64_t v48 = a3;
  uint64_t v3 = type metadata accessor for Image.ResizingMode();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000570C(&qword_1001AA600);
  uint64_t v44 = *(void *)(v8 - 8);
  uint64_t v45 = v8;
  __chkstk_darwin(v8, v9);
  uint64_t v41 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_10000570C(&qword_1001AA608) - 8;
  __chkstk_darwin(v43, v11);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_10000570C(&qword_1001AA610) - 8;
  __chkstk_darwin(v42, v14);
  uint64_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_10000570C(&qword_1001AA618) - 8;
  __chkstk_darwin(v40, v17);
  uint64_t v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_10000570C(&qword_1001AA620) - 8;
  __chkstk_darwin(v39, v20);
  uint64_t v38 = (uint64_t)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v3);
  uint64_t v22 = Image.resizable(capInsets:resizingMode:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  uint64_t v49 = v22;
  *(void *)&long long v50 = 0;
  WORD4(v50) = 257;
  static Axis.Set.horizontal.getter();
  static Alignment.center.getter();
  sub_10000570C(&qword_1001A91E8);
  sub_1000B0B8C();
  uint64_t v23 = v41;
  View.containerRelativeFrame(_:alignment:)();
  swift_release();
  uint64_t v25 = v44;
  uint64_t v24 = v45;
  (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v13, v23, v45);
  *(_WORD *)&v13[*(int *)(v43 + 44)] = 0;
  (*(void (**)(char *, uint64_t))(v25 + 8))(v23, v24);
  sub_10000A428((uint64_t)v13, (uint64_t)v16, &qword_1001AA608);
  *(void *)&v16[*(int *)(v42 + 44)] = 0x3FF0000000000000;
  sub_10000ACE0((uint64_t)v13, &qword_1001AA608);
  sub_10000A428((uint64_t)v16, (uint64_t)v19, &qword_1001AA610);
  uint64_t v26 = &v19[*(int *)(v40 + 44)];
  *(void *)uint64_t v26 = 0x4038000000000000;
  v26[8] = 1;
  sub_10000ACE0((uint64_t)v16, &qword_1001AA610);
  uint64_t v27 = v38;
  sub_10000A428((uint64_t)v19, v38, &qword_1001AA618);
  *(_WORD *)(v27 + *(int *)(v39 + 44)) = 0;
  sub_10000ACE0((uint64_t)v19, &qword_1001AA618);
  uint64_t v28 = static Alignment.center.getter();
  uint64_t v30 = v29;
  sub_1000D9874((uint64_t (*)(void))&static Color.clear.getter, (uint64_t (*)(void))&static Color.black.getter, (uint64_t)&v49);
  uint64_t v32 = v48;
  uint64_t v31 = v49;
  long long v47 = v50;
  uint64_t v33 = v51;
  uint64_t v34 = v52;
  sub_10000A428(v27, v48, &qword_1001AA620);
  uint64_t v35 = v32 + *(int *)(sub_10000570C(&qword_1001AA628) + 36);
  *(void *)uint64_t v35 = v28;
  *(void *)(v35 + 8) = v30;
  *(void *)(v35 + 16) = v31;
  *(_OWORD *)(v35 + 24) = v47;
  *(void *)(v35 + 40) = v33;
  *(void *)(v35 + 48) = v34;
  return sub_10000ACE0(v27, &qword_1001AA620);
}

double sub_1000D9874@<D0>(uint64_t (*a1)(void)@<X2>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  sub_10000570C(&qword_1001A6050);
  double v6 = COERCE_DOUBLE(swift_allocObject());
  *(_OWORD *)(*(void *)&v6 + 16) = xmmword_100152B80;
  *(void *)(*(void *)&v6 + 32) = a1();
  *(void *)(*(void *)&v6 + 40) = a2();
  *(double *)&long long v8 = v6;
  specialized Array._endMutation()();
  Gradient.init(colors:)();
  LinearGradient.init(gradient:startPoint:endPoint:)();
  double result = v6;
  *(_OWORD *)a3 = v8;
  *(_OWORD *)(a3 + 16) = v9;
  *(void *)(a3 + 32) = v10;
  return result;
}

double sub_1000D993C@<D0>(uint64_t a1@<X8>)
{
  sub_10000570C(&qword_1001A6050);
  double v2 = COERCE_DOUBLE(swift_allocObject());
  *(_OWORD *)(*(void *)&v2 + 16) = xmmword_100152B80;
  *(void *)(*(void *)&v2 + 32) = static Color.clear.getter();
  static Color.black.getter();
  uint64_t v3 = Color.opacity(_:)();
  swift_release();
  *(void *)(*(void *)&v2 + 40) = v3;
  *(double *)&long long v5 = v2;
  specialized Array._endMutation()();
  Gradient.init(colors:)();
  LinearGradient.init(gradient:startPoint:endPoint:)();
  double result = v2;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = v7;
  return result;
}

void *sub_1000D9A00@<X0>(unsigned char *a1@<X8>)
{
  static HorizontalAlignment.center.getter();
  sub_1000D9BA8((uint64_t)__src);
  static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  static Alignment.bottom.getter();
  sub_1001243C8(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)__src, 0.0, 1, INFINITY, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  double result = memcpy(a1, __src, 0x128uLL);
  a1[296] = 0;
  return result;
}

void sub_1000D9BA8(uint64_t a1@<X8>)
{
  type metadata accessor for TourPhotosView();
  uint64_t v2 = sub_1000D5068();
  uint64_t v3 = *(void *)(v2 + 48);
  uint64_t v23 = *(void *)(v2 + 40);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v4 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v21 = v5;
  uint64_t v22 = v4;
  char v19 = v6;
  uint64_t v20 = v7;
  uint64_t v8 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v10 = v9;
  char v12 = v11;
  uint64_t v14 = v13;
  sub_1000D5068();
  BOOL v15 = sub_100113548();
  swift_release();
  double v16 = 0.0;
  double v17 = 0.0;
  double v18 = 0.0;
  if (v15)
  {
    sub_1000D5068();
    double v16 = sub_100113580();
    swift_release();
    sub_1000D5068();
    double v17 = sub_100113598();
    swift_release();
    double v18 = sub_1000D5174();
  }
  *(void *)a1 = v22;
  *(void *)(a1 + 8) = v21;
  *(unsigned char *)(a1 + 16) = v19 & 1;
  *(void *)(a1 + 24) = v20;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 48) = v12 & 1;
  *(void *)(a1 + 56) = v14;
  *(void *)(a1 + 64) = v23;
  *(void *)(a1 + 72) = v3;
  *(double *)(a1 + 80) = v16;
  *(double *)(a1 + 88) = v17;
  *(double *)(a1 + 96) = v18;
  *(unsigned char *)(a1 + 104) = !v15;
}

uint64_t sub_1000D9D4C(uint64_t a1)
{
  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  swift_release();
  uint64_t v2 = type metadata accessor for TourPhotosView();
  uint64_t v3 = sub_1000D5068();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v4 = *(void *)(v3 + 24);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v6 = *(void *)(a1 + *(int *)(v2 + 44));
  if (v6)
  {
    swift_retain();
    sub_100116F94(v5, v4, 8, 1, 23, 0, 3u, v6);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10000E4F8();
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000D9E7C()
{
  type metadata accessor for TourPhotosView();
  uint64_t result = sub_1000D50A8();
  if ((v1 & 1) == 0)
  {
    sub_1000D5068();
    sub_100113598();
    swift_release();
    return sub_1000D51CC();
  }
  return result;
}

unint64_t sub_1000D9F04()
{
  unint64_t result = qword_1001AA4F8;
  if (!qword_1001AA4F8)
  {
    sub_100004A58(&qword_1001AA4E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA4F8);
  }
  return result;
}

uint64_t sub_1000D9F70@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D61D0(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000D9F7C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D84BC(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

void *sub_1000D9F88@<X0>(unsigned char *a1@<X8>)
{
  return sub_1000D9A00(a1);
}

unint64_t sub_1000D9F94()
{
  unint64_t result = qword_1001AA518;
  if (!qword_1001AA518)
  {
    sub_100004A58(&qword_1001AA510);
    sub_1000DA010();
    sub_10002D7EC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA518);
  }
  return result;
}

unint64_t sub_1000DA010()
{
  unint64_t result = qword_1001AA520;
  if (!qword_1001AA520)
  {
    sub_100004A58(&qword_1001AA528);
    sub_1000DA08C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA520);
  }
  return result;
}

unint64_t sub_1000DA08C()
{
  unint64_t result = qword_1001AA530;
  if (!qword_1001AA530)
  {
    sub_100004A58(&qword_1001AA538);
    sub_10000A780(&qword_1001AA540, &qword_1001AA548);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA530);
  }
  return result;
}

uint64_t sub_1000DA130()
{
  uint64_t v1 = *(void *)(type metadata accessor for TourPhotosView() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_1000D9D4C(v2);
}

uint64_t sub_1000DA1B4()
{
  return sub_1000D9E7C();
}

uint64_t sub_1000DA1D4@<X0>(uint64_t a1@<X8>, double a2@<D2>)
{
  uint64_t v56 = a1;
  uint64_t v55 = sub_10000570C(&qword_1001AA760) - 8;
  uint64_t v4 = __chkstk_darwin(v55, v3);
  uint64_t v53 = (uint64_t)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v6);
  uint64_t v54 = (uint64_t)&v48 - v7;
  uint64_t v8 = type metadata accessor for RoundedRectangle();
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8, v10);
  char v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000570C(&qword_1001A6748);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13, v15);
  double v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_10000570C(&qword_1001AA768) - 8;
  uint64_t v19 = __chkstk_darwin(v51, v18);
  uint64_t v21 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v22);
  uint64_t v52 = (uint64_t)&v48 - v23;
  uint64_t v24 = &v12[*(int *)(v9 + 28)];
  uint64_t v25 = enum case for RoundedCornerStyle.continuous(_:);
  unsigned int v49 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v26 = type metadata accessor for RoundedCornerStyle();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 104);
  uint64_t v50 = v27 + 104;
  v28(v24, v25, v26);
  __asm { FMOV            V0.2D, #1.0 }
  long long v48 = _Q0;
  *(_OWORD *)char v12 = _Q0;
  static Color.white.getter();
  uint64_t v34 = Color.opacity(_:)();
  swift_release();
  sub_1000243EC((uint64_t)v12, (uint64_t)v17);
  *(void *)&v17[*(int *)(v14 + 44)] = v34;
  sub_100024450((uint64_t)v12);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_10000A428((uint64_t)v17, (uint64_t)v21, &qword_1001A6748);
  uint64_t v35 = v51;
  uint64_t v36 = &v21[*(int *)(v51 + 44)];
  long long v37 = v58;
  *(_OWORD *)uint64_t v36 = v57;
  *((_OWORD *)v36 + 1) = v37;
  *((_OWORD *)v36 + 2) = v59;
  sub_10000ACE0((uint64_t)v17, &qword_1001A6748);
  uint64_t v38 = v52;
  sub_10000A3C4((uint64_t)v21, v52, &qword_1001AA768);
  v28(&v12[*(int *)(v9 + 28)], v49, v26);
  *(_OWORD *)char v12 = v48;
  static Color.white.getter();
  uint64_t v39 = Color.opacity(_:)();
  swift_release();
  sub_1000243EC((uint64_t)v12, (uint64_t)v17);
  *(void *)&v17[*(int *)(v14 + 44)] = v39;
  sub_100024450((uint64_t)v12);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_10000A428((uint64_t)v17, (uint64_t)v21, &qword_1001A6748);
  uint64_t v40 = &v21[*(int *)(v35 + 44)];
  long long v41 = v61;
  *(_OWORD *)uint64_t v40 = v60;
  *((_OWORD *)v40 + 1) = v41;
  *((_OWORD *)v40 + 2) = v62;
  sub_10000ACE0((uint64_t)v17, &qword_1001A6748);
  uint64_t v42 = v53;
  sub_10000A428((uint64_t)v21, v53, &qword_1001AA768);
  uint64_t v43 = v42 + *(int *)(v55 + 44);
  *(double *)uint64_t v43 = a2;
  *(void *)(v43 + 8) = 0;
  sub_10000ACE0((uint64_t)v21, &qword_1001AA768);
  uint64_t v44 = v54;
  sub_10000A3C4(v42, v54, &qword_1001AA760);
  sub_10000A428(v38, (uint64_t)v21, &qword_1001AA768);
  sub_10000A428(v44, v42, &qword_1001AA760);
  uint64_t v45 = v56;
  sub_10000A428((uint64_t)v21, v56, &qword_1001AA768);
  uint64_t v46 = sub_10000570C(&qword_1001AA770);
  sub_10000A428(v42, v45 + *(int *)(v46 + 48), &qword_1001AA760);
  sub_10000ACE0(v44, &qword_1001AA760);
  sub_10000ACE0(v38, &qword_1001AA768);
  sub_10000ACE0(v42, &qword_1001AA760);
  return sub_10000ACE0((uint64_t)v21, &qword_1001AA768);
}

uint64_t sub_1000DA69C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for BlendMode();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000570C(&qword_1001AA740);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (uint64_t *)((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = sub_10000570C(&qword_1001AA748);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = *(double *)(v1 + 16);
  *uint64_t v11 = static Alignment.leading.getter();
  v11[1] = v18;
  uint64_t v19 = sub_10000570C(&qword_1001AA750);
  sub_1000DA1D4((uint64_t)v11 + *(int *)(v19 + 44), v17);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v7, enum case for BlendMode.plusLighter(_:), v3);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(&v16[*(int *)(v13 + 44)], v7, v3);
  sub_10000A428((uint64_t)v11, (uint64_t)v16, &qword_1001AA740);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  sub_10000ACE0((uint64_t)v11, &qword_1001AA740);
  sub_10000A428((uint64_t)v16, a1, &qword_1001AA748);
  *(unsigned char *)(a1 + *(int *)(sub_10000570C(&qword_1001AA758) + 36)) = 1;
  return sub_10000ACE0((uint64_t)v16, &qword_1001AA748);
}

uint64_t sub_1000DA8EC()
{
  return swift_deallocObject();
}

uint64_t sub_1000DA8FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000D8888(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_1000DA904(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000DA984()
{
  unint64_t result = qword_1001AA568;
  if (!qword_1001AA568)
  {
    sub_100004A58(&qword_1001AA570);
    sub_1000DAA60();
    sub_100004A58(&qword_1001AA5D8);
    sub_10000A780(&qword_1001AA5E0, &qword_1001AA5D8);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA568);
  }
  return result;
}

unint64_t sub_1000DAA60()
{
  unint64_t result = qword_1001AA578;
  if (!qword_1001AA578)
  {
    sub_100004A58(&qword_1001AA580);
    sub_1000DAB00();
    sub_10000A780(&qword_1001AA5C8, &qword_1001AA5D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA578);
  }
  return result;
}

unint64_t sub_1000DAB00()
{
  unint64_t result = qword_1001AA588;
  if (!qword_1001AA588)
  {
    sub_100004A58(&qword_1001AA590);
    sub_1000DABA0();
    sub_10000A780(&qword_1001AA5B8, &qword_1001AA5C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA588);
  }
  return result;
}

unint64_t sub_1000DABA0()
{
  unint64_t result = qword_1001AA598;
  if (!qword_1001AA598)
  {
    sub_100004A58(&qword_1001AA5A0);
    sub_1000DB3D0(&qword_1001AA5A8, &qword_1001AA5B0);
    sub_10000A780(&qword_1001A91F0, &qword_1001A91F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA598);
  }
  return result;
}

uint64_t sub_1000DAC58@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D6530(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000DAC68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(type metadata accessor for TourPhotosView() - 8);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_1000D698C(v6, v3, v4, a1);
}

uint64_t sub_1000DAD0C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000DAD44(char *a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, char *))(v1 + 32);
  uint64_t v4 = *(void *)a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v3(v4, &a1[*(int *)(TupleTypeMetadata2 + 48)]);
}

uint64_t sub_1000DADBC()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for TourPhotosView() - 8) + 80);
  uint64_t v2 = v0 + ((v1 + 32) & ~v1);
  type metadata accessor for TourPhotosViewModel();
  uint64_t v3 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000DAF04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for TourPhotosView() - 8);
  uint64_t v8 = v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_1000D6BE8(a1, v8, v5, v6, a2);
}

unint64_t sub_1000DAFA0()
{
  unint64_t result = qword_1001AA640;
  if (!qword_1001AA640)
  {
    sub_100004A58(&qword_1001AA648);
    sub_1000DB01C();
    sub_1000DB478();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA640);
  }
  return result;
}

unint64_t sub_1000DB01C()
{
  unint64_t result = qword_1001AA650;
  if (!qword_1001AA650)
  {
    sub_100004A58(&qword_1001AA658);
    sub_1000DB098();
    sub_100048920();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA650);
  }
  return result;
}

unint64_t sub_1000DB098()
{
  unint64_t result = qword_1001AA660;
  if (!qword_1001AA660)
  {
    sub_100004A58(&qword_1001AA668);
    sub_1000DB138();
    sub_10000A780(&qword_1001AA5C8, &qword_1001AA5D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA660);
  }
  return result;
}

unint64_t sub_1000DB138()
{
  unint64_t result = qword_1001AA670;
  if (!qword_1001AA670)
  {
    sub_100004A58(&qword_1001AA678);
    sub_1000DB1D8();
    sub_10000A780(&qword_1001AA6E0, &qword_1001AA6E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA670);
  }
  return result;
}

unint64_t sub_1000DB1D8()
{
  unint64_t result = qword_1001AA680;
  if (!qword_1001AA680)
  {
    sub_100004A58(&qword_1001AA688);
    sub_1000DB278();
    sub_10000A780(&qword_1001AA6D0, &qword_1001AA6D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA680);
  }
  return result;
}

unint64_t sub_1000DB278()
{
  unint64_t result = qword_1001AA690;
  if (!qword_1001AA690)
  {
    sub_100004A58(&qword_1001AA698);
    sub_1000DB318();
    sub_10000A780(&qword_1001AA6C0, &qword_1001AA6C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA690);
  }
  return result;
}

unint64_t sub_1000DB318()
{
  unint64_t result = qword_1001AA6A0;
  if (!qword_1001AA6A0)
  {
    sub_100004A58(&qword_1001AA6A8);
    sub_1000DB3D0(&qword_1001AA6B0, &qword_1001AA6B8);
    sub_10000A780(&qword_1001A91F0, &qword_1001A91F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA6A0);
  }
  return result;
}

uint64_t sub_1000DB3D0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    sub_100004A58(&qword_1001A91E8);
    sub_1000B0B8C();
    swift_getOpaqueTypeConformance2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000DB478()
{
  unint64_t result = qword_1001AA6F0;
  if (!qword_1001AA6F0)
  {
    sub_100004A58(&qword_1001AA6F8);
    sub_100004A58(&qword_1001AA5D8);
    sub_10000A780(&qword_1001AA5E0, &qword_1001AA5D8);
    swift_getOpaqueTypeConformance2();
    sub_10000A780(&qword_1001AA5C8, &qword_1001AA5D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA6F0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TourPhotosScrollBar(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TourPhotosScrollBar(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for TourPhotosScrollBar()
{
  return &type metadata for TourPhotosScrollBar;
}

uint64_t sub_1000DB5D4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000DBA68()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1000DBA88()
{
  unint64_t result = qword_1001AA778;
  if (!qword_1001AA778)
  {
    sub_100004A58(&qword_1001AA758);
    sub_1000DBB04();
    sub_100048920();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA778);
  }
  return result;
}

unint64_t sub_1000DBB04()
{
  unint64_t result = qword_1001AA780;
  if (!qword_1001AA780)
  {
    sub_100004A58(&qword_1001AA748);
    sub_10000A780(qword_1001AA788, &qword_1001AA740);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA780);
  }
  return result;
}

uint64_t sub_1000DBBA4()
{
  type metadata accessor for Optional();
  uint64_t result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000DBC50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  uint64_t v4 = (char *)a3 + *(int *)(type metadata accessor for PageControl() + 36);
  type metadata accessor for Optional();
  uint64_t v5 = type metadata accessor for Binding();
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);

  return v6(v4, a2, v5);
}

id sub_1000DBCF4()
{
  id v0 = [self labelColor];
  id v1 = [v0 colorWithAlphaComponent:0.3];

  return v1;
}

uint64_t sub_1000DBD60(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  type metadata accessor for Optional();
  uint64_t v3 = type metadata accessor for Binding();
  return a2(v3);
}

uint64_t sub_1000DBDB8(uint64_t a1)
{
  type metadata accessor for Optional();
  uint64_t v2 = type metadata accessor for Binding();
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v8 - v4;
  type metadata accessor for PageControl.Coordinator();
  sub_1000DBD60(a1, (uint64_t (*)(uint64_t))&Binding.projectedValue.getter);
  uint64_t v6 = swift_allocObject();
  sub_1000DC470((uint64_t)v5);
  return v6;
}

uint64_t sub_1000DBE8C(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  sub_1000DC470(a1);
  return v2;
}

id sub_1000DBECC()
{
  id v0 = [objc_allocWithZone((Class)UIPageControl) init];
  swift_getWitnessTable();
  type metadata accessor for UIViewRepresentableContext();
  UIViewRepresentableContext.coordinator.getter();
  [v0 addTarget:v4 action:"pageDidChange:" forControlEvents:4096];
  swift_release();
  [v0 setNumberOfPages:Array.count.getter()];
  id v1 = sub_1000DBCF4();
  [v0 setPageIndicatorTintColor:v1];

  id v2 = [self labelColor];
  [v0 setCurrentPageIndicatorTintColor:v2];

  return v0;
}

uint64_t sub_1000DC00C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v34 = a1;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v31 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7, v7);
  uint64_t v35 = (char *)&v30 - v9;
  uint64_t v36 = *(void *)(v6 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v32 = v12;
  uint64_t v33 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Binding();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  double v17 = (char *)&v30 - v16;
  swift_getWitnessTable();
  type metadata accessor for UIViewRepresentableContext();
  UIViewRepresentableContext.coordinator.getter();
  uint64_t v18 = v40;
  uint64_t v19 = *v3;
  uint64_t v20 = (void *)(v40 + *(void *)(*(void *)v40 + 104));
  swift_beginAccess();
  *uint64_t v20 = v19;
  uint64_t v21 = v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1000DBD60(a3, (uint64_t (*)(uint64_t))&Binding.projectedValue.getter);
  uint64_t v22 = v18 + *(void *)(*(void *)v18 + 96);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 40))(v22, v17, v13);
  swift_endAccess();
  id v23 = [v21 numberOfPages];
  uint64_t v24 = *v4;
  if (v23 != (id)Array.count.getter()) {
    [v21 setNumberOfPages:Array.count.getter()];
  }
  uint64_t v25 = v35;
  sub_1000DBD60(a3, (uint64_t (*)(uint64_t))&Binding.wrappedValue.getter);
  uint64_t v26 = v36;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v25, 1, v6) == 1)
  {
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v25, v32);
  }
  else
  {
    uint64_t v28 = v33;
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v33, v25, v6);
    uint64_t v37 = v24;
    type metadata accessor for Array();
    swift_getWitnessTable();
    Collection<>.firstIndex(of:)();
    if (v39 == 1 || (id v29 = v38, v29 == [v21 currentPage]))
    {
      (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v6);
      return swift_release();
    }
    else
    {
      [v21 setCurrentPage:v29];
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v28, v6);
    }
  }
}

uint64_t sub_1000DC470(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 104);
  *(void *)(v1 + v3) = static Array._allocateUninitialized(_:)();
  uint64_t v4 = v1 + *(void *)(*(void *)v1 + 96);
  type metadata accessor for Optional();
  uint64_t v5 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(v4, a1, v5);
  return v1;
}

uint64_t sub_1000DC53C(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)v2 + 80);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v7 = (char *)v13 - v6;
  uint64_t v9 = (void *)(v2 + *(void *)(v8 + 104));
  swift_beginAccess();
  *(void *)&long long v15 = *v9;
  type metadata accessor for Array();
  swift_getWitnessTable();
  RandomAccessCollection<>.indices.getter();
  long long v15 = v13[1];
  id v14 = [a1 currentPage];
  sub_10000570C(qword_1001AA810);
  uint64_t result = Range.contains(_:)();
  if (result)
  {
    [a1 currentPage];
    swift_beginAccess();
    Array.subscript.getter();
    swift_endAccess();
    id v11 = [a1 interactionState];
    if (v11 != (id)2) {
      id v11 = (id)static Animation.default.getter();
    }
    __chkstk_darwin(v11, v12);
    *(void *)&v13[-1] = v2;
    *((void *)&v13[-1] + 1) = v7;
    withAnimation<A>(_:_:)();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

uint64_t sub_1000DC790(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 80);
  uint64_t v6 = type metadata accessor for Optional();
  __chkstk_darwin(v6, v6);
  uint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = type metadata accessor for Binding();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v17 - v12;
  uint64_t v14 = (uint64_t)a1 + *(void *)(v4 + 96);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v14, v9);
  uint64_t v15 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v8, a2, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v8, 0, 1, v5);
  Binding.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t sub_1000DC99C(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  swift_retain();
  sub_1000DC53C(v3, v4);

  return swift_release();
}

uint64_t sub_1000DC9EC()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 96);
  type metadata accessor for Optional();
  uint64_t v2 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000DCA9C()
{
  sub_1000DC9EC();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PageControl.Coordinator()
{
  return sub_10000B72C();
}

uint64_t sub_1000DCB14@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000DBDB8(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000DCB3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, WitnessTable);
}

uint64_t sub_1000DCBB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, WitnessTable);
}

void sub_1000DCC34()
{
}

uint64_t sub_1000DCC74()
{
  return sub_1000DC790(*(uint64_t **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t type metadata accessor for PageControl()
{
  return sub_10000B72C();
}

uint64_t sub_1000DCCA8()
{
  type metadata accessor for Optional();
  uint64_t result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1000DCD54(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  unint64_t v9 = v7 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = v7 + 8;
  uint64_t v11 = v7 + 16;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v12 = *(void *)(v5 + 64);
  }
  else {
    size_t v12 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v13 = ((v7 + 16) & ~(unint64_t)v7)
      + v12
      + (v9 & (v7 + 8));
  int v14 = v7 & 0x100000;
  uint64_t v15 = *a2;
  *a1 = *a2;
  if (v8 > 7 || v14 != 0 || v13 > 0x18)
  {
    a1 = (uint64_t *)(v15 + (v9 & v11));
    swift_retain();
  }
  else
  {
    uint64_t v18 = (void *)(v9 & ((unint64_t)a1 + 15));
    uint64_t v19 = (void *)(v9 & ((unint64_t)a2 + 15));
    *uint64_t v18 = *v19;
    uint64_t v20 = ~v8;
    uint64_t v21 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v21 = *v22;
    id v23 = (void *)(((unint64_t)v21 + v10) & v20);
    uint64_t v24 = (const void *)(((unint64_t)v22 + v10) & v20);
    uint64_t v25 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    if (v25(v24, 1, v4))
    {
      memcpy(v23, v24, v12);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v23, v24, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v23, 0, 1, v4);
    }
  }
  return a1;
}

uint64_t sub_1000DCF04(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(v4 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v9 + 80);
  swift_release();
  swift_release();
  unint64_t v6 = (v5 + ((((a1 + (v5 | 7) + 8) & ~(v5 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v5;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v6, 1, v4);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(unint64_t, uint64_t))(v9 + 8);
    return v8(v6, v4);
  }
  return result;
}

void *sub_1000DD004(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 | 7) + 8;
  uint64_t v9 = (void *)(((unint64_t)a1 + v8) & ~(v7 | 7));
  uint64_t v10 = (void *)(((unint64_t)a2 + v8) & ~(v7 | 7));
  *uint64_t v9 = *v10;
  uint64_t v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  size_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v11 = *v12;
  unint64_t v13 = (void *)(((unint64_t)v11 + v7 + 8) & ~v7);
  int v14 = (const void *)(((unint64_t)v12 + v7 + 8) & ~v7);
  uint64_t v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if (v15(v14, 1, v4))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v16 = *(void *)(v6 + 64);
    }
    else {
      size_t v16 = *(void *)(v6 + 64) + 1;
    }
    memcpy(v13, v14, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v13, v14, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v13, 0, 1, v4);
  }
  return a1;
}

void *sub_1000DD174(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 | 7) + 8;
  uint64_t v10 = (void *)(((unint64_t)a1 + v9) & ~(v8 | 7));
  uint64_t v11 = (void *)(((unint64_t)a2 + v9) & ~(v8 | 7));
  *uint64_t v10 = *v11;
  swift_retain();
  swift_release();
  size_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *size_t v12 = *v13;
  swift_retain();
  swift_release();
  int v14 = (void *)(((unint64_t)v12 + v8 + 8) & ~v8);
  uint64_t v15 = (void *)(((unint64_t)v13 + v8 + 8) & ~v8);
  size_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v12) = v16(v14, 1, v6);
  int v17 = v16(v15, 1, v6);
  if (v12)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v14, v15, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v6);
      return a1;
    }
    int v18 = *(_DWORD *)(v7 + 84);
    size_t v19 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(v14, v15, v6);
      return a1;
    }
    uint64_t v21 = *(void (**)(void *, uint64_t))(v7 + 8);
    uint64_t v20 = v7 + 8;
    v21(v14, v6);
    int v18 = *(_DWORD *)(v20 + 76);
    size_t v19 = *(void *)(v20 + 56);
  }
  if (v18) {
    size_t v22 = v19;
  }
  else {
    size_t v22 = v19 + 1;
  }
  memcpy(v14, v15, v22);
  return a1;
}

void *sub_1000DD354(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 | 7) + 8;
  uint64_t v9 = (void *)(((unint64_t)a1 + v8) & ~(v7 | 7));
  uint64_t v10 = (void *)(((unint64_t)a2 + v8) & ~(v7 | 7));
  *uint64_t v9 = *v10;
  uint64_t v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  size_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v11 = *v12;
  unint64_t v13 = (void *)(((unint64_t)v11 + v7 + 8) & ~v7);
  int v14 = (const void *)(((unint64_t)v12 + v7 + 8) & ~v7);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v14, 1, v4))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v15 = *(void *)(v6 + 64);
    }
    else {
      size_t v15 = *(void *)(v6 + 64) + 1;
    }
    memcpy(v13, v14, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v13, v14, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v13, 0, 1, v4);
  }
  return a1;
}

void *sub_1000DD4A0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 | 7) + 8;
  uint64_t v10 = (void *)(((unint64_t)a1 + v9) & ~(v8 | 7));
  uint64_t v11 = (void *)(((unint64_t)a2 + v9) & ~(v8 | 7));
  *uint64_t v10 = *v11;
  swift_release();
  size_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *size_t v12 = *v13;
  swift_release();
  int v14 = (void *)(((unint64_t)v12 + v8 + 8) & ~v8);
  size_t v15 = (void *)(((unint64_t)v13 + v8 + 8) & ~v8);
  size_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v12) = v16(v14, 1, v6);
  int v17 = v16(v15, 1, v6);
  if (v12)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v14, v15, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v6);
      return a1;
    }
    int v18 = *(_DWORD *)(v7 + 84);
    size_t v19 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(v14, v15, v6);
      return a1;
    }
    uint64_t v21 = *(void (**)(void *, uint64_t))(v7 + 8);
    uint64_t v20 = v7 + 8;
    v21(v14, v6);
    int v18 = *(_DWORD *)(v20 + 76);
    size_t v19 = *(void *)(v20 + 56);
  }
  if (v18) {
    size_t v22 = v19;
  }
  else {
    size_t v22 = v19 + 1;
  }
  memcpy(v14, v15, v22);
  return a1;
}

uint64_t sub_1000DD668(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  int v6 = v5 - 1;
  if (!v5) {
    int v6 = 0;
  }
  if (v6 <= 0x7FFFFFFF) {
    int v7 = 0x7FFFFFFF;
  }
  else {
    int v7 = v6;
  }
  if (v6 >= 0) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  if (v5) {
    uint64_t v10 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v10 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = v9 | 7;
  uint64_t v12 = v9 + 8;
  int v13 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_31;
  }
  uint64_t v14 = v10 + ((v9 + 16) & ~v9) + (v12 & ~v11);
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v18 = ((v13 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v18))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_31;
      }
      goto LABEL_23;
    }
    if (v18 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_31;
      }
      goto LABEL_23;
    }
    if (v18 < 2)
    {
LABEL_31:
      if (v8 == 0x7FFFFFFF)
      {
        uint64_t v20 = *(void *)a1;
        if (*(void *)a1 >= 0xFFFFFFFFuLL) {
          LODWORD(v20) = -1;
        }
        return (v20 + 1);
      }
      else
      {
        unsigned int v21 = (*(uint64_t (**)(unint64_t))(v4 + 48))((v12
                                                                     + (((((unint64_t)a1 + v11 + 8) & ~v11) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v9);
        if (v21 >= 2) {
          return v21 - 1;
        }
        else {
          return 0;
        }
      }
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_31;
  }
LABEL_23:
  int v19 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v19 = 0;
  }
  if (v14)
  {
    if (v14 > 3) {
      LODWORD(v14) = 4;
    }
    switch((int)v14)
    {
      case 2:
        LODWORD(v14) = *a1;
        break;
      case 3:
        LODWORD(v14) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v14) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v14) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v14 | v19) + 1;
}

void sub_1000DD878(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  int v9 = v8 - 1;
  if (!v8) {
    int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  if (v9 >= 0) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((v11 + 16) & ~v11) + v12 + ((v11 + 8) & ~(v11 | 7));
  BOOL v14 = a3 >= v10;
  unsigned int v15 = a3 - v10;
  if (v15 == 0 || !v14)
  {
LABEL_19:
    if (v10 < a2) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }
  if (v13 > 3)
  {
    int v6 = 1;
    if (v10 < a2) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }
  unsigned int v16 = ((v15 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
  if (!HIWORD(v16))
  {
    if (v16 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v16 > 1;
    }
    goto LABEL_19;
  }
  int v6 = 4;
  if (v10 < a2)
  {
LABEL_20:
    unsigned int v17 = ~v10 + a2;
    if (v13 < 4)
    {
      int v18 = (v17 >> (8 * v13)) + 1;
      if (v13)
      {
        int v19 = v17 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if (v13 == 3)
        {
          *(_WORD *)a1 = v19;
          a1[2] = BYTE2(v19);
        }
        else if (v13 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v18;
        return;
      case 3:
        goto LABEL_62;
      case 4:
        *(_DWORD *)&a1[v13] = v18;
        return;
      default:
        return;
    }
  }
LABEL_27:
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 3:
LABEL_62:
      __break(1u);
      JUMPOUT(0x1000DDBB8);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_31;
    default:
LABEL_31:
      if (a2)
      {
LABEL_32:
        if (v10 == 0x7FFFFFFF)
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v20 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v20 = a2 - 1;
          }
          *(void *)a1 = v20;
        }
        else
        {
          unsigned int v21 = (unsigned char *)((v11 + 8 + ((((unint64_t)&a1[(v11 | 7) + 8] & ~(v11 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v11);
          if (v9 >= a2)
          {
            uint64_t v25 = a2 + 1;
            uint64_t v26 = *(void (**)(unsigned char *, uint64_t))(v7 + 56);
            v26(v21, v25);
          }
          else
          {
            if (v12 <= 3) {
              int v22 = ~(-1 << (8 * v12));
            }
            else {
              int v22 = -1;
            }
            if (v12)
            {
              int v23 = v22 & (~v9 + a2);
              if (v12 <= 3) {
                int v24 = v12;
              }
              else {
                int v24 = 4;
              }
              bzero(v21, v12);
              switch(v24)
              {
                case 2:
                  *(_WORD *)unsigned int v21 = v23;
                  break;
                case 3:
                  *(_WORD *)unsigned int v21 = v23;
                  void v21[2] = BYTE2(v23);
                  break;
                case 4:
                  *(_DWORD *)unsigned int v21 = v23;
                  break;
                default:
                  *unsigned int v21 = v23;
                  break;
              }
            }
          }
        }
      }
      return;
  }
}

uint64_t sub_1000DDBF0()
{
  return swift_getWitnessTable();
}

uint64_t *sub_1000DDC0C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  id v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *id v3 = *a2;
    id v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = *(int *)(a3 + 24);
    int v8 = (char *)a1 + v7;
    int v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t sub_1000DDD04(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_1000DDD84(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  int v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

void *sub_1000DDE2C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  int v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *sub_1000DDEE8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

void *sub_1000DDF64(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_1000DE000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000DE014);
}

uint64_t sub_1000DE014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000DE0C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000DE0D8);
}

uint64_t sub_1000DE0D8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for AttributionViewModel()
{
  uint64_t result = qword_1001AA8F0;
  if (!qword_1001AA8F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000DE1CC()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000DE264@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v40 = a1;
  uint64_t v3 = type metadata accessor for AttributionViewModel();
  __chkstk_darwin(v3, v4);
  uint64_t v45 = (uint64_t)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AttributedString.MarkdownParsingOptions.FailurePolicy();
  uint64_t v43 = *(void *)(v6 - 8);
  uint64_t v44 = v6;
  __chkstk_darwin(v6, v7);
  uint64_t v42 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for AttributedString.MarkdownParsingOptions.InterpretedSyntax();
  uint64_t v9 = *(void *)(v41 - 8);
  __chkstk_darwin(v41, v10);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AttributedString.MarkdownParsingOptions();
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v15 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v15 - 8, v16);
  int v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000570C(&qword_1001A5928);
  __chkstk_darwin(v19 - 8, v20);
  int v22 = (char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v23 = [self mainBundle];
  v47._object = (void *)0xE000000000000000;
  v24._object = (void *)0x800000010015F180;
  v24._countAndFlagsBits = 0xD00000000000001FLL;
  v25._countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  v47._countAndFlagsBits = 0;
  Swift::String v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v24, (Swift::String_optional)0, (NSBundle)v23, v25, v47);

  Swift::String v46 = v26;
  v27._countAndFlagsBits = 23328;
  v27._object = (void *)0xE200000000000000;
  String.append(_:)(v27);
  uint64_t v28 = *(void *)(v2 + 16);
  id v29 = *(void **)(v2 + 24);
  swift_bridgeObjectRetain();
  v30._countAndFlagsBits = v28;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = 10333;
  v31._object = (void *)0xE200000000000000;
  String.append(_:)(v31);
  uint64_t v32 = type metadata accessor for URL();
  sub_10004DD9C();
  v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v34._countAndFlagsBits = 41;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v18, 1, 1, v32);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for AttributedString.MarkdownParsingOptions.InterpretedSyntax.full(_:), v41);
  (*(void (**)(char *, void, uint64_t))(v43 + 104))(v42, enum case for AttributedString.MarkdownParsingOptions.FailurePolicy.throwError(_:), v44);
  AttributedString.MarkdownParsingOptions.init(allowsExtendedAttributes:interpretedSyntax:failurePolicy:languageCode:)();
  AttributedString.init(markdown:options:baseURL:)();
  uint64_t v35 = type metadata accessor for AttributedString();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v22, 0, 1, v35);
  uint64_t v36 = v45;
  sub_1000DEC14(v2, v45);
  type metadata accessor for AttributedString();
  uint64_t v37 = *(void *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v22, 1, v35) == 1)
  {
    sub_1000DE7A4();
    sub_1000DEC78(v36);
    return sub_1000DECD4((uint64_t)v22);
  }
  else
  {
    sub_1000DEC78(v36);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v37 + 32))(v40, v22, v35);
  }
}

uint64_t sub_1000DE7A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AttributeContainer();
  __chkstk_darwin(v2 - 8, v3);
  id v4 = [self mainBundle];
  v12._object = (void *)0xE000000000000000;
  v5._object = (void *)0x800000010015F180;
  v5._countAndFlagsBits = 0xD00000000000001FLL;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v12._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v5, (Swift::String_optional)0, (NSBundle)v4, v6, v12);

  v7._countAndFlagsBits = 32;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v8 = *(void **)(v1 + 24);
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = v9;
  v10._object = v8;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  AttributeContainer.init()();
  return AttributedString.init(_:attributes:)();
}

void sub_1000DE8E8(uint64_t a1)
{
  sub_10000570C(&qword_1001A5390);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100152B90;
  uint64_t v5 = *v1;
  uint64_t v4 = v1[1];
  *(void *)(v3 + 56) = &type metadata for AnalyticsString;
  *(void *)(v3 + 64) = &off_1001AAD38;
  *(unsigned char *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = v5;
  *(void *)(v3 + 48) = v4;
  *(void *)(v3 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v3 + 104) = &off_1001AAD10;
  *(unsigned char *)(v3 + 72) = 0;
  *(void *)(v3 + 136) = &type metadata for AnalyticsModuleName;
  *(void *)(v3 + 144) = &off_1001AAD98;
  *(unsigned char *)(v3 + 112) = 5;
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  *(void *)(v3 + 176) = &type metadata for AnalyticsModuleAction;
  *(void *)(v3 + 184) = &off_1001AAD70;
  *(void *)(v3 + 152) = v6;
  *(void *)(v3 + 160) = v7;
  *(unsigned char *)(v3 + 168) = 0;
  if (*(void *)(a1 + 72))
  {
    uint64_t v8 = *(void *)(a1 + 64);
    unint64_t v9 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0xE000000000000000;
  }
  id v23 = &type metadata for AnalyticsString;
  Swift::String v24 = (void *(*)())&off_1001AAD38;
  LOBYTE(aBlock) = 1;
  uint64_t v21 = v8;
  int v22 = (Class (*)(uint64_t))v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::String v26 = sub_1001378BC((char *)1, 5, 1, (char *)v3);
  uint64_t v10 = sub_100007534((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __n128 v11 = __chkstk_darwin(v10, v10);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v14 + 16))(v13, v11);
  sub_100116BFC(4, (uint64_t)v13, (uint64_t *)&v26, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_1001AAD38);
  sub_100007584((uint64_t)&aBlock);
  uint64_t v15 = v26;
  NSString v16 = String._bridgeToObjectiveC()();
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = 0xD00000000000001ELL;
  v17[3] = 0x800000010015D360;
  v17[4] = v15;
  Swift::String v24 = sub_100007614;
  Swift::String v25 = v17;
  aBlock = _NSConcreteStackBlock;
  uint64_t v21 = 1107296256;
  int v22 = sub_100116B70;
  id v23 = (ValueMetadata *)&unk_100199E00;
  int v18 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v18);
  swift_bridgeObjectRelease();
}

uint64_t sub_1000DEBBC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1000DEBFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000DEC0C()
{
  return swift_release();
}

uint64_t sub_1000DEC14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttributionViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000DEC78(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AttributionViewModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000DECD4(uint64_t a1)
{
  uint64_t v2 = sub_10000570C(&qword_1001A5928);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *assignWithCopy for PromotionalAssetsEntryView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for PromotionalAssetsEntryView()
{
  return &type metadata for PromotionalAssetsEntryView;
}

uint64_t sub_1000DEDA4()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_1000DEDC0@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000DFDDC(qword_1001A8E18, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsPhotoEntryViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  double result = *(double *)(v3 + 112);
  *a2 = result;
  return result;
}

uint64_t sub_1000DEE68()
{
  return swift_release();
}

double sub_1000DEF40@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000DFDDC(qword_1001A8E18, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsPhotoEntryViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  double result = *(double *)(v3 + 120);
  *a2 = result;
  return result;
}

uint64_t sub_1000DEFE8()
{
  return swift_release();
}

uint64_t sub_1000DF0C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v73 = a2;
  uint64_t v78 = a3;
  uint64_t v4 = type metadata accessor for CoordinateSpace();
  uint64_t v70 = *(void *)(v4 - 8);
  uint64_t v71 = v4;
  __chkstk_darwin(v4, v5);
  uint64_t v67 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PhotoEntryView(0);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (uint64_t *)((char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v68 = sub_10000570C(&qword_1001AA948);
  __chkstk_darwin(v68, v11);
  uint64_t v66 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_10000570C(&qword_1001AA950);
  uint64_t v14 = __chkstk_darwin(v77, v13);
  uint64_t v69 = (uint64_t)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v16);
  uint64_t v72 = (uint64_t)&v64 - v17;
  uint64_t v74 = sub_10000570C(&qword_1001AA958);
  __chkstk_darwin(v74, v18);
  uint64_t v76 = (uint64_t)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for DefaultEntryView(0);
  uint64_t v21 = __chkstk_darwin(v75, v20);
  id v23 = (uint64_t *)((char *)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v21, v24);
  Swift::String v26 = (char *)&v64 - v25;
  uint64_t v27 = sub_10000570C(&qword_1001AD200);
  uint64_t v29 = __chkstk_darwin(v27 - 8, v28);
  Swift::String v31 = (char *)&v64 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29, v32);
  Swift::String v34 = (char *)&v64 - v33;
  uint64_t v35 = type metadata accessor for URL();
  uint64_t v36 = *(void *)(v35 - 8);
  __chkstk_darwin(v35, v37);
  uint64_t v39 = (char *)&v64 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = a1;
  uint64_t v80 = v73;
  sub_10000570C(&qword_1001AA960);
  State.wrappedValue.getter();
  sub_1000D3894((uint64_t)v34);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35) == 1)
  {
    sub_10000ACE0((uint64_t)v34, &qword_1001AD200);
    *id v23 = swift_getKeyPath();
    sub_10000570C(&qword_1001A5468);
    swift_storeEnumTagMultiPayload();
    uint64_t v40 = v75;
    uint64_t v41 = (char *)v23 + *(int *)(v75 + 20);
    *(void *)uint64_t v41 = LocalizedStringKey.init(stringLiteral:)();
    *((void *)v41 + 1) = v42;
    v41[16] = v43 & 1;
    *((void *)v41 + 3) = v44;
    uint64_t v45 = (char *)v23 + *(int *)(v40 + 24);
    *(void *)uint64_t v45 = LocalizedStringKey.init(stringLiteral:)();
    *((void *)v45 + 1) = v46;
    v45[16] = v47 & 1;
    *((void *)v45 + 3) = v48;
    sub_1000E5074((uint64_t)v23, (uint64_t)v26, type metadata accessor for DefaultEntryView);
    sub_1000DFC04((uint64_t)v26, v76, type metadata accessor for DefaultEntryView);
    swift_storeEnumTagMultiPayload();
    sub_1000DFC6C();
    sub_1000DFDDC(&qword_1001AA9A0, (void (*)(uint64_t))type metadata accessor for DefaultEntryView);
    _ConditionalContent<>.init(storage:)();
    return sub_1000DFE24((uint64_t)v26, type metadata accessor for DefaultEntryView);
  }
  else
  {
    uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
    uint64_t v65 = v39;
    v50(v39, v34, v35);
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v31, v39, v35);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v31, 0, 1, v35);
    type metadata accessor for PromotionalAssetsPhotoEntryViewModel();
    swift_allocObject();
    uint64_t v51 = sub_1000A8134((uint64_t)v31);
    uint64_t v81 = v51;
    swift_retain();
    State.init(wrappedValue:)();
    uint64_t v52 = v80;
    *uint64_t v10 = v79;
    v10[1] = v52;
    uint64_t v53 = (void *)((char *)v10 + *(int *)(v7 + 20));
    uint64_t *v53 = swift_getKeyPath();
    sub_10000570C(&qword_1001A5468);
    swift_storeEnumTagMultiPayload();
    uint64_t v55 = v70;
    uint64_t v54 = v71;
    uint64_t v56 = v67;
    (*(void (**)(char *, void, uint64_t))(v70 + 104))(v67, enum case for CoordinateSpace.local(_:), v71);
    uint64_t v57 = (uint64_t)v66;
    long long v58 = &v66[*(int *)(v68 + 36)];
    uint64_t v59 = sub_10000570C(&qword_1001AA988);
    (*(void (**)(char *, char *, uint64_t))(v55 + 16))(&v58[*(int *)(v59 + 36)], v56, v54);
    *(void *)long long v58 = &type metadata for PhotoEntryViewSizePreferenceKey;
    long long v60 = (void (**)(double *@<X8>, double@<D2>, double@<D3>))&v58[*(int *)(v59 + 40)];
    char *v60 = sub_100074E78;
    v60[1] = 0;
    sub_1000DFC04((uint64_t)v10, v57, type metadata accessor for PhotoEntryView);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v54);
    sub_1000DFE24((uint64_t)v10, type metadata accessor for PhotoEntryView);
    uint64_t v61 = v69;
    sub_10000A428(v57, v69, &qword_1001AA948);
    long long v62 = (uint64_t (**)())(v61 + *(int *)(v77 + 36));
    *long long v62 = sub_1000DFE84;
    v62[1] = (uint64_t (*)())v51;
    swift_retain();
    sub_10000ACE0(v57, &qword_1001AA948);
    uint64_t v63 = v72;
    sub_10000A3C4(v61, v72, &qword_1001AA950);
    sub_10000A428(v63, v76, &qword_1001AA950);
    swift_storeEnumTagMultiPayload();
    sub_1000DFC6C();
    sub_1000DFDDC(&qword_1001AA9A0, (void (*)(uint64_t))type metadata accessor for DefaultEntryView);
    _ConditionalContent<>.init(storage:)();
    swift_release();
    sub_10000ACE0(v63, &qword_1001AA950);
    return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v65, v35);
  }
}

uint64_t sub_1000DF8E4()
{
  return swift_release();
}

uint64_t sub_1000DFA1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for RoundedRectangle();
  uint64_t v4 = v3 - 8;
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (_OWORD *)((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_10000570C(&qword_1001AA930);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000DF0C0(*v1, v1[1], (uint64_t)v11);
  uint64_t v12 = (char *)v7 + *(int *)(v4 + 28);
  uint64_t v13 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v14 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 104))(v12, v13, v14);
  __asm { FMOV            V0.2D, #16.0 }
  _OWORD *v7 = _Q0;
  uint64_t v20 = a1 + *(int *)(sub_10000570C(&qword_1001AA938) + 36);
  sub_1000DFC04((uint64_t)v7, v20, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(unsigned char *)(v20 + *(int *)(sub_10000570C(&qword_1001AA940) + 36)) = 0;
  sub_10000A428((uint64_t)v11, a1, &qword_1001AA930);
  sub_1000DFE24((uint64_t)v7, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  return sub_10000ACE0((uint64_t)v11, &qword_1001AA930);
}

uint64_t type metadata accessor for PhotoEntryView(uint64_t a1)
{
  return sub_10003859C(a1, qword_1001AAA98);
}

uint64_t type metadata accessor for DefaultEntryView(uint64_t a1)
{
  return sub_10003859C(a1, qword_1001AAA00);
}

uint64_t sub_1000DFC04(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1000DFC6C()
{
  unint64_t result = qword_1001AA968;
  if (!qword_1001AA968)
  {
    sub_100004A58(&qword_1001AA950);
    sub_1000DFD0C();
    sub_10000A780(&qword_1001AA990, &qword_1001AA998);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA968);
  }
  return result;
}

unint64_t sub_1000DFD0C()
{
  unint64_t result = qword_1001AA970;
  if (!qword_1001AA970)
  {
    sub_100004A58(&qword_1001AA948);
    sub_1000DFDDC(&qword_1001AA978, (void (*)(uint64_t))type metadata accessor for PhotoEntryView);
    sub_10000A780(&qword_1001AA980, &qword_1001AA988);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AA970);
  }
  return result;
}

uint64_t sub_1000DFDDC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000DFE24(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000DFE84()
{
  return sub_1000DF8E4();
}

uint64_t sub_1000DFE94()
{
  return sub_1000A80B4(*(void *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_1000DFEBC()
{
  return sub_1000A812C(*(void *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t *sub_1000DFEDC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_10000570C(&qword_1001A5468);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = *(int *)(a3 + 24);
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    uint64_t v13 = *((void *)v12 + 1);
    *(void *)uint64_t v11 = *(void *)v12;
    *((void *)v11 + 1) = v13;
    v11[16] = v12[16];
    *((void *)v11 + 3) = *((void *)v12 + 3);
    uint64_t v14 = (char *)a1 + v10;
    uint64_t v15 = (char *)a2 + v10;
    uint64_t v16 = *((void *)v15 + 1);
    *(void *)uint64_t v14 = *(void *)v15;
    *((void *)v14 + 1) = v16;
    v14[16] = v15[16];
    *((void *)v14 + 3) = *((void *)v15 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1000E004C(uint64_t a1)
{
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_1000E0118(void *a1, void *a2, uint64_t a3)
{
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v7;
  uint64_t v10 = (char *)a2 + v7;
  uint64_t v11 = *((void *)v10 + 1);
  *(void *)uint64_t v9 = *(void *)v10;
  *((void *)v9 + 1) = v11;
  unsigned char v9[16] = v10[16];
  *((void *)v9 + 3) = *((void *)v10 + 3);
  uint64_t v12 = (char *)a1 + v8;
  uint64_t v13 = (char *)a2 + v8;
  uint64_t v14 = *((void *)v13 + 1);
  *(void *)uint64_t v12 = *(void *)v13;
  *((void *)v12 + 1) = v14;
  v12[16] = v13[16];
  *((void *)v12 + 3) = *((void *)v13 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1000E0238(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10000ACE0((uint64_t)a1, &qword_1001A5468);
    sub_10000570C(&qword_1001A5468);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *(void *)uint64_t v8 = *(void *)((char *)a2 + v7);
  *((void *)v8 + 1) = *(void *)((char *)a2 + v7 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[16] = v9[16];
  *((void *)v8 + 3) = *((void *)v9 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v11 = *(void *)((char *)a2 + v10);
  *((void *)v11 + 1) = *(void *)((char *)a2 + v10 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11[16] = v12[16];
  *((void *)v11 + 3) = *((void *)v12 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_1000E03B0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  long long v12 = *((_OWORD *)v11 + 1);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *((_OWORD *)v10 + 1) = v12;
  uint64_t v13 = &a1[v9];
  uint64_t v14 = &a2[v9];
  long long v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v15;
  return a1;
}

char *sub_1000E049C(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10000ACE0((uint64_t)a1, &qword_1001A5468);
    uint64_t v6 = sub_10000570C(&qword_1001A5468);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = *(void *)&a2[v8 + 8];
  *(void *)uint64_t v9 = *(void *)&a2[v8];
  *((void *)v9 + 1) = v11;
  swift_bridgeObjectRelease();
  unsigned char v9[16] = v10[16];
  *((void *)v9 + 3) = *((void *)v10 + 3);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  v13[16] = v14[16];
  *((void *)v13 + 3) = *((void *)v14 + 3);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000E05EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E0600);
}

uint64_t sub_1000E0600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000570C(&qword_1001A65B8);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1000E06C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E06DC);
}

uint64_t sub_1000E06DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_10000570C(&qword_1001A65B8);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

void sub_1000E07A0()
{
  sub_1000E0838();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1000E0838()
{
  if (!qword_1001A6628)
  {
    type metadata accessor for ColorScheme();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001A6628);
    }
  }
}

ValueMetadata *type metadata accessor for PhotoEntryViewSizePreferenceKey()
{
  return &type metadata for PhotoEntryViewSizePreferenceKey;
}

uint64_t *sub_1000E08A0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    a1[1] = a2[1];
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (uint64_t *)((char *)a1 + v6);
    uint64_t v8 = (uint64_t *)((char *)a2 + v6);
    swift_retain();
    swift_retain();
    sub_10000570C(&qword_1001A5468);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      void *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1000E09C8(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

void *sub_1000E0A88(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (void *)((char *)a1 + v5);
  uint64_t v7 = (void *)((char *)a2 + v5);
  swift_retain();
  swift_retain();
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  else
  {
    *uint64_t v6 = *v7;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_1000E0B58(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (void *)((char *)a1 + v6);
    uint64_t v8 = (void *)((char *)a2 + v6);
    sub_10000ACE0((uint64_t)a1 + v6, &qword_1001A5468);
    sub_10000570C(&qword_1001A5468);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      void *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *sub_1000E0C64(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  return a1;
}

void *sub_1000E0D38(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    sub_10000ACE0((uint64_t)a1 + v6, &qword_1001A5468);
    uint64_t v9 = sub_10000570C(&qword_1001A5468);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000E0E44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E0E58);
}

uint64_t sub_1000E0E58(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000570C(&qword_1001A65B8);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000E0F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E0F20);
}

void *sub_1000E0F20(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000570C(&qword_1001A65B8);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_1000E0FCC()
{
  sub_1000E0838();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t sub_1000E1068()
{
  unint64_t result = qword_1001AAAD0;
  if (!qword_1001AAAD0)
  {
    sub_100004A58(&qword_1001AA938);
    sub_1000E1108();
    sub_10000A780(&qword_1001AAAF0, &qword_1001AA940);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AAAD0);
  }
  return result;
}

unint64_t sub_1000E1108()
{
  unint64_t result = qword_1001AAAD8;
  if (!qword_1001AAAD8)
  {
    sub_100004A58(&qword_1001AA930);
    sub_1000E117C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AAAD8);
  }
  return result;
}

unint64_t sub_1000E117C()
{
  unint64_t result = qword_1001AAAE0;
  if (!qword_1001AAAE0)
  {
    sub_100004A58(&qword_1001AAAE8);
    sub_1000DFC6C();
    sub_1000DFDDC(&qword_1001AA9A0, (void (*)(uint64_t))type metadata accessor for DefaultEntryView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AAAE0);
  }
  return result;
}

unint64_t sub_1000E1228(uint64_t a1)
{
  unint64_t result = sub_1000E1250();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000E1250()
{
  unint64_t result = qword_1001AAAF8;
  if (!qword_1001AAAF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AAAF8);
  }
  return result;
}

uint64_t sub_1000E12A4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000E12C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v69 = a1;
  uint64_t v68 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin(v68, v2);
  uint64_t v67 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for PhotoEntryView(0);
  uint64_t v61 = *(void *)(v4 - 8);
  uint64_t v5 = *(void *)(v61 + 64);
  __chkstk_darwin(v4 - 8, v6);
  uint64_t v7 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000570C(&qword_1001AAB00);
  uint64_t v63 = *(void *)(v11 - 8);
  uint64_t v64 = v11;
  __chkstk_darwin(v11, v12);
  long long v60 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000570C(&qword_1001AAB08);
  __chkstk_darwin(v14 - 8, v15);
  uint64_t v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000570C(&qword_1001AAB10);
  uint64_t v19 = v18 - 8;
  __chkstk_darwin(v18, v20);
  uint64_t v22 = (char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000570C(&qword_1001AAB18);
  uint64_t v24 = v23 - 8;
  __chkstk_darwin(v23, v25);
  long long v62 = (char *)&v59 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_10000570C(&qword_1001AAB20) - 8;
  __chkstk_darwin(v66, v27);
  uint64_t v65 = (uint64_t)&v59 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v17 = static VerticalAlignment.center.getter();
  *((void *)v17 + 1) = 0;
  v17[16] = 0;
  uint64_t v29 = sub_10000570C(&qword_1001AAB28);
  sub_1000E193C(v1, (uint64_t)&v17[*(int *)(v29 + 44)]);
  uint64_t v30 = v1[1];
  uint64_t v70 = *v1;
  uint64_t v71 = v30;
  sub_10000570C(&qword_1001AAB30);
  State.wrappedValue.getter();
  sub_10000A428(v72 + OBJC_IVAR____TtC16EventViewService36PromotionalAssetsPhotoEntryViewModel_photoURL, (uint64_t)v10, &qword_1001AD200);
  swift_release();
  static Animation.easeInOut.getter();
  Transaction.init(animation:)();
  sub_1000DFC04((uint64_t)v1, (uint64_t)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PhotoEntryView);
  unint64_t v31 = (*(unsigned __int8 *)(v61 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
  uint64_t v32 = swift_allocObject();
  sub_1000E5074((uint64_t)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v32 + v31, type metadata accessor for PhotoEntryView);
  sub_10000570C(&qword_1001AAB38);
  sub_1000E515C();
  uint64_t v33 = v60;
  AsyncImage.init(url:scale:transaction:content:)();
  uint64_t v34 = static Alignment.center.getter();
  uint64_t v36 = v35;
  uint64_t v37 = &v22[*(int *)(v19 + 44)];
  uint64_t v39 = v63;
  uint64_t v38 = v64;
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v37, v33, v64);
  uint64_t v40 = (uint64_t *)&v37[*(int *)(sub_10000570C(&qword_1001AABB8) + 36)];
  *uint64_t v40 = v34;
  v40[1] = v36;
  sub_10000A428((uint64_t)v17, (uint64_t)v22, &qword_1001AAB08);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v33, v38);
  sub_10000ACE0((uint64_t)v17, &qword_1001AAB08);
  uint64_t v41 = v67;
  uint64_t v42 = &v67[*(int *)(v68 + 28)];
  uint64_t v43 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v44 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v44 - 8) + 104))(v42, v43, v44);
  __asm { FMOV            V0.2D, #14.0 }
  *uint64_t v41 = _Q0;
  uint64_t v50 = (uint64_t)v62;
  uint64_t v51 = (uint64_t)&v62[*(int *)(v24 + 44)];
  sub_1000DFC04((uint64_t)v41, v51, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v51 + *(int *)(sub_10000570C(&qword_1001A62A8) + 36)) = 256;
  sub_10000A428((uint64_t)v22, v50, &qword_1001AAB10);
  sub_1000DFE24((uint64_t)v41, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_10000ACE0((uint64_t)v22, &qword_1001AAB10);
  static Color.black.getter();
  uint64_t v52 = Color.opacity(_:)();
  swift_release();
  uint64_t v53 = v65;
  sub_10000A428(v50, v65, &qword_1001AAB18);
  uint64_t v54 = v53 + *(int *)(v66 + 44);
  *(void *)uint64_t v54 = v52;
  *(_OWORD *)(v54 + 8) = xmmword_100159990;
  *(void *)(v54 + 24) = 0x4010000000000000;
  sub_10000ACE0(v50, &qword_1001AAB18);
  static Color.black.getter();
  uint64_t v55 = Color.opacity(_:)();
  swift_release();
  uint64_t v56 = v69;
  sub_10000A428(v53, v69, &qword_1001AAB20);
  uint64_t v57 = v56 + *(int *)(sub_10000570C(&qword_1001AABC0) + 36);
  *(void *)uint64_t v57 = v55;
  *(_OWORD *)(v57 + 8) = xmmword_1001599A0;
  *(void *)(v57 + 24) = 0x4000000000000000;
  return sub_10000ACE0(v53, &qword_1001AAB20);
}

uint64_t sub_1000E193C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v92 = a2;
  uint64_t v93 = a1;
  uint64_t v2 = type metadata accessor for PhotoEntryView(0);
  uint64_t v88 = *(void *)(v2 - 8);
  uint64_t v87 = *(void *)(v88 + 64);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v86 = (uint64_t)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v84 = (uint64_t)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000570C(&qword_1001AABD8);
  uint64_t v90 = *(void *)(v8 - 8);
  uint64_t v91 = v8;
  uint64_t v10 = __chkstk_darwin(v8, v9);
  uint64_t v89 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  uint64_t v85 = (char *)&v82 - v13;
  uint64_t v14 = type metadata accessor for BlendMode();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000570C(&qword_1001AABE0);
  __chkstk_darwin(v19 - 8, v20);
  uint64_t v22 = (char *)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000570C(&qword_1001AABE8);
  uint64_t v24 = v23 - 8;
  __chkstk_darwin(v23, v25);
  uint64_t v27 = (char *)&v82 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_10000570C(&qword_1001AABF0);
  __chkstk_darwin(v28 - 8, v29);
  unint64_t v31 = (char *)&v82 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_10000570C(&qword_1001AABF8);
  uint64_t v33 = v32 - 8;
  __chkstk_darwin(v32, v34);
  uint64_t v36 = (char *)&v82 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_10000570C(&qword_1001AAC00);
  uint64_t v38 = v37 - 8;
  uint64_t v40 = __chkstk_darwin(v37, v39);
  uint64_t v82 = (uint64_t)&v82 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40, v42);
  uint64_t v83 = (uint64_t)&v82 - v43;
  *(void *)uint64_t v22 = static HorizontalAlignment.leading.getter();
  *((void *)v22 + 1) = 0;
  v22[16] = 0;
  uint64_t v44 = sub_10000570C(&qword_1001AAC08);
  sub_1000E20CC(v93, (uint64_t)&v22[*(int *)(v44 + 44)]);
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v18, enum case for BlendMode.plusLighter(_:), v14);
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(&v27[*(int *)(v24 + 44)], v18, v14);
  sub_10000A428((uint64_t)v22, (uint64_t)v27, &qword_1001AABE0);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  sub_10000ACE0((uint64_t)v22, &qword_1001AABE0);
  uint64_t v45 = static Alignment.leading.getter();
  sub_1001245B4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v31, 0.0, 1, 0.0, 1, v45, v46);
  sub_10000ACE0((uint64_t)v27, &qword_1001AABE8);
  LOBYTE(v27) = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  uint64_t v52 = v51;
  uint64_t v54 = v53;
  sub_10000A428((uint64_t)v31, (uint64_t)v36, &qword_1001AABF0);
  uint64_t v55 = &v36[*(int *)(v33 + 44)];
  *uint64_t v55 = (char)v27;
  *((void *)v55 + 1) = v48;
  *((void *)v55 + 2) = v50;
  *((void *)v55 + 3) = v52;
  *((void *)v55 + 4) = v54;
  v55[40] = 0;
  sub_10000ACE0((uint64_t)v31, &qword_1001AABF0);
  LOBYTE(v27) = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  uint64_t v57 = v56;
  uint64_t v59 = v58;
  uint64_t v61 = v60;
  uint64_t v63 = v62;
  uint64_t v64 = v82;
  sub_10000A428((uint64_t)v36, v82, &qword_1001AABF8);
  uint64_t v65 = v64 + *(int *)(v38 + 44);
  uint64_t v66 = v64;
  *(unsigned char *)uint64_t v65 = (_BYTE)v27;
  *(void *)(v65 + 8) = v57;
  *(void *)(v65 + 16) = v59;
  *(void *)(v65 + 24) = v61;
  *(void *)(v65 + 32) = v63;
  *(unsigned char *)(v65 + 40) = 0;
  sub_10000ACE0((uint64_t)v36, &qword_1001AABF8);
  uint64_t v67 = v83;
  sub_10000A3C4(v64, v83, &qword_1001AAC00);
  uint64_t v68 = v93;
  uint64_t v69 = v93[1];
  uint64_t v94 = *v93;
  uint64_t v95 = v69;
  sub_10000570C(&qword_1001AAB30);
  State.wrappedValue.getter();
  sub_10000A428(v96 + OBJC_IVAR____TtC16EventViewService36PromotionalAssetsPhotoEntryViewModel_photoURL, v84, &qword_1001AD200);
  swift_release();
  static Animation.easeInOut.getter();
  Transaction.init(animation:)();
  uint64_t v70 = v86;
  sub_1000DFC04((uint64_t)v68, v86, type metadata accessor for PhotoEntryView);
  unint64_t v71 = (*(unsigned __int8 *)(v88 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80);
  uint64_t v72 = swift_allocObject();
  sub_1000E5074(v70, v72 + v71, type metadata accessor for PhotoEntryView);
  sub_10000570C(&qword_1001AAC10);
  sub_1000E57E8();
  uint64_t v73 = v85;
  AsyncImage.init(url:scale:transaction:content:)();
  sub_10000A428(v67, v66, &qword_1001AAC00);
  uint64_t v74 = v89;
  uint64_t v75 = v90;
  uint64_t v76 = *(void (**)(char *, char *, uint64_t))(v90 + 16);
  uint64_t v77 = v91;
  v76(v89, v73, v91);
  uint64_t v78 = v92;
  sub_10000A428(v66, v92, &qword_1001AAC00);
  uint64_t v79 = sub_10000570C(&qword_1001AAC50);
  v76((char *)(v78 + *(int *)(v79 + 48)), v74, v77);
  uint64_t v80 = *(void (**)(char *, uint64_t))(v75 + 8);
  v80(v73, v77);
  sub_10000ACE0(v67, &qword_1001AAC00);
  v80(v74, v77);
  return sub_10000ACE0(v66, &qword_1001AAC00);
}

uint64_t sub_1000E20CC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v134 = a2;
  uint64_t v133 = sub_10000570C(&qword_1001A62A8) - 8;
  __chkstk_darwin(v133, v3);
  uint64_t v131 = (uint64_t)&v114 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin(v129, v5);
  uint64_t v128 = (char *)&v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = sub_10000570C(&qword_1001AAC60) - 8;
  uint64_t v8 = __chkstk_darwin(v130, v7);
  uint64_t v10 = (_OWORD *)((char *)&v114 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8, v11);
  uint64_t v132 = (uint64_t)&v114 - v12;
  uint64_t v13 = sub_10000570C(&qword_1001A6AB8);
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v16 = (char *)&v114 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000570C(&qword_1001A9DE0);
  uint64_t v18 = v17 - 8;
  uint64_t v20 = __chkstk_darwin(v17, v19);
  uint64_t v22 = (char *)&v114 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v23);
  uint64_t v25 = (char *)&v114 - v24;
  uint64_t v126 = (uint64_t)&v114 - v24;
  *(void *)uint64_t v16 = static VerticalAlignment.center.getter();
  *((void *)v16 + 1) = 0x4010000000000000;
  v16[16] = 0;
  uint64_t v26 = sub_10000570C(&qword_1001A6AD0);
  sub_1000E2B24(a1, (uint64_t)&v16[*(int *)(v26 + 44)]);
  char v27 = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  sub_10000A428((uint64_t)v16, (uint64_t)v22, &qword_1001A6AB8);
  uint64_t v36 = &v22[*(int *)(v18 + 44)];
  unint64_t v127 = v22;
  *uint64_t v36 = v27;
  *((void *)v36 + 1) = v29;
  *((void *)v36 + 2) = v31;
  *((void *)v36 + 3) = v33;
  *((void *)v36 + 4) = v35;
  v36[40] = 0;
  sub_10000ACE0((uint64_t)v16, &qword_1001A6AB8);
  sub_10000A3C4((uint64_t)v22, (uint64_t)v25, &qword_1001A9DE0);
  uint64_t v116 = *a1;
  uint64_t v115 = a1[1];
  *(void *)&long long v142 = v116;
  *((void *)&v142 + 1) = v115;
  uint64_t v114 = sub_10000570C(&qword_1001AAB30);
  State.wrappedValue.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v37 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v39 = v38;
  char v41 = v40 & 1;
  static Font.footnote.getter();
  static Font.Weight.regular.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v42 = Text.font(_:)();
  uint64_t v44 = v43;
  char v46 = v45;
  swift_release();
  sub_10000FCC4(v37, v39, v41);
  swift_bridgeObjectRelease();
  static Color.white.getter();
  uint64_t v47 = Color.opacity(_:)();
  swift_release();
  *(void *)&long long v142 = v47;
  uint64_t v125 = Text.foregroundStyle<A>(_:)();
  uint64_t v123 = v48;
  uint64_t v124 = v49;
  int v122 = v50 & 1;
  sub_10000FCC4(v42, v44, v46 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  int v121 = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v120 = v51;
  uint64_t v119 = v52;
  uint64_t v118 = v53;
  uint64_t v117 = v54;
  *(void *)&long long v142 = v116;
  *((void *)&v142 + 1) = v115;
  State.wrappedValue.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v55 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v57 = v56;
  LOBYTE(v42) = v58 & 1;
  static Font.subheadline.getter();
  static Font.Weight.regular.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v59 = Text.font(_:)();
  uint64_t v61 = v60;
  char v63 = v62;
  swift_release();
  LOBYTE(v25) = v63 & 1;
  sub_10000FCC4(v55, v57, v42);
  swift_bridgeObjectRelease();
  *(void *)&long long v142 = static Color.white.getter();
  uint64_t v64 = Text.foregroundStyle<A>(_:)();
  uint64_t v66 = v65;
  char v68 = v67;
  uint64_t v70 = v69;
  sub_10000FCC4(v59, v61, (char)v25);
  swift_release();
  swift_bridgeObjectRelease();
  LOBYTE(v61) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v72 = v71;
  uint64_t v74 = v73;
  uint64_t v76 = v75;
  uint64_t v78 = v77;
  LOBYTE(v39) = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v80 = v79;
  uint64_t v82 = v81;
  uint64_t v84 = v83;
  uint64_t v86 = v85;
  char v141 = v68 & 1;
  char v139 = 0;
  char v136 = 0;
  static Color.white.getter();
  uint64_t v87 = Color.opacity(_:)();
  swift_release();
  char v88 = static Edge.Set.all.getter();
  *(void *)&long long v142 = v64;
  *((void *)&v142 + 1) = v66;
  LOBYTE(v143) = v141;
  *(_DWORD *)((char *)&v143 + 1) = v135[0];
  DWORD1(v143) = *(_DWORD *)((char *)v135 + 3);
  *((void *)&v143 + 1) = v70;
  LOBYTE(v144) = v61;
  *(_DWORD *)((char *)&v144 + 1) = *(_DWORD *)v140;
  DWORD1(v144) = *(_DWORD *)&v140[3];
  *((void *)&v144 + 1) = v72;
  *(void *)&long long v145 = v74;
  *((void *)&v145 + 1) = v76;
  *(void *)&long long v146 = v78;
  BYTE8(v146) = v139;
  HIDWORD(v146) = *(_DWORD *)&v138[3];
  *(_DWORD *)((char *)&v146 + 9) = *(_DWORD *)v138;
  LOBYTE(v147) = v39;
  DWORD1(v147) = *(_DWORD *)&v137[3];
  *(_DWORD *)((char *)&v147 + 1) = *(_DWORD *)v137;
  *((void *)&v147 + 1) = v80;
  *(void *)&long long v148 = v82;
  *((void *)&v148 + 1) = v84;
  *(void *)uint64_t v149 = v86;
  v149[8] = v136;
  *(void *)&v149[16] = v87;
  v149[24] = v88;
  uint64_t v89 = v128;
  uint64_t v90 = &v128[*(int *)(v129 + 28)];
  uint64_t v91 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v92 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v92 - 8) + 104))(v90, v91, v92);
  __asm { FMOV            V0.2D, #16.0 }
  _OWORD *v89 = _Q0;
  uint64_t v98 = v131;
  sub_1000DFC04((uint64_t)v89, v131, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v98 + *(int *)(v133 + 44)) = 256;
  sub_10000A428(v98, (uint64_t)v10 + *(int *)(v130 + 44), &qword_1001A62A8);
  long long v99 = *(_OWORD *)v149;
  v10[6] = v148;
  v10[7] = v99;
  *(_OWORD *)((char *)v10 + 121) = *(_OWORD *)&v149[9];
  long long v100 = v145;
  v10[2] = v144;
  v10[3] = v100;
  long long v101 = v147;
  v10[4] = v146;
  v10[5] = v101;
  long long v102 = v143;
  *uint64_t v10 = v142;
  v10[1] = v102;
  sub_1000244AC((uint64_t)&v142);
  sub_10000ACE0(v98, &qword_1001A62A8);
  sub_1000DFE24((uint64_t)v89, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_100024500((uint64_t)&v142);
  uint64_t v103 = v132;
  sub_10000A3C4((uint64_t)v10, v132, &qword_1001AAC60);
  uint64_t v104 = v126;
  uint64_t v105 = (uint64_t)v127;
  sub_10000A428(v126, (uint64_t)v127, &qword_1001A9DE0);
  sub_10000A428(v103, (uint64_t)v10, &qword_1001AAC60);
  uint64_t v106 = v134;
  sub_10000A428(v105, v134, &qword_1001A9DE0);
  uint64_t v107 = sub_10000570C(&qword_1001AAC68);
  uint64_t v108 = v106 + *(int *)(v107 + 48);
  uint64_t v109 = v125;
  uint64_t v110 = v123;
  *(void *)uint64_t v108 = v125;
  *(void *)(v108 + 8) = v110;
  LOBYTE(v98) = v122;
  *(unsigned char *)(v108 + 16) = v122;
  *(void *)(v108 + 24) = v124;
  *(unsigned char *)(v108 + 32) = v121;
  uint64_t v111 = v119;
  *(void *)(v108 + 40) = v120;
  *(void *)(v108 + 48) = v111;
  uint64_t v112 = v117;
  *(void *)(v108 + 56) = v118;
  *(void *)(v108 + 64) = v112;
  *(unsigned char *)(v108 + 72) = 0;
  sub_10000A428((uint64_t)v10, v106 + *(int *)(v107 + 64), &qword_1001AAC60);
  sub_10000FCD4(v109, v110, v98);
  swift_bridgeObjectRetain();
  sub_10000ACE0(v103, &qword_1001AAC60);
  sub_10000ACE0(v104, &qword_1001A9DE0);
  sub_10000ACE0((uint64_t)v10, &qword_1001AAC60);
  sub_10000FCC4(v109, v110, v98);
  swift_bridgeObjectRelease();
  return sub_10000ACE0(v105, &qword_1001A9DE0);
}

uint64_t sub_1000E2B24@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v3 = sub_10000570C(&qword_1001A6AE8);
  uint64_t v5 = __chkstk_darwin(v3 - 8, v4);
  uint64_t v33 = (uint64_t)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v33 - v8;
  uint64_t v10 = Image.init(_:bundle:)();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v35 = v10;
  uint64_t v36 = v41;
  char v37 = v42;
  uint64_t v38 = v43;
  char v39 = v44;
  long long v40 = v45;
  sub_10000570C(&qword_1001A6AF0);
  sub_1000E5A28((unint64_t *)&qword_1001A6AF8, &qword_1001A6AF0);
  View.accessibilityHidden(_:)();
  swift_release();
  uint64_t v11 = a1[1];
  uint64_t v35 = *a1;
  uint64_t v36 = v11;
  sub_10000570C(&qword_1001AAB30);
  State.wrappedValue.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v12 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  static Font.subheadline.getter();
  static Font.Weight.semibold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v17 = Text.font(_:)();
  uint64_t v19 = v18;
  char v21 = v20;
  swift_release();
  sub_10000FCC4(v12, v14, v16);
  swift_bridgeObjectRelease();
  uint64_t v35 = static Color.white.getter();
  uint64_t v22 = Text.foregroundStyle<A>(_:)();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  char v28 = v27 & 1;
  sub_10000FCC4(v17, v19, v21 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v29 = v33;
  sub_10000A428((uint64_t)v9, v33, &qword_1001A6AE8);
  uint64_t v30 = v34;
  sub_10000A428(v29, v34, &qword_1001A6AE8);
  uint64_t v31 = v30 + *(int *)(sub_10000570C(&qword_1001A6B00) + 48);
  *(void *)uint64_t v31 = v22;
  *(void *)(v31 + 8) = v24;
  *(unsigned char *)(v31 + 16) = v28;
  *(void *)(v31 + 24) = v26;
  sub_10000FCD4(v22, v24, v28);
  swift_bridgeObjectRetain();
  sub_10000ACE0((uint64_t)v9, &qword_1001A6AE8);
  sub_10000FCC4(v22, v24, v28);
  swift_bridgeObjectRelease();
  return sub_10000ACE0(v29, &qword_1001A6AE8);
}

double sub_1000E2E8C@<D0>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v43 = a3;
  uint64_t v5 = type metadata accessor for Image.ResizingMode();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AsyncImagePhase();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (uint64_t *)((char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16))(v14, a1, v10);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v11 + 88))(v14, v10) == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v11 + 96))(v14, v10);
    uint64_t v42 = *v14;
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, enum case for Image.ResizingMode.stretch(_:), v5);
    uint64_t v41 = Image.resizable(capInsets:resizingMode:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    uint64_t v15 = a2[1];
    *(void *)&long long v91 = *a2;
    *((void *)&v91 + 1) = v15;
    uint64_t v16 = v91;
    uint64_t v34 = v91;
    sub_10000570C(&qword_1001AAB30);
    State.wrappedValue.getter();
    uint64_t v17 = v66;
    swift_getKeyPath();
    *(void *)&long long v91 = v17;
    sub_1000DFDDC(qword_1001A8E18, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsPhotoEntryViewModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_release();
    *(void *)&long long v91 = v16;
    *((void *)&v91 + 1) = v15;
    State.wrappedValue.getter();
    uint64_t v18 = v66;
    swift_getKeyPath();
    *(void *)&long long v91 = v18;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_release();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v37 = v76;
    uint64_t v38 = v78;
    int v35 = v79;
    int v36 = v77;
    uint64_t v39 = v81;
    uint64_t v40 = v80;
    uint64_t v19 = v34;
    *(void *)&long long v91 = v34;
    *((void *)&v91 + 1) = v15;
    State.wrappedValue.getter();
    uint64_t v20 = v66;
    swift_getKeyPath();
    *(void *)&long long v91 = v20;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_release();
    *(void *)&long long v91 = v19;
    *((void *)&v91 + 1) = v15;
    State.wrappedValue.getter();
    uint64_t v21 = v66;
    swift_getKeyPath();
    *(void *)&long long v91 = v21;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_release();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v22 = v82;
    uint64_t v23 = v84;
    uint64_t v25 = v86;
    uint64_t v24 = v87;
    char v54 = 1;
    char v51 = v36;
    char v49 = v35;
    char v47 = v83;
    char v45 = v85;
    sub_10000570C(&qword_1001A6050);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_100152B80;
    *(void *)(v26 + 32) = static Color.clear.getter();
    *(void *)(v26 + 40) = static Color.black.getter();
    *(void *)&long long v91 = v26;
    specialized Array._endMutation()();
    Gradient.init(colors:)();
    LinearGradient.init(gradient:startPoint:endPoint:)();
    v55[0] = v41;
    v55[1] = 0;
    LOBYTE(v56) = v54;
    BYTE1(v56) = 1;
    *(_DWORD *)((char *)&v56 + 2) = v52;
    WORD3(v56) = v53;
    *((void *)&v56 + 1) = v37;
    LOBYTE(v57) = v51;
    *(_DWORD *)((char *)&v57 + 1) = *(_DWORD *)v50;
    DWORD1(v57) = *(_DWORD *)&v50[3];
    *((void *)&v57 + 1) = v38;
    LOBYTE(v58) = v49;
    *(_DWORD *)((char *)&v58 + 1) = *(_DWORD *)v48;
    DWORD1(v58) = *(_DWORD *)&v48[3];
    *((void *)&v58 + 1) = v40;
    *(void *)&long long v59 = v39;
    *((void *)&v59 + 1) = v22;
    LOBYTE(v60) = v47;
    *(_DWORD *)((char *)&v60 + 1) = *(_DWORD *)v46;
    DWORD1(v60) = *(_DWORD *)&v46[3];
    *((void *)&v60 + 1) = v23;
    LOBYTE(v61) = v45;
    DWORD1(v61) = *(_DWORD *)&v44[3];
    *(_DWORD *)((char *)&v61 + 1) = *(_DWORD *)v44;
    *((void *)&v61 + 1) = v25;
    *(void *)&long long v62 = v24;
    WORD4(v62) = 0;
    *(void *)char v63 = v88;
    *(_OWORD *)&v63[8] = v89;
    *(_OWORD *)&v63[24] = v90;
    long long v66 = (unint64_t)v41;
    long long v67 = v56;
    long long v70 = v59;
    long long v71 = v60;
    long long v68 = v57;
    long long v69 = v58;
    *(void *)&v75[1] = *((void *)&v90 + 1);
    long long v74 = *(_OWORD *)v63;
    v75[0] = *(_OWORD *)&v63[16];
    long long v72 = v61;
    long long v73 = v62;
    sub_1000E59B0((uint64_t)&v66);
    sub_10000A3C4((uint64_t)&v66, (uint64_t)&v91, &qword_1001AAC58);
    sub_1000E59B8((uint64_t)v55);
    sub_1000E59B8((uint64_t)v55);
    sub_10000570C(&qword_1001AAC28);
    sub_1000E5864();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    sub_1000E59F0((uint64_t)v55);
    sub_1000E59F0((uint64_t)v55);
    long long v98 = v64[7];
    long long v99 = v64[8];
    v100[0] = v65[0];
    *(_OWORD *)((char *)v100 + 9) = *(_OWORD *)((char *)v65 + 9);
    long long v94 = v64[3];
    long long v95 = v64[4];
    long long v96 = v64[5];
    long long v97 = v64[6];
    long long v91 = v64[0];
    long long v92 = v64[1];
    long long v93 = v64[2];
  }
  else
  {
    sub_1000E59A4((uint64_t)v64);
    sub_10000A3C4((uint64_t)v64, (uint64_t)&v91, &qword_1001AAC58);
    sub_10000570C(&qword_1001AAC28);
    sub_1000E5864();
    _ConditionalContent<>.init(storage:)();
    (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(v14, v10);
    long long v98 = v73;
    long long v99 = v74;
    v100[0] = v75[0];
    *(_OWORD *)((char *)v100 + 9) = *(_OWORD *)((char *)v75 + 9);
    long long v94 = v69;
    long long v95 = v70;
    long long v96 = v71;
    long long v97 = v72;
    long long v91 = v66;
    long long v92 = v67;
    long long v93 = v68;
  }
  long long v27 = v98;
  long long v28 = v100[0];
  uint64_t v29 = v43;
  v43[8] = v99;
  v29[9] = v28;
  *(_OWORD *)((char *)v29 + 153) = *(_OWORD *)((char *)v100 + 9);
  long long v30 = v94;
  long long v31 = v96;
  v29[4] = v95;
  v29[5] = v31;
  v29[6] = v97;
  v29[7] = v27;
  long long v32 = v92;
  *uint64_t v29 = v91;
  v29[1] = v32;
  double result = *(double *)&v93;
  v29[2] = v93;
  v29[3] = v30;
  return result;
}

double sub_1000E366C@<D0>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Image.ResizingMode();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AsyncImagePhase();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (uint64_t *)((char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(void *, uint64_t, uint64_t))(v12 + 16))(v15, a1, v11);
  int v16 = (*(uint64_t (**)(void *, uint64_t))(v12 + 88))(v15, v11);
  if (v16 != enum case for AsyncImagePhase.success(_:))
  {
    if (v16 == enum case for AsyncImagePhase.failure(_:))
    {
      (*(void (**)(void *, uint64_t))(v12 + 96))(v15, v11);
      swift_errorRelease();
    }
    else if (v16 != enum case for AsyncImagePhase.empty(_:))
    {
      sub_1000E5554((uint64_t)&v83);
      sub_10000A3C4((uint64_t)&v83, (uint64_t)&v138, &qword_1001AABC8);
      sub_10000570C(&qword_1001AAB50);
      sub_1000E51D8();
      _ConditionalContent<>.init(storage:)();
      (*(void (**)(void *, uint64_t))(v12 + 8))(v15, v11);
      long long v150 = v110;
      long long v151 = v111;
      v152[0] = v112[0];
      *(_OWORD *)((char *)v152 + 11) = *(_OWORD *)((char *)v112 + 11);
      long long v146 = v106;
      long long v147 = v107;
      long long v148 = v108;
      long long v149 = v109;
      long long v142 = v102;
      long long v143 = v103;
      long long v144 = v104;
      long long v145 = v105;
      long long v138 = v98;
      long long v139 = v99;
      long long v30 = v100;
      long long v31 = v101;
      goto LABEL_8;
    }
    id v25 = [self systemGray2Color];
    *(void *)char v47 = Color.init(uiColor:)();
    uint64_t v27 = a2[1];
    *(void *)&long long v138 = *a2;
    uint64_t v26 = v138;
    *((void *)&v138 + 1) = v27;
    sub_10000570C(&qword_1001AAB30);
    State.wrappedValue.getter();
    uint64_t v28 = v98;
    swift_getKeyPath();
    *(void *)&long long v138 = v28;
    sub_1000DFDDC(qword_1001A8E18, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsPhotoEntryViewModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_release();
    *(void *)&long long v138 = v26;
    *((void *)&v138 + 1) = v27;
    State.wrappedValue.getter();
    uint64_t v29 = v98;
    swift_getKeyPath();
    *(void *)&long long v138 = v29;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_release();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    long long v79 = *(_OWORD *)v47;
    LOBYTE(v80) = v47[16];
    *((void *)&v80 + 1) = v48;
    LOBYTE(v81[0]) = BYTE8(v48);
    *(_OWORD *)((char *)v81 + 8) = v49;
    sub_1000E5560((uint64_t)&v79);
    sub_10000A3C4((uint64_t)&v79, (uint64_t)&v138, &qword_1001AABD0);
    swift_retain();
    sub_10000570C(&qword_1001AAB60);
    sub_10000570C(&qword_1001AABB0);
    sub_1000E5254();
    sub_1000E54D8();
    _ConditionalContent<>.init(storage:)();
    long long v110 = v76;
    long long v111 = v77;
    v112[0] = v78[0];
    *(_OWORD *)((char *)v112 + 10) = *(_OWORD *)((char *)v78 + 10);
    long long v106 = v72;
    long long v107 = v73;
    long long v108 = v74;
    long long v109 = v75;
    long long v102 = v68;
    long long v103 = v69;
    long long v104 = v70;
    long long v105 = v71;
    long long v98 = v64;
    long long v99 = v65;
    long long v100 = v66;
    long long v101 = v67;
    sub_1000E556C((uint64_t)&v98);
    sub_10000A3C4((uint64_t)&v98, (uint64_t)&v138, &qword_1001AABC8);
    sub_10000570C(&qword_1001AAB50);
    sub_1000E51D8();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    long long v150 = v95;
    long long v151 = v96;
    v152[0] = v97[0];
    *(_OWORD *)((char *)v152 + 11) = *(_OWORD *)((char *)v97 + 11);
    long long v146 = v91;
    long long v147 = v92;
    long long v148 = v93;
    long long v149 = v94;
    long long v142 = v87;
    long long v143 = v88;
    long long v144 = v89;
    long long v145 = v90;
    long long v138 = v83;
    long long v139 = v84;
    long long v30 = v85;
    long long v31 = v86;
LABEL_8:
    long long v140 = v30;
    long long v141 = v31;
    goto LABEL_9;
  }
  (*(void (**)(void *, uint64_t))(v12 + 96))(v15, v11);
  *(void *)char v47 = *v15;
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v10, enum case for Image.ResizingMode.stretch(_:), v6);
  uint64_t v46 = Image.resizable(capInsets:resizingMode:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  uint64_t v17 = a2[1];
  *(void *)&long long v138 = *a2;
  uint64_t v18 = v138;
  *((void *)&v138 + 1) = v17;
  uint64_t v19 = v17;
  sub_10000570C(&qword_1001AAB30);
  State.wrappedValue.getter();
  uint64_t v20 = v98;
  swift_getKeyPath();
  *(void *)&long long v138 = v20;
  sub_1000DFDDC(qword_1001A8E18, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsPhotoEntryViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_release();
  *(void *)&long long v138 = v18;
  *((void *)&v138 + 1) = v19;
  uint64_t v21 = v19;
  State.wrappedValue.getter();
  uint64_t v22 = v98;
  swift_getKeyPath();
  *(void *)&long long v138 = v22;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_release();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v45 = v113;
  int v44 = v114;
  uint64_t v43 = v115;
  int v42 = v116;
  uint64_t v40 = v118;
  uint64_t v41 = v117;
  *(void *)&long long v138 = v18;
  *((void *)&v138 + 1) = v21;
  State.wrappedValue.getter();
  uint64_t v23 = v98;
  swift_getKeyPath();
  *(void *)&long long v138 = v23;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_release();
  *(void *)&long long v138 = v18;
  *((void *)&v138 + 1) = v21;
  State.wrappedValue.getter();
  uint64_t v24 = v98;
  swift_getKeyPath();
  *(void *)&long long v138 = v24;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_release();
  static Alignment.leading.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v124 = v46;
  uint64_t v125 = 0;
  __int16 v126 = 257;
  uint64_t v127 = v45;
  char v128 = v44;
  uint64_t v129 = v43;
  char v130 = v42;
  uint64_t v131 = v41;
  uint64_t v132 = v40;
  uint64_t v133 = v119;
  char v134 = v120;
  uint64_t v135 = v121;
  char v136 = v122;
  long long v137 = v123;
  static Alignment.leading.getter();
  sub_100124610(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v138, 0.0, 1, 0.0, 1);
  swift_release();
  v62[12] = v150;
  v62[13] = v151;
  uint64_t v63 = *(void *)&v152[0];
  v62[8] = v146;
  v62[9] = v147;
  v62[10] = v148;
  v62[11] = v149;
  v62[4] = v142;
  v62[5] = v143;
  v62[6] = v144;
  v62[7] = v145;
  v62[0] = v138;
  v62[1] = v139;
  v62[2] = v140;
  v62[3] = v141;
  long long v76 = v150;
  long long v77 = v151;
  *(void *)&v78[0] = *(void *)&v152[0];
  long long v72 = v146;
  long long v73 = v147;
  long long v74 = v148;
  long long v75 = v149;
  long long v68 = v142;
  long long v69 = v143;
  long long v70 = v144;
  long long v71 = v145;
  long long v64 = v138;
  long long v65 = v139;
  long long v66 = v140;
  long long v67 = v141;
  *(_OWORD *)((char *)v78 + 8) = xmmword_1001599B0;
  BYTE8(v78[1]) = 1;
  sub_1000E5574((uint64_t)&v64);
  sub_10000A3C4((uint64_t)&v64, (uint64_t)&v138, &qword_1001AABD0);
  sub_100012A84((uint64_t)v62);
  sub_10000570C(&qword_1001AAB60);
  sub_10000570C(&qword_1001AABB0);
  sub_1000E5254();
  sub_1000E54D8();
  _ConditionalContent<>.init(storage:)();
  v81[10] = v59;
  v81[11] = v60;
  v82[0] = v61[0];
  *(_OWORD *)((char *)v82 + 10) = *(_OWORD *)((char *)v61 + 10);
  v81[6] = v55;
  v81[7] = v56;
  v81[8] = v57;
  v81[9] = v58;
  v81[2] = v51;
  v81[3] = v52;
  v81[4] = v53;
  v81[5] = v54;
  long long v79 = *(_OWORD *)&v47[8];
  long long v80 = v48;
  v81[0] = v49;
  v81[1] = v50;
  long long v110 = v59;
  long long v111 = v60;
  v112[0] = v61[0];
  *(_OWORD *)((char *)v112 + 10) = *(_OWORD *)((char *)v61 + 10);
  long long v106 = v55;
  long long v107 = v56;
  long long v108 = v57;
  long long v109 = v58;
  long long v102 = v51;
  long long v103 = v52;
  long long v104 = v53;
  long long v105 = v54;
  long long v98 = *(_OWORD *)&v47[8];
  long long v99 = v48;
  long long v100 = v49;
  long long v101 = v50;
  sub_1000E556C((uint64_t)&v98);
  sub_10000A3C4((uint64_t)&v98, (uint64_t)&v138, &qword_1001AABC8);
  sub_1000E5580((uint64_t)&v79, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _WORD))j__swift_retain);
  sub_10000570C(&qword_1001AAB50);
  sub_1000E51D8();
  _ConditionalContent<>.init(storage:)();
  swift_release();
  sub_1000E5580((uint64_t)&v79, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _WORD))j__swift_release);
  sub_1000E5618((uint64_t)v62);
  long long v150 = v95;
  long long v151 = v96;
  v152[0] = v97[0];
  *(_OWORD *)((char *)v152 + 11) = *(_OWORD *)((char *)v97 + 11);
  long long v146 = v91;
  long long v147 = v92;
  long long v148 = v93;
  long long v149 = v94;
  long long v142 = v87;
  long long v143 = v88;
  long long v144 = v89;
  long long v145 = v90;
  long long v138 = v83;
  long long v139 = v84;
  long long v140 = v85;
  long long v141 = v86;
LABEL_9:
  long long v32 = v151;
  a3[12] = v150;
  a3[13] = v32;
  a3[14] = v152[0];
  *(_OWORD *)((char *)a3 + 235) = *(_OWORD *)((char *)v152 + 11);
  long long v33 = v147;
  a3[8] = v146;
  a3[9] = v33;
  long long v34 = v149;
  a3[10] = v148;
  a3[11] = v34;
  long long v35 = v143;
  a3[4] = v142;
  a3[5] = v35;
  long long v36 = v145;
  a3[6] = v144;
  a3[7] = v36;
  long long v37 = v139;
  *a3 = v138;
  a3[1] = v37;
  double result = *(double *)&v140;
  long long v39 = v141;
  a3[2] = v140;
  a3[3] = v39;
  return result;
}

uint64_t sub_1000E437C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v64 = a1;
  uint64_t v62 = sub_10000570C(&qword_1001A62A8);
  __chkstk_darwin(v62, v1);
  uint64_t v63 = &v52[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v58 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v58, v3);
  uint64_t v5 = &v52[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for ColorScheme();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = &v52[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9, v12);
  uint64_t v14 = &v52[-v13];
  uint64_t v57 = sub_10000570C(&qword_1001AAC70);
  __chkstk_darwin(v57, v15);
  uint64_t v17 = &v52[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v59 = sub_10000570C(&qword_1001AAC78);
  __chkstk_darwin(v59, v18);
  uint64_t v20 = &v52[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v60 = sub_10000570C(&qword_1001AAC80);
  __chkstk_darwin(v60, v21);
  long long v61 = &v52[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v56 = static VerticalAlignment.center.getter();
  sub_1000E49C4((uint64_t)v67);
  v68[296] = 0;
  memcpy(&v68[7], v67, 0x11CuLL);
  int v55 = 0;
  memcpy(v71, v68, sizeof(v71));
  int v54 = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  char v69 = 0;
  int v53 = static Edge.Set.horizontal.getter();
  sub_100026F48((uint64_t)v14);
  (*(void (**)(unsigned char *, void, uint64_t))(v7 + 104))(v11, enum case for ColorScheme.dark(_:), v6);
  char v31 = static ColorScheme.== infix(_:_:)();
  long long v32 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
  v32(v11, v6);
  v32(v14, v6);
  if (v31)
  {
    if (qword_1001A4E38 != -1) {
      swift_once();
    }
    long long v33 = &qword_1001B74D8;
  }
  else
  {
    if (qword_1001A4E30 != -1) {
      swift_once();
    }
    long long v33 = &qword_1001B74D0;
  }
  uint64_t v34 = *v33;
  swift_retain();
  char v35 = v69;
  char v65 = 1;
  char v36 = static Edge.Set.all.getter();
  v66[0] = v56;
  v66[1] = 0x4028000000000000;
  LOBYTE(v66[2]) = v55;
  memcpy((char *)&v66[2] + 1, v71, 0x123uLL);
  LOBYTE(v66[39]) = v54;
  *(_DWORD *)((char *)&v66[39] + 1) = *(_DWORD *)v70;
  HIDWORD(v66[39]) = *(_DWORD *)&v70[3];
  v66[40] = v24;
  v66[41] = v26;
  unsigned char v66[42] = v28;
  v66[43] = v30;
  LOBYTE(v66[44]) = v35;
  LOBYTE(v66[45]) = v53;
  memset(&v66[46], 0, 32);
  LOBYTE(v66[50]) = v65;
  v66[51] = v34;
  LOBYTE(v66[52]) = v36;
  long long v37 = (char *)v5 + *(int *)(v58 + 20);
  uint64_t v38 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v39 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v39 - 8) + 104))(v37, v38, v39);
  __asm { FMOV            V0.2D, #16.0 }
  *uint64_t v5 = _Q0;
  uint64_t v45 = v63;
  sub_1000DFC04((uint64_t)v5, (uint64_t)v63, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v45[*(int *)(v62 + 36)] = 256;
  sub_10000A428((uint64_t)v45, (uint64_t)&v17[*(int *)(v57 + 36)], &qword_1001A62A8);
  memcpy(v17, v66, 0x1A1uLL);
  sub_1000E5A94((uint64_t)v66);
  sub_10000ACE0((uint64_t)v45, &qword_1001A62A8);
  sub_1000DFE24((uint64_t)v5, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_1000E5B64((uint64_t)v66);
  static Color.black.getter();
  uint64_t v46 = Color.opacity(_:)();
  swift_release();
  sub_10000A428((uint64_t)v17, (uint64_t)v20, &qword_1001AAC70);
  char v47 = &v20[*(int *)(v59 + 36)];
  *(void *)char v47 = v46;
  *(_OWORD *)(v47 + 8) = xmmword_100159990;
  *((void *)v47 + 3) = 0x4010000000000000;
  sub_10000ACE0((uint64_t)v17, &qword_1001AAC70);
  static Color.black.getter();
  uint64_t v48 = Color.opacity(_:)();
  swift_release();
  long long v49 = v61;
  sub_10000A428((uint64_t)v20, (uint64_t)v61, &qword_1001AAC78);
  long long v50 = &v49[*(int *)(v60 + 36)];
  *(void *)long long v50 = v48;
  *(_OWORD *)(v50 + 8) = xmmword_1001599A0;
  *((void *)v50 + 3) = 0x4000000000000000;
  sub_10000ACE0((uint64_t)v20, &qword_1001AAC78);
  return sub_10000A3C4((uint64_t)v49, v64, &qword_1001AAC80);
}

uint64_t sub_1000E49C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v33 = Image.init(_:bundle:)();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v31 = v66;
  uint64_t v32 = v64;
  char v27 = v67;
  char v28 = v65;
  uint64_t v29 = v69;
  uint64_t v30 = v68;
  uint64_t v2 = static HorizontalAlignment.leading.getter();
  sub_1000E4D34((uint64_t)&v51);
  long long v3 = v51;
  char v4 = v52;
  uint64_t v5 = *((void *)&v53 + 1);
  char v6 = v54;
  uint64_t v70 = v2;
  uint64_t v71 = 0;
  char v72 = 0;
  long long v73 = v51;
  char v74 = v52;
  uint64_t v75 = *((void *)&v52 + 1);
  long long v76 = v53;
  uint64_t v7 = v53;
  char v77 = v54;
  uint64_t v78 = *((void *)&v54 + 1);
  static Alignment.leading.getter();
  sub_1001247EC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v34, 0.0, 1, 0.0, 1);
  sub_10000FCC4(v3, *((uint64_t *)&v3 + 1), v4);
  swift_bridgeObjectRelease();
  sub_10000FCC4(v7, v5, v6);
  swift_bridgeObjectRelease();
  uint64_t v8 = Image.init(systemName:)();
  static Font.subheadline.getter();
  static Font.Weight.semibold.getter();
  uint64_t v9 = Font.weight(_:)();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  int v11 = static HierarchicalShapeStyle.tertiary.getter();
  long long v12 = v44;
  long long v13 = v45;
  v47[10] = v44;
  v47[11] = v45;
  long long v14 = v40;
  long long v15 = v41;
  v47[6] = v40;
  v47[7] = v41;
  long long v16 = v42;
  v47[8] = v42;
  v47[9] = v43;
  long long v17 = v36;
  long long v18 = v37;
  v47[2] = v36;
  v47[3] = v37;
  long long v19 = v39;
  long long v20 = v38;
  v47[4] = v38;
  v47[5] = v39;
  long long v21 = v35;
  long long v22 = v34;
  v47[0] = v34;
  v47[1] = v35;
  *(_OWORD *)(a1 + 200) = v43;
  *(_OWORD *)(a1 + 216) = v12;
  *(_OWORD *)(a1 + 232) = v13;
  *(_OWORD *)(a1 + 136) = v19;
  *(_OWORD *)(a1 + 152) = v14;
  *(_OWORD *)(a1 + 168) = v15;
  *(_OWORD *)(a1 + 184) = v16;
  *(_OWORD *)(a1 + 72) = v21;
  *(_OWORD *)(a1 + 88) = v17;
  *(_OWORD *)(a1 + 104) = v18;
  *(_OWORD *)(a1 + 120) = v20;
  uint64_t v23 = v46;
  uint64_t v48 = v46;
  char v50 = v28;
  char v49 = v27;
  *(_OWORD *)(a1 + 56) = v22;
  char v24 = v50;
  char v25 = v49;
  *(void *)a1 = v33;
  *(void *)(a1 + 8) = v32;
  *(unsigned char *)(a1 + 16) = v24;
  *(void *)(a1 + 24) = v31;
  *(unsigned char *)(a1 + 32) = v25;
  *(void *)(a1 + 40) = v30;
  *(void *)(a1 + 48) = v29;
  *(void *)(a1 + 248) = v23;
  *(void *)(a1 + 256) = v8;
  *(void *)(a1 + 264) = KeyPath;
  *(void *)(a1 + 272) = v9;
  *(_DWORD *)(a1 + 280) = v11;
  swift_retain();
  sub_1000E5C3C((uint64_t)v47);
  long long v61 = v44;
  long long v62 = v45;
  uint64_t v63 = v46;
  long long v57 = v40;
  long long v58 = v41;
  long long v59 = v42;
  long long v60 = v43;
  long long v53 = v36;
  long long v54 = v37;
  long long v55 = v38;
  long long v56 = v39;
  long long v51 = v34;
  long long v52 = v35;
  sub_1000E5CB0((uint64_t)&v51);
  return swift_release();
}

uint64_t sub_1000E4D34@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for DefaultEntryView(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.subheadline.getter();
  static Font.Weight.semibold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v7 = Text.font(_:)();
  uint64_t v31 = v8;
  uint64_t v32 = v7;
  char v30 = v9;
  uint64_t v33 = v10;
  swift_release();
  sub_10000FCC4(v2, v4, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  static Font.footnote.getter();
  static Font.Weight.regular.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v16 = Text.font(_:)();
  uint64_t v18 = v17;
  char v20 = v19;
  swift_release();
  sub_10000FCC4(v11, v13, v15);
  swift_bridgeObjectRelease();
  if (qword_1001A4E40 != -1) {
    swift_once();
  }
  char v21 = v20 & 1;
  swift_retain();
  uint64_t v22 = Text.foregroundStyle<A>(_:)();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  char v28 = v27 & 1;
  sub_10000FCC4(v16, v18, v21);
  swift_release();
  swift_bridgeObjectRelease();
  *(void *)a1 = v32;
  *(void *)(a1 + 8) = v31;
  *(unsigned char *)(a1 + 16) = v30 & 1;
  *(void *)(a1 + 24) = v33;
  *(void *)(a1 + 32) = v22;
  *(void *)(a1 + 40) = v24;
  *(unsigned char *)(a1 + 48) = v28;
  *(void *)(a1 + 56) = v26;
  sub_10000FCD4(v32, v31, v30 & 1);
  swift_bridgeObjectRetain();
  sub_10000FCD4(v22, v24, v28);
  swift_bridgeObjectRetain();
  sub_10000FCC4(v22, v24, v28);
  swift_bridgeObjectRelease();
  sub_10000FCC4(v32, v31, v30 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000E5054()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000E5074(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

double sub_1000E50DC@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for PhotoEntryView(0) - 8);
  char v6 = (void *)(v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));

  return sub_1000E366C(a1, v6, a2);
}

unint64_t sub_1000E515C()
{
  unint64_t result = qword_1001AAB40;
  if (!qword_1001AAB40)
  {
    sub_100004A58(&qword_1001AAB38);
    sub_1000E51D8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AAB40);
  }
  return result;
}

unint64_t sub_1000E51D8()
{
  unint64_t result = qword_1001AAB48;
  if (!qword_1001AAB48)
  {
    sub_100004A58(&qword_1001AAB50);
    sub_1000E5254();
    sub_1000E54D8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AAB48);
  }
  return result;
}

unint64_t sub_1000E5254()
{
  unint64_t result = qword_1001AAB58;
  if (!qword_1001AAB58)
  {
    sub_100004A58(&qword_1001AAB60);
    sub_1000E52D0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AAB58);
  }
  return result;
}

unint64_t sub_1000E52D0()
{
  unint64_t result = qword_1001AAB68;
  if (!qword_1001AAB68)
  {
    sub_100004A58(&qword_1001AAB70);
    sub_1000E534C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AAB68);
  }
  return result;
}

unint64_t sub_1000E534C()
{
  unint64_t result = qword_1001AAB78;
  if (!qword_1001AAB78)
  {
    sub_100004A58(&qword_1001AAB80);
    sub_1000E53C8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AAB78);
  }
  return result;
}

unint64_t sub_1000E53C8()
{
  unint64_t result = qword_1001AAB88;
  if (!qword_1001AAB88)
  {
    sub_100004A58(&qword_1001AAB90);
    sub_1000E5444();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AAB88);
  }
  return result;
}

unint64_t sub_1000E5444()
{
  unint64_t result = qword_1001AAB98;
  if (!qword_1001AAB98)
  {
    sub_100004A58(&qword_1001AABA0);
    sub_1000E5A28((unint64_t *)&qword_1001A91E0, &qword_1001A91E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AAB98);
  }
  return result;
}

unint64_t sub_1000E54D8()
{
  unint64_t result = qword_1001AABA8;
  if (!qword_1001AABA8)
  {
    sub_100004A58(&qword_1001AABB0);
    sub_10003DAF8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AABA8);
  }
  return result;
}

uint64_t sub_1000E5554(uint64_t result)
{
  *(unsigned char *)(result + 250) = 1;
  return result;
}

uint64_t sub_1000E5560(uint64_t result)
{
  *(unsigned char *)(result + 249) = 1;
  return result;
}

uint64_t sub_1000E556C(uint64_t result)
{
  *(unsigned char *)(result + 250) = 0;
  return result;
}

uint64_t sub_1000E5574(uint64_t result)
{
  *(unsigned char *)(result + 249) = 0;
  return result;
}

uint64_t sub_1000E5580(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _WORD))
{
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    *(void *)(a1 + 240),
    *(_WORD *)(a1 + 248));
  return a1;
}

uint64_t sub_1000E5618(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000E5648()
{
  uint64_t v1 = (int *)(type metadata accessor for PhotoEntryView(0) - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  swift_release();
  swift_release();
  uint64_t v3 = v2 + v1[7];
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

double sub_1000E5768@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for PhotoEntryView(0) - 8);
  char v6 = (void *)(v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));

  return sub_1000E2E8C(a1, v6, a2);
}

unint64_t sub_1000E57E8()
{
  unint64_t result = qword_1001AAC18;
  if (!qword_1001AAC18)
  {
    sub_100004A58(&qword_1001AAC10);
    sub_1000E5864();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AAC18);
  }
  return result;
}

unint64_t sub_1000E5864()
{
  unint64_t result = qword_1001AAC20;
  if (!qword_1001AAC20)
  {
    sub_100004A58(&qword_1001AAC28);
    sub_1000E5904();
    sub_10000A780(&qword_1001AAC40, &qword_1001AAC48);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AAC20);
  }
  return result;
}

unint64_t sub_1000E5904()
{
  unint64_t result = qword_1001AAC30;
  if (!qword_1001AAC30)
  {
    sub_100004A58(&qword_1001AAC38);
    sub_1000E53C8();
    sub_10000A780(&qword_1001A91F0, &qword_1001A91F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AAC30);
  }
  return result;
}

uint64_t sub_1000E59A4(uint64_t result)
{
  *(unsigned char *)(result + 168) = 1;
  return result;
}

uint64_t sub_1000E59B0(uint64_t result)
{
  *(unsigned char *)(result + 168) = 0;
  return result;
}

uint64_t sub_1000E59B8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000E59F0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000E5A28(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000E5A94(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  uint64_t v3 = *(void *)(a1 + 112);
  char v4 = *(unsigned char *)(a1 + 120);
  uint64_t v5 = *(void *)(a1 + 136);
  uint64_t v6 = *(void *)(a1 + 144);
  char v7 = *(unsigned char *)(a1 + 152);
  swift_retain();
  sub_10000FCD4(v2, v3, v4);
  swift_bridgeObjectRetain();
  sub_10000FCD4(v5, v6, v7);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1000E5B64(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  uint64_t v3 = *(void *)(a1 + 112);
  char v4 = *(unsigned char *)(a1 + 120);
  uint64_t v5 = *(void *)(a1 + 136);
  uint64_t v6 = *(void *)(a1 + 144);
  char v7 = *(unsigned char *)(a1 + 152);
  swift_release();
  sub_10000FCC4(v2, v3, v4);
  swift_bridgeObjectRelease();
  sub_10000FCC4(v5, v6, v7);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_1000E5C3C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  char v4 = *(unsigned char *)(a1 + 72);
  sub_10000FCD4(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRetain();
  sub_10000FCD4(v2, v3, v4);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000E5CB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  char v4 = *(unsigned char *)(a1 + 72);
  sub_10000FCC4(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRelease();
  sub_10000FCC4(v2, v3, v4);
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1000E5D28()
{
  unint64_t result = qword_1001AAC88;
  if (!qword_1001AAC88)
  {
    sub_100004A58(&qword_1001AABC0);
    sub_1000E5DA4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AAC88);
  }
  return result;
}

unint64_t sub_1000E5DA4()
{
  unint64_t result = qword_1001AAC90;
  if (!qword_1001AAC90)
  {
    sub_100004A58(&qword_1001AAB20);
    sub_1000E5E20();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AAC90);
  }
  return result;
}

unint64_t sub_1000E5E20()
{
  unint64_t result = qword_1001AAC98;
  if (!qword_1001AAC98)
  {
    sub_100004A58(&qword_1001AAB18);
    sub_1000E5EC0();
    sub_10000A780(&qword_1001A62A0, &qword_1001A62A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AAC98);
  }
  return result;
}

unint64_t sub_1000E5EC0()
{
  unint64_t result = qword_1001AACA0;
  if (!qword_1001AACA0)
  {
    sub_100004A58(&qword_1001AAB10);
    sub_10000A780(&qword_1001AACA8, &qword_1001AAB08);
    sub_10000A780(&qword_1001AACB0, &qword_1001AABB8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AACA0);
  }
  return result;
}

unint64_t sub_1000E5F88()
{
  unint64_t result = qword_1001AACB8;
  if (!qword_1001AACB8)
  {
    sub_100004A58(&qword_1001AAC80);
    sub_1000E6004();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AACB8);
  }
  return result;
}

unint64_t sub_1000E6004()
{
  unint64_t result = qword_1001AACC0;
  if (!qword_1001AACC0)
  {
    sub_100004A58(&qword_1001AAC78);
    sub_1000E6080();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AACC0);
  }
  return result;
}

unint64_t sub_1000E6080()
{
  unint64_t result = qword_1001AACC8;
  if (!qword_1001AACC8)
  {
    sub_100004A58(&qword_1001AAC70);
    sub_1000E6120();
    sub_10000A780(&qword_1001A62A0, &qword_1001A62A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AACC8);
  }
  return result;
}

unint64_t sub_1000E6120()
{
  unint64_t result = qword_1001AACD0;
  if (!qword_1001AACD0)
  {
    sub_100004A58(&qword_1001AACD8);
    sub_1000E61C0();
    sub_10000A780(&qword_1001A6290, &qword_1001A6298);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AACD0);
  }
  return result;
}

unint64_t sub_1000E61C0()
{
  unint64_t result = qword_1001AACE0;
  if (!qword_1001AACE0)
  {
    sub_100004A58(&qword_1001AACE8);
    sub_1000E623C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AACE0);
  }
  return result;
}

unint64_t sub_1000E623C()
{
  unint64_t result = qword_1001AACF0;
  if (!qword_1001AACF0)
  {
    sub_100004A58(&qword_1001AACF8);
    sub_10000A780(&qword_1001AAD00, &qword_1001AAD08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AACF0);
  }
  return result;
}

uint64_t sub_1000E62DC()
{
  return sub_1000DFEBC();
}

uint64_t sub_1000E62F4()
{
  return sub_1000DFE94();
}

uint64_t sub_1000E630C(char a1)
{
  return qword_100159F48[a1];
}

ValueMetadata *type metadata accessor for AnalyticsPageName()
{
  return &type metadata for AnalyticsPageName;
}

ValueMetadata *type metadata accessor for AnalyticsString()
{
  return &type metadata for AnalyticsString;
}

uint64_t sub_1000E6354(char *a1, char *a2)
{
  return sub_100137394(*a1, *a2);
}

Swift::Int sub_1000E6360()
{
  return sub_10005BC2C();
}

uint64_t sub_1000E6368()
{
  return sub_10005BC98();
}

Swift::Int sub_1000E6370()
{
  return sub_10005C2E4();
}

unint64_t sub_1000E6378@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000E7448(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000E63A8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000E630C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000E63D4(char a1)
{
  return *(void *)&aEvent_12[8 * a1];
}

uint64_t sub_1000E63F4()
{
  return *v0;
}

id sub_1000E63FC()
{
  id v0 = objc_allocWithZone((Class)NSString);
  swift_bridgeObjectRetain();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithString:v1];

  return v2;
}

uint64_t sub_1000E6474(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6AD8(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1000E63D4);
}

Swift::Int sub_1000E648C(uint64_t a1, uint64_t a2)
{
  return sub_1000E6B88(a1, a2, (void (*)(uint64_t))sub_1000E63D4);
}

uint64_t sub_1000E64A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E6C0C(a1, a2, a3, (void (*)(void))sub_1000E63D4);
}

Swift::Int sub_1000E64BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E6C7C(a1, a2, a3, (void (*)(uint64_t))sub_1000E63D4);
}

unint64_t sub_1000E64D4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000E7494(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000E6504@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000E63D4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1000E6530(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x726564616568;
      break;
    case 2:
      unint64_t result = 0x7261646E656C6163;
      break;
    case 3:
      unint64_t result = 0x42746E65746E6F63;
      break;
    case 4:
      unint64_t result = 0x6E6F697461636F6CLL;
      break;
    case 5:
    case 10:
      return result;
    case 6:
      unint64_t result = 0x6C75646F4D707061;
      break;
    case 7:
      unint64_t result = 0x737265746C6966;
      break;
    case 8:
      unint64_t result = 0x694C73746E657665;
      break;
    case 9:
      unint64_t result = 0x646F4D636973756DLL;
      break;
    case 11:
      unint64_t result = 0x7473694C746573;
      break;
    case 12:
      unint64_t result = 0x507473694C746573;
      break;
    case 13:
      unint64_t result = 0x736F65646976;
      break;
    default:
      unint64_t result = 0x7261626C6F6F74;
      break;
  }
  return result;
}

uint64_t sub_1000E6704()
{
  return 2;
}

id sub_1000E670C(uint64_t a1, uint64_t a2)
{
  return sub_1000E6F34(a1, a2, (void (*)(void))sub_1000E63D4);
}

uint64_t sub_1000E6728(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsModuleAction()
{
  return &type metadata for AnalyticsModuleAction;
}

ValueMetadata *type metadata accessor for AnalyticsModuleName()
{
  return &type metadata for AnalyticsModuleName;
}

uint64_t _s16EventViewService17AnalyticsPageNameV9ValueTypeOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s16EventViewService17AnalyticsPageNameV9ValueTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E68D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsPageName.ValueType()
{
  return &type metadata for AnalyticsPageName.ValueType;
}

unsigned char *storeEnumTagSinglePayload for AnalyticsKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E69D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsKey()
{
  return &type metadata for AnalyticsKey;
}

unint64_t sub_1000E6A14()
{
  unint64_t result = qword_1001AAD60;
  if (!qword_1001AAD60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AAD60);
  }
  return result;
}

unint64_t sub_1000E6A6C()
{
  unint64_t result = qword_1001AAD68;
  if (!qword_1001AAD68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AAD68);
  }
  return result;
}

uint64_t sub_1000E6AC0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6AD8(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1000E6530);
}

uint64_t sub_1000E6AD8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a5(*a1);
  uint64_t v9 = v8;
  if (v7 == a5(v6) && v9 == v10) {
    char v12 = 1;
  }
  else {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

Swift::Int sub_1000E6B70(uint64_t a1, uint64_t a2)
{
  return sub_1000E6B88(a1, a2, (void (*)(uint64_t))sub_1000E6530);
}

Swift::Int sub_1000E6B88(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)();
  a3(v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1000E6BF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E6C0C(a1, a2, a3, (void (*)(void))sub_1000E6530);
}

uint64_t sub_1000E6C0C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4(*v4);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000E6C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E6C7C(a1, a2, a3, (void (*)(uint64_t))sub_1000E6530);
}

Swift::Int sub_1000E6C7C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)();
  a4(v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_1000E6CE4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000E7894(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000E6D14@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1000E6530(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1000E6D40(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x726564616568;
      break;
    case 2:
      unint64_t result = 0x7261646E656C6163;
      break;
    case 3:
      unint64_t result = 0x42746E65746E6F63;
      break;
    case 4:
      unint64_t result = 0x6E6F697461636F6CLL;
      break;
    case 5:
    case 10:
      return result;
    case 6:
      unint64_t result = 0x6C75646F4D707061;
      break;
    case 7:
      unint64_t result = 0x737265746C6966;
      break;
    case 8:
      unint64_t result = 0x694C73746E657665;
      break;
    case 9:
      unint64_t result = 0x646F4D636973756DLL;
      break;
    case 11:
      unint64_t result = 0x7473694C746573;
      break;
    case 12:
      unint64_t result = 0x507473694C746573;
      break;
    case 13:
      unint64_t result = 0x736F65646976;
      break;
    default:
      unint64_t result = 0x7261626C6F6F74;
      break;
  }
  return result;
}

uint64_t sub_1000E6F14()
{
  return 3;
}

id sub_1000E6F1C(uint64_t a1, uint64_t a2)
{
  return sub_1000E6F34(a1, a2, (void (*)(void))sub_1000E6D40);
}

id sub_1000E6F34(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(*v3);
  id v4 = objc_allocWithZone((Class)NSString);
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v4 initWithString:v5];

  return v6;
}

unint64_t sub_1000E6FB4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  unint64_t v3 = a1;
  if (a3 >= 3u)
  {
    unint64_t v3 = 0xD000000000000011;
    switch(a1)
    {
      case 1:
        unint64_t v3 = 0x6572616873;
        break;
      case 2:
        unint64_t v3 = 0x7373696D736964;
        break;
      case 3:
        unint64_t v3 = 0x656B636954746567;
        break;
      case 4:
        unint64_t v3 = 0x6C61436F54646461;
        break;
      case 5:
        unint64_t v3 = 0x614D6E496E65706FLL;
        break;
      case 6:
        unint64_t v3 = 0x64616F6C6E776F64;
        break;
      case 7:
        unint64_t v3 = 0x6157657461657263;
        break;
      case 8:
        unint64_t v3 = 0x7070416E65706FLL;
        break;
      case 9:
        unint64_t v3 = 0x746E6F436E65706FLL;
        break;
      case 10:
        unint64_t v3 = 0x6E6576456E65706FLL;
        break;
      case 11:
        unint64_t v3 = 0x746C69466E65706FLL;
        break;
      case 12:
      case 21:
        break;
      case 13:
        unint64_t v3 = 0xD000000000000013;
        break;
      case 14:
        unint64_t v3 = 0x676E6F536E65706FLL;
        break;
      case 15:
        unint64_t v3 = 0x656469566E65706FLL;
        break;
      case 16:
        unint64_t v3 = 2036427888;
        break;
      case 17:
        unint64_t v3 = 0x6573756170;
        break;
      case 18:
        unint64_t v3 = 0x6C69467465736572;
        break;
      case 19:
      case 20:
        unint64_t v3 = 0x61577463656C6573;
        break;
      case 22:
        unint64_t v3 = 0x65726F4D776F6873;
        break;
      case 23:
        unint64_t v3 = 0x6F68506570697773;
        break;
      case 24:
        unint64_t v3 = 0x6E6F536570697773;
        break;
      case 25:
        unint64_t v3 = 0x6469566570697773;
        break;
      case 26:
        unint64_t v3 = 0x6C61576570697773;
        break;
      case 27:
        unint64_t v3 = 0x7461576570697773;
        break;
      case 28:
        unint64_t v3 = 0x706C6C6157657375;
        break;
      default:
        unint64_t v3 = 0x686372616573;
        break;
    }
  }
  sub_10000751C(a1, a2, a3);
  return v3;
}

unint64_t sub_1000E73B4()
{
  return sub_1000E6FB4(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t sub_1000E73C0()
{
  return 4;
}

id sub_1000E73C8()
{
  sub_1000E6FB4(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
  id v1 = objc_allocWithZone((Class)NSString);
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v1 initWithString:v2];

  return v3;
}

unint64_t sub_1000E7448(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100195068, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

unint64_t sub_1000E7494(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100195100, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xA) {
    return 10;
  }
  else {
    return v3;
  }
}

uint64_t destroy for AnalyticsModuleAction.ValueType(uint64_t a1)
{
  return sub_1000E6728(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s16EventViewService21AnalyticsModuleActionV9ValueTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_10000751C(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s16EventViewService21AnalyticsModuleActionV9ValueTypeOwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_10000751C(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_1000E6728(v6, v7, v8);
  return a1;
}

uint64_t _s16EventViewService21AnalyticsModuleActionV9ValueTypeOwta_0(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_1000E6728(v4, v5, v6);
  return a1;
}

uint64_t _s16EventViewService21AnalyticsModuleActionV9ValueTypeOwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t _s16EventViewService21AnalyticsModuleActionV9ValueTypeOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000E7668(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_1000E7680(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)unint64_t result = a2 - 3;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsModuleAction.ValueType()
{
  return &type metadata for AnalyticsModuleAction.ValueType;
}

uint64_t _s16EventViewService19AnalyticsModuleNameV9ValueTypeOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v8 = v6 - 14;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s16EventViewService19AnalyticsModuleNameV9ValueTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *unint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E7804);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsModuleName.ValueType()
{
  return &type metadata for AnalyticsModuleName.ValueType;
}

unint64_t sub_1000E7840()
{
  unint64_t result = qword_1001AADC0[0];
  if (!qword_1001AADC0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001AADC0);
  }
  return result;
}

unint64_t sub_1000E7894(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100195210, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xE) {
    return 14;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000E78E8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  swift_getWitnessTable();
  Bindable<A>.init(wrappedValue:)();
  unsigned int v6 = (int *)type metadata accessor for FeaturedVideosView();
  uint64_t v7 = a3 + v6[9];
  type metadata accessor for Optional();
  uint64_t v8 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7, a1, v8);
  sub_1000E7B3C(a2);
  uint64_t v9 = (uint64_t *)(a3 + v6[11]);
  type metadata accessor for RemoteViewConfiguration();
  sub_1000EE4C8((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  *uint64_t v9 = EnvironmentObject.init()();
  v9[1] = v10;
  uint64_t v11 = (uint64_t *)(a3 + v6[12]);
  *uint64_t v11 = swift_getKeyPath();
  sub_10000570C(&qword_1001A5470);
  swift_storeEnumTagMultiPayload();
  char v12 = (uint64_t *)(a3 + v6[13]);
  *char v12 = swift_getKeyPath();

  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for FeaturedVideosView()
{
  return sub_10000B72C();
}

uint64_t sub_1000E7AFC()
{
  type metadata accessor for FeaturedVideosViewModel();
  type metadata accessor for Bindable();
  Bindable.wrappedValue.getter();
  return v1;
}

uint64_t sub_1000E7B3C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v7 - v5, a1, v2);
  State.init(wrappedValue:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void sub_1000E7C40()
{
  type metadata accessor for FeaturedVideosViewModel();
  type metadata accessor for Bindable();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Optional();
    type metadata accessor for Binding();
    if (v1 <= 0x3F)
    {
      type metadata accessor for State();
      if (v2 <= 0x3F)
      {
        sub_100025218();
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

void *sub_1000E7DB4(void *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *(void *)a2;
    *a1 = *(void *)a2;
    char v20 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)(a3 + 16);
    type metadata accessor for FeaturedVideosViewModel();
    uint64_t v8 = type metadata accessor for Bindable();
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    uint64_t v9 = *(int *)(a3 + 36);
    long long v43 = a2;
    long long v44 = a1;
    uint64_t v10 = (void *)((char *)a1 + v9);
    uint64_t v11 = &a2[v9];
    uint64_t v12 = *((void *)v11 + 1);
    *uint64_t v10 = *(void *)v11;
    v10[1] = v12;
    uint64_t v13 = type metadata accessor for Optional();
    uint64_t v14 = *(int *)(type metadata accessor for Binding() + 32);
    char v15 = (char *)v10 + v14;
    uint64_t v16 = &v11[v14];
    uint64_t v17 = *(void *)(v7 - 8);
    uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    swift_retain();
    swift_retain();
    if (v18(v16, 1, v7))
    {
      memcpy(v15, v16, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v15, v16, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v7);
    }
    char v20 = v44;
    uint64_t v21 = *(int *)(a3 + 40);
    uint64_t v22 = (char *)v44 + v21;
    uint64_t v23 = &v43[v21];
    if (v18(&v43[v21], 1, v7))
    {
      memcpy(v22, v23, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v22, v23, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v22, 0, 1, v7);
    }
    uint64_t v24 = type metadata accessor for State();
    *(void *)&v22[*(int *)(v24 + 28)] = *(void *)&v23[*(int *)(v24 + 28)];
    uint64_t v25 = *(int *)(a3 + 44);
    uint64_t v26 = *(int *)(a3 + 48);
    char v27 = (void *)((char *)v44 + v25);
    char v28 = (uint64_t *)&v43[v25];
    uint64_t v30 = *v28;
    uint64_t v29 = v28[1];
    *char v27 = v30;
    v27[1] = v29;
    uint64_t v31 = (void *)((char *)v44 + v26);
    uint64_t v32 = &v43[v26];
    swift_retain();
    swift_retain();
    sub_10000570C(&qword_1001A5470);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v33 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v34 = *(void *)(v33 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        uint64_t v35 = sub_10000570C(&qword_1001A5478);
        memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
    }
    else
    {
      *uint64_t v31 = *(void *)v32;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v36 = *(int *)(a3 + 52);
    long long v37 = (void *)((char *)v44 + v36);
    long long v38 = &v43[v36];
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v39 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v40 = *(void *)(v39 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
      {
        uint64_t v41 = sub_10000570C(&qword_1001A5478);
        memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v40 + 16))(v37, v38, v39);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      }
    }
    else
    {
      *long long v37 = *(void *)v38;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v20;
}

uint64_t sub_1000E82E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  type metadata accessor for FeaturedVideosViewModel();
  uint64_t v5 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 36);
  swift_release();
  swift_release();
  type metadata accessor for Optional();
  uint64_t v7 = v6 + *(int *)(type metadata accessor for Binding() + 32);
  uint64_t v8 = *(void *)(v4 - 8);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v7, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v4);
  }
  uint64_t v10 = a1 + *(int *)(a2 + 40);
  if (!v9(v10, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v4);
  }
  type metadata accessor for State();
  swift_release();
  swift_release();
  uint64_t v11 = a1 + *(int *)(a2 + 48);
  sub_10000570C(&qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v13 = *(void *)(v12 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v14 = a1 + *(int *)(a2 + 52);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v18 = *(void *)(v15 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v14, 1, v15);
    if (!result)
    {
      uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8);
      return v17(v14, v15);
    }
  }
  else
  {
    return swift_release();
  }
  return result;
}

uint64_t sub_1000E863C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  type metadata accessor for FeaturedVideosViewModel();
  uint64_t v7 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v40 = a2;
  uint64_t v41 = a1;
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(int *)(type metadata accessor for Binding() + 32);
  uint64_t v14 = (char *)v9 + v13;
  uint64_t v15 = (char *)v10 + v13;
  uint64_t v16 = *(void *)(v6 - 8);
  uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  swift_retain();
  swift_retain();
  if (v17(v15, 1, v6))
  {
    memcpy(v14, v15, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v14, v15, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v6);
  }
  uint64_t v18 = *(int *)(a3 + 40);
  uint64_t v19 = (char *)(v41 + v18);
  char v20 = (char *)(v40 + v18);
  if (v17((char *)(v40 + v18), 1, v6))
  {
    memcpy(v19, v20, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v20, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v19, 0, 1, v6);
  }
  uint64_t v21 = type metadata accessor for State();
  *(void *)&v19[*(int *)(v21 + 28)] = *(void *)&v20[*(int *)(v21 + 28)];
  uint64_t v22 = *(int *)(a3 + 44);
  uint64_t v23 = *(int *)(a3 + 48);
  uint64_t v24 = (void *)(v41 + v22);
  uint64_t v25 = (uint64_t *)(v40 + v22);
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  *uint64_t v24 = v27;
  v24[1] = v26;
  char v28 = (void *)(v41 + v23);
  uint64_t v29 = (void *)(v40 + v23);
  swift_retain();
  swift_retain();
  sub_10000570C(&qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v30 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v31 = *(void *)(v30 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      uint64_t v32 = sub_10000570C(&qword_1001A5478);
      memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v31 + 16))(v28, v29, v30);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
  }
  else
  {
    *char v28 = *v29;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v33 = *(int *)(a3 + 52);
  uint64_t v34 = (void *)(v41 + v33);
  uint64_t v35 = (void *)(v40 + v33);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v36 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v37 = *(void *)(v36 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
    {
      uint64_t v38 = sub_10000570C(&qword_1001A5478);
      memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v37 + 16))(v34, v35, v36);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
    }
  }
  else
  {
    *uint64_t v34 = *v35;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return v41;
}

uint64_t sub_1000E8B1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  type metadata accessor for FeaturedVideosViewModel();
  uint64_t v7 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v41 = a1;
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = a2 + v8;
  *uint64_t v9 = *(void *)(a2 + v8);
  swift_retain();
  swift_release();
  v9[1] = *(void *)(v10 + 8);
  swift_retain();
  swift_release();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(int *)(type metadata accessor for Binding() + 32);
  uint64_t v13 = (char *)v9 + v12;
  uint64_t v14 = (char *)(v10 + v12);
  uint64_t v15 = *(void *)(v6 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v13, 1, v6);
  int v18 = v16(v14, 1, v6);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v13, v14, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v6);
LABEL_6:
    memcpy(v13, v14, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v13, v14, v6);
LABEL_7:
  uint64_t v19 = *(int *)(a3 + 40);
  char v20 = (char *)(v41 + v19);
  uint64_t v21 = (char *)(a2 + v19);
  int v22 = v16((char *)(v41 + v19), 1, v6);
  int v23 = v16(v21, 1, v6);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v20, v21, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v20, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v6);
LABEL_12:
    memcpy(v20, v21, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v20, v21, v6);
LABEL_13:
  uint64_t v24 = type metadata accessor for State();
  *(void *)&v20[*(int *)(v24 + 28)] = *(void *)&v21[*(int *)(v24 + 28)];
  swift_retain();
  swift_release();
  uint64_t v25 = *(int *)(a3 + 44);
  uint64_t v26 = v41 + v25;
  uint64_t v27 = a2 + v25;
  *(void *)(v41 + v25) = *(void *)(a2 + v25);
  swift_retain();
  swift_release();
  *(void *)(v26 + 8) = *(void *)(v27 + 8);
  if (v41 != a2)
  {
    uint64_t v28 = *(int *)(a3 + 48);
    uint64_t v29 = (void *)(v41 + v28);
    uint64_t v30 = (void *)(a2 + v28);
    sub_10000ACE0(v41 + v28, &qword_1001A5470);
    sub_10000570C(&qword_1001A5470);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v31 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v32 = *(void *)(v31 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
      {
        uint64_t v33 = sub_10000570C(&qword_1001A5478);
        memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v32 + 16))(v29, v30, v31);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      }
    }
    else
    {
      *uint64_t v29 = *v30;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v34 = *(int *)(a3 + 52);
    uint64_t v35 = (void *)(v41 + v34);
    uint64_t v36 = (void *)(a2 + v34);
    sub_10000ACE0(v41 + v34, &qword_1001A5470);
    sub_10000570C(&qword_1001A5470);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v37 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v38 = *(void *)(v37 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
      {
        uint64_t v39 = sub_10000570C(&qword_1001A5478);
        memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v38 + 16))(v35, v36, v37);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
      }
    }
    else
    {
      *uint64_t v35 = *v36;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v41;
}

uint64_t sub_1000E912C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  type metadata accessor for FeaturedVideosViewModel();
  uint64_t v7 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = a2 + v8;
  uint64_t v11 = *(void *)(a2 + v8 + 8);
  *uint64_t v9 = *(void *)(a2 + v8);
  v9[1] = v11;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(int *)(type metadata accessor for Binding() + 32);
  uint64_t v14 = (char *)v9 + v13;
  uint64_t v15 = (const void *)(v10 + v13);
  uint64_t v16 = *(void *)(v6 - 8);
  int v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
  if (v17(v15, 1, v6))
  {
    memcpy(v14, v15, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v16 + 32))(v14, v15, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v6);
  }
  uint64_t v18 = *(int *)(a3 + 40);
  uint64_t v19 = (char *)(a1 + v18);
  char v20 = (char *)(a2 + v18);
  if (v17((const void *)(a2 + v18), 1, v6))
  {
    memcpy(v19, v20, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v20, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v19, 0, 1, v6);
  }
  uint64_t v21 = type metadata accessor for State();
  *(void *)&v19[*(int *)(v21 + 28)] = *(void *)&v20[*(int *)(v21 + 28)];
  uint64_t v22 = *(int *)(a3 + 48);
  *(_OWORD *)(a1 + *(int *)(a3 + 44)) = *(_OWORD *)(a2 + *(int *)(a3 + 44));
  int v23 = (void *)(a1 + v22);
  uint64_t v24 = (const void *)(a2 + v22);
  uint64_t v25 = sub_10000570C(&qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v26 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v26))
    {
      uint64_t v28 = sub_10000570C(&qword_1001A5478);
      memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v27 + 32))(v23, v24, v26);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v23, 0, 1, v26);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
  }
  uint64_t v29 = *(int *)(a3 + 52);
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (const void *)(a2 + v29);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v32 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v33 = *(void *)(v32 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      uint64_t v34 = sub_10000570C(&qword_1001A5478);
      memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v33 + 32))(v30, v31, v32);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v30, v31, *(void *)(*(void *)(v25 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000E95EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  type metadata accessor for FeaturedVideosViewModel();
  uint64_t v7 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v43 = a1;
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = a2 + v8;
  *uint64_t v9 = *(void *)(a2 + v8);
  swift_release();
  v9[1] = *(void *)(v10 + 8);
  swift_release();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(int *)(type metadata accessor for Binding() + 32);
  uint64_t v13 = (char *)v9 + v12;
  uint64_t v14 = (char *)(v10 + v12);
  uint64_t v15 = *(void *)(v6 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v13, 1, v6);
  int v18 = v16(v14, 1, v6);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v13, v14, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v6);
LABEL_6:
    memcpy(v13, v14, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v13, v14, v6);
LABEL_7:
  uint64_t v19 = *(int *)(a3 + 40);
  char v20 = (char *)(v43 + v19);
  uint64_t v21 = (char *)(a2 + v19);
  int v22 = v16((char *)(v43 + v19), 1, v6);
  int v23 = v16(v21, 1, v6);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v21, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v20, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v6);
LABEL_12:
    memcpy(v20, v21, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v20, v21, v6);
LABEL_13:
  uint64_t v24 = type metadata accessor for State();
  *(void *)&v20[*(int *)(v24 + 28)] = *(void *)&v21[*(int *)(v24 + 28)];
  swift_release();
  uint64_t v25 = *(int *)(a3 + 44);
  uint64_t v26 = v43 + v25;
  uint64_t v27 = a2 + v25;
  *(void *)(v43 + v25) = *(void *)(a2 + v25);
  swift_release();
  *(void *)(v26 + 8) = *(void *)(v27 + 8);
  if (v43 != a2)
  {
    uint64_t v28 = *(int *)(a3 + 48);
    uint64_t v29 = (void *)(v43 + v28);
    uint64_t v30 = (const void *)(a2 + v28);
    sub_10000ACE0(v43 + v28, &qword_1001A5470);
    uint64_t v31 = sub_10000570C(&qword_1001A5470);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v32 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v33 = *(void *)(v32 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48))(v30, 1, v32))
      {
        uint64_t v34 = sub_10000570C(&qword_1001A5478);
        memcpy(v29, v30, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v33 + 32))(v29, v30, v32);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v29, 0, 1, v32);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
    }
    uint64_t v35 = *(int *)(a3 + 52);
    uint64_t v36 = (void *)(v43 + v35);
    uint64_t v37 = (const void *)(a2 + v35);
    sub_10000ACE0(v43 + v35, &qword_1001A5470);
    uint64_t v38 = sub_10000570C(&qword_1001A5470);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v39 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v40 = *(void *)(v39 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v40 + 48))(v37, 1, v39))
      {
        uint64_t v41 = sub_10000570C(&qword_1001A5478);
        memcpy(v36, v37, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v40 + 32))(v36, v37, v39);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v36, 0, 1, v39);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64));
    }
  }
  return v43;
}

uint64_t sub_1000E9BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E9C00);
}

uint64_t sub_1000E9C00(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for FeaturedVideosViewModel();
  uint64_t v6 = type metadata accessor for Bindable();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  type metadata accessor for Optional();
  uint64_t v11 = type metadata accessor for Binding();
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[9];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = type metadata accessor for State();
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[10];
    goto LABEL_7;
  }
  if (a2 == 2147483646)
  {
    unint64_t v16 = *(void *)(a1 + a3[11]);
    if (v16 >= 0xFFFFFFFF) {
      LODWORD(v16) = -1;
    }
    int v17 = v16 - 1;
    if (v17 < 0) {
      int v17 = -1;
    }
    return (v17 + 1);
  }
  else
  {
    uint64_t v18 = sub_10000570C(&qword_1001A5F10);
    uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48);
    uint64_t v20 = v18;
    uint64_t v21 = a1 + a3[12];
    return v19(v21, a2, v20);
  }
}

uint64_t sub_1000E9E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E9E1C);
}

uint64_t sub_1000E9E1C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  type metadata accessor for FeaturedVideosViewModel();
  uint64_t v8 = type metadata accessor for Bindable();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_8:
    return v11(v12, a2, a2, v10);
  }
  type metadata accessor for Optional();
  uint64_t v13 = type metadata accessor for Binding();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[9];
LABEL_7:
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_8;
  }
  uint64_t result = type metadata accessor for State();
  if (*(_DWORD *)(*(void *)(result - 8) + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v14 = *(void *)(result - 8);
    uint64_t v15 = a4[10];
    goto LABEL_7;
  }
  if (a3 == 2147483646)
  {
    *(void *)(a1 + a4[11]) = a2;
  }
  else
  {
    uint64_t v17 = sub_10000570C(&qword_1001A5F10);
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
    uint64_t v19 = v17;
    uint64_t v20 = a1 + a4[12];
    return v18(v20, a2, a2, v19);
  }
  return result;
}

uint64_t sub_1000EA028()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000EA06C()
{
  return State.projectedValue.getter();
}

uint64_t sub_1000EA0B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v21[3] = a2;
  v21[1] = sub_100004A58(&qword_1001AAE48);
  uint64_t v3 = *(void *)(a1 + 16);
  type metadata accessor for Array();
  uint64_t v4 = *(void *)(a1 + 24);
  type metadata accessor for FeaturedVideoPlayer();
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001A62A8);
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001A5A78);
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  v21[0] = &protocol conformance descriptor for VStack<A>;
  uint64_t v22 = type metadata accessor for VStack();
  uint64_t WitnessTable = swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  swift_getWitnessTable();
  uint64_t v26 = *(void *)(v4 + 8);
  type metadata accessor for ForEach();
  v21[12] = swift_getOpaqueTypeConformance2();
  swift_getWitnessTable();
  type metadata accessor for LazyHStack();
  swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  swift_getOpaqueTypeConformance2();
  type metadata accessor for ScrollView();
  swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for ViewAlignedScrollTargetBehavior();
  swift_getOpaqueTypeConformance2();
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeMetadata2();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v22 = OpaqueTypeMetadata2;
  uint64_t WitnessTable = v3;
  uint64_t v24 = OpaqueTypeConformance2;
  uint64_t v25 = v26;
  v21[10] = swift_getOpaqueTypeConformance2();
  v21[11] = &protocol witness table for _FlexFrameLayout;
  uint64_t v9 = swift_getWitnessTable();
  v21[9] = *(void *)(v26 + 8);
  uint64_t v22 = v7;
  uint64_t WitnessTable = v8;
  uint64_t v24 = v9;
  uint64_t v25 = swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for VStack();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)v21 - v17;
  static HorizontalAlignment.leading.getter();
  v21[6] = v3;
  v21[7] = v4;
  v21[8] = v21[2];
  VStack.init(alignment:spacing:content:)();
  swift_getWitnessTable();
  sub_1001221F0(v15, v10);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v15, v10);
  sub_1001221F0(v18, v10);
  return ((uint64_t (*)(char *, uint64_t))v19)(v18, v10);
}

uint64_t sub_1000EA6C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v194 = a1;
  uint64_t v185 = a4;
  uint64_t v193 = type metadata accessor for FeaturedVideosView();
  uint64_t v182 = *(void *)(v193 - 8);
  uint64_t v183 = *(void *)(v182 + 64);
  __chkstk_darwin(v193, v6);
  v195 = (char *)&v134 - v7;
  uint64_t v187 = type metadata accessor for Optional();
  uint64_t v184 = *(void *)(v187 - 8);
  __chkstk_darwin(v187, v187);
  v181 = (char *)&v134 - v8;
  uint64_t v9 = type metadata accessor for Binding();
  uint64_t v179 = *(void *)(v9 - 8);
  v180 = (void (*)(char *, uint64_t, uint64_t))v9;
  __chkstk_darwin(v9, v10);
  v178 = (char *)&v134 - v11;
  uint64_t v12 = type metadata accessor for ViewAlignedScrollTargetBehavior.LimitBehavior();
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v176 = (char *)&v134 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for ViewAlignedScrollTargetBehavior();
  uint64_t v177 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v16);
  long long v175 = (char *)&v134 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for ContentMarginPlacement();
  uint64_t v173 = *(void *)(v18 - 8);
  uint64_t v174 = v18;
  __chkstk_darwin(v18, v19);
  long long v172 = (char *)&v134 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Array();
  uint64_t v22 = a3;
  v197 = (void (*)(void, void))a3;
  type metadata accessor for FeaturedVideoPlayer();
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001A62A8);
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001A5A78);
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v23 = type metadata accessor for VStack();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v204 = v23;
  uint64_t v205 = WitnessTable;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v27 = (void *)v22[1];
  uint64_t v204 = v21;
  uint64_t v205 = a2;
  uint64_t v206 = OpaqueTypeMetadata2;
  v207 = (void *)v26;
  uint64_t v208 = (uint64_t)v27;
  uint64_t v28 = v27;
  type metadata accessor for ForEach();
  uint64_t v204 = v23;
  uint64_t v205 = WitnessTable;
  v219[8] = swift_getOpaqueTypeConformance2();
  swift_getWitnessTable();
  uint64_t v29 = type metadata accessor for LazyHStack();
  uint64_t v30 = swift_getWitnessTable();
  uint64_t v204 = v29;
  uint64_t v205 = v30;
  uint64_t v161 = swift_getOpaqueTypeMetadata2();
  uint64_t v204 = v29;
  uint64_t v205 = v30;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v31 = type metadata accessor for ScrollView();
  uint64_t v166 = *(void *)(v31 - 8);
  __chkstk_darwin(v31, v32);
  uint64_t v158 = (char *)&v134 - v33;
  uint64_t v34 = swift_getWitnessTable();
  uint64_t v204 = v31;
  uint64_t v205 = v34;
  uint64_t v35 = v34;
  uint64_t v155 = v34;
  uint64_t v36 = swift_getOpaqueTypeMetadata2();
  uint64_t v165 = *(void *)(v36 - 8);
  __chkstk_darwin(v36, v37);
  uint64_t v154 = (char *)&v134 - v38;
  uint64_t v204 = v31;
  uint64_t v205 = v35;
  uint64_t v39 = swift_getOpaqueTypeConformance2();
  uint64_t v204 = v36;
  uint64_t v40 = v36;
  uint64_t v147 = v36;
  uint64_t v148 = v39;
  uint64_t v205 = v39;
  uint64_t v41 = v39;
  uint64_t v42 = swift_getOpaqueTypeMetadata2();
  uint64_t v163 = *(void *)(v42 - 8);
  __chkstk_darwin(v42, v43);
  long long v146 = (char *)&v134 - v44;
  uint64_t v204 = v40;
  uint64_t v205 = v41;
  uint64_t v45 = swift_getOpaqueTypeConformance2();
  uint64_t v204 = v42;
  uint64_t v46 = v42;
  uint64_t v143 = v15;
  uint64_t v144 = v42;
  uint64_t v205 = v15;
  uint64_t v206 = v45;
  uint64_t v145 = v45;
  v207 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  uint64_t v47 = swift_getOpaqueTypeMetadata2();
  uint64_t v162 = *(void *)(v47 - 8);
  __chkstk_darwin(v47, v48);
  long long v142 = (char *)&v134 - v49;
  uint64_t v204 = v46;
  uint64_t v205 = v15;
  uint64_t v206 = v45;
  v207 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  uint64_t v50 = swift_getOpaqueTypeConformance2();
  uint64_t v204 = v47;
  uint64_t v51 = v47;
  uint64_t v135 = v47;
  uint64_t v136 = v50;
  uint64_t v186 = a2;
  uint64_t v205 = a2;
  uint64_t v206 = v50;
  uint64_t v52 = v50;
  v207 = v28;
  uint64_t v153 = swift_getOpaqueTypeMetadata2();
  uint64_t v159 = *(void *)(v153 - 8);
  __chkstk_darwin(v153, v153);
  long long v138 = (char *)&v134 - v53;
  uint64_t v54 = type metadata accessor for ModifiedContent();
  uint64_t v170 = *(void *)(v54 - 8);
  __chkstk_darwin(v54, v55);
  v191 = (char *)&v134 - v56;
  uint64_t v204 = v51;
  uint64_t v205 = a2;
  uint64_t v206 = v52;
  char v134 = v28;
  v207 = v28;
  uint64_t v137 = swift_getOpaqueTypeConformance2();
  v219[6] = v137;
  v219[7] = &protocol witness table for _FlexFrameLayout;
  long long v171 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v156 = v54;
  uint64_t v57 = swift_getWitnessTable();
  uint64_t v188 = v57;
  v219[5] = v28[1];
  uint64_t v58 = v187;
  uint64_t v157 = swift_getWitnessTable();
  uint64_t v204 = v54;
  uint64_t v205 = v58;
  uint64_t v206 = v57;
  v207 = (void *)v157;
  uint64_t v167 = &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>;
  uint64_t v164 = swift_getOpaqueTypeMetadata2();
  uint64_t v168 = *(void *)(v164 - 8);
  __chkstk_darwin(v164, v164);
  v190 = (char *)&v134 - v59;
  uint64_t v192 = type metadata accessor for ModifiedContent();
  uint64_t v169 = *(void *)(v192 - 8);
  uint64_t v61 = __chkstk_darwin(v192, v60);
  v196 = (char *)&v134 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v61, v63);
  v189 = (char *)&v134 - v64;
  uint64_t v65 = v193;
  uint64_t v66 = v194;
  sub_1000E7AFC();
  sub_10004B260();
  swift_release();
  uint64_t v67 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v69 = v68;
  LOBYTE(v22) = v70 & 1;
  static Font.title2.getter();
  static Font.Weight.bold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v71 = Text.font(_:)();
  uint64_t v150 = v72;
  uint64_t v151 = v71;
  LOBYTE(v15) = v73;
  uint64_t v152 = v74;
  swift_release();
  int v149 = v15 & 1;
  sub_10000FCC4(v67, v69, (char)v22);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v140 = swift_getKeyPath();
  int v139 = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  uint64_t v76 = v75;
  uint64_t v78 = v77;
  uint64_t v80 = v79;
  uint64_t v82 = v81;
  static Axis.Set.horizontal.getter();
  uint64_t v83 = v186;
  uint64_t v198 = v186;
  v199 = v197;
  uint64_t v84 = v66;
  uint64_t v200 = v66;
  long long v85 = v158;
  ScrollView.init(_:showsIndicators:content:)();
  sub_1000E7AFC();
  sub_10004B328();
  swift_release();
  long long v86 = v154;
  View.scrollDisabled(_:)();
  (*(void (**)(char *, uint64_t))(v166 + 8))(v85, v31);
  static Edge.Set.horizontal.getter();
  long long v87 = v172;
  static ContentMarginPlacement.automatic.getter();
  long long v89 = v146;
  uint64_t v88 = v147;
  View.contentMargins(_:_:for:)();
  (*(void (**)(char *, uint64_t))(v173 + 8))(v87, v174);
  (*(void (**)(char *, uint64_t))(v165 + 8))(v86, v88);
  static ViewAlignedScrollTargetBehavior.LimitBehavior.automatic.getter();
  long long v90 = v175;
  ViewAlignedScrollTargetBehavior.init(limitBehavior:)();
  long long v92 = v142;
  uint64_t v91 = v143;
  uint64_t v93 = v144;
  View.scrollTargetBehavior<A>(_:)();
  (*(void (**)(char *, uint64_t))(v177 + 8))(v90, v91);
  (*(void (**)(char *, uint64_t))(v163 + 8))(v89, v93);
  long long v94 = v178;
  sub_1000DBD60(v65, (uint64_t (*)(uint64_t))&Binding.projectedValue.getter);
  long long v95 = v138;
  uint64_t v96 = v135;
  uint64_t v97 = v83;
  View.scrollPosition<A>(id:anchor:)();
  (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t)))(v179 + 8))(v94, v180);
  (*(void (**)(char *, uint64_t))(v162 + 8))(v92, v96);
  static Alignment.center.getter();
  uint64_t v98 = v153;
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  (*(void (**)(char *, uint64_t))(v159 + 8))(v95, v98);
  long long v99 = v181;
  uint64_t v100 = v65;
  sub_1000DBD60(v65, (uint64_t (*)(uint64_t))&Binding.wrappedValue.getter);
  uint64_t v101 = v182;
  v180 = *(void (**)(char *, uint64_t, uint64_t))(v182 + 16);
  long long v102 = v195;
  v180(v195, v84, v100);
  uint64_t v103 = *(unsigned __int8 *)(v101 + 80);
  uint64_t v104 = (v103 + 32) & ~v103;
  v183 += v104;
  uint64_t v179 = v103 | 7;
  uint64_t v105 = swift_allocObject();
  long long v106 = v197;
  *(void *)(v105 + 16) = v97;
  *(void *)(v105 + 24) = v106;
  uint64_t v182 = *(void *)(v101 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v182)(v105 + v104, v102, v100);
  long long v107 = v191;
  uint64_t v108 = v156;
  long long v109 = (void *)v157;
  uint64_t v110 = v187;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v184 + 8))(v99, v110);
  long long v111 = v107;
  uint64_t v112 = v108;
  (*(void (**)(char *, uint64_t))(v170 + 8))(v111, v108);
  uint64_t v113 = v195;
  uint64_t v114 = v193;
  v180(v195, v194, v193);
  uint64_t v115 = swift_allocObject();
  unsigned __int8 v116 = v197;
  *(void *)(v115 + 16) = v186;
  *(void *)(v115 + 24) = v116;
  ((void (*)(uint64_t, char *, uint64_t))v182)(v115 + v104, v113, v114);
  uint64_t v204 = v112;
  uint64_t v205 = v110;
  uint64_t v206 = v188;
  v207 = v109;
  uint64_t v117 = swift_getOpaqueTypeConformance2();
  uint64_t v118 = v196;
  uint64_t v119 = v164;
  char v120 = v190;
  View.onAppear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v168 + 8))(v120, v119);
  v219[2] = v117;
  v219[3] = &protocol witness table for _AppearanceActionModifier;
  uint64_t v121 = v192;
  v195 = (char *)swift_getWitnessTable();
  char v122 = v189;
  sub_1001221F0(v118, v121);
  uint64_t v123 = v169;
  v197 = *(void (**)(void, void))(v169 + 8);
  v197(v118, v121);
  uint64_t v125 = v150;
  uint64_t v124 = v151;
  uint64_t v204 = v151;
  uint64_t v205 = v150;
  LOBYTE(v121) = v149;
  LOBYTE(v206) = v149;
  v207 = v152;
  uint64_t v208 = KeyPath;
  uint64_t v209 = 2;
  char v210 = 0;
  uint64_t v211 = v140;
  char v212 = 0;
  char v213 = v139;
  uint64_t v214 = v76;
  uint64_t v215 = v78;
  uint64_t v216 = v80;
  uint64_t v217 = v82;
  char v218 = 0;
  v219[0] = &v204;
  __int16 v126 = *(void (**)(char *, char *, uint64_t))(v123 + 16);
  uint64_t v127 = v196;
  char v128 = v122;
  uint64_t v129 = v192;
  v126(v196, v128, v192);
  v219[1] = v127;
  sub_10000FCD4(v124, v125, v121);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v203[0] = sub_10000570C(&qword_1001AAE48);
  v203[1] = v129;
  unint64_t v201 = sub_1000EDE08();
  v202 = v195;
  sub_1001231A4((uint64_t)v219, 2uLL, (uint64_t)v203);
  uint64_t v130 = v129;
  uint64_t v131 = v129;
  uint64_t v132 = (void (*)(char *, uint64_t))v197;
  v197(v189, v130);
  sub_10000FCC4(v124, v125, v121);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v132(v196, v131);
  sub_10000FCC4(v204, v205, v206);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000EB9D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v37 = a1;
  uint64_t v38 = a4;
  uint64_t v6 = type metadata accessor for PinnedScrollableViews();
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v36 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Array();
  type metadata accessor for FeaturedVideoPlayer();
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001A62A8);
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001A5A78);
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for VStack();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v43 = v10;
  uint64_t v44 = WitnessTable;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v13 = swift_getWitnessTable();
  uint64_t v14 = *(void *)(a3 + 8);
  uint64_t v43 = v9;
  uint64_t v44 = a2;
  uint64_t v45 = OpaqueTypeMetadata2;
  uint64_t v46 = v13;
  uint64_t v47 = v14;
  type metadata accessor for ForEach();
  uint64_t v43 = v10;
  uint64_t v44 = WitnessTable;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v33 = swift_getWitnessTable();
  uint64_t v15 = type metadata accessor for LazyHStack();
  uint64_t v35 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v31 - v17;
  uint64_t v32 = swift_getWitnessTable();
  uint64_t v43 = v15;
  uint64_t v44 = v32;
  uint64_t v34 = &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>;
  uint64_t v19 = swift_getOpaqueTypeMetadata2();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v24 = (char *)&v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  uint64_t v27 = (char *)&v31 - v26;
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  uint64_t v41 = v37;
  static VerticalAlignment.center.getter();
  sub_1000ED798();
  LazyHStack.init(alignment:spacing:pinnedViews:content:)();
  uint64_t v28 = v32;
  View.scrollTargetLayout(isEnabled:)();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v15);
  uint64_t v43 = v15;
  uint64_t v44 = v28;
  swift_getOpaqueTypeConformance2();
  sub_1001221F0(v24, v19);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v20 + 8);
  v29(v24, v19);
  sub_1001221F0(v27, v19);
  return ((uint64_t (*)(char *, uint64_t))v29)(v27, v19);
}

uint64_t sub_1000EBE50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v45 = a4;
  uint64_t v7 = type metadata accessor for FeaturedVideosView();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v44 = *(void *)(v8 + 64);
  __chkstk_darwin(v7, v9);
  uint64_t v43 = (char *)&KeyPath - v10;
  uint64_t v11 = type metadata accessor for Array();
  type metadata accessor for FeaturedVideoPlayer();
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001A62A8);
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001A5A78);
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for VStack();
  uint64_t v40 = v12;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v50 = v12;
  uint64_t v51 = WitnessTable;
  uint64_t v36 = &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>;
  uint64_t v37 = WitnessTable;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v41 = OpaqueTypeMetadata2;
  uint64_t v42 = v11;
  uint64_t v15 = swift_getWitnessTable();
  uint64_t v38 = *(void *)(a3 + 8);
  uint64_t v39 = v15;
  uint64_t v50 = v11;
  uint64_t v51 = a2;
  uint64_t v52 = OpaqueTypeMetadata2;
  uint64_t v53 = v15;
  uint64_t v54 = v38;
  uint64_t v16 = type metadata accessor for ForEach();
  uint64_t v35 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)&KeyPath - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&KeyPath - v22;
  sub_1000E7AFC();
  uint64_t v24 = sub_10004B4E0();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v49 = v24;
  uint64_t v46 = a2;
  uint64_t v47 = a3;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v25 = v8;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v27 = v43;
  uint64_t v28 = v7;
  v26(v43, a1, v7);
  unint64_t v29 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = a2;
  *(void *)(v30 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v25 + 32))(v30 + v29, v27, v28);
  uint64_t v50 = v40;
  uint64_t v51 = v37;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  ForEach<>.init(_:id:content:)();
  uint64_t v48 = OpaqueTypeConformance2;
  swift_getWitnessTable();
  sub_1001221F0(v20, v16);
  uint64_t v31 = *(void (**)(char *, uint64_t))(v35 + 8);
  v31(v20, v16);
  sub_1001221F0(v23, v16);
  return ((uint64_t (*)(char *, uint64_t))v31)(v23, v16);
}

uint64_t sub_1000EC288@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v132 = a2;
  uint64_t v121 = a1;
  uint64_t v127 = a5;
  uint64_t v7 = type metadata accessor for FeaturedVideosView();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v130 = v7;
  uint64_t v131 = v8;
  uint64_t v10 = __chkstk_darwin(v7, v9);
  __int16 v126 = (char *)&v103 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  uint64_t v129 = (char *)&v103 - v13;
  uint64_t v116 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v14 = *(void *)(v116 - 8);
  __chkstk_darwin(v116, v15);
  long long v106 = (char *)&v103 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000570C(&qword_1001A5FB0);
  uint64_t v19 = __chkstk_darwin(v17, v18);
  uint64_t v115 = (uint64_t)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v21);
  char v128 = (void (*)(char *, uint64_t, uint64_t))((char *)&v103 - v22);
  uint64_t v23 = sub_10000570C(&qword_1001A5478);
  uint64_t v25 = __chkstk_darwin(v23 - 8, v24);
  uint64_t v105 = (uint64_t)&v103 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v25, v27);
  uint64_t v113 = (char *)&v103 - v29;
  uint64_t v31 = __chkstk_darwin(v28, v30);
  uint64_t v111 = (uint64_t)&v103 - v32;
  uint64_t v34 = __chkstk_darwin(v31, v33);
  uint64_t v112 = (char *)&v103 - v35;
  uint64_t v37 = __chkstk_darwin(v34, v36);
  uint64_t v39 = (char *)&v103 - v38;
  __chkstk_darwin(v37, v40);
  uint64_t v42 = (char *)&v103 - v41;
  type metadata accessor for FeaturedVideoPlayer();
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001A62A8);
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001A5A78);
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v43 = type metadata accessor for VStack();
  uint64_t v122 = *(void *)(v43 - 8);
  __chkstk_darwin(v43, v44);
  uint64_t v46 = (char *)&v103 - v45;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v125 = v43;
  uint64_t v137 = v43;
  uint64_t v138 = WitnessTable;
  uint64_t v120 = WitnessTable;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v123 = *(void *)(OpaqueTypeMetadata2 - 8);
  uint64_t v124 = OpaqueTypeMetadata2;
  uint64_t v50 = __chkstk_darwin(OpaqueTypeMetadata2, v49);
  uint64_t v118 = (char *)&v103 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50, v52);
  uint64_t v119 = (char *)&v103 - v53;
  static HorizontalAlignment.leading.getter();
  uint64_t v133 = a3;
  uint64_t v134 = a4;
  uint64_t v54 = v130;
  uint64_t v135 = v121;
  uint64_t v136 = v132;
  uint64_t v121 = v46;
  VStack.init(alignment:spacing:content:)();
  int v117 = static Axis.Set.horizontal.getter();
  sub_100026824((uint64_t)v42);
  uint64_t v55 = v116;
  long long v107 = *(void (**)(char *, void, uint64_t))(v14 + 104);
  v107(v39, enum case for UserInterfaceSizeClass.regular(_:), v116);
  uint64_t v56 = v55;
  uint64_t v108 = *(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56);
  v108(v39, 0, 1, v55);
  uint64_t v110 = v17;
  uint64_t v57 = *(int *)(v17 + 48);
  uint64_t v58 = v128;
  uint64_t v59 = (uint64_t)v128 + v57;
  sub_1000EE460((uint64_t)v42, (uint64_t)v128);
  sub_1000EE460((uint64_t)v39, v59);
  uint64_t v114 = v14;
  uint64_t v60 = v14;
  uint64_t v61 = v56;
  uint64_t v62 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48);
  unsigned int v63 = v62((uint64_t)v58, 1, v61);
  long long v109 = v62;
  if (v63 == 1)
  {
    uint64_t v64 = (uint64_t)v39;
    uint64_t v65 = v62;
    uint64_t v66 = &qword_1001A5478;
    sub_10000ACE0(v64, &qword_1001A5478);
    sub_10000ACE0((uint64_t)v42, &qword_1001A5478);
    if (v65(v59, 1, v61) == 1)
    {
      char v67 = -1;
    }
    else
    {
      uint64_t v66 = &qword_1001A5FB0;
      char v67 = 0;
    }
  }
  else
  {
    uint64_t v104 = v42;
    uint64_t v68 = (uint64_t)v112;
    sub_1000EE460((uint64_t)v58, (uint64_t)v112);
    if (v62(v59, 1, v61) == 1)
    {
      sub_10000ACE0((uint64_t)v39, &qword_1001A5478);
      sub_10000ACE0((uint64_t)v104, &qword_1001A5478);
      (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v68, v61);
      char v67 = 0;
      uint64_t v66 = &qword_1001A5FB0;
    }
    else
    {
      uint64_t v69 = v114;
      char v70 = v106;
      (*(void (**)(char *, uint64_t, uint64_t))(v114 + 32))(v106, v59, v61);
      sub_1000EE4C8((unint64_t *)&qword_1001A6040, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
      char v67 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v71 = *(void (**)(char *, uint64_t))(v69 + 8);
      uint64_t v72 = v70;
      uint64_t v58 = v128;
      v71(v72, v61);
      uint64_t v66 = &qword_1001A5478;
      sub_10000ACE0((uint64_t)v39, &qword_1001A5478);
      sub_10000ACE0((uint64_t)v104, &qword_1001A5478);
      v71(v112, v61);
      uint64_t v54 = v130;
    }
  }
  sub_10000ACE0((uint64_t)v58, v66);
  uint64_t v73 = v131;
  char v74 = *(void (**)(char *, uint64_t, uint64_t))(v131 + 16);
  uint64_t v75 = v129;
  v74(v129, v132, v54);
  if ((v67 & 1) == 0)
  {
    char v128 = v74;
    uint64_t v78 = v111;
    sub_100026824(v111);
    uint64_t v79 = (uint64_t)v113;
    v107(v113, enum case for UserInterfaceSizeClass.compact(_:), v61);
    uint64_t v80 = v78;
    v108((char *)v79, 0, 1, v61);
    uint64_t v81 = v79;
    uint64_t v82 = v115;
    uint64_t v83 = v115 + *(int *)(v110 + 48);
    sub_1000EE460(v80, v115);
    sub_1000EE460(v81, v83);
    uint64_t v84 = v109;
    if (v109(v82, 1, v61) == 1)
    {
      sub_10000ACE0(v81, &qword_1001A5478);
      sub_10000ACE0(v80, &qword_1001A5478);
      uint64_t v76 = *(void (**)(char *, uint64_t))(v131 + 8);
      v76(v75, v54);
      if (v84(v83, 1, v61) == 1)
      {
        sub_10000ACE0(v115, &qword_1001A5478);
        uint64_t v77 = v126;
        char v74 = v128;
        goto LABEL_13;
      }
      uint64_t v77 = v126;
      uint64_t v82 = v115;
    }
    else
    {
      uint64_t v85 = v105;
      sub_1000EE460(v82, v105);
      unsigned int v86 = v84(v83, 1, v61);
      uint64_t v87 = v114;
      uint64_t v88 = (void (**)(uint64_t, uint64_t))(v114 + 8);
      if (v86 != 1)
      {
        long long v90 = v106;
        (*(void (**)(char *, uint64_t, uint64_t))(v114 + 32))(v106, v83, v61);
        sub_1000EE4C8((unint64_t *)&qword_1001A6040, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
        LODWORD(v114) = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v91 = v80;
        uint64_t v92 = v54;
        uint64_t v93 = v85;
        long long v94 = *(void (**)(char *, uint64_t))(v87 + 8);
        v94(v90, v61);
        sub_10000ACE0((uint64_t)v113, &qword_1001A5478);
        sub_10000ACE0(v91, &qword_1001A5478);
        uint64_t v76 = *(void (**)(char *, uint64_t))(v131 + 8);
        v76(v129, v92);
        v94((char *)v93, v61);
        uint64_t v54 = v92;
        sub_10000ACE0(v115, &qword_1001A5478);
        uint64_t v77 = v126;
        v128(v126, v132, v92);
        if (v114) {
          goto LABEL_14;
        }
LABEL_20:
        v76(v77, v54);
        goto LABEL_21;
      }
      sub_10000ACE0((uint64_t)v113, &qword_1001A5478);
      sub_10000ACE0(v80, &qword_1001A5478);
      uint64_t v76 = *(void (**)(char *, uint64_t))(v131 + 8);
      v76(v129, v54);
      (*v88)(v85, v61);
      uint64_t v77 = v126;
    }
    long long v89 = v128;
    sub_10000ACE0(v82, &qword_1001A5FB0);
    v89(v77, v132, v54);
    goto LABEL_20;
  }
  uint64_t v76 = *(void (**)(char *, uint64_t))(v73 + 8);
  v76(v75, v54);
  uint64_t v77 = v126;
LABEL_13:
  v74(v77, v132, v54);
LABEL_14:
  sub_1000E7AFC();
  sub_10004B2C4();
  swift_release();
  v76(v77, v54);
LABEL_21:
  static Alignment.center.getter();
  long long v95 = v118;
  uint64_t v96 = v125;
  uint64_t v97 = v120;
  uint64_t v98 = v121;
  View.containerRelativeFrame(_:count:span:spacing:alignment:)();
  (*(void (**)(char *, uint64_t))(v122 + 8))(v98, v96);
  uint64_t v137 = v96;
  uint64_t v138 = v97;
  swift_getOpaqueTypeConformance2();
  long long v99 = v119;
  uint64_t v100 = v124;
  sub_1001221F0(v95, v124);
  uint64_t v101 = *(void (**)(char *, uint64_t))(v123 + 8);
  v101(v95, v100);
  sub_1001221F0(v99, v100);
  return ((uint64_t (*)(char *, uint64_t))v101)(v99, v100);
}

uint64_t sub_1000ECFB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6 = a1;
  uint64_t v73 = a1;
  uint64_t v78 = a4;
  uint64_t v77 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v77, v7);
  uint64_t v76 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Optional();
  uint64_t v9 = type metadata accessor for Binding();
  uint64_t v11 = __chkstk_darwin(v9 - 8, v10);
  uint64_t v13 = (char *)&v69 - v12;
  uint64_t v14 = *(void *)(a2 - 8);
  __chkstk_darwin(v11, v15);
  uint64_t v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for FeaturedVideoPlayer();
  uint64_t v72 = *(void *)(v18 - 8);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v69 - v20;
  uint64_t v71 = type metadata accessor for ModifiedContent();
  uint64_t v74 = *(void *)(v71 - 8);
  __chkstk_darwin(v71, v22);
  char v70 = (char *)&v69 - v23;
  sub_100004A58(&qword_1001A62A8);
  uint64_t v80 = type metadata accessor for ModifiedContent();
  uint64_t v75 = *(void *)(v80 - 8);
  uint64_t v25 = __chkstk_darwin(v80, v24);
  uint64_t v79 = (char *)&v69 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25, v27);
  uint64_t v81 = (char *)&v69 - v28;
  uint64_t v29 = v17;
  uint64_t v30 = (uint64_t)v17;
  uint64_t v31 = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v29, v6, a2);
  uint64_t v32 = a3;
  type metadata accessor for FeaturedVideosView();
  sub_1000E7AFC();
  LOBYTE(v6) = sub_10004B140();
  swift_release();
  sub_1000EA06C();
  uint64_t v33 = v31;
  sub_1000B7EE8(v30, v6 & 1, (uint64_t)v13, v31, (uint64_t)v21);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v35 = v70;
  View.aspectRatio(_:contentMode:)();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v21, v18);
  uint64_t v36 = v76;
  uint64_t v37 = &v76[*(int *)(v77 + 20)];
  uint64_t v38 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v39 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v39 - 8) + 104))(v37, v38, v39);
  __asm { FMOV            V0.2D, #8.0 }
  *uint64_t v36 = _Q0;
  v92[5] = WitnessTable;
  v92[6] = &protocol witness table for _AspectRatioLayout;
  uint64_t v45 = v71;
  uint64_t v46 = swift_getWitnessTable();
  sub_1000EE4C8(qword_1001AAE68, (void (*)(uint64_t))&type metadata accessor for RoundedRectangle);
  uint64_t v47 = v79;
  View.clipShape<A>(_:style:)();
  sub_100024450((uint64_t)v36);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v35, v45);
  uint64_t v48 = sub_10000A780(&qword_1001A62A0, &qword_1001A62A8);
  v92[3] = v46;
  v92[4] = v48;
  uint64_t v49 = v80;
  uint64_t v74 = swift_getWitnessTable();
  sub_1001221F0(v47, v49);
  uint64_t v50 = v75;
  uint64_t v51 = *(void (**)(char *, uint64_t))(v75 + 8);
  uint64_t v76 = (char *)(v75 + 8);
  uint64_t v77 = (uint64_t)v51;
  v51(v47, v49);
  uint64_t v85 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 32))(v33, v32);
  uint64_t v86 = v52;
  sub_100010B2C();
  uint64_t v53 = Text.init<A>(_:)();
  uint64_t v55 = v54;
  LOBYTE(v35) = v56 & 1;
  static Font.subheadline.getter();
  static Font.Weight.regular.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v57 = Text.font(_:)();
  uint64_t v59 = v58;
  LOBYTE(v33) = v60;
  uint64_t v62 = v61;
  swift_release();
  sub_10000FCC4(v53, v55, (char)v35);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v64 = v79;
  uint64_t v65 = v80;
  uint64_t v66 = v81;
  (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v79, v81, v80);
  uint64_t v85 = v57;
  uint64_t v86 = v59;
  char v87 = v33 & 1;
  uint64_t v88 = v62;
  uint64_t v89 = KeyPath;
  uint64_t v90 = 1;
  char v91 = 0;
  v92[0] = v64;
  v92[1] = &v85;
  sub_10000FCD4(v57, v59, v33 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  v84[0] = v65;
  v84[1] = sub_10000570C(&qword_1001A5A78);
  uint64_t v82 = v74;
  unint64_t v83 = sub_10001A2A4();
  sub_1001231A4((uint64_t)v92, 2uLL, (uint64_t)v84);
  sub_10000FCC4(v57, v59, v33 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  char v67 = (uint64_t (*)(char *, uint64_t))v77;
  ((void (*)(char *, uint64_t))v77)(v66, v65);
  sub_10000FCC4(v85, v86, v87);
  swift_release();
  swift_bridgeObjectRelease();
  return v67(v64, v65);
}

uint64_t sub_1000ED798()
{
  return dispatch thunk of OptionSet.init(rawValue:)();
}

uint64_t sub_1000ED818(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FeaturedVideosView();
  sub_1000E7AFC();
  id v3 = [self defaultCenter];
  if (qword_1001A4E80 != -1) {
    swift_once();
  }
  [v3 postNotificationName:qword_1001B7530 object:0 userInfo:0];
  swift_release();

  uint64_t v4 = sub_1000E7AFC();
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v5 = *(void *)(v4 + 24);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v7 = *(void *)(a1 + *(int *)(v2 + 44));
  if (v7)
  {
    swift_retain();
    sub_100116F94(v6, v5, 8, 13, 25, 0, 3u, v7);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1000EE4C8((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000ED9B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v28 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v27 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = (char *)&v26 - v13;
  __chkstk_darwin(v12, v15);
  uint64_t v17 = (char *)&v26 - v16;
  uint64_t v18 = type metadata accessor for FeaturedVideosView();
  uint64_t v30 = a1;
  sub_1000DBD60(v18, (uint64_t (*)(uint64_t))&Binding.wrappedValue.getter);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48);
  int v20 = v19(v17, 1, a2);
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  uint64_t result = v29(v17, v6);
  if (v20 == 1)
  {
    uint64_t v26 = v4;
    sub_1000E7AFC();
    uint64_t v22 = sub_10004B4E0();
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v31 = v22;
    type metadata accessor for Array();
    swift_getWitnessTable();
    Collection.first.getter();
    swift_bridgeObjectRelease();
    if (v19(v14, 1, a2) == 1)
    {
      return v29(v14, v6);
    }
    else
    {
      uint64_t v23 = v26;
      uint64_t v24 = v28;
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v28, v14, a2);
      uint64_t v25 = (uint64_t)v27;
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v27, v24, a2);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v23 + 56))(v25, 0, 1, a2);
      sub_1000EDF24(v25);
      v29((char *)v25, v6);
      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v24, a2);
    }
  }
  return result;
}

uint64_t sub_1000EDD10@<X0>(uint64_t a1@<X8>)
{
  return sub_1000EA6C4(*(void *)(v1 + 32), *(void *)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_1000EDD2C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000EB9D0(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000EDD3C()
{
  return sub_1000EDD70((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000ED818);
}

uint64_t sub_1000EDD58()
{
  return sub_1000EDD70((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000ED9B0);
}

uint64_t sub_1000EDD70(uint64_t (*a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(type metadata accessor for FeaturedVideosView() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a1(v5, v2, v3);
}

unint64_t sub_1000EDE08()
{
  unint64_t result = qword_1001AAE50;
  if (!qword_1001AAE50)
  {
    sub_100004A58(&qword_1001AAE48);
    sub_1000EDE84();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AAE50);
  }
  return result;
}

unint64_t sub_1000EDE84()
{
  unint64_t result = qword_1001AAE58;
  if (!qword_1001AAE58)
  {
    sub_100004A58(&qword_1001AAE60);
    sub_10001A2A4();
    sub_10000A780(&qword_1001AA0D8, &qword_1001AA0E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AAE58);
  }
  return result;
}

uint64_t sub_1000EDF24(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Optional();
  __chkstk_darwin(v2, v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v7 - v4, a1, v2);
  type metadata accessor for Binding();
  return Binding.wrappedValue.setter();
}

uint64_t sub_1000EE010@<X0>(uint64_t a1@<X8>)
{
  return sub_1000EBE50(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000EE020()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)type metadata accessor for FeaturedVideosView();
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*((void *)v2 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v2 - 1) + 80));
  type metadata accessor for FeaturedVideosViewModel();
  uint64_t v4 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v3 + v2[9];
  swift_release();
  swift_release();
  type metadata accessor for Optional();
  uint64_t v6 = v5 + *(int *)(type metadata accessor for Binding() + 32);
  uint64_t v7 = *(void *)(v1 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v6, 1, v1)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v1);
  }
  uint64_t v9 = v3 + v2[10];
  if (!v8(v9, 1, v1)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v1);
  }
  type metadata accessor for State();
  swift_release();
  swift_release();
  uint64_t v10 = v3 + v2[12];
  sub_10000570C(&qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v12 = *(void *)(v11 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v13 = v3 + v2[13];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v15 = *(void *)(v14 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
    }
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_1000EE3B8@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for FeaturedVideosView() - 8);
  uint64_t v8 = v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_1000EC288(a1, v8, v5, v6, a2);
}

uint64_t sub_1000EE454@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ECFB4(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000EE460(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A5478);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000EE4C8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000EE510()
{
  return swift_getWitnessTable();
}

uint64_t sub_1000EE9E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = LocalizedStringKey.init(stringLiteral:)();
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = result;
  *(void *)(a2 + 16) = v5;
  *(unsigned char *)(a2 + 24) = v6 & 1;
  *(void *)(a2 + 32) = v7;
  return result;
}

uint64_t type metadata accessor for LineupViewModel()
{
  return sub_10000B72C();
}

uint64_t sub_1000EEA54()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    sub_1000F29FC();
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      swift_getAssociatedTypeWitness();
      uint64_t v0 = type metadata accessor for Optional();
      if (v4 <= 0x3F)
      {
        uint64_t v0 = type metadata accessor for ObservationRegistrar();
        if (v5 <= 0x3F) {
          return swift_initClassMetadata2();
        }
      }
    }
  }
  return v0;
}

BOOL sub_1000EEC80()
{
  sub_1000EEF78();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_getWitnessTable();
  char v0 = Collection.isEmpty.getter();
  swift_bridgeObjectRelease();
  return (v0 & 1) == 0;
}

uint64_t sub_1000EEDE8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = *(void *)(*(void *)v0 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v5);
  uint64_t v7 = (char *)&v11 - v6;
  (*(void (**)(uint64_t, uint64_t))(v1 + 64))(v2, v1);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 152))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, AssociatedTypeWitness);
  return v9;
}

uint64_t sub_1000EEF78()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = *(void *)(*(void *)v0 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v22 = *(void *)(v4 - 8);
  uint64_t v23 = v4;
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v21 - v6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v21 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v21 - v12;
  (*(void (**)(uint64_t, uint64_t))(v1 + 56))(v2, v1);
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v23);
  }
  else
  {
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 88))(AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v7, AssociatedTypeWitness);
    if (v15)
    {
      uint64_t v24 = v15;
      type metadata accessor for Array();
      swift_getWitnessTable();
      uint64_t v16 = v13;
      Collection.first.getter();
      swift_bridgeObjectRelease();
      uint64_t v17 = *(void *)(v9 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v9) != 1)
      {
        uint64_t v20 = swift_getAssociatedConformanceWitness();
        uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 40))(v9, v20);
        (*(void (**)(char *, uint64_t))(v17 + 8))(v16, v9);
        return v18;
      }
      (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v10);
    }
  }
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  return static Array._allocateUninitialized(_:)();
}

uint64_t sub_1000EF390()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = type metadata accessor for Optional();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v10 - v4;
  sub_1000F2110((uint64_t)&v10 - v4);
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v5, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    return 0;
  }
  else
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v5, AssociatedTypeWitness);
  }
  return v7;
}

double sub_1000EF608()
{
  swift_getKeyPath();
  sub_1000F1924();
  swift_release();
  return *(double *)(v0 + *(void *)(*(void *)v0 + 144));
}

uint64_t sub_1000EF690()
{
  uint64_t v0 = sub_10000570C(&qword_1001A5478);
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)&v15 - v11;
  sub_1000F1BCC();
  sub_1000F1C54();
  sub_1000F1CE4((uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1) {
    return sub_10000ACE0((uint64_t)v3, &qword_1001A5478);
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v12, v3, v4);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v9, enum case for UserInterfaceSizeClass.compact(_:), v4);
  sub_1000F31DC((unint64_t *)&qword_1001A6040, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
  dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v9, v4);
  return ((uint64_t (*)(char *, uint64_t))v14)(v12, v4);
}

uint64_t sub_1000EF8F0()
{
  if (sub_1000EEC80() || (sub_1000F0E98() & 1) != 0)
  {
    char v1 = 1;
    if (sub_1000EFB64()) {
      goto LABEL_8;
    }
  }
  else
  {
    char v1 = sub_1000F1124();
    if (sub_1000EFB64())
    {
LABEL_8:
      char v2 = 0;
      return v2 & 1;
    }
  }
  if ((v1 & 1) == 0) {
    goto LABEL_8;
  }
  char v2 = *(unsigned char *)(*(void *)(v0 + 16) + 113) ^ 1;
  return v2 & 1;
}

uint64_t sub_1000EF958()
{
  swift_getKeyPath();
  sub_1000F1924();
  swift_release();
  return *(void *)(v0 + *(void *)(*(void *)v0 + 192));
}

uint64_t sub_1000EF9E8()
{
  return swift_release();
}

double sub_1000EFA9C()
{
  swift_getKeyPath();
  sub_1000F1924();
  swift_release();
  return *(double *)(v0 + *(void *)(*(void *)v0 + 200));
}

uint64_t sub_1000EFB24()
{
  return sub_1000F1B2C();
}

uint64_t sub_1000EFB44()
{
  return sub_1000F1B2C();
}

BOOL sub_1000EFB64()
{
  sub_1000EFC84();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_getWitnessTable();
  char v0 = Collection.isEmpty.getter();
  swift_bridgeObjectRelease();
  return (v0 & 1) == 0;
}

uint64_t sub_1000EFC84()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = *(void *)(*(void *)v0 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v13 - v7;
  (*(void (**)(uint64_t, uint64_t))(v1 + 56))(v2, v1);
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    swift_getAssociatedConformanceWitness();
LABEL_4:
    swift_getAssociatedTypeWitness();
    uint64_t v11 = static Array._allocateUninitialized(_:)();
    swift_bridgeObjectRelease();
    return v11;
  }
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 96))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, AssociatedTypeWitness);
  if (!v11) {
    goto LABEL_4;
  }
  return v11;
}

BOOL sub_1000EFEF0()
{
  double v0 = -sub_1000F189C();
  double v1 = sub_1000F1EB0();
  return v1 + sub_1000F1F38() <= v0;
}

uint64_t sub_1000EFF2C@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_1000F1924();
  swift_release();
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 208);
  swift_beginAccess();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1000F0088()
{
  return sub_1000F1B2C();
}

BOOL sub_1000F00A8()
{
  sub_1000F01A8((uint64_t)&v6);
  if (v7)
  {
    sub_100017350(&v6, (uint64_t)v8);
    uint64_t v0 = v9;
    uint64_t v1 = v10;
    sub_10000AC9C(v8, v9);
    (*(void (**)(uint64_t, uint64_t))(v1 + 48))(v0, v1);
    swift_getAssociatedTypeWitness();
    sub_10000570C(&qword_1001A5948);
    uint64_t v2 = _arrayForceCast<A, B>(_:)();
    swift_bridgeObjectRelease();
    uint64_t v3 = *(void *)(v2 + 16);
    swift_bridgeObjectRelease();
    BOOL v4 = v3 != 0;
    sub_100007584((uint64_t)v8);
  }
  else
  {
    sub_10000ACE0((uint64_t)&v6, &qword_1001A7008);
    return 0;
  }
  return v4;
}

uint64_t sub_1000F01A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_getKeyPath();
  sub_1000F31DC(&qword_1001A7020, (void (*)(uint64_t))type metadata accessor for SetlistController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  return sub_10000A428(v3 + 72, a1, &qword_1001A7008);
}

uint64_t sub_1000F0274()
{
  if (sub_1000EEC80() || sub_1000EFB64() || (sub_1000F0E98() & 1) != 0) {
    int v0 = 0;
  }
  else {
    int v0 = sub_1000F1124() ^ 1;
  }
  return sub_1000F00A8() & v0 & 1;
}

uint64_t sub_1000F02C4()
{
  uint64_t v1 = v0;
  sub_1000D1500();
  if (!v2) {
    return *(unsigned __int8 *)(*(void *)(v1 + 16) + 113);
  }
  uint64_t v3 = v2;
  if (!*(void *)(v2 + 16) || (unint64_t v4 = sub_1000B828C(2), (v5 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    return *(unsigned __int8 *)(*(void *)(v1 + 16) + 113);
  }
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(v3 + 56) + v4);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 3:
      swift_bridgeObjectRelease();
      uint64_t result = 0;
      break;
    default:
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t result = 0;
      if ((v8 & 1) == 0) {
        return *(unsigned __int8 *)(*(void *)(v1 + 16) + 113);
      }
      break;
  }
  return result;
}

uint64_t sub_1000F03E4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_getKeyPath();
  sub_1000F31DC(&qword_1001A7020, (void (*)(uint64_t))type metadata accessor for SetlistController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v1 + 112);
}

uint64_t sub_1000F0484()
{
  v1[2] = v0;
  type metadata accessor for MainActor();
  v1[3] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[4] = v3;
  v1[5] = v2;
  return _swift_task_switch(sub_1000F051C, v3, v2);
}

uint64_t sub_1000F051C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  void *v1 = v0;
  v1[1] = sub_1000F05B0;
  return sub_100056990();
}

uint64_t sub_1000F05B0()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = *(void *)(v1 + 32);
  return _swift_task_switch(sub_1000091E4, v3, v2);
}

uint64_t sub_1000F06D0()
{
  if (sub_1000F0E98())
  {
    int v0 = sub_1000F1124();
    if (sub_1000EEC80()) {
      goto LABEL_6;
    }
  }
  else
  {
    int v0 = 0;
    if (sub_1000EEC80()) {
      goto LABEL_6;
    }
  }
  if (!sub_1000EFB64())
  {
    BOOL v1 = sub_1000F00A8();
    return v0 & v1 & 1;
  }
LABEL_6:
  BOOL v1 = 1;
  return v0 & v1 & 1;
}

uint64_t sub_1000F0730()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = *(void *)(*(void *)v0 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  char v8 = (char *)&v13 - v7;
  (*(void (**)(uint64_t, uint64_t))(v1 + 56))(v2, v1);
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    swift_getAssociatedConformanceWitness();
LABEL_4:
    swift_getAssociatedTypeWitness();
    uint64_t v11 = static Array._allocateUninitialized(_:)();
    swift_bridgeObjectRelease();
    return v11;
  }
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, AssociatedTypeWitness);
  if (!v11) {
    goto LABEL_4;
  }
  return v11;
}

uint64_t sub_1000F099C()
{
  uint64_t v0 = sub_10000570C(&qword_1001A5478);
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)&v15 - v11;
  sub_1000F1BCC();
  sub_1000F1C54();
  sub_1000F1C54();
  sub_1000F1CE4((uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1) {
    return sub_10000ACE0((uint64_t)v3, &qword_1001A5478);
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v12, v3, v4);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v9, enum case for UserInterfaceSizeClass.compact(_:), v4);
  sub_1000F31DC((unint64_t *)&qword_1001A6040, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
  dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v9, v4);
  return ((uint64_t (*)(char *, uint64_t))v14)(v12, v4);
}

BOOL sub_1000F0C0C()
{
  return (sub_1000F06D0() & 1) == 0;
}

uint64_t sub_1000F0C2C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = *(void *)(*(void *)v0 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v13 - v7;
  (*(void (**)(uint64_t, uint64_t))(v1 + 56))(v2, v1);
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    swift_getAssociatedConformanceWitness();
LABEL_4:
    swift_getAssociatedTypeWitness();
    uint64_t v11 = static Array._allocateUninitialized(_:)();
    swift_bridgeObjectRelease();
    return v11;
  }
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 80))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, AssociatedTypeWitness);
  if (!v11) {
    goto LABEL_4;
  }
  return v11;
}

uint64_t sub_1000F0E98()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = *(void *)(*(void *)v0 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)v15 - v7;
  (*(void (**)(uint64_t, uint64_t))(v1 + 56))(v2, v1);
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
LABEL_5:
    char v13 = 0;
    return v13 & 1;
  }
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, AssociatedTypeWitness);
  if (!v11) {
    goto LABEL_5;
  }
  v15[1] = v11;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_getWitnessTable();
  char v12 = Collection.isEmpty.getter();
  swift_bridgeObjectRelease();
  char v13 = v12 ^ 1;
  return v13 & 1;
}

uint64_t sub_1000F1124()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = *(void *)(*(void *)v0 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)v15 - v7;
  (*(void (**)(uint64_t, uint64_t))(v1 + 56))(v2, v1);
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
LABEL_5:
    char v13 = 0;
    return v13 & 1;
  }
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 80))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, AssociatedTypeWitness);
  if (!v11) {
    goto LABEL_5;
  }
  v15[1] = v11;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_getWitnessTable();
  char v12 = Collection.isEmpty.getter();
  swift_bridgeObjectRelease();
  char v13 = v12 ^ 1;
  return v13 & 1;
}

uint64_t sub_1000F13B0()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 88) + 64))(*(void *)(*(void *)v0 + 80));
}

uint64_t sub_1000F1428()
{
  return sub_1000F167C();
}

uint64_t sub_1000F1430()
{
  return sub_1000F1B2C();
}

uint64_t sub_1000F1450()
{
  return sub_1000F1B2C();
}

uint64_t sub_1000F1470(uint64_t a1)
{
  return sub_10000ACE0(a1, &qword_1001A5478);
}

uint64_t sub_1000F1528()
{
  return swift_release();
}

uint64_t sub_1000F15F4()
{
  swift_getKeyPath();
  sub_1000F1924();
  swift_release();
  return *(unsigned __int8 *)(v0 + *(void *)(*(void *)v0 + 128));
}

uint64_t sub_1000F167C()
{
  return swift_release();
}

uint64_t sub_1000F1728()
{
  return sub_1000F167C();
}

uint64_t sub_1000F1730()
{
  uint64_t v1 = sub_10000570C(&qword_1001A95D0);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(*(void *)(v0 + 16) + 113) & 1) != 0 || (uint64_t result = sub_1000EFB64(), (result))
  {
    uint64_t v6 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v4, 1, 1, v6);
    type metadata accessor for MainActor();
    uint64_t v7 = static MainActor.shared.getter();
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v7;
    *(void *)(v8 + 24) = &protocol witness table for MainActor;
    sub_10013AF58((uint64_t)v4, (uint64_t)&unk_1001AAF80, v8);
    return swift_release();
  }
  return result;
}

uint64_t sub_1000F1844()
{
  return sub_1000F1B2C();
}

BOOL sub_1000F1864()
{
  double v0 = -sub_1000F189C();
  return sub_1000F1AA4() * 0.75 < v0;
}

double sub_1000F189C()
{
  swift_getKeyPath();
  sub_1000F1924();
  swift_release();
  return *(double *)(v0 + *(void *)(*(void *)v0 + 120));
}

uint64_t sub_1000F1924()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t sub_1000F19C8()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

double sub_1000F1AA4()
{
  swift_getKeyPath();
  sub_1000F1924();
  swift_release();
  return *(double *)(v0 + *(void *)(*(void *)v0 + 136));
}

uint64_t sub_1000F1B2C()
{
  return swift_release();
}

double sub_1000F1BCC()
{
  swift_getKeyPath();
  sub_1000F1924();
  swift_release();
  return *(double *)(v0 + *(void *)(*(void *)v0 + 152));
}

double sub_1000F1C54()
{
  swift_getKeyPath();
  sub_1000F1924();
  swift_release();
  return *(double *)(v0 + *(void *)(*(void *)v0 + 160));
}

uint64_t sub_1000F1CE4@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_1000F1924();
  swift_release();
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 168);
  swift_beginAccess();
  return sub_10000A428(v3, a1, &qword_1001A5478);
}

uint64_t sub_1000F1DA0(uint64_t a1)
{
  uint64_t v2 = sub_10000570C(&qword_1001A5478);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A428(a1, (uint64_t)v5, &qword_1001A5478);
  return sub_1000F1470((uint64_t)v5);
}

uint64_t sub_1000F1E38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + *(void *)(*(void *)a1 + 168);
  swift_beginAccess();
  sub_1000F2C78(a2, v3);
  return swift_endAccess();
}

double sub_1000F1EB0()
{
  swift_getKeyPath();
  sub_1000F1924();
  swift_release();
  return *(double *)(v0 + *(void *)(*(void *)v0 + 176));
}

double sub_1000F1F38()
{
  swift_getKeyPath();
  sub_1000F1924();
  swift_release();
  return *(double *)(v0 + *(void *)(*(void *)v0 + 184));
}

uint64_t sub_1000F1FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + *(void *)(*(void *)a1 + 208);
  swift_beginAccess();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(v3, a2, v4);
  return swift_endAccess();
}

uint64_t sub_1000F2110@<X0>(uint64_t a1@<X8>)
{
  uint64_t v19 = a1;
  uint64_t v2 = *(void *)(*(void *)v1 + 88);
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v6);
  uint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = swift_checkMetadataState();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  char v13 = (char *)&v17 - v12;
  (*(void (**)(uint64_t, uint64_t))(v2 + 64))(v3, v2);
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 208))(v9, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  uint64_t v14 = swift_getAssociatedConformanceWitness();
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 40))(AssociatedTypeWitness, v14);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v8, AssociatedTypeWitness);
  uint64_t v20 = v15;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  swift_getWitnessTable();
  Collection.first.getter();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000F243C()
{
  type metadata accessor for MainActor();
  *(void *)(v0 + 24) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000F2504, v2, v1);
}

uint64_t sub_1000F2504()
{
  swift_release();
  id v1 = [self sharedInstance];
  *(void *)(v0 + 16) = 0;
  unsigned int v2 = [v1 setCategory:AVAudioSessionCategoryPlayback withOptions:1 error:v0 + 16];

  uint64_t v3 = *(void **)(v0 + 16);
  if (v2)
  {
    id v4 = v3;
  }
  else
  {
    id v5 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_1001A4F38 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100017378(v6, (uint64_t)qword_1001B75B8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      char v13 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 138412290;
      swift_errorRetain();
      uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 16) = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v13 = v10;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Received error setting playback category %@", v9, 0xCu);
      sub_10000570C(&qword_1001A7A28);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t *sub_1000F27B8()
{
  uint64_t v1 = *v0;
  swift_release();
  (*(void (**)(uint64_t, void))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 104), *(void *)(v1 + 80));
  sub_10000ACE0((uint64_t)v0 + *(void *)(*v0 + 168), &qword_1001A5478);
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 208);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  uint64_t v4 = (uint64_t)v0 + *(void *)(*v0 + 216);
  uint64_t v5 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  return v0;
}

uint64_t sub_1000F298C()
{
  sub_1000F27B8();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PromotionalAssetsViewModel()
{
  return sub_10000B72C();
}

void sub_1000F29FC()
{
  if (!qword_1001AAF70)
  {
    type metadata accessor for UserInterfaceSizeClass();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, &qword_1001AAF70);
    }
  }
}

uint64_t sub_1000F2A54()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1000F2A8C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100009854;
  return sub_1000F243C();
}

uint64_t sub_1000F2B40()
{
  return 16;
}

__n128 sub_1000F2B4C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_1000F2B58()
{
  *(unsigned char *)(*(void *)(v0 + 16) + *(void *)(**(void **)(v0 + 16) + 128)) = *(unsigned char *)(v0 + 24);
}

void sub_1000F2B7C(uint64_t a1@<X8>)
{
  *(double *)a1 = sub_1000F1C54();
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
}

uint64_t sub_1000F2BAC()
{
  return sub_1000F1528();
}

uint64_t sub_1000F2BD8()
{
  return 16;
}

__n128 sub_1000F2BE4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

__n128 sub_1000F2BF0()
{
  uint64_t v1 = *(void *)(v0 + 16) + *(void *)(**(void **)(v0 + 16) + 160);
  __n128 result = *(__n128 *)(v0 + 24);
  long long v3 = *(_OWORD *)(v0 + 40);
  *(__n128 *)uint64_t v1 = result;
  *(_OWORD *)(v1 + 16) = v3;
  return result;
}

uint64_t sub_1000F2C1C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F1CE4(a1);
}

uint64_t sub_1000F2C44()
{
  return 16;
}

__n128 sub_1000F2C50(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000F2C5C()
{
  return sub_1000F1E38(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000F2C78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A5478);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void sub_1000F2CE0(double *a1@<X8>)
{
  *a1 = sub_1000F1BCC();
}

uint64_t sub_1000F2D0C()
{
  return sub_1000F1B2C();
}

uint64_t sub_1000F2D50()
{
  return 16;
}

__n128 sub_1000F2D5C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1000F2D68()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + *(void *)(**(void **)(v0 + 16) + 152)) = result;
  return result;
}

void sub_1000F2D8C(double *a1@<X8>)
{
  *a1 = sub_1000EF608();
}

uint64_t sub_1000F2DB8()
{
  return sub_1000F1B2C();
}

uint64_t sub_1000F2DFC()
{
  return 16;
}

__n128 sub_1000F2E08(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1000F2E14()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + *(void *)(**(void **)(v0 + 16) + 144)) = result;
  return result;
}

void sub_1000F2E38(double *a1@<X8>)
{
  *a1 = sub_1000F1AA4();
}

uint64_t sub_1000F2E64()
{
  return sub_1000F1B2C();
}

uint64_t sub_1000F2EA8()
{
  return 16;
}

__n128 sub_1000F2EB4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1000F2EC0()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + *(void *)(**(void **)(v0 + 16) + 136)) = result;
  return result;
}

void sub_1000F2EE4(double *a1@<X8>)
{
  *a1 = sub_1000F189C();
}

uint64_t sub_1000F2F10()
{
  return sub_1000F1B2C();
}

uint64_t sub_1000F2F54()
{
  return 16;
}

__n128 sub_1000F2F60(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1000F2F6C()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + *(void *)(**(void **)(v0 + 16) + 120)) = result;
  return result;
}

void sub_1000F2F90(double *a1@<X8>)
{
  *a1 = sub_1000F1F38();
}

uint64_t sub_1000F2FBC()
{
  return sub_1000F1B2C();
}

uint64_t sub_1000F3000()
{
  return 16;
}

__n128 sub_1000F300C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1000F3018()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + *(void *)(**(void **)(v0 + 16) + 184)) = result;
  return result;
}

uint64_t sub_1000F303C()
{
  return swift_release();
}

uint64_t sub_1000F30EC()
{
  return 16;
}

__n128 sub_1000F30F8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000F3104()
{
  return sub_1000F1FC0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1000F3120(double *a1@<X8>)
{
  *a1 = sub_1000F1EB0();
}

uint64_t sub_1000F314C()
{
  return sub_1000F1B2C();
}

uint64_t sub_1000F3190()
{
  return 16;
}

__n128 sub_1000F319C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1000F31A8()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + *(void *)(**(void **)(v0 + 16) + 176)) = result;
  return result;
}

uint64_t sub_1000F31DC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000F3224(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return 0;
  }
  swift_bridgeObjectRetain_n();
  for (uint64_t i = v1 + 48; ; i += 24)
  {
    uint64_t v4 = *(void *)(i - 8);
    if (*(unsigned char *)(i - 16) == 1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      return v4;
    }
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v5) {
      break;
    }
    swift_bridgeObjectRelease();
    if (!--v2)
    {
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  swift_bridgeObjectRelease_n();
  return v4;
}

uint64_t sub_1000F3328()
{
  return 16;
}

__n128 sub_1000F3334(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1000F3340()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + *(void *)(**(void **)(v0 + 16) + 200)) = result;
  return result;
}

uint64_t sub_1000F336C()
{
  return 16;
}

__n128 sub_1000F3378(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_1000F3384()
{
  char v1 = *(unsigned char *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 16) + *(void *)(**(void **)(v0 + 16) + 192);
  *(void *)uint64_t v2 = *(void *)(v0 + 24);
  *(unsigned char *)(v2 + 8) = v1;
}

uint64_t *sub_1000F33B0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    uint64_t v8 = a3[6];
    __dst = (char *)a1 + v8;
    uint64_t v9 = (char *)a2 + v8;
    uint64_t v10 = type metadata accessor for Artwork();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v12(v9, 1, v10))
    {
      uint64_t v13 = sub_10000570C(&qword_1001A77A0);
      memcpy(__dst, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(__dst, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
    }
    uint64_t v15 = a3[7];
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for URL();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = sub_10000570C(&qword_1001AD200);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    uint64_t v21 = a3[8];
    uint64_t v22 = (uint64_t *)((char *)v4 + v21);
    uint64_t v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v24 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v24;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1000F3658(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Artwork();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 28);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }

  return swift_bridgeObjectRelease();
}

void *sub_1000F37C4(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  a1[2] = a2[2];
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Artwork();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_10000570C(&qword_1001A77A0);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_10000570C(&qword_1001AD200);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  uint64_t v19 = a3[8];
  uint64_t v20 = (void *)((char *)a1 + v19);
  uint64_t v21 = (void *)((char *)a2 + v19);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1000F3A18(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Artwork();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000570C(&qword_1001A77A0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[7];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for URL();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    uint64_t v23 = sub_10000570C(&qword_1001AD200);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
LABEL_13:
  uint64_t v24 = a3[8];
  uint64_t v25 = (void *)((char *)a1 + v24);
  uint64_t v26 = (void *)((char *)a2 + v24);
  *uint64_t v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000F3D44(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Artwork();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_10000570C(&qword_1001A77A0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[7];
  int v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_10000570C(&qword_1001AD200);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  return a1;
}

void *sub_1000F3F68(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Artwork();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_10000570C(&qword_1001A77A0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = a3[7];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for URL();
  uint64_t v20 = *(void *)(v19 - 8);
  int v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    uint64_t v24 = sub_10000570C(&qword_1001AD200);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_13:
  uint64_t v25 = a3[8];
  uint64_t v26 = (void *)((char *)a1 + v25);
  uint64_t v27 = (void *)((char *)a2 + v25);
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  *uint64_t v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000F426C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F4280);
}

uint64_t sub_1000F4280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000570C(&qword_1001A77A0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10000570C(&qword_1001AD200);
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_1000F43B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F43C8);
}

uint64_t sub_1000F43C8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_10000570C(&qword_1001A77A0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10000570C(&qword_1001AD200);
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 28);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for AppleMusicSetlist()
{
  uint64_t result = qword_1001AAFE8;
  if (!qword_1001AAFE8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000F4548()
{
  sub_10006AC68(319, (unint64_t *)&unk_1001A7810, (void (*)(uint64_t))&type metadata accessor for Artwork);
  if (v0 <= 0x3F)
  {
    sub_10006AC68(319, (unint64_t *)&qword_1001A7700, (void (*)(uint64_t))&type metadata accessor for URL);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_1000F4660()
{
  return sub_1000F46F0(&qword_1001A7708, (void (*)(uint64_t))&type metadata accessor for Artwork);
}

uint64_t sub_1000F46A8()
{
  return sub_1000F46F0(&qword_1001A78A8, (void (*)(uint64_t))&type metadata accessor for Song);
}

uint64_t sub_1000F46F0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000F4738()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000F4740@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10000A428(v2 + *(int *)(a1 + 24), a2, &qword_1001A77A0);
}

uint64_t sub_1000F476C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10000A428(v2 + *(int *)(a1 + 28), a2, &qword_1001AD200);
}

uint64_t sub_1000F4798(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 32));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1000F47D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v78 = a2;
  uint64_t v77 = type metadata accessor for CoordinateSpace();
  uint64_t v67 = *(void *)(v77 - 8);
  uint64_t v6 = __chkstk_darwin(v77, v5);
  uint64_t v74 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v6, v10);
  uint64_t v11 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v11 - 8, v12);
  int v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000570C(&qword_1001AB100);
  uint64_t v69 = *(void *)(v15 - 8);
  uint64_t v70 = v15;
  __chkstk_darwin(v15, v16);
  uint64_t v66 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000570C(&qword_1001AB108);
  uint64_t v19 = v18 - 8;
  __chkstk_darwin(v18, v20);
  int v22 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_10000570C(&qword_1001AB110) - 8;
  __chkstk_darwin(v71, v23);
  uint64_t v68 = (uint64_t)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_10000570C(&qword_1001AB118) - 8;
  __chkstk_darwin(v75, v25);
  uint64_t v72 = (uint64_t)&v56 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_10000570C(&qword_1001AB120) - 8;
  __chkstk_darwin(v76, v27);
  uint64_t v73 = (uint64_t)&v56 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = v2;
  swift_retain();
  sub_1000C568C((uint64_t)v14);
  swift_release();
  uint64_t v29 = v8;
  uint64_t v65 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  char v56 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65(v56, v3, a1);
  uint64_t v30 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v31 = (v30 + 32) & ~v30;
  uint64_t v61 = v31;
  uint64_t v62 = v30 | 7;
  uint64_t v63 = v31 + v9;
  uint64_t v32 = swift_allocObject();
  uint64_t v59 = *(void *)(a1 + 16);
  uint64_t v60 = *(void *)(a1 + 24);
  uint64_t v33 = v60;
  uint64_t v57 = a1;
  *(void *)(v32 + 16) = v59;
  *(void *)(v32 + 24) = v33;
  uint64_t v58 = *(void (**)(uint64_t, char *, uint64_t))(v29 + 32);
  v58(v32 + v31, (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  sub_10000570C(&qword_1001AB128);
  sub_1000F6C34();
  double v34 = 1.0;
  uint64_t v35 = v66;
  AsyncImage.init(url:scale:transaction:content:)();
  uint64_t v36 = v67;
  uint64_t v37 = v74;
  uint64_t v38 = v77;
  (*(void (**)(char *, void, uint64_t))(v67 + 104))(v74, enum case for CoordinateSpace.local(_:), v77);
  uint64_t v39 = &v22[*(int *)(v19 + 44)];
  uint64_t v40 = sub_10000570C(&qword_1001AB220);
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(&v39[*(int *)(v40 + 36)], v37, v38);
  *(void *)uint64_t v39 = &type metadata for HeroImageHeightPreferenceKey;
  uint64_t v41 = (void (**)(double *@<X8>, double@<D2>, double@<D3>))&v39[*(int *)(v40 + 40)];
  *uint64_t v41 = sub_100074E78;
  v41[1] = 0;
  uint64_t v43 = v69;
  uint64_t v42 = v70;
  (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v22, v35, v70);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v38);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v35, v42);
  uint64_t v44 = v56;
  uint64_t v45 = v57;
  v65(v56, v64, v57);
  uint64_t v46 = swift_allocObject();
  uint64_t v47 = v60;
  *(void *)(v46 + 16) = v59;
  *(void *)(v46 + 24) = v47;
  v58(v46 + v61, v44, v45);
  uint64_t v48 = v68;
  sub_10000A428((uint64_t)v22, v68, &qword_1001AB108);
  uint64_t v49 = (uint64_t (**)())(v48 + *(int *)(v71 + 44));
  *uint64_t v49 = sub_1000F7310;
  v49[1] = (uint64_t (*)())v46;
  sub_10000ACE0((uint64_t)v22, &qword_1001AB108);
  swift_retain();
  LOBYTE(v46) = sub_1000C5BA4();
  swift_release();
  if ((v46 & 1) == 0) {
    double v34 = 0.0;
  }
  uint64_t v50 = v72;
  sub_10000A428(v48, v72, &qword_1001AB110);
  *(double *)(v50 + *(int *)(v75 + 44)) = v34;
  sub_10000ACE0(v48, &qword_1001AB110);
  char v51 = static Edge.Set.bottom.getter();
  uint64_t v52 = static SafeAreaRegions.all.getter();
  uint64_t v53 = v73;
  sub_10000A428(v50, v73, &qword_1001AB118);
  uint64_t v54 = v53 + *(int *)(v76 + 44);
  *(void *)uint64_t v54 = v52;
  *(unsigned char *)(v54 + 8) = v51;
  sub_10000ACE0(v50, &qword_1001AB118);
  return sub_10000A3C4(v53, v78, &qword_1001AB120);
}

void *sub_1000F4E98(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __chkstk_darwin(a1, a2);
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v90 = v6;
  char v91 = v7;
  uint64_t v89 = v8;
  uint64_t v9 = type metadata accessor for HeroImage();
  uint64_t v87 = *(void *)(v9 - 8);
  uint64_t v88 = v9;
  uint64_t v10 = *(void *)(v87 + 64);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v86 = &v73[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12, v13);
  uint64_t v85 = &v73[-v14];
  uint64_t v15 = type metadata accessor for Image.ResizingMode();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  uint64_t v19 = &v73[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = type metadata accessor for AsyncImagePhase();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  uint64_t v24 = (uint64_t *)&v73[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v21 + 16))(v24, v5, v20);
  int v25 = (*(uint64_t (**)(uint64_t *, uint64_t))(v21 + 88))(v24, v20);
  if (v25 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v21 + 96))(v24, v20);
    uint64_t v26 = *v24;
    (*(void (**)(unsigned char *, void, uint64_t))(v16 + 104))(v19, enum case for Image.ResizingMode.stretch(_:), v15);
    uint64_t v83 = Image.resizable(capInsets:resizingMode:)();
    (*(void (**)(unsigned char *, uint64_t))(v16 + 8))(v19, v15);
    uint64_t v27 = *(void *)(v4 + 8);
    swift_retain();
    double v28 = sub_1000C5AF4();
    swift_release();
    uint64_t v29 = *(void *)(v27 + 64);
    int v81 = static MatchedGeometryProperties.position.getter();
    static UnitPoint.center.getter();
    uint64_t v31 = v30;
    uint64_t v33 = v32;
    sub_10000570C(&qword_1001A6050);
    uint64_t v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_100152B80;
    swift_retain();
    sub_1000C58DC();
    swift_release();
    *(void *)&long long v79 = Color.init(_:)();
    if (*(void *)(v4 + 48))
    {
      swift_retain();
      char v35 = sub_1000D1500();
      uint64_t v37 = v36;
      swift_release();
      uint64_t v38 = v85;
      uint64_t v82 = v29;
      if (v37 && (swift_bridgeObjectRelease(), (v35 & 1) != 0)) {
        char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      else {
        char v39 = 1;
      }
      swift_bridgeObjectRelease();
      uint64_t v42 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v87 + 16);
      v42(v38, v4, v88);
      uint64_t v84 = v26;
      uint64_t v80 = v42;
      uint64_t v78 = v10;
      if (v39)
      {
LABEL_17:
        uint64_t v45 = v87;
        uint64_t v46 = v38;
        uint64_t v47 = v88;
        (*(void (**)(unsigned char *, uint64_t))(v87 + 8))(v46, v88);
        uint64_t v48 = Color.opacity(_:)();
        swift_release();
        *(void *)(v34 + 32) = v48;
        *(void *)(v34 + 40) = static Color.clear.getter();
        v132[0] = v34;
        specialized Array._endMutation()();
        Gradient.init(colors:)();
        double v49 = 0.0;
        LinearGradient.init(gradient:startPoint:endPoint:)();
        uint64_t v85 = v115;
        long long v79 = v116;
        uint64_t v50 = v117;
        uint64_t v51 = v118;
        uint64_t v77 = static SafeAreaRegions.all.getter();
        int v74 = static Edge.Set.all.getter();
        uint64_t v52 = static Alignment.center.getter();
        uint64_t v75 = v53;
        uint64_t v76 = v52;
        uint64_t v54 = *(void *)(v4 + 24);
        LOBYTE(v132[0]) = *(unsigned char *)(v4 + 16);
        v132[1] = v54;
        sub_10000570C(&qword_1001A6728);
        State.wrappedValue.getter();
        if (v114[0]) {
          double v49 = 1.0;
        }
        v92[552] = 1;
        uint64_t v55 = v86;
        v80(v86, v4, v47);
        unint64_t v56 = (*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
        uint64_t v57 = swift_allocObject();
        uint64_t v58 = v90;
        *(void *)(v57 + 16) = v89;
        *(void *)(v57 + 24) = v58;
        (*(void (**)(unint64_t, unsigned char *, uint64_t))(v45 + 32))(v57 + v56, v55, v47);
        long long v96 = (unint64_t)v83;
        LOWORD(v97) = 1;
        *(_DWORD *)((char *)&v97 + 2) = *(_DWORD *)&v94[7];
        WORD3(v97) = v95;
        *((void *)&v97 + 1) = 0;
        *(double *)&long long v98 = v28;
        *((void *)&v98 + 1) = 0xD000000000000010;
        *(void *)&long long v99 = 0x800000010015F3B0;
        *((void *)&v99 + 1) = v82;
        LODWORD(v100) = v81;
        *((void *)&v100 + 1) = v31;
        *(void *)&long long v101 = v33;
        BYTE8(v101) = 1;
        HIDWORD(v101) = *(_DWORD *)&v94[3];
        *(_DWORD *)((char *)&v101 + 9) = *(_DWORD *)v94;
        *(void *)&v102[0] = v85;
        *(_OWORD *)((char *)v102 + 8) = v79;
        *((void *)&v102[1] + 1) = v50;
        *(void *)&long long v103 = v51;
        *((void *)&v103 + 1) = v77;
        LOBYTE(v104) = v74;
        DWORD1(v104) = *(_DWORD *)&v93[3];
        *(_DWORD *)((char *)&v104 + 1) = *(_DWORD *)v93;
        *((void *)&v104 + 1) = v76;
        *(void *)&long long v105 = v75;
        *((double *)&v105 + 1) = v49;
        *(void *)&long long v106 = sub_1000F7500;
        *((void *)&v106 + 1) = v57;
        long long v107 = 0uLL;
        long long v130 = v106;
        long long v129 = v105;
        long long v124 = v101;
        long long v125 = v102[0];
        long long v126 = v102[1];
        long long v127 = v103;
        long long v131 = 0uLL;
        long long v128 = v104;
        long long v119 = (unint64_t)v83;
        long long v123 = v100;
        long long v122 = v99;
        long long v121 = v98;
        long long v120 = v97;
        static Alignment.top.getter();
        sub_1001249C0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v108, 0.0, 1, INFINITY, 0);
        sub_1000F7584((uint64_t)&v96);
        swift_retain();
        sub_1000C58DC();
        swift_release();
        uint64_t v59 = Color.init(_:)();
        char v60 = static Edge.Set.all.getter();
        uint64_t v61 = static Alignment.bottom.getter();
        uint64_t v63 = v62;
        sub_1000F5C3C(v4, (uint64_t)v109);
        uint64_t v64 = static Alignment.center.getter();
        uint64_t v66 = v65;
        memcpy(v110, v108, 0x140uLL);
        *(void *)&v110[20] = v59;
        BYTE8(v110[20]) = v60;
        *(void *)&v110[21] = v61;
        *((void *)&v110[21] + 1) = v63;
        v110[28] = v109[6];
        v110[29] = v109[7];
        v110[30] = v109[8];
        v110[24] = v109[2];
        v110[25] = v109[3];
        v110[27] = v109[5];
        v110[26] = v109[4];
        v110[23] = v109[1];
        v110[22] = v109[0];
        *(void *)&v110[31] = v64;
        *((void *)&v110[31] + 1) = v66;
        swift_retain();
        double v67 = sub_1000C5B64();
        swift_release();
        static UnitPoint.top.getter();
        uint64_t v69 = v68;
        uint64_t v71 = v70;
        memcpy(v111, v110, 0x200uLL);
        *(double *)&v111[64] = v67;
        *(double *)&v111[65] = v67;
        v111[66] = v69;
        v111[67] = v71;
        sub_1000F7600((uint64_t)v111);
        sub_10000A3C4((uint64_t)v111, (uint64_t)v132, &qword_1001AB238);
        sub_1000F7608((uint64_t)v110);
        sub_10000570C(&qword_1001AB150);
        sub_10000570C(&qword_1001AB210);
        sub_1000F6D2C();
        sub_1000F7218();
        _ConditionalContent<>.init(storage:)();
        memcpy(v112, v92, 0x221uLL);
        memcpy(v114, v92, 0x221uLL);
        sub_1000F73C0((uint64_t)v114);
        sub_10000A3C4((uint64_t)v114, (uint64_t)v132, &qword_1001AB230);
        sub_1000F77A0(v112, sub_1000F76D0);
        sub_10000570C(&qword_1001AB140);
        sub_1000F6CB0();
        _ConditionalContent<>.init(storage:)();
        swift_release();
        sub_1000F77A0(v112, sub_1000F7890);
        sub_1000F7988((uint64_t)v110);
        goto LABEL_20;
      }
      uint64_t v43 = *((void *)v38 + 6);
      if (v43)
      {
        switch(*(unsigned char *)(v43 + 32))
        {
          case 1:
          case 2:
          case 3:
          case 4:
            _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            break;
          default:
            swift_bridgeObjectRelease();
            break;
        }
        goto LABEL_17;
      }
    }
    type metadata accessor for RemoteViewConfiguration();
    sub_10000E4F8();
    EnvironmentObject.error()();
    __break(1u);
    JUMPOUT(0x1000F5BB8);
  }
  if (v25 == enum case for AsyncImagePhase.failure(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v21 + 96))(v24, v20);
    swift_errorRelease();
LABEL_9:
    swift_retain();
    sub_1000C58DC();
    swift_release();
    uint64_t v40 = Color.init(_:)();
    char v41 = static Edge.Set.all.getter();
    v112[0] = v40;
    LOBYTE(v112[1]) = v41;
    sub_1000F73B4((uint64_t)v112);
    sub_10000A3C4((uint64_t)v112, (uint64_t)v132, &qword_1001AB238);
    swift_retain();
    sub_10000570C(&qword_1001AB150);
    sub_10000570C(&qword_1001AB210);
    sub_1000F6D2C();
    sub_1000F7218();
    _ConditionalContent<>.init(storage:)();
    memcpy(v114, v111, 0x221uLL);
    sub_1000F73C0((uint64_t)v114);
    sub_10000A3C4((uint64_t)v114, (uint64_t)v132, &qword_1001AB230);
    sub_10000570C(&qword_1001AB140);
    sub_1000F6CB0();
    _ConditionalContent<>.init(storage:)();
    swift_release();
LABEL_20:
    uint64_t v44 = v113;
    goto LABEL_21;
  }
  if (v25 == enum case for AsyncImagePhase.empty(_:)) {
    goto LABEL_9;
  }
  sub_1000F73A8((uint64_t)v113);
  sub_10000A3C4((uint64_t)v113, (uint64_t)v132, &qword_1001AB230);
  sub_10000570C(&qword_1001AB140);
  sub_1000F6CB0();
  _ConditionalContent<>.init(storage:)();
  (*(void (**)(uint64_t *, uint64_t))(v21 + 8))(v24, v20);
  uint64_t v44 = v114;
LABEL_21:
  memcpy(v132, v44, 0x222uLL);
  return memcpy(v91, v132, 0x222uLL);
}

uint64_t sub_1000F5BCC()
{
  return swift_release();
}

double sub_1000F5C3C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ColorScheme();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = &v30[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7, v10);
  uint64_t v12 = &v30[-v11];
  sub_10000570C(&qword_1001A6050);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_100152B80;
  *(void *)(v13 + 32) = static Color.clear.getter();
  *(void *)(v13 + 40) = static Color.white.getter();
  uint64_t v36 = v13;
  specialized Array._endMutation()();
  Gradient.init(colors:)();
  LinearGradient.init(gradient:startPoint:endPoint:)();
  uint64_t v14 = v31;
  uint64_t v15 = v32;
  uint64_t v16 = v33;
  uint64_t v17 = v34;
  uint64_t v18 = v35;
  type metadata accessor for HeroImage();
  swift_retain();
  double v19 = sub_1000C5B28();
  swift_release();
  sub_100026F48((uint64_t)v12);
  (*(void (**)(unsigned char *, void, uint64_t))(v5 + 104))(v9, enum case for ColorScheme.light(_:), v4);
  LOBYTE(v13) = static ColorScheme.== infix(_:_:)();
  uint64_t v20 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
  v20(v9, v4);
  v20(v12, v4);
  if (v13)
  {
    if (qword_1001A4E38 != -1) {
      swift_once();
    }
    uint64_t v21 = &qword_1001B74D8;
  }
  else
  {
    if (qword_1001A4E30 != -1) {
      swift_once();
    }
    uint64_t v21 = &qword_1001B74D0;
  }
  uint64_t v22 = *v21;
  swift_retain();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v24 = *(void *)(a1 + 40);
  uint64_t v36 = *(void *)(a1 + 32);
  uint64_t v37 = v24;
  sub_10000570C(&qword_1001AB228);
  State.wrappedValue.getter();
  swift_retain();
  sub_1000C563C();
  swift_release();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v25 = v36;
  char v26 = v37;
  uint64_t v27 = v38;
  char v28 = v39;
  *(void *)a2 = 17;
  *(void *)(a2 + 8) = v14;
  *(void *)(a2 + 16) = v15;
  *(void *)(a2 + 24) = v16;
  *(void *)(a2 + 32) = v17;
  *(void *)(a2 + 40) = v18;
  *(void *)(a2 + 48) = 0;
  *(double *)(a2 + 56) = v19;
  *(void *)(a2 + 64) = KeyPath;
  *(void *)(a2 + 72) = v22;
  *(void *)(a2 + 80) = v25;
  *(unsigned char *)(a2 + 88) = v26;
  *(void *)(a2 + 96) = v27;
  *(unsigned char *)(a2 + 104) = v28;
  double result = *(double *)&v40;
  *(_OWORD *)(a2 + 112) = v40;
  *(void *)(a2 + 128) = sub_100073FD8;
  *(void *)(a2 + 136) = 0;
  return result;
}

uint64_t sub_1000F5FD4@<X0>(uint64_t a1@<X8>)
{
  swift_getWitnessTable();
  *(void *)a1 = ObservedObject.init(wrappedValue:)();
  *(void *)(a1 + 8) = v2;
  State.init(wrappedValue:)();
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  State.init(wrappedValue:)();
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  type metadata accessor for RemoteViewConfiguration();
  sub_10000E4F8();
  *(void *)(a1 + 48) = EnvironmentObject.init()();
  *(void *)(a1 + 56) = v3;
  uint64_t v4 = (uint64_t *)(a1 + *(int *)(type metadata accessor for HeroImage() + 48));
  *uint64_t v4 = swift_getKeyPath();
  sub_10000570C(&qword_1001A5468);
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for HeroImage()
{
  return sub_10000B72C();
}

ValueMetadata *type metadata accessor for HeroImagePlaceholder()
{
  return &type metadata for HeroImagePlaceholder;
}

void sub_1000F6170()
{
  sub_1000E0838();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1000F6214(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *(void *)a1 = *a2;
    a1 = v12 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v6 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v6;
    uint64_t v7 = a2[6];
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v7;
    uint64_t v8 = *(int *)(a3 + 48);
    uint64_t v9 = (uint64_t *)((char *)a2 + v8);
    uint64_t v10 = (void *)(a1 + v8);
    *(void *)(a1 + 56) = a2[7];
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_10000570C(&qword_1001A5468);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v10, v9, v11);
    }
    else
    {
      *uint64_t v10 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1000F6374(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 48);
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_1000F6444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  uint64_t v7 = *(int *)(a3 + 48);
  uint64_t v8 = (void *)(a2 + v7);
  uint64_t v9 = (void *)(a1 + v7);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v9, v8, v10);
  }
  else
  {
    *uint64_t v9 = *v8;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1000F654C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 48);
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (void *)(a2 + v6);
    sub_10000ACE0(a1 + v6, &qword_1001A5468);
    sub_10000570C(&qword_1001A5468);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      void *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *sub_1000F66A8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  long long v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 48);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000F6784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(a3 + 48);
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (const void *)(a2 + v7);
    sub_10000ACE0(a1 + v7, &qword_1001A5468);
    uint64_t v10 = sub_10000570C(&qword_1001A5468);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000F68C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F68DC);
}

uint64_t sub_1000F68DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000570C(&qword_1001A65B8);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 48);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000F6990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F69A4);
}

uint64_t sub_1000F69A4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000570C(&qword_1001A65B8);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 48);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000F6A50()
{
  return swift_getOpaqueTypeConformance2();
}

__n128 sub_1000F6A70@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static Color.clear.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = static Alignment.top.getter();
  sub_100124B9C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v10, 0.0, 1, INFINITY, 0, v4, v5, KeyPath, v2, 0x3FF199999999999ALL, 0);
  swift_release();
  swift_release();
  long long v6 = v10[7];
  *(_OWORD *)(a1 + 96) = v10[6];
  *(_OWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 128) = v10[8];
  long long v7 = v10[3];
  *(_OWORD *)(a1 + 32) = v10[2];
  *(_OWORD *)(a1 + 48) = v7;
  long long v8 = v10[5];
  *(_OWORD *)(a1 + 64) = v10[4];
  *(_OWORD *)(a1 + 80) = v8;
  __n128 result = (__n128)v10[1];
  *(_OWORD *)a1 = v10[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000F6B50()
{
  return swift_getOpaqueTypeConformance2();
}

void *sub_1000F6B98(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for HeroImage() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1000F4E98(a1, v4);
}

unint64_t sub_1000F6C34()
{
  unint64_t result = qword_1001AB130;
  if (!qword_1001AB130)
  {
    sub_100004A58(&qword_1001AB128);
    sub_1000F6CB0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB130);
  }
  return result;
}

unint64_t sub_1000F6CB0()
{
  unint64_t result = qword_1001AB138;
  if (!qword_1001AB138)
  {
    sub_100004A58(&qword_1001AB140);
    sub_1000F6D2C();
    sub_1000F7218();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB138);
  }
  return result;
}

unint64_t sub_1000F6D2C()
{
  unint64_t result = qword_1001AB148;
  if (!qword_1001AB148)
  {
    sub_100004A58(&qword_1001AB150);
    sub_1000F6DA8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB148);
  }
  return result;
}

unint64_t sub_1000F6DA8()
{
  unint64_t result = qword_1001AB158;
  if (!qword_1001AB158)
  {
    sub_100004A58(&qword_1001AB160);
    sub_1000F6E48();
    sub_10000A780(&qword_1001AB1F8, &qword_1001AB200);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB158);
  }
  return result;
}

unint64_t sub_1000F6E48()
{
  unint64_t result = qword_1001AB168;
  if (!qword_1001AB168)
  {
    sub_100004A58(&qword_1001AB170);
    sub_1000F6EE8();
    sub_10000A780(&qword_1001A6290, &qword_1001A6298);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB168);
  }
  return result;
}

unint64_t sub_1000F6EE8()
{
  unint64_t result = qword_1001AB178;
  if (!qword_1001AB178)
  {
    sub_100004A58(&qword_1001AB180);
    sub_1000F6F64();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB178);
  }
  return result;
}

unint64_t sub_1000F6F64()
{
  unint64_t result = qword_1001AB188;
  if (!qword_1001AB188)
  {
    sub_100004A58(&qword_1001AB190);
    sub_1000F6FE0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB188);
  }
  return result;
}

unint64_t sub_1000F6FE0()
{
  unint64_t result = qword_1001AB198;
  if (!qword_1001AB198)
  {
    sub_100004A58(&qword_1001AB1A0);
    sub_1000F705C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB198);
  }
  return result;
}

unint64_t sub_1000F705C()
{
  unint64_t result = qword_1001AB1A8;
  if (!qword_1001AB1A8)
  {
    sub_100004A58(&qword_1001AB1B0);
    sub_1000F70FC();
    sub_10000A780(&qword_1001AB1E8, &qword_1001AB1F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB1A8);
  }
  return result;
}

unint64_t sub_1000F70FC()
{
  unint64_t result = qword_1001AB1B8;
  if (!qword_1001AB1B8)
  {
    sub_100004A58(&qword_1001AB1C0);
    sub_1000F719C();
    sub_10000A780(&qword_1001AB1D8, &qword_1001AB1E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB1B8);
  }
  return result;
}

unint64_t sub_1000F719C()
{
  unint64_t result = qword_1001AB1C8;
  if (!qword_1001AB1C8)
  {
    sub_100004A58(&qword_1001AB1D0);
    sub_1000B0B8C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB1C8);
  }
  return result;
}

unint64_t sub_1000F7218()
{
  unint64_t result = qword_1001AB208;
  if (!qword_1001AB208)
  {
    sub_100004A58(&qword_1001AB210);
    sub_1000F72B8();
    sub_10000A780(&qword_1001A6290, &qword_1001A6298);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB208);
  }
  return result;
}

unint64_t sub_1000F72B8()
{
  unint64_t result = qword_1001AB218;
  if (!qword_1001AB218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB218);
  }
  return result;
}

uint64_t sub_1000F7310()
{
  return State.wrappedValue.setter();
}

uint64_t sub_1000F73A8(uint64_t result)
{
  *(unsigned char *)(result + 545) = 1;
  return result;
}

uint64_t sub_1000F73B4(uint64_t result)
{
  *(unsigned char *)(result + 544) = 1;
  return result;
}

uint64_t sub_1000F73C0(uint64_t result)
{
  *(unsigned char *)(result + 545) = 0;
  return result;
}

uint64_t sub_1000F73CC()
{
  uint64_t v1 = (int *)(type metadata accessor for HeroImage() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v3 = v2 + v1[14];
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_1000F7500()
{
  type metadata accessor for HeroImage();

  return sub_1000F5BCC();
}

uint64_t sub_1000F7584(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 176);
  uint64_t v3 = *(void *)(a1 + 192);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_100009CD8(v2);
  sub_100009CD8(v3);
  return a1;
}

uint64_t sub_1000F7600(uint64_t result)
{
  *(unsigned char *)(result + 544) = 0;
  return result;
}

uint64_t sub_1000F7608(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 176);
  uint64_t v3 = *(void *)(a1 + 192);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100009CC8(v2);
  sub_100009CC8(v3);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_1000F76D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if ((a69 & 1) == 0)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100009CC8(a23);
    sub_100009CC8(a25);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }

  return swift_retain();
}

#error "1000F786C: call analysis failed (funcsize=60)"

uint64_t sub_1000F7890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t result = swift_release();
  if ((a69 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100009CD8(a23);
    sub_100009CD8(a25);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000F7988(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 176);
  uint64_t v3 = *(void *)(a1 + 192);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_100009CD8(v2);
  sub_100009CD8(v3);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_1000F7A58()
{
  return State.wrappedValue.setter();
}

ValueMetadata *type metadata accessor for HeroImageHeightPreferenceKey()
{
  return &type metadata for HeroImageHeightPreferenceKey;
}

unint64_t sub_1000F7AD0()
{
  unint64_t result = qword_1001AB240;
  if (!qword_1001AB240)
  {
    sub_100004A58(&qword_1001AB120);
    sub_1000F7B4C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB240);
  }
  return result;
}

unint64_t sub_1000F7B4C()
{
  unint64_t result = qword_1001AB248;
  if (!qword_1001AB248)
  {
    sub_100004A58(&qword_1001AB118);
    sub_1000F7BC8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB248);
  }
  return result;
}

unint64_t sub_1000F7BC8()
{
  unint64_t result = qword_1001AB250;
  if (!qword_1001AB250)
  {
    sub_100004A58(&qword_1001AB110);
    sub_1000F7C68();
    sub_10000A780(&qword_1001AB270, &qword_1001AB278);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB250);
  }
  return result;
}

unint64_t sub_1000F7C68()
{
  unint64_t result = qword_1001AB258;
  if (!qword_1001AB258)
  {
    sub_100004A58(&qword_1001AB108);
    sub_10000A780(&qword_1001AB260, &qword_1001AB100);
    sub_10000A780(&qword_1001AB268, &qword_1001AB220);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB258);
  }
  return result;
}

unint64_t sub_1000F7D30()
{
  unint64_t result = qword_1001AB280;
  if (!qword_1001AB280)
  {
    sub_100004A58(&qword_1001AB288);
    sub_1000F7DAC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB280);
  }
  return result;
}

unint64_t sub_1000F7DAC()
{
  unint64_t result = qword_1001AB290;
  if (!qword_1001AB290)
  {
    sub_100004A58(&qword_1001AB298);
    sub_1000425A4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB290);
  }
  return result;
}

unint64_t sub_1000F7E28(uint64_t a1)
{
  unint64_t result = sub_1000F7E50();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000F7E50()
{
  unint64_t result = qword_1001AB2A0;
  if (!qword_1001AB2A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB2A0);
  }
  return result;
}

uint64_t *sub_1000F7EA4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_10000570C(&qword_1001A5460);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for DismissAction();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    *uint64_t v10 = v12;
    v10[1] = v13;
  }
  swift_retain();
  return a1;
}

uint64_t sub_1000F7FC8(uint64_t a1)
{
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_release();
  }

  return swift_release();
}

void *sub_1000F8068(void *a1, void *a2, uint64_t a3)
{
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for DismissAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  void *v8 = v10;
  v8[1] = v11;
  swift_retain();
  return a1;
}

void *sub_1000F8140(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10000ACE0((uint64_t)a1, &qword_1001A5460);
    sub_10000570C(&qword_1001A5460);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *(void *)((char *)a1 + v7) = *(void *)((char *)a2 + v7);
  swift_retain();
  swift_release();
  *((void *)v8 + 1) = *((void *)v9 + 1);
  return a1;
}

char *sub_1000F8244(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for DismissAction();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_1000F8318(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10000ACE0((uint64_t)a1, &qword_1001A5460);
    uint64_t v6 = sub_10000570C(&qword_1001A5460);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for DismissAction();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  *(void *)&a1[v8] = *(void *)v10;
  swift_release();
  *((void *)v9 + 1) = *((void *)v10 + 1);
  return a1;
}

uint64_t sub_1000F841C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F8430);
}

uint64_t sub_1000F8430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000570C(&qword_1001A55E0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_1000F8500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F8514);
}

uint64_t sub_1000F8514(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_10000570C(&qword_1001A55E0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  return result;
}

uint64_t type metadata accessor for ErrorView()
{
  uint64_t result = qword_1001AB300;
  if (!qword_1001AB300) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000F8620()
{
  sub_10006E070();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1000F86B4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000F86D0()
{
  uint64_t v0 = static HorizontalAlignment.center.getter();
  sub_1000F888C((uint64_t)&v10);
  *(void *)&long long v4 = v0;
  *((void *)&v4 + 1) = 0x4034000000000000;
  v5[0] = 0;
  *(_OWORD *)&v5[8] = v10;
  v5[24] = v11;
  *(void *)&long long v6 = *((void *)&v11 + 1);
  BYTE8(v6) = v12[0];
  long long v7 = *(_OWORD *)&v12[8];
  *(void *)uint64_t v8 = *(void *)&v12[24];
  *(_OWORD *)&v8[8] = v13;
  *(void *)&v8[24] = v14;
  v9[0] = BYTE8(v14);
  *(_OWORD *)&v9[8] = v15;
  v9[24] = v16[0];
  sub_10000570C(&qword_1001AB340);
  sub_10000570C(&qword_1001AB348);
  sub_10000A780(&qword_1001AB350, &qword_1001AB340);
  uint64_t v1 = sub_100004A58(&qword_1001AB358);
  unint64_t v2 = sub_1000F93F4();
  *(void *)&long long v10 = v1;
  *((void *)&v10 + 1) = v2;
  swift_getOpaqueTypeConformance2();
  View.toolbar<A>(content:)();
  long long v15 = *(_OWORD *)&v8[16];
  v16[0] = *(_OWORD *)v9;
  *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)&v9[9];
  *(_OWORD *)uint64_t v12 = *(_OWORD *)&v5[16];
  *(_OWORD *)&v12[16] = v6;
  long long v13 = v7;
  long long v14 = *(_OWORD *)v8;
  long long v10 = v4;
  long long v11 = *(_OWORD *)v5;
  return sub_1000F94D0((uint64_t)&v10);
}

uint64_t sub_1000F888C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Image.ResizingMode();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  long long v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Image.init(systemName:)();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, enum case for Image.ResizingMode.stretch(_:), v2);
  uint64_t v40 = Image.resizable(capInsets:resizingMode:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v37 = v41;
  int v36 = v42;
  uint64_t v35 = v43;
  int v34 = v44;
  uint64_t v32 = v46;
  uint64_t v33 = v45;
  uint64_t v39 = static Color.secondary.getter();
  uint64_t KeyPath = swift_getKeyPath();
  LocalizedStringKey.init(_:)();
  uint64_t v7 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v9 = v8;
  char v11 = v10;
  if (qword_1001A4E40 != -1) {
    swift_once();
  }
  uint64_t v12 = Text.foregroundColor(_:)();
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  sub_10000FCC4(v7, v9, v11 & 1);
  swift_bridgeObjectRelease();
  static Font.title2.getter();
  uint64_t v17 = Text.font(_:)();
  uint64_t v19 = v18;
  char v21 = v20;
  uint64_t v23 = v22;
  swift_release();
  char v24 = v21 & 1;
  sub_10000FCC4(v12, v14, v16);
  swift_bridgeObjectRelease();
  uint64_t v25 = swift_getKeyPath();
  uint64_t v26 = v39;
  uint64_t v27 = v37;
  uint64_t v28 = KeyPath;
  *(void *)a1 = v40;
  *(void *)(a1 + 8) = v27;
  *(unsigned char *)(a1 + 16) = v36;
  *(void *)(a1 + 24) = v35;
  *(unsigned char *)(a1 + 32) = v34;
  uint64_t v29 = v32;
  *(void *)(a1 + 40) = v33;
  *(void *)(a1 + 48) = v29;
  *(void *)(a1 + 56) = v28;
  *(void *)(a1 + 64) = v26;
  *(void *)(a1 + 72) = v17;
  *(void *)(a1 + 80) = v19;
  *(unsigned char *)(a1 + 88) = v24;
  *(void *)(a1 + 96) = v23;
  *(void *)(a1 + 104) = v25;
  *(unsigned char *)(a1 + 112) = 1;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10000FCD4(v17, v19, v24);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10000FCC4(v17, v19, v24);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000F8C28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v28[1] = a2;
  uint64_t v3 = type metadata accessor for ToolbarItemPlacement();
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v5 = sub_10000570C(&qword_1001A56A0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[0] = sub_10000570C(&qword_1001AB358);
  uint64_t v11 = __chkstk_darwin(v28[0], v10);
  uint64_t v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  char v16 = (char *)v28 - v15;
  if (*(void *)(a1 + *(int *)(type metadata accessor for ErrorView() + 20)))
  {
    swift_retain();
    char v17 = sub_1000D1500();
    uint64_t v19 = v18;
    swift_release();
    if (v19 && (swift_bridgeObjectRelease(), (v17 & 1) != 0))
    {
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v25 & 1) == 0)
      {
        uint64_t v26 = sub_10000570C(&qword_1001A5698);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v13, 1, 1, v26);
        uint64_t v27 = sub_10000A780(&qword_1001A56A8, &qword_1001A56A0);
        uint64_t v29 = v5;
        uint64_t v30 = v27;
        swift_getOpaqueTypeConformance2();
        static ToolbarContentBuilder.buildIf<A>(_:)();
        sub_10000ACE0((uint64_t)v13, &qword_1001AB358);
        goto LABEL_6;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v20 = static ToolbarItemPlacement.navigationBarTrailing.getter();
    __chkstk_darwin(v20, v21);
    v28[-2] = a1;
    sub_10000570C(&qword_1001A56B0);
    sub_10000A780(&qword_1001A56B8, &qword_1001A56B0);
    ToolbarItem<>.init(placement:content:)();
    uint64_t v22 = sub_10000A780(&qword_1001A56A8, &qword_1001A56A0);
    static ToolbarContentBuilder.buildBlock<A>(_:)();
    uint64_t v23 = sub_10000570C(&qword_1001A5698);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v13, 0, 1, v23);
    uint64_t v29 = v5;
    uint64_t v30 = v22;
    swift_getOpaqueTypeConformance2();
    static ToolbarContentBuilder.buildIf<A>(_:)();
    sub_10000ACE0((uint64_t)v13, &qword_1001AB358);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
LABEL_6:
    sub_1000F93F4();
    static ToolbarContentBuilder.buildBlock<A>(_:)();
    return sub_10000ACE0((uint64_t)v16, &qword_1001AB358);
  }
  type metadata accessor for RemoteViewConfiguration();
  sub_10000E4F8();
  uint64_t result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

uint64_t sub_1000F90B0()
{
  uint64_t v0 = type metadata accessor for DismissAction();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v4 = __chkstk_darwin(v0, v3);
  uint64_t v5 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v12 - v7;
  sub_10002652C((uint64_t)&v12 - v7);
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v5, v8, v0);
  unint64_t v9 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(v10 + v9, v5, v0);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v8, v0);
  return Button.init(action:label:)();
}

uint64_t sub_1000F9254@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(_:)();
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_1000F92CC()
{
  return NavigationStack.init<>(root:)();
}

uint64_t sub_1000F93EC()
{
  return sub_1000F86D0();
}

unint64_t sub_1000F93F4()
{
  unint64_t result = qword_1001AB360;
  if (!qword_1001AB360)
  {
    sub_100004A58(&qword_1001AB358);
    sub_100004A58(&qword_1001A56A0);
    sub_10000A780(&qword_1001A56A8, &qword_1001A56A0);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB360);
  }
  return result;
}

uint64_t sub_1000F94C8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F8C28(*(void *)(v1 + 16), a1);
}

uint64_t sub_1000F94D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 104);
  char v4 = *(unsigned char *)(a1 + 112);
  swift_release();
  swift_release();
  swift_release();
  sub_10000FCC4(v2, v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000F9558()
{
  return sub_1000F90B0();
}

uint64_t sub_1000F9560()
{
  uint64_t v1 = type metadata accessor for DismissAction();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t sub_1000F95F0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000F961C()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

uint64_t sub_1000F9644@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000F9670@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000F969C()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_1000F96C8()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_1000F96F4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000F9720()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

uint64_t sub_1000F9748()
{
  return sub_10000A780(&qword_1001AB368, qword_1001AB370);
}

uint64_t sub_1000F9784@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  sub_100004A58(&qword_1001A6868);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v27 = *(void *)(a1 + 24);
  uint64_t v28 = v3;
  type metadata accessor for CalendarModule();
  sub_100004A58(&qword_1001AB3F8);
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for VStack();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v25 - v7;
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v25 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v25 - v11;
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v26 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  char v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  uint64_t v20 = (char *)&v25 - v19;
  static HorizontalAlignment.leading.getter();
  uint64_t v31 = v28;
  uint64_t v32 = v27;
  uint64_t v33 = v29;
  VStack.init(alignment:spacing:content:)();
  static Edge.Set.all.getter();
  uint64_t WitnessTable = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  static Edge.Set.top.getter();
  uint64_t v36 = WitnessTable;
  uint64_t v37 = &protocol witness table for _PaddingLayout;
  uint64_t v22 = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v9);
  uint64_t v34 = v22;
  uint64_t v35 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable();
  sub_1001221F0(v17, v13);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v26 + 8);
  v23(v17, v13);
  sub_1001221F0(v20, v13);
  return ((uint64_t (*)(char *, uint64_t))v23)(v20, v13);
}

uint64_t sub_1000F9BBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v50 = a1;
  uint64_t v62 = a4;
  uint64_t v52 = a2;
  uint64_t v53 = a3;
  type metadata accessor for CalendarModule();
  sub_100004A58(&qword_1001AB3F8);
  swift_getTupleTypeMetadata2();
  uint64_t v60 = type metadata accessor for TupleView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for VStack();
  uint64_t v61 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  unint64_t v56 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  uint64_t v57 = (char *)&v47 - v9;
  uint64_t v55 = type metadata accessor for AccessibilityTraits();
  uint64_t v54 = *(void *)(v55 - 8);
  __chkstk_darwin(v55, v10);
  double v49 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = sub_10000570C(&qword_1001A6868);
  uint64_t v13 = __chkstk_darwin(v58, v12);
  uint64_t v48 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  uint64_t v51 = (uint64_t)&v47 - v16;
  type metadata accessor for GuideViewModel();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v17 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v19 = v18;
  char v21 = v20 & 1;
  static Font.Weight.bold.getter();
  uint64_t v22 = Text.fontWeight(_:)();
  uint64_t v24 = v23;
  char v26 = v25 & 1;
  sub_10000FCC4(v17, v19, v21);
  swift_bridgeObjectRelease();
  static Font.title2.getter();
  uint64_t v27 = Text.font(_:)();
  uint64_t v29 = v28;
  char v31 = v30;
  swift_release();
  LOBYTE(v17) = v31 & 1;
  sub_10000FCC4(v22, v24, v26);
  swift_bridgeObjectRelease();
  uint64_t v32 = Text.accessibilityHeading(_:)();
  uint64_t v34 = v33;
  LOBYTE(v24) = v35;
  uint64_t v37 = v36;
  sub_10000FCC4(v27, v29, v17);
  swift_bridgeObjectRelease();
  uint64_t v69 = v32;
  uint64_t v70 = v34;
  char v71 = v24 & 1;
  uint64_t v72 = v37;
  uint64_t v38 = v49;
  static AccessibilityTraits.isHeader.getter();
  uint64_t v39 = (uint64_t)v48;
  View.accessibility(addTraits:)();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v38, v55);
  sub_10000FCC4(v69, v70, v71);
  swift_bridgeObjectRelease();
  uint64_t v40 = v51;
  sub_1000FAD54(v39, v51);
  static HorizontalAlignment.leading.getter();
  uint64_t v63 = v52;
  uint64_t v64 = v53;
  uint64_t v65 = v50;
  uint64_t v41 = (uint64_t)v56;
  VStack.init(alignment:spacing:content:)();
  uint64_t v42 = swift_getWitnessTable();
  uint64_t v43 = v57;
  sub_1001221F0(v41, v4);
  uint64_t v44 = v61;
  uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
  v45(v41, v4);
  sub_10000A428(v40, v39, &qword_1001A6868);
  uint64_t v69 = v39;
  (*(void (**)(uint64_t, char *, uint64_t))(v44 + 16))(v41, v43, v4);
  uint64_t v70 = v41;
  v68[0] = v58;
  v68[1] = v4;
  unint64_t v66 = sub_100042644();
  uint64_t v67 = v42;
  sub_1001231A4((uint64_t)&v69, 2uLL, (uint64_t)v68);
  v45((uint64_t)v43, v4);
  sub_10000ACE0(v40, &qword_1001A6868);
  v45(v41, v4);
  return sub_10000ACE0(v39, &qword_1001A6868);
}

uint64_t sub_1000FA18C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v72 = a3;
  uint64_t v5 = type metadata accessor for LocationModule();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v70 = v5;
  *(void *)&long long v71 = v6;
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v64 = type metadata accessor for Optional();
  uint64_t v63 = *(void *)(v64 - 8);
  uint64_t v12 = __chkstk_darwin(v64, v11);
  uint64_t v14 = (char *)&v61 - v13;
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v12, v16);
  uint64_t v65 = (char *)&v61 - v17;
  uint64_t v68 = sub_10000570C(&qword_1001AB3F8);
  uint64_t v19 = __chkstk_darwin(v68, v18);
  uint64_t v69 = (uint64_t)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v67 = (uint64_t)&v61 - v23;
  uint64_t v24 = *(void *)(a2 - 8);
  __chkstk_darwin(v22, v25);
  uint64_t v27 = (char *)&v61 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CalendarViewModel();
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v27, a1, a2);
  sub_1000B36C4((uint64_t)v27);
  uint64_t v77 = sub_100063ECC();
  uint64_t v78 = v28;
  *(void *)&long long v79 = v29;
  *((void *)&v79 + 1) = v30;
  uint64_t v31 = type metadata accessor for CalendarModule();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_1001221F0(&v77, v31);
  swift_release();
  swift_release();
  uint64_t v32 = type metadata accessor for GuideViewModel();
  sub_10007AD68(v32);
  uint64_t v33 = v15;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v63 + 8))(v14, v64);
    uint64_t v34 = 1;
    uint64_t v35 = v70;
    uint64_t v36 = v67;
  }
  else
  {
    uint64_t v62 = v15;
    uint64_t v37 = v65;
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v65, v14, AssociatedTypeWitness);
    uint64_t v64 = sub_10007AD50(v32);
    uint64_t v63 = v38;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    double v40 = (*(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
    uint64_t v42 = v41;
    uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
    uint64_t v45 = v44;
    uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
    uint64_t v47 = v31;
    uint64_t v49 = v48;
    uint64_t v50 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(AssociatedTypeWitness, AssociatedConformanceWitness);
    uint64_t v51 = LocalizedStringKey.init(stringLiteral:)();
    uint64_t v52 = v63;
    *(void *)uint64_t v9 = v64;
    *((void *)v9 + 1) = v52;
    *((double *)v9 + 2) = v40;
    *((void *)v9 + 3) = v42;
    *((void *)v9 + 4) = v43;
    *((void *)v9 + 5) = v45;
    *((void *)v9 + 6) = v46;
    *((void *)v9 + 7) = v49;
    uint64_t v31 = v47;
    *((void *)v9 + 8) = v50;
    *((void *)v9 + 9) = v51;
    *((void *)v9 + 10) = v53;
    v9[88] = v54 & 1;
    *((void *)v9 + 12) = v55;
    type metadata accessor for RemoteViewConfiguration();
    sub_1000FAE6C((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    *((void *)v9 + 13) = EnvironmentObject.init()();
    *((void *)v9 + 14) = v56;
    uint64_t v57 = v70;
    uint64_t v58 = (uint64_t *)&v9[*(int *)(v70 + 24)];
    *uint64_t v58 = swift_getKeyPath();
    sub_10000570C(&qword_1001A55D8);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v37, AssociatedTypeWitness);
    uint64_t v36 = v67;
    sub_1000619A4((uint64_t)v9, v67);
    uint64_t v34 = 0;
    uint64_t v35 = v57;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 56))(v36, v34, 1, v35);
  uint64_t v77 = v80;
  uint64_t v78 = v81;
  long long v71 = v82;
  long long v79 = v82;
  v76[0] = &v77;
  uint64_t v59 = v69;
  sub_10000A428(v36, v69, &qword_1001AB3F8);
  v76[1] = v59;
  swift_retain();
  swift_retain();
  v75[0] = v31;
  v75[1] = v68;
  uint64_t v73 = WitnessTable;
  unint64_t v74 = sub_1000FADC8();
  sub_1001231A4((uint64_t)v76, 2uLL, (uint64_t)v75);
  sub_10000ACE0(v36, &qword_1001AB3F8);
  swift_release();
  swift_release();
  sub_10000ACE0(v59, &qword_1001AB3F8);
  swift_release();
  return swift_release();
}

uint64_t sub_1000FA880@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for GuideViewModel();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

uint64_t sub_1000FA8EC()
{
  uint64_t result = type metadata accessor for GuideViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000FA97C(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1000FAAC8);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_1000FAADC(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFE0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFE0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFE0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 32);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1000FACC0);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            v18[2] = 0;
            v18[3] = 0;
            *uint64_t v18 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            v18[1] = a2 - 1;
          }
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata accessor for GuideModule()
{
  return sub_10000B72C();
}

uint64_t sub_1000FAD00()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000FAD48@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F9BBC(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000FAD54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A6868);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000FADBC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000FA18C(*(void *)(v1 + 32), *(void *)(v1 + 16), a1);
}

unint64_t sub_1000FADC8()
{
  unint64_t result = qword_1001AB400;
  if (!qword_1001AB400)
  {
    sub_100004A58(&qword_1001AB3F8);
    sub_1000FAE6C(&qword_1001AB408, (void (*)(uint64_t))type metadata accessor for LocationModule);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB400);
  }
  return result;
}

uint64_t sub_1000FAE6C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000FAEBC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1000FB04C@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_1000FEAAC(&qword_1001AB540, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__playerTimeObserver;
  swift_beginAccess();
  return sub_10000A428(v3, a1, (uint64_t *)&unk_1001A9610);
}

uint64_t sub_1000FB120@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000FEAAC(&qword_1001AB540, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__playerTimeObserver;
  swift_beginAccess();
  return sub_10000A428(v4, a2, (uint64_t *)&unk_1001A9610);
}

uint64_t sub_1000FB1F4(uint64_t a1)
{
  sub_10000A428(a1, (uint64_t)v2, (uint64_t *)&unk_1001A9610);
  swift_getKeyPath();
  sub_1000FEAAC(&qword_1001AB540, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_10000ACE0((uint64_t)v2, (uint64_t *)&unk_1001A9610);
}

uint64_t sub_1000FB2E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__playerTimeObserver;
  swift_beginAccess();
  sub_1000FEAF4(a2, v3, (uint64_t *)&unk_1001A9610);
  return swift_endAccess();
}

void *sub_1000FB358()
{
  swift_getKeyPath();
  sub_1000FEAAC(&qword_1001AB540, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__player);
  id v2 = v1;
  return v1;
}

id sub_1000FB408@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000FEAAC(&qword_1001AB540, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void **)(v3 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__player);
  *a2 = v4;

  return v4;
}

void sub_1000FB4C8(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  sub_1000FEAAC(&qword_1001AB540, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

uint64_t sub_1000FB5A4@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_1000FEAAC(&qword_1001AB540, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__currentSong;
  swift_beginAccess();
  return sub_10000A428(v3, a1, &qword_1001A5940);
}

uint64_t sub_1000FB678@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000FEAAC(&qword_1001AB540, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__currentSong;
  swift_beginAccess();
  return sub_10000A428(v4, a2, &qword_1001A5940);
}

uint64_t sub_1000FB74C(uint64_t a1)
{
  sub_10000A428(a1, (uint64_t)v2, &qword_1001A5940);
  swift_getKeyPath();
  sub_1000FEAAC(&qword_1001AB540, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_10000ACE0((uint64_t)v2, &qword_1001A5940);
}

uint64_t sub_1000FB83C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__currentSong;
  swift_beginAccess();
  sub_1000FEAF4(a2, v3, &qword_1001A5940);
  return swift_endAccess();
}

uint64_t sub_1000FB8B0@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000FEAAC(&qword_1001AB550, (void (*)(uint64_t))type metadata accessor for PlaybackProgressUpdater);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  double v5 = *(double *)(v3 + 16);
  double v6 = 1.0;
  if (v5 <= 1.0) {
    double v6 = *(double *)(v3 + 16);
  }
  if ((*(void *)&v5 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(void *)&v5 & 0x7FF0000000000000) == 0 || v5 < 0.0) {
    double v9 = 0.0;
  }
  else {
    double v9 = v6;
  }
  *a2 = v9;
  return result;
}

double sub_1000FB98C()
{
  swift_getKeyPath();
  sub_1000FEAAC(&qword_1001AB550, (void (*)(uint64_t))type metadata accessor for PlaybackProgressUpdater);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(double *)(v0 + 16);
}

uint64_t sub_1000FBA2C()
{
  swift_getKeyPath();
  sub_1000FEAAC(&qword_1001AB540, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__status);
}

uint64_t sub_1000FBAD4@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000FEAAC(&qword_1001AB540, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__status);
  return result;
}

uint64_t sub_1000FBB84()
{
  return swift_release();
}

id sub_1000FBC54()
{
  ObjectType = (objc_class *)swift_getObjectType();
  id v2 = &v0[OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__playerTimeObserver];
  *id v2 = 0u;
  v2[1] = 0u;
  *(void *)&v0[OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__player] = 0;
  uint64_t v3 = &v0[OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__currentSong];
  *(_OWORD *)uint64_t v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((void *)v3 + 4) = 0;
  v0[OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__status] = 0;
  uint64_t v4 = OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer_lock;
  type metadata accessor for PlaybackProgressUpdater(0);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = 0;
  sub_10000570C(&qword_1001AB558);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)(v5 + 24) = v6;
  unsigned int v7 = v0;
  ObservationRegistrar.init()();
  sub_10000570C(qword_1001AB560);
  uint64_t v8 = swift_allocObject();
  *(_DWORD *)(v8 + 24) = 0;
  *(void *)(v8 + 16) = v5;
  *(void *)&v0[v4] = v8;
  ObservationRegistrar.init()();

  v10.receiver = v7;
  v10.super_class = ObjectType;
  return [super init];
}

void sub_1000FBDA4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v4 - 8, v5);
  unsigned int v7 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v40 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v39 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  uint64_t v11 = v1 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer___observationRegistrar;
  v42[0] = v2;
  v38[0] = sub_1000FEAAC(&qword_1001AB540, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  v38[1] = v11;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v12 = v2 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__currentSong;
  swift_beginAccess();
  sub_10000A428(v12, (uint64_t)v42, &qword_1001A5940);
  uint64_t v13 = v43;
  if (v43)
  {
    uint64_t v14 = sub_10000AC9C(v42, v43);
    uint64_t v15 = *(void *)(v13 - 8);
    __chkstk_darwin(v14, v14);
    unint64_t v17 = (char *)v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v15 + 16))(v17);
    sub_10000ACE0((uint64_t)v42, &qword_1001A5940);
    uint64_t v18 = dispatch thunk of MusicItem.id.getter();
    uint64_t v20 = v19;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v13);
  }
  else
  {
    sub_10000ACE0((uint64_t)v42, &qword_1001A5940);
    uint64_t v18 = 0;
    uint64_t v20 = 0;
  }
  sub_10000AC9C(a1, a1[3]);
  uint64_t v21 = dispatch thunk of MusicItem.id.getter();
  if (v20)
  {
    if (v18 == v21 && v20 == v22)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_10:
      if (qword_1001A4F38 != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      sub_100017378(v24, (uint64_t)qword_1001B75B8);
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v25, v26)) {
        goto LABEL_20;
      }
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      uint64_t v28 = "Attempting to setup the same song already in the player";
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v25, v26, v28, v27, 2u);
      swift_slowDealloc();
LABEL_20:

      return;
    }
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v23) {
      goto LABEL_10;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v29 = a1[3];
  uint64_t v30 = a1[4];
  sub_10000AC9C(a1, v29);
  (*(void (**)(uint64_t, uint64_t))(v30 + 104))(v29, v30);
  uint64_t v31 = v40;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v7, 1, v8) == 1)
  {
    sub_10000ACE0((uint64_t)v7, &qword_1001AD200);
    if (qword_1001A4F38 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100017378(v32, (uint64_t)qword_1001B75B8);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v25, v26)) {
      goto LABEL_20;
    }
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    uint64_t v28 = "Preview playback setup initiated but no song preview url to setup.";
    goto LABEL_19;
  }
  uint64_t v33 = (uint64_t)v39;
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v39, v7, v8);
  sub_1000FC418();
  sub_10000AD3C((uint64_t)a1, (uint64_t)v42);
  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath, v35);
  v38[-2] = v2;
  v38[-1] = v42;
  uint64_t v41 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  sub_10000ACE0((uint64_t)v42, &qword_1001A5940);
  uint64_t v36 = swift_getKeyPath();
  __chkstk_darwin(v36, v37);
  v38[-2] = v2;
  LOBYTE(v38[-1]) = 1;
  v42[0] = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  sub_1000FC6D8(v33);
  sub_1000FCC2C();
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v33, v8);
}

uint64_t sub_1000FC418()
{
  sub_1000FD7B8();
  swift_getKeyPath();
  *(void *)&long long v13 = v0;
  sub_1000FEAAC(&qword_1001AB540, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__player;
  [*(id *)(v0 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__player) pause];
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v2 = v0 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__playerTimeObserver;
  swift_beginAccess();
  sub_10000A428(v2, (uint64_t)&v11, (uint64_t *)&unk_1001A9610);
  if (v12)
  {
    sub_1000FEB98(&v11, &v13);
    swift_getKeyPath();
    *(void *)&long long v11 = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v3 = *(void **)(v0 + v1);
    if (v3)
    {
      sub_10000AC9C(&v13, v14);
      id v4 = v3;
      [v4 removeTimeObserver:_bridgeAnythingToObjectiveC<A>(_:)()];

      swift_unknownObjectRelease();
    }
    sub_100007584((uint64_t)&v13);
  }
  else
  {
    sub_10000ACE0((uint64_t)&v11, (uint64_t *)&unk_1001A9610);
  }
  swift_getKeyPath();
  *(void *)&long long v13 = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v5 = *(void **)(v0 + v1);
  if (v5)
  {
    id v6 = v5;
    NSString v7 = String._bridgeToObjectiveC()();
    [v6 removeObserver:v0 forKeyPath:v7];
  }
  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath, v9);
  *(void *)&long long v13 = v0;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

void sub_1000FC6D8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v47 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v47 - 8);
  __chkstk_darwin(v47, v5);
  uint64_t v43 = v6;
  uint64_t v45 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = objc_allocWithZone((Class)AVURLAsset);
  uint64_t v44 = a1;
  URL._bridgeToObjectiveC()(v8);
  uint64_t v10 = v9;
  id v11 = [v7 initWithURL:v9 options:0];

  id v12 = [objc_allocWithZone((Class)AVPlayerItem) initWithAsset:v11];
  id v13 = [objc_allocWithZone((Class)AVPlayer) initWithPlayerItem:v12];
  swift_getKeyPath();
  uint64_t v49 = v2;
  id v50 = v13;
  uint64_t v14 = (char *)v2 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer___observationRegistrar;
  aBlock = v2;
  uint64_t v15 = sub_1000FEAAC(&qword_1001AB540, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  uint64_t v46 = (char *)&type metadata for () + 8;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();

  swift_getKeyPath();
  aBlock = v2;
  uint64_t v48 = v15;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v16 = *(void **)((char *)v2 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__player);
  if (v16)
  {
    id v17 = v16;
    NSString v18 = String._bridgeToObjectiveC()();
    [v17 addObserver:v2 forKeyPath:v18 options:1 context:0];

    id v19 = [self defaultCenter];
    NSString v20 = String._bridgeToObjectiveC()();
    id v21 = [v17 currentItem];
    id v42 = v12;
    id v22 = v21;
    [v19 addObserver:v2 selector:"playerDidFinishPlaying" name:v20 object:v21];

    CMTime v58 = CMTime.init(value:timescale:)(1, 5);
    CMTimeValue value = v58.value;
    LODWORD(v20) = v58.timescale;
    CMTimeEpoch epoch = v58.epoch;
    uint64_t v39 = HIDWORD(*(void *)&v58.timescale);
    sub_1000FE894();
    char v23 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v24 = *(uint64_t *)((char *)v2 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer_lock);
    uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    uint64_t v26 = v44;
    uint64_t v27 = v45;
    uint64_t v44 = 0;
    uint64_t v28 = v47;
    v25(v45, v26, v47);
    uint64_t v29 = *(unsigned __int8 *)(v4 + 80);
    uint64_t v41 = v14;
    uint64_t v30 = (v29 + 32) & ~v29;
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = v24;
    *(void *)(v31 + 24) = v17;
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v31 + v30, v27, v28);
    uint64_t v56 = sub_1000FE9A8;
    uint64_t v57 = v31;
    aBlock = _NSConcreteStackBlock;
    unint64_t v53 = 1107296256;
    char v54 = sub_1000FD74C;
    uint64_t v55 = &unk_10019A770;
    uint64_t v32 = _Block_copy(&aBlock);
    id v33 = v17;
    swift_retain();
    swift_release();
    aBlock = (void **)value;
    unint64_t v53 = __PAIR64__(v39, v20);
    char v54 = (uint64_t (*)(uint64_t, uint64_t *))epoch;
    id v34 = [v33 addPeriodicTimeObserverForInterval:&aBlock queue:v23 usingBlock:v32];
    _Block_release(v32);

    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath, v36);
    *(&v37 - 2) = (uint64_t)v2;
    *(&v37 - 1) = (uint64_t)&aBlock;
    uint64_t v51 = v2;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    sub_10000ACE0((uint64_t)&aBlock, (uint64_t *)&unk_1001A9610);
  }
  else
  {
  }
}

void sub_1000FCC2C()
{
  swift_getKeyPath();
  uint64_t v15 = v0;
  sub_1000FEAAC(&qword_1001AB540, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__player;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__player];
  if (v2 && (id v3 = [v2 error]) != 0)
  {

    if (qword_1001A4F38 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100017378(v4, (uint64_t)qword_1001B75B8);
    uint64_t v5 = v0;
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = (char *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v9 = *(void **)&v0[v1];
      if (v9 && (id v10 = [v9 error]) != 0)
      {
        id v11 = v10;
        swift_getErrorValue();
        uint64_t v12 = Error.localizedDescription.getter();
        unint64_t v14 = v13;
      }
      else
      {
        uint64_t v12 = 0;
        unint64_t v14 = 0xE000000000000000;
      }
      sub_1000FE1F8(v12, v14, (uint64_t *)&v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Playback initiated but player has error: %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  else
  {
    swift_getKeyPath();
    uint64_t v15 = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    [*(id *)&v0[v1] play];
  }
}

id sub_1000FCF34()
{
  ObjectType = (objc_class *)swift_getObjectType();
  sub_1000FC418();
  v3.receiver = v0;
  v3.super_class = ObjectType;
  [super dealloc];
}

uint64_t sub_1000FD094()
{
  return type metadata accessor for MusicPreviewPlayer(0);
}

uint64_t type metadata accessor for MusicPreviewPlayer(uint64_t a1)
{
  return sub_10003859C(a1, (uint64_t *)&unk_1001AB468);
}

void sub_1000FD200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (os_unfair_lock_s *)(a4 + 24);
  if (os_unfair_lock_trylock((os_unfair_lock_t)(a4 + 24)))
  {
    sub_1000FEA70((uint64_t *)(a4 + 16));
    os_unfair_lock_unlock(v5);
  }
}

void sub_1000FD26C(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  id v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [a2 currentItem];
  if (!v11)
  {
    if (qword_1001A4F38 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100017378(v15, (uint64_t)qword_1001B75B8);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a3, v6);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v32 = a1;
      id v19 = (uint8_t *)v18;
      v33[0] = swift_slowAlloc();
      *(_DWORD *)id v19 = 136315138;
      v31[1] = v19 + 4;
      sub_1000FEAAC(&qword_1001A6C50, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      v33[3] = sub_1000FE1F8(v20, v21, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Invalid or missing duration for current item %s", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a1 = v32;
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }

    uint64_t v22 = *a1;
    char v23 = (os_unfair_lock_s *)(*(void *)(*a1 + 24) + 16);
    os_unfair_lock_lock(v23);
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath, v25);
    v31[-2] = v22;
    v31[-1] = 0;
    v33[0] = v22;
    sub_1000FEAAC(&qword_1001AB550, (void (*)(uint64_t))type metadata accessor for PlaybackProgressUpdater);
    goto LABEL_13;
  }
  uint64_t v12 = v11;
  [v11 duration];

  CMTime.seconds.getter();
  if (v13 > 0.0)
  {
    double v14 = v13;
    if ((~*(void *)&v13 & 0x7FF0000000000000) != 0 || (*(void *)&v13 & 0xFFFFFFFFFFFFFLL) == 0)
    {
      CMTime.seconds.getter();
      double v27 = v26 / v14;
      uint64_t v28 = *a1;
      char v23 = (os_unfair_lock_s *)(*(void *)(*a1 + 24) + 16);
      os_unfair_lock_lock(v23);
      uint64_t v29 = swift_getKeyPath();
      __chkstk_darwin(v29, v30);
      v31[-2] = v28;
      *(double *)&v31[-1] = v27;
      v33[0] = v28;
      sub_1000FEAAC(&qword_1001AB550, (void (*)(uint64_t))type metadata accessor for PlaybackProgressUpdater);
LABEL_13:
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
      os_unfair_lock_unlock(v23);
    }
  }
}

uint64_t sub_1000FD74C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a2[2];
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(v2, v3, v4);

  return swift_release();
}

uint64_t sub_1000FD7B8()
{
  CMTimeValue v1 = v0;
  if (qword_1001A4F38 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100017378(v2, (uint64_t)qword_1001B75B8);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Preview Playback ended.", v5, 2u);
    swift_slowDealloc();
  }

  uint64_t v6 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer_lock);
  if (os_unfair_lock_trylock(v6 + 6))
  {
    sub_1000FDAC8((uint64_t)&v6[4]);
    os_unfair_lock_unlock(v6 + 6);
  }
  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath, v8);
  sub_1000FEAAC(&qword_1001AB540, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_getKeyPath();
  *(void *)&long long v16 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v9 = *(void **)(v1 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__player);
  if (v9)
  {
    CMTimeScale timescale = kCMTimeZero.timescale;
    CMTimeFlags flags = kCMTimeZero.flags;
    CMTimeEpoch epoch = kCMTimeZero.epoch;
    *(void *)&long long v16 = kCMTimeZero.value;
    *((void *)&v16 + 1) = __PAIR64__(flags, timescale);
    *(void *)&long long v17 = epoch;
    CMTimeEpoch v22 = epoch;
    CMTimeValue value = kCMTimeZero.value;
    CMTimeScale v24 = timescale;
    CMTimeFlags v25 = flags;
    CMTimeEpoch v26 = epoch;
    CMTimeValue v19 = kCMTimeZero.value;
    CMTimeScale v20 = timescale;
    CMTimeFlags v21 = flags;
    [v9 seekToTime:&v16 toleranceBefore:&value toleranceAfter:&v19];
  }
  uint64_t v18 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v13 = swift_getKeyPath();
  __chkstk_darwin(v13, v14);
  CMTimeValue value = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_10000ACE0((uint64_t)&v16, &qword_1001A5940);
}

void sub_1000FDAC8(uint64_t a1)
{
  CMTimeValue v1 = (os_unfair_lock_s *)(*(void *)(*(void *)a1 + 24) + 16);
  os_unfair_lock_lock(v1);
  swift_getKeyPath();
  sub_1000FEAAC(&qword_1001AB550, (void (*)(uint64_t))type metadata accessor for PlaybackProgressUpdater);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  os_unfair_lock_unlock(v1);
}

uint64_t sub_1000FDC04()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

double sub_1000FDCCC()
{
  unint64_t v1 = *(os_unfair_lock_s **)(*v0 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer_lock);
  uint64_t v2 = (uint64_t *)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1000FB8B0(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_1000FDD38()
{
  uint64_t v1 = *v0;
  swift_getKeyPath();
  sub_1000FEAAC(&qword_1001AB540, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__status);
}

void sub_1000FDDE0(void *a1)
{
}

void sub_1000FDE04()
{
}

id sub_1000FDE28()
{
  uint64_t v1 = *v0;
  swift_getKeyPath();
  sub_1000FEAAC(&qword_1001AB540, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return [*(id *)(v1 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__player) pause];
}

double sub_1000FDEDC@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000FEAAC(&qword_1001AB550, (void (*)(uint64_t))type metadata accessor for PlaybackProgressUpdater);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  double result = *(double *)(v3 + 16);
  *a2 = result;
  return result;
}

uint64_t sub_1000FDF84()
{
  return swift_release();
}

uint64_t sub_1000FE05C()
{
  swift_release();
  uint64_t v1 = v0
     + OBJC_IVAR____TtC16EventViewServiceP33_5445445A7553E6A0FDE4F6AA485860F723PlaybackProgressUpdater___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1000FE104()
{
  return type metadata accessor for PlaybackProgressUpdater(0);
}

uint64_t type metadata accessor for PlaybackProgressUpdater(uint64_t a1)
{
  return sub_10003859C(a1, qword_1001AB4A8);
}

uint64_t sub_1000FE12C()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_1000FE1E0()
{
}

uint64_t sub_1000FE1F8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1000FE2CC(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100044E1C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100044E1C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_100007584((uint64_t)v12);
  return v7;
}

uint64_t sub_1000FE2CC(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_1000FE488(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_1000FE488(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_1000FE520(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000FE700(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1000FE700(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_1000FE520(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_1000FE698(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_1000FE698(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_10000570C(&qword_1001AB548);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1000FE700(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000570C(&qword_1001AB548);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000FE858()
{
  return sub_1000FB83C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1000FE87C()
{
  *(unsigned char *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__status) = *(unsigned char *)(v0 + 24);
}

unint64_t sub_1000FE894()
{
  unint64_t result = qword_1001A6960;
  if (!qword_1001A6960)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001A6960);
  }
  return result;
}

uint64_t sub_1000FE8D4()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

void sub_1000FE9A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for URL();
  uint64_t v7 = *(void *)(v3 + 16);

  sub_1000FD200(a1, a2, a3, v7);
}

uint64_t sub_1000FEA34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000FEA44()
{
  return swift_release();
}

uint64_t sub_1000FEA54()
{
  return sub_1000FB2E4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1000FEA70(uint64_t *a1)
{
  sub_1000FD26C(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

double sub_1000FEA9C()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + 16) = result;
  return result;
}

uint64_t sub_1000FEAAC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000FEAF4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000570C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

void sub_1000FEB58()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__player);
  *(void *)(v1 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer__player) = v2;
  id v4 = v2;
}

_OWORD *sub_1000FEB98(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_1000FEBA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return;
  }
  uint64_t v5 = v4;
  if ((a1 != 1702125938 || a2 != 0xE400000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return;
  }
  if (!a4 || !*(void *)(a4 + 16))
  {
    long long v16 = 0u;
    long long v17 = 0u;
    goto LABEL_17;
  }
  uint64_t v7 = NSKeyValueChangeNewKey;
  unint64_t v8 = sub_1000B831C((uint64_t)v7);
  if ((v9 & 1) == 0)
  {
    long long v16 = 0u;
    long long v17 = 0u;

    goto LABEL_17;
  }
  sub_100044E1C(*(void *)(a4 + 56) + 32 * v8, (uint64_t)&v16);

  if (!*((void *)&v17 + 1))
  {
LABEL_17:
    sub_10000ACE0((uint64_t)&v16, (uint64_t *)&unk_1001A9610);
    return;
  }
  if (swift_dynamicCast())
  {
    if ((*(void *)&v15 & 0x7FFFFFFFFFFFFFFFLL) == 0)
    {
      uint64_t v10 = *(os_unfair_lock_s **)(v5 + OBJC_IVAR____TtC16EventViewService18MusicPreviewPlayer_lock);
      size_t v11 = (uint64_t *)&v10[4];
      uint64_t v12 = v10 + 6;
      os_unfair_lock_lock(v10 + 6);
      sub_1000FB8B0(v11, (double *)&v16);
      os_unfair_lock_unlock(v12);
      if ((~(void)v16 & 0x7FF0000000000000) != 0 || (v16 & 0xFFFFFFFFFFFFFLL) == 0)
      {
        os_unfair_lock_lock(v12);
        sub_1000FB8B0(v11, (double *)&v16);
        os_unfair_lock_unlock(v12);
        if (*(double *)&v16 > 0.0) {
          goto LABEL_20;
        }
      }
    }
    if (v15 != 0.0)
    {
LABEL_20:
      uint64_t KeyPath = swift_getKeyPath();
      __chkstk_darwin(KeyPath, v14);
      *(void *)&long long v16 = v5;
      sub_1000FEAAC(&qword_1001AB540, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
    }
  }
}

uint64_t sub_1000FEEBC()
{
  return sub_1000FEA54();
}

uint64_t sub_1000FEED4()
{
  return sub_1000FE858();
}

void sub_1000FEEEC()
{
}

double sub_1000FEF04()
{
  return sub_1000FEA9C();
}

uint64_t sub_1000FEF1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = a1;
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = a3;
  *(void *)(a5 + 24) = a4;
  State.init(wrappedValue:)();
  *(unsigned char *)(a5 + 32) = v7;
  *(void *)(a5 + 40) = v8;
  type metadata accessor for PhoneWallpapersWatchFacesView();
  swift_getWitnessTable();
  Bindable<A>.init(wrappedValue:)();
  swift_getWitnessTable();
  return Bindable<A>.init(wrappedValue:)();
}

uint64_t type metadata accessor for PhoneWallpapersWatchFacesView()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1000FF0DC()
{
  type metadata accessor for PhoneWallpaperViewModel();
  type metadata accessor for Bindable();
  Bindable.wrappedValue.getter();
  return v1;
}

unsigned char *storeEnumTagSinglePayload for PhoneWallpapersWatchFacesConfiguration(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000FF1FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhoneWallpapersWatchFacesConfiguration()
{
  return &type metadata for PhoneWallpapersWatchFacesConfiguration;
}

uint64_t sub_1000FF234()
{
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t result = type metadata accessor for Bindable();
  if (v1 <= 0x3F)
  {
    type metadata accessor for WatchFacesViewModel();
    uint64_t result = type metadata accessor for Bindable();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *sub_1000FF33C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(void *)(a1 + 40) = a2[5];
    uint64_t v9 = *(int *)(a3 + 60);
    uint64_t v19 = a1 + v9;
    uint64_t v10 = (uint64_t)a2 + v9;
    type metadata accessor for PhoneWallpaperViewModel();
    uint64_t v11 = type metadata accessor for Bindable();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    v12(v19, v10, v11);
    uint64_t v13 = *(int *)(a3 + 64);
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (uint64_t)a2 + v13;
    type metadata accessor for WatchFacesViewModel();
    uint64_t v16 = type metadata accessor for Bindable();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return v4;
}

uint64_t sub_1000FF4D8(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 60);
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v5 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 64);
  type metadata accessor for WatchFacesViewModel();
  uint64_t v7 = type metadata accessor for Bindable();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);

  return v8(v6, v7);
}

uint64_t sub_1000FF5D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v8 = *(int *)(a3 + 60);
  uint64_t v17 = a1 + v8;
  uint64_t v9 = a2 + v8;
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v10 = type metadata accessor for Bindable();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v11(v17, v9, v10);
  uint64_t v12 = *(int *)(a3 + 64);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  type metadata accessor for WatchFacesViewModel();
  uint64_t v15 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t sub_1000FF71C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(a3 + 60);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v9 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 64);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  type metadata accessor for WatchFacesViewModel();
  uint64_t v13 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *sub_1000FF870(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = *(int *)(a3 + 60);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v10 = type metadata accessor for Bindable();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 64);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  type metadata accessor for WatchFacesViewModel();
  uint64_t v14 = type metadata accessor for Bindable();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t sub_1000FF974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  uint64_t v8 = *(int *)(a3 + 60);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v11 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = *(int *)(a3 + 64);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  type metadata accessor for WatchFacesViewModel();
  uint64_t v15 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_1000FFAA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000FFAB4);
}

uint64_t sub_1000FFAB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for PhoneWallpaperViewModel();
    uint64_t v8 = type metadata accessor for Bindable();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 60);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      type metadata accessor for WatchFacesViewModel();
      uint64_t v13 = type metadata accessor for Bindable();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 64);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_1000FFC08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000FFC1C);
}

uint64_t sub_1000FFC1C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    type metadata accessor for PhoneWallpaperViewModel();
    uint64_t v8 = type metadata accessor for Bindable();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 60);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      type metadata accessor for WatchFacesViewModel();
      uint64_t v13 = type metadata accessor for Bindable();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 64);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

unint64_t sub_1000FFD74()
{
  unint64_t result = qword_1001AB5E8;
  if (!qword_1001AB5E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB5E8);
  }
  return result;
}

uint64_t sub_1000FFDC8()
{
  type metadata accessor for WatchFacesViewModel();
  type metadata accessor for Bindable();
  Bindable.wrappedValue.getter();
  return v1;
}

uint64_t sub_1000FFE1C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v3 = a1[4];
  uint64_t v25 = a1[2];
  uint64_t v26 = v3;
  type metadata accessor for PhoneWallpaperView();
  uint64_t v4 = a1[3];
  uint64_t v24 = a1[5];
  type metadata accessor for WatchFacesView();
  type metadata accessor for _ConditionalContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for VStack();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v23 - v8;
  sub_100004A58(&qword_1001AB5F0);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)&v23 - v17;
  uint64_t v29 = v25;
  uint64_t v30 = v4;
  uint64_t v31 = v26;
  uint64_t v32 = v24;
  uint64_t v33 = v27;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  static Alignment.center.getter();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_10002C464();
  View.background<A>(_:alignment:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t v20 = sub_10000A780(&qword_1001AB5F8, &qword_1001AB5F0);
  uint64_t v34 = WitnessTable;
  uint64_t v35 = v20;
  swift_getWitnessTable();
  sub_1001221F0(v15, v10);
  CMTimeFlags v21 = *(void (**)(char *, uint64_t))(v11 + 8);
  v21(v15, v10);
  sub_1001221F0(v18, v10);
  return ((uint64_t (*)(char *, uint64_t))v21)(v18, v10);
}

uint64_t sub_10010017C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v80 = a6;
  uint64_t v11 = type metadata accessor for Optional();
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v61 = (char *)&v58 - v13;
  uint64_t v66 = a5;
  uint64_t v14 = type metadata accessor for WatchFacesView();
  uint64_t v64 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14, v15);
  uint64_t v63 = (uint64_t)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v18);
  uint64_t v62 = (char *)&v58 - v19;
  uint64_t v20 = type metadata accessor for Optional();
  __chkstk_darwin(v20 - 8, v21);
  CMTime v58 = (char *)&v58 - v22;
  uint64_t v23 = a4;
  uint64_t v24 = type metadata accessor for PhoneWallpaperView();
  uint64_t v60 = *(void *)(v24 - 8);
  uint64_t v26 = __chkstk_darwin(v24, v25);
  uint64_t v28 = (char *)&v58 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26, v29);
  uint64_t v59 = (char *)&v58 - v30;
  uint64_t v81 = v14;
  uint64_t v31 = type metadata accessor for _ConditionalContent();
  uint64_t v78 = *(void *)(v31 - 8);
  uint64_t v79 = v31;
  uint64_t v33 = __chkstk_darwin(v31, v32);
  uint64_t v77 = (char *)&v58 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33, v35);
  unint64_t v74 = (char *)&v58 - v36;
  uint64_t v37 = (char *)a1[1];
  uint64_t v70 = *a1;
  uint64_t v38 = a1[3];
  uint64_t v69 = a1[2];
  uint64_t v40 = (char *)a1[5];
  LOBYTE(v96) = *((unsigned char *)a1 + 32);
  char v39 = (char)v96;
  long long v97 = v40;
  uint64_t v75 = v38;
  swift_bridgeObjectRetain();
  uint64_t v76 = v37;
  swift_bridgeObjectRetain();
  sub_10000570C(&qword_1001AB600);
  State.projectedValue.getter();
  uint64_t v73 = v87;
  uint64_t v67 = v88;
  int v68 = v89;
  type metadata accessor for RemoteViewConfiguration();
  sub_100103074((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  uint64_t v72 = EnvironmentObject.init()();
  uint64_t v65 = v41;
  LOBYTE(v87) = v39;
  uint64_t v88 = v40;
  State.wrappedValue.getter();
  uint64_t v71 = v24;
  uint64_t v87 = a2;
  uint64_t v88 = a3;
  uint64_t v89 = v23;
  uint64_t v90 = v66;
  if (v96)
  {
    type metadata accessor for PhoneWallpapersWatchFacesView();
    sub_1000FFDC8();
    uint64_t v42 = (uint64_t)v61;
    (*(void (**)(char *, uint64_t, uint64_t, char *))(*((void *)a3 - 1) + 56))(v61, 1, 1, a3);
    uint64_t v43 = v63;
    sub_10002B480(v42, v63);
    uint64_t v44 = v81;
    swift_getWitnessTable();
    uint64_t v45 = v62;
    sub_1001221F0(v43, v44);
    uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
    v46(v43, v44);
    sub_1001221F0(v45, v44);
    swift_getWitnessTable();
    uint64_t v47 = v74;
    sub_100122324(v43, v24, v44);
    v46(v43, v44);
    v46((uint64_t)v45, v44);
  }
  else
  {
    type metadata accessor for PhoneWallpapersWatchFacesView();
    sub_1000FF0DC();
    uint64_t v48 = (uint64_t)v58;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(v58, 1, 1, a2);
    sub_10013FCA8(v48, (uint64_t)v28);
    swift_getWitnessTable();
    uint64_t v49 = v59;
    sub_1001221F0(v28, v24);
    id v50 = *(void (**)(char *, uint64_t))(v60 + 8);
    v50(v28, v24);
    sub_1001221F0(v49, v24);
    swift_getWitnessTable();
    uint64_t v47 = v74;
    sub_10012222C((uint64_t)v28, v24);
    v50(v28, v24);
    v50(v49, v24);
  }
  uint64_t v87 = v70;
  uint64_t v88 = v76;
  uint64_t v89 = v69;
  uint64_t v90 = v75;
  uint64_t v91 = v73;
  uint64_t v92 = v67;
  char v93 = v68;
  uint64_t v94 = v72;
  uint64_t v95 = v65;
  long long v96 = &v87;
  uint64_t v52 = v78;
  uint64_t v51 = v79;
  unint64_t v53 = v77;
  (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v77, v47, v79);
  long long v97 = v53;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v86[0] = &type metadata for PhoneWallpapersWatchFacesHeader;
  v86[1] = v51;
  unint64_t v84 = sub_1001029F0();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v55 = swift_getWitnessTable();
  uint64_t v82 = WitnessTable;
  uint64_t v83 = v55;
  uint64_t v85 = swift_getWitnessTable();
  sub_1001231A4((uint64_t)&v96, 2uLL, (uint64_t)v86);
  uint64_t v56 = *(void (**)(char *, uint64_t))(v52 + 8);
  v56(v47, v51);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v56(v53, v51);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t sub_100100A20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000570C(&qword_1001AB610);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000570C(&qword_1001AB618);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000570C(&qword_1001AB620);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000570C(&qword_1001AB628);
  uint64_t v18 = v17 - 8;
  __chkstk_darwin(v17, v19);
  uint64_t v21 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v7 = static HorizontalAlignment.leading.getter();
  *((void *)v7 + 1) = 0;
  v7[16] = 0;
  uint64_t v22 = sub_10000570C(&qword_1001AB630);
  sub_100100D44(v2, (uint64_t)&v7[*(int *)(v22 + 44)]);
  uint64_t v23 = static Alignment.leading.getter();
  sub_100124D88(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v11, 0.0, 1, 0.0, 1, v23, v24);
  sub_10000ACE0((uint64_t)v7, &qword_1001AB610);
  LOBYTE(v7) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  sub_10000A428((uint64_t)v11, (uint64_t)v16, &qword_1001AB618);
  uint64_t v33 = &v16[*(int *)(v13 + 44)];
  *uint64_t v33 = (char)v7;
  *((void *)v33 + 1) = v26;
  *((void *)v33 + 2) = v28;
  *((void *)v33 + 3) = v30;
  *((void *)v33 + 4) = v32;
  v33[40] = 0;
  sub_10000ACE0((uint64_t)v11, &qword_1001AB618);
  LOBYTE(v7) = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  sub_10000A428((uint64_t)v16, (uint64_t)v21, &qword_1001AB620);
  uint64_t v42 = &v21[*(int *)(v18 + 44)];
  *uint64_t v42 = (char)v7;
  *((void *)v42 + 1) = v35;
  *((void *)v42 + 2) = v37;
  *((void *)v42 + 3) = v39;
  *((void *)v42 + 4) = v41;
  v42[40] = 0;
  sub_10000ACE0((uint64_t)v16, &qword_1001AB620);
  LOBYTE(v7) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  sub_10000A428((uint64_t)v21, a1, &qword_1001AB628);
  uint64_t v51 = a1 + *(int *)(sub_10000570C(&qword_1001AB638) + 36);
  *(unsigned char *)uint64_t v51 = (_BYTE)v7;
  *(void *)(v51 + 8) = v44;
  *(void *)(v51 + 16) = v46;
  *(void *)(v51 + 24) = v48;
  *(void *)(v51 + 32) = v50;
  *(unsigned char *)(v51 + 40) = 0;
  return sub_10000ACE0((uint64_t)v21, &qword_1001AB628);
}

uint64_t sub_100100D44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000570C(&qword_1001AB640);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v78 = (uint64_t *)((char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v77 = sub_10000570C(&qword_1001AB648);
  uint64_t v8 = __chkstk_darwin(v77, v7);
  uint64_t v79 = (uint64_t)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  uint64_t v91 = (uint64_t)&v73 - v11;
  long long v100 = *(_OWORD *)(a1 + 32);
  char v101 = *(unsigned char *)(a1 + 48);
  long long v97 = *(_OWORD *)(a1 + 32);
  char v98 = *(unsigned char *)(a1 + 48);
  sub_10000570C(&qword_1001AB650);
  Binding.wrappedValue.getter();
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v12 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  static Font.title2.getter();
  static Font.Weight.bold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v89 = Text.font(_:)();
  uint64_t v95 = v17;
  int v19 = v18;
  uint64_t v90 = v20;
  swift_release();
  sub_10000FCC4(v12, v14, v16);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v88 = swift_getKeyPath();
  sub_10000A3C4(a1 + 16, (uint64_t)v99, (uint64_t *)&unk_1001A8B80);
  sub_10000A3C4((uint64_t)v99, (uint64_t)&v102, (uint64_t *)&unk_1001A8B80);
  uint64_t v21 = v103;
  if (v103)
  {
    LODWORD(v74) = v19;
    uint64_t v80 = a1;
    uint64_t v22 = v102;
    long long v97 = v100;
    char v98 = v101;
    Binding.wrappedValue.getter();
    sub_100101570(v22, v21, v96);
    uint64_t v23 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v25 = v24;
    char v27 = v26 & 1;
    static Font.subheadline.getter();
    static Font.Weight.regular.getter();
    Font.weight(_:)();
    swift_release();
    uint64_t v28 = Text.font(_:)();
    uint64_t v30 = v29;
    char v32 = v31;
    swift_release();
    sub_10000FCC4(v23, v25, v27);
    swift_bridgeObjectRelease();
    if (qword_1001A4E40 != -1) {
      swift_once();
    }
    *(void *)&long long v97 = qword_1001B74E0;
    swift_retain();
    uint64_t v87 = Text.foregroundStyle<A>(_:)();
    uint64_t v86 = v33;
    uint64_t v85 = v34;
    uint64_t v81 = v35 & 1;
    sub_10000FCC4(v28, v30, v32 & 1);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v84 = swift_getKeyPath();
    uint64_t v83 = swift_getKeyPath();
    unsigned __int8 v36 = static Edge.Set.top.getter();
    EdgeInsets.init(_all:)();
    uint64_t v82 = v37;
    uint64_t v93 = v38;
    uint64_t v76 = v39;
    uint64_t v75 = v40;
    uint64_t v92 = v36;
    uint64_t v41 = 2;
    a1 = v80;
    LOBYTE(v19) = v74;
  }
  else
  {
    uint64_t v87 = 0;
    uint64_t v86 = 0;
    uint64_t v81 = 0;
    uint64_t v85 = 0;
    uint64_t v84 = 0;
    uint64_t v41 = 0;
    uint64_t v83 = 0;
    uint64_t v92 = 0;
    uint64_t v82 = 0;
    uint64_t v93 = 0;
    uint64_t v76 = 0;
    uint64_t v75 = 0;
  }
  char v42 = v19 & 1;
  LODWORD(v80) = v19 & 1;
  uint64_t v43 = static VerticalAlignment.center.getter();
  uint64_t v44 = (uint64_t)v78;
  *uint64_t v78 = v43;
  *(void *)(v44 + 8) = 0x4020000000000000;
  *(unsigned char *)(v44 + 16) = 0;
  uint64_t v45 = sub_10000570C(&qword_1001AB658);
  sub_100101670(a1, (char *)(v44 + *(int *)(v45 + 44)));
  char v46 = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  uint64_t v52 = v51;
  uint64_t v54 = v53;
  uint64_t v55 = v79;
  sub_10000A428(v44, v79, &qword_1001AB640);
  uint64_t v56 = v55 + *(int *)(v77 + 36);
  *(unsigned char *)uint64_t v56 = v46;
  *(void *)(v56 + 8) = v48;
  *(void *)(v56 + 16) = v50;
  *(void *)(v56 + 24) = v52;
  *(void *)(v56 + 32) = v54;
  *(unsigned char *)(v56 + 40) = 0;
  sub_10000ACE0(v44, &qword_1001AB640);
  uint64_t v57 = v91;
  sub_10000A3C4(v55, v91, &qword_1001AB648);
  sub_10000A428(v57, v55, &qword_1001AB648);
  uint64_t v58 = v89;
  uint64_t v59 = v95;
  *(void *)a2 = v89;
  *(void *)(a2 + 8) = v59;
  *(unsigned char *)(a2 + 16) = v42;
  uint64_t v60 = KeyPath;
  *(void *)(a2 + 24) = v90;
  *(void *)(a2 + 32) = v60;
  *(void *)(a2 + 40) = 2;
  *(unsigned char *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = v88;
  *(unsigned char *)(a2 + 64) = 0;
  uint64_t v61 = v86;
  *(void *)(a2 + 72) = v87;
  *(void *)(a2 + 80) = v61;
  uint64_t v62 = v85;
  *(void *)(a2 + 88) = v81;
  *(void *)(a2 + 96) = v62;
  *(void *)(a2 + 104) = v84;
  *(void *)(a2 + 112) = v41;
  uint64_t v63 = v83;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = v63;
  uint64_t v64 = v92;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = v64;
  uint64_t v92 = v64;
  uint64_t v74 = v41;
  uint64_t v65 = v93;
  *(void *)(a2 + 152) = v82;
  *(void *)(a2 + 160) = v65;
  uint64_t v93 = v65;
  uint64_t v66 = v75;
  *(void *)(a2 + 168) = v76;
  *(void *)(a2 + 176) = v66;
  *(unsigned char *)(a2 + 184) = 0;
  uint64_t v67 = sub_10000570C(&qword_1001AB660);
  sub_10000A428(v55, a2 + *(int *)(v67 + 64), &qword_1001AB648);
  sub_10000FCD4(v58, v95, v80);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v68 = v87;
  uint64_t v69 = v86;
  char v70 = v81;
  uint64_t v71 = v85;
  sub_100048730(v87, v86, v81, v85);
  sub_10000ACE0(v91, &qword_1001AB648);
  sub_10000ACE0(v55, &qword_1001AB648);
  sub_100048794(v68, v69, v70, v71);
  sub_10000FCC4(v89, v95, v80);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100101570(uint64_t a1, void *a2, char a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v6 - 8, v7);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  if (a3)
  {
    unint64_t v9 = 0x800000010015F760;
    unint64_t v8 = 0xD000000000000029;
  }
  else
  {
    unint64_t v8 = 0xD00000000000002DLL;
    unint64_t v9 = 0x800000010015F790;
  }
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&v8);
  v10._countAndFlagsBits = a1;
  v10._object = a2;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v10);
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v11);
  return LocalizedStringKey.init(stringInterpolation:)();
}

uint64_t sub_100101670@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v58 = a2;
  uint64_t v55 = type metadata accessor for PlainButtonStyle();
  uint64_t v60 = *(void *)(v55 - 8);
  __chkstk_darwin(v55, v3);
  uint64_t v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000570C(&qword_1001AB668);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  Swift::String v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000570C(&qword_1001AB670);
  uint64_t v52 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v57 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v56 = (char *)&v45 - v17;
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v21 = (char *)&v45 - v20;
  __chkstk_darwin(v19, v22);
  uint64_t v59 = (char *)&v45 - v23;
  uint64_t v24 = swift_allocObject();
  long long v25 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v24 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v24 + 64) = v25;
  *(void *)(v24 + 80) = *(void *)(a1 + 64);
  long long v26 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v24 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v24 + 32) = v26;
  uint64_t v62 = a1;
  sub_100102E00(a1);
  uint64_t v54 = sub_10000570C(&qword_1001AB678);
  unint64_t v53 = sub_100102E68();
  Button.init(action:label:)();
  PlainButtonStyle.init()();
  uint64_t v51 = sub_10000A780(&qword_1001AB6B8, &qword_1001AB668);
  uint64_t v50 = sub_100103074(&qword_1001A62B8, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
  char v27 = v21;
  uint64_t v45 = v21;
  uint64_t v28 = v55;
  View.buttonStyle<A>(_:)();
  uint64_t v29 = *(void (**)(char *, uint64_t))(v60 + 8);
  v60 += 8;
  uint64_t v49 = v29;
  v29(v5, v28);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v47 = v7 + 8;
  uint64_t v48 = v30;
  v30(v10, v6);
  uint64_t v31 = v52;
  char v46 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
  v46(v59, v27, v11);
  uint64_t v32 = swift_allocObject();
  long long v33 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v32 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v32 + 64) = v33;
  *(void *)(v32 + 80) = *(void *)(a1 + 64);
  long long v34 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v32 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v32 + 32) = v34;
  uint64_t v61 = a1;
  sub_100102E00(a1);
  Button.init(action:label:)();
  PlainButtonStyle.init()();
  char v35 = v56;
  View.buttonStyle<A>(_:)();
  v49(v5, v28);
  v48(v10, v6);
  unsigned __int8 v36 = v45;
  v46(v45, v35, v11);
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
  uint64_t v38 = v35;
  uint64_t v39 = v59;
  v37(v35, v59, v11);
  uint64_t v40 = v57;
  v37(v57, v36, v11);
  uint64_t v41 = v58;
  v37(v58, v38, v11);
  uint64_t v42 = sub_10000570C(&qword_1001AB6C0);
  v37(&v41[*(int *)(v42 + 48)], v40, v11);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v31 + 8);
  v43(v36, v11);
  v43(v39, v11);
  v43(v40, v11);
  return ((uint64_t (*)(char *, uint64_t))v43)(v38, v11);
}

uint64_t sub_100101C1C(uint64_t *a1)
{
  sub_10000570C(&qword_1001AB650);
  Binding.wrappedValue.setter();
  uint64_t v2 = a1[7];
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    swift_retain();
    sub_100116F94(v3, v4, 8, 10, 19, 0, 3u, v2);
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100103074((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100101D18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v83 = a2;
  uint64_t v80 = sub_10000570C(&qword_1001A62A8);
  __chkstk_darwin(v80, v3);
  uint64_t v82 = (uint64_t)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v78, v5);
  uint64_t v81 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_10000570C(&qword_1001AB678);
  __chkstk_darwin(v79, v7);
  uint64_t v9 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v10 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v12 = v11;
  char v14 = v13 & 1;
  static Font.footnote.getter();
  static Font.Weight.semibold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v15 = Text.font(_:)();
  uint64_t v17 = v16;
  LODWORD(v77) = v18;
  uint64_t v74 = v19;
  swift_release();
  sub_10000FCC4(v10, v12, v14);
  swift_bridgeObjectRelease();
  long long v103 = *(_OWORD *)(a1 + 32);
  char v104 = *(unsigned char *)(a1 + 48);
  long long v88 = *(_OWORD *)(a1 + 32);
  LOBYTE(v89) = *(unsigned char *)(a1 + 48);
  sub_10000570C(&qword_1001AB650);
  Binding.wrappedValue.getter();
  if (v102)
  {
    uint64_t v20 = static Color.primary.getter();
  }
  else
  {
    if (qword_1001A4E30 != -1) {
      swift_once();
    }
    uint64_t v20 = qword_1001B74D0;
    swift_retain();
  }
  *(void *)&long long v88 = v20;
  char v21 = v77 & 1;
  uint64_t v22 = Text.foregroundStyle<A>(_:)();
  uint64_t v76 = v23;
  uint64_t v77 = v22;
  char v25 = v24;
  uint64_t v75 = v26;
  sub_10000FCC4(v15, v17, v21);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  char v28 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v73 = v30;
  uint64_t v74 = v29;
  uint64_t v71 = v32;
  uint64_t v72 = v31;
  char v33 = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  char v42 = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  long long v88 = v103;
  LOBYTE(v89) = v104;
  Binding.wrappedValue.getter();
  if (v102)
  {
    if (qword_1001A4E30 != -1) {
      swift_once();
    }
    uint64_t v51 = qword_1001B74D0;
    swift_retain();
  }
  else
  {
    uint64_t v51 = static Color.primary.getter();
  }
  char v87 = v25 & 1;
  char v86 = 0;
  char v85 = 0;
  char v84 = 0;
  char v102 = 0;
  char v52 = static Edge.Set.all.getter();
  *(void *)&long long v88 = v77;
  *((void *)&v88 + 1) = v76;
  LOBYTE(v89) = v25 & 1;
  *((void *)&v89 + 1) = v75;
  *(void *)&long long v90 = KeyPath;
  *((void *)&v90 + 1) = 1;
  LOBYTE(v91) = 0;
  BYTE8(v91) = v28;
  *(void *)&long long v92 = v74;
  *((void *)&v92 + 1) = v73;
  *(void *)&long long v93 = v72;
  *((void *)&v93 + 1) = v71;
  LOBYTE(v94) = 0;
  BYTE8(v94) = v33;
  *(void *)&long long v95 = v35;
  *((void *)&v95 + 1) = v37;
  *(void *)&long long v96 = v39;
  *((void *)&v96 + 1) = v41;
  LOBYTE(v97) = 0;
  BYTE8(v97) = v42;
  *(void *)&long long v98 = v44;
  *((void *)&v98 + 1) = v46;
  *(void *)&long long v99 = v48;
  *((void *)&v99 + 1) = v50;
  LOBYTE(v100) = v102;
  *((void *)&v100 + 1) = v51;
  char v101 = v52;
  unint64_t v53 = v81;
  uint64_t v54 = &v81[*(int *)(v78 + 20)];
  uint64_t v55 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v56 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v56 - 8) + 104))(v54, v55, v56);
  __asm { FMOV            V0.2D, #16.0 }
  _OWORD *v53 = _Q0;
  uint64_t v62 = v82;
  sub_1000243EC((uint64_t)v53, v82);
  *(_WORD *)(v62 + *(int *)(v80 + 36)) = 256;
  sub_10000A428(v62, (uint64_t)&v9[*(int *)(v79 + 36)], &qword_1001A62A8);
  long long v63 = v99;
  *((_OWORD *)v9 + 10) = v98;
  *((_OWORD *)v9 + 11) = v63;
  *((_OWORD *)v9 + 12) = v100;
  v9[208] = v101;
  long long v64 = v95;
  *((_OWORD *)v9 + 6) = v94;
  *((_OWORD *)v9 + 7) = v64;
  long long v65 = v97;
  *((_OWORD *)v9 + 8) = v96;
  *((_OWORD *)v9 + 9) = v65;
  long long v66 = v91;
  *((_OWORD *)v9 + 2) = v90;
  *((_OWORD *)v9 + 3) = v66;
  long long v67 = v93;
  *((_OWORD *)v9 + 4) = v92;
  *((_OWORD *)v9 + 5) = v67;
  long long v68 = v89;
  *(_OWORD *)uint64_t v9 = v88;
  *((_OWORD *)v9 + 1) = v68;
  sub_100103128((uint64_t)&v88);
  sub_10000ACE0(v62, &qword_1001A62A8);
  sub_100024450((uint64_t)v53);
  sub_100103184((uint64_t)&v88);
  return sub_10000A3C4((uint64_t)v9, v83, &qword_1001AB678);
}

uint64_t sub_1001022B4(uint64_t *a1)
{
  sub_10000570C(&qword_1001AB650);
  Binding.wrappedValue.setter();
  uint64_t v2 = a1[7];
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    swift_retain();
    sub_100116F94(v3, v4, 8, 10, 20, 0, 3u, v2);
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100103074((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1001023B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v83 = a2;
  uint64_t v80 = sub_10000570C(&qword_1001A62A8);
  __chkstk_darwin(v80, v3);
  uint64_t v82 = (uint64_t)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v78, v5);
  uint64_t v81 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_10000570C(&qword_1001AB678);
  __chkstk_darwin(v79, v7);
  uint64_t v9 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v10 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v12 = v11;
  char v14 = v13 & 1;
  static Font.footnote.getter();
  static Font.Weight.semibold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v15 = Text.font(_:)();
  uint64_t v17 = v16;
  LODWORD(v77) = v18;
  uint64_t v74 = v19;
  swift_release();
  sub_10000FCC4(v10, v12, v14);
  swift_bridgeObjectRelease();
  long long v103 = *(_OWORD *)(a1 + 32);
  char v104 = *(unsigned char *)(a1 + 48);
  long long v88 = *(_OWORD *)(a1 + 32);
  LOBYTE(v89) = *(unsigned char *)(a1 + 48);
  sub_10000570C(&qword_1001AB650);
  Binding.wrappedValue.getter();
  if (v102 == 1)
  {
    if (qword_1001A4E30 != -1) {
      swift_once();
    }
    uint64_t v20 = qword_1001B74D0;
    swift_retain();
  }
  else
  {
    uint64_t v20 = static Color.primary.getter();
  }
  *(void *)&long long v88 = v20;
  char v21 = v77 & 1;
  uint64_t v22 = Text.foregroundStyle<A>(_:)();
  uint64_t v76 = v23;
  uint64_t v77 = v22;
  char v25 = v24;
  uint64_t v75 = v26;
  sub_10000FCC4(v15, v17, v21);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  char v28 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v73 = v30;
  uint64_t v74 = v29;
  uint64_t v71 = v32;
  uint64_t v72 = v31;
  char v33 = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  char v42 = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  long long v88 = v103;
  LOBYTE(v89) = v104;
  Binding.wrappedValue.getter();
  if (v102 == 1)
  {
    uint64_t v51 = static Color.primary.getter();
  }
  else
  {
    if (qword_1001A4E30 != -1) {
      swift_once();
    }
    uint64_t v51 = qword_1001B74D0;
    swift_retain();
  }
  char v87 = v25 & 1;
  char v86 = 0;
  char v85 = 0;
  char v84 = 0;
  char v102 = 0;
  char v52 = static Edge.Set.all.getter();
  *(void *)&long long v88 = v77;
  *((void *)&v88 + 1) = v76;
  LOBYTE(v89) = v25 & 1;
  *((void *)&v89 + 1) = v75;
  *(void *)&long long v90 = KeyPath;
  *((void *)&v90 + 1) = 1;
  LOBYTE(v91) = 0;
  BYTE8(v91) = v28;
  *(void *)&long long v92 = v74;
  *((void *)&v92 + 1) = v73;
  *(void *)&long long v93 = v72;
  *((void *)&v93 + 1) = v71;
  LOBYTE(v94) = 0;
  BYTE8(v94) = v33;
  *(void *)&long long v95 = v35;
  *((void *)&v95 + 1) = v37;
  *(void *)&long long v96 = v39;
  *((void *)&v96 + 1) = v41;
  LOBYTE(v97) = 0;
  BYTE8(v97) = v42;
  *(void *)&long long v98 = v44;
  *((void *)&v98 + 1) = v46;
  *(void *)&long long v99 = v48;
  *((void *)&v99 + 1) = v50;
  LOBYTE(v100) = v102;
  *((void *)&v100 + 1) = v51;
  char v101 = v52;
  unint64_t v53 = v81;
  uint64_t v54 = &v81[*(int *)(v78 + 20)];
  uint64_t v55 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v56 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v56 - 8) + 104))(v54, v55, v56);
  __asm { FMOV            V0.2D, #16.0 }
  _OWORD *v53 = _Q0;
  uint64_t v62 = v82;
  sub_1000243EC((uint64_t)v53, v82);
  *(_WORD *)(v62 + *(int *)(v80 + 36)) = 256;
  sub_10000A428(v62, (uint64_t)&v9[*(int *)(v79 + 36)], &qword_1001A62A8);
  long long v63 = v99;
  *((_OWORD *)v9 + 10) = v98;
  *((_OWORD *)v9 + 11) = v63;
  *((_OWORD *)v9 + 12) = v100;
  v9[208] = v101;
  long long v64 = v95;
  *((_OWORD *)v9 + 6) = v94;
  *((_OWORD *)v9 + 7) = v64;
  long long v65 = v97;
  *((_OWORD *)v9 + 8) = v96;
  *((_OWORD *)v9 + 9) = v65;
  long long v66 = v91;
  *((_OWORD *)v9 + 2) = v90;
  *((_OWORD *)v9 + 3) = v66;
  long long v67 = v93;
  *((_OWORD *)v9 + 4) = v92;
  *((_OWORD *)v9 + 5) = v67;
  long long v68 = v89;
  *(_OWORD *)uint64_t v9 = v88;
  *((_OWORD *)v9 + 1) = v68;
  sub_100103128((uint64_t)&v88);
  sub_10000ACE0(v62, &qword_1001A62A8);
  sub_100024450((uint64_t)v53);
  sub_100103184((uint64_t)&v88);
  return sub_10000A3C4((uint64_t)v9, v83, &qword_1001AB678);
}

uint64_t sub_100102958@<X0>(uint64_t a1@<X8>)
{
  return sub_100100A20(a1);
}

uint64_t sub_10010299C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1001029E0@<X0>(uint64_t a1@<X8>)
{
  return sub_10010017C(*(uint64_t **)(v1 + 48), *(void *)(v1 + 16), *(char **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

unint64_t sub_1001029F0()
{
  unint64_t result = qword_1001AB608;
  if (!qword_1001AB608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB608);
  }
  return result;
}

uint64_t destroy for PhoneWallpapersWatchFacesHeader()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for PhoneWallpapersWatchFacesHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PhoneWallpapersWatchFacesHeader(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for PhoneWallpapersWatchFacesHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

ValueMetadata *type metadata accessor for PhoneWallpapersWatchFacesHeader()
{
  return &type metadata for PhoneWallpapersWatchFacesHeader;
}

uint64_t sub_100102C78()
{
  return swift_getWitnessTable();
}

uint64_t sub_100102DC0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100102DF0()
{
  return sub_100101C1C((uint64_t *)(v0 + 16));
}

uint64_t sub_100102DF8@<X0>(uint64_t a1@<X8>)
{
  return sub_100101D18(*(void *)(v1 + 16), a1);
}

uint64_t sub_100102E00(uint64_t a1)
{
  return a1;
}

unint64_t sub_100102E68()
{
  unint64_t result = qword_1001AB680;
  if (!qword_1001AB680)
  {
    sub_100004A58(&qword_1001AB678);
    sub_100102F08();
    sub_10000A780(&qword_1001A62A0, &qword_1001A62A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB680);
  }
  return result;
}

unint64_t sub_100102F08()
{
  unint64_t result = qword_1001AB688;
  if (!qword_1001AB688)
  {
    sub_100004A58(&qword_1001AB690);
    sub_100102FF4(&qword_1001AB698, &qword_1001AB6A0, (void (*)(void))sub_100102FCC);
    sub_10000A780(&qword_1001A6290, &qword_1001A6298);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB688);
  }
  return result;
}

uint64_t sub_100102FCC()
{
  return sub_100102FF4(&qword_1001AB6A8, &qword_1001AB6B0, (void (*)(void))sub_1000B0434);
}

uint64_t sub_100102FF4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100103074(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001030C0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100103118()
{
  return sub_1001022B4((uint64_t *)(v0 + 16));
}

uint64_t sub_100103120@<X0>(uint64_t a1@<X8>)
{
  return sub_1001023B4(*(void *)(v1 + 16), a1);
}

uint64_t sub_100103128(uint64_t a1)
{
  return a1;
}

uint64_t sub_100103184(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001031E0()
{
  return sub_100102FF4(&qword_1001AB6C8, &qword_1001AB638, (void (*)(void))sub_10010321C);
}

uint64_t sub_10010321C()
{
  return sub_100102FF4(&qword_1001AB6D0, &qword_1001AB628, (void (*)(void))sub_100103244);
}

uint64_t sub_100103244()
{
  return sub_100102FF4(&qword_1001AB6D8, &qword_1001AB620, (void (*)(void))sub_10010326C);
}

unint64_t sub_10010326C()
{
  unint64_t result = qword_1001AB6E0;
  if (!qword_1001AB6E0)
  {
    sub_100004A58(&qword_1001AB618);
    sub_10000A780(&qword_1001AB6E8, &qword_1001AB610);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB6E0);
  }
  return result;
}

uint64_t sub_10010330C@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_100103924();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  return sub_1000C6C08(v1 + 56, a1);
}

uint64_t sub_1001033A0(uint64_t a1)
{
  sub_10000AD3C(a1, (uint64_t)v6);
  swift_getKeyPath();
  sub_100103924();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  sub_10000ACE0((uint64_t)v6, &qword_1001A5940);
  uint64_t v3 = v1[5];
  uint64_t v4 = v1[6];
  sub_10000AC9C(v1 + 2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(a1, v3, v4);
}

uint64_t sub_100103494()
{
  type metadata accessor for SetlistSongPlaybackController();
  swift_allocObject();
  uint64_t result = sub_100103538();
  qword_1001B7548 = result;
  return result;
}

uint64_t sub_1001034D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 56;
  swift_beginAccess();
  sub_10010397C(a2, v3);
  return swift_endAccess();
}

uint64_t sub_100103538()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000570C(&qword_1001AB7B8);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v0 + 88) = 0;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  ObservationRegistrar.init()();
  if (qword_1001A4ED8 != -1) {
    swift_once();
  }
  uint64_t v6 = *(os_unfair_lock_s **)(qword_1001B7550 + 16);
  uint64_t v7 = (uint64_t *)&v6[4];
  uint64_t v8 = v6 + 6;
  os_unfair_lock_lock(v6 + 6);
  sub_100111C2C(v7, (uint64_t)v5);
  os_unfair_lock_unlock(v8);
  uint64_t v9 = type metadata accessor for MusicSubscription();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    sub_10000ACE0((uint64_t)v5, &qword_1001AB7B8);
  }
  else
  {
    char v11 = MusicSubscription.canBecomeSubscriber.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v5, v9);
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = (objc_class *)type metadata accessor for AppleMusicPlayer();
      char v13 = (char *)swift_allocObject();
      v13[16] = 0;
      *(_OWORD *)(v13 + 24) = 0u;
      *(_OWORD *)(v13 + 40) = 0u;
      *(_OWORD *)(v13 + 56) = 0u;
      *((void *)v13 + 9) = 0;
      ObservationRegistrar.init()();
      char v14 = &off_10019BB20;
      goto LABEL_8;
    }
  }
  uint64_t v12 = (objc_class *)type metadata accessor for MusicPreviewPlayer(0);
  char v13 = (char *)[objc_allocWithZone(v12) init];
  char v14 = &off_10019A710;
LABEL_8:
  int v18 = v12;
  uint64_t v19 = v14;
  *(void *)&long long v17 = v13;
  sub_100017350(&v17, v1 + 16);
  return v1;
}

uint64_t sub_10010376C()
{
  sub_100007584(v0 + 16);
  sub_10000ACE0(v0 + 56, &qword_1001A5940);
  uint64_t v1 = v0 + OBJC_IVAR____TtC16EventViewService29SetlistSongPlaybackController___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100103824()
{
  return type metadata accessor for SetlistSongPlaybackController();
}

uint64_t type metadata accessor for SetlistSongPlaybackController()
{
  uint64_t result = qword_1001AB720;
  if (!qword_1001AB720) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100103878()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_100103924()
{
  unint64_t result = qword_1001A5938;
  if (!qword_1001A5938)
  {
    type metadata accessor for SetlistSongPlaybackController();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5938);
  }
  return result;
}

uint64_t sub_10010397C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A5940);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t *sub_1001039E4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (uint64_t *)((char *)a1 + v7);
    uint64_t v9 = (uint64_t *)((char *)a2 + v7);
    swift_retain();
    swift_retain();
    sub_10000570C(&qword_1001A55D8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      void *v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100103B0C(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for OpenURLAction();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

void *sub_100103BCC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (void *)((char *)a1 + v5);
  uint64_t v7 = (void *)((char *)a2 + v5);
  swift_retain();
  swift_retain();
  sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for OpenURLAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  else
  {
    *uint64_t v6 = *v7;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_100103CA4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (void *)((char *)a1 + v6);
    uint64_t v8 = (void *)((char *)a2 + v6);
    sub_10000ACE0((uint64_t)a1 + v6, &qword_1001A55D8);
    sub_10000570C(&qword_1001A55D8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      void *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100103DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for OpenURLAction();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  return a1;
}

void *sub_100103E94(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    sub_10000ACE0((uint64_t)a1 + v6, &qword_1001A55D8);
    uint64_t v9 = sub_10000570C(&qword_1001A55D8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for OpenURLAction();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100103FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100103FBC);
}

uint64_t sub_100103FBC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000570C(qword_1001A55E8);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    char v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100104070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100104084);
}

void *sub_100104084(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000570C(qword_1001A55E8);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for SetlistSongRowView()
{
  uint64_t result = qword_1001AB838;
  if (!qword_1001AB838) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10010417C()
{
  sub_100017E94();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_100104220()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10010423C()
{
  static Color.gray.getter();
  uint64_t v0 = Color.opacity(_:)();
  uint64_t result = swift_release();
  qword_1001AB7C0 = v0;
  return result;
}

void sub_100104284()
{
  qword_1001AB7C8 = 3028656112;
  unk_1001AB7D0 = 0xA400000000000000;
}

uint64_t sub_1001042A0()
{
  static Font.body.getter();
  static Font.Weight.regular.getter();
  uint64_t v0 = Font.weight(_:)();
  uint64_t result = swift_release();
  qword_1001AB7D8 = v0;
  return result;
}

uint64_t sub_1001042E4@<X0>(uint64_t a1@<X8>)
{
  v34[0] = a1;
  uint64_t v2 = type metadata accessor for AccessibilityTraits();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000570C(&qword_1001AB878);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000570C(&qword_1001AB880);
  __chkstk_darwin(v11 - 8, v12);
  char v14 = (char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000570C(&qword_1001AB888);
  __chkstk_darwin(v15 - 8, v16);
  int v18 = (char *)v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v10 = static HorizontalAlignment.center.getter();
  *((void *)v10 + 1) = 0;
  unsigned char v10[16] = 0;
  uint64_t v19 = sub_10000570C(&qword_1001AB890);
  sub_1001046D4(v1, (uint64_t)&v10[*(int *)(v19 + 44)]);
  sub_10000570C(&qword_1001A83B0);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_100153180;
  static AccessibilityTraits.startsMediaSession.getter();
  v34[1] = v20;
  sub_100109AC4(&qword_1001A83B8, (void (*)(uint64_t))&type metadata accessor for AccessibilityTraits);
  sub_10000570C(&qword_1001A83C0);
  sub_10000A780(&qword_1001A83C8, &qword_1001A83C0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  sub_10000A780(&qword_1001AB898, &qword_1001AB878);
  View.accessibilityAddTraits(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  sub_10000ACE0((uint64_t)v10, &qword_1001AB878);
  uint64_t v21 = static Alignment.center.getter();
  sub_100124DE4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v18, 0.0, 1, 0.0, 1, v21, v22);
  sub_10000ACE0((uint64_t)v14, &qword_1001AB880);
  LOBYTE(v20) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v31 = v34[0];
  sub_10000A428((uint64_t)v18, v34[0], &qword_1001AB888);
  uint64_t v32 = v31 + *(int *)(sub_10000570C(&qword_1001AB8A0) + 36);
  *(unsigned char *)uint64_t v32 = v20;
  *(void *)(v32 + 8) = v24;
  *(void *)(v32 + 16) = v26;
  *(void *)(v32 + 24) = v28;
  *(void *)(v32 + 32) = v30;
  *(unsigned char *)(v32 + 40) = 0;
  return sub_10000ACE0((uint64_t)v18, &qword_1001AB888);
}

uint64_t sub_1001046D4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v60 = a1;
  uint64_t v61 = a2;
  uint64_t v2 = sub_10000570C(&qword_1001AB8A8);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000570C(&qword_1001AB8B0);
  uint64_t v8 = __chkstk_darwin(v6 - 8, v7);
  uint64_t v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  uint64_t v59 = (uint64_t)&v58 - v12;
  uint64_t v13 = type metadata accessor for Divider();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000570C(&qword_1001A5A58);
  uint64_t v19 = v18 - 8;
  __chkstk_darwin(v18, v20);
  uint64_t v22 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000570C(&qword_1001AB8B8);
  uint64_t v24 = v23 - 8;
  uint64_t v26 = __chkstk_darwin(v23, v25);
  uint64_t v28 = (char *)&v58 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26, v29);
  uint64_t v58 = (uint64_t)&v58 - v30;
  Divider.init()();
  char v31 = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v22, v17, v13);
  uint64_t v40 = &v22[*(int *)(v19 + 44)];
  *uint64_t v40 = v31;
  *((void *)v40 + 1) = v33;
  *((void *)v40 + 2) = v35;
  *((void *)v40 + 3) = v37;
  *((void *)v40 + 4) = v39;
  v40[40] = 0;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  LOBYTE(v17) = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  sub_10000A428((uint64_t)v22, (uint64_t)v28, &qword_1001A5A58);
  uint64_t v49 = &v28[*(int *)(v24 + 44)];
  *uint64_t v49 = (char)v17;
  *((void *)v49 + 1) = v42;
  *((void *)v49 + 2) = v44;
  *((void *)v49 + 3) = v46;
  *((void *)v49 + 4) = v48;
  v49[40] = 0;
  sub_10000ACE0((uint64_t)v22, &qword_1001A5A58);
  uint64_t v50 = v58;
  sub_10000A3C4((uint64_t)v28, v58, &qword_1001AB8B8);
  *(void *)uint64_t v5 = static VerticalAlignment.center.getter();
  *((void *)v5 + 1) = 0x4030000000000000;
  v5[16] = 0;
  uint64_t v51 = sub_10000570C(&qword_1001AB8C0);
  sub_100104B38(v60, (uint64_t)&v5[*(int *)(v51 + 44)]);
  uint64_t v52 = static Alignment.center.getter();
  sub_100124E40(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v10, 0.0, 1, 0.0, 1, v52, v53);
  sub_10000ACE0((uint64_t)v5, &qword_1001AB8A8);
  uint64_t v54 = v59;
  sub_10000A3C4((uint64_t)v10, v59, &qword_1001AB8B0);
  sub_10000A428(v50, (uint64_t)v28, &qword_1001AB8B8);
  sub_10000A428(v54, (uint64_t)v10, &qword_1001AB8B0);
  uint64_t v55 = v61;
  sub_10000A428((uint64_t)v28, v61, &qword_1001AB8B8);
  uint64_t v56 = sub_10000570C(&qword_1001AB8C8);
  sub_10000A428((uint64_t)v10, v55 + *(int *)(v56 + 48), &qword_1001AB8B0);
  sub_10000ACE0(v54, &qword_1001AB8B0);
  sub_10000ACE0(v50, &qword_1001AB8B8);
  sub_10000ACE0((uint64_t)v10, &qword_1001AB8B0);
  return sub_10000ACE0((uint64_t)v28, &qword_1001AB8B8);
}

uint64_t sub_100104B38@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v204 = a2;
  uint64_t v185 = type metadata accessor for PlainButtonStyle();
  uint64_t v184 = *(void *)(v185 - 8);
  __chkstk_darwin(v185, v3);
  uint64_t v183 = (char *)&v165 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v179 = type metadata accessor for AccessibilityTraits();
  uint64_t v178 = *(void *)(v179 - 8);
  __chkstk_darwin(v179, v5);
  uint64_t v177 = (char *)&v165 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SetlistSongRowView();
  uint64_t v167 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v168 = v9;
  uint64_t v169 = (uint64_t)&v165 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v173 = sub_10000570C(&qword_1001AB8D0);
  uint64_t v172 = *(void *)(v173 - 8);
  __chkstk_darwin(v173, v10);
  uint64_t v170 = (char *)&v165 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000570C(&qword_1001AB8D8);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v174 = (char *)&v165 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v171 = sub_10000570C(&qword_1001AB8E0);
  __chkstk_darwin(v171, v15);
  uint64_t v176 = (uint64_t)&v165 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v181 = sub_10000570C(&qword_1001AB8E8);
  __chkstk_darwin(v181, v17);
  uint64_t v182 = (uint64_t)&v165 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v202 = sub_10000570C(&qword_1001AB8F0);
  uint64_t v201 = *(void *)(v202 - 8);
  __chkstk_darwin(v202, v19);
  v180 = (char *)&v165 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v188 = type metadata accessor for URL();
  uint64_t v187 = *(void *)(v188 - 8);
  uint64_t v22 = __chkstk_darwin(v188, v21);
  uint64_t v166 = (char *)&v165 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = v23;
  __chkstk_darwin(v22, v24);
  long long v175 = (char *)&v165 - v25;
  uint64_t v26 = sub_10000570C(&qword_1001AB8F8);
  uint64_t v28 = __chkstk_darwin(v26 - 8, v27);
  uint64_t v203 = (uint64_t)&v165 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28, v30);
  uint64_t v206 = (char *)&v165 - v31;
  uint64_t v32 = sub_10000570C(&qword_1001AB900);
  __chkstk_darwin(v32 - 8, v33);
  v196 = (uint64_t *)((char *)&v165 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v35 = sub_10000570C(&qword_1001AB908);
  __chkstk_darwin(v35 - 8, v36);
  uint64_t v197 = (uint64_t)&v165 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v195 = sub_10000570C(&qword_1001AB910);
  uint64_t v39 = __chkstk_darwin(v195, v38);
  uint64_t v200 = (uint64_t)&v165 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = __chkstk_darwin(v39, v41);
  uint64_t v194 = (uint64_t)&v165 - v43;
  __chkstk_darwin(v42, v44);
  uint64_t v205 = (uint64_t)&v165 - v45;
  uint64_t v192 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v192, v46);
  uint64_t v193 = (char *)&v165 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_10000570C(&qword_1001AD200);
  uint64_t v50 = __chkstk_darwin(v48 - 8, v49);
  uint64_t v186 = (char *)&v165 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50, v52);
  uint64_t v54 = (char *)&v165 - v53;
  uint64_t v189 = sub_10000570C(&qword_1001AB918);
  uint64_t v55 = *(void *)(v189 - 8);
  __chkstk_darwin(v189, v56);
  uint64_t v58 = (char *)&v165 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_10000570C(&qword_1001AB920);
  uint64_t v60 = v59 - 8;
  __chkstk_darwin(v59, v61);
  long long v63 = (char *)&v165 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v190 = sub_10000570C(&qword_1001AB928);
  __chkstk_darwin(v190, v64);
  long long v66 = (char *)&v165 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v191 = sub_10000570C(&qword_1001AB930);
  uint64_t v68 = __chkstk_darwin(v191, v67);
  uint64_t v198 = (char *)&v165 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = __chkstk_darwin(v68, v70);
  uint64_t v73 = (char *)&v165 - v72;
  __chkstk_darwin(v71, v74);
  uint64_t v207 = (uint64_t)&v165 - v75;
  v199 = a1;
  uint64_t v76 = *a1;
  sub_1000C6018((uint64_t)v54);
  static Animation.spring(response:dampingFraction:blendDuration:)();
  Transaction.init(animation:)();
  sub_10000570C(&qword_1001AB938);
  sub_100106F94();
  AsyncImage.init(url:scale:transaction:content:)();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v77 = v189;
  (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v63, v58, v189);
  uint64_t v78 = &v63[*(int *)(v60 + 44)];
  long long v79 = v209;
  *(_OWORD *)uint64_t v78 = v208;
  *((_OWORD *)v78 + 1) = v79;
  *((_OWORD *)v78 + 2) = v210;
  (*(void (**)(char *, uint64_t))(v55 + 8))(v58, v77);
  uint64_t v80 = static Alignment.center.getter();
  uint64_t v82 = v81;
  uint64_t KeyPath = 0;
  uint64_t v84 = 0;
  if (sub_1000C63FC())
  {
    uint64_t KeyPath = swift_getKeyPath();
    swift_retain();
    uint64_t v84 = v76;
  }
  sub_10000A428((uint64_t)v63, (uint64_t)v66, &qword_1001AB920);
  char v85 = (uint64_t *)&v66[*(int *)(v190 + 36)];
  *char v85 = KeyPath;
  v85[1] = 0;
  v85[2] = v84;
  v85[3] = v80;
  v85[4] = v82;
  sub_10000ACE0((uint64_t)v63, &qword_1001AB920);
  char v86 = v193;
  char v87 = &v193[*(int *)(v192 + 20)];
  uint64_t v88 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v89 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v89 - 8) + 104))(v87, v88, v89);
  __asm { FMOV            V0.2D, #5.0 }
  _OWORD *v86 = _Q0;
  uint64_t v95 = (uint64_t)&v73[*(int *)(v191 + 36)];
  sub_100108E00((uint64_t)v86, v95, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v95 + *(int *)(sub_10000570C(&qword_1001A62A8) + 36)) = 256;
  sub_10000A428((uint64_t)v66, (uint64_t)v73, &qword_1001AB928);
  sub_100109B0C((uint64_t)v86, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_10000ACE0((uint64_t)v66, &qword_1001AB928);
  sub_10000A3C4((uint64_t)v73, v207, &qword_1001AB930);
  uint64_t v96 = static HorizontalAlignment.leading.getter();
  uint64_t v97 = (uint64_t)v196;
  uint64_t *v196 = v96;
  *(void *)(v97 + 8) = 0x4008000000000000;
  *(unsigned char *)(v97 + 16) = 0;
  uint64_t v98 = sub_10000570C(&qword_1001AB978);
  long long v99 = v199;
  sub_100106334((uint64_t)v199, (char *)(v97 + *(int *)(v98 + 44)));
  uint64_t v100 = static Alignment.leading.getter();
  uint64_t v101 = v197;
  sub_100124E9C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v197, 0.0, 1, 0.0, 1, v100, v102);
  sub_10000ACE0(v97, &qword_1001AB900);
  char v103 = static Edge.Set.trailing.getter();
  EdgeInsets.init(_all:)();
  uint64_t v105 = v104;
  uint64_t v107 = v106;
  uint64_t v109 = v108;
  uint64_t v111 = v110;
  uint64_t v112 = v194;
  sub_10000A428(v101, v194, &qword_1001AB908);
  uint64_t v113 = v112 + *(int *)(v195 + 36);
  *(unsigned char *)uint64_t v113 = v103;
  *(void *)(v113 + 8) = v105;
  *(void *)(v113 + 16) = v107;
  *(void *)(v113 + 24) = v109;
  *(void *)(v113 + 32) = v111;
  *(unsigned char *)(v113 + 40) = 0;
  sub_10000ACE0(v101, &qword_1001AB908);
  uint64_t v114 = v205;
  sub_10000A3C4(v112, v205, &qword_1001AB910);
  if (v99[1])
  {
    uint64_t v115 = (void *)*v99;
    swift_retain();
    char v116 = sub_1000C6AA4();
    swift_release();
    uint64_t v117 = (uint64_t)v206;
    if (v116)
    {
      uint64_t v118 = v115 + 5;
      uint64_t v119 = v115[8];
      uint64_t v120 = v115[9];
      sub_10000AC9C(v118, v119);
      uint64_t v121 = v119;
      uint64_t v122 = (uint64_t)v186;
      (*(void (**)(uint64_t, uint64_t))(v120 + 80))(v121, v120);
      uint64_t v123 = v187;
      uint64_t v124 = v188;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v187 + 48))(v122, 1, v188) != 1)
      {
        long long v128 = *(void (**)(char *, uint64_t, uint64_t))(v123 + 32);
        long long v129 = v175;
        v128(v175, v122, v124);
        uint64_t v130 = (uint64_t)v99;
        uint64_t v131 = v169;
        sub_100108E00(v130, v169, (uint64_t (*)(void))type metadata accessor for SetlistSongRowView);
        uint64_t v132 = v166;
        (*(void (**)(char *, char *, uint64_t))(v123 + 16))(v166, v129, v124);
        unint64_t v133 = (*(unsigned __int8 *)(v167 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v167 + 80);
        unint64_t v134 = (v168 + *(unsigned __int8 *)(v123 + 80) + v133) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80);
        uint64_t v135 = swift_allocObject();
        sub_10010901C(v131, v135 + v133);
        uint64_t v136 = v132;
        uint64_t v137 = v124;
        v128((char *)(v135 + v134), (uint64_t)v136, v124);
        sub_10000570C(&qword_1001AB988);
        sub_10010914C();
        uint64_t v138 = v170;
        Button.init(action:label:)();
        sub_10000570C(&qword_1001A83B0);
        uint64_t v139 = v178;
        uint64_t v140 = swift_allocObject();
        *(_OWORD *)(v140 + 16) = xmmword_100153180;
        static AccessibilityTraits.startsMediaSession.getter();
        *(void *)&long long v211 = v140;
        sub_100109AC4(&qword_1001A83B8, (void (*)(uint64_t))&type metadata accessor for AccessibilityTraits);
        sub_10000570C(&qword_1001A83C0);
        sub_10000A780(&qword_1001A83C8, &qword_1001A83C0);
        long long v141 = v177;
        uint64_t v142 = v179;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        sub_10000A780(&qword_1001AB9A8, &qword_1001AB8D0);
        uint64_t v143 = (uint64_t)v174;
        uint64_t v144 = v173;
        View.accessibilityRemoveTraits(_:)();
        (*(void (**)(char *, uint64_t))(v139 + 8))(v141, v142);
        (*(void (**)(char *, uint64_t))(v172 + 8))(v138, v144);
        static Alignment.center.getter();
        _FrameLayout.init(width:height:alignment:)();
        uint64_t v145 = v176;
        sub_10000A428(v143, v176, &qword_1001AB8D8);
        long long v146 = (_OWORD *)(v145 + *(int *)(v171 + 36));
        long long v147 = v212;
        *long long v146 = v211;
        v146[1] = v147;
        v146[2] = v213;
        sub_10000ACE0(v143, &qword_1001AB8D8);
        uint64_t v148 = static Alignment.center.getter();
        uint64_t v149 = v182;
        sub_100124EF8(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v182, 0.0, 1, INFINITY, 0, v148, v150);
        sub_10000ACE0(v145, &qword_1001AB8E0);
        uint64_t v151 = v183;
        PlainButtonStyle.init()();
        sub_10010991C(&qword_1001AB9B0, &qword_1001AB8E8, (void (*)(void))sub_100109298);
        sub_100109AC4(&qword_1001A62B8, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
        uint64_t v152 = v180;
        uint64_t v153 = v185;
        View.buttonStyle<A>(_:)();
        (*(void (**)(char *, uint64_t))(v184 + 8))(v151, v153);
        uint64_t v154 = v149;
        uint64_t v117 = (uint64_t)v206;
        sub_10000ACE0(v154, &qword_1001AB8E8);
        uint64_t v155 = v129;
        uint64_t v114 = v205;
        (*(void (**)(char *, uint64_t))(v123 + 8))(v155, v137);
        uint64_t v127 = v201;
        uint64_t v126 = v202;
        (*(void (**)(uint64_t, char *, uint64_t))(v201 + 32))(v117, v152, v202);
        uint64_t v125 = 0;
        goto LABEL_9;
      }
      sub_10000ACE0(v122, &qword_1001AD200);
    }
    uint64_t v125 = 1;
    uint64_t v126 = v202;
    uint64_t v127 = v201;
LABEL_9:
    uint64_t v156 = (uint64_t)v198;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v127 + 56))(v117, v125, 1, v126);
    uint64_t v157 = v207;
    sub_10000A428(v207, v156, &qword_1001AB930);
    uint64_t v158 = v200;
    sub_10000A428(v114, v200, &qword_1001AB910);
    uint64_t v159 = v203;
    sub_10000A428(v117, v203, &qword_1001AB8F8);
    uint64_t v160 = v114;
    uint64_t v161 = v117;
    uint64_t v162 = v204;
    sub_10000A428(v156, v204, &qword_1001AB930);
    uint64_t v163 = sub_10000570C(&qword_1001AB980);
    sub_10000A428(v158, v162 + *(int *)(v163 + 48), &qword_1001AB910);
    sub_10000A428(v159, v162 + *(int *)(v163 + 64), &qword_1001AB8F8);
    sub_10000ACE0(v161, &qword_1001AB8F8);
    sub_10000ACE0(v160, &qword_1001AB910);
    sub_10000ACE0(v157, &qword_1001AB930);
    sub_10000ACE0(v159, &qword_1001AB8F8);
    sub_10000ACE0(v158, &qword_1001AB910);
    return sub_10000ACE0(v156, &qword_1001AB930);
  }
  type metadata accessor for RemoteViewConfiguration();
  sub_100109AC4((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  uint64_t result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

uint64_t sub_100105EE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Image.ResizingMode();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AsyncImagePhase();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  if ((*(unsigned int (**)(char *, uint64_t))(v10 + 88))(v13, v9) == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(char *, uint64_t))(v10 + 96))(v13, v9);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, enum case for Image.ResizingMode.stretch(_:), v4);
    uint64_t v14 = Image.resizable(capInsets:resizingMode:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    uint64_t v29 = v14;
    uint64_t v30 = 1;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    char v34 = 0;
    swift_retain_n();
    sub_10000570C(&qword_1001AB950);
    sub_10000570C(&qword_1001AB960);
    sub_100107010();
    sub_10010708C();
    _ConditionalContent<>.init(storage:)();
    swift_release_n();
    uint64_t result = swift_release();
    long long v16 = v35;
    long long v17 = v36;
    long long v18 = v37;
    long long v19 = v38;
    char v20 = v39;
  }
  else
  {
    if (qword_1001A4E48 != -1) {
      swift_once();
    }
    uint64_t v21 = qword_1001B74E8;
    swift_retain();
    uint64_t v22 = static Alignment.center.getter();
    uint64_t v24 = v23;
    sub_1001062B4((uint64_t)&v35);
    uint64_t v29 = v21;
    uint64_t v30 = 256;
    long long v31 = v35;
    *(void *)&long long v32 = v36;
    *((void *)&v32 + 1) = DWORD2(v36);
    *(void *)&long long v33 = v22;
    *((void *)&v33 + 1) = v24;
    char v34 = 1;
    sub_10000570C(&qword_1001AB950);
    sub_10000570C(&qword_1001AB960);
    sub_100107010();
    sub_10010708C();
    _ConditionalContent<>.init(storage:)();
    long long v28 = v35;
    long long v27 = v36;
    long long v26 = v37;
    long long v25 = v38;
    char v20 = v39;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    long long v19 = v25;
    long long v18 = v26;
    long long v17 = v27;
    long long v16 = v28;
  }
  *(_OWORD *)a2 = v16;
  *(_OWORD *)(a2 + 16) = v17;
  *(_OWORD *)(a2 + 32) = v18;
  *(_OWORD *)(a2 + 48) = v19;
  *(unsigned char *)(a2 + 64) = v20;
  return result;
}

uint64_t sub_1001062B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = Image.init(_internalSystemName:)();
  static Font.title3.getter();
  static Font.Weight.regular.getter();
  uint64_t v3 = Font.weight(_:)();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = static HierarchicalShapeStyle.quaternary.getter();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = KeyPath;
  *(void *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_100106334@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  char v86 = a2;
  uint64_t v3 = type metadata accessor for Text.Suffix();
  uint64_t v83 = *(void *)(v3 - 8);
  uint64_t v84 = v3;
  __chkstk_darwin(v3, v4);
  uint64_t v81 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = sub_10000570C(&qword_1001AB9D0);
  uint64_t v6 = *(void *)(v90 - 8);
  uint64_t v8 = __chkstk_darwin(v90, v7);
  char v87 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v82 = (char *)&v81 - v12;
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v81 - v14;
  uint64_t v16 = *(void *)(*(void *)a1 + 64);
  uint64_t v17 = *(void *)(*(void *)a1 + 72);
  sub_10000AC9C((void *)(*(void *)a1 + 40), v16);
  *(void *)&long long v96 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 48))(v16, v17);
  *((void *)&v96 + 1) = v18;
  unint64_t v88 = sub_100010B2C();
  uint64_t v19 = Text.init<A>(_:)();
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  char v25 = v24 & 1;
  uint64_t v26 = static Alignment.leading.getter();
  sub_100123F48(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v96, 0.0, 1, 0.0, 1, v26, v27, v19, v21, v25, v23);
  sub_10000FCC4(v19, v21, v25);
  swift_bridgeObjectRelease();
  long long v114 = v102;
  long long v115 = v103;
  long long v116 = v104;
  long long v110 = v98;
  long long v111 = v99;
  long long v112 = v100;
  long long v113 = v101;
  long long v108 = v96;
  long long v109 = v97;
  if (qword_1001A4EB0 != -1) {
    swift_once();
  }
  uint64_t v28 = qword_1001AB7D8;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v30 = swift_getKeyPath();
  char v117 = 0;
  long long v102 = v114;
  long long v103 = v115;
  long long v104 = v116;
  long long v98 = v110;
  long long v99 = v111;
  long long v100 = v112;
  long long v101 = v113;
  long long v96 = v108;
  long long v97 = v109;
  *(void *)&long long v105 = KeyPath;
  *((void *)&v105 + 1) = v28;
  *(void *)&long long v106 = v30;
  *((void *)&v106 + 1) = 1;
  char v107 = 0;
  uint64_t v85 = a1;
  uint64_t v31 = *(void *)(*(void *)a1 + 64);
  uint64_t v32 = *(void *)(*(void *)a1 + 72);
  sub_10000AC9C((void *)(*(void *)a1 + 40), v31);
  long long v33 = *(uint64_t (**)(uint64_t, uint64_t))(v32 + 112);
  swift_retain();
  char v34 = v33(v31, v32);
  uint64_t v89 = v6;
  long long v91 = v15;
  if (v34)
  {
    if (qword_1001A4EA8 != -1) {
      swift_once();
    }
    v94[0] = xmmword_1001AB7C8;
    swift_bridgeObjectRetain();
    uint64_t v35 = Text.init<A>(_:)();
    uint64_t v37 = v36;
    char v39 = v38;
    if (qword_1001A4EA0 != -1) {
      swift_once();
    }
    uint64_t v40 = Text.foregroundColor(_:)();
    uint64_t v42 = v41;
    char v44 = v43 & 1;
    sub_10000FCC4(v35, v37, v39 & 1);
    swift_bridgeObjectRelease();
    uint64_t v45 = Text.font(_:)();
    uint64_t v47 = v46;
    char v49 = v48 & 1;
    sub_10000FCC4(v40, v42, v44);
    swift_bridgeObjectRelease();
    uint64_t v50 = v81;
    static Text.Suffix.alwaysVisible(_:)();
    sub_10000FCC4(v45, v47, v49);
    swift_bridgeObjectRelease();
    uint64_t v6 = v89;
    uint64_t v51 = v90;
    uint64_t v15 = v91;
  }
  else
  {
    uint64_t v50 = v81;
    static Text.Suffix.none.getter();
    uint64_t v51 = v90;
  }
  sub_10000570C(&qword_1001AB9D8);
  sub_100109400();
  uint64_t v52 = v82;
  View.textSuffix(_:)();
  (*(void (**)(char *, uint64_t))(v83 + 8))(v50, v84);
  v94[9] = v105;
  v94[10] = v106;
  v94[5] = v101;
  v94[6] = v102;
  char v95 = v107;
  v94[7] = v103;
  v94[8] = v104;
  v94[0] = v96;
  v94[1] = v97;
  v94[2] = v98;
  v94[3] = v99;
  v94[4] = v100;
  sub_100109540((uint64_t)v94);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v15, v52, v51);
  uint64_t v53 = *(void *)(*(void *)v85 + 64);
  uint64_t v54 = *(void *)(*(void *)v85 + 72);
  sub_10000AC9C((void *)(*(void *)v85 + 40), v53);
  uint64_t v92 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 56))(v53, v54);
  uint64_t v93 = v55;
  uint64_t v56 = Text.init<A>(_:)();
  uint64_t v58 = v57;
  char v60 = v59 & 1;
  static Font.footnote.getter();
  static Font.Weight.regular.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v61 = Text.font(_:)();
  uint64_t v63 = v62;
  char v65 = v64;
  swift_release();
  sub_10000FCC4(v56, v58, v60);
  swift_bridgeObjectRelease();
  if (qword_1001A4E40 != -1) {
    swift_once();
  }
  uint64_t v92 = qword_1001B74E0;
  swift_retain();
  uint64_t v85 = Text.foregroundStyle<A>(_:)();
  uint64_t v67 = v66;
  unint64_t v88 = v68;
  char v70 = v69 & 1;
  sub_10000FCC4(v61, v63, v65 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v71 = swift_getKeyPath();
  uint64_t v72 = v89;
  uint64_t v73 = v90;
  uint64_t v74 = *(void (**)(char *, char *, uint64_t))(v89 + 16);
  uint64_t v75 = v87;
  v74(v87, v91, v90);
  uint64_t v76 = v86;
  v74(v86, v75, v73);
  uint64_t v77 = &v76[*(int *)(sub_10000570C(&qword_1001AB9F8) + 48)];
  uint64_t v78 = v85;
  *(void *)uint64_t v77 = v85;
  *((void *)v77 + 1) = v67;
  v77[16] = v70;
  *((void *)v77 + 3) = v88;
  *((void *)v77 + 4) = v71;
  *((void *)v77 + 5) = 1;
  v77[48] = 0;
  sub_10000FCD4(v78, v67, v70);
  long long v79 = *(void (**)(char *, uint64_t))(v72 + 8);
  swift_bridgeObjectRetain();
  swift_retain();
  v79(v91, v73);
  sub_10000FCC4(v78, v67, v70);
  swift_release();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v79)(v75, v73);
}

uint64_t sub_100106B1C(void *a1)
{
  uint64_t v2 = type metadata accessor for OpenURLAction();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SetlistSongRowView();
  sub_1000264EC((uint64_t)v6);
  OpenURLAction.callAsFunction(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  uint64_t v7 = a1[1];
  uint64_t v8 = *(void *)(*a1 + 24);
  if (v7)
  {
    uint64_t v9 = *(void *)(*a1 + 16);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_100116F94(v9, v8, 8, 11, 14, 0, 3u, v7);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100109AC4((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    swift_bridgeObjectRetain();
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100106CC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SymbolVariants();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  uint64_t v10 = (char *)v23 - v9;
  uint64_t v11 = sub_10000570C(&qword_1001AB9C8);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000570C(&qword_1001AB9A0);
  __chkstk_darwin(v16 - 8, v17);
  uint64_t v19 = (char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[1] = Image.init(_internalSystemName:)();
  static SymbolVariants.square.getter();
  SymbolVariants.fill.getter();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v3 + 8);
  v20(v10, v2);
  View.symbolVariant(_:)();
  v20(v7, v2);
  swift_release();
  static Alignment.center.getter();
  __n128 v21 = sub_100124F54(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v19, 0.0, 1, INFINITY, 0);
  (*(void (**)(char *, uint64_t, __n128))(v12 + 8))(v15, v11, v21);
  sub_10000A428((uint64_t)v19, a1, &qword_1001AB9A0);
  *(unsigned char *)(a1 + *(int *)(sub_10000570C(&qword_1001AB988) + 36)) = 0;
  return sub_10000ACE0((uint64_t)v19, &qword_1001AB9A0);
}

unint64_t sub_100106F94()
{
  unint64_t result = qword_1001AB940;
  if (!qword_1001AB940)
  {
    sub_100004A58(&qword_1001AB938);
    sub_100107010();
    sub_10010708C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB940);
  }
  return result;
}

unint64_t sub_100107010()
{
  unint64_t result = qword_1001AB948;
  if (!qword_1001AB948)
  {
    sub_100004A58(&qword_1001AB950);
    sub_100048920();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB948);
  }
  return result;
}

unint64_t sub_10010708C()
{
  unint64_t result = qword_1001AB958;
  if (!qword_1001AB958)
  {
    sub_100004A58(&qword_1001AB960);
    sub_10000A780(&qword_1001AA5E0, &qword_1001AA5D8);
    sub_10000A780(&qword_1001AB968, &qword_1001AB970);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB958);
  }
  return result;
}

uint64_t sub_100107150@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_10000570C(&qword_1001ABA18);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (uint64_t *)&v26[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = sub_10000570C(&qword_1001ABA20);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = &v26[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *uint64_t v11 = static Alignment.center.getter();
  v11[1] = v16;
  uint64_t v17 = sub_10000570C(&qword_1001ABA28);
  sub_10010731C(a1, a2 & 1, a3, (uint64_t)v11 + *(int *)(v17 + 44));
  uint64_t v18 = static Alignment.center.getter();
  sub_100125140(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v15, 0.0, 1, INFINITY, 0, v18, v19);
  sub_10000ACE0((uint64_t)v11, &qword_1001ABA18);
  uint64_t v20 = static Alignment.center.getter();
  uint64_t v22 = v21;
  static Color.black.getter();
  uint64_t v23 = Color.opacity(_:)();
  swift_release();
  sub_10000A428((uint64_t)v15, a4, &qword_1001ABA20);
  char v24 = (uint64_t *)(a4 + *(int *)(sub_10000570C(&qword_1001ABA30) + 36));
  *char v24 = v23;
  v24[1] = v20;
  v24[2] = v22;
  return sub_10000ACE0((uint64_t)v15, &qword_1001ABA20);
}

uint64_t sub_10010731C@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v82 = a1;
  uint64_t v79 = a4;
  int v77 = a2 & 1;
  uint64_t v5 = sub_10000570C(&qword_1001ABA38);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v74 = (uint64_t *)((char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v80 = sub_10000570C(&qword_1001ABA40);
  __chkstk_darwin(v80, v8);
  uint64_t v81 = (uint64_t)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000570C(&qword_1001ABA48);
  uint64_t v12 = __chkstk_darwin(v10 - 8, v11);
  uint64_t v76 = (uint64_t)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  uint64_t v78 = (uint64_t)&v66 - v15;
  uint64_t v16 = type metadata accessor for AnimationTimelineSchedule();
  uint64_t v73 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)&v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v66 - v22;
  uint64_t v24 = sub_10000570C(&qword_1001ABA50);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v29 = (char *)&v66 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27, v30);
  uint64_t v32 = (char *)&v66 - v31;
  uint64_t v33 = sub_10000570C(&qword_1001ABA58);
  uint64_t v35 = __chkstk_darwin(v33 - 8, v34);
  uint64_t v75 = (char *)&v66 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35, v37);
  char v39 = (char *)&v66 - v38;
  uint64_t v40 = a3;
  if (sub_1000C66BC())
  {
    uint64_t v70 = v25;
    uint64_t v71 = v24;
    uint64_t v72 = v39;
    BOOL v41 = sub_1000C6260();
    uint64_t v42 = v73;
    unint64_t v68 = v29;
    char v69 = v32;
    if (v41)
    {
      int v43 = v77;
    }
    else
    {
      uint64_t v44 = v82;
      int v43 = v77;
      sub_10007D948(v82, v77);
      sub_100026F84(v44, v43);
      sub_1000272B4(v44, v43);
    }
    uint64_t v67 = v23;
    AnimationTimelineSchedule.init(minimumInterval:paused:)();
    uint64_t v45 = swift_allocObject();
    uint64_t v46 = v82;
    *(void *)(v45 + 16) = v82;
    *(unsigned char *)(v45 + 24) = v43 != 0;
    *(void *)(v45 + 32) = v40;
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v20, v23, v16);
    uint64_t v47 = swift_allocObject();
    *(void *)(v47 + 16) = sub_1001098C4;
    *(void *)(v47 + 24) = v45;
    sub_10007D948(v46, v43);
    swift_retain();
    sub_10000570C(&qword_1001ABA70);
    sub_100109AC4(&qword_1001ABA78, (void (*)(uint64_t))&type metadata accessor for AnimationTimelineSchedule);
    sub_10010991C(&qword_1001ABA80, &qword_1001ABA70, (void (*)(void))sub_100109998);
    char v48 = v68;
    TimelineView<>.init(_:content:)();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v67, v16);
    uint64_t v50 = v69;
    uint64_t v49 = v70;
    uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v70 + 32);
    uint64_t v52 = v71;
    v51(v69, v48, v71);
    char v39 = v72;
    v51(v72, v50, v52);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v39, 0, 1, v52);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v39, 1, 1, v24);
  }
  uint64_t v53 = v74;
  uint64_t v54 = (uint64_t)v75;
  uint64_t *v53 = static Alignment.center.getter();
  v53[1] = v55;
  uint64_t v56 = sub_10000570C(&qword_1001ABA60);
  sub_100107F84(v40, (uint64_t *)((char *)v53 + *(int *)(v56 + 44)));
  uint64_t v57 = static Color.white.getter();
  uint64_t v58 = v81;
  sub_10000A428((uint64_t)v53, v81, &qword_1001ABA38);
  *(void *)(v58 + *(int *)(v80 + 36)) = v57;
  sub_10000ACE0((uint64_t)v53, &qword_1001ABA38);
  uint64_t v59 = static Alignment.center.getter();
  uint64_t v60 = v76;
  sub_10012519C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v76, 0.0, 1, INFINITY, 0, v59, v61);
  sub_10000ACE0(v58, &qword_1001ABA40);
  uint64_t v62 = v78;
  sub_10000A3C4(v60, v78, &qword_1001ABA48);
  sub_10000A428((uint64_t)v39, v54, &qword_1001ABA58);
  sub_10000A428(v62, v60, &qword_1001ABA48);
  uint64_t v63 = v79;
  sub_10000A428(v54, v79, &qword_1001ABA58);
  uint64_t v64 = sub_10000570C(&qword_1001ABA68);
  sub_10000A428(v60, v63 + *(int *)(v64 + 48), &qword_1001ABA48);
  sub_10000ACE0(v62, &qword_1001ABA48);
  sub_10000ACE0((uint64_t)v39, &qword_1001ABA58);
  sub_10000ACE0(v60, &qword_1001ABA48);
  return sub_10000ACE0(v54, &qword_1001ABA58);
}

uint64_t sub_100107A20@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v38 = type metadata accessor for Font.TextStyle();
  uint64_t v36 = *(void *)(v38 - 8);
  __chkstk_darwin(v38, v3);
  uint64_t v35 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for CircularProgressViewStyle();
  __chkstk_darwin(v34, v5);
  uint64_t v7 = (uint64_t *)((char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v37 = sub_10000570C(&qword_1001A5728);
  uint64_t v39 = *(void *)(v37 - 8);
  __chkstk_darwin(v37, v8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000570C(&qword_1001ABAB0);
  uint64_t v40 = *(void *)(v11 - 8);
  uint64_t v41 = v11;
  __chkstk_darwin(v11, v12);
  uint64_t v33 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000570C(&qword_1001ABA90);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  *(void *)&long long v44 = a1;
  sub_100109AC4(&qword_1001A9C10, (void (*)(uint64_t))type metadata accessor for SetlistSongRowViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v19 = *(void **)(*(void *)(a1 + 32) + 200);
  uint64_t v20 = v19[5];
  uint64_t v21 = v19[6];
  sub_10000AC9C(v19 + 2, v20);
  uint64_t v22 = *(double (**)(uint64_t, uint64_t))(v21 + 8);
  swift_retain();
  double v23 = v22(v20, v21);
  swift_release();
  *(double *)&long long v44 = v23;
  BYTE8(v44) = 0;
  uint64_t v43 = 0x3FF0000000000000;
  sub_1000A9C8C();
  ProgressView.init<A>(value:total:)();
  uint64_t *v7 = static Color.white.getter();
  *(void *)&long long v44 = 0x4000000000000000;
  (*(void (**)(char *, void, uint64_t))(v36 + 104))(v35, enum case for Font.TextStyle.body(_:), v38);
  ScaledMetric.init(wrappedValue:relativeTo:)();
  sub_10000A780(&qword_1001A57A8, &qword_1001A5728);
  sub_100109AC4(&qword_1001ABA98, (void (*)(uint64_t))type metadata accessor for CircularProgressViewStyle);
  uint64_t v24 = v33;
  uint64_t v25 = v37;
  View.progressViewStyle<A>(_:)();
  sub_100109B0C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CircularProgressViewStyle);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v10, v25);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v27 = v40;
  uint64_t v26 = v41;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v18, v24, v41);
  uint64_t v28 = &v18[*(int *)(v15 + 44)];
  long long v29 = v45;
  *(_OWORD *)uint64_t v28 = v44;
  *((_OWORD *)v28 + 1) = v29;
  *((_OWORD *)v28 + 2) = v46;
  (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
  uint64_t v30 = v42;
  sub_10000A428((uint64_t)v18, v42, &qword_1001ABA90);
  uint64_t v31 = (uint64_t (**)())(v30 + *(int *)(sub_10000570C(&qword_1001ABA70) + 36));
  *uint64_t v31 = sub_100107F5C;
  v31[1] = 0;
  return sub_10000ACE0((uint64_t)v18, &qword_1001ABA90);
}

uint64_t sub_100107F5C()
{
  return Transaction.disablesAnimations.setter();
}

uint64_t sub_100107F84@<X0>(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v140 = a2;
  uint64_t v128 = type metadata accessor for ControlSize();
  uint64_t v126 = *(void *)(v128 - 8);
  __chkstk_darwin(v128, v3);
  uint64_t v124 = (char *)&v109 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = sub_10000570C(&qword_1001A5728);
  uint64_t v121 = *(void *)(v122 - 8);
  __chkstk_darwin(v122, v5);
  long long v116 = (char *)&v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = sub_10000570C(&qword_1001ABAB8) - 8;
  __chkstk_darwin(v119, v7);
  long long v115 = (char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = sub_10000570C(&qword_1001ABAC0) - 8;
  __chkstk_darwin(v118, v9);
  uint64_t v114 = (uint64_t)&v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = sub_10000570C(&qword_1001ABAC8) - 8;
  __chkstk_darwin(v120, v11);
  char v117 = (char *)&v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = sub_10000570C(&qword_1001ABAD0) - 8;
  __chkstk_darwin(v127, v13);
  uint64_t v125 = (uint64_t)&v109 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = sub_10000570C(&qword_1001ABAD8) - 8;
  __chkstk_darwin(v134, v15);
  uint64_t v133 = (uint64_t)&v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = sub_10000570C(&qword_1001ABAE0) - 8;
  uint64_t v18 = __chkstk_darwin(v136, v17);
  uint64_t v142 = (uint64_t)&v109 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v18, v20);
  uint64_t v135 = (uint64_t)&v109 - v22;
  __chkstk_darwin(v21, v23);
  uint64_t v141 = (uint64_t)&v109 - v24;
  uint64_t v139 = Image.init(systemName:)();
  uint64_t v138 = static Font.subheadline.getter();
  uint64_t KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v25 = a1 + OBJC_IVAR____TtC16EventViewService23SetlistSongRowViewModel___observationRegistrar;
  uint64_t v143 = a1;
  uint64_t v26 = a1;
  uint64_t v27 = sub_100109AC4(&qword_1001A9C10, (void (*)(uint64_t))type metadata accessor for SetlistSongRowViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v28 = *(void **)(*(void *)(a1 + 32) + 200);
  uint64_t v29 = v28[5];
  uint64_t v30 = v28[6];
  sub_10000AC9C(v28 + 2, v29);
  uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t))(v30 + 16);
  swift_retain();
  LOBYTE(v130) = v31(v29, v30);
  int v130 = v130;
  swift_release();
  swift_getKeyPath();
  uint64_t v143 = a1;
  uint64_t v112 = v25;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v32 = *(void **)(*(void *)(a1 + 32) + 200);
  uint64_t v33 = v32[5];
  uint64_t v34 = v32[6];
  sub_10000AC9C(v32 + 2, v33);
  uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t))(v34 + 16);
  swift_retain();
  LOBYTE(v123) = v35(v33, v34);
  int v123 = v123;
  swift_release();
  static UnitPoint.center.getter();
  uint64_t v131 = v37;
  uint64_t v132 = v36;
  double v38 = 1.0;
  uint64_t v129 = static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)();
  swift_getKeyPath();
  uint64_t v143 = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v39 = *(void **)(*(void *)(a1 + 32) + 200);
  uint64_t v40 = v39[5];
  uint64_t v41 = v39[6];
  sub_10000AC9C(v39 + 2, v40);
  uint64_t v42 = *(uint64_t (**)(uint64_t, uint64_t))(v41 + 16);
  swift_retain();
  LOBYTE(v113) = v42(v40, v41);
  int v113 = v113;
  swift_release();
  uint64_t v43 = v116;
  ProgressView<>.init<>()();
  uint64_t v44 = static Color.white.getter();
  uint64_t v45 = swift_getKeyPath();
  uint64_t v46 = v121;
  uint64_t v47 = (uint64_t)v115;
  uint64_t v48 = v122;
  (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v115, v43, v122);
  uint64_t v49 = (uint64_t *)(v47 + *(int *)(v119 + 44));
  *uint64_t v49 = v45;
  v49[1] = v44;
  (*(void (**)(char *, uint64_t))(v46 + 8))(v43, v48);
  uint64_t v50 = v114;
  sub_10000A428(v47, v114, &qword_1001ABAB8);
  *(_WORD *)(v50 + *(int *)(v118 + 44)) = 257;
  sub_10000ACE0(v47, &qword_1001ABAB8);
  uint64_t v51 = v126;
  uint64_t v52 = v124;
  uint64_t v53 = v128;
  (*(void (**)(char *, void, uint64_t))(v126 + 104))(v124, enum case for ControlSize.small(_:), v128);
  uint64_t v54 = swift_getKeyPath();
  uint64_t v55 = (uint64_t)v117;
  uint64_t v56 = (uint64_t *)&v117[*(int *)(v120 + 44)];
  uint64_t v57 = sub_10000570C(&qword_1001ABAE8);
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))((char *)v56 + *(int *)(v57 + 28), v52, v53);
  *uint64_t v56 = v54;
  sub_10000A428(v50, v55, &qword_1001ABAC0);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v53);
  sub_10000ACE0(v50, &qword_1001ABAC0);
  swift_getKeyPath();
  uint64_t v110 = v26;
  uint64_t v143 = v26;
  uint64_t v111 = v27;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v58 = *(void **)(*(void *)(v26 + 32) + 200);
  uint64_t v59 = v58[5];
  uint64_t v60 = v58[6];
  sub_10000AC9C(v58 + 2, v59);
  uint64_t v61 = *(unsigned __int8 (**)(uint64_t, uint64_t))(v60 + 16);
  swift_retain();
  LODWORD(v54) = v61(v59, v60);
  swift_release();
  if (v54 == 1) {
    double v62 = 1.0;
  }
  else {
    double v62 = 0.0;
  }
  uint64_t v63 = v55;
  uint64_t v64 = v55;
  uint64_t v65 = v125;
  sub_10000A428(v64, v125, &qword_1001ABAC8);
  *(double *)(v65 + *(int *)(v127 + 44)) = v62;
  sub_10000ACE0(v63, &qword_1001ABAC8);
  swift_getKeyPath();
  uint64_t v66 = v110;
  uint64_t v143 = v110;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v67 = v66;
  unint64_t v68 = *(void **)(*(void *)(v66 + 32) + 200);
  uint64_t v69 = v68[5];
  uint64_t v70 = v68[6];
  sub_10000AC9C(v68 + 2, v69);
  uint64_t v71 = *(unsigned __int8 (**)(uint64_t, uint64_t))(v70 + 16);
  swift_retain();
  LODWORD(v63) = v71(v69, v70);
  swift_release();
  if (v63 == 1) {
    double v72 = 1.0;
  }
  else {
    double v72 = 0.0;
  }
  static UnitPoint.center.getter();
  uint64_t v74 = v73;
  uint64_t v76 = v75;
  uint64_t v77 = v133;
  sub_10000A428(v65, v133, &qword_1001ABAD0);
  uint64_t v78 = v77 + *(int *)(v134 + 44);
  *(double *)uint64_t v78 = v72;
  *(double *)(v78 + 8) = v72;
  *(void *)(v78 + 16) = v74;
  *(void *)(v78 + 24) = v76;
  sub_10000ACE0(v65, &qword_1001ABAD0);
  uint64_t v79 = static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)();
  swift_getKeyPath();
  uint64_t v143 = v67;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v80 = *(void **)(*(void *)(v67 + 32) + 200);
  uint64_t v81 = v80[5];
  uint64_t v82 = v80[6];
  sub_10000AC9C(v80 + 2, v81);
  uint64_t v83 = *(unsigned __int8 (**)(uint64_t, uint64_t))(v82 + 16);
  swift_retain();
  int v84 = v83(v81, v82);
  swift_release();
  uint64_t v85 = v135;
  sub_10000A428(v77, v135, &qword_1001ABAD8);
  uint64_t v86 = v85 + *(int *)(v136 + 44);
  *(void *)uint64_t v86 = v79;
  *(unsigned char *)(v86 + 8) = v84 == 1;
  sub_10000ACE0(v77, &qword_1001ABAD8);
  uint64_t v87 = v141;
  sub_10000A3C4(v85, v141, &qword_1001ABAE0);
  BOOL v88 = v113 == 2;
  if (v123 == 2) {
    double v89 = 1.0;
  }
  else {
    double v89 = 0.0;
  }
  if (v130 == 2) {
    double v90 = 1.0;
  }
  else {
    double v90 = 0.0;
  }
  uint64_t v136 = Image.init(systemName:)();
  uint64_t v135 = static Font.subheadline.getter();
  uint64_t v91 = swift_getKeyPath();
  if (sub_1000C6260()) {
    double v92 = 1.0;
  }
  else {
    double v92 = 0.0;
  }
  if (!sub_1000C6260()) {
    double v38 = 0.0;
  }
  static UnitPoint.center.getter();
  uint64_t v94 = v93;
  uint64_t v96 = v95;
  uint64_t v97 = static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)();
  BOOL v98 = sub_1000C6260();
  uint64_t v99 = v142;
  sub_10000A428(v87, v142, &qword_1001ABAE0);
  BOOL v100 = v98;
  long long v101 = v140;
  uint64_t v103 = KeyPath;
  uint64_t v102 = v138;
  uint64_t *v140 = v139;
  v101[1] = v103;
  v101[2] = v102;
  *((double *)v101 + 3) = v90;
  *((double *)v101 + 4) = v89;
  uint64_t v104 = v132;
  *((double *)v101 + 5) = v89;
  v101[6] = v104;
  unsigned char v101[7] = v131;
  v101[8] = v129;
  *((unsigned char *)v101 + 72) = v88;
  long long v105 = v101;
  uint64_t v106 = sub_10000570C(&qword_1001ABAF0);
  sub_10000A428(v99, (uint64_t)v105 + *(int *)(v106 + 48), &qword_1001ABAE0);
  uint64_t v107 = (uint64_t)v105 + *(int *)(v106 + 64);
  *(void *)uint64_t v107 = v136;
  *(void *)(v107 + 8) = v91;
  *(void *)(v107 + 16) = v135;
  *(double *)(v107 + 24) = v92;
  *(double *)(v107 + 32) = v38;
  *(double *)(v107 + 40) = v38;
  *(void *)(v107 + 48) = v94;
  *(void *)(v107 + 56) = v96;
  *(void *)(v107 + 64) = v97;
  *(unsigned char *)(v107 + 72) = v100;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10000ACE0(v141, &qword_1001ABAE0);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10000ACE0(v142, &qword_1001ABAE0);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100108BE8@<X0>(uint64_t a1@<X8>)
{
  return sub_100107150(*(void *)v1, *(unsigned char *)(v1 + 8), *(void *)(v1 + 16), a1);
}

uint64_t sub_100108C00(uint64_t a1, void (*a2)(char *))
{
  uint64_t v4 = sub_10000570C(&qword_1001ABAA0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4, v7);
  uint64_t v8 = sub_10000570C(&qword_1001ABAA8);
  uint64_t v10 = *(void *)(v8 - 8);
  uint64_t result = v8 - 8;
  if (*(void *)(v10 + 64) == v6)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    a2((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100108D38(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ControlSize();
  __chkstk_darwin(v2, v3);
  (*(void (**)(char *, uint64_t))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.controlSize.setter();
}

uint64_t sub_100108E00(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100108E68()
{
  uint64_t v1 = (int *)(type metadata accessor for SetlistSongRowView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = *(void *)(*(void *)v1 + 64);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  swift_release();
  swift_release();
  unint64_t v7 = v0 + v2 + v1[8];
  sub_10000570C(&qword_1001A55D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for OpenURLAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + ((v2 + v3 + v6) & ~v6), v4);

  return swift_deallocObject();
}

uint64_t sub_10010901C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SetlistSongRowView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100109080()
{
  uint64_t v1 = *(void *)(type metadata accessor for SetlistSongRowView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  type metadata accessor for URL();

  return sub_100106B1C((void *)(v0 + v2));
}

unint64_t sub_10010914C()
{
  unint64_t result = qword_1001AB990;
  if (!qword_1001AB990)
  {
    sub_100004A58(&qword_1001AB988);
    sub_1001091EC();
    sub_10000A780(&qword_1001A65A8, &qword_1001A65B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB990);
  }
  return result;
}

unint64_t sub_1001091EC()
{
  unint64_t result = qword_1001AB998;
  if (!qword_1001AB998)
  {
    sub_100004A58(&qword_1001AB9A0);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB998);
  }
  return result;
}

uint64_t sub_100109298()
{
  return sub_10010991C(&qword_1001AB9B8, &qword_1001AB8E0, (void (*)(void))sub_1001092C8);
}

unint64_t sub_1001092C8()
{
  unint64_t result = qword_1001AB9C0;
  if (!qword_1001AB9C0)
  {
    sub_100004A58(&qword_1001AB8D8);
    sub_10000A780(&qword_1001AB9A8, &qword_1001AB8D0);
    sub_100109AC4((unint64_t *)&qword_1001A68E8, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB9C0);
  }
  return result;
}

uint64_t sub_100109398@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isLuminanceReduced.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1001093C8()
{
  return EnvironmentValues.isLuminanceReduced.setter();
}

unint64_t sub_100109400()
{
  unint64_t result = qword_1001AB9E0;
  if (!qword_1001AB9E0)
  {
    sub_100004A58(&qword_1001AB9D8);
    sub_1001094A0();
    sub_10000A780(&qword_1001A5A88, &qword_1001A5A90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB9E0);
  }
  return result;
}

unint64_t sub_1001094A0()
{
  unint64_t result = qword_1001AB9E8;
  if (!qword_1001AB9E8)
  {
    sub_100004A58(&qword_1001AB9F0);
    sub_10009E228();
    sub_10000A780(&qword_1001A6280, &qword_1001A6288);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AB9E8);
  }
  return result;
}

uint64_t sub_100109540(uint64_t a1)
{
  return a1;
}

uint64_t destroy for PlaybackView(uint64_t a1)
{
  sub_1000272B4(*(void *)a1, *(unsigned char *)(a1 + 8));

  return swift_release();
}

uint64_t _s16EventViewService12PlaybackViewVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  sub_10007D948(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PlaybackView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  sub_10007D948(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  sub_1000272B4(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for PlaybackView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  sub_1000272B4(v6, v7);
  *(void *)(a1 + 16) = a2[2];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for PlaybackView()
{
  return &type metadata for PlaybackView;
}

uint64_t sub_100109720()
{
  return sub_10010991C(&qword_1001ABA00, &qword_1001AB8A0, (void (*)(void))sub_100109764);
}

uint64_t sub_100109764()
{
  return sub_10010991C(&qword_1001ABA08, &qword_1001AB888, (void (*)(void))sub_100109794);
}

unint64_t sub_100109794()
{
  unint64_t result = qword_1001ABA10;
  if (!qword_1001ABA10)
  {
    sub_100004A58(&qword_1001AB880);
    sub_10000A780(&qword_1001AB898, &qword_1001AB878);
    sub_100109AC4((unint64_t *)&qword_1001A68E8, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001ABA10);
  }
  return result;
}

uint64_t sub_100109864()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100109880()
{
  sub_1000272B4(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1001098C4@<X0>(uint64_t a1@<X8>)
{
  return sub_100107A20(*(void *)(v1 + 32), a1);
}

uint64_t sub_1001098DC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100109914(uint64_t a1)
{
  return sub_100108C00(a1, *(void (**)(char *))(v1 + 16));
}

uint64_t sub_10010991C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100109998()
{
  unint64_t result = qword_1001ABA88;
  if (!qword_1001ABA88)
  {
    sub_100004A58(&qword_1001ABA90);
    sub_100004A58(&qword_1001A5728);
    type metadata accessor for CircularProgressViewStyle();
    sub_10000A780(&qword_1001A57A8, &qword_1001A5728);
    sub_100109AC4(&qword_1001ABA98, (void (*)(uint64_t))type metadata accessor for CircularProgressViewStyle);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001ABA88);
  }
  return result;
}

uint64_t sub_100109AC4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100109B0C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100109B74()
{
  return EnvironmentValues.controlSize.getter();
}

unint64_t sub_100109BA0()
{
  unint64_t result = qword_1001ABAF8;
  if (!qword_1001ABAF8)
  {
    sub_100004A58(&qword_1001ABA30);
    sub_100109C40();
    sub_10000A780(&qword_1001ABB10, &qword_1001ABB18);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001ABAF8);
  }
  return result;
}

unint64_t sub_100109C40()
{
  unint64_t result = qword_1001ABB00;
  if (!qword_1001ABB00)
  {
    sub_100004A58(&qword_1001ABA20);
    sub_10000A780(&qword_1001ABB08, &qword_1001ABA18);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001ABB00);
  }
  return result;
}

void *sub_100109CE0(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = sub_10000570C(&qword_1001AD200);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = a3[6];
    uint64_t v17 = a3[7];
    uint64_t v18 = (char *)v4 + v16;
    uint64_t v19 = (char *)a2 + v16;
    uint64_t v20 = *((void *)v19 + 1);
    *(void *)uint64_t v18 = *(void *)v19;
    *((void *)v18 + 1) = v20;
    v18[16] = v19[16];
    uint64_t v21 = *((void *)v19 + 3);
    LOBYTE(v19) = *((unsigned char *)a2 + v17);
    *((void *)v18 + 3) = v21;
    *((unsigned char *)v4 + v17) = (_BYTE)v19;
    uint64_t v22 = a3[8];
    uint64_t v23 = (void *)((char *)v4 + v22);
    uint64_t v24 = (void *)((char *)a2 + v22);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10000570C(&qword_1001A5470);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v25 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v26 = *(void *)(v25 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        uint64_t v27 = sub_10000570C(&qword_1001A5478);
        memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v26 + 16))(v23, v24, v25);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      }
    }
    else
    {
      *uint64_t v23 = *v24;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v4;
}

uint64_t sub_100109FD8(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(a2 + 32);
  sub_10000570C(&qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v11 = *(void *)(v8 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v7, 1, v8);
    if (!result)
    {
      uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
      return v10(v7, v8);
    }
  }
  else
  {
    return swift_release();
  }
  return result;
}

void *sub_10010A1B4(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = sub_10000570C(&qword_1001AD200);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = a3[6];
  uint64_t v15 = a3[7];
  uint64_t v16 = (char *)a1 + v14;
  uint64_t v17 = (char *)a2 + v14;
  uint64_t v18 = *((void *)v17 + 1);
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + 1) = v18;
  v16[16] = v17[16];
  uint64_t v19 = *((void *)v17 + 3);
  LOBYTE(v17) = *((unsigned char *)a2 + v15);
  *((void *)v16 + 3) = v19;
  *((unsigned char *)a1 + v15) = (_BYTE)v17;
  uint64_t v20 = a3[8];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000570C(&qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v23 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = sub_10000570C(&qword_1001A5478);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
  }
  else
  {
    *uint64_t v21 = *v22;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_10010A45C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000570C(&qword_1001AD200);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  *(void *)uint64_t v16 = *(void *)((char *)a2 + v15);
  *((void *)v16 + 1) = *(void *)((char *)a2 + v15 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16[16] = v17[16];
  *((void *)v16 + 3) = *((void *)v17 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  if (a1 != a2)
  {
    uint64_t v18 = a3[8];
    uint64_t v19 = (void *)((char *)a1 + v18);
    uint64_t v20 = (void *)((char *)a2 + v18);
    sub_10000ACE0((uint64_t)a1 + v18, &qword_1001A5470);
    sub_10000570C(&qword_1001A5470);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v21 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v22 = *(void *)(v21 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        uint64_t v23 = sub_10000570C(&qword_1001A5478);
        memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v22 + 16))(v19, v20, v21);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      }
    }
    else
    {
      *uint64_t v19 = *v20;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *sub_10010A7A8(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_10000570C(&qword_1001AD200);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (_OWORD *)((char *)a1 + v12);
  uint64_t v15 = (_OWORD *)((char *)a2 + v12);
  long long v16 = *v15;
  long long v17 = v15[1];
  LOBYTE(v15) = *((unsigned char *)a2 + v13);
  *uint64_t v14 = v16;
  v14[1] = v17;
  *((unsigned char *)a1 + v13) = (_BYTE)v15;
  uint64_t v18 = a3[8];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = sub_10000570C(&qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22))
    {
      uint64_t v24 = sub_10000570C(&qword_1001A5478);
      memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v19, v20, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v19, 0, 1, v22);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  return a1;
}

void *sub_10010AA2C(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_10000570C(&qword_1001AD200);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = a3[6];
  long long v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = *(void *)((char *)a2 + v16 + 8);
  *(void *)long long v17 = *(void *)((char *)a2 + v16);
  *((void *)v17 + 1) = v19;
  swift_bridgeObjectRelease();
  v17[16] = v18[16];
  *((void *)v17 + 3) = *((void *)v18 + 3);
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  if (a1 != a2)
  {
    uint64_t v20 = a3[8];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    sub_10000ACE0((uint64_t)a1 + v20, &qword_1001A5470);
    uint64_t v23 = sub_10000570C(&qword_1001A5470);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v24 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v25 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24))
      {
        uint64_t v26 = sub_10000570C(&qword_1001A5478);
        memcpy(v21, v22, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v21, v22, v24);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10010AD58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10010AD6C);
}

uint64_t sub_10010AD6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000570C(&qword_1001AD200);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10000570C(&qword_1001A5F10);
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 32);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_10010AEA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10010AEB4);
}

uint64_t sub_10010AEB4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_10000570C(&qword_1001AD200);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10000570C(&qword_1001A5F10);
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 32);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for ArtistEventListHeader(uint64_t a1)
{
  return sub_10003859C(a1, qword_1001ABB78);
}

void sub_10010B008()
{
  sub_10006531C();
  if (v0 <= 0x3F)
  {
    sub_100025218();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t destroy for VenueEventListHeader()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for VenueEventListHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VenueEventListHeader(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for VenueEventListHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

ValueMetadata *type metadata accessor for VenueEventListHeader()
{
  return &type metadata for VenueEventListHeader;
}

uint64_t sub_10010B2CC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10010B2E8@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = v1;
  uint64_t v4 = sub_10000570C(&qword_1001ABBC0);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000570C(&qword_1001ABBC8);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = static VerticalAlignment.top.getter();
  uint64_t v13 = type metadata accessor for ArtistEventListHeader(0);
  uint64_t v14 = 0x4024000000000000;
  if (*((unsigned char *)v2 + *(int *)(v13 + 28))) {
    uint64_t v14 = 0x4020000000000000;
  }
  *(void *)uint64_t v7 = v12;
  *((void *)v7 + 1) = v14;
  v7[16] = 0;
  uint64_t v15 = sub_10000570C(&qword_1001ABBD0);
  sub_10010B474(v2, (uint64_t)&v7[*(int *)(v15 + 44)]);
  uint64_t v16 = static Alignment.leading.getter();
  sub_1001251F8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v11, 0.0, 1, 0.0, 1, v16, v17);
  sub_10000ACE0((uint64_t)v7, &qword_1001ABBC0);
  return sub_10000A3C4((uint64_t)v11, a1, &qword_1001ABBC8);
}

uint64_t sub_10010B474@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v128 = a2;
  uint64_t v126 = type metadata accessor for HeaderText(0);
  uint64_t v4 = __chkstk_darwin(v126, v3);
  long long v108 = (uint64_t *)((char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4, v6);
  uint64_t v127 = (uint64_t)&v99 - v7;
  uint64_t v8 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v9 = *(void **)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v103 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = sub_10000570C(&qword_1001A5FB0);
  uint64_t v13 = __chkstk_darwin(v131, v12);
  uint64_t v122 = (uint64_t)&v99 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  uint64_t v129 = (uint64_t)&v99 - v16;
  uint64_t v17 = sub_10000570C(&qword_1001A5478);
  uint64_t v19 = __chkstk_darwin(v17 - 8, v18);
  uint64_t v102 = (uint64_t)&v99 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v130 = (uint64_t)&v99 - v23;
  uint64_t v25 = __chkstk_darwin(v22, v24);
  uint64_t v114 = (char *)&v99 - v26;
  uint64_t v28 = __chkstk_darwin(v25, v27);
  uint64_t v109 = (uint64_t)&v99 - v29;
  uint64_t v31 = __chkstk_darwin(v28, v30);
  uint64_t v33 = (char *)&v99 - v32;
  __chkstk_darwin(v31, v34);
  uint64_t v36 = (char *)&v99 - v35;
  uint64_t v37 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v37 - 8, v38);
  uint64_t v40 = (char *)&v99 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_10000570C(&qword_1001ABBD8);
  uint64_t v119 = *(void *)(v41 - 8);
  uint64_t v120 = v41;
  __chkstk_darwin(v41, v42);
  uint64_t v44 = (char *)&v99 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = sub_10000570C(&qword_1001ABBE0);
  __chkstk_darwin(v115, v45);
  char v117 = (char *)&v99 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = sub_10000570C(&qword_1001ABBE8);
  uint64_t v48 = __chkstk_darwin(v116, v47);
  uint64_t v124 = (uint64_t)&v99 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = __chkstk_darwin(v48, v50);
  uint64_t v113 = (uint64_t)&v99 - v52;
  __chkstk_darwin(v51, v53);
  uint64_t v123 = (uint64_t)&v99 - v54;
  uint64_t v55 = (int *)type metadata accessor for ArtistEventListHeader(0);
  sub_10000A428((uint64_t)a1 + v55[5], (uint64_t)v40, &qword_1001AD200);
  static Animation.easeInOut.getter();
  Transaction.init(animation:)();
  sub_10000570C(&qword_1001ABBF0);
  sub_10010D2B4();
  uint64_t v118 = v44;
  AsyncImage.init(url:scale:transaction:content:)();
  uint64_t v112 = v55;
  uint64_t v56 = v55[8];
  uint64_t v111 = v55[7];
  int v110 = *((unsigned __int8 *)a1 + v111);
  uint64_t v125 = a1;
  uint64_t v57 = (char *)a1 + v56;
  uint64_t v58 = v129;
  uint64_t v107 = v57;
  sub_100026824((uint64_t)v36);
  uint64_t v59 = (void (*)(void))v9[13];
  unsigned int v106 = enum case for UserInterfaceSizeClass.compact(_:);
  long long v105 = (void (*)(uint64_t, void, uint64_t))v59;
  v59(v33);
  uint64_t v104 = (void (*)(char *, void, uint64_t, uint64_t))v9[7];
  v104(v33, 0, 1, v8);
  uint64_t v60 = v58 + *(int *)(v131 + 48);
  sub_10000A428((uint64_t)v36, v58, &qword_1001A5478);
  sub_10000A428((uint64_t)v33, v60, &qword_1001A5478);
  uint64_t v121 = v9;
  uint64_t v61 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v9[6];
  if (v61(v58, 1, v8) == 1)
  {
    sub_10000ACE0((uint64_t)v33, &qword_1001A5478);
    sub_10000ACE0((uint64_t)v36, &qword_1001A5478);
    if (v61(v60, 1, v8) == 1)
    {
      sub_10000ACE0(v58, &qword_1001A5478);
      double v62 = 25.0;
      uint64_t v63 = (uint64_t)v114;
      goto LABEL_9;
    }
  }
  else
  {
    sub_10000A428(v58, v109, &qword_1001A5478);
    if (v61(v60, 1, v8) != 1)
    {
      uint64_t v64 = v121;
      uint64_t v65 = (void (*)(char *, uint64_t, uint64_t))v121[4];
      BOOL v100 = v36;
      uint64_t v66 = v103;
      v65(v103, v60, v8);
      sub_1001100E4((unint64_t *)&qword_1001A6040, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
      uint64_t v67 = v109;
      int v101 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v68 = (void (*)(char *, uint64_t))v64[1];
      v68(v66, v8);
      sub_10000ACE0((uint64_t)v33, &qword_1001A5478);
      sub_10000ACE0((uint64_t)v100, &qword_1001A5478);
      v68((char *)v67, v8);
      sub_10000ACE0(v129, &qword_1001A5478);
      double v62 = 25.0;
      uint64_t v63 = (uint64_t)v114;
      if (v101) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    sub_10000ACE0((uint64_t)v33, &qword_1001A5478);
    sub_10000ACE0((uint64_t)v36, &qword_1001A5478);
    ((void (*)(uint64_t, uint64_t))v121[1])(v109, v8);
  }
  sub_10000ACE0(v58, &qword_1001A5FB0);
  uint64_t v63 = (uint64_t)v114;
LABEL_8:
  double v62 = 30.0;
LABEL_9:
  sub_100026824(v63);
  uint64_t v69 = v130;
  v105(v130, v106, v8);
  uint64_t v70 = v69;
  v104((char *)v69, 0, 1, v8);
  uint64_t v71 = v122;
  uint64_t v72 = v122 + *(int *)(v131 + 48);
  sub_10000A428(v63, v122, &qword_1001A5478);
  sub_10000A428(v70, v72, &qword_1001A5478);
  if (v61(v71, 1, v8) != 1)
  {
    uint64_t v74 = v102;
    sub_10000A428(v71, v102, &qword_1001A5478);
    if (v61(v72, 1, v8) != 1)
    {
      uint64_t v75 = v121;
      uint64_t v76 = v103;
      ((void (*)(char *, uint64_t, uint64_t))v121[4])(v103, v72, v8);
      sub_1001100E4((unint64_t *)&qword_1001A6040, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
      char v77 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v78 = (void (*)(char *, uint64_t))v75[1];
      v78(v76, v8);
      sub_10000ACE0(v130, &qword_1001A5478);
      sub_10000ACE0(v63, &qword_1001A5478);
      v78((char *)v74, v8);
      sub_10000ACE0(v71, &qword_1001A5478);
      double v73 = 25.0;
      if (v77) {
        goto LABEL_17;
      }
LABEL_16:
      double v73 = 30.0;
      goto LABEL_17;
    }
    sub_10000ACE0(v130, &qword_1001A5478);
    sub_10000ACE0(v63, &qword_1001A5478);
    ((void (*)(uint64_t, uint64_t))v121[1])(v74, v8);
LABEL_14:
    sub_10000ACE0(v71, &qword_1001A5FB0);
    goto LABEL_16;
  }
  sub_10000ACE0(v70, &qword_1001A5478);
  sub_10000ACE0(v63, &qword_1001A5478);
  if (v61(v72, 1, v8) != 1) {
    goto LABEL_14;
  }
  sub_10000ACE0(v71, &qword_1001A5478);
  double v73 = 25.0;
LABEL_17:
  uint64_t v80 = v118;
  uint64_t v79 = v119;
  uint64_t v81 = (uint64_t)v117;
  uint64_t v82 = v120;
  (*(void (**)(char *, char *, uint64_t))(v119 + 16))(v117, v118, v120);
  uint64_t v83 = v81 + *(int *)(v115 + 36);
  *(unsigned char *)uint64_t v83 = v110;
  *(void *)(v83 + 8) = 0x404E000000000000;
  *(double *)(v83 + 16) = v62;
  *(void *)(v83 + 24) = 0x404E000000000000;
  *(double *)(v83 + 32) = v73;
  (*(void (**)(char *, uint64_t))(v79 + 8))(v80, v82);
  uint64_t v84 = v113;
  sub_10000A428(v81, v113, &qword_1001ABBE0);
  *(unsigned char *)(v84 + *(int *)(v116 + 36)) = 1;
  sub_10000ACE0(v81, &qword_1001ABBE0);
  uint64_t v85 = v123;
  sub_10000A3C4(v84, v123, &qword_1001ABBE8);
  uint64_t v86 = v125[1];
  uint64_t v87 = (char *)v125 + v112[6];
  uint64_t v88 = *(void *)v87;
  uint64_t v89 = *((void *)v87 + 1);
  char v90 = v87[16];
  uint64_t v91 = *((void *)v87 + 3);
  LOBYTE(v87) = *((unsigned char *)v125 + v111);
  uint64_t v92 = (uint64_t)v108;
  *long long v108 = *v125;
  *(void *)(v92 + 8) = v86;
  *(void *)(v92 + 16) = v88;
  *(void *)(v92 + 24) = v89;
  *(unsigned char *)(v92 + 32) = v90;
  *(void *)(v92 + 40) = v91;
  *(unsigned char *)(v92 + 48) = (_BYTE)v87;
  uint64_t v93 = (uint64_t *)(v92 + *(int *)(v126 + 28));
  uint64_t *v93 = swift_getKeyPath();
  sub_10000570C(&qword_1001A5470);
  swift_storeEnumTagMultiPayload();
  uint64_t v94 = v127;
  sub_10010ED40(v92, v127);
  uint64_t v95 = v124;
  sub_10000A428(v85, v124, &qword_1001ABBE8);
  sub_10010EF14(v94, v92, type metadata accessor for HeaderText);
  uint64_t v96 = v128;
  sub_10000A428(v95, v128, &qword_1001ABBE8);
  uint64_t v97 = sub_10000570C(&qword_1001ABC28);
  sub_10010EF14(v92, v96 + *(int *)(v97 + 48), type metadata accessor for HeaderText);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10010EF7C(v94, type metadata accessor for HeaderText);
  sub_10000ACE0(v85, &qword_1001ABBE8);
  sub_10010EF7C(v92, type metadata accessor for HeaderText);
  return sub_10000ACE0(v95, &qword_1001ABBE8);
}

uint64_t sub_10010C0CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Image.ResizingMode();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AsyncImagePhase();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (void *)((char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(void *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  int v14 = (*(uint64_t (**)(void *, uint64_t))(v10 + 88))(v13, v9);
  if (v14 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(void *, uint64_t))(v10 + 96))(v13, v9);
    *(void *)&long long v25 = *v13;
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, enum case for Image.ResizingMode.stretch(_:), v4);
    uint64_t v15 = Image.resizable(capInsets:resizingMode:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    static Color.black.getter();
    uint64_t v16 = Color.opacity(_:)();
    swift_release();
    *(void *)&long long v26 = v15;
    *((void *)&v26 + 1) = v16;
    *(_OWORD *)uint64_t v27 = xmmword_100153F70;
    *(void *)&v27[16] = 0x4010000000000000;
    v27[24] = 0;
    swift_retain();
    swift_retain();
    sub_10000570C(&qword_1001A9E60);
    sub_10000570C(&qword_1001ABC18);
    sub_10010EFDC(&qword_1001A9E58, &qword_1001A9E60, (void (*)(void))sub_1000CB670);
    sub_10010D3D8();
    _ConditionalContent<>.init(storage:)();
    long long v26 = v28;
    *(_OWORD *)uint64_t v27 = v29;
    *(void *)&v27[16] = v30;
    *(_WORD *)&v27[24] = v31;
    sub_10010EDAC();
    sub_10000570C(&qword_1001ABC08);
    sub_10010D330();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    sub_10010EDF0();
  }
  else
  {
    if (v14 == enum case for AsyncImagePhase.failure(_:))
    {
      (*(void (**)(void *, uint64_t))(v10 + 96))(v13, v9);
      swift_errorRelease();
    }
    else if (v14 != enum case for AsyncImagePhase.empty(_:))
    {
      long long v26 = 0u;
      memset(v27, 0, 25);
      v27[25] = 1;
      sub_10000570C(&qword_1001ABC08);
      sub_10010D330();
      _ConditionalContent<>.init(storage:)();
      long long v24 = v29;
      long long v25 = v28;
      uint64_t v21 = v30;
      unsigned __int8 v22 = v31;
      char v23 = v32;
      uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v10 + 8))(v13, v9);
      long long v20 = v24;
      long long v19 = v25;
      goto LABEL_10;
    }
    if (qword_1001A4E58 != -1) {
      swift_once();
    }
    uint64_t v17 = qword_1001B74F8;
    *(void *)&long long v26 = swift_getKeyPath();
    *((void *)&v26 + 1) = v17;
    memset(v27, 0, 24);
    v27[24] = 1;
    swift_retain_n();
    swift_retain();
    sub_10000570C(&qword_1001A9E60);
    sub_10000570C(&qword_1001ABC18);
    sub_10010EFDC(&qword_1001A9E58, &qword_1001A9E60, (void (*)(void))sub_1000CB670);
    sub_10010D3D8();
    _ConditionalContent<>.init(storage:)();
    long long v26 = v28;
    *(_OWORD *)uint64_t v27 = v29;
    *(void *)&v27[16] = v30;
    *(_WORD *)&v27[24] = v31;
    sub_10000570C(&qword_1001ABC08);
    sub_10010D330();
    _ConditionalContent<>.init(storage:)();
  }
  swift_release();
  uint64_t result = swift_release();
  long long v19 = v28;
  long long v20 = v29;
  uint64_t v21 = v30;
  unsigned __int8 v22 = v31;
  char v23 = v32;
LABEL_10:
  *(_OWORD *)a2 = v19;
  *(_OWORD *)(a2 + 16) = v20;
  *(void *)(a2 + 32) = v21;
  *(unsigned char *)(a2 + 40) = v22;
  *(unsigned char *)(a2 + 41) = v23;
  return result;
}

uint64_t sub_10010C678@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v123 = a2;
  uint64_t v124 = a1;
  uint64_t v121 = type metadata accessor for HeaderText(0) - 8;
  uint64_t v3 = ((uint64_t (*)(uint64_t, uint64_t))__chkstk_darwin)(v121, v2);
  uint64_t v120 = (_OWORD *)((char *)v103 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3, v5);
  uint64_t v122 = (uint64_t)v103 - v6;
  uint64_t v119 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin(v119, v7);
  uint64_t v118 = (char *)v103 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for MapInteractionModes();
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v114 = (char *)v103 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000570C(&qword_1001A74B8);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v109 = (char *)v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = type metadata accessor for MapCamera();
  uint64_t v15 = *(void *)(v106 - 8);
  __chkstk_darwin(v106, v16);
  uint64_t v18 = (char *)v103 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = type metadata accessor for MapCameraPosition();
  uint64_t v105 = *(void *)(v104 - 8);
  __chkstk_darwin(v104, v19);
  uint64_t v21 = (char *)v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000570C(&qword_1001A74C0);
  __chkstk_darwin(v22 - 8, v23);
  v103[1] = (char *)v103 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = sub_10000570C(&qword_1001ABC40);
  uint64_t v25 = *(void *)(v107 - 8);
  __chkstk_darwin(v107, v26);
  long long v28 = (char *)v103 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_10000570C(&qword_1001ABC48);
  uint64_t v30 = v29 - 8;
  __chkstk_darwin(v29, v31);
  uint64_t v33 = (char *)v103 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_10000570C(&qword_1001ABC50);
  uint64_t v35 = v34 - 8;
  __chkstk_darwin(v34, v36);
  uint64_t v38 = (char *)v103 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_10000570C(&qword_1001ABC58);
  uint64_t v40 = v39 - 8;
  __chkstk_darwin(v39, v41);
  long long v108 = (char *)v103 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = sub_10000570C(&qword_1001ABC60);
  __chkstk_darwin(v115, v43);
  uint64_t v111 = (uint64_t)v103 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_10000570C(&qword_1001ABC68);
  __chkstk_darwin(v45 - 8, v46);
  uint64_t v113 = (char *)v103 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = sub_10000570C(&qword_1001ABC70) - 8;
  uint64_t v49 = ((uint64_t (*)(uint64_t, uint64_t))__chkstk_darwin)(v116, v48);
  uint64_t v117 = (uint64_t)v103 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = ((uint64_t (*)(uint64_t, uint64_t))__chkstk_darwin)(v49, v51);
  uint64_t v110 = (uint64_t)v103 - v53;
  __chkstk_darwin(v52, v54);
  uint64_t v112 = (uint64_t)v103 - v55;
  MapCamera.init(centerCoordinate:distance:heading:pitch:)();
  static MapCameraPosition.camera(_:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v106);
  uint64_t v56 = v104;
  static Binding.constant(_:)();
  (*(void (**)(char *, uint64_t))(v105 + 8))(v21, v56);
  uint64_t v57 = type metadata accessor for MapCameraBounds();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v109, 1, 1, v57);
  static MapInteractionModes.all.getter();
  Map.init<>(position:bounds:interactionModes:scope:)();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v59 = swift_allocObject();
  *(unsigned char *)(v59 + 16) = 1;
  uint64_t v60 = v107;
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v33, v28, v107);
  uint64_t v61 = (uint64_t *)&v33[*(int *)(v30 + 44)];
  *uint64_t v61 = KeyPath;
  v61[1] = (uint64_t)sub_10010EEFC;
  _OWORD v61[2] = v59;
  (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v60);
  LOBYTE(KeyPath) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v63 = v62;
  uint64_t v65 = v64;
  uint64_t v67 = v66;
  uint64_t v69 = v68;
  sub_10000A428((uint64_t)v33, (uint64_t)v38, &qword_1001ABC48);
  uint64_t v70 = &v38[*(int *)(v35 + 44)];
  *uint64_t v70 = KeyPath;
  *((void *)v70 + 1) = v63;
  *((void *)v70 + 2) = v65;
  *((void *)v70 + 3) = v67;
  *((void *)v70 + 4) = v69;
  v70[40] = 0;
  sub_10000ACE0((uint64_t)v33, &qword_1001ABC48);
  uint64_t v71 = v118;
  uint64_t v72 = &v118[*(int *)(v119 + 28)];
  uint64_t v73 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v74 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v74 - 8) + 104))(v72, v73, v74);
  __asm { FMOV            V0.2D, #8.0 }
  *uint64_t v71 = _Q0;
  uint64_t v80 = (uint64_t)v108;
  uint64_t v81 = (uint64_t)&v108[*(int *)(v40 + 44)];
  sub_10010EF14((uint64_t)v71, v81, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v81 + *(int *)(sub_10000570C(&qword_1001A62A8) + 36)) = 256;
  sub_10000A428((uint64_t)v38, v80, &qword_1001ABC50);
  sub_10010EF7C((uint64_t)v71, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_10000ACE0((uint64_t)v38, &qword_1001ABC50);
  uint64_t v82 = v124;
  LOBYTE(v73) = *((unsigned char *)v124 + 48);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v83 = v111;
  sub_10000A428(v80, v111, &qword_1001ABC58);
  uint64_t v84 = (_OWORD *)(v83 + *(int *)(v115 + 36));
  long long v85 = v126;
  *uint64_t v84 = v125;
  v84[1] = v85;
  void v84[2] = v127;
  sub_10000ACE0(v80, &qword_1001ABC58);
  sub_10010EFDC(&qword_1001ABC78, &qword_1001ABC60, (void (*)(void))sub_10010F058);
  uint64_t v86 = (uint64_t)v113;
  View.accessibility(hidden:)();
  sub_10000ACE0(v83, &qword_1001ABC60);
  uint64_t v87 = v110;
  sub_10000A428(v86, v110, &qword_1001ABC68);
  *(unsigned char *)(v87 + *(int *)(v116 + 44)) = 1;
  sub_10000ACE0(v86, &qword_1001ABC68);
  uint64_t v88 = v112;
  sub_10000A3C4(v87, v112, &qword_1001ABC70);
  long long v89 = *v82;
  long long v129 = v82[1];
  long long v90 = v129;
  long long v130 = v89;
  uint64_t v92 = *((void *)v82 + 4);
  uint64_t v128 = *((void *)v82 + 5);
  uint64_t v91 = v128;
  uint64_t v93 = v120;
  *uint64_t v120 = v89;
  v93[1] = v90;
  *((void *)v93 + 4) = v92;
  *((void *)v93 + 5) = v91;
  *((unsigned char *)v93 + 48) = v73;
  uint64_t v94 = (uint64_t *)((char *)v93 + *(int *)(v121 + 36));
  uint64_t v95 = (uint64_t)v93;
  uint64_t *v94 = swift_getKeyPath();
  sub_10000570C(&qword_1001A5470);
  swift_storeEnumTagMultiPayload();
  uint64_t v96 = v122;
  sub_10010ED40(v95, v122);
  uint64_t v97 = v88;
  uint64_t v98 = v117;
  sub_10000A428(v88, v117, &qword_1001ABC70);
  sub_10010EF14(v96, v95, type metadata accessor for HeaderText);
  uint64_t v99 = v123;
  sub_10000A428(v98, v123, &qword_1001ABC70);
  uint64_t v100 = sub_10000570C(&qword_1001ABCA0);
  sub_10010EF14(v95, v99 + *(int *)(v100 + 48), type metadata accessor for HeaderText);
  uint64_t v101 = v99 + *(int *)(v100 + 64);
  *(void *)uint64_t v101 = 0;
  *(unsigned char *)(v101 + 8) = 1;
  sub_100012A58((uint64_t)&v130);
  sub_100012A58((uint64_t)&v129);
  sub_100058A48((uint64_t)&v128);
  sub_10010EF7C(v96, type metadata accessor for HeaderText);
  sub_10000ACE0(v97, &qword_1001ABC70);
  sub_10010EF7C(v95, type metadata accessor for HeaderText);
  return sub_10000ACE0(v98, &qword_1001ABC70);
}

uint64_t sub_10010D198@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000570C(&qword_1001ABC30);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v7 = *(_OWORD *)(v1 + 48);
  _OWORD v13[2] = *(_OWORD *)(v1 + 32);
  long long v14 = v7;
  uint64_t v15 = *(void *)(v1 + 64);
  long long v8 = *(_OWORD *)(v1 + 16);
  v13[0] = *(_OWORD *)v1;
  v13[1] = v8;
  uint64_t v9 = static VerticalAlignment.top.getter();
  uint64_t v10 = 0x4020000000000000;
  if ((v14 & 1) == 0) {
    uint64_t v10 = 0x4024000000000000;
  }
  *(void *)uint64_t v6 = v9;
  *((void *)v6 + 1) = v10;
  v6[16] = 0;
  uint64_t v11 = sub_10000570C(&qword_1001ABC38);
  sub_10010C678(v13, (uint64_t)&v6[*(int *)(v11 + 44)]);
  return sub_10000A3C4((uint64_t)v6, a1, &qword_1001ABC30);
}

uint64_t sub_10010D278()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for HeaderText(uint64_t a1)
{
  return sub_10003859C(a1, qword_1001ABD00);
}

unint64_t sub_10010D2B4()
{
  unint64_t result = qword_1001ABBF8;
  if (!qword_1001ABBF8)
  {
    sub_100004A58(&qword_1001ABBF0);
    sub_10010D330();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001ABBF8);
  }
  return result;
}

unint64_t sub_10010D330()
{
  unint64_t result = qword_1001ABC00;
  if (!qword_1001ABC00)
  {
    sub_100004A58(&qword_1001ABC08);
    sub_10010EFDC(&qword_1001A9E58, &qword_1001A9E60, (void (*)(void))sub_1000CB670);
    sub_10010D3D8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001ABC00);
  }
  return result;
}

unint64_t sub_10010D3D8()
{
  unint64_t result = qword_1001ABC10;
  if (!qword_1001ABC10)
  {
    sub_100004A58(&qword_1001ABC18);
    sub_10010D478();
    sub_10000A780(&qword_1001A68C0, &qword_1001A68C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001ABC10);
  }
  return result;
}

unint64_t sub_10010D478()
{
  unint64_t result = qword_1001ABC20;
  if (!qword_1001ABC20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001ABC20);
  }
  return result;
}

uint64_t sub_10010D4CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v74 = a1;
  uint64_t v2 = type metadata accessor for AccessibilityTraits();
  uint64_t v72 = *(void *)(v2 - 8);
  uint64_t v73 = v2;
  __chkstk_darwin(v2, v3);
  uint64_t v71 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v68 = *(void *)(v5 - 8);
  uint64_t v69 = v5;
  __chkstk_darwin(v5, v6);
  uint64_t v67 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for HeaderText(0);
  __chkstk_darwin(v8, v9);
  uint64_t v65 = (uint64_t)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v58 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000570C(&qword_1001A5FB0);
  uint64_t v16 = v15 - 8;
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000570C(&qword_1001A5478);
  __chkstk_darwin(v20 - 8, v21);
  uint64_t v59 = (uint64_t)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v24);
  uint64_t v26 = (char *)&v58 - v25;
  __chkstk_darwin(v27, v28);
  uint64_t v30 = (char *)&v58 - v29;
  uint64_t v63 = sub_10000570C(&qword_1001ABD58);
  __chkstk_darwin(v63, v31);
  uint64_t v33 = (char *)&v58 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_10000570C(&qword_1001ABD60);
  uint64_t v64 = *(void *)(v66 - 8);
  __chkstk_darwin(v66, v34);
  uint64_t v62 = (char *)&v58 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_10000570C(&qword_1001ABD68);
  __chkstk_darwin(v36 - 8, v37);
  uint64_t v61 = (char *)&v58 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = static HorizontalAlignment.leading.getter();
  uint64_t v70 = v1;
  sub_100026824((uint64_t)v30);
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v26, enum case for UserInterfaceSizeClass.compact(_:), v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v26, 0, 1, v11);
  uint64_t v39 = (uint64_t)&v19[*(int *)(v16 + 56)];
  sub_10000A428((uint64_t)v30, (uint64_t)v19, &qword_1001A5478);
  sub_10000A428((uint64_t)v26, v39, &qword_1001A5478);
  uint64_t v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v40((uint64_t)v19, 1, v11) == 1)
  {
    sub_10000ACE0((uint64_t)v26, &qword_1001A5478);
    sub_10000ACE0((uint64_t)v30, &qword_1001A5478);
    if (v40(v39, 1, v11) == 1)
    {
      sub_10000ACE0((uint64_t)v19, &qword_1001A5478);
      uint64_t v41 = v70;
      uint64_t v42 = v65;
      sub_10010EF14(v70, v65, type metadata accessor for HeaderText);
LABEL_8:
      sub_10010EF7C(v42, type metadata accessor for HeaderText);
      uint64_t v47 = 0x3FF0000000000000;
      goto LABEL_11;
    }
    goto LABEL_6;
  }
  sub_10000A428((uint64_t)v19, v59, &qword_1001A5478);
  if (v40(v39, 1, v11) == 1)
  {
    sub_10000ACE0((uint64_t)v26, &qword_1001A5478);
    sub_10000ACE0((uint64_t)v30, &qword_1001A5478);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v59, v11);
LABEL_6:
    sub_10000ACE0((uint64_t)v19, &qword_1001A5FB0);
    uint64_t v41 = v70;
    uint64_t v42 = v65;
    sub_10010EF14(v70, v65, type metadata accessor for HeaderText);
    goto LABEL_9;
  }
  uint64_t v43 = v58;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v58, v39, v11);
  sub_1001100E4((unint64_t *)&qword_1001A6040, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
  uint64_t v44 = v59;
  char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v46 = *(void (**)(char *, uint64_t))(v12 + 8);
  v46(v43, v11);
  sub_10000ACE0((uint64_t)v26, &qword_1001A5478);
  sub_10000ACE0((uint64_t)v30, &qword_1001A5478);
  v46((char *)v44, v11);
  sub_10000ACE0((uint64_t)v19, &qword_1001A5478);
  uint64_t v41 = v70;
  uint64_t v42 = v65;
  sub_10010EF14(v70, v65, type metadata accessor for HeaderText);
  if (v45) {
    goto LABEL_8;
  }
LABEL_9:
  int v48 = *(unsigned __int8 *)(v42 + 48);
  sub_10010EF7C(v42, type metadata accessor for HeaderText);
  uint64_t v47 = 0x4014000000000000;
  if (v48) {
    uint64_t v47 = 0x3FF0000000000000;
  }
LABEL_11:
  *(void *)uint64_t v33 = v60;
  *((void *)v33 + 1) = v47;
  v33[16] = 0;
  uint64_t v49 = sub_10000570C(&qword_1001ABD70);
  sub_10010DD2C(v41, (uint64_t)&v33[*(int *)(v49 + 44)]);
  uint64_t v50 = v67;
  static AccessibilityChildBehavior.combine.getter();
  uint64_t v51 = sub_10000A780(&qword_1001ABD78, &qword_1001ABD58);
  uint64_t v53 = v62;
  uint64_t v52 = v63;
  View.accessibilityElement(children:)();
  (*(void (**)(char *, uint64_t))(v68 + 8))(v50, v69);
  sub_10000ACE0((uint64_t)v33, &qword_1001ABD58);
  uint64_t v54 = v71;
  static AccessibilityTraits.isHeader.getter();
  uint64_t v75 = v52;
  uint64_t v76 = v51;
  swift_getOpaqueTypeConformance2();
  uint64_t v55 = (uint64_t)v61;
  uint64_t v56 = v66;
  View.accessibility(addTraits:)();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v54, v73);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v53, v56);
  return sub_10000A3C4(v55, v74, &qword_1001ABD68);
}

uint64_t sub_10010DD2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v161 = a2;
  uint64_t v159 = sub_10000570C(&qword_1001ABD80);
  uint64_t v157 = *(void *)(v159 - 8);
  __chkstk_darwin(v159, v3);
  uint64_t v169 = (char *)&v135 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = sub_10000570C(&qword_1001ABD88);
  __chkstk_darwin(v156, v5);
  uint64_t v160 = (uint64_t)&v135 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  uint64_t v155 = (char *)&v135 - v9;
  __chkstk_darwin(v10, v11);
  uint64_t v158 = (uint64_t)&v135 - v12;
  uint64_t v168 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v167 = *(void *)(v168 - 8);
  __chkstk_darwin(v168 - 8, v13);
  uint64_t v137 = (char *)&v135 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = sub_10000570C(&qword_1001A5FB0);
  __chkstk_darwin(v165, v15);
  uint64_t v154 = (uint64_t)&v135 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v18);
  uint64_t v150 = (uint64_t)&v135 - v19;
  uint64_t v20 = sub_10000570C(&qword_1001A5478);
  __chkstk_darwin(v20 - 8, v21);
  uint64_t v23 = (char *)&v135 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v25);
  uint64_t v151 = (char *)&v135 - v26;
  __chkstk_darwin(v27, v28);
  uint64_t v152 = (uint64_t)&v135 - v29;
  __chkstk_darwin(v30, v31);
  uint64_t v135 = (uint64_t)&v135 - v32;
  __chkstk_darwin(v33, v34);
  uint64_t v164 = (uint64_t)&v135 - v35;
  __chkstk_darwin(v36, v37);
  uint64_t v147 = (uint64_t)&v135 - v38;
  uint64_t v144 = sub_10000570C(&qword_1001A67B8);
  __chkstk_darwin(v144, v39);
  uint64_t v41 = (uint64_t *)((char *)&v135 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v42 = sub_10000570C(&qword_1001A67C0);
  __chkstk_darwin(v42 - 8, v43);
  long long v146 = (char *)&v135 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = sub_10000570C(&qword_1001A67C8);
  __chkstk_darwin(v143, v45);
  uint64_t v47 = (char *)&v135 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = sub_10000570C(&qword_1001ABD90);
  __chkstk_darwin(v145, v48);
  uint64_t v162 = (uint64_t)&v135 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = sub_10000570C(&qword_1001ABD98);
  __chkstk_darwin(v149, v50);
  uint64_t v153 = (uint64_t)&v135 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v52, v53);
  uint64_t v148 = (uint64_t)&v135 - v54;
  __chkstk_darwin(v55, v56);
  uint64_t v166 = (uint64_t)&v135 - v57;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v58 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v60 = v59;
  char v62 = v61;
  uint64_t v163 = a1;
  int v63 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v136 = v23;
  if (v63 == 1) {
    static Font.Weight.regular.getter();
  }
  else {
    static Font.Weight.semibold.getter();
  }
  uint64_t v64 = Text.fontWeight(_:)();
  uint64_t v66 = v65;
  unsigned int v142 = v67;
  uint64_t v69 = v68;
  sub_10000FCC4(v58, v60, v62 & 1);
  swift_bridgeObjectRelease();
  if (v63)
  {
    uint64_t v70 = type metadata accessor for Text.Case();
    uint64_t v71 = (uint64_t)v146;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v146, 1, 1, v70);
  }
  else
  {
    uint64_t v72 = enum case for Text.Case.uppercase(_:);
    uint64_t v73 = type metadata accessor for Text.Case();
    uint64_t v74 = *(void *)(v73 - 8);
    uint64_t v71 = (uint64_t)v146;
    (*(void (**)(char *, uint64_t, uint64_t))(v74 + 104))(v146, v72, v73);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
  }
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000A428(v71, (uint64_t)v41 + *(int *)(v144 + 28), &qword_1001A67C0);
  *uint64_t v41 = KeyPath;
  sub_10000A428((uint64_t)v41, (uint64_t)&v47[*(int *)(v143 + 36)], &qword_1001A67B8);
  *(void *)uint64_t v47 = v64;
  *((void *)v47 + 1) = v66;
  char v76 = v142;
  char v77 = v142 & 1;
  v47[16] = v142 & 1;
  *((void *)v47 + 3) = v69;
  sub_10000FCD4(v64, v66, v76 & 1);
  swift_bridgeObjectRetain();
  sub_10000ACE0((uint64_t)v41, &qword_1001A67B8);
  sub_10000ACE0(v71, &qword_1001A67C0);
  sub_10000FCC4(v64, v66, v77);
  swift_bridgeObjectRelease();
  uint64_t v78 = v162;
  sub_10000A428((uint64_t)v47, v162, &qword_1001A67C8);
  *(void *)(v78 + *(int *)(v145 + 36)) = 0x3FE0000000000000;
  sub_10000ACE0((uint64_t)v47, &qword_1001A67C8);
  uint64_t v79 = v163;
  int v139 = *(unsigned __int8 *)(v163 + 48);
  uint64_t v138 = static Font.caption2.getter();
  uint64_t v80 = type metadata accessor for HeaderText(0);
  uint64_t v81 = v147;
  uint64_t v145 = v79 + *(int *)(v80 + 28);
  sub_100026824(v147);
  uint64_t v82 = v167;
  uint64_t v83 = *(void (**)(void))(v167 + 104);
  uint64_t v84 = v164;
  unsigned int v142 = enum case for UserInterfaceSizeClass.compact(_:);
  uint64_t v85 = v168;
  uint64_t v144 = v167 + 104;
  uint64_t v141 = (void (*)(char *, void, uint64_t))v83;
  v83(v164);
  uint64_t v86 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v82 + 56);
  uint64_t v143 = v82 + 56;
  uint64_t v140 = v86;
  v86(v84, 0, 1, v85);
  uint64_t v87 = v150;
  uint64_t v88 = v150 + *(int *)(v165 + 48);
  sub_10000A428(v81, v150, &qword_1001A5478);
  sub_10000A428(v84, v88, &qword_1001A5478);
  long long v89 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v82 + 48);
  int v90 = v89(v87, 1, v85);
  long long v146 = (char *)v89;
  if (v90 == 1)
  {
    sub_10000ACE0(v84, &qword_1001A5478);
    sub_10000ACE0(v81, &qword_1001A5478);
    if (v89(v88, 1, v85) == 1)
    {
      sub_10000ACE0(v87, &qword_1001A5478);
LABEL_14:
      uint64_t v97 = static Font.caption2.getter();
      goto LABEL_16;
    }
    goto LABEL_12;
  }
  uint64_t v91 = v135;
  sub_10000A428(v87, v135, &qword_1001A5478);
  if (v89(v88, 1, v85) == 1)
  {
    sub_10000ACE0(v164, &qword_1001A5478);
    sub_10000ACE0(v81, &qword_1001A5478);
    (*(void (**)(uint64_t, uint64_t))(v167 + 8))(v91, v85);
LABEL_12:
    sub_10000ACE0(v87, &qword_1001A5FB0);
    goto LABEL_15;
  }
  uint64_t v92 = v167;
  uint64_t v93 = v87;
  uint64_t v94 = v137;
  (*(void (**)(char *, uint64_t, uint64_t))(v167 + 32))(v137, v88, v85);
  sub_1001100E4((unint64_t *)&qword_1001A6040, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
  char v95 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v96 = *(void (**)(char *, uint64_t))(v92 + 8);
  v96(v94, v85);
  sub_10000ACE0(v164, &qword_1001A5478);
  sub_10000ACE0(v81, &qword_1001A5478);
  v96((char *)v91, v85);
  uint64_t v78 = v162;
  uint64_t v79 = v163;
  sub_10000ACE0(v93, &qword_1001A5478);
  if (v95) {
    goto LABEL_14;
  }
LABEL_15:
  uint64_t v97 = static Font.footnote.getter();
LABEL_16:
  uint64_t v98 = v97;
  uint64_t v99 = v148;
  sub_10000A428(v78, v148, &qword_1001ABD90);
  uint64_t v100 = v99 + *(int *)(v149 + 36);
  *(unsigned char *)uint64_t v100 = v139;
  *(void *)(v100 + 8) = v138;
  *(void *)(v100 + 16) = v98;
  sub_10000ACE0(v78, &qword_1001ABD90);
  sub_10000A3C4(v99, v166, &qword_1001ABD98);
  uint64_t v101 = *(void *)(v79 + 8);
  uint64_t v170 = *(void *)v79;
  uint64_t v171 = v101;
  sub_100010B2C();
  swift_bridgeObjectRetain();
  uint64_t v102 = Text.init<A>(_:)();
  uint64_t v104 = v103;
  char v106 = v105;
  LODWORD(v164) = *(unsigned __int8 *)(v79 + 48);
  uint64_t v170 = v102;
  uint64_t v171 = v103;
  char v172 = v105 & 1;
  uint64_t v173 = v107;
  char v174 = 0;
  char v175 = v164 ^ 1;
  if ((v164 ^ 1)) {
    static Font.Weight.bold.getter();
  }
  else {
    static Font.Weight.semibold.getter();
  }
  sub_10000570C(&qword_1001ABDA0);
  sub_10010FF60();
  View.fontWeight(_:)();
  sub_10000FCC4(v102, v104, v106 & 1);
  swift_bridgeObjectRelease();
  uint64_t v108 = static Font.title.getter();
  uint64_t v109 = v152;
  sub_100026824(v152);
  uint64_t v110 = (uint64_t)v151;
  uint64_t v111 = v168;
  v141(v151, v142, v168);
  v140(v110, 0, 1, v111);
  uint64_t v112 = v154;
  uint64_t v113 = v154 + *(int *)(v165 + 48);
  sub_10000A428(v109, v154, &qword_1001A5478);
  sub_10000A428(v110, v113, &qword_1001A5478);
  uint64_t v114 = v146;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v146)(v112, 1, v111) != 1)
  {
    uint64_t v115 = (uint64_t)v136;
    sub_10000A428(v112, (uint64_t)v136, &qword_1001A5478);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v114)(v113, 1, v111) != 1)
    {
      uint64_t v116 = v110;
      uint64_t v117 = v167;
      uint64_t v118 = v137;
      (*(void (**)(char *, uint64_t, uint64_t))(v167 + 32))(v137, v113, v111);
      sub_1001100E4((unint64_t *)&qword_1001A6040, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
      char v119 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v120 = *(void (**)(char *, uint64_t))(v117 + 8);
      v120(v118, v111);
      sub_10000ACE0(v116, &qword_1001A5478);
      sub_10000ACE0(v109, &qword_1001A5478);
      v120((char *)v115, v111);
      sub_10000ACE0(v112, &qword_1001A5478);
      if (v119) {
        goto LABEL_26;
      }
LABEL_27:
      uint64_t v121 = static Font.subheadline.getter();
      goto LABEL_28;
    }
    sub_10000ACE0(v110, &qword_1001A5478);
    sub_10000ACE0(v109, &qword_1001A5478);
    (*(void (**)(uint64_t, uint64_t))(v167 + 8))(v115, v111);
LABEL_24:
    sub_10000ACE0(v112, &qword_1001A5FB0);
    goto LABEL_27;
  }
  sub_10000ACE0(v110, &qword_1001A5478);
  sub_10000ACE0(v109, &qword_1001A5478);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v114)(v113, 1, v111) != 1) {
    goto LABEL_24;
  }
  sub_10000ACE0(v112, &qword_1001A5478);
LABEL_26:
  uint64_t v121 = static Font.footnote.getter();
LABEL_28:
  uint64_t v122 = v121;
  uint64_t v123 = v157;
  uint64_t v124 = (uint64_t)v155;
  long long v125 = v169;
  uint64_t v126 = v159;
  (*(void (**)(char *, char *, uint64_t))(v157 + 16))(v155, v169, v159);
  uint64_t v127 = v124 + *(int *)(v156 + 36);
  *(unsigned char *)uint64_t v127 = v164;
  *(void *)(v127 + 8) = v108;
  *(void *)(v127 + 16) = v122;
  (*(void (**)(char *, uint64_t))(v123 + 8))(v125, v126);
  uint64_t v128 = v158;
  sub_10000A3C4(v124, v158, &qword_1001ABD88);
  uint64_t v129 = v166;
  uint64_t v130 = v153;
  sub_10000A428(v166, v153, &qword_1001ABD98);
  uint64_t v131 = v160;
  sub_10000A428(v128, v160, &qword_1001ABD88);
  uint64_t v132 = v161;
  sub_10000A428(v130, v161, &qword_1001ABD98);
  uint64_t v133 = sub_10000570C(&qword_1001ABDB0);
  sub_10000A428(v131, v132 + *(int *)(v133 + 48), &qword_1001ABD88);
  sub_10000ACE0(v128, &qword_1001ABD88);
  sub_10000ACE0(v129, &qword_1001ABD98);
  sub_10000ACE0(v131, &qword_1001ABD88);
  return sub_10000ACE0(v130, &qword_1001ABD98);
}

uint64_t sub_10010ED40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HeaderText(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010EDAC()
{
  swift_retain();

  return swift_retain();
}

uint64_t sub_10010EDF0()
{
  swift_release();

  return swift_release();
}

uint64_t sub_10010EE28@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10010EE58@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10010EE88()
{
  return EnvironmentValues.isEnabled.setter();
}

uint64_t sub_10010EEB0()
{
  return EnvironmentValues.isEnabled.setter();
}

unsigned char *sub_10010EED8(unsigned char *result, char a2)
{
  *result &= a2 ^ 1;
  return result;
}

uint64_t sub_10010EEEC()
{
  return swift_deallocObject();
}

unsigned char *sub_10010EEFC(unsigned char *result)
{
  *result &= ~*(unsigned char *)(v1 + 16) & 1;
  return result;
}

uint64_t sub_10010EF14(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10010EF7C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10010EFDC(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10010F058()
{
  unint64_t result = qword_1001ABC80;
  if (!qword_1001ABC80)
  {
    sub_100004A58(&qword_1001ABC58);
    sub_10010EFDC(&qword_1001ABC88, &qword_1001ABC50, (void (*)(void))sub_10010F124);
    sub_10000A780(&qword_1001A62A0, &qword_1001A62A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001ABC80);
  }
  return result;
}

unint64_t sub_10010F124()
{
  unint64_t result = qword_1001ABC90;
  if (!qword_1001ABC90)
  {
    sub_100004A58(&qword_1001ABC48);
    sub_10000A780(&qword_1001ABC98, &qword_1001ABC40);
    sub_10000A780(&qword_1001A8280, &qword_1001A8288);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001ABC90);
  }
  return result;
}

uint64_t sub_10010F1E8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *(void *)a1 = *a2;
    a1 = v13 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(void *)(a1 + 40) = a2[5];
    uint64_t v7 = *(int *)(a3 + 28);
    uint64_t v8 = (uint64_t *)((char *)a2 + v7);
    uint64_t v9 = (void *)(a1 + v7);
    *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10000570C(&qword_1001A5470);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
      {
        uint64_t v12 = sub_10000570C(&qword_1001A5478);
        memcpy(v9, v8, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v9, v8, v10);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
      }
    }
    else
    {
      *uint64_t v9 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10010F3E4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  sub_10000570C(&qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v8 = *(void *)(v5 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
    if (!result)
    {
      uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
      return v7(v4, v5);
    }
  }
  else
  {
    return swift_release();
  }
  return result;
}

uint64_t sub_10010F51C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (void *)(a2 + v6);
  uint64_t v8 = (void *)(a1 + v6);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000570C(&qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v10 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
    {
      uint64_t v11 = sub_10000570C(&qword_1001A5478);
      memcpy(v8, v7, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v8, v7, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    }
  }
  else
  {
    void *v8 = *v7;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_10010F6C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (void *)(a2 + v6);
    sub_10000ACE0(a1 + v6, &qword_1001A5470);
    sub_10000570C(&qword_1001A5470);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v10 = *(void *)(v9 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        uint64_t v11 = sub_10000570C(&qword_1001A5478);
        memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
    }
    else
    {
      void *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10010F8C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (const void *)(a2 + v5);
  uint64_t v8 = sub_10000570C(&qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v10 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
    {
      uint64_t v11 = sub_10000570C(&qword_1001A5478);
      memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v6, v7, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v6, v7, *(void *)(*(void *)(v8 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10010FA50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  if (a1 != a2)
  {
    uint64_t v8 = *(int *)(a3 + 28);
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (const void *)(a2 + v8);
    sub_10000ACE0(a1 + v8, &qword_1001A5470);
    uint64_t v11 = sub_10000570C(&qword_1001A5470);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
      {
        uint64_t v14 = sub_10000570C(&qword_1001A5478);
        memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v9, v10, v12);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10010FC28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10010FC3C);
}

uint64_t sub_10010FC3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000570C(&qword_1001A5F10);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10010FCF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10010FD04);
}

uint64_t sub_10010FD04(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000570C(&qword_1001A5F10);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_10010FDB0()
{
  sub_100025218();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t sub_10010FE60()
{
  unint64_t result = qword_1001ABD40;
  if (!qword_1001ABD40)
  {
    sub_100004A58(&qword_1001ABBC8);
    sub_10000A780(&qword_1001ABD48, &qword_1001ABBC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001ABD40);
  }
  return result;
}

uint64_t sub_10010FF00()
{
  return sub_10000A780(&qword_1001ABD50, &qword_1001ABC30);
}

uint64_t sub_10010FF3C()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10010FF60()
{
  unint64_t result = qword_1001ABDA8;
  if (!qword_1001ABDA8)
  {
    sub_100004A58(&qword_1001ABDA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001ABDA8);
  }
  return result;
}

unint64_t sub_10010FFD8()
{
  unint64_t result = qword_1001ABDB8;
  if (!qword_1001ABDB8)
  {
    sub_100004A58(&qword_1001ABD68);
    sub_100004A58(&qword_1001ABD58);
    sub_10000A780(&qword_1001ABD78, &qword_1001ABD58);
    swift_getOpaqueTypeConformance2();
    sub_1001100E4((unint64_t *)&qword_1001A68E8, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001ABDB8);
  }
  return result;
}

uint64_t sub_1001100E4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PlaybackStatus(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001101F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaybackStatus()
{
  return &type metadata for PlaybackStatus;
}

unint64_t sub_100110234()
{
  unint64_t result = qword_1001ABDC0;
  if (!qword_1001ABDC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001ABDC0);
  }
  return result;
}

void *initializeWithCopy for EventCampaignHandler(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for EventCampaignHandler(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for EventCampaignHandler(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for EventCampaignHandler(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EventCampaignHandler(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EventCampaignHandler(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EventCampaignHandler()
{
  return &type metadata for EventCampaignHandler;
}

void sub_1001104A8()
{
  qword_1001ABDC8 = 0x6763737469;
  unk_1001ABDD0 = 0xE500000000000000;
}

void sub_1001104C8()
{
  qword_1001ABDD8 = 0x7463737469;
  unk_1001ABDE0 = 0xE500000000000000;
}

void sub_1001104E8()
{
  qword_1001ABDE8 = 29795;
  unk_1001ABDF0 = 0xE200000000000000;
}

void sub_100110500()
{
  qword_1001ABDF8 = 29808;
  unk_1001ABE00 = 0xE200000000000000;
}

uint64_t sub_10011051C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_10000570C(&qword_1001A5968);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    if (a2)
    {
      **(void **)(*(void *)(v3 + 64) + 40) = a2;
      id v8 = a2;
      a1 = v3;
    }
    else
    {
      __break(1u);
    }
    return _swift_continuation_throwingResume(a1);
  }
}

uint64_t sub_1001105DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[39] = a2;
  v3[40] = a3;
  v3[38] = a1;
  return _swift_task_switch(sub_100110600, 0, 0);
}

uint64_t sub_100110600()
{
  id v1 = [self sharedInstance];
  v0[41] = v1;
  v0[10] = v0;
  v0[15] = v0 + 36;
  v0[11] = sub_100110724;
  uint64_t v2 = swift_continuation_init();
  v0[26] = _NSConcreteStackBlock;
  v0[27] = 0x40000000;
  v0[28] = sub_100110518;
  v0[29] = &unk_10019AC18;
  v0[30] = v2;
  [v1 defaultValuesWithCompletion:v0 + 26];
  return _swift_continuation_await(v0 + 10);
}

uint64_t sub_100110724()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 336) = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_100110E30;
  }
  else
  {
    uint64_t v2 = sub_10011083C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10011083C()
{
  uint64_t v1 = (void *)v0[41];
  uint64_t v2 = (void *)v0[36];
  id v3 = [v2 campaignGroup];

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  v0[43] = v4;
  v0[44] = v6;
  v0[18] = v0;
  v0[23] = v0 + 36;
  v0[19] = sub_100110988;
  uint64_t v7 = swift_continuation_init();
  v0[26] = _NSConcreteStackBlock;
  v0[27] = 0x40000000;
  v0[28] = sub_100110518;
  v0[29] = &unk_10019AC30;
  v0[30] = v7;
  [v1 campaignTokenWithCompletion:v0 + 26];
  return _swift_continuation_await(v0 + 18);
}

uint64_t sub_100110988()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 176);
  *(void *)(*(void *)v0 + 360) = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_10011106C;
  }
  else
  {
    uint64_t v2 = sub_100110AAC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100110AAC()
{
  uint64_t v1 = (void *)v0[41];
  uint64_t v2 = (void *)v0[36];
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [v2 tokenForClientIdentifier:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v0[34] = v5;
  v0[35] = v6;

  v0[46] = v7;
  v0[2] = v0;
  v0[7] = v0 + 36;
  v0[3] = sub_100110C3C;
  uint64_t v8 = swift_continuation_init();
  v0[26] = _NSConcreteStackBlock;
  v0[27] = 0x40000000;
  v0[28] = sub_100110518;
  v0[29] = &unk_10019AC48;
  v0[30] = v8;
  [v1 defaultValuesWithCompletion:v0 + 26];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_100110C3C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 376) = v2;
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    NSString v3 = sub_1001112AC;
  }
  else
  {
    *(void *)(v1 + 384) = *(void *)(v1 + 272);
    NSString v3 = sub_100110D68;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100110D68()
{
  uint64_t v1 = v0[46];
  uint64_t v2 = v0[44];
  NSString v3 = (void *)v0[41];
  id v4 = (void *)v0[36];
  id v5 = [v4 providerToken];

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  uint64_t v9 = v0[48];
  uint64_t v10 = (void *)v0[38];
  *uint64_t v10 = v0[43];
  v10[1] = v2;
  v10[2] = v9;
  v10[3] = v1;
  v10[4] = v6;
  v10[5] = v8;
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100110E30()
{
  uint64_t v12 = v0;
  uint64_t v1 = (void *)v0[41];
  swift_willThrow();

  if (qword_1001A4F38 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100017378(v2, (uint64_t)qword_1001B75B8);
  swift_errorRetain();
  swift_errorRetain();
  NSString v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)id v5 = 136315138;
    swift_getErrorValue();
    uint64_t v6 = Error.localizedDescription.getter();
    v0[26] = sub_1000FE1F8(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Could not fetch event campaign values due to Error: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = (_OWORD *)v0[38];
  v8[1] = 0u;
  v8[2] = 0u;
  _OWORD *v8 = 0u;
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10011106C()
{
  uint64_t v12 = v0;
  uint64_t v1 = (void *)v0[41];
  swift_willThrow();

  if (qword_1001A4F38 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100017378(v2, (uint64_t)qword_1001B75B8);
  swift_errorRetain();
  swift_errorRetain();
  NSString v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)id v5 = 136315138;
    swift_getErrorValue();
    uint64_t v6 = Error.localizedDescription.getter();
    v0[26] = sub_1000FE1F8(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Could not fetch event campaign values due to Error: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = (_OWORD *)v0[38];
  v8[1] = 0u;
  v8[2] = 0u;
  _OWORD *v8 = 0u;
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1001112AC()
{
  uint64_t v12 = v0;
  uint64_t v1 = (void *)v0[41];
  swift_willThrow();

  if (qword_1001A4F38 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100017378(v2, (uint64_t)qword_1001B75B8);
  swift_errorRetain();
  swift_errorRetain();
  NSString v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)id v5 = 136315138;
    swift_getErrorValue();
    uint64_t v6 = Error.localizedDescription.getter();
    v0[26] = sub_1000FE1F8(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Could not fetch event campaign values due to Error: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = (_OWORD *)v0[38];
  v8[1] = 0u;
  v8[2] = 0u;
  _OWORD *v8 = 0u;
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1001114F0(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100111558(&qword_1001A63A0);
  uint64_t result = sub_100111558(&qword_1001ABE10);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100111558(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Genre();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10011159C()
{
  v1[3] = v0;
  sub_10000570C(&qword_1001AB7B8);
  v1[4] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for MusicSubscription();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  uint64_t v3 = swift_task_alloc();
  v1[7] = v3;
  v1[8] = type metadata accessor for MainActor();
  v1[9] = static MainActor.shared.getter();
  os_log_type_t v4 = (void *)swift_task_alloc();
  v1[10] = v4;
  *os_log_type_t v4 = v1;
  v4[1] = sub_1001116E0;
  return static MusicSubscription.current.getter(v3);
}

uint64_t sub_1001116E0()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  if (v0) {
    os_log_type_t v4 = sub_1001119CC;
  }
  else {
    os_log_type_t v4 = sub_100111838;
  }
  return _swift_task_switch(v4, v3, v2);
}

void sub_100111838()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[3];
  swift_release();
  uint64_t v3 = *(os_unfair_lock_s **)(v2 + 16);
  *(void *)(swift_task_alloc() + 16) = v1;
  os_log_type_t v4 = (uint64_t *)&v3[4];
  id v5 = v3 + 6;
  BOOL v6 = os_unfair_lock_trylock(v3 + 6);
  uint64_t v7 = v0[11];
  if (!v6 || (sub_100113214(), os_unfair_lock_unlock(v5), !v7))
  {
    uint64_t v8 = v0[4];
    swift_task_dealloc();
    os_unfair_lock_lock(v5);
    sub_100111C2C(v4, v8);
    os_unfair_lock_unlock(v5);
    if (!v7)
    {
      uint64_t v9 = v0[5];
      uint64_t v10 = v0[6];
      uint64_t v11 = v0[4];
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9) == 1)
      {
        sub_100112F50(v11);
      }
      else
      {
        char v12 = MusicSubscription.canBecomeSubscriber.getter();
        uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
        v13(v11, v9);
        if ((v12 & 1) == 0)
        {
LABEL_9:
          v13(v0[7], v0[5]);
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v15 = (void (*)(void))v0[1];
          v15();
          return;
        }
      }
      uint64_t v14 = v0[6];
      sub_100111F90();
      uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
      goto LABEL_9;
    }
  }
}

uint64_t sub_1001119CC()
{
  swift_release();
  if (qword_1001A4F38 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100017378(v1, (uint64_t)qword_1001B75B8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    id v5 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error fetching Apple Music subscription status with error: %@", v4, 0xCu);
    sub_10000570C(&qword_1001A7A28);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100111BEC()
{
  type metadata accessor for AppleMusicSubscriptionStatusProvider(0);
  uint64_t v0 = swift_allocObject();
  uint64_t result = sub_1001129DC();
  qword_1001B7550 = v0;
  return result;
}

uint64_t sub_100111C2C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1001130FC(&qword_1001ABFD8, (void (*)(uint64_t))type metadata accessor for SubscriptionUpdater);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC16EventViewServiceP33_345A586C3DE8C4D1F27F6A5F9354652119SubscriptionUpdater__subscription;
  swift_beginAccess();
  return sub_1001131AC(v4, a2);
}

uint64_t sub_100111D08@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_1001130FC(&qword_1001ABFD8, (void (*)(uint64_t))type metadata accessor for SubscriptionUpdater);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC16EventViewServiceP33_345A586C3DE8C4D1F27F6A5F9354652119SubscriptionUpdater__subscription;
  swift_beginAccess();
  return sub_1001131AC(v3, a1);
}

void sub_100111DD4(uint64_t a1)
{
  uint64_t v3 = sub_10000570C(&qword_1001AB7B8);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = (os_unfair_lock_s *)(*(void *)(v1
                                      + OBJC_IVAR____TtC16EventViewServiceP33_345A586C3DE8C4D1F27F6A5F9354652119SubscriptionUpdater_lock)
                          + 16);
  os_unfair_lock_lock(v7);
  uint64_t v8 = type metadata accessor for MusicSubscription();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v6, a1, v8);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  swift_getKeyPath();
  uint64_t v11 = v1;
  char v12 = v6;
  uint64_t v13 = v1;
  sub_1001130FC(&qword_1001ABFD8, (void (*)(uint64_t))type metadata accessor for SubscriptionUpdater);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  sub_100112F50((uint64_t)v6);
  os_unfair_lock_unlock(v7);
}

uint64_t sub_100111F90()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000570C(&qword_1001A95D0);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A4F38 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100017378(v6, (uint64_t)qword_1001B75B8);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Started observing subscription updates", v9, 2u);
    swift_slowDealloc();
  }

  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v5, 1, 1, v10);
  uint64_t v11 = *(void *)(v1 + 16);
  char v12 = (void *)swift_allocObject();
  _OWORD v12[2] = 0;
  uint64_t v12[3] = 0;
  v12[4] = v11;
  swift_retain();
  sub_10013AF58((uint64_t)v5, (uint64_t)&unk_1001ABFC8, (uint64_t)v12);
  return swift_release();
}

uint64_t sub_100112150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a4;
  uint64_t v5 = type metadata accessor for MusicSubscription();
  v4[4] = v5;
  v4[5] = *(void *)(v5 - 8);
  v4[6] = swift_task_alloc();
  sub_10000570C(&qword_1001AB7B8);
  v4[7] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MusicSubscription.Updates();
  v4[8] = v6;
  v4[9] = *(void *)(v6 - 8);
  v4[10] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for MusicSubscription.Updates.Iterator();
  v4[11] = v7;
  v4[12] = *(void *)(v7 - 8);
  v4[13] = swift_task_alloc();
  return _swift_task_switch(sub_1001122F8, 0, 0);
}

uint64_t sub_1001122F8()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  static MusicSubscription.subscriptionUpdates.getter();
  MusicSubscription.Updates.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = sub_1001130FC(&qword_1001ABFD0, (void (*)(uint64_t))&type metadata accessor for MusicSubscription.Updates.Iterator);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[14] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100112414;
  uint64_t v6 = v0[11];
  uint64_t v7 = v0[7];
  return dispatch thunk of AsyncIteratorProtocol.next()(v7, v6, v4);
}

uint64_t sub_100112414()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100112888;
  }
  else {
    uint64_t v2 = sub_100112528;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_100112528()
{
  uint64_t v2 = v0 + 5;
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[7];
  uint64_t v5 = v0 + 4;
  uint64_t v4 = v0[4];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v4) == 1)
  {
    uint64_t v2 = v0 + 12;
    uint64_t v6 = v0 + 13;
    uint64_t v5 = v0 + 11;
LABEL_14:
    (*(void (**)(void, void))(*v2 + 8))(*v6, *v5);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = (void (*)(void))v0[1];
    v22();
    return;
  }
  uint64_t v6 = v0 + 6;
  uint64_t v7 = v0[6];
  os_log_type_t v8 = (os_unfair_lock_s *)(v0[3] + 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v7, v3, v4);
  *(void *)(swift_task_alloc() + 16) = v7;
  if (os_unfair_lock_trylock(v8))
  {
    uint64_t v9 = v0[15];
    uint64_t v10 = (os_unfair_lock_s *)(v0[3] + 24);
    sub_1001130A4();
    os_unfair_lock_unlock(v10);
    if (v9) {
      return;
    }
  }
  swift_task_dealloc();
  if ((MusicSubscription.canBecomeSubscriber.getter() & 1) == 0)
  {
    if (qword_1001A4F38 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100017378(v15, (uint64_t)qword_1001B75B8);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Stopped observing subscription updates for already subscribed user.", v18, 2u);
      swift_slowDealloc();
    }
    uint64_t v20 = v0[12];
    uint64_t v19 = v0[13];
    uint64_t v21 = v0[11];

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    goto LABEL_14;
  }
  (*(void (**)(void, void))(v0[5] + 8))(v0[6], v0[4]);
  uint64_t v11 = sub_1001130FC(&qword_1001ABFD0, (void (*)(uint64_t))&type metadata accessor for MusicSubscription.Updates.Iterator);
  char v12 = (void *)swift_task_alloc();
  v0[14] = v12;
  *char v12 = v0;
  v12[1] = sub_100112414;
  uint64_t v13 = v0[11];
  uint64_t v14 = v0[7];
  dispatch thunk of AsyncIteratorProtocol.next()(v14, v13, v11);
}

uint64_t sub_100112888()
{
  *(void *)(v0 + 16) = *(void *)(v0 + 120);
  sub_10000570C(&qword_1001A5968);
  uint64_t v1 = swift_dynamicCast();
  return _swift_willThrowTypedImpl(v1, &type metadata for Never, &protocol witness table for Never);
}

uint64_t sub_10011290C()
{
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC16EventViewService36AppleMusicSubscriptionStatusProvider___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1001129B4()
{
  return type metadata accessor for AppleMusicSubscriptionStatusProvider(0);
}

uint64_t type metadata accessor for AppleMusicSubscriptionStatusProvider(uint64_t a1)
{
  return sub_10003859C(a1, qword_1001ABE48);
}

uint64_t sub_1001129DC()
{
  type metadata accessor for SubscriptionUpdater(0);
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = v1 + OBJC_IVAR____TtC16EventViewServiceP33_345A586C3DE8C4D1F27F6A5F9354652119SubscriptionUpdater__subscription;
  uint64_t v3 = type metadata accessor for MusicSubscription();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  uint64_t v4 = OBJC_IVAR____TtC16EventViewServiceP33_345A586C3DE8C4D1F27F6A5F9354652119SubscriptionUpdater_lock;
  sub_10000570C(&qword_1001AB558);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  *(void *)(v1 + v4) = v5;
  ObservationRegistrar.init()();
  sub_10000570C(&qword_1001ABFE0);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 24) = 0;
  *(void *)(v6 + 16) = v1;
  *(void *)(v0 + 16) = v6;
  ObservationRegistrar.init()();
  return v0;
}

uint64_t sub_100112AD4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1001130FC(&qword_1001ABFD8, (void (*)(uint64_t))type metadata accessor for SubscriptionUpdater);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC16EventViewServiceP33_345A586C3DE8C4D1F27F6A5F9354652119SubscriptionUpdater__subscription;
  swift_beginAccess();
  return sub_1001131AC(v4, a2);
}

uint64_t sub_100112BA0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001AB7B8);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1001131AC(a1, (uint64_t)v7);
  uint64_t v8 = *a2;
  swift_getKeyPath();
  uint64_t v11 = v8;
  char v12 = v7;
  uint64_t v13 = v8;
  sub_1001130FC(&qword_1001ABFD8, (void (*)(uint64_t))type metadata accessor for SubscriptionUpdater);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_100112F50((uint64_t)v7);
}

uint64_t sub_100112CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC16EventViewServiceP33_345A586C3DE8C4D1F27F6A5F9354652119SubscriptionUpdater__subscription;
  swift_beginAccess();
  sub_100113144(a2, v3);
  return swift_endAccess();
}

uint64_t sub_100112D38()
{
  sub_100112F50(v0 + OBJC_IVAR____TtC16EventViewServiceP33_345A586C3DE8C4D1F27F6A5F9354652119SubscriptionUpdater__subscription);
  swift_release();
  uint64_t v1 = v0
     + OBJC_IVAR____TtC16EventViewServiceP33_345A586C3DE8C4D1F27F6A5F9354652119SubscriptionUpdater___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100112DF8()
{
  return type metadata accessor for SubscriptionUpdater(0);
}

uint64_t type metadata accessor for SubscriptionUpdater(uint64_t a1)
{
  return sub_10003859C(a1, (uint64_t *)&unk_1001ABF18);
}

void sub_100112E20()
{
  sub_100112EF8();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ObservationRegistrar();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_100112EF8()
{
  if (!qword_1001ABF28)
  {
    type metadata accessor for MusicSubscription();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001ABF28);
    }
  }
}

uint64_t sub_100112F50(uint64_t a1)
{
  uint64_t v2 = sub_10000570C(&qword_1001AB7B8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100112FB0()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100112FF0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100009854;
  return sub_100112150(a1, v4, v5, v6);
}

void sub_1001130A4()
{
  sub_100111DD4(*(void *)(v0 + 16));
}

uint64_t sub_1001130E0()
{
  return sub_100112CCC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001130FC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100113144(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001AB7B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001131AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001AB7B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_100113214()
{
}

uint64_t sub_10011322C()
{
  return sub_1001130E0();
}

uint64_t sub_100113248(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10011339C(&qword_1001ABFE8, (void (*)(uint64_t))&type metadata accessor for PromotionalAssets.PhotoAlbum.Photo);
  uint64_t result = sub_10011339C(&qword_1001ABFF0, (void (*)(uint64_t))&type metadata accessor for PromotionalAssets.PhotoAlbum.Photo);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1001132CC()
{
  return sub_10011339C(&qword_1001ABFF8, (void (*)(uint64_t))&type metadata accessor for PromotionalAssets.PhotoAlbum.Photo);
}

uint64_t sub_100113318(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10011339C(&qword_1001AC030, (void (*)(uint64_t))&type metadata accessor for PromotionalAssets.PhotoAlbum);
  uint64_t result = sub_10011339C(&qword_1001AC038, (void (*)(uint64_t))&type metadata accessor for PromotionalAssets.PhotoAlbum);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10011339C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001133E4()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1001134B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, double a7, double a8)
{
  uint64_t v16 = swift_allocObject();
  ObservationRegistrar.init()();
  *(void *)(v16 + 16) = a1;
  *(void *)(v16 + 24) = a2;
  *(void *)(v16 + 32) = a3;
  *(void *)(v16 + 40) = a4;
  *(void *)(v16 + 48) = a5;
  *(double *)(v16 + 56) = a7;
  *(double *)(v16 + 64) = a8;
  *(unsigned char *)(v16 + 72) = a6;
  return v16;
}

BOOL sub_100113548()
{
  return Array.count.getter() > 1;
}

double sub_100113580()
{
  return *(double *)(v0 + 56) * 0.6;
}

double sub_100113598()
{
  double v1 = *(double *)(v0 + 56) * 0.6;
  return v1 / (double)Array.count.getter();
}

uint64_t sub_1001135EC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + qword_1001AC040;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_100113668()
{
  sub_1001135EC();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TourPhotosViewModel()
{
  return sub_10000B72C();
}

ValueMetadata *type metadata accessor for BezelBackground()
{
  return &type metadata for BezelBackground;
}

void *sub_1001136EC(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Bezel(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

void *assignWithTake for Bezel(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

ValueMetadata *type metadata accessor for Bezel()
{
  return &type metadata for Bezel;
}

uint64_t *sub_1001137CC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t sub_1001138AC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_100113910(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1001139A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100113A34(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100113AC4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100113B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100113B68);
}

uint64_t sub_100113B68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_100113BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100113BE8);
}

uint64_t sub_100113BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ScrollAsset()
{
  uint64_t result = qword_1001AC120;
  if (!qword_1001AC120) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100113CA4()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetHeader()
{
  return &type metadata for AssetHeader;
}

uint64_t sub_100113D50()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100113D6C@<X0>(uint64_t a1@<X8>)
{
  static HorizontalAlignment.leading.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.title2.getter();
  static Font.Weight.bold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v7 = Text.font(_:)();
  uint64_t v9 = v8;
  char v11 = v10;
  swift_release();
  sub_10000FCC4(v2, v4, v6);
  swift_bridgeObjectRelease();
  static Alignment.leading.getter();
  sub_100125254(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v32, 0.0, 1, 0.0, 1);
  sub_10000FCC4(v7, v9, v11 & 1);
  swift_bridgeObjectRelease();
  char v12 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  char v21 = static Edge.Set.bottom.getter();
  uint64_t result = EdgeInsets.init(_all:)();
  long long v23 = v32[9];
  *(_OWORD *)(a1 + 128) = v32[8];
  *(_OWORD *)(a1 + 144) = v23;
  *(void *)(a1 + 160) = v33;
  long long v24 = v32[5];
  *(_OWORD *)(a1 + 64) = v32[4];
  *(_OWORD *)(a1 + 80) = v24;
  long long v25 = v32[7];
  *(_OWORD *)(a1 + 96) = v32[6];
  *(_OWORD *)(a1 + 112) = v25;
  long long v26 = v32[1];
  *(_OWORD *)a1 = v32[0];
  *(_OWORD *)(a1 + 16) = v26;
  long long v27 = v32[3];
  *(_OWORD *)(a1 + 32) = v32[2];
  *(_OWORD *)(a1 + 48) = v27;
  *(unsigned char *)(a1 + 168) = v12;
  *(void *)(a1 + 176) = v14;
  *(void *)(a1 + 184) = v16;
  *(void *)(a1 + 192) = v18;
  *(void *)(a1 + 200) = v20;
  *(unsigned char *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 216) = v21;
  *(void *)(a1 + 224) = v28;
  *(void *)(a1 + 232) = v29;
  *(void *)(a1 + 240) = v30;
  *(void *)(a1 + 248) = v31;
  *(unsigned char *)(a1 + 256) = 0;
  return result;
}

uint64_t sub_100113FA4@<X0>(uint64_t a1@<X8>)
{
  return sub_100113D6C(a1);
}

uint64_t sub_100113FB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v43 = a1;
  uint64_t v42 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin(v42, v2);
  uint64_t v41 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_10000570C(&qword_1001AC160);
  uint64_t v38 = *(void *)(v40 - 8);
  __chkstk_darwin(v40, v8);
  char v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000570C(&qword_1001AC168);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000570C(&qword_1001AC170);
  uint64_t v17 = v16 - 8;
  __chkstk_darwin(v16, v18);
  uint64_t v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_10000570C(&qword_1001AC178);
  __chkstk_darwin(v39, v21);
  long long v23 = (char *)&v38 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for URL();
  uint64_t v25 = *(void *)(v24 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v7, v1, v24);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v7, 0, 1, v24);
  static Animation.easeInOut.getter();
  Transaction.init(animation:)();
  sub_10000570C(&qword_1001AC180);
  sub_100114DB0();
  AsyncImage.init(url:scale:transaction:content:)();
  uint64_t v26 = type metadata accessor for ScrollAsset();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v27 = v38;
  uint64_t v28 = v40;
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v15, v10, v40);
  uint64_t v29 = &v15[*(int *)(v12 + 44)];
  long long v30 = v45;
  *(_OWORD *)uint64_t v29 = v44;
  *((_OWORD *)v29 + 1) = v30;
  *((_OWORD *)v29 + 2) = v46;
  (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v28);
  sub_10000A428((uint64_t)v15, (uint64_t)v20, &qword_1001AC168);
  *(_WORD *)&v20[*(int *)(v17 + 44)] = 0;
  sub_10000ACE0((uint64_t)v15, &qword_1001AC168);
  uint64_t v31 = *(void *)(v1 + *(int *)(v26 + 28));
  uint64_t v32 = v41;
  uint64_t v33 = &v41[*(int *)(v42 + 28)];
  uint64_t v34 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v35 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 104))(v33, v34, v35);
  *uint64_t v32 = v31;
  v32[1] = v31;
  uint64_t v36 = (uint64_t)&v23[*(int *)(v39 + 36)];
  sub_1000243EC((uint64_t)v32, v36);
  *(_WORD *)(v36 + *(int *)(sub_10000570C(&qword_1001A62A8) + 36)) = 256;
  sub_10000A428((uint64_t)v20, (uint64_t)v23, &qword_1001AC170);
  sub_100024450((uint64_t)v32);
  sub_10000ACE0((uint64_t)v20, &qword_1001AC170);
  static Axis.Set.horizontal.getter();
  static Alignment.center.getter();
  sub_100114F70();
  View.containerRelativeFrame(_:alignment:)();
  return sub_10000ACE0((uint64_t)v23, &qword_1001AC178);
}

uint64_t sub_100114490@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Image.ResizingMode();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AsyncImagePhase();
  uint64_t v10 = *(void *)(v9 - 8);
  __n128 v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v14, a1, v9, v12);
  int v15 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v14, v9);
  if (v15 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(char *, uint64_t))(v10 + 96))(v14, v9);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, enum case for Image.ResizingMode.stretch(_:), v4);
    uint64_t v16 = Image.resizable(capInsets:resizingMode:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    long long v24 = (unint64_t)v16;
    int v25 = 65793;
    swift_retain();
    sub_10000570C(&qword_1001AC1A8);
    sub_10000570C(&qword_1001AA5D8);
    sub_100114EF0(&qword_1001AC1A0, &qword_1001AC1A8, (void (*)(void))sub_1000B0B8C);
    sub_10000A780(&qword_1001AA5E0, &qword_1001AA5D8);
    _ConditionalContent<>.init(storage:)();
    if (HIBYTE(v28)) {
      int v17 = 0x1000000;
    }
    else {
      int v17 = 0;
    }
    long long v24 = v27;
    int v25 = v17 | (unsigned __int16)v28 | (BYTE2(v28) << 16);
    char v26 = 0;
    j__swift_retain_0();
    sub_10000570C(&qword_1001AC198);
    sub_100114E2C();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    j__swift_release_0();
  }
  else
  {
    if (v15 == enum case for AsyncImagePhase.failure(_:))
    {
      (*(void (**)(char *, uint64_t))(v10 + 96))(v14, v9);
      swift_errorRelease();
    }
    else if (v15 != enum case for AsyncImagePhase.empty(_:))
    {
      long long v24 = 0uLL;
      int v25 = 0;
      char v26 = 1;
      sub_10000570C(&qword_1001AC198);
      sub_100114E2C();
      _ConditionalContent<>.init(storage:)();
      long long v23 = v27;
      int v21 = v28;
      char v22 = v29;
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v14, v9);
      long long v20 = v23;
      goto LABEL_16;
    }
    if (qword_1001A4E48 != -1) {
      swift_once();
    }
    *(void *)&long long v24 = qword_1001B74E8;
    *((void *)&v24 + 1) = 256;
    int v25 = 0x1000000;
    swift_retain_n();
    sub_10000570C(&qword_1001AC1A8);
    sub_10000570C(&qword_1001AA5D8);
    sub_100114EF0(&qword_1001AC1A0, &qword_1001AC1A8, (void (*)(void))sub_1000B0B8C);
    sub_10000A780(&qword_1001AA5E0, &qword_1001AA5D8);
    _ConditionalContent<>.init(storage:)();
    if (HIBYTE(v28)) {
      int v18 = 0x1000000;
    }
    else {
      int v18 = 0;
    }
    long long v24 = v27;
    int v25 = v18 | (unsigned __int16)v28 | (BYTE2(v28) << 16);
    char v26 = 0;
    sub_10000570C(&qword_1001AC198);
    sub_100114E2C();
    _ConditionalContent<>.init(storage:)();
  }
  uint64_t result = swift_release();
  long long v20 = v27;
  int v21 = v28;
  char v22 = v29;
LABEL_16:
  *(_OWORD *)a2 = v20;
  *(_DWORD *)(a2 + 16) = v21;
  *(unsigned char *)(a2 + 20) = v22;
  return result;
}

uint64_t sub_100114A08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Image.ResizingMode();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  Image.init(_:bundle:)();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, enum case for Image.ResizingMode.stretch(_:), v2);
  uint64_t v7 = Image.resizable(capInsets:resizingMode:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  char v8 = static Edge.Set.all.getter();
  uint64_t result = EdgeInsets.init(_all:)();
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = v12;
  *(void *)(a1 + 56) = v13;
  *(unsigned char *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 65) = 0;
  *(unsigned char *)(a1 + 67) = 1;
  return result;
}

uint64_t sub_100114B84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for RoundedRectangle();
  uint64_t v4 = v3 - 8;
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (void *)((char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_10000570C(&qword_1001A83D8);
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v1 + 16);
  uint64_t v14 = (char *)v7 + *(int *)(v4 + 28);
  uint64_t v15 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v16 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104))(v14, v15, v16);
  void *v7 = v13;
  v7[1] = v13;
  uint64_t v17 = static Color.black.getter();
  sub_1000243EC((uint64_t)v7, (uint64_t)v12);
  *(void *)&v12[*(int *)(v9 + 60)] = v17;
  *(_WORD *)&v12[*(int *)(v9 + 64)] = 256;
  sub_100024450((uint64_t)v7);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_10000A428((uint64_t)v12, a1, &qword_1001A83D8);
  int v18 = (_OWORD *)(a1 + *(int *)(sub_10000570C(&qword_1001AC1D0) + 36));
  long long v19 = v21[1];
  *int v18 = v21[0];
  v18[1] = v19;
  v18[2] = v21[2];
  return sub_10000ACE0((uint64_t)v12, &qword_1001A83D8);
}

uint64_t sub_100114D5C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100114D78()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100114D94()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100114DB0()
{
  unint64_t result = qword_1001AC188;
  if (!qword_1001AC188)
  {
    sub_100004A58(&qword_1001AC180);
    sub_100114E2C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC188);
  }
  return result;
}

unint64_t sub_100114E2C()
{
  unint64_t result = qword_1001AC190;
  if (!qword_1001AC190)
  {
    sub_100004A58(&qword_1001AC198);
    sub_100114EF0(&qword_1001AC1A0, &qword_1001AC1A8, (void (*)(void))sub_1000B0B8C);
    sub_10000A780(&qword_1001AA5E0, &qword_1001AA5D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC190);
  }
  return result;
}

uint64_t sub_100114EF0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    a3();
    sub_100048920();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100114F70()
{
  unint64_t result = qword_1001AC1B0;
  if (!qword_1001AC1B0)
  {
    sub_100004A58(&qword_1001AC178);
    sub_100115010();
    sub_10000A780(&qword_1001A62A0, &qword_1001A62A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC1B0);
  }
  return result;
}

unint64_t sub_100115010()
{
  unint64_t result = qword_1001AC1B8;
  if (!qword_1001AC1B8)
  {
    sub_100004A58(&qword_1001AC170);
    sub_1001150B0();
    sub_10000A780(&qword_1001A91F0, &qword_1001A91F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC1B8);
  }
  return result;
}

unint64_t sub_1001150B0()
{
  unint64_t result = qword_1001AC1C0;
  if (!qword_1001AC1C0)
  {
    sub_100004A58(&qword_1001AC168);
    sub_10000A780(&qword_1001AC1C8, &qword_1001AC160);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC1C0);
  }
  return result;
}

uint64_t sub_100115158()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1001151B4()
{
  return sub_100115218(&qword_1001AC1D8, &qword_1001AC1E0, (void (*)(void))sub_1001151F0);
}

uint64_t sub_1001151F0()
{
  return sub_100115218(&qword_1001AC1E8, &qword_1001AC1F0, (void (*)(void))sub_100115298);
}

uint64_t sub_100115218(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100115298()
{
  unint64_t result = qword_1001AC1F8;
  if (!qword_1001AC1F8)
  {
    sub_100004A58(&qword_1001AC200);
    sub_10000A780(&qword_1001AC208, &qword_1001AC210);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC1F8);
  }
  return result;
}

uint64_t sub_100115338()
{
  return sub_100114EF0(&qword_1001AC218, &qword_1001AC220, (void (*)(void))sub_100115374);
}

unint64_t sub_100115374()
{
  unint64_t result = qword_1001AC228;
  if (!qword_1001AC228)
  {
    sub_100004A58(&qword_1001AC230);
    sub_100115218(&qword_1001AC238, &qword_1001AC240, (void (*)(void))sub_1000B0B8C);
    sub_10000A780(&qword_1001A91F0, &qword_1001A91F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC228);
  }
  return result;
}

unint64_t sub_10011543C()
{
  unint64_t result = qword_1001AC248;
  if (!qword_1001AC248)
  {
    sub_100004A58(&qword_1001AC1D0);
    sub_10000A780(qword_1001AC250, &qword_1001A83D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC248);
  }
  return result;
}

uint64_t sub_1001154DC()
{
  return Array.init<A>(_:)();
}

void sub_1001155A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000570C(&qword_1001A5390);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_10015B6F0;
  uint64_t v9 = *v3;
  uint64_t v8 = v3[1];
  *(void *)(v7 + 56) = &type metadata for AnalyticsString;
  *(void *)(v7 + 64) = &off_1001AAD38;
  *(unsigned char *)(v7 + 32) = 0;
  *(void *)(v7 + 40) = v9;
  *(void *)(v7 + 48) = v8;
  *(void *)(v7 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v7 + 104) = &off_1001AAD10;
  *(unsigned char *)(v7 + 72) = 6;
  *(void *)(v7 + 136) = &type metadata for AnalyticsModuleAction;
  *(void *)(v7 + 144) = &off_1001AAD70;
  *(void *)(v7 + 112) = a1;
  *(void *)(v7 + 120) = a2;
  *(unsigned char *)(v7 + 128) = 1;
  if (*(void *)(a3 + 72))
  {
    uint64_t v10 = *(void *)(a3 + 64);
    unint64_t v11 = *(void *)(a3 + 72);
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0xE000000000000000;
  }
  long long v24 = &type metadata for AnalyticsString;
  int v25 = (void *(*)())&off_1001AAD38;
  LOBYTE(aBlock) = 1;
  uint64_t v22 = v10;
  long long v23 = (Class (*)(uint64_t))v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  long long v27 = sub_1001378BC((char *)1, 4, 1, (char *)v7);
  uint64_t v12 = sub_100007534((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v12, v12);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v15 + 16))(v14);
  sub_100116BFC(3, (uint64_t)v14, (uint64_t *)&v27, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_1001AAD38);
  sub_100007584((uint64_t)&aBlock);
  uint64_t v16 = v27;
  NSString v17 = String._bridgeToObjectiveC()();
  int v18 = (void *)swift_allocObject();
  v18[2] = 0xD00000000000001ELL;
  v18[3] = 0x800000010015D360;
  v18[4] = v16;
  int v25 = sub_10004AE50;
  char v26 = v18;
  aBlock = _NSConcreteStackBlock;
  uint64_t v22 = 1107296256;
  long long v23 = sub_100116B70;
  long long v24 = (ValueMetadata *)&unk_10019AF88;
  long long v19 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v19);
  swift_bridgeObjectRelease();
}

uint64_t sub_100115864()
{
  return Collection.first.getter();
}

uint64_t sub_1001158DC(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  swift_bridgeObjectRetain();
  sub_100116C94(v4, v3, 6, a1);

  return swift_bridgeObjectRelease();
}

void sub_100115938(uint64_t a1)
{
  sub_10000570C(&qword_1001A5390);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100152B90;
  uint64_t v5 = *v1;
  uint64_t v4 = v1[1];
  *(void *)(v3 + 56) = &type metadata for AnalyticsString;
  *(void *)(v3 + 64) = &off_1001AAD38;
  *(unsigned char *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = v5;
  *(void *)(v3 + 48) = v4;
  *(void *)(v3 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v3 + 104) = &off_1001AAD10;
  *(unsigned char *)(v3 + 72) = 6;
  *(void *)(v3 + 136) = &type metadata for AnalyticsModuleName;
  *(void *)(v3 + 144) = &off_1001AAD98;
  *(unsigned char *)(v3 + 112) = 0;
  *(void *)(v3 + 176) = &type metadata for AnalyticsModuleAction;
  *(void *)(v3 + 184) = &off_1001AAD70;
  *(_OWORD *)(v3 + 152) = xmmword_10015B700;
  *(unsigned char *)(v3 + 168) = 3;
  if (*(void *)(a1 + 72))
  {
    uint64_t v6 = *(void *)(a1 + 64);
    unint64_t v7 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  uint64_t v20 = &type metadata for AnalyticsString;
  int v21 = (void *(*)())&off_1001AAD38;
  LOBYTE(aBlock) = 1;
  uint64_t v18 = v6;
  long long v19 = (Class (*)(uint64_t))v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  long long v23 = sub_1001378BC((char *)1, 5, 1, (char *)v3);
  uint64_t v8 = sub_100007534((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v8, v8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v10);
  sub_100116BFC(4, (uint64_t)v10, (uint64_t *)&v23, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_1001AAD38);
  sub_100007584((uint64_t)&aBlock);
  uint64_t v12 = v23;
  NSString v13 = String._bridgeToObjectiveC()();
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = 0xD00000000000001ELL;
  v14[3] = 0x800000010015D360;
  v14[4] = v12;
  int v21 = sub_100007614;
  uint64_t v22 = v14;
  aBlock = _NSConcreteStackBlock;
  uint64_t v18 = 1107296256;
  long long v19 = sub_100116B70;
  uint64_t v20 = (ValueMetadata *)&unk_10019AF38;
  uint64_t v15 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v15);
  swift_bridgeObjectRelease();
}

void sub_100115C04(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v30 = v6;
  uint64_t v31 = v5;
  char v28 = v7;
  uint64_t v29 = v8;
  uint64_t v9 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v26 = v10;
  uint64_t v27 = v9;
  uint64_t v12 = v11;
  char v14 = v13;
  uint64_t v15 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v17 = v16;
  char v19 = v18;
  uint64_t v21 = v20;
  id v22 = [self mainBundle];
  v35._object = (void *)0xE000000000000000;
  v23._object = (void *)0x800000010015FA80;
  v23._countAndFlagsBits = 0xD00000000000001DLL;
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  v35._countAndFlagsBits = 0;
  Swift::String v25 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, (Swift::String_optional)0, (NSBundle)v22, v24, v35);

  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  *(void *)(a4 + 16) = a3;
  *(void *)(a4 + 24) = v31;
  *(void *)(a4 + 32) = v30;
  *(unsigned char *)(a4 + 40) = v28 & 1;
  *(void *)(a4 + 48) = v29;
  *(void *)(a4 + 56) = v27;
  *(void *)(a4 + 64) = v12;
  *(unsigned char *)(a4 + 72) = v14 & 1;
  *(void *)(a4 + 80) = v26;
  *(void *)(a4 + 88) = v15;
  *(void *)(a4 + 96) = v17;
  *(unsigned char *)(a4 + 104) = v19 & 1;
  *(void *)(a4 + 112) = v21;
  *(Swift::String *)(a4 + 120) = v25;
}

uint64_t sub_100115DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100115DB4()
{
  return swift_release();
}

uint64_t sub_100115DC0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100115E34(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v7 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v7;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100115F1C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 sub_100116064(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t sub_100116098(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100116168(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 136)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1001161B0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for TicketViewModel()
{
  return sub_10000B72C();
}

uint64_t sub_100116230(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  swift_retain();
  return a1;
}

void *sub_100116268(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[2];
  a1[1] = a2[1];
  a1[2] = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1001162AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for SafeAreaModifier()
{
  return sub_10000B72C();
}

uint64_t sub_100116300()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100116344@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v28 = a2;
  uint64_t v31 = a1;
  uint64_t v32 = a7;
  uint64_t v26 = a6;
  type metadata accessor for SafeAreaModifier();
  swift_getWitnessTable();
  type metadata accessor for _ViewModifier_Content();
  sub_100004A58(&qword_1001A68B8);
  type metadata accessor for _PreferenceWritingModifier();
  type metadata accessor for ModifiedContent();
  unint64_t v37 = sub_1000425A4();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v27 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  swift_getWitnessTable();
  type metadata accessor for GeometryReader();
  v25[1] = swift_getWitnessTable();
  v25[2] = type metadata accessor for _BackgroundModifier();
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)v25 - v15;
  uint64_t v17 = (void *)swift_allocObject();
  uint64_t v18 = v26;
  v17[2] = a5;
  v17[3] = v18;
  uint64_t v19 = v29;
  v17[4] = v28;
  uint64_t v17[5] = v19;
  v17[6] = v30;
  swift_retain();
  uint64_t v35 = GeometryReader.init(content:)();
  uint64_t v36 = v20;
  static Alignment.center.getter();
  uint64_t v21 = swift_getWitnessTable();
  View.background<A>(_:alignment:)();
  swift_release();
  uint64_t v22 = swift_getWitnessTable();
  uint64_t v33 = v21;
  uint64_t v34 = v22;
  swift_getWitnessTable();
  sub_1001221F0(v12, v8);
  Swift::String v23 = *(void (**)(char *, uint64_t))(v9 + 8);
  v23(v12, v8);
  sub_1001221F0(v16, v8);
  return ((uint64_t (*)(char *, uint64_t))v23)(v16, v8);
}

uint64_t sub_10011669C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  v26[4] = a4;
  uint64_t v28 = a2;
  uint64_t v29 = a6;
  v26[2] = a1;
  v26[1] = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v8);
  uint64_t v10 = (char *)v26 - v9;
  sub_100004A58(&qword_1001A68B8);
  v26[3] = type metadata accessor for _PreferenceWritingModifier();
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)v26 - v18;
  uint64_t v20 = static Color.clear.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v33 = v20;
  uint64_t v21 = GeometryProxy.safeAreaInsets.getter();
  a3(v21);
  unint64_t v22 = sub_1000425A4();
  View.preference<A>(key:value:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
  swift_release();
  swift_release();
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v30 = v22;
  uint64_t v31 = WitnessTable;
  swift_getWitnessTable();
  sub_1001221F0(v15, v11);
  Swift::String v24 = *(void (**)(char *, uint64_t))(v12 + 8);
  v24(v15, v11);
  sub_1001221F0(v19, v11);
  return ((uint64_t (*)(char *, uint64_t))v24)(v19, v11);
}

uint64_t sub_100116968@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100116344(a1, *v3, v3[1], v3[2], *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t sub_10011697C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1001169B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10011669C(a1, *(void *)(v2 + 32), *(void (**)(uint64_t))(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 24), a2);
}

uint64_t sub_1001169CC()
{
  return swift_getWitnessTable();
}

Class sub_100116B70(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_100116F54();
    v4.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4.super.Class isa = 0;
  }

  return v4.super.isa;
}

uint64_t sub_100116BFC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  uint64_t v9 = sub_10000A7C4((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(v9, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return sub_100017350(&v12, v10 + 40 * a1 + 32);
}

void sub_100116C94(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_10000570C(&qword_1001A5390);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100152B80;
  *(void *)(v8 + 56) = &type metadata for AnalyticsString;
  *(void *)(v8 + 64) = &off_1001AAD38;
  *(unsigned char *)(v8 + 32) = 0;
  *(void *)(v8 + 40) = a1;
  *(void *)(v8 + 48) = a2;
  *(void *)(v8 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v8 + 104) = &off_1001AAD10;
  *(unsigned char *)(v8 + 72) = a3;
  if (*(void *)(a4 + 72))
  {
    uint64_t v9 = *(void *)(a4 + 64);
    unint64_t v10 = *(void *)(a4 + 72);
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0xE000000000000000;
  }
  Swift::String v23 = &type metadata for AnalyticsString;
  Swift::String v24 = (void *(*)())&off_1001AAD38;
  LOBYTE(aBlock) = 1;
  uint64_t v21 = v9;
  unint64_t v22 = (Class (*)(uint64_t))v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v26 = sub_1001378BC((char *)1, 3, 1, (char *)v8);
  uint64_t v11 = sub_100007534((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v11, v11);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v14 + 16))(v13);
  sub_100116BFC(2, (uint64_t)v13, (uint64_t *)&v26, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_1001AAD38);
  sub_100007584((uint64_t)&aBlock);
  uint64_t v15 = v26;
  NSString v16 = String._bridgeToObjectiveC()();
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = 0xD00000000000001CLL;
  v17[3] = 0x800000010015FAA0;
  v17[4] = v15;
  Swift::String v24 = sub_100116F34;
  Swift::String v25 = v17;
  aBlock = _NSConcreteStackBlock;
  uint64_t v21 = 1107296256;
  unint64_t v22 = sub_100116B70;
  Swift::String v23 = (ValueMetadata *)&unk_10019B0B0;
  uint64_t v18 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v18);
  swift_bridgeObjectRelease();
}

void *sub_100116F34()
{
  return sub_1001172A8(*(void *)(v0 + 32));
}

uint64_t sub_100116F3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100116F4C()
{
  return swift_release();
}

unint64_t sub_100116F54()
{
  unint64_t result = qword_1001AC358;
  if (!qword_1001AC358)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001AC358);
  }
  return result;
}

void sub_100116F94(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, unsigned __int8 a7, uint64_t a8)
{
  sub_10000570C(&qword_1001A5390);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_100152B90;
  *(void *)(v16 + 56) = &type metadata for AnalyticsString;
  *(void *)(v16 + 64) = &off_1001AAD38;
  *(unsigned char *)(v16 + 32) = 0;
  *(void *)(v16 + 40) = a1;
  *(void *)(v16 + 48) = a2;
  *(void *)(v16 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v16 + 104) = &off_1001AAD10;
  *(unsigned char *)(v16 + 72) = a3;
  *(void *)(v16 + 136) = &type metadata for AnalyticsModuleName;
  *(void *)(v16 + 144) = &off_1001AAD98;
  *(unsigned char *)(v16 + 112) = a4;
  *(void *)(v16 + 176) = &type metadata for AnalyticsModuleAction;
  *(void *)(v16 + 184) = &off_1001AAD70;
  *(void *)(v16 + 152) = a5;
  *(void *)(v16 + 160) = a6;
  *(unsigned char *)(v16 + 168) = a7;
  if (*(void *)(a8 + 72))
  {
    uint64_t v17 = *(void *)(a8 + 64);
    unint64_t v18 = *(void *)(a8 + 72);
  }
  else
  {
    uint64_t v17 = 0;
    unint64_t v18 = 0xE000000000000000;
  }
  uint64_t v33 = &type metadata for AnalyticsString;
  uint64_t v34 = (void *(*)())&off_1001AAD38;
  LOBYTE(aBlock) = 1;
  uint64_t v31 = v17;
  uint64_t v32 = (Class (*)(uint64_t))v18;
  swift_bridgeObjectRetain();
  sub_10000751C(a5, a6, a7);
  uint64_t v36 = (char *)v16;
  unint64_t v19 = *(void *)(v16 + 16);
  unint64_t v20 = *(void *)(v16 + 24);
  swift_bridgeObjectRetain();
  if (v19 >= v20 >> 1) {
    uint64_t v36 = sub_1001378BC((char *)(v20 > 1), v19 + 1, 1, (char *)v16);
  }
  uint64_t v21 = sub_100007534((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v21, v21);
  Swift::String v23 = (char *)&v29 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v24 + 16))(v23);
  sub_100116BFC(v19, (uint64_t)v23, (uint64_t *)&v36, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_1001AAD38);
  sub_100007584((uint64_t)&aBlock);
  Swift::String v25 = v36;
  NSString v26 = String._bridgeToObjectiveC()();
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = 0xD00000000000001ELL;
  v27[3] = 0x800000010015D360;
  v27[4] = v25;
  uint64_t v34 = sub_100007614;
  uint64_t v35 = v27;
  aBlock = _NSConcreteStackBlock;
  uint64_t v31 = 1107296256;
  uint64_t v32 = sub_100116B70;
  uint64_t v33 = (ValueMetadata *)&unk_10019B100;
  uint64_t v28 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);
  swift_bridgeObjectRelease();
}

void *sub_1001172A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1)
  {
    swift_bridgeObjectRetain();
LABEL_23:
    swift_bridgeObjectRelease();
    return _swiftEmptyDictionarySingleton;
  }
  uint64_t v2 = a1 + 32;
  swift_bridgeObjectRetain_n();
  while (1)
  {
    sub_10000AD3C(v2, (uint64_t)v32);
    uint64_t v5 = v33;
    uint64_t v6 = v34;
    sub_10000AC9C(v32, v33);
    char v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
    if (_swiftEmptyDictionarySingleton[2])
    {
      sub_1000B81CC(*(void *)&aId_3[8 * v7], *(void *)&aBundleidpagena[8 * v7 + 32]);
      char v9 = v8;
      swift_bridgeObjectRelease();
      if (v9) {
        goto LABEL_5;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v10 = v33;
    uint64_t v11 = v34;
    sub_10000AC9C(v32, v33);
    uint64_t v12 = 8 * (*(char (**)(uint64_t, uint64_t))(v11 + 16))(v10, v11);
    uint64_t v13 = *(void *)&aId_3[v12];
    uint64_t v14 = *(void *)&aBundleidpagena[v12 + 32];
    uint64_t v15 = v33;
    uint64_t v16 = v34;
    sub_10000AC9C(v32, v33);
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 32))(v15, v16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v20 = sub_1000B81CC(v13, v14);
    uint64_t v21 = _swiftEmptyDictionarySingleton[2];
    BOOL v22 = (v19 & 1) == 0;
    uint64_t v23 = v21 + v22;
    if (__OFADD__(v21, v22)) {
      break;
    }
    char v24 = v19;
    if (_swiftEmptyDictionarySingleton[3] >= v23)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if ((v19 & 1) == 0) {
          goto LABEL_17;
        }
      }
      else
      {
        sub_10014AE3C();
        if ((v24 & 1) == 0) {
          goto LABEL_17;
        }
      }
    }
    else
    {
      sub_10014A68C(v23, isUniquelyReferenced_nonNull_native);
      unint64_t v25 = sub_1000B81CC(v13, v14);
      if ((v24 & 1) != (v26 & 1)) {
        goto LABEL_26;
      }
      unint64_t v20 = v25;
      if ((v24 & 1) == 0)
      {
LABEL_17:
        _swiftEmptyDictionarySingleton[(v20 >> 6) + 8] |= 1 << v20;
        uint64_t v27 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v20);
        *uint64_t v27 = v13;
        v27[1] = v14;
        *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v20) = v17;
        uint64_t v28 = _swiftEmptyDictionarySingleton[2];
        BOOL v29 = __OFADD__(v28, 1);
        uint64_t v30 = v28 + 1;
        if (v29) {
          goto LABEL_25;
        }
        _swiftEmptyDictionarySingleton[2] = v30;
        swift_bridgeObjectRetain();
        goto LABEL_4;
      }
    }
    uint64_t v3 = _swiftEmptyDictionarySingleton[7];
    NSDictionary v4 = *(void **)(v3 + 8 * v20);
    *(void *)(v3 + 8 * v20) = v17;

LABEL_4:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    sub_100007584((uint64_t)v32);
    v2 += 40;
    if (!--v1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  unint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t destroy for ScrollableTab(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 16) >= 2uLL) {
    swift_bridgeObjectRelease();
  }
  swift_release();

  return swift_release();
}

void *initializeWithCopy for ScrollableTab(void *a1, void *a2)
{
  *a1 = *a2;
  NSDictionary v4 = a2 + 1;
  unint64_t v5 = a2[2];
  swift_bridgeObjectRetain();
  if (v5 >= 2)
  {
    a1[1] = *v4;
    a1[2] = v5;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 1) = *(_OWORD *)v4;
  }
  uint64_t v6 = a2[4];
  a1[3] = a2[3];
  a1[4] = v6;
  uint64_t v7 = a2[6];
  a1[5] = a2[5];
  a1[6] = v7;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for ScrollableTab(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v4 = a2[2];
  if (a1[2] >= 2uLL)
  {
    if (v4 >= 2)
    {
      a1[1] = a2[1];
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_1000077B4((uint64_t)(a1 + 1));
    goto LABEL_6;
  }
  if (v4 < 2)
  {
LABEL_6:
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    goto LABEL_8;
  }
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
LABEL_8:
  uint64_t v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  return a1;
}

uint64_t assignWithTake for ScrollableTab(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  unint64_t v4 = (void *)(a2 + 8);
  if (*(void *)(a1 + 16) >= 2uLL)
  {
    unint64_t v5 = *(void *)(a2 + 16);
    if (v5 >= 2)
    {
      *(void *)(a1 + 8) = *v4;
      *(void *)(a1 + 16) = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1000077B4(a1 + 8);
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v4;
LABEL_6:
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollableTab(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollableTab(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollableTab()
{
  return &type metadata for ScrollableTab;
}

uint64_t sub_1001178C0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1001178DC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v22 = a3;
  uint64_t v5 = type metadata accessor for ScrollViewProxy();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5, v8);
  uint64_t v21 = sub_10000570C(&qword_1001AC370);
  uint64_t v9 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Axis.Set.horizontal.getter();
  uint64_t v23 = a2;
  sub_10000570C(&qword_1001AC378);
  sub_100118324();
  ScrollView.init(_:showsIndicators:content:)();
  long long v13 = *(_OWORD *)(a2 + 1);
  uint64_t v26 = *a2;
  long long v24 = *(_OWORD *)(a2 + 5);
  long long v25 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  unint64_t v14 = (*(unsigned __int8 *)(v6 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v15 = swift_allocObject();
  long long v16 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(v15 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v15 + 32) = v16;
  *(_OWORD *)(v15 + 48) = *((_OWORD *)a2 + 2);
  *(void *)(v15 + 64) = a2[6];
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v15 + v14, (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  uint64_t v17 = v21;
  uint64_t v18 = v22;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(v22, v12, v21);
  char v19 = (uint64_t (**)())(v18 + *(int *)(sub_10000570C(&qword_1001AC398) + 36));
  *char v19 = sub_1001184B8;
  v19[1] = (uint64_t (*)())v15;
  v19[2] = 0;
  v19[3] = 0;
  sub_100058A48((uint64_t)&v26);
  sub_1001182EC((uint64_t)&v25);
  swift_retain();
  sub_100012A84((uint64_t)&v24);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v17);
}

uint64_t sub_100117B88@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000570C(&qword_1001AC390);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v7 = static VerticalAlignment.center.getter();
  *((void *)v7 + 1) = 0x4020000000000000;
  v7[16] = 0;
  sub_10000570C(&qword_1001AC3A0);
  uint64_t v8 = *a1;
  long long v16 = *(_OWORD *)(a1 + 1);
  uint64_t v17 = v8;
  v14[1] = v8;
  swift_getKeyPath();
  long long v15 = *(_OWORD *)(a1 + 5);
  uint64_t v9 = swift_allocObject();
  long long v10 = *((_OWORD *)a1 + 1);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v9 + 32) = v10;
  *(_OWORD *)(v9 + 48) = *((_OWORD *)a1 + 2);
  *(void *)(v9 + 64) = a1[6];
  swift_bridgeObjectRetain();
  sub_100058A48((uint64_t)&v17);
  sub_1001182EC((uint64_t)&v16);
  swift_retain();
  sub_100012A84((uint64_t)&v15);
  sub_10000570C(&qword_1001AC3A8);
  sub_10000570C(&qword_1001AC3B0);
  sub_10000A780(&qword_1001AC3B8, &qword_1001AC3A8);
  sub_1001199F8();
  sub_10000A780(&qword_1001AC3C8, &qword_1001AC3B0);
  ForEach<>.init(_:id:content:)();
  char v11 = static Edge.Set.horizontal.getter();
  sub_10000A428((uint64_t)v7, a2, &qword_1001AC390);
  uint64_t v12 = a2 + *(int *)(sub_10000570C(&qword_1001AC378) + 36);
  *(unsigned char *)uint64_t v12 = v11;
  *(_OWORD *)(v12 + 8) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(unsigned char *)(v12 + 40) = 1;
  return sub_10000ACE0((uint64_t)v7, &qword_1001AC390);
}

uint64_t sub_100117DDC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  __n128 v17 = *(__n128 *)(a2 + 8);
  sub_100119A4C(&v17, &v18);
  sub_100119A4C(&v18, &v19);
  if (v19.n128_u64[1] == 1)
  {
    if (v6 == 1)
    {
      uint64_t v8 = swift_allocObject();
      long long v12 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(v8 + 16) = *(_OWORD *)a2;
      *(_OWORD *)(v8 + 32) = v12;
      *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + 32);
      *(void *)(v8 + 64) = *(void *)(a2 + 48);
      *(void *)(v8 + 72) = v5;
      char v10 = 1;
      *(void *)(v8 + 80) = 1;
LABEL_10:
      unint64_t v11 = 0xEF6E6F697461636FLL;
      uint64_t v7 = 0x4C746E6572727563;
      goto LABEL_18;
    }
    goto LABEL_8;
  }
  if (v19.n128_u64[1])
  {
    if (v6 >= 2)
    {
      if (v19.n128_u64[0] == v5 && v6 == v19.n128_u64[1])
      {
        uint64_t v8 = swift_allocObject();
        long long v14 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(v8 + 16) = *(_OWORD *)a2;
        *(_OWORD *)(v8 + 32) = v14;
        *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + 32);
        *(void *)(v8 + 64) = *(void *)(a2 + 48);
        *(void *)(v8 + 72) = v5;
        *(void *)(v8 + 80) = v6;
        char v10 = 1;
      }
      else
      {
        char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v8 = swift_allocObject();
        long long v15 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(v8 + 16) = *(_OWORD *)a2;
        *(_OWORD *)(v8 + 32) = v15;
        *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + 32);
        *(void *)(v8 + 64) = *(void *)(a2 + 48);
        *(void *)(v8 + 72) = v5;
        *(void *)(v8 + 80) = v6;
      }
      goto LABEL_17;
    }
LABEL_8:
    uint64_t v8 = swift_allocObject();
    char v10 = 0;
    long long v13 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v8 + 16) = *(_OWORD *)a2;
    *(_OWORD *)(v8 + 32) = v13;
    *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + 32);
    *(void *)(v8 + 64) = *(void *)(a2 + 48);
    *(void *)(v8 + 72) = v5;
    *(void *)(v8 + 80) = v6;
    if (!v6)
    {
      uint64_t v7 = 7105633;
      unint64_t v11 = 0xE300000000000000;
      goto LABEL_18;
    }
    if (v6 == 1) {
      goto LABEL_10;
    }
    char v10 = 0;
LABEL_17:
    uint64_t v7 = v5;
    unint64_t v11 = v6;
    goto LABEL_18;
  }
  if (v6) {
    goto LABEL_8;
  }
  uint64_t v7 = 7105633;
  uint64_t v8 = swift_allocObject();
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 32) = v9;
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + 32);
  *(void *)(v8 + 64) = *(void *)(a2 + 48);
  *(void *)(v8 + 72) = v5;
  *(void *)(v8 + 80) = 0;
  char v10 = 1;
  unint64_t v11 = 0xE300000000000000;
LABEL_18:
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = v10 & 1;
  *(void *)(a3 + 24) = sub_100119AAC;
  *(void *)(a3 + 32) = v8;
  *(void *)(a3 + 40) = v7;
  *(void *)(a3 + 48) = v11;
  sub_100008068(v5, v6);
  sub_100008068(v5, v6);
  sub_100008068(v5, v6);
  swift_bridgeObjectRetain();
  sub_1001182EC((uint64_t)&v17);
  swift_retain();
  return swift_retain();
}

uint64_t sub_1001180D0(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    uint64_t v2 = *(void *)a1;
    uint64_t v3 = swift_retain();
    uint64_t v4 = sub_10014CC44(v3, v2);
    uint64_t v6 = v5;
    uint64_t result = swift_release();
    if (v6 != 2)
    {
      (*(void (**)(uint64_t, uint64_t))(a1 + 24))(v4, v6);
      static UnitPoint.trailing.getter();
      ScrollViewProxy.scrollTo<A>(_:anchor:)();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10011A44C((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10011822C@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v5 = v1[3];
  uint64_t v4 = v1[4];
  long long v8 = *(_OWORD *)(v1 + 1);
  uint64_t v9 = v3;
  long long v10 = *(_OWORD *)(v1 + 5);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v3;
  *(_OWORD *)(v6 + 24) = *(_OWORD *)(v1 + 1);
  *(void *)(v6 + 40) = v5;
  *(void *)(v6 + 48) = v4;
  *(_OWORD *)(v6 + 56) = *(_OWORD *)(v1 + 5);
  *a1 = sub_1001182E4;
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v6;
  sub_100058A48((uint64_t)&v9);
  sub_1001182EC((uint64_t)&v8);
  swift_retain();
  return sub_100012A84((uint64_t)&v10);
}

uint64_t sub_1001182E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001178DC(a1, (uint64_t *)(v2 + 16), a2);
}

uint64_t sub_1001182EC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10011831C@<X0>(uint64_t a1@<X8>)
{
  return sub_100117B88(*(uint64_t **)(v1 + 16), a1);
}

unint64_t sub_100118324()
{
  unint64_t result = qword_1001AC380;
  if (!qword_1001AC380)
  {
    sub_100004A58(&qword_1001AC378);
    sub_10000A780(&qword_1001AC388, &qword_1001AC390);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC380);
  }
  return result;
}

uint64_t sub_1001183C4()
{
  uint64_t v1 = type metadata accessor for ScrollViewProxy();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 32) >= 2uLL) {
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + ((v3 + 72) & ~v3), v1);

  return swift_deallocObject();
}

uint64_t sub_1001184B8()
{
  type metadata accessor for ScrollViewProxy();

  return sub_1001180D0(v0 + 16);
}

void sub_10011851C()
{
  id v0 = [self mainBundle];
  v4._object = (void *)0xE000000000000000;
  v1._object = (void *)0x800000010015FAC0;
  v1._countAndFlagsBits = 0xD00000000000001BLL;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v4._countAndFlagsBits = 0;
  Swift::String v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v4);

  xmmword_1001AC360 = (__int128)v3;
}

uint64_t sub_1001185C0@<X0>(uint64_t a1@<X8>)
{
  v24[1] = a1;
  v24[0] = sub_10000570C(&qword_1001AC3E0);
  __chkstk_darwin(v24[0], v2);
  Swift::String v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000570C(&qword_1001AC3E8);
  __chkstk_darwin(v5, v6);
  long long v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000570C(&qword_1001AC3F0);
  __chkstk_darwin(v9, v10);
  long long v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000570C(&qword_1001AC3F8);
  __chkstk_darwin(v13, v14);
  long long v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000570C(&qword_1001AC400);
  __chkstk_darwin(v17, v18);
  unint64_t v20 = (char *)v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100119A4C(v1, &v25);
  sub_100119A4C(&v25, &v26);
  if (v26.n128_u64[1] == 1)
  {
    sub_100118DC0((uint64_t)v4);
    sub_10000A428((uint64_t)v4, (uint64_t)v12, &qword_1001AC3E0);
    swift_storeEnumTagMultiPayload();
    sub_100119E5C();
    sub_10011A03C();
    _ConditionalContent<>.init(storage:)();
    sub_10000A428((uint64_t)v16, (uint64_t)v8, &qword_1001AC3F8);
    swift_storeEnumTagMultiPayload();
    sub_100119E20();
    _ConditionalContent<>.init(storage:)();
    sub_10000ACE0((uint64_t)v16, &qword_1001AC3F8);
    uint64_t v21 = (uint64_t)v4;
    uint64_t v22 = &qword_1001AC3E0;
  }
  else if (v26.n128_u64[1])
  {
    sub_1001189D4(v26.n128_i64[0], v26.n128_i64[1], (uint64_t)v20);
    sub_10000A428((uint64_t)v20, (uint64_t)v8, &qword_1001AC400);
    swift_storeEnumTagMultiPayload();
    sub_100119E20();
    sub_100119E5C();
    _ConditionalContent<>.init(storage:)();
    uint64_t v21 = (uint64_t)v20;
    uint64_t v22 = &qword_1001AC400;
  }
  else
  {
    if (qword_1001A4EE0 != -1) {
      swift_once();
    }
    sub_1001189D4(xmmword_1001AC360, *((uint64_t *)&xmmword_1001AC360 + 1), (uint64_t)v20);
    sub_10000A428((uint64_t)v20, (uint64_t)v12, &qword_1001AC400);
    swift_storeEnumTagMultiPayload();
    sub_100119E5C();
    sub_10011A03C();
    _ConditionalContent<>.init(storage:)();
    sub_10000A428((uint64_t)v16, (uint64_t)v8, &qword_1001AC3F8);
    swift_storeEnumTagMultiPayload();
    sub_100119E20();
    _ConditionalContent<>.init(storage:)();
    sub_10000ACE0((uint64_t)v16, &qword_1001AC3F8);
    uint64_t v21 = (uint64_t)v20;
    uint64_t v22 = &qword_1001AC400;
  }
  return sub_10000ACE0(v21, v22);
}

uint64_t sub_1001189D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v47 = a1;
  uint64_t v51 = a3;
  uint64_t v49 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v49, v5);
  uint64_t v50 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000570C(&qword_1001AC440);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000570C(&qword_1001AC430);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12, v14);
  long long v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_10000570C(&qword_1001AC420);
  __chkstk_darwin(v48, v17);
  uint64_t v19 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = v47;
  uint64_t v53 = a2;
  uint64_t v54 = v3;
  swift_retain();
  sub_10000570C(&qword_1001A6EE8);
  sub_1000555B4();
  Button.init(action:label:)();
  char v20 = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v16, v11, v7);
  BOOL v29 = &v16[*(int *)(v13 + 44)];
  *BOOL v29 = v20;
  *((void *)v29 + 1) = v22;
  *((void *)v29 + 2) = v24;
  *((void *)v29 + 3) = v26;
  *((void *)v29 + 4) = v28;
  v29[40] = 0;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  if (*(unsigned char *)(v3 + 16))
  {
    uint64_t v30 = static Color.primary.getter();
  }
  else
  {
    if (qword_1001A4E38 != -1) {
      swift_once();
    }
    uint64_t v30 = qword_1001B74D8;
    swift_retain();
  }
  char v31 = static Edge.Set.all.getter();
  sub_10000A428((uint64_t)v16, (uint64_t)v19, &qword_1001AC430);
  uint64_t v32 = &v19[*(int *)(v48 + 36)];
  *(void *)uint64_t v32 = v30;
  v32[8] = v31;
  sub_10000ACE0((uint64_t)v16, &qword_1001AC430);
  uint64_t v33 = v50;
  uint64_t v34 = &v50[*(int *)(v49 + 20)];
  uint64_t v35 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v36 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 104))(v34, v35, v36);
  __asm { FMOV            V0.2D, #8.0 }
  *uint64_t v33 = _Q0;
  uint64_t v42 = sub_10000570C(&qword_1001AC400);
  uint64_t v43 = v51;
  uint64_t v44 = v51 + *(int *)(v42 + 36);
  sub_1000243EC((uint64_t)v33, v44);
  *(_WORD *)(v44 + *(int *)(sub_10000570C(&qword_1001A62A8) + 36)) = 256;
  sub_10000A428((uint64_t)v19, v43, &qword_1001AC420);
  sub_100024450((uint64_t)v33);
  return sub_10000ACE0((uint64_t)v19, &qword_1001AC420);
}

uint64_t sub_100118DC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v91 = a1;
  uint64_t v2 = type metadata accessor for AccessibilityTraits();
  uint64_t v92 = *(void *)(v2 - 8);
  uint64_t v93 = v2;
  __chkstk_darwin(v2, v3);
  int v90 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v88, v5);
  long long v89 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for TitleAndIconLabelStyle();
  uint64_t v83 = *(void *)(v81 - 8);
  __chkstk_darwin(v81, v7);
  uint64_t v79 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for SymbolVariants();
  uint64_t v76 = *(void *)(v78 - 8);
  __chkstk_darwin(v78, v9);
  uint64_t v11 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000570C(&qword_1001AC4A8);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for LocationButton();
  uint64_t v72 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = sub_10000570C(&qword_1001AC490);
  uint64_t v75 = *(void *)(v73 - 8);
  __chkstk_darwin(v73, v20);
  uint64_t v22 = (char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_10000570C(&qword_1001AC4B0);
  uint64_t v74 = *(void *)(v77 - 8);
  __chkstk_darwin(v77, v23);
  uint64_t v71 = (char *)&v69 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000570C(&qword_1001AC488);
  uint64_t v26 = v25 - 8;
  __chkstk_darwin(v25, v27);
  BOOL v29 = (char *)&v69 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = sub_10000570C(&qword_1001AC478);
  __chkstk_darwin(v80, v30);
  uint64_t v84 = (char *)&v69 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = sub_10000570C(&qword_1001AC468);
  __chkstk_darwin(v82, v32);
  uint64_t v85 = (uint64_t)&v69 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_10000570C(&qword_1001AC458);
  __chkstk_darwin(v86, v34);
  uint64_t v87 = (char *)&v69 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  static LocationButton.Title.currentLocation.getter();
  uint64_t v36 = type metadata accessor for LocationButton.Title();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v15, 0, 1, v36);
  uint64_t v70 = v1;
  swift_retain();
  LocationButton.init(_:action:)();
  static SymbolVariants.fill.getter();
  uint64_t v37 = sub_10011A44C(&qword_1001AC498, (void (*)(uint64_t))&type metadata accessor for LocationButton);
  View.symbolVariant(_:)();
  (*(void (**)(char *, uint64_t))(v76 + 8))(v11, v78);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v19, v16);
  uint64_t v38 = v79;
  TitleAndIconLabelStyle.init()();
  uint64_t v94 = v16;
  uint64_t v95 = v37;
  swift_getOpaqueTypeConformance2();
  sub_10011A44C(&qword_1001AC4A0, (void (*)(uint64_t))&type metadata accessor for TitleAndIconLabelStyle);
  uint64_t v39 = v71;
  uint64_t v40 = v73;
  uint64_t v41 = v81;
  View.labelStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v83 + 8))(v38, v41);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v22, v40);
  uint64_t v42 = static Font.subheadline.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v44 = v74;
  uint64_t v45 = v77;
  (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v29, v39, v77);
  uint64_t v46 = (uint64_t *)&v29[*(int *)(v26 + 44)];
  *uint64_t v46 = KeyPath;
  v46[1] = v42;
  (*(void (**)(char *, uint64_t))(v44 + 8))(v39, v45);
  char v47 = *(unsigned char *)(v70 + 16);
  if (v47)
  {
    if (qword_1001A4E30 != -1) {
      swift_once();
    }
    uint64_t v48 = qword_1001B74D0;
    swift_retain();
  }
  else
  {
    uint64_t v48 = static Color.primary.getter();
  }
  uint64_t v49 = (uint64_t)v84;
  uint64_t v50 = swift_getKeyPath();
  sub_10000A428((uint64_t)v29, v49, &qword_1001AC488);
  uint64_t v51 = (uint64_t *)(v49 + *(int *)(v80 + 36));
  *uint64_t v51 = v50;
  v51[1] = v48;
  sub_10000ACE0((uint64_t)v29, &qword_1001AC488);
  if (v47)
  {
    uint64_t v52 = static Color.primary.getter();
  }
  else
  {
    if (qword_1001A4E38 != -1) {
      swift_once();
    }
    uint64_t v52 = qword_1001B74D8;
    swift_retain();
  }
  uint64_t v53 = swift_getKeyPath();
  uint64_t v54 = v85;
  sub_10000A428(v49, v85, &qword_1001AC478);
  uint64_t v55 = (uint64_t *)(v54 + *(int *)(v82 + 36));
  *uint64_t v55 = v53;
  v55[1] = v52;
  sub_10000ACE0(v49, &qword_1001AC478);
  uint64_t v56 = v89;
  uint64_t v57 = &v89[*(int *)(v88 + 20)];
  uint64_t v58 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v59 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v59 - 8) + 104))(v57, v58, v59);
  __asm { FMOV            V0.2D, #8.0 }
  *uint64_t v56 = _Q0;
  uint64_t v65 = (uint64_t)v87;
  uint64_t v66 = (uint64_t)&v87[*(int *)(v86 + 36)];
  sub_1000243EC((uint64_t)v56, v66);
  *(_WORD *)(v66 + *(int *)(sub_10000570C(&qword_1001A62A8) + 36)) = 256;
  sub_10000A428(v54, v65, &qword_1001AC468);
  sub_100024450((uint64_t)v56);
  sub_10000ACE0(v54, &qword_1001AC468);
  unsigned int v67 = v90;
  static AccessibilityTraits.isButton.getter();
  sub_10011A0E8();
  View.accessibility(addTraits:)();
  (*(void (**)(char *, uint64_t))(v92 + 8))(v67, v93);
  return sub_10000ACE0(v65, &qword_1001AC458);
}

double sub_10011975C@<D0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  sub_100010B2C();
  swift_bridgeObjectRetain();
  uint64_t v3 = Text.init<A>(_:)();
  uint64_t v5 = v4;
  char v7 = v6 & 1;
  static Font.subheadline.getter();
  uint64_t v8 = Text.font(_:)();
  uint64_t v10 = v9;
  char v12 = v11;
  swift_release();
  sub_10000FCC4(v3, v5, v7);
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(a1 + 16))
  {
    if (qword_1001A4E30 != -1) {
      swift_once();
    }
    swift_retain();
  }
  else
  {
    static Color.primary.getter();
  }
  uint64_t v13 = Text.foregroundColor(_:)();
  uint64_t v15 = v14;
  char v17 = v16;
  uint64_t v19 = v18;
  swift_release();
  sub_10000FCC4(v8, v10, v12 & 1);
  swift_bridgeObjectRelease();
  char v20 = static Edge.Set.horizontal.getter();
  *(void *)a2 = v13;
  *(void *)(a2 + 8) = v15;
  *(unsigned char *)(a2 + 16) = v17 & 1;
  *(void *)(a2 + 24) = v19;
  *(unsigned char *)(a2 + 32) = v20;
  double result = 0.0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(unsigned char *)(a2 + 72) = 1;
  return result;
}

uint64_t sub_100119900@<X0>(uint64_t a1@<X8>)
{
  return sub_1001185C0(a1);
}

uint64_t sub_10011993C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100119968()
{
  return EnvironmentValues.tintColor.setter();
}

uint64_t sub_100119998()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 32) >= 2uLL) {
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1001199F0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100117DDC(a1, v2 + 16, a2);
}

unint64_t sub_1001199F8()
{
  unint64_t result = qword_1001AC3C0;
  if (!qword_1001AC3C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC3C0);
  }
  return result;
}

__n128 *sub_100119A4C(__n128 *a1, __n128 *a2)
{
  return a2;
}

uint64_t sub_100119AC0()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 32) >= 2uLL) {
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  if (*(void *)(v0 + 80) >= 2uLL) {
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

uint64_t sub_100119B28()
{
  return (*(uint64_t (**)(void, void))(v0 + 40))(*(void *)(v0 + 72), *(void *)(v0 + 80));
}

uint64_t destroy for TabButton(uint64_t a1)
{
  if (*(void *)(a1 + 8) >= 2uLL) {
    swift_bridgeObjectRelease();
  }

  return swift_release();
}

uint64_t initializeWithCopy for TabButton(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 >= 2)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TabButton(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) >= 2uLL)
  {
    if (v4 >= 2)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_1000077B4(a1);
    goto LABEL_6;
  }
  if (v4 < 2)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
LABEL_8:
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for TabButton(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) >= 2uLL)
  {
    unint64_t v4 = *(void *)(a2 + 8);
    if (v4 >= 2)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1000077B4(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TabButton(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TabButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TabButton()
{
  return &type metadata for TabButton;
}

uint64_t sub_100119DC8()
{
  return sub_10000A780(&qword_1001AC3D0, &qword_1001AC3D8);
}

uint64_t sub_100119E04()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100119E20()
{
  return sub_10011A558(&qword_1001AC408, &qword_1001AC3F8, (void (*)(void))sub_100119E5C, (void (*)(void))sub_10011A03C);
}

unint64_t sub_100119E5C()
{
  unint64_t result = qword_1001AC410;
  if (!qword_1001AC410)
  {
    sub_100004A58(&qword_1001AC400);
    sub_100119EFC();
    sub_10000A780(&qword_1001A62A0, &qword_1001A62A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC410);
  }
  return result;
}

unint64_t sub_100119EFC()
{
  unint64_t result = qword_1001AC418;
  if (!qword_1001AC418)
  {
    sub_100004A58(&qword_1001AC420);
    sub_100119F9C();
    sub_10000A780(&qword_1001A6290, &qword_1001A6298);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC418);
  }
  return result;
}

unint64_t sub_100119F9C()
{
  unint64_t result = qword_1001AC428;
  if (!qword_1001AC428)
  {
    sub_100004A58(&qword_1001AC430);
    sub_10000A780(&qword_1001AC438, &qword_1001AC440);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC428);
  }
  return result;
}

unint64_t sub_10011A03C()
{
  unint64_t result = qword_1001AC448;
  if (!qword_1001AC448)
  {
    sub_100004A58(&qword_1001AC3E0);
    sub_10011A0E8();
    sub_10011A44C((unint64_t *)&qword_1001A68E8, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC448);
  }
  return result;
}

unint64_t sub_10011A0E8()
{
  unint64_t result = qword_1001AC450;
  if (!qword_1001AC450)
  {
    sub_100004A58(&qword_1001AC458);
    sub_10011A188();
    sub_10000A780(&qword_1001A62A0, &qword_1001A62A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC450);
  }
  return result;
}

unint64_t sub_10011A188()
{
  unint64_t result = qword_1001AC460;
  if (!qword_1001AC460)
  {
    sub_100004A58(&qword_1001AC468);
    sub_10011A228();
    sub_10000A780(&qword_1001A68C0, &qword_1001A68C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC460);
  }
  return result;
}

unint64_t sub_10011A228()
{
  unint64_t result = qword_1001AC470;
  if (!qword_1001AC470)
  {
    sub_100004A58(&qword_1001AC478);
    sub_10011A2C8();
    sub_10000A780(&qword_1001A68C0, &qword_1001A68C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC470);
  }
  return result;
}

unint64_t sub_10011A2C8()
{
  unint64_t result = qword_1001AC480;
  if (!qword_1001AC480)
  {
    sub_100004A58(&qword_1001AC488);
    sub_100004A58(&qword_1001AC490);
    type metadata accessor for TitleAndIconLabelStyle();
    type metadata accessor for LocationButton();
    sub_10011A44C(&qword_1001AC498, (void (*)(uint64_t))&type metadata accessor for LocationButton);
    swift_getOpaqueTypeConformance2();
    sub_10011A44C(&qword_1001AC4A0, (void (*)(uint64_t))&type metadata accessor for TitleAndIconLabelStyle);
    swift_getOpaqueTypeConformance2();
    sub_10000A780(&qword_1001A6280, &qword_1001A6288);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC480);
  }
  return result;
}

uint64_t sub_10011A44C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10011A4A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10011A4D0()
{
  return EnvironmentValues.tintColor.setter();
}

double sub_10011A4FC@<D0>(uint64_t a1@<X8>)
{
  return sub_10011975C(*(void *)(v1 + 32), a1);
}

uint64_t sub_10011A508()
{
  return sub_10011A558(&qword_1001AC4B8, &qword_1001AC4C0, (void (*)(void))sub_100119E20, (void (*)(void))sub_100119E5C);
}

uint64_t sub_10011A558(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10011A5E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v53 = a1;
  uint64_t v54 = a3;
  uint64_t v56 = a5;
  uint64_t v7 = sub_10000570C(&qword_1001AC568);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (uint64_t *)((char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = sub_10000570C(&qword_1001AC570);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000570C(&qword_1001AC578);
  __chkstk_darwin(v16 - 8, v17);
  uint64_t v52 = (uint64_t)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000570C(&qword_1001AC580);
  uint64_t v20 = v19 - 8;
  __chkstk_darwin(v19, v21);
  uint64_t v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000570C(&qword_1001AC588);
  uint64_t v25 = v24 - 8;
  __chkstk_darwin(v24, v26);
  uint64_t v28 = (char *)&v51 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_10000570C(&qword_1001AC590) - 8;
  __chkstk_darwin(v55, v29);
  uint64_t v31 = (char *)&v51 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  *uint64_t v10 = static Alignment.center.getter();
  v10[1] = v32;
  uint64_t v33 = sub_10000570C(&qword_1001AC598);
  sub_10011AA30(v53, a2, v54, a4, (uint64_t)v10 + *(int *)(v33 + 44));
  sub_10000A428((uint64_t)v10, (uint64_t)v15, &qword_1001AC568);
  v15[*(int *)(v12 + 44)] = 0;
  sub_10000ACE0((uint64_t)v10, &qword_1001AC568);
  uint64_t v34 = static Alignment.center.getter();
  uint64_t v35 = v52;
  sub_100125450(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v52, 0.0, 1, INFINITY, 0, v34, v36);
  sub_10000ACE0((uint64_t)v15, &qword_1001AC570);
  swift_retain();
  sub_10007BEC0();
  swift_release();
  uint64_t v37 = Color.init(_:)();
  LOBYTE(v10) = static Edge.Set.all.getter();
  sub_10000A428(v35, (uint64_t)v23, &qword_1001AC578);
  uint64_t v38 = &v23[*(int *)(v20 + 44)];
  *(void *)uint64_t v38 = v37;
  v38[8] = (char)v10;
  sub_10000ACE0(v35, &qword_1001AC578);
  swift_retain();
  double v39 = sub_10007C174();
  swift_release();
  sub_10000A428((uint64_t)v23, (uint64_t)v28, &qword_1001AC580);
  uint64_t v40 = (double *)&v28[*(int *)(v25 + 44)];
  *uint64_t v40 = 0.0;
  v40[1] = v39;
  sub_10000ACE0((uint64_t)v23, &qword_1001AC580);
  swift_retain();
  double v41 = sub_10007C1A8();
  swift_release();
  static UnitPoint.top.getter();
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  sub_10000A428((uint64_t)v28, (uint64_t)v31, &qword_1001AC588);
  uint64_t v46 = (double *)&v31[*(int *)(v55 + 44)];
  *uint64_t v46 = v41;
  v46[1] = v41;
  *((void *)v46 + 2) = v43;
  *((void *)v46 + 3) = v45;
  sub_10000ACE0((uint64_t)v28, &qword_1001AC588);
  uint64_t v47 = static SafeAreaRegions.all.getter();
  LOBYTE(v37) = static Edge.Set.all.getter();
  uint64_t v48 = v56;
  sub_10000A428((uint64_t)v31, v56, &qword_1001AC590);
  uint64_t v49 = v48 + *(int *)(sub_10000570C(&qword_1001AC5A0) + 36);
  *(void *)uint64_t v49 = v47;
  *(unsigned char *)(v49 + 8) = v37;
  return sub_10000ACE0((uint64_t)v31, &qword_1001AC590);
}

uint64_t sub_10011AA30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v85 = a3;
  uint64_t v80 = a2;
  uint64_t v79 = a1;
  uint64_t v84 = a5;
  uint64_t v7 = sub_10000570C(&qword_1001AC5A8);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v81 = (uint64_t *)((char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_10000570C(&qword_1001AC5B0);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v82 = (uint64_t)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v14);
  uint64_t v83 = (uint64_t)&v72 - v15;
  uint64_t v16 = sub_10000570C(&qword_1001AC5B8);
  __chkstk_darwin(v16 - 8, v17);
  uint64_t v19 = (char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000570C(&qword_1001AC5C0);
  __chkstk_darwin(v20 - 8, v21);
  uint64_t v23 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000570C(&qword_1001AC5C8);
  uint64_t v25 = v24 - 8;
  __chkstk_darwin(v24, v26);
  uint64_t v28 = (char *)&v72 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_10000570C(&qword_1001AC5D0);
  uint64_t v30 = v29 - 8;
  __chkstk_darwin(v29, v31);
  uint64_t v33 = (char *)&v72 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_10000570C(&qword_1001AC5D8);
  uint64_t v35 = v34 - 8;
  __chkstk_darwin(v34, v36);
  uint64_t v77 = (uint64_t)&v72 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38, v39);
  uint64_t v78 = (uint64_t)&v72 - v40;
  *(void *)uint64_t v19 = static VerticalAlignment.center.getter();
  *((void *)v19 + 1) = 0;
  v19[16] = 0;
  double v41 = &v19[*(int *)(sub_10000570C(&qword_1001AC5E0) + 44)];
  uint64_t v76 = a4;
  sub_10011B064(a2, v41);
  uint64_t v42 = static Alignment.leading.getter();
  sub_1001254AC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v23, 0.0, 1, 0.0, 1, v42, v43);
  sub_10000ACE0((uint64_t)v19, &qword_1001AC5B8);
  sub_10000A428((uint64_t)v23, (uint64_t)v28, &qword_1001AC5C0);
  uint64_t v44 = &v28[*(int *)(v25 + 44)];
  *(void *)uint64_t v44 = 0x403E000000000000;
  v44[8] = 0;
  sub_10000ACE0((uint64_t)v23, &qword_1001AC5C0);
  uint64_t v45 = static Alignment.center.getter();
  uint64_t v47 = v46;
  sub_10011B19C((uint64_t)v86);
  long long v75 = v86[0];
  long long v74 = v86[1];
  uint64_t v48 = v87;
  uint64_t v49 = v88;
  long long v73 = v89;
  uint64_t v50 = v90;
  uint64_t v51 = v91;
  uint64_t v52 = v92;
  long long v72 = v93;
  uint64_t v53 = v94;
  uint64_t v54 = v95;
  sub_10000A428((uint64_t)v28, (uint64_t)v33, &qword_1001AC5C8);
  uint64_t v55 = &v33[*(int *)(v30 + 44)];
  long long v56 = v74;
  *(_OWORD *)uint64_t v55 = v75;
  *((_OWORD *)v55 + 1) = v56;
  *((void *)v55 + 4) = v48;
  *((void *)v55 + 5) = v49;
  *((_OWORD *)v55 + 3) = v73;
  *((void *)v55 + 8) = v50;
  *((void *)v55 + 9) = v51;
  *((void *)v55 + 10) = v52;
  *(_OWORD *)(v55 + 88) = v72;
  *((void *)v55 + 13) = v53;
  *((void *)v55 + 14) = v54;
  *((void *)v55 + 15) = v45;
  *((void *)v55 + 16) = v47;
  sub_10000ACE0((uint64_t)v28, &qword_1001AC5C8);
  uint64_t v57 = v77;
  sub_10000A428((uint64_t)v33, v77, &qword_1001AC5D0);
  *(_WORD *)(v57 + *(int *)(v35 + 44)) = 0;
  sub_10000ACE0((uint64_t)v33, &qword_1001AC5D0);
  uint64_t v58 = v78;
  sub_10000A3C4(v57, v78, &qword_1001AC5D8);
  uint64_t v59 = static VerticalAlignment.center.getter();
  uint64_t v60 = (uint64_t)v81;
  *uint64_t v81 = v59;
  *(void *)(v60 + 8) = 0;
  *(unsigned char *)(v60 + 16) = 0;
  uint64_t v61 = sub_10000570C(&qword_1001AC5E8);
  sub_10011B368(v80, v76, v60 + *(int *)(v61 + 44));
  uint64_t v62 = static Alignment.leading.getter();
  uint64_t v63 = v82;
  sub_100125508(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v82, 0.0, 1, 0.0, 1, v62, v64);
  sub_10000ACE0(v60, &qword_1001AC5A8);
  uint64_t v65 = v83;
  sub_10000A3C4(v63, v83, &qword_1001AC5B0);
  sub_10000A428(v58, v57, &qword_1001AC5D8);
  uint64_t v66 = v65;
  uint64_t v67 = v65;
  uint64_t v68 = v63;
  sub_10000A428(v66, v63, &qword_1001AC5B0);
  uint64_t v69 = v84;
  sub_10000A428(v57, v84, &qword_1001AC5D8);
  uint64_t v70 = sub_10000570C(&qword_1001AC5F0);
  sub_10000A428(v68, v69 + *(int *)(v70 + 48), &qword_1001AC5B0);
  sub_10000ACE0(v67, &qword_1001AC5B0);
  sub_10000ACE0(v58, &qword_1001AC5D8);
  sub_10000ACE0(v68, &qword_1001AC5B0);
  return sub_10000ACE0(v57, &qword_1001AC5D8);
}

uint64_t sub_10011B064@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = *(void *)(a1 + 16);
  swift_retain();
  sub_10007B828((uint64_t)v7);
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v10 = (int *)type metadata accessor for Artwork();
  *(void *)((char *)a2 + v10[7]) = KeyPath;
  sub_10000570C(&qword_1001A5468);
  swift_storeEnumTagMultiPayload();
  *a2 = v8;
  sub_10000A3C4((uint64_t)v7, (uint64_t)a2 + v10[5], &qword_1001AD200);
  uint64_t v11 = (char *)a2 + v10[6];
  v14[15] = 0;
  uint64_t result = State.init(wrappedValue:)();
  uint64_t v13 = v15;
  *uint64_t v11 = v14[16];
  *((void *)v11 + 1) = v13;
  return result;
}

__n128 sub_10011B19C@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static Alignment.center.getter();
  uint64_t v4 = v3;
  sub_10011B22C((uint64_t)&v13);
  uint64_t v5 = v14;
  uint64_t v6 = v15;
  uint64_t v7 = v18;
  __n128 result = v16;
  long long v9 = v17;
  long long v10 = v19;
  long long v11 = v20;
  long long v12 = v13;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = v12;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v9;
  *(void *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 88) = v10;
  *(_OWORD *)(a1 + 104) = v11;
  return result;
}

double sub_10011B22C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static Alignment.center.getter();
  uint64_t v4 = v3;
  sub_10011B7BC((uint64_t)&v12);
  uint64_t v5 = v12;
  long long v11 = v13;
  long long v6 = v14;
  sub_10000570C(&qword_1001A6050);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_100152B80;
  static Color.black.getter();
  uint64_t v8 = Color.opacity(_:)();
  swift_release();
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = static Color.clear.getter();
  uint64_t v12 = v7;
  specialized Array._endMutation()();
  Gradient.init(colors:)();
  LinearGradient.init(gradient:startPoint:endPoint:)();
  uint64_t v9 = v12;
  *(void *)a1 = 17;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 32) = v11;
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)(a1 + 64) = v9;
  *(_OWORD *)(a1 + 72) = v13;
  double result = *(double *)&v14;
  *(_OWORD *)(a1 + 88) = v14;
  return result;
}

uint64_t sub_10011B368@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  *(void *)&long long v50 = a2;
  uint64_t v51 = a3;
  uint64_t v4 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Artwork();
  uint64_t v9 = (int *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (void *)((char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = sub_10000570C(&qword_1001AC5F8);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13, v15);
  long long v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000570C(&qword_1001AC600);
  uint64_t v19 = v18 - 8;
  __chkstk_darwin(v18, v20);
  uint64_t v22 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)(a1 + 16);
  swift_retain();
  sub_10007B828((uint64_t)v7);
  swift_release();
  *(void *)((char *)v12 + v9[9]) = swift_getKeyPath();
  sub_10000570C(&qword_1001A5468);
  swift_storeEnumTagMultiPayload();
  *uint64_t v12 = v23;
  sub_10000A3C4((uint64_t)v7, (uint64_t)v12 + v9[7], &qword_1001AD200);
  uint64_t v24 = (char *)v12 + v9[8];
  char v56 = 0;
  State.init(wrappedValue:)();
  uint64_t v25 = v53;
  *uint64_t v24 = v52;
  *((void *)v24 + 1) = v25;
  uint64_t v26 = static Alignment.center.getter();
  uint64_t v28 = v27;
  sub_10011B7BC((uint64_t)&v52);
  uint64_t v29 = v52;
  long long v49 = v53;
  uint64_t v30 = v54;
  uint64_t v31 = v55;
  sub_10011C8D4((uint64_t)v12, (uint64_t)v17);
  uint64_t v32 = &v17[*(int *)(v14 + 44)];
  *(void *)uint64_t v32 = v26;
  *((void *)v32 + 1) = v28;
  *((void *)v32 + 2) = v29;
  *(_OWORD *)(v32 + 24) = v49;
  *((void *)v32 + 5) = v30;
  *((void *)v32 + 6) = v31;
  sub_10011C938((uint64_t)v12);
  uint64_t v33 = static Alignment.center.getter();
  uint64_t v35 = v34;
  sub_10011B6F4((uint64_t)&v52);
  uint64_t v36 = v52;
  long long v49 = v53;
  uint64_t v37 = v54;
  uint64_t v38 = v55;
  sub_10000A428((uint64_t)v17, (uint64_t)v22, &qword_1001AC5F8);
  uint64_t v39 = &v22[*(int *)(v19 + 44)];
  *(void *)uint64_t v39 = v33;
  *((void *)v39 + 1) = v35;
  *((void *)v39 + 2) = v36;
  *(_OWORD *)(v39 + 24) = v49;
  *((void *)v39 + 5) = v37;
  *((void *)v39 + 6) = v38;
  sub_10000ACE0((uint64_t)v17, &qword_1001AC5F8);
  uint64_t v40 = static Alignment.center.getter();
  uint64_t v42 = v41;
  sub_10011B7BC((uint64_t)&v52);
  uint64_t v44 = v51;
  uint64_t v43 = v52;
  long long v50 = v53;
  uint64_t v45 = v54;
  uint64_t v46 = v55;
  sub_10000A428((uint64_t)v22, v51, &qword_1001AC600);
  uint64_t v47 = v44 + *(int *)(sub_10000570C(&qword_1001AC608) + 36);
  *(void *)uint64_t v47 = v40;
  *(void *)(v47 + 8) = v42;
  *(void *)(v47 + 16) = v43;
  *(_OWORD *)(v47 + 24) = v50;
  *(void *)(v47 + 40) = v45;
  *(void *)(v47 + 48) = v46;
  return sub_10000ACE0((uint64_t)v22, &qword_1001AC600);
}

double sub_10011B6F4@<D0>(uint64_t a1@<X8>)
{
  sub_10000570C(&qword_1001A6050);
  double v2 = COERCE_DOUBLE(swift_allocObject());
  *(_OWORD *)(*(void *)&v2 + 16) = xmmword_100152B80;
  *(void *)(*(void *)&v2 + 32) = static Color.white.getter();
  static Color.white.getter();
  uint64_t v3 = Color.opacity(_:)();
  swift_release();
  *(void *)(*(void *)&v2 + 40) = v3;
  *(double *)&long long v5 = v2;
  specialized Array._endMutation()();
  Gradient.init(colors:)();
  LinearGradient.init(gradient:startPoint:endPoint:)();
  double result = v2;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = v7;
  return result;
}

double sub_10011B7BC@<D0>(uint64_t a1@<X8>)
{
  sub_10000570C(&qword_1001A6050);
  double v2 = COERCE_DOUBLE(swift_allocObject());
  *(_OWORD *)(*(void *)&v2 + 16) = xmmword_100152B80;
  *(void *)(*(void *)&v2 + 32) = static Color.white.getter();
  *(void *)(*(void *)&v2 + 40) = static Color.clear.getter();
  *(double *)&long long v4 = v2;
  specialized Array._endMutation()();
  Gradient.init(colors:)();
  LinearGradient.init(gradient:startPoint:endPoint:)();
  double result = v2;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = v6;
  return result;
}

uint64_t sub_10011B87C()
{
  swift_getWitnessTable();

  return ObservedObject.init(wrappedValue:)();
}

uint64_t type metadata accessor for HeroImageLandscape()
{
  return sub_10000B72C();
}

uint64_t sub_10011B914()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10011B958@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10011A5E4(*v2, v2[1], *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t sub_10011B968()
{
  if (qword_1001A4E48 != -1) {
    swift_once();
  }
  qword_1001AC4D8 = qword_1001B74E8;

  return swift_retain();
}

uint64_t sub_10011B9CC()
{
  static Color.white.getter();
  uint64_t v0 = Color.opacity(_:)();
  uint64_t result = swift_release();
  qword_1001AC4E0 = v0;
  return result;
}

__n128 sub_10011BA10@<Q0>(char *a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v84 = a2;
  uint64_t v80 = a3;
  uint64_t v81 = a1;
  uint64_t v3 = type metadata accessor for ColorScheme();
  uint64_t v75 = *(void *)(v3 - 8);
  uint64_t v76 = v3;
  __chkstk_darwin(v3, v4);
  long long v74 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v7);
  uint64_t v73 = (uint64_t)&v73 - v8;
  uint64_t v83 = type metadata accessor for Artwork();
  uint64_t v77 = *(void *)(v83 - 8);
  __chkstk_darwin(v83, v9);
  uint64_t v78 = v10;
  uint64_t v79 = (uint64_t)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SlideTransition();
  uint64_t v82 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v73 - v17;
  uint64_t v19 = type metadata accessor for Image.ResizingMode();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  uint64_t v23 = (char *)&v73 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for AsyncImagePhase();
  uint64_t v25 = *(void *)(v24 - 8);
  __n128 v27 = __chkstk_darwin(v24, v26);
  uint64_t v29 = (char **)((char *)&v73 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char **, char *, uint64_t, __n128))(v25 + 16))(v29, v81, v24, v27);
  int v30 = (*(uint64_t (**)(char **, uint64_t))(v25 + 88))(v29, v24);
  if (v30 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(char **, uint64_t))(v25 + 96))(v29, v24);
    uint64_t v81 = *v29;
    (*(void (**)(char *, void, uint64_t))(v20 + 104))(v23, enum case for Image.ResizingMode.stretch(_:), v19);
    uint64_t v76 = Image.resizable(capInsets:resizingMode:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
    uint64_t v31 = off_1001AC4D0;
    uint64_t v32 = (uint64_t)v84;
    long long v74 = *v84;
    uint64_t v75 = qword_1001AC4C8;
    swift_bridgeObjectRetain();
    LODWORD(v73) = static MatchedGeometryProperties.position.getter();
    static UnitPoint.center.getter();
    unint64_t v34 = v33;
    uint64_t v36 = v35;
    SlideTransition.init()();
    uint64_t v37 = v82;
    (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v14, v18, v11);
    sub_10011E300();
    uint64_t v38 = AnyTransition.init<A>(_:)();
    char v110 = 1;
    char v109 = 0;
    char v108 = 1;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v18, v11);
    char v39 = v110;
    char v40 = v109;
    char v41 = v108;
    uint64_t v42 = v32 + *(int *)(v83 + 24);
    char v43 = *(unsigned char *)v42;
    uint64_t v44 = *(void *)(v42 + 8);
    LOBYTE(v151) = v43;
    *((void *)&v151 + 1) = v44;
    sub_10000570C(&qword_1001A6728);
    State.wrappedValue.getter();
    if ((_BYTE)v141) {
      double v45 = 1.0;
    }
    else {
      double v45 = 0.0;
    }
    static UnitPoint.leading.getter();
    uint64_t v47 = v46;
    uint64_t v49 = v48;
    char v95 = v39;
    uint64_t v50 = v79;
    sub_10011C8D4(v32, v79);
    unint64_t v51 = (*(unsigned __int8 *)(v77 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
    uint64_t v52 = swift_allocObject();
    sub_10011DD24(v50, v52 + v51);
    v96[0] = v76;
    v96[1] = 0;
    LOBYTE(v97) = v39;
    BYTE1(v97) = v40;
    *((void *)&v97 + 1) = v75;
    *(void *)&long long v98 = v31;
    *((void *)&v98 + 1) = v74;
    v99.n128_u32[0] = v73;
    v99.n128_u64[1] = v34;
    *(void *)&long long v100 = v36;
    BYTE8(v100) = v41;
    *(void *)&long long v101 = v38;
    int64x2_t v102 = vdupq_n_s64(0x3FF199999999999AuLL);
    *((double *)&v101 + 1) = v45;
    *(void *)&long long v103 = v47;
    *((void *)&v103 + 1) = v49;
    LOWORD(v104) = 0;
    *((void *)&v104 + 1) = sub_10011E514;
    uint64_t v105 = v52;
    uint64_t v106 = 0;
    uint64_t v107 = 0;
    long long v115 = v100;
    long long v116 = v101;
    long long v113 = v98;
    __n128 v114 = v99;
    long long v111 = (unint64_t)v76;
    long long v112 = v97;
    *(void *)&v120[1] = 0;
    long long v119 = v104;
    v120[0] = (unint64_t)v52;
    int64x2_t v117 = v102;
    long long v118 = v103;
    sub_1000E59B0((uint64_t)&v111);
    sub_10000A3C4((uint64_t)&v111, (uint64_t)&v151, &qword_1001AC778);
    sub_10011E574((uint64_t)v96);
    sub_10000570C(&qword_1001AC708);
    sub_10000570C(&qword_1001AC768);
    sub_10011DF00();
    sub_10011E254();
    _ConditionalContent<>.init(storage:)();
    long long v129 = v93;
    v130[0] = v94[0];
    *(_OWORD *)((char *)v130 + 9) = *(_OWORD *)((char *)v94 + 9);
    long long v125 = v89;
    long long v126 = v90;
    int64x2_t v127 = v91;
    long long v128 = v92;
    long long v121 = v85;
    long long v122 = v86;
    long long v123 = v87;
    __n128 v124 = v88;
    long long v149 = v93;
    v150[0] = v94[0];
    *(_OWORD *)((char *)v150 + 9) = *(_OWORD *)((char *)v94 + 9);
    long long v145 = v89;
    long long v146 = v90;
    long long v148 = v92;
    int64x2_t v147 = v91;
    long long v141 = v85;
    long long v142 = v86;
    __n128 v144 = v88;
    long long v143 = v87;
    sub_10011E358((uint64_t)&v141);
    sub_10000A3C4((uint64_t)&v141, (uint64_t)&v151, &qword_1001AC770);
    sub_10011E69C((uint64_t)&v121, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10011E5F0);
    sub_10000570C(&qword_1001AC6F8);
    sub_10011DE84();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    sub_10011E69C((uint64_t)&v121, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10011E710);
    sub_10011E7C4((uint64_t)v96);
    long long v159 = v139;
    v160[0] = v140[0];
    *(_OWORD *)((char *)v160 + 10) = *(_OWORD *)((char *)v140 + 10);
    long long v155 = v135;
    long long v156 = v136;
    long long v158 = v138;
    int64x2_t v157 = v137;
    long long v151 = v131;
    long long v152 = v132;
    __n128 v154 = v134;
    long long v153 = v133;
    uint64_t v53 = v80;
  }
  else
  {
    uint64_t v81 = v14;
    uint64_t v54 = v18;
    uint64_t v55 = v82;
    if (v30 == enum case for AsyncImagePhase.failure(_:))
    {
      (*(void (**)(char **, uint64_t))(v25 + 96))(v29, v24);
      swift_errorRelease();
    }
    else if (v30 != enum case for AsyncImagePhase.empty(_:))
    {
      sub_10011E2F4((uint64_t)&v131);
      sub_10000A3C4((uint64_t)&v131, (uint64_t)&v151, &qword_1001AC770);
      sub_10000570C(&qword_1001AC6F8);
      sub_10011DE84();
      _ConditionalContent<>.init(storage:)();
      (*(void (**)(char **, uint64_t))(v25 + 8))(v29, v24);
      long long v159 = v149;
      v160[0] = v150[0];
      *(_OWORD *)((char *)v160 + 10) = *(_OWORD *)((char *)v150 + 10);
      long long v155 = v145;
      long long v156 = v146;
      long long v158 = v148;
      int64x2_t v157 = v147;
      long long v151 = v141;
      long long v152 = v142;
      __n128 v154 = v144;
      long long v153 = v143;
      uint64_t v53 = v80;
      goto LABEL_18;
    }
    uint64_t v56 = v73;
    sub_100026F48(v73);
    uint64_t v58 = v74;
    uint64_t v57 = v75;
    uint64_t v59 = v76;
    (*(void (**)(char *, void, uint64_t))(v75 + 104))(v74, enum case for ColorScheme.light(_:), v76);
    char v60 = static ColorScheme.== infix(_:_:)();
    uint64_t v61 = *(void (**)(char *, uint64_t))(v57 + 8);
    v61(v58, v59);
    v61((char *)v56, v59);
    if (v60)
    {
      uint64_t v62 = v11;
      if (qword_1001A4EE8 != -1) {
        swift_once();
      }
      uint64_t v63 = &qword_1001AC4D8;
    }
    else
    {
      uint64_t v62 = v11;
      if (qword_1001A4EF0 != -1) {
        swift_once();
      }
      uint64_t v63 = &qword_1001AC4E0;
    }
    uint64_t v53 = v80;
    uint64_t v64 = v54;
    uint64_t v65 = *v63;
    swift_retain();
    char v66 = static Edge.Set.all.getter();
    SlideTransition.init()();
    (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v81, v54, v62);
    sub_10011E300();
    uint64_t v67 = AnyTransition.init<A>(_:)();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v64, v62);
    *(void *)&long long v121 = v65;
    BYTE8(v121) = v66;
    *(void *)&long long v122 = v67;
    sub_1000E59A4((uint64_t)&v121);
    sub_10000A3C4((uint64_t)&v121, (uint64_t)&v151, &qword_1001AC778);
    swift_retain();
    swift_retain();
    sub_10000570C(&qword_1001AC708);
    sub_10000570C(&qword_1001AC768);
    sub_10011DF00();
    sub_10011E254();
    _ConditionalContent<>.init(storage:)();
    long long v149 = v119;
    v150[0] = v120[0];
    *(_OWORD *)((char *)v150 + 9) = *(_OWORD *)((char *)v120 + 9);
    long long v145 = v115;
    long long v146 = v116;
    long long v148 = v118;
    int64x2_t v147 = v117;
    long long v141 = v111;
    long long v142 = v112;
    __n128 v144 = v114;
    long long v143 = v113;
    sub_10011E358((uint64_t)&v141);
    sub_10000A3C4((uint64_t)&v141, (uint64_t)&v151, &qword_1001AC770);
    sub_10000570C(&qword_1001AC6F8);
    sub_10011DE84();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    swift_release();
    long long v159 = v139;
    v160[0] = v140[0];
    *(_OWORD *)((char *)v160 + 10) = *(_OWORD *)((char *)v140 + 10);
    long long v155 = v135;
    long long v156 = v136;
    long long v158 = v138;
    int64x2_t v157 = v137;
    long long v151 = v131;
    long long v152 = v132;
    __n128 v154 = v134;
    long long v153 = v133;
  }
LABEL_18:
  long long v68 = v160[0];
  *(_OWORD *)(v53 + 128) = v159;
  *(_OWORD *)(v53 + 144) = v68;
  *(_OWORD *)(v53 + 154) = *(_OWORD *)((char *)v160 + 10);
  long long v69 = v156;
  *(_OWORD *)(v53 + 64) = v155;
  *(_OWORD *)(v53 + 80) = v69;
  long long v70 = v158;
  *(int64x2_t *)(v53 + 96) = v157;
  *(_OWORD *)(v53 + 112) = v70;
  long long v71 = v152;
  *(_OWORD *)uint64_t v53 = v151;
  *(_OWORD *)(v53 + 16) = v71;
  __n128 result = v154;
  *(_OWORD *)(v53 + 32) = v153;
  *(__n128 *)(v53 + 48) = result;
  return result;
}

uint64_t sub_10011C614()
{
  return swift_release();
}

uint64_t sub_10011C680()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10011C6F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 - 8;
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(a1, a2);
  uint64_t v6 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v6 - 8, v7);
  sub_10000A428(v2 + *(int *)(v3 + 28), (uint64_t)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_1001AD200);
  sub_10011C8D4(v2, (uint64_t)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v9 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = swift_allocObject();
  sub_10011DD24((uint64_t)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9);
  sub_10000570C(&qword_1001AC6E0);
  sub_10011DE08();
  return AsyncImage.init(url:scale:transaction:content:)();
}

uint64_t type metadata accessor for Artwork()
{
  uint64_t result = qword_1001AC668;
  if (!qword_1001AC668) {
    return swift_getSingletonMetadata();
  }
  return result;
}

{
  return type metadata accessor for Artwork();
}

{
  return type metadata accessor for Artwork();
}

uint64_t sub_10011C8D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Artwork();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10011C938(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Artwork();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_10011C994(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    unint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = sub_10000570C(&qword_1001AD200);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    uint64_t v16 = (char *)v4 + v14;
    uint64_t v17 = (char *)a2 + v14;
    *uint64_t v16 = *v17;
    *((void *)v16 + 1) = *((void *)v17 + 1);
    uint64_t v18 = (uint64_t *)((char *)v4 + v15);
    uint64_t v19 = (uint64_t *)((char *)a2 + v15);
    swift_retain();
    sub_10000570C(&qword_1001A5468);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v20 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    }
    else
    {
      *uint64_t v18 = *v19;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v4;
}

uint64_t sub_10011CBBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_release();
  uint64_t v7 = a1 + *(int *)(a2 + 28);
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for ColorScheme();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
    return v9(v7, v8);
  }
  else
  {
    return swift_release();
  }
}

void *sub_10011CD24(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_10000570C(&qword_1001AD200);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v12;
  uint64_t v15 = (char *)a2 + v12;
  *uint64_t v14 = *v15;
  *((void *)v14 + 1) = *((void *)v15 + 1);
  uint64_t v16 = (void *)((char *)a1 + v13);
  uint64_t v17 = (void *)((char *)a2 + v13);
  swift_retain();
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  }
  else
  {
    *uint64_t v16 = *v17;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_10011CEF4(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000570C(&qword_1001AD200);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  *uint64_t v16 = *v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v18 = a3[7];
    uint64_t v19 = (void *)((char *)a1 + v18);
    uint64_t v20 = (void *)((char *)a2 + v18);
    sub_10000ACE0((uint64_t)a1 + v18, &qword_1001A5468);
    sub_10000570C(&qword_1001A5468);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v21 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
    }
    else
    {
      *uint64_t v19 = *v20;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_10011D150(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_10000570C(&qword_1001AD200);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  int v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v13, v14, v16);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  return a1;
}

void *sub_10011D31C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000570C(&qword_1001AD200);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  *uint64_t v16 = *v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  swift_release();
  if (a1 != a2)
  {
    uint64_t v18 = a3[7];
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    sub_10000ACE0((uint64_t)a1 + v18, &qword_1001A5468);
    uint64_t v21 = sub_10000570C(&qword_1001A5468);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v22 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v19, v20, v22);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10011D580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10011D594);
}

uint64_t sub_10011D594(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_10000570C(&qword_1001AD200);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + a3[5];
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else if (a2 == 2147483646)
  {
    unint64_t v12 = *(void *)(a1 + a3[6] + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    int v13 = v12 - 1;
    if (v13 < 0) {
      int v13 = -1;
    }
    return (v13 + 1);
  }
  else
  {
    uint64_t v14 = sub_10000570C(&qword_1001A65B8);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + a3[7];
    return v15(v17, a2, v16);
  }
}

uint64_t sub_10011D6DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10011D6F0);
}

uint64_t sub_10011D6F0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = sub_10000570C(&qword_1001AD200);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + a4[5];
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else if (a3 == 2147483646)
  {
    *(void *)(a1 + a4[6] + 8) = a2;
  }
  else
  {
    uint64_t v13 = sub_10000570C(&qword_1001A65B8);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + a4[7];
    return v14(v16, a2, a2, v15);
  }
  return result;
}

void sub_10011D82C()
{
  sub_10011D96C(319, (unint64_t *)&qword_1001A7700, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v0 <= 0x3F)
  {
    sub_10011D96C(319, (unint64_t *)&qword_1001A6628, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_10011D96C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_10011D9D4()
{
  unint64_t result = qword_1001AC6A8;
  if (!qword_1001AC6A8)
  {
    sub_100004A58(&qword_1001AC5A0);
    sub_10011DA50();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC6A8);
  }
  return result;
}

unint64_t sub_10011DA50()
{
  unint64_t result = qword_1001AC6B0;
  if (!qword_1001AC6B0)
  {
    sub_100004A58(&qword_1001AC590);
    sub_10011DACC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC6B0);
  }
  return result;
}

unint64_t sub_10011DACC()
{
  unint64_t result = qword_1001AC6B8;
  if (!qword_1001AC6B8)
  {
    sub_100004A58(&qword_1001AC588);
    sub_10011DB48();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC6B8);
  }
  return result;
}

unint64_t sub_10011DB48()
{
  unint64_t result = qword_1001AC6C0;
  if (!qword_1001AC6C0)
  {
    sub_100004A58(&qword_1001AC580);
    sub_10011DBE8();
    sub_10000A780(&qword_1001A6290, &qword_1001A6298);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC6C0);
  }
  return result;
}

unint64_t sub_10011DBE8()
{
  unint64_t result = qword_1001AC6C8;
  if (!qword_1001AC6C8)
  {
    sub_100004A58(&qword_1001AC578);
    sub_10011DC64();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC6C8);
  }
  return result;
}

unint64_t sub_10011DC64()
{
  unint64_t result = qword_1001AC6D0;
  if (!qword_1001AC6D0)
  {
    sub_100004A58(&qword_1001AC570);
    sub_10000A780(&qword_1001AC6D8, &qword_1001AC568);
    sub_10002D7EC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC6D0);
  }
  return result;
}

uint64_t sub_10011DD04()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10011DD24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Artwork();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double sub_10011DD88@<D0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for Artwork() - 8);
  uint64_t v6 = (char **)(v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));

  *(void *)&double result = sub_10011BA10(a1, v6, a2).n128_u64[0];
  return result;
}

unint64_t sub_10011DE08()
{
  unint64_t result = qword_1001AC6E8;
  if (!qword_1001AC6E8)
  {
    sub_100004A58(&qword_1001AC6E0);
    sub_10011DE84();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC6E8);
  }
  return result;
}

unint64_t sub_10011DE84()
{
  unint64_t result = qword_1001AC6F0;
  if (!qword_1001AC6F0)
  {
    sub_100004A58(&qword_1001AC6F8);
    sub_10011DF00();
    sub_10011E254();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC6F0);
  }
  return result;
}

unint64_t sub_10011DF00()
{
  unint64_t result = qword_1001AC700;
  if (!qword_1001AC700)
  {
    sub_100004A58(&qword_1001AC708);
    sub_10011DF7C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC700);
  }
  return result;
}

unint64_t sub_10011DF7C()
{
  unint64_t result = qword_1001AC710;
  if (!qword_1001AC710)
  {
    sub_100004A58(&qword_1001AC718);
    sub_10011E01C();
    sub_10000A780(&qword_1001A91F0, &qword_1001A91F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC710);
  }
  return result;
}

unint64_t sub_10011E01C()
{
  unint64_t result = qword_1001AC720;
  if (!qword_1001AC720)
  {
    sub_100004A58(&qword_1001AC728);
    sub_10011E098();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC720);
  }
  return result;
}

unint64_t sub_10011E098()
{
  unint64_t result = qword_1001AC730;
  if (!qword_1001AC730)
  {
    sub_100004A58(&qword_1001AC738);
    sub_10011E114();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC730);
  }
  return result;
}

unint64_t sub_10011E114()
{
  unint64_t result = qword_1001AC740;
  if (!qword_1001AC740)
  {
    sub_100004A58(&qword_1001AC748);
    sub_10011E1B4();
    sub_10000A780(&qword_1001AA038, &qword_1001AA040);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC740);
  }
  return result;
}

unint64_t sub_10011E1B4()
{
  unint64_t result = qword_1001AC750;
  if (!qword_1001AC750)
  {
    sub_100004A58(&qword_1001AC758);
    sub_1000B0B8C();
    sub_10000A780(&qword_1001AB1D8, &qword_1001AB1E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC750);
  }
  return result;
}

unint64_t sub_10011E254()
{
  unint64_t result = qword_1001AC760;
  if (!qword_1001AC760)
  {
    sub_100004A58(&qword_1001AC768);
    sub_1000F7218();
    sub_10000A780(&qword_1001AA038, &qword_1001AA040);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC760);
  }
  return result;
}

uint64_t sub_10011E2F4(uint64_t result)
{
  *(unsigned char *)(result + 169) = 1;
  return result;
}

unint64_t sub_10011E300()
{
  unint64_t result = qword_1001A9F98;
  if (!qword_1001A9F98)
  {
    type metadata accessor for SlideTransition();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A9F98);
  }
  return result;
}

uint64_t sub_10011E358(uint64_t result)
{
  *(unsigned char *)(result + 169) = 0;
  return result;
}

uint64_t sub_10011E364()
{
  uint64_t v1 = type metadata accessor for Artwork();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  uint64_t v3 = v2 + *(int *)(v1 + 20);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  }
  swift_release();
  uint64_t v6 = v2 + *(int *)(v1 + 28);
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_10011E514()
{
  type metadata accessor for Artwork();

  return sub_10011C614();
}

uint64_t sub_10011E574(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 136);
  uint64_t v3 = *(void *)(a1 + 152);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100009CC8(v2);
  sub_100009CC8(v3);
  return a1;
}

uint64_t sub_10011E5F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a22)
  {
    swift_retain();
    return swift_retain();
  }
  else
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_100009CC8(a18);
    return sub_100009CC8(a20);
  }
}

uint64_t sub_10011E69C(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 168);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    v4);
  return a1;
}

uint64_t sub_10011E710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  swift_release();
  if (a22)
  {
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    sub_100009CD8(a18);
    return sub_100009CD8(a20);
  }
}

uint64_t sub_10011E7C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 136);
  uint64_t v3 = *(void *)(a1 + 152);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_100009CD8(v2);
  sub_100009CD8(v3);
  return a1;
}

uint64_t sub_10011E840()
{
  return sub_10011C680();
}

uint64_t sub_10011E85C()
{
  return sub_10000A780(&qword_1001AC780, &qword_1001AC788);
}

ValueMetadata *type metadata accessor for LoadingStateView()
{
  return &type metadata for LoadingStateView;
}

uint64_t sub_10011E8A8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10011E8C4@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = static HorizontalAlignment.center.getter();
  *(void *)(a1 + 8) = 0x4018000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  sub_10000570C(&qword_1001AC790);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return ProgressView<>.init<>(_:)();
}

unint64_t sub_10011E950()
{
  unint64_t result = qword_1001AC798;
  if (!qword_1001AC798)
  {
    sub_100004A58(&qword_1001AC7A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC798);
  }
  return result;
}

void sub_10011E9AC()
{
  sub_1000206BC(319, qword_1001A5CE0);
  if (v0 <= 0x3F)
  {
    sub_1000206BC(319, &qword_1001A6E38);
    if (v1 <= 0x3F)
    {
      sub_100121DE0(319, &qword_1001AC860, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
      if (v2 <= 0x3F)
      {
        sub_1000206BC(319, &qword_1001A5CD8);
        if (v3 <= 0x3F)
        {
          swift_checkMetadataState();
          if (v4 <= 0x3F)
          {
            sub_100121DE0(319, &qword_1001AAF70, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
            if (v5 <= 0x3F) {
              swift_initClassMetadata2();
            }
          }
        }
      }
    }
  }
}

uint64_t sub_10011EC14(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  sub_100120924(a1);
  return v2;
}

double sub_10011EC54()
{
  return sub_10001CDB4();
}

uint64_t sub_10011EC68()
{
  return sub_10001CE7C();
}

uint64_t sub_10011EC7C()
{
  return sub_10011ECE0();
}

uint64_t sub_10011EC90()
{
  return sub_10011EDA8();
}

uint64_t sub_10011ECA4()
{
  return sub_10011ECE0();
}

uint64_t sub_10011ECB8()
{
  return sub_10011EDA8();
}

uint64_t sub_10011ECCC()
{
  return sub_10011ECE0();
}

uint64_t sub_10011ECE0()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10011ED94()
{
  return sub_10011EDA8();
}

uint64_t sub_10011EDA8()
{
  return static Published.subscript.setter();
}

double sub_10011EE60()
{
  return sub_10001CDB4();
}

uint64_t sub_10011EE74()
{
  return sub_10001CE7C();
}

double sub_10011EE88()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10011EF3C()
{
  return static Published.subscript.setter();
}

double sub_10011EFF8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10011F0B0()
{
  return static Published.subscript.setter();
}

uint64_t sub_10011F180()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 88) + 152))(*(void *)(*(void *)v0 + 80));
}

uint64_t sub_10011F1F8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = *(void *)(*(void *)v0 + 80);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  unint64_t v8 = (char *)&v13 - v7;
  sub_10011F464();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 160))(v2, v1);
  }
  else
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, AssociatedTypeWitness);
  }
  return v10;
}

uint64_t sub_10011F464()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = *(void *)(*(void *)v0 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v6 = __chkstk_darwin(AssociatedTypeWitness, v5);
  unint64_t v8 = (char *)v12 - v7;
  (*(void (**)(uint64_t, uint64_t, __n128))(v1 + 208))(v2, v1, v6);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v8, AssociatedTypeWitness);
  v12[1] = v10;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  swift_getWitnessTable();
  Collection.first.getter();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10011F690@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v12 - v6;
  sub_10011F464();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    swift_getAssociatedConformanceWitness();
    uint64_t v9 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a1, 1, 1, v9);
  }
  else
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(AssociatedTypeWitness, AssociatedConformanceWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v7, AssociatedTypeWitness);
  }
}

uint64_t sub_10011F930()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = type metadata accessor for Optional();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v10 - v4;
  sub_10011F464();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v5, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    return 0;
  }
  else
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v5, AssociatedTypeWitness);
  }
  return v7;
}

uint64_t sub_10011FB60()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 88);
  uint64_t v3 = *(void *)(*v0 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v6);
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v11 = __chkstk_darwin(v9, v10);
  uint64_t v13 = (char *)v19 - v12;
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v2 + 208);
  v19[2] = (char *)v0 + *(void *)(v1 + 160);
  uint64_t v20 = v14;
  ((void (*)(uint64_t, uint64_t, __n128))v14)(v3, v2, v11);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v19[1] = v5 + 8;
  v16(v13, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v19[0] = Set.count.getter();
  swift_bridgeObjectRelease();
  v20(v3, v2);
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(AssociatedTypeWitness, AssociatedConformanceWitness);
  v16(v8, AssociatedTypeWitness);
  uint64_t v17 = Set.count.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!__OFADD__(v19[0], v17)) {
    return v19[0] + v17 > 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_10011FE10()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 88);
  uint64_t v3 = *(void *)(*v0 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v7 = __chkstk_darwin(AssociatedTypeWitness, v6);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = (uint64_t)v0 + *(void *)(v1 + 160);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, __n128))(v2 + 208);
  uint64_t v21 = v10;
  uint64_t v19 = v3;
  v20(v3, v2, v7);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v17 = v5 + 8;
  uint64_t v18 = v13;
  v13(v9, AssociatedTypeWitness);
  uint64_t v22 = v12;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  swift_getWitnessTable();
  Array.init<A>(_:)();
  ((void (*)(uint64_t, uint64_t))v20)(v19, v2);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(AssociatedTypeWitness, AssociatedConformanceWitness);
  v18(v9, AssociatedTypeWitness);
  uint64_t v22 = v14;
  Array.init<A>(_:)();
  uint64_t v15 = static Array.+ infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1001200E0()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 88) + 176))(*(void *)(*(void *)v0 + 80));
}

uint64_t sub_100120158()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 88) + 168))(*(void *)(*(void *)v0 + 80));
}

uint64_t sub_1001201D0()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 88) + 184))(*(void *)(*(void *)v0 + 80));
}

BOOL sub_100120248()
{
  BOOL v0 = sub_1001202A0();
  double v1 = -sub_10011EC54();
  double v2 = sub_10011EE60();
  double v3 = 0.4;
  if (v0) {
    double v3 = 0.75;
  }
  return v2 * v3 < v1;
}

BOOL sub_1001202A0()
{
  uint64_t v1 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000570C(&qword_1001A5FB0);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000570C(&qword_1001A5478);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v27 - v17;
  uint64_t v19 = v0 + *(void *)(*(void *)v0 + 176);
  swift_beginAccess();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v18, enum case for UserInterfaceSizeClass.compact(_:), v1);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v2 + 56))(v18, 0, 1, v1);
  uint64_t v20 = (uint64_t)&v10[*(int *)(v7 + 56)];
  sub_1000EE460(v19, (uint64_t)v10);
  sub_1000EE460((uint64_t)v18, v20);
  uint64_t v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  if (v21((uint64_t)v10, 1, v1) == 1)
  {
    sub_10000ACE0((uint64_t)v18, &qword_1001A5478);
    if (v21(v20, 1, v1) == 1)
    {
      sub_10000ACE0((uint64_t)v10, &qword_1001A5478);
      return 0;
    }
    goto LABEL_6;
  }
  sub_1000EE460((uint64_t)v10, (uint64_t)v14);
  if (v21(v20, 1, v1) == 1)
  {
    sub_10000ACE0((uint64_t)v18, &qword_1001A5478);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v14, v1);
LABEL_6:
    sub_10000ACE0((uint64_t)v10, &qword_1001A5FB0);
    goto LABEL_9;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(v5, v20, v1);
  sub_100122158();
  char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v2 + 8);
  v23(v5, v1);
  sub_10000ACE0((uint64_t)v18, &qword_1001A5478);
  v23(v14, v1);
  sub_10000ACE0((uint64_t)v10, &qword_1001A5478);
  if (v22) {
    return 0;
  }
LABEL_9:
  id v25 = [self currentDevice];
  id v26 = [v25 userInterfaceIdiom];

  return v26 == 0;
}

void *sub_100120654()
{
  if (!*(void *)(v0 + 40) || !*(void *)(v0 + 24)) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000570C(&qword_1001A5388);
  type metadata accessor for URLQueryItem();
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100152B80;
  uint64_t v2 = qword_1001A4EB8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v2 != -1) {
    swift_once();
  }
  URLQueryItem.init(name:value:)();
  if (qword_1001A4EC0 != -1) {
    swift_once();
  }
  URLQueryItem.init(name:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (void *)v1;
}

uint64_t sub_100120810()
{
  if (sub_1001202A0())
  {
    return Edge.Set.init(_:)(2);
  }
  else
  {
    unsigned __int8 v0 = static Edge.Set.all.getter();
    uint64_t v1 = Edge.Set.init(rawValue:)();
    Edge.Set.init(rawValue:)();
    if (Edge.Set.init(rawValue:)() == v0)
    {
      return v1;
    }
    else
    {
      return Edge.Set.init(rawValue:)();
    }
  }
}

double sub_1001208A4()
{
  id v0 = [self currentDevice];
  id v1 = [v0 userInterfaceIdiom];

  double result = sub_10011EE88() * 0.5;
  double v4 = v3 * 0.85;
  if (!v1) {
    return v4;
  }
  return result;
}

char *sub_100120924(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v74 = a1;
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  uint64_t v65 = *(void *)(*(void *)v1 + 88);
  uint64_t v66 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v73 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v4);
  long long v71 = (char *)&v57 - v5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v63 = swift_getAssociatedTypeWitness();
  uint64_t v58 = type metadata accessor for Optional();
  uint64_t v57 = *(void *)(v58 - 8);
  __chkstk_darwin(v58, v6);
  long long v72 = (char *)&v57 - v7;
  uint64_t v8 = sub_10000570C(&qword_1001A57B8);
  uint64_t v67 = *(void *)(v8 - 8);
  uint64_t v68 = v8;
  __chkstk_darwin(v8, v9);
  uint64_t v64 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000570C(&qword_1001A57C0);
  uint64_t v61 = *(void *)(v11 - 8);
  uint64_t v62 = v11;
  __chkstk_darwin(v11, v12);
  char v60 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000570C(&qword_1001A57C8);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000570C(&qword_1001A57D0);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  uint64_t v23 = (char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_OWORD *)v1 + 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  uint64_t v24 = &v1[qword_1001AC7A8];
  *(void *)&long long v75 = 0;
  Published.init(initialValue:)();
  uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
  v59(v24, v23, v19);
  id v25 = &v2[qword_1001AC7B0];
  LOBYTE(v75) = 0;
  Published.init(initialValue:)();
  id v26 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v26(v25, v18, v14);
  uint64_t v27 = &v2[qword_1001AC7B8];
  LOBYTE(v75) = 0;
  Published.init(initialValue:)();
  v26(v27, v18, v14);
  uint64_t v28 = &v2[qword_1001AC7C0];
  LOBYTE(v75) = 0;
  uint64_t v29 = v65;
  Published.init(initialValue:)();
  int v30 = v18;
  uint64_t v31 = v63;
  v26(v28, v30, v14);
  uint64_t v32 = v66;
  unint64_t v33 = &v2[qword_1001AC7C8];
  *(void *)&long long v75 = 0;
  Published.init(initialValue:)();
  uint64_t v34 = v74;
  v59(v33, v23, v19);
  uint64_t v35 = &v2[qword_1001AC7D0];
  type metadata accessor for CGSize(0);
  long long v75 = 0uLL;
  uint64_t v36 = v60;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v35, v36, v62);
  uint64_t v37 = &v2[qword_1001AC7D8];
  long long v75 = 0u;
  long long v76 = 0u;
  uint64_t v38 = v64;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v37, v38, v68);
  char v39 = &v2[*(void *)(*(void *)v2 + 176)];
  uint64_t v40 = type metadata accessor for UserInterfaceSizeClass();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 1, 1, v40);
  uint64_t v41 = *(void *)(v32 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(&v2[*(void *)(*(void *)v2 + 160)], v34, v32);
  uint64_t v42 = v71;
  (*(void (**)(uint64_t, uint64_t))(v29 + 208))(v32, v29);
  uint64_t v43 = AssociatedTypeWitness;
  uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v42, v43);
  *(void *)&long long v75 = v44;
  uint64_t v45 = swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  swift_getWitnessTable();
  uint64_t v46 = v72;
  Collection.first.getter();
  swift_bridgeObjectRelease();
  uint64_t v47 = *(void *)(v31 - 8);
  int v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48))(v46, 1, v31);
  if (v48 == 1)
  {
    (*(void (**)(char *, uint64_t))(v57 + 8))(v46, v58);
    uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 152))(v32, v29);
    uint64_t v51 = v52;
  }
  else
  {
    uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 40))(v31, v45);
    uint64_t v51 = v50;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v31);
  }
  type metadata accessor for PromotionalAssetsController();
  uint64_t v53 = swift_allocObject();
  uint64_t v54 = v53 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
  uint64_t v55 = type metadata accessor for ArtistPromotionalAssets();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v54, 1, 1, v55);
  *(void *)(v53 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__error) = 0;
  *(void *)(v53 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__emptyScheduleViewModel) = 0;
  ObservationRegistrar.init()();
  *(void *)(v53 + 16) = v49;
  *(void *)(v53 + 24) = v51;
  *(unsigned char *)(v53 + 32) = v48 != 1;
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v74, v32);
  *(void *)&v2[*(void *)(*(void *)v2 + 168)] = v53;
  return v2;
}

uint64_t sub_100121228()
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v0 = (void (*)(unsigned char *, void))static Published.subscript.modify();
  BOOL *v1 = !*v1;
  v0(v3, 0);
  swift_release();
  return swift_release();
}

uint64_t sub_100121304()
{
  return sub_10011EDA8();
}

uint64_t sub_100121330()
{
  v1[8] = v0;
  v1[9] = *v0;
  type metadata accessor for MainActor();
  v1[10] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[11] = v3;
  v1[12] = v2;
  return _swift_task_switch(sub_1001213F0, v3, v2);
}

uint64_t sub_1001213F0()
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v2 = [self bundleForClass:ObjCClassFromMetadata];
  id v3 = [v2 bundleIdentifier];

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1001ABE08 + dword_1001ABE08);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v7;
  void *v7 = v0;
  v7[1] = sub_100121520;
  return v9(v0 + 16, v4, v6);
}

uint64_t sub_100121520()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 96);
  uint64_t v3 = *(void *)(v1 + 88);
  return _swift_task_switch(sub_100121640, v3, v2);
}

uint64_t sub_100121640()
{
  uint64_t v1 = *(_OWORD **)(v0 + 64);
  swift_release();
  long long v3 = *(_OWORD *)(v0 + 32);
  long long v2 = *(_OWORD *)(v0 + 48);
  v1[1] = *(_OWORD *)(v0 + 16);
  v1[2] = v3;
  v1[3] = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1001216DC()
{
  return sub_10011EDA8();
}

uint64_t sub_100121708(uint64_t a1)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)(*(void *)v1 + 88) + 152))(*(void *)(*(void *)v1 + 80));
  sub_100116C94(v3, v4, 0, a1);

  return swift_bridgeObjectRelease();
}

void sub_1001217A8(char a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  sub_10000570C(&qword_1001A5390);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_100152B90;
  uint64_t v12 = (*(uint64_t (**)(void))(*(void *)(*(void *)v5 + 88) + 152))(*(void *)(*(void *)v5 + 80));
  *(void *)(v11 + 56) = &type metadata for AnalyticsString;
  *(void *)(v11 + 64) = &off_1001AAD38;
  *(unsigned char *)(v11 + 32) = 0;
  *(void *)(v11 + 40) = v12;
  *(void *)(v11 + 48) = v13;
  *(void *)(v11 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v11 + 104) = &off_1001AAD10;
  *(unsigned char *)(v11 + 72) = 0;
  *(void *)(v11 + 136) = &type metadata for AnalyticsModuleName;
  *(void *)(v11 + 144) = &off_1001AAD98;
  *(unsigned char *)(v11 + 112) = a1;
  *(void *)(v11 + 176) = &type metadata for AnalyticsModuleAction;
  *(void *)(v11 + 184) = &off_1001AAD70;
  *(void *)(v11 + 152) = a2;
  *(void *)(v11 + 160) = a3;
  *(unsigned char *)(v11 + 168) = a4;
  if (*(void *)(a5 + 72))
  {
    uint64_t v14 = *(void *)(a5 + 64);
    unint64_t v15 = *(void *)(a5 + 72);
  }
  else
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0xE000000000000000;
  }
  uint64_t v31 = &type metadata for AnalyticsString;
  uint64_t v32 = (void *(*)())&off_1001AAD38;
  LOBYTE(aBlock) = 1;
  uint64_t v29 = v14;
  int v30 = (Class (*)(uint64_t))v15;
  sub_10000751C(a2, a3, a4);
  uint64_t v34 = (char *)v11;
  unint64_t v16 = *(void *)(v11 + 16);
  unint64_t v17 = *(void *)(v11 + 24);
  swift_bridgeObjectRetain();
  if (v16 >= v17 >> 1) {
    uint64_t v34 = sub_1001378BC((char *)(v17 > 1), v16 + 1, 1, (char *)v11);
  }
  uint64_t v18 = sub_100007534((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __n128 v19 = __chkstk_darwin(v18, v18);
  uint64_t v21 = (char *)&v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v22 + 16))(v21, v19);
  sub_100116BFC(v16, (uint64_t)v21, (uint64_t *)&v34, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_1001AAD38);
  sub_100007584((uint64_t)&aBlock);
  uint64_t v23 = v34;
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = (void *)swift_allocObject();
  v25[2] = 0xD00000000000001ELL;
  void v25[3] = 0x800000010015D360;
  v25[4] = v23;
  uint64_t v32 = sub_100116F34;
  unint64_t v33 = v25;
  aBlock = _NSConcreteStackBlock;
  uint64_t v29 = 1107296256;
  int v30 = sub_100116B70;
  uint64_t v31 = (ValueMetadata *)&unk_10019B580;
  id v26 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v26);
  swift_bridgeObjectRelease();
}

uint64_t *sub_100121AFC()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = (uint64_t)v0 + qword_1001AC7A8;
  uint64_t v3 = sub_10000570C(&qword_1001A57D0);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  v4(v2, v3);
  uint64_t v5 = (uint64_t)v0 + qword_1001AC7B0;
  uint64_t v6 = sub_10000570C(&qword_1001A57C8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  v7((uint64_t)v0 + qword_1001AC7B8, v6);
  v7((uint64_t)v0 + qword_1001AC7C0, v6);
  v4((uint64_t)v0 + qword_1001AC7C8, v3);
  uint64_t v8 = (uint64_t)v0 + qword_1001AC7D0;
  uint64_t v9 = sub_10000570C(&qword_1001A57C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = (uint64_t)v0 + qword_1001AC7D8;
  uint64_t v11 = sub_10000570C(&qword_1001A57B8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 160));
  swift_release();
  sub_10000ACE0((uint64_t)v0 + *(void *)(*v0 + 176), &qword_1001A5478);
  return v0;
}

uint64_t sub_100121D70()
{
  sub_100121AFC();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for EventViewModel()
{
  return sub_10000B72C();
}

void sub_100121DE0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_100121E44(uint64_t a1@<X8>)
{
  *(double *)a1 = sub_10011EFF8();
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
}

uint64_t sub_100121E74()
{
  return sub_10011F0B0();
}

void *sub_100121EA0(uint64_t a1)
{
  return sub_1001172A8(*(void *)(a1 + 16));
}

uint64_t sub_100121EA8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100121EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100121EF8()
{
  return swift_release();
}

uint64_t sub_100121F00()
{
  sub_1000D1500();
  if (!v0) {
    goto LABEL_6;
  }
  uint64_t v1 = v0;
  if (!*(void *)(v0 + 16) || (unint64_t v2 = sub_1000B828C(1), (v3 & 1) == 0))
  {
    swift_bridgeObjectRelease();
LABEL_6:
    char v5 = 1;
    return v5 & 1;
  }
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(v1 + 56) + v2);
  swift_bridgeObjectRelease();
  switch(v4)
  {
    case 3:
      swift_bridgeObjectRelease();
      char v5 = 0;
      break;
    default:
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      char v5 = v7 ^ 1;
      break;
  }
  return v5 & 1;
}

uint64_t sub_100122020()
{
  return 16;
}

__n128 sub_10012202C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100122040()
{
  return 16;
}

__n128 sub_10012204C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100122060()
{
  return 16;
}

__n128 sub_10012206C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_100122078(uint64_t a1@<X8>)
{
  *(double *)a1 = sub_10011EFF8();
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
}

uint64_t sub_1001220A8()
{
  return sub_10011F0B0();
}

uint64_t sub_1001220D4()
{
  return 16;
}

__n128 sub_1001220E0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_1001220EC(uint64_t a1@<X8>)
{
  *(double *)a1 = sub_10011EE88();
  *(void *)(a1 + 8) = v2;
}

uint64_t sub_100122118()
{
  return sub_10011EF3C();
}

uint64_t sub_100122140()
{
  return 16;
}

__n128 sub_10012214C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

unint64_t sub_100122158()
{
  unint64_t result = qword_1001A6040;
  if (!qword_1001A6040)
  {
    type metadata accessor for UserInterfaceSizeClass();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A6040);
  }
  return result;
}

uint64_t sub_1001221B8()
{
  return 16;
}

__n128 sub_1001221C4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1001221D8()
{
  return 16;
}

__n128 sub_1001221E4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1001221F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
}

uint64_t sub_10012222C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _ConditionalContent.Storage();
  __chkstk_darwin(v4, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))((char *)&v8 - v6, a1, a2);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

uint64_t sub_100122324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for _ConditionalContent.Storage();
  __chkstk_darwin(v5, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))((char *)&v9 - v7, a1, a3);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

void *sub_100122420()
{
  uint64_t v0 = type metadata accessor for AppleMusicFetcher.MusicArtist();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000570C(&qword_1001A6D90);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  void v12[2] = &type metadata for AppleMusicFetcher;
  unint64_t v9 = sub_100132834();
  uint64_t v12[3] = v9;
  swift_getKeyPath();
  v12[0] = &type metadata for AppleMusicFetcher;
  v12[1] = v9;
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v8, 1, v0))
  {
    sub_10000ACE0((uint64_t)v8, &qword_1001A6D90);
    return _swiftEmptyArrayStorage;
  }
  else
  {
    sub_100133B80((uint64_t)v8, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for AppleMusicFetcher.MusicArtist);
    sub_10000ACE0((uint64_t)v8, &qword_1001A6D90);
    uint64_t v10 = *((void *)v4 + 4);
    swift_bridgeObjectRetain();
    sub_100133BE8((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for AppleMusicFetcher.MusicArtist);
  }
  return (void *)v10;
}

uint64_t sub_100122614@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AppleMusicFetcher.MusicArtist();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000570C(&qword_1001A6D90);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  void v14[2] = &type metadata for AppleMusicFetcher;
  unint64_t v11 = sub_100132834();
  v14[3] = v11;
  swift_getKeyPath();
  v14[0] = &type metadata for AppleMusicFetcher;
  v14[1] = v11;
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v10, 1, v2))
  {
    sub_10000ACE0((uint64_t)v10, &qword_1001A6D90);
    uint64_t v12 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
  else
  {
    sub_100133B80((uint64_t)v10, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for AppleMusicFetcher.MusicArtist);
    sub_10000ACE0((uint64_t)v10, &qword_1001A6D90);
    sub_10000A428((uint64_t)&v6[*(int *)(v2 + 32)], a1, &qword_1001AD200);
    return sub_100133BE8((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for AppleMusicFetcher.MusicArtist);
  }
}

uint64_t sub_100122854()
{
  return swift_release();
}

uint64_t sub_1001228EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 16);
  uint64_t v6 = *(void *)(a4 + a3 - 8);
  swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  unint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v14 = __chkstk_darwin(v12, v13);
  unint64_t v16 = (char *)v19 - v15;
  unint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16);
  v17((char *)v19 - v15, a1, v7, v14);
  v19[2] = v5;
  void v19[3] = v6;
  swift_getKeyPath();
  v19[0] = v5;
  v19[1] = v6;
  swift_getKeyPath();
  ((void (*)(char *, char *, uint64_t))v17)(v11, v16, v7);
  swift_retain();
  static Published.subscript.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v16, v7);
}

uint64_t sub_100122A9C(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  sub_10000570C(&qword_1001A6D90);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  type metadata accessor for MainActor();
  v3[13] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[14] = v5;
  v3[15] = v4;
  return _swift_task_switch(sub_100122B78, v5, v4);
}

uint64_t sub_100122B78()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[16] = v1;
  void *v1 = v0;
  v1[1] = sub_100122C10;
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[9];
  return sub_1000660D0(v2, v3, v4);
}

uint64_t sub_100122C10()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 120);
  uint64_t v4 = *(void *)(v2 + 112);
  if (v0) {
    uint64_t v5 = sub_100122E84;
  }
  else {
    uint64_t v5 = sub_100122D4C;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_100122D4C()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[11];
  swift_release();
  uint64_t v3 = (void *)swift_task_alloc();
  *uint64_t v3 = &type metadata for AppleMusicFetcher;
  unint64_t v4 = sub_100132834();
  v3[1] = v4;
  swift_getKeyPath();
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *uint64_t v5 = &type metadata for AppleMusicFetcher;
  v5[1] = v4;
  swift_getKeyPath();
  swift_task_dealloc();
  sub_10000A428(v1, v2, &qword_1001A6D90);
  swift_retain();
  static Published.subscript.setter();
  sub_10000ACE0(v1, &qword_1001A6D90);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100122E84()
{
  uint64_t v13 = v0;
  swift_release();
  if (qword_1001A4F38 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100017378(v1, (uint64_t)qword_1001B75B8);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[9];
  if (v4)
  {
    uint64_t v6 = v0[8];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    swift_bridgeObjectRetain();
    v0[5] = sub_1000FE1F8(v6, v5, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v7 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v8 = Error.localizedDescription.getter();
    v0[7] = sub_1000FE1F8(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to fetch artist with id %s. Error: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100123138@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Optional();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a2, a1, v4);
}

uint64_t sub_1001231A4(uint64_t TupleTypeMetadata, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t *)TupleTypeMetadata;
  unint64_t v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    uint64_t v6 = *v5;
  }
  else
  {
    __chkstk_darwin(TupleTypeMetadata, a2);
    uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a2)
    {
      unint64_t v9 = 0;
      if (a2 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)(v8 - (char *)v5) < 0x20) {
        goto LABEL_9;
      }
      unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v10 = (long long *)(v5 + 2);
      unint64_t v11 = v8 + 16;
      unint64_t v12 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v13 = *v10;
        *(v11 - 1) = *(v10 - 1);
        *unint64_t v11 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 4;
      }
      while (v12);
      if (v9 != a2)
      {
LABEL_9:
        unint64_t v14 = a2 - v9;
        uint64_t v15 = v9;
        unint64_t v16 = &v8[8 * v9];
        unint64_t v17 = &v5[v15];
        do
        {
          uint64_t v18 = *v17++;
          *(void *)unint64_t v16 = v18;
          v16 += 8;
          --v14;
        }
        while (v14);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v6 = TupleTypeMetadata;
  }
  __chkstk_darwin(TupleTypeMetadata, a2);
  uint64_t v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v21 = (int *)(v6 + 32);
    unint64_t v22 = a2;
    do
    {
      if (a2 == 1) {
        int v23 = 0;
      }
      else {
        int v23 = *v21;
      }
      uint64_t v25 = *v5++;
      uint64_t v24 = v25;
      uint64_t v26 = *v4++;
      (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 16))(&v20[v23], v26);
      v21 += 4;
      --v22;
    }
    while (v22);
  }
  return TupleView.init(_:)();
}

uint64_t sub_100123368@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  *(void *)a3 = sub_1001255D8();
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = v7 & 1;
  *(void *)(a3 + 24) = a1;
  *(void *)(a3 + 32) = a2;
  *(unsigned char *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = sub_1000AB850(0);
  *(void *)(a3 + 56) = v8;
  *(void *)(a3 + 64) = 0;
  type metadata accessor for RemoteViewConfiguration();
  sub_1001336F8((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  *(void *)(a3 + 72) = EnvironmentObject.init()();
  *(void *)(a3 + 80) = v9;
  uint64_t v10 = (int *)type metadata accessor for EventView();
  unint64_t v11 = (uint64_t *)(a3 + v10[13]);
  *unint64_t v11 = swift_getKeyPath();
  sub_10000570C(&qword_1001A5460);
  swift_storeEnumTagMultiPayload();
  unint64_t v12 = (uint64_t *)(a3 + v10[14]);
  *unint64_t v12 = swift_getKeyPath();
  sub_10000570C(&qword_1001A5468);
  swift_storeEnumTagMultiPayload();
  long long v13 = (uint64_t *)(a3 + v10[15]);
  uint64_t *v13 = swift_getKeyPath();
  sub_10000570C(&qword_1001A5470);

  return swift_storeEnumTagMultiPayload();
}

double sub_1001234E4@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100123934(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1001A66F8, &qword_1001A66E8).n128_u64[0];
  return result;
}

uint64_t sub_100123540@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v25 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(_OWORD *)(a9 + 56) = v30;
  *(_OWORD *)(a9 + 72) = v31;
  *(_OWORD *)(a9 + 88) = v32;
  *(_OWORD *)(a9 + 104) = v33;
  *(_OWORD *)(a9 + 8) = v27;
  *(_OWORD *)(a9 + 24) = v28;
  *(void *)a9 = a16;
  *(_OWORD *)(a9 + 40) = v29;

  return swift_retain();
}

uint64_t sub_1001236FC@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    int v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = *(_OWORD *)(v13 + 112);
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(v13 + 96);
  *(_OWORD *)(a9 + 112) = v24;
  long long v25 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v25;
  long long v26 = *(_OWORD *)(v13 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v13 + 64);
  *(_OWORD *)(a9 + 80) = v26;
  long long v27 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v27;
  *(_OWORD *)(a9 + 184) = v32;
  *(_OWORD *)(a9 + 200) = v33;
  *(_OWORD *)(a9 + 216) = v34;
  *(_OWORD *)(a9 + 232) = v35;
  *(_OWORD *)(a9 + 136) = v29;
  *(_OWORD *)(a9 + 152) = v30;
  *(unsigned char *)(a9 + 128) = *(unsigned char *)(v13 + 128);
  *(_OWORD *)(a9 + 168) = v31;

  return sub_100045718(v13);
}

double sub_1001238D8@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100123934(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1001A7618, &qword_1001A7620).n128_u64[0];
  return result;
}

__n128 sub_100123934@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v19 = a17;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    long long v28 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    uint64_t v19 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  sub_10000A428(v17, a9, a16);
  long long v29 = (_OWORD *)(a9 + *(int *)(sub_10000570C(v19) + 36));
  v29[4] = v35;
  v29[5] = v36;
  v29[6] = v37;
  *long long v29 = v31;
  v29[1] = v32;
  __n128 result = v34;
  v29[2] = v33;
  v29[3] = v34;
  return result;
}

uint64_t sub_100123B04@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    int v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v24;
  long long v25 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v25;
  *(_OWORD *)(a9 + 120) = v30;
  *(_OWORD *)(a9 + 136) = v31;
  *(_OWORD *)(a9 + 152) = v32;
  *(_OWORD *)(a9 + 168) = v33;
  *(_OWORD *)(a9 + 72) = v27;
  *(_OWORD *)(a9 + 88) = v28;
  *(unsigned char *)(a9 + 64) = *(unsigned char *)(v13 + 64);
  *(_OWORD *)(a9 + 104) = v29;

  return sub_100076850(v13);
}

uint64_t sub_100123CD0@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    int v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = v13[3];
  a9[2] = v13[2];
  a9[3] = v24;
  *(_OWORD *)((char *)a9 + 57) = *(_OWORD *)((char *)v13 + 57);
  long long v25 = v13[1];
  *a9 = *v13;
  a9[1] = v25;
  a9[9] = v31;
  a9[10] = v32;
  a9[11] = v33;
  a9[5] = v27;
  a9[6] = v28;
  a9[7] = v29;
  a9[8] = v30;

  return sub_1001348E0((uint64_t)v13);
}

double sub_100123E90@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100123934(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1001A8570, &qword_1001A8578).n128_u64[0];
  return result;
}

double sub_100123EEC@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100123934(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1001A85A8, &qword_1001A8590).n128_u64[0];
  return result;
}

uint64_t sub_100123F48@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  uint64_t v20 = a19;
  char v21 = a18;
  uint64_t v22 = a17;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    long long v31 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    char v21 = a18;
    uint64_t v20 = a19;
    uint64_t v22 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(void *)a9 = a16;
  *(void *)(a9 + 8) = v22;
  *(unsigned char *)(a9 + 16) = v21 & 1;
  *(void *)(a9 + 24) = v20;
  *(_OWORD *)(a9 + 96) = v37;
  *(_OWORD *)(a9 + 112) = v38;
  *(_OWORD *)(a9 + 128) = v39;
  *(_OWORD *)(a9 + 32) = v33;
  *(_OWORD *)(a9 + 48) = v34;
  *(_OWORD *)(a9 + 64) = v35;
  *(_OWORD *)(a9 + 80) = v36;
  sub_10000FCD4(a16, v22, v21 & 1);

  return swift_bridgeObjectRetain();
}

double sub_10012413C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100123934(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1001A90A0, &qword_1001A90A8).n128_u64[0];
  return result;
}

uint64_t sub_100124198@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    int v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = *(_OWORD *)(v13 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v13 + 64);
  *(_OWORD *)(a9 + 80) = v24;
  *(unsigned char *)(a9 + 96) = *(unsigned char *)(v13 + 96);
  long long v25 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v25;
  long long v26 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v26;
  *(_OWORD *)(a9 + 104) = v28;
  *(_OWORD *)(a9 + 120) = v29;
  *(_OWORD *)(a9 + 136) = v30;
  *(_OWORD *)(a9 + 200) = v34;
  *(_OWORD *)(a9 + 184) = v33;
  *(_OWORD *)(a9 + 168) = v32;
  *(_OWORD *)(a9 + 152) = v31;

  return sub_100134A1C(v13);
}

double sub_10012436C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100123934(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1001A9F88, &qword_1001AA010).n128_u64[0];
  return result;
}

uint64_t sub_1001243C8@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    int v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = *(_OWORD *)(v13 + 144);
  *(_OWORD *)(a9 + 128) = *(_OWORD *)(v13 + 128);
  *(_OWORD *)(a9 + 144) = v24;
  *(_OWORD *)(a9 + 160) = *(_OWORD *)(v13 + 160);
  long long v25 = *(_OWORD *)(v13 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v13 + 64);
  *(_OWORD *)(a9 + 80) = v25;
  long long v26 = *(_OWORD *)(v13 + 112);
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(v13 + 96);
  *(_OWORD *)(a9 + 112) = v26;
  long long v27 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v27;
  long long v28 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v28;
  *(_OWORD *)(a9 + 232) = v33;
  *(_OWORD *)(a9 + 248) = v34;
  *(_OWORD *)(a9 + 264) = v35;
  *(_OWORD *)(a9 + 280) = v36;
  *(_OWORD *)(a9 + 184) = v30;
  *(_OWORD *)(a9 + 200) = v31;
  *(unsigned char *)(a9 + 176) = *(unsigned char *)(v13 + 176);
  *(_OWORD *)(a9 + 216) = v32;

  return sub_100134920(v13);
}

double sub_1001245B4@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100123934(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1001AABE8, &qword_1001AABF0).n128_u64[0];
  return result;
}

uint64_t sub_100124610@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    int v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = *(_OWORD *)(v13 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v13 + 64);
  *(_OWORD *)(a9 + 80) = v24;
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(v13 + 96);
  *(void *)(a9 + 112) = *(void *)(v13 + 112);
  long long v25 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v25;
  long long v26 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v26;
  *(_OWORD *)(a9 + 152) = v30;
  *(_OWORD *)(a9 + 136) = v29;
  *(_OWORD *)(a9 + 120) = v28;
  *(_OWORD *)(a9 + 216) = v34;
  *(_OWORD *)(a9 + 200) = v33;
  *(_OWORD *)(a9 + 184) = v32;
  *(_OWORD *)(a9 + 168) = v31;

  return sub_100012A84(v13);
}

uint64_t sub_1001247EC@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    int v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v24;
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v13 + 64);
  long long v25 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v25;
  *(_OWORD *)(a9 + 136) = v30;
  *(_OWORD *)(a9 + 152) = v31;
  *(_OWORD *)(a9 + 168) = v32;
  *(_OWORD *)(a9 + 184) = v33;
  *(_OWORD *)(a9 + 88) = v27;
  *(_OWORD *)(a9 + 104) = v28;
  *(void *)(a9 + 80) = *(void *)(v13 + 80);
  *(_OWORD *)(a9 + 120) = v29;

  return sub_1000E5C3C(v13);
}

uint64_t sub_1001249C0@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    int v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = v13[11];
  a9[10] = v13[10];
  a9[11] = v24;
  long long v25 = v13[12];
  long long v26 = v13[7];
  a9[6] = v13[6];
  a9[7] = v26;
  long long v27 = v13[9];
  a9[8] = v13[8];
  a9[9] = v27;
  long long v28 = v13[3];
  a9[2] = v13[2];
  a9[3] = v28;
  long long v29 = v13[5];
  a9[4] = v13[4];
  a9[5] = v29;
  long long v30 = v13[1];
  *a9 = *v13;
  a9[1] = v30;
  a9[16] = v35;
  a9[17] = v36;
  a9[18] = v37;
  a9[19] = v38;
  a9[12] = v25;
  a9[13] = v32;
  a9[14] = v33;
  a9[15] = v34;

  return sub_100134864((uint64_t)v13);
}

uint64_t sub_100124B9C@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int16 a19)
{
  __int16 v20 = a19;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    long long v29 = (void *)static Log.runtimeIssuesLog.getter();
    __int16 v20 = a19;
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(void *)a9 = a16;
  *(void *)(a9 + 8) = a17;
  *(void *)(a9 + 16) = a18;
  *(unsigned char *)(a9 + 24) = v20 & 1;
  *(unsigned char *)(a9 + 25) = HIBYTE(v20) & 1;
  *(_OWORD *)(a9 + 96) = v35;
  *(_OWORD *)(a9 + 112) = v36;
  *(_OWORD *)(a9 + 128) = v37;
  *(_OWORD *)(a9 + 32) = v31;
  *(_OWORD *)(a9 + 48) = v32;
  *(_OWORD *)(a9 + 64) = v33;
  *(_OWORD *)(a9 + 80) = v34;
  swift_retain();

  return swift_retain();
}

double sub_100124D88@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100123934(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1001AB610, &qword_1001AB618).n128_u64[0];
  return result;
}

double sub_100124DE4@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100123934(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1001AB880, &qword_1001AB888).n128_u64[0];
  return result;
}

double sub_100124E40@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100123934(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1001AB8A8, &qword_1001AB8B0).n128_u64[0];
  return result;
}

double sub_100124E9C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100123934(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1001AB900, &qword_1001AB908).n128_u64[0];
  return result;
}

double sub_100124EF8@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100123934(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1001AB8E0, &qword_1001AB8E8).n128_u64[0];
  return result;
}

__n128 sub_100124F54@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    int v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  uint64_t v24 = sub_10000570C(&qword_1001AB9C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(a9, v13, v24);
  long long v25 = (_OWORD *)(a9 + *(int *)(sub_10000570C(&qword_1001AB9A0) + 36));
  v25[4] = v31;
  v25[5] = v32;
  v25[6] = v33;
  *long long v25 = v27;
  v25[1] = v28;
  __n128 result = v30;
  v25[2] = v29;
  void v25[3] = v30;
  return result;
}

double sub_100125140@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100123934(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1001ABA18, &qword_1001ABA20).n128_u64[0];
  return result;
}

double sub_10012519C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100123934(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1001ABA40, &qword_1001ABA48).n128_u64[0];
  return result;
}

double sub_1001251F8@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100123934(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1001ABBC0, &qword_1001ABBC8).n128_u64[0];
  return result;
}

uint64_t sub_100125254@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    int v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(void *)&v33[32] = *(void *)(v13 + 48);
  *(_OWORD *)long long v33 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)&v33[16] = *(_OWORD *)(v13 + 32);
  long long v34 = *(_OWORD *)&v33[8];
  long long v35 = *(_OWORD *)&v33[24];
  sub_10013498C((uint64_t)&v34, (uint64_t)v37);
  long long v24 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v24;
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 104) = v29;
  *(_OWORD *)(a9 + 120) = v30;
  *(_OWORD *)(a9 + 136) = v31;
  *(_OWORD *)(a9 + 152) = v32;
  *(_OWORD *)(a9 + 56) = v26;
  *(_OWORD *)(a9 + 72) = v27;
  uint64_t v36 = *((void *)&v35 + 1);
  *(void *)(a9 + 48) = *(void *)(v13 + 48);
  *(_OWORD *)(a9 + 88) = v28;
  sub_1001349E8((uint64_t)v37);
  return sub_100058A48((uint64_t)&v36);
}

double sub_100125450@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100123934(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1001AC570, &qword_1001AC578).n128_u64[0];
  return result;
}

double sub_1001254AC@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100123934(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1001AC5B8, &qword_1001AC5C0).n128_u64[0];
  return result;
}

double sub_100125508@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100123934(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1001AC5A8, &qword_1001AC5B0).n128_u64[0];
  return result;
}

uint64_t sub_100125564@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for CoordinateSpace.local(_:);
  uint64_t v3 = type metadata accessor for CoordinateSpace();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t sub_1001255D8()
{
  return StateObject.init(wrappedValue:)();
}

uint64_t sub_10012564C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = *((unsigned __int8 *)v2 + 16);
  uint64_t v6 = type metadata accessor for EventViewModel();
  uint64_t WitnessTable = swift_getWitnessTable();

  return a2(v3, v4, v5, v6, WitnessTable);
}

uint64_t sub_1001256DC()
{
  sub_10000570C(qword_1001AC878);
  sub_10000A780(&qword_1001AC9C0, qword_1001AC878);

  return StateObject.wrappedValue.getter();
}

uint64_t sub_10012576C()
{
  uint64_t v0 = sub_10000570C(&qword_1001AC870);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000570C(&qword_1001A6D90);
  uint64_t v7 = __chkstk_darwin(v5, v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  unint64_t v12 = (char *)&v17 - v11;
  sub_10000570C(qword_1001AC878);
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = v13 + *(void *)(*(void *)v13 + 104);
  uint64_t v15 = type metadata accessor for AppleMusicFetcher.MusicArtist();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  sub_10000A428((uint64_t)v12, (uint64_t)v9, &qword_1001A6D90);
  Published.init(initialValue:)();
  sub_10000ACE0((uint64_t)v12, &qword_1001A6D90);
  (*(void (**)(uint64_t, char *, uint64_t))(v1 + 32))(v14, v4, v0);
  return v13;
}

void sub_10012595C()
{
  sub_100094D04(319, (unint64_t *)&qword_1001A5670, (void (*)(uint64_t))&type metadata accessor for DismissAction);
  if (v0 <= 0x3F)
  {
    sub_100094D04(319, (unint64_t *)&qword_1001A6628, (void (*)(uint64_t))&type metadata accessor for ColorScheme);
    if (v1 <= 0x3F)
    {
      sub_100025218();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t sub_100125AC8(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *(void *)a1 = *a2;
    a1 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    char v9 = *((unsigned char *)a2 + 16);
    sub_1000126FC();
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    uint64_t v10 = a2[3];
    uint64_t v11 = a2[4];
    char v12 = *((unsigned char *)a2 + 40);
    sub_1000126FC();
    *(void *)(a1 + 24) = v10;
    *(void *)(a1 + 32) = v11;
    *(unsigned char *)(a1 + 40) = v12;
    uint64_t v13 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v13;
    uint64_t v14 = a2[8];
    uint64_t v15 = a2[10];
    *(void *)(a1 + 72) = a2[9];
    *(void *)(a1 + 80) = v15;
    uint64_t v16 = a3[13];
    uint64_t v17 = (void *)(a1 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    *(void *)(a1 + 64) = v14;
    swift_retain();
    swift_retain();
    sub_10000570C(&qword_1001A5460);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v19 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    }
    else
    {
      *uint64_t v17 = *v18;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v21 = a3[14];
    uint64_t v22 = (void *)(a1 + v21);
    int v23 = (uint64_t *)((char *)a2 + v21);
    sub_10000570C(&qword_1001A5468);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v24 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
    }
    else
    {
      *uint64_t v22 = *v23;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v25 = a3[15];
    long long v26 = (void *)(a1 + v25);
    long long v27 = (uint64_t *)((char *)a2 + v25);
    sub_10000570C(&qword_1001A5470);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v28 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v29 = *(void *)(v28 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
      {
        uint64_t v30 = sub_10000570C(&qword_1001A5478);
        memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v29 + 16))(v26, v27, v28);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      }
    }
    else
    {
      *long long v26 = *v27;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100125E14(uint64_t a1, int *a2)
{
  sub_10001274C();
  sub_10001274C();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + a2[13];
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + a2[14];
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = a1 + a2[15];
  sub_10000570C(&qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v12 = *(void *)(v9 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v8, 1, v9);
    if (!result)
    {
      uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
      return v11(v8, v9);
    }
  }
  else
  {
    return swift_release();
  }
  return result;
}

uint64_t sub_100126048(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_1000126FC();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  char v11 = *((unsigned char *)a2 + 40);
  sub_1000126FC();
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v10;
  *(unsigned char *)(a1 + 40) = v11;
  uint64_t v12 = a2[7];
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = v12;
  uint64_t v13 = a2[8];
  uint64_t v14 = a2[10];
  *(void *)(a1 + 72) = a2[9];
  *(void *)(a1 + 80) = v14;
  uint64_t v15 = a3[13];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (uint64_t *)((char *)a2 + v15);
  *(void *)(a1 + 64) = v13;
  swift_retain();
  swift_retain();
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = type metadata accessor for DismissAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  }
  else
  {
    *uint64_t v16 = *v17;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v19 = a3[14];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (uint64_t *)((char *)a2 + v19);
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
  }
  else
  {
    *uint64_t v20 = *v21;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v23 = a3[15];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (uint64_t *)((char *)a2 + v23);
  sub_10000570C(&qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v26 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      uint64_t v28 = sub_10000570C(&qword_1001A5478);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
  }
  else
  {
    *uint64_t v24 = *v25;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_100126344(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_1000126FC();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  sub_10001274C();
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  char v11 = *((unsigned char *)a2 + 40);
  sub_1000126FC();
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v10;
  *(unsigned char *)(a1 + 40) = v11;
  sub_10001274C();
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = a2[7];
  swift_retain();
  swift_release();
  *(void *)(a1 + 64) = a2[8];
  *(void *)(a1 + 72) = a2[9];
  swift_retain();
  swift_release();
  *(void *)(a1 + 80) = a2[10];
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v12 = a3[13];
    uint64_t v13 = (void *)(a1 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    sub_10000ACE0(a1 + v12, &qword_1001A5460);
    sub_10000570C(&qword_1001A5460);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    }
    else
    {
      void *v13 = *v14;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v16 = a3[14];
    uint64_t v17 = (void *)(a1 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    sub_10000ACE0(a1 + v16, &qword_1001A5468);
    sub_10000570C(&qword_1001A5468);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v19 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    }
    else
    {
      *uint64_t v17 = *v18;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = a3[15];
    uint64_t v21 = (void *)(a1 + v20);
    uint64_t v22 = (uint64_t *)((char *)a2 + v20);
    sub_10000ACE0(a1 + v20, &qword_1001A5470);
    sub_10000570C(&qword_1001A5470);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v23 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        uint64_t v25 = sub_10000570C(&qword_1001A5478);
        memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v24 + 16))(v21, v22, v23);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
    }
    else
    {
      *uint64_t v21 = *v22;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1001266B4(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v6 = a3[13];
  uint64_t v7 = (void *)(a1 + v6);
  char v8 = (const void *)(a2 + v6);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v9 = sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for DismissAction();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v11 = a3[14];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v12, v13, v15);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  uint64_t v16 = a3[15];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  uint64_t v19 = sub_10000570C(&qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v18, 1, v20))
    {
      uint64_t v22 = sub_10000570C(&qword_1001A5478);
      memcpy(v17, v18, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v17, v18, v20);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v17, 0, 1, v20);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1001269AC(uint64_t a1, uint64_t a2, int *a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  sub_10001274C();
  char v7 = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = v7;
  sub_10001274C();
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_release();
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  if (a1 != a2)
  {
    uint64_t v10 = a3[13];
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (const void *)(a2 + v10);
    sub_10000ACE0(a1 + v10, &qword_1001A5460);
    uint64_t v13 = sub_10000570C(&qword_1001A5460);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = type metadata accessor for DismissAction();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    uint64_t v15 = a3[14];
    uint64_t v16 = (void *)(a1 + v15);
    uint64_t v17 = (const void *)(a2 + v15);
    sub_10000ACE0(a1 + v15, &qword_1001A5468);
    uint64_t v18 = sub_10000570C(&qword_1001A5468);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v19 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v19 - 8) + 32))(v16, v17, v19);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    uint64_t v20 = a3[15];
    uint64_t v21 = (void *)(a1 + v20);
    uint64_t v22 = (const void *)(a2 + v20);
    sub_10000ACE0(a1 + v20, &qword_1001A5470);
    uint64_t v23 = sub_10000570C(&qword_1001A5470);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v24 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v25 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24))
      {
        uint64_t v26 = sub_10000570C(&qword_1001A5478);
        memcpy(v21, v22, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v21, v22, v24);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100126D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100126D1C);
}

uint64_t sub_100126D1C(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 56);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = sub_10000570C(&qword_1001A55E0);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[13];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = sub_10000570C(&qword_1001A65B8);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[14];
    goto LABEL_9;
  }
  uint64_t v14 = sub_10000570C(&qword_1001A5F10);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[15];

  return v15(v17, a2, v16);
}

uint64_t sub_100126EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100126EB4);
}

uint64_t sub_100126EB4(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 56) = (a2 - 1);
    return result;
  }
  uint64_t v8 = sub_10000570C(&qword_1001A55E0);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[13];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = sub_10000570C(&qword_1001A65B8);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[14];
    goto LABEL_7;
  }
  uint64_t v14 = sub_10000570C(&qword_1001A5F10);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[15];

  return v15(v17, a2, a2, v16);
}

uint64_t type metadata accessor for EventView()
{
  return sub_10000B72C();
}

uint64_t sub_100127050()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100127094@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  v233 = a2;
  uint64_t v3 = type metadata accessor for TaskPriority();
  uint64_t v231 = *(void *)(v3 - 8);
  uint64_t v232 = v3;
  __chkstk_darwin(v3, v4);
  v230 = (char *)&v182 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v244 = sub_10000570C(&qword_1001A5478);
  __chkstk_darwin(v244, v6);
  uint64_t v229 = (uint64_t)&v182 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v254 = *(void *)(a1 - 8);
  uint64_t v251 = *(void *)(v254 + 64);
  __chkstk_darwin(v8, v9);
  v247 = (char *)&v182 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v253 = type metadata accessor for CoordinateSpace();
  uint64_t v252 = *(void *)(v253 - 8);
  __chkstk_darwin(v253, v11);
  v250 = (char *)&v182 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v246 = type metadata accessor for NavigationPath();
  uint64_t v243 = a1;
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for HeroImage();
  type metadata accessor for HeroImageLandscape();
  type metadata accessor for ModifiedContent();
  v245 = (void (*)(uint64_t, char *, uint64_t))type metadata accessor for _ConditionalContent();
  uint64_t v249 = v13;
  uint64_t v255 = v14;
  type metadata accessor for EventDetailModule();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  sub_100004A58(&qword_1001AC900);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for HStack();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  sub_100004A58(&qword_1001AC908);
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001AC910);
  type metadata accessor for ModifiedContent();
  uint64_t v289 = sub_100004A58(&qword_1001A9748);
  v290 = (ValueMetadata *)type metadata accessor for GuideModule();
  uint64_t v291 = sub_100004A58(&qword_1001AC918);
  type metadata accessor for LineupModule();
  type metadata accessor for ModifiedContent();
  uint64_t v292 = type metadata accessor for Optional();
  uint64_t v293 = sub_100004A58(&qword_1001AC920);
  uint64_t v294 = sub_100004A58(&qword_1001AC928);
  swift_getTupleTypeMetadata();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001A6298);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  swift_getWitnessTable();
  type metadata accessor for ObservableScrollView();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for ZStack();
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  v288 = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  uint64_t v16 = swift_getWitnessTable();
  uint64_t v289 = v15;
  v290 = (ValueMetadata *)v16;
  swift_getOpaqueTypeMetadata2();
  sub_100004A58(&qword_1001AC930);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001A8878);
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v289 = v15;
  v290 = (ValueMetadata *)v16;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v19 = sub_10000A780(&qword_1001AC938, &qword_1001AC930);
  uint64_t v285 = OpaqueTypeConformance2;
  uint64_t v286 = v19;
  uint64_t v20 = swift_getWitnessTable();
  uint64_t v21 = sub_10000A780(&qword_1001A6290, &qword_1001A6298);
  uint64_t v283 = v20;
  uint64_t v284 = v21;
  uint64_t v22 = swift_getWitnessTable();
  uint64_t v23 = sub_10000A780(&qword_1001A8888, &qword_1001A8878);
  uint64_t v281 = v22;
  uint64_t v282 = v23;
  v245 = (void (*)(uint64_t, char *, uint64_t))v17;
  unint64_t v194 = swift_getWitnessTable();
  uint64_t v24 = type metadata accessor for NavigationStack();
  uint64_t v246 = *(void *)(v24 - 8);
  __chkstk_darwin(v24, v25);
  uint64_t v190 = (char *)&v182 - v26;
  sub_100004A58(&qword_1001AC940);
  uint64_t v183 = v24;
  uint64_t v27 = type metadata accessor for ModifiedContent();
  uint64_t v206 = *(void *)(v27 - 8);
  __chkstk_darwin(v27, v28);
  v237 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v182 - v29);
  sub_100004A58(&qword_1001AC948);
  uint64_t v186 = v27;
  uint64_t v30 = type metadata accessor for ModifiedContent();
  uint64_t v205 = *(void *)(v30 - 8);
  __chkstk_darwin(v30, v31);
  uint64_t v200 = (char *)&v182 - v32;
  sub_100004A58(&qword_1001AC950);
  uint64_t v187 = v30;
  uint64_t v33 = type metadata accessor for ModifiedContent();
  uint64_t v234 = *(void *)(v33 - 8);
  __chkstk_darwin(v33, v34);
  uint64_t v201 = (char *)&v182 - v35;
  sub_100004A58(&qword_1001AC958);
  uint64_t v189 = v33;
  uint64_t v235 = type metadata accessor for ModifiedContent();
  uint64_t v218 = *(void *)(v235 - 8);
  __chkstk_darwin(v235, v36);
  v238 = (char *)&v182 - v37;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v38 = type metadata accessor for TicketView();
  uint64_t v39 = swift_getWitnessTable();
  uint64_t v182 = v39;
  uint64_t v40 = sub_10000A780(&qword_1001AC960, &qword_1001AC940);
  uint64_t v279 = v39;
  uint64_t v280 = v40;
  uint64_t v41 = swift_getWitnessTable();
  uint64_t v184 = v41;
  uint64_t v42 = sub_10000A780(&qword_1001AC968, &qword_1001AC948);
  uint64_t v277 = v41;
  uint64_t v278 = v42;
  uint64_t v43 = swift_getWitnessTable();
  uint64_t v185 = v43;
  uint64_t v44 = sub_10000A780(&qword_1001AC970, &qword_1001AC950);
  uint64_t v275 = v43;
  uint64_t v276 = v44;
  uint64_t v45 = swift_getWitnessTable();
  uint64_t v188 = v45;
  uint64_t v46 = sub_10000A780(&qword_1001AC978, &qword_1001AC958);
  uint64_t v273 = v45;
  uint64_t v274 = v46;
  uint64_t v47 = v235;
  uint64_t v48 = swift_getWitnessTable();
  uint64_t v49 = swift_getWitnessTable();
  uint64_t v289 = v47;
  v290 = (ValueMetadata *)v38;
  uint64_t v50 = (ValueMetadata *)v38;
  uint64_t v191 = v38;
  uint64_t v192 = v49;
  uint64_t v291 = v48;
  uint64_t v292 = v49;
  uint64_t v193 = v48;
  uint64_t v51 = v49;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v211 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2, v53);
  v236 = (char *)&v182 - v54;
  uint64_t v55 = sub_100004A58(&qword_1001A88B0);
  uint64_t v289 = v47;
  v290 = v50;
  uint64_t v291 = v48;
  uint64_t v292 = v51;
  uint64_t v56 = swift_getOpaqueTypeConformance2();
  uint64_t v57 = sub_100004A58(&qword_1001A88D8);
  uint64_t v58 = sub_100133408(&qword_1001A88E0, &qword_1001A88D8, (void (*)(void))sub_100058590);
  uint64_t v289 = v57;
  v290 = (ValueMetadata *)v58;
  uint64_t v59 = swift_getOpaqueTypeConformance2();
  uint64_t v202 = OpaqueTypeMetadata2;
  uint64_t v289 = OpaqueTypeMetadata2;
  v290 = (ValueMetadata *)v55;
  uint64_t v198 = v55;
  uint64_t v195 = v59;
  uint64_t v196 = v56;
  uint64_t v291 = v56;
  uint64_t v292 = v59;
  uint64_t v60 = v59;
  uint64_t v61 = swift_getOpaqueTypeMetadata2();
  uint64_t v216 = *(void *)(v61 - 8);
  __chkstk_darwin(v61, v62);
  v241 = (char *)&v182 - v63;
  uint64_t v289 = OpaqueTypeMetadata2;
  v290 = (ValueMetadata *)v55;
  uint64_t v291 = v56;
  uint64_t v292 = v60;
  uint64_t v64 = swift_getOpaqueTypeConformance2();
  unint64_t v65 = sub_100026D98();
  uint64_t v289 = v61;
  v290 = &type metadata for PromotionalAssetsContentView;
  uint64_t v203 = v61;
  uint64_t v291 = v64;
  uint64_t v292 = v65;
  uint64_t v66 = v64;
  uint64_t v199 = v64;
  unint64_t v197 = v65;
  uint64_t v210 = swift_getOpaqueTypeMetadata2();
  uint64_t v215 = *(void *)(v210 - 8);
  __chkstk_darwin(v210, v210);
  v239 = (char *)&v182 - v67;
  uint64_t v68 = type metadata accessor for ModifiedContent();
  uint64_t v217 = *(void *)(v68 - 8);
  __chkstk_darwin(v68, v69);
  v240 = (char *)&v182 - v70;
  uint64_t v208 = v68;
  uint64_t v71 = type metadata accessor for ModifiedContent();
  uint64_t v214 = v71;
  uint64_t v221 = *(void *)(v71 - 8);
  __chkstk_darwin(v71, v72);
  long long v209 = (char *)&v182 - v73;
  uint64_t v289 = v61;
  v290 = &type metadata for PromotionalAssetsContentView;
  uint64_t v291 = v66;
  uint64_t v292 = v65;
  uint64_t v204 = swift_getOpaqueTypeConformance2();
  uint64_t v271 = v204;
  v272 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v207 = swift_getWitnessTable();
  uint64_t v269 = v207;
  v270 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v74 = swift_getWitnessTable();
  uint64_t v213 = v74;
  unint64_t v212 = sub_10009D964();
  uint64_t v289 = v71;
  v290 = (ValueMetadata *)v244;
  uint64_t v291 = v74;
  uint64_t v292 = v212;
  uint64_t v75 = swift_getOpaqueTypeMetadata2();
  uint64_t v219 = *(void *)(v75 - 8);
  __chkstk_darwin(v75, v76);
  v242 = (char *)&v182 - v77;
  type metadata accessor for AccessibilityAttachmentModifier();
  uint64_t v220 = v75;
  uint64_t v78 = type metadata accessor for ModifiedContent();
  uint64_t v225 = *(void *)(v78 - 8);
  __chkstk_darwin(v78, v79);
  v222 = (char *)&v182 - v80;
  type metadata accessor for _TaskModifier();
  uint64_t v226 = v78;
  uint64_t v81 = type metadata accessor for ModifiedContent();
  uint64_t v227 = *(void *)(v81 - 8);
  uint64_t v228 = v81;
  __chkstk_darwin(v81, v82);
  v223 = (char *)&v182 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v84, v85);
  v224 = (char *)&v182 - v86;
  uint64_t v87 = v249;
  uint64_t v262 = v249;
  uint64_t v263 = v255;
  uint64_t v88 = v248;
  uint64_t v264 = v248;
  long long v89 = v190;
  NavigationStack.init<>(root:)();
  unint64_t v194 = sub_100131D68();
  uint64_t v90 = v252;
  uint64_t v91 = (uint64_t)v250;
  uint64_t v92 = v253;
  (*(void (**)(char *, void, uint64_t))(v252 + 104))(v250, enum case for CoordinateSpace.local(_:), v253);
  uint64_t v93 = v183;
  sub_1000B0F88((uint64_t)&type metadata for EventViewHeightPreferenceKey, v91, (uint64_t)sub_10009FF94, 0, v183, v182, (uint64_t)v237);
  (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v91, v92);
  (*(void (**)(char *, uint64_t))(v246 + 8))(v89, v93);
  uint64_t v94 = v254;
  uint64_t v252 = *(void *)(v254 + 16);
  uint64_t v246 = v254 + 16;
  char v95 = v247;
  uint64_t v96 = v88;
  uint64_t v97 = v243;
  ((void (*)(char *, uint64_t, uint64_t))v252)(v247, v88, v243);
  uint64_t v98 = *(unsigned __int8 *)(v94 + 80);
  v251 += (v98 + 32) & ~v98;
  uint64_t v99 = (v98 + 32) & ~v98;
  uint64_t v253 = v99;
  v250 = (char *)(v98 | 7);
  uint64_t v100 = swift_allocObject();
  uint64_t v101 = v255;
  *(void *)(v100 + 16) = v87;
  *(void *)(v100 + 24) = v101;
  int64x2_t v102 = *(void (**)(uint64_t, char *, uint64_t))(v94 + 32);
  uint64_t v254 = v94 + 32;
  v102(v100 + v99, v95, v97);
  v245 = v102;
  sub_1001336F8(&qword_1001A7BE8, type metadata accessor for CGSize);
  long long v103 = v200;
  uint64_t v104 = v186;
  uint64_t v105 = v237;
  View.onPreferenceChange<A>(_:perform:)();
  swift_release();
  (*(void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(v206 + 8))(v105, v104);
  sub_100131DD8();
  uint64_t v106 = v201;
  uint64_t v107 = v187;
  sub_1000B1184();
  (*(void (**)(char *, uint64_t))(v205 + 8))(v103, v107);
  char v108 = v95;
  char v109 = v95;
  uint64_t v110 = v243;
  ((void (*)(char *, uint64_t, uint64_t))v252)(v109, v88, v243);
  uint64_t v111 = swift_allocObject();
  uint64_t v112 = v249;
  uint64_t v113 = v255;
  *(void *)(v111 + 16) = v249;
  *(void *)(v111 + 24) = v113;
  v102(v111 + v253, v108, v110);
  sub_10008E990();
  uint64_t v114 = v189;
  View.onPreferenceChange<A>(_:perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v234 + 8))(v106, v114);
  v237 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter;
  sub_10012564C(v110, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  uint64_t v115 = v112;
  uint64_t v260 = v112;
  uint64_t v261 = v113;
  swift_getKeyPath();
  type metadata accessor for EventViewModel();
  uint64_t v234 = swift_getWitnessTable();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  long long v116 = v247;
  ((void (*)(char *, uint64_t, uint64_t))v252)(v247, v96, v110);
  uint64_t v117 = swift_allocObject();
  uint64_t v118 = v255;
  *(void *)(v117 + 16) = v115;
  *(void *)(v117 + 24) = v118;
  v245(v117 + v253, v116, v110);
  swift_checkMetadataState();
  uint64_t v119 = v235;
  uint64_t v120 = v238;
  View.sheet<A>(isPresented:onDismiss:content:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v218 + 8))(v120, v119);
  uint64_t v121 = v110;
  uint64_t v122 = v248;
  sub_10012564C(v110, v237);
  uint64_t v258 = v115;
  uint64_t v123 = v115;
  uint64_t v259 = v118;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  __n128 v124 = v247;
  ((void (*)(char *, uint64_t, uint64_t))v252)(v247, v122, v121);
  uint64_t v125 = swift_allocObject();
  *(void *)(v125 + 16) = v123;
  *(void *)(v125 + 24) = v118;
  v245(v125 + v253, v124, v121);
  uint64_t v126 = v202;
  int64x2_t v127 = v236;
  View.sheet<A>(isPresented:onDismiss:content:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v211 + 8))(v127, v126);
  uint64_t v128 = v248;
  sub_10012564C(v121, v237);
  uint64_t v129 = v123;
  uint64_t v256 = v123;
  uint64_t v130 = v255;
  uint64_t v257 = v255;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  long long v131 = v247;
  ((void (*)(char *, uint64_t, uint64_t))v252)(v247, v128, v121);
  uint64_t v132 = swift_allocObject();
  *(void *)(v132 + 16) = v129;
  *(void *)(v132 + 24) = v130;
  long long v133 = v131;
  __n128 v134 = v131;
  uint64_t v135 = v121;
  v245(v132 + v253, v133, v121);
  uint64_t v136 = v203;
  int64x2_t v137 = v241;
  View.sheet<A>(isPresented:onDismiss:content:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v216 + 8))(v137, v136);
  long long v138 = v134;
  long long v139 = v134;
  uint64_t v140 = v248;
  long long v141 = (void (*)(char *, uint64_t, uint64_t))v252;
  ((void (*)(char *, uint64_t, uint64_t))v252)(v139, v248, v121);
  uint64_t v142 = swift_allocObject();
  uint64_t v143 = v255;
  *(void *)(v142 + 16) = v249;
  *(void *)(v142 + 24) = v143;
  __n128 v144 = v245;
  v245(v142 + v253, v138, v121);
  long long v145 = v239;
  uint64_t v146 = v210;
  View.onAppear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v215 + 8))(v145, v146);
  int64x2_t v147 = v247;
  v141(v247, v140, v121);
  uint64_t v148 = swift_allocObject();
  uint64_t v149 = v249;
  uint64_t v150 = v255;
  *(void *)(v148 + 16) = v249;
  *(void *)(v148 + 24) = v150;
  long long v151 = v147;
  v144(v148 + v253, v147, v135);
  uint64_t v152 = v208;
  long long v153 = v209;
  __n128 v154 = v240;
  View.onDisappear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v217 + 8))(v154, v152);
  uint64_t v155 = v248;
  uint64_t v156 = v229;
  sub_100026824(v229);
  ((void (*)(char *, uint64_t, uint64_t))v252)(v151, v155, v135);
  uint64_t v157 = swift_allocObject();
  *(void *)(v157 + 16) = v149;
  *(void *)(v157 + 24) = v150;
  uint64_t v158 = v135;
  v245(v157 + v253, v151, v135);
  uint64_t v160 = v213;
  uint64_t v159 = v214;
  uint64_t v161 = (ValueMetadata *)v244;
  unint64_t v162 = v212;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  sub_10000ACE0(v156, &qword_1001A5478);
  (*(void (**)(char *, uint64_t))(v221 + 8))(v153, v159);
  if (qword_1001A4F08 != -1) {
    swift_once();
  }
  uint64_t v289 = v159;
  v290 = v161;
  uint64_t v291 = v160;
  uint64_t v292 = v162;
  uint64_t v163 = swift_getOpaqueTypeConformance2();
  uint64_t v164 = v222;
  uint64_t v165 = v220;
  uint64_t v166 = v242;
  View.accessibilityIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v219 + 8))(v166, v165);
  uint64_t v167 = v247;
  ((void (*)(char *, uint64_t, uint64_t))v252)(v247, v248, v158);
  uint64_t v168 = swift_allocObject();
  uint64_t v169 = v255;
  *(void *)(v168 + 16) = v249;
  *(void *)(v168 + 24) = v169;
  v245(v168 + v253, v167, v158);
  uint64_t v170 = sub_1001336F8((unint64_t *)&qword_1001A68E8, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  uint64_t v267 = v163;
  uint64_t v268 = v170;
  uint64_t v171 = v226;
  uint64_t v172 = swift_getWitnessTable();
  uint64_t v173 = v230;
  static TaskPriority.userInitiated.getter();
  char v174 = v223;
  View.task(priority:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v231 + 8))(v173, v232);
  (*(void (**)(char *, uint64_t))(v225 + 8))(v164, v171);
  uint64_t v175 = sub_1001336F8(&qword_1001A5430, (void (*)(uint64_t))&type metadata accessor for _TaskModifier);
  uint64_t v265 = v172;
  uint64_t v266 = v175;
  uint64_t v176 = v228;
  swift_getWitnessTable();
  uint64_t v177 = v227;
  uint64_t v178 = *(void (**)(char *, char *, uint64_t))(v227 + 16);
  uint64_t v179 = v224;
  v178(v224, v174, v176);
  v180 = *(void (**)(char *, uint64_t))(v177 + 8);
  v180(v174, v176);
  v178(v233, v179, v176);
  return ((uint64_t (*)(char *, uint64_t))v180)(v179, v176);
}

uint64_t sub_100129040@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v94 = a1;
  uint64_t v101 = a4;
  uint64_t v100 = sub_10000570C(&qword_1001A5478);
  __chkstk_darwin(v100, v6);
  uint64_t v99 = (uint64_t)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ColorScheme();
  uint64_t v97 = *(void *)(v8 - 8);
  uint64_t v98 = v8;
  __chkstk_darwin(v8, v9);
  uint64_t v96 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  uint64_t v95 = (uint64_t)&v80 - v13;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for HeroImage();
  type metadata accessor for HeroImageLandscape();
  type metadata accessor for ModifiedContent();
  uint64_t v105 = type metadata accessor for _ConditionalContent();
  uint64_t v103 = a2;
  uint64_t v83 = a3;
  type metadata accessor for EventDetailModule();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  sub_100004A58(&qword_1001AC900);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for HStack();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  sub_100004A58(&qword_1001AC908);
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001AC910);
  type metadata accessor for ModifiedContent();
  uint64_t v109 = sub_100004A58(&qword_1001A9748);
  uint64_t v110 = type metadata accessor for GuideModule();
  uint64_t v111 = sub_100004A58(&qword_1001AC918);
  type metadata accessor for LineupModule();
  type metadata accessor for ModifiedContent();
  uint64_t v112 = type metadata accessor for Optional();
  uint64_t v113 = sub_100004A58(&qword_1001AC920);
  uint64_t v114 = sub_100004A58(&qword_1001AC928);
  swift_getTupleTypeMetadata();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001A6298);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  swift_getWitnessTable();
  type metadata accessor for ObservableScrollView();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v14 = type metadata accessor for ZStack();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v80 - v17;
  uint64_t v19 = type metadata accessor for ModifiedContent();
  uint64_t v82 = v19;
  uint64_t v84 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v20);
  int64x2_t v102 = (char *)&v80 - v21;
  v108[19] = swift_getWitnessTable();
  _OWORD v108[20] = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  uint64_t v105 = swift_getWitnessTable();
  uint64_t v109 = v19;
  uint64_t v110 = v105;
  swift_getOpaqueTypeMetadata2();
  sub_100004A58(&qword_1001AC930);
  uint64_t v22 = type metadata accessor for ModifiedContent();
  uint64_t v85 = *(void *)(v22 - 8);
  __chkstk_darwin(v22, v22);
  uint64_t v81 = (uint64_t)&v80 - v23;
  uint64_t v86 = v24;
  uint64_t v25 = type metadata accessor for ModifiedContent();
  uint64_t v90 = *(void *)(v25 - 8);
  __chkstk_darwin(v25, v26);
  uint64_t v87 = (char *)&v80 - v27;
  sub_100004A58(&qword_1001A8878);
  uint64_t v91 = v25;
  uint64_t v28 = type metadata accessor for ModifiedContent();
  uint64_t v92 = *(void *)(v28 - 8);
  uint64_t v93 = v28;
  __chkstk_darwin(v28, v29);
  uint64_t v88 = (char *)&v80 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31, v32);
  long long v89 = (char *)&v80 - v33;
  static Alignment.top.getter();
  uint64_t v34 = v83;
  v108[8] = v103;
  v108[9] = v83;
  uint64_t v35 = v94;
  v108[10] = v94;
  ZStack.init(alignment:content:)();
  uint64_t WitnessTable = type metadata accessor for EventView();
  uint64_t v36 = v35;
  sub_10012564C(WitnessTable, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_100120810();
  swift_release();
  static SafeAreaRegions.all.getter();
  View.ignoresSafeArea(_:edges:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  uint64_t v38 = *(void *)(v35 + 48);
  uint64_t v37 = *(void *)(v35 + 56);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v39 = static MainActor.shared.getter();
  uint64_t v40 = (void *)swift_allocObject();
  v40[2] = v39;
  v40[3] = &protocol witness table for MainActor;
  void v40[4] = v38;
  v40[5] = v37;
  swift_retain();
  uint64_t v41 = static MainActor.shared.getter();
  uint64_t v42 = (void *)swift_allocObject();
  _OWORD v42[2] = v41;
  void v42[3] = &protocol witness table for MainActor;
  v42[4] = v38;
  v42[5] = v37;
  Binding.init(get:set:)();
  uint64_t v43 = v109;
  uint64_t v44 = v110;
  LODWORD(v41) = v111;
  v108[2] = v103;
  v108[3] = v34;
  v108[4] = v36;
  v107[2] = v103;
  v107[3] = v34;
  v107[4] = v36;
  v106[2] = v103;
  v106[3] = v34;
  v106[4] = v36;
  uint64_t v45 = sub_10000570C(&qword_1001AC9C8);
  uint64_t v46 = sub_10000570C(&qword_1001A8968);
  uint64_t v47 = sub_10000570C(&qword_1001AC9D0);
  unint64_t v48 = sub_100132988();
  unint64_t v49 = sub_100132A38();
  unint64_t v50 = sub_100132AB4();
  uint64_t v79 = v48;
  uint64_t v51 = v81;
  uint64_t v52 = v82;
  int v53 = v41;
  uint64_t v54 = v102;
  sub_1000B122C(v43, v44, v53, (uint64_t)sub_100132964, (uint64_t)v108, (void (*)(uint64_t))sub_100132970, (uint64_t)v107, (uint64_t)sub_10013297C, v81, (uint64_t)v106, v82, v45, v46, v47, v105, v79, v49, v50);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v84 + 8))(v54, v52);
  uint64_t v55 = v95;
  sub_100026F48(v95);
  uint64_t v57 = v96;
  uint64_t v56 = v97;
  uint64_t v58 = v98;
  (*(void (**)(char *, void, uint64_t))(v97 + 104))(v96, enum case for ColorScheme.light(_:), v98);
  LOBYTE(v54) = static ColorScheme.== infix(_:_:)();
  uint64_t v59 = *(void (**)(char *, uint64_t))(v56 + 8);
  v59(v57, v58);
  v59((char *)v55, v58);
  if (v54)
  {
    if (qword_1001A4E38 != -1) {
      swift_once();
    }
    uint64_t v60 = &qword_1001B74D8;
  }
  else
  {
    if (qword_1001A4E30 != -1) {
      swift_once();
    }
    uint64_t v60 = &qword_1001B74D0;
  }
  uint64_t v61 = *v60;
  swift_retain();
  v108[18] = v61;
  static Edge.Set.all.getter();
  uint64_t v109 = v52;
  uint64_t v110 = v105;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v63 = sub_10000A780(&qword_1001AC938, &qword_1001AC930);
  v108[16] = OpaqueTypeConformance2;
  v108[17] = v63;
  uint64_t v64 = v86;
  uint64_t v65 = swift_getWitnessTable();
  uint64_t v66 = v87;
  View.background<A>(_:ignoresSafeAreaEdges:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v51, v64);
  static Animation.easeInOut.getter();
  uint64_t v67 = v99;
  sub_100026824(v99);
  uint64_t v68 = sub_10000A780(&qword_1001A6290, &qword_1001A6298);
  v108[14] = v65;
  v108[15] = v68;
  uint64_t v69 = v91;
  uint64_t v70 = swift_getWitnessTable();
  sub_10009D964();
  uint64_t v71 = v88;
  View.animation<A>(_:value:)();
  swift_release();
  sub_10000ACE0(v67, &qword_1001A5478);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v66, v69);
  uint64_t v72 = sub_10000A780(&qword_1001A8888, &qword_1001A8878);
  v108[12] = v70;
  v108[13] = v72;
  uint64_t v73 = v93;
  swift_getWitnessTable();
  uint64_t v74 = v92;
  uint64_t v75 = *(void (**)(char *, char *, uint64_t))(v92 + 16);
  uint64_t v76 = v89;
  v75(v89, v71, v73);
  uint64_t v77 = *(void (**)(char *, uint64_t))(v74 + 8);
  v77(v71, v73);
  v75(v101, v76, v73);
  return ((uint64_t (*)(char *, uint64_t))v77)(v76, v73);
}

uint64_t sub_100129EE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v122 = a1;
  uint64_t v114 = a4;
  uint64_t v123 = (void *)type metadata accessor for EventView();
  uint64_t v113 = *(v123 - 1);
  uint64_t v111 = *(void *)(v113 + 64);
  __chkstk_darwin(v123, v6);
  uint64_t v112 = (char *)&v94 - v7;
  type metadata accessor for EventDetailModule();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  sub_100004A58(&qword_1001AC900);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for HStack();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  sub_100004A58(&qword_1001AC908);
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001AC910);
  type metadata accessor for ModifiedContent();
  *(void *)&long long v144 = sub_100004A58(&qword_1001A9748);
  *((void *)&v144 + 1) = type metadata accessor for GuideModule();
  *(void *)&long long v145 = sub_100004A58(&qword_1001AC918);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for LineupModule();
  type metadata accessor for ModifiedContent();
  *((void *)&v145 + 1) = type metadata accessor for Optional();
  *(void *)&long long v146 = sub_100004A58(&qword_1001AC920);
  *((void *)&v146 + 1) = sub_100004A58(&qword_1001AC928);
  swift_getTupleTypeMetadata();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001A6298);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for VStack();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v106 = v8;
  uint64_t v9 = type metadata accessor for ObservableScrollView();
  uint64_t v109 = *(void *)(v9 - 8);
  uint64_t v110 = v9;
  __chkstk_darwin(v9, v10);
  uint64_t v108 = (uint64_t)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  uint64_t v107 = (char *)&v94 - v14;
  uint64_t v15 = *(void *)(a2 - 8);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t v20 = type metadata accessor for Optional();
  __chkstk_darwin(v20 - 8, v21);
  uint64_t v102 = (uint64_t)&v94 - v22;
  swift_getAssociatedConformanceWitness();
  uint64_t v23 = type metadata accessor for HeroImage();
  uint64_t v101 = *(void *)(v23 - 8);
  __chkstk_darwin(v23, v24);
  uint64_t v26 = (char *)&v94 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27, v28);
  uint64_t v100 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v94 - v29);
  uint64_t v119 = a2;
  uint64_t v120 = a3;
  uint64_t v115 = type metadata accessor for HeroImageLandscape();
  uint64_t v116 = type metadata accessor for ModifiedContent();
  uint64_t v117 = v23;
  uint64_t v30 = type metadata accessor for _ConditionalContent();
  uint64_t v103 = *(void *)(v30 - 8);
  uint64_t v104 = v30;
  __chkstk_darwin(v30, v31);
  uint64_t v118 = (char *)&v94 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33, v34);
  uint64_t v121 = (char *)&v94 - v35;
  sub_10012564C((uint64_t)v123, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  BOOL v36 = sub_1001202A0();
  swift_release();
  if (v36)
  {
    uint64_t v99 = (char *)type metadata accessor for HeroImageModel();
    uint64_t v98 = Namespace.wrappedValue.getter();
    uint64_t v37 = (void (*)(void, void))v123;
    sub_10012564C((uint64_t)v123, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    sub_10011F690(v102);
    swift_release();
    uint64_t v38 = sub_10012564C((uint64_t)v37, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
    __chkstk_darwin(v38, v39);
    uint64_t v41 = v119;
    uint64_t v40 = v120;
    *(&v94 - 2) = v119;
    *(&v94 - 1) = v40;
    swift_getKeyPath();
    type metadata accessor for EventViewModel();
    swift_getWitnessTable();
    ObservedObject.Wrapper.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v97 = *((void *)&v144 + 1);
    uint64_t v42 = v144;
    double v43 = *(double *)&v145;
    uint64_t v44 = sub_10012564C((uint64_t)v37, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
    __chkstk_darwin(v44, v45);
    *(&v94 - 2) = v41;
    *(&v94 - 1) = v40;
    swift_getKeyPath();
    ObservedObject.Wrapper.subscript.getter();
    swift_release();
    swift_release();
    sub_1000C5BD4(v98, v102, v42, v97, v138, *((uint64_t *)&v138 + 1), v43, v139);
    sub_1000F5FD4((uint64_t)v26);
    uint64_t v46 = v117;
    swift_getWitnessTable();
    unint64_t v48 = v100;
    uint64_t v47 = v101;
    unint64_t v49 = *(void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), char *, uint64_t))(v101 + 16);
    v49(v100, v26, v46);
    unint64_t v50 = *(void (**)(char *, uint64_t))(v47 + 8);
    v50(v26, v46);
    v49((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v26, (char *)v48, v46);
    uint64_t v124 = swift_getWitnessTable();
    uint64_t v125 = &protocol witness table for _FrameLayout;
    swift_getWitnessTable();
    sub_10012222C((uint64_t)v26, v46);
    v50(v26, v46);
    uint64_t v51 = ((uint64_t (*)(uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))v50)(v48, v46);
  }
  else
  {
    uint64_t v53 = v119;
    uint64_t v54 = v120;
    uint64_t v102 = type metadata accessor for HeroImageLandscapeModel();
    uint64_t v101 = Namespace.wrappedValue.getter();
    uint64_t v55 = (void (*)(void, void))v123;
    uint64_t v100 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter;
    uint64_t v56 = sub_10012564C((uint64_t)v123, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v19, v56 + *(void *)(*(void *)v56 + 160), v53);
    swift_release();
    sub_10012564C((uint64_t)v55, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    double v57 = sub_1001208A4();
    swift_release();
    uint64_t v58 = sub_10012564C((uint64_t)v55, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
    uint64_t v99 = v19;
    __chkstk_darwin(v58, v59);
    *(&v94 - 2) = v53;
    *(&v94 - 1) = v54;
    swift_getKeyPath();
    type metadata accessor for EventViewModel();
    swift_getWitnessTable();
    ObservedObject.Wrapper.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v97 = *((void *)&v138 + 1);
    uint64_t v98 = v138;
    double v60 = v139;
    uint64_t v61 = sub_10012564C((uint64_t)v55, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
    __chkstk_darwin(v61, v62);
    *(&v94 - 2) = v53;
    *(&v94 - 1) = v54;
    swift_getKeyPath();
    ObservedObject.Wrapper.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v95 = *((void *)&v132 + 1);
    uint64_t v96 = v132;
    char v63 = LOBYTE(v133);
    uint64_t v64 = sub_10012564C((uint64_t)v55, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
    __chkstk_darwin(v64, v65);
    *(&v94 - 2) = v53;
    *(&v94 - 1) = v54;
    swift_getKeyPath();
    ObservedObject.Wrapper.subscript.getter();
    swift_release();
    swift_release();
    v148[0] = v144;
    v148[1] = v145;
    v148[2] = v146;
    uint64_t v66 = sub_10007C1FC(v101, (uint64_t)v99, v98, v97, v96, v95, v63, v148, v57, v60);
    *(void *)&long long v144 = sub_10011B878(v66);
    *((void *)&v144 + 1) = v67;
    sub_10012564C((uint64_t)v55, v100);
    sub_1001208A4();
    swift_release();
    static Alignment.top.getter();
    uint64_t v68 = swift_getWitnessTable();
    View.frame(width:height:alignment:)();
    swift_release();
    long long v132 = v138;
    double v133 = v139;
    char v134 = v140;
    uint64_t v135 = v141;
    char v136 = v142;
    long long v137 = v143;
    uint64_t v130 = v68;
    long long v131 = &protocol witness table for _FrameLayout;
    uint64_t v69 = v116;
    swift_getWitnessTable();
    uint64_t v70 = *(void (**)(long long *, long long *, uint64_t))(*(void *)(v69 - 8) + 16);
    v70(&v144, &v132, v69);
    swift_release();
    long long v132 = v144;
    double v133 = *(double *)&v145;
    char v134 = BYTE8(v145);
    uint64_t v135 = v146;
    char v136 = BYTE8(v146);
    long long v137 = v147;
    v70(&v138, &v132, v69);
    long long v132 = v138;
    double v133 = v139;
    char v134 = v140;
    uint64_t v135 = v141;
    char v136 = v142;
    long long v137 = v143;
    uint64_t v71 = v117;
    swift_getWitnessTable();
    sub_100122324((uint64_t)&v132, v71, v69);
    swift_release();
    uint64_t v51 = swift_release();
  }
  __n128 v72 = __chkstk_darwin(v51, v52);
  uint64_t v73 = v119;
  uint64_t v74 = v120;
  *(&v94 - 4) = v119;
  *(&v94 - 3) = v74;
  uint64_t v75 = (void (*)(void, void))v123;
  *(&v94 - 2) = v122;
  uint64_t v77 = v112;
  uint64_t v76 = v113;
  (*(void (**)(char *, __n128))(v113 + 16))(v112, v72);
  unint64_t v78 = (*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80);
  uint64_t v79 = swift_allocObject();
  *(void *)(v79 + 16) = v73;
  *(void *)(v79 + 24) = v74;
  (*(void (**)(unint64_t, char *, void (*)(void, void)))(v76 + 32))(v79 + v78, v77, v75);
  char v80 = static Axis.Set.vertical.getter();
  uint64_t v81 = v108;
  sub_1000C3FB0(v80, 0, (void (*)(uint64_t))sub_100132D58, (uint64_t)sub_100132D68, v79, v108);
  uint64_t v82 = v110;
  uint64_t v122 = swift_getWitnessTable();
  uint64_t v83 = v109;
  uint64_t v84 = *(void (**)(char *, uint64_t, uint64_t))(v109 + 16);
  uint64_t v85 = v107;
  v84(v107, v81, v82);
  uint64_t v123 = *(void **)(v83 + 8);
  ((void (*)(uint64_t, uint64_t))v123)(v81, v82);
  uint64_t v86 = v103;
  uint64_t v87 = v104;
  uint64_t v88 = v118;
  (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v118, v121, v104);
  *(void *)&long long v144 = v88;
  v84((char *)v81, (uint64_t)v85, v82);
  *((void *)&v144 + 1) = v81;
  *(void *)&long long v138 = v87;
  *((void *)&v138 + 1) = v82;
  uint64_t v89 = swift_getWitnessTable();
  uint64_t v128 = swift_getWitnessTable();
  uint64_t v129 = &protocol witness table for _FrameLayout;
  uint64_t v90 = swift_getWitnessTable();
  uint64_t v126 = v89;
  uint64_t v127 = v90;
  *(void *)&long long v132 = swift_getWitnessTable();
  *((void *)&v132 + 1) = v122;
  sub_1001231A4((uint64_t)&v144, 2uLL, (uint64_t)&v138);
  uint64_t v91 = (void (*)(uint64_t, uint64_t))v123;
  ((void (*)(char *, uint64_t))v123)(v85, v82);
  uint64_t v92 = *(void (**)(char *, uint64_t))(v86 + 8);
  v92(v121, v87);
  v91(v81, v82);
  return ((uint64_t (*)(char *, uint64_t))v92)(v118, v87);
}

void sub_10012B064(double *a1@<X8>)
{
  *a1 = sub_10011EC54();
}

uint64_t sub_10012B090()
{
  return sub_10011EC68();
}

void sub_10012B0B8(double *a1@<X8>)
{
  *a1 = sub_10011EE60();
}

uint64_t sub_10012B0E4()
{
  return sub_10011EE74();
}

uint64_t sub_10012B10C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10011ECA4();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10012B13C()
{
  return sub_10011ECB8();
}

uint64_t sub_10012B164@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v20 = a4;
  type metadata accessor for EventDetailModule();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  sub_100004A58(&qword_1001AC900);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for HStack();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  sub_100004A58(&qword_1001AC908);
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001AC910);
  type metadata accessor for ModifiedContent();
  uint64_t v24 = sub_100004A58(&qword_1001A9748);
  uint64_t v25 = type metadata accessor for GuideModule();
  uint64_t v26 = sub_100004A58(&qword_1001AC918);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for LineupModule();
  type metadata accessor for ModifiedContent();
  uint64_t v27 = type metadata accessor for Optional();
  uint64_t v28 = sub_100004A58(&qword_1001AC920);
  uint64_t v29 = sub_100004A58(&qword_1001AC928);
  swift_getTupleTypeMetadata();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001A6298);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v7 = type metadata accessor for VStack();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v19 - v14;
  static HorizontalAlignment.leading.getter();
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  uint64_t v23 = a1;
  VStack.init(alignment:spacing:content:)();
  swift_getWitnessTable();
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v16(v15, v11, v7);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v11, v7);
  v16(v20, v15, v7);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, v7);
}

uint64_t sub_10012B620@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v135 = a1;
  uint64_t v133 = a4;
  uint64_t v6 = type metadata accessor for ColorScheme();
  uint64_t v131 = *(void *)(v6 - 8);
  uint64_t v132 = v6;
  __chkstk_darwin(v6, v7);
  uint64_t v130 = (char *)v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  uint64_t v129 = (uint64_t)v104 - v11;
  uint64_t v150 = sub_100004A58(&qword_1001A9748);
  uint64_t v151 = type metadata accessor for GuideModule();
  uint64_t v152 = sub_100004A58(&qword_1001AC918);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for LineupModule();
  type metadata accessor for ModifiedContent();
  uint64_t v153 = type metadata accessor for Optional();
  uint64_t v154 = sub_100004A58(&qword_1001AC920);
  uint64_t v155 = sub_100004A58(&qword_1001AC928);
  swift_getTupleTypeMetadata();
  uint64_t v118 = type metadata accessor for TupleView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for VStack();
  uint64_t v120 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v12);
  uint64_t v116 = (char *)v104 - v13;
  uint64_t v121 = v14;
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v123 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v16);
  double v139 = (char *)v104 - v17;
  sub_100004A58(&qword_1001A6298);
  uint64_t v124 = v15;
  uint64_t v18 = type metadata accessor for ModifiedContent();
  uint64_t v127 = *(void *)(v18 - 8);
  uint64_t v128 = v18;
  __chkstk_darwin(v18, v19);
  uint64_t v126 = (char *)v104 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v22);
  uint64_t v122 = (char *)v104 - v23;
  __chkstk_darwin(v24, v25);
  uint64_t v125 = (char *)v104 - v26;
  uint64_t v106 = a2;
  uint64_t v137 = type metadata accessor for EventView();
  uint64_t v114 = *(void *)(v137 - 8);
  uint64_t v115 = *(void *)(v114 + 64);
  __chkstk_darwin(v137, v27);
  uint64_t v113 = (char *)v104 - v28;
  uint64_t v112 = type metadata accessor for CoordinateSpace();
  uint64_t v29 = *(void *)(v112 - 8);
  __chkstk_darwin(v112, v30);
  uint64_t v111 = (char *)v104 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = a3;
  type metadata accessor for EventDetailModule();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  sub_100004A58(&qword_1001AC900);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for HStack();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _ConditionalContent();
  uint64_t v32 = type metadata accessor for Group();
  uint64_t v108 = *(void *)(v32 - 8);
  __chkstk_darwin(v32, v33);
  uint64_t v35 = (char *)v104 - v34;
  sub_100004A58(&qword_1001AC908);
  uint64_t v36 = type metadata accessor for ModifiedContent();
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v109 = v36;
  uint64_t v110 = v37;
  __chkstk_darwin(v36, v38);
  char v134 = (void (*)(void, void))((char *)v104 - v39);
  sub_100004A58(&qword_1001AC910);
  uint64_t v138 = type metadata accessor for ModifiedContent();
  uint64_t v140 = *(void *)(v138 - 8);
  __chkstk_darwin(v138, v40);
  uint64_t v119 = (char *)v104 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42, v43);
  uint64_t v107 = (char *)v104 - v44;
  __chkstk_darwin(v45, v46);
  char v136 = (char *)v104 - v47;
  uint64_t v48 = v106;
  uint64_t v144 = v106;
  uint64_t v145 = a3;
  uint64_t v49 = v135;
  uint64_t v146 = v135;
  uint64_t v50 = swift_getWitnessTable();
  v149[13] = swift_getWitnessTable();
  v149[14] = &protocol witness table for _FrameLayout;
  v104[1] = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v51 = swift_getWitnessTable();
  v149[11] = v50;
  v149[12] = v51;
  uint64_t v52 = swift_getWitnessTable();
  Group<A>.init(content:)();
  v149[10] = v52;
  uint64_t v53 = swift_getWitnessTable();
  v104[0] = sub_100132E60();
  uint64_t v54 = v29;
  uint64_t v55 = *(void (**)(char *, void, uint64_t))(v29 + 104);
  uint64_t v57 = (uint64_t)v111;
  uint64_t v56 = v112;
  v55(v111, enum case for CoordinateSpace.local(_:), v112);
  sub_1000B0F88((uint64_t)&type metadata for HeaderContentHeightPreferenceKey, v57, (uint64_t)sub_100074E78, 0, v32, v53, (uint64_t)v134);
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v57, v56);
  (*(void (**)(char *, uint64_t))(v108 + 8))(v35, v32);
  uint64_t v59 = v113;
  uint64_t v58 = v114;
  uint64_t v60 = v137;
  (*(void (**)(char *, uint64_t, uint64_t))(v114 + 16))(v113, v49, v137);
  unint64_t v61 = (*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
  uint64_t v62 = swift_allocObject();
  uint64_t v63 = v105;
  *(void *)(v62 + 16) = v48;
  *(void *)(v62 + 24) = v63;
  (*(void (**)(unint64_t, char *, uint64_t))(v58 + 32))(v62 + v61, v59, v60);
  uint64_t v64 = sub_10000A780(&qword_1001ACA00, &qword_1001AC908);
  v149[8] = v53;
  v149[9] = v64;
  uint64_t v65 = v109;
  uint64_t v66 = swift_getWitnessTable();
  sub_1001336F8(&qword_1001A7BE8, type metadata accessor for CGSize);
  uint64_t v67 = v107;
  uint64_t v68 = v116;
  uint64_t v69 = v134;
  View.onPreferenceChange<A>(_:perform:)();
  swift_release();
  uint64_t v70 = v135;
  (*(void (**)(void, uint64_t))(v110 + 8))(v69, v65);
  uint64_t v71 = sub_10000A780(&qword_1001ACA08, &qword_1001AC910);
  v149[6] = v66;
  v149[7] = v71;
  uint64_t v72 = v138;
  uint64_t v115 = swift_getWitnessTable();
  uint64_t v73 = v140;
  uint64_t v113 = *(char **)(v140 + 16);
  uint64_t v114 = v140 + 16;
  ((void (*)(char *, char *, uint64_t))v113)(v136, v67, v72);
  uint64_t v74 = *(void (**)(void, void))(v73 + 8);
  uint64_t v140 = v73 + 8;
  char v134 = v74;
  v74(v67, v72);
  static HorizontalAlignment.leading.getter();
  uint64_t v141 = v48;
  uint64_t v142 = v63;
  uint64_t v143 = v70;
  VStack.init(alignment:spacing:content:)();
  LOBYTE(v67) = static Edge.Set.leading.getter();
  unsigned __int8 v75 = static Edge.Set.trailing.getter();
  unsigned __int8 v76 = static Edge.Set.bottom.getter();
  Edge.Set.init(rawValue:)();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v67) {
    Edge.Set.init(rawValue:)();
  }
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v75) {
    Edge.Set.init(rawValue:)();
  }
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v76) {
    Edge.Set.init(rawValue:)();
  }
  sub_10012564C(v137, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10011EFF8();
  swift_release();
  uint64_t v77 = v121;
  uint64_t v78 = swift_getWitnessTable();
  sub_1000B1148();
  (*(void (**)(char *, uint64_t))(v120 + 8))(v68, v77);
  uint64_t v79 = v129;
  sub_100026F48(v129);
  uint64_t v81 = v130;
  uint64_t v80 = v131;
  uint64_t v82 = v132;
  (*(void (**)(char *, void, uint64_t))(v131 + 104))(v130, enum case for ColorScheme.light(_:), v132);
  char v83 = static ColorScheme.== infix(_:_:)();
  uint64_t v84 = *(void (**)(char *, uint64_t))(v80 + 8);
  v84(v81, v82);
  v84((char *)v79, v82);
  if (v83)
  {
    if (qword_1001A4E38 != -1) {
      swift_once();
    }
    uint64_t v85 = &qword_1001B74D8;
  }
  else
  {
    if (qword_1001A4E30 != -1) {
      swift_once();
    }
    uint64_t v85 = &qword_1001B74D0;
  }
  uint64_t v86 = *v85;
  swift_retain();
  uint64_t v150 = v86;
  static Edge.Set.all.getter();
  unint64_t v87 = sub_10008EC00();
  v149[4] = v78;
  v149[5] = v87;
  uint64_t v88 = v124;
  uint64_t v89 = swift_getWitnessTable();
  uint64_t v90 = v122;
  uint64_t v91 = v139;
  View.background<A>(_:ignoresSafeAreaEdges:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v123 + 8))(v91, v88);
  uint64_t v92 = sub_10000A780(&qword_1001A6290, &qword_1001A6298);
  v149[2] = v89;
  v149[3] = v92;
  uint64_t v93 = v128;
  uint64_t v137 = swift_getWitnessTable();
  uint64_t v94 = v127;
  uint64_t v95 = *(void (**)(char *, char *, uint64_t))(v127 + 16);
  uint64_t v96 = v125;
  v95(v125, v90, v93);
  double v139 = *(char **)(v94 + 8);
  ((void (*)(char *, uint64_t))v139)(v90, v93);
  uint64_t v97 = v119;
  uint64_t v98 = v136;
  uint64_t v99 = v138;
  ((void (*)(char *, char *, uint64_t))v113)(v119, v136, v138);
  uint64_t v150 = (uint64_t)v97;
  uint64_t v100 = v126;
  v95(v126, v96, v93);
  uint64_t v151 = (uint64_t)v100;
  v149[0] = v99;
  v149[1] = v93;
  uint64_t v147 = v115;
  uint64_t v148 = v137;
  sub_1001231A4((uint64_t)&v150, 2uLL, (uint64_t)v149);
  uint64_t v101 = (void (*)(char *, uint64_t))v139;
  ((void (*)(char *, uint64_t))v139)(v96, v93);
  uint64_t v102 = (uint64_t (*)(char *, uint64_t))v134;
  v134(v98, v99);
  v101(v100, v93);
  return v102(v97, v99);
}

uint64_t sub_10012C648@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v67 = a4;
  sub_100004A58(&qword_1001AC900);
  type metadata accessor for EventDetailModule();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  uint64_t v56 = type metadata accessor for TupleView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = type metadata accessor for HStack();
  uint64_t v58 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v7);
  uint64_t v57 = (char *)&v53 - v8;
  uint64_t v66 = v9;
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v61 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  uint64_t v60 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v14);
  uint64_t v59 = (char *)&v53 - v15;
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  uint64_t v53 = swift_getWitnessTable();
  uint64_t v16 = type metadata accessor for VStack();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  uint64_t v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v22);
  uint64_t v54 = (char *)&v53 - v23;
  uint64_t v62 = v10;
  uint64_t v24 = type metadata accessor for _ConditionalContent();
  uint64_t v64 = *(void *)(v24 - 8);
  uint64_t v65 = v24;
  __chkstk_darwin(v24, v25);
  uint64_t v63 = (char *)&v53 - v26;
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v29 = type metadata accessor for EventView();
  uint64_t v30 = a1;
  sub_10012564C(v29, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  LOBYTE(a1) = sub_1001202A0();
  uint64_t v31 = swift_release();
  if (a1)
  {
    uint64_t v33 = static HorizontalAlignment.center.getter();
    __chkstk_darwin(v33, v34);
    *(&v53 - 4) = v27;
    *(&v53 - 3) = v28;
    *(&v53 - 2) = v30;
    VStack.init(alignment:spacing:content:)();
    swift_getWitnessTable();
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
    uint64_t v36 = v54;
    v35(v54, v20, v16);
    uint64_t v37 = *(void (**)(char *, uint64_t))(v17 + 8);
    v37(v20, v16);
    v35(v20, v36, v16);
    uint64_t v68 = swift_getWitnessTable();
    uint64_t v69 = &protocol witness table for _FrameLayout;
    swift_getWitnessTable();
    uint64_t v38 = v63;
    sub_10012222C((uint64_t)v20, v16);
    v37(v20, v16);
    v37(v36, v16);
  }
  else
  {
    __chkstk_darwin(v31, v32);
    *(&v53 - 4) = v27;
    *(&v53 - 3) = v28;
    *(&v53 - 2) = v30;
    static VerticalAlignment.center.getter();
    uint64_t v39 = v57;
    HStack.init(alignment:spacing:content:)();
    sub_10012564C(v29, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    sub_1001208A4();
    swift_release();
    static Alignment.center.getter();
    uint64_t v40 = v66;
    uint64_t v41 = swift_getWitnessTable();
    uint64_t v42 = (uint64_t)v60;
    View.frame(width:height:alignment:)();
    (*(void (**)(char *, uint64_t))(v58 + 8))(v39, v40);
    uint64_t v74 = v41;
    unsigned __int8 v75 = &protocol witness table for _FrameLayout;
    uint64_t v43 = v62;
    uint64_t v58 = swift_getWitnessTable();
    uint64_t v44 = v61;
    uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 16);
    uint64_t v46 = v59;
    v45(v59, v42, v43);
    uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
    v47(v42, v43);
    v45((char *)v42, (uint64_t)v46, v43);
    swift_getWitnessTable();
    uint64_t v38 = v63;
    sub_100122324(v42, v16, v43);
    v47(v42, v43);
    v47((uint64_t)v46, v43);
  }
  uint64_t v48 = swift_getWitnessTable();
  uint64_t v72 = swift_getWitnessTable();
  uint64_t v73 = &protocol witness table for _FrameLayout;
  uint64_t v49 = swift_getWitnessTable();
  uint64_t v70 = v48;
  uint64_t v71 = v49;
  uint64_t v50 = v65;
  swift_getWitnessTable();
  uint64_t v51 = v64;
  (*(void (**)(uint64_t, char *, uint64_t))(v64 + 16))(v67, v38, v50);
  return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v38, v50);
}

uint64_t sub_10012CE80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v31 = a4;
  uint64_t v6 = *(void *)(a2 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for EventDetailViewModel();
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v30 = (char *)&v28 - v11;
  uint64_t v12 = type metadata accessor for EventDetailModule();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v18);
  uint64_t v29 = (char *)&v28 - v19;
  uint64_t v28 = Namespace.wrappedValue.getter();
  uint64_t v20 = type metadata accessor for EventView();
  uint64_t v21 = sub_10012564C(v20, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v21 + *(void *)(*(void *)v21 + 160), a2);
  swift_release();
  sub_10012564C(v20, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  uint64_t v32 = a2;
  uint64_t v33 = a3;
  swift_getKeyPath();
  type metadata accessor for EventViewModel();
  swift_getWitnessTable();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v22 = v30;
  sub_10004A20C(v28, (uint64_t)v8, v37, (uint64_t)v38, v39, a2, v30);
  sub_1000CDBA4((uint64_t)v22, (uint64_t)v16);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  uint64_t v25 = v29;
  v24(v29, v16, v12);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v13 + 8);
  v26(v16, v12);
  v24(v16, v25, v12);
  uint64_t v38 = v16;
  v36[0] = &type metadata for HeroImagePlaceholder;
  v36[1] = v12;
  unint64_t v34 = sub_1000F72B8();
  uint64_t v35 = WitnessTable;
  sub_1001231A4((uint64_t)&v37, 2uLL, (uint64_t)v36);
  v26(v25, v12);
  return ((uint64_t (*)(char *, uint64_t))v26)(v16, v12);
}

uint64_t sub_10012D228@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v40 = a4;
  uint64_t v6 = *(void *)(a2 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for EventDetailViewModel();
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v36 = (char *)&v33 - v11;
  uint64_t v12 = type metadata accessor for EventDetailModule();
  uint64_t v39 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  uint64_t v35 = (uint64_t)&v33 - v14;
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v37 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v20);
  uint64_t v38 = (char *)&v33 - v21;
  uint64_t v33 = Namespace.wrappedValue.getter();
  uint64_t v22 = type metadata accessor for EventView();
  unint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter;
  uint64_t v23 = sub_10012564C(v22, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v23 + *(void *)(*(void *)v23 + 160), a2);
  swift_release();
  sub_10012564C(v22, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  swift_getKeyPath();
  type metadata accessor for EventViewModel();
  swift_getWitnessTable();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v24 = v36;
  sub_10004A20C(v33, (uint64_t)v8, (uint64_t)v50, (uint64_t)v51, v52, a2, v36);
  uint64_t v25 = v35;
  sub_1000CDBA4((uint64_t)v24, v35);
  static Edge.Set.trailing.getter();
  sub_10012564C(v22, v34);
  sub_10011EFF8();
  swift_release();
  uint64_t WitnessTable = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v25, v12);
  uint64_t v48 = WitnessTable;
  uint64_t v49 = &protocol witness table for _PaddingLayout;
  uint64_t v27 = swift_getWitnessTable();
  uint64_t v29 = v37;
  uint64_t v28 = v38;
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
  v30(v38, v18, v15);
  uint64_t v31 = *(void (**)(char *, uint64_t))(v29 + 8);
  v31(v18, v15);
  uint64_t v46 = 0;
  __int16 v47 = 1;
  uint64_t v50 = &v46;
  v30(v18, v28, v15);
  uint64_t v51 = v18;
  v45[0] = sub_10000570C(&qword_1001AC900);
  v45[1] = v15;
  uint64_t v43 = sub_100133408(&qword_1001ACA80, &qword_1001AC900, (void (*)(void))sub_1000F72B8);
  uint64_t v44 = v27;
  sub_1001231A4((uint64_t)&v50, 2uLL, (uint64_t)v45);
  v31(v28, v15);
  return ((uint64_t (*)(char *, uint64_t))v31)(v18, v15);
}

uint64_t sub_10012D750()
{
  uint64_t v0 = type metadata accessor for EventView();
  sub_10012564C(v0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10011EE74();

  return swift_release();
}

uint64_t sub_10012D7C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v238 = a4;
  uint64_t v212 = type metadata accessor for AppModule();
  __chkstk_darwin(v212, v7);
  uint64_t v214 = (uint64_t (**)())((char *)&v207 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = sub_10000570C(&qword_1001ACA10);
  uint64_t v231 = *(void *)(v9 - 8);
  uint64_t v232 = v9;
  __chkstk_darwin(v9, v10);
  uint64_t v213 = (uint64_t)&v207 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v234 = sub_10000570C(&qword_1001AC928);
  __chkstk_darwin(v234, v12);
  uint64_t v237 = (uint64_t)&v207 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  uint64_t v236 = (uint64_t)&v207 - v16;
  uint64_t v207 = sub_10000570C(&qword_1001ACA18);
  __chkstk_darwin(v207, v17);
  uint64_t v208 = (char *)&v207 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v211 = sub_10000570C(&qword_1001ACA20);
  __chkstk_darwin(v211, v19);
  uint64_t v210 = (uint64_t)&v207 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000570C(&qword_1001ACA28);
  uint64_t v227 = *(void *)(v21 - 8);
  uint64_t v228 = v21;
  __chkstk_darwin(v21, v22);
  long long v209 = (char *)&v207 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v233 = sub_10000570C(&qword_1001AC920);
  __chkstk_darwin(v233, v24);
  uint64_t v235 = (uint64_t)&v207 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26, v27);
  uint64_t v245 = (uint64_t)&v207 - v28;
  uint64_t v230 = sub_10000570C(&qword_1001AC918);
  __chkstk_darwin(v230, v29);
  uint64_t v247 = (uint64_t)&v207 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31, v32);
  uint64_t v252 = (uint64_t *)((char *)&v207 - v33);
  uint64_t v226 = *(void (***)(char *, uint64_t, uint64_t))(a2 - 8);
  __chkstk_darwin(v34, v35);
  uint64_t WitnessTable = (char *)&v207 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for GuideViewModel();
  __chkstk_darwin(v37 - 8, v38);
  uint64_t v224 = (uint64_t)&v207 - v39;
  uint64_t v244 = type metadata accessor for GuideModule();
  uint64_t v253 = *(void *)(v244 - 8);
  __chkstk_darwin(v244, v40);
  uint64_t v251 = (uint64_t)&v207 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42, v43);
  v250 = (char *)&v207 - v44;
  uint64_t v246 = a2;
  uint64_t v248 = a3;
  uint64_t v45 = type metadata accessor for EventView();
  uint64_t v242 = *(void *)(v45 - 8);
  uint64_t v239 = *(void *)(v242 + 64);
  __chkstk_darwin(v45, v46);
  v240 = (char *)&v207 - v47;
  uint64_t v48 = sub_10000570C(&qword_1001A9740);
  uint64_t v222 = *(void *)(v48 - 8);
  v223 = (void (*)(void, void, void))v48;
  __chkstk_darwin(v48, v49);
  uint64_t v221 = (char *)&v207 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_10000570C(&qword_1001A53D8);
  __chkstk_darwin(v51 - 8, v52);
  uint64_t v54 = (char *)&v207 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for ArtistPromotionalAssets();
  uint64_t v56 = *(void *)(v55 - 8);
  uint64_t v57 = *(void *)(v56 + 64);
  __chkstk_darwin(v55, v58);
  uint64_t v220 = (char *)&v207 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v59, v60);
  uint64_t v62 = (char *)&v207 - v61;
  uint64_t v229 = sub_10000570C(&qword_1001A9748);
  __chkstk_darwin(v229, v63);
  uint64_t v243 = (uint64_t)&v207 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v65, v66);
  uint64_t v249 = (uint64_t)&v207 - v67;
  uint64_t v254 = v45;
  uint64_t v241 = a1;
  uint64_t v68 = sub_10012564C(v45, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v69 = *(void *)(v68 + *(void *)(*(void *)v68 + 168));
  swift_retain();
  swift_release();
  swift_getKeyPath();
  *(void *)&long long v255 = v69;
  sub_1001336F8(&qword_1001A53E0, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v70 = v69 + OBJC_IVAR____TtC16EventViewService27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess();
  sub_10000A428(v70, (uint64_t)v54, &qword_1001A53D8);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55) == 1)
  {
    sub_10000ACE0((uint64_t)v54, &qword_1001A53D8);
    uint64_t v71 = 1;
    uint64_t v72 = v246;
    uint64_t v73 = v249;
    uint64_t v75 = v222;
    uint64_t v74 = v223;
  }
  else
  {
    unsigned __int8 v76 = *(void (**)(unint64_t, char *, uint64_t))(v56 + 32);
    uint64_t v216 = v56;
    uint64_t v217 = v56 + 32;
    uint64_t v218 = v76;
    uint64_t v219 = v62;
    uint64_t v77 = v55;
    v76((unint64_t)v62, v54, v55);
    uint64_t v78 = v254;
    uint64_t v79 = v241;
    uint64_t v80 = sub_10012564C(v254, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    uint64_t v81 = *(void *)(v80 + *(void *)(*(void *)v80 + 168));
    swift_retain();
    swift_release();
    type metadata accessor for PromotionalAssetsEntryViewModel();
    uint64_t v82 = swift_allocObject();
    ObservationRegistrar.init()();
    *(void *)(v82 + 16) = v81;
    *(void *)&long long v285 = v82;
    State.init(wrappedValue:)();
    long long v83 = v255;
    char v84 = static Edge.Set.top.getter();
    EdgeInsets.init(_all:)();
    uint64_t v86 = v85;
    uint64_t v88 = v87;
    uint64_t v90 = (void (*)(unint64_t, char *, uint64_t))v89;
    uint64_t v92 = v91;
    char v93 = static Edge.Set.horizontal.getter();
    long long v255 = v83;
    LOBYTE(v256) = v84;
    *((void *)&v256 + 1) = v86;
    uint64_t v257 = v88;
    uint64_t v258 = v90;
    *(void *)&long long v259 = v92;
    BYTE8(v259) = 0;
    v260[0] = v93;
    memset(&v260[8], 0, 32);
    char v261 = 1;
    uint64_t v94 = v242;
    uint64_t v95 = v240;
    (*(void (**)(char *, uint64_t, uint64_t))(v242 + 16))(v240, v79, v78);
    uint64_t v96 = v216;
    uint64_t v97 = v220;
    uint64_t v98 = v77;
    (*(void (**)(char *, char *, uint64_t))(v216 + 16))(v220, v219, v77);
    unint64_t v99 = (*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
    uint64_t v100 = v96;
    unint64_t v101 = (v239 + *(unsigned __int8 *)(v96 + 80) + v99) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80);
    uint64_t v102 = swift_allocObject();
    uint64_t v103 = v246;
    uint64_t v104 = v248;
    *(void *)(v102 + 16) = v246;
    *(void *)(v102 + 24) = v104;
    (*(void (**)(unint64_t, char *, uint64_t))(v94 + 32))(v102 + v99, v95, v254);
    v218(v102 + v101, v97, v98);
    sub_10000570C(&qword_1001A9768);
    sub_100133408(&qword_1001A9770, &qword_1001A9768, (void (*)(void))sub_1000C1D44);
    uint64_t v105 = v221;
    View.onTapGesture(count:perform:)();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v100 + 8))(v219, v98);
    uint64_t v107 = v222;
    uint64_t v106 = v223;
    uint64_t v108 = v249;
    (*(void (**)(uint64_t, char *, void))(v222 + 32))(v249, v105, v223);
    uint64_t v71 = 0;
    uint64_t v72 = v103;
    uint64_t v73 = v108;
    uint64_t v74 = v106;
    uint64_t v75 = v107;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, void (*)(void, void, void)))(v75 + 56))(v73, v71, 1, v74);
  uint64_t v109 = v254;
  uint64_t v110 = v241;
  uint64_t v111 = sub_10012564C(v254, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v112 = (uint64_t)WitnessTable;
  v226[2](WitnessTable, v111 + *(void *)(*(void *)v111 + 160), v72);
  swift_release();
  uint64_t v113 = v224;
  sub_10007AE30(v112, v72, v224);
  uint64_t v114 = v251;
  sub_1000FA880(v113, v251);
  uint64_t v115 = v244;
  uint64_t WitnessTable = (char *)swift_getWitnessTable();
  uint64_t v116 = v253;
  v223 = *(void (**)(void, void, void))(v253 + 16);
  uint64_t v224 = v253 + 16;
  v223(v250, v114, v115);
  uint64_t v117 = *(void (***)(char *, uint64_t, uint64_t))(v116 + 8);
  uint64_t v253 = v116 + 8;
  uint64_t v226 = v117;
  ((void (*)(uint64_t, uint64_t))v117)(v114, v115);
  sub_10012564C(v109, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v118 = sub_1001201D0();
  uint64_t v120 = v119;
  swift_release();
  if (v120)
  {
    sub_10012564C(v109, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    uint64_t v121 = v110;
    uint64_t v122 = sub_10011F180();
    uint64_t v124 = v123;
    swift_release();
    sub_10012564C(v254, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    type metadata accessor for AttributionViewModel();
    uint64_t v125 = v252;
    sub_100120158();
    swift_release();
    *uint64_t v125 = v122;
    v125[1] = v124;
    uint64_t v110 = v121;
    uint64_t v109 = v254;
    v125[2] = v118;
    v125[3] = v120;
    uint64_t v126 = type metadata accessor for AttributionModule();
    uint64_t v127 = (uint64_t *)((char *)v125 + *(int *)(v126 + 20));
    type metadata accessor for RemoteViewConfiguration();
    sub_1001336F8((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    *uint64_t v127 = EnvironmentObject.init()();
    v127[1] = v128;
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v126 - 8) + 56))(v125, 0, 1, v126);
  }
  else
  {
    uint64_t v129 = type metadata accessor for AttributionModule();
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v129 - 8) + 56))(v252, 1, 1, v129);
  }
  sub_10012564C(v109, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  char v130 = sub_10011FB60();
  swift_release();
  if (v130)
  {
    sub_10012564C(v109, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    uint64_t v131 = sub_10011FE10();
    swift_release();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    sub_1000EE9E8(v131, (uint64_t)v291);
    sub_100055270(v291, (__n128 *)v292);
    v296 = v293;
    long long v295 = *(_OWORD *)&v292[8];
    uint64_t v294 = *(void *)v292;
    long long v255 = *(_OWORD *)v292;
    long long v256 = *(_OWORD *)&v292[16];
    uint64_t v257 = v293;
    static Edge.Set.top.getter();
    type metadata accessor for LineupModule();
    uint64_t v132 = swift_getWitnessTable();
    View.padding(_:_:)();
    sub_100058ACC((uint64_t)&v294);
    sub_1000074E8((uint64_t)&v295);
    sub_100058ACC((uint64_t)&v296);
    long long v272 = v285;
    unint64_t v273 = v286;
    LOBYTE(v274) = BYTE8(v286);
    uint64_t v275 = v287;
    LOBYTE(v276) = BYTE8(v287);
    long long v277 = v288;
    long long v278 = v289;
    char v279 = v290;
    uint64_t v133 = type metadata accessor for ModifiedContent();
    uint64_t v270 = v132;
    uint64_t v271 = &protocol witness table for _PaddingLayout;
    swift_getWitnessTable();
    char v134 = *(void (**)(long long *, long long *, uint64_t))(*(void *)(v133 - 8) + 16);
    v134(&v255, &v272, v133);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v285 = v255;
    *(void *)&long long v286 = v256;
    BYTE8(v286) = BYTE8(v256);
    *(void *)&long long v287 = v257;
    BYTE8(v287) = (_BYTE)v258;
    long long v288 = v259;
    long long v289 = *(_OWORD *)v260;
    char v290 = v260[16];
    v134(&v272, &v285, v133);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v262 = v272;
    unint64_t v263 = v273;
    uint64_t v264 = v274;
    uint64_t v265 = v275;
    uint64_t v266 = v276;
    long long v267 = v277;
    long long v268 = v278;
    char v269 = v279;
    uint64_t v135 = type metadata accessor for Optional();
    (*(void (**)(long long *, long long *, uint64_t))(*(void *)(v135 - 8) + 16))(&v285, &v262, v135);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v241 = v285;
    uint64_t v221 = (char *)v286;
    uint64_t v222 = *((void *)&v285 + 1);
    uint64_t v219 = (char *)v287;
    uint64_t v220 = (char *)*((void *)&v286 + 1);
    uint64_t v217 = v288;
    uint64_t v218 = (void (*)(unint64_t, char *, uint64_t))*((void *)&v287 + 1);
    uint64_t v215 = v289;
    uint64_t v216 = *((void *)&v288 + 1);
    uint64_t v136 = *((void *)&v289 + 1);
    char v137 = v290;
  }
  else
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for LineupModule();
    type metadata accessor for ModifiedContent();
    long long v285 = 0u;
    long long v286 = 0u;
    long long v287 = 0u;
    long long v288 = 0u;
    long long v289 = 0u;
    char v290 = 0;
    uint64_t v283 = swift_getWitnessTable();
    uint64_t v284 = &protocol witness table for _PaddingLayout;
    swift_getWitnessTable();
    uint64_t v138 = type metadata accessor for Optional();
    (*(void (**)(long long *, long long *, uint64_t))(*(void *)(v138 - 8) + 16))(&v255, &v285, v138);
    uint64_t v241 = v255;
    uint64_t v221 = (char *)v256;
    uint64_t v222 = *((void *)&v255 + 1);
    uint64_t v219 = v257;
    uint64_t v220 = (char *)*((void *)&v256 + 1);
    uint64_t v217 = v259;
    uint64_t v218 = v258;
    uint64_t v136 = *(void *)&v260[8];
    uint64_t v215 = *(void *)v260;
    uint64_t v216 = *((void *)&v259 + 1);
    char v137 = v260[16];
  }
  sub_1001256DC();
  double v139 = sub_100122420();
  swift_release();
  uint64_t v140 = v139[2];
  swift_bridgeObjectRelease();
  uint64_t v141 = v245;
  if (v140)
  {
    sub_1001256DC();
    uint64_t v142 = sub_100122420();
    swift_release();
    sub_1001256DC();
    uint64_t v143 = sub_10000570C(&qword_1001ACA30);
    uint64_t v144 = (uint64_t)v208;
    sub_100122614((uint64_t)&v208[*(int *)(v143 + 44)]);
    swift_release();
    sub_10012564C(v254, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    uint64_t v145 = sub_100120654();
    swift_release();
    *(void *)uint64_t v144 = LocalizedStringKey.init(stringLiteral:)();
    *(void *)(v144 + 8) = v146;
    *(unsigned char *)(v144 + 16) = v147 & 1;
    *(void *)(v144 + 24) = v148;
    *(void *)(v144 + 32) = LocalizedStringKey.init(stringLiteral:)();
    *(void *)(v144 + 40) = v149;
    *(unsigned char *)(v144 + 48) = v150 & 1;
    *(void *)(v144 + 56) = v151;
    *(void *)(v144 + 64) = v142;
    *(void *)(v144 + *(int *)(v143 + 48)) = v145;
    uint64_t v152 = v207;
    uint64_t v153 = (uint64_t *)(v144 + *(int *)(v207 + 36));
    *uint64_t v153 = swift_getKeyPath();
    sub_10000570C(&qword_1001A5468);
    swift_storeEnumTagMultiPayload();
    uint64_t v154 = (uint64_t *)(v144 + *(int *)(v152 + 40));
    *uint64_t v154 = swift_getKeyPath();
    sub_10000570C(&qword_1001A55D8);
    swift_storeEnumTagMultiPayload();
    uint64_t v155 = (uint64_t *)(v144 + *(int *)(v152 + 44));
    type metadata accessor for RemoteViewConfiguration();
    sub_1001336F8((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    *uint64_t v155 = EnvironmentObject.init()();
    v155[1] = v156;
    LOBYTE(v154) = static Edge.Set.top.getter();
    EdgeInsets.init(_all:)();
    uint64_t v158 = v157;
    uint64_t v160 = v159;
    uint64_t v162 = v161;
    uint64_t v164 = v163;
    uint64_t v165 = v210;
    sub_10000A428(v144, v210, &qword_1001ACA18);
    uint64_t v166 = v165 + *(int *)(v211 + 36);
    *(unsigned char *)uint64_t v166 = (_BYTE)v154;
    *(void *)(v166 + 8) = v158;
    *(void *)(v166 + 16) = v160;
    *(void *)(v166 + 24) = v162;
    *(void *)(v166 + 32) = v164;
    *(unsigned char *)(v166 + 40) = 0;
    sub_10000ACE0(v144, &qword_1001ACA18);
    if (qword_1001A4F28 != -1) {
      swift_once();
    }
    sub_100132F94();
    uint64_t v167 = (uint64_t)v209;
    View.accessibilityIdentifier(_:)();
    sub_10000ACE0(v165, &qword_1001ACA20);
    sub_10000A3C4(v167, v141, &qword_1001ACA28);
    uint64_t v168 = 0;
  }
  else
  {
    uint64_t v168 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v227 + 56))(v141, v168, 1, v228);
  uint64_t v169 = v254;
  sub_10012564C(v254, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  if (*(void *)(v110 + 72))
  {
    uint64_t v170 = swift_retain();
    uint64_t v171 = sub_1000F3224(v170);
    unint64_t v173 = v172;
    swift_release();
    swift_release();
    uint64_t v174 = v242;
    if (!v173) {
      goto LABEL_20;
    }
    swift_bridgeObjectRelease();
    uint64_t v175 = HIBYTE(v173) & 0xF;
    if ((v173 & 0x2000000000000000) == 0) {
      uint64_t v175 = v171 & 0xFFFFFFFFFFFFLL;
    }
    if (!v175)
    {
      uint64_t v197 = 1;
      uint64_t v196 = v236;
      uint64_t v193 = v232;
    }
    else
    {
LABEL_20:
      uint64_t v176 = v240;
      (*(void (**)(char *, uint64_t, uint64_t))(v174 + 16))(v240, v110, v169);
      unint64_t v177 = (*(unsigned __int8 *)(v174 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v174 + 80);
      uint64_t v178 = swift_allocObject();
      uint64_t v179 = v169;
      uint64_t v180 = v248;
      *(void *)(v178 + 16) = v246;
      *(void *)(v178 + 24) = v180;
      (*(void (**)(unint64_t, char *, uint64_t))(v174 + 32))(v178 + v177, v176, v179);
      uint64_t v181 = (uint64_t)v214;
      *uint64_t v214 = sub_1001332A8;
      *(void *)(v181 + 8) = v178;
      *(unsigned char *)(v181 + 16) = 0;
      type metadata accessor for RemoteViewConfiguration();
      sub_1001336F8((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
      *(void *)(v181 + 24) = EnvironmentObject.init()();
      *(void *)(v181 + 32) = v182;
      uint64_t v183 = (uint64_t *)(v181 + *(int *)(v212 + 24));
      *uint64_t v183 = swift_getKeyPath();
      sub_10000570C(&qword_1001A55D8);
      swift_storeEnumTagMultiPayload();
      LOBYTE(v183) = static Edge.Set.top.getter();
      EdgeInsets.init(_all:)();
      uint64_t v185 = v184;
      uint64_t v187 = v186;
      uint64_t v189 = v188;
      uint64_t v191 = v190;
      uint64_t v192 = v213;
      sub_100133B80(v181, v213, (uint64_t (*)(void))type metadata accessor for AppModule);
      uint64_t v193 = v232;
      uint64_t v194 = v192 + *(int *)(v232 + 36);
      *(unsigned char *)uint64_t v194 = (_BYTE)v183;
      *(void *)(v194 + 8) = v185;
      *(void *)(v194 + 16) = v187;
      *(void *)(v194 + 24) = v189;
      *(void *)(v194 + 32) = v191;
      *(unsigned char *)(v194 + 40) = 0;
      sub_100133BE8(v181, (uint64_t (*)(void))type metadata accessor for AppModule);
      uint64_t v195 = v192;
      uint64_t v196 = v236;
      sub_10000A3C4(v195, v236, &qword_1001ACA10);
      uint64_t v197 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v231 + 56))(v196, v197, 1, v193);
    uint64_t v198 = v243;
    sub_10000A428(v249, v243, &qword_1001A9748);
    *(void *)&long long v285 = v198;
    uint64_t v199 = v251;
    uint64_t v200 = v244;
    v223(v251, v250, v244);
    *((void *)&v285 + 1) = v199;
    uint64_t v201 = v247;
    sub_10000A428((uint64_t)v252, v247, &qword_1001AC918);
    *(void *)&long long v255 = v241;
    *((void *)&v255 + 1) = v222;
    *(void *)&long long v256 = v221;
    *((void *)&v256 + 1) = v220;
    uint64_t v257 = v219;
    uint64_t v258 = v218;
    *(void *)&long long v259 = v217;
    *((void *)&v259 + 1) = v216;
    *(void *)uint64_t v260 = v215;
    *(void *)&v260[8] = v136;
    v260[16] = v137;
    *(void *)&long long v286 = v201;
    *((void *)&v286 + 1) = &v255;
    uint64_t v202 = v245;
    uint64_t v203 = v235;
    sub_10000A428(v245, v235, &qword_1001AC920);
    *(void *)&long long v287 = v203;
    uint64_t v204 = v237;
    sub_10000A428(v196, v237, &qword_1001AC928);
    *((void *)&v287 + 1) = v204;
    *(void *)&long long v272 = v229;
    *((void *)&v272 + 1) = v200;
    unint64_t v273 = v230;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for LineupModule();
    type metadata accessor for ModifiedContent();
    uint64_t v274 = type metadata accessor for Optional();
    uint64_t v275 = v233;
    uint64_t v276 = v234;
    *(void *)&long long v262 = sub_10013332C();
    *((void *)&v262 + 1) = WitnessTable;
    unint64_t v263 = sub_100133484();
    uint64_t v281 = swift_getWitnessTable();
    uint64_t v282 = &protocol witness table for _PaddingLayout;
    uint64_t v280 = swift_getWitnessTable();
    uint64_t v264 = swift_getWitnessTable();
    uint64_t v265 = sub_100133528(&qword_1001ACA60, &qword_1001AC920, (void (*)(void))sub_1001335A0);
    uint64_t v266 = sub_100133528(&qword_1001ACA70, &qword_1001AC928, (void (*)(void))sub_10013364C);
    sub_1001231A4((uint64_t)&v285, 6uLL, (uint64_t)&v272);
    sub_10000ACE0(v196, &qword_1001AC928);
    sub_10000ACE0(v202, &qword_1001AC920);
    sub_10000ACE0((uint64_t)v252, &qword_1001AC918);
    uint64_t v205 = v226;
    ((void (*)(char *, uint64_t))v226)(v250, v200);
    sub_10000ACE0(v249, &qword_1001A9748);
    sub_10000ACE0(v204, &qword_1001AC928);
    sub_10000ACE0(v203, &qword_1001AC920);
    sub_100133740(v255);
    sub_10000ACE0(v247, &qword_1001AC918);
    ((void (*)(uint64_t, uint64_t))v205)(v251, v200);
    return sub_10000ACE0(v243, &qword_1001A9748);
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1001336F8((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10012F4C8(uint64_t a1)
{
  uint64_t v2 = sub_10000570C(&qword_1001A5490);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for EventView();
  sub_10012564C(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_100121304();
  swift_release();
  ArtistPromotionalAssets.eventWithPromotionalAssets.getter();
  uint64_t v8 = sub_10000A780((unint64_t *)&qword_1001A54A0, &qword_1001A5490);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 152))(v2, v8);
  uint64_t v11 = v10;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  uint64_t v12 = *(void *)(a1 + 72);
  if (v12)
  {
    swift_retain();
    sub_100116F94(v9, v11, 0, 3, 9, 0, 3u, v12);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1001336F8((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10012F6DC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for EventView();
  sub_10012564C(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v7 = sub_10011F180();
  uint64_t v9 = v8;
  swift_release();
  sub_10012564C(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_1001200E0();
  swift_release();
  sub_10012564C(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  if (*(void *)(a1 + 72))
  {
    uint64_t v10 = swift_retain();
    uint64_t v11 = sub_1000F3224(v10);
    uint64_t v13 = v12;
    swift_release();
    swift_release();
    type metadata accessor for AppViewModel();
    swift_allocObject();
    return sub_10000632C(v7, v9, (uint64_t)v5, v11, v13, 0);
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1001336F8((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10012F8A4(uint64_t a1)
{
  sub_10012564C(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10011EC68();
  swift_release();
  sub_10012564C(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  int v3 = sub_100120248();
  uint64_t result = swift_release();
  uint64_t v5 = *(void *)(v1 + 56);
  if (v3 != *(unsigned __int8 *)(v5 + 16))
  {
    sub_10000570C(&qword_1001A5448);
    sub_10000A780(&qword_1001A5450, &qword_1001A5448);
    ObservableObject<>.objectWillChange.getter();
    ObservableObjectPublisher.send()();
    uint64_t result = swift_release();
  }
  *(unsigned char *)(v5 + 16) = v3;
  return result;
}

uint64_t sub_10012F99C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v32 = a3;
  uint64_t v34 = a4;
  uint64_t v6 = type metadata accessor for EventView();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = &v30[-v9];
  uint64_t v33 = sub_10000570C(&qword_1001AC9F0);
  uint64_t v11 = *(void *)(v33 - 8);
  __chkstk_darwin(v33, v12);
  uint64_t v14 = &v30[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = sub_10000570C(&qword_1001AC9C8);
  uint64_t v16 = v15 - 8;
  __n128 v18 = __chkstk_darwin(v15, v17);
  uint64_t v20 = &v30[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (*(unsigned char *)(*(void *)(a1 + 56) + 16)) {
    int v21 = 2;
  }
  else {
    int v21 = 1;
  }
  int v31 = v21;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, __n128))(v7 + 16))(v10, a1, v6, v18);
  unint64_t v22 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v23 = swift_allocObject();
  uint64_t v24 = v32;
  *(void *)(v23 + 16) = a2;
  *(void *)(v23 + 24) = v24;
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v7 + 32))(v23 + v22, v10, v6);
  uint64_t v25 = static Font.title.getter();
  uint64_t KeyPath = swift_getKeyPath();
  char v35 = 2;
  char v36 = v31;
  uint64_t v37 = sub_100132C1C;
  uint64_t v38 = v23;
  uint64_t v39 = KeyPath;
  uint64_t v40 = v25;
  static Font.Weight.medium.getter();
  sub_10000570C(&qword_1001A8948);
  sub_10009E094();
  View.fontWeight(_:)();
  swift_release();
  swift_release();
  swift_release();
  LOBYTE(v23) = static Edge.Set.horizontal.getter();
  uint64_t v27 = v33;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v11 + 16))(v20, v14, v33);
  uint64_t v28 = &v20[*(int *)(v16 + 44)];
  *uint64_t v28 = v23;
  *(_OWORD *)(v28 + 8) = 0u;
  *(_OWORD *)(v28 + 24) = 0u;
  v28[40] = 1;
  (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v14, v27);
  return sub_10000A3C4((uint64_t)v20, v34, &qword_1001AC9C8);
}

uint64_t sub_10012FCB8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for EventView();
  sub_10012564C(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_100121228();
  swift_release();
  sub_10012564C(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3)
  {
    swift_retain();
    sub_1001217A8(0, 1, 0, 3u, v3);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1001336F8((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10012FDD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for EventView();
  sub_10012564C(v4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v5 = sub_10011F1F8();
  uint64_t v7 = v6;
  swift_release();
  *(void *)&v28[0] = v5;
  *((void *)&v28[0] + 1) = v7;
  sub_100010B2C();
  uint64_t v8 = Text.init<A>(_:)();
  uint64_t v10 = v9;
  char v12 = v11 & 1;
  static Font.Weight.semibold.getter();
  uint64_t v13 = Text.fontWeight(_:)();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  char v19 = v18 & 1;
  sub_10000FCC4(v8, v10, v12);
  swift_bridgeObjectRelease();
  uint64_t v20 = static Alignment.center.getter();
  sub_100123F48(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v28, 0.0, 1, 0.0, 1, v20, v21, v13, v15, v19, v17);
  sub_10000FCC4(v13, v15, v19);
  uint64_t result = swift_bridgeObjectRelease();
  double v23 = 0.0;
  if (*(unsigned char *)(*(void *)(a1 + 56) + 16)) {
    double v23 = 1.0;
  }
  long long v24 = v28[7];
  *(_OWORD *)(a2 + 96) = v28[6];
  *(_OWORD *)(a2 + 112) = v24;
  *(_OWORD *)(a2 + 128) = v28[8];
  long long v25 = v28[3];
  *(_OWORD *)(a2 + 32) = v28[2];
  *(_OWORD *)(a2 + 48) = v25;
  long long v26 = v28[5];
  *(_OWORD *)(a2 + 64) = v28[4];
  *(_OWORD *)(a2 + 80) = v26;
  long long v27 = v28[1];
  *(_OWORD *)a2 = v28[0];
  *(_OWORD *)(a2 + 16) = v27;
  *(double *)(a2 + 144) = v23;
  return result;
}

uint64_t sub_10012FF88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v54 = a2;
  uint64_t v52 = sub_10000570C(&qword_1001AC9E8);
  __chkstk_darwin(v52, v3);
  uint64_t v53 = (uint64_t)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for DismissAction();
  uint64_t v5 = *(void *)(v45 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v45, v7);
  uint64_t v44 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  char v11 = (char *)&v44 - v10;
  uint64_t v50 = sub_10000570C(&qword_1001AC9F0);
  uint64_t v48 = *(void *)(v50 - 8);
  __chkstk_darwin(v50, v12);
  uint64_t v47 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_10000570C(&qword_1001AC9C8);
  __chkstk_darwin(v51, v14);
  uint64_t v46 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  uint64_t v49 = (uint64_t)&v44 - v18;
  uint64_t v19 = type metadata accessor for EventView();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  double v23 = (char *)&v44 - v22;
  if (!*(void *)(a1 + 72)) {
    goto LABEL_17;
  }
  swift_retain();
  char v24 = sub_1000D1500();
  uint64_t v26 = v25;
  swift_release();
  if (!v26 || (swift_bridgeObjectRelease(), (v24 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, a1, v19);
    goto LABEL_5;
  }
  char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, a1, v19);
  if (v41)
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
LABEL_6:
    if (*(unsigned char *)(*(void *)(a1 + 56) + 16)) {
      char v27 = 2;
    }
    else {
      char v27 = 1;
    }
    sub_10002652C((uint64_t)v11);
    uint64_t v29 = v44;
    uint64_t v28 = v45;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v44, v11, v45);
    unint64_t v30 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v31 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v31 + v30, v29, v28);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v28);
    uint64_t v32 = static Font.title.getter();
    uint64_t KeyPath = swift_getKeyPath();
    char v55 = 1;
    char v56 = v27;
    uint64_t v57 = sub_10000FC50;
    uint64_t v58 = v31;
    uint64_t v59 = KeyPath;
    uint64_t v60 = v32;
    static Font.Weight.medium.getter();
    sub_10000570C(&qword_1001A8948);
    sub_10009E094();
    uint64_t v34 = v47;
    View.fontWeight(_:)();
    swift_release();
    swift_release();
    swift_release();
    LOBYTE(v31) = static Edge.Set.horizontal.getter();
    uint64_t v35 = v48;
    uint64_t v36 = (uint64_t)v46;
    uint64_t v37 = v50;
    (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v46, v34, v50);
    uint64_t v38 = v36 + *(int *)(v51 + 36);
    *(unsigned char *)uint64_t v38 = v31;
    *(_OWORD *)(v38 + 8) = 0u;
    *(_OWORD *)(v38 + 24) = 0u;
    *(unsigned char *)(v38 + 40) = 1;
    (*(void (**)(char *, uint64_t))(v35 + 8))(v34, v37);
    uint64_t v39 = v49;
    sub_10000A3C4(v36, v49, &qword_1001AC9C8);
    sub_10000A428(v39, v53, &qword_1001AC9C8);
    swift_storeEnumTagMultiPayload();
    sub_100132988();
    _ConditionalContent<>.init(storage:)();
    return sub_10000ACE0(v39, &qword_1001AC9C8);
  }
  uint64_t v42 = *((void *)v23 + 9);
  if (!v42)
  {
LABEL_17:
    while (1)
    {
      type metadata accessor for RemoteViewConfiguration();
      sub_1001336F8((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
      EnvironmentObject.error()();
      __break(1u);
    }
  }
  switch(*(unsigned char *)(v42 + 32))
  {
    case 1:
    case 2:
    case 3:
    case 4:
      char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
      if ((v43 & 1) == 0) {
        goto LABEL_6;
      }
      break;
    default:
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
      break;
  }
  swift_storeEnumTagMultiPayload();
  sub_100132988();
  return _ConditionalContent<>.init(storage:)();
}

uint64_t sub_1001306B4()
{
  uint64_t v0 = type metadata accessor for EventView();
  sub_10012564C(v0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10011EF3C();

  return swift_release();
}

uint64_t sub_10013072C()
{
  uint64_t v0 = type metadata accessor for EventView();
  sub_10012564C(v0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10011F0B0();

  return swift_release();
}

uint64_t sub_1001307B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v32 = a4;
  uint64_t v31 = *(void *)(a2 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v28 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for TicketView();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v25 - v14;
  uint64_t v16 = type metadata accessor for EventView();
  sub_10012564C(v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v27 = sub_10011F180();
  uint64_t v26 = v17;
  swift_release();
  uint64_t v18 = sub_10012564C(v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v19 = v31;
  uint64_t v20 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v28, v18 + *(void *)(*(void *)v18 + 160), a2);
  swift_release();
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 192))(a2, a3);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v20, a2);
  sub_100115C04(v27, v26, v21, (uint64_t)v33);
  sub_10000E3F8((uint64_t)v33, (uint64_t)v11);
  swift_getWitnessTable();
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v22(v15, v11, v7);
  double v23 = *(void (**)(char *, uint64_t))(v8 + 8);
  v23(v11, v7);
  v22(v32, v15, v7);
  return ((uint64_t (*)(char *, uint64_t))v23)(v15, v7);
}

uint64_t sub_100130B18@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10011EC7C();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100130B48()
{
  return sub_10011EC90();
}

uint64_t sub_100130B70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v19[0] = a4;
  uint64_t v7 = type metadata accessor for EventView();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  char v11 = (char *)v19 - v10;
  sub_10000570C(&qword_1001A8918);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_100153180;
  sub_10012564C(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  *(void *)(v12 + 56) = type metadata accessor for URL();
  sub_10000A7C4((uint64_t *)(v12 + 32));
  sub_1001200E0();
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  unint64_t v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v14 + v13, v11, v7);
  uint64_t v15 = static SafeAreaRegions.all.getter();
  char v16 = static Edge.Set.all.getter();
  v19[2] = 0;
  void v19[3] = 0;
  v19[1] = v12;
  void v19[4] = sub_10013288C;
  v19[5] = v14;
  v19[6] = v15;
  char v20 = v16;
  sub_10000570C(&qword_1001A8920);
  type metadata accessor for PresentationDetent();
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_100152B80;
  static PresentationDetent.medium.getter();
  static PresentationDetent.large.getter();
  sub_10007F83C(v17);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_10000570C(&qword_1001A88D8);
  sub_100133408(&qword_1001A88E0, &qword_1001A88D8, (void (*)(void))sub_100058590);
  View.presentationDetents(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_100130E88(uint64_t a1, char a2)
{
  if (a2)
  {
    uint64_t v2 = type metadata accessor for EventView();
    sub_10012564C(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    sub_1001216DC();
    swift_release();
  }
}

uint64_t sub_100130EF4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10011ECCC();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100130F24()
{
  return sub_10011ED94();
}

uint64_t sub_100130F4C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for EventView();
  uint64_t v3 = sub_10012564C(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v4 = *(void *)(v3 + *(void *)(*(void *)v3 + 168));
  swift_retain();
  swift_release();
  type metadata accessor for RemoteViewConfiguration();
  sub_1001336F8((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  uint64_t result = EnvironmentObject.init()();
  *a1 = v4;
  a1[1] = result;
  a1[2] = v6;
  return result;
}

uint64_t sub_100131018(uint64_t a1)
{
  uint64_t v2 = sub_10000570C(&qword_1001A5478);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for EventView();
  sub_10012564C(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  if (!*(void *)(a1 + 72)) {
    goto LABEL_6;
  }
  swift_retain();
  char v7 = sub_100121F00();
  swift_release();
  swift_release();
  if (v7) {
    sub_100131220(v6, v8);
  }
  uint64_t v9 = sub_10012564C(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_100026824((uint64_t)v5);
  uint64_t v10 = v9 + *(void *)(*(void *)v9 + 176);
  swift_beginAccess();
  sub_1001322D4((uint64_t)v5, v10);
  swift_endAccess();
  swift_release();
  sub_10012564C(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  if (*(void *)(a1 + 72))
  {
    uint64_t v11 = swift_retain();
    sub_100121708(v11);
    swift_release();
    return swift_release();
  }
  else
  {
LABEL_6:
    type metadata accessor for RemoteViewConfiguration();
    sub_1001336F8((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100131220(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(a1, a2);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000570C(&qword_1001A95D0);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10012564C(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v11 = sub_10011F930();
  uint64_t v13 = v12;
  uint64_t result = swift_release();
  if (v13)
  {
    uint64_t v15 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v10, 1, 1, v15);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a1);
    type metadata accessor for MainActor();
    uint64_t v16 = static MainActor.shared.getter();
    unint64_t v17 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    unint64_t v18 = (v5 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v16;
    *(void *)(v19 + 24) = &protocol witness table for MainActor;
    *(_OWORD *)(v19 + 32) = *(_OWORD *)(a1 + 16);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v19 + v17, v6, a1);
    char v20 = (uint64_t *)(v19 + v18);
    *char v20 = v11;
    v20[1] = v13;
    sub_10013AF58((uint64_t)v10, (uint64_t)&unk_1001AC9A8, v19);
    return swift_release();
  }
  return result;
}

uint64_t sub_100131454(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for EventView();
  sub_10012564C(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3)
  {
    swift_retain();
    sub_1001217A8(0, 2, 0, 3u, v3);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1001336F8((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100131544()
{
  return swift_release();
}

uint64_t sub_1001315B4()
{
  uint64_t v0 = sub_10000570C(&qword_1001A5478);
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for EventView();
  uint64_t v5 = sub_10012564C(v4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_100026824((uint64_t)v3);
  uint64_t v6 = v5 + *(void *)(*(void *)v5 + 176);
  swift_beginAccess();
  sub_1001322D4((uint64_t)v3, v6);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1001316D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  type metadata accessor for MainActor();
  v3[5] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[6] = v5;
  v3[7] = v4;
  return _swift_task_switch(sub_10013176C, v5, v4);
}

uint64_t sub_10013176C()
{
  uint64_t v1 = type metadata accessor for EventView();
  uint64_t v2 = sub_10012564C(v1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  *(void *)(v0 + 64) = *(void *)(v2 + *(void *)(*(void *)v2 + 168));
  swift_retain();
  swift_release();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10009BFA8;
  return sub_10004E390();
}

uint64_t sub_100131854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[5] = a7;
  v8[6] = a8;
  void v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  type metadata accessor for MainActor();
  v8[7] = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  v8[8] = v10;
  v8[9] = v9;
  return _swift_task_switch(sub_1001318F4, v10, v9);
}

uint64_t sub_1001318F4()
{
  v0[10] = type metadata accessor for EventView();
  v0[11] = sub_1001256DC();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1001AC9B0 + dword_1001AC9B0);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[12] = v1;
  void *v1 = v0;
  v1[1] = sub_1001319BC;
  uint64_t v3 = v0[3];
  uint64_t v2 = v0[4];
  return v5(v3, v2);
}

uint64_t sub_1001319BC()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 72);
  uint64_t v3 = *(void *)(v1 + 64);
  return _swift_task_switch(sub_100131B00, v3, v2);
}

uint64_t sub_100131B00()
{
  v0[13] = sub_10012564C(v0[10], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[14] = (uint64_t)v1;
  void *v1 = v0;
  v1[1] = sub_100131BB4;
  return sub_100121330();
}

uint64_t sub_100131BB4()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 72);
  uint64_t v3 = *(void *)(v1 + 64);
  return _swift_task_switch(sub_100131CF8, v3, v2);
}

uint64_t sub_100131CF8()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100131D5C@<X0>(char *a1@<X8>)
{
  return sub_100129040(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_100131D68()
{
  unint64_t result = qword_1001AC980;
  if (!qword_1001AC980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC980);
  }
  return result;
}

uint64_t sub_100131DC0(uint64_t a1)
{
  return sub_100132ED0(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1001306B4);
}

unint64_t sub_100131DD8()
{
  unint64_t result = qword_1001AC988;
  if (!qword_1001AC988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001AC988);
  }
  return result;
}

uint64_t sub_100131E30()
{
  type metadata accessor for EventView();

  return sub_10013072C();
}

uint64_t sub_100131EBC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10011ECA4();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100131EEC()
{
  return sub_10011ECB8();
}

uint64_t sub_100131F14()
{
  return 16;
}

__n128 sub_100131F20(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100131F30()
{
  return sub_100131FD4((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1001307B8);
}

uint64_t sub_100131F48@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10011EC7C();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100131F78()
{
  return sub_10011EC90();
}

uint64_t sub_100131FA0()
{
  return 16;
}

__n128 sub_100131FAC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100131FBC()
{
  return sub_100131FD4((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100130B70);
}

uint64_t sub_100131FD4(uint64_t (*a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(type metadata accessor for EventView() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a1(v5, v2, v3);
}

uint64_t sub_100132074@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10011ECCC();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1001320A4()
{
  return sub_10011ED94();
}

uint64_t sub_1001320CC()
{
  return 16;
}

__n128 sub_1001320D8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1001320E8@<X0>(void *a1@<X8>)
{
  type metadata accessor for EventView();

  return sub_100130F4C(a1);
}

uint64_t sub_100132178()
{
  return sub_100132C34((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100131018);
}

uint64_t sub_100132194()
{
  return sub_100132C34((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100131454);
}

uint64_t sub_1001321B0()
{
  return sub_100132C34((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100131544);
}

uint64_t sub_1001321CC()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(type metadata accessor for EventView() - 8);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_10003E098;
  return sub_1001316D0(v5, v2, v3);
}

uint64_t sub_1001322B4()
{
  return sub_1001315B4();
}

uint64_t sub_1001322D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A5478);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013233C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100132368()
{
  return EnvironmentValues.font.setter();
}

void sub_100132394(uint64_t a1@<X3>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(a1 + 16);
}

unsigned __int8 *sub_1001323A0(unsigned __int8 *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = *result;
  if (v6 != *(unsigned __int8 *)(a5 + 16))
  {
    sub_10000570C(&qword_1001A5448);
    sub_10000A780(&qword_1001A5450, &qword_1001A5448);
    ObservableObject<>.objectWillChange.getter();
    ObservableObjectPublisher.send()();
    uint64_t result = (unsigned __int8 *)swift_release();
  }
  *(unsigned char *)(a5 + 16) = v6;
  return result;
}

uint64_t sub_100132434()
{
  uint64_t v1 = (int *)type metadata accessor for EventView();
  unint64_t v2 = (*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  swift_unknownObjectRelease();
  uint64_t v3 = v0 + v2;
  sub_10001274C();
  sub_10001274C();
  swift_release();
  swift_release();
  unint64_t v4 = v0 + v2 + v1[13];
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for DismissAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = v3 + v1[14];
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = v3 + v1[15];
  sub_10000570C(&qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v10 = *(void *)(v9 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    }
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1001326CC(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = *(void *)(type metadata accessor for EventView() - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = v1[2];
  uint64_t v9 = v1[3];
  uint64_t v10 = (uint64_t)v1 + v7;
  uint64_t v11 = (void *)((char *)v1 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = sub_100009854;
  return sub_100131854(a1, v8, v9, v10, v12, v13, v4, v5);
}

uint64_t sub_10013281C()
{
  return 16;
}

__n128 sub_100132828(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

unint64_t sub_100132834()
{
  unint64_t result = qword_1001AC9B8;
  if (!qword_1001AC9B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC9B8);
  }
  return result;
}

void sub_10013288C(uint64_t a1, char a2)
{
  type metadata accessor for EventView();

  sub_100130E88(a1, a2);
}

uint64_t sub_100132940@<X0>(uint64_t a1@<X8>)
{
  return sub_100129EE4(v1[4], v1[2], v1[3], a1);
}

void sub_100132950(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(*(void *)(v1 + 40) + 16);
}

uint64_t sub_100132964@<X0>(uint64_t a1@<X8>)
{
  return sub_10012F99C(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100132970@<X0>(uint64_t a1@<X8>)
{
  return sub_10012FDD0(*(void *)(v1 + 32), a1);
}

uint64_t sub_10013297C@<X0>(uint64_t a1@<X8>)
{
  return sub_10012FF88(*(void *)(v1 + 32), a1);
}

unint64_t sub_100132988()
{
  unint64_t result = qword_1001AC9D8;
  if (!qword_1001AC9D8)
  {
    sub_100004A58(&qword_1001AC9C8);
    sub_100004A58(&qword_1001A8948);
    sub_10009E094();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC9D8);
  }
  return result;
}

unint64_t sub_100132A38()
{
  unint64_t result = qword_1001A8960;
  if (!qword_1001A8960)
  {
    sub_100004A58(&qword_1001A8968);
    sub_10009E228();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A8960);
  }
  return result;
}

unint64_t sub_100132AB4()
{
  unint64_t result = qword_1001AC9E0;
  if (!qword_1001AC9E0)
  {
    sub_100004A58(&qword_1001AC9D0);
    sub_100132988();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC9E0);
  }
  return result;
}

uint64_t sub_100132B30()
{
  uint64_t v1 = type metadata accessor for DismissAction();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t sub_100132BC0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100132BEC()
{
  return EnvironmentValues.font.setter();
}

uint64_t sub_100132C1C()
{
  return sub_100132C34((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10012FCB8);
}

uint64_t sub_100132C34(uint64_t (*a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(type metadata accessor for EventView() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a1(v5, v2, v3);
}

void sub_100132CCC(double *a1@<X8>)
{
  *a1 = sub_10011EC54();
}

uint64_t sub_100132CF8()
{
  return sub_10011EC68();
}

uint64_t sub_100132D20()
{
  return 16;
}

__n128 sub_100132D2C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100132D40()
{
  return 16;
}

__n128 sub_100132D4C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100132D58@<X0>(char *a1@<X8>)
{
  return sub_10012B164(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100132D68()
{
  uint64_t v0 = type metadata accessor for EventView();
  return sub_10012F8A4(v0);
}

void sub_100132DDC(double *a1@<X8>)
{
  *a1 = sub_10011EE60();
}

uint64_t sub_100132E08()
{
  return sub_10011EE74();
}

uint64_t sub_100132E30()
{
  return 16;
}

__n128 sub_100132E3C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100132E48@<X0>(uint64_t a1@<X8>)
{
  return sub_10012B620(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100132E54@<X0>(uint64_t a1@<X8>)
{
  return sub_10012C648(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_100132E60()
{
  unint64_t result = qword_1001AC9F8;
  if (!qword_1001AC9F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001AC9F8);
  }
  return result;
}

uint64_t sub_100132EB8(uint64_t a1)
{
  return sub_100132ED0(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10012D750);
}

uint64_t sub_100132ED0(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(type metadata accessor for EventView() - 8);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return a2(a1, v7, v4, v5);
}

uint64_t sub_100132F70@<X0>(uint64_t a1@<X8>)
{
  return sub_10012D7C4(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_100132F94()
{
  unint64_t result = qword_1001ACA38;
  if (!qword_1001ACA38)
  {
    sub_100004A58(&qword_1001ACA20);
    sub_10000A780(&qword_1001ACA40, &qword_1001ACA18);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001ACA38);
  }
  return result;
}

uint64_t sub_100133038()
{
  uint64_t v1 = (int *)type metadata accessor for EventView();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80));
  sub_10001274C();
  sub_10001274C();
  swift_release();
  swift_release();
  uint64_t v3 = v2 + v1[13];
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = v2 + v1[14];
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  uint64_t v7 = v2 + v1[15];
  sub_10000570C(&qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v9 = *(void *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    }
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_1001332A8()
{
  uint64_t v1 = *(void *)(type metadata accessor for EventView() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_10012F6DC(v2);
}

unint64_t sub_10013332C()
{
  unint64_t result = qword_1001ACA48;
  if (!qword_1001ACA48)
  {
    sub_100004A58(&qword_1001A9748);
    sub_100004A58(&qword_1001A9768);
    sub_100133408(&qword_1001A9770, &qword_1001A9768, (void (*)(void))sub_1000C1D44);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001ACA48);
  }
  return result;
}

uint64_t sub_100133408(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100133484()
{
  unint64_t result = qword_1001ACA50;
  if (!qword_1001ACA50)
  {
    sub_100004A58(&qword_1001AC918);
    sub_1001336F8(&qword_1001ACA58, (void (*)(uint64_t))type metadata accessor for AttributionModule);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001ACA50);
  }
  return result;
}

uint64_t sub_100133528(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001335A0()
{
  unint64_t result = qword_1001ACA68;
  if (!qword_1001ACA68)
  {
    sub_100004A58(&qword_1001ACA28);
    sub_100132F94();
    sub_1001336F8((unint64_t *)&qword_1001A68E8, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001ACA68);
  }
  return result;
}

unint64_t sub_10013364C()
{
  unint64_t result = qword_1001ACA78;
  if (!qword_1001ACA78)
  {
    sub_100004A58(&qword_1001ACA10);
    sub_1001336F8(&qword_1001A8A08, (void (*)(uint64_t))type metadata accessor for AppModule);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001ACA78);
  }
  return result;
}

uint64_t sub_1001336F8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100133740(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10013378C()
{
  uint64_t v1 = (int *)type metadata accessor for EventView();
  unint64_t v2 = (*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v15 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v3 = type metadata accessor for ArtistPromotionalAssets();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v0 + v2;
  sub_10001274C();
  sub_10001274C();
  swift_release();
  swift_release();
  unint64_t v7 = v0 + v2 + v1[13];
  sub_10000570C(&qword_1001A5460);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for DismissAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  uint64_t v9 = v6 + v1[14];
  sub_10000570C(&qword_1001A5468);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  }
  else
  {
    swift_release();
  }
  uint64_t v11 = v6 + v1[15];
  sub_10000570C(&qword_1001A5470);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v13 = *(void *)(v12 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    }
  }
  else
  {
    swift_release();
  }
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + ((v2 + v15 + v5) & ~v5), v3);

  return swift_deallocObject();
}

uint64_t sub_100133A98()
{
  uint64_t v1 = *(void *)(type metadata accessor for EventView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  type metadata accessor for ArtistPromotionalAssets();

  return sub_10012F4C8(v0 + v2);
}

uint64_t sub_100133B80(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100133BE8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100133C48@<X0>(uint64_t a1@<X8>)
{
  return sub_10012D228(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100133C54@<X0>(uint64_t a1@<X8>)
{
  return sub_10012CE80(v1[4], v1[2], v1[3], a1);
}

ValueMetadata *type metadata accessor for EventViewSafeAreaPreferenceKey()
{
  return &type metadata for EventViewSafeAreaPreferenceKey;
}

ValueMetadata *type metadata accessor for EventViewHeightPreferenceKey()
{
  return &type metadata for EventViewHeightPreferenceKey;
}

ValueMetadata *type metadata accessor for HeaderContentHeightPreferenceKey()
{
  return &type metadata for HeaderContentHeightPreferenceKey;
}

uint64_t sub_100133C9C()
{
  return swift_getWitnessTable();
}

unint64_t sub_1001347EC(uint64_t a1)
{
  unint64_t result = sub_100132E60();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100134814(uint64_t a1)
{
  unint64_t result = sub_100131D68();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10013483C(uint64_t a1)
{
  unint64_t result = sub_100131DD8();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100134864(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 176);
  uint64_t v3 = *(void *)(a1 + 192);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100009CC8(v2);
  sub_100009CC8(v3);
  return a1;
}

uint64_t sub_1001348E0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100134920(uint64_t a1)
{
  return a1;
}

uint64_t sub_10013498C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1001349E8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100134A1C(uint64_t a1)
{
  return a1;
}

void sub_100134A6C()
{
  qword_1001ACA88 = 0x7370747468;
  unk_1001ACA90 = 0xE500000000000000;
}

void sub_100134A8C()
{
  unk_1001ACAA7 = -18;
}

uint64_t sub_100134ABC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URLComponents();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v42 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000570C(&qword_1001ACAB0);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v45 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  unint64_t v18 = (char *)&v39 - v17;
  uint64_t v19 = type metadata accessor for URL();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  uint64_t v44 = (char *)&v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v24);
  uint64_t v26 = (char *)&v39 - v25;
  URL.scheme.getter();
  uint64_t v28 = v27;
  swift_bridgeObjectRelease();
  if (v28)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v18, v2, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v18, 0, 1, v19);
    char v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
    if (v43(v18, 1, v19) == 1)
    {
LABEL_3:
      sub_10000ACE0((uint64_t)v18, &qword_1001AD200);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(a1, v2, v19);
    }
  }
  else
  {
    uint64_t v46 = a1;
    if (qword_1001A4EF8 != -1) {
      swift_once();
    }
    uint64_t v47 = 0x2F2F3A7370747468;
    unint64_t v48 = 0xE800000000000000;
    v30._countAndFlagsBits = URL.absoluteString.getter();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    URL.init(string:)();
    swift_bridgeObjectRelease();
    char v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
    unsigned int v31 = v43(v18, 1, v19);
    a1 = v46;
    if (v31 == 1) {
      goto LABEL_3;
    }
  }
  uint64_t v46 = a1;
  char v41 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
  v41(v26, v18, v19);
  URLComponents.init(url:resolvingAgainstBaseURL:)();
  uint64_t v40 = v5;
  uint64_t v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (!v32(v11, 1, v4))
  {
    if (qword_1001A4EF8 != -1) {
      swift_once();
    }
    swift_bridgeObjectRetain();
    URLComponents.scheme.setter();
  }
  if (!v32(v11, 1, v4))
  {
    if (qword_1001A4F00 != -1) {
      swift_once();
    }
    swift_bridgeObjectRetain();
    URLComponents.host.setter();
  }
  if (!v32(v11, 1, v4))
  {
    URL.path.getter();
    URLComponents.path.setter();
  }
  if (v32(v11, 1, v4))
  {
    uint64_t v33 = (uint64_t)v45;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v45, 1, 1, v19);
  }
  else
  {
    uint64_t v34 = v40;
    uint64_t v35 = v42;
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v42, v11, v4);
    uint64_t v33 = (uint64_t)v45;
    URLComponents.url.getter();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v4);
  }
  uint64_t v36 = v46;
  uint64_t v37 = v44;
  uint64_t v38 = (void (*)(uint64_t, char *, uint64_t))v41;
  v41(v44, v26, v19);
  if (v43((char *)v33, 1, v19) == 1)
  {
    v38(v36, v37, v19);
    sub_10000ACE0(v33, &qword_1001AD200);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v37, v19);
    v38(v36, (char *)v33, v19);
  }
  return sub_10000ACE0((uint64_t)v11, &qword_1001ACAB0);
}

void *sub_1001350DC()
{
  unint64_t v0 = sub_10005A86C(0);
  if (!*(void *)(v0 + 16) || (unint64_t v1 = sub_1000B81CC(0xD00000000000002DLL, 0x800000010015E420), (v2 & 1) == 0))
  {
    long long v5 = 0u;
    long long v6 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_100044E1C(*(void *)(v0 + 56) + 32 * v1, (uint64_t)&v5);
  swift_bridgeObjectRelease();
  if (!*((void *)&v6 + 1))
  {
LABEL_7:
    sub_10000ACE0((uint64_t)&v5, (uint64_t *)&unk_1001A9610);
    return _swiftEmptyArrayStorage;
  }
  sub_10000570C(&qword_1001A6B98);
  if (swift_dynamicCast()) {
    return (void *)v4;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1001351B4()
{
  uint64_t v1 = type metadata accessor for UniversalLinkRouter();
  __chkstk_darwin(v1, v2);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1001398C8();
  if (v5)
  {
    long long v6 = (void *)(v0 + *(int *)(v1 + 20));
    uint64_t v7 = v6[1];
    *(void *)(v5 + 64) = *v6;
    *(void *)(v5 + 72) = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_1001A4F38 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100017378(v8, (uint64_t)qword_1001B75B8);
    sub_1001359DC(v0, (uint64_t)v4);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      type metadata accessor for URL();
      sub_100135A9C(&qword_1001A6C50, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v15 = sub_1000FE1F8(v12, v13, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100135A40((uint64_t)v4);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "No remote configuration, not creating remote handle for %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100135A40((uint64_t)v4);
    }
  }
  return v5;
}

id sub_100135424()
{
  uint64_t v0 = sub_1001351B4();
  if (v0)
  {
    uint64_t v1 = v0;
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    type metadata accessor for RemoteViewConfiguration();
    sub_100135A9C(&qword_1001ACAA8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t v6 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v8 = v7;
    swift_release();
    id v9 = [objc_allocWithZone((Class)SBSRemoteAlertConfigurationContext) init:v1];
    sub_10000570C(qword_1001A9620);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100153180;
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 96) = &type metadata for Data;
    *(void *)(inited + 72) = v6;
    *(void *)(inited + 80) = v8;
    sub_10004DC50(v6, v8);
    sub_100149694(inited);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v9 setUserInfo:isa, 0xD000000000000013, 0x800000010015DE30];

    sub_100044C78(v6, v8);
    swift_release();
  }
  else
  {
    if (qword_1001A4F38 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100017378(v2, (uint64_t)qword_1001B75B8);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to encode remote configuration context for alert configuration", v5, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  return v9;
}

id sub_1001356C4()
{
  uint64_t v0 = sub_1001351B4();
  if (v0)
  {
    uint64_t v1 = v0;
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    type metadata accessor for RemoteViewConfiguration();
    sub_100135A9C(&qword_1001ACAA8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t v6 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v8 = v7;
    swift_release();
    id v9 = objc_allocWithZone((Class)NSUserActivity);
    NSString v10 = String._bridgeToObjectiveC()();
    id v11 = [v9 initWithActivityType:v10 v1];

    sub_10000570C(qword_1001A9620);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100153180;
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 96) = &type metadata for Data;
    *(void *)(inited + 72) = v6;
    *(void *)(inited + 80) = v8;
    sub_10004DC50(v6, v8);
    sub_100149694(inited);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v11 setUserInfo:isa, 0xD000000000000013, 0x800000010015DE30];

    sub_100044C78(v6, v8);
    swift_release();
  }
  else
  {
    if (qword_1001A4F38 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100017378(v2, (uint64_t)qword_1001B75B8);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to encode remote configuration context for user activity", v5, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  return v11;
}

uint64_t type metadata accessor for UniversalLinkRouter()
{
  uint64_t result = qword_1001ACB10;
  if (!qword_1001ACB10) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001359DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UniversalLinkRouter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100135A40(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UniversalLinkRouter();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100135A9C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_100135AE4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    id v9 = (uint64_t *)((char *)a1 + v8);
    NSString v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *id v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100135BBC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100135C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  id v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  void *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100135CBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  id v9 = (void *)(a2 + v7);
  void *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100135D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100135DD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  id v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  void *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100135E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100135E74);
}

uint64_t sub_100135E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100135F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100135F4C);
}

uint64_t sub_100135F4C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for URL();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_10013600C()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

id sub_1001360A0()
{
  id v0 = objc_allocWithZone((Class)ASCAdamID);
  swift_bridgeObjectRetain();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithStringValue:v1];

  uint64_t v3 = (void *)ASCLockupContextStandard;
  id v4 = ASCLockupKindApp;
  id v5 = v3;
  swift_bridgeObjectRetain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [self _requestWithID:v2 kind:v4 context:v5 productVariantID:v6];

  return v7;
}

id sub_1001361B0()
{
  sub_100007480((uint64_t)(v0 + 4), (uint64_t)v14);
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[9];
  id v5 = (objc_class *)type metadata accessor for AppStoreComponent.AppStoreCoordinator();
  NSString v6 = (char *)objc_allocWithZone(v5);
  id v7 = &v6[OBJC_IVAR____TtCV16EventViewService17AppStoreComponent19AppStoreCoordinator_metricsQuery];
  *(void *)id v7 = 0;
  *((void *)v7 + 1) = 0;
  sub_100007480((uint64_t)v14, (uint64_t)v7);
  sub_100012A58((uint64_t)v14);
  sub_100009CC8(v1);
  sub_100009CC8(v3);
  uint64_t v8 = v6;
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)&v8[OBJC_IVAR____TtCV16EventViewService17AppStoreComponent19AppStoreCoordinator_onOpen];
  *uint64_t v9 = v1;
  v9[1] = v2;
  unint64_t v10 = (uint64_t *)&v8[OBJC_IVAR____TtCV16EventViewService17AppStoreComponent19AppStoreCoordinator_onStateChange];
  *unint64_t v10 = v3;
  v10[1] = v4;
  sub_100009CC8(v1);
  sub_100009CC8(v3);

  v13.receiver = v8;
  v13.super_class = v5;
  id v11 = [super init];
  sub_100009CD8(v3);
  sub_100009CD8(v1);
  return v11;
}

id sub_1001362C0()
{
  id v0 = [objc_allocWithZone((Class)ASCLockupView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  uint64_t v1 = self;
  id v2 = v0;
  id v3 = [v1 clearColor];
  [v2 setBackgroundColor:v3];

  [v2 setTranslatesAutoresizingMaskIntoConstraints:0];
  sub_10000570C(&qword_1001ACC28);
  UIViewRepresentableContext.coordinator.getter();
  [v2 setDelegate:v6];

  id v4 = sub_1001360A0();
  [v2 setRequest:v4];

  return v2;
}

void sub_100136424(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10000570C(&qword_1001A95D0);
  __n128 v8 = __chkstk_darwin(v6 - 8, v7);
  unint64_t v10 = (char *)&aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = *(void (**)(uint64_t, __n128))(v2
                                               + OBJC_IVAR____TtCV16EventViewService17AppStoreComponent19AppStoreCoordinator_onStateChange);
  if (v11) {
    v11(a2, v8);
  }
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;
  if (v12 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v14 != v15)
  {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17) {
      goto LABEL_15;
    }
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;
    if (v18 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v20 != v21)
    {
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v23 & 1) == 0) {
        return;
      }
      goto LABEL_15;
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_15:
  uint64_t v24 = v3 + OBJC_IVAR____TtCV16EventViewService17AppStoreComponent19AppStoreCoordinator_onOpen;
  uint64_t v25 = *(void *)(v3 + OBJC_IVAR____TtCV16EventViewService17AppStoreComponent19AppStoreCoordinator_onOpen);
  if (v25)
  {
    uint64_t v26 = *(void *)(v24 + 8);
    uint64_t v27 = self;
    swift_retain();
    id v28 = [v27 mainBundle];
    v49._object = (void *)0xE000000000000000;
    v29._object = (void *)0x800000010015FC80;
    v29._countAndFlagsBits = 0xD000000000000026;
    v30._countAndFlagsBits = 0;
    v30._object = (void *)0xE000000000000000;
    v49._countAndFlagsBits = 0;
    Swift::String v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v29, (Swift::String_optional)0, (NSBundle)v28, v30, v49);

    Swift::String aBlock = v31;
    sub_100010B2C();
    StringProtocol.localizedUppercase.getter();
    swift_bridgeObjectRelease();
    uint64_t v32 = self;
    NSString v33 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v34 = [v32 textMetadataWithTitle:v33 subtitle:0];

    id v35 = objc_allocWithZone((Class)ASCLocalOffer);
    uint64_t v47 = v25;
    uint64_t v48 = v26;
    aBlock._countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
    aBlock._object = (void *)1107296256;
    uint64_t v45 = sub_100044790;
    uint64_t v46 = &unk_10019B988;
    uint64_t v36 = _Block_copy(&aBlock);
    sub_100009CC8(v25);
    id v37 = v34;
    swift_release();
    id v38 = [v35 initWithMetadata:v37 action:v36];

    _Block_release(v36);
    uint64_t v39 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v10, 1, 1, v39);
    type metadata accessor for MainActor();
    id v40 = a1;
    id v41 = v38;
    uint64_t v42 = static MainActor.shared.getter();
    char v43 = (void *)swift_allocObject();
    v43[2] = v42;
    v43[3] = &protocol witness table for MainActor;
    v43[4] = v40;
    v43[5] = v41;
    sub_10013AF58((uint64_t)v10, (uint64_t)&unk_1001ACC10, (uint64_t)v43);

    sub_100009CD8(v25);
    swift_release();
  }
}

uint64_t sub_10013683C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  type metadata accessor for MainActor();
  v5[4] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1001368D4, v7, v6);
}

uint64_t sub_1001368D4()
{
  uint64_t v1 = *(void **)(v0 + 16);
  swift_release();
  id v2 = [v1 lockup];
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = [v2 lockupWithOffer:*(void *)(v0 + 24)];
  }
  else
  {
    id v4 = 0;
  }
  [*(id *)(v0 + 16) setLockup:v4];

  id v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t type metadata accessor for AppStoreComponent.AppStoreCoordinator()
{
  return self;
}

id sub_100136B40()
{
  return sub_1001362C0();
}

uint64_t sub_100136B84()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 40);
  sub_10000570C(&qword_1001ACC28);
  UIViewRepresentableContext.coordinator.getter();
  uint64_t v3 = &v5[OBJC_IVAR____TtCV16EventViewService17AppStoreComponent19AppStoreCoordinator_metricsQuery];
  *(void *)uint64_t v3 = v2;
  *((void *)v3 + 1) = v1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

id sub_100136BFC@<X0>(void *a1@<X8>)
{
  id result = sub_1001361B0();
  *a1 = result;
  return result;
}

uint64_t sub_100136C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100137340();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100136CAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100137340();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100136D10()
{
}

id sub_100136D38()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtCV16EventViewService17AppStoreComponent19AppStoreCoordinator_metricsQuery + 8);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtCV16EventViewService17AppStoreComponent19AppStoreCoordinator_metricsQuery);
    sub_10000570C((uint64_t *)&unk_1001ACBF0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100153180;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v4;
    *(void *)(inited + 48) = v2;
    *(void *)(inited + 56) = v1;
    swift_bridgeObjectRetain();
    sub_1001497D8(inited);
    id v5 = objc_allocWithZone((Class)ASCMetricsActivity);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v7 = [v5 initWithFields:isa];

    return v7;
  }
  else
  {
    id v9 = objc_allocWithZone((Class)ASCMetricsActivity);
    return [v9 init];
  }
}

uint64_t sub_100136E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100136E6C()
{
  return swift_release();
}

uint64_t sub_100136E74()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100136EBC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  __n128 v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_100009854;
  return sub_10013683C(a1, v4, v5, v7, v6);
}

uint64_t destroy for AppStoreComponent(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 48)) {
    uint64_t result = swift_release();
  }
  if (*(void *)(a1 + 64))
  {
    return swift_release();
  }
  return result;
}

void *initializeWithCopy for AppStoreComponent(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  __n128 v8 = a2 + 6;
  uint64_t v7 = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    uint64_t v9 = a2[7];
    a1[6] = v7;
    a1[7] = v9;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 3) = *v8;
  }
  uint64_t v10 = a2[8];
  if (v10)
  {
    uint64_t v11 = a2[9];
    a1[8] = v10;
    a1[9] = v11;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  }
  return a1;
}

void *assignWithCopy for AppStoreComponent(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[6];
  if (a1[6])
  {
    if (v4)
    {
      uint64_t v5 = a2[7];
      a1[6] = v4;
      a1[7] = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = a2[7];
    a1[6] = v4;
    a1[7] = v6;
    swift_retain();
    goto LABEL_8;
  }
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
LABEL_8:
  uint64_t v7 = a2[8];
  if (!a1[8])
  {
    if (v7)
    {
      uint64_t v9 = a2[9];
      a1[8] = v7;
      a1[9] = v9;
      swift_retain();
      return a1;
    }
LABEL_14:
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    return a1;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v8 = a2[9];
  a1[8] = v7;
  a1[9] = v8;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for AppStoreComponent(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[6];
  if (a1[6])
  {
    if (v7)
    {
      uint64_t v8 = a2[7];
      a1[6] = v7;
      a1[7] = v8;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v7)
  {
    uint64_t v9 = a2[7];
    a1[6] = v7;
    a1[7] = v9;
    goto LABEL_8;
  }
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
LABEL_8:
  uint64_t v10 = a2[8];
  if (!a1[8])
  {
    if (v10)
    {
      uint64_t v12 = a2[9];
      a1[8] = v10;
      a1[9] = v12;
      return a1;
    }
LABEL_14:
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    return a1;
  }
  if (!v10)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v11 = a2[9];
  a1[8] = v10;
  a1[9] = v11;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for AppStoreComponent()
{
  return &type metadata for AppStoreComponent;
}

unint64_t sub_1001372EC()
{
  unint64_t result = qword_1001ACC18;
  if (!qword_1001ACC18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001ACC18);
  }
  return result;
}

unint64_t sub_100137340()
{
  unint64_t result = qword_1001ACC30;
  if (!qword_1001ACC30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001ACC30);
  }
  return result;
}

uint64_t sub_100137394(char a1, char a2)
{
  if (qword_10015C528[a1] == qword_10015C528[a2] && qword_10015C550[a1] == qword_10015C550[a2]) {
    char v3 = 1;
  }
  else {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_10013741C(char a1, char a2)
{
  if (*(void *)&aLocationmusic_1[8 * a1] == *(void *)&aLocationmusic_1[8 * a2]
    && *(void *)&aCalendar_3[8 * a1 + 8] == *(void *)&aCalendar_3[8 * a2 + 8])
  {
    char v3 = 1;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_1001374A4(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 7368801;
  }
  else {
    uint64_t v3 = 0x6C61646F6DLL;
  }
  if (v2) {
    unint64_t v4 = 0xE500000000000000;
  }
  else {
    unint64_t v4 = 0xE300000000000000;
  }
  if (a2) {
    uint64_t v5 = 7368801;
  }
  else {
    uint64_t v5 = 0x6C61646F6DLL;
  }
  if (a2) {
    unint64_t v6 = 0xE300000000000000;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10013753C(char a1, char a2)
{
  if (*(void *)&aDefault_3[8 * a1] == *(void *)&aDefault_3[8 * a2] && qword_10015C5F8[a1] == qword_10015C5F8[a2]) {
    char v3 = 1;
  }
  else {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_1001375C4(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD000000000000011;
  }
  else {
    unint64_t v3 = 0x73656C75646F6DLL;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000;
  }
  else {
    unint64_t v4 = 0x800000010015CF80;
  }
  if (a2) {
    unint64_t v5 = 0xD000000000000011;
  }
  else {
    unint64_t v5 = 0x73656C75646F6DLL;
  }
  if (a2) {
    unint64_t v6 = 0x800000010015CF80;
  }
  else {
    unint64_t v6 = 0xE700000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10013766C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x6449707061;
  }
  else {
    uint64_t v3 = 0x7972746E756F63;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x6449707061;
  }
  else {
    uint64_t v5 = 0x7972746E756F63;
  }
  if (a2) {
    unint64_t v6 = 0xE500000000000000;
  }
  else {
    unint64_t v6 = 0xE700000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10013770C(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD000000000000011;
  unint64_t v3 = 0x800000010015D000;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD000000000000011;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE600000000000000;
      unint64_t v5 = 0x747369747261;
      break;
    case 2:
      unint64_t v3 = 0xE500000000000000;
      unint64_t v5 = 0x65756E6576;
      break;
    case 3:
      break;
    case 4:
      unint64_t v5 = 0xD000000000000016;
      unint64_t v3 = 0x800000010015D020;
      break;
    default:
      unint64_t v3 = 0xE500000000000000;
      unint64_t v5 = 0x746E657665;
      break;
  }
  unint64_t v6 = 0x800000010015D000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE600000000000000;
      if (v5 == 0x747369747261) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xE500000000000000;
      unint64_t v2 = 0x65756E6576;
      goto LABEL_12;
    case 3:
LABEL_12:
      if (v5 == v2) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 4:
      unint64_t v6 = 0x800000010015D020;
      if (v5 != 0xD000000000000016) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
      unint64_t v6 = 0xE500000000000000;
      if (v5 != 0x746E657665) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

char *sub_1001378BC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000570C(&qword_1001A5390);
      uint64_t v10 = (char *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[40 * v8 + 32]) {
          memmove(v12, a4 + 32, 40 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v12 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100138D30(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1001379E0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000570C(&qword_1001A79D0);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100138E40(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100137AF0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000570C(qword_1001A6E50);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100138F34(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100137C00(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100137C48(a1, a2, a3, a4, &qword_1001A79C0, (uint64_t (*)(void))&type metadata accessor for Song, (uint64_t (*)(void))&type metadata accessor for Song);
}

uint64_t sub_100137C24(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100137C48(a1, a2, a3, a4, &qword_1001A79C8, (uint64_t (*)(void))&type metadata accessor for Genre, (uint64_t (*)(void))&type metadata accessor for Genre);
}

uint64_t sub_100137C48(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000570C(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100139028(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void *sub_100137EC8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000570C(&qword_1001ACCA0);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100139184(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_100137FF0(uint64_t *a1)
{
  uint64_t v2 = sub_10000570C(&qword_1001A5E08);
  __chkstk_darwin(v2 - 8, v3);
  char v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000570C(qword_1001ACCB0);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  if (!*a1) {
    return (char *)&_swiftEmptyArrayStorage;
  }
  if (v10 <= 0)
  {
    uint64_t v14 = &_swiftEmptyArrayStorage;
LABEL_11:
    uint64_t v17 = *(void *)(type metadata accessor for GridItem() - 8);
    uint64_t v18 = (uint64_t)v14 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
    sub_10013A518((uint64_t)a1, (uint64_t)v5);
    uint64_t v19 = sub_1001385B8((uint64_t)v9, v18, v10);
    uint64_t result = (char *)sub_10000ACE0((uint64_t)v9, qword_1001ACCB0);
    if (v19 == v10) {
      return (char *)v14;
    }
    __break(1u);
    goto LABEL_14;
  }
  sub_10000570C(&qword_1001A7CC8);
  uint64_t v11 = *(void *)(type metadata accessor for GridItem() - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (void *)swift_allocObject();
  uint64_t result = (char *)j__malloc_size(v14);
  if (v12)
  {
    if (&result[-v13] == (char *)0x8000000000000000 && v12 == -1) {
      goto LABEL_15;
    }
    void v14[2] = v10;
    v14[3] = 2 * ((uint64_t)&result[-v13] / v12);
    goto LABEL_11;
  }
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

void *sub_100138208(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000570C(&qword_1001A79D0);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_1001387D4((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_100044AD4();
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_1001382F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000570C(&qword_1001A79C8);
  uint64_t v3 = *(void *)(type metadata accessor for Genre() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      uint64_t v9 = sub_1001389D4(&v10, (uint64_t)v6 + v5, v1, a1);
      swift_bridgeObjectRetain();
      sub_100044AD4();
      if (v9 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_100138444(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t v8 = 2 * v5;
    if (v5 <= 0)
    {
      uint64_t v9 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 16 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8) {
          goto LABEL_19;
        }
        swift_arrayInitWithCopy();
        return v9;
      }
    }
    else
    {
      sub_10000570C(&qword_1001A79D0);
      uint64_t v9 = (void *)swift_allocObject();
      int64_t v10 = j__malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 17;
      }
      v9[2] = v5;
      v9[3] = 2 * (v11 >> 4);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001385B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_10000570C(&qword_1001A5E08);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (uint64_t *)((char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = sub_10000570C(qword_1001ACCB0);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (uint64_t *)((char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = sub_10000A3C4(v4, (uint64_t)v16, &qword_1001A5E08);
  uint64_t v18 = *(int *)(v13 + 44);
  *(void *)((char *)v16 + v18) = 0;
  if (!a2)
  {
LABEL_13:
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
LABEL_14:
    sub_10000A3C4((uint64_t)v16, a1, qword_1001ACCB0);
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (*v16)
    {
      uint64_t v27 = a1;
      uint64_t v19 = 1;
      while (1)
      {
        sub_10013A518((uint64_t)v16, (uint64_t)v11);
        uint64_t v20 = *v11;
        uint64_t result = sub_10000ACE0((uint64_t)v11, &qword_1001A5E08);
        if (v19 - 1 >= v20) {
          break;
        }
        if (v19 - 1 >= *v16) {
          goto LABEL_16;
        }
        uint64_t v21 = (char *)v16 + *(int *)(v8 + 28);
        *(void *)((char *)v16 + v18) = v19;
        uint64_t v22 = type metadata accessor for GridItem();
        uint64_t v23 = *(void *)(v22 - 8);
        (*(void (**)(uint64_t, char *, uint64_t))(v23 + 16))(a2, v21, v22);
        if (a3 == v19) {
          goto LABEL_12;
        }
        a2 += *(void *)(v23 + 72);
        uint64_t v24 = v19 + 1;
        if (v19++ == *v16)
        {
          a3 = v24 - 1;
LABEL_12:
          a1 = v27;
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    goto LABEL_13;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1001387D4(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1001389D4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Genre();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v44 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v11, v13);
  char v43 = (char *)&v34 - v15;
  uint64_t v45 = a4;
  uint64_t v18 = *(void *)(a4 + 56);
  uint64_t v17 = a4 + 56;
  uint64_t v16 = v18;
  uint64_t v39 = v17;
  uint64_t v19 = -1 << *(unsigned char *)(v17 - 24);
  if (-v19 < 64) {
    uint64_t v20 = ~(-1 << -(char)v19);
  }
  else {
    uint64_t v20 = -1;
  }
  unint64_t v21 = v20 & v16;
  if (!a2)
  {
    int64_t v22 = 0;
    a3 = 0;
LABEL_38:
    uint64_t v33 = v39;
    *a1 = v45;
    a1[1] = v33;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }
  if (!a3)
  {
    int64_t v22 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v36 = -1 << *(unsigned char *)(v17 - 24);
  id v37 = a1;
  int64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v40 = v9 + 32;
  uint64_t v41 = v9 + 16;
  int64_t v38 = (unint64_t)(63 - v19) >> 6;
  int64_t v35 = v38 - 1;
  uint64_t v42 = a3;
  uint64_t v24 = v43;
  if (!v21) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v25 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  unint64_t v26 = v25 | (v22 << 6);
  while (1)
  {
    ++v23;
    Swift::String v30 = v44;
    uint64_t v31 = *(void *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v44, *(void *)(v45 + 48) + v31 * v26, v8);
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v32(v24, v30, v8);
    uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v32)(a2, v24, v8);
    a3 = v42;
    if (v23 == v42) {
      goto LABEL_37;
    }
    a2 += v31;
    if (v21) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v27 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v27 >= v38) {
      goto LABEL_32;
    }
    unint64_t v28 = *(void *)(v39 + 8 * v27);
    if (!v28) {
      break;
    }
LABEL_18:
    unint64_t v21 = (v28 - 1) & v28;
    unint64_t v26 = __clz(__rbit64(v28)) + (v27 << 6);
    int64_t v22 = v27;
  }
  v22 += 2;
  if (v27 + 1 >= v38)
  {
    unint64_t v21 = 0;
    int64_t v22 = v27;
    goto LABEL_36;
  }
  unint64_t v28 = *(void *)(v39 + 8 * v22);
  if (v28) {
    goto LABEL_14;
  }
  int64_t v29 = v27 + 2;
  if (v27 + 2 >= v38) {
    goto LABEL_32;
  }
  unint64_t v28 = *(void *)(v39 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  int64_t v22 = v27 + 3;
  if (v27 + 3 >= v38)
  {
    unint64_t v21 = 0;
    int64_t v22 = v27 + 2;
    goto LABEL_36;
  }
  unint64_t v28 = *(void *)(v39 + 8 * v22);
  if (v28)
  {
LABEL_14:
    int64_t v27 = v22;
    goto LABEL_18;
  }
  int64_t v29 = v27 + 4;
  if (v27 + 4 >= v38)
  {
LABEL_32:
    unint64_t v21 = 0;
LABEL_36:
    a3 = v23;
LABEL_37:
    uint64_t v19 = v36;
    a1 = v37;
    goto LABEL_38;
  }
  unint64_t v28 = *(void *)(v39 + 8 * v29);
  if (v28)
  {
LABEL_17:
    int64_t v27 = v29;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v27 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v27 >= v38)
    {
      unint64_t v21 = 0;
      int64_t v22 = v35;
      goto LABEL_36;
    }
    unint64_t v28 = *(void *)(v39 + 8 * v27);
    ++v29;
    if (v28) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_100138D1C(void *a1)
{
  return sub_100137EC8(0, a1[2], 0, a1);
}

uint64_t sub_100138D30(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_10000570C(&qword_1001ACCA8);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100138E40(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100138F34(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100139028(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100139184(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10013927C(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_100137EC8(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[3 * a2 + 4];
    if (a1 != a2 || &v4[3 * a1 + 4] >= (void *)&v16[24 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[3 * a1 + 4], v16, 24 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001393F4(void *a1)
{
  unint64_t v1 = a1[2];
  if (!v1) {
    return 0;
  }
  unint64_t v3 = 0;
  int64_t v22 = a1 + 4;
  uint64_t v4 = (void **)(a1 + 5);
  do
  {
    uint64_t v6 = (uint64_t)*(v4 - 1);
    int64_t v5 = *v4;
    swift_bridgeObjectRetain();
    if (v6 == 0x747369747261 && v5 == (void *)0xE600000000000000) {
      goto LABEL_21;
    }
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_22;
    }
    if (v6 == 0x65756E6576 && v5 == (void *)0xE500000000000000) {
      goto LABEL_21;
    }
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_22;
    }
    if (v6 == 0xD000000000000011 && (void *)0x800000010015D000 == v5) {
      goto LABEL_21;
    }
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v10) {
      goto LABEL_22;
    }
    if (v6 == 0xD000000000000016 && (void *)0x800000010015D020 == v5)
    {
LABEL_21:
      swift_bridgeObjectRelease();
LABEL_22:
      swift_bridgeObjectRelease();
      unint64_t v12 = v3 + 1;
      if (__OFADD__(v3, 1))
      {
        __break(1u);
      }
      else
      {
        if (v12 >= v1) {
          return 0;
        }
        uint64_t v13 = &v22[2 * v12];
        uint64_t v15 = *v13;
        unint64_t v14 = v13[1];
        uint64_t v16 = HIBYTE(v14) & 0xF;
        if ((v14 & 0x2000000000000000) == 0) {
          uint64_t v16 = v15 & 0xFFFFFFFFFFFFLL;
        }
        if (!v16) {
          return 0;
        }
        if (v3 < v1)
        {
          uint64_t v17 = (uint64_t)*(v4 - 1);
          uint64_t v18 = *v4;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v23._countAndFlagsBits = v17;
          v23._object = v18;
          if (sub_1000D26D8(v23) != 5) {
            return v15;
          }
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      __break(1u);
      JUMPOUT(0x100139878);
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_22;
    }
    swift_bridgeObjectRelease();
    ++v3;
    v4 += 2;
  }
  while (v1 != v3);
  if (v1 < 2) {
    return 0;
  }
  uint64_t v15 = a1[6];
  unint64_t v19 = a1[7];
  uint64_t v20 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000) == 0) {
    uint64_t v20 = v15 & 0xFFFFFFFFFFFFLL;
  }
  if (!v20) {
    return 0;
  }
  swift_bridgeObjectRetain();
  return v15;
}

uint64_t sub_1001398C8()
{
  uint64_t v0 = type metadata accessor for URLQueryItem();
  unint64_t v1 = *(char **)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v109 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000570C(&qword_1001ACAB0);
  __chkstk_darwin(v5 - 8, v6);
  char v8 = (char *)&v109 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URLComponents();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = URL.host.getter();
  if (!v15) {
    return 0;
  }
  uint64_t v16 = v15;
  uint64_t v117 = v1;
  v17._countAndFlagsBits = v14;
  v17._object = v16;
  Swift::Int v18 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100195380, v17);
  swift_bridgeObjectRelease();
  if (v18)
  {
    if (v18 != 1) {
      return 0;
    }
    char v19 = 1;
  }
  else
  {
    char v19 = 0;
  }
  if ((sub_100149414(v19, (uint64_t)&off_1001953F8) & 1) == 0) {
    return 0;
  }
  uint64_t v112 = v10;
  uint64_t v113 = v13;
  uint64_t v20 = URL.pathComponents.getter();
  uint64_t v21 = *(void *)(v20 + 16);
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  int64_t v22 = (void *)swift_dynamicCastClass();
  if (!v22)
  {
    swift_bridgeObjectRelease();
    int64_t v22 = _swiftEmptyArrayStorage;
  }
  uint64_t v23 = v22[2];
  swift_release();
  if (v23 == v21 - (v21 != 0))
  {
    uint64_t v24 = (void *)swift_dynamicCastClass();
    uint64_t v25 = v112;
    if (!v24)
    {
      swift_bridgeObjectRelease();
      uint64_t v24 = _swiftEmptyArrayStorage;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v24 = sub_100138444(v20, v20 + 32, v21 != 0, (2 * v21) | 1);
    uint64_t v25 = v112;
  }
  uint64_t v114 = v24;
  swift_bridgeObjectRelease();
  if (!v114[2]) {
    goto LABEL_38;
  }
  uint64_t v27 = v114[4];
  uint64_t v26 = v114[5];
  swift_bridgeObjectRetain();
  if (!v26) {
    goto LABEL_38;
  }
  if (v27 != 0x746E657665 || v26 != 0xE500000000000000)
  {
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    unint64_t v28 = v113;
    if (v29) {
      goto LABEL_18;
    }
LABEL_38:
    swift_release();
    return 0;
  }
  swift_bridgeObjectRelease();
  unint64_t v28 = v113;
LABEL_18:
  URLComponents.init(url:resolvingAgainstBaseURL:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v8, 1, v9) == 1)
  {
    swift_release();
    sub_10000ACE0((uint64_t)v8, &qword_1001ACAB0);
    return 0;
  }
  Swift::String v30 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
  uint64_t v111 = v9;
  v30(v28, v8, v9);
  uint64_t v31 = (const char *)URLComponents.queryItems.getter();
  if (!v31) {
    uint64_t v31 = (const char *)_swiftEmptyArrayStorage;
  }
  uint64_t v32 = *((void *)v31 + 2);
  if (v32)
  {
    uint64_t v34 = v117 + 16;
    uint64_t v33 = (void (*)(char *, const char *, uint64_t))*((void *)v117 + 2);
    int64_t v35 = &v31[(v117[80] + 32) & ~(unint64_t)v117[80]];
    unint64_t v115 = *((void *)v117 + 9);
    uint64_t v116 = v33;
    uint64_t v36 = (void (**)(char *, uint64_t))(v117 + 8);
    uint64_t v110 = (uint64_t)v31;
    swift_bridgeObjectRetain();
    id v37 = _swiftEmptyArrayStorage;
    uint64_t v117 = v34;
    while (1)
    {
      v116(v4, v35, v0);
      uint64_t v39 = URLQueryItem.name.getter();
      uint64_t v41 = v40;
      v42._countAndFlagsBits = v39;
      v42._object = v41;
      Swift::Int v43 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100195420, v42);
      swift_bridgeObjectRelease();
      if (v43)
      {
        if (v43 != 1)
        {
          int64_t v38 = *v36;
          goto LABEL_25;
        }
        char v44 = 1;
      }
      else
      {
        char v44 = 0;
      }
      uint64_t v45 = URLQueryItem.value.getter();
      int64_t v38 = *v36;
      if (v46)
      {
        uint64_t v47 = v45;
        uint64_t v48 = v46;
        v38(v4, v0);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v37 = sub_100137EC8(0, v37[2] + 1, 1, v37);
        }
        Swift::String v49 = v37;
        unint64_t v50 = v37[2];
        uint64_t v51 = v49;
        unint64_t v52 = v49[3];
        if (v50 >= v52 >> 1) {
          uint64_t v51 = sub_100137EC8((void *)(v52 > 1), v50 + 1, 1, v51);
        }
        v51[2] = v50 + 1;
        uint64_t v53 = &v51[3 * v50];
        id v37 = v51;
        *((unsigned char *)v53 + 32) = v44;
        v53[5] = v47;
        v53[6] = v48;
        goto LABEL_26;
      }
LABEL_25:
      v38(v4, v0);
LABEL_26:
      v35 += v115;
      if (!--v32)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_43;
      }
    }
  }
  swift_bridgeObjectRelease();
  id v37 = _swiftEmptyArrayStorage;
LABEL_43:
  uint64_t v121 = v37;
  uint64_t v56 = v37[2];
  if (!v56)
  {
    unint64_t v76 = 0;
    uint64_t v60 = v111;
    uint64_t v61 = v113;
LABEL_142:
    sub_10013927C(v56, v76);
    uint64_t v103 = sub_1001393F4(v114);
    uint64_t v105 = v104;
    char v107 = v106;
    swift_release();
    if (v105)
    {
      uint64_t v108 = v121;
      type metadata accessor for RemoteViewConfiguration();
      uint64_t v54 = swift_allocObject();
      *(void *)(v54 + 16) = v103;
      *(void *)(v54 + 24) = v105;
      *(unsigned char *)(v54 + 32) = v107;
      *(void *)(v54 + 40) = v108;
      *(_OWORD *)(v54 + 48) = 0u;
      *(_OWORD *)(v54 + 64) = 0u;
      *(_OWORD *)(v54 + 80) = xmmword_100154D40;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v112 + 8))(v61, v60);
      return v54;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v112 + 8))(v61, v60);
    return 0;
  }
  unint64_t v57 = (unint64_t)v37;
  uint64_t v58 = v37 + 4;
  unint64_t v115 = v57;
  swift_bridgeObjectRetain();
  unint64_t v59 = 0;
  uint64_t v110 = (uint64_t)"UniversalLinkException";
  uint64_t v116 = (void (*)(char *, const char *, uint64_t))0x800000010015E3F0;
  uint64_t v117 = (char *)&type metadata for Any + 8;
  uint64_t v60 = v111;
  uint64_t v61 = v113;
  while (1)
  {
    uint64_t v62 = &v58[3 * v59];
    uint64_t v64 = v62[1];
    unint64_t v63 = v62[2];
    if (*(unsigned char *)v62 == 1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if ((v65 & 1) == 0) {
        goto LABEL_70;
      }
    }
    uint64_t v66 = HIBYTE(v63) & 0xF;
    if ((v63 & 0x2000000000000000) == 0) {
      uint64_t v66 = v64 & 0xFFFFFFFFFFFFLL;
    }
    if (!v66) {
      goto LABEL_70;
    }
    unint64_t v67 = sub_10005A86C(1);
    if (*(void *)(v67 + 16) && (unint64_t v68 = sub_1000B81CC(0xD00000000000002CLL, (uint64_t)v116), (v69 & 1) != 0))
    {
      sub_100044E1C(*(void *)(v67 + 56) + 32 * v68, (uint64_t)&v119);
    }
    else
    {
      long long v119 = 0u;
      long long v120 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((void *)&v120 + 1))
    {
      sub_10000ACE0((uint64_t)&v119, (uint64_t *)&unk_1001A9610);
LABEL_60:
      uint64_t v70 = _swiftEmptyArrayStorage;
      goto LABEL_61;
    }
    sub_10000570C(&qword_1001A6B98);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_60;
    }
    uint64_t v70 = v118;
LABEL_61:
    uint64_t v71 = v70[2];
    if (!v71) {
      break;
    }
    if (v70[4] == v64 && v70[5] == v63 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_69;
    }
    if (v71 == 1) {
      break;
    }
    if (v70[6] == v64 && v70[7] == v63 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_69:
      swift_bridgeObjectRelease();
LABEL_70:
      swift_bridgeObjectRelease();
      goto LABEL_71;
    }
    if (v71 == 2) {
      break;
    }
    uint64_t v72 = v70 + 9;
    uint64_t v73 = 2;
    while (1)
    {
      uint64_t v74 = v73 + 1;
      if (__OFADD__(v73, 1))
      {
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
        goto LABEL_155;
      }
      if (*(v72 - 1) == v64 && *v72 == v63) {
        break;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        break;
      }
      v72 += 2;
      ++v73;
      if (v74 == v71)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v60 = v111;
        uint64_t v61 = v113;
        goto LABEL_86;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v60 = v111;
    uint64_t v61 = v113;
LABEL_71:
    if (++v59 == v56)
    {
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v76 = v121[2];
      goto LABEL_141;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_86:
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v76 = v59 + 1;
  if (__OFADD__(v59, 1))
  {
LABEL_155:
    __break(1u);
    goto LABEL_156;
  }
  uint64_t v77 = v121;
  unint64_t v78 = v121[2];
  if (v76 == v78)
  {
LABEL_140:
    uint64_t v56 = v59;
LABEL_141:
    if ((uint64_t)v76 < v56) {
      goto LABEL_154;
    }
    goto LABEL_142;
  }
  unint64_t v115 = v110 | 0x8000000000000000;
  uint64_t v116 = (void (*)(char *, const char *, uint64_t))((char *)&type metadata for Any + 8);
  while (1)
  {
    if (v76 >= v78)
    {
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
      goto LABEL_149;
    }
    uint64_t v79 = (uint64_t)&v77[3 * v76 + 4];
    uint64_t v80 = (uint64_t *)(v79 + 8);
    uint64_t v81 = *(void *)(v79 + 8);
    unint64_t v82 = *(void *)(v79 + 16);
    if (*(unsigned char *)v79 == 1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      char v83 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if ((v83 & 1) == 0) {
        goto LABEL_111;
      }
    }
    uint64_t v84 = HIBYTE(v82) & 0xF;
    if ((v82 & 0x2000000000000000) == 0) {
      uint64_t v84 = v81 & 0xFFFFFFFFFFFFLL;
    }
    if (!v84) {
      goto LABEL_111;
    }
    unint64_t v85 = sub_10005A86C(1);
    if (*(void *)(v85 + 16) && (unint64_t v86 = sub_1000B81CC(0xD00000000000002CLL, v115), (v87 & 1) != 0))
    {
      sub_100044E1C(*(void *)(v85 + 56) + 32 * v86, (uint64_t)&v119);
    }
    else
    {
      long long v119 = 0u;
      long long v120 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((void *)&v120 + 1))
    {
      sub_10000ACE0((uint64_t)&v119, (uint64_t *)&unk_1001A9610);
LABEL_105:
      uint64_t v88 = _swiftEmptyArrayStorage;
      goto LABEL_106;
    }
    sub_10000570C(&qword_1001A6B98);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_105;
    }
    uint64_t v88 = v118;
LABEL_106:
    uint64_t v89 = v88[2];
    if (!v89) {
      goto LABEL_124;
    }
    if ((v88[4] != v81 || v88[5] != v82) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (v89 == 1) {
        goto LABEL_124;
      }
      if (v88[6] != v81 || v88[7] != v82)
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          break;
        }
      }
    }
LABEL_110:
    swift_bridgeObjectRelease();
LABEL_111:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v60 = v111;
    if (v59 != v76)
    {
      if ((v59 & 0x8000000000000000) != 0) {
        goto LABEL_150;
      }
      unint64_t v90 = v77[2];
      if (v59 >= v90) {
        goto LABEL_151;
      }
      if (v76 >= v90) {
        goto LABEL_152;
      }
      uint64_t v91 = (unsigned __int8 *)&v77[3 * v59 + 4];
      LODWORD(v117) = *v91;
      uint64_t v93 = *((void *)v91 + 1);
      uint64_t v92 = *((void *)v91 + 2);
      char v94 = *(unsigned char *)v79;
      uint64_t v96 = *v80;
      uint64_t v95 = v80[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v77 = sub_100138D1C(v77);
      }
      uint64_t v97 = (uint64_t)&v77[3 * v59 + 4];
      *(unsigned char *)uint64_t v97 = v94;
      *(void *)(v97 + 8) = v96;
      *(void *)(v97 + 16) = v95;
      uint64_t result = swift_bridgeObjectRelease();
      if (v76 >= v77[2]) {
        goto LABEL_153;
      }
      uint64_t v98 = (uint64_t)&v77[3 * v76 + 4];
      *(unsigned char *)uint64_t v98 = (_BYTE)v117;
      *(void *)(v98 + 8) = v93;
      *(void *)(v98 + 16) = v92;
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v60 = v111;
    }
    BOOL v99 = __OFADD__(v59++, 1);
    uint64_t v61 = v113;
    if (v99) {
      goto LABEL_148;
    }
    BOOL v99 = __OFADD__(v76++, 1);
    if (v99) {
      goto LABEL_147;
    }
LABEL_121:
    unint64_t v78 = v77[2];
    if (v76 == v78)
    {
      uint64_t v121 = v77;
      goto LABEL_140;
    }
  }
  if (v89 == 2)
  {
LABEL_124:
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v60 = v111;
    uint64_t v61 = v113;
    BOOL v99 = __OFADD__(v76++, 1);
    if (v99) {
      goto LABEL_147;
    }
    goto LABEL_121;
  }
  uint64_t v100 = (char *)(v88 + 9);
  uint64_t v101 = 2;
  while (!__OFADD__(v101, 1))
  {
    if (*((void *)v100 - 1) == v81 && *(void *)v100 == v82) {
      goto LABEL_110;
    }
    uint64_t v109 = v101 + 1;
    uint64_t v110 = v101;
    uint64_t v117 = v100;
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      goto LABEL_110;
    }
    uint64_t v100 = v117 + 16;
    uint64_t v101 = v110 + 1;
    if (v109 == v89) {
      goto LABEL_124;
    }
  }
LABEL_156:
  __break(1u);
  return result;
}

uint64_t sub_10013A518(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001A5E08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013A580()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ObservationRegistrar();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

double sub_10013A660()
{
  return sub_10013AACC() * -0.022;
}

uint64_t sub_10013A684()
{
  return sub_10013A76C();
}

double sub_10013A6A4()
{
  swift_getKeyPath();
  sub_10013A8C4();
  swift_release();
  return *(double *)(v0 + *(void *)(*(void *)v0 + 104));
}

uint64_t sub_10013A72C()
{
  return sub_10013A76C();
}

uint64_t sub_10013A74C()
{
  return sub_10013A76C();
}

uint64_t sub_10013A76C()
{
  return swift_release();
}

double sub_10013A80C()
{
  return sub_10013AA44() * 0.92;
}

double sub_10013A830()
{
  return sub_10013AACC() * 0.96;
}

double sub_10013A854()
{
  return sub_10013AA44() * 0.92 * 0.14;
}

uint64_t sub_10013A884(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  sub_10013AB54(a1);
  return v2;
}

uint64_t sub_10013A8C4()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t sub_10013A968()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

double sub_10013AA44()
{
  swift_getKeyPath();
  sub_10013A8C4();
  swift_release();
  return *(double *)(v0 + *(void *)(*(void *)v0 + 112));
}

double sub_10013AACC()
{
  swift_getKeyPath();
  sub_10013A8C4();
  swift_release();
  return *(double *)(v0 + *(void *)(*(void *)v0 + 120));
}

uint64_t *sub_10013AB54(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 104)) = 0;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 112)) = 0;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 120)) = 0;
  ObservationRegistrar.init()();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 32))((uint64_t)v1 + *(void *)(*v1 + 96), a1);
  return v1;
}

uint64_t sub_10013AC40()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 96));
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 128);
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_10013AD08()
{
  sub_10013AC40();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SavedWallpaperViewModel()
{
  return sub_10000B72C();
}

void sub_10013AD78(double *a1@<X8>)
{
  *a1 = sub_10013AACC();
}

uint64_t sub_10013ADA4()
{
  return sub_10013A76C();
}

uint64_t sub_10013ADE8()
{
  return 16;
}

__n128 sub_10013ADF4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_10013AE00(double *a1@<X8>)
{
  *a1 = sub_10013AA44();
}

uint64_t sub_10013AE2C()
{
  return sub_10013A76C();
}

uint64_t sub_10013AE70()
{
  return 16;
}

__n128 sub_10013AE7C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_10013AE88()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + *(void *)(**(void **)(v0 + 16) + 112)) = result;
  return result;
}

void sub_10013AEAC(double *a1@<X8>)
{
  *a1 = sub_10013A6A4();
}

uint64_t sub_10013AED8()
{
  return sub_10013A76C();
}

uint64_t sub_10013AF1C()
{
  return 16;
}

__n128 sub_10013AF28(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_10013AF34()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + *(void *)(**(void **)(v0 + 16) + 104)) = result;
  return result;
}

uint64_t sub_10013AF58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10000ACE0(a1, &qword_1001A95D0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_10013B104()
{
  swift_getKeyPath();
  sub_10013DDC4(&qword_1001ACE20, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_10013B1A4@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10013DDC4(&qword_1001ACE20, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 16);
  return result;
}

uint64_t sub_10013B24C()
{
  return swift_release();
}

uint64_t sub_10013B31C@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_10013DDC4(&qword_1001ACE20, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  return sub_1000C6C08(v1 + 24, a1);
}

uint64_t sub_10013B3E0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10013DDC4(&qword_1001ACE20, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  return sub_1000C6C08(v3 + 24, a2);
}

uint64_t sub_10013B4A4(uint64_t a1)
{
  sub_1000C6C08(a1, (uint64_t)v2);
  swift_getKeyPath();
  sub_10013DDC4(&qword_1001ACE20, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_10000ACE0((uint64_t)v2, &qword_1001A5940);
}

uint64_t sub_10013B58C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 24;
  swift_beginAccess();
  sub_10010397C(a2, v3);
  return swift_endAccess();
}

uint64_t sub_10013B5F0()
{
  return swift_retain();
}

uint64_t sub_10013B694@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10013DDC4(&qword_1001ACE20, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + 64);
  return swift_retain();
}

uint64_t sub_10013B740()
{
  return swift_release();
}

uint64_t sub_10013B820()
{
  return swift_retain();
}

uint64_t sub_10013B8C4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10013DDC4(&qword_1001ACE20, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + 72);
  return swift_retain();
}

uint64_t sub_10013B970()
{
  return swift_release();
}

uint64_t sub_10013BA50()
{
  uint64_t v1 = type metadata accessor for MusicPlayer.Queue.Entry();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000570C(&qword_1001ACE50);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  v20[0] = v0;
  sub_10013DDC4(&qword_1001ACE20, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  sub_1000C6C08(v0 + 24, (uint64_t)v21);
  uint64_t v10 = v22;
  if (v22)
  {
    uint64_t v11 = v23;
    uint64_t v12 = sub_10000AC9C(v21, v22);
    uint64_t v13 = *(void *)(v10 - 8);
    __n128 v14 = __chkstk_darwin(v12, v12);
    uint64_t v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v13 + 16))(v16, v14);
    sub_10000ACE0((uint64_t)v21, &qword_1001A5940);
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 96))(v10, v11);
    LOBYTE(v11) = v18;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v10);
    if ((v11 & 1) == 0) {
      return v17;
    }
  }
  else
  {
    sub_10000ACE0((uint64_t)v21, &qword_1001A5940);
  }
  type metadata accessor for SystemMusicPlayer();
  static SystemMusicPlayer.shared.getter();
  dispatch thunk of SystemMusicPlayer.queue.getter();
  swift_release();
  dispatch thunk of MusicPlayer.Queue.currentEntry.getter();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v9, 1, v1))
  {
    sub_10000ACE0((uint64_t)v9, &qword_1001ACE50);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v9, v1);
    sub_10000ACE0((uint64_t)v9, &qword_1001ACE50);
    uint64_t v17 = MusicPlayer.Queue.Entry.endTime.getter();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
  return v17;
}

double sub_10013BDD8()
{
  double v0 = COERCE_DOUBLE(sub_10013BA50());
  double v1 = 0.0;
  if ((v2 & 1) == 0)
  {
    double v3 = v0;
    if (v0 > 0.0
      && ((~*(void *)&v0 & 0x7FF0000000000000) != 0 || (*(void *)&v0 & 0xFFFFFFFFFFFFFLL) == 0)
      && (sub_10013BE94() & 1) != 0)
    {
      type metadata accessor for SystemMusicPlayer();
      static SystemMusicPlayer.shared.getter();
      dispatch thunk of MusicPlayer.playbackTime.getter();
      double v5 = v4;
      swift_release();
      double v6 = v5 / v3;
      BOOL v7 = (COERCE_UNSIGNED_INT64(v5 / v3) & 0xFFFFFFFFFFFFFLL) != 0
        && (~COERCE__INT64(v5 / v3) & 0x7FF0000000000000) == 0;
      if (v6 >= 0.0 && !v7)
      {
        if (v6 <= 1.0) {
          return v5 / v3;
        }
        else {
          return 1.0;
        }
      }
    }
  }
  return v1;
}

uint64_t sub_10013BE94()
{
  uint64_t v1 = type metadata accessor for MusicPlayer.Queue.Entry();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  double v5 = (char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000570C(&qword_1001ACE50);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000570C(&qword_1001ACE58);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SystemMusicPlayer();
  static SystemMusicPlayer.shared.getter();
  dispatch thunk of SystemMusicPlayer.queue.getter();
  swift_release();
  dispatch thunk of MusicPlayer.Queue.currentEntry.getter();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v9, 1, v1))
  {
    __n128 v14 = &qword_1001ACE50;
    uint64_t v15 = (uint64_t)v9;
LABEL_5:
    sub_10000ACE0(v15, v14);
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    goto LABEL_6;
  }
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v9, v1);
  sub_10000ACE0((uint64_t)v9, &qword_1001ACE50);
  MusicPlayer.Queue.Entry.item.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  uint64_t v16 = type metadata accessor for MusicPlayer.Queue.Entry.Item();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v13, 1, v16) == 1)
  {
    __n128 v14 = &qword_1001ACE58;
    uint64_t v15 = (uint64_t)v13;
    goto LABEL_5;
  }
  uint64_t v18 = MusicPlayer.Queue.Entry.Item.id.getter();
  uint64_t v19 = v31;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v13, v16);
LABEL_6:
  swift_getKeyPath();
  v33[0] = v0;
  sub_10013DDC4(&qword_1001ACE20, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  sub_1000C6C08(v0 + 24, (uint64_t)v34);
  uint64_t v20 = v35;
  if (!v35)
  {
    sub_10000ACE0((uint64_t)v34, &qword_1001A5940);
    if (!v19) {
      goto LABEL_15;
    }
LABEL_13:
    char v30 = 0;
LABEL_19:
    swift_bridgeObjectRelease();
    return v30 & 1;
  }
  uint64_t v21 = v36;
  uint64_t v22 = sub_10000AC9C(v34, v35);
  uint64_t v23 = *(void *)(v20 - 8);
  __n128 v24 = __chkstk_darwin(v22, v22);
  uint64_t v26 = (char *)v33 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v23 + 16))(v26, v24);
  sub_10000ACE0((uint64_t)v34, &qword_1001A5940);
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 88))(v20, v21);
  uint64_t v29 = v28;
  (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v20);
  if (v29)
  {
    if (v19)
    {
      if (v27 == v18 && v19 == v29)
      {
        swift_bridgeObjectRelease();
        char v30 = 1;
      }
      else
      {
        char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      char v30 = 0;
    }
    goto LABEL_19;
  }
  if (v19) {
    goto LABEL_13;
  }
LABEL_15:
  char v30 = 1;
  return v30 & 1;
}

uint64_t sub_10013C360()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000570C(&qword_1001ACE10);
  __chkstk_darwin(v2 - 8, v3);
  double v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000570C(&qword_1001ACE18);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10013D37C();
  swift_getKeyPath();
  uint64_t v11 = v0 + OBJC_IVAR____TtC16EventViewService16AppleMusicPlayer___observationRegistrar;
  uint64_t v44 = v0;
  uint64_t v12 = sub_10013DDC4(&qword_1001ACE20, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(void *)(v0 + 64))
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  swift_getKeyPath();
  uint64_t v44 = v0;
  uint64_t v41 = v12;
  uint64_t v42 = v11;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(void *)(v0 + 72))
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  uint64_t v40 = type metadata accessor for SystemMusicPlayer();
  static SystemMusicPlayer.shared.getter();
  MusicPlayer.state.getter();
  swift_release();
  uint64_t v13 = dispatch thunk of MusicPlayer.State.objectWillChange.getter();
  swift_release();
  uint64_t v44 = v13;
  id v39 = self;
  id v43 = [v39 mainRunLoop];
  uint64_t v14 = type metadata accessor for NSRunLoop.SchedulerOptions();
  uint64_t v15 = *(void *)(v14 - 8);
  id v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  uint64_t v38 = v15 + 56;
  v37(v5, 1, 1, v14);
  uint64_t v36 = sub_10000570C(&qword_1001ACE28);
  unint64_t v35 = sub_10013DD84();
  uint64_t v34 = sub_10000A780(&qword_1001ACE38, &qword_1001ACE28);
  uint64_t v33 = sub_10013DDC4(&qword_1001ACE40, (void (*)(uint64_t))sub_10013DD84);
  Publisher.receive<A>(on:options:)();
  sub_10000ACE0((uint64_t)v5, &qword_1001ACE10);

  swift_release();
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_10013DE44;
  *(void *)(v17 + 24) = v16;
  uint64_t v32 = sub_10000A780(&qword_1001ACE48, &qword_1001ACE18);
  uint64_t v18 = Publisher<>.sink(receiveValue:)();
  swift_release();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v7 + 8);
  v30[1] = v7 + 8;
  uint64_t v31 = v19;
  v19(v10, v6);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v21 = v6;
  __chkstk_darwin(KeyPath, v22);
  v30[-2] = v1;
  v30[-1] = v18;
  uint64_t v44 = v1;
  v30[2] = (char *)&type metadata for () + 8;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_release();
  static SystemMusicPlayer.shared.getter();
  dispatch thunk of SystemMusicPlayer.queue.getter();
  swift_release();
  uint64_t v23 = dispatch thunk of MusicPlayer.Queue.objectWillChange.getter();
  swift_release();
  uint64_t v44 = v23;
  id v43 = [v39 mainRunLoop];
  v37(v5, 1, 1, v14);
  Publisher.receive<A>(on:options:)();
  sub_10000ACE0((uint64_t)v5, &qword_1001ACE10);

  swift_release();
  uint64_t v24 = swift_allocObject();
  swift_weakInit();
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = sub_10013DE8C;
  *(void *)(v25 + 24) = v24;
  uint64_t v26 = Publisher<>.sink(receiveValue:)();
  swift_release();
  v31(v10, v21);
  uint64_t v27 = swift_getKeyPath();
  __chkstk_darwin(v27, v28);
  v30[-2] = v1;
  v30[-1] = v26;
  uint64_t v44 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return swift_release();
}

uint64_t sub_10013C9F0(void *a1)
{
  sub_10000AD3C((uint64_t)a1, (uint64_t)v9);
  swift_getKeyPath();
  sub_10013DDC4(&qword_1001ACE20, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  sub_10000ACE0((uint64_t)v9, &qword_1001A5940);
  swift_getKeyPath();
  v9[0] = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  type metadata accessor for SystemMusicPlayer();
  static SystemMusicPlayer.shared.getter();
  sub_10000570C(&qword_1001ACE88);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100153180;
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = sub_10000AC9C(a1, v4);
  *(void *)(v3 + 56) = v4;
  *(void *)(v3 + 64) = *(void *)(v5 + 8);
  uint64_t v7 = sub_10000A7C4((uint64_t *)(v3 + 32));
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(v7, v6, v4);
  type metadata accessor for MusicPlayer.Queue();
  dispatch thunk of MusicPlayer.Queue.__allocating_init(arrayLiteral:)();
  dispatch thunk of SystemMusicPlayer.queue.setter();
  swift_release();
  return sub_10013E16C();
}

void sub_10013CC08()
{
  if (sub_10013BE94())
  {
    sub_10013E16C();
  }
  else
  {
    if (qword_1001A4F38 != -1) {
      swift_once();
    }
    uint64_t v0 = type metadata accessor for Logger();
    sub_100017378(v0, (uint64_t)qword_1001B75B8);
    oslog = Logger.logObject.getter();
    os_log_type_t v1 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v1))
    {
      uint64_t v2 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v1, "Player asked to resume song but current song not in system player queue.", v2, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_10013CD18()
{
  if (sub_10013BE94())
  {
    type metadata accessor for SystemMusicPlayer();
    static SystemMusicPlayer.shared.getter();
    dispatch thunk of MusicPlayer.pause()();
    swift_release();
  }
  else
  {
    if (qword_1001A4F38 != -1) {
      swift_once();
    }
    uint64_t v0 = type metadata accessor for Logger();
    sub_100017378(v0, (uint64_t)qword_1001B75B8);
    oslog = Logger.logObject.getter();
    os_log_type_t v1 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v1))
    {
      uint64_t v2 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v1, "Failed to pause song. Current song not in System player..", v2, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_10013CE44()
{
  return _swift_task_switch(sub_10013CE60, 0, 0);
}

uint64_t sub_10013CE60()
{
  type metadata accessor for SystemMusicPlayer();
  *(void *)(v0 + 56) = static SystemMusicPlayer.shared.getter();
  uint64_t v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of MusicPlayer.play()
                         + async function pointer to dispatch thunk of MusicPlayer.play());
  os_log_type_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v1;
  void *v1 = v0;
  v1[1] = sub_10013CF18;
  return v3();
}

uint64_t sub_10013CF18()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10013D148;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_10013D034;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10013D034()
{
  if (qword_1001A4F38 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100017378(v1, (uint64_t)qword_1001B75B8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Song playback started.", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10013D148()
{
  uint64_t v10 = v0;
  swift_release();
  if (qword_1001A4F38 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100017378(v1, (uint64_t)qword_1001B75B8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    *(void *)(v0 + 48) = sub_1000FE1F8(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to play song with error %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

void sub_10013D37C()
{
  uint64_t v1 = type metadata accessor for MusicPlayer.PlaybackStatus();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_10013BE94() & 1) == 0)
  {
LABEL_4:
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath, v8);
    *(&v19 - 2) = v0;
    *((unsigned char *)&v19 - 8) = 0;
    uint64_t v20 = v0;
    sub_10013DDC4(&qword_1001ACE20, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
LABEL_5:
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    return;
  }
  type metadata accessor for SystemMusicPlayer();
  static SystemMusicPlayer.shared.getter();
  MusicPlayer.state.getter();
  swift_release();
  dispatch thunk of MusicPlayer.State.playbackStatus.getter();
  swift_release();
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v5, v1);
  if (v6 == enum case for MusicPlayer.PlaybackStatus.stopped(_:))
  {
    if (sub_10013BDD8() <= 0.0) {
      return;
    }
    goto LABEL_4;
  }
  if (v6 == enum case for MusicPlayer.PlaybackStatus.playing(_:))
  {
    uint64_t v9 = swift_getKeyPath();
    __chkstk_darwin(v9, v10);
    *(&v19 - 2) = v0;
    *((unsigned char *)&v19 - 8) = 2;
    uint64_t v20 = v0;
    sub_10013DDC4(&qword_1001ACE20, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
    goto LABEL_5;
  }
  if (v6 == enum case for MusicPlayer.PlaybackStatus.paused(_:)
    || v6 == enum case for MusicPlayer.PlaybackStatus.interrupted(_:))
  {
    uint64_t v12 = swift_getKeyPath();
    __chkstk_darwin(v12, v13);
    *(&v19 - 2) = v0;
    *((unsigned char *)&v19 - 8) = 3;
    uint64_t v20 = v0;
    sub_10013DDC4(&qword_1001ACE20, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    static SystemMusicPlayer.shared.getter();
    dispatch thunk of MusicPlayer.playbackTime.getter();
    double v15 = v14;
    swift_release();
    if (v15 == 0.0)
    {
      uint64_t v16 = swift_getKeyPath();
      __chkstk_darwin(v16, v17);
      *(&v19 - 2) = v0;
      *((unsigned char *)&v19 - 8) = 0;
      uint64_t v20 = v0;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
    }
  }
  else if (v6 != enum case for MusicPlayer.PlaybackStatus.seekingForward(_:) {
         && v6 != enum case for MusicPlayer.PlaybackStatus.seekingBackward(_:))
  }
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
}

uint64_t sub_10013D8C4()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10013D37C();
    return swift_release();
  }
  return result;
}

uint64_t sub_10013D91C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if ((sub_10013BE94() & 1) == 0)
    {
      uint64_t KeyPath = swift_getKeyPath();
      __chkstk_darwin(KeyPath, v2);
      sub_10013DDC4(&qword_1001ACE20, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_10013DA5C()
{
  sub_10000ACE0(v0 + 24, &qword_1001A5940);
  swift_release();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC16EventViewService16AppleMusicPlayer___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_10013DB1C()
{
  return type metadata accessor for AppleMusicPlayer();
}

uint64_t type metadata accessor for AppleMusicPlayer()
{
  uint64_t result = qword_1001ACD68;
  if (!qword_1001ACD68) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10013DB70()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

double sub_10013DC20()
{
  return sub_10013BDD8();
}

uint64_t sub_10013DC44()
{
  uint64_t v1 = *v0;
  swift_getKeyPath();
  sub_10013DDC4(&qword_1001ACE20, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v1 + 16);
}

uint64_t sub_10013DCE4(void *a1)
{
  return sub_10013C9F0(a1);
}

void sub_10013DD08()
{
}

void sub_10013DD2C()
{
}

uint64_t sub_10013DD50()
{
  return sub_10013C360();
}

unint64_t sub_10013DD84()
{
  unint64_t result = qword_1001ACE30;
  if (!qword_1001ACE30)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001ACE30);
  }
  return result;
}

uint64_t sub_10013DDC4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10013DE0C()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_10013DE44()
{
  return sub_10013D8C4();
}

uint64_t sub_10013DE4C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10013DE74()
{
  return sub_10013DF5C();
}

uint64_t sub_10013DE8C()
{
  return sub_10013D91C();
}

uint64_t sub_10013DE94()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10013DECC()
{
  return sub_10013DF20();
}

void sub_10013DEEC()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 16) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_10013DF04()
{
  return sub_10013B58C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10013DF20()
{
  *(void *)(*(void *)(v0 + 16) + 72) = *(void *)(v0 + 24);
  swift_retain();
  return swift_release();
}

uint64_t sub_10013DF5C()
{
  *(void *)(*(void *)(v0 + 16) + 64) = *(void *)(v0 + 24);
  swift_retain();
  return swift_release();
}

uint64_t sub_10013DF98(uint64_t a1, int *a2)
{
  int v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10013E074;
  return v6(a1);
}

uint64_t sub_10013E074()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10013E16C()
{
  uint64_t v0 = sub_10000570C(&qword_1001A95D0);
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v3 = (char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for TaskPriority();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_10000ACE0((uint64_t)v3, &qword_1001A95D0);
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v3, v4);
    if (*(void *)(v6 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v8 = v9;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
    }
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = &unk_1001ACE68;
  *(void *)(v10 + 24) = v6;
  if (v8 | v7)
  {
    v12[0] = 0;
    v12[1] = 0;
    void v12[2] = v7;
    uint64_t v12[3] = v8;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_10013E398()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10013E3D0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100009854;
  return _swift_task_switch(sub_10013CE60, 0, 0);
}

uint64_t sub_10013E474(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10003E098;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1001ACE70 + dword_1001ACE70);
  return v6(a1, v4);
}

uint64_t sub_10013E52C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100009854;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1001ACE70 + dword_1001ACE70);
  return v6(a1, v4);
}

uint64_t sub_10013E5F0()
{
  return sub_10013DF04();
}

void sub_10013E608()
{
}

uint64_t getEnumTagSinglePayload for ConditionalFrameModifier(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[40]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ConditionalFrameModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConditionalFrameModifier()
{
  return &type metadata for ConditionalFrameModifier;
}

uint64_t sub_10013E6D4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10013E6F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000570C(&qword_1001ACE90);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v9 = sub_10000570C(&qword_1001ACE98);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v8, a1, v9);
  uint64_t v10 = &v8[*(int *)(v5 + 44)];
  long long v11 = v13[1];
  *(_OWORD *)uint64_t v10 = v13[0];
  *((_OWORD *)v10 + 1) = v11;
  *((_OWORD *)v10 + 2) = v13[2];
  return sub_10000A3C4((uint64_t)v8, a2, &qword_1001ACE90);
}

uint64_t sub_10013E83C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ConditionalFontModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ConditionalFontModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ConditionalFontModifier()
{
  return &type metadata for ConditionalFontModifier;
}

ValueMetadata *type metadata accessor for ConditionalFrameModifier.Size()
{
  return &type metadata for ConditionalFrameModifier.Size;
}

unint64_t sub_10013E950()
{
  unint64_t result = qword_1001ACEA0;
  if (!qword_1001ACEA0)
  {
    sub_100004A58(&qword_1001ACE90);
    sub_10000A780(&qword_1001ACEA8, &qword_1001ACE98);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001ACEA0);
  }
  return result;
}

uint64_t sub_10013E9F0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10013EA0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000570C(&qword_1001ACED8);
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v20 - v12;
  if (*v2) {
    double v14 = (uint64_t *)(v2 + 16);
  }
  else {
    double v14 = (uint64_t *)(v2 + 8);
  }
  uint64_t v15 = *v14;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v17 = sub_10000570C(&qword_1001ACEE0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v9, a1, v17);
  uint64_t v18 = (uint64_t *)&v9[*(int *)(v6 + 44)];
  *uint64_t v18 = KeyPath;
  v18[1] = v15;
  sub_10000A3C4((uint64_t)v9, (uint64_t)v13, &qword_1001ACED8);
  sub_10000A3C4((uint64_t)v13, a2, &qword_1001ACED8);
  return swift_retain();
}

ValueMetadata *type metadata accessor for ConditionalFontModifier.Font()
{
  return &type metadata for ConditionalFontModifier.Font;
}

unint64_t sub_10013EB74()
{
  unint64_t result = qword_1001ACEE8;
  if (!qword_1001ACEE8)
  {
    sub_100004A58(&qword_1001ACED8);
    sub_10000A780(&qword_1001ACEF0, &qword_1001ACEE0);
    sub_10000A780(&qword_1001A6280, &qword_1001A6288);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001ACEE8);
  }
  return result;
}

uint64_t *sub_10013EC3C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = *(int *)(type metadata accessor for AttributionViewModel() + 24);
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for URL();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(a3 + 20);
    uint64_t v15 = (uint64_t *)((char *)v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    *uint64_t v15 = v17;
    v15[1] = v18;
  }
  swift_retain();
  return v4;
}

uint64_t sub_10013ED60(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = a1 + *(int *)(type metadata accessor for AttributionViewModel() + 24);
  uint64_t v3 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);

  return swift_release();
}

void *sub_10013EDFC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = *(int *)(type metadata accessor for AttributionViewModel() + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  *uint64_t v14 = v16;
  v14[1] = v17;
  swift_retain();
  return a1;
}

void *sub_10013EED4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(type metadata accessor for AttributionViewModel() + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (void *)((char *)a2 + v10);
  *(void *)((char *)a1 + v10) = *v12;
  swift_retain();
  swift_release();
  *((void *)v11 + 1) = v12[1];
  return a1;
}

_OWORD *sub_10013EFCC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(type metadata accessor for AttributionViewModel() + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *sub_10013F06C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(type metadata accessor for AttributionViewModel() + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (void *)((char *)a2 + v12);
  *(void *)((char *)a1 + v12) = *v14;
  swift_release();
  *((void *)v13 + 1) = v14[1];
  return a1;
}

uint64_t sub_10013F13C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013F150);
}

uint64_t sub_10013F150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttributionViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_10013F21C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013F230);
}

uint64_t sub_10013F230(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for AttributionViewModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  return result;
}

uint64_t type metadata accessor for AttributionModule()
{
  uint64_t result = qword_1001ACF78;
  if (!qword_1001ACF78) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10013F338()
{
  uint64_t result = type metadata accessor for AttributionViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10013F3CC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10013F3E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v56 = sub_10000570C(&qword_1001ACFB0);
  __chkstk_darwin(v56, v3);
  unint64_t v59 = (uint64_t *)&v49[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for AttributionModule();
  uint64_t v51 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v52 = v7;
  uint64_t v53 = &v49[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for OpenURLAction();
  uint64_t v57 = *(void *)(v8 - 8);
  uint64_t v58 = v8;
  __chkstk_darwin(v8, v9);
  char v55 = &v49[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for AttributedString();
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v54 = v1;
  sub_1000DE264((uint64_t)&v49[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  uint64_t v14 = Text.init(_:)();
  uint64_t v16 = v15;
  char v18 = v17;
  if (qword_1001A4E40 != -1) {
    swift_once();
  }
  uint64_t v19 = Text.foregroundColor(_:)();
  uint64_t v21 = v20;
  char v23 = v22 & 1;
  sub_10000FCC4(v14, v16, v18 & 1);
  swift_bridgeObjectRelease();
  static Font.footnote.getter();
  uint64_t v24 = Text.font(_:)();
  uint64_t v26 = v25;
  char v28 = v27;
  uint64_t v30 = v29;
  swift_release();
  v28 &= 1u;
  sub_10000FCC4(v19, v21, v23);
  swift_bridgeObjectRelease();
  int v50 = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v40 = v53;
  sub_10013F8AC(v54, (uint64_t)v53);
  unint64_t v41 = (*(unsigned __int8 *)(v51 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
  uint64_t v42 = swift_allocObject();
  sub_10013FA20((uint64_t)v40, v42 + v41);
  id v43 = v55;
  OpenURLAction.init(handler:)();
  uint64_t v44 = v57;
  uint64_t v46 = v58;
  uint64_t v45 = v59;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v57 + 16))((unsigned char *)v59 + *(int *)(v56 + 28), v43, v58);
  *uint64_t v45 = KeyPath;
  uint64_t v47 = sub_10000570C(&qword_1001ACFB8);
  sub_10013FB04((uint64_t)v45, a1 + *(int *)(v47 + 36));
  *(void *)a1 = v24;
  *(void *)(a1 + 8) = v26;
  *(unsigned char *)(a1 + 16) = v28;
  *(void *)(a1 + 24) = v30;
  *(unsigned char *)(a1 + 32) = v50;
  *(void *)(a1 + 40) = v32;
  *(void *)(a1 + 48) = v34;
  *(void *)(a1 + 56) = v36;
  *(void *)(a1 + 64) = v38;
  *(unsigned char *)(a1 + 72) = 0;
  sub_10000FCD4(v24, v26, v28);
  swift_bridgeObjectRetain();
  sub_10013FB6C((uint64_t)v45);
  (*(void (**)(unsigned char *, uint64_t))(v44 + 8))(v43, v46);
  sub_10000FCC4(v24, v26, v28);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10013F808(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + *(int *)(type metadata accessor for AttributionModule() + 20)))
  {
    uint64_t v2 = swift_retain();
    sub_1000DE8E8(v2);
    uint64_t v3 = swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10000E4F8();
    uint64_t v3 = EnvironmentObject.error()();
    __break(1u);
  }
  return static OpenURLAction.Result.systemAction.getter(v3);
}

uint64_t sub_10013F8AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttributionModule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013F910()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for AttributionModule() - 8) + 80);
  uint64_t v2 = v0 + ((v1 + 16) & ~v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = v2 + *(int *)(type metadata accessor for AttributionViewModel() + 24);
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10013FA20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttributionModule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013FA84(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AttributionModule() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10013F808(a1, v4);
}

uint64_t sub_10013FB04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000570C(&qword_1001ACFB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013FB6C(uint64_t a1)
{
  uint64_t v2 = sub_10000570C(&qword_1001ACFB0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10013FBD0()
{
  unint64_t result = qword_1001ACFC0;
  if (!qword_1001ACFC0)
  {
    sub_100004A58(&qword_1001ACFB8);
    sub_1000555B4();
    sub_10013FC4C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001ACFC0);
  }
  return result;
}

unint64_t sub_10013FC4C()
{
  unint64_t result = qword_1001ACFC8[0];
  if (!qword_1001ACFC8[0])
  {
    sub_100004A58(&qword_1001ACFB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001ACFC8);
  }
  return result;
}

uint64_t sub_10013FCA8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  swift_getWitnessTable();
  Bindable<A>.init(wrappedValue:)();
  uint64_t v4 = type metadata accessor for PhoneWallpaperView();
  sub_10013FE70(a1);
  uint64_t v5 = a2 + *(int *)(v4 + 40);
  State.init(wrappedValue:)();
  *(unsigned char *)uint64_t v5 = v9;
  *(void *)(v5 + 8) = v10;
  uint64_t v6 = (uint64_t *)(a2 + *(int *)(v4 + 44));
  type metadata accessor for RemoteViewConfiguration();
  sub_10002EE44((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  uint64_t result = EnvironmentObject.init()();
  *uint64_t v6 = result;
  v6[1] = v8;
  return result;
}

uint64_t type metadata accessor for PhoneWallpaperView()
{
  return sub_10000B72C();
}

uint64_t sub_10013FE30()
{
  type metadata accessor for PhoneWallpaperViewModel();
  type metadata accessor for Bindable();
  Bindable.wrappedValue.getter();
  return v1;
}

uint64_t sub_10013FE70(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v7 - v5, a1, v2);
  State.init(wrappedValue:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t sub_10013FF64()
{
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t result = type metadata accessor for Bindable();
  if (v1 <= 0x3F)
  {
    type metadata accessor for Optional();
    uint64_t result = type metadata accessor for State();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *sub_10014005C(void *a1, char *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *(void *)a2;
    *a1 = *(void *)a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = *(void *)(a3 + 16);
    type metadata accessor for PhoneWallpaperViewModel();
    uint64_t v8 = type metadata accessor for Bindable();
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v4, a2, v8);
    uint64_t v9 = *(int *)(a3 + 36);
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = &a2[v9];
    uint64_t v12 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&a2[v9], 1, v7))
    {
      uint64_t v13 = type metadata accessor for Optional();
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v10, v11, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v7);
    }
    type metadata accessor for Optional();
    uint64_t v15 = type metadata accessor for State();
    *(void *)&v10[*(int *)(v15 + 28)] = *(void *)&v11[*(int *)(v15 + 28)];
    uint64_t v16 = *(int *)(a3 + 40);
    uint64_t v17 = *(int *)(a3 + 44);
    char v18 = (char *)v4 + v16;
    uint64_t v19 = &a2[v16];
    *char v18 = *v19;
    *((void *)v18 + 1) = *((void *)v19 + 1);
    uint64_t v20 = (void *)((char *)v4 + v17);
    uint64_t v21 = &a2[v17];
    uint64_t v23 = *(void *)v21;
    uint64_t v22 = *((void *)v21 + 1);
    *uint64_t v20 = v23;
    v20[1] = v22;
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_10014026C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v5 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 36);
  uint64_t v7 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v6, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v4);
  }
  type metadata accessor for Optional();
  type metadata accessor for State();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_1001403A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v7 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a2 + v8, 1, v6))
  {
    uint64_t v12 = type metadata accessor for Optional();
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v9, v10, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v6);
  }
  type metadata accessor for Optional();
  uint64_t v13 = type metadata accessor for State();
  *(void *)&v9[*(int *)(v13 + 28)] = *(void *)&v10[*(int *)(v13 + 28)];
  uint64_t v14 = *(int *)(a3 + 40);
  uint64_t v15 = *(int *)(a3 + 44);
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(unsigned char *)uint64_t v16 = *(unsigned char *)v17;
  *(void *)(v16 + 8) = *(void *)(v17 + 8);
  char v18 = (void *)(a1 + v15);
  uint64_t v19 = (uint64_t *)(a2 + v15);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *char v18 = v21;
  v18[1] = v20;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_10014056C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v7 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = *(void *)(v6 - 8);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(a1 + v8, 1, v6);
  int v14 = v12((uint64_t)v10, 1, v6);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v9, v10, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v6);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = type metadata accessor for Optional();
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v9, v10, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v6);
LABEL_7:
  type metadata accessor for Optional();
  uint64_t v16 = type metadata accessor for State();
  *(void *)&v9[*(int *)(v16 + 28)] = *(void *)&v10[*(int *)(v16 + 28)];
  swift_retain();
  swift_release();
  uint64_t v17 = *(int *)(a3 + 40);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(unsigned char *)uint64_t v18 = *(unsigned char *)v19;
  *(void *)(v18 + 8) = *(void *)(v19 + 8);
  swift_retain();
  swift_release();
  uint64_t v20 = *(int *)(a3 + 44);
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  *(void *)(a1 + v20) = *(void *)(a2 + v20);
  swift_retain();
  swift_release();
  *(void *)(v21 + 8) = *(void *)(v22 + 8);
  return a1;
}

uint64_t sub_1001407BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v7 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a2 + v8, 1, v6))
  {
    uint64_t v12 = type metadata accessor for Optional();
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v9, v10, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v6);
  }
  type metadata accessor for Optional();
  uint64_t v13 = type metadata accessor for State();
  *(void *)&v9[*(int *)(v13 + 28)] = *(void *)&v10[*(int *)(v13 + 28)];
  uint64_t v14 = *(int *)(a3 + 44);
  *(_OWORD *)(a1 + *(int *)(a3 + 40)) = *(_OWORD *)(a2 + *(int *)(a3 + 40));
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  return a1;
}

uint64_t sub_100140954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v7 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = *(void *)(v6 - 8);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(a1 + v8, 1, v6);
  int v14 = v12((uint64_t)v10, 1, v6);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v9, v10, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v6);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = type metadata accessor for Optional();
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v9, v10, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v6);
LABEL_7:
  type metadata accessor for Optional();
  uint64_t v16 = type metadata accessor for State();
  *(void *)&v9[*(int *)(v16 + 28)] = *(void *)&v10[*(int *)(v16 + 28)];
  swift_release();
  uint64_t v17 = *(int *)(a3 + 40);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(unsigned char *)uint64_t v18 = *(unsigned char *)v19;
  *(void *)(v18 + 8) = *(void *)(v19 + 8);
  swift_release();
  uint64_t v20 = *(int *)(a3 + 44);
  uint64_t v21 = a1 + v20;
  uint64_t v22 = (void *)(a2 + v20);
  *(void *)(a1 + v20) = *v22;
  swift_release();
  *(void *)(v21 + 8) = v22[1];
  return a1;
}

uint64_t sub_100140B8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100140BA0);
}

uint64_t sub_100140BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v6 = type metadata accessor for Bindable();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  type metadata accessor for Optional();
  uint64_t v11 = type metadata accessor for State();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 36);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 40) + 8);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  int v15 = v14 - 1;
  if (v15 < 0) {
    int v15 = -1;
  }
  return (v15 + 1);
}

uint64_t sub_100140CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100140CFC);
}

uint64_t sub_100140CFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v8 = type metadata accessor for Bindable();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    type metadata accessor for Optional();
    uint64_t result = type metadata accessor for State();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 40) + 8) = a2;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 36);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_100140E40()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100140E84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  sub_100004A58(&qword_1001A60E0);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v40 = a1;
  type metadata accessor for Array();
  type metadata accessor for ScrollAsset();
  swift_getWitnessTable();
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v58 = *(void *)(v4 + 8);
  type metadata accessor for ForEach();
  uint64_t v53 = sub_10002EE44(&qword_1001A60E8, (void (*)(uint64_t))type metadata accessor for ScrollAsset);
  swift_getWitnessTable();
  type metadata accessor for HStack();
  swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  swift_getOpaqueTypeConformance2();
  type metadata accessor for ScrollView();
  swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for ViewAlignedScrollTargetBehavior();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeMetadata2();
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v56 = OpaqueTypeConformance2;
  uint64_t v57 = v58;
  uint64_t v7 = swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeMetadata2();
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v54 = OpaqueTypeMetadata2;
  uint64_t v55 = v7;
  uint64_t v51 = swift_getOpaqueTypeConformance2();
  uint64_t v52 = &protocol witness table for _FrameLayout;
  id v39 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v50 = *(void *)(v58 + 8);
  uint64_t v54 = v8;
  uint64_t v55 = v9;
  uint64_t v56 = WitnessTable;
  uint64_t v57 = swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  sub_100004A58(&qword_1001A60F0);
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001AD050);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for PageControl();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for ModifiedContent();
  uint64_t v11 = v4;
  _s16EventViewService17SelectAssetButtonVMa_0();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for VStack();
  uint64_t v35 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  int v15 = (char *)&v33 - v14;
  uint64_t v16 = type metadata accessor for ModifiedContent();
  uint64_t v37 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)&v33 - v18;
  sub_100004A58(&qword_1001A5AE8);
  uint64_t v20 = type metadata accessor for ModifiedContent();
  uint64_t v38 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v21);
  uint64_t v34 = (char *)&v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v24);
  uint64_t v36 = (char *)&v33 - v25;
  uint64_t v43 = v3;
  uint64_t v44 = v11;
  uint64_t v45 = v41;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  static Edge.Set.top.getter();
  sub_10013FE30();
  sub_10014BDA4();
  swift_release();
  uint64_t v26 = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v15, v12);
  sub_10013FE30();
  LOBYTE(v8) = sub_10014BDA4();
  swift_release();
  LOBYTE(v54) = (v8 & 1) == 0;
  static Alignment.center.getter();
  sub_10000570C(&qword_1001A6100);
  uint64_t v48 = v26;
  Swift::String v49 = &protocol witness table for _PaddingLayout;
  uint64_t v27 = swift_getWitnessTable();
  sub_10002C4F4(&qword_1001A6108, &qword_1001A6100, (void (*)(void))sub_10002C464);
  char v28 = v34;
  View.background<A>(_:alignment:)();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v19, v16);
  uint64_t v29 = sub_10000A780(&qword_1001A5AE0, &qword_1001A5AE8);
  uint64_t v46 = v27;
  uint64_t v47 = v29;
  swift_getWitnessTable();
  uint64_t v30 = v36;
  sub_1001221F0(v28, v20);
  uint64_t v31 = *(void (**)(char *, uint64_t))(v38 + 8);
  v31(v28, v20);
  sub_1001221F0(v30, v20);
  return ((uint64_t (*)(char *, uint64_t))v31)(v30, v20);
}

uint64_t sub_1001417B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v138 = a1;
  uint64_t v133 = a4;
  uint64_t v6 = _s16EventViewService17SelectAssetButtonVMa_0();
  uint64_t v127 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v111 = (uint64_t)&v107 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  uint64_t v112 = (char *)&v107 - v11;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v107 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  uint64_t v125 = (char *)&v107 - v14;
  uint64_t v126 = *(void *)(a2 - 8);
  __chkstk_darwin(v15, v16);
  uint64_t v110 = (char *)&v107 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  uint64_t v109 = (char *)&v107 - v20;
  uint64_t v132 = v6;
  uint64_t v131 = type metadata accessor for Optional();
  uint64_t v128 = *(void *)(v131 - 8);
  __chkstk_darwin(v131, v21);
  char v130 = (char *)&v107 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v24);
  uint64_t v129 = (char *)&v107 - v25;
  uint64_t v26 = type metadata accessor for PhoneWallpaperView();
  uint64_t v123 = *(void **)(v26 - 8);
  uint64_t v121 = v123[8];
  __chkstk_darwin(v26, v27);
  uint64_t v122 = (char *)&v107 - v28;
  uint64_t v29 = type metadata accessor for Array();
  uint64_t v30 = type metadata accessor for ScrollAsset();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v124 = a3;
  uint64_t v32 = *(void **)(a3 + 8);
  uint64_t v153 = v29;
  uint64_t v154 = a2;
  uint64_t v155 = v30;
  uint64_t v156 = (void *)WitnessTable;
  uint64_t v157 = v32;
  type metadata accessor for ForEach();
  uint64_t v152 = sub_10002EE44(&qword_1001A60E8, (void (*)(uint64_t))type metadata accessor for ScrollAsset);
  swift_getWitnessTable();
  uint64_t v33 = type metadata accessor for HStack();
  uint64_t v34 = swift_getWitnessTable();
  uint64_t v153 = v33;
  uint64_t v154 = v34;
  swift_getOpaqueTypeMetadata2();
  uint64_t v153 = v33;
  uint64_t v154 = v34;
  swift_getOpaqueTypeConformance2();
  uint64_t v35 = type metadata accessor for ScrollView();
  uint64_t v36 = swift_getWitnessTable();
  uint64_t v153 = v35;
  uint64_t v154 = v36;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v38 = type metadata accessor for ViewAlignedScrollTargetBehavior();
  uint64_t v153 = v35;
  uint64_t v154 = v36;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v153 = OpaqueTypeMetadata2;
  uint64_t v154 = v38;
  uint64_t v155 = OpaqueTypeConformance2;
  uint64_t v156 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  uint64_t v40 = swift_getOpaqueTypeMetadata2();
  uint64_t v153 = OpaqueTypeMetadata2;
  uint64_t v154 = v38;
  uint64_t v155 = OpaqueTypeConformance2;
  uint64_t v156 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  uint64_t v41 = swift_getOpaqueTypeConformance2();
  uint64_t v153 = v40;
  uint64_t v154 = a2;
  uint64_t v155 = v41;
  uint64_t v156 = v32;
  uint64_t v42 = swift_getOpaqueTypeMetadata2();
  uint64_t v153 = v40;
  uint64_t v154 = a2;
  uint64_t v155 = v41;
  uint64_t v156 = v32;
  uint64_t v43 = swift_getOpaqueTypeConformance2();
  uint64_t v153 = v42;
  uint64_t v154 = v43;
  swift_getOpaqueTypeMetadata2();
  uint64_t v44 = type metadata accessor for ModifiedContent();
  uint64_t v153 = v42;
  uint64_t v154 = v43;
  uint64_t v150 = swift_getOpaqueTypeConformance2();
  uint64_t v151 = &protocol witness table for _FrameLayout;
  uint64_t v45 = swift_getWitnessTable();
  uint64_t v149 = v32[1];
  uint64_t v46 = swift_getWitnessTable();
  uint64_t v153 = v44;
  uint64_t v154 = v12;
  uint64_t v108 = v12;
  uint64_t v155 = v45;
  uint64_t v156 = (void *)v46;
  swift_getOpaqueTypeMetadata2();
  sub_100004A58(&qword_1001A60F0);
  type metadata accessor for ModifiedContent();
  sub_100004A58(&qword_1001AD050);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t v47 = a2;
  type metadata accessor for PageControl();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  uint64_t v113 = swift_getWitnessTable();
  uint64_t v48 = type metadata accessor for VStack();
  uint64_t v115 = *(void *)(v48 - 8);
  __chkstk_darwin(v48, v49);
  uint64_t v51 = (char *)&v107 - v50;
  uint64_t v136 = type metadata accessor for ModifiedContent();
  uint64_t v134 = *(void *)(v136 - 8);
  __chkstk_darwin(v136, v52);
  long long v120 = (char *)&v107 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v54, v55);
  uint64_t v114 = (char *)&v107 - v56;
  __chkstk_darwin(v57, v58);
  uint64_t v135 = (char *)&v107 - v59;
  uint64_t v137 = v26;
  sub_10013FE30();
  LOBYTE(v26) = sub_10014BDA4();
  uint64_t v60 = swift_release();
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  char v65 = 0;
  if (v26)
  {
    uint64_t v66 = sub_10013FE30();
    uint64_t v62 = *(void *)(v66 + 16);
    uint64_t v63 = *(void *)(v66 + 24);
    uint64_t v64 = *(unsigned __int8 *)(v66 + 32);
    char v65 = *(void **)(v66 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v60 = swift_release();
  }
  uint64_t v116 = v65;
  uint64_t v117 = v64;
  uint64_t v118 = v63;
  uint64_t v119 = v62;
  __chkstk_darwin(v60, v61);
  uint64_t v67 = v124;
  *(&v107 - 4) = v47;
  *(&v107 - 3) = v67;
  uint64_t v68 = v138;
  *(&v107 - 2) = v138;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  char v69 = v123;
  uint64_t v70 = v122;
  uint64_t v71 = v137;
  ((void (*)(char *, uint64_t, uint64_t))v123[2])(v122, v68, v137);
  unint64_t v72 = (*((unsigned __int8 *)v69 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v69 + 80);
  uint64_t v73 = swift_allocObject();
  *(void *)(v73 + 16) = v47;
  *(void *)(v73 + 24) = v67;
  ((void (*)(unint64_t, char *, uint64_t))v69[4])(v73 + v72, v70, v71);
  uint64_t v74 = swift_getWitnessTable();
  uint64_t v75 = v114;
  View.onAppear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v115 + 8))(v51, v48);
  uint64_t v147 = v74;
  uint64_t v148 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v76 = v136;
  uint64_t v122 = (char *)swift_getWitnessTable();
  sub_1001221F0(v75, v76);
  uint64_t v77 = *(void **)(v134 + 8);
  uint64_t v124 = v134 + 8;
  uint64_t v123 = v77;
  ((void (*)(char *, uint64_t))v77)(v75, v76);
  unint64_t v78 = v125;
  sub_100027574(v71, (uint64_t (*)(uint64_t))&State.wrappedValue.getter);
  uint64_t v79 = v126;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v126 + 48))(v78, 1, v47) == 1)
  {
    (*(void (**)(char *, uint64_t))(v107 + 8))(v78, v108);
    uint64_t v80 = v130;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v127 + 56))(v130, 1, 1, v132);
    swift_getWitnessTable();
    uint64_t v81 = v129;
    uint64_t v82 = (uint64_t)v129;
    uint64_t v83 = (uint64_t)v80;
  }
  else
  {
    uint64_t v84 = v109;
    (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v109, v78, v47);
    uint64_t v85 = v47;
    unint64_t v86 = (char *)(v138 + *(int *)(v137 + 40));
    char v87 = *v86;
    uint64_t v88 = (char *)*((void *)v86 + 1);
    LOBYTE(v144) = v87;
    uint64_t v145 = v88;
    sub_10000570C(&qword_1001A6728);
    State.projectedValue.getter();
    uint64_t v89 = v153;
    uint64_t v90 = v154;
    char v91 = v155;
    uint64_t v92 = (uint64_t)v110;
    (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v110, v84, v85);
    uint64_t v93 = (uint64_t *)sub_10013FE30();
    uint64_t v94 = v111;
    sub_100144CCC(v89, v90, v91, v92, v93, v111);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v84, v85);
    uint64_t v95 = v132;
    swift_getWitnessTable();
    uint64_t v96 = v112;
    sub_1001221F0(v94, v95);
    uint64_t v97 = v127;
    uint64_t v98 = *(void (**)(uint64_t, uint64_t))(v127 + 8);
    v98(v94, v95);
    uint64_t v80 = v130;
    sub_1001221F0(v96, v95);
    v98((uint64_t)v96, v95);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v97 + 56))(v80, 0, 1, v95);
    uint64_t v82 = (uint64_t)v129;
    uint64_t v83 = (uint64_t)v80;
    uint64_t v81 = v129;
  }
  sub_100123138(v83, v82);
  uint64_t v99 = v128;
  uint64_t v100 = *(void (**)(char *, uint64_t))(v128 + 8);
  uint64_t v101 = v131;
  v100(v80, v131);
  uint64_t v153 = v119;
  uint64_t v154 = v118;
  uint64_t v155 = v117;
  uint64_t v156 = v116;
  uint64_t v144 = &v153;
  uint64_t v102 = v120;
  uint64_t v103 = v135;
  uint64_t v104 = v136;
  (*(void (**)(char *, char *, uint64_t))(v134 + 16))(v120, v135, v136);
  uint64_t v145 = v102;
  (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v80, v81, v101);
  uint64_t v146 = v80;
  v143[0] = sub_10000570C(&qword_1001A60E0);
  v143[1] = v104;
  v143[2] = v101;
  uint64_t v140 = sub_10002C4F4(&qword_1001A6118, &qword_1001A60E0, (void (*)(void))sub_10002C56C);
  uint64_t v141 = v122;
  uint64_t v139 = swift_getWitnessTable();
  uint64_t v142 = swift_getWitnessTable();
  sub_1001231A4((uint64_t)&v144, 3uLL, (uint64_t)v143);
  v100(v81, v101);
  uint64_t v105 = (void (*)(char *, uint64_t))v123;
  ((void (*)(char *, uint64_t))v123)(v103, v104);
  v100(v80, v101);
  v105(v102, v104);
  return sub_10002C5C0(v153, v154);
}

uint64_t sub_1001427A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v221 = a1;
  uint64_t v212 = a4;
  uint64_t v4 = *(void **)(a3 + 8);
  uint64_t v222 = a3;
  uint64_t v214 = v4[1];
  uint64_t v6 = type metadata accessor for PageControl();
  uint64_t v207 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v6);
  uint64_t v150 = (char *)&v149 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  uint64_t v151 = (char *)&v149 - v10;
  uint64_t v210 = v11;
  uint64_t v211 = type metadata accessor for Optional();
  uint64_t v219 = *(void *)(v211 - 8);
  __chkstk_darwin(v211, v12);
  long long v209 = (char *)&v149 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  uint64_t v208 = (uint64_t)&v149 - v16;
  uint64_t v217 = type metadata accessor for PhoneWallpaperView();
  uint64_t v204 = *(void *)(v217 - 8);
  uint64_t v205 = *(void *)(v204 + 64);
  __chkstk_darwin(v217, v17);
  uint64_t v203 = (char *)&v149 - v18;
  uint64_t v215 = type metadata accessor for Optional();
  uint64_t v206 = *(void *)(v215 - 8);
  __chkstk_darwin(v215, v215);
  uint64_t v202 = (char *)&v149 - v19;
  uint64_t v20 = type metadata accessor for Binding();
  uint64_t v199 = *(void *)(v20 - 8);
  uint64_t v200 = v20;
  __chkstk_darwin(v20, v21);
  uint64_t v213 = (char *)&v149 - v22;
  uint64_t v23 = type metadata accessor for ViewAlignedScrollTargetBehavior.LimitBehavior();
  __chkstk_darwin(v23 - 8, v24);
  uint64_t v197 = (char *)&v149 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for ViewAlignedScrollTargetBehavior();
  uint64_t v198 = *(void *)(v26 - 8);
  __chkstk_darwin(v26, v27);
  uint64_t v196 = (char *)&v149 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for ContentMarginPlacement();
  uint64_t v194 = *(void *)(v29 - 8);
  uint64_t v195 = v29;
  __chkstk_darwin(v29, v30);
  uint64_t v192 = (char *)&v149 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for Array();
  uint64_t v33 = type metadata accessor for ScrollAsset();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v236 = v32;
  uint64_t v237 = a2;
  uint64_t v238 = v33;
  uint64_t v239 = (void *)WitnessTable;
  v240 = v4;
  type metadata accessor for ForEach();
  v235[11] = sub_10002EE44(&qword_1001A60E8, (void (*)(uint64_t))type metadata accessor for ScrollAsset);
  swift_getWitnessTable();
  uint64_t v35 = type metadata accessor for HStack();
  uint64_t v36 = swift_getWitnessTable();
  uint64_t v236 = v35;
  uint64_t v237 = v36;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v236 = v35;
  uint64_t v237 = v36;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v37 = type metadata accessor for ScrollView();
  uint64_t v181 = *(void *)(v37 - 8);
  __chkstk_darwin(v37, v38);
  uint64_t v167 = (char *)&v149 - v39;
  uint64_t v40 = swift_getWitnessTable();
  uint64_t v236 = v37;
  uint64_t v237 = v40;
  uint64_t v41 = v40;
  uint64_t v164 = v40;
  uint64_t v42 = swift_getOpaqueTypeMetadata2();
  uint64_t v179 = *(void *)(v42 - 8);
  __chkstk_darwin(v42, v43);
  uint64_t v166 = (char *)&v149 - v44;
  uint64_t v236 = v37;
  uint64_t v237 = v41;
  uint64_t v45 = swift_getOpaqueTypeConformance2();
  uint64_t v236 = v42;
  uint64_t v237 = v26;
  uint64_t v46 = v42;
  uint64_t v160 = v26;
  uint64_t v161 = v42;
  uint64_t v47 = v26;
  uint64_t v238 = v45;
  uint64_t v239 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  uint64_t v163 = v45;
  uint64_t v48 = swift_getOpaqueTypeMetadata2();
  uint64_t v177 = *(void *)(v48 - 8);
  __chkstk_darwin(v48, v49);
  uint64_t v159 = (char *)&v149 - v50;
  uint64_t v236 = v46;
  uint64_t v237 = v47;
  uint64_t v238 = v45;
  uint64_t v239 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  uint64_t v51 = swift_getOpaqueTypeConformance2();
  uint64_t v236 = v48;
  uint64_t v237 = a2;
  uint64_t v52 = v48;
  uint64_t v156 = v48;
  uint64_t v157 = v51;
  uint64_t v238 = v51;
  uint64_t v239 = v4;
  uint64_t v53 = v51;
  uint64_t v158 = v4;
  uint64_t v54 = swift_getOpaqueTypeMetadata2();
  uint64_t v176 = *(void *)(v54 - 8);
  __chkstk_darwin(v54, v55);
  uint64_t v154 = (char *)&v149 - v56;
  uint64_t v236 = v52;
  uint64_t v237 = a2;
  uint64_t v220 = a2;
  uint64_t v238 = v53;
  uint64_t v239 = v4;
  uint64_t v57 = swift_getOpaqueTypeConformance2();
  uint64_t v236 = v54;
  uint64_t v237 = v57;
  uint64_t v152 = v54;
  uint64_t v153 = v57;
  uint64_t v58 = v57;
  uint64_t v168 = swift_getOpaqueTypeMetadata2();
  uint64_t v175 = *(void *)(v168 - 8);
  __chkstk_darwin(v168, v168);
  uint64_t v155 = (char *)&v149 - v59;
  uint64_t v60 = type metadata accessor for ModifiedContent();
  uint64_t v173 = v60;
  uint64_t v186 = *(void *)(v60 - 8);
  __chkstk_darwin(v60, v61);
  uint64_t v165 = (char *)&v149 - v62;
  uint64_t v236 = v54;
  uint64_t v237 = v58;
  uint64_t v162 = swift_getOpaqueTypeConformance2();
  v235[9] = v162;
  v235[10] = &protocol witness table for _FrameLayout;
  uint64_t v193 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v63 = swift_getWitnessTable();
  uint64_t v171 = v63;
  v235[8] = v214;
  uint64_t v64 = v215;
  uint64_t v172 = swift_getWitnessTable();
  uint64_t v236 = v60;
  uint64_t v237 = v64;
  uint64_t v238 = v63;
  uint64_t v239 = (void *)v172;
  uint64_t v180 = &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>;
  uint64_t v178 = swift_getOpaqueTypeMetadata2();
  uint64_t v185 = *(void *)(v178 - 8);
  __chkstk_darwin(v178, v65);
  uint64_t v216 = (char *)&v149 - v66;
  sub_100004A58(&qword_1001A60F0);
  uint64_t v182 = type metadata accessor for ModifiedContent();
  uint64_t v189 = *(void *)(v182 - 8);
  __chkstk_darwin(v182, v67);
  uint64_t v174 = (char *)&v149 - v68;
  sub_100004A58(&qword_1001AD050);
  uint64_t v188 = type metadata accessor for ModifiedContent();
  uint64_t v191 = *(void *)(v188 - 8);
  __chkstk_darwin(v188, v188);
  uint64_t v183 = (char *)&v149 - v69;
  uint64_t v218 = type metadata accessor for ModifiedContent();
  uint64_t v190 = *(void *)(v218 - 8);
  __chkstk_darwin(v218, v70);
  uint64_t v201 = (char *)&v149 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v72, v73);
  uint64_t v184 = (char *)&v149 - v74;
  __chkstk_darwin(v75, v76);
  uint64_t v187 = (char *)&v149 - v77;
  static Axis.Set.horizontal.getter();
  uint64_t v229 = a2;
  uint64_t v230 = v222;
  uint64_t v78 = v221;
  uint64_t v231 = v221;
  uint64_t v79 = v167;
  ScrollView.init(_:showsIndicators:content:)();
  static Edge.Set.horizontal.getter();
  uint64_t v80 = v217;
  sub_10013FE30();
  sub_10014BE70();
  swift_release();
  uint64_t v81 = v192;
  j___s7SwiftUI22ContentMarginPlacementV9automaticACvgZ();
  uint64_t v82 = v166;
  View.contentMargins(_:_:for:)();
  (*(void (**)(char *, uint64_t))(v194 + 8))(v81, v195);
  (*(void (**)(char *, uint64_t))(v181 + 8))(v79, v37);
  static ViewAlignedScrollTargetBehavior.LimitBehavior.automatic.getter();
  uint64_t v83 = v196;
  ViewAlignedScrollTargetBehavior.init(limitBehavior:)();
  uint64_t v85 = v159;
  uint64_t v84 = v160;
  uint64_t v86 = v161;
  View.scrollTargetBehavior<A>(_:)();
  (*(void (**)(char *, uint64_t))(v198 + 8))(v83, v84);
  (*(void (**)(char *, uint64_t))(v179 + 8))(v82, v86);
  char v87 = v213;
  uint64_t v88 = v80;
  sub_100027574(v80, (uint64_t (*)(uint64_t))&State.projectedValue.getter);
  uint64_t v89 = v154;
  uint64_t v90 = v156;
  uint64_t v91 = v220;
  View.scrollPosition<A>(id:anchor:)();
  (*(void (**)(char *, uint64_t))(v199 + 8))(v87, v200);
  uint64_t v92 = v91;
  (*(void (**)(char *, uint64_t))(v177 + 8))(v85, v90);
  uint64_t v93 = v88;
  sub_10013FE30();
  sub_10014BEB0();
  swift_release();
  uint64_t v94 = v155;
  uint64_t v95 = v152;
  View.scrollDisabled(_:)();
  (*(void (**)(char *, uint64_t))(v176 + 8))(v89, v95);
  sub_10013FE30();
  sub_10014BEE8();
  swift_release();
  static Alignment.center.getter();
  uint64_t v96 = v165;
  uint64_t v97 = v168;
  View.frame(width:height:alignment:)();
  (*(void (**)(char *, uint64_t))(v175 + 8))(v94, v97);
  uint64_t v98 = v202;
  sub_100027574(v93, (uint64_t (*)(uint64_t))&State.wrappedValue.getter);
  uint64_t v100 = v203;
  uint64_t v99 = v204;
  uint64_t v101 = v78;
  uint64_t v102 = v93;
  (*(void (**)(char *, uint64_t, uint64_t))(v204 + 16))(v203, v101, v93);
  uint64_t v103 = v99;
  unint64_t v104 = (*(unsigned __int8 *)(v99 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80);
  uint64_t v105 = swift_allocObject();
  uint64_t v106 = v222;
  *(void *)(v105 + 16) = v92;
  *(void *)(v105 + 24) = v106;
  (*(void (**)(unint64_t, char *, uint64_t))(v103 + 32))(v105 + v104, v100, v102);
  uint64_t v107 = v98;
  uint64_t v109 = (void *)v172;
  uint64_t v108 = v173;
  uint64_t v110 = v215;
  uint64_t v111 = v171;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v206 + 8))(v107, v110);
  uint64_t v112 = v108;
  (*(void (**)(char *, uint64_t))(v186 + 8))(v96, v108);
  static Alignment.center.getter();
  uint64_t v113 = v220;
  uint64_t v226 = v220;
  uint64_t v227 = v106;
  uint64_t v114 = v221;
  uint64_t v228 = v221;
  sub_10000570C(&qword_1001A6128);
  uint64_t v236 = v112;
  uint64_t v237 = v110;
  uint64_t v238 = v111;
  uint64_t v239 = v109;
  uint64_t v115 = swift_getOpaqueTypeConformance2();
  sub_10002D71C();
  uint64_t v116 = v174;
  uint64_t v117 = v178;
  uint64_t v118 = v216;
  View.overlay<A>(alignment:content:)();
  (*(void (**)(char *, uint64_t))(v185 + 8))(v118, v117);
  static Alignment.center.getter();
  uint64_t v223 = v113;
  uint64_t v224 = v222;
  uint64_t v225 = v114;
  sub_10000570C(&qword_1001AD058);
  uint64_t v119 = sub_10000A780(&qword_1001A6150, &qword_1001A60F0);
  v235[6] = v115;
  v235[7] = v119;
  uint64_t v120 = v182;
  uint64_t v121 = swift_getWitnessTable();
  sub_10000A780(&qword_1001AD060, &qword_1001AD058);
  uint64_t v122 = v183;
  View.background<A>(alignment:content:)();
  (*(void (**)(char *, uint64_t))(v189 + 8))(v116, v120);
  static Edge.Set.bottom.getter();
  uint64_t v123 = sub_10000A780(qword_1001AD068, &qword_1001AD050);
  v235[4] = v121;
  v235[5] = v123;
  uint64_t v124 = v188;
  uint64_t v125 = swift_getWitnessTable();
  uint64_t v126 = v184;
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v191 + 8))(v122, v124);
  v235[2] = v125;
  v235[3] = &protocol witness table for _PaddingLayout;
  uint64_t v127 = v218;
  uint64_t v128 = swift_getWitnessTable();
  uint64_t v129 = v187;
  uint64_t v215 = v128;
  sub_1001221F0(v126, v127);
  uint64_t v130 = v190;
  uint64_t v131 = *(char **)(v190 + 8);
  uint64_t v222 = v190 + 8;
  uint64_t v216 = v131;
  ((void (*)(char *, uint64_t))v131)(v126, v127);
  uint64_t v132 = v217;
  sub_10013FE30();
  LOBYTE(v126) = sub_10014BEB0();
  swift_release();
  if (v126)
  {
    uint64_t v133 = *(void *)(sub_10013FE30() + 240);
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v134 = (uint64_t)v213;
    sub_100027574(v132, (uint64_t (*)(uint64_t))&State.projectedValue.getter);
    uint64_t v135 = v150;
    sub_1000DBC50(v133, v134, v150);
    uint64_t v136 = v210;
    swift_getWitnessTable();
    uint64_t v137 = v151;
    sub_1001221F0(v135, v136);
    uint64_t v138 = v207;
    uint64_t v139 = *(void (**)(char *, uint64_t))(v207 + 8);
    v139(v135, v136);
    uint64_t v140 = (uint64_t)v209;
    sub_1001221F0(v137, v136);
    v139(v137, v136);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v138 + 56))(v140, 0, 1, v136);
  }
  else
  {
    uint64_t v140 = (uint64_t)v209;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v207 + 56))(v209, 1, 1, v210);
    swift_getWitnessTable();
  }
  uint64_t v141 = v208;
  sub_100123138(v140, v208);
  uint64_t v142 = *(void (**)(uint64_t, uint64_t))(v219 + 8);
  uint64_t v143 = v211;
  v142(v140, v211);
  uint64_t v144 = *(void (**)(char *, char *, uint64_t))(v130 + 16);
  uint64_t v145 = v201;
  uint64_t v146 = v218;
  v144(v201, v129, v218);
  uint64_t v236 = (uint64_t)v145;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v219 + 16))(v140, v141, v143);
  uint64_t v237 = v140;
  v235[0] = v146;
  v235[1] = v143;
  uint64_t v233 = v215;
  uint64_t v232 = swift_getWitnessTable();
  uint64_t v234 = swift_getWitnessTable();
  sub_1001231A4((uint64_t)&v236, 2uLL, (uint64_t)v235);
  v142(v141, v143);
  uint64_t v147 = (uint64_t (*)(char *, uint64_t))v216;
  ((void (*)(char *, uint64_t))v216)(v129, v146);
  v142(v140, v143);
  return v147(v145, v146);
}

uint64_t sub_100143DE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v29 = a3;
  uint64_t v30 = a1;
  uint64_t v31 = a4;
  uint64_t v28 = a2;
  uint64_t v6 = type metadata accessor for Array();
  uint64_t v7 = type metadata accessor for ScrollAsset();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = *(void *)(a3 + 8);
  uint64_t v36 = v6;
  uint64_t v37 = a2;
  uint64_t v38 = v7;
  uint64_t v39 = WitnessTable;
  uint64_t v40 = v9;
  type metadata accessor for ForEach();
  uint64_t v35 = sub_10002EE44(&qword_1001A60E8, (void (*)(uint64_t))type metadata accessor for ScrollAsset);
  v27[1] = swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for HStack();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)v27 - v13;
  uint64_t v15 = swift_getWitnessTable();
  uint64_t v36 = v10;
  uint64_t v37 = v15;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v17 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2, v18);
  uint64_t v20 = (char *)v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v22);
  uint64_t v24 = (char *)v27 - v23;
  uint64_t v32 = v28;
  uint64_t v33 = v29;
  uint64_t v34 = v30;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  View.scrollTargetLayout(isEnabled:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  uint64_t v36 = v10;
  uint64_t v37 = v15;
  swift_getOpaqueTypeConformance2();
  sub_1001221F0(v20, OpaqueTypeMetadata2);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v17 + 8);
  v25(v20, OpaqueTypeMetadata2);
  sub_1001221F0(v24, OpaqueTypeMetadata2);
  return ((uint64_t (*)(char *, uint64_t))v25)(v24, OpaqueTypeMetadata2);
}

uint64_t sub_100144124@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v37 = a4;
  uint64_t v7 = type metadata accessor for PhoneWallpaperView();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v31 = *(void *)(v8 + 64);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)v29 - v10;
  uint64_t v12 = type metadata accessor for Array();
  uint64_t v35 = v12;
  uint64_t v13 = type metadata accessor for ScrollAsset();
  uint64_t v34 = v13;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v32 = *(void *)(a3 + 8);
  uint64_t v33 = WitnessTable;
  uint64_t v41 = v12;
  uint64_t v42 = a2;
  uint64_t v43 = v13;
  uint64_t v44 = WitnessTable;
  uint64_t v45 = v32;
  uint64_t v15 = type metadata accessor for ForEach();
  uint64_t v36 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v20);
  uint64_t v30 = (char *)v29 - v21;
  uint64_t v22 = *(void *)(sub_10013FE30() + 240);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v41 = v22;
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  v29[1] = swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  unint64_t v23 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = a2;
  *(void *)(v24 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v24 + v23, v11, v7);
  uint64_t v28 = sub_10002EE44(&qword_1001A60E8, (void (*)(uint64_t))type metadata accessor for ScrollAsset);
  ForEach<>.init(_:id:content:)();
  uint64_t v40 = v28;
  swift_getWitnessTable();
  uint64_t v25 = v30;
  sub_1001221F0(v18, v15);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v36 + 8);
  v26(v18, v15);
  sub_1001221F0(v25, v15);
  return ((uint64_t (*)(char *, uint64_t))v26)(v25, v15);
}

int *sub_100144480@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  type metadata accessor for PhoneWallpaperView();
  sub_10013FE30();
  double v4 = sub_10014BE18();
  swift_release();
  sub_10013FE30();
  double v5 = sub_10014BE48();
  swift_release();
  sub_10013FE30();
  double v6 = sub_10014BE6C();
  swift_release();
  uint64_t result = (int *)type metadata accessor for ScrollAsset();
  *(double *)(a3 + result[5]) = v4;
  *(double *)(a3 + result[6]) = v5;
  *(double *)(a3 + result[7]) = v6;
  return result;
}

uint64_t sub_10014457C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PhoneWallpaperView();
  uint64_t v3 = sub_10013FE30();
  uint64_t v5 = *(void *)(v3 + 224);
  uint64_t v4 = *(void *)(v3 + 232);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v6 = *(void *)(a1 + *(int *)(v2 + 44));
  if (v6)
  {
    swift_retain();
    sub_100116F94(v5, v4, 8, 10, 26, 0, 3u, v6);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10002EE44((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100144688@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for PhoneWallpaperView();
  uint64_t v2 = sub_10013FE30();
  uint64_t v4 = *(void *)(v2 + 48);
  uint64_t v3 = *(void *)(v2 + 56);
  swift_bridgeObjectRetain();
  swift_release();
  sub_10013FE30();
  double v5 = sub_10014BEEC();
  uint64_t result = swift_release();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  *(double *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

double sub_100144714@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Color.RGBColorSpace();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PhoneWallpaperView();
  sub_10013FE30();
  double v7 = sub_10014BF10();
  swift_release();
  sub_10013FE30();
  double v8 = sub_10014BF40();
  swift_release();
  sub_10013FE30();
  double v9 = sub_10014BE6C();
  swift_release();
  uint64_t v10 = enum case for Color.RGBColorSpace.sRGBLinear(_:);
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v11(v6, enum case for Color.RGBColorSpace.sRGBLinear(_:), v2);
  uint64_t v12 = Color.init(_:white:opacity:)();
  v11(v6, v10, v2);
  uint64_t v13 = Color.init(_:white:opacity:)();
  sub_10013FE30();
  double v14 = sub_10014BF10();
  swift_release();
  sub_10013FE30();
  double v15 = sub_10014BF40();
  swift_release();
  sub_10013FE30();
  double v16 = sub_10014BE6C();
  swift_release();
  *(double *)a1 = v7;
  *(double *)(a1 + 8) = v8;
  *(double *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 32) = xmmword_100153F70;
  *(void *)(a1 + 48) = 0x4010000000000000;
  *(void *)(a1 + 56) = v13;
  double result = 10.0;
  *(_OWORD *)(a1 + 64) = xmmword_100153F80;
  *(_OWORD *)(a1 + 80) = xmmword_10015CAD0;
  *(double *)(a1 + 96) = v14;
  *(double *)(a1 + 104) = v15;
  *(double *)(a1 + 112) = v16;
  return result;
}

uint64_t sub_100144970(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v28 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v27 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v26 - v12;
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v26 - v16;
  uint64_t v18 = type metadata accessor for PhoneWallpaperView();
  uint64_t v30 = a1;
  sub_100027574(v18, (uint64_t (*)(uint64_t))&State.wrappedValue.getter);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48);
  int v20 = v19(v17, 1, a2);
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  uint64_t result = v29(v17, v6);
  if (v20 == 1)
  {
    uint64_t v26 = v4;
    uint64_t v22 = *(void *)(sub_10013FE30() + 240);
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v31 = v22;
    type metadata accessor for Array();
    swift_getWitnessTable();
    Collection.first.getter();
    swift_bridgeObjectRelease();
    if (v19(v13, 1, a2) == 1)
    {
      return v29(v13, v6);
    }
    else
    {
      uint64_t v23 = v26;
      uint64_t v24 = v28;
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v28, v13, a2);
      uint64_t v25 = (uint64_t)v27;
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v27, v24, a2);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v23 + 56))(v25, 0, 1, a2);
      sub_1001476D8(v25);
      v29((char *)v25, v6);
      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v24, a2);
    }
  }
  return result;
}

uint64_t sub_100144CCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8 = *a5;
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(unsigned char *)(a6 + 16) = a3;
  uint64_t v9 = *(void *)(v8 + 80);
  uint64_t v10 = _s16EventViewService17SelectAssetButtonVMa_0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(a6 + *(int *)(v10 + 36), a4, v9);
  swift_getWitnessTable();
  Bindable<A>.init(wrappedValue:)();
  uint64_t v11 = (uint64_t *)(a6 + *(int *)(v10 + 44));
  type metadata accessor for RemoteViewConfiguration();
  sub_10002EE44((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  uint64_t result = EnvironmentObject.init()();
  *uint64_t v11 = result;
  v11[1] = v13;
  return result;
}

uint64_t _s16EventViewService17SelectAssetButtonVMa_0()
{
  return sub_10000B72C();
}

uint64_t sub_100144E54@<X0>(uint64_t a1@<X8>)
{
  return sub_1001417B0(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100144E60@<X0>(uint64_t a1@<X8>)
{
  return sub_1001427A4(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100144E70()
{
  return sub_100148E24((uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PhoneWallpaperView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100144970);
}

uint64_t sub_100144E9C()
{
  return Binding.wrappedValue.setter();
}

uint64_t sub_100144EF0()
{
  sub_10000570C(&qword_1001A8B70);
  Binding.projectedValue.getter();
  return v1;
}

uint64_t sub_100144F44()
{
  type metadata accessor for PhoneWallpaperViewModel();
  type metadata accessor for Bindable();
  Bindable.wrappedValue.getter();
  return v1;
}

uint64_t sub_100144F94()
{
  return Bindable.projectedValue.getter();
}

uint64_t sub_100144FDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v130 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v131 = *(void *)(a1 + 16);
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v128 = type metadata accessor for Bindable();
  uint64_t v129 = *(void *)(v128 - 8);
  __chkstk_darwin(v128, v4);
  uint64_t v127 = (char *)&v94 - v5;
  uint64_t v120 = type metadata accessor for PlainButtonStyle();
  uint64_t v121 = *(void *)(v120 - 8);
  __chkstk_darwin(v120, v6);
  uint64_t v107 = (char *)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v135 = *(void *)(a1 - 8);
  uint64_t v100 = *(void *)(v135 + 64);
  __chkstk_darwin(v8, v9);
  uint64_t v133 = (char *)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = sub_10000570C(&qword_1001A61E8);
  uint64_t v114 = *(void *)(v111 - 8);
  __chkstk_darwin(v111, v11);
  unint64_t v104 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = sub_10000570C(&qword_1001A61F0);
  uint64_t v113 = *(void *)(v115 - 8);
  __chkstk_darwin(v115, v13);
  uint64_t v105 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = sub_10000570C(&qword_1001A61F8) - 8;
  __chkstk_darwin(v109, v15);
  uint64_t v106 = (char *)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000570C(&qword_1001A62C0);
  __chkstk_darwin(v17, v18);
  uint64_t v110 = (uint64_t)&v94 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for SavedWallpaperView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v147 = v20;
  uint64_t v148 = WitnessTable;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v147 = v20;
  uint64_t v148 = WitnessTable;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v147 = OpaqueTypeMetadata2;
  uint64_t v148 = OpaqueTypeConformance2;
  uint64_t v24 = swift_getOpaqueTypeMetadata2();
  uint64_t v25 = sub_100148AF8(&qword_1001A62D8, &qword_1001A62C0, (void (*)(void))sub_10002F22C);
  uint64_t v147 = OpaqueTypeMetadata2;
  uint64_t v148 = OpaqueTypeConformance2;
  uint64_t v26 = swift_getOpaqueTypeConformance2();
  uint64_t v99 = v17;
  uint64_t v147 = v17;
  uint64_t v148 = v24;
  uint64_t v101 = v24;
  uint64_t v149 = (void *)v25;
  uint64_t v150 = v26;
  uint64_t v103 = v25;
  uint64_t v102 = v26;
  uint64_t v27 = swift_getOpaqueTypeMetadata2();
  uint64_t v119 = v27;
  uint64_t v126 = *(void *)(v27 - 8);
  __chkstk_darwin(v27, v28);
  uint64_t v134 = (char *)&v94 - v29;
  uint64_t v30 = sub_100004A58(&qword_1001AD0F0);
  uint64_t v118 = v30;
  uint64_t v147 = v17;
  uint64_t v148 = v24;
  uint64_t v149 = (void *)v25;
  uint64_t v150 = v26;
  uint64_t v31 = swift_getOpaqueTypeConformance2();
  uint64_t v117 = v31;
  uint64_t v116 = sub_10000A780(&qword_1001AD0F8, &qword_1001AD0F0);
  uint64_t v147 = v27;
  uint64_t v148 = v30;
  uint64_t v149 = &type metadata for Text;
  uint64_t v150 = v31;
  uint64_t v151 = v116;
  uint64_t v152 = &protocol witness table for Text;
  uint64_t v123 = &opaque type descriptor for <<opaque return type of View.alert<A, B>(_:isPresented:actions:message:)>>;
  uint64_t v124 = swift_getOpaqueTypeMetadata2();
  uint64_t v125 = *(void *)(v124 - 8);
  __chkstk_darwin(v124, v32);
  uint64_t v112 = (char *)&v94 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v36 = __chkstk_darwin(v34, v35);
  uint64_t v122 = (char *)&v94 - v37;
  uint64_t v38 = v135;
  uint64_t v98 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v135 + 16);
  uint64_t v39 = v133;
  uint64_t v40 = v108;
  uint64_t v94 = a1;
  v98(v133, v108, a1, v36);
  uint64_t v41 = *(unsigned __int8 *)(v38 + 80);
  v100 += (v41 + 32) & ~v41;
  uint64_t v42 = (v41 + 32) & ~v41;
  uint64_t v97 = v42;
  uint64_t v96 = v41 | 7;
  uint64_t v43 = swift_allocObject();
  uint64_t v44 = v131;
  *(void *)(v43 + 16) = v131;
  *(void *)(v43 + 24) = v2;
  uint64_t v132 = v2;
  uint64_t v95 = *(void (**)(uint64_t, char *, uint64_t))(v38 + 32);
  uint64_t v135 = v38 + 32;
  v95(v43 + v42, v39, a1);
  uint64_t v144 = v44;
  uint64_t v145 = v2;
  uint64_t v146 = v40;
  uint64_t v45 = v40;
  sub_10000570C(&qword_1001A6200);
  sub_10002EAAC();
  uint64_t v46 = v104;
  Button.init(action:label:)();
  uint64_t v47 = v107;
  PlainButtonStyle.init()();
  sub_10000A780(&qword_1001A62B0, &qword_1001A61E8);
  sub_10002EE44(&qword_1001A62B8, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
  uint64_t v48 = v105;
  uint64_t v49 = v111;
  uint64_t v50 = v120;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v121 + 8))(v47, v50);
  (*(void (**)(char *, uint64_t))(v114 + 8))(v46, v49);
  LOBYTE(v38) = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v52 = v51;
  uint64_t v54 = v53;
  uint64_t v56 = v55;
  uint64_t v58 = v57;
  uint64_t v59 = v113;
  uint64_t v60 = (uint64_t)v106;
  uint64_t v61 = v115;
  (*(void (**)(char *, char *, uint64_t))(v113 + 16))(v106, v48, v115);
  uint64_t v62 = v60 + *(int *)(v109 + 44);
  *(unsigned char *)uint64_t v62 = v38;
  *(void *)(v62 + 8) = v52;
  *(void *)(v62 + 16) = v54;
  *(void *)(v62 + 24) = v56;
  *(void *)(v62 + 32) = v58;
  *(unsigned char *)(v62 + 40) = 0;
  (*(void (**)(char *, uint64_t))(v59 + 8))(v48, v61);
  LOBYTE(v38) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v64 = v63;
  uint64_t v66 = v65;
  uint64_t v68 = v67;
  uint64_t v70 = v69;
  uint64_t v71 = v110;
  sub_10000A428(v60, v110, &qword_1001A61F8);
  uint64_t v72 = v71 + *(int *)(v99 + 36);
  *(unsigned char *)uint64_t v72 = v38;
  *(void *)(v72 + 8) = v64;
  *(void *)(v72 + 16) = v66;
  *(void *)(v72 + 24) = v68;
  *(void *)(v72 + 32) = v70;
  *(unsigned char *)(v72 + 40) = 0;
  sub_10000ACE0(v60, &qword_1001A61F8);
  uint64_t v73 = v94;
  uint64_t v74 = v45;
  sub_100144EF0();
  uint64_t v75 = v133;
  ((void (*)(char *, uint64_t, uint64_t))v98)(v133, v74, v73);
  uint64_t v76 = swift_allocObject();
  uint64_t v77 = v131;
  uint64_t v78 = v132;
  *(void *)(v76 + 16) = v131;
  *(void *)(v76 + 24) = v78;
  v95(v76 + v97, v75, v73);
  swift_checkMetadataState();
  View.sheet<A>(isPresented:onDismiss:content:)();
  swift_release();
  swift_release();
  swift_release();
  sub_10000ACE0(v71, &qword_1001A62C0);
  uint64_t v79 = sub_100144F44();
  uint64_t v135 = *(void *)(v79 + 96);
  LODWORD(v133) = *(unsigned __int8 *)(v79 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v80 = v127;
  sub_100144F94();
  uint64_t v81 = v77;
  uint64_t v82 = v132;
  uint64_t v142 = v77;
  uint64_t v143 = v132;
  swift_getKeyPath();
  uint64_t v83 = v128;
  Bindable<A>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v129 + 8))(v80, v83);
  uint64_t v139 = v81;
  uint64_t v140 = v82;
  uint64_t v141 = v74;
  uint64_t v136 = v81;
  uint64_t v137 = v82;
  uint64_t v138 = v74;
  uint64_t v84 = v116;
  uint64_t v85 = v117;
  uint64_t v86 = v118;
  uint64_t v87 = v119;
  uint64_t v88 = v112;
  uint64_t v89 = v134;
  View.alert<A, B>(_:isPresented:actions:message:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v126 + 8))(v89, v87);
  uint64_t v147 = v87;
  uint64_t v148 = v86;
  uint64_t v149 = &type metadata for Text;
  uint64_t v150 = v85;
  uint64_t v151 = v84;
  uint64_t v152 = &protocol witness table for Text;
  swift_getOpaqueTypeConformance2();
  uint64_t v90 = v122;
  uint64_t v91 = v124;
  sub_1001221F0(v88, v124);
  uint64_t v92 = *(void (**)(char *, uint64_t))(v125 + 8);
  v92(v88, v91);
  sub_1001221F0(v90, v91);
  return ((uint64_t (*)(char *, uint64_t))v92)(v90, v91);
}

uint64_t sub_100145DC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = a3;
  uint64_t v5 = _s16EventViewService17SelectAssetButtonVMa_0();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v22 - v8;
  uint64_t v10 = sub_10000570C(&qword_1001A95D0);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100144F44();
  uint64_t v14 = self;
  if (![v14 authorizationStatusForAccessLevel:1])
  {
    swift_release();
    goto LABEL_7;
  }
  id v15 = [v14 authorizationStatusForAccessLevel:1];
  swift_release();
  if (v15 == (id)3)
  {
LABEL_7:
    uint64_t v17 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v13, 1, 1, v17);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
    type metadata accessor for MainActor();
    uint64_t v18 = static MainActor.shared.getter();
    unint64_t v19 = (*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v20 = (char *)swift_allocObject();
    *((void *)v20 + 2) = v18;
    *((void *)v20 + 3) = &protocol witness table for MainActor;
    uint64_t v21 = v23;
    *((void *)v20 + 4) = a2;
    *((void *)v20 + 5) = v21;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v20[v19], v9, v5);
    sub_100061C1C((uint64_t)v13, (uint64_t)&unk_1001AD120, (uint64_t)v20);
    return swift_release();
  }
  sub_100144F44();
  sub_10014BFA0();

  return swift_release();
}

uint64_t sub_100146068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  type metadata accessor for MainActor();
  v6[5] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[6] = v8;
  v6[7] = v7;
  return _swift_task_switch(sub_100146104, v8, v7);
}

uint64_t sub_100146104()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = _s16EventViewService17SelectAssetButtonVMa_0();
  v0[8] = v2;
  v0[9] = sub_100144F44();
  uint64_t v3 = v1 + *(int *)(v2 + 36);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1001AD2B8 + dword_1001AD2B8);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[10] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1001461D8;
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  return v8(v3, v5, v6);
}

uint64_t sub_1001461D8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 48);
    uint64_t v4 = *(void *)(v2 + 56);
    uint64_t v5 = sub_100146464;
  }
  else
  {
    swift_release();
    uint64_t v3 = *(void *)(v2 + 48);
    uint64_t v4 = *(void *)(v2 + 56);
    uint64_t v5 = sub_1001462F4;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_1001462F4()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[2];
  swift_release();
  sub_100144E9C();
  uint64_t v3 = sub_100144F44();
  uint64_t v4 = *(void *)(v3 + 224);
  uint64_t v5 = *(void *)(v3 + 232);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v6 = *(void *)(v2 + *(int *)(v1 + 44));
  if (v6)
  {
    swift_retain();
    sub_100116F94(v4, v5, 8, 10, 28, 0, 3u, v6);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10002EE44((unint64_t *)&qword_1001A5458, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    return EnvironmentObject.error()();
  }
}

uint64_t sub_100146464()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001464D4@<X0>(void *a1@<X8>)
{
  uint64_t v67 = a1;
  uint64_t v66 = sub_10000570C(&qword_1001A62A8) - 8;
  __chkstk_darwin(v66, v1);
  uint64_t v65 = &v50[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v3 = type metadata accessor for RoundedRectangle();
  uint64_t v4 = v3 - 8;
  __chkstk_darwin(v3, v5);
  uint64_t v7 = &v50[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v64 = static VerticalAlignment.center.getter();
  sub_100146878((uint64_t)v74);
  long long v62 = v74[0];
  uint64_t v61 = *(void *)&v74[1];
  char v8 = BYTE8(v74[1]);
  uint64_t v63 = *(void *)&v74[3];
  char v9 = BYTE8(v74[3]);
  long long v60 = v74[2];
  static Font.body.getter();
  static Font.Weight.semibold.getter();
  uint64_t v59 = Font.weight(_:)();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v57 = static Color.white.getter();
  int v56 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v54 = v11;
  uint64_t v55 = v10;
  uint64_t v52 = v13;
  uint64_t v53 = v12;
  char v71 = 0;
  char v70 = v8;
  char v69 = v9;
  char v68 = 0;
  int v51 = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  char v22 = v71;
  char v23 = v70;
  char v24 = v69;
  char v25 = v68;
  char v72 = 0;
  char v26 = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  char v35 = v72;
  char v73 = 0;
  uint64_t v36 = static Color.blue.getter();
  char v37 = static Edge.Set.all.getter();
  *(void *)&v74[0] = v64;
  *((void *)&v74[0] + 1) = 0x4010000000000000;
  LOBYTE(v74[1]) = v22;
  *(_OWORD *)((char *)&v74[1] + 8) = v62;
  *((void *)&v74[2] + 1) = v61;
  LOBYTE(v74[3]) = v23;
  *(_OWORD *)((char *)&v74[3] + 8) = v60;
  *((void *)&v74[4] + 1) = v63;
  LOBYTE(v74[5]) = v24;
  *((void *)&v74[5] + 1) = KeyPath;
  *(void *)&v74[6] = v59;
  *((void *)&v74[6] + 1) = v57;
  LOBYTE(v74[7]) = v56;
  *((void *)&v74[7] + 1) = v55;
  *(void *)&v74[8] = v54;
  *((void *)&v74[8] + 1) = v53;
  *(void *)&v74[9] = v52;
  BYTE8(v74[9]) = v25;
  LOBYTE(v74[10]) = v51;
  *((void *)&v74[10] + 1) = v15;
  *(void *)&v74[11] = v17;
  *((void *)&v74[11] + 1) = v19;
  *(void *)&v74[12] = v21;
  BYTE8(v74[12]) = v35;
  LOBYTE(v74[13]) = v26;
  *((void *)&v74[13] + 1) = v28;
  *(void *)&v74[14] = v30;
  *((void *)&v74[14] + 1) = v32;
  *(void *)&v74[15] = v34;
  BYTE8(v74[15]) = v73;
  *(void *)&v74[16] = v36;
  BYTE8(v74[16]) = v37;
  uint64_t v38 = (char *)v7 + *(int *)(v4 + 28);
  uint64_t v39 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v40 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 104))(v38, v39, v40);
  __asm { FMOV            V0.2D, #12.0 }
  _OWORD *v7 = _Q0;
  uint64_t v46 = v65;
  sub_1000243EC((uint64_t)v7, (uint64_t)v65);
  *(_WORD *)&v46[*(int *)(v66 + 44)] = 256;
  uint64_t v47 = sub_10000570C(&qword_1001A6200);
  uint64_t v48 = v67;
  sub_10000A428((uint64_t)v46, (uint64_t)v67 + *(int *)(v47 + 36), &qword_1001A62A8);
  memcpy(v48, v74, 0x109uLL);
  sub_10002EE94((uint64_t)v74);
  sub_10000ACE0((uint64_t)v46, &qword_1001A62A8);
  sub_100024450((uint64_t)v7);
  return sub_10002EF38((uint64_t)v74);
}

uint64_t sub_100146878@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = Image.init(systemName:)();
  _s16EventViewService17SelectAssetButtonVMa_0();
  sub_100144F44();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v3 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  char v9 = v8 & 1;
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = KeyPath;
  *(void *)(a1 + 48) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  swift_retain();
  sub_10000FCD4(v3, v5, v9);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10000FCC4(v3, v5, v9);
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001469E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v40 = a1;
  uint64_t v48 = a3;
  uint64_t v4 = sub_10000570C(&qword_1001A55E0);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v38 = (uint64_t *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void *)(a2 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SavedWallpaperView();
  uint64_t v47 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  char v37 = (void **)((char *)&v37 - v14);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v49 = v12;
  uint64_t v50 = WitnessTable;
  uint64_t v16 = WitnessTable;
  uint64_t v42 = WitnessTable;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v46 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2, v18);
  uint64_t v41 = (char *)&v37 - v19;
  uint64_t v49 = v12;
  uint64_t v50 = v16;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v49 = OpaqueTypeMetadata2;
  uint64_t v50 = OpaqueTypeConformance2;
  uint64_t v43 = OpaqueTypeConformance2;
  uint64_t v44 = &opaque type descriptor for <<opaque return type of View.presentationDragIndicator(_:)>>;
  uint64_t v21 = swift_getOpaqueTypeMetadata2();
  uint64_t v45 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v22);
  char v24 = (char *)&v37 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25, v26);
  uint64_t v39 = (char *)&v37 - v27;
  type metadata accessor for SavedWallpaperViewModel();
  uint64_t v28 = _s16EventViewService17SelectAssetButtonVMa_0();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v11, v40 + *(int *)(v28 + 36), a2);
  sub_10013A884((uint64_t)v11);
  uint64_t v29 = v38;
  sub_1000AEC98(v38);
  uint64_t v30 = v37;
  sub_1000AECF0((uint64_t)v29, v37);
  sub_10000570C(&qword_1001A8920);
  type metadata accessor for PresentationDetent();
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_100152B80;
  static PresentationDetent.medium.getter();
  static PresentationDetent.large.getter();
  sub_10007F83C(v31);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v32 = v41;
  View.presentationDetents(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(void *, uint64_t))(v47 + 8))(v30, v12);
  uint64_t v33 = v43;
  View.presentationDragIndicator(_:)();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v32, OpaqueTypeMetadata2);
  uint64_t v49 = OpaqueTypeMetadata2;
  uint64_t v50 = v33;
  swift_getOpaqueTypeConformance2();
  uint64_t v34 = v39;
  sub_1001221F0(v24, v21);
  char v35 = *(void (**)(char *, uint64_t))(v45 + 8);
  v35(v24, v21);
  sub_1001221F0(v34, v21);
  return ((uint64_t (*)(char *, uint64_t))v35)(v34, v21);
}

uint64_t sub_100146F3C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10014BFC0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100146F6C()
{
  return sub_10014BFA0();
}

uint64_t sub_100146F94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v72 = a4;
  uint64_t v66 = a2;
  uint64_t v67 = a3;
  uint64_t v5 = _s16EventViewService17SelectAssetButtonVMa_0();
  uint64_t v65 = *(void *)(v5 - 8);
  uint64_t v63 = *(void *)(v65 + 64);
  __chkstk_darwin(v5, v6);
  uint64_t v64 = (char *)v56 - v7;
  uint64_t v8 = sub_10000570C(&qword_1001A56B0);
  uint64_t v70 = *(void *)(v8 - 8);
  uint64_t v71 = v8;
  __chkstk_darwin(v8, v9);
  char v69 = (char *)v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  char v68 = (char *)v56 - v13;
  uint64_t v14 = sub_10000570C(&qword_1001AD100);
  uint64_t v61 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v15);
  long long v60 = (char *)v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v17 - 8, v18);
  uint64_t v20 = (char *)v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for URL();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  uint64_t v25 = (char *)v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26, v27);
  uint64_t v29 = (char *)v56 - v28;
  uint64_t v30 = sub_10000570C(&qword_1001AD108);
  __chkstk_darwin(v30 - 8, v31);
  uint64_t v62 = (uint64_t)v56 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33, v34);
  uint64_t v36 = (char *)v56 - v35;
  sub_100144F44();
  sub_10014C034();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    sub_10000ACE0((uint64_t)v20, &qword_1001AD200);
    uint64_t v37 = 1;
    uint64_t v38 = v61;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v29, v20, v21);
    v56[1] = *(void *)(sub_100144F44() + 160);
    uint64_t v57 = v14;
    uint64_t v58 = a1;
    uint64_t v59 = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v25, v29, v21);
    uint64_t v39 = v60;
    uint64_t v14 = v57;
    a1 = v58;
    uint64_t v5 = v59;
    Link<>.init(_:sensitiveUrl:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v29, v21);
    uint64_t v40 = v61;
    (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v36, v39, v14);
    uint64_t v37 = 0;
    uint64_t v38 = v40;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v36, v37, 1, v14);
  sub_100144F44();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v42 = v64;
  uint64_t v41 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v64, a1, v5);
  unint64_t v43 = (*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
  uint64_t v44 = swift_allocObject();
  uint64_t v45 = v67;
  *(void *)(v44 + 16) = v66;
  *(void *)(v44 + 24) = v45;
  (*(void (**)(unint64_t, char *, uint64_t))(v41 + 32))(v44 + v43, v42, v5);
  uint64_t v46 = v68;
  Button<>.init(_:action:)();
  uint64_t v47 = v62;
  sub_10000A428((uint64_t)v36, v62, &qword_1001AD108);
  uint64_t v49 = v69;
  uint64_t v48 = v70;
  uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v70 + 16);
  uint64_t v51 = v71;
  v50(v69, v46, v71);
  uint64_t v52 = v72;
  sub_10000A428(v47, v72, &qword_1001AD108);
  uint64_t v53 = sub_10000570C(&qword_1001AD110);
  v50((char *)(v52 + *(int *)(v53 + 48)), v49, v51);
  uint64_t v54 = *(void (**)(char *, uint64_t))(v48 + 8);
  v54(v46, v51);
  sub_10000ACE0((uint64_t)v36, &qword_1001AD108);
  v54(v49, v51);
  return sub_10000ACE0(v47, &qword_1001AD108);
}

uint64_t sub_1001475D8()
{
  _s16EventViewService17SelectAssetButtonVMa_0();
  sub_100144F44();
  sub_10014BFA0();

  return swift_release();
}

uint64_t sub_100147624@<X0>(uint64_t a1@<X8>)
{
  _s16EventViewService17SelectAssetButtonVMa_0();
  sub_100144F44();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_1001476D8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Optional();
  __n128 v4 = __chkstk_darwin(v2, v3);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))((char *)&v8 - v5, a1, v2, v4);
  type metadata accessor for State();
  return State.wrappedValue.setter();
}

uint64_t sub_1001477C4@<X0>(uint64_t a1@<X8>)
{
  return sub_100143DE0(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1001477D4()
{
  return sub_100148E24((uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PhoneWallpaperView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10014457C);
}

uint64_t sub_100147800@<X0>(uint64_t a1@<X8>)
{
  return sub_100144688(a1);
}

double sub_10014780C@<D0>(uint64_t a1@<X8>)
{
  return sub_100144714(a1);
}

uint64_t sub_100147818@<X0>(uint64_t a1@<X8>)
{
  return sub_100144124(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100147828()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for PhoneWallpaperView();
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80));
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v4 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v3 + *(int *)(v2 + 36);
  uint64_t v6 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v5, 1, v1)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v1);
  }
  type metadata accessor for Optional();
  type metadata accessor for State();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

int *sub_1001479F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  type metadata accessor for PhoneWallpaperView();

  return sub_100144480(v3, v4, a1);
}

uint64_t sub_100147A8C()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    type metadata accessor for PhoneWallpaperViewModel();
    uint64_t v0 = type metadata accessor for Bindable();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

uint64_t sub_100147B90(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
  }
  else
  {
    *(void *)(a1 + 8) = a2[1];
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v8 = *(int *)(a3 + 36);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = *(void *)(a3 + 16);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_retain();
    swift_retain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 40);
    uint64_t v14 = a1 + v13;
    uint64_t v15 = (uint64_t)a2 + v13;
    type metadata accessor for PhoneWallpaperViewModel();
    uint64_t v16 = type metadata accessor for Bindable();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    uint64_t v17 = *(int *)(a3 + 44);
    uint64_t v18 = (void *)(a1 + v17);
    uint64_t v19 = (uint64_t *)((char *)a2 + v17);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    *uint64_t v18 = v20;
    v18[1] = v21;
  }
  swift_retain();
  return a1;
}

uint64_t sub_100147CFC(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))(a1 + *(int *)(a2 + 36), *(void *)(a2 + 16));
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v5 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  return swift_release();
}

uint64_t sub_100147DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_retain();
  swift_retain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v15 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = *(int *)(a3 + 44);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (uint64_t *)(a2 + v16);
  uint64_t v19 = *v18;
  uint64_t v20 = v18[1];
  *uint64_t v17 = v19;
  v17[1] = v20;
  swift_retain();
  return a1;
}

uint64_t sub_100147EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(a3 + 16) - 8) + 24))(a1 + *(int *)(a3 + 36), a2 + *(int *)(a3 + 36), *(void *)(a3 + 16));
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v9 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 44);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  swift_retain();
  swift_release();
  *(void *)(v11 + 8) = *(void *)(v12 + 8);
  return a1;
}

uint64_t sub_100148034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1 + *(int *)(a3 + 36), a2 + *(int *)(a3 + 36), *(void *)(a3 + 16));
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v9 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)(a1 + *(int *)(a3 + 44)) = *(_OWORD *)(a2 + *(int *)(a3 + 44));
  return a1;
}

uint64_t sub_100148124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(a3 + 16) - 8) + 40))(a1 + *(int *)(a3 + 36), a2 + *(int *)(a3 + 36), *(void *)(a3 + 16));
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v9 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 44);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = (void *)(a2 + v10);
  *(void *)(a1 + v10) = *v12;
  swift_release();
  *(void *)(v11 + 8) = v12[1];
  return a1;
}

uint64_t sub_100148244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100148258);
}

uint64_t sub_100148258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
    if (*(_DWORD *)(v8 + 84) == a2)
    {
      uint64_t v9 = a1 + *(int *)(a3 + 36);
      uint64_t v10 = *(uint64_t (**)(uint64_t))(v8 + 48);
      return v10(v9);
    }
    else
    {
      type metadata accessor for PhoneWallpaperViewModel();
      uint64_t v11 = type metadata accessor for Bindable();
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
      uint64_t v13 = v11;
      uint64_t v14 = a1 + *(int *)(a3 + 40);
      return v12(v14, a2, v13);
    }
  }
}

uint64_t sub_100148394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001483A8);
}

uint64_t sub_1001483A8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
    if (*(_DWORD *)(v7 + 84) == a3)
    {
      uint64_t v8 = result + *(int *)(a4 + 36);
      uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
      return v9(v8, a2, a2);
    }
    else
    {
      type metadata accessor for PhoneWallpaperViewModel();
      uint64_t v10 = type metadata accessor for Bindable();
      uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
      uint64_t v12 = v10;
      uint64_t v13 = v5 + *(int *)(a4 + 40);
      return v11(v13, a2, a2, v12);
    }
  }
  return result;
}

uint64_t sub_1001484DC()
{
  return swift_getWitnessTable();
}

uint64_t sub_100148A78()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100148AC0()
{
  return sub_100148E24((uint64_t (*)(void, uint64_t, uint64_t))_s16EventViewService17SelectAssetButtonVMa_0, sub_100145DC8);
}

uint64_t sub_100148AEC@<X0>(void *a1@<X8>)
{
  return sub_1001464D4(a1);
}

uint64_t sub_100148AF8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100004A58(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100148B7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(_s16EventViewService17SelectAssetButtonVMa_0() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return sub_1001469E4(v5, v3, a1);
}

uint64_t sub_100148C08@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10014BFC0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100148C38()
{
  return sub_10014BFA0();
}

uint64_t sub_100148C60()
{
  return 16;
}

__n128 sub_100148C6C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100148C78@<X0>(uint64_t a1@<X8>)
{
  return sub_100146F94(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100148C84@<X0>(uint64_t a1@<X8>)
{
  return sub_100147624(a1);
}

uint64_t sub_100148C94()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = (int *)(_s16EventViewService17SelectAssetButtonVMa_0() - 8);
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80));
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3 + v2[11], v1);
  uint64_t v4 = v3 + v2[12];
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v5 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100148DF8()
{
  return sub_100148E24((uint64_t (*)(void, uint64_t, uint64_t))_s16EventViewService17SelectAssetButtonVMa_0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1001475D8);
}

uint64_t sub_100148E24(uint64_t (*a1)(void, uint64_t, uint64_t), uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v5 = *(void *)(a1(0, v3, v4) - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return a2(v6, v3, v4);
}

uint64_t sub_100148ED4()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = (int *)(_s16EventViewService17SelectAssetButtonVMa_0() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v3 + v2[11], v1);
  unint64_t v4 = v0 + v3 + v2[12];
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v5 = type metadata accessor for Bindable();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100149040(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = *(void *)(_s16EventViewService17SelectAssetButtonVMa_0() - 8);
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = (uint64_t)v1 + ((*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_100009854;
  return sub_100146068(a1, v7, v8, v9, v4, v5);
}

uint64_t sub_100149148()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10014934C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100149414(char a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (a1) {
    unint64_t v4 = 0xD00000000000001BLL;
  }
  else {
    unint64_t v4 = 0xD000000000000017;
  }
  if (a1) {
    unint64_t v5 = 0x800000010015D1A0;
  }
  else {
    unint64_t v5 = 0x800000010015D180;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  while (1)
  {
    if (*(unsigned char *)(a2 + v6 + 32)) {
      unint64_t v7 = 0xD00000000000001BLL;
    }
    else {
      unint64_t v7 = 0xD000000000000017;
    }
    if (*(unsigned char *)(a2 + v6 + 32)) {
      unint64_t v8 = 0x800000010015D1A0;
    }
    else {
      unint64_t v8 = 0x800000010015D180;
    }
    if (v7 == v4 && v8 == v5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return 1;
    }
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v10) {
      break;
    }
    if (v2 == ++v6)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return 1;
}

unint64_t sub_100149534(uint64_t a1)
{
  return sub_1001498FC(a1, &qword_1001AD218, (uint64_t *)&unk_1001AD220, (uint64_t (*)(uint64_t))sub_1000B8244);
}

unint64_t sub_10014955C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000570C(&qword_1001AD1D0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10000A428(v6, (uint64_t)&v15, &qword_1001AD1D8);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1000B81CC(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_1000FEB98(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100149694(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000570C(&qword_1001AD1C0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10000A428(v6, (uint64_t)v15, &qword_1001AD1C8);
    unint64_t result = sub_1000B8248((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_1000FEB98(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001497D8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000570C(&qword_1001AD208);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000B81CC(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    long long v11 = (uint64_t *)(v2[6] + 16 * result);
    *long long v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001498FC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000570C(a2);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = v7 + 64;
  uint64_t v11 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10000A428(v11, (uint64_t)&v18, a3);
    uint64_t v12 = v18;
    unint64_t result = a4(v18);
    if (v14) {
      break;
    }
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v8[6] + 8 * result) = v12;
    unint64_t result = (unint64_t)sub_1000FEB98(&v19, (_OWORD *)(v8[7] + 32 * result));
    uint64_t v15 = v8[2];
    BOOL v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v8[2] = v17;
    v11 += 40;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_100149AB4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UniversalLinkRouter();
  uint64_t v3 = v2 - 8;
  uint64_t v61 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v61 + 64);
  __chkstk_darwin(v2, v5);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (uint64_t *)(a1 + *(int *)(v3 + 28));
  uint64_t v12 = *v11;
  unint64_t v13 = v11[1];
  uint64_t v14 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0) {
    uint64_t v14 = v12 & 0xFFFFFFFFFFFFLL;
  }
  if (!v14
    || (uint64_t v15 = sub_1001350DC(), v16 = sub_10014934C(v12, v13, v15), swift_bridgeObjectRelease(), (v16 & 1) == 0)
    || (uint64_t v17 = sub_1001351B4()) == 0)
  {
    sub_100134ABC((uint64_t)v10);
    sub_10014B1C0((uint64_t)v10);
LABEL_14:
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return;
  }
  uint64_t v18 = v17;
  char v19 = sub_1000D1500();
  if (!v20 || (char v21 = v19, swift_bridgeObjectRelease(), (v21 & 1) == 0))
  {
    id v22 = sub_100135424();
    if (v22)
    {
      uint64_t v23 = v22;
      id v24 = [self mainBundle];
      id v25 = [v24 bundleIdentifier];

      if (v25)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        type metadata accessor for RemoteViewController();
        uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
        uint64_t v27 = NSStringFromClass(ObjCClassFromMetadata);
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        id v28 = objc_allocWithZone((Class)SBSRemoteAlertDefinition);
        NSString v29 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        NSString v30 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v31 = [v28 initWithServiceName:v29 viewControllerClassName:v30];

        id v32 = [self newHandleWithDefinition:v31 configurationContext:v23];
        id v33 = [objc_allocWithZone((Class)SBSRemoteAlertActivationContext) init];
        [v32 activateWithContext:v33];

        swift_release();
        return;
      }
    }
    goto LABEL_18;
  }
  uint64_t v60 = v18;
  id v34 = objc_allocWithZone((Class)LSApplicationRecord);
  id v35 = sub_10014A5B0(0xD000000000000019, 0x800000010015FE90, 0);
  if (!v35)
  {
LABEL_18:
    sub_100134ABC((uint64_t)v10);
    sub_10014B1C0((uint64_t)v10);
    swift_release();
    goto LABEL_14;
  }
  id v59 = v35;
  id v36 = sub_1001356C4();
  if (!v36)
  {

    goto LABEL_18;
  }
  id v58 = v36;
  id v37 = [objc_allocWithZone((Class)_LSOpenConfiguration) init];
  sub_10000570C(&qword_1001AD1B8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100152B80;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v39;
  *(void *)(inited + 72) = &type metadata for Bool;
  *(unsigned char *)(inited + 48) = 1;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v40;
  *(void *)(inited + 120) = &type metadata for Bool;
  *(unsigned char *)(inited + 96) = 1;
  unint64_t v41 = sub_10014955C(inited);
  if (v12 == 0xD000000000000013 && v13 == 0x800000010015FEB0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v44 = v43;
    uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v66 = &type metadata for String;
    *(void *)&long long aBlock = v45;
    *((void *)&aBlock + 1) = v46;
    sub_1000FEB98(&aBlock, v63);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v62 = v41;
    sub_10014AC7C(v63, v42, v44, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v37 setFrontBoardOptions:isa];

  id v49 = [self defaultWorkspace];
  if (v49)
  {
    uint64_t v50 = v49;
    swift_bridgeObjectRelease();
    uint64_t v51 = swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_1001359DC(a1, (uint64_t)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    unint64_t v52 = (*(unsigned __int8 *)(v61 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
    uint64_t v53 = swift_allocObject();
    *(void *)(v53 + 16) = v51;
    sub_10014B67C((uint64_t)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v53 + v52);
    uint64_t v67 = sub_10014B6E0;
    uint64_t v68 = v53;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    uint64_t v65 = sub_10014A41C;
    uint64_t v66 = &unk_10019C090;
    uint64_t v54 = _Block_copy(&aBlock);
    id v55 = v58;
    id v56 = v59;
    id v57 = v37;
    swift_release();
    [v50 openUserActivity:v55 usingApplicationRecord:v56 configuration:v57 completionHandler:v54];

    swift_release();
    _Block_release(v54);
  }
  else
  {
    __break(1u);
  }
}

void sub_10014A24C(char a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) == 0)
  {
    if (qword_1001A4F38 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100017378(v7, (uint64_t)qword_1001B75B8);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to open ShazamEventsApp, falling back to Safari)", v10, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v12 = (void *)Strong;
      sub_100134ABC((uint64_t)v6);
      sub_10014B1C0((uint64_t)v6);

      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    }
  }
}

void sub_10014A41C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

id sub_10014A4D4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppDelegate();
  return [super dealloc];
}

int main(int argc, const char **argv, const char **envp)
{
  int v3 = static CommandLine.argc.getter();
  uint64_t v4 = (char **)static CommandLine.unsafeArgv.getter();
  type metadata accessor for AppDelegate();
  uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  id v6 = NSStringFromClass(ObjCClassFromMetadata);
  if (!v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v6 = (NSString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  UIApplicationMain(v3, v4, 0, v6);

  return 0;
}

uint64_t type metadata accessor for AppDelegate()
{
  return self;
}

id sub_10014A5B0(uint64_t a1, uint64_t a2, char a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = 0;
  id v6 = [v3 initWithBundleIdentifier:v5 allowPlaceholder:a3 & 1 error:&v10];

  if (v6)
  {
    id v7 = v10;
  }
  else
  {
    id v8 = v10;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

uint64_t sub_10014A68C(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  sub_10000570C(&qword_1001AD210);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_38;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  id v36 = v2;
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v14++, 1)) {
      goto LABEL_40;
    }
    if (v14 >= v11) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v14);
    if (!v24)
    {
      int64_t v25 = v14 + 1;
      if (v14 + 1 >= v11)
      {
LABEL_31:
        swift_release();
        int v3 = v36;
        if ((v38 & 1) == 0) {
          goto LABEL_38;
        }
        goto LABEL_34;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v25);
      if (!v24)
      {
        while (1)
        {
          int64_t v14 = v25 + 1;
          if (__OFADD__(v25, 1)) {
            break;
          }
          if (v14 >= v11) {
            goto LABEL_31;
          }
          unint64_t v24 = *(void *)(v37 + 8 * v14);
          ++v25;
          if (v24) {
            goto LABEL_20;
          }
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      ++v14;
    }
LABEL_20:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_21:
    uint64_t v26 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    NSString v29 = *(void **)(*(void *)(v5 + 56) + 8 * v21);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v30 = v29;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v33 = v17 == v32;
        if (v17 == v32) {
          unint64_t v17 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v17);
      }
      while (v34 == -1);
      unint64_t v18 = __clz(__rbit64(~v34)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    char v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    *char v19 = v28;
    v19[1] = v27;
    *(void *)(*(void *)(v7 + 56) + 8 * v18) = v29;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int v3 = v36;
  uint64_t v23 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_38;
  }
LABEL_34:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_38:
  uint64_t result = swift_release();
  *int v3 = v7;
  return result;
}

uint64_t sub_10014A97C(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  sub_10000570C(&qword_1001AD1D0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              int v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      unint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      unint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_1000FEB98(v24, v35);
      }
      else
      {
        sub_100044E1C((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *uint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_1000FEB98(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *int v3 = v7;
  return result;
}

_OWORD *sub_10014AC7C(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1000B81CC(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10014AFD8();
      goto LABEL_7;
    }
    sub_10014A97C(v15, a4 & 1);
    unint64_t v21 = sub_1000B81CC(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      int64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  int64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    unint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    sub_100007584((uint64_t)v19);
    return sub_1000FEB98(a1, v19);
  }
LABEL_13:
  sub_10014ADD0(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

_OWORD *sub_10014ADD0(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_1000FEB98(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

id sub_10014AE3C()
{
  uint64_t v1 = v0;
  sub_10000570C(&qword_1001AD210);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_24:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v9++, 1)) {
      goto LABEL_26;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    if (!v23) {
      break;
    }
LABEL_23:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    int64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v9 + 1;
  if (v9 + 1 >= v13) {
    goto LABEL_24;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    ++v9;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

void *sub_10014AFD8()
{
  uint64_t v1 = v0;
  sub_10000570C(&qword_1001AD1D0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_100044E1C(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    sub_1000FEB98(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_10014B1C0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A4F38 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100017378(v7, (uint64_t)qword_1001B75B8);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    v19[1] = a1;
    uint64_t v11 = (uint8_t *)v10;
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    sub_10014B77C(&qword_1001A6C50, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    v19[2] = sub_1000FE1F8(v12, v13, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Opening %s in Safari", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }

  id v14 = [self sharedApplication];
  URL._bridgeToObjectiveC()(v15);
  uint64_t v17 = v16;
  sub_1001498FC((uint64_t)_swiftEmptyArrayStorage, &qword_1001AD1F0, &qword_1001AD1F8, (uint64_t (*)(uint64_t))sub_1000B8244);
  type metadata accessor for OpenExternalURLOptionsKey(0);
  sub_10014B77C((unint64_t *)&unk_1001AD1E0, type metadata accessor for OpenExternalURLOptionsKey);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v14 openURL:v17 options:isa completionHandler:0];
}

uint64_t sub_10014B548()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_10014B580()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UniversalLinkRouter() - 8) + 80);
  uint64_t v2 = (v1 + 24) & ~v1;
  swift_release();
  uint64_t v3 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v0 + v2, v3);
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10014B67C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UniversalLinkRouter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10014B6E0(char a1)
{
  type metadata accessor for UniversalLinkRouter();

  sub_10014A24C(a1);
}

uint64_t sub_10014B764(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10014B774()
{
  return swift_release();
}

uint64_t sub_10014B77C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10014B7C4(void *a1)
{
  uint64_t v2 = type metadata accessor for UniversalLinkRouter();
  __chkstk_darwin(v2, v3);
  uint64_t v46 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000570C(&qword_1001AD200);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v47 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v45 - v15;
  *(void *)&double v19 = __chkstk_darwin(v17, v18).n128_u64[0];
  unint64_t v21 = (char *)&v45 - v20;
  id v22 = [a1 activityType:v19];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  if (v23 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v25 == v26)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v28 & 1) == 0) {
      goto LABEL_14;
    }
  }
  id v29 = [a1 webpageURL];
  if (v29)
  {
    BOOL v30 = v29;
    uint64_t v45 = v2;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v31(v8, v16, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
    {
      v31(v21, v8, v9);
      uint64_t v32 = v47;
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v47, v21, v9);
      id v33 = [a1 _sourceApplication];
      if (v33)
      {
        uint64_t v34 = v33;
        uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v37 = v36;
      }
      else
      {
        uint64_t v35 = 0;
        unint64_t v37 = 0xE000000000000000;
      }
      uint64_t v43 = (uint64_t)v46;
      v31(v46, v32, v9);
      uint64_t v44 = (uint64_t *)(v43 + *(int *)(v45 + 20));
      *uint64_t v44 = v35;
      v44[1] = v37;
      sub_100149AB4(v43);
      sub_100135A40(v43);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v21, v9);
      return 1;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  }
  sub_100065FC0((uint64_t)v8);
LABEL_14:
  if (qword_1001A4F38 != -1) {
    swift_once();
  }
  uint64_t v38 = type metadata accessor for Logger();
  sub_100017378(v38, (uint64_t)qword_1001B75B8);
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v39, v40))
  {
    unint64_t v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Ignore user activity, it's not a universal link", v41, 2u);
    swift_slowDealloc();
  }

  return 0;
}

uint64_t sub_10014BC40()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F) {
    return swift_initClassMetadata2();
  }
  return result;
}

uint64_t sub_10014BD24(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double a5, double a6)
{
  uint64_t v12 = swift_allocObject();
  sub_10014C4C0(a1, a2, a3, a4, a5, a6);
  return v12;
}

uint64_t sub_10014BDA4()
{
  swift_getKeyPath();
  sub_10014C1AC();
  swift_release();
  return *(unsigned __int8 *)(v0 + 264);
}

double sub_10014BE18()
{
  return sub_10014C138() * 0.5075 * 0.87;
}

double sub_10014BE48()
{
  return sub_10014C138() * 0.96;
}

double sub_10014BE70()
{
  double v0 = sub_10014C30C();
  return (v0 + sub_10014C138() * -0.5075) * 0.5;
}

BOOL sub_10014BEB0()
{
  return Array.count.getter() > 1;
}

double sub_10014BEEC()
{
  return sub_10014C138() * -0.022;
}

double sub_10014BF10()
{
  return sub_10014C138() * 0.5075 * 0.9;
}

double sub_10014BF40()
{
  return sub_10014C138() * 0.97;
}

double sub_10014BF64()
{
  return sub_10014C138() * 0.5075 * 0.87 * 0.14;
}

uint64_t sub_10014BFA0()
{
  return sub_10014C420();
}

uint64_t sub_10014BFC0()
{
  swift_getKeyPath();
  sub_10014C1AC();
  swift_release();
  return *(unsigned __int8 *)(v0 + 265);
}

uint64_t sub_10014C034()
{
  uint64_t v0 = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  id v1 = [self mainBundle];
  id v2 = [v1 bundleIdentifier];

  if (v2)
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v0 = v4;
  }
  else
  {
    uint64_t v3 = 0;
  }
  v5._countAndFlagsBits = v3;
  v5._object = v0;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  URL.init(string:)();

  return swift_bridgeObjectRelease();
}

double sub_10014C138()
{
  swift_getKeyPath();
  sub_10014C1AC();
  swift_release();
  return *(double *)(v0 + 248);
}

uint64_t sub_10014C1AC()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t sub_10014C240()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

double sub_10014C30C()
{
  swift_getKeyPath();
  sub_10014C1AC();
  swift_release();
  return *(double *)(v0 + 256);
}

uint64_t sub_10014C380()
{
  return swift_release();
}

uint64_t sub_10014C420()
{
  return swift_release();
}

uint64_t sub_10014C4C0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double a5, double a6)
{
  *(void *)(v6 + 16) = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v6 + 24) = v13;
  *(unsigned char *)(v6 + 32) = v14 & 1;
  *(void *)(v6 + 40) = v15;
  *(void *)(v6 + 48) = 0x7A6542656E6F6870;
  *(void *)(v6 + 56) = 0xEA00000000006C65;
  *(void *)(v6 + 64) = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v6 + 72) = v16;
  *(unsigned char *)(v6 + 80) = v17 & 1;
  *(void *)(v6 + 88) = v18;
  *(void *)(v6 + 96) = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v6 + 104) = v19;
  *(unsigned char *)(v6 + 112) = v20 & 1;
  *(void *)(v6 + 120) = v21;
  *(void *)(v6 + 128) = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v6 + 136) = v22;
  *(unsigned char *)(v6 + 144) = v23 & 1;
  *(void *)(v6 + 152) = v24;
  *(void *)(v6 + 160) = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v6 + 168) = v25;
  *(unsigned char *)(v6 + 176) = v26 & 1;
  *(void *)(v6 + 184) = v27;
  *(void *)(v6 + 192) = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v6 + 200) = v28;
  *(unsigned char *)(v6 + 208) = v29 & 1;
  *(void *)(v6 + 216) = v30;
  *(unsigned char *)(v6 + 265) = 0;
  ObservationRegistrar.init()();
  *(void *)(v6 + 224) = a1;
  *(void *)(v6 + 232) = a2;
  *(void *)(v6 + 240) = a3;
  *(double *)(v6 + 248) = a5;
  *(double *)(v6 + 256) = a6;
  *(unsigned char *)(v6 + 264) = a4;
  return v6;
}

uint64_t sub_10014C64C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + qword_1001AD230;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_10014C740()
{
  sub_10014C64C();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PhoneWallpaperViewModel()
{
  return sub_10000B72C();
}

uint64_t sub_10014C7B0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10014BDA4();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10014C7E0()
{
  return sub_10014C420();
}

uint64_t sub_10014C824()
{
  return 16;
}

__n128 sub_10014C830(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_10014C83C()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 264) = *(unsigned char *)(v0 + 24);
}

void sub_10014C84C(double *a1@<X8>)
{
  *a1 = sub_10014C138();
}

uint64_t sub_10014C878()
{
  return sub_10014C380();
}

uint64_t sub_10014C8BC()
{
  return 16;
}

__n128 sub_10014C8C8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_10014C8D4()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + 248) = result;
  return result;
}

void sub_10014C8E4(double *a1@<X8>)
{
  *a1 = sub_10014C30C();
}

uint64_t sub_10014C910()
{
  return sub_10014C380();
}

uint64_t sub_10014C954()
{
  return 16;
}

__n128 sub_10014C960(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_10014C96C()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + 256) = result;
  return result;
}

uint64_t sub_10014C984()
{
  return 16;
}

__n128 sub_10014C990(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_10014C99C()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 265) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_10014C9AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  type metadata accessor for MainActor();
  v3[10] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[11] = v5;
  v3[12] = v4;
  return _swift_task_switch(sub_10014CA48, v5, v4);
}

uint64_t sub_10014CA48()
{
  uint64_t v1 = *(void *)(v0 + 56);
  long long v5 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 40) = v5;
  uint64_t v2 = sub_10000A7C4((uint64_t *)(v0 + 16));
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(v5 - 8) + 16))(v2, v1);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10004644C;
  return sub_10004C60C(v0 + 16);
}

id sub_10014CB30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(a2 + 48))();
  if (v4)
  {
    long long v5 = (void *)v4;
    double v6 = (*(double (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
    id v8 = [objc_allocWithZone((Class)MKPlacemark) initWithCoordinate:v5 postalAddress:v6];
  }
  else
  {
    double v9 = (*(double (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
    id v8 = [objc_allocWithZone((Class)MKPlacemark) initWithCoordinate:v9, v10];
  }
  id v11 = [objc_allocWithZone((Class)MKMapItem) initWithPlacemark:v8];

  return v11;
}

uint64_t sub_10014CC44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  id v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(v9 + 16);
  if (!v10) {
    return 0;
  }
  swift_bridgeObjectRetain_n();
  id v11 = (void **)(v9 + 48);
  while (1)
  {
    uint64_t v12 = (uint64_t)*(v11 - 1);
    uint64_t v13 = *v11;
    if ((*(unsigned char *)(v11 - 2) & 1) == 0) {
      break;
    }
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_8;
    }
    v11 += 3;
    swift_bridgeObjectRelease();
    if (!--v10)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static Locale.current.getter();
  v15._countAndFlagsBits = v12;
  v15._object = v13;
  object = Locale.localizedString(forRegionCode:)(v15).value._object;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if (!object) {
    return 0;
  }
  uint64_t v17 = *(void *)(a2 + 16);
  if (!v17)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v18 = (unint64_t *)(a2 + 40);
  while (1)
  {
    unint64_t v19 = *v18;
    if (*v18 < 2) {
      goto LABEL_11;
    }
    uint64_t v20 = *(v18 - 1);
    Swift::String v21 = String.lowercased()();
    Swift::String v22 = String.lowercased()();
    if (v21._countAndFlagsBits == v22._countAndFlagsBits && v21._object == v22._object) {
      break;
    }
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v24) {
      goto LABEL_24;
    }
    sub_100007D90(v20, v19);
LABEL_11:
    v18 += 2;
    if (!--v17)
    {
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease_n();
LABEL_24:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  return v20;
}

unint64_t destroy for ScrollableTabViewModel(uint64_t a1)
{
  swift_bridgeObjectRelease();
  unint64_t result = *(void *)(a1 + 16);
  if (result >= 2)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *_s16EventViewService22ScrollableTabViewModelVwCP_0(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2 + 1;
  unint64_t v4 = a2[2];
  swift_bridgeObjectRetain();
  if (v4 >= 2)
  {
    a1[1] = *v3;
    a1[2] = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 1) = *(_OWORD *)v3;
  }
  return a1;
}

void *assignWithCopy for ScrollableTabViewModel(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v4 = a2[2];
  if (a1[2] >= 2uLL)
  {
    if (v4 >= 2)
    {
      a1[1] = a2[1];
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1000077B4((uint64_t)(a1 + 1));
    goto LABEL_6;
  }
  if (v4 < 2)
  {
LABEL_6:
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    return a1;
  }
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithTake for ScrollableTabViewModel(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  unint64_t v4 = a2 + 1;
  if (a1[2] >= 2uLL)
  {
    unint64_t v5 = a2[2];
    if (v5 >= 2)
    {
      a1[1] = *v4;
      a1[2] = v5;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1000077B4((uint64_t)(a1 + 1));
  }
  *(_OWORD *)(a1 + 1) = *(_OWORD *)v4;
  return a1;
}

ValueMetadata *type metadata accessor for ScrollableTabViewModel()
{
  return &type metadata for ScrollableTabViewModel;
}

void sub_10014D128()
{
  qword_1001B7558 = 0x615020746E657645;
  unk_1001B7560 = 0xEA00000000006567;
}

void sub_10014D150()
{
  qword_1001B7568 = 0x5020747369747241;
  unk_1001B7570 = 0xEB00000000656761;
}

void sub_10014D17C()
{
  qword_1001B7578 = 0x61502065756E6556;
  unk_1001B7580 = 0xEA00000000006567;
}

void sub_10014D1A4()
{
  unk_1001B7595 = 0;
  unk_1001B7596 = -5120;
}

void sub_10014D1D0()
{
  unk_1001B75A5 = 0;
  unk_1001B75A6 = -5120;
}

void sub_10014D1FC()
{
  unk_1001B75B7 = -18;
}

uint64_t sub_10014D22C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10014D29C(v0, qword_1001B75B8);
  sub_100017378(v0, (uint64_t)qword_1001B75B8);
  return Logger.init(subsystem:category:)();
}

uint64_t *sub_10014D29C(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_10014D300()
{
  uint64_t v1 = *(void **)(v0 + 56);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 48);
    long long v8 = *(_OWORD *)(v0 + 32);
    uint64_t v7 = v8;
    swift_bridgeObjectRetain();
    sub_100012A58((uint64_t)&v8);
    v3._countAndFlagsBits = 10;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    v4._countAndFlagsBits = v2;
    v4._object = v1;
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    return v7;
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 32);
    swift_bridgeObjectRetain();
  }
  return v5;
}

uint64_t sub_10014D394()
{
  uint64_t v1 = type metadata accessor for URLComponents();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init()();
  if (qword_1001A4F40 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  URLComponents.scheme.setter();
  if (qword_1001A4F48 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  URLComponents.host.setter();
  uint64_t v6 = *(void **)(v0 + 56);
  if (v6)
  {
    uint64_t v7 = *(void *)(v0 + 48);
    long long v11 = *(_OWORD *)(v0 + 32);
    long long v12 = v11;
    swift_bridgeObjectRetain();
    sub_100012A58((uint64_t)&v12);
    v8._countAndFlagsBits = 2106912;
    v8._object = (void *)0xE300000000000000;
    String.append(_:)(v8);
    v9._countAndFlagsBits = v7;
    v9._object = v6;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  sub_10000570C(&qword_1001A5388);
  type metadata accessor for URLQueryItem();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_100153180;
  if (qword_1001A4F50 != -1) {
    swift_once();
  }
  URLQueryItem.init(name:value:)();
  swift_bridgeObjectRelease();
  URLComponents.queryItems.setter();
  URLComponents.url.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
}

void sub_10014D664(uint64_t a1)
{
  sub_10000570C(&qword_1001A5390);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100152B90;
  uint64_t v5 = *v1;
  uint64_t v4 = v1[1];
  *(void *)(v3 + 56) = &type metadata for AnalyticsString;
  *(void *)(v3 + 64) = &off_1001AAD38;
  *(unsigned char *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = v5;
  *(void *)(v3 + 48) = v4;
  *(void *)(v3 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v3 + 104) = &off_1001AAD10;
  *(unsigned char *)(v3 + 72) = 0;
  *(void *)(v3 + 136) = &type metadata for AnalyticsModuleName;
  *(void *)(v3 + 144) = &off_1001AAD98;
  *(unsigned char *)(v3 + 112) = 4;
  *(void *)(v3 + 176) = &type metadata for AnalyticsModuleAction;
  *(void *)(v3 + 184) = &off_1001AAD70;
  *(_OWORD *)(v3 + 152) = xmmword_10015CF40;
  *(unsigned char *)(v3 + 168) = 3;
  if (*(void *)(a1 + 72))
  {
    uint64_t v6 = *(void *)(a1 + 64);
    unint64_t v7 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  uint64_t v20 = &type metadata for AnalyticsString;
  Swift::String v21 = (void *(*)())&off_1001AAD38;
  LOBYTE(aBlock) = 1;
  uint64_t v18 = v6;
  unint64_t v19 = (Class (*)(uint64_t))v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v23 = sub_1001378BC((char *)1, 5, 1, (char *)v3);
  uint64_t v8 = sub_100007534((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v8, v8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v10);
  sub_100116BFC(4, (uint64_t)v10, (uint64_t *)&v23, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_1001AAD38);
  sub_100007584((uint64_t)&aBlock);
  long long v12 = v23;
  NSString v13 = String._bridgeToObjectiveC()();
  char v14 = (void *)swift_allocObject();
  void v14[2] = 0xD00000000000001ELL;
  v14[3] = 0x800000010015D360;
  void v14[4] = v12;
  Swift::String v21 = sub_100007614;
  Swift::String v22 = v14;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v18 = 1107296256;
  unint64_t v19 = sub_100116B70;
  uint64_t v20 = (ValueMetadata *)&unk_10019C218;
  Swift::String v15 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v15);
  swift_bridgeObjectRelease();
}

void sub_10014D930()
{
  qword_1001AD2C0 = 0x7370747468;
  *(void *)algn_1001AD2C8 = 0xE500000000000000;
}

void sub_10014D950()
{
  algn_1001AD2D8[7] = -18;
}

void sub_10014D980()
{
  qword_1001AD2E0 = 113;
  *(void *)algn_1001AD2E8 = 0xE100000000000000;
}

uint64_t sub_10014D998()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10014D9D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10014D9E8()
{
  return swift_release();
}

uint64_t sub_10014D9F0()
{
  sub_1000D1500();
  if (v0)
  {
    uint64_t v1 = v0;
    if (*(void *)(v0 + 16) && (unint64_t v2 = sub_1000B828C(0), (v3 & 1) != 0))
    {
      uint64_t v4 = *(unsigned __int8 *)(*(void *)(v1 + 56) + v2);
      swift_bridgeObjectRelease();
      char v5 = 1;
      switch(v4)
      {
        case 1:
          break;
        default:
          char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
          break;
      }
    }
    else
    {
      char v5 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v5 = 0;
  }
  return v5 & 1;
}

uint64_t destroy for LocationViewModel(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LocationViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  unint64_t v7 = *(void **)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 72) = v6;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v8 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LocationViewModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 64);
  uint64_t v5 = *(void **)(a2 + 64);
  *(void *)(a1 + 64) = v5;
  id v6 = v5;

  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for LocationViewModel(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for LocationViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  long long v6 = *(void **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);

  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LocationViewModel(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LocationViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationViewModel()
{
  return &type metadata for LocationViewModel;
}

uint64_t sub_10014DE5C()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return self;
}

uint64_t static LocationButton.Title.currentLocation.getter()
{
  return static LocationButton.Title.currentLocation.getter();
}

uint64_t type metadata accessor for LocationButton.Title()
{
  return type metadata accessor for LocationButton.Title();
}

uint64_t type metadata accessor for LocationButton()
{
  return type metadata accessor for LocationButton();
}

uint64_t LocationButton.init(_:action:)()
{
  return LocationButton.init(_:action:)();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of JSONDecoder.decode<A>(_:from:)();
}

uint64_t JSONDecoder.init()()
{
  return JSONDecoder.init()();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return type metadata accessor for JSONDecoder();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return dispatch thunk of JSONEncoder.encode<A>(_:)();
}

uint64_t JSONEncoder.init()()
{
  return JSONEncoder.init()();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return type metadata accessor for JSONEncoder();
}

uint64_t DateInterval.end.getter()
{
  return DateInterval.end.getter();
}

uint64_t DateInterval.init(start:end:)()
{
  return DateInterval.init(start:end:)();
}

uint64_t DateInterval.start.getter()
{
  return DateInterval.start.getter();
}

uint64_t type metadata accessor for DateInterval()
{
  return type metadata accessor for DateInterval();
}

uint64_t Notification.name.getter()
{
  return Notification.name.getter();
}

uint64_t Notification.userInfo.getter()
{
  return Notification.userInfo.getter();
}

uint64_t type metadata accessor for Notification()
{
  return type metadata accessor for Notification();
}

uint64_t URLQueryItem.init(name:value:)()
{
  return URLQueryItem.init(name:value:)();
}

uint64_t URLQueryItem.name.getter()
{
  return URLQueryItem.name.getter();
}

uint64_t URLQueryItem.value.getter()
{
  return URLQueryItem.value.getter();
}

uint64_t type metadata accessor for URLQueryItem()
{
  return type metadata accessor for URLQueryItem();
}

uint64_t URLComponents.queryItems.getter()
{
  return URLComponents.queryItems.getter();
}

uint64_t URLComponents.queryItems.setter()
{
  return URLComponents.queryItems.setter();
}

uint64_t URLComponents.percentEncodedQuery.getter()
{
  return URLComponents.percentEncodedQuery.getter();
}

uint64_t URLComponents.init(url:resolvingAgainstBaseURL:)()
{
  return URLComponents.init(url:resolvingAgainstBaseURL:)();
}

uint64_t URLComponents.url.getter()
{
  return URLComponents.url.getter();
}

uint64_t URLComponents.host.setter()
{
  return URLComponents.host.setter();
}

uint64_t URLComponents.path.setter()
{
  return URLComponents.path.setter();
}

uint64_t URLComponents.scheme.setter()
{
  return URLComponents.scheme.setter();
}

uint64_t URLComponents.init()()
{
  return URLComponents.init()();
}

uint64_t type metadata accessor for URLComponents()
{
  return type metadata accessor for URLComponents();
}

uint64_t type metadata accessor for DateComponents()
{
  return type metadata accessor for DateComponents();
}

uint64_t AttributeScopes.SwiftUIAttributes.font.getter()
{
  return AttributeScopes.SwiftUIAttributes.font.getter();
}

uint64_t AttributedString.subscript.setter()
{
  return AttributedString.subscript.setter();
}

uint64_t type metadata accessor for AttributedString.MarkdownParsingOptions.FailurePolicy()
{
  return type metadata accessor for AttributedString.MarkdownParsingOptions.FailurePolicy();
}

uint64_t type metadata accessor for AttributedString.MarkdownParsingOptions.InterpretedSyntax()
{
  return type metadata accessor for AttributedString.MarkdownParsingOptions.InterpretedSyntax();
}

uint64_t AttributedString.MarkdownParsingOptions.init(allowsExtendedAttributes:interpretedSyntax:failurePolicy:languageCode:)()
{
  return AttributedString.MarkdownParsingOptions.init(allowsExtendedAttributes:interpretedSyntax:failurePolicy:languageCode:)();
}

uint64_t type metadata accessor for AttributedString.MarkdownParsingOptions()
{
  return type metadata accessor for AttributedString.MarkdownParsingOptions();
}

uint64_t AttributedString.init(markdown:options:baseURL:)()
{
  return AttributedString.init(markdown:options:baseURL:)();
}

uint64_t type metadata accessor for AttributedString()
{
  return type metadata accessor for AttributedString();
}

uint64_t AttributedString.init(_:attributes:)()
{
  return AttributedString.init(_:attributes:)();
}

uint64_t AttributedString.init(_:)()
{
  return AttributedString.init(_:)();
}

Swift::String __swiftcall NSLocalizedString(_:tableName:bundle:value:comment:)(Swift::String _, Swift::String_optional tableName, NSBundle bundle, Swift::String value, Swift::String comment)
{
  uint64_t v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(_._countAndFlagsBits, _._object, tableName.value._countAndFlagsBits, tableName.value._object, bundle.super.isa, value._countAndFlagsBits, value._object, comment._countAndFlagsBits);
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

uint64_t AttributeContainer.init()()
{
  return AttributeContainer.init()();
}

uint64_t type metadata accessor for AttributeContainer()
{
  return type metadata accessor for AttributeContainer();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
}

uint64_t PropertyListDecoder.init()()
{
  return PropertyListDecoder.init()();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return type metadata accessor for PropertyListDecoder();
}

uint64_t AttributeDynamicLookup.subscript.getter()
{
  return AttributeDynamicLookup.subscript.getter();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t URL.absoluteString.getter()
{
  return URL.absoluteString.getter();
}

uint64_t URL.pathComponents.getter()
{
  return URL.pathComponents.getter();
}

uint64_t URL.lastPathComponent.getter()
{
  return URL.lastPathComponent.getter();
}

uint64_t static URL.temporaryDirectory.getter()
{
  return static URL.temporaryDirectory.getter();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t URL.appendingPathComponent(_:isDirectory:)()
{
  return URL.appendingPathComponent(_:isDirectory:)();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t URL.host.getter()
{
  return URL.host.getter();
}

uint64_t URL.path.getter()
{
  return URL.path.getter();
}

uint64_t URL.scheme.getter()
{
  return URL.scheme.getter();
}

uint64_t URL.init(string:)()
{
  return URL.init(string:)();
}

uint64_t URL.appending(queryItems:)()
{
  return URL.appending(queryItems:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

uint64_t Data.init(contentsOf:options:)()
{
  return Data.init(contentsOf:options:)();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Date.addingTimeInterval(_:)()
{
  return Date.addingTimeInterval(_:)();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t static Date.< infix(_:_:)()
{
  return static Date.< infix(_:_:)();
}

uint64_t static Date.== infix(_:_:)()
{
  return static Date.== infix(_:_:)();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t Date.init()()
{
  return Date.init()();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

Swift::String_optional __swiftcall Locale.localizedString(forRegionCode:)(Swift::String forRegionCode)
{
  uint64_t v1 = Locale.localizedString(forRegionCode:)(forRegionCode._countAndFlagsBits, forRegionCode._object);
  result.value._object = v2;
  result.value._countAndFlagsBits = v1;
  return result;
}

NSLocale __swiftcall Locale._bridgeToObjectiveC()()
{
  return (NSLocale)Locale._bridgeToObjectiveC()();
}

uint64_t static Locale.current.getter()
{
  return static Locale.current.getter();
}

uint64_t type metadata accessor for Locale()
{
  return type metadata accessor for Locale();
}

uint64_t Calendar.dateComponents(_:from:)()
{
  return Calendar.dateComponents(_:from:)();
}

uint64_t Calendar.date(from:)()
{
  return Calendar.date(from:)();
}

uint64_t Calendar.compare(_:to:toGranularity:)()
{
  return Calendar.compare(_:to:toGranularity:)();
}

uint64_t static Calendar.current.getter()
{
  return static Calendar.current.getter();
}

uint64_t Calendar.timeZone.getter()
{
  return Calendar.timeZone.getter();
}

uint64_t type metadata accessor for Calendar.Component()
{
  return type metadata accessor for Calendar.Component();
}

uint64_t Calendar.component(_:from:)()
{
  return Calendar.component(_:from:)();
}

uint64_t type metadata accessor for Calendar()
{
  return type metadata accessor for Calendar();
}

uint64_t TimeZone.secondsFromGMT(for:)()
{
  return TimeZone.secondsFromGMT(for:)();
}

NSTimeZone __swiftcall TimeZone._bridgeToObjectiveC()()
{
  return (NSTimeZone)TimeZone._bridgeToObjectiveC()();
}

uint64_t type metadata accessor for TimeZone()
{
  return type metadata accessor for TimeZone();
}

uint64_t ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

uint64_t ObservationRegistrar.access<A, B>(_:keyPath:)()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t ObservationRegistrar.init()()
{
  return ObservationRegistrar.init()();
}

uint64_t type metadata accessor for ObservationRegistrar()
{
  return type metadata accessor for ObservationRegistrar();
}

uint64_t type metadata accessor for EventsError()
{
  return type metadata accessor for EventsError();
}

uint64_t Participants<>.headliners.getter()
{
  return Participants<>.headliners.getter();
}

uint64_t Participants<>.support.getter()
{
  return Participants<>.support.getter();
}

uint64_t VenueSchedule.venue.getter()
{
  return VenueSchedule.venue.getter();
}

uint64_t VenueSchedule.events.getter()
{
  return VenueSchedule.events.getter();
}

uint64_t PromotionalAssets.PhotoAlbum.Photo.url.getter()
{
  return PromotionalAssets.PhotoAlbum.Photo.url.getter();
}

uint64_t type metadata accessor for PromotionalAssets.PhotoAlbum.Photo()
{
  return type metadata accessor for PromotionalAssets.PhotoAlbum.Photo();
}

uint64_t PromotionalAssets.PhotoAlbum.photos.getter()
{
  return PromotionalAssets.PhotoAlbum.photos.getter();
}

uint64_t type metadata accessor for PromotionalAssets.PhotoAlbum()
{
  return type metadata accessor for PromotionalAssets.PhotoAlbum();
}

uint64_t PromotionalAssets.watchFaces.getter()
{
  return PromotionalAssets.watchFaces.getter();
}

uint64_t PromotionalAssets.photoAlbums.getter()
{
  return PromotionalAssets.photoAlbums.getter();
}

uint64_t PromotionalAssets.PhoneWallpaper.url.getter()
{
  return PromotionalAssets.PhoneWallpaper.url.getter();
}

uint64_t type metadata accessor for PromotionalAssets.PhoneWallpaper()
{
  return type metadata accessor for PromotionalAssets.PhoneWallpaper();
}

uint64_t PromotionalAssets.phoneWallpapers.getter()
{
  return PromotionalAssets.phoneWallpapers.getter();
}

uint64_t PromotionalAssets.Video.id.getter()
{
  return PromotionalAssets.Video.id.getter();
}

uint64_t PromotionalAssets.Video.title.getter()
{
  return PromotionalAssets.Video.title.getter();
}

uint64_t PromotionalAssets.Video.videoURL.getter()
{
  return PromotionalAssets.Video.videoURL.getter();
}

uint64_t type metadata accessor for PromotionalAssets.Video()
{
  return type metadata accessor for PromotionalAssets.Video();
}

uint64_t PromotionalAssets.videos.getter()
{
  return PromotionalAssets.videos.getter();
}

uint64_t PromotionalAssets.WatchFace.previewURL.getter()
{
  return PromotionalAssets.WatchFace.previewURL.getter();
}

uint64_t PromotionalAssets.WatchFace.url.getter()
{
  return PromotionalAssets.WatchFace.url.getter();
}

uint64_t type metadata accessor for PromotionalAssets.WatchFace()
{
  return type metadata accessor for PromotionalAssets.WatchFace();
}

uint64_t type metadata accessor for PromotionalAssets()
{
  return type metadata accessor for PromotionalAssets();
}

uint64_t ArtistPromotionalAssets.promotionalAssets.getter()
{
  return ArtistPromotionalAssets.promotionalAssets.getter();
}

uint64_t ArtistPromotionalAssets.eventWithPromotionalAssets.getter()
{
  return ArtistPromotionalAssets.eventWithPromotionalAssets.getter();
}

uint64_t type metadata accessor for ArtistPromotionalAssets()
{
  return type metadata accessor for ArtistPromotionalAssets();
}

uint64_t Event.dataProvider.getter()
{
  return Event.dataProvider.getter();
}

uint64_t Event.id.getter()
{
  return Event.id.getter();
}

uint64_t Event.Time.dateInterval.getter()
{
  return Event.Time.dateInterval.getter();
}

uint64_t Event.Time.timeZone.getter()
{
  return Event.Time.timeZone.getter();
}

uint64_t Event.name.getter()
{
  return Event.name.getter();
}

uint64_t Event.time.getter()
{
  return Event.time.getter();
}

uint64_t Event.webURL.getter()
{
  return Event.webURL.getter();
}

uint64_t Event.infoURL.getter()
{
  return Event.infoURL.getter();
}

uint64_t Event<>.participants.getter()
{
  return Event<>.participants.getter();
}

uint64_t Event<>.artistPromotionalAssets.getter()
{
  return Event<>.artistPromotionalAssets.getter();
}

uint64_t Event<>.genres.getter()
{
  return Event<>.genres.getter();
}

uint64_t Event<>.setlist.getter()
{
  return Event<>.setlist.getter();
}

uint64_t Event<>.playlists.getter()
{
  return Event<>.playlists.getter();
}

uint64_t Genre.name.getter()
{
  return Genre.name.getter();
}

uint64_t type metadata accessor for Genre()
{
  return type metadata accessor for Genre();
}

uint64_t Venue.id.getter()
{
  return Venue.id.getter();
}

uint64_t Venue.name.getter()
{
  return Venue.name.getter();
}

uint64_t Venue.address.getter()
{
  return Venue.address.getter();
}

uint64_t Venue.location.getter()
{
  return Venue.location.getter();
}

uint64_t type metadata accessor for Venue()
{
  return type metadata accessor for Venue();
}

uint64_t Artist.id.getter()
{
  return Artist.id.getter();
}

{
  return Artist.id.getter();
}

uint64_t Artist.name.getter()
{
  return Artist.name.getter();
}

{
  return Artist.name.getter();
}

uint64_t Artist.artwork.getter()
{
  return Artist.artwork.getter();
}

uint64_t type metadata accessor for Artist()
{
  return type metadata accessor for Artist();
}

{
  return type metadata accessor for Artist();
}

uint64_t Ticket.url.getter()
{
  return Ticket.url.getter();
}

uint64_t Ticket.vendor.getter()
{
  return Ticket.vendor.getter();
}

uint64_t type metadata accessor for Ticket()
{
  return type metadata accessor for Ticket();
}

uint64_t Artwork.backgroundColor.getter()
{
  return Artwork.backgroundColor.getter();
}

{
  return Artwork.backgroundColor.getter();
}

uint64_t Artwork.url(width:height:)()
{
  return Artwork.url(width:height:)();
}

{
  return Artwork.url(width:height:)();
}

uint64_t Setlist.Song.adamID.getter()
{
  return Setlist.Song.adamID.getter();
}

uint64_t Setlist.songs.getter()
{
  return Setlist.songs.getter();
}

uint64_t Playlist.id.getter()
{
  return Playlist.id.getter();
}

uint64_t type metadata accessor for Playlist()
{
  return type metadata accessor for Playlist();
}

{
  return type metadata accessor for Playlist();
}

uint64_t Schedule.events.getter()
{
  return Schedule.events.getter();
}

uint64_t Schedule.owners.getter()
{
  return Schedule.owners.getter();
}

uint64_t Map.init<A>(position:bounds:interactionModes:scope:content:)()
{
  return Map.init<A>(position:bounds:interactionModes:scope:content:)();
}

uint64_t Map.init<>(position:bounds:interactionModes:scope:)()
{
  return Map.init<>(position:bounds:interactionModes:scope:)();
}

uint64_t type metadata accessor for MapCameraBounds()
{
  return type metadata accessor for MapCameraBounds();
}

uint64_t static MapCameraPosition.camera(_:)()
{
  return static MapCameraPosition.camera(_:)();
}

uint64_t type metadata accessor for MapCameraPosition()
{
  return type metadata accessor for MapCameraPosition();
}

uint64_t static MapInteractionModes.all.getter()
{
  return static MapInteractionModes.all.getter();
}

uint64_t static MapInteractionModes.zoom.getter()
{
  return static MapInteractionModes.zoom.getter();
}

uint64_t static MapInteractionModes.pitch.getter()
{
  return static MapInteractionModes.pitch.getter();
}

uint64_t type metadata accessor for MapInteractionModes()
{
  return type metadata accessor for MapInteractionModes();
}

uint64_t MapCamera.init(centerCoordinate:distance:heading:pitch:)()
{
  return MapCamera.init(centerCoordinate:distance:heading:pitch:)();
}

uint64_t type metadata accessor for MapCamera()
{
  return type metadata accessor for MapCamera();
}

uint64_t Marker.init<A>(_:systemImage:coordinate:)()
{
  return Marker.init<A>(_:systemImage:coordinate:)();
}

uint64_t os_log(_:dso:log:_:_:)()
{
  return os_log(_:dso:log:_:_:)();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

Swift::Void __swiftcall AnyCancellable.cancel()()
{
}

uint64_t static ObservableObject.environmentStore.getter()
{
  return static ObservableObject.environmentStore.getter();
}

uint64_t ObservableObject<>.objectWillChange.getter()
{
  return ObservableObject<>.objectWillChange.getter();
}

Swift::Void __swiftcall ObservableObjectPublisher.send()()
{
}

uint64_t Published.init(initialValue:)()
{
  return Published.init(initialValue:)();
}

uint64_t static Published.subscript.modify()
{
  return static Published.subscript.modify();
}

uint64_t static Published.subscript.getter()
{
  return static Published.subscript.getter();
}

uint64_t static Published.subscript.setter()
{
  return static Published.subscript.setter();
}

uint64_t type metadata accessor for Published()
{
  return type metadata accessor for Published();
}

uint64_t Publisher.receive<A>(on:options:)()
{
  return Publisher.receive<A>(on:options:)();
}

uint64_t Publisher<>.sink(receiveValue:)()
{
  return Publisher<>.sink(receiveValue:)();
}

uint64_t AsyncImage.init(url:scale:transaction:content:)()
{
  return AsyncImage.init(url:scale:transaction:content:)();
}

uint64_t DatePicker.init(selection:in:displayedComponents:label:)()
{
  return DatePicker.init(selection:in:displayedComponents:label:)();
}

uint64_t EdgeInsets.init(_all:)()
{
  return EdgeInsets.init(_all:)();
}

uint64_t FocusState.wrappedValue.setter()
{
  return FocusState.wrappedValue.setter();
}

uint64_t FocusState.projectedValue.getter()
{
  return FocusState.projectedValue.getter();
}

uint64_t FocusState.init<>()()
{
  return FocusState.init<>()();
}

uint64_t LazyHStack.init(alignment:spacing:pinnedViews:content:)()
{
  return LazyHStack.init(alignment:spacing:pinnedViews:content:)();
}

uint64_t type metadata accessor for LazyHStack()
{
  return type metadata accessor for LazyHStack();
}

uint64_t type metadata accessor for ScrollView()
{
  return type metadata accessor for ScrollView();
}

uint64_t ScrollView.init(_:showsIndicators:content:)()
{
  return ScrollView.init(_:showsIndicators:content:)();
}

uint64_t static ColorScheme.== infix(_:_:)()
{
  return static ColorScheme.== infix(_:_:)();
}

uint64_t type metadata accessor for ColorScheme()
{
  return type metadata accessor for ColorScheme();
}

uint64_t type metadata accessor for ControlSize()
{
  return type metadata accessor for ControlSize();
}

uint64_t type metadata accessor for Environment.Content()
{
  return type metadata accessor for Environment.Content();
}

uint64_t StateObject.init(wrappedValue:)()
{
  return StateObject.init(wrappedValue:)();
}

uint64_t StateObject.wrappedValue.getter()
{
  return StateObject.wrappedValue.getter();
}

uint64_t StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)()
{
  return StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
}

uint64_t ToolbarItem<>.init(placement:content:)()
{
  return ToolbarItem<>.init(placement:content:)();
}

uint64_t Transaction.disablesAnimations.setter()
{
  return Transaction.disablesAnimations.setter();
}

uint64_t Transaction.animation.setter()
{
  return Transaction.animation.setter();
}

uint64_t Transaction.init(animation:)()
{
  return Transaction.init(animation:)();
}

uint64_t ProgressView.init<A>(value:total:)()
{
  return ProgressView.init<A>(value:total:)();
}

uint64_t ProgressView<>.init<>()()
{
  return ProgressView<>.init<>()();
}

uint64_t ProgressView<>.init<>(_:)()
{
  return ProgressView<>.init<>(_:)();
}

uint64_t ScaledMetric.init(wrappedValue:relativeTo:)()
{
  return ScaledMetric.init(wrappedValue:relativeTo:)();
}

uint64_t ScaledMetric.wrappedValue.getter()
{
  return ScaledMetric.wrappedValue.getter();
}

uint64_t type metadata accessor for ScaledMetric()
{
  return type metadata accessor for ScaledMetric();
}

uint64_t TimelineView<>.init(_:content:)()
{
  return TimelineView<>.init(_:content:)();
}

uint64_t static ViewModifier._makeView(modifier:inputs:body:)()
{
  return static ViewModifier._makeView(modifier:inputs:body:)();
}

uint64_t static ViewModifier._makeViewList(modifier:inputs:body:)()
{
  return static ViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t static ViewModifier._viewListCount(inputs:body:)()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t _FrameLayout.init(width:height:alignment:)()
{
  return _FrameLayout.init(width:height:alignment:)();
}

uint64_t AnyShapeStyle.init<A>(_:)()
{
  return AnyShapeStyle.init<A>(_:)();
}

uint64_t AnyTransition.init<A>(_:)()
{
  return AnyTransition.init<A>(_:)();
}

Swift::Void __swiftcall DismissAction.callAsFunction()()
{
}

uint64_t type metadata accessor for DismissAction()
{
  return type metadata accessor for DismissAction();
}

uint64_t GeometryProxy.safeAreaInsets.getter()
{
  return GeometryProxy.safeAreaInsets.getter();
}

uint64_t GeometryProxy.frame(in:)()
{
  return GeometryProxy.frame(in:)();
}

uint64_t OpenURLAction.callAsFunction(_:)()
{
  return OpenURLAction.callAsFunction(_:)();
}

uint64_t OpenURLAction.init(handler:)()
{
  return OpenURLAction.init(handler:)();
}

uint64_t type metadata accessor for OpenURLAction()
{
  return type metadata accessor for OpenURLAction();
}

uint64_t static PreferenceKey._isReadableByHost.getter()
{
  return static PreferenceKey._isReadableByHost.getter();
}

uint64_t static PreferenceKey._includesRemovedValues.getter()
{
  return static PreferenceKey._includesRemovedValues.getter();
}

uint64_t type metadata accessor for _TaskModifier()
{
  return type metadata accessor for _TaskModifier();
}

uint64_t withAnimation<A>(_:_:)()
{
  return withAnimation<A>(_:_:)();
}

uint64_t GeometryReader.init(content:)()
{
  return GeometryReader.init(content:)();
}

uint64_t type metadata accessor for GeometryReader()
{
  return type metadata accessor for GeometryReader();
}

uint64_t HorizontalEdge.rawValue.getter()
{
  return HorizontalEdge.rawValue.getter();
}

uint64_t LinearGradient.init(gradient:startPoint:endPoint:)()
{
  return LinearGradient.init(gradient:startPoint:endPoint:)();
}

uint64_t type metadata accessor for NavigationPath()
{
  return type metadata accessor for NavigationPath();
}

uint64_t ObservedObject.init(wrappedValue:)()
{
  return ObservedObject.init(wrappedValue:)();
}

uint64_t ObservedObject.Wrapper.subscript.getter()
{
  return ObservedObject.Wrapper.subscript.getter();
}

uint64_t PlainListStyle.init()()
{
  return PlainListStyle.init()();
}

uint64_t type metadata accessor for PlainListStyle()
{
  return type metadata accessor for PlainListStyle();
}

uint64_t SymbolVariants.fill.getter()
{
  return SymbolVariants.fill.getter();
}

uint64_t static SymbolVariants.fill.getter()
{
  return static SymbolVariants.fill.getter();
}

uint64_t static SymbolVariants.square.getter()
{
  return static SymbolVariants.square.getter();
}

uint64_t type metadata accessor for SymbolVariants()
{
  return type metadata accessor for SymbolVariants();
}

uint64_t type metadata accessor for AsyncImagePhase()
{
  return type metadata accessor for AsyncImagePhase();
}

uint64_t type metadata accessor for CoordinateSpace()
{
  return type metadata accessor for CoordinateSpace();
}

uint64_t static DynamicProperty._propertyBehaviors.getter()
{
  return static DynamicProperty._propertyBehaviors.getter();
}

Swift::Void __swiftcall DynamicProperty.update()()
{
}

uint64_t type metadata accessor for LayoutDirection()
{
  return type metadata accessor for LayoutDirection();
}

uint64_t ModifiedContent<>.accessibility(inputLabels:)()
{
  return ModifiedContent<>.accessibility(inputLabels:)();
}

uint64_t ModifiedContent<>.accessibility(addTraits:)()
{
  return ModifiedContent<>.accessibility(addTraits:)();
}

uint64_t ModifiedContent<>.accessibilityHint(_:)()
{
  return ModifiedContent<>.accessibilityHint(_:)();
}

uint64_t ModifiedContent<>.accessibilityHeading(_:)()
{
  return ModifiedContent<>.accessibilityHeading(_:)();
}

uint64_t type metadata accessor for ModifiedContent()
{
  return type metadata accessor for ModifiedContent();
}

uint64_t NavigationStack.init<>(root:)()
{
  return NavigationStack.init<>(root:)();
}

uint64_t type metadata accessor for NavigationStack()
{
  return type metadata accessor for NavigationStack();
}

uint64_t static SafeAreaRegions.all.getter()
{
  return static SafeAreaRegions.all.getter();
}

uint64_t static SafeAreaRegions.container.getter()
{
  return static SafeAreaRegions.container.getter();
}

uint64_t ScrollViewProxy.scrollTo<A>(_:anchor:)()
{
  return ScrollViewProxy.scrollTo<A>(_:anchor:)();
}

uint64_t type metadata accessor for ScrollViewProxy()
{
  return type metadata accessor for ScrollViewProxy();
}

uint64_t SlideTransition.init()()
{
  return SlideTransition.init()();
}

uint64_t type metadata accessor for SlideTransition()
{
  return type metadata accessor for SlideTransition();
}

uint64_t PlainButtonStyle.init()()
{
  return PlainButtonStyle.init()();
}

uint64_t type metadata accessor for PlainButtonStyle()
{
  return type metadata accessor for PlainButtonStyle();
}

uint64_t type metadata accessor for RoundedRectangle._Inset()
{
  return type metadata accessor for RoundedRectangle._Inset();
}

uint64_t type metadata accessor for RoundedRectangle()
{
  return type metadata accessor for RoundedRectangle();
}

uint64_t static ToolbarPlacement.navigationBar.getter()
{
  return static ToolbarPlacement.navigationBar.getter();
}

uint64_t type metadata accessor for ToolbarPlacement()
{
  return type metadata accessor for ToolbarPlacement();
}

uint64_t _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)()
{
  return _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
}

uint64_t EnvironmentObject.error()()
{
  return EnvironmentObject.error()();
}

uint64_t EnvironmentObject.init()()
{
  return EnvironmentObject.init()();
}

uint64_t EnvironmentValues.colorScheme.getter()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t EnvironmentValues.colorScheme.setter()
{
  return EnvironmentValues.colorScheme.setter();
}

uint64_t EnvironmentValues.controlSize.getter()
{
  return EnvironmentValues.controlSize.getter();
}

uint64_t EnvironmentValues.controlSize.setter()
{
  return EnvironmentValues.controlSize.setter();
}

uint64_t EnvironmentValues.foregroundColor.getter()
{
  return EnvironmentValues.foregroundColor.getter();
}

uint64_t EnvironmentValues.foregroundColor.setter()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t EnvironmentValues.layoutDirection.getter()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t EnvironmentValues.layoutDirection.setter()
{
  return EnvironmentValues.layoutDirection.setter();
}

uint64_t EnvironmentValues.verticalSizeClass.getter()
{
  return EnvironmentValues.verticalSizeClass.getter();
}

uint64_t EnvironmentValues.verticalSizeClass.setter()
{
  return EnvironmentValues.verticalSizeClass.setter();
}

uint64_t EnvironmentValues.isLuminanceReduced.getter()
{
  return EnvironmentValues.isLuminanceReduced.getter();
}

uint64_t EnvironmentValues.isLuminanceReduced.setter()
{
  return EnvironmentValues.isLuminanceReduced.setter();
}

uint64_t EnvironmentValues.horizontalSizeClass.getter()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t EnvironmentValues.horizontalSizeClass.setter()
{
  return EnvironmentValues.horizontalSizeClass.setter();
}

uint64_t EnvironmentValues.symbolRenderingMode.getter()
{
  return EnvironmentValues.symbolRenderingMode.getter();
}

uint64_t EnvironmentValues.symbolRenderingMode.setter()
{
  return EnvironmentValues.symbolRenderingMode.setter();
}

uint64_t EnvironmentValues.multilineTextAlignment.getter()
{
  return EnvironmentValues.multilineTextAlignment.getter();
}

uint64_t EnvironmentValues.multilineTextAlignment.setter()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

uint64_t EnvironmentValues.accessibilityReduceTransparency.getter()
{
  return EnvironmentValues.accessibilityReduceTransparency.getter();
}

uint64_t EnvironmentValues.font.getter()
{
  return EnvironmentValues.font.getter();
}

uint64_t EnvironmentValues.font.setter()
{
  return EnvironmentValues.font.setter();
}

uint64_t EnvironmentValues.tint.getter()
{
  return EnvironmentValues.tint.getter();
}

uint64_t EnvironmentValues.tint.setter()
{
  return EnvironmentValues.tint.setter();
}

uint64_t EnvironmentValues.dismiss.getter()
{
  return EnvironmentValues.dismiss.getter();
}

uint64_t EnvironmentValues.openURL.getter()
{
  return EnvironmentValues.openURL.getter();
}

uint64_t EnvironmentValues.openURL.setter()
{
  return EnvironmentValues.openURL.setter();
}

uint64_t EnvironmentValues.textCase.getter()
{
  return EnvironmentValues.textCase.getter();
}

uint64_t EnvironmentValues.textCase.setter()
{
  return EnvironmentValues.textCase.setter();
}

uint64_t EnvironmentValues.isEnabled.getter()
{
  return EnvironmentValues.isEnabled.getter();
}

uint64_t EnvironmentValues.isEnabled.setter()
{
  return EnvironmentValues.isEnabled.setter();
}

uint64_t EnvironmentValues.lineLimit.getter()
{
  return EnvironmentValues.lineLimit.getter();
}

uint64_t EnvironmentValues.lineLimit.setter()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t EnvironmentValues.tintColor.getter()
{
  return EnvironmentValues.tintColor.getter();
}

uint64_t EnvironmentValues.tintColor.setter()
{
  return EnvironmentValues.tintColor.setter();
}

uint64_t EnvironmentValues.init()()
{
  return EnvironmentValues.init()();
}

uint64_t type metadata accessor for EnvironmentValues()
{
  return type metadata accessor for EnvironmentValues();
}

uint64_t type metadata accessor for NavigationBarItem.TitleDisplayMode()
{
  return type metadata accessor for NavigationBarItem.TitleDisplayMode();
}

uint64_t static VerticalAlignment.top.getter()
{
  return static VerticalAlignment.top.getter();
}

uint64_t static VerticalAlignment.center.getter()
{
  return static VerticalAlignment.center.getter();
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation(_:)()
{
  return LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
}

Swift::Void __swiftcall LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(Swift::String a1)
{
}

Swift::Void __swiftcall LocalizedStringKey.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t type metadata accessor for LocalizedStringKey.StringInterpolation()
{
  return type metadata accessor for LocalizedStringKey.StringInterpolation();
}

uint64_t LocalizedStringKey.init(stringLiteral:)()
{
  return LocalizedStringKey.init(stringLiteral:)();
}

uint64_t LocalizedStringKey.init(stringInterpolation:)()
{
  return LocalizedStringKey.init(stringInterpolation:)();
}

uint64_t LocalizedStringKey.init(_:)()
{
  return LocalizedStringKey.init(_:)();
}

uint64_t static PresentationDetent.large.getter()
{
  return static PresentationDetent.large.getter();
}

uint64_t static PresentationDetent.medium.getter()
{
  return static PresentationDetent.medium.getter();
}

uint64_t type metadata accessor for PresentationDetent()
{
  return type metadata accessor for PresentationDetent();
}

uint64_t type metadata accessor for RoundedCornerStyle()
{
  return type metadata accessor for RoundedCornerStyle();
}

uint64_t type metadata accessor for _AnimationModifier()
{
  return type metadata accessor for _AnimationModifier();
}

uint64_t type metadata accessor for _InsetViewModifier()
{
  return type metadata accessor for _InsetViewModifier();
}

uint64_t static AccessibilityTraits.isSelected.getter()
{
  return static AccessibilityTraits.isSelected.getter();
}

uint64_t static AccessibilityTraits.startsMediaSession.getter()
{
  return static AccessibilityTraits.startsMediaSession.getter();
}

uint64_t static AccessibilityTraits.isButton.getter()
{
  return static AccessibilityTraits.isButton.getter();
}

uint64_t static AccessibilityTraits.isHeader.getter()
{
  return static AccessibilityTraits.isHeader.getter();
}

uint64_t static AccessibilityTraits.isToggle.getter()
{
  return static AccessibilityTraits.isToggle.getter();
}

uint64_t type metadata accessor for AccessibilityTraits()
{
  return type metadata accessor for AccessibilityTraits();
}

uint64_t static HorizontalAlignment.center.getter()
{
  return static HorizontalAlignment.center.getter();
}

uint64_t static HorizontalAlignment.leading.getter()
{
  return static HorizontalAlignment.leading.getter();
}

uint64_t static SymbolRenderingMode.hierarchical.getter()
{
  return static SymbolRenderingMode.hierarchical.getter();
}

uint64_t static SymbolRenderingMode.palette.getter()
{
  return static SymbolRenderingMode.palette.getter();
}

uint64_t type metadata accessor for SymbolRenderingMode()
{
  return type metadata accessor for SymbolRenderingMode();
}

uint64_t TupleToolbarContent.init(_:)()
{
  return TupleToolbarContent.init(_:)();
}

uint64_t UIHostingController.init(coder:rootView:)()
{
  return UIHostingController.init(coder:rootView:)();
}

uint64_t UIHostingController.init(rootView:)()
{
  return UIHostingController.init(rootView:)();
}

uint64_t UIViewRepresentable._resetUIView(_:coordinator:destroy:)()
{
  return UIViewRepresentable._resetUIView(_:coordinator:destroy:)();
}

uint64_t static UIViewRepresentable.dismantleUIView(_:coordinator:)()
{
  return static UIViewRepresentable.dismantleUIView(_:coordinator:)();
}

uint64_t UIViewRepresentable.sizeThatFits(_:uiView:context:)()
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)();
}

uint64_t static UIViewRepresentable._layoutOptions(_:)()
{
  return static UIViewRepresentable._layoutOptions(_:)();
}

uint64_t UIViewRepresentable._identifiedViewTree(in:)()
{
  return UIViewRepresentable._identifiedViewTree(in:)();
}

uint64_t UIViewRepresentable._overrideLayoutTraits(_:for:)()
{
  return UIViewRepresentable._overrideLayoutTraits(_:for:)();
}

uint64_t UIViewRepresentable._overrideSizeThatFits(_:in:uiView:)()
{
  return UIViewRepresentable._overrideSizeThatFits(_:in:uiView:)();
}

uint64_t static UIViewRepresentable._modifyBridgedViewInputs(_:)()
{
  return static UIViewRepresentable._modifyBridgedViewInputs(_:)();
}

uint64_t UIViewRepresentable.body.getter()
{
  return UIViewRepresentable.body.getter();
}

uint64_t UIViewRepresentable<>.makeCoordinator()()
{
  return UIViewRepresentable<>.makeCoordinator()();
}

uint64_t type metadata accessor for _BackgroundModifier()
{
  return type metadata accessor for _BackgroundModifier();
}

uint64_t type metadata accessor for _ConditionalContent.Storage()
{
  return type metadata accessor for _ConditionalContent.Storage();
}

uint64_t _ConditionalContent<>.init(storage:)()
{
  return _ConditionalContent<>.init(storage:)();
}

uint64_t type metadata accessor for _ConditionalContent()
{
  return type metadata accessor for _ConditionalContent();
}

uint64_t static DatePickerComponents.date.getter()
{
  return static DatePickerComponents.date.getter();
}

uint64_t type metadata accessor for DatePickerComponents()
{
  return type metadata accessor for DatePickerComponents();
}

uint64_t static ToolbarItemPlacement.navigationBarLeading.getter()
{
  return static ToolbarItemPlacement.navigationBarLeading.getter();
}

uint64_t static ToolbarItemPlacement.navigationBarTrailing.getter()
{
  return static ToolbarItemPlacement.navigationBarTrailing.getter();
}

uint64_t static ToolbarItemPlacement.principal.getter()
{
  return static ToolbarItemPlacement.principal.getter();
}

uint64_t type metadata accessor for ToolbarItemPlacement()
{
  return type metadata accessor for ToolbarItemPlacement();
}

uint64_t BorderlessButtonStyle.init()()
{
  return BorderlessButtonStyle.init()();
}

uint64_t type metadata accessor for BorderlessButtonStyle()
{
  return type metadata accessor for BorderlessButtonStyle();
}

uint64_t type metadata accessor for PinnedScrollableViews()
{
  return type metadata accessor for PinnedScrollableViews();
}

uint64_t static ToolbarContentBuilder.buildBlock<A>(_:)()
{
  return static ToolbarContentBuilder.buildBlock<A>(_:)();
}

uint64_t static ToolbarContentBuilder.buildIf<A>(_:)()
{
  return static ToolbarContentBuilder.buildIf<A>(_:)();
}

uint64_t type metadata accessor for _ViewModifier_Content()
{
  return type metadata accessor for _ViewModifier_Content();
}

uint64_t static ContentMarginPlacement.automatic.getter()
{
  return static ContentMarginPlacement.automatic.getter();
}

uint64_t type metadata accessor for ContentMarginPlacement()
{
  return type metadata accessor for ContentMarginPlacement();
}

uint64_t static HierarchicalShapeStyle.quaternary.getter()
{
  return static HierarchicalShapeStyle.quaternary.getter();
}

uint64_t static HierarchicalShapeStyle.primary.getter()
{
  return static HierarchicalShapeStyle.primary.getter();
}

uint64_t static HierarchicalShapeStyle.tertiary.getter()
{
  return static HierarchicalShapeStyle.tertiary.getter();
}

uint64_t static HierarchicalShapeStyle.secondary.getter()
{
  return static HierarchicalShapeStyle.secondary.getter();
}

uint64_t TitleAndIconLabelStyle.init()()
{
  return TitleAndIconLabelStyle.init()();
}

uint64_t type metadata accessor for TitleAndIconLabelStyle()
{
  return type metadata accessor for TitleAndIconLabelStyle();
}

uint64_t type metadata accessor for UserInterfaceSizeClass()
{
  return type metadata accessor for UserInterfaceSizeClass();
}

uint64_t SafeAreaPaddingModifier.init(edges:insets:)()
{
  return SafeAreaPaddingModifier.init(edges:insets:)();
}

uint64_t type metadata accessor for ButtonStyleConfiguration.Label()
{
  return type metadata accessor for ButtonStyleConfiguration.Label();
}

uint64_t ButtonStyleConfiguration.label.getter()
{
  return ButtonStyleConfiguration.label.getter();
}

uint64_t ButtonStyleConfiguration.isPressed.getter()
{
  return ButtonStyleConfiguration.isPressed.getter();
}

uint64_t EnabledTextSelectability.init()()
{
  return EnabledTextSelectability.init()();
}

uint64_t type metadata accessor for EnabledTextSelectability()
{
  return type metadata accessor for EnabledTextSelectability();
}

uint64_t GraphicalDatePickerStyle.init()()
{
  return GraphicalDatePickerStyle.init()();
}

uint64_t type metadata accessor for GraphicalDatePickerStyle()
{
  return type metadata accessor for GraphicalDatePickerStyle();
}

uint64_t AnimationTimelineSchedule.init(minimumInterval:paused:)()
{
  return AnimationTimelineSchedule.init(minimumInterval:paused:)();
}

uint64_t type metadata accessor for AnimationTimelineSchedule()
{
  return type metadata accessor for AnimationTimelineSchedule();
}

uint64_t static MatchedGeometryProperties.frame.getter()
{
  return static MatchedGeometryProperties.frame.getter();
}

uint64_t static MatchedGeometryProperties.position.getter()
{
  return static MatchedGeometryProperties.position.getter();
}

uint64_t type metadata accessor for _PreferenceActionModifier()
{
  return type metadata accessor for _PreferenceActionModifier();
}

uint64_t static AccessibilityChildBehavior.ignore.getter()
{
  return static AccessibilityChildBehavior.ignore.getter();
}

uint64_t static AccessibilityChildBehavior.combine.getter()
{
  return static AccessibilityChildBehavior.combine.getter();
}

uint64_t static AccessibilityChildBehavior.contain.getter()
{
  return static AccessibilityChildBehavior.contain.getter();
}

uint64_t type metadata accessor for AccessibilityChildBehavior()
{
  return type metadata accessor for AccessibilityChildBehavior();
}

uint64_t PagingScrollTargetBehavior.init()()
{
  return PagingScrollTargetBehavior.init()();
}

uint64_t type metadata accessor for PagingScrollTargetBehavior()
{
  return type metadata accessor for PagingScrollTargetBehavior();
}

uint64_t UIViewRepresentableContext.coordinator.getter()
{
  return UIViewRepresentableContext.coordinator.getter();
}

uint64_t type metadata accessor for UIViewRepresentableContext()
{
  return type metadata accessor for UIViewRepresentableContext();
}

uint64_t type metadata accessor for _PreferenceWritingModifier()
{
  return type metadata accessor for _PreferenceWritingModifier();
}

uint64_t static ScrollDismissesKeyboardMode.immediately.getter()
{
  return static ScrollDismissesKeyboardMode.immediately.getter();
}

uint64_t type metadata accessor for ScrollDismissesKeyboardMode()
{
  return type metadata accessor for ScrollDismissesKeyboardMode();
}

uint64_t UIViewControllerRepresentable._resetUIViewController(_:coordinator:destroy:)()
{
  return UIViewControllerRepresentable._resetUIViewController(_:coordinator:destroy:)();
}

uint64_t static UIViewControllerRepresentable.dismantleUIViewController(_:coordinator:)()
{
  return static UIViewControllerRepresentable.dismantleUIViewController(_:coordinator:)();
}

uint64_t UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)()
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)();
}

uint64_t static UIViewControllerRepresentable._layoutOptions(_:)()
{
  return static UIViewControllerRepresentable._layoutOptions(_:)();
}

uint64_t UIViewControllerRepresentable._identifiedViewTree(in:)()
{
  return UIViewControllerRepresentable._identifiedViewTree(in:)();
}

uint64_t UIViewControllerRepresentable.body.getter()
{
  return UIViewControllerRepresentable.body.getter();
}

uint64_t UIViewControllerRepresentable<>.makeCoordinator()()
{
  return UIViewControllerRepresentable<>.makeCoordinator()();
}

uint64_t ProgressViewStyleConfiguration.fractionCompleted.getter()
{
  return ProgressViewStyleConfiguration.fractionCompleted.getter();
}

uint64_t type metadata accessor for AccessibilityAttachmentModifier()
{
  return type metadata accessor for AccessibilityAttachmentModifier();
}

uint64_t static ViewAlignedScrollTargetBehavior.LimitBehavior.automatic.getter()
{
  return static ViewAlignedScrollTargetBehavior.LimitBehavior.automatic.getter();
}

uint64_t type metadata accessor for ViewAlignedScrollTargetBehavior.LimitBehavior()
{
  return type metadata accessor for ViewAlignedScrollTargetBehavior.LimitBehavior();
}

uint64_t ViewAlignedScrollTargetBehavior.init(limitBehavior:)()
{
  return ViewAlignedScrollTargetBehavior.init(limitBehavior:)();
}

uint64_t type metadata accessor for ViewAlignedScrollTargetBehavior()
{
  return type metadata accessor for ViewAlignedScrollTargetBehavior();
}

uint64_t UIViewControllerRepresentableContext.coordinator.getter()
{
  return UIViewControllerRepresentableContext.coordinator.getter();
}

uint64_t type metadata accessor for UIViewControllerRepresentableContext()
{
  return type metadata accessor for UIViewControllerRepresentableContext();
}

uint64_t static Log.runtimeIssuesLog.getter()
{
  return static Log.runtimeIssuesLog.getter();
}

uint64_t static Axis.Set.horizontal.getter()
{
  return static Axis.Set.horizontal.getter();
}

uint64_t static Axis.Set.vertical.getter()
{
  return static Axis.Set.vertical.getter();
}

uint64_t static Edge.Set.horizontal.getter()
{
  return static Edge.Set.horizontal.getter();
}

uint64_t static Edge.Set.all.getter()
{
  return static Edge.Set.all.getter();
}

uint64_t static Edge.Set.top.getter()
{
  return static Edge.Set.top.getter();
}

uint64_t static Edge.Set.bottom.getter()
{
  return static Edge.Set.bottom.getter();
}

uint64_t static Edge.Set.leading.getter()
{
  return static Edge.Set.leading.getter();
}

uint64_t Edge.Set.init(rawValue:)()
{
  return Edge.Set.init(rawValue:)();
}

uint64_t static Edge.Set.trailing.getter()
{
  return static Edge.Set.trailing.getter();
}

uint64_t static Edge.Set.vertical.getter()
{
  return static Edge.Set.vertical.getter();
}

uint64_t Edge.init(rawValue:)()
{
  return Edge.init(rawValue:)();
}

uint64_t static Font.largeTitle.getter()
{
  return static Font.largeTitle.getter();
}

uint64_t static Font.subheadline.getter()
{
  return static Font.subheadline.getter();
}

uint64_t static Font.body.getter()
{
  return static Font.body.getter();
}

uint64_t static Font.title.getter()
{
  return static Font.title.getter();
}

uint64_t type metadata accessor for Font.Design()
{
  return type metadata accessor for Font.Design();
}

uint64_t static Font.Weight.bold.getter()
{
  return static Font.Weight.bold.getter();
}

uint64_t static Font.Weight.heavy.getter()
{
  return static Font.Weight.heavy.getter();
}

uint64_t static Font.Weight.light.getter()
{
  return static Font.Weight.light.getter();
}

uint64_t static Font.Weight.medium.getter()
{
  return static Font.Weight.medium.getter();
}

uint64_t static Font.Weight.regular.getter()
{
  return static Font.Weight.regular.getter();
}

uint64_t static Font.Weight.semibold.getter()
{
  return static Font.Weight.semibold.getter();
}

uint64_t static Font.system(size:weight:design:)()
{
  return static Font.system(size:weight:design:)();
}

uint64_t static Font.title2.getter()
{
  return static Font.title2.getter();
}

uint64_t static Font.title3.getter()
{
  return static Font.title3.getter();
}

uint64_t Font.weight(_:)()
{
  return Font.weight(_:)();
}

uint64_t static Font.callout.getter()
{
  return static Font.callout.getter();
}

uint64_t static Font.caption.getter()
{
  return static Font.caption.getter();
}

uint64_t static Font.caption2.getter()
{
  return static Font.caption2.getter();
}

uint64_t static Font.footnote.getter()
{
  return static Font.footnote.getter();
}

uint64_t static Font.headline.getter()
{
  return static Font.headline.getter();
}

uint64_t type metadata accessor for Font.TextStyle()
{
  return type metadata accessor for Font.TextStyle();
}

uint64_t Link<>.init(_:sensitiveUrl:)()
{
  return Link<>.init(_:sensitiveUrl:)();
}

uint64_t List<>.init(content:)()
{
  return List<>.init(content:)();
}

uint64_t type metadata accessor for List()
{
  return type metadata accessor for List();
}

uint64_t Text.fontWeight(_:)()
{
  return Text.fontWeight(_:)();
}

uint64_t Text.foregroundColor(_:)()
{
  return Text.foregroundColor(_:)();
}

uint64_t Text.foregroundStyle<A>(_:)()
{
  return Text.foregroundStyle<A>(_:)();
}

uint64_t Text.accessibilityHeading(_:)()
{
  return Text.accessibilityHeading(_:)();
}

uint64_t type metadata accessor for Text.Case()
{
  return type metadata accessor for Text.Case();
}

uint64_t Text.font(_:)()
{
  return Text.font(_:)();
}

uint64_t static Text.Suffix.alwaysVisible(_:)()
{
  return static Text.Suffix.alwaysVisible(_:)();
}

uint64_t static Text.Suffix.none.getter()
{
  return static Text.Suffix.none.getter();
}

uint64_t static Text.Suffix.truncated(_:)()
{
  return static Text.Suffix.truncated(_:)();
}

uint64_t type metadata accessor for Text.Suffix()
{
  return type metadata accessor for Text.Suffix();
}

uint64_t Text.init(_:tableName:bundle:comment:)()
{
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t Text.init(_:)()
{
  return Text.init(_:)();
}

uint64_t Text.init<A>(_:)()
{
  return Text.init<A>(_:)();
}

uint64_t static View._makeView(view:inputs:)()
{
  return static View._makeView(view:inputs:)();
}

uint64_t static View._makeViewList(view:inputs:)()
{
  return static View._makeViewList(view:inputs:)();
}

uint64_t View.progressViewStyle<A>(_:)()
{
  return View.progressViewStyle<A>(_:)();
}

uint64_t View.background<A>(alignment:content:)()
{
  return View.background<A>(alignment:content:)();
}

uint64_t View.background<A>(_:ignoresSafeAreaEdges:)()
{
  return View.background<A>(_:ignoresSafeAreaEdges:)();
}

uint64_t View.background<A>(_:alignment:)()
{
  return View.background<A>(_:alignment:)();
}

uint64_t View.fontWeight(_:)()
{
  return View.fontWeight(_:)();
}

uint64_t View.labelStyle<A>(_:)()
{
  return View.labelStyle<A>(_:)();
}

uint64_t View.preference<A>(key:value:)()
{
  return View.preference<A>(key:value:)();
}

uint64_t View.textSuffix(_:)()
{
  return View.textSuffix(_:)();
}

uint64_t View.aspectRatio(_:contentMode:)()
{
  return View.aspectRatio(_:contentMode:)();
}

uint64_t View.buttonStyle<A>(_:)()
{
  return View.buttonStyle<A>(_:)();
}

{
  return View.buttonStyle<A>(_:)();
}

uint64_t View.onDisappear(perform:)()
{
  return View.onDisappear(perform:)();
}

uint64_t View.onTapGesture(count:perform:)()
{
  return View.onTapGesture(count:perform:)();
}

uint64_t View.accessibility(label:)()
{
  return View.accessibility(label:)();
}

uint64_t View.accessibility(hidden:)()
{
  return View.accessibility(hidden:)();
}

uint64_t View.accessibility(addTraits:)()
{
  return View.accessibility(addTraits:)();
}

uint64_t View.safeAreaInset<A>(edge:alignment:spacing:content:)()
{
  return View.safeAreaInset<A>(edge:alignment:spacing:content:)();
}

uint64_t View.symbolVariant(_:)()
{
  return View.symbolVariant(_:)();
}

uint64_t View.textSelection<A>(_:)()
{
  return View.textSelection<A>(_:)();
}

uint64_t static View._viewListCount(inputs:)()
{
  return static View._viewListCount(inputs:)();
}

uint64_t View.contentMargins(_:_:for:)()
{
  return View.contentMargins(_:_:for:)();
}

uint64_t View.scrollDisabled(_:)()
{
  return View.scrollDisabled(_:)();
}

uint64_t View.scrollPosition<A>(id:anchor:)()
{
  return View.scrollPosition<A>(id:anchor:)();
}

uint64_t View.coordinateSpace<A>(name:)()
{
  return View.coordinateSpace<A>(name:)();
}

uint64_t View.datePickerStyle<A>(_:)()
{
  return View.datePickerStyle<A>(_:)();
}

uint64_t View.ignoresSafeArea(_:edges:)()
{
  return View.ignoresSafeArea(_:edges:)();
}

uint64_t View.navigationTitle(_:)()
{
  return View.navigationTitle(_:)();
}

uint64_t View.navigationBarTitle(_:)()
{
  return View.navigationBarTitle(_:)();
}

uint64_t View.onPreferenceChange<A>(_:perform:)()
{
  return View.onPreferenceChange<A>(_:perform:)();
}

uint64_t View.scrollTargetLayout(isEnabled:)()
{
  return View.scrollTargetLayout(isEnabled:)();
}

uint64_t View.accessibilityHidden(_:isEnabled:)()
{
  return View.accessibilityHidden(_:isEnabled:)();
}

uint64_t View.accessibilityHidden(_:)()
{
  return View.accessibilityHidden(_:)();
}

uint64_t View.presentationDetents(_:)()
{
  return View.presentationDetents(_:)();
}

uint64_t View.accessibilityElement(children:)()
{
  return View.accessibilityElement(children:)();
}

uint64_t View.accessibilityHeading(_:)()
{
  return View.accessibilityHeading(_:)();
}

uint64_t View.scrollTargetBehavior<A>(_:)()
{
  return View.scrollTargetBehavior<A>(_:)();
}

uint64_t View.accessibilityAddTraits(_:)()
{
  return View.accessibilityAddTraits(_:)();
}

uint64_t View.containerRelativeFrame(_:count:span:spacing:alignment:)()
{
  return View.containerRelativeFrame(_:count:span:spacing:alignment:)();
}

uint64_t View.containerRelativeFrame(_:alignment:)()
{
  return View.containerRelativeFrame(_:alignment:)();
}

uint64_t View.accessibilityIdentifier(_:)()
{
  return View.accessibilityIdentifier(_:)();
}

uint64_t View.scrollDismissesKeyboard(_:)()
{
  return View.scrollDismissesKeyboard(_:)();
}

uint64_t View.accessibilityRemoveTraits(_:)()
{
  return View.accessibilityRemoveTraits(_:)();
}

uint64_t View.presentationDragIndicator(_:)()
{
  return View.presentationDragIndicator(_:)();
}

uint64_t View.navigationBarTitleDisplayMode(_:)()
{
  return View.navigationBarTitleDisplayMode(_:)();
}

uint64_t View.task(priority:_:)()
{
  return View.task(priority:_:)();
}

uint64_t View.alert<A, B>(_:isPresented:actions:message:)()
{
  return View.alert<A, B>(_:isPresented:actions:message:)();
}

uint64_t View.frame(width:height:alignment:)()
{
  return View.frame(width:height:alignment:)();
}

uint64_t View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)()
{
  return View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
}

uint64_t View.sheet<A>(isPresented:onDismiss:content:)()
{
  return View.sheet<A>(isPresented:onDismiss:content:)();
}

uint64_t View.sheet<A, B>(item:onDismiss:content:)()
{
  return View.sheet<A, B>(item:onDismiss:content:)();
}

uint64_t View.clipped(antialiased:)()
{
  return View.clipped(antialiased:)();
}

uint64_t View.focused(_:)()
{
  return View.focused(_:)();
}

uint64_t View.overlay<A>(alignment:content:)()
{
  return View.overlay<A>(alignment:content:)();
}

uint64_t View.overlay<A>(_:alignment:)()
{
  return View.overlay<A>(_:alignment:)();
}

uint64_t View.padding(_:)()
{
  return View.padding(_:)();
}

uint64_t View.padding(_:_:)()
{
  return View.padding(_:_:)();
}

uint64_t View.toolbar<A>(content:)()
{
  return View.toolbar<A>(content:)();
}

uint64_t View.toolbar(_:for:)()
{
  return View.toolbar(_:for:)();
}

uint64_t View.modifier<A>(_:)()
{
  return View.modifier<A>(_:)();
}

uint64_t View.onAppear(perform:)()
{
  return View.onAppear(perform:)();
}

uint64_t View.onChange<A>(of:initial:_:)()
{
  return View.onChange<A>(of:initial:_:)();
}

{
  return View.onChange<A>(of:initial:_:)();
}

uint64_t View.animation<A>(_:body:)()
{
  return View.animation<A>(_:body:)();
}

uint64_t View.animation<A>(_:value:)()
{
  return View.animation<A>(_:value:)();
}

uint64_t View.clipShape<A>(_:style:)()
{
  return View.clipShape<A>(_:style:)();
}

uint64_t View.listStyle<A>(_:)()
{
  return View.listStyle<A>(_:)();
}

uint64_t View.statusBar(hidden:)()
{
  return View.statusBar(hidden:)();
}

uint64_t Color.init(uiColor:)()
{
  return Color.init(uiColor:)();
}

uint64_t type metadata accessor for Color.RGBColorSpace()
{
  return type metadata accessor for Color.RGBColorSpace();
}

uint64_t static Color.blue.getter()
{
  return static Color.blue.getter();
}

uint64_t static Color.gray.getter()
{
  return static Color.gray.getter();
}

uint64_t static Color.black.getter()
{
  return static Color.black.getter();
}

uint64_t static Color.clear.getter()
{
  return static Color.clear.getter();
}

uint64_t static Color.white.getter()
{
  return static Color.white.getter();
}

uint64_t Color.opacity(_:)()
{
  return Color.opacity(_:)();
}

uint64_t static Color.primary.getter()
{
  return static Color.primary.getter();
}

uint64_t static Color.secondary.getter()
{
  return static Color.secondary.getter();
}

uint64_t Color.init(_:red:green:blue:opacity:)()
{
  return Color.init(_:red:green:blue:opacity:)();
}

uint64_t Color.init(_:white:opacity:)()
{
  return Color.init(_:white:opacity:)();
}

uint64_t Color.init(_:)()
{
  return Color.init(_:)();
}

{
  return Color.init(_:)();
}

uint64_t Group<A>.init(content:)()
{
  return Group<A>.init(content:)();
}

uint64_t type metadata accessor for Group()
{
  return type metadata accessor for Group();
}

uint64_t Image.init(uiImage:)()
{
  return Image.init(uiImage:)();
}

uint64_t Image.init(systemName:)()
{
  return Image.init(systemName:)();
}

uint64_t type metadata accessor for Image.ResizingMode()
{
  return type metadata accessor for Image.ResizingMode();
}

uint64_t Image.renderingMode(_:)()
{
  return Image.renderingMode(_:)();
}

uint64_t Image.init(_internalSystemName:)()
{
  return Image.init(_internalSystemName:)();
}

uint64_t Image.symbolRenderingMode(_:)()
{
  return Image.symbolRenderingMode(_:)();
}

uint64_t type metadata accessor for Image.TemplateRenderingMode()
{
  return type metadata accessor for Image.TemplateRenderingMode();
}

uint64_t Image.resizable(capInsets:resizingMode:)()
{
  return Image.resizable(capInsets:resizingMode:)();
}

uint64_t Image.init(_:bundle:)()
{
  return Image.init(_:bundle:)();
}

uint64_t State.init(wrappedValue:)()
{
  return State.init(wrappedValue:)();
}

uint64_t State.wrappedValue.getter()
{
  return State.wrappedValue.getter();
}

uint64_t State.wrappedValue.setter()
{
  return State.wrappedValue.setter();
}

uint64_t State.projectedValue.getter()
{
  return State.projectedValue.getter();
}

uint64_t type metadata accessor for State()
{
  return type metadata accessor for State();
}

uint64_t Button.init(action:label:)()
{
  return Button.init(action:label:)();
}

uint64_t Button<>.init(_:action:)()
{
  return Button<>.init(_:action:)();
}

uint64_t Button<>.init<A>(_:action:)()
{
  return Button<>.init<A>(_:action:)();
}

uint64_t type metadata accessor for Button()
{
  return type metadata accessor for Button();
}

uint64_t HStack.init(alignment:spacing:content:)()
{
  return HStack.init(alignment:spacing:content:)();
}

uint64_t type metadata accessor for HStack()
{
  return type metadata accessor for HStack();
}

uint64_t VStack.init(alignment:spacing:content:)()
{
  return VStack.init(alignment:spacing:content:)();
}

uint64_t type metadata accessor for VStack()
{
  return type metadata accessor for VStack();
}

uint64_t ZStack.init(alignment:content:)()
{
  return ZStack.init(alignment:content:)();
}

uint64_t type metadata accessor for ZStack()
{
  return type metadata accessor for ZStack();
}

uint64_t Binding.wrappedValue.getter()
{
  return Binding.wrappedValue.getter();
}

uint64_t Binding.wrappedValue.setter()
{
  return Binding.wrappedValue.setter();
}

uint64_t Binding.subscript.getter()
{
  return Binding.subscript.getter();
}

uint64_t Binding.projectedValue.getter()
{
  return Binding.projectedValue.getter();
}

uint64_t Binding.init(get:set:)()
{
  return Binding.init(get:set:)();
}

uint64_t static Binding.constant(_:)()
{
  return static Binding.constant(_:)();
}

uint64_t type metadata accessor for Binding()
{
  return type metadata accessor for Binding();
}

uint64_t Divider.init()()
{
  return Divider.init()();
}

uint64_t type metadata accessor for Divider()
{
  return type metadata accessor for Divider();
}

uint64_t ForEach<>.init(_:id:content:)()
{
  return ForEach<>.init(_:id:content:)();
}

uint64_t ForEach<>.init(_:content:)()
{
  return ForEach<>.init(_:content:)();
}

uint64_t type metadata accessor for ForEach()
{
  return type metadata accessor for ForEach();
}

uint64_t Section<>.init(header:content:)()
{
  return Section<>.init(header:content:)();
}

uint64_t type metadata accessor for Section()
{
  return type metadata accessor for Section();
}

uint64_t Bindable.wrappedValue.getter()
{
  return Bindable.wrappedValue.getter();
}

uint64_t Bindable.projectedValue.getter()
{
  return Bindable.projectedValue.getter();
}

uint64_t Bindable<A>.init(wrappedValue:)()
{
  return Bindable<A>.init(wrappedValue:)();
}

uint64_t Bindable<A>.subscript.getter()
{
  return Bindable<A>.subscript.getter();
}

uint64_t type metadata accessor for Bindable()
{
  return type metadata accessor for Bindable();
}

uint64_t Gradient.init(colors:)()
{
  return Gradient.init(colors:)();
}

uint64_t type metadata accessor for GridItem.Size()
{
  return type metadata accessor for GridItem.Size();
}

uint64_t type metadata accessor for GridItem()
{
  return type metadata accessor for GridItem();
}

uint64_t GridItem.init(_:spacing:alignment:)()
{
  return GridItem.init(_:spacing:alignment:)();
}

uint64_t static Alignment.top.getter()
{
  return static Alignment.top.getter();
}

uint64_t static Alignment.bottom.getter()
{
  return static Alignment.bottom.getter();
}

uint64_t static Alignment.center.getter()
{
  return static Alignment.center.getter();
}

uint64_t static Alignment.leading.getter()
{
  return static Alignment.leading.getter();
}

uint64_t static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)()
{
  return static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)();
}

uint64_t Animation.delay(_:)()
{
  return Animation.delay(_:)();
}

uint64_t static Animation.linear(duration:)()
{
  return static Animation.linear(duration:)();
}

uint64_t static Animation.spring(response:dampingFraction:blendDuration:)()
{
  return static Animation.spring(response:dampingFraction:blendDuration:)();
}

uint64_t static Animation.default.getter()
{
  return static Animation.default.getter();
}

uint64_t static Animation.easeInOut(duration:)()
{
  return static Animation.easeInOut(duration:)();
}

uint64_t static Animation.easeInOut.getter()
{
  return static Animation.easeInOut.getter();
}

uint64_t type metadata accessor for BlendMode()
{
  return type metadata accessor for BlendMode();
}

uint64_t LazyHGrid.init(rows:alignment:spacing:pinnedViews:content:)()
{
  return LazyHGrid.init(rows:alignment:spacing:pinnedViews:content:)();
}

uint64_t LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)()
{
  return LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)();
}

uint64_t type metadata accessor for LazyVGrid()
{
  return type metadata accessor for LazyVGrid();
}

uint64_t Namespace.wrappedValue.getter()
{
  return Namespace.wrappedValue.getter();
}

uint64_t type metadata accessor for TupleView()
{
  return type metadata accessor for TupleView();
}

uint64_t TupleView.init(_:)()
{
  return TupleView.init(_:)();
}

uint64_t static UnitPoint.top.getter()
{
  return static UnitPoint.top.getter();
}

uint64_t static UnitPoint.bottom.getter()
{
  return static UnitPoint.bottom.getter();
}

uint64_t static UnitPoint.center.getter()
{
  return static UnitPoint.center.getter();
}

uint64_t static UnitPoint.leading.getter()
{
  return static UnitPoint.leading.getter();
}

uint64_t static UnitPoint.trailing.getter()
{
  return static UnitPoint.trailing.getter();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t dispatch thunk of SystemMusicPlayer.queue.getter()
{
  return dispatch thunk of SystemMusicPlayer.queue.getter();
}

uint64_t dispatch thunk of SystemMusicPlayer.queue.setter()
{
  return dispatch thunk of SystemMusicPlayer.queue.setter();
}

uint64_t static SystemMusicPlayer.shared.getter()
{
  return static SystemMusicPlayer.shared.getter();
}

uint64_t type metadata accessor for SystemMusicPlayer()
{
  return type metadata accessor for SystemMusicPlayer();
}

uint64_t static PartialMusicProperty<A>.topSongs.getter()
{
  return static PartialMusicProperty<A>.topSongs.getter();
}

uint64_t static PartialMusicProperty<A>.tracks.getter()
{
  return static PartialMusicProperty<A>.tracks.getter();
}

uint64_t type metadata accessor for MusicDataRequest.ExecutionMethod()
{
  return type metadata accessor for MusicDataRequest.ExecutionMethod();
}

uint64_t static MusicDataRequest.preferredExecutionMethod.setter()
{
  return static MusicDataRequest.preferredExecutionMethod.setter();
}

uint64_t MusicSubscription.canBecomeSubscriber.getter()
{
  return MusicSubscription.canBecomeSubscriber.getter();
}

uint64_t static MusicSubscription.subscriptionUpdates.getter()
{
  return static MusicSubscription.subscriptionUpdates.getter();
}

uint64_t MusicSubscription.Updates.makeAsyncIterator()()
{
  return MusicSubscription.Updates.makeAsyncIterator()();
}

uint64_t type metadata accessor for MusicSubscription.Updates.Iterator()
{
  return type metadata accessor for MusicSubscription.Updates.Iterator();
}

uint64_t type metadata accessor for MusicSubscription.Updates()
{
  return type metadata accessor for MusicSubscription.Updates();
}

uint64_t type metadata accessor for MusicSubscription()
{
  return type metadata accessor for MusicSubscription();
}

uint64_t type metadata accessor for MusicAuthorization.Status()
{
  return type metadata accessor for MusicAuthorization.Status();
}

uint64_t MusicAttributeProperty.init(_:)()
{
  return MusicAttributeProperty.init(_:)();
}

uint64_t MusicCatalogResourceRequest.properties.setter()
{
  return MusicCatalogResourceRequest.properties.setter();
}

uint64_t MusicCatalogResourceRequest.init<A>(matching:equalTo:)()
{
  return MusicCatalogResourceRequest.init<A>(matching:equalTo:)();
}

uint64_t MusicCatalogResourceRequest.init<A>(matching:memberOf:)()
{
  return MusicCatalogResourceRequest.init<A>(matching:memberOf:)();
}

uint64_t MusicCatalogResourceResponse.items.getter()
{
  return MusicCatalogResourceResponse.items.getter();
}

uint64_t dispatch thunk of MusicItem.id.getter()
{
  return dispatch thunk of MusicItem.id.getter();
}

uint64_t MusicItemID.init(_:)()
{
  return MusicItemID.init(_:)();
}

uint64_t dispatch thunk of MusicPlayer.playbackTime.getter()
{
  return dispatch thunk of MusicPlayer.playbackTime.getter();
}

uint64_t type metadata accessor for MusicPlayer.PlaybackStatus()
{
  return type metadata accessor for MusicPlayer.PlaybackStatus();
}

uint64_t dispatch thunk of MusicPlayer.Queue.__allocating_init(arrayLiteral:)()
{
  return dispatch thunk of MusicPlayer.Queue.__allocating_init(arrayLiteral:)();
}

uint64_t dispatch thunk of MusicPlayer.Queue.currentEntry.getter()
{
  return dispatch thunk of MusicPlayer.Queue.currentEntry.getter();
}

uint64_t dispatch thunk of MusicPlayer.Queue.objectWillChange.getter()
{
  return dispatch thunk of MusicPlayer.Queue.objectWillChange.getter();
}

uint64_t MusicPlayer.Queue.Entry.Item.id.getter()
{
  return MusicPlayer.Queue.Entry.Item.id.getter();
}

uint64_t type metadata accessor for MusicPlayer.Queue.Entry.Item()
{
  return type metadata accessor for MusicPlayer.Queue.Entry.Item();
}

uint64_t MusicPlayer.Queue.Entry.item.getter()
{
  return MusicPlayer.Queue.Entry.item.getter();
}

uint64_t MusicPlayer.Queue.Entry.endTime.getter()
{
  return MusicPlayer.Queue.Entry.endTime.getter();
}

uint64_t type metadata accessor for MusicPlayer.Queue.Entry()
{
  return type metadata accessor for MusicPlayer.Queue.Entry();
}

uint64_t type metadata accessor for MusicPlayer.Queue()
{
  return type metadata accessor for MusicPlayer.Queue();
}

uint64_t dispatch thunk of MusicPlayer.State.playbackStatus.getter()
{
  return dispatch thunk of MusicPlayer.State.playbackStatus.getter();
}

uint64_t dispatch thunk of MusicPlayer.State.objectWillChange.getter()
{
  return dispatch thunk of MusicPlayer.State.objectWillChange.getter();
}

uint64_t dispatch thunk of MusicPlayer.pause()()
{
  return dispatch thunk of MusicPlayer.pause()();
}

uint64_t MusicPlayer.state.getter()
{
  return MusicPlayer.state.getter();
}

uint64_t PreviewAsset.url.getter()
{
  return PreviewAsset.url.getter();
}

uint64_t type metadata accessor for PreviewAsset()
{
  return type metadata accessor for PreviewAsset();
}

uint64_t type metadata accessor for ContentRating()
{
  return type metadata accessor for ContentRating();
}

uint64_t Song.albumTitle.getter()
{
  return Song.albumTitle.getter();
}

uint64_t Song.artistName.getter()
{
  return Song.artistName.getter();
}

uint64_t Song.contentRating.getter()
{
  return Song.contentRating.getter();
}

uint64_t Song.previewAssets.getter()
{
  return Song.previewAssets.getter();
}

uint64_t Song.id.getter()
{
  return Song.id.getter();
}

uint64_t Song.url.getter()
{
  return Song.url.getter();
}

uint64_t Song.title.getter()
{
  return Song.title.getter();
}

uint64_t Song.artwork.getter()
{
  return Song.artwork.getter();
}

uint64_t Song.duration.getter()
{
  return Song.duration.getter();
}

uint64_t type metadata accessor for Song()
{
  return type metadata accessor for Song();
}

uint64_t type metadata accessor for Track()
{
  return type metadata accessor for Track();
}

uint64_t Artist.url.getter()
{
  return Artist.url.getter();
}

uint64_t Artist.subscript.getter()
{
  return Artist.subscript.getter();
}

uint64_t Artist.topSongs.getter()
{
  return Artist.topSongs.getter();
}

uint64_t Playlist.standardDescription.getter()
{
  return Playlist.standardDescription.getter();
}

uint64_t Playlist.url.getter()
{
  return Playlist.url.getter();
}

uint64_t Playlist.tracks.getter()
{
  return Playlist.tracks.getter();
}

uint64_t Playlist.artwork.getter()
{
  return Playlist.artwork.getter();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.mapKeys<A>(_:)()
{
  return Dictionary.mapKeys<A>(_:)();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t dispatch thunk of Hashable.hashValue.getter()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

uint64_t BidirectionalCollection.last.getter()
{
  return BidirectionalCollection.last.getter();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t dispatch thunk of static Comparable.<= infix(_:_:)()
{
  return dispatch thunk of static Comparable.<= infix(_:_:)();
}

uint64_t type metadata accessor for ClosedRange()
{
  return type metadata accessor for ClosedRange();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t String.LocalizationValue.init(stringLiteral:)()
{
  return String.LocalizationValue.init(stringLiteral:)();
}

uint64_t type metadata accessor for String.LocalizationValue()
{
  return type metadata accessor for String.LocalizationValue();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return String.data(using:allowLossyConversion:)();
}

uint64_t String.init(format:_:)()
{
  return String.init(format:_:)();
}

uint64_t static String.Encoding.utf8.getter()
{
  return static String.Encoding.utf8.getter();
}

uint64_t type metadata accessor for String.Encoding()
{
  return type metadata accessor for String.Encoding();
}

uint64_t String.init(localized:table:bundle:locale:comment:)()
{
  return String.init(localized:table:bundle:locale:comment:)();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = String.lowercased()();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return dispatch thunk of Sequence.makeIterator()();
}

uint64_t dispatch thunk of Sequence._copyToContiguousArray()()
{
  return dispatch thunk of Sequence._copyToContiguousArray()();
}

uint64_t Sequence.enumerated()()
{
  return Sequence.enumerated()();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return RawRepresentable<>.init(from:)();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t Array._checkSubscript(_:wasNativeTypeChecked:)()
{
  return Array._checkSubscript(_:wasNativeTypeChecked:)();
}

uint64_t static Array.+ infix(_:_:)()
{
  return static Array.+ infix(_:_:)();
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return static Array._allocateUninitialized(_:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

Swift::Bool __swiftcall Array._hoistableIsNativeTypeChecked()()
{
  return Array._hoistableIsNativeTypeChecked()();
}

uint64_t Array.count.getter()
{
  return Array.count.getter();
}

Swift::Int __swiftcall Array._getCount()()
{
  return Array._getCount()();
}

uint64_t type metadata accessor for Array()
{
  return type metadata accessor for Array();
}

uint64_t Array.init<A>(_:)()
{
  return Array.init<A>(_:)();
}

uint64_t Array.subscript.getter()
{
  return Array.subscript.getter();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return CheckedContinuation.resume(throwing:)();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t static MainActor.shared.getter()
{
  return static MainActor.shared.getter();
}

uint64_t type metadata accessor for MainActor()
{
  return type metadata accessor for MainActor();
}

uint64_t static TaskPriority.userInitiated.getter()
{
  return static TaskPriority.userInitiated.getter();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

Swift::Void __swiftcall Task.cancel()()
{
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Set.intersection(_:)()
{
  return Set.intersection(_:)();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t Set.count.getter()
{
  return Set.count.getter();
}

uint64_t Set.insert(_:)()
{
  return Set.insert(_:)();
}

uint64_t Set.remove(_:)()
{
  return Set.remove(_:)();
}

uint64_t Set.isEmpty.getter()
{
  return Set.isEmpty.getter();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return Set.Iterator.init(_cocoa:)();
}

uint64_t Set.contains(_:)()
{
  return Set.contains(_:)();
}

uint64_t type metadata accessor for Set()
{
  return type metadata accessor for Set();
}

uint64_t RandomAccessCollection<>.indices.getter()
{
  return RandomAccessCollection<>.indices.getter();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return dispatch thunk of Collection.startIndex.getter();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return dispatch thunk of Collection.count.getter();
}

uint64_t dispatch thunk of Collection.endIndex.getter()
{
  return dispatch thunk of Collection.endIndex.getter();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return dispatch thunk of Collection.formIndex(after:)();
}

uint64_t Collection.first.getter()
{
  return Collection.first.getter();
}

uint64_t Collection.prefix(_:)()
{
  return Collection.prefix(_:)();
}

uint64_t Collection.isEmpty.getter()
{
  return Collection.isEmpty.getter();
}

uint64_t Collection.dropFirst(_:)()
{
  return Collection.dropFirst(_:)();
}

uint64_t Collection<>.firstIndex(of:)()
{
  return Collection<>.firstIndex(of:)();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return dispatch thunk of Collection.subscript.read();
}

uint64_t Range.contains(_:)()
{
  return Range.contains(_:)();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t NSNotificationCenter.Notifications.makeAsyncIterator()()
{
  return NSNotificationCenter.Notifications.makeAsyncIterator()();
}

uint64_t type metadata accessor for NSNotificationCenter.Notifications.Iterator()
{
  return type metadata accessor for NSNotificationCenter.Notifications.Iterator();
}

uint64_t NSNotificationCenter.notifications(named:object:)()
{
  return NSNotificationCenter.notifications(named:object:)();
}

CMTime __swiftcall CMTime.init(value:timescale:)(Swift::Int64 value, Swift::Int32 timescale)
{
  CMTimeValue v2 = CMTime.init(value:timescale:)(value, *(void *)&timescale);
  result.CMTimeEpoch epoch = v4;
  result.CMTimeScale timescale = v3;
  result.CMTimeFlags flags = HIDWORD(v3);
  result.CMTimeValue value = v2;
  return result;
}

uint64_t CMTime.seconds.getter()
{
  return CMTime.seconds.getter();
}

uint64_t type metadata accessor for NSRunLoop.SchedulerOptions()
{
  return type metadata accessor for NSRunLoop.SchedulerOptions();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t StringProtocol.localizedUppercase.getter()
{
  return StringProtocol.localizedUppercase.getter();
}

uint64_t StringProtocol.localizedStandardCompare<A>(_:)()
{
  return StringProtocol.localizedStandardCompare<A>(_:)();
}

uint64_t StringProtocol.localizedStandardContains<A>(_:)()
{
  return StringProtocol.localizedStandardContains<A>(_:)();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t type metadata accessor for ArraySlice()
{
  return type metadata accessor for ArraySlice();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t __CocoaSet.makeIterator()()
{
  return __CocoaSet.makeIterator()();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return __CocoaSet.Iterator.next()();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static CommandLine.unsafeArgv.getter()
{
  return static CommandLine.unsafeArgv.getter();
}

uint64_t static CommandLine.argc.getter()
{
  return static CommandLine.argc.getter();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

uint64_t type metadata accessor for _SetStorage()
{
  return type metadata accessor for _SetStorage();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t _ArrayBuffer._getElementSlowPath(_:)()
{
  return _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
}

uint64_t type metadata accessor for DecodingError.Context()
{
  return type metadata accessor for DecodingError.Context();
}

uint64_t type metadata accessor for DecodingError()
{
  return type metadata accessor for DecodingError();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t _ArrayProtocol.filter(_:)()
{
  return _ArrayProtocol.filter(_:)();
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t ContiguousArray.append(_:)()
{
  return ContiguousArray.append(_:)();
}

uint64_t ContiguousArray.init()()
{
  return ContiguousArray.init()();
}

uint64_t type metadata accessor for ContiguousArray()
{
  return type metadata accessor for ContiguousArray();
}

uint64_t _arrayForceCast<A, B>(_:)()
{
  return _arrayForceCast<A, B>(_:)();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t type metadata accessor for EnumeratedSequence()
{
  return type metadata accessor for EnumeratedSequence();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return _bridgeAnythingToObjectiveC<A>(_:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return type metadata accessor for __ContiguousArrayStorageBase();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._code.getter()
{
  return Error._code.getter();
}

uint64_t Error._domain.getter()
{
  return Error._domain.getter();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of OptionSet.init(rawValue:)()
{
  return dispatch thunk of OptionSet.init(rawValue:)();
}

uint64_t _typeName(_:qualified:)()
{
  return _typeName(_:qualified:)();
}

uint64_t AnalyticsSendEventLazy()
{
  return _AnalyticsSendEventLazy();
}

CGFloat CGRectGetHeight(CGRect rect)
{
  return _CGRectGetHeight(rect);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

int UIApplicationMain(int argc, char **argv, NSString *principalClassName, NSString *delegateClassName)
{
  return _UIApplicationMain(argc, argv, principalClassName, delegateClassName);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_release(const void *aBlock)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

void bzero(void *a1, size_t a2)
{
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

BOOL os_unfair_lock_trylock(os_unfair_lock_t lock)
{
  return _os_unfair_lock_trylock(lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return _swift_allocateGenericClassMetadata();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_checkMetadataState()
{
  return _swift_checkMetadataState();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_deallocClassInstance()
{
  return _swift_deallocClassInstance();
}

uint64_t swift_deallocObject()
{
  return _swift_deallocObject();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastClass()
{
  return _swift_dynamicCastClass();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return _swift_getAssociatedConformanceWitness();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return _swift_getAssociatedTypeWitness();
}

uint64_t swift_getAtKeyPath()
{
  return _swift_getAtKeyPath();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return _swift_getOpaqueTypeConformance2();
}

uint64_t swift_getOpaqueTypeMetadata2()
{
  return _swift_getOpaqueTypeMetadata2();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTupleTypeMetadata()
{
  return _swift_getTupleTypeMetadata();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return _swift_getTupleTypeMetadata2();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return _swift_getTupleTypeMetadata3();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_task_getMainExecutor()
{
  return _swift_task_getMainExecutor();
}

uint64_t swift_task_isCurrentExecutor()
{
  return _swift_task_isCurrentExecutor();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}